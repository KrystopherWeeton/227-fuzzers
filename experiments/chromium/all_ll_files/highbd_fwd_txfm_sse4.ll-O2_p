; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/highbd_fwd_txfm_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/highbd_fwd_txfm_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@av1_fwd_txfm_shift_ls = external local_unnamed_addr global [19 x i8*], align 16
@av1_fwd_cos_bit_col = external local_unnamed_addr constant [5 x [5 x i8]], align 16
@av1_fwd_cos_bit_row = external local_unnamed_addr constant [5 x [5 x i8]], align 16
@col_highbd_txfm8x8_arr = internal unnamed_addr constant [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*] [void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1], align 16
@row_highbd_txfm8x16_arr = internal unnamed_addr constant [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*] [void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1], align 16
@col_highbd_txfm8x16_arr = internal unnamed_addr constant [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*] [void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx16x16_sse4_1], align 16
@row_highbd_txfm8x8_arr = internal unnamed_addr constant [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*] [void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1], align 16
@col_highbd_txfm4x4_arr = internal unnamed_addr constant [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*] [void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx4x4_sse4_1], align 16
@col_highbd_txfm8x32_arr = internal unnamed_addr constant [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*] [void (<2 x i64>*, <2 x i64>*, i32, i32)* @av1_fdct32_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* @av1_idtx32_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null], align 16
@row_highbd_txfm8x32_arr = internal unnamed_addr constant [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*] [void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx16x16_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null, void (<2 x i64>*, <2 x i64>*, i32, i32)* null], align 16
@col_highbd_txfm4x8_arr = internal unnamed_addr constant [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*] [void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1], align 16
@row_highbd_txfm4x4_arr = internal unnamed_addr constant [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*] [void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx4x4_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst4x4_sse4_1], align 16
@row_highbd_txfm4x8_arr = internal unnamed_addr constant [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*] [void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fdct4x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @idtx8x8_sse4_1, void (<2 x i64>*, <2 x i64>*, i32, i32)* @fadst8x8_sse4_1], align 16
@av1_cospi_arr_data = external local_unnamed_addr constant [7 x [64 x i32]], align 16
@av1_sinpi_arr_data = external local_unnamed_addr constant [7 x [5 x i32]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_4x4_sse4_1(i16* readonly, i32*, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 0), align 16
  switch i8 %3, label %2299 [
    i8 0, label %7
    i8 1, label %156
    i8 2, label %313
    i8 3, label %470
    i8 4, label %635
    i8 5, label %792
    i8 6, label %949
    i8 7, label %1114
    i8 8, label %1279
    i8 9, label %1444
    i8 10, label %1535
    i8 11, label %1655
    i8 12, label %1775
    i8 13, label %1903
    i8 14, label %2031
    i8 15, label %2159
  ]

7:                                                ; preds = %5
  %8 = load i8, i8* %6, align 1
  %9 = sext i8 %8 to i32
  %10 = bitcast i16* %0 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = insertelement <2 x i64> undef, i64 %11, i32 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds i16, i16* %0, i64 %13
  %15 = bitcast i16* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = insertelement <2 x i64> undef, i64 %16, i32 0
  %18 = shl nsw i32 %2, 1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i16, i16* %0, i64 %19
  %21 = bitcast i16* %20 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = insertelement <2 x i64> undef, i64 %22, i32 0
  %24 = mul nsw i32 %2, 3
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i16, i16* %0, i64 %25
  %27 = bitcast i16* %26 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = insertelement <2 x i64> undef, i64 %28, i32 0
  %30 = bitcast <2 x i64> %12 to <8 x i16>
  %31 = bitcast <2 x i64> %17 to <8 x i16>
  %32 = bitcast <2 x i64> %23 to <8 x i16>
  %33 = bitcast <2 x i64> %29 to <8 x i16>
  %34 = shufflevector <8 x i16> %30, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %35 = sext <4 x i16> %34 to <4 x i32>
  %36 = shufflevector <8 x i16> %31, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %37 = sext <4 x i16> %36 to <4 x i32>
  %38 = shufflevector <8 x i16> %32, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %39 = sext <4 x i16> %38 to <4 x i32>
  %40 = shufflevector <8 x i16> %33, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %41 = sext <4 x i16> %40 to <4 x i32>
  %42 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %35, i32 %9) #8
  %43 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %37, i32 %9) #8
  %44 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %39, i32 %9) #8
  %45 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %41, i32 %9) #8
  %46 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 0), align 16
  %47 = sext i8 %46 to i32
  %48 = add nsw i32 %47, -10
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %49, i64 32
  %51 = load i32, i32* %50, align 16
  %52 = insertelement <4 x i32> undef, i32 %51, i32 0
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> zeroinitializer
  %54 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %49, i64 48
  %55 = load i32, i32* %54, align 16
  %56 = insertelement <4 x i32> undef, i32 %55, i32 0
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> zeroinitializer
  %58 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %49, i64 16
  %59 = load i32, i32* %58, align 16
  %60 = insertelement <4 x i32> undef, i32 %59, i32 0
  %61 = shufflevector <4 x i32> %60, <4 x i32> undef, <4 x i32> zeroinitializer
  %62 = add nsw i32 %47, -1
  %63 = shl i32 1, %62
  %64 = insertelement <4 x i32> undef, i32 %63, i32 0
  %65 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> zeroinitializer
  %66 = add <4 x i32> %45, %42
  %67 = sub <4 x i32> %42, %45
  %68 = add <4 x i32> %44, %43
  %69 = sub <4 x i32> %43, %44
  %70 = mul <4 x i32> %53, %66
  %71 = mul <4 x i32> %53, %68
  %72 = add <4 x i32> %65, %70
  %73 = add <4 x i32> %72, %71
  %74 = sub <4 x i32> %72, %71
  %75 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %73, i32 %47) #8
  %76 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %74, i32 %47) #8
  %77 = mul <4 x i32> %57, %69
  %78 = mul <4 x i32> %61, %67
  %79 = add <4 x i32> %77, %65
  %80 = add <4 x i32> %79, %78
  %81 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %80, i32 %47) #8
  %82 = mul <4 x i32> %57, %67
  %83 = add <4 x i32> %82, %65
  %84 = mul <4 x i32> %69, %61
  %85 = sub <4 x i32> %83, %84
  %86 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %85, i32 %47) #8
  %87 = shufflevector <4 x i32> %75, <4 x i32> %81, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %88 = bitcast <4 x i32> %87 to <2 x i64>
  %89 = shufflevector <4 x i32> %75, <4 x i32> %81, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %90 = bitcast <4 x i32> %89 to <2 x i64>
  %91 = shufflevector <4 x i32> %76, <4 x i32> %86, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %92 = bitcast <4 x i32> %91 to <2 x i64>
  %93 = shufflevector <4 x i32> %76, <4 x i32> %86, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %94 = bitcast <4 x i32> %93 to <2 x i64>
  %95 = shufflevector <2 x i64> %88, <2 x i64> %92, <2 x i32> <i32 0, i32 2>
  %96 = shufflevector <2 x i64> %88, <2 x i64> %92, <2 x i32> <i32 1, i32 3>
  %97 = shufflevector <2 x i64> %90, <2 x i64> %94, <2 x i32> <i32 0, i32 2>
  %98 = shufflevector <2 x i64> %90, <2 x i64> %94, <2 x i32> <i32 1, i32 3>
  %99 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 0, i64 0), align 16
  %100 = sext i8 %99 to i32
  %101 = add nsw i32 %100, -10
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %102, i64 32
  %104 = load i32, i32* %103, align 16
  %105 = insertelement <4 x i32> undef, i32 %104, i32 0
  %106 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> zeroinitializer
  %107 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %102, i64 48
  %108 = load i32, i32* %107, align 16
  %109 = insertelement <4 x i32> undef, i32 %108, i32 0
  %110 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> zeroinitializer
  %111 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %102, i64 16
  %112 = load i32, i32* %111, align 16
  %113 = insertelement <4 x i32> undef, i32 %112, i32 0
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> zeroinitializer
  %115 = add nsw i32 %100, -1
  %116 = shl i32 1, %115
  %117 = insertelement <4 x i32> undef, i32 %116, i32 0
  %118 = shufflevector <4 x i32> %117, <4 x i32> undef, <4 x i32> zeroinitializer
  %119 = bitcast <2 x i64> %95 to <4 x i32>
  %120 = bitcast <2 x i64> %98 to <4 x i32>
  %121 = add <4 x i32> %120, %119
  %122 = sub <4 x i32> %119, %120
  %123 = bitcast <2 x i64> %96 to <4 x i32>
  %124 = bitcast <2 x i64> %97 to <4 x i32>
  %125 = add <4 x i32> %124, %123
  %126 = sub <4 x i32> %123, %124
  %127 = mul <4 x i32> %121, %106
  %128 = mul <4 x i32> %125, %106
  %129 = add <4 x i32> %127, %118
  %130 = add <4 x i32> %129, %128
  %131 = sub <4 x i32> %129, %128
  %132 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %130, i32 %100) #8
  %133 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %131, i32 %100) #8
  %134 = mul <4 x i32> %126, %110
  %135 = mul <4 x i32> %114, %122
  %136 = add <4 x i32> %134, %118
  %137 = add <4 x i32> %136, %135
  %138 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %137, i32 %100) #8
  %139 = mul <4 x i32> %122, %110
  %140 = add <4 x i32> %139, %118
  %141 = mul <4 x i32> %126, %114
  %142 = sub <4 x i32> %140, %141
  %143 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %142, i32 %100) #8
  %144 = shufflevector <4 x i32> %132, <4 x i32> %138, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %145 = bitcast <4 x i32> %144 to <2 x i64>
  %146 = shufflevector <4 x i32> %132, <4 x i32> %138, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %147 = bitcast <4 x i32> %146 to <2 x i64>
  %148 = shufflevector <4 x i32> %133, <4 x i32> %143, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %149 = bitcast <4 x i32> %148 to <2 x i64>
  %150 = shufflevector <4 x i32> %133, <4 x i32> %143, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %151 = bitcast <4 x i32> %150 to <2 x i64>
  %152 = shufflevector <2 x i64> %145, <2 x i64> %149, <2 x i32> <i32 0, i32 2>
  %153 = shufflevector <2 x i64> %145, <2 x i64> %149, <2 x i32> <i32 1, i32 3>
  %154 = shufflevector <2 x i64> %147, <2 x i64> %151, <2 x i32> <i32 0, i32 2>
  %155 = shufflevector <2 x i64> %147, <2 x i64> %151, <2 x i32> <i32 1, i32 3>
  br label %2287

156:                                              ; preds = %5
  %157 = load i8, i8* %6, align 1
  %158 = sext i8 %157 to i32
  %159 = bitcast i16* %0 to i64*
  %160 = load i64, i64* %159, align 1
  %161 = insertelement <2 x i64> undef, i64 %160, i32 0
  %162 = sext i32 %2 to i64
  %163 = getelementptr inbounds i16, i16* %0, i64 %162
  %164 = bitcast i16* %163 to i64*
  %165 = load i64, i64* %164, align 1
  %166 = insertelement <2 x i64> undef, i64 %165, i32 0
  %167 = shl nsw i32 %2, 1
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i16, i16* %0, i64 %168
  %170 = bitcast i16* %169 to i64*
  %171 = load i64, i64* %170, align 1
  %172 = insertelement <2 x i64> undef, i64 %171, i32 0
  %173 = mul nsw i32 %2, 3
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i16, i16* %0, i64 %174
  %176 = bitcast i16* %175 to i64*
  %177 = load i64, i64* %176, align 1
  %178 = insertelement <2 x i64> undef, i64 %177, i32 0
  %179 = bitcast <2 x i64> %161 to <8 x i16>
  %180 = bitcast <2 x i64> %166 to <8 x i16>
  %181 = bitcast <2 x i64> %172 to <8 x i16>
  %182 = bitcast <2 x i64> %178 to <8 x i16>
  %183 = shufflevector <8 x i16> %179, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %184 = sext <4 x i16> %183 to <4 x i32>
  %185 = shufflevector <8 x i16> %180, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %186 = sext <4 x i16> %185 to <4 x i32>
  %187 = shufflevector <8 x i16> %181, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %188 = sext <4 x i16> %187 to <4 x i32>
  %189 = shufflevector <8 x i16> %182, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %190 = sext <4 x i16> %189 to <4 x i32>
  %191 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %184, i32 %158) #8
  %192 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %186, i32 %158) #8
  %193 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %188, i32 %158) #8
  %194 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %190, i32 %158) #8
  %195 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 0), align 16
  %196 = sext i8 %195 to i32
  %197 = add nsw i32 %196, -10
  %198 = sext i32 %197 to i64
  %199 = add nsw i32 %196, -1
  %200 = shl i32 1, %199
  %201 = insertelement <4 x i32> undef, i32 %200, i32 0
  %202 = shufflevector <4 x i32> %201, <4 x i32> undef, <4 x i32> zeroinitializer
  %203 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %198, i64 1
  %204 = load i32, i32* %203, align 4
  %205 = insertelement <4 x i32> undef, i32 %204, i32 0
  %206 = shufflevector <4 x i32> %205, <4 x i32> undef, <4 x i32> zeroinitializer
  %207 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %198, i64 2
  %208 = load i32, i32* %207, align 4
  %209 = insertelement <4 x i32> undef, i32 %208, i32 0
  %210 = shufflevector <4 x i32> %209, <4 x i32> undef, <4 x i32> zeroinitializer
  %211 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %198, i64 3
  %212 = load i32, i32* %211, align 4
  %213 = insertelement <4 x i32> undef, i32 %212, i32 0
  %214 = shufflevector <4 x i32> %213, <4 x i32> undef, <4 x i32> zeroinitializer
  %215 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %198, i64 4
  %216 = load i32, i32* %215, align 4
  %217 = insertelement <4 x i32> undef, i32 %216, i32 0
  %218 = shufflevector <4 x i32> %217, <4 x i32> undef, <4 x i32> zeroinitializer
  %219 = mul <4 x i32> %206, %191
  %220 = mul <4 x i32> %218, %191
  %221 = add <4 x i32> %192, %191
  %222 = mul <4 x i32> %210, %192
  %223 = mul <4 x i32> %206, %192
  %224 = mul <4 x i32> %214, %193
  %225 = mul <4 x i32> %218, %194
  %226 = mul <4 x i32> %210, %194
  %227 = sub <4 x i32> %221, %194
  %228 = add <4 x i32> %222, %219
  %229 = add <4 x i32> %228, %225
  %230 = mul <4 x i32> %214, %227
  %231 = sub <4 x i32> %220, %223
  %232 = add <4 x i32> %231, %226
  %233 = add <4 x i32> %224, %202
  %234 = add <4 x i32> %229, %233
  %235 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %234, i32 %196) #8
  %236 = add <4 x i32> %230, %202
  %237 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %236, i32 %196) #8
  %238 = sub <4 x i32> %202, %224
  %239 = add <4 x i32> %238, %232
  %240 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %239, i32 %196) #8
  %241 = sub <4 x i32> %233, %229
  %242 = add <4 x i32> %241, %232
  %243 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %242, i32 %196) #8
  %244 = shufflevector <4 x i32> %235, <4 x i32> %237, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %245 = bitcast <4 x i32> %244 to <2 x i64>
  %246 = shufflevector <4 x i32> %235, <4 x i32> %237, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %247 = bitcast <4 x i32> %246 to <2 x i64>
  %248 = shufflevector <4 x i32> %240, <4 x i32> %243, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %249 = bitcast <4 x i32> %248 to <2 x i64>
  %250 = shufflevector <4 x i32> %240, <4 x i32> %243, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %251 = bitcast <4 x i32> %250 to <2 x i64>
  %252 = shufflevector <2 x i64> %245, <2 x i64> %249, <2 x i32> <i32 0, i32 2>
  %253 = shufflevector <2 x i64> %245, <2 x i64> %249, <2 x i32> <i32 1, i32 3>
  %254 = shufflevector <2 x i64> %247, <2 x i64> %251, <2 x i32> <i32 0, i32 2>
  %255 = shufflevector <2 x i64> %247, <2 x i64> %251, <2 x i32> <i32 1, i32 3>
  %256 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 0, i64 0), align 16
  %257 = sext i8 %256 to i32
  %258 = add nsw i32 %257, -10
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %259, i64 32
  %261 = load i32, i32* %260, align 16
  %262 = insertelement <4 x i32> undef, i32 %261, i32 0
  %263 = shufflevector <4 x i32> %262, <4 x i32> undef, <4 x i32> zeroinitializer
  %264 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %259, i64 48
  %265 = load i32, i32* %264, align 16
  %266 = insertelement <4 x i32> undef, i32 %265, i32 0
  %267 = shufflevector <4 x i32> %266, <4 x i32> undef, <4 x i32> zeroinitializer
  %268 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %259, i64 16
  %269 = load i32, i32* %268, align 16
  %270 = insertelement <4 x i32> undef, i32 %269, i32 0
  %271 = shufflevector <4 x i32> %270, <4 x i32> undef, <4 x i32> zeroinitializer
  %272 = add nsw i32 %257, -1
  %273 = shl i32 1, %272
  %274 = insertelement <4 x i32> undef, i32 %273, i32 0
  %275 = shufflevector <4 x i32> %274, <4 x i32> undef, <4 x i32> zeroinitializer
  %276 = bitcast <2 x i64> %252 to <4 x i32>
  %277 = bitcast <2 x i64> %255 to <4 x i32>
  %278 = add <4 x i32> %277, %276
  %279 = sub <4 x i32> %276, %277
  %280 = bitcast <2 x i64> %253 to <4 x i32>
  %281 = bitcast <2 x i64> %254 to <4 x i32>
  %282 = add <4 x i32> %281, %280
  %283 = sub <4 x i32> %280, %281
  %284 = mul <4 x i32> %278, %263
  %285 = mul <4 x i32> %282, %263
  %286 = add <4 x i32> %284, %275
  %287 = add <4 x i32> %286, %285
  %288 = sub <4 x i32> %286, %285
  %289 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %287, i32 %257) #8
  %290 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %288, i32 %257) #8
  %291 = mul <4 x i32> %283, %267
  %292 = mul <4 x i32> %271, %279
  %293 = add <4 x i32> %291, %275
  %294 = add <4 x i32> %293, %292
  %295 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %294, i32 %257) #8
  %296 = mul <4 x i32> %279, %267
  %297 = add <4 x i32> %296, %275
  %298 = mul <4 x i32> %283, %271
  %299 = sub <4 x i32> %297, %298
  %300 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %299, i32 %257) #8
  %301 = shufflevector <4 x i32> %289, <4 x i32> %295, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %302 = bitcast <4 x i32> %301 to <2 x i64>
  %303 = shufflevector <4 x i32> %289, <4 x i32> %295, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %304 = bitcast <4 x i32> %303 to <2 x i64>
  %305 = shufflevector <4 x i32> %290, <4 x i32> %300, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %306 = bitcast <4 x i32> %305 to <2 x i64>
  %307 = shufflevector <4 x i32> %290, <4 x i32> %300, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %308 = bitcast <4 x i32> %307 to <2 x i64>
  %309 = shufflevector <2 x i64> %302, <2 x i64> %306, <2 x i32> <i32 0, i32 2>
  %310 = shufflevector <2 x i64> %302, <2 x i64> %306, <2 x i32> <i32 1, i32 3>
  %311 = shufflevector <2 x i64> %304, <2 x i64> %308, <2 x i32> <i32 0, i32 2>
  %312 = shufflevector <2 x i64> %304, <2 x i64> %308, <2 x i32> <i32 1, i32 3>
  br label %2287

313:                                              ; preds = %5
  %314 = load i8, i8* %6, align 1
  %315 = sext i8 %314 to i32
  %316 = bitcast i16* %0 to i64*
  %317 = load i64, i64* %316, align 1
  %318 = insertelement <2 x i64> undef, i64 %317, i32 0
  %319 = sext i32 %2 to i64
  %320 = getelementptr inbounds i16, i16* %0, i64 %319
  %321 = bitcast i16* %320 to i64*
  %322 = load i64, i64* %321, align 1
  %323 = insertelement <2 x i64> undef, i64 %322, i32 0
  %324 = shl nsw i32 %2, 1
  %325 = sext i32 %324 to i64
  %326 = getelementptr inbounds i16, i16* %0, i64 %325
  %327 = bitcast i16* %326 to i64*
  %328 = load i64, i64* %327, align 1
  %329 = insertelement <2 x i64> undef, i64 %328, i32 0
  %330 = mul nsw i32 %2, 3
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds i16, i16* %0, i64 %331
  %333 = bitcast i16* %332 to i64*
  %334 = load i64, i64* %333, align 1
  %335 = insertelement <2 x i64> undef, i64 %334, i32 0
  %336 = bitcast <2 x i64> %318 to <8 x i16>
  %337 = bitcast <2 x i64> %323 to <8 x i16>
  %338 = bitcast <2 x i64> %329 to <8 x i16>
  %339 = bitcast <2 x i64> %335 to <8 x i16>
  %340 = shufflevector <8 x i16> %336, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %341 = sext <4 x i16> %340 to <4 x i32>
  %342 = shufflevector <8 x i16> %337, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %343 = sext <4 x i16> %342 to <4 x i32>
  %344 = shufflevector <8 x i16> %338, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %345 = sext <4 x i16> %344 to <4 x i32>
  %346 = shufflevector <8 x i16> %339, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %347 = sext <4 x i16> %346 to <4 x i32>
  %348 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %341, i32 %315) #8
  %349 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %343, i32 %315) #8
  %350 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %345, i32 %315) #8
  %351 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %347, i32 %315) #8
  %352 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 0), align 16
  %353 = sext i8 %352 to i32
  %354 = add nsw i32 %353, -10
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %355, i64 32
  %357 = load i32, i32* %356, align 16
  %358 = insertelement <4 x i32> undef, i32 %357, i32 0
  %359 = shufflevector <4 x i32> %358, <4 x i32> undef, <4 x i32> zeroinitializer
  %360 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %355, i64 48
  %361 = load i32, i32* %360, align 16
  %362 = insertelement <4 x i32> undef, i32 %361, i32 0
  %363 = shufflevector <4 x i32> %362, <4 x i32> undef, <4 x i32> zeroinitializer
  %364 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %355, i64 16
  %365 = load i32, i32* %364, align 16
  %366 = insertelement <4 x i32> undef, i32 %365, i32 0
  %367 = shufflevector <4 x i32> %366, <4 x i32> undef, <4 x i32> zeroinitializer
  %368 = add nsw i32 %353, -1
  %369 = shl i32 1, %368
  %370 = insertelement <4 x i32> undef, i32 %369, i32 0
  %371 = shufflevector <4 x i32> %370, <4 x i32> undef, <4 x i32> zeroinitializer
  %372 = add <4 x i32> %351, %348
  %373 = sub <4 x i32> %348, %351
  %374 = add <4 x i32> %350, %349
  %375 = sub <4 x i32> %349, %350
  %376 = mul <4 x i32> %359, %372
  %377 = mul <4 x i32> %359, %374
  %378 = add <4 x i32> %371, %376
  %379 = add <4 x i32> %378, %377
  %380 = sub <4 x i32> %378, %377
  %381 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %379, i32 %353) #8
  %382 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %380, i32 %353) #8
  %383 = mul <4 x i32> %363, %375
  %384 = mul <4 x i32> %367, %373
  %385 = add <4 x i32> %383, %371
  %386 = add <4 x i32> %385, %384
  %387 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %386, i32 %353) #8
  %388 = mul <4 x i32> %363, %373
  %389 = add <4 x i32> %388, %371
  %390 = mul <4 x i32> %375, %367
  %391 = sub <4 x i32> %389, %390
  %392 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %391, i32 %353) #8
  %393 = shufflevector <4 x i32> %381, <4 x i32> %387, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %394 = bitcast <4 x i32> %393 to <2 x i64>
  %395 = shufflevector <4 x i32> %381, <4 x i32> %387, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %396 = bitcast <4 x i32> %395 to <2 x i64>
  %397 = shufflevector <4 x i32> %382, <4 x i32> %392, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %398 = bitcast <4 x i32> %397 to <2 x i64>
  %399 = shufflevector <4 x i32> %382, <4 x i32> %392, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %400 = bitcast <4 x i32> %399 to <2 x i64>
  %401 = shufflevector <2 x i64> %394, <2 x i64> %398, <2 x i32> <i32 0, i32 2>
  %402 = shufflevector <2 x i64> %394, <2 x i64> %398, <2 x i32> <i32 1, i32 3>
  %403 = shufflevector <2 x i64> %396, <2 x i64> %400, <2 x i32> <i32 0, i32 2>
  %404 = shufflevector <2 x i64> %396, <2 x i64> %400, <2 x i32> <i32 1, i32 3>
  %405 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 0, i64 0), align 16
  %406 = sext i8 %405 to i32
  %407 = add nsw i32 %406, -10
  %408 = sext i32 %407 to i64
  %409 = add nsw i32 %406, -1
  %410 = shl i32 1, %409
  %411 = insertelement <4 x i32> undef, i32 %410, i32 0
  %412 = shufflevector <4 x i32> %411, <4 x i32> undef, <4 x i32> zeroinitializer
  %413 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %408, i64 1
  %414 = load i32, i32* %413, align 4
  %415 = insertelement <4 x i32> undef, i32 %414, i32 0
  %416 = shufflevector <4 x i32> %415, <4 x i32> undef, <4 x i32> zeroinitializer
  %417 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %408, i64 2
  %418 = load i32, i32* %417, align 4
  %419 = insertelement <4 x i32> undef, i32 %418, i32 0
  %420 = shufflevector <4 x i32> %419, <4 x i32> undef, <4 x i32> zeroinitializer
  %421 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %408, i64 3
  %422 = load i32, i32* %421, align 4
  %423 = insertelement <4 x i32> undef, i32 %422, i32 0
  %424 = shufflevector <4 x i32> %423, <4 x i32> undef, <4 x i32> zeroinitializer
  %425 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %408, i64 4
  %426 = load i32, i32* %425, align 4
  %427 = insertelement <4 x i32> undef, i32 %426, i32 0
  %428 = shufflevector <4 x i32> %427, <4 x i32> undef, <4 x i32> zeroinitializer
  %429 = bitcast <2 x i64> %401 to <4 x i32>
  %430 = mul <4 x i32> %416, %429
  %431 = mul <4 x i32> %428, %429
  %432 = bitcast <2 x i64> %402 to <4 x i32>
  %433 = add <4 x i32> %432, %429
  %434 = mul <4 x i32> %420, %432
  %435 = mul <4 x i32> %416, %432
  %436 = bitcast <2 x i64> %403 to <4 x i32>
  %437 = mul <4 x i32> %424, %436
  %438 = bitcast <2 x i64> %404 to <4 x i32>
  %439 = mul <4 x i32> %428, %438
  %440 = mul <4 x i32> %420, %438
  %441 = sub <4 x i32> %433, %438
  %442 = add <4 x i32> %434, %430
  %443 = add <4 x i32> %442, %439
  %444 = mul <4 x i32> %441, %424
  %445 = sub <4 x i32> %431, %435
  %446 = add <4 x i32> %445, %440
  %447 = add <4 x i32> %437, %412
  %448 = add <4 x i32> %443, %447
  %449 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %448, i32 %406) #8
  %450 = add <4 x i32> %444, %412
  %451 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %450, i32 %406) #8
  %452 = sub <4 x i32> %412, %437
  %453 = add <4 x i32> %452, %446
  %454 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %453, i32 %406) #8
  %455 = sub <4 x i32> %447, %443
  %456 = add <4 x i32> %455, %446
  %457 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %456, i32 %406) #8
  %458 = shufflevector <4 x i32> %449, <4 x i32> %451, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %459 = bitcast <4 x i32> %458 to <2 x i64>
  %460 = shufflevector <4 x i32> %449, <4 x i32> %451, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %461 = bitcast <4 x i32> %460 to <2 x i64>
  %462 = shufflevector <4 x i32> %454, <4 x i32> %457, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %463 = bitcast <4 x i32> %462 to <2 x i64>
  %464 = shufflevector <4 x i32> %454, <4 x i32> %457, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %465 = bitcast <4 x i32> %464 to <2 x i64>
  %466 = shufflevector <2 x i64> %459, <2 x i64> %463, <2 x i32> <i32 0, i32 2>
  %467 = shufflevector <2 x i64> %459, <2 x i64> %463, <2 x i32> <i32 1, i32 3>
  %468 = shufflevector <2 x i64> %461, <2 x i64> %465, <2 x i32> <i32 0, i32 2>
  %469 = shufflevector <2 x i64> %461, <2 x i64> %465, <2 x i32> <i32 1, i32 3>
  br label %2287

470:                                              ; preds = %5
  %471 = load i8, i8* %6, align 1
  %472 = sext i8 %471 to i32
  %473 = bitcast i16* %0 to i64*
  %474 = load i64, i64* %473, align 1
  %475 = insertelement <2 x i64> undef, i64 %474, i32 0
  %476 = sext i32 %2 to i64
  %477 = getelementptr inbounds i16, i16* %0, i64 %476
  %478 = bitcast i16* %477 to i64*
  %479 = load i64, i64* %478, align 1
  %480 = insertelement <2 x i64> undef, i64 %479, i32 0
  %481 = shl nsw i32 %2, 1
  %482 = sext i32 %481 to i64
  %483 = getelementptr inbounds i16, i16* %0, i64 %482
  %484 = bitcast i16* %483 to i64*
  %485 = load i64, i64* %484, align 1
  %486 = insertelement <2 x i64> undef, i64 %485, i32 0
  %487 = mul nsw i32 %2, 3
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds i16, i16* %0, i64 %488
  %490 = bitcast i16* %489 to i64*
  %491 = load i64, i64* %490, align 1
  %492 = insertelement <2 x i64> undef, i64 %491, i32 0
  %493 = bitcast <2 x i64> %475 to <8 x i16>
  %494 = bitcast <2 x i64> %480 to <8 x i16>
  %495 = bitcast <2 x i64> %486 to <8 x i16>
  %496 = bitcast <2 x i64> %492 to <8 x i16>
  %497 = shufflevector <8 x i16> %493, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %498 = sext <4 x i16> %497 to <4 x i32>
  %499 = shufflevector <8 x i16> %494, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %500 = sext <4 x i16> %499 to <4 x i32>
  %501 = shufflevector <8 x i16> %495, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %502 = sext <4 x i16> %501 to <4 x i32>
  %503 = shufflevector <8 x i16> %496, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %504 = sext <4 x i16> %503 to <4 x i32>
  %505 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %498, i32 %472) #8
  %506 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %500, i32 %472) #8
  %507 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %502, i32 %472) #8
  %508 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %504, i32 %472) #8
  %509 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 0), align 16
  %510 = sext i8 %509 to i32
  %511 = add nsw i32 %510, -10
  %512 = sext i32 %511 to i64
  %513 = add nsw i32 %510, -1
  %514 = shl i32 1, %513
  %515 = insertelement <4 x i32> undef, i32 %514, i32 0
  %516 = shufflevector <4 x i32> %515, <4 x i32> undef, <4 x i32> zeroinitializer
  %517 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %512, i64 1
  %518 = load i32, i32* %517, align 4
  %519 = insertelement <4 x i32> undef, i32 %518, i32 0
  %520 = shufflevector <4 x i32> %519, <4 x i32> undef, <4 x i32> zeroinitializer
  %521 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %512, i64 2
  %522 = load i32, i32* %521, align 4
  %523 = insertelement <4 x i32> undef, i32 %522, i32 0
  %524 = shufflevector <4 x i32> %523, <4 x i32> undef, <4 x i32> zeroinitializer
  %525 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %512, i64 3
  %526 = load i32, i32* %525, align 4
  %527 = insertelement <4 x i32> undef, i32 %526, i32 0
  %528 = shufflevector <4 x i32> %527, <4 x i32> undef, <4 x i32> zeroinitializer
  %529 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %512, i64 4
  %530 = load i32, i32* %529, align 4
  %531 = insertelement <4 x i32> undef, i32 %530, i32 0
  %532 = shufflevector <4 x i32> %531, <4 x i32> undef, <4 x i32> zeroinitializer
  %533 = mul <4 x i32> %520, %505
  %534 = mul <4 x i32> %532, %505
  %535 = add <4 x i32> %506, %505
  %536 = mul <4 x i32> %524, %506
  %537 = mul <4 x i32> %520, %506
  %538 = mul <4 x i32> %528, %507
  %539 = mul <4 x i32> %532, %508
  %540 = mul <4 x i32> %524, %508
  %541 = sub <4 x i32> %535, %508
  %542 = add <4 x i32> %536, %533
  %543 = add <4 x i32> %542, %539
  %544 = mul <4 x i32> %528, %541
  %545 = sub <4 x i32> %534, %537
  %546 = add <4 x i32> %545, %540
  %547 = add <4 x i32> %538, %516
  %548 = add <4 x i32> %543, %547
  %549 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %548, i32 %510) #8
  %550 = add <4 x i32> %544, %516
  %551 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %550, i32 %510) #8
  %552 = sub <4 x i32> %516, %538
  %553 = add <4 x i32> %552, %546
  %554 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %553, i32 %510) #8
  %555 = sub <4 x i32> %547, %543
  %556 = add <4 x i32> %555, %546
  %557 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %556, i32 %510) #8
  %558 = shufflevector <4 x i32> %549, <4 x i32> %551, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %559 = bitcast <4 x i32> %558 to <2 x i64>
  %560 = shufflevector <4 x i32> %549, <4 x i32> %551, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %561 = bitcast <4 x i32> %560 to <2 x i64>
  %562 = shufflevector <4 x i32> %554, <4 x i32> %557, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %563 = bitcast <4 x i32> %562 to <2 x i64>
  %564 = shufflevector <4 x i32> %554, <4 x i32> %557, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %565 = bitcast <4 x i32> %564 to <2 x i64>
  %566 = shufflevector <2 x i64> %559, <2 x i64> %563, <2 x i32> <i32 0, i32 2>
  %567 = shufflevector <2 x i64> %559, <2 x i64> %563, <2 x i32> <i32 1, i32 3>
  %568 = shufflevector <2 x i64> %561, <2 x i64> %565, <2 x i32> <i32 0, i32 2>
  %569 = shufflevector <2 x i64> %561, <2 x i64> %565, <2 x i32> <i32 1, i32 3>
  %570 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 0, i64 0), align 16
  %571 = sext i8 %570 to i32
  %572 = add nsw i32 %571, -10
  %573 = sext i32 %572 to i64
  %574 = add nsw i32 %571, -1
  %575 = shl i32 1, %574
  %576 = insertelement <4 x i32> undef, i32 %575, i32 0
  %577 = shufflevector <4 x i32> %576, <4 x i32> undef, <4 x i32> zeroinitializer
  %578 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %573, i64 1
  %579 = load i32, i32* %578, align 4
  %580 = insertelement <4 x i32> undef, i32 %579, i32 0
  %581 = shufflevector <4 x i32> %580, <4 x i32> undef, <4 x i32> zeroinitializer
  %582 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %573, i64 2
  %583 = load i32, i32* %582, align 4
  %584 = insertelement <4 x i32> undef, i32 %583, i32 0
  %585 = shufflevector <4 x i32> %584, <4 x i32> undef, <4 x i32> zeroinitializer
  %586 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %573, i64 3
  %587 = load i32, i32* %586, align 4
  %588 = insertelement <4 x i32> undef, i32 %587, i32 0
  %589 = shufflevector <4 x i32> %588, <4 x i32> undef, <4 x i32> zeroinitializer
  %590 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %573, i64 4
  %591 = load i32, i32* %590, align 4
  %592 = insertelement <4 x i32> undef, i32 %591, i32 0
  %593 = shufflevector <4 x i32> %592, <4 x i32> undef, <4 x i32> zeroinitializer
  %594 = bitcast <2 x i64> %566 to <4 x i32>
  %595 = mul <4 x i32> %581, %594
  %596 = mul <4 x i32> %593, %594
  %597 = bitcast <2 x i64> %567 to <4 x i32>
  %598 = add <4 x i32> %597, %594
  %599 = mul <4 x i32> %585, %597
  %600 = mul <4 x i32> %581, %597
  %601 = bitcast <2 x i64> %568 to <4 x i32>
  %602 = mul <4 x i32> %589, %601
  %603 = bitcast <2 x i64> %569 to <4 x i32>
  %604 = mul <4 x i32> %593, %603
  %605 = mul <4 x i32> %585, %603
  %606 = sub <4 x i32> %598, %603
  %607 = add <4 x i32> %599, %595
  %608 = add <4 x i32> %607, %604
  %609 = mul <4 x i32> %606, %589
  %610 = sub <4 x i32> %596, %600
  %611 = add <4 x i32> %610, %605
  %612 = add <4 x i32> %602, %577
  %613 = add <4 x i32> %608, %612
  %614 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %613, i32 %571) #8
  %615 = add <4 x i32> %609, %577
  %616 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %615, i32 %571) #8
  %617 = sub <4 x i32> %577, %602
  %618 = add <4 x i32> %617, %611
  %619 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %618, i32 %571) #8
  %620 = sub <4 x i32> %612, %608
  %621 = add <4 x i32> %620, %611
  %622 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %621, i32 %571) #8
  %623 = shufflevector <4 x i32> %614, <4 x i32> %616, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %624 = bitcast <4 x i32> %623 to <2 x i64>
  %625 = shufflevector <4 x i32> %614, <4 x i32> %616, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %626 = bitcast <4 x i32> %625 to <2 x i64>
  %627 = shufflevector <4 x i32> %619, <4 x i32> %622, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %628 = bitcast <4 x i32> %627 to <2 x i64>
  %629 = shufflevector <4 x i32> %619, <4 x i32> %622, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %630 = bitcast <4 x i32> %629 to <2 x i64>
  %631 = shufflevector <2 x i64> %624, <2 x i64> %628, <2 x i32> <i32 0, i32 2>
  %632 = shufflevector <2 x i64> %624, <2 x i64> %628, <2 x i32> <i32 1, i32 3>
  %633 = shufflevector <2 x i64> %626, <2 x i64> %630, <2 x i32> <i32 0, i32 2>
  %634 = shufflevector <2 x i64> %626, <2 x i64> %630, <2 x i32> <i32 1, i32 3>
  br label %2287

635:                                              ; preds = %5
  %636 = load i8, i8* %6, align 1
  %637 = sext i8 %636 to i32
  %638 = mul nsw i32 %2, 3
  %639 = sext i32 %638 to i64
  %640 = getelementptr inbounds i16, i16* %0, i64 %639
  %641 = bitcast i16* %640 to i64*
  %642 = load i64, i64* %641, align 1
  %643 = insertelement <2 x i64> undef, i64 %642, i32 0
  %644 = shl nsw i32 %2, 1
  %645 = sext i32 %644 to i64
  %646 = getelementptr inbounds i16, i16* %0, i64 %645
  %647 = bitcast i16* %646 to i64*
  %648 = load i64, i64* %647, align 1
  %649 = insertelement <2 x i64> undef, i64 %648, i32 0
  %650 = sext i32 %2 to i64
  %651 = getelementptr inbounds i16, i16* %0, i64 %650
  %652 = bitcast i16* %651 to i64*
  %653 = load i64, i64* %652, align 1
  %654 = insertelement <2 x i64> undef, i64 %653, i32 0
  %655 = bitcast i16* %0 to i64*
  %656 = load i64, i64* %655, align 1
  %657 = insertelement <2 x i64> undef, i64 %656, i32 0
  %658 = bitcast <2 x i64> %643 to <8 x i16>
  %659 = bitcast <2 x i64> %649 to <8 x i16>
  %660 = bitcast <2 x i64> %654 to <8 x i16>
  %661 = bitcast <2 x i64> %657 to <8 x i16>
  %662 = shufflevector <8 x i16> %658, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %663 = sext <4 x i16> %662 to <4 x i32>
  %664 = shufflevector <8 x i16> %659, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %665 = sext <4 x i16> %664 to <4 x i32>
  %666 = shufflevector <8 x i16> %660, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %667 = sext <4 x i16> %666 to <4 x i32>
  %668 = shufflevector <8 x i16> %661, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %669 = sext <4 x i16> %668 to <4 x i32>
  %670 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %663, i32 %637) #8
  %671 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %665, i32 %637) #8
  %672 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %667, i32 %637) #8
  %673 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %669, i32 %637) #8
  %674 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 0), align 16
  %675 = sext i8 %674 to i32
  %676 = add nsw i32 %675, -10
  %677 = sext i32 %676 to i64
  %678 = add nsw i32 %675, -1
  %679 = shl i32 1, %678
  %680 = insertelement <4 x i32> undef, i32 %679, i32 0
  %681 = shufflevector <4 x i32> %680, <4 x i32> undef, <4 x i32> zeroinitializer
  %682 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %677, i64 1
  %683 = load i32, i32* %682, align 4
  %684 = insertelement <4 x i32> undef, i32 %683, i32 0
  %685 = shufflevector <4 x i32> %684, <4 x i32> undef, <4 x i32> zeroinitializer
  %686 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %677, i64 2
  %687 = load i32, i32* %686, align 4
  %688 = insertelement <4 x i32> undef, i32 %687, i32 0
  %689 = shufflevector <4 x i32> %688, <4 x i32> undef, <4 x i32> zeroinitializer
  %690 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %677, i64 3
  %691 = load i32, i32* %690, align 4
  %692 = insertelement <4 x i32> undef, i32 %691, i32 0
  %693 = shufflevector <4 x i32> %692, <4 x i32> undef, <4 x i32> zeroinitializer
  %694 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %677, i64 4
  %695 = load i32, i32* %694, align 4
  %696 = insertelement <4 x i32> undef, i32 %695, i32 0
  %697 = shufflevector <4 x i32> %696, <4 x i32> undef, <4 x i32> zeroinitializer
  %698 = mul <4 x i32> %685, %670
  %699 = mul <4 x i32> %697, %670
  %700 = add <4 x i32> %671, %670
  %701 = mul <4 x i32> %689, %671
  %702 = mul <4 x i32> %685, %671
  %703 = mul <4 x i32> %693, %672
  %704 = mul <4 x i32> %697, %673
  %705 = mul <4 x i32> %689, %673
  %706 = sub <4 x i32> %700, %673
  %707 = add <4 x i32> %701, %698
  %708 = add <4 x i32> %707, %704
  %709 = mul <4 x i32> %693, %706
  %710 = sub <4 x i32> %699, %702
  %711 = add <4 x i32> %710, %705
  %712 = add <4 x i32> %703, %681
  %713 = add <4 x i32> %708, %712
  %714 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %713, i32 %675) #8
  %715 = add <4 x i32> %709, %681
  %716 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %715, i32 %675) #8
  %717 = sub <4 x i32> %681, %703
  %718 = add <4 x i32> %717, %711
  %719 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %718, i32 %675) #8
  %720 = sub <4 x i32> %712, %708
  %721 = add <4 x i32> %720, %711
  %722 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %721, i32 %675) #8
  %723 = shufflevector <4 x i32> %714, <4 x i32> %716, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %724 = bitcast <4 x i32> %723 to <2 x i64>
  %725 = shufflevector <4 x i32> %714, <4 x i32> %716, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %726 = bitcast <4 x i32> %725 to <2 x i64>
  %727 = shufflevector <4 x i32> %719, <4 x i32> %722, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %728 = bitcast <4 x i32> %727 to <2 x i64>
  %729 = shufflevector <4 x i32> %719, <4 x i32> %722, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %730 = bitcast <4 x i32> %729 to <2 x i64>
  %731 = shufflevector <2 x i64> %724, <2 x i64> %728, <2 x i32> <i32 0, i32 2>
  %732 = shufflevector <2 x i64> %724, <2 x i64> %728, <2 x i32> <i32 1, i32 3>
  %733 = shufflevector <2 x i64> %726, <2 x i64> %730, <2 x i32> <i32 0, i32 2>
  %734 = shufflevector <2 x i64> %726, <2 x i64> %730, <2 x i32> <i32 1, i32 3>
  %735 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 0, i64 0), align 16
  %736 = sext i8 %735 to i32
  %737 = add nsw i32 %736, -10
  %738 = sext i32 %737 to i64
  %739 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %738, i64 32
  %740 = load i32, i32* %739, align 16
  %741 = insertelement <4 x i32> undef, i32 %740, i32 0
  %742 = shufflevector <4 x i32> %741, <4 x i32> undef, <4 x i32> zeroinitializer
  %743 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %738, i64 48
  %744 = load i32, i32* %743, align 16
  %745 = insertelement <4 x i32> undef, i32 %744, i32 0
  %746 = shufflevector <4 x i32> %745, <4 x i32> undef, <4 x i32> zeroinitializer
  %747 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %738, i64 16
  %748 = load i32, i32* %747, align 16
  %749 = insertelement <4 x i32> undef, i32 %748, i32 0
  %750 = shufflevector <4 x i32> %749, <4 x i32> undef, <4 x i32> zeroinitializer
  %751 = add nsw i32 %736, -1
  %752 = shl i32 1, %751
  %753 = insertelement <4 x i32> undef, i32 %752, i32 0
  %754 = shufflevector <4 x i32> %753, <4 x i32> undef, <4 x i32> zeroinitializer
  %755 = bitcast <2 x i64> %731 to <4 x i32>
  %756 = bitcast <2 x i64> %734 to <4 x i32>
  %757 = add <4 x i32> %756, %755
  %758 = sub <4 x i32> %755, %756
  %759 = bitcast <2 x i64> %732 to <4 x i32>
  %760 = bitcast <2 x i64> %733 to <4 x i32>
  %761 = add <4 x i32> %760, %759
  %762 = sub <4 x i32> %759, %760
  %763 = mul <4 x i32> %757, %742
  %764 = mul <4 x i32> %761, %742
  %765 = add <4 x i32> %763, %754
  %766 = add <4 x i32> %765, %764
  %767 = sub <4 x i32> %765, %764
  %768 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %766, i32 %736) #8
  %769 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %767, i32 %736) #8
  %770 = mul <4 x i32> %762, %746
  %771 = mul <4 x i32> %750, %758
  %772 = add <4 x i32> %770, %754
  %773 = add <4 x i32> %772, %771
  %774 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %773, i32 %736) #8
  %775 = mul <4 x i32> %758, %746
  %776 = add <4 x i32> %775, %754
  %777 = mul <4 x i32> %762, %750
  %778 = sub <4 x i32> %776, %777
  %779 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %778, i32 %736) #8
  %780 = shufflevector <4 x i32> %768, <4 x i32> %774, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %781 = bitcast <4 x i32> %780 to <2 x i64>
  %782 = shufflevector <4 x i32> %768, <4 x i32> %774, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %783 = bitcast <4 x i32> %782 to <2 x i64>
  %784 = shufflevector <4 x i32> %769, <4 x i32> %779, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %785 = bitcast <4 x i32> %784 to <2 x i64>
  %786 = shufflevector <4 x i32> %769, <4 x i32> %779, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %787 = bitcast <4 x i32> %786 to <2 x i64>
  %788 = shufflevector <2 x i64> %781, <2 x i64> %785, <2 x i32> <i32 0, i32 2>
  %789 = shufflevector <2 x i64> %781, <2 x i64> %785, <2 x i32> <i32 1, i32 3>
  %790 = shufflevector <2 x i64> %783, <2 x i64> %787, <2 x i32> <i32 0, i32 2>
  %791 = shufflevector <2 x i64> %783, <2 x i64> %787, <2 x i32> <i32 1, i32 3>
  br label %2287

792:                                              ; preds = %5
  %793 = load i8, i8* %6, align 1
  %794 = sext i8 %793 to i32
  %795 = bitcast i16* %0 to i64*
  %796 = load i64, i64* %795, align 1
  %797 = insertelement <2 x i64> undef, i64 %796, i32 0
  %798 = sext i32 %2 to i64
  %799 = getelementptr inbounds i16, i16* %0, i64 %798
  %800 = bitcast i16* %799 to i64*
  %801 = load i64, i64* %800, align 1
  %802 = insertelement <2 x i64> undef, i64 %801, i32 0
  %803 = shl nsw i32 %2, 1
  %804 = sext i32 %803 to i64
  %805 = getelementptr inbounds i16, i16* %0, i64 %804
  %806 = bitcast i16* %805 to i64*
  %807 = load i64, i64* %806, align 1
  %808 = insertelement <2 x i64> undef, i64 %807, i32 0
  %809 = mul nsw i32 %2, 3
  %810 = sext i32 %809 to i64
  %811 = getelementptr inbounds i16, i16* %0, i64 %810
  %812 = bitcast i16* %811 to i64*
  %813 = load i64, i64* %812, align 1
  %814 = insertelement <2 x i64> undef, i64 %813, i32 0
  %815 = bitcast <2 x i64> %797 to <8 x i16>
  %816 = bitcast <2 x i64> %802 to <8 x i16>
  %817 = bitcast <2 x i64> %808 to <8 x i16>
  %818 = bitcast <2 x i64> %814 to <8 x i16>
  %819 = shufflevector <8 x i16> %815, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %820 = sext <4 x i16> %819 to <4 x i32>
  %821 = shufflevector <8 x i16> %816, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %822 = sext <4 x i16> %821 to <4 x i32>
  %823 = shufflevector <8 x i16> %817, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %824 = sext <4 x i16> %823 to <4 x i32>
  %825 = shufflevector <8 x i16> %818, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %826 = sext <4 x i16> %825 to <4 x i32>
  %827 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %820, i32 %794) #8
  %828 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %822, i32 %794) #8
  %829 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %824, i32 %794) #8
  %830 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %826, i32 %794) #8
  %831 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 0), align 16
  %832 = sext i8 %831 to i32
  %833 = add nsw i32 %832, -10
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %834, i64 32
  %836 = load i32, i32* %835, align 16
  %837 = insertelement <4 x i32> undef, i32 %836, i32 0
  %838 = shufflevector <4 x i32> %837, <4 x i32> undef, <4 x i32> zeroinitializer
  %839 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %834, i64 48
  %840 = load i32, i32* %839, align 16
  %841 = insertelement <4 x i32> undef, i32 %840, i32 0
  %842 = shufflevector <4 x i32> %841, <4 x i32> undef, <4 x i32> zeroinitializer
  %843 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %834, i64 16
  %844 = load i32, i32* %843, align 16
  %845 = insertelement <4 x i32> undef, i32 %844, i32 0
  %846 = shufflevector <4 x i32> %845, <4 x i32> undef, <4 x i32> zeroinitializer
  %847 = add nsw i32 %832, -1
  %848 = shl i32 1, %847
  %849 = insertelement <4 x i32> undef, i32 %848, i32 0
  %850 = shufflevector <4 x i32> %849, <4 x i32> undef, <4 x i32> zeroinitializer
  %851 = add <4 x i32> %830, %827
  %852 = sub <4 x i32> %827, %830
  %853 = add <4 x i32> %829, %828
  %854 = sub <4 x i32> %828, %829
  %855 = mul <4 x i32> %838, %851
  %856 = mul <4 x i32> %838, %853
  %857 = add <4 x i32> %850, %855
  %858 = add <4 x i32> %857, %856
  %859 = sub <4 x i32> %857, %856
  %860 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %858, i32 %832) #8
  %861 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %859, i32 %832) #8
  %862 = mul <4 x i32> %842, %854
  %863 = mul <4 x i32> %846, %852
  %864 = add <4 x i32> %862, %850
  %865 = add <4 x i32> %864, %863
  %866 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %865, i32 %832) #8
  %867 = mul <4 x i32> %842, %852
  %868 = add <4 x i32> %867, %850
  %869 = mul <4 x i32> %854, %846
  %870 = sub <4 x i32> %868, %869
  %871 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %870, i32 %832) #8
  %872 = shufflevector <4 x i32> %860, <4 x i32> %866, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %873 = bitcast <4 x i32> %872 to <2 x i64>
  %874 = shufflevector <4 x i32> %860, <4 x i32> %866, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %875 = bitcast <4 x i32> %874 to <2 x i64>
  %876 = shufflevector <4 x i32> %861, <4 x i32> %871, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %877 = bitcast <4 x i32> %876 to <2 x i64>
  %878 = shufflevector <4 x i32> %861, <4 x i32> %871, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %879 = bitcast <4 x i32> %878 to <2 x i64>
  %880 = shufflevector <2 x i64> %873, <2 x i64> %877, <2 x i32> <i32 0, i32 2>
  %881 = shufflevector <2 x i64> %873, <2 x i64> %877, <2 x i32> <i32 1, i32 3>
  %882 = shufflevector <2 x i64> %875, <2 x i64> %879, <2 x i32> <i32 0, i32 2>
  %883 = shufflevector <2 x i64> %875, <2 x i64> %879, <2 x i32> <i32 1, i32 3>
  %884 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 0, i64 0), align 16
  %885 = sext i8 %884 to i32
  %886 = add nsw i32 %885, -10
  %887 = sext i32 %886 to i64
  %888 = add nsw i32 %885, -1
  %889 = shl i32 1, %888
  %890 = insertelement <4 x i32> undef, i32 %889, i32 0
  %891 = shufflevector <4 x i32> %890, <4 x i32> undef, <4 x i32> zeroinitializer
  %892 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %887, i64 1
  %893 = load i32, i32* %892, align 4
  %894 = insertelement <4 x i32> undef, i32 %893, i32 0
  %895 = shufflevector <4 x i32> %894, <4 x i32> undef, <4 x i32> zeroinitializer
  %896 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %887, i64 2
  %897 = load i32, i32* %896, align 4
  %898 = insertelement <4 x i32> undef, i32 %897, i32 0
  %899 = shufflevector <4 x i32> %898, <4 x i32> undef, <4 x i32> zeroinitializer
  %900 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %887, i64 3
  %901 = load i32, i32* %900, align 4
  %902 = insertelement <4 x i32> undef, i32 %901, i32 0
  %903 = shufflevector <4 x i32> %902, <4 x i32> undef, <4 x i32> zeroinitializer
  %904 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %887, i64 4
  %905 = load i32, i32* %904, align 4
  %906 = insertelement <4 x i32> undef, i32 %905, i32 0
  %907 = shufflevector <4 x i32> %906, <4 x i32> undef, <4 x i32> zeroinitializer
  %908 = bitcast <2 x i64> %880 to <4 x i32>
  %909 = mul <4 x i32> %895, %908
  %910 = mul <4 x i32> %907, %908
  %911 = bitcast <2 x i64> %881 to <4 x i32>
  %912 = add <4 x i32> %911, %908
  %913 = mul <4 x i32> %899, %911
  %914 = mul <4 x i32> %895, %911
  %915 = bitcast <2 x i64> %882 to <4 x i32>
  %916 = mul <4 x i32> %903, %915
  %917 = bitcast <2 x i64> %883 to <4 x i32>
  %918 = mul <4 x i32> %907, %917
  %919 = mul <4 x i32> %899, %917
  %920 = sub <4 x i32> %912, %917
  %921 = add <4 x i32> %913, %909
  %922 = add <4 x i32> %921, %918
  %923 = mul <4 x i32> %920, %903
  %924 = sub <4 x i32> %910, %914
  %925 = add <4 x i32> %924, %919
  %926 = add <4 x i32> %916, %891
  %927 = add <4 x i32> %922, %926
  %928 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %927, i32 %885) #8
  %929 = add <4 x i32> %923, %891
  %930 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %929, i32 %885) #8
  %931 = sub <4 x i32> %891, %916
  %932 = add <4 x i32> %931, %925
  %933 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %932, i32 %885) #8
  %934 = sub <4 x i32> %926, %922
  %935 = add <4 x i32> %934, %925
  %936 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %935, i32 %885) #8
  %937 = shufflevector <4 x i32> %928, <4 x i32> %930, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %938 = bitcast <4 x i32> %937 to <2 x i64>
  %939 = shufflevector <4 x i32> %928, <4 x i32> %930, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %940 = bitcast <4 x i32> %939 to <2 x i64>
  %941 = shufflevector <4 x i32> %933, <4 x i32> %936, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %942 = bitcast <4 x i32> %941 to <2 x i64>
  %943 = shufflevector <4 x i32> %933, <4 x i32> %936, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %944 = bitcast <4 x i32> %943 to <2 x i64>
  %945 = shufflevector <2 x i64> %938, <2 x i64> %942, <2 x i32> <i32 0, i32 2>
  %946 = shufflevector <2 x i64> %938, <2 x i64> %942, <2 x i32> <i32 1, i32 3>
  %947 = shufflevector <2 x i64> %940, <2 x i64> %944, <2 x i32> <i32 0, i32 2>
  %948 = shufflevector <2 x i64> %940, <2 x i64> %944, <2 x i32> <i32 1, i32 3>
  br label %2287

949:                                              ; preds = %5
  %950 = load i8, i8* %6, align 1
  %951 = sext i8 %950 to i32
  %952 = mul nsw i32 %2, 3
  %953 = sext i32 %952 to i64
  %954 = getelementptr inbounds i16, i16* %0, i64 %953
  %955 = bitcast i16* %954 to i64*
  %956 = load i64, i64* %955, align 1
  %957 = insertelement <2 x i64> undef, i64 %956, i32 0
  %958 = shl nsw i32 %2, 1
  %959 = sext i32 %958 to i64
  %960 = getelementptr inbounds i16, i16* %0, i64 %959
  %961 = bitcast i16* %960 to i64*
  %962 = load i64, i64* %961, align 1
  %963 = insertelement <2 x i64> undef, i64 %962, i32 0
  %964 = sext i32 %2 to i64
  %965 = getelementptr inbounds i16, i16* %0, i64 %964
  %966 = bitcast i16* %965 to i64*
  %967 = load i64, i64* %966, align 1
  %968 = insertelement <2 x i64> undef, i64 %967, i32 0
  %969 = bitcast i16* %0 to i64*
  %970 = load i64, i64* %969, align 1
  %971 = insertelement <2 x i64> undef, i64 %970, i32 0
  %972 = bitcast <2 x i64> %957 to <8 x i16>
  %973 = bitcast <2 x i64> %963 to <8 x i16>
  %974 = bitcast <2 x i64> %968 to <8 x i16>
  %975 = bitcast <2 x i64> %971 to <8 x i16>
  %976 = shufflevector <8 x i16> %972, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %977 = sext <4 x i16> %976 to <4 x i32>
  %978 = shufflevector <8 x i16> %973, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %979 = sext <4 x i16> %978 to <4 x i32>
  %980 = shufflevector <8 x i16> %974, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %981 = sext <4 x i16> %980 to <4 x i32>
  %982 = shufflevector <8 x i16> %975, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %983 = sext <4 x i16> %982 to <4 x i32>
  %984 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %977, i32 %951) #8
  %985 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %979, i32 %951) #8
  %986 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %981, i32 %951) #8
  %987 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %983, i32 %951) #8
  %988 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 0), align 16
  %989 = sext i8 %988 to i32
  %990 = add nsw i32 %989, -10
  %991 = sext i32 %990 to i64
  %992 = add nsw i32 %989, -1
  %993 = shl i32 1, %992
  %994 = insertelement <4 x i32> undef, i32 %993, i32 0
  %995 = shufflevector <4 x i32> %994, <4 x i32> undef, <4 x i32> zeroinitializer
  %996 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %991, i64 1
  %997 = load i32, i32* %996, align 4
  %998 = insertelement <4 x i32> undef, i32 %997, i32 0
  %999 = shufflevector <4 x i32> %998, <4 x i32> undef, <4 x i32> zeroinitializer
  %1000 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %991, i64 2
  %1001 = load i32, i32* %1000, align 4
  %1002 = insertelement <4 x i32> undef, i32 %1001, i32 0
  %1003 = shufflevector <4 x i32> %1002, <4 x i32> undef, <4 x i32> zeroinitializer
  %1004 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %991, i64 3
  %1005 = load i32, i32* %1004, align 4
  %1006 = insertelement <4 x i32> undef, i32 %1005, i32 0
  %1007 = shufflevector <4 x i32> %1006, <4 x i32> undef, <4 x i32> zeroinitializer
  %1008 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %991, i64 4
  %1009 = load i32, i32* %1008, align 4
  %1010 = insertelement <4 x i32> undef, i32 %1009, i32 0
  %1011 = shufflevector <4 x i32> %1010, <4 x i32> undef, <4 x i32> zeroinitializer
  %1012 = mul <4 x i32> %999, %984
  %1013 = mul <4 x i32> %1011, %984
  %1014 = add <4 x i32> %985, %984
  %1015 = mul <4 x i32> %1003, %985
  %1016 = mul <4 x i32> %999, %985
  %1017 = mul <4 x i32> %1007, %986
  %1018 = mul <4 x i32> %1011, %987
  %1019 = mul <4 x i32> %1003, %987
  %1020 = sub <4 x i32> %1014, %987
  %1021 = add <4 x i32> %1015, %1012
  %1022 = add <4 x i32> %1021, %1018
  %1023 = mul <4 x i32> %1007, %1020
  %1024 = sub <4 x i32> %1013, %1016
  %1025 = add <4 x i32> %1024, %1019
  %1026 = add <4 x i32> %1017, %995
  %1027 = add <4 x i32> %1022, %1026
  %1028 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1027, i32 %989) #8
  %1029 = add <4 x i32> %1023, %995
  %1030 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1029, i32 %989) #8
  %1031 = sub <4 x i32> %995, %1017
  %1032 = add <4 x i32> %1031, %1025
  %1033 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1032, i32 %989) #8
  %1034 = sub <4 x i32> %1026, %1022
  %1035 = add <4 x i32> %1034, %1025
  %1036 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1035, i32 %989) #8
  %1037 = shufflevector <4 x i32> %1028, <4 x i32> %1030, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1038 = bitcast <4 x i32> %1037 to <2 x i64>
  %1039 = shufflevector <4 x i32> %1028, <4 x i32> %1030, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1040 = bitcast <4 x i32> %1039 to <2 x i64>
  %1041 = shufflevector <4 x i32> %1033, <4 x i32> %1036, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1042 = bitcast <4 x i32> %1041 to <2 x i64>
  %1043 = shufflevector <4 x i32> %1033, <4 x i32> %1036, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1044 = bitcast <4 x i32> %1043 to <2 x i64>
  %1045 = shufflevector <2 x i64> %1038, <2 x i64> %1042, <2 x i32> <i32 0, i32 2>
  %1046 = shufflevector <2 x i64> %1038, <2 x i64> %1042, <2 x i32> <i32 1, i32 3>
  %1047 = shufflevector <2 x i64> %1040, <2 x i64> %1044, <2 x i32> <i32 0, i32 2>
  %1048 = shufflevector <2 x i64> %1040, <2 x i64> %1044, <2 x i32> <i32 1, i32 3>
  %1049 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 0, i64 0), align 16
  %1050 = sext i8 %1049 to i32
  %1051 = add nsw i32 %1050, -10
  %1052 = sext i32 %1051 to i64
  %1053 = add nsw i32 %1050, -1
  %1054 = shl i32 1, %1053
  %1055 = insertelement <4 x i32> undef, i32 %1054, i32 0
  %1056 = shufflevector <4 x i32> %1055, <4 x i32> undef, <4 x i32> zeroinitializer
  %1057 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1052, i64 1
  %1058 = load i32, i32* %1057, align 4
  %1059 = insertelement <4 x i32> undef, i32 %1058, i32 0
  %1060 = shufflevector <4 x i32> %1059, <4 x i32> undef, <4 x i32> zeroinitializer
  %1061 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1052, i64 2
  %1062 = load i32, i32* %1061, align 4
  %1063 = insertelement <4 x i32> undef, i32 %1062, i32 0
  %1064 = shufflevector <4 x i32> %1063, <4 x i32> undef, <4 x i32> zeroinitializer
  %1065 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1052, i64 3
  %1066 = load i32, i32* %1065, align 4
  %1067 = insertelement <4 x i32> undef, i32 %1066, i32 0
  %1068 = shufflevector <4 x i32> %1067, <4 x i32> undef, <4 x i32> zeroinitializer
  %1069 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1052, i64 4
  %1070 = load i32, i32* %1069, align 4
  %1071 = insertelement <4 x i32> undef, i32 %1070, i32 0
  %1072 = shufflevector <4 x i32> %1071, <4 x i32> undef, <4 x i32> zeroinitializer
  %1073 = bitcast <2 x i64> %1045 to <4 x i32>
  %1074 = mul <4 x i32> %1060, %1073
  %1075 = mul <4 x i32> %1072, %1073
  %1076 = bitcast <2 x i64> %1046 to <4 x i32>
  %1077 = add <4 x i32> %1076, %1073
  %1078 = mul <4 x i32> %1064, %1076
  %1079 = mul <4 x i32> %1060, %1076
  %1080 = bitcast <2 x i64> %1047 to <4 x i32>
  %1081 = mul <4 x i32> %1068, %1080
  %1082 = bitcast <2 x i64> %1048 to <4 x i32>
  %1083 = mul <4 x i32> %1072, %1082
  %1084 = mul <4 x i32> %1064, %1082
  %1085 = sub <4 x i32> %1077, %1082
  %1086 = add <4 x i32> %1078, %1074
  %1087 = add <4 x i32> %1086, %1083
  %1088 = mul <4 x i32> %1085, %1068
  %1089 = sub <4 x i32> %1075, %1079
  %1090 = add <4 x i32> %1089, %1084
  %1091 = add <4 x i32> %1081, %1056
  %1092 = add <4 x i32> %1087, %1091
  %1093 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1092, i32 %1050) #8
  %1094 = add <4 x i32> %1088, %1056
  %1095 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1094, i32 %1050) #8
  %1096 = sub <4 x i32> %1056, %1081
  %1097 = add <4 x i32> %1096, %1090
  %1098 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1097, i32 %1050) #8
  %1099 = sub <4 x i32> %1091, %1087
  %1100 = add <4 x i32> %1099, %1090
  %1101 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1100, i32 %1050) #8
  %1102 = shufflevector <4 x i32> %1093, <4 x i32> %1095, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1103 = bitcast <4 x i32> %1102 to <2 x i64>
  %1104 = shufflevector <4 x i32> %1093, <4 x i32> %1095, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1105 = bitcast <4 x i32> %1104 to <2 x i64>
  %1106 = shufflevector <4 x i32> %1098, <4 x i32> %1101, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1107 = bitcast <4 x i32> %1106 to <2 x i64>
  %1108 = shufflevector <4 x i32> %1098, <4 x i32> %1101, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1109 = bitcast <4 x i32> %1108 to <2 x i64>
  %1110 = shufflevector <2 x i64> %1103, <2 x i64> %1107, <2 x i32> <i32 0, i32 2>
  %1111 = shufflevector <2 x i64> %1103, <2 x i64> %1107, <2 x i32> <i32 1, i32 3>
  %1112 = shufflevector <2 x i64> %1105, <2 x i64> %1109, <2 x i32> <i32 0, i32 2>
  %1113 = shufflevector <2 x i64> %1105, <2 x i64> %1109, <2 x i32> <i32 1, i32 3>
  br label %2287

1114:                                             ; preds = %5
  %1115 = load i8, i8* %6, align 1
  %1116 = sext i8 %1115 to i32
  %1117 = bitcast i16* %0 to i64*
  %1118 = load i64, i64* %1117, align 1
  %1119 = insertelement <2 x i64> undef, i64 %1118, i32 0
  %1120 = sext i32 %2 to i64
  %1121 = getelementptr inbounds i16, i16* %0, i64 %1120
  %1122 = bitcast i16* %1121 to i64*
  %1123 = load i64, i64* %1122, align 1
  %1124 = insertelement <2 x i64> undef, i64 %1123, i32 0
  %1125 = shl nsw i32 %2, 1
  %1126 = sext i32 %1125 to i64
  %1127 = getelementptr inbounds i16, i16* %0, i64 %1126
  %1128 = bitcast i16* %1127 to i64*
  %1129 = load i64, i64* %1128, align 1
  %1130 = insertelement <2 x i64> undef, i64 %1129, i32 0
  %1131 = mul nsw i32 %2, 3
  %1132 = sext i32 %1131 to i64
  %1133 = getelementptr inbounds i16, i16* %0, i64 %1132
  %1134 = bitcast i16* %1133 to i64*
  %1135 = load i64, i64* %1134, align 1
  %1136 = insertelement <2 x i64> undef, i64 %1135, i32 0
  %1137 = bitcast <2 x i64> %1119 to <8 x i16>
  %1138 = bitcast <2 x i64> %1124 to <8 x i16>
  %1139 = bitcast <2 x i64> %1130 to <8 x i16>
  %1140 = bitcast <2 x i64> %1136 to <8 x i16>
  %1141 = shufflevector <8 x i16> %1137, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1142 = sext <4 x i16> %1141 to <4 x i32>
  %1143 = shufflevector <8 x i16> %1138, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1144 = sext <4 x i16> %1143 to <4 x i32>
  %1145 = shufflevector <8 x i16> %1139, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1146 = sext <4 x i16> %1145 to <4 x i32>
  %1147 = shufflevector <8 x i16> %1140, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1148 = sext <4 x i16> %1147 to <4 x i32>
  %1149 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1142, i32 %1116) #8
  %1150 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1144, i32 %1116) #8
  %1151 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1146, i32 %1116) #8
  %1152 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1148, i32 %1116) #8
  %1153 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 0), align 16
  %1154 = sext i8 %1153 to i32
  %1155 = add nsw i32 %1154, -10
  %1156 = sext i32 %1155 to i64
  %1157 = add nsw i32 %1154, -1
  %1158 = shl i32 1, %1157
  %1159 = insertelement <4 x i32> undef, i32 %1158, i32 0
  %1160 = shufflevector <4 x i32> %1159, <4 x i32> undef, <4 x i32> zeroinitializer
  %1161 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1156, i64 1
  %1162 = load i32, i32* %1161, align 4
  %1163 = insertelement <4 x i32> undef, i32 %1162, i32 0
  %1164 = shufflevector <4 x i32> %1163, <4 x i32> undef, <4 x i32> zeroinitializer
  %1165 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1156, i64 2
  %1166 = load i32, i32* %1165, align 4
  %1167 = insertelement <4 x i32> undef, i32 %1166, i32 0
  %1168 = shufflevector <4 x i32> %1167, <4 x i32> undef, <4 x i32> zeroinitializer
  %1169 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1156, i64 3
  %1170 = load i32, i32* %1169, align 4
  %1171 = insertelement <4 x i32> undef, i32 %1170, i32 0
  %1172 = shufflevector <4 x i32> %1171, <4 x i32> undef, <4 x i32> zeroinitializer
  %1173 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1156, i64 4
  %1174 = load i32, i32* %1173, align 4
  %1175 = insertelement <4 x i32> undef, i32 %1174, i32 0
  %1176 = shufflevector <4 x i32> %1175, <4 x i32> undef, <4 x i32> zeroinitializer
  %1177 = mul <4 x i32> %1164, %1149
  %1178 = mul <4 x i32> %1176, %1149
  %1179 = add <4 x i32> %1150, %1149
  %1180 = mul <4 x i32> %1168, %1150
  %1181 = mul <4 x i32> %1164, %1150
  %1182 = mul <4 x i32> %1172, %1151
  %1183 = mul <4 x i32> %1176, %1152
  %1184 = mul <4 x i32> %1168, %1152
  %1185 = sub <4 x i32> %1179, %1152
  %1186 = add <4 x i32> %1180, %1177
  %1187 = add <4 x i32> %1186, %1183
  %1188 = mul <4 x i32> %1172, %1185
  %1189 = sub <4 x i32> %1178, %1181
  %1190 = add <4 x i32> %1189, %1184
  %1191 = add <4 x i32> %1182, %1160
  %1192 = add <4 x i32> %1187, %1191
  %1193 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1192, i32 %1154) #8
  %1194 = add <4 x i32> %1188, %1160
  %1195 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1194, i32 %1154) #8
  %1196 = sub <4 x i32> %1160, %1182
  %1197 = add <4 x i32> %1196, %1190
  %1198 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1197, i32 %1154) #8
  %1199 = sub <4 x i32> %1191, %1187
  %1200 = add <4 x i32> %1199, %1190
  %1201 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1200, i32 %1154) #8
  %1202 = shufflevector <4 x i32> %1193, <4 x i32> %1195, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1203 = bitcast <4 x i32> %1202 to <2 x i64>
  %1204 = shufflevector <4 x i32> %1193, <4 x i32> %1195, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1205 = bitcast <4 x i32> %1204 to <2 x i64>
  %1206 = shufflevector <4 x i32> %1198, <4 x i32> %1201, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1207 = bitcast <4 x i32> %1206 to <2 x i64>
  %1208 = shufflevector <4 x i32> %1198, <4 x i32> %1201, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1209 = bitcast <4 x i32> %1208 to <2 x i64>
  %1210 = shufflevector <2 x i64> %1203, <2 x i64> %1207, <2 x i32> <i32 0, i32 2>
  %1211 = shufflevector <2 x i64> %1203, <2 x i64> %1207, <2 x i32> <i32 1, i32 3>
  %1212 = shufflevector <2 x i64> %1205, <2 x i64> %1209, <2 x i32> <i32 0, i32 2>
  %1213 = shufflevector <2 x i64> %1205, <2 x i64> %1209, <2 x i32> <i32 1, i32 3>
  %1214 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 0, i64 0), align 16
  %1215 = sext i8 %1214 to i32
  %1216 = add nsw i32 %1215, -10
  %1217 = sext i32 %1216 to i64
  %1218 = add nsw i32 %1215, -1
  %1219 = shl i32 1, %1218
  %1220 = insertelement <4 x i32> undef, i32 %1219, i32 0
  %1221 = shufflevector <4 x i32> %1220, <4 x i32> undef, <4 x i32> zeroinitializer
  %1222 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1217, i64 1
  %1223 = load i32, i32* %1222, align 4
  %1224 = insertelement <4 x i32> undef, i32 %1223, i32 0
  %1225 = shufflevector <4 x i32> %1224, <4 x i32> undef, <4 x i32> zeroinitializer
  %1226 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1217, i64 2
  %1227 = load i32, i32* %1226, align 4
  %1228 = insertelement <4 x i32> undef, i32 %1227, i32 0
  %1229 = shufflevector <4 x i32> %1228, <4 x i32> undef, <4 x i32> zeroinitializer
  %1230 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1217, i64 3
  %1231 = load i32, i32* %1230, align 4
  %1232 = insertelement <4 x i32> undef, i32 %1231, i32 0
  %1233 = shufflevector <4 x i32> %1232, <4 x i32> undef, <4 x i32> zeroinitializer
  %1234 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1217, i64 4
  %1235 = load i32, i32* %1234, align 4
  %1236 = insertelement <4 x i32> undef, i32 %1235, i32 0
  %1237 = shufflevector <4 x i32> %1236, <4 x i32> undef, <4 x i32> zeroinitializer
  %1238 = bitcast <2 x i64> %1210 to <4 x i32>
  %1239 = mul <4 x i32> %1225, %1238
  %1240 = mul <4 x i32> %1237, %1238
  %1241 = bitcast <2 x i64> %1211 to <4 x i32>
  %1242 = add <4 x i32> %1241, %1238
  %1243 = mul <4 x i32> %1229, %1241
  %1244 = mul <4 x i32> %1225, %1241
  %1245 = bitcast <2 x i64> %1212 to <4 x i32>
  %1246 = mul <4 x i32> %1233, %1245
  %1247 = bitcast <2 x i64> %1213 to <4 x i32>
  %1248 = mul <4 x i32> %1237, %1247
  %1249 = mul <4 x i32> %1229, %1247
  %1250 = sub <4 x i32> %1242, %1247
  %1251 = add <4 x i32> %1243, %1239
  %1252 = add <4 x i32> %1251, %1248
  %1253 = mul <4 x i32> %1250, %1233
  %1254 = sub <4 x i32> %1240, %1244
  %1255 = add <4 x i32> %1254, %1249
  %1256 = add <4 x i32> %1246, %1221
  %1257 = add <4 x i32> %1252, %1256
  %1258 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1257, i32 %1215) #8
  %1259 = add <4 x i32> %1253, %1221
  %1260 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1259, i32 %1215) #8
  %1261 = sub <4 x i32> %1221, %1246
  %1262 = add <4 x i32> %1261, %1255
  %1263 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1262, i32 %1215) #8
  %1264 = sub <4 x i32> %1256, %1252
  %1265 = add <4 x i32> %1264, %1255
  %1266 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1265, i32 %1215) #8
  %1267 = shufflevector <4 x i32> %1258, <4 x i32> %1260, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1268 = bitcast <4 x i32> %1267 to <2 x i64>
  %1269 = shufflevector <4 x i32> %1258, <4 x i32> %1260, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1270 = bitcast <4 x i32> %1269 to <2 x i64>
  %1271 = shufflevector <4 x i32> %1263, <4 x i32> %1266, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1272 = bitcast <4 x i32> %1271 to <2 x i64>
  %1273 = shufflevector <4 x i32> %1263, <4 x i32> %1266, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1274 = bitcast <4 x i32> %1273 to <2 x i64>
  %1275 = shufflevector <2 x i64> %1268, <2 x i64> %1272, <2 x i32> <i32 0, i32 2>
  %1276 = shufflevector <2 x i64> %1268, <2 x i64> %1272, <2 x i32> <i32 1, i32 3>
  %1277 = shufflevector <2 x i64> %1270, <2 x i64> %1274, <2 x i32> <i32 0, i32 2>
  %1278 = shufflevector <2 x i64> %1270, <2 x i64> %1274, <2 x i32> <i32 1, i32 3>
  br label %2287

1279:                                             ; preds = %5
  %1280 = load i8, i8* %6, align 1
  %1281 = sext i8 %1280 to i32
  %1282 = mul nsw i32 %2, 3
  %1283 = sext i32 %1282 to i64
  %1284 = getelementptr inbounds i16, i16* %0, i64 %1283
  %1285 = bitcast i16* %1284 to i64*
  %1286 = load i64, i64* %1285, align 1
  %1287 = insertelement <2 x i64> undef, i64 %1286, i32 0
  %1288 = shl nsw i32 %2, 1
  %1289 = sext i32 %1288 to i64
  %1290 = getelementptr inbounds i16, i16* %0, i64 %1289
  %1291 = bitcast i16* %1290 to i64*
  %1292 = load i64, i64* %1291, align 1
  %1293 = insertelement <2 x i64> undef, i64 %1292, i32 0
  %1294 = sext i32 %2 to i64
  %1295 = getelementptr inbounds i16, i16* %0, i64 %1294
  %1296 = bitcast i16* %1295 to i64*
  %1297 = load i64, i64* %1296, align 1
  %1298 = insertelement <2 x i64> undef, i64 %1297, i32 0
  %1299 = bitcast i16* %0 to i64*
  %1300 = load i64, i64* %1299, align 1
  %1301 = insertelement <2 x i64> undef, i64 %1300, i32 0
  %1302 = bitcast <2 x i64> %1287 to <8 x i16>
  %1303 = bitcast <2 x i64> %1293 to <8 x i16>
  %1304 = bitcast <2 x i64> %1298 to <8 x i16>
  %1305 = bitcast <2 x i64> %1301 to <8 x i16>
  %1306 = shufflevector <8 x i16> %1302, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1307 = sext <4 x i16> %1306 to <4 x i32>
  %1308 = shufflevector <8 x i16> %1303, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1309 = sext <4 x i16> %1308 to <4 x i32>
  %1310 = shufflevector <8 x i16> %1304, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1311 = sext <4 x i16> %1310 to <4 x i32>
  %1312 = shufflevector <8 x i16> %1305, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1313 = sext <4 x i16> %1312 to <4 x i32>
  %1314 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1307, i32 %1281) #8
  %1315 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1309, i32 %1281) #8
  %1316 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1311, i32 %1281) #8
  %1317 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1313, i32 %1281) #8
  %1318 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 0), align 16
  %1319 = sext i8 %1318 to i32
  %1320 = add nsw i32 %1319, -10
  %1321 = sext i32 %1320 to i64
  %1322 = add nsw i32 %1319, -1
  %1323 = shl i32 1, %1322
  %1324 = insertelement <4 x i32> undef, i32 %1323, i32 0
  %1325 = shufflevector <4 x i32> %1324, <4 x i32> undef, <4 x i32> zeroinitializer
  %1326 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1321, i64 1
  %1327 = load i32, i32* %1326, align 4
  %1328 = insertelement <4 x i32> undef, i32 %1327, i32 0
  %1329 = shufflevector <4 x i32> %1328, <4 x i32> undef, <4 x i32> zeroinitializer
  %1330 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1321, i64 2
  %1331 = load i32, i32* %1330, align 4
  %1332 = insertelement <4 x i32> undef, i32 %1331, i32 0
  %1333 = shufflevector <4 x i32> %1332, <4 x i32> undef, <4 x i32> zeroinitializer
  %1334 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1321, i64 3
  %1335 = load i32, i32* %1334, align 4
  %1336 = insertelement <4 x i32> undef, i32 %1335, i32 0
  %1337 = shufflevector <4 x i32> %1336, <4 x i32> undef, <4 x i32> zeroinitializer
  %1338 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1321, i64 4
  %1339 = load i32, i32* %1338, align 4
  %1340 = insertelement <4 x i32> undef, i32 %1339, i32 0
  %1341 = shufflevector <4 x i32> %1340, <4 x i32> undef, <4 x i32> zeroinitializer
  %1342 = mul <4 x i32> %1329, %1314
  %1343 = mul <4 x i32> %1341, %1314
  %1344 = add <4 x i32> %1315, %1314
  %1345 = mul <4 x i32> %1333, %1315
  %1346 = mul <4 x i32> %1329, %1315
  %1347 = mul <4 x i32> %1337, %1316
  %1348 = mul <4 x i32> %1341, %1317
  %1349 = mul <4 x i32> %1333, %1317
  %1350 = sub <4 x i32> %1344, %1317
  %1351 = add <4 x i32> %1345, %1342
  %1352 = add <4 x i32> %1351, %1348
  %1353 = mul <4 x i32> %1337, %1350
  %1354 = sub <4 x i32> %1343, %1346
  %1355 = add <4 x i32> %1354, %1349
  %1356 = add <4 x i32> %1347, %1325
  %1357 = add <4 x i32> %1352, %1356
  %1358 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1357, i32 %1319) #8
  %1359 = add <4 x i32> %1353, %1325
  %1360 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1359, i32 %1319) #8
  %1361 = sub <4 x i32> %1325, %1347
  %1362 = add <4 x i32> %1361, %1355
  %1363 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1362, i32 %1319) #8
  %1364 = sub <4 x i32> %1356, %1352
  %1365 = add <4 x i32> %1364, %1355
  %1366 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1365, i32 %1319) #8
  %1367 = shufflevector <4 x i32> %1358, <4 x i32> %1360, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1368 = bitcast <4 x i32> %1367 to <2 x i64>
  %1369 = shufflevector <4 x i32> %1358, <4 x i32> %1360, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1370 = bitcast <4 x i32> %1369 to <2 x i64>
  %1371 = shufflevector <4 x i32> %1363, <4 x i32> %1366, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1372 = bitcast <4 x i32> %1371 to <2 x i64>
  %1373 = shufflevector <4 x i32> %1363, <4 x i32> %1366, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1374 = bitcast <4 x i32> %1373 to <2 x i64>
  %1375 = shufflevector <2 x i64> %1368, <2 x i64> %1372, <2 x i32> <i32 0, i32 2>
  %1376 = shufflevector <2 x i64> %1368, <2 x i64> %1372, <2 x i32> <i32 1, i32 3>
  %1377 = shufflevector <2 x i64> %1370, <2 x i64> %1374, <2 x i32> <i32 0, i32 2>
  %1378 = shufflevector <2 x i64> %1370, <2 x i64> %1374, <2 x i32> <i32 1, i32 3>
  %1379 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 0, i64 0), align 16
  %1380 = sext i8 %1379 to i32
  %1381 = add nsw i32 %1380, -10
  %1382 = sext i32 %1381 to i64
  %1383 = add nsw i32 %1380, -1
  %1384 = shl i32 1, %1383
  %1385 = insertelement <4 x i32> undef, i32 %1384, i32 0
  %1386 = shufflevector <4 x i32> %1385, <4 x i32> undef, <4 x i32> zeroinitializer
  %1387 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1382, i64 1
  %1388 = load i32, i32* %1387, align 4
  %1389 = insertelement <4 x i32> undef, i32 %1388, i32 0
  %1390 = shufflevector <4 x i32> %1389, <4 x i32> undef, <4 x i32> zeroinitializer
  %1391 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1382, i64 2
  %1392 = load i32, i32* %1391, align 4
  %1393 = insertelement <4 x i32> undef, i32 %1392, i32 0
  %1394 = shufflevector <4 x i32> %1393, <4 x i32> undef, <4 x i32> zeroinitializer
  %1395 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1382, i64 3
  %1396 = load i32, i32* %1395, align 4
  %1397 = insertelement <4 x i32> undef, i32 %1396, i32 0
  %1398 = shufflevector <4 x i32> %1397, <4 x i32> undef, <4 x i32> zeroinitializer
  %1399 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1382, i64 4
  %1400 = load i32, i32* %1399, align 4
  %1401 = insertelement <4 x i32> undef, i32 %1400, i32 0
  %1402 = shufflevector <4 x i32> %1401, <4 x i32> undef, <4 x i32> zeroinitializer
  %1403 = bitcast <2 x i64> %1375 to <4 x i32>
  %1404 = mul <4 x i32> %1390, %1403
  %1405 = mul <4 x i32> %1402, %1403
  %1406 = bitcast <2 x i64> %1376 to <4 x i32>
  %1407 = add <4 x i32> %1406, %1403
  %1408 = mul <4 x i32> %1394, %1406
  %1409 = mul <4 x i32> %1390, %1406
  %1410 = bitcast <2 x i64> %1377 to <4 x i32>
  %1411 = mul <4 x i32> %1398, %1410
  %1412 = bitcast <2 x i64> %1378 to <4 x i32>
  %1413 = mul <4 x i32> %1402, %1412
  %1414 = mul <4 x i32> %1394, %1412
  %1415 = sub <4 x i32> %1407, %1412
  %1416 = add <4 x i32> %1408, %1404
  %1417 = add <4 x i32> %1416, %1413
  %1418 = mul <4 x i32> %1415, %1398
  %1419 = sub <4 x i32> %1405, %1409
  %1420 = add <4 x i32> %1419, %1414
  %1421 = add <4 x i32> %1411, %1386
  %1422 = add <4 x i32> %1417, %1421
  %1423 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1422, i32 %1380) #8
  %1424 = add <4 x i32> %1418, %1386
  %1425 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1424, i32 %1380) #8
  %1426 = sub <4 x i32> %1386, %1411
  %1427 = add <4 x i32> %1426, %1420
  %1428 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1427, i32 %1380) #8
  %1429 = sub <4 x i32> %1421, %1417
  %1430 = add <4 x i32> %1429, %1420
  %1431 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1430, i32 %1380) #8
  %1432 = shufflevector <4 x i32> %1423, <4 x i32> %1425, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1433 = bitcast <4 x i32> %1432 to <2 x i64>
  %1434 = shufflevector <4 x i32> %1423, <4 x i32> %1425, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1435 = bitcast <4 x i32> %1434 to <2 x i64>
  %1436 = shufflevector <4 x i32> %1428, <4 x i32> %1431, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1437 = bitcast <4 x i32> %1436 to <2 x i64>
  %1438 = shufflevector <4 x i32> %1428, <4 x i32> %1431, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1439 = bitcast <4 x i32> %1438 to <2 x i64>
  %1440 = shufflevector <2 x i64> %1433, <2 x i64> %1437, <2 x i32> <i32 0, i32 2>
  %1441 = shufflevector <2 x i64> %1433, <2 x i64> %1437, <2 x i32> <i32 1, i32 3>
  %1442 = shufflevector <2 x i64> %1435, <2 x i64> %1439, <2 x i32> <i32 0, i32 2>
  %1443 = shufflevector <2 x i64> %1435, <2 x i64> %1439, <2 x i32> <i32 1, i32 3>
  br label %2287

1444:                                             ; preds = %5
  %1445 = load i8, i8* %6, align 1
  %1446 = sext i8 %1445 to i32
  %1447 = bitcast i16* %0 to i64*
  %1448 = load i64, i64* %1447, align 1
  %1449 = insertelement <2 x i64> undef, i64 %1448, i32 0
  %1450 = sext i32 %2 to i64
  %1451 = getelementptr inbounds i16, i16* %0, i64 %1450
  %1452 = bitcast i16* %1451 to i64*
  %1453 = load i64, i64* %1452, align 1
  %1454 = insertelement <2 x i64> undef, i64 %1453, i32 0
  %1455 = shl nsw i32 %2, 1
  %1456 = sext i32 %1455 to i64
  %1457 = getelementptr inbounds i16, i16* %0, i64 %1456
  %1458 = bitcast i16* %1457 to i64*
  %1459 = load i64, i64* %1458, align 1
  %1460 = insertelement <2 x i64> undef, i64 %1459, i32 0
  %1461 = mul nsw i32 %2, 3
  %1462 = sext i32 %1461 to i64
  %1463 = getelementptr inbounds i16, i16* %0, i64 %1462
  %1464 = bitcast i16* %1463 to i64*
  %1465 = load i64, i64* %1464, align 1
  %1466 = insertelement <2 x i64> undef, i64 %1465, i32 0
  %1467 = bitcast <2 x i64> %1449 to <8 x i16>
  %1468 = bitcast <2 x i64> %1454 to <8 x i16>
  %1469 = bitcast <2 x i64> %1460 to <8 x i16>
  %1470 = bitcast <2 x i64> %1466 to <8 x i16>
  %1471 = shufflevector <8 x i16> %1467, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1472 = sext <4 x i16> %1471 to <4 x i32>
  %1473 = shufflevector <8 x i16> %1468, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1474 = sext <4 x i16> %1473 to <4 x i32>
  %1475 = shufflevector <8 x i16> %1469, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1476 = sext <4 x i16> %1475 to <4 x i32>
  %1477 = shufflevector <8 x i16> %1470, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1478 = sext <4 x i16> %1477 to <4 x i32>
  %1479 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1472, i32 %1446) #8
  %1480 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1474, i32 %1446) #8
  %1481 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1476, i32 %1446) #8
  %1482 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1478, i32 %1446) #8
  %1483 = mul <4 x i32> %1479, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1484 = add <4 x i32> %1483, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1485 = ashr <4 x i32> %1484, <i32 12, i32 12, i32 12, i32 12>
  %1486 = mul <4 x i32> %1480, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1487 = add <4 x i32> %1486, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1488 = ashr <4 x i32> %1487, <i32 12, i32 12, i32 12, i32 12>
  %1489 = mul <4 x i32> %1481, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1490 = add <4 x i32> %1489, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1491 = ashr <4 x i32> %1490, <i32 12, i32 12, i32 12, i32 12>
  %1492 = mul <4 x i32> %1482, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1493 = add <4 x i32> %1492, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1494 = ashr <4 x i32> %1493, <i32 12, i32 12, i32 12, i32 12>
  %1495 = shufflevector <4 x i32> %1485, <4 x i32> %1488, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1496 = bitcast <4 x i32> %1495 to <2 x i64>
  %1497 = shufflevector <4 x i32> %1485, <4 x i32> %1488, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1498 = bitcast <4 x i32> %1497 to <2 x i64>
  %1499 = shufflevector <4 x i32> %1491, <4 x i32> %1494, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1500 = bitcast <4 x i32> %1499 to <2 x i64>
  %1501 = shufflevector <4 x i32> %1491, <4 x i32> %1494, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1502 = bitcast <4 x i32> %1501 to <2 x i64>
  %1503 = shufflevector <2 x i64> %1496, <2 x i64> %1500, <2 x i32> <i32 0, i32 2>
  %1504 = shufflevector <2 x i64> %1496, <2 x i64> %1500, <2 x i32> <i32 1, i32 3>
  %1505 = shufflevector <2 x i64> %1498, <2 x i64> %1502, <2 x i32> <i32 0, i32 2>
  %1506 = shufflevector <2 x i64> %1498, <2 x i64> %1502, <2 x i32> <i32 1, i32 3>
  %1507 = bitcast <2 x i64> %1503 to <4 x i32>
  %1508 = mul <4 x i32> %1507, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1509 = add <4 x i32> %1508, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1510 = ashr <4 x i32> %1509, <i32 12, i32 12, i32 12, i32 12>
  %1511 = bitcast <2 x i64> %1504 to <4 x i32>
  %1512 = mul <4 x i32> %1511, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1513 = add <4 x i32> %1512, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1514 = ashr <4 x i32> %1513, <i32 12, i32 12, i32 12, i32 12>
  %1515 = bitcast <2 x i64> %1505 to <4 x i32>
  %1516 = mul <4 x i32> %1515, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1517 = add <4 x i32> %1516, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1518 = ashr <4 x i32> %1517, <i32 12, i32 12, i32 12, i32 12>
  %1519 = bitcast <2 x i64> %1506 to <4 x i32>
  %1520 = mul <4 x i32> %1519, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1521 = add <4 x i32> %1520, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1522 = ashr <4 x i32> %1521, <i32 12, i32 12, i32 12, i32 12>
  %1523 = shufflevector <4 x i32> %1510, <4 x i32> %1514, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1524 = bitcast <4 x i32> %1523 to <2 x i64>
  %1525 = shufflevector <4 x i32> %1510, <4 x i32> %1514, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1526 = bitcast <4 x i32> %1525 to <2 x i64>
  %1527 = shufflevector <4 x i32> %1518, <4 x i32> %1522, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1528 = bitcast <4 x i32> %1527 to <2 x i64>
  %1529 = shufflevector <4 x i32> %1518, <4 x i32> %1522, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1530 = bitcast <4 x i32> %1529 to <2 x i64>
  %1531 = shufflevector <2 x i64> %1524, <2 x i64> %1528, <2 x i32> <i32 0, i32 2>
  %1532 = shufflevector <2 x i64> %1524, <2 x i64> %1528, <2 x i32> <i32 1, i32 3>
  %1533 = shufflevector <2 x i64> %1526, <2 x i64> %1530, <2 x i32> <i32 0, i32 2>
  %1534 = shufflevector <2 x i64> %1526, <2 x i64> %1530, <2 x i32> <i32 1, i32 3>
  br label %2287

1535:                                             ; preds = %5
  %1536 = load i8, i8* %6, align 1
  %1537 = sext i8 %1536 to i32
  %1538 = bitcast i16* %0 to i64*
  %1539 = load i64, i64* %1538, align 1
  %1540 = insertelement <2 x i64> undef, i64 %1539, i32 0
  %1541 = sext i32 %2 to i64
  %1542 = getelementptr inbounds i16, i16* %0, i64 %1541
  %1543 = bitcast i16* %1542 to i64*
  %1544 = load i64, i64* %1543, align 1
  %1545 = insertelement <2 x i64> undef, i64 %1544, i32 0
  %1546 = shl nsw i32 %2, 1
  %1547 = sext i32 %1546 to i64
  %1548 = getelementptr inbounds i16, i16* %0, i64 %1547
  %1549 = bitcast i16* %1548 to i64*
  %1550 = load i64, i64* %1549, align 1
  %1551 = insertelement <2 x i64> undef, i64 %1550, i32 0
  %1552 = mul nsw i32 %2, 3
  %1553 = sext i32 %1552 to i64
  %1554 = getelementptr inbounds i16, i16* %0, i64 %1553
  %1555 = bitcast i16* %1554 to i64*
  %1556 = load i64, i64* %1555, align 1
  %1557 = insertelement <2 x i64> undef, i64 %1556, i32 0
  %1558 = bitcast <2 x i64> %1540 to <8 x i16>
  %1559 = bitcast <2 x i64> %1545 to <8 x i16>
  %1560 = bitcast <2 x i64> %1551 to <8 x i16>
  %1561 = bitcast <2 x i64> %1557 to <8 x i16>
  %1562 = shufflevector <8 x i16> %1558, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1563 = sext <4 x i16> %1562 to <4 x i32>
  %1564 = shufflevector <8 x i16> %1559, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1565 = sext <4 x i16> %1564 to <4 x i32>
  %1566 = shufflevector <8 x i16> %1560, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1567 = sext <4 x i16> %1566 to <4 x i32>
  %1568 = shufflevector <8 x i16> %1561, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1569 = sext <4 x i16> %1568 to <4 x i32>
  %1570 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1563, i32 %1537) #8
  %1571 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1565, i32 %1537) #8
  %1572 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1567, i32 %1537) #8
  %1573 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1569, i32 %1537) #8
  %1574 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 0), align 16
  %1575 = sext i8 %1574 to i32
  %1576 = add nsw i32 %1575, -10
  %1577 = sext i32 %1576 to i64
  %1578 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %1577, i64 32
  %1579 = load i32, i32* %1578, align 16
  %1580 = insertelement <4 x i32> undef, i32 %1579, i32 0
  %1581 = shufflevector <4 x i32> %1580, <4 x i32> undef, <4 x i32> zeroinitializer
  %1582 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %1577, i64 48
  %1583 = load i32, i32* %1582, align 16
  %1584 = insertelement <4 x i32> undef, i32 %1583, i32 0
  %1585 = shufflevector <4 x i32> %1584, <4 x i32> undef, <4 x i32> zeroinitializer
  %1586 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %1577, i64 16
  %1587 = load i32, i32* %1586, align 16
  %1588 = insertelement <4 x i32> undef, i32 %1587, i32 0
  %1589 = shufflevector <4 x i32> %1588, <4 x i32> undef, <4 x i32> zeroinitializer
  %1590 = add nsw i32 %1575, -1
  %1591 = shl i32 1, %1590
  %1592 = insertelement <4 x i32> undef, i32 %1591, i32 0
  %1593 = shufflevector <4 x i32> %1592, <4 x i32> undef, <4 x i32> zeroinitializer
  %1594 = add <4 x i32> %1573, %1570
  %1595 = sub <4 x i32> %1570, %1573
  %1596 = add <4 x i32> %1572, %1571
  %1597 = sub <4 x i32> %1571, %1572
  %1598 = mul <4 x i32> %1581, %1594
  %1599 = mul <4 x i32> %1581, %1596
  %1600 = add <4 x i32> %1593, %1598
  %1601 = add <4 x i32> %1600, %1599
  %1602 = sub <4 x i32> %1600, %1599
  %1603 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1601, i32 %1575) #8
  %1604 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1602, i32 %1575) #8
  %1605 = mul <4 x i32> %1585, %1597
  %1606 = mul <4 x i32> %1589, %1595
  %1607 = add <4 x i32> %1605, %1593
  %1608 = add <4 x i32> %1607, %1606
  %1609 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1608, i32 %1575) #8
  %1610 = mul <4 x i32> %1585, %1595
  %1611 = add <4 x i32> %1610, %1593
  %1612 = mul <4 x i32> %1597, %1589
  %1613 = sub <4 x i32> %1611, %1612
  %1614 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1613, i32 %1575) #8
  %1615 = shufflevector <4 x i32> %1603, <4 x i32> %1609, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1616 = bitcast <4 x i32> %1615 to <2 x i64>
  %1617 = shufflevector <4 x i32> %1603, <4 x i32> %1609, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1618 = bitcast <4 x i32> %1617 to <2 x i64>
  %1619 = shufflevector <4 x i32> %1604, <4 x i32> %1614, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1620 = bitcast <4 x i32> %1619 to <2 x i64>
  %1621 = shufflevector <4 x i32> %1604, <4 x i32> %1614, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1622 = bitcast <4 x i32> %1621 to <2 x i64>
  %1623 = shufflevector <2 x i64> %1616, <2 x i64> %1620, <2 x i32> <i32 0, i32 2>
  %1624 = shufflevector <2 x i64> %1616, <2 x i64> %1620, <2 x i32> <i32 1, i32 3>
  %1625 = shufflevector <2 x i64> %1618, <2 x i64> %1622, <2 x i32> <i32 0, i32 2>
  %1626 = shufflevector <2 x i64> %1618, <2 x i64> %1622, <2 x i32> <i32 1, i32 3>
  %1627 = bitcast <2 x i64> %1623 to <4 x i32>
  %1628 = mul <4 x i32> %1627, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1629 = add <4 x i32> %1628, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1630 = ashr <4 x i32> %1629, <i32 12, i32 12, i32 12, i32 12>
  %1631 = bitcast <2 x i64> %1624 to <4 x i32>
  %1632 = mul <4 x i32> %1631, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1633 = add <4 x i32> %1632, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1634 = ashr <4 x i32> %1633, <i32 12, i32 12, i32 12, i32 12>
  %1635 = bitcast <2 x i64> %1625 to <4 x i32>
  %1636 = mul <4 x i32> %1635, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1637 = add <4 x i32> %1636, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1638 = ashr <4 x i32> %1637, <i32 12, i32 12, i32 12, i32 12>
  %1639 = bitcast <2 x i64> %1626 to <4 x i32>
  %1640 = mul <4 x i32> %1639, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1641 = add <4 x i32> %1640, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1642 = ashr <4 x i32> %1641, <i32 12, i32 12, i32 12, i32 12>
  %1643 = shufflevector <4 x i32> %1630, <4 x i32> %1634, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1644 = bitcast <4 x i32> %1643 to <2 x i64>
  %1645 = shufflevector <4 x i32> %1630, <4 x i32> %1634, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1646 = bitcast <4 x i32> %1645 to <2 x i64>
  %1647 = shufflevector <4 x i32> %1638, <4 x i32> %1642, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1648 = bitcast <4 x i32> %1647 to <2 x i64>
  %1649 = shufflevector <4 x i32> %1638, <4 x i32> %1642, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1650 = bitcast <4 x i32> %1649 to <2 x i64>
  %1651 = shufflevector <2 x i64> %1644, <2 x i64> %1648, <2 x i32> <i32 0, i32 2>
  %1652 = shufflevector <2 x i64> %1644, <2 x i64> %1648, <2 x i32> <i32 1, i32 3>
  %1653 = shufflevector <2 x i64> %1646, <2 x i64> %1650, <2 x i32> <i32 0, i32 2>
  %1654 = shufflevector <2 x i64> %1646, <2 x i64> %1650, <2 x i32> <i32 1, i32 3>
  br label %2287

1655:                                             ; preds = %5
  %1656 = load i8, i8* %6, align 1
  %1657 = sext i8 %1656 to i32
  %1658 = bitcast i16* %0 to i64*
  %1659 = load i64, i64* %1658, align 1
  %1660 = insertelement <2 x i64> undef, i64 %1659, i32 0
  %1661 = sext i32 %2 to i64
  %1662 = getelementptr inbounds i16, i16* %0, i64 %1661
  %1663 = bitcast i16* %1662 to i64*
  %1664 = load i64, i64* %1663, align 1
  %1665 = insertelement <2 x i64> undef, i64 %1664, i32 0
  %1666 = shl nsw i32 %2, 1
  %1667 = sext i32 %1666 to i64
  %1668 = getelementptr inbounds i16, i16* %0, i64 %1667
  %1669 = bitcast i16* %1668 to i64*
  %1670 = load i64, i64* %1669, align 1
  %1671 = insertelement <2 x i64> undef, i64 %1670, i32 0
  %1672 = mul nsw i32 %2, 3
  %1673 = sext i32 %1672 to i64
  %1674 = getelementptr inbounds i16, i16* %0, i64 %1673
  %1675 = bitcast i16* %1674 to i64*
  %1676 = load i64, i64* %1675, align 1
  %1677 = insertelement <2 x i64> undef, i64 %1676, i32 0
  %1678 = bitcast <2 x i64> %1660 to <8 x i16>
  %1679 = bitcast <2 x i64> %1665 to <8 x i16>
  %1680 = bitcast <2 x i64> %1671 to <8 x i16>
  %1681 = bitcast <2 x i64> %1677 to <8 x i16>
  %1682 = shufflevector <8 x i16> %1678, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1683 = sext <4 x i16> %1682 to <4 x i32>
  %1684 = shufflevector <8 x i16> %1679, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1685 = sext <4 x i16> %1684 to <4 x i32>
  %1686 = shufflevector <8 x i16> %1680, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1687 = sext <4 x i16> %1686 to <4 x i32>
  %1688 = shufflevector <8 x i16> %1681, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1689 = sext <4 x i16> %1688 to <4 x i32>
  %1690 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1683, i32 %1657) #8
  %1691 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1685, i32 %1657) #8
  %1692 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1687, i32 %1657) #8
  %1693 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1689, i32 %1657) #8
  %1694 = mul <4 x i32> %1690, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1695 = add <4 x i32> %1694, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1696 = ashr <4 x i32> %1695, <i32 12, i32 12, i32 12, i32 12>
  %1697 = mul <4 x i32> %1691, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1698 = add <4 x i32> %1697, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1699 = ashr <4 x i32> %1698, <i32 12, i32 12, i32 12, i32 12>
  %1700 = mul <4 x i32> %1692, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1701 = add <4 x i32> %1700, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1702 = ashr <4 x i32> %1701, <i32 12, i32 12, i32 12, i32 12>
  %1703 = mul <4 x i32> %1693, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1704 = add <4 x i32> %1703, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1705 = ashr <4 x i32> %1704, <i32 12, i32 12, i32 12, i32 12>
  %1706 = shufflevector <4 x i32> %1696, <4 x i32> %1699, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1707 = bitcast <4 x i32> %1706 to <2 x i64>
  %1708 = shufflevector <4 x i32> %1696, <4 x i32> %1699, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1709 = bitcast <4 x i32> %1708 to <2 x i64>
  %1710 = shufflevector <4 x i32> %1702, <4 x i32> %1705, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1711 = bitcast <4 x i32> %1710 to <2 x i64>
  %1712 = shufflevector <4 x i32> %1702, <4 x i32> %1705, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1713 = bitcast <4 x i32> %1712 to <2 x i64>
  %1714 = shufflevector <2 x i64> %1707, <2 x i64> %1711, <2 x i32> <i32 0, i32 2>
  %1715 = shufflevector <2 x i64> %1707, <2 x i64> %1711, <2 x i32> <i32 1, i32 3>
  %1716 = shufflevector <2 x i64> %1709, <2 x i64> %1713, <2 x i32> <i32 0, i32 2>
  %1717 = shufflevector <2 x i64> %1709, <2 x i64> %1713, <2 x i32> <i32 1, i32 3>
  %1718 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 0), align 16
  %1719 = sext i8 %1718 to i32
  %1720 = add nsw i32 %1719, -10
  %1721 = sext i32 %1720 to i64
  %1722 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %1721, i64 32
  %1723 = load i32, i32* %1722, align 16
  %1724 = insertelement <4 x i32> undef, i32 %1723, i32 0
  %1725 = shufflevector <4 x i32> %1724, <4 x i32> undef, <4 x i32> zeroinitializer
  %1726 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %1721, i64 48
  %1727 = load i32, i32* %1726, align 16
  %1728 = insertelement <4 x i32> undef, i32 %1727, i32 0
  %1729 = shufflevector <4 x i32> %1728, <4 x i32> undef, <4 x i32> zeroinitializer
  %1730 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %1721, i64 16
  %1731 = load i32, i32* %1730, align 16
  %1732 = insertelement <4 x i32> undef, i32 %1731, i32 0
  %1733 = shufflevector <4 x i32> %1732, <4 x i32> undef, <4 x i32> zeroinitializer
  %1734 = add nsw i32 %1719, -1
  %1735 = shl i32 1, %1734
  %1736 = insertelement <4 x i32> undef, i32 %1735, i32 0
  %1737 = shufflevector <4 x i32> %1736, <4 x i32> undef, <4 x i32> zeroinitializer
  %1738 = bitcast <2 x i64> %1714 to <4 x i32>
  %1739 = bitcast <2 x i64> %1717 to <4 x i32>
  %1740 = add <4 x i32> %1739, %1738
  %1741 = sub <4 x i32> %1738, %1739
  %1742 = bitcast <2 x i64> %1715 to <4 x i32>
  %1743 = bitcast <2 x i64> %1716 to <4 x i32>
  %1744 = add <4 x i32> %1743, %1742
  %1745 = sub <4 x i32> %1742, %1743
  %1746 = mul <4 x i32> %1740, %1725
  %1747 = mul <4 x i32> %1744, %1725
  %1748 = add <4 x i32> %1746, %1737
  %1749 = add <4 x i32> %1748, %1747
  %1750 = sub <4 x i32> %1748, %1747
  %1751 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1749, i32 %1719) #8
  %1752 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1750, i32 %1719) #8
  %1753 = mul <4 x i32> %1745, %1729
  %1754 = mul <4 x i32> %1741, %1733
  %1755 = add <4 x i32> %1754, %1737
  %1756 = add <4 x i32> %1755, %1753
  %1757 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1756, i32 %1719) #8
  %1758 = mul <4 x i32> %1741, %1729
  %1759 = add <4 x i32> %1758, %1737
  %1760 = mul <4 x i32> %1733, %1745
  %1761 = sub <4 x i32> %1759, %1760
  %1762 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1761, i32 %1719) #8
  %1763 = shufflevector <4 x i32> %1751, <4 x i32> %1757, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1764 = bitcast <4 x i32> %1763 to <2 x i64>
  %1765 = shufflevector <4 x i32> %1751, <4 x i32> %1757, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1766 = bitcast <4 x i32> %1765 to <2 x i64>
  %1767 = shufflevector <4 x i32> %1752, <4 x i32> %1762, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1768 = bitcast <4 x i32> %1767 to <2 x i64>
  %1769 = shufflevector <4 x i32> %1752, <4 x i32> %1762, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1770 = bitcast <4 x i32> %1769 to <2 x i64>
  %1771 = shufflevector <2 x i64> %1764, <2 x i64> %1768, <2 x i32> <i32 0, i32 2>
  %1772 = shufflevector <2 x i64> %1764, <2 x i64> %1768, <2 x i32> <i32 1, i32 3>
  %1773 = shufflevector <2 x i64> %1766, <2 x i64> %1770, <2 x i32> <i32 0, i32 2>
  %1774 = shufflevector <2 x i64> %1766, <2 x i64> %1770, <2 x i32> <i32 1, i32 3>
  br label %2287

1775:                                             ; preds = %5
  %1776 = load i8, i8* %6, align 1
  %1777 = sext i8 %1776 to i32
  %1778 = bitcast i16* %0 to i64*
  %1779 = load i64, i64* %1778, align 1
  %1780 = insertelement <2 x i64> undef, i64 %1779, i32 0
  %1781 = sext i32 %2 to i64
  %1782 = getelementptr inbounds i16, i16* %0, i64 %1781
  %1783 = bitcast i16* %1782 to i64*
  %1784 = load i64, i64* %1783, align 1
  %1785 = insertelement <2 x i64> undef, i64 %1784, i32 0
  %1786 = shl nsw i32 %2, 1
  %1787 = sext i32 %1786 to i64
  %1788 = getelementptr inbounds i16, i16* %0, i64 %1787
  %1789 = bitcast i16* %1788 to i64*
  %1790 = load i64, i64* %1789, align 1
  %1791 = insertelement <2 x i64> undef, i64 %1790, i32 0
  %1792 = mul nsw i32 %2, 3
  %1793 = sext i32 %1792 to i64
  %1794 = getelementptr inbounds i16, i16* %0, i64 %1793
  %1795 = bitcast i16* %1794 to i64*
  %1796 = load i64, i64* %1795, align 1
  %1797 = insertelement <2 x i64> undef, i64 %1796, i32 0
  %1798 = bitcast <2 x i64> %1780 to <8 x i16>
  %1799 = bitcast <2 x i64> %1785 to <8 x i16>
  %1800 = bitcast <2 x i64> %1791 to <8 x i16>
  %1801 = bitcast <2 x i64> %1797 to <8 x i16>
  %1802 = shufflevector <8 x i16> %1798, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1803 = sext <4 x i16> %1802 to <4 x i32>
  %1804 = shufflevector <8 x i16> %1799, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1805 = sext <4 x i16> %1804 to <4 x i32>
  %1806 = shufflevector <8 x i16> %1800, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1807 = sext <4 x i16> %1806 to <4 x i32>
  %1808 = shufflevector <8 x i16> %1801, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1809 = sext <4 x i16> %1808 to <4 x i32>
  %1810 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1803, i32 %1777) #8
  %1811 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1805, i32 %1777) #8
  %1812 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1807, i32 %1777) #8
  %1813 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1809, i32 %1777) #8
  %1814 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 0), align 16
  %1815 = sext i8 %1814 to i32
  %1816 = add nsw i32 %1815, -10
  %1817 = sext i32 %1816 to i64
  %1818 = add nsw i32 %1815, -1
  %1819 = shl i32 1, %1818
  %1820 = insertelement <4 x i32> undef, i32 %1819, i32 0
  %1821 = shufflevector <4 x i32> %1820, <4 x i32> undef, <4 x i32> zeroinitializer
  %1822 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1817, i64 1
  %1823 = load i32, i32* %1822, align 4
  %1824 = insertelement <4 x i32> undef, i32 %1823, i32 0
  %1825 = shufflevector <4 x i32> %1824, <4 x i32> undef, <4 x i32> zeroinitializer
  %1826 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1817, i64 2
  %1827 = load i32, i32* %1826, align 4
  %1828 = insertelement <4 x i32> undef, i32 %1827, i32 0
  %1829 = shufflevector <4 x i32> %1828, <4 x i32> undef, <4 x i32> zeroinitializer
  %1830 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1817, i64 3
  %1831 = load i32, i32* %1830, align 4
  %1832 = insertelement <4 x i32> undef, i32 %1831, i32 0
  %1833 = shufflevector <4 x i32> %1832, <4 x i32> undef, <4 x i32> zeroinitializer
  %1834 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1817, i64 4
  %1835 = load i32, i32* %1834, align 4
  %1836 = insertelement <4 x i32> undef, i32 %1835, i32 0
  %1837 = shufflevector <4 x i32> %1836, <4 x i32> undef, <4 x i32> zeroinitializer
  %1838 = mul <4 x i32> %1825, %1810
  %1839 = mul <4 x i32> %1837, %1810
  %1840 = add <4 x i32> %1811, %1810
  %1841 = mul <4 x i32> %1829, %1811
  %1842 = mul <4 x i32> %1825, %1811
  %1843 = mul <4 x i32> %1833, %1812
  %1844 = mul <4 x i32> %1837, %1813
  %1845 = mul <4 x i32> %1829, %1813
  %1846 = sub <4 x i32> %1840, %1813
  %1847 = add <4 x i32> %1841, %1838
  %1848 = add <4 x i32> %1847, %1844
  %1849 = mul <4 x i32> %1833, %1846
  %1850 = sub <4 x i32> %1839, %1842
  %1851 = add <4 x i32> %1850, %1845
  %1852 = add <4 x i32> %1843, %1821
  %1853 = add <4 x i32> %1848, %1852
  %1854 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1853, i32 %1815) #8
  %1855 = add <4 x i32> %1849, %1821
  %1856 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1855, i32 %1815) #8
  %1857 = sub <4 x i32> %1821, %1843
  %1858 = add <4 x i32> %1857, %1851
  %1859 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1858, i32 %1815) #8
  %1860 = sub <4 x i32> %1852, %1848
  %1861 = add <4 x i32> %1860, %1851
  %1862 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1861, i32 %1815) #8
  %1863 = shufflevector <4 x i32> %1854, <4 x i32> %1856, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1864 = bitcast <4 x i32> %1863 to <2 x i64>
  %1865 = shufflevector <4 x i32> %1854, <4 x i32> %1856, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1866 = bitcast <4 x i32> %1865 to <2 x i64>
  %1867 = shufflevector <4 x i32> %1859, <4 x i32> %1862, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1868 = bitcast <4 x i32> %1867 to <2 x i64>
  %1869 = shufflevector <4 x i32> %1859, <4 x i32> %1862, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1870 = bitcast <4 x i32> %1869 to <2 x i64>
  %1871 = shufflevector <2 x i64> %1864, <2 x i64> %1868, <2 x i32> <i32 0, i32 2>
  %1872 = shufflevector <2 x i64> %1864, <2 x i64> %1868, <2 x i32> <i32 1, i32 3>
  %1873 = shufflevector <2 x i64> %1866, <2 x i64> %1870, <2 x i32> <i32 0, i32 2>
  %1874 = shufflevector <2 x i64> %1866, <2 x i64> %1870, <2 x i32> <i32 1, i32 3>
  %1875 = bitcast <2 x i64> %1871 to <4 x i32>
  %1876 = mul <4 x i32> %1875, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1877 = add <4 x i32> %1876, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1878 = ashr <4 x i32> %1877, <i32 12, i32 12, i32 12, i32 12>
  %1879 = bitcast <2 x i64> %1872 to <4 x i32>
  %1880 = mul <4 x i32> %1879, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1881 = add <4 x i32> %1880, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1882 = ashr <4 x i32> %1881, <i32 12, i32 12, i32 12, i32 12>
  %1883 = bitcast <2 x i64> %1873 to <4 x i32>
  %1884 = mul <4 x i32> %1883, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1885 = add <4 x i32> %1884, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1886 = ashr <4 x i32> %1885, <i32 12, i32 12, i32 12, i32 12>
  %1887 = bitcast <2 x i64> %1874 to <4 x i32>
  %1888 = mul <4 x i32> %1887, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1889 = add <4 x i32> %1888, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1890 = ashr <4 x i32> %1889, <i32 12, i32 12, i32 12, i32 12>
  %1891 = shufflevector <4 x i32> %1878, <4 x i32> %1882, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1892 = bitcast <4 x i32> %1891 to <2 x i64>
  %1893 = shufflevector <4 x i32> %1878, <4 x i32> %1882, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1894 = bitcast <4 x i32> %1893 to <2 x i64>
  %1895 = shufflevector <4 x i32> %1886, <4 x i32> %1890, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1896 = bitcast <4 x i32> %1895 to <2 x i64>
  %1897 = shufflevector <4 x i32> %1886, <4 x i32> %1890, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1898 = bitcast <4 x i32> %1897 to <2 x i64>
  %1899 = shufflevector <2 x i64> %1892, <2 x i64> %1896, <2 x i32> <i32 0, i32 2>
  %1900 = shufflevector <2 x i64> %1892, <2 x i64> %1896, <2 x i32> <i32 1, i32 3>
  %1901 = shufflevector <2 x i64> %1894, <2 x i64> %1898, <2 x i32> <i32 0, i32 2>
  %1902 = shufflevector <2 x i64> %1894, <2 x i64> %1898, <2 x i32> <i32 1, i32 3>
  br label %2287

1903:                                             ; preds = %5
  %1904 = load i8, i8* %6, align 1
  %1905 = sext i8 %1904 to i32
  %1906 = bitcast i16* %0 to i64*
  %1907 = load i64, i64* %1906, align 1
  %1908 = insertelement <2 x i64> undef, i64 %1907, i32 0
  %1909 = sext i32 %2 to i64
  %1910 = getelementptr inbounds i16, i16* %0, i64 %1909
  %1911 = bitcast i16* %1910 to i64*
  %1912 = load i64, i64* %1911, align 1
  %1913 = insertelement <2 x i64> undef, i64 %1912, i32 0
  %1914 = shl nsw i32 %2, 1
  %1915 = sext i32 %1914 to i64
  %1916 = getelementptr inbounds i16, i16* %0, i64 %1915
  %1917 = bitcast i16* %1916 to i64*
  %1918 = load i64, i64* %1917, align 1
  %1919 = insertelement <2 x i64> undef, i64 %1918, i32 0
  %1920 = mul nsw i32 %2, 3
  %1921 = sext i32 %1920 to i64
  %1922 = getelementptr inbounds i16, i16* %0, i64 %1921
  %1923 = bitcast i16* %1922 to i64*
  %1924 = load i64, i64* %1923, align 1
  %1925 = insertelement <2 x i64> undef, i64 %1924, i32 0
  %1926 = bitcast <2 x i64> %1908 to <8 x i16>
  %1927 = bitcast <2 x i64> %1913 to <8 x i16>
  %1928 = bitcast <2 x i64> %1919 to <8 x i16>
  %1929 = bitcast <2 x i64> %1925 to <8 x i16>
  %1930 = shufflevector <8 x i16> %1926, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1931 = sext <4 x i16> %1930 to <4 x i32>
  %1932 = shufflevector <8 x i16> %1927, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1933 = sext <4 x i16> %1932 to <4 x i32>
  %1934 = shufflevector <8 x i16> %1928, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1935 = sext <4 x i16> %1934 to <4 x i32>
  %1936 = shufflevector <8 x i16> %1929, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1937 = sext <4 x i16> %1936 to <4 x i32>
  %1938 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1931, i32 %1905) #8
  %1939 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1933, i32 %1905) #8
  %1940 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1935, i32 %1905) #8
  %1941 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1937, i32 %1905) #8
  %1942 = mul <4 x i32> %1938, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1943 = add <4 x i32> %1942, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1944 = ashr <4 x i32> %1943, <i32 12, i32 12, i32 12, i32 12>
  %1945 = mul <4 x i32> %1939, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1946 = add <4 x i32> %1945, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1947 = ashr <4 x i32> %1946, <i32 12, i32 12, i32 12, i32 12>
  %1948 = mul <4 x i32> %1940, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1949 = add <4 x i32> %1948, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1950 = ashr <4 x i32> %1949, <i32 12, i32 12, i32 12, i32 12>
  %1951 = mul <4 x i32> %1941, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1952 = add <4 x i32> %1951, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1953 = ashr <4 x i32> %1952, <i32 12, i32 12, i32 12, i32 12>
  %1954 = shufflevector <4 x i32> %1944, <4 x i32> %1947, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1955 = bitcast <4 x i32> %1954 to <2 x i64>
  %1956 = shufflevector <4 x i32> %1944, <4 x i32> %1947, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1957 = bitcast <4 x i32> %1956 to <2 x i64>
  %1958 = shufflevector <4 x i32> %1950, <4 x i32> %1953, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1959 = bitcast <4 x i32> %1958 to <2 x i64>
  %1960 = shufflevector <4 x i32> %1950, <4 x i32> %1953, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1961 = bitcast <4 x i32> %1960 to <2 x i64>
  %1962 = shufflevector <2 x i64> %1955, <2 x i64> %1959, <2 x i32> <i32 0, i32 2>
  %1963 = shufflevector <2 x i64> %1955, <2 x i64> %1959, <2 x i32> <i32 1, i32 3>
  %1964 = shufflevector <2 x i64> %1957, <2 x i64> %1961, <2 x i32> <i32 0, i32 2>
  %1965 = shufflevector <2 x i64> %1957, <2 x i64> %1961, <2 x i32> <i32 1, i32 3>
  %1966 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 0), align 16
  %1967 = sext i8 %1966 to i32
  %1968 = add nsw i32 %1967, -10
  %1969 = sext i32 %1968 to i64
  %1970 = add nsw i32 %1967, -1
  %1971 = shl i32 1, %1970
  %1972 = insertelement <4 x i32> undef, i32 %1971, i32 0
  %1973 = shufflevector <4 x i32> %1972, <4 x i32> undef, <4 x i32> zeroinitializer
  %1974 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1969, i64 1
  %1975 = load i32, i32* %1974, align 4
  %1976 = insertelement <4 x i32> undef, i32 %1975, i32 0
  %1977 = shufflevector <4 x i32> %1976, <4 x i32> undef, <4 x i32> zeroinitializer
  %1978 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1969, i64 2
  %1979 = load i32, i32* %1978, align 4
  %1980 = insertelement <4 x i32> undef, i32 %1979, i32 0
  %1981 = shufflevector <4 x i32> %1980, <4 x i32> undef, <4 x i32> zeroinitializer
  %1982 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1969, i64 3
  %1983 = load i32, i32* %1982, align 4
  %1984 = insertelement <4 x i32> undef, i32 %1983, i32 0
  %1985 = shufflevector <4 x i32> %1984, <4 x i32> undef, <4 x i32> zeroinitializer
  %1986 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %1969, i64 4
  %1987 = load i32, i32* %1986, align 4
  %1988 = insertelement <4 x i32> undef, i32 %1987, i32 0
  %1989 = shufflevector <4 x i32> %1988, <4 x i32> undef, <4 x i32> zeroinitializer
  %1990 = bitcast <2 x i64> %1962 to <4 x i32>
  %1991 = mul <4 x i32> %1977, %1990
  %1992 = mul <4 x i32> %1989, %1990
  %1993 = bitcast <2 x i64> %1963 to <4 x i32>
  %1994 = add <4 x i32> %1993, %1990
  %1995 = mul <4 x i32> %1981, %1993
  %1996 = mul <4 x i32> %1977, %1993
  %1997 = bitcast <2 x i64> %1964 to <4 x i32>
  %1998 = mul <4 x i32> %1985, %1997
  %1999 = bitcast <2 x i64> %1965 to <4 x i32>
  %2000 = mul <4 x i32> %1989, %1999
  %2001 = mul <4 x i32> %1981, %1999
  %2002 = sub <4 x i32> %1994, %1999
  %2003 = add <4 x i32> %1995, %1991
  %2004 = add <4 x i32> %2003, %2000
  %2005 = mul <4 x i32> %2002, %1985
  %2006 = sub <4 x i32> %1992, %1996
  %2007 = add <4 x i32> %2006, %2001
  %2008 = add <4 x i32> %1998, %1973
  %2009 = add <4 x i32> %2004, %2008
  %2010 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2009, i32 %1967) #8
  %2011 = add <4 x i32> %2005, %1973
  %2012 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2011, i32 %1967) #8
  %2013 = sub <4 x i32> %1973, %1998
  %2014 = add <4 x i32> %2013, %2007
  %2015 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2014, i32 %1967) #8
  %2016 = sub <4 x i32> %2008, %2004
  %2017 = add <4 x i32> %2016, %2007
  %2018 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2017, i32 %1967) #8
  %2019 = shufflevector <4 x i32> %2010, <4 x i32> %2012, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2020 = bitcast <4 x i32> %2019 to <2 x i64>
  %2021 = shufflevector <4 x i32> %2010, <4 x i32> %2012, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2022 = bitcast <4 x i32> %2021 to <2 x i64>
  %2023 = shufflevector <4 x i32> %2015, <4 x i32> %2018, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2024 = bitcast <4 x i32> %2023 to <2 x i64>
  %2025 = shufflevector <4 x i32> %2015, <4 x i32> %2018, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2026 = bitcast <4 x i32> %2025 to <2 x i64>
  %2027 = shufflevector <2 x i64> %2020, <2 x i64> %2024, <2 x i32> <i32 0, i32 2>
  %2028 = shufflevector <2 x i64> %2020, <2 x i64> %2024, <2 x i32> <i32 1, i32 3>
  %2029 = shufflevector <2 x i64> %2022, <2 x i64> %2026, <2 x i32> <i32 0, i32 2>
  %2030 = shufflevector <2 x i64> %2022, <2 x i64> %2026, <2 x i32> <i32 1, i32 3>
  br label %2287

2031:                                             ; preds = %5
  %2032 = load i8, i8* %6, align 1
  %2033 = sext i8 %2032 to i32
  %2034 = mul nsw i32 %2, 3
  %2035 = sext i32 %2034 to i64
  %2036 = getelementptr inbounds i16, i16* %0, i64 %2035
  %2037 = bitcast i16* %2036 to i64*
  %2038 = load i64, i64* %2037, align 1
  %2039 = insertelement <2 x i64> undef, i64 %2038, i32 0
  %2040 = shl nsw i32 %2, 1
  %2041 = sext i32 %2040 to i64
  %2042 = getelementptr inbounds i16, i16* %0, i64 %2041
  %2043 = bitcast i16* %2042 to i64*
  %2044 = load i64, i64* %2043, align 1
  %2045 = insertelement <2 x i64> undef, i64 %2044, i32 0
  %2046 = sext i32 %2 to i64
  %2047 = getelementptr inbounds i16, i16* %0, i64 %2046
  %2048 = bitcast i16* %2047 to i64*
  %2049 = load i64, i64* %2048, align 1
  %2050 = insertelement <2 x i64> undef, i64 %2049, i32 0
  %2051 = bitcast i16* %0 to i64*
  %2052 = load i64, i64* %2051, align 1
  %2053 = insertelement <2 x i64> undef, i64 %2052, i32 0
  %2054 = bitcast <2 x i64> %2039 to <8 x i16>
  %2055 = bitcast <2 x i64> %2045 to <8 x i16>
  %2056 = bitcast <2 x i64> %2050 to <8 x i16>
  %2057 = bitcast <2 x i64> %2053 to <8 x i16>
  %2058 = shufflevector <8 x i16> %2054, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2059 = sext <4 x i16> %2058 to <4 x i32>
  %2060 = shufflevector <8 x i16> %2055, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2061 = sext <4 x i16> %2060 to <4 x i32>
  %2062 = shufflevector <8 x i16> %2056, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2063 = sext <4 x i16> %2062 to <4 x i32>
  %2064 = shufflevector <8 x i16> %2057, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2065 = sext <4 x i16> %2064 to <4 x i32>
  %2066 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2059, i32 %2033) #8
  %2067 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2061, i32 %2033) #8
  %2068 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2063, i32 %2033) #8
  %2069 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2065, i32 %2033) #8
  %2070 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 0, i64 0), align 16
  %2071 = sext i8 %2070 to i32
  %2072 = add nsw i32 %2071, -10
  %2073 = sext i32 %2072 to i64
  %2074 = add nsw i32 %2071, -1
  %2075 = shl i32 1, %2074
  %2076 = insertelement <4 x i32> undef, i32 %2075, i32 0
  %2077 = shufflevector <4 x i32> %2076, <4 x i32> undef, <4 x i32> zeroinitializer
  %2078 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %2073, i64 1
  %2079 = load i32, i32* %2078, align 4
  %2080 = insertelement <4 x i32> undef, i32 %2079, i32 0
  %2081 = shufflevector <4 x i32> %2080, <4 x i32> undef, <4 x i32> zeroinitializer
  %2082 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %2073, i64 2
  %2083 = load i32, i32* %2082, align 4
  %2084 = insertelement <4 x i32> undef, i32 %2083, i32 0
  %2085 = shufflevector <4 x i32> %2084, <4 x i32> undef, <4 x i32> zeroinitializer
  %2086 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %2073, i64 3
  %2087 = load i32, i32* %2086, align 4
  %2088 = insertelement <4 x i32> undef, i32 %2087, i32 0
  %2089 = shufflevector <4 x i32> %2088, <4 x i32> undef, <4 x i32> zeroinitializer
  %2090 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %2073, i64 4
  %2091 = load i32, i32* %2090, align 4
  %2092 = insertelement <4 x i32> undef, i32 %2091, i32 0
  %2093 = shufflevector <4 x i32> %2092, <4 x i32> undef, <4 x i32> zeroinitializer
  %2094 = mul <4 x i32> %2081, %2066
  %2095 = mul <4 x i32> %2093, %2066
  %2096 = add <4 x i32> %2067, %2066
  %2097 = mul <4 x i32> %2085, %2067
  %2098 = mul <4 x i32> %2081, %2067
  %2099 = mul <4 x i32> %2089, %2068
  %2100 = mul <4 x i32> %2093, %2069
  %2101 = mul <4 x i32> %2085, %2069
  %2102 = sub <4 x i32> %2096, %2069
  %2103 = add <4 x i32> %2097, %2094
  %2104 = add <4 x i32> %2103, %2100
  %2105 = mul <4 x i32> %2089, %2102
  %2106 = sub <4 x i32> %2095, %2098
  %2107 = add <4 x i32> %2106, %2101
  %2108 = add <4 x i32> %2099, %2077
  %2109 = add <4 x i32> %2104, %2108
  %2110 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2109, i32 %2071) #8
  %2111 = add <4 x i32> %2105, %2077
  %2112 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2111, i32 %2071) #8
  %2113 = sub <4 x i32> %2077, %2099
  %2114 = add <4 x i32> %2113, %2107
  %2115 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2114, i32 %2071) #8
  %2116 = sub <4 x i32> %2108, %2104
  %2117 = add <4 x i32> %2116, %2107
  %2118 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2117, i32 %2071) #8
  %2119 = shufflevector <4 x i32> %2110, <4 x i32> %2112, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2120 = bitcast <4 x i32> %2119 to <2 x i64>
  %2121 = shufflevector <4 x i32> %2110, <4 x i32> %2112, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2122 = bitcast <4 x i32> %2121 to <2 x i64>
  %2123 = shufflevector <4 x i32> %2115, <4 x i32> %2118, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2124 = bitcast <4 x i32> %2123 to <2 x i64>
  %2125 = shufflevector <4 x i32> %2115, <4 x i32> %2118, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2126 = bitcast <4 x i32> %2125 to <2 x i64>
  %2127 = shufflevector <2 x i64> %2120, <2 x i64> %2124, <2 x i32> <i32 0, i32 2>
  %2128 = shufflevector <2 x i64> %2120, <2 x i64> %2124, <2 x i32> <i32 1, i32 3>
  %2129 = shufflevector <2 x i64> %2122, <2 x i64> %2126, <2 x i32> <i32 0, i32 2>
  %2130 = shufflevector <2 x i64> %2122, <2 x i64> %2126, <2 x i32> <i32 1, i32 3>
  %2131 = bitcast <2 x i64> %2127 to <4 x i32>
  %2132 = mul <4 x i32> %2131, <i32 5793, i32 5793, i32 5793, i32 5793>
  %2133 = add <4 x i32> %2132, <i32 2048, i32 2048, i32 2048, i32 2048>
  %2134 = ashr <4 x i32> %2133, <i32 12, i32 12, i32 12, i32 12>
  %2135 = bitcast <2 x i64> %2128 to <4 x i32>
  %2136 = mul <4 x i32> %2135, <i32 5793, i32 5793, i32 5793, i32 5793>
  %2137 = add <4 x i32> %2136, <i32 2048, i32 2048, i32 2048, i32 2048>
  %2138 = ashr <4 x i32> %2137, <i32 12, i32 12, i32 12, i32 12>
  %2139 = bitcast <2 x i64> %2129 to <4 x i32>
  %2140 = mul <4 x i32> %2139, <i32 5793, i32 5793, i32 5793, i32 5793>
  %2141 = add <4 x i32> %2140, <i32 2048, i32 2048, i32 2048, i32 2048>
  %2142 = ashr <4 x i32> %2141, <i32 12, i32 12, i32 12, i32 12>
  %2143 = bitcast <2 x i64> %2130 to <4 x i32>
  %2144 = mul <4 x i32> %2143, <i32 5793, i32 5793, i32 5793, i32 5793>
  %2145 = add <4 x i32> %2144, <i32 2048, i32 2048, i32 2048, i32 2048>
  %2146 = ashr <4 x i32> %2145, <i32 12, i32 12, i32 12, i32 12>
  %2147 = shufflevector <4 x i32> %2134, <4 x i32> %2138, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2148 = bitcast <4 x i32> %2147 to <2 x i64>
  %2149 = shufflevector <4 x i32> %2134, <4 x i32> %2138, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2150 = bitcast <4 x i32> %2149 to <2 x i64>
  %2151 = shufflevector <4 x i32> %2142, <4 x i32> %2146, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2152 = bitcast <4 x i32> %2151 to <2 x i64>
  %2153 = shufflevector <4 x i32> %2142, <4 x i32> %2146, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2154 = bitcast <4 x i32> %2153 to <2 x i64>
  %2155 = shufflevector <2 x i64> %2148, <2 x i64> %2152, <2 x i32> <i32 0, i32 2>
  %2156 = shufflevector <2 x i64> %2148, <2 x i64> %2152, <2 x i32> <i32 1, i32 3>
  %2157 = shufflevector <2 x i64> %2150, <2 x i64> %2154, <2 x i32> <i32 0, i32 2>
  %2158 = shufflevector <2 x i64> %2150, <2 x i64> %2154, <2 x i32> <i32 1, i32 3>
  br label %2287

2159:                                             ; preds = %5
  %2160 = load i8, i8* %6, align 1
  %2161 = sext i8 %2160 to i32
  %2162 = bitcast i16* %0 to i64*
  %2163 = load i64, i64* %2162, align 1
  %2164 = insertelement <2 x i64> undef, i64 %2163, i32 0
  %2165 = sext i32 %2 to i64
  %2166 = getelementptr inbounds i16, i16* %0, i64 %2165
  %2167 = bitcast i16* %2166 to i64*
  %2168 = load i64, i64* %2167, align 1
  %2169 = insertelement <2 x i64> undef, i64 %2168, i32 0
  %2170 = shl nsw i32 %2, 1
  %2171 = sext i32 %2170 to i64
  %2172 = getelementptr inbounds i16, i16* %0, i64 %2171
  %2173 = bitcast i16* %2172 to i64*
  %2174 = load i64, i64* %2173, align 1
  %2175 = insertelement <2 x i64> undef, i64 %2174, i32 0
  %2176 = mul nsw i32 %2, 3
  %2177 = sext i32 %2176 to i64
  %2178 = getelementptr inbounds i16, i16* %0, i64 %2177
  %2179 = bitcast i16* %2178 to i64*
  %2180 = load i64, i64* %2179, align 1
  %2181 = insertelement <2 x i64> undef, i64 %2180, i32 0
  %2182 = bitcast <2 x i64> %2164 to <8 x i16>
  %2183 = bitcast <2 x i64> %2169 to <8 x i16>
  %2184 = bitcast <2 x i64> %2175 to <8 x i16>
  %2185 = bitcast <2 x i64> %2181 to <8 x i16>
  %2186 = shufflevector <8 x i16> %2182, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %2187 = sext <4 x i16> %2186 to <4 x i32>
  %2188 = shufflevector <8 x i16> %2183, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %2189 = sext <4 x i16> %2188 to <4 x i32>
  %2190 = shufflevector <8 x i16> %2184, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %2191 = sext <4 x i16> %2190 to <4 x i32>
  %2192 = shufflevector <8 x i16> %2185, <8 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %2193 = sext <4 x i16> %2192 to <4 x i32>
  %2194 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2187, i32 %2161) #8
  %2195 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2189, i32 %2161) #8
  %2196 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2191, i32 %2161) #8
  %2197 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2193, i32 %2161) #8
  %2198 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 0, i64 0), align 16
  %2199 = mul <4 x i32> %2194, <i32 5793, i32 5793, i32 5793, i32 5793>
  %2200 = add <4 x i32> %2199, <i32 2048, i32 2048, i32 2048, i32 2048>
  %2201 = ashr <4 x i32> %2200, <i32 12, i32 12, i32 12, i32 12>
  %2202 = mul <4 x i32> %2195, <i32 5793, i32 5793, i32 5793, i32 5793>
  %2203 = add <4 x i32> %2202, <i32 2048, i32 2048, i32 2048, i32 2048>
  %2204 = ashr <4 x i32> %2203, <i32 12, i32 12, i32 12, i32 12>
  %2205 = mul <4 x i32> %2196, <i32 5793, i32 5793, i32 5793, i32 5793>
  %2206 = add <4 x i32> %2205, <i32 2048, i32 2048, i32 2048, i32 2048>
  %2207 = ashr <4 x i32> %2206, <i32 12, i32 12, i32 12, i32 12>
  %2208 = mul <4 x i32> %2197, <i32 5793, i32 5793, i32 5793, i32 5793>
  %2209 = add <4 x i32> %2208, <i32 2048, i32 2048, i32 2048, i32 2048>
  %2210 = ashr <4 x i32> %2209, <i32 12, i32 12, i32 12, i32 12>
  %2211 = shufflevector <4 x i32> %2201, <4 x i32> %2204, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2212 = bitcast <4 x i32> %2211 to <2 x i64>
  %2213 = shufflevector <4 x i32> %2201, <4 x i32> %2204, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2214 = bitcast <4 x i32> %2213 to <2 x i64>
  %2215 = shufflevector <4 x i32> %2207, <4 x i32> %2210, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2216 = bitcast <4 x i32> %2215 to <2 x i64>
  %2217 = shufflevector <4 x i32> %2207, <4 x i32> %2210, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2218 = bitcast <4 x i32> %2217 to <2 x i64>
  %2219 = shufflevector <2 x i64> %2212, <2 x i64> %2216, <2 x i32> <i32 0, i32 2>
  %2220 = shufflevector <2 x i64> %2212, <2 x i64> %2216, <2 x i32> <i32 1, i32 3>
  %2221 = shufflevector <2 x i64> %2214, <2 x i64> %2218, <2 x i32> <i32 0, i32 2>
  %2222 = shufflevector <2 x i64> %2214, <2 x i64> %2218, <2 x i32> <i32 1, i32 3>
  %2223 = sext i8 %2198 to i32
  %2224 = add nsw i32 %2223, -10
  %2225 = sext i32 %2224 to i64
  %2226 = add nsw i32 %2223, -1
  %2227 = shl i32 1, %2226
  %2228 = insertelement <4 x i32> undef, i32 %2227, i32 0
  %2229 = shufflevector <4 x i32> %2228, <4 x i32> undef, <4 x i32> zeroinitializer
  %2230 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %2225, i64 1
  %2231 = load i32, i32* %2230, align 4
  %2232 = insertelement <4 x i32> undef, i32 %2231, i32 0
  %2233 = shufflevector <4 x i32> %2232, <4 x i32> undef, <4 x i32> zeroinitializer
  %2234 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %2225, i64 2
  %2235 = load i32, i32* %2234, align 4
  %2236 = insertelement <4 x i32> undef, i32 %2235, i32 0
  %2237 = shufflevector <4 x i32> %2236, <4 x i32> undef, <4 x i32> zeroinitializer
  %2238 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %2225, i64 3
  %2239 = load i32, i32* %2238, align 4
  %2240 = insertelement <4 x i32> undef, i32 %2239, i32 0
  %2241 = shufflevector <4 x i32> %2240, <4 x i32> undef, <4 x i32> zeroinitializer
  %2242 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %2225, i64 4
  %2243 = load i32, i32* %2242, align 4
  %2244 = insertelement <4 x i32> undef, i32 %2243, i32 0
  %2245 = shufflevector <4 x i32> %2244, <4 x i32> undef, <4 x i32> zeroinitializer
  %2246 = bitcast <2 x i64> %2219 to <4 x i32>
  %2247 = mul <4 x i32> %2233, %2246
  %2248 = mul <4 x i32> %2245, %2246
  %2249 = bitcast <2 x i64> %2220 to <4 x i32>
  %2250 = add <4 x i32> %2249, %2246
  %2251 = mul <4 x i32> %2237, %2249
  %2252 = mul <4 x i32> %2233, %2249
  %2253 = bitcast <2 x i64> %2221 to <4 x i32>
  %2254 = mul <4 x i32> %2241, %2253
  %2255 = bitcast <2 x i64> %2222 to <4 x i32>
  %2256 = mul <4 x i32> %2245, %2255
  %2257 = mul <4 x i32> %2237, %2255
  %2258 = sub <4 x i32> %2250, %2255
  %2259 = add <4 x i32> %2251, %2247
  %2260 = add <4 x i32> %2259, %2256
  %2261 = mul <4 x i32> %2258, %2241
  %2262 = sub <4 x i32> %2248, %2252
  %2263 = add <4 x i32> %2262, %2257
  %2264 = add <4 x i32> %2254, %2229
  %2265 = add <4 x i32> %2260, %2264
  %2266 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2265, i32 %2223) #8
  %2267 = add <4 x i32> %2261, %2229
  %2268 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2267, i32 %2223) #8
  %2269 = sub <4 x i32> %2229, %2254
  %2270 = add <4 x i32> %2269, %2263
  %2271 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2270, i32 %2223) #8
  %2272 = sub <4 x i32> %2264, %2260
  %2273 = add <4 x i32> %2272, %2263
  %2274 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2273, i32 %2223) #8
  %2275 = shufflevector <4 x i32> %2266, <4 x i32> %2268, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2276 = bitcast <4 x i32> %2275 to <2 x i64>
  %2277 = shufflevector <4 x i32> %2266, <4 x i32> %2268, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2278 = bitcast <4 x i32> %2277 to <2 x i64>
  %2279 = shufflevector <4 x i32> %2271, <4 x i32> %2274, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2280 = bitcast <4 x i32> %2279 to <2 x i64>
  %2281 = shufflevector <4 x i32> %2271, <4 x i32> %2274, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2282 = bitcast <4 x i32> %2281 to <2 x i64>
  %2283 = shufflevector <2 x i64> %2276, <2 x i64> %2280, <2 x i32> <i32 0, i32 2>
  %2284 = shufflevector <2 x i64> %2276, <2 x i64> %2280, <2 x i32> <i32 1, i32 3>
  %2285 = shufflevector <2 x i64> %2278, <2 x i64> %2282, <2 x i32> <i32 0, i32 2>
  %2286 = shufflevector <2 x i64> %2278, <2 x i64> %2282, <2 x i32> <i32 1, i32 3>
  br label %2287

2287:                                             ; preds = %7, %156, %313, %470, %635, %792, %949, %1114, %1279, %1444, %1535, %1655, %1775, %1903, %2031, %2159
  %2288 = phi <2 x i64> [ %2283, %2159 ], [ %2155, %2031 ], [ %2027, %1903 ], [ %1899, %1775 ], [ %1771, %1655 ], [ %1651, %1535 ], [ %1531, %1444 ], [ %1440, %1279 ], [ %1275, %1114 ], [ %1110, %949 ], [ %945, %792 ], [ %788, %635 ], [ %631, %470 ], [ %466, %313 ], [ %309, %156 ], [ %152, %7 ]
  %2289 = phi <2 x i64> [ %2284, %2159 ], [ %2156, %2031 ], [ %2028, %1903 ], [ %1900, %1775 ], [ %1772, %1655 ], [ %1652, %1535 ], [ %1532, %1444 ], [ %1441, %1279 ], [ %1276, %1114 ], [ %1111, %949 ], [ %946, %792 ], [ %789, %635 ], [ %632, %470 ], [ %467, %313 ], [ %310, %156 ], [ %153, %7 ]
  %2290 = phi <2 x i64> [ %2285, %2159 ], [ %2157, %2031 ], [ %2029, %1903 ], [ %1901, %1775 ], [ %1773, %1655 ], [ %1653, %1535 ], [ %1533, %1444 ], [ %1442, %1279 ], [ %1277, %1114 ], [ %1112, %949 ], [ %947, %792 ], [ %790, %635 ], [ %633, %470 ], [ %468, %313 ], [ %311, %156 ], [ %154, %7 ]
  %2291 = phi <2 x i64> [ %2286, %2159 ], [ %2158, %2031 ], [ %2030, %1903 ], [ %1902, %1775 ], [ %1774, %1655 ], [ %1654, %1535 ], [ %1534, %1444 ], [ %1443, %1279 ], [ %1278, %1114 ], [ %1113, %949 ], [ %948, %792 ], [ %791, %635 ], [ %634, %470 ], [ %469, %313 ], [ %312, %156 ], [ %155, %7 ]
  %2292 = bitcast i32* %1 to <2 x i64>*
  store <2 x i64> %2288, <2 x i64>* %2292, align 16
  %2293 = getelementptr inbounds i32, i32* %1, i64 4
  %2294 = bitcast i32* %2293 to <2 x i64>*
  store <2 x i64> %2289, <2 x i64>* %2294, align 16
  %2295 = getelementptr inbounds i32, i32* %1, i64 8
  %2296 = bitcast i32* %2295 to <2 x i64>*
  store <2 x i64> %2290, <2 x i64>* %2296, align 16
  %2297 = getelementptr inbounds i32, i32* %1, i64 12
  %2298 = bitcast i32* %2297 to <2 x i64>*
  store <2 x i64> %2291, <2 x i64>* %2298, align 16
  br label %2299

2299:                                             ; preds = %2287, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fdct4x4_sse4_1(<2 x i64>* nocapture readonly, <2 x i64>* nocapture, i32, i32) #2 {
  %5 = add nsw i32 %2, -10
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 32
  %8 = load i32, i32* %7, align 16
  %9 = insertelement <4 x i32> undef, i32 %8, i32 0
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> zeroinitializer
  %11 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 48
  %12 = load i32, i32* %11, align 16
  %13 = insertelement <4 x i32> undef, i32 %12, i32 0
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> zeroinitializer
  %15 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 16
  %16 = load i32, i32* %15, align 16
  %17 = insertelement <4 x i32> undef, i32 %16, i32 0
  %18 = shufflevector <4 x i32> %17, <4 x i32> undef, <4 x i32> zeroinitializer
  %19 = add nsw i32 %2, -1
  %20 = shl i32 1, %19
  %21 = insertelement <4 x i32> undef, i32 %20, i32 0
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> zeroinitializer
  %23 = mul nsw i32 %3, 3
  %24 = bitcast <2 x i64>* %0 to <4 x i32>*
  %25 = load <4 x i32>, <4 x i32>* %24, align 16
  %26 = sext i32 %23 to i64
  %27 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %26
  %28 = bitcast <2 x i64>* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 16
  %30 = add <4 x i32> %29, %25
  %31 = sub <4 x i32> %25, %29
  %32 = shl i32 %3, 1
  %33 = sext i32 %3 to i64
  %34 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %33
  %35 = bitcast <2 x i64>* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 16
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %37
  %39 = bitcast <2 x i64>* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 16
  %41 = add <4 x i32> %40, %36
  %42 = sub <4 x i32> %36, %40
  %43 = mul <4 x i32> %30, %10
  %44 = mul <4 x i32> %41, %10
  %45 = add <4 x i32> %43, %22
  %46 = add <4 x i32> %45, %44
  %47 = sub <4 x i32> %45, %44
  %48 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %46, i32 %2) #8
  %49 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %47, i32 %2) #8
  %50 = mul <4 x i32> %42, %14
  %51 = mul <4 x i32> %31, %18
  %52 = add <4 x i32> %51, %22
  %53 = add <4 x i32> %52, %50
  %54 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %53, i32 %2) #8
  %55 = mul <4 x i32> %31, %14
  %56 = mul <4 x i32> %18, %42
  %57 = add <4 x i32> %55, %22
  %58 = sub <4 x i32> %57, %56
  %59 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %58, i32 %2) #8
  %60 = shufflevector <4 x i32> %48, <4 x i32> %54, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %61 = bitcast <4 x i32> %60 to <2 x i64>
  %62 = shufflevector <4 x i32> %48, <4 x i32> %54, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %63 = bitcast <4 x i32> %62 to <2 x i64>
  %64 = shufflevector <4 x i32> %49, <4 x i32> %59, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %65 = bitcast <4 x i32> %64 to <2 x i64>
  %66 = shufflevector <4 x i32> %49, <4 x i32> %59, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %67 = bitcast <4 x i32> %66 to <2 x i64>
  %68 = shufflevector <2 x i64> %61, <2 x i64> %65, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %68, <2 x i64>* %1, align 16
  %69 = shufflevector <2 x i64> %61, <2 x i64> %65, <2 x i32> <i32 1, i32 3>
  %70 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 1
  store <2 x i64> %69, <2 x i64>* %70, align 16
  %71 = shufflevector <2 x i64> %63, <2 x i64> %67, <2 x i32> <i32 0, i32 2>
  %72 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 2
  store <2 x i64> %71, <2 x i64>* %72, align 16
  %73 = shufflevector <2 x i64> %63, <2 x i64> %67, <2 x i32> <i32 1, i32 3>
  %74 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 3
  store <2 x i64> %73, <2 x i64>* %74, align 16
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fadst4x4_sse4_1(<2 x i64>* nocapture readonly, <2 x i64>* nocapture, i32, i32) #2 {
  %5 = add nsw i32 %2, -10
  %6 = sext i32 %5 to i64
  %7 = add nsw i32 %2, -1
  %8 = shl i32 1, %7
  %9 = insertelement <4 x i32> undef, i32 %8, i32 0
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> zeroinitializer
  %11 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %6, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = insertelement <4 x i32> undef, i32 %12, i32 0
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> zeroinitializer
  %15 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %6, i64 2
  %16 = load i32, i32* %15, align 4
  %17 = insertelement <4 x i32> undef, i32 %16, i32 0
  %18 = shufflevector <4 x i32> %17, <4 x i32> undef, <4 x i32> zeroinitializer
  %19 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %6, i64 3
  %20 = load i32, i32* %19, align 4
  %21 = insertelement <4 x i32> undef, i32 %20, i32 0
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> zeroinitializer
  %23 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @av1_sinpi_arr_data, i64 0, i64 %6, i64 4
  %24 = load i32, i32* %23, align 4
  %25 = insertelement <4 x i32> undef, i32 %24, i32 0
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> zeroinitializer
  %27 = bitcast <2 x i64>* %0 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 16
  %29 = mul <4 x i32> %28, %14
  %30 = mul <4 x i32> %26, %28
  %31 = sext i32 %3 to i64
  %32 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %31
  %33 = bitcast <2 x i64>* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 16
  %35 = add <4 x i32> %34, %28
  %36 = mul <4 x i32> %34, %18
  %37 = mul <4 x i32> %34, %14
  %38 = shl nsw i32 %3, 1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %39
  %41 = bitcast <2 x i64>* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 16
  %43 = mul <4 x i32> %42, %22
  %44 = mul nsw i32 %3, 3
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %45
  %47 = bitcast <2 x i64>* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 16
  %49 = mul <4 x i32> %48, %26
  %50 = mul <4 x i32> %48, %18
  %51 = sub <4 x i32> %35, %48
  %52 = add <4 x i32> %36, %29
  %53 = add <4 x i32> %52, %49
  %54 = mul <4 x i32> %51, %22
  %55 = sub <4 x i32> %30, %37
  %56 = add <4 x i32> %50, %55
  %57 = add <4 x i32> %43, %10
  %58 = add <4 x i32> %57, %53
  %59 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %58, i32 %2) #8
  %60 = add <4 x i32> %54, %10
  %61 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %60, i32 %2) #8
  %62 = sub <4 x i32> %10, %43
  %63 = add <4 x i32> %62, %56
  %64 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %63, i32 %2) #8
  %65 = sub <4 x i32> %57, %53
  %66 = add <4 x i32> %65, %56
  %67 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %66, i32 %2) #8
  %68 = shufflevector <4 x i32> %59, <4 x i32> %61, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %69 = bitcast <4 x i32> %68 to <2 x i64>
  %70 = shufflevector <4 x i32> %59, <4 x i32> %61, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %71 = bitcast <4 x i32> %70 to <2 x i64>
  %72 = shufflevector <4 x i32> %64, <4 x i32> %67, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %73 = bitcast <4 x i32> %72 to <2 x i64>
  %74 = shufflevector <4 x i32> %64, <4 x i32> %67, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %75 = bitcast <4 x i32> %74 to <2 x i64>
  %76 = shufflevector <2 x i64> %69, <2 x i64> %73, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %76, <2 x i64>* %1, align 16
  %77 = shufflevector <2 x i64> %69, <2 x i64> %73, <2 x i32> <i32 1, i32 3>
  %78 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 1
  store <2 x i64> %77, <2 x i64>* %78, align 16
  %79 = shufflevector <2 x i64> %71, <2 x i64> %75, <2 x i32> <i32 0, i32 2>
  %80 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 2
  store <2 x i64> %79, <2 x i64>* %80, align 16
  %81 = shufflevector <2 x i64> %71, <2 x i64> %75, <2 x i32> <i32 1, i32 3>
  %82 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 3
  store <2 x i64> %81, <2 x i64>* %82, align 16
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @idtx4x4_sse4_1(<2 x i64>* nocapture readonly, <2 x i64>* nocapture, i32, i32) #2 {
  %5 = sext i32 %3 to i64
  %6 = bitcast <2 x i64>* %0 to <4 x i32>*
  %7 = load <4 x i32>, <4 x i32>* %6, align 16
  %8 = mul <4 x i32> %7, <i32 5793, i32 5793, i32 5793, i32 5793>
  %9 = add <4 x i32> %8, <i32 2048, i32 2048, i32 2048, i32 2048>
  %10 = ashr <4 x i32> %9, <i32 12, i32 12, i32 12, i32 12>
  %11 = bitcast <2 x i64>* %1 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %11, align 16
  %12 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %5
  %13 = bitcast <2 x i64>* %12 to <4 x i32>*
  %14 = load <4 x i32>, <4 x i32>* %13, align 16
  %15 = mul <4 x i32> %14, <i32 5793, i32 5793, i32 5793, i32 5793>
  %16 = add <4 x i32> %15, <i32 2048, i32 2048, i32 2048, i32 2048>
  %17 = ashr <4 x i32> %16, <i32 12, i32 12, i32 12, i32 12>
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 1
  %19 = bitcast <2 x i64>* %18 to <4 x i32>*
  store <4 x i32> %17, <4 x i32>* %19, align 16
  %20 = shl nsw i64 %5, 1
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %20
  %22 = bitcast <2 x i64>* %21 to <4 x i32>*
  %23 = load <4 x i32>, <4 x i32>* %22, align 16
  %24 = mul <4 x i32> %23, <i32 5793, i32 5793, i32 5793, i32 5793>
  %25 = add <4 x i32> %24, <i32 2048, i32 2048, i32 2048, i32 2048>
  %26 = ashr <4 x i32> %25, <i32 12, i32 12, i32 12, i32 12>
  %27 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 2
  %28 = bitcast <2 x i64>* %27 to <4 x i32>*
  store <4 x i32> %26, <4 x i32>* %28, align 16
  %29 = mul nsw i64 %5, 3
  %30 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %29
  %31 = bitcast <2 x i64>* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 16
  %33 = mul <4 x i32> %32, <i32 5793, i32 5793, i32 5793, i32 5793>
  %34 = add <4 x i32> %33, <i32 2048, i32 2048, i32 2048, i32 2048>
  %35 = ashr <4 x i32> %34, <i32 12, i32 12, i32 12, i32 12>
  %36 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 3
  %37 = shufflevector <4 x i32> %10, <4 x i32> %17, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  %39 = shufflevector <4 x i32> %10, <4 x i32> %17, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %40 = bitcast <4 x i32> %39 to <2 x i64>
  %41 = shufflevector <4 x i32> %26, <4 x i32> %35, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = shufflevector <4 x i32> %26, <4 x i32> %35, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %44 = bitcast <4 x i32> %43 to <2 x i64>
  %45 = shufflevector <2 x i64> %38, <2 x i64> %42, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %45, <2 x i64>* %1, align 16
  %46 = shufflevector <2 x i64> %38, <2 x i64> %42, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %46, <2 x i64>* %18, align 16
  %47 = shufflevector <2 x i64> %40, <2 x i64> %44, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %47, <2 x i64>* %27, align 16
  %48 = shufflevector <2 x i64> %40, <2 x i64> %44, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %48, <2 x i64>* %36, align 16
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_8x8_sse4_1(i16* readonly, i32*, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [16 x <2 x i64>], align 16
  %7 = alloca [16 x <2 x i64>], align 16
  %8 = bitcast [16 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 256, i1 false)
  %9 = bitcast [16 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false)
  %10 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 1), align 8
  switch i8 %3, label %7105 [
    i8 0, label %11
    i8 1, label %678
    i8 2, label %1190
    i8 3, label %1693
    i8 4, label %2040
    i8 5, label %2552
    i8 6, label %3095
    i8 7, label %3482
    i8 8, label %3869
    i8 9, label %4216
    i8 10, label %4574
    i8 11, label %5091
    i8 12, label %5601
    i8 13, label %5963
    i8 14, label %6309
    i8 15, label %6671
  ]

11:                                               ; preds = %5
  %12 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %13 = load i8, i8* %10, align 1
  %14 = sext i8 %13 to i32
  %15 = bitcast i16* %0 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 16
  store <2 x i64> %16, <2 x i64>* %12, align 16
  %17 = sext i32 %2 to i64
  %18 = getelementptr inbounds i16, i16* %0, i64 %17
  %19 = bitcast i16* %18 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 16
  %21 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %20, <2 x i64>* %21, align 16
  %22 = shl nsw i32 %2, 1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i16, i16* %0, i64 %23
  %25 = bitcast i16* %24 to <2 x i64>*
  %26 = load <2 x i64>, <2 x i64>* %25, align 16
  %27 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %26, <2 x i64>* %27, align 16
  %28 = mul nsw i32 %2, 3
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i16, i16* %0, i64 %29
  %31 = bitcast i16* %30 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 16
  %33 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %32, <2 x i64>* %33, align 16
  %34 = shl nsw i32 %2, 2
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %0, i64 %35
  %37 = bitcast i16* %36 to <2 x i64>*
  %38 = load <2 x i64>, <2 x i64>* %37, align 16
  %39 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %38, <2 x i64>* %39, align 16
  %40 = mul nsw i32 %2, 5
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i16, i16* %0, i64 %41
  %43 = bitcast i16* %42 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 16
  %45 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %44, <2 x i64>* %45, align 16
  %46 = mul nsw i32 %2, 6
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i16, i16* %0, i64 %47
  %49 = bitcast i16* %48 to <2 x i64>*
  %50 = load <2 x i64>, <2 x i64>* %49, align 16
  %51 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %50, <2 x i64>* %51, align 16
  %52 = mul nsw i32 %2, 7
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %0, i64 %53
  %55 = bitcast i16* %54 to <2 x i64>*
  %56 = load <2 x i64>, <2 x i64>* %55, align 16
  %57 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %58 = bitcast <2 x i64>* %57 to <4 x i32>*
  %59 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %60 = shufflevector <2 x i64> %38, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %61 = bitcast <2 x i64> %38 to <8 x i16>
  %62 = shufflevector <8 x i16> %61, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %63 = sext <4 x i16> %62 to <4 x i32>
  %64 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %65 = bitcast <2 x i64>* %64 to <4 x i32>*
  %66 = bitcast <2 x i64> %60 to <8 x i16>
  %67 = shufflevector <8 x i16> %66, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %68 = sext <4 x i16> %67 to <4 x i32>
  %69 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %70 = bitcast <2 x i64>* %69 to <4 x i32>*
  %71 = shufflevector <2 x i64> %44, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %72 = bitcast <2 x i64> %44 to <8 x i16>
  %73 = shufflevector <8 x i16> %72, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %74 = sext <4 x i16> %73 to <4 x i32>
  %75 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %76 = bitcast <2 x i64>* %75 to <4 x i32>*
  %77 = bitcast <2 x i64> %71 to <8 x i16>
  %78 = shufflevector <8 x i16> %77, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %79 = sext <4 x i16> %78 to <4 x i32>
  %80 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %81 = bitcast <2 x i64>* %80 to <4 x i32>*
  %82 = shufflevector <2 x i64> %50, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %83 = bitcast <2 x i64> %50 to <8 x i16>
  %84 = shufflevector <8 x i16> %83, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %85 = sext <4 x i16> %84 to <4 x i32>
  %86 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %87 = bitcast <2 x i64>* %86 to <4 x i32>*
  %88 = bitcast <2 x i64> %82 to <8 x i16>
  %89 = shufflevector <8 x i16> %88, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %90 = sext <4 x i16> %89 to <4 x i32>
  %91 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %92 = bitcast <2 x i64>* %91 to <4 x i32>*
  %93 = shufflevector <2 x i64> %56, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %94 = bitcast <2 x i64> %56 to <8 x i16>
  %95 = shufflevector <8 x i16> %94, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %96 = sext <4 x i16> %95 to <4 x i32>
  %97 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %98 = bitcast <2 x i64>* %97 to <4 x i32>*
  %99 = bitcast <2 x i64> %93 to <8 x i16>
  %100 = shufflevector <8 x i16> %99, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %101 = sext <4 x i16> %100 to <4 x i32>
  %102 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %103 = bitcast <2 x i64>* %102 to <4 x i32>*
  %104 = shufflevector <2 x i64> %32, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %105 = bitcast <2 x i64> %32 to <8 x i16>
  %106 = shufflevector <8 x i16> %105, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %107 = sext <4 x i16> %106 to <4 x i32>
  %108 = bitcast <2 x i64>* %51 to <4 x i32>*
  %109 = bitcast <2 x i64> %104 to <8 x i16>
  %110 = shufflevector <8 x i16> %109, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %111 = sext <4 x i16> %110 to <4 x i32>
  %112 = shufflevector <2 x i64> %26, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %113 = bitcast <2 x i64> %26 to <8 x i16>
  %114 = shufflevector <8 x i16> %113, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %115 = sext <4 x i16> %114 to <4 x i32>
  %116 = bitcast <2 x i64>* %39 to <4 x i32>*
  %117 = bitcast <2 x i64> %112 to <8 x i16>
  %118 = shufflevector <8 x i16> %117, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %119 = sext <4 x i16> %118 to <4 x i32>
  %120 = bitcast <2 x i64>* %45 to <4 x i32>*
  %121 = shufflevector <2 x i64> %20, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %122 = bitcast <2 x i64> %20 to <8 x i16>
  %123 = shufflevector <8 x i16> %122, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %124 = sext <4 x i16> %123 to <4 x i32>
  %125 = bitcast <2 x i64>* %27 to <4 x i32>*
  %126 = bitcast <2 x i64> %121 to <8 x i16>
  %127 = shufflevector <8 x i16> %126, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %128 = sext <4 x i16> %127 to <4 x i32>
  %129 = bitcast <2 x i64>* %33 to <4 x i32>*
  %130 = shufflevector <2 x i64> %16, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %131 = bitcast <2 x i64> %16 to <8 x i16>
  %132 = shufflevector <8 x i16> %131, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %133 = sext <4 x i16> %132 to <4 x i32>
  %134 = bitcast <2 x i64> %130 to <8 x i16>
  %135 = shufflevector <8 x i16> %134, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %136 = sext <4 x i16> %135 to <4 x i32>
  %137 = bitcast <2 x i64>* %21 to <4 x i32>*
  %138 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %133, i32 %14) #8
  store <4 x i32> %138, <4 x i32>* %59, align 16
  %139 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %136, i32 %14) #8
  store <4 x i32> %139, <4 x i32>* %137, align 16
  %140 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %124, i32 %14) #8
  store <4 x i32> %140, <4 x i32>* %125, align 16
  %141 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %128, i32 %14) #8
  store <4 x i32> %141, <4 x i32>* %129, align 16
  %142 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %115, i32 %14) #8
  store <4 x i32> %142, <4 x i32>* %116, align 16
  %143 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %119, i32 %14) #8
  store <4 x i32> %143, <4 x i32>* %120, align 16
  %144 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %107, i32 %14) #8
  store <4 x i32> %144, <4 x i32>* %108, align 16
  %145 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %111, i32 %14) #8
  store <4 x i32> %145, <4 x i32>* %58, align 16
  %146 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %63, i32 %14) #8
  store <4 x i32> %146, <4 x i32>* %65, align 16
  %147 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %68, i32 %14) #8
  store <4 x i32> %147, <4 x i32>* %70, align 16
  %148 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %74, i32 %14) #8
  store <4 x i32> %148, <4 x i32>* %76, align 16
  %149 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %79, i32 %14) #8
  store <4 x i32> %149, <4 x i32>* %81, align 16
  %150 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %85, i32 %14) #8
  store <4 x i32> %150, <4 x i32>* %87, align 16
  %151 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %90, i32 %14) #8
  store <4 x i32> %151, <4 x i32>* %92, align 16
  %152 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %96, i32 %14) #8
  store <4 x i32> %152, <4 x i32>* %98, align 16
  %153 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %101, i32 %14) #8
  store <4 x i32> %153, <4 x i32>* %103, align 16
  %154 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %155 = sext i8 %154 to i32
  %156 = add nsw i32 %155, -10
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %157, i64 32
  %159 = load i32, i32* %158, align 16
  %160 = insertelement <4 x i32> undef, i32 %159, i32 0
  %161 = shufflevector <4 x i32> %160, <4 x i32> undef, <4 x i32> zeroinitializer
  %162 = sub nsw i32 0, %159
  %163 = insertelement <4 x i32> undef, i32 %162, i32 0
  %164 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> zeroinitializer
  %165 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %157, i64 48
  %166 = load i32, i32* %165, align 16
  %167 = insertelement <4 x i32> undef, i32 %166, i32 0
  %168 = shufflevector <4 x i32> %167, <4 x i32> undef, <4 x i32> zeroinitializer
  %169 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %157, i64 16
  %170 = load i32, i32* %169, align 16
  %171 = insertelement <4 x i32> undef, i32 %170, i32 0
  %172 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> zeroinitializer
  %173 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %157, i64 56
  %174 = load i32, i32* %173, align 16
  %175 = insertelement <4 x i32> undef, i32 %174, i32 0
  %176 = shufflevector <4 x i32> %175, <4 x i32> undef, <4 x i32> zeroinitializer
  %177 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %157, i64 8
  %178 = load i32, i32* %177, align 16
  %179 = insertelement <4 x i32> undef, i32 %178, i32 0
  %180 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> zeroinitializer
  %181 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %157, i64 24
  %182 = load i32, i32* %181, align 16
  %183 = insertelement <4 x i32> undef, i32 %182, i32 0
  %184 = shufflevector <4 x i32> %183, <4 x i32> undef, <4 x i32> zeroinitializer
  %185 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %157, i64 40
  %186 = load i32, i32* %185, align 16
  %187 = insertelement <4 x i32> undef, i32 %186, i32 0
  %188 = shufflevector <4 x i32> %187, <4 x i32> undef, <4 x i32> zeroinitializer
  %189 = add nsw i32 %155, -1
  %190 = shl i32 1, %189
  %191 = insertelement <4 x i32> undef, i32 %190, i32 0
  %192 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> zeroinitializer
  %193 = add <4 x i32> %152, %138
  %194 = sub <4 x i32> %138, %152
  %195 = add <4 x i32> %150, %140
  %196 = sub <4 x i32> %140, %150
  %197 = add <4 x i32> %148, %142
  %198 = sub <4 x i32> %142, %148
  %199 = add <4 x i32> %146, %144
  %200 = sub <4 x i32> %144, %146
  %201 = add <4 x i32> %193, %199
  %202 = sub <4 x i32> %193, %199
  %203 = add <4 x i32> %195, %197
  %204 = sub <4 x i32> %195, %197
  %205 = mul <4 x i32> %164, %198
  %206 = mul <4 x i32> %161, %196
  %207 = add <4 x i32> %205, %206
  %208 = add <4 x i32> %207, %192
  %209 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %208, i32 %155) #8
  %210 = mul <4 x i32> %161, %198
  %211 = mul <4 x i32> %196, %164
  %212 = sub <4 x i32> %210, %211
  %213 = add <4 x i32> %212, %192
  %214 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %213, i32 %155) #8
  %215 = mul <4 x i32> %161, %201
  %216 = mul <4 x i32> %161, %203
  %217 = add <4 x i32> %215, %216
  %218 = add <4 x i32> %217, %192
  %219 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %218, i32 %155) #8
  %220 = sub <4 x i32> %215, %216
  %221 = add <4 x i32> %220, %192
  %222 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %221, i32 %155) #8
  %223 = mul <4 x i32> %168, %204
  %224 = mul <4 x i32> %172, %202
  %225 = add <4 x i32> %223, %192
  %226 = add <4 x i32> %225, %224
  %227 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %226, i32 %155) #8
  %228 = mul <4 x i32> %168, %202
  %229 = mul <4 x i32> %204, %172
  %230 = add <4 x i32> %228, %192
  %231 = sub <4 x i32> %230, %229
  %232 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %231, i32 %155) #8
  %233 = add <4 x i32> %209, %200
  %234 = sub <4 x i32> %200, %209
  %235 = sub <4 x i32> %194, %214
  %236 = add <4 x i32> %214, %194
  %237 = mul <4 x i32> %233, %176
  %238 = mul <4 x i32> %236, %180
  %239 = add <4 x i32> %237, %192
  %240 = add <4 x i32> %239, %238
  %241 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %240, i32 %155) #8
  %242 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %243 = bitcast <2 x i64>* %242 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %243, align 16
  %244 = mul <4 x i32> %236, %176
  %245 = mul <4 x i32> %180, %233
  %246 = sub <4 x i32> %192, %245
  %247 = add <4 x i32> %246, %244
  %248 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %247, i32 %155) #8
  %249 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %250 = bitcast <2 x i64>* %249 to <4 x i32>*
  store <4 x i32> %248, <4 x i32>* %250, align 16
  %251 = mul <4 x i32> %234, %184
  %252 = mul <4 x i32> %235, %188
  %253 = add <4 x i32> %251, %192
  %254 = add <4 x i32> %253, %252
  %255 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %254, i32 %155) #8
  %256 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %257 = bitcast <2 x i64>* %256 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %257, align 16
  %258 = mul <4 x i32> %235, %184
  %259 = mul <4 x i32> %234, %188
  %260 = sub <4 x i32> %192, %259
  %261 = add <4 x i32> %260, %258
  %262 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %261, i32 %155) #8
  %263 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %264 = bitcast <2 x i64>* %263 to <4 x i32>*
  store <4 x i32> %262, <4 x i32>* %264, align 16
  %265 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %265, align 16
  %266 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %267 = bitcast <2 x i64>* %266 to <4 x i32>*
  store <4 x i32> %222, <4 x i32>* %267, align 16
  %268 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %269 = bitcast <2 x i64>* %268 to <4 x i32>*
  store <4 x i32> %227, <4 x i32>* %269, align 16
  %270 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %271 = bitcast <2 x i64>* %270 to <4 x i32>*
  store <4 x i32> %232, <4 x i32>* %271, align 16
  %272 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %273 = load <4 x i32>, <4 x i32>* %103, align 16
  %274 = add <4 x i32> %273, %139
  %275 = sub <4 x i32> %139, %273
  %276 = load <4 x i32>, <4 x i32>* %129, align 16
  %277 = load <4 x i32>, <4 x i32>* %92, align 16
  %278 = add <4 x i32> %277, %276
  %279 = sub <4 x i32> %276, %277
  %280 = load <4 x i32>, <4 x i32>* %120, align 16
  %281 = load <4 x i32>, <4 x i32>* %81, align 16
  %282 = add <4 x i32> %281, %280
  %283 = sub <4 x i32> %280, %281
  %284 = load <4 x i32>, <4 x i32>* %58, align 16
  %285 = load <4 x i32>, <4 x i32>* %70, align 16
  %286 = add <4 x i32> %285, %284
  %287 = sub <4 x i32> %284, %285
  %288 = add <4 x i32> %286, %274
  %289 = sub <4 x i32> %274, %286
  %290 = add <4 x i32> %282, %278
  %291 = sub <4 x i32> %278, %282
  %292 = mul <4 x i32> %283, %164
  %293 = mul <4 x i32> %279, %161
  %294 = add <4 x i32> %293, %192
  %295 = add <4 x i32> %294, %292
  %296 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %295, i32 %155) #8
  %297 = mul <4 x i32> %283, %161
  %298 = mul <4 x i32> %164, %279
  %299 = sub <4 x i32> %192, %298
  %300 = add <4 x i32> %299, %297
  %301 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %300, i32 %155) #8
  %302 = mul <4 x i32> %288, %161
  %303 = mul <4 x i32> %290, %161
  %304 = add <4 x i32> %303, %192
  %305 = add <4 x i32> %304, %302
  %306 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %305, i32 %155) #8
  %307 = sub <4 x i32> %192, %303
  %308 = add <4 x i32> %307, %302
  %309 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %308, i32 %155) #8
  %310 = mul <4 x i32> %291, %168
  %311 = mul <4 x i32> %289, %172
  %312 = add <4 x i32> %310, %192
  %313 = add <4 x i32> %312, %311
  %314 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %313, i32 %155) #8
  %315 = mul <4 x i32> %289, %168
  %316 = mul <4 x i32> %172, %291
  %317 = sub <4 x i32> %192, %316
  %318 = add <4 x i32> %317, %315
  %319 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %318, i32 %155) #8
  %320 = add <4 x i32> %296, %287
  %321 = sub <4 x i32> %287, %296
  %322 = sub <4 x i32> %275, %301
  %323 = add <4 x i32> %301, %275
  %324 = mul <4 x i32> %320, %176
  %325 = mul <4 x i32> %323, %180
  %326 = add <4 x i32> %324, %192
  %327 = add <4 x i32> %326, %325
  %328 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %327, i32 %155) #8
  %329 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %330 = bitcast <2 x i64>* %329 to <4 x i32>*
  store <4 x i32> %328, <4 x i32>* %330, align 16
  %331 = mul <4 x i32> %323, %176
  %332 = mul <4 x i32> %180, %320
  %333 = sub <4 x i32> %192, %332
  %334 = add <4 x i32> %333, %331
  %335 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %334, i32 %155) #8
  %336 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %337 = bitcast <2 x i64>* %336 to <4 x i32>*
  store <4 x i32> %335, <4 x i32>* %337, align 16
  %338 = mul <4 x i32> %321, %184
  %339 = mul <4 x i32> %322, %188
  %340 = add <4 x i32> %338, %192
  %341 = add <4 x i32> %340, %339
  %342 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %341, i32 %155) #8
  %343 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %344 = bitcast <2 x i64>* %343 to <4 x i32>*
  store <4 x i32> %342, <4 x i32>* %344, align 16
  %345 = mul <4 x i32> %322, %184
  %346 = mul <4 x i32> %188, %321
  %347 = sub <4 x i32> %192, %346
  %348 = add <4 x i32> %347, %345
  %349 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %348, i32 %155) #8
  %350 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %351 = bitcast <2 x i64>* %350 to <4 x i32>*
  store <4 x i32> %349, <4 x i32>* %351, align 16
  %352 = bitcast <2 x i64>* %272 to <4 x i32>*
  store <4 x i32> %306, <4 x i32>* %352, align 16
  %353 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %354 = bitcast <2 x i64>* %353 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %354, align 16
  %355 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %356 = bitcast <2 x i64>* %355 to <4 x i32>*
  store <4 x i32> %314, <4 x i32>* %356, align 16
  %357 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %358 = bitcast <2 x i64>* %357 to <4 x i32>*
  store <4 x i32> %319, <4 x i32>* %358, align 16
  %359 = getelementptr inbounds i8, i8* %10, i64 1
  %360 = load i8, i8* %359, align 1
  %361 = sext i8 %360 to i32
  %362 = sub nsw i32 0, %361
  %363 = xor i32 %361, -1
  %364 = shl i32 1, %363
  %365 = insertelement <4 x i32> undef, i32 %364, i32 0
  %366 = shufflevector <4 x i32> %365, <4 x i32> undef, <4 x i32> zeroinitializer
  %367 = add <4 x i32> %366, %219
  %368 = add <4 x i32> %366, %306
  %369 = add <4 x i32> %366, %241
  %370 = add <4 x i32> %366, %328
  %371 = add <4 x i32> %366, %227
  %372 = add <4 x i32> %366, %314
  %373 = add <4 x i32> %366, %262
  %374 = add <4 x i32> %366, %349
  %375 = add <4 x i32> %366, %222
  %376 = add <4 x i32> %309, %366
  %377 = add <4 x i32> %366, %255
  %378 = add <4 x i32> %342, %366
  %379 = add <4 x i32> %366, %232
  %380 = add <4 x i32> %319, %366
  %381 = add <4 x i32> %366, %248
  %382 = add <4 x i32> %335, %366
  %383 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %367, i32 %362) #8
  store <4 x i32> %383, <4 x i32>* %265, align 16
  %384 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %368, i32 %362) #8
  store <4 x i32> %384, <4 x i32>* %352, align 16
  %385 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %369, i32 %362) #8
  store <4 x i32> %385, <4 x i32>* %243, align 16
  %386 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %370, i32 %362) #8
  store <4 x i32> %386, <4 x i32>* %330, align 16
  %387 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %371, i32 %362) #8
  store <4 x i32> %387, <4 x i32>* %269, align 16
  %388 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %372, i32 %362) #8
  store <4 x i32> %388, <4 x i32>* %356, align 16
  %389 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %373, i32 %362) #8
  store <4 x i32> %389, <4 x i32>* %264, align 16
  %390 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %374, i32 %362) #8
  store <4 x i32> %390, <4 x i32>* %351, align 16
  %391 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %375, i32 %362) #8
  store <4 x i32> %391, <4 x i32>* %267, align 16
  %392 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %376, i32 %362) #8
  store <4 x i32> %392, <4 x i32>* %354, align 16
  %393 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %377, i32 %362) #8
  store <4 x i32> %393, <4 x i32>* %257, align 16
  %394 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %378, i32 %362) #8
  store <4 x i32> %394, <4 x i32>* %344, align 16
  %395 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %379, i32 %362) #8
  store <4 x i32> %395, <4 x i32>* %271, align 16
  %396 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %380, i32 %362) #8
  store <4 x i32> %396, <4 x i32>* %358, align 16
  %397 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %381, i32 %362) #8
  store <4 x i32> %397, <4 x i32>* %250, align 16
  %398 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %382, i32 %362) #8
  store <4 x i32> %398, <4 x i32>* %337, align 16
  %399 = shufflevector <4 x i32> %383, <4 x i32> %385, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %400 = bitcast <4 x i32> %399 to <2 x i64>
  %401 = shufflevector <4 x i32> %383, <4 x i32> %385, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %402 = bitcast <4 x i32> %401 to <2 x i64>
  %403 = shufflevector <4 x i32> %387, <4 x i32> %389, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %404 = bitcast <4 x i32> %403 to <2 x i64>
  %405 = shufflevector <4 x i32> %387, <4 x i32> %389, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %406 = bitcast <4 x i32> %405 to <2 x i64>
  %407 = shufflevector <2 x i64> %400, <2 x i64> %404, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %407, <2 x i64>* %12, align 16
  %408 = shufflevector <2 x i64> %400, <2 x i64> %404, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %408, <2 x i64>* %27, align 16
  %409 = shufflevector <2 x i64> %402, <2 x i64> %406, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %409, <2 x i64>* %39, align 16
  %410 = shufflevector <2 x i64> %402, <2 x i64> %406, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %410, <2 x i64>* %51, align 16
  %411 = shufflevector <4 x i32> %384, <4 x i32> %386, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %412 = bitcast <4 x i32> %411 to <2 x i64>
  %413 = shufflevector <4 x i32> %384, <4 x i32> %386, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %414 = bitcast <4 x i32> %413 to <2 x i64>
  %415 = shufflevector <4 x i32> %388, <4 x i32> %390, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %416 = bitcast <4 x i32> %415 to <2 x i64>
  %417 = shufflevector <4 x i32> %388, <4 x i32> %390, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %418 = bitcast <4 x i32> %417 to <2 x i64>
  %419 = shufflevector <2 x i64> %412, <2 x i64> %416, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %419, <2 x i64>* %64, align 16
  %420 = shufflevector <2 x i64> %412, <2 x i64> %416, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %420, <2 x i64>* %75, align 16
  %421 = shufflevector <2 x i64> %414, <2 x i64> %418, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %421, <2 x i64>* %86, align 16
  %422 = shufflevector <2 x i64> %414, <2 x i64> %418, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %422, <2 x i64>* %97, align 16
  %423 = shufflevector <4 x i32> %391, <4 x i32> %393, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %424 = bitcast <4 x i32> %423 to <2 x i64>
  %425 = shufflevector <4 x i32> %391, <4 x i32> %393, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %426 = bitcast <4 x i32> %425 to <2 x i64>
  %427 = shufflevector <4 x i32> %395, <4 x i32> %397, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %428 = bitcast <4 x i32> %427 to <2 x i64>
  %429 = shufflevector <4 x i32> %395, <4 x i32> %397, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %430 = bitcast <4 x i32> %429 to <2 x i64>
  %431 = shufflevector <2 x i64> %424, <2 x i64> %428, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %431, <2 x i64>* %21, align 16
  %432 = shufflevector <2 x i64> %424, <2 x i64> %428, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %432, <2 x i64>* %33, align 16
  %433 = shufflevector <2 x i64> %426, <2 x i64> %430, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %433, <2 x i64>* %45, align 16
  %434 = shufflevector <2 x i64> %426, <2 x i64> %430, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %434, <2 x i64>* %57, align 16
  %435 = shufflevector <4 x i32> %392, <4 x i32> %394, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %436 = bitcast <4 x i32> %435 to <2 x i64>
  %437 = shufflevector <4 x i32> %392, <4 x i32> %394, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %438 = bitcast <4 x i32> %437 to <2 x i64>
  %439 = shufflevector <4 x i32> %396, <4 x i32> %398, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %440 = bitcast <4 x i32> %439 to <2 x i64>
  %441 = shufflevector <4 x i32> %396, <4 x i32> %398, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %442 = bitcast <4 x i32> %441 to <2 x i64>
  %443 = shufflevector <2 x i64> %436, <2 x i64> %440, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %443, <2 x i64>* %69, align 16
  %444 = shufflevector <2 x i64> %436, <2 x i64> %440, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %444, <2 x i64>* %80, align 16
  %445 = shufflevector <2 x i64> %438, <2 x i64> %442, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %445, <2 x i64>* %91, align 16
  %446 = shufflevector <2 x i64> %438, <2 x i64> %442, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %446, <2 x i64>* %102, align 16
  %447 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  %448 = sext i8 %447 to i32
  %449 = add nsw i32 %448, -10
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %450, i64 32
  %452 = load i32, i32* %451, align 16
  %453 = insertelement <4 x i32> undef, i32 %452, i32 0
  %454 = shufflevector <4 x i32> %453, <4 x i32> undef, <4 x i32> zeroinitializer
  %455 = sub nsw i32 0, %452
  %456 = insertelement <4 x i32> undef, i32 %455, i32 0
  %457 = shufflevector <4 x i32> %456, <4 x i32> undef, <4 x i32> zeroinitializer
  %458 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %450, i64 48
  %459 = load i32, i32* %458, align 16
  %460 = insertelement <4 x i32> undef, i32 %459, i32 0
  %461 = shufflevector <4 x i32> %460, <4 x i32> undef, <4 x i32> zeroinitializer
  %462 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %450, i64 16
  %463 = load i32, i32* %462, align 16
  %464 = insertelement <4 x i32> undef, i32 %463, i32 0
  %465 = shufflevector <4 x i32> %464, <4 x i32> undef, <4 x i32> zeroinitializer
  %466 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %450, i64 56
  %467 = load i32, i32* %466, align 16
  %468 = insertelement <4 x i32> undef, i32 %467, i32 0
  %469 = shufflevector <4 x i32> %468, <4 x i32> undef, <4 x i32> zeroinitializer
  %470 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %450, i64 8
  %471 = load i32, i32* %470, align 16
  %472 = insertelement <4 x i32> undef, i32 %471, i32 0
  %473 = shufflevector <4 x i32> %472, <4 x i32> undef, <4 x i32> zeroinitializer
  %474 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %450, i64 24
  %475 = load i32, i32* %474, align 16
  %476 = insertelement <4 x i32> undef, i32 %475, i32 0
  %477 = shufflevector <4 x i32> %476, <4 x i32> undef, <4 x i32> zeroinitializer
  %478 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %450, i64 40
  %479 = load i32, i32* %478, align 16
  %480 = insertelement <4 x i32> undef, i32 %479, i32 0
  %481 = shufflevector <4 x i32> %480, <4 x i32> undef, <4 x i32> zeroinitializer
  %482 = add nsw i32 %448, -1
  %483 = shl i32 1, %482
  %484 = insertelement <4 x i32> undef, i32 %483, i32 0
  %485 = shufflevector <4 x i32> %484, <4 x i32> undef, <4 x i32> zeroinitializer
  %486 = bitcast <2 x i64> %407 to <4 x i32>
  %487 = bitcast <2 x i64> %422 to <4 x i32>
  %488 = add <4 x i32> %487, %486
  %489 = sub <4 x i32> %486, %487
  %490 = bitcast <2 x i64> %408 to <4 x i32>
  %491 = bitcast <2 x i64> %421 to <4 x i32>
  %492 = add <4 x i32> %491, %490
  %493 = sub <4 x i32> %490, %491
  %494 = load <4 x i32>, <4 x i32>* %116, align 16
  %495 = bitcast <2 x i64> %420 to <4 x i32>
  %496 = add <4 x i32> %494, %495
  %497 = sub <4 x i32> %494, %495
  %498 = load <4 x i32>, <4 x i32>* %108, align 16
  %499 = bitcast <2 x i64> %419 to <4 x i32>
  %500 = add <4 x i32> %498, %499
  %501 = sub <4 x i32> %498, %499
  %502 = add <4 x i32> %500, %488
  %503 = sub <4 x i32> %488, %500
  %504 = add <4 x i32> %496, %492
  %505 = sub <4 x i32> %492, %496
  %506 = mul <4 x i32> %497, %457
  %507 = mul <4 x i32> %493, %454
  %508 = add <4 x i32> %507, %485
  %509 = add <4 x i32> %508, %506
  %510 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %509, i32 %448) #8
  %511 = mul <4 x i32> %497, %454
  %512 = mul <4 x i32> %457, %493
  %513 = sub <4 x i32> %485, %512
  %514 = add <4 x i32> %513, %511
  %515 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %514, i32 %448) #8
  %516 = mul <4 x i32> %502, %454
  %517 = mul <4 x i32> %504, %454
  %518 = add <4 x i32> %517, %485
  %519 = add <4 x i32> %518, %516
  %520 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %519, i32 %448) #8
  %521 = sub <4 x i32> %485, %517
  %522 = add <4 x i32> %521, %516
  %523 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %522, i32 %448) #8
  %524 = mul <4 x i32> %505, %461
  %525 = mul <4 x i32> %503, %465
  %526 = add <4 x i32> %524, %485
  %527 = add <4 x i32> %526, %525
  %528 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %527, i32 %448) #8
  %529 = mul <4 x i32> %503, %461
  %530 = mul <4 x i32> %465, %505
  %531 = sub <4 x i32> %485, %530
  %532 = add <4 x i32> %531, %529
  %533 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %532, i32 %448) #8
  %534 = add <4 x i32> %510, %501
  %535 = sub <4 x i32> %501, %510
  %536 = sub <4 x i32> %489, %515
  %537 = add <4 x i32> %515, %489
  %538 = mul <4 x i32> %534, %469
  %539 = mul <4 x i32> %537, %473
  %540 = add <4 x i32> %538, %485
  %541 = add <4 x i32> %540, %539
  %542 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %541, i32 %448) #8
  store <4 x i32> %542, <4 x i32>* %243, align 16
  %543 = mul <4 x i32> %537, %469
  %544 = mul <4 x i32> %473, %534
  %545 = sub <4 x i32> %485, %544
  %546 = add <4 x i32> %545, %543
  %547 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %546, i32 %448) #8
  store <4 x i32> %547, <4 x i32>* %250, align 16
  %548 = mul <4 x i32> %535, %477
  %549 = mul <4 x i32> %536, %481
  %550 = add <4 x i32> %548, %485
  %551 = add <4 x i32> %550, %549
  %552 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %551, i32 %448) #8
  store <4 x i32> %552, <4 x i32>* %257, align 16
  %553 = mul <4 x i32> %536, %477
  %554 = mul <4 x i32> %481, %535
  %555 = sub <4 x i32> %485, %554
  %556 = add <4 x i32> %555, %553
  %557 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %556, i32 %448) #8
  store <4 x i32> %557, <4 x i32>* %264, align 16
  store <4 x i32> %520, <4 x i32>* %265, align 16
  store <4 x i32> %523, <4 x i32>* %267, align 16
  store <4 x i32> %528, <4 x i32>* %269, align 16
  store <4 x i32> %533, <4 x i32>* %271, align 16
  %558 = load <4 x i32>, <4 x i32>* %137, align 16
  %559 = load <4 x i32>, <4 x i32>* %103, align 16
  %560 = add <4 x i32> %559, %558
  %561 = sub <4 x i32> %558, %559
  %562 = load <4 x i32>, <4 x i32>* %129, align 16
  %563 = load <4 x i32>, <4 x i32>* %92, align 16
  %564 = add <4 x i32> %563, %562
  %565 = sub <4 x i32> %562, %563
  %566 = load <4 x i32>, <4 x i32>* %120, align 16
  %567 = load <4 x i32>, <4 x i32>* %81, align 16
  %568 = add <4 x i32> %567, %566
  %569 = sub <4 x i32> %566, %567
  %570 = load <4 x i32>, <4 x i32>* %58, align 16
  %571 = load <4 x i32>, <4 x i32>* %70, align 16
  %572 = add <4 x i32> %571, %570
  %573 = sub <4 x i32> %570, %571
  %574 = add <4 x i32> %572, %560
  %575 = sub <4 x i32> %560, %572
  %576 = add <4 x i32> %568, %564
  %577 = sub <4 x i32> %564, %568
  %578 = mul <4 x i32> %569, %457
  %579 = mul <4 x i32> %565, %454
  %580 = add <4 x i32> %579, %485
  %581 = add <4 x i32> %580, %578
  %582 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %581, i32 %448) #8
  %583 = mul <4 x i32> %569, %454
  %584 = mul <4 x i32> %457, %565
  %585 = sub <4 x i32> %485, %584
  %586 = add <4 x i32> %585, %583
  %587 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %586, i32 %448) #8
  %588 = mul <4 x i32> %574, %454
  %589 = mul <4 x i32> %576, %454
  %590 = add <4 x i32> %589, %485
  %591 = add <4 x i32> %590, %588
  %592 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %591, i32 %448) #8
  %593 = sub <4 x i32> %485, %589
  %594 = add <4 x i32> %593, %588
  %595 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %594, i32 %448) #8
  %596 = mul <4 x i32> %577, %461
  %597 = mul <4 x i32> %575, %465
  %598 = add <4 x i32> %596, %485
  %599 = add <4 x i32> %598, %597
  %600 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %599, i32 %448) #8
  %601 = mul <4 x i32> %575, %461
  %602 = mul <4 x i32> %465, %577
  %603 = sub <4 x i32> %485, %602
  %604 = add <4 x i32> %603, %601
  %605 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %604, i32 %448) #8
  %606 = add <4 x i32> %582, %573
  %607 = sub <4 x i32> %573, %582
  %608 = sub <4 x i32> %561, %587
  %609 = add <4 x i32> %587, %561
  %610 = mul <4 x i32> %606, %469
  %611 = mul <4 x i32> %609, %473
  %612 = add <4 x i32> %610, %485
  %613 = add <4 x i32> %612, %611
  %614 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %613, i32 %448) #8
  store <4 x i32> %614, <4 x i32>* %330, align 16
  %615 = mul <4 x i32> %609, %469
  %616 = mul <4 x i32> %473, %606
  %617 = sub <4 x i32> %485, %616
  %618 = add <4 x i32> %617, %615
  %619 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %618, i32 %448) #8
  store <4 x i32> %619, <4 x i32>* %337, align 16
  %620 = mul <4 x i32> %607, %477
  %621 = mul <4 x i32> %608, %481
  %622 = add <4 x i32> %620, %485
  %623 = add <4 x i32> %622, %621
  %624 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %623, i32 %448) #8
  store <4 x i32> %624, <4 x i32>* %344, align 16
  %625 = mul <4 x i32> %608, %477
  %626 = mul <4 x i32> %481, %607
  %627 = sub <4 x i32> %485, %626
  %628 = add <4 x i32> %627, %625
  %629 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %628, i32 %448) #8
  store <4 x i32> %629, <4 x i32>* %351, align 16
  store <4 x i32> %592, <4 x i32>* %352, align 16
  store <4 x i32> %595, <4 x i32>* %354, align 16
  store <4 x i32> %600, <4 x i32>* %356, align 16
  store <4 x i32> %605, <4 x i32>* %358, align 16
  %630 = shufflevector <4 x i32> %520, <4 x i32> %542, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %631 = bitcast <4 x i32> %630 to <2 x i64>
  %632 = shufflevector <4 x i32> %520, <4 x i32> %542, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %633 = bitcast <4 x i32> %632 to <2 x i64>
  %634 = shufflevector <4 x i32> %528, <4 x i32> %557, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %635 = bitcast <4 x i32> %634 to <2 x i64>
  %636 = shufflevector <4 x i32> %528, <4 x i32> %557, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %637 = bitcast <4 x i32> %636 to <2 x i64>
  %638 = shufflevector <2 x i64> %631, <2 x i64> %635, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %638, <2 x i64>* %12, align 16
  %639 = shufflevector <2 x i64> %631, <2 x i64> %635, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %639, <2 x i64>* %27, align 16
  %640 = shufflevector <2 x i64> %633, <2 x i64> %637, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %640, <2 x i64>* %39, align 16
  %641 = shufflevector <2 x i64> %633, <2 x i64> %637, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %641, <2 x i64>* %51, align 16
  %642 = shufflevector <4 x i32> %592, <4 x i32> %614, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %643 = bitcast <4 x i32> %642 to <2 x i64>
  %644 = shufflevector <4 x i32> %592, <4 x i32> %614, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %645 = bitcast <4 x i32> %644 to <2 x i64>
  %646 = shufflevector <4 x i32> %600, <4 x i32> %629, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %647 = bitcast <4 x i32> %646 to <2 x i64>
  %648 = shufflevector <4 x i32> %600, <4 x i32> %629, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %649 = bitcast <4 x i32> %648 to <2 x i64>
  %650 = shufflevector <2 x i64> %643, <2 x i64> %647, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %650, <2 x i64>* %64, align 16
  %651 = shufflevector <2 x i64> %643, <2 x i64> %647, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %651, <2 x i64>* %75, align 16
  %652 = shufflevector <2 x i64> %645, <2 x i64> %649, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %652, <2 x i64>* %86, align 16
  %653 = shufflevector <2 x i64> %645, <2 x i64> %649, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %653, <2 x i64>* %97, align 16
  %654 = shufflevector <4 x i32> %523, <4 x i32> %552, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %655 = bitcast <4 x i32> %654 to <2 x i64>
  %656 = shufflevector <4 x i32> %523, <4 x i32> %552, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %657 = bitcast <4 x i32> %656 to <2 x i64>
  %658 = shufflevector <4 x i32> %533, <4 x i32> %547, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %659 = bitcast <4 x i32> %658 to <2 x i64>
  %660 = shufflevector <4 x i32> %533, <4 x i32> %547, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %661 = bitcast <4 x i32> %660 to <2 x i64>
  %662 = shufflevector <2 x i64> %655, <2 x i64> %659, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %662, <2 x i64>* %21, align 16
  %663 = shufflevector <2 x i64> %655, <2 x i64> %659, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %663, <2 x i64>* %33, align 16
  %664 = shufflevector <2 x i64> %657, <2 x i64> %661, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %664, <2 x i64>* %45, align 16
  %665 = shufflevector <2 x i64> %657, <2 x i64> %661, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %665, <2 x i64>* %57, align 16
  %666 = shufflevector <4 x i32> %595, <4 x i32> %624, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %667 = bitcast <4 x i32> %666 to <2 x i64>
  %668 = shufflevector <4 x i32> %595, <4 x i32> %624, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %669 = bitcast <4 x i32> %668 to <2 x i64>
  %670 = shufflevector <4 x i32> %605, <4 x i32> %619, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %671 = bitcast <4 x i32> %670 to <2 x i64>
  %672 = shufflevector <4 x i32> %605, <4 x i32> %619, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %673 = bitcast <4 x i32> %672 to <2 x i64>
  %674 = shufflevector <2 x i64> %667, <2 x i64> %671, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %674, <2 x i64>* %69, align 16
  %675 = shufflevector <2 x i64> %667, <2 x i64> %671, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %675, <2 x i64>* %80, align 16
  %676 = shufflevector <2 x i64> %669, <2 x i64> %673, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %676, <2 x i64>* %91, align 16
  %677 = shufflevector <2 x i64> %669, <2 x i64> %673, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %677, <2 x i64>* %102, align 16
  br label %7057

678:                                              ; preds = %5
  %679 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %680 = load i8, i8* %10, align 1
  %681 = sext i8 %680 to i32
  %682 = bitcast i16* %0 to <2 x i64>*
  %683 = load <2 x i64>, <2 x i64>* %682, align 16
  store <2 x i64> %683, <2 x i64>* %679, align 16
  %684 = sext i32 %2 to i64
  %685 = getelementptr inbounds i16, i16* %0, i64 %684
  %686 = bitcast i16* %685 to <2 x i64>*
  %687 = load <2 x i64>, <2 x i64>* %686, align 16
  %688 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %687, <2 x i64>* %688, align 16
  %689 = shl nsw i32 %2, 1
  %690 = sext i32 %689 to i64
  %691 = getelementptr inbounds i16, i16* %0, i64 %690
  %692 = bitcast i16* %691 to <2 x i64>*
  %693 = load <2 x i64>, <2 x i64>* %692, align 16
  %694 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %693, <2 x i64>* %694, align 16
  %695 = mul nsw i32 %2, 3
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds i16, i16* %0, i64 %696
  %698 = bitcast i16* %697 to <2 x i64>*
  %699 = load <2 x i64>, <2 x i64>* %698, align 16
  %700 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %699, <2 x i64>* %700, align 16
  %701 = shl nsw i32 %2, 2
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds i16, i16* %0, i64 %702
  %704 = bitcast i16* %703 to <2 x i64>*
  %705 = load <2 x i64>, <2 x i64>* %704, align 16
  %706 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %705, <2 x i64>* %706, align 16
  %707 = mul nsw i32 %2, 5
  %708 = sext i32 %707 to i64
  %709 = getelementptr inbounds i16, i16* %0, i64 %708
  %710 = bitcast i16* %709 to <2 x i64>*
  %711 = load <2 x i64>, <2 x i64>* %710, align 16
  %712 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %711, <2 x i64>* %712, align 16
  %713 = mul nsw i32 %2, 6
  %714 = sext i32 %713 to i64
  %715 = getelementptr inbounds i16, i16* %0, i64 %714
  %716 = bitcast i16* %715 to <2 x i64>*
  %717 = load <2 x i64>, <2 x i64>* %716, align 16
  %718 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %717, <2 x i64>* %718, align 16
  %719 = mul nsw i32 %2, 7
  %720 = sext i32 %719 to i64
  %721 = getelementptr inbounds i16, i16* %0, i64 %720
  %722 = bitcast i16* %721 to <2 x i64>*
  %723 = load <2 x i64>, <2 x i64>* %722, align 16
  %724 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %725 = bitcast <2 x i64>* %724 to <4 x i32>*
  %726 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %727 = shufflevector <2 x i64> %705, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %728 = bitcast <2 x i64> %705 to <8 x i16>
  %729 = shufflevector <8 x i16> %728, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %730 = sext <4 x i16> %729 to <4 x i32>
  %731 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %732 = bitcast <2 x i64>* %731 to <4 x i32>*
  %733 = bitcast <2 x i64> %727 to <8 x i16>
  %734 = shufflevector <8 x i16> %733, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %735 = sext <4 x i16> %734 to <4 x i32>
  %736 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %737 = bitcast <2 x i64>* %736 to <4 x i32>*
  %738 = shufflevector <2 x i64> %711, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %739 = bitcast <2 x i64> %711 to <8 x i16>
  %740 = shufflevector <8 x i16> %739, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %741 = sext <4 x i16> %740 to <4 x i32>
  %742 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %743 = bitcast <2 x i64>* %742 to <4 x i32>*
  %744 = bitcast <2 x i64> %738 to <8 x i16>
  %745 = shufflevector <8 x i16> %744, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %746 = sext <4 x i16> %745 to <4 x i32>
  %747 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %748 = bitcast <2 x i64>* %747 to <4 x i32>*
  %749 = shufflevector <2 x i64> %717, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %750 = bitcast <2 x i64> %717 to <8 x i16>
  %751 = shufflevector <8 x i16> %750, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %752 = sext <4 x i16> %751 to <4 x i32>
  %753 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %754 = bitcast <2 x i64>* %753 to <4 x i32>*
  %755 = bitcast <2 x i64> %749 to <8 x i16>
  %756 = shufflevector <8 x i16> %755, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %757 = sext <4 x i16> %756 to <4 x i32>
  %758 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %759 = bitcast <2 x i64>* %758 to <4 x i32>*
  %760 = shufflevector <2 x i64> %723, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %761 = bitcast <2 x i64> %723 to <8 x i16>
  %762 = shufflevector <8 x i16> %761, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %763 = sext <4 x i16> %762 to <4 x i32>
  %764 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %765 = bitcast <2 x i64>* %764 to <4 x i32>*
  %766 = bitcast <2 x i64> %760 to <8 x i16>
  %767 = shufflevector <8 x i16> %766, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %768 = sext <4 x i16> %767 to <4 x i32>
  %769 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %770 = bitcast <2 x i64>* %769 to <4 x i32>*
  %771 = shufflevector <2 x i64> %699, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %772 = bitcast <2 x i64> %699 to <8 x i16>
  %773 = shufflevector <8 x i16> %772, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %774 = sext <4 x i16> %773 to <4 x i32>
  %775 = bitcast <2 x i64>* %718 to <4 x i32>*
  %776 = bitcast <2 x i64> %771 to <8 x i16>
  %777 = shufflevector <8 x i16> %776, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %778 = sext <4 x i16> %777 to <4 x i32>
  %779 = shufflevector <2 x i64> %693, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %780 = bitcast <2 x i64> %693 to <8 x i16>
  %781 = shufflevector <8 x i16> %780, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %782 = sext <4 x i16> %781 to <4 x i32>
  %783 = bitcast <2 x i64>* %706 to <4 x i32>*
  %784 = bitcast <2 x i64> %779 to <8 x i16>
  %785 = shufflevector <8 x i16> %784, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %786 = sext <4 x i16> %785 to <4 x i32>
  %787 = bitcast <2 x i64>* %712 to <4 x i32>*
  %788 = shufflevector <2 x i64> %687, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %789 = bitcast <2 x i64> %687 to <8 x i16>
  %790 = shufflevector <8 x i16> %789, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %791 = sext <4 x i16> %790 to <4 x i32>
  %792 = bitcast <2 x i64>* %694 to <4 x i32>*
  %793 = bitcast <2 x i64> %788 to <8 x i16>
  %794 = shufflevector <8 x i16> %793, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %795 = sext <4 x i16> %794 to <4 x i32>
  %796 = bitcast <2 x i64>* %700 to <4 x i32>*
  %797 = shufflevector <2 x i64> %683, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %798 = bitcast <2 x i64> %683 to <8 x i16>
  %799 = shufflevector <8 x i16> %798, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %800 = sext <4 x i16> %799 to <4 x i32>
  %801 = bitcast <2 x i64> %797 to <8 x i16>
  %802 = shufflevector <8 x i16> %801, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %803 = sext <4 x i16> %802 to <4 x i32>
  %804 = bitcast <2 x i64>* %688 to <4 x i32>*
  %805 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %800, i32 %681) #8
  store <4 x i32> %805, <4 x i32>* %726, align 16
  %806 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %803, i32 %681) #8
  store <4 x i32> %806, <4 x i32>* %804, align 16
  %807 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %791, i32 %681) #8
  store <4 x i32> %807, <4 x i32>* %792, align 16
  %808 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %795, i32 %681) #8
  store <4 x i32> %808, <4 x i32>* %796, align 16
  %809 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %782, i32 %681) #8
  store <4 x i32> %809, <4 x i32>* %783, align 16
  %810 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %786, i32 %681) #8
  store <4 x i32> %810, <4 x i32>* %787, align 16
  %811 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %774, i32 %681) #8
  store <4 x i32> %811, <4 x i32>* %775, align 16
  %812 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %778, i32 %681) #8
  store <4 x i32> %812, <4 x i32>* %725, align 16
  %813 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %730, i32 %681) #8
  store <4 x i32> %813, <4 x i32>* %732, align 16
  %814 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %735, i32 %681) #8
  store <4 x i32> %814, <4 x i32>* %737, align 16
  %815 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %741, i32 %681) #8
  store <4 x i32> %815, <4 x i32>* %743, align 16
  %816 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %746, i32 %681) #8
  store <4 x i32> %816, <4 x i32>* %748, align 16
  %817 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %752, i32 %681) #8
  store <4 x i32> %817, <4 x i32>* %754, align 16
  %818 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %757, i32 %681) #8
  store <4 x i32> %818, <4 x i32>* %759, align 16
  %819 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %763, i32 %681) #8
  store <4 x i32> %819, <4 x i32>* %765, align 16
  %820 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %768, i32 %681) #8
  store <4 x i32> %820, <4 x i32>* %770, align 16
  %821 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  %822 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %823 = sext i8 %822 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %679, <2 x i64>* nonnull %821, i32 %823, i32 2)
  %824 = getelementptr inbounds i8, i8* %10, i64 1
  %825 = load i8, i8* %824, align 1
  %826 = sext i8 %825 to i32
  %827 = sub nsw i32 0, %826
  %828 = xor i32 %826, -1
  %829 = shl i32 1, %828
  %830 = insertelement <4 x i32> undef, i32 %829, i32 0
  %831 = shufflevector <4 x i32> %830, <4 x i32> undef, <4 x i32> zeroinitializer
  %832 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  %833 = load <4 x i32>, <4 x i32>* %832, align 16
  %834 = add <4 x i32> %831, %833
  %835 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %836 = bitcast <2 x i64>* %835 to <4 x i32>*
  %837 = load <4 x i32>, <4 x i32>* %836, align 16
  %838 = add <4 x i32> %831, %837
  %839 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %840 = bitcast <2 x i64>* %839 to <4 x i32>*
  %841 = load <4 x i32>, <4 x i32>* %840, align 16
  %842 = add <4 x i32> %831, %841
  %843 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %844 = bitcast <2 x i64>* %843 to <4 x i32>*
  %845 = load <4 x i32>, <4 x i32>* %844, align 16
  %846 = add <4 x i32> %845, %831
  %847 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %848 = bitcast <2 x i64>* %847 to <4 x i32>*
  %849 = load <4 x i32>, <4 x i32>* %848, align 16
  %850 = add <4 x i32> %849, %831
  %851 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %852 = bitcast <2 x i64>* %851 to <4 x i32>*
  %853 = load <4 x i32>, <4 x i32>* %852, align 16
  %854 = add <4 x i32> %853, %831
  %855 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %856 = bitcast <2 x i64>* %855 to <4 x i32>*
  %857 = load <4 x i32>, <4 x i32>* %856, align 16
  %858 = add <4 x i32> %857, %831
  %859 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %860 = bitcast <2 x i64>* %859 to <4 x i32>*
  %861 = load <4 x i32>, <4 x i32>* %860, align 16
  %862 = add <4 x i32> %861, %831
  %863 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %864 = bitcast <2 x i64>* %863 to <4 x i32>*
  %865 = load <4 x i32>, <4 x i32>* %864, align 16
  %866 = add <4 x i32> %865, %831
  %867 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %868 = bitcast <2 x i64>* %867 to <4 x i32>*
  %869 = load <4 x i32>, <4 x i32>* %868, align 16
  %870 = add <4 x i32> %869, %831
  %871 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %872 = bitcast <2 x i64>* %871 to <4 x i32>*
  %873 = load <4 x i32>, <4 x i32>* %872, align 16
  %874 = add <4 x i32> %873, %831
  %875 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %876 = bitcast <2 x i64>* %875 to <4 x i32>*
  %877 = load <4 x i32>, <4 x i32>* %876, align 16
  %878 = add <4 x i32> %877, %831
  %879 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %880 = bitcast <2 x i64>* %879 to <4 x i32>*
  %881 = load <4 x i32>, <4 x i32>* %880, align 16
  %882 = add <4 x i32> %881, %831
  %883 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %884 = bitcast <2 x i64>* %883 to <4 x i32>*
  %885 = load <4 x i32>, <4 x i32>* %884, align 16
  %886 = add <4 x i32> %885, %831
  %887 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %888 = bitcast <2 x i64>* %887 to <4 x i32>*
  %889 = load <4 x i32>, <4 x i32>* %888, align 16
  %890 = add <4 x i32> %889, %831
  %891 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %892 = bitcast <2 x i64>* %891 to <4 x i32>*
  %893 = load <4 x i32>, <4 x i32>* %892, align 16
  %894 = add <4 x i32> %893, %831
  %895 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %834, i32 %827) #8
  store <4 x i32> %895, <4 x i32>* %832, align 16
  %896 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %838, i32 %827) #8
  store <4 x i32> %896, <4 x i32>* %836, align 16
  %897 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %842, i32 %827) #8
  store <4 x i32> %897, <4 x i32>* %840, align 16
  %898 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %846, i32 %827) #8
  store <4 x i32> %898, <4 x i32>* %844, align 16
  %899 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %850, i32 %827) #8
  store <4 x i32> %899, <4 x i32>* %848, align 16
  %900 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %854, i32 %827) #8
  store <4 x i32> %900, <4 x i32>* %852, align 16
  %901 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %858, i32 %827) #8
  store <4 x i32> %901, <4 x i32>* %856, align 16
  %902 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %862, i32 %827) #8
  store <4 x i32> %902, <4 x i32>* %860, align 16
  %903 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %866, i32 %827) #8
  store <4 x i32> %903, <4 x i32>* %864, align 16
  %904 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %870, i32 %827) #8
  store <4 x i32> %904, <4 x i32>* %868, align 16
  %905 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %874, i32 %827) #8
  store <4 x i32> %905, <4 x i32>* %872, align 16
  %906 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %878, i32 %827) #8
  store <4 x i32> %906, <4 x i32>* %876, align 16
  %907 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %882, i32 %827) #8
  store <4 x i32> %907, <4 x i32>* %880, align 16
  %908 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %886, i32 %827) #8
  store <4 x i32> %908, <4 x i32>* %884, align 16
  %909 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %890, i32 %827) #8
  store <4 x i32> %909, <4 x i32>* %888, align 16
  %910 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %894, i32 %827) #8
  store <4 x i32> %910, <4 x i32>* %892, align 16
  %911 = shufflevector <4 x i32> %895, <4 x i32> %897, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %912 = bitcast <4 x i32> %911 to <2 x i64>
  %913 = shufflevector <4 x i32> %895, <4 x i32> %897, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %914 = bitcast <4 x i32> %913 to <2 x i64>
  %915 = shufflevector <4 x i32> %899, <4 x i32> %901, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %916 = bitcast <4 x i32> %915 to <2 x i64>
  %917 = shufflevector <4 x i32> %899, <4 x i32> %901, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %918 = bitcast <4 x i32> %917 to <2 x i64>
  %919 = shufflevector <2 x i64> %912, <2 x i64> %916, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %919, <2 x i64>* %679, align 16
  %920 = shufflevector <2 x i64> %912, <2 x i64> %916, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %920, <2 x i64>* %694, align 16
  %921 = shufflevector <2 x i64> %914, <2 x i64> %918, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %921, <2 x i64>* %706, align 16
  %922 = shufflevector <2 x i64> %914, <2 x i64> %918, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %922, <2 x i64>* %718, align 16
  %923 = shufflevector <4 x i32> %896, <4 x i32> %898, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %924 = bitcast <4 x i32> %923 to <2 x i64>
  %925 = shufflevector <4 x i32> %896, <4 x i32> %898, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %926 = bitcast <4 x i32> %925 to <2 x i64>
  %927 = shufflevector <4 x i32> %900, <4 x i32> %902, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %928 = bitcast <4 x i32> %927 to <2 x i64>
  %929 = shufflevector <4 x i32> %900, <4 x i32> %902, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %930 = bitcast <4 x i32> %929 to <2 x i64>
  %931 = shufflevector <2 x i64> %924, <2 x i64> %928, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %931, <2 x i64>* %731, align 16
  %932 = shufflevector <2 x i64> %924, <2 x i64> %928, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %932, <2 x i64>* %742, align 16
  %933 = shufflevector <2 x i64> %926, <2 x i64> %930, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %933, <2 x i64>* %753, align 16
  %934 = shufflevector <2 x i64> %926, <2 x i64> %930, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %934, <2 x i64>* %764, align 16
  %935 = shufflevector <4 x i32> %903, <4 x i32> %905, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %936 = bitcast <4 x i32> %935 to <2 x i64>
  %937 = shufflevector <4 x i32> %903, <4 x i32> %905, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %938 = bitcast <4 x i32> %937 to <2 x i64>
  %939 = shufflevector <4 x i32> %907, <4 x i32> %909, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %940 = bitcast <4 x i32> %939 to <2 x i64>
  %941 = shufflevector <4 x i32> %907, <4 x i32> %909, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %942 = bitcast <4 x i32> %941 to <2 x i64>
  %943 = shufflevector <2 x i64> %936, <2 x i64> %940, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %943, <2 x i64>* %688, align 16
  %944 = shufflevector <2 x i64> %936, <2 x i64> %940, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %944, <2 x i64>* %700, align 16
  %945 = shufflevector <2 x i64> %938, <2 x i64> %942, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %945, <2 x i64>* %712, align 16
  %946 = shufflevector <2 x i64> %938, <2 x i64> %942, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %946, <2 x i64>* %724, align 16
  %947 = shufflevector <4 x i32> %904, <4 x i32> %906, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %948 = bitcast <4 x i32> %947 to <2 x i64>
  %949 = shufflevector <4 x i32> %904, <4 x i32> %906, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %950 = bitcast <4 x i32> %949 to <2 x i64>
  %951 = shufflevector <4 x i32> %908, <4 x i32> %910, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %952 = bitcast <4 x i32> %951 to <2 x i64>
  %953 = shufflevector <4 x i32> %908, <4 x i32> %910, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %954 = bitcast <4 x i32> %953 to <2 x i64>
  %955 = shufflevector <2 x i64> %948, <2 x i64> %952, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %955, <2 x i64>* %736, align 16
  %956 = shufflevector <2 x i64> %948, <2 x i64> %952, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %956, <2 x i64>* %747, align 16
  %957 = shufflevector <2 x i64> %950, <2 x i64> %954, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %957, <2 x i64>* %758, align 16
  %958 = shufflevector <2 x i64> %950, <2 x i64> %954, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %958, <2 x i64>* %769, align 16
  %959 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  %960 = sext i8 %959 to i32
  %961 = add nsw i32 %960, -10
  %962 = sext i32 %961 to i64
  %963 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %962, i64 32
  %964 = load i32, i32* %963, align 16
  %965 = insertelement <4 x i32> undef, i32 %964, i32 0
  %966 = shufflevector <4 x i32> %965, <4 x i32> undef, <4 x i32> zeroinitializer
  %967 = sub nsw i32 0, %964
  %968 = insertelement <4 x i32> undef, i32 %967, i32 0
  %969 = shufflevector <4 x i32> %968, <4 x i32> undef, <4 x i32> zeroinitializer
  %970 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %962, i64 48
  %971 = load i32, i32* %970, align 16
  %972 = insertelement <4 x i32> undef, i32 %971, i32 0
  %973 = shufflevector <4 x i32> %972, <4 x i32> undef, <4 x i32> zeroinitializer
  %974 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %962, i64 16
  %975 = load i32, i32* %974, align 16
  %976 = insertelement <4 x i32> undef, i32 %975, i32 0
  %977 = shufflevector <4 x i32> %976, <4 x i32> undef, <4 x i32> zeroinitializer
  %978 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %962, i64 56
  %979 = load i32, i32* %978, align 16
  %980 = insertelement <4 x i32> undef, i32 %979, i32 0
  %981 = shufflevector <4 x i32> %980, <4 x i32> undef, <4 x i32> zeroinitializer
  %982 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %962, i64 8
  %983 = load i32, i32* %982, align 16
  %984 = insertelement <4 x i32> undef, i32 %983, i32 0
  %985 = shufflevector <4 x i32> %984, <4 x i32> undef, <4 x i32> zeroinitializer
  %986 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %962, i64 24
  %987 = load i32, i32* %986, align 16
  %988 = insertelement <4 x i32> undef, i32 %987, i32 0
  %989 = shufflevector <4 x i32> %988, <4 x i32> undef, <4 x i32> zeroinitializer
  %990 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %962, i64 40
  %991 = load i32, i32* %990, align 16
  %992 = insertelement <4 x i32> undef, i32 %991, i32 0
  %993 = shufflevector <4 x i32> %992, <4 x i32> undef, <4 x i32> zeroinitializer
  %994 = add nsw i32 %960, -1
  %995 = shl i32 1, %994
  %996 = insertelement <4 x i32> undef, i32 %995, i32 0
  %997 = shufflevector <4 x i32> %996, <4 x i32> undef, <4 x i32> zeroinitializer
  %998 = bitcast <2 x i64> %919 to <4 x i32>
  %999 = bitcast <2 x i64> %934 to <4 x i32>
  %1000 = add <4 x i32> %999, %998
  %1001 = sub <4 x i32> %998, %999
  %1002 = bitcast <2 x i64> %920 to <4 x i32>
  %1003 = bitcast <2 x i64> %933 to <4 x i32>
  %1004 = add <4 x i32> %1003, %1002
  %1005 = sub <4 x i32> %1002, %1003
  %1006 = load <4 x i32>, <4 x i32>* %783, align 16
  %1007 = bitcast <2 x i64> %932 to <4 x i32>
  %1008 = add <4 x i32> %1006, %1007
  %1009 = sub <4 x i32> %1006, %1007
  %1010 = load <4 x i32>, <4 x i32>* %775, align 16
  %1011 = bitcast <2 x i64> %931 to <4 x i32>
  %1012 = add <4 x i32> %1010, %1011
  %1013 = sub <4 x i32> %1010, %1011
  %1014 = add <4 x i32> %1012, %1000
  %1015 = sub <4 x i32> %1000, %1012
  %1016 = add <4 x i32> %1008, %1004
  %1017 = sub <4 x i32> %1004, %1008
  %1018 = mul <4 x i32> %1009, %969
  %1019 = mul <4 x i32> %1005, %966
  %1020 = add <4 x i32> %1019, %997
  %1021 = add <4 x i32> %1020, %1018
  %1022 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1021, i32 %960) #8
  %1023 = mul <4 x i32> %1009, %966
  %1024 = mul <4 x i32> %969, %1005
  %1025 = sub <4 x i32> %997, %1024
  %1026 = add <4 x i32> %1025, %1023
  %1027 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1026, i32 %960) #8
  %1028 = mul <4 x i32> %1014, %966
  %1029 = mul <4 x i32> %1016, %966
  %1030 = add <4 x i32> %1029, %997
  %1031 = add <4 x i32> %1030, %1028
  %1032 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1031, i32 %960) #8
  %1033 = sub <4 x i32> %997, %1029
  %1034 = add <4 x i32> %1033, %1028
  %1035 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1034, i32 %960) #8
  %1036 = mul <4 x i32> %1017, %973
  %1037 = mul <4 x i32> %1015, %977
  %1038 = add <4 x i32> %1036, %997
  %1039 = add <4 x i32> %1038, %1037
  %1040 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1039, i32 %960) #8
  %1041 = mul <4 x i32> %1015, %973
  %1042 = mul <4 x i32> %977, %1017
  %1043 = sub <4 x i32> %997, %1042
  %1044 = add <4 x i32> %1043, %1041
  %1045 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1044, i32 %960) #8
  %1046 = add <4 x i32> %1022, %1013
  %1047 = sub <4 x i32> %1013, %1022
  %1048 = sub <4 x i32> %1001, %1027
  %1049 = add <4 x i32> %1027, %1001
  %1050 = mul <4 x i32> %1046, %981
  %1051 = mul <4 x i32> %1049, %985
  %1052 = add <4 x i32> %1050, %997
  %1053 = add <4 x i32> %1052, %1051
  %1054 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1053, i32 %960) #8
  store <4 x i32> %1054, <4 x i32>* %840, align 16
  %1055 = mul <4 x i32> %1049, %981
  %1056 = mul <4 x i32> %985, %1046
  %1057 = sub <4 x i32> %997, %1056
  %1058 = add <4 x i32> %1057, %1055
  %1059 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1058, i32 %960) #8
  store <4 x i32> %1059, <4 x i32>* %888, align 16
  %1060 = mul <4 x i32> %1047, %989
  %1061 = mul <4 x i32> %1048, %993
  %1062 = add <4 x i32> %1060, %997
  %1063 = add <4 x i32> %1062, %1061
  %1064 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1063, i32 %960) #8
  store <4 x i32> %1064, <4 x i32>* %872, align 16
  %1065 = mul <4 x i32> %1048, %989
  %1066 = mul <4 x i32> %993, %1047
  %1067 = sub <4 x i32> %997, %1066
  %1068 = add <4 x i32> %1067, %1065
  %1069 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1068, i32 %960) #8
  store <4 x i32> %1069, <4 x i32>* %856, align 16
  store <4 x i32> %1032, <4 x i32>* %832, align 16
  store <4 x i32> %1035, <4 x i32>* %864, align 16
  store <4 x i32> %1040, <4 x i32>* %848, align 16
  store <4 x i32> %1045, <4 x i32>* %880, align 16
  %1070 = load <4 x i32>, <4 x i32>* %804, align 16
  %1071 = load <4 x i32>, <4 x i32>* %770, align 16
  %1072 = add <4 x i32> %1071, %1070
  %1073 = sub <4 x i32> %1070, %1071
  %1074 = load <4 x i32>, <4 x i32>* %796, align 16
  %1075 = load <4 x i32>, <4 x i32>* %759, align 16
  %1076 = add <4 x i32> %1075, %1074
  %1077 = sub <4 x i32> %1074, %1075
  %1078 = load <4 x i32>, <4 x i32>* %787, align 16
  %1079 = load <4 x i32>, <4 x i32>* %748, align 16
  %1080 = add <4 x i32> %1079, %1078
  %1081 = sub <4 x i32> %1078, %1079
  %1082 = load <4 x i32>, <4 x i32>* %725, align 16
  %1083 = load <4 x i32>, <4 x i32>* %737, align 16
  %1084 = add <4 x i32> %1083, %1082
  %1085 = sub <4 x i32> %1082, %1083
  %1086 = add <4 x i32> %1084, %1072
  %1087 = sub <4 x i32> %1072, %1084
  %1088 = add <4 x i32> %1080, %1076
  %1089 = sub <4 x i32> %1076, %1080
  %1090 = mul <4 x i32> %1081, %969
  %1091 = mul <4 x i32> %1077, %966
  %1092 = add <4 x i32> %1091, %997
  %1093 = add <4 x i32> %1092, %1090
  %1094 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1093, i32 %960) #8
  %1095 = mul <4 x i32> %1081, %966
  %1096 = mul <4 x i32> %969, %1077
  %1097 = sub <4 x i32> %997, %1096
  %1098 = add <4 x i32> %1097, %1095
  %1099 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1098, i32 %960) #8
  %1100 = mul <4 x i32> %1086, %966
  %1101 = mul <4 x i32> %1088, %966
  %1102 = add <4 x i32> %1101, %997
  %1103 = add <4 x i32> %1102, %1100
  %1104 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1103, i32 %960) #8
  %1105 = sub <4 x i32> %997, %1101
  %1106 = add <4 x i32> %1105, %1100
  %1107 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1106, i32 %960) #8
  %1108 = mul <4 x i32> %1089, %973
  %1109 = mul <4 x i32> %1087, %977
  %1110 = add <4 x i32> %1108, %997
  %1111 = add <4 x i32> %1110, %1109
  %1112 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1111, i32 %960) #8
  %1113 = mul <4 x i32> %1087, %973
  %1114 = mul <4 x i32> %977, %1089
  %1115 = sub <4 x i32> %997, %1114
  %1116 = add <4 x i32> %1115, %1113
  %1117 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1116, i32 %960) #8
  %1118 = add <4 x i32> %1094, %1085
  %1119 = sub <4 x i32> %1085, %1094
  %1120 = sub <4 x i32> %1073, %1099
  %1121 = add <4 x i32> %1099, %1073
  %1122 = mul <4 x i32> %1118, %981
  %1123 = mul <4 x i32> %1121, %985
  %1124 = add <4 x i32> %1122, %997
  %1125 = add <4 x i32> %1124, %1123
  %1126 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1125, i32 %960) #8
  store <4 x i32> %1126, <4 x i32>* %844, align 16
  %1127 = mul <4 x i32> %1121, %981
  %1128 = mul <4 x i32> %985, %1118
  %1129 = sub <4 x i32> %997, %1128
  %1130 = add <4 x i32> %1129, %1127
  %1131 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1130, i32 %960) #8
  store <4 x i32> %1131, <4 x i32>* %892, align 16
  %1132 = mul <4 x i32> %1119, %989
  %1133 = mul <4 x i32> %1120, %993
  %1134 = add <4 x i32> %1132, %997
  %1135 = add <4 x i32> %1134, %1133
  %1136 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1135, i32 %960) #8
  store <4 x i32> %1136, <4 x i32>* %876, align 16
  %1137 = mul <4 x i32> %1120, %989
  %1138 = mul <4 x i32> %993, %1119
  %1139 = sub <4 x i32> %997, %1138
  %1140 = add <4 x i32> %1139, %1137
  %1141 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1140, i32 %960) #8
  store <4 x i32> %1141, <4 x i32>* %860, align 16
  store <4 x i32> %1104, <4 x i32>* %836, align 16
  store <4 x i32> %1107, <4 x i32>* %868, align 16
  store <4 x i32> %1112, <4 x i32>* %852, align 16
  store <4 x i32> %1117, <4 x i32>* %884, align 16
  %1142 = shufflevector <4 x i32> %1032, <4 x i32> %1054, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1143 = bitcast <4 x i32> %1142 to <2 x i64>
  %1144 = shufflevector <4 x i32> %1032, <4 x i32> %1054, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1145 = bitcast <4 x i32> %1144 to <2 x i64>
  %1146 = shufflevector <4 x i32> %1040, <4 x i32> %1069, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1147 = bitcast <4 x i32> %1146 to <2 x i64>
  %1148 = shufflevector <4 x i32> %1040, <4 x i32> %1069, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1149 = bitcast <4 x i32> %1148 to <2 x i64>
  %1150 = shufflevector <2 x i64> %1143, <2 x i64> %1147, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1150, <2 x i64>* %679, align 16
  %1151 = shufflevector <2 x i64> %1143, <2 x i64> %1147, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1151, <2 x i64>* %694, align 16
  %1152 = shufflevector <2 x i64> %1145, <2 x i64> %1149, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1152, <2 x i64>* %706, align 16
  %1153 = shufflevector <2 x i64> %1145, <2 x i64> %1149, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1153, <2 x i64>* %718, align 16
  %1154 = shufflevector <4 x i32> %1104, <4 x i32> %1126, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1155 = bitcast <4 x i32> %1154 to <2 x i64>
  %1156 = shufflevector <4 x i32> %1104, <4 x i32> %1126, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1157 = bitcast <4 x i32> %1156 to <2 x i64>
  %1158 = shufflevector <4 x i32> %1112, <4 x i32> %1141, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1159 = bitcast <4 x i32> %1158 to <2 x i64>
  %1160 = shufflevector <4 x i32> %1112, <4 x i32> %1141, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1161 = bitcast <4 x i32> %1160 to <2 x i64>
  %1162 = shufflevector <2 x i64> %1155, <2 x i64> %1159, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1162, <2 x i64>* %731, align 16
  %1163 = shufflevector <2 x i64> %1155, <2 x i64> %1159, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1163, <2 x i64>* %742, align 16
  %1164 = shufflevector <2 x i64> %1157, <2 x i64> %1161, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1164, <2 x i64>* %753, align 16
  %1165 = shufflevector <2 x i64> %1157, <2 x i64> %1161, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1165, <2 x i64>* %764, align 16
  %1166 = shufflevector <4 x i32> %1035, <4 x i32> %1064, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1167 = bitcast <4 x i32> %1166 to <2 x i64>
  %1168 = shufflevector <4 x i32> %1035, <4 x i32> %1064, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1169 = bitcast <4 x i32> %1168 to <2 x i64>
  %1170 = shufflevector <4 x i32> %1045, <4 x i32> %1059, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1171 = bitcast <4 x i32> %1170 to <2 x i64>
  %1172 = shufflevector <4 x i32> %1045, <4 x i32> %1059, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1173 = bitcast <4 x i32> %1172 to <2 x i64>
  %1174 = shufflevector <2 x i64> %1167, <2 x i64> %1171, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1174, <2 x i64>* %688, align 16
  %1175 = shufflevector <2 x i64> %1167, <2 x i64> %1171, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1175, <2 x i64>* %700, align 16
  %1176 = shufflevector <2 x i64> %1169, <2 x i64> %1173, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1176, <2 x i64>* %712, align 16
  %1177 = shufflevector <2 x i64> %1169, <2 x i64> %1173, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1177, <2 x i64>* %724, align 16
  %1178 = shufflevector <4 x i32> %1107, <4 x i32> %1136, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1179 = bitcast <4 x i32> %1178 to <2 x i64>
  %1180 = shufflevector <4 x i32> %1107, <4 x i32> %1136, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1181 = bitcast <4 x i32> %1180 to <2 x i64>
  %1182 = shufflevector <4 x i32> %1117, <4 x i32> %1131, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1183 = bitcast <4 x i32> %1182 to <2 x i64>
  %1184 = shufflevector <4 x i32> %1117, <4 x i32> %1131, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1185 = bitcast <4 x i32> %1184 to <2 x i64>
  %1186 = shufflevector <2 x i64> %1179, <2 x i64> %1183, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1186, <2 x i64>* %736, align 16
  %1187 = shufflevector <2 x i64> %1179, <2 x i64> %1183, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1187, <2 x i64>* %747, align 16
  %1188 = shufflevector <2 x i64> %1181, <2 x i64> %1185, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1188, <2 x i64>* %758, align 16
  %1189 = shufflevector <2 x i64> %1181, <2 x i64> %1185, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1189, <2 x i64>* %769, align 16
  br label %7057

1190:                                             ; preds = %5
  %1191 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %1192 = load i8, i8* %10, align 1
  %1193 = sext i8 %1192 to i32
  %1194 = bitcast i16* %0 to <2 x i64>*
  %1195 = load <2 x i64>, <2 x i64>* %1194, align 16
  store <2 x i64> %1195, <2 x i64>* %1191, align 16
  %1196 = sext i32 %2 to i64
  %1197 = getelementptr inbounds i16, i16* %0, i64 %1196
  %1198 = bitcast i16* %1197 to <2 x i64>*
  %1199 = load <2 x i64>, <2 x i64>* %1198, align 16
  %1200 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %1199, <2 x i64>* %1200, align 16
  %1201 = shl nsw i32 %2, 1
  %1202 = sext i32 %1201 to i64
  %1203 = getelementptr inbounds i16, i16* %0, i64 %1202
  %1204 = bitcast i16* %1203 to <2 x i64>*
  %1205 = load <2 x i64>, <2 x i64>* %1204, align 16
  %1206 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %1205, <2 x i64>* %1206, align 16
  %1207 = mul nsw i32 %2, 3
  %1208 = sext i32 %1207 to i64
  %1209 = getelementptr inbounds i16, i16* %0, i64 %1208
  %1210 = bitcast i16* %1209 to <2 x i64>*
  %1211 = load <2 x i64>, <2 x i64>* %1210, align 16
  %1212 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %1211, <2 x i64>* %1212, align 16
  %1213 = shl nsw i32 %2, 2
  %1214 = sext i32 %1213 to i64
  %1215 = getelementptr inbounds i16, i16* %0, i64 %1214
  %1216 = bitcast i16* %1215 to <2 x i64>*
  %1217 = load <2 x i64>, <2 x i64>* %1216, align 16
  %1218 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %1217, <2 x i64>* %1218, align 16
  %1219 = mul nsw i32 %2, 5
  %1220 = sext i32 %1219 to i64
  %1221 = getelementptr inbounds i16, i16* %0, i64 %1220
  %1222 = bitcast i16* %1221 to <2 x i64>*
  %1223 = load <2 x i64>, <2 x i64>* %1222, align 16
  %1224 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %1223, <2 x i64>* %1224, align 16
  %1225 = mul nsw i32 %2, 6
  %1226 = sext i32 %1225 to i64
  %1227 = getelementptr inbounds i16, i16* %0, i64 %1226
  %1228 = bitcast i16* %1227 to <2 x i64>*
  %1229 = load <2 x i64>, <2 x i64>* %1228, align 16
  %1230 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %1229, <2 x i64>* %1230, align 16
  %1231 = mul nsw i32 %2, 7
  %1232 = sext i32 %1231 to i64
  %1233 = getelementptr inbounds i16, i16* %0, i64 %1232
  %1234 = bitcast i16* %1233 to <2 x i64>*
  %1235 = load <2 x i64>, <2 x i64>* %1234, align 16
  %1236 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %1237 = bitcast <2 x i64>* %1236 to <4 x i32>*
  %1238 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %1239 = shufflevector <2 x i64> %1217, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1240 = bitcast <2 x i64> %1217 to <8 x i16>
  %1241 = shufflevector <8 x i16> %1240, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1242 = sext <4 x i16> %1241 to <4 x i32>
  %1243 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %1244 = bitcast <2 x i64>* %1243 to <4 x i32>*
  %1245 = bitcast <2 x i64> %1239 to <8 x i16>
  %1246 = shufflevector <8 x i16> %1245, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1247 = sext <4 x i16> %1246 to <4 x i32>
  %1248 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %1249 = bitcast <2 x i64>* %1248 to <4 x i32>*
  %1250 = shufflevector <2 x i64> %1223, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1251 = bitcast <2 x i64> %1223 to <8 x i16>
  %1252 = shufflevector <8 x i16> %1251, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1253 = sext <4 x i16> %1252 to <4 x i32>
  %1254 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %1255 = bitcast <2 x i64>* %1254 to <4 x i32>*
  %1256 = bitcast <2 x i64> %1250 to <8 x i16>
  %1257 = shufflevector <8 x i16> %1256, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1258 = sext <4 x i16> %1257 to <4 x i32>
  %1259 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %1260 = bitcast <2 x i64>* %1259 to <4 x i32>*
  %1261 = shufflevector <2 x i64> %1229, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1262 = bitcast <2 x i64> %1229 to <8 x i16>
  %1263 = shufflevector <8 x i16> %1262, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1264 = sext <4 x i16> %1263 to <4 x i32>
  %1265 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %1266 = bitcast <2 x i64>* %1265 to <4 x i32>*
  %1267 = bitcast <2 x i64> %1261 to <8 x i16>
  %1268 = shufflevector <8 x i16> %1267, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1269 = sext <4 x i16> %1268 to <4 x i32>
  %1270 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %1271 = bitcast <2 x i64>* %1270 to <4 x i32>*
  %1272 = shufflevector <2 x i64> %1235, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1273 = bitcast <2 x i64> %1235 to <8 x i16>
  %1274 = shufflevector <8 x i16> %1273, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1275 = sext <4 x i16> %1274 to <4 x i32>
  %1276 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %1277 = bitcast <2 x i64>* %1276 to <4 x i32>*
  %1278 = bitcast <2 x i64> %1272 to <8 x i16>
  %1279 = shufflevector <8 x i16> %1278, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1280 = sext <4 x i16> %1279 to <4 x i32>
  %1281 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %1282 = bitcast <2 x i64>* %1281 to <4 x i32>*
  %1283 = shufflevector <2 x i64> %1211, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1284 = bitcast <2 x i64> %1211 to <8 x i16>
  %1285 = shufflevector <8 x i16> %1284, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1286 = sext <4 x i16> %1285 to <4 x i32>
  %1287 = bitcast <2 x i64>* %1230 to <4 x i32>*
  %1288 = bitcast <2 x i64> %1283 to <8 x i16>
  %1289 = shufflevector <8 x i16> %1288, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1290 = sext <4 x i16> %1289 to <4 x i32>
  %1291 = shufflevector <2 x i64> %1205, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1292 = bitcast <2 x i64> %1205 to <8 x i16>
  %1293 = shufflevector <8 x i16> %1292, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1294 = sext <4 x i16> %1293 to <4 x i32>
  %1295 = bitcast <2 x i64>* %1218 to <4 x i32>*
  %1296 = bitcast <2 x i64> %1291 to <8 x i16>
  %1297 = shufflevector <8 x i16> %1296, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1298 = sext <4 x i16> %1297 to <4 x i32>
  %1299 = bitcast <2 x i64>* %1224 to <4 x i32>*
  %1300 = shufflevector <2 x i64> %1199, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1301 = bitcast <2 x i64> %1199 to <8 x i16>
  %1302 = shufflevector <8 x i16> %1301, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1303 = sext <4 x i16> %1302 to <4 x i32>
  %1304 = bitcast <2 x i64>* %1206 to <4 x i32>*
  %1305 = bitcast <2 x i64> %1300 to <8 x i16>
  %1306 = shufflevector <8 x i16> %1305, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1307 = sext <4 x i16> %1306 to <4 x i32>
  %1308 = bitcast <2 x i64>* %1212 to <4 x i32>*
  %1309 = shufflevector <2 x i64> %1195, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1310 = bitcast <2 x i64> %1195 to <8 x i16>
  %1311 = shufflevector <8 x i16> %1310, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1312 = sext <4 x i16> %1311 to <4 x i32>
  %1313 = bitcast <2 x i64> %1309 to <8 x i16>
  %1314 = shufflevector <8 x i16> %1313, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1315 = sext <4 x i16> %1314 to <4 x i32>
  %1316 = bitcast <2 x i64>* %1200 to <4 x i32>*
  %1317 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1312, i32 %1193) #8
  store <4 x i32> %1317, <4 x i32>* %1238, align 16
  %1318 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1315, i32 %1193) #8
  store <4 x i32> %1318, <4 x i32>* %1316, align 16
  %1319 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1303, i32 %1193) #8
  store <4 x i32> %1319, <4 x i32>* %1304, align 16
  %1320 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1307, i32 %1193) #8
  store <4 x i32> %1320, <4 x i32>* %1308, align 16
  %1321 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1294, i32 %1193) #8
  store <4 x i32> %1321, <4 x i32>* %1295, align 16
  %1322 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1298, i32 %1193) #8
  store <4 x i32> %1322, <4 x i32>* %1299, align 16
  %1323 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1286, i32 %1193) #8
  store <4 x i32> %1323, <4 x i32>* %1287, align 16
  %1324 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1290, i32 %1193) #8
  store <4 x i32> %1324, <4 x i32>* %1237, align 16
  %1325 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1242, i32 %1193) #8
  store <4 x i32> %1325, <4 x i32>* %1244, align 16
  %1326 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1247, i32 %1193) #8
  store <4 x i32> %1326, <4 x i32>* %1249, align 16
  %1327 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1253, i32 %1193) #8
  store <4 x i32> %1327, <4 x i32>* %1255, align 16
  %1328 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1258, i32 %1193) #8
  store <4 x i32> %1328, <4 x i32>* %1260, align 16
  %1329 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1264, i32 %1193) #8
  store <4 x i32> %1329, <4 x i32>* %1266, align 16
  %1330 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1269, i32 %1193) #8
  store <4 x i32> %1330, <4 x i32>* %1271, align 16
  %1331 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1275, i32 %1193) #8
  store <4 x i32> %1331, <4 x i32>* %1277, align 16
  %1332 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1280, i32 %1193) #8
  store <4 x i32> %1332, <4 x i32>* %1282, align 16
  %1333 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  %1334 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %1335 = sext i8 %1334 to i32
  %1336 = add nsw i32 %1335, -10
  %1337 = sext i32 %1336 to i64
  %1338 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %1337, i64 32
  %1339 = load i32, i32* %1338, align 16
  %1340 = insertelement <4 x i32> undef, i32 %1339, i32 0
  %1341 = shufflevector <4 x i32> %1340, <4 x i32> undef, <4 x i32> zeroinitializer
  %1342 = sub nsw i32 0, %1339
  %1343 = insertelement <4 x i32> undef, i32 %1342, i32 0
  %1344 = shufflevector <4 x i32> %1343, <4 x i32> undef, <4 x i32> zeroinitializer
  %1345 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %1337, i64 48
  %1346 = load i32, i32* %1345, align 16
  %1347 = insertelement <4 x i32> undef, i32 %1346, i32 0
  %1348 = shufflevector <4 x i32> %1347, <4 x i32> undef, <4 x i32> zeroinitializer
  %1349 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %1337, i64 16
  %1350 = load i32, i32* %1349, align 16
  %1351 = insertelement <4 x i32> undef, i32 %1350, i32 0
  %1352 = shufflevector <4 x i32> %1351, <4 x i32> undef, <4 x i32> zeroinitializer
  %1353 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %1337, i64 56
  %1354 = load i32, i32* %1353, align 16
  %1355 = insertelement <4 x i32> undef, i32 %1354, i32 0
  %1356 = shufflevector <4 x i32> %1355, <4 x i32> undef, <4 x i32> zeroinitializer
  %1357 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %1337, i64 8
  %1358 = load i32, i32* %1357, align 16
  %1359 = insertelement <4 x i32> undef, i32 %1358, i32 0
  %1360 = shufflevector <4 x i32> %1359, <4 x i32> undef, <4 x i32> zeroinitializer
  %1361 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %1337, i64 24
  %1362 = load i32, i32* %1361, align 16
  %1363 = insertelement <4 x i32> undef, i32 %1362, i32 0
  %1364 = shufflevector <4 x i32> %1363, <4 x i32> undef, <4 x i32> zeroinitializer
  %1365 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %1337, i64 40
  %1366 = load i32, i32* %1365, align 16
  %1367 = insertelement <4 x i32> undef, i32 %1366, i32 0
  %1368 = shufflevector <4 x i32> %1367, <4 x i32> undef, <4 x i32> zeroinitializer
  %1369 = add nsw i32 %1335, -1
  %1370 = shl i32 1, %1369
  %1371 = insertelement <4 x i32> undef, i32 %1370, i32 0
  %1372 = shufflevector <4 x i32> %1371, <4 x i32> undef, <4 x i32> zeroinitializer
  %1373 = add <4 x i32> %1331, %1317
  %1374 = sub <4 x i32> %1317, %1331
  %1375 = add <4 x i32> %1329, %1319
  %1376 = sub <4 x i32> %1319, %1329
  %1377 = add <4 x i32> %1327, %1321
  %1378 = sub <4 x i32> %1321, %1327
  %1379 = add <4 x i32> %1325, %1323
  %1380 = sub <4 x i32> %1323, %1325
  %1381 = add <4 x i32> %1373, %1379
  %1382 = sub <4 x i32> %1373, %1379
  %1383 = add <4 x i32> %1375, %1377
  %1384 = sub <4 x i32> %1375, %1377
  %1385 = mul <4 x i32> %1344, %1378
  %1386 = mul <4 x i32> %1341, %1376
  %1387 = add <4 x i32> %1385, %1386
  %1388 = add <4 x i32> %1387, %1372
  %1389 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1388, i32 %1335) #8
  %1390 = mul <4 x i32> %1341, %1378
  %1391 = mul <4 x i32> %1376, %1344
  %1392 = sub <4 x i32> %1390, %1391
  %1393 = add <4 x i32> %1392, %1372
  %1394 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1393, i32 %1335) #8
  %1395 = mul <4 x i32> %1341, %1381
  %1396 = mul <4 x i32> %1341, %1383
  %1397 = add <4 x i32> %1395, %1396
  %1398 = add <4 x i32> %1397, %1372
  %1399 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1398, i32 %1335) #8
  %1400 = sub <4 x i32> %1395, %1396
  %1401 = add <4 x i32> %1400, %1372
  %1402 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1401, i32 %1335) #8
  %1403 = mul <4 x i32> %1348, %1384
  %1404 = mul <4 x i32> %1352, %1382
  %1405 = add <4 x i32> %1403, %1372
  %1406 = add <4 x i32> %1405, %1404
  %1407 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1406, i32 %1335) #8
  %1408 = mul <4 x i32> %1348, %1382
  %1409 = mul <4 x i32> %1384, %1352
  %1410 = add <4 x i32> %1408, %1372
  %1411 = sub <4 x i32> %1410, %1409
  %1412 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1411, i32 %1335) #8
  %1413 = add <4 x i32> %1389, %1380
  %1414 = sub <4 x i32> %1380, %1389
  %1415 = sub <4 x i32> %1374, %1394
  %1416 = add <4 x i32> %1394, %1374
  %1417 = mul <4 x i32> %1413, %1356
  %1418 = mul <4 x i32> %1416, %1360
  %1419 = add <4 x i32> %1417, %1372
  %1420 = add <4 x i32> %1419, %1418
  %1421 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1420, i32 %1335) #8
  %1422 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %1423 = bitcast <2 x i64>* %1422 to <4 x i32>*
  store <4 x i32> %1421, <4 x i32>* %1423, align 16
  %1424 = mul <4 x i32> %1416, %1356
  %1425 = mul <4 x i32> %1360, %1413
  %1426 = sub <4 x i32> %1372, %1425
  %1427 = add <4 x i32> %1426, %1424
  %1428 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1427, i32 %1335) #8
  %1429 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %1430 = bitcast <2 x i64>* %1429 to <4 x i32>*
  store <4 x i32> %1428, <4 x i32>* %1430, align 16
  %1431 = mul <4 x i32> %1414, %1364
  %1432 = mul <4 x i32> %1415, %1368
  %1433 = add <4 x i32> %1431, %1372
  %1434 = add <4 x i32> %1433, %1432
  %1435 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1434, i32 %1335) #8
  %1436 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %1437 = bitcast <2 x i64>* %1436 to <4 x i32>*
  store <4 x i32> %1435, <4 x i32>* %1437, align 16
  %1438 = mul <4 x i32> %1415, %1364
  %1439 = mul <4 x i32> %1414, %1368
  %1440 = sub <4 x i32> %1372, %1439
  %1441 = add <4 x i32> %1440, %1438
  %1442 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1441, i32 %1335) #8
  %1443 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %1444 = bitcast <2 x i64>* %1443 to <4 x i32>*
  store <4 x i32> %1442, <4 x i32>* %1444, align 16
  %1445 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  store <4 x i32> %1399, <4 x i32>* %1445, align 16
  %1446 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %1447 = bitcast <2 x i64>* %1446 to <4 x i32>*
  store <4 x i32> %1402, <4 x i32>* %1447, align 16
  %1448 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %1449 = bitcast <2 x i64>* %1448 to <4 x i32>*
  store <4 x i32> %1407, <4 x i32>* %1449, align 16
  %1450 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %1451 = bitcast <2 x i64>* %1450 to <4 x i32>*
  store <4 x i32> %1412, <4 x i32>* %1451, align 16
  %1452 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %1453 = load <4 x i32>, <4 x i32>* %1282, align 16
  %1454 = add <4 x i32> %1453, %1318
  %1455 = sub <4 x i32> %1318, %1453
  %1456 = load <4 x i32>, <4 x i32>* %1308, align 16
  %1457 = load <4 x i32>, <4 x i32>* %1271, align 16
  %1458 = add <4 x i32> %1457, %1456
  %1459 = sub <4 x i32> %1456, %1457
  %1460 = load <4 x i32>, <4 x i32>* %1299, align 16
  %1461 = load <4 x i32>, <4 x i32>* %1260, align 16
  %1462 = add <4 x i32> %1461, %1460
  %1463 = sub <4 x i32> %1460, %1461
  %1464 = load <4 x i32>, <4 x i32>* %1237, align 16
  %1465 = load <4 x i32>, <4 x i32>* %1249, align 16
  %1466 = add <4 x i32> %1465, %1464
  %1467 = sub <4 x i32> %1464, %1465
  %1468 = add <4 x i32> %1466, %1454
  %1469 = sub <4 x i32> %1454, %1466
  %1470 = add <4 x i32> %1462, %1458
  %1471 = sub <4 x i32> %1458, %1462
  %1472 = mul <4 x i32> %1463, %1344
  %1473 = mul <4 x i32> %1459, %1341
  %1474 = add <4 x i32> %1473, %1372
  %1475 = add <4 x i32> %1474, %1472
  %1476 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1475, i32 %1335) #8
  %1477 = mul <4 x i32> %1463, %1341
  %1478 = mul <4 x i32> %1344, %1459
  %1479 = sub <4 x i32> %1372, %1478
  %1480 = add <4 x i32> %1479, %1477
  %1481 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1480, i32 %1335) #8
  %1482 = mul <4 x i32> %1468, %1341
  %1483 = mul <4 x i32> %1470, %1341
  %1484 = add <4 x i32> %1483, %1372
  %1485 = add <4 x i32> %1484, %1482
  %1486 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1485, i32 %1335) #8
  %1487 = sub <4 x i32> %1372, %1483
  %1488 = add <4 x i32> %1487, %1482
  %1489 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1488, i32 %1335) #8
  %1490 = mul <4 x i32> %1471, %1348
  %1491 = mul <4 x i32> %1469, %1352
  %1492 = add <4 x i32> %1490, %1372
  %1493 = add <4 x i32> %1492, %1491
  %1494 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1493, i32 %1335) #8
  %1495 = mul <4 x i32> %1469, %1348
  %1496 = mul <4 x i32> %1352, %1471
  %1497 = sub <4 x i32> %1372, %1496
  %1498 = add <4 x i32> %1497, %1495
  %1499 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1498, i32 %1335) #8
  %1500 = add <4 x i32> %1476, %1467
  %1501 = sub <4 x i32> %1467, %1476
  %1502 = sub <4 x i32> %1455, %1481
  %1503 = add <4 x i32> %1481, %1455
  %1504 = mul <4 x i32> %1500, %1356
  %1505 = mul <4 x i32> %1503, %1360
  %1506 = add <4 x i32> %1504, %1372
  %1507 = add <4 x i32> %1506, %1505
  %1508 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1507, i32 %1335) #8
  %1509 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %1510 = bitcast <2 x i64>* %1509 to <4 x i32>*
  store <4 x i32> %1508, <4 x i32>* %1510, align 16
  %1511 = mul <4 x i32> %1503, %1356
  %1512 = mul <4 x i32> %1360, %1500
  %1513 = sub <4 x i32> %1372, %1512
  %1514 = add <4 x i32> %1513, %1511
  %1515 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1514, i32 %1335) #8
  %1516 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %1517 = bitcast <2 x i64>* %1516 to <4 x i32>*
  store <4 x i32> %1515, <4 x i32>* %1517, align 16
  %1518 = mul <4 x i32> %1501, %1364
  %1519 = mul <4 x i32> %1502, %1368
  %1520 = add <4 x i32> %1518, %1372
  %1521 = add <4 x i32> %1520, %1519
  %1522 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1521, i32 %1335) #8
  %1523 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %1524 = bitcast <2 x i64>* %1523 to <4 x i32>*
  store <4 x i32> %1522, <4 x i32>* %1524, align 16
  %1525 = mul <4 x i32> %1502, %1364
  %1526 = mul <4 x i32> %1368, %1501
  %1527 = sub <4 x i32> %1372, %1526
  %1528 = add <4 x i32> %1527, %1525
  %1529 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1528, i32 %1335) #8
  %1530 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %1531 = bitcast <2 x i64>* %1530 to <4 x i32>*
  store <4 x i32> %1529, <4 x i32>* %1531, align 16
  %1532 = bitcast <2 x i64>* %1452 to <4 x i32>*
  store <4 x i32> %1486, <4 x i32>* %1532, align 16
  %1533 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %1534 = bitcast <2 x i64>* %1533 to <4 x i32>*
  store <4 x i32> %1489, <4 x i32>* %1534, align 16
  %1535 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %1536 = bitcast <2 x i64>* %1535 to <4 x i32>*
  store <4 x i32> %1494, <4 x i32>* %1536, align 16
  %1537 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %1538 = bitcast <2 x i64>* %1537 to <4 x i32>*
  store <4 x i32> %1499, <4 x i32>* %1538, align 16
  %1539 = getelementptr inbounds i8, i8* %10, i64 1
  %1540 = load i8, i8* %1539, align 1
  %1541 = sext i8 %1540 to i32
  %1542 = sub nsw i32 0, %1541
  %1543 = xor i32 %1541, -1
  %1544 = shl i32 1, %1543
  %1545 = insertelement <4 x i32> undef, i32 %1544, i32 0
  %1546 = shufflevector <4 x i32> %1545, <4 x i32> undef, <4 x i32> zeroinitializer
  %1547 = add <4 x i32> %1546, %1399
  %1548 = add <4 x i32> %1546, %1486
  %1549 = add <4 x i32> %1546, %1421
  %1550 = add <4 x i32> %1546, %1508
  %1551 = add <4 x i32> %1546, %1407
  %1552 = add <4 x i32> %1546, %1494
  %1553 = add <4 x i32> %1546, %1442
  %1554 = add <4 x i32> %1546, %1529
  %1555 = add <4 x i32> %1546, %1402
  %1556 = add <4 x i32> %1489, %1546
  %1557 = add <4 x i32> %1546, %1435
  %1558 = add <4 x i32> %1522, %1546
  %1559 = add <4 x i32> %1546, %1412
  %1560 = add <4 x i32> %1499, %1546
  %1561 = add <4 x i32> %1546, %1428
  %1562 = add <4 x i32> %1515, %1546
  %1563 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1547, i32 %1542) #8
  store <4 x i32> %1563, <4 x i32>* %1445, align 16
  %1564 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1548, i32 %1542) #8
  store <4 x i32> %1564, <4 x i32>* %1532, align 16
  %1565 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1549, i32 %1542) #8
  store <4 x i32> %1565, <4 x i32>* %1423, align 16
  %1566 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1550, i32 %1542) #8
  store <4 x i32> %1566, <4 x i32>* %1510, align 16
  %1567 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1551, i32 %1542) #8
  store <4 x i32> %1567, <4 x i32>* %1449, align 16
  %1568 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1552, i32 %1542) #8
  store <4 x i32> %1568, <4 x i32>* %1536, align 16
  %1569 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1553, i32 %1542) #8
  store <4 x i32> %1569, <4 x i32>* %1444, align 16
  %1570 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1554, i32 %1542) #8
  store <4 x i32> %1570, <4 x i32>* %1531, align 16
  %1571 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1555, i32 %1542) #8
  store <4 x i32> %1571, <4 x i32>* %1447, align 16
  %1572 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1556, i32 %1542) #8
  store <4 x i32> %1572, <4 x i32>* %1534, align 16
  %1573 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1557, i32 %1542) #8
  store <4 x i32> %1573, <4 x i32>* %1437, align 16
  %1574 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1558, i32 %1542) #8
  store <4 x i32> %1574, <4 x i32>* %1524, align 16
  %1575 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1559, i32 %1542) #8
  store <4 x i32> %1575, <4 x i32>* %1451, align 16
  %1576 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1560, i32 %1542) #8
  store <4 x i32> %1576, <4 x i32>* %1538, align 16
  %1577 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1561, i32 %1542) #8
  store <4 x i32> %1577, <4 x i32>* %1430, align 16
  %1578 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1562, i32 %1542) #8
  store <4 x i32> %1578, <4 x i32>* %1517, align 16
  %1579 = shufflevector <4 x i32> %1563, <4 x i32> %1565, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1580 = bitcast <4 x i32> %1579 to <2 x i64>
  %1581 = shufflevector <4 x i32> %1563, <4 x i32> %1565, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1582 = bitcast <4 x i32> %1581 to <2 x i64>
  %1583 = shufflevector <4 x i32> %1567, <4 x i32> %1569, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1584 = bitcast <4 x i32> %1583 to <2 x i64>
  %1585 = shufflevector <4 x i32> %1567, <4 x i32> %1569, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1586 = bitcast <4 x i32> %1585 to <2 x i64>
  %1587 = shufflevector <2 x i64> %1580, <2 x i64> %1584, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1587, <2 x i64>* %1191, align 16
  %1588 = shufflevector <2 x i64> %1580, <2 x i64> %1584, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1588, <2 x i64>* %1206, align 16
  %1589 = shufflevector <2 x i64> %1582, <2 x i64> %1586, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1589, <2 x i64>* %1218, align 16
  %1590 = shufflevector <2 x i64> %1582, <2 x i64> %1586, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1590, <2 x i64>* %1230, align 16
  %1591 = shufflevector <4 x i32> %1564, <4 x i32> %1566, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1592 = bitcast <4 x i32> %1591 to <2 x i64>
  %1593 = shufflevector <4 x i32> %1564, <4 x i32> %1566, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1594 = bitcast <4 x i32> %1593 to <2 x i64>
  %1595 = shufflevector <4 x i32> %1568, <4 x i32> %1570, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1596 = bitcast <4 x i32> %1595 to <2 x i64>
  %1597 = shufflevector <4 x i32> %1568, <4 x i32> %1570, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1598 = bitcast <4 x i32> %1597 to <2 x i64>
  %1599 = shufflevector <2 x i64> %1592, <2 x i64> %1596, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1599, <2 x i64>* %1243, align 16
  %1600 = shufflevector <2 x i64> %1592, <2 x i64> %1596, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1600, <2 x i64>* %1254, align 16
  %1601 = shufflevector <2 x i64> %1594, <2 x i64> %1598, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1601, <2 x i64>* %1265, align 16
  %1602 = shufflevector <2 x i64> %1594, <2 x i64> %1598, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1602, <2 x i64>* %1276, align 16
  %1603 = shufflevector <4 x i32> %1571, <4 x i32> %1573, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1604 = bitcast <4 x i32> %1603 to <2 x i64>
  %1605 = shufflevector <4 x i32> %1571, <4 x i32> %1573, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1606 = bitcast <4 x i32> %1605 to <2 x i64>
  %1607 = shufflevector <4 x i32> %1575, <4 x i32> %1577, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1608 = bitcast <4 x i32> %1607 to <2 x i64>
  %1609 = shufflevector <4 x i32> %1575, <4 x i32> %1577, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1610 = bitcast <4 x i32> %1609 to <2 x i64>
  %1611 = shufflevector <2 x i64> %1604, <2 x i64> %1608, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1611, <2 x i64>* %1200, align 16
  %1612 = shufflevector <2 x i64> %1604, <2 x i64> %1608, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1612, <2 x i64>* %1212, align 16
  %1613 = shufflevector <2 x i64> %1606, <2 x i64> %1610, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1613, <2 x i64>* %1224, align 16
  %1614 = shufflevector <2 x i64> %1606, <2 x i64> %1610, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1614, <2 x i64>* %1236, align 16
  %1615 = shufflevector <4 x i32> %1572, <4 x i32> %1574, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1616 = bitcast <4 x i32> %1615 to <2 x i64>
  %1617 = shufflevector <4 x i32> %1572, <4 x i32> %1574, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1618 = bitcast <4 x i32> %1617 to <2 x i64>
  %1619 = shufflevector <4 x i32> %1576, <4 x i32> %1578, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1620 = bitcast <4 x i32> %1619 to <2 x i64>
  %1621 = shufflevector <4 x i32> %1576, <4 x i32> %1578, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1622 = bitcast <4 x i32> %1621 to <2 x i64>
  %1623 = shufflevector <2 x i64> %1616, <2 x i64> %1620, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1623, <2 x i64>* %1248, align 16
  %1624 = shufflevector <2 x i64> %1616, <2 x i64> %1620, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1624, <2 x i64>* %1259, align 16
  %1625 = shufflevector <2 x i64> %1618, <2 x i64> %1622, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1625, <2 x i64>* %1270, align 16
  %1626 = shufflevector <2 x i64> %1618, <2 x i64> %1622, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1626, <2 x i64>* %1281, align 16
  %1627 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  %1628 = sext i8 %1627 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %1191, <2 x i64>* nonnull %1333, i32 %1628, i32 2)
  %1629 = load <4 x i32>, <4 x i32>* %1445, align 16
  %1630 = load <4 x i32>, <4 x i32>* %1423, align 16
  %1631 = shufflevector <4 x i32> %1629, <4 x i32> %1630, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1632 = bitcast <4 x i32> %1631 to <2 x i64>
  %1633 = shufflevector <4 x i32> %1629, <4 x i32> %1630, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1634 = bitcast <4 x i32> %1633 to <2 x i64>
  %1635 = load <4 x i32>, <4 x i32>* %1449, align 16
  %1636 = load <4 x i32>, <4 x i32>* %1444, align 16
  %1637 = shufflevector <4 x i32> %1635, <4 x i32> %1636, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1638 = bitcast <4 x i32> %1637 to <2 x i64>
  %1639 = shufflevector <4 x i32> %1635, <4 x i32> %1636, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1640 = bitcast <4 x i32> %1639 to <2 x i64>
  %1641 = shufflevector <2 x i64> %1632, <2 x i64> %1638, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1641, <2 x i64>* %1191, align 16
  %1642 = shufflevector <2 x i64> %1632, <2 x i64> %1638, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1642, <2 x i64>* %1206, align 16
  %1643 = shufflevector <2 x i64> %1634, <2 x i64> %1640, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1643, <2 x i64>* %1218, align 16
  %1644 = shufflevector <2 x i64> %1634, <2 x i64> %1640, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1644, <2 x i64>* %1230, align 16
  %1645 = load <4 x i32>, <4 x i32>* %1532, align 16
  %1646 = load <4 x i32>, <4 x i32>* %1510, align 16
  %1647 = shufflevector <4 x i32> %1645, <4 x i32> %1646, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1648 = bitcast <4 x i32> %1647 to <2 x i64>
  %1649 = shufflevector <4 x i32> %1645, <4 x i32> %1646, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1650 = bitcast <4 x i32> %1649 to <2 x i64>
  %1651 = load <4 x i32>, <4 x i32>* %1536, align 16
  %1652 = load <4 x i32>, <4 x i32>* %1531, align 16
  %1653 = shufflevector <4 x i32> %1651, <4 x i32> %1652, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1654 = bitcast <4 x i32> %1653 to <2 x i64>
  %1655 = shufflevector <4 x i32> %1651, <4 x i32> %1652, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1656 = bitcast <4 x i32> %1655 to <2 x i64>
  %1657 = shufflevector <2 x i64> %1648, <2 x i64> %1654, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1657, <2 x i64>* %1243, align 16
  %1658 = shufflevector <2 x i64> %1648, <2 x i64> %1654, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1658, <2 x i64>* %1254, align 16
  %1659 = shufflevector <2 x i64> %1650, <2 x i64> %1656, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1659, <2 x i64>* %1265, align 16
  %1660 = shufflevector <2 x i64> %1650, <2 x i64> %1656, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1660, <2 x i64>* %1276, align 16
  %1661 = load <4 x i32>, <4 x i32>* %1447, align 16
  %1662 = load <4 x i32>, <4 x i32>* %1437, align 16
  %1663 = shufflevector <4 x i32> %1661, <4 x i32> %1662, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1664 = bitcast <4 x i32> %1663 to <2 x i64>
  %1665 = shufflevector <4 x i32> %1661, <4 x i32> %1662, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1666 = bitcast <4 x i32> %1665 to <2 x i64>
  %1667 = load <4 x i32>, <4 x i32>* %1451, align 16
  %1668 = load <4 x i32>, <4 x i32>* %1430, align 16
  %1669 = shufflevector <4 x i32> %1667, <4 x i32> %1668, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1670 = bitcast <4 x i32> %1669 to <2 x i64>
  %1671 = shufflevector <4 x i32> %1667, <4 x i32> %1668, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1672 = bitcast <4 x i32> %1671 to <2 x i64>
  %1673 = shufflevector <2 x i64> %1664, <2 x i64> %1670, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1673, <2 x i64>* %1200, align 16
  %1674 = shufflevector <2 x i64> %1664, <2 x i64> %1670, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1674, <2 x i64>* %1212, align 16
  %1675 = shufflevector <2 x i64> %1666, <2 x i64> %1672, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1675, <2 x i64>* %1224, align 16
  %1676 = shufflevector <2 x i64> %1666, <2 x i64> %1672, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1676, <2 x i64>* %1236, align 16
  %1677 = load <4 x i32>, <4 x i32>* %1534, align 16
  %1678 = load <4 x i32>, <4 x i32>* %1524, align 16
  %1679 = shufflevector <4 x i32> %1677, <4 x i32> %1678, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1680 = bitcast <4 x i32> %1679 to <2 x i64>
  %1681 = shufflevector <4 x i32> %1677, <4 x i32> %1678, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1682 = bitcast <4 x i32> %1681 to <2 x i64>
  %1683 = load <4 x i32>, <4 x i32>* %1538, align 16
  %1684 = load <4 x i32>, <4 x i32>* %1517, align 16
  %1685 = shufflevector <4 x i32> %1683, <4 x i32> %1684, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1686 = bitcast <4 x i32> %1685 to <2 x i64>
  %1687 = shufflevector <4 x i32> %1683, <4 x i32> %1684, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1688 = bitcast <4 x i32> %1687 to <2 x i64>
  %1689 = shufflevector <2 x i64> %1680, <2 x i64> %1686, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1689, <2 x i64>* %1248, align 16
  %1690 = shufflevector <2 x i64> %1680, <2 x i64> %1686, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1690, <2 x i64>* %1259, align 16
  %1691 = shufflevector <2 x i64> %1682, <2 x i64> %1688, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1691, <2 x i64>* %1270, align 16
  %1692 = shufflevector <2 x i64> %1682, <2 x i64> %1688, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1692, <2 x i64>* %1281, align 16
  br label %7057

1693:                                             ; preds = %5
  %1694 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %1695 = load i8, i8* %10, align 1
  %1696 = sext i8 %1695 to i32
  %1697 = bitcast i16* %0 to <2 x i64>*
  %1698 = load <2 x i64>, <2 x i64>* %1697, align 16
  store <2 x i64> %1698, <2 x i64>* %1694, align 16
  %1699 = sext i32 %2 to i64
  %1700 = getelementptr inbounds i16, i16* %0, i64 %1699
  %1701 = bitcast i16* %1700 to <2 x i64>*
  %1702 = load <2 x i64>, <2 x i64>* %1701, align 16
  %1703 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %1702, <2 x i64>* %1703, align 16
  %1704 = shl nsw i32 %2, 1
  %1705 = sext i32 %1704 to i64
  %1706 = getelementptr inbounds i16, i16* %0, i64 %1705
  %1707 = bitcast i16* %1706 to <2 x i64>*
  %1708 = load <2 x i64>, <2 x i64>* %1707, align 16
  %1709 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %1708, <2 x i64>* %1709, align 16
  %1710 = mul nsw i32 %2, 3
  %1711 = sext i32 %1710 to i64
  %1712 = getelementptr inbounds i16, i16* %0, i64 %1711
  %1713 = bitcast i16* %1712 to <2 x i64>*
  %1714 = load <2 x i64>, <2 x i64>* %1713, align 16
  %1715 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %1714, <2 x i64>* %1715, align 16
  %1716 = shl nsw i32 %2, 2
  %1717 = sext i32 %1716 to i64
  %1718 = getelementptr inbounds i16, i16* %0, i64 %1717
  %1719 = bitcast i16* %1718 to <2 x i64>*
  %1720 = load <2 x i64>, <2 x i64>* %1719, align 16
  %1721 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %1720, <2 x i64>* %1721, align 16
  %1722 = mul nsw i32 %2, 5
  %1723 = sext i32 %1722 to i64
  %1724 = getelementptr inbounds i16, i16* %0, i64 %1723
  %1725 = bitcast i16* %1724 to <2 x i64>*
  %1726 = load <2 x i64>, <2 x i64>* %1725, align 16
  %1727 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %1726, <2 x i64>* %1727, align 16
  %1728 = mul nsw i32 %2, 6
  %1729 = sext i32 %1728 to i64
  %1730 = getelementptr inbounds i16, i16* %0, i64 %1729
  %1731 = bitcast i16* %1730 to <2 x i64>*
  %1732 = load <2 x i64>, <2 x i64>* %1731, align 16
  %1733 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %1732, <2 x i64>* %1733, align 16
  %1734 = mul nsw i32 %2, 7
  %1735 = sext i32 %1734 to i64
  %1736 = getelementptr inbounds i16, i16* %0, i64 %1735
  %1737 = bitcast i16* %1736 to <2 x i64>*
  %1738 = load <2 x i64>, <2 x i64>* %1737, align 16
  %1739 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %1740 = bitcast <2 x i64>* %1739 to <4 x i32>*
  %1741 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %1742 = shufflevector <2 x i64> %1720, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1743 = bitcast <2 x i64> %1720 to <8 x i16>
  %1744 = shufflevector <8 x i16> %1743, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1745 = sext <4 x i16> %1744 to <4 x i32>
  %1746 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %1747 = bitcast <2 x i64>* %1746 to <4 x i32>*
  %1748 = bitcast <2 x i64> %1742 to <8 x i16>
  %1749 = shufflevector <8 x i16> %1748, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1750 = sext <4 x i16> %1749 to <4 x i32>
  %1751 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %1752 = bitcast <2 x i64>* %1751 to <4 x i32>*
  %1753 = shufflevector <2 x i64> %1726, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1754 = bitcast <2 x i64> %1726 to <8 x i16>
  %1755 = shufflevector <8 x i16> %1754, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1756 = sext <4 x i16> %1755 to <4 x i32>
  %1757 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %1758 = bitcast <2 x i64>* %1757 to <4 x i32>*
  %1759 = bitcast <2 x i64> %1753 to <8 x i16>
  %1760 = shufflevector <8 x i16> %1759, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1761 = sext <4 x i16> %1760 to <4 x i32>
  %1762 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %1763 = bitcast <2 x i64>* %1762 to <4 x i32>*
  %1764 = shufflevector <2 x i64> %1732, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1765 = bitcast <2 x i64> %1732 to <8 x i16>
  %1766 = shufflevector <8 x i16> %1765, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1767 = sext <4 x i16> %1766 to <4 x i32>
  %1768 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %1769 = bitcast <2 x i64>* %1768 to <4 x i32>*
  %1770 = bitcast <2 x i64> %1764 to <8 x i16>
  %1771 = shufflevector <8 x i16> %1770, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1772 = sext <4 x i16> %1771 to <4 x i32>
  %1773 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %1774 = bitcast <2 x i64>* %1773 to <4 x i32>*
  %1775 = shufflevector <2 x i64> %1738, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1776 = bitcast <2 x i64> %1738 to <8 x i16>
  %1777 = shufflevector <8 x i16> %1776, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1778 = sext <4 x i16> %1777 to <4 x i32>
  %1779 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %1780 = bitcast <2 x i64>* %1779 to <4 x i32>*
  %1781 = bitcast <2 x i64> %1775 to <8 x i16>
  %1782 = shufflevector <8 x i16> %1781, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1783 = sext <4 x i16> %1782 to <4 x i32>
  %1784 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %1785 = bitcast <2 x i64>* %1784 to <4 x i32>*
  %1786 = shufflevector <2 x i64> %1714, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1787 = bitcast <2 x i64> %1714 to <8 x i16>
  %1788 = shufflevector <8 x i16> %1787, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1789 = sext <4 x i16> %1788 to <4 x i32>
  %1790 = bitcast <2 x i64>* %1733 to <4 x i32>*
  %1791 = bitcast <2 x i64> %1786 to <8 x i16>
  %1792 = shufflevector <8 x i16> %1791, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1793 = sext <4 x i16> %1792 to <4 x i32>
  %1794 = shufflevector <2 x i64> %1708, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1795 = bitcast <2 x i64> %1708 to <8 x i16>
  %1796 = shufflevector <8 x i16> %1795, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1797 = sext <4 x i16> %1796 to <4 x i32>
  %1798 = bitcast <2 x i64>* %1721 to <4 x i32>*
  %1799 = bitcast <2 x i64> %1794 to <8 x i16>
  %1800 = shufflevector <8 x i16> %1799, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1801 = sext <4 x i16> %1800 to <4 x i32>
  %1802 = bitcast <2 x i64>* %1727 to <4 x i32>*
  %1803 = shufflevector <2 x i64> %1702, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1804 = bitcast <2 x i64> %1702 to <8 x i16>
  %1805 = shufflevector <8 x i16> %1804, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1806 = sext <4 x i16> %1805 to <4 x i32>
  %1807 = bitcast <2 x i64>* %1709 to <4 x i32>*
  %1808 = bitcast <2 x i64> %1803 to <8 x i16>
  %1809 = shufflevector <8 x i16> %1808, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1810 = sext <4 x i16> %1809 to <4 x i32>
  %1811 = bitcast <2 x i64>* %1715 to <4 x i32>*
  %1812 = shufflevector <2 x i64> %1698, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1813 = bitcast <2 x i64> %1698 to <8 x i16>
  %1814 = shufflevector <8 x i16> %1813, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1815 = sext <4 x i16> %1814 to <4 x i32>
  %1816 = bitcast <2 x i64> %1812 to <8 x i16>
  %1817 = shufflevector <8 x i16> %1816, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1818 = sext <4 x i16> %1817 to <4 x i32>
  %1819 = bitcast <2 x i64>* %1703 to <4 x i32>*
  %1820 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1815, i32 %1696) #8
  store <4 x i32> %1820, <4 x i32>* %1741, align 16
  %1821 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1818, i32 %1696) #8
  store <4 x i32> %1821, <4 x i32>* %1819, align 16
  %1822 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1806, i32 %1696) #8
  store <4 x i32> %1822, <4 x i32>* %1807, align 16
  %1823 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1810, i32 %1696) #8
  store <4 x i32> %1823, <4 x i32>* %1811, align 16
  %1824 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1797, i32 %1696) #8
  store <4 x i32> %1824, <4 x i32>* %1798, align 16
  %1825 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1801, i32 %1696) #8
  store <4 x i32> %1825, <4 x i32>* %1802, align 16
  %1826 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1789, i32 %1696) #8
  store <4 x i32> %1826, <4 x i32>* %1790, align 16
  %1827 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1793, i32 %1696) #8
  store <4 x i32> %1827, <4 x i32>* %1740, align 16
  %1828 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1745, i32 %1696) #8
  store <4 x i32> %1828, <4 x i32>* %1747, align 16
  %1829 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1750, i32 %1696) #8
  store <4 x i32> %1829, <4 x i32>* %1752, align 16
  %1830 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1756, i32 %1696) #8
  store <4 x i32> %1830, <4 x i32>* %1758, align 16
  %1831 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1761, i32 %1696) #8
  store <4 x i32> %1831, <4 x i32>* %1763, align 16
  %1832 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1767, i32 %1696) #8
  store <4 x i32> %1832, <4 x i32>* %1769, align 16
  %1833 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1772, i32 %1696) #8
  store <4 x i32> %1833, <4 x i32>* %1774, align 16
  %1834 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1778, i32 %1696) #8
  store <4 x i32> %1834, <4 x i32>* %1780, align 16
  %1835 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1783, i32 %1696) #8
  store <4 x i32> %1835, <4 x i32>* %1785, align 16
  %1836 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  %1837 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %1838 = sext i8 %1837 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %1694, <2 x i64>* nonnull %1836, i32 %1838, i32 2)
  %1839 = getelementptr inbounds i8, i8* %10, i64 1
  %1840 = load i8, i8* %1839, align 1
  %1841 = sext i8 %1840 to i32
  %1842 = sub nsw i32 0, %1841
  %1843 = xor i32 %1841, -1
  %1844 = shl i32 1, %1843
  %1845 = insertelement <4 x i32> undef, i32 %1844, i32 0
  %1846 = shufflevector <4 x i32> %1845, <4 x i32> undef, <4 x i32> zeroinitializer
  %1847 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  %1848 = load <4 x i32>, <4 x i32>* %1847, align 16
  %1849 = add <4 x i32> %1846, %1848
  %1850 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %1851 = bitcast <2 x i64>* %1850 to <4 x i32>*
  %1852 = load <4 x i32>, <4 x i32>* %1851, align 16
  %1853 = add <4 x i32> %1846, %1852
  %1854 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %1855 = bitcast <2 x i64>* %1854 to <4 x i32>*
  %1856 = load <4 x i32>, <4 x i32>* %1855, align 16
  %1857 = add <4 x i32> %1846, %1856
  %1858 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %1859 = bitcast <2 x i64>* %1858 to <4 x i32>*
  %1860 = load <4 x i32>, <4 x i32>* %1859, align 16
  %1861 = add <4 x i32> %1860, %1846
  %1862 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %1863 = bitcast <2 x i64>* %1862 to <4 x i32>*
  %1864 = load <4 x i32>, <4 x i32>* %1863, align 16
  %1865 = add <4 x i32> %1864, %1846
  %1866 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %1867 = bitcast <2 x i64>* %1866 to <4 x i32>*
  %1868 = load <4 x i32>, <4 x i32>* %1867, align 16
  %1869 = add <4 x i32> %1868, %1846
  %1870 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %1871 = bitcast <2 x i64>* %1870 to <4 x i32>*
  %1872 = load <4 x i32>, <4 x i32>* %1871, align 16
  %1873 = add <4 x i32> %1872, %1846
  %1874 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %1875 = bitcast <2 x i64>* %1874 to <4 x i32>*
  %1876 = load <4 x i32>, <4 x i32>* %1875, align 16
  %1877 = add <4 x i32> %1876, %1846
  %1878 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %1879 = bitcast <2 x i64>* %1878 to <4 x i32>*
  %1880 = load <4 x i32>, <4 x i32>* %1879, align 16
  %1881 = add <4 x i32> %1880, %1846
  %1882 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %1883 = bitcast <2 x i64>* %1882 to <4 x i32>*
  %1884 = load <4 x i32>, <4 x i32>* %1883, align 16
  %1885 = add <4 x i32> %1884, %1846
  %1886 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %1887 = bitcast <2 x i64>* %1886 to <4 x i32>*
  %1888 = load <4 x i32>, <4 x i32>* %1887, align 16
  %1889 = add <4 x i32> %1888, %1846
  %1890 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %1891 = bitcast <2 x i64>* %1890 to <4 x i32>*
  %1892 = load <4 x i32>, <4 x i32>* %1891, align 16
  %1893 = add <4 x i32> %1892, %1846
  %1894 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %1895 = bitcast <2 x i64>* %1894 to <4 x i32>*
  %1896 = load <4 x i32>, <4 x i32>* %1895, align 16
  %1897 = add <4 x i32> %1896, %1846
  %1898 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %1899 = bitcast <2 x i64>* %1898 to <4 x i32>*
  %1900 = load <4 x i32>, <4 x i32>* %1899, align 16
  %1901 = add <4 x i32> %1900, %1846
  %1902 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %1903 = bitcast <2 x i64>* %1902 to <4 x i32>*
  %1904 = load <4 x i32>, <4 x i32>* %1903, align 16
  %1905 = add <4 x i32> %1904, %1846
  %1906 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %1907 = bitcast <2 x i64>* %1906 to <4 x i32>*
  %1908 = load <4 x i32>, <4 x i32>* %1907, align 16
  %1909 = add <4 x i32> %1908, %1846
  %1910 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1849, i32 %1842) #8
  store <4 x i32> %1910, <4 x i32>* %1847, align 16
  %1911 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1853, i32 %1842) #8
  store <4 x i32> %1911, <4 x i32>* %1851, align 16
  %1912 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1857, i32 %1842) #8
  store <4 x i32> %1912, <4 x i32>* %1855, align 16
  %1913 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1861, i32 %1842) #8
  store <4 x i32> %1913, <4 x i32>* %1859, align 16
  %1914 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1865, i32 %1842) #8
  store <4 x i32> %1914, <4 x i32>* %1863, align 16
  %1915 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1869, i32 %1842) #8
  store <4 x i32> %1915, <4 x i32>* %1867, align 16
  %1916 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1873, i32 %1842) #8
  store <4 x i32> %1916, <4 x i32>* %1871, align 16
  %1917 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1877, i32 %1842) #8
  store <4 x i32> %1917, <4 x i32>* %1875, align 16
  %1918 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1881, i32 %1842) #8
  store <4 x i32> %1918, <4 x i32>* %1879, align 16
  %1919 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1885, i32 %1842) #8
  store <4 x i32> %1919, <4 x i32>* %1883, align 16
  %1920 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1889, i32 %1842) #8
  store <4 x i32> %1920, <4 x i32>* %1887, align 16
  %1921 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1893, i32 %1842) #8
  store <4 x i32> %1921, <4 x i32>* %1891, align 16
  %1922 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1897, i32 %1842) #8
  store <4 x i32> %1922, <4 x i32>* %1895, align 16
  %1923 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1901, i32 %1842) #8
  store <4 x i32> %1923, <4 x i32>* %1899, align 16
  %1924 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1905, i32 %1842) #8
  store <4 x i32> %1924, <4 x i32>* %1903, align 16
  %1925 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1909, i32 %1842) #8
  store <4 x i32> %1925, <4 x i32>* %1907, align 16
  %1926 = shufflevector <4 x i32> %1910, <4 x i32> %1912, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1927 = bitcast <4 x i32> %1926 to <2 x i64>
  %1928 = shufflevector <4 x i32> %1910, <4 x i32> %1912, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1929 = bitcast <4 x i32> %1928 to <2 x i64>
  %1930 = shufflevector <4 x i32> %1914, <4 x i32> %1916, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1931 = bitcast <4 x i32> %1930 to <2 x i64>
  %1932 = shufflevector <4 x i32> %1914, <4 x i32> %1916, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1933 = bitcast <4 x i32> %1932 to <2 x i64>
  %1934 = shufflevector <2 x i64> %1927, <2 x i64> %1931, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1934, <2 x i64>* %1694, align 16
  %1935 = shufflevector <2 x i64> %1927, <2 x i64> %1931, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1935, <2 x i64>* %1709, align 16
  %1936 = shufflevector <2 x i64> %1929, <2 x i64> %1933, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1936, <2 x i64>* %1721, align 16
  %1937 = shufflevector <2 x i64> %1929, <2 x i64> %1933, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1937, <2 x i64>* %1733, align 16
  %1938 = shufflevector <4 x i32> %1911, <4 x i32> %1913, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1939 = bitcast <4 x i32> %1938 to <2 x i64>
  %1940 = shufflevector <4 x i32> %1911, <4 x i32> %1913, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1941 = bitcast <4 x i32> %1940 to <2 x i64>
  %1942 = shufflevector <4 x i32> %1915, <4 x i32> %1917, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1943 = bitcast <4 x i32> %1942 to <2 x i64>
  %1944 = shufflevector <4 x i32> %1915, <4 x i32> %1917, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1945 = bitcast <4 x i32> %1944 to <2 x i64>
  %1946 = shufflevector <2 x i64> %1939, <2 x i64> %1943, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1946, <2 x i64>* %1746, align 16
  %1947 = shufflevector <2 x i64> %1939, <2 x i64> %1943, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1947, <2 x i64>* %1757, align 16
  %1948 = shufflevector <2 x i64> %1941, <2 x i64> %1945, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1948, <2 x i64>* %1768, align 16
  %1949 = shufflevector <2 x i64> %1941, <2 x i64> %1945, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1949, <2 x i64>* %1779, align 16
  %1950 = shufflevector <4 x i32> %1918, <4 x i32> %1920, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1951 = bitcast <4 x i32> %1950 to <2 x i64>
  %1952 = shufflevector <4 x i32> %1918, <4 x i32> %1920, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1953 = bitcast <4 x i32> %1952 to <2 x i64>
  %1954 = shufflevector <4 x i32> %1922, <4 x i32> %1924, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1955 = bitcast <4 x i32> %1954 to <2 x i64>
  %1956 = shufflevector <4 x i32> %1922, <4 x i32> %1924, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1957 = bitcast <4 x i32> %1956 to <2 x i64>
  %1958 = shufflevector <2 x i64> %1951, <2 x i64> %1955, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1958, <2 x i64>* %1703, align 16
  %1959 = shufflevector <2 x i64> %1951, <2 x i64> %1955, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1959, <2 x i64>* %1715, align 16
  %1960 = shufflevector <2 x i64> %1953, <2 x i64> %1957, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1960, <2 x i64>* %1727, align 16
  %1961 = shufflevector <2 x i64> %1953, <2 x i64> %1957, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1961, <2 x i64>* %1739, align 16
  %1962 = shufflevector <4 x i32> %1919, <4 x i32> %1921, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1963 = bitcast <4 x i32> %1962 to <2 x i64>
  %1964 = shufflevector <4 x i32> %1919, <4 x i32> %1921, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1965 = bitcast <4 x i32> %1964 to <2 x i64>
  %1966 = shufflevector <4 x i32> %1923, <4 x i32> %1925, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1967 = bitcast <4 x i32> %1966 to <2 x i64>
  %1968 = shufflevector <4 x i32> %1923, <4 x i32> %1925, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1969 = bitcast <4 x i32> %1968 to <2 x i64>
  %1970 = shufflevector <2 x i64> %1963, <2 x i64> %1967, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1970, <2 x i64>* %1751, align 16
  %1971 = shufflevector <2 x i64> %1963, <2 x i64> %1967, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1971, <2 x i64>* %1762, align 16
  %1972 = shufflevector <2 x i64> %1965, <2 x i64> %1969, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1972, <2 x i64>* %1773, align 16
  %1973 = shufflevector <2 x i64> %1965, <2 x i64> %1969, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1973, <2 x i64>* %1784, align 16
  %1974 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  %1975 = sext i8 %1974 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %1694, <2 x i64>* nonnull %1836, i32 %1975, i32 2)
  %1976 = load <4 x i32>, <4 x i32>* %1847, align 16
  %1977 = load <4 x i32>, <4 x i32>* %1855, align 16
  %1978 = shufflevector <4 x i32> %1976, <4 x i32> %1977, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1979 = bitcast <4 x i32> %1978 to <2 x i64>
  %1980 = shufflevector <4 x i32> %1976, <4 x i32> %1977, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1981 = bitcast <4 x i32> %1980 to <2 x i64>
  %1982 = load <4 x i32>, <4 x i32>* %1863, align 16
  %1983 = load <4 x i32>, <4 x i32>* %1871, align 16
  %1984 = shufflevector <4 x i32> %1982, <4 x i32> %1983, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1985 = bitcast <4 x i32> %1984 to <2 x i64>
  %1986 = shufflevector <4 x i32> %1982, <4 x i32> %1983, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1987 = bitcast <4 x i32> %1986 to <2 x i64>
  %1988 = shufflevector <2 x i64> %1979, <2 x i64> %1985, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1988, <2 x i64>* %1694, align 16
  %1989 = shufflevector <2 x i64> %1979, <2 x i64> %1985, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1989, <2 x i64>* %1709, align 16
  %1990 = shufflevector <2 x i64> %1981, <2 x i64> %1987, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1990, <2 x i64>* %1721, align 16
  %1991 = shufflevector <2 x i64> %1981, <2 x i64> %1987, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1991, <2 x i64>* %1733, align 16
  %1992 = load <4 x i32>, <4 x i32>* %1851, align 16
  %1993 = load <4 x i32>, <4 x i32>* %1859, align 16
  %1994 = shufflevector <4 x i32> %1992, <4 x i32> %1993, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1995 = bitcast <4 x i32> %1994 to <2 x i64>
  %1996 = shufflevector <4 x i32> %1992, <4 x i32> %1993, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1997 = bitcast <4 x i32> %1996 to <2 x i64>
  %1998 = load <4 x i32>, <4 x i32>* %1867, align 16
  %1999 = load <4 x i32>, <4 x i32>* %1875, align 16
  %2000 = shufflevector <4 x i32> %1998, <4 x i32> %1999, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2001 = bitcast <4 x i32> %2000 to <2 x i64>
  %2002 = shufflevector <4 x i32> %1998, <4 x i32> %1999, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2003 = bitcast <4 x i32> %2002 to <2 x i64>
  %2004 = shufflevector <2 x i64> %1995, <2 x i64> %2001, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2004, <2 x i64>* %1746, align 16
  %2005 = shufflevector <2 x i64> %1995, <2 x i64> %2001, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2005, <2 x i64>* %1757, align 16
  %2006 = shufflevector <2 x i64> %1997, <2 x i64> %2003, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2006, <2 x i64>* %1768, align 16
  %2007 = shufflevector <2 x i64> %1997, <2 x i64> %2003, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2007, <2 x i64>* %1779, align 16
  %2008 = load <4 x i32>, <4 x i32>* %1879, align 16
  %2009 = load <4 x i32>, <4 x i32>* %1887, align 16
  %2010 = shufflevector <4 x i32> %2008, <4 x i32> %2009, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2011 = bitcast <4 x i32> %2010 to <2 x i64>
  %2012 = shufflevector <4 x i32> %2008, <4 x i32> %2009, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2013 = bitcast <4 x i32> %2012 to <2 x i64>
  %2014 = load <4 x i32>, <4 x i32>* %1895, align 16
  %2015 = load <4 x i32>, <4 x i32>* %1903, align 16
  %2016 = shufflevector <4 x i32> %2014, <4 x i32> %2015, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2017 = bitcast <4 x i32> %2016 to <2 x i64>
  %2018 = shufflevector <4 x i32> %2014, <4 x i32> %2015, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2019 = bitcast <4 x i32> %2018 to <2 x i64>
  %2020 = shufflevector <2 x i64> %2011, <2 x i64> %2017, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2020, <2 x i64>* %1703, align 16
  %2021 = shufflevector <2 x i64> %2011, <2 x i64> %2017, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2021, <2 x i64>* %1715, align 16
  %2022 = shufflevector <2 x i64> %2013, <2 x i64> %2019, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2022, <2 x i64>* %1727, align 16
  %2023 = shufflevector <2 x i64> %2013, <2 x i64> %2019, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2023, <2 x i64>* %1739, align 16
  %2024 = load <4 x i32>, <4 x i32>* %1883, align 16
  %2025 = load <4 x i32>, <4 x i32>* %1891, align 16
  %2026 = shufflevector <4 x i32> %2024, <4 x i32> %2025, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2027 = bitcast <4 x i32> %2026 to <2 x i64>
  %2028 = shufflevector <4 x i32> %2024, <4 x i32> %2025, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2029 = bitcast <4 x i32> %2028 to <2 x i64>
  %2030 = load <4 x i32>, <4 x i32>* %1899, align 16
  %2031 = load <4 x i32>, <4 x i32>* %1907, align 16
  %2032 = shufflevector <4 x i32> %2030, <4 x i32> %2031, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2033 = bitcast <4 x i32> %2032 to <2 x i64>
  %2034 = shufflevector <4 x i32> %2030, <4 x i32> %2031, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2035 = bitcast <4 x i32> %2034 to <2 x i64>
  %2036 = shufflevector <2 x i64> %2027, <2 x i64> %2033, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2036, <2 x i64>* %1751, align 16
  %2037 = shufflevector <2 x i64> %2027, <2 x i64> %2033, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2037, <2 x i64>* %1762, align 16
  %2038 = shufflevector <2 x i64> %2029, <2 x i64> %2035, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2038, <2 x i64>* %1773, align 16
  %2039 = shufflevector <2 x i64> %2029, <2 x i64> %2035, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2039, <2 x i64>* %1784, align 16
  br label %7057

2040:                                             ; preds = %5
  %2041 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %2042 = load i8, i8* %10, align 1
  %2043 = sext i8 %2042 to i32
  %2044 = mul nsw i32 %2, 7
  %2045 = sext i32 %2044 to i64
  %2046 = getelementptr inbounds i16, i16* %0, i64 %2045
  %2047 = bitcast i16* %2046 to <2 x i64>*
  %2048 = load <2 x i64>, <2 x i64>* %2047, align 16
  store <2 x i64> %2048, <2 x i64>* %2041, align 16
  %2049 = mul nsw i32 %2, 6
  %2050 = sext i32 %2049 to i64
  %2051 = getelementptr inbounds i16, i16* %0, i64 %2050
  %2052 = bitcast i16* %2051 to <2 x i64>*
  %2053 = load <2 x i64>, <2 x i64>* %2052, align 16
  %2054 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %2053, <2 x i64>* %2054, align 16
  %2055 = mul nsw i32 %2, 5
  %2056 = sext i32 %2055 to i64
  %2057 = getelementptr inbounds i16, i16* %0, i64 %2056
  %2058 = bitcast i16* %2057 to <2 x i64>*
  %2059 = load <2 x i64>, <2 x i64>* %2058, align 16
  %2060 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %2059, <2 x i64>* %2060, align 16
  %2061 = shl nsw i32 %2, 2
  %2062 = sext i32 %2061 to i64
  %2063 = getelementptr inbounds i16, i16* %0, i64 %2062
  %2064 = bitcast i16* %2063 to <2 x i64>*
  %2065 = load <2 x i64>, <2 x i64>* %2064, align 16
  %2066 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %2065, <2 x i64>* %2066, align 16
  %2067 = mul nsw i32 %2, 3
  %2068 = sext i32 %2067 to i64
  %2069 = getelementptr inbounds i16, i16* %0, i64 %2068
  %2070 = bitcast i16* %2069 to <2 x i64>*
  %2071 = load <2 x i64>, <2 x i64>* %2070, align 16
  %2072 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %2071, <2 x i64>* %2072, align 16
  %2073 = shl nsw i32 %2, 1
  %2074 = sext i32 %2073 to i64
  %2075 = getelementptr inbounds i16, i16* %0, i64 %2074
  %2076 = bitcast i16* %2075 to <2 x i64>*
  %2077 = load <2 x i64>, <2 x i64>* %2076, align 16
  %2078 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %2077, <2 x i64>* %2078, align 16
  %2079 = sext i32 %2 to i64
  %2080 = getelementptr inbounds i16, i16* %0, i64 %2079
  %2081 = bitcast i16* %2080 to <2 x i64>*
  %2082 = load <2 x i64>, <2 x i64>* %2081, align 16
  %2083 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  %2084 = bitcast i16* %0 to <2 x i64>*
  %2085 = load <2 x i64>, <2 x i64>* %2084, align 16
  %2086 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %2087 = bitcast <2 x i64>* %2086 to <4 x i32>*
  %2088 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %2089 = shufflevector <2 x i64> %2071, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2090 = bitcast <2 x i64> %2071 to <8 x i16>
  %2091 = shufflevector <8 x i16> %2090, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2092 = sext <4 x i16> %2091 to <4 x i32>
  %2093 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %2094 = bitcast <2 x i64>* %2093 to <4 x i32>*
  %2095 = bitcast <2 x i64> %2089 to <8 x i16>
  %2096 = shufflevector <8 x i16> %2095, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2097 = sext <4 x i16> %2096 to <4 x i32>
  %2098 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %2099 = bitcast <2 x i64>* %2098 to <4 x i32>*
  %2100 = shufflevector <2 x i64> %2077, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2101 = bitcast <2 x i64> %2077 to <8 x i16>
  %2102 = shufflevector <8 x i16> %2101, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2103 = sext <4 x i16> %2102 to <4 x i32>
  %2104 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %2105 = bitcast <2 x i64>* %2104 to <4 x i32>*
  %2106 = bitcast <2 x i64> %2100 to <8 x i16>
  %2107 = shufflevector <8 x i16> %2106, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2108 = sext <4 x i16> %2107 to <4 x i32>
  %2109 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %2110 = bitcast <2 x i64>* %2109 to <4 x i32>*
  %2111 = shufflevector <2 x i64> %2082, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2112 = bitcast <2 x i64> %2082 to <8 x i16>
  %2113 = shufflevector <8 x i16> %2112, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2114 = sext <4 x i16> %2113 to <4 x i32>
  %2115 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %2116 = bitcast <2 x i64>* %2115 to <4 x i32>*
  %2117 = bitcast <2 x i64> %2111 to <8 x i16>
  %2118 = shufflevector <8 x i16> %2117, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2119 = sext <4 x i16> %2118 to <4 x i32>
  %2120 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %2121 = bitcast <2 x i64>* %2120 to <4 x i32>*
  %2122 = shufflevector <2 x i64> %2085, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2123 = bitcast <2 x i64> %2085 to <8 x i16>
  %2124 = shufflevector <8 x i16> %2123, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2125 = sext <4 x i16> %2124 to <4 x i32>
  %2126 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %2127 = bitcast <2 x i64>* %2126 to <4 x i32>*
  %2128 = bitcast <2 x i64> %2122 to <8 x i16>
  %2129 = shufflevector <8 x i16> %2128, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2130 = sext <4 x i16> %2129 to <4 x i32>
  %2131 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %2132 = bitcast <2 x i64>* %2131 to <4 x i32>*
  %2133 = shufflevector <2 x i64> %2065, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2134 = bitcast <2 x i64> %2065 to <8 x i16>
  %2135 = shufflevector <8 x i16> %2134, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2136 = sext <4 x i16> %2135 to <4 x i32>
  %2137 = bitcast <2 x i64>* %2083 to <4 x i32>*
  %2138 = bitcast <2 x i64> %2133 to <8 x i16>
  %2139 = shufflevector <8 x i16> %2138, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2140 = sext <4 x i16> %2139 to <4 x i32>
  %2141 = shufflevector <2 x i64> %2059, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2142 = bitcast <2 x i64> %2059 to <8 x i16>
  %2143 = shufflevector <8 x i16> %2142, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2144 = sext <4 x i16> %2143 to <4 x i32>
  %2145 = bitcast <2 x i64>* %2072 to <4 x i32>*
  %2146 = bitcast <2 x i64> %2141 to <8 x i16>
  %2147 = shufflevector <8 x i16> %2146, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2148 = sext <4 x i16> %2147 to <4 x i32>
  %2149 = bitcast <2 x i64>* %2078 to <4 x i32>*
  %2150 = shufflevector <2 x i64> %2053, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2151 = bitcast <2 x i64> %2053 to <8 x i16>
  %2152 = shufflevector <8 x i16> %2151, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2153 = sext <4 x i16> %2152 to <4 x i32>
  %2154 = bitcast <2 x i64>* %2060 to <4 x i32>*
  %2155 = bitcast <2 x i64> %2150 to <8 x i16>
  %2156 = shufflevector <8 x i16> %2155, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2157 = sext <4 x i16> %2156 to <4 x i32>
  %2158 = bitcast <2 x i64>* %2066 to <4 x i32>*
  %2159 = shufflevector <2 x i64> %2048, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2160 = bitcast <2 x i64> %2048 to <8 x i16>
  %2161 = shufflevector <8 x i16> %2160, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2162 = sext <4 x i16> %2161 to <4 x i32>
  %2163 = bitcast <2 x i64> %2159 to <8 x i16>
  %2164 = shufflevector <8 x i16> %2163, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2165 = sext <4 x i16> %2164 to <4 x i32>
  %2166 = bitcast <2 x i64>* %2054 to <4 x i32>*
  %2167 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2162, i32 %2043) #8
  store <4 x i32> %2167, <4 x i32>* %2088, align 16
  %2168 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2165, i32 %2043) #8
  store <4 x i32> %2168, <4 x i32>* %2166, align 16
  %2169 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2153, i32 %2043) #8
  store <4 x i32> %2169, <4 x i32>* %2154, align 16
  %2170 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2157, i32 %2043) #8
  store <4 x i32> %2170, <4 x i32>* %2158, align 16
  %2171 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2144, i32 %2043) #8
  store <4 x i32> %2171, <4 x i32>* %2145, align 16
  %2172 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2148, i32 %2043) #8
  store <4 x i32> %2172, <4 x i32>* %2149, align 16
  %2173 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2136, i32 %2043) #8
  store <4 x i32> %2173, <4 x i32>* %2137, align 16
  %2174 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2140, i32 %2043) #8
  store <4 x i32> %2174, <4 x i32>* %2087, align 16
  %2175 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2092, i32 %2043) #8
  store <4 x i32> %2175, <4 x i32>* %2094, align 16
  %2176 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2097, i32 %2043) #8
  store <4 x i32> %2176, <4 x i32>* %2099, align 16
  %2177 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2103, i32 %2043) #8
  store <4 x i32> %2177, <4 x i32>* %2105, align 16
  %2178 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2108, i32 %2043) #8
  store <4 x i32> %2178, <4 x i32>* %2110, align 16
  %2179 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2114, i32 %2043) #8
  store <4 x i32> %2179, <4 x i32>* %2116, align 16
  %2180 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2119, i32 %2043) #8
  store <4 x i32> %2180, <4 x i32>* %2121, align 16
  %2181 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2125, i32 %2043) #8
  store <4 x i32> %2181, <4 x i32>* %2127, align 16
  %2182 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2130, i32 %2043) #8
  store <4 x i32> %2182, <4 x i32>* %2132, align 16
  %2183 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  %2184 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %2185 = sext i8 %2184 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %2041, <2 x i64>* nonnull %2183, i32 %2185, i32 2)
  %2186 = getelementptr inbounds i8, i8* %10, i64 1
  %2187 = load i8, i8* %2186, align 1
  %2188 = sext i8 %2187 to i32
  %2189 = sub nsw i32 0, %2188
  %2190 = xor i32 %2188, -1
  %2191 = shl i32 1, %2190
  %2192 = insertelement <4 x i32> undef, i32 %2191, i32 0
  %2193 = shufflevector <4 x i32> %2192, <4 x i32> undef, <4 x i32> zeroinitializer
  %2194 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  %2195 = load <4 x i32>, <4 x i32>* %2194, align 16
  %2196 = add <4 x i32> %2193, %2195
  %2197 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %2198 = bitcast <2 x i64>* %2197 to <4 x i32>*
  %2199 = load <4 x i32>, <4 x i32>* %2198, align 16
  %2200 = add <4 x i32> %2193, %2199
  %2201 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %2202 = bitcast <2 x i64>* %2201 to <4 x i32>*
  %2203 = load <4 x i32>, <4 x i32>* %2202, align 16
  %2204 = add <4 x i32> %2193, %2203
  %2205 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %2206 = bitcast <2 x i64>* %2205 to <4 x i32>*
  %2207 = load <4 x i32>, <4 x i32>* %2206, align 16
  %2208 = add <4 x i32> %2207, %2193
  %2209 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %2210 = bitcast <2 x i64>* %2209 to <4 x i32>*
  %2211 = load <4 x i32>, <4 x i32>* %2210, align 16
  %2212 = add <4 x i32> %2211, %2193
  %2213 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %2214 = bitcast <2 x i64>* %2213 to <4 x i32>*
  %2215 = load <4 x i32>, <4 x i32>* %2214, align 16
  %2216 = add <4 x i32> %2215, %2193
  %2217 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %2218 = bitcast <2 x i64>* %2217 to <4 x i32>*
  %2219 = load <4 x i32>, <4 x i32>* %2218, align 16
  %2220 = add <4 x i32> %2219, %2193
  %2221 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %2222 = bitcast <2 x i64>* %2221 to <4 x i32>*
  %2223 = load <4 x i32>, <4 x i32>* %2222, align 16
  %2224 = add <4 x i32> %2223, %2193
  %2225 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %2226 = bitcast <2 x i64>* %2225 to <4 x i32>*
  %2227 = load <4 x i32>, <4 x i32>* %2226, align 16
  %2228 = add <4 x i32> %2227, %2193
  %2229 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %2230 = bitcast <2 x i64>* %2229 to <4 x i32>*
  %2231 = load <4 x i32>, <4 x i32>* %2230, align 16
  %2232 = add <4 x i32> %2231, %2193
  %2233 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %2234 = bitcast <2 x i64>* %2233 to <4 x i32>*
  %2235 = load <4 x i32>, <4 x i32>* %2234, align 16
  %2236 = add <4 x i32> %2235, %2193
  %2237 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %2238 = bitcast <2 x i64>* %2237 to <4 x i32>*
  %2239 = load <4 x i32>, <4 x i32>* %2238, align 16
  %2240 = add <4 x i32> %2239, %2193
  %2241 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %2242 = bitcast <2 x i64>* %2241 to <4 x i32>*
  %2243 = load <4 x i32>, <4 x i32>* %2242, align 16
  %2244 = add <4 x i32> %2243, %2193
  %2245 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %2246 = bitcast <2 x i64>* %2245 to <4 x i32>*
  %2247 = load <4 x i32>, <4 x i32>* %2246, align 16
  %2248 = add <4 x i32> %2247, %2193
  %2249 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %2250 = bitcast <2 x i64>* %2249 to <4 x i32>*
  %2251 = load <4 x i32>, <4 x i32>* %2250, align 16
  %2252 = add <4 x i32> %2251, %2193
  %2253 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %2254 = bitcast <2 x i64>* %2253 to <4 x i32>*
  %2255 = load <4 x i32>, <4 x i32>* %2254, align 16
  %2256 = add <4 x i32> %2255, %2193
  %2257 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2196, i32 %2189) #8
  store <4 x i32> %2257, <4 x i32>* %2194, align 16
  %2258 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2200, i32 %2189) #8
  store <4 x i32> %2258, <4 x i32>* %2198, align 16
  %2259 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2204, i32 %2189) #8
  store <4 x i32> %2259, <4 x i32>* %2202, align 16
  %2260 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2208, i32 %2189) #8
  store <4 x i32> %2260, <4 x i32>* %2206, align 16
  %2261 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2212, i32 %2189) #8
  store <4 x i32> %2261, <4 x i32>* %2210, align 16
  %2262 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2216, i32 %2189) #8
  store <4 x i32> %2262, <4 x i32>* %2214, align 16
  %2263 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2220, i32 %2189) #8
  store <4 x i32> %2263, <4 x i32>* %2218, align 16
  %2264 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2224, i32 %2189) #8
  store <4 x i32> %2264, <4 x i32>* %2222, align 16
  %2265 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2228, i32 %2189) #8
  store <4 x i32> %2265, <4 x i32>* %2226, align 16
  %2266 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2232, i32 %2189) #8
  store <4 x i32> %2266, <4 x i32>* %2230, align 16
  %2267 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2236, i32 %2189) #8
  store <4 x i32> %2267, <4 x i32>* %2234, align 16
  %2268 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2240, i32 %2189) #8
  store <4 x i32> %2268, <4 x i32>* %2238, align 16
  %2269 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2244, i32 %2189) #8
  store <4 x i32> %2269, <4 x i32>* %2242, align 16
  %2270 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2248, i32 %2189) #8
  store <4 x i32> %2270, <4 x i32>* %2246, align 16
  %2271 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2252, i32 %2189) #8
  store <4 x i32> %2271, <4 x i32>* %2250, align 16
  %2272 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2256, i32 %2189) #8
  store <4 x i32> %2272, <4 x i32>* %2254, align 16
  %2273 = shufflevector <4 x i32> %2257, <4 x i32> %2259, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2274 = bitcast <4 x i32> %2273 to <2 x i64>
  %2275 = shufflevector <4 x i32> %2257, <4 x i32> %2259, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2276 = bitcast <4 x i32> %2275 to <2 x i64>
  %2277 = shufflevector <4 x i32> %2261, <4 x i32> %2263, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2278 = bitcast <4 x i32> %2277 to <2 x i64>
  %2279 = shufflevector <4 x i32> %2261, <4 x i32> %2263, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2280 = bitcast <4 x i32> %2279 to <2 x i64>
  %2281 = shufflevector <2 x i64> %2274, <2 x i64> %2278, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2281, <2 x i64>* %2041, align 16
  %2282 = shufflevector <2 x i64> %2274, <2 x i64> %2278, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2282, <2 x i64>* %2060, align 16
  %2283 = shufflevector <2 x i64> %2276, <2 x i64> %2280, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2283, <2 x i64>* %2072, align 16
  %2284 = shufflevector <2 x i64> %2276, <2 x i64> %2280, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2284, <2 x i64>* %2083, align 16
  %2285 = shufflevector <4 x i32> %2258, <4 x i32> %2260, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2286 = bitcast <4 x i32> %2285 to <2 x i64>
  %2287 = shufflevector <4 x i32> %2258, <4 x i32> %2260, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2288 = bitcast <4 x i32> %2287 to <2 x i64>
  %2289 = shufflevector <4 x i32> %2262, <4 x i32> %2264, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2290 = bitcast <4 x i32> %2289 to <2 x i64>
  %2291 = shufflevector <4 x i32> %2262, <4 x i32> %2264, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2292 = bitcast <4 x i32> %2291 to <2 x i64>
  %2293 = shufflevector <2 x i64> %2286, <2 x i64> %2290, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2293, <2 x i64>* %2093, align 16
  %2294 = shufflevector <2 x i64> %2286, <2 x i64> %2290, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2294, <2 x i64>* %2104, align 16
  %2295 = shufflevector <2 x i64> %2288, <2 x i64> %2292, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2295, <2 x i64>* %2115, align 16
  %2296 = shufflevector <2 x i64> %2288, <2 x i64> %2292, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2296, <2 x i64>* %2126, align 16
  %2297 = shufflevector <4 x i32> %2265, <4 x i32> %2267, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2298 = bitcast <4 x i32> %2297 to <2 x i64>
  %2299 = shufflevector <4 x i32> %2265, <4 x i32> %2267, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2300 = bitcast <4 x i32> %2299 to <2 x i64>
  %2301 = shufflevector <4 x i32> %2269, <4 x i32> %2271, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2302 = bitcast <4 x i32> %2301 to <2 x i64>
  %2303 = shufflevector <4 x i32> %2269, <4 x i32> %2271, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2304 = bitcast <4 x i32> %2303 to <2 x i64>
  %2305 = shufflevector <2 x i64> %2298, <2 x i64> %2302, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2305, <2 x i64>* %2054, align 16
  %2306 = shufflevector <2 x i64> %2298, <2 x i64> %2302, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2306, <2 x i64>* %2066, align 16
  %2307 = shufflevector <2 x i64> %2300, <2 x i64> %2304, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2307, <2 x i64>* %2078, align 16
  %2308 = shufflevector <2 x i64> %2300, <2 x i64> %2304, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2308, <2 x i64>* %2086, align 16
  %2309 = shufflevector <4 x i32> %2266, <4 x i32> %2268, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2310 = bitcast <4 x i32> %2309 to <2 x i64>
  %2311 = shufflevector <4 x i32> %2266, <4 x i32> %2268, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2312 = bitcast <4 x i32> %2311 to <2 x i64>
  %2313 = shufflevector <4 x i32> %2270, <4 x i32> %2272, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2314 = bitcast <4 x i32> %2313 to <2 x i64>
  %2315 = shufflevector <4 x i32> %2270, <4 x i32> %2272, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2316 = bitcast <4 x i32> %2315 to <2 x i64>
  %2317 = shufflevector <2 x i64> %2310, <2 x i64> %2314, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2317, <2 x i64>* %2098, align 16
  %2318 = shufflevector <2 x i64> %2310, <2 x i64> %2314, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2318, <2 x i64>* %2109, align 16
  %2319 = shufflevector <2 x i64> %2312, <2 x i64> %2316, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2319, <2 x i64>* %2120, align 16
  %2320 = shufflevector <2 x i64> %2312, <2 x i64> %2316, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2320, <2 x i64>* %2131, align 16
  %2321 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  %2322 = sext i8 %2321 to i32
  %2323 = add nsw i32 %2322, -10
  %2324 = sext i32 %2323 to i64
  %2325 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2324, i64 32
  %2326 = load i32, i32* %2325, align 16
  %2327 = insertelement <4 x i32> undef, i32 %2326, i32 0
  %2328 = shufflevector <4 x i32> %2327, <4 x i32> undef, <4 x i32> zeroinitializer
  %2329 = sub nsw i32 0, %2326
  %2330 = insertelement <4 x i32> undef, i32 %2329, i32 0
  %2331 = shufflevector <4 x i32> %2330, <4 x i32> undef, <4 x i32> zeroinitializer
  %2332 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2324, i64 48
  %2333 = load i32, i32* %2332, align 16
  %2334 = insertelement <4 x i32> undef, i32 %2333, i32 0
  %2335 = shufflevector <4 x i32> %2334, <4 x i32> undef, <4 x i32> zeroinitializer
  %2336 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2324, i64 16
  %2337 = load i32, i32* %2336, align 16
  %2338 = insertelement <4 x i32> undef, i32 %2337, i32 0
  %2339 = shufflevector <4 x i32> %2338, <4 x i32> undef, <4 x i32> zeroinitializer
  %2340 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2324, i64 56
  %2341 = load i32, i32* %2340, align 16
  %2342 = insertelement <4 x i32> undef, i32 %2341, i32 0
  %2343 = shufflevector <4 x i32> %2342, <4 x i32> undef, <4 x i32> zeroinitializer
  %2344 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2324, i64 8
  %2345 = load i32, i32* %2344, align 16
  %2346 = insertelement <4 x i32> undef, i32 %2345, i32 0
  %2347 = shufflevector <4 x i32> %2346, <4 x i32> undef, <4 x i32> zeroinitializer
  %2348 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2324, i64 24
  %2349 = load i32, i32* %2348, align 16
  %2350 = insertelement <4 x i32> undef, i32 %2349, i32 0
  %2351 = shufflevector <4 x i32> %2350, <4 x i32> undef, <4 x i32> zeroinitializer
  %2352 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2324, i64 40
  %2353 = load i32, i32* %2352, align 16
  %2354 = insertelement <4 x i32> undef, i32 %2353, i32 0
  %2355 = shufflevector <4 x i32> %2354, <4 x i32> undef, <4 x i32> zeroinitializer
  %2356 = add nsw i32 %2322, -1
  %2357 = shl i32 1, %2356
  %2358 = insertelement <4 x i32> undef, i32 %2357, i32 0
  %2359 = shufflevector <4 x i32> %2358, <4 x i32> undef, <4 x i32> zeroinitializer
  %2360 = bitcast <2 x i64> %2281 to <4 x i32>
  %2361 = bitcast <2 x i64> %2296 to <4 x i32>
  %2362 = add <4 x i32> %2361, %2360
  %2363 = sub <4 x i32> %2360, %2361
  %2364 = bitcast <2 x i64> %2282 to <4 x i32>
  %2365 = bitcast <2 x i64> %2295 to <4 x i32>
  %2366 = add <4 x i32> %2365, %2364
  %2367 = sub <4 x i32> %2364, %2365
  %2368 = load <4 x i32>, <4 x i32>* %2145, align 16
  %2369 = bitcast <2 x i64> %2294 to <4 x i32>
  %2370 = add <4 x i32> %2368, %2369
  %2371 = sub <4 x i32> %2368, %2369
  %2372 = load <4 x i32>, <4 x i32>* %2137, align 16
  %2373 = bitcast <2 x i64> %2293 to <4 x i32>
  %2374 = add <4 x i32> %2372, %2373
  %2375 = sub <4 x i32> %2372, %2373
  %2376 = add <4 x i32> %2374, %2362
  %2377 = sub <4 x i32> %2362, %2374
  %2378 = add <4 x i32> %2370, %2366
  %2379 = sub <4 x i32> %2366, %2370
  %2380 = mul <4 x i32> %2371, %2331
  %2381 = mul <4 x i32> %2367, %2328
  %2382 = add <4 x i32> %2381, %2359
  %2383 = add <4 x i32> %2382, %2380
  %2384 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2383, i32 %2322) #8
  %2385 = mul <4 x i32> %2371, %2328
  %2386 = mul <4 x i32> %2331, %2367
  %2387 = sub <4 x i32> %2359, %2386
  %2388 = add <4 x i32> %2387, %2385
  %2389 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2388, i32 %2322) #8
  %2390 = mul <4 x i32> %2376, %2328
  %2391 = mul <4 x i32> %2378, %2328
  %2392 = add <4 x i32> %2391, %2359
  %2393 = add <4 x i32> %2392, %2390
  %2394 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2393, i32 %2322) #8
  %2395 = sub <4 x i32> %2359, %2391
  %2396 = add <4 x i32> %2395, %2390
  %2397 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2396, i32 %2322) #8
  %2398 = mul <4 x i32> %2379, %2335
  %2399 = mul <4 x i32> %2377, %2339
  %2400 = add <4 x i32> %2398, %2359
  %2401 = add <4 x i32> %2400, %2399
  %2402 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2401, i32 %2322) #8
  %2403 = mul <4 x i32> %2377, %2335
  %2404 = mul <4 x i32> %2339, %2379
  %2405 = sub <4 x i32> %2359, %2404
  %2406 = add <4 x i32> %2405, %2403
  %2407 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2406, i32 %2322) #8
  %2408 = add <4 x i32> %2384, %2375
  %2409 = sub <4 x i32> %2375, %2384
  %2410 = sub <4 x i32> %2363, %2389
  %2411 = add <4 x i32> %2389, %2363
  %2412 = mul <4 x i32> %2408, %2343
  %2413 = mul <4 x i32> %2411, %2347
  %2414 = add <4 x i32> %2412, %2359
  %2415 = add <4 x i32> %2414, %2413
  %2416 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2415, i32 %2322) #8
  store <4 x i32> %2416, <4 x i32>* %2202, align 16
  %2417 = mul <4 x i32> %2411, %2343
  %2418 = mul <4 x i32> %2347, %2408
  %2419 = sub <4 x i32> %2359, %2418
  %2420 = add <4 x i32> %2419, %2417
  %2421 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2420, i32 %2322) #8
  store <4 x i32> %2421, <4 x i32>* %2250, align 16
  %2422 = mul <4 x i32> %2409, %2351
  %2423 = mul <4 x i32> %2410, %2355
  %2424 = add <4 x i32> %2422, %2359
  %2425 = add <4 x i32> %2424, %2423
  %2426 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2425, i32 %2322) #8
  store <4 x i32> %2426, <4 x i32>* %2234, align 16
  %2427 = mul <4 x i32> %2410, %2351
  %2428 = mul <4 x i32> %2355, %2409
  %2429 = sub <4 x i32> %2359, %2428
  %2430 = add <4 x i32> %2429, %2427
  %2431 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2430, i32 %2322) #8
  store <4 x i32> %2431, <4 x i32>* %2218, align 16
  store <4 x i32> %2394, <4 x i32>* %2194, align 16
  store <4 x i32> %2397, <4 x i32>* %2226, align 16
  store <4 x i32> %2402, <4 x i32>* %2210, align 16
  store <4 x i32> %2407, <4 x i32>* %2242, align 16
  %2432 = load <4 x i32>, <4 x i32>* %2166, align 16
  %2433 = load <4 x i32>, <4 x i32>* %2132, align 16
  %2434 = add <4 x i32> %2433, %2432
  %2435 = sub <4 x i32> %2432, %2433
  %2436 = load <4 x i32>, <4 x i32>* %2158, align 16
  %2437 = load <4 x i32>, <4 x i32>* %2121, align 16
  %2438 = add <4 x i32> %2437, %2436
  %2439 = sub <4 x i32> %2436, %2437
  %2440 = load <4 x i32>, <4 x i32>* %2149, align 16
  %2441 = load <4 x i32>, <4 x i32>* %2110, align 16
  %2442 = add <4 x i32> %2441, %2440
  %2443 = sub <4 x i32> %2440, %2441
  %2444 = load <4 x i32>, <4 x i32>* %2087, align 16
  %2445 = load <4 x i32>, <4 x i32>* %2099, align 16
  %2446 = add <4 x i32> %2445, %2444
  %2447 = sub <4 x i32> %2444, %2445
  %2448 = add <4 x i32> %2446, %2434
  %2449 = sub <4 x i32> %2434, %2446
  %2450 = add <4 x i32> %2442, %2438
  %2451 = sub <4 x i32> %2438, %2442
  %2452 = mul <4 x i32> %2443, %2331
  %2453 = mul <4 x i32> %2439, %2328
  %2454 = add <4 x i32> %2453, %2359
  %2455 = add <4 x i32> %2454, %2452
  %2456 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2455, i32 %2322) #8
  %2457 = mul <4 x i32> %2443, %2328
  %2458 = mul <4 x i32> %2331, %2439
  %2459 = sub <4 x i32> %2359, %2458
  %2460 = add <4 x i32> %2459, %2457
  %2461 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2460, i32 %2322) #8
  %2462 = mul <4 x i32> %2448, %2328
  %2463 = mul <4 x i32> %2450, %2328
  %2464 = add <4 x i32> %2463, %2359
  %2465 = add <4 x i32> %2464, %2462
  %2466 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2465, i32 %2322) #8
  %2467 = sub <4 x i32> %2359, %2463
  %2468 = add <4 x i32> %2467, %2462
  %2469 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2468, i32 %2322) #8
  %2470 = mul <4 x i32> %2451, %2335
  %2471 = mul <4 x i32> %2449, %2339
  %2472 = add <4 x i32> %2470, %2359
  %2473 = add <4 x i32> %2472, %2471
  %2474 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2473, i32 %2322) #8
  %2475 = mul <4 x i32> %2449, %2335
  %2476 = mul <4 x i32> %2339, %2451
  %2477 = sub <4 x i32> %2359, %2476
  %2478 = add <4 x i32> %2477, %2475
  %2479 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2478, i32 %2322) #8
  %2480 = add <4 x i32> %2456, %2447
  %2481 = sub <4 x i32> %2447, %2456
  %2482 = sub <4 x i32> %2435, %2461
  %2483 = add <4 x i32> %2461, %2435
  %2484 = mul <4 x i32> %2480, %2343
  %2485 = mul <4 x i32> %2483, %2347
  %2486 = add <4 x i32> %2484, %2359
  %2487 = add <4 x i32> %2486, %2485
  %2488 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2487, i32 %2322) #8
  store <4 x i32> %2488, <4 x i32>* %2206, align 16
  %2489 = mul <4 x i32> %2483, %2343
  %2490 = mul <4 x i32> %2347, %2480
  %2491 = sub <4 x i32> %2359, %2490
  %2492 = add <4 x i32> %2491, %2489
  %2493 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2492, i32 %2322) #8
  store <4 x i32> %2493, <4 x i32>* %2254, align 16
  %2494 = mul <4 x i32> %2481, %2351
  %2495 = mul <4 x i32> %2482, %2355
  %2496 = add <4 x i32> %2494, %2359
  %2497 = add <4 x i32> %2496, %2495
  %2498 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2497, i32 %2322) #8
  store <4 x i32> %2498, <4 x i32>* %2238, align 16
  %2499 = mul <4 x i32> %2482, %2351
  %2500 = mul <4 x i32> %2355, %2481
  %2501 = sub <4 x i32> %2359, %2500
  %2502 = add <4 x i32> %2501, %2499
  %2503 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2502, i32 %2322) #8
  store <4 x i32> %2503, <4 x i32>* %2222, align 16
  store <4 x i32> %2466, <4 x i32>* %2198, align 16
  store <4 x i32> %2469, <4 x i32>* %2230, align 16
  store <4 x i32> %2474, <4 x i32>* %2214, align 16
  store <4 x i32> %2479, <4 x i32>* %2246, align 16
  %2504 = shufflevector <4 x i32> %2394, <4 x i32> %2416, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2505 = bitcast <4 x i32> %2504 to <2 x i64>
  %2506 = shufflevector <4 x i32> %2394, <4 x i32> %2416, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2507 = bitcast <4 x i32> %2506 to <2 x i64>
  %2508 = shufflevector <4 x i32> %2402, <4 x i32> %2431, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2509 = bitcast <4 x i32> %2508 to <2 x i64>
  %2510 = shufflevector <4 x i32> %2402, <4 x i32> %2431, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2511 = bitcast <4 x i32> %2510 to <2 x i64>
  %2512 = shufflevector <2 x i64> %2505, <2 x i64> %2509, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2512, <2 x i64>* %2041, align 16
  %2513 = shufflevector <2 x i64> %2505, <2 x i64> %2509, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2513, <2 x i64>* %2060, align 16
  %2514 = shufflevector <2 x i64> %2507, <2 x i64> %2511, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2514, <2 x i64>* %2072, align 16
  %2515 = shufflevector <2 x i64> %2507, <2 x i64> %2511, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2515, <2 x i64>* %2083, align 16
  %2516 = shufflevector <4 x i32> %2466, <4 x i32> %2488, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2517 = bitcast <4 x i32> %2516 to <2 x i64>
  %2518 = shufflevector <4 x i32> %2466, <4 x i32> %2488, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2519 = bitcast <4 x i32> %2518 to <2 x i64>
  %2520 = shufflevector <4 x i32> %2474, <4 x i32> %2503, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2521 = bitcast <4 x i32> %2520 to <2 x i64>
  %2522 = shufflevector <4 x i32> %2474, <4 x i32> %2503, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2523 = bitcast <4 x i32> %2522 to <2 x i64>
  %2524 = shufflevector <2 x i64> %2517, <2 x i64> %2521, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2524, <2 x i64>* %2093, align 16
  %2525 = shufflevector <2 x i64> %2517, <2 x i64> %2521, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2525, <2 x i64>* %2104, align 16
  %2526 = shufflevector <2 x i64> %2519, <2 x i64> %2523, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2526, <2 x i64>* %2115, align 16
  %2527 = shufflevector <2 x i64> %2519, <2 x i64> %2523, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2527, <2 x i64>* %2126, align 16
  %2528 = shufflevector <4 x i32> %2397, <4 x i32> %2426, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2529 = bitcast <4 x i32> %2528 to <2 x i64>
  %2530 = shufflevector <4 x i32> %2397, <4 x i32> %2426, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2531 = bitcast <4 x i32> %2530 to <2 x i64>
  %2532 = shufflevector <4 x i32> %2407, <4 x i32> %2421, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2533 = bitcast <4 x i32> %2532 to <2 x i64>
  %2534 = shufflevector <4 x i32> %2407, <4 x i32> %2421, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2535 = bitcast <4 x i32> %2534 to <2 x i64>
  %2536 = shufflevector <2 x i64> %2529, <2 x i64> %2533, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2536, <2 x i64>* %2054, align 16
  %2537 = shufflevector <2 x i64> %2529, <2 x i64> %2533, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2537, <2 x i64>* %2066, align 16
  %2538 = shufflevector <2 x i64> %2531, <2 x i64> %2535, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2538, <2 x i64>* %2078, align 16
  %2539 = shufflevector <2 x i64> %2531, <2 x i64> %2535, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2539, <2 x i64>* %2086, align 16
  %2540 = shufflevector <4 x i32> %2469, <4 x i32> %2498, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2541 = bitcast <4 x i32> %2540 to <2 x i64>
  %2542 = shufflevector <4 x i32> %2469, <4 x i32> %2498, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2543 = bitcast <4 x i32> %2542 to <2 x i64>
  %2544 = shufflevector <4 x i32> %2479, <4 x i32> %2493, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2545 = bitcast <4 x i32> %2544 to <2 x i64>
  %2546 = shufflevector <4 x i32> %2479, <4 x i32> %2493, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2547 = bitcast <4 x i32> %2546 to <2 x i64>
  %2548 = shufflevector <2 x i64> %2541, <2 x i64> %2545, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2548, <2 x i64>* %2098, align 16
  %2549 = shufflevector <2 x i64> %2541, <2 x i64> %2545, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2549, <2 x i64>* %2109, align 16
  %2550 = shufflevector <2 x i64> %2543, <2 x i64> %2547, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2550, <2 x i64>* %2120, align 16
  %2551 = shufflevector <2 x i64> %2543, <2 x i64> %2547, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2551, <2 x i64>* %2131, align 16
  br label %7057

2552:                                             ; preds = %5
  %2553 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %2554 = load i8, i8* %10, align 1
  %2555 = sext i8 %2554 to i32
  %2556 = bitcast i16* %0 to <8 x i16>*
  %2557 = load <8 x i16>, <8 x i16>* %2556, align 16
  %2558 = sext i32 %2 to i64
  %2559 = getelementptr inbounds i16, i16* %0, i64 %2558
  %2560 = bitcast i16* %2559 to <8 x i16>*
  %2561 = load <8 x i16>, <8 x i16>* %2560, align 16
  %2562 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  %2563 = shl nsw i32 %2, 1
  %2564 = sext i32 %2563 to i64
  %2565 = getelementptr inbounds i16, i16* %0, i64 %2564
  %2566 = bitcast i16* %2565 to <8 x i16>*
  %2567 = load <8 x i16>, <8 x i16>* %2566, align 16
  %2568 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  %2569 = mul nsw i32 %2, 3
  %2570 = sext i32 %2569 to i64
  %2571 = getelementptr inbounds i16, i16* %0, i64 %2570
  %2572 = bitcast i16* %2571 to <8 x i16>*
  %2573 = load <8 x i16>, <8 x i16>* %2572, align 16
  %2574 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  %2575 = shl nsw i32 %2, 2
  %2576 = sext i32 %2575 to i64
  %2577 = getelementptr inbounds i16, i16* %0, i64 %2576
  %2578 = bitcast i16* %2577 to <8 x i16>*
  %2579 = load <8 x i16>, <8 x i16>* %2578, align 16
  %2580 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  %2581 = mul nsw i32 %2, 5
  %2582 = sext i32 %2581 to i64
  %2583 = getelementptr inbounds i16, i16* %0, i64 %2582
  %2584 = bitcast i16* %2583 to <8 x i16>*
  %2585 = load <8 x i16>, <8 x i16>* %2584, align 16
  %2586 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  %2587 = mul nsw i32 %2, 6
  %2588 = sext i32 %2587 to i64
  %2589 = getelementptr inbounds i16, i16* %0, i64 %2588
  %2590 = bitcast i16* %2589 to <8 x i16>*
  %2591 = load <8 x i16>, <8 x i16>* %2590, align 16
  %2592 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  %2593 = mul nsw i32 %2, 7
  %2594 = sext i32 %2593 to i64
  %2595 = getelementptr inbounds i16, i16* %0, i64 %2594
  %2596 = bitcast i16* %2595 to <8 x i16>*
  %2597 = load <8 x i16>, <8 x i16>* %2596, align 16
  %2598 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %2599 = shufflevector <8 x i16> %2557, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %2600 = shufflevector <8 x i16> %2599, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %2601 = bitcast <8 x i16> %2600 to <4 x i32>
  %2602 = shufflevector <4 x i32> %2601, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %2603 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  store <4 x i32> %2602, <4 x i32>* %2603, align 16
  %2604 = shufflevector <8 x i16> %2561, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %2605 = shufflevector <8 x i16> %2604, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %2606 = bitcast <8 x i16> %2605 to <4 x i32>
  %2607 = shufflevector <4 x i32> %2606, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %2608 = bitcast <2 x i64>* %2562 to <4 x i32>*
  store <4 x i32> %2607, <4 x i32>* %2608, align 16
  %2609 = shufflevector <8 x i16> %2567, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %2610 = shufflevector <8 x i16> %2609, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %2611 = bitcast <8 x i16> %2610 to <4 x i32>
  %2612 = shufflevector <4 x i32> %2611, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %2613 = bitcast <2 x i64>* %2568 to <4 x i32>*
  store <4 x i32> %2612, <4 x i32>* %2613, align 16
  %2614 = shufflevector <8 x i16> %2573, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %2615 = shufflevector <8 x i16> %2614, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %2616 = bitcast <8 x i16> %2615 to <4 x i32>
  %2617 = shufflevector <4 x i32> %2616, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %2618 = bitcast <2 x i64>* %2574 to <4 x i32>*
  store <4 x i32> %2617, <4 x i32>* %2618, align 16
  %2619 = shufflevector <8 x i16> %2579, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %2620 = shufflevector <8 x i16> %2619, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %2621 = bitcast <8 x i16> %2620 to <4 x i32>
  %2622 = shufflevector <4 x i32> %2621, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %2623 = bitcast <2 x i64>* %2580 to <4 x i32>*
  store <4 x i32> %2622, <4 x i32>* %2623, align 16
  %2624 = shufflevector <8 x i16> %2585, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %2625 = shufflevector <8 x i16> %2624, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %2626 = bitcast <8 x i16> %2625 to <4 x i32>
  %2627 = shufflevector <4 x i32> %2626, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %2628 = bitcast <2 x i64>* %2586 to <4 x i32>*
  store <4 x i32> %2627, <4 x i32>* %2628, align 16
  %2629 = shufflevector <8 x i16> %2591, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %2630 = shufflevector <8 x i16> %2629, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %2631 = bitcast <8 x i16> %2630 to <4 x i32>
  %2632 = shufflevector <4 x i32> %2631, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %2633 = bitcast <2 x i64>* %2592 to <4 x i32>*
  store <4 x i32> %2632, <4 x i32>* %2633, align 16
  %2634 = shufflevector <8 x i16> %2597, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %2635 = shufflevector <8 x i16> %2634, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %2636 = bitcast <8 x i16> %2635 to <4 x i32>
  %2637 = shufflevector <4 x i32> %2636, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %2638 = bitcast <2 x i64>* %2598 to <4 x i32>*
  %2639 = bitcast <4 x i32> %2622 to <2 x i64>
  %2640 = bitcast <4 x i32> %2627 to <2 x i64>
  %2641 = bitcast <4 x i32> %2632 to <2 x i64>
  %2642 = bitcast <4 x i32> %2637 to <2 x i64>
  %2643 = bitcast <4 x i32> %2617 to <2 x i64>
  %2644 = bitcast <4 x i32> %2612 to <2 x i64>
  %2645 = bitcast <4 x i32> %2607 to <2 x i64>
  %2646 = bitcast <4 x i32> %2602 to <2 x i64>
  %2647 = shufflevector <2 x i64> %2639, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2648 = bitcast <4 x i32> %2622 to <8 x i16>
  %2649 = shufflevector <8 x i16> %2648, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2650 = sext <4 x i16> %2649 to <4 x i32>
  %2651 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %2652 = bitcast <2 x i64>* %2651 to <4 x i32>*
  %2653 = bitcast <2 x i64> %2647 to <8 x i16>
  %2654 = shufflevector <8 x i16> %2653, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2655 = sext <4 x i16> %2654 to <4 x i32>
  %2656 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %2657 = bitcast <2 x i64>* %2656 to <4 x i32>*
  %2658 = shufflevector <2 x i64> %2640, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2659 = bitcast <4 x i32> %2627 to <8 x i16>
  %2660 = shufflevector <8 x i16> %2659, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2661 = sext <4 x i16> %2660 to <4 x i32>
  %2662 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %2663 = bitcast <2 x i64>* %2662 to <4 x i32>*
  %2664 = bitcast <2 x i64> %2658 to <8 x i16>
  %2665 = shufflevector <8 x i16> %2664, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2666 = sext <4 x i16> %2665 to <4 x i32>
  %2667 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %2668 = bitcast <2 x i64>* %2667 to <4 x i32>*
  %2669 = shufflevector <2 x i64> %2641, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2670 = bitcast <4 x i32> %2632 to <8 x i16>
  %2671 = shufflevector <8 x i16> %2670, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2672 = sext <4 x i16> %2671 to <4 x i32>
  %2673 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %2674 = bitcast <2 x i64>* %2673 to <4 x i32>*
  %2675 = bitcast <2 x i64> %2669 to <8 x i16>
  %2676 = shufflevector <8 x i16> %2675, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2677 = sext <4 x i16> %2676 to <4 x i32>
  %2678 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %2679 = bitcast <2 x i64>* %2678 to <4 x i32>*
  %2680 = shufflevector <2 x i64> %2642, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2681 = bitcast <4 x i32> %2637 to <8 x i16>
  %2682 = shufflevector <8 x i16> %2681, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2683 = sext <4 x i16> %2682 to <4 x i32>
  %2684 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %2685 = bitcast <2 x i64>* %2684 to <4 x i32>*
  %2686 = bitcast <2 x i64> %2680 to <8 x i16>
  %2687 = shufflevector <8 x i16> %2686, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2688 = sext <4 x i16> %2687 to <4 x i32>
  %2689 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %2690 = bitcast <2 x i64>* %2689 to <4 x i32>*
  %2691 = shufflevector <2 x i64> %2643, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2692 = bitcast <4 x i32> %2617 to <8 x i16>
  %2693 = shufflevector <8 x i16> %2692, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2694 = sext <4 x i16> %2693 to <4 x i32>
  %2695 = bitcast <2 x i64> %2691 to <8 x i16>
  %2696 = shufflevector <8 x i16> %2695, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2697 = sext <4 x i16> %2696 to <4 x i32>
  %2698 = shufflevector <2 x i64> %2644, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2699 = bitcast <4 x i32> %2612 to <8 x i16>
  %2700 = shufflevector <8 x i16> %2699, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2701 = sext <4 x i16> %2700 to <4 x i32>
  %2702 = bitcast <2 x i64> %2698 to <8 x i16>
  %2703 = shufflevector <8 x i16> %2702, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2704 = sext <4 x i16> %2703 to <4 x i32>
  %2705 = shufflevector <2 x i64> %2645, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2706 = bitcast <4 x i32> %2607 to <8 x i16>
  %2707 = shufflevector <8 x i16> %2706, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2708 = sext <4 x i16> %2707 to <4 x i32>
  %2709 = bitcast <2 x i64> %2705 to <8 x i16>
  %2710 = shufflevector <8 x i16> %2709, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2711 = sext <4 x i16> %2710 to <4 x i32>
  %2712 = shufflevector <2 x i64> %2646, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %2713 = bitcast <4 x i32> %2602 to <8 x i16>
  %2714 = shufflevector <8 x i16> %2713, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2715 = sext <4 x i16> %2714 to <4 x i32>
  %2716 = bitcast <2 x i64> %2712 to <8 x i16>
  %2717 = shufflevector <8 x i16> %2716, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2718 = sext <4 x i16> %2717 to <4 x i32>
  %2719 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2715, i32 %2555) #8
  store <4 x i32> %2719, <4 x i32>* %2603, align 16
  %2720 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2718, i32 %2555) #8
  store <4 x i32> %2720, <4 x i32>* %2608, align 16
  %2721 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2708, i32 %2555) #8
  store <4 x i32> %2721, <4 x i32>* %2613, align 16
  %2722 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2711, i32 %2555) #8
  store <4 x i32> %2722, <4 x i32>* %2618, align 16
  %2723 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2701, i32 %2555) #8
  store <4 x i32> %2723, <4 x i32>* %2623, align 16
  %2724 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2704, i32 %2555) #8
  store <4 x i32> %2724, <4 x i32>* %2628, align 16
  %2725 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2694, i32 %2555) #8
  store <4 x i32> %2725, <4 x i32>* %2633, align 16
  %2726 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2697, i32 %2555) #8
  store <4 x i32> %2726, <4 x i32>* %2638, align 16
  %2727 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2650, i32 %2555) #8
  store <4 x i32> %2727, <4 x i32>* %2652, align 16
  %2728 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2655, i32 %2555) #8
  store <4 x i32> %2728, <4 x i32>* %2657, align 16
  %2729 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2661, i32 %2555) #8
  store <4 x i32> %2729, <4 x i32>* %2663, align 16
  %2730 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2666, i32 %2555) #8
  store <4 x i32> %2730, <4 x i32>* %2668, align 16
  %2731 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2672, i32 %2555) #8
  store <4 x i32> %2731, <4 x i32>* %2674, align 16
  %2732 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2677, i32 %2555) #8
  store <4 x i32> %2732, <4 x i32>* %2679, align 16
  %2733 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2683, i32 %2555) #8
  store <4 x i32> %2733, <4 x i32>* %2685, align 16
  %2734 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %2688, i32 %2555) #8
  store <4 x i32> %2734, <4 x i32>* %2690, align 16
  %2735 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  %2736 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %2737 = sext i8 %2736 to i32
  %2738 = add nsw i32 %2737, -10
  %2739 = sext i32 %2738 to i64
  %2740 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2739, i64 32
  %2741 = load i32, i32* %2740, align 16
  %2742 = insertelement <4 x i32> undef, i32 %2741, i32 0
  %2743 = shufflevector <4 x i32> %2742, <4 x i32> undef, <4 x i32> zeroinitializer
  %2744 = sub nsw i32 0, %2741
  %2745 = insertelement <4 x i32> undef, i32 %2744, i32 0
  %2746 = shufflevector <4 x i32> %2745, <4 x i32> undef, <4 x i32> zeroinitializer
  %2747 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2739, i64 48
  %2748 = load i32, i32* %2747, align 16
  %2749 = insertelement <4 x i32> undef, i32 %2748, i32 0
  %2750 = shufflevector <4 x i32> %2749, <4 x i32> undef, <4 x i32> zeroinitializer
  %2751 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2739, i64 16
  %2752 = load i32, i32* %2751, align 16
  %2753 = insertelement <4 x i32> undef, i32 %2752, i32 0
  %2754 = shufflevector <4 x i32> %2753, <4 x i32> undef, <4 x i32> zeroinitializer
  %2755 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2739, i64 56
  %2756 = load i32, i32* %2755, align 16
  %2757 = insertelement <4 x i32> undef, i32 %2756, i32 0
  %2758 = shufflevector <4 x i32> %2757, <4 x i32> undef, <4 x i32> zeroinitializer
  %2759 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2739, i64 8
  %2760 = load i32, i32* %2759, align 16
  %2761 = insertelement <4 x i32> undef, i32 %2760, i32 0
  %2762 = shufflevector <4 x i32> %2761, <4 x i32> undef, <4 x i32> zeroinitializer
  %2763 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2739, i64 24
  %2764 = load i32, i32* %2763, align 16
  %2765 = insertelement <4 x i32> undef, i32 %2764, i32 0
  %2766 = shufflevector <4 x i32> %2765, <4 x i32> undef, <4 x i32> zeroinitializer
  %2767 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %2739, i64 40
  %2768 = load i32, i32* %2767, align 16
  %2769 = insertelement <4 x i32> undef, i32 %2768, i32 0
  %2770 = shufflevector <4 x i32> %2769, <4 x i32> undef, <4 x i32> zeroinitializer
  %2771 = add nsw i32 %2737, -1
  %2772 = shl i32 1, %2771
  %2773 = insertelement <4 x i32> undef, i32 %2772, i32 0
  %2774 = shufflevector <4 x i32> %2773, <4 x i32> undef, <4 x i32> zeroinitializer
  %2775 = add <4 x i32> %2733, %2719
  %2776 = sub <4 x i32> %2719, %2733
  %2777 = add <4 x i32> %2731, %2721
  %2778 = sub <4 x i32> %2721, %2731
  %2779 = add <4 x i32> %2729, %2723
  %2780 = sub <4 x i32> %2723, %2729
  %2781 = add <4 x i32> %2727, %2725
  %2782 = sub <4 x i32> %2725, %2727
  %2783 = add <4 x i32> %2775, %2781
  %2784 = sub <4 x i32> %2775, %2781
  %2785 = add <4 x i32> %2777, %2779
  %2786 = sub <4 x i32> %2777, %2779
  %2787 = mul <4 x i32> %2746, %2780
  %2788 = mul <4 x i32> %2743, %2778
  %2789 = add <4 x i32> %2787, %2788
  %2790 = add <4 x i32> %2789, %2774
  %2791 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2790, i32 %2737) #8
  %2792 = mul <4 x i32> %2743, %2780
  %2793 = mul <4 x i32> %2778, %2746
  %2794 = sub <4 x i32> %2792, %2793
  %2795 = add <4 x i32> %2794, %2774
  %2796 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2795, i32 %2737) #8
  %2797 = mul <4 x i32> %2743, %2783
  %2798 = mul <4 x i32> %2743, %2785
  %2799 = add <4 x i32> %2797, %2798
  %2800 = add <4 x i32> %2799, %2774
  %2801 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2800, i32 %2737) #8
  %2802 = sub <4 x i32> %2797, %2798
  %2803 = add <4 x i32> %2802, %2774
  %2804 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2803, i32 %2737) #8
  %2805 = mul <4 x i32> %2750, %2786
  %2806 = mul <4 x i32> %2754, %2784
  %2807 = add <4 x i32> %2805, %2774
  %2808 = add <4 x i32> %2807, %2806
  %2809 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2808, i32 %2737) #8
  %2810 = mul <4 x i32> %2750, %2784
  %2811 = mul <4 x i32> %2786, %2754
  %2812 = add <4 x i32> %2810, %2774
  %2813 = sub <4 x i32> %2812, %2811
  %2814 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2813, i32 %2737) #8
  %2815 = add <4 x i32> %2791, %2782
  %2816 = sub <4 x i32> %2782, %2791
  %2817 = sub <4 x i32> %2776, %2796
  %2818 = add <4 x i32> %2796, %2776
  %2819 = mul <4 x i32> %2815, %2758
  %2820 = mul <4 x i32> %2818, %2762
  %2821 = add <4 x i32> %2819, %2774
  %2822 = add <4 x i32> %2821, %2820
  %2823 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2822, i32 %2737) #8
  %2824 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %2825 = bitcast <2 x i64>* %2824 to <4 x i32>*
  store <4 x i32> %2823, <4 x i32>* %2825, align 16
  %2826 = mul <4 x i32> %2818, %2758
  %2827 = mul <4 x i32> %2762, %2815
  %2828 = sub <4 x i32> %2774, %2827
  %2829 = add <4 x i32> %2828, %2826
  %2830 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2829, i32 %2737) #8
  %2831 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %2832 = bitcast <2 x i64>* %2831 to <4 x i32>*
  store <4 x i32> %2830, <4 x i32>* %2832, align 16
  %2833 = mul <4 x i32> %2816, %2766
  %2834 = mul <4 x i32> %2817, %2770
  %2835 = add <4 x i32> %2833, %2774
  %2836 = add <4 x i32> %2835, %2834
  %2837 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2836, i32 %2737) #8
  %2838 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %2839 = bitcast <2 x i64>* %2838 to <4 x i32>*
  store <4 x i32> %2837, <4 x i32>* %2839, align 16
  %2840 = mul <4 x i32> %2817, %2766
  %2841 = mul <4 x i32> %2816, %2770
  %2842 = sub <4 x i32> %2774, %2841
  %2843 = add <4 x i32> %2842, %2840
  %2844 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2843, i32 %2737) #8
  %2845 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %2846 = bitcast <2 x i64>* %2845 to <4 x i32>*
  store <4 x i32> %2844, <4 x i32>* %2846, align 16
  %2847 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  store <4 x i32> %2801, <4 x i32>* %2847, align 16
  %2848 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %2849 = bitcast <2 x i64>* %2848 to <4 x i32>*
  store <4 x i32> %2804, <4 x i32>* %2849, align 16
  %2850 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %2851 = bitcast <2 x i64>* %2850 to <4 x i32>*
  store <4 x i32> %2809, <4 x i32>* %2851, align 16
  %2852 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %2853 = bitcast <2 x i64>* %2852 to <4 x i32>*
  store <4 x i32> %2814, <4 x i32>* %2853, align 16
  %2854 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %2855 = load <4 x i32>, <4 x i32>* %2690, align 16
  %2856 = add <4 x i32> %2855, %2720
  %2857 = sub <4 x i32> %2720, %2855
  %2858 = load <4 x i32>, <4 x i32>* %2618, align 16
  %2859 = load <4 x i32>, <4 x i32>* %2679, align 16
  %2860 = add <4 x i32> %2859, %2858
  %2861 = sub <4 x i32> %2858, %2859
  %2862 = load <4 x i32>, <4 x i32>* %2628, align 16
  %2863 = load <4 x i32>, <4 x i32>* %2668, align 16
  %2864 = add <4 x i32> %2863, %2862
  %2865 = sub <4 x i32> %2862, %2863
  %2866 = load <4 x i32>, <4 x i32>* %2638, align 16
  %2867 = load <4 x i32>, <4 x i32>* %2657, align 16
  %2868 = add <4 x i32> %2867, %2866
  %2869 = sub <4 x i32> %2866, %2867
  %2870 = add <4 x i32> %2868, %2856
  %2871 = sub <4 x i32> %2856, %2868
  %2872 = add <4 x i32> %2864, %2860
  %2873 = sub <4 x i32> %2860, %2864
  %2874 = mul <4 x i32> %2865, %2746
  %2875 = mul <4 x i32> %2861, %2743
  %2876 = add <4 x i32> %2875, %2774
  %2877 = add <4 x i32> %2876, %2874
  %2878 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2877, i32 %2737) #8
  %2879 = mul <4 x i32> %2865, %2743
  %2880 = mul <4 x i32> %2746, %2861
  %2881 = sub <4 x i32> %2774, %2880
  %2882 = add <4 x i32> %2881, %2879
  %2883 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2882, i32 %2737) #8
  %2884 = mul <4 x i32> %2870, %2743
  %2885 = mul <4 x i32> %2872, %2743
  %2886 = add <4 x i32> %2885, %2774
  %2887 = add <4 x i32> %2886, %2884
  %2888 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2887, i32 %2737) #8
  %2889 = sub <4 x i32> %2774, %2885
  %2890 = add <4 x i32> %2889, %2884
  %2891 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2890, i32 %2737) #8
  %2892 = mul <4 x i32> %2873, %2750
  %2893 = mul <4 x i32> %2871, %2754
  %2894 = add <4 x i32> %2892, %2774
  %2895 = add <4 x i32> %2894, %2893
  %2896 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2895, i32 %2737) #8
  %2897 = mul <4 x i32> %2871, %2750
  %2898 = mul <4 x i32> %2754, %2873
  %2899 = sub <4 x i32> %2774, %2898
  %2900 = add <4 x i32> %2899, %2897
  %2901 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2900, i32 %2737) #8
  %2902 = add <4 x i32> %2878, %2869
  %2903 = sub <4 x i32> %2869, %2878
  %2904 = sub <4 x i32> %2857, %2883
  %2905 = add <4 x i32> %2883, %2857
  %2906 = mul <4 x i32> %2902, %2758
  %2907 = mul <4 x i32> %2905, %2762
  %2908 = add <4 x i32> %2906, %2774
  %2909 = add <4 x i32> %2908, %2907
  %2910 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2909, i32 %2737) #8
  %2911 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %2912 = bitcast <2 x i64>* %2911 to <4 x i32>*
  store <4 x i32> %2910, <4 x i32>* %2912, align 16
  %2913 = mul <4 x i32> %2905, %2758
  %2914 = mul <4 x i32> %2762, %2902
  %2915 = sub <4 x i32> %2774, %2914
  %2916 = add <4 x i32> %2915, %2913
  %2917 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2916, i32 %2737) #8
  %2918 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %2919 = bitcast <2 x i64>* %2918 to <4 x i32>*
  store <4 x i32> %2917, <4 x i32>* %2919, align 16
  %2920 = mul <4 x i32> %2903, %2766
  %2921 = mul <4 x i32> %2904, %2770
  %2922 = add <4 x i32> %2920, %2774
  %2923 = add <4 x i32> %2922, %2921
  %2924 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2923, i32 %2737) #8
  %2925 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %2926 = bitcast <2 x i64>* %2925 to <4 x i32>*
  store <4 x i32> %2924, <4 x i32>* %2926, align 16
  %2927 = mul <4 x i32> %2904, %2766
  %2928 = mul <4 x i32> %2770, %2903
  %2929 = sub <4 x i32> %2774, %2928
  %2930 = add <4 x i32> %2929, %2927
  %2931 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2930, i32 %2737) #8
  %2932 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %2933 = bitcast <2 x i64>* %2932 to <4 x i32>*
  store <4 x i32> %2931, <4 x i32>* %2933, align 16
  %2934 = bitcast <2 x i64>* %2854 to <4 x i32>*
  store <4 x i32> %2888, <4 x i32>* %2934, align 16
  %2935 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %2936 = bitcast <2 x i64>* %2935 to <4 x i32>*
  store <4 x i32> %2891, <4 x i32>* %2936, align 16
  %2937 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %2938 = bitcast <2 x i64>* %2937 to <4 x i32>*
  store <4 x i32> %2896, <4 x i32>* %2938, align 16
  %2939 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %2940 = bitcast <2 x i64>* %2939 to <4 x i32>*
  store <4 x i32> %2901, <4 x i32>* %2940, align 16
  %2941 = getelementptr inbounds i8, i8* %10, i64 1
  %2942 = load i8, i8* %2941, align 1
  %2943 = sext i8 %2942 to i32
  %2944 = sub nsw i32 0, %2943
  %2945 = xor i32 %2943, -1
  %2946 = shl i32 1, %2945
  %2947 = insertelement <4 x i32> undef, i32 %2946, i32 0
  %2948 = shufflevector <4 x i32> %2947, <4 x i32> undef, <4 x i32> zeroinitializer
  %2949 = add <4 x i32> %2948, %2801
  %2950 = add <4 x i32> %2948, %2888
  %2951 = add <4 x i32> %2948, %2823
  %2952 = add <4 x i32> %2948, %2910
  %2953 = add <4 x i32> %2948, %2809
  %2954 = add <4 x i32> %2948, %2896
  %2955 = add <4 x i32> %2948, %2844
  %2956 = add <4 x i32> %2948, %2931
  %2957 = add <4 x i32> %2948, %2804
  %2958 = add <4 x i32> %2891, %2948
  %2959 = add <4 x i32> %2948, %2837
  %2960 = add <4 x i32> %2924, %2948
  %2961 = add <4 x i32> %2948, %2814
  %2962 = add <4 x i32> %2901, %2948
  %2963 = add <4 x i32> %2948, %2830
  %2964 = add <4 x i32> %2917, %2948
  %2965 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2949, i32 %2944) #8
  store <4 x i32> %2965, <4 x i32>* %2847, align 16
  %2966 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2950, i32 %2944) #8
  store <4 x i32> %2966, <4 x i32>* %2934, align 16
  %2967 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2951, i32 %2944) #8
  store <4 x i32> %2967, <4 x i32>* %2825, align 16
  %2968 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2952, i32 %2944) #8
  store <4 x i32> %2968, <4 x i32>* %2912, align 16
  %2969 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2953, i32 %2944) #8
  store <4 x i32> %2969, <4 x i32>* %2851, align 16
  %2970 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2954, i32 %2944) #8
  store <4 x i32> %2970, <4 x i32>* %2938, align 16
  %2971 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2955, i32 %2944) #8
  store <4 x i32> %2971, <4 x i32>* %2846, align 16
  %2972 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2956, i32 %2944) #8
  store <4 x i32> %2972, <4 x i32>* %2933, align 16
  %2973 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2957, i32 %2944) #8
  store <4 x i32> %2973, <4 x i32>* %2849, align 16
  %2974 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2958, i32 %2944) #8
  store <4 x i32> %2974, <4 x i32>* %2936, align 16
  %2975 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2959, i32 %2944) #8
  store <4 x i32> %2975, <4 x i32>* %2839, align 16
  %2976 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2960, i32 %2944) #8
  store <4 x i32> %2976, <4 x i32>* %2926, align 16
  %2977 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2961, i32 %2944) #8
  store <4 x i32> %2977, <4 x i32>* %2853, align 16
  %2978 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2962, i32 %2944) #8
  store <4 x i32> %2978, <4 x i32>* %2940, align 16
  %2979 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2963, i32 %2944) #8
  store <4 x i32> %2979, <4 x i32>* %2832, align 16
  %2980 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2964, i32 %2944) #8
  store <4 x i32> %2980, <4 x i32>* %2919, align 16
  %2981 = shufflevector <4 x i32> %2965, <4 x i32> %2967, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2982 = bitcast <4 x i32> %2981 to <2 x i64>
  %2983 = shufflevector <4 x i32> %2965, <4 x i32> %2967, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2984 = bitcast <4 x i32> %2983 to <2 x i64>
  %2985 = shufflevector <4 x i32> %2969, <4 x i32> %2971, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2986 = bitcast <4 x i32> %2985 to <2 x i64>
  %2987 = shufflevector <4 x i32> %2969, <4 x i32> %2971, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2988 = bitcast <4 x i32> %2987 to <2 x i64>
  %2989 = shufflevector <2 x i64> %2982, <2 x i64> %2986, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2989, <2 x i64>* %2553, align 16
  %2990 = shufflevector <2 x i64> %2982, <2 x i64> %2986, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2990, <2 x i64>* %2568, align 16
  %2991 = shufflevector <2 x i64> %2984, <2 x i64> %2988, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2991, <2 x i64>* %2580, align 16
  %2992 = shufflevector <2 x i64> %2984, <2 x i64> %2988, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2992, <2 x i64>* %2592, align 16
  %2993 = shufflevector <4 x i32> %2966, <4 x i32> %2968, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2994 = bitcast <4 x i32> %2993 to <2 x i64>
  %2995 = shufflevector <4 x i32> %2966, <4 x i32> %2968, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2996 = bitcast <4 x i32> %2995 to <2 x i64>
  %2997 = shufflevector <4 x i32> %2970, <4 x i32> %2972, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2998 = bitcast <4 x i32> %2997 to <2 x i64>
  %2999 = shufflevector <4 x i32> %2970, <4 x i32> %2972, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3000 = bitcast <4 x i32> %2999 to <2 x i64>
  %3001 = shufflevector <2 x i64> %2994, <2 x i64> %2998, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3001, <2 x i64>* %2651, align 16
  %3002 = shufflevector <2 x i64> %2994, <2 x i64> %2998, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3002, <2 x i64>* %2662, align 16
  %3003 = shufflevector <2 x i64> %2996, <2 x i64> %3000, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3003, <2 x i64>* %2673, align 16
  %3004 = shufflevector <2 x i64> %2996, <2 x i64> %3000, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3004, <2 x i64>* %2684, align 16
  %3005 = shufflevector <4 x i32> %2973, <4 x i32> %2975, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3006 = bitcast <4 x i32> %3005 to <2 x i64>
  %3007 = shufflevector <4 x i32> %2973, <4 x i32> %2975, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3008 = bitcast <4 x i32> %3007 to <2 x i64>
  %3009 = shufflevector <4 x i32> %2977, <4 x i32> %2979, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3010 = bitcast <4 x i32> %3009 to <2 x i64>
  %3011 = shufflevector <4 x i32> %2977, <4 x i32> %2979, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3012 = bitcast <4 x i32> %3011 to <2 x i64>
  %3013 = shufflevector <2 x i64> %3006, <2 x i64> %3010, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3013, <2 x i64>* %2562, align 16
  %3014 = shufflevector <2 x i64> %3006, <2 x i64> %3010, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3014, <2 x i64>* %2574, align 16
  %3015 = shufflevector <2 x i64> %3008, <2 x i64> %3012, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3015, <2 x i64>* %2586, align 16
  %3016 = shufflevector <2 x i64> %3008, <2 x i64> %3012, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3016, <2 x i64>* %2598, align 16
  %3017 = shufflevector <4 x i32> %2974, <4 x i32> %2976, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3018 = bitcast <4 x i32> %3017 to <2 x i64>
  %3019 = shufflevector <4 x i32> %2974, <4 x i32> %2976, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3020 = bitcast <4 x i32> %3019 to <2 x i64>
  %3021 = shufflevector <4 x i32> %2978, <4 x i32> %2980, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3022 = bitcast <4 x i32> %3021 to <2 x i64>
  %3023 = shufflevector <4 x i32> %2978, <4 x i32> %2980, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3024 = bitcast <4 x i32> %3023 to <2 x i64>
  %3025 = shufflevector <2 x i64> %3018, <2 x i64> %3022, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3025, <2 x i64>* %2656, align 16
  %3026 = shufflevector <2 x i64> %3018, <2 x i64> %3022, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3026, <2 x i64>* %2667, align 16
  %3027 = shufflevector <2 x i64> %3020, <2 x i64> %3024, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3027, <2 x i64>* %2678, align 16
  %3028 = shufflevector <2 x i64> %3020, <2 x i64> %3024, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3028, <2 x i64>* %2689, align 16
  %3029 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  %3030 = sext i8 %3029 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %2553, <2 x i64>* nonnull %2735, i32 %3030, i32 2)
  %3031 = load <4 x i32>, <4 x i32>* %2847, align 16
  %3032 = load <4 x i32>, <4 x i32>* %2825, align 16
  %3033 = shufflevector <4 x i32> %3031, <4 x i32> %3032, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3034 = bitcast <4 x i32> %3033 to <2 x i64>
  %3035 = shufflevector <4 x i32> %3031, <4 x i32> %3032, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3036 = bitcast <4 x i32> %3035 to <2 x i64>
  %3037 = load <4 x i32>, <4 x i32>* %2851, align 16
  %3038 = load <4 x i32>, <4 x i32>* %2846, align 16
  %3039 = shufflevector <4 x i32> %3037, <4 x i32> %3038, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3040 = bitcast <4 x i32> %3039 to <2 x i64>
  %3041 = shufflevector <4 x i32> %3037, <4 x i32> %3038, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3042 = bitcast <4 x i32> %3041 to <2 x i64>
  %3043 = shufflevector <2 x i64> %3034, <2 x i64> %3040, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3043, <2 x i64>* %2553, align 16
  %3044 = shufflevector <2 x i64> %3034, <2 x i64> %3040, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3044, <2 x i64>* %2568, align 16
  %3045 = shufflevector <2 x i64> %3036, <2 x i64> %3042, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3045, <2 x i64>* %2580, align 16
  %3046 = shufflevector <2 x i64> %3036, <2 x i64> %3042, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3046, <2 x i64>* %2592, align 16
  %3047 = load <4 x i32>, <4 x i32>* %2934, align 16
  %3048 = load <4 x i32>, <4 x i32>* %2912, align 16
  %3049 = shufflevector <4 x i32> %3047, <4 x i32> %3048, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3050 = bitcast <4 x i32> %3049 to <2 x i64>
  %3051 = shufflevector <4 x i32> %3047, <4 x i32> %3048, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3052 = bitcast <4 x i32> %3051 to <2 x i64>
  %3053 = load <4 x i32>, <4 x i32>* %2938, align 16
  %3054 = load <4 x i32>, <4 x i32>* %2933, align 16
  %3055 = shufflevector <4 x i32> %3053, <4 x i32> %3054, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3056 = bitcast <4 x i32> %3055 to <2 x i64>
  %3057 = shufflevector <4 x i32> %3053, <4 x i32> %3054, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3058 = bitcast <4 x i32> %3057 to <2 x i64>
  %3059 = shufflevector <2 x i64> %3050, <2 x i64> %3056, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3059, <2 x i64>* %2651, align 16
  %3060 = shufflevector <2 x i64> %3050, <2 x i64> %3056, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3060, <2 x i64>* %2662, align 16
  %3061 = shufflevector <2 x i64> %3052, <2 x i64> %3058, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3061, <2 x i64>* %2673, align 16
  %3062 = shufflevector <2 x i64> %3052, <2 x i64> %3058, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3062, <2 x i64>* %2684, align 16
  %3063 = load <4 x i32>, <4 x i32>* %2849, align 16
  %3064 = load <4 x i32>, <4 x i32>* %2839, align 16
  %3065 = shufflevector <4 x i32> %3063, <4 x i32> %3064, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3066 = bitcast <4 x i32> %3065 to <2 x i64>
  %3067 = shufflevector <4 x i32> %3063, <4 x i32> %3064, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3068 = bitcast <4 x i32> %3067 to <2 x i64>
  %3069 = load <4 x i32>, <4 x i32>* %2853, align 16
  %3070 = load <4 x i32>, <4 x i32>* %2832, align 16
  %3071 = shufflevector <4 x i32> %3069, <4 x i32> %3070, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3072 = bitcast <4 x i32> %3071 to <2 x i64>
  %3073 = shufflevector <4 x i32> %3069, <4 x i32> %3070, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3074 = bitcast <4 x i32> %3073 to <2 x i64>
  %3075 = shufflevector <2 x i64> %3066, <2 x i64> %3072, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3075, <2 x i64>* %2562, align 16
  %3076 = shufflevector <2 x i64> %3066, <2 x i64> %3072, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3076, <2 x i64>* %2574, align 16
  %3077 = shufflevector <2 x i64> %3068, <2 x i64> %3074, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3077, <2 x i64>* %2586, align 16
  %3078 = shufflevector <2 x i64> %3068, <2 x i64> %3074, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3078, <2 x i64>* %2598, align 16
  %3079 = load <4 x i32>, <4 x i32>* %2936, align 16
  %3080 = load <4 x i32>, <4 x i32>* %2926, align 16
  %3081 = shufflevector <4 x i32> %3079, <4 x i32> %3080, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3082 = bitcast <4 x i32> %3081 to <2 x i64>
  %3083 = shufflevector <4 x i32> %3079, <4 x i32> %3080, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3084 = bitcast <4 x i32> %3083 to <2 x i64>
  %3085 = load <4 x i32>, <4 x i32>* %2940, align 16
  %3086 = load <4 x i32>, <4 x i32>* %2919, align 16
  %3087 = shufflevector <4 x i32> %3085, <4 x i32> %3086, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3088 = bitcast <4 x i32> %3087 to <2 x i64>
  %3089 = shufflevector <4 x i32> %3085, <4 x i32> %3086, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3090 = bitcast <4 x i32> %3089 to <2 x i64>
  %3091 = shufflevector <2 x i64> %3082, <2 x i64> %3088, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3091, <2 x i64>* %2656, align 16
  %3092 = shufflevector <2 x i64> %3082, <2 x i64> %3088, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3092, <2 x i64>* %2667, align 16
  %3093 = shufflevector <2 x i64> %3084, <2 x i64> %3090, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3093, <2 x i64>* %2678, align 16
  %3094 = shufflevector <2 x i64> %3084, <2 x i64> %3090, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3094, <2 x i64>* %2689, align 16
  br label %7057

3095:                                             ; preds = %5
  %3096 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %3097 = load i8, i8* %10, align 1
  %3098 = sext i8 %3097 to i32
  %3099 = mul nsw i32 %2, 7
  %3100 = sext i32 %3099 to i64
  %3101 = getelementptr inbounds i16, i16* %0, i64 %3100
  %3102 = bitcast i16* %3101 to <8 x i16>*
  %3103 = load <8 x i16>, <8 x i16>* %3102, align 16
  %3104 = mul nsw i32 %2, 6
  %3105 = sext i32 %3104 to i64
  %3106 = getelementptr inbounds i16, i16* %0, i64 %3105
  %3107 = bitcast i16* %3106 to <8 x i16>*
  %3108 = load <8 x i16>, <8 x i16>* %3107, align 16
  %3109 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  %3110 = mul nsw i32 %2, 5
  %3111 = sext i32 %3110 to i64
  %3112 = getelementptr inbounds i16, i16* %0, i64 %3111
  %3113 = bitcast i16* %3112 to <8 x i16>*
  %3114 = load <8 x i16>, <8 x i16>* %3113, align 16
  %3115 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  %3116 = shl nsw i32 %2, 2
  %3117 = sext i32 %3116 to i64
  %3118 = getelementptr inbounds i16, i16* %0, i64 %3117
  %3119 = bitcast i16* %3118 to <8 x i16>*
  %3120 = load <8 x i16>, <8 x i16>* %3119, align 16
  %3121 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  %3122 = mul nsw i32 %2, 3
  %3123 = sext i32 %3122 to i64
  %3124 = getelementptr inbounds i16, i16* %0, i64 %3123
  %3125 = bitcast i16* %3124 to <8 x i16>*
  %3126 = load <8 x i16>, <8 x i16>* %3125, align 16
  %3127 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  %3128 = shl nsw i32 %2, 1
  %3129 = sext i32 %3128 to i64
  %3130 = getelementptr inbounds i16, i16* %0, i64 %3129
  %3131 = bitcast i16* %3130 to <8 x i16>*
  %3132 = load <8 x i16>, <8 x i16>* %3131, align 16
  %3133 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  %3134 = sext i32 %2 to i64
  %3135 = getelementptr inbounds i16, i16* %0, i64 %3134
  %3136 = bitcast i16* %3135 to <8 x i16>*
  %3137 = load <8 x i16>, <8 x i16>* %3136, align 16
  %3138 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  %3139 = bitcast i16* %0 to <8 x i16>*
  %3140 = load <8 x i16>, <8 x i16>* %3139, align 16
  %3141 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %3142 = shufflevector <8 x i16> %3103, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3143 = shufflevector <8 x i16> %3142, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3144 = bitcast <8 x i16> %3143 to <4 x i32>
  %3145 = shufflevector <4 x i32> %3144, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3146 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  store <4 x i32> %3145, <4 x i32>* %3146, align 16
  %3147 = shufflevector <8 x i16> %3108, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3148 = shufflevector <8 x i16> %3147, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3149 = bitcast <8 x i16> %3148 to <4 x i32>
  %3150 = shufflevector <4 x i32> %3149, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3151 = bitcast <2 x i64>* %3109 to <4 x i32>*
  store <4 x i32> %3150, <4 x i32>* %3151, align 16
  %3152 = shufflevector <8 x i16> %3114, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3153 = shufflevector <8 x i16> %3152, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3154 = bitcast <8 x i16> %3153 to <4 x i32>
  %3155 = shufflevector <4 x i32> %3154, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3156 = bitcast <2 x i64>* %3115 to <4 x i32>*
  store <4 x i32> %3155, <4 x i32>* %3156, align 16
  %3157 = shufflevector <8 x i16> %3120, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3158 = shufflevector <8 x i16> %3157, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3159 = bitcast <8 x i16> %3158 to <4 x i32>
  %3160 = shufflevector <4 x i32> %3159, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3161 = bitcast <2 x i64>* %3121 to <4 x i32>*
  store <4 x i32> %3160, <4 x i32>* %3161, align 16
  %3162 = shufflevector <8 x i16> %3126, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3163 = shufflevector <8 x i16> %3162, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3164 = bitcast <8 x i16> %3163 to <4 x i32>
  %3165 = shufflevector <4 x i32> %3164, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3166 = bitcast <2 x i64>* %3127 to <4 x i32>*
  store <4 x i32> %3165, <4 x i32>* %3166, align 16
  %3167 = shufflevector <8 x i16> %3132, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3168 = shufflevector <8 x i16> %3167, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3169 = bitcast <8 x i16> %3168 to <4 x i32>
  %3170 = shufflevector <4 x i32> %3169, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3171 = bitcast <2 x i64>* %3133 to <4 x i32>*
  store <4 x i32> %3170, <4 x i32>* %3171, align 16
  %3172 = shufflevector <8 x i16> %3137, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3173 = shufflevector <8 x i16> %3172, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3174 = bitcast <8 x i16> %3173 to <4 x i32>
  %3175 = shufflevector <4 x i32> %3174, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3176 = bitcast <2 x i64>* %3138 to <4 x i32>*
  store <4 x i32> %3175, <4 x i32>* %3176, align 16
  %3177 = shufflevector <8 x i16> %3140, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3178 = shufflevector <8 x i16> %3177, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3179 = bitcast <8 x i16> %3178 to <4 x i32>
  %3180 = shufflevector <4 x i32> %3179, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3181 = bitcast <2 x i64>* %3141 to <4 x i32>*
  %3182 = bitcast <4 x i32> %3165 to <2 x i64>
  %3183 = bitcast <4 x i32> %3170 to <2 x i64>
  %3184 = bitcast <4 x i32> %3175 to <2 x i64>
  %3185 = bitcast <4 x i32> %3180 to <2 x i64>
  %3186 = bitcast <4 x i32> %3160 to <2 x i64>
  %3187 = bitcast <4 x i32> %3155 to <2 x i64>
  %3188 = bitcast <4 x i32> %3150 to <2 x i64>
  %3189 = bitcast <4 x i32> %3145 to <2 x i64>
  %3190 = shufflevector <2 x i64> %3182, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3191 = bitcast <4 x i32> %3165 to <8 x i16>
  %3192 = shufflevector <8 x i16> %3191, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3193 = sext <4 x i16> %3192 to <4 x i32>
  %3194 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %3195 = bitcast <2 x i64>* %3194 to <4 x i32>*
  %3196 = bitcast <2 x i64> %3190 to <8 x i16>
  %3197 = shufflevector <8 x i16> %3196, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3198 = sext <4 x i16> %3197 to <4 x i32>
  %3199 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %3200 = bitcast <2 x i64>* %3199 to <4 x i32>*
  %3201 = shufflevector <2 x i64> %3183, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3202 = bitcast <4 x i32> %3170 to <8 x i16>
  %3203 = shufflevector <8 x i16> %3202, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3204 = sext <4 x i16> %3203 to <4 x i32>
  %3205 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %3206 = bitcast <2 x i64>* %3205 to <4 x i32>*
  %3207 = bitcast <2 x i64> %3201 to <8 x i16>
  %3208 = shufflevector <8 x i16> %3207, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3209 = sext <4 x i16> %3208 to <4 x i32>
  %3210 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %3211 = bitcast <2 x i64>* %3210 to <4 x i32>*
  %3212 = shufflevector <2 x i64> %3184, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3213 = bitcast <4 x i32> %3175 to <8 x i16>
  %3214 = shufflevector <8 x i16> %3213, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3215 = sext <4 x i16> %3214 to <4 x i32>
  %3216 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %3217 = bitcast <2 x i64>* %3216 to <4 x i32>*
  %3218 = bitcast <2 x i64> %3212 to <8 x i16>
  %3219 = shufflevector <8 x i16> %3218, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3220 = sext <4 x i16> %3219 to <4 x i32>
  %3221 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %3222 = bitcast <2 x i64>* %3221 to <4 x i32>*
  %3223 = shufflevector <2 x i64> %3185, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3224 = bitcast <4 x i32> %3180 to <8 x i16>
  %3225 = shufflevector <8 x i16> %3224, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3226 = sext <4 x i16> %3225 to <4 x i32>
  %3227 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %3228 = bitcast <2 x i64>* %3227 to <4 x i32>*
  %3229 = bitcast <2 x i64> %3223 to <8 x i16>
  %3230 = shufflevector <8 x i16> %3229, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3231 = sext <4 x i16> %3230 to <4 x i32>
  %3232 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %3233 = bitcast <2 x i64>* %3232 to <4 x i32>*
  %3234 = shufflevector <2 x i64> %3186, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3235 = bitcast <4 x i32> %3160 to <8 x i16>
  %3236 = shufflevector <8 x i16> %3235, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3237 = sext <4 x i16> %3236 to <4 x i32>
  %3238 = bitcast <2 x i64> %3234 to <8 x i16>
  %3239 = shufflevector <8 x i16> %3238, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3240 = sext <4 x i16> %3239 to <4 x i32>
  %3241 = shufflevector <2 x i64> %3187, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3242 = bitcast <4 x i32> %3155 to <8 x i16>
  %3243 = shufflevector <8 x i16> %3242, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3244 = sext <4 x i16> %3243 to <4 x i32>
  %3245 = bitcast <2 x i64> %3241 to <8 x i16>
  %3246 = shufflevector <8 x i16> %3245, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3247 = sext <4 x i16> %3246 to <4 x i32>
  %3248 = shufflevector <2 x i64> %3188, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3249 = bitcast <4 x i32> %3150 to <8 x i16>
  %3250 = shufflevector <8 x i16> %3249, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3251 = sext <4 x i16> %3250 to <4 x i32>
  %3252 = bitcast <2 x i64> %3248 to <8 x i16>
  %3253 = shufflevector <8 x i16> %3252, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3254 = sext <4 x i16> %3253 to <4 x i32>
  %3255 = shufflevector <2 x i64> %3189, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3256 = bitcast <4 x i32> %3145 to <8 x i16>
  %3257 = shufflevector <8 x i16> %3256, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3258 = sext <4 x i16> %3257 to <4 x i32>
  %3259 = bitcast <2 x i64> %3255 to <8 x i16>
  %3260 = shufflevector <8 x i16> %3259, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3261 = sext <4 x i16> %3260 to <4 x i32>
  %3262 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3258, i32 %3098) #8
  store <4 x i32> %3262, <4 x i32>* %3146, align 16
  %3263 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3261, i32 %3098) #8
  store <4 x i32> %3263, <4 x i32>* %3151, align 16
  %3264 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3251, i32 %3098) #8
  store <4 x i32> %3264, <4 x i32>* %3156, align 16
  %3265 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3254, i32 %3098) #8
  store <4 x i32> %3265, <4 x i32>* %3161, align 16
  %3266 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3244, i32 %3098) #8
  store <4 x i32> %3266, <4 x i32>* %3166, align 16
  %3267 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3247, i32 %3098) #8
  store <4 x i32> %3267, <4 x i32>* %3171, align 16
  %3268 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3237, i32 %3098) #8
  store <4 x i32> %3268, <4 x i32>* %3176, align 16
  %3269 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3240, i32 %3098) #8
  store <4 x i32> %3269, <4 x i32>* %3181, align 16
  %3270 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3193, i32 %3098) #8
  store <4 x i32> %3270, <4 x i32>* %3195, align 16
  %3271 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3198, i32 %3098) #8
  store <4 x i32> %3271, <4 x i32>* %3200, align 16
  %3272 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3204, i32 %3098) #8
  store <4 x i32> %3272, <4 x i32>* %3206, align 16
  %3273 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3209, i32 %3098) #8
  store <4 x i32> %3273, <4 x i32>* %3211, align 16
  %3274 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3215, i32 %3098) #8
  store <4 x i32> %3274, <4 x i32>* %3217, align 16
  %3275 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3220, i32 %3098) #8
  store <4 x i32> %3275, <4 x i32>* %3222, align 16
  %3276 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3226, i32 %3098) #8
  store <4 x i32> %3276, <4 x i32>* %3228, align 16
  %3277 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3231, i32 %3098) #8
  store <4 x i32> %3277, <4 x i32>* %3233, align 16
  %3278 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  %3279 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %3280 = sext i8 %3279 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %3096, <2 x i64>* nonnull %3278, i32 %3280, i32 2)
  %3281 = getelementptr inbounds i8, i8* %10, i64 1
  %3282 = load i8, i8* %3281, align 1
  %3283 = sext i8 %3282 to i32
  %3284 = sub nsw i32 0, %3283
  %3285 = xor i32 %3283, -1
  %3286 = shl i32 1, %3285
  %3287 = insertelement <4 x i32> undef, i32 %3286, i32 0
  %3288 = shufflevector <4 x i32> %3287, <4 x i32> undef, <4 x i32> zeroinitializer
  %3289 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  %3290 = load <4 x i32>, <4 x i32>* %3289, align 16
  %3291 = add <4 x i32> %3288, %3290
  %3292 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %3293 = bitcast <2 x i64>* %3292 to <4 x i32>*
  %3294 = load <4 x i32>, <4 x i32>* %3293, align 16
  %3295 = add <4 x i32> %3288, %3294
  %3296 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %3297 = bitcast <2 x i64>* %3296 to <4 x i32>*
  %3298 = load <4 x i32>, <4 x i32>* %3297, align 16
  %3299 = add <4 x i32> %3288, %3298
  %3300 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %3301 = bitcast <2 x i64>* %3300 to <4 x i32>*
  %3302 = load <4 x i32>, <4 x i32>* %3301, align 16
  %3303 = add <4 x i32> %3302, %3288
  %3304 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %3305 = bitcast <2 x i64>* %3304 to <4 x i32>*
  %3306 = load <4 x i32>, <4 x i32>* %3305, align 16
  %3307 = add <4 x i32> %3306, %3288
  %3308 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %3309 = bitcast <2 x i64>* %3308 to <4 x i32>*
  %3310 = load <4 x i32>, <4 x i32>* %3309, align 16
  %3311 = add <4 x i32> %3310, %3288
  %3312 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %3313 = bitcast <2 x i64>* %3312 to <4 x i32>*
  %3314 = load <4 x i32>, <4 x i32>* %3313, align 16
  %3315 = add <4 x i32> %3314, %3288
  %3316 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %3317 = bitcast <2 x i64>* %3316 to <4 x i32>*
  %3318 = load <4 x i32>, <4 x i32>* %3317, align 16
  %3319 = add <4 x i32> %3318, %3288
  %3320 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %3321 = bitcast <2 x i64>* %3320 to <4 x i32>*
  %3322 = load <4 x i32>, <4 x i32>* %3321, align 16
  %3323 = add <4 x i32> %3322, %3288
  %3324 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %3325 = bitcast <2 x i64>* %3324 to <4 x i32>*
  %3326 = load <4 x i32>, <4 x i32>* %3325, align 16
  %3327 = add <4 x i32> %3326, %3288
  %3328 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %3329 = bitcast <2 x i64>* %3328 to <4 x i32>*
  %3330 = load <4 x i32>, <4 x i32>* %3329, align 16
  %3331 = add <4 x i32> %3330, %3288
  %3332 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %3333 = bitcast <2 x i64>* %3332 to <4 x i32>*
  %3334 = load <4 x i32>, <4 x i32>* %3333, align 16
  %3335 = add <4 x i32> %3334, %3288
  %3336 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %3337 = bitcast <2 x i64>* %3336 to <4 x i32>*
  %3338 = load <4 x i32>, <4 x i32>* %3337, align 16
  %3339 = add <4 x i32> %3338, %3288
  %3340 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %3341 = bitcast <2 x i64>* %3340 to <4 x i32>*
  %3342 = load <4 x i32>, <4 x i32>* %3341, align 16
  %3343 = add <4 x i32> %3342, %3288
  %3344 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %3345 = bitcast <2 x i64>* %3344 to <4 x i32>*
  %3346 = load <4 x i32>, <4 x i32>* %3345, align 16
  %3347 = add <4 x i32> %3346, %3288
  %3348 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %3349 = bitcast <2 x i64>* %3348 to <4 x i32>*
  %3350 = load <4 x i32>, <4 x i32>* %3349, align 16
  %3351 = add <4 x i32> %3350, %3288
  %3352 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3291, i32 %3284) #8
  store <4 x i32> %3352, <4 x i32>* %3289, align 16
  %3353 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3295, i32 %3284) #8
  store <4 x i32> %3353, <4 x i32>* %3293, align 16
  %3354 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3299, i32 %3284) #8
  store <4 x i32> %3354, <4 x i32>* %3297, align 16
  %3355 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3303, i32 %3284) #8
  store <4 x i32> %3355, <4 x i32>* %3301, align 16
  %3356 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3307, i32 %3284) #8
  store <4 x i32> %3356, <4 x i32>* %3305, align 16
  %3357 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3311, i32 %3284) #8
  store <4 x i32> %3357, <4 x i32>* %3309, align 16
  %3358 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3315, i32 %3284) #8
  store <4 x i32> %3358, <4 x i32>* %3313, align 16
  %3359 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3319, i32 %3284) #8
  store <4 x i32> %3359, <4 x i32>* %3317, align 16
  %3360 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3323, i32 %3284) #8
  store <4 x i32> %3360, <4 x i32>* %3321, align 16
  %3361 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3327, i32 %3284) #8
  store <4 x i32> %3361, <4 x i32>* %3325, align 16
  %3362 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3331, i32 %3284) #8
  store <4 x i32> %3362, <4 x i32>* %3329, align 16
  %3363 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3335, i32 %3284) #8
  store <4 x i32> %3363, <4 x i32>* %3333, align 16
  %3364 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3339, i32 %3284) #8
  store <4 x i32> %3364, <4 x i32>* %3337, align 16
  %3365 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3343, i32 %3284) #8
  store <4 x i32> %3365, <4 x i32>* %3341, align 16
  %3366 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3347, i32 %3284) #8
  store <4 x i32> %3366, <4 x i32>* %3345, align 16
  %3367 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3351, i32 %3284) #8
  store <4 x i32> %3367, <4 x i32>* %3349, align 16
  %3368 = shufflevector <4 x i32> %3352, <4 x i32> %3354, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3369 = bitcast <4 x i32> %3368 to <2 x i64>
  %3370 = shufflevector <4 x i32> %3352, <4 x i32> %3354, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3371 = bitcast <4 x i32> %3370 to <2 x i64>
  %3372 = shufflevector <4 x i32> %3356, <4 x i32> %3358, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3373 = bitcast <4 x i32> %3372 to <2 x i64>
  %3374 = shufflevector <4 x i32> %3356, <4 x i32> %3358, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3375 = bitcast <4 x i32> %3374 to <2 x i64>
  %3376 = shufflevector <2 x i64> %3369, <2 x i64> %3373, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3376, <2 x i64>* %3096, align 16
  %3377 = shufflevector <2 x i64> %3369, <2 x i64> %3373, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3377, <2 x i64>* %3115, align 16
  %3378 = shufflevector <2 x i64> %3371, <2 x i64> %3375, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3378, <2 x i64>* %3127, align 16
  %3379 = shufflevector <2 x i64> %3371, <2 x i64> %3375, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3379, <2 x i64>* %3138, align 16
  %3380 = shufflevector <4 x i32> %3353, <4 x i32> %3355, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3381 = bitcast <4 x i32> %3380 to <2 x i64>
  %3382 = shufflevector <4 x i32> %3353, <4 x i32> %3355, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3383 = bitcast <4 x i32> %3382 to <2 x i64>
  %3384 = shufflevector <4 x i32> %3357, <4 x i32> %3359, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3385 = bitcast <4 x i32> %3384 to <2 x i64>
  %3386 = shufflevector <4 x i32> %3357, <4 x i32> %3359, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3387 = bitcast <4 x i32> %3386 to <2 x i64>
  %3388 = shufflevector <2 x i64> %3381, <2 x i64> %3385, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3388, <2 x i64>* %3194, align 16
  %3389 = shufflevector <2 x i64> %3381, <2 x i64> %3385, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3389, <2 x i64>* %3205, align 16
  %3390 = shufflevector <2 x i64> %3383, <2 x i64> %3387, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3390, <2 x i64>* %3216, align 16
  %3391 = shufflevector <2 x i64> %3383, <2 x i64> %3387, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3391, <2 x i64>* %3227, align 16
  %3392 = shufflevector <4 x i32> %3360, <4 x i32> %3362, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3393 = bitcast <4 x i32> %3392 to <2 x i64>
  %3394 = shufflevector <4 x i32> %3360, <4 x i32> %3362, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3395 = bitcast <4 x i32> %3394 to <2 x i64>
  %3396 = shufflevector <4 x i32> %3364, <4 x i32> %3366, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3397 = bitcast <4 x i32> %3396 to <2 x i64>
  %3398 = shufflevector <4 x i32> %3364, <4 x i32> %3366, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3399 = bitcast <4 x i32> %3398 to <2 x i64>
  %3400 = shufflevector <2 x i64> %3393, <2 x i64> %3397, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3400, <2 x i64>* %3109, align 16
  %3401 = shufflevector <2 x i64> %3393, <2 x i64> %3397, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3401, <2 x i64>* %3121, align 16
  %3402 = shufflevector <2 x i64> %3395, <2 x i64> %3399, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3402, <2 x i64>* %3133, align 16
  %3403 = shufflevector <2 x i64> %3395, <2 x i64> %3399, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3403, <2 x i64>* %3141, align 16
  %3404 = shufflevector <4 x i32> %3361, <4 x i32> %3363, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3405 = bitcast <4 x i32> %3404 to <2 x i64>
  %3406 = shufflevector <4 x i32> %3361, <4 x i32> %3363, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3407 = bitcast <4 x i32> %3406 to <2 x i64>
  %3408 = shufflevector <4 x i32> %3365, <4 x i32> %3367, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3409 = bitcast <4 x i32> %3408 to <2 x i64>
  %3410 = shufflevector <4 x i32> %3365, <4 x i32> %3367, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3411 = bitcast <4 x i32> %3410 to <2 x i64>
  %3412 = shufflevector <2 x i64> %3405, <2 x i64> %3409, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3412, <2 x i64>* %3199, align 16
  %3413 = shufflevector <2 x i64> %3405, <2 x i64> %3409, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3413, <2 x i64>* %3210, align 16
  %3414 = shufflevector <2 x i64> %3407, <2 x i64> %3411, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3414, <2 x i64>* %3221, align 16
  %3415 = shufflevector <2 x i64> %3407, <2 x i64> %3411, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3415, <2 x i64>* %3232, align 16
  %3416 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  %3417 = sext i8 %3416 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %3096, <2 x i64>* nonnull %3278, i32 %3417, i32 2)
  %3418 = load <4 x i32>, <4 x i32>* %3289, align 16
  %3419 = load <4 x i32>, <4 x i32>* %3297, align 16
  %3420 = shufflevector <4 x i32> %3418, <4 x i32> %3419, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3421 = bitcast <4 x i32> %3420 to <2 x i64>
  %3422 = shufflevector <4 x i32> %3418, <4 x i32> %3419, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3423 = bitcast <4 x i32> %3422 to <2 x i64>
  %3424 = load <4 x i32>, <4 x i32>* %3305, align 16
  %3425 = load <4 x i32>, <4 x i32>* %3313, align 16
  %3426 = shufflevector <4 x i32> %3424, <4 x i32> %3425, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3427 = bitcast <4 x i32> %3426 to <2 x i64>
  %3428 = shufflevector <4 x i32> %3424, <4 x i32> %3425, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3429 = bitcast <4 x i32> %3428 to <2 x i64>
  %3430 = shufflevector <2 x i64> %3421, <2 x i64> %3427, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3430, <2 x i64>* %3096, align 16
  %3431 = shufflevector <2 x i64> %3421, <2 x i64> %3427, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3431, <2 x i64>* %3115, align 16
  %3432 = shufflevector <2 x i64> %3423, <2 x i64> %3429, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3432, <2 x i64>* %3127, align 16
  %3433 = shufflevector <2 x i64> %3423, <2 x i64> %3429, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3433, <2 x i64>* %3138, align 16
  %3434 = load <4 x i32>, <4 x i32>* %3293, align 16
  %3435 = load <4 x i32>, <4 x i32>* %3301, align 16
  %3436 = shufflevector <4 x i32> %3434, <4 x i32> %3435, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3437 = bitcast <4 x i32> %3436 to <2 x i64>
  %3438 = shufflevector <4 x i32> %3434, <4 x i32> %3435, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3439 = bitcast <4 x i32> %3438 to <2 x i64>
  %3440 = load <4 x i32>, <4 x i32>* %3309, align 16
  %3441 = load <4 x i32>, <4 x i32>* %3317, align 16
  %3442 = shufflevector <4 x i32> %3440, <4 x i32> %3441, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3443 = bitcast <4 x i32> %3442 to <2 x i64>
  %3444 = shufflevector <4 x i32> %3440, <4 x i32> %3441, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3445 = bitcast <4 x i32> %3444 to <2 x i64>
  %3446 = shufflevector <2 x i64> %3437, <2 x i64> %3443, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3446, <2 x i64>* %3194, align 16
  %3447 = shufflevector <2 x i64> %3437, <2 x i64> %3443, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3447, <2 x i64>* %3205, align 16
  %3448 = shufflevector <2 x i64> %3439, <2 x i64> %3445, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3448, <2 x i64>* %3216, align 16
  %3449 = shufflevector <2 x i64> %3439, <2 x i64> %3445, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3449, <2 x i64>* %3227, align 16
  %3450 = load <4 x i32>, <4 x i32>* %3321, align 16
  %3451 = load <4 x i32>, <4 x i32>* %3329, align 16
  %3452 = shufflevector <4 x i32> %3450, <4 x i32> %3451, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3453 = bitcast <4 x i32> %3452 to <2 x i64>
  %3454 = shufflevector <4 x i32> %3450, <4 x i32> %3451, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3455 = bitcast <4 x i32> %3454 to <2 x i64>
  %3456 = load <4 x i32>, <4 x i32>* %3337, align 16
  %3457 = load <4 x i32>, <4 x i32>* %3345, align 16
  %3458 = shufflevector <4 x i32> %3456, <4 x i32> %3457, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3459 = bitcast <4 x i32> %3458 to <2 x i64>
  %3460 = shufflevector <4 x i32> %3456, <4 x i32> %3457, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3461 = bitcast <4 x i32> %3460 to <2 x i64>
  %3462 = shufflevector <2 x i64> %3453, <2 x i64> %3459, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3462, <2 x i64>* %3109, align 16
  %3463 = shufflevector <2 x i64> %3453, <2 x i64> %3459, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3463, <2 x i64>* %3121, align 16
  %3464 = shufflevector <2 x i64> %3455, <2 x i64> %3461, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3464, <2 x i64>* %3133, align 16
  %3465 = shufflevector <2 x i64> %3455, <2 x i64> %3461, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3465, <2 x i64>* %3141, align 16
  %3466 = load <4 x i32>, <4 x i32>* %3325, align 16
  %3467 = load <4 x i32>, <4 x i32>* %3333, align 16
  %3468 = shufflevector <4 x i32> %3466, <4 x i32> %3467, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3469 = bitcast <4 x i32> %3468 to <2 x i64>
  %3470 = shufflevector <4 x i32> %3466, <4 x i32> %3467, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3471 = bitcast <4 x i32> %3470 to <2 x i64>
  %3472 = load <4 x i32>, <4 x i32>* %3341, align 16
  %3473 = load <4 x i32>, <4 x i32>* %3349, align 16
  %3474 = shufflevector <4 x i32> %3472, <4 x i32> %3473, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3475 = bitcast <4 x i32> %3474 to <2 x i64>
  %3476 = shufflevector <4 x i32> %3472, <4 x i32> %3473, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3477 = bitcast <4 x i32> %3476 to <2 x i64>
  %3478 = shufflevector <2 x i64> %3469, <2 x i64> %3475, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3478, <2 x i64>* %3199, align 16
  %3479 = shufflevector <2 x i64> %3469, <2 x i64> %3475, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3479, <2 x i64>* %3210, align 16
  %3480 = shufflevector <2 x i64> %3471, <2 x i64> %3477, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3480, <2 x i64>* %3221, align 16
  %3481 = shufflevector <2 x i64> %3471, <2 x i64> %3477, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3481, <2 x i64>* %3232, align 16
  br label %7057

3482:                                             ; preds = %5
  %3483 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %3484 = load i8, i8* %10, align 1
  %3485 = sext i8 %3484 to i32
  %3486 = bitcast i16* %0 to <8 x i16>*
  %3487 = load <8 x i16>, <8 x i16>* %3486, align 16
  %3488 = sext i32 %2 to i64
  %3489 = getelementptr inbounds i16, i16* %0, i64 %3488
  %3490 = bitcast i16* %3489 to <8 x i16>*
  %3491 = load <8 x i16>, <8 x i16>* %3490, align 16
  %3492 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  %3493 = shl nsw i32 %2, 1
  %3494 = sext i32 %3493 to i64
  %3495 = getelementptr inbounds i16, i16* %0, i64 %3494
  %3496 = bitcast i16* %3495 to <8 x i16>*
  %3497 = load <8 x i16>, <8 x i16>* %3496, align 16
  %3498 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  %3499 = mul nsw i32 %2, 3
  %3500 = sext i32 %3499 to i64
  %3501 = getelementptr inbounds i16, i16* %0, i64 %3500
  %3502 = bitcast i16* %3501 to <8 x i16>*
  %3503 = load <8 x i16>, <8 x i16>* %3502, align 16
  %3504 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  %3505 = shl nsw i32 %2, 2
  %3506 = sext i32 %3505 to i64
  %3507 = getelementptr inbounds i16, i16* %0, i64 %3506
  %3508 = bitcast i16* %3507 to <8 x i16>*
  %3509 = load <8 x i16>, <8 x i16>* %3508, align 16
  %3510 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  %3511 = mul nsw i32 %2, 5
  %3512 = sext i32 %3511 to i64
  %3513 = getelementptr inbounds i16, i16* %0, i64 %3512
  %3514 = bitcast i16* %3513 to <8 x i16>*
  %3515 = load <8 x i16>, <8 x i16>* %3514, align 16
  %3516 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  %3517 = mul nsw i32 %2, 6
  %3518 = sext i32 %3517 to i64
  %3519 = getelementptr inbounds i16, i16* %0, i64 %3518
  %3520 = bitcast i16* %3519 to <8 x i16>*
  %3521 = load <8 x i16>, <8 x i16>* %3520, align 16
  %3522 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  %3523 = mul nsw i32 %2, 7
  %3524 = sext i32 %3523 to i64
  %3525 = getelementptr inbounds i16, i16* %0, i64 %3524
  %3526 = bitcast i16* %3525 to <8 x i16>*
  %3527 = load <8 x i16>, <8 x i16>* %3526, align 16
  %3528 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %3529 = shufflevector <8 x i16> %3487, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3530 = shufflevector <8 x i16> %3529, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3531 = bitcast <8 x i16> %3530 to <4 x i32>
  %3532 = shufflevector <4 x i32> %3531, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3533 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  store <4 x i32> %3532, <4 x i32>* %3533, align 16
  %3534 = shufflevector <8 x i16> %3491, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3535 = shufflevector <8 x i16> %3534, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3536 = bitcast <8 x i16> %3535 to <4 x i32>
  %3537 = shufflevector <4 x i32> %3536, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3538 = bitcast <2 x i64>* %3492 to <4 x i32>*
  store <4 x i32> %3537, <4 x i32>* %3538, align 16
  %3539 = shufflevector <8 x i16> %3497, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3540 = shufflevector <8 x i16> %3539, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3541 = bitcast <8 x i16> %3540 to <4 x i32>
  %3542 = shufflevector <4 x i32> %3541, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3543 = bitcast <2 x i64>* %3498 to <4 x i32>*
  store <4 x i32> %3542, <4 x i32>* %3543, align 16
  %3544 = shufflevector <8 x i16> %3503, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3545 = shufflevector <8 x i16> %3544, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3546 = bitcast <8 x i16> %3545 to <4 x i32>
  %3547 = shufflevector <4 x i32> %3546, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3548 = bitcast <2 x i64>* %3504 to <4 x i32>*
  store <4 x i32> %3547, <4 x i32>* %3548, align 16
  %3549 = shufflevector <8 x i16> %3509, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3550 = shufflevector <8 x i16> %3549, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3551 = bitcast <8 x i16> %3550 to <4 x i32>
  %3552 = shufflevector <4 x i32> %3551, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3553 = bitcast <2 x i64>* %3510 to <4 x i32>*
  store <4 x i32> %3552, <4 x i32>* %3553, align 16
  %3554 = shufflevector <8 x i16> %3515, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3555 = shufflevector <8 x i16> %3554, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3556 = bitcast <8 x i16> %3555 to <4 x i32>
  %3557 = shufflevector <4 x i32> %3556, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3558 = bitcast <2 x i64>* %3516 to <4 x i32>*
  store <4 x i32> %3557, <4 x i32>* %3558, align 16
  %3559 = shufflevector <8 x i16> %3521, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3560 = shufflevector <8 x i16> %3559, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3561 = bitcast <8 x i16> %3560 to <4 x i32>
  %3562 = shufflevector <4 x i32> %3561, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3563 = bitcast <2 x i64>* %3522 to <4 x i32>*
  store <4 x i32> %3562, <4 x i32>* %3563, align 16
  %3564 = shufflevector <8 x i16> %3527, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %3565 = shufflevector <8 x i16> %3564, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %3566 = bitcast <8 x i16> %3565 to <4 x i32>
  %3567 = shufflevector <4 x i32> %3566, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %3568 = bitcast <2 x i64>* %3528 to <4 x i32>*
  %3569 = bitcast <4 x i32> %3552 to <2 x i64>
  %3570 = bitcast <4 x i32> %3557 to <2 x i64>
  %3571 = bitcast <4 x i32> %3562 to <2 x i64>
  %3572 = bitcast <4 x i32> %3567 to <2 x i64>
  %3573 = bitcast <4 x i32> %3547 to <2 x i64>
  %3574 = bitcast <4 x i32> %3542 to <2 x i64>
  %3575 = bitcast <4 x i32> %3537 to <2 x i64>
  %3576 = bitcast <4 x i32> %3532 to <2 x i64>
  %3577 = shufflevector <2 x i64> %3569, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3578 = bitcast <4 x i32> %3552 to <8 x i16>
  %3579 = shufflevector <8 x i16> %3578, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3580 = sext <4 x i16> %3579 to <4 x i32>
  %3581 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %3582 = bitcast <2 x i64>* %3581 to <4 x i32>*
  %3583 = bitcast <2 x i64> %3577 to <8 x i16>
  %3584 = shufflevector <8 x i16> %3583, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3585 = sext <4 x i16> %3584 to <4 x i32>
  %3586 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %3587 = bitcast <2 x i64>* %3586 to <4 x i32>*
  %3588 = shufflevector <2 x i64> %3570, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3589 = bitcast <4 x i32> %3557 to <8 x i16>
  %3590 = shufflevector <8 x i16> %3589, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3591 = sext <4 x i16> %3590 to <4 x i32>
  %3592 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %3593 = bitcast <2 x i64>* %3592 to <4 x i32>*
  %3594 = bitcast <2 x i64> %3588 to <8 x i16>
  %3595 = shufflevector <8 x i16> %3594, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3596 = sext <4 x i16> %3595 to <4 x i32>
  %3597 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %3598 = bitcast <2 x i64>* %3597 to <4 x i32>*
  %3599 = shufflevector <2 x i64> %3571, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3600 = bitcast <4 x i32> %3562 to <8 x i16>
  %3601 = shufflevector <8 x i16> %3600, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3602 = sext <4 x i16> %3601 to <4 x i32>
  %3603 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %3604 = bitcast <2 x i64>* %3603 to <4 x i32>*
  %3605 = bitcast <2 x i64> %3599 to <8 x i16>
  %3606 = shufflevector <8 x i16> %3605, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3607 = sext <4 x i16> %3606 to <4 x i32>
  %3608 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %3609 = bitcast <2 x i64>* %3608 to <4 x i32>*
  %3610 = shufflevector <2 x i64> %3572, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3611 = bitcast <4 x i32> %3567 to <8 x i16>
  %3612 = shufflevector <8 x i16> %3611, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3613 = sext <4 x i16> %3612 to <4 x i32>
  %3614 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %3615 = bitcast <2 x i64>* %3614 to <4 x i32>*
  %3616 = bitcast <2 x i64> %3610 to <8 x i16>
  %3617 = shufflevector <8 x i16> %3616, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3618 = sext <4 x i16> %3617 to <4 x i32>
  %3619 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %3620 = bitcast <2 x i64>* %3619 to <4 x i32>*
  %3621 = shufflevector <2 x i64> %3573, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3622 = bitcast <4 x i32> %3547 to <8 x i16>
  %3623 = shufflevector <8 x i16> %3622, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3624 = sext <4 x i16> %3623 to <4 x i32>
  %3625 = bitcast <2 x i64> %3621 to <8 x i16>
  %3626 = shufflevector <8 x i16> %3625, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3627 = sext <4 x i16> %3626 to <4 x i32>
  %3628 = shufflevector <2 x i64> %3574, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3629 = bitcast <4 x i32> %3542 to <8 x i16>
  %3630 = shufflevector <8 x i16> %3629, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3631 = sext <4 x i16> %3630 to <4 x i32>
  %3632 = bitcast <2 x i64> %3628 to <8 x i16>
  %3633 = shufflevector <8 x i16> %3632, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3634 = sext <4 x i16> %3633 to <4 x i32>
  %3635 = shufflevector <2 x i64> %3575, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3636 = bitcast <4 x i32> %3537 to <8 x i16>
  %3637 = shufflevector <8 x i16> %3636, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3638 = sext <4 x i16> %3637 to <4 x i32>
  %3639 = bitcast <2 x i64> %3635 to <8 x i16>
  %3640 = shufflevector <8 x i16> %3639, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3641 = sext <4 x i16> %3640 to <4 x i32>
  %3642 = shufflevector <2 x i64> %3576, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3643 = bitcast <4 x i32> %3532 to <8 x i16>
  %3644 = shufflevector <8 x i16> %3643, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3645 = sext <4 x i16> %3644 to <4 x i32>
  %3646 = bitcast <2 x i64> %3642 to <8 x i16>
  %3647 = shufflevector <8 x i16> %3646, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3648 = sext <4 x i16> %3647 to <4 x i32>
  %3649 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3645, i32 %3485) #8
  store <4 x i32> %3649, <4 x i32>* %3533, align 16
  %3650 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3648, i32 %3485) #8
  store <4 x i32> %3650, <4 x i32>* %3538, align 16
  %3651 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3638, i32 %3485) #8
  store <4 x i32> %3651, <4 x i32>* %3543, align 16
  %3652 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3641, i32 %3485) #8
  store <4 x i32> %3652, <4 x i32>* %3548, align 16
  %3653 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3631, i32 %3485) #8
  store <4 x i32> %3653, <4 x i32>* %3553, align 16
  %3654 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3634, i32 %3485) #8
  store <4 x i32> %3654, <4 x i32>* %3558, align 16
  %3655 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3624, i32 %3485) #8
  store <4 x i32> %3655, <4 x i32>* %3563, align 16
  %3656 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3627, i32 %3485) #8
  store <4 x i32> %3656, <4 x i32>* %3568, align 16
  %3657 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3580, i32 %3485) #8
  store <4 x i32> %3657, <4 x i32>* %3582, align 16
  %3658 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3585, i32 %3485) #8
  store <4 x i32> %3658, <4 x i32>* %3587, align 16
  %3659 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3591, i32 %3485) #8
  store <4 x i32> %3659, <4 x i32>* %3593, align 16
  %3660 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3596, i32 %3485) #8
  store <4 x i32> %3660, <4 x i32>* %3598, align 16
  %3661 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3602, i32 %3485) #8
  store <4 x i32> %3661, <4 x i32>* %3604, align 16
  %3662 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3607, i32 %3485) #8
  store <4 x i32> %3662, <4 x i32>* %3609, align 16
  %3663 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3613, i32 %3485) #8
  store <4 x i32> %3663, <4 x i32>* %3615, align 16
  %3664 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3618, i32 %3485) #8
  store <4 x i32> %3664, <4 x i32>* %3620, align 16
  %3665 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  %3666 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %3667 = sext i8 %3666 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %3483, <2 x i64>* nonnull %3665, i32 %3667, i32 2)
  %3668 = getelementptr inbounds i8, i8* %10, i64 1
  %3669 = load i8, i8* %3668, align 1
  %3670 = sext i8 %3669 to i32
  %3671 = sub nsw i32 0, %3670
  %3672 = xor i32 %3670, -1
  %3673 = shl i32 1, %3672
  %3674 = insertelement <4 x i32> undef, i32 %3673, i32 0
  %3675 = shufflevector <4 x i32> %3674, <4 x i32> undef, <4 x i32> zeroinitializer
  %3676 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  %3677 = load <4 x i32>, <4 x i32>* %3676, align 16
  %3678 = add <4 x i32> %3675, %3677
  %3679 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %3680 = bitcast <2 x i64>* %3679 to <4 x i32>*
  %3681 = load <4 x i32>, <4 x i32>* %3680, align 16
  %3682 = add <4 x i32> %3675, %3681
  %3683 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %3684 = bitcast <2 x i64>* %3683 to <4 x i32>*
  %3685 = load <4 x i32>, <4 x i32>* %3684, align 16
  %3686 = add <4 x i32> %3675, %3685
  %3687 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %3688 = bitcast <2 x i64>* %3687 to <4 x i32>*
  %3689 = load <4 x i32>, <4 x i32>* %3688, align 16
  %3690 = add <4 x i32> %3689, %3675
  %3691 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %3692 = bitcast <2 x i64>* %3691 to <4 x i32>*
  %3693 = load <4 x i32>, <4 x i32>* %3692, align 16
  %3694 = add <4 x i32> %3693, %3675
  %3695 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %3696 = bitcast <2 x i64>* %3695 to <4 x i32>*
  %3697 = load <4 x i32>, <4 x i32>* %3696, align 16
  %3698 = add <4 x i32> %3697, %3675
  %3699 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %3700 = bitcast <2 x i64>* %3699 to <4 x i32>*
  %3701 = load <4 x i32>, <4 x i32>* %3700, align 16
  %3702 = add <4 x i32> %3701, %3675
  %3703 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %3704 = bitcast <2 x i64>* %3703 to <4 x i32>*
  %3705 = load <4 x i32>, <4 x i32>* %3704, align 16
  %3706 = add <4 x i32> %3705, %3675
  %3707 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %3708 = bitcast <2 x i64>* %3707 to <4 x i32>*
  %3709 = load <4 x i32>, <4 x i32>* %3708, align 16
  %3710 = add <4 x i32> %3709, %3675
  %3711 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %3712 = bitcast <2 x i64>* %3711 to <4 x i32>*
  %3713 = load <4 x i32>, <4 x i32>* %3712, align 16
  %3714 = add <4 x i32> %3713, %3675
  %3715 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %3716 = bitcast <2 x i64>* %3715 to <4 x i32>*
  %3717 = load <4 x i32>, <4 x i32>* %3716, align 16
  %3718 = add <4 x i32> %3717, %3675
  %3719 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %3720 = bitcast <2 x i64>* %3719 to <4 x i32>*
  %3721 = load <4 x i32>, <4 x i32>* %3720, align 16
  %3722 = add <4 x i32> %3721, %3675
  %3723 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %3724 = bitcast <2 x i64>* %3723 to <4 x i32>*
  %3725 = load <4 x i32>, <4 x i32>* %3724, align 16
  %3726 = add <4 x i32> %3725, %3675
  %3727 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %3728 = bitcast <2 x i64>* %3727 to <4 x i32>*
  %3729 = load <4 x i32>, <4 x i32>* %3728, align 16
  %3730 = add <4 x i32> %3729, %3675
  %3731 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %3732 = bitcast <2 x i64>* %3731 to <4 x i32>*
  %3733 = load <4 x i32>, <4 x i32>* %3732, align 16
  %3734 = add <4 x i32> %3733, %3675
  %3735 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %3736 = bitcast <2 x i64>* %3735 to <4 x i32>*
  %3737 = load <4 x i32>, <4 x i32>* %3736, align 16
  %3738 = add <4 x i32> %3737, %3675
  %3739 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3678, i32 %3671) #8
  store <4 x i32> %3739, <4 x i32>* %3676, align 16
  %3740 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3682, i32 %3671) #8
  store <4 x i32> %3740, <4 x i32>* %3680, align 16
  %3741 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3686, i32 %3671) #8
  store <4 x i32> %3741, <4 x i32>* %3684, align 16
  %3742 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3690, i32 %3671) #8
  store <4 x i32> %3742, <4 x i32>* %3688, align 16
  %3743 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3694, i32 %3671) #8
  store <4 x i32> %3743, <4 x i32>* %3692, align 16
  %3744 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3698, i32 %3671) #8
  store <4 x i32> %3744, <4 x i32>* %3696, align 16
  %3745 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3702, i32 %3671) #8
  store <4 x i32> %3745, <4 x i32>* %3700, align 16
  %3746 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3706, i32 %3671) #8
  store <4 x i32> %3746, <4 x i32>* %3704, align 16
  %3747 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3710, i32 %3671) #8
  store <4 x i32> %3747, <4 x i32>* %3708, align 16
  %3748 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3714, i32 %3671) #8
  store <4 x i32> %3748, <4 x i32>* %3712, align 16
  %3749 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3718, i32 %3671) #8
  store <4 x i32> %3749, <4 x i32>* %3716, align 16
  %3750 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3722, i32 %3671) #8
  store <4 x i32> %3750, <4 x i32>* %3720, align 16
  %3751 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3726, i32 %3671) #8
  store <4 x i32> %3751, <4 x i32>* %3724, align 16
  %3752 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3730, i32 %3671) #8
  store <4 x i32> %3752, <4 x i32>* %3728, align 16
  %3753 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3734, i32 %3671) #8
  store <4 x i32> %3753, <4 x i32>* %3732, align 16
  %3754 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3738, i32 %3671) #8
  store <4 x i32> %3754, <4 x i32>* %3736, align 16
  %3755 = shufflevector <4 x i32> %3739, <4 x i32> %3741, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3756 = bitcast <4 x i32> %3755 to <2 x i64>
  %3757 = shufflevector <4 x i32> %3739, <4 x i32> %3741, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3758 = bitcast <4 x i32> %3757 to <2 x i64>
  %3759 = shufflevector <4 x i32> %3743, <4 x i32> %3745, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3760 = bitcast <4 x i32> %3759 to <2 x i64>
  %3761 = shufflevector <4 x i32> %3743, <4 x i32> %3745, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3762 = bitcast <4 x i32> %3761 to <2 x i64>
  %3763 = shufflevector <2 x i64> %3756, <2 x i64> %3760, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3763, <2 x i64>* %3483, align 16
  %3764 = shufflevector <2 x i64> %3756, <2 x i64> %3760, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3764, <2 x i64>* %3498, align 16
  %3765 = shufflevector <2 x i64> %3758, <2 x i64> %3762, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3765, <2 x i64>* %3510, align 16
  %3766 = shufflevector <2 x i64> %3758, <2 x i64> %3762, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3766, <2 x i64>* %3522, align 16
  %3767 = shufflevector <4 x i32> %3740, <4 x i32> %3742, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3768 = bitcast <4 x i32> %3767 to <2 x i64>
  %3769 = shufflevector <4 x i32> %3740, <4 x i32> %3742, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3770 = bitcast <4 x i32> %3769 to <2 x i64>
  %3771 = shufflevector <4 x i32> %3744, <4 x i32> %3746, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3772 = bitcast <4 x i32> %3771 to <2 x i64>
  %3773 = shufflevector <4 x i32> %3744, <4 x i32> %3746, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3774 = bitcast <4 x i32> %3773 to <2 x i64>
  %3775 = shufflevector <2 x i64> %3768, <2 x i64> %3772, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3775, <2 x i64>* %3581, align 16
  %3776 = shufflevector <2 x i64> %3768, <2 x i64> %3772, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3776, <2 x i64>* %3592, align 16
  %3777 = shufflevector <2 x i64> %3770, <2 x i64> %3774, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3777, <2 x i64>* %3603, align 16
  %3778 = shufflevector <2 x i64> %3770, <2 x i64> %3774, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3778, <2 x i64>* %3614, align 16
  %3779 = shufflevector <4 x i32> %3747, <4 x i32> %3749, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3780 = bitcast <4 x i32> %3779 to <2 x i64>
  %3781 = shufflevector <4 x i32> %3747, <4 x i32> %3749, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3782 = bitcast <4 x i32> %3781 to <2 x i64>
  %3783 = shufflevector <4 x i32> %3751, <4 x i32> %3753, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3784 = bitcast <4 x i32> %3783 to <2 x i64>
  %3785 = shufflevector <4 x i32> %3751, <4 x i32> %3753, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3786 = bitcast <4 x i32> %3785 to <2 x i64>
  %3787 = shufflevector <2 x i64> %3780, <2 x i64> %3784, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3787, <2 x i64>* %3492, align 16
  %3788 = shufflevector <2 x i64> %3780, <2 x i64> %3784, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3788, <2 x i64>* %3504, align 16
  %3789 = shufflevector <2 x i64> %3782, <2 x i64> %3786, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3789, <2 x i64>* %3516, align 16
  %3790 = shufflevector <2 x i64> %3782, <2 x i64> %3786, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3790, <2 x i64>* %3528, align 16
  %3791 = shufflevector <4 x i32> %3748, <4 x i32> %3750, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3792 = bitcast <4 x i32> %3791 to <2 x i64>
  %3793 = shufflevector <4 x i32> %3748, <4 x i32> %3750, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3794 = bitcast <4 x i32> %3793 to <2 x i64>
  %3795 = shufflevector <4 x i32> %3752, <4 x i32> %3754, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3796 = bitcast <4 x i32> %3795 to <2 x i64>
  %3797 = shufflevector <4 x i32> %3752, <4 x i32> %3754, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3798 = bitcast <4 x i32> %3797 to <2 x i64>
  %3799 = shufflevector <2 x i64> %3792, <2 x i64> %3796, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3799, <2 x i64>* %3586, align 16
  %3800 = shufflevector <2 x i64> %3792, <2 x i64> %3796, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3800, <2 x i64>* %3597, align 16
  %3801 = shufflevector <2 x i64> %3794, <2 x i64> %3798, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3801, <2 x i64>* %3608, align 16
  %3802 = shufflevector <2 x i64> %3794, <2 x i64> %3798, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3802, <2 x i64>* %3619, align 16
  %3803 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  %3804 = sext i8 %3803 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %3483, <2 x i64>* nonnull %3665, i32 %3804, i32 2)
  %3805 = load <4 x i32>, <4 x i32>* %3676, align 16
  %3806 = load <4 x i32>, <4 x i32>* %3684, align 16
  %3807 = shufflevector <4 x i32> %3805, <4 x i32> %3806, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3808 = bitcast <4 x i32> %3807 to <2 x i64>
  %3809 = shufflevector <4 x i32> %3805, <4 x i32> %3806, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3810 = bitcast <4 x i32> %3809 to <2 x i64>
  %3811 = load <4 x i32>, <4 x i32>* %3692, align 16
  %3812 = load <4 x i32>, <4 x i32>* %3700, align 16
  %3813 = shufflevector <4 x i32> %3811, <4 x i32> %3812, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3814 = bitcast <4 x i32> %3813 to <2 x i64>
  %3815 = shufflevector <4 x i32> %3811, <4 x i32> %3812, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3816 = bitcast <4 x i32> %3815 to <2 x i64>
  %3817 = shufflevector <2 x i64> %3808, <2 x i64> %3814, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3817, <2 x i64>* %3483, align 16
  %3818 = shufflevector <2 x i64> %3808, <2 x i64> %3814, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3818, <2 x i64>* %3498, align 16
  %3819 = shufflevector <2 x i64> %3810, <2 x i64> %3816, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3819, <2 x i64>* %3510, align 16
  %3820 = shufflevector <2 x i64> %3810, <2 x i64> %3816, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3820, <2 x i64>* %3522, align 16
  %3821 = load <4 x i32>, <4 x i32>* %3680, align 16
  %3822 = load <4 x i32>, <4 x i32>* %3688, align 16
  %3823 = shufflevector <4 x i32> %3821, <4 x i32> %3822, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3824 = bitcast <4 x i32> %3823 to <2 x i64>
  %3825 = shufflevector <4 x i32> %3821, <4 x i32> %3822, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3826 = bitcast <4 x i32> %3825 to <2 x i64>
  %3827 = load <4 x i32>, <4 x i32>* %3696, align 16
  %3828 = load <4 x i32>, <4 x i32>* %3704, align 16
  %3829 = shufflevector <4 x i32> %3827, <4 x i32> %3828, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3830 = bitcast <4 x i32> %3829 to <2 x i64>
  %3831 = shufflevector <4 x i32> %3827, <4 x i32> %3828, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3832 = bitcast <4 x i32> %3831 to <2 x i64>
  %3833 = shufflevector <2 x i64> %3824, <2 x i64> %3830, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3833, <2 x i64>* %3581, align 16
  %3834 = shufflevector <2 x i64> %3824, <2 x i64> %3830, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3834, <2 x i64>* %3592, align 16
  %3835 = shufflevector <2 x i64> %3826, <2 x i64> %3832, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3835, <2 x i64>* %3603, align 16
  %3836 = shufflevector <2 x i64> %3826, <2 x i64> %3832, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3836, <2 x i64>* %3614, align 16
  %3837 = load <4 x i32>, <4 x i32>* %3708, align 16
  %3838 = load <4 x i32>, <4 x i32>* %3716, align 16
  %3839 = shufflevector <4 x i32> %3837, <4 x i32> %3838, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3840 = bitcast <4 x i32> %3839 to <2 x i64>
  %3841 = shufflevector <4 x i32> %3837, <4 x i32> %3838, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3842 = bitcast <4 x i32> %3841 to <2 x i64>
  %3843 = load <4 x i32>, <4 x i32>* %3724, align 16
  %3844 = load <4 x i32>, <4 x i32>* %3732, align 16
  %3845 = shufflevector <4 x i32> %3843, <4 x i32> %3844, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3846 = bitcast <4 x i32> %3845 to <2 x i64>
  %3847 = shufflevector <4 x i32> %3843, <4 x i32> %3844, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3848 = bitcast <4 x i32> %3847 to <2 x i64>
  %3849 = shufflevector <2 x i64> %3840, <2 x i64> %3846, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3849, <2 x i64>* %3492, align 16
  %3850 = shufflevector <2 x i64> %3840, <2 x i64> %3846, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3850, <2 x i64>* %3504, align 16
  %3851 = shufflevector <2 x i64> %3842, <2 x i64> %3848, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3851, <2 x i64>* %3516, align 16
  %3852 = shufflevector <2 x i64> %3842, <2 x i64> %3848, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3852, <2 x i64>* %3528, align 16
  %3853 = load <4 x i32>, <4 x i32>* %3712, align 16
  %3854 = load <4 x i32>, <4 x i32>* %3720, align 16
  %3855 = shufflevector <4 x i32> %3853, <4 x i32> %3854, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3856 = bitcast <4 x i32> %3855 to <2 x i64>
  %3857 = shufflevector <4 x i32> %3853, <4 x i32> %3854, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3858 = bitcast <4 x i32> %3857 to <2 x i64>
  %3859 = load <4 x i32>, <4 x i32>* %3728, align 16
  %3860 = load <4 x i32>, <4 x i32>* %3736, align 16
  %3861 = shufflevector <4 x i32> %3859, <4 x i32> %3860, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3862 = bitcast <4 x i32> %3861 to <2 x i64>
  %3863 = shufflevector <4 x i32> %3859, <4 x i32> %3860, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3864 = bitcast <4 x i32> %3863 to <2 x i64>
  %3865 = shufflevector <2 x i64> %3856, <2 x i64> %3862, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3865, <2 x i64>* %3586, align 16
  %3866 = shufflevector <2 x i64> %3856, <2 x i64> %3862, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3866, <2 x i64>* %3597, align 16
  %3867 = shufflevector <2 x i64> %3858, <2 x i64> %3864, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3867, <2 x i64>* %3608, align 16
  %3868 = shufflevector <2 x i64> %3858, <2 x i64> %3864, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3868, <2 x i64>* %3619, align 16
  br label %7057

3869:                                             ; preds = %5
  %3870 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %3871 = load i8, i8* %10, align 1
  %3872 = sext i8 %3871 to i32
  %3873 = mul nsw i32 %2, 7
  %3874 = sext i32 %3873 to i64
  %3875 = getelementptr inbounds i16, i16* %0, i64 %3874
  %3876 = bitcast i16* %3875 to <2 x i64>*
  %3877 = load <2 x i64>, <2 x i64>* %3876, align 16
  store <2 x i64> %3877, <2 x i64>* %3870, align 16
  %3878 = mul nsw i32 %2, 6
  %3879 = sext i32 %3878 to i64
  %3880 = getelementptr inbounds i16, i16* %0, i64 %3879
  %3881 = bitcast i16* %3880 to <2 x i64>*
  %3882 = load <2 x i64>, <2 x i64>* %3881, align 16
  %3883 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %3882, <2 x i64>* %3883, align 16
  %3884 = mul nsw i32 %2, 5
  %3885 = sext i32 %3884 to i64
  %3886 = getelementptr inbounds i16, i16* %0, i64 %3885
  %3887 = bitcast i16* %3886 to <2 x i64>*
  %3888 = load <2 x i64>, <2 x i64>* %3887, align 16
  %3889 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %3888, <2 x i64>* %3889, align 16
  %3890 = shl nsw i32 %2, 2
  %3891 = sext i32 %3890 to i64
  %3892 = getelementptr inbounds i16, i16* %0, i64 %3891
  %3893 = bitcast i16* %3892 to <2 x i64>*
  %3894 = load <2 x i64>, <2 x i64>* %3893, align 16
  %3895 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %3894, <2 x i64>* %3895, align 16
  %3896 = mul nsw i32 %2, 3
  %3897 = sext i32 %3896 to i64
  %3898 = getelementptr inbounds i16, i16* %0, i64 %3897
  %3899 = bitcast i16* %3898 to <2 x i64>*
  %3900 = load <2 x i64>, <2 x i64>* %3899, align 16
  %3901 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %3900, <2 x i64>* %3901, align 16
  %3902 = shl nsw i32 %2, 1
  %3903 = sext i32 %3902 to i64
  %3904 = getelementptr inbounds i16, i16* %0, i64 %3903
  %3905 = bitcast i16* %3904 to <2 x i64>*
  %3906 = load <2 x i64>, <2 x i64>* %3905, align 16
  %3907 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %3906, <2 x i64>* %3907, align 16
  %3908 = sext i32 %2 to i64
  %3909 = getelementptr inbounds i16, i16* %0, i64 %3908
  %3910 = bitcast i16* %3909 to <2 x i64>*
  %3911 = load <2 x i64>, <2 x i64>* %3910, align 16
  %3912 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  %3913 = bitcast i16* %0 to <2 x i64>*
  %3914 = load <2 x i64>, <2 x i64>* %3913, align 16
  %3915 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %3916 = bitcast <2 x i64>* %3915 to <4 x i32>*
  %3917 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %3918 = shufflevector <2 x i64> %3900, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3919 = bitcast <2 x i64> %3900 to <8 x i16>
  %3920 = shufflevector <8 x i16> %3919, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3921 = sext <4 x i16> %3920 to <4 x i32>
  %3922 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %3923 = bitcast <2 x i64>* %3922 to <4 x i32>*
  %3924 = bitcast <2 x i64> %3918 to <8 x i16>
  %3925 = shufflevector <8 x i16> %3924, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3926 = sext <4 x i16> %3925 to <4 x i32>
  %3927 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %3928 = bitcast <2 x i64>* %3927 to <4 x i32>*
  %3929 = shufflevector <2 x i64> %3906, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3930 = bitcast <2 x i64> %3906 to <8 x i16>
  %3931 = shufflevector <8 x i16> %3930, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3932 = sext <4 x i16> %3931 to <4 x i32>
  %3933 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %3934 = bitcast <2 x i64>* %3933 to <4 x i32>*
  %3935 = bitcast <2 x i64> %3929 to <8 x i16>
  %3936 = shufflevector <8 x i16> %3935, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3937 = sext <4 x i16> %3936 to <4 x i32>
  %3938 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %3939 = bitcast <2 x i64>* %3938 to <4 x i32>*
  %3940 = shufflevector <2 x i64> %3911, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3941 = bitcast <2 x i64> %3911 to <8 x i16>
  %3942 = shufflevector <8 x i16> %3941, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3943 = sext <4 x i16> %3942 to <4 x i32>
  %3944 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %3945 = bitcast <2 x i64>* %3944 to <4 x i32>*
  %3946 = bitcast <2 x i64> %3940 to <8 x i16>
  %3947 = shufflevector <8 x i16> %3946, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3948 = sext <4 x i16> %3947 to <4 x i32>
  %3949 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %3950 = bitcast <2 x i64>* %3949 to <4 x i32>*
  %3951 = shufflevector <2 x i64> %3914, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3952 = bitcast <2 x i64> %3914 to <8 x i16>
  %3953 = shufflevector <8 x i16> %3952, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3954 = sext <4 x i16> %3953 to <4 x i32>
  %3955 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %3956 = bitcast <2 x i64>* %3955 to <4 x i32>*
  %3957 = bitcast <2 x i64> %3951 to <8 x i16>
  %3958 = shufflevector <8 x i16> %3957, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3959 = sext <4 x i16> %3958 to <4 x i32>
  %3960 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %3961 = bitcast <2 x i64>* %3960 to <4 x i32>*
  %3962 = shufflevector <2 x i64> %3894, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3963 = bitcast <2 x i64> %3894 to <8 x i16>
  %3964 = shufflevector <8 x i16> %3963, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3965 = sext <4 x i16> %3964 to <4 x i32>
  %3966 = bitcast <2 x i64>* %3912 to <4 x i32>*
  %3967 = bitcast <2 x i64> %3962 to <8 x i16>
  %3968 = shufflevector <8 x i16> %3967, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3969 = sext <4 x i16> %3968 to <4 x i32>
  %3970 = shufflevector <2 x i64> %3888, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3971 = bitcast <2 x i64> %3888 to <8 x i16>
  %3972 = shufflevector <8 x i16> %3971, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3973 = sext <4 x i16> %3972 to <4 x i32>
  %3974 = bitcast <2 x i64>* %3901 to <4 x i32>*
  %3975 = bitcast <2 x i64> %3970 to <8 x i16>
  %3976 = shufflevector <8 x i16> %3975, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3977 = sext <4 x i16> %3976 to <4 x i32>
  %3978 = bitcast <2 x i64>* %3907 to <4 x i32>*
  %3979 = shufflevector <2 x i64> %3882, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3980 = bitcast <2 x i64> %3882 to <8 x i16>
  %3981 = shufflevector <8 x i16> %3980, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3982 = sext <4 x i16> %3981 to <4 x i32>
  %3983 = bitcast <2 x i64>* %3889 to <4 x i32>*
  %3984 = bitcast <2 x i64> %3979 to <8 x i16>
  %3985 = shufflevector <8 x i16> %3984, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3986 = sext <4 x i16> %3985 to <4 x i32>
  %3987 = bitcast <2 x i64>* %3895 to <4 x i32>*
  %3988 = shufflevector <2 x i64> %3877, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %3989 = bitcast <2 x i64> %3877 to <8 x i16>
  %3990 = shufflevector <8 x i16> %3989, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3991 = sext <4 x i16> %3990 to <4 x i32>
  %3992 = bitcast <2 x i64> %3988 to <8 x i16>
  %3993 = shufflevector <8 x i16> %3992, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3994 = sext <4 x i16> %3993 to <4 x i32>
  %3995 = bitcast <2 x i64>* %3883 to <4 x i32>*
  %3996 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3991, i32 %3872) #8
  store <4 x i32> %3996, <4 x i32>* %3917, align 16
  %3997 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3994, i32 %3872) #8
  store <4 x i32> %3997, <4 x i32>* %3995, align 16
  %3998 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3982, i32 %3872) #8
  store <4 x i32> %3998, <4 x i32>* %3983, align 16
  %3999 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3986, i32 %3872) #8
  store <4 x i32> %3999, <4 x i32>* %3987, align 16
  %4000 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3973, i32 %3872) #8
  store <4 x i32> %4000, <4 x i32>* %3974, align 16
  %4001 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3977, i32 %3872) #8
  store <4 x i32> %4001, <4 x i32>* %3978, align 16
  %4002 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3965, i32 %3872) #8
  store <4 x i32> %4002, <4 x i32>* %3966, align 16
  %4003 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3969, i32 %3872) #8
  store <4 x i32> %4003, <4 x i32>* %3916, align 16
  %4004 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3921, i32 %3872) #8
  store <4 x i32> %4004, <4 x i32>* %3923, align 16
  %4005 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3926, i32 %3872) #8
  store <4 x i32> %4005, <4 x i32>* %3928, align 16
  %4006 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3932, i32 %3872) #8
  store <4 x i32> %4006, <4 x i32>* %3934, align 16
  %4007 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3937, i32 %3872) #8
  store <4 x i32> %4007, <4 x i32>* %3939, align 16
  %4008 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3943, i32 %3872) #8
  store <4 x i32> %4008, <4 x i32>* %3945, align 16
  %4009 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3948, i32 %3872) #8
  store <4 x i32> %4009, <4 x i32>* %3950, align 16
  %4010 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3954, i32 %3872) #8
  store <4 x i32> %4010, <4 x i32>* %3956, align 16
  %4011 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %3959, i32 %3872) #8
  store <4 x i32> %4011, <4 x i32>* %3961, align 16
  %4012 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  %4013 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %4014 = sext i8 %4013 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %3870, <2 x i64>* nonnull %4012, i32 %4014, i32 2)
  %4015 = getelementptr inbounds i8, i8* %10, i64 1
  %4016 = load i8, i8* %4015, align 1
  %4017 = sext i8 %4016 to i32
  %4018 = sub nsw i32 0, %4017
  %4019 = xor i32 %4017, -1
  %4020 = shl i32 1, %4019
  %4021 = insertelement <4 x i32> undef, i32 %4020, i32 0
  %4022 = shufflevector <4 x i32> %4021, <4 x i32> undef, <4 x i32> zeroinitializer
  %4023 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  %4024 = load <4 x i32>, <4 x i32>* %4023, align 16
  %4025 = add <4 x i32> %4022, %4024
  %4026 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %4027 = bitcast <2 x i64>* %4026 to <4 x i32>*
  %4028 = load <4 x i32>, <4 x i32>* %4027, align 16
  %4029 = add <4 x i32> %4022, %4028
  %4030 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %4031 = bitcast <2 x i64>* %4030 to <4 x i32>*
  %4032 = load <4 x i32>, <4 x i32>* %4031, align 16
  %4033 = add <4 x i32> %4022, %4032
  %4034 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %4035 = bitcast <2 x i64>* %4034 to <4 x i32>*
  %4036 = load <4 x i32>, <4 x i32>* %4035, align 16
  %4037 = add <4 x i32> %4036, %4022
  %4038 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %4039 = bitcast <2 x i64>* %4038 to <4 x i32>*
  %4040 = load <4 x i32>, <4 x i32>* %4039, align 16
  %4041 = add <4 x i32> %4040, %4022
  %4042 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %4043 = bitcast <2 x i64>* %4042 to <4 x i32>*
  %4044 = load <4 x i32>, <4 x i32>* %4043, align 16
  %4045 = add <4 x i32> %4044, %4022
  %4046 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %4047 = bitcast <2 x i64>* %4046 to <4 x i32>*
  %4048 = load <4 x i32>, <4 x i32>* %4047, align 16
  %4049 = add <4 x i32> %4048, %4022
  %4050 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %4051 = bitcast <2 x i64>* %4050 to <4 x i32>*
  %4052 = load <4 x i32>, <4 x i32>* %4051, align 16
  %4053 = add <4 x i32> %4052, %4022
  %4054 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %4055 = bitcast <2 x i64>* %4054 to <4 x i32>*
  %4056 = load <4 x i32>, <4 x i32>* %4055, align 16
  %4057 = add <4 x i32> %4056, %4022
  %4058 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %4059 = bitcast <2 x i64>* %4058 to <4 x i32>*
  %4060 = load <4 x i32>, <4 x i32>* %4059, align 16
  %4061 = add <4 x i32> %4060, %4022
  %4062 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %4063 = bitcast <2 x i64>* %4062 to <4 x i32>*
  %4064 = load <4 x i32>, <4 x i32>* %4063, align 16
  %4065 = add <4 x i32> %4064, %4022
  %4066 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %4067 = bitcast <2 x i64>* %4066 to <4 x i32>*
  %4068 = load <4 x i32>, <4 x i32>* %4067, align 16
  %4069 = add <4 x i32> %4068, %4022
  %4070 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %4071 = bitcast <2 x i64>* %4070 to <4 x i32>*
  %4072 = load <4 x i32>, <4 x i32>* %4071, align 16
  %4073 = add <4 x i32> %4072, %4022
  %4074 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %4075 = bitcast <2 x i64>* %4074 to <4 x i32>*
  %4076 = load <4 x i32>, <4 x i32>* %4075, align 16
  %4077 = add <4 x i32> %4076, %4022
  %4078 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %4079 = bitcast <2 x i64>* %4078 to <4 x i32>*
  %4080 = load <4 x i32>, <4 x i32>* %4079, align 16
  %4081 = add <4 x i32> %4080, %4022
  %4082 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %4083 = bitcast <2 x i64>* %4082 to <4 x i32>*
  %4084 = load <4 x i32>, <4 x i32>* %4083, align 16
  %4085 = add <4 x i32> %4084, %4022
  %4086 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4025, i32 %4018) #8
  store <4 x i32> %4086, <4 x i32>* %4023, align 16
  %4087 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4029, i32 %4018) #8
  store <4 x i32> %4087, <4 x i32>* %4027, align 16
  %4088 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4033, i32 %4018) #8
  store <4 x i32> %4088, <4 x i32>* %4031, align 16
  %4089 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4037, i32 %4018) #8
  store <4 x i32> %4089, <4 x i32>* %4035, align 16
  %4090 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4041, i32 %4018) #8
  store <4 x i32> %4090, <4 x i32>* %4039, align 16
  %4091 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4045, i32 %4018) #8
  store <4 x i32> %4091, <4 x i32>* %4043, align 16
  %4092 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4049, i32 %4018) #8
  store <4 x i32> %4092, <4 x i32>* %4047, align 16
  %4093 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4053, i32 %4018) #8
  store <4 x i32> %4093, <4 x i32>* %4051, align 16
  %4094 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4057, i32 %4018) #8
  store <4 x i32> %4094, <4 x i32>* %4055, align 16
  %4095 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4061, i32 %4018) #8
  store <4 x i32> %4095, <4 x i32>* %4059, align 16
  %4096 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4065, i32 %4018) #8
  store <4 x i32> %4096, <4 x i32>* %4063, align 16
  %4097 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4069, i32 %4018) #8
  store <4 x i32> %4097, <4 x i32>* %4067, align 16
  %4098 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4073, i32 %4018) #8
  store <4 x i32> %4098, <4 x i32>* %4071, align 16
  %4099 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4077, i32 %4018) #8
  store <4 x i32> %4099, <4 x i32>* %4075, align 16
  %4100 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4081, i32 %4018) #8
  store <4 x i32> %4100, <4 x i32>* %4079, align 16
  %4101 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4085, i32 %4018) #8
  store <4 x i32> %4101, <4 x i32>* %4083, align 16
  %4102 = shufflevector <4 x i32> %4086, <4 x i32> %4088, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4103 = bitcast <4 x i32> %4102 to <2 x i64>
  %4104 = shufflevector <4 x i32> %4086, <4 x i32> %4088, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4105 = bitcast <4 x i32> %4104 to <2 x i64>
  %4106 = shufflevector <4 x i32> %4090, <4 x i32> %4092, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4107 = bitcast <4 x i32> %4106 to <2 x i64>
  %4108 = shufflevector <4 x i32> %4090, <4 x i32> %4092, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4109 = bitcast <4 x i32> %4108 to <2 x i64>
  %4110 = shufflevector <2 x i64> %4103, <2 x i64> %4107, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4110, <2 x i64>* %3870, align 16
  %4111 = shufflevector <2 x i64> %4103, <2 x i64> %4107, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4111, <2 x i64>* %3889, align 16
  %4112 = shufflevector <2 x i64> %4105, <2 x i64> %4109, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4112, <2 x i64>* %3901, align 16
  %4113 = shufflevector <2 x i64> %4105, <2 x i64> %4109, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4113, <2 x i64>* %3912, align 16
  %4114 = shufflevector <4 x i32> %4087, <4 x i32> %4089, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4115 = bitcast <4 x i32> %4114 to <2 x i64>
  %4116 = shufflevector <4 x i32> %4087, <4 x i32> %4089, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4117 = bitcast <4 x i32> %4116 to <2 x i64>
  %4118 = shufflevector <4 x i32> %4091, <4 x i32> %4093, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4119 = bitcast <4 x i32> %4118 to <2 x i64>
  %4120 = shufflevector <4 x i32> %4091, <4 x i32> %4093, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4121 = bitcast <4 x i32> %4120 to <2 x i64>
  %4122 = shufflevector <2 x i64> %4115, <2 x i64> %4119, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4122, <2 x i64>* %3922, align 16
  %4123 = shufflevector <2 x i64> %4115, <2 x i64> %4119, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4123, <2 x i64>* %3933, align 16
  %4124 = shufflevector <2 x i64> %4117, <2 x i64> %4121, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4124, <2 x i64>* %3944, align 16
  %4125 = shufflevector <2 x i64> %4117, <2 x i64> %4121, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4125, <2 x i64>* %3955, align 16
  %4126 = shufflevector <4 x i32> %4094, <4 x i32> %4096, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4127 = bitcast <4 x i32> %4126 to <2 x i64>
  %4128 = shufflevector <4 x i32> %4094, <4 x i32> %4096, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4129 = bitcast <4 x i32> %4128 to <2 x i64>
  %4130 = shufflevector <4 x i32> %4098, <4 x i32> %4100, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4131 = bitcast <4 x i32> %4130 to <2 x i64>
  %4132 = shufflevector <4 x i32> %4098, <4 x i32> %4100, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4133 = bitcast <4 x i32> %4132 to <2 x i64>
  %4134 = shufflevector <2 x i64> %4127, <2 x i64> %4131, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4134, <2 x i64>* %3883, align 16
  %4135 = shufflevector <2 x i64> %4127, <2 x i64> %4131, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4135, <2 x i64>* %3895, align 16
  %4136 = shufflevector <2 x i64> %4129, <2 x i64> %4133, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4136, <2 x i64>* %3907, align 16
  %4137 = shufflevector <2 x i64> %4129, <2 x i64> %4133, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4137, <2 x i64>* %3915, align 16
  %4138 = shufflevector <4 x i32> %4095, <4 x i32> %4097, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4139 = bitcast <4 x i32> %4138 to <2 x i64>
  %4140 = shufflevector <4 x i32> %4095, <4 x i32> %4097, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4141 = bitcast <4 x i32> %4140 to <2 x i64>
  %4142 = shufflevector <4 x i32> %4099, <4 x i32> %4101, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4143 = bitcast <4 x i32> %4142 to <2 x i64>
  %4144 = shufflevector <4 x i32> %4099, <4 x i32> %4101, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4145 = bitcast <4 x i32> %4144 to <2 x i64>
  %4146 = shufflevector <2 x i64> %4139, <2 x i64> %4143, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4146, <2 x i64>* %3927, align 16
  %4147 = shufflevector <2 x i64> %4139, <2 x i64> %4143, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4147, <2 x i64>* %3938, align 16
  %4148 = shufflevector <2 x i64> %4141, <2 x i64> %4145, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4148, <2 x i64>* %3949, align 16
  %4149 = shufflevector <2 x i64> %4141, <2 x i64> %4145, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4149, <2 x i64>* %3960, align 16
  %4150 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 1), align 1
  %4151 = sext i8 %4150 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %3870, <2 x i64>* nonnull %4012, i32 %4151, i32 2)
  %4152 = load <4 x i32>, <4 x i32>* %4023, align 16
  %4153 = load <4 x i32>, <4 x i32>* %4031, align 16
  %4154 = shufflevector <4 x i32> %4152, <4 x i32> %4153, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4155 = bitcast <4 x i32> %4154 to <2 x i64>
  %4156 = shufflevector <4 x i32> %4152, <4 x i32> %4153, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4157 = bitcast <4 x i32> %4156 to <2 x i64>
  %4158 = load <4 x i32>, <4 x i32>* %4039, align 16
  %4159 = load <4 x i32>, <4 x i32>* %4047, align 16
  %4160 = shufflevector <4 x i32> %4158, <4 x i32> %4159, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4161 = bitcast <4 x i32> %4160 to <2 x i64>
  %4162 = shufflevector <4 x i32> %4158, <4 x i32> %4159, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4163 = bitcast <4 x i32> %4162 to <2 x i64>
  %4164 = shufflevector <2 x i64> %4155, <2 x i64> %4161, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4164, <2 x i64>* %3870, align 16
  %4165 = shufflevector <2 x i64> %4155, <2 x i64> %4161, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4165, <2 x i64>* %3889, align 16
  %4166 = shufflevector <2 x i64> %4157, <2 x i64> %4163, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4166, <2 x i64>* %3901, align 16
  %4167 = shufflevector <2 x i64> %4157, <2 x i64> %4163, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4167, <2 x i64>* %3912, align 16
  %4168 = load <4 x i32>, <4 x i32>* %4027, align 16
  %4169 = load <4 x i32>, <4 x i32>* %4035, align 16
  %4170 = shufflevector <4 x i32> %4168, <4 x i32> %4169, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4171 = bitcast <4 x i32> %4170 to <2 x i64>
  %4172 = shufflevector <4 x i32> %4168, <4 x i32> %4169, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4173 = bitcast <4 x i32> %4172 to <2 x i64>
  %4174 = load <4 x i32>, <4 x i32>* %4043, align 16
  %4175 = load <4 x i32>, <4 x i32>* %4051, align 16
  %4176 = shufflevector <4 x i32> %4174, <4 x i32> %4175, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4177 = bitcast <4 x i32> %4176 to <2 x i64>
  %4178 = shufflevector <4 x i32> %4174, <4 x i32> %4175, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4179 = bitcast <4 x i32> %4178 to <2 x i64>
  %4180 = shufflevector <2 x i64> %4171, <2 x i64> %4177, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4180, <2 x i64>* %3922, align 16
  %4181 = shufflevector <2 x i64> %4171, <2 x i64> %4177, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4181, <2 x i64>* %3933, align 16
  %4182 = shufflevector <2 x i64> %4173, <2 x i64> %4179, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4182, <2 x i64>* %3944, align 16
  %4183 = shufflevector <2 x i64> %4173, <2 x i64> %4179, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4183, <2 x i64>* %3955, align 16
  %4184 = load <4 x i32>, <4 x i32>* %4055, align 16
  %4185 = load <4 x i32>, <4 x i32>* %4063, align 16
  %4186 = shufflevector <4 x i32> %4184, <4 x i32> %4185, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4187 = bitcast <4 x i32> %4186 to <2 x i64>
  %4188 = shufflevector <4 x i32> %4184, <4 x i32> %4185, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4189 = bitcast <4 x i32> %4188 to <2 x i64>
  %4190 = load <4 x i32>, <4 x i32>* %4071, align 16
  %4191 = load <4 x i32>, <4 x i32>* %4079, align 16
  %4192 = shufflevector <4 x i32> %4190, <4 x i32> %4191, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4193 = bitcast <4 x i32> %4192 to <2 x i64>
  %4194 = shufflevector <4 x i32> %4190, <4 x i32> %4191, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4195 = bitcast <4 x i32> %4194 to <2 x i64>
  %4196 = shufflevector <2 x i64> %4187, <2 x i64> %4193, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4196, <2 x i64>* %3883, align 16
  %4197 = shufflevector <2 x i64> %4187, <2 x i64> %4193, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4197, <2 x i64>* %3895, align 16
  %4198 = shufflevector <2 x i64> %4189, <2 x i64> %4195, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4198, <2 x i64>* %3907, align 16
  %4199 = shufflevector <2 x i64> %4189, <2 x i64> %4195, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4199, <2 x i64>* %3915, align 16
  %4200 = load <4 x i32>, <4 x i32>* %4059, align 16
  %4201 = load <4 x i32>, <4 x i32>* %4067, align 16
  %4202 = shufflevector <4 x i32> %4200, <4 x i32> %4201, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4203 = bitcast <4 x i32> %4202 to <2 x i64>
  %4204 = shufflevector <4 x i32> %4200, <4 x i32> %4201, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4205 = bitcast <4 x i32> %4204 to <2 x i64>
  %4206 = load <4 x i32>, <4 x i32>* %4075, align 16
  %4207 = load <4 x i32>, <4 x i32>* %4083, align 16
  %4208 = shufflevector <4 x i32> %4206, <4 x i32> %4207, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4209 = bitcast <4 x i32> %4208 to <2 x i64>
  %4210 = shufflevector <4 x i32> %4206, <4 x i32> %4207, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4211 = bitcast <4 x i32> %4210 to <2 x i64>
  %4212 = shufflevector <2 x i64> %4203, <2 x i64> %4209, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4212, <2 x i64>* %3927, align 16
  %4213 = shufflevector <2 x i64> %4203, <2 x i64> %4209, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4213, <2 x i64>* %3938, align 16
  %4214 = shufflevector <2 x i64> %4205, <2 x i64> %4211, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4214, <2 x i64>* %3949, align 16
  %4215 = shufflevector <2 x i64> %4205, <2 x i64> %4211, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4215, <2 x i64>* %3960, align 16
  br label %7057

4216:                                             ; preds = %5
  %4217 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %4218 = load i8, i8* %10, align 1
  %4219 = sext i8 %4218 to i32
  %4220 = bitcast i16* %0 to <2 x i64>*
  %4221 = load <2 x i64>, <2 x i64>* %4220, align 16
  store <2 x i64> %4221, <2 x i64>* %4217, align 16
  %4222 = sext i32 %2 to i64
  %4223 = getelementptr inbounds i16, i16* %0, i64 %4222
  %4224 = bitcast i16* %4223 to <2 x i64>*
  %4225 = load <2 x i64>, <2 x i64>* %4224, align 16
  %4226 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %4225, <2 x i64>* %4226, align 16
  %4227 = shl nsw i32 %2, 1
  %4228 = sext i32 %4227 to i64
  %4229 = getelementptr inbounds i16, i16* %0, i64 %4228
  %4230 = bitcast i16* %4229 to <2 x i64>*
  %4231 = load <2 x i64>, <2 x i64>* %4230, align 16
  %4232 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %4231, <2 x i64>* %4232, align 16
  %4233 = mul nsw i32 %2, 3
  %4234 = sext i32 %4233 to i64
  %4235 = getelementptr inbounds i16, i16* %0, i64 %4234
  %4236 = bitcast i16* %4235 to <2 x i64>*
  %4237 = load <2 x i64>, <2 x i64>* %4236, align 16
  %4238 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %4237, <2 x i64>* %4238, align 16
  %4239 = shl nsw i32 %2, 2
  %4240 = sext i32 %4239 to i64
  %4241 = getelementptr inbounds i16, i16* %0, i64 %4240
  %4242 = bitcast i16* %4241 to <2 x i64>*
  %4243 = load <2 x i64>, <2 x i64>* %4242, align 16
  %4244 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %4243, <2 x i64>* %4244, align 16
  %4245 = mul nsw i32 %2, 5
  %4246 = sext i32 %4245 to i64
  %4247 = getelementptr inbounds i16, i16* %0, i64 %4246
  %4248 = bitcast i16* %4247 to <2 x i64>*
  %4249 = load <2 x i64>, <2 x i64>* %4248, align 16
  %4250 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %4249, <2 x i64>* %4250, align 16
  %4251 = mul nsw i32 %2, 6
  %4252 = sext i32 %4251 to i64
  %4253 = getelementptr inbounds i16, i16* %0, i64 %4252
  %4254 = bitcast i16* %4253 to <2 x i64>*
  %4255 = load <2 x i64>, <2 x i64>* %4254, align 16
  %4256 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %4255, <2 x i64>* %4256, align 16
  %4257 = mul nsw i32 %2, 7
  %4258 = sext i32 %4257 to i64
  %4259 = getelementptr inbounds i16, i16* %0, i64 %4258
  %4260 = bitcast i16* %4259 to <2 x i64>*
  %4261 = load <2 x i64>, <2 x i64>* %4260, align 16
  %4262 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %4263 = bitcast <2 x i64>* %4262 to <4 x i32>*
  %4264 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %4265 = shufflevector <2 x i64> %4243, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4266 = bitcast <2 x i64> %4243 to <8 x i16>
  %4267 = shufflevector <8 x i16> %4266, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4268 = sext <4 x i16> %4267 to <4 x i32>
  %4269 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %4270 = bitcast <2 x i64>* %4269 to <4 x i32>*
  %4271 = bitcast <2 x i64> %4265 to <8 x i16>
  %4272 = shufflevector <8 x i16> %4271, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4273 = sext <4 x i16> %4272 to <4 x i32>
  %4274 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %4275 = bitcast <2 x i64>* %4274 to <4 x i32>*
  %4276 = shufflevector <2 x i64> %4249, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4277 = bitcast <2 x i64> %4249 to <8 x i16>
  %4278 = shufflevector <8 x i16> %4277, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4279 = sext <4 x i16> %4278 to <4 x i32>
  %4280 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %4281 = bitcast <2 x i64>* %4280 to <4 x i32>*
  %4282 = bitcast <2 x i64> %4276 to <8 x i16>
  %4283 = shufflevector <8 x i16> %4282, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4284 = sext <4 x i16> %4283 to <4 x i32>
  %4285 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %4286 = bitcast <2 x i64>* %4285 to <4 x i32>*
  %4287 = shufflevector <2 x i64> %4255, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4288 = bitcast <2 x i64> %4255 to <8 x i16>
  %4289 = shufflevector <8 x i16> %4288, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4290 = sext <4 x i16> %4289 to <4 x i32>
  %4291 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %4292 = bitcast <2 x i64>* %4291 to <4 x i32>*
  %4293 = bitcast <2 x i64> %4287 to <8 x i16>
  %4294 = shufflevector <8 x i16> %4293, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4295 = sext <4 x i16> %4294 to <4 x i32>
  %4296 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %4297 = bitcast <2 x i64>* %4296 to <4 x i32>*
  %4298 = shufflevector <2 x i64> %4261, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4299 = bitcast <2 x i64> %4261 to <8 x i16>
  %4300 = shufflevector <8 x i16> %4299, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4301 = sext <4 x i16> %4300 to <4 x i32>
  %4302 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %4303 = bitcast <2 x i64>* %4302 to <4 x i32>*
  %4304 = bitcast <2 x i64> %4298 to <8 x i16>
  %4305 = shufflevector <8 x i16> %4304, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4306 = sext <4 x i16> %4305 to <4 x i32>
  %4307 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %4308 = bitcast <2 x i64>* %4307 to <4 x i32>*
  %4309 = shufflevector <2 x i64> %4237, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4310 = bitcast <2 x i64> %4237 to <8 x i16>
  %4311 = shufflevector <8 x i16> %4310, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4312 = sext <4 x i16> %4311 to <4 x i32>
  %4313 = bitcast <2 x i64>* %4256 to <4 x i32>*
  %4314 = bitcast <2 x i64> %4309 to <8 x i16>
  %4315 = shufflevector <8 x i16> %4314, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4316 = sext <4 x i16> %4315 to <4 x i32>
  %4317 = shufflevector <2 x i64> %4231, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4318 = bitcast <2 x i64> %4231 to <8 x i16>
  %4319 = shufflevector <8 x i16> %4318, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4320 = sext <4 x i16> %4319 to <4 x i32>
  %4321 = bitcast <2 x i64>* %4244 to <4 x i32>*
  %4322 = bitcast <2 x i64> %4317 to <8 x i16>
  %4323 = shufflevector <8 x i16> %4322, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4324 = sext <4 x i16> %4323 to <4 x i32>
  %4325 = bitcast <2 x i64>* %4250 to <4 x i32>*
  %4326 = shufflevector <2 x i64> %4225, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4327 = bitcast <2 x i64> %4225 to <8 x i16>
  %4328 = shufflevector <8 x i16> %4327, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4329 = sext <4 x i16> %4328 to <4 x i32>
  %4330 = bitcast <2 x i64>* %4232 to <4 x i32>*
  %4331 = bitcast <2 x i64> %4326 to <8 x i16>
  %4332 = shufflevector <8 x i16> %4331, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4333 = sext <4 x i16> %4332 to <4 x i32>
  %4334 = bitcast <2 x i64>* %4238 to <4 x i32>*
  %4335 = shufflevector <2 x i64> %4221, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4336 = bitcast <2 x i64> %4221 to <8 x i16>
  %4337 = shufflevector <8 x i16> %4336, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4338 = sext <4 x i16> %4337 to <4 x i32>
  %4339 = bitcast <2 x i64> %4335 to <8 x i16>
  %4340 = shufflevector <8 x i16> %4339, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4341 = sext <4 x i16> %4340 to <4 x i32>
  %4342 = bitcast <2 x i64>* %4226 to <4 x i32>*
  %4343 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4338, i32 %4219) #8
  store <4 x i32> %4343, <4 x i32>* %4264, align 16
  %4344 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4341, i32 %4219) #8
  store <4 x i32> %4344, <4 x i32>* %4342, align 16
  %4345 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4329, i32 %4219) #8
  store <4 x i32> %4345, <4 x i32>* %4330, align 16
  %4346 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4333, i32 %4219) #8
  store <4 x i32> %4346, <4 x i32>* %4334, align 16
  %4347 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4320, i32 %4219) #8
  store <4 x i32> %4347, <4 x i32>* %4321, align 16
  %4348 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4324, i32 %4219) #8
  store <4 x i32> %4348, <4 x i32>* %4325, align 16
  %4349 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4312, i32 %4219) #8
  store <4 x i32> %4349, <4 x i32>* %4313, align 16
  %4350 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4316, i32 %4219) #8
  store <4 x i32> %4350, <4 x i32>* %4263, align 16
  %4351 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4268, i32 %4219) #8
  store <4 x i32> %4351, <4 x i32>* %4270, align 16
  %4352 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4273, i32 %4219) #8
  store <4 x i32> %4352, <4 x i32>* %4275, align 16
  %4353 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4279, i32 %4219) #8
  store <4 x i32> %4353, <4 x i32>* %4281, align 16
  %4354 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4284, i32 %4219) #8
  store <4 x i32> %4354, <4 x i32>* %4286, align 16
  %4355 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4290, i32 %4219) #8
  store <4 x i32> %4355, <4 x i32>* %4292, align 16
  %4356 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4295, i32 %4219) #8
  store <4 x i32> %4356, <4 x i32>* %4297, align 16
  %4357 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4301, i32 %4219) #8
  store <4 x i32> %4357, <4 x i32>* %4303, align 16
  %4358 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4306, i32 %4219) #8
  store <4 x i32> %4358, <4 x i32>* %4308, align 16
  %4359 = shl <4 x i32> %4343, <i32 1, i32 1, i32 1, i32 1>
  %4360 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  store <4 x i32> %4359, <4 x i32>* %4360, align 16
  %4361 = shl <4 x i32> %4344, <i32 1, i32 1, i32 1, i32 1>
  %4362 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %4363 = bitcast <2 x i64>* %4362 to <4 x i32>*
  store <4 x i32> %4361, <4 x i32>* %4363, align 16
  %4364 = shl <4 x i32> %4345, <i32 1, i32 1, i32 1, i32 1>
  %4365 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %4366 = bitcast <2 x i64>* %4365 to <4 x i32>*
  store <4 x i32> %4364, <4 x i32>* %4366, align 16
  %4367 = shl <4 x i32> %4346, <i32 1, i32 1, i32 1, i32 1>
  %4368 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %4369 = bitcast <2 x i64>* %4368 to <4 x i32>*
  store <4 x i32> %4367, <4 x i32>* %4369, align 16
  %4370 = shl <4 x i32> %4347, <i32 1, i32 1, i32 1, i32 1>
  %4371 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %4372 = bitcast <2 x i64>* %4371 to <4 x i32>*
  store <4 x i32> %4370, <4 x i32>* %4372, align 16
  %4373 = shl <4 x i32> %4348, <i32 1, i32 1, i32 1, i32 1>
  %4374 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %4375 = bitcast <2 x i64>* %4374 to <4 x i32>*
  store <4 x i32> %4373, <4 x i32>* %4375, align 16
  %4376 = shl <4 x i32> %4349, <i32 1, i32 1, i32 1, i32 1>
  %4377 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %4378 = bitcast <2 x i64>* %4377 to <4 x i32>*
  store <4 x i32> %4376, <4 x i32>* %4378, align 16
  %4379 = shl <4 x i32> %4350, <i32 1, i32 1, i32 1, i32 1>
  %4380 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %4381 = bitcast <2 x i64>* %4380 to <4 x i32>*
  store <4 x i32> %4379, <4 x i32>* %4381, align 16
  %4382 = shl <4 x i32> %4351, <i32 1, i32 1, i32 1, i32 1>
  %4383 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %4384 = bitcast <2 x i64>* %4383 to <4 x i32>*
  store <4 x i32> %4382, <4 x i32>* %4384, align 16
  %4385 = shl <4 x i32> %4352, <i32 1, i32 1, i32 1, i32 1>
  %4386 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %4387 = bitcast <2 x i64>* %4386 to <4 x i32>*
  store <4 x i32> %4385, <4 x i32>* %4387, align 16
  %4388 = shl <4 x i32> %4353, <i32 1, i32 1, i32 1, i32 1>
  %4389 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %4390 = bitcast <2 x i64>* %4389 to <4 x i32>*
  store <4 x i32> %4388, <4 x i32>* %4390, align 16
  %4391 = shl <4 x i32> %4354, <i32 1, i32 1, i32 1, i32 1>
  %4392 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %4393 = bitcast <2 x i64>* %4392 to <4 x i32>*
  store <4 x i32> %4391, <4 x i32>* %4393, align 16
  %4394 = shl <4 x i32> %4355, <i32 1, i32 1, i32 1, i32 1>
  %4395 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %4396 = bitcast <2 x i64>* %4395 to <4 x i32>*
  store <4 x i32> %4394, <4 x i32>* %4396, align 16
  %4397 = shl <4 x i32> %4356, <i32 1, i32 1, i32 1, i32 1>
  %4398 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %4399 = bitcast <2 x i64>* %4398 to <4 x i32>*
  store <4 x i32> %4397, <4 x i32>* %4399, align 16
  %4400 = shl <4 x i32> %4357, <i32 1, i32 1, i32 1, i32 1>
  %4401 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %4402 = bitcast <2 x i64>* %4401 to <4 x i32>*
  store <4 x i32> %4400, <4 x i32>* %4402, align 16
  %4403 = shl <4 x i32> %4358, <i32 1, i32 1, i32 1, i32 1>
  %4404 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %4405 = bitcast <2 x i64>* %4404 to <4 x i32>*
  store <4 x i32> %4403, <4 x i32>* %4405, align 16
  %4406 = getelementptr inbounds i8, i8* %10, i64 1
  %4407 = load i8, i8* %4406, align 1
  %4408 = sext i8 %4407 to i32
  %4409 = sub nsw i32 0, %4408
  %4410 = xor i32 %4408, -1
  %4411 = shl i32 1, %4410
  %4412 = insertelement <4 x i32> undef, i32 %4411, i32 0
  %4413 = shufflevector <4 x i32> %4412, <4 x i32> undef, <4 x i32> zeroinitializer
  %4414 = add <4 x i32> %4413, %4359
  %4415 = add <4 x i32> %4413, %4361
  %4416 = add <4 x i32> %4413, %4364
  %4417 = add <4 x i32> %4367, %4413
  %4418 = add <4 x i32> %4370, %4413
  %4419 = add <4 x i32> %4373, %4413
  %4420 = add <4 x i32> %4376, %4413
  %4421 = add <4 x i32> %4379, %4413
  %4422 = add <4 x i32> %4382, %4413
  %4423 = add <4 x i32> %4385, %4413
  %4424 = add <4 x i32> %4388, %4413
  %4425 = add <4 x i32> %4391, %4413
  %4426 = add <4 x i32> %4394, %4413
  %4427 = add <4 x i32> %4397, %4413
  %4428 = add <4 x i32> %4400, %4413
  %4429 = add <4 x i32> %4403, %4413
  %4430 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4414, i32 %4409) #8
  %4431 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4415, i32 %4409) #8
  %4432 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4416, i32 %4409) #8
  %4433 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4417, i32 %4409) #8
  store <4 x i32> %4433, <4 x i32>* %4369, align 16
  %4434 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4418, i32 %4409) #8
  store <4 x i32> %4434, <4 x i32>* %4372, align 16
  %4435 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4419, i32 %4409) #8
  store <4 x i32> %4435, <4 x i32>* %4375, align 16
  %4436 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4420, i32 %4409) #8
  store <4 x i32> %4436, <4 x i32>* %4378, align 16
  %4437 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4421, i32 %4409) #8
  store <4 x i32> %4437, <4 x i32>* %4381, align 16
  %4438 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4422, i32 %4409) #8
  store <4 x i32> %4438, <4 x i32>* %4384, align 16
  %4439 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4423, i32 %4409) #8
  store <4 x i32> %4439, <4 x i32>* %4387, align 16
  %4440 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4424, i32 %4409) #8
  store <4 x i32> %4440, <4 x i32>* %4390, align 16
  %4441 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4425, i32 %4409) #8
  store <4 x i32> %4441, <4 x i32>* %4393, align 16
  %4442 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4426, i32 %4409) #8
  store <4 x i32> %4442, <4 x i32>* %4396, align 16
  %4443 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4427, i32 %4409) #8
  store <4 x i32> %4443, <4 x i32>* %4399, align 16
  %4444 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4428, i32 %4409) #8
  store <4 x i32> %4444, <4 x i32>* %4402, align 16
  %4445 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4429, i32 %4409) #8
  store <4 x i32> %4445, <4 x i32>* %4405, align 16
  %4446 = shufflevector <4 x i32> %4430, <4 x i32> %4432, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4447 = bitcast <4 x i32> %4446 to <2 x i64>
  %4448 = shufflevector <4 x i32> %4430, <4 x i32> %4432, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4449 = bitcast <4 x i32> %4448 to <2 x i64>
  %4450 = shufflevector <4 x i32> %4434, <4 x i32> %4436, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4451 = bitcast <4 x i32> %4450 to <2 x i64>
  %4452 = shufflevector <4 x i32> %4434, <4 x i32> %4436, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4453 = bitcast <4 x i32> %4452 to <2 x i64>
  %4454 = shufflevector <2 x i64> %4447, <2 x i64> %4451, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4454, <2 x i64>* %4217, align 16
  %4455 = shufflevector <2 x i64> %4447, <2 x i64> %4451, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4455, <2 x i64>* %4232, align 16
  %4456 = shufflevector <2 x i64> %4449, <2 x i64> %4453, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4456, <2 x i64>* %4244, align 16
  %4457 = shufflevector <2 x i64> %4449, <2 x i64> %4453, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4457, <2 x i64>* %4256, align 16
  %4458 = shufflevector <4 x i32> %4431, <4 x i32> %4433, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4459 = bitcast <4 x i32> %4458 to <2 x i64>
  %4460 = shufflevector <4 x i32> %4431, <4 x i32> %4433, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4461 = bitcast <4 x i32> %4460 to <2 x i64>
  %4462 = shufflevector <4 x i32> %4435, <4 x i32> %4437, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4463 = bitcast <4 x i32> %4462 to <2 x i64>
  %4464 = shufflevector <4 x i32> %4435, <4 x i32> %4437, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4465 = bitcast <4 x i32> %4464 to <2 x i64>
  %4466 = shufflevector <2 x i64> %4459, <2 x i64> %4463, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4466, <2 x i64>* %4269, align 16
  %4467 = shufflevector <2 x i64> %4459, <2 x i64> %4463, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4467, <2 x i64>* %4280, align 16
  %4468 = shufflevector <2 x i64> %4461, <2 x i64> %4465, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4468, <2 x i64>* %4291, align 16
  %4469 = shufflevector <2 x i64> %4461, <2 x i64> %4465, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4469, <2 x i64>* %4302, align 16
  %4470 = shufflevector <4 x i32> %4438, <4 x i32> %4440, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4471 = bitcast <4 x i32> %4470 to <2 x i64>
  %4472 = shufflevector <4 x i32> %4438, <4 x i32> %4440, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4473 = bitcast <4 x i32> %4472 to <2 x i64>
  %4474 = shufflevector <4 x i32> %4442, <4 x i32> %4444, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4475 = bitcast <4 x i32> %4474 to <2 x i64>
  %4476 = shufflevector <4 x i32> %4442, <4 x i32> %4444, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4477 = bitcast <4 x i32> %4476 to <2 x i64>
  %4478 = shufflevector <2 x i64> %4471, <2 x i64> %4475, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4478, <2 x i64>* %4226, align 16
  %4479 = shufflevector <2 x i64> %4471, <2 x i64> %4475, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4479, <2 x i64>* %4238, align 16
  %4480 = shufflevector <2 x i64> %4473, <2 x i64> %4477, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4480, <2 x i64>* %4250, align 16
  %4481 = shufflevector <2 x i64> %4473, <2 x i64> %4477, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4481, <2 x i64>* %4262, align 16
  %4482 = shufflevector <4 x i32> %4439, <4 x i32> %4441, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4483 = bitcast <4 x i32> %4482 to <2 x i64>
  %4484 = shufflevector <4 x i32> %4439, <4 x i32> %4441, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4485 = bitcast <4 x i32> %4484 to <2 x i64>
  %4486 = shufflevector <4 x i32> %4443, <4 x i32> %4445, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4487 = bitcast <4 x i32> %4486 to <2 x i64>
  %4488 = shufflevector <4 x i32> %4443, <4 x i32> %4445, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4489 = bitcast <4 x i32> %4488 to <2 x i64>
  %4490 = shufflevector <2 x i64> %4483, <2 x i64> %4487, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4490, <2 x i64>* %4274, align 16
  %4491 = shufflevector <2 x i64> %4483, <2 x i64> %4487, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4491, <2 x i64>* %4285, align 16
  %4492 = shufflevector <2 x i64> %4485, <2 x i64> %4489, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4492, <2 x i64>* %4296, align 16
  %4493 = shufflevector <2 x i64> %4485, <2 x i64> %4489, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4493, <2 x i64>* %4307, align 16
  %4494 = bitcast <2 x i64> %4454 to <4 x i32>
  %4495 = shl <4 x i32> %4494, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4495, <4 x i32>* %4360, align 16
  %4496 = bitcast <2 x i64> %4478 to <4 x i32>
  %4497 = shl <4 x i32> %4496, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4497, <4 x i32>* %4363, align 16
  %4498 = bitcast <2 x i64> %4455 to <4 x i32>
  %4499 = shl <4 x i32> %4498, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4499, <4 x i32>* %4366, align 16
  %4500 = bitcast <2 x i64> %4479 to <4 x i32>
  %4501 = shl <4 x i32> %4500, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4501, <4 x i32>* %4369, align 16
  %4502 = bitcast <2 x i64> %4456 to <4 x i32>
  %4503 = shl <4 x i32> %4502, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4503, <4 x i32>* %4372, align 16
  %4504 = bitcast <2 x i64> %4480 to <4 x i32>
  %4505 = shl <4 x i32> %4504, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4505, <4 x i32>* %4375, align 16
  %4506 = bitcast <2 x i64> %4457 to <4 x i32>
  %4507 = shl <4 x i32> %4506, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4507, <4 x i32>* %4378, align 16
  %4508 = bitcast <2 x i64> %4481 to <4 x i32>
  %4509 = shl <4 x i32> %4508, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4509, <4 x i32>* %4381, align 16
  %4510 = bitcast <2 x i64> %4466 to <4 x i32>
  %4511 = shl <4 x i32> %4510, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4511, <4 x i32>* %4384, align 16
  %4512 = bitcast <2 x i64> %4490 to <4 x i32>
  %4513 = shl <4 x i32> %4512, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4513, <4 x i32>* %4387, align 16
  %4514 = bitcast <2 x i64> %4467 to <4 x i32>
  %4515 = shl <4 x i32> %4514, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4515, <4 x i32>* %4390, align 16
  %4516 = bitcast <2 x i64> %4491 to <4 x i32>
  %4517 = shl <4 x i32> %4516, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4517, <4 x i32>* %4393, align 16
  %4518 = bitcast <2 x i64> %4468 to <4 x i32>
  %4519 = shl <4 x i32> %4518, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4519, <4 x i32>* %4396, align 16
  %4520 = bitcast <2 x i64> %4492 to <4 x i32>
  %4521 = shl <4 x i32> %4520, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4521, <4 x i32>* %4399, align 16
  %4522 = bitcast <2 x i64> %4469 to <4 x i32>
  %4523 = shl <4 x i32> %4522, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4523, <4 x i32>* %4402, align 16
  %4524 = bitcast <2 x i64> %4493 to <4 x i32>
  %4525 = shl <4 x i32> %4524, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %4525, <4 x i32>* %4405, align 16
  %4526 = shufflevector <4 x i32> %4495, <4 x i32> %4499, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4527 = bitcast <4 x i32> %4526 to <2 x i64>
  %4528 = shufflevector <4 x i32> %4495, <4 x i32> %4499, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4529 = bitcast <4 x i32> %4528 to <2 x i64>
  %4530 = shufflevector <4 x i32> %4503, <4 x i32> %4507, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4531 = bitcast <4 x i32> %4530 to <2 x i64>
  %4532 = shufflevector <4 x i32> %4503, <4 x i32> %4507, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4533 = bitcast <4 x i32> %4532 to <2 x i64>
  %4534 = shufflevector <2 x i64> %4527, <2 x i64> %4531, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4534, <2 x i64>* %4217, align 16
  %4535 = shufflevector <2 x i64> %4527, <2 x i64> %4531, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4535, <2 x i64>* %4232, align 16
  %4536 = shufflevector <2 x i64> %4529, <2 x i64> %4533, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4536, <2 x i64>* %4244, align 16
  %4537 = shufflevector <2 x i64> %4529, <2 x i64> %4533, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4537, <2 x i64>* %4256, align 16
  %4538 = shufflevector <4 x i32> %4497, <4 x i32> %4501, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4539 = bitcast <4 x i32> %4538 to <2 x i64>
  %4540 = shufflevector <4 x i32> %4497, <4 x i32> %4501, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4541 = bitcast <4 x i32> %4540 to <2 x i64>
  %4542 = shufflevector <4 x i32> %4505, <4 x i32> %4509, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4543 = bitcast <4 x i32> %4542 to <2 x i64>
  %4544 = shufflevector <4 x i32> %4505, <4 x i32> %4509, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4545 = bitcast <4 x i32> %4544 to <2 x i64>
  %4546 = shufflevector <2 x i64> %4539, <2 x i64> %4543, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4546, <2 x i64>* %4269, align 16
  %4547 = shufflevector <2 x i64> %4539, <2 x i64> %4543, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4547, <2 x i64>* %4280, align 16
  %4548 = shufflevector <2 x i64> %4541, <2 x i64> %4545, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4548, <2 x i64>* %4291, align 16
  %4549 = shufflevector <2 x i64> %4541, <2 x i64> %4545, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4549, <2 x i64>* %4302, align 16
  %4550 = shufflevector <4 x i32> %4511, <4 x i32> %4515, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4551 = bitcast <4 x i32> %4550 to <2 x i64>
  %4552 = shufflevector <4 x i32> %4511, <4 x i32> %4515, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4553 = bitcast <4 x i32> %4552 to <2 x i64>
  %4554 = shufflevector <4 x i32> %4519, <4 x i32> %4523, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4555 = bitcast <4 x i32> %4554 to <2 x i64>
  %4556 = shufflevector <4 x i32> %4519, <4 x i32> %4523, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4557 = bitcast <4 x i32> %4556 to <2 x i64>
  %4558 = shufflevector <2 x i64> %4551, <2 x i64> %4555, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4558, <2 x i64>* %4226, align 16
  %4559 = shufflevector <2 x i64> %4551, <2 x i64> %4555, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4559, <2 x i64>* %4238, align 16
  %4560 = shufflevector <2 x i64> %4553, <2 x i64> %4557, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4560, <2 x i64>* %4250, align 16
  %4561 = shufflevector <2 x i64> %4553, <2 x i64> %4557, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4561, <2 x i64>* %4262, align 16
  %4562 = shufflevector <4 x i32> %4513, <4 x i32> %4517, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4563 = bitcast <4 x i32> %4562 to <2 x i64>
  %4564 = shufflevector <4 x i32> %4513, <4 x i32> %4517, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4565 = bitcast <4 x i32> %4564 to <2 x i64>
  %4566 = shufflevector <4 x i32> %4521, <4 x i32> %4525, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4567 = bitcast <4 x i32> %4566 to <2 x i64>
  %4568 = shufflevector <4 x i32> %4521, <4 x i32> %4525, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4569 = bitcast <4 x i32> %4568 to <2 x i64>
  %4570 = shufflevector <2 x i64> %4563, <2 x i64> %4567, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4570, <2 x i64>* %4274, align 16
  %4571 = shufflevector <2 x i64> %4563, <2 x i64> %4567, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4571, <2 x i64>* %4285, align 16
  %4572 = shufflevector <2 x i64> %4565, <2 x i64> %4569, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4572, <2 x i64>* %4296, align 16
  %4573 = shufflevector <2 x i64> %4565, <2 x i64> %4569, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4573, <2 x i64>* %4307, align 16
  br label %7057

4574:                                             ; preds = %5
  %4575 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %4576 = load i8, i8* %10, align 1
  %4577 = sext i8 %4576 to i32
  %4578 = bitcast i16* %0 to <2 x i64>*
  %4579 = load <2 x i64>, <2 x i64>* %4578, align 16
  store <2 x i64> %4579, <2 x i64>* %4575, align 16
  %4580 = sext i32 %2 to i64
  %4581 = getelementptr inbounds i16, i16* %0, i64 %4580
  %4582 = bitcast i16* %4581 to <2 x i64>*
  %4583 = load <2 x i64>, <2 x i64>* %4582, align 16
  %4584 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %4583, <2 x i64>* %4584, align 16
  %4585 = shl nsw i32 %2, 1
  %4586 = sext i32 %4585 to i64
  %4587 = getelementptr inbounds i16, i16* %0, i64 %4586
  %4588 = bitcast i16* %4587 to <2 x i64>*
  %4589 = load <2 x i64>, <2 x i64>* %4588, align 16
  %4590 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %4589, <2 x i64>* %4590, align 16
  %4591 = mul nsw i32 %2, 3
  %4592 = sext i32 %4591 to i64
  %4593 = getelementptr inbounds i16, i16* %0, i64 %4592
  %4594 = bitcast i16* %4593 to <2 x i64>*
  %4595 = load <2 x i64>, <2 x i64>* %4594, align 16
  %4596 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %4595, <2 x i64>* %4596, align 16
  %4597 = shl nsw i32 %2, 2
  %4598 = sext i32 %4597 to i64
  %4599 = getelementptr inbounds i16, i16* %0, i64 %4598
  %4600 = bitcast i16* %4599 to <2 x i64>*
  %4601 = load <2 x i64>, <2 x i64>* %4600, align 16
  %4602 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %4601, <2 x i64>* %4602, align 16
  %4603 = mul nsw i32 %2, 5
  %4604 = sext i32 %4603 to i64
  %4605 = getelementptr inbounds i16, i16* %0, i64 %4604
  %4606 = bitcast i16* %4605 to <2 x i64>*
  %4607 = load <2 x i64>, <2 x i64>* %4606, align 16
  %4608 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %4607, <2 x i64>* %4608, align 16
  %4609 = mul nsw i32 %2, 6
  %4610 = sext i32 %4609 to i64
  %4611 = getelementptr inbounds i16, i16* %0, i64 %4610
  %4612 = bitcast i16* %4611 to <2 x i64>*
  %4613 = load <2 x i64>, <2 x i64>* %4612, align 16
  %4614 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %4613, <2 x i64>* %4614, align 16
  %4615 = mul nsw i32 %2, 7
  %4616 = sext i32 %4615 to i64
  %4617 = getelementptr inbounds i16, i16* %0, i64 %4616
  %4618 = bitcast i16* %4617 to <2 x i64>*
  %4619 = load <2 x i64>, <2 x i64>* %4618, align 16
  %4620 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %4621 = bitcast <2 x i64>* %4620 to <4 x i32>*
  %4622 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %4623 = shufflevector <2 x i64> %4601, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4624 = bitcast <2 x i64> %4601 to <8 x i16>
  %4625 = shufflevector <8 x i16> %4624, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4626 = sext <4 x i16> %4625 to <4 x i32>
  %4627 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %4628 = bitcast <2 x i64>* %4627 to <4 x i32>*
  %4629 = bitcast <2 x i64> %4623 to <8 x i16>
  %4630 = shufflevector <8 x i16> %4629, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4631 = sext <4 x i16> %4630 to <4 x i32>
  %4632 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %4633 = bitcast <2 x i64>* %4632 to <4 x i32>*
  %4634 = shufflevector <2 x i64> %4607, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4635 = bitcast <2 x i64> %4607 to <8 x i16>
  %4636 = shufflevector <8 x i16> %4635, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4637 = sext <4 x i16> %4636 to <4 x i32>
  %4638 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %4639 = bitcast <2 x i64>* %4638 to <4 x i32>*
  %4640 = bitcast <2 x i64> %4634 to <8 x i16>
  %4641 = shufflevector <8 x i16> %4640, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4642 = sext <4 x i16> %4641 to <4 x i32>
  %4643 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %4644 = bitcast <2 x i64>* %4643 to <4 x i32>*
  %4645 = shufflevector <2 x i64> %4613, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4646 = bitcast <2 x i64> %4613 to <8 x i16>
  %4647 = shufflevector <8 x i16> %4646, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4648 = sext <4 x i16> %4647 to <4 x i32>
  %4649 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %4650 = bitcast <2 x i64>* %4649 to <4 x i32>*
  %4651 = bitcast <2 x i64> %4645 to <8 x i16>
  %4652 = shufflevector <8 x i16> %4651, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4653 = sext <4 x i16> %4652 to <4 x i32>
  %4654 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %4655 = bitcast <2 x i64>* %4654 to <4 x i32>*
  %4656 = shufflevector <2 x i64> %4619, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4657 = bitcast <2 x i64> %4619 to <8 x i16>
  %4658 = shufflevector <8 x i16> %4657, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4659 = sext <4 x i16> %4658 to <4 x i32>
  %4660 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %4661 = bitcast <2 x i64>* %4660 to <4 x i32>*
  %4662 = bitcast <2 x i64> %4656 to <8 x i16>
  %4663 = shufflevector <8 x i16> %4662, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4664 = sext <4 x i16> %4663 to <4 x i32>
  %4665 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %4666 = bitcast <2 x i64>* %4665 to <4 x i32>*
  %4667 = shufflevector <2 x i64> %4595, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4668 = bitcast <2 x i64> %4595 to <8 x i16>
  %4669 = shufflevector <8 x i16> %4668, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4670 = sext <4 x i16> %4669 to <4 x i32>
  %4671 = bitcast <2 x i64>* %4614 to <4 x i32>*
  %4672 = bitcast <2 x i64> %4667 to <8 x i16>
  %4673 = shufflevector <8 x i16> %4672, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4674 = sext <4 x i16> %4673 to <4 x i32>
  %4675 = shufflevector <2 x i64> %4589, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4676 = bitcast <2 x i64> %4589 to <8 x i16>
  %4677 = shufflevector <8 x i16> %4676, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4678 = sext <4 x i16> %4677 to <4 x i32>
  %4679 = bitcast <2 x i64>* %4602 to <4 x i32>*
  %4680 = bitcast <2 x i64> %4675 to <8 x i16>
  %4681 = shufflevector <8 x i16> %4680, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4682 = sext <4 x i16> %4681 to <4 x i32>
  %4683 = bitcast <2 x i64>* %4608 to <4 x i32>*
  %4684 = shufflevector <2 x i64> %4583, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4685 = bitcast <2 x i64> %4583 to <8 x i16>
  %4686 = shufflevector <8 x i16> %4685, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4687 = sext <4 x i16> %4686 to <4 x i32>
  %4688 = bitcast <2 x i64>* %4590 to <4 x i32>*
  %4689 = bitcast <2 x i64> %4684 to <8 x i16>
  %4690 = shufflevector <8 x i16> %4689, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4691 = sext <4 x i16> %4690 to <4 x i32>
  %4692 = bitcast <2 x i64>* %4596 to <4 x i32>*
  %4693 = shufflevector <2 x i64> %4579, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %4694 = bitcast <2 x i64> %4579 to <8 x i16>
  %4695 = shufflevector <8 x i16> %4694, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4696 = sext <4 x i16> %4695 to <4 x i32>
  %4697 = bitcast <2 x i64> %4693 to <8 x i16>
  %4698 = shufflevector <8 x i16> %4697, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4699 = sext <4 x i16> %4698 to <4 x i32>
  %4700 = bitcast <2 x i64>* %4584 to <4 x i32>*
  %4701 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4696, i32 %4577) #8
  store <4 x i32> %4701, <4 x i32>* %4622, align 16
  %4702 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4699, i32 %4577) #8
  store <4 x i32> %4702, <4 x i32>* %4700, align 16
  %4703 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4687, i32 %4577) #8
  store <4 x i32> %4703, <4 x i32>* %4688, align 16
  %4704 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4691, i32 %4577) #8
  store <4 x i32> %4704, <4 x i32>* %4692, align 16
  %4705 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4678, i32 %4577) #8
  store <4 x i32> %4705, <4 x i32>* %4679, align 16
  %4706 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4682, i32 %4577) #8
  store <4 x i32> %4706, <4 x i32>* %4683, align 16
  %4707 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4670, i32 %4577) #8
  store <4 x i32> %4707, <4 x i32>* %4671, align 16
  %4708 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4674, i32 %4577) #8
  store <4 x i32> %4708, <4 x i32>* %4621, align 16
  %4709 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4626, i32 %4577) #8
  store <4 x i32> %4709, <4 x i32>* %4628, align 16
  %4710 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4631, i32 %4577) #8
  store <4 x i32> %4710, <4 x i32>* %4633, align 16
  %4711 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4637, i32 %4577) #8
  store <4 x i32> %4711, <4 x i32>* %4639, align 16
  %4712 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4642, i32 %4577) #8
  store <4 x i32> %4712, <4 x i32>* %4644, align 16
  %4713 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4648, i32 %4577) #8
  store <4 x i32> %4713, <4 x i32>* %4650, align 16
  %4714 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4653, i32 %4577) #8
  store <4 x i32> %4714, <4 x i32>* %4655, align 16
  %4715 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4659, i32 %4577) #8
  store <4 x i32> %4715, <4 x i32>* %4661, align 16
  %4716 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %4664, i32 %4577) #8
  store <4 x i32> %4716, <4 x i32>* %4666, align 16
  %4717 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %4718 = sext i8 %4717 to i32
  %4719 = add nsw i32 %4718, -10
  %4720 = sext i32 %4719 to i64
  %4721 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %4720, i64 32
  %4722 = load i32, i32* %4721, align 16
  %4723 = insertelement <4 x i32> undef, i32 %4722, i32 0
  %4724 = shufflevector <4 x i32> %4723, <4 x i32> undef, <4 x i32> zeroinitializer
  %4725 = sub nsw i32 0, %4722
  %4726 = insertelement <4 x i32> undef, i32 %4725, i32 0
  %4727 = shufflevector <4 x i32> %4726, <4 x i32> undef, <4 x i32> zeroinitializer
  %4728 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %4720, i64 48
  %4729 = load i32, i32* %4728, align 16
  %4730 = insertelement <4 x i32> undef, i32 %4729, i32 0
  %4731 = shufflevector <4 x i32> %4730, <4 x i32> undef, <4 x i32> zeroinitializer
  %4732 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %4720, i64 16
  %4733 = load i32, i32* %4732, align 16
  %4734 = insertelement <4 x i32> undef, i32 %4733, i32 0
  %4735 = shufflevector <4 x i32> %4734, <4 x i32> undef, <4 x i32> zeroinitializer
  %4736 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %4720, i64 56
  %4737 = load i32, i32* %4736, align 16
  %4738 = insertelement <4 x i32> undef, i32 %4737, i32 0
  %4739 = shufflevector <4 x i32> %4738, <4 x i32> undef, <4 x i32> zeroinitializer
  %4740 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %4720, i64 8
  %4741 = load i32, i32* %4740, align 16
  %4742 = insertelement <4 x i32> undef, i32 %4741, i32 0
  %4743 = shufflevector <4 x i32> %4742, <4 x i32> undef, <4 x i32> zeroinitializer
  %4744 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %4720, i64 24
  %4745 = load i32, i32* %4744, align 16
  %4746 = insertelement <4 x i32> undef, i32 %4745, i32 0
  %4747 = shufflevector <4 x i32> %4746, <4 x i32> undef, <4 x i32> zeroinitializer
  %4748 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %4720, i64 40
  %4749 = load i32, i32* %4748, align 16
  %4750 = insertelement <4 x i32> undef, i32 %4749, i32 0
  %4751 = shufflevector <4 x i32> %4750, <4 x i32> undef, <4 x i32> zeroinitializer
  %4752 = add nsw i32 %4718, -1
  %4753 = shl i32 1, %4752
  %4754 = insertelement <4 x i32> undef, i32 %4753, i32 0
  %4755 = shufflevector <4 x i32> %4754, <4 x i32> undef, <4 x i32> zeroinitializer
  %4756 = add <4 x i32> %4715, %4701
  %4757 = sub <4 x i32> %4701, %4715
  %4758 = add <4 x i32> %4713, %4703
  %4759 = sub <4 x i32> %4703, %4713
  %4760 = add <4 x i32> %4711, %4705
  %4761 = sub <4 x i32> %4705, %4711
  %4762 = add <4 x i32> %4709, %4707
  %4763 = sub <4 x i32> %4707, %4709
  %4764 = add <4 x i32> %4756, %4762
  %4765 = sub <4 x i32> %4756, %4762
  %4766 = add <4 x i32> %4758, %4760
  %4767 = sub <4 x i32> %4758, %4760
  %4768 = mul <4 x i32> %4727, %4761
  %4769 = mul <4 x i32> %4724, %4759
  %4770 = add <4 x i32> %4768, %4769
  %4771 = add <4 x i32> %4770, %4755
  %4772 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4771, i32 %4718) #8
  %4773 = mul <4 x i32> %4724, %4761
  %4774 = mul <4 x i32> %4759, %4727
  %4775 = sub <4 x i32> %4773, %4774
  %4776 = add <4 x i32> %4775, %4755
  %4777 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4776, i32 %4718) #8
  %4778 = mul <4 x i32> %4724, %4764
  %4779 = mul <4 x i32> %4724, %4766
  %4780 = add <4 x i32> %4778, %4779
  %4781 = add <4 x i32> %4780, %4755
  %4782 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4781, i32 %4718) #8
  %4783 = sub <4 x i32> %4778, %4779
  %4784 = add <4 x i32> %4783, %4755
  %4785 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4784, i32 %4718) #8
  %4786 = mul <4 x i32> %4731, %4767
  %4787 = mul <4 x i32> %4735, %4765
  %4788 = add <4 x i32> %4786, %4755
  %4789 = add <4 x i32> %4788, %4787
  %4790 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4789, i32 %4718) #8
  %4791 = mul <4 x i32> %4731, %4765
  %4792 = mul <4 x i32> %4767, %4735
  %4793 = add <4 x i32> %4791, %4755
  %4794 = sub <4 x i32> %4793, %4792
  %4795 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4794, i32 %4718) #8
  %4796 = add <4 x i32> %4772, %4763
  %4797 = sub <4 x i32> %4763, %4772
  %4798 = sub <4 x i32> %4757, %4777
  %4799 = add <4 x i32> %4777, %4757
  %4800 = mul <4 x i32> %4796, %4739
  %4801 = mul <4 x i32> %4799, %4743
  %4802 = add <4 x i32> %4800, %4755
  %4803 = add <4 x i32> %4802, %4801
  %4804 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4803, i32 %4718) #8
  %4805 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %4806 = bitcast <2 x i64>* %4805 to <4 x i32>*
  store <4 x i32> %4804, <4 x i32>* %4806, align 16
  %4807 = mul <4 x i32> %4799, %4739
  %4808 = mul <4 x i32> %4743, %4796
  %4809 = sub <4 x i32> %4755, %4808
  %4810 = add <4 x i32> %4809, %4807
  %4811 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4810, i32 %4718) #8
  %4812 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %4813 = bitcast <2 x i64>* %4812 to <4 x i32>*
  store <4 x i32> %4811, <4 x i32>* %4813, align 16
  %4814 = mul <4 x i32> %4797, %4747
  %4815 = mul <4 x i32> %4798, %4751
  %4816 = add <4 x i32> %4814, %4755
  %4817 = add <4 x i32> %4816, %4815
  %4818 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4817, i32 %4718) #8
  %4819 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %4820 = bitcast <2 x i64>* %4819 to <4 x i32>*
  store <4 x i32> %4818, <4 x i32>* %4820, align 16
  %4821 = mul <4 x i32> %4798, %4747
  %4822 = mul <4 x i32> %4797, %4751
  %4823 = sub <4 x i32> %4755, %4822
  %4824 = add <4 x i32> %4823, %4821
  %4825 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4824, i32 %4718) #8
  %4826 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %4827 = bitcast <2 x i64>* %4826 to <4 x i32>*
  store <4 x i32> %4825, <4 x i32>* %4827, align 16
  %4828 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  store <4 x i32> %4782, <4 x i32>* %4828, align 16
  %4829 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %4830 = bitcast <2 x i64>* %4829 to <4 x i32>*
  store <4 x i32> %4785, <4 x i32>* %4830, align 16
  %4831 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %4832 = bitcast <2 x i64>* %4831 to <4 x i32>*
  store <4 x i32> %4790, <4 x i32>* %4832, align 16
  %4833 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %4834 = bitcast <2 x i64>* %4833 to <4 x i32>*
  store <4 x i32> %4795, <4 x i32>* %4834, align 16
  %4835 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %4836 = load <4 x i32>, <4 x i32>* %4666, align 16
  %4837 = add <4 x i32> %4836, %4702
  %4838 = sub <4 x i32> %4702, %4836
  %4839 = load <4 x i32>, <4 x i32>* %4692, align 16
  %4840 = load <4 x i32>, <4 x i32>* %4655, align 16
  %4841 = add <4 x i32> %4840, %4839
  %4842 = sub <4 x i32> %4839, %4840
  %4843 = load <4 x i32>, <4 x i32>* %4683, align 16
  %4844 = load <4 x i32>, <4 x i32>* %4644, align 16
  %4845 = add <4 x i32> %4844, %4843
  %4846 = sub <4 x i32> %4843, %4844
  %4847 = load <4 x i32>, <4 x i32>* %4621, align 16
  %4848 = load <4 x i32>, <4 x i32>* %4633, align 16
  %4849 = add <4 x i32> %4848, %4847
  %4850 = sub <4 x i32> %4847, %4848
  %4851 = add <4 x i32> %4849, %4837
  %4852 = sub <4 x i32> %4837, %4849
  %4853 = add <4 x i32> %4845, %4841
  %4854 = sub <4 x i32> %4841, %4845
  %4855 = mul <4 x i32> %4846, %4727
  %4856 = mul <4 x i32> %4842, %4724
  %4857 = add <4 x i32> %4856, %4755
  %4858 = add <4 x i32> %4857, %4855
  %4859 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4858, i32 %4718) #8
  %4860 = mul <4 x i32> %4846, %4724
  %4861 = mul <4 x i32> %4727, %4842
  %4862 = sub <4 x i32> %4755, %4861
  %4863 = add <4 x i32> %4862, %4860
  %4864 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4863, i32 %4718) #8
  %4865 = mul <4 x i32> %4851, %4724
  %4866 = mul <4 x i32> %4853, %4724
  %4867 = add <4 x i32> %4866, %4755
  %4868 = add <4 x i32> %4867, %4865
  %4869 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4868, i32 %4718) #8
  %4870 = sub <4 x i32> %4755, %4866
  %4871 = add <4 x i32> %4870, %4865
  %4872 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4871, i32 %4718) #8
  %4873 = mul <4 x i32> %4854, %4731
  %4874 = mul <4 x i32> %4852, %4735
  %4875 = add <4 x i32> %4873, %4755
  %4876 = add <4 x i32> %4875, %4874
  %4877 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4876, i32 %4718) #8
  %4878 = mul <4 x i32> %4852, %4731
  %4879 = mul <4 x i32> %4735, %4854
  %4880 = sub <4 x i32> %4755, %4879
  %4881 = add <4 x i32> %4880, %4878
  %4882 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4881, i32 %4718) #8
  %4883 = add <4 x i32> %4859, %4850
  %4884 = sub <4 x i32> %4850, %4859
  %4885 = sub <4 x i32> %4838, %4864
  %4886 = add <4 x i32> %4864, %4838
  %4887 = mul <4 x i32> %4883, %4739
  %4888 = mul <4 x i32> %4886, %4743
  %4889 = add <4 x i32> %4887, %4755
  %4890 = add <4 x i32> %4889, %4888
  %4891 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4890, i32 %4718) #8
  %4892 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %4893 = bitcast <2 x i64>* %4892 to <4 x i32>*
  store <4 x i32> %4891, <4 x i32>* %4893, align 16
  %4894 = mul <4 x i32> %4886, %4739
  %4895 = mul <4 x i32> %4743, %4883
  %4896 = sub <4 x i32> %4755, %4895
  %4897 = add <4 x i32> %4896, %4894
  %4898 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4897, i32 %4718) #8
  %4899 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %4900 = bitcast <2 x i64>* %4899 to <4 x i32>*
  store <4 x i32> %4898, <4 x i32>* %4900, align 16
  %4901 = mul <4 x i32> %4884, %4747
  %4902 = mul <4 x i32> %4885, %4751
  %4903 = add <4 x i32> %4901, %4755
  %4904 = add <4 x i32> %4903, %4902
  %4905 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4904, i32 %4718) #8
  %4906 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %4907 = bitcast <2 x i64>* %4906 to <4 x i32>*
  store <4 x i32> %4905, <4 x i32>* %4907, align 16
  %4908 = mul <4 x i32> %4885, %4747
  %4909 = mul <4 x i32> %4751, %4884
  %4910 = sub <4 x i32> %4755, %4909
  %4911 = add <4 x i32> %4910, %4908
  %4912 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4911, i32 %4718) #8
  %4913 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %4914 = bitcast <2 x i64>* %4913 to <4 x i32>*
  store <4 x i32> %4912, <4 x i32>* %4914, align 16
  %4915 = bitcast <2 x i64>* %4835 to <4 x i32>*
  store <4 x i32> %4869, <4 x i32>* %4915, align 16
  %4916 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %4917 = bitcast <2 x i64>* %4916 to <4 x i32>*
  store <4 x i32> %4872, <4 x i32>* %4917, align 16
  %4918 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %4919 = bitcast <2 x i64>* %4918 to <4 x i32>*
  store <4 x i32> %4877, <4 x i32>* %4919, align 16
  %4920 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %4921 = bitcast <2 x i64>* %4920 to <4 x i32>*
  store <4 x i32> %4882, <4 x i32>* %4921, align 16
  %4922 = getelementptr inbounds i8, i8* %10, i64 1
  %4923 = load i8, i8* %4922, align 1
  %4924 = sext i8 %4923 to i32
  %4925 = sub nsw i32 0, %4924
  %4926 = xor i32 %4924, -1
  %4927 = shl i32 1, %4926
  %4928 = insertelement <4 x i32> undef, i32 %4927, i32 0
  %4929 = shufflevector <4 x i32> %4928, <4 x i32> undef, <4 x i32> zeroinitializer
  %4930 = add <4 x i32> %4929, %4782
  %4931 = add <4 x i32> %4929, %4869
  %4932 = add <4 x i32> %4929, %4804
  %4933 = add <4 x i32> %4929, %4891
  %4934 = add <4 x i32> %4929, %4790
  %4935 = add <4 x i32> %4929, %4877
  %4936 = add <4 x i32> %4929, %4825
  %4937 = add <4 x i32> %4929, %4912
  %4938 = add <4 x i32> %4929, %4785
  %4939 = add <4 x i32> %4872, %4929
  %4940 = add <4 x i32> %4929, %4818
  %4941 = add <4 x i32> %4905, %4929
  %4942 = add <4 x i32> %4929, %4795
  %4943 = add <4 x i32> %4882, %4929
  %4944 = add <4 x i32> %4929, %4811
  %4945 = add <4 x i32> %4898, %4929
  %4946 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4930, i32 %4925) #8
  %4947 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4931, i32 %4925) #8
  %4948 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4932, i32 %4925) #8
  store <4 x i32> %4948, <4 x i32>* %4806, align 16
  %4949 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4933, i32 %4925) #8
  store <4 x i32> %4949, <4 x i32>* %4893, align 16
  %4950 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4934, i32 %4925) #8
  store <4 x i32> %4950, <4 x i32>* %4832, align 16
  %4951 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4935, i32 %4925) #8
  store <4 x i32> %4951, <4 x i32>* %4919, align 16
  %4952 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4936, i32 %4925) #8
  store <4 x i32> %4952, <4 x i32>* %4827, align 16
  %4953 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4937, i32 %4925) #8
  store <4 x i32> %4953, <4 x i32>* %4914, align 16
  %4954 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4938, i32 %4925) #8
  store <4 x i32> %4954, <4 x i32>* %4830, align 16
  %4955 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4939, i32 %4925) #8
  store <4 x i32> %4955, <4 x i32>* %4917, align 16
  %4956 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4940, i32 %4925) #8
  store <4 x i32> %4956, <4 x i32>* %4820, align 16
  %4957 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4941, i32 %4925) #8
  store <4 x i32> %4957, <4 x i32>* %4907, align 16
  %4958 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4942, i32 %4925) #8
  store <4 x i32> %4958, <4 x i32>* %4834, align 16
  %4959 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4943, i32 %4925) #8
  store <4 x i32> %4959, <4 x i32>* %4921, align 16
  %4960 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4944, i32 %4925) #8
  store <4 x i32> %4960, <4 x i32>* %4813, align 16
  %4961 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4945, i32 %4925) #8
  store <4 x i32> %4961, <4 x i32>* %4900, align 16
  %4962 = shufflevector <4 x i32> %4946, <4 x i32> %4948, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4963 = bitcast <4 x i32> %4962 to <2 x i64>
  %4964 = shufflevector <4 x i32> %4946, <4 x i32> %4948, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4965 = bitcast <4 x i32> %4964 to <2 x i64>
  %4966 = shufflevector <4 x i32> %4950, <4 x i32> %4952, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4967 = bitcast <4 x i32> %4966 to <2 x i64>
  %4968 = shufflevector <4 x i32> %4950, <4 x i32> %4952, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4969 = bitcast <4 x i32> %4968 to <2 x i64>
  %4970 = shufflevector <2 x i64> %4963, <2 x i64> %4967, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4970, <2 x i64>* %4575, align 16
  %4971 = shufflevector <2 x i64> %4963, <2 x i64> %4967, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4971, <2 x i64>* %4590, align 16
  %4972 = shufflevector <2 x i64> %4965, <2 x i64> %4969, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4972, <2 x i64>* %4602, align 16
  %4973 = shufflevector <2 x i64> %4965, <2 x i64> %4969, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4973, <2 x i64>* %4614, align 16
  %4974 = shufflevector <4 x i32> %4947, <4 x i32> %4949, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4975 = bitcast <4 x i32> %4974 to <2 x i64>
  %4976 = shufflevector <4 x i32> %4947, <4 x i32> %4949, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4977 = bitcast <4 x i32> %4976 to <2 x i64>
  %4978 = shufflevector <4 x i32> %4951, <4 x i32> %4953, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4979 = bitcast <4 x i32> %4978 to <2 x i64>
  %4980 = shufflevector <4 x i32> %4951, <4 x i32> %4953, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4981 = bitcast <4 x i32> %4980 to <2 x i64>
  %4982 = shufflevector <2 x i64> %4975, <2 x i64> %4979, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4982, <2 x i64>* %4627, align 16
  %4983 = shufflevector <2 x i64> %4975, <2 x i64> %4979, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4983, <2 x i64>* %4638, align 16
  %4984 = shufflevector <2 x i64> %4977, <2 x i64> %4981, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4984, <2 x i64>* %4649, align 16
  %4985 = shufflevector <2 x i64> %4977, <2 x i64> %4981, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4985, <2 x i64>* %4660, align 16
  %4986 = shufflevector <4 x i32> %4954, <4 x i32> %4956, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4987 = bitcast <4 x i32> %4986 to <2 x i64>
  %4988 = shufflevector <4 x i32> %4954, <4 x i32> %4956, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4989 = bitcast <4 x i32> %4988 to <2 x i64>
  %4990 = shufflevector <4 x i32> %4958, <4 x i32> %4960, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4991 = bitcast <4 x i32> %4990 to <2 x i64>
  %4992 = shufflevector <4 x i32> %4958, <4 x i32> %4960, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4993 = bitcast <4 x i32> %4992 to <2 x i64>
  %4994 = shufflevector <2 x i64> %4987, <2 x i64> %4991, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4994, <2 x i64>* %4584, align 16
  %4995 = shufflevector <2 x i64> %4987, <2 x i64> %4991, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4995, <2 x i64>* %4596, align 16
  %4996 = shufflevector <2 x i64> %4989, <2 x i64> %4993, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4996, <2 x i64>* %4608, align 16
  %4997 = shufflevector <2 x i64> %4989, <2 x i64> %4993, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4997, <2 x i64>* %4620, align 16
  %4998 = shufflevector <4 x i32> %4955, <4 x i32> %4957, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4999 = bitcast <4 x i32> %4998 to <2 x i64>
  %5000 = shufflevector <4 x i32> %4955, <4 x i32> %4957, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5001 = bitcast <4 x i32> %5000 to <2 x i64>
  %5002 = shufflevector <4 x i32> %4959, <4 x i32> %4961, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5003 = bitcast <4 x i32> %5002 to <2 x i64>
  %5004 = shufflevector <4 x i32> %4959, <4 x i32> %4961, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5005 = bitcast <4 x i32> %5004 to <2 x i64>
  %5006 = shufflevector <2 x i64> %4999, <2 x i64> %5003, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5006, <2 x i64>* %4632, align 16
  %5007 = shufflevector <2 x i64> %4999, <2 x i64> %5003, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5007, <2 x i64>* %4643, align 16
  %5008 = shufflevector <2 x i64> %5001, <2 x i64> %5005, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5008, <2 x i64>* %4654, align 16
  %5009 = shufflevector <2 x i64> %5001, <2 x i64> %5005, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5009, <2 x i64>* %4665, align 16
  %5010 = bitcast <2 x i64> %4970 to <4 x i32>
  %5011 = shl <4 x i32> %5010, <i32 1, i32 1, i32 1, i32 1>
  %5012 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  store <4 x i32> %5011, <4 x i32>* %5012, align 16
  %5013 = bitcast <2 x i64> %4994 to <4 x i32>
  %5014 = shl <4 x i32> %5013, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5014, <4 x i32>* %4915, align 16
  %5015 = bitcast <2 x i64> %4971 to <4 x i32>
  %5016 = shl <4 x i32> %5015, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5016, <4 x i32>* %4806, align 16
  %5017 = bitcast <2 x i64> %4995 to <4 x i32>
  %5018 = shl <4 x i32> %5017, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5018, <4 x i32>* %4893, align 16
  %5019 = bitcast <2 x i64> %4972 to <4 x i32>
  %5020 = shl <4 x i32> %5019, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5020, <4 x i32>* %4832, align 16
  %5021 = bitcast <2 x i64> %4996 to <4 x i32>
  %5022 = shl <4 x i32> %5021, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5022, <4 x i32>* %4919, align 16
  %5023 = bitcast <2 x i64> %4973 to <4 x i32>
  %5024 = shl <4 x i32> %5023, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5024, <4 x i32>* %4827, align 16
  %5025 = bitcast <2 x i64> %4997 to <4 x i32>
  %5026 = shl <4 x i32> %5025, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5026, <4 x i32>* %4914, align 16
  %5027 = bitcast <2 x i64> %4982 to <4 x i32>
  %5028 = shl <4 x i32> %5027, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5028, <4 x i32>* %4830, align 16
  %5029 = bitcast <2 x i64> %5006 to <4 x i32>
  %5030 = shl <4 x i32> %5029, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5030, <4 x i32>* %4917, align 16
  %5031 = bitcast <2 x i64> %4983 to <4 x i32>
  %5032 = shl <4 x i32> %5031, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5032, <4 x i32>* %4820, align 16
  %5033 = bitcast <2 x i64> %5007 to <4 x i32>
  %5034 = shl <4 x i32> %5033, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5034, <4 x i32>* %4907, align 16
  %5035 = bitcast <2 x i64> %4984 to <4 x i32>
  %5036 = shl <4 x i32> %5035, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5036, <4 x i32>* %4834, align 16
  %5037 = bitcast <2 x i64> %5008 to <4 x i32>
  %5038 = shl <4 x i32> %5037, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5038, <4 x i32>* %4921, align 16
  %5039 = bitcast <2 x i64> %4985 to <4 x i32>
  %5040 = shl <4 x i32> %5039, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5040, <4 x i32>* %4813, align 16
  %5041 = bitcast <2 x i64> %5009 to <4 x i32>
  %5042 = shl <4 x i32> %5041, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5042, <4 x i32>* %4900, align 16
  %5043 = shufflevector <4 x i32> %5011, <4 x i32> %5016, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5044 = bitcast <4 x i32> %5043 to <2 x i64>
  %5045 = shufflevector <4 x i32> %5011, <4 x i32> %5016, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5046 = bitcast <4 x i32> %5045 to <2 x i64>
  %5047 = shufflevector <4 x i32> %5020, <4 x i32> %5024, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5048 = bitcast <4 x i32> %5047 to <2 x i64>
  %5049 = shufflevector <4 x i32> %5020, <4 x i32> %5024, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5050 = bitcast <4 x i32> %5049 to <2 x i64>
  %5051 = shufflevector <2 x i64> %5044, <2 x i64> %5048, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5051, <2 x i64>* %4575, align 16
  %5052 = shufflevector <2 x i64> %5044, <2 x i64> %5048, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5052, <2 x i64>* %4590, align 16
  %5053 = shufflevector <2 x i64> %5046, <2 x i64> %5050, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5053, <2 x i64>* %4602, align 16
  %5054 = shufflevector <2 x i64> %5046, <2 x i64> %5050, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5054, <2 x i64>* %4614, align 16
  %5055 = shufflevector <4 x i32> %5014, <4 x i32> %5018, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5056 = bitcast <4 x i32> %5055 to <2 x i64>
  %5057 = shufflevector <4 x i32> %5014, <4 x i32> %5018, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5058 = bitcast <4 x i32> %5057 to <2 x i64>
  %5059 = shufflevector <4 x i32> %5022, <4 x i32> %5026, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5060 = bitcast <4 x i32> %5059 to <2 x i64>
  %5061 = shufflevector <4 x i32> %5022, <4 x i32> %5026, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5062 = bitcast <4 x i32> %5061 to <2 x i64>
  %5063 = shufflevector <2 x i64> %5056, <2 x i64> %5060, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5063, <2 x i64>* %4627, align 16
  %5064 = shufflevector <2 x i64> %5056, <2 x i64> %5060, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5064, <2 x i64>* %4638, align 16
  %5065 = shufflevector <2 x i64> %5058, <2 x i64> %5062, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5065, <2 x i64>* %4649, align 16
  %5066 = shufflevector <2 x i64> %5058, <2 x i64> %5062, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5066, <2 x i64>* %4660, align 16
  %5067 = shufflevector <4 x i32> %5028, <4 x i32> %5032, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5068 = bitcast <4 x i32> %5067 to <2 x i64>
  %5069 = shufflevector <4 x i32> %5028, <4 x i32> %5032, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5070 = bitcast <4 x i32> %5069 to <2 x i64>
  %5071 = shufflevector <4 x i32> %5036, <4 x i32> %5040, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5072 = bitcast <4 x i32> %5071 to <2 x i64>
  %5073 = shufflevector <4 x i32> %5036, <4 x i32> %5040, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5074 = bitcast <4 x i32> %5073 to <2 x i64>
  %5075 = shufflevector <2 x i64> %5068, <2 x i64> %5072, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5075, <2 x i64>* %4584, align 16
  %5076 = shufflevector <2 x i64> %5068, <2 x i64> %5072, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5076, <2 x i64>* %4596, align 16
  %5077 = shufflevector <2 x i64> %5070, <2 x i64> %5074, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5077, <2 x i64>* %4608, align 16
  %5078 = shufflevector <2 x i64> %5070, <2 x i64> %5074, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5078, <2 x i64>* %4620, align 16
  %5079 = shufflevector <4 x i32> %5030, <4 x i32> %5034, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5080 = bitcast <4 x i32> %5079 to <2 x i64>
  %5081 = shufflevector <4 x i32> %5030, <4 x i32> %5034, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5082 = bitcast <4 x i32> %5081 to <2 x i64>
  %5083 = shufflevector <4 x i32> %5038, <4 x i32> %5042, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5084 = bitcast <4 x i32> %5083 to <2 x i64>
  %5085 = shufflevector <4 x i32> %5038, <4 x i32> %5042, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5086 = bitcast <4 x i32> %5085 to <2 x i64>
  %5087 = shufflevector <2 x i64> %5080, <2 x i64> %5084, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5087, <2 x i64>* %4632, align 16
  %5088 = shufflevector <2 x i64> %5080, <2 x i64> %5084, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5088, <2 x i64>* %4643, align 16
  %5089 = shufflevector <2 x i64> %5082, <2 x i64> %5086, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5089, <2 x i64>* %4654, align 16
  %5090 = shufflevector <2 x i64> %5082, <2 x i64> %5086, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5090, <2 x i64>* %4665, align 16
  br label %7057

5091:                                             ; preds = %5
  %5092 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %5093 = load i8, i8* %10, align 1
  %5094 = sext i8 %5093 to i32
  %5095 = bitcast i16* %0 to <2 x i64>*
  %5096 = load <2 x i64>, <2 x i64>* %5095, align 16
  store <2 x i64> %5096, <2 x i64>* %5092, align 16
  %5097 = sext i32 %2 to i64
  %5098 = getelementptr inbounds i16, i16* %0, i64 %5097
  %5099 = bitcast i16* %5098 to <2 x i64>*
  %5100 = load <2 x i64>, <2 x i64>* %5099, align 16
  %5101 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %5100, <2 x i64>* %5101, align 16
  %5102 = shl nsw i32 %2, 1
  %5103 = sext i32 %5102 to i64
  %5104 = getelementptr inbounds i16, i16* %0, i64 %5103
  %5105 = bitcast i16* %5104 to <2 x i64>*
  %5106 = load <2 x i64>, <2 x i64>* %5105, align 16
  %5107 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %5106, <2 x i64>* %5107, align 16
  %5108 = mul nsw i32 %2, 3
  %5109 = sext i32 %5108 to i64
  %5110 = getelementptr inbounds i16, i16* %0, i64 %5109
  %5111 = bitcast i16* %5110 to <2 x i64>*
  %5112 = load <2 x i64>, <2 x i64>* %5111, align 16
  %5113 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %5112, <2 x i64>* %5113, align 16
  %5114 = shl nsw i32 %2, 2
  %5115 = sext i32 %5114 to i64
  %5116 = getelementptr inbounds i16, i16* %0, i64 %5115
  %5117 = bitcast i16* %5116 to <2 x i64>*
  %5118 = load <2 x i64>, <2 x i64>* %5117, align 16
  %5119 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %5118, <2 x i64>* %5119, align 16
  %5120 = mul nsw i32 %2, 5
  %5121 = sext i32 %5120 to i64
  %5122 = getelementptr inbounds i16, i16* %0, i64 %5121
  %5123 = bitcast i16* %5122 to <2 x i64>*
  %5124 = load <2 x i64>, <2 x i64>* %5123, align 16
  %5125 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %5124, <2 x i64>* %5125, align 16
  %5126 = mul nsw i32 %2, 6
  %5127 = sext i32 %5126 to i64
  %5128 = getelementptr inbounds i16, i16* %0, i64 %5127
  %5129 = bitcast i16* %5128 to <2 x i64>*
  %5130 = load <2 x i64>, <2 x i64>* %5129, align 16
  %5131 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %5130, <2 x i64>* %5131, align 16
  %5132 = mul nsw i32 %2, 7
  %5133 = sext i32 %5132 to i64
  %5134 = getelementptr inbounds i16, i16* %0, i64 %5133
  %5135 = bitcast i16* %5134 to <2 x i64>*
  %5136 = load <2 x i64>, <2 x i64>* %5135, align 16
  %5137 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %5138 = bitcast <2 x i64>* %5137 to <4 x i32>*
  %5139 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %5140 = shufflevector <2 x i64> %5118, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5141 = bitcast <2 x i64> %5118 to <8 x i16>
  %5142 = shufflevector <8 x i16> %5141, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5143 = sext <4 x i16> %5142 to <4 x i32>
  %5144 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %5145 = bitcast <2 x i64>* %5144 to <4 x i32>*
  %5146 = bitcast <2 x i64> %5140 to <8 x i16>
  %5147 = shufflevector <8 x i16> %5146, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5148 = sext <4 x i16> %5147 to <4 x i32>
  %5149 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %5150 = bitcast <2 x i64>* %5149 to <4 x i32>*
  %5151 = shufflevector <2 x i64> %5124, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5152 = bitcast <2 x i64> %5124 to <8 x i16>
  %5153 = shufflevector <8 x i16> %5152, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5154 = sext <4 x i16> %5153 to <4 x i32>
  %5155 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %5156 = bitcast <2 x i64>* %5155 to <4 x i32>*
  %5157 = bitcast <2 x i64> %5151 to <8 x i16>
  %5158 = shufflevector <8 x i16> %5157, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5159 = sext <4 x i16> %5158 to <4 x i32>
  %5160 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %5161 = bitcast <2 x i64>* %5160 to <4 x i32>*
  %5162 = shufflevector <2 x i64> %5130, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5163 = bitcast <2 x i64> %5130 to <8 x i16>
  %5164 = shufflevector <8 x i16> %5163, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5165 = sext <4 x i16> %5164 to <4 x i32>
  %5166 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %5167 = bitcast <2 x i64>* %5166 to <4 x i32>*
  %5168 = bitcast <2 x i64> %5162 to <8 x i16>
  %5169 = shufflevector <8 x i16> %5168, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5170 = sext <4 x i16> %5169 to <4 x i32>
  %5171 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %5172 = bitcast <2 x i64>* %5171 to <4 x i32>*
  %5173 = shufflevector <2 x i64> %5136, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5174 = bitcast <2 x i64> %5136 to <8 x i16>
  %5175 = shufflevector <8 x i16> %5174, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5176 = sext <4 x i16> %5175 to <4 x i32>
  %5177 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %5178 = bitcast <2 x i64>* %5177 to <4 x i32>*
  %5179 = bitcast <2 x i64> %5173 to <8 x i16>
  %5180 = shufflevector <8 x i16> %5179, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5181 = sext <4 x i16> %5180 to <4 x i32>
  %5182 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %5183 = bitcast <2 x i64>* %5182 to <4 x i32>*
  %5184 = shufflevector <2 x i64> %5112, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5185 = bitcast <2 x i64> %5112 to <8 x i16>
  %5186 = shufflevector <8 x i16> %5185, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5187 = sext <4 x i16> %5186 to <4 x i32>
  %5188 = bitcast <2 x i64>* %5131 to <4 x i32>*
  %5189 = bitcast <2 x i64> %5184 to <8 x i16>
  %5190 = shufflevector <8 x i16> %5189, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5191 = sext <4 x i16> %5190 to <4 x i32>
  %5192 = shufflevector <2 x i64> %5106, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5193 = bitcast <2 x i64> %5106 to <8 x i16>
  %5194 = shufflevector <8 x i16> %5193, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5195 = sext <4 x i16> %5194 to <4 x i32>
  %5196 = bitcast <2 x i64>* %5119 to <4 x i32>*
  %5197 = bitcast <2 x i64> %5192 to <8 x i16>
  %5198 = shufflevector <8 x i16> %5197, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5199 = sext <4 x i16> %5198 to <4 x i32>
  %5200 = bitcast <2 x i64>* %5125 to <4 x i32>*
  %5201 = shufflevector <2 x i64> %5100, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5202 = bitcast <2 x i64> %5100 to <8 x i16>
  %5203 = shufflevector <8 x i16> %5202, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5204 = sext <4 x i16> %5203 to <4 x i32>
  %5205 = bitcast <2 x i64>* %5107 to <4 x i32>*
  %5206 = bitcast <2 x i64> %5201 to <8 x i16>
  %5207 = shufflevector <8 x i16> %5206, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5208 = sext <4 x i16> %5207 to <4 x i32>
  %5209 = bitcast <2 x i64>* %5113 to <4 x i32>*
  %5210 = shufflevector <2 x i64> %5096, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5211 = bitcast <2 x i64> %5096 to <8 x i16>
  %5212 = shufflevector <8 x i16> %5211, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5213 = sext <4 x i16> %5212 to <4 x i32>
  %5214 = bitcast <2 x i64> %5210 to <8 x i16>
  %5215 = shufflevector <8 x i16> %5214, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5216 = sext <4 x i16> %5215 to <4 x i32>
  %5217 = bitcast <2 x i64>* %5101 to <4 x i32>*
  %5218 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5213, i32 %5094) #8
  store <4 x i32> %5218, <4 x i32>* %5139, align 16
  %5219 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5216, i32 %5094) #8
  store <4 x i32> %5219, <4 x i32>* %5217, align 16
  %5220 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5204, i32 %5094) #8
  store <4 x i32> %5220, <4 x i32>* %5205, align 16
  %5221 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5208, i32 %5094) #8
  store <4 x i32> %5221, <4 x i32>* %5209, align 16
  %5222 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5195, i32 %5094) #8
  store <4 x i32> %5222, <4 x i32>* %5196, align 16
  %5223 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5199, i32 %5094) #8
  store <4 x i32> %5223, <4 x i32>* %5200, align 16
  %5224 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5187, i32 %5094) #8
  store <4 x i32> %5224, <4 x i32>* %5188, align 16
  %5225 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5191, i32 %5094) #8
  store <4 x i32> %5225, <4 x i32>* %5138, align 16
  %5226 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5143, i32 %5094) #8
  store <4 x i32> %5226, <4 x i32>* %5145, align 16
  %5227 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5148, i32 %5094) #8
  store <4 x i32> %5227, <4 x i32>* %5150, align 16
  %5228 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5154, i32 %5094) #8
  store <4 x i32> %5228, <4 x i32>* %5156, align 16
  %5229 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5159, i32 %5094) #8
  store <4 x i32> %5229, <4 x i32>* %5161, align 16
  %5230 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5165, i32 %5094) #8
  store <4 x i32> %5230, <4 x i32>* %5167, align 16
  %5231 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5170, i32 %5094) #8
  store <4 x i32> %5231, <4 x i32>* %5172, align 16
  %5232 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5176, i32 %5094) #8
  store <4 x i32> %5232, <4 x i32>* %5178, align 16
  %5233 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5181, i32 %5094) #8
  store <4 x i32> %5233, <4 x i32>* %5183, align 16
  %5234 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %5235 = shl <4 x i32> %5218, <i32 1, i32 1, i32 1, i32 1>
  %5236 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  store <4 x i32> %5235, <4 x i32>* %5236, align 16
  %5237 = shl <4 x i32> %5219, <i32 1, i32 1, i32 1, i32 1>
  %5238 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %5239 = bitcast <2 x i64>* %5238 to <4 x i32>*
  store <4 x i32> %5237, <4 x i32>* %5239, align 16
  %5240 = shl <4 x i32> %5220, <i32 1, i32 1, i32 1, i32 1>
  %5241 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %5242 = bitcast <2 x i64>* %5241 to <4 x i32>*
  store <4 x i32> %5240, <4 x i32>* %5242, align 16
  %5243 = shl <4 x i32> %5221, <i32 1, i32 1, i32 1, i32 1>
  %5244 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %5245 = bitcast <2 x i64>* %5244 to <4 x i32>*
  store <4 x i32> %5243, <4 x i32>* %5245, align 16
  %5246 = shl <4 x i32> %5222, <i32 1, i32 1, i32 1, i32 1>
  %5247 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %5248 = bitcast <2 x i64>* %5247 to <4 x i32>*
  store <4 x i32> %5246, <4 x i32>* %5248, align 16
  %5249 = shl <4 x i32> %5223, <i32 1, i32 1, i32 1, i32 1>
  %5250 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %5251 = bitcast <2 x i64>* %5250 to <4 x i32>*
  store <4 x i32> %5249, <4 x i32>* %5251, align 16
  %5252 = shl <4 x i32> %5224, <i32 1, i32 1, i32 1, i32 1>
  %5253 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %5254 = bitcast <2 x i64>* %5253 to <4 x i32>*
  store <4 x i32> %5252, <4 x i32>* %5254, align 16
  %5255 = shl <4 x i32> %5225, <i32 1, i32 1, i32 1, i32 1>
  %5256 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %5257 = bitcast <2 x i64>* %5256 to <4 x i32>*
  store <4 x i32> %5255, <4 x i32>* %5257, align 16
  %5258 = shl <4 x i32> %5226, <i32 1, i32 1, i32 1, i32 1>
  %5259 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %5260 = bitcast <2 x i64>* %5259 to <4 x i32>*
  store <4 x i32> %5258, <4 x i32>* %5260, align 16
  %5261 = shl <4 x i32> %5227, <i32 1, i32 1, i32 1, i32 1>
  %5262 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %5263 = bitcast <2 x i64>* %5262 to <4 x i32>*
  store <4 x i32> %5261, <4 x i32>* %5263, align 16
  %5264 = shl <4 x i32> %5228, <i32 1, i32 1, i32 1, i32 1>
  %5265 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %5266 = bitcast <2 x i64>* %5265 to <4 x i32>*
  store <4 x i32> %5264, <4 x i32>* %5266, align 16
  %5267 = shl <4 x i32> %5229, <i32 1, i32 1, i32 1, i32 1>
  %5268 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %5269 = bitcast <2 x i64>* %5268 to <4 x i32>*
  store <4 x i32> %5267, <4 x i32>* %5269, align 16
  %5270 = shl <4 x i32> %5230, <i32 1, i32 1, i32 1, i32 1>
  %5271 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %5272 = bitcast <2 x i64>* %5271 to <4 x i32>*
  store <4 x i32> %5270, <4 x i32>* %5272, align 16
  %5273 = shl <4 x i32> %5231, <i32 1, i32 1, i32 1, i32 1>
  %5274 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %5275 = bitcast <2 x i64>* %5274 to <4 x i32>*
  store <4 x i32> %5273, <4 x i32>* %5275, align 16
  %5276 = shl <4 x i32> %5232, <i32 1, i32 1, i32 1, i32 1>
  %5277 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %5278 = bitcast <2 x i64>* %5277 to <4 x i32>*
  store <4 x i32> %5276, <4 x i32>* %5278, align 16
  %5279 = shl <4 x i32> %5233, <i32 1, i32 1, i32 1, i32 1>
  %5280 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %5281 = bitcast <2 x i64>* %5280 to <4 x i32>*
  store <4 x i32> %5279, <4 x i32>* %5281, align 16
  %5282 = getelementptr inbounds i8, i8* %10, i64 1
  %5283 = load i8, i8* %5282, align 1
  %5284 = sext i8 %5283 to i32
  %5285 = sub nsw i32 0, %5284
  %5286 = xor i32 %5284, -1
  %5287 = shl i32 1, %5286
  %5288 = insertelement <4 x i32> undef, i32 %5287, i32 0
  %5289 = shufflevector <4 x i32> %5288, <4 x i32> undef, <4 x i32> zeroinitializer
  %5290 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  %5291 = add <4 x i32> %5289, %5235
  %5292 = add <4 x i32> %5289, %5237
  %5293 = add <4 x i32> %5289, %5240
  %5294 = add <4 x i32> %5243, %5289
  %5295 = add <4 x i32> %5246, %5289
  %5296 = add <4 x i32> %5249, %5289
  %5297 = add <4 x i32> %5252, %5289
  %5298 = add <4 x i32> %5255, %5289
  %5299 = add <4 x i32> %5258, %5289
  %5300 = add <4 x i32> %5261, %5289
  %5301 = add <4 x i32> %5264, %5289
  %5302 = add <4 x i32> %5267, %5289
  %5303 = add <4 x i32> %5270, %5289
  %5304 = add <4 x i32> %5273, %5289
  %5305 = add <4 x i32> %5276, %5289
  %5306 = add <4 x i32> %5279, %5289
  %5307 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5291, i32 %5285) #8
  store <4 x i32> %5307, <4 x i32>* %5290, align 16
  %5308 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5292, i32 %5285) #8
  store <4 x i32> %5308, <4 x i32>* %5239, align 16
  %5309 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5293, i32 %5285) #8
  store <4 x i32> %5309, <4 x i32>* %5242, align 16
  %5310 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5294, i32 %5285) #8
  store <4 x i32> %5310, <4 x i32>* %5245, align 16
  %5311 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5295, i32 %5285) #8
  store <4 x i32> %5311, <4 x i32>* %5248, align 16
  %5312 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5296, i32 %5285) #8
  store <4 x i32> %5312, <4 x i32>* %5251, align 16
  %5313 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5297, i32 %5285) #8
  store <4 x i32> %5313, <4 x i32>* %5254, align 16
  %5314 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5298, i32 %5285) #8
  store <4 x i32> %5314, <4 x i32>* %5257, align 16
  %5315 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5299, i32 %5285) #8
  store <4 x i32> %5315, <4 x i32>* %5260, align 16
  %5316 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5300, i32 %5285) #8
  store <4 x i32> %5316, <4 x i32>* %5263, align 16
  %5317 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5301, i32 %5285) #8
  store <4 x i32> %5317, <4 x i32>* %5266, align 16
  %5318 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5302, i32 %5285) #8
  store <4 x i32> %5318, <4 x i32>* %5269, align 16
  %5319 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5303, i32 %5285) #8
  store <4 x i32> %5319, <4 x i32>* %5272, align 16
  %5320 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5304, i32 %5285) #8
  store <4 x i32> %5320, <4 x i32>* %5275, align 16
  %5321 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5305, i32 %5285) #8
  store <4 x i32> %5321, <4 x i32>* %5278, align 16
  %5322 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5306, i32 %5285) #8
  store <4 x i32> %5322, <4 x i32>* %5281, align 16
  %5323 = shufflevector <4 x i32> %5307, <4 x i32> %5309, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5324 = bitcast <4 x i32> %5323 to <2 x i64>
  %5325 = shufflevector <4 x i32> %5307, <4 x i32> %5309, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5326 = bitcast <4 x i32> %5325 to <2 x i64>
  %5327 = shufflevector <4 x i32> %5311, <4 x i32> %5313, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5328 = bitcast <4 x i32> %5327 to <2 x i64>
  %5329 = shufflevector <4 x i32> %5311, <4 x i32> %5313, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5330 = bitcast <4 x i32> %5329 to <2 x i64>
  %5331 = shufflevector <2 x i64> %5324, <2 x i64> %5328, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5331, <2 x i64>* %5092, align 16
  %5332 = shufflevector <2 x i64> %5324, <2 x i64> %5328, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5332, <2 x i64>* %5107, align 16
  %5333 = shufflevector <2 x i64> %5326, <2 x i64> %5330, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5333, <2 x i64>* %5119, align 16
  %5334 = shufflevector <2 x i64> %5326, <2 x i64> %5330, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5334, <2 x i64>* %5131, align 16
  %5335 = shufflevector <4 x i32> %5308, <4 x i32> %5310, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5336 = bitcast <4 x i32> %5335 to <2 x i64>
  %5337 = shufflevector <4 x i32> %5308, <4 x i32> %5310, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5338 = bitcast <4 x i32> %5337 to <2 x i64>
  %5339 = shufflevector <4 x i32> %5312, <4 x i32> %5314, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5340 = bitcast <4 x i32> %5339 to <2 x i64>
  %5341 = shufflevector <4 x i32> %5312, <4 x i32> %5314, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5342 = bitcast <4 x i32> %5341 to <2 x i64>
  %5343 = shufflevector <2 x i64> %5336, <2 x i64> %5340, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5343, <2 x i64>* %5144, align 16
  %5344 = shufflevector <2 x i64> %5336, <2 x i64> %5340, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5344, <2 x i64>* %5155, align 16
  %5345 = shufflevector <2 x i64> %5338, <2 x i64> %5342, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5345, <2 x i64>* %5166, align 16
  %5346 = shufflevector <2 x i64> %5338, <2 x i64> %5342, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5346, <2 x i64>* %5177, align 16
  %5347 = shufflevector <4 x i32> %5315, <4 x i32> %5317, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5348 = bitcast <4 x i32> %5347 to <2 x i64>
  %5349 = shufflevector <4 x i32> %5315, <4 x i32> %5317, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5350 = bitcast <4 x i32> %5349 to <2 x i64>
  %5351 = shufflevector <4 x i32> %5319, <4 x i32> %5321, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5352 = bitcast <4 x i32> %5351 to <2 x i64>
  %5353 = shufflevector <4 x i32> %5319, <4 x i32> %5321, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5354 = bitcast <4 x i32> %5353 to <2 x i64>
  %5355 = shufflevector <2 x i64> %5348, <2 x i64> %5352, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5355, <2 x i64>* %5101, align 16
  %5356 = shufflevector <2 x i64> %5348, <2 x i64> %5352, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5356, <2 x i64>* %5113, align 16
  %5357 = shufflevector <2 x i64> %5350, <2 x i64> %5354, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5357, <2 x i64>* %5125, align 16
  %5358 = shufflevector <2 x i64> %5350, <2 x i64> %5354, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5358, <2 x i64>* %5137, align 16
  %5359 = shufflevector <4 x i32> %5316, <4 x i32> %5318, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5360 = bitcast <4 x i32> %5359 to <2 x i64>
  %5361 = shufflevector <4 x i32> %5316, <4 x i32> %5318, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5362 = bitcast <4 x i32> %5361 to <2 x i64>
  %5363 = shufflevector <4 x i32> %5320, <4 x i32> %5322, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5364 = bitcast <4 x i32> %5363 to <2 x i64>
  %5365 = shufflevector <4 x i32> %5320, <4 x i32> %5322, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5366 = bitcast <4 x i32> %5365 to <2 x i64>
  %5367 = shufflevector <2 x i64> %5360, <2 x i64> %5364, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5367, <2 x i64>* %5149, align 16
  %5368 = shufflevector <2 x i64> %5360, <2 x i64> %5364, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5368, <2 x i64>* %5160, align 16
  %5369 = shufflevector <2 x i64> %5362, <2 x i64> %5366, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5369, <2 x i64>* %5171, align 16
  %5370 = shufflevector <2 x i64> %5362, <2 x i64> %5366, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5370, <2 x i64>* %5182, align 16
  %5371 = sext i8 %5234 to i32
  %5372 = add nsw i32 %5371, -10
  %5373 = sext i32 %5372 to i64
  %5374 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %5373, i64 32
  %5375 = load i32, i32* %5374, align 16
  %5376 = insertelement <4 x i32> undef, i32 %5375, i32 0
  %5377 = shufflevector <4 x i32> %5376, <4 x i32> undef, <4 x i32> zeroinitializer
  %5378 = sub nsw i32 0, %5375
  %5379 = insertelement <4 x i32> undef, i32 %5378, i32 0
  %5380 = shufflevector <4 x i32> %5379, <4 x i32> undef, <4 x i32> zeroinitializer
  %5381 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %5373, i64 48
  %5382 = load i32, i32* %5381, align 16
  %5383 = insertelement <4 x i32> undef, i32 %5382, i32 0
  %5384 = shufflevector <4 x i32> %5383, <4 x i32> undef, <4 x i32> zeroinitializer
  %5385 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %5373, i64 16
  %5386 = load i32, i32* %5385, align 16
  %5387 = insertelement <4 x i32> undef, i32 %5386, i32 0
  %5388 = shufflevector <4 x i32> %5387, <4 x i32> undef, <4 x i32> zeroinitializer
  %5389 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %5373, i64 56
  %5390 = load i32, i32* %5389, align 16
  %5391 = insertelement <4 x i32> undef, i32 %5390, i32 0
  %5392 = shufflevector <4 x i32> %5391, <4 x i32> undef, <4 x i32> zeroinitializer
  %5393 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %5373, i64 8
  %5394 = load i32, i32* %5393, align 16
  %5395 = insertelement <4 x i32> undef, i32 %5394, i32 0
  %5396 = shufflevector <4 x i32> %5395, <4 x i32> undef, <4 x i32> zeroinitializer
  %5397 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %5373, i64 24
  %5398 = load i32, i32* %5397, align 16
  %5399 = insertelement <4 x i32> undef, i32 %5398, i32 0
  %5400 = shufflevector <4 x i32> %5399, <4 x i32> undef, <4 x i32> zeroinitializer
  %5401 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %5373, i64 40
  %5402 = load i32, i32* %5401, align 16
  %5403 = insertelement <4 x i32> undef, i32 %5402, i32 0
  %5404 = shufflevector <4 x i32> %5403, <4 x i32> undef, <4 x i32> zeroinitializer
  %5405 = add nsw i32 %5371, -1
  %5406 = shl i32 1, %5405
  %5407 = insertelement <4 x i32> undef, i32 %5406, i32 0
  %5408 = shufflevector <4 x i32> %5407, <4 x i32> undef, <4 x i32> zeroinitializer
  %5409 = bitcast <2 x i64> %5331 to <4 x i32>
  %5410 = bitcast <2 x i64> %5346 to <4 x i32>
  %5411 = add <4 x i32> %5410, %5409
  %5412 = sub <4 x i32> %5409, %5410
  %5413 = bitcast <2 x i64> %5332 to <4 x i32>
  %5414 = bitcast <2 x i64> %5345 to <4 x i32>
  %5415 = add <4 x i32> %5414, %5413
  %5416 = sub <4 x i32> %5413, %5414
  %5417 = load <4 x i32>, <4 x i32>* %5196, align 16
  %5418 = bitcast <2 x i64> %5344 to <4 x i32>
  %5419 = add <4 x i32> %5417, %5418
  %5420 = sub <4 x i32> %5417, %5418
  %5421 = load <4 x i32>, <4 x i32>* %5188, align 16
  %5422 = bitcast <2 x i64> %5343 to <4 x i32>
  %5423 = add <4 x i32> %5421, %5422
  %5424 = sub <4 x i32> %5421, %5422
  %5425 = add <4 x i32> %5423, %5411
  %5426 = sub <4 x i32> %5411, %5423
  %5427 = add <4 x i32> %5419, %5415
  %5428 = sub <4 x i32> %5415, %5419
  %5429 = mul <4 x i32> %5420, %5380
  %5430 = mul <4 x i32> %5416, %5377
  %5431 = add <4 x i32> %5430, %5408
  %5432 = add <4 x i32> %5431, %5429
  %5433 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5432, i32 %5371) #8
  %5434 = mul <4 x i32> %5420, %5377
  %5435 = mul <4 x i32> %5380, %5416
  %5436 = sub <4 x i32> %5408, %5435
  %5437 = add <4 x i32> %5436, %5434
  %5438 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5437, i32 %5371) #8
  %5439 = mul <4 x i32> %5425, %5377
  %5440 = mul <4 x i32> %5427, %5377
  %5441 = add <4 x i32> %5440, %5408
  %5442 = add <4 x i32> %5441, %5439
  %5443 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5442, i32 %5371) #8
  %5444 = sub <4 x i32> %5408, %5440
  %5445 = add <4 x i32> %5444, %5439
  %5446 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5445, i32 %5371) #8
  %5447 = mul <4 x i32> %5428, %5384
  %5448 = mul <4 x i32> %5426, %5388
  %5449 = add <4 x i32> %5447, %5408
  %5450 = add <4 x i32> %5449, %5448
  %5451 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5450, i32 %5371) #8
  %5452 = mul <4 x i32> %5426, %5384
  %5453 = mul <4 x i32> %5388, %5428
  %5454 = sub <4 x i32> %5408, %5453
  %5455 = add <4 x i32> %5454, %5452
  %5456 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5455, i32 %5371) #8
  %5457 = add <4 x i32> %5433, %5424
  %5458 = sub <4 x i32> %5424, %5433
  %5459 = sub <4 x i32> %5412, %5438
  %5460 = add <4 x i32> %5438, %5412
  %5461 = mul <4 x i32> %5457, %5392
  %5462 = mul <4 x i32> %5460, %5396
  %5463 = add <4 x i32> %5461, %5408
  %5464 = add <4 x i32> %5463, %5462
  %5465 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5464, i32 %5371) #8
  store <4 x i32> %5465, <4 x i32>* %5242, align 16
  %5466 = mul <4 x i32> %5460, %5392
  %5467 = mul <4 x i32> %5396, %5457
  %5468 = sub <4 x i32> %5408, %5467
  %5469 = add <4 x i32> %5468, %5466
  %5470 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5469, i32 %5371) #8
  store <4 x i32> %5470, <4 x i32>* %5278, align 16
  %5471 = mul <4 x i32> %5458, %5400
  %5472 = mul <4 x i32> %5459, %5404
  %5473 = add <4 x i32> %5471, %5408
  %5474 = add <4 x i32> %5473, %5472
  %5475 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5474, i32 %5371) #8
  store <4 x i32> %5475, <4 x i32>* %5266, align 16
  %5476 = mul <4 x i32> %5459, %5400
  %5477 = mul <4 x i32> %5404, %5458
  %5478 = sub <4 x i32> %5408, %5477
  %5479 = add <4 x i32> %5478, %5476
  %5480 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5479, i32 %5371) #8
  store <4 x i32> %5480, <4 x i32>* %5254, align 16
  store <4 x i32> %5443, <4 x i32>* %5290, align 16
  store <4 x i32> %5446, <4 x i32>* %5260, align 16
  store <4 x i32> %5451, <4 x i32>* %5248, align 16
  store <4 x i32> %5456, <4 x i32>* %5272, align 16
  %5481 = load <4 x i32>, <4 x i32>* %5217, align 16
  %5482 = load <4 x i32>, <4 x i32>* %5183, align 16
  %5483 = add <4 x i32> %5482, %5481
  %5484 = sub <4 x i32> %5481, %5482
  %5485 = load <4 x i32>, <4 x i32>* %5209, align 16
  %5486 = load <4 x i32>, <4 x i32>* %5172, align 16
  %5487 = add <4 x i32> %5486, %5485
  %5488 = sub <4 x i32> %5485, %5486
  %5489 = load <4 x i32>, <4 x i32>* %5200, align 16
  %5490 = load <4 x i32>, <4 x i32>* %5161, align 16
  %5491 = add <4 x i32> %5490, %5489
  %5492 = sub <4 x i32> %5489, %5490
  %5493 = load <4 x i32>, <4 x i32>* %5138, align 16
  %5494 = load <4 x i32>, <4 x i32>* %5150, align 16
  %5495 = add <4 x i32> %5494, %5493
  %5496 = sub <4 x i32> %5493, %5494
  %5497 = add <4 x i32> %5495, %5483
  %5498 = sub <4 x i32> %5483, %5495
  %5499 = add <4 x i32> %5491, %5487
  %5500 = sub <4 x i32> %5487, %5491
  %5501 = mul <4 x i32> %5492, %5380
  %5502 = mul <4 x i32> %5488, %5377
  %5503 = add <4 x i32> %5502, %5408
  %5504 = add <4 x i32> %5503, %5501
  %5505 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5504, i32 %5371) #8
  %5506 = mul <4 x i32> %5492, %5377
  %5507 = mul <4 x i32> %5380, %5488
  %5508 = sub <4 x i32> %5408, %5507
  %5509 = add <4 x i32> %5508, %5506
  %5510 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5509, i32 %5371) #8
  %5511 = mul <4 x i32> %5497, %5377
  %5512 = mul <4 x i32> %5499, %5377
  %5513 = add <4 x i32> %5512, %5408
  %5514 = add <4 x i32> %5513, %5511
  %5515 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5514, i32 %5371) #8
  %5516 = sub <4 x i32> %5408, %5512
  %5517 = add <4 x i32> %5516, %5511
  %5518 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5517, i32 %5371) #8
  %5519 = mul <4 x i32> %5500, %5384
  %5520 = mul <4 x i32> %5498, %5388
  %5521 = add <4 x i32> %5519, %5408
  %5522 = add <4 x i32> %5521, %5520
  %5523 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5522, i32 %5371) #8
  %5524 = mul <4 x i32> %5498, %5384
  %5525 = mul <4 x i32> %5388, %5500
  %5526 = sub <4 x i32> %5408, %5525
  %5527 = add <4 x i32> %5526, %5524
  %5528 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5527, i32 %5371) #8
  %5529 = add <4 x i32> %5505, %5496
  %5530 = sub <4 x i32> %5496, %5505
  %5531 = sub <4 x i32> %5484, %5510
  %5532 = add <4 x i32> %5510, %5484
  %5533 = mul <4 x i32> %5529, %5392
  %5534 = mul <4 x i32> %5532, %5396
  %5535 = add <4 x i32> %5533, %5408
  %5536 = add <4 x i32> %5535, %5534
  %5537 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5536, i32 %5371) #8
  store <4 x i32> %5537, <4 x i32>* %5245, align 16
  %5538 = mul <4 x i32> %5532, %5392
  %5539 = mul <4 x i32> %5396, %5529
  %5540 = sub <4 x i32> %5408, %5539
  %5541 = add <4 x i32> %5540, %5538
  %5542 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5541, i32 %5371) #8
  store <4 x i32> %5542, <4 x i32>* %5281, align 16
  %5543 = mul <4 x i32> %5530, %5400
  %5544 = mul <4 x i32> %5531, %5404
  %5545 = add <4 x i32> %5543, %5408
  %5546 = add <4 x i32> %5545, %5544
  %5547 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5546, i32 %5371) #8
  store <4 x i32> %5547, <4 x i32>* %5269, align 16
  %5548 = mul <4 x i32> %5531, %5400
  %5549 = mul <4 x i32> %5404, %5530
  %5550 = sub <4 x i32> %5408, %5549
  %5551 = add <4 x i32> %5550, %5548
  %5552 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5551, i32 %5371) #8
  store <4 x i32> %5552, <4 x i32>* %5257, align 16
  store <4 x i32> %5515, <4 x i32>* %5239, align 16
  store <4 x i32> %5518, <4 x i32>* %5263, align 16
  store <4 x i32> %5523, <4 x i32>* %5251, align 16
  store <4 x i32> %5528, <4 x i32>* %5275, align 16
  %5553 = shufflevector <4 x i32> %5443, <4 x i32> %5465, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5554 = bitcast <4 x i32> %5553 to <2 x i64>
  %5555 = shufflevector <4 x i32> %5443, <4 x i32> %5465, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5556 = bitcast <4 x i32> %5555 to <2 x i64>
  %5557 = shufflevector <4 x i32> %5451, <4 x i32> %5480, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5558 = bitcast <4 x i32> %5557 to <2 x i64>
  %5559 = shufflevector <4 x i32> %5451, <4 x i32> %5480, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5560 = bitcast <4 x i32> %5559 to <2 x i64>
  %5561 = shufflevector <2 x i64> %5554, <2 x i64> %5558, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5561, <2 x i64>* %5092, align 16
  %5562 = shufflevector <2 x i64> %5554, <2 x i64> %5558, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5562, <2 x i64>* %5107, align 16
  %5563 = shufflevector <2 x i64> %5556, <2 x i64> %5560, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5563, <2 x i64>* %5119, align 16
  %5564 = shufflevector <2 x i64> %5556, <2 x i64> %5560, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5564, <2 x i64>* %5131, align 16
  %5565 = shufflevector <4 x i32> %5515, <4 x i32> %5537, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5566 = bitcast <4 x i32> %5565 to <2 x i64>
  %5567 = shufflevector <4 x i32> %5515, <4 x i32> %5537, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5568 = bitcast <4 x i32> %5567 to <2 x i64>
  %5569 = shufflevector <4 x i32> %5523, <4 x i32> %5552, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5570 = bitcast <4 x i32> %5569 to <2 x i64>
  %5571 = shufflevector <4 x i32> %5523, <4 x i32> %5552, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5572 = bitcast <4 x i32> %5571 to <2 x i64>
  %5573 = shufflevector <2 x i64> %5566, <2 x i64> %5570, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5573, <2 x i64>* %5144, align 16
  %5574 = shufflevector <2 x i64> %5566, <2 x i64> %5570, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5574, <2 x i64>* %5155, align 16
  %5575 = shufflevector <2 x i64> %5568, <2 x i64> %5572, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5575, <2 x i64>* %5166, align 16
  %5576 = shufflevector <2 x i64> %5568, <2 x i64> %5572, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5576, <2 x i64>* %5177, align 16
  %5577 = shufflevector <4 x i32> %5446, <4 x i32> %5475, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5578 = bitcast <4 x i32> %5577 to <2 x i64>
  %5579 = shufflevector <4 x i32> %5446, <4 x i32> %5475, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5580 = bitcast <4 x i32> %5579 to <2 x i64>
  %5581 = shufflevector <4 x i32> %5456, <4 x i32> %5470, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5582 = bitcast <4 x i32> %5581 to <2 x i64>
  %5583 = shufflevector <4 x i32> %5456, <4 x i32> %5470, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5584 = bitcast <4 x i32> %5583 to <2 x i64>
  %5585 = shufflevector <2 x i64> %5578, <2 x i64> %5582, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5585, <2 x i64>* %5101, align 16
  %5586 = shufflevector <2 x i64> %5578, <2 x i64> %5582, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5586, <2 x i64>* %5113, align 16
  %5587 = shufflevector <2 x i64> %5580, <2 x i64> %5584, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5587, <2 x i64>* %5125, align 16
  %5588 = shufflevector <2 x i64> %5580, <2 x i64> %5584, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5588, <2 x i64>* %5137, align 16
  %5589 = shufflevector <4 x i32> %5518, <4 x i32> %5547, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5590 = bitcast <4 x i32> %5589 to <2 x i64>
  %5591 = shufflevector <4 x i32> %5518, <4 x i32> %5547, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5592 = bitcast <4 x i32> %5591 to <2 x i64>
  %5593 = shufflevector <4 x i32> %5528, <4 x i32> %5542, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5594 = bitcast <4 x i32> %5593 to <2 x i64>
  %5595 = shufflevector <4 x i32> %5528, <4 x i32> %5542, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5596 = bitcast <4 x i32> %5595 to <2 x i64>
  %5597 = shufflevector <2 x i64> %5590, <2 x i64> %5594, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5597, <2 x i64>* %5149, align 16
  %5598 = shufflevector <2 x i64> %5590, <2 x i64> %5594, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5598, <2 x i64>* %5160, align 16
  %5599 = shufflevector <2 x i64> %5592, <2 x i64> %5596, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5599, <2 x i64>* %5171, align 16
  %5600 = shufflevector <2 x i64> %5592, <2 x i64> %5596, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5600, <2 x i64>* %5182, align 16
  br label %7057

5601:                                             ; preds = %5
  %5602 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %5603 = load i8, i8* %10, align 1
  %5604 = sext i8 %5603 to i32
  %5605 = bitcast i16* %0 to <2 x i64>*
  %5606 = load <2 x i64>, <2 x i64>* %5605, align 16
  store <2 x i64> %5606, <2 x i64>* %5602, align 16
  %5607 = sext i32 %2 to i64
  %5608 = getelementptr inbounds i16, i16* %0, i64 %5607
  %5609 = bitcast i16* %5608 to <2 x i64>*
  %5610 = load <2 x i64>, <2 x i64>* %5609, align 16
  %5611 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %5610, <2 x i64>* %5611, align 16
  %5612 = shl nsw i32 %2, 1
  %5613 = sext i32 %5612 to i64
  %5614 = getelementptr inbounds i16, i16* %0, i64 %5613
  %5615 = bitcast i16* %5614 to <2 x i64>*
  %5616 = load <2 x i64>, <2 x i64>* %5615, align 16
  %5617 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %5616, <2 x i64>* %5617, align 16
  %5618 = mul nsw i32 %2, 3
  %5619 = sext i32 %5618 to i64
  %5620 = getelementptr inbounds i16, i16* %0, i64 %5619
  %5621 = bitcast i16* %5620 to <2 x i64>*
  %5622 = load <2 x i64>, <2 x i64>* %5621, align 16
  %5623 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %5622, <2 x i64>* %5623, align 16
  %5624 = shl nsw i32 %2, 2
  %5625 = sext i32 %5624 to i64
  %5626 = getelementptr inbounds i16, i16* %0, i64 %5625
  %5627 = bitcast i16* %5626 to <2 x i64>*
  %5628 = load <2 x i64>, <2 x i64>* %5627, align 16
  %5629 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %5628, <2 x i64>* %5629, align 16
  %5630 = mul nsw i32 %2, 5
  %5631 = sext i32 %5630 to i64
  %5632 = getelementptr inbounds i16, i16* %0, i64 %5631
  %5633 = bitcast i16* %5632 to <2 x i64>*
  %5634 = load <2 x i64>, <2 x i64>* %5633, align 16
  %5635 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %5634, <2 x i64>* %5635, align 16
  %5636 = mul nsw i32 %2, 6
  %5637 = sext i32 %5636 to i64
  %5638 = getelementptr inbounds i16, i16* %0, i64 %5637
  %5639 = bitcast i16* %5638 to <2 x i64>*
  %5640 = load <2 x i64>, <2 x i64>* %5639, align 16
  %5641 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %5640, <2 x i64>* %5641, align 16
  %5642 = mul nsw i32 %2, 7
  %5643 = sext i32 %5642 to i64
  %5644 = getelementptr inbounds i16, i16* %0, i64 %5643
  %5645 = bitcast i16* %5644 to <2 x i64>*
  %5646 = load <2 x i64>, <2 x i64>* %5645, align 16
  %5647 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %5648 = bitcast <2 x i64>* %5647 to <4 x i32>*
  %5649 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %5650 = shufflevector <2 x i64> %5628, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5651 = bitcast <2 x i64> %5628 to <8 x i16>
  %5652 = shufflevector <8 x i16> %5651, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5653 = sext <4 x i16> %5652 to <4 x i32>
  %5654 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %5655 = bitcast <2 x i64>* %5654 to <4 x i32>*
  %5656 = bitcast <2 x i64> %5650 to <8 x i16>
  %5657 = shufflevector <8 x i16> %5656, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5658 = sext <4 x i16> %5657 to <4 x i32>
  %5659 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %5660 = bitcast <2 x i64>* %5659 to <4 x i32>*
  %5661 = shufflevector <2 x i64> %5634, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5662 = bitcast <2 x i64> %5634 to <8 x i16>
  %5663 = shufflevector <8 x i16> %5662, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5664 = sext <4 x i16> %5663 to <4 x i32>
  %5665 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %5666 = bitcast <2 x i64>* %5665 to <4 x i32>*
  %5667 = bitcast <2 x i64> %5661 to <8 x i16>
  %5668 = shufflevector <8 x i16> %5667, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5669 = sext <4 x i16> %5668 to <4 x i32>
  %5670 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %5671 = bitcast <2 x i64>* %5670 to <4 x i32>*
  %5672 = shufflevector <2 x i64> %5640, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5673 = bitcast <2 x i64> %5640 to <8 x i16>
  %5674 = shufflevector <8 x i16> %5673, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5675 = sext <4 x i16> %5674 to <4 x i32>
  %5676 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %5677 = bitcast <2 x i64>* %5676 to <4 x i32>*
  %5678 = bitcast <2 x i64> %5672 to <8 x i16>
  %5679 = shufflevector <8 x i16> %5678, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5680 = sext <4 x i16> %5679 to <4 x i32>
  %5681 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %5682 = bitcast <2 x i64>* %5681 to <4 x i32>*
  %5683 = shufflevector <2 x i64> %5646, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5684 = bitcast <2 x i64> %5646 to <8 x i16>
  %5685 = shufflevector <8 x i16> %5684, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5686 = sext <4 x i16> %5685 to <4 x i32>
  %5687 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %5688 = bitcast <2 x i64>* %5687 to <4 x i32>*
  %5689 = bitcast <2 x i64> %5683 to <8 x i16>
  %5690 = shufflevector <8 x i16> %5689, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5691 = sext <4 x i16> %5690 to <4 x i32>
  %5692 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %5693 = bitcast <2 x i64>* %5692 to <4 x i32>*
  %5694 = shufflevector <2 x i64> %5622, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5695 = bitcast <2 x i64> %5622 to <8 x i16>
  %5696 = shufflevector <8 x i16> %5695, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5697 = sext <4 x i16> %5696 to <4 x i32>
  %5698 = bitcast <2 x i64>* %5641 to <4 x i32>*
  %5699 = bitcast <2 x i64> %5694 to <8 x i16>
  %5700 = shufflevector <8 x i16> %5699, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5701 = sext <4 x i16> %5700 to <4 x i32>
  %5702 = shufflevector <2 x i64> %5616, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5703 = bitcast <2 x i64> %5616 to <8 x i16>
  %5704 = shufflevector <8 x i16> %5703, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5705 = sext <4 x i16> %5704 to <4 x i32>
  %5706 = bitcast <2 x i64>* %5629 to <4 x i32>*
  %5707 = bitcast <2 x i64> %5702 to <8 x i16>
  %5708 = shufflevector <8 x i16> %5707, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5709 = sext <4 x i16> %5708 to <4 x i32>
  %5710 = bitcast <2 x i64>* %5635 to <4 x i32>*
  %5711 = shufflevector <2 x i64> %5610, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5712 = bitcast <2 x i64> %5610 to <8 x i16>
  %5713 = shufflevector <8 x i16> %5712, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5714 = sext <4 x i16> %5713 to <4 x i32>
  %5715 = bitcast <2 x i64>* %5617 to <4 x i32>*
  %5716 = bitcast <2 x i64> %5711 to <8 x i16>
  %5717 = shufflevector <8 x i16> %5716, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5718 = sext <4 x i16> %5717 to <4 x i32>
  %5719 = bitcast <2 x i64>* %5623 to <4 x i32>*
  %5720 = shufflevector <2 x i64> %5606, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %5721 = bitcast <2 x i64> %5606 to <8 x i16>
  %5722 = shufflevector <8 x i16> %5721, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5723 = sext <4 x i16> %5722 to <4 x i32>
  %5724 = bitcast <2 x i64> %5720 to <8 x i16>
  %5725 = shufflevector <8 x i16> %5724, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5726 = sext <4 x i16> %5725 to <4 x i32>
  %5727 = bitcast <2 x i64>* %5611 to <4 x i32>*
  %5728 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5723, i32 %5604) #8
  store <4 x i32> %5728, <4 x i32>* %5649, align 16
  %5729 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5726, i32 %5604) #8
  store <4 x i32> %5729, <4 x i32>* %5727, align 16
  %5730 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5714, i32 %5604) #8
  store <4 x i32> %5730, <4 x i32>* %5715, align 16
  %5731 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5718, i32 %5604) #8
  store <4 x i32> %5731, <4 x i32>* %5719, align 16
  %5732 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5705, i32 %5604) #8
  store <4 x i32> %5732, <4 x i32>* %5706, align 16
  %5733 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5709, i32 %5604) #8
  store <4 x i32> %5733, <4 x i32>* %5710, align 16
  %5734 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5697, i32 %5604) #8
  store <4 x i32> %5734, <4 x i32>* %5698, align 16
  %5735 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5701, i32 %5604) #8
  store <4 x i32> %5735, <4 x i32>* %5648, align 16
  %5736 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5653, i32 %5604) #8
  store <4 x i32> %5736, <4 x i32>* %5655, align 16
  %5737 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5658, i32 %5604) #8
  store <4 x i32> %5737, <4 x i32>* %5660, align 16
  %5738 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5664, i32 %5604) #8
  store <4 x i32> %5738, <4 x i32>* %5666, align 16
  %5739 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5669, i32 %5604) #8
  store <4 x i32> %5739, <4 x i32>* %5671, align 16
  %5740 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5675, i32 %5604) #8
  store <4 x i32> %5740, <4 x i32>* %5677, align 16
  %5741 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5680, i32 %5604) #8
  store <4 x i32> %5741, <4 x i32>* %5682, align 16
  %5742 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5686, i32 %5604) #8
  store <4 x i32> %5742, <4 x i32>* %5688, align 16
  %5743 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %5691, i32 %5604) #8
  store <4 x i32> %5743, <4 x i32>* %5693, align 16
  %5744 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  %5745 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %5746 = sext i8 %5745 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %5602, <2 x i64>* nonnull %5744, i32 %5746, i32 2)
  %5747 = getelementptr inbounds i8, i8* %10, i64 1
  %5748 = load i8, i8* %5747, align 1
  %5749 = sext i8 %5748 to i32
  %5750 = sub nsw i32 0, %5749
  %5751 = xor i32 %5749, -1
  %5752 = shl i32 1, %5751
  %5753 = insertelement <4 x i32> undef, i32 %5752, i32 0
  %5754 = shufflevector <4 x i32> %5753, <4 x i32> undef, <4 x i32> zeroinitializer
  %5755 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  %5756 = load <4 x i32>, <4 x i32>* %5755, align 16
  %5757 = add <4 x i32> %5754, %5756
  %5758 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %5759 = bitcast <2 x i64>* %5758 to <4 x i32>*
  %5760 = load <4 x i32>, <4 x i32>* %5759, align 16
  %5761 = add <4 x i32> %5754, %5760
  %5762 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %5763 = bitcast <2 x i64>* %5762 to <4 x i32>*
  %5764 = load <4 x i32>, <4 x i32>* %5763, align 16
  %5765 = add <4 x i32> %5754, %5764
  %5766 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %5767 = bitcast <2 x i64>* %5766 to <4 x i32>*
  %5768 = load <4 x i32>, <4 x i32>* %5767, align 16
  %5769 = add <4 x i32> %5768, %5754
  %5770 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %5771 = bitcast <2 x i64>* %5770 to <4 x i32>*
  %5772 = load <4 x i32>, <4 x i32>* %5771, align 16
  %5773 = add <4 x i32> %5772, %5754
  %5774 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %5775 = bitcast <2 x i64>* %5774 to <4 x i32>*
  %5776 = load <4 x i32>, <4 x i32>* %5775, align 16
  %5777 = add <4 x i32> %5776, %5754
  %5778 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %5779 = bitcast <2 x i64>* %5778 to <4 x i32>*
  %5780 = load <4 x i32>, <4 x i32>* %5779, align 16
  %5781 = add <4 x i32> %5780, %5754
  %5782 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %5783 = bitcast <2 x i64>* %5782 to <4 x i32>*
  %5784 = load <4 x i32>, <4 x i32>* %5783, align 16
  %5785 = add <4 x i32> %5784, %5754
  %5786 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %5787 = bitcast <2 x i64>* %5786 to <4 x i32>*
  %5788 = load <4 x i32>, <4 x i32>* %5787, align 16
  %5789 = add <4 x i32> %5788, %5754
  %5790 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %5791 = bitcast <2 x i64>* %5790 to <4 x i32>*
  %5792 = load <4 x i32>, <4 x i32>* %5791, align 16
  %5793 = add <4 x i32> %5792, %5754
  %5794 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %5795 = bitcast <2 x i64>* %5794 to <4 x i32>*
  %5796 = load <4 x i32>, <4 x i32>* %5795, align 16
  %5797 = add <4 x i32> %5796, %5754
  %5798 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %5799 = bitcast <2 x i64>* %5798 to <4 x i32>*
  %5800 = load <4 x i32>, <4 x i32>* %5799, align 16
  %5801 = add <4 x i32> %5800, %5754
  %5802 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %5803 = bitcast <2 x i64>* %5802 to <4 x i32>*
  %5804 = load <4 x i32>, <4 x i32>* %5803, align 16
  %5805 = add <4 x i32> %5804, %5754
  %5806 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %5807 = bitcast <2 x i64>* %5806 to <4 x i32>*
  %5808 = load <4 x i32>, <4 x i32>* %5807, align 16
  %5809 = add <4 x i32> %5808, %5754
  %5810 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %5811 = bitcast <2 x i64>* %5810 to <4 x i32>*
  %5812 = load <4 x i32>, <4 x i32>* %5811, align 16
  %5813 = add <4 x i32> %5812, %5754
  %5814 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %5815 = bitcast <2 x i64>* %5814 to <4 x i32>*
  %5816 = load <4 x i32>, <4 x i32>* %5815, align 16
  %5817 = add <4 x i32> %5816, %5754
  %5818 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5757, i32 %5750) #8
  %5819 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5761, i32 %5750) #8
  %5820 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5765, i32 %5750) #8
  store <4 x i32> %5820, <4 x i32>* %5763, align 16
  %5821 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5769, i32 %5750) #8
  store <4 x i32> %5821, <4 x i32>* %5767, align 16
  %5822 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5773, i32 %5750) #8
  store <4 x i32> %5822, <4 x i32>* %5771, align 16
  %5823 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5777, i32 %5750) #8
  store <4 x i32> %5823, <4 x i32>* %5775, align 16
  %5824 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5781, i32 %5750) #8
  store <4 x i32> %5824, <4 x i32>* %5779, align 16
  %5825 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5785, i32 %5750) #8
  store <4 x i32> %5825, <4 x i32>* %5783, align 16
  %5826 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5789, i32 %5750) #8
  store <4 x i32> %5826, <4 x i32>* %5787, align 16
  %5827 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5793, i32 %5750) #8
  store <4 x i32> %5827, <4 x i32>* %5791, align 16
  %5828 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5797, i32 %5750) #8
  store <4 x i32> %5828, <4 x i32>* %5795, align 16
  %5829 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5801, i32 %5750) #8
  store <4 x i32> %5829, <4 x i32>* %5799, align 16
  %5830 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5805, i32 %5750) #8
  store <4 x i32> %5830, <4 x i32>* %5803, align 16
  %5831 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5809, i32 %5750) #8
  store <4 x i32> %5831, <4 x i32>* %5807, align 16
  %5832 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5813, i32 %5750) #8
  store <4 x i32> %5832, <4 x i32>* %5811, align 16
  %5833 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5817, i32 %5750) #8
  store <4 x i32> %5833, <4 x i32>* %5815, align 16
  %5834 = shufflevector <4 x i32> %5818, <4 x i32> %5820, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5835 = bitcast <4 x i32> %5834 to <2 x i64>
  %5836 = shufflevector <4 x i32> %5818, <4 x i32> %5820, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5837 = bitcast <4 x i32> %5836 to <2 x i64>
  %5838 = shufflevector <4 x i32> %5822, <4 x i32> %5824, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5839 = bitcast <4 x i32> %5838 to <2 x i64>
  %5840 = shufflevector <4 x i32> %5822, <4 x i32> %5824, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5841 = bitcast <4 x i32> %5840 to <2 x i64>
  %5842 = shufflevector <2 x i64> %5835, <2 x i64> %5839, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5842, <2 x i64>* %5602, align 16
  %5843 = shufflevector <2 x i64> %5835, <2 x i64> %5839, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5843, <2 x i64>* %5617, align 16
  %5844 = shufflevector <2 x i64> %5837, <2 x i64> %5841, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5844, <2 x i64>* %5629, align 16
  %5845 = shufflevector <2 x i64> %5837, <2 x i64> %5841, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5845, <2 x i64>* %5641, align 16
  %5846 = shufflevector <4 x i32> %5819, <4 x i32> %5821, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5847 = bitcast <4 x i32> %5846 to <2 x i64>
  %5848 = shufflevector <4 x i32> %5819, <4 x i32> %5821, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5849 = bitcast <4 x i32> %5848 to <2 x i64>
  %5850 = shufflevector <4 x i32> %5823, <4 x i32> %5825, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5851 = bitcast <4 x i32> %5850 to <2 x i64>
  %5852 = shufflevector <4 x i32> %5823, <4 x i32> %5825, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5853 = bitcast <4 x i32> %5852 to <2 x i64>
  %5854 = shufflevector <2 x i64> %5847, <2 x i64> %5851, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5854, <2 x i64>* %5654, align 16
  %5855 = shufflevector <2 x i64> %5847, <2 x i64> %5851, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5855, <2 x i64>* %5665, align 16
  %5856 = shufflevector <2 x i64> %5849, <2 x i64> %5853, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5856, <2 x i64>* %5676, align 16
  %5857 = shufflevector <2 x i64> %5849, <2 x i64> %5853, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5857, <2 x i64>* %5687, align 16
  %5858 = shufflevector <4 x i32> %5826, <4 x i32> %5828, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5859 = bitcast <4 x i32> %5858 to <2 x i64>
  %5860 = shufflevector <4 x i32> %5826, <4 x i32> %5828, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5861 = bitcast <4 x i32> %5860 to <2 x i64>
  %5862 = shufflevector <4 x i32> %5830, <4 x i32> %5832, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5863 = bitcast <4 x i32> %5862 to <2 x i64>
  %5864 = shufflevector <4 x i32> %5830, <4 x i32> %5832, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5865 = bitcast <4 x i32> %5864 to <2 x i64>
  %5866 = shufflevector <2 x i64> %5859, <2 x i64> %5863, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5866, <2 x i64>* %5611, align 16
  %5867 = shufflevector <2 x i64> %5859, <2 x i64> %5863, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5867, <2 x i64>* %5623, align 16
  %5868 = shufflevector <2 x i64> %5861, <2 x i64> %5865, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5868, <2 x i64>* %5635, align 16
  %5869 = shufflevector <2 x i64> %5861, <2 x i64> %5865, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5869, <2 x i64>* %5647, align 16
  %5870 = shufflevector <4 x i32> %5827, <4 x i32> %5829, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5871 = bitcast <4 x i32> %5870 to <2 x i64>
  %5872 = shufflevector <4 x i32> %5827, <4 x i32> %5829, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5873 = bitcast <4 x i32> %5872 to <2 x i64>
  %5874 = shufflevector <4 x i32> %5831, <4 x i32> %5833, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5875 = bitcast <4 x i32> %5874 to <2 x i64>
  %5876 = shufflevector <4 x i32> %5831, <4 x i32> %5833, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5877 = bitcast <4 x i32> %5876 to <2 x i64>
  %5878 = shufflevector <2 x i64> %5871, <2 x i64> %5875, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5878, <2 x i64>* %5659, align 16
  %5879 = shufflevector <2 x i64> %5871, <2 x i64> %5875, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5879, <2 x i64>* %5670, align 16
  %5880 = shufflevector <2 x i64> %5873, <2 x i64> %5877, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5880, <2 x i64>* %5681, align 16
  %5881 = shufflevector <2 x i64> %5873, <2 x i64> %5877, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5881, <2 x i64>* %5692, align 16
  %5882 = bitcast <2 x i64> %5842 to <4 x i32>
  %5883 = shl <4 x i32> %5882, <i32 1, i32 1, i32 1, i32 1>
  %5884 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  store <4 x i32> %5883, <4 x i32>* %5884, align 16
  %5885 = bitcast <2 x i64> %5866 to <4 x i32>
  %5886 = shl <4 x i32> %5885, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5886, <4 x i32>* %5759, align 16
  %5887 = bitcast <2 x i64> %5843 to <4 x i32>
  %5888 = shl <4 x i32> %5887, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5888, <4 x i32>* %5763, align 16
  %5889 = bitcast <2 x i64> %5867 to <4 x i32>
  %5890 = shl <4 x i32> %5889, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5890, <4 x i32>* %5767, align 16
  %5891 = bitcast <2 x i64> %5844 to <4 x i32>
  %5892 = shl <4 x i32> %5891, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5892, <4 x i32>* %5771, align 16
  %5893 = bitcast <2 x i64> %5868 to <4 x i32>
  %5894 = shl <4 x i32> %5893, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5894, <4 x i32>* %5775, align 16
  %5895 = bitcast <2 x i64> %5845 to <4 x i32>
  %5896 = shl <4 x i32> %5895, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5896, <4 x i32>* %5779, align 16
  %5897 = bitcast <2 x i64> %5869 to <4 x i32>
  %5898 = shl <4 x i32> %5897, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5898, <4 x i32>* %5783, align 16
  %5899 = bitcast <2 x i64> %5854 to <4 x i32>
  %5900 = shl <4 x i32> %5899, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5900, <4 x i32>* %5787, align 16
  %5901 = bitcast <2 x i64> %5878 to <4 x i32>
  %5902 = shl <4 x i32> %5901, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5902, <4 x i32>* %5791, align 16
  %5903 = bitcast <2 x i64> %5855 to <4 x i32>
  %5904 = shl <4 x i32> %5903, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5904, <4 x i32>* %5795, align 16
  %5905 = bitcast <2 x i64> %5879 to <4 x i32>
  %5906 = shl <4 x i32> %5905, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5906, <4 x i32>* %5799, align 16
  %5907 = bitcast <2 x i64> %5856 to <4 x i32>
  %5908 = shl <4 x i32> %5907, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5908, <4 x i32>* %5803, align 16
  %5909 = bitcast <2 x i64> %5880 to <4 x i32>
  %5910 = shl <4 x i32> %5909, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5910, <4 x i32>* %5807, align 16
  %5911 = bitcast <2 x i64> %5857 to <4 x i32>
  %5912 = shl <4 x i32> %5911, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5912, <4 x i32>* %5811, align 16
  %5913 = bitcast <2 x i64> %5881 to <4 x i32>
  %5914 = shl <4 x i32> %5913, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %5914, <4 x i32>* %5815, align 16
  %5915 = shufflevector <4 x i32> %5883, <4 x i32> %5888, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5916 = bitcast <4 x i32> %5915 to <2 x i64>
  %5917 = shufflevector <4 x i32> %5883, <4 x i32> %5888, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5918 = bitcast <4 x i32> %5917 to <2 x i64>
  %5919 = shufflevector <4 x i32> %5892, <4 x i32> %5896, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5920 = bitcast <4 x i32> %5919 to <2 x i64>
  %5921 = shufflevector <4 x i32> %5892, <4 x i32> %5896, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5922 = bitcast <4 x i32> %5921 to <2 x i64>
  %5923 = shufflevector <2 x i64> %5916, <2 x i64> %5920, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5923, <2 x i64>* %5602, align 16
  %5924 = shufflevector <2 x i64> %5916, <2 x i64> %5920, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5924, <2 x i64>* %5617, align 16
  %5925 = shufflevector <2 x i64> %5918, <2 x i64> %5922, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5925, <2 x i64>* %5629, align 16
  %5926 = shufflevector <2 x i64> %5918, <2 x i64> %5922, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5926, <2 x i64>* %5641, align 16
  %5927 = shufflevector <4 x i32> %5886, <4 x i32> %5890, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5928 = bitcast <4 x i32> %5927 to <2 x i64>
  %5929 = shufflevector <4 x i32> %5886, <4 x i32> %5890, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5930 = bitcast <4 x i32> %5929 to <2 x i64>
  %5931 = shufflevector <4 x i32> %5894, <4 x i32> %5898, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5932 = bitcast <4 x i32> %5931 to <2 x i64>
  %5933 = shufflevector <4 x i32> %5894, <4 x i32> %5898, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5934 = bitcast <4 x i32> %5933 to <2 x i64>
  %5935 = shufflevector <2 x i64> %5928, <2 x i64> %5932, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5935, <2 x i64>* %5654, align 16
  %5936 = shufflevector <2 x i64> %5928, <2 x i64> %5932, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5936, <2 x i64>* %5665, align 16
  %5937 = shufflevector <2 x i64> %5930, <2 x i64> %5934, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5937, <2 x i64>* %5676, align 16
  %5938 = shufflevector <2 x i64> %5930, <2 x i64> %5934, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5938, <2 x i64>* %5687, align 16
  %5939 = shufflevector <4 x i32> %5900, <4 x i32> %5904, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5940 = bitcast <4 x i32> %5939 to <2 x i64>
  %5941 = shufflevector <4 x i32> %5900, <4 x i32> %5904, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5942 = bitcast <4 x i32> %5941 to <2 x i64>
  %5943 = shufflevector <4 x i32> %5908, <4 x i32> %5912, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5944 = bitcast <4 x i32> %5943 to <2 x i64>
  %5945 = shufflevector <4 x i32> %5908, <4 x i32> %5912, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5946 = bitcast <4 x i32> %5945 to <2 x i64>
  %5947 = shufflevector <2 x i64> %5940, <2 x i64> %5944, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5947, <2 x i64>* %5611, align 16
  %5948 = shufflevector <2 x i64> %5940, <2 x i64> %5944, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5948, <2 x i64>* %5623, align 16
  %5949 = shufflevector <2 x i64> %5942, <2 x i64> %5946, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5949, <2 x i64>* %5635, align 16
  %5950 = shufflevector <2 x i64> %5942, <2 x i64> %5946, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5950, <2 x i64>* %5647, align 16
  %5951 = shufflevector <4 x i32> %5902, <4 x i32> %5906, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5952 = bitcast <4 x i32> %5951 to <2 x i64>
  %5953 = shufflevector <4 x i32> %5902, <4 x i32> %5906, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5954 = bitcast <4 x i32> %5953 to <2 x i64>
  %5955 = shufflevector <4 x i32> %5910, <4 x i32> %5914, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5956 = bitcast <4 x i32> %5955 to <2 x i64>
  %5957 = shufflevector <4 x i32> %5910, <4 x i32> %5914, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5958 = bitcast <4 x i32> %5957 to <2 x i64>
  %5959 = shufflevector <2 x i64> %5952, <2 x i64> %5956, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5959, <2 x i64>* %5659, align 16
  %5960 = shufflevector <2 x i64> %5952, <2 x i64> %5956, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5960, <2 x i64>* %5670, align 16
  %5961 = shufflevector <2 x i64> %5954, <2 x i64> %5958, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5961, <2 x i64>* %5681, align 16
  %5962 = shufflevector <2 x i64> %5954, <2 x i64> %5958, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5962, <2 x i64>* %5692, align 16
  br label %7057

5963:                                             ; preds = %5
  %5964 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %5965 = load i8, i8* %10, align 1
  %5966 = sext i8 %5965 to i32
  %5967 = bitcast i16* %0 to <2 x i64>*
  %5968 = load <2 x i64>, <2 x i64>* %5967, align 16
  store <2 x i64> %5968, <2 x i64>* %5964, align 16
  %5969 = sext i32 %2 to i64
  %5970 = getelementptr inbounds i16, i16* %0, i64 %5969
  %5971 = bitcast i16* %5970 to <2 x i64>*
  %5972 = load <2 x i64>, <2 x i64>* %5971, align 16
  %5973 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %5972, <2 x i64>* %5973, align 16
  %5974 = shl nsw i32 %2, 1
  %5975 = sext i32 %5974 to i64
  %5976 = getelementptr inbounds i16, i16* %0, i64 %5975
  %5977 = bitcast i16* %5976 to <2 x i64>*
  %5978 = load <2 x i64>, <2 x i64>* %5977, align 16
  %5979 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %5978, <2 x i64>* %5979, align 16
  %5980 = mul nsw i32 %2, 3
  %5981 = sext i32 %5980 to i64
  %5982 = getelementptr inbounds i16, i16* %0, i64 %5981
  %5983 = bitcast i16* %5982 to <2 x i64>*
  %5984 = load <2 x i64>, <2 x i64>* %5983, align 16
  %5985 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %5984, <2 x i64>* %5985, align 16
  %5986 = shl nsw i32 %2, 2
  %5987 = sext i32 %5986 to i64
  %5988 = getelementptr inbounds i16, i16* %0, i64 %5987
  %5989 = bitcast i16* %5988 to <2 x i64>*
  %5990 = load <2 x i64>, <2 x i64>* %5989, align 16
  %5991 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %5990, <2 x i64>* %5991, align 16
  %5992 = mul nsw i32 %2, 5
  %5993 = sext i32 %5992 to i64
  %5994 = getelementptr inbounds i16, i16* %0, i64 %5993
  %5995 = bitcast i16* %5994 to <2 x i64>*
  %5996 = load <2 x i64>, <2 x i64>* %5995, align 16
  %5997 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %5996, <2 x i64>* %5997, align 16
  %5998 = mul nsw i32 %2, 6
  %5999 = sext i32 %5998 to i64
  %6000 = getelementptr inbounds i16, i16* %0, i64 %5999
  %6001 = bitcast i16* %6000 to <2 x i64>*
  %6002 = load <2 x i64>, <2 x i64>* %6001, align 16
  %6003 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %6002, <2 x i64>* %6003, align 16
  %6004 = mul nsw i32 %2, 7
  %6005 = sext i32 %6004 to i64
  %6006 = getelementptr inbounds i16, i16* %0, i64 %6005
  %6007 = bitcast i16* %6006 to <2 x i64>*
  %6008 = load <2 x i64>, <2 x i64>* %6007, align 16
  %6009 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %6010 = bitcast <2 x i64>* %6009 to <4 x i32>*
  %6011 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %6012 = shufflevector <2 x i64> %5990, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6013 = bitcast <2 x i64> %5990 to <8 x i16>
  %6014 = shufflevector <8 x i16> %6013, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6015 = sext <4 x i16> %6014 to <4 x i32>
  %6016 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %6017 = bitcast <2 x i64>* %6016 to <4 x i32>*
  %6018 = bitcast <2 x i64> %6012 to <8 x i16>
  %6019 = shufflevector <8 x i16> %6018, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6020 = sext <4 x i16> %6019 to <4 x i32>
  %6021 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %6022 = bitcast <2 x i64>* %6021 to <4 x i32>*
  %6023 = shufflevector <2 x i64> %5996, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6024 = bitcast <2 x i64> %5996 to <8 x i16>
  %6025 = shufflevector <8 x i16> %6024, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6026 = sext <4 x i16> %6025 to <4 x i32>
  %6027 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %6028 = bitcast <2 x i64>* %6027 to <4 x i32>*
  %6029 = bitcast <2 x i64> %6023 to <8 x i16>
  %6030 = shufflevector <8 x i16> %6029, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6031 = sext <4 x i16> %6030 to <4 x i32>
  %6032 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %6033 = bitcast <2 x i64>* %6032 to <4 x i32>*
  %6034 = shufflevector <2 x i64> %6002, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6035 = bitcast <2 x i64> %6002 to <8 x i16>
  %6036 = shufflevector <8 x i16> %6035, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6037 = sext <4 x i16> %6036 to <4 x i32>
  %6038 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %6039 = bitcast <2 x i64>* %6038 to <4 x i32>*
  %6040 = bitcast <2 x i64> %6034 to <8 x i16>
  %6041 = shufflevector <8 x i16> %6040, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6042 = sext <4 x i16> %6041 to <4 x i32>
  %6043 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %6044 = bitcast <2 x i64>* %6043 to <4 x i32>*
  %6045 = shufflevector <2 x i64> %6008, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6046 = bitcast <2 x i64> %6008 to <8 x i16>
  %6047 = shufflevector <8 x i16> %6046, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6048 = sext <4 x i16> %6047 to <4 x i32>
  %6049 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %6050 = bitcast <2 x i64>* %6049 to <4 x i32>*
  %6051 = bitcast <2 x i64> %6045 to <8 x i16>
  %6052 = shufflevector <8 x i16> %6051, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6053 = sext <4 x i16> %6052 to <4 x i32>
  %6054 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %6055 = bitcast <2 x i64>* %6054 to <4 x i32>*
  %6056 = shufflevector <2 x i64> %5984, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6057 = bitcast <2 x i64> %5984 to <8 x i16>
  %6058 = shufflevector <8 x i16> %6057, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6059 = sext <4 x i16> %6058 to <4 x i32>
  %6060 = bitcast <2 x i64>* %6003 to <4 x i32>*
  %6061 = bitcast <2 x i64> %6056 to <8 x i16>
  %6062 = shufflevector <8 x i16> %6061, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6063 = sext <4 x i16> %6062 to <4 x i32>
  %6064 = shufflevector <2 x i64> %5978, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6065 = bitcast <2 x i64> %5978 to <8 x i16>
  %6066 = shufflevector <8 x i16> %6065, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6067 = sext <4 x i16> %6066 to <4 x i32>
  %6068 = bitcast <2 x i64>* %5991 to <4 x i32>*
  %6069 = bitcast <2 x i64> %6064 to <8 x i16>
  %6070 = shufflevector <8 x i16> %6069, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6071 = sext <4 x i16> %6070 to <4 x i32>
  %6072 = bitcast <2 x i64>* %5997 to <4 x i32>*
  %6073 = shufflevector <2 x i64> %5972, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6074 = bitcast <2 x i64> %5972 to <8 x i16>
  %6075 = shufflevector <8 x i16> %6074, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6076 = sext <4 x i16> %6075 to <4 x i32>
  %6077 = bitcast <2 x i64>* %5979 to <4 x i32>*
  %6078 = bitcast <2 x i64> %6073 to <8 x i16>
  %6079 = shufflevector <8 x i16> %6078, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6080 = sext <4 x i16> %6079 to <4 x i32>
  %6081 = bitcast <2 x i64>* %5985 to <4 x i32>*
  %6082 = shufflevector <2 x i64> %5968, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6083 = bitcast <2 x i64> %5968 to <8 x i16>
  %6084 = shufflevector <8 x i16> %6083, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6085 = sext <4 x i16> %6084 to <4 x i32>
  %6086 = bitcast <2 x i64> %6082 to <8 x i16>
  %6087 = shufflevector <8 x i16> %6086, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6088 = sext <4 x i16> %6087 to <4 x i32>
  %6089 = bitcast <2 x i64>* %5973 to <4 x i32>*
  %6090 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6085, i32 %5966) #8
  store <4 x i32> %6090, <4 x i32>* %6011, align 16
  %6091 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6088, i32 %5966) #8
  store <4 x i32> %6091, <4 x i32>* %6089, align 16
  %6092 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6076, i32 %5966) #8
  store <4 x i32> %6092, <4 x i32>* %6077, align 16
  %6093 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6080, i32 %5966) #8
  store <4 x i32> %6093, <4 x i32>* %6081, align 16
  %6094 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6067, i32 %5966) #8
  store <4 x i32> %6094, <4 x i32>* %6068, align 16
  %6095 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6071, i32 %5966) #8
  store <4 x i32> %6095, <4 x i32>* %6072, align 16
  %6096 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6059, i32 %5966) #8
  store <4 x i32> %6096, <4 x i32>* %6060, align 16
  %6097 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6063, i32 %5966) #8
  store <4 x i32> %6097, <4 x i32>* %6010, align 16
  %6098 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6015, i32 %5966) #8
  store <4 x i32> %6098, <4 x i32>* %6017, align 16
  %6099 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6020, i32 %5966) #8
  store <4 x i32> %6099, <4 x i32>* %6022, align 16
  %6100 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6026, i32 %5966) #8
  store <4 x i32> %6100, <4 x i32>* %6028, align 16
  %6101 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6031, i32 %5966) #8
  store <4 x i32> %6101, <4 x i32>* %6033, align 16
  %6102 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6037, i32 %5966) #8
  store <4 x i32> %6102, <4 x i32>* %6039, align 16
  %6103 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6042, i32 %5966) #8
  store <4 x i32> %6103, <4 x i32>* %6044, align 16
  %6104 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6048, i32 %5966) #8
  store <4 x i32> %6104, <4 x i32>* %6050, align 16
  %6105 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6053, i32 %5966) #8
  store <4 x i32> %6105, <4 x i32>* %6055, align 16
  %6106 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %6107 = shl <4 x i32> %6090, <i32 1, i32 1, i32 1, i32 1>
  %6108 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  %6109 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  store <4 x i32> %6107, <4 x i32>* %6109, align 16
  %6110 = shl <4 x i32> %6091, <i32 1, i32 1, i32 1, i32 1>
  %6111 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %6112 = bitcast <2 x i64>* %6111 to <4 x i32>*
  store <4 x i32> %6110, <4 x i32>* %6112, align 16
  %6113 = shl <4 x i32> %6092, <i32 1, i32 1, i32 1, i32 1>
  %6114 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %6115 = bitcast <2 x i64>* %6114 to <4 x i32>*
  store <4 x i32> %6113, <4 x i32>* %6115, align 16
  %6116 = shl <4 x i32> %6093, <i32 1, i32 1, i32 1, i32 1>
  %6117 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %6118 = bitcast <2 x i64>* %6117 to <4 x i32>*
  store <4 x i32> %6116, <4 x i32>* %6118, align 16
  %6119 = shl <4 x i32> %6094, <i32 1, i32 1, i32 1, i32 1>
  %6120 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %6121 = bitcast <2 x i64>* %6120 to <4 x i32>*
  store <4 x i32> %6119, <4 x i32>* %6121, align 16
  %6122 = shl <4 x i32> %6095, <i32 1, i32 1, i32 1, i32 1>
  %6123 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %6124 = bitcast <2 x i64>* %6123 to <4 x i32>*
  store <4 x i32> %6122, <4 x i32>* %6124, align 16
  %6125 = shl <4 x i32> %6096, <i32 1, i32 1, i32 1, i32 1>
  %6126 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %6127 = bitcast <2 x i64>* %6126 to <4 x i32>*
  store <4 x i32> %6125, <4 x i32>* %6127, align 16
  %6128 = shl <4 x i32> %6097, <i32 1, i32 1, i32 1, i32 1>
  %6129 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %6130 = bitcast <2 x i64>* %6129 to <4 x i32>*
  store <4 x i32> %6128, <4 x i32>* %6130, align 16
  %6131 = shl <4 x i32> %6098, <i32 1, i32 1, i32 1, i32 1>
  %6132 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %6133 = bitcast <2 x i64>* %6132 to <4 x i32>*
  store <4 x i32> %6131, <4 x i32>* %6133, align 16
  %6134 = shl <4 x i32> %6099, <i32 1, i32 1, i32 1, i32 1>
  %6135 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %6136 = bitcast <2 x i64>* %6135 to <4 x i32>*
  store <4 x i32> %6134, <4 x i32>* %6136, align 16
  %6137 = shl <4 x i32> %6100, <i32 1, i32 1, i32 1, i32 1>
  %6138 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %6139 = bitcast <2 x i64>* %6138 to <4 x i32>*
  store <4 x i32> %6137, <4 x i32>* %6139, align 16
  %6140 = shl <4 x i32> %6101, <i32 1, i32 1, i32 1, i32 1>
  %6141 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %6142 = bitcast <2 x i64>* %6141 to <4 x i32>*
  store <4 x i32> %6140, <4 x i32>* %6142, align 16
  %6143 = shl <4 x i32> %6102, <i32 1, i32 1, i32 1, i32 1>
  %6144 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %6145 = bitcast <2 x i64>* %6144 to <4 x i32>*
  store <4 x i32> %6143, <4 x i32>* %6145, align 16
  %6146 = shl <4 x i32> %6103, <i32 1, i32 1, i32 1, i32 1>
  %6147 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %6148 = bitcast <2 x i64>* %6147 to <4 x i32>*
  store <4 x i32> %6146, <4 x i32>* %6148, align 16
  %6149 = shl <4 x i32> %6104, <i32 1, i32 1, i32 1, i32 1>
  %6150 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %6151 = bitcast <2 x i64>* %6150 to <4 x i32>*
  store <4 x i32> %6149, <4 x i32>* %6151, align 16
  %6152 = shl <4 x i32> %6105, <i32 1, i32 1, i32 1, i32 1>
  %6153 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %6154 = bitcast <2 x i64>* %6153 to <4 x i32>*
  store <4 x i32> %6152, <4 x i32>* %6154, align 16
  %6155 = getelementptr inbounds i8, i8* %10, i64 1
  %6156 = load i8, i8* %6155, align 1
  %6157 = sext i8 %6156 to i32
  %6158 = sub nsw i32 0, %6157
  %6159 = xor i32 %6157, -1
  %6160 = shl i32 1, %6159
  %6161 = insertelement <4 x i32> undef, i32 %6160, i32 0
  %6162 = shufflevector <4 x i32> %6161, <4 x i32> undef, <4 x i32> zeroinitializer
  %6163 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  %6164 = add <4 x i32> %6162, %6107
  %6165 = add <4 x i32> %6162, %6110
  %6166 = add <4 x i32> %6162, %6113
  %6167 = add <4 x i32> %6116, %6162
  %6168 = add <4 x i32> %6119, %6162
  %6169 = add <4 x i32> %6122, %6162
  %6170 = add <4 x i32> %6125, %6162
  %6171 = add <4 x i32> %6128, %6162
  %6172 = add <4 x i32> %6131, %6162
  %6173 = add <4 x i32> %6134, %6162
  %6174 = add <4 x i32> %6137, %6162
  %6175 = add <4 x i32> %6140, %6162
  %6176 = add <4 x i32> %6143, %6162
  %6177 = add <4 x i32> %6146, %6162
  %6178 = add <4 x i32> %6149, %6162
  %6179 = add <4 x i32> %6152, %6162
  %6180 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6164, i32 %6158) #8
  store <4 x i32> %6180, <4 x i32>* %6163, align 16
  %6181 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6165, i32 %6158) #8
  store <4 x i32> %6181, <4 x i32>* %6112, align 16
  %6182 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6166, i32 %6158) #8
  store <4 x i32> %6182, <4 x i32>* %6115, align 16
  %6183 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6167, i32 %6158) #8
  store <4 x i32> %6183, <4 x i32>* %6118, align 16
  %6184 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6168, i32 %6158) #8
  store <4 x i32> %6184, <4 x i32>* %6121, align 16
  %6185 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6169, i32 %6158) #8
  store <4 x i32> %6185, <4 x i32>* %6124, align 16
  %6186 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6170, i32 %6158) #8
  store <4 x i32> %6186, <4 x i32>* %6127, align 16
  %6187 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6171, i32 %6158) #8
  store <4 x i32> %6187, <4 x i32>* %6130, align 16
  %6188 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6172, i32 %6158) #8
  store <4 x i32> %6188, <4 x i32>* %6133, align 16
  %6189 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6173, i32 %6158) #8
  store <4 x i32> %6189, <4 x i32>* %6136, align 16
  %6190 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6174, i32 %6158) #8
  store <4 x i32> %6190, <4 x i32>* %6139, align 16
  %6191 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6175, i32 %6158) #8
  store <4 x i32> %6191, <4 x i32>* %6142, align 16
  %6192 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6176, i32 %6158) #8
  store <4 x i32> %6192, <4 x i32>* %6145, align 16
  %6193 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6177, i32 %6158) #8
  store <4 x i32> %6193, <4 x i32>* %6148, align 16
  %6194 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6178, i32 %6158) #8
  store <4 x i32> %6194, <4 x i32>* %6151, align 16
  %6195 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6179, i32 %6158) #8
  store <4 x i32> %6195, <4 x i32>* %6154, align 16
  %6196 = shufflevector <4 x i32> %6180, <4 x i32> %6182, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6197 = bitcast <4 x i32> %6196 to <2 x i64>
  %6198 = shufflevector <4 x i32> %6180, <4 x i32> %6182, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6199 = bitcast <4 x i32> %6198 to <2 x i64>
  %6200 = shufflevector <4 x i32> %6184, <4 x i32> %6186, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6201 = bitcast <4 x i32> %6200 to <2 x i64>
  %6202 = shufflevector <4 x i32> %6184, <4 x i32> %6186, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6203 = bitcast <4 x i32> %6202 to <2 x i64>
  %6204 = shufflevector <2 x i64> %6197, <2 x i64> %6201, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6204, <2 x i64>* %5964, align 16
  %6205 = shufflevector <2 x i64> %6197, <2 x i64> %6201, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6205, <2 x i64>* %5979, align 16
  %6206 = shufflevector <2 x i64> %6199, <2 x i64> %6203, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6206, <2 x i64>* %5991, align 16
  %6207 = shufflevector <2 x i64> %6199, <2 x i64> %6203, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6207, <2 x i64>* %6003, align 16
  %6208 = shufflevector <4 x i32> %6181, <4 x i32> %6183, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6209 = bitcast <4 x i32> %6208 to <2 x i64>
  %6210 = shufflevector <4 x i32> %6181, <4 x i32> %6183, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6211 = bitcast <4 x i32> %6210 to <2 x i64>
  %6212 = shufflevector <4 x i32> %6185, <4 x i32> %6187, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6213 = bitcast <4 x i32> %6212 to <2 x i64>
  %6214 = shufflevector <4 x i32> %6185, <4 x i32> %6187, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6215 = bitcast <4 x i32> %6214 to <2 x i64>
  %6216 = shufflevector <2 x i64> %6209, <2 x i64> %6213, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6216, <2 x i64>* %6016, align 16
  %6217 = shufflevector <2 x i64> %6209, <2 x i64> %6213, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6217, <2 x i64>* %6027, align 16
  %6218 = shufflevector <2 x i64> %6211, <2 x i64> %6215, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6218, <2 x i64>* %6038, align 16
  %6219 = shufflevector <2 x i64> %6211, <2 x i64> %6215, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6219, <2 x i64>* %6049, align 16
  %6220 = shufflevector <4 x i32> %6188, <4 x i32> %6190, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6221 = bitcast <4 x i32> %6220 to <2 x i64>
  %6222 = shufflevector <4 x i32> %6188, <4 x i32> %6190, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6223 = bitcast <4 x i32> %6222 to <2 x i64>
  %6224 = shufflevector <4 x i32> %6192, <4 x i32> %6194, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6225 = bitcast <4 x i32> %6224 to <2 x i64>
  %6226 = shufflevector <4 x i32> %6192, <4 x i32> %6194, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6227 = bitcast <4 x i32> %6226 to <2 x i64>
  %6228 = shufflevector <2 x i64> %6221, <2 x i64> %6225, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6228, <2 x i64>* %5973, align 16
  %6229 = shufflevector <2 x i64> %6221, <2 x i64> %6225, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6229, <2 x i64>* %5985, align 16
  %6230 = shufflevector <2 x i64> %6223, <2 x i64> %6227, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6230, <2 x i64>* %5997, align 16
  %6231 = shufflevector <2 x i64> %6223, <2 x i64> %6227, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6231, <2 x i64>* %6009, align 16
  %6232 = shufflevector <4 x i32> %6189, <4 x i32> %6191, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6233 = bitcast <4 x i32> %6232 to <2 x i64>
  %6234 = shufflevector <4 x i32> %6189, <4 x i32> %6191, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6235 = bitcast <4 x i32> %6234 to <2 x i64>
  %6236 = shufflevector <4 x i32> %6193, <4 x i32> %6195, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6237 = bitcast <4 x i32> %6236 to <2 x i64>
  %6238 = shufflevector <4 x i32> %6193, <4 x i32> %6195, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6239 = bitcast <4 x i32> %6238 to <2 x i64>
  %6240 = shufflevector <2 x i64> %6233, <2 x i64> %6237, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6240, <2 x i64>* %6021, align 16
  %6241 = shufflevector <2 x i64> %6233, <2 x i64> %6237, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6241, <2 x i64>* %6032, align 16
  %6242 = shufflevector <2 x i64> %6235, <2 x i64> %6239, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6242, <2 x i64>* %6043, align 16
  %6243 = shufflevector <2 x i64> %6235, <2 x i64> %6239, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6243, <2 x i64>* %6054, align 16
  %6244 = sext i8 %6106 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %5964, <2 x i64>* nonnull %6108, i32 %6244, i32 2)
  %6245 = load <4 x i32>, <4 x i32>* %6163, align 16
  %6246 = load <4 x i32>, <4 x i32>* %6115, align 16
  %6247 = shufflevector <4 x i32> %6245, <4 x i32> %6246, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6248 = bitcast <4 x i32> %6247 to <2 x i64>
  %6249 = shufflevector <4 x i32> %6245, <4 x i32> %6246, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6250 = bitcast <4 x i32> %6249 to <2 x i64>
  %6251 = load <4 x i32>, <4 x i32>* %6121, align 16
  %6252 = load <4 x i32>, <4 x i32>* %6127, align 16
  %6253 = shufflevector <4 x i32> %6251, <4 x i32> %6252, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6254 = bitcast <4 x i32> %6253 to <2 x i64>
  %6255 = shufflevector <4 x i32> %6251, <4 x i32> %6252, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6256 = bitcast <4 x i32> %6255 to <2 x i64>
  %6257 = shufflevector <2 x i64> %6248, <2 x i64> %6254, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6257, <2 x i64>* %5964, align 16
  %6258 = shufflevector <2 x i64> %6248, <2 x i64> %6254, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6258, <2 x i64>* %5979, align 16
  %6259 = shufflevector <2 x i64> %6250, <2 x i64> %6256, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6259, <2 x i64>* %5991, align 16
  %6260 = shufflevector <2 x i64> %6250, <2 x i64> %6256, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6260, <2 x i64>* %6003, align 16
  %6261 = load <4 x i32>, <4 x i32>* %6112, align 16
  %6262 = load <4 x i32>, <4 x i32>* %6118, align 16
  %6263 = shufflevector <4 x i32> %6261, <4 x i32> %6262, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6264 = bitcast <4 x i32> %6263 to <2 x i64>
  %6265 = shufflevector <4 x i32> %6261, <4 x i32> %6262, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6266 = bitcast <4 x i32> %6265 to <2 x i64>
  %6267 = load <4 x i32>, <4 x i32>* %6124, align 16
  %6268 = load <4 x i32>, <4 x i32>* %6130, align 16
  %6269 = shufflevector <4 x i32> %6267, <4 x i32> %6268, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6270 = bitcast <4 x i32> %6269 to <2 x i64>
  %6271 = shufflevector <4 x i32> %6267, <4 x i32> %6268, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6272 = bitcast <4 x i32> %6271 to <2 x i64>
  %6273 = shufflevector <2 x i64> %6264, <2 x i64> %6270, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6273, <2 x i64>* %6016, align 16
  %6274 = shufflevector <2 x i64> %6264, <2 x i64> %6270, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6274, <2 x i64>* %6027, align 16
  %6275 = shufflevector <2 x i64> %6266, <2 x i64> %6272, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6275, <2 x i64>* %6038, align 16
  %6276 = shufflevector <2 x i64> %6266, <2 x i64> %6272, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6276, <2 x i64>* %6049, align 16
  %6277 = load <4 x i32>, <4 x i32>* %6133, align 16
  %6278 = load <4 x i32>, <4 x i32>* %6139, align 16
  %6279 = shufflevector <4 x i32> %6277, <4 x i32> %6278, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6280 = bitcast <4 x i32> %6279 to <2 x i64>
  %6281 = shufflevector <4 x i32> %6277, <4 x i32> %6278, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6282 = bitcast <4 x i32> %6281 to <2 x i64>
  %6283 = load <4 x i32>, <4 x i32>* %6145, align 16
  %6284 = load <4 x i32>, <4 x i32>* %6151, align 16
  %6285 = shufflevector <4 x i32> %6283, <4 x i32> %6284, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6286 = bitcast <4 x i32> %6285 to <2 x i64>
  %6287 = shufflevector <4 x i32> %6283, <4 x i32> %6284, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6288 = bitcast <4 x i32> %6287 to <2 x i64>
  %6289 = shufflevector <2 x i64> %6280, <2 x i64> %6286, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6289, <2 x i64>* %5973, align 16
  %6290 = shufflevector <2 x i64> %6280, <2 x i64> %6286, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6290, <2 x i64>* %5985, align 16
  %6291 = shufflevector <2 x i64> %6282, <2 x i64> %6288, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6291, <2 x i64>* %5997, align 16
  %6292 = shufflevector <2 x i64> %6282, <2 x i64> %6288, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6292, <2 x i64>* %6009, align 16
  %6293 = load <4 x i32>, <4 x i32>* %6136, align 16
  %6294 = load <4 x i32>, <4 x i32>* %6142, align 16
  %6295 = shufflevector <4 x i32> %6293, <4 x i32> %6294, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6296 = bitcast <4 x i32> %6295 to <2 x i64>
  %6297 = shufflevector <4 x i32> %6293, <4 x i32> %6294, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6298 = bitcast <4 x i32> %6297 to <2 x i64>
  %6299 = load <4 x i32>, <4 x i32>* %6148, align 16
  %6300 = load <4 x i32>, <4 x i32>* %6154, align 16
  %6301 = shufflevector <4 x i32> %6299, <4 x i32> %6300, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6302 = bitcast <4 x i32> %6301 to <2 x i64>
  %6303 = shufflevector <4 x i32> %6299, <4 x i32> %6300, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6304 = bitcast <4 x i32> %6303 to <2 x i64>
  %6305 = shufflevector <2 x i64> %6296, <2 x i64> %6302, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6305, <2 x i64>* %6021, align 16
  %6306 = shufflevector <2 x i64> %6296, <2 x i64> %6302, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6306, <2 x i64>* %6032, align 16
  %6307 = shufflevector <2 x i64> %6298, <2 x i64> %6304, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6307, <2 x i64>* %6043, align 16
  %6308 = shufflevector <2 x i64> %6298, <2 x i64> %6304, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6308, <2 x i64>* %6054, align 16
  br label %7057

6309:                                             ; preds = %5
  %6310 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %6311 = load i8, i8* %10, align 1
  %6312 = sext i8 %6311 to i32
  %6313 = mul nsw i32 %2, 7
  %6314 = sext i32 %6313 to i64
  %6315 = getelementptr inbounds i16, i16* %0, i64 %6314
  %6316 = bitcast i16* %6315 to <2 x i64>*
  %6317 = load <2 x i64>, <2 x i64>* %6316, align 16
  store <2 x i64> %6317, <2 x i64>* %6310, align 16
  %6318 = mul nsw i32 %2, 6
  %6319 = sext i32 %6318 to i64
  %6320 = getelementptr inbounds i16, i16* %0, i64 %6319
  %6321 = bitcast i16* %6320 to <2 x i64>*
  %6322 = load <2 x i64>, <2 x i64>* %6321, align 16
  %6323 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %6322, <2 x i64>* %6323, align 16
  %6324 = mul nsw i32 %2, 5
  %6325 = sext i32 %6324 to i64
  %6326 = getelementptr inbounds i16, i16* %0, i64 %6325
  %6327 = bitcast i16* %6326 to <2 x i64>*
  %6328 = load <2 x i64>, <2 x i64>* %6327, align 16
  %6329 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %6328, <2 x i64>* %6329, align 16
  %6330 = shl nsw i32 %2, 2
  %6331 = sext i32 %6330 to i64
  %6332 = getelementptr inbounds i16, i16* %0, i64 %6331
  %6333 = bitcast i16* %6332 to <2 x i64>*
  %6334 = load <2 x i64>, <2 x i64>* %6333, align 16
  %6335 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %6334, <2 x i64>* %6335, align 16
  %6336 = mul nsw i32 %2, 3
  %6337 = sext i32 %6336 to i64
  %6338 = getelementptr inbounds i16, i16* %0, i64 %6337
  %6339 = bitcast i16* %6338 to <2 x i64>*
  %6340 = load <2 x i64>, <2 x i64>* %6339, align 16
  %6341 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %6340, <2 x i64>* %6341, align 16
  %6342 = shl nsw i32 %2, 1
  %6343 = sext i32 %6342 to i64
  %6344 = getelementptr inbounds i16, i16* %0, i64 %6343
  %6345 = bitcast i16* %6344 to <2 x i64>*
  %6346 = load <2 x i64>, <2 x i64>* %6345, align 16
  %6347 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %6346, <2 x i64>* %6347, align 16
  %6348 = sext i32 %2 to i64
  %6349 = getelementptr inbounds i16, i16* %0, i64 %6348
  %6350 = bitcast i16* %6349 to <2 x i64>*
  %6351 = load <2 x i64>, <2 x i64>* %6350, align 16
  %6352 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  %6353 = bitcast i16* %0 to <2 x i64>*
  %6354 = load <2 x i64>, <2 x i64>* %6353, align 16
  %6355 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %6356 = bitcast <2 x i64>* %6355 to <4 x i32>*
  %6357 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %6358 = shufflevector <2 x i64> %6340, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6359 = bitcast <2 x i64> %6340 to <8 x i16>
  %6360 = shufflevector <8 x i16> %6359, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6361 = sext <4 x i16> %6360 to <4 x i32>
  %6362 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %6363 = bitcast <2 x i64>* %6362 to <4 x i32>*
  %6364 = bitcast <2 x i64> %6358 to <8 x i16>
  %6365 = shufflevector <8 x i16> %6364, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6366 = sext <4 x i16> %6365 to <4 x i32>
  %6367 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %6368 = bitcast <2 x i64>* %6367 to <4 x i32>*
  %6369 = shufflevector <2 x i64> %6346, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6370 = bitcast <2 x i64> %6346 to <8 x i16>
  %6371 = shufflevector <8 x i16> %6370, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6372 = sext <4 x i16> %6371 to <4 x i32>
  %6373 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %6374 = bitcast <2 x i64>* %6373 to <4 x i32>*
  %6375 = bitcast <2 x i64> %6369 to <8 x i16>
  %6376 = shufflevector <8 x i16> %6375, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6377 = sext <4 x i16> %6376 to <4 x i32>
  %6378 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %6379 = bitcast <2 x i64>* %6378 to <4 x i32>*
  %6380 = shufflevector <2 x i64> %6351, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6381 = bitcast <2 x i64> %6351 to <8 x i16>
  %6382 = shufflevector <8 x i16> %6381, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6383 = sext <4 x i16> %6382 to <4 x i32>
  %6384 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %6385 = bitcast <2 x i64>* %6384 to <4 x i32>*
  %6386 = bitcast <2 x i64> %6380 to <8 x i16>
  %6387 = shufflevector <8 x i16> %6386, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6388 = sext <4 x i16> %6387 to <4 x i32>
  %6389 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %6390 = bitcast <2 x i64>* %6389 to <4 x i32>*
  %6391 = shufflevector <2 x i64> %6354, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6392 = bitcast <2 x i64> %6354 to <8 x i16>
  %6393 = shufflevector <8 x i16> %6392, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6394 = sext <4 x i16> %6393 to <4 x i32>
  %6395 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %6396 = bitcast <2 x i64>* %6395 to <4 x i32>*
  %6397 = bitcast <2 x i64> %6391 to <8 x i16>
  %6398 = shufflevector <8 x i16> %6397, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6399 = sext <4 x i16> %6398 to <4 x i32>
  %6400 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %6401 = bitcast <2 x i64>* %6400 to <4 x i32>*
  %6402 = shufflevector <2 x i64> %6334, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6403 = bitcast <2 x i64> %6334 to <8 x i16>
  %6404 = shufflevector <8 x i16> %6403, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6405 = sext <4 x i16> %6404 to <4 x i32>
  %6406 = bitcast <2 x i64>* %6352 to <4 x i32>*
  %6407 = bitcast <2 x i64> %6402 to <8 x i16>
  %6408 = shufflevector <8 x i16> %6407, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6409 = sext <4 x i16> %6408 to <4 x i32>
  %6410 = shufflevector <2 x i64> %6328, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6411 = bitcast <2 x i64> %6328 to <8 x i16>
  %6412 = shufflevector <8 x i16> %6411, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6413 = sext <4 x i16> %6412 to <4 x i32>
  %6414 = bitcast <2 x i64>* %6341 to <4 x i32>*
  %6415 = bitcast <2 x i64> %6410 to <8 x i16>
  %6416 = shufflevector <8 x i16> %6415, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6417 = sext <4 x i16> %6416 to <4 x i32>
  %6418 = bitcast <2 x i64>* %6347 to <4 x i32>*
  %6419 = shufflevector <2 x i64> %6322, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6420 = bitcast <2 x i64> %6322 to <8 x i16>
  %6421 = shufflevector <8 x i16> %6420, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6422 = sext <4 x i16> %6421 to <4 x i32>
  %6423 = bitcast <2 x i64>* %6329 to <4 x i32>*
  %6424 = bitcast <2 x i64> %6419 to <8 x i16>
  %6425 = shufflevector <8 x i16> %6424, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6426 = sext <4 x i16> %6425 to <4 x i32>
  %6427 = bitcast <2 x i64>* %6335 to <4 x i32>*
  %6428 = shufflevector <2 x i64> %6317, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6429 = bitcast <2 x i64> %6317 to <8 x i16>
  %6430 = shufflevector <8 x i16> %6429, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6431 = sext <4 x i16> %6430 to <4 x i32>
  %6432 = bitcast <2 x i64> %6428 to <8 x i16>
  %6433 = shufflevector <8 x i16> %6432, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6434 = sext <4 x i16> %6433 to <4 x i32>
  %6435 = bitcast <2 x i64>* %6323 to <4 x i32>*
  %6436 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6431, i32 %6312) #8
  store <4 x i32> %6436, <4 x i32>* %6357, align 16
  %6437 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6434, i32 %6312) #8
  store <4 x i32> %6437, <4 x i32>* %6435, align 16
  %6438 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6422, i32 %6312) #8
  store <4 x i32> %6438, <4 x i32>* %6423, align 16
  %6439 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6426, i32 %6312) #8
  store <4 x i32> %6439, <4 x i32>* %6427, align 16
  %6440 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6413, i32 %6312) #8
  store <4 x i32> %6440, <4 x i32>* %6414, align 16
  %6441 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6417, i32 %6312) #8
  store <4 x i32> %6441, <4 x i32>* %6418, align 16
  %6442 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6405, i32 %6312) #8
  store <4 x i32> %6442, <4 x i32>* %6406, align 16
  %6443 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6409, i32 %6312) #8
  store <4 x i32> %6443, <4 x i32>* %6356, align 16
  %6444 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6361, i32 %6312) #8
  store <4 x i32> %6444, <4 x i32>* %6363, align 16
  %6445 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6366, i32 %6312) #8
  store <4 x i32> %6445, <4 x i32>* %6368, align 16
  %6446 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6372, i32 %6312) #8
  store <4 x i32> %6446, <4 x i32>* %6374, align 16
  %6447 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6377, i32 %6312) #8
  store <4 x i32> %6447, <4 x i32>* %6379, align 16
  %6448 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6383, i32 %6312) #8
  store <4 x i32> %6448, <4 x i32>* %6385, align 16
  %6449 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6388, i32 %6312) #8
  store <4 x i32> %6449, <4 x i32>* %6390, align 16
  %6450 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6394, i32 %6312) #8
  store <4 x i32> %6450, <4 x i32>* %6396, align 16
  %6451 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6399, i32 %6312) #8
  store <4 x i32> %6451, <4 x i32>* %6401, align 16
  %6452 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  %6453 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %6454 = sext i8 %6453 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %6310, <2 x i64>* nonnull %6452, i32 %6454, i32 2)
  %6455 = getelementptr inbounds i8, i8* %10, i64 1
  %6456 = load i8, i8* %6455, align 1
  %6457 = sext i8 %6456 to i32
  %6458 = sub nsw i32 0, %6457
  %6459 = xor i32 %6457, -1
  %6460 = shl i32 1, %6459
  %6461 = insertelement <4 x i32> undef, i32 %6460, i32 0
  %6462 = shufflevector <4 x i32> %6461, <4 x i32> undef, <4 x i32> zeroinitializer
  %6463 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  %6464 = load <4 x i32>, <4 x i32>* %6463, align 16
  %6465 = add <4 x i32> %6462, %6464
  %6466 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %6467 = bitcast <2 x i64>* %6466 to <4 x i32>*
  %6468 = load <4 x i32>, <4 x i32>* %6467, align 16
  %6469 = add <4 x i32> %6462, %6468
  %6470 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %6471 = bitcast <2 x i64>* %6470 to <4 x i32>*
  %6472 = load <4 x i32>, <4 x i32>* %6471, align 16
  %6473 = add <4 x i32> %6462, %6472
  %6474 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %6475 = bitcast <2 x i64>* %6474 to <4 x i32>*
  %6476 = load <4 x i32>, <4 x i32>* %6475, align 16
  %6477 = add <4 x i32> %6476, %6462
  %6478 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %6479 = bitcast <2 x i64>* %6478 to <4 x i32>*
  %6480 = load <4 x i32>, <4 x i32>* %6479, align 16
  %6481 = add <4 x i32> %6480, %6462
  %6482 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %6483 = bitcast <2 x i64>* %6482 to <4 x i32>*
  %6484 = load <4 x i32>, <4 x i32>* %6483, align 16
  %6485 = add <4 x i32> %6484, %6462
  %6486 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %6487 = bitcast <2 x i64>* %6486 to <4 x i32>*
  %6488 = load <4 x i32>, <4 x i32>* %6487, align 16
  %6489 = add <4 x i32> %6488, %6462
  %6490 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %6491 = bitcast <2 x i64>* %6490 to <4 x i32>*
  %6492 = load <4 x i32>, <4 x i32>* %6491, align 16
  %6493 = add <4 x i32> %6492, %6462
  %6494 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %6495 = bitcast <2 x i64>* %6494 to <4 x i32>*
  %6496 = load <4 x i32>, <4 x i32>* %6495, align 16
  %6497 = add <4 x i32> %6496, %6462
  %6498 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %6499 = bitcast <2 x i64>* %6498 to <4 x i32>*
  %6500 = load <4 x i32>, <4 x i32>* %6499, align 16
  %6501 = add <4 x i32> %6500, %6462
  %6502 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %6503 = bitcast <2 x i64>* %6502 to <4 x i32>*
  %6504 = load <4 x i32>, <4 x i32>* %6503, align 16
  %6505 = add <4 x i32> %6504, %6462
  %6506 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %6507 = bitcast <2 x i64>* %6506 to <4 x i32>*
  %6508 = load <4 x i32>, <4 x i32>* %6507, align 16
  %6509 = add <4 x i32> %6508, %6462
  %6510 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %6511 = bitcast <2 x i64>* %6510 to <4 x i32>*
  %6512 = load <4 x i32>, <4 x i32>* %6511, align 16
  %6513 = add <4 x i32> %6512, %6462
  %6514 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %6515 = bitcast <2 x i64>* %6514 to <4 x i32>*
  %6516 = load <4 x i32>, <4 x i32>* %6515, align 16
  %6517 = add <4 x i32> %6516, %6462
  %6518 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %6519 = bitcast <2 x i64>* %6518 to <4 x i32>*
  %6520 = load <4 x i32>, <4 x i32>* %6519, align 16
  %6521 = add <4 x i32> %6520, %6462
  %6522 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %6523 = bitcast <2 x i64>* %6522 to <4 x i32>*
  %6524 = load <4 x i32>, <4 x i32>* %6523, align 16
  %6525 = add <4 x i32> %6524, %6462
  %6526 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6465, i32 %6458) #8
  %6527 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6469, i32 %6458) #8
  %6528 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6473, i32 %6458) #8
  store <4 x i32> %6528, <4 x i32>* %6471, align 16
  %6529 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6477, i32 %6458) #8
  store <4 x i32> %6529, <4 x i32>* %6475, align 16
  %6530 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6481, i32 %6458) #8
  store <4 x i32> %6530, <4 x i32>* %6479, align 16
  %6531 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6485, i32 %6458) #8
  store <4 x i32> %6531, <4 x i32>* %6483, align 16
  %6532 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6489, i32 %6458) #8
  store <4 x i32> %6532, <4 x i32>* %6487, align 16
  %6533 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6493, i32 %6458) #8
  store <4 x i32> %6533, <4 x i32>* %6491, align 16
  %6534 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6497, i32 %6458) #8
  store <4 x i32> %6534, <4 x i32>* %6495, align 16
  %6535 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6501, i32 %6458) #8
  store <4 x i32> %6535, <4 x i32>* %6499, align 16
  %6536 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6505, i32 %6458) #8
  store <4 x i32> %6536, <4 x i32>* %6503, align 16
  %6537 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6509, i32 %6458) #8
  store <4 x i32> %6537, <4 x i32>* %6507, align 16
  %6538 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6513, i32 %6458) #8
  store <4 x i32> %6538, <4 x i32>* %6511, align 16
  %6539 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6517, i32 %6458) #8
  store <4 x i32> %6539, <4 x i32>* %6515, align 16
  %6540 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6521, i32 %6458) #8
  store <4 x i32> %6540, <4 x i32>* %6519, align 16
  %6541 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6525, i32 %6458) #8
  store <4 x i32> %6541, <4 x i32>* %6523, align 16
  %6542 = shufflevector <4 x i32> %6526, <4 x i32> %6528, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6543 = bitcast <4 x i32> %6542 to <2 x i64>
  %6544 = shufflevector <4 x i32> %6526, <4 x i32> %6528, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6545 = bitcast <4 x i32> %6544 to <2 x i64>
  %6546 = shufflevector <4 x i32> %6530, <4 x i32> %6532, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6547 = bitcast <4 x i32> %6546 to <2 x i64>
  %6548 = shufflevector <4 x i32> %6530, <4 x i32> %6532, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6549 = bitcast <4 x i32> %6548 to <2 x i64>
  %6550 = shufflevector <2 x i64> %6543, <2 x i64> %6547, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6550, <2 x i64>* %6310, align 16
  %6551 = shufflevector <2 x i64> %6543, <2 x i64> %6547, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6551, <2 x i64>* %6329, align 16
  %6552 = shufflevector <2 x i64> %6545, <2 x i64> %6549, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6552, <2 x i64>* %6341, align 16
  %6553 = shufflevector <2 x i64> %6545, <2 x i64> %6549, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6553, <2 x i64>* %6352, align 16
  %6554 = shufflevector <4 x i32> %6527, <4 x i32> %6529, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6555 = bitcast <4 x i32> %6554 to <2 x i64>
  %6556 = shufflevector <4 x i32> %6527, <4 x i32> %6529, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6557 = bitcast <4 x i32> %6556 to <2 x i64>
  %6558 = shufflevector <4 x i32> %6531, <4 x i32> %6533, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6559 = bitcast <4 x i32> %6558 to <2 x i64>
  %6560 = shufflevector <4 x i32> %6531, <4 x i32> %6533, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6561 = bitcast <4 x i32> %6560 to <2 x i64>
  %6562 = shufflevector <2 x i64> %6555, <2 x i64> %6559, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6562, <2 x i64>* %6362, align 16
  %6563 = shufflevector <2 x i64> %6555, <2 x i64> %6559, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6563, <2 x i64>* %6373, align 16
  %6564 = shufflevector <2 x i64> %6557, <2 x i64> %6561, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6564, <2 x i64>* %6384, align 16
  %6565 = shufflevector <2 x i64> %6557, <2 x i64> %6561, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6565, <2 x i64>* %6395, align 16
  %6566 = shufflevector <4 x i32> %6534, <4 x i32> %6536, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6567 = bitcast <4 x i32> %6566 to <2 x i64>
  %6568 = shufflevector <4 x i32> %6534, <4 x i32> %6536, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6569 = bitcast <4 x i32> %6568 to <2 x i64>
  %6570 = shufflevector <4 x i32> %6538, <4 x i32> %6540, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6571 = bitcast <4 x i32> %6570 to <2 x i64>
  %6572 = shufflevector <4 x i32> %6538, <4 x i32> %6540, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6573 = bitcast <4 x i32> %6572 to <2 x i64>
  %6574 = shufflevector <2 x i64> %6567, <2 x i64> %6571, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6574, <2 x i64>* %6323, align 16
  %6575 = shufflevector <2 x i64> %6567, <2 x i64> %6571, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6575, <2 x i64>* %6335, align 16
  %6576 = shufflevector <2 x i64> %6569, <2 x i64> %6573, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6576, <2 x i64>* %6347, align 16
  %6577 = shufflevector <2 x i64> %6569, <2 x i64> %6573, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6577, <2 x i64>* %6355, align 16
  %6578 = shufflevector <4 x i32> %6535, <4 x i32> %6537, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6579 = bitcast <4 x i32> %6578 to <2 x i64>
  %6580 = shufflevector <4 x i32> %6535, <4 x i32> %6537, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6581 = bitcast <4 x i32> %6580 to <2 x i64>
  %6582 = shufflevector <4 x i32> %6539, <4 x i32> %6541, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6583 = bitcast <4 x i32> %6582 to <2 x i64>
  %6584 = shufflevector <4 x i32> %6539, <4 x i32> %6541, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6585 = bitcast <4 x i32> %6584 to <2 x i64>
  %6586 = shufflevector <2 x i64> %6579, <2 x i64> %6583, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6586, <2 x i64>* %6367, align 16
  %6587 = shufflevector <2 x i64> %6579, <2 x i64> %6583, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6587, <2 x i64>* %6378, align 16
  %6588 = shufflevector <2 x i64> %6581, <2 x i64> %6585, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6588, <2 x i64>* %6389, align 16
  %6589 = shufflevector <2 x i64> %6581, <2 x i64> %6585, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6589, <2 x i64>* %6400, align 16
  %6590 = bitcast <2 x i64> %6550 to <4 x i32>
  %6591 = shl <4 x i32> %6590, <i32 1, i32 1, i32 1, i32 1>
  %6592 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  store <4 x i32> %6591, <4 x i32>* %6592, align 16
  %6593 = bitcast <2 x i64> %6574 to <4 x i32>
  %6594 = shl <4 x i32> %6593, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6594, <4 x i32>* %6467, align 16
  %6595 = bitcast <2 x i64> %6551 to <4 x i32>
  %6596 = shl <4 x i32> %6595, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6596, <4 x i32>* %6471, align 16
  %6597 = bitcast <2 x i64> %6575 to <4 x i32>
  %6598 = shl <4 x i32> %6597, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6598, <4 x i32>* %6475, align 16
  %6599 = bitcast <2 x i64> %6552 to <4 x i32>
  %6600 = shl <4 x i32> %6599, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6600, <4 x i32>* %6479, align 16
  %6601 = bitcast <2 x i64> %6576 to <4 x i32>
  %6602 = shl <4 x i32> %6601, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6602, <4 x i32>* %6483, align 16
  %6603 = bitcast <2 x i64> %6553 to <4 x i32>
  %6604 = shl <4 x i32> %6603, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6604, <4 x i32>* %6487, align 16
  %6605 = bitcast <2 x i64> %6577 to <4 x i32>
  %6606 = shl <4 x i32> %6605, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6606, <4 x i32>* %6491, align 16
  %6607 = bitcast <2 x i64> %6562 to <4 x i32>
  %6608 = shl <4 x i32> %6607, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6608, <4 x i32>* %6495, align 16
  %6609 = bitcast <2 x i64> %6586 to <4 x i32>
  %6610 = shl <4 x i32> %6609, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6610, <4 x i32>* %6499, align 16
  %6611 = bitcast <2 x i64> %6563 to <4 x i32>
  %6612 = shl <4 x i32> %6611, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6612, <4 x i32>* %6503, align 16
  %6613 = bitcast <2 x i64> %6587 to <4 x i32>
  %6614 = shl <4 x i32> %6613, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6614, <4 x i32>* %6507, align 16
  %6615 = bitcast <2 x i64> %6564 to <4 x i32>
  %6616 = shl <4 x i32> %6615, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6616, <4 x i32>* %6511, align 16
  %6617 = bitcast <2 x i64> %6588 to <4 x i32>
  %6618 = shl <4 x i32> %6617, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6618, <4 x i32>* %6515, align 16
  %6619 = bitcast <2 x i64> %6565 to <4 x i32>
  %6620 = shl <4 x i32> %6619, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6620, <4 x i32>* %6519, align 16
  %6621 = bitcast <2 x i64> %6589 to <4 x i32>
  %6622 = shl <4 x i32> %6621, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %6622, <4 x i32>* %6523, align 16
  %6623 = shufflevector <4 x i32> %6591, <4 x i32> %6596, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6624 = bitcast <4 x i32> %6623 to <2 x i64>
  %6625 = shufflevector <4 x i32> %6591, <4 x i32> %6596, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6626 = bitcast <4 x i32> %6625 to <2 x i64>
  %6627 = shufflevector <4 x i32> %6600, <4 x i32> %6604, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6628 = bitcast <4 x i32> %6627 to <2 x i64>
  %6629 = shufflevector <4 x i32> %6600, <4 x i32> %6604, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6630 = bitcast <4 x i32> %6629 to <2 x i64>
  %6631 = shufflevector <2 x i64> %6624, <2 x i64> %6628, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6631, <2 x i64>* %6310, align 16
  %6632 = shufflevector <2 x i64> %6624, <2 x i64> %6628, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6632, <2 x i64>* %6329, align 16
  %6633 = shufflevector <2 x i64> %6626, <2 x i64> %6630, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6633, <2 x i64>* %6341, align 16
  %6634 = shufflevector <2 x i64> %6626, <2 x i64> %6630, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6634, <2 x i64>* %6352, align 16
  %6635 = shufflevector <4 x i32> %6594, <4 x i32> %6598, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6636 = bitcast <4 x i32> %6635 to <2 x i64>
  %6637 = shufflevector <4 x i32> %6594, <4 x i32> %6598, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6638 = bitcast <4 x i32> %6637 to <2 x i64>
  %6639 = shufflevector <4 x i32> %6602, <4 x i32> %6606, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6640 = bitcast <4 x i32> %6639 to <2 x i64>
  %6641 = shufflevector <4 x i32> %6602, <4 x i32> %6606, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6642 = bitcast <4 x i32> %6641 to <2 x i64>
  %6643 = shufflevector <2 x i64> %6636, <2 x i64> %6640, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6643, <2 x i64>* %6362, align 16
  %6644 = shufflevector <2 x i64> %6636, <2 x i64> %6640, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6644, <2 x i64>* %6373, align 16
  %6645 = shufflevector <2 x i64> %6638, <2 x i64> %6642, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6645, <2 x i64>* %6384, align 16
  %6646 = shufflevector <2 x i64> %6638, <2 x i64> %6642, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6646, <2 x i64>* %6395, align 16
  %6647 = shufflevector <4 x i32> %6608, <4 x i32> %6612, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6648 = bitcast <4 x i32> %6647 to <2 x i64>
  %6649 = shufflevector <4 x i32> %6608, <4 x i32> %6612, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6650 = bitcast <4 x i32> %6649 to <2 x i64>
  %6651 = shufflevector <4 x i32> %6616, <4 x i32> %6620, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6652 = bitcast <4 x i32> %6651 to <2 x i64>
  %6653 = shufflevector <4 x i32> %6616, <4 x i32> %6620, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6654 = bitcast <4 x i32> %6653 to <2 x i64>
  %6655 = shufflevector <2 x i64> %6648, <2 x i64> %6652, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6655, <2 x i64>* %6323, align 16
  %6656 = shufflevector <2 x i64> %6648, <2 x i64> %6652, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6656, <2 x i64>* %6335, align 16
  %6657 = shufflevector <2 x i64> %6650, <2 x i64> %6654, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6657, <2 x i64>* %6347, align 16
  %6658 = shufflevector <2 x i64> %6650, <2 x i64> %6654, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6658, <2 x i64>* %6355, align 16
  %6659 = shufflevector <4 x i32> %6610, <4 x i32> %6614, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6660 = bitcast <4 x i32> %6659 to <2 x i64>
  %6661 = shufflevector <4 x i32> %6610, <4 x i32> %6614, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6662 = bitcast <4 x i32> %6661 to <2 x i64>
  %6663 = shufflevector <4 x i32> %6618, <4 x i32> %6622, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6664 = bitcast <4 x i32> %6663 to <2 x i64>
  %6665 = shufflevector <4 x i32> %6618, <4 x i32> %6622, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6666 = bitcast <4 x i32> %6665 to <2 x i64>
  %6667 = shufflevector <2 x i64> %6660, <2 x i64> %6664, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6667, <2 x i64>* %6367, align 16
  %6668 = shufflevector <2 x i64> %6660, <2 x i64> %6664, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6668, <2 x i64>* %6378, align 16
  %6669 = shufflevector <2 x i64> %6662, <2 x i64> %6666, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6669, <2 x i64>* %6389, align 16
  %6670 = shufflevector <2 x i64> %6662, <2 x i64> %6666, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6670, <2 x i64>* %6400, align 16
  br label %7057

6671:                                             ; preds = %5
  %6672 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %6673 = load i8, i8* %10, align 1
  %6674 = sext i8 %6673 to i32
  %6675 = bitcast i16* %0 to <8 x i16>*
  %6676 = load <8 x i16>, <8 x i16>* %6675, align 16
  %6677 = sext i32 %2 to i64
  %6678 = getelementptr inbounds i16, i16* %0, i64 %6677
  %6679 = bitcast i16* %6678 to <8 x i16>*
  %6680 = load <8 x i16>, <8 x i16>* %6679, align 16
  %6681 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  %6682 = shl nsw i32 %2, 1
  %6683 = sext i32 %6682 to i64
  %6684 = getelementptr inbounds i16, i16* %0, i64 %6683
  %6685 = bitcast i16* %6684 to <8 x i16>*
  %6686 = load <8 x i16>, <8 x i16>* %6685, align 16
  %6687 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  %6688 = mul nsw i32 %2, 3
  %6689 = sext i32 %6688 to i64
  %6690 = getelementptr inbounds i16, i16* %0, i64 %6689
  %6691 = bitcast i16* %6690 to <8 x i16>*
  %6692 = load <8 x i16>, <8 x i16>* %6691, align 16
  %6693 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  %6694 = shl nsw i32 %2, 2
  %6695 = sext i32 %6694 to i64
  %6696 = getelementptr inbounds i16, i16* %0, i64 %6695
  %6697 = bitcast i16* %6696 to <8 x i16>*
  %6698 = load <8 x i16>, <8 x i16>* %6697, align 16
  %6699 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  %6700 = mul nsw i32 %2, 5
  %6701 = sext i32 %6700 to i64
  %6702 = getelementptr inbounds i16, i16* %0, i64 %6701
  %6703 = bitcast i16* %6702 to <8 x i16>*
  %6704 = load <8 x i16>, <8 x i16>* %6703, align 16
  %6705 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  %6706 = mul nsw i32 %2, 6
  %6707 = sext i32 %6706 to i64
  %6708 = getelementptr inbounds i16, i16* %0, i64 %6707
  %6709 = bitcast i16* %6708 to <8 x i16>*
  %6710 = load <8 x i16>, <8 x i16>* %6709, align 16
  %6711 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  %6712 = mul nsw i32 %2, 7
  %6713 = sext i32 %6712 to i64
  %6714 = getelementptr inbounds i16, i16* %0, i64 %6713
  %6715 = bitcast i16* %6714 to <8 x i16>*
  %6716 = load <8 x i16>, <8 x i16>* %6715, align 16
  %6717 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %6718 = shufflevector <8 x i16> %6676, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %6719 = shufflevector <8 x i16> %6718, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %6720 = bitcast <8 x i16> %6719 to <4 x i32>
  %6721 = shufflevector <4 x i32> %6720, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %6722 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  store <4 x i32> %6721, <4 x i32>* %6722, align 16
  %6723 = shufflevector <8 x i16> %6680, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %6724 = shufflevector <8 x i16> %6723, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %6725 = bitcast <8 x i16> %6724 to <4 x i32>
  %6726 = shufflevector <4 x i32> %6725, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %6727 = bitcast <2 x i64>* %6681 to <4 x i32>*
  store <4 x i32> %6726, <4 x i32>* %6727, align 16
  %6728 = shufflevector <8 x i16> %6686, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %6729 = shufflevector <8 x i16> %6728, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %6730 = bitcast <8 x i16> %6729 to <4 x i32>
  %6731 = shufflevector <4 x i32> %6730, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %6732 = bitcast <2 x i64>* %6687 to <4 x i32>*
  store <4 x i32> %6731, <4 x i32>* %6732, align 16
  %6733 = shufflevector <8 x i16> %6692, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %6734 = shufflevector <8 x i16> %6733, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %6735 = bitcast <8 x i16> %6734 to <4 x i32>
  %6736 = shufflevector <4 x i32> %6735, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %6737 = bitcast <2 x i64>* %6693 to <4 x i32>*
  store <4 x i32> %6736, <4 x i32>* %6737, align 16
  %6738 = shufflevector <8 x i16> %6698, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %6739 = shufflevector <8 x i16> %6738, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %6740 = bitcast <8 x i16> %6739 to <4 x i32>
  %6741 = shufflevector <4 x i32> %6740, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %6742 = bitcast <2 x i64>* %6699 to <4 x i32>*
  store <4 x i32> %6741, <4 x i32>* %6742, align 16
  %6743 = shufflevector <8 x i16> %6704, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %6744 = shufflevector <8 x i16> %6743, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %6745 = bitcast <8 x i16> %6744 to <4 x i32>
  %6746 = shufflevector <4 x i32> %6745, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %6747 = bitcast <2 x i64>* %6705 to <4 x i32>*
  store <4 x i32> %6746, <4 x i32>* %6747, align 16
  %6748 = shufflevector <8 x i16> %6710, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %6749 = shufflevector <8 x i16> %6748, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %6750 = bitcast <8 x i16> %6749 to <4 x i32>
  %6751 = shufflevector <4 x i32> %6750, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %6752 = bitcast <2 x i64>* %6711 to <4 x i32>*
  store <4 x i32> %6751, <4 x i32>* %6752, align 16
  %6753 = shufflevector <8 x i16> %6716, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %6754 = shufflevector <8 x i16> %6753, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %6755 = bitcast <8 x i16> %6754 to <4 x i32>
  %6756 = shufflevector <4 x i32> %6755, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %6757 = bitcast <2 x i64>* %6717 to <4 x i32>*
  %6758 = bitcast <4 x i32> %6741 to <2 x i64>
  %6759 = bitcast <4 x i32> %6746 to <2 x i64>
  %6760 = bitcast <4 x i32> %6751 to <2 x i64>
  %6761 = bitcast <4 x i32> %6756 to <2 x i64>
  %6762 = bitcast <4 x i32> %6736 to <2 x i64>
  %6763 = bitcast <4 x i32> %6731 to <2 x i64>
  %6764 = bitcast <4 x i32> %6726 to <2 x i64>
  %6765 = bitcast <4 x i32> %6721 to <2 x i64>
  %6766 = shufflevector <2 x i64> %6758, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6767 = bitcast <4 x i32> %6741 to <8 x i16>
  %6768 = shufflevector <8 x i16> %6767, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6769 = sext <4 x i16> %6768 to <4 x i32>
  %6770 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %6771 = bitcast <2 x i64>* %6770 to <4 x i32>*
  %6772 = bitcast <2 x i64> %6766 to <8 x i16>
  %6773 = shufflevector <8 x i16> %6772, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6774 = sext <4 x i16> %6773 to <4 x i32>
  %6775 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %6776 = bitcast <2 x i64>* %6775 to <4 x i32>*
  %6777 = shufflevector <2 x i64> %6759, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6778 = bitcast <4 x i32> %6746 to <8 x i16>
  %6779 = shufflevector <8 x i16> %6778, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6780 = sext <4 x i16> %6779 to <4 x i32>
  %6781 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %6782 = bitcast <2 x i64>* %6781 to <4 x i32>*
  %6783 = bitcast <2 x i64> %6777 to <8 x i16>
  %6784 = shufflevector <8 x i16> %6783, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6785 = sext <4 x i16> %6784 to <4 x i32>
  %6786 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %6787 = bitcast <2 x i64>* %6786 to <4 x i32>*
  %6788 = shufflevector <2 x i64> %6760, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6789 = bitcast <4 x i32> %6751 to <8 x i16>
  %6790 = shufflevector <8 x i16> %6789, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6791 = sext <4 x i16> %6790 to <4 x i32>
  %6792 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %6793 = bitcast <2 x i64>* %6792 to <4 x i32>*
  %6794 = bitcast <2 x i64> %6788 to <8 x i16>
  %6795 = shufflevector <8 x i16> %6794, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6796 = sext <4 x i16> %6795 to <4 x i32>
  %6797 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %6798 = bitcast <2 x i64>* %6797 to <4 x i32>*
  %6799 = shufflevector <2 x i64> %6761, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6800 = bitcast <4 x i32> %6756 to <8 x i16>
  %6801 = shufflevector <8 x i16> %6800, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6802 = sext <4 x i16> %6801 to <4 x i32>
  %6803 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %6804 = bitcast <2 x i64>* %6803 to <4 x i32>*
  %6805 = bitcast <2 x i64> %6799 to <8 x i16>
  %6806 = shufflevector <8 x i16> %6805, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6807 = sext <4 x i16> %6806 to <4 x i32>
  %6808 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %6809 = bitcast <2 x i64>* %6808 to <4 x i32>*
  %6810 = shufflevector <2 x i64> %6762, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6811 = bitcast <4 x i32> %6736 to <8 x i16>
  %6812 = shufflevector <8 x i16> %6811, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6813 = sext <4 x i16> %6812 to <4 x i32>
  %6814 = bitcast <2 x i64> %6810 to <8 x i16>
  %6815 = shufflevector <8 x i16> %6814, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6816 = sext <4 x i16> %6815 to <4 x i32>
  %6817 = shufflevector <2 x i64> %6763, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6818 = bitcast <4 x i32> %6731 to <8 x i16>
  %6819 = shufflevector <8 x i16> %6818, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6820 = sext <4 x i16> %6819 to <4 x i32>
  %6821 = bitcast <2 x i64> %6817 to <8 x i16>
  %6822 = shufflevector <8 x i16> %6821, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6823 = sext <4 x i16> %6822 to <4 x i32>
  %6824 = shufflevector <2 x i64> %6764, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6825 = bitcast <4 x i32> %6726 to <8 x i16>
  %6826 = shufflevector <8 x i16> %6825, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6827 = sext <4 x i16> %6826 to <4 x i32>
  %6828 = bitcast <2 x i64> %6824 to <8 x i16>
  %6829 = shufflevector <8 x i16> %6828, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6830 = sext <4 x i16> %6829 to <4 x i32>
  %6831 = shufflevector <2 x i64> %6765, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %6832 = bitcast <4 x i32> %6721 to <8 x i16>
  %6833 = shufflevector <8 x i16> %6832, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6834 = sext <4 x i16> %6833 to <4 x i32>
  %6835 = bitcast <2 x i64> %6831 to <8 x i16>
  %6836 = shufflevector <8 x i16> %6835, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6837 = sext <4 x i16> %6836 to <4 x i32>
  %6838 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6834, i32 %6674) #8
  store <4 x i32> %6838, <4 x i32>* %6722, align 16
  %6839 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6837, i32 %6674) #8
  store <4 x i32> %6839, <4 x i32>* %6727, align 16
  %6840 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6827, i32 %6674) #8
  store <4 x i32> %6840, <4 x i32>* %6732, align 16
  %6841 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6830, i32 %6674) #8
  store <4 x i32> %6841, <4 x i32>* %6737, align 16
  %6842 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6820, i32 %6674) #8
  store <4 x i32> %6842, <4 x i32>* %6742, align 16
  %6843 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6823, i32 %6674) #8
  store <4 x i32> %6843, <4 x i32>* %6747, align 16
  %6844 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6813, i32 %6674) #8
  store <4 x i32> %6844, <4 x i32>* %6752, align 16
  %6845 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6816, i32 %6674) #8
  store <4 x i32> %6845, <4 x i32>* %6757, align 16
  %6846 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6769, i32 %6674) #8
  store <4 x i32> %6846, <4 x i32>* %6771, align 16
  %6847 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6774, i32 %6674) #8
  store <4 x i32> %6847, <4 x i32>* %6776, align 16
  %6848 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6780, i32 %6674) #8
  store <4 x i32> %6848, <4 x i32>* %6782, align 16
  %6849 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6785, i32 %6674) #8
  store <4 x i32> %6849, <4 x i32>* %6787, align 16
  %6850 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6791, i32 %6674) #8
  store <4 x i32> %6850, <4 x i32>* %6793, align 16
  %6851 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6796, i32 %6674) #8
  store <4 x i32> %6851, <4 x i32>* %6798, align 16
  %6852 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6802, i32 %6674) #8
  store <4 x i32> %6852, <4 x i32>* %6804, align 16
  %6853 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %6807, i32 %6674) #8
  store <4 x i32> %6853, <4 x i32>* %6809, align 16
  %6854 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 1), align 1
  %6855 = shl <4 x i32> %6838, <i32 1, i32 1, i32 1, i32 1>
  %6856 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  %6857 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  store <4 x i32> %6855, <4 x i32>* %6857, align 16
  %6858 = shl <4 x i32> %6839, <i32 1, i32 1, i32 1, i32 1>
  %6859 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %6860 = bitcast <2 x i64>* %6859 to <4 x i32>*
  store <4 x i32> %6858, <4 x i32>* %6860, align 16
  %6861 = shl <4 x i32> %6840, <i32 1, i32 1, i32 1, i32 1>
  %6862 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %6863 = bitcast <2 x i64>* %6862 to <4 x i32>*
  store <4 x i32> %6861, <4 x i32>* %6863, align 16
  %6864 = shl <4 x i32> %6841, <i32 1, i32 1, i32 1, i32 1>
  %6865 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %6866 = bitcast <2 x i64>* %6865 to <4 x i32>*
  store <4 x i32> %6864, <4 x i32>* %6866, align 16
  %6867 = shl <4 x i32> %6842, <i32 1, i32 1, i32 1, i32 1>
  %6868 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %6869 = bitcast <2 x i64>* %6868 to <4 x i32>*
  store <4 x i32> %6867, <4 x i32>* %6869, align 16
  %6870 = shl <4 x i32> %6843, <i32 1, i32 1, i32 1, i32 1>
  %6871 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %6872 = bitcast <2 x i64>* %6871 to <4 x i32>*
  store <4 x i32> %6870, <4 x i32>* %6872, align 16
  %6873 = shl <4 x i32> %6844, <i32 1, i32 1, i32 1, i32 1>
  %6874 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %6875 = bitcast <2 x i64>* %6874 to <4 x i32>*
  store <4 x i32> %6873, <4 x i32>* %6875, align 16
  %6876 = shl <4 x i32> %6845, <i32 1, i32 1, i32 1, i32 1>
  %6877 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %6878 = bitcast <2 x i64>* %6877 to <4 x i32>*
  store <4 x i32> %6876, <4 x i32>* %6878, align 16
  %6879 = shl <4 x i32> %6846, <i32 1, i32 1, i32 1, i32 1>
  %6880 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %6881 = bitcast <2 x i64>* %6880 to <4 x i32>*
  store <4 x i32> %6879, <4 x i32>* %6881, align 16
  %6882 = shl <4 x i32> %6847, <i32 1, i32 1, i32 1, i32 1>
  %6883 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %6884 = bitcast <2 x i64>* %6883 to <4 x i32>*
  store <4 x i32> %6882, <4 x i32>* %6884, align 16
  %6885 = shl <4 x i32> %6848, <i32 1, i32 1, i32 1, i32 1>
  %6886 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %6887 = bitcast <2 x i64>* %6886 to <4 x i32>*
  store <4 x i32> %6885, <4 x i32>* %6887, align 16
  %6888 = shl <4 x i32> %6849, <i32 1, i32 1, i32 1, i32 1>
  %6889 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %6890 = bitcast <2 x i64>* %6889 to <4 x i32>*
  store <4 x i32> %6888, <4 x i32>* %6890, align 16
  %6891 = shl <4 x i32> %6850, <i32 1, i32 1, i32 1, i32 1>
  %6892 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %6893 = bitcast <2 x i64>* %6892 to <4 x i32>*
  store <4 x i32> %6891, <4 x i32>* %6893, align 16
  %6894 = shl <4 x i32> %6851, <i32 1, i32 1, i32 1, i32 1>
  %6895 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %6896 = bitcast <2 x i64>* %6895 to <4 x i32>*
  store <4 x i32> %6894, <4 x i32>* %6896, align 16
  %6897 = shl <4 x i32> %6852, <i32 1, i32 1, i32 1, i32 1>
  %6898 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %6899 = bitcast <2 x i64>* %6898 to <4 x i32>*
  store <4 x i32> %6897, <4 x i32>* %6899, align 16
  %6900 = shl <4 x i32> %6853, <i32 1, i32 1, i32 1, i32 1>
  %6901 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %6902 = bitcast <2 x i64>* %6901 to <4 x i32>*
  store <4 x i32> %6900, <4 x i32>* %6902, align 16
  %6903 = getelementptr inbounds i8, i8* %10, i64 1
  %6904 = load i8, i8* %6903, align 1
  %6905 = sext i8 %6904 to i32
  %6906 = sub nsw i32 0, %6905
  %6907 = xor i32 %6905, -1
  %6908 = shl i32 1, %6907
  %6909 = insertelement <4 x i32> undef, i32 %6908, i32 0
  %6910 = shufflevector <4 x i32> %6909, <4 x i32> undef, <4 x i32> zeroinitializer
  %6911 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  %6912 = add <4 x i32> %6910, %6855
  %6913 = add <4 x i32> %6910, %6858
  %6914 = add <4 x i32> %6910, %6861
  %6915 = add <4 x i32> %6864, %6910
  %6916 = add <4 x i32> %6867, %6910
  %6917 = add <4 x i32> %6870, %6910
  %6918 = add <4 x i32> %6873, %6910
  %6919 = add <4 x i32> %6876, %6910
  %6920 = add <4 x i32> %6879, %6910
  %6921 = add <4 x i32> %6882, %6910
  %6922 = add <4 x i32> %6885, %6910
  %6923 = add <4 x i32> %6888, %6910
  %6924 = add <4 x i32> %6891, %6910
  %6925 = add <4 x i32> %6894, %6910
  %6926 = add <4 x i32> %6897, %6910
  %6927 = add <4 x i32> %6900, %6910
  %6928 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6912, i32 %6906) #8
  store <4 x i32> %6928, <4 x i32>* %6911, align 16
  %6929 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6913, i32 %6906) #8
  store <4 x i32> %6929, <4 x i32>* %6860, align 16
  %6930 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6914, i32 %6906) #8
  store <4 x i32> %6930, <4 x i32>* %6863, align 16
  %6931 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6915, i32 %6906) #8
  store <4 x i32> %6931, <4 x i32>* %6866, align 16
  %6932 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6916, i32 %6906) #8
  store <4 x i32> %6932, <4 x i32>* %6869, align 16
  %6933 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6917, i32 %6906) #8
  store <4 x i32> %6933, <4 x i32>* %6872, align 16
  %6934 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6918, i32 %6906) #8
  store <4 x i32> %6934, <4 x i32>* %6875, align 16
  %6935 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6919, i32 %6906) #8
  store <4 x i32> %6935, <4 x i32>* %6878, align 16
  %6936 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6920, i32 %6906) #8
  store <4 x i32> %6936, <4 x i32>* %6881, align 16
  %6937 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6921, i32 %6906) #8
  store <4 x i32> %6937, <4 x i32>* %6884, align 16
  %6938 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6922, i32 %6906) #8
  store <4 x i32> %6938, <4 x i32>* %6887, align 16
  %6939 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6923, i32 %6906) #8
  store <4 x i32> %6939, <4 x i32>* %6890, align 16
  %6940 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6924, i32 %6906) #8
  store <4 x i32> %6940, <4 x i32>* %6893, align 16
  %6941 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6925, i32 %6906) #8
  store <4 x i32> %6941, <4 x i32>* %6896, align 16
  %6942 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6926, i32 %6906) #8
  store <4 x i32> %6942, <4 x i32>* %6899, align 16
  %6943 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6927, i32 %6906) #8
  store <4 x i32> %6943, <4 x i32>* %6902, align 16
  %6944 = shufflevector <4 x i32> %6928, <4 x i32> %6930, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6945 = bitcast <4 x i32> %6944 to <2 x i64>
  %6946 = shufflevector <4 x i32> %6928, <4 x i32> %6930, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6947 = bitcast <4 x i32> %6946 to <2 x i64>
  %6948 = shufflevector <4 x i32> %6932, <4 x i32> %6934, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6949 = bitcast <4 x i32> %6948 to <2 x i64>
  %6950 = shufflevector <4 x i32> %6932, <4 x i32> %6934, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6951 = bitcast <4 x i32> %6950 to <2 x i64>
  %6952 = shufflevector <2 x i64> %6945, <2 x i64> %6949, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6952, <2 x i64>* %6672, align 16
  %6953 = shufflevector <2 x i64> %6945, <2 x i64> %6949, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6953, <2 x i64>* %6687, align 16
  %6954 = shufflevector <2 x i64> %6947, <2 x i64> %6951, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6954, <2 x i64>* %6699, align 16
  %6955 = shufflevector <2 x i64> %6947, <2 x i64> %6951, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6955, <2 x i64>* %6711, align 16
  %6956 = shufflevector <4 x i32> %6929, <4 x i32> %6931, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6957 = bitcast <4 x i32> %6956 to <2 x i64>
  %6958 = shufflevector <4 x i32> %6929, <4 x i32> %6931, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6959 = bitcast <4 x i32> %6958 to <2 x i64>
  %6960 = shufflevector <4 x i32> %6933, <4 x i32> %6935, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6961 = bitcast <4 x i32> %6960 to <2 x i64>
  %6962 = shufflevector <4 x i32> %6933, <4 x i32> %6935, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6963 = bitcast <4 x i32> %6962 to <2 x i64>
  %6964 = shufflevector <2 x i64> %6957, <2 x i64> %6961, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6964, <2 x i64>* %6770, align 16
  %6965 = shufflevector <2 x i64> %6957, <2 x i64> %6961, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6965, <2 x i64>* %6781, align 16
  %6966 = shufflevector <2 x i64> %6959, <2 x i64> %6963, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6966, <2 x i64>* %6792, align 16
  %6967 = shufflevector <2 x i64> %6959, <2 x i64> %6963, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6967, <2 x i64>* %6803, align 16
  %6968 = shufflevector <4 x i32> %6936, <4 x i32> %6938, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6969 = bitcast <4 x i32> %6968 to <2 x i64>
  %6970 = shufflevector <4 x i32> %6936, <4 x i32> %6938, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6971 = bitcast <4 x i32> %6970 to <2 x i64>
  %6972 = shufflevector <4 x i32> %6940, <4 x i32> %6942, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6973 = bitcast <4 x i32> %6972 to <2 x i64>
  %6974 = shufflevector <4 x i32> %6940, <4 x i32> %6942, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6975 = bitcast <4 x i32> %6974 to <2 x i64>
  %6976 = shufflevector <2 x i64> %6969, <2 x i64> %6973, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6976, <2 x i64>* %6681, align 16
  %6977 = shufflevector <2 x i64> %6969, <2 x i64> %6973, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6977, <2 x i64>* %6693, align 16
  %6978 = shufflevector <2 x i64> %6971, <2 x i64> %6975, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6978, <2 x i64>* %6705, align 16
  %6979 = shufflevector <2 x i64> %6971, <2 x i64> %6975, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6979, <2 x i64>* %6717, align 16
  %6980 = shufflevector <4 x i32> %6937, <4 x i32> %6939, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6981 = bitcast <4 x i32> %6980 to <2 x i64>
  %6982 = shufflevector <4 x i32> %6937, <4 x i32> %6939, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6983 = bitcast <4 x i32> %6982 to <2 x i64>
  %6984 = shufflevector <4 x i32> %6941, <4 x i32> %6943, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6985 = bitcast <4 x i32> %6984 to <2 x i64>
  %6986 = shufflevector <4 x i32> %6941, <4 x i32> %6943, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6987 = bitcast <4 x i32> %6986 to <2 x i64>
  %6988 = shufflevector <2 x i64> %6981, <2 x i64> %6985, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6988, <2 x i64>* %6775, align 16
  %6989 = shufflevector <2 x i64> %6981, <2 x i64> %6985, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6989, <2 x i64>* %6786, align 16
  %6990 = shufflevector <2 x i64> %6983, <2 x i64> %6987, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6990, <2 x i64>* %6797, align 16
  %6991 = shufflevector <2 x i64> %6983, <2 x i64> %6987, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6991, <2 x i64>* %6808, align 16
  %6992 = sext i8 %6854 to i32
  call void @fadst8x8_sse4_1(<2 x i64>* nonnull %6672, <2 x i64>* nonnull %6856, i32 %6992, i32 2)
  %6993 = load <4 x i32>, <4 x i32>* %6911, align 16
  %6994 = load <4 x i32>, <4 x i32>* %6863, align 16
  %6995 = shufflevector <4 x i32> %6993, <4 x i32> %6994, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6996 = bitcast <4 x i32> %6995 to <2 x i64>
  %6997 = shufflevector <4 x i32> %6993, <4 x i32> %6994, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6998 = bitcast <4 x i32> %6997 to <2 x i64>
  %6999 = load <4 x i32>, <4 x i32>* %6869, align 16
  %7000 = load <4 x i32>, <4 x i32>* %6875, align 16
  %7001 = shufflevector <4 x i32> %6999, <4 x i32> %7000, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7002 = bitcast <4 x i32> %7001 to <2 x i64>
  %7003 = shufflevector <4 x i32> %6999, <4 x i32> %7000, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7004 = bitcast <4 x i32> %7003 to <2 x i64>
  %7005 = shufflevector <2 x i64> %6996, <2 x i64> %7002, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7005, <2 x i64>* %6672, align 16
  %7006 = shufflevector <2 x i64> %6996, <2 x i64> %7002, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7006, <2 x i64>* %6687, align 16
  %7007 = shufflevector <2 x i64> %6998, <2 x i64> %7004, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7007, <2 x i64>* %6699, align 16
  %7008 = shufflevector <2 x i64> %6998, <2 x i64> %7004, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7008, <2 x i64>* %6711, align 16
  %7009 = load <4 x i32>, <4 x i32>* %6860, align 16
  %7010 = load <4 x i32>, <4 x i32>* %6866, align 16
  %7011 = shufflevector <4 x i32> %7009, <4 x i32> %7010, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7012 = bitcast <4 x i32> %7011 to <2 x i64>
  %7013 = shufflevector <4 x i32> %7009, <4 x i32> %7010, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7014 = bitcast <4 x i32> %7013 to <2 x i64>
  %7015 = load <4 x i32>, <4 x i32>* %6872, align 16
  %7016 = load <4 x i32>, <4 x i32>* %6878, align 16
  %7017 = shufflevector <4 x i32> %7015, <4 x i32> %7016, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7018 = bitcast <4 x i32> %7017 to <2 x i64>
  %7019 = shufflevector <4 x i32> %7015, <4 x i32> %7016, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7020 = bitcast <4 x i32> %7019 to <2 x i64>
  %7021 = shufflevector <2 x i64> %7012, <2 x i64> %7018, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7021, <2 x i64>* %6770, align 16
  %7022 = shufflevector <2 x i64> %7012, <2 x i64> %7018, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7022, <2 x i64>* %6781, align 16
  %7023 = shufflevector <2 x i64> %7014, <2 x i64> %7020, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7023, <2 x i64>* %6792, align 16
  %7024 = shufflevector <2 x i64> %7014, <2 x i64> %7020, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7024, <2 x i64>* %6803, align 16
  %7025 = load <4 x i32>, <4 x i32>* %6881, align 16
  %7026 = load <4 x i32>, <4 x i32>* %6887, align 16
  %7027 = shufflevector <4 x i32> %7025, <4 x i32> %7026, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7028 = bitcast <4 x i32> %7027 to <2 x i64>
  %7029 = shufflevector <4 x i32> %7025, <4 x i32> %7026, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7030 = bitcast <4 x i32> %7029 to <2 x i64>
  %7031 = load <4 x i32>, <4 x i32>* %6893, align 16
  %7032 = load <4 x i32>, <4 x i32>* %6899, align 16
  %7033 = shufflevector <4 x i32> %7031, <4 x i32> %7032, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7034 = bitcast <4 x i32> %7033 to <2 x i64>
  %7035 = shufflevector <4 x i32> %7031, <4 x i32> %7032, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7036 = bitcast <4 x i32> %7035 to <2 x i64>
  %7037 = shufflevector <2 x i64> %7028, <2 x i64> %7034, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7037, <2 x i64>* %6681, align 16
  %7038 = shufflevector <2 x i64> %7028, <2 x i64> %7034, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7038, <2 x i64>* %6693, align 16
  %7039 = shufflevector <2 x i64> %7030, <2 x i64> %7036, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7039, <2 x i64>* %6705, align 16
  %7040 = shufflevector <2 x i64> %7030, <2 x i64> %7036, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7040, <2 x i64>* %6717, align 16
  %7041 = load <4 x i32>, <4 x i32>* %6884, align 16
  %7042 = load <4 x i32>, <4 x i32>* %6890, align 16
  %7043 = shufflevector <4 x i32> %7041, <4 x i32> %7042, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7044 = bitcast <4 x i32> %7043 to <2 x i64>
  %7045 = shufflevector <4 x i32> %7041, <4 x i32> %7042, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7046 = bitcast <4 x i32> %7045 to <2 x i64>
  %7047 = load <4 x i32>, <4 x i32>* %6896, align 16
  %7048 = load <4 x i32>, <4 x i32>* %6902, align 16
  %7049 = shufflevector <4 x i32> %7047, <4 x i32> %7048, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7050 = bitcast <4 x i32> %7049 to <2 x i64>
  %7051 = shufflevector <4 x i32> %7047, <4 x i32> %7048, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7052 = bitcast <4 x i32> %7051 to <2 x i64>
  %7053 = shufflevector <2 x i64> %7044, <2 x i64> %7050, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7053, <2 x i64>* %6775, align 16
  %7054 = shufflevector <2 x i64> %7044, <2 x i64> %7050, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7054, <2 x i64>* %6786, align 16
  %7055 = shufflevector <2 x i64> %7046, <2 x i64> %7052, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7055, <2 x i64>* %6797, align 16
  %7056 = shufflevector <2 x i64> %7046, <2 x i64> %7052, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7056, <2 x i64>* %6808, align 16
  br label %7057

7057:                                             ; preds = %11, %678, %1190, %1693, %2040, %2552, %3095, %3482, %3869, %4216, %4574, %5091, %5601, %5963, %6309, %6671
  %7058 = phi <2 x i64> [ %7005, %6671 ], [ %6631, %6309 ], [ %6257, %5963 ], [ %5923, %5601 ], [ %5561, %5091 ], [ %5051, %4574 ], [ %4534, %4216 ], [ %4164, %3869 ], [ %3817, %3482 ], [ %3430, %3095 ], [ %3043, %2552 ], [ %2512, %2040 ], [ %1988, %1693 ], [ %1641, %1190 ], [ %1150, %678 ], [ %638, %11 ]
  %7059 = phi <2 x i64> [ %7037, %6671 ], [ %6655, %6309 ], [ %6289, %5963 ], [ %5947, %5601 ], [ %5585, %5091 ], [ %5075, %4574 ], [ %4558, %4216 ], [ %4196, %3869 ], [ %3849, %3482 ], [ %3462, %3095 ], [ %3075, %2552 ], [ %2536, %2040 ], [ %2020, %1693 ], [ %1673, %1190 ], [ %1174, %678 ], [ %662, %11 ]
  %7060 = phi <2 x i64> [ %7006, %6671 ], [ %6632, %6309 ], [ %6258, %5963 ], [ %5924, %5601 ], [ %5562, %5091 ], [ %5052, %4574 ], [ %4535, %4216 ], [ %4165, %3869 ], [ %3818, %3482 ], [ %3431, %3095 ], [ %3044, %2552 ], [ %2513, %2040 ], [ %1989, %1693 ], [ %1642, %1190 ], [ %1151, %678 ], [ %639, %11 ]
  %7061 = phi <2 x i64> [ %7038, %6671 ], [ %6656, %6309 ], [ %6290, %5963 ], [ %5948, %5601 ], [ %5586, %5091 ], [ %5076, %4574 ], [ %4559, %4216 ], [ %4197, %3869 ], [ %3850, %3482 ], [ %3463, %3095 ], [ %3076, %2552 ], [ %2537, %2040 ], [ %2021, %1693 ], [ %1674, %1190 ], [ %1175, %678 ], [ %663, %11 ]
  %7062 = phi <2 x i64> [ %7007, %6671 ], [ %6633, %6309 ], [ %6259, %5963 ], [ %5925, %5601 ], [ %5563, %5091 ], [ %5053, %4574 ], [ %4536, %4216 ], [ %4166, %3869 ], [ %3819, %3482 ], [ %3432, %3095 ], [ %3045, %2552 ], [ %2514, %2040 ], [ %1990, %1693 ], [ %1643, %1190 ], [ %1152, %678 ], [ %640, %11 ]
  %7063 = phi <2 x i64> [ %7039, %6671 ], [ %6657, %6309 ], [ %6291, %5963 ], [ %5949, %5601 ], [ %5587, %5091 ], [ %5077, %4574 ], [ %4560, %4216 ], [ %4198, %3869 ], [ %3851, %3482 ], [ %3464, %3095 ], [ %3077, %2552 ], [ %2538, %2040 ], [ %2022, %1693 ], [ %1675, %1190 ], [ %1176, %678 ], [ %664, %11 ]
  %7064 = phi <2 x i64> [ %7008, %6671 ], [ %6634, %6309 ], [ %6260, %5963 ], [ %5926, %5601 ], [ %5564, %5091 ], [ %5054, %4574 ], [ %4537, %4216 ], [ %4167, %3869 ], [ %3820, %3482 ], [ %3433, %3095 ], [ %3046, %2552 ], [ %2515, %2040 ], [ %1991, %1693 ], [ %1644, %1190 ], [ %1153, %678 ], [ %641, %11 ]
  %7065 = phi <2 x i64> [ %7040, %6671 ], [ %6658, %6309 ], [ %6292, %5963 ], [ %5950, %5601 ], [ %5588, %5091 ], [ %5078, %4574 ], [ %4561, %4216 ], [ %4199, %3869 ], [ %3852, %3482 ], [ %3465, %3095 ], [ %3078, %2552 ], [ %2539, %2040 ], [ %2023, %1693 ], [ %1676, %1190 ], [ %1177, %678 ], [ %665, %11 ]
  %7066 = phi <2 x i64> [ %7021, %6671 ], [ %6643, %6309 ], [ %6273, %5963 ], [ %5935, %5601 ], [ %5573, %5091 ], [ %5063, %4574 ], [ %4546, %4216 ], [ %4180, %3869 ], [ %3833, %3482 ], [ %3446, %3095 ], [ %3059, %2552 ], [ %2524, %2040 ], [ %2004, %1693 ], [ %1657, %1190 ], [ %1162, %678 ], [ %650, %11 ]
  %7067 = phi <2 x i64> [ %7053, %6671 ], [ %6667, %6309 ], [ %6305, %5963 ], [ %5959, %5601 ], [ %5597, %5091 ], [ %5087, %4574 ], [ %4570, %4216 ], [ %4212, %3869 ], [ %3865, %3482 ], [ %3478, %3095 ], [ %3091, %2552 ], [ %2548, %2040 ], [ %2036, %1693 ], [ %1689, %1190 ], [ %1186, %678 ], [ %674, %11 ]
  %7068 = phi <2 x i64> [ %7022, %6671 ], [ %6644, %6309 ], [ %6274, %5963 ], [ %5936, %5601 ], [ %5574, %5091 ], [ %5064, %4574 ], [ %4547, %4216 ], [ %4181, %3869 ], [ %3834, %3482 ], [ %3447, %3095 ], [ %3060, %2552 ], [ %2525, %2040 ], [ %2005, %1693 ], [ %1658, %1190 ], [ %1163, %678 ], [ %651, %11 ]
  %7069 = phi <2 x i64> [ %7054, %6671 ], [ %6668, %6309 ], [ %6306, %5963 ], [ %5960, %5601 ], [ %5598, %5091 ], [ %5088, %4574 ], [ %4571, %4216 ], [ %4213, %3869 ], [ %3866, %3482 ], [ %3479, %3095 ], [ %3092, %2552 ], [ %2549, %2040 ], [ %2037, %1693 ], [ %1690, %1190 ], [ %1187, %678 ], [ %675, %11 ]
  %7070 = phi <2 x i64> [ %7023, %6671 ], [ %6645, %6309 ], [ %6275, %5963 ], [ %5937, %5601 ], [ %5575, %5091 ], [ %5065, %4574 ], [ %4548, %4216 ], [ %4182, %3869 ], [ %3835, %3482 ], [ %3448, %3095 ], [ %3061, %2552 ], [ %2526, %2040 ], [ %2006, %1693 ], [ %1659, %1190 ], [ %1164, %678 ], [ %652, %11 ]
  %7071 = phi <2 x i64> [ %7055, %6671 ], [ %6669, %6309 ], [ %6307, %5963 ], [ %5961, %5601 ], [ %5599, %5091 ], [ %5089, %4574 ], [ %4572, %4216 ], [ %4214, %3869 ], [ %3867, %3482 ], [ %3480, %3095 ], [ %3093, %2552 ], [ %2550, %2040 ], [ %2038, %1693 ], [ %1691, %1190 ], [ %1188, %678 ], [ %676, %11 ]
  %7072 = phi <2 x i64> [ %7024, %6671 ], [ %6646, %6309 ], [ %6276, %5963 ], [ %5938, %5601 ], [ %5576, %5091 ], [ %5066, %4574 ], [ %4549, %4216 ], [ %4183, %3869 ], [ %3836, %3482 ], [ %3449, %3095 ], [ %3062, %2552 ], [ %2527, %2040 ], [ %2007, %1693 ], [ %1660, %1190 ], [ %1165, %678 ], [ %653, %11 ]
  %7073 = phi <2 x i64> [ %7056, %6671 ], [ %6670, %6309 ], [ %6308, %5963 ], [ %5962, %5601 ], [ %5600, %5091 ], [ %5090, %4574 ], [ %4573, %4216 ], [ %4215, %3869 ], [ %3868, %3482 ], [ %3481, %3095 ], [ %3094, %2552 ], [ %2551, %2040 ], [ %2039, %1693 ], [ %1692, %1190 ], [ %1189, %678 ], [ %677, %11 ]
  %7074 = bitcast i32* %1 to <2 x i64>*
  store <2 x i64> %7058, <2 x i64>* %7074, align 16
  %7075 = getelementptr inbounds i32, i32* %1, i64 4
  %7076 = bitcast i32* %7075 to <2 x i64>*
  store <2 x i64> %7059, <2 x i64>* %7076, align 16
  %7077 = getelementptr inbounds i32, i32* %1, i64 8
  %7078 = bitcast i32* %7077 to <2 x i64>*
  store <2 x i64> %7060, <2 x i64>* %7078, align 16
  %7079 = getelementptr inbounds i32, i32* %1, i64 12
  %7080 = bitcast i32* %7079 to <2 x i64>*
  store <2 x i64> %7061, <2 x i64>* %7080, align 16
  %7081 = getelementptr inbounds i32, i32* %1, i64 16
  %7082 = bitcast i32* %7081 to <2 x i64>*
  store <2 x i64> %7062, <2 x i64>* %7082, align 16
  %7083 = getelementptr inbounds i32, i32* %1, i64 20
  %7084 = bitcast i32* %7083 to <2 x i64>*
  store <2 x i64> %7063, <2 x i64>* %7084, align 16
  %7085 = getelementptr inbounds i32, i32* %1, i64 24
  %7086 = bitcast i32* %7085 to <2 x i64>*
  store <2 x i64> %7064, <2 x i64>* %7086, align 16
  %7087 = getelementptr inbounds i32, i32* %1, i64 28
  %7088 = bitcast i32* %7087 to <2 x i64>*
  store <2 x i64> %7065, <2 x i64>* %7088, align 16
  %7089 = getelementptr inbounds i32, i32* %1, i64 32
  %7090 = bitcast i32* %7089 to <2 x i64>*
  store <2 x i64> %7066, <2 x i64>* %7090, align 16
  %7091 = getelementptr inbounds i32, i32* %1, i64 36
  %7092 = bitcast i32* %7091 to <2 x i64>*
  store <2 x i64> %7067, <2 x i64>* %7092, align 16
  %7093 = getelementptr inbounds i32, i32* %1, i64 40
  %7094 = bitcast i32* %7093 to <2 x i64>*
  store <2 x i64> %7068, <2 x i64>* %7094, align 16
  %7095 = getelementptr inbounds i32, i32* %1, i64 44
  %7096 = bitcast i32* %7095 to <2 x i64>*
  store <2 x i64> %7069, <2 x i64>* %7096, align 16
  %7097 = getelementptr inbounds i32, i32* %1, i64 48
  %7098 = bitcast i32* %7097 to <2 x i64>*
  store <2 x i64> %7070, <2 x i64>* %7098, align 16
  %7099 = getelementptr inbounds i32, i32* %1, i64 52
  %7100 = bitcast i32* %7099 to <2 x i64>*
  store <2 x i64> %7071, <2 x i64>* %7100, align 16
  %7101 = getelementptr inbounds i32, i32* %1, i64 56
  %7102 = bitcast i32* %7101 to <2 x i64>*
  store <2 x i64> %7072, <2 x i64>* %7102, align 16
  %7103 = getelementptr inbounds i32, i32* %1, i64 60
  %7104 = bitcast i32* %7103 to <2 x i64>*
  store <2 x i64> %7073, <2 x i64>* %7104, align 16
  br label %7105

7105:                                             ; preds = %7057, %5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %8) #8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fdct8x8_sse4_1(<2 x i64>* nocapture readonly, <2 x i64>* nocapture, i32, i32) #3 {
  tail call void @fdct4x8_sse4_1(<2 x i64>* %0, <2 x i64>* %1, i32 %2, i32 %3)
  %5 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 1
  %6 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 1
  tail call void @fdct4x8_sse4_1(<2 x i64>* %5, <2 x i64>* %6, i32 %2, i32 %3)
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fadst8x8_sse4_1(<2 x i64>* nocapture readonly, <2 x i64>* nocapture, i32, i32) #2 {
  %5 = add nsw i32 %2, -10
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 32
  %8 = load i32, i32* %7, align 16
  %9 = insertelement <4 x i32> undef, i32 %8, i32 0
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> zeroinitializer
  %11 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 16
  %12 = load i32, i32* %11, align 16
  %13 = insertelement <4 x i32> undef, i32 %12, i32 0
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> zeroinitializer
  %15 = sub nsw i32 0, %12
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = shufflevector <4 x i32> %16, <4 x i32> undef, <4 x i32> zeroinitializer
  %18 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 48
  %19 = load i32, i32* %18, align 16
  %20 = insertelement <4 x i32> undef, i32 %19, i32 0
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> zeroinitializer
  %22 = sub nsw i32 0, %19
  %23 = insertelement <4 x i32> undef, i32 %22, i32 0
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 4
  %26 = load i32, i32* %25, align 16
  %27 = insertelement <4 x i32> undef, i32 %26, i32 0
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> zeroinitializer
  %29 = sub nsw i32 0, %26
  %30 = insertelement <4 x i32> undef, i32 %29, i32 0
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> zeroinitializer
  %32 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 60
  %33 = load i32, i32* %32, align 16
  %34 = insertelement <4 x i32> undef, i32 %33, i32 0
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> zeroinitializer
  %36 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 20
  %37 = load i32, i32* %36, align 16
  %38 = insertelement <4 x i32> undef, i32 %37, i32 0
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> zeroinitializer
  %40 = sub nsw i32 0, %37
  %41 = insertelement <4 x i32> undef, i32 %40, i32 0
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> zeroinitializer
  %43 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 44
  %44 = load i32, i32* %43, align 16
  %45 = insertelement <4 x i32> undef, i32 %44, i32 0
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> zeroinitializer
  %47 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 28
  %48 = load i32, i32* %47, align 16
  %49 = insertelement <4 x i32> undef, i32 %48, i32 0
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  %51 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 36
  %52 = load i32, i32* %51, align 16
  %53 = insertelement <4 x i32> undef, i32 %52, i32 0
  %54 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> zeroinitializer
  %55 = sub nsw i32 0, %52
  %56 = insertelement <4 x i32> undef, i32 %55, i32 0
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> zeroinitializer
  %58 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 52
  %59 = load i32, i32* %58, align 16
  %60 = insertelement <4 x i32> undef, i32 %59, i32 0
  %61 = shufflevector <4 x i32> %60, <4 x i32> undef, <4 x i32> zeroinitializer
  %62 = sub nsw i32 0, %59
  %63 = insertelement <4 x i32> undef, i32 %62, i32 0
  %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> zeroinitializer
  %65 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 12
  %66 = load i32, i32* %65, align 16
  %67 = insertelement <4 x i32> undef, i32 %66, i32 0
  %68 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> zeroinitializer
  %69 = add nsw i32 %2, -1
  %70 = shl i32 1, %69
  %71 = insertelement <4 x i32> undef, i32 %70, i32 0
  %72 = shufflevector <4 x i32> %71, <4 x i32> undef, <4 x i32> zeroinitializer
  %73 = icmp sgt i32 %3, 0
  br i1 %73, label %74, label %232

74:                                               ; preds = %4
  %75 = mul nsw i32 %3, 7
  %76 = mul nsw i32 %3, 3
  %77 = shl i32 %3, 2
  %78 = mul nsw i32 %3, 6
  %79 = shl i32 %3, 1
  %80 = mul nsw i32 %3, 5
  %81 = sext i32 %80 to i64
  %82 = sext i32 %79 to i64
  %83 = sext i32 %78 to i64
  %84 = sext i32 %3 to i64
  %85 = sext i32 %77 to i64
  %86 = sext i32 %76 to i64
  %87 = sext i32 %75 to i64
  %88 = zext i32 %3 to i64
  br label %89

89:                                               ; preds = %89, %74
  %90 = phi i64 [ 0, %74 ], [ %230, %89 ]
  %91 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %90
  %92 = bitcast <2 x i64>* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 16
  %94 = add nsw i64 %90, %87
  %95 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %94
  %96 = bitcast <2 x i64>* %95 to <4 x i32>*
  %97 = load <4 x i32>, <4 x i32>* %96, align 16
  %98 = add nsw i64 %90, %86
  %99 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %98
  %100 = bitcast <2 x i64>* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 16
  %102 = add nsw i64 %90, %85
  %103 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %102
  %104 = bitcast <2 x i64>* %103 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 16
  %106 = add nsw i64 %90, %84
  %107 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %106
  %108 = bitcast <2 x i64>* %107 to <4 x i32>*
  %109 = load <4 x i32>, <4 x i32>* %108, align 16
  %110 = add nsw i64 %90, %83
  %111 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %110
  %112 = bitcast <2 x i64>* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 16
  %114 = add nsw i64 %90, %82
  %115 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %114
  %116 = bitcast <2 x i64>* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 16
  %118 = add nsw i64 %90, %81
  %119 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %118
  %120 = bitcast <2 x i64>* %119 to <4 x i32>*
  %121 = load <4 x i32>, <4 x i32>* %120, align 16
  %122 = mul <4 x i32> %10, %101
  %123 = mul <4 x i32> %105, %10
  %124 = sub <4 x i32> %72, %122
  %125 = add <4 x i32> %124, %123
  %126 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %125, i32 %2) #8
  %127 = sub <4 x i32> %124, %123
  %128 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %127, i32 %2) #8
  %129 = mul <4 x i32> %117, %10
  %130 = mul <4 x i32> %121, %10
  %131 = add <4 x i32> %129, %72
  %132 = sub <4 x i32> %131, %130
  %133 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %132, i32 %2) #8
  %134 = add <4 x i32> %131, %130
  %135 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %134, i32 %2) #8
  %136 = add <4 x i32> %126, %93
  %137 = sub <4 x i32> %128, %97
  %138 = sub <4 x i32> %93, %126
  %139 = add <4 x i32> %128, %97
  %140 = sub <4 x i32> zeroinitializer, %139
  %141 = sub <4 x i32> %133, %109
  %142 = add <4 x i32> %135, %113
  %143 = add <4 x i32> %133, %109
  %144 = sub <4 x i32> zeroinitializer, %143
  %145 = sub <4 x i32> %113, %135
  %146 = mul <4 x i32> %141, %14
  %147 = mul <4 x i32> %142, %21
  %148 = add <4 x i32> %146, %72
  %149 = add <4 x i32> %148, %147
  %150 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %149, i32 %2) #8
  %151 = mul <4 x i32> %141, %21
  %152 = mul <4 x i32> %142, %17
  %153 = add <4 x i32> %151, %72
  %154 = add <4 x i32> %153, %152
  %155 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %154, i32 %2) #8
  %156 = mul <4 x i32> %24, %144
  %157 = mul <4 x i32> %145, %14
  %158 = add <4 x i32> %156, %72
  %159 = add <4 x i32> %158, %157
  %160 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %159, i32 %2) #8
  %161 = mul <4 x i32> %14, %144
  %162 = mul <4 x i32> %145, %21
  %163 = add <4 x i32> %161, %72
  %164 = add <4 x i32> %163, %162
  %165 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %164, i32 %2) #8
  %166 = add <4 x i32> %150, %136
  %167 = add <4 x i32> %155, %137
  %168 = add <4 x i32> %160, %138
  %169 = sub <4 x i32> %165, %139
  %170 = sub <4 x i32> %136, %150
  %171 = sub <4 x i32> %137, %155
  %172 = sub <4 x i32> %138, %160
  %173 = sub <4 x i32> %140, %165
  %174 = mul <4 x i32> %166, %28
  %175 = mul <4 x i32> %167, %35
  %176 = add <4 x i32> %174, %72
  %177 = add <4 x i32> %176, %175
  %178 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %177, i32 %2) #8
  %179 = mul <4 x i32> %166, %35
  %180 = mul <4 x i32> %167, %31
  %181 = add <4 x i32> %179, %72
  %182 = add <4 x i32> %181, %180
  %183 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %182, i32 %2) #8
  %184 = mul <4 x i32> %168, %39
  %185 = mul <4 x i32> %169, %46
  %186 = add <4 x i32> %184, %72
  %187 = add <4 x i32> %186, %185
  %188 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %187, i32 %2) #8
  %189 = mul <4 x i32> %168, %46
  %190 = mul <4 x i32> %169, %42
  %191 = add <4 x i32> %189, %72
  %192 = add <4 x i32> %191, %190
  %193 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %192, i32 %2) #8
  %194 = mul <4 x i32> %170, %54
  %195 = mul <4 x i32> %171, %50
  %196 = add <4 x i32> %194, %72
  %197 = add <4 x i32> %196, %195
  %198 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %197, i32 %2) #8
  %199 = mul <4 x i32> %170, %50
  %200 = mul <4 x i32> %171, %57
  %201 = add <4 x i32> %199, %72
  %202 = add <4 x i32> %201, %200
  %203 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %202, i32 %2) #8
  %204 = mul <4 x i32> %172, %61
  %205 = mul <4 x i32> %173, %68
  %206 = add <4 x i32> %204, %72
  %207 = add <4 x i32> %206, %205
  %208 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %207, i32 %2) #8
  %209 = mul <4 x i32> %172, %68
  %210 = mul <4 x i32> %173, %64
  %211 = add <4 x i32> %209, %72
  %212 = add <4 x i32> %211, %210
  %213 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %212, i32 %2) #8
  %214 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %90
  %215 = bitcast <2 x i64>* %214 to <4 x i32>*
  store <4 x i32> %183, <4 x i32>* %215, align 16
  %216 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %106
  %217 = bitcast <2 x i64>* %216 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %217, align 16
  %218 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %114
  %219 = bitcast <2 x i64>* %218 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %219, align 16
  %220 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %98
  %221 = bitcast <2 x i64>* %220 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %221, align 16
  %222 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %102
  %223 = bitcast <2 x i64>* %222 to <4 x i32>*
  store <4 x i32> %203, <4 x i32>* %223, align 16
  %224 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %118
  %225 = bitcast <2 x i64>* %224 to <4 x i32>*
  store <4 x i32> %188, <4 x i32>* %225, align 16
  %226 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %110
  %227 = bitcast <2 x i64>* %226 to <4 x i32>*
  store <4 x i32> %213, <4 x i32>* %227, align 16
  %228 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %94
  %229 = bitcast <2 x i64>* %228 to <4 x i32>*
  store <4 x i32> %178, <4 x i32>* %229, align 16
  %230 = add nuw nsw i64 %90, 1
  %231 = icmp eq i64 %230, %88
  br i1 %231, label %232, label %89

232:                                              ; preds = %89, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @idtx8x8_sse4_1(<2 x i64>* nocapture readonly, <2 x i64>* nocapture, i32, i32) #4 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  br label %9

8:                                                ; preds = %9, %4
  ret void

9:                                                ; preds = %9, %6
  %10 = phi i64 [ 0, %6 ], [ %76, %9 ]
  %11 = trunc i64 %10 to i32
  %12 = shl nsw i32 %11, 3
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %13
  %15 = bitcast <2 x i64>* %14 to <4 x i32>*
  %16 = load <4 x i32>, <4 x i32>* %15, align 16
  %17 = shl <4 x i32> %16, <i32 1, i32 1, i32 1, i32 1>
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %13
  %19 = bitcast <2 x i64>* %18 to <4 x i32>*
  store <4 x i32> %17, <4 x i32>* %19, align 16
  %20 = or i32 %12, 1
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %21
  %23 = bitcast <2 x i64>* %22 to <4 x i32>*
  %24 = load <4 x i32>, <4 x i32>* %23, align 16
  %25 = shl <4 x i32> %24, <i32 1, i32 1, i32 1, i32 1>
  %26 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %21
  %27 = bitcast <2 x i64>* %26 to <4 x i32>*
  store <4 x i32> %25, <4 x i32>* %27, align 16
  %28 = or i32 %12, 2
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %29
  %31 = bitcast <2 x i64>* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 16
  %33 = shl <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %34 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %29
  %35 = bitcast <2 x i64>* %34 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %35, align 16
  %36 = or i32 %12, 3
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %37
  %39 = bitcast <2 x i64>* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 16
  %41 = shl <4 x i32> %40, <i32 1, i32 1, i32 1, i32 1>
  %42 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %37
  %43 = bitcast <2 x i64>* %42 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 16
  %44 = or i32 %12, 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %45
  %47 = bitcast <2 x i64>* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 16
  %49 = shl <4 x i32> %48, <i32 1, i32 1, i32 1, i32 1>
  %50 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %45
  %51 = bitcast <2 x i64>* %50 to <4 x i32>*
  store <4 x i32> %49, <4 x i32>* %51, align 16
  %52 = or i32 %12, 5
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %53
  %55 = bitcast <2 x i64>* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 16
  %57 = shl <4 x i32> %56, <i32 1, i32 1, i32 1, i32 1>
  %58 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %53
  %59 = bitcast <2 x i64>* %58 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %59, align 16
  %60 = or i32 %12, 6
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %61
  %63 = bitcast <2 x i64>* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 16
  %65 = shl <4 x i32> %64, <i32 1, i32 1, i32 1, i32 1>
  %66 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %61
  %67 = bitcast <2 x i64>* %66 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %67, align 16
  %68 = or i32 %12, 7
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %69
  %71 = bitcast <2 x i64>* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 16
  %73 = shl <4 x i32> %72, <i32 1, i32 1, i32 1, i32 1>
  %74 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %69
  %75 = bitcast <2 x i64>* %74 to <4 x i32>*
  store <4 x i32> %73, <4 x i32>* %75, align 16
  %76 = add nuw nsw i64 %10, 1
  %77 = icmp eq i64 %76, %7
  br i1 %77, label %8, label %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_16x16_sse4_1(i16* nocapture readonly, i32*, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [64 x <2 x i64>], align 16
  %7 = alloca [64 x <2 x i64>], align 16
  %8 = bitcast [64 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 1024, i1 false)
  %9 = bitcast [64 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %9) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 1024, i1 false)
  %10 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 2), align 16
  switch i8 %3, label %17357 [
    i8 0, label %11
    i8 1, label %1046
    i8 2, label %2081
    i8 3, label %3116
    i8 4, label %4178
    i8 5, label %5263
    i8 6, label %6348
    i8 7, label %7433
    i8 8, label %8518
    i8 9, label %9603
    i8 10, label %10727
    i8 11, label %11832
    i8 12, label %12937
    i8 13, label %14042
    i8 14, label %15147
    i8 15, label %16252
  ]

11:                                               ; preds = %5
  %12 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %13 = load i8, i8* %10, align 1
  %14 = sext i8 %13 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %12, i32 %2, i32 0, i32 0, i32 %14)
  %15 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %16 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  %17 = sext i8 %16 to i32
  call void @fdct16x16_sse4_1(<2 x i64>* nonnull %12, <2 x i64>* nonnull %15, i32 %17, i32 4)
  %18 = getelementptr inbounds i8, i8* %10, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = sub nsw i32 0, %20
  %22 = xor i32 %20, -1
  %23 = shl i32 1, %22
  %24 = insertelement <4 x i32> undef, i32 %23, i32 0
  %25 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> zeroinitializer
  %26 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 16
  %28 = add <4 x i32> %25, %27
  %29 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %30 = bitcast <2 x i64>* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 16
  %32 = add <4 x i32> %25, %31
  %33 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %34 = bitcast <2 x i64>* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 16
  %36 = add <4 x i32> %25, %35
  %37 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %38 = bitcast <2 x i64>* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 16
  %40 = add <4 x i32> %39, %25
  %41 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %42 = bitcast <2 x i64>* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 16
  %44 = add <4 x i32> %43, %25
  %45 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %46 = bitcast <2 x i64>* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 16
  %48 = add <4 x i32> %47, %25
  %49 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %50 = bitcast <2 x i64>* %49 to <4 x i32>*
  %51 = load <4 x i32>, <4 x i32>* %50, align 16
  %52 = add <4 x i32> %51, %25
  %53 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %54 = bitcast <2 x i64>* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 16
  %56 = add <4 x i32> %55, %25
  %57 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %58 = bitcast <2 x i64>* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 16
  %60 = add <4 x i32> %59, %25
  %61 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %62 = bitcast <2 x i64>* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 16
  %64 = add <4 x i32> %63, %25
  %65 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %66 = bitcast <2 x i64>* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 16
  %68 = add <4 x i32> %67, %25
  %69 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %70 = bitcast <2 x i64>* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 16
  %72 = add <4 x i32> %71, %25
  %73 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %74 = bitcast <2 x i64>* %73 to <4 x i32>*
  %75 = load <4 x i32>, <4 x i32>* %74, align 16
  %76 = add <4 x i32> %75, %25
  %77 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %78 = bitcast <2 x i64>* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 16
  %80 = add <4 x i32> %79, %25
  %81 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %82 = bitcast <2 x i64>* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 16
  %84 = add <4 x i32> %83, %25
  %85 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %86 = bitcast <2 x i64>* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 16
  %88 = add <4 x i32> %87, %25
  %89 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %28, i32 %21) #8
  store <4 x i32> %89, <4 x i32>* %26, align 16
  %90 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %32, i32 %21) #8
  store <4 x i32> %90, <4 x i32>* %30, align 16
  %91 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %36, i32 %21) #8
  store <4 x i32> %91, <4 x i32>* %34, align 16
  %92 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %40, i32 %21) #8
  store <4 x i32> %92, <4 x i32>* %38, align 16
  %93 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %44, i32 %21) #8
  store <4 x i32> %93, <4 x i32>* %42, align 16
  %94 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %48, i32 %21) #8
  store <4 x i32> %94, <4 x i32>* %46, align 16
  %95 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %52, i32 %21) #8
  store <4 x i32> %95, <4 x i32>* %50, align 16
  %96 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %56, i32 %21) #8
  store <4 x i32> %96, <4 x i32>* %54, align 16
  %97 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %60, i32 %21) #8
  store <4 x i32> %97, <4 x i32>* %58, align 16
  %98 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %64, i32 %21) #8
  store <4 x i32> %98, <4 x i32>* %62, align 16
  %99 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %68, i32 %21) #8
  store <4 x i32> %99, <4 x i32>* %66, align 16
  %100 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %72, i32 %21) #8
  store <4 x i32> %100, <4 x i32>* %70, align 16
  %101 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %76, i32 %21) #8
  store <4 x i32> %101, <4 x i32>* %74, align 16
  %102 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %80, i32 %21) #8
  store <4 x i32> %102, <4 x i32>* %78, align 16
  %103 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %84, i32 %21) #8
  store <4 x i32> %103, <4 x i32>* %82, align 16
  %104 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %88, i32 %21) #8
  store <4 x i32> %104, <4 x i32>* %86, align 16
  %105 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %106 = bitcast <2 x i64>* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 16
  %108 = add <4 x i32> %107, %25
  %109 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %110 = bitcast <2 x i64>* %109 to <4 x i32>*
  %111 = load <4 x i32>, <4 x i32>* %110, align 16
  %112 = add <4 x i32> %111, %25
  %113 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %114 = bitcast <2 x i64>* %113 to <4 x i32>*
  %115 = load <4 x i32>, <4 x i32>* %114, align 16
  %116 = add <4 x i32> %115, %25
  %117 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %118 = bitcast <2 x i64>* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 16
  %120 = add <4 x i32> %119, %25
  %121 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %122 = bitcast <2 x i64>* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 16
  %124 = add <4 x i32> %123, %25
  %125 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %126 = bitcast <2 x i64>* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 16
  %128 = add <4 x i32> %127, %25
  %129 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %130 = bitcast <2 x i64>* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 16
  %132 = add <4 x i32> %131, %25
  %133 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %134 = bitcast <2 x i64>* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 16
  %136 = add <4 x i32> %135, %25
  %137 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %138 = bitcast <2 x i64>* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 16
  %140 = add <4 x i32> %139, %25
  %141 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %142 = bitcast <2 x i64>* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 16
  %144 = add <4 x i32> %143, %25
  %145 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %146 = bitcast <2 x i64>* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 16
  %148 = add <4 x i32> %147, %25
  %149 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %150 = bitcast <2 x i64>* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 16
  %152 = add <4 x i32> %151, %25
  %153 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %154 = bitcast <2 x i64>* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 16
  %156 = add <4 x i32> %155, %25
  %157 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %158 = bitcast <2 x i64>* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 16
  %160 = add <4 x i32> %159, %25
  %161 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %162 = bitcast <2 x i64>* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 16
  %164 = add <4 x i32> %163, %25
  %165 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %166 = bitcast <2 x i64>* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 16
  %168 = add <4 x i32> %167, %25
  %169 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %108, i32 %21) #8
  store <4 x i32> %169, <4 x i32>* %106, align 16
  %170 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %112, i32 %21) #8
  store <4 x i32> %170, <4 x i32>* %110, align 16
  %171 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %116, i32 %21) #8
  store <4 x i32> %171, <4 x i32>* %114, align 16
  %172 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %120, i32 %21) #8
  store <4 x i32> %172, <4 x i32>* %118, align 16
  %173 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %124, i32 %21) #8
  store <4 x i32> %173, <4 x i32>* %122, align 16
  %174 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %128, i32 %21) #8
  store <4 x i32> %174, <4 x i32>* %126, align 16
  %175 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %132, i32 %21) #8
  store <4 x i32> %175, <4 x i32>* %130, align 16
  %176 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %136, i32 %21) #8
  store <4 x i32> %176, <4 x i32>* %134, align 16
  %177 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %140, i32 %21) #8
  store <4 x i32> %177, <4 x i32>* %138, align 16
  %178 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %144, i32 %21) #8
  store <4 x i32> %178, <4 x i32>* %142, align 16
  %179 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %148, i32 %21) #8
  store <4 x i32> %179, <4 x i32>* %146, align 16
  %180 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %152, i32 %21) #8
  store <4 x i32> %180, <4 x i32>* %150, align 16
  %181 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %156, i32 %21) #8
  store <4 x i32> %181, <4 x i32>* %154, align 16
  %182 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %160, i32 %21) #8
  store <4 x i32> %182, <4 x i32>* %158, align 16
  %183 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %164, i32 %21) #8
  store <4 x i32> %183, <4 x i32>* %162, align 16
  %184 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %168, i32 %21) #8
  store <4 x i32> %184, <4 x i32>* %166, align 16
  %185 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %186 = bitcast <2 x i64>* %185 to <4 x i32>*
  %187 = load <4 x i32>, <4 x i32>* %186, align 16
  %188 = add <4 x i32> %187, %25
  %189 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %190 = bitcast <2 x i64>* %189 to <4 x i32>*
  %191 = load <4 x i32>, <4 x i32>* %190, align 16
  %192 = add <4 x i32> %191, %25
  %193 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %194 = bitcast <2 x i64>* %193 to <4 x i32>*
  %195 = load <4 x i32>, <4 x i32>* %194, align 16
  %196 = add <4 x i32> %195, %25
  %197 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %198 = bitcast <2 x i64>* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 16
  %200 = add <4 x i32> %199, %25
  %201 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %202 = bitcast <2 x i64>* %201 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 16
  %204 = add <4 x i32> %203, %25
  %205 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %206 = bitcast <2 x i64>* %205 to <4 x i32>*
  %207 = load <4 x i32>, <4 x i32>* %206, align 16
  %208 = add <4 x i32> %207, %25
  %209 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %210 = bitcast <2 x i64>* %209 to <4 x i32>*
  %211 = load <4 x i32>, <4 x i32>* %210, align 16
  %212 = add <4 x i32> %211, %25
  %213 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %214 = bitcast <2 x i64>* %213 to <4 x i32>*
  %215 = load <4 x i32>, <4 x i32>* %214, align 16
  %216 = add <4 x i32> %215, %25
  %217 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %218 = bitcast <2 x i64>* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 16
  %220 = add <4 x i32> %219, %25
  %221 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %222 = bitcast <2 x i64>* %221 to <4 x i32>*
  %223 = load <4 x i32>, <4 x i32>* %222, align 16
  %224 = add <4 x i32> %223, %25
  %225 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %226 = bitcast <2 x i64>* %225 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 16
  %228 = add <4 x i32> %227, %25
  %229 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %230 = bitcast <2 x i64>* %229 to <4 x i32>*
  %231 = load <4 x i32>, <4 x i32>* %230, align 16
  %232 = add <4 x i32> %231, %25
  %233 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %234 = bitcast <2 x i64>* %233 to <4 x i32>*
  %235 = load <4 x i32>, <4 x i32>* %234, align 16
  %236 = add <4 x i32> %235, %25
  %237 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %238 = bitcast <2 x i64>* %237 to <4 x i32>*
  %239 = load <4 x i32>, <4 x i32>* %238, align 16
  %240 = add <4 x i32> %239, %25
  %241 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %242 = bitcast <2 x i64>* %241 to <4 x i32>*
  %243 = load <4 x i32>, <4 x i32>* %242, align 16
  %244 = add <4 x i32> %243, %25
  %245 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %246 = bitcast <2 x i64>* %245 to <4 x i32>*
  %247 = load <4 x i32>, <4 x i32>* %246, align 16
  %248 = add <4 x i32> %247, %25
  %249 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %188, i32 %21) #8
  store <4 x i32> %249, <4 x i32>* %186, align 16
  %250 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %192, i32 %21) #8
  store <4 x i32> %250, <4 x i32>* %190, align 16
  %251 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %196, i32 %21) #8
  store <4 x i32> %251, <4 x i32>* %194, align 16
  %252 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %200, i32 %21) #8
  store <4 x i32> %252, <4 x i32>* %198, align 16
  %253 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %204, i32 %21) #8
  store <4 x i32> %253, <4 x i32>* %202, align 16
  %254 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %208, i32 %21) #8
  store <4 x i32> %254, <4 x i32>* %206, align 16
  %255 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %212, i32 %21) #8
  store <4 x i32> %255, <4 x i32>* %210, align 16
  %256 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %216, i32 %21) #8
  store <4 x i32> %256, <4 x i32>* %214, align 16
  %257 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %220, i32 %21) #8
  store <4 x i32> %257, <4 x i32>* %218, align 16
  %258 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %224, i32 %21) #8
  store <4 x i32> %258, <4 x i32>* %222, align 16
  %259 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %228, i32 %21) #8
  store <4 x i32> %259, <4 x i32>* %226, align 16
  %260 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %232, i32 %21) #8
  store <4 x i32> %260, <4 x i32>* %230, align 16
  %261 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %236, i32 %21) #8
  store <4 x i32> %261, <4 x i32>* %234, align 16
  %262 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %240, i32 %21) #8
  store <4 x i32> %262, <4 x i32>* %238, align 16
  %263 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %244, i32 %21) #8
  store <4 x i32> %263, <4 x i32>* %242, align 16
  %264 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %248, i32 %21) #8
  store <4 x i32> %264, <4 x i32>* %246, align 16
  %265 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %266 = bitcast <2 x i64>* %265 to <4 x i32>*
  %267 = load <4 x i32>, <4 x i32>* %266, align 16
  %268 = add <4 x i32> %267, %25
  %269 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %270 = bitcast <2 x i64>* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 16
  %272 = add <4 x i32> %271, %25
  %273 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %274 = bitcast <2 x i64>* %273 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 16
  %276 = add <4 x i32> %275, %25
  %277 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %278 = bitcast <2 x i64>* %277 to <4 x i32>*
  %279 = load <4 x i32>, <4 x i32>* %278, align 16
  %280 = add <4 x i32> %279, %25
  %281 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %282 = bitcast <2 x i64>* %281 to <4 x i32>*
  %283 = load <4 x i32>, <4 x i32>* %282, align 16
  %284 = add <4 x i32> %283, %25
  %285 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %286 = bitcast <2 x i64>* %285 to <4 x i32>*
  %287 = load <4 x i32>, <4 x i32>* %286, align 16
  %288 = add <4 x i32> %287, %25
  %289 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %290 = bitcast <2 x i64>* %289 to <4 x i32>*
  %291 = load <4 x i32>, <4 x i32>* %290, align 16
  %292 = add <4 x i32> %291, %25
  %293 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %294 = bitcast <2 x i64>* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 16
  %296 = add <4 x i32> %295, %25
  %297 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %298 = bitcast <2 x i64>* %297 to <4 x i32>*
  %299 = load <4 x i32>, <4 x i32>* %298, align 16
  %300 = add <4 x i32> %299, %25
  %301 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %302 = bitcast <2 x i64>* %301 to <4 x i32>*
  %303 = load <4 x i32>, <4 x i32>* %302, align 16
  %304 = add <4 x i32> %303, %25
  %305 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %306 = bitcast <2 x i64>* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 16
  %308 = add <4 x i32> %307, %25
  %309 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %310 = bitcast <2 x i64>* %309 to <4 x i32>*
  %311 = load <4 x i32>, <4 x i32>* %310, align 16
  %312 = add <4 x i32> %311, %25
  %313 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %314 = bitcast <2 x i64>* %313 to <4 x i32>*
  %315 = load <4 x i32>, <4 x i32>* %314, align 16
  %316 = add <4 x i32> %315, %25
  %317 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %318 = bitcast <2 x i64>* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 16
  %320 = add <4 x i32> %319, %25
  %321 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %322 = bitcast <2 x i64>* %321 to <4 x i32>*
  %323 = load <4 x i32>, <4 x i32>* %322, align 16
  %324 = add <4 x i32> %323, %25
  %325 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %326 = bitcast <2 x i64>* %325 to <4 x i32>*
  %327 = load <4 x i32>, <4 x i32>* %326, align 16
  %328 = add <4 x i32> %327, %25
  %329 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %268, i32 %21) #8
  store <4 x i32> %329, <4 x i32>* %266, align 16
  %330 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %272, i32 %21) #8
  store <4 x i32> %330, <4 x i32>* %270, align 16
  %331 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %276, i32 %21) #8
  store <4 x i32> %331, <4 x i32>* %274, align 16
  %332 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %280, i32 %21) #8
  store <4 x i32> %332, <4 x i32>* %278, align 16
  %333 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %284, i32 %21) #8
  store <4 x i32> %333, <4 x i32>* %282, align 16
  %334 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %288, i32 %21) #8
  store <4 x i32> %334, <4 x i32>* %286, align 16
  %335 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %292, i32 %21) #8
  store <4 x i32> %335, <4 x i32>* %290, align 16
  %336 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %296, i32 %21) #8
  store <4 x i32> %336, <4 x i32>* %294, align 16
  %337 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %300, i32 %21) #8
  store <4 x i32> %337, <4 x i32>* %298, align 16
  %338 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %304, i32 %21) #8
  store <4 x i32> %338, <4 x i32>* %302, align 16
  %339 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %308, i32 %21) #8
  store <4 x i32> %339, <4 x i32>* %306, align 16
  %340 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %312, i32 %21) #8
  store <4 x i32> %340, <4 x i32>* %310, align 16
  %341 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %316, i32 %21) #8
  store <4 x i32> %341, <4 x i32>* %314, align 16
  %342 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %320, i32 %21) #8
  store <4 x i32> %342, <4 x i32>* %318, align 16
  %343 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %324, i32 %21) #8
  store <4 x i32> %343, <4 x i32>* %322, align 16
  %344 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %328, i32 %21) #8
  store <4 x i32> %344, <4 x i32>* %326, align 16
  %345 = shufflevector <4 x i32> %89, <4 x i32> %93, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %346 = bitcast <4 x i32> %345 to <2 x i64>
  %347 = shufflevector <4 x i32> %89, <4 x i32> %93, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %348 = bitcast <4 x i32> %347 to <2 x i64>
  %349 = shufflevector <4 x i32> %97, <4 x i32> %101, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %350 = bitcast <4 x i32> %349 to <2 x i64>
  %351 = shufflevector <4 x i32> %97, <4 x i32> %101, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %352 = bitcast <4 x i32> %351 to <2 x i64>
  %353 = shufflevector <2 x i64> %346, <2 x i64> %350, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %353, <2 x i64>* %12, align 16
  %354 = shufflevector <2 x i64> %346, <2 x i64> %350, <2 x i32> <i32 1, i32 3>
  %355 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %354, <2 x i64>* %355, align 16
  %356 = shufflevector <2 x i64> %348, <2 x i64> %352, <2 x i32> <i32 0, i32 2>
  %357 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %356, <2 x i64>* %357, align 16
  %358 = shufflevector <2 x i64> %348, <2 x i64> %352, <2 x i32> <i32 1, i32 3>
  %359 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %358, <2 x i64>* %359, align 16
  %360 = shufflevector <4 x i32> %90, <4 x i32> %94, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %361 = bitcast <4 x i32> %360 to <2 x i64>
  %362 = shufflevector <4 x i32> %90, <4 x i32> %94, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %363 = bitcast <4 x i32> %362 to <2 x i64>
  %364 = shufflevector <4 x i32> %98, <4 x i32> %102, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %365 = bitcast <4 x i32> %364 to <2 x i64>
  %366 = shufflevector <4 x i32> %98, <4 x i32> %102, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %367 = bitcast <4 x i32> %366 to <2 x i64>
  %368 = shufflevector <2 x i64> %361, <2 x i64> %365, <2 x i32> <i32 0, i32 2>
  %369 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %368, <2 x i64>* %369, align 16
  %370 = shufflevector <2 x i64> %361, <2 x i64> %365, <2 x i32> <i32 1, i32 3>
  %371 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %370, <2 x i64>* %371, align 16
  %372 = shufflevector <2 x i64> %363, <2 x i64> %367, <2 x i32> <i32 0, i32 2>
  %373 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %372, <2 x i64>* %373, align 16
  %374 = shufflevector <2 x i64> %363, <2 x i64> %367, <2 x i32> <i32 1, i32 3>
  %375 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %374, <2 x i64>* %375, align 16
  %376 = load <4 x i32>, <4 x i32>* %122, align 16
  %377 = shufflevector <4 x i32> %169, <4 x i32> %376, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %378 = bitcast <4 x i32> %377 to <2 x i64>
  %379 = shufflevector <4 x i32> %169, <4 x i32> %376, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %380 = bitcast <4 x i32> %379 to <2 x i64>
  %381 = load <4 x i32>, <4 x i32>* %138, align 16
  %382 = load <4 x i32>, <4 x i32>* %154, align 16
  %383 = shufflevector <4 x i32> %381, <4 x i32> %382, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %384 = bitcast <4 x i32> %383 to <2 x i64>
  %385 = shufflevector <4 x i32> %381, <4 x i32> %382, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %386 = bitcast <4 x i32> %385 to <2 x i64>
  %387 = shufflevector <2 x i64> %378, <2 x i64> %384, <2 x i32> <i32 0, i32 2>
  %388 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %387, <2 x i64>* %388, align 16
  %389 = shufflevector <2 x i64> %378, <2 x i64> %384, <2 x i32> <i32 1, i32 3>
  %390 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %389, <2 x i64>* %390, align 16
  %391 = shufflevector <2 x i64> %380, <2 x i64> %386, <2 x i32> <i32 0, i32 2>
  %392 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %391, <2 x i64>* %392, align 16
  %393 = shufflevector <2 x i64> %380, <2 x i64> %386, <2 x i32> <i32 1, i32 3>
  %394 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %393, <2 x i64>* %394, align 16
  %395 = load <4 x i32>, <4 x i32>* %110, align 16
  %396 = load <4 x i32>, <4 x i32>* %126, align 16
  %397 = shufflevector <4 x i32> %395, <4 x i32> %396, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %398 = bitcast <4 x i32> %397 to <2 x i64>
  %399 = shufflevector <4 x i32> %395, <4 x i32> %396, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %400 = bitcast <4 x i32> %399 to <2 x i64>
  %401 = load <4 x i32>, <4 x i32>* %142, align 16
  %402 = load <4 x i32>, <4 x i32>* %158, align 16
  %403 = shufflevector <4 x i32> %401, <4 x i32> %402, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %404 = bitcast <4 x i32> %403 to <2 x i64>
  %405 = shufflevector <4 x i32> %401, <4 x i32> %402, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %406 = bitcast <4 x i32> %405 to <2 x i64>
  %407 = shufflevector <2 x i64> %398, <2 x i64> %404, <2 x i32> <i32 0, i32 2>
  %408 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %407, <2 x i64>* %408, align 16
  %409 = shufflevector <2 x i64> %398, <2 x i64> %404, <2 x i32> <i32 1, i32 3>
  %410 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %409, <2 x i64>* %410, align 16
  %411 = shufflevector <2 x i64> %400, <2 x i64> %406, <2 x i32> <i32 0, i32 2>
  %412 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %411, <2 x i64>* %412, align 16
  %413 = shufflevector <2 x i64> %400, <2 x i64> %406, <2 x i32> <i32 1, i32 3>
  %414 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %413, <2 x i64>* %414, align 16
  %415 = shufflevector <4 x i32> %91, <4 x i32> %95, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %416 = bitcast <4 x i32> %415 to <2 x i64>
  %417 = shufflevector <4 x i32> %91, <4 x i32> %95, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %418 = bitcast <4 x i32> %417 to <2 x i64>
  %419 = shufflevector <4 x i32> %99, <4 x i32> %103, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %420 = bitcast <4 x i32> %419 to <2 x i64>
  %421 = shufflevector <4 x i32> %99, <4 x i32> %103, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %422 = bitcast <4 x i32> %421 to <2 x i64>
  %423 = shufflevector <2 x i64> %416, <2 x i64> %420, <2 x i32> <i32 0, i32 2>
  %424 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %423, <2 x i64>* %424, align 16
  %425 = shufflevector <2 x i64> %416, <2 x i64> %420, <2 x i32> <i32 1, i32 3>
  %426 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %425, <2 x i64>* %426, align 16
  %427 = shufflevector <2 x i64> %418, <2 x i64> %422, <2 x i32> <i32 0, i32 2>
  %428 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %427, <2 x i64>* %428, align 16
  %429 = shufflevector <2 x i64> %418, <2 x i64> %422, <2 x i32> <i32 1, i32 3>
  %430 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %429, <2 x i64>* %430, align 16
  %431 = shufflevector <4 x i32> %92, <4 x i32> %96, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %432 = bitcast <4 x i32> %431 to <2 x i64>
  %433 = shufflevector <4 x i32> %92, <4 x i32> %96, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %434 = bitcast <4 x i32> %433 to <2 x i64>
  %435 = shufflevector <4 x i32> %100, <4 x i32> %104, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %436 = bitcast <4 x i32> %435 to <2 x i64>
  %437 = shufflevector <4 x i32> %100, <4 x i32> %104, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %438 = bitcast <4 x i32> %437 to <2 x i64>
  %439 = shufflevector <2 x i64> %432, <2 x i64> %436, <2 x i32> <i32 0, i32 2>
  %440 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %439, <2 x i64>* %440, align 16
  %441 = shufflevector <2 x i64> %432, <2 x i64> %436, <2 x i32> <i32 1, i32 3>
  %442 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %441, <2 x i64>* %442, align 16
  %443 = shufflevector <2 x i64> %434, <2 x i64> %438, <2 x i32> <i32 0, i32 2>
  %444 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %443, <2 x i64>* %444, align 16
  %445 = shufflevector <2 x i64> %434, <2 x i64> %438, <2 x i32> <i32 1, i32 3>
  %446 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %445, <2 x i64>* %446, align 16
  %447 = load <4 x i32>, <4 x i32>* %114, align 16
  %448 = load <4 x i32>, <4 x i32>* %130, align 16
  %449 = shufflevector <4 x i32> %447, <4 x i32> %448, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %450 = bitcast <4 x i32> %449 to <2 x i64>
  %451 = shufflevector <4 x i32> %447, <4 x i32> %448, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %452 = bitcast <4 x i32> %451 to <2 x i64>
  %453 = load <4 x i32>, <4 x i32>* %146, align 16
  %454 = load <4 x i32>, <4 x i32>* %162, align 16
  %455 = shufflevector <4 x i32> %453, <4 x i32> %454, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %456 = bitcast <4 x i32> %455 to <2 x i64>
  %457 = shufflevector <4 x i32> %453, <4 x i32> %454, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %458 = bitcast <4 x i32> %457 to <2 x i64>
  %459 = shufflevector <2 x i64> %450, <2 x i64> %456, <2 x i32> <i32 0, i32 2>
  %460 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %459, <2 x i64>* %460, align 16
  %461 = shufflevector <2 x i64> %450, <2 x i64> %456, <2 x i32> <i32 1, i32 3>
  %462 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %461, <2 x i64>* %462, align 16
  %463 = shufflevector <2 x i64> %452, <2 x i64> %458, <2 x i32> <i32 0, i32 2>
  %464 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %463, <2 x i64>* %464, align 16
  %465 = shufflevector <2 x i64> %452, <2 x i64> %458, <2 x i32> <i32 1, i32 3>
  %466 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %465, <2 x i64>* %466, align 16
  %467 = load <4 x i32>, <4 x i32>* %118, align 16
  %468 = load <4 x i32>, <4 x i32>* %134, align 16
  %469 = shufflevector <4 x i32> %467, <4 x i32> %468, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %470 = bitcast <4 x i32> %469 to <2 x i64>
  %471 = shufflevector <4 x i32> %467, <4 x i32> %468, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %472 = bitcast <4 x i32> %471 to <2 x i64>
  %473 = load <4 x i32>, <4 x i32>* %150, align 16
  %474 = load <4 x i32>, <4 x i32>* %166, align 16
  %475 = shufflevector <4 x i32> %473, <4 x i32> %474, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %476 = bitcast <4 x i32> %475 to <2 x i64>
  %477 = shufflevector <4 x i32> %473, <4 x i32> %474, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %478 = bitcast <4 x i32> %477 to <2 x i64>
  %479 = shufflevector <2 x i64> %470, <2 x i64> %476, <2 x i32> <i32 0, i32 2>
  %480 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %479, <2 x i64>* %480, align 16
  %481 = shufflevector <2 x i64> %470, <2 x i64> %476, <2 x i32> <i32 1, i32 3>
  %482 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %481, <2 x i64>* %482, align 16
  %483 = shufflevector <2 x i64> %472, <2 x i64> %478, <2 x i32> <i32 0, i32 2>
  %484 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %483, <2 x i64>* %484, align 16
  %485 = shufflevector <2 x i64> %472, <2 x i64> %478, <2 x i32> <i32 1, i32 3>
  %486 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %485, <2 x i64>* %486, align 16
  %487 = load <4 x i32>, <4 x i32>* %202, align 16
  %488 = shufflevector <4 x i32> %249, <4 x i32> %487, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %489 = bitcast <4 x i32> %488 to <2 x i64>
  %490 = shufflevector <4 x i32> %249, <4 x i32> %487, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %491 = bitcast <4 x i32> %490 to <2 x i64>
  %492 = load <4 x i32>, <4 x i32>* %218, align 16
  %493 = load <4 x i32>, <4 x i32>* %234, align 16
  %494 = shufflevector <4 x i32> %492, <4 x i32> %493, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %495 = bitcast <4 x i32> %494 to <2 x i64>
  %496 = shufflevector <4 x i32> %492, <4 x i32> %493, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %497 = bitcast <4 x i32> %496 to <2 x i64>
  %498 = shufflevector <2 x i64> %489, <2 x i64> %495, <2 x i32> <i32 0, i32 2>
  %499 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %498, <2 x i64>* %499, align 16
  %500 = shufflevector <2 x i64> %489, <2 x i64> %495, <2 x i32> <i32 1, i32 3>
  %501 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %500, <2 x i64>* %501, align 16
  %502 = shufflevector <2 x i64> %491, <2 x i64> %497, <2 x i32> <i32 0, i32 2>
  %503 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %502, <2 x i64>* %503, align 16
  %504 = shufflevector <2 x i64> %491, <2 x i64> %497, <2 x i32> <i32 1, i32 3>
  %505 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %504, <2 x i64>* %505, align 16
  %506 = load <4 x i32>, <4 x i32>* %190, align 16
  %507 = load <4 x i32>, <4 x i32>* %206, align 16
  %508 = shufflevector <4 x i32> %506, <4 x i32> %507, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %509 = bitcast <4 x i32> %508 to <2 x i64>
  %510 = shufflevector <4 x i32> %506, <4 x i32> %507, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %511 = bitcast <4 x i32> %510 to <2 x i64>
  %512 = load <4 x i32>, <4 x i32>* %222, align 16
  %513 = load <4 x i32>, <4 x i32>* %238, align 16
  %514 = shufflevector <4 x i32> %512, <4 x i32> %513, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %515 = bitcast <4 x i32> %514 to <2 x i64>
  %516 = shufflevector <4 x i32> %512, <4 x i32> %513, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %517 = bitcast <4 x i32> %516 to <2 x i64>
  %518 = shufflevector <2 x i64> %509, <2 x i64> %515, <2 x i32> <i32 0, i32 2>
  %519 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %518, <2 x i64>* %519, align 16
  %520 = shufflevector <2 x i64> %509, <2 x i64> %515, <2 x i32> <i32 1, i32 3>
  %521 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %520, <2 x i64>* %521, align 16
  %522 = shufflevector <2 x i64> %511, <2 x i64> %517, <2 x i32> <i32 0, i32 2>
  %523 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %522, <2 x i64>* %523, align 16
  %524 = shufflevector <2 x i64> %511, <2 x i64> %517, <2 x i32> <i32 1, i32 3>
  %525 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %524, <2 x i64>* %525, align 16
  %526 = load <4 x i32>, <4 x i32>* %282, align 16
  %527 = shufflevector <4 x i32> %329, <4 x i32> %526, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %528 = bitcast <4 x i32> %527 to <2 x i64>
  %529 = shufflevector <4 x i32> %329, <4 x i32> %526, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %530 = bitcast <4 x i32> %529 to <2 x i64>
  %531 = load <4 x i32>, <4 x i32>* %298, align 16
  %532 = load <4 x i32>, <4 x i32>* %314, align 16
  %533 = shufflevector <4 x i32> %531, <4 x i32> %532, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %534 = bitcast <4 x i32> %533 to <2 x i64>
  %535 = shufflevector <4 x i32> %531, <4 x i32> %532, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %536 = bitcast <4 x i32> %535 to <2 x i64>
  %537 = shufflevector <2 x i64> %528, <2 x i64> %534, <2 x i32> <i32 0, i32 2>
  %538 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %537, <2 x i64>* %538, align 16
  %539 = shufflevector <2 x i64> %528, <2 x i64> %534, <2 x i32> <i32 1, i32 3>
  %540 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %539, <2 x i64>* %540, align 16
  %541 = shufflevector <2 x i64> %530, <2 x i64> %536, <2 x i32> <i32 0, i32 2>
  %542 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %541, <2 x i64>* %542, align 16
  %543 = shufflevector <2 x i64> %530, <2 x i64> %536, <2 x i32> <i32 1, i32 3>
  %544 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %543, <2 x i64>* %544, align 16
  %545 = load <4 x i32>, <4 x i32>* %270, align 16
  %546 = load <4 x i32>, <4 x i32>* %286, align 16
  %547 = shufflevector <4 x i32> %545, <4 x i32> %546, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %548 = bitcast <4 x i32> %547 to <2 x i64>
  %549 = shufflevector <4 x i32> %545, <4 x i32> %546, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %550 = bitcast <4 x i32> %549 to <2 x i64>
  %551 = load <4 x i32>, <4 x i32>* %302, align 16
  %552 = load <4 x i32>, <4 x i32>* %318, align 16
  %553 = shufflevector <4 x i32> %551, <4 x i32> %552, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %554 = bitcast <4 x i32> %553 to <2 x i64>
  %555 = shufflevector <4 x i32> %551, <4 x i32> %552, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %556 = bitcast <4 x i32> %555 to <2 x i64>
  %557 = shufflevector <2 x i64> %548, <2 x i64> %554, <2 x i32> <i32 0, i32 2>
  %558 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %557, <2 x i64>* %558, align 16
  %559 = shufflevector <2 x i64> %548, <2 x i64> %554, <2 x i32> <i32 1, i32 3>
  %560 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %559, <2 x i64>* %560, align 16
  %561 = shufflevector <2 x i64> %550, <2 x i64> %556, <2 x i32> <i32 0, i32 2>
  %562 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %561, <2 x i64>* %562, align 16
  %563 = shufflevector <2 x i64> %550, <2 x i64> %556, <2 x i32> <i32 1, i32 3>
  %564 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %563, <2 x i64>* %564, align 16
  %565 = load <4 x i32>, <4 x i32>* %194, align 16
  %566 = load <4 x i32>, <4 x i32>* %210, align 16
  %567 = shufflevector <4 x i32> %565, <4 x i32> %566, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %568 = bitcast <4 x i32> %567 to <2 x i64>
  %569 = shufflevector <4 x i32> %565, <4 x i32> %566, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %570 = bitcast <4 x i32> %569 to <2 x i64>
  %571 = load <4 x i32>, <4 x i32>* %226, align 16
  %572 = load <4 x i32>, <4 x i32>* %242, align 16
  %573 = shufflevector <4 x i32> %571, <4 x i32> %572, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %574 = bitcast <4 x i32> %573 to <2 x i64>
  %575 = shufflevector <4 x i32> %571, <4 x i32> %572, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %576 = bitcast <4 x i32> %575 to <2 x i64>
  %577 = shufflevector <2 x i64> %568, <2 x i64> %574, <2 x i32> <i32 0, i32 2>
  %578 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %577, <2 x i64>* %578, align 16
  %579 = shufflevector <2 x i64> %568, <2 x i64> %574, <2 x i32> <i32 1, i32 3>
  %580 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %579, <2 x i64>* %580, align 16
  %581 = shufflevector <2 x i64> %570, <2 x i64> %576, <2 x i32> <i32 0, i32 2>
  %582 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %581, <2 x i64>* %582, align 16
  %583 = shufflevector <2 x i64> %570, <2 x i64> %576, <2 x i32> <i32 1, i32 3>
  %584 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %583, <2 x i64>* %584, align 16
  %585 = load <4 x i32>, <4 x i32>* %198, align 16
  %586 = load <4 x i32>, <4 x i32>* %214, align 16
  %587 = shufflevector <4 x i32> %585, <4 x i32> %586, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %588 = bitcast <4 x i32> %587 to <2 x i64>
  %589 = shufflevector <4 x i32> %585, <4 x i32> %586, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %590 = bitcast <4 x i32> %589 to <2 x i64>
  %591 = load <4 x i32>, <4 x i32>* %230, align 16
  %592 = load <4 x i32>, <4 x i32>* %246, align 16
  %593 = shufflevector <4 x i32> %591, <4 x i32> %592, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %594 = bitcast <4 x i32> %593 to <2 x i64>
  %595 = shufflevector <4 x i32> %591, <4 x i32> %592, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %596 = bitcast <4 x i32> %595 to <2 x i64>
  %597 = shufflevector <2 x i64> %588, <2 x i64> %594, <2 x i32> <i32 0, i32 2>
  %598 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %597, <2 x i64>* %598, align 16
  %599 = shufflevector <2 x i64> %588, <2 x i64> %594, <2 x i32> <i32 1, i32 3>
  %600 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %599, <2 x i64>* %600, align 16
  %601 = shufflevector <2 x i64> %590, <2 x i64> %596, <2 x i32> <i32 0, i32 2>
  %602 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %601, <2 x i64>* %602, align 16
  %603 = shufflevector <2 x i64> %590, <2 x i64> %596, <2 x i32> <i32 1, i32 3>
  %604 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %603, <2 x i64>* %604, align 16
  %605 = load <4 x i32>, <4 x i32>* %274, align 16
  %606 = load <4 x i32>, <4 x i32>* %290, align 16
  %607 = shufflevector <4 x i32> %605, <4 x i32> %606, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %608 = bitcast <4 x i32> %607 to <2 x i64>
  %609 = shufflevector <4 x i32> %605, <4 x i32> %606, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %610 = bitcast <4 x i32> %609 to <2 x i64>
  %611 = load <4 x i32>, <4 x i32>* %306, align 16
  %612 = load <4 x i32>, <4 x i32>* %322, align 16
  %613 = shufflevector <4 x i32> %611, <4 x i32> %612, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %614 = bitcast <4 x i32> %613 to <2 x i64>
  %615 = shufflevector <4 x i32> %611, <4 x i32> %612, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %616 = bitcast <4 x i32> %615 to <2 x i64>
  %617 = shufflevector <2 x i64> %608, <2 x i64> %614, <2 x i32> <i32 0, i32 2>
  %618 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %617, <2 x i64>* %618, align 16
  %619 = shufflevector <2 x i64> %608, <2 x i64> %614, <2 x i32> <i32 1, i32 3>
  %620 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %619, <2 x i64>* %620, align 16
  %621 = shufflevector <2 x i64> %610, <2 x i64> %616, <2 x i32> <i32 0, i32 2>
  %622 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %621, <2 x i64>* %622, align 16
  %623 = shufflevector <2 x i64> %610, <2 x i64> %616, <2 x i32> <i32 1, i32 3>
  %624 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %623, <2 x i64>* %624, align 16
  %625 = load <4 x i32>, <4 x i32>* %278, align 16
  %626 = load <4 x i32>, <4 x i32>* %294, align 16
  %627 = shufflevector <4 x i32> %625, <4 x i32> %626, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %628 = bitcast <4 x i32> %627 to <2 x i64>
  %629 = shufflevector <4 x i32> %625, <4 x i32> %626, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %630 = bitcast <4 x i32> %629 to <2 x i64>
  %631 = load <4 x i32>, <4 x i32>* %310, align 16
  %632 = load <4 x i32>, <4 x i32>* %326, align 16
  %633 = shufflevector <4 x i32> %631, <4 x i32> %632, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %634 = bitcast <4 x i32> %633 to <2 x i64>
  %635 = shufflevector <4 x i32> %631, <4 x i32> %632, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %636 = bitcast <4 x i32> %635 to <2 x i64>
  %637 = shufflevector <2 x i64> %628, <2 x i64> %634, <2 x i32> <i32 0, i32 2>
  %638 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %637, <2 x i64>* %638, align 16
  %639 = shufflevector <2 x i64> %628, <2 x i64> %634, <2 x i32> <i32 1, i32 3>
  %640 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %639, <2 x i64>* %640, align 16
  %641 = shufflevector <2 x i64> %630, <2 x i64> %636, <2 x i32> <i32 0, i32 2>
  %642 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %641, <2 x i64>* %642, align 16
  %643 = shufflevector <2 x i64> %630, <2 x i64> %636, <2 x i32> <i32 1, i32 3>
  %644 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %643, <2 x i64>* %644, align 16
  %645 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  %646 = sext i8 %645 to i32
  call void @fdct16x16_sse4_1(<2 x i64>* nonnull %12, <2 x i64>* nonnull %15, i32 %646, i32 4)
  %647 = load <4 x i32>, <4 x i32>* %26, align 16
  %648 = load <4 x i32>, <4 x i32>* %42, align 16
  %649 = shufflevector <4 x i32> %647, <4 x i32> %648, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %650 = bitcast <4 x i32> %649 to <2 x i64>
  %651 = shufflevector <4 x i32> %647, <4 x i32> %648, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %652 = bitcast <4 x i32> %651 to <2 x i64>
  %653 = load <4 x i32>, <4 x i32>* %58, align 16
  %654 = load <4 x i32>, <4 x i32>* %74, align 16
  %655 = shufflevector <4 x i32> %653, <4 x i32> %654, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %656 = bitcast <4 x i32> %655 to <2 x i64>
  %657 = shufflevector <4 x i32> %653, <4 x i32> %654, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %658 = bitcast <4 x i32> %657 to <2 x i64>
  %659 = shufflevector <2 x i64> %650, <2 x i64> %656, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %659, <2 x i64>* %12, align 16
  %660 = shufflevector <2 x i64> %650, <2 x i64> %656, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %660, <2 x i64>* %355, align 16
  %661 = shufflevector <2 x i64> %652, <2 x i64> %658, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %661, <2 x i64>* %357, align 16
  %662 = shufflevector <2 x i64> %652, <2 x i64> %658, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %662, <2 x i64>* %359, align 16
  %663 = load <4 x i32>, <4 x i32>* %30, align 16
  %664 = load <4 x i32>, <4 x i32>* %46, align 16
  %665 = shufflevector <4 x i32> %663, <4 x i32> %664, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %666 = bitcast <4 x i32> %665 to <2 x i64>
  %667 = shufflevector <4 x i32> %663, <4 x i32> %664, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %668 = bitcast <4 x i32> %667 to <2 x i64>
  %669 = load <4 x i32>, <4 x i32>* %62, align 16
  %670 = load <4 x i32>, <4 x i32>* %78, align 16
  %671 = shufflevector <4 x i32> %669, <4 x i32> %670, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %672 = bitcast <4 x i32> %671 to <2 x i64>
  %673 = shufflevector <4 x i32> %669, <4 x i32> %670, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %674 = bitcast <4 x i32> %673 to <2 x i64>
  %675 = shufflevector <2 x i64> %666, <2 x i64> %672, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %675, <2 x i64>* %369, align 16
  %676 = shufflevector <2 x i64> %666, <2 x i64> %672, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %676, <2 x i64>* %371, align 16
  %677 = shufflevector <2 x i64> %668, <2 x i64> %674, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %677, <2 x i64>* %373, align 16
  %678 = shufflevector <2 x i64> %668, <2 x i64> %674, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %678, <2 x i64>* %375, align 16
  %679 = load <4 x i32>, <4 x i32>* %106, align 16
  %680 = load <4 x i32>, <4 x i32>* %122, align 16
  %681 = shufflevector <4 x i32> %679, <4 x i32> %680, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %682 = bitcast <4 x i32> %681 to <2 x i64>
  %683 = shufflevector <4 x i32> %679, <4 x i32> %680, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %684 = bitcast <4 x i32> %683 to <2 x i64>
  %685 = load <4 x i32>, <4 x i32>* %138, align 16
  %686 = load <4 x i32>, <4 x i32>* %154, align 16
  %687 = shufflevector <4 x i32> %685, <4 x i32> %686, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %688 = bitcast <4 x i32> %687 to <2 x i64>
  %689 = shufflevector <4 x i32> %685, <4 x i32> %686, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %690 = bitcast <4 x i32> %689 to <2 x i64>
  %691 = shufflevector <2 x i64> %682, <2 x i64> %688, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %691, <2 x i64>* %388, align 16
  %692 = shufflevector <2 x i64> %682, <2 x i64> %688, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %692, <2 x i64>* %390, align 16
  %693 = shufflevector <2 x i64> %684, <2 x i64> %690, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %693, <2 x i64>* %392, align 16
  %694 = shufflevector <2 x i64> %684, <2 x i64> %690, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %694, <2 x i64>* %394, align 16
  %695 = load <4 x i32>, <4 x i32>* %110, align 16
  %696 = load <4 x i32>, <4 x i32>* %126, align 16
  %697 = shufflevector <4 x i32> %695, <4 x i32> %696, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %698 = bitcast <4 x i32> %697 to <2 x i64>
  %699 = shufflevector <4 x i32> %695, <4 x i32> %696, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %700 = bitcast <4 x i32> %699 to <2 x i64>
  %701 = load <4 x i32>, <4 x i32>* %142, align 16
  %702 = load <4 x i32>, <4 x i32>* %158, align 16
  %703 = shufflevector <4 x i32> %701, <4 x i32> %702, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %704 = bitcast <4 x i32> %703 to <2 x i64>
  %705 = shufflevector <4 x i32> %701, <4 x i32> %702, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %706 = bitcast <4 x i32> %705 to <2 x i64>
  %707 = shufflevector <2 x i64> %698, <2 x i64> %704, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %707, <2 x i64>* %408, align 16
  %708 = shufflevector <2 x i64> %698, <2 x i64> %704, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %708, <2 x i64>* %410, align 16
  %709 = shufflevector <2 x i64> %700, <2 x i64> %706, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %709, <2 x i64>* %412, align 16
  %710 = shufflevector <2 x i64> %700, <2 x i64> %706, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %710, <2 x i64>* %414, align 16
  %711 = load <4 x i32>, <4 x i32>* %34, align 16
  %712 = load <4 x i32>, <4 x i32>* %50, align 16
  %713 = shufflevector <4 x i32> %711, <4 x i32> %712, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %714 = bitcast <4 x i32> %713 to <2 x i64>
  %715 = shufflevector <4 x i32> %711, <4 x i32> %712, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %716 = bitcast <4 x i32> %715 to <2 x i64>
  %717 = load <4 x i32>, <4 x i32>* %66, align 16
  %718 = load <4 x i32>, <4 x i32>* %82, align 16
  %719 = shufflevector <4 x i32> %717, <4 x i32> %718, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %720 = bitcast <4 x i32> %719 to <2 x i64>
  %721 = shufflevector <4 x i32> %717, <4 x i32> %718, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %722 = bitcast <4 x i32> %721 to <2 x i64>
  %723 = shufflevector <2 x i64> %714, <2 x i64> %720, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %723, <2 x i64>* %424, align 16
  %724 = shufflevector <2 x i64> %714, <2 x i64> %720, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %724, <2 x i64>* %426, align 16
  %725 = shufflevector <2 x i64> %716, <2 x i64> %722, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %725, <2 x i64>* %428, align 16
  %726 = shufflevector <2 x i64> %716, <2 x i64> %722, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %726, <2 x i64>* %430, align 16
  %727 = load <4 x i32>, <4 x i32>* %38, align 16
  %728 = load <4 x i32>, <4 x i32>* %54, align 16
  %729 = shufflevector <4 x i32> %727, <4 x i32> %728, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %730 = bitcast <4 x i32> %729 to <2 x i64>
  %731 = shufflevector <4 x i32> %727, <4 x i32> %728, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %732 = bitcast <4 x i32> %731 to <2 x i64>
  %733 = load <4 x i32>, <4 x i32>* %70, align 16
  %734 = load <4 x i32>, <4 x i32>* %86, align 16
  %735 = shufflevector <4 x i32> %733, <4 x i32> %734, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %736 = bitcast <4 x i32> %735 to <2 x i64>
  %737 = shufflevector <4 x i32> %733, <4 x i32> %734, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %738 = bitcast <4 x i32> %737 to <2 x i64>
  %739 = shufflevector <2 x i64> %730, <2 x i64> %736, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %739, <2 x i64>* %440, align 16
  %740 = shufflevector <2 x i64> %730, <2 x i64> %736, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %740, <2 x i64>* %442, align 16
  %741 = shufflevector <2 x i64> %732, <2 x i64> %738, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %741, <2 x i64>* %444, align 16
  %742 = shufflevector <2 x i64> %732, <2 x i64> %738, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %742, <2 x i64>* %446, align 16
  %743 = load <4 x i32>, <4 x i32>* %114, align 16
  %744 = load <4 x i32>, <4 x i32>* %130, align 16
  %745 = shufflevector <4 x i32> %743, <4 x i32> %744, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %746 = bitcast <4 x i32> %745 to <2 x i64>
  %747 = shufflevector <4 x i32> %743, <4 x i32> %744, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %748 = bitcast <4 x i32> %747 to <2 x i64>
  %749 = load <4 x i32>, <4 x i32>* %146, align 16
  %750 = load <4 x i32>, <4 x i32>* %162, align 16
  %751 = shufflevector <4 x i32> %749, <4 x i32> %750, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %752 = bitcast <4 x i32> %751 to <2 x i64>
  %753 = shufflevector <4 x i32> %749, <4 x i32> %750, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %754 = bitcast <4 x i32> %753 to <2 x i64>
  %755 = shufflevector <2 x i64> %746, <2 x i64> %752, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %755, <2 x i64>* %460, align 16
  %756 = shufflevector <2 x i64> %746, <2 x i64> %752, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %756, <2 x i64>* %462, align 16
  %757 = shufflevector <2 x i64> %748, <2 x i64> %754, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %757, <2 x i64>* %464, align 16
  %758 = shufflevector <2 x i64> %748, <2 x i64> %754, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %758, <2 x i64>* %466, align 16
  %759 = load <4 x i32>, <4 x i32>* %118, align 16
  %760 = load <4 x i32>, <4 x i32>* %134, align 16
  %761 = shufflevector <4 x i32> %759, <4 x i32> %760, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %762 = bitcast <4 x i32> %761 to <2 x i64>
  %763 = shufflevector <4 x i32> %759, <4 x i32> %760, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %764 = bitcast <4 x i32> %763 to <2 x i64>
  %765 = load <4 x i32>, <4 x i32>* %150, align 16
  %766 = load <4 x i32>, <4 x i32>* %166, align 16
  %767 = shufflevector <4 x i32> %765, <4 x i32> %766, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %768 = bitcast <4 x i32> %767 to <2 x i64>
  %769 = shufflevector <4 x i32> %765, <4 x i32> %766, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %770 = bitcast <4 x i32> %769 to <2 x i64>
  %771 = shufflevector <2 x i64> %762, <2 x i64> %768, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %771, <2 x i64>* %480, align 16
  %772 = shufflevector <2 x i64> %762, <2 x i64> %768, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %772, <2 x i64>* %482, align 16
  %773 = shufflevector <2 x i64> %764, <2 x i64> %770, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %773, <2 x i64>* %484, align 16
  %774 = shufflevector <2 x i64> %764, <2 x i64> %770, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %774, <2 x i64>* %486, align 16
  %775 = load <4 x i32>, <4 x i32>* %186, align 16
  %776 = load <4 x i32>, <4 x i32>* %202, align 16
  %777 = shufflevector <4 x i32> %775, <4 x i32> %776, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %778 = bitcast <4 x i32> %777 to <2 x i64>
  %779 = shufflevector <4 x i32> %775, <4 x i32> %776, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %780 = bitcast <4 x i32> %779 to <2 x i64>
  %781 = load <4 x i32>, <4 x i32>* %218, align 16
  %782 = load <4 x i32>, <4 x i32>* %234, align 16
  %783 = shufflevector <4 x i32> %781, <4 x i32> %782, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %784 = bitcast <4 x i32> %783 to <2 x i64>
  %785 = shufflevector <4 x i32> %781, <4 x i32> %782, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %786 = bitcast <4 x i32> %785 to <2 x i64>
  %787 = shufflevector <2 x i64> %778, <2 x i64> %784, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %787, <2 x i64>* %499, align 16
  %788 = shufflevector <2 x i64> %778, <2 x i64> %784, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %788, <2 x i64>* %501, align 16
  %789 = shufflevector <2 x i64> %780, <2 x i64> %786, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %789, <2 x i64>* %503, align 16
  %790 = shufflevector <2 x i64> %780, <2 x i64> %786, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %790, <2 x i64>* %505, align 16
  %791 = load <4 x i32>, <4 x i32>* %190, align 16
  %792 = load <4 x i32>, <4 x i32>* %206, align 16
  %793 = shufflevector <4 x i32> %791, <4 x i32> %792, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %794 = bitcast <4 x i32> %793 to <2 x i64>
  %795 = shufflevector <4 x i32> %791, <4 x i32> %792, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %796 = bitcast <4 x i32> %795 to <2 x i64>
  %797 = load <4 x i32>, <4 x i32>* %222, align 16
  %798 = load <4 x i32>, <4 x i32>* %238, align 16
  %799 = shufflevector <4 x i32> %797, <4 x i32> %798, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %800 = bitcast <4 x i32> %799 to <2 x i64>
  %801 = shufflevector <4 x i32> %797, <4 x i32> %798, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %802 = bitcast <4 x i32> %801 to <2 x i64>
  %803 = shufflevector <2 x i64> %794, <2 x i64> %800, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %803, <2 x i64>* %519, align 16
  %804 = shufflevector <2 x i64> %794, <2 x i64> %800, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %804, <2 x i64>* %521, align 16
  %805 = shufflevector <2 x i64> %796, <2 x i64> %802, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %805, <2 x i64>* %523, align 16
  %806 = shufflevector <2 x i64> %796, <2 x i64> %802, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %806, <2 x i64>* %525, align 16
  %807 = load <4 x i32>, <4 x i32>* %266, align 16
  %808 = load <4 x i32>, <4 x i32>* %282, align 16
  %809 = shufflevector <4 x i32> %807, <4 x i32> %808, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %810 = bitcast <4 x i32> %809 to <2 x i64>
  %811 = shufflevector <4 x i32> %807, <4 x i32> %808, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %812 = bitcast <4 x i32> %811 to <2 x i64>
  %813 = load <4 x i32>, <4 x i32>* %298, align 16
  %814 = load <4 x i32>, <4 x i32>* %314, align 16
  %815 = shufflevector <4 x i32> %813, <4 x i32> %814, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %816 = bitcast <4 x i32> %815 to <2 x i64>
  %817 = shufflevector <4 x i32> %813, <4 x i32> %814, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %818 = bitcast <4 x i32> %817 to <2 x i64>
  %819 = shufflevector <2 x i64> %810, <2 x i64> %816, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %819, <2 x i64>* %538, align 16
  %820 = shufflevector <2 x i64> %810, <2 x i64> %816, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %820, <2 x i64>* %540, align 16
  %821 = shufflevector <2 x i64> %812, <2 x i64> %818, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %821, <2 x i64>* %542, align 16
  %822 = shufflevector <2 x i64> %812, <2 x i64> %818, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %822, <2 x i64>* %544, align 16
  %823 = load <4 x i32>, <4 x i32>* %270, align 16
  %824 = load <4 x i32>, <4 x i32>* %286, align 16
  %825 = shufflevector <4 x i32> %823, <4 x i32> %824, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %826 = bitcast <4 x i32> %825 to <2 x i64>
  %827 = shufflevector <4 x i32> %823, <4 x i32> %824, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %828 = bitcast <4 x i32> %827 to <2 x i64>
  %829 = load <4 x i32>, <4 x i32>* %302, align 16
  %830 = load <4 x i32>, <4 x i32>* %318, align 16
  %831 = shufflevector <4 x i32> %829, <4 x i32> %830, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %832 = bitcast <4 x i32> %831 to <2 x i64>
  %833 = shufflevector <4 x i32> %829, <4 x i32> %830, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %834 = bitcast <4 x i32> %833 to <2 x i64>
  %835 = shufflevector <2 x i64> %826, <2 x i64> %832, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %835, <2 x i64>* %558, align 16
  %836 = shufflevector <2 x i64> %826, <2 x i64> %832, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %836, <2 x i64>* %560, align 16
  %837 = shufflevector <2 x i64> %828, <2 x i64> %834, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %837, <2 x i64>* %562, align 16
  %838 = shufflevector <2 x i64> %828, <2 x i64> %834, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %838, <2 x i64>* %564, align 16
  %839 = load <4 x i32>, <4 x i32>* %194, align 16
  %840 = load <4 x i32>, <4 x i32>* %210, align 16
  %841 = shufflevector <4 x i32> %839, <4 x i32> %840, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %842 = bitcast <4 x i32> %841 to <2 x i64>
  %843 = shufflevector <4 x i32> %839, <4 x i32> %840, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %844 = bitcast <4 x i32> %843 to <2 x i64>
  %845 = load <4 x i32>, <4 x i32>* %226, align 16
  %846 = load <4 x i32>, <4 x i32>* %242, align 16
  %847 = shufflevector <4 x i32> %845, <4 x i32> %846, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %848 = bitcast <4 x i32> %847 to <2 x i64>
  %849 = shufflevector <4 x i32> %845, <4 x i32> %846, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %850 = bitcast <4 x i32> %849 to <2 x i64>
  %851 = shufflevector <2 x i64> %842, <2 x i64> %848, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %851, <2 x i64>* %578, align 16
  %852 = shufflevector <2 x i64> %842, <2 x i64> %848, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %852, <2 x i64>* %580, align 16
  %853 = shufflevector <2 x i64> %844, <2 x i64> %850, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %853, <2 x i64>* %582, align 16
  %854 = shufflevector <2 x i64> %844, <2 x i64> %850, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %854, <2 x i64>* %584, align 16
  %855 = load <4 x i32>, <4 x i32>* %198, align 16
  %856 = load <4 x i32>, <4 x i32>* %214, align 16
  %857 = shufflevector <4 x i32> %855, <4 x i32> %856, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %858 = bitcast <4 x i32> %857 to <2 x i64>
  %859 = shufflevector <4 x i32> %855, <4 x i32> %856, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %860 = bitcast <4 x i32> %859 to <2 x i64>
  %861 = load <4 x i32>, <4 x i32>* %230, align 16
  %862 = load <4 x i32>, <4 x i32>* %246, align 16
  %863 = shufflevector <4 x i32> %861, <4 x i32> %862, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %864 = bitcast <4 x i32> %863 to <2 x i64>
  %865 = shufflevector <4 x i32> %861, <4 x i32> %862, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %866 = bitcast <4 x i32> %865 to <2 x i64>
  %867 = shufflevector <2 x i64> %858, <2 x i64> %864, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %867, <2 x i64>* %598, align 16
  %868 = shufflevector <2 x i64> %858, <2 x i64> %864, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %868, <2 x i64>* %600, align 16
  %869 = shufflevector <2 x i64> %860, <2 x i64> %866, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %869, <2 x i64>* %602, align 16
  %870 = shufflevector <2 x i64> %860, <2 x i64> %866, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %870, <2 x i64>* %604, align 16
  %871 = load <4 x i32>, <4 x i32>* %274, align 16
  %872 = load <4 x i32>, <4 x i32>* %290, align 16
  %873 = shufflevector <4 x i32> %871, <4 x i32> %872, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %874 = bitcast <4 x i32> %873 to <2 x i64>
  %875 = shufflevector <4 x i32> %871, <4 x i32> %872, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %876 = bitcast <4 x i32> %875 to <2 x i64>
  %877 = load <4 x i32>, <4 x i32>* %306, align 16
  %878 = load <4 x i32>, <4 x i32>* %322, align 16
  %879 = shufflevector <4 x i32> %877, <4 x i32> %878, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %880 = bitcast <4 x i32> %879 to <2 x i64>
  %881 = shufflevector <4 x i32> %877, <4 x i32> %878, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %882 = bitcast <4 x i32> %881 to <2 x i64>
  %883 = shufflevector <2 x i64> %874, <2 x i64> %880, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %883, <2 x i64>* %618, align 16
  %884 = shufflevector <2 x i64> %874, <2 x i64> %880, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %884, <2 x i64>* %620, align 16
  %885 = shufflevector <2 x i64> %876, <2 x i64> %882, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %885, <2 x i64>* %622, align 16
  %886 = shufflevector <2 x i64> %876, <2 x i64> %882, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %886, <2 x i64>* %624, align 16
  %887 = load <4 x i32>, <4 x i32>* %278, align 16
  %888 = load <4 x i32>, <4 x i32>* %294, align 16
  %889 = shufflevector <4 x i32> %887, <4 x i32> %888, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %890 = bitcast <4 x i32> %889 to <2 x i64>
  %891 = shufflevector <4 x i32> %887, <4 x i32> %888, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %892 = bitcast <4 x i32> %891 to <2 x i64>
  %893 = load <4 x i32>, <4 x i32>* %310, align 16
  %894 = load <4 x i32>, <4 x i32>* %326, align 16
  %895 = shufflevector <4 x i32> %893, <4 x i32> %894, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %896 = bitcast <4 x i32> %895 to <2 x i64>
  %897 = shufflevector <4 x i32> %893, <4 x i32> %894, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %898 = bitcast <4 x i32> %897 to <2 x i64>
  %899 = shufflevector <2 x i64> %890, <2 x i64> %896, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %899, <2 x i64>* %638, align 16
  %900 = shufflevector <2 x i64> %890, <2 x i64> %896, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %900, <2 x i64>* %640, align 16
  %901 = shufflevector <2 x i64> %892, <2 x i64> %898, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %901, <2 x i64>* %642, align 16
  %902 = shufflevector <2 x i64> %892, <2 x i64> %898, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %902, <2 x i64>* %644, align 16
  %903 = bitcast i32* %1 to <2 x i64>*
  store <2 x i64> %659, <2 x i64>* %903, align 16
  %904 = getelementptr inbounds i32, i32* %1, i64 4
  %905 = bitcast i32* %904 to <2 x i64>*
  store <2 x i64> %691, <2 x i64>* %905, align 16
  %906 = getelementptr inbounds i32, i32* %1, i64 8
  %907 = bitcast i32* %906 to <2 x i64>*
  store <2 x i64> %787, <2 x i64>* %907, align 16
  %908 = getelementptr inbounds i32, i32* %1, i64 12
  %909 = bitcast i32* %908 to <2 x i64>*
  store <2 x i64> %819, <2 x i64>* %909, align 16
  %910 = getelementptr inbounds i32, i32* %1, i64 16
  %911 = bitcast i32* %910 to <2 x i64>*
  store <2 x i64> %660, <2 x i64>* %911, align 16
  %912 = getelementptr inbounds i32, i32* %1, i64 20
  %913 = bitcast i32* %912 to <2 x i64>*
  store <2 x i64> %692, <2 x i64>* %913, align 16
  %914 = getelementptr inbounds i32, i32* %1, i64 24
  %915 = bitcast i32* %914 to <2 x i64>*
  store <2 x i64> %788, <2 x i64>* %915, align 16
  %916 = getelementptr inbounds i32, i32* %1, i64 28
  %917 = bitcast i32* %916 to <2 x i64>*
  store <2 x i64> %820, <2 x i64>* %917, align 16
  %918 = getelementptr inbounds i32, i32* %1, i64 32
  %919 = bitcast i32* %918 to <2 x i64>*
  store <2 x i64> %661, <2 x i64>* %919, align 16
  %920 = getelementptr inbounds i32, i32* %1, i64 36
  %921 = bitcast i32* %920 to <2 x i64>*
  store <2 x i64> %693, <2 x i64>* %921, align 16
  %922 = getelementptr inbounds i32, i32* %1, i64 40
  %923 = bitcast i32* %922 to <2 x i64>*
  store <2 x i64> %789, <2 x i64>* %923, align 16
  %924 = getelementptr inbounds i32, i32* %1, i64 44
  %925 = bitcast i32* %924 to <2 x i64>*
  store <2 x i64> %821, <2 x i64>* %925, align 16
  %926 = getelementptr inbounds i32, i32* %1, i64 48
  %927 = bitcast i32* %926 to <2 x i64>*
  store <2 x i64> %662, <2 x i64>* %927, align 16
  %928 = getelementptr inbounds i32, i32* %1, i64 52
  %929 = bitcast i32* %928 to <2 x i64>*
  store <2 x i64> %694, <2 x i64>* %929, align 16
  %930 = getelementptr inbounds i32, i32* %1, i64 56
  %931 = bitcast i32* %930 to <2 x i64>*
  store <2 x i64> %790, <2 x i64>* %931, align 16
  %932 = getelementptr inbounds i32, i32* %1, i64 60
  %933 = bitcast i32* %932 to <2 x i64>*
  store <2 x i64> %822, <2 x i64>* %933, align 16
  %934 = getelementptr inbounds i32, i32* %1, i64 64
  %935 = bitcast i32* %934 to <2 x i64>*
  store <2 x i64> %675, <2 x i64>* %935, align 16
  %936 = getelementptr inbounds i32, i32* %1, i64 68
  %937 = bitcast i32* %936 to <2 x i64>*
  %938 = load <2 x i64>, <2 x i64>* %408, align 16
  store <2 x i64> %938, <2 x i64>* %937, align 16
  %939 = getelementptr inbounds i32, i32* %1, i64 72
  %940 = bitcast i32* %939 to <2 x i64>*
  %941 = load <2 x i64>, <2 x i64>* %519, align 16
  store <2 x i64> %941, <2 x i64>* %940, align 16
  %942 = getelementptr inbounds i32, i32* %1, i64 76
  %943 = bitcast i32* %942 to <2 x i64>*
  %944 = load <2 x i64>, <2 x i64>* %558, align 16
  store <2 x i64> %944, <2 x i64>* %943, align 16
  %945 = getelementptr inbounds i32, i32* %1, i64 80
  %946 = bitcast i32* %945 to <2 x i64>*
  %947 = load <2 x i64>, <2 x i64>* %371, align 16
  store <2 x i64> %947, <2 x i64>* %946, align 16
  %948 = getelementptr inbounds i32, i32* %1, i64 84
  %949 = bitcast i32* %948 to <2 x i64>*
  %950 = load <2 x i64>, <2 x i64>* %410, align 16
  store <2 x i64> %950, <2 x i64>* %949, align 16
  %951 = getelementptr inbounds i32, i32* %1, i64 88
  %952 = bitcast i32* %951 to <2 x i64>*
  %953 = load <2 x i64>, <2 x i64>* %521, align 16
  store <2 x i64> %953, <2 x i64>* %952, align 16
  %954 = getelementptr inbounds i32, i32* %1, i64 92
  %955 = bitcast i32* %954 to <2 x i64>*
  %956 = load <2 x i64>, <2 x i64>* %560, align 16
  store <2 x i64> %956, <2 x i64>* %955, align 16
  %957 = getelementptr inbounds i32, i32* %1, i64 96
  %958 = bitcast i32* %957 to <2 x i64>*
  %959 = load <2 x i64>, <2 x i64>* %373, align 16
  store <2 x i64> %959, <2 x i64>* %958, align 16
  %960 = getelementptr inbounds i32, i32* %1, i64 100
  %961 = bitcast i32* %960 to <2 x i64>*
  %962 = load <2 x i64>, <2 x i64>* %412, align 16
  store <2 x i64> %962, <2 x i64>* %961, align 16
  %963 = getelementptr inbounds i32, i32* %1, i64 104
  %964 = bitcast i32* %963 to <2 x i64>*
  %965 = load <2 x i64>, <2 x i64>* %523, align 16
  store <2 x i64> %965, <2 x i64>* %964, align 16
  %966 = getelementptr inbounds i32, i32* %1, i64 108
  %967 = bitcast i32* %966 to <2 x i64>*
  %968 = load <2 x i64>, <2 x i64>* %562, align 16
  store <2 x i64> %968, <2 x i64>* %967, align 16
  %969 = getelementptr inbounds i32, i32* %1, i64 112
  %970 = bitcast i32* %969 to <2 x i64>*
  %971 = load <2 x i64>, <2 x i64>* %375, align 16
  store <2 x i64> %971, <2 x i64>* %970, align 16
  %972 = getelementptr inbounds i32, i32* %1, i64 116
  %973 = bitcast i32* %972 to <2 x i64>*
  %974 = load <2 x i64>, <2 x i64>* %414, align 16
  store <2 x i64> %974, <2 x i64>* %973, align 16
  %975 = getelementptr inbounds i32, i32* %1, i64 120
  %976 = bitcast i32* %975 to <2 x i64>*
  %977 = load <2 x i64>, <2 x i64>* %525, align 16
  store <2 x i64> %977, <2 x i64>* %976, align 16
  %978 = getelementptr inbounds i32, i32* %1, i64 124
  %979 = bitcast i32* %978 to <2 x i64>*
  %980 = load <2 x i64>, <2 x i64>* %564, align 16
  store <2 x i64> %980, <2 x i64>* %979, align 16
  %981 = getelementptr inbounds i32, i32* %1, i64 128
  %982 = bitcast i32* %981 to <2 x i64>*
  store <2 x i64> %723, <2 x i64>* %982, align 16
  %983 = getelementptr inbounds i32, i32* %1, i64 132
  %984 = bitcast i32* %983 to <2 x i64>*
  store <2 x i64> %755, <2 x i64>* %984, align 16
  %985 = getelementptr inbounds i32, i32* %1, i64 136
  %986 = bitcast i32* %985 to <2 x i64>*
  store <2 x i64> %851, <2 x i64>* %986, align 16
  %987 = getelementptr inbounds i32, i32* %1, i64 140
  %988 = bitcast i32* %987 to <2 x i64>*
  store <2 x i64> %883, <2 x i64>* %988, align 16
  %989 = getelementptr inbounds i32, i32* %1, i64 144
  %990 = bitcast i32* %989 to <2 x i64>*
  store <2 x i64> %724, <2 x i64>* %990, align 16
  %991 = getelementptr inbounds i32, i32* %1, i64 148
  %992 = bitcast i32* %991 to <2 x i64>*
  store <2 x i64> %756, <2 x i64>* %992, align 16
  %993 = getelementptr inbounds i32, i32* %1, i64 152
  %994 = bitcast i32* %993 to <2 x i64>*
  store <2 x i64> %852, <2 x i64>* %994, align 16
  %995 = getelementptr inbounds i32, i32* %1, i64 156
  %996 = bitcast i32* %995 to <2 x i64>*
  store <2 x i64> %884, <2 x i64>* %996, align 16
  %997 = getelementptr inbounds i32, i32* %1, i64 160
  %998 = bitcast i32* %997 to <2 x i64>*
  store <2 x i64> %725, <2 x i64>* %998, align 16
  %999 = getelementptr inbounds i32, i32* %1, i64 164
  %1000 = bitcast i32* %999 to <2 x i64>*
  store <2 x i64> %757, <2 x i64>* %1000, align 16
  %1001 = getelementptr inbounds i32, i32* %1, i64 168
  %1002 = bitcast i32* %1001 to <2 x i64>*
  store <2 x i64> %853, <2 x i64>* %1002, align 16
  %1003 = getelementptr inbounds i32, i32* %1, i64 172
  %1004 = bitcast i32* %1003 to <2 x i64>*
  store <2 x i64> %885, <2 x i64>* %1004, align 16
  %1005 = getelementptr inbounds i32, i32* %1, i64 176
  %1006 = bitcast i32* %1005 to <2 x i64>*
  store <2 x i64> %726, <2 x i64>* %1006, align 16
  %1007 = getelementptr inbounds i32, i32* %1, i64 180
  %1008 = bitcast i32* %1007 to <2 x i64>*
  store <2 x i64> %758, <2 x i64>* %1008, align 16
  %1009 = getelementptr inbounds i32, i32* %1, i64 184
  %1010 = bitcast i32* %1009 to <2 x i64>*
  store <2 x i64> %854, <2 x i64>* %1010, align 16
  %1011 = getelementptr inbounds i32, i32* %1, i64 188
  %1012 = bitcast i32* %1011 to <2 x i64>*
  store <2 x i64> %886, <2 x i64>* %1012, align 16
  %1013 = getelementptr inbounds i32, i32* %1, i64 192
  %1014 = bitcast i32* %1013 to <2 x i64>*
  store <2 x i64> %739, <2 x i64>* %1014, align 16
  %1015 = getelementptr inbounds i32, i32* %1, i64 196
  %1016 = bitcast i32* %1015 to <2 x i64>*
  store <2 x i64> %771, <2 x i64>* %1016, align 16
  %1017 = getelementptr inbounds i32, i32* %1, i64 200
  %1018 = bitcast i32* %1017 to <2 x i64>*
  store <2 x i64> %867, <2 x i64>* %1018, align 16
  %1019 = getelementptr inbounds i32, i32* %1, i64 204
  %1020 = bitcast i32* %1019 to <2 x i64>*
  store <2 x i64> %899, <2 x i64>* %1020, align 16
  %1021 = getelementptr inbounds i32, i32* %1, i64 208
  %1022 = bitcast i32* %1021 to <2 x i64>*
  store <2 x i64> %740, <2 x i64>* %1022, align 16
  %1023 = getelementptr inbounds i32, i32* %1, i64 212
  %1024 = bitcast i32* %1023 to <2 x i64>*
  store <2 x i64> %772, <2 x i64>* %1024, align 16
  %1025 = getelementptr inbounds i32, i32* %1, i64 216
  %1026 = bitcast i32* %1025 to <2 x i64>*
  store <2 x i64> %868, <2 x i64>* %1026, align 16
  %1027 = getelementptr inbounds i32, i32* %1, i64 220
  %1028 = bitcast i32* %1027 to <2 x i64>*
  store <2 x i64> %900, <2 x i64>* %1028, align 16
  %1029 = getelementptr inbounds i32, i32* %1, i64 224
  %1030 = bitcast i32* %1029 to <2 x i64>*
  store <2 x i64> %741, <2 x i64>* %1030, align 16
  %1031 = getelementptr inbounds i32, i32* %1, i64 228
  %1032 = bitcast i32* %1031 to <2 x i64>*
  store <2 x i64> %773, <2 x i64>* %1032, align 16
  %1033 = getelementptr inbounds i32, i32* %1, i64 232
  %1034 = bitcast i32* %1033 to <2 x i64>*
  store <2 x i64> %869, <2 x i64>* %1034, align 16
  %1035 = getelementptr inbounds i32, i32* %1, i64 236
  %1036 = bitcast i32* %1035 to <2 x i64>*
  store <2 x i64> %901, <2 x i64>* %1036, align 16
  %1037 = getelementptr inbounds i32, i32* %1, i64 240
  %1038 = bitcast i32* %1037 to <2 x i64>*
  %1039 = load <2 x i64>, <2 x i64>* %446, align 16
  store <2 x i64> %1039, <2 x i64>* %1038, align 16
  %1040 = getelementptr inbounds i32, i32* %1, i64 244
  %1041 = bitcast i32* %1040 to <2 x i64>*
  store <2 x i64> %774, <2 x i64>* %1041, align 16
  %1042 = getelementptr inbounds i32, i32* %1, i64 248
  %1043 = bitcast i32* %1042 to <2 x i64>*
  store <2 x i64> %870, <2 x i64>* %1043, align 16
  %1044 = getelementptr inbounds i32, i32* %1, i64 252
  %1045 = bitcast i32* %1044 to <2 x i64>*
  store <2 x i64> %902, <2 x i64>* %1045, align 16
  br label %17357

1046:                                             ; preds = %5
  %1047 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %1048 = load i8, i8* %10, align 1
  %1049 = sext i8 %1048 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %1047, i32 %2, i32 0, i32 0, i32 %1049)
  %1050 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %1051 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  %1052 = sext i8 %1051 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %1047, <2 x i64>* nonnull %1050, i32 %1052, i32 4)
  %1053 = getelementptr inbounds i8, i8* %10, i64 1
  %1054 = load i8, i8* %1053, align 1
  %1055 = sext i8 %1054 to i32
  %1056 = sub nsw i32 0, %1055
  %1057 = xor i32 %1055, -1
  %1058 = shl i32 1, %1057
  %1059 = insertelement <4 x i32> undef, i32 %1058, i32 0
  %1060 = shufflevector <4 x i32> %1059, <4 x i32> undef, <4 x i32> zeroinitializer
  %1061 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %1062 = load <4 x i32>, <4 x i32>* %1061, align 16
  %1063 = add <4 x i32> %1060, %1062
  %1064 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %1065 = bitcast <2 x i64>* %1064 to <4 x i32>*
  %1066 = load <4 x i32>, <4 x i32>* %1065, align 16
  %1067 = add <4 x i32> %1060, %1066
  %1068 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %1069 = bitcast <2 x i64>* %1068 to <4 x i32>*
  %1070 = load <4 x i32>, <4 x i32>* %1069, align 16
  %1071 = add <4 x i32> %1060, %1070
  %1072 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %1073 = bitcast <2 x i64>* %1072 to <4 x i32>*
  %1074 = load <4 x i32>, <4 x i32>* %1073, align 16
  %1075 = add <4 x i32> %1074, %1060
  %1076 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %1077 = bitcast <2 x i64>* %1076 to <4 x i32>*
  %1078 = load <4 x i32>, <4 x i32>* %1077, align 16
  %1079 = add <4 x i32> %1078, %1060
  %1080 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %1081 = bitcast <2 x i64>* %1080 to <4 x i32>*
  %1082 = load <4 x i32>, <4 x i32>* %1081, align 16
  %1083 = add <4 x i32> %1082, %1060
  %1084 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %1085 = bitcast <2 x i64>* %1084 to <4 x i32>*
  %1086 = load <4 x i32>, <4 x i32>* %1085, align 16
  %1087 = add <4 x i32> %1086, %1060
  %1088 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %1089 = bitcast <2 x i64>* %1088 to <4 x i32>*
  %1090 = load <4 x i32>, <4 x i32>* %1089, align 16
  %1091 = add <4 x i32> %1090, %1060
  %1092 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %1093 = bitcast <2 x i64>* %1092 to <4 x i32>*
  %1094 = load <4 x i32>, <4 x i32>* %1093, align 16
  %1095 = add <4 x i32> %1094, %1060
  %1096 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %1097 = bitcast <2 x i64>* %1096 to <4 x i32>*
  %1098 = load <4 x i32>, <4 x i32>* %1097, align 16
  %1099 = add <4 x i32> %1098, %1060
  %1100 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %1101 = bitcast <2 x i64>* %1100 to <4 x i32>*
  %1102 = load <4 x i32>, <4 x i32>* %1101, align 16
  %1103 = add <4 x i32> %1102, %1060
  %1104 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %1105 = bitcast <2 x i64>* %1104 to <4 x i32>*
  %1106 = load <4 x i32>, <4 x i32>* %1105, align 16
  %1107 = add <4 x i32> %1106, %1060
  %1108 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %1109 = bitcast <2 x i64>* %1108 to <4 x i32>*
  %1110 = load <4 x i32>, <4 x i32>* %1109, align 16
  %1111 = add <4 x i32> %1110, %1060
  %1112 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %1113 = bitcast <2 x i64>* %1112 to <4 x i32>*
  %1114 = load <4 x i32>, <4 x i32>* %1113, align 16
  %1115 = add <4 x i32> %1114, %1060
  %1116 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %1117 = bitcast <2 x i64>* %1116 to <4 x i32>*
  %1118 = load <4 x i32>, <4 x i32>* %1117, align 16
  %1119 = add <4 x i32> %1118, %1060
  %1120 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %1121 = bitcast <2 x i64>* %1120 to <4 x i32>*
  %1122 = load <4 x i32>, <4 x i32>* %1121, align 16
  %1123 = add <4 x i32> %1122, %1060
  %1124 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1063, i32 %1056) #8
  store <4 x i32> %1124, <4 x i32>* %1061, align 16
  %1125 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1067, i32 %1056) #8
  store <4 x i32> %1125, <4 x i32>* %1065, align 16
  %1126 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1071, i32 %1056) #8
  store <4 x i32> %1126, <4 x i32>* %1069, align 16
  %1127 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1075, i32 %1056) #8
  store <4 x i32> %1127, <4 x i32>* %1073, align 16
  %1128 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1079, i32 %1056) #8
  store <4 x i32> %1128, <4 x i32>* %1077, align 16
  %1129 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1083, i32 %1056) #8
  store <4 x i32> %1129, <4 x i32>* %1081, align 16
  %1130 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1087, i32 %1056) #8
  store <4 x i32> %1130, <4 x i32>* %1085, align 16
  %1131 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1091, i32 %1056) #8
  store <4 x i32> %1131, <4 x i32>* %1089, align 16
  %1132 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1095, i32 %1056) #8
  store <4 x i32> %1132, <4 x i32>* %1093, align 16
  %1133 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1099, i32 %1056) #8
  store <4 x i32> %1133, <4 x i32>* %1097, align 16
  %1134 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1103, i32 %1056) #8
  store <4 x i32> %1134, <4 x i32>* %1101, align 16
  %1135 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1107, i32 %1056) #8
  store <4 x i32> %1135, <4 x i32>* %1105, align 16
  %1136 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1111, i32 %1056) #8
  store <4 x i32> %1136, <4 x i32>* %1109, align 16
  %1137 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1115, i32 %1056) #8
  store <4 x i32> %1137, <4 x i32>* %1113, align 16
  %1138 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1119, i32 %1056) #8
  store <4 x i32> %1138, <4 x i32>* %1117, align 16
  %1139 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1123, i32 %1056) #8
  store <4 x i32> %1139, <4 x i32>* %1121, align 16
  %1140 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %1141 = bitcast <2 x i64>* %1140 to <4 x i32>*
  %1142 = load <4 x i32>, <4 x i32>* %1141, align 16
  %1143 = add <4 x i32> %1142, %1060
  %1144 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %1145 = bitcast <2 x i64>* %1144 to <4 x i32>*
  %1146 = load <4 x i32>, <4 x i32>* %1145, align 16
  %1147 = add <4 x i32> %1146, %1060
  %1148 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %1149 = bitcast <2 x i64>* %1148 to <4 x i32>*
  %1150 = load <4 x i32>, <4 x i32>* %1149, align 16
  %1151 = add <4 x i32> %1150, %1060
  %1152 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %1153 = bitcast <2 x i64>* %1152 to <4 x i32>*
  %1154 = load <4 x i32>, <4 x i32>* %1153, align 16
  %1155 = add <4 x i32> %1154, %1060
  %1156 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %1157 = bitcast <2 x i64>* %1156 to <4 x i32>*
  %1158 = load <4 x i32>, <4 x i32>* %1157, align 16
  %1159 = add <4 x i32> %1158, %1060
  %1160 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %1161 = bitcast <2 x i64>* %1160 to <4 x i32>*
  %1162 = load <4 x i32>, <4 x i32>* %1161, align 16
  %1163 = add <4 x i32> %1162, %1060
  %1164 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %1165 = bitcast <2 x i64>* %1164 to <4 x i32>*
  %1166 = load <4 x i32>, <4 x i32>* %1165, align 16
  %1167 = add <4 x i32> %1166, %1060
  %1168 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %1169 = bitcast <2 x i64>* %1168 to <4 x i32>*
  %1170 = load <4 x i32>, <4 x i32>* %1169, align 16
  %1171 = add <4 x i32> %1170, %1060
  %1172 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %1173 = bitcast <2 x i64>* %1172 to <4 x i32>*
  %1174 = load <4 x i32>, <4 x i32>* %1173, align 16
  %1175 = add <4 x i32> %1174, %1060
  %1176 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %1177 = bitcast <2 x i64>* %1176 to <4 x i32>*
  %1178 = load <4 x i32>, <4 x i32>* %1177, align 16
  %1179 = add <4 x i32> %1178, %1060
  %1180 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %1181 = bitcast <2 x i64>* %1180 to <4 x i32>*
  %1182 = load <4 x i32>, <4 x i32>* %1181, align 16
  %1183 = add <4 x i32> %1182, %1060
  %1184 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %1185 = bitcast <2 x i64>* %1184 to <4 x i32>*
  %1186 = load <4 x i32>, <4 x i32>* %1185, align 16
  %1187 = add <4 x i32> %1186, %1060
  %1188 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %1189 = bitcast <2 x i64>* %1188 to <4 x i32>*
  %1190 = load <4 x i32>, <4 x i32>* %1189, align 16
  %1191 = add <4 x i32> %1190, %1060
  %1192 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %1193 = bitcast <2 x i64>* %1192 to <4 x i32>*
  %1194 = load <4 x i32>, <4 x i32>* %1193, align 16
  %1195 = add <4 x i32> %1194, %1060
  %1196 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %1197 = bitcast <2 x i64>* %1196 to <4 x i32>*
  %1198 = load <4 x i32>, <4 x i32>* %1197, align 16
  %1199 = add <4 x i32> %1198, %1060
  %1200 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %1201 = bitcast <2 x i64>* %1200 to <4 x i32>*
  %1202 = load <4 x i32>, <4 x i32>* %1201, align 16
  %1203 = add <4 x i32> %1202, %1060
  %1204 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1143, i32 %1056) #8
  store <4 x i32> %1204, <4 x i32>* %1141, align 16
  %1205 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1147, i32 %1056) #8
  store <4 x i32> %1205, <4 x i32>* %1145, align 16
  %1206 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1151, i32 %1056) #8
  store <4 x i32> %1206, <4 x i32>* %1149, align 16
  %1207 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1155, i32 %1056) #8
  store <4 x i32> %1207, <4 x i32>* %1153, align 16
  %1208 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1159, i32 %1056) #8
  store <4 x i32> %1208, <4 x i32>* %1157, align 16
  %1209 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1163, i32 %1056) #8
  store <4 x i32> %1209, <4 x i32>* %1161, align 16
  %1210 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1167, i32 %1056) #8
  store <4 x i32> %1210, <4 x i32>* %1165, align 16
  %1211 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1171, i32 %1056) #8
  store <4 x i32> %1211, <4 x i32>* %1169, align 16
  %1212 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1175, i32 %1056) #8
  store <4 x i32> %1212, <4 x i32>* %1173, align 16
  %1213 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1179, i32 %1056) #8
  store <4 x i32> %1213, <4 x i32>* %1177, align 16
  %1214 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1183, i32 %1056) #8
  store <4 x i32> %1214, <4 x i32>* %1181, align 16
  %1215 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1187, i32 %1056) #8
  store <4 x i32> %1215, <4 x i32>* %1185, align 16
  %1216 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1191, i32 %1056) #8
  store <4 x i32> %1216, <4 x i32>* %1189, align 16
  %1217 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1195, i32 %1056) #8
  store <4 x i32> %1217, <4 x i32>* %1193, align 16
  %1218 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1199, i32 %1056) #8
  store <4 x i32> %1218, <4 x i32>* %1197, align 16
  %1219 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1203, i32 %1056) #8
  store <4 x i32> %1219, <4 x i32>* %1201, align 16
  %1220 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %1221 = bitcast <2 x i64>* %1220 to <4 x i32>*
  %1222 = load <4 x i32>, <4 x i32>* %1221, align 16
  %1223 = add <4 x i32> %1222, %1060
  %1224 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %1225 = bitcast <2 x i64>* %1224 to <4 x i32>*
  %1226 = load <4 x i32>, <4 x i32>* %1225, align 16
  %1227 = add <4 x i32> %1226, %1060
  %1228 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %1229 = bitcast <2 x i64>* %1228 to <4 x i32>*
  %1230 = load <4 x i32>, <4 x i32>* %1229, align 16
  %1231 = add <4 x i32> %1230, %1060
  %1232 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %1233 = bitcast <2 x i64>* %1232 to <4 x i32>*
  %1234 = load <4 x i32>, <4 x i32>* %1233, align 16
  %1235 = add <4 x i32> %1234, %1060
  %1236 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %1237 = bitcast <2 x i64>* %1236 to <4 x i32>*
  %1238 = load <4 x i32>, <4 x i32>* %1237, align 16
  %1239 = add <4 x i32> %1238, %1060
  %1240 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %1241 = bitcast <2 x i64>* %1240 to <4 x i32>*
  %1242 = load <4 x i32>, <4 x i32>* %1241, align 16
  %1243 = add <4 x i32> %1242, %1060
  %1244 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %1245 = bitcast <2 x i64>* %1244 to <4 x i32>*
  %1246 = load <4 x i32>, <4 x i32>* %1245, align 16
  %1247 = add <4 x i32> %1246, %1060
  %1248 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %1249 = bitcast <2 x i64>* %1248 to <4 x i32>*
  %1250 = load <4 x i32>, <4 x i32>* %1249, align 16
  %1251 = add <4 x i32> %1250, %1060
  %1252 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %1253 = bitcast <2 x i64>* %1252 to <4 x i32>*
  %1254 = load <4 x i32>, <4 x i32>* %1253, align 16
  %1255 = add <4 x i32> %1254, %1060
  %1256 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %1257 = bitcast <2 x i64>* %1256 to <4 x i32>*
  %1258 = load <4 x i32>, <4 x i32>* %1257, align 16
  %1259 = add <4 x i32> %1258, %1060
  %1260 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %1261 = bitcast <2 x i64>* %1260 to <4 x i32>*
  %1262 = load <4 x i32>, <4 x i32>* %1261, align 16
  %1263 = add <4 x i32> %1262, %1060
  %1264 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %1265 = bitcast <2 x i64>* %1264 to <4 x i32>*
  %1266 = load <4 x i32>, <4 x i32>* %1265, align 16
  %1267 = add <4 x i32> %1266, %1060
  %1268 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %1269 = bitcast <2 x i64>* %1268 to <4 x i32>*
  %1270 = load <4 x i32>, <4 x i32>* %1269, align 16
  %1271 = add <4 x i32> %1270, %1060
  %1272 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %1273 = bitcast <2 x i64>* %1272 to <4 x i32>*
  %1274 = load <4 x i32>, <4 x i32>* %1273, align 16
  %1275 = add <4 x i32> %1274, %1060
  %1276 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %1277 = bitcast <2 x i64>* %1276 to <4 x i32>*
  %1278 = load <4 x i32>, <4 x i32>* %1277, align 16
  %1279 = add <4 x i32> %1278, %1060
  %1280 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %1281 = bitcast <2 x i64>* %1280 to <4 x i32>*
  %1282 = load <4 x i32>, <4 x i32>* %1281, align 16
  %1283 = add <4 x i32> %1282, %1060
  %1284 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1223, i32 %1056) #8
  store <4 x i32> %1284, <4 x i32>* %1221, align 16
  %1285 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1227, i32 %1056) #8
  store <4 x i32> %1285, <4 x i32>* %1225, align 16
  %1286 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1231, i32 %1056) #8
  store <4 x i32> %1286, <4 x i32>* %1229, align 16
  %1287 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1235, i32 %1056) #8
  store <4 x i32> %1287, <4 x i32>* %1233, align 16
  %1288 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1239, i32 %1056) #8
  store <4 x i32> %1288, <4 x i32>* %1237, align 16
  %1289 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1243, i32 %1056) #8
  store <4 x i32> %1289, <4 x i32>* %1241, align 16
  %1290 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1247, i32 %1056) #8
  store <4 x i32> %1290, <4 x i32>* %1245, align 16
  %1291 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1251, i32 %1056) #8
  store <4 x i32> %1291, <4 x i32>* %1249, align 16
  %1292 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1255, i32 %1056) #8
  store <4 x i32> %1292, <4 x i32>* %1253, align 16
  %1293 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1259, i32 %1056) #8
  store <4 x i32> %1293, <4 x i32>* %1257, align 16
  %1294 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1263, i32 %1056) #8
  store <4 x i32> %1294, <4 x i32>* %1261, align 16
  %1295 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1267, i32 %1056) #8
  store <4 x i32> %1295, <4 x i32>* %1265, align 16
  %1296 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1271, i32 %1056) #8
  store <4 x i32> %1296, <4 x i32>* %1269, align 16
  %1297 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1275, i32 %1056) #8
  store <4 x i32> %1297, <4 x i32>* %1273, align 16
  %1298 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1279, i32 %1056) #8
  store <4 x i32> %1298, <4 x i32>* %1277, align 16
  %1299 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1283, i32 %1056) #8
  store <4 x i32> %1299, <4 x i32>* %1281, align 16
  %1300 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %1301 = bitcast <2 x i64>* %1300 to <4 x i32>*
  %1302 = load <4 x i32>, <4 x i32>* %1301, align 16
  %1303 = add <4 x i32> %1302, %1060
  %1304 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %1305 = bitcast <2 x i64>* %1304 to <4 x i32>*
  %1306 = load <4 x i32>, <4 x i32>* %1305, align 16
  %1307 = add <4 x i32> %1306, %1060
  %1308 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %1309 = bitcast <2 x i64>* %1308 to <4 x i32>*
  %1310 = load <4 x i32>, <4 x i32>* %1309, align 16
  %1311 = add <4 x i32> %1310, %1060
  %1312 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %1313 = bitcast <2 x i64>* %1312 to <4 x i32>*
  %1314 = load <4 x i32>, <4 x i32>* %1313, align 16
  %1315 = add <4 x i32> %1314, %1060
  %1316 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %1317 = bitcast <2 x i64>* %1316 to <4 x i32>*
  %1318 = load <4 x i32>, <4 x i32>* %1317, align 16
  %1319 = add <4 x i32> %1318, %1060
  %1320 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %1321 = bitcast <2 x i64>* %1320 to <4 x i32>*
  %1322 = load <4 x i32>, <4 x i32>* %1321, align 16
  %1323 = add <4 x i32> %1322, %1060
  %1324 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %1325 = bitcast <2 x i64>* %1324 to <4 x i32>*
  %1326 = load <4 x i32>, <4 x i32>* %1325, align 16
  %1327 = add <4 x i32> %1326, %1060
  %1328 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %1329 = bitcast <2 x i64>* %1328 to <4 x i32>*
  %1330 = load <4 x i32>, <4 x i32>* %1329, align 16
  %1331 = add <4 x i32> %1330, %1060
  %1332 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %1333 = bitcast <2 x i64>* %1332 to <4 x i32>*
  %1334 = load <4 x i32>, <4 x i32>* %1333, align 16
  %1335 = add <4 x i32> %1334, %1060
  %1336 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %1337 = bitcast <2 x i64>* %1336 to <4 x i32>*
  %1338 = load <4 x i32>, <4 x i32>* %1337, align 16
  %1339 = add <4 x i32> %1338, %1060
  %1340 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %1341 = bitcast <2 x i64>* %1340 to <4 x i32>*
  %1342 = load <4 x i32>, <4 x i32>* %1341, align 16
  %1343 = add <4 x i32> %1342, %1060
  %1344 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %1345 = bitcast <2 x i64>* %1344 to <4 x i32>*
  %1346 = load <4 x i32>, <4 x i32>* %1345, align 16
  %1347 = add <4 x i32> %1346, %1060
  %1348 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %1349 = bitcast <2 x i64>* %1348 to <4 x i32>*
  %1350 = load <4 x i32>, <4 x i32>* %1349, align 16
  %1351 = add <4 x i32> %1350, %1060
  %1352 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %1353 = bitcast <2 x i64>* %1352 to <4 x i32>*
  %1354 = load <4 x i32>, <4 x i32>* %1353, align 16
  %1355 = add <4 x i32> %1354, %1060
  %1356 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %1357 = bitcast <2 x i64>* %1356 to <4 x i32>*
  %1358 = load <4 x i32>, <4 x i32>* %1357, align 16
  %1359 = add <4 x i32> %1358, %1060
  %1360 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %1361 = bitcast <2 x i64>* %1360 to <4 x i32>*
  %1362 = load <4 x i32>, <4 x i32>* %1361, align 16
  %1363 = add <4 x i32> %1362, %1060
  %1364 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1303, i32 %1056) #8
  store <4 x i32> %1364, <4 x i32>* %1301, align 16
  %1365 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1307, i32 %1056) #8
  store <4 x i32> %1365, <4 x i32>* %1305, align 16
  %1366 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1311, i32 %1056) #8
  store <4 x i32> %1366, <4 x i32>* %1309, align 16
  %1367 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1315, i32 %1056) #8
  store <4 x i32> %1367, <4 x i32>* %1313, align 16
  %1368 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1319, i32 %1056) #8
  store <4 x i32> %1368, <4 x i32>* %1317, align 16
  %1369 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1323, i32 %1056) #8
  store <4 x i32> %1369, <4 x i32>* %1321, align 16
  %1370 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1327, i32 %1056) #8
  store <4 x i32> %1370, <4 x i32>* %1325, align 16
  %1371 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1331, i32 %1056) #8
  store <4 x i32> %1371, <4 x i32>* %1329, align 16
  %1372 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1335, i32 %1056) #8
  store <4 x i32> %1372, <4 x i32>* %1333, align 16
  %1373 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1339, i32 %1056) #8
  store <4 x i32> %1373, <4 x i32>* %1337, align 16
  %1374 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1343, i32 %1056) #8
  store <4 x i32> %1374, <4 x i32>* %1341, align 16
  %1375 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1347, i32 %1056) #8
  store <4 x i32> %1375, <4 x i32>* %1345, align 16
  %1376 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1351, i32 %1056) #8
  store <4 x i32> %1376, <4 x i32>* %1349, align 16
  %1377 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1355, i32 %1056) #8
  store <4 x i32> %1377, <4 x i32>* %1353, align 16
  %1378 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1359, i32 %1056) #8
  store <4 x i32> %1378, <4 x i32>* %1357, align 16
  %1379 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1363, i32 %1056) #8
  store <4 x i32> %1379, <4 x i32>* %1361, align 16
  %1380 = shufflevector <4 x i32> %1124, <4 x i32> %1128, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1381 = bitcast <4 x i32> %1380 to <2 x i64>
  %1382 = shufflevector <4 x i32> %1124, <4 x i32> %1128, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1383 = bitcast <4 x i32> %1382 to <2 x i64>
  %1384 = shufflevector <4 x i32> %1132, <4 x i32> %1136, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1385 = bitcast <4 x i32> %1384 to <2 x i64>
  %1386 = shufflevector <4 x i32> %1132, <4 x i32> %1136, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1387 = bitcast <4 x i32> %1386 to <2 x i64>
  %1388 = shufflevector <2 x i64> %1381, <2 x i64> %1385, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1388, <2 x i64>* %1047, align 16
  %1389 = shufflevector <2 x i64> %1381, <2 x i64> %1385, <2 x i32> <i32 1, i32 3>
  %1390 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %1389, <2 x i64>* %1390, align 16
  %1391 = shufflevector <2 x i64> %1383, <2 x i64> %1387, <2 x i32> <i32 0, i32 2>
  %1392 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %1391, <2 x i64>* %1392, align 16
  %1393 = shufflevector <2 x i64> %1383, <2 x i64> %1387, <2 x i32> <i32 1, i32 3>
  %1394 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %1393, <2 x i64>* %1394, align 16
  %1395 = shufflevector <4 x i32> %1125, <4 x i32> %1129, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1396 = bitcast <4 x i32> %1395 to <2 x i64>
  %1397 = shufflevector <4 x i32> %1125, <4 x i32> %1129, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1398 = bitcast <4 x i32> %1397 to <2 x i64>
  %1399 = shufflevector <4 x i32> %1133, <4 x i32> %1137, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1400 = bitcast <4 x i32> %1399 to <2 x i64>
  %1401 = shufflevector <4 x i32> %1133, <4 x i32> %1137, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1402 = bitcast <4 x i32> %1401 to <2 x i64>
  %1403 = shufflevector <2 x i64> %1396, <2 x i64> %1400, <2 x i32> <i32 0, i32 2>
  %1404 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %1403, <2 x i64>* %1404, align 16
  %1405 = shufflevector <2 x i64> %1396, <2 x i64> %1400, <2 x i32> <i32 1, i32 3>
  %1406 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %1405, <2 x i64>* %1406, align 16
  %1407 = shufflevector <2 x i64> %1398, <2 x i64> %1402, <2 x i32> <i32 0, i32 2>
  %1408 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %1407, <2 x i64>* %1408, align 16
  %1409 = shufflevector <2 x i64> %1398, <2 x i64> %1402, <2 x i32> <i32 1, i32 3>
  %1410 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %1409, <2 x i64>* %1410, align 16
  %1411 = load <4 x i32>, <4 x i32>* %1157, align 16
  %1412 = shufflevector <4 x i32> %1204, <4 x i32> %1411, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1413 = bitcast <4 x i32> %1412 to <2 x i64>
  %1414 = shufflevector <4 x i32> %1204, <4 x i32> %1411, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1415 = bitcast <4 x i32> %1414 to <2 x i64>
  %1416 = load <4 x i32>, <4 x i32>* %1173, align 16
  %1417 = load <4 x i32>, <4 x i32>* %1189, align 16
  %1418 = shufflevector <4 x i32> %1416, <4 x i32> %1417, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1419 = bitcast <4 x i32> %1418 to <2 x i64>
  %1420 = shufflevector <4 x i32> %1416, <4 x i32> %1417, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1421 = bitcast <4 x i32> %1420 to <2 x i64>
  %1422 = shufflevector <2 x i64> %1413, <2 x i64> %1419, <2 x i32> <i32 0, i32 2>
  %1423 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %1422, <2 x i64>* %1423, align 16
  %1424 = shufflevector <2 x i64> %1413, <2 x i64> %1419, <2 x i32> <i32 1, i32 3>
  %1425 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %1424, <2 x i64>* %1425, align 16
  %1426 = shufflevector <2 x i64> %1415, <2 x i64> %1421, <2 x i32> <i32 0, i32 2>
  %1427 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %1426, <2 x i64>* %1427, align 16
  %1428 = shufflevector <2 x i64> %1415, <2 x i64> %1421, <2 x i32> <i32 1, i32 3>
  %1429 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %1428, <2 x i64>* %1429, align 16
  %1430 = load <4 x i32>, <4 x i32>* %1145, align 16
  %1431 = load <4 x i32>, <4 x i32>* %1161, align 16
  %1432 = shufflevector <4 x i32> %1430, <4 x i32> %1431, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1433 = bitcast <4 x i32> %1432 to <2 x i64>
  %1434 = shufflevector <4 x i32> %1430, <4 x i32> %1431, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1435 = bitcast <4 x i32> %1434 to <2 x i64>
  %1436 = load <4 x i32>, <4 x i32>* %1177, align 16
  %1437 = load <4 x i32>, <4 x i32>* %1193, align 16
  %1438 = shufflevector <4 x i32> %1436, <4 x i32> %1437, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1439 = bitcast <4 x i32> %1438 to <2 x i64>
  %1440 = shufflevector <4 x i32> %1436, <4 x i32> %1437, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1441 = bitcast <4 x i32> %1440 to <2 x i64>
  %1442 = shufflevector <2 x i64> %1433, <2 x i64> %1439, <2 x i32> <i32 0, i32 2>
  %1443 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %1442, <2 x i64>* %1443, align 16
  %1444 = shufflevector <2 x i64> %1433, <2 x i64> %1439, <2 x i32> <i32 1, i32 3>
  %1445 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %1444, <2 x i64>* %1445, align 16
  %1446 = shufflevector <2 x i64> %1435, <2 x i64> %1441, <2 x i32> <i32 0, i32 2>
  %1447 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %1446, <2 x i64>* %1447, align 16
  %1448 = shufflevector <2 x i64> %1435, <2 x i64> %1441, <2 x i32> <i32 1, i32 3>
  %1449 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %1448, <2 x i64>* %1449, align 16
  %1450 = shufflevector <4 x i32> %1126, <4 x i32> %1130, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1451 = bitcast <4 x i32> %1450 to <2 x i64>
  %1452 = shufflevector <4 x i32> %1126, <4 x i32> %1130, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1453 = bitcast <4 x i32> %1452 to <2 x i64>
  %1454 = shufflevector <4 x i32> %1134, <4 x i32> %1138, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1455 = bitcast <4 x i32> %1454 to <2 x i64>
  %1456 = shufflevector <4 x i32> %1134, <4 x i32> %1138, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1457 = bitcast <4 x i32> %1456 to <2 x i64>
  %1458 = shufflevector <2 x i64> %1451, <2 x i64> %1455, <2 x i32> <i32 0, i32 2>
  %1459 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %1458, <2 x i64>* %1459, align 16
  %1460 = shufflevector <2 x i64> %1451, <2 x i64> %1455, <2 x i32> <i32 1, i32 3>
  %1461 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %1460, <2 x i64>* %1461, align 16
  %1462 = shufflevector <2 x i64> %1453, <2 x i64> %1457, <2 x i32> <i32 0, i32 2>
  %1463 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %1462, <2 x i64>* %1463, align 16
  %1464 = shufflevector <2 x i64> %1453, <2 x i64> %1457, <2 x i32> <i32 1, i32 3>
  %1465 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %1464, <2 x i64>* %1465, align 16
  %1466 = shufflevector <4 x i32> %1127, <4 x i32> %1131, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1467 = bitcast <4 x i32> %1466 to <2 x i64>
  %1468 = shufflevector <4 x i32> %1127, <4 x i32> %1131, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1469 = bitcast <4 x i32> %1468 to <2 x i64>
  %1470 = shufflevector <4 x i32> %1135, <4 x i32> %1139, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1471 = bitcast <4 x i32> %1470 to <2 x i64>
  %1472 = shufflevector <4 x i32> %1135, <4 x i32> %1139, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1473 = bitcast <4 x i32> %1472 to <2 x i64>
  %1474 = shufflevector <2 x i64> %1467, <2 x i64> %1471, <2 x i32> <i32 0, i32 2>
  %1475 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %1474, <2 x i64>* %1475, align 16
  %1476 = shufflevector <2 x i64> %1467, <2 x i64> %1471, <2 x i32> <i32 1, i32 3>
  %1477 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %1476, <2 x i64>* %1477, align 16
  %1478 = shufflevector <2 x i64> %1469, <2 x i64> %1473, <2 x i32> <i32 0, i32 2>
  %1479 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %1478, <2 x i64>* %1479, align 16
  %1480 = shufflevector <2 x i64> %1469, <2 x i64> %1473, <2 x i32> <i32 1, i32 3>
  %1481 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %1480, <2 x i64>* %1481, align 16
  %1482 = load <4 x i32>, <4 x i32>* %1149, align 16
  %1483 = load <4 x i32>, <4 x i32>* %1165, align 16
  %1484 = shufflevector <4 x i32> %1482, <4 x i32> %1483, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1485 = bitcast <4 x i32> %1484 to <2 x i64>
  %1486 = shufflevector <4 x i32> %1482, <4 x i32> %1483, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1487 = bitcast <4 x i32> %1486 to <2 x i64>
  %1488 = load <4 x i32>, <4 x i32>* %1181, align 16
  %1489 = load <4 x i32>, <4 x i32>* %1197, align 16
  %1490 = shufflevector <4 x i32> %1488, <4 x i32> %1489, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1491 = bitcast <4 x i32> %1490 to <2 x i64>
  %1492 = shufflevector <4 x i32> %1488, <4 x i32> %1489, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1493 = bitcast <4 x i32> %1492 to <2 x i64>
  %1494 = shufflevector <2 x i64> %1485, <2 x i64> %1491, <2 x i32> <i32 0, i32 2>
  %1495 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %1494, <2 x i64>* %1495, align 16
  %1496 = shufflevector <2 x i64> %1485, <2 x i64> %1491, <2 x i32> <i32 1, i32 3>
  %1497 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %1496, <2 x i64>* %1497, align 16
  %1498 = shufflevector <2 x i64> %1487, <2 x i64> %1493, <2 x i32> <i32 0, i32 2>
  %1499 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %1498, <2 x i64>* %1499, align 16
  %1500 = shufflevector <2 x i64> %1487, <2 x i64> %1493, <2 x i32> <i32 1, i32 3>
  %1501 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %1500, <2 x i64>* %1501, align 16
  %1502 = load <4 x i32>, <4 x i32>* %1153, align 16
  %1503 = load <4 x i32>, <4 x i32>* %1169, align 16
  %1504 = shufflevector <4 x i32> %1502, <4 x i32> %1503, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1505 = bitcast <4 x i32> %1504 to <2 x i64>
  %1506 = shufflevector <4 x i32> %1502, <4 x i32> %1503, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1507 = bitcast <4 x i32> %1506 to <2 x i64>
  %1508 = load <4 x i32>, <4 x i32>* %1185, align 16
  %1509 = load <4 x i32>, <4 x i32>* %1201, align 16
  %1510 = shufflevector <4 x i32> %1508, <4 x i32> %1509, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1511 = bitcast <4 x i32> %1510 to <2 x i64>
  %1512 = shufflevector <4 x i32> %1508, <4 x i32> %1509, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1513 = bitcast <4 x i32> %1512 to <2 x i64>
  %1514 = shufflevector <2 x i64> %1505, <2 x i64> %1511, <2 x i32> <i32 0, i32 2>
  %1515 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %1514, <2 x i64>* %1515, align 16
  %1516 = shufflevector <2 x i64> %1505, <2 x i64> %1511, <2 x i32> <i32 1, i32 3>
  %1517 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %1516, <2 x i64>* %1517, align 16
  %1518 = shufflevector <2 x i64> %1507, <2 x i64> %1513, <2 x i32> <i32 0, i32 2>
  %1519 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %1518, <2 x i64>* %1519, align 16
  %1520 = shufflevector <2 x i64> %1507, <2 x i64> %1513, <2 x i32> <i32 1, i32 3>
  %1521 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %1520, <2 x i64>* %1521, align 16
  %1522 = load <4 x i32>, <4 x i32>* %1237, align 16
  %1523 = shufflevector <4 x i32> %1284, <4 x i32> %1522, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1524 = bitcast <4 x i32> %1523 to <2 x i64>
  %1525 = shufflevector <4 x i32> %1284, <4 x i32> %1522, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1526 = bitcast <4 x i32> %1525 to <2 x i64>
  %1527 = load <4 x i32>, <4 x i32>* %1253, align 16
  %1528 = load <4 x i32>, <4 x i32>* %1269, align 16
  %1529 = shufflevector <4 x i32> %1527, <4 x i32> %1528, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1530 = bitcast <4 x i32> %1529 to <2 x i64>
  %1531 = shufflevector <4 x i32> %1527, <4 x i32> %1528, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1532 = bitcast <4 x i32> %1531 to <2 x i64>
  %1533 = shufflevector <2 x i64> %1524, <2 x i64> %1530, <2 x i32> <i32 0, i32 2>
  %1534 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %1533, <2 x i64>* %1534, align 16
  %1535 = shufflevector <2 x i64> %1524, <2 x i64> %1530, <2 x i32> <i32 1, i32 3>
  %1536 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %1535, <2 x i64>* %1536, align 16
  %1537 = shufflevector <2 x i64> %1526, <2 x i64> %1532, <2 x i32> <i32 0, i32 2>
  %1538 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %1537, <2 x i64>* %1538, align 16
  %1539 = shufflevector <2 x i64> %1526, <2 x i64> %1532, <2 x i32> <i32 1, i32 3>
  %1540 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %1539, <2 x i64>* %1540, align 16
  %1541 = load <4 x i32>, <4 x i32>* %1225, align 16
  %1542 = load <4 x i32>, <4 x i32>* %1241, align 16
  %1543 = shufflevector <4 x i32> %1541, <4 x i32> %1542, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1544 = bitcast <4 x i32> %1543 to <2 x i64>
  %1545 = shufflevector <4 x i32> %1541, <4 x i32> %1542, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1546 = bitcast <4 x i32> %1545 to <2 x i64>
  %1547 = load <4 x i32>, <4 x i32>* %1257, align 16
  %1548 = load <4 x i32>, <4 x i32>* %1273, align 16
  %1549 = shufflevector <4 x i32> %1547, <4 x i32> %1548, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1550 = bitcast <4 x i32> %1549 to <2 x i64>
  %1551 = shufflevector <4 x i32> %1547, <4 x i32> %1548, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1552 = bitcast <4 x i32> %1551 to <2 x i64>
  %1553 = shufflevector <2 x i64> %1544, <2 x i64> %1550, <2 x i32> <i32 0, i32 2>
  %1554 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %1553, <2 x i64>* %1554, align 16
  %1555 = shufflevector <2 x i64> %1544, <2 x i64> %1550, <2 x i32> <i32 1, i32 3>
  %1556 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %1555, <2 x i64>* %1556, align 16
  %1557 = shufflevector <2 x i64> %1546, <2 x i64> %1552, <2 x i32> <i32 0, i32 2>
  %1558 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %1557, <2 x i64>* %1558, align 16
  %1559 = shufflevector <2 x i64> %1546, <2 x i64> %1552, <2 x i32> <i32 1, i32 3>
  %1560 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %1559, <2 x i64>* %1560, align 16
  %1561 = load <4 x i32>, <4 x i32>* %1317, align 16
  %1562 = shufflevector <4 x i32> %1364, <4 x i32> %1561, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1563 = bitcast <4 x i32> %1562 to <2 x i64>
  %1564 = shufflevector <4 x i32> %1364, <4 x i32> %1561, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1565 = bitcast <4 x i32> %1564 to <2 x i64>
  %1566 = load <4 x i32>, <4 x i32>* %1333, align 16
  %1567 = load <4 x i32>, <4 x i32>* %1349, align 16
  %1568 = shufflevector <4 x i32> %1566, <4 x i32> %1567, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1569 = bitcast <4 x i32> %1568 to <2 x i64>
  %1570 = shufflevector <4 x i32> %1566, <4 x i32> %1567, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1571 = bitcast <4 x i32> %1570 to <2 x i64>
  %1572 = shufflevector <2 x i64> %1563, <2 x i64> %1569, <2 x i32> <i32 0, i32 2>
  %1573 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %1572, <2 x i64>* %1573, align 16
  %1574 = shufflevector <2 x i64> %1563, <2 x i64> %1569, <2 x i32> <i32 1, i32 3>
  %1575 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %1574, <2 x i64>* %1575, align 16
  %1576 = shufflevector <2 x i64> %1565, <2 x i64> %1571, <2 x i32> <i32 0, i32 2>
  %1577 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %1576, <2 x i64>* %1577, align 16
  %1578 = shufflevector <2 x i64> %1565, <2 x i64> %1571, <2 x i32> <i32 1, i32 3>
  %1579 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %1578, <2 x i64>* %1579, align 16
  %1580 = load <4 x i32>, <4 x i32>* %1305, align 16
  %1581 = load <4 x i32>, <4 x i32>* %1321, align 16
  %1582 = shufflevector <4 x i32> %1580, <4 x i32> %1581, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1583 = bitcast <4 x i32> %1582 to <2 x i64>
  %1584 = shufflevector <4 x i32> %1580, <4 x i32> %1581, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1585 = bitcast <4 x i32> %1584 to <2 x i64>
  %1586 = load <4 x i32>, <4 x i32>* %1337, align 16
  %1587 = load <4 x i32>, <4 x i32>* %1353, align 16
  %1588 = shufflevector <4 x i32> %1586, <4 x i32> %1587, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1589 = bitcast <4 x i32> %1588 to <2 x i64>
  %1590 = shufflevector <4 x i32> %1586, <4 x i32> %1587, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1591 = bitcast <4 x i32> %1590 to <2 x i64>
  %1592 = shufflevector <2 x i64> %1583, <2 x i64> %1589, <2 x i32> <i32 0, i32 2>
  %1593 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %1592, <2 x i64>* %1593, align 16
  %1594 = shufflevector <2 x i64> %1583, <2 x i64> %1589, <2 x i32> <i32 1, i32 3>
  %1595 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %1594, <2 x i64>* %1595, align 16
  %1596 = shufflevector <2 x i64> %1585, <2 x i64> %1591, <2 x i32> <i32 0, i32 2>
  %1597 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %1596, <2 x i64>* %1597, align 16
  %1598 = shufflevector <2 x i64> %1585, <2 x i64> %1591, <2 x i32> <i32 1, i32 3>
  %1599 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %1598, <2 x i64>* %1599, align 16
  %1600 = load <4 x i32>, <4 x i32>* %1229, align 16
  %1601 = load <4 x i32>, <4 x i32>* %1245, align 16
  %1602 = shufflevector <4 x i32> %1600, <4 x i32> %1601, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1603 = bitcast <4 x i32> %1602 to <2 x i64>
  %1604 = shufflevector <4 x i32> %1600, <4 x i32> %1601, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1605 = bitcast <4 x i32> %1604 to <2 x i64>
  %1606 = load <4 x i32>, <4 x i32>* %1261, align 16
  %1607 = load <4 x i32>, <4 x i32>* %1277, align 16
  %1608 = shufflevector <4 x i32> %1606, <4 x i32> %1607, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1609 = bitcast <4 x i32> %1608 to <2 x i64>
  %1610 = shufflevector <4 x i32> %1606, <4 x i32> %1607, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1611 = bitcast <4 x i32> %1610 to <2 x i64>
  %1612 = shufflevector <2 x i64> %1603, <2 x i64> %1609, <2 x i32> <i32 0, i32 2>
  %1613 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %1612, <2 x i64>* %1613, align 16
  %1614 = shufflevector <2 x i64> %1603, <2 x i64> %1609, <2 x i32> <i32 1, i32 3>
  %1615 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %1614, <2 x i64>* %1615, align 16
  %1616 = shufflevector <2 x i64> %1605, <2 x i64> %1611, <2 x i32> <i32 0, i32 2>
  %1617 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %1616, <2 x i64>* %1617, align 16
  %1618 = shufflevector <2 x i64> %1605, <2 x i64> %1611, <2 x i32> <i32 1, i32 3>
  %1619 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %1618, <2 x i64>* %1619, align 16
  %1620 = load <4 x i32>, <4 x i32>* %1233, align 16
  %1621 = load <4 x i32>, <4 x i32>* %1249, align 16
  %1622 = shufflevector <4 x i32> %1620, <4 x i32> %1621, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1623 = bitcast <4 x i32> %1622 to <2 x i64>
  %1624 = shufflevector <4 x i32> %1620, <4 x i32> %1621, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1625 = bitcast <4 x i32> %1624 to <2 x i64>
  %1626 = load <4 x i32>, <4 x i32>* %1265, align 16
  %1627 = load <4 x i32>, <4 x i32>* %1281, align 16
  %1628 = shufflevector <4 x i32> %1626, <4 x i32> %1627, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1629 = bitcast <4 x i32> %1628 to <2 x i64>
  %1630 = shufflevector <4 x i32> %1626, <4 x i32> %1627, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1631 = bitcast <4 x i32> %1630 to <2 x i64>
  %1632 = shufflevector <2 x i64> %1623, <2 x i64> %1629, <2 x i32> <i32 0, i32 2>
  %1633 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %1632, <2 x i64>* %1633, align 16
  %1634 = shufflevector <2 x i64> %1623, <2 x i64> %1629, <2 x i32> <i32 1, i32 3>
  %1635 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %1634, <2 x i64>* %1635, align 16
  %1636 = shufflevector <2 x i64> %1625, <2 x i64> %1631, <2 x i32> <i32 0, i32 2>
  %1637 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %1636, <2 x i64>* %1637, align 16
  %1638 = shufflevector <2 x i64> %1625, <2 x i64> %1631, <2 x i32> <i32 1, i32 3>
  %1639 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %1638, <2 x i64>* %1639, align 16
  %1640 = load <4 x i32>, <4 x i32>* %1309, align 16
  %1641 = load <4 x i32>, <4 x i32>* %1325, align 16
  %1642 = shufflevector <4 x i32> %1640, <4 x i32> %1641, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1643 = bitcast <4 x i32> %1642 to <2 x i64>
  %1644 = shufflevector <4 x i32> %1640, <4 x i32> %1641, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1645 = bitcast <4 x i32> %1644 to <2 x i64>
  %1646 = load <4 x i32>, <4 x i32>* %1341, align 16
  %1647 = load <4 x i32>, <4 x i32>* %1357, align 16
  %1648 = shufflevector <4 x i32> %1646, <4 x i32> %1647, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1649 = bitcast <4 x i32> %1648 to <2 x i64>
  %1650 = shufflevector <4 x i32> %1646, <4 x i32> %1647, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1651 = bitcast <4 x i32> %1650 to <2 x i64>
  %1652 = shufflevector <2 x i64> %1643, <2 x i64> %1649, <2 x i32> <i32 0, i32 2>
  %1653 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %1652, <2 x i64>* %1653, align 16
  %1654 = shufflevector <2 x i64> %1643, <2 x i64> %1649, <2 x i32> <i32 1, i32 3>
  %1655 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %1654, <2 x i64>* %1655, align 16
  %1656 = shufflevector <2 x i64> %1645, <2 x i64> %1651, <2 x i32> <i32 0, i32 2>
  %1657 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %1656, <2 x i64>* %1657, align 16
  %1658 = shufflevector <2 x i64> %1645, <2 x i64> %1651, <2 x i32> <i32 1, i32 3>
  %1659 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %1658, <2 x i64>* %1659, align 16
  %1660 = load <4 x i32>, <4 x i32>* %1313, align 16
  %1661 = load <4 x i32>, <4 x i32>* %1329, align 16
  %1662 = shufflevector <4 x i32> %1660, <4 x i32> %1661, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1663 = bitcast <4 x i32> %1662 to <2 x i64>
  %1664 = shufflevector <4 x i32> %1660, <4 x i32> %1661, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1665 = bitcast <4 x i32> %1664 to <2 x i64>
  %1666 = load <4 x i32>, <4 x i32>* %1345, align 16
  %1667 = load <4 x i32>, <4 x i32>* %1361, align 16
  %1668 = shufflevector <4 x i32> %1666, <4 x i32> %1667, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1669 = bitcast <4 x i32> %1668 to <2 x i64>
  %1670 = shufflevector <4 x i32> %1666, <4 x i32> %1667, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1671 = bitcast <4 x i32> %1670 to <2 x i64>
  %1672 = shufflevector <2 x i64> %1663, <2 x i64> %1669, <2 x i32> <i32 0, i32 2>
  %1673 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %1672, <2 x i64>* %1673, align 16
  %1674 = shufflevector <2 x i64> %1663, <2 x i64> %1669, <2 x i32> <i32 1, i32 3>
  %1675 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %1674, <2 x i64>* %1675, align 16
  %1676 = shufflevector <2 x i64> %1665, <2 x i64> %1671, <2 x i32> <i32 0, i32 2>
  %1677 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %1676, <2 x i64>* %1677, align 16
  %1678 = shufflevector <2 x i64> %1665, <2 x i64> %1671, <2 x i32> <i32 1, i32 3>
  %1679 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %1678, <2 x i64>* %1679, align 16
  %1680 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  %1681 = sext i8 %1680 to i32
  call void @fdct16x16_sse4_1(<2 x i64>* nonnull %1047, <2 x i64>* nonnull %1050, i32 %1681, i32 4)
  %1682 = load <4 x i32>, <4 x i32>* %1061, align 16
  %1683 = load <4 x i32>, <4 x i32>* %1077, align 16
  %1684 = shufflevector <4 x i32> %1682, <4 x i32> %1683, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1685 = bitcast <4 x i32> %1684 to <2 x i64>
  %1686 = shufflevector <4 x i32> %1682, <4 x i32> %1683, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1687 = bitcast <4 x i32> %1686 to <2 x i64>
  %1688 = load <4 x i32>, <4 x i32>* %1093, align 16
  %1689 = load <4 x i32>, <4 x i32>* %1109, align 16
  %1690 = shufflevector <4 x i32> %1688, <4 x i32> %1689, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1691 = bitcast <4 x i32> %1690 to <2 x i64>
  %1692 = shufflevector <4 x i32> %1688, <4 x i32> %1689, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1693 = bitcast <4 x i32> %1692 to <2 x i64>
  %1694 = shufflevector <2 x i64> %1685, <2 x i64> %1691, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1694, <2 x i64>* %1047, align 16
  %1695 = shufflevector <2 x i64> %1685, <2 x i64> %1691, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1695, <2 x i64>* %1390, align 16
  %1696 = shufflevector <2 x i64> %1687, <2 x i64> %1693, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1696, <2 x i64>* %1392, align 16
  %1697 = shufflevector <2 x i64> %1687, <2 x i64> %1693, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1697, <2 x i64>* %1394, align 16
  %1698 = load <4 x i32>, <4 x i32>* %1065, align 16
  %1699 = load <4 x i32>, <4 x i32>* %1081, align 16
  %1700 = shufflevector <4 x i32> %1698, <4 x i32> %1699, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1701 = bitcast <4 x i32> %1700 to <2 x i64>
  %1702 = shufflevector <4 x i32> %1698, <4 x i32> %1699, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1703 = bitcast <4 x i32> %1702 to <2 x i64>
  %1704 = load <4 x i32>, <4 x i32>* %1097, align 16
  %1705 = load <4 x i32>, <4 x i32>* %1113, align 16
  %1706 = shufflevector <4 x i32> %1704, <4 x i32> %1705, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1707 = bitcast <4 x i32> %1706 to <2 x i64>
  %1708 = shufflevector <4 x i32> %1704, <4 x i32> %1705, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1709 = bitcast <4 x i32> %1708 to <2 x i64>
  %1710 = shufflevector <2 x i64> %1701, <2 x i64> %1707, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1710, <2 x i64>* %1404, align 16
  %1711 = shufflevector <2 x i64> %1701, <2 x i64> %1707, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1711, <2 x i64>* %1406, align 16
  %1712 = shufflevector <2 x i64> %1703, <2 x i64> %1709, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1712, <2 x i64>* %1408, align 16
  %1713 = shufflevector <2 x i64> %1703, <2 x i64> %1709, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1713, <2 x i64>* %1410, align 16
  %1714 = load <4 x i32>, <4 x i32>* %1141, align 16
  %1715 = load <4 x i32>, <4 x i32>* %1157, align 16
  %1716 = shufflevector <4 x i32> %1714, <4 x i32> %1715, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1717 = bitcast <4 x i32> %1716 to <2 x i64>
  %1718 = shufflevector <4 x i32> %1714, <4 x i32> %1715, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1719 = bitcast <4 x i32> %1718 to <2 x i64>
  %1720 = load <4 x i32>, <4 x i32>* %1173, align 16
  %1721 = load <4 x i32>, <4 x i32>* %1189, align 16
  %1722 = shufflevector <4 x i32> %1720, <4 x i32> %1721, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1723 = bitcast <4 x i32> %1722 to <2 x i64>
  %1724 = shufflevector <4 x i32> %1720, <4 x i32> %1721, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1725 = bitcast <4 x i32> %1724 to <2 x i64>
  %1726 = shufflevector <2 x i64> %1717, <2 x i64> %1723, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1726, <2 x i64>* %1423, align 16
  %1727 = shufflevector <2 x i64> %1717, <2 x i64> %1723, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1727, <2 x i64>* %1425, align 16
  %1728 = shufflevector <2 x i64> %1719, <2 x i64> %1725, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1728, <2 x i64>* %1427, align 16
  %1729 = shufflevector <2 x i64> %1719, <2 x i64> %1725, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1729, <2 x i64>* %1429, align 16
  %1730 = load <4 x i32>, <4 x i32>* %1145, align 16
  %1731 = load <4 x i32>, <4 x i32>* %1161, align 16
  %1732 = shufflevector <4 x i32> %1730, <4 x i32> %1731, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1733 = bitcast <4 x i32> %1732 to <2 x i64>
  %1734 = shufflevector <4 x i32> %1730, <4 x i32> %1731, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1735 = bitcast <4 x i32> %1734 to <2 x i64>
  %1736 = load <4 x i32>, <4 x i32>* %1177, align 16
  %1737 = load <4 x i32>, <4 x i32>* %1193, align 16
  %1738 = shufflevector <4 x i32> %1736, <4 x i32> %1737, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1739 = bitcast <4 x i32> %1738 to <2 x i64>
  %1740 = shufflevector <4 x i32> %1736, <4 x i32> %1737, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1741 = bitcast <4 x i32> %1740 to <2 x i64>
  %1742 = shufflevector <2 x i64> %1733, <2 x i64> %1739, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1742, <2 x i64>* %1443, align 16
  %1743 = shufflevector <2 x i64> %1733, <2 x i64> %1739, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1743, <2 x i64>* %1445, align 16
  %1744 = shufflevector <2 x i64> %1735, <2 x i64> %1741, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1744, <2 x i64>* %1447, align 16
  %1745 = shufflevector <2 x i64> %1735, <2 x i64> %1741, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1745, <2 x i64>* %1449, align 16
  %1746 = load <4 x i32>, <4 x i32>* %1069, align 16
  %1747 = load <4 x i32>, <4 x i32>* %1085, align 16
  %1748 = shufflevector <4 x i32> %1746, <4 x i32> %1747, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1749 = bitcast <4 x i32> %1748 to <2 x i64>
  %1750 = shufflevector <4 x i32> %1746, <4 x i32> %1747, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1751 = bitcast <4 x i32> %1750 to <2 x i64>
  %1752 = load <4 x i32>, <4 x i32>* %1101, align 16
  %1753 = load <4 x i32>, <4 x i32>* %1117, align 16
  %1754 = shufflevector <4 x i32> %1752, <4 x i32> %1753, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1755 = bitcast <4 x i32> %1754 to <2 x i64>
  %1756 = shufflevector <4 x i32> %1752, <4 x i32> %1753, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1757 = bitcast <4 x i32> %1756 to <2 x i64>
  %1758 = shufflevector <2 x i64> %1749, <2 x i64> %1755, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1758, <2 x i64>* %1459, align 16
  %1759 = shufflevector <2 x i64> %1749, <2 x i64> %1755, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1759, <2 x i64>* %1461, align 16
  %1760 = shufflevector <2 x i64> %1751, <2 x i64> %1757, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1760, <2 x i64>* %1463, align 16
  %1761 = shufflevector <2 x i64> %1751, <2 x i64> %1757, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1761, <2 x i64>* %1465, align 16
  %1762 = load <4 x i32>, <4 x i32>* %1073, align 16
  %1763 = load <4 x i32>, <4 x i32>* %1089, align 16
  %1764 = shufflevector <4 x i32> %1762, <4 x i32> %1763, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1765 = bitcast <4 x i32> %1764 to <2 x i64>
  %1766 = shufflevector <4 x i32> %1762, <4 x i32> %1763, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1767 = bitcast <4 x i32> %1766 to <2 x i64>
  %1768 = load <4 x i32>, <4 x i32>* %1105, align 16
  %1769 = load <4 x i32>, <4 x i32>* %1121, align 16
  %1770 = shufflevector <4 x i32> %1768, <4 x i32> %1769, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1771 = bitcast <4 x i32> %1770 to <2 x i64>
  %1772 = shufflevector <4 x i32> %1768, <4 x i32> %1769, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1773 = bitcast <4 x i32> %1772 to <2 x i64>
  %1774 = shufflevector <2 x i64> %1765, <2 x i64> %1771, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1774, <2 x i64>* %1475, align 16
  %1775 = shufflevector <2 x i64> %1765, <2 x i64> %1771, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1775, <2 x i64>* %1477, align 16
  %1776 = shufflevector <2 x i64> %1767, <2 x i64> %1773, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1776, <2 x i64>* %1479, align 16
  %1777 = shufflevector <2 x i64> %1767, <2 x i64> %1773, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1777, <2 x i64>* %1481, align 16
  %1778 = load <4 x i32>, <4 x i32>* %1149, align 16
  %1779 = load <4 x i32>, <4 x i32>* %1165, align 16
  %1780 = shufflevector <4 x i32> %1778, <4 x i32> %1779, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1781 = bitcast <4 x i32> %1780 to <2 x i64>
  %1782 = shufflevector <4 x i32> %1778, <4 x i32> %1779, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1783 = bitcast <4 x i32> %1782 to <2 x i64>
  %1784 = load <4 x i32>, <4 x i32>* %1181, align 16
  %1785 = load <4 x i32>, <4 x i32>* %1197, align 16
  %1786 = shufflevector <4 x i32> %1784, <4 x i32> %1785, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1787 = bitcast <4 x i32> %1786 to <2 x i64>
  %1788 = shufflevector <4 x i32> %1784, <4 x i32> %1785, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1789 = bitcast <4 x i32> %1788 to <2 x i64>
  %1790 = shufflevector <2 x i64> %1781, <2 x i64> %1787, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1790, <2 x i64>* %1495, align 16
  %1791 = shufflevector <2 x i64> %1781, <2 x i64> %1787, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1791, <2 x i64>* %1497, align 16
  %1792 = shufflevector <2 x i64> %1783, <2 x i64> %1789, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1792, <2 x i64>* %1499, align 16
  %1793 = shufflevector <2 x i64> %1783, <2 x i64> %1789, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1793, <2 x i64>* %1501, align 16
  %1794 = load <4 x i32>, <4 x i32>* %1153, align 16
  %1795 = load <4 x i32>, <4 x i32>* %1169, align 16
  %1796 = shufflevector <4 x i32> %1794, <4 x i32> %1795, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1797 = bitcast <4 x i32> %1796 to <2 x i64>
  %1798 = shufflevector <4 x i32> %1794, <4 x i32> %1795, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1799 = bitcast <4 x i32> %1798 to <2 x i64>
  %1800 = load <4 x i32>, <4 x i32>* %1185, align 16
  %1801 = load <4 x i32>, <4 x i32>* %1201, align 16
  %1802 = shufflevector <4 x i32> %1800, <4 x i32> %1801, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1803 = bitcast <4 x i32> %1802 to <2 x i64>
  %1804 = shufflevector <4 x i32> %1800, <4 x i32> %1801, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1805 = bitcast <4 x i32> %1804 to <2 x i64>
  %1806 = shufflevector <2 x i64> %1797, <2 x i64> %1803, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1806, <2 x i64>* %1515, align 16
  %1807 = shufflevector <2 x i64> %1797, <2 x i64> %1803, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1807, <2 x i64>* %1517, align 16
  %1808 = shufflevector <2 x i64> %1799, <2 x i64> %1805, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1808, <2 x i64>* %1519, align 16
  %1809 = shufflevector <2 x i64> %1799, <2 x i64> %1805, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1809, <2 x i64>* %1521, align 16
  %1810 = load <4 x i32>, <4 x i32>* %1221, align 16
  %1811 = load <4 x i32>, <4 x i32>* %1237, align 16
  %1812 = shufflevector <4 x i32> %1810, <4 x i32> %1811, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1813 = bitcast <4 x i32> %1812 to <2 x i64>
  %1814 = shufflevector <4 x i32> %1810, <4 x i32> %1811, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1815 = bitcast <4 x i32> %1814 to <2 x i64>
  %1816 = load <4 x i32>, <4 x i32>* %1253, align 16
  %1817 = load <4 x i32>, <4 x i32>* %1269, align 16
  %1818 = shufflevector <4 x i32> %1816, <4 x i32> %1817, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1819 = bitcast <4 x i32> %1818 to <2 x i64>
  %1820 = shufflevector <4 x i32> %1816, <4 x i32> %1817, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1821 = bitcast <4 x i32> %1820 to <2 x i64>
  %1822 = shufflevector <2 x i64> %1813, <2 x i64> %1819, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1822, <2 x i64>* %1534, align 16
  %1823 = shufflevector <2 x i64> %1813, <2 x i64> %1819, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1823, <2 x i64>* %1536, align 16
  %1824 = shufflevector <2 x i64> %1815, <2 x i64> %1821, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1824, <2 x i64>* %1538, align 16
  %1825 = shufflevector <2 x i64> %1815, <2 x i64> %1821, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1825, <2 x i64>* %1540, align 16
  %1826 = load <4 x i32>, <4 x i32>* %1225, align 16
  %1827 = load <4 x i32>, <4 x i32>* %1241, align 16
  %1828 = shufflevector <4 x i32> %1826, <4 x i32> %1827, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1829 = bitcast <4 x i32> %1828 to <2 x i64>
  %1830 = shufflevector <4 x i32> %1826, <4 x i32> %1827, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1831 = bitcast <4 x i32> %1830 to <2 x i64>
  %1832 = load <4 x i32>, <4 x i32>* %1257, align 16
  %1833 = load <4 x i32>, <4 x i32>* %1273, align 16
  %1834 = shufflevector <4 x i32> %1832, <4 x i32> %1833, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1835 = bitcast <4 x i32> %1834 to <2 x i64>
  %1836 = shufflevector <4 x i32> %1832, <4 x i32> %1833, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1837 = bitcast <4 x i32> %1836 to <2 x i64>
  %1838 = shufflevector <2 x i64> %1829, <2 x i64> %1835, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1838, <2 x i64>* %1554, align 16
  %1839 = shufflevector <2 x i64> %1829, <2 x i64> %1835, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1839, <2 x i64>* %1556, align 16
  %1840 = shufflevector <2 x i64> %1831, <2 x i64> %1837, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1840, <2 x i64>* %1558, align 16
  %1841 = shufflevector <2 x i64> %1831, <2 x i64> %1837, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1841, <2 x i64>* %1560, align 16
  %1842 = load <4 x i32>, <4 x i32>* %1301, align 16
  %1843 = load <4 x i32>, <4 x i32>* %1317, align 16
  %1844 = shufflevector <4 x i32> %1842, <4 x i32> %1843, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1845 = bitcast <4 x i32> %1844 to <2 x i64>
  %1846 = shufflevector <4 x i32> %1842, <4 x i32> %1843, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1847 = bitcast <4 x i32> %1846 to <2 x i64>
  %1848 = load <4 x i32>, <4 x i32>* %1333, align 16
  %1849 = load <4 x i32>, <4 x i32>* %1349, align 16
  %1850 = shufflevector <4 x i32> %1848, <4 x i32> %1849, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1851 = bitcast <4 x i32> %1850 to <2 x i64>
  %1852 = shufflevector <4 x i32> %1848, <4 x i32> %1849, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1853 = bitcast <4 x i32> %1852 to <2 x i64>
  %1854 = shufflevector <2 x i64> %1845, <2 x i64> %1851, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1854, <2 x i64>* %1573, align 16
  %1855 = shufflevector <2 x i64> %1845, <2 x i64> %1851, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1855, <2 x i64>* %1575, align 16
  %1856 = shufflevector <2 x i64> %1847, <2 x i64> %1853, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1856, <2 x i64>* %1577, align 16
  %1857 = shufflevector <2 x i64> %1847, <2 x i64> %1853, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1857, <2 x i64>* %1579, align 16
  %1858 = load <4 x i32>, <4 x i32>* %1305, align 16
  %1859 = load <4 x i32>, <4 x i32>* %1321, align 16
  %1860 = shufflevector <4 x i32> %1858, <4 x i32> %1859, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1861 = bitcast <4 x i32> %1860 to <2 x i64>
  %1862 = shufflevector <4 x i32> %1858, <4 x i32> %1859, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1863 = bitcast <4 x i32> %1862 to <2 x i64>
  %1864 = load <4 x i32>, <4 x i32>* %1337, align 16
  %1865 = load <4 x i32>, <4 x i32>* %1353, align 16
  %1866 = shufflevector <4 x i32> %1864, <4 x i32> %1865, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1867 = bitcast <4 x i32> %1866 to <2 x i64>
  %1868 = shufflevector <4 x i32> %1864, <4 x i32> %1865, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1869 = bitcast <4 x i32> %1868 to <2 x i64>
  %1870 = shufflevector <2 x i64> %1861, <2 x i64> %1867, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1870, <2 x i64>* %1593, align 16
  %1871 = shufflevector <2 x i64> %1861, <2 x i64> %1867, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1871, <2 x i64>* %1595, align 16
  %1872 = shufflevector <2 x i64> %1863, <2 x i64> %1869, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1872, <2 x i64>* %1597, align 16
  %1873 = shufflevector <2 x i64> %1863, <2 x i64> %1869, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1873, <2 x i64>* %1599, align 16
  %1874 = load <4 x i32>, <4 x i32>* %1229, align 16
  %1875 = load <4 x i32>, <4 x i32>* %1245, align 16
  %1876 = shufflevector <4 x i32> %1874, <4 x i32> %1875, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1877 = bitcast <4 x i32> %1876 to <2 x i64>
  %1878 = shufflevector <4 x i32> %1874, <4 x i32> %1875, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1879 = bitcast <4 x i32> %1878 to <2 x i64>
  %1880 = load <4 x i32>, <4 x i32>* %1261, align 16
  %1881 = load <4 x i32>, <4 x i32>* %1277, align 16
  %1882 = shufflevector <4 x i32> %1880, <4 x i32> %1881, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1883 = bitcast <4 x i32> %1882 to <2 x i64>
  %1884 = shufflevector <4 x i32> %1880, <4 x i32> %1881, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1885 = bitcast <4 x i32> %1884 to <2 x i64>
  %1886 = shufflevector <2 x i64> %1877, <2 x i64> %1883, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1886, <2 x i64>* %1613, align 16
  %1887 = shufflevector <2 x i64> %1877, <2 x i64> %1883, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1887, <2 x i64>* %1615, align 16
  %1888 = shufflevector <2 x i64> %1879, <2 x i64> %1885, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1888, <2 x i64>* %1617, align 16
  %1889 = shufflevector <2 x i64> %1879, <2 x i64> %1885, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1889, <2 x i64>* %1619, align 16
  %1890 = load <4 x i32>, <4 x i32>* %1233, align 16
  %1891 = load <4 x i32>, <4 x i32>* %1249, align 16
  %1892 = shufflevector <4 x i32> %1890, <4 x i32> %1891, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1893 = bitcast <4 x i32> %1892 to <2 x i64>
  %1894 = shufflevector <4 x i32> %1890, <4 x i32> %1891, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1895 = bitcast <4 x i32> %1894 to <2 x i64>
  %1896 = load <4 x i32>, <4 x i32>* %1265, align 16
  %1897 = load <4 x i32>, <4 x i32>* %1281, align 16
  %1898 = shufflevector <4 x i32> %1896, <4 x i32> %1897, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1899 = bitcast <4 x i32> %1898 to <2 x i64>
  %1900 = shufflevector <4 x i32> %1896, <4 x i32> %1897, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1901 = bitcast <4 x i32> %1900 to <2 x i64>
  %1902 = shufflevector <2 x i64> %1893, <2 x i64> %1899, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1902, <2 x i64>* %1633, align 16
  %1903 = shufflevector <2 x i64> %1893, <2 x i64> %1899, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1903, <2 x i64>* %1635, align 16
  %1904 = shufflevector <2 x i64> %1895, <2 x i64> %1901, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1904, <2 x i64>* %1637, align 16
  %1905 = shufflevector <2 x i64> %1895, <2 x i64> %1901, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1905, <2 x i64>* %1639, align 16
  %1906 = load <4 x i32>, <4 x i32>* %1309, align 16
  %1907 = load <4 x i32>, <4 x i32>* %1325, align 16
  %1908 = shufflevector <4 x i32> %1906, <4 x i32> %1907, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1909 = bitcast <4 x i32> %1908 to <2 x i64>
  %1910 = shufflevector <4 x i32> %1906, <4 x i32> %1907, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1911 = bitcast <4 x i32> %1910 to <2 x i64>
  %1912 = load <4 x i32>, <4 x i32>* %1341, align 16
  %1913 = load <4 x i32>, <4 x i32>* %1357, align 16
  %1914 = shufflevector <4 x i32> %1912, <4 x i32> %1913, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1915 = bitcast <4 x i32> %1914 to <2 x i64>
  %1916 = shufflevector <4 x i32> %1912, <4 x i32> %1913, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1917 = bitcast <4 x i32> %1916 to <2 x i64>
  %1918 = shufflevector <2 x i64> %1909, <2 x i64> %1915, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1918, <2 x i64>* %1653, align 16
  %1919 = shufflevector <2 x i64> %1909, <2 x i64> %1915, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1919, <2 x i64>* %1655, align 16
  %1920 = shufflevector <2 x i64> %1911, <2 x i64> %1917, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1920, <2 x i64>* %1657, align 16
  %1921 = shufflevector <2 x i64> %1911, <2 x i64> %1917, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1921, <2 x i64>* %1659, align 16
  %1922 = load <4 x i32>, <4 x i32>* %1313, align 16
  %1923 = load <4 x i32>, <4 x i32>* %1329, align 16
  %1924 = shufflevector <4 x i32> %1922, <4 x i32> %1923, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1925 = bitcast <4 x i32> %1924 to <2 x i64>
  %1926 = shufflevector <4 x i32> %1922, <4 x i32> %1923, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1927 = bitcast <4 x i32> %1926 to <2 x i64>
  %1928 = load <4 x i32>, <4 x i32>* %1345, align 16
  %1929 = load <4 x i32>, <4 x i32>* %1361, align 16
  %1930 = shufflevector <4 x i32> %1928, <4 x i32> %1929, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1931 = bitcast <4 x i32> %1930 to <2 x i64>
  %1932 = shufflevector <4 x i32> %1928, <4 x i32> %1929, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1933 = bitcast <4 x i32> %1932 to <2 x i64>
  %1934 = shufflevector <2 x i64> %1925, <2 x i64> %1931, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1934, <2 x i64>* %1673, align 16
  %1935 = shufflevector <2 x i64> %1925, <2 x i64> %1931, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1935, <2 x i64>* %1675, align 16
  %1936 = shufflevector <2 x i64> %1927, <2 x i64> %1933, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1936, <2 x i64>* %1677, align 16
  %1937 = shufflevector <2 x i64> %1927, <2 x i64> %1933, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1937, <2 x i64>* %1679, align 16
  %1938 = bitcast i32* %1 to <2 x i64>*
  store <2 x i64> %1694, <2 x i64>* %1938, align 16
  %1939 = getelementptr inbounds i32, i32* %1, i64 4
  %1940 = bitcast i32* %1939 to <2 x i64>*
  store <2 x i64> %1726, <2 x i64>* %1940, align 16
  %1941 = getelementptr inbounds i32, i32* %1, i64 8
  %1942 = bitcast i32* %1941 to <2 x i64>*
  store <2 x i64> %1822, <2 x i64>* %1942, align 16
  %1943 = getelementptr inbounds i32, i32* %1, i64 12
  %1944 = bitcast i32* %1943 to <2 x i64>*
  store <2 x i64> %1854, <2 x i64>* %1944, align 16
  %1945 = getelementptr inbounds i32, i32* %1, i64 16
  %1946 = bitcast i32* %1945 to <2 x i64>*
  store <2 x i64> %1695, <2 x i64>* %1946, align 16
  %1947 = getelementptr inbounds i32, i32* %1, i64 20
  %1948 = bitcast i32* %1947 to <2 x i64>*
  store <2 x i64> %1727, <2 x i64>* %1948, align 16
  %1949 = getelementptr inbounds i32, i32* %1, i64 24
  %1950 = bitcast i32* %1949 to <2 x i64>*
  store <2 x i64> %1823, <2 x i64>* %1950, align 16
  %1951 = getelementptr inbounds i32, i32* %1, i64 28
  %1952 = bitcast i32* %1951 to <2 x i64>*
  store <2 x i64> %1855, <2 x i64>* %1952, align 16
  %1953 = getelementptr inbounds i32, i32* %1, i64 32
  %1954 = bitcast i32* %1953 to <2 x i64>*
  store <2 x i64> %1696, <2 x i64>* %1954, align 16
  %1955 = getelementptr inbounds i32, i32* %1, i64 36
  %1956 = bitcast i32* %1955 to <2 x i64>*
  store <2 x i64> %1728, <2 x i64>* %1956, align 16
  %1957 = getelementptr inbounds i32, i32* %1, i64 40
  %1958 = bitcast i32* %1957 to <2 x i64>*
  store <2 x i64> %1824, <2 x i64>* %1958, align 16
  %1959 = getelementptr inbounds i32, i32* %1, i64 44
  %1960 = bitcast i32* %1959 to <2 x i64>*
  store <2 x i64> %1856, <2 x i64>* %1960, align 16
  %1961 = getelementptr inbounds i32, i32* %1, i64 48
  %1962 = bitcast i32* %1961 to <2 x i64>*
  store <2 x i64> %1697, <2 x i64>* %1962, align 16
  %1963 = getelementptr inbounds i32, i32* %1, i64 52
  %1964 = bitcast i32* %1963 to <2 x i64>*
  store <2 x i64> %1729, <2 x i64>* %1964, align 16
  %1965 = getelementptr inbounds i32, i32* %1, i64 56
  %1966 = bitcast i32* %1965 to <2 x i64>*
  store <2 x i64> %1825, <2 x i64>* %1966, align 16
  %1967 = getelementptr inbounds i32, i32* %1, i64 60
  %1968 = bitcast i32* %1967 to <2 x i64>*
  store <2 x i64> %1857, <2 x i64>* %1968, align 16
  %1969 = getelementptr inbounds i32, i32* %1, i64 64
  %1970 = bitcast i32* %1969 to <2 x i64>*
  store <2 x i64> %1710, <2 x i64>* %1970, align 16
  %1971 = getelementptr inbounds i32, i32* %1, i64 68
  %1972 = bitcast i32* %1971 to <2 x i64>*
  %1973 = load <2 x i64>, <2 x i64>* %1443, align 16
  store <2 x i64> %1973, <2 x i64>* %1972, align 16
  %1974 = getelementptr inbounds i32, i32* %1, i64 72
  %1975 = bitcast i32* %1974 to <2 x i64>*
  %1976 = load <2 x i64>, <2 x i64>* %1554, align 16
  store <2 x i64> %1976, <2 x i64>* %1975, align 16
  %1977 = getelementptr inbounds i32, i32* %1, i64 76
  %1978 = bitcast i32* %1977 to <2 x i64>*
  %1979 = load <2 x i64>, <2 x i64>* %1593, align 16
  store <2 x i64> %1979, <2 x i64>* %1978, align 16
  %1980 = getelementptr inbounds i32, i32* %1, i64 80
  %1981 = bitcast i32* %1980 to <2 x i64>*
  %1982 = load <2 x i64>, <2 x i64>* %1406, align 16
  store <2 x i64> %1982, <2 x i64>* %1981, align 16
  %1983 = getelementptr inbounds i32, i32* %1, i64 84
  %1984 = bitcast i32* %1983 to <2 x i64>*
  %1985 = load <2 x i64>, <2 x i64>* %1445, align 16
  store <2 x i64> %1985, <2 x i64>* %1984, align 16
  %1986 = getelementptr inbounds i32, i32* %1, i64 88
  %1987 = bitcast i32* %1986 to <2 x i64>*
  %1988 = load <2 x i64>, <2 x i64>* %1556, align 16
  store <2 x i64> %1988, <2 x i64>* %1987, align 16
  %1989 = getelementptr inbounds i32, i32* %1, i64 92
  %1990 = bitcast i32* %1989 to <2 x i64>*
  %1991 = load <2 x i64>, <2 x i64>* %1595, align 16
  store <2 x i64> %1991, <2 x i64>* %1990, align 16
  %1992 = getelementptr inbounds i32, i32* %1, i64 96
  %1993 = bitcast i32* %1992 to <2 x i64>*
  %1994 = load <2 x i64>, <2 x i64>* %1408, align 16
  store <2 x i64> %1994, <2 x i64>* %1993, align 16
  %1995 = getelementptr inbounds i32, i32* %1, i64 100
  %1996 = bitcast i32* %1995 to <2 x i64>*
  %1997 = load <2 x i64>, <2 x i64>* %1447, align 16
  store <2 x i64> %1997, <2 x i64>* %1996, align 16
  %1998 = getelementptr inbounds i32, i32* %1, i64 104
  %1999 = bitcast i32* %1998 to <2 x i64>*
  %2000 = load <2 x i64>, <2 x i64>* %1558, align 16
  store <2 x i64> %2000, <2 x i64>* %1999, align 16
  %2001 = getelementptr inbounds i32, i32* %1, i64 108
  %2002 = bitcast i32* %2001 to <2 x i64>*
  %2003 = load <2 x i64>, <2 x i64>* %1597, align 16
  store <2 x i64> %2003, <2 x i64>* %2002, align 16
  %2004 = getelementptr inbounds i32, i32* %1, i64 112
  %2005 = bitcast i32* %2004 to <2 x i64>*
  %2006 = load <2 x i64>, <2 x i64>* %1410, align 16
  store <2 x i64> %2006, <2 x i64>* %2005, align 16
  %2007 = getelementptr inbounds i32, i32* %1, i64 116
  %2008 = bitcast i32* %2007 to <2 x i64>*
  %2009 = load <2 x i64>, <2 x i64>* %1449, align 16
  store <2 x i64> %2009, <2 x i64>* %2008, align 16
  %2010 = getelementptr inbounds i32, i32* %1, i64 120
  %2011 = bitcast i32* %2010 to <2 x i64>*
  %2012 = load <2 x i64>, <2 x i64>* %1560, align 16
  store <2 x i64> %2012, <2 x i64>* %2011, align 16
  %2013 = getelementptr inbounds i32, i32* %1, i64 124
  %2014 = bitcast i32* %2013 to <2 x i64>*
  %2015 = load <2 x i64>, <2 x i64>* %1599, align 16
  store <2 x i64> %2015, <2 x i64>* %2014, align 16
  %2016 = getelementptr inbounds i32, i32* %1, i64 128
  %2017 = bitcast i32* %2016 to <2 x i64>*
  store <2 x i64> %1758, <2 x i64>* %2017, align 16
  %2018 = getelementptr inbounds i32, i32* %1, i64 132
  %2019 = bitcast i32* %2018 to <2 x i64>*
  store <2 x i64> %1790, <2 x i64>* %2019, align 16
  %2020 = getelementptr inbounds i32, i32* %1, i64 136
  %2021 = bitcast i32* %2020 to <2 x i64>*
  store <2 x i64> %1886, <2 x i64>* %2021, align 16
  %2022 = getelementptr inbounds i32, i32* %1, i64 140
  %2023 = bitcast i32* %2022 to <2 x i64>*
  store <2 x i64> %1918, <2 x i64>* %2023, align 16
  %2024 = getelementptr inbounds i32, i32* %1, i64 144
  %2025 = bitcast i32* %2024 to <2 x i64>*
  store <2 x i64> %1759, <2 x i64>* %2025, align 16
  %2026 = getelementptr inbounds i32, i32* %1, i64 148
  %2027 = bitcast i32* %2026 to <2 x i64>*
  store <2 x i64> %1791, <2 x i64>* %2027, align 16
  %2028 = getelementptr inbounds i32, i32* %1, i64 152
  %2029 = bitcast i32* %2028 to <2 x i64>*
  store <2 x i64> %1887, <2 x i64>* %2029, align 16
  %2030 = getelementptr inbounds i32, i32* %1, i64 156
  %2031 = bitcast i32* %2030 to <2 x i64>*
  store <2 x i64> %1919, <2 x i64>* %2031, align 16
  %2032 = getelementptr inbounds i32, i32* %1, i64 160
  %2033 = bitcast i32* %2032 to <2 x i64>*
  store <2 x i64> %1760, <2 x i64>* %2033, align 16
  %2034 = getelementptr inbounds i32, i32* %1, i64 164
  %2035 = bitcast i32* %2034 to <2 x i64>*
  store <2 x i64> %1792, <2 x i64>* %2035, align 16
  %2036 = getelementptr inbounds i32, i32* %1, i64 168
  %2037 = bitcast i32* %2036 to <2 x i64>*
  store <2 x i64> %1888, <2 x i64>* %2037, align 16
  %2038 = getelementptr inbounds i32, i32* %1, i64 172
  %2039 = bitcast i32* %2038 to <2 x i64>*
  store <2 x i64> %1920, <2 x i64>* %2039, align 16
  %2040 = getelementptr inbounds i32, i32* %1, i64 176
  %2041 = bitcast i32* %2040 to <2 x i64>*
  store <2 x i64> %1761, <2 x i64>* %2041, align 16
  %2042 = getelementptr inbounds i32, i32* %1, i64 180
  %2043 = bitcast i32* %2042 to <2 x i64>*
  store <2 x i64> %1793, <2 x i64>* %2043, align 16
  %2044 = getelementptr inbounds i32, i32* %1, i64 184
  %2045 = bitcast i32* %2044 to <2 x i64>*
  store <2 x i64> %1889, <2 x i64>* %2045, align 16
  %2046 = getelementptr inbounds i32, i32* %1, i64 188
  %2047 = bitcast i32* %2046 to <2 x i64>*
  store <2 x i64> %1921, <2 x i64>* %2047, align 16
  %2048 = getelementptr inbounds i32, i32* %1, i64 192
  %2049 = bitcast i32* %2048 to <2 x i64>*
  store <2 x i64> %1774, <2 x i64>* %2049, align 16
  %2050 = getelementptr inbounds i32, i32* %1, i64 196
  %2051 = bitcast i32* %2050 to <2 x i64>*
  store <2 x i64> %1806, <2 x i64>* %2051, align 16
  %2052 = getelementptr inbounds i32, i32* %1, i64 200
  %2053 = bitcast i32* %2052 to <2 x i64>*
  store <2 x i64> %1902, <2 x i64>* %2053, align 16
  %2054 = getelementptr inbounds i32, i32* %1, i64 204
  %2055 = bitcast i32* %2054 to <2 x i64>*
  store <2 x i64> %1934, <2 x i64>* %2055, align 16
  %2056 = getelementptr inbounds i32, i32* %1, i64 208
  %2057 = bitcast i32* %2056 to <2 x i64>*
  store <2 x i64> %1775, <2 x i64>* %2057, align 16
  %2058 = getelementptr inbounds i32, i32* %1, i64 212
  %2059 = bitcast i32* %2058 to <2 x i64>*
  store <2 x i64> %1807, <2 x i64>* %2059, align 16
  %2060 = getelementptr inbounds i32, i32* %1, i64 216
  %2061 = bitcast i32* %2060 to <2 x i64>*
  store <2 x i64> %1903, <2 x i64>* %2061, align 16
  %2062 = getelementptr inbounds i32, i32* %1, i64 220
  %2063 = bitcast i32* %2062 to <2 x i64>*
  store <2 x i64> %1935, <2 x i64>* %2063, align 16
  %2064 = getelementptr inbounds i32, i32* %1, i64 224
  %2065 = bitcast i32* %2064 to <2 x i64>*
  store <2 x i64> %1776, <2 x i64>* %2065, align 16
  %2066 = getelementptr inbounds i32, i32* %1, i64 228
  %2067 = bitcast i32* %2066 to <2 x i64>*
  store <2 x i64> %1808, <2 x i64>* %2067, align 16
  %2068 = getelementptr inbounds i32, i32* %1, i64 232
  %2069 = bitcast i32* %2068 to <2 x i64>*
  store <2 x i64> %1904, <2 x i64>* %2069, align 16
  %2070 = getelementptr inbounds i32, i32* %1, i64 236
  %2071 = bitcast i32* %2070 to <2 x i64>*
  store <2 x i64> %1936, <2 x i64>* %2071, align 16
  %2072 = getelementptr inbounds i32, i32* %1, i64 240
  %2073 = bitcast i32* %2072 to <2 x i64>*
  %2074 = load <2 x i64>, <2 x i64>* %1481, align 16
  store <2 x i64> %2074, <2 x i64>* %2073, align 16
  %2075 = getelementptr inbounds i32, i32* %1, i64 244
  %2076 = bitcast i32* %2075 to <2 x i64>*
  store <2 x i64> %1809, <2 x i64>* %2076, align 16
  %2077 = getelementptr inbounds i32, i32* %1, i64 248
  %2078 = bitcast i32* %2077 to <2 x i64>*
  store <2 x i64> %1905, <2 x i64>* %2078, align 16
  %2079 = getelementptr inbounds i32, i32* %1, i64 252
  %2080 = bitcast i32* %2079 to <2 x i64>*
  store <2 x i64> %1937, <2 x i64>* %2080, align 16
  br label %17357

2081:                                             ; preds = %5
  %2082 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %2083 = load i8, i8* %10, align 1
  %2084 = sext i8 %2083 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %2082, i32 %2, i32 0, i32 0, i32 %2084)
  %2085 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %2086 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  %2087 = sext i8 %2086 to i32
  call void @fdct16x16_sse4_1(<2 x i64>* nonnull %2082, <2 x i64>* nonnull %2085, i32 %2087, i32 4)
  %2088 = getelementptr inbounds i8, i8* %10, i64 1
  %2089 = load i8, i8* %2088, align 1
  %2090 = sext i8 %2089 to i32
  %2091 = sub nsw i32 0, %2090
  %2092 = xor i32 %2090, -1
  %2093 = shl i32 1, %2092
  %2094 = insertelement <4 x i32> undef, i32 %2093, i32 0
  %2095 = shufflevector <4 x i32> %2094, <4 x i32> undef, <4 x i32> zeroinitializer
  %2096 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %2097 = load <4 x i32>, <4 x i32>* %2096, align 16
  %2098 = add <4 x i32> %2095, %2097
  %2099 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %2100 = bitcast <2 x i64>* %2099 to <4 x i32>*
  %2101 = load <4 x i32>, <4 x i32>* %2100, align 16
  %2102 = add <4 x i32> %2095, %2101
  %2103 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %2104 = bitcast <2 x i64>* %2103 to <4 x i32>*
  %2105 = load <4 x i32>, <4 x i32>* %2104, align 16
  %2106 = add <4 x i32> %2095, %2105
  %2107 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %2108 = bitcast <2 x i64>* %2107 to <4 x i32>*
  %2109 = load <4 x i32>, <4 x i32>* %2108, align 16
  %2110 = add <4 x i32> %2109, %2095
  %2111 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %2112 = bitcast <2 x i64>* %2111 to <4 x i32>*
  %2113 = load <4 x i32>, <4 x i32>* %2112, align 16
  %2114 = add <4 x i32> %2113, %2095
  %2115 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %2116 = bitcast <2 x i64>* %2115 to <4 x i32>*
  %2117 = load <4 x i32>, <4 x i32>* %2116, align 16
  %2118 = add <4 x i32> %2117, %2095
  %2119 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %2120 = bitcast <2 x i64>* %2119 to <4 x i32>*
  %2121 = load <4 x i32>, <4 x i32>* %2120, align 16
  %2122 = add <4 x i32> %2121, %2095
  %2123 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %2124 = bitcast <2 x i64>* %2123 to <4 x i32>*
  %2125 = load <4 x i32>, <4 x i32>* %2124, align 16
  %2126 = add <4 x i32> %2125, %2095
  %2127 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %2128 = bitcast <2 x i64>* %2127 to <4 x i32>*
  %2129 = load <4 x i32>, <4 x i32>* %2128, align 16
  %2130 = add <4 x i32> %2129, %2095
  %2131 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %2132 = bitcast <2 x i64>* %2131 to <4 x i32>*
  %2133 = load <4 x i32>, <4 x i32>* %2132, align 16
  %2134 = add <4 x i32> %2133, %2095
  %2135 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %2136 = bitcast <2 x i64>* %2135 to <4 x i32>*
  %2137 = load <4 x i32>, <4 x i32>* %2136, align 16
  %2138 = add <4 x i32> %2137, %2095
  %2139 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %2140 = bitcast <2 x i64>* %2139 to <4 x i32>*
  %2141 = load <4 x i32>, <4 x i32>* %2140, align 16
  %2142 = add <4 x i32> %2141, %2095
  %2143 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %2144 = bitcast <2 x i64>* %2143 to <4 x i32>*
  %2145 = load <4 x i32>, <4 x i32>* %2144, align 16
  %2146 = add <4 x i32> %2145, %2095
  %2147 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %2148 = bitcast <2 x i64>* %2147 to <4 x i32>*
  %2149 = load <4 x i32>, <4 x i32>* %2148, align 16
  %2150 = add <4 x i32> %2149, %2095
  %2151 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %2152 = bitcast <2 x i64>* %2151 to <4 x i32>*
  %2153 = load <4 x i32>, <4 x i32>* %2152, align 16
  %2154 = add <4 x i32> %2153, %2095
  %2155 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %2156 = bitcast <2 x i64>* %2155 to <4 x i32>*
  %2157 = load <4 x i32>, <4 x i32>* %2156, align 16
  %2158 = add <4 x i32> %2157, %2095
  %2159 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2098, i32 %2091) #8
  store <4 x i32> %2159, <4 x i32>* %2096, align 16
  %2160 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2102, i32 %2091) #8
  store <4 x i32> %2160, <4 x i32>* %2100, align 16
  %2161 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2106, i32 %2091) #8
  store <4 x i32> %2161, <4 x i32>* %2104, align 16
  %2162 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2110, i32 %2091) #8
  store <4 x i32> %2162, <4 x i32>* %2108, align 16
  %2163 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2114, i32 %2091) #8
  store <4 x i32> %2163, <4 x i32>* %2112, align 16
  %2164 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2118, i32 %2091) #8
  store <4 x i32> %2164, <4 x i32>* %2116, align 16
  %2165 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2122, i32 %2091) #8
  store <4 x i32> %2165, <4 x i32>* %2120, align 16
  %2166 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2126, i32 %2091) #8
  store <4 x i32> %2166, <4 x i32>* %2124, align 16
  %2167 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2130, i32 %2091) #8
  store <4 x i32> %2167, <4 x i32>* %2128, align 16
  %2168 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2134, i32 %2091) #8
  store <4 x i32> %2168, <4 x i32>* %2132, align 16
  %2169 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2138, i32 %2091) #8
  store <4 x i32> %2169, <4 x i32>* %2136, align 16
  %2170 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2142, i32 %2091) #8
  store <4 x i32> %2170, <4 x i32>* %2140, align 16
  %2171 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2146, i32 %2091) #8
  store <4 x i32> %2171, <4 x i32>* %2144, align 16
  %2172 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2150, i32 %2091) #8
  store <4 x i32> %2172, <4 x i32>* %2148, align 16
  %2173 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2154, i32 %2091) #8
  store <4 x i32> %2173, <4 x i32>* %2152, align 16
  %2174 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2158, i32 %2091) #8
  store <4 x i32> %2174, <4 x i32>* %2156, align 16
  %2175 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %2176 = bitcast <2 x i64>* %2175 to <4 x i32>*
  %2177 = load <4 x i32>, <4 x i32>* %2176, align 16
  %2178 = add <4 x i32> %2177, %2095
  %2179 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %2180 = bitcast <2 x i64>* %2179 to <4 x i32>*
  %2181 = load <4 x i32>, <4 x i32>* %2180, align 16
  %2182 = add <4 x i32> %2181, %2095
  %2183 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %2184 = bitcast <2 x i64>* %2183 to <4 x i32>*
  %2185 = load <4 x i32>, <4 x i32>* %2184, align 16
  %2186 = add <4 x i32> %2185, %2095
  %2187 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %2188 = bitcast <2 x i64>* %2187 to <4 x i32>*
  %2189 = load <4 x i32>, <4 x i32>* %2188, align 16
  %2190 = add <4 x i32> %2189, %2095
  %2191 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %2192 = bitcast <2 x i64>* %2191 to <4 x i32>*
  %2193 = load <4 x i32>, <4 x i32>* %2192, align 16
  %2194 = add <4 x i32> %2193, %2095
  %2195 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %2196 = bitcast <2 x i64>* %2195 to <4 x i32>*
  %2197 = load <4 x i32>, <4 x i32>* %2196, align 16
  %2198 = add <4 x i32> %2197, %2095
  %2199 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %2200 = bitcast <2 x i64>* %2199 to <4 x i32>*
  %2201 = load <4 x i32>, <4 x i32>* %2200, align 16
  %2202 = add <4 x i32> %2201, %2095
  %2203 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %2204 = bitcast <2 x i64>* %2203 to <4 x i32>*
  %2205 = load <4 x i32>, <4 x i32>* %2204, align 16
  %2206 = add <4 x i32> %2205, %2095
  %2207 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %2208 = bitcast <2 x i64>* %2207 to <4 x i32>*
  %2209 = load <4 x i32>, <4 x i32>* %2208, align 16
  %2210 = add <4 x i32> %2209, %2095
  %2211 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %2212 = bitcast <2 x i64>* %2211 to <4 x i32>*
  %2213 = load <4 x i32>, <4 x i32>* %2212, align 16
  %2214 = add <4 x i32> %2213, %2095
  %2215 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %2216 = bitcast <2 x i64>* %2215 to <4 x i32>*
  %2217 = load <4 x i32>, <4 x i32>* %2216, align 16
  %2218 = add <4 x i32> %2217, %2095
  %2219 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %2220 = bitcast <2 x i64>* %2219 to <4 x i32>*
  %2221 = load <4 x i32>, <4 x i32>* %2220, align 16
  %2222 = add <4 x i32> %2221, %2095
  %2223 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %2224 = bitcast <2 x i64>* %2223 to <4 x i32>*
  %2225 = load <4 x i32>, <4 x i32>* %2224, align 16
  %2226 = add <4 x i32> %2225, %2095
  %2227 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %2228 = bitcast <2 x i64>* %2227 to <4 x i32>*
  %2229 = load <4 x i32>, <4 x i32>* %2228, align 16
  %2230 = add <4 x i32> %2229, %2095
  %2231 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %2232 = bitcast <2 x i64>* %2231 to <4 x i32>*
  %2233 = load <4 x i32>, <4 x i32>* %2232, align 16
  %2234 = add <4 x i32> %2233, %2095
  %2235 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %2236 = bitcast <2 x i64>* %2235 to <4 x i32>*
  %2237 = load <4 x i32>, <4 x i32>* %2236, align 16
  %2238 = add <4 x i32> %2237, %2095
  %2239 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2178, i32 %2091) #8
  store <4 x i32> %2239, <4 x i32>* %2176, align 16
  %2240 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2182, i32 %2091) #8
  store <4 x i32> %2240, <4 x i32>* %2180, align 16
  %2241 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2186, i32 %2091) #8
  store <4 x i32> %2241, <4 x i32>* %2184, align 16
  %2242 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2190, i32 %2091) #8
  store <4 x i32> %2242, <4 x i32>* %2188, align 16
  %2243 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2194, i32 %2091) #8
  store <4 x i32> %2243, <4 x i32>* %2192, align 16
  %2244 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2198, i32 %2091) #8
  store <4 x i32> %2244, <4 x i32>* %2196, align 16
  %2245 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2202, i32 %2091) #8
  store <4 x i32> %2245, <4 x i32>* %2200, align 16
  %2246 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2206, i32 %2091) #8
  store <4 x i32> %2246, <4 x i32>* %2204, align 16
  %2247 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2210, i32 %2091) #8
  store <4 x i32> %2247, <4 x i32>* %2208, align 16
  %2248 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2214, i32 %2091) #8
  store <4 x i32> %2248, <4 x i32>* %2212, align 16
  %2249 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2218, i32 %2091) #8
  store <4 x i32> %2249, <4 x i32>* %2216, align 16
  %2250 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2222, i32 %2091) #8
  store <4 x i32> %2250, <4 x i32>* %2220, align 16
  %2251 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2226, i32 %2091) #8
  store <4 x i32> %2251, <4 x i32>* %2224, align 16
  %2252 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2230, i32 %2091) #8
  store <4 x i32> %2252, <4 x i32>* %2228, align 16
  %2253 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2234, i32 %2091) #8
  store <4 x i32> %2253, <4 x i32>* %2232, align 16
  %2254 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2238, i32 %2091) #8
  store <4 x i32> %2254, <4 x i32>* %2236, align 16
  %2255 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %2256 = bitcast <2 x i64>* %2255 to <4 x i32>*
  %2257 = load <4 x i32>, <4 x i32>* %2256, align 16
  %2258 = add <4 x i32> %2257, %2095
  %2259 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %2260 = bitcast <2 x i64>* %2259 to <4 x i32>*
  %2261 = load <4 x i32>, <4 x i32>* %2260, align 16
  %2262 = add <4 x i32> %2261, %2095
  %2263 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %2264 = bitcast <2 x i64>* %2263 to <4 x i32>*
  %2265 = load <4 x i32>, <4 x i32>* %2264, align 16
  %2266 = add <4 x i32> %2265, %2095
  %2267 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %2268 = bitcast <2 x i64>* %2267 to <4 x i32>*
  %2269 = load <4 x i32>, <4 x i32>* %2268, align 16
  %2270 = add <4 x i32> %2269, %2095
  %2271 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %2272 = bitcast <2 x i64>* %2271 to <4 x i32>*
  %2273 = load <4 x i32>, <4 x i32>* %2272, align 16
  %2274 = add <4 x i32> %2273, %2095
  %2275 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %2276 = bitcast <2 x i64>* %2275 to <4 x i32>*
  %2277 = load <4 x i32>, <4 x i32>* %2276, align 16
  %2278 = add <4 x i32> %2277, %2095
  %2279 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %2280 = bitcast <2 x i64>* %2279 to <4 x i32>*
  %2281 = load <4 x i32>, <4 x i32>* %2280, align 16
  %2282 = add <4 x i32> %2281, %2095
  %2283 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %2284 = bitcast <2 x i64>* %2283 to <4 x i32>*
  %2285 = load <4 x i32>, <4 x i32>* %2284, align 16
  %2286 = add <4 x i32> %2285, %2095
  %2287 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %2288 = bitcast <2 x i64>* %2287 to <4 x i32>*
  %2289 = load <4 x i32>, <4 x i32>* %2288, align 16
  %2290 = add <4 x i32> %2289, %2095
  %2291 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %2292 = bitcast <2 x i64>* %2291 to <4 x i32>*
  %2293 = load <4 x i32>, <4 x i32>* %2292, align 16
  %2294 = add <4 x i32> %2293, %2095
  %2295 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %2296 = bitcast <2 x i64>* %2295 to <4 x i32>*
  %2297 = load <4 x i32>, <4 x i32>* %2296, align 16
  %2298 = add <4 x i32> %2297, %2095
  %2299 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %2300 = bitcast <2 x i64>* %2299 to <4 x i32>*
  %2301 = load <4 x i32>, <4 x i32>* %2300, align 16
  %2302 = add <4 x i32> %2301, %2095
  %2303 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %2304 = bitcast <2 x i64>* %2303 to <4 x i32>*
  %2305 = load <4 x i32>, <4 x i32>* %2304, align 16
  %2306 = add <4 x i32> %2305, %2095
  %2307 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %2308 = bitcast <2 x i64>* %2307 to <4 x i32>*
  %2309 = load <4 x i32>, <4 x i32>* %2308, align 16
  %2310 = add <4 x i32> %2309, %2095
  %2311 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %2312 = bitcast <2 x i64>* %2311 to <4 x i32>*
  %2313 = load <4 x i32>, <4 x i32>* %2312, align 16
  %2314 = add <4 x i32> %2313, %2095
  %2315 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %2316 = bitcast <2 x i64>* %2315 to <4 x i32>*
  %2317 = load <4 x i32>, <4 x i32>* %2316, align 16
  %2318 = add <4 x i32> %2317, %2095
  %2319 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2258, i32 %2091) #8
  store <4 x i32> %2319, <4 x i32>* %2256, align 16
  %2320 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2262, i32 %2091) #8
  store <4 x i32> %2320, <4 x i32>* %2260, align 16
  %2321 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2266, i32 %2091) #8
  store <4 x i32> %2321, <4 x i32>* %2264, align 16
  %2322 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2270, i32 %2091) #8
  store <4 x i32> %2322, <4 x i32>* %2268, align 16
  %2323 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2274, i32 %2091) #8
  store <4 x i32> %2323, <4 x i32>* %2272, align 16
  %2324 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2278, i32 %2091) #8
  store <4 x i32> %2324, <4 x i32>* %2276, align 16
  %2325 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2282, i32 %2091) #8
  store <4 x i32> %2325, <4 x i32>* %2280, align 16
  %2326 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2286, i32 %2091) #8
  store <4 x i32> %2326, <4 x i32>* %2284, align 16
  %2327 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2290, i32 %2091) #8
  store <4 x i32> %2327, <4 x i32>* %2288, align 16
  %2328 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2294, i32 %2091) #8
  store <4 x i32> %2328, <4 x i32>* %2292, align 16
  %2329 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2298, i32 %2091) #8
  store <4 x i32> %2329, <4 x i32>* %2296, align 16
  %2330 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2302, i32 %2091) #8
  store <4 x i32> %2330, <4 x i32>* %2300, align 16
  %2331 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2306, i32 %2091) #8
  store <4 x i32> %2331, <4 x i32>* %2304, align 16
  %2332 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2310, i32 %2091) #8
  store <4 x i32> %2332, <4 x i32>* %2308, align 16
  %2333 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2314, i32 %2091) #8
  store <4 x i32> %2333, <4 x i32>* %2312, align 16
  %2334 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2318, i32 %2091) #8
  store <4 x i32> %2334, <4 x i32>* %2316, align 16
  %2335 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %2336 = bitcast <2 x i64>* %2335 to <4 x i32>*
  %2337 = load <4 x i32>, <4 x i32>* %2336, align 16
  %2338 = add <4 x i32> %2337, %2095
  %2339 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %2340 = bitcast <2 x i64>* %2339 to <4 x i32>*
  %2341 = load <4 x i32>, <4 x i32>* %2340, align 16
  %2342 = add <4 x i32> %2341, %2095
  %2343 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %2344 = bitcast <2 x i64>* %2343 to <4 x i32>*
  %2345 = load <4 x i32>, <4 x i32>* %2344, align 16
  %2346 = add <4 x i32> %2345, %2095
  %2347 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %2348 = bitcast <2 x i64>* %2347 to <4 x i32>*
  %2349 = load <4 x i32>, <4 x i32>* %2348, align 16
  %2350 = add <4 x i32> %2349, %2095
  %2351 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %2352 = bitcast <2 x i64>* %2351 to <4 x i32>*
  %2353 = load <4 x i32>, <4 x i32>* %2352, align 16
  %2354 = add <4 x i32> %2353, %2095
  %2355 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %2356 = bitcast <2 x i64>* %2355 to <4 x i32>*
  %2357 = load <4 x i32>, <4 x i32>* %2356, align 16
  %2358 = add <4 x i32> %2357, %2095
  %2359 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %2360 = bitcast <2 x i64>* %2359 to <4 x i32>*
  %2361 = load <4 x i32>, <4 x i32>* %2360, align 16
  %2362 = add <4 x i32> %2361, %2095
  %2363 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %2364 = bitcast <2 x i64>* %2363 to <4 x i32>*
  %2365 = load <4 x i32>, <4 x i32>* %2364, align 16
  %2366 = add <4 x i32> %2365, %2095
  %2367 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %2368 = bitcast <2 x i64>* %2367 to <4 x i32>*
  %2369 = load <4 x i32>, <4 x i32>* %2368, align 16
  %2370 = add <4 x i32> %2369, %2095
  %2371 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %2372 = bitcast <2 x i64>* %2371 to <4 x i32>*
  %2373 = load <4 x i32>, <4 x i32>* %2372, align 16
  %2374 = add <4 x i32> %2373, %2095
  %2375 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %2376 = bitcast <2 x i64>* %2375 to <4 x i32>*
  %2377 = load <4 x i32>, <4 x i32>* %2376, align 16
  %2378 = add <4 x i32> %2377, %2095
  %2379 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %2380 = bitcast <2 x i64>* %2379 to <4 x i32>*
  %2381 = load <4 x i32>, <4 x i32>* %2380, align 16
  %2382 = add <4 x i32> %2381, %2095
  %2383 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %2384 = bitcast <2 x i64>* %2383 to <4 x i32>*
  %2385 = load <4 x i32>, <4 x i32>* %2384, align 16
  %2386 = add <4 x i32> %2385, %2095
  %2387 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %2388 = bitcast <2 x i64>* %2387 to <4 x i32>*
  %2389 = load <4 x i32>, <4 x i32>* %2388, align 16
  %2390 = add <4 x i32> %2389, %2095
  %2391 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %2392 = bitcast <2 x i64>* %2391 to <4 x i32>*
  %2393 = load <4 x i32>, <4 x i32>* %2392, align 16
  %2394 = add <4 x i32> %2393, %2095
  %2395 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %2396 = bitcast <2 x i64>* %2395 to <4 x i32>*
  %2397 = load <4 x i32>, <4 x i32>* %2396, align 16
  %2398 = add <4 x i32> %2397, %2095
  %2399 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2338, i32 %2091) #8
  store <4 x i32> %2399, <4 x i32>* %2336, align 16
  %2400 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2342, i32 %2091) #8
  store <4 x i32> %2400, <4 x i32>* %2340, align 16
  %2401 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2346, i32 %2091) #8
  store <4 x i32> %2401, <4 x i32>* %2344, align 16
  %2402 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2350, i32 %2091) #8
  store <4 x i32> %2402, <4 x i32>* %2348, align 16
  %2403 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2354, i32 %2091) #8
  store <4 x i32> %2403, <4 x i32>* %2352, align 16
  %2404 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2358, i32 %2091) #8
  store <4 x i32> %2404, <4 x i32>* %2356, align 16
  %2405 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2362, i32 %2091) #8
  store <4 x i32> %2405, <4 x i32>* %2360, align 16
  %2406 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2366, i32 %2091) #8
  store <4 x i32> %2406, <4 x i32>* %2364, align 16
  %2407 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2370, i32 %2091) #8
  store <4 x i32> %2407, <4 x i32>* %2368, align 16
  %2408 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2374, i32 %2091) #8
  store <4 x i32> %2408, <4 x i32>* %2372, align 16
  %2409 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2378, i32 %2091) #8
  store <4 x i32> %2409, <4 x i32>* %2376, align 16
  %2410 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2382, i32 %2091) #8
  store <4 x i32> %2410, <4 x i32>* %2380, align 16
  %2411 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2386, i32 %2091) #8
  store <4 x i32> %2411, <4 x i32>* %2384, align 16
  %2412 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2390, i32 %2091) #8
  store <4 x i32> %2412, <4 x i32>* %2388, align 16
  %2413 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2394, i32 %2091) #8
  store <4 x i32> %2413, <4 x i32>* %2392, align 16
  %2414 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %2398, i32 %2091) #8
  store <4 x i32> %2414, <4 x i32>* %2396, align 16
  %2415 = shufflevector <4 x i32> %2159, <4 x i32> %2163, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2416 = bitcast <4 x i32> %2415 to <2 x i64>
  %2417 = shufflevector <4 x i32> %2159, <4 x i32> %2163, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2418 = bitcast <4 x i32> %2417 to <2 x i64>
  %2419 = shufflevector <4 x i32> %2167, <4 x i32> %2171, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2420 = bitcast <4 x i32> %2419 to <2 x i64>
  %2421 = shufflevector <4 x i32> %2167, <4 x i32> %2171, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2422 = bitcast <4 x i32> %2421 to <2 x i64>
  %2423 = shufflevector <2 x i64> %2416, <2 x i64> %2420, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2423, <2 x i64>* %2082, align 16
  %2424 = shufflevector <2 x i64> %2416, <2 x i64> %2420, <2 x i32> <i32 1, i32 3>
  %2425 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %2424, <2 x i64>* %2425, align 16
  %2426 = shufflevector <2 x i64> %2418, <2 x i64> %2422, <2 x i32> <i32 0, i32 2>
  %2427 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %2426, <2 x i64>* %2427, align 16
  %2428 = shufflevector <2 x i64> %2418, <2 x i64> %2422, <2 x i32> <i32 1, i32 3>
  %2429 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %2428, <2 x i64>* %2429, align 16
  %2430 = shufflevector <4 x i32> %2160, <4 x i32> %2164, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2431 = bitcast <4 x i32> %2430 to <2 x i64>
  %2432 = shufflevector <4 x i32> %2160, <4 x i32> %2164, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2433 = bitcast <4 x i32> %2432 to <2 x i64>
  %2434 = shufflevector <4 x i32> %2168, <4 x i32> %2172, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2435 = bitcast <4 x i32> %2434 to <2 x i64>
  %2436 = shufflevector <4 x i32> %2168, <4 x i32> %2172, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2437 = bitcast <4 x i32> %2436 to <2 x i64>
  %2438 = shufflevector <2 x i64> %2431, <2 x i64> %2435, <2 x i32> <i32 0, i32 2>
  %2439 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %2438, <2 x i64>* %2439, align 16
  %2440 = shufflevector <2 x i64> %2431, <2 x i64> %2435, <2 x i32> <i32 1, i32 3>
  %2441 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %2440, <2 x i64>* %2441, align 16
  %2442 = shufflevector <2 x i64> %2433, <2 x i64> %2437, <2 x i32> <i32 0, i32 2>
  %2443 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %2442, <2 x i64>* %2443, align 16
  %2444 = shufflevector <2 x i64> %2433, <2 x i64> %2437, <2 x i32> <i32 1, i32 3>
  %2445 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %2444, <2 x i64>* %2445, align 16
  %2446 = load <4 x i32>, <4 x i32>* %2192, align 16
  %2447 = shufflevector <4 x i32> %2239, <4 x i32> %2446, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2448 = bitcast <4 x i32> %2447 to <2 x i64>
  %2449 = shufflevector <4 x i32> %2239, <4 x i32> %2446, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2450 = bitcast <4 x i32> %2449 to <2 x i64>
  %2451 = load <4 x i32>, <4 x i32>* %2208, align 16
  %2452 = load <4 x i32>, <4 x i32>* %2224, align 16
  %2453 = shufflevector <4 x i32> %2451, <4 x i32> %2452, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2454 = bitcast <4 x i32> %2453 to <2 x i64>
  %2455 = shufflevector <4 x i32> %2451, <4 x i32> %2452, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2456 = bitcast <4 x i32> %2455 to <2 x i64>
  %2457 = shufflevector <2 x i64> %2448, <2 x i64> %2454, <2 x i32> <i32 0, i32 2>
  %2458 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %2457, <2 x i64>* %2458, align 16
  %2459 = shufflevector <2 x i64> %2448, <2 x i64> %2454, <2 x i32> <i32 1, i32 3>
  %2460 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %2459, <2 x i64>* %2460, align 16
  %2461 = shufflevector <2 x i64> %2450, <2 x i64> %2456, <2 x i32> <i32 0, i32 2>
  %2462 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %2461, <2 x i64>* %2462, align 16
  %2463 = shufflevector <2 x i64> %2450, <2 x i64> %2456, <2 x i32> <i32 1, i32 3>
  %2464 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %2463, <2 x i64>* %2464, align 16
  %2465 = load <4 x i32>, <4 x i32>* %2180, align 16
  %2466 = load <4 x i32>, <4 x i32>* %2196, align 16
  %2467 = shufflevector <4 x i32> %2465, <4 x i32> %2466, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2468 = bitcast <4 x i32> %2467 to <2 x i64>
  %2469 = shufflevector <4 x i32> %2465, <4 x i32> %2466, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2470 = bitcast <4 x i32> %2469 to <2 x i64>
  %2471 = load <4 x i32>, <4 x i32>* %2212, align 16
  %2472 = load <4 x i32>, <4 x i32>* %2228, align 16
  %2473 = shufflevector <4 x i32> %2471, <4 x i32> %2472, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2474 = bitcast <4 x i32> %2473 to <2 x i64>
  %2475 = shufflevector <4 x i32> %2471, <4 x i32> %2472, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2476 = bitcast <4 x i32> %2475 to <2 x i64>
  %2477 = shufflevector <2 x i64> %2468, <2 x i64> %2474, <2 x i32> <i32 0, i32 2>
  %2478 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %2477, <2 x i64>* %2478, align 16
  %2479 = shufflevector <2 x i64> %2468, <2 x i64> %2474, <2 x i32> <i32 1, i32 3>
  %2480 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %2479, <2 x i64>* %2480, align 16
  %2481 = shufflevector <2 x i64> %2470, <2 x i64> %2476, <2 x i32> <i32 0, i32 2>
  %2482 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %2481, <2 x i64>* %2482, align 16
  %2483 = shufflevector <2 x i64> %2470, <2 x i64> %2476, <2 x i32> <i32 1, i32 3>
  %2484 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %2483, <2 x i64>* %2484, align 16
  %2485 = shufflevector <4 x i32> %2161, <4 x i32> %2165, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2486 = bitcast <4 x i32> %2485 to <2 x i64>
  %2487 = shufflevector <4 x i32> %2161, <4 x i32> %2165, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2488 = bitcast <4 x i32> %2487 to <2 x i64>
  %2489 = shufflevector <4 x i32> %2169, <4 x i32> %2173, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2490 = bitcast <4 x i32> %2489 to <2 x i64>
  %2491 = shufflevector <4 x i32> %2169, <4 x i32> %2173, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2492 = bitcast <4 x i32> %2491 to <2 x i64>
  %2493 = shufflevector <2 x i64> %2486, <2 x i64> %2490, <2 x i32> <i32 0, i32 2>
  %2494 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %2493, <2 x i64>* %2494, align 16
  %2495 = shufflevector <2 x i64> %2486, <2 x i64> %2490, <2 x i32> <i32 1, i32 3>
  %2496 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %2495, <2 x i64>* %2496, align 16
  %2497 = shufflevector <2 x i64> %2488, <2 x i64> %2492, <2 x i32> <i32 0, i32 2>
  %2498 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %2497, <2 x i64>* %2498, align 16
  %2499 = shufflevector <2 x i64> %2488, <2 x i64> %2492, <2 x i32> <i32 1, i32 3>
  %2500 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %2499, <2 x i64>* %2500, align 16
  %2501 = shufflevector <4 x i32> %2162, <4 x i32> %2166, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2502 = bitcast <4 x i32> %2501 to <2 x i64>
  %2503 = shufflevector <4 x i32> %2162, <4 x i32> %2166, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2504 = bitcast <4 x i32> %2503 to <2 x i64>
  %2505 = shufflevector <4 x i32> %2170, <4 x i32> %2174, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2506 = bitcast <4 x i32> %2505 to <2 x i64>
  %2507 = shufflevector <4 x i32> %2170, <4 x i32> %2174, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2508 = bitcast <4 x i32> %2507 to <2 x i64>
  %2509 = shufflevector <2 x i64> %2502, <2 x i64> %2506, <2 x i32> <i32 0, i32 2>
  %2510 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %2509, <2 x i64>* %2510, align 16
  %2511 = shufflevector <2 x i64> %2502, <2 x i64> %2506, <2 x i32> <i32 1, i32 3>
  %2512 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %2511, <2 x i64>* %2512, align 16
  %2513 = shufflevector <2 x i64> %2504, <2 x i64> %2508, <2 x i32> <i32 0, i32 2>
  %2514 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %2513, <2 x i64>* %2514, align 16
  %2515 = shufflevector <2 x i64> %2504, <2 x i64> %2508, <2 x i32> <i32 1, i32 3>
  %2516 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %2515, <2 x i64>* %2516, align 16
  %2517 = load <4 x i32>, <4 x i32>* %2184, align 16
  %2518 = load <4 x i32>, <4 x i32>* %2200, align 16
  %2519 = shufflevector <4 x i32> %2517, <4 x i32> %2518, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2520 = bitcast <4 x i32> %2519 to <2 x i64>
  %2521 = shufflevector <4 x i32> %2517, <4 x i32> %2518, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2522 = bitcast <4 x i32> %2521 to <2 x i64>
  %2523 = load <4 x i32>, <4 x i32>* %2216, align 16
  %2524 = load <4 x i32>, <4 x i32>* %2232, align 16
  %2525 = shufflevector <4 x i32> %2523, <4 x i32> %2524, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2526 = bitcast <4 x i32> %2525 to <2 x i64>
  %2527 = shufflevector <4 x i32> %2523, <4 x i32> %2524, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2528 = bitcast <4 x i32> %2527 to <2 x i64>
  %2529 = shufflevector <2 x i64> %2520, <2 x i64> %2526, <2 x i32> <i32 0, i32 2>
  %2530 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %2529, <2 x i64>* %2530, align 16
  %2531 = shufflevector <2 x i64> %2520, <2 x i64> %2526, <2 x i32> <i32 1, i32 3>
  %2532 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %2531, <2 x i64>* %2532, align 16
  %2533 = shufflevector <2 x i64> %2522, <2 x i64> %2528, <2 x i32> <i32 0, i32 2>
  %2534 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %2533, <2 x i64>* %2534, align 16
  %2535 = shufflevector <2 x i64> %2522, <2 x i64> %2528, <2 x i32> <i32 1, i32 3>
  %2536 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %2535, <2 x i64>* %2536, align 16
  %2537 = load <4 x i32>, <4 x i32>* %2188, align 16
  %2538 = load <4 x i32>, <4 x i32>* %2204, align 16
  %2539 = shufflevector <4 x i32> %2537, <4 x i32> %2538, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2540 = bitcast <4 x i32> %2539 to <2 x i64>
  %2541 = shufflevector <4 x i32> %2537, <4 x i32> %2538, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2542 = bitcast <4 x i32> %2541 to <2 x i64>
  %2543 = load <4 x i32>, <4 x i32>* %2220, align 16
  %2544 = load <4 x i32>, <4 x i32>* %2236, align 16
  %2545 = shufflevector <4 x i32> %2543, <4 x i32> %2544, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2546 = bitcast <4 x i32> %2545 to <2 x i64>
  %2547 = shufflevector <4 x i32> %2543, <4 x i32> %2544, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2548 = bitcast <4 x i32> %2547 to <2 x i64>
  %2549 = shufflevector <2 x i64> %2540, <2 x i64> %2546, <2 x i32> <i32 0, i32 2>
  %2550 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %2549, <2 x i64>* %2550, align 16
  %2551 = shufflevector <2 x i64> %2540, <2 x i64> %2546, <2 x i32> <i32 1, i32 3>
  %2552 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %2551, <2 x i64>* %2552, align 16
  %2553 = shufflevector <2 x i64> %2542, <2 x i64> %2548, <2 x i32> <i32 0, i32 2>
  %2554 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %2553, <2 x i64>* %2554, align 16
  %2555 = shufflevector <2 x i64> %2542, <2 x i64> %2548, <2 x i32> <i32 1, i32 3>
  %2556 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %2555, <2 x i64>* %2556, align 16
  %2557 = load <4 x i32>, <4 x i32>* %2272, align 16
  %2558 = shufflevector <4 x i32> %2319, <4 x i32> %2557, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2559 = bitcast <4 x i32> %2558 to <2 x i64>
  %2560 = shufflevector <4 x i32> %2319, <4 x i32> %2557, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2561 = bitcast <4 x i32> %2560 to <2 x i64>
  %2562 = load <4 x i32>, <4 x i32>* %2288, align 16
  %2563 = load <4 x i32>, <4 x i32>* %2304, align 16
  %2564 = shufflevector <4 x i32> %2562, <4 x i32> %2563, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2565 = bitcast <4 x i32> %2564 to <2 x i64>
  %2566 = shufflevector <4 x i32> %2562, <4 x i32> %2563, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2567 = bitcast <4 x i32> %2566 to <2 x i64>
  %2568 = shufflevector <2 x i64> %2559, <2 x i64> %2565, <2 x i32> <i32 0, i32 2>
  %2569 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %2568, <2 x i64>* %2569, align 16
  %2570 = shufflevector <2 x i64> %2559, <2 x i64> %2565, <2 x i32> <i32 1, i32 3>
  %2571 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %2570, <2 x i64>* %2571, align 16
  %2572 = shufflevector <2 x i64> %2561, <2 x i64> %2567, <2 x i32> <i32 0, i32 2>
  %2573 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %2572, <2 x i64>* %2573, align 16
  %2574 = shufflevector <2 x i64> %2561, <2 x i64> %2567, <2 x i32> <i32 1, i32 3>
  %2575 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %2574, <2 x i64>* %2575, align 16
  %2576 = load <4 x i32>, <4 x i32>* %2260, align 16
  %2577 = load <4 x i32>, <4 x i32>* %2276, align 16
  %2578 = shufflevector <4 x i32> %2576, <4 x i32> %2577, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2579 = bitcast <4 x i32> %2578 to <2 x i64>
  %2580 = shufflevector <4 x i32> %2576, <4 x i32> %2577, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2581 = bitcast <4 x i32> %2580 to <2 x i64>
  %2582 = load <4 x i32>, <4 x i32>* %2292, align 16
  %2583 = load <4 x i32>, <4 x i32>* %2308, align 16
  %2584 = shufflevector <4 x i32> %2582, <4 x i32> %2583, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2585 = bitcast <4 x i32> %2584 to <2 x i64>
  %2586 = shufflevector <4 x i32> %2582, <4 x i32> %2583, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2587 = bitcast <4 x i32> %2586 to <2 x i64>
  %2588 = shufflevector <2 x i64> %2579, <2 x i64> %2585, <2 x i32> <i32 0, i32 2>
  %2589 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %2588, <2 x i64>* %2589, align 16
  %2590 = shufflevector <2 x i64> %2579, <2 x i64> %2585, <2 x i32> <i32 1, i32 3>
  %2591 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %2590, <2 x i64>* %2591, align 16
  %2592 = shufflevector <2 x i64> %2581, <2 x i64> %2587, <2 x i32> <i32 0, i32 2>
  %2593 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %2592, <2 x i64>* %2593, align 16
  %2594 = shufflevector <2 x i64> %2581, <2 x i64> %2587, <2 x i32> <i32 1, i32 3>
  %2595 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %2594, <2 x i64>* %2595, align 16
  %2596 = load <4 x i32>, <4 x i32>* %2352, align 16
  %2597 = shufflevector <4 x i32> %2399, <4 x i32> %2596, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2598 = bitcast <4 x i32> %2597 to <2 x i64>
  %2599 = shufflevector <4 x i32> %2399, <4 x i32> %2596, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2600 = bitcast <4 x i32> %2599 to <2 x i64>
  %2601 = load <4 x i32>, <4 x i32>* %2368, align 16
  %2602 = load <4 x i32>, <4 x i32>* %2384, align 16
  %2603 = shufflevector <4 x i32> %2601, <4 x i32> %2602, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2604 = bitcast <4 x i32> %2603 to <2 x i64>
  %2605 = shufflevector <4 x i32> %2601, <4 x i32> %2602, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2606 = bitcast <4 x i32> %2605 to <2 x i64>
  %2607 = shufflevector <2 x i64> %2598, <2 x i64> %2604, <2 x i32> <i32 0, i32 2>
  %2608 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %2607, <2 x i64>* %2608, align 16
  %2609 = shufflevector <2 x i64> %2598, <2 x i64> %2604, <2 x i32> <i32 1, i32 3>
  %2610 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %2609, <2 x i64>* %2610, align 16
  %2611 = shufflevector <2 x i64> %2600, <2 x i64> %2606, <2 x i32> <i32 0, i32 2>
  %2612 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %2611, <2 x i64>* %2612, align 16
  %2613 = shufflevector <2 x i64> %2600, <2 x i64> %2606, <2 x i32> <i32 1, i32 3>
  %2614 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %2613, <2 x i64>* %2614, align 16
  %2615 = load <4 x i32>, <4 x i32>* %2340, align 16
  %2616 = load <4 x i32>, <4 x i32>* %2356, align 16
  %2617 = shufflevector <4 x i32> %2615, <4 x i32> %2616, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2618 = bitcast <4 x i32> %2617 to <2 x i64>
  %2619 = shufflevector <4 x i32> %2615, <4 x i32> %2616, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2620 = bitcast <4 x i32> %2619 to <2 x i64>
  %2621 = load <4 x i32>, <4 x i32>* %2372, align 16
  %2622 = load <4 x i32>, <4 x i32>* %2388, align 16
  %2623 = shufflevector <4 x i32> %2621, <4 x i32> %2622, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2624 = bitcast <4 x i32> %2623 to <2 x i64>
  %2625 = shufflevector <4 x i32> %2621, <4 x i32> %2622, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2626 = bitcast <4 x i32> %2625 to <2 x i64>
  %2627 = shufflevector <2 x i64> %2618, <2 x i64> %2624, <2 x i32> <i32 0, i32 2>
  %2628 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %2627, <2 x i64>* %2628, align 16
  %2629 = shufflevector <2 x i64> %2618, <2 x i64> %2624, <2 x i32> <i32 1, i32 3>
  %2630 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %2629, <2 x i64>* %2630, align 16
  %2631 = shufflevector <2 x i64> %2620, <2 x i64> %2626, <2 x i32> <i32 0, i32 2>
  %2632 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %2631, <2 x i64>* %2632, align 16
  %2633 = shufflevector <2 x i64> %2620, <2 x i64> %2626, <2 x i32> <i32 1, i32 3>
  %2634 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %2633, <2 x i64>* %2634, align 16
  %2635 = load <4 x i32>, <4 x i32>* %2264, align 16
  %2636 = load <4 x i32>, <4 x i32>* %2280, align 16
  %2637 = shufflevector <4 x i32> %2635, <4 x i32> %2636, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2638 = bitcast <4 x i32> %2637 to <2 x i64>
  %2639 = shufflevector <4 x i32> %2635, <4 x i32> %2636, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2640 = bitcast <4 x i32> %2639 to <2 x i64>
  %2641 = load <4 x i32>, <4 x i32>* %2296, align 16
  %2642 = load <4 x i32>, <4 x i32>* %2312, align 16
  %2643 = shufflevector <4 x i32> %2641, <4 x i32> %2642, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2644 = bitcast <4 x i32> %2643 to <2 x i64>
  %2645 = shufflevector <4 x i32> %2641, <4 x i32> %2642, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2646 = bitcast <4 x i32> %2645 to <2 x i64>
  %2647 = shufflevector <2 x i64> %2638, <2 x i64> %2644, <2 x i32> <i32 0, i32 2>
  %2648 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %2647, <2 x i64>* %2648, align 16
  %2649 = shufflevector <2 x i64> %2638, <2 x i64> %2644, <2 x i32> <i32 1, i32 3>
  %2650 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %2649, <2 x i64>* %2650, align 16
  %2651 = shufflevector <2 x i64> %2640, <2 x i64> %2646, <2 x i32> <i32 0, i32 2>
  %2652 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %2651, <2 x i64>* %2652, align 16
  %2653 = shufflevector <2 x i64> %2640, <2 x i64> %2646, <2 x i32> <i32 1, i32 3>
  %2654 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %2653, <2 x i64>* %2654, align 16
  %2655 = load <4 x i32>, <4 x i32>* %2268, align 16
  %2656 = load <4 x i32>, <4 x i32>* %2284, align 16
  %2657 = shufflevector <4 x i32> %2655, <4 x i32> %2656, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2658 = bitcast <4 x i32> %2657 to <2 x i64>
  %2659 = shufflevector <4 x i32> %2655, <4 x i32> %2656, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2660 = bitcast <4 x i32> %2659 to <2 x i64>
  %2661 = load <4 x i32>, <4 x i32>* %2300, align 16
  %2662 = load <4 x i32>, <4 x i32>* %2316, align 16
  %2663 = shufflevector <4 x i32> %2661, <4 x i32> %2662, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2664 = bitcast <4 x i32> %2663 to <2 x i64>
  %2665 = shufflevector <4 x i32> %2661, <4 x i32> %2662, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2666 = bitcast <4 x i32> %2665 to <2 x i64>
  %2667 = shufflevector <2 x i64> %2658, <2 x i64> %2664, <2 x i32> <i32 0, i32 2>
  %2668 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %2667, <2 x i64>* %2668, align 16
  %2669 = shufflevector <2 x i64> %2658, <2 x i64> %2664, <2 x i32> <i32 1, i32 3>
  %2670 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %2669, <2 x i64>* %2670, align 16
  %2671 = shufflevector <2 x i64> %2660, <2 x i64> %2666, <2 x i32> <i32 0, i32 2>
  %2672 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %2671, <2 x i64>* %2672, align 16
  %2673 = shufflevector <2 x i64> %2660, <2 x i64> %2666, <2 x i32> <i32 1, i32 3>
  %2674 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %2673, <2 x i64>* %2674, align 16
  %2675 = load <4 x i32>, <4 x i32>* %2344, align 16
  %2676 = load <4 x i32>, <4 x i32>* %2360, align 16
  %2677 = shufflevector <4 x i32> %2675, <4 x i32> %2676, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2678 = bitcast <4 x i32> %2677 to <2 x i64>
  %2679 = shufflevector <4 x i32> %2675, <4 x i32> %2676, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2680 = bitcast <4 x i32> %2679 to <2 x i64>
  %2681 = load <4 x i32>, <4 x i32>* %2376, align 16
  %2682 = load <4 x i32>, <4 x i32>* %2392, align 16
  %2683 = shufflevector <4 x i32> %2681, <4 x i32> %2682, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2684 = bitcast <4 x i32> %2683 to <2 x i64>
  %2685 = shufflevector <4 x i32> %2681, <4 x i32> %2682, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2686 = bitcast <4 x i32> %2685 to <2 x i64>
  %2687 = shufflevector <2 x i64> %2678, <2 x i64> %2684, <2 x i32> <i32 0, i32 2>
  %2688 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %2687, <2 x i64>* %2688, align 16
  %2689 = shufflevector <2 x i64> %2678, <2 x i64> %2684, <2 x i32> <i32 1, i32 3>
  %2690 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %2689, <2 x i64>* %2690, align 16
  %2691 = shufflevector <2 x i64> %2680, <2 x i64> %2686, <2 x i32> <i32 0, i32 2>
  %2692 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %2691, <2 x i64>* %2692, align 16
  %2693 = shufflevector <2 x i64> %2680, <2 x i64> %2686, <2 x i32> <i32 1, i32 3>
  %2694 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %2693, <2 x i64>* %2694, align 16
  %2695 = load <4 x i32>, <4 x i32>* %2348, align 16
  %2696 = load <4 x i32>, <4 x i32>* %2364, align 16
  %2697 = shufflevector <4 x i32> %2695, <4 x i32> %2696, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2698 = bitcast <4 x i32> %2697 to <2 x i64>
  %2699 = shufflevector <4 x i32> %2695, <4 x i32> %2696, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2700 = bitcast <4 x i32> %2699 to <2 x i64>
  %2701 = load <4 x i32>, <4 x i32>* %2380, align 16
  %2702 = load <4 x i32>, <4 x i32>* %2396, align 16
  %2703 = shufflevector <4 x i32> %2701, <4 x i32> %2702, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2704 = bitcast <4 x i32> %2703 to <2 x i64>
  %2705 = shufflevector <4 x i32> %2701, <4 x i32> %2702, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2706 = bitcast <4 x i32> %2705 to <2 x i64>
  %2707 = shufflevector <2 x i64> %2698, <2 x i64> %2704, <2 x i32> <i32 0, i32 2>
  %2708 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %2707, <2 x i64>* %2708, align 16
  %2709 = shufflevector <2 x i64> %2698, <2 x i64> %2704, <2 x i32> <i32 1, i32 3>
  %2710 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %2709, <2 x i64>* %2710, align 16
  %2711 = shufflevector <2 x i64> %2700, <2 x i64> %2706, <2 x i32> <i32 0, i32 2>
  %2712 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %2711, <2 x i64>* %2712, align 16
  %2713 = shufflevector <2 x i64> %2700, <2 x i64> %2706, <2 x i32> <i32 1, i32 3>
  %2714 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %2713, <2 x i64>* %2714, align 16
  %2715 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  %2716 = sext i8 %2715 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %2082, <2 x i64>* nonnull %2085, i32 %2716, i32 4)
  %2717 = load <4 x i32>, <4 x i32>* %2096, align 16
  %2718 = load <4 x i32>, <4 x i32>* %2112, align 16
  %2719 = shufflevector <4 x i32> %2717, <4 x i32> %2718, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2720 = bitcast <4 x i32> %2719 to <2 x i64>
  %2721 = shufflevector <4 x i32> %2717, <4 x i32> %2718, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2722 = bitcast <4 x i32> %2721 to <2 x i64>
  %2723 = load <4 x i32>, <4 x i32>* %2128, align 16
  %2724 = load <4 x i32>, <4 x i32>* %2144, align 16
  %2725 = shufflevector <4 x i32> %2723, <4 x i32> %2724, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2726 = bitcast <4 x i32> %2725 to <2 x i64>
  %2727 = shufflevector <4 x i32> %2723, <4 x i32> %2724, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2728 = bitcast <4 x i32> %2727 to <2 x i64>
  %2729 = shufflevector <2 x i64> %2720, <2 x i64> %2726, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2729, <2 x i64>* %2082, align 16
  %2730 = shufflevector <2 x i64> %2720, <2 x i64> %2726, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2730, <2 x i64>* %2425, align 16
  %2731 = shufflevector <2 x i64> %2722, <2 x i64> %2728, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2731, <2 x i64>* %2427, align 16
  %2732 = shufflevector <2 x i64> %2722, <2 x i64> %2728, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2732, <2 x i64>* %2429, align 16
  %2733 = load <4 x i32>, <4 x i32>* %2100, align 16
  %2734 = load <4 x i32>, <4 x i32>* %2116, align 16
  %2735 = shufflevector <4 x i32> %2733, <4 x i32> %2734, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2736 = bitcast <4 x i32> %2735 to <2 x i64>
  %2737 = shufflevector <4 x i32> %2733, <4 x i32> %2734, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2738 = bitcast <4 x i32> %2737 to <2 x i64>
  %2739 = load <4 x i32>, <4 x i32>* %2132, align 16
  %2740 = load <4 x i32>, <4 x i32>* %2148, align 16
  %2741 = shufflevector <4 x i32> %2739, <4 x i32> %2740, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2742 = bitcast <4 x i32> %2741 to <2 x i64>
  %2743 = shufflevector <4 x i32> %2739, <4 x i32> %2740, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2744 = bitcast <4 x i32> %2743 to <2 x i64>
  %2745 = shufflevector <2 x i64> %2736, <2 x i64> %2742, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2745, <2 x i64>* %2439, align 16
  %2746 = shufflevector <2 x i64> %2736, <2 x i64> %2742, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2746, <2 x i64>* %2441, align 16
  %2747 = shufflevector <2 x i64> %2738, <2 x i64> %2744, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2747, <2 x i64>* %2443, align 16
  %2748 = shufflevector <2 x i64> %2738, <2 x i64> %2744, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2748, <2 x i64>* %2445, align 16
  %2749 = load <4 x i32>, <4 x i32>* %2176, align 16
  %2750 = load <4 x i32>, <4 x i32>* %2192, align 16
  %2751 = shufflevector <4 x i32> %2749, <4 x i32> %2750, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2752 = bitcast <4 x i32> %2751 to <2 x i64>
  %2753 = shufflevector <4 x i32> %2749, <4 x i32> %2750, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2754 = bitcast <4 x i32> %2753 to <2 x i64>
  %2755 = load <4 x i32>, <4 x i32>* %2208, align 16
  %2756 = load <4 x i32>, <4 x i32>* %2224, align 16
  %2757 = shufflevector <4 x i32> %2755, <4 x i32> %2756, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2758 = bitcast <4 x i32> %2757 to <2 x i64>
  %2759 = shufflevector <4 x i32> %2755, <4 x i32> %2756, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2760 = bitcast <4 x i32> %2759 to <2 x i64>
  %2761 = shufflevector <2 x i64> %2752, <2 x i64> %2758, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2761, <2 x i64>* %2458, align 16
  %2762 = shufflevector <2 x i64> %2752, <2 x i64> %2758, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2762, <2 x i64>* %2460, align 16
  %2763 = shufflevector <2 x i64> %2754, <2 x i64> %2760, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2763, <2 x i64>* %2462, align 16
  %2764 = shufflevector <2 x i64> %2754, <2 x i64> %2760, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2764, <2 x i64>* %2464, align 16
  %2765 = load <4 x i32>, <4 x i32>* %2180, align 16
  %2766 = load <4 x i32>, <4 x i32>* %2196, align 16
  %2767 = shufflevector <4 x i32> %2765, <4 x i32> %2766, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2768 = bitcast <4 x i32> %2767 to <2 x i64>
  %2769 = shufflevector <4 x i32> %2765, <4 x i32> %2766, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2770 = bitcast <4 x i32> %2769 to <2 x i64>
  %2771 = load <4 x i32>, <4 x i32>* %2212, align 16
  %2772 = load <4 x i32>, <4 x i32>* %2228, align 16
  %2773 = shufflevector <4 x i32> %2771, <4 x i32> %2772, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2774 = bitcast <4 x i32> %2773 to <2 x i64>
  %2775 = shufflevector <4 x i32> %2771, <4 x i32> %2772, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2776 = bitcast <4 x i32> %2775 to <2 x i64>
  %2777 = shufflevector <2 x i64> %2768, <2 x i64> %2774, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2777, <2 x i64>* %2478, align 16
  %2778 = shufflevector <2 x i64> %2768, <2 x i64> %2774, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2778, <2 x i64>* %2480, align 16
  %2779 = shufflevector <2 x i64> %2770, <2 x i64> %2776, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2779, <2 x i64>* %2482, align 16
  %2780 = shufflevector <2 x i64> %2770, <2 x i64> %2776, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2780, <2 x i64>* %2484, align 16
  %2781 = load <4 x i32>, <4 x i32>* %2104, align 16
  %2782 = load <4 x i32>, <4 x i32>* %2120, align 16
  %2783 = shufflevector <4 x i32> %2781, <4 x i32> %2782, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2784 = bitcast <4 x i32> %2783 to <2 x i64>
  %2785 = shufflevector <4 x i32> %2781, <4 x i32> %2782, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2786 = bitcast <4 x i32> %2785 to <2 x i64>
  %2787 = load <4 x i32>, <4 x i32>* %2136, align 16
  %2788 = load <4 x i32>, <4 x i32>* %2152, align 16
  %2789 = shufflevector <4 x i32> %2787, <4 x i32> %2788, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2790 = bitcast <4 x i32> %2789 to <2 x i64>
  %2791 = shufflevector <4 x i32> %2787, <4 x i32> %2788, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2792 = bitcast <4 x i32> %2791 to <2 x i64>
  %2793 = shufflevector <2 x i64> %2784, <2 x i64> %2790, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2793, <2 x i64>* %2494, align 16
  %2794 = shufflevector <2 x i64> %2784, <2 x i64> %2790, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2794, <2 x i64>* %2496, align 16
  %2795 = shufflevector <2 x i64> %2786, <2 x i64> %2792, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2795, <2 x i64>* %2498, align 16
  %2796 = shufflevector <2 x i64> %2786, <2 x i64> %2792, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2796, <2 x i64>* %2500, align 16
  %2797 = load <4 x i32>, <4 x i32>* %2108, align 16
  %2798 = load <4 x i32>, <4 x i32>* %2124, align 16
  %2799 = shufflevector <4 x i32> %2797, <4 x i32> %2798, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2800 = bitcast <4 x i32> %2799 to <2 x i64>
  %2801 = shufflevector <4 x i32> %2797, <4 x i32> %2798, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2802 = bitcast <4 x i32> %2801 to <2 x i64>
  %2803 = load <4 x i32>, <4 x i32>* %2140, align 16
  %2804 = load <4 x i32>, <4 x i32>* %2156, align 16
  %2805 = shufflevector <4 x i32> %2803, <4 x i32> %2804, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2806 = bitcast <4 x i32> %2805 to <2 x i64>
  %2807 = shufflevector <4 x i32> %2803, <4 x i32> %2804, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2808 = bitcast <4 x i32> %2807 to <2 x i64>
  %2809 = shufflevector <2 x i64> %2800, <2 x i64> %2806, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2809, <2 x i64>* %2510, align 16
  %2810 = shufflevector <2 x i64> %2800, <2 x i64> %2806, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2810, <2 x i64>* %2512, align 16
  %2811 = shufflevector <2 x i64> %2802, <2 x i64> %2808, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2811, <2 x i64>* %2514, align 16
  %2812 = shufflevector <2 x i64> %2802, <2 x i64> %2808, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2812, <2 x i64>* %2516, align 16
  %2813 = load <4 x i32>, <4 x i32>* %2184, align 16
  %2814 = load <4 x i32>, <4 x i32>* %2200, align 16
  %2815 = shufflevector <4 x i32> %2813, <4 x i32> %2814, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2816 = bitcast <4 x i32> %2815 to <2 x i64>
  %2817 = shufflevector <4 x i32> %2813, <4 x i32> %2814, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2818 = bitcast <4 x i32> %2817 to <2 x i64>
  %2819 = load <4 x i32>, <4 x i32>* %2216, align 16
  %2820 = load <4 x i32>, <4 x i32>* %2232, align 16
  %2821 = shufflevector <4 x i32> %2819, <4 x i32> %2820, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2822 = bitcast <4 x i32> %2821 to <2 x i64>
  %2823 = shufflevector <4 x i32> %2819, <4 x i32> %2820, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2824 = bitcast <4 x i32> %2823 to <2 x i64>
  %2825 = shufflevector <2 x i64> %2816, <2 x i64> %2822, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2825, <2 x i64>* %2530, align 16
  %2826 = shufflevector <2 x i64> %2816, <2 x i64> %2822, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2826, <2 x i64>* %2532, align 16
  %2827 = shufflevector <2 x i64> %2818, <2 x i64> %2824, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2827, <2 x i64>* %2534, align 16
  %2828 = shufflevector <2 x i64> %2818, <2 x i64> %2824, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2828, <2 x i64>* %2536, align 16
  %2829 = load <4 x i32>, <4 x i32>* %2188, align 16
  %2830 = load <4 x i32>, <4 x i32>* %2204, align 16
  %2831 = shufflevector <4 x i32> %2829, <4 x i32> %2830, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2832 = bitcast <4 x i32> %2831 to <2 x i64>
  %2833 = shufflevector <4 x i32> %2829, <4 x i32> %2830, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2834 = bitcast <4 x i32> %2833 to <2 x i64>
  %2835 = load <4 x i32>, <4 x i32>* %2220, align 16
  %2836 = load <4 x i32>, <4 x i32>* %2236, align 16
  %2837 = shufflevector <4 x i32> %2835, <4 x i32> %2836, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2838 = bitcast <4 x i32> %2837 to <2 x i64>
  %2839 = shufflevector <4 x i32> %2835, <4 x i32> %2836, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2840 = bitcast <4 x i32> %2839 to <2 x i64>
  %2841 = shufflevector <2 x i64> %2832, <2 x i64> %2838, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2841, <2 x i64>* %2550, align 16
  %2842 = shufflevector <2 x i64> %2832, <2 x i64> %2838, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2842, <2 x i64>* %2552, align 16
  %2843 = shufflevector <2 x i64> %2834, <2 x i64> %2840, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2843, <2 x i64>* %2554, align 16
  %2844 = shufflevector <2 x i64> %2834, <2 x i64> %2840, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2844, <2 x i64>* %2556, align 16
  %2845 = load <4 x i32>, <4 x i32>* %2256, align 16
  %2846 = load <4 x i32>, <4 x i32>* %2272, align 16
  %2847 = shufflevector <4 x i32> %2845, <4 x i32> %2846, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2848 = bitcast <4 x i32> %2847 to <2 x i64>
  %2849 = shufflevector <4 x i32> %2845, <4 x i32> %2846, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2850 = bitcast <4 x i32> %2849 to <2 x i64>
  %2851 = load <4 x i32>, <4 x i32>* %2288, align 16
  %2852 = load <4 x i32>, <4 x i32>* %2304, align 16
  %2853 = shufflevector <4 x i32> %2851, <4 x i32> %2852, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2854 = bitcast <4 x i32> %2853 to <2 x i64>
  %2855 = shufflevector <4 x i32> %2851, <4 x i32> %2852, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2856 = bitcast <4 x i32> %2855 to <2 x i64>
  %2857 = shufflevector <2 x i64> %2848, <2 x i64> %2854, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2857, <2 x i64>* %2569, align 16
  %2858 = shufflevector <2 x i64> %2848, <2 x i64> %2854, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2858, <2 x i64>* %2571, align 16
  %2859 = shufflevector <2 x i64> %2850, <2 x i64> %2856, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2859, <2 x i64>* %2573, align 16
  %2860 = shufflevector <2 x i64> %2850, <2 x i64> %2856, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2860, <2 x i64>* %2575, align 16
  %2861 = load <4 x i32>, <4 x i32>* %2260, align 16
  %2862 = load <4 x i32>, <4 x i32>* %2276, align 16
  %2863 = shufflevector <4 x i32> %2861, <4 x i32> %2862, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2864 = bitcast <4 x i32> %2863 to <2 x i64>
  %2865 = shufflevector <4 x i32> %2861, <4 x i32> %2862, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2866 = bitcast <4 x i32> %2865 to <2 x i64>
  %2867 = load <4 x i32>, <4 x i32>* %2292, align 16
  %2868 = load <4 x i32>, <4 x i32>* %2308, align 16
  %2869 = shufflevector <4 x i32> %2867, <4 x i32> %2868, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2870 = bitcast <4 x i32> %2869 to <2 x i64>
  %2871 = shufflevector <4 x i32> %2867, <4 x i32> %2868, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2872 = bitcast <4 x i32> %2871 to <2 x i64>
  %2873 = shufflevector <2 x i64> %2864, <2 x i64> %2870, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2873, <2 x i64>* %2589, align 16
  %2874 = shufflevector <2 x i64> %2864, <2 x i64> %2870, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2874, <2 x i64>* %2591, align 16
  %2875 = shufflevector <2 x i64> %2866, <2 x i64> %2872, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2875, <2 x i64>* %2593, align 16
  %2876 = shufflevector <2 x i64> %2866, <2 x i64> %2872, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2876, <2 x i64>* %2595, align 16
  %2877 = load <4 x i32>, <4 x i32>* %2336, align 16
  %2878 = load <4 x i32>, <4 x i32>* %2352, align 16
  %2879 = shufflevector <4 x i32> %2877, <4 x i32> %2878, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2880 = bitcast <4 x i32> %2879 to <2 x i64>
  %2881 = shufflevector <4 x i32> %2877, <4 x i32> %2878, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2882 = bitcast <4 x i32> %2881 to <2 x i64>
  %2883 = load <4 x i32>, <4 x i32>* %2368, align 16
  %2884 = load <4 x i32>, <4 x i32>* %2384, align 16
  %2885 = shufflevector <4 x i32> %2883, <4 x i32> %2884, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2886 = bitcast <4 x i32> %2885 to <2 x i64>
  %2887 = shufflevector <4 x i32> %2883, <4 x i32> %2884, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2888 = bitcast <4 x i32> %2887 to <2 x i64>
  %2889 = shufflevector <2 x i64> %2880, <2 x i64> %2886, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2889, <2 x i64>* %2608, align 16
  %2890 = shufflevector <2 x i64> %2880, <2 x i64> %2886, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2890, <2 x i64>* %2610, align 16
  %2891 = shufflevector <2 x i64> %2882, <2 x i64> %2888, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2891, <2 x i64>* %2612, align 16
  %2892 = shufflevector <2 x i64> %2882, <2 x i64> %2888, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2892, <2 x i64>* %2614, align 16
  %2893 = load <4 x i32>, <4 x i32>* %2340, align 16
  %2894 = load <4 x i32>, <4 x i32>* %2356, align 16
  %2895 = shufflevector <4 x i32> %2893, <4 x i32> %2894, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2896 = bitcast <4 x i32> %2895 to <2 x i64>
  %2897 = shufflevector <4 x i32> %2893, <4 x i32> %2894, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2898 = bitcast <4 x i32> %2897 to <2 x i64>
  %2899 = load <4 x i32>, <4 x i32>* %2372, align 16
  %2900 = load <4 x i32>, <4 x i32>* %2388, align 16
  %2901 = shufflevector <4 x i32> %2899, <4 x i32> %2900, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2902 = bitcast <4 x i32> %2901 to <2 x i64>
  %2903 = shufflevector <4 x i32> %2899, <4 x i32> %2900, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2904 = bitcast <4 x i32> %2903 to <2 x i64>
  %2905 = shufflevector <2 x i64> %2896, <2 x i64> %2902, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2905, <2 x i64>* %2628, align 16
  %2906 = shufflevector <2 x i64> %2896, <2 x i64> %2902, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2906, <2 x i64>* %2630, align 16
  %2907 = shufflevector <2 x i64> %2898, <2 x i64> %2904, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2907, <2 x i64>* %2632, align 16
  %2908 = shufflevector <2 x i64> %2898, <2 x i64> %2904, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2908, <2 x i64>* %2634, align 16
  %2909 = load <4 x i32>, <4 x i32>* %2264, align 16
  %2910 = load <4 x i32>, <4 x i32>* %2280, align 16
  %2911 = shufflevector <4 x i32> %2909, <4 x i32> %2910, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2912 = bitcast <4 x i32> %2911 to <2 x i64>
  %2913 = shufflevector <4 x i32> %2909, <4 x i32> %2910, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2914 = bitcast <4 x i32> %2913 to <2 x i64>
  %2915 = load <4 x i32>, <4 x i32>* %2296, align 16
  %2916 = load <4 x i32>, <4 x i32>* %2312, align 16
  %2917 = shufflevector <4 x i32> %2915, <4 x i32> %2916, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2918 = bitcast <4 x i32> %2917 to <2 x i64>
  %2919 = shufflevector <4 x i32> %2915, <4 x i32> %2916, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2920 = bitcast <4 x i32> %2919 to <2 x i64>
  %2921 = shufflevector <2 x i64> %2912, <2 x i64> %2918, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2921, <2 x i64>* %2648, align 16
  %2922 = shufflevector <2 x i64> %2912, <2 x i64> %2918, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2922, <2 x i64>* %2650, align 16
  %2923 = shufflevector <2 x i64> %2914, <2 x i64> %2920, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2923, <2 x i64>* %2652, align 16
  %2924 = shufflevector <2 x i64> %2914, <2 x i64> %2920, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2924, <2 x i64>* %2654, align 16
  %2925 = load <4 x i32>, <4 x i32>* %2268, align 16
  %2926 = load <4 x i32>, <4 x i32>* %2284, align 16
  %2927 = shufflevector <4 x i32> %2925, <4 x i32> %2926, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2928 = bitcast <4 x i32> %2927 to <2 x i64>
  %2929 = shufflevector <4 x i32> %2925, <4 x i32> %2926, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2930 = bitcast <4 x i32> %2929 to <2 x i64>
  %2931 = load <4 x i32>, <4 x i32>* %2300, align 16
  %2932 = load <4 x i32>, <4 x i32>* %2316, align 16
  %2933 = shufflevector <4 x i32> %2931, <4 x i32> %2932, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2934 = bitcast <4 x i32> %2933 to <2 x i64>
  %2935 = shufflevector <4 x i32> %2931, <4 x i32> %2932, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2936 = bitcast <4 x i32> %2935 to <2 x i64>
  %2937 = shufflevector <2 x i64> %2928, <2 x i64> %2934, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2937, <2 x i64>* %2668, align 16
  %2938 = shufflevector <2 x i64> %2928, <2 x i64> %2934, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2938, <2 x i64>* %2670, align 16
  %2939 = shufflevector <2 x i64> %2930, <2 x i64> %2936, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2939, <2 x i64>* %2672, align 16
  %2940 = shufflevector <2 x i64> %2930, <2 x i64> %2936, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2940, <2 x i64>* %2674, align 16
  %2941 = load <4 x i32>, <4 x i32>* %2344, align 16
  %2942 = load <4 x i32>, <4 x i32>* %2360, align 16
  %2943 = shufflevector <4 x i32> %2941, <4 x i32> %2942, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2944 = bitcast <4 x i32> %2943 to <2 x i64>
  %2945 = shufflevector <4 x i32> %2941, <4 x i32> %2942, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2946 = bitcast <4 x i32> %2945 to <2 x i64>
  %2947 = load <4 x i32>, <4 x i32>* %2376, align 16
  %2948 = load <4 x i32>, <4 x i32>* %2392, align 16
  %2949 = shufflevector <4 x i32> %2947, <4 x i32> %2948, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2950 = bitcast <4 x i32> %2949 to <2 x i64>
  %2951 = shufflevector <4 x i32> %2947, <4 x i32> %2948, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2952 = bitcast <4 x i32> %2951 to <2 x i64>
  %2953 = shufflevector <2 x i64> %2944, <2 x i64> %2950, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2953, <2 x i64>* %2688, align 16
  %2954 = shufflevector <2 x i64> %2944, <2 x i64> %2950, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2954, <2 x i64>* %2690, align 16
  %2955 = shufflevector <2 x i64> %2946, <2 x i64> %2952, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2955, <2 x i64>* %2692, align 16
  %2956 = shufflevector <2 x i64> %2946, <2 x i64> %2952, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2956, <2 x i64>* %2694, align 16
  %2957 = load <4 x i32>, <4 x i32>* %2348, align 16
  %2958 = load <4 x i32>, <4 x i32>* %2364, align 16
  %2959 = shufflevector <4 x i32> %2957, <4 x i32> %2958, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2960 = bitcast <4 x i32> %2959 to <2 x i64>
  %2961 = shufflevector <4 x i32> %2957, <4 x i32> %2958, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2962 = bitcast <4 x i32> %2961 to <2 x i64>
  %2963 = load <4 x i32>, <4 x i32>* %2380, align 16
  %2964 = load <4 x i32>, <4 x i32>* %2396, align 16
  %2965 = shufflevector <4 x i32> %2963, <4 x i32> %2964, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2966 = bitcast <4 x i32> %2965 to <2 x i64>
  %2967 = shufflevector <4 x i32> %2963, <4 x i32> %2964, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2968 = bitcast <4 x i32> %2967 to <2 x i64>
  %2969 = shufflevector <2 x i64> %2960, <2 x i64> %2966, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2969, <2 x i64>* %2708, align 16
  %2970 = shufflevector <2 x i64> %2960, <2 x i64> %2966, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2970, <2 x i64>* %2710, align 16
  %2971 = shufflevector <2 x i64> %2962, <2 x i64> %2968, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %2971, <2 x i64>* %2712, align 16
  %2972 = shufflevector <2 x i64> %2962, <2 x i64> %2968, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %2972, <2 x i64>* %2714, align 16
  %2973 = bitcast i32* %1 to <2 x i64>*
  store <2 x i64> %2729, <2 x i64>* %2973, align 16
  %2974 = getelementptr inbounds i32, i32* %1, i64 4
  %2975 = bitcast i32* %2974 to <2 x i64>*
  store <2 x i64> %2761, <2 x i64>* %2975, align 16
  %2976 = getelementptr inbounds i32, i32* %1, i64 8
  %2977 = bitcast i32* %2976 to <2 x i64>*
  store <2 x i64> %2857, <2 x i64>* %2977, align 16
  %2978 = getelementptr inbounds i32, i32* %1, i64 12
  %2979 = bitcast i32* %2978 to <2 x i64>*
  store <2 x i64> %2889, <2 x i64>* %2979, align 16
  %2980 = getelementptr inbounds i32, i32* %1, i64 16
  %2981 = bitcast i32* %2980 to <2 x i64>*
  store <2 x i64> %2730, <2 x i64>* %2981, align 16
  %2982 = getelementptr inbounds i32, i32* %1, i64 20
  %2983 = bitcast i32* %2982 to <2 x i64>*
  store <2 x i64> %2762, <2 x i64>* %2983, align 16
  %2984 = getelementptr inbounds i32, i32* %1, i64 24
  %2985 = bitcast i32* %2984 to <2 x i64>*
  store <2 x i64> %2858, <2 x i64>* %2985, align 16
  %2986 = getelementptr inbounds i32, i32* %1, i64 28
  %2987 = bitcast i32* %2986 to <2 x i64>*
  store <2 x i64> %2890, <2 x i64>* %2987, align 16
  %2988 = getelementptr inbounds i32, i32* %1, i64 32
  %2989 = bitcast i32* %2988 to <2 x i64>*
  store <2 x i64> %2731, <2 x i64>* %2989, align 16
  %2990 = getelementptr inbounds i32, i32* %1, i64 36
  %2991 = bitcast i32* %2990 to <2 x i64>*
  store <2 x i64> %2763, <2 x i64>* %2991, align 16
  %2992 = getelementptr inbounds i32, i32* %1, i64 40
  %2993 = bitcast i32* %2992 to <2 x i64>*
  store <2 x i64> %2859, <2 x i64>* %2993, align 16
  %2994 = getelementptr inbounds i32, i32* %1, i64 44
  %2995 = bitcast i32* %2994 to <2 x i64>*
  store <2 x i64> %2891, <2 x i64>* %2995, align 16
  %2996 = getelementptr inbounds i32, i32* %1, i64 48
  %2997 = bitcast i32* %2996 to <2 x i64>*
  store <2 x i64> %2732, <2 x i64>* %2997, align 16
  %2998 = getelementptr inbounds i32, i32* %1, i64 52
  %2999 = bitcast i32* %2998 to <2 x i64>*
  store <2 x i64> %2764, <2 x i64>* %2999, align 16
  %3000 = getelementptr inbounds i32, i32* %1, i64 56
  %3001 = bitcast i32* %3000 to <2 x i64>*
  store <2 x i64> %2860, <2 x i64>* %3001, align 16
  %3002 = getelementptr inbounds i32, i32* %1, i64 60
  %3003 = bitcast i32* %3002 to <2 x i64>*
  store <2 x i64> %2892, <2 x i64>* %3003, align 16
  %3004 = getelementptr inbounds i32, i32* %1, i64 64
  %3005 = bitcast i32* %3004 to <2 x i64>*
  store <2 x i64> %2745, <2 x i64>* %3005, align 16
  %3006 = getelementptr inbounds i32, i32* %1, i64 68
  %3007 = bitcast i32* %3006 to <2 x i64>*
  %3008 = load <2 x i64>, <2 x i64>* %2478, align 16
  store <2 x i64> %3008, <2 x i64>* %3007, align 16
  %3009 = getelementptr inbounds i32, i32* %1, i64 72
  %3010 = bitcast i32* %3009 to <2 x i64>*
  %3011 = load <2 x i64>, <2 x i64>* %2589, align 16
  store <2 x i64> %3011, <2 x i64>* %3010, align 16
  %3012 = getelementptr inbounds i32, i32* %1, i64 76
  %3013 = bitcast i32* %3012 to <2 x i64>*
  %3014 = load <2 x i64>, <2 x i64>* %2628, align 16
  store <2 x i64> %3014, <2 x i64>* %3013, align 16
  %3015 = getelementptr inbounds i32, i32* %1, i64 80
  %3016 = bitcast i32* %3015 to <2 x i64>*
  %3017 = load <2 x i64>, <2 x i64>* %2441, align 16
  store <2 x i64> %3017, <2 x i64>* %3016, align 16
  %3018 = getelementptr inbounds i32, i32* %1, i64 84
  %3019 = bitcast i32* %3018 to <2 x i64>*
  %3020 = load <2 x i64>, <2 x i64>* %2480, align 16
  store <2 x i64> %3020, <2 x i64>* %3019, align 16
  %3021 = getelementptr inbounds i32, i32* %1, i64 88
  %3022 = bitcast i32* %3021 to <2 x i64>*
  %3023 = load <2 x i64>, <2 x i64>* %2591, align 16
  store <2 x i64> %3023, <2 x i64>* %3022, align 16
  %3024 = getelementptr inbounds i32, i32* %1, i64 92
  %3025 = bitcast i32* %3024 to <2 x i64>*
  %3026 = load <2 x i64>, <2 x i64>* %2630, align 16
  store <2 x i64> %3026, <2 x i64>* %3025, align 16
  %3027 = getelementptr inbounds i32, i32* %1, i64 96
  %3028 = bitcast i32* %3027 to <2 x i64>*
  %3029 = load <2 x i64>, <2 x i64>* %2443, align 16
  store <2 x i64> %3029, <2 x i64>* %3028, align 16
  %3030 = getelementptr inbounds i32, i32* %1, i64 100
  %3031 = bitcast i32* %3030 to <2 x i64>*
  %3032 = load <2 x i64>, <2 x i64>* %2482, align 16
  store <2 x i64> %3032, <2 x i64>* %3031, align 16
  %3033 = getelementptr inbounds i32, i32* %1, i64 104
  %3034 = bitcast i32* %3033 to <2 x i64>*
  %3035 = load <2 x i64>, <2 x i64>* %2593, align 16
  store <2 x i64> %3035, <2 x i64>* %3034, align 16
  %3036 = getelementptr inbounds i32, i32* %1, i64 108
  %3037 = bitcast i32* %3036 to <2 x i64>*
  %3038 = load <2 x i64>, <2 x i64>* %2632, align 16
  store <2 x i64> %3038, <2 x i64>* %3037, align 16
  %3039 = getelementptr inbounds i32, i32* %1, i64 112
  %3040 = bitcast i32* %3039 to <2 x i64>*
  %3041 = load <2 x i64>, <2 x i64>* %2445, align 16
  store <2 x i64> %3041, <2 x i64>* %3040, align 16
  %3042 = getelementptr inbounds i32, i32* %1, i64 116
  %3043 = bitcast i32* %3042 to <2 x i64>*
  %3044 = load <2 x i64>, <2 x i64>* %2484, align 16
  store <2 x i64> %3044, <2 x i64>* %3043, align 16
  %3045 = getelementptr inbounds i32, i32* %1, i64 120
  %3046 = bitcast i32* %3045 to <2 x i64>*
  %3047 = load <2 x i64>, <2 x i64>* %2595, align 16
  store <2 x i64> %3047, <2 x i64>* %3046, align 16
  %3048 = getelementptr inbounds i32, i32* %1, i64 124
  %3049 = bitcast i32* %3048 to <2 x i64>*
  %3050 = load <2 x i64>, <2 x i64>* %2634, align 16
  store <2 x i64> %3050, <2 x i64>* %3049, align 16
  %3051 = getelementptr inbounds i32, i32* %1, i64 128
  %3052 = bitcast i32* %3051 to <2 x i64>*
  store <2 x i64> %2793, <2 x i64>* %3052, align 16
  %3053 = getelementptr inbounds i32, i32* %1, i64 132
  %3054 = bitcast i32* %3053 to <2 x i64>*
  store <2 x i64> %2825, <2 x i64>* %3054, align 16
  %3055 = getelementptr inbounds i32, i32* %1, i64 136
  %3056 = bitcast i32* %3055 to <2 x i64>*
  store <2 x i64> %2921, <2 x i64>* %3056, align 16
  %3057 = getelementptr inbounds i32, i32* %1, i64 140
  %3058 = bitcast i32* %3057 to <2 x i64>*
  store <2 x i64> %2953, <2 x i64>* %3058, align 16
  %3059 = getelementptr inbounds i32, i32* %1, i64 144
  %3060 = bitcast i32* %3059 to <2 x i64>*
  store <2 x i64> %2794, <2 x i64>* %3060, align 16
  %3061 = getelementptr inbounds i32, i32* %1, i64 148
  %3062 = bitcast i32* %3061 to <2 x i64>*
  store <2 x i64> %2826, <2 x i64>* %3062, align 16
  %3063 = getelementptr inbounds i32, i32* %1, i64 152
  %3064 = bitcast i32* %3063 to <2 x i64>*
  store <2 x i64> %2922, <2 x i64>* %3064, align 16
  %3065 = getelementptr inbounds i32, i32* %1, i64 156
  %3066 = bitcast i32* %3065 to <2 x i64>*
  store <2 x i64> %2954, <2 x i64>* %3066, align 16
  %3067 = getelementptr inbounds i32, i32* %1, i64 160
  %3068 = bitcast i32* %3067 to <2 x i64>*
  store <2 x i64> %2795, <2 x i64>* %3068, align 16
  %3069 = getelementptr inbounds i32, i32* %1, i64 164
  %3070 = bitcast i32* %3069 to <2 x i64>*
  store <2 x i64> %2827, <2 x i64>* %3070, align 16
  %3071 = getelementptr inbounds i32, i32* %1, i64 168
  %3072 = bitcast i32* %3071 to <2 x i64>*
  store <2 x i64> %2923, <2 x i64>* %3072, align 16
  %3073 = getelementptr inbounds i32, i32* %1, i64 172
  %3074 = bitcast i32* %3073 to <2 x i64>*
  store <2 x i64> %2955, <2 x i64>* %3074, align 16
  %3075 = getelementptr inbounds i32, i32* %1, i64 176
  %3076 = bitcast i32* %3075 to <2 x i64>*
  store <2 x i64> %2796, <2 x i64>* %3076, align 16
  %3077 = getelementptr inbounds i32, i32* %1, i64 180
  %3078 = bitcast i32* %3077 to <2 x i64>*
  store <2 x i64> %2828, <2 x i64>* %3078, align 16
  %3079 = getelementptr inbounds i32, i32* %1, i64 184
  %3080 = bitcast i32* %3079 to <2 x i64>*
  store <2 x i64> %2924, <2 x i64>* %3080, align 16
  %3081 = getelementptr inbounds i32, i32* %1, i64 188
  %3082 = bitcast i32* %3081 to <2 x i64>*
  store <2 x i64> %2956, <2 x i64>* %3082, align 16
  %3083 = getelementptr inbounds i32, i32* %1, i64 192
  %3084 = bitcast i32* %3083 to <2 x i64>*
  store <2 x i64> %2809, <2 x i64>* %3084, align 16
  %3085 = getelementptr inbounds i32, i32* %1, i64 196
  %3086 = bitcast i32* %3085 to <2 x i64>*
  store <2 x i64> %2841, <2 x i64>* %3086, align 16
  %3087 = getelementptr inbounds i32, i32* %1, i64 200
  %3088 = bitcast i32* %3087 to <2 x i64>*
  store <2 x i64> %2937, <2 x i64>* %3088, align 16
  %3089 = getelementptr inbounds i32, i32* %1, i64 204
  %3090 = bitcast i32* %3089 to <2 x i64>*
  store <2 x i64> %2969, <2 x i64>* %3090, align 16
  %3091 = getelementptr inbounds i32, i32* %1, i64 208
  %3092 = bitcast i32* %3091 to <2 x i64>*
  store <2 x i64> %2810, <2 x i64>* %3092, align 16
  %3093 = getelementptr inbounds i32, i32* %1, i64 212
  %3094 = bitcast i32* %3093 to <2 x i64>*
  store <2 x i64> %2842, <2 x i64>* %3094, align 16
  %3095 = getelementptr inbounds i32, i32* %1, i64 216
  %3096 = bitcast i32* %3095 to <2 x i64>*
  store <2 x i64> %2938, <2 x i64>* %3096, align 16
  %3097 = getelementptr inbounds i32, i32* %1, i64 220
  %3098 = bitcast i32* %3097 to <2 x i64>*
  store <2 x i64> %2970, <2 x i64>* %3098, align 16
  %3099 = getelementptr inbounds i32, i32* %1, i64 224
  %3100 = bitcast i32* %3099 to <2 x i64>*
  store <2 x i64> %2811, <2 x i64>* %3100, align 16
  %3101 = getelementptr inbounds i32, i32* %1, i64 228
  %3102 = bitcast i32* %3101 to <2 x i64>*
  store <2 x i64> %2843, <2 x i64>* %3102, align 16
  %3103 = getelementptr inbounds i32, i32* %1, i64 232
  %3104 = bitcast i32* %3103 to <2 x i64>*
  store <2 x i64> %2939, <2 x i64>* %3104, align 16
  %3105 = getelementptr inbounds i32, i32* %1, i64 236
  %3106 = bitcast i32* %3105 to <2 x i64>*
  store <2 x i64> %2971, <2 x i64>* %3106, align 16
  %3107 = getelementptr inbounds i32, i32* %1, i64 240
  %3108 = bitcast i32* %3107 to <2 x i64>*
  %3109 = load <2 x i64>, <2 x i64>* %2516, align 16
  store <2 x i64> %3109, <2 x i64>* %3108, align 16
  %3110 = getelementptr inbounds i32, i32* %1, i64 244
  %3111 = bitcast i32* %3110 to <2 x i64>*
  store <2 x i64> %2844, <2 x i64>* %3111, align 16
  %3112 = getelementptr inbounds i32, i32* %1, i64 248
  %3113 = bitcast i32* %3112 to <2 x i64>*
  store <2 x i64> %2940, <2 x i64>* %3113, align 16
  %3114 = getelementptr inbounds i32, i32* %1, i64 252
  %3115 = bitcast i32* %3114 to <2 x i64>*
  store <2 x i64> %2972, <2 x i64>* %3115, align 16
  br label %17357

3116:                                             ; preds = %5
  %3117 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %3118 = load i8, i8* %10, align 1
  %3119 = sext i8 %3118 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %3117, i32 %2, i32 0, i32 0, i32 %3119)
  %3120 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %3121 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  %3122 = sext i8 %3121 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %3117, <2 x i64>* nonnull %3120, i32 %3122, i32 4)
  %3123 = getelementptr inbounds i8, i8* %10, i64 1
  %3124 = load i8, i8* %3123, align 1
  %3125 = sext i8 %3124 to i32
  %3126 = sub nsw i32 0, %3125
  %3127 = xor i32 %3125, -1
  %3128 = shl i32 1, %3127
  %3129 = insertelement <4 x i32> undef, i32 %3128, i32 0
  %3130 = shufflevector <4 x i32> %3129, <4 x i32> undef, <4 x i32> zeroinitializer
  %3131 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %3132 = load <4 x i32>, <4 x i32>* %3131, align 16
  %3133 = add <4 x i32> %3130, %3132
  %3134 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %3135 = bitcast <2 x i64>* %3134 to <4 x i32>*
  %3136 = load <4 x i32>, <4 x i32>* %3135, align 16
  %3137 = add <4 x i32> %3130, %3136
  %3138 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %3139 = bitcast <2 x i64>* %3138 to <4 x i32>*
  %3140 = load <4 x i32>, <4 x i32>* %3139, align 16
  %3141 = add <4 x i32> %3130, %3140
  %3142 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %3143 = bitcast <2 x i64>* %3142 to <4 x i32>*
  %3144 = load <4 x i32>, <4 x i32>* %3143, align 16
  %3145 = add <4 x i32> %3144, %3130
  %3146 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %3147 = bitcast <2 x i64>* %3146 to <4 x i32>*
  %3148 = load <4 x i32>, <4 x i32>* %3147, align 16
  %3149 = add <4 x i32> %3148, %3130
  %3150 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %3151 = bitcast <2 x i64>* %3150 to <4 x i32>*
  %3152 = load <4 x i32>, <4 x i32>* %3151, align 16
  %3153 = add <4 x i32> %3152, %3130
  %3154 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %3155 = bitcast <2 x i64>* %3154 to <4 x i32>*
  %3156 = load <4 x i32>, <4 x i32>* %3155, align 16
  %3157 = add <4 x i32> %3156, %3130
  %3158 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %3159 = bitcast <2 x i64>* %3158 to <4 x i32>*
  %3160 = load <4 x i32>, <4 x i32>* %3159, align 16
  %3161 = add <4 x i32> %3160, %3130
  %3162 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %3163 = bitcast <2 x i64>* %3162 to <4 x i32>*
  %3164 = load <4 x i32>, <4 x i32>* %3163, align 16
  %3165 = add <4 x i32> %3164, %3130
  %3166 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %3167 = bitcast <2 x i64>* %3166 to <4 x i32>*
  %3168 = load <4 x i32>, <4 x i32>* %3167, align 16
  %3169 = add <4 x i32> %3168, %3130
  %3170 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %3171 = bitcast <2 x i64>* %3170 to <4 x i32>*
  %3172 = load <4 x i32>, <4 x i32>* %3171, align 16
  %3173 = add <4 x i32> %3172, %3130
  %3174 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %3175 = bitcast <2 x i64>* %3174 to <4 x i32>*
  %3176 = load <4 x i32>, <4 x i32>* %3175, align 16
  %3177 = add <4 x i32> %3176, %3130
  %3178 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %3179 = bitcast <2 x i64>* %3178 to <4 x i32>*
  %3180 = load <4 x i32>, <4 x i32>* %3179, align 16
  %3181 = add <4 x i32> %3180, %3130
  %3182 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %3183 = bitcast <2 x i64>* %3182 to <4 x i32>*
  %3184 = load <4 x i32>, <4 x i32>* %3183, align 16
  %3185 = add <4 x i32> %3184, %3130
  %3186 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %3187 = bitcast <2 x i64>* %3186 to <4 x i32>*
  %3188 = load <4 x i32>, <4 x i32>* %3187, align 16
  %3189 = add <4 x i32> %3188, %3130
  %3190 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %3191 = bitcast <2 x i64>* %3190 to <4 x i32>*
  %3192 = load <4 x i32>, <4 x i32>* %3191, align 16
  %3193 = add <4 x i32> %3192, %3130
  %3194 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3133, i32 %3126) #8
  store <4 x i32> %3194, <4 x i32>* %3131, align 16
  %3195 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3137, i32 %3126) #8
  store <4 x i32> %3195, <4 x i32>* %3135, align 16
  %3196 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3141, i32 %3126) #8
  store <4 x i32> %3196, <4 x i32>* %3139, align 16
  %3197 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3145, i32 %3126) #8
  store <4 x i32> %3197, <4 x i32>* %3143, align 16
  %3198 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3149, i32 %3126) #8
  store <4 x i32> %3198, <4 x i32>* %3147, align 16
  %3199 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3153, i32 %3126) #8
  store <4 x i32> %3199, <4 x i32>* %3151, align 16
  %3200 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3157, i32 %3126) #8
  store <4 x i32> %3200, <4 x i32>* %3155, align 16
  %3201 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3161, i32 %3126) #8
  store <4 x i32> %3201, <4 x i32>* %3159, align 16
  %3202 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3165, i32 %3126) #8
  store <4 x i32> %3202, <4 x i32>* %3163, align 16
  %3203 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3169, i32 %3126) #8
  store <4 x i32> %3203, <4 x i32>* %3167, align 16
  %3204 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3173, i32 %3126) #8
  store <4 x i32> %3204, <4 x i32>* %3171, align 16
  %3205 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3177, i32 %3126) #8
  store <4 x i32> %3205, <4 x i32>* %3175, align 16
  %3206 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3181, i32 %3126) #8
  store <4 x i32> %3206, <4 x i32>* %3179, align 16
  %3207 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3185, i32 %3126) #8
  store <4 x i32> %3207, <4 x i32>* %3183, align 16
  %3208 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3189, i32 %3126) #8
  store <4 x i32> %3208, <4 x i32>* %3187, align 16
  %3209 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3193, i32 %3126) #8
  store <4 x i32> %3209, <4 x i32>* %3191, align 16
  %3210 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %3211 = bitcast <2 x i64>* %3210 to <4 x i32>*
  %3212 = load <4 x i32>, <4 x i32>* %3211, align 16
  %3213 = add <4 x i32> %3212, %3130
  %3214 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %3215 = bitcast <2 x i64>* %3214 to <4 x i32>*
  %3216 = load <4 x i32>, <4 x i32>* %3215, align 16
  %3217 = add <4 x i32> %3216, %3130
  %3218 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %3219 = bitcast <2 x i64>* %3218 to <4 x i32>*
  %3220 = load <4 x i32>, <4 x i32>* %3219, align 16
  %3221 = add <4 x i32> %3220, %3130
  %3222 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %3223 = bitcast <2 x i64>* %3222 to <4 x i32>*
  %3224 = load <4 x i32>, <4 x i32>* %3223, align 16
  %3225 = add <4 x i32> %3224, %3130
  %3226 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %3227 = bitcast <2 x i64>* %3226 to <4 x i32>*
  %3228 = load <4 x i32>, <4 x i32>* %3227, align 16
  %3229 = add <4 x i32> %3228, %3130
  %3230 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %3231 = bitcast <2 x i64>* %3230 to <4 x i32>*
  %3232 = load <4 x i32>, <4 x i32>* %3231, align 16
  %3233 = add <4 x i32> %3232, %3130
  %3234 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %3235 = bitcast <2 x i64>* %3234 to <4 x i32>*
  %3236 = load <4 x i32>, <4 x i32>* %3235, align 16
  %3237 = add <4 x i32> %3236, %3130
  %3238 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %3239 = bitcast <2 x i64>* %3238 to <4 x i32>*
  %3240 = load <4 x i32>, <4 x i32>* %3239, align 16
  %3241 = add <4 x i32> %3240, %3130
  %3242 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %3243 = bitcast <2 x i64>* %3242 to <4 x i32>*
  %3244 = load <4 x i32>, <4 x i32>* %3243, align 16
  %3245 = add <4 x i32> %3244, %3130
  %3246 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %3247 = bitcast <2 x i64>* %3246 to <4 x i32>*
  %3248 = load <4 x i32>, <4 x i32>* %3247, align 16
  %3249 = add <4 x i32> %3248, %3130
  %3250 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %3251 = bitcast <2 x i64>* %3250 to <4 x i32>*
  %3252 = load <4 x i32>, <4 x i32>* %3251, align 16
  %3253 = add <4 x i32> %3252, %3130
  %3254 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %3255 = bitcast <2 x i64>* %3254 to <4 x i32>*
  %3256 = load <4 x i32>, <4 x i32>* %3255, align 16
  %3257 = add <4 x i32> %3256, %3130
  %3258 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %3259 = bitcast <2 x i64>* %3258 to <4 x i32>*
  %3260 = load <4 x i32>, <4 x i32>* %3259, align 16
  %3261 = add <4 x i32> %3260, %3130
  %3262 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %3263 = bitcast <2 x i64>* %3262 to <4 x i32>*
  %3264 = load <4 x i32>, <4 x i32>* %3263, align 16
  %3265 = add <4 x i32> %3264, %3130
  %3266 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %3267 = bitcast <2 x i64>* %3266 to <4 x i32>*
  %3268 = load <4 x i32>, <4 x i32>* %3267, align 16
  %3269 = add <4 x i32> %3268, %3130
  %3270 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %3271 = bitcast <2 x i64>* %3270 to <4 x i32>*
  %3272 = load <4 x i32>, <4 x i32>* %3271, align 16
  %3273 = add <4 x i32> %3272, %3130
  %3274 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3213, i32 %3126) #8
  store <4 x i32> %3274, <4 x i32>* %3211, align 16
  %3275 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3217, i32 %3126) #8
  store <4 x i32> %3275, <4 x i32>* %3215, align 16
  %3276 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3221, i32 %3126) #8
  store <4 x i32> %3276, <4 x i32>* %3219, align 16
  %3277 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3225, i32 %3126) #8
  store <4 x i32> %3277, <4 x i32>* %3223, align 16
  %3278 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3229, i32 %3126) #8
  store <4 x i32> %3278, <4 x i32>* %3227, align 16
  %3279 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3233, i32 %3126) #8
  store <4 x i32> %3279, <4 x i32>* %3231, align 16
  %3280 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3237, i32 %3126) #8
  store <4 x i32> %3280, <4 x i32>* %3235, align 16
  %3281 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3241, i32 %3126) #8
  store <4 x i32> %3281, <4 x i32>* %3239, align 16
  %3282 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3245, i32 %3126) #8
  store <4 x i32> %3282, <4 x i32>* %3243, align 16
  %3283 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3249, i32 %3126) #8
  store <4 x i32> %3283, <4 x i32>* %3247, align 16
  %3284 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3253, i32 %3126) #8
  store <4 x i32> %3284, <4 x i32>* %3251, align 16
  %3285 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3257, i32 %3126) #8
  store <4 x i32> %3285, <4 x i32>* %3255, align 16
  %3286 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3261, i32 %3126) #8
  store <4 x i32> %3286, <4 x i32>* %3259, align 16
  %3287 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3265, i32 %3126) #8
  store <4 x i32> %3287, <4 x i32>* %3263, align 16
  %3288 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3269, i32 %3126) #8
  store <4 x i32> %3288, <4 x i32>* %3267, align 16
  %3289 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3273, i32 %3126) #8
  store <4 x i32> %3289, <4 x i32>* %3271, align 16
  %3290 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %3291 = bitcast <2 x i64>* %3290 to <4 x i32>*
  %3292 = load <4 x i32>, <4 x i32>* %3291, align 16
  %3293 = add <4 x i32> %3292, %3130
  %3294 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %3295 = bitcast <2 x i64>* %3294 to <4 x i32>*
  %3296 = load <4 x i32>, <4 x i32>* %3295, align 16
  %3297 = add <4 x i32> %3296, %3130
  %3298 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %3299 = bitcast <2 x i64>* %3298 to <4 x i32>*
  %3300 = load <4 x i32>, <4 x i32>* %3299, align 16
  %3301 = add <4 x i32> %3300, %3130
  %3302 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %3303 = bitcast <2 x i64>* %3302 to <4 x i32>*
  %3304 = load <4 x i32>, <4 x i32>* %3303, align 16
  %3305 = add <4 x i32> %3304, %3130
  %3306 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %3307 = bitcast <2 x i64>* %3306 to <4 x i32>*
  %3308 = load <4 x i32>, <4 x i32>* %3307, align 16
  %3309 = add <4 x i32> %3308, %3130
  %3310 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %3311 = bitcast <2 x i64>* %3310 to <4 x i32>*
  %3312 = load <4 x i32>, <4 x i32>* %3311, align 16
  %3313 = add <4 x i32> %3312, %3130
  %3314 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %3315 = bitcast <2 x i64>* %3314 to <4 x i32>*
  %3316 = load <4 x i32>, <4 x i32>* %3315, align 16
  %3317 = add <4 x i32> %3316, %3130
  %3318 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %3319 = bitcast <2 x i64>* %3318 to <4 x i32>*
  %3320 = load <4 x i32>, <4 x i32>* %3319, align 16
  %3321 = add <4 x i32> %3320, %3130
  %3322 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %3323 = bitcast <2 x i64>* %3322 to <4 x i32>*
  %3324 = load <4 x i32>, <4 x i32>* %3323, align 16
  %3325 = add <4 x i32> %3324, %3130
  %3326 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %3327 = bitcast <2 x i64>* %3326 to <4 x i32>*
  %3328 = load <4 x i32>, <4 x i32>* %3327, align 16
  %3329 = add <4 x i32> %3328, %3130
  %3330 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %3331 = bitcast <2 x i64>* %3330 to <4 x i32>*
  %3332 = load <4 x i32>, <4 x i32>* %3331, align 16
  %3333 = add <4 x i32> %3332, %3130
  %3334 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %3335 = bitcast <2 x i64>* %3334 to <4 x i32>*
  %3336 = load <4 x i32>, <4 x i32>* %3335, align 16
  %3337 = add <4 x i32> %3336, %3130
  %3338 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %3339 = bitcast <2 x i64>* %3338 to <4 x i32>*
  %3340 = load <4 x i32>, <4 x i32>* %3339, align 16
  %3341 = add <4 x i32> %3340, %3130
  %3342 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %3343 = bitcast <2 x i64>* %3342 to <4 x i32>*
  %3344 = load <4 x i32>, <4 x i32>* %3343, align 16
  %3345 = add <4 x i32> %3344, %3130
  %3346 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %3347 = bitcast <2 x i64>* %3346 to <4 x i32>*
  %3348 = load <4 x i32>, <4 x i32>* %3347, align 16
  %3349 = add <4 x i32> %3348, %3130
  %3350 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %3351 = bitcast <2 x i64>* %3350 to <4 x i32>*
  %3352 = load <4 x i32>, <4 x i32>* %3351, align 16
  %3353 = add <4 x i32> %3352, %3130
  %3354 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3293, i32 %3126) #8
  store <4 x i32> %3354, <4 x i32>* %3291, align 16
  %3355 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3297, i32 %3126) #8
  store <4 x i32> %3355, <4 x i32>* %3295, align 16
  %3356 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3301, i32 %3126) #8
  store <4 x i32> %3356, <4 x i32>* %3299, align 16
  %3357 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3305, i32 %3126) #8
  store <4 x i32> %3357, <4 x i32>* %3303, align 16
  %3358 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3309, i32 %3126) #8
  store <4 x i32> %3358, <4 x i32>* %3307, align 16
  %3359 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3313, i32 %3126) #8
  store <4 x i32> %3359, <4 x i32>* %3311, align 16
  %3360 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3317, i32 %3126) #8
  store <4 x i32> %3360, <4 x i32>* %3315, align 16
  %3361 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3321, i32 %3126) #8
  store <4 x i32> %3361, <4 x i32>* %3319, align 16
  %3362 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3325, i32 %3126) #8
  store <4 x i32> %3362, <4 x i32>* %3323, align 16
  %3363 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3329, i32 %3126) #8
  store <4 x i32> %3363, <4 x i32>* %3327, align 16
  %3364 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3333, i32 %3126) #8
  store <4 x i32> %3364, <4 x i32>* %3331, align 16
  %3365 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3337, i32 %3126) #8
  store <4 x i32> %3365, <4 x i32>* %3335, align 16
  %3366 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3341, i32 %3126) #8
  store <4 x i32> %3366, <4 x i32>* %3339, align 16
  %3367 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3345, i32 %3126) #8
  store <4 x i32> %3367, <4 x i32>* %3343, align 16
  %3368 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3349, i32 %3126) #8
  store <4 x i32> %3368, <4 x i32>* %3347, align 16
  %3369 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3353, i32 %3126) #8
  store <4 x i32> %3369, <4 x i32>* %3351, align 16
  %3370 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %3371 = bitcast <2 x i64>* %3370 to <4 x i32>*
  %3372 = load <4 x i32>, <4 x i32>* %3371, align 16
  %3373 = add <4 x i32> %3372, %3130
  %3374 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %3375 = bitcast <2 x i64>* %3374 to <4 x i32>*
  %3376 = load <4 x i32>, <4 x i32>* %3375, align 16
  %3377 = add <4 x i32> %3376, %3130
  %3378 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %3379 = bitcast <2 x i64>* %3378 to <4 x i32>*
  %3380 = load <4 x i32>, <4 x i32>* %3379, align 16
  %3381 = add <4 x i32> %3380, %3130
  %3382 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %3383 = bitcast <2 x i64>* %3382 to <4 x i32>*
  %3384 = load <4 x i32>, <4 x i32>* %3383, align 16
  %3385 = add <4 x i32> %3384, %3130
  %3386 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %3387 = bitcast <2 x i64>* %3386 to <4 x i32>*
  %3388 = load <4 x i32>, <4 x i32>* %3387, align 16
  %3389 = add <4 x i32> %3388, %3130
  %3390 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %3391 = bitcast <2 x i64>* %3390 to <4 x i32>*
  %3392 = load <4 x i32>, <4 x i32>* %3391, align 16
  %3393 = add <4 x i32> %3392, %3130
  %3394 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %3395 = bitcast <2 x i64>* %3394 to <4 x i32>*
  %3396 = load <4 x i32>, <4 x i32>* %3395, align 16
  %3397 = add <4 x i32> %3396, %3130
  %3398 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %3399 = bitcast <2 x i64>* %3398 to <4 x i32>*
  %3400 = load <4 x i32>, <4 x i32>* %3399, align 16
  %3401 = add <4 x i32> %3400, %3130
  %3402 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %3403 = bitcast <2 x i64>* %3402 to <4 x i32>*
  %3404 = load <4 x i32>, <4 x i32>* %3403, align 16
  %3405 = add <4 x i32> %3404, %3130
  %3406 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %3407 = bitcast <2 x i64>* %3406 to <4 x i32>*
  %3408 = load <4 x i32>, <4 x i32>* %3407, align 16
  %3409 = add <4 x i32> %3408, %3130
  %3410 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %3411 = bitcast <2 x i64>* %3410 to <4 x i32>*
  %3412 = load <4 x i32>, <4 x i32>* %3411, align 16
  %3413 = add <4 x i32> %3412, %3130
  %3414 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %3415 = bitcast <2 x i64>* %3414 to <4 x i32>*
  %3416 = load <4 x i32>, <4 x i32>* %3415, align 16
  %3417 = add <4 x i32> %3416, %3130
  %3418 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %3419 = bitcast <2 x i64>* %3418 to <4 x i32>*
  %3420 = load <4 x i32>, <4 x i32>* %3419, align 16
  %3421 = add <4 x i32> %3420, %3130
  %3422 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %3423 = bitcast <2 x i64>* %3422 to <4 x i32>*
  %3424 = load <4 x i32>, <4 x i32>* %3423, align 16
  %3425 = add <4 x i32> %3424, %3130
  %3426 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %3427 = bitcast <2 x i64>* %3426 to <4 x i32>*
  %3428 = load <4 x i32>, <4 x i32>* %3427, align 16
  %3429 = add <4 x i32> %3428, %3130
  %3430 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %3431 = bitcast <2 x i64>* %3430 to <4 x i32>*
  %3432 = load <4 x i32>, <4 x i32>* %3431, align 16
  %3433 = add <4 x i32> %3432, %3130
  %3434 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3373, i32 %3126) #8
  store <4 x i32> %3434, <4 x i32>* %3371, align 16
  %3435 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3377, i32 %3126) #8
  store <4 x i32> %3435, <4 x i32>* %3375, align 16
  %3436 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3381, i32 %3126) #8
  store <4 x i32> %3436, <4 x i32>* %3379, align 16
  %3437 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3385, i32 %3126) #8
  store <4 x i32> %3437, <4 x i32>* %3383, align 16
  %3438 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3389, i32 %3126) #8
  store <4 x i32> %3438, <4 x i32>* %3387, align 16
  %3439 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3393, i32 %3126) #8
  store <4 x i32> %3439, <4 x i32>* %3391, align 16
  %3440 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3397, i32 %3126) #8
  store <4 x i32> %3440, <4 x i32>* %3395, align 16
  %3441 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3401, i32 %3126) #8
  store <4 x i32> %3441, <4 x i32>* %3399, align 16
  %3442 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3405, i32 %3126) #8
  store <4 x i32> %3442, <4 x i32>* %3403, align 16
  %3443 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3409, i32 %3126) #8
  store <4 x i32> %3443, <4 x i32>* %3407, align 16
  %3444 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3413, i32 %3126) #8
  store <4 x i32> %3444, <4 x i32>* %3411, align 16
  %3445 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3417, i32 %3126) #8
  store <4 x i32> %3445, <4 x i32>* %3415, align 16
  %3446 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3421, i32 %3126) #8
  store <4 x i32> %3446, <4 x i32>* %3419, align 16
  %3447 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3425, i32 %3126) #8
  store <4 x i32> %3447, <4 x i32>* %3423, align 16
  %3448 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3429, i32 %3126) #8
  store <4 x i32> %3448, <4 x i32>* %3427, align 16
  %3449 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %3433, i32 %3126) #8
  store <4 x i32> %3449, <4 x i32>* %3431, align 16
  %3450 = shufflevector <4 x i32> %3194, <4 x i32> %3198, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3451 = bitcast <4 x i32> %3450 to <2 x i64>
  %3452 = shufflevector <4 x i32> %3194, <4 x i32> %3198, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3453 = bitcast <4 x i32> %3452 to <2 x i64>
  %3454 = shufflevector <4 x i32> %3202, <4 x i32> %3206, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3455 = bitcast <4 x i32> %3454 to <2 x i64>
  %3456 = shufflevector <4 x i32> %3202, <4 x i32> %3206, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3457 = bitcast <4 x i32> %3456 to <2 x i64>
  %3458 = shufflevector <2 x i64> %3451, <2 x i64> %3455, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3458, <2 x i64>* %3117, align 16
  %3459 = shufflevector <2 x i64> %3451, <2 x i64> %3455, <2 x i32> <i32 1, i32 3>
  %3460 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %3459, <2 x i64>* %3460, align 16
  %3461 = shufflevector <2 x i64> %3453, <2 x i64> %3457, <2 x i32> <i32 0, i32 2>
  %3462 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %3461, <2 x i64>* %3462, align 16
  %3463 = shufflevector <2 x i64> %3453, <2 x i64> %3457, <2 x i32> <i32 1, i32 3>
  %3464 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %3463, <2 x i64>* %3464, align 16
  %3465 = shufflevector <4 x i32> %3195, <4 x i32> %3199, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3466 = bitcast <4 x i32> %3465 to <2 x i64>
  %3467 = shufflevector <4 x i32> %3195, <4 x i32> %3199, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3468 = bitcast <4 x i32> %3467 to <2 x i64>
  %3469 = shufflevector <4 x i32> %3203, <4 x i32> %3207, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3470 = bitcast <4 x i32> %3469 to <2 x i64>
  %3471 = shufflevector <4 x i32> %3203, <4 x i32> %3207, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3472 = bitcast <4 x i32> %3471 to <2 x i64>
  %3473 = shufflevector <2 x i64> %3466, <2 x i64> %3470, <2 x i32> <i32 0, i32 2>
  %3474 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %3473, <2 x i64>* %3474, align 16
  %3475 = shufflevector <2 x i64> %3466, <2 x i64> %3470, <2 x i32> <i32 1, i32 3>
  %3476 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %3475, <2 x i64>* %3476, align 16
  %3477 = shufflevector <2 x i64> %3468, <2 x i64> %3472, <2 x i32> <i32 0, i32 2>
  %3478 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %3477, <2 x i64>* %3478, align 16
  %3479 = shufflevector <2 x i64> %3468, <2 x i64> %3472, <2 x i32> <i32 1, i32 3>
  %3480 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %3479, <2 x i64>* %3480, align 16
  %3481 = load <4 x i32>, <4 x i32>* %3227, align 16
  %3482 = shufflevector <4 x i32> %3274, <4 x i32> %3481, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3483 = bitcast <4 x i32> %3482 to <2 x i64>
  %3484 = shufflevector <4 x i32> %3274, <4 x i32> %3481, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3485 = bitcast <4 x i32> %3484 to <2 x i64>
  %3486 = load <4 x i32>, <4 x i32>* %3243, align 16
  %3487 = load <4 x i32>, <4 x i32>* %3259, align 16
  %3488 = shufflevector <4 x i32> %3486, <4 x i32> %3487, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3489 = bitcast <4 x i32> %3488 to <2 x i64>
  %3490 = shufflevector <4 x i32> %3486, <4 x i32> %3487, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3491 = bitcast <4 x i32> %3490 to <2 x i64>
  %3492 = shufflevector <2 x i64> %3483, <2 x i64> %3489, <2 x i32> <i32 0, i32 2>
  %3493 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %3492, <2 x i64>* %3493, align 16
  %3494 = shufflevector <2 x i64> %3483, <2 x i64> %3489, <2 x i32> <i32 1, i32 3>
  %3495 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %3494, <2 x i64>* %3495, align 16
  %3496 = shufflevector <2 x i64> %3485, <2 x i64> %3491, <2 x i32> <i32 0, i32 2>
  %3497 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %3496, <2 x i64>* %3497, align 16
  %3498 = shufflevector <2 x i64> %3485, <2 x i64> %3491, <2 x i32> <i32 1, i32 3>
  %3499 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %3498, <2 x i64>* %3499, align 16
  %3500 = load <4 x i32>, <4 x i32>* %3215, align 16
  %3501 = load <4 x i32>, <4 x i32>* %3231, align 16
  %3502 = shufflevector <4 x i32> %3500, <4 x i32> %3501, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3503 = bitcast <4 x i32> %3502 to <2 x i64>
  %3504 = shufflevector <4 x i32> %3500, <4 x i32> %3501, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3505 = bitcast <4 x i32> %3504 to <2 x i64>
  %3506 = load <4 x i32>, <4 x i32>* %3247, align 16
  %3507 = load <4 x i32>, <4 x i32>* %3263, align 16
  %3508 = shufflevector <4 x i32> %3506, <4 x i32> %3507, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3509 = bitcast <4 x i32> %3508 to <2 x i64>
  %3510 = shufflevector <4 x i32> %3506, <4 x i32> %3507, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3511 = bitcast <4 x i32> %3510 to <2 x i64>
  %3512 = shufflevector <2 x i64> %3503, <2 x i64> %3509, <2 x i32> <i32 0, i32 2>
  %3513 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %3512, <2 x i64>* %3513, align 16
  %3514 = shufflevector <2 x i64> %3503, <2 x i64> %3509, <2 x i32> <i32 1, i32 3>
  %3515 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %3514, <2 x i64>* %3515, align 16
  %3516 = shufflevector <2 x i64> %3505, <2 x i64> %3511, <2 x i32> <i32 0, i32 2>
  %3517 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %3516, <2 x i64>* %3517, align 16
  %3518 = shufflevector <2 x i64> %3505, <2 x i64> %3511, <2 x i32> <i32 1, i32 3>
  %3519 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %3518, <2 x i64>* %3519, align 16
  %3520 = shufflevector <4 x i32> %3196, <4 x i32> %3200, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3521 = bitcast <4 x i32> %3520 to <2 x i64>
  %3522 = shufflevector <4 x i32> %3196, <4 x i32> %3200, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3523 = bitcast <4 x i32> %3522 to <2 x i64>
  %3524 = shufflevector <4 x i32> %3204, <4 x i32> %3208, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3525 = bitcast <4 x i32> %3524 to <2 x i64>
  %3526 = shufflevector <4 x i32> %3204, <4 x i32> %3208, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3527 = bitcast <4 x i32> %3526 to <2 x i64>
  %3528 = shufflevector <2 x i64> %3521, <2 x i64> %3525, <2 x i32> <i32 0, i32 2>
  %3529 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %3528, <2 x i64>* %3529, align 16
  %3530 = shufflevector <2 x i64> %3521, <2 x i64> %3525, <2 x i32> <i32 1, i32 3>
  %3531 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %3530, <2 x i64>* %3531, align 16
  %3532 = shufflevector <2 x i64> %3523, <2 x i64> %3527, <2 x i32> <i32 0, i32 2>
  %3533 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %3532, <2 x i64>* %3533, align 16
  %3534 = shufflevector <2 x i64> %3523, <2 x i64> %3527, <2 x i32> <i32 1, i32 3>
  %3535 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %3534, <2 x i64>* %3535, align 16
  %3536 = shufflevector <4 x i32> %3197, <4 x i32> %3201, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3537 = bitcast <4 x i32> %3536 to <2 x i64>
  %3538 = shufflevector <4 x i32> %3197, <4 x i32> %3201, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3539 = bitcast <4 x i32> %3538 to <2 x i64>
  %3540 = shufflevector <4 x i32> %3205, <4 x i32> %3209, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3541 = bitcast <4 x i32> %3540 to <2 x i64>
  %3542 = shufflevector <4 x i32> %3205, <4 x i32> %3209, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3543 = bitcast <4 x i32> %3542 to <2 x i64>
  %3544 = shufflevector <2 x i64> %3537, <2 x i64> %3541, <2 x i32> <i32 0, i32 2>
  %3545 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %3544, <2 x i64>* %3545, align 16
  %3546 = shufflevector <2 x i64> %3537, <2 x i64> %3541, <2 x i32> <i32 1, i32 3>
  %3547 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %3546, <2 x i64>* %3547, align 16
  %3548 = shufflevector <2 x i64> %3539, <2 x i64> %3543, <2 x i32> <i32 0, i32 2>
  %3549 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %3548, <2 x i64>* %3549, align 16
  %3550 = shufflevector <2 x i64> %3539, <2 x i64> %3543, <2 x i32> <i32 1, i32 3>
  %3551 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %3550, <2 x i64>* %3551, align 16
  %3552 = load <4 x i32>, <4 x i32>* %3219, align 16
  %3553 = load <4 x i32>, <4 x i32>* %3235, align 16
  %3554 = shufflevector <4 x i32> %3552, <4 x i32> %3553, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3555 = bitcast <4 x i32> %3554 to <2 x i64>
  %3556 = shufflevector <4 x i32> %3552, <4 x i32> %3553, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3557 = bitcast <4 x i32> %3556 to <2 x i64>
  %3558 = load <4 x i32>, <4 x i32>* %3251, align 16
  %3559 = load <4 x i32>, <4 x i32>* %3267, align 16
  %3560 = shufflevector <4 x i32> %3558, <4 x i32> %3559, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3561 = bitcast <4 x i32> %3560 to <2 x i64>
  %3562 = shufflevector <4 x i32> %3558, <4 x i32> %3559, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3563 = bitcast <4 x i32> %3562 to <2 x i64>
  %3564 = shufflevector <2 x i64> %3555, <2 x i64> %3561, <2 x i32> <i32 0, i32 2>
  %3565 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %3564, <2 x i64>* %3565, align 16
  %3566 = shufflevector <2 x i64> %3555, <2 x i64> %3561, <2 x i32> <i32 1, i32 3>
  %3567 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %3566, <2 x i64>* %3567, align 16
  %3568 = shufflevector <2 x i64> %3557, <2 x i64> %3563, <2 x i32> <i32 0, i32 2>
  %3569 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %3568, <2 x i64>* %3569, align 16
  %3570 = shufflevector <2 x i64> %3557, <2 x i64> %3563, <2 x i32> <i32 1, i32 3>
  %3571 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %3570, <2 x i64>* %3571, align 16
  %3572 = load <4 x i32>, <4 x i32>* %3223, align 16
  %3573 = load <4 x i32>, <4 x i32>* %3239, align 16
  %3574 = shufflevector <4 x i32> %3572, <4 x i32> %3573, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3575 = bitcast <4 x i32> %3574 to <2 x i64>
  %3576 = shufflevector <4 x i32> %3572, <4 x i32> %3573, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3577 = bitcast <4 x i32> %3576 to <2 x i64>
  %3578 = load <4 x i32>, <4 x i32>* %3255, align 16
  %3579 = load <4 x i32>, <4 x i32>* %3271, align 16
  %3580 = shufflevector <4 x i32> %3578, <4 x i32> %3579, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3581 = bitcast <4 x i32> %3580 to <2 x i64>
  %3582 = shufflevector <4 x i32> %3578, <4 x i32> %3579, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3583 = bitcast <4 x i32> %3582 to <2 x i64>
  %3584 = shufflevector <2 x i64> %3575, <2 x i64> %3581, <2 x i32> <i32 0, i32 2>
  %3585 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %3584, <2 x i64>* %3585, align 16
  %3586 = shufflevector <2 x i64> %3575, <2 x i64> %3581, <2 x i32> <i32 1, i32 3>
  %3587 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %3586, <2 x i64>* %3587, align 16
  %3588 = shufflevector <2 x i64> %3577, <2 x i64> %3583, <2 x i32> <i32 0, i32 2>
  %3589 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %3588, <2 x i64>* %3589, align 16
  %3590 = shufflevector <2 x i64> %3577, <2 x i64> %3583, <2 x i32> <i32 1, i32 3>
  %3591 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %3590, <2 x i64>* %3591, align 16
  %3592 = load <4 x i32>, <4 x i32>* %3307, align 16
  %3593 = shufflevector <4 x i32> %3354, <4 x i32> %3592, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3594 = bitcast <4 x i32> %3593 to <2 x i64>
  %3595 = shufflevector <4 x i32> %3354, <4 x i32> %3592, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3596 = bitcast <4 x i32> %3595 to <2 x i64>
  %3597 = load <4 x i32>, <4 x i32>* %3323, align 16
  %3598 = load <4 x i32>, <4 x i32>* %3339, align 16
  %3599 = shufflevector <4 x i32> %3597, <4 x i32> %3598, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3600 = bitcast <4 x i32> %3599 to <2 x i64>
  %3601 = shufflevector <4 x i32> %3597, <4 x i32> %3598, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3602 = bitcast <4 x i32> %3601 to <2 x i64>
  %3603 = shufflevector <2 x i64> %3594, <2 x i64> %3600, <2 x i32> <i32 0, i32 2>
  %3604 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %3603, <2 x i64>* %3604, align 16
  %3605 = shufflevector <2 x i64> %3594, <2 x i64> %3600, <2 x i32> <i32 1, i32 3>
  %3606 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %3605, <2 x i64>* %3606, align 16
  %3607 = shufflevector <2 x i64> %3596, <2 x i64> %3602, <2 x i32> <i32 0, i32 2>
  %3608 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %3607, <2 x i64>* %3608, align 16
  %3609 = shufflevector <2 x i64> %3596, <2 x i64> %3602, <2 x i32> <i32 1, i32 3>
  %3610 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %3609, <2 x i64>* %3610, align 16
  %3611 = load <4 x i32>, <4 x i32>* %3295, align 16
  %3612 = load <4 x i32>, <4 x i32>* %3311, align 16
  %3613 = shufflevector <4 x i32> %3611, <4 x i32> %3612, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3614 = bitcast <4 x i32> %3613 to <2 x i64>
  %3615 = shufflevector <4 x i32> %3611, <4 x i32> %3612, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3616 = bitcast <4 x i32> %3615 to <2 x i64>
  %3617 = load <4 x i32>, <4 x i32>* %3327, align 16
  %3618 = load <4 x i32>, <4 x i32>* %3343, align 16
  %3619 = shufflevector <4 x i32> %3617, <4 x i32> %3618, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3620 = bitcast <4 x i32> %3619 to <2 x i64>
  %3621 = shufflevector <4 x i32> %3617, <4 x i32> %3618, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3622 = bitcast <4 x i32> %3621 to <2 x i64>
  %3623 = shufflevector <2 x i64> %3614, <2 x i64> %3620, <2 x i32> <i32 0, i32 2>
  %3624 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %3623, <2 x i64>* %3624, align 16
  %3625 = shufflevector <2 x i64> %3614, <2 x i64> %3620, <2 x i32> <i32 1, i32 3>
  %3626 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %3625, <2 x i64>* %3626, align 16
  %3627 = shufflevector <2 x i64> %3616, <2 x i64> %3622, <2 x i32> <i32 0, i32 2>
  %3628 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %3627, <2 x i64>* %3628, align 16
  %3629 = shufflevector <2 x i64> %3616, <2 x i64> %3622, <2 x i32> <i32 1, i32 3>
  %3630 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %3629, <2 x i64>* %3630, align 16
  %3631 = load <4 x i32>, <4 x i32>* %3387, align 16
  %3632 = shufflevector <4 x i32> %3434, <4 x i32> %3631, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3633 = bitcast <4 x i32> %3632 to <2 x i64>
  %3634 = shufflevector <4 x i32> %3434, <4 x i32> %3631, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3635 = bitcast <4 x i32> %3634 to <2 x i64>
  %3636 = load <4 x i32>, <4 x i32>* %3403, align 16
  %3637 = load <4 x i32>, <4 x i32>* %3419, align 16
  %3638 = shufflevector <4 x i32> %3636, <4 x i32> %3637, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3639 = bitcast <4 x i32> %3638 to <2 x i64>
  %3640 = shufflevector <4 x i32> %3636, <4 x i32> %3637, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3641 = bitcast <4 x i32> %3640 to <2 x i64>
  %3642 = shufflevector <2 x i64> %3633, <2 x i64> %3639, <2 x i32> <i32 0, i32 2>
  %3643 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %3642, <2 x i64>* %3643, align 16
  %3644 = shufflevector <2 x i64> %3633, <2 x i64> %3639, <2 x i32> <i32 1, i32 3>
  %3645 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %3644, <2 x i64>* %3645, align 16
  %3646 = shufflevector <2 x i64> %3635, <2 x i64> %3641, <2 x i32> <i32 0, i32 2>
  %3647 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %3646, <2 x i64>* %3647, align 16
  %3648 = shufflevector <2 x i64> %3635, <2 x i64> %3641, <2 x i32> <i32 1, i32 3>
  %3649 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %3648, <2 x i64>* %3649, align 16
  %3650 = load <4 x i32>, <4 x i32>* %3375, align 16
  %3651 = load <4 x i32>, <4 x i32>* %3391, align 16
  %3652 = shufflevector <4 x i32> %3650, <4 x i32> %3651, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3653 = bitcast <4 x i32> %3652 to <2 x i64>
  %3654 = shufflevector <4 x i32> %3650, <4 x i32> %3651, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3655 = bitcast <4 x i32> %3654 to <2 x i64>
  %3656 = load <4 x i32>, <4 x i32>* %3407, align 16
  %3657 = load <4 x i32>, <4 x i32>* %3423, align 16
  %3658 = shufflevector <4 x i32> %3656, <4 x i32> %3657, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3659 = bitcast <4 x i32> %3658 to <2 x i64>
  %3660 = shufflevector <4 x i32> %3656, <4 x i32> %3657, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3661 = bitcast <4 x i32> %3660 to <2 x i64>
  %3662 = shufflevector <2 x i64> %3653, <2 x i64> %3659, <2 x i32> <i32 0, i32 2>
  %3663 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %3662, <2 x i64>* %3663, align 16
  %3664 = shufflevector <2 x i64> %3653, <2 x i64> %3659, <2 x i32> <i32 1, i32 3>
  %3665 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %3664, <2 x i64>* %3665, align 16
  %3666 = shufflevector <2 x i64> %3655, <2 x i64> %3661, <2 x i32> <i32 0, i32 2>
  %3667 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %3666, <2 x i64>* %3667, align 16
  %3668 = shufflevector <2 x i64> %3655, <2 x i64> %3661, <2 x i32> <i32 1, i32 3>
  %3669 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %3668, <2 x i64>* %3669, align 16
  %3670 = load <4 x i32>, <4 x i32>* %3299, align 16
  %3671 = load <4 x i32>, <4 x i32>* %3315, align 16
  %3672 = shufflevector <4 x i32> %3670, <4 x i32> %3671, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3673 = bitcast <4 x i32> %3672 to <2 x i64>
  %3674 = shufflevector <4 x i32> %3670, <4 x i32> %3671, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3675 = bitcast <4 x i32> %3674 to <2 x i64>
  %3676 = load <4 x i32>, <4 x i32>* %3331, align 16
  %3677 = load <4 x i32>, <4 x i32>* %3347, align 16
  %3678 = shufflevector <4 x i32> %3676, <4 x i32> %3677, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3679 = bitcast <4 x i32> %3678 to <2 x i64>
  %3680 = shufflevector <4 x i32> %3676, <4 x i32> %3677, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3681 = bitcast <4 x i32> %3680 to <2 x i64>
  %3682 = shufflevector <2 x i64> %3673, <2 x i64> %3679, <2 x i32> <i32 0, i32 2>
  %3683 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %3682, <2 x i64>* %3683, align 16
  %3684 = shufflevector <2 x i64> %3673, <2 x i64> %3679, <2 x i32> <i32 1, i32 3>
  %3685 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %3684, <2 x i64>* %3685, align 16
  %3686 = shufflevector <2 x i64> %3675, <2 x i64> %3681, <2 x i32> <i32 0, i32 2>
  %3687 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %3686, <2 x i64>* %3687, align 16
  %3688 = shufflevector <2 x i64> %3675, <2 x i64> %3681, <2 x i32> <i32 1, i32 3>
  %3689 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %3688, <2 x i64>* %3689, align 16
  %3690 = load <4 x i32>, <4 x i32>* %3303, align 16
  %3691 = load <4 x i32>, <4 x i32>* %3319, align 16
  %3692 = shufflevector <4 x i32> %3690, <4 x i32> %3691, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3693 = bitcast <4 x i32> %3692 to <2 x i64>
  %3694 = shufflevector <4 x i32> %3690, <4 x i32> %3691, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3695 = bitcast <4 x i32> %3694 to <2 x i64>
  %3696 = load <4 x i32>, <4 x i32>* %3335, align 16
  %3697 = load <4 x i32>, <4 x i32>* %3351, align 16
  %3698 = shufflevector <4 x i32> %3696, <4 x i32> %3697, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3699 = bitcast <4 x i32> %3698 to <2 x i64>
  %3700 = shufflevector <4 x i32> %3696, <4 x i32> %3697, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3701 = bitcast <4 x i32> %3700 to <2 x i64>
  %3702 = shufflevector <2 x i64> %3693, <2 x i64> %3699, <2 x i32> <i32 0, i32 2>
  %3703 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %3702, <2 x i64>* %3703, align 16
  %3704 = shufflevector <2 x i64> %3693, <2 x i64> %3699, <2 x i32> <i32 1, i32 3>
  %3705 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %3704, <2 x i64>* %3705, align 16
  %3706 = shufflevector <2 x i64> %3695, <2 x i64> %3701, <2 x i32> <i32 0, i32 2>
  %3707 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %3706, <2 x i64>* %3707, align 16
  %3708 = shufflevector <2 x i64> %3695, <2 x i64> %3701, <2 x i32> <i32 1, i32 3>
  %3709 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %3708, <2 x i64>* %3709, align 16
  %3710 = load <4 x i32>, <4 x i32>* %3379, align 16
  %3711 = load <4 x i32>, <4 x i32>* %3395, align 16
  %3712 = shufflevector <4 x i32> %3710, <4 x i32> %3711, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3713 = bitcast <4 x i32> %3712 to <2 x i64>
  %3714 = shufflevector <4 x i32> %3710, <4 x i32> %3711, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3715 = bitcast <4 x i32> %3714 to <2 x i64>
  %3716 = load <4 x i32>, <4 x i32>* %3411, align 16
  %3717 = load <4 x i32>, <4 x i32>* %3427, align 16
  %3718 = shufflevector <4 x i32> %3716, <4 x i32> %3717, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3719 = bitcast <4 x i32> %3718 to <2 x i64>
  %3720 = shufflevector <4 x i32> %3716, <4 x i32> %3717, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3721 = bitcast <4 x i32> %3720 to <2 x i64>
  %3722 = shufflevector <2 x i64> %3713, <2 x i64> %3719, <2 x i32> <i32 0, i32 2>
  %3723 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %3722, <2 x i64>* %3723, align 16
  %3724 = shufflevector <2 x i64> %3713, <2 x i64> %3719, <2 x i32> <i32 1, i32 3>
  %3725 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %3724, <2 x i64>* %3725, align 16
  %3726 = shufflevector <2 x i64> %3715, <2 x i64> %3721, <2 x i32> <i32 0, i32 2>
  %3727 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %3726, <2 x i64>* %3727, align 16
  %3728 = shufflevector <2 x i64> %3715, <2 x i64> %3721, <2 x i32> <i32 1, i32 3>
  %3729 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %3728, <2 x i64>* %3729, align 16
  %3730 = load <4 x i32>, <4 x i32>* %3383, align 16
  %3731 = load <4 x i32>, <4 x i32>* %3399, align 16
  %3732 = shufflevector <4 x i32> %3730, <4 x i32> %3731, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3733 = bitcast <4 x i32> %3732 to <2 x i64>
  %3734 = shufflevector <4 x i32> %3730, <4 x i32> %3731, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3735 = bitcast <4 x i32> %3734 to <2 x i64>
  %3736 = load <4 x i32>, <4 x i32>* %3415, align 16
  %3737 = load <4 x i32>, <4 x i32>* %3431, align 16
  %3738 = shufflevector <4 x i32> %3736, <4 x i32> %3737, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3739 = bitcast <4 x i32> %3738 to <2 x i64>
  %3740 = shufflevector <4 x i32> %3736, <4 x i32> %3737, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3741 = bitcast <4 x i32> %3740 to <2 x i64>
  %3742 = shufflevector <2 x i64> %3733, <2 x i64> %3739, <2 x i32> <i32 0, i32 2>
  %3743 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %3742, <2 x i64>* %3743, align 16
  %3744 = shufflevector <2 x i64> %3733, <2 x i64> %3739, <2 x i32> <i32 1, i32 3>
  %3745 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %3744, <2 x i64>* %3745, align 16
  %3746 = shufflevector <2 x i64> %3735, <2 x i64> %3741, <2 x i32> <i32 0, i32 2>
  %3747 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %3746, <2 x i64>* %3747, align 16
  %3748 = shufflevector <2 x i64> %3735, <2 x i64> %3741, <2 x i32> <i32 1, i32 3>
  %3749 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %3748, <2 x i64>* %3749, align 16
  %3750 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  %3751 = sext i8 %3750 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %3117, <2 x i64>* nonnull %3120, i32 %3751, i32 4)
  %3752 = load <4 x i32>, <4 x i32>* %3131, align 16
  %3753 = load <4 x i32>, <4 x i32>* %3147, align 16
  %3754 = shufflevector <4 x i32> %3752, <4 x i32> %3753, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3755 = bitcast <4 x i32> %3754 to <2 x i64>
  %3756 = shufflevector <4 x i32> %3752, <4 x i32> %3753, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3757 = bitcast <4 x i32> %3756 to <2 x i64>
  %3758 = load <4 x i32>, <4 x i32>* %3163, align 16
  %3759 = load <4 x i32>, <4 x i32>* %3179, align 16
  %3760 = shufflevector <4 x i32> %3758, <4 x i32> %3759, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3761 = bitcast <4 x i32> %3760 to <2 x i64>
  %3762 = shufflevector <4 x i32> %3758, <4 x i32> %3759, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3763 = bitcast <4 x i32> %3762 to <2 x i64>
  %3764 = shufflevector <2 x i64> %3755, <2 x i64> %3761, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3764, <2 x i64>* %3117, align 16
  %3765 = shufflevector <2 x i64> %3755, <2 x i64> %3761, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3765, <2 x i64>* %3460, align 16
  %3766 = shufflevector <2 x i64> %3757, <2 x i64> %3763, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3766, <2 x i64>* %3462, align 16
  %3767 = shufflevector <2 x i64> %3757, <2 x i64> %3763, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3767, <2 x i64>* %3464, align 16
  %3768 = load <4 x i32>, <4 x i32>* %3135, align 16
  %3769 = load <4 x i32>, <4 x i32>* %3151, align 16
  %3770 = shufflevector <4 x i32> %3768, <4 x i32> %3769, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3771 = bitcast <4 x i32> %3770 to <2 x i64>
  %3772 = shufflevector <4 x i32> %3768, <4 x i32> %3769, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3773 = bitcast <4 x i32> %3772 to <2 x i64>
  %3774 = load <4 x i32>, <4 x i32>* %3167, align 16
  %3775 = load <4 x i32>, <4 x i32>* %3183, align 16
  %3776 = shufflevector <4 x i32> %3774, <4 x i32> %3775, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3777 = bitcast <4 x i32> %3776 to <2 x i64>
  %3778 = shufflevector <4 x i32> %3774, <4 x i32> %3775, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3779 = bitcast <4 x i32> %3778 to <2 x i64>
  %3780 = shufflevector <2 x i64> %3771, <2 x i64> %3777, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3780, <2 x i64>* %3474, align 16
  %3781 = shufflevector <2 x i64> %3771, <2 x i64> %3777, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3781, <2 x i64>* %3476, align 16
  %3782 = shufflevector <2 x i64> %3773, <2 x i64> %3779, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3782, <2 x i64>* %3478, align 16
  %3783 = shufflevector <2 x i64> %3773, <2 x i64> %3779, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3783, <2 x i64>* %3480, align 16
  %3784 = load <4 x i32>, <4 x i32>* %3211, align 16
  %3785 = load <4 x i32>, <4 x i32>* %3227, align 16
  %3786 = shufflevector <4 x i32> %3784, <4 x i32> %3785, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3787 = bitcast <4 x i32> %3786 to <2 x i64>
  %3788 = shufflevector <4 x i32> %3784, <4 x i32> %3785, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3789 = bitcast <4 x i32> %3788 to <2 x i64>
  %3790 = load <4 x i32>, <4 x i32>* %3243, align 16
  %3791 = load <4 x i32>, <4 x i32>* %3259, align 16
  %3792 = shufflevector <4 x i32> %3790, <4 x i32> %3791, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3793 = bitcast <4 x i32> %3792 to <2 x i64>
  %3794 = shufflevector <4 x i32> %3790, <4 x i32> %3791, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3795 = bitcast <4 x i32> %3794 to <2 x i64>
  %3796 = shufflevector <2 x i64> %3787, <2 x i64> %3793, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3796, <2 x i64>* %3493, align 16
  %3797 = shufflevector <2 x i64> %3787, <2 x i64> %3793, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3797, <2 x i64>* %3495, align 16
  %3798 = shufflevector <2 x i64> %3789, <2 x i64> %3795, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3798, <2 x i64>* %3497, align 16
  %3799 = shufflevector <2 x i64> %3789, <2 x i64> %3795, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3799, <2 x i64>* %3499, align 16
  %3800 = load <4 x i32>, <4 x i32>* %3215, align 16
  %3801 = load <4 x i32>, <4 x i32>* %3231, align 16
  %3802 = shufflevector <4 x i32> %3800, <4 x i32> %3801, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3803 = bitcast <4 x i32> %3802 to <2 x i64>
  %3804 = shufflevector <4 x i32> %3800, <4 x i32> %3801, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3805 = bitcast <4 x i32> %3804 to <2 x i64>
  %3806 = load <4 x i32>, <4 x i32>* %3247, align 16
  %3807 = load <4 x i32>, <4 x i32>* %3263, align 16
  %3808 = shufflevector <4 x i32> %3806, <4 x i32> %3807, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3809 = bitcast <4 x i32> %3808 to <2 x i64>
  %3810 = shufflevector <4 x i32> %3806, <4 x i32> %3807, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3811 = bitcast <4 x i32> %3810 to <2 x i64>
  %3812 = shufflevector <2 x i64> %3803, <2 x i64> %3809, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3812, <2 x i64>* %3513, align 16
  %3813 = shufflevector <2 x i64> %3803, <2 x i64> %3809, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3813, <2 x i64>* %3515, align 16
  %3814 = shufflevector <2 x i64> %3805, <2 x i64> %3811, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3814, <2 x i64>* %3517, align 16
  %3815 = shufflevector <2 x i64> %3805, <2 x i64> %3811, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3815, <2 x i64>* %3519, align 16
  %3816 = load <4 x i32>, <4 x i32>* %3139, align 16
  %3817 = load <4 x i32>, <4 x i32>* %3155, align 16
  %3818 = shufflevector <4 x i32> %3816, <4 x i32> %3817, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3819 = bitcast <4 x i32> %3818 to <2 x i64>
  %3820 = shufflevector <4 x i32> %3816, <4 x i32> %3817, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3821 = bitcast <4 x i32> %3820 to <2 x i64>
  %3822 = load <4 x i32>, <4 x i32>* %3171, align 16
  %3823 = load <4 x i32>, <4 x i32>* %3187, align 16
  %3824 = shufflevector <4 x i32> %3822, <4 x i32> %3823, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3825 = bitcast <4 x i32> %3824 to <2 x i64>
  %3826 = shufflevector <4 x i32> %3822, <4 x i32> %3823, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3827 = bitcast <4 x i32> %3826 to <2 x i64>
  %3828 = shufflevector <2 x i64> %3819, <2 x i64> %3825, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3828, <2 x i64>* %3529, align 16
  %3829 = shufflevector <2 x i64> %3819, <2 x i64> %3825, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3829, <2 x i64>* %3531, align 16
  %3830 = shufflevector <2 x i64> %3821, <2 x i64> %3827, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3830, <2 x i64>* %3533, align 16
  %3831 = shufflevector <2 x i64> %3821, <2 x i64> %3827, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3831, <2 x i64>* %3535, align 16
  %3832 = load <4 x i32>, <4 x i32>* %3143, align 16
  %3833 = load <4 x i32>, <4 x i32>* %3159, align 16
  %3834 = shufflevector <4 x i32> %3832, <4 x i32> %3833, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3835 = bitcast <4 x i32> %3834 to <2 x i64>
  %3836 = shufflevector <4 x i32> %3832, <4 x i32> %3833, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3837 = bitcast <4 x i32> %3836 to <2 x i64>
  %3838 = load <4 x i32>, <4 x i32>* %3175, align 16
  %3839 = load <4 x i32>, <4 x i32>* %3191, align 16
  %3840 = shufflevector <4 x i32> %3838, <4 x i32> %3839, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3841 = bitcast <4 x i32> %3840 to <2 x i64>
  %3842 = shufflevector <4 x i32> %3838, <4 x i32> %3839, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3843 = bitcast <4 x i32> %3842 to <2 x i64>
  %3844 = shufflevector <2 x i64> %3835, <2 x i64> %3841, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3844, <2 x i64>* %3545, align 16
  %3845 = shufflevector <2 x i64> %3835, <2 x i64> %3841, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3845, <2 x i64>* %3547, align 16
  %3846 = shufflevector <2 x i64> %3837, <2 x i64> %3843, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3846, <2 x i64>* %3549, align 16
  %3847 = shufflevector <2 x i64> %3837, <2 x i64> %3843, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3847, <2 x i64>* %3551, align 16
  %3848 = load <4 x i32>, <4 x i32>* %3219, align 16
  %3849 = load <4 x i32>, <4 x i32>* %3235, align 16
  %3850 = shufflevector <4 x i32> %3848, <4 x i32> %3849, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3851 = bitcast <4 x i32> %3850 to <2 x i64>
  %3852 = shufflevector <4 x i32> %3848, <4 x i32> %3849, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3853 = bitcast <4 x i32> %3852 to <2 x i64>
  %3854 = load <4 x i32>, <4 x i32>* %3251, align 16
  %3855 = load <4 x i32>, <4 x i32>* %3267, align 16
  %3856 = shufflevector <4 x i32> %3854, <4 x i32> %3855, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3857 = bitcast <4 x i32> %3856 to <2 x i64>
  %3858 = shufflevector <4 x i32> %3854, <4 x i32> %3855, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3859 = bitcast <4 x i32> %3858 to <2 x i64>
  %3860 = shufflevector <2 x i64> %3851, <2 x i64> %3857, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3860, <2 x i64>* %3565, align 16
  %3861 = shufflevector <2 x i64> %3851, <2 x i64> %3857, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3861, <2 x i64>* %3567, align 16
  %3862 = shufflevector <2 x i64> %3853, <2 x i64> %3859, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3862, <2 x i64>* %3569, align 16
  %3863 = shufflevector <2 x i64> %3853, <2 x i64> %3859, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3863, <2 x i64>* %3571, align 16
  %3864 = load <4 x i32>, <4 x i32>* %3223, align 16
  %3865 = load <4 x i32>, <4 x i32>* %3239, align 16
  %3866 = shufflevector <4 x i32> %3864, <4 x i32> %3865, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3867 = bitcast <4 x i32> %3866 to <2 x i64>
  %3868 = shufflevector <4 x i32> %3864, <4 x i32> %3865, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3869 = bitcast <4 x i32> %3868 to <2 x i64>
  %3870 = load <4 x i32>, <4 x i32>* %3255, align 16
  %3871 = load <4 x i32>, <4 x i32>* %3271, align 16
  %3872 = shufflevector <4 x i32> %3870, <4 x i32> %3871, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3873 = bitcast <4 x i32> %3872 to <2 x i64>
  %3874 = shufflevector <4 x i32> %3870, <4 x i32> %3871, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3875 = bitcast <4 x i32> %3874 to <2 x i64>
  %3876 = shufflevector <2 x i64> %3867, <2 x i64> %3873, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3876, <2 x i64>* %3585, align 16
  %3877 = shufflevector <2 x i64> %3867, <2 x i64> %3873, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3877, <2 x i64>* %3587, align 16
  %3878 = shufflevector <2 x i64> %3869, <2 x i64> %3875, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3878, <2 x i64>* %3589, align 16
  %3879 = shufflevector <2 x i64> %3869, <2 x i64> %3875, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3879, <2 x i64>* %3591, align 16
  %3880 = load <4 x i32>, <4 x i32>* %3291, align 16
  %3881 = load <4 x i32>, <4 x i32>* %3307, align 16
  %3882 = shufflevector <4 x i32> %3880, <4 x i32> %3881, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3883 = bitcast <4 x i32> %3882 to <2 x i64>
  %3884 = shufflevector <4 x i32> %3880, <4 x i32> %3881, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3885 = bitcast <4 x i32> %3884 to <2 x i64>
  %3886 = load <4 x i32>, <4 x i32>* %3323, align 16
  %3887 = load <4 x i32>, <4 x i32>* %3339, align 16
  %3888 = shufflevector <4 x i32> %3886, <4 x i32> %3887, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3889 = bitcast <4 x i32> %3888 to <2 x i64>
  %3890 = shufflevector <4 x i32> %3886, <4 x i32> %3887, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3891 = bitcast <4 x i32> %3890 to <2 x i64>
  %3892 = shufflevector <2 x i64> %3883, <2 x i64> %3889, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3892, <2 x i64>* %3604, align 16
  %3893 = shufflevector <2 x i64> %3883, <2 x i64> %3889, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3893, <2 x i64>* %3606, align 16
  %3894 = shufflevector <2 x i64> %3885, <2 x i64> %3891, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3894, <2 x i64>* %3608, align 16
  %3895 = shufflevector <2 x i64> %3885, <2 x i64> %3891, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3895, <2 x i64>* %3610, align 16
  %3896 = load <4 x i32>, <4 x i32>* %3295, align 16
  %3897 = load <4 x i32>, <4 x i32>* %3311, align 16
  %3898 = shufflevector <4 x i32> %3896, <4 x i32> %3897, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3899 = bitcast <4 x i32> %3898 to <2 x i64>
  %3900 = shufflevector <4 x i32> %3896, <4 x i32> %3897, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3901 = bitcast <4 x i32> %3900 to <2 x i64>
  %3902 = load <4 x i32>, <4 x i32>* %3327, align 16
  %3903 = load <4 x i32>, <4 x i32>* %3343, align 16
  %3904 = shufflevector <4 x i32> %3902, <4 x i32> %3903, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3905 = bitcast <4 x i32> %3904 to <2 x i64>
  %3906 = shufflevector <4 x i32> %3902, <4 x i32> %3903, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3907 = bitcast <4 x i32> %3906 to <2 x i64>
  %3908 = shufflevector <2 x i64> %3899, <2 x i64> %3905, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3908, <2 x i64>* %3624, align 16
  %3909 = shufflevector <2 x i64> %3899, <2 x i64> %3905, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3909, <2 x i64>* %3626, align 16
  %3910 = shufflevector <2 x i64> %3901, <2 x i64> %3907, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3910, <2 x i64>* %3628, align 16
  %3911 = shufflevector <2 x i64> %3901, <2 x i64> %3907, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3911, <2 x i64>* %3630, align 16
  %3912 = load <4 x i32>, <4 x i32>* %3371, align 16
  %3913 = load <4 x i32>, <4 x i32>* %3387, align 16
  %3914 = shufflevector <4 x i32> %3912, <4 x i32> %3913, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3915 = bitcast <4 x i32> %3914 to <2 x i64>
  %3916 = shufflevector <4 x i32> %3912, <4 x i32> %3913, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3917 = bitcast <4 x i32> %3916 to <2 x i64>
  %3918 = load <4 x i32>, <4 x i32>* %3403, align 16
  %3919 = load <4 x i32>, <4 x i32>* %3419, align 16
  %3920 = shufflevector <4 x i32> %3918, <4 x i32> %3919, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3921 = bitcast <4 x i32> %3920 to <2 x i64>
  %3922 = shufflevector <4 x i32> %3918, <4 x i32> %3919, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3923 = bitcast <4 x i32> %3922 to <2 x i64>
  %3924 = shufflevector <2 x i64> %3915, <2 x i64> %3921, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3924, <2 x i64>* %3643, align 16
  %3925 = shufflevector <2 x i64> %3915, <2 x i64> %3921, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3925, <2 x i64>* %3645, align 16
  %3926 = shufflevector <2 x i64> %3917, <2 x i64> %3923, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3926, <2 x i64>* %3647, align 16
  %3927 = shufflevector <2 x i64> %3917, <2 x i64> %3923, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3927, <2 x i64>* %3649, align 16
  %3928 = load <4 x i32>, <4 x i32>* %3375, align 16
  %3929 = load <4 x i32>, <4 x i32>* %3391, align 16
  %3930 = shufflevector <4 x i32> %3928, <4 x i32> %3929, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3931 = bitcast <4 x i32> %3930 to <2 x i64>
  %3932 = shufflevector <4 x i32> %3928, <4 x i32> %3929, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3933 = bitcast <4 x i32> %3932 to <2 x i64>
  %3934 = load <4 x i32>, <4 x i32>* %3407, align 16
  %3935 = load <4 x i32>, <4 x i32>* %3423, align 16
  %3936 = shufflevector <4 x i32> %3934, <4 x i32> %3935, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3937 = bitcast <4 x i32> %3936 to <2 x i64>
  %3938 = shufflevector <4 x i32> %3934, <4 x i32> %3935, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3939 = bitcast <4 x i32> %3938 to <2 x i64>
  %3940 = shufflevector <2 x i64> %3931, <2 x i64> %3937, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3940, <2 x i64>* %3663, align 16
  %3941 = shufflevector <2 x i64> %3931, <2 x i64> %3937, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3941, <2 x i64>* %3665, align 16
  %3942 = shufflevector <2 x i64> %3933, <2 x i64> %3939, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3942, <2 x i64>* %3667, align 16
  %3943 = shufflevector <2 x i64> %3933, <2 x i64> %3939, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3943, <2 x i64>* %3669, align 16
  %3944 = load <4 x i32>, <4 x i32>* %3299, align 16
  %3945 = load <4 x i32>, <4 x i32>* %3315, align 16
  %3946 = shufflevector <4 x i32> %3944, <4 x i32> %3945, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3947 = bitcast <4 x i32> %3946 to <2 x i64>
  %3948 = shufflevector <4 x i32> %3944, <4 x i32> %3945, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3949 = bitcast <4 x i32> %3948 to <2 x i64>
  %3950 = load <4 x i32>, <4 x i32>* %3331, align 16
  %3951 = load <4 x i32>, <4 x i32>* %3347, align 16
  %3952 = shufflevector <4 x i32> %3950, <4 x i32> %3951, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3953 = bitcast <4 x i32> %3952 to <2 x i64>
  %3954 = shufflevector <4 x i32> %3950, <4 x i32> %3951, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3955 = bitcast <4 x i32> %3954 to <2 x i64>
  %3956 = shufflevector <2 x i64> %3947, <2 x i64> %3953, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3956, <2 x i64>* %3683, align 16
  %3957 = shufflevector <2 x i64> %3947, <2 x i64> %3953, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3957, <2 x i64>* %3685, align 16
  %3958 = shufflevector <2 x i64> %3949, <2 x i64> %3955, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3958, <2 x i64>* %3687, align 16
  %3959 = shufflevector <2 x i64> %3949, <2 x i64> %3955, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3959, <2 x i64>* %3689, align 16
  %3960 = load <4 x i32>, <4 x i32>* %3303, align 16
  %3961 = load <4 x i32>, <4 x i32>* %3319, align 16
  %3962 = shufflevector <4 x i32> %3960, <4 x i32> %3961, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3963 = bitcast <4 x i32> %3962 to <2 x i64>
  %3964 = shufflevector <4 x i32> %3960, <4 x i32> %3961, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3965 = bitcast <4 x i32> %3964 to <2 x i64>
  %3966 = load <4 x i32>, <4 x i32>* %3335, align 16
  %3967 = load <4 x i32>, <4 x i32>* %3351, align 16
  %3968 = shufflevector <4 x i32> %3966, <4 x i32> %3967, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3969 = bitcast <4 x i32> %3968 to <2 x i64>
  %3970 = shufflevector <4 x i32> %3966, <4 x i32> %3967, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3971 = bitcast <4 x i32> %3970 to <2 x i64>
  %3972 = shufflevector <2 x i64> %3963, <2 x i64> %3969, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3972, <2 x i64>* %3703, align 16
  %3973 = shufflevector <2 x i64> %3963, <2 x i64> %3969, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3973, <2 x i64>* %3705, align 16
  %3974 = shufflevector <2 x i64> %3965, <2 x i64> %3971, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3974, <2 x i64>* %3707, align 16
  %3975 = shufflevector <2 x i64> %3965, <2 x i64> %3971, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3975, <2 x i64>* %3709, align 16
  %3976 = load <4 x i32>, <4 x i32>* %3379, align 16
  %3977 = load <4 x i32>, <4 x i32>* %3395, align 16
  %3978 = shufflevector <4 x i32> %3976, <4 x i32> %3977, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3979 = bitcast <4 x i32> %3978 to <2 x i64>
  %3980 = shufflevector <4 x i32> %3976, <4 x i32> %3977, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3981 = bitcast <4 x i32> %3980 to <2 x i64>
  %3982 = load <4 x i32>, <4 x i32>* %3411, align 16
  %3983 = load <4 x i32>, <4 x i32>* %3427, align 16
  %3984 = shufflevector <4 x i32> %3982, <4 x i32> %3983, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3985 = bitcast <4 x i32> %3984 to <2 x i64>
  %3986 = shufflevector <4 x i32> %3982, <4 x i32> %3983, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3987 = bitcast <4 x i32> %3986 to <2 x i64>
  %3988 = shufflevector <2 x i64> %3979, <2 x i64> %3985, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3988, <2 x i64>* %3723, align 16
  %3989 = shufflevector <2 x i64> %3979, <2 x i64> %3985, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3989, <2 x i64>* %3725, align 16
  %3990 = shufflevector <2 x i64> %3981, <2 x i64> %3987, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %3990, <2 x i64>* %3727, align 16
  %3991 = shufflevector <2 x i64> %3981, <2 x i64> %3987, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %3991, <2 x i64>* %3729, align 16
  %3992 = load <4 x i32>, <4 x i32>* %3383, align 16
  %3993 = load <4 x i32>, <4 x i32>* %3399, align 16
  %3994 = shufflevector <4 x i32> %3992, <4 x i32> %3993, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3995 = bitcast <4 x i32> %3994 to <2 x i64>
  %3996 = shufflevector <4 x i32> %3992, <4 x i32> %3993, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3997 = bitcast <4 x i32> %3996 to <2 x i64>
  %3998 = load <4 x i32>, <4 x i32>* %3415, align 16
  %3999 = load <4 x i32>, <4 x i32>* %3431, align 16
  %4000 = shufflevector <4 x i32> %3998, <4 x i32> %3999, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4001 = bitcast <4 x i32> %4000 to <2 x i64>
  %4002 = shufflevector <4 x i32> %3998, <4 x i32> %3999, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4003 = bitcast <4 x i32> %4002 to <2 x i64>
  %4004 = shufflevector <2 x i64> %3995, <2 x i64> %4001, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4004, <2 x i64>* %3743, align 16
  %4005 = shufflevector <2 x i64> %3995, <2 x i64> %4001, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4005, <2 x i64>* %3745, align 16
  %4006 = shufflevector <2 x i64> %3997, <2 x i64> %4003, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4006, <2 x i64>* %3747, align 16
  %4007 = shufflevector <2 x i64> %3997, <2 x i64> %4003, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4007, <2 x i64>* %3749, align 16
  %4008 = bitcast i32* %1 to <2 x i64>*
  store <2 x i64> %3764, <2 x i64>* %4008, align 16
  %4009 = getelementptr inbounds i32, i32* %1, i64 4
  %4010 = bitcast i32* %4009 to <2 x i64>*
  store <2 x i64> %3796, <2 x i64>* %4010, align 16
  %4011 = getelementptr inbounds i32, i32* %1, i64 8
  %4012 = bitcast i32* %4011 to <2 x i64>*
  store <2 x i64> %3892, <2 x i64>* %4012, align 16
  %4013 = getelementptr inbounds i32, i32* %1, i64 12
  %4014 = bitcast i32* %4013 to <2 x i64>*
  store <2 x i64> %3924, <2 x i64>* %4014, align 16
  %4015 = getelementptr inbounds i32, i32* %1, i64 16
  %4016 = bitcast i32* %4015 to <2 x i64>*
  store <2 x i64> %3765, <2 x i64>* %4016, align 16
  %4017 = getelementptr inbounds i32, i32* %1, i64 20
  %4018 = bitcast i32* %4017 to <2 x i64>*
  store <2 x i64> %3797, <2 x i64>* %4018, align 16
  %4019 = getelementptr inbounds i32, i32* %1, i64 24
  %4020 = bitcast i32* %4019 to <2 x i64>*
  store <2 x i64> %3893, <2 x i64>* %4020, align 16
  %4021 = getelementptr inbounds i32, i32* %1, i64 28
  %4022 = bitcast i32* %4021 to <2 x i64>*
  store <2 x i64> %3925, <2 x i64>* %4022, align 16
  %4023 = getelementptr inbounds i32, i32* %1, i64 32
  %4024 = bitcast i32* %4023 to <2 x i64>*
  store <2 x i64> %3766, <2 x i64>* %4024, align 16
  %4025 = getelementptr inbounds i32, i32* %1, i64 36
  %4026 = bitcast i32* %4025 to <2 x i64>*
  store <2 x i64> %3798, <2 x i64>* %4026, align 16
  %4027 = getelementptr inbounds i32, i32* %1, i64 40
  %4028 = bitcast i32* %4027 to <2 x i64>*
  store <2 x i64> %3894, <2 x i64>* %4028, align 16
  %4029 = getelementptr inbounds i32, i32* %1, i64 44
  %4030 = bitcast i32* %4029 to <2 x i64>*
  store <2 x i64> %3926, <2 x i64>* %4030, align 16
  %4031 = getelementptr inbounds i32, i32* %1, i64 48
  %4032 = bitcast i32* %4031 to <2 x i64>*
  store <2 x i64> %3767, <2 x i64>* %4032, align 16
  %4033 = getelementptr inbounds i32, i32* %1, i64 52
  %4034 = bitcast i32* %4033 to <2 x i64>*
  store <2 x i64> %3799, <2 x i64>* %4034, align 16
  %4035 = getelementptr inbounds i32, i32* %1, i64 56
  %4036 = bitcast i32* %4035 to <2 x i64>*
  store <2 x i64> %3895, <2 x i64>* %4036, align 16
  %4037 = getelementptr inbounds i32, i32* %1, i64 60
  %4038 = bitcast i32* %4037 to <2 x i64>*
  store <2 x i64> %3927, <2 x i64>* %4038, align 16
  %4039 = getelementptr inbounds i32, i32* %1, i64 64
  %4040 = bitcast i32* %4039 to <2 x i64>*
  store <2 x i64> %3780, <2 x i64>* %4040, align 16
  %4041 = getelementptr inbounds i32, i32* %1, i64 68
  %4042 = bitcast i32* %4041 to <2 x i64>*
  %4043 = load <2 x i64>, <2 x i64>* %3513, align 16
  store <2 x i64> %4043, <2 x i64>* %4042, align 16
  %4044 = getelementptr inbounds i32, i32* %1, i64 72
  %4045 = bitcast i32* %4044 to <2 x i64>*
  %4046 = load <2 x i64>, <2 x i64>* %3624, align 16
  store <2 x i64> %4046, <2 x i64>* %4045, align 16
  %4047 = getelementptr inbounds i32, i32* %1, i64 76
  %4048 = bitcast i32* %4047 to <2 x i64>*
  %4049 = load <2 x i64>, <2 x i64>* %3663, align 16
  store <2 x i64> %4049, <2 x i64>* %4048, align 16
  %4050 = getelementptr inbounds i32, i32* %1, i64 80
  %4051 = bitcast i32* %4050 to <2 x i64>*
  %4052 = load <2 x i64>, <2 x i64>* %3476, align 16
  store <2 x i64> %4052, <2 x i64>* %4051, align 16
  %4053 = getelementptr inbounds i32, i32* %1, i64 84
  %4054 = bitcast i32* %4053 to <2 x i64>*
  %4055 = load <2 x i64>, <2 x i64>* %3515, align 16
  store <2 x i64> %4055, <2 x i64>* %4054, align 16
  %4056 = getelementptr inbounds i32, i32* %1, i64 88
  %4057 = bitcast i32* %4056 to <2 x i64>*
  %4058 = load <2 x i64>, <2 x i64>* %3626, align 16
  store <2 x i64> %4058, <2 x i64>* %4057, align 16
  %4059 = getelementptr inbounds i32, i32* %1, i64 92
  %4060 = bitcast i32* %4059 to <2 x i64>*
  %4061 = load <2 x i64>, <2 x i64>* %3665, align 16
  store <2 x i64> %4061, <2 x i64>* %4060, align 16
  %4062 = getelementptr inbounds i32, i32* %1, i64 96
  %4063 = bitcast i32* %4062 to <2 x i64>*
  %4064 = load <2 x i64>, <2 x i64>* %3478, align 16
  store <2 x i64> %4064, <2 x i64>* %4063, align 16
  %4065 = getelementptr inbounds i32, i32* %1, i64 100
  %4066 = bitcast i32* %4065 to <2 x i64>*
  %4067 = load <2 x i64>, <2 x i64>* %3517, align 16
  store <2 x i64> %4067, <2 x i64>* %4066, align 16
  %4068 = getelementptr inbounds i32, i32* %1, i64 104
  %4069 = bitcast i32* %4068 to <2 x i64>*
  %4070 = load <2 x i64>, <2 x i64>* %3628, align 16
  store <2 x i64> %4070, <2 x i64>* %4069, align 16
  %4071 = getelementptr inbounds i32, i32* %1, i64 108
  %4072 = bitcast i32* %4071 to <2 x i64>*
  %4073 = load <2 x i64>, <2 x i64>* %3667, align 16
  store <2 x i64> %4073, <2 x i64>* %4072, align 16
  %4074 = getelementptr inbounds i32, i32* %1, i64 112
  %4075 = bitcast i32* %4074 to <2 x i64>*
  %4076 = load <2 x i64>, <2 x i64>* %3480, align 16
  store <2 x i64> %4076, <2 x i64>* %4075, align 16
  %4077 = getelementptr inbounds i32, i32* %1, i64 116
  %4078 = bitcast i32* %4077 to <2 x i64>*
  %4079 = load <2 x i64>, <2 x i64>* %3519, align 16
  store <2 x i64> %4079, <2 x i64>* %4078, align 16
  %4080 = getelementptr inbounds i32, i32* %1, i64 120
  %4081 = bitcast i32* %4080 to <2 x i64>*
  %4082 = load <2 x i64>, <2 x i64>* %3630, align 16
  store <2 x i64> %4082, <2 x i64>* %4081, align 16
  %4083 = getelementptr inbounds i32, i32* %1, i64 124
  %4084 = bitcast i32* %4083 to <2 x i64>*
  %4085 = load <2 x i64>, <2 x i64>* %3669, align 16
  store <2 x i64> %4085, <2 x i64>* %4084, align 16
  %4086 = getelementptr inbounds i32, i32* %1, i64 128
  %4087 = bitcast i32* %4086 to <2 x i64>*
  store <2 x i64> %3828, <2 x i64>* %4087, align 16
  %4088 = getelementptr inbounds i32, i32* %1, i64 132
  %4089 = bitcast i32* %4088 to <2 x i64>*
  store <2 x i64> %3860, <2 x i64>* %4089, align 16
  %4090 = getelementptr inbounds i32, i32* %1, i64 136
  %4091 = bitcast i32* %4090 to <2 x i64>*
  store <2 x i64> %3956, <2 x i64>* %4091, align 16
  %4092 = getelementptr inbounds i32, i32* %1, i64 140
  %4093 = bitcast i32* %4092 to <2 x i64>*
  store <2 x i64> %3988, <2 x i64>* %4093, align 16
  %4094 = getelementptr inbounds i32, i32* %1, i64 144
  %4095 = bitcast i32* %4094 to <2 x i64>*
  %4096 = load <2 x i64>, <2 x i64>* %3531, align 16
  store <2 x i64> %4096, <2 x i64>* %4095, align 16
  %4097 = getelementptr inbounds i32, i32* %1, i64 148
  %4098 = bitcast i32* %4097 to <2 x i64>*
  %4099 = load <2 x i64>, <2 x i64>* %3567, align 16
  store <2 x i64> %4099, <2 x i64>* %4098, align 16
  %4100 = getelementptr inbounds i32, i32* %1, i64 152
  %4101 = bitcast i32* %4100 to <2 x i64>*
  %4102 = load <2 x i64>, <2 x i64>* %3685, align 16
  store <2 x i64> %4102, <2 x i64>* %4101, align 16
  %4103 = getelementptr inbounds i32, i32* %1, i64 156
  %4104 = bitcast i32* %4103 to <2 x i64>*
  %4105 = load <2 x i64>, <2 x i64>* %3725, align 16
  store <2 x i64> %4105, <2 x i64>* %4104, align 16
  %4106 = getelementptr inbounds i32, i32* %1, i64 160
  %4107 = bitcast i32* %4106 to <2 x i64>*
  %4108 = load <2 x i64>, <2 x i64>* %3533, align 16
  store <2 x i64> %4108, <2 x i64>* %4107, align 16
  %4109 = getelementptr inbounds i32, i32* %1, i64 164
  %4110 = bitcast i32* %4109 to <2 x i64>*
  %4111 = load <2 x i64>, <2 x i64>* %3569, align 16
  store <2 x i64> %4111, <2 x i64>* %4110, align 16
  %4112 = getelementptr inbounds i32, i32* %1, i64 168
  %4113 = bitcast i32* %4112 to <2 x i64>*
  %4114 = load <2 x i64>, <2 x i64>* %3687, align 16
  store <2 x i64> %4114, <2 x i64>* %4113, align 16
  %4115 = getelementptr inbounds i32, i32* %1, i64 172
  %4116 = bitcast i32* %4115 to <2 x i64>*
  %4117 = load <2 x i64>, <2 x i64>* %3727, align 16
  store <2 x i64> %4117, <2 x i64>* %4116, align 16
  %4118 = getelementptr inbounds i32, i32* %1, i64 176
  %4119 = bitcast i32* %4118 to <2 x i64>*
  %4120 = load <2 x i64>, <2 x i64>* %3535, align 16
  store <2 x i64> %4120, <2 x i64>* %4119, align 16
  %4121 = getelementptr inbounds i32, i32* %1, i64 180
  %4122 = bitcast i32* %4121 to <2 x i64>*
  %4123 = load <2 x i64>, <2 x i64>* %3571, align 16
  store <2 x i64> %4123, <2 x i64>* %4122, align 16
  %4124 = getelementptr inbounds i32, i32* %1, i64 184
  %4125 = bitcast i32* %4124 to <2 x i64>*
  %4126 = load <2 x i64>, <2 x i64>* %3689, align 16
  store <2 x i64> %4126, <2 x i64>* %4125, align 16
  %4127 = getelementptr inbounds i32, i32* %1, i64 188
  %4128 = bitcast i32* %4127 to <2 x i64>*
  %4129 = load <2 x i64>, <2 x i64>* %3729, align 16
  store <2 x i64> %4129, <2 x i64>* %4128, align 16
  %4130 = getelementptr inbounds i32, i32* %1, i64 192
  %4131 = bitcast i32* %4130 to <2 x i64>*
  %4132 = load <2 x i64>, <2 x i64>* %3545, align 16
  store <2 x i64> %4132, <2 x i64>* %4131, align 16
  %4133 = getelementptr inbounds i32, i32* %1, i64 196
  %4134 = bitcast i32* %4133 to <2 x i64>*
  %4135 = load <2 x i64>, <2 x i64>* %3585, align 16
  store <2 x i64> %4135, <2 x i64>* %4134, align 16
  %4136 = getelementptr inbounds i32, i32* %1, i64 200
  %4137 = bitcast i32* %4136 to <2 x i64>*
  %4138 = load <2 x i64>, <2 x i64>* %3703, align 16
  store <2 x i64> %4138, <2 x i64>* %4137, align 16
  %4139 = getelementptr inbounds i32, i32* %1, i64 204
  %4140 = bitcast i32* %4139 to <2 x i64>*
  %4141 = load <2 x i64>, <2 x i64>* %3743, align 16
  store <2 x i64> %4141, <2 x i64>* %4140, align 16
  %4142 = getelementptr inbounds i32, i32* %1, i64 208
  %4143 = bitcast i32* %4142 to <2 x i64>*
  %4144 = load <2 x i64>, <2 x i64>* %3547, align 16
  store <2 x i64> %4144, <2 x i64>* %4143, align 16
  %4145 = getelementptr inbounds i32, i32* %1, i64 212
  %4146 = bitcast i32* %4145 to <2 x i64>*
  %4147 = load <2 x i64>, <2 x i64>* %3587, align 16
  store <2 x i64> %4147, <2 x i64>* %4146, align 16
  %4148 = getelementptr inbounds i32, i32* %1, i64 216
  %4149 = bitcast i32* %4148 to <2 x i64>*
  %4150 = load <2 x i64>, <2 x i64>* %3705, align 16
  store <2 x i64> %4150, <2 x i64>* %4149, align 16
  %4151 = getelementptr inbounds i32, i32* %1, i64 220
  %4152 = bitcast i32* %4151 to <2 x i64>*
  %4153 = load <2 x i64>, <2 x i64>* %3745, align 16
  store <2 x i64> %4153, <2 x i64>* %4152, align 16
  %4154 = getelementptr inbounds i32, i32* %1, i64 224
  %4155 = bitcast i32* %4154 to <2 x i64>*
  %4156 = load <2 x i64>, <2 x i64>* %3549, align 16
  store <2 x i64> %4156, <2 x i64>* %4155, align 16
  %4157 = getelementptr inbounds i32, i32* %1, i64 228
  %4158 = bitcast i32* %4157 to <2 x i64>*
  %4159 = load <2 x i64>, <2 x i64>* %3589, align 16
  store <2 x i64> %4159, <2 x i64>* %4158, align 16
  %4160 = getelementptr inbounds i32, i32* %1, i64 232
  %4161 = bitcast i32* %4160 to <2 x i64>*
  %4162 = load <2 x i64>, <2 x i64>* %3707, align 16
  store <2 x i64> %4162, <2 x i64>* %4161, align 16
  %4163 = getelementptr inbounds i32, i32* %1, i64 236
  %4164 = bitcast i32* %4163 to <2 x i64>*
  %4165 = load <2 x i64>, <2 x i64>* %3747, align 16
  store <2 x i64> %4165, <2 x i64>* %4164, align 16
  %4166 = getelementptr inbounds i32, i32* %1, i64 240
  %4167 = bitcast i32* %4166 to <2 x i64>*
  %4168 = load <2 x i64>, <2 x i64>* %3551, align 16
  store <2 x i64> %4168, <2 x i64>* %4167, align 16
  %4169 = getelementptr inbounds i32, i32* %1, i64 244
  %4170 = bitcast i32* %4169 to <2 x i64>*
  %4171 = load <2 x i64>, <2 x i64>* %3591, align 16
  store <2 x i64> %4171, <2 x i64>* %4170, align 16
  %4172 = getelementptr inbounds i32, i32* %1, i64 248
  %4173 = bitcast i32* %4172 to <2 x i64>*
  %4174 = load <2 x i64>, <2 x i64>* %3709, align 16
  store <2 x i64> %4174, <2 x i64>* %4173, align 16
  %4175 = getelementptr inbounds i32, i32* %1, i64 252
  %4176 = bitcast i32* %4175 to <2 x i64>*
  %4177 = load <2 x i64>, <2 x i64>* %3749, align 16
  store <2 x i64> %4177, <2 x i64>* %4176, align 16
  br label %17357

4178:                                             ; preds = %5
  %4179 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %4180 = load i8, i8* %10, align 1
  %4181 = sext i8 %4180 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %4179, i32 %2, i32 1, i32 0, i32 %4181)
  %4182 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %4183 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  %4184 = sext i8 %4183 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %4179, <2 x i64>* nonnull %4182, i32 %4184, i32 4)
  %4185 = getelementptr inbounds i8, i8* %10, i64 1
  %4186 = load i8, i8* %4185, align 1
  %4187 = sext i8 %4186 to i32
  %4188 = sub nsw i32 0, %4187
  %4189 = xor i32 %4187, -1
  %4190 = shl i32 1, %4189
  %4191 = insertelement <4 x i32> undef, i32 %4190, i32 0
  %4192 = shufflevector <4 x i32> %4191, <4 x i32> undef, <4 x i32> zeroinitializer
  %4193 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %4194 = load <4 x i32>, <4 x i32>* %4193, align 16
  %4195 = add <4 x i32> %4192, %4194
  %4196 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %4197 = bitcast <2 x i64>* %4196 to <4 x i32>*
  %4198 = load <4 x i32>, <4 x i32>* %4197, align 16
  %4199 = add <4 x i32> %4192, %4198
  %4200 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %4201 = bitcast <2 x i64>* %4200 to <4 x i32>*
  %4202 = load <4 x i32>, <4 x i32>* %4201, align 16
  %4203 = add <4 x i32> %4192, %4202
  %4204 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %4205 = bitcast <2 x i64>* %4204 to <4 x i32>*
  %4206 = load <4 x i32>, <4 x i32>* %4205, align 16
  %4207 = add <4 x i32> %4206, %4192
  %4208 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %4209 = bitcast <2 x i64>* %4208 to <4 x i32>*
  %4210 = load <4 x i32>, <4 x i32>* %4209, align 16
  %4211 = add <4 x i32> %4210, %4192
  %4212 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %4213 = bitcast <2 x i64>* %4212 to <4 x i32>*
  %4214 = load <4 x i32>, <4 x i32>* %4213, align 16
  %4215 = add <4 x i32> %4214, %4192
  %4216 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %4217 = bitcast <2 x i64>* %4216 to <4 x i32>*
  %4218 = load <4 x i32>, <4 x i32>* %4217, align 16
  %4219 = add <4 x i32> %4218, %4192
  %4220 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %4221 = bitcast <2 x i64>* %4220 to <4 x i32>*
  %4222 = load <4 x i32>, <4 x i32>* %4221, align 16
  %4223 = add <4 x i32> %4222, %4192
  %4224 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %4225 = bitcast <2 x i64>* %4224 to <4 x i32>*
  %4226 = load <4 x i32>, <4 x i32>* %4225, align 16
  %4227 = add <4 x i32> %4226, %4192
  %4228 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %4229 = bitcast <2 x i64>* %4228 to <4 x i32>*
  %4230 = load <4 x i32>, <4 x i32>* %4229, align 16
  %4231 = add <4 x i32> %4230, %4192
  %4232 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %4233 = bitcast <2 x i64>* %4232 to <4 x i32>*
  %4234 = load <4 x i32>, <4 x i32>* %4233, align 16
  %4235 = add <4 x i32> %4234, %4192
  %4236 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %4237 = bitcast <2 x i64>* %4236 to <4 x i32>*
  %4238 = load <4 x i32>, <4 x i32>* %4237, align 16
  %4239 = add <4 x i32> %4238, %4192
  %4240 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %4241 = bitcast <2 x i64>* %4240 to <4 x i32>*
  %4242 = load <4 x i32>, <4 x i32>* %4241, align 16
  %4243 = add <4 x i32> %4242, %4192
  %4244 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %4245 = bitcast <2 x i64>* %4244 to <4 x i32>*
  %4246 = load <4 x i32>, <4 x i32>* %4245, align 16
  %4247 = add <4 x i32> %4246, %4192
  %4248 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %4249 = bitcast <2 x i64>* %4248 to <4 x i32>*
  %4250 = load <4 x i32>, <4 x i32>* %4249, align 16
  %4251 = add <4 x i32> %4250, %4192
  %4252 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %4253 = bitcast <2 x i64>* %4252 to <4 x i32>*
  %4254 = load <4 x i32>, <4 x i32>* %4253, align 16
  %4255 = add <4 x i32> %4254, %4192
  %4256 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4195, i32 %4188) #8
  store <4 x i32> %4256, <4 x i32>* %4193, align 16
  %4257 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4199, i32 %4188) #8
  store <4 x i32> %4257, <4 x i32>* %4197, align 16
  %4258 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4203, i32 %4188) #8
  store <4 x i32> %4258, <4 x i32>* %4201, align 16
  %4259 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4207, i32 %4188) #8
  store <4 x i32> %4259, <4 x i32>* %4205, align 16
  %4260 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4211, i32 %4188) #8
  store <4 x i32> %4260, <4 x i32>* %4209, align 16
  %4261 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4215, i32 %4188) #8
  store <4 x i32> %4261, <4 x i32>* %4213, align 16
  %4262 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4219, i32 %4188) #8
  store <4 x i32> %4262, <4 x i32>* %4217, align 16
  %4263 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4223, i32 %4188) #8
  store <4 x i32> %4263, <4 x i32>* %4221, align 16
  %4264 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4227, i32 %4188) #8
  store <4 x i32> %4264, <4 x i32>* %4225, align 16
  %4265 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4231, i32 %4188) #8
  store <4 x i32> %4265, <4 x i32>* %4229, align 16
  %4266 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4235, i32 %4188) #8
  store <4 x i32> %4266, <4 x i32>* %4233, align 16
  %4267 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4239, i32 %4188) #8
  store <4 x i32> %4267, <4 x i32>* %4237, align 16
  %4268 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4243, i32 %4188) #8
  store <4 x i32> %4268, <4 x i32>* %4241, align 16
  %4269 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4247, i32 %4188) #8
  store <4 x i32> %4269, <4 x i32>* %4245, align 16
  %4270 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4251, i32 %4188) #8
  store <4 x i32> %4270, <4 x i32>* %4249, align 16
  %4271 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4255, i32 %4188) #8
  store <4 x i32> %4271, <4 x i32>* %4253, align 16
  %4272 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %4273 = bitcast <2 x i64>* %4272 to <4 x i32>*
  %4274 = load <4 x i32>, <4 x i32>* %4273, align 16
  %4275 = add <4 x i32> %4274, %4192
  %4276 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %4277 = bitcast <2 x i64>* %4276 to <4 x i32>*
  %4278 = load <4 x i32>, <4 x i32>* %4277, align 16
  %4279 = add <4 x i32> %4278, %4192
  %4280 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %4281 = bitcast <2 x i64>* %4280 to <4 x i32>*
  %4282 = load <4 x i32>, <4 x i32>* %4281, align 16
  %4283 = add <4 x i32> %4282, %4192
  %4284 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %4285 = bitcast <2 x i64>* %4284 to <4 x i32>*
  %4286 = load <4 x i32>, <4 x i32>* %4285, align 16
  %4287 = add <4 x i32> %4286, %4192
  %4288 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %4289 = bitcast <2 x i64>* %4288 to <4 x i32>*
  %4290 = load <4 x i32>, <4 x i32>* %4289, align 16
  %4291 = add <4 x i32> %4290, %4192
  %4292 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %4293 = bitcast <2 x i64>* %4292 to <4 x i32>*
  %4294 = load <4 x i32>, <4 x i32>* %4293, align 16
  %4295 = add <4 x i32> %4294, %4192
  %4296 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %4297 = bitcast <2 x i64>* %4296 to <4 x i32>*
  %4298 = load <4 x i32>, <4 x i32>* %4297, align 16
  %4299 = add <4 x i32> %4298, %4192
  %4300 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %4301 = bitcast <2 x i64>* %4300 to <4 x i32>*
  %4302 = load <4 x i32>, <4 x i32>* %4301, align 16
  %4303 = add <4 x i32> %4302, %4192
  %4304 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %4305 = bitcast <2 x i64>* %4304 to <4 x i32>*
  %4306 = load <4 x i32>, <4 x i32>* %4305, align 16
  %4307 = add <4 x i32> %4306, %4192
  %4308 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %4309 = bitcast <2 x i64>* %4308 to <4 x i32>*
  %4310 = load <4 x i32>, <4 x i32>* %4309, align 16
  %4311 = add <4 x i32> %4310, %4192
  %4312 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %4313 = bitcast <2 x i64>* %4312 to <4 x i32>*
  %4314 = load <4 x i32>, <4 x i32>* %4313, align 16
  %4315 = add <4 x i32> %4314, %4192
  %4316 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %4317 = bitcast <2 x i64>* %4316 to <4 x i32>*
  %4318 = load <4 x i32>, <4 x i32>* %4317, align 16
  %4319 = add <4 x i32> %4318, %4192
  %4320 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %4321 = bitcast <2 x i64>* %4320 to <4 x i32>*
  %4322 = load <4 x i32>, <4 x i32>* %4321, align 16
  %4323 = add <4 x i32> %4322, %4192
  %4324 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %4325 = bitcast <2 x i64>* %4324 to <4 x i32>*
  %4326 = load <4 x i32>, <4 x i32>* %4325, align 16
  %4327 = add <4 x i32> %4326, %4192
  %4328 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %4329 = bitcast <2 x i64>* %4328 to <4 x i32>*
  %4330 = load <4 x i32>, <4 x i32>* %4329, align 16
  %4331 = add <4 x i32> %4330, %4192
  %4332 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %4333 = bitcast <2 x i64>* %4332 to <4 x i32>*
  %4334 = load <4 x i32>, <4 x i32>* %4333, align 16
  %4335 = add <4 x i32> %4334, %4192
  %4336 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4275, i32 %4188) #8
  store <4 x i32> %4336, <4 x i32>* %4273, align 16
  %4337 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4279, i32 %4188) #8
  store <4 x i32> %4337, <4 x i32>* %4277, align 16
  %4338 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4283, i32 %4188) #8
  store <4 x i32> %4338, <4 x i32>* %4281, align 16
  %4339 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4287, i32 %4188) #8
  store <4 x i32> %4339, <4 x i32>* %4285, align 16
  %4340 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4291, i32 %4188) #8
  store <4 x i32> %4340, <4 x i32>* %4289, align 16
  %4341 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4295, i32 %4188) #8
  store <4 x i32> %4341, <4 x i32>* %4293, align 16
  %4342 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4299, i32 %4188) #8
  store <4 x i32> %4342, <4 x i32>* %4297, align 16
  %4343 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4303, i32 %4188) #8
  store <4 x i32> %4343, <4 x i32>* %4301, align 16
  %4344 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4307, i32 %4188) #8
  store <4 x i32> %4344, <4 x i32>* %4305, align 16
  %4345 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4311, i32 %4188) #8
  store <4 x i32> %4345, <4 x i32>* %4309, align 16
  %4346 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4315, i32 %4188) #8
  store <4 x i32> %4346, <4 x i32>* %4313, align 16
  %4347 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4319, i32 %4188) #8
  store <4 x i32> %4347, <4 x i32>* %4317, align 16
  %4348 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4323, i32 %4188) #8
  store <4 x i32> %4348, <4 x i32>* %4321, align 16
  %4349 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4327, i32 %4188) #8
  store <4 x i32> %4349, <4 x i32>* %4325, align 16
  %4350 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4331, i32 %4188) #8
  store <4 x i32> %4350, <4 x i32>* %4329, align 16
  %4351 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4335, i32 %4188) #8
  store <4 x i32> %4351, <4 x i32>* %4333, align 16
  %4352 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %4353 = bitcast <2 x i64>* %4352 to <4 x i32>*
  %4354 = load <4 x i32>, <4 x i32>* %4353, align 16
  %4355 = add <4 x i32> %4354, %4192
  %4356 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %4357 = bitcast <2 x i64>* %4356 to <4 x i32>*
  %4358 = load <4 x i32>, <4 x i32>* %4357, align 16
  %4359 = add <4 x i32> %4358, %4192
  %4360 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %4361 = bitcast <2 x i64>* %4360 to <4 x i32>*
  %4362 = load <4 x i32>, <4 x i32>* %4361, align 16
  %4363 = add <4 x i32> %4362, %4192
  %4364 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %4365 = bitcast <2 x i64>* %4364 to <4 x i32>*
  %4366 = load <4 x i32>, <4 x i32>* %4365, align 16
  %4367 = add <4 x i32> %4366, %4192
  %4368 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %4369 = bitcast <2 x i64>* %4368 to <4 x i32>*
  %4370 = load <4 x i32>, <4 x i32>* %4369, align 16
  %4371 = add <4 x i32> %4370, %4192
  %4372 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %4373 = bitcast <2 x i64>* %4372 to <4 x i32>*
  %4374 = load <4 x i32>, <4 x i32>* %4373, align 16
  %4375 = add <4 x i32> %4374, %4192
  %4376 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %4377 = bitcast <2 x i64>* %4376 to <4 x i32>*
  %4378 = load <4 x i32>, <4 x i32>* %4377, align 16
  %4379 = add <4 x i32> %4378, %4192
  %4380 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %4381 = bitcast <2 x i64>* %4380 to <4 x i32>*
  %4382 = load <4 x i32>, <4 x i32>* %4381, align 16
  %4383 = add <4 x i32> %4382, %4192
  %4384 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %4385 = bitcast <2 x i64>* %4384 to <4 x i32>*
  %4386 = load <4 x i32>, <4 x i32>* %4385, align 16
  %4387 = add <4 x i32> %4386, %4192
  %4388 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %4389 = bitcast <2 x i64>* %4388 to <4 x i32>*
  %4390 = load <4 x i32>, <4 x i32>* %4389, align 16
  %4391 = add <4 x i32> %4390, %4192
  %4392 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %4393 = bitcast <2 x i64>* %4392 to <4 x i32>*
  %4394 = load <4 x i32>, <4 x i32>* %4393, align 16
  %4395 = add <4 x i32> %4394, %4192
  %4396 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %4397 = bitcast <2 x i64>* %4396 to <4 x i32>*
  %4398 = load <4 x i32>, <4 x i32>* %4397, align 16
  %4399 = add <4 x i32> %4398, %4192
  %4400 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %4401 = bitcast <2 x i64>* %4400 to <4 x i32>*
  %4402 = load <4 x i32>, <4 x i32>* %4401, align 16
  %4403 = add <4 x i32> %4402, %4192
  %4404 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %4405 = bitcast <2 x i64>* %4404 to <4 x i32>*
  %4406 = load <4 x i32>, <4 x i32>* %4405, align 16
  %4407 = add <4 x i32> %4406, %4192
  %4408 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %4409 = bitcast <2 x i64>* %4408 to <4 x i32>*
  %4410 = load <4 x i32>, <4 x i32>* %4409, align 16
  %4411 = add <4 x i32> %4410, %4192
  %4412 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %4413 = bitcast <2 x i64>* %4412 to <4 x i32>*
  %4414 = load <4 x i32>, <4 x i32>* %4413, align 16
  %4415 = add <4 x i32> %4414, %4192
  %4416 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4355, i32 %4188) #8
  store <4 x i32> %4416, <4 x i32>* %4353, align 16
  %4417 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4359, i32 %4188) #8
  store <4 x i32> %4417, <4 x i32>* %4357, align 16
  %4418 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4363, i32 %4188) #8
  store <4 x i32> %4418, <4 x i32>* %4361, align 16
  %4419 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4367, i32 %4188) #8
  store <4 x i32> %4419, <4 x i32>* %4365, align 16
  %4420 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4371, i32 %4188) #8
  store <4 x i32> %4420, <4 x i32>* %4369, align 16
  %4421 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4375, i32 %4188) #8
  store <4 x i32> %4421, <4 x i32>* %4373, align 16
  %4422 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4379, i32 %4188) #8
  store <4 x i32> %4422, <4 x i32>* %4377, align 16
  %4423 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4383, i32 %4188) #8
  store <4 x i32> %4423, <4 x i32>* %4381, align 16
  %4424 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4387, i32 %4188) #8
  store <4 x i32> %4424, <4 x i32>* %4385, align 16
  %4425 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4391, i32 %4188) #8
  store <4 x i32> %4425, <4 x i32>* %4389, align 16
  %4426 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4395, i32 %4188) #8
  store <4 x i32> %4426, <4 x i32>* %4393, align 16
  %4427 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4399, i32 %4188) #8
  store <4 x i32> %4427, <4 x i32>* %4397, align 16
  %4428 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4403, i32 %4188) #8
  store <4 x i32> %4428, <4 x i32>* %4401, align 16
  %4429 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4407, i32 %4188) #8
  store <4 x i32> %4429, <4 x i32>* %4405, align 16
  %4430 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4411, i32 %4188) #8
  store <4 x i32> %4430, <4 x i32>* %4409, align 16
  %4431 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4415, i32 %4188) #8
  store <4 x i32> %4431, <4 x i32>* %4413, align 16
  %4432 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %4433 = bitcast <2 x i64>* %4432 to <4 x i32>*
  %4434 = load <4 x i32>, <4 x i32>* %4433, align 16
  %4435 = add <4 x i32> %4434, %4192
  %4436 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %4437 = bitcast <2 x i64>* %4436 to <4 x i32>*
  %4438 = load <4 x i32>, <4 x i32>* %4437, align 16
  %4439 = add <4 x i32> %4438, %4192
  %4440 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %4441 = bitcast <2 x i64>* %4440 to <4 x i32>*
  %4442 = load <4 x i32>, <4 x i32>* %4441, align 16
  %4443 = add <4 x i32> %4442, %4192
  %4444 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %4445 = bitcast <2 x i64>* %4444 to <4 x i32>*
  %4446 = load <4 x i32>, <4 x i32>* %4445, align 16
  %4447 = add <4 x i32> %4446, %4192
  %4448 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %4449 = bitcast <2 x i64>* %4448 to <4 x i32>*
  %4450 = load <4 x i32>, <4 x i32>* %4449, align 16
  %4451 = add <4 x i32> %4450, %4192
  %4452 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %4453 = bitcast <2 x i64>* %4452 to <4 x i32>*
  %4454 = load <4 x i32>, <4 x i32>* %4453, align 16
  %4455 = add <4 x i32> %4454, %4192
  %4456 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %4457 = bitcast <2 x i64>* %4456 to <4 x i32>*
  %4458 = load <4 x i32>, <4 x i32>* %4457, align 16
  %4459 = add <4 x i32> %4458, %4192
  %4460 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %4461 = bitcast <2 x i64>* %4460 to <4 x i32>*
  %4462 = load <4 x i32>, <4 x i32>* %4461, align 16
  %4463 = add <4 x i32> %4462, %4192
  %4464 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %4465 = bitcast <2 x i64>* %4464 to <4 x i32>*
  %4466 = load <4 x i32>, <4 x i32>* %4465, align 16
  %4467 = add <4 x i32> %4466, %4192
  %4468 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %4469 = bitcast <2 x i64>* %4468 to <4 x i32>*
  %4470 = load <4 x i32>, <4 x i32>* %4469, align 16
  %4471 = add <4 x i32> %4470, %4192
  %4472 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %4473 = bitcast <2 x i64>* %4472 to <4 x i32>*
  %4474 = load <4 x i32>, <4 x i32>* %4473, align 16
  %4475 = add <4 x i32> %4474, %4192
  %4476 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %4477 = bitcast <2 x i64>* %4476 to <4 x i32>*
  %4478 = load <4 x i32>, <4 x i32>* %4477, align 16
  %4479 = add <4 x i32> %4478, %4192
  %4480 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %4481 = bitcast <2 x i64>* %4480 to <4 x i32>*
  %4482 = load <4 x i32>, <4 x i32>* %4481, align 16
  %4483 = add <4 x i32> %4482, %4192
  %4484 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %4485 = bitcast <2 x i64>* %4484 to <4 x i32>*
  %4486 = load <4 x i32>, <4 x i32>* %4485, align 16
  %4487 = add <4 x i32> %4486, %4192
  %4488 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %4489 = bitcast <2 x i64>* %4488 to <4 x i32>*
  %4490 = load <4 x i32>, <4 x i32>* %4489, align 16
  %4491 = add <4 x i32> %4490, %4192
  %4492 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %4493 = bitcast <2 x i64>* %4492 to <4 x i32>*
  %4494 = load <4 x i32>, <4 x i32>* %4493, align 16
  %4495 = add <4 x i32> %4494, %4192
  %4496 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4435, i32 %4188) #8
  store <4 x i32> %4496, <4 x i32>* %4433, align 16
  %4497 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4439, i32 %4188) #8
  store <4 x i32> %4497, <4 x i32>* %4437, align 16
  %4498 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4443, i32 %4188) #8
  store <4 x i32> %4498, <4 x i32>* %4441, align 16
  %4499 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4447, i32 %4188) #8
  store <4 x i32> %4499, <4 x i32>* %4445, align 16
  %4500 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4451, i32 %4188) #8
  store <4 x i32> %4500, <4 x i32>* %4449, align 16
  %4501 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4455, i32 %4188) #8
  store <4 x i32> %4501, <4 x i32>* %4453, align 16
  %4502 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4459, i32 %4188) #8
  store <4 x i32> %4502, <4 x i32>* %4457, align 16
  %4503 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4463, i32 %4188) #8
  store <4 x i32> %4503, <4 x i32>* %4461, align 16
  %4504 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4467, i32 %4188) #8
  store <4 x i32> %4504, <4 x i32>* %4465, align 16
  %4505 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4471, i32 %4188) #8
  store <4 x i32> %4505, <4 x i32>* %4469, align 16
  %4506 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4475, i32 %4188) #8
  store <4 x i32> %4506, <4 x i32>* %4473, align 16
  %4507 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4479, i32 %4188) #8
  store <4 x i32> %4507, <4 x i32>* %4477, align 16
  %4508 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4483, i32 %4188) #8
  store <4 x i32> %4508, <4 x i32>* %4481, align 16
  %4509 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4487, i32 %4188) #8
  store <4 x i32> %4509, <4 x i32>* %4485, align 16
  %4510 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4491, i32 %4188) #8
  store <4 x i32> %4510, <4 x i32>* %4489, align 16
  %4511 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %4495, i32 %4188) #8
  store <4 x i32> %4511, <4 x i32>* %4493, align 16
  %4512 = shufflevector <4 x i32> %4256, <4 x i32> %4260, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4513 = bitcast <4 x i32> %4512 to <2 x i64>
  %4514 = shufflevector <4 x i32> %4256, <4 x i32> %4260, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4515 = bitcast <4 x i32> %4514 to <2 x i64>
  %4516 = shufflevector <4 x i32> %4264, <4 x i32> %4268, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4517 = bitcast <4 x i32> %4516 to <2 x i64>
  %4518 = shufflevector <4 x i32> %4264, <4 x i32> %4268, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4519 = bitcast <4 x i32> %4518 to <2 x i64>
  %4520 = shufflevector <2 x i64> %4513, <2 x i64> %4517, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4520, <2 x i64>* %4179, align 16
  %4521 = shufflevector <2 x i64> %4513, <2 x i64> %4517, <2 x i32> <i32 1, i32 3>
  %4522 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %4521, <2 x i64>* %4522, align 16
  %4523 = shufflevector <2 x i64> %4515, <2 x i64> %4519, <2 x i32> <i32 0, i32 2>
  %4524 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %4523, <2 x i64>* %4524, align 16
  %4525 = shufflevector <2 x i64> %4515, <2 x i64> %4519, <2 x i32> <i32 1, i32 3>
  %4526 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %4525, <2 x i64>* %4526, align 16
  %4527 = shufflevector <4 x i32> %4257, <4 x i32> %4261, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4528 = bitcast <4 x i32> %4527 to <2 x i64>
  %4529 = shufflevector <4 x i32> %4257, <4 x i32> %4261, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4530 = bitcast <4 x i32> %4529 to <2 x i64>
  %4531 = shufflevector <4 x i32> %4265, <4 x i32> %4269, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4532 = bitcast <4 x i32> %4531 to <2 x i64>
  %4533 = shufflevector <4 x i32> %4265, <4 x i32> %4269, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4534 = bitcast <4 x i32> %4533 to <2 x i64>
  %4535 = shufflevector <2 x i64> %4528, <2 x i64> %4532, <2 x i32> <i32 0, i32 2>
  %4536 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %4535, <2 x i64>* %4536, align 16
  %4537 = shufflevector <2 x i64> %4528, <2 x i64> %4532, <2 x i32> <i32 1, i32 3>
  %4538 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %4537, <2 x i64>* %4538, align 16
  %4539 = shufflevector <2 x i64> %4530, <2 x i64> %4534, <2 x i32> <i32 0, i32 2>
  %4540 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %4539, <2 x i64>* %4540, align 16
  %4541 = shufflevector <2 x i64> %4530, <2 x i64> %4534, <2 x i32> <i32 1, i32 3>
  %4542 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %4541, <2 x i64>* %4542, align 16
  %4543 = load <4 x i32>, <4 x i32>* %4289, align 16
  %4544 = shufflevector <4 x i32> %4336, <4 x i32> %4543, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4545 = bitcast <4 x i32> %4544 to <2 x i64>
  %4546 = shufflevector <4 x i32> %4336, <4 x i32> %4543, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4547 = bitcast <4 x i32> %4546 to <2 x i64>
  %4548 = load <4 x i32>, <4 x i32>* %4305, align 16
  %4549 = load <4 x i32>, <4 x i32>* %4321, align 16
  %4550 = shufflevector <4 x i32> %4548, <4 x i32> %4549, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4551 = bitcast <4 x i32> %4550 to <2 x i64>
  %4552 = shufflevector <4 x i32> %4548, <4 x i32> %4549, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4553 = bitcast <4 x i32> %4552 to <2 x i64>
  %4554 = shufflevector <2 x i64> %4545, <2 x i64> %4551, <2 x i32> <i32 0, i32 2>
  %4555 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %4554, <2 x i64>* %4555, align 16
  %4556 = shufflevector <2 x i64> %4545, <2 x i64> %4551, <2 x i32> <i32 1, i32 3>
  %4557 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %4556, <2 x i64>* %4557, align 16
  %4558 = shufflevector <2 x i64> %4547, <2 x i64> %4553, <2 x i32> <i32 0, i32 2>
  %4559 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %4558, <2 x i64>* %4559, align 16
  %4560 = shufflevector <2 x i64> %4547, <2 x i64> %4553, <2 x i32> <i32 1, i32 3>
  %4561 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %4560, <2 x i64>* %4561, align 16
  %4562 = load <4 x i32>, <4 x i32>* %4277, align 16
  %4563 = load <4 x i32>, <4 x i32>* %4293, align 16
  %4564 = shufflevector <4 x i32> %4562, <4 x i32> %4563, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4565 = bitcast <4 x i32> %4564 to <2 x i64>
  %4566 = shufflevector <4 x i32> %4562, <4 x i32> %4563, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4567 = bitcast <4 x i32> %4566 to <2 x i64>
  %4568 = load <4 x i32>, <4 x i32>* %4309, align 16
  %4569 = load <4 x i32>, <4 x i32>* %4325, align 16
  %4570 = shufflevector <4 x i32> %4568, <4 x i32> %4569, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4571 = bitcast <4 x i32> %4570 to <2 x i64>
  %4572 = shufflevector <4 x i32> %4568, <4 x i32> %4569, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4573 = bitcast <4 x i32> %4572 to <2 x i64>
  %4574 = shufflevector <2 x i64> %4565, <2 x i64> %4571, <2 x i32> <i32 0, i32 2>
  %4575 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %4574, <2 x i64>* %4575, align 16
  %4576 = shufflevector <2 x i64> %4565, <2 x i64> %4571, <2 x i32> <i32 1, i32 3>
  %4577 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %4576, <2 x i64>* %4577, align 16
  %4578 = shufflevector <2 x i64> %4567, <2 x i64> %4573, <2 x i32> <i32 0, i32 2>
  %4579 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %4578, <2 x i64>* %4579, align 16
  %4580 = shufflevector <2 x i64> %4567, <2 x i64> %4573, <2 x i32> <i32 1, i32 3>
  %4581 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %4580, <2 x i64>* %4581, align 16
  %4582 = shufflevector <4 x i32> %4258, <4 x i32> %4262, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4583 = bitcast <4 x i32> %4582 to <2 x i64>
  %4584 = shufflevector <4 x i32> %4258, <4 x i32> %4262, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4585 = bitcast <4 x i32> %4584 to <2 x i64>
  %4586 = shufflevector <4 x i32> %4266, <4 x i32> %4270, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4587 = bitcast <4 x i32> %4586 to <2 x i64>
  %4588 = shufflevector <4 x i32> %4266, <4 x i32> %4270, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4589 = bitcast <4 x i32> %4588 to <2 x i64>
  %4590 = shufflevector <2 x i64> %4583, <2 x i64> %4587, <2 x i32> <i32 0, i32 2>
  %4591 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %4590, <2 x i64>* %4591, align 16
  %4592 = shufflevector <2 x i64> %4583, <2 x i64> %4587, <2 x i32> <i32 1, i32 3>
  %4593 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %4592, <2 x i64>* %4593, align 16
  %4594 = shufflevector <2 x i64> %4585, <2 x i64> %4589, <2 x i32> <i32 0, i32 2>
  %4595 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %4594, <2 x i64>* %4595, align 16
  %4596 = shufflevector <2 x i64> %4585, <2 x i64> %4589, <2 x i32> <i32 1, i32 3>
  %4597 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %4596, <2 x i64>* %4597, align 16
  %4598 = shufflevector <4 x i32> %4259, <4 x i32> %4263, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4599 = bitcast <4 x i32> %4598 to <2 x i64>
  %4600 = shufflevector <4 x i32> %4259, <4 x i32> %4263, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4601 = bitcast <4 x i32> %4600 to <2 x i64>
  %4602 = shufflevector <4 x i32> %4267, <4 x i32> %4271, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4603 = bitcast <4 x i32> %4602 to <2 x i64>
  %4604 = shufflevector <4 x i32> %4267, <4 x i32> %4271, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4605 = bitcast <4 x i32> %4604 to <2 x i64>
  %4606 = shufflevector <2 x i64> %4599, <2 x i64> %4603, <2 x i32> <i32 0, i32 2>
  %4607 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %4606, <2 x i64>* %4607, align 16
  %4608 = shufflevector <2 x i64> %4599, <2 x i64> %4603, <2 x i32> <i32 1, i32 3>
  %4609 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %4608, <2 x i64>* %4609, align 16
  %4610 = shufflevector <2 x i64> %4601, <2 x i64> %4605, <2 x i32> <i32 0, i32 2>
  %4611 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %4610, <2 x i64>* %4611, align 16
  %4612 = shufflevector <2 x i64> %4601, <2 x i64> %4605, <2 x i32> <i32 1, i32 3>
  %4613 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %4612, <2 x i64>* %4613, align 16
  %4614 = load <4 x i32>, <4 x i32>* %4281, align 16
  %4615 = load <4 x i32>, <4 x i32>* %4297, align 16
  %4616 = shufflevector <4 x i32> %4614, <4 x i32> %4615, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4617 = bitcast <4 x i32> %4616 to <2 x i64>
  %4618 = shufflevector <4 x i32> %4614, <4 x i32> %4615, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4619 = bitcast <4 x i32> %4618 to <2 x i64>
  %4620 = load <4 x i32>, <4 x i32>* %4313, align 16
  %4621 = load <4 x i32>, <4 x i32>* %4329, align 16
  %4622 = shufflevector <4 x i32> %4620, <4 x i32> %4621, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4623 = bitcast <4 x i32> %4622 to <2 x i64>
  %4624 = shufflevector <4 x i32> %4620, <4 x i32> %4621, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4625 = bitcast <4 x i32> %4624 to <2 x i64>
  %4626 = shufflevector <2 x i64> %4617, <2 x i64> %4623, <2 x i32> <i32 0, i32 2>
  %4627 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %4626, <2 x i64>* %4627, align 16
  %4628 = shufflevector <2 x i64> %4617, <2 x i64> %4623, <2 x i32> <i32 1, i32 3>
  %4629 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %4628, <2 x i64>* %4629, align 16
  %4630 = shufflevector <2 x i64> %4619, <2 x i64> %4625, <2 x i32> <i32 0, i32 2>
  %4631 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %4630, <2 x i64>* %4631, align 16
  %4632 = shufflevector <2 x i64> %4619, <2 x i64> %4625, <2 x i32> <i32 1, i32 3>
  %4633 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %4632, <2 x i64>* %4633, align 16
  %4634 = load <4 x i32>, <4 x i32>* %4285, align 16
  %4635 = load <4 x i32>, <4 x i32>* %4301, align 16
  %4636 = shufflevector <4 x i32> %4634, <4 x i32> %4635, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4637 = bitcast <4 x i32> %4636 to <2 x i64>
  %4638 = shufflevector <4 x i32> %4634, <4 x i32> %4635, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4639 = bitcast <4 x i32> %4638 to <2 x i64>
  %4640 = load <4 x i32>, <4 x i32>* %4317, align 16
  %4641 = load <4 x i32>, <4 x i32>* %4333, align 16
  %4642 = shufflevector <4 x i32> %4640, <4 x i32> %4641, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4643 = bitcast <4 x i32> %4642 to <2 x i64>
  %4644 = shufflevector <4 x i32> %4640, <4 x i32> %4641, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4645 = bitcast <4 x i32> %4644 to <2 x i64>
  %4646 = shufflevector <2 x i64> %4637, <2 x i64> %4643, <2 x i32> <i32 0, i32 2>
  %4647 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %4646, <2 x i64>* %4647, align 16
  %4648 = shufflevector <2 x i64> %4637, <2 x i64> %4643, <2 x i32> <i32 1, i32 3>
  %4649 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %4648, <2 x i64>* %4649, align 16
  %4650 = shufflevector <2 x i64> %4639, <2 x i64> %4645, <2 x i32> <i32 0, i32 2>
  %4651 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %4650, <2 x i64>* %4651, align 16
  %4652 = shufflevector <2 x i64> %4639, <2 x i64> %4645, <2 x i32> <i32 1, i32 3>
  %4653 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %4652, <2 x i64>* %4653, align 16
  %4654 = load <4 x i32>, <4 x i32>* %4353, align 16
  %4655 = load <4 x i32>, <4 x i32>* %4369, align 16
  %4656 = shufflevector <4 x i32> %4654, <4 x i32> %4655, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4657 = bitcast <4 x i32> %4656 to <2 x i64>
  %4658 = shufflevector <4 x i32> %4654, <4 x i32> %4655, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4659 = bitcast <4 x i32> %4658 to <2 x i64>
  %4660 = load <4 x i32>, <4 x i32>* %4385, align 16
  %4661 = load <4 x i32>, <4 x i32>* %4401, align 16
  %4662 = shufflevector <4 x i32> %4660, <4 x i32> %4661, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4663 = bitcast <4 x i32> %4662 to <2 x i64>
  %4664 = shufflevector <4 x i32> %4660, <4 x i32> %4661, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4665 = bitcast <4 x i32> %4664 to <2 x i64>
  %4666 = shufflevector <2 x i64> %4657, <2 x i64> %4663, <2 x i32> <i32 0, i32 2>
  %4667 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %4666, <2 x i64>* %4667, align 16
  %4668 = shufflevector <2 x i64> %4657, <2 x i64> %4663, <2 x i32> <i32 1, i32 3>
  %4669 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %4668, <2 x i64>* %4669, align 16
  %4670 = shufflevector <2 x i64> %4659, <2 x i64> %4665, <2 x i32> <i32 0, i32 2>
  %4671 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %4670, <2 x i64>* %4671, align 16
  %4672 = shufflevector <2 x i64> %4659, <2 x i64> %4665, <2 x i32> <i32 1, i32 3>
  %4673 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %4672, <2 x i64>* %4673, align 16
  %4674 = load <4 x i32>, <4 x i32>* %4357, align 16
  %4675 = load <4 x i32>, <4 x i32>* %4373, align 16
  %4676 = shufflevector <4 x i32> %4674, <4 x i32> %4675, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4677 = bitcast <4 x i32> %4676 to <2 x i64>
  %4678 = shufflevector <4 x i32> %4674, <4 x i32> %4675, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4679 = bitcast <4 x i32> %4678 to <2 x i64>
  %4680 = load <4 x i32>, <4 x i32>* %4389, align 16
  %4681 = load <4 x i32>, <4 x i32>* %4405, align 16
  %4682 = shufflevector <4 x i32> %4680, <4 x i32> %4681, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4683 = bitcast <4 x i32> %4682 to <2 x i64>
  %4684 = shufflevector <4 x i32> %4680, <4 x i32> %4681, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4685 = bitcast <4 x i32> %4684 to <2 x i64>
  %4686 = shufflevector <2 x i64> %4677, <2 x i64> %4683, <2 x i32> <i32 0, i32 2>
  %4687 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %4686, <2 x i64>* %4687, align 16
  %4688 = shufflevector <2 x i64> %4677, <2 x i64> %4683, <2 x i32> <i32 1, i32 3>
  %4689 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %4688, <2 x i64>* %4689, align 16
  %4690 = shufflevector <2 x i64> %4679, <2 x i64> %4685, <2 x i32> <i32 0, i32 2>
  %4691 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %4690, <2 x i64>* %4691, align 16
  %4692 = shufflevector <2 x i64> %4679, <2 x i64> %4685, <2 x i32> <i32 1, i32 3>
  %4693 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %4692, <2 x i64>* %4693, align 16
  %4694 = load <4 x i32>, <4 x i32>* %4433, align 16
  %4695 = load <4 x i32>, <4 x i32>* %4449, align 16
  %4696 = shufflevector <4 x i32> %4694, <4 x i32> %4695, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4697 = bitcast <4 x i32> %4696 to <2 x i64>
  %4698 = shufflevector <4 x i32> %4694, <4 x i32> %4695, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4699 = bitcast <4 x i32> %4698 to <2 x i64>
  %4700 = load <4 x i32>, <4 x i32>* %4465, align 16
  %4701 = load <4 x i32>, <4 x i32>* %4481, align 16
  %4702 = shufflevector <4 x i32> %4700, <4 x i32> %4701, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4703 = bitcast <4 x i32> %4702 to <2 x i64>
  %4704 = shufflevector <4 x i32> %4700, <4 x i32> %4701, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4705 = bitcast <4 x i32> %4704 to <2 x i64>
  %4706 = shufflevector <2 x i64> %4697, <2 x i64> %4703, <2 x i32> <i32 0, i32 2>
  %4707 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %4706, <2 x i64>* %4707, align 16
  %4708 = shufflevector <2 x i64> %4697, <2 x i64> %4703, <2 x i32> <i32 1, i32 3>
  %4709 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %4708, <2 x i64>* %4709, align 16
  %4710 = shufflevector <2 x i64> %4699, <2 x i64> %4705, <2 x i32> <i32 0, i32 2>
  %4711 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %4710, <2 x i64>* %4711, align 16
  %4712 = shufflevector <2 x i64> %4699, <2 x i64> %4705, <2 x i32> <i32 1, i32 3>
  %4713 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %4712, <2 x i64>* %4713, align 16
  %4714 = load <4 x i32>, <4 x i32>* %4437, align 16
  %4715 = load <4 x i32>, <4 x i32>* %4453, align 16
  %4716 = shufflevector <4 x i32> %4714, <4 x i32> %4715, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4717 = bitcast <4 x i32> %4716 to <2 x i64>
  %4718 = shufflevector <4 x i32> %4714, <4 x i32> %4715, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4719 = bitcast <4 x i32> %4718 to <2 x i64>
  %4720 = load <4 x i32>, <4 x i32>* %4469, align 16
  %4721 = load <4 x i32>, <4 x i32>* %4485, align 16
  %4722 = shufflevector <4 x i32> %4720, <4 x i32> %4721, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4723 = bitcast <4 x i32> %4722 to <2 x i64>
  %4724 = shufflevector <4 x i32> %4720, <4 x i32> %4721, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4725 = bitcast <4 x i32> %4724 to <2 x i64>
  %4726 = shufflevector <2 x i64> %4717, <2 x i64> %4723, <2 x i32> <i32 0, i32 2>
  %4727 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %4726, <2 x i64>* %4727, align 16
  %4728 = shufflevector <2 x i64> %4717, <2 x i64> %4723, <2 x i32> <i32 1, i32 3>
  %4729 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %4728, <2 x i64>* %4729, align 16
  %4730 = shufflevector <2 x i64> %4719, <2 x i64> %4725, <2 x i32> <i32 0, i32 2>
  %4731 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %4730, <2 x i64>* %4731, align 16
  %4732 = shufflevector <2 x i64> %4719, <2 x i64> %4725, <2 x i32> <i32 1, i32 3>
  %4733 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %4732, <2 x i64>* %4733, align 16
  %4734 = load <4 x i32>, <4 x i32>* %4361, align 16
  %4735 = load <4 x i32>, <4 x i32>* %4377, align 16
  %4736 = shufflevector <4 x i32> %4734, <4 x i32> %4735, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4737 = bitcast <4 x i32> %4736 to <2 x i64>
  %4738 = shufflevector <4 x i32> %4734, <4 x i32> %4735, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4739 = bitcast <4 x i32> %4738 to <2 x i64>
  %4740 = load <4 x i32>, <4 x i32>* %4393, align 16
  %4741 = load <4 x i32>, <4 x i32>* %4409, align 16
  %4742 = shufflevector <4 x i32> %4740, <4 x i32> %4741, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4743 = bitcast <4 x i32> %4742 to <2 x i64>
  %4744 = shufflevector <4 x i32> %4740, <4 x i32> %4741, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4745 = bitcast <4 x i32> %4744 to <2 x i64>
  %4746 = shufflevector <2 x i64> %4737, <2 x i64> %4743, <2 x i32> <i32 0, i32 2>
  %4747 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %4746, <2 x i64>* %4747, align 16
  %4748 = shufflevector <2 x i64> %4737, <2 x i64> %4743, <2 x i32> <i32 1, i32 3>
  %4749 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %4748, <2 x i64>* %4749, align 16
  %4750 = shufflevector <2 x i64> %4739, <2 x i64> %4745, <2 x i32> <i32 0, i32 2>
  %4751 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %4750, <2 x i64>* %4751, align 16
  %4752 = shufflevector <2 x i64> %4739, <2 x i64> %4745, <2 x i32> <i32 1, i32 3>
  %4753 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %4752, <2 x i64>* %4753, align 16
  %4754 = load <4 x i32>, <4 x i32>* %4365, align 16
  %4755 = load <4 x i32>, <4 x i32>* %4381, align 16
  %4756 = shufflevector <4 x i32> %4754, <4 x i32> %4755, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4757 = bitcast <4 x i32> %4756 to <2 x i64>
  %4758 = shufflevector <4 x i32> %4754, <4 x i32> %4755, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4759 = bitcast <4 x i32> %4758 to <2 x i64>
  %4760 = load <4 x i32>, <4 x i32>* %4397, align 16
  %4761 = load <4 x i32>, <4 x i32>* %4413, align 16
  %4762 = shufflevector <4 x i32> %4760, <4 x i32> %4761, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4763 = bitcast <4 x i32> %4762 to <2 x i64>
  %4764 = shufflevector <4 x i32> %4760, <4 x i32> %4761, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4765 = bitcast <4 x i32> %4764 to <2 x i64>
  %4766 = shufflevector <2 x i64> %4757, <2 x i64> %4763, <2 x i32> <i32 0, i32 2>
  %4767 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %4766, <2 x i64>* %4767, align 16
  %4768 = shufflevector <2 x i64> %4757, <2 x i64> %4763, <2 x i32> <i32 1, i32 3>
  %4769 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %4768, <2 x i64>* %4769, align 16
  %4770 = shufflevector <2 x i64> %4759, <2 x i64> %4765, <2 x i32> <i32 0, i32 2>
  %4771 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %4770, <2 x i64>* %4771, align 16
  %4772 = shufflevector <2 x i64> %4759, <2 x i64> %4765, <2 x i32> <i32 1, i32 3>
  %4773 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %4772, <2 x i64>* %4773, align 16
  %4774 = load <4 x i32>, <4 x i32>* %4441, align 16
  %4775 = load <4 x i32>, <4 x i32>* %4457, align 16
  %4776 = shufflevector <4 x i32> %4774, <4 x i32> %4775, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4777 = bitcast <4 x i32> %4776 to <2 x i64>
  %4778 = shufflevector <4 x i32> %4774, <4 x i32> %4775, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4779 = bitcast <4 x i32> %4778 to <2 x i64>
  %4780 = load <4 x i32>, <4 x i32>* %4473, align 16
  %4781 = load <4 x i32>, <4 x i32>* %4489, align 16
  %4782 = shufflevector <4 x i32> %4780, <4 x i32> %4781, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4783 = bitcast <4 x i32> %4782 to <2 x i64>
  %4784 = shufflevector <4 x i32> %4780, <4 x i32> %4781, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4785 = bitcast <4 x i32> %4784 to <2 x i64>
  %4786 = shufflevector <2 x i64> %4777, <2 x i64> %4783, <2 x i32> <i32 0, i32 2>
  %4787 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %4786, <2 x i64>* %4787, align 16
  %4788 = shufflevector <2 x i64> %4777, <2 x i64> %4783, <2 x i32> <i32 1, i32 3>
  %4789 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %4788, <2 x i64>* %4789, align 16
  %4790 = shufflevector <2 x i64> %4779, <2 x i64> %4785, <2 x i32> <i32 0, i32 2>
  %4791 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %4790, <2 x i64>* %4791, align 16
  %4792 = shufflevector <2 x i64> %4779, <2 x i64> %4785, <2 x i32> <i32 1, i32 3>
  %4793 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %4792, <2 x i64>* %4793, align 16
  %4794 = load <4 x i32>, <4 x i32>* %4445, align 16
  %4795 = load <4 x i32>, <4 x i32>* %4461, align 16
  %4796 = shufflevector <4 x i32> %4794, <4 x i32> %4795, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4797 = bitcast <4 x i32> %4796 to <2 x i64>
  %4798 = shufflevector <4 x i32> %4794, <4 x i32> %4795, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4799 = bitcast <4 x i32> %4798 to <2 x i64>
  %4800 = load <4 x i32>, <4 x i32>* %4477, align 16
  %4801 = load <4 x i32>, <4 x i32>* %4493, align 16
  %4802 = shufflevector <4 x i32> %4800, <4 x i32> %4801, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4803 = bitcast <4 x i32> %4802 to <2 x i64>
  %4804 = shufflevector <4 x i32> %4800, <4 x i32> %4801, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4805 = bitcast <4 x i32> %4804 to <2 x i64>
  %4806 = shufflevector <2 x i64> %4797, <2 x i64> %4803, <2 x i32> <i32 0, i32 2>
  %4807 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %4806, <2 x i64>* %4807, align 16
  %4808 = shufflevector <2 x i64> %4797, <2 x i64> %4803, <2 x i32> <i32 1, i32 3>
  %4809 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %4808, <2 x i64>* %4809, align 16
  %4810 = shufflevector <2 x i64> %4799, <2 x i64> %4805, <2 x i32> <i32 0, i32 2>
  %4811 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %4810, <2 x i64>* %4811, align 16
  %4812 = shufflevector <2 x i64> %4799, <2 x i64> %4805, <2 x i32> <i32 1, i32 3>
  %4813 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %4812, <2 x i64>* %4813, align 16
  %4814 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  %4815 = sext i8 %4814 to i32
  call void @fdct16x16_sse4_1(<2 x i64>* nonnull %4179, <2 x i64>* nonnull %4182, i32 %4815, i32 4)
  %4816 = load <4 x i32>, <4 x i32>* %4193, align 16
  %4817 = load <4 x i32>, <4 x i32>* %4209, align 16
  %4818 = shufflevector <4 x i32> %4816, <4 x i32> %4817, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4819 = bitcast <4 x i32> %4818 to <2 x i64>
  %4820 = shufflevector <4 x i32> %4816, <4 x i32> %4817, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4821 = bitcast <4 x i32> %4820 to <2 x i64>
  %4822 = load <4 x i32>, <4 x i32>* %4225, align 16
  %4823 = load <4 x i32>, <4 x i32>* %4241, align 16
  %4824 = shufflevector <4 x i32> %4822, <4 x i32> %4823, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4825 = bitcast <4 x i32> %4824 to <2 x i64>
  %4826 = shufflevector <4 x i32> %4822, <4 x i32> %4823, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4827 = bitcast <4 x i32> %4826 to <2 x i64>
  %4828 = shufflevector <2 x i64> %4819, <2 x i64> %4825, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4828, <2 x i64>* %4179, align 16
  %4829 = shufflevector <2 x i64> %4819, <2 x i64> %4825, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4829, <2 x i64>* %4522, align 16
  %4830 = shufflevector <2 x i64> %4821, <2 x i64> %4827, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4830, <2 x i64>* %4524, align 16
  %4831 = shufflevector <2 x i64> %4821, <2 x i64> %4827, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4831, <2 x i64>* %4526, align 16
  %4832 = load <4 x i32>, <4 x i32>* %4197, align 16
  %4833 = load <4 x i32>, <4 x i32>* %4213, align 16
  %4834 = shufflevector <4 x i32> %4832, <4 x i32> %4833, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4835 = bitcast <4 x i32> %4834 to <2 x i64>
  %4836 = shufflevector <4 x i32> %4832, <4 x i32> %4833, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4837 = bitcast <4 x i32> %4836 to <2 x i64>
  %4838 = load <4 x i32>, <4 x i32>* %4229, align 16
  %4839 = load <4 x i32>, <4 x i32>* %4245, align 16
  %4840 = shufflevector <4 x i32> %4838, <4 x i32> %4839, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4841 = bitcast <4 x i32> %4840 to <2 x i64>
  %4842 = shufflevector <4 x i32> %4838, <4 x i32> %4839, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4843 = bitcast <4 x i32> %4842 to <2 x i64>
  %4844 = shufflevector <2 x i64> %4835, <2 x i64> %4841, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4844, <2 x i64>* %4536, align 16
  %4845 = shufflevector <2 x i64> %4835, <2 x i64> %4841, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4845, <2 x i64>* %4538, align 16
  %4846 = shufflevector <2 x i64> %4837, <2 x i64> %4843, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4846, <2 x i64>* %4540, align 16
  %4847 = shufflevector <2 x i64> %4837, <2 x i64> %4843, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4847, <2 x i64>* %4542, align 16
  %4848 = load <4 x i32>, <4 x i32>* %4273, align 16
  %4849 = load <4 x i32>, <4 x i32>* %4289, align 16
  %4850 = shufflevector <4 x i32> %4848, <4 x i32> %4849, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4851 = bitcast <4 x i32> %4850 to <2 x i64>
  %4852 = shufflevector <4 x i32> %4848, <4 x i32> %4849, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4853 = bitcast <4 x i32> %4852 to <2 x i64>
  %4854 = load <4 x i32>, <4 x i32>* %4305, align 16
  %4855 = load <4 x i32>, <4 x i32>* %4321, align 16
  %4856 = shufflevector <4 x i32> %4854, <4 x i32> %4855, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4857 = bitcast <4 x i32> %4856 to <2 x i64>
  %4858 = shufflevector <4 x i32> %4854, <4 x i32> %4855, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4859 = bitcast <4 x i32> %4858 to <2 x i64>
  %4860 = shufflevector <2 x i64> %4851, <2 x i64> %4857, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4860, <2 x i64>* %4555, align 16
  %4861 = shufflevector <2 x i64> %4851, <2 x i64> %4857, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4861, <2 x i64>* %4557, align 16
  %4862 = shufflevector <2 x i64> %4853, <2 x i64> %4859, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4862, <2 x i64>* %4559, align 16
  %4863 = shufflevector <2 x i64> %4853, <2 x i64> %4859, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4863, <2 x i64>* %4561, align 16
  %4864 = load <4 x i32>, <4 x i32>* %4277, align 16
  %4865 = load <4 x i32>, <4 x i32>* %4293, align 16
  %4866 = shufflevector <4 x i32> %4864, <4 x i32> %4865, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4867 = bitcast <4 x i32> %4866 to <2 x i64>
  %4868 = shufflevector <4 x i32> %4864, <4 x i32> %4865, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4869 = bitcast <4 x i32> %4868 to <2 x i64>
  %4870 = load <4 x i32>, <4 x i32>* %4309, align 16
  %4871 = load <4 x i32>, <4 x i32>* %4325, align 16
  %4872 = shufflevector <4 x i32> %4870, <4 x i32> %4871, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4873 = bitcast <4 x i32> %4872 to <2 x i64>
  %4874 = shufflevector <4 x i32> %4870, <4 x i32> %4871, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4875 = bitcast <4 x i32> %4874 to <2 x i64>
  %4876 = shufflevector <2 x i64> %4867, <2 x i64> %4873, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4876, <2 x i64>* %4575, align 16
  %4877 = shufflevector <2 x i64> %4867, <2 x i64> %4873, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4877, <2 x i64>* %4577, align 16
  %4878 = shufflevector <2 x i64> %4869, <2 x i64> %4875, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4878, <2 x i64>* %4579, align 16
  %4879 = shufflevector <2 x i64> %4869, <2 x i64> %4875, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4879, <2 x i64>* %4581, align 16
  %4880 = load <4 x i32>, <4 x i32>* %4201, align 16
  %4881 = load <4 x i32>, <4 x i32>* %4217, align 16
  %4882 = shufflevector <4 x i32> %4880, <4 x i32> %4881, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4883 = bitcast <4 x i32> %4882 to <2 x i64>
  %4884 = shufflevector <4 x i32> %4880, <4 x i32> %4881, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4885 = bitcast <4 x i32> %4884 to <2 x i64>
  %4886 = load <4 x i32>, <4 x i32>* %4233, align 16
  %4887 = load <4 x i32>, <4 x i32>* %4249, align 16
  %4888 = shufflevector <4 x i32> %4886, <4 x i32> %4887, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4889 = bitcast <4 x i32> %4888 to <2 x i64>
  %4890 = shufflevector <4 x i32> %4886, <4 x i32> %4887, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4891 = bitcast <4 x i32> %4890 to <2 x i64>
  %4892 = shufflevector <2 x i64> %4883, <2 x i64> %4889, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4892, <2 x i64>* %4591, align 16
  %4893 = shufflevector <2 x i64> %4883, <2 x i64> %4889, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4893, <2 x i64>* %4593, align 16
  %4894 = shufflevector <2 x i64> %4885, <2 x i64> %4891, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4894, <2 x i64>* %4595, align 16
  %4895 = shufflevector <2 x i64> %4885, <2 x i64> %4891, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4895, <2 x i64>* %4597, align 16
  %4896 = load <4 x i32>, <4 x i32>* %4205, align 16
  %4897 = load <4 x i32>, <4 x i32>* %4221, align 16
  %4898 = shufflevector <4 x i32> %4896, <4 x i32> %4897, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4899 = bitcast <4 x i32> %4898 to <2 x i64>
  %4900 = shufflevector <4 x i32> %4896, <4 x i32> %4897, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4901 = bitcast <4 x i32> %4900 to <2 x i64>
  %4902 = load <4 x i32>, <4 x i32>* %4237, align 16
  %4903 = load <4 x i32>, <4 x i32>* %4253, align 16
  %4904 = shufflevector <4 x i32> %4902, <4 x i32> %4903, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4905 = bitcast <4 x i32> %4904 to <2 x i64>
  %4906 = shufflevector <4 x i32> %4902, <4 x i32> %4903, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4907 = bitcast <4 x i32> %4906 to <2 x i64>
  %4908 = shufflevector <2 x i64> %4899, <2 x i64> %4905, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4908, <2 x i64>* %4607, align 16
  %4909 = shufflevector <2 x i64> %4899, <2 x i64> %4905, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4909, <2 x i64>* %4609, align 16
  %4910 = shufflevector <2 x i64> %4901, <2 x i64> %4907, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4910, <2 x i64>* %4611, align 16
  %4911 = shufflevector <2 x i64> %4901, <2 x i64> %4907, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4911, <2 x i64>* %4613, align 16
  %4912 = load <4 x i32>, <4 x i32>* %4281, align 16
  %4913 = load <4 x i32>, <4 x i32>* %4297, align 16
  %4914 = shufflevector <4 x i32> %4912, <4 x i32> %4913, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4915 = bitcast <4 x i32> %4914 to <2 x i64>
  %4916 = shufflevector <4 x i32> %4912, <4 x i32> %4913, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4917 = bitcast <4 x i32> %4916 to <2 x i64>
  %4918 = load <4 x i32>, <4 x i32>* %4313, align 16
  %4919 = load <4 x i32>, <4 x i32>* %4329, align 16
  %4920 = shufflevector <4 x i32> %4918, <4 x i32> %4919, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4921 = bitcast <4 x i32> %4920 to <2 x i64>
  %4922 = shufflevector <4 x i32> %4918, <4 x i32> %4919, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4923 = bitcast <4 x i32> %4922 to <2 x i64>
  %4924 = shufflevector <2 x i64> %4915, <2 x i64> %4921, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4924, <2 x i64>* %4627, align 16
  %4925 = shufflevector <2 x i64> %4915, <2 x i64> %4921, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4925, <2 x i64>* %4629, align 16
  %4926 = shufflevector <2 x i64> %4917, <2 x i64> %4923, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4926, <2 x i64>* %4631, align 16
  %4927 = shufflevector <2 x i64> %4917, <2 x i64> %4923, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4927, <2 x i64>* %4633, align 16
  %4928 = load <4 x i32>, <4 x i32>* %4285, align 16
  %4929 = load <4 x i32>, <4 x i32>* %4301, align 16
  %4930 = shufflevector <4 x i32> %4928, <4 x i32> %4929, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4931 = bitcast <4 x i32> %4930 to <2 x i64>
  %4932 = shufflevector <4 x i32> %4928, <4 x i32> %4929, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4933 = bitcast <4 x i32> %4932 to <2 x i64>
  %4934 = load <4 x i32>, <4 x i32>* %4317, align 16
  %4935 = load <4 x i32>, <4 x i32>* %4333, align 16
  %4936 = shufflevector <4 x i32> %4934, <4 x i32> %4935, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4937 = bitcast <4 x i32> %4936 to <2 x i64>
  %4938 = shufflevector <4 x i32> %4934, <4 x i32> %4935, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4939 = bitcast <4 x i32> %4938 to <2 x i64>
  %4940 = shufflevector <2 x i64> %4931, <2 x i64> %4937, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4940, <2 x i64>* %4647, align 16
  %4941 = shufflevector <2 x i64> %4931, <2 x i64> %4937, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4941, <2 x i64>* %4649, align 16
  %4942 = shufflevector <2 x i64> %4933, <2 x i64> %4939, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4942, <2 x i64>* %4651, align 16
  %4943 = shufflevector <2 x i64> %4933, <2 x i64> %4939, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4943, <2 x i64>* %4653, align 16
  %4944 = load <4 x i32>, <4 x i32>* %4353, align 16
  %4945 = load <4 x i32>, <4 x i32>* %4369, align 16
  %4946 = shufflevector <4 x i32> %4944, <4 x i32> %4945, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4947 = bitcast <4 x i32> %4946 to <2 x i64>
  %4948 = shufflevector <4 x i32> %4944, <4 x i32> %4945, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4949 = bitcast <4 x i32> %4948 to <2 x i64>
  %4950 = load <4 x i32>, <4 x i32>* %4385, align 16
  %4951 = load <4 x i32>, <4 x i32>* %4401, align 16
  %4952 = shufflevector <4 x i32> %4950, <4 x i32> %4951, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4953 = bitcast <4 x i32> %4952 to <2 x i64>
  %4954 = shufflevector <4 x i32> %4950, <4 x i32> %4951, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4955 = bitcast <4 x i32> %4954 to <2 x i64>
  %4956 = shufflevector <2 x i64> %4947, <2 x i64> %4953, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4956, <2 x i64>* %4667, align 16
  %4957 = shufflevector <2 x i64> %4947, <2 x i64> %4953, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4957, <2 x i64>* %4669, align 16
  %4958 = shufflevector <2 x i64> %4949, <2 x i64> %4955, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4958, <2 x i64>* %4671, align 16
  %4959 = shufflevector <2 x i64> %4949, <2 x i64> %4955, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4959, <2 x i64>* %4673, align 16
  %4960 = load <4 x i32>, <4 x i32>* %4357, align 16
  %4961 = load <4 x i32>, <4 x i32>* %4373, align 16
  %4962 = shufflevector <4 x i32> %4960, <4 x i32> %4961, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4963 = bitcast <4 x i32> %4962 to <2 x i64>
  %4964 = shufflevector <4 x i32> %4960, <4 x i32> %4961, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4965 = bitcast <4 x i32> %4964 to <2 x i64>
  %4966 = load <4 x i32>, <4 x i32>* %4389, align 16
  %4967 = load <4 x i32>, <4 x i32>* %4405, align 16
  %4968 = shufflevector <4 x i32> %4966, <4 x i32> %4967, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4969 = bitcast <4 x i32> %4968 to <2 x i64>
  %4970 = shufflevector <4 x i32> %4966, <4 x i32> %4967, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4971 = bitcast <4 x i32> %4970 to <2 x i64>
  %4972 = shufflevector <2 x i64> %4963, <2 x i64> %4969, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4972, <2 x i64>* %4687, align 16
  %4973 = shufflevector <2 x i64> %4963, <2 x i64> %4969, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4973, <2 x i64>* %4689, align 16
  %4974 = shufflevector <2 x i64> %4965, <2 x i64> %4971, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4974, <2 x i64>* %4691, align 16
  %4975 = shufflevector <2 x i64> %4965, <2 x i64> %4971, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4975, <2 x i64>* %4693, align 16
  %4976 = load <4 x i32>, <4 x i32>* %4433, align 16
  %4977 = load <4 x i32>, <4 x i32>* %4449, align 16
  %4978 = shufflevector <4 x i32> %4976, <4 x i32> %4977, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4979 = bitcast <4 x i32> %4978 to <2 x i64>
  %4980 = shufflevector <4 x i32> %4976, <4 x i32> %4977, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4981 = bitcast <4 x i32> %4980 to <2 x i64>
  %4982 = load <4 x i32>, <4 x i32>* %4465, align 16
  %4983 = load <4 x i32>, <4 x i32>* %4481, align 16
  %4984 = shufflevector <4 x i32> %4982, <4 x i32> %4983, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4985 = bitcast <4 x i32> %4984 to <2 x i64>
  %4986 = shufflevector <4 x i32> %4982, <4 x i32> %4983, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4987 = bitcast <4 x i32> %4986 to <2 x i64>
  %4988 = shufflevector <2 x i64> %4979, <2 x i64> %4985, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4988, <2 x i64>* %4707, align 16
  %4989 = shufflevector <2 x i64> %4979, <2 x i64> %4985, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4989, <2 x i64>* %4709, align 16
  %4990 = shufflevector <2 x i64> %4981, <2 x i64> %4987, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %4990, <2 x i64>* %4711, align 16
  %4991 = shufflevector <2 x i64> %4981, <2 x i64> %4987, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %4991, <2 x i64>* %4713, align 16
  %4992 = load <4 x i32>, <4 x i32>* %4437, align 16
  %4993 = load <4 x i32>, <4 x i32>* %4453, align 16
  %4994 = shufflevector <4 x i32> %4992, <4 x i32> %4993, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4995 = bitcast <4 x i32> %4994 to <2 x i64>
  %4996 = shufflevector <4 x i32> %4992, <4 x i32> %4993, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4997 = bitcast <4 x i32> %4996 to <2 x i64>
  %4998 = load <4 x i32>, <4 x i32>* %4469, align 16
  %4999 = load <4 x i32>, <4 x i32>* %4485, align 16
  %5000 = shufflevector <4 x i32> %4998, <4 x i32> %4999, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5001 = bitcast <4 x i32> %5000 to <2 x i64>
  %5002 = shufflevector <4 x i32> %4998, <4 x i32> %4999, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5003 = bitcast <4 x i32> %5002 to <2 x i64>
  %5004 = shufflevector <2 x i64> %4995, <2 x i64> %5001, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5004, <2 x i64>* %4727, align 16
  %5005 = shufflevector <2 x i64> %4995, <2 x i64> %5001, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5005, <2 x i64>* %4729, align 16
  %5006 = shufflevector <2 x i64> %4997, <2 x i64> %5003, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5006, <2 x i64>* %4731, align 16
  %5007 = shufflevector <2 x i64> %4997, <2 x i64> %5003, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5007, <2 x i64>* %4733, align 16
  %5008 = load <4 x i32>, <4 x i32>* %4361, align 16
  %5009 = load <4 x i32>, <4 x i32>* %4377, align 16
  %5010 = shufflevector <4 x i32> %5008, <4 x i32> %5009, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5011 = bitcast <4 x i32> %5010 to <2 x i64>
  %5012 = shufflevector <4 x i32> %5008, <4 x i32> %5009, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5013 = bitcast <4 x i32> %5012 to <2 x i64>
  %5014 = load <4 x i32>, <4 x i32>* %4393, align 16
  %5015 = load <4 x i32>, <4 x i32>* %4409, align 16
  %5016 = shufflevector <4 x i32> %5014, <4 x i32> %5015, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5017 = bitcast <4 x i32> %5016 to <2 x i64>
  %5018 = shufflevector <4 x i32> %5014, <4 x i32> %5015, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5019 = bitcast <4 x i32> %5018 to <2 x i64>
  %5020 = shufflevector <2 x i64> %5011, <2 x i64> %5017, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5020, <2 x i64>* %4747, align 16
  %5021 = shufflevector <2 x i64> %5011, <2 x i64> %5017, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5021, <2 x i64>* %4749, align 16
  %5022 = shufflevector <2 x i64> %5013, <2 x i64> %5019, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5022, <2 x i64>* %4751, align 16
  %5023 = shufflevector <2 x i64> %5013, <2 x i64> %5019, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5023, <2 x i64>* %4753, align 16
  %5024 = load <4 x i32>, <4 x i32>* %4365, align 16
  %5025 = load <4 x i32>, <4 x i32>* %4381, align 16
  %5026 = shufflevector <4 x i32> %5024, <4 x i32> %5025, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5027 = bitcast <4 x i32> %5026 to <2 x i64>
  %5028 = shufflevector <4 x i32> %5024, <4 x i32> %5025, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5029 = bitcast <4 x i32> %5028 to <2 x i64>
  %5030 = load <4 x i32>, <4 x i32>* %4397, align 16
  %5031 = load <4 x i32>, <4 x i32>* %4413, align 16
  %5032 = shufflevector <4 x i32> %5030, <4 x i32> %5031, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5033 = bitcast <4 x i32> %5032 to <2 x i64>
  %5034 = shufflevector <4 x i32> %5030, <4 x i32> %5031, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5035 = bitcast <4 x i32> %5034 to <2 x i64>
  %5036 = shufflevector <2 x i64> %5027, <2 x i64> %5033, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5036, <2 x i64>* %4767, align 16
  %5037 = shufflevector <2 x i64> %5027, <2 x i64> %5033, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5037, <2 x i64>* %4769, align 16
  %5038 = shufflevector <2 x i64> %5029, <2 x i64> %5035, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5038, <2 x i64>* %4771, align 16
  %5039 = shufflevector <2 x i64> %5029, <2 x i64> %5035, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5039, <2 x i64>* %4773, align 16
  %5040 = load <4 x i32>, <4 x i32>* %4441, align 16
  %5041 = load <4 x i32>, <4 x i32>* %4457, align 16
  %5042 = shufflevector <4 x i32> %5040, <4 x i32> %5041, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5043 = bitcast <4 x i32> %5042 to <2 x i64>
  %5044 = shufflevector <4 x i32> %5040, <4 x i32> %5041, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5045 = bitcast <4 x i32> %5044 to <2 x i64>
  %5046 = load <4 x i32>, <4 x i32>* %4473, align 16
  %5047 = load <4 x i32>, <4 x i32>* %4489, align 16
  %5048 = shufflevector <4 x i32> %5046, <4 x i32> %5047, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5049 = bitcast <4 x i32> %5048 to <2 x i64>
  %5050 = shufflevector <4 x i32> %5046, <4 x i32> %5047, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5051 = bitcast <4 x i32> %5050 to <2 x i64>
  %5052 = shufflevector <2 x i64> %5043, <2 x i64> %5049, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5052, <2 x i64>* %4787, align 16
  %5053 = shufflevector <2 x i64> %5043, <2 x i64> %5049, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5053, <2 x i64>* %4789, align 16
  %5054 = shufflevector <2 x i64> %5045, <2 x i64> %5051, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5054, <2 x i64>* %4791, align 16
  %5055 = shufflevector <2 x i64> %5045, <2 x i64> %5051, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5055, <2 x i64>* %4793, align 16
  %5056 = load <4 x i32>, <4 x i32>* %4445, align 16
  %5057 = load <4 x i32>, <4 x i32>* %4461, align 16
  %5058 = shufflevector <4 x i32> %5056, <4 x i32> %5057, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5059 = bitcast <4 x i32> %5058 to <2 x i64>
  %5060 = shufflevector <4 x i32> %5056, <4 x i32> %5057, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5061 = bitcast <4 x i32> %5060 to <2 x i64>
  %5062 = load <4 x i32>, <4 x i32>* %4477, align 16
  %5063 = load <4 x i32>, <4 x i32>* %4493, align 16
  %5064 = shufflevector <4 x i32> %5062, <4 x i32> %5063, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5065 = bitcast <4 x i32> %5064 to <2 x i64>
  %5066 = shufflevector <4 x i32> %5062, <4 x i32> %5063, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5067 = bitcast <4 x i32> %5066 to <2 x i64>
  %5068 = shufflevector <2 x i64> %5059, <2 x i64> %5065, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5068, <2 x i64>* %4807, align 16
  %5069 = shufflevector <2 x i64> %5059, <2 x i64> %5065, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5069, <2 x i64>* %4809, align 16
  %5070 = shufflevector <2 x i64> %5061, <2 x i64> %5067, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5070, <2 x i64>* %4811, align 16
  %5071 = shufflevector <2 x i64> %5061, <2 x i64> %5067, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5071, <2 x i64>* %4813, align 16
  %5072 = bitcast i32* %1 to <2 x i64>*
  %5073 = load <2 x i64>, <2 x i64>* %4179, align 16
  store <2 x i64> %5073, <2 x i64>* %5072, align 16
  %5074 = getelementptr inbounds i32, i32* %1, i64 4
  %5075 = bitcast i32* %5074 to <2 x i64>*
  %5076 = load <2 x i64>, <2 x i64>* %4555, align 16
  store <2 x i64> %5076, <2 x i64>* %5075, align 16
  %5077 = getelementptr inbounds i32, i32* %1, i64 8
  %5078 = bitcast i32* %5077 to <2 x i64>*
  %5079 = load <2 x i64>, <2 x i64>* %4667, align 16
  store <2 x i64> %5079, <2 x i64>* %5078, align 16
  %5080 = getelementptr inbounds i32, i32* %1, i64 12
  %5081 = bitcast i32* %5080 to <2 x i64>*
  %5082 = load <2 x i64>, <2 x i64>* %4707, align 16
  store <2 x i64> %5082, <2 x i64>* %5081, align 16
  %5083 = getelementptr inbounds i32, i32* %1, i64 16
  %5084 = bitcast i32* %5083 to <2 x i64>*
  %5085 = load <2 x i64>, <2 x i64>* %4522, align 16
  store <2 x i64> %5085, <2 x i64>* %5084, align 16
  %5086 = getelementptr inbounds i32, i32* %1, i64 20
  %5087 = bitcast i32* %5086 to <2 x i64>*
  %5088 = load <2 x i64>, <2 x i64>* %4557, align 16
  store <2 x i64> %5088, <2 x i64>* %5087, align 16
  %5089 = getelementptr inbounds i32, i32* %1, i64 24
  %5090 = bitcast i32* %5089 to <2 x i64>*
  %5091 = load <2 x i64>, <2 x i64>* %4669, align 16
  store <2 x i64> %5091, <2 x i64>* %5090, align 16
  %5092 = getelementptr inbounds i32, i32* %1, i64 28
  %5093 = bitcast i32* %5092 to <2 x i64>*
  %5094 = load <2 x i64>, <2 x i64>* %4709, align 16
  store <2 x i64> %5094, <2 x i64>* %5093, align 16
  %5095 = getelementptr inbounds i32, i32* %1, i64 32
  %5096 = bitcast i32* %5095 to <2 x i64>*
  %5097 = load <2 x i64>, <2 x i64>* %4524, align 16
  store <2 x i64> %5097, <2 x i64>* %5096, align 16
  %5098 = getelementptr inbounds i32, i32* %1, i64 36
  %5099 = bitcast i32* %5098 to <2 x i64>*
  %5100 = load <2 x i64>, <2 x i64>* %4559, align 16
  store <2 x i64> %5100, <2 x i64>* %5099, align 16
  %5101 = getelementptr inbounds i32, i32* %1, i64 40
  %5102 = bitcast i32* %5101 to <2 x i64>*
  %5103 = load <2 x i64>, <2 x i64>* %4671, align 16
  store <2 x i64> %5103, <2 x i64>* %5102, align 16
  %5104 = getelementptr inbounds i32, i32* %1, i64 44
  %5105 = bitcast i32* %5104 to <2 x i64>*
  %5106 = load <2 x i64>, <2 x i64>* %4711, align 16
  store <2 x i64> %5106, <2 x i64>* %5105, align 16
  %5107 = getelementptr inbounds i32, i32* %1, i64 48
  %5108 = bitcast i32* %5107 to <2 x i64>*
  %5109 = load <2 x i64>, <2 x i64>* %4526, align 16
  store <2 x i64> %5109, <2 x i64>* %5108, align 16
  %5110 = getelementptr inbounds i32, i32* %1, i64 52
  %5111 = bitcast i32* %5110 to <2 x i64>*
  %5112 = load <2 x i64>, <2 x i64>* %4561, align 16
  store <2 x i64> %5112, <2 x i64>* %5111, align 16
  %5113 = getelementptr inbounds i32, i32* %1, i64 56
  %5114 = bitcast i32* %5113 to <2 x i64>*
  %5115 = load <2 x i64>, <2 x i64>* %4673, align 16
  store <2 x i64> %5115, <2 x i64>* %5114, align 16
  %5116 = getelementptr inbounds i32, i32* %1, i64 60
  %5117 = bitcast i32* %5116 to <2 x i64>*
  %5118 = load <2 x i64>, <2 x i64>* %4713, align 16
  store <2 x i64> %5118, <2 x i64>* %5117, align 16
  %5119 = getelementptr inbounds i32, i32* %1, i64 64
  %5120 = bitcast i32* %5119 to <2 x i64>*
  %5121 = load <2 x i64>, <2 x i64>* %4536, align 16
  store <2 x i64> %5121, <2 x i64>* %5120, align 16
  %5122 = getelementptr inbounds i32, i32* %1, i64 68
  %5123 = bitcast i32* %5122 to <2 x i64>*
  %5124 = load <2 x i64>, <2 x i64>* %4575, align 16
  store <2 x i64> %5124, <2 x i64>* %5123, align 16
  %5125 = getelementptr inbounds i32, i32* %1, i64 72
  %5126 = bitcast i32* %5125 to <2 x i64>*
  %5127 = load <2 x i64>, <2 x i64>* %4687, align 16
  store <2 x i64> %5127, <2 x i64>* %5126, align 16
  %5128 = getelementptr inbounds i32, i32* %1, i64 76
  %5129 = bitcast i32* %5128 to <2 x i64>*
  %5130 = load <2 x i64>, <2 x i64>* %4727, align 16
  store <2 x i64> %5130, <2 x i64>* %5129, align 16
  %5131 = getelementptr inbounds i32, i32* %1, i64 80
  %5132 = bitcast i32* %5131 to <2 x i64>*
  %5133 = load <2 x i64>, <2 x i64>* %4538, align 16
  store <2 x i64> %5133, <2 x i64>* %5132, align 16
  %5134 = getelementptr inbounds i32, i32* %1, i64 84
  %5135 = bitcast i32* %5134 to <2 x i64>*
  %5136 = load <2 x i64>, <2 x i64>* %4577, align 16
  store <2 x i64> %5136, <2 x i64>* %5135, align 16
  %5137 = getelementptr inbounds i32, i32* %1, i64 88
  %5138 = bitcast i32* %5137 to <2 x i64>*
  %5139 = load <2 x i64>, <2 x i64>* %4689, align 16
  store <2 x i64> %5139, <2 x i64>* %5138, align 16
  %5140 = getelementptr inbounds i32, i32* %1, i64 92
  %5141 = bitcast i32* %5140 to <2 x i64>*
  %5142 = load <2 x i64>, <2 x i64>* %4729, align 16
  store <2 x i64> %5142, <2 x i64>* %5141, align 16
  %5143 = getelementptr inbounds i32, i32* %1, i64 96
  %5144 = bitcast i32* %5143 to <2 x i64>*
  %5145 = load <2 x i64>, <2 x i64>* %4540, align 16
  store <2 x i64> %5145, <2 x i64>* %5144, align 16
  %5146 = getelementptr inbounds i32, i32* %1, i64 100
  %5147 = bitcast i32* %5146 to <2 x i64>*
  %5148 = load <2 x i64>, <2 x i64>* %4579, align 16
  store <2 x i64> %5148, <2 x i64>* %5147, align 16
  %5149 = getelementptr inbounds i32, i32* %1, i64 104
  %5150 = bitcast i32* %5149 to <2 x i64>*
  %5151 = load <2 x i64>, <2 x i64>* %4691, align 16
  store <2 x i64> %5151, <2 x i64>* %5150, align 16
  %5152 = getelementptr inbounds i32, i32* %1, i64 108
  %5153 = bitcast i32* %5152 to <2 x i64>*
  %5154 = load <2 x i64>, <2 x i64>* %4731, align 16
  store <2 x i64> %5154, <2 x i64>* %5153, align 16
  %5155 = getelementptr inbounds i32, i32* %1, i64 112
  %5156 = bitcast i32* %5155 to <2 x i64>*
  %5157 = load <2 x i64>, <2 x i64>* %4542, align 16
  store <2 x i64> %5157, <2 x i64>* %5156, align 16
  %5158 = getelementptr inbounds i32, i32* %1, i64 116
  %5159 = bitcast i32* %5158 to <2 x i64>*
  %5160 = load <2 x i64>, <2 x i64>* %4581, align 16
  store <2 x i64> %5160, <2 x i64>* %5159, align 16
  %5161 = getelementptr inbounds i32, i32* %1, i64 120
  %5162 = bitcast i32* %5161 to <2 x i64>*
  %5163 = load <2 x i64>, <2 x i64>* %4693, align 16
  store <2 x i64> %5163, <2 x i64>* %5162, align 16
  %5164 = getelementptr inbounds i32, i32* %1, i64 124
  %5165 = bitcast i32* %5164 to <2 x i64>*
  %5166 = load <2 x i64>, <2 x i64>* %4733, align 16
  store <2 x i64> %5166, <2 x i64>* %5165, align 16
  %5167 = getelementptr inbounds i32, i32* %1, i64 128
  %5168 = bitcast i32* %5167 to <2 x i64>*
  %5169 = load <2 x i64>, <2 x i64>* %4591, align 16
  store <2 x i64> %5169, <2 x i64>* %5168, align 16
  %5170 = getelementptr inbounds i32, i32* %1, i64 132
  %5171 = bitcast i32* %5170 to <2 x i64>*
  %5172 = load <2 x i64>, <2 x i64>* %4627, align 16
  store <2 x i64> %5172, <2 x i64>* %5171, align 16
  %5173 = getelementptr inbounds i32, i32* %1, i64 136
  %5174 = bitcast i32* %5173 to <2 x i64>*
  %5175 = load <2 x i64>, <2 x i64>* %4747, align 16
  store <2 x i64> %5175, <2 x i64>* %5174, align 16
  %5176 = getelementptr inbounds i32, i32* %1, i64 140
  %5177 = bitcast i32* %5176 to <2 x i64>*
  %5178 = load <2 x i64>, <2 x i64>* %4787, align 16
  store <2 x i64> %5178, <2 x i64>* %5177, align 16
  %5179 = getelementptr inbounds i32, i32* %1, i64 144
  %5180 = bitcast i32* %5179 to <2 x i64>*
  %5181 = load <2 x i64>, <2 x i64>* %4593, align 16
  store <2 x i64> %5181, <2 x i64>* %5180, align 16
  %5182 = getelementptr inbounds i32, i32* %1, i64 148
  %5183 = bitcast i32* %5182 to <2 x i64>*
  %5184 = load <2 x i64>, <2 x i64>* %4629, align 16
  store <2 x i64> %5184, <2 x i64>* %5183, align 16
  %5185 = getelementptr inbounds i32, i32* %1, i64 152
  %5186 = bitcast i32* %5185 to <2 x i64>*
  %5187 = load <2 x i64>, <2 x i64>* %4749, align 16
  store <2 x i64> %5187, <2 x i64>* %5186, align 16
  %5188 = getelementptr inbounds i32, i32* %1, i64 156
  %5189 = bitcast i32* %5188 to <2 x i64>*
  %5190 = load <2 x i64>, <2 x i64>* %4789, align 16
  store <2 x i64> %5190, <2 x i64>* %5189, align 16
  %5191 = getelementptr inbounds i32, i32* %1, i64 160
  %5192 = bitcast i32* %5191 to <2 x i64>*
  %5193 = load <2 x i64>, <2 x i64>* %4595, align 16
  store <2 x i64> %5193, <2 x i64>* %5192, align 16
  %5194 = getelementptr inbounds i32, i32* %1, i64 164
  %5195 = bitcast i32* %5194 to <2 x i64>*
  %5196 = load <2 x i64>, <2 x i64>* %4631, align 16
  store <2 x i64> %5196, <2 x i64>* %5195, align 16
  %5197 = getelementptr inbounds i32, i32* %1, i64 168
  %5198 = bitcast i32* %5197 to <2 x i64>*
  %5199 = load <2 x i64>, <2 x i64>* %4751, align 16
  store <2 x i64> %5199, <2 x i64>* %5198, align 16
  %5200 = getelementptr inbounds i32, i32* %1, i64 172
  %5201 = bitcast i32* %5200 to <2 x i64>*
  %5202 = load <2 x i64>, <2 x i64>* %4791, align 16
  store <2 x i64> %5202, <2 x i64>* %5201, align 16
  %5203 = getelementptr inbounds i32, i32* %1, i64 176
  %5204 = bitcast i32* %5203 to <2 x i64>*
  %5205 = load <2 x i64>, <2 x i64>* %4597, align 16
  store <2 x i64> %5205, <2 x i64>* %5204, align 16
  %5206 = getelementptr inbounds i32, i32* %1, i64 180
  %5207 = bitcast i32* %5206 to <2 x i64>*
  %5208 = load <2 x i64>, <2 x i64>* %4633, align 16
  store <2 x i64> %5208, <2 x i64>* %5207, align 16
  %5209 = getelementptr inbounds i32, i32* %1, i64 184
  %5210 = bitcast i32* %5209 to <2 x i64>*
  %5211 = load <2 x i64>, <2 x i64>* %4753, align 16
  store <2 x i64> %5211, <2 x i64>* %5210, align 16
  %5212 = getelementptr inbounds i32, i32* %1, i64 188
  %5213 = bitcast i32* %5212 to <2 x i64>*
  %5214 = load <2 x i64>, <2 x i64>* %4793, align 16
  store <2 x i64> %5214, <2 x i64>* %5213, align 16
  %5215 = getelementptr inbounds i32, i32* %1, i64 192
  %5216 = bitcast i32* %5215 to <2 x i64>*
  %5217 = load <2 x i64>, <2 x i64>* %4607, align 16
  store <2 x i64> %5217, <2 x i64>* %5216, align 16
  %5218 = getelementptr inbounds i32, i32* %1, i64 196
  %5219 = bitcast i32* %5218 to <2 x i64>*
  %5220 = load <2 x i64>, <2 x i64>* %4647, align 16
  store <2 x i64> %5220, <2 x i64>* %5219, align 16
  %5221 = getelementptr inbounds i32, i32* %1, i64 200
  %5222 = bitcast i32* %5221 to <2 x i64>*
  %5223 = load <2 x i64>, <2 x i64>* %4767, align 16
  store <2 x i64> %5223, <2 x i64>* %5222, align 16
  %5224 = getelementptr inbounds i32, i32* %1, i64 204
  %5225 = bitcast i32* %5224 to <2 x i64>*
  %5226 = load <2 x i64>, <2 x i64>* %4807, align 16
  store <2 x i64> %5226, <2 x i64>* %5225, align 16
  %5227 = getelementptr inbounds i32, i32* %1, i64 208
  %5228 = bitcast i32* %5227 to <2 x i64>*
  %5229 = load <2 x i64>, <2 x i64>* %4609, align 16
  store <2 x i64> %5229, <2 x i64>* %5228, align 16
  %5230 = getelementptr inbounds i32, i32* %1, i64 212
  %5231 = bitcast i32* %5230 to <2 x i64>*
  %5232 = load <2 x i64>, <2 x i64>* %4649, align 16
  store <2 x i64> %5232, <2 x i64>* %5231, align 16
  %5233 = getelementptr inbounds i32, i32* %1, i64 216
  %5234 = bitcast i32* %5233 to <2 x i64>*
  %5235 = load <2 x i64>, <2 x i64>* %4769, align 16
  store <2 x i64> %5235, <2 x i64>* %5234, align 16
  %5236 = getelementptr inbounds i32, i32* %1, i64 220
  %5237 = bitcast i32* %5236 to <2 x i64>*
  %5238 = load <2 x i64>, <2 x i64>* %4809, align 16
  store <2 x i64> %5238, <2 x i64>* %5237, align 16
  %5239 = getelementptr inbounds i32, i32* %1, i64 224
  %5240 = bitcast i32* %5239 to <2 x i64>*
  %5241 = load <2 x i64>, <2 x i64>* %4611, align 16
  store <2 x i64> %5241, <2 x i64>* %5240, align 16
  %5242 = getelementptr inbounds i32, i32* %1, i64 228
  %5243 = bitcast i32* %5242 to <2 x i64>*
  %5244 = load <2 x i64>, <2 x i64>* %4651, align 16
  store <2 x i64> %5244, <2 x i64>* %5243, align 16
  %5245 = getelementptr inbounds i32, i32* %1, i64 232
  %5246 = bitcast i32* %5245 to <2 x i64>*
  %5247 = load <2 x i64>, <2 x i64>* %4771, align 16
  store <2 x i64> %5247, <2 x i64>* %5246, align 16
  %5248 = getelementptr inbounds i32, i32* %1, i64 236
  %5249 = bitcast i32* %5248 to <2 x i64>*
  %5250 = load <2 x i64>, <2 x i64>* %4811, align 16
  store <2 x i64> %5250, <2 x i64>* %5249, align 16
  %5251 = getelementptr inbounds i32, i32* %1, i64 240
  %5252 = bitcast i32* %5251 to <2 x i64>*
  %5253 = load <2 x i64>, <2 x i64>* %4613, align 16
  store <2 x i64> %5253, <2 x i64>* %5252, align 16
  %5254 = getelementptr inbounds i32, i32* %1, i64 244
  %5255 = bitcast i32* %5254 to <2 x i64>*
  %5256 = load <2 x i64>, <2 x i64>* %4653, align 16
  store <2 x i64> %5256, <2 x i64>* %5255, align 16
  %5257 = getelementptr inbounds i32, i32* %1, i64 248
  %5258 = bitcast i32* %5257 to <2 x i64>*
  %5259 = load <2 x i64>, <2 x i64>* %4773, align 16
  store <2 x i64> %5259, <2 x i64>* %5258, align 16
  %5260 = getelementptr inbounds i32, i32* %1, i64 252
  %5261 = bitcast i32* %5260 to <2 x i64>*
  %5262 = load <2 x i64>, <2 x i64>* %4813, align 16
  store <2 x i64> %5262, <2 x i64>* %5261, align 16
  br label %17357

5263:                                             ; preds = %5
  %5264 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %5265 = load i8, i8* %10, align 1
  %5266 = sext i8 %5265 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %5264, i32 %2, i32 0, i32 1, i32 %5266)
  %5267 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %5268 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  %5269 = sext i8 %5268 to i32
  call void @fdct16x16_sse4_1(<2 x i64>* nonnull %5264, <2 x i64>* nonnull %5267, i32 %5269, i32 4)
  %5270 = getelementptr inbounds i8, i8* %10, i64 1
  %5271 = load i8, i8* %5270, align 1
  %5272 = sext i8 %5271 to i32
  %5273 = sub nsw i32 0, %5272
  %5274 = xor i32 %5272, -1
  %5275 = shl i32 1, %5274
  %5276 = insertelement <4 x i32> undef, i32 %5275, i32 0
  %5277 = shufflevector <4 x i32> %5276, <4 x i32> undef, <4 x i32> zeroinitializer
  %5278 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %5279 = load <4 x i32>, <4 x i32>* %5278, align 16
  %5280 = add <4 x i32> %5277, %5279
  %5281 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %5282 = bitcast <2 x i64>* %5281 to <4 x i32>*
  %5283 = load <4 x i32>, <4 x i32>* %5282, align 16
  %5284 = add <4 x i32> %5277, %5283
  %5285 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %5286 = bitcast <2 x i64>* %5285 to <4 x i32>*
  %5287 = load <4 x i32>, <4 x i32>* %5286, align 16
  %5288 = add <4 x i32> %5277, %5287
  %5289 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %5290 = bitcast <2 x i64>* %5289 to <4 x i32>*
  %5291 = load <4 x i32>, <4 x i32>* %5290, align 16
  %5292 = add <4 x i32> %5291, %5277
  %5293 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %5294 = bitcast <2 x i64>* %5293 to <4 x i32>*
  %5295 = load <4 x i32>, <4 x i32>* %5294, align 16
  %5296 = add <4 x i32> %5295, %5277
  %5297 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %5298 = bitcast <2 x i64>* %5297 to <4 x i32>*
  %5299 = load <4 x i32>, <4 x i32>* %5298, align 16
  %5300 = add <4 x i32> %5299, %5277
  %5301 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %5302 = bitcast <2 x i64>* %5301 to <4 x i32>*
  %5303 = load <4 x i32>, <4 x i32>* %5302, align 16
  %5304 = add <4 x i32> %5303, %5277
  %5305 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %5306 = bitcast <2 x i64>* %5305 to <4 x i32>*
  %5307 = load <4 x i32>, <4 x i32>* %5306, align 16
  %5308 = add <4 x i32> %5307, %5277
  %5309 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %5310 = bitcast <2 x i64>* %5309 to <4 x i32>*
  %5311 = load <4 x i32>, <4 x i32>* %5310, align 16
  %5312 = add <4 x i32> %5311, %5277
  %5313 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %5314 = bitcast <2 x i64>* %5313 to <4 x i32>*
  %5315 = load <4 x i32>, <4 x i32>* %5314, align 16
  %5316 = add <4 x i32> %5315, %5277
  %5317 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %5318 = bitcast <2 x i64>* %5317 to <4 x i32>*
  %5319 = load <4 x i32>, <4 x i32>* %5318, align 16
  %5320 = add <4 x i32> %5319, %5277
  %5321 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %5322 = bitcast <2 x i64>* %5321 to <4 x i32>*
  %5323 = load <4 x i32>, <4 x i32>* %5322, align 16
  %5324 = add <4 x i32> %5323, %5277
  %5325 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %5326 = bitcast <2 x i64>* %5325 to <4 x i32>*
  %5327 = load <4 x i32>, <4 x i32>* %5326, align 16
  %5328 = add <4 x i32> %5327, %5277
  %5329 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %5330 = bitcast <2 x i64>* %5329 to <4 x i32>*
  %5331 = load <4 x i32>, <4 x i32>* %5330, align 16
  %5332 = add <4 x i32> %5331, %5277
  %5333 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %5334 = bitcast <2 x i64>* %5333 to <4 x i32>*
  %5335 = load <4 x i32>, <4 x i32>* %5334, align 16
  %5336 = add <4 x i32> %5335, %5277
  %5337 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %5338 = bitcast <2 x i64>* %5337 to <4 x i32>*
  %5339 = load <4 x i32>, <4 x i32>* %5338, align 16
  %5340 = add <4 x i32> %5339, %5277
  %5341 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5280, i32 %5273) #8
  store <4 x i32> %5341, <4 x i32>* %5278, align 16
  %5342 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5284, i32 %5273) #8
  store <4 x i32> %5342, <4 x i32>* %5282, align 16
  %5343 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5288, i32 %5273) #8
  store <4 x i32> %5343, <4 x i32>* %5286, align 16
  %5344 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5292, i32 %5273) #8
  store <4 x i32> %5344, <4 x i32>* %5290, align 16
  %5345 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5296, i32 %5273) #8
  store <4 x i32> %5345, <4 x i32>* %5294, align 16
  %5346 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5300, i32 %5273) #8
  store <4 x i32> %5346, <4 x i32>* %5298, align 16
  %5347 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5304, i32 %5273) #8
  store <4 x i32> %5347, <4 x i32>* %5302, align 16
  %5348 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5308, i32 %5273) #8
  store <4 x i32> %5348, <4 x i32>* %5306, align 16
  %5349 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5312, i32 %5273) #8
  store <4 x i32> %5349, <4 x i32>* %5310, align 16
  %5350 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5316, i32 %5273) #8
  store <4 x i32> %5350, <4 x i32>* %5314, align 16
  %5351 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5320, i32 %5273) #8
  store <4 x i32> %5351, <4 x i32>* %5318, align 16
  %5352 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5324, i32 %5273) #8
  store <4 x i32> %5352, <4 x i32>* %5322, align 16
  %5353 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5328, i32 %5273) #8
  store <4 x i32> %5353, <4 x i32>* %5326, align 16
  %5354 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5332, i32 %5273) #8
  store <4 x i32> %5354, <4 x i32>* %5330, align 16
  %5355 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5336, i32 %5273) #8
  store <4 x i32> %5355, <4 x i32>* %5334, align 16
  %5356 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5340, i32 %5273) #8
  store <4 x i32> %5356, <4 x i32>* %5338, align 16
  %5357 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %5358 = bitcast <2 x i64>* %5357 to <4 x i32>*
  %5359 = load <4 x i32>, <4 x i32>* %5358, align 16
  %5360 = add <4 x i32> %5359, %5277
  %5361 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %5362 = bitcast <2 x i64>* %5361 to <4 x i32>*
  %5363 = load <4 x i32>, <4 x i32>* %5362, align 16
  %5364 = add <4 x i32> %5363, %5277
  %5365 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %5366 = bitcast <2 x i64>* %5365 to <4 x i32>*
  %5367 = load <4 x i32>, <4 x i32>* %5366, align 16
  %5368 = add <4 x i32> %5367, %5277
  %5369 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %5370 = bitcast <2 x i64>* %5369 to <4 x i32>*
  %5371 = load <4 x i32>, <4 x i32>* %5370, align 16
  %5372 = add <4 x i32> %5371, %5277
  %5373 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %5374 = bitcast <2 x i64>* %5373 to <4 x i32>*
  %5375 = load <4 x i32>, <4 x i32>* %5374, align 16
  %5376 = add <4 x i32> %5375, %5277
  %5377 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %5378 = bitcast <2 x i64>* %5377 to <4 x i32>*
  %5379 = load <4 x i32>, <4 x i32>* %5378, align 16
  %5380 = add <4 x i32> %5379, %5277
  %5381 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %5382 = bitcast <2 x i64>* %5381 to <4 x i32>*
  %5383 = load <4 x i32>, <4 x i32>* %5382, align 16
  %5384 = add <4 x i32> %5383, %5277
  %5385 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %5386 = bitcast <2 x i64>* %5385 to <4 x i32>*
  %5387 = load <4 x i32>, <4 x i32>* %5386, align 16
  %5388 = add <4 x i32> %5387, %5277
  %5389 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %5390 = bitcast <2 x i64>* %5389 to <4 x i32>*
  %5391 = load <4 x i32>, <4 x i32>* %5390, align 16
  %5392 = add <4 x i32> %5391, %5277
  %5393 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %5394 = bitcast <2 x i64>* %5393 to <4 x i32>*
  %5395 = load <4 x i32>, <4 x i32>* %5394, align 16
  %5396 = add <4 x i32> %5395, %5277
  %5397 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %5398 = bitcast <2 x i64>* %5397 to <4 x i32>*
  %5399 = load <4 x i32>, <4 x i32>* %5398, align 16
  %5400 = add <4 x i32> %5399, %5277
  %5401 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %5402 = bitcast <2 x i64>* %5401 to <4 x i32>*
  %5403 = load <4 x i32>, <4 x i32>* %5402, align 16
  %5404 = add <4 x i32> %5403, %5277
  %5405 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %5406 = bitcast <2 x i64>* %5405 to <4 x i32>*
  %5407 = load <4 x i32>, <4 x i32>* %5406, align 16
  %5408 = add <4 x i32> %5407, %5277
  %5409 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %5410 = bitcast <2 x i64>* %5409 to <4 x i32>*
  %5411 = load <4 x i32>, <4 x i32>* %5410, align 16
  %5412 = add <4 x i32> %5411, %5277
  %5413 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %5414 = bitcast <2 x i64>* %5413 to <4 x i32>*
  %5415 = load <4 x i32>, <4 x i32>* %5414, align 16
  %5416 = add <4 x i32> %5415, %5277
  %5417 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %5418 = bitcast <2 x i64>* %5417 to <4 x i32>*
  %5419 = load <4 x i32>, <4 x i32>* %5418, align 16
  %5420 = add <4 x i32> %5419, %5277
  %5421 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5360, i32 %5273) #8
  store <4 x i32> %5421, <4 x i32>* %5358, align 16
  %5422 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5364, i32 %5273) #8
  store <4 x i32> %5422, <4 x i32>* %5362, align 16
  %5423 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5368, i32 %5273) #8
  store <4 x i32> %5423, <4 x i32>* %5366, align 16
  %5424 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5372, i32 %5273) #8
  store <4 x i32> %5424, <4 x i32>* %5370, align 16
  %5425 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5376, i32 %5273) #8
  store <4 x i32> %5425, <4 x i32>* %5374, align 16
  %5426 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5380, i32 %5273) #8
  store <4 x i32> %5426, <4 x i32>* %5378, align 16
  %5427 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5384, i32 %5273) #8
  store <4 x i32> %5427, <4 x i32>* %5382, align 16
  %5428 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5388, i32 %5273) #8
  store <4 x i32> %5428, <4 x i32>* %5386, align 16
  %5429 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5392, i32 %5273) #8
  store <4 x i32> %5429, <4 x i32>* %5390, align 16
  %5430 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5396, i32 %5273) #8
  store <4 x i32> %5430, <4 x i32>* %5394, align 16
  %5431 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5400, i32 %5273) #8
  store <4 x i32> %5431, <4 x i32>* %5398, align 16
  %5432 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5404, i32 %5273) #8
  store <4 x i32> %5432, <4 x i32>* %5402, align 16
  %5433 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5408, i32 %5273) #8
  store <4 x i32> %5433, <4 x i32>* %5406, align 16
  %5434 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5412, i32 %5273) #8
  store <4 x i32> %5434, <4 x i32>* %5410, align 16
  %5435 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5416, i32 %5273) #8
  store <4 x i32> %5435, <4 x i32>* %5414, align 16
  %5436 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5420, i32 %5273) #8
  store <4 x i32> %5436, <4 x i32>* %5418, align 16
  %5437 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %5438 = bitcast <2 x i64>* %5437 to <4 x i32>*
  %5439 = load <4 x i32>, <4 x i32>* %5438, align 16
  %5440 = add <4 x i32> %5439, %5277
  %5441 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %5442 = bitcast <2 x i64>* %5441 to <4 x i32>*
  %5443 = load <4 x i32>, <4 x i32>* %5442, align 16
  %5444 = add <4 x i32> %5443, %5277
  %5445 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %5446 = bitcast <2 x i64>* %5445 to <4 x i32>*
  %5447 = load <4 x i32>, <4 x i32>* %5446, align 16
  %5448 = add <4 x i32> %5447, %5277
  %5449 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %5450 = bitcast <2 x i64>* %5449 to <4 x i32>*
  %5451 = load <4 x i32>, <4 x i32>* %5450, align 16
  %5452 = add <4 x i32> %5451, %5277
  %5453 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %5454 = bitcast <2 x i64>* %5453 to <4 x i32>*
  %5455 = load <4 x i32>, <4 x i32>* %5454, align 16
  %5456 = add <4 x i32> %5455, %5277
  %5457 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %5458 = bitcast <2 x i64>* %5457 to <4 x i32>*
  %5459 = load <4 x i32>, <4 x i32>* %5458, align 16
  %5460 = add <4 x i32> %5459, %5277
  %5461 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %5462 = bitcast <2 x i64>* %5461 to <4 x i32>*
  %5463 = load <4 x i32>, <4 x i32>* %5462, align 16
  %5464 = add <4 x i32> %5463, %5277
  %5465 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %5466 = bitcast <2 x i64>* %5465 to <4 x i32>*
  %5467 = load <4 x i32>, <4 x i32>* %5466, align 16
  %5468 = add <4 x i32> %5467, %5277
  %5469 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %5470 = bitcast <2 x i64>* %5469 to <4 x i32>*
  %5471 = load <4 x i32>, <4 x i32>* %5470, align 16
  %5472 = add <4 x i32> %5471, %5277
  %5473 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %5474 = bitcast <2 x i64>* %5473 to <4 x i32>*
  %5475 = load <4 x i32>, <4 x i32>* %5474, align 16
  %5476 = add <4 x i32> %5475, %5277
  %5477 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %5478 = bitcast <2 x i64>* %5477 to <4 x i32>*
  %5479 = load <4 x i32>, <4 x i32>* %5478, align 16
  %5480 = add <4 x i32> %5479, %5277
  %5481 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %5482 = bitcast <2 x i64>* %5481 to <4 x i32>*
  %5483 = load <4 x i32>, <4 x i32>* %5482, align 16
  %5484 = add <4 x i32> %5483, %5277
  %5485 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %5486 = bitcast <2 x i64>* %5485 to <4 x i32>*
  %5487 = load <4 x i32>, <4 x i32>* %5486, align 16
  %5488 = add <4 x i32> %5487, %5277
  %5489 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %5490 = bitcast <2 x i64>* %5489 to <4 x i32>*
  %5491 = load <4 x i32>, <4 x i32>* %5490, align 16
  %5492 = add <4 x i32> %5491, %5277
  %5493 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %5494 = bitcast <2 x i64>* %5493 to <4 x i32>*
  %5495 = load <4 x i32>, <4 x i32>* %5494, align 16
  %5496 = add <4 x i32> %5495, %5277
  %5497 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %5498 = bitcast <2 x i64>* %5497 to <4 x i32>*
  %5499 = load <4 x i32>, <4 x i32>* %5498, align 16
  %5500 = add <4 x i32> %5499, %5277
  %5501 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5440, i32 %5273) #8
  store <4 x i32> %5501, <4 x i32>* %5438, align 16
  %5502 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5444, i32 %5273) #8
  store <4 x i32> %5502, <4 x i32>* %5442, align 16
  %5503 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5448, i32 %5273) #8
  store <4 x i32> %5503, <4 x i32>* %5446, align 16
  %5504 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5452, i32 %5273) #8
  store <4 x i32> %5504, <4 x i32>* %5450, align 16
  %5505 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5456, i32 %5273) #8
  store <4 x i32> %5505, <4 x i32>* %5454, align 16
  %5506 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5460, i32 %5273) #8
  store <4 x i32> %5506, <4 x i32>* %5458, align 16
  %5507 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5464, i32 %5273) #8
  store <4 x i32> %5507, <4 x i32>* %5462, align 16
  %5508 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5468, i32 %5273) #8
  store <4 x i32> %5508, <4 x i32>* %5466, align 16
  %5509 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5472, i32 %5273) #8
  store <4 x i32> %5509, <4 x i32>* %5470, align 16
  %5510 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5476, i32 %5273) #8
  store <4 x i32> %5510, <4 x i32>* %5474, align 16
  %5511 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5480, i32 %5273) #8
  store <4 x i32> %5511, <4 x i32>* %5478, align 16
  %5512 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5484, i32 %5273) #8
  store <4 x i32> %5512, <4 x i32>* %5482, align 16
  %5513 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5488, i32 %5273) #8
  store <4 x i32> %5513, <4 x i32>* %5486, align 16
  %5514 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5492, i32 %5273) #8
  store <4 x i32> %5514, <4 x i32>* %5490, align 16
  %5515 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5496, i32 %5273) #8
  store <4 x i32> %5515, <4 x i32>* %5494, align 16
  %5516 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5500, i32 %5273) #8
  store <4 x i32> %5516, <4 x i32>* %5498, align 16
  %5517 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %5518 = bitcast <2 x i64>* %5517 to <4 x i32>*
  %5519 = load <4 x i32>, <4 x i32>* %5518, align 16
  %5520 = add <4 x i32> %5519, %5277
  %5521 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %5522 = bitcast <2 x i64>* %5521 to <4 x i32>*
  %5523 = load <4 x i32>, <4 x i32>* %5522, align 16
  %5524 = add <4 x i32> %5523, %5277
  %5525 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %5526 = bitcast <2 x i64>* %5525 to <4 x i32>*
  %5527 = load <4 x i32>, <4 x i32>* %5526, align 16
  %5528 = add <4 x i32> %5527, %5277
  %5529 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %5530 = bitcast <2 x i64>* %5529 to <4 x i32>*
  %5531 = load <4 x i32>, <4 x i32>* %5530, align 16
  %5532 = add <4 x i32> %5531, %5277
  %5533 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %5534 = bitcast <2 x i64>* %5533 to <4 x i32>*
  %5535 = load <4 x i32>, <4 x i32>* %5534, align 16
  %5536 = add <4 x i32> %5535, %5277
  %5537 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %5538 = bitcast <2 x i64>* %5537 to <4 x i32>*
  %5539 = load <4 x i32>, <4 x i32>* %5538, align 16
  %5540 = add <4 x i32> %5539, %5277
  %5541 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %5542 = bitcast <2 x i64>* %5541 to <4 x i32>*
  %5543 = load <4 x i32>, <4 x i32>* %5542, align 16
  %5544 = add <4 x i32> %5543, %5277
  %5545 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %5546 = bitcast <2 x i64>* %5545 to <4 x i32>*
  %5547 = load <4 x i32>, <4 x i32>* %5546, align 16
  %5548 = add <4 x i32> %5547, %5277
  %5549 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %5550 = bitcast <2 x i64>* %5549 to <4 x i32>*
  %5551 = load <4 x i32>, <4 x i32>* %5550, align 16
  %5552 = add <4 x i32> %5551, %5277
  %5553 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %5554 = bitcast <2 x i64>* %5553 to <4 x i32>*
  %5555 = load <4 x i32>, <4 x i32>* %5554, align 16
  %5556 = add <4 x i32> %5555, %5277
  %5557 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %5558 = bitcast <2 x i64>* %5557 to <4 x i32>*
  %5559 = load <4 x i32>, <4 x i32>* %5558, align 16
  %5560 = add <4 x i32> %5559, %5277
  %5561 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %5562 = bitcast <2 x i64>* %5561 to <4 x i32>*
  %5563 = load <4 x i32>, <4 x i32>* %5562, align 16
  %5564 = add <4 x i32> %5563, %5277
  %5565 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %5566 = bitcast <2 x i64>* %5565 to <4 x i32>*
  %5567 = load <4 x i32>, <4 x i32>* %5566, align 16
  %5568 = add <4 x i32> %5567, %5277
  %5569 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %5570 = bitcast <2 x i64>* %5569 to <4 x i32>*
  %5571 = load <4 x i32>, <4 x i32>* %5570, align 16
  %5572 = add <4 x i32> %5571, %5277
  %5573 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %5574 = bitcast <2 x i64>* %5573 to <4 x i32>*
  %5575 = load <4 x i32>, <4 x i32>* %5574, align 16
  %5576 = add <4 x i32> %5575, %5277
  %5577 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %5578 = bitcast <2 x i64>* %5577 to <4 x i32>*
  %5579 = load <4 x i32>, <4 x i32>* %5578, align 16
  %5580 = add <4 x i32> %5579, %5277
  %5581 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5520, i32 %5273) #8
  store <4 x i32> %5581, <4 x i32>* %5518, align 16
  %5582 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5524, i32 %5273) #8
  store <4 x i32> %5582, <4 x i32>* %5522, align 16
  %5583 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5528, i32 %5273) #8
  store <4 x i32> %5583, <4 x i32>* %5526, align 16
  %5584 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5532, i32 %5273) #8
  store <4 x i32> %5584, <4 x i32>* %5530, align 16
  %5585 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5536, i32 %5273) #8
  store <4 x i32> %5585, <4 x i32>* %5534, align 16
  %5586 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5540, i32 %5273) #8
  store <4 x i32> %5586, <4 x i32>* %5538, align 16
  %5587 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5544, i32 %5273) #8
  store <4 x i32> %5587, <4 x i32>* %5542, align 16
  %5588 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5548, i32 %5273) #8
  store <4 x i32> %5588, <4 x i32>* %5546, align 16
  %5589 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5552, i32 %5273) #8
  store <4 x i32> %5589, <4 x i32>* %5550, align 16
  %5590 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5556, i32 %5273) #8
  store <4 x i32> %5590, <4 x i32>* %5554, align 16
  %5591 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5560, i32 %5273) #8
  store <4 x i32> %5591, <4 x i32>* %5558, align 16
  %5592 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5564, i32 %5273) #8
  store <4 x i32> %5592, <4 x i32>* %5562, align 16
  %5593 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5568, i32 %5273) #8
  store <4 x i32> %5593, <4 x i32>* %5566, align 16
  %5594 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5572, i32 %5273) #8
  store <4 x i32> %5594, <4 x i32>* %5570, align 16
  %5595 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5576, i32 %5273) #8
  store <4 x i32> %5595, <4 x i32>* %5574, align 16
  %5596 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %5580, i32 %5273) #8
  store <4 x i32> %5596, <4 x i32>* %5578, align 16
  %5597 = shufflevector <4 x i32> %5341, <4 x i32> %5345, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5598 = bitcast <4 x i32> %5597 to <2 x i64>
  %5599 = shufflevector <4 x i32> %5341, <4 x i32> %5345, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5600 = bitcast <4 x i32> %5599 to <2 x i64>
  %5601 = shufflevector <4 x i32> %5349, <4 x i32> %5353, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5602 = bitcast <4 x i32> %5601 to <2 x i64>
  %5603 = shufflevector <4 x i32> %5349, <4 x i32> %5353, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5604 = bitcast <4 x i32> %5603 to <2 x i64>
  %5605 = shufflevector <2 x i64> %5598, <2 x i64> %5602, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5605, <2 x i64>* %5264, align 16
  %5606 = shufflevector <2 x i64> %5598, <2 x i64> %5602, <2 x i32> <i32 1, i32 3>
  %5607 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %5606, <2 x i64>* %5607, align 16
  %5608 = shufflevector <2 x i64> %5600, <2 x i64> %5604, <2 x i32> <i32 0, i32 2>
  %5609 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %5608, <2 x i64>* %5609, align 16
  %5610 = shufflevector <2 x i64> %5600, <2 x i64> %5604, <2 x i32> <i32 1, i32 3>
  %5611 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %5610, <2 x i64>* %5611, align 16
  %5612 = shufflevector <4 x i32> %5342, <4 x i32> %5346, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5613 = bitcast <4 x i32> %5612 to <2 x i64>
  %5614 = shufflevector <4 x i32> %5342, <4 x i32> %5346, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5615 = bitcast <4 x i32> %5614 to <2 x i64>
  %5616 = shufflevector <4 x i32> %5350, <4 x i32> %5354, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5617 = bitcast <4 x i32> %5616 to <2 x i64>
  %5618 = shufflevector <4 x i32> %5350, <4 x i32> %5354, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5619 = bitcast <4 x i32> %5618 to <2 x i64>
  %5620 = shufflevector <2 x i64> %5613, <2 x i64> %5617, <2 x i32> <i32 0, i32 2>
  %5621 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %5620, <2 x i64>* %5621, align 16
  %5622 = shufflevector <2 x i64> %5613, <2 x i64> %5617, <2 x i32> <i32 1, i32 3>
  %5623 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %5622, <2 x i64>* %5623, align 16
  %5624 = shufflevector <2 x i64> %5615, <2 x i64> %5619, <2 x i32> <i32 0, i32 2>
  %5625 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %5624, <2 x i64>* %5625, align 16
  %5626 = shufflevector <2 x i64> %5615, <2 x i64> %5619, <2 x i32> <i32 1, i32 3>
  %5627 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %5626, <2 x i64>* %5627, align 16
  %5628 = load <4 x i32>, <4 x i32>* %5374, align 16
  %5629 = shufflevector <4 x i32> %5421, <4 x i32> %5628, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5630 = bitcast <4 x i32> %5629 to <2 x i64>
  %5631 = shufflevector <4 x i32> %5421, <4 x i32> %5628, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5632 = bitcast <4 x i32> %5631 to <2 x i64>
  %5633 = load <4 x i32>, <4 x i32>* %5390, align 16
  %5634 = load <4 x i32>, <4 x i32>* %5406, align 16
  %5635 = shufflevector <4 x i32> %5633, <4 x i32> %5634, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5636 = bitcast <4 x i32> %5635 to <2 x i64>
  %5637 = shufflevector <4 x i32> %5633, <4 x i32> %5634, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5638 = bitcast <4 x i32> %5637 to <2 x i64>
  %5639 = shufflevector <2 x i64> %5630, <2 x i64> %5636, <2 x i32> <i32 0, i32 2>
  %5640 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %5639, <2 x i64>* %5640, align 16
  %5641 = shufflevector <2 x i64> %5630, <2 x i64> %5636, <2 x i32> <i32 1, i32 3>
  %5642 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %5641, <2 x i64>* %5642, align 16
  %5643 = shufflevector <2 x i64> %5632, <2 x i64> %5638, <2 x i32> <i32 0, i32 2>
  %5644 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %5643, <2 x i64>* %5644, align 16
  %5645 = shufflevector <2 x i64> %5632, <2 x i64> %5638, <2 x i32> <i32 1, i32 3>
  %5646 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %5645, <2 x i64>* %5646, align 16
  %5647 = load <4 x i32>, <4 x i32>* %5362, align 16
  %5648 = load <4 x i32>, <4 x i32>* %5378, align 16
  %5649 = shufflevector <4 x i32> %5647, <4 x i32> %5648, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5650 = bitcast <4 x i32> %5649 to <2 x i64>
  %5651 = shufflevector <4 x i32> %5647, <4 x i32> %5648, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5652 = bitcast <4 x i32> %5651 to <2 x i64>
  %5653 = load <4 x i32>, <4 x i32>* %5394, align 16
  %5654 = load <4 x i32>, <4 x i32>* %5410, align 16
  %5655 = shufflevector <4 x i32> %5653, <4 x i32> %5654, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5656 = bitcast <4 x i32> %5655 to <2 x i64>
  %5657 = shufflevector <4 x i32> %5653, <4 x i32> %5654, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5658 = bitcast <4 x i32> %5657 to <2 x i64>
  %5659 = shufflevector <2 x i64> %5650, <2 x i64> %5656, <2 x i32> <i32 0, i32 2>
  %5660 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %5659, <2 x i64>* %5660, align 16
  %5661 = shufflevector <2 x i64> %5650, <2 x i64> %5656, <2 x i32> <i32 1, i32 3>
  %5662 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %5661, <2 x i64>* %5662, align 16
  %5663 = shufflevector <2 x i64> %5652, <2 x i64> %5658, <2 x i32> <i32 0, i32 2>
  %5664 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %5663, <2 x i64>* %5664, align 16
  %5665 = shufflevector <2 x i64> %5652, <2 x i64> %5658, <2 x i32> <i32 1, i32 3>
  %5666 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %5665, <2 x i64>* %5666, align 16
  %5667 = shufflevector <4 x i32> %5343, <4 x i32> %5347, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5668 = bitcast <4 x i32> %5667 to <2 x i64>
  %5669 = shufflevector <4 x i32> %5343, <4 x i32> %5347, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5670 = bitcast <4 x i32> %5669 to <2 x i64>
  %5671 = shufflevector <4 x i32> %5351, <4 x i32> %5355, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5672 = bitcast <4 x i32> %5671 to <2 x i64>
  %5673 = shufflevector <4 x i32> %5351, <4 x i32> %5355, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5674 = bitcast <4 x i32> %5673 to <2 x i64>
  %5675 = shufflevector <2 x i64> %5668, <2 x i64> %5672, <2 x i32> <i32 0, i32 2>
  %5676 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %5675, <2 x i64>* %5676, align 16
  %5677 = shufflevector <2 x i64> %5668, <2 x i64> %5672, <2 x i32> <i32 1, i32 3>
  %5678 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %5677, <2 x i64>* %5678, align 16
  %5679 = shufflevector <2 x i64> %5670, <2 x i64> %5674, <2 x i32> <i32 0, i32 2>
  %5680 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %5679, <2 x i64>* %5680, align 16
  %5681 = shufflevector <2 x i64> %5670, <2 x i64> %5674, <2 x i32> <i32 1, i32 3>
  %5682 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %5681, <2 x i64>* %5682, align 16
  %5683 = shufflevector <4 x i32> %5344, <4 x i32> %5348, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5684 = bitcast <4 x i32> %5683 to <2 x i64>
  %5685 = shufflevector <4 x i32> %5344, <4 x i32> %5348, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5686 = bitcast <4 x i32> %5685 to <2 x i64>
  %5687 = shufflevector <4 x i32> %5352, <4 x i32> %5356, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5688 = bitcast <4 x i32> %5687 to <2 x i64>
  %5689 = shufflevector <4 x i32> %5352, <4 x i32> %5356, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5690 = bitcast <4 x i32> %5689 to <2 x i64>
  %5691 = shufflevector <2 x i64> %5684, <2 x i64> %5688, <2 x i32> <i32 0, i32 2>
  %5692 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %5691, <2 x i64>* %5692, align 16
  %5693 = shufflevector <2 x i64> %5684, <2 x i64> %5688, <2 x i32> <i32 1, i32 3>
  %5694 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %5693, <2 x i64>* %5694, align 16
  %5695 = shufflevector <2 x i64> %5686, <2 x i64> %5690, <2 x i32> <i32 0, i32 2>
  %5696 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %5695, <2 x i64>* %5696, align 16
  %5697 = shufflevector <2 x i64> %5686, <2 x i64> %5690, <2 x i32> <i32 1, i32 3>
  %5698 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %5697, <2 x i64>* %5698, align 16
  %5699 = load <4 x i32>, <4 x i32>* %5366, align 16
  %5700 = load <4 x i32>, <4 x i32>* %5382, align 16
  %5701 = shufflevector <4 x i32> %5699, <4 x i32> %5700, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5702 = bitcast <4 x i32> %5701 to <2 x i64>
  %5703 = shufflevector <4 x i32> %5699, <4 x i32> %5700, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5704 = bitcast <4 x i32> %5703 to <2 x i64>
  %5705 = load <4 x i32>, <4 x i32>* %5398, align 16
  %5706 = load <4 x i32>, <4 x i32>* %5414, align 16
  %5707 = shufflevector <4 x i32> %5705, <4 x i32> %5706, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5708 = bitcast <4 x i32> %5707 to <2 x i64>
  %5709 = shufflevector <4 x i32> %5705, <4 x i32> %5706, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5710 = bitcast <4 x i32> %5709 to <2 x i64>
  %5711 = shufflevector <2 x i64> %5702, <2 x i64> %5708, <2 x i32> <i32 0, i32 2>
  %5712 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %5711, <2 x i64>* %5712, align 16
  %5713 = shufflevector <2 x i64> %5702, <2 x i64> %5708, <2 x i32> <i32 1, i32 3>
  %5714 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %5713, <2 x i64>* %5714, align 16
  %5715 = shufflevector <2 x i64> %5704, <2 x i64> %5710, <2 x i32> <i32 0, i32 2>
  %5716 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %5715, <2 x i64>* %5716, align 16
  %5717 = shufflevector <2 x i64> %5704, <2 x i64> %5710, <2 x i32> <i32 1, i32 3>
  %5718 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %5717, <2 x i64>* %5718, align 16
  %5719 = load <4 x i32>, <4 x i32>* %5370, align 16
  %5720 = load <4 x i32>, <4 x i32>* %5386, align 16
  %5721 = shufflevector <4 x i32> %5719, <4 x i32> %5720, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5722 = bitcast <4 x i32> %5721 to <2 x i64>
  %5723 = shufflevector <4 x i32> %5719, <4 x i32> %5720, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5724 = bitcast <4 x i32> %5723 to <2 x i64>
  %5725 = load <4 x i32>, <4 x i32>* %5402, align 16
  %5726 = load <4 x i32>, <4 x i32>* %5418, align 16
  %5727 = shufflevector <4 x i32> %5725, <4 x i32> %5726, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5728 = bitcast <4 x i32> %5727 to <2 x i64>
  %5729 = shufflevector <4 x i32> %5725, <4 x i32> %5726, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5730 = bitcast <4 x i32> %5729 to <2 x i64>
  %5731 = shufflevector <2 x i64> %5722, <2 x i64> %5728, <2 x i32> <i32 0, i32 2>
  %5732 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %5731, <2 x i64>* %5732, align 16
  %5733 = shufflevector <2 x i64> %5722, <2 x i64> %5728, <2 x i32> <i32 1, i32 3>
  %5734 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %5733, <2 x i64>* %5734, align 16
  %5735 = shufflevector <2 x i64> %5724, <2 x i64> %5730, <2 x i32> <i32 0, i32 2>
  %5736 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %5735, <2 x i64>* %5736, align 16
  %5737 = shufflevector <2 x i64> %5724, <2 x i64> %5730, <2 x i32> <i32 1, i32 3>
  %5738 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %5737, <2 x i64>* %5738, align 16
  %5739 = load <4 x i32>, <4 x i32>* %5438, align 16
  %5740 = load <4 x i32>, <4 x i32>* %5454, align 16
  %5741 = shufflevector <4 x i32> %5739, <4 x i32> %5740, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5742 = bitcast <4 x i32> %5741 to <2 x i64>
  %5743 = shufflevector <4 x i32> %5739, <4 x i32> %5740, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5744 = bitcast <4 x i32> %5743 to <2 x i64>
  %5745 = load <4 x i32>, <4 x i32>* %5470, align 16
  %5746 = load <4 x i32>, <4 x i32>* %5486, align 16
  %5747 = shufflevector <4 x i32> %5745, <4 x i32> %5746, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5748 = bitcast <4 x i32> %5747 to <2 x i64>
  %5749 = shufflevector <4 x i32> %5745, <4 x i32> %5746, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5750 = bitcast <4 x i32> %5749 to <2 x i64>
  %5751 = shufflevector <2 x i64> %5742, <2 x i64> %5748, <2 x i32> <i32 0, i32 2>
  %5752 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %5751, <2 x i64>* %5752, align 16
  %5753 = shufflevector <2 x i64> %5742, <2 x i64> %5748, <2 x i32> <i32 1, i32 3>
  %5754 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %5753, <2 x i64>* %5754, align 16
  %5755 = shufflevector <2 x i64> %5744, <2 x i64> %5750, <2 x i32> <i32 0, i32 2>
  %5756 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %5755, <2 x i64>* %5756, align 16
  %5757 = shufflevector <2 x i64> %5744, <2 x i64> %5750, <2 x i32> <i32 1, i32 3>
  %5758 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %5757, <2 x i64>* %5758, align 16
  %5759 = load <4 x i32>, <4 x i32>* %5442, align 16
  %5760 = load <4 x i32>, <4 x i32>* %5458, align 16
  %5761 = shufflevector <4 x i32> %5759, <4 x i32> %5760, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5762 = bitcast <4 x i32> %5761 to <2 x i64>
  %5763 = shufflevector <4 x i32> %5759, <4 x i32> %5760, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5764 = bitcast <4 x i32> %5763 to <2 x i64>
  %5765 = load <4 x i32>, <4 x i32>* %5474, align 16
  %5766 = load <4 x i32>, <4 x i32>* %5490, align 16
  %5767 = shufflevector <4 x i32> %5765, <4 x i32> %5766, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5768 = bitcast <4 x i32> %5767 to <2 x i64>
  %5769 = shufflevector <4 x i32> %5765, <4 x i32> %5766, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5770 = bitcast <4 x i32> %5769 to <2 x i64>
  %5771 = shufflevector <2 x i64> %5762, <2 x i64> %5768, <2 x i32> <i32 0, i32 2>
  %5772 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %5771, <2 x i64>* %5772, align 16
  %5773 = shufflevector <2 x i64> %5762, <2 x i64> %5768, <2 x i32> <i32 1, i32 3>
  %5774 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %5773, <2 x i64>* %5774, align 16
  %5775 = shufflevector <2 x i64> %5764, <2 x i64> %5770, <2 x i32> <i32 0, i32 2>
  %5776 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %5775, <2 x i64>* %5776, align 16
  %5777 = shufflevector <2 x i64> %5764, <2 x i64> %5770, <2 x i32> <i32 1, i32 3>
  %5778 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %5777, <2 x i64>* %5778, align 16
  %5779 = load <4 x i32>, <4 x i32>* %5518, align 16
  %5780 = load <4 x i32>, <4 x i32>* %5534, align 16
  %5781 = shufflevector <4 x i32> %5779, <4 x i32> %5780, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5782 = bitcast <4 x i32> %5781 to <2 x i64>
  %5783 = shufflevector <4 x i32> %5779, <4 x i32> %5780, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5784 = bitcast <4 x i32> %5783 to <2 x i64>
  %5785 = load <4 x i32>, <4 x i32>* %5550, align 16
  %5786 = load <4 x i32>, <4 x i32>* %5566, align 16
  %5787 = shufflevector <4 x i32> %5785, <4 x i32> %5786, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5788 = bitcast <4 x i32> %5787 to <2 x i64>
  %5789 = shufflevector <4 x i32> %5785, <4 x i32> %5786, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5790 = bitcast <4 x i32> %5789 to <2 x i64>
  %5791 = shufflevector <2 x i64> %5782, <2 x i64> %5788, <2 x i32> <i32 0, i32 2>
  %5792 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %5791, <2 x i64>* %5792, align 16
  %5793 = shufflevector <2 x i64> %5782, <2 x i64> %5788, <2 x i32> <i32 1, i32 3>
  %5794 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %5793, <2 x i64>* %5794, align 16
  %5795 = shufflevector <2 x i64> %5784, <2 x i64> %5790, <2 x i32> <i32 0, i32 2>
  %5796 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %5795, <2 x i64>* %5796, align 16
  %5797 = shufflevector <2 x i64> %5784, <2 x i64> %5790, <2 x i32> <i32 1, i32 3>
  %5798 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %5797, <2 x i64>* %5798, align 16
  %5799 = load <4 x i32>, <4 x i32>* %5522, align 16
  %5800 = load <4 x i32>, <4 x i32>* %5538, align 16
  %5801 = shufflevector <4 x i32> %5799, <4 x i32> %5800, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5802 = bitcast <4 x i32> %5801 to <2 x i64>
  %5803 = shufflevector <4 x i32> %5799, <4 x i32> %5800, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5804 = bitcast <4 x i32> %5803 to <2 x i64>
  %5805 = load <4 x i32>, <4 x i32>* %5554, align 16
  %5806 = load <4 x i32>, <4 x i32>* %5570, align 16
  %5807 = shufflevector <4 x i32> %5805, <4 x i32> %5806, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5808 = bitcast <4 x i32> %5807 to <2 x i64>
  %5809 = shufflevector <4 x i32> %5805, <4 x i32> %5806, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5810 = bitcast <4 x i32> %5809 to <2 x i64>
  %5811 = shufflevector <2 x i64> %5802, <2 x i64> %5808, <2 x i32> <i32 0, i32 2>
  %5812 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %5811, <2 x i64>* %5812, align 16
  %5813 = shufflevector <2 x i64> %5802, <2 x i64> %5808, <2 x i32> <i32 1, i32 3>
  %5814 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %5813, <2 x i64>* %5814, align 16
  %5815 = shufflevector <2 x i64> %5804, <2 x i64> %5810, <2 x i32> <i32 0, i32 2>
  %5816 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %5815, <2 x i64>* %5816, align 16
  %5817 = shufflevector <2 x i64> %5804, <2 x i64> %5810, <2 x i32> <i32 1, i32 3>
  %5818 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %5817, <2 x i64>* %5818, align 16
  %5819 = load <4 x i32>, <4 x i32>* %5446, align 16
  %5820 = load <4 x i32>, <4 x i32>* %5462, align 16
  %5821 = shufflevector <4 x i32> %5819, <4 x i32> %5820, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5822 = bitcast <4 x i32> %5821 to <2 x i64>
  %5823 = shufflevector <4 x i32> %5819, <4 x i32> %5820, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5824 = bitcast <4 x i32> %5823 to <2 x i64>
  %5825 = load <4 x i32>, <4 x i32>* %5478, align 16
  %5826 = load <4 x i32>, <4 x i32>* %5494, align 16
  %5827 = shufflevector <4 x i32> %5825, <4 x i32> %5826, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5828 = bitcast <4 x i32> %5827 to <2 x i64>
  %5829 = shufflevector <4 x i32> %5825, <4 x i32> %5826, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5830 = bitcast <4 x i32> %5829 to <2 x i64>
  %5831 = shufflevector <2 x i64> %5822, <2 x i64> %5828, <2 x i32> <i32 0, i32 2>
  %5832 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %5831, <2 x i64>* %5832, align 16
  %5833 = shufflevector <2 x i64> %5822, <2 x i64> %5828, <2 x i32> <i32 1, i32 3>
  %5834 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %5833, <2 x i64>* %5834, align 16
  %5835 = shufflevector <2 x i64> %5824, <2 x i64> %5830, <2 x i32> <i32 0, i32 2>
  %5836 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %5835, <2 x i64>* %5836, align 16
  %5837 = shufflevector <2 x i64> %5824, <2 x i64> %5830, <2 x i32> <i32 1, i32 3>
  %5838 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %5837, <2 x i64>* %5838, align 16
  %5839 = load <4 x i32>, <4 x i32>* %5450, align 16
  %5840 = load <4 x i32>, <4 x i32>* %5466, align 16
  %5841 = shufflevector <4 x i32> %5839, <4 x i32> %5840, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5842 = bitcast <4 x i32> %5841 to <2 x i64>
  %5843 = shufflevector <4 x i32> %5839, <4 x i32> %5840, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5844 = bitcast <4 x i32> %5843 to <2 x i64>
  %5845 = load <4 x i32>, <4 x i32>* %5482, align 16
  %5846 = load <4 x i32>, <4 x i32>* %5498, align 16
  %5847 = shufflevector <4 x i32> %5845, <4 x i32> %5846, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5848 = bitcast <4 x i32> %5847 to <2 x i64>
  %5849 = shufflevector <4 x i32> %5845, <4 x i32> %5846, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5850 = bitcast <4 x i32> %5849 to <2 x i64>
  %5851 = shufflevector <2 x i64> %5842, <2 x i64> %5848, <2 x i32> <i32 0, i32 2>
  %5852 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %5851, <2 x i64>* %5852, align 16
  %5853 = shufflevector <2 x i64> %5842, <2 x i64> %5848, <2 x i32> <i32 1, i32 3>
  %5854 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %5853, <2 x i64>* %5854, align 16
  %5855 = shufflevector <2 x i64> %5844, <2 x i64> %5850, <2 x i32> <i32 0, i32 2>
  %5856 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %5855, <2 x i64>* %5856, align 16
  %5857 = shufflevector <2 x i64> %5844, <2 x i64> %5850, <2 x i32> <i32 1, i32 3>
  %5858 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %5857, <2 x i64>* %5858, align 16
  %5859 = load <4 x i32>, <4 x i32>* %5526, align 16
  %5860 = load <4 x i32>, <4 x i32>* %5542, align 16
  %5861 = shufflevector <4 x i32> %5859, <4 x i32> %5860, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5862 = bitcast <4 x i32> %5861 to <2 x i64>
  %5863 = shufflevector <4 x i32> %5859, <4 x i32> %5860, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5864 = bitcast <4 x i32> %5863 to <2 x i64>
  %5865 = load <4 x i32>, <4 x i32>* %5558, align 16
  %5866 = load <4 x i32>, <4 x i32>* %5574, align 16
  %5867 = shufflevector <4 x i32> %5865, <4 x i32> %5866, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5868 = bitcast <4 x i32> %5867 to <2 x i64>
  %5869 = shufflevector <4 x i32> %5865, <4 x i32> %5866, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5870 = bitcast <4 x i32> %5869 to <2 x i64>
  %5871 = shufflevector <2 x i64> %5862, <2 x i64> %5868, <2 x i32> <i32 0, i32 2>
  %5872 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %5871, <2 x i64>* %5872, align 16
  %5873 = shufflevector <2 x i64> %5862, <2 x i64> %5868, <2 x i32> <i32 1, i32 3>
  %5874 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %5873, <2 x i64>* %5874, align 16
  %5875 = shufflevector <2 x i64> %5864, <2 x i64> %5870, <2 x i32> <i32 0, i32 2>
  %5876 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %5875, <2 x i64>* %5876, align 16
  %5877 = shufflevector <2 x i64> %5864, <2 x i64> %5870, <2 x i32> <i32 1, i32 3>
  %5878 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %5877, <2 x i64>* %5878, align 16
  %5879 = load <4 x i32>, <4 x i32>* %5530, align 16
  %5880 = load <4 x i32>, <4 x i32>* %5546, align 16
  %5881 = shufflevector <4 x i32> %5879, <4 x i32> %5880, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5882 = bitcast <4 x i32> %5881 to <2 x i64>
  %5883 = shufflevector <4 x i32> %5879, <4 x i32> %5880, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5884 = bitcast <4 x i32> %5883 to <2 x i64>
  %5885 = load <4 x i32>, <4 x i32>* %5562, align 16
  %5886 = load <4 x i32>, <4 x i32>* %5578, align 16
  %5887 = shufflevector <4 x i32> %5885, <4 x i32> %5886, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5888 = bitcast <4 x i32> %5887 to <2 x i64>
  %5889 = shufflevector <4 x i32> %5885, <4 x i32> %5886, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5890 = bitcast <4 x i32> %5889 to <2 x i64>
  %5891 = shufflevector <2 x i64> %5882, <2 x i64> %5888, <2 x i32> <i32 0, i32 2>
  %5892 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %5891, <2 x i64>* %5892, align 16
  %5893 = shufflevector <2 x i64> %5882, <2 x i64> %5888, <2 x i32> <i32 1, i32 3>
  %5894 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %5893, <2 x i64>* %5894, align 16
  %5895 = shufflevector <2 x i64> %5884, <2 x i64> %5890, <2 x i32> <i32 0, i32 2>
  %5896 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %5895, <2 x i64>* %5896, align 16
  %5897 = shufflevector <2 x i64> %5884, <2 x i64> %5890, <2 x i32> <i32 1, i32 3>
  %5898 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %5897, <2 x i64>* %5898, align 16
  %5899 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  %5900 = sext i8 %5899 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %5264, <2 x i64>* nonnull %5267, i32 %5900, i32 4)
  %5901 = load <4 x i32>, <4 x i32>* %5278, align 16
  %5902 = load <4 x i32>, <4 x i32>* %5294, align 16
  %5903 = shufflevector <4 x i32> %5901, <4 x i32> %5902, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5904 = bitcast <4 x i32> %5903 to <2 x i64>
  %5905 = shufflevector <4 x i32> %5901, <4 x i32> %5902, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5906 = bitcast <4 x i32> %5905 to <2 x i64>
  %5907 = load <4 x i32>, <4 x i32>* %5310, align 16
  %5908 = load <4 x i32>, <4 x i32>* %5326, align 16
  %5909 = shufflevector <4 x i32> %5907, <4 x i32> %5908, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5910 = bitcast <4 x i32> %5909 to <2 x i64>
  %5911 = shufflevector <4 x i32> %5907, <4 x i32> %5908, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5912 = bitcast <4 x i32> %5911 to <2 x i64>
  %5913 = shufflevector <2 x i64> %5904, <2 x i64> %5910, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5913, <2 x i64>* %5264, align 16
  %5914 = shufflevector <2 x i64> %5904, <2 x i64> %5910, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5914, <2 x i64>* %5607, align 16
  %5915 = shufflevector <2 x i64> %5906, <2 x i64> %5912, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5915, <2 x i64>* %5609, align 16
  %5916 = shufflevector <2 x i64> %5906, <2 x i64> %5912, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5916, <2 x i64>* %5611, align 16
  %5917 = load <4 x i32>, <4 x i32>* %5282, align 16
  %5918 = load <4 x i32>, <4 x i32>* %5298, align 16
  %5919 = shufflevector <4 x i32> %5917, <4 x i32> %5918, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5920 = bitcast <4 x i32> %5919 to <2 x i64>
  %5921 = shufflevector <4 x i32> %5917, <4 x i32> %5918, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5922 = bitcast <4 x i32> %5921 to <2 x i64>
  %5923 = load <4 x i32>, <4 x i32>* %5314, align 16
  %5924 = load <4 x i32>, <4 x i32>* %5330, align 16
  %5925 = shufflevector <4 x i32> %5923, <4 x i32> %5924, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5926 = bitcast <4 x i32> %5925 to <2 x i64>
  %5927 = shufflevector <4 x i32> %5923, <4 x i32> %5924, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5928 = bitcast <4 x i32> %5927 to <2 x i64>
  %5929 = shufflevector <2 x i64> %5920, <2 x i64> %5926, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5929, <2 x i64>* %5621, align 16
  %5930 = shufflevector <2 x i64> %5920, <2 x i64> %5926, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5930, <2 x i64>* %5623, align 16
  %5931 = shufflevector <2 x i64> %5922, <2 x i64> %5928, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5931, <2 x i64>* %5625, align 16
  %5932 = shufflevector <2 x i64> %5922, <2 x i64> %5928, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5932, <2 x i64>* %5627, align 16
  %5933 = load <4 x i32>, <4 x i32>* %5358, align 16
  %5934 = load <4 x i32>, <4 x i32>* %5374, align 16
  %5935 = shufflevector <4 x i32> %5933, <4 x i32> %5934, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5936 = bitcast <4 x i32> %5935 to <2 x i64>
  %5937 = shufflevector <4 x i32> %5933, <4 x i32> %5934, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5938 = bitcast <4 x i32> %5937 to <2 x i64>
  %5939 = load <4 x i32>, <4 x i32>* %5390, align 16
  %5940 = load <4 x i32>, <4 x i32>* %5406, align 16
  %5941 = shufflevector <4 x i32> %5939, <4 x i32> %5940, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5942 = bitcast <4 x i32> %5941 to <2 x i64>
  %5943 = shufflevector <4 x i32> %5939, <4 x i32> %5940, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5944 = bitcast <4 x i32> %5943 to <2 x i64>
  %5945 = shufflevector <2 x i64> %5936, <2 x i64> %5942, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5945, <2 x i64>* %5640, align 16
  %5946 = shufflevector <2 x i64> %5936, <2 x i64> %5942, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5946, <2 x i64>* %5642, align 16
  %5947 = shufflevector <2 x i64> %5938, <2 x i64> %5944, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5947, <2 x i64>* %5644, align 16
  %5948 = shufflevector <2 x i64> %5938, <2 x i64> %5944, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5948, <2 x i64>* %5646, align 16
  %5949 = load <4 x i32>, <4 x i32>* %5362, align 16
  %5950 = load <4 x i32>, <4 x i32>* %5378, align 16
  %5951 = shufflevector <4 x i32> %5949, <4 x i32> %5950, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5952 = bitcast <4 x i32> %5951 to <2 x i64>
  %5953 = shufflevector <4 x i32> %5949, <4 x i32> %5950, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5954 = bitcast <4 x i32> %5953 to <2 x i64>
  %5955 = load <4 x i32>, <4 x i32>* %5394, align 16
  %5956 = load <4 x i32>, <4 x i32>* %5410, align 16
  %5957 = shufflevector <4 x i32> %5955, <4 x i32> %5956, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5958 = bitcast <4 x i32> %5957 to <2 x i64>
  %5959 = shufflevector <4 x i32> %5955, <4 x i32> %5956, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5960 = bitcast <4 x i32> %5959 to <2 x i64>
  %5961 = shufflevector <2 x i64> %5952, <2 x i64> %5958, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5961, <2 x i64>* %5660, align 16
  %5962 = shufflevector <2 x i64> %5952, <2 x i64> %5958, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5962, <2 x i64>* %5662, align 16
  %5963 = shufflevector <2 x i64> %5954, <2 x i64> %5960, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5963, <2 x i64>* %5664, align 16
  %5964 = shufflevector <2 x i64> %5954, <2 x i64> %5960, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5964, <2 x i64>* %5666, align 16
  %5965 = load <4 x i32>, <4 x i32>* %5286, align 16
  %5966 = load <4 x i32>, <4 x i32>* %5302, align 16
  %5967 = shufflevector <4 x i32> %5965, <4 x i32> %5966, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5968 = bitcast <4 x i32> %5967 to <2 x i64>
  %5969 = shufflevector <4 x i32> %5965, <4 x i32> %5966, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5970 = bitcast <4 x i32> %5969 to <2 x i64>
  %5971 = load <4 x i32>, <4 x i32>* %5318, align 16
  %5972 = load <4 x i32>, <4 x i32>* %5334, align 16
  %5973 = shufflevector <4 x i32> %5971, <4 x i32> %5972, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5974 = bitcast <4 x i32> %5973 to <2 x i64>
  %5975 = shufflevector <4 x i32> %5971, <4 x i32> %5972, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5976 = bitcast <4 x i32> %5975 to <2 x i64>
  %5977 = shufflevector <2 x i64> %5968, <2 x i64> %5974, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5977, <2 x i64>* %5676, align 16
  %5978 = shufflevector <2 x i64> %5968, <2 x i64> %5974, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5978, <2 x i64>* %5678, align 16
  %5979 = shufflevector <2 x i64> %5970, <2 x i64> %5976, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5979, <2 x i64>* %5680, align 16
  %5980 = shufflevector <2 x i64> %5970, <2 x i64> %5976, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5980, <2 x i64>* %5682, align 16
  %5981 = load <4 x i32>, <4 x i32>* %5290, align 16
  %5982 = load <4 x i32>, <4 x i32>* %5306, align 16
  %5983 = shufflevector <4 x i32> %5981, <4 x i32> %5982, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5984 = bitcast <4 x i32> %5983 to <2 x i64>
  %5985 = shufflevector <4 x i32> %5981, <4 x i32> %5982, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5986 = bitcast <4 x i32> %5985 to <2 x i64>
  %5987 = load <4 x i32>, <4 x i32>* %5322, align 16
  %5988 = load <4 x i32>, <4 x i32>* %5338, align 16
  %5989 = shufflevector <4 x i32> %5987, <4 x i32> %5988, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5990 = bitcast <4 x i32> %5989 to <2 x i64>
  %5991 = shufflevector <4 x i32> %5987, <4 x i32> %5988, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5992 = bitcast <4 x i32> %5991 to <2 x i64>
  %5993 = shufflevector <2 x i64> %5984, <2 x i64> %5990, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5993, <2 x i64>* %5692, align 16
  %5994 = shufflevector <2 x i64> %5984, <2 x i64> %5990, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5994, <2 x i64>* %5694, align 16
  %5995 = shufflevector <2 x i64> %5986, <2 x i64> %5992, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %5995, <2 x i64>* %5696, align 16
  %5996 = shufflevector <2 x i64> %5986, <2 x i64> %5992, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %5996, <2 x i64>* %5698, align 16
  %5997 = load <4 x i32>, <4 x i32>* %5366, align 16
  %5998 = load <4 x i32>, <4 x i32>* %5382, align 16
  %5999 = shufflevector <4 x i32> %5997, <4 x i32> %5998, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6000 = bitcast <4 x i32> %5999 to <2 x i64>
  %6001 = shufflevector <4 x i32> %5997, <4 x i32> %5998, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6002 = bitcast <4 x i32> %6001 to <2 x i64>
  %6003 = load <4 x i32>, <4 x i32>* %5398, align 16
  %6004 = load <4 x i32>, <4 x i32>* %5414, align 16
  %6005 = shufflevector <4 x i32> %6003, <4 x i32> %6004, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6006 = bitcast <4 x i32> %6005 to <2 x i64>
  %6007 = shufflevector <4 x i32> %6003, <4 x i32> %6004, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6008 = bitcast <4 x i32> %6007 to <2 x i64>
  %6009 = shufflevector <2 x i64> %6000, <2 x i64> %6006, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6009, <2 x i64>* %5712, align 16
  %6010 = shufflevector <2 x i64> %6000, <2 x i64> %6006, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6010, <2 x i64>* %5714, align 16
  %6011 = shufflevector <2 x i64> %6002, <2 x i64> %6008, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6011, <2 x i64>* %5716, align 16
  %6012 = shufflevector <2 x i64> %6002, <2 x i64> %6008, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6012, <2 x i64>* %5718, align 16
  %6013 = load <4 x i32>, <4 x i32>* %5370, align 16
  %6014 = load <4 x i32>, <4 x i32>* %5386, align 16
  %6015 = shufflevector <4 x i32> %6013, <4 x i32> %6014, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6016 = bitcast <4 x i32> %6015 to <2 x i64>
  %6017 = shufflevector <4 x i32> %6013, <4 x i32> %6014, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6018 = bitcast <4 x i32> %6017 to <2 x i64>
  %6019 = load <4 x i32>, <4 x i32>* %5402, align 16
  %6020 = load <4 x i32>, <4 x i32>* %5418, align 16
  %6021 = shufflevector <4 x i32> %6019, <4 x i32> %6020, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6022 = bitcast <4 x i32> %6021 to <2 x i64>
  %6023 = shufflevector <4 x i32> %6019, <4 x i32> %6020, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6024 = bitcast <4 x i32> %6023 to <2 x i64>
  %6025 = shufflevector <2 x i64> %6016, <2 x i64> %6022, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6025, <2 x i64>* %5732, align 16
  %6026 = shufflevector <2 x i64> %6016, <2 x i64> %6022, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6026, <2 x i64>* %5734, align 16
  %6027 = shufflevector <2 x i64> %6018, <2 x i64> %6024, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6027, <2 x i64>* %5736, align 16
  %6028 = shufflevector <2 x i64> %6018, <2 x i64> %6024, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6028, <2 x i64>* %5738, align 16
  %6029 = load <4 x i32>, <4 x i32>* %5438, align 16
  %6030 = load <4 x i32>, <4 x i32>* %5454, align 16
  %6031 = shufflevector <4 x i32> %6029, <4 x i32> %6030, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6032 = bitcast <4 x i32> %6031 to <2 x i64>
  %6033 = shufflevector <4 x i32> %6029, <4 x i32> %6030, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6034 = bitcast <4 x i32> %6033 to <2 x i64>
  %6035 = load <4 x i32>, <4 x i32>* %5470, align 16
  %6036 = load <4 x i32>, <4 x i32>* %5486, align 16
  %6037 = shufflevector <4 x i32> %6035, <4 x i32> %6036, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6038 = bitcast <4 x i32> %6037 to <2 x i64>
  %6039 = shufflevector <4 x i32> %6035, <4 x i32> %6036, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6040 = bitcast <4 x i32> %6039 to <2 x i64>
  %6041 = shufflevector <2 x i64> %6032, <2 x i64> %6038, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6041, <2 x i64>* %5752, align 16
  %6042 = shufflevector <2 x i64> %6032, <2 x i64> %6038, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6042, <2 x i64>* %5754, align 16
  %6043 = shufflevector <2 x i64> %6034, <2 x i64> %6040, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6043, <2 x i64>* %5756, align 16
  %6044 = shufflevector <2 x i64> %6034, <2 x i64> %6040, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6044, <2 x i64>* %5758, align 16
  %6045 = load <4 x i32>, <4 x i32>* %5442, align 16
  %6046 = load <4 x i32>, <4 x i32>* %5458, align 16
  %6047 = shufflevector <4 x i32> %6045, <4 x i32> %6046, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6048 = bitcast <4 x i32> %6047 to <2 x i64>
  %6049 = shufflevector <4 x i32> %6045, <4 x i32> %6046, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6050 = bitcast <4 x i32> %6049 to <2 x i64>
  %6051 = load <4 x i32>, <4 x i32>* %5474, align 16
  %6052 = load <4 x i32>, <4 x i32>* %5490, align 16
  %6053 = shufflevector <4 x i32> %6051, <4 x i32> %6052, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6054 = bitcast <4 x i32> %6053 to <2 x i64>
  %6055 = shufflevector <4 x i32> %6051, <4 x i32> %6052, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6056 = bitcast <4 x i32> %6055 to <2 x i64>
  %6057 = shufflevector <2 x i64> %6048, <2 x i64> %6054, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6057, <2 x i64>* %5772, align 16
  %6058 = shufflevector <2 x i64> %6048, <2 x i64> %6054, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6058, <2 x i64>* %5774, align 16
  %6059 = shufflevector <2 x i64> %6050, <2 x i64> %6056, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6059, <2 x i64>* %5776, align 16
  %6060 = shufflevector <2 x i64> %6050, <2 x i64> %6056, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6060, <2 x i64>* %5778, align 16
  %6061 = load <4 x i32>, <4 x i32>* %5518, align 16
  %6062 = load <4 x i32>, <4 x i32>* %5534, align 16
  %6063 = shufflevector <4 x i32> %6061, <4 x i32> %6062, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6064 = bitcast <4 x i32> %6063 to <2 x i64>
  %6065 = shufflevector <4 x i32> %6061, <4 x i32> %6062, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6066 = bitcast <4 x i32> %6065 to <2 x i64>
  %6067 = load <4 x i32>, <4 x i32>* %5550, align 16
  %6068 = load <4 x i32>, <4 x i32>* %5566, align 16
  %6069 = shufflevector <4 x i32> %6067, <4 x i32> %6068, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6070 = bitcast <4 x i32> %6069 to <2 x i64>
  %6071 = shufflevector <4 x i32> %6067, <4 x i32> %6068, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6072 = bitcast <4 x i32> %6071 to <2 x i64>
  %6073 = shufflevector <2 x i64> %6064, <2 x i64> %6070, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6073, <2 x i64>* %5792, align 16
  %6074 = shufflevector <2 x i64> %6064, <2 x i64> %6070, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6074, <2 x i64>* %5794, align 16
  %6075 = shufflevector <2 x i64> %6066, <2 x i64> %6072, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6075, <2 x i64>* %5796, align 16
  %6076 = shufflevector <2 x i64> %6066, <2 x i64> %6072, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6076, <2 x i64>* %5798, align 16
  %6077 = load <4 x i32>, <4 x i32>* %5522, align 16
  %6078 = load <4 x i32>, <4 x i32>* %5538, align 16
  %6079 = shufflevector <4 x i32> %6077, <4 x i32> %6078, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6080 = bitcast <4 x i32> %6079 to <2 x i64>
  %6081 = shufflevector <4 x i32> %6077, <4 x i32> %6078, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6082 = bitcast <4 x i32> %6081 to <2 x i64>
  %6083 = load <4 x i32>, <4 x i32>* %5554, align 16
  %6084 = load <4 x i32>, <4 x i32>* %5570, align 16
  %6085 = shufflevector <4 x i32> %6083, <4 x i32> %6084, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6086 = bitcast <4 x i32> %6085 to <2 x i64>
  %6087 = shufflevector <4 x i32> %6083, <4 x i32> %6084, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6088 = bitcast <4 x i32> %6087 to <2 x i64>
  %6089 = shufflevector <2 x i64> %6080, <2 x i64> %6086, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6089, <2 x i64>* %5812, align 16
  %6090 = shufflevector <2 x i64> %6080, <2 x i64> %6086, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6090, <2 x i64>* %5814, align 16
  %6091 = shufflevector <2 x i64> %6082, <2 x i64> %6088, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6091, <2 x i64>* %5816, align 16
  %6092 = shufflevector <2 x i64> %6082, <2 x i64> %6088, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6092, <2 x i64>* %5818, align 16
  %6093 = load <4 x i32>, <4 x i32>* %5446, align 16
  %6094 = load <4 x i32>, <4 x i32>* %5462, align 16
  %6095 = shufflevector <4 x i32> %6093, <4 x i32> %6094, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6096 = bitcast <4 x i32> %6095 to <2 x i64>
  %6097 = shufflevector <4 x i32> %6093, <4 x i32> %6094, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6098 = bitcast <4 x i32> %6097 to <2 x i64>
  %6099 = load <4 x i32>, <4 x i32>* %5478, align 16
  %6100 = load <4 x i32>, <4 x i32>* %5494, align 16
  %6101 = shufflevector <4 x i32> %6099, <4 x i32> %6100, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6102 = bitcast <4 x i32> %6101 to <2 x i64>
  %6103 = shufflevector <4 x i32> %6099, <4 x i32> %6100, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6104 = bitcast <4 x i32> %6103 to <2 x i64>
  %6105 = shufflevector <2 x i64> %6096, <2 x i64> %6102, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6105, <2 x i64>* %5832, align 16
  %6106 = shufflevector <2 x i64> %6096, <2 x i64> %6102, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6106, <2 x i64>* %5834, align 16
  %6107 = shufflevector <2 x i64> %6098, <2 x i64> %6104, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6107, <2 x i64>* %5836, align 16
  %6108 = shufflevector <2 x i64> %6098, <2 x i64> %6104, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6108, <2 x i64>* %5838, align 16
  %6109 = load <4 x i32>, <4 x i32>* %5450, align 16
  %6110 = load <4 x i32>, <4 x i32>* %5466, align 16
  %6111 = shufflevector <4 x i32> %6109, <4 x i32> %6110, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6112 = bitcast <4 x i32> %6111 to <2 x i64>
  %6113 = shufflevector <4 x i32> %6109, <4 x i32> %6110, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6114 = bitcast <4 x i32> %6113 to <2 x i64>
  %6115 = load <4 x i32>, <4 x i32>* %5482, align 16
  %6116 = load <4 x i32>, <4 x i32>* %5498, align 16
  %6117 = shufflevector <4 x i32> %6115, <4 x i32> %6116, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6118 = bitcast <4 x i32> %6117 to <2 x i64>
  %6119 = shufflevector <4 x i32> %6115, <4 x i32> %6116, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6120 = bitcast <4 x i32> %6119 to <2 x i64>
  %6121 = shufflevector <2 x i64> %6112, <2 x i64> %6118, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6121, <2 x i64>* %5852, align 16
  %6122 = shufflevector <2 x i64> %6112, <2 x i64> %6118, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6122, <2 x i64>* %5854, align 16
  %6123 = shufflevector <2 x i64> %6114, <2 x i64> %6120, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6123, <2 x i64>* %5856, align 16
  %6124 = shufflevector <2 x i64> %6114, <2 x i64> %6120, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6124, <2 x i64>* %5858, align 16
  %6125 = load <4 x i32>, <4 x i32>* %5526, align 16
  %6126 = load <4 x i32>, <4 x i32>* %5542, align 16
  %6127 = shufflevector <4 x i32> %6125, <4 x i32> %6126, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6128 = bitcast <4 x i32> %6127 to <2 x i64>
  %6129 = shufflevector <4 x i32> %6125, <4 x i32> %6126, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6130 = bitcast <4 x i32> %6129 to <2 x i64>
  %6131 = load <4 x i32>, <4 x i32>* %5558, align 16
  %6132 = load <4 x i32>, <4 x i32>* %5574, align 16
  %6133 = shufflevector <4 x i32> %6131, <4 x i32> %6132, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6134 = bitcast <4 x i32> %6133 to <2 x i64>
  %6135 = shufflevector <4 x i32> %6131, <4 x i32> %6132, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6136 = bitcast <4 x i32> %6135 to <2 x i64>
  %6137 = shufflevector <2 x i64> %6128, <2 x i64> %6134, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6137, <2 x i64>* %5872, align 16
  %6138 = shufflevector <2 x i64> %6128, <2 x i64> %6134, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6138, <2 x i64>* %5874, align 16
  %6139 = shufflevector <2 x i64> %6130, <2 x i64> %6136, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6139, <2 x i64>* %5876, align 16
  %6140 = shufflevector <2 x i64> %6130, <2 x i64> %6136, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6140, <2 x i64>* %5878, align 16
  %6141 = load <4 x i32>, <4 x i32>* %5530, align 16
  %6142 = load <4 x i32>, <4 x i32>* %5546, align 16
  %6143 = shufflevector <4 x i32> %6141, <4 x i32> %6142, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6144 = bitcast <4 x i32> %6143 to <2 x i64>
  %6145 = shufflevector <4 x i32> %6141, <4 x i32> %6142, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6146 = bitcast <4 x i32> %6145 to <2 x i64>
  %6147 = load <4 x i32>, <4 x i32>* %5562, align 16
  %6148 = load <4 x i32>, <4 x i32>* %5578, align 16
  %6149 = shufflevector <4 x i32> %6147, <4 x i32> %6148, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6150 = bitcast <4 x i32> %6149 to <2 x i64>
  %6151 = shufflevector <4 x i32> %6147, <4 x i32> %6148, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6152 = bitcast <4 x i32> %6151 to <2 x i64>
  %6153 = shufflevector <2 x i64> %6144, <2 x i64> %6150, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6153, <2 x i64>* %5892, align 16
  %6154 = shufflevector <2 x i64> %6144, <2 x i64> %6150, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6154, <2 x i64>* %5894, align 16
  %6155 = shufflevector <2 x i64> %6146, <2 x i64> %6152, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6155, <2 x i64>* %5896, align 16
  %6156 = shufflevector <2 x i64> %6146, <2 x i64> %6152, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6156, <2 x i64>* %5898, align 16
  %6157 = bitcast i32* %1 to <2 x i64>*
  %6158 = load <2 x i64>, <2 x i64>* %5264, align 16
  store <2 x i64> %6158, <2 x i64>* %6157, align 16
  %6159 = getelementptr inbounds i32, i32* %1, i64 4
  %6160 = bitcast i32* %6159 to <2 x i64>*
  %6161 = load <2 x i64>, <2 x i64>* %5640, align 16
  store <2 x i64> %6161, <2 x i64>* %6160, align 16
  %6162 = getelementptr inbounds i32, i32* %1, i64 8
  %6163 = bitcast i32* %6162 to <2 x i64>*
  %6164 = load <2 x i64>, <2 x i64>* %5752, align 16
  store <2 x i64> %6164, <2 x i64>* %6163, align 16
  %6165 = getelementptr inbounds i32, i32* %1, i64 12
  %6166 = bitcast i32* %6165 to <2 x i64>*
  %6167 = load <2 x i64>, <2 x i64>* %5792, align 16
  store <2 x i64> %6167, <2 x i64>* %6166, align 16
  %6168 = getelementptr inbounds i32, i32* %1, i64 16
  %6169 = bitcast i32* %6168 to <2 x i64>*
  %6170 = load <2 x i64>, <2 x i64>* %5607, align 16
  store <2 x i64> %6170, <2 x i64>* %6169, align 16
  %6171 = getelementptr inbounds i32, i32* %1, i64 20
  %6172 = bitcast i32* %6171 to <2 x i64>*
  %6173 = load <2 x i64>, <2 x i64>* %5642, align 16
  store <2 x i64> %6173, <2 x i64>* %6172, align 16
  %6174 = getelementptr inbounds i32, i32* %1, i64 24
  %6175 = bitcast i32* %6174 to <2 x i64>*
  %6176 = load <2 x i64>, <2 x i64>* %5754, align 16
  store <2 x i64> %6176, <2 x i64>* %6175, align 16
  %6177 = getelementptr inbounds i32, i32* %1, i64 28
  %6178 = bitcast i32* %6177 to <2 x i64>*
  %6179 = load <2 x i64>, <2 x i64>* %5794, align 16
  store <2 x i64> %6179, <2 x i64>* %6178, align 16
  %6180 = getelementptr inbounds i32, i32* %1, i64 32
  %6181 = bitcast i32* %6180 to <2 x i64>*
  %6182 = load <2 x i64>, <2 x i64>* %5609, align 16
  store <2 x i64> %6182, <2 x i64>* %6181, align 16
  %6183 = getelementptr inbounds i32, i32* %1, i64 36
  %6184 = bitcast i32* %6183 to <2 x i64>*
  %6185 = load <2 x i64>, <2 x i64>* %5644, align 16
  store <2 x i64> %6185, <2 x i64>* %6184, align 16
  %6186 = getelementptr inbounds i32, i32* %1, i64 40
  %6187 = bitcast i32* %6186 to <2 x i64>*
  %6188 = load <2 x i64>, <2 x i64>* %5756, align 16
  store <2 x i64> %6188, <2 x i64>* %6187, align 16
  %6189 = getelementptr inbounds i32, i32* %1, i64 44
  %6190 = bitcast i32* %6189 to <2 x i64>*
  %6191 = load <2 x i64>, <2 x i64>* %5796, align 16
  store <2 x i64> %6191, <2 x i64>* %6190, align 16
  %6192 = getelementptr inbounds i32, i32* %1, i64 48
  %6193 = bitcast i32* %6192 to <2 x i64>*
  %6194 = load <2 x i64>, <2 x i64>* %5611, align 16
  store <2 x i64> %6194, <2 x i64>* %6193, align 16
  %6195 = getelementptr inbounds i32, i32* %1, i64 52
  %6196 = bitcast i32* %6195 to <2 x i64>*
  %6197 = load <2 x i64>, <2 x i64>* %5646, align 16
  store <2 x i64> %6197, <2 x i64>* %6196, align 16
  %6198 = getelementptr inbounds i32, i32* %1, i64 56
  %6199 = bitcast i32* %6198 to <2 x i64>*
  %6200 = load <2 x i64>, <2 x i64>* %5758, align 16
  store <2 x i64> %6200, <2 x i64>* %6199, align 16
  %6201 = getelementptr inbounds i32, i32* %1, i64 60
  %6202 = bitcast i32* %6201 to <2 x i64>*
  %6203 = load <2 x i64>, <2 x i64>* %5798, align 16
  store <2 x i64> %6203, <2 x i64>* %6202, align 16
  %6204 = getelementptr inbounds i32, i32* %1, i64 64
  %6205 = bitcast i32* %6204 to <2 x i64>*
  %6206 = load <2 x i64>, <2 x i64>* %5621, align 16
  store <2 x i64> %6206, <2 x i64>* %6205, align 16
  %6207 = getelementptr inbounds i32, i32* %1, i64 68
  %6208 = bitcast i32* %6207 to <2 x i64>*
  %6209 = load <2 x i64>, <2 x i64>* %5660, align 16
  store <2 x i64> %6209, <2 x i64>* %6208, align 16
  %6210 = getelementptr inbounds i32, i32* %1, i64 72
  %6211 = bitcast i32* %6210 to <2 x i64>*
  %6212 = load <2 x i64>, <2 x i64>* %5772, align 16
  store <2 x i64> %6212, <2 x i64>* %6211, align 16
  %6213 = getelementptr inbounds i32, i32* %1, i64 76
  %6214 = bitcast i32* %6213 to <2 x i64>*
  %6215 = load <2 x i64>, <2 x i64>* %5812, align 16
  store <2 x i64> %6215, <2 x i64>* %6214, align 16
  %6216 = getelementptr inbounds i32, i32* %1, i64 80
  %6217 = bitcast i32* %6216 to <2 x i64>*
  %6218 = load <2 x i64>, <2 x i64>* %5623, align 16
  store <2 x i64> %6218, <2 x i64>* %6217, align 16
  %6219 = getelementptr inbounds i32, i32* %1, i64 84
  %6220 = bitcast i32* %6219 to <2 x i64>*
  %6221 = load <2 x i64>, <2 x i64>* %5662, align 16
  store <2 x i64> %6221, <2 x i64>* %6220, align 16
  %6222 = getelementptr inbounds i32, i32* %1, i64 88
  %6223 = bitcast i32* %6222 to <2 x i64>*
  %6224 = load <2 x i64>, <2 x i64>* %5774, align 16
  store <2 x i64> %6224, <2 x i64>* %6223, align 16
  %6225 = getelementptr inbounds i32, i32* %1, i64 92
  %6226 = bitcast i32* %6225 to <2 x i64>*
  %6227 = load <2 x i64>, <2 x i64>* %5814, align 16
  store <2 x i64> %6227, <2 x i64>* %6226, align 16
  %6228 = getelementptr inbounds i32, i32* %1, i64 96
  %6229 = bitcast i32* %6228 to <2 x i64>*
  %6230 = load <2 x i64>, <2 x i64>* %5625, align 16
  store <2 x i64> %6230, <2 x i64>* %6229, align 16
  %6231 = getelementptr inbounds i32, i32* %1, i64 100
  %6232 = bitcast i32* %6231 to <2 x i64>*
  %6233 = load <2 x i64>, <2 x i64>* %5664, align 16
  store <2 x i64> %6233, <2 x i64>* %6232, align 16
  %6234 = getelementptr inbounds i32, i32* %1, i64 104
  %6235 = bitcast i32* %6234 to <2 x i64>*
  %6236 = load <2 x i64>, <2 x i64>* %5776, align 16
  store <2 x i64> %6236, <2 x i64>* %6235, align 16
  %6237 = getelementptr inbounds i32, i32* %1, i64 108
  %6238 = bitcast i32* %6237 to <2 x i64>*
  %6239 = load <2 x i64>, <2 x i64>* %5816, align 16
  store <2 x i64> %6239, <2 x i64>* %6238, align 16
  %6240 = getelementptr inbounds i32, i32* %1, i64 112
  %6241 = bitcast i32* %6240 to <2 x i64>*
  %6242 = load <2 x i64>, <2 x i64>* %5627, align 16
  store <2 x i64> %6242, <2 x i64>* %6241, align 16
  %6243 = getelementptr inbounds i32, i32* %1, i64 116
  %6244 = bitcast i32* %6243 to <2 x i64>*
  %6245 = load <2 x i64>, <2 x i64>* %5666, align 16
  store <2 x i64> %6245, <2 x i64>* %6244, align 16
  %6246 = getelementptr inbounds i32, i32* %1, i64 120
  %6247 = bitcast i32* %6246 to <2 x i64>*
  %6248 = load <2 x i64>, <2 x i64>* %5778, align 16
  store <2 x i64> %6248, <2 x i64>* %6247, align 16
  %6249 = getelementptr inbounds i32, i32* %1, i64 124
  %6250 = bitcast i32* %6249 to <2 x i64>*
  %6251 = load <2 x i64>, <2 x i64>* %5818, align 16
  store <2 x i64> %6251, <2 x i64>* %6250, align 16
  %6252 = getelementptr inbounds i32, i32* %1, i64 128
  %6253 = bitcast i32* %6252 to <2 x i64>*
  %6254 = load <2 x i64>, <2 x i64>* %5676, align 16
  store <2 x i64> %6254, <2 x i64>* %6253, align 16
  %6255 = getelementptr inbounds i32, i32* %1, i64 132
  %6256 = bitcast i32* %6255 to <2 x i64>*
  %6257 = load <2 x i64>, <2 x i64>* %5712, align 16
  store <2 x i64> %6257, <2 x i64>* %6256, align 16
  %6258 = getelementptr inbounds i32, i32* %1, i64 136
  %6259 = bitcast i32* %6258 to <2 x i64>*
  %6260 = load <2 x i64>, <2 x i64>* %5832, align 16
  store <2 x i64> %6260, <2 x i64>* %6259, align 16
  %6261 = getelementptr inbounds i32, i32* %1, i64 140
  %6262 = bitcast i32* %6261 to <2 x i64>*
  %6263 = load <2 x i64>, <2 x i64>* %5872, align 16
  store <2 x i64> %6263, <2 x i64>* %6262, align 16
  %6264 = getelementptr inbounds i32, i32* %1, i64 144
  %6265 = bitcast i32* %6264 to <2 x i64>*
  %6266 = load <2 x i64>, <2 x i64>* %5678, align 16
  store <2 x i64> %6266, <2 x i64>* %6265, align 16
  %6267 = getelementptr inbounds i32, i32* %1, i64 148
  %6268 = bitcast i32* %6267 to <2 x i64>*
  %6269 = load <2 x i64>, <2 x i64>* %5714, align 16
  store <2 x i64> %6269, <2 x i64>* %6268, align 16
  %6270 = getelementptr inbounds i32, i32* %1, i64 152
  %6271 = bitcast i32* %6270 to <2 x i64>*
  %6272 = load <2 x i64>, <2 x i64>* %5834, align 16
  store <2 x i64> %6272, <2 x i64>* %6271, align 16
  %6273 = getelementptr inbounds i32, i32* %1, i64 156
  %6274 = bitcast i32* %6273 to <2 x i64>*
  %6275 = load <2 x i64>, <2 x i64>* %5874, align 16
  store <2 x i64> %6275, <2 x i64>* %6274, align 16
  %6276 = getelementptr inbounds i32, i32* %1, i64 160
  %6277 = bitcast i32* %6276 to <2 x i64>*
  %6278 = load <2 x i64>, <2 x i64>* %5680, align 16
  store <2 x i64> %6278, <2 x i64>* %6277, align 16
  %6279 = getelementptr inbounds i32, i32* %1, i64 164
  %6280 = bitcast i32* %6279 to <2 x i64>*
  %6281 = load <2 x i64>, <2 x i64>* %5716, align 16
  store <2 x i64> %6281, <2 x i64>* %6280, align 16
  %6282 = getelementptr inbounds i32, i32* %1, i64 168
  %6283 = bitcast i32* %6282 to <2 x i64>*
  %6284 = load <2 x i64>, <2 x i64>* %5836, align 16
  store <2 x i64> %6284, <2 x i64>* %6283, align 16
  %6285 = getelementptr inbounds i32, i32* %1, i64 172
  %6286 = bitcast i32* %6285 to <2 x i64>*
  %6287 = load <2 x i64>, <2 x i64>* %5876, align 16
  store <2 x i64> %6287, <2 x i64>* %6286, align 16
  %6288 = getelementptr inbounds i32, i32* %1, i64 176
  %6289 = bitcast i32* %6288 to <2 x i64>*
  %6290 = load <2 x i64>, <2 x i64>* %5682, align 16
  store <2 x i64> %6290, <2 x i64>* %6289, align 16
  %6291 = getelementptr inbounds i32, i32* %1, i64 180
  %6292 = bitcast i32* %6291 to <2 x i64>*
  %6293 = load <2 x i64>, <2 x i64>* %5718, align 16
  store <2 x i64> %6293, <2 x i64>* %6292, align 16
  %6294 = getelementptr inbounds i32, i32* %1, i64 184
  %6295 = bitcast i32* %6294 to <2 x i64>*
  %6296 = load <2 x i64>, <2 x i64>* %5838, align 16
  store <2 x i64> %6296, <2 x i64>* %6295, align 16
  %6297 = getelementptr inbounds i32, i32* %1, i64 188
  %6298 = bitcast i32* %6297 to <2 x i64>*
  %6299 = load <2 x i64>, <2 x i64>* %5878, align 16
  store <2 x i64> %6299, <2 x i64>* %6298, align 16
  %6300 = getelementptr inbounds i32, i32* %1, i64 192
  %6301 = bitcast i32* %6300 to <2 x i64>*
  %6302 = load <2 x i64>, <2 x i64>* %5692, align 16
  store <2 x i64> %6302, <2 x i64>* %6301, align 16
  %6303 = getelementptr inbounds i32, i32* %1, i64 196
  %6304 = bitcast i32* %6303 to <2 x i64>*
  %6305 = load <2 x i64>, <2 x i64>* %5732, align 16
  store <2 x i64> %6305, <2 x i64>* %6304, align 16
  %6306 = getelementptr inbounds i32, i32* %1, i64 200
  %6307 = bitcast i32* %6306 to <2 x i64>*
  %6308 = load <2 x i64>, <2 x i64>* %5852, align 16
  store <2 x i64> %6308, <2 x i64>* %6307, align 16
  %6309 = getelementptr inbounds i32, i32* %1, i64 204
  %6310 = bitcast i32* %6309 to <2 x i64>*
  %6311 = load <2 x i64>, <2 x i64>* %5892, align 16
  store <2 x i64> %6311, <2 x i64>* %6310, align 16
  %6312 = getelementptr inbounds i32, i32* %1, i64 208
  %6313 = bitcast i32* %6312 to <2 x i64>*
  %6314 = load <2 x i64>, <2 x i64>* %5694, align 16
  store <2 x i64> %6314, <2 x i64>* %6313, align 16
  %6315 = getelementptr inbounds i32, i32* %1, i64 212
  %6316 = bitcast i32* %6315 to <2 x i64>*
  %6317 = load <2 x i64>, <2 x i64>* %5734, align 16
  store <2 x i64> %6317, <2 x i64>* %6316, align 16
  %6318 = getelementptr inbounds i32, i32* %1, i64 216
  %6319 = bitcast i32* %6318 to <2 x i64>*
  %6320 = load <2 x i64>, <2 x i64>* %5854, align 16
  store <2 x i64> %6320, <2 x i64>* %6319, align 16
  %6321 = getelementptr inbounds i32, i32* %1, i64 220
  %6322 = bitcast i32* %6321 to <2 x i64>*
  %6323 = load <2 x i64>, <2 x i64>* %5894, align 16
  store <2 x i64> %6323, <2 x i64>* %6322, align 16
  %6324 = getelementptr inbounds i32, i32* %1, i64 224
  %6325 = bitcast i32* %6324 to <2 x i64>*
  %6326 = load <2 x i64>, <2 x i64>* %5696, align 16
  store <2 x i64> %6326, <2 x i64>* %6325, align 16
  %6327 = getelementptr inbounds i32, i32* %1, i64 228
  %6328 = bitcast i32* %6327 to <2 x i64>*
  %6329 = load <2 x i64>, <2 x i64>* %5736, align 16
  store <2 x i64> %6329, <2 x i64>* %6328, align 16
  %6330 = getelementptr inbounds i32, i32* %1, i64 232
  %6331 = bitcast i32* %6330 to <2 x i64>*
  %6332 = load <2 x i64>, <2 x i64>* %5856, align 16
  store <2 x i64> %6332, <2 x i64>* %6331, align 16
  %6333 = getelementptr inbounds i32, i32* %1, i64 236
  %6334 = bitcast i32* %6333 to <2 x i64>*
  %6335 = load <2 x i64>, <2 x i64>* %5896, align 16
  store <2 x i64> %6335, <2 x i64>* %6334, align 16
  %6336 = getelementptr inbounds i32, i32* %1, i64 240
  %6337 = bitcast i32* %6336 to <2 x i64>*
  %6338 = load <2 x i64>, <2 x i64>* %5698, align 16
  store <2 x i64> %6338, <2 x i64>* %6337, align 16
  %6339 = getelementptr inbounds i32, i32* %1, i64 244
  %6340 = bitcast i32* %6339 to <2 x i64>*
  %6341 = load <2 x i64>, <2 x i64>* %5738, align 16
  store <2 x i64> %6341, <2 x i64>* %6340, align 16
  %6342 = getelementptr inbounds i32, i32* %1, i64 248
  %6343 = bitcast i32* %6342 to <2 x i64>*
  %6344 = load <2 x i64>, <2 x i64>* %5858, align 16
  store <2 x i64> %6344, <2 x i64>* %6343, align 16
  %6345 = getelementptr inbounds i32, i32* %1, i64 252
  %6346 = bitcast i32* %6345 to <2 x i64>*
  %6347 = load <2 x i64>, <2 x i64>* %5898, align 16
  store <2 x i64> %6347, <2 x i64>* %6346, align 16
  br label %17357

6348:                                             ; preds = %5
  %6349 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %6350 = load i8, i8* %10, align 1
  %6351 = sext i8 %6350 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %6349, i32 %2, i32 1, i32 1, i32 %6351)
  %6352 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %6353 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  %6354 = sext i8 %6353 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %6349, <2 x i64>* nonnull %6352, i32 %6354, i32 4)
  %6355 = getelementptr inbounds i8, i8* %10, i64 1
  %6356 = load i8, i8* %6355, align 1
  %6357 = sext i8 %6356 to i32
  %6358 = sub nsw i32 0, %6357
  %6359 = xor i32 %6357, -1
  %6360 = shl i32 1, %6359
  %6361 = insertelement <4 x i32> undef, i32 %6360, i32 0
  %6362 = shufflevector <4 x i32> %6361, <4 x i32> undef, <4 x i32> zeroinitializer
  %6363 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %6364 = load <4 x i32>, <4 x i32>* %6363, align 16
  %6365 = add <4 x i32> %6362, %6364
  %6366 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %6367 = bitcast <2 x i64>* %6366 to <4 x i32>*
  %6368 = load <4 x i32>, <4 x i32>* %6367, align 16
  %6369 = add <4 x i32> %6362, %6368
  %6370 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %6371 = bitcast <2 x i64>* %6370 to <4 x i32>*
  %6372 = load <4 x i32>, <4 x i32>* %6371, align 16
  %6373 = add <4 x i32> %6362, %6372
  %6374 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %6375 = bitcast <2 x i64>* %6374 to <4 x i32>*
  %6376 = load <4 x i32>, <4 x i32>* %6375, align 16
  %6377 = add <4 x i32> %6376, %6362
  %6378 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %6379 = bitcast <2 x i64>* %6378 to <4 x i32>*
  %6380 = load <4 x i32>, <4 x i32>* %6379, align 16
  %6381 = add <4 x i32> %6380, %6362
  %6382 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %6383 = bitcast <2 x i64>* %6382 to <4 x i32>*
  %6384 = load <4 x i32>, <4 x i32>* %6383, align 16
  %6385 = add <4 x i32> %6384, %6362
  %6386 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %6387 = bitcast <2 x i64>* %6386 to <4 x i32>*
  %6388 = load <4 x i32>, <4 x i32>* %6387, align 16
  %6389 = add <4 x i32> %6388, %6362
  %6390 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %6391 = bitcast <2 x i64>* %6390 to <4 x i32>*
  %6392 = load <4 x i32>, <4 x i32>* %6391, align 16
  %6393 = add <4 x i32> %6392, %6362
  %6394 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %6395 = bitcast <2 x i64>* %6394 to <4 x i32>*
  %6396 = load <4 x i32>, <4 x i32>* %6395, align 16
  %6397 = add <4 x i32> %6396, %6362
  %6398 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %6399 = bitcast <2 x i64>* %6398 to <4 x i32>*
  %6400 = load <4 x i32>, <4 x i32>* %6399, align 16
  %6401 = add <4 x i32> %6400, %6362
  %6402 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %6403 = bitcast <2 x i64>* %6402 to <4 x i32>*
  %6404 = load <4 x i32>, <4 x i32>* %6403, align 16
  %6405 = add <4 x i32> %6404, %6362
  %6406 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %6407 = bitcast <2 x i64>* %6406 to <4 x i32>*
  %6408 = load <4 x i32>, <4 x i32>* %6407, align 16
  %6409 = add <4 x i32> %6408, %6362
  %6410 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %6411 = bitcast <2 x i64>* %6410 to <4 x i32>*
  %6412 = load <4 x i32>, <4 x i32>* %6411, align 16
  %6413 = add <4 x i32> %6412, %6362
  %6414 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %6415 = bitcast <2 x i64>* %6414 to <4 x i32>*
  %6416 = load <4 x i32>, <4 x i32>* %6415, align 16
  %6417 = add <4 x i32> %6416, %6362
  %6418 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %6419 = bitcast <2 x i64>* %6418 to <4 x i32>*
  %6420 = load <4 x i32>, <4 x i32>* %6419, align 16
  %6421 = add <4 x i32> %6420, %6362
  %6422 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %6423 = bitcast <2 x i64>* %6422 to <4 x i32>*
  %6424 = load <4 x i32>, <4 x i32>* %6423, align 16
  %6425 = add <4 x i32> %6424, %6362
  %6426 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6365, i32 %6358) #8
  store <4 x i32> %6426, <4 x i32>* %6363, align 16
  %6427 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6369, i32 %6358) #8
  store <4 x i32> %6427, <4 x i32>* %6367, align 16
  %6428 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6373, i32 %6358) #8
  store <4 x i32> %6428, <4 x i32>* %6371, align 16
  %6429 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6377, i32 %6358) #8
  store <4 x i32> %6429, <4 x i32>* %6375, align 16
  %6430 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6381, i32 %6358) #8
  store <4 x i32> %6430, <4 x i32>* %6379, align 16
  %6431 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6385, i32 %6358) #8
  store <4 x i32> %6431, <4 x i32>* %6383, align 16
  %6432 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6389, i32 %6358) #8
  store <4 x i32> %6432, <4 x i32>* %6387, align 16
  %6433 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6393, i32 %6358) #8
  store <4 x i32> %6433, <4 x i32>* %6391, align 16
  %6434 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6397, i32 %6358) #8
  store <4 x i32> %6434, <4 x i32>* %6395, align 16
  %6435 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6401, i32 %6358) #8
  store <4 x i32> %6435, <4 x i32>* %6399, align 16
  %6436 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6405, i32 %6358) #8
  store <4 x i32> %6436, <4 x i32>* %6403, align 16
  %6437 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6409, i32 %6358) #8
  store <4 x i32> %6437, <4 x i32>* %6407, align 16
  %6438 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6413, i32 %6358) #8
  store <4 x i32> %6438, <4 x i32>* %6411, align 16
  %6439 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6417, i32 %6358) #8
  store <4 x i32> %6439, <4 x i32>* %6415, align 16
  %6440 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6421, i32 %6358) #8
  store <4 x i32> %6440, <4 x i32>* %6419, align 16
  %6441 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6425, i32 %6358) #8
  store <4 x i32> %6441, <4 x i32>* %6423, align 16
  %6442 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %6443 = bitcast <2 x i64>* %6442 to <4 x i32>*
  %6444 = load <4 x i32>, <4 x i32>* %6443, align 16
  %6445 = add <4 x i32> %6444, %6362
  %6446 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %6447 = bitcast <2 x i64>* %6446 to <4 x i32>*
  %6448 = load <4 x i32>, <4 x i32>* %6447, align 16
  %6449 = add <4 x i32> %6448, %6362
  %6450 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %6451 = bitcast <2 x i64>* %6450 to <4 x i32>*
  %6452 = load <4 x i32>, <4 x i32>* %6451, align 16
  %6453 = add <4 x i32> %6452, %6362
  %6454 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %6455 = bitcast <2 x i64>* %6454 to <4 x i32>*
  %6456 = load <4 x i32>, <4 x i32>* %6455, align 16
  %6457 = add <4 x i32> %6456, %6362
  %6458 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %6459 = bitcast <2 x i64>* %6458 to <4 x i32>*
  %6460 = load <4 x i32>, <4 x i32>* %6459, align 16
  %6461 = add <4 x i32> %6460, %6362
  %6462 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %6463 = bitcast <2 x i64>* %6462 to <4 x i32>*
  %6464 = load <4 x i32>, <4 x i32>* %6463, align 16
  %6465 = add <4 x i32> %6464, %6362
  %6466 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %6467 = bitcast <2 x i64>* %6466 to <4 x i32>*
  %6468 = load <4 x i32>, <4 x i32>* %6467, align 16
  %6469 = add <4 x i32> %6468, %6362
  %6470 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %6471 = bitcast <2 x i64>* %6470 to <4 x i32>*
  %6472 = load <4 x i32>, <4 x i32>* %6471, align 16
  %6473 = add <4 x i32> %6472, %6362
  %6474 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %6475 = bitcast <2 x i64>* %6474 to <4 x i32>*
  %6476 = load <4 x i32>, <4 x i32>* %6475, align 16
  %6477 = add <4 x i32> %6476, %6362
  %6478 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %6479 = bitcast <2 x i64>* %6478 to <4 x i32>*
  %6480 = load <4 x i32>, <4 x i32>* %6479, align 16
  %6481 = add <4 x i32> %6480, %6362
  %6482 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %6483 = bitcast <2 x i64>* %6482 to <4 x i32>*
  %6484 = load <4 x i32>, <4 x i32>* %6483, align 16
  %6485 = add <4 x i32> %6484, %6362
  %6486 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %6487 = bitcast <2 x i64>* %6486 to <4 x i32>*
  %6488 = load <4 x i32>, <4 x i32>* %6487, align 16
  %6489 = add <4 x i32> %6488, %6362
  %6490 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %6491 = bitcast <2 x i64>* %6490 to <4 x i32>*
  %6492 = load <4 x i32>, <4 x i32>* %6491, align 16
  %6493 = add <4 x i32> %6492, %6362
  %6494 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %6495 = bitcast <2 x i64>* %6494 to <4 x i32>*
  %6496 = load <4 x i32>, <4 x i32>* %6495, align 16
  %6497 = add <4 x i32> %6496, %6362
  %6498 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %6499 = bitcast <2 x i64>* %6498 to <4 x i32>*
  %6500 = load <4 x i32>, <4 x i32>* %6499, align 16
  %6501 = add <4 x i32> %6500, %6362
  %6502 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %6503 = bitcast <2 x i64>* %6502 to <4 x i32>*
  %6504 = load <4 x i32>, <4 x i32>* %6503, align 16
  %6505 = add <4 x i32> %6504, %6362
  %6506 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6445, i32 %6358) #8
  store <4 x i32> %6506, <4 x i32>* %6443, align 16
  %6507 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6449, i32 %6358) #8
  store <4 x i32> %6507, <4 x i32>* %6447, align 16
  %6508 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6453, i32 %6358) #8
  store <4 x i32> %6508, <4 x i32>* %6451, align 16
  %6509 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6457, i32 %6358) #8
  store <4 x i32> %6509, <4 x i32>* %6455, align 16
  %6510 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6461, i32 %6358) #8
  store <4 x i32> %6510, <4 x i32>* %6459, align 16
  %6511 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6465, i32 %6358) #8
  store <4 x i32> %6511, <4 x i32>* %6463, align 16
  %6512 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6469, i32 %6358) #8
  store <4 x i32> %6512, <4 x i32>* %6467, align 16
  %6513 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6473, i32 %6358) #8
  store <4 x i32> %6513, <4 x i32>* %6471, align 16
  %6514 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6477, i32 %6358) #8
  store <4 x i32> %6514, <4 x i32>* %6475, align 16
  %6515 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6481, i32 %6358) #8
  store <4 x i32> %6515, <4 x i32>* %6479, align 16
  %6516 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6485, i32 %6358) #8
  store <4 x i32> %6516, <4 x i32>* %6483, align 16
  %6517 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6489, i32 %6358) #8
  store <4 x i32> %6517, <4 x i32>* %6487, align 16
  %6518 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6493, i32 %6358) #8
  store <4 x i32> %6518, <4 x i32>* %6491, align 16
  %6519 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6497, i32 %6358) #8
  store <4 x i32> %6519, <4 x i32>* %6495, align 16
  %6520 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6501, i32 %6358) #8
  store <4 x i32> %6520, <4 x i32>* %6499, align 16
  %6521 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6505, i32 %6358) #8
  store <4 x i32> %6521, <4 x i32>* %6503, align 16
  %6522 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %6523 = bitcast <2 x i64>* %6522 to <4 x i32>*
  %6524 = load <4 x i32>, <4 x i32>* %6523, align 16
  %6525 = add <4 x i32> %6524, %6362
  %6526 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %6527 = bitcast <2 x i64>* %6526 to <4 x i32>*
  %6528 = load <4 x i32>, <4 x i32>* %6527, align 16
  %6529 = add <4 x i32> %6528, %6362
  %6530 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %6531 = bitcast <2 x i64>* %6530 to <4 x i32>*
  %6532 = load <4 x i32>, <4 x i32>* %6531, align 16
  %6533 = add <4 x i32> %6532, %6362
  %6534 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %6535 = bitcast <2 x i64>* %6534 to <4 x i32>*
  %6536 = load <4 x i32>, <4 x i32>* %6535, align 16
  %6537 = add <4 x i32> %6536, %6362
  %6538 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %6539 = bitcast <2 x i64>* %6538 to <4 x i32>*
  %6540 = load <4 x i32>, <4 x i32>* %6539, align 16
  %6541 = add <4 x i32> %6540, %6362
  %6542 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %6543 = bitcast <2 x i64>* %6542 to <4 x i32>*
  %6544 = load <4 x i32>, <4 x i32>* %6543, align 16
  %6545 = add <4 x i32> %6544, %6362
  %6546 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %6547 = bitcast <2 x i64>* %6546 to <4 x i32>*
  %6548 = load <4 x i32>, <4 x i32>* %6547, align 16
  %6549 = add <4 x i32> %6548, %6362
  %6550 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %6551 = bitcast <2 x i64>* %6550 to <4 x i32>*
  %6552 = load <4 x i32>, <4 x i32>* %6551, align 16
  %6553 = add <4 x i32> %6552, %6362
  %6554 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %6555 = bitcast <2 x i64>* %6554 to <4 x i32>*
  %6556 = load <4 x i32>, <4 x i32>* %6555, align 16
  %6557 = add <4 x i32> %6556, %6362
  %6558 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %6559 = bitcast <2 x i64>* %6558 to <4 x i32>*
  %6560 = load <4 x i32>, <4 x i32>* %6559, align 16
  %6561 = add <4 x i32> %6560, %6362
  %6562 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %6563 = bitcast <2 x i64>* %6562 to <4 x i32>*
  %6564 = load <4 x i32>, <4 x i32>* %6563, align 16
  %6565 = add <4 x i32> %6564, %6362
  %6566 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %6567 = bitcast <2 x i64>* %6566 to <4 x i32>*
  %6568 = load <4 x i32>, <4 x i32>* %6567, align 16
  %6569 = add <4 x i32> %6568, %6362
  %6570 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %6571 = bitcast <2 x i64>* %6570 to <4 x i32>*
  %6572 = load <4 x i32>, <4 x i32>* %6571, align 16
  %6573 = add <4 x i32> %6572, %6362
  %6574 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %6575 = bitcast <2 x i64>* %6574 to <4 x i32>*
  %6576 = load <4 x i32>, <4 x i32>* %6575, align 16
  %6577 = add <4 x i32> %6576, %6362
  %6578 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %6579 = bitcast <2 x i64>* %6578 to <4 x i32>*
  %6580 = load <4 x i32>, <4 x i32>* %6579, align 16
  %6581 = add <4 x i32> %6580, %6362
  %6582 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %6583 = bitcast <2 x i64>* %6582 to <4 x i32>*
  %6584 = load <4 x i32>, <4 x i32>* %6583, align 16
  %6585 = add <4 x i32> %6584, %6362
  %6586 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6525, i32 %6358) #8
  store <4 x i32> %6586, <4 x i32>* %6523, align 16
  %6587 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6529, i32 %6358) #8
  store <4 x i32> %6587, <4 x i32>* %6527, align 16
  %6588 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6533, i32 %6358) #8
  store <4 x i32> %6588, <4 x i32>* %6531, align 16
  %6589 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6537, i32 %6358) #8
  store <4 x i32> %6589, <4 x i32>* %6535, align 16
  %6590 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6541, i32 %6358) #8
  store <4 x i32> %6590, <4 x i32>* %6539, align 16
  %6591 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6545, i32 %6358) #8
  store <4 x i32> %6591, <4 x i32>* %6543, align 16
  %6592 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6549, i32 %6358) #8
  store <4 x i32> %6592, <4 x i32>* %6547, align 16
  %6593 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6553, i32 %6358) #8
  store <4 x i32> %6593, <4 x i32>* %6551, align 16
  %6594 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6557, i32 %6358) #8
  store <4 x i32> %6594, <4 x i32>* %6555, align 16
  %6595 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6561, i32 %6358) #8
  store <4 x i32> %6595, <4 x i32>* %6559, align 16
  %6596 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6565, i32 %6358) #8
  store <4 x i32> %6596, <4 x i32>* %6563, align 16
  %6597 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6569, i32 %6358) #8
  store <4 x i32> %6597, <4 x i32>* %6567, align 16
  %6598 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6573, i32 %6358) #8
  store <4 x i32> %6598, <4 x i32>* %6571, align 16
  %6599 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6577, i32 %6358) #8
  store <4 x i32> %6599, <4 x i32>* %6575, align 16
  %6600 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6581, i32 %6358) #8
  store <4 x i32> %6600, <4 x i32>* %6579, align 16
  %6601 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6585, i32 %6358) #8
  store <4 x i32> %6601, <4 x i32>* %6583, align 16
  %6602 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %6603 = bitcast <2 x i64>* %6602 to <4 x i32>*
  %6604 = load <4 x i32>, <4 x i32>* %6603, align 16
  %6605 = add <4 x i32> %6604, %6362
  %6606 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %6607 = bitcast <2 x i64>* %6606 to <4 x i32>*
  %6608 = load <4 x i32>, <4 x i32>* %6607, align 16
  %6609 = add <4 x i32> %6608, %6362
  %6610 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %6611 = bitcast <2 x i64>* %6610 to <4 x i32>*
  %6612 = load <4 x i32>, <4 x i32>* %6611, align 16
  %6613 = add <4 x i32> %6612, %6362
  %6614 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %6615 = bitcast <2 x i64>* %6614 to <4 x i32>*
  %6616 = load <4 x i32>, <4 x i32>* %6615, align 16
  %6617 = add <4 x i32> %6616, %6362
  %6618 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %6619 = bitcast <2 x i64>* %6618 to <4 x i32>*
  %6620 = load <4 x i32>, <4 x i32>* %6619, align 16
  %6621 = add <4 x i32> %6620, %6362
  %6622 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %6623 = bitcast <2 x i64>* %6622 to <4 x i32>*
  %6624 = load <4 x i32>, <4 x i32>* %6623, align 16
  %6625 = add <4 x i32> %6624, %6362
  %6626 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %6627 = bitcast <2 x i64>* %6626 to <4 x i32>*
  %6628 = load <4 x i32>, <4 x i32>* %6627, align 16
  %6629 = add <4 x i32> %6628, %6362
  %6630 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %6631 = bitcast <2 x i64>* %6630 to <4 x i32>*
  %6632 = load <4 x i32>, <4 x i32>* %6631, align 16
  %6633 = add <4 x i32> %6632, %6362
  %6634 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %6635 = bitcast <2 x i64>* %6634 to <4 x i32>*
  %6636 = load <4 x i32>, <4 x i32>* %6635, align 16
  %6637 = add <4 x i32> %6636, %6362
  %6638 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %6639 = bitcast <2 x i64>* %6638 to <4 x i32>*
  %6640 = load <4 x i32>, <4 x i32>* %6639, align 16
  %6641 = add <4 x i32> %6640, %6362
  %6642 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %6643 = bitcast <2 x i64>* %6642 to <4 x i32>*
  %6644 = load <4 x i32>, <4 x i32>* %6643, align 16
  %6645 = add <4 x i32> %6644, %6362
  %6646 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %6647 = bitcast <2 x i64>* %6646 to <4 x i32>*
  %6648 = load <4 x i32>, <4 x i32>* %6647, align 16
  %6649 = add <4 x i32> %6648, %6362
  %6650 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %6651 = bitcast <2 x i64>* %6650 to <4 x i32>*
  %6652 = load <4 x i32>, <4 x i32>* %6651, align 16
  %6653 = add <4 x i32> %6652, %6362
  %6654 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %6655 = bitcast <2 x i64>* %6654 to <4 x i32>*
  %6656 = load <4 x i32>, <4 x i32>* %6655, align 16
  %6657 = add <4 x i32> %6656, %6362
  %6658 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %6659 = bitcast <2 x i64>* %6658 to <4 x i32>*
  %6660 = load <4 x i32>, <4 x i32>* %6659, align 16
  %6661 = add <4 x i32> %6660, %6362
  %6662 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %6663 = bitcast <2 x i64>* %6662 to <4 x i32>*
  %6664 = load <4 x i32>, <4 x i32>* %6663, align 16
  %6665 = add <4 x i32> %6664, %6362
  %6666 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6605, i32 %6358) #8
  store <4 x i32> %6666, <4 x i32>* %6603, align 16
  %6667 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6609, i32 %6358) #8
  store <4 x i32> %6667, <4 x i32>* %6607, align 16
  %6668 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6613, i32 %6358) #8
  store <4 x i32> %6668, <4 x i32>* %6611, align 16
  %6669 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6617, i32 %6358) #8
  store <4 x i32> %6669, <4 x i32>* %6615, align 16
  %6670 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6621, i32 %6358) #8
  store <4 x i32> %6670, <4 x i32>* %6619, align 16
  %6671 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6625, i32 %6358) #8
  store <4 x i32> %6671, <4 x i32>* %6623, align 16
  %6672 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6629, i32 %6358) #8
  store <4 x i32> %6672, <4 x i32>* %6627, align 16
  %6673 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6633, i32 %6358) #8
  store <4 x i32> %6673, <4 x i32>* %6631, align 16
  %6674 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6637, i32 %6358) #8
  store <4 x i32> %6674, <4 x i32>* %6635, align 16
  %6675 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6641, i32 %6358) #8
  store <4 x i32> %6675, <4 x i32>* %6639, align 16
  %6676 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6645, i32 %6358) #8
  store <4 x i32> %6676, <4 x i32>* %6643, align 16
  %6677 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6649, i32 %6358) #8
  store <4 x i32> %6677, <4 x i32>* %6647, align 16
  %6678 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6653, i32 %6358) #8
  store <4 x i32> %6678, <4 x i32>* %6651, align 16
  %6679 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6657, i32 %6358) #8
  store <4 x i32> %6679, <4 x i32>* %6655, align 16
  %6680 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6661, i32 %6358) #8
  store <4 x i32> %6680, <4 x i32>* %6659, align 16
  %6681 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %6665, i32 %6358) #8
  store <4 x i32> %6681, <4 x i32>* %6663, align 16
  %6682 = shufflevector <4 x i32> %6426, <4 x i32> %6430, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6683 = bitcast <4 x i32> %6682 to <2 x i64>
  %6684 = shufflevector <4 x i32> %6426, <4 x i32> %6430, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6685 = bitcast <4 x i32> %6684 to <2 x i64>
  %6686 = shufflevector <4 x i32> %6434, <4 x i32> %6438, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6687 = bitcast <4 x i32> %6686 to <2 x i64>
  %6688 = shufflevector <4 x i32> %6434, <4 x i32> %6438, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6689 = bitcast <4 x i32> %6688 to <2 x i64>
  %6690 = shufflevector <2 x i64> %6683, <2 x i64> %6687, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6690, <2 x i64>* %6349, align 16
  %6691 = shufflevector <2 x i64> %6683, <2 x i64> %6687, <2 x i32> <i32 1, i32 3>
  %6692 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %6691, <2 x i64>* %6692, align 16
  %6693 = shufflevector <2 x i64> %6685, <2 x i64> %6689, <2 x i32> <i32 0, i32 2>
  %6694 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %6693, <2 x i64>* %6694, align 16
  %6695 = shufflevector <2 x i64> %6685, <2 x i64> %6689, <2 x i32> <i32 1, i32 3>
  %6696 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %6695, <2 x i64>* %6696, align 16
  %6697 = shufflevector <4 x i32> %6427, <4 x i32> %6431, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6698 = bitcast <4 x i32> %6697 to <2 x i64>
  %6699 = shufflevector <4 x i32> %6427, <4 x i32> %6431, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6700 = bitcast <4 x i32> %6699 to <2 x i64>
  %6701 = shufflevector <4 x i32> %6435, <4 x i32> %6439, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6702 = bitcast <4 x i32> %6701 to <2 x i64>
  %6703 = shufflevector <4 x i32> %6435, <4 x i32> %6439, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6704 = bitcast <4 x i32> %6703 to <2 x i64>
  %6705 = shufflevector <2 x i64> %6698, <2 x i64> %6702, <2 x i32> <i32 0, i32 2>
  %6706 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %6705, <2 x i64>* %6706, align 16
  %6707 = shufflevector <2 x i64> %6698, <2 x i64> %6702, <2 x i32> <i32 1, i32 3>
  %6708 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %6707, <2 x i64>* %6708, align 16
  %6709 = shufflevector <2 x i64> %6700, <2 x i64> %6704, <2 x i32> <i32 0, i32 2>
  %6710 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %6709, <2 x i64>* %6710, align 16
  %6711 = shufflevector <2 x i64> %6700, <2 x i64> %6704, <2 x i32> <i32 1, i32 3>
  %6712 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %6711, <2 x i64>* %6712, align 16
  %6713 = load <4 x i32>, <4 x i32>* %6459, align 16
  %6714 = shufflevector <4 x i32> %6506, <4 x i32> %6713, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6715 = bitcast <4 x i32> %6714 to <2 x i64>
  %6716 = shufflevector <4 x i32> %6506, <4 x i32> %6713, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6717 = bitcast <4 x i32> %6716 to <2 x i64>
  %6718 = load <4 x i32>, <4 x i32>* %6475, align 16
  %6719 = load <4 x i32>, <4 x i32>* %6491, align 16
  %6720 = shufflevector <4 x i32> %6718, <4 x i32> %6719, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6721 = bitcast <4 x i32> %6720 to <2 x i64>
  %6722 = shufflevector <4 x i32> %6718, <4 x i32> %6719, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6723 = bitcast <4 x i32> %6722 to <2 x i64>
  %6724 = shufflevector <2 x i64> %6715, <2 x i64> %6721, <2 x i32> <i32 0, i32 2>
  %6725 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %6724, <2 x i64>* %6725, align 16
  %6726 = shufflevector <2 x i64> %6715, <2 x i64> %6721, <2 x i32> <i32 1, i32 3>
  %6727 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %6726, <2 x i64>* %6727, align 16
  %6728 = shufflevector <2 x i64> %6717, <2 x i64> %6723, <2 x i32> <i32 0, i32 2>
  %6729 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %6728, <2 x i64>* %6729, align 16
  %6730 = shufflevector <2 x i64> %6717, <2 x i64> %6723, <2 x i32> <i32 1, i32 3>
  %6731 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %6730, <2 x i64>* %6731, align 16
  %6732 = load <4 x i32>, <4 x i32>* %6447, align 16
  %6733 = load <4 x i32>, <4 x i32>* %6463, align 16
  %6734 = shufflevector <4 x i32> %6732, <4 x i32> %6733, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6735 = bitcast <4 x i32> %6734 to <2 x i64>
  %6736 = shufflevector <4 x i32> %6732, <4 x i32> %6733, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6737 = bitcast <4 x i32> %6736 to <2 x i64>
  %6738 = load <4 x i32>, <4 x i32>* %6479, align 16
  %6739 = load <4 x i32>, <4 x i32>* %6495, align 16
  %6740 = shufflevector <4 x i32> %6738, <4 x i32> %6739, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6741 = bitcast <4 x i32> %6740 to <2 x i64>
  %6742 = shufflevector <4 x i32> %6738, <4 x i32> %6739, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6743 = bitcast <4 x i32> %6742 to <2 x i64>
  %6744 = shufflevector <2 x i64> %6735, <2 x i64> %6741, <2 x i32> <i32 0, i32 2>
  %6745 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %6744, <2 x i64>* %6745, align 16
  %6746 = shufflevector <2 x i64> %6735, <2 x i64> %6741, <2 x i32> <i32 1, i32 3>
  %6747 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %6746, <2 x i64>* %6747, align 16
  %6748 = shufflevector <2 x i64> %6737, <2 x i64> %6743, <2 x i32> <i32 0, i32 2>
  %6749 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %6748, <2 x i64>* %6749, align 16
  %6750 = shufflevector <2 x i64> %6737, <2 x i64> %6743, <2 x i32> <i32 1, i32 3>
  %6751 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %6750, <2 x i64>* %6751, align 16
  %6752 = shufflevector <4 x i32> %6428, <4 x i32> %6432, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6753 = bitcast <4 x i32> %6752 to <2 x i64>
  %6754 = shufflevector <4 x i32> %6428, <4 x i32> %6432, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6755 = bitcast <4 x i32> %6754 to <2 x i64>
  %6756 = shufflevector <4 x i32> %6436, <4 x i32> %6440, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6757 = bitcast <4 x i32> %6756 to <2 x i64>
  %6758 = shufflevector <4 x i32> %6436, <4 x i32> %6440, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6759 = bitcast <4 x i32> %6758 to <2 x i64>
  %6760 = shufflevector <2 x i64> %6753, <2 x i64> %6757, <2 x i32> <i32 0, i32 2>
  %6761 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %6760, <2 x i64>* %6761, align 16
  %6762 = shufflevector <2 x i64> %6753, <2 x i64> %6757, <2 x i32> <i32 1, i32 3>
  %6763 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %6762, <2 x i64>* %6763, align 16
  %6764 = shufflevector <2 x i64> %6755, <2 x i64> %6759, <2 x i32> <i32 0, i32 2>
  %6765 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %6764, <2 x i64>* %6765, align 16
  %6766 = shufflevector <2 x i64> %6755, <2 x i64> %6759, <2 x i32> <i32 1, i32 3>
  %6767 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %6766, <2 x i64>* %6767, align 16
  %6768 = shufflevector <4 x i32> %6429, <4 x i32> %6433, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6769 = bitcast <4 x i32> %6768 to <2 x i64>
  %6770 = shufflevector <4 x i32> %6429, <4 x i32> %6433, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6771 = bitcast <4 x i32> %6770 to <2 x i64>
  %6772 = shufflevector <4 x i32> %6437, <4 x i32> %6441, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6773 = bitcast <4 x i32> %6772 to <2 x i64>
  %6774 = shufflevector <4 x i32> %6437, <4 x i32> %6441, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6775 = bitcast <4 x i32> %6774 to <2 x i64>
  %6776 = shufflevector <2 x i64> %6769, <2 x i64> %6773, <2 x i32> <i32 0, i32 2>
  %6777 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %6776, <2 x i64>* %6777, align 16
  %6778 = shufflevector <2 x i64> %6769, <2 x i64> %6773, <2 x i32> <i32 1, i32 3>
  %6779 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %6778, <2 x i64>* %6779, align 16
  %6780 = shufflevector <2 x i64> %6771, <2 x i64> %6775, <2 x i32> <i32 0, i32 2>
  %6781 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %6780, <2 x i64>* %6781, align 16
  %6782 = shufflevector <2 x i64> %6771, <2 x i64> %6775, <2 x i32> <i32 1, i32 3>
  %6783 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %6782, <2 x i64>* %6783, align 16
  %6784 = load <4 x i32>, <4 x i32>* %6451, align 16
  %6785 = load <4 x i32>, <4 x i32>* %6467, align 16
  %6786 = shufflevector <4 x i32> %6784, <4 x i32> %6785, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6787 = bitcast <4 x i32> %6786 to <2 x i64>
  %6788 = shufflevector <4 x i32> %6784, <4 x i32> %6785, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6789 = bitcast <4 x i32> %6788 to <2 x i64>
  %6790 = load <4 x i32>, <4 x i32>* %6483, align 16
  %6791 = load <4 x i32>, <4 x i32>* %6499, align 16
  %6792 = shufflevector <4 x i32> %6790, <4 x i32> %6791, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6793 = bitcast <4 x i32> %6792 to <2 x i64>
  %6794 = shufflevector <4 x i32> %6790, <4 x i32> %6791, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6795 = bitcast <4 x i32> %6794 to <2 x i64>
  %6796 = shufflevector <2 x i64> %6787, <2 x i64> %6793, <2 x i32> <i32 0, i32 2>
  %6797 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %6796, <2 x i64>* %6797, align 16
  %6798 = shufflevector <2 x i64> %6787, <2 x i64> %6793, <2 x i32> <i32 1, i32 3>
  %6799 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %6798, <2 x i64>* %6799, align 16
  %6800 = shufflevector <2 x i64> %6789, <2 x i64> %6795, <2 x i32> <i32 0, i32 2>
  %6801 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %6800, <2 x i64>* %6801, align 16
  %6802 = shufflevector <2 x i64> %6789, <2 x i64> %6795, <2 x i32> <i32 1, i32 3>
  %6803 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %6802, <2 x i64>* %6803, align 16
  %6804 = load <4 x i32>, <4 x i32>* %6455, align 16
  %6805 = load <4 x i32>, <4 x i32>* %6471, align 16
  %6806 = shufflevector <4 x i32> %6804, <4 x i32> %6805, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6807 = bitcast <4 x i32> %6806 to <2 x i64>
  %6808 = shufflevector <4 x i32> %6804, <4 x i32> %6805, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6809 = bitcast <4 x i32> %6808 to <2 x i64>
  %6810 = load <4 x i32>, <4 x i32>* %6487, align 16
  %6811 = load <4 x i32>, <4 x i32>* %6503, align 16
  %6812 = shufflevector <4 x i32> %6810, <4 x i32> %6811, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6813 = bitcast <4 x i32> %6812 to <2 x i64>
  %6814 = shufflevector <4 x i32> %6810, <4 x i32> %6811, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6815 = bitcast <4 x i32> %6814 to <2 x i64>
  %6816 = shufflevector <2 x i64> %6807, <2 x i64> %6813, <2 x i32> <i32 0, i32 2>
  %6817 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %6816, <2 x i64>* %6817, align 16
  %6818 = shufflevector <2 x i64> %6807, <2 x i64> %6813, <2 x i32> <i32 1, i32 3>
  %6819 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %6818, <2 x i64>* %6819, align 16
  %6820 = shufflevector <2 x i64> %6809, <2 x i64> %6815, <2 x i32> <i32 0, i32 2>
  %6821 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %6820, <2 x i64>* %6821, align 16
  %6822 = shufflevector <2 x i64> %6809, <2 x i64> %6815, <2 x i32> <i32 1, i32 3>
  %6823 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %6822, <2 x i64>* %6823, align 16
  %6824 = load <4 x i32>, <4 x i32>* %6523, align 16
  %6825 = load <4 x i32>, <4 x i32>* %6539, align 16
  %6826 = shufflevector <4 x i32> %6824, <4 x i32> %6825, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6827 = bitcast <4 x i32> %6826 to <2 x i64>
  %6828 = shufflevector <4 x i32> %6824, <4 x i32> %6825, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6829 = bitcast <4 x i32> %6828 to <2 x i64>
  %6830 = load <4 x i32>, <4 x i32>* %6555, align 16
  %6831 = load <4 x i32>, <4 x i32>* %6571, align 16
  %6832 = shufflevector <4 x i32> %6830, <4 x i32> %6831, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6833 = bitcast <4 x i32> %6832 to <2 x i64>
  %6834 = shufflevector <4 x i32> %6830, <4 x i32> %6831, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6835 = bitcast <4 x i32> %6834 to <2 x i64>
  %6836 = shufflevector <2 x i64> %6827, <2 x i64> %6833, <2 x i32> <i32 0, i32 2>
  %6837 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %6836, <2 x i64>* %6837, align 16
  %6838 = shufflevector <2 x i64> %6827, <2 x i64> %6833, <2 x i32> <i32 1, i32 3>
  %6839 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %6838, <2 x i64>* %6839, align 16
  %6840 = shufflevector <2 x i64> %6829, <2 x i64> %6835, <2 x i32> <i32 0, i32 2>
  %6841 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %6840, <2 x i64>* %6841, align 16
  %6842 = shufflevector <2 x i64> %6829, <2 x i64> %6835, <2 x i32> <i32 1, i32 3>
  %6843 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %6842, <2 x i64>* %6843, align 16
  %6844 = load <4 x i32>, <4 x i32>* %6527, align 16
  %6845 = load <4 x i32>, <4 x i32>* %6543, align 16
  %6846 = shufflevector <4 x i32> %6844, <4 x i32> %6845, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6847 = bitcast <4 x i32> %6846 to <2 x i64>
  %6848 = shufflevector <4 x i32> %6844, <4 x i32> %6845, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6849 = bitcast <4 x i32> %6848 to <2 x i64>
  %6850 = load <4 x i32>, <4 x i32>* %6559, align 16
  %6851 = load <4 x i32>, <4 x i32>* %6575, align 16
  %6852 = shufflevector <4 x i32> %6850, <4 x i32> %6851, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6853 = bitcast <4 x i32> %6852 to <2 x i64>
  %6854 = shufflevector <4 x i32> %6850, <4 x i32> %6851, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6855 = bitcast <4 x i32> %6854 to <2 x i64>
  %6856 = shufflevector <2 x i64> %6847, <2 x i64> %6853, <2 x i32> <i32 0, i32 2>
  %6857 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %6856, <2 x i64>* %6857, align 16
  %6858 = shufflevector <2 x i64> %6847, <2 x i64> %6853, <2 x i32> <i32 1, i32 3>
  %6859 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %6858, <2 x i64>* %6859, align 16
  %6860 = shufflevector <2 x i64> %6849, <2 x i64> %6855, <2 x i32> <i32 0, i32 2>
  %6861 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %6860, <2 x i64>* %6861, align 16
  %6862 = shufflevector <2 x i64> %6849, <2 x i64> %6855, <2 x i32> <i32 1, i32 3>
  %6863 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %6862, <2 x i64>* %6863, align 16
  %6864 = load <4 x i32>, <4 x i32>* %6603, align 16
  %6865 = load <4 x i32>, <4 x i32>* %6619, align 16
  %6866 = shufflevector <4 x i32> %6864, <4 x i32> %6865, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6867 = bitcast <4 x i32> %6866 to <2 x i64>
  %6868 = shufflevector <4 x i32> %6864, <4 x i32> %6865, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6869 = bitcast <4 x i32> %6868 to <2 x i64>
  %6870 = load <4 x i32>, <4 x i32>* %6635, align 16
  %6871 = load <4 x i32>, <4 x i32>* %6651, align 16
  %6872 = shufflevector <4 x i32> %6870, <4 x i32> %6871, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6873 = bitcast <4 x i32> %6872 to <2 x i64>
  %6874 = shufflevector <4 x i32> %6870, <4 x i32> %6871, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6875 = bitcast <4 x i32> %6874 to <2 x i64>
  %6876 = shufflevector <2 x i64> %6867, <2 x i64> %6873, <2 x i32> <i32 0, i32 2>
  %6877 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %6876, <2 x i64>* %6877, align 16
  %6878 = shufflevector <2 x i64> %6867, <2 x i64> %6873, <2 x i32> <i32 1, i32 3>
  %6879 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %6878, <2 x i64>* %6879, align 16
  %6880 = shufflevector <2 x i64> %6869, <2 x i64> %6875, <2 x i32> <i32 0, i32 2>
  %6881 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %6880, <2 x i64>* %6881, align 16
  %6882 = shufflevector <2 x i64> %6869, <2 x i64> %6875, <2 x i32> <i32 1, i32 3>
  %6883 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %6882, <2 x i64>* %6883, align 16
  %6884 = load <4 x i32>, <4 x i32>* %6607, align 16
  %6885 = load <4 x i32>, <4 x i32>* %6623, align 16
  %6886 = shufflevector <4 x i32> %6884, <4 x i32> %6885, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6887 = bitcast <4 x i32> %6886 to <2 x i64>
  %6888 = shufflevector <4 x i32> %6884, <4 x i32> %6885, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6889 = bitcast <4 x i32> %6888 to <2 x i64>
  %6890 = load <4 x i32>, <4 x i32>* %6639, align 16
  %6891 = load <4 x i32>, <4 x i32>* %6655, align 16
  %6892 = shufflevector <4 x i32> %6890, <4 x i32> %6891, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6893 = bitcast <4 x i32> %6892 to <2 x i64>
  %6894 = shufflevector <4 x i32> %6890, <4 x i32> %6891, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6895 = bitcast <4 x i32> %6894 to <2 x i64>
  %6896 = shufflevector <2 x i64> %6887, <2 x i64> %6893, <2 x i32> <i32 0, i32 2>
  %6897 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %6896, <2 x i64>* %6897, align 16
  %6898 = shufflevector <2 x i64> %6887, <2 x i64> %6893, <2 x i32> <i32 1, i32 3>
  %6899 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %6898, <2 x i64>* %6899, align 16
  %6900 = shufflevector <2 x i64> %6889, <2 x i64> %6895, <2 x i32> <i32 0, i32 2>
  %6901 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %6900, <2 x i64>* %6901, align 16
  %6902 = shufflevector <2 x i64> %6889, <2 x i64> %6895, <2 x i32> <i32 1, i32 3>
  %6903 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %6902, <2 x i64>* %6903, align 16
  %6904 = load <4 x i32>, <4 x i32>* %6531, align 16
  %6905 = load <4 x i32>, <4 x i32>* %6547, align 16
  %6906 = shufflevector <4 x i32> %6904, <4 x i32> %6905, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6907 = bitcast <4 x i32> %6906 to <2 x i64>
  %6908 = shufflevector <4 x i32> %6904, <4 x i32> %6905, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6909 = bitcast <4 x i32> %6908 to <2 x i64>
  %6910 = load <4 x i32>, <4 x i32>* %6563, align 16
  %6911 = load <4 x i32>, <4 x i32>* %6579, align 16
  %6912 = shufflevector <4 x i32> %6910, <4 x i32> %6911, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6913 = bitcast <4 x i32> %6912 to <2 x i64>
  %6914 = shufflevector <4 x i32> %6910, <4 x i32> %6911, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6915 = bitcast <4 x i32> %6914 to <2 x i64>
  %6916 = shufflevector <2 x i64> %6907, <2 x i64> %6913, <2 x i32> <i32 0, i32 2>
  %6917 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %6916, <2 x i64>* %6917, align 16
  %6918 = shufflevector <2 x i64> %6907, <2 x i64> %6913, <2 x i32> <i32 1, i32 3>
  %6919 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %6918, <2 x i64>* %6919, align 16
  %6920 = shufflevector <2 x i64> %6909, <2 x i64> %6915, <2 x i32> <i32 0, i32 2>
  %6921 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %6920, <2 x i64>* %6921, align 16
  %6922 = shufflevector <2 x i64> %6909, <2 x i64> %6915, <2 x i32> <i32 1, i32 3>
  %6923 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %6922, <2 x i64>* %6923, align 16
  %6924 = load <4 x i32>, <4 x i32>* %6535, align 16
  %6925 = load <4 x i32>, <4 x i32>* %6551, align 16
  %6926 = shufflevector <4 x i32> %6924, <4 x i32> %6925, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6927 = bitcast <4 x i32> %6926 to <2 x i64>
  %6928 = shufflevector <4 x i32> %6924, <4 x i32> %6925, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6929 = bitcast <4 x i32> %6928 to <2 x i64>
  %6930 = load <4 x i32>, <4 x i32>* %6567, align 16
  %6931 = load <4 x i32>, <4 x i32>* %6583, align 16
  %6932 = shufflevector <4 x i32> %6930, <4 x i32> %6931, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6933 = bitcast <4 x i32> %6932 to <2 x i64>
  %6934 = shufflevector <4 x i32> %6930, <4 x i32> %6931, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6935 = bitcast <4 x i32> %6934 to <2 x i64>
  %6936 = shufflevector <2 x i64> %6927, <2 x i64> %6933, <2 x i32> <i32 0, i32 2>
  %6937 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %6936, <2 x i64>* %6937, align 16
  %6938 = shufflevector <2 x i64> %6927, <2 x i64> %6933, <2 x i32> <i32 1, i32 3>
  %6939 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %6938, <2 x i64>* %6939, align 16
  %6940 = shufflevector <2 x i64> %6929, <2 x i64> %6935, <2 x i32> <i32 0, i32 2>
  %6941 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %6940, <2 x i64>* %6941, align 16
  %6942 = shufflevector <2 x i64> %6929, <2 x i64> %6935, <2 x i32> <i32 1, i32 3>
  %6943 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %6942, <2 x i64>* %6943, align 16
  %6944 = load <4 x i32>, <4 x i32>* %6611, align 16
  %6945 = load <4 x i32>, <4 x i32>* %6627, align 16
  %6946 = shufflevector <4 x i32> %6944, <4 x i32> %6945, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6947 = bitcast <4 x i32> %6946 to <2 x i64>
  %6948 = shufflevector <4 x i32> %6944, <4 x i32> %6945, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6949 = bitcast <4 x i32> %6948 to <2 x i64>
  %6950 = load <4 x i32>, <4 x i32>* %6643, align 16
  %6951 = load <4 x i32>, <4 x i32>* %6659, align 16
  %6952 = shufflevector <4 x i32> %6950, <4 x i32> %6951, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6953 = bitcast <4 x i32> %6952 to <2 x i64>
  %6954 = shufflevector <4 x i32> %6950, <4 x i32> %6951, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6955 = bitcast <4 x i32> %6954 to <2 x i64>
  %6956 = shufflevector <2 x i64> %6947, <2 x i64> %6953, <2 x i32> <i32 0, i32 2>
  %6957 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %6956, <2 x i64>* %6957, align 16
  %6958 = shufflevector <2 x i64> %6947, <2 x i64> %6953, <2 x i32> <i32 1, i32 3>
  %6959 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %6958, <2 x i64>* %6959, align 16
  %6960 = shufflevector <2 x i64> %6949, <2 x i64> %6955, <2 x i32> <i32 0, i32 2>
  %6961 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %6960, <2 x i64>* %6961, align 16
  %6962 = shufflevector <2 x i64> %6949, <2 x i64> %6955, <2 x i32> <i32 1, i32 3>
  %6963 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %6962, <2 x i64>* %6963, align 16
  %6964 = load <4 x i32>, <4 x i32>* %6615, align 16
  %6965 = load <4 x i32>, <4 x i32>* %6631, align 16
  %6966 = shufflevector <4 x i32> %6964, <4 x i32> %6965, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6967 = bitcast <4 x i32> %6966 to <2 x i64>
  %6968 = shufflevector <4 x i32> %6964, <4 x i32> %6965, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6969 = bitcast <4 x i32> %6968 to <2 x i64>
  %6970 = load <4 x i32>, <4 x i32>* %6647, align 16
  %6971 = load <4 x i32>, <4 x i32>* %6663, align 16
  %6972 = shufflevector <4 x i32> %6970, <4 x i32> %6971, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6973 = bitcast <4 x i32> %6972 to <2 x i64>
  %6974 = shufflevector <4 x i32> %6970, <4 x i32> %6971, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6975 = bitcast <4 x i32> %6974 to <2 x i64>
  %6976 = shufflevector <2 x i64> %6967, <2 x i64> %6973, <2 x i32> <i32 0, i32 2>
  %6977 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %6976, <2 x i64>* %6977, align 16
  %6978 = shufflevector <2 x i64> %6967, <2 x i64> %6973, <2 x i32> <i32 1, i32 3>
  %6979 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %6978, <2 x i64>* %6979, align 16
  %6980 = shufflevector <2 x i64> %6969, <2 x i64> %6975, <2 x i32> <i32 0, i32 2>
  %6981 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %6980, <2 x i64>* %6981, align 16
  %6982 = shufflevector <2 x i64> %6969, <2 x i64> %6975, <2 x i32> <i32 1, i32 3>
  %6983 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %6982, <2 x i64>* %6983, align 16
  %6984 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  %6985 = sext i8 %6984 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %6349, <2 x i64>* nonnull %6352, i32 %6985, i32 4)
  %6986 = load <4 x i32>, <4 x i32>* %6363, align 16
  %6987 = load <4 x i32>, <4 x i32>* %6379, align 16
  %6988 = shufflevector <4 x i32> %6986, <4 x i32> %6987, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6989 = bitcast <4 x i32> %6988 to <2 x i64>
  %6990 = shufflevector <4 x i32> %6986, <4 x i32> %6987, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6991 = bitcast <4 x i32> %6990 to <2 x i64>
  %6992 = load <4 x i32>, <4 x i32>* %6395, align 16
  %6993 = load <4 x i32>, <4 x i32>* %6411, align 16
  %6994 = shufflevector <4 x i32> %6992, <4 x i32> %6993, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6995 = bitcast <4 x i32> %6994 to <2 x i64>
  %6996 = shufflevector <4 x i32> %6992, <4 x i32> %6993, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6997 = bitcast <4 x i32> %6996 to <2 x i64>
  %6998 = shufflevector <2 x i64> %6989, <2 x i64> %6995, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %6998, <2 x i64>* %6349, align 16
  %6999 = shufflevector <2 x i64> %6989, <2 x i64> %6995, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %6999, <2 x i64>* %6692, align 16
  %7000 = shufflevector <2 x i64> %6991, <2 x i64> %6997, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7000, <2 x i64>* %6694, align 16
  %7001 = shufflevector <2 x i64> %6991, <2 x i64> %6997, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7001, <2 x i64>* %6696, align 16
  %7002 = load <4 x i32>, <4 x i32>* %6367, align 16
  %7003 = load <4 x i32>, <4 x i32>* %6383, align 16
  %7004 = shufflevector <4 x i32> %7002, <4 x i32> %7003, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7005 = bitcast <4 x i32> %7004 to <2 x i64>
  %7006 = shufflevector <4 x i32> %7002, <4 x i32> %7003, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7007 = bitcast <4 x i32> %7006 to <2 x i64>
  %7008 = load <4 x i32>, <4 x i32>* %6399, align 16
  %7009 = load <4 x i32>, <4 x i32>* %6415, align 16
  %7010 = shufflevector <4 x i32> %7008, <4 x i32> %7009, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7011 = bitcast <4 x i32> %7010 to <2 x i64>
  %7012 = shufflevector <4 x i32> %7008, <4 x i32> %7009, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7013 = bitcast <4 x i32> %7012 to <2 x i64>
  %7014 = shufflevector <2 x i64> %7005, <2 x i64> %7011, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7014, <2 x i64>* %6706, align 16
  %7015 = shufflevector <2 x i64> %7005, <2 x i64> %7011, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7015, <2 x i64>* %6708, align 16
  %7016 = shufflevector <2 x i64> %7007, <2 x i64> %7013, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7016, <2 x i64>* %6710, align 16
  %7017 = shufflevector <2 x i64> %7007, <2 x i64> %7013, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7017, <2 x i64>* %6712, align 16
  %7018 = load <4 x i32>, <4 x i32>* %6443, align 16
  %7019 = load <4 x i32>, <4 x i32>* %6459, align 16
  %7020 = shufflevector <4 x i32> %7018, <4 x i32> %7019, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7021 = bitcast <4 x i32> %7020 to <2 x i64>
  %7022 = shufflevector <4 x i32> %7018, <4 x i32> %7019, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7023 = bitcast <4 x i32> %7022 to <2 x i64>
  %7024 = load <4 x i32>, <4 x i32>* %6475, align 16
  %7025 = load <4 x i32>, <4 x i32>* %6491, align 16
  %7026 = shufflevector <4 x i32> %7024, <4 x i32> %7025, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7027 = bitcast <4 x i32> %7026 to <2 x i64>
  %7028 = shufflevector <4 x i32> %7024, <4 x i32> %7025, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7029 = bitcast <4 x i32> %7028 to <2 x i64>
  %7030 = shufflevector <2 x i64> %7021, <2 x i64> %7027, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7030, <2 x i64>* %6725, align 16
  %7031 = shufflevector <2 x i64> %7021, <2 x i64> %7027, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7031, <2 x i64>* %6727, align 16
  %7032 = shufflevector <2 x i64> %7023, <2 x i64> %7029, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7032, <2 x i64>* %6729, align 16
  %7033 = shufflevector <2 x i64> %7023, <2 x i64> %7029, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7033, <2 x i64>* %6731, align 16
  %7034 = load <4 x i32>, <4 x i32>* %6447, align 16
  %7035 = load <4 x i32>, <4 x i32>* %6463, align 16
  %7036 = shufflevector <4 x i32> %7034, <4 x i32> %7035, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7037 = bitcast <4 x i32> %7036 to <2 x i64>
  %7038 = shufflevector <4 x i32> %7034, <4 x i32> %7035, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7039 = bitcast <4 x i32> %7038 to <2 x i64>
  %7040 = load <4 x i32>, <4 x i32>* %6479, align 16
  %7041 = load <4 x i32>, <4 x i32>* %6495, align 16
  %7042 = shufflevector <4 x i32> %7040, <4 x i32> %7041, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7043 = bitcast <4 x i32> %7042 to <2 x i64>
  %7044 = shufflevector <4 x i32> %7040, <4 x i32> %7041, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7045 = bitcast <4 x i32> %7044 to <2 x i64>
  %7046 = shufflevector <2 x i64> %7037, <2 x i64> %7043, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7046, <2 x i64>* %6745, align 16
  %7047 = shufflevector <2 x i64> %7037, <2 x i64> %7043, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7047, <2 x i64>* %6747, align 16
  %7048 = shufflevector <2 x i64> %7039, <2 x i64> %7045, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7048, <2 x i64>* %6749, align 16
  %7049 = shufflevector <2 x i64> %7039, <2 x i64> %7045, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7049, <2 x i64>* %6751, align 16
  %7050 = load <4 x i32>, <4 x i32>* %6371, align 16
  %7051 = load <4 x i32>, <4 x i32>* %6387, align 16
  %7052 = shufflevector <4 x i32> %7050, <4 x i32> %7051, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7053 = bitcast <4 x i32> %7052 to <2 x i64>
  %7054 = shufflevector <4 x i32> %7050, <4 x i32> %7051, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7055 = bitcast <4 x i32> %7054 to <2 x i64>
  %7056 = load <4 x i32>, <4 x i32>* %6403, align 16
  %7057 = load <4 x i32>, <4 x i32>* %6419, align 16
  %7058 = shufflevector <4 x i32> %7056, <4 x i32> %7057, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7059 = bitcast <4 x i32> %7058 to <2 x i64>
  %7060 = shufflevector <4 x i32> %7056, <4 x i32> %7057, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7061 = bitcast <4 x i32> %7060 to <2 x i64>
  %7062 = shufflevector <2 x i64> %7053, <2 x i64> %7059, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7062, <2 x i64>* %6761, align 16
  %7063 = shufflevector <2 x i64> %7053, <2 x i64> %7059, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7063, <2 x i64>* %6763, align 16
  %7064 = shufflevector <2 x i64> %7055, <2 x i64> %7061, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7064, <2 x i64>* %6765, align 16
  %7065 = shufflevector <2 x i64> %7055, <2 x i64> %7061, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7065, <2 x i64>* %6767, align 16
  %7066 = load <4 x i32>, <4 x i32>* %6375, align 16
  %7067 = load <4 x i32>, <4 x i32>* %6391, align 16
  %7068 = shufflevector <4 x i32> %7066, <4 x i32> %7067, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7069 = bitcast <4 x i32> %7068 to <2 x i64>
  %7070 = shufflevector <4 x i32> %7066, <4 x i32> %7067, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7071 = bitcast <4 x i32> %7070 to <2 x i64>
  %7072 = load <4 x i32>, <4 x i32>* %6407, align 16
  %7073 = load <4 x i32>, <4 x i32>* %6423, align 16
  %7074 = shufflevector <4 x i32> %7072, <4 x i32> %7073, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7075 = bitcast <4 x i32> %7074 to <2 x i64>
  %7076 = shufflevector <4 x i32> %7072, <4 x i32> %7073, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7077 = bitcast <4 x i32> %7076 to <2 x i64>
  %7078 = shufflevector <2 x i64> %7069, <2 x i64> %7075, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7078, <2 x i64>* %6777, align 16
  %7079 = shufflevector <2 x i64> %7069, <2 x i64> %7075, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7079, <2 x i64>* %6779, align 16
  %7080 = shufflevector <2 x i64> %7071, <2 x i64> %7077, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7080, <2 x i64>* %6781, align 16
  %7081 = shufflevector <2 x i64> %7071, <2 x i64> %7077, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7081, <2 x i64>* %6783, align 16
  %7082 = load <4 x i32>, <4 x i32>* %6451, align 16
  %7083 = load <4 x i32>, <4 x i32>* %6467, align 16
  %7084 = shufflevector <4 x i32> %7082, <4 x i32> %7083, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7085 = bitcast <4 x i32> %7084 to <2 x i64>
  %7086 = shufflevector <4 x i32> %7082, <4 x i32> %7083, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7087 = bitcast <4 x i32> %7086 to <2 x i64>
  %7088 = load <4 x i32>, <4 x i32>* %6483, align 16
  %7089 = load <4 x i32>, <4 x i32>* %6499, align 16
  %7090 = shufflevector <4 x i32> %7088, <4 x i32> %7089, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7091 = bitcast <4 x i32> %7090 to <2 x i64>
  %7092 = shufflevector <4 x i32> %7088, <4 x i32> %7089, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7093 = bitcast <4 x i32> %7092 to <2 x i64>
  %7094 = shufflevector <2 x i64> %7085, <2 x i64> %7091, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7094, <2 x i64>* %6797, align 16
  %7095 = shufflevector <2 x i64> %7085, <2 x i64> %7091, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7095, <2 x i64>* %6799, align 16
  %7096 = shufflevector <2 x i64> %7087, <2 x i64> %7093, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7096, <2 x i64>* %6801, align 16
  %7097 = shufflevector <2 x i64> %7087, <2 x i64> %7093, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7097, <2 x i64>* %6803, align 16
  %7098 = load <4 x i32>, <4 x i32>* %6455, align 16
  %7099 = load <4 x i32>, <4 x i32>* %6471, align 16
  %7100 = shufflevector <4 x i32> %7098, <4 x i32> %7099, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7101 = bitcast <4 x i32> %7100 to <2 x i64>
  %7102 = shufflevector <4 x i32> %7098, <4 x i32> %7099, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7103 = bitcast <4 x i32> %7102 to <2 x i64>
  %7104 = load <4 x i32>, <4 x i32>* %6487, align 16
  %7105 = load <4 x i32>, <4 x i32>* %6503, align 16
  %7106 = shufflevector <4 x i32> %7104, <4 x i32> %7105, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7107 = bitcast <4 x i32> %7106 to <2 x i64>
  %7108 = shufflevector <4 x i32> %7104, <4 x i32> %7105, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7109 = bitcast <4 x i32> %7108 to <2 x i64>
  %7110 = shufflevector <2 x i64> %7101, <2 x i64> %7107, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7110, <2 x i64>* %6817, align 16
  %7111 = shufflevector <2 x i64> %7101, <2 x i64> %7107, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7111, <2 x i64>* %6819, align 16
  %7112 = shufflevector <2 x i64> %7103, <2 x i64> %7109, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7112, <2 x i64>* %6821, align 16
  %7113 = shufflevector <2 x i64> %7103, <2 x i64> %7109, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7113, <2 x i64>* %6823, align 16
  %7114 = load <4 x i32>, <4 x i32>* %6523, align 16
  %7115 = load <4 x i32>, <4 x i32>* %6539, align 16
  %7116 = shufflevector <4 x i32> %7114, <4 x i32> %7115, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7117 = bitcast <4 x i32> %7116 to <2 x i64>
  %7118 = shufflevector <4 x i32> %7114, <4 x i32> %7115, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7119 = bitcast <4 x i32> %7118 to <2 x i64>
  %7120 = load <4 x i32>, <4 x i32>* %6555, align 16
  %7121 = load <4 x i32>, <4 x i32>* %6571, align 16
  %7122 = shufflevector <4 x i32> %7120, <4 x i32> %7121, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7123 = bitcast <4 x i32> %7122 to <2 x i64>
  %7124 = shufflevector <4 x i32> %7120, <4 x i32> %7121, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7125 = bitcast <4 x i32> %7124 to <2 x i64>
  %7126 = shufflevector <2 x i64> %7117, <2 x i64> %7123, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7126, <2 x i64>* %6837, align 16
  %7127 = shufflevector <2 x i64> %7117, <2 x i64> %7123, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7127, <2 x i64>* %6839, align 16
  %7128 = shufflevector <2 x i64> %7119, <2 x i64> %7125, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7128, <2 x i64>* %6841, align 16
  %7129 = shufflevector <2 x i64> %7119, <2 x i64> %7125, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7129, <2 x i64>* %6843, align 16
  %7130 = load <4 x i32>, <4 x i32>* %6527, align 16
  %7131 = load <4 x i32>, <4 x i32>* %6543, align 16
  %7132 = shufflevector <4 x i32> %7130, <4 x i32> %7131, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7133 = bitcast <4 x i32> %7132 to <2 x i64>
  %7134 = shufflevector <4 x i32> %7130, <4 x i32> %7131, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7135 = bitcast <4 x i32> %7134 to <2 x i64>
  %7136 = load <4 x i32>, <4 x i32>* %6559, align 16
  %7137 = load <4 x i32>, <4 x i32>* %6575, align 16
  %7138 = shufflevector <4 x i32> %7136, <4 x i32> %7137, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7139 = bitcast <4 x i32> %7138 to <2 x i64>
  %7140 = shufflevector <4 x i32> %7136, <4 x i32> %7137, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7141 = bitcast <4 x i32> %7140 to <2 x i64>
  %7142 = shufflevector <2 x i64> %7133, <2 x i64> %7139, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7142, <2 x i64>* %6857, align 16
  %7143 = shufflevector <2 x i64> %7133, <2 x i64> %7139, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7143, <2 x i64>* %6859, align 16
  %7144 = shufflevector <2 x i64> %7135, <2 x i64> %7141, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7144, <2 x i64>* %6861, align 16
  %7145 = shufflevector <2 x i64> %7135, <2 x i64> %7141, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7145, <2 x i64>* %6863, align 16
  %7146 = load <4 x i32>, <4 x i32>* %6603, align 16
  %7147 = load <4 x i32>, <4 x i32>* %6619, align 16
  %7148 = shufflevector <4 x i32> %7146, <4 x i32> %7147, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7149 = bitcast <4 x i32> %7148 to <2 x i64>
  %7150 = shufflevector <4 x i32> %7146, <4 x i32> %7147, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7151 = bitcast <4 x i32> %7150 to <2 x i64>
  %7152 = load <4 x i32>, <4 x i32>* %6635, align 16
  %7153 = load <4 x i32>, <4 x i32>* %6651, align 16
  %7154 = shufflevector <4 x i32> %7152, <4 x i32> %7153, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7155 = bitcast <4 x i32> %7154 to <2 x i64>
  %7156 = shufflevector <4 x i32> %7152, <4 x i32> %7153, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7157 = bitcast <4 x i32> %7156 to <2 x i64>
  %7158 = shufflevector <2 x i64> %7149, <2 x i64> %7155, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7158, <2 x i64>* %6877, align 16
  %7159 = shufflevector <2 x i64> %7149, <2 x i64> %7155, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7159, <2 x i64>* %6879, align 16
  %7160 = shufflevector <2 x i64> %7151, <2 x i64> %7157, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7160, <2 x i64>* %6881, align 16
  %7161 = shufflevector <2 x i64> %7151, <2 x i64> %7157, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7161, <2 x i64>* %6883, align 16
  %7162 = load <4 x i32>, <4 x i32>* %6607, align 16
  %7163 = load <4 x i32>, <4 x i32>* %6623, align 16
  %7164 = shufflevector <4 x i32> %7162, <4 x i32> %7163, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7165 = bitcast <4 x i32> %7164 to <2 x i64>
  %7166 = shufflevector <4 x i32> %7162, <4 x i32> %7163, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7167 = bitcast <4 x i32> %7166 to <2 x i64>
  %7168 = load <4 x i32>, <4 x i32>* %6639, align 16
  %7169 = load <4 x i32>, <4 x i32>* %6655, align 16
  %7170 = shufflevector <4 x i32> %7168, <4 x i32> %7169, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7171 = bitcast <4 x i32> %7170 to <2 x i64>
  %7172 = shufflevector <4 x i32> %7168, <4 x i32> %7169, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7173 = bitcast <4 x i32> %7172 to <2 x i64>
  %7174 = shufflevector <2 x i64> %7165, <2 x i64> %7171, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7174, <2 x i64>* %6897, align 16
  %7175 = shufflevector <2 x i64> %7165, <2 x i64> %7171, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7175, <2 x i64>* %6899, align 16
  %7176 = shufflevector <2 x i64> %7167, <2 x i64> %7173, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7176, <2 x i64>* %6901, align 16
  %7177 = shufflevector <2 x i64> %7167, <2 x i64> %7173, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7177, <2 x i64>* %6903, align 16
  %7178 = load <4 x i32>, <4 x i32>* %6531, align 16
  %7179 = load <4 x i32>, <4 x i32>* %6547, align 16
  %7180 = shufflevector <4 x i32> %7178, <4 x i32> %7179, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7181 = bitcast <4 x i32> %7180 to <2 x i64>
  %7182 = shufflevector <4 x i32> %7178, <4 x i32> %7179, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7183 = bitcast <4 x i32> %7182 to <2 x i64>
  %7184 = load <4 x i32>, <4 x i32>* %6563, align 16
  %7185 = load <4 x i32>, <4 x i32>* %6579, align 16
  %7186 = shufflevector <4 x i32> %7184, <4 x i32> %7185, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7187 = bitcast <4 x i32> %7186 to <2 x i64>
  %7188 = shufflevector <4 x i32> %7184, <4 x i32> %7185, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7189 = bitcast <4 x i32> %7188 to <2 x i64>
  %7190 = shufflevector <2 x i64> %7181, <2 x i64> %7187, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7190, <2 x i64>* %6917, align 16
  %7191 = shufflevector <2 x i64> %7181, <2 x i64> %7187, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7191, <2 x i64>* %6919, align 16
  %7192 = shufflevector <2 x i64> %7183, <2 x i64> %7189, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7192, <2 x i64>* %6921, align 16
  %7193 = shufflevector <2 x i64> %7183, <2 x i64> %7189, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7193, <2 x i64>* %6923, align 16
  %7194 = load <4 x i32>, <4 x i32>* %6535, align 16
  %7195 = load <4 x i32>, <4 x i32>* %6551, align 16
  %7196 = shufflevector <4 x i32> %7194, <4 x i32> %7195, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7197 = bitcast <4 x i32> %7196 to <2 x i64>
  %7198 = shufflevector <4 x i32> %7194, <4 x i32> %7195, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7199 = bitcast <4 x i32> %7198 to <2 x i64>
  %7200 = load <4 x i32>, <4 x i32>* %6567, align 16
  %7201 = load <4 x i32>, <4 x i32>* %6583, align 16
  %7202 = shufflevector <4 x i32> %7200, <4 x i32> %7201, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7203 = bitcast <4 x i32> %7202 to <2 x i64>
  %7204 = shufflevector <4 x i32> %7200, <4 x i32> %7201, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7205 = bitcast <4 x i32> %7204 to <2 x i64>
  %7206 = shufflevector <2 x i64> %7197, <2 x i64> %7203, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7206, <2 x i64>* %6937, align 16
  %7207 = shufflevector <2 x i64> %7197, <2 x i64> %7203, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7207, <2 x i64>* %6939, align 16
  %7208 = shufflevector <2 x i64> %7199, <2 x i64> %7205, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7208, <2 x i64>* %6941, align 16
  %7209 = shufflevector <2 x i64> %7199, <2 x i64> %7205, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7209, <2 x i64>* %6943, align 16
  %7210 = load <4 x i32>, <4 x i32>* %6611, align 16
  %7211 = load <4 x i32>, <4 x i32>* %6627, align 16
  %7212 = shufflevector <4 x i32> %7210, <4 x i32> %7211, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7213 = bitcast <4 x i32> %7212 to <2 x i64>
  %7214 = shufflevector <4 x i32> %7210, <4 x i32> %7211, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7215 = bitcast <4 x i32> %7214 to <2 x i64>
  %7216 = load <4 x i32>, <4 x i32>* %6643, align 16
  %7217 = load <4 x i32>, <4 x i32>* %6659, align 16
  %7218 = shufflevector <4 x i32> %7216, <4 x i32> %7217, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7219 = bitcast <4 x i32> %7218 to <2 x i64>
  %7220 = shufflevector <4 x i32> %7216, <4 x i32> %7217, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7221 = bitcast <4 x i32> %7220 to <2 x i64>
  %7222 = shufflevector <2 x i64> %7213, <2 x i64> %7219, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7222, <2 x i64>* %6957, align 16
  %7223 = shufflevector <2 x i64> %7213, <2 x i64> %7219, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7223, <2 x i64>* %6959, align 16
  %7224 = shufflevector <2 x i64> %7215, <2 x i64> %7221, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7224, <2 x i64>* %6961, align 16
  %7225 = shufflevector <2 x i64> %7215, <2 x i64> %7221, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7225, <2 x i64>* %6963, align 16
  %7226 = load <4 x i32>, <4 x i32>* %6615, align 16
  %7227 = load <4 x i32>, <4 x i32>* %6631, align 16
  %7228 = shufflevector <4 x i32> %7226, <4 x i32> %7227, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7229 = bitcast <4 x i32> %7228 to <2 x i64>
  %7230 = shufflevector <4 x i32> %7226, <4 x i32> %7227, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7231 = bitcast <4 x i32> %7230 to <2 x i64>
  %7232 = load <4 x i32>, <4 x i32>* %6647, align 16
  %7233 = load <4 x i32>, <4 x i32>* %6663, align 16
  %7234 = shufflevector <4 x i32> %7232, <4 x i32> %7233, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7235 = bitcast <4 x i32> %7234 to <2 x i64>
  %7236 = shufflevector <4 x i32> %7232, <4 x i32> %7233, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7237 = bitcast <4 x i32> %7236 to <2 x i64>
  %7238 = shufflevector <2 x i64> %7229, <2 x i64> %7235, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7238, <2 x i64>* %6977, align 16
  %7239 = shufflevector <2 x i64> %7229, <2 x i64> %7235, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7239, <2 x i64>* %6979, align 16
  %7240 = shufflevector <2 x i64> %7231, <2 x i64> %7237, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7240, <2 x i64>* %6981, align 16
  %7241 = shufflevector <2 x i64> %7231, <2 x i64> %7237, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7241, <2 x i64>* %6983, align 16
  %7242 = bitcast i32* %1 to <2 x i64>*
  %7243 = load <2 x i64>, <2 x i64>* %6349, align 16
  store <2 x i64> %7243, <2 x i64>* %7242, align 16
  %7244 = getelementptr inbounds i32, i32* %1, i64 4
  %7245 = bitcast i32* %7244 to <2 x i64>*
  %7246 = load <2 x i64>, <2 x i64>* %6725, align 16
  store <2 x i64> %7246, <2 x i64>* %7245, align 16
  %7247 = getelementptr inbounds i32, i32* %1, i64 8
  %7248 = bitcast i32* %7247 to <2 x i64>*
  %7249 = load <2 x i64>, <2 x i64>* %6837, align 16
  store <2 x i64> %7249, <2 x i64>* %7248, align 16
  %7250 = getelementptr inbounds i32, i32* %1, i64 12
  %7251 = bitcast i32* %7250 to <2 x i64>*
  %7252 = load <2 x i64>, <2 x i64>* %6877, align 16
  store <2 x i64> %7252, <2 x i64>* %7251, align 16
  %7253 = getelementptr inbounds i32, i32* %1, i64 16
  %7254 = bitcast i32* %7253 to <2 x i64>*
  %7255 = load <2 x i64>, <2 x i64>* %6692, align 16
  store <2 x i64> %7255, <2 x i64>* %7254, align 16
  %7256 = getelementptr inbounds i32, i32* %1, i64 20
  %7257 = bitcast i32* %7256 to <2 x i64>*
  %7258 = load <2 x i64>, <2 x i64>* %6727, align 16
  store <2 x i64> %7258, <2 x i64>* %7257, align 16
  %7259 = getelementptr inbounds i32, i32* %1, i64 24
  %7260 = bitcast i32* %7259 to <2 x i64>*
  %7261 = load <2 x i64>, <2 x i64>* %6839, align 16
  store <2 x i64> %7261, <2 x i64>* %7260, align 16
  %7262 = getelementptr inbounds i32, i32* %1, i64 28
  %7263 = bitcast i32* %7262 to <2 x i64>*
  %7264 = load <2 x i64>, <2 x i64>* %6879, align 16
  store <2 x i64> %7264, <2 x i64>* %7263, align 16
  %7265 = getelementptr inbounds i32, i32* %1, i64 32
  %7266 = bitcast i32* %7265 to <2 x i64>*
  %7267 = load <2 x i64>, <2 x i64>* %6694, align 16
  store <2 x i64> %7267, <2 x i64>* %7266, align 16
  %7268 = getelementptr inbounds i32, i32* %1, i64 36
  %7269 = bitcast i32* %7268 to <2 x i64>*
  %7270 = load <2 x i64>, <2 x i64>* %6729, align 16
  store <2 x i64> %7270, <2 x i64>* %7269, align 16
  %7271 = getelementptr inbounds i32, i32* %1, i64 40
  %7272 = bitcast i32* %7271 to <2 x i64>*
  %7273 = load <2 x i64>, <2 x i64>* %6841, align 16
  store <2 x i64> %7273, <2 x i64>* %7272, align 16
  %7274 = getelementptr inbounds i32, i32* %1, i64 44
  %7275 = bitcast i32* %7274 to <2 x i64>*
  %7276 = load <2 x i64>, <2 x i64>* %6881, align 16
  store <2 x i64> %7276, <2 x i64>* %7275, align 16
  %7277 = getelementptr inbounds i32, i32* %1, i64 48
  %7278 = bitcast i32* %7277 to <2 x i64>*
  %7279 = load <2 x i64>, <2 x i64>* %6696, align 16
  store <2 x i64> %7279, <2 x i64>* %7278, align 16
  %7280 = getelementptr inbounds i32, i32* %1, i64 52
  %7281 = bitcast i32* %7280 to <2 x i64>*
  %7282 = load <2 x i64>, <2 x i64>* %6731, align 16
  store <2 x i64> %7282, <2 x i64>* %7281, align 16
  %7283 = getelementptr inbounds i32, i32* %1, i64 56
  %7284 = bitcast i32* %7283 to <2 x i64>*
  %7285 = load <2 x i64>, <2 x i64>* %6843, align 16
  store <2 x i64> %7285, <2 x i64>* %7284, align 16
  %7286 = getelementptr inbounds i32, i32* %1, i64 60
  %7287 = bitcast i32* %7286 to <2 x i64>*
  %7288 = load <2 x i64>, <2 x i64>* %6883, align 16
  store <2 x i64> %7288, <2 x i64>* %7287, align 16
  %7289 = getelementptr inbounds i32, i32* %1, i64 64
  %7290 = bitcast i32* %7289 to <2 x i64>*
  %7291 = load <2 x i64>, <2 x i64>* %6706, align 16
  store <2 x i64> %7291, <2 x i64>* %7290, align 16
  %7292 = getelementptr inbounds i32, i32* %1, i64 68
  %7293 = bitcast i32* %7292 to <2 x i64>*
  %7294 = load <2 x i64>, <2 x i64>* %6745, align 16
  store <2 x i64> %7294, <2 x i64>* %7293, align 16
  %7295 = getelementptr inbounds i32, i32* %1, i64 72
  %7296 = bitcast i32* %7295 to <2 x i64>*
  %7297 = load <2 x i64>, <2 x i64>* %6857, align 16
  store <2 x i64> %7297, <2 x i64>* %7296, align 16
  %7298 = getelementptr inbounds i32, i32* %1, i64 76
  %7299 = bitcast i32* %7298 to <2 x i64>*
  %7300 = load <2 x i64>, <2 x i64>* %6897, align 16
  store <2 x i64> %7300, <2 x i64>* %7299, align 16
  %7301 = getelementptr inbounds i32, i32* %1, i64 80
  %7302 = bitcast i32* %7301 to <2 x i64>*
  %7303 = load <2 x i64>, <2 x i64>* %6708, align 16
  store <2 x i64> %7303, <2 x i64>* %7302, align 16
  %7304 = getelementptr inbounds i32, i32* %1, i64 84
  %7305 = bitcast i32* %7304 to <2 x i64>*
  %7306 = load <2 x i64>, <2 x i64>* %6747, align 16
  store <2 x i64> %7306, <2 x i64>* %7305, align 16
  %7307 = getelementptr inbounds i32, i32* %1, i64 88
  %7308 = bitcast i32* %7307 to <2 x i64>*
  %7309 = load <2 x i64>, <2 x i64>* %6859, align 16
  store <2 x i64> %7309, <2 x i64>* %7308, align 16
  %7310 = getelementptr inbounds i32, i32* %1, i64 92
  %7311 = bitcast i32* %7310 to <2 x i64>*
  %7312 = load <2 x i64>, <2 x i64>* %6899, align 16
  store <2 x i64> %7312, <2 x i64>* %7311, align 16
  %7313 = getelementptr inbounds i32, i32* %1, i64 96
  %7314 = bitcast i32* %7313 to <2 x i64>*
  %7315 = load <2 x i64>, <2 x i64>* %6710, align 16
  store <2 x i64> %7315, <2 x i64>* %7314, align 16
  %7316 = getelementptr inbounds i32, i32* %1, i64 100
  %7317 = bitcast i32* %7316 to <2 x i64>*
  %7318 = load <2 x i64>, <2 x i64>* %6749, align 16
  store <2 x i64> %7318, <2 x i64>* %7317, align 16
  %7319 = getelementptr inbounds i32, i32* %1, i64 104
  %7320 = bitcast i32* %7319 to <2 x i64>*
  %7321 = load <2 x i64>, <2 x i64>* %6861, align 16
  store <2 x i64> %7321, <2 x i64>* %7320, align 16
  %7322 = getelementptr inbounds i32, i32* %1, i64 108
  %7323 = bitcast i32* %7322 to <2 x i64>*
  %7324 = load <2 x i64>, <2 x i64>* %6901, align 16
  store <2 x i64> %7324, <2 x i64>* %7323, align 16
  %7325 = getelementptr inbounds i32, i32* %1, i64 112
  %7326 = bitcast i32* %7325 to <2 x i64>*
  %7327 = load <2 x i64>, <2 x i64>* %6712, align 16
  store <2 x i64> %7327, <2 x i64>* %7326, align 16
  %7328 = getelementptr inbounds i32, i32* %1, i64 116
  %7329 = bitcast i32* %7328 to <2 x i64>*
  %7330 = load <2 x i64>, <2 x i64>* %6751, align 16
  store <2 x i64> %7330, <2 x i64>* %7329, align 16
  %7331 = getelementptr inbounds i32, i32* %1, i64 120
  %7332 = bitcast i32* %7331 to <2 x i64>*
  %7333 = load <2 x i64>, <2 x i64>* %6863, align 16
  store <2 x i64> %7333, <2 x i64>* %7332, align 16
  %7334 = getelementptr inbounds i32, i32* %1, i64 124
  %7335 = bitcast i32* %7334 to <2 x i64>*
  %7336 = load <2 x i64>, <2 x i64>* %6903, align 16
  store <2 x i64> %7336, <2 x i64>* %7335, align 16
  %7337 = getelementptr inbounds i32, i32* %1, i64 128
  %7338 = bitcast i32* %7337 to <2 x i64>*
  %7339 = load <2 x i64>, <2 x i64>* %6761, align 16
  store <2 x i64> %7339, <2 x i64>* %7338, align 16
  %7340 = getelementptr inbounds i32, i32* %1, i64 132
  %7341 = bitcast i32* %7340 to <2 x i64>*
  %7342 = load <2 x i64>, <2 x i64>* %6797, align 16
  store <2 x i64> %7342, <2 x i64>* %7341, align 16
  %7343 = getelementptr inbounds i32, i32* %1, i64 136
  %7344 = bitcast i32* %7343 to <2 x i64>*
  %7345 = load <2 x i64>, <2 x i64>* %6917, align 16
  store <2 x i64> %7345, <2 x i64>* %7344, align 16
  %7346 = getelementptr inbounds i32, i32* %1, i64 140
  %7347 = bitcast i32* %7346 to <2 x i64>*
  %7348 = load <2 x i64>, <2 x i64>* %6957, align 16
  store <2 x i64> %7348, <2 x i64>* %7347, align 16
  %7349 = getelementptr inbounds i32, i32* %1, i64 144
  %7350 = bitcast i32* %7349 to <2 x i64>*
  %7351 = load <2 x i64>, <2 x i64>* %6763, align 16
  store <2 x i64> %7351, <2 x i64>* %7350, align 16
  %7352 = getelementptr inbounds i32, i32* %1, i64 148
  %7353 = bitcast i32* %7352 to <2 x i64>*
  %7354 = load <2 x i64>, <2 x i64>* %6799, align 16
  store <2 x i64> %7354, <2 x i64>* %7353, align 16
  %7355 = getelementptr inbounds i32, i32* %1, i64 152
  %7356 = bitcast i32* %7355 to <2 x i64>*
  %7357 = load <2 x i64>, <2 x i64>* %6919, align 16
  store <2 x i64> %7357, <2 x i64>* %7356, align 16
  %7358 = getelementptr inbounds i32, i32* %1, i64 156
  %7359 = bitcast i32* %7358 to <2 x i64>*
  %7360 = load <2 x i64>, <2 x i64>* %6959, align 16
  store <2 x i64> %7360, <2 x i64>* %7359, align 16
  %7361 = getelementptr inbounds i32, i32* %1, i64 160
  %7362 = bitcast i32* %7361 to <2 x i64>*
  %7363 = load <2 x i64>, <2 x i64>* %6765, align 16
  store <2 x i64> %7363, <2 x i64>* %7362, align 16
  %7364 = getelementptr inbounds i32, i32* %1, i64 164
  %7365 = bitcast i32* %7364 to <2 x i64>*
  %7366 = load <2 x i64>, <2 x i64>* %6801, align 16
  store <2 x i64> %7366, <2 x i64>* %7365, align 16
  %7367 = getelementptr inbounds i32, i32* %1, i64 168
  %7368 = bitcast i32* %7367 to <2 x i64>*
  %7369 = load <2 x i64>, <2 x i64>* %6921, align 16
  store <2 x i64> %7369, <2 x i64>* %7368, align 16
  %7370 = getelementptr inbounds i32, i32* %1, i64 172
  %7371 = bitcast i32* %7370 to <2 x i64>*
  %7372 = load <2 x i64>, <2 x i64>* %6961, align 16
  store <2 x i64> %7372, <2 x i64>* %7371, align 16
  %7373 = getelementptr inbounds i32, i32* %1, i64 176
  %7374 = bitcast i32* %7373 to <2 x i64>*
  %7375 = load <2 x i64>, <2 x i64>* %6767, align 16
  store <2 x i64> %7375, <2 x i64>* %7374, align 16
  %7376 = getelementptr inbounds i32, i32* %1, i64 180
  %7377 = bitcast i32* %7376 to <2 x i64>*
  %7378 = load <2 x i64>, <2 x i64>* %6803, align 16
  store <2 x i64> %7378, <2 x i64>* %7377, align 16
  %7379 = getelementptr inbounds i32, i32* %1, i64 184
  %7380 = bitcast i32* %7379 to <2 x i64>*
  %7381 = load <2 x i64>, <2 x i64>* %6923, align 16
  store <2 x i64> %7381, <2 x i64>* %7380, align 16
  %7382 = getelementptr inbounds i32, i32* %1, i64 188
  %7383 = bitcast i32* %7382 to <2 x i64>*
  %7384 = load <2 x i64>, <2 x i64>* %6963, align 16
  store <2 x i64> %7384, <2 x i64>* %7383, align 16
  %7385 = getelementptr inbounds i32, i32* %1, i64 192
  %7386 = bitcast i32* %7385 to <2 x i64>*
  %7387 = load <2 x i64>, <2 x i64>* %6777, align 16
  store <2 x i64> %7387, <2 x i64>* %7386, align 16
  %7388 = getelementptr inbounds i32, i32* %1, i64 196
  %7389 = bitcast i32* %7388 to <2 x i64>*
  %7390 = load <2 x i64>, <2 x i64>* %6817, align 16
  store <2 x i64> %7390, <2 x i64>* %7389, align 16
  %7391 = getelementptr inbounds i32, i32* %1, i64 200
  %7392 = bitcast i32* %7391 to <2 x i64>*
  %7393 = load <2 x i64>, <2 x i64>* %6937, align 16
  store <2 x i64> %7393, <2 x i64>* %7392, align 16
  %7394 = getelementptr inbounds i32, i32* %1, i64 204
  %7395 = bitcast i32* %7394 to <2 x i64>*
  %7396 = load <2 x i64>, <2 x i64>* %6977, align 16
  store <2 x i64> %7396, <2 x i64>* %7395, align 16
  %7397 = getelementptr inbounds i32, i32* %1, i64 208
  %7398 = bitcast i32* %7397 to <2 x i64>*
  %7399 = load <2 x i64>, <2 x i64>* %6779, align 16
  store <2 x i64> %7399, <2 x i64>* %7398, align 16
  %7400 = getelementptr inbounds i32, i32* %1, i64 212
  %7401 = bitcast i32* %7400 to <2 x i64>*
  %7402 = load <2 x i64>, <2 x i64>* %6819, align 16
  store <2 x i64> %7402, <2 x i64>* %7401, align 16
  %7403 = getelementptr inbounds i32, i32* %1, i64 216
  %7404 = bitcast i32* %7403 to <2 x i64>*
  %7405 = load <2 x i64>, <2 x i64>* %6939, align 16
  store <2 x i64> %7405, <2 x i64>* %7404, align 16
  %7406 = getelementptr inbounds i32, i32* %1, i64 220
  %7407 = bitcast i32* %7406 to <2 x i64>*
  %7408 = load <2 x i64>, <2 x i64>* %6979, align 16
  store <2 x i64> %7408, <2 x i64>* %7407, align 16
  %7409 = getelementptr inbounds i32, i32* %1, i64 224
  %7410 = bitcast i32* %7409 to <2 x i64>*
  %7411 = load <2 x i64>, <2 x i64>* %6781, align 16
  store <2 x i64> %7411, <2 x i64>* %7410, align 16
  %7412 = getelementptr inbounds i32, i32* %1, i64 228
  %7413 = bitcast i32* %7412 to <2 x i64>*
  %7414 = load <2 x i64>, <2 x i64>* %6821, align 16
  store <2 x i64> %7414, <2 x i64>* %7413, align 16
  %7415 = getelementptr inbounds i32, i32* %1, i64 232
  %7416 = bitcast i32* %7415 to <2 x i64>*
  %7417 = load <2 x i64>, <2 x i64>* %6941, align 16
  store <2 x i64> %7417, <2 x i64>* %7416, align 16
  %7418 = getelementptr inbounds i32, i32* %1, i64 236
  %7419 = bitcast i32* %7418 to <2 x i64>*
  %7420 = load <2 x i64>, <2 x i64>* %6981, align 16
  store <2 x i64> %7420, <2 x i64>* %7419, align 16
  %7421 = getelementptr inbounds i32, i32* %1, i64 240
  %7422 = bitcast i32* %7421 to <2 x i64>*
  %7423 = load <2 x i64>, <2 x i64>* %6783, align 16
  store <2 x i64> %7423, <2 x i64>* %7422, align 16
  %7424 = getelementptr inbounds i32, i32* %1, i64 244
  %7425 = bitcast i32* %7424 to <2 x i64>*
  %7426 = load <2 x i64>, <2 x i64>* %6823, align 16
  store <2 x i64> %7426, <2 x i64>* %7425, align 16
  %7427 = getelementptr inbounds i32, i32* %1, i64 248
  %7428 = bitcast i32* %7427 to <2 x i64>*
  %7429 = load <2 x i64>, <2 x i64>* %6943, align 16
  store <2 x i64> %7429, <2 x i64>* %7428, align 16
  %7430 = getelementptr inbounds i32, i32* %1, i64 252
  %7431 = bitcast i32* %7430 to <2 x i64>*
  %7432 = load <2 x i64>, <2 x i64>* %6983, align 16
  store <2 x i64> %7432, <2 x i64>* %7431, align 16
  br label %17357

7433:                                             ; preds = %5
  %7434 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %7435 = load i8, i8* %10, align 1
  %7436 = sext i8 %7435 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %7434, i32 %2, i32 0, i32 1, i32 %7436)
  %7437 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %7438 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  %7439 = sext i8 %7438 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %7434, <2 x i64>* nonnull %7437, i32 %7439, i32 4)
  %7440 = getelementptr inbounds i8, i8* %10, i64 1
  %7441 = load i8, i8* %7440, align 1
  %7442 = sext i8 %7441 to i32
  %7443 = sub nsw i32 0, %7442
  %7444 = xor i32 %7442, -1
  %7445 = shl i32 1, %7444
  %7446 = insertelement <4 x i32> undef, i32 %7445, i32 0
  %7447 = shufflevector <4 x i32> %7446, <4 x i32> undef, <4 x i32> zeroinitializer
  %7448 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %7449 = load <4 x i32>, <4 x i32>* %7448, align 16
  %7450 = add <4 x i32> %7447, %7449
  %7451 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %7452 = bitcast <2 x i64>* %7451 to <4 x i32>*
  %7453 = load <4 x i32>, <4 x i32>* %7452, align 16
  %7454 = add <4 x i32> %7447, %7453
  %7455 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %7456 = bitcast <2 x i64>* %7455 to <4 x i32>*
  %7457 = load <4 x i32>, <4 x i32>* %7456, align 16
  %7458 = add <4 x i32> %7447, %7457
  %7459 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %7460 = bitcast <2 x i64>* %7459 to <4 x i32>*
  %7461 = load <4 x i32>, <4 x i32>* %7460, align 16
  %7462 = add <4 x i32> %7461, %7447
  %7463 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %7464 = bitcast <2 x i64>* %7463 to <4 x i32>*
  %7465 = load <4 x i32>, <4 x i32>* %7464, align 16
  %7466 = add <4 x i32> %7465, %7447
  %7467 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %7468 = bitcast <2 x i64>* %7467 to <4 x i32>*
  %7469 = load <4 x i32>, <4 x i32>* %7468, align 16
  %7470 = add <4 x i32> %7469, %7447
  %7471 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %7472 = bitcast <2 x i64>* %7471 to <4 x i32>*
  %7473 = load <4 x i32>, <4 x i32>* %7472, align 16
  %7474 = add <4 x i32> %7473, %7447
  %7475 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %7476 = bitcast <2 x i64>* %7475 to <4 x i32>*
  %7477 = load <4 x i32>, <4 x i32>* %7476, align 16
  %7478 = add <4 x i32> %7477, %7447
  %7479 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %7480 = bitcast <2 x i64>* %7479 to <4 x i32>*
  %7481 = load <4 x i32>, <4 x i32>* %7480, align 16
  %7482 = add <4 x i32> %7481, %7447
  %7483 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %7484 = bitcast <2 x i64>* %7483 to <4 x i32>*
  %7485 = load <4 x i32>, <4 x i32>* %7484, align 16
  %7486 = add <4 x i32> %7485, %7447
  %7487 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %7488 = bitcast <2 x i64>* %7487 to <4 x i32>*
  %7489 = load <4 x i32>, <4 x i32>* %7488, align 16
  %7490 = add <4 x i32> %7489, %7447
  %7491 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %7492 = bitcast <2 x i64>* %7491 to <4 x i32>*
  %7493 = load <4 x i32>, <4 x i32>* %7492, align 16
  %7494 = add <4 x i32> %7493, %7447
  %7495 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %7496 = bitcast <2 x i64>* %7495 to <4 x i32>*
  %7497 = load <4 x i32>, <4 x i32>* %7496, align 16
  %7498 = add <4 x i32> %7497, %7447
  %7499 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %7500 = bitcast <2 x i64>* %7499 to <4 x i32>*
  %7501 = load <4 x i32>, <4 x i32>* %7500, align 16
  %7502 = add <4 x i32> %7501, %7447
  %7503 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %7504 = bitcast <2 x i64>* %7503 to <4 x i32>*
  %7505 = load <4 x i32>, <4 x i32>* %7504, align 16
  %7506 = add <4 x i32> %7505, %7447
  %7507 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %7508 = bitcast <2 x i64>* %7507 to <4 x i32>*
  %7509 = load <4 x i32>, <4 x i32>* %7508, align 16
  %7510 = add <4 x i32> %7509, %7447
  %7511 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7450, i32 %7443) #8
  store <4 x i32> %7511, <4 x i32>* %7448, align 16
  %7512 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7454, i32 %7443) #8
  store <4 x i32> %7512, <4 x i32>* %7452, align 16
  %7513 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7458, i32 %7443) #8
  store <4 x i32> %7513, <4 x i32>* %7456, align 16
  %7514 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7462, i32 %7443) #8
  store <4 x i32> %7514, <4 x i32>* %7460, align 16
  %7515 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7466, i32 %7443) #8
  store <4 x i32> %7515, <4 x i32>* %7464, align 16
  %7516 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7470, i32 %7443) #8
  store <4 x i32> %7516, <4 x i32>* %7468, align 16
  %7517 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7474, i32 %7443) #8
  store <4 x i32> %7517, <4 x i32>* %7472, align 16
  %7518 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7478, i32 %7443) #8
  store <4 x i32> %7518, <4 x i32>* %7476, align 16
  %7519 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7482, i32 %7443) #8
  store <4 x i32> %7519, <4 x i32>* %7480, align 16
  %7520 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7486, i32 %7443) #8
  store <4 x i32> %7520, <4 x i32>* %7484, align 16
  %7521 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7490, i32 %7443) #8
  store <4 x i32> %7521, <4 x i32>* %7488, align 16
  %7522 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7494, i32 %7443) #8
  store <4 x i32> %7522, <4 x i32>* %7492, align 16
  %7523 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7498, i32 %7443) #8
  store <4 x i32> %7523, <4 x i32>* %7496, align 16
  %7524 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7502, i32 %7443) #8
  store <4 x i32> %7524, <4 x i32>* %7500, align 16
  %7525 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7506, i32 %7443) #8
  store <4 x i32> %7525, <4 x i32>* %7504, align 16
  %7526 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7510, i32 %7443) #8
  store <4 x i32> %7526, <4 x i32>* %7508, align 16
  %7527 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %7528 = bitcast <2 x i64>* %7527 to <4 x i32>*
  %7529 = load <4 x i32>, <4 x i32>* %7528, align 16
  %7530 = add <4 x i32> %7529, %7447
  %7531 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %7532 = bitcast <2 x i64>* %7531 to <4 x i32>*
  %7533 = load <4 x i32>, <4 x i32>* %7532, align 16
  %7534 = add <4 x i32> %7533, %7447
  %7535 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %7536 = bitcast <2 x i64>* %7535 to <4 x i32>*
  %7537 = load <4 x i32>, <4 x i32>* %7536, align 16
  %7538 = add <4 x i32> %7537, %7447
  %7539 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %7540 = bitcast <2 x i64>* %7539 to <4 x i32>*
  %7541 = load <4 x i32>, <4 x i32>* %7540, align 16
  %7542 = add <4 x i32> %7541, %7447
  %7543 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %7544 = bitcast <2 x i64>* %7543 to <4 x i32>*
  %7545 = load <4 x i32>, <4 x i32>* %7544, align 16
  %7546 = add <4 x i32> %7545, %7447
  %7547 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %7548 = bitcast <2 x i64>* %7547 to <4 x i32>*
  %7549 = load <4 x i32>, <4 x i32>* %7548, align 16
  %7550 = add <4 x i32> %7549, %7447
  %7551 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %7552 = bitcast <2 x i64>* %7551 to <4 x i32>*
  %7553 = load <4 x i32>, <4 x i32>* %7552, align 16
  %7554 = add <4 x i32> %7553, %7447
  %7555 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %7556 = bitcast <2 x i64>* %7555 to <4 x i32>*
  %7557 = load <4 x i32>, <4 x i32>* %7556, align 16
  %7558 = add <4 x i32> %7557, %7447
  %7559 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %7560 = bitcast <2 x i64>* %7559 to <4 x i32>*
  %7561 = load <4 x i32>, <4 x i32>* %7560, align 16
  %7562 = add <4 x i32> %7561, %7447
  %7563 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %7564 = bitcast <2 x i64>* %7563 to <4 x i32>*
  %7565 = load <4 x i32>, <4 x i32>* %7564, align 16
  %7566 = add <4 x i32> %7565, %7447
  %7567 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %7568 = bitcast <2 x i64>* %7567 to <4 x i32>*
  %7569 = load <4 x i32>, <4 x i32>* %7568, align 16
  %7570 = add <4 x i32> %7569, %7447
  %7571 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %7572 = bitcast <2 x i64>* %7571 to <4 x i32>*
  %7573 = load <4 x i32>, <4 x i32>* %7572, align 16
  %7574 = add <4 x i32> %7573, %7447
  %7575 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %7576 = bitcast <2 x i64>* %7575 to <4 x i32>*
  %7577 = load <4 x i32>, <4 x i32>* %7576, align 16
  %7578 = add <4 x i32> %7577, %7447
  %7579 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %7580 = bitcast <2 x i64>* %7579 to <4 x i32>*
  %7581 = load <4 x i32>, <4 x i32>* %7580, align 16
  %7582 = add <4 x i32> %7581, %7447
  %7583 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %7584 = bitcast <2 x i64>* %7583 to <4 x i32>*
  %7585 = load <4 x i32>, <4 x i32>* %7584, align 16
  %7586 = add <4 x i32> %7585, %7447
  %7587 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %7588 = bitcast <2 x i64>* %7587 to <4 x i32>*
  %7589 = load <4 x i32>, <4 x i32>* %7588, align 16
  %7590 = add <4 x i32> %7589, %7447
  %7591 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7530, i32 %7443) #8
  store <4 x i32> %7591, <4 x i32>* %7528, align 16
  %7592 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7534, i32 %7443) #8
  store <4 x i32> %7592, <4 x i32>* %7532, align 16
  %7593 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7538, i32 %7443) #8
  store <4 x i32> %7593, <4 x i32>* %7536, align 16
  %7594 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7542, i32 %7443) #8
  store <4 x i32> %7594, <4 x i32>* %7540, align 16
  %7595 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7546, i32 %7443) #8
  store <4 x i32> %7595, <4 x i32>* %7544, align 16
  %7596 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7550, i32 %7443) #8
  store <4 x i32> %7596, <4 x i32>* %7548, align 16
  %7597 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7554, i32 %7443) #8
  store <4 x i32> %7597, <4 x i32>* %7552, align 16
  %7598 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7558, i32 %7443) #8
  store <4 x i32> %7598, <4 x i32>* %7556, align 16
  %7599 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7562, i32 %7443) #8
  store <4 x i32> %7599, <4 x i32>* %7560, align 16
  %7600 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7566, i32 %7443) #8
  store <4 x i32> %7600, <4 x i32>* %7564, align 16
  %7601 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7570, i32 %7443) #8
  store <4 x i32> %7601, <4 x i32>* %7568, align 16
  %7602 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7574, i32 %7443) #8
  store <4 x i32> %7602, <4 x i32>* %7572, align 16
  %7603 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7578, i32 %7443) #8
  store <4 x i32> %7603, <4 x i32>* %7576, align 16
  %7604 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7582, i32 %7443) #8
  store <4 x i32> %7604, <4 x i32>* %7580, align 16
  %7605 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7586, i32 %7443) #8
  store <4 x i32> %7605, <4 x i32>* %7584, align 16
  %7606 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7590, i32 %7443) #8
  store <4 x i32> %7606, <4 x i32>* %7588, align 16
  %7607 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %7608 = bitcast <2 x i64>* %7607 to <4 x i32>*
  %7609 = load <4 x i32>, <4 x i32>* %7608, align 16
  %7610 = add <4 x i32> %7609, %7447
  %7611 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %7612 = bitcast <2 x i64>* %7611 to <4 x i32>*
  %7613 = load <4 x i32>, <4 x i32>* %7612, align 16
  %7614 = add <4 x i32> %7613, %7447
  %7615 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %7616 = bitcast <2 x i64>* %7615 to <4 x i32>*
  %7617 = load <4 x i32>, <4 x i32>* %7616, align 16
  %7618 = add <4 x i32> %7617, %7447
  %7619 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %7620 = bitcast <2 x i64>* %7619 to <4 x i32>*
  %7621 = load <4 x i32>, <4 x i32>* %7620, align 16
  %7622 = add <4 x i32> %7621, %7447
  %7623 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %7624 = bitcast <2 x i64>* %7623 to <4 x i32>*
  %7625 = load <4 x i32>, <4 x i32>* %7624, align 16
  %7626 = add <4 x i32> %7625, %7447
  %7627 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %7628 = bitcast <2 x i64>* %7627 to <4 x i32>*
  %7629 = load <4 x i32>, <4 x i32>* %7628, align 16
  %7630 = add <4 x i32> %7629, %7447
  %7631 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %7632 = bitcast <2 x i64>* %7631 to <4 x i32>*
  %7633 = load <4 x i32>, <4 x i32>* %7632, align 16
  %7634 = add <4 x i32> %7633, %7447
  %7635 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %7636 = bitcast <2 x i64>* %7635 to <4 x i32>*
  %7637 = load <4 x i32>, <4 x i32>* %7636, align 16
  %7638 = add <4 x i32> %7637, %7447
  %7639 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %7640 = bitcast <2 x i64>* %7639 to <4 x i32>*
  %7641 = load <4 x i32>, <4 x i32>* %7640, align 16
  %7642 = add <4 x i32> %7641, %7447
  %7643 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %7644 = bitcast <2 x i64>* %7643 to <4 x i32>*
  %7645 = load <4 x i32>, <4 x i32>* %7644, align 16
  %7646 = add <4 x i32> %7645, %7447
  %7647 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %7648 = bitcast <2 x i64>* %7647 to <4 x i32>*
  %7649 = load <4 x i32>, <4 x i32>* %7648, align 16
  %7650 = add <4 x i32> %7649, %7447
  %7651 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %7652 = bitcast <2 x i64>* %7651 to <4 x i32>*
  %7653 = load <4 x i32>, <4 x i32>* %7652, align 16
  %7654 = add <4 x i32> %7653, %7447
  %7655 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %7656 = bitcast <2 x i64>* %7655 to <4 x i32>*
  %7657 = load <4 x i32>, <4 x i32>* %7656, align 16
  %7658 = add <4 x i32> %7657, %7447
  %7659 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %7660 = bitcast <2 x i64>* %7659 to <4 x i32>*
  %7661 = load <4 x i32>, <4 x i32>* %7660, align 16
  %7662 = add <4 x i32> %7661, %7447
  %7663 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %7664 = bitcast <2 x i64>* %7663 to <4 x i32>*
  %7665 = load <4 x i32>, <4 x i32>* %7664, align 16
  %7666 = add <4 x i32> %7665, %7447
  %7667 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %7668 = bitcast <2 x i64>* %7667 to <4 x i32>*
  %7669 = load <4 x i32>, <4 x i32>* %7668, align 16
  %7670 = add <4 x i32> %7669, %7447
  %7671 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7610, i32 %7443) #8
  store <4 x i32> %7671, <4 x i32>* %7608, align 16
  %7672 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7614, i32 %7443) #8
  store <4 x i32> %7672, <4 x i32>* %7612, align 16
  %7673 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7618, i32 %7443) #8
  store <4 x i32> %7673, <4 x i32>* %7616, align 16
  %7674 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7622, i32 %7443) #8
  store <4 x i32> %7674, <4 x i32>* %7620, align 16
  %7675 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7626, i32 %7443) #8
  store <4 x i32> %7675, <4 x i32>* %7624, align 16
  %7676 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7630, i32 %7443) #8
  store <4 x i32> %7676, <4 x i32>* %7628, align 16
  %7677 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7634, i32 %7443) #8
  store <4 x i32> %7677, <4 x i32>* %7632, align 16
  %7678 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7638, i32 %7443) #8
  store <4 x i32> %7678, <4 x i32>* %7636, align 16
  %7679 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7642, i32 %7443) #8
  store <4 x i32> %7679, <4 x i32>* %7640, align 16
  %7680 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7646, i32 %7443) #8
  store <4 x i32> %7680, <4 x i32>* %7644, align 16
  %7681 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7650, i32 %7443) #8
  store <4 x i32> %7681, <4 x i32>* %7648, align 16
  %7682 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7654, i32 %7443) #8
  store <4 x i32> %7682, <4 x i32>* %7652, align 16
  %7683 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7658, i32 %7443) #8
  store <4 x i32> %7683, <4 x i32>* %7656, align 16
  %7684 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7662, i32 %7443) #8
  store <4 x i32> %7684, <4 x i32>* %7660, align 16
  %7685 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7666, i32 %7443) #8
  store <4 x i32> %7685, <4 x i32>* %7664, align 16
  %7686 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7670, i32 %7443) #8
  store <4 x i32> %7686, <4 x i32>* %7668, align 16
  %7687 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %7688 = bitcast <2 x i64>* %7687 to <4 x i32>*
  %7689 = load <4 x i32>, <4 x i32>* %7688, align 16
  %7690 = add <4 x i32> %7689, %7447
  %7691 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %7692 = bitcast <2 x i64>* %7691 to <4 x i32>*
  %7693 = load <4 x i32>, <4 x i32>* %7692, align 16
  %7694 = add <4 x i32> %7693, %7447
  %7695 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %7696 = bitcast <2 x i64>* %7695 to <4 x i32>*
  %7697 = load <4 x i32>, <4 x i32>* %7696, align 16
  %7698 = add <4 x i32> %7697, %7447
  %7699 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %7700 = bitcast <2 x i64>* %7699 to <4 x i32>*
  %7701 = load <4 x i32>, <4 x i32>* %7700, align 16
  %7702 = add <4 x i32> %7701, %7447
  %7703 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %7704 = bitcast <2 x i64>* %7703 to <4 x i32>*
  %7705 = load <4 x i32>, <4 x i32>* %7704, align 16
  %7706 = add <4 x i32> %7705, %7447
  %7707 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %7708 = bitcast <2 x i64>* %7707 to <4 x i32>*
  %7709 = load <4 x i32>, <4 x i32>* %7708, align 16
  %7710 = add <4 x i32> %7709, %7447
  %7711 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %7712 = bitcast <2 x i64>* %7711 to <4 x i32>*
  %7713 = load <4 x i32>, <4 x i32>* %7712, align 16
  %7714 = add <4 x i32> %7713, %7447
  %7715 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %7716 = bitcast <2 x i64>* %7715 to <4 x i32>*
  %7717 = load <4 x i32>, <4 x i32>* %7716, align 16
  %7718 = add <4 x i32> %7717, %7447
  %7719 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %7720 = bitcast <2 x i64>* %7719 to <4 x i32>*
  %7721 = load <4 x i32>, <4 x i32>* %7720, align 16
  %7722 = add <4 x i32> %7721, %7447
  %7723 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %7724 = bitcast <2 x i64>* %7723 to <4 x i32>*
  %7725 = load <4 x i32>, <4 x i32>* %7724, align 16
  %7726 = add <4 x i32> %7725, %7447
  %7727 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %7728 = bitcast <2 x i64>* %7727 to <4 x i32>*
  %7729 = load <4 x i32>, <4 x i32>* %7728, align 16
  %7730 = add <4 x i32> %7729, %7447
  %7731 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %7732 = bitcast <2 x i64>* %7731 to <4 x i32>*
  %7733 = load <4 x i32>, <4 x i32>* %7732, align 16
  %7734 = add <4 x i32> %7733, %7447
  %7735 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %7736 = bitcast <2 x i64>* %7735 to <4 x i32>*
  %7737 = load <4 x i32>, <4 x i32>* %7736, align 16
  %7738 = add <4 x i32> %7737, %7447
  %7739 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %7740 = bitcast <2 x i64>* %7739 to <4 x i32>*
  %7741 = load <4 x i32>, <4 x i32>* %7740, align 16
  %7742 = add <4 x i32> %7741, %7447
  %7743 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %7744 = bitcast <2 x i64>* %7743 to <4 x i32>*
  %7745 = load <4 x i32>, <4 x i32>* %7744, align 16
  %7746 = add <4 x i32> %7745, %7447
  %7747 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %7748 = bitcast <2 x i64>* %7747 to <4 x i32>*
  %7749 = load <4 x i32>, <4 x i32>* %7748, align 16
  %7750 = add <4 x i32> %7749, %7447
  %7751 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7690, i32 %7443) #8
  store <4 x i32> %7751, <4 x i32>* %7688, align 16
  %7752 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7694, i32 %7443) #8
  store <4 x i32> %7752, <4 x i32>* %7692, align 16
  %7753 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7698, i32 %7443) #8
  store <4 x i32> %7753, <4 x i32>* %7696, align 16
  %7754 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7702, i32 %7443) #8
  store <4 x i32> %7754, <4 x i32>* %7700, align 16
  %7755 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7706, i32 %7443) #8
  store <4 x i32> %7755, <4 x i32>* %7704, align 16
  %7756 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7710, i32 %7443) #8
  store <4 x i32> %7756, <4 x i32>* %7708, align 16
  %7757 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7714, i32 %7443) #8
  store <4 x i32> %7757, <4 x i32>* %7712, align 16
  %7758 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7718, i32 %7443) #8
  store <4 x i32> %7758, <4 x i32>* %7716, align 16
  %7759 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7722, i32 %7443) #8
  store <4 x i32> %7759, <4 x i32>* %7720, align 16
  %7760 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7726, i32 %7443) #8
  store <4 x i32> %7760, <4 x i32>* %7724, align 16
  %7761 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7730, i32 %7443) #8
  store <4 x i32> %7761, <4 x i32>* %7728, align 16
  %7762 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7734, i32 %7443) #8
  store <4 x i32> %7762, <4 x i32>* %7732, align 16
  %7763 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7738, i32 %7443) #8
  store <4 x i32> %7763, <4 x i32>* %7736, align 16
  %7764 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7742, i32 %7443) #8
  store <4 x i32> %7764, <4 x i32>* %7740, align 16
  %7765 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7746, i32 %7443) #8
  store <4 x i32> %7765, <4 x i32>* %7744, align 16
  %7766 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %7750, i32 %7443) #8
  store <4 x i32> %7766, <4 x i32>* %7748, align 16
  %7767 = shufflevector <4 x i32> %7511, <4 x i32> %7515, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7768 = bitcast <4 x i32> %7767 to <2 x i64>
  %7769 = shufflevector <4 x i32> %7511, <4 x i32> %7515, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7770 = bitcast <4 x i32> %7769 to <2 x i64>
  %7771 = shufflevector <4 x i32> %7519, <4 x i32> %7523, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7772 = bitcast <4 x i32> %7771 to <2 x i64>
  %7773 = shufflevector <4 x i32> %7519, <4 x i32> %7523, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7774 = bitcast <4 x i32> %7773 to <2 x i64>
  %7775 = shufflevector <2 x i64> %7768, <2 x i64> %7772, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7775, <2 x i64>* %7434, align 16
  %7776 = shufflevector <2 x i64> %7768, <2 x i64> %7772, <2 x i32> <i32 1, i32 3>
  %7777 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %7776, <2 x i64>* %7777, align 16
  %7778 = shufflevector <2 x i64> %7770, <2 x i64> %7774, <2 x i32> <i32 0, i32 2>
  %7779 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %7778, <2 x i64>* %7779, align 16
  %7780 = shufflevector <2 x i64> %7770, <2 x i64> %7774, <2 x i32> <i32 1, i32 3>
  %7781 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %7780, <2 x i64>* %7781, align 16
  %7782 = shufflevector <4 x i32> %7512, <4 x i32> %7516, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7783 = bitcast <4 x i32> %7782 to <2 x i64>
  %7784 = shufflevector <4 x i32> %7512, <4 x i32> %7516, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7785 = bitcast <4 x i32> %7784 to <2 x i64>
  %7786 = shufflevector <4 x i32> %7520, <4 x i32> %7524, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7787 = bitcast <4 x i32> %7786 to <2 x i64>
  %7788 = shufflevector <4 x i32> %7520, <4 x i32> %7524, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7789 = bitcast <4 x i32> %7788 to <2 x i64>
  %7790 = shufflevector <2 x i64> %7783, <2 x i64> %7787, <2 x i32> <i32 0, i32 2>
  %7791 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %7790, <2 x i64>* %7791, align 16
  %7792 = shufflevector <2 x i64> %7783, <2 x i64> %7787, <2 x i32> <i32 1, i32 3>
  %7793 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %7792, <2 x i64>* %7793, align 16
  %7794 = shufflevector <2 x i64> %7785, <2 x i64> %7789, <2 x i32> <i32 0, i32 2>
  %7795 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %7794, <2 x i64>* %7795, align 16
  %7796 = shufflevector <2 x i64> %7785, <2 x i64> %7789, <2 x i32> <i32 1, i32 3>
  %7797 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %7796, <2 x i64>* %7797, align 16
  %7798 = load <4 x i32>, <4 x i32>* %7544, align 16
  %7799 = shufflevector <4 x i32> %7591, <4 x i32> %7798, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7800 = bitcast <4 x i32> %7799 to <2 x i64>
  %7801 = shufflevector <4 x i32> %7591, <4 x i32> %7798, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7802 = bitcast <4 x i32> %7801 to <2 x i64>
  %7803 = load <4 x i32>, <4 x i32>* %7560, align 16
  %7804 = load <4 x i32>, <4 x i32>* %7576, align 16
  %7805 = shufflevector <4 x i32> %7803, <4 x i32> %7804, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7806 = bitcast <4 x i32> %7805 to <2 x i64>
  %7807 = shufflevector <4 x i32> %7803, <4 x i32> %7804, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7808 = bitcast <4 x i32> %7807 to <2 x i64>
  %7809 = shufflevector <2 x i64> %7800, <2 x i64> %7806, <2 x i32> <i32 0, i32 2>
  %7810 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %7809, <2 x i64>* %7810, align 16
  %7811 = shufflevector <2 x i64> %7800, <2 x i64> %7806, <2 x i32> <i32 1, i32 3>
  %7812 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %7811, <2 x i64>* %7812, align 16
  %7813 = shufflevector <2 x i64> %7802, <2 x i64> %7808, <2 x i32> <i32 0, i32 2>
  %7814 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %7813, <2 x i64>* %7814, align 16
  %7815 = shufflevector <2 x i64> %7802, <2 x i64> %7808, <2 x i32> <i32 1, i32 3>
  %7816 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %7815, <2 x i64>* %7816, align 16
  %7817 = load <4 x i32>, <4 x i32>* %7532, align 16
  %7818 = load <4 x i32>, <4 x i32>* %7548, align 16
  %7819 = shufflevector <4 x i32> %7817, <4 x i32> %7818, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7820 = bitcast <4 x i32> %7819 to <2 x i64>
  %7821 = shufflevector <4 x i32> %7817, <4 x i32> %7818, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7822 = bitcast <4 x i32> %7821 to <2 x i64>
  %7823 = load <4 x i32>, <4 x i32>* %7564, align 16
  %7824 = load <4 x i32>, <4 x i32>* %7580, align 16
  %7825 = shufflevector <4 x i32> %7823, <4 x i32> %7824, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7826 = bitcast <4 x i32> %7825 to <2 x i64>
  %7827 = shufflevector <4 x i32> %7823, <4 x i32> %7824, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7828 = bitcast <4 x i32> %7827 to <2 x i64>
  %7829 = shufflevector <2 x i64> %7820, <2 x i64> %7826, <2 x i32> <i32 0, i32 2>
  %7830 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %7829, <2 x i64>* %7830, align 16
  %7831 = shufflevector <2 x i64> %7820, <2 x i64> %7826, <2 x i32> <i32 1, i32 3>
  %7832 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %7831, <2 x i64>* %7832, align 16
  %7833 = shufflevector <2 x i64> %7822, <2 x i64> %7828, <2 x i32> <i32 0, i32 2>
  %7834 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %7833, <2 x i64>* %7834, align 16
  %7835 = shufflevector <2 x i64> %7822, <2 x i64> %7828, <2 x i32> <i32 1, i32 3>
  %7836 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %7835, <2 x i64>* %7836, align 16
  %7837 = shufflevector <4 x i32> %7513, <4 x i32> %7517, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7838 = bitcast <4 x i32> %7837 to <2 x i64>
  %7839 = shufflevector <4 x i32> %7513, <4 x i32> %7517, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7840 = bitcast <4 x i32> %7839 to <2 x i64>
  %7841 = shufflevector <4 x i32> %7521, <4 x i32> %7525, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7842 = bitcast <4 x i32> %7841 to <2 x i64>
  %7843 = shufflevector <4 x i32> %7521, <4 x i32> %7525, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7844 = bitcast <4 x i32> %7843 to <2 x i64>
  %7845 = shufflevector <2 x i64> %7838, <2 x i64> %7842, <2 x i32> <i32 0, i32 2>
  %7846 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %7845, <2 x i64>* %7846, align 16
  %7847 = shufflevector <2 x i64> %7838, <2 x i64> %7842, <2 x i32> <i32 1, i32 3>
  %7848 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %7847, <2 x i64>* %7848, align 16
  %7849 = shufflevector <2 x i64> %7840, <2 x i64> %7844, <2 x i32> <i32 0, i32 2>
  %7850 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %7849, <2 x i64>* %7850, align 16
  %7851 = shufflevector <2 x i64> %7840, <2 x i64> %7844, <2 x i32> <i32 1, i32 3>
  %7852 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %7851, <2 x i64>* %7852, align 16
  %7853 = shufflevector <4 x i32> %7514, <4 x i32> %7518, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7854 = bitcast <4 x i32> %7853 to <2 x i64>
  %7855 = shufflevector <4 x i32> %7514, <4 x i32> %7518, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7856 = bitcast <4 x i32> %7855 to <2 x i64>
  %7857 = shufflevector <4 x i32> %7522, <4 x i32> %7526, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7858 = bitcast <4 x i32> %7857 to <2 x i64>
  %7859 = shufflevector <4 x i32> %7522, <4 x i32> %7526, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7860 = bitcast <4 x i32> %7859 to <2 x i64>
  %7861 = shufflevector <2 x i64> %7854, <2 x i64> %7858, <2 x i32> <i32 0, i32 2>
  %7862 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %7861, <2 x i64>* %7862, align 16
  %7863 = shufflevector <2 x i64> %7854, <2 x i64> %7858, <2 x i32> <i32 1, i32 3>
  %7864 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %7863, <2 x i64>* %7864, align 16
  %7865 = shufflevector <2 x i64> %7856, <2 x i64> %7860, <2 x i32> <i32 0, i32 2>
  %7866 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %7865, <2 x i64>* %7866, align 16
  %7867 = shufflevector <2 x i64> %7856, <2 x i64> %7860, <2 x i32> <i32 1, i32 3>
  %7868 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %7867, <2 x i64>* %7868, align 16
  %7869 = load <4 x i32>, <4 x i32>* %7536, align 16
  %7870 = load <4 x i32>, <4 x i32>* %7552, align 16
  %7871 = shufflevector <4 x i32> %7869, <4 x i32> %7870, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7872 = bitcast <4 x i32> %7871 to <2 x i64>
  %7873 = shufflevector <4 x i32> %7869, <4 x i32> %7870, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7874 = bitcast <4 x i32> %7873 to <2 x i64>
  %7875 = load <4 x i32>, <4 x i32>* %7568, align 16
  %7876 = load <4 x i32>, <4 x i32>* %7584, align 16
  %7877 = shufflevector <4 x i32> %7875, <4 x i32> %7876, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7878 = bitcast <4 x i32> %7877 to <2 x i64>
  %7879 = shufflevector <4 x i32> %7875, <4 x i32> %7876, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7880 = bitcast <4 x i32> %7879 to <2 x i64>
  %7881 = shufflevector <2 x i64> %7872, <2 x i64> %7878, <2 x i32> <i32 0, i32 2>
  %7882 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %7881, <2 x i64>* %7882, align 16
  %7883 = shufflevector <2 x i64> %7872, <2 x i64> %7878, <2 x i32> <i32 1, i32 3>
  %7884 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %7883, <2 x i64>* %7884, align 16
  %7885 = shufflevector <2 x i64> %7874, <2 x i64> %7880, <2 x i32> <i32 0, i32 2>
  %7886 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %7885, <2 x i64>* %7886, align 16
  %7887 = shufflevector <2 x i64> %7874, <2 x i64> %7880, <2 x i32> <i32 1, i32 3>
  %7888 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %7887, <2 x i64>* %7888, align 16
  %7889 = load <4 x i32>, <4 x i32>* %7540, align 16
  %7890 = load <4 x i32>, <4 x i32>* %7556, align 16
  %7891 = shufflevector <4 x i32> %7889, <4 x i32> %7890, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7892 = bitcast <4 x i32> %7891 to <2 x i64>
  %7893 = shufflevector <4 x i32> %7889, <4 x i32> %7890, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7894 = bitcast <4 x i32> %7893 to <2 x i64>
  %7895 = load <4 x i32>, <4 x i32>* %7572, align 16
  %7896 = load <4 x i32>, <4 x i32>* %7588, align 16
  %7897 = shufflevector <4 x i32> %7895, <4 x i32> %7896, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7898 = bitcast <4 x i32> %7897 to <2 x i64>
  %7899 = shufflevector <4 x i32> %7895, <4 x i32> %7896, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7900 = bitcast <4 x i32> %7899 to <2 x i64>
  %7901 = shufflevector <2 x i64> %7892, <2 x i64> %7898, <2 x i32> <i32 0, i32 2>
  %7902 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %7901, <2 x i64>* %7902, align 16
  %7903 = shufflevector <2 x i64> %7892, <2 x i64> %7898, <2 x i32> <i32 1, i32 3>
  %7904 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %7903, <2 x i64>* %7904, align 16
  %7905 = shufflevector <2 x i64> %7894, <2 x i64> %7900, <2 x i32> <i32 0, i32 2>
  %7906 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %7905, <2 x i64>* %7906, align 16
  %7907 = shufflevector <2 x i64> %7894, <2 x i64> %7900, <2 x i32> <i32 1, i32 3>
  %7908 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %7907, <2 x i64>* %7908, align 16
  %7909 = load <4 x i32>, <4 x i32>* %7608, align 16
  %7910 = load <4 x i32>, <4 x i32>* %7624, align 16
  %7911 = shufflevector <4 x i32> %7909, <4 x i32> %7910, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7912 = bitcast <4 x i32> %7911 to <2 x i64>
  %7913 = shufflevector <4 x i32> %7909, <4 x i32> %7910, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7914 = bitcast <4 x i32> %7913 to <2 x i64>
  %7915 = load <4 x i32>, <4 x i32>* %7640, align 16
  %7916 = load <4 x i32>, <4 x i32>* %7656, align 16
  %7917 = shufflevector <4 x i32> %7915, <4 x i32> %7916, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7918 = bitcast <4 x i32> %7917 to <2 x i64>
  %7919 = shufflevector <4 x i32> %7915, <4 x i32> %7916, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7920 = bitcast <4 x i32> %7919 to <2 x i64>
  %7921 = shufflevector <2 x i64> %7912, <2 x i64> %7918, <2 x i32> <i32 0, i32 2>
  %7922 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %7921, <2 x i64>* %7922, align 16
  %7923 = shufflevector <2 x i64> %7912, <2 x i64> %7918, <2 x i32> <i32 1, i32 3>
  %7924 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %7923, <2 x i64>* %7924, align 16
  %7925 = shufflevector <2 x i64> %7914, <2 x i64> %7920, <2 x i32> <i32 0, i32 2>
  %7926 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %7925, <2 x i64>* %7926, align 16
  %7927 = shufflevector <2 x i64> %7914, <2 x i64> %7920, <2 x i32> <i32 1, i32 3>
  %7928 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %7927, <2 x i64>* %7928, align 16
  %7929 = load <4 x i32>, <4 x i32>* %7612, align 16
  %7930 = load <4 x i32>, <4 x i32>* %7628, align 16
  %7931 = shufflevector <4 x i32> %7929, <4 x i32> %7930, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7932 = bitcast <4 x i32> %7931 to <2 x i64>
  %7933 = shufflevector <4 x i32> %7929, <4 x i32> %7930, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7934 = bitcast <4 x i32> %7933 to <2 x i64>
  %7935 = load <4 x i32>, <4 x i32>* %7644, align 16
  %7936 = load <4 x i32>, <4 x i32>* %7660, align 16
  %7937 = shufflevector <4 x i32> %7935, <4 x i32> %7936, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7938 = bitcast <4 x i32> %7937 to <2 x i64>
  %7939 = shufflevector <4 x i32> %7935, <4 x i32> %7936, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7940 = bitcast <4 x i32> %7939 to <2 x i64>
  %7941 = shufflevector <2 x i64> %7932, <2 x i64> %7938, <2 x i32> <i32 0, i32 2>
  %7942 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %7941, <2 x i64>* %7942, align 16
  %7943 = shufflevector <2 x i64> %7932, <2 x i64> %7938, <2 x i32> <i32 1, i32 3>
  %7944 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %7943, <2 x i64>* %7944, align 16
  %7945 = shufflevector <2 x i64> %7934, <2 x i64> %7940, <2 x i32> <i32 0, i32 2>
  %7946 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %7945, <2 x i64>* %7946, align 16
  %7947 = shufflevector <2 x i64> %7934, <2 x i64> %7940, <2 x i32> <i32 1, i32 3>
  %7948 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %7947, <2 x i64>* %7948, align 16
  %7949 = load <4 x i32>, <4 x i32>* %7688, align 16
  %7950 = load <4 x i32>, <4 x i32>* %7704, align 16
  %7951 = shufflevector <4 x i32> %7949, <4 x i32> %7950, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7952 = bitcast <4 x i32> %7951 to <2 x i64>
  %7953 = shufflevector <4 x i32> %7949, <4 x i32> %7950, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7954 = bitcast <4 x i32> %7953 to <2 x i64>
  %7955 = load <4 x i32>, <4 x i32>* %7720, align 16
  %7956 = load <4 x i32>, <4 x i32>* %7736, align 16
  %7957 = shufflevector <4 x i32> %7955, <4 x i32> %7956, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7958 = bitcast <4 x i32> %7957 to <2 x i64>
  %7959 = shufflevector <4 x i32> %7955, <4 x i32> %7956, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7960 = bitcast <4 x i32> %7959 to <2 x i64>
  %7961 = shufflevector <2 x i64> %7952, <2 x i64> %7958, <2 x i32> <i32 0, i32 2>
  %7962 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %7961, <2 x i64>* %7962, align 16
  %7963 = shufflevector <2 x i64> %7952, <2 x i64> %7958, <2 x i32> <i32 1, i32 3>
  %7964 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %7963, <2 x i64>* %7964, align 16
  %7965 = shufflevector <2 x i64> %7954, <2 x i64> %7960, <2 x i32> <i32 0, i32 2>
  %7966 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %7965, <2 x i64>* %7966, align 16
  %7967 = shufflevector <2 x i64> %7954, <2 x i64> %7960, <2 x i32> <i32 1, i32 3>
  %7968 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %7967, <2 x i64>* %7968, align 16
  %7969 = load <4 x i32>, <4 x i32>* %7692, align 16
  %7970 = load <4 x i32>, <4 x i32>* %7708, align 16
  %7971 = shufflevector <4 x i32> %7969, <4 x i32> %7970, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7972 = bitcast <4 x i32> %7971 to <2 x i64>
  %7973 = shufflevector <4 x i32> %7969, <4 x i32> %7970, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7974 = bitcast <4 x i32> %7973 to <2 x i64>
  %7975 = load <4 x i32>, <4 x i32>* %7724, align 16
  %7976 = load <4 x i32>, <4 x i32>* %7740, align 16
  %7977 = shufflevector <4 x i32> %7975, <4 x i32> %7976, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7978 = bitcast <4 x i32> %7977 to <2 x i64>
  %7979 = shufflevector <4 x i32> %7975, <4 x i32> %7976, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7980 = bitcast <4 x i32> %7979 to <2 x i64>
  %7981 = shufflevector <2 x i64> %7972, <2 x i64> %7978, <2 x i32> <i32 0, i32 2>
  %7982 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %7981, <2 x i64>* %7982, align 16
  %7983 = shufflevector <2 x i64> %7972, <2 x i64> %7978, <2 x i32> <i32 1, i32 3>
  %7984 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %7983, <2 x i64>* %7984, align 16
  %7985 = shufflevector <2 x i64> %7974, <2 x i64> %7980, <2 x i32> <i32 0, i32 2>
  %7986 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %7985, <2 x i64>* %7986, align 16
  %7987 = shufflevector <2 x i64> %7974, <2 x i64> %7980, <2 x i32> <i32 1, i32 3>
  %7988 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %7987, <2 x i64>* %7988, align 16
  %7989 = load <4 x i32>, <4 x i32>* %7616, align 16
  %7990 = load <4 x i32>, <4 x i32>* %7632, align 16
  %7991 = shufflevector <4 x i32> %7989, <4 x i32> %7990, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7992 = bitcast <4 x i32> %7991 to <2 x i64>
  %7993 = shufflevector <4 x i32> %7989, <4 x i32> %7990, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7994 = bitcast <4 x i32> %7993 to <2 x i64>
  %7995 = load <4 x i32>, <4 x i32>* %7648, align 16
  %7996 = load <4 x i32>, <4 x i32>* %7664, align 16
  %7997 = shufflevector <4 x i32> %7995, <4 x i32> %7996, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7998 = bitcast <4 x i32> %7997 to <2 x i64>
  %7999 = shufflevector <4 x i32> %7995, <4 x i32> %7996, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8000 = bitcast <4 x i32> %7999 to <2 x i64>
  %8001 = shufflevector <2 x i64> %7992, <2 x i64> %7998, <2 x i32> <i32 0, i32 2>
  %8002 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %8001, <2 x i64>* %8002, align 16
  %8003 = shufflevector <2 x i64> %7992, <2 x i64> %7998, <2 x i32> <i32 1, i32 3>
  %8004 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %8003, <2 x i64>* %8004, align 16
  %8005 = shufflevector <2 x i64> %7994, <2 x i64> %8000, <2 x i32> <i32 0, i32 2>
  %8006 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %8005, <2 x i64>* %8006, align 16
  %8007 = shufflevector <2 x i64> %7994, <2 x i64> %8000, <2 x i32> <i32 1, i32 3>
  %8008 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %8007, <2 x i64>* %8008, align 16
  %8009 = load <4 x i32>, <4 x i32>* %7620, align 16
  %8010 = load <4 x i32>, <4 x i32>* %7636, align 16
  %8011 = shufflevector <4 x i32> %8009, <4 x i32> %8010, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8012 = bitcast <4 x i32> %8011 to <2 x i64>
  %8013 = shufflevector <4 x i32> %8009, <4 x i32> %8010, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8014 = bitcast <4 x i32> %8013 to <2 x i64>
  %8015 = load <4 x i32>, <4 x i32>* %7652, align 16
  %8016 = load <4 x i32>, <4 x i32>* %7668, align 16
  %8017 = shufflevector <4 x i32> %8015, <4 x i32> %8016, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8018 = bitcast <4 x i32> %8017 to <2 x i64>
  %8019 = shufflevector <4 x i32> %8015, <4 x i32> %8016, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8020 = bitcast <4 x i32> %8019 to <2 x i64>
  %8021 = shufflevector <2 x i64> %8012, <2 x i64> %8018, <2 x i32> <i32 0, i32 2>
  %8022 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %8021, <2 x i64>* %8022, align 16
  %8023 = shufflevector <2 x i64> %8012, <2 x i64> %8018, <2 x i32> <i32 1, i32 3>
  %8024 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %8023, <2 x i64>* %8024, align 16
  %8025 = shufflevector <2 x i64> %8014, <2 x i64> %8020, <2 x i32> <i32 0, i32 2>
  %8026 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %8025, <2 x i64>* %8026, align 16
  %8027 = shufflevector <2 x i64> %8014, <2 x i64> %8020, <2 x i32> <i32 1, i32 3>
  %8028 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %8027, <2 x i64>* %8028, align 16
  %8029 = load <4 x i32>, <4 x i32>* %7696, align 16
  %8030 = load <4 x i32>, <4 x i32>* %7712, align 16
  %8031 = shufflevector <4 x i32> %8029, <4 x i32> %8030, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8032 = bitcast <4 x i32> %8031 to <2 x i64>
  %8033 = shufflevector <4 x i32> %8029, <4 x i32> %8030, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8034 = bitcast <4 x i32> %8033 to <2 x i64>
  %8035 = load <4 x i32>, <4 x i32>* %7728, align 16
  %8036 = load <4 x i32>, <4 x i32>* %7744, align 16
  %8037 = shufflevector <4 x i32> %8035, <4 x i32> %8036, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8038 = bitcast <4 x i32> %8037 to <2 x i64>
  %8039 = shufflevector <4 x i32> %8035, <4 x i32> %8036, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8040 = bitcast <4 x i32> %8039 to <2 x i64>
  %8041 = shufflevector <2 x i64> %8032, <2 x i64> %8038, <2 x i32> <i32 0, i32 2>
  %8042 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %8041, <2 x i64>* %8042, align 16
  %8043 = shufflevector <2 x i64> %8032, <2 x i64> %8038, <2 x i32> <i32 1, i32 3>
  %8044 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %8043, <2 x i64>* %8044, align 16
  %8045 = shufflevector <2 x i64> %8034, <2 x i64> %8040, <2 x i32> <i32 0, i32 2>
  %8046 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %8045, <2 x i64>* %8046, align 16
  %8047 = shufflevector <2 x i64> %8034, <2 x i64> %8040, <2 x i32> <i32 1, i32 3>
  %8048 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %8047, <2 x i64>* %8048, align 16
  %8049 = load <4 x i32>, <4 x i32>* %7700, align 16
  %8050 = load <4 x i32>, <4 x i32>* %7716, align 16
  %8051 = shufflevector <4 x i32> %8049, <4 x i32> %8050, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8052 = bitcast <4 x i32> %8051 to <2 x i64>
  %8053 = shufflevector <4 x i32> %8049, <4 x i32> %8050, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8054 = bitcast <4 x i32> %8053 to <2 x i64>
  %8055 = load <4 x i32>, <4 x i32>* %7732, align 16
  %8056 = load <4 x i32>, <4 x i32>* %7748, align 16
  %8057 = shufflevector <4 x i32> %8055, <4 x i32> %8056, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8058 = bitcast <4 x i32> %8057 to <2 x i64>
  %8059 = shufflevector <4 x i32> %8055, <4 x i32> %8056, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8060 = bitcast <4 x i32> %8059 to <2 x i64>
  %8061 = shufflevector <2 x i64> %8052, <2 x i64> %8058, <2 x i32> <i32 0, i32 2>
  %8062 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %8061, <2 x i64>* %8062, align 16
  %8063 = shufflevector <2 x i64> %8052, <2 x i64> %8058, <2 x i32> <i32 1, i32 3>
  %8064 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %8063, <2 x i64>* %8064, align 16
  %8065 = shufflevector <2 x i64> %8054, <2 x i64> %8060, <2 x i32> <i32 0, i32 2>
  %8066 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %8065, <2 x i64>* %8066, align 16
  %8067 = shufflevector <2 x i64> %8054, <2 x i64> %8060, <2 x i32> <i32 1, i32 3>
  %8068 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %8067, <2 x i64>* %8068, align 16
  %8069 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  %8070 = sext i8 %8069 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %7434, <2 x i64>* nonnull %7437, i32 %8070, i32 4)
  %8071 = load <4 x i32>, <4 x i32>* %7448, align 16
  %8072 = load <4 x i32>, <4 x i32>* %7464, align 16
  %8073 = shufflevector <4 x i32> %8071, <4 x i32> %8072, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8074 = bitcast <4 x i32> %8073 to <2 x i64>
  %8075 = shufflevector <4 x i32> %8071, <4 x i32> %8072, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8076 = bitcast <4 x i32> %8075 to <2 x i64>
  %8077 = load <4 x i32>, <4 x i32>* %7480, align 16
  %8078 = load <4 x i32>, <4 x i32>* %7496, align 16
  %8079 = shufflevector <4 x i32> %8077, <4 x i32> %8078, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8080 = bitcast <4 x i32> %8079 to <2 x i64>
  %8081 = shufflevector <4 x i32> %8077, <4 x i32> %8078, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8082 = bitcast <4 x i32> %8081 to <2 x i64>
  %8083 = shufflevector <2 x i64> %8074, <2 x i64> %8080, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8083, <2 x i64>* %7434, align 16
  %8084 = shufflevector <2 x i64> %8074, <2 x i64> %8080, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8084, <2 x i64>* %7777, align 16
  %8085 = shufflevector <2 x i64> %8076, <2 x i64> %8082, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8085, <2 x i64>* %7779, align 16
  %8086 = shufflevector <2 x i64> %8076, <2 x i64> %8082, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8086, <2 x i64>* %7781, align 16
  %8087 = load <4 x i32>, <4 x i32>* %7452, align 16
  %8088 = load <4 x i32>, <4 x i32>* %7468, align 16
  %8089 = shufflevector <4 x i32> %8087, <4 x i32> %8088, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8090 = bitcast <4 x i32> %8089 to <2 x i64>
  %8091 = shufflevector <4 x i32> %8087, <4 x i32> %8088, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8092 = bitcast <4 x i32> %8091 to <2 x i64>
  %8093 = load <4 x i32>, <4 x i32>* %7484, align 16
  %8094 = load <4 x i32>, <4 x i32>* %7500, align 16
  %8095 = shufflevector <4 x i32> %8093, <4 x i32> %8094, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8096 = bitcast <4 x i32> %8095 to <2 x i64>
  %8097 = shufflevector <4 x i32> %8093, <4 x i32> %8094, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8098 = bitcast <4 x i32> %8097 to <2 x i64>
  %8099 = shufflevector <2 x i64> %8090, <2 x i64> %8096, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8099, <2 x i64>* %7791, align 16
  %8100 = shufflevector <2 x i64> %8090, <2 x i64> %8096, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8100, <2 x i64>* %7793, align 16
  %8101 = shufflevector <2 x i64> %8092, <2 x i64> %8098, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8101, <2 x i64>* %7795, align 16
  %8102 = shufflevector <2 x i64> %8092, <2 x i64> %8098, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8102, <2 x i64>* %7797, align 16
  %8103 = load <4 x i32>, <4 x i32>* %7528, align 16
  %8104 = load <4 x i32>, <4 x i32>* %7544, align 16
  %8105 = shufflevector <4 x i32> %8103, <4 x i32> %8104, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8106 = bitcast <4 x i32> %8105 to <2 x i64>
  %8107 = shufflevector <4 x i32> %8103, <4 x i32> %8104, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8108 = bitcast <4 x i32> %8107 to <2 x i64>
  %8109 = load <4 x i32>, <4 x i32>* %7560, align 16
  %8110 = load <4 x i32>, <4 x i32>* %7576, align 16
  %8111 = shufflevector <4 x i32> %8109, <4 x i32> %8110, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8112 = bitcast <4 x i32> %8111 to <2 x i64>
  %8113 = shufflevector <4 x i32> %8109, <4 x i32> %8110, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8114 = bitcast <4 x i32> %8113 to <2 x i64>
  %8115 = shufflevector <2 x i64> %8106, <2 x i64> %8112, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8115, <2 x i64>* %7810, align 16
  %8116 = shufflevector <2 x i64> %8106, <2 x i64> %8112, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8116, <2 x i64>* %7812, align 16
  %8117 = shufflevector <2 x i64> %8108, <2 x i64> %8114, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8117, <2 x i64>* %7814, align 16
  %8118 = shufflevector <2 x i64> %8108, <2 x i64> %8114, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8118, <2 x i64>* %7816, align 16
  %8119 = load <4 x i32>, <4 x i32>* %7532, align 16
  %8120 = load <4 x i32>, <4 x i32>* %7548, align 16
  %8121 = shufflevector <4 x i32> %8119, <4 x i32> %8120, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8122 = bitcast <4 x i32> %8121 to <2 x i64>
  %8123 = shufflevector <4 x i32> %8119, <4 x i32> %8120, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8124 = bitcast <4 x i32> %8123 to <2 x i64>
  %8125 = load <4 x i32>, <4 x i32>* %7564, align 16
  %8126 = load <4 x i32>, <4 x i32>* %7580, align 16
  %8127 = shufflevector <4 x i32> %8125, <4 x i32> %8126, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8128 = bitcast <4 x i32> %8127 to <2 x i64>
  %8129 = shufflevector <4 x i32> %8125, <4 x i32> %8126, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8130 = bitcast <4 x i32> %8129 to <2 x i64>
  %8131 = shufflevector <2 x i64> %8122, <2 x i64> %8128, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8131, <2 x i64>* %7830, align 16
  %8132 = shufflevector <2 x i64> %8122, <2 x i64> %8128, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8132, <2 x i64>* %7832, align 16
  %8133 = shufflevector <2 x i64> %8124, <2 x i64> %8130, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8133, <2 x i64>* %7834, align 16
  %8134 = shufflevector <2 x i64> %8124, <2 x i64> %8130, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8134, <2 x i64>* %7836, align 16
  %8135 = load <4 x i32>, <4 x i32>* %7456, align 16
  %8136 = load <4 x i32>, <4 x i32>* %7472, align 16
  %8137 = shufflevector <4 x i32> %8135, <4 x i32> %8136, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8138 = bitcast <4 x i32> %8137 to <2 x i64>
  %8139 = shufflevector <4 x i32> %8135, <4 x i32> %8136, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8140 = bitcast <4 x i32> %8139 to <2 x i64>
  %8141 = load <4 x i32>, <4 x i32>* %7488, align 16
  %8142 = load <4 x i32>, <4 x i32>* %7504, align 16
  %8143 = shufflevector <4 x i32> %8141, <4 x i32> %8142, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8144 = bitcast <4 x i32> %8143 to <2 x i64>
  %8145 = shufflevector <4 x i32> %8141, <4 x i32> %8142, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8146 = bitcast <4 x i32> %8145 to <2 x i64>
  %8147 = shufflevector <2 x i64> %8138, <2 x i64> %8144, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8147, <2 x i64>* %7846, align 16
  %8148 = shufflevector <2 x i64> %8138, <2 x i64> %8144, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8148, <2 x i64>* %7848, align 16
  %8149 = shufflevector <2 x i64> %8140, <2 x i64> %8146, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8149, <2 x i64>* %7850, align 16
  %8150 = shufflevector <2 x i64> %8140, <2 x i64> %8146, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8150, <2 x i64>* %7852, align 16
  %8151 = load <4 x i32>, <4 x i32>* %7460, align 16
  %8152 = load <4 x i32>, <4 x i32>* %7476, align 16
  %8153 = shufflevector <4 x i32> %8151, <4 x i32> %8152, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8154 = bitcast <4 x i32> %8153 to <2 x i64>
  %8155 = shufflevector <4 x i32> %8151, <4 x i32> %8152, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8156 = bitcast <4 x i32> %8155 to <2 x i64>
  %8157 = load <4 x i32>, <4 x i32>* %7492, align 16
  %8158 = load <4 x i32>, <4 x i32>* %7508, align 16
  %8159 = shufflevector <4 x i32> %8157, <4 x i32> %8158, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8160 = bitcast <4 x i32> %8159 to <2 x i64>
  %8161 = shufflevector <4 x i32> %8157, <4 x i32> %8158, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8162 = bitcast <4 x i32> %8161 to <2 x i64>
  %8163 = shufflevector <2 x i64> %8154, <2 x i64> %8160, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8163, <2 x i64>* %7862, align 16
  %8164 = shufflevector <2 x i64> %8154, <2 x i64> %8160, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8164, <2 x i64>* %7864, align 16
  %8165 = shufflevector <2 x i64> %8156, <2 x i64> %8162, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8165, <2 x i64>* %7866, align 16
  %8166 = shufflevector <2 x i64> %8156, <2 x i64> %8162, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8166, <2 x i64>* %7868, align 16
  %8167 = load <4 x i32>, <4 x i32>* %7536, align 16
  %8168 = load <4 x i32>, <4 x i32>* %7552, align 16
  %8169 = shufflevector <4 x i32> %8167, <4 x i32> %8168, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8170 = bitcast <4 x i32> %8169 to <2 x i64>
  %8171 = shufflevector <4 x i32> %8167, <4 x i32> %8168, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8172 = bitcast <4 x i32> %8171 to <2 x i64>
  %8173 = load <4 x i32>, <4 x i32>* %7568, align 16
  %8174 = load <4 x i32>, <4 x i32>* %7584, align 16
  %8175 = shufflevector <4 x i32> %8173, <4 x i32> %8174, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8176 = bitcast <4 x i32> %8175 to <2 x i64>
  %8177 = shufflevector <4 x i32> %8173, <4 x i32> %8174, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8178 = bitcast <4 x i32> %8177 to <2 x i64>
  %8179 = shufflevector <2 x i64> %8170, <2 x i64> %8176, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8179, <2 x i64>* %7882, align 16
  %8180 = shufflevector <2 x i64> %8170, <2 x i64> %8176, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8180, <2 x i64>* %7884, align 16
  %8181 = shufflevector <2 x i64> %8172, <2 x i64> %8178, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8181, <2 x i64>* %7886, align 16
  %8182 = shufflevector <2 x i64> %8172, <2 x i64> %8178, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8182, <2 x i64>* %7888, align 16
  %8183 = load <4 x i32>, <4 x i32>* %7540, align 16
  %8184 = load <4 x i32>, <4 x i32>* %7556, align 16
  %8185 = shufflevector <4 x i32> %8183, <4 x i32> %8184, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8186 = bitcast <4 x i32> %8185 to <2 x i64>
  %8187 = shufflevector <4 x i32> %8183, <4 x i32> %8184, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8188 = bitcast <4 x i32> %8187 to <2 x i64>
  %8189 = load <4 x i32>, <4 x i32>* %7572, align 16
  %8190 = load <4 x i32>, <4 x i32>* %7588, align 16
  %8191 = shufflevector <4 x i32> %8189, <4 x i32> %8190, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8192 = bitcast <4 x i32> %8191 to <2 x i64>
  %8193 = shufflevector <4 x i32> %8189, <4 x i32> %8190, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8194 = bitcast <4 x i32> %8193 to <2 x i64>
  %8195 = shufflevector <2 x i64> %8186, <2 x i64> %8192, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8195, <2 x i64>* %7902, align 16
  %8196 = shufflevector <2 x i64> %8186, <2 x i64> %8192, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8196, <2 x i64>* %7904, align 16
  %8197 = shufflevector <2 x i64> %8188, <2 x i64> %8194, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8197, <2 x i64>* %7906, align 16
  %8198 = shufflevector <2 x i64> %8188, <2 x i64> %8194, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8198, <2 x i64>* %7908, align 16
  %8199 = load <4 x i32>, <4 x i32>* %7608, align 16
  %8200 = load <4 x i32>, <4 x i32>* %7624, align 16
  %8201 = shufflevector <4 x i32> %8199, <4 x i32> %8200, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8202 = bitcast <4 x i32> %8201 to <2 x i64>
  %8203 = shufflevector <4 x i32> %8199, <4 x i32> %8200, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8204 = bitcast <4 x i32> %8203 to <2 x i64>
  %8205 = load <4 x i32>, <4 x i32>* %7640, align 16
  %8206 = load <4 x i32>, <4 x i32>* %7656, align 16
  %8207 = shufflevector <4 x i32> %8205, <4 x i32> %8206, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8208 = bitcast <4 x i32> %8207 to <2 x i64>
  %8209 = shufflevector <4 x i32> %8205, <4 x i32> %8206, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8210 = bitcast <4 x i32> %8209 to <2 x i64>
  %8211 = shufflevector <2 x i64> %8202, <2 x i64> %8208, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8211, <2 x i64>* %7922, align 16
  %8212 = shufflevector <2 x i64> %8202, <2 x i64> %8208, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8212, <2 x i64>* %7924, align 16
  %8213 = shufflevector <2 x i64> %8204, <2 x i64> %8210, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8213, <2 x i64>* %7926, align 16
  %8214 = shufflevector <2 x i64> %8204, <2 x i64> %8210, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8214, <2 x i64>* %7928, align 16
  %8215 = load <4 x i32>, <4 x i32>* %7612, align 16
  %8216 = load <4 x i32>, <4 x i32>* %7628, align 16
  %8217 = shufflevector <4 x i32> %8215, <4 x i32> %8216, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8218 = bitcast <4 x i32> %8217 to <2 x i64>
  %8219 = shufflevector <4 x i32> %8215, <4 x i32> %8216, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8220 = bitcast <4 x i32> %8219 to <2 x i64>
  %8221 = load <4 x i32>, <4 x i32>* %7644, align 16
  %8222 = load <4 x i32>, <4 x i32>* %7660, align 16
  %8223 = shufflevector <4 x i32> %8221, <4 x i32> %8222, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8224 = bitcast <4 x i32> %8223 to <2 x i64>
  %8225 = shufflevector <4 x i32> %8221, <4 x i32> %8222, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8226 = bitcast <4 x i32> %8225 to <2 x i64>
  %8227 = shufflevector <2 x i64> %8218, <2 x i64> %8224, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8227, <2 x i64>* %7942, align 16
  %8228 = shufflevector <2 x i64> %8218, <2 x i64> %8224, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8228, <2 x i64>* %7944, align 16
  %8229 = shufflevector <2 x i64> %8220, <2 x i64> %8226, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8229, <2 x i64>* %7946, align 16
  %8230 = shufflevector <2 x i64> %8220, <2 x i64> %8226, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8230, <2 x i64>* %7948, align 16
  %8231 = load <4 x i32>, <4 x i32>* %7688, align 16
  %8232 = load <4 x i32>, <4 x i32>* %7704, align 16
  %8233 = shufflevector <4 x i32> %8231, <4 x i32> %8232, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8234 = bitcast <4 x i32> %8233 to <2 x i64>
  %8235 = shufflevector <4 x i32> %8231, <4 x i32> %8232, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8236 = bitcast <4 x i32> %8235 to <2 x i64>
  %8237 = load <4 x i32>, <4 x i32>* %7720, align 16
  %8238 = load <4 x i32>, <4 x i32>* %7736, align 16
  %8239 = shufflevector <4 x i32> %8237, <4 x i32> %8238, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8240 = bitcast <4 x i32> %8239 to <2 x i64>
  %8241 = shufflevector <4 x i32> %8237, <4 x i32> %8238, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8242 = bitcast <4 x i32> %8241 to <2 x i64>
  %8243 = shufflevector <2 x i64> %8234, <2 x i64> %8240, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8243, <2 x i64>* %7962, align 16
  %8244 = shufflevector <2 x i64> %8234, <2 x i64> %8240, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8244, <2 x i64>* %7964, align 16
  %8245 = shufflevector <2 x i64> %8236, <2 x i64> %8242, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8245, <2 x i64>* %7966, align 16
  %8246 = shufflevector <2 x i64> %8236, <2 x i64> %8242, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8246, <2 x i64>* %7968, align 16
  %8247 = load <4 x i32>, <4 x i32>* %7692, align 16
  %8248 = load <4 x i32>, <4 x i32>* %7708, align 16
  %8249 = shufflevector <4 x i32> %8247, <4 x i32> %8248, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8250 = bitcast <4 x i32> %8249 to <2 x i64>
  %8251 = shufflevector <4 x i32> %8247, <4 x i32> %8248, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8252 = bitcast <4 x i32> %8251 to <2 x i64>
  %8253 = load <4 x i32>, <4 x i32>* %7724, align 16
  %8254 = load <4 x i32>, <4 x i32>* %7740, align 16
  %8255 = shufflevector <4 x i32> %8253, <4 x i32> %8254, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8256 = bitcast <4 x i32> %8255 to <2 x i64>
  %8257 = shufflevector <4 x i32> %8253, <4 x i32> %8254, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8258 = bitcast <4 x i32> %8257 to <2 x i64>
  %8259 = shufflevector <2 x i64> %8250, <2 x i64> %8256, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8259, <2 x i64>* %7982, align 16
  %8260 = shufflevector <2 x i64> %8250, <2 x i64> %8256, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8260, <2 x i64>* %7984, align 16
  %8261 = shufflevector <2 x i64> %8252, <2 x i64> %8258, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8261, <2 x i64>* %7986, align 16
  %8262 = shufflevector <2 x i64> %8252, <2 x i64> %8258, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8262, <2 x i64>* %7988, align 16
  %8263 = load <4 x i32>, <4 x i32>* %7616, align 16
  %8264 = load <4 x i32>, <4 x i32>* %7632, align 16
  %8265 = shufflevector <4 x i32> %8263, <4 x i32> %8264, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8266 = bitcast <4 x i32> %8265 to <2 x i64>
  %8267 = shufflevector <4 x i32> %8263, <4 x i32> %8264, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8268 = bitcast <4 x i32> %8267 to <2 x i64>
  %8269 = load <4 x i32>, <4 x i32>* %7648, align 16
  %8270 = load <4 x i32>, <4 x i32>* %7664, align 16
  %8271 = shufflevector <4 x i32> %8269, <4 x i32> %8270, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8272 = bitcast <4 x i32> %8271 to <2 x i64>
  %8273 = shufflevector <4 x i32> %8269, <4 x i32> %8270, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8274 = bitcast <4 x i32> %8273 to <2 x i64>
  %8275 = shufflevector <2 x i64> %8266, <2 x i64> %8272, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8275, <2 x i64>* %8002, align 16
  %8276 = shufflevector <2 x i64> %8266, <2 x i64> %8272, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8276, <2 x i64>* %8004, align 16
  %8277 = shufflevector <2 x i64> %8268, <2 x i64> %8274, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8277, <2 x i64>* %8006, align 16
  %8278 = shufflevector <2 x i64> %8268, <2 x i64> %8274, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8278, <2 x i64>* %8008, align 16
  %8279 = load <4 x i32>, <4 x i32>* %7620, align 16
  %8280 = load <4 x i32>, <4 x i32>* %7636, align 16
  %8281 = shufflevector <4 x i32> %8279, <4 x i32> %8280, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8282 = bitcast <4 x i32> %8281 to <2 x i64>
  %8283 = shufflevector <4 x i32> %8279, <4 x i32> %8280, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8284 = bitcast <4 x i32> %8283 to <2 x i64>
  %8285 = load <4 x i32>, <4 x i32>* %7652, align 16
  %8286 = load <4 x i32>, <4 x i32>* %7668, align 16
  %8287 = shufflevector <4 x i32> %8285, <4 x i32> %8286, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8288 = bitcast <4 x i32> %8287 to <2 x i64>
  %8289 = shufflevector <4 x i32> %8285, <4 x i32> %8286, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8290 = bitcast <4 x i32> %8289 to <2 x i64>
  %8291 = shufflevector <2 x i64> %8282, <2 x i64> %8288, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8291, <2 x i64>* %8022, align 16
  %8292 = shufflevector <2 x i64> %8282, <2 x i64> %8288, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8292, <2 x i64>* %8024, align 16
  %8293 = shufflevector <2 x i64> %8284, <2 x i64> %8290, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8293, <2 x i64>* %8026, align 16
  %8294 = shufflevector <2 x i64> %8284, <2 x i64> %8290, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8294, <2 x i64>* %8028, align 16
  %8295 = load <4 x i32>, <4 x i32>* %7696, align 16
  %8296 = load <4 x i32>, <4 x i32>* %7712, align 16
  %8297 = shufflevector <4 x i32> %8295, <4 x i32> %8296, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8298 = bitcast <4 x i32> %8297 to <2 x i64>
  %8299 = shufflevector <4 x i32> %8295, <4 x i32> %8296, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8300 = bitcast <4 x i32> %8299 to <2 x i64>
  %8301 = load <4 x i32>, <4 x i32>* %7728, align 16
  %8302 = load <4 x i32>, <4 x i32>* %7744, align 16
  %8303 = shufflevector <4 x i32> %8301, <4 x i32> %8302, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8304 = bitcast <4 x i32> %8303 to <2 x i64>
  %8305 = shufflevector <4 x i32> %8301, <4 x i32> %8302, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8306 = bitcast <4 x i32> %8305 to <2 x i64>
  %8307 = shufflevector <2 x i64> %8298, <2 x i64> %8304, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8307, <2 x i64>* %8042, align 16
  %8308 = shufflevector <2 x i64> %8298, <2 x i64> %8304, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8308, <2 x i64>* %8044, align 16
  %8309 = shufflevector <2 x i64> %8300, <2 x i64> %8306, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8309, <2 x i64>* %8046, align 16
  %8310 = shufflevector <2 x i64> %8300, <2 x i64> %8306, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8310, <2 x i64>* %8048, align 16
  %8311 = load <4 x i32>, <4 x i32>* %7700, align 16
  %8312 = load <4 x i32>, <4 x i32>* %7716, align 16
  %8313 = shufflevector <4 x i32> %8311, <4 x i32> %8312, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8314 = bitcast <4 x i32> %8313 to <2 x i64>
  %8315 = shufflevector <4 x i32> %8311, <4 x i32> %8312, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8316 = bitcast <4 x i32> %8315 to <2 x i64>
  %8317 = load <4 x i32>, <4 x i32>* %7732, align 16
  %8318 = load <4 x i32>, <4 x i32>* %7748, align 16
  %8319 = shufflevector <4 x i32> %8317, <4 x i32> %8318, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8320 = bitcast <4 x i32> %8319 to <2 x i64>
  %8321 = shufflevector <4 x i32> %8317, <4 x i32> %8318, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8322 = bitcast <4 x i32> %8321 to <2 x i64>
  %8323 = shufflevector <2 x i64> %8314, <2 x i64> %8320, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8323, <2 x i64>* %8062, align 16
  %8324 = shufflevector <2 x i64> %8314, <2 x i64> %8320, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8324, <2 x i64>* %8064, align 16
  %8325 = shufflevector <2 x i64> %8316, <2 x i64> %8322, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8325, <2 x i64>* %8066, align 16
  %8326 = shufflevector <2 x i64> %8316, <2 x i64> %8322, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %8326, <2 x i64>* %8068, align 16
  %8327 = bitcast i32* %1 to <2 x i64>*
  %8328 = load <2 x i64>, <2 x i64>* %7434, align 16
  store <2 x i64> %8328, <2 x i64>* %8327, align 16
  %8329 = getelementptr inbounds i32, i32* %1, i64 4
  %8330 = bitcast i32* %8329 to <2 x i64>*
  %8331 = load <2 x i64>, <2 x i64>* %7810, align 16
  store <2 x i64> %8331, <2 x i64>* %8330, align 16
  %8332 = getelementptr inbounds i32, i32* %1, i64 8
  %8333 = bitcast i32* %8332 to <2 x i64>*
  %8334 = load <2 x i64>, <2 x i64>* %7922, align 16
  store <2 x i64> %8334, <2 x i64>* %8333, align 16
  %8335 = getelementptr inbounds i32, i32* %1, i64 12
  %8336 = bitcast i32* %8335 to <2 x i64>*
  %8337 = load <2 x i64>, <2 x i64>* %7962, align 16
  store <2 x i64> %8337, <2 x i64>* %8336, align 16
  %8338 = getelementptr inbounds i32, i32* %1, i64 16
  %8339 = bitcast i32* %8338 to <2 x i64>*
  %8340 = load <2 x i64>, <2 x i64>* %7777, align 16
  store <2 x i64> %8340, <2 x i64>* %8339, align 16
  %8341 = getelementptr inbounds i32, i32* %1, i64 20
  %8342 = bitcast i32* %8341 to <2 x i64>*
  %8343 = load <2 x i64>, <2 x i64>* %7812, align 16
  store <2 x i64> %8343, <2 x i64>* %8342, align 16
  %8344 = getelementptr inbounds i32, i32* %1, i64 24
  %8345 = bitcast i32* %8344 to <2 x i64>*
  %8346 = load <2 x i64>, <2 x i64>* %7924, align 16
  store <2 x i64> %8346, <2 x i64>* %8345, align 16
  %8347 = getelementptr inbounds i32, i32* %1, i64 28
  %8348 = bitcast i32* %8347 to <2 x i64>*
  %8349 = load <2 x i64>, <2 x i64>* %7964, align 16
  store <2 x i64> %8349, <2 x i64>* %8348, align 16
  %8350 = getelementptr inbounds i32, i32* %1, i64 32
  %8351 = bitcast i32* %8350 to <2 x i64>*
  %8352 = load <2 x i64>, <2 x i64>* %7779, align 16
  store <2 x i64> %8352, <2 x i64>* %8351, align 16
  %8353 = getelementptr inbounds i32, i32* %1, i64 36
  %8354 = bitcast i32* %8353 to <2 x i64>*
  %8355 = load <2 x i64>, <2 x i64>* %7814, align 16
  store <2 x i64> %8355, <2 x i64>* %8354, align 16
  %8356 = getelementptr inbounds i32, i32* %1, i64 40
  %8357 = bitcast i32* %8356 to <2 x i64>*
  %8358 = load <2 x i64>, <2 x i64>* %7926, align 16
  store <2 x i64> %8358, <2 x i64>* %8357, align 16
  %8359 = getelementptr inbounds i32, i32* %1, i64 44
  %8360 = bitcast i32* %8359 to <2 x i64>*
  %8361 = load <2 x i64>, <2 x i64>* %7966, align 16
  store <2 x i64> %8361, <2 x i64>* %8360, align 16
  %8362 = getelementptr inbounds i32, i32* %1, i64 48
  %8363 = bitcast i32* %8362 to <2 x i64>*
  %8364 = load <2 x i64>, <2 x i64>* %7781, align 16
  store <2 x i64> %8364, <2 x i64>* %8363, align 16
  %8365 = getelementptr inbounds i32, i32* %1, i64 52
  %8366 = bitcast i32* %8365 to <2 x i64>*
  %8367 = load <2 x i64>, <2 x i64>* %7816, align 16
  store <2 x i64> %8367, <2 x i64>* %8366, align 16
  %8368 = getelementptr inbounds i32, i32* %1, i64 56
  %8369 = bitcast i32* %8368 to <2 x i64>*
  %8370 = load <2 x i64>, <2 x i64>* %7928, align 16
  store <2 x i64> %8370, <2 x i64>* %8369, align 16
  %8371 = getelementptr inbounds i32, i32* %1, i64 60
  %8372 = bitcast i32* %8371 to <2 x i64>*
  %8373 = load <2 x i64>, <2 x i64>* %7968, align 16
  store <2 x i64> %8373, <2 x i64>* %8372, align 16
  %8374 = getelementptr inbounds i32, i32* %1, i64 64
  %8375 = bitcast i32* %8374 to <2 x i64>*
  %8376 = load <2 x i64>, <2 x i64>* %7791, align 16
  store <2 x i64> %8376, <2 x i64>* %8375, align 16
  %8377 = getelementptr inbounds i32, i32* %1, i64 68
  %8378 = bitcast i32* %8377 to <2 x i64>*
  %8379 = load <2 x i64>, <2 x i64>* %7830, align 16
  store <2 x i64> %8379, <2 x i64>* %8378, align 16
  %8380 = getelementptr inbounds i32, i32* %1, i64 72
  %8381 = bitcast i32* %8380 to <2 x i64>*
  %8382 = load <2 x i64>, <2 x i64>* %7942, align 16
  store <2 x i64> %8382, <2 x i64>* %8381, align 16
  %8383 = getelementptr inbounds i32, i32* %1, i64 76
  %8384 = bitcast i32* %8383 to <2 x i64>*
  %8385 = load <2 x i64>, <2 x i64>* %7982, align 16
  store <2 x i64> %8385, <2 x i64>* %8384, align 16
  %8386 = getelementptr inbounds i32, i32* %1, i64 80
  %8387 = bitcast i32* %8386 to <2 x i64>*
  %8388 = load <2 x i64>, <2 x i64>* %7793, align 16
  store <2 x i64> %8388, <2 x i64>* %8387, align 16
  %8389 = getelementptr inbounds i32, i32* %1, i64 84
  %8390 = bitcast i32* %8389 to <2 x i64>*
  %8391 = load <2 x i64>, <2 x i64>* %7832, align 16
  store <2 x i64> %8391, <2 x i64>* %8390, align 16
  %8392 = getelementptr inbounds i32, i32* %1, i64 88
  %8393 = bitcast i32* %8392 to <2 x i64>*
  %8394 = load <2 x i64>, <2 x i64>* %7944, align 16
  store <2 x i64> %8394, <2 x i64>* %8393, align 16
  %8395 = getelementptr inbounds i32, i32* %1, i64 92
  %8396 = bitcast i32* %8395 to <2 x i64>*
  %8397 = load <2 x i64>, <2 x i64>* %7984, align 16
  store <2 x i64> %8397, <2 x i64>* %8396, align 16
  %8398 = getelementptr inbounds i32, i32* %1, i64 96
  %8399 = bitcast i32* %8398 to <2 x i64>*
  %8400 = load <2 x i64>, <2 x i64>* %7795, align 16
  store <2 x i64> %8400, <2 x i64>* %8399, align 16
  %8401 = getelementptr inbounds i32, i32* %1, i64 100
  %8402 = bitcast i32* %8401 to <2 x i64>*
  %8403 = load <2 x i64>, <2 x i64>* %7834, align 16
  store <2 x i64> %8403, <2 x i64>* %8402, align 16
  %8404 = getelementptr inbounds i32, i32* %1, i64 104
  %8405 = bitcast i32* %8404 to <2 x i64>*
  %8406 = load <2 x i64>, <2 x i64>* %7946, align 16
  store <2 x i64> %8406, <2 x i64>* %8405, align 16
  %8407 = getelementptr inbounds i32, i32* %1, i64 108
  %8408 = bitcast i32* %8407 to <2 x i64>*
  %8409 = load <2 x i64>, <2 x i64>* %7986, align 16
  store <2 x i64> %8409, <2 x i64>* %8408, align 16
  %8410 = getelementptr inbounds i32, i32* %1, i64 112
  %8411 = bitcast i32* %8410 to <2 x i64>*
  %8412 = load <2 x i64>, <2 x i64>* %7797, align 16
  store <2 x i64> %8412, <2 x i64>* %8411, align 16
  %8413 = getelementptr inbounds i32, i32* %1, i64 116
  %8414 = bitcast i32* %8413 to <2 x i64>*
  %8415 = load <2 x i64>, <2 x i64>* %7836, align 16
  store <2 x i64> %8415, <2 x i64>* %8414, align 16
  %8416 = getelementptr inbounds i32, i32* %1, i64 120
  %8417 = bitcast i32* %8416 to <2 x i64>*
  %8418 = load <2 x i64>, <2 x i64>* %7948, align 16
  store <2 x i64> %8418, <2 x i64>* %8417, align 16
  %8419 = getelementptr inbounds i32, i32* %1, i64 124
  %8420 = bitcast i32* %8419 to <2 x i64>*
  %8421 = load <2 x i64>, <2 x i64>* %7988, align 16
  store <2 x i64> %8421, <2 x i64>* %8420, align 16
  %8422 = getelementptr inbounds i32, i32* %1, i64 128
  %8423 = bitcast i32* %8422 to <2 x i64>*
  %8424 = load <2 x i64>, <2 x i64>* %7846, align 16
  store <2 x i64> %8424, <2 x i64>* %8423, align 16
  %8425 = getelementptr inbounds i32, i32* %1, i64 132
  %8426 = bitcast i32* %8425 to <2 x i64>*
  %8427 = load <2 x i64>, <2 x i64>* %7882, align 16
  store <2 x i64> %8427, <2 x i64>* %8426, align 16
  %8428 = getelementptr inbounds i32, i32* %1, i64 136
  %8429 = bitcast i32* %8428 to <2 x i64>*
  %8430 = load <2 x i64>, <2 x i64>* %8002, align 16
  store <2 x i64> %8430, <2 x i64>* %8429, align 16
  %8431 = getelementptr inbounds i32, i32* %1, i64 140
  %8432 = bitcast i32* %8431 to <2 x i64>*
  %8433 = load <2 x i64>, <2 x i64>* %8042, align 16
  store <2 x i64> %8433, <2 x i64>* %8432, align 16
  %8434 = getelementptr inbounds i32, i32* %1, i64 144
  %8435 = bitcast i32* %8434 to <2 x i64>*
  %8436 = load <2 x i64>, <2 x i64>* %7848, align 16
  store <2 x i64> %8436, <2 x i64>* %8435, align 16
  %8437 = getelementptr inbounds i32, i32* %1, i64 148
  %8438 = bitcast i32* %8437 to <2 x i64>*
  %8439 = load <2 x i64>, <2 x i64>* %7884, align 16
  store <2 x i64> %8439, <2 x i64>* %8438, align 16
  %8440 = getelementptr inbounds i32, i32* %1, i64 152
  %8441 = bitcast i32* %8440 to <2 x i64>*
  %8442 = load <2 x i64>, <2 x i64>* %8004, align 16
  store <2 x i64> %8442, <2 x i64>* %8441, align 16
  %8443 = getelementptr inbounds i32, i32* %1, i64 156
  %8444 = bitcast i32* %8443 to <2 x i64>*
  %8445 = load <2 x i64>, <2 x i64>* %8044, align 16
  store <2 x i64> %8445, <2 x i64>* %8444, align 16
  %8446 = getelementptr inbounds i32, i32* %1, i64 160
  %8447 = bitcast i32* %8446 to <2 x i64>*
  %8448 = load <2 x i64>, <2 x i64>* %7850, align 16
  store <2 x i64> %8448, <2 x i64>* %8447, align 16
  %8449 = getelementptr inbounds i32, i32* %1, i64 164
  %8450 = bitcast i32* %8449 to <2 x i64>*
  %8451 = load <2 x i64>, <2 x i64>* %7886, align 16
  store <2 x i64> %8451, <2 x i64>* %8450, align 16
  %8452 = getelementptr inbounds i32, i32* %1, i64 168
  %8453 = bitcast i32* %8452 to <2 x i64>*
  %8454 = load <2 x i64>, <2 x i64>* %8006, align 16
  store <2 x i64> %8454, <2 x i64>* %8453, align 16
  %8455 = getelementptr inbounds i32, i32* %1, i64 172
  %8456 = bitcast i32* %8455 to <2 x i64>*
  %8457 = load <2 x i64>, <2 x i64>* %8046, align 16
  store <2 x i64> %8457, <2 x i64>* %8456, align 16
  %8458 = getelementptr inbounds i32, i32* %1, i64 176
  %8459 = bitcast i32* %8458 to <2 x i64>*
  %8460 = load <2 x i64>, <2 x i64>* %7852, align 16
  store <2 x i64> %8460, <2 x i64>* %8459, align 16
  %8461 = getelementptr inbounds i32, i32* %1, i64 180
  %8462 = bitcast i32* %8461 to <2 x i64>*
  %8463 = load <2 x i64>, <2 x i64>* %7888, align 16
  store <2 x i64> %8463, <2 x i64>* %8462, align 16
  %8464 = getelementptr inbounds i32, i32* %1, i64 184
  %8465 = bitcast i32* %8464 to <2 x i64>*
  %8466 = load <2 x i64>, <2 x i64>* %8008, align 16
  store <2 x i64> %8466, <2 x i64>* %8465, align 16
  %8467 = getelementptr inbounds i32, i32* %1, i64 188
  %8468 = bitcast i32* %8467 to <2 x i64>*
  %8469 = load <2 x i64>, <2 x i64>* %8048, align 16
  store <2 x i64> %8469, <2 x i64>* %8468, align 16
  %8470 = getelementptr inbounds i32, i32* %1, i64 192
  %8471 = bitcast i32* %8470 to <2 x i64>*
  %8472 = load <2 x i64>, <2 x i64>* %7862, align 16
  store <2 x i64> %8472, <2 x i64>* %8471, align 16
  %8473 = getelementptr inbounds i32, i32* %1, i64 196
  %8474 = bitcast i32* %8473 to <2 x i64>*
  %8475 = load <2 x i64>, <2 x i64>* %7902, align 16
  store <2 x i64> %8475, <2 x i64>* %8474, align 16
  %8476 = getelementptr inbounds i32, i32* %1, i64 200
  %8477 = bitcast i32* %8476 to <2 x i64>*
  %8478 = load <2 x i64>, <2 x i64>* %8022, align 16
  store <2 x i64> %8478, <2 x i64>* %8477, align 16
  %8479 = getelementptr inbounds i32, i32* %1, i64 204
  %8480 = bitcast i32* %8479 to <2 x i64>*
  %8481 = load <2 x i64>, <2 x i64>* %8062, align 16
  store <2 x i64> %8481, <2 x i64>* %8480, align 16
  %8482 = getelementptr inbounds i32, i32* %1, i64 208
  %8483 = bitcast i32* %8482 to <2 x i64>*
  %8484 = load <2 x i64>, <2 x i64>* %7864, align 16
  store <2 x i64> %8484, <2 x i64>* %8483, align 16
  %8485 = getelementptr inbounds i32, i32* %1, i64 212
  %8486 = bitcast i32* %8485 to <2 x i64>*
  %8487 = load <2 x i64>, <2 x i64>* %7904, align 16
  store <2 x i64> %8487, <2 x i64>* %8486, align 16
  %8488 = getelementptr inbounds i32, i32* %1, i64 216
  %8489 = bitcast i32* %8488 to <2 x i64>*
  %8490 = load <2 x i64>, <2 x i64>* %8024, align 16
  store <2 x i64> %8490, <2 x i64>* %8489, align 16
  %8491 = getelementptr inbounds i32, i32* %1, i64 220
  %8492 = bitcast i32* %8491 to <2 x i64>*
  %8493 = load <2 x i64>, <2 x i64>* %8064, align 16
  store <2 x i64> %8493, <2 x i64>* %8492, align 16
  %8494 = getelementptr inbounds i32, i32* %1, i64 224
  %8495 = bitcast i32* %8494 to <2 x i64>*
  %8496 = load <2 x i64>, <2 x i64>* %7866, align 16
  store <2 x i64> %8496, <2 x i64>* %8495, align 16
  %8497 = getelementptr inbounds i32, i32* %1, i64 228
  %8498 = bitcast i32* %8497 to <2 x i64>*
  %8499 = load <2 x i64>, <2 x i64>* %7906, align 16
  store <2 x i64> %8499, <2 x i64>* %8498, align 16
  %8500 = getelementptr inbounds i32, i32* %1, i64 232
  %8501 = bitcast i32* %8500 to <2 x i64>*
  %8502 = load <2 x i64>, <2 x i64>* %8026, align 16
  store <2 x i64> %8502, <2 x i64>* %8501, align 16
  %8503 = getelementptr inbounds i32, i32* %1, i64 236
  %8504 = bitcast i32* %8503 to <2 x i64>*
  %8505 = load <2 x i64>, <2 x i64>* %8066, align 16
  store <2 x i64> %8505, <2 x i64>* %8504, align 16
  %8506 = getelementptr inbounds i32, i32* %1, i64 240
  %8507 = bitcast i32* %8506 to <2 x i64>*
  %8508 = load <2 x i64>, <2 x i64>* %7868, align 16
  store <2 x i64> %8508, <2 x i64>* %8507, align 16
  %8509 = getelementptr inbounds i32, i32* %1, i64 244
  %8510 = bitcast i32* %8509 to <2 x i64>*
  %8511 = load <2 x i64>, <2 x i64>* %7908, align 16
  store <2 x i64> %8511, <2 x i64>* %8510, align 16
  %8512 = getelementptr inbounds i32, i32* %1, i64 248
  %8513 = bitcast i32* %8512 to <2 x i64>*
  %8514 = load <2 x i64>, <2 x i64>* %8028, align 16
  store <2 x i64> %8514, <2 x i64>* %8513, align 16
  %8515 = getelementptr inbounds i32, i32* %1, i64 252
  %8516 = bitcast i32* %8515 to <2 x i64>*
  %8517 = load <2 x i64>, <2 x i64>* %8068, align 16
  store <2 x i64> %8517, <2 x i64>* %8516, align 16
  br label %17357

8518:                                             ; preds = %5
  %8519 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %8520 = load i8, i8* %10, align 1
  %8521 = sext i8 %8520 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %8519, i32 %2, i32 1, i32 0, i32 %8521)
  %8522 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %8523 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  %8524 = sext i8 %8523 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %8519, <2 x i64>* nonnull %8522, i32 %8524, i32 4)
  %8525 = getelementptr inbounds i8, i8* %10, i64 1
  %8526 = load i8, i8* %8525, align 1
  %8527 = sext i8 %8526 to i32
  %8528 = sub nsw i32 0, %8527
  %8529 = xor i32 %8527, -1
  %8530 = shl i32 1, %8529
  %8531 = insertelement <4 x i32> undef, i32 %8530, i32 0
  %8532 = shufflevector <4 x i32> %8531, <4 x i32> undef, <4 x i32> zeroinitializer
  %8533 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %8534 = load <4 x i32>, <4 x i32>* %8533, align 16
  %8535 = add <4 x i32> %8532, %8534
  %8536 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %8537 = bitcast <2 x i64>* %8536 to <4 x i32>*
  %8538 = load <4 x i32>, <4 x i32>* %8537, align 16
  %8539 = add <4 x i32> %8532, %8538
  %8540 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %8541 = bitcast <2 x i64>* %8540 to <4 x i32>*
  %8542 = load <4 x i32>, <4 x i32>* %8541, align 16
  %8543 = add <4 x i32> %8532, %8542
  %8544 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %8545 = bitcast <2 x i64>* %8544 to <4 x i32>*
  %8546 = load <4 x i32>, <4 x i32>* %8545, align 16
  %8547 = add <4 x i32> %8546, %8532
  %8548 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %8549 = bitcast <2 x i64>* %8548 to <4 x i32>*
  %8550 = load <4 x i32>, <4 x i32>* %8549, align 16
  %8551 = add <4 x i32> %8550, %8532
  %8552 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %8553 = bitcast <2 x i64>* %8552 to <4 x i32>*
  %8554 = load <4 x i32>, <4 x i32>* %8553, align 16
  %8555 = add <4 x i32> %8554, %8532
  %8556 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %8557 = bitcast <2 x i64>* %8556 to <4 x i32>*
  %8558 = load <4 x i32>, <4 x i32>* %8557, align 16
  %8559 = add <4 x i32> %8558, %8532
  %8560 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %8561 = bitcast <2 x i64>* %8560 to <4 x i32>*
  %8562 = load <4 x i32>, <4 x i32>* %8561, align 16
  %8563 = add <4 x i32> %8562, %8532
  %8564 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %8565 = bitcast <2 x i64>* %8564 to <4 x i32>*
  %8566 = load <4 x i32>, <4 x i32>* %8565, align 16
  %8567 = add <4 x i32> %8566, %8532
  %8568 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %8569 = bitcast <2 x i64>* %8568 to <4 x i32>*
  %8570 = load <4 x i32>, <4 x i32>* %8569, align 16
  %8571 = add <4 x i32> %8570, %8532
  %8572 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %8573 = bitcast <2 x i64>* %8572 to <4 x i32>*
  %8574 = load <4 x i32>, <4 x i32>* %8573, align 16
  %8575 = add <4 x i32> %8574, %8532
  %8576 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %8577 = bitcast <2 x i64>* %8576 to <4 x i32>*
  %8578 = load <4 x i32>, <4 x i32>* %8577, align 16
  %8579 = add <4 x i32> %8578, %8532
  %8580 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %8581 = bitcast <2 x i64>* %8580 to <4 x i32>*
  %8582 = load <4 x i32>, <4 x i32>* %8581, align 16
  %8583 = add <4 x i32> %8582, %8532
  %8584 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %8585 = bitcast <2 x i64>* %8584 to <4 x i32>*
  %8586 = load <4 x i32>, <4 x i32>* %8585, align 16
  %8587 = add <4 x i32> %8586, %8532
  %8588 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %8589 = bitcast <2 x i64>* %8588 to <4 x i32>*
  %8590 = load <4 x i32>, <4 x i32>* %8589, align 16
  %8591 = add <4 x i32> %8590, %8532
  %8592 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %8593 = bitcast <2 x i64>* %8592 to <4 x i32>*
  %8594 = load <4 x i32>, <4 x i32>* %8593, align 16
  %8595 = add <4 x i32> %8594, %8532
  %8596 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8535, i32 %8528) #8
  store <4 x i32> %8596, <4 x i32>* %8533, align 16
  %8597 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8539, i32 %8528) #8
  store <4 x i32> %8597, <4 x i32>* %8537, align 16
  %8598 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8543, i32 %8528) #8
  store <4 x i32> %8598, <4 x i32>* %8541, align 16
  %8599 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8547, i32 %8528) #8
  store <4 x i32> %8599, <4 x i32>* %8545, align 16
  %8600 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8551, i32 %8528) #8
  store <4 x i32> %8600, <4 x i32>* %8549, align 16
  %8601 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8555, i32 %8528) #8
  store <4 x i32> %8601, <4 x i32>* %8553, align 16
  %8602 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8559, i32 %8528) #8
  store <4 x i32> %8602, <4 x i32>* %8557, align 16
  %8603 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8563, i32 %8528) #8
  store <4 x i32> %8603, <4 x i32>* %8561, align 16
  %8604 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8567, i32 %8528) #8
  store <4 x i32> %8604, <4 x i32>* %8565, align 16
  %8605 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8571, i32 %8528) #8
  store <4 x i32> %8605, <4 x i32>* %8569, align 16
  %8606 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8575, i32 %8528) #8
  store <4 x i32> %8606, <4 x i32>* %8573, align 16
  %8607 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8579, i32 %8528) #8
  store <4 x i32> %8607, <4 x i32>* %8577, align 16
  %8608 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8583, i32 %8528) #8
  store <4 x i32> %8608, <4 x i32>* %8581, align 16
  %8609 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8587, i32 %8528) #8
  store <4 x i32> %8609, <4 x i32>* %8585, align 16
  %8610 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8591, i32 %8528) #8
  store <4 x i32> %8610, <4 x i32>* %8589, align 16
  %8611 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8595, i32 %8528) #8
  store <4 x i32> %8611, <4 x i32>* %8593, align 16
  %8612 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %8613 = bitcast <2 x i64>* %8612 to <4 x i32>*
  %8614 = load <4 x i32>, <4 x i32>* %8613, align 16
  %8615 = add <4 x i32> %8614, %8532
  %8616 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %8617 = bitcast <2 x i64>* %8616 to <4 x i32>*
  %8618 = load <4 x i32>, <4 x i32>* %8617, align 16
  %8619 = add <4 x i32> %8618, %8532
  %8620 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %8621 = bitcast <2 x i64>* %8620 to <4 x i32>*
  %8622 = load <4 x i32>, <4 x i32>* %8621, align 16
  %8623 = add <4 x i32> %8622, %8532
  %8624 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %8625 = bitcast <2 x i64>* %8624 to <4 x i32>*
  %8626 = load <4 x i32>, <4 x i32>* %8625, align 16
  %8627 = add <4 x i32> %8626, %8532
  %8628 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %8629 = bitcast <2 x i64>* %8628 to <4 x i32>*
  %8630 = load <4 x i32>, <4 x i32>* %8629, align 16
  %8631 = add <4 x i32> %8630, %8532
  %8632 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %8633 = bitcast <2 x i64>* %8632 to <4 x i32>*
  %8634 = load <4 x i32>, <4 x i32>* %8633, align 16
  %8635 = add <4 x i32> %8634, %8532
  %8636 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %8637 = bitcast <2 x i64>* %8636 to <4 x i32>*
  %8638 = load <4 x i32>, <4 x i32>* %8637, align 16
  %8639 = add <4 x i32> %8638, %8532
  %8640 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %8641 = bitcast <2 x i64>* %8640 to <4 x i32>*
  %8642 = load <4 x i32>, <4 x i32>* %8641, align 16
  %8643 = add <4 x i32> %8642, %8532
  %8644 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %8645 = bitcast <2 x i64>* %8644 to <4 x i32>*
  %8646 = load <4 x i32>, <4 x i32>* %8645, align 16
  %8647 = add <4 x i32> %8646, %8532
  %8648 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %8649 = bitcast <2 x i64>* %8648 to <4 x i32>*
  %8650 = load <4 x i32>, <4 x i32>* %8649, align 16
  %8651 = add <4 x i32> %8650, %8532
  %8652 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %8653 = bitcast <2 x i64>* %8652 to <4 x i32>*
  %8654 = load <4 x i32>, <4 x i32>* %8653, align 16
  %8655 = add <4 x i32> %8654, %8532
  %8656 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %8657 = bitcast <2 x i64>* %8656 to <4 x i32>*
  %8658 = load <4 x i32>, <4 x i32>* %8657, align 16
  %8659 = add <4 x i32> %8658, %8532
  %8660 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %8661 = bitcast <2 x i64>* %8660 to <4 x i32>*
  %8662 = load <4 x i32>, <4 x i32>* %8661, align 16
  %8663 = add <4 x i32> %8662, %8532
  %8664 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %8665 = bitcast <2 x i64>* %8664 to <4 x i32>*
  %8666 = load <4 x i32>, <4 x i32>* %8665, align 16
  %8667 = add <4 x i32> %8666, %8532
  %8668 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %8669 = bitcast <2 x i64>* %8668 to <4 x i32>*
  %8670 = load <4 x i32>, <4 x i32>* %8669, align 16
  %8671 = add <4 x i32> %8670, %8532
  %8672 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %8673 = bitcast <2 x i64>* %8672 to <4 x i32>*
  %8674 = load <4 x i32>, <4 x i32>* %8673, align 16
  %8675 = add <4 x i32> %8674, %8532
  %8676 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8615, i32 %8528) #8
  store <4 x i32> %8676, <4 x i32>* %8613, align 16
  %8677 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8619, i32 %8528) #8
  store <4 x i32> %8677, <4 x i32>* %8617, align 16
  %8678 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8623, i32 %8528) #8
  store <4 x i32> %8678, <4 x i32>* %8621, align 16
  %8679 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8627, i32 %8528) #8
  store <4 x i32> %8679, <4 x i32>* %8625, align 16
  %8680 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8631, i32 %8528) #8
  store <4 x i32> %8680, <4 x i32>* %8629, align 16
  %8681 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8635, i32 %8528) #8
  store <4 x i32> %8681, <4 x i32>* %8633, align 16
  %8682 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8639, i32 %8528) #8
  store <4 x i32> %8682, <4 x i32>* %8637, align 16
  %8683 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8643, i32 %8528) #8
  store <4 x i32> %8683, <4 x i32>* %8641, align 16
  %8684 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8647, i32 %8528) #8
  store <4 x i32> %8684, <4 x i32>* %8645, align 16
  %8685 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8651, i32 %8528) #8
  store <4 x i32> %8685, <4 x i32>* %8649, align 16
  %8686 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8655, i32 %8528) #8
  store <4 x i32> %8686, <4 x i32>* %8653, align 16
  %8687 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8659, i32 %8528) #8
  store <4 x i32> %8687, <4 x i32>* %8657, align 16
  %8688 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8663, i32 %8528) #8
  store <4 x i32> %8688, <4 x i32>* %8661, align 16
  %8689 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8667, i32 %8528) #8
  store <4 x i32> %8689, <4 x i32>* %8665, align 16
  %8690 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8671, i32 %8528) #8
  store <4 x i32> %8690, <4 x i32>* %8669, align 16
  %8691 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8675, i32 %8528) #8
  store <4 x i32> %8691, <4 x i32>* %8673, align 16
  %8692 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %8693 = bitcast <2 x i64>* %8692 to <4 x i32>*
  %8694 = load <4 x i32>, <4 x i32>* %8693, align 16
  %8695 = add <4 x i32> %8694, %8532
  %8696 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %8697 = bitcast <2 x i64>* %8696 to <4 x i32>*
  %8698 = load <4 x i32>, <4 x i32>* %8697, align 16
  %8699 = add <4 x i32> %8698, %8532
  %8700 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %8701 = bitcast <2 x i64>* %8700 to <4 x i32>*
  %8702 = load <4 x i32>, <4 x i32>* %8701, align 16
  %8703 = add <4 x i32> %8702, %8532
  %8704 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %8705 = bitcast <2 x i64>* %8704 to <4 x i32>*
  %8706 = load <4 x i32>, <4 x i32>* %8705, align 16
  %8707 = add <4 x i32> %8706, %8532
  %8708 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %8709 = bitcast <2 x i64>* %8708 to <4 x i32>*
  %8710 = load <4 x i32>, <4 x i32>* %8709, align 16
  %8711 = add <4 x i32> %8710, %8532
  %8712 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %8713 = bitcast <2 x i64>* %8712 to <4 x i32>*
  %8714 = load <4 x i32>, <4 x i32>* %8713, align 16
  %8715 = add <4 x i32> %8714, %8532
  %8716 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %8717 = bitcast <2 x i64>* %8716 to <4 x i32>*
  %8718 = load <4 x i32>, <4 x i32>* %8717, align 16
  %8719 = add <4 x i32> %8718, %8532
  %8720 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %8721 = bitcast <2 x i64>* %8720 to <4 x i32>*
  %8722 = load <4 x i32>, <4 x i32>* %8721, align 16
  %8723 = add <4 x i32> %8722, %8532
  %8724 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %8725 = bitcast <2 x i64>* %8724 to <4 x i32>*
  %8726 = load <4 x i32>, <4 x i32>* %8725, align 16
  %8727 = add <4 x i32> %8726, %8532
  %8728 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %8729 = bitcast <2 x i64>* %8728 to <4 x i32>*
  %8730 = load <4 x i32>, <4 x i32>* %8729, align 16
  %8731 = add <4 x i32> %8730, %8532
  %8732 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %8733 = bitcast <2 x i64>* %8732 to <4 x i32>*
  %8734 = load <4 x i32>, <4 x i32>* %8733, align 16
  %8735 = add <4 x i32> %8734, %8532
  %8736 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %8737 = bitcast <2 x i64>* %8736 to <4 x i32>*
  %8738 = load <4 x i32>, <4 x i32>* %8737, align 16
  %8739 = add <4 x i32> %8738, %8532
  %8740 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %8741 = bitcast <2 x i64>* %8740 to <4 x i32>*
  %8742 = load <4 x i32>, <4 x i32>* %8741, align 16
  %8743 = add <4 x i32> %8742, %8532
  %8744 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %8745 = bitcast <2 x i64>* %8744 to <4 x i32>*
  %8746 = load <4 x i32>, <4 x i32>* %8745, align 16
  %8747 = add <4 x i32> %8746, %8532
  %8748 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %8749 = bitcast <2 x i64>* %8748 to <4 x i32>*
  %8750 = load <4 x i32>, <4 x i32>* %8749, align 16
  %8751 = add <4 x i32> %8750, %8532
  %8752 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %8753 = bitcast <2 x i64>* %8752 to <4 x i32>*
  %8754 = load <4 x i32>, <4 x i32>* %8753, align 16
  %8755 = add <4 x i32> %8754, %8532
  %8756 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8695, i32 %8528) #8
  store <4 x i32> %8756, <4 x i32>* %8693, align 16
  %8757 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8699, i32 %8528) #8
  store <4 x i32> %8757, <4 x i32>* %8697, align 16
  %8758 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8703, i32 %8528) #8
  store <4 x i32> %8758, <4 x i32>* %8701, align 16
  %8759 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8707, i32 %8528) #8
  store <4 x i32> %8759, <4 x i32>* %8705, align 16
  %8760 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8711, i32 %8528) #8
  store <4 x i32> %8760, <4 x i32>* %8709, align 16
  %8761 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8715, i32 %8528) #8
  store <4 x i32> %8761, <4 x i32>* %8713, align 16
  %8762 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8719, i32 %8528) #8
  store <4 x i32> %8762, <4 x i32>* %8717, align 16
  %8763 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8723, i32 %8528) #8
  store <4 x i32> %8763, <4 x i32>* %8721, align 16
  %8764 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8727, i32 %8528) #8
  store <4 x i32> %8764, <4 x i32>* %8725, align 16
  %8765 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8731, i32 %8528) #8
  store <4 x i32> %8765, <4 x i32>* %8729, align 16
  %8766 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8735, i32 %8528) #8
  store <4 x i32> %8766, <4 x i32>* %8733, align 16
  %8767 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8739, i32 %8528) #8
  store <4 x i32> %8767, <4 x i32>* %8737, align 16
  %8768 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8743, i32 %8528) #8
  store <4 x i32> %8768, <4 x i32>* %8741, align 16
  %8769 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8747, i32 %8528) #8
  store <4 x i32> %8769, <4 x i32>* %8745, align 16
  %8770 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8751, i32 %8528) #8
  store <4 x i32> %8770, <4 x i32>* %8749, align 16
  %8771 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8755, i32 %8528) #8
  store <4 x i32> %8771, <4 x i32>* %8753, align 16
  %8772 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %8773 = bitcast <2 x i64>* %8772 to <4 x i32>*
  %8774 = load <4 x i32>, <4 x i32>* %8773, align 16
  %8775 = add <4 x i32> %8774, %8532
  %8776 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %8777 = bitcast <2 x i64>* %8776 to <4 x i32>*
  %8778 = load <4 x i32>, <4 x i32>* %8777, align 16
  %8779 = add <4 x i32> %8778, %8532
  %8780 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %8781 = bitcast <2 x i64>* %8780 to <4 x i32>*
  %8782 = load <4 x i32>, <4 x i32>* %8781, align 16
  %8783 = add <4 x i32> %8782, %8532
  %8784 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %8785 = bitcast <2 x i64>* %8784 to <4 x i32>*
  %8786 = load <4 x i32>, <4 x i32>* %8785, align 16
  %8787 = add <4 x i32> %8786, %8532
  %8788 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %8789 = bitcast <2 x i64>* %8788 to <4 x i32>*
  %8790 = load <4 x i32>, <4 x i32>* %8789, align 16
  %8791 = add <4 x i32> %8790, %8532
  %8792 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %8793 = bitcast <2 x i64>* %8792 to <4 x i32>*
  %8794 = load <4 x i32>, <4 x i32>* %8793, align 16
  %8795 = add <4 x i32> %8794, %8532
  %8796 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %8797 = bitcast <2 x i64>* %8796 to <4 x i32>*
  %8798 = load <4 x i32>, <4 x i32>* %8797, align 16
  %8799 = add <4 x i32> %8798, %8532
  %8800 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %8801 = bitcast <2 x i64>* %8800 to <4 x i32>*
  %8802 = load <4 x i32>, <4 x i32>* %8801, align 16
  %8803 = add <4 x i32> %8802, %8532
  %8804 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %8805 = bitcast <2 x i64>* %8804 to <4 x i32>*
  %8806 = load <4 x i32>, <4 x i32>* %8805, align 16
  %8807 = add <4 x i32> %8806, %8532
  %8808 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %8809 = bitcast <2 x i64>* %8808 to <4 x i32>*
  %8810 = load <4 x i32>, <4 x i32>* %8809, align 16
  %8811 = add <4 x i32> %8810, %8532
  %8812 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %8813 = bitcast <2 x i64>* %8812 to <4 x i32>*
  %8814 = load <4 x i32>, <4 x i32>* %8813, align 16
  %8815 = add <4 x i32> %8814, %8532
  %8816 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %8817 = bitcast <2 x i64>* %8816 to <4 x i32>*
  %8818 = load <4 x i32>, <4 x i32>* %8817, align 16
  %8819 = add <4 x i32> %8818, %8532
  %8820 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %8821 = bitcast <2 x i64>* %8820 to <4 x i32>*
  %8822 = load <4 x i32>, <4 x i32>* %8821, align 16
  %8823 = add <4 x i32> %8822, %8532
  %8824 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %8825 = bitcast <2 x i64>* %8824 to <4 x i32>*
  %8826 = load <4 x i32>, <4 x i32>* %8825, align 16
  %8827 = add <4 x i32> %8826, %8532
  %8828 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %8829 = bitcast <2 x i64>* %8828 to <4 x i32>*
  %8830 = load <4 x i32>, <4 x i32>* %8829, align 16
  %8831 = add <4 x i32> %8830, %8532
  %8832 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %8833 = bitcast <2 x i64>* %8832 to <4 x i32>*
  %8834 = load <4 x i32>, <4 x i32>* %8833, align 16
  %8835 = add <4 x i32> %8834, %8532
  %8836 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8775, i32 %8528) #8
  store <4 x i32> %8836, <4 x i32>* %8773, align 16
  %8837 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8779, i32 %8528) #8
  store <4 x i32> %8837, <4 x i32>* %8777, align 16
  %8838 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8783, i32 %8528) #8
  store <4 x i32> %8838, <4 x i32>* %8781, align 16
  %8839 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8787, i32 %8528) #8
  store <4 x i32> %8839, <4 x i32>* %8785, align 16
  %8840 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8791, i32 %8528) #8
  store <4 x i32> %8840, <4 x i32>* %8789, align 16
  %8841 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8795, i32 %8528) #8
  store <4 x i32> %8841, <4 x i32>* %8793, align 16
  %8842 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8799, i32 %8528) #8
  store <4 x i32> %8842, <4 x i32>* %8797, align 16
  %8843 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8803, i32 %8528) #8
  store <4 x i32> %8843, <4 x i32>* %8801, align 16
  %8844 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8807, i32 %8528) #8
  store <4 x i32> %8844, <4 x i32>* %8805, align 16
  %8845 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8811, i32 %8528) #8
  store <4 x i32> %8845, <4 x i32>* %8809, align 16
  %8846 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8815, i32 %8528) #8
  store <4 x i32> %8846, <4 x i32>* %8813, align 16
  %8847 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8819, i32 %8528) #8
  store <4 x i32> %8847, <4 x i32>* %8817, align 16
  %8848 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8823, i32 %8528) #8
  store <4 x i32> %8848, <4 x i32>* %8821, align 16
  %8849 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8827, i32 %8528) #8
  store <4 x i32> %8849, <4 x i32>* %8825, align 16
  %8850 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8831, i32 %8528) #8
  store <4 x i32> %8850, <4 x i32>* %8829, align 16
  %8851 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %8835, i32 %8528) #8
  store <4 x i32> %8851, <4 x i32>* %8833, align 16
  %8852 = shufflevector <4 x i32> %8596, <4 x i32> %8600, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8853 = bitcast <4 x i32> %8852 to <2 x i64>
  %8854 = shufflevector <4 x i32> %8596, <4 x i32> %8600, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8855 = bitcast <4 x i32> %8854 to <2 x i64>
  %8856 = shufflevector <4 x i32> %8604, <4 x i32> %8608, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8857 = bitcast <4 x i32> %8856 to <2 x i64>
  %8858 = shufflevector <4 x i32> %8604, <4 x i32> %8608, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8859 = bitcast <4 x i32> %8858 to <2 x i64>
  %8860 = shufflevector <2 x i64> %8853, <2 x i64> %8857, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %8860, <2 x i64>* %8519, align 16
  %8861 = shufflevector <2 x i64> %8853, <2 x i64> %8857, <2 x i32> <i32 1, i32 3>
  %8862 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %8861, <2 x i64>* %8862, align 16
  %8863 = shufflevector <2 x i64> %8855, <2 x i64> %8859, <2 x i32> <i32 0, i32 2>
  %8864 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %8863, <2 x i64>* %8864, align 16
  %8865 = shufflevector <2 x i64> %8855, <2 x i64> %8859, <2 x i32> <i32 1, i32 3>
  %8866 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %8865, <2 x i64>* %8866, align 16
  %8867 = shufflevector <4 x i32> %8597, <4 x i32> %8601, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8868 = bitcast <4 x i32> %8867 to <2 x i64>
  %8869 = shufflevector <4 x i32> %8597, <4 x i32> %8601, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8870 = bitcast <4 x i32> %8869 to <2 x i64>
  %8871 = shufflevector <4 x i32> %8605, <4 x i32> %8609, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8872 = bitcast <4 x i32> %8871 to <2 x i64>
  %8873 = shufflevector <4 x i32> %8605, <4 x i32> %8609, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8874 = bitcast <4 x i32> %8873 to <2 x i64>
  %8875 = shufflevector <2 x i64> %8868, <2 x i64> %8872, <2 x i32> <i32 0, i32 2>
  %8876 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %8875, <2 x i64>* %8876, align 16
  %8877 = shufflevector <2 x i64> %8868, <2 x i64> %8872, <2 x i32> <i32 1, i32 3>
  %8878 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %8877, <2 x i64>* %8878, align 16
  %8879 = shufflevector <2 x i64> %8870, <2 x i64> %8874, <2 x i32> <i32 0, i32 2>
  %8880 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %8879, <2 x i64>* %8880, align 16
  %8881 = shufflevector <2 x i64> %8870, <2 x i64> %8874, <2 x i32> <i32 1, i32 3>
  %8882 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %8881, <2 x i64>* %8882, align 16
  %8883 = load <4 x i32>, <4 x i32>* %8629, align 16
  %8884 = shufflevector <4 x i32> %8676, <4 x i32> %8883, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8885 = bitcast <4 x i32> %8884 to <2 x i64>
  %8886 = shufflevector <4 x i32> %8676, <4 x i32> %8883, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8887 = bitcast <4 x i32> %8886 to <2 x i64>
  %8888 = load <4 x i32>, <4 x i32>* %8645, align 16
  %8889 = load <4 x i32>, <4 x i32>* %8661, align 16
  %8890 = shufflevector <4 x i32> %8888, <4 x i32> %8889, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8891 = bitcast <4 x i32> %8890 to <2 x i64>
  %8892 = shufflevector <4 x i32> %8888, <4 x i32> %8889, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8893 = bitcast <4 x i32> %8892 to <2 x i64>
  %8894 = shufflevector <2 x i64> %8885, <2 x i64> %8891, <2 x i32> <i32 0, i32 2>
  %8895 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %8894, <2 x i64>* %8895, align 16
  %8896 = shufflevector <2 x i64> %8885, <2 x i64> %8891, <2 x i32> <i32 1, i32 3>
  %8897 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %8896, <2 x i64>* %8897, align 16
  %8898 = shufflevector <2 x i64> %8887, <2 x i64> %8893, <2 x i32> <i32 0, i32 2>
  %8899 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %8898, <2 x i64>* %8899, align 16
  %8900 = shufflevector <2 x i64> %8887, <2 x i64> %8893, <2 x i32> <i32 1, i32 3>
  %8901 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %8900, <2 x i64>* %8901, align 16
  %8902 = load <4 x i32>, <4 x i32>* %8617, align 16
  %8903 = load <4 x i32>, <4 x i32>* %8633, align 16
  %8904 = shufflevector <4 x i32> %8902, <4 x i32> %8903, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8905 = bitcast <4 x i32> %8904 to <2 x i64>
  %8906 = shufflevector <4 x i32> %8902, <4 x i32> %8903, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8907 = bitcast <4 x i32> %8906 to <2 x i64>
  %8908 = load <4 x i32>, <4 x i32>* %8649, align 16
  %8909 = load <4 x i32>, <4 x i32>* %8665, align 16
  %8910 = shufflevector <4 x i32> %8908, <4 x i32> %8909, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8911 = bitcast <4 x i32> %8910 to <2 x i64>
  %8912 = shufflevector <4 x i32> %8908, <4 x i32> %8909, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8913 = bitcast <4 x i32> %8912 to <2 x i64>
  %8914 = shufflevector <2 x i64> %8905, <2 x i64> %8911, <2 x i32> <i32 0, i32 2>
  %8915 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %8914, <2 x i64>* %8915, align 16
  %8916 = shufflevector <2 x i64> %8905, <2 x i64> %8911, <2 x i32> <i32 1, i32 3>
  %8917 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %8916, <2 x i64>* %8917, align 16
  %8918 = shufflevector <2 x i64> %8907, <2 x i64> %8913, <2 x i32> <i32 0, i32 2>
  %8919 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %8918, <2 x i64>* %8919, align 16
  %8920 = shufflevector <2 x i64> %8907, <2 x i64> %8913, <2 x i32> <i32 1, i32 3>
  %8921 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %8920, <2 x i64>* %8921, align 16
  %8922 = shufflevector <4 x i32> %8598, <4 x i32> %8602, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8923 = bitcast <4 x i32> %8922 to <2 x i64>
  %8924 = shufflevector <4 x i32> %8598, <4 x i32> %8602, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8925 = bitcast <4 x i32> %8924 to <2 x i64>
  %8926 = shufflevector <4 x i32> %8606, <4 x i32> %8610, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8927 = bitcast <4 x i32> %8926 to <2 x i64>
  %8928 = shufflevector <4 x i32> %8606, <4 x i32> %8610, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8929 = bitcast <4 x i32> %8928 to <2 x i64>
  %8930 = shufflevector <2 x i64> %8923, <2 x i64> %8927, <2 x i32> <i32 0, i32 2>
  %8931 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %8930, <2 x i64>* %8931, align 16
  %8932 = shufflevector <2 x i64> %8923, <2 x i64> %8927, <2 x i32> <i32 1, i32 3>
  %8933 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %8932, <2 x i64>* %8933, align 16
  %8934 = shufflevector <2 x i64> %8925, <2 x i64> %8929, <2 x i32> <i32 0, i32 2>
  %8935 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %8934, <2 x i64>* %8935, align 16
  %8936 = shufflevector <2 x i64> %8925, <2 x i64> %8929, <2 x i32> <i32 1, i32 3>
  %8937 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %8936, <2 x i64>* %8937, align 16
  %8938 = shufflevector <4 x i32> %8599, <4 x i32> %8603, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8939 = bitcast <4 x i32> %8938 to <2 x i64>
  %8940 = shufflevector <4 x i32> %8599, <4 x i32> %8603, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8941 = bitcast <4 x i32> %8940 to <2 x i64>
  %8942 = shufflevector <4 x i32> %8607, <4 x i32> %8611, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8943 = bitcast <4 x i32> %8942 to <2 x i64>
  %8944 = shufflevector <4 x i32> %8607, <4 x i32> %8611, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8945 = bitcast <4 x i32> %8944 to <2 x i64>
  %8946 = shufflevector <2 x i64> %8939, <2 x i64> %8943, <2 x i32> <i32 0, i32 2>
  %8947 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %8946, <2 x i64>* %8947, align 16
  %8948 = shufflevector <2 x i64> %8939, <2 x i64> %8943, <2 x i32> <i32 1, i32 3>
  %8949 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %8948, <2 x i64>* %8949, align 16
  %8950 = shufflevector <2 x i64> %8941, <2 x i64> %8945, <2 x i32> <i32 0, i32 2>
  %8951 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %8950, <2 x i64>* %8951, align 16
  %8952 = shufflevector <2 x i64> %8941, <2 x i64> %8945, <2 x i32> <i32 1, i32 3>
  %8953 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %8952, <2 x i64>* %8953, align 16
  %8954 = load <4 x i32>, <4 x i32>* %8621, align 16
  %8955 = load <4 x i32>, <4 x i32>* %8637, align 16
  %8956 = shufflevector <4 x i32> %8954, <4 x i32> %8955, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8957 = bitcast <4 x i32> %8956 to <2 x i64>
  %8958 = shufflevector <4 x i32> %8954, <4 x i32> %8955, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8959 = bitcast <4 x i32> %8958 to <2 x i64>
  %8960 = load <4 x i32>, <4 x i32>* %8653, align 16
  %8961 = load <4 x i32>, <4 x i32>* %8669, align 16
  %8962 = shufflevector <4 x i32> %8960, <4 x i32> %8961, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8963 = bitcast <4 x i32> %8962 to <2 x i64>
  %8964 = shufflevector <4 x i32> %8960, <4 x i32> %8961, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8965 = bitcast <4 x i32> %8964 to <2 x i64>
  %8966 = shufflevector <2 x i64> %8957, <2 x i64> %8963, <2 x i32> <i32 0, i32 2>
  %8967 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %8966, <2 x i64>* %8967, align 16
  %8968 = shufflevector <2 x i64> %8957, <2 x i64> %8963, <2 x i32> <i32 1, i32 3>
  %8969 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %8968, <2 x i64>* %8969, align 16
  %8970 = shufflevector <2 x i64> %8959, <2 x i64> %8965, <2 x i32> <i32 0, i32 2>
  %8971 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %8970, <2 x i64>* %8971, align 16
  %8972 = shufflevector <2 x i64> %8959, <2 x i64> %8965, <2 x i32> <i32 1, i32 3>
  %8973 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %8972, <2 x i64>* %8973, align 16
  %8974 = load <4 x i32>, <4 x i32>* %8625, align 16
  %8975 = load <4 x i32>, <4 x i32>* %8641, align 16
  %8976 = shufflevector <4 x i32> %8974, <4 x i32> %8975, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8977 = bitcast <4 x i32> %8976 to <2 x i64>
  %8978 = shufflevector <4 x i32> %8974, <4 x i32> %8975, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8979 = bitcast <4 x i32> %8978 to <2 x i64>
  %8980 = load <4 x i32>, <4 x i32>* %8657, align 16
  %8981 = load <4 x i32>, <4 x i32>* %8673, align 16
  %8982 = shufflevector <4 x i32> %8980, <4 x i32> %8981, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8983 = bitcast <4 x i32> %8982 to <2 x i64>
  %8984 = shufflevector <4 x i32> %8980, <4 x i32> %8981, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8985 = bitcast <4 x i32> %8984 to <2 x i64>
  %8986 = shufflevector <2 x i64> %8977, <2 x i64> %8983, <2 x i32> <i32 0, i32 2>
  %8987 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %8986, <2 x i64>* %8987, align 16
  %8988 = shufflevector <2 x i64> %8977, <2 x i64> %8983, <2 x i32> <i32 1, i32 3>
  %8989 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %8988, <2 x i64>* %8989, align 16
  %8990 = shufflevector <2 x i64> %8979, <2 x i64> %8985, <2 x i32> <i32 0, i32 2>
  %8991 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %8990, <2 x i64>* %8991, align 16
  %8992 = shufflevector <2 x i64> %8979, <2 x i64> %8985, <2 x i32> <i32 1, i32 3>
  %8993 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %8992, <2 x i64>* %8993, align 16
  %8994 = load <4 x i32>, <4 x i32>* %8693, align 16
  %8995 = load <4 x i32>, <4 x i32>* %8709, align 16
  %8996 = shufflevector <4 x i32> %8994, <4 x i32> %8995, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %8997 = bitcast <4 x i32> %8996 to <2 x i64>
  %8998 = shufflevector <4 x i32> %8994, <4 x i32> %8995, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %8999 = bitcast <4 x i32> %8998 to <2 x i64>
  %9000 = load <4 x i32>, <4 x i32>* %8725, align 16
  %9001 = load <4 x i32>, <4 x i32>* %8741, align 16
  %9002 = shufflevector <4 x i32> %9000, <4 x i32> %9001, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9003 = bitcast <4 x i32> %9002 to <2 x i64>
  %9004 = shufflevector <4 x i32> %9000, <4 x i32> %9001, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9005 = bitcast <4 x i32> %9004 to <2 x i64>
  %9006 = shufflevector <2 x i64> %8997, <2 x i64> %9003, <2 x i32> <i32 0, i32 2>
  %9007 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %9006, <2 x i64>* %9007, align 16
  %9008 = shufflevector <2 x i64> %8997, <2 x i64> %9003, <2 x i32> <i32 1, i32 3>
  %9009 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %9008, <2 x i64>* %9009, align 16
  %9010 = shufflevector <2 x i64> %8999, <2 x i64> %9005, <2 x i32> <i32 0, i32 2>
  %9011 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %9010, <2 x i64>* %9011, align 16
  %9012 = shufflevector <2 x i64> %8999, <2 x i64> %9005, <2 x i32> <i32 1, i32 3>
  %9013 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %9012, <2 x i64>* %9013, align 16
  %9014 = load <4 x i32>, <4 x i32>* %8697, align 16
  %9015 = load <4 x i32>, <4 x i32>* %8713, align 16
  %9016 = shufflevector <4 x i32> %9014, <4 x i32> %9015, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9017 = bitcast <4 x i32> %9016 to <2 x i64>
  %9018 = shufflevector <4 x i32> %9014, <4 x i32> %9015, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9019 = bitcast <4 x i32> %9018 to <2 x i64>
  %9020 = load <4 x i32>, <4 x i32>* %8729, align 16
  %9021 = load <4 x i32>, <4 x i32>* %8745, align 16
  %9022 = shufflevector <4 x i32> %9020, <4 x i32> %9021, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9023 = bitcast <4 x i32> %9022 to <2 x i64>
  %9024 = shufflevector <4 x i32> %9020, <4 x i32> %9021, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9025 = bitcast <4 x i32> %9024 to <2 x i64>
  %9026 = shufflevector <2 x i64> %9017, <2 x i64> %9023, <2 x i32> <i32 0, i32 2>
  %9027 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %9026, <2 x i64>* %9027, align 16
  %9028 = shufflevector <2 x i64> %9017, <2 x i64> %9023, <2 x i32> <i32 1, i32 3>
  %9029 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %9028, <2 x i64>* %9029, align 16
  %9030 = shufflevector <2 x i64> %9019, <2 x i64> %9025, <2 x i32> <i32 0, i32 2>
  %9031 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %9030, <2 x i64>* %9031, align 16
  %9032 = shufflevector <2 x i64> %9019, <2 x i64> %9025, <2 x i32> <i32 1, i32 3>
  %9033 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %9032, <2 x i64>* %9033, align 16
  %9034 = load <4 x i32>, <4 x i32>* %8773, align 16
  %9035 = load <4 x i32>, <4 x i32>* %8789, align 16
  %9036 = shufflevector <4 x i32> %9034, <4 x i32> %9035, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9037 = bitcast <4 x i32> %9036 to <2 x i64>
  %9038 = shufflevector <4 x i32> %9034, <4 x i32> %9035, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9039 = bitcast <4 x i32> %9038 to <2 x i64>
  %9040 = load <4 x i32>, <4 x i32>* %8805, align 16
  %9041 = load <4 x i32>, <4 x i32>* %8821, align 16
  %9042 = shufflevector <4 x i32> %9040, <4 x i32> %9041, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9043 = bitcast <4 x i32> %9042 to <2 x i64>
  %9044 = shufflevector <4 x i32> %9040, <4 x i32> %9041, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9045 = bitcast <4 x i32> %9044 to <2 x i64>
  %9046 = shufflevector <2 x i64> %9037, <2 x i64> %9043, <2 x i32> <i32 0, i32 2>
  %9047 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %9046, <2 x i64>* %9047, align 16
  %9048 = shufflevector <2 x i64> %9037, <2 x i64> %9043, <2 x i32> <i32 1, i32 3>
  %9049 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %9048, <2 x i64>* %9049, align 16
  %9050 = shufflevector <2 x i64> %9039, <2 x i64> %9045, <2 x i32> <i32 0, i32 2>
  %9051 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %9050, <2 x i64>* %9051, align 16
  %9052 = shufflevector <2 x i64> %9039, <2 x i64> %9045, <2 x i32> <i32 1, i32 3>
  %9053 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %9052, <2 x i64>* %9053, align 16
  %9054 = load <4 x i32>, <4 x i32>* %8777, align 16
  %9055 = load <4 x i32>, <4 x i32>* %8793, align 16
  %9056 = shufflevector <4 x i32> %9054, <4 x i32> %9055, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9057 = bitcast <4 x i32> %9056 to <2 x i64>
  %9058 = shufflevector <4 x i32> %9054, <4 x i32> %9055, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9059 = bitcast <4 x i32> %9058 to <2 x i64>
  %9060 = load <4 x i32>, <4 x i32>* %8809, align 16
  %9061 = load <4 x i32>, <4 x i32>* %8825, align 16
  %9062 = shufflevector <4 x i32> %9060, <4 x i32> %9061, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9063 = bitcast <4 x i32> %9062 to <2 x i64>
  %9064 = shufflevector <4 x i32> %9060, <4 x i32> %9061, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9065 = bitcast <4 x i32> %9064 to <2 x i64>
  %9066 = shufflevector <2 x i64> %9057, <2 x i64> %9063, <2 x i32> <i32 0, i32 2>
  %9067 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %9066, <2 x i64>* %9067, align 16
  %9068 = shufflevector <2 x i64> %9057, <2 x i64> %9063, <2 x i32> <i32 1, i32 3>
  %9069 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %9068, <2 x i64>* %9069, align 16
  %9070 = shufflevector <2 x i64> %9059, <2 x i64> %9065, <2 x i32> <i32 0, i32 2>
  %9071 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %9070, <2 x i64>* %9071, align 16
  %9072 = shufflevector <2 x i64> %9059, <2 x i64> %9065, <2 x i32> <i32 1, i32 3>
  %9073 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %9072, <2 x i64>* %9073, align 16
  %9074 = load <4 x i32>, <4 x i32>* %8701, align 16
  %9075 = load <4 x i32>, <4 x i32>* %8717, align 16
  %9076 = shufflevector <4 x i32> %9074, <4 x i32> %9075, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9077 = bitcast <4 x i32> %9076 to <2 x i64>
  %9078 = shufflevector <4 x i32> %9074, <4 x i32> %9075, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9079 = bitcast <4 x i32> %9078 to <2 x i64>
  %9080 = load <4 x i32>, <4 x i32>* %8733, align 16
  %9081 = load <4 x i32>, <4 x i32>* %8749, align 16
  %9082 = shufflevector <4 x i32> %9080, <4 x i32> %9081, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9083 = bitcast <4 x i32> %9082 to <2 x i64>
  %9084 = shufflevector <4 x i32> %9080, <4 x i32> %9081, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9085 = bitcast <4 x i32> %9084 to <2 x i64>
  %9086 = shufflevector <2 x i64> %9077, <2 x i64> %9083, <2 x i32> <i32 0, i32 2>
  %9087 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %9086, <2 x i64>* %9087, align 16
  %9088 = shufflevector <2 x i64> %9077, <2 x i64> %9083, <2 x i32> <i32 1, i32 3>
  %9089 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %9088, <2 x i64>* %9089, align 16
  %9090 = shufflevector <2 x i64> %9079, <2 x i64> %9085, <2 x i32> <i32 0, i32 2>
  %9091 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %9090, <2 x i64>* %9091, align 16
  %9092 = shufflevector <2 x i64> %9079, <2 x i64> %9085, <2 x i32> <i32 1, i32 3>
  %9093 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %9092, <2 x i64>* %9093, align 16
  %9094 = load <4 x i32>, <4 x i32>* %8705, align 16
  %9095 = load <4 x i32>, <4 x i32>* %8721, align 16
  %9096 = shufflevector <4 x i32> %9094, <4 x i32> %9095, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9097 = bitcast <4 x i32> %9096 to <2 x i64>
  %9098 = shufflevector <4 x i32> %9094, <4 x i32> %9095, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9099 = bitcast <4 x i32> %9098 to <2 x i64>
  %9100 = load <4 x i32>, <4 x i32>* %8737, align 16
  %9101 = load <4 x i32>, <4 x i32>* %8753, align 16
  %9102 = shufflevector <4 x i32> %9100, <4 x i32> %9101, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9103 = bitcast <4 x i32> %9102 to <2 x i64>
  %9104 = shufflevector <4 x i32> %9100, <4 x i32> %9101, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9105 = bitcast <4 x i32> %9104 to <2 x i64>
  %9106 = shufflevector <2 x i64> %9097, <2 x i64> %9103, <2 x i32> <i32 0, i32 2>
  %9107 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %9106, <2 x i64>* %9107, align 16
  %9108 = shufflevector <2 x i64> %9097, <2 x i64> %9103, <2 x i32> <i32 1, i32 3>
  %9109 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %9108, <2 x i64>* %9109, align 16
  %9110 = shufflevector <2 x i64> %9099, <2 x i64> %9105, <2 x i32> <i32 0, i32 2>
  %9111 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %9110, <2 x i64>* %9111, align 16
  %9112 = shufflevector <2 x i64> %9099, <2 x i64> %9105, <2 x i32> <i32 1, i32 3>
  %9113 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %9112, <2 x i64>* %9113, align 16
  %9114 = load <4 x i32>, <4 x i32>* %8781, align 16
  %9115 = load <4 x i32>, <4 x i32>* %8797, align 16
  %9116 = shufflevector <4 x i32> %9114, <4 x i32> %9115, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9117 = bitcast <4 x i32> %9116 to <2 x i64>
  %9118 = shufflevector <4 x i32> %9114, <4 x i32> %9115, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9119 = bitcast <4 x i32> %9118 to <2 x i64>
  %9120 = load <4 x i32>, <4 x i32>* %8813, align 16
  %9121 = load <4 x i32>, <4 x i32>* %8829, align 16
  %9122 = shufflevector <4 x i32> %9120, <4 x i32> %9121, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9123 = bitcast <4 x i32> %9122 to <2 x i64>
  %9124 = shufflevector <4 x i32> %9120, <4 x i32> %9121, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9125 = bitcast <4 x i32> %9124 to <2 x i64>
  %9126 = shufflevector <2 x i64> %9117, <2 x i64> %9123, <2 x i32> <i32 0, i32 2>
  %9127 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %9126, <2 x i64>* %9127, align 16
  %9128 = shufflevector <2 x i64> %9117, <2 x i64> %9123, <2 x i32> <i32 1, i32 3>
  %9129 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %9128, <2 x i64>* %9129, align 16
  %9130 = shufflevector <2 x i64> %9119, <2 x i64> %9125, <2 x i32> <i32 0, i32 2>
  %9131 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %9130, <2 x i64>* %9131, align 16
  %9132 = shufflevector <2 x i64> %9119, <2 x i64> %9125, <2 x i32> <i32 1, i32 3>
  %9133 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %9132, <2 x i64>* %9133, align 16
  %9134 = load <4 x i32>, <4 x i32>* %8785, align 16
  %9135 = load <4 x i32>, <4 x i32>* %8801, align 16
  %9136 = shufflevector <4 x i32> %9134, <4 x i32> %9135, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9137 = bitcast <4 x i32> %9136 to <2 x i64>
  %9138 = shufflevector <4 x i32> %9134, <4 x i32> %9135, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9139 = bitcast <4 x i32> %9138 to <2 x i64>
  %9140 = load <4 x i32>, <4 x i32>* %8817, align 16
  %9141 = load <4 x i32>, <4 x i32>* %8833, align 16
  %9142 = shufflevector <4 x i32> %9140, <4 x i32> %9141, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9143 = bitcast <4 x i32> %9142 to <2 x i64>
  %9144 = shufflevector <4 x i32> %9140, <4 x i32> %9141, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9145 = bitcast <4 x i32> %9144 to <2 x i64>
  %9146 = shufflevector <2 x i64> %9137, <2 x i64> %9143, <2 x i32> <i32 0, i32 2>
  %9147 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %9146, <2 x i64>* %9147, align 16
  %9148 = shufflevector <2 x i64> %9137, <2 x i64> %9143, <2 x i32> <i32 1, i32 3>
  %9149 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %9148, <2 x i64>* %9149, align 16
  %9150 = shufflevector <2 x i64> %9139, <2 x i64> %9145, <2 x i32> <i32 0, i32 2>
  %9151 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %9150, <2 x i64>* %9151, align 16
  %9152 = shufflevector <2 x i64> %9139, <2 x i64> %9145, <2 x i32> <i32 1, i32 3>
  %9153 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %9152, <2 x i64>* %9153, align 16
  %9154 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  %9155 = sext i8 %9154 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %8519, <2 x i64>* nonnull %8522, i32 %9155, i32 4)
  %9156 = load <4 x i32>, <4 x i32>* %8533, align 16
  %9157 = load <4 x i32>, <4 x i32>* %8549, align 16
  %9158 = shufflevector <4 x i32> %9156, <4 x i32> %9157, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9159 = bitcast <4 x i32> %9158 to <2 x i64>
  %9160 = shufflevector <4 x i32> %9156, <4 x i32> %9157, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9161 = bitcast <4 x i32> %9160 to <2 x i64>
  %9162 = load <4 x i32>, <4 x i32>* %8565, align 16
  %9163 = load <4 x i32>, <4 x i32>* %8581, align 16
  %9164 = shufflevector <4 x i32> %9162, <4 x i32> %9163, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9165 = bitcast <4 x i32> %9164 to <2 x i64>
  %9166 = shufflevector <4 x i32> %9162, <4 x i32> %9163, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9167 = bitcast <4 x i32> %9166 to <2 x i64>
  %9168 = shufflevector <2 x i64> %9159, <2 x i64> %9165, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9168, <2 x i64>* %8519, align 16
  %9169 = shufflevector <2 x i64> %9159, <2 x i64> %9165, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9169, <2 x i64>* %8862, align 16
  %9170 = shufflevector <2 x i64> %9161, <2 x i64> %9167, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9170, <2 x i64>* %8864, align 16
  %9171 = shufflevector <2 x i64> %9161, <2 x i64> %9167, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9171, <2 x i64>* %8866, align 16
  %9172 = load <4 x i32>, <4 x i32>* %8537, align 16
  %9173 = load <4 x i32>, <4 x i32>* %8553, align 16
  %9174 = shufflevector <4 x i32> %9172, <4 x i32> %9173, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9175 = bitcast <4 x i32> %9174 to <2 x i64>
  %9176 = shufflevector <4 x i32> %9172, <4 x i32> %9173, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9177 = bitcast <4 x i32> %9176 to <2 x i64>
  %9178 = load <4 x i32>, <4 x i32>* %8569, align 16
  %9179 = load <4 x i32>, <4 x i32>* %8585, align 16
  %9180 = shufflevector <4 x i32> %9178, <4 x i32> %9179, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9181 = bitcast <4 x i32> %9180 to <2 x i64>
  %9182 = shufflevector <4 x i32> %9178, <4 x i32> %9179, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9183 = bitcast <4 x i32> %9182 to <2 x i64>
  %9184 = shufflevector <2 x i64> %9175, <2 x i64> %9181, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9184, <2 x i64>* %8876, align 16
  %9185 = shufflevector <2 x i64> %9175, <2 x i64> %9181, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9185, <2 x i64>* %8878, align 16
  %9186 = shufflevector <2 x i64> %9177, <2 x i64> %9183, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9186, <2 x i64>* %8880, align 16
  %9187 = shufflevector <2 x i64> %9177, <2 x i64> %9183, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9187, <2 x i64>* %8882, align 16
  %9188 = load <4 x i32>, <4 x i32>* %8613, align 16
  %9189 = load <4 x i32>, <4 x i32>* %8629, align 16
  %9190 = shufflevector <4 x i32> %9188, <4 x i32> %9189, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9191 = bitcast <4 x i32> %9190 to <2 x i64>
  %9192 = shufflevector <4 x i32> %9188, <4 x i32> %9189, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9193 = bitcast <4 x i32> %9192 to <2 x i64>
  %9194 = load <4 x i32>, <4 x i32>* %8645, align 16
  %9195 = load <4 x i32>, <4 x i32>* %8661, align 16
  %9196 = shufflevector <4 x i32> %9194, <4 x i32> %9195, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9197 = bitcast <4 x i32> %9196 to <2 x i64>
  %9198 = shufflevector <4 x i32> %9194, <4 x i32> %9195, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9199 = bitcast <4 x i32> %9198 to <2 x i64>
  %9200 = shufflevector <2 x i64> %9191, <2 x i64> %9197, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9200, <2 x i64>* %8895, align 16
  %9201 = shufflevector <2 x i64> %9191, <2 x i64> %9197, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9201, <2 x i64>* %8897, align 16
  %9202 = shufflevector <2 x i64> %9193, <2 x i64> %9199, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9202, <2 x i64>* %8899, align 16
  %9203 = shufflevector <2 x i64> %9193, <2 x i64> %9199, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9203, <2 x i64>* %8901, align 16
  %9204 = load <4 x i32>, <4 x i32>* %8617, align 16
  %9205 = load <4 x i32>, <4 x i32>* %8633, align 16
  %9206 = shufflevector <4 x i32> %9204, <4 x i32> %9205, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9207 = bitcast <4 x i32> %9206 to <2 x i64>
  %9208 = shufflevector <4 x i32> %9204, <4 x i32> %9205, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9209 = bitcast <4 x i32> %9208 to <2 x i64>
  %9210 = load <4 x i32>, <4 x i32>* %8649, align 16
  %9211 = load <4 x i32>, <4 x i32>* %8665, align 16
  %9212 = shufflevector <4 x i32> %9210, <4 x i32> %9211, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9213 = bitcast <4 x i32> %9212 to <2 x i64>
  %9214 = shufflevector <4 x i32> %9210, <4 x i32> %9211, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9215 = bitcast <4 x i32> %9214 to <2 x i64>
  %9216 = shufflevector <2 x i64> %9207, <2 x i64> %9213, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9216, <2 x i64>* %8915, align 16
  %9217 = shufflevector <2 x i64> %9207, <2 x i64> %9213, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9217, <2 x i64>* %8917, align 16
  %9218 = shufflevector <2 x i64> %9209, <2 x i64> %9215, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9218, <2 x i64>* %8919, align 16
  %9219 = shufflevector <2 x i64> %9209, <2 x i64> %9215, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9219, <2 x i64>* %8921, align 16
  %9220 = load <4 x i32>, <4 x i32>* %8541, align 16
  %9221 = load <4 x i32>, <4 x i32>* %8557, align 16
  %9222 = shufflevector <4 x i32> %9220, <4 x i32> %9221, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9223 = bitcast <4 x i32> %9222 to <2 x i64>
  %9224 = shufflevector <4 x i32> %9220, <4 x i32> %9221, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9225 = bitcast <4 x i32> %9224 to <2 x i64>
  %9226 = load <4 x i32>, <4 x i32>* %8573, align 16
  %9227 = load <4 x i32>, <4 x i32>* %8589, align 16
  %9228 = shufflevector <4 x i32> %9226, <4 x i32> %9227, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9229 = bitcast <4 x i32> %9228 to <2 x i64>
  %9230 = shufflevector <4 x i32> %9226, <4 x i32> %9227, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9231 = bitcast <4 x i32> %9230 to <2 x i64>
  %9232 = shufflevector <2 x i64> %9223, <2 x i64> %9229, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9232, <2 x i64>* %8931, align 16
  %9233 = shufflevector <2 x i64> %9223, <2 x i64> %9229, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9233, <2 x i64>* %8933, align 16
  %9234 = shufflevector <2 x i64> %9225, <2 x i64> %9231, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9234, <2 x i64>* %8935, align 16
  %9235 = shufflevector <2 x i64> %9225, <2 x i64> %9231, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9235, <2 x i64>* %8937, align 16
  %9236 = load <4 x i32>, <4 x i32>* %8545, align 16
  %9237 = load <4 x i32>, <4 x i32>* %8561, align 16
  %9238 = shufflevector <4 x i32> %9236, <4 x i32> %9237, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9239 = bitcast <4 x i32> %9238 to <2 x i64>
  %9240 = shufflevector <4 x i32> %9236, <4 x i32> %9237, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9241 = bitcast <4 x i32> %9240 to <2 x i64>
  %9242 = load <4 x i32>, <4 x i32>* %8577, align 16
  %9243 = load <4 x i32>, <4 x i32>* %8593, align 16
  %9244 = shufflevector <4 x i32> %9242, <4 x i32> %9243, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9245 = bitcast <4 x i32> %9244 to <2 x i64>
  %9246 = shufflevector <4 x i32> %9242, <4 x i32> %9243, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9247 = bitcast <4 x i32> %9246 to <2 x i64>
  %9248 = shufflevector <2 x i64> %9239, <2 x i64> %9245, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9248, <2 x i64>* %8947, align 16
  %9249 = shufflevector <2 x i64> %9239, <2 x i64> %9245, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9249, <2 x i64>* %8949, align 16
  %9250 = shufflevector <2 x i64> %9241, <2 x i64> %9247, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9250, <2 x i64>* %8951, align 16
  %9251 = shufflevector <2 x i64> %9241, <2 x i64> %9247, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9251, <2 x i64>* %8953, align 16
  %9252 = load <4 x i32>, <4 x i32>* %8621, align 16
  %9253 = load <4 x i32>, <4 x i32>* %8637, align 16
  %9254 = shufflevector <4 x i32> %9252, <4 x i32> %9253, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9255 = bitcast <4 x i32> %9254 to <2 x i64>
  %9256 = shufflevector <4 x i32> %9252, <4 x i32> %9253, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9257 = bitcast <4 x i32> %9256 to <2 x i64>
  %9258 = load <4 x i32>, <4 x i32>* %8653, align 16
  %9259 = load <4 x i32>, <4 x i32>* %8669, align 16
  %9260 = shufflevector <4 x i32> %9258, <4 x i32> %9259, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9261 = bitcast <4 x i32> %9260 to <2 x i64>
  %9262 = shufflevector <4 x i32> %9258, <4 x i32> %9259, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9263 = bitcast <4 x i32> %9262 to <2 x i64>
  %9264 = shufflevector <2 x i64> %9255, <2 x i64> %9261, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9264, <2 x i64>* %8967, align 16
  %9265 = shufflevector <2 x i64> %9255, <2 x i64> %9261, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9265, <2 x i64>* %8969, align 16
  %9266 = shufflevector <2 x i64> %9257, <2 x i64> %9263, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9266, <2 x i64>* %8971, align 16
  %9267 = shufflevector <2 x i64> %9257, <2 x i64> %9263, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9267, <2 x i64>* %8973, align 16
  %9268 = load <4 x i32>, <4 x i32>* %8625, align 16
  %9269 = load <4 x i32>, <4 x i32>* %8641, align 16
  %9270 = shufflevector <4 x i32> %9268, <4 x i32> %9269, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9271 = bitcast <4 x i32> %9270 to <2 x i64>
  %9272 = shufflevector <4 x i32> %9268, <4 x i32> %9269, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9273 = bitcast <4 x i32> %9272 to <2 x i64>
  %9274 = load <4 x i32>, <4 x i32>* %8657, align 16
  %9275 = load <4 x i32>, <4 x i32>* %8673, align 16
  %9276 = shufflevector <4 x i32> %9274, <4 x i32> %9275, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9277 = bitcast <4 x i32> %9276 to <2 x i64>
  %9278 = shufflevector <4 x i32> %9274, <4 x i32> %9275, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9279 = bitcast <4 x i32> %9278 to <2 x i64>
  %9280 = shufflevector <2 x i64> %9271, <2 x i64> %9277, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9280, <2 x i64>* %8987, align 16
  %9281 = shufflevector <2 x i64> %9271, <2 x i64> %9277, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9281, <2 x i64>* %8989, align 16
  %9282 = shufflevector <2 x i64> %9273, <2 x i64> %9279, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9282, <2 x i64>* %8991, align 16
  %9283 = shufflevector <2 x i64> %9273, <2 x i64> %9279, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9283, <2 x i64>* %8993, align 16
  %9284 = load <4 x i32>, <4 x i32>* %8693, align 16
  %9285 = load <4 x i32>, <4 x i32>* %8709, align 16
  %9286 = shufflevector <4 x i32> %9284, <4 x i32> %9285, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9287 = bitcast <4 x i32> %9286 to <2 x i64>
  %9288 = shufflevector <4 x i32> %9284, <4 x i32> %9285, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9289 = bitcast <4 x i32> %9288 to <2 x i64>
  %9290 = load <4 x i32>, <4 x i32>* %8725, align 16
  %9291 = load <4 x i32>, <4 x i32>* %8741, align 16
  %9292 = shufflevector <4 x i32> %9290, <4 x i32> %9291, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9293 = bitcast <4 x i32> %9292 to <2 x i64>
  %9294 = shufflevector <4 x i32> %9290, <4 x i32> %9291, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9295 = bitcast <4 x i32> %9294 to <2 x i64>
  %9296 = shufflevector <2 x i64> %9287, <2 x i64> %9293, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9296, <2 x i64>* %9007, align 16
  %9297 = shufflevector <2 x i64> %9287, <2 x i64> %9293, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9297, <2 x i64>* %9009, align 16
  %9298 = shufflevector <2 x i64> %9289, <2 x i64> %9295, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9298, <2 x i64>* %9011, align 16
  %9299 = shufflevector <2 x i64> %9289, <2 x i64> %9295, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9299, <2 x i64>* %9013, align 16
  %9300 = load <4 x i32>, <4 x i32>* %8697, align 16
  %9301 = load <4 x i32>, <4 x i32>* %8713, align 16
  %9302 = shufflevector <4 x i32> %9300, <4 x i32> %9301, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9303 = bitcast <4 x i32> %9302 to <2 x i64>
  %9304 = shufflevector <4 x i32> %9300, <4 x i32> %9301, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9305 = bitcast <4 x i32> %9304 to <2 x i64>
  %9306 = load <4 x i32>, <4 x i32>* %8729, align 16
  %9307 = load <4 x i32>, <4 x i32>* %8745, align 16
  %9308 = shufflevector <4 x i32> %9306, <4 x i32> %9307, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9309 = bitcast <4 x i32> %9308 to <2 x i64>
  %9310 = shufflevector <4 x i32> %9306, <4 x i32> %9307, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9311 = bitcast <4 x i32> %9310 to <2 x i64>
  %9312 = shufflevector <2 x i64> %9303, <2 x i64> %9309, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9312, <2 x i64>* %9027, align 16
  %9313 = shufflevector <2 x i64> %9303, <2 x i64> %9309, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9313, <2 x i64>* %9029, align 16
  %9314 = shufflevector <2 x i64> %9305, <2 x i64> %9311, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9314, <2 x i64>* %9031, align 16
  %9315 = shufflevector <2 x i64> %9305, <2 x i64> %9311, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9315, <2 x i64>* %9033, align 16
  %9316 = load <4 x i32>, <4 x i32>* %8773, align 16
  %9317 = load <4 x i32>, <4 x i32>* %8789, align 16
  %9318 = shufflevector <4 x i32> %9316, <4 x i32> %9317, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9319 = bitcast <4 x i32> %9318 to <2 x i64>
  %9320 = shufflevector <4 x i32> %9316, <4 x i32> %9317, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9321 = bitcast <4 x i32> %9320 to <2 x i64>
  %9322 = load <4 x i32>, <4 x i32>* %8805, align 16
  %9323 = load <4 x i32>, <4 x i32>* %8821, align 16
  %9324 = shufflevector <4 x i32> %9322, <4 x i32> %9323, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9325 = bitcast <4 x i32> %9324 to <2 x i64>
  %9326 = shufflevector <4 x i32> %9322, <4 x i32> %9323, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9327 = bitcast <4 x i32> %9326 to <2 x i64>
  %9328 = shufflevector <2 x i64> %9319, <2 x i64> %9325, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9328, <2 x i64>* %9047, align 16
  %9329 = shufflevector <2 x i64> %9319, <2 x i64> %9325, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9329, <2 x i64>* %9049, align 16
  %9330 = shufflevector <2 x i64> %9321, <2 x i64> %9327, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9330, <2 x i64>* %9051, align 16
  %9331 = shufflevector <2 x i64> %9321, <2 x i64> %9327, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9331, <2 x i64>* %9053, align 16
  %9332 = load <4 x i32>, <4 x i32>* %8777, align 16
  %9333 = load <4 x i32>, <4 x i32>* %8793, align 16
  %9334 = shufflevector <4 x i32> %9332, <4 x i32> %9333, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9335 = bitcast <4 x i32> %9334 to <2 x i64>
  %9336 = shufflevector <4 x i32> %9332, <4 x i32> %9333, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9337 = bitcast <4 x i32> %9336 to <2 x i64>
  %9338 = load <4 x i32>, <4 x i32>* %8809, align 16
  %9339 = load <4 x i32>, <4 x i32>* %8825, align 16
  %9340 = shufflevector <4 x i32> %9338, <4 x i32> %9339, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9341 = bitcast <4 x i32> %9340 to <2 x i64>
  %9342 = shufflevector <4 x i32> %9338, <4 x i32> %9339, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9343 = bitcast <4 x i32> %9342 to <2 x i64>
  %9344 = shufflevector <2 x i64> %9335, <2 x i64> %9341, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9344, <2 x i64>* %9067, align 16
  %9345 = shufflevector <2 x i64> %9335, <2 x i64> %9341, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9345, <2 x i64>* %9069, align 16
  %9346 = shufflevector <2 x i64> %9337, <2 x i64> %9343, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9346, <2 x i64>* %9071, align 16
  %9347 = shufflevector <2 x i64> %9337, <2 x i64> %9343, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9347, <2 x i64>* %9073, align 16
  %9348 = load <4 x i32>, <4 x i32>* %8701, align 16
  %9349 = load <4 x i32>, <4 x i32>* %8717, align 16
  %9350 = shufflevector <4 x i32> %9348, <4 x i32> %9349, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9351 = bitcast <4 x i32> %9350 to <2 x i64>
  %9352 = shufflevector <4 x i32> %9348, <4 x i32> %9349, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9353 = bitcast <4 x i32> %9352 to <2 x i64>
  %9354 = load <4 x i32>, <4 x i32>* %8733, align 16
  %9355 = load <4 x i32>, <4 x i32>* %8749, align 16
  %9356 = shufflevector <4 x i32> %9354, <4 x i32> %9355, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9357 = bitcast <4 x i32> %9356 to <2 x i64>
  %9358 = shufflevector <4 x i32> %9354, <4 x i32> %9355, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9359 = bitcast <4 x i32> %9358 to <2 x i64>
  %9360 = shufflevector <2 x i64> %9351, <2 x i64> %9357, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9360, <2 x i64>* %9087, align 16
  %9361 = shufflevector <2 x i64> %9351, <2 x i64> %9357, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9361, <2 x i64>* %9089, align 16
  %9362 = shufflevector <2 x i64> %9353, <2 x i64> %9359, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9362, <2 x i64>* %9091, align 16
  %9363 = shufflevector <2 x i64> %9353, <2 x i64> %9359, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9363, <2 x i64>* %9093, align 16
  %9364 = load <4 x i32>, <4 x i32>* %8705, align 16
  %9365 = load <4 x i32>, <4 x i32>* %8721, align 16
  %9366 = shufflevector <4 x i32> %9364, <4 x i32> %9365, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9367 = bitcast <4 x i32> %9366 to <2 x i64>
  %9368 = shufflevector <4 x i32> %9364, <4 x i32> %9365, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9369 = bitcast <4 x i32> %9368 to <2 x i64>
  %9370 = load <4 x i32>, <4 x i32>* %8737, align 16
  %9371 = load <4 x i32>, <4 x i32>* %8753, align 16
  %9372 = shufflevector <4 x i32> %9370, <4 x i32> %9371, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9373 = bitcast <4 x i32> %9372 to <2 x i64>
  %9374 = shufflevector <4 x i32> %9370, <4 x i32> %9371, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9375 = bitcast <4 x i32> %9374 to <2 x i64>
  %9376 = shufflevector <2 x i64> %9367, <2 x i64> %9373, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9376, <2 x i64>* %9107, align 16
  %9377 = shufflevector <2 x i64> %9367, <2 x i64> %9373, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9377, <2 x i64>* %9109, align 16
  %9378 = shufflevector <2 x i64> %9369, <2 x i64> %9375, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9378, <2 x i64>* %9111, align 16
  %9379 = shufflevector <2 x i64> %9369, <2 x i64> %9375, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9379, <2 x i64>* %9113, align 16
  %9380 = load <4 x i32>, <4 x i32>* %8781, align 16
  %9381 = load <4 x i32>, <4 x i32>* %8797, align 16
  %9382 = shufflevector <4 x i32> %9380, <4 x i32> %9381, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9383 = bitcast <4 x i32> %9382 to <2 x i64>
  %9384 = shufflevector <4 x i32> %9380, <4 x i32> %9381, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9385 = bitcast <4 x i32> %9384 to <2 x i64>
  %9386 = load <4 x i32>, <4 x i32>* %8813, align 16
  %9387 = load <4 x i32>, <4 x i32>* %8829, align 16
  %9388 = shufflevector <4 x i32> %9386, <4 x i32> %9387, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9389 = bitcast <4 x i32> %9388 to <2 x i64>
  %9390 = shufflevector <4 x i32> %9386, <4 x i32> %9387, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9391 = bitcast <4 x i32> %9390 to <2 x i64>
  %9392 = shufflevector <2 x i64> %9383, <2 x i64> %9389, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9392, <2 x i64>* %9127, align 16
  %9393 = shufflevector <2 x i64> %9383, <2 x i64> %9389, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9393, <2 x i64>* %9129, align 16
  %9394 = shufflevector <2 x i64> %9385, <2 x i64> %9391, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9394, <2 x i64>* %9131, align 16
  %9395 = shufflevector <2 x i64> %9385, <2 x i64> %9391, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9395, <2 x i64>* %9133, align 16
  %9396 = load <4 x i32>, <4 x i32>* %8785, align 16
  %9397 = load <4 x i32>, <4 x i32>* %8801, align 16
  %9398 = shufflevector <4 x i32> %9396, <4 x i32> %9397, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9399 = bitcast <4 x i32> %9398 to <2 x i64>
  %9400 = shufflevector <4 x i32> %9396, <4 x i32> %9397, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9401 = bitcast <4 x i32> %9400 to <2 x i64>
  %9402 = load <4 x i32>, <4 x i32>* %8817, align 16
  %9403 = load <4 x i32>, <4 x i32>* %8833, align 16
  %9404 = shufflevector <4 x i32> %9402, <4 x i32> %9403, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9405 = bitcast <4 x i32> %9404 to <2 x i64>
  %9406 = shufflevector <4 x i32> %9402, <4 x i32> %9403, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9407 = bitcast <4 x i32> %9406 to <2 x i64>
  %9408 = shufflevector <2 x i64> %9399, <2 x i64> %9405, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9408, <2 x i64>* %9147, align 16
  %9409 = shufflevector <2 x i64> %9399, <2 x i64> %9405, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9409, <2 x i64>* %9149, align 16
  %9410 = shufflevector <2 x i64> %9401, <2 x i64> %9407, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9410, <2 x i64>* %9151, align 16
  %9411 = shufflevector <2 x i64> %9401, <2 x i64> %9407, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %9411, <2 x i64>* %9153, align 16
  %9412 = bitcast i32* %1 to <2 x i64>*
  %9413 = load <2 x i64>, <2 x i64>* %8519, align 16
  store <2 x i64> %9413, <2 x i64>* %9412, align 16
  %9414 = getelementptr inbounds i32, i32* %1, i64 4
  %9415 = bitcast i32* %9414 to <2 x i64>*
  %9416 = load <2 x i64>, <2 x i64>* %8895, align 16
  store <2 x i64> %9416, <2 x i64>* %9415, align 16
  %9417 = getelementptr inbounds i32, i32* %1, i64 8
  %9418 = bitcast i32* %9417 to <2 x i64>*
  %9419 = load <2 x i64>, <2 x i64>* %9007, align 16
  store <2 x i64> %9419, <2 x i64>* %9418, align 16
  %9420 = getelementptr inbounds i32, i32* %1, i64 12
  %9421 = bitcast i32* %9420 to <2 x i64>*
  %9422 = load <2 x i64>, <2 x i64>* %9047, align 16
  store <2 x i64> %9422, <2 x i64>* %9421, align 16
  %9423 = getelementptr inbounds i32, i32* %1, i64 16
  %9424 = bitcast i32* %9423 to <2 x i64>*
  %9425 = load <2 x i64>, <2 x i64>* %8862, align 16
  store <2 x i64> %9425, <2 x i64>* %9424, align 16
  %9426 = getelementptr inbounds i32, i32* %1, i64 20
  %9427 = bitcast i32* %9426 to <2 x i64>*
  %9428 = load <2 x i64>, <2 x i64>* %8897, align 16
  store <2 x i64> %9428, <2 x i64>* %9427, align 16
  %9429 = getelementptr inbounds i32, i32* %1, i64 24
  %9430 = bitcast i32* %9429 to <2 x i64>*
  %9431 = load <2 x i64>, <2 x i64>* %9009, align 16
  store <2 x i64> %9431, <2 x i64>* %9430, align 16
  %9432 = getelementptr inbounds i32, i32* %1, i64 28
  %9433 = bitcast i32* %9432 to <2 x i64>*
  %9434 = load <2 x i64>, <2 x i64>* %9049, align 16
  store <2 x i64> %9434, <2 x i64>* %9433, align 16
  %9435 = getelementptr inbounds i32, i32* %1, i64 32
  %9436 = bitcast i32* %9435 to <2 x i64>*
  %9437 = load <2 x i64>, <2 x i64>* %8864, align 16
  store <2 x i64> %9437, <2 x i64>* %9436, align 16
  %9438 = getelementptr inbounds i32, i32* %1, i64 36
  %9439 = bitcast i32* %9438 to <2 x i64>*
  %9440 = load <2 x i64>, <2 x i64>* %8899, align 16
  store <2 x i64> %9440, <2 x i64>* %9439, align 16
  %9441 = getelementptr inbounds i32, i32* %1, i64 40
  %9442 = bitcast i32* %9441 to <2 x i64>*
  %9443 = load <2 x i64>, <2 x i64>* %9011, align 16
  store <2 x i64> %9443, <2 x i64>* %9442, align 16
  %9444 = getelementptr inbounds i32, i32* %1, i64 44
  %9445 = bitcast i32* %9444 to <2 x i64>*
  %9446 = load <2 x i64>, <2 x i64>* %9051, align 16
  store <2 x i64> %9446, <2 x i64>* %9445, align 16
  %9447 = getelementptr inbounds i32, i32* %1, i64 48
  %9448 = bitcast i32* %9447 to <2 x i64>*
  %9449 = load <2 x i64>, <2 x i64>* %8866, align 16
  store <2 x i64> %9449, <2 x i64>* %9448, align 16
  %9450 = getelementptr inbounds i32, i32* %1, i64 52
  %9451 = bitcast i32* %9450 to <2 x i64>*
  %9452 = load <2 x i64>, <2 x i64>* %8901, align 16
  store <2 x i64> %9452, <2 x i64>* %9451, align 16
  %9453 = getelementptr inbounds i32, i32* %1, i64 56
  %9454 = bitcast i32* %9453 to <2 x i64>*
  %9455 = load <2 x i64>, <2 x i64>* %9013, align 16
  store <2 x i64> %9455, <2 x i64>* %9454, align 16
  %9456 = getelementptr inbounds i32, i32* %1, i64 60
  %9457 = bitcast i32* %9456 to <2 x i64>*
  %9458 = load <2 x i64>, <2 x i64>* %9053, align 16
  store <2 x i64> %9458, <2 x i64>* %9457, align 16
  %9459 = getelementptr inbounds i32, i32* %1, i64 64
  %9460 = bitcast i32* %9459 to <2 x i64>*
  %9461 = load <2 x i64>, <2 x i64>* %8876, align 16
  store <2 x i64> %9461, <2 x i64>* %9460, align 16
  %9462 = getelementptr inbounds i32, i32* %1, i64 68
  %9463 = bitcast i32* %9462 to <2 x i64>*
  %9464 = load <2 x i64>, <2 x i64>* %8915, align 16
  store <2 x i64> %9464, <2 x i64>* %9463, align 16
  %9465 = getelementptr inbounds i32, i32* %1, i64 72
  %9466 = bitcast i32* %9465 to <2 x i64>*
  %9467 = load <2 x i64>, <2 x i64>* %9027, align 16
  store <2 x i64> %9467, <2 x i64>* %9466, align 16
  %9468 = getelementptr inbounds i32, i32* %1, i64 76
  %9469 = bitcast i32* %9468 to <2 x i64>*
  %9470 = load <2 x i64>, <2 x i64>* %9067, align 16
  store <2 x i64> %9470, <2 x i64>* %9469, align 16
  %9471 = getelementptr inbounds i32, i32* %1, i64 80
  %9472 = bitcast i32* %9471 to <2 x i64>*
  %9473 = load <2 x i64>, <2 x i64>* %8878, align 16
  store <2 x i64> %9473, <2 x i64>* %9472, align 16
  %9474 = getelementptr inbounds i32, i32* %1, i64 84
  %9475 = bitcast i32* %9474 to <2 x i64>*
  %9476 = load <2 x i64>, <2 x i64>* %8917, align 16
  store <2 x i64> %9476, <2 x i64>* %9475, align 16
  %9477 = getelementptr inbounds i32, i32* %1, i64 88
  %9478 = bitcast i32* %9477 to <2 x i64>*
  %9479 = load <2 x i64>, <2 x i64>* %9029, align 16
  store <2 x i64> %9479, <2 x i64>* %9478, align 16
  %9480 = getelementptr inbounds i32, i32* %1, i64 92
  %9481 = bitcast i32* %9480 to <2 x i64>*
  %9482 = load <2 x i64>, <2 x i64>* %9069, align 16
  store <2 x i64> %9482, <2 x i64>* %9481, align 16
  %9483 = getelementptr inbounds i32, i32* %1, i64 96
  %9484 = bitcast i32* %9483 to <2 x i64>*
  %9485 = load <2 x i64>, <2 x i64>* %8880, align 16
  store <2 x i64> %9485, <2 x i64>* %9484, align 16
  %9486 = getelementptr inbounds i32, i32* %1, i64 100
  %9487 = bitcast i32* %9486 to <2 x i64>*
  %9488 = load <2 x i64>, <2 x i64>* %8919, align 16
  store <2 x i64> %9488, <2 x i64>* %9487, align 16
  %9489 = getelementptr inbounds i32, i32* %1, i64 104
  %9490 = bitcast i32* %9489 to <2 x i64>*
  %9491 = load <2 x i64>, <2 x i64>* %9031, align 16
  store <2 x i64> %9491, <2 x i64>* %9490, align 16
  %9492 = getelementptr inbounds i32, i32* %1, i64 108
  %9493 = bitcast i32* %9492 to <2 x i64>*
  %9494 = load <2 x i64>, <2 x i64>* %9071, align 16
  store <2 x i64> %9494, <2 x i64>* %9493, align 16
  %9495 = getelementptr inbounds i32, i32* %1, i64 112
  %9496 = bitcast i32* %9495 to <2 x i64>*
  %9497 = load <2 x i64>, <2 x i64>* %8882, align 16
  store <2 x i64> %9497, <2 x i64>* %9496, align 16
  %9498 = getelementptr inbounds i32, i32* %1, i64 116
  %9499 = bitcast i32* %9498 to <2 x i64>*
  %9500 = load <2 x i64>, <2 x i64>* %8921, align 16
  store <2 x i64> %9500, <2 x i64>* %9499, align 16
  %9501 = getelementptr inbounds i32, i32* %1, i64 120
  %9502 = bitcast i32* %9501 to <2 x i64>*
  %9503 = load <2 x i64>, <2 x i64>* %9033, align 16
  store <2 x i64> %9503, <2 x i64>* %9502, align 16
  %9504 = getelementptr inbounds i32, i32* %1, i64 124
  %9505 = bitcast i32* %9504 to <2 x i64>*
  %9506 = load <2 x i64>, <2 x i64>* %9073, align 16
  store <2 x i64> %9506, <2 x i64>* %9505, align 16
  %9507 = getelementptr inbounds i32, i32* %1, i64 128
  %9508 = bitcast i32* %9507 to <2 x i64>*
  %9509 = load <2 x i64>, <2 x i64>* %8931, align 16
  store <2 x i64> %9509, <2 x i64>* %9508, align 16
  %9510 = getelementptr inbounds i32, i32* %1, i64 132
  %9511 = bitcast i32* %9510 to <2 x i64>*
  %9512 = load <2 x i64>, <2 x i64>* %8967, align 16
  store <2 x i64> %9512, <2 x i64>* %9511, align 16
  %9513 = getelementptr inbounds i32, i32* %1, i64 136
  %9514 = bitcast i32* %9513 to <2 x i64>*
  %9515 = load <2 x i64>, <2 x i64>* %9087, align 16
  store <2 x i64> %9515, <2 x i64>* %9514, align 16
  %9516 = getelementptr inbounds i32, i32* %1, i64 140
  %9517 = bitcast i32* %9516 to <2 x i64>*
  %9518 = load <2 x i64>, <2 x i64>* %9127, align 16
  store <2 x i64> %9518, <2 x i64>* %9517, align 16
  %9519 = getelementptr inbounds i32, i32* %1, i64 144
  %9520 = bitcast i32* %9519 to <2 x i64>*
  %9521 = load <2 x i64>, <2 x i64>* %8933, align 16
  store <2 x i64> %9521, <2 x i64>* %9520, align 16
  %9522 = getelementptr inbounds i32, i32* %1, i64 148
  %9523 = bitcast i32* %9522 to <2 x i64>*
  %9524 = load <2 x i64>, <2 x i64>* %8969, align 16
  store <2 x i64> %9524, <2 x i64>* %9523, align 16
  %9525 = getelementptr inbounds i32, i32* %1, i64 152
  %9526 = bitcast i32* %9525 to <2 x i64>*
  %9527 = load <2 x i64>, <2 x i64>* %9089, align 16
  store <2 x i64> %9527, <2 x i64>* %9526, align 16
  %9528 = getelementptr inbounds i32, i32* %1, i64 156
  %9529 = bitcast i32* %9528 to <2 x i64>*
  %9530 = load <2 x i64>, <2 x i64>* %9129, align 16
  store <2 x i64> %9530, <2 x i64>* %9529, align 16
  %9531 = getelementptr inbounds i32, i32* %1, i64 160
  %9532 = bitcast i32* %9531 to <2 x i64>*
  %9533 = load <2 x i64>, <2 x i64>* %8935, align 16
  store <2 x i64> %9533, <2 x i64>* %9532, align 16
  %9534 = getelementptr inbounds i32, i32* %1, i64 164
  %9535 = bitcast i32* %9534 to <2 x i64>*
  %9536 = load <2 x i64>, <2 x i64>* %8971, align 16
  store <2 x i64> %9536, <2 x i64>* %9535, align 16
  %9537 = getelementptr inbounds i32, i32* %1, i64 168
  %9538 = bitcast i32* %9537 to <2 x i64>*
  %9539 = load <2 x i64>, <2 x i64>* %9091, align 16
  store <2 x i64> %9539, <2 x i64>* %9538, align 16
  %9540 = getelementptr inbounds i32, i32* %1, i64 172
  %9541 = bitcast i32* %9540 to <2 x i64>*
  %9542 = load <2 x i64>, <2 x i64>* %9131, align 16
  store <2 x i64> %9542, <2 x i64>* %9541, align 16
  %9543 = getelementptr inbounds i32, i32* %1, i64 176
  %9544 = bitcast i32* %9543 to <2 x i64>*
  %9545 = load <2 x i64>, <2 x i64>* %8937, align 16
  store <2 x i64> %9545, <2 x i64>* %9544, align 16
  %9546 = getelementptr inbounds i32, i32* %1, i64 180
  %9547 = bitcast i32* %9546 to <2 x i64>*
  %9548 = load <2 x i64>, <2 x i64>* %8973, align 16
  store <2 x i64> %9548, <2 x i64>* %9547, align 16
  %9549 = getelementptr inbounds i32, i32* %1, i64 184
  %9550 = bitcast i32* %9549 to <2 x i64>*
  %9551 = load <2 x i64>, <2 x i64>* %9093, align 16
  store <2 x i64> %9551, <2 x i64>* %9550, align 16
  %9552 = getelementptr inbounds i32, i32* %1, i64 188
  %9553 = bitcast i32* %9552 to <2 x i64>*
  %9554 = load <2 x i64>, <2 x i64>* %9133, align 16
  store <2 x i64> %9554, <2 x i64>* %9553, align 16
  %9555 = getelementptr inbounds i32, i32* %1, i64 192
  %9556 = bitcast i32* %9555 to <2 x i64>*
  %9557 = load <2 x i64>, <2 x i64>* %8947, align 16
  store <2 x i64> %9557, <2 x i64>* %9556, align 16
  %9558 = getelementptr inbounds i32, i32* %1, i64 196
  %9559 = bitcast i32* %9558 to <2 x i64>*
  %9560 = load <2 x i64>, <2 x i64>* %8987, align 16
  store <2 x i64> %9560, <2 x i64>* %9559, align 16
  %9561 = getelementptr inbounds i32, i32* %1, i64 200
  %9562 = bitcast i32* %9561 to <2 x i64>*
  %9563 = load <2 x i64>, <2 x i64>* %9107, align 16
  store <2 x i64> %9563, <2 x i64>* %9562, align 16
  %9564 = getelementptr inbounds i32, i32* %1, i64 204
  %9565 = bitcast i32* %9564 to <2 x i64>*
  %9566 = load <2 x i64>, <2 x i64>* %9147, align 16
  store <2 x i64> %9566, <2 x i64>* %9565, align 16
  %9567 = getelementptr inbounds i32, i32* %1, i64 208
  %9568 = bitcast i32* %9567 to <2 x i64>*
  %9569 = load <2 x i64>, <2 x i64>* %8949, align 16
  store <2 x i64> %9569, <2 x i64>* %9568, align 16
  %9570 = getelementptr inbounds i32, i32* %1, i64 212
  %9571 = bitcast i32* %9570 to <2 x i64>*
  %9572 = load <2 x i64>, <2 x i64>* %8989, align 16
  store <2 x i64> %9572, <2 x i64>* %9571, align 16
  %9573 = getelementptr inbounds i32, i32* %1, i64 216
  %9574 = bitcast i32* %9573 to <2 x i64>*
  %9575 = load <2 x i64>, <2 x i64>* %9109, align 16
  store <2 x i64> %9575, <2 x i64>* %9574, align 16
  %9576 = getelementptr inbounds i32, i32* %1, i64 220
  %9577 = bitcast i32* %9576 to <2 x i64>*
  %9578 = load <2 x i64>, <2 x i64>* %9149, align 16
  store <2 x i64> %9578, <2 x i64>* %9577, align 16
  %9579 = getelementptr inbounds i32, i32* %1, i64 224
  %9580 = bitcast i32* %9579 to <2 x i64>*
  %9581 = load <2 x i64>, <2 x i64>* %8951, align 16
  store <2 x i64> %9581, <2 x i64>* %9580, align 16
  %9582 = getelementptr inbounds i32, i32* %1, i64 228
  %9583 = bitcast i32* %9582 to <2 x i64>*
  %9584 = load <2 x i64>, <2 x i64>* %8991, align 16
  store <2 x i64> %9584, <2 x i64>* %9583, align 16
  %9585 = getelementptr inbounds i32, i32* %1, i64 232
  %9586 = bitcast i32* %9585 to <2 x i64>*
  %9587 = load <2 x i64>, <2 x i64>* %9111, align 16
  store <2 x i64> %9587, <2 x i64>* %9586, align 16
  %9588 = getelementptr inbounds i32, i32* %1, i64 236
  %9589 = bitcast i32* %9588 to <2 x i64>*
  %9590 = load <2 x i64>, <2 x i64>* %9151, align 16
  store <2 x i64> %9590, <2 x i64>* %9589, align 16
  %9591 = getelementptr inbounds i32, i32* %1, i64 240
  %9592 = bitcast i32* %9591 to <2 x i64>*
  %9593 = load <2 x i64>, <2 x i64>* %8953, align 16
  store <2 x i64> %9593, <2 x i64>* %9592, align 16
  %9594 = getelementptr inbounds i32, i32* %1, i64 244
  %9595 = bitcast i32* %9594 to <2 x i64>*
  %9596 = load <2 x i64>, <2 x i64>* %8993, align 16
  store <2 x i64> %9596, <2 x i64>* %9595, align 16
  %9597 = getelementptr inbounds i32, i32* %1, i64 248
  %9598 = bitcast i32* %9597 to <2 x i64>*
  %9599 = load <2 x i64>, <2 x i64>* %9113, align 16
  store <2 x i64> %9599, <2 x i64>* %9598, align 16
  %9600 = getelementptr inbounds i32, i32* %1, i64 252
  %9601 = bitcast i32* %9600 to <2 x i64>*
  %9602 = load <2 x i64>, <2 x i64>* %9153, align 16
  store <2 x i64> %9602, <2 x i64>* %9601, align 16
  br label %17357

9603:                                             ; preds = %5
  %9604 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %9605 = load i8, i8* %10, align 1
  %9606 = sext i8 %9605 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %9604, i32 %2, i32 0, i32 0, i32 %9606)
  br label %9607

9607:                                             ; preds = %9607, %9603
  %9608 = phi i64 [ 0, %9603 ], [ %9626, %9607 ]
  %9609 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %9608
  %9610 = bitcast <2 x i64>* %9609 to <4 x i32>*
  %9611 = load <4 x i32>, <4 x i32>* %9610, align 16
  %9612 = mul <4 x i32> %9611, <i32 11586, i32 11586, i32 11586, i32 11586>
  %9613 = add <4 x i32> %9612, <i32 2048, i32 2048, i32 2048, i32 2048>
  %9614 = ashr <4 x i32> %9613, <i32 12, i32 12, i32 12, i32 12>
  %9615 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %9608
  %9616 = bitcast <2 x i64>* %9615 to <4 x i32>*
  store <4 x i32> %9614, <4 x i32>* %9616, align 16
  %9617 = or i64 %9608, 1
  %9618 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %9617
  %9619 = bitcast <2 x i64>* %9618 to <4 x i32>*
  %9620 = load <4 x i32>, <4 x i32>* %9619, align 16
  %9621 = mul <4 x i32> %9620, <i32 11586, i32 11586, i32 11586, i32 11586>
  %9622 = add <4 x i32> %9621, <i32 2048, i32 2048, i32 2048, i32 2048>
  %9623 = ashr <4 x i32> %9622, <i32 12, i32 12, i32 12, i32 12>
  %9624 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %9617
  %9625 = bitcast <2 x i64>* %9624 to <4 x i32>*
  store <4 x i32> %9623, <4 x i32>* %9625, align 16
  %9626 = add nuw nsw i64 %9608, 2
  %9627 = icmp eq i64 %9626, 64
  br i1 %9627, label %9628, label %9607

9628:                                             ; preds = %9607
  %9629 = getelementptr inbounds i8, i8* %10, i64 1
  %9630 = load i8, i8* %9629, align 1
  %9631 = sext i8 %9630 to i32
  %9632 = sub nsw i32 0, %9631
  %9633 = xor i32 %9631, -1
  %9634 = shl i32 1, %9633
  %9635 = insertelement <4 x i32> undef, i32 %9634, i32 0
  %9636 = shufflevector <4 x i32> %9635, <4 x i32> undef, <4 x i32> zeroinitializer
  %9637 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %9638 = load <4 x i32>, <4 x i32>* %9637, align 16
  %9639 = add <4 x i32> %9636, %9638
  %9640 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %9641 = bitcast <2 x i64>* %9640 to <4 x i32>*
  %9642 = load <4 x i32>, <4 x i32>* %9641, align 16
  %9643 = add <4 x i32> %9636, %9642
  %9644 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %9645 = bitcast <2 x i64>* %9644 to <4 x i32>*
  %9646 = load <4 x i32>, <4 x i32>* %9645, align 16
  %9647 = add <4 x i32> %9636, %9646
  %9648 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %9649 = bitcast <2 x i64>* %9648 to <4 x i32>*
  %9650 = load <4 x i32>, <4 x i32>* %9649, align 16
  %9651 = add <4 x i32> %9650, %9636
  %9652 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %9653 = bitcast <2 x i64>* %9652 to <4 x i32>*
  %9654 = load <4 x i32>, <4 x i32>* %9653, align 16
  %9655 = add <4 x i32> %9654, %9636
  %9656 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %9657 = bitcast <2 x i64>* %9656 to <4 x i32>*
  %9658 = load <4 x i32>, <4 x i32>* %9657, align 16
  %9659 = add <4 x i32> %9658, %9636
  %9660 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %9661 = bitcast <2 x i64>* %9660 to <4 x i32>*
  %9662 = load <4 x i32>, <4 x i32>* %9661, align 16
  %9663 = add <4 x i32> %9662, %9636
  %9664 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %9665 = bitcast <2 x i64>* %9664 to <4 x i32>*
  %9666 = load <4 x i32>, <4 x i32>* %9665, align 16
  %9667 = add <4 x i32> %9666, %9636
  %9668 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %9669 = bitcast <2 x i64>* %9668 to <4 x i32>*
  %9670 = load <4 x i32>, <4 x i32>* %9669, align 16
  %9671 = add <4 x i32> %9670, %9636
  %9672 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %9673 = bitcast <2 x i64>* %9672 to <4 x i32>*
  %9674 = load <4 x i32>, <4 x i32>* %9673, align 16
  %9675 = add <4 x i32> %9674, %9636
  %9676 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %9677 = bitcast <2 x i64>* %9676 to <4 x i32>*
  %9678 = load <4 x i32>, <4 x i32>* %9677, align 16
  %9679 = add <4 x i32> %9678, %9636
  %9680 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %9681 = bitcast <2 x i64>* %9680 to <4 x i32>*
  %9682 = load <4 x i32>, <4 x i32>* %9681, align 16
  %9683 = add <4 x i32> %9682, %9636
  %9684 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %9685 = bitcast <2 x i64>* %9684 to <4 x i32>*
  %9686 = load <4 x i32>, <4 x i32>* %9685, align 16
  %9687 = add <4 x i32> %9686, %9636
  %9688 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %9689 = bitcast <2 x i64>* %9688 to <4 x i32>*
  %9690 = load <4 x i32>, <4 x i32>* %9689, align 16
  %9691 = add <4 x i32> %9690, %9636
  %9692 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %9693 = bitcast <2 x i64>* %9692 to <4 x i32>*
  %9694 = load <4 x i32>, <4 x i32>* %9693, align 16
  %9695 = add <4 x i32> %9694, %9636
  %9696 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %9697 = bitcast <2 x i64>* %9696 to <4 x i32>*
  %9698 = load <4 x i32>, <4 x i32>* %9697, align 16
  %9699 = add <4 x i32> %9698, %9636
  %9700 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9639, i32 %9632) #8
  store <4 x i32> %9700, <4 x i32>* %9637, align 16
  %9701 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9643, i32 %9632) #8
  store <4 x i32> %9701, <4 x i32>* %9641, align 16
  %9702 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9647, i32 %9632) #8
  store <4 x i32> %9702, <4 x i32>* %9645, align 16
  %9703 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9651, i32 %9632) #8
  store <4 x i32> %9703, <4 x i32>* %9649, align 16
  %9704 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9655, i32 %9632) #8
  store <4 x i32> %9704, <4 x i32>* %9653, align 16
  %9705 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9659, i32 %9632) #8
  store <4 x i32> %9705, <4 x i32>* %9657, align 16
  %9706 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9663, i32 %9632) #8
  store <4 x i32> %9706, <4 x i32>* %9661, align 16
  %9707 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9667, i32 %9632) #8
  store <4 x i32> %9707, <4 x i32>* %9665, align 16
  %9708 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9671, i32 %9632) #8
  store <4 x i32> %9708, <4 x i32>* %9669, align 16
  %9709 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9675, i32 %9632) #8
  store <4 x i32> %9709, <4 x i32>* %9673, align 16
  %9710 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9679, i32 %9632) #8
  store <4 x i32> %9710, <4 x i32>* %9677, align 16
  %9711 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9683, i32 %9632) #8
  store <4 x i32> %9711, <4 x i32>* %9681, align 16
  %9712 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9687, i32 %9632) #8
  store <4 x i32> %9712, <4 x i32>* %9685, align 16
  %9713 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9691, i32 %9632) #8
  store <4 x i32> %9713, <4 x i32>* %9689, align 16
  %9714 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9695, i32 %9632) #8
  store <4 x i32> %9714, <4 x i32>* %9693, align 16
  %9715 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9699, i32 %9632) #8
  store <4 x i32> %9715, <4 x i32>* %9697, align 16
  %9716 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %9717 = bitcast <2 x i64>* %9716 to <4 x i32>*
  %9718 = load <4 x i32>, <4 x i32>* %9717, align 16
  %9719 = add <4 x i32> %9718, %9636
  %9720 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %9721 = bitcast <2 x i64>* %9720 to <4 x i32>*
  %9722 = load <4 x i32>, <4 x i32>* %9721, align 16
  %9723 = add <4 x i32> %9722, %9636
  %9724 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %9725 = bitcast <2 x i64>* %9724 to <4 x i32>*
  %9726 = load <4 x i32>, <4 x i32>* %9725, align 16
  %9727 = add <4 x i32> %9726, %9636
  %9728 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %9729 = bitcast <2 x i64>* %9728 to <4 x i32>*
  %9730 = load <4 x i32>, <4 x i32>* %9729, align 16
  %9731 = add <4 x i32> %9730, %9636
  %9732 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %9733 = bitcast <2 x i64>* %9732 to <4 x i32>*
  %9734 = load <4 x i32>, <4 x i32>* %9733, align 16
  %9735 = add <4 x i32> %9734, %9636
  %9736 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %9737 = bitcast <2 x i64>* %9736 to <4 x i32>*
  %9738 = load <4 x i32>, <4 x i32>* %9737, align 16
  %9739 = add <4 x i32> %9738, %9636
  %9740 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %9741 = bitcast <2 x i64>* %9740 to <4 x i32>*
  %9742 = load <4 x i32>, <4 x i32>* %9741, align 16
  %9743 = add <4 x i32> %9742, %9636
  %9744 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %9745 = bitcast <2 x i64>* %9744 to <4 x i32>*
  %9746 = load <4 x i32>, <4 x i32>* %9745, align 16
  %9747 = add <4 x i32> %9746, %9636
  %9748 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %9749 = bitcast <2 x i64>* %9748 to <4 x i32>*
  %9750 = load <4 x i32>, <4 x i32>* %9749, align 16
  %9751 = add <4 x i32> %9750, %9636
  %9752 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %9753 = bitcast <2 x i64>* %9752 to <4 x i32>*
  %9754 = load <4 x i32>, <4 x i32>* %9753, align 16
  %9755 = add <4 x i32> %9754, %9636
  %9756 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %9757 = bitcast <2 x i64>* %9756 to <4 x i32>*
  %9758 = load <4 x i32>, <4 x i32>* %9757, align 16
  %9759 = add <4 x i32> %9758, %9636
  %9760 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %9761 = bitcast <2 x i64>* %9760 to <4 x i32>*
  %9762 = load <4 x i32>, <4 x i32>* %9761, align 16
  %9763 = add <4 x i32> %9762, %9636
  %9764 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %9765 = bitcast <2 x i64>* %9764 to <4 x i32>*
  %9766 = load <4 x i32>, <4 x i32>* %9765, align 16
  %9767 = add <4 x i32> %9766, %9636
  %9768 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %9769 = bitcast <2 x i64>* %9768 to <4 x i32>*
  %9770 = load <4 x i32>, <4 x i32>* %9769, align 16
  %9771 = add <4 x i32> %9770, %9636
  %9772 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %9773 = bitcast <2 x i64>* %9772 to <4 x i32>*
  %9774 = load <4 x i32>, <4 x i32>* %9773, align 16
  %9775 = add <4 x i32> %9774, %9636
  %9776 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %9777 = bitcast <2 x i64>* %9776 to <4 x i32>*
  %9778 = load <4 x i32>, <4 x i32>* %9777, align 16
  %9779 = add <4 x i32> %9778, %9636
  %9780 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9719, i32 %9632) #8
  store <4 x i32> %9780, <4 x i32>* %9717, align 16
  %9781 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9723, i32 %9632) #8
  store <4 x i32> %9781, <4 x i32>* %9721, align 16
  %9782 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9727, i32 %9632) #8
  store <4 x i32> %9782, <4 x i32>* %9725, align 16
  %9783 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9731, i32 %9632) #8
  store <4 x i32> %9783, <4 x i32>* %9729, align 16
  %9784 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9735, i32 %9632) #8
  store <4 x i32> %9784, <4 x i32>* %9733, align 16
  %9785 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9739, i32 %9632) #8
  store <4 x i32> %9785, <4 x i32>* %9737, align 16
  %9786 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9743, i32 %9632) #8
  store <4 x i32> %9786, <4 x i32>* %9741, align 16
  %9787 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9747, i32 %9632) #8
  store <4 x i32> %9787, <4 x i32>* %9745, align 16
  %9788 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9751, i32 %9632) #8
  store <4 x i32> %9788, <4 x i32>* %9749, align 16
  %9789 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9755, i32 %9632) #8
  store <4 x i32> %9789, <4 x i32>* %9753, align 16
  %9790 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9759, i32 %9632) #8
  store <4 x i32> %9790, <4 x i32>* %9757, align 16
  %9791 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9763, i32 %9632) #8
  store <4 x i32> %9791, <4 x i32>* %9761, align 16
  %9792 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9767, i32 %9632) #8
  store <4 x i32> %9792, <4 x i32>* %9765, align 16
  %9793 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9771, i32 %9632) #8
  store <4 x i32> %9793, <4 x i32>* %9769, align 16
  %9794 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9775, i32 %9632) #8
  store <4 x i32> %9794, <4 x i32>* %9773, align 16
  %9795 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9779, i32 %9632) #8
  store <4 x i32> %9795, <4 x i32>* %9777, align 16
  %9796 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %9797 = bitcast <2 x i64>* %9796 to <4 x i32>*
  %9798 = load <4 x i32>, <4 x i32>* %9797, align 16
  %9799 = add <4 x i32> %9798, %9636
  %9800 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %9801 = bitcast <2 x i64>* %9800 to <4 x i32>*
  %9802 = load <4 x i32>, <4 x i32>* %9801, align 16
  %9803 = add <4 x i32> %9802, %9636
  %9804 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %9805 = bitcast <2 x i64>* %9804 to <4 x i32>*
  %9806 = load <4 x i32>, <4 x i32>* %9805, align 16
  %9807 = add <4 x i32> %9806, %9636
  %9808 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %9809 = bitcast <2 x i64>* %9808 to <4 x i32>*
  %9810 = load <4 x i32>, <4 x i32>* %9809, align 16
  %9811 = add <4 x i32> %9810, %9636
  %9812 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %9813 = bitcast <2 x i64>* %9812 to <4 x i32>*
  %9814 = load <4 x i32>, <4 x i32>* %9813, align 16
  %9815 = add <4 x i32> %9814, %9636
  %9816 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %9817 = bitcast <2 x i64>* %9816 to <4 x i32>*
  %9818 = load <4 x i32>, <4 x i32>* %9817, align 16
  %9819 = add <4 x i32> %9818, %9636
  %9820 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %9821 = bitcast <2 x i64>* %9820 to <4 x i32>*
  %9822 = load <4 x i32>, <4 x i32>* %9821, align 16
  %9823 = add <4 x i32> %9822, %9636
  %9824 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %9825 = bitcast <2 x i64>* %9824 to <4 x i32>*
  %9826 = load <4 x i32>, <4 x i32>* %9825, align 16
  %9827 = add <4 x i32> %9826, %9636
  %9828 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %9829 = bitcast <2 x i64>* %9828 to <4 x i32>*
  %9830 = load <4 x i32>, <4 x i32>* %9829, align 16
  %9831 = add <4 x i32> %9830, %9636
  %9832 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %9833 = bitcast <2 x i64>* %9832 to <4 x i32>*
  %9834 = load <4 x i32>, <4 x i32>* %9833, align 16
  %9835 = add <4 x i32> %9834, %9636
  %9836 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %9837 = bitcast <2 x i64>* %9836 to <4 x i32>*
  %9838 = load <4 x i32>, <4 x i32>* %9837, align 16
  %9839 = add <4 x i32> %9838, %9636
  %9840 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %9841 = bitcast <2 x i64>* %9840 to <4 x i32>*
  %9842 = load <4 x i32>, <4 x i32>* %9841, align 16
  %9843 = add <4 x i32> %9842, %9636
  %9844 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %9845 = bitcast <2 x i64>* %9844 to <4 x i32>*
  %9846 = load <4 x i32>, <4 x i32>* %9845, align 16
  %9847 = add <4 x i32> %9846, %9636
  %9848 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %9849 = bitcast <2 x i64>* %9848 to <4 x i32>*
  %9850 = load <4 x i32>, <4 x i32>* %9849, align 16
  %9851 = add <4 x i32> %9850, %9636
  %9852 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %9853 = bitcast <2 x i64>* %9852 to <4 x i32>*
  %9854 = load <4 x i32>, <4 x i32>* %9853, align 16
  %9855 = add <4 x i32> %9854, %9636
  %9856 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %9857 = bitcast <2 x i64>* %9856 to <4 x i32>*
  %9858 = load <4 x i32>, <4 x i32>* %9857, align 16
  %9859 = add <4 x i32> %9858, %9636
  %9860 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9799, i32 %9632) #8
  store <4 x i32> %9860, <4 x i32>* %9797, align 16
  %9861 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9803, i32 %9632) #8
  store <4 x i32> %9861, <4 x i32>* %9801, align 16
  %9862 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9807, i32 %9632) #8
  store <4 x i32> %9862, <4 x i32>* %9805, align 16
  %9863 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9811, i32 %9632) #8
  store <4 x i32> %9863, <4 x i32>* %9809, align 16
  %9864 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9815, i32 %9632) #8
  store <4 x i32> %9864, <4 x i32>* %9813, align 16
  %9865 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9819, i32 %9632) #8
  store <4 x i32> %9865, <4 x i32>* %9817, align 16
  %9866 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9823, i32 %9632) #8
  store <4 x i32> %9866, <4 x i32>* %9821, align 16
  %9867 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9827, i32 %9632) #8
  store <4 x i32> %9867, <4 x i32>* %9825, align 16
  %9868 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9831, i32 %9632) #8
  store <4 x i32> %9868, <4 x i32>* %9829, align 16
  %9869 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9835, i32 %9632) #8
  store <4 x i32> %9869, <4 x i32>* %9833, align 16
  %9870 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9839, i32 %9632) #8
  store <4 x i32> %9870, <4 x i32>* %9837, align 16
  %9871 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9843, i32 %9632) #8
  store <4 x i32> %9871, <4 x i32>* %9841, align 16
  %9872 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9847, i32 %9632) #8
  store <4 x i32> %9872, <4 x i32>* %9845, align 16
  %9873 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9851, i32 %9632) #8
  store <4 x i32> %9873, <4 x i32>* %9849, align 16
  %9874 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9855, i32 %9632) #8
  store <4 x i32> %9874, <4 x i32>* %9853, align 16
  %9875 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9859, i32 %9632) #8
  store <4 x i32> %9875, <4 x i32>* %9857, align 16
  %9876 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %9877 = bitcast <2 x i64>* %9876 to <4 x i32>*
  %9878 = load <4 x i32>, <4 x i32>* %9877, align 16
  %9879 = add <4 x i32> %9878, %9636
  %9880 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %9881 = bitcast <2 x i64>* %9880 to <4 x i32>*
  %9882 = load <4 x i32>, <4 x i32>* %9881, align 16
  %9883 = add <4 x i32> %9882, %9636
  %9884 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %9885 = bitcast <2 x i64>* %9884 to <4 x i32>*
  %9886 = load <4 x i32>, <4 x i32>* %9885, align 16
  %9887 = add <4 x i32> %9886, %9636
  %9888 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %9889 = bitcast <2 x i64>* %9888 to <4 x i32>*
  %9890 = load <4 x i32>, <4 x i32>* %9889, align 16
  %9891 = add <4 x i32> %9890, %9636
  %9892 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %9893 = bitcast <2 x i64>* %9892 to <4 x i32>*
  %9894 = load <4 x i32>, <4 x i32>* %9893, align 16
  %9895 = add <4 x i32> %9894, %9636
  %9896 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %9897 = bitcast <2 x i64>* %9896 to <4 x i32>*
  %9898 = load <4 x i32>, <4 x i32>* %9897, align 16
  %9899 = add <4 x i32> %9898, %9636
  %9900 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %9901 = bitcast <2 x i64>* %9900 to <4 x i32>*
  %9902 = load <4 x i32>, <4 x i32>* %9901, align 16
  %9903 = add <4 x i32> %9902, %9636
  %9904 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %9905 = bitcast <2 x i64>* %9904 to <4 x i32>*
  %9906 = load <4 x i32>, <4 x i32>* %9905, align 16
  %9907 = add <4 x i32> %9906, %9636
  %9908 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %9909 = bitcast <2 x i64>* %9908 to <4 x i32>*
  %9910 = load <4 x i32>, <4 x i32>* %9909, align 16
  %9911 = add <4 x i32> %9910, %9636
  %9912 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %9913 = bitcast <2 x i64>* %9912 to <4 x i32>*
  %9914 = load <4 x i32>, <4 x i32>* %9913, align 16
  %9915 = add <4 x i32> %9914, %9636
  %9916 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %9917 = bitcast <2 x i64>* %9916 to <4 x i32>*
  %9918 = load <4 x i32>, <4 x i32>* %9917, align 16
  %9919 = add <4 x i32> %9918, %9636
  %9920 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %9921 = bitcast <2 x i64>* %9920 to <4 x i32>*
  %9922 = load <4 x i32>, <4 x i32>* %9921, align 16
  %9923 = add <4 x i32> %9922, %9636
  %9924 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %9925 = bitcast <2 x i64>* %9924 to <4 x i32>*
  %9926 = load <4 x i32>, <4 x i32>* %9925, align 16
  %9927 = add <4 x i32> %9926, %9636
  %9928 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %9929 = bitcast <2 x i64>* %9928 to <4 x i32>*
  %9930 = load <4 x i32>, <4 x i32>* %9929, align 16
  %9931 = add <4 x i32> %9930, %9636
  %9932 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %9933 = bitcast <2 x i64>* %9932 to <4 x i32>*
  %9934 = load <4 x i32>, <4 x i32>* %9933, align 16
  %9935 = add <4 x i32> %9934, %9636
  %9936 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %9937 = bitcast <2 x i64>* %9936 to <4 x i32>*
  %9938 = load <4 x i32>, <4 x i32>* %9937, align 16
  %9939 = add <4 x i32> %9938, %9636
  %9940 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9879, i32 %9632) #8
  store <4 x i32> %9940, <4 x i32>* %9877, align 16
  %9941 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9883, i32 %9632) #8
  store <4 x i32> %9941, <4 x i32>* %9881, align 16
  %9942 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9887, i32 %9632) #8
  store <4 x i32> %9942, <4 x i32>* %9885, align 16
  %9943 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9891, i32 %9632) #8
  store <4 x i32> %9943, <4 x i32>* %9889, align 16
  %9944 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9895, i32 %9632) #8
  store <4 x i32> %9944, <4 x i32>* %9893, align 16
  %9945 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9899, i32 %9632) #8
  store <4 x i32> %9945, <4 x i32>* %9897, align 16
  %9946 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9903, i32 %9632) #8
  store <4 x i32> %9946, <4 x i32>* %9901, align 16
  %9947 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9907, i32 %9632) #8
  store <4 x i32> %9947, <4 x i32>* %9905, align 16
  %9948 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9911, i32 %9632) #8
  store <4 x i32> %9948, <4 x i32>* %9909, align 16
  %9949 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9915, i32 %9632) #8
  store <4 x i32> %9949, <4 x i32>* %9913, align 16
  %9950 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9919, i32 %9632) #8
  store <4 x i32> %9950, <4 x i32>* %9917, align 16
  %9951 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9923, i32 %9632) #8
  store <4 x i32> %9951, <4 x i32>* %9921, align 16
  %9952 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9927, i32 %9632) #8
  store <4 x i32> %9952, <4 x i32>* %9925, align 16
  %9953 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9931, i32 %9632) #8
  store <4 x i32> %9953, <4 x i32>* %9929, align 16
  %9954 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9935, i32 %9632) #8
  store <4 x i32> %9954, <4 x i32>* %9933, align 16
  %9955 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %9939, i32 %9632) #8
  store <4 x i32> %9955, <4 x i32>* %9937, align 16
  %9956 = shufflevector <4 x i32> %9700, <4 x i32> %9704, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9957 = bitcast <4 x i32> %9956 to <2 x i64>
  %9958 = shufflevector <4 x i32> %9700, <4 x i32> %9704, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9959 = bitcast <4 x i32> %9958 to <2 x i64>
  %9960 = shufflevector <4 x i32> %9708, <4 x i32> %9712, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9961 = bitcast <4 x i32> %9960 to <2 x i64>
  %9962 = shufflevector <4 x i32> %9708, <4 x i32> %9712, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9963 = bitcast <4 x i32> %9962 to <2 x i64>
  %9964 = shufflevector <2 x i64> %9957, <2 x i64> %9961, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %9964, <2 x i64>* %9604, align 16
  %9965 = shufflevector <2 x i64> %9957, <2 x i64> %9961, <2 x i32> <i32 1, i32 3>
  %9966 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %9965, <2 x i64>* %9966, align 16
  %9967 = shufflevector <2 x i64> %9959, <2 x i64> %9963, <2 x i32> <i32 0, i32 2>
  %9968 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %9967, <2 x i64>* %9968, align 16
  %9969 = shufflevector <2 x i64> %9959, <2 x i64> %9963, <2 x i32> <i32 1, i32 3>
  %9970 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %9969, <2 x i64>* %9970, align 16
  %9971 = shufflevector <4 x i32> %9701, <4 x i32> %9705, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9972 = bitcast <4 x i32> %9971 to <2 x i64>
  %9973 = shufflevector <4 x i32> %9701, <4 x i32> %9705, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9974 = bitcast <4 x i32> %9973 to <2 x i64>
  %9975 = shufflevector <4 x i32> %9709, <4 x i32> %9713, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9976 = bitcast <4 x i32> %9975 to <2 x i64>
  %9977 = shufflevector <4 x i32> %9709, <4 x i32> %9713, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9978 = bitcast <4 x i32> %9977 to <2 x i64>
  %9979 = shufflevector <2 x i64> %9972, <2 x i64> %9976, <2 x i32> <i32 0, i32 2>
  %9980 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %9979, <2 x i64>* %9980, align 16
  %9981 = shufflevector <2 x i64> %9972, <2 x i64> %9976, <2 x i32> <i32 1, i32 3>
  %9982 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %9981, <2 x i64>* %9982, align 16
  %9983 = shufflevector <2 x i64> %9974, <2 x i64> %9978, <2 x i32> <i32 0, i32 2>
  %9984 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %9983, <2 x i64>* %9984, align 16
  %9985 = shufflevector <2 x i64> %9974, <2 x i64> %9978, <2 x i32> <i32 1, i32 3>
  %9986 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %9985, <2 x i64>* %9986, align 16
  %9987 = load <4 x i32>, <4 x i32>* %9733, align 16
  %9988 = shufflevector <4 x i32> %9780, <4 x i32> %9987, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9989 = bitcast <4 x i32> %9988 to <2 x i64>
  %9990 = shufflevector <4 x i32> %9780, <4 x i32> %9987, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9991 = bitcast <4 x i32> %9990 to <2 x i64>
  %9992 = load <4 x i32>, <4 x i32>* %9749, align 16
  %9993 = load <4 x i32>, <4 x i32>* %9765, align 16
  %9994 = shufflevector <4 x i32> %9992, <4 x i32> %9993, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %9995 = bitcast <4 x i32> %9994 to <2 x i64>
  %9996 = shufflevector <4 x i32> %9992, <4 x i32> %9993, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %9997 = bitcast <4 x i32> %9996 to <2 x i64>
  %9998 = shufflevector <2 x i64> %9989, <2 x i64> %9995, <2 x i32> <i32 0, i32 2>
  %9999 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %9998, <2 x i64>* %9999, align 16
  %10000 = shufflevector <2 x i64> %9989, <2 x i64> %9995, <2 x i32> <i32 1, i32 3>
  %10001 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %10000, <2 x i64>* %10001, align 16
  %10002 = shufflevector <2 x i64> %9991, <2 x i64> %9997, <2 x i32> <i32 0, i32 2>
  %10003 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %10002, <2 x i64>* %10003, align 16
  %10004 = shufflevector <2 x i64> %9991, <2 x i64> %9997, <2 x i32> <i32 1, i32 3>
  %10005 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %10004, <2 x i64>* %10005, align 16
  %10006 = load <4 x i32>, <4 x i32>* %9721, align 16
  %10007 = load <4 x i32>, <4 x i32>* %9737, align 16
  %10008 = shufflevector <4 x i32> %10006, <4 x i32> %10007, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10009 = bitcast <4 x i32> %10008 to <2 x i64>
  %10010 = shufflevector <4 x i32> %10006, <4 x i32> %10007, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10011 = bitcast <4 x i32> %10010 to <2 x i64>
  %10012 = load <4 x i32>, <4 x i32>* %9753, align 16
  %10013 = load <4 x i32>, <4 x i32>* %9769, align 16
  %10014 = shufflevector <4 x i32> %10012, <4 x i32> %10013, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10015 = bitcast <4 x i32> %10014 to <2 x i64>
  %10016 = shufflevector <4 x i32> %10012, <4 x i32> %10013, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10017 = bitcast <4 x i32> %10016 to <2 x i64>
  %10018 = shufflevector <2 x i64> %10009, <2 x i64> %10015, <2 x i32> <i32 0, i32 2>
  %10019 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %10018, <2 x i64>* %10019, align 16
  %10020 = shufflevector <2 x i64> %10009, <2 x i64> %10015, <2 x i32> <i32 1, i32 3>
  %10021 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %10020, <2 x i64>* %10021, align 16
  %10022 = shufflevector <2 x i64> %10011, <2 x i64> %10017, <2 x i32> <i32 0, i32 2>
  %10023 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %10022, <2 x i64>* %10023, align 16
  %10024 = shufflevector <2 x i64> %10011, <2 x i64> %10017, <2 x i32> <i32 1, i32 3>
  %10025 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %10024, <2 x i64>* %10025, align 16
  %10026 = shufflevector <4 x i32> %9702, <4 x i32> %9706, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10027 = bitcast <4 x i32> %10026 to <2 x i64>
  %10028 = shufflevector <4 x i32> %9702, <4 x i32> %9706, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10029 = bitcast <4 x i32> %10028 to <2 x i64>
  %10030 = shufflevector <4 x i32> %9710, <4 x i32> %9714, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10031 = bitcast <4 x i32> %10030 to <2 x i64>
  %10032 = shufflevector <4 x i32> %9710, <4 x i32> %9714, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10033 = bitcast <4 x i32> %10032 to <2 x i64>
  %10034 = shufflevector <2 x i64> %10027, <2 x i64> %10031, <2 x i32> <i32 0, i32 2>
  %10035 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %10034, <2 x i64>* %10035, align 16
  %10036 = shufflevector <2 x i64> %10027, <2 x i64> %10031, <2 x i32> <i32 1, i32 3>
  %10037 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %10036, <2 x i64>* %10037, align 16
  %10038 = shufflevector <2 x i64> %10029, <2 x i64> %10033, <2 x i32> <i32 0, i32 2>
  %10039 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %10038, <2 x i64>* %10039, align 16
  %10040 = shufflevector <2 x i64> %10029, <2 x i64> %10033, <2 x i32> <i32 1, i32 3>
  %10041 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %10040, <2 x i64>* %10041, align 16
  %10042 = shufflevector <4 x i32> %9703, <4 x i32> %9707, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10043 = bitcast <4 x i32> %10042 to <2 x i64>
  %10044 = shufflevector <4 x i32> %9703, <4 x i32> %9707, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10045 = bitcast <4 x i32> %10044 to <2 x i64>
  %10046 = shufflevector <4 x i32> %9711, <4 x i32> %9715, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10047 = bitcast <4 x i32> %10046 to <2 x i64>
  %10048 = shufflevector <4 x i32> %9711, <4 x i32> %9715, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10049 = bitcast <4 x i32> %10048 to <2 x i64>
  %10050 = shufflevector <2 x i64> %10043, <2 x i64> %10047, <2 x i32> <i32 0, i32 2>
  %10051 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %10050, <2 x i64>* %10051, align 16
  %10052 = shufflevector <2 x i64> %10043, <2 x i64> %10047, <2 x i32> <i32 1, i32 3>
  %10053 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %10052, <2 x i64>* %10053, align 16
  %10054 = shufflevector <2 x i64> %10045, <2 x i64> %10049, <2 x i32> <i32 0, i32 2>
  %10055 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %10054, <2 x i64>* %10055, align 16
  %10056 = shufflevector <2 x i64> %10045, <2 x i64> %10049, <2 x i32> <i32 1, i32 3>
  %10057 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %10056, <2 x i64>* %10057, align 16
  %10058 = load <4 x i32>, <4 x i32>* %9725, align 16
  %10059 = load <4 x i32>, <4 x i32>* %9741, align 16
  %10060 = shufflevector <4 x i32> %10058, <4 x i32> %10059, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10061 = bitcast <4 x i32> %10060 to <2 x i64>
  %10062 = shufflevector <4 x i32> %10058, <4 x i32> %10059, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10063 = bitcast <4 x i32> %10062 to <2 x i64>
  %10064 = load <4 x i32>, <4 x i32>* %9757, align 16
  %10065 = load <4 x i32>, <4 x i32>* %9773, align 16
  %10066 = shufflevector <4 x i32> %10064, <4 x i32> %10065, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10067 = bitcast <4 x i32> %10066 to <2 x i64>
  %10068 = shufflevector <4 x i32> %10064, <4 x i32> %10065, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10069 = bitcast <4 x i32> %10068 to <2 x i64>
  %10070 = shufflevector <2 x i64> %10061, <2 x i64> %10067, <2 x i32> <i32 0, i32 2>
  %10071 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %10070, <2 x i64>* %10071, align 16
  %10072 = shufflevector <2 x i64> %10061, <2 x i64> %10067, <2 x i32> <i32 1, i32 3>
  %10073 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %10072, <2 x i64>* %10073, align 16
  %10074 = shufflevector <2 x i64> %10063, <2 x i64> %10069, <2 x i32> <i32 0, i32 2>
  %10075 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %10074, <2 x i64>* %10075, align 16
  %10076 = shufflevector <2 x i64> %10063, <2 x i64> %10069, <2 x i32> <i32 1, i32 3>
  %10077 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %10076, <2 x i64>* %10077, align 16
  %10078 = load <4 x i32>, <4 x i32>* %9729, align 16
  %10079 = load <4 x i32>, <4 x i32>* %9745, align 16
  %10080 = shufflevector <4 x i32> %10078, <4 x i32> %10079, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10081 = bitcast <4 x i32> %10080 to <2 x i64>
  %10082 = shufflevector <4 x i32> %10078, <4 x i32> %10079, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10083 = bitcast <4 x i32> %10082 to <2 x i64>
  %10084 = load <4 x i32>, <4 x i32>* %9761, align 16
  %10085 = load <4 x i32>, <4 x i32>* %9777, align 16
  %10086 = shufflevector <4 x i32> %10084, <4 x i32> %10085, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10087 = bitcast <4 x i32> %10086 to <2 x i64>
  %10088 = shufflevector <4 x i32> %10084, <4 x i32> %10085, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10089 = bitcast <4 x i32> %10088 to <2 x i64>
  %10090 = shufflevector <2 x i64> %10081, <2 x i64> %10087, <2 x i32> <i32 0, i32 2>
  %10091 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %10090, <2 x i64>* %10091, align 16
  %10092 = shufflevector <2 x i64> %10081, <2 x i64> %10087, <2 x i32> <i32 1, i32 3>
  %10093 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %10092, <2 x i64>* %10093, align 16
  %10094 = shufflevector <2 x i64> %10083, <2 x i64> %10089, <2 x i32> <i32 0, i32 2>
  %10095 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %10094, <2 x i64>* %10095, align 16
  %10096 = shufflevector <2 x i64> %10083, <2 x i64> %10089, <2 x i32> <i32 1, i32 3>
  %10097 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %10096, <2 x i64>* %10097, align 16
  %10098 = load <4 x i32>, <4 x i32>* %9797, align 16
  %10099 = load <4 x i32>, <4 x i32>* %9813, align 16
  %10100 = shufflevector <4 x i32> %10098, <4 x i32> %10099, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10101 = bitcast <4 x i32> %10100 to <2 x i64>
  %10102 = shufflevector <4 x i32> %10098, <4 x i32> %10099, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10103 = bitcast <4 x i32> %10102 to <2 x i64>
  %10104 = load <4 x i32>, <4 x i32>* %9829, align 16
  %10105 = load <4 x i32>, <4 x i32>* %9845, align 16
  %10106 = shufflevector <4 x i32> %10104, <4 x i32> %10105, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10107 = bitcast <4 x i32> %10106 to <2 x i64>
  %10108 = shufflevector <4 x i32> %10104, <4 x i32> %10105, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10109 = bitcast <4 x i32> %10108 to <2 x i64>
  %10110 = shufflevector <2 x i64> %10101, <2 x i64> %10107, <2 x i32> <i32 0, i32 2>
  %10111 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %10110, <2 x i64>* %10111, align 16
  %10112 = shufflevector <2 x i64> %10101, <2 x i64> %10107, <2 x i32> <i32 1, i32 3>
  %10113 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %10112, <2 x i64>* %10113, align 16
  %10114 = shufflevector <2 x i64> %10103, <2 x i64> %10109, <2 x i32> <i32 0, i32 2>
  %10115 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %10114, <2 x i64>* %10115, align 16
  %10116 = shufflevector <2 x i64> %10103, <2 x i64> %10109, <2 x i32> <i32 1, i32 3>
  %10117 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %10116, <2 x i64>* %10117, align 16
  %10118 = load <4 x i32>, <4 x i32>* %9801, align 16
  %10119 = load <4 x i32>, <4 x i32>* %9817, align 16
  %10120 = shufflevector <4 x i32> %10118, <4 x i32> %10119, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10121 = bitcast <4 x i32> %10120 to <2 x i64>
  %10122 = shufflevector <4 x i32> %10118, <4 x i32> %10119, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10123 = bitcast <4 x i32> %10122 to <2 x i64>
  %10124 = load <4 x i32>, <4 x i32>* %9833, align 16
  %10125 = load <4 x i32>, <4 x i32>* %9849, align 16
  %10126 = shufflevector <4 x i32> %10124, <4 x i32> %10125, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10127 = bitcast <4 x i32> %10126 to <2 x i64>
  %10128 = shufflevector <4 x i32> %10124, <4 x i32> %10125, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10129 = bitcast <4 x i32> %10128 to <2 x i64>
  %10130 = shufflevector <2 x i64> %10121, <2 x i64> %10127, <2 x i32> <i32 0, i32 2>
  %10131 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %10130, <2 x i64>* %10131, align 16
  %10132 = shufflevector <2 x i64> %10121, <2 x i64> %10127, <2 x i32> <i32 1, i32 3>
  %10133 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %10132, <2 x i64>* %10133, align 16
  %10134 = shufflevector <2 x i64> %10123, <2 x i64> %10129, <2 x i32> <i32 0, i32 2>
  %10135 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %10134, <2 x i64>* %10135, align 16
  %10136 = shufflevector <2 x i64> %10123, <2 x i64> %10129, <2 x i32> <i32 1, i32 3>
  %10137 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %10136, <2 x i64>* %10137, align 16
  %10138 = load <4 x i32>, <4 x i32>* %9877, align 16
  %10139 = load <4 x i32>, <4 x i32>* %9893, align 16
  %10140 = shufflevector <4 x i32> %10138, <4 x i32> %10139, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10141 = bitcast <4 x i32> %10140 to <2 x i64>
  %10142 = shufflevector <4 x i32> %10138, <4 x i32> %10139, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10143 = bitcast <4 x i32> %10142 to <2 x i64>
  %10144 = load <4 x i32>, <4 x i32>* %9909, align 16
  %10145 = load <4 x i32>, <4 x i32>* %9925, align 16
  %10146 = shufflevector <4 x i32> %10144, <4 x i32> %10145, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10147 = bitcast <4 x i32> %10146 to <2 x i64>
  %10148 = shufflevector <4 x i32> %10144, <4 x i32> %10145, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10149 = bitcast <4 x i32> %10148 to <2 x i64>
  %10150 = shufflevector <2 x i64> %10141, <2 x i64> %10147, <2 x i32> <i32 0, i32 2>
  %10151 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %10150, <2 x i64>* %10151, align 16
  %10152 = shufflevector <2 x i64> %10141, <2 x i64> %10147, <2 x i32> <i32 1, i32 3>
  %10153 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %10152, <2 x i64>* %10153, align 16
  %10154 = shufflevector <2 x i64> %10143, <2 x i64> %10149, <2 x i32> <i32 0, i32 2>
  %10155 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %10154, <2 x i64>* %10155, align 16
  %10156 = shufflevector <2 x i64> %10143, <2 x i64> %10149, <2 x i32> <i32 1, i32 3>
  %10157 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %10156, <2 x i64>* %10157, align 16
  %10158 = load <4 x i32>, <4 x i32>* %9881, align 16
  %10159 = load <4 x i32>, <4 x i32>* %9897, align 16
  %10160 = shufflevector <4 x i32> %10158, <4 x i32> %10159, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10161 = bitcast <4 x i32> %10160 to <2 x i64>
  %10162 = shufflevector <4 x i32> %10158, <4 x i32> %10159, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10163 = bitcast <4 x i32> %10162 to <2 x i64>
  %10164 = load <4 x i32>, <4 x i32>* %9913, align 16
  %10165 = load <4 x i32>, <4 x i32>* %9929, align 16
  %10166 = shufflevector <4 x i32> %10164, <4 x i32> %10165, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10167 = bitcast <4 x i32> %10166 to <2 x i64>
  %10168 = shufflevector <4 x i32> %10164, <4 x i32> %10165, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10169 = bitcast <4 x i32> %10168 to <2 x i64>
  %10170 = shufflevector <2 x i64> %10161, <2 x i64> %10167, <2 x i32> <i32 0, i32 2>
  %10171 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %10170, <2 x i64>* %10171, align 16
  %10172 = shufflevector <2 x i64> %10161, <2 x i64> %10167, <2 x i32> <i32 1, i32 3>
  %10173 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %10172, <2 x i64>* %10173, align 16
  %10174 = shufflevector <2 x i64> %10163, <2 x i64> %10169, <2 x i32> <i32 0, i32 2>
  %10175 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %10174, <2 x i64>* %10175, align 16
  %10176 = shufflevector <2 x i64> %10163, <2 x i64> %10169, <2 x i32> <i32 1, i32 3>
  %10177 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %10176, <2 x i64>* %10177, align 16
  %10178 = load <4 x i32>, <4 x i32>* %9805, align 16
  %10179 = load <4 x i32>, <4 x i32>* %9821, align 16
  %10180 = shufflevector <4 x i32> %10178, <4 x i32> %10179, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10181 = bitcast <4 x i32> %10180 to <2 x i64>
  %10182 = shufflevector <4 x i32> %10178, <4 x i32> %10179, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10183 = bitcast <4 x i32> %10182 to <2 x i64>
  %10184 = load <4 x i32>, <4 x i32>* %9837, align 16
  %10185 = load <4 x i32>, <4 x i32>* %9853, align 16
  %10186 = shufflevector <4 x i32> %10184, <4 x i32> %10185, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10187 = bitcast <4 x i32> %10186 to <2 x i64>
  %10188 = shufflevector <4 x i32> %10184, <4 x i32> %10185, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10189 = bitcast <4 x i32> %10188 to <2 x i64>
  %10190 = shufflevector <2 x i64> %10181, <2 x i64> %10187, <2 x i32> <i32 0, i32 2>
  %10191 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %10190, <2 x i64>* %10191, align 16
  %10192 = shufflevector <2 x i64> %10181, <2 x i64> %10187, <2 x i32> <i32 1, i32 3>
  %10193 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %10192, <2 x i64>* %10193, align 16
  %10194 = shufflevector <2 x i64> %10183, <2 x i64> %10189, <2 x i32> <i32 0, i32 2>
  %10195 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %10194, <2 x i64>* %10195, align 16
  %10196 = shufflevector <2 x i64> %10183, <2 x i64> %10189, <2 x i32> <i32 1, i32 3>
  %10197 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %10196, <2 x i64>* %10197, align 16
  %10198 = load <4 x i32>, <4 x i32>* %9809, align 16
  %10199 = load <4 x i32>, <4 x i32>* %9825, align 16
  %10200 = shufflevector <4 x i32> %10198, <4 x i32> %10199, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10201 = bitcast <4 x i32> %10200 to <2 x i64>
  %10202 = shufflevector <4 x i32> %10198, <4 x i32> %10199, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10203 = bitcast <4 x i32> %10202 to <2 x i64>
  %10204 = load <4 x i32>, <4 x i32>* %9841, align 16
  %10205 = load <4 x i32>, <4 x i32>* %9857, align 16
  %10206 = shufflevector <4 x i32> %10204, <4 x i32> %10205, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10207 = bitcast <4 x i32> %10206 to <2 x i64>
  %10208 = shufflevector <4 x i32> %10204, <4 x i32> %10205, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10209 = bitcast <4 x i32> %10208 to <2 x i64>
  %10210 = shufflevector <2 x i64> %10201, <2 x i64> %10207, <2 x i32> <i32 0, i32 2>
  %10211 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %10210, <2 x i64>* %10211, align 16
  %10212 = shufflevector <2 x i64> %10201, <2 x i64> %10207, <2 x i32> <i32 1, i32 3>
  %10213 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %10212, <2 x i64>* %10213, align 16
  %10214 = shufflevector <2 x i64> %10203, <2 x i64> %10209, <2 x i32> <i32 0, i32 2>
  %10215 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %10214, <2 x i64>* %10215, align 16
  %10216 = shufflevector <2 x i64> %10203, <2 x i64> %10209, <2 x i32> <i32 1, i32 3>
  %10217 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %10216, <2 x i64>* %10217, align 16
  %10218 = load <4 x i32>, <4 x i32>* %9885, align 16
  %10219 = load <4 x i32>, <4 x i32>* %9901, align 16
  %10220 = shufflevector <4 x i32> %10218, <4 x i32> %10219, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10221 = bitcast <4 x i32> %10220 to <2 x i64>
  %10222 = shufflevector <4 x i32> %10218, <4 x i32> %10219, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10223 = bitcast <4 x i32> %10222 to <2 x i64>
  %10224 = load <4 x i32>, <4 x i32>* %9917, align 16
  %10225 = load <4 x i32>, <4 x i32>* %9933, align 16
  %10226 = shufflevector <4 x i32> %10224, <4 x i32> %10225, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10227 = bitcast <4 x i32> %10226 to <2 x i64>
  %10228 = shufflevector <4 x i32> %10224, <4 x i32> %10225, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10229 = bitcast <4 x i32> %10228 to <2 x i64>
  %10230 = shufflevector <2 x i64> %10221, <2 x i64> %10227, <2 x i32> <i32 0, i32 2>
  %10231 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %10230, <2 x i64>* %10231, align 16
  %10232 = shufflevector <2 x i64> %10221, <2 x i64> %10227, <2 x i32> <i32 1, i32 3>
  %10233 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %10232, <2 x i64>* %10233, align 16
  %10234 = shufflevector <2 x i64> %10223, <2 x i64> %10229, <2 x i32> <i32 0, i32 2>
  %10235 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %10234, <2 x i64>* %10235, align 16
  %10236 = shufflevector <2 x i64> %10223, <2 x i64> %10229, <2 x i32> <i32 1, i32 3>
  %10237 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %10236, <2 x i64>* %10237, align 16
  %10238 = load <4 x i32>, <4 x i32>* %9889, align 16
  %10239 = load <4 x i32>, <4 x i32>* %9905, align 16
  %10240 = shufflevector <4 x i32> %10238, <4 x i32> %10239, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10241 = bitcast <4 x i32> %10240 to <2 x i64>
  %10242 = shufflevector <4 x i32> %10238, <4 x i32> %10239, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10243 = bitcast <4 x i32> %10242 to <2 x i64>
  %10244 = load <4 x i32>, <4 x i32>* %9921, align 16
  %10245 = load <4 x i32>, <4 x i32>* %9937, align 16
  %10246 = shufflevector <4 x i32> %10244, <4 x i32> %10245, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10247 = bitcast <4 x i32> %10246 to <2 x i64>
  %10248 = shufflevector <4 x i32> %10244, <4 x i32> %10245, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10249 = bitcast <4 x i32> %10248 to <2 x i64>
  %10250 = shufflevector <2 x i64> %10241, <2 x i64> %10247, <2 x i32> <i32 0, i32 2>
  %10251 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %10250, <2 x i64>* %10251, align 16
  %10252 = shufflevector <2 x i64> %10241, <2 x i64> %10247, <2 x i32> <i32 1, i32 3>
  %10253 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %10252, <2 x i64>* %10253, align 16
  %10254 = shufflevector <2 x i64> %10243, <2 x i64> %10249, <2 x i32> <i32 0, i32 2>
  %10255 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %10254, <2 x i64>* %10255, align 16
  %10256 = shufflevector <2 x i64> %10243, <2 x i64> %10249, <2 x i32> <i32 1, i32 3>
  %10257 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %10256, <2 x i64>* %10257, align 16
  br label %10258

10258:                                            ; preds = %10258, %9628
  %10259 = phi i64 [ 0, %9628 ], [ %10277, %10258 ]
  %10260 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %10259
  %10261 = bitcast <2 x i64>* %10260 to <4 x i32>*
  %10262 = load <4 x i32>, <4 x i32>* %10261, align 16
  %10263 = mul <4 x i32> %10262, <i32 11586, i32 11586, i32 11586, i32 11586>
  %10264 = add <4 x i32> %10263, <i32 2048, i32 2048, i32 2048, i32 2048>
  %10265 = ashr <4 x i32> %10264, <i32 12, i32 12, i32 12, i32 12>
  %10266 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %10259
  %10267 = bitcast <2 x i64>* %10266 to <4 x i32>*
  store <4 x i32> %10265, <4 x i32>* %10267, align 16
  %10268 = or i64 %10259, 1
  %10269 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %10268
  %10270 = bitcast <2 x i64>* %10269 to <4 x i32>*
  %10271 = load <4 x i32>, <4 x i32>* %10270, align 16
  %10272 = mul <4 x i32> %10271, <i32 11586, i32 11586, i32 11586, i32 11586>
  %10273 = add <4 x i32> %10272, <i32 2048, i32 2048, i32 2048, i32 2048>
  %10274 = ashr <4 x i32> %10273, <i32 12, i32 12, i32 12, i32 12>
  %10275 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %10268
  %10276 = bitcast <2 x i64>* %10275 to <4 x i32>*
  store <4 x i32> %10274, <4 x i32>* %10276, align 16
  %10277 = add nuw nsw i64 %10259, 2
  %10278 = icmp eq i64 %10277, 64
  br i1 %10278, label %10279, label %10258

10279:                                            ; preds = %10258
  %10280 = load <4 x i32>, <4 x i32>* %9637, align 16
  %10281 = load <4 x i32>, <4 x i32>* %9653, align 16
  %10282 = shufflevector <4 x i32> %10280, <4 x i32> %10281, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10283 = bitcast <4 x i32> %10282 to <2 x i64>
  %10284 = shufflevector <4 x i32> %10280, <4 x i32> %10281, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10285 = bitcast <4 x i32> %10284 to <2 x i64>
  %10286 = load <4 x i32>, <4 x i32>* %9669, align 16
  %10287 = load <4 x i32>, <4 x i32>* %9685, align 16
  %10288 = shufflevector <4 x i32> %10286, <4 x i32> %10287, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10289 = bitcast <4 x i32> %10288 to <2 x i64>
  %10290 = shufflevector <4 x i32> %10286, <4 x i32> %10287, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10291 = bitcast <4 x i32> %10290 to <2 x i64>
  %10292 = shufflevector <2 x i64> %10283, <2 x i64> %10289, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10292, <2 x i64>* %9604, align 16
  %10293 = shufflevector <2 x i64> %10283, <2 x i64> %10289, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10293, <2 x i64>* %9966, align 16
  %10294 = shufflevector <2 x i64> %10285, <2 x i64> %10291, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10294, <2 x i64>* %9968, align 16
  %10295 = shufflevector <2 x i64> %10285, <2 x i64> %10291, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10295, <2 x i64>* %9970, align 16
  %10296 = load <4 x i32>, <4 x i32>* %9641, align 16
  %10297 = load <4 x i32>, <4 x i32>* %9657, align 16
  %10298 = shufflevector <4 x i32> %10296, <4 x i32> %10297, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10299 = bitcast <4 x i32> %10298 to <2 x i64>
  %10300 = shufflevector <4 x i32> %10296, <4 x i32> %10297, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10301 = bitcast <4 x i32> %10300 to <2 x i64>
  %10302 = load <4 x i32>, <4 x i32>* %9673, align 16
  %10303 = load <4 x i32>, <4 x i32>* %9689, align 16
  %10304 = shufflevector <4 x i32> %10302, <4 x i32> %10303, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10305 = bitcast <4 x i32> %10304 to <2 x i64>
  %10306 = shufflevector <4 x i32> %10302, <4 x i32> %10303, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10307 = bitcast <4 x i32> %10306 to <2 x i64>
  %10308 = shufflevector <2 x i64> %10299, <2 x i64> %10305, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10308, <2 x i64>* %9980, align 16
  %10309 = shufflevector <2 x i64> %10299, <2 x i64> %10305, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10309, <2 x i64>* %9982, align 16
  %10310 = shufflevector <2 x i64> %10301, <2 x i64> %10307, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10310, <2 x i64>* %9984, align 16
  %10311 = shufflevector <2 x i64> %10301, <2 x i64> %10307, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10311, <2 x i64>* %9986, align 16
  %10312 = load <4 x i32>, <4 x i32>* %9717, align 16
  %10313 = load <4 x i32>, <4 x i32>* %9733, align 16
  %10314 = shufflevector <4 x i32> %10312, <4 x i32> %10313, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10315 = bitcast <4 x i32> %10314 to <2 x i64>
  %10316 = shufflevector <4 x i32> %10312, <4 x i32> %10313, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10317 = bitcast <4 x i32> %10316 to <2 x i64>
  %10318 = load <4 x i32>, <4 x i32>* %9749, align 16
  %10319 = load <4 x i32>, <4 x i32>* %9765, align 16
  %10320 = shufflevector <4 x i32> %10318, <4 x i32> %10319, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10321 = bitcast <4 x i32> %10320 to <2 x i64>
  %10322 = shufflevector <4 x i32> %10318, <4 x i32> %10319, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10323 = bitcast <4 x i32> %10322 to <2 x i64>
  %10324 = shufflevector <2 x i64> %10315, <2 x i64> %10321, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10324, <2 x i64>* %9999, align 16
  %10325 = shufflevector <2 x i64> %10315, <2 x i64> %10321, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10325, <2 x i64>* %10001, align 16
  %10326 = shufflevector <2 x i64> %10317, <2 x i64> %10323, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10326, <2 x i64>* %10003, align 16
  %10327 = shufflevector <2 x i64> %10317, <2 x i64> %10323, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10327, <2 x i64>* %10005, align 16
  %10328 = load <4 x i32>, <4 x i32>* %9721, align 16
  %10329 = load <4 x i32>, <4 x i32>* %9737, align 16
  %10330 = shufflevector <4 x i32> %10328, <4 x i32> %10329, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10331 = bitcast <4 x i32> %10330 to <2 x i64>
  %10332 = shufflevector <4 x i32> %10328, <4 x i32> %10329, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10333 = bitcast <4 x i32> %10332 to <2 x i64>
  %10334 = load <4 x i32>, <4 x i32>* %9753, align 16
  %10335 = load <4 x i32>, <4 x i32>* %9769, align 16
  %10336 = shufflevector <4 x i32> %10334, <4 x i32> %10335, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10337 = bitcast <4 x i32> %10336 to <2 x i64>
  %10338 = shufflevector <4 x i32> %10334, <4 x i32> %10335, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10339 = bitcast <4 x i32> %10338 to <2 x i64>
  %10340 = shufflevector <2 x i64> %10331, <2 x i64> %10337, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10340, <2 x i64>* %10019, align 16
  %10341 = shufflevector <2 x i64> %10331, <2 x i64> %10337, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10341, <2 x i64>* %10021, align 16
  %10342 = shufflevector <2 x i64> %10333, <2 x i64> %10339, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10342, <2 x i64>* %10023, align 16
  %10343 = shufflevector <2 x i64> %10333, <2 x i64> %10339, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10343, <2 x i64>* %10025, align 16
  %10344 = load <4 x i32>, <4 x i32>* %9645, align 16
  %10345 = load <4 x i32>, <4 x i32>* %9661, align 16
  %10346 = shufflevector <4 x i32> %10344, <4 x i32> %10345, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10347 = bitcast <4 x i32> %10346 to <2 x i64>
  %10348 = shufflevector <4 x i32> %10344, <4 x i32> %10345, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10349 = bitcast <4 x i32> %10348 to <2 x i64>
  %10350 = load <4 x i32>, <4 x i32>* %9677, align 16
  %10351 = load <4 x i32>, <4 x i32>* %9693, align 16
  %10352 = shufflevector <4 x i32> %10350, <4 x i32> %10351, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10353 = bitcast <4 x i32> %10352 to <2 x i64>
  %10354 = shufflevector <4 x i32> %10350, <4 x i32> %10351, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10355 = bitcast <4 x i32> %10354 to <2 x i64>
  %10356 = shufflevector <2 x i64> %10347, <2 x i64> %10353, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10356, <2 x i64>* %10035, align 16
  %10357 = shufflevector <2 x i64> %10347, <2 x i64> %10353, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10357, <2 x i64>* %10037, align 16
  %10358 = shufflevector <2 x i64> %10349, <2 x i64> %10355, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10358, <2 x i64>* %10039, align 16
  %10359 = shufflevector <2 x i64> %10349, <2 x i64> %10355, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10359, <2 x i64>* %10041, align 16
  %10360 = load <4 x i32>, <4 x i32>* %9649, align 16
  %10361 = load <4 x i32>, <4 x i32>* %9665, align 16
  %10362 = shufflevector <4 x i32> %10360, <4 x i32> %10361, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10363 = bitcast <4 x i32> %10362 to <2 x i64>
  %10364 = shufflevector <4 x i32> %10360, <4 x i32> %10361, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10365 = bitcast <4 x i32> %10364 to <2 x i64>
  %10366 = load <4 x i32>, <4 x i32>* %9681, align 16
  %10367 = load <4 x i32>, <4 x i32>* %9697, align 16
  %10368 = shufflevector <4 x i32> %10366, <4 x i32> %10367, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10369 = bitcast <4 x i32> %10368 to <2 x i64>
  %10370 = shufflevector <4 x i32> %10366, <4 x i32> %10367, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10371 = bitcast <4 x i32> %10370 to <2 x i64>
  %10372 = shufflevector <2 x i64> %10363, <2 x i64> %10369, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10372, <2 x i64>* %10051, align 16
  %10373 = shufflevector <2 x i64> %10363, <2 x i64> %10369, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10373, <2 x i64>* %10053, align 16
  %10374 = shufflevector <2 x i64> %10365, <2 x i64> %10371, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10374, <2 x i64>* %10055, align 16
  %10375 = shufflevector <2 x i64> %10365, <2 x i64> %10371, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10375, <2 x i64>* %10057, align 16
  %10376 = load <4 x i32>, <4 x i32>* %9725, align 16
  %10377 = load <4 x i32>, <4 x i32>* %9741, align 16
  %10378 = shufflevector <4 x i32> %10376, <4 x i32> %10377, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10379 = bitcast <4 x i32> %10378 to <2 x i64>
  %10380 = shufflevector <4 x i32> %10376, <4 x i32> %10377, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10381 = bitcast <4 x i32> %10380 to <2 x i64>
  %10382 = load <4 x i32>, <4 x i32>* %9757, align 16
  %10383 = load <4 x i32>, <4 x i32>* %9773, align 16
  %10384 = shufflevector <4 x i32> %10382, <4 x i32> %10383, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10385 = bitcast <4 x i32> %10384 to <2 x i64>
  %10386 = shufflevector <4 x i32> %10382, <4 x i32> %10383, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10387 = bitcast <4 x i32> %10386 to <2 x i64>
  %10388 = shufflevector <2 x i64> %10379, <2 x i64> %10385, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10388, <2 x i64>* %10071, align 16
  %10389 = shufflevector <2 x i64> %10379, <2 x i64> %10385, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10389, <2 x i64>* %10073, align 16
  %10390 = shufflevector <2 x i64> %10381, <2 x i64> %10387, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10390, <2 x i64>* %10075, align 16
  %10391 = shufflevector <2 x i64> %10381, <2 x i64> %10387, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10391, <2 x i64>* %10077, align 16
  %10392 = load <4 x i32>, <4 x i32>* %9729, align 16
  %10393 = load <4 x i32>, <4 x i32>* %9745, align 16
  %10394 = shufflevector <4 x i32> %10392, <4 x i32> %10393, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10395 = bitcast <4 x i32> %10394 to <2 x i64>
  %10396 = shufflevector <4 x i32> %10392, <4 x i32> %10393, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10397 = bitcast <4 x i32> %10396 to <2 x i64>
  %10398 = load <4 x i32>, <4 x i32>* %9761, align 16
  %10399 = load <4 x i32>, <4 x i32>* %9777, align 16
  %10400 = shufflevector <4 x i32> %10398, <4 x i32> %10399, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10401 = bitcast <4 x i32> %10400 to <2 x i64>
  %10402 = shufflevector <4 x i32> %10398, <4 x i32> %10399, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10403 = bitcast <4 x i32> %10402 to <2 x i64>
  %10404 = shufflevector <2 x i64> %10395, <2 x i64> %10401, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10404, <2 x i64>* %10091, align 16
  %10405 = shufflevector <2 x i64> %10395, <2 x i64> %10401, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10405, <2 x i64>* %10093, align 16
  %10406 = shufflevector <2 x i64> %10397, <2 x i64> %10403, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10406, <2 x i64>* %10095, align 16
  %10407 = shufflevector <2 x i64> %10397, <2 x i64> %10403, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10407, <2 x i64>* %10097, align 16
  %10408 = load <4 x i32>, <4 x i32>* %9797, align 16
  %10409 = load <4 x i32>, <4 x i32>* %9813, align 16
  %10410 = shufflevector <4 x i32> %10408, <4 x i32> %10409, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10411 = bitcast <4 x i32> %10410 to <2 x i64>
  %10412 = shufflevector <4 x i32> %10408, <4 x i32> %10409, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10413 = bitcast <4 x i32> %10412 to <2 x i64>
  %10414 = load <4 x i32>, <4 x i32>* %9829, align 16
  %10415 = load <4 x i32>, <4 x i32>* %9845, align 16
  %10416 = shufflevector <4 x i32> %10414, <4 x i32> %10415, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10417 = bitcast <4 x i32> %10416 to <2 x i64>
  %10418 = shufflevector <4 x i32> %10414, <4 x i32> %10415, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10419 = bitcast <4 x i32> %10418 to <2 x i64>
  %10420 = shufflevector <2 x i64> %10411, <2 x i64> %10417, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10420, <2 x i64>* %10111, align 16
  %10421 = shufflevector <2 x i64> %10411, <2 x i64> %10417, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10421, <2 x i64>* %10113, align 16
  %10422 = shufflevector <2 x i64> %10413, <2 x i64> %10419, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10422, <2 x i64>* %10115, align 16
  %10423 = shufflevector <2 x i64> %10413, <2 x i64> %10419, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10423, <2 x i64>* %10117, align 16
  %10424 = load <4 x i32>, <4 x i32>* %9801, align 16
  %10425 = load <4 x i32>, <4 x i32>* %9817, align 16
  %10426 = shufflevector <4 x i32> %10424, <4 x i32> %10425, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10427 = bitcast <4 x i32> %10426 to <2 x i64>
  %10428 = shufflevector <4 x i32> %10424, <4 x i32> %10425, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10429 = bitcast <4 x i32> %10428 to <2 x i64>
  %10430 = load <4 x i32>, <4 x i32>* %9833, align 16
  %10431 = load <4 x i32>, <4 x i32>* %9849, align 16
  %10432 = shufflevector <4 x i32> %10430, <4 x i32> %10431, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10433 = bitcast <4 x i32> %10432 to <2 x i64>
  %10434 = shufflevector <4 x i32> %10430, <4 x i32> %10431, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10435 = bitcast <4 x i32> %10434 to <2 x i64>
  %10436 = shufflevector <2 x i64> %10427, <2 x i64> %10433, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10436, <2 x i64>* %10131, align 16
  %10437 = shufflevector <2 x i64> %10427, <2 x i64> %10433, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10437, <2 x i64>* %10133, align 16
  %10438 = shufflevector <2 x i64> %10429, <2 x i64> %10435, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10438, <2 x i64>* %10135, align 16
  %10439 = shufflevector <2 x i64> %10429, <2 x i64> %10435, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10439, <2 x i64>* %10137, align 16
  %10440 = load <4 x i32>, <4 x i32>* %9877, align 16
  %10441 = load <4 x i32>, <4 x i32>* %9893, align 16
  %10442 = shufflevector <4 x i32> %10440, <4 x i32> %10441, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10443 = bitcast <4 x i32> %10442 to <2 x i64>
  %10444 = shufflevector <4 x i32> %10440, <4 x i32> %10441, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10445 = bitcast <4 x i32> %10444 to <2 x i64>
  %10446 = load <4 x i32>, <4 x i32>* %9909, align 16
  %10447 = load <4 x i32>, <4 x i32>* %9925, align 16
  %10448 = shufflevector <4 x i32> %10446, <4 x i32> %10447, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10449 = bitcast <4 x i32> %10448 to <2 x i64>
  %10450 = shufflevector <4 x i32> %10446, <4 x i32> %10447, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10451 = bitcast <4 x i32> %10450 to <2 x i64>
  %10452 = shufflevector <2 x i64> %10443, <2 x i64> %10449, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10452, <2 x i64>* %10151, align 16
  %10453 = shufflevector <2 x i64> %10443, <2 x i64> %10449, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10453, <2 x i64>* %10153, align 16
  %10454 = shufflevector <2 x i64> %10445, <2 x i64> %10451, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10454, <2 x i64>* %10155, align 16
  %10455 = shufflevector <2 x i64> %10445, <2 x i64> %10451, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10455, <2 x i64>* %10157, align 16
  %10456 = load <4 x i32>, <4 x i32>* %9881, align 16
  %10457 = load <4 x i32>, <4 x i32>* %9897, align 16
  %10458 = shufflevector <4 x i32> %10456, <4 x i32> %10457, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10459 = bitcast <4 x i32> %10458 to <2 x i64>
  %10460 = shufflevector <4 x i32> %10456, <4 x i32> %10457, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10461 = bitcast <4 x i32> %10460 to <2 x i64>
  %10462 = load <4 x i32>, <4 x i32>* %9913, align 16
  %10463 = load <4 x i32>, <4 x i32>* %9929, align 16
  %10464 = shufflevector <4 x i32> %10462, <4 x i32> %10463, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10465 = bitcast <4 x i32> %10464 to <2 x i64>
  %10466 = shufflevector <4 x i32> %10462, <4 x i32> %10463, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10467 = bitcast <4 x i32> %10466 to <2 x i64>
  %10468 = shufflevector <2 x i64> %10459, <2 x i64> %10465, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10468, <2 x i64>* %10171, align 16
  %10469 = shufflevector <2 x i64> %10459, <2 x i64> %10465, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10469, <2 x i64>* %10173, align 16
  %10470 = shufflevector <2 x i64> %10461, <2 x i64> %10467, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10470, <2 x i64>* %10175, align 16
  %10471 = shufflevector <2 x i64> %10461, <2 x i64> %10467, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10471, <2 x i64>* %10177, align 16
  %10472 = load <4 x i32>, <4 x i32>* %9805, align 16
  %10473 = load <4 x i32>, <4 x i32>* %9821, align 16
  %10474 = shufflevector <4 x i32> %10472, <4 x i32> %10473, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10475 = bitcast <4 x i32> %10474 to <2 x i64>
  %10476 = shufflevector <4 x i32> %10472, <4 x i32> %10473, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10477 = bitcast <4 x i32> %10476 to <2 x i64>
  %10478 = load <4 x i32>, <4 x i32>* %9837, align 16
  %10479 = load <4 x i32>, <4 x i32>* %9853, align 16
  %10480 = shufflevector <4 x i32> %10478, <4 x i32> %10479, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10481 = bitcast <4 x i32> %10480 to <2 x i64>
  %10482 = shufflevector <4 x i32> %10478, <4 x i32> %10479, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10483 = bitcast <4 x i32> %10482 to <2 x i64>
  %10484 = shufflevector <2 x i64> %10475, <2 x i64> %10481, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10484, <2 x i64>* %10191, align 16
  %10485 = shufflevector <2 x i64> %10475, <2 x i64> %10481, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10485, <2 x i64>* %10193, align 16
  %10486 = shufflevector <2 x i64> %10477, <2 x i64> %10483, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10486, <2 x i64>* %10195, align 16
  %10487 = shufflevector <2 x i64> %10477, <2 x i64> %10483, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10487, <2 x i64>* %10197, align 16
  %10488 = load <4 x i32>, <4 x i32>* %9809, align 16
  %10489 = load <4 x i32>, <4 x i32>* %9825, align 16
  %10490 = shufflevector <4 x i32> %10488, <4 x i32> %10489, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10491 = bitcast <4 x i32> %10490 to <2 x i64>
  %10492 = shufflevector <4 x i32> %10488, <4 x i32> %10489, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10493 = bitcast <4 x i32> %10492 to <2 x i64>
  %10494 = load <4 x i32>, <4 x i32>* %9841, align 16
  %10495 = load <4 x i32>, <4 x i32>* %9857, align 16
  %10496 = shufflevector <4 x i32> %10494, <4 x i32> %10495, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10497 = bitcast <4 x i32> %10496 to <2 x i64>
  %10498 = shufflevector <4 x i32> %10494, <4 x i32> %10495, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10499 = bitcast <4 x i32> %10498 to <2 x i64>
  %10500 = shufflevector <2 x i64> %10491, <2 x i64> %10497, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10500, <2 x i64>* %10211, align 16
  %10501 = shufflevector <2 x i64> %10491, <2 x i64> %10497, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10501, <2 x i64>* %10213, align 16
  %10502 = shufflevector <2 x i64> %10493, <2 x i64> %10499, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10502, <2 x i64>* %10215, align 16
  %10503 = shufflevector <2 x i64> %10493, <2 x i64> %10499, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10503, <2 x i64>* %10217, align 16
  %10504 = load <4 x i32>, <4 x i32>* %9885, align 16
  %10505 = load <4 x i32>, <4 x i32>* %9901, align 16
  %10506 = shufflevector <4 x i32> %10504, <4 x i32> %10505, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10507 = bitcast <4 x i32> %10506 to <2 x i64>
  %10508 = shufflevector <4 x i32> %10504, <4 x i32> %10505, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10509 = bitcast <4 x i32> %10508 to <2 x i64>
  %10510 = load <4 x i32>, <4 x i32>* %9917, align 16
  %10511 = load <4 x i32>, <4 x i32>* %9933, align 16
  %10512 = shufflevector <4 x i32> %10510, <4 x i32> %10511, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10513 = bitcast <4 x i32> %10512 to <2 x i64>
  %10514 = shufflevector <4 x i32> %10510, <4 x i32> %10511, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10515 = bitcast <4 x i32> %10514 to <2 x i64>
  %10516 = shufflevector <2 x i64> %10507, <2 x i64> %10513, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10516, <2 x i64>* %10231, align 16
  %10517 = shufflevector <2 x i64> %10507, <2 x i64> %10513, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10517, <2 x i64>* %10233, align 16
  %10518 = shufflevector <2 x i64> %10509, <2 x i64> %10515, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10518, <2 x i64>* %10235, align 16
  %10519 = shufflevector <2 x i64> %10509, <2 x i64> %10515, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10519, <2 x i64>* %10237, align 16
  %10520 = load <4 x i32>, <4 x i32>* %9889, align 16
  %10521 = load <4 x i32>, <4 x i32>* %9905, align 16
  %10522 = shufflevector <4 x i32> %10520, <4 x i32> %10521, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10523 = bitcast <4 x i32> %10522 to <2 x i64>
  %10524 = shufflevector <4 x i32> %10520, <4 x i32> %10521, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10525 = bitcast <4 x i32> %10524 to <2 x i64>
  %10526 = load <4 x i32>, <4 x i32>* %9921, align 16
  %10527 = load <4 x i32>, <4 x i32>* %9937, align 16
  %10528 = shufflevector <4 x i32> %10526, <4 x i32> %10527, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %10529 = bitcast <4 x i32> %10528 to <2 x i64>
  %10530 = shufflevector <4 x i32> %10526, <4 x i32> %10527, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %10531 = bitcast <4 x i32> %10530 to <2 x i64>
  %10532 = shufflevector <2 x i64> %10523, <2 x i64> %10529, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10532, <2 x i64>* %10251, align 16
  %10533 = shufflevector <2 x i64> %10523, <2 x i64> %10529, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10533, <2 x i64>* %10253, align 16
  %10534 = shufflevector <2 x i64> %10525, <2 x i64> %10531, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %10534, <2 x i64>* %10255, align 16
  %10535 = shufflevector <2 x i64> %10525, <2 x i64> %10531, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %10535, <2 x i64>* %10257, align 16
  %10536 = bitcast i32* %1 to <2 x i64>*
  %10537 = load <2 x i64>, <2 x i64>* %9604, align 16
  store <2 x i64> %10537, <2 x i64>* %10536, align 16
  %10538 = getelementptr inbounds i32, i32* %1, i64 4
  %10539 = bitcast i32* %10538 to <2 x i64>*
  %10540 = load <2 x i64>, <2 x i64>* %9999, align 16
  store <2 x i64> %10540, <2 x i64>* %10539, align 16
  %10541 = getelementptr inbounds i32, i32* %1, i64 8
  %10542 = bitcast i32* %10541 to <2 x i64>*
  %10543 = load <2 x i64>, <2 x i64>* %10111, align 16
  store <2 x i64> %10543, <2 x i64>* %10542, align 16
  %10544 = getelementptr inbounds i32, i32* %1, i64 12
  %10545 = bitcast i32* %10544 to <2 x i64>*
  %10546 = load <2 x i64>, <2 x i64>* %10151, align 16
  store <2 x i64> %10546, <2 x i64>* %10545, align 16
  %10547 = getelementptr inbounds i32, i32* %1, i64 16
  %10548 = bitcast i32* %10547 to <2 x i64>*
  %10549 = load <2 x i64>, <2 x i64>* %9966, align 16
  store <2 x i64> %10549, <2 x i64>* %10548, align 16
  %10550 = getelementptr inbounds i32, i32* %1, i64 20
  %10551 = bitcast i32* %10550 to <2 x i64>*
  %10552 = load <2 x i64>, <2 x i64>* %10001, align 16
  store <2 x i64> %10552, <2 x i64>* %10551, align 16
  %10553 = getelementptr inbounds i32, i32* %1, i64 24
  %10554 = bitcast i32* %10553 to <2 x i64>*
  %10555 = load <2 x i64>, <2 x i64>* %10113, align 16
  store <2 x i64> %10555, <2 x i64>* %10554, align 16
  %10556 = getelementptr inbounds i32, i32* %1, i64 28
  %10557 = bitcast i32* %10556 to <2 x i64>*
  %10558 = load <2 x i64>, <2 x i64>* %10153, align 16
  store <2 x i64> %10558, <2 x i64>* %10557, align 16
  %10559 = getelementptr inbounds i32, i32* %1, i64 32
  %10560 = bitcast i32* %10559 to <2 x i64>*
  %10561 = load <2 x i64>, <2 x i64>* %9968, align 16
  store <2 x i64> %10561, <2 x i64>* %10560, align 16
  %10562 = getelementptr inbounds i32, i32* %1, i64 36
  %10563 = bitcast i32* %10562 to <2 x i64>*
  %10564 = load <2 x i64>, <2 x i64>* %10003, align 16
  store <2 x i64> %10564, <2 x i64>* %10563, align 16
  %10565 = getelementptr inbounds i32, i32* %1, i64 40
  %10566 = bitcast i32* %10565 to <2 x i64>*
  %10567 = load <2 x i64>, <2 x i64>* %10115, align 16
  store <2 x i64> %10567, <2 x i64>* %10566, align 16
  %10568 = getelementptr inbounds i32, i32* %1, i64 44
  %10569 = bitcast i32* %10568 to <2 x i64>*
  %10570 = load <2 x i64>, <2 x i64>* %10155, align 16
  store <2 x i64> %10570, <2 x i64>* %10569, align 16
  %10571 = getelementptr inbounds i32, i32* %1, i64 48
  %10572 = bitcast i32* %10571 to <2 x i64>*
  %10573 = load <2 x i64>, <2 x i64>* %9970, align 16
  store <2 x i64> %10573, <2 x i64>* %10572, align 16
  %10574 = getelementptr inbounds i32, i32* %1, i64 52
  %10575 = bitcast i32* %10574 to <2 x i64>*
  %10576 = load <2 x i64>, <2 x i64>* %10005, align 16
  store <2 x i64> %10576, <2 x i64>* %10575, align 16
  %10577 = getelementptr inbounds i32, i32* %1, i64 56
  %10578 = bitcast i32* %10577 to <2 x i64>*
  %10579 = load <2 x i64>, <2 x i64>* %10117, align 16
  store <2 x i64> %10579, <2 x i64>* %10578, align 16
  %10580 = getelementptr inbounds i32, i32* %1, i64 60
  %10581 = bitcast i32* %10580 to <2 x i64>*
  %10582 = load <2 x i64>, <2 x i64>* %10157, align 16
  store <2 x i64> %10582, <2 x i64>* %10581, align 16
  %10583 = getelementptr inbounds i32, i32* %1, i64 64
  %10584 = bitcast i32* %10583 to <2 x i64>*
  %10585 = load <2 x i64>, <2 x i64>* %9980, align 16
  store <2 x i64> %10585, <2 x i64>* %10584, align 16
  %10586 = getelementptr inbounds i32, i32* %1, i64 68
  %10587 = bitcast i32* %10586 to <2 x i64>*
  %10588 = load <2 x i64>, <2 x i64>* %10019, align 16
  store <2 x i64> %10588, <2 x i64>* %10587, align 16
  %10589 = getelementptr inbounds i32, i32* %1, i64 72
  %10590 = bitcast i32* %10589 to <2 x i64>*
  %10591 = load <2 x i64>, <2 x i64>* %10131, align 16
  store <2 x i64> %10591, <2 x i64>* %10590, align 16
  %10592 = getelementptr inbounds i32, i32* %1, i64 76
  %10593 = bitcast i32* %10592 to <2 x i64>*
  %10594 = load <2 x i64>, <2 x i64>* %10171, align 16
  store <2 x i64> %10594, <2 x i64>* %10593, align 16
  %10595 = getelementptr inbounds i32, i32* %1, i64 80
  %10596 = bitcast i32* %10595 to <2 x i64>*
  %10597 = load <2 x i64>, <2 x i64>* %9982, align 16
  store <2 x i64> %10597, <2 x i64>* %10596, align 16
  %10598 = getelementptr inbounds i32, i32* %1, i64 84
  %10599 = bitcast i32* %10598 to <2 x i64>*
  %10600 = load <2 x i64>, <2 x i64>* %10021, align 16
  store <2 x i64> %10600, <2 x i64>* %10599, align 16
  %10601 = getelementptr inbounds i32, i32* %1, i64 88
  %10602 = bitcast i32* %10601 to <2 x i64>*
  %10603 = load <2 x i64>, <2 x i64>* %10133, align 16
  store <2 x i64> %10603, <2 x i64>* %10602, align 16
  %10604 = getelementptr inbounds i32, i32* %1, i64 92
  %10605 = bitcast i32* %10604 to <2 x i64>*
  %10606 = load <2 x i64>, <2 x i64>* %10173, align 16
  store <2 x i64> %10606, <2 x i64>* %10605, align 16
  %10607 = getelementptr inbounds i32, i32* %1, i64 96
  %10608 = bitcast i32* %10607 to <2 x i64>*
  %10609 = load <2 x i64>, <2 x i64>* %9984, align 16
  store <2 x i64> %10609, <2 x i64>* %10608, align 16
  %10610 = getelementptr inbounds i32, i32* %1, i64 100
  %10611 = bitcast i32* %10610 to <2 x i64>*
  %10612 = load <2 x i64>, <2 x i64>* %10023, align 16
  store <2 x i64> %10612, <2 x i64>* %10611, align 16
  %10613 = getelementptr inbounds i32, i32* %1, i64 104
  %10614 = bitcast i32* %10613 to <2 x i64>*
  %10615 = load <2 x i64>, <2 x i64>* %10135, align 16
  store <2 x i64> %10615, <2 x i64>* %10614, align 16
  %10616 = getelementptr inbounds i32, i32* %1, i64 108
  %10617 = bitcast i32* %10616 to <2 x i64>*
  %10618 = load <2 x i64>, <2 x i64>* %10175, align 16
  store <2 x i64> %10618, <2 x i64>* %10617, align 16
  %10619 = getelementptr inbounds i32, i32* %1, i64 112
  %10620 = bitcast i32* %10619 to <2 x i64>*
  %10621 = load <2 x i64>, <2 x i64>* %9986, align 16
  store <2 x i64> %10621, <2 x i64>* %10620, align 16
  %10622 = getelementptr inbounds i32, i32* %1, i64 116
  %10623 = bitcast i32* %10622 to <2 x i64>*
  %10624 = load <2 x i64>, <2 x i64>* %10025, align 16
  store <2 x i64> %10624, <2 x i64>* %10623, align 16
  %10625 = getelementptr inbounds i32, i32* %1, i64 120
  %10626 = bitcast i32* %10625 to <2 x i64>*
  %10627 = load <2 x i64>, <2 x i64>* %10137, align 16
  store <2 x i64> %10627, <2 x i64>* %10626, align 16
  %10628 = getelementptr inbounds i32, i32* %1, i64 124
  %10629 = bitcast i32* %10628 to <2 x i64>*
  %10630 = load <2 x i64>, <2 x i64>* %10177, align 16
  store <2 x i64> %10630, <2 x i64>* %10629, align 16
  %10631 = getelementptr inbounds i32, i32* %1, i64 128
  %10632 = bitcast i32* %10631 to <2 x i64>*
  %10633 = load <2 x i64>, <2 x i64>* %10035, align 16
  store <2 x i64> %10633, <2 x i64>* %10632, align 16
  %10634 = getelementptr inbounds i32, i32* %1, i64 132
  %10635 = bitcast i32* %10634 to <2 x i64>*
  %10636 = load <2 x i64>, <2 x i64>* %10071, align 16
  store <2 x i64> %10636, <2 x i64>* %10635, align 16
  %10637 = getelementptr inbounds i32, i32* %1, i64 136
  %10638 = bitcast i32* %10637 to <2 x i64>*
  %10639 = load <2 x i64>, <2 x i64>* %10191, align 16
  store <2 x i64> %10639, <2 x i64>* %10638, align 16
  %10640 = getelementptr inbounds i32, i32* %1, i64 140
  %10641 = bitcast i32* %10640 to <2 x i64>*
  %10642 = load <2 x i64>, <2 x i64>* %10231, align 16
  store <2 x i64> %10642, <2 x i64>* %10641, align 16
  %10643 = getelementptr inbounds i32, i32* %1, i64 144
  %10644 = bitcast i32* %10643 to <2 x i64>*
  %10645 = load <2 x i64>, <2 x i64>* %10037, align 16
  store <2 x i64> %10645, <2 x i64>* %10644, align 16
  %10646 = getelementptr inbounds i32, i32* %1, i64 148
  %10647 = bitcast i32* %10646 to <2 x i64>*
  %10648 = load <2 x i64>, <2 x i64>* %10073, align 16
  store <2 x i64> %10648, <2 x i64>* %10647, align 16
  %10649 = getelementptr inbounds i32, i32* %1, i64 152
  %10650 = bitcast i32* %10649 to <2 x i64>*
  %10651 = load <2 x i64>, <2 x i64>* %10193, align 16
  store <2 x i64> %10651, <2 x i64>* %10650, align 16
  %10652 = getelementptr inbounds i32, i32* %1, i64 156
  %10653 = bitcast i32* %10652 to <2 x i64>*
  %10654 = load <2 x i64>, <2 x i64>* %10233, align 16
  store <2 x i64> %10654, <2 x i64>* %10653, align 16
  %10655 = getelementptr inbounds i32, i32* %1, i64 160
  %10656 = bitcast i32* %10655 to <2 x i64>*
  %10657 = load <2 x i64>, <2 x i64>* %10039, align 16
  store <2 x i64> %10657, <2 x i64>* %10656, align 16
  %10658 = getelementptr inbounds i32, i32* %1, i64 164
  %10659 = bitcast i32* %10658 to <2 x i64>*
  %10660 = load <2 x i64>, <2 x i64>* %10075, align 16
  store <2 x i64> %10660, <2 x i64>* %10659, align 16
  %10661 = getelementptr inbounds i32, i32* %1, i64 168
  %10662 = bitcast i32* %10661 to <2 x i64>*
  %10663 = load <2 x i64>, <2 x i64>* %10195, align 16
  store <2 x i64> %10663, <2 x i64>* %10662, align 16
  %10664 = getelementptr inbounds i32, i32* %1, i64 172
  %10665 = bitcast i32* %10664 to <2 x i64>*
  %10666 = load <2 x i64>, <2 x i64>* %10235, align 16
  store <2 x i64> %10666, <2 x i64>* %10665, align 16
  %10667 = getelementptr inbounds i32, i32* %1, i64 176
  %10668 = bitcast i32* %10667 to <2 x i64>*
  %10669 = load <2 x i64>, <2 x i64>* %10041, align 16
  store <2 x i64> %10669, <2 x i64>* %10668, align 16
  %10670 = getelementptr inbounds i32, i32* %1, i64 180
  %10671 = bitcast i32* %10670 to <2 x i64>*
  %10672 = load <2 x i64>, <2 x i64>* %10077, align 16
  store <2 x i64> %10672, <2 x i64>* %10671, align 16
  %10673 = getelementptr inbounds i32, i32* %1, i64 184
  %10674 = bitcast i32* %10673 to <2 x i64>*
  %10675 = load <2 x i64>, <2 x i64>* %10197, align 16
  store <2 x i64> %10675, <2 x i64>* %10674, align 16
  %10676 = getelementptr inbounds i32, i32* %1, i64 188
  %10677 = bitcast i32* %10676 to <2 x i64>*
  %10678 = load <2 x i64>, <2 x i64>* %10237, align 16
  store <2 x i64> %10678, <2 x i64>* %10677, align 16
  %10679 = getelementptr inbounds i32, i32* %1, i64 192
  %10680 = bitcast i32* %10679 to <2 x i64>*
  %10681 = load <2 x i64>, <2 x i64>* %10051, align 16
  store <2 x i64> %10681, <2 x i64>* %10680, align 16
  %10682 = getelementptr inbounds i32, i32* %1, i64 196
  %10683 = bitcast i32* %10682 to <2 x i64>*
  %10684 = load <2 x i64>, <2 x i64>* %10091, align 16
  store <2 x i64> %10684, <2 x i64>* %10683, align 16
  %10685 = getelementptr inbounds i32, i32* %1, i64 200
  %10686 = bitcast i32* %10685 to <2 x i64>*
  %10687 = load <2 x i64>, <2 x i64>* %10211, align 16
  store <2 x i64> %10687, <2 x i64>* %10686, align 16
  %10688 = getelementptr inbounds i32, i32* %1, i64 204
  %10689 = bitcast i32* %10688 to <2 x i64>*
  %10690 = load <2 x i64>, <2 x i64>* %10251, align 16
  store <2 x i64> %10690, <2 x i64>* %10689, align 16
  %10691 = getelementptr inbounds i32, i32* %1, i64 208
  %10692 = bitcast i32* %10691 to <2 x i64>*
  %10693 = load <2 x i64>, <2 x i64>* %10053, align 16
  store <2 x i64> %10693, <2 x i64>* %10692, align 16
  %10694 = getelementptr inbounds i32, i32* %1, i64 212
  %10695 = bitcast i32* %10694 to <2 x i64>*
  %10696 = load <2 x i64>, <2 x i64>* %10093, align 16
  store <2 x i64> %10696, <2 x i64>* %10695, align 16
  %10697 = getelementptr inbounds i32, i32* %1, i64 216
  %10698 = bitcast i32* %10697 to <2 x i64>*
  %10699 = load <2 x i64>, <2 x i64>* %10213, align 16
  store <2 x i64> %10699, <2 x i64>* %10698, align 16
  %10700 = getelementptr inbounds i32, i32* %1, i64 220
  %10701 = bitcast i32* %10700 to <2 x i64>*
  %10702 = load <2 x i64>, <2 x i64>* %10253, align 16
  store <2 x i64> %10702, <2 x i64>* %10701, align 16
  %10703 = getelementptr inbounds i32, i32* %1, i64 224
  %10704 = bitcast i32* %10703 to <2 x i64>*
  %10705 = load <2 x i64>, <2 x i64>* %10055, align 16
  store <2 x i64> %10705, <2 x i64>* %10704, align 16
  %10706 = getelementptr inbounds i32, i32* %1, i64 228
  %10707 = bitcast i32* %10706 to <2 x i64>*
  %10708 = load <2 x i64>, <2 x i64>* %10095, align 16
  store <2 x i64> %10708, <2 x i64>* %10707, align 16
  %10709 = getelementptr inbounds i32, i32* %1, i64 232
  %10710 = bitcast i32* %10709 to <2 x i64>*
  %10711 = load <2 x i64>, <2 x i64>* %10215, align 16
  store <2 x i64> %10711, <2 x i64>* %10710, align 16
  %10712 = getelementptr inbounds i32, i32* %1, i64 236
  %10713 = bitcast i32* %10712 to <2 x i64>*
  %10714 = load <2 x i64>, <2 x i64>* %10255, align 16
  store <2 x i64> %10714, <2 x i64>* %10713, align 16
  %10715 = getelementptr inbounds i32, i32* %1, i64 240
  %10716 = bitcast i32* %10715 to <2 x i64>*
  %10717 = load <2 x i64>, <2 x i64>* %10057, align 16
  store <2 x i64> %10717, <2 x i64>* %10716, align 16
  %10718 = getelementptr inbounds i32, i32* %1, i64 244
  %10719 = bitcast i32* %10718 to <2 x i64>*
  %10720 = load <2 x i64>, <2 x i64>* %10097, align 16
  store <2 x i64> %10720, <2 x i64>* %10719, align 16
  %10721 = getelementptr inbounds i32, i32* %1, i64 248
  %10722 = bitcast i32* %10721 to <2 x i64>*
  %10723 = load <2 x i64>, <2 x i64>* %10217, align 16
  store <2 x i64> %10723, <2 x i64>* %10722, align 16
  %10724 = getelementptr inbounds i32, i32* %1, i64 252
  %10725 = bitcast i32* %10724 to <2 x i64>*
  %10726 = load <2 x i64>, <2 x i64>* %10257, align 16
  store <2 x i64> %10726, <2 x i64>* %10725, align 16
  br label %17357

10727:                                            ; preds = %5
  %10728 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %10729 = load i8, i8* %10, align 1
  %10730 = sext i8 %10729 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %10728, i32 %2, i32 0, i32 0, i32 %10730)
  %10731 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %10732 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  %10733 = sext i8 %10732 to i32
  call void @fdct16x16_sse4_1(<2 x i64>* nonnull %10728, <2 x i64>* nonnull %10731, i32 %10733, i32 4)
  %10734 = getelementptr inbounds i8, i8* %10, i64 1
  %10735 = load i8, i8* %10734, align 1
  %10736 = sext i8 %10735 to i32
  %10737 = sub nsw i32 0, %10736
  %10738 = xor i32 %10736, -1
  %10739 = shl i32 1, %10738
  %10740 = insertelement <4 x i32> undef, i32 %10739, i32 0
  %10741 = shufflevector <4 x i32> %10740, <4 x i32> undef, <4 x i32> zeroinitializer
  %10742 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %10743 = load <4 x i32>, <4 x i32>* %10742, align 16
  %10744 = add <4 x i32> %10741, %10743
  %10745 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %10746 = bitcast <2 x i64>* %10745 to <4 x i32>*
  %10747 = load <4 x i32>, <4 x i32>* %10746, align 16
  %10748 = add <4 x i32> %10741, %10747
  %10749 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %10750 = bitcast <2 x i64>* %10749 to <4 x i32>*
  %10751 = load <4 x i32>, <4 x i32>* %10750, align 16
  %10752 = add <4 x i32> %10741, %10751
  %10753 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %10754 = bitcast <2 x i64>* %10753 to <4 x i32>*
  %10755 = load <4 x i32>, <4 x i32>* %10754, align 16
  %10756 = add <4 x i32> %10755, %10741
  %10757 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %10758 = bitcast <2 x i64>* %10757 to <4 x i32>*
  %10759 = load <4 x i32>, <4 x i32>* %10758, align 16
  %10760 = add <4 x i32> %10759, %10741
  %10761 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %10762 = bitcast <2 x i64>* %10761 to <4 x i32>*
  %10763 = load <4 x i32>, <4 x i32>* %10762, align 16
  %10764 = add <4 x i32> %10763, %10741
  %10765 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %10766 = bitcast <2 x i64>* %10765 to <4 x i32>*
  %10767 = load <4 x i32>, <4 x i32>* %10766, align 16
  %10768 = add <4 x i32> %10767, %10741
  %10769 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %10770 = bitcast <2 x i64>* %10769 to <4 x i32>*
  %10771 = load <4 x i32>, <4 x i32>* %10770, align 16
  %10772 = add <4 x i32> %10771, %10741
  %10773 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %10774 = bitcast <2 x i64>* %10773 to <4 x i32>*
  %10775 = load <4 x i32>, <4 x i32>* %10774, align 16
  %10776 = add <4 x i32> %10775, %10741
  %10777 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %10778 = bitcast <2 x i64>* %10777 to <4 x i32>*
  %10779 = load <4 x i32>, <4 x i32>* %10778, align 16
  %10780 = add <4 x i32> %10779, %10741
  %10781 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %10782 = bitcast <2 x i64>* %10781 to <4 x i32>*
  %10783 = load <4 x i32>, <4 x i32>* %10782, align 16
  %10784 = add <4 x i32> %10783, %10741
  %10785 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %10786 = bitcast <2 x i64>* %10785 to <4 x i32>*
  %10787 = load <4 x i32>, <4 x i32>* %10786, align 16
  %10788 = add <4 x i32> %10787, %10741
  %10789 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %10790 = bitcast <2 x i64>* %10789 to <4 x i32>*
  %10791 = load <4 x i32>, <4 x i32>* %10790, align 16
  %10792 = add <4 x i32> %10791, %10741
  %10793 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %10794 = bitcast <2 x i64>* %10793 to <4 x i32>*
  %10795 = load <4 x i32>, <4 x i32>* %10794, align 16
  %10796 = add <4 x i32> %10795, %10741
  %10797 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %10798 = bitcast <2 x i64>* %10797 to <4 x i32>*
  %10799 = load <4 x i32>, <4 x i32>* %10798, align 16
  %10800 = add <4 x i32> %10799, %10741
  %10801 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %10802 = bitcast <2 x i64>* %10801 to <4 x i32>*
  %10803 = load <4 x i32>, <4 x i32>* %10802, align 16
  %10804 = add <4 x i32> %10803, %10741
  %10805 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10744, i32 %10737) #8
  store <4 x i32> %10805, <4 x i32>* %10742, align 16
  %10806 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10748, i32 %10737) #8
  store <4 x i32> %10806, <4 x i32>* %10746, align 16
  %10807 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10752, i32 %10737) #8
  store <4 x i32> %10807, <4 x i32>* %10750, align 16
  %10808 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10756, i32 %10737) #8
  store <4 x i32> %10808, <4 x i32>* %10754, align 16
  %10809 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10760, i32 %10737) #8
  store <4 x i32> %10809, <4 x i32>* %10758, align 16
  %10810 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10764, i32 %10737) #8
  store <4 x i32> %10810, <4 x i32>* %10762, align 16
  %10811 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10768, i32 %10737) #8
  store <4 x i32> %10811, <4 x i32>* %10766, align 16
  %10812 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10772, i32 %10737) #8
  store <4 x i32> %10812, <4 x i32>* %10770, align 16
  %10813 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10776, i32 %10737) #8
  store <4 x i32> %10813, <4 x i32>* %10774, align 16
  %10814 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10780, i32 %10737) #8
  store <4 x i32> %10814, <4 x i32>* %10778, align 16
  %10815 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10784, i32 %10737) #8
  store <4 x i32> %10815, <4 x i32>* %10782, align 16
  %10816 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10788, i32 %10737) #8
  store <4 x i32> %10816, <4 x i32>* %10786, align 16
  %10817 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10792, i32 %10737) #8
  store <4 x i32> %10817, <4 x i32>* %10790, align 16
  %10818 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10796, i32 %10737) #8
  store <4 x i32> %10818, <4 x i32>* %10794, align 16
  %10819 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10800, i32 %10737) #8
  store <4 x i32> %10819, <4 x i32>* %10798, align 16
  %10820 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10804, i32 %10737) #8
  store <4 x i32> %10820, <4 x i32>* %10802, align 16
  %10821 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %10822 = bitcast <2 x i64>* %10821 to <4 x i32>*
  %10823 = load <4 x i32>, <4 x i32>* %10822, align 16
  %10824 = add <4 x i32> %10823, %10741
  %10825 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %10826 = bitcast <2 x i64>* %10825 to <4 x i32>*
  %10827 = load <4 x i32>, <4 x i32>* %10826, align 16
  %10828 = add <4 x i32> %10827, %10741
  %10829 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %10830 = bitcast <2 x i64>* %10829 to <4 x i32>*
  %10831 = load <4 x i32>, <4 x i32>* %10830, align 16
  %10832 = add <4 x i32> %10831, %10741
  %10833 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %10834 = bitcast <2 x i64>* %10833 to <4 x i32>*
  %10835 = load <4 x i32>, <4 x i32>* %10834, align 16
  %10836 = add <4 x i32> %10835, %10741
  %10837 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %10838 = bitcast <2 x i64>* %10837 to <4 x i32>*
  %10839 = load <4 x i32>, <4 x i32>* %10838, align 16
  %10840 = add <4 x i32> %10839, %10741
  %10841 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %10842 = bitcast <2 x i64>* %10841 to <4 x i32>*
  %10843 = load <4 x i32>, <4 x i32>* %10842, align 16
  %10844 = add <4 x i32> %10843, %10741
  %10845 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %10846 = bitcast <2 x i64>* %10845 to <4 x i32>*
  %10847 = load <4 x i32>, <4 x i32>* %10846, align 16
  %10848 = add <4 x i32> %10847, %10741
  %10849 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %10850 = bitcast <2 x i64>* %10849 to <4 x i32>*
  %10851 = load <4 x i32>, <4 x i32>* %10850, align 16
  %10852 = add <4 x i32> %10851, %10741
  %10853 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %10854 = bitcast <2 x i64>* %10853 to <4 x i32>*
  %10855 = load <4 x i32>, <4 x i32>* %10854, align 16
  %10856 = add <4 x i32> %10855, %10741
  %10857 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %10858 = bitcast <2 x i64>* %10857 to <4 x i32>*
  %10859 = load <4 x i32>, <4 x i32>* %10858, align 16
  %10860 = add <4 x i32> %10859, %10741
  %10861 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %10862 = bitcast <2 x i64>* %10861 to <4 x i32>*
  %10863 = load <4 x i32>, <4 x i32>* %10862, align 16
  %10864 = add <4 x i32> %10863, %10741
  %10865 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %10866 = bitcast <2 x i64>* %10865 to <4 x i32>*
  %10867 = load <4 x i32>, <4 x i32>* %10866, align 16
  %10868 = add <4 x i32> %10867, %10741
  %10869 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %10870 = bitcast <2 x i64>* %10869 to <4 x i32>*
  %10871 = load <4 x i32>, <4 x i32>* %10870, align 16
  %10872 = add <4 x i32> %10871, %10741
  %10873 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %10874 = bitcast <2 x i64>* %10873 to <4 x i32>*
  %10875 = load <4 x i32>, <4 x i32>* %10874, align 16
  %10876 = add <4 x i32> %10875, %10741
  %10877 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %10878 = bitcast <2 x i64>* %10877 to <4 x i32>*
  %10879 = load <4 x i32>, <4 x i32>* %10878, align 16
  %10880 = add <4 x i32> %10879, %10741
  %10881 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %10882 = bitcast <2 x i64>* %10881 to <4 x i32>*
  %10883 = load <4 x i32>, <4 x i32>* %10882, align 16
  %10884 = add <4 x i32> %10883, %10741
  %10885 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10824, i32 %10737) #8
  store <4 x i32> %10885, <4 x i32>* %10822, align 16
  %10886 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10828, i32 %10737) #8
  store <4 x i32> %10886, <4 x i32>* %10826, align 16
  %10887 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10832, i32 %10737) #8
  store <4 x i32> %10887, <4 x i32>* %10830, align 16
  %10888 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10836, i32 %10737) #8
  store <4 x i32> %10888, <4 x i32>* %10834, align 16
  %10889 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10840, i32 %10737) #8
  store <4 x i32> %10889, <4 x i32>* %10838, align 16
  %10890 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10844, i32 %10737) #8
  store <4 x i32> %10890, <4 x i32>* %10842, align 16
  %10891 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10848, i32 %10737) #8
  store <4 x i32> %10891, <4 x i32>* %10846, align 16
  %10892 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10852, i32 %10737) #8
  store <4 x i32> %10892, <4 x i32>* %10850, align 16
  %10893 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10856, i32 %10737) #8
  store <4 x i32> %10893, <4 x i32>* %10854, align 16
  %10894 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10860, i32 %10737) #8
  store <4 x i32> %10894, <4 x i32>* %10858, align 16
  %10895 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10864, i32 %10737) #8
  store <4 x i32> %10895, <4 x i32>* %10862, align 16
  %10896 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10868, i32 %10737) #8
  store <4 x i32> %10896, <4 x i32>* %10866, align 16
  %10897 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10872, i32 %10737) #8
  store <4 x i32> %10897, <4 x i32>* %10870, align 16
  %10898 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10876, i32 %10737) #8
  store <4 x i32> %10898, <4 x i32>* %10874, align 16
  %10899 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10880, i32 %10737) #8
  store <4 x i32> %10899, <4 x i32>* %10878, align 16
  %10900 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10884, i32 %10737) #8
  store <4 x i32> %10900, <4 x i32>* %10882, align 16
  %10901 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %10902 = bitcast <2 x i64>* %10901 to <4 x i32>*
  %10903 = load <4 x i32>, <4 x i32>* %10902, align 16
  %10904 = add <4 x i32> %10903, %10741
  %10905 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %10906 = bitcast <2 x i64>* %10905 to <4 x i32>*
  %10907 = load <4 x i32>, <4 x i32>* %10906, align 16
  %10908 = add <4 x i32> %10907, %10741
  %10909 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %10910 = bitcast <2 x i64>* %10909 to <4 x i32>*
  %10911 = load <4 x i32>, <4 x i32>* %10910, align 16
  %10912 = add <4 x i32> %10911, %10741
  %10913 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %10914 = bitcast <2 x i64>* %10913 to <4 x i32>*
  %10915 = load <4 x i32>, <4 x i32>* %10914, align 16
  %10916 = add <4 x i32> %10915, %10741
  %10917 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %10918 = bitcast <2 x i64>* %10917 to <4 x i32>*
  %10919 = load <4 x i32>, <4 x i32>* %10918, align 16
  %10920 = add <4 x i32> %10919, %10741
  %10921 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %10922 = bitcast <2 x i64>* %10921 to <4 x i32>*
  %10923 = load <4 x i32>, <4 x i32>* %10922, align 16
  %10924 = add <4 x i32> %10923, %10741
  %10925 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %10926 = bitcast <2 x i64>* %10925 to <4 x i32>*
  %10927 = load <4 x i32>, <4 x i32>* %10926, align 16
  %10928 = add <4 x i32> %10927, %10741
  %10929 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %10930 = bitcast <2 x i64>* %10929 to <4 x i32>*
  %10931 = load <4 x i32>, <4 x i32>* %10930, align 16
  %10932 = add <4 x i32> %10931, %10741
  %10933 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %10934 = bitcast <2 x i64>* %10933 to <4 x i32>*
  %10935 = load <4 x i32>, <4 x i32>* %10934, align 16
  %10936 = add <4 x i32> %10935, %10741
  %10937 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %10938 = bitcast <2 x i64>* %10937 to <4 x i32>*
  %10939 = load <4 x i32>, <4 x i32>* %10938, align 16
  %10940 = add <4 x i32> %10939, %10741
  %10941 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %10942 = bitcast <2 x i64>* %10941 to <4 x i32>*
  %10943 = load <4 x i32>, <4 x i32>* %10942, align 16
  %10944 = add <4 x i32> %10943, %10741
  %10945 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %10946 = bitcast <2 x i64>* %10945 to <4 x i32>*
  %10947 = load <4 x i32>, <4 x i32>* %10946, align 16
  %10948 = add <4 x i32> %10947, %10741
  %10949 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %10950 = bitcast <2 x i64>* %10949 to <4 x i32>*
  %10951 = load <4 x i32>, <4 x i32>* %10950, align 16
  %10952 = add <4 x i32> %10951, %10741
  %10953 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %10954 = bitcast <2 x i64>* %10953 to <4 x i32>*
  %10955 = load <4 x i32>, <4 x i32>* %10954, align 16
  %10956 = add <4 x i32> %10955, %10741
  %10957 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %10958 = bitcast <2 x i64>* %10957 to <4 x i32>*
  %10959 = load <4 x i32>, <4 x i32>* %10958, align 16
  %10960 = add <4 x i32> %10959, %10741
  %10961 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %10962 = bitcast <2 x i64>* %10961 to <4 x i32>*
  %10963 = load <4 x i32>, <4 x i32>* %10962, align 16
  %10964 = add <4 x i32> %10963, %10741
  %10965 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10904, i32 %10737) #8
  store <4 x i32> %10965, <4 x i32>* %10902, align 16
  %10966 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10908, i32 %10737) #8
  store <4 x i32> %10966, <4 x i32>* %10906, align 16
  %10967 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10912, i32 %10737) #8
  store <4 x i32> %10967, <4 x i32>* %10910, align 16
  %10968 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10916, i32 %10737) #8
  store <4 x i32> %10968, <4 x i32>* %10914, align 16
  %10969 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10920, i32 %10737) #8
  store <4 x i32> %10969, <4 x i32>* %10918, align 16
  %10970 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10924, i32 %10737) #8
  store <4 x i32> %10970, <4 x i32>* %10922, align 16
  %10971 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10928, i32 %10737) #8
  store <4 x i32> %10971, <4 x i32>* %10926, align 16
  %10972 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10932, i32 %10737) #8
  store <4 x i32> %10972, <4 x i32>* %10930, align 16
  %10973 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10936, i32 %10737) #8
  store <4 x i32> %10973, <4 x i32>* %10934, align 16
  %10974 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10940, i32 %10737) #8
  store <4 x i32> %10974, <4 x i32>* %10938, align 16
  %10975 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10944, i32 %10737) #8
  store <4 x i32> %10975, <4 x i32>* %10942, align 16
  %10976 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10948, i32 %10737) #8
  store <4 x i32> %10976, <4 x i32>* %10946, align 16
  %10977 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10952, i32 %10737) #8
  store <4 x i32> %10977, <4 x i32>* %10950, align 16
  %10978 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10956, i32 %10737) #8
  store <4 x i32> %10978, <4 x i32>* %10954, align 16
  %10979 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10960, i32 %10737) #8
  store <4 x i32> %10979, <4 x i32>* %10958, align 16
  %10980 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10964, i32 %10737) #8
  store <4 x i32> %10980, <4 x i32>* %10962, align 16
  %10981 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %10982 = bitcast <2 x i64>* %10981 to <4 x i32>*
  %10983 = load <4 x i32>, <4 x i32>* %10982, align 16
  %10984 = add <4 x i32> %10983, %10741
  %10985 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %10986 = bitcast <2 x i64>* %10985 to <4 x i32>*
  %10987 = load <4 x i32>, <4 x i32>* %10986, align 16
  %10988 = add <4 x i32> %10987, %10741
  %10989 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %10990 = bitcast <2 x i64>* %10989 to <4 x i32>*
  %10991 = load <4 x i32>, <4 x i32>* %10990, align 16
  %10992 = add <4 x i32> %10991, %10741
  %10993 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %10994 = bitcast <2 x i64>* %10993 to <4 x i32>*
  %10995 = load <4 x i32>, <4 x i32>* %10994, align 16
  %10996 = add <4 x i32> %10995, %10741
  %10997 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %10998 = bitcast <2 x i64>* %10997 to <4 x i32>*
  %10999 = load <4 x i32>, <4 x i32>* %10998, align 16
  %11000 = add <4 x i32> %10999, %10741
  %11001 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %11002 = bitcast <2 x i64>* %11001 to <4 x i32>*
  %11003 = load <4 x i32>, <4 x i32>* %11002, align 16
  %11004 = add <4 x i32> %11003, %10741
  %11005 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %11006 = bitcast <2 x i64>* %11005 to <4 x i32>*
  %11007 = load <4 x i32>, <4 x i32>* %11006, align 16
  %11008 = add <4 x i32> %11007, %10741
  %11009 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %11010 = bitcast <2 x i64>* %11009 to <4 x i32>*
  %11011 = load <4 x i32>, <4 x i32>* %11010, align 16
  %11012 = add <4 x i32> %11011, %10741
  %11013 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %11014 = bitcast <2 x i64>* %11013 to <4 x i32>*
  %11015 = load <4 x i32>, <4 x i32>* %11014, align 16
  %11016 = add <4 x i32> %11015, %10741
  %11017 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %11018 = bitcast <2 x i64>* %11017 to <4 x i32>*
  %11019 = load <4 x i32>, <4 x i32>* %11018, align 16
  %11020 = add <4 x i32> %11019, %10741
  %11021 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %11022 = bitcast <2 x i64>* %11021 to <4 x i32>*
  %11023 = load <4 x i32>, <4 x i32>* %11022, align 16
  %11024 = add <4 x i32> %11023, %10741
  %11025 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %11026 = bitcast <2 x i64>* %11025 to <4 x i32>*
  %11027 = load <4 x i32>, <4 x i32>* %11026, align 16
  %11028 = add <4 x i32> %11027, %10741
  %11029 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %11030 = bitcast <2 x i64>* %11029 to <4 x i32>*
  %11031 = load <4 x i32>, <4 x i32>* %11030, align 16
  %11032 = add <4 x i32> %11031, %10741
  %11033 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %11034 = bitcast <2 x i64>* %11033 to <4 x i32>*
  %11035 = load <4 x i32>, <4 x i32>* %11034, align 16
  %11036 = add <4 x i32> %11035, %10741
  %11037 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %11038 = bitcast <2 x i64>* %11037 to <4 x i32>*
  %11039 = load <4 x i32>, <4 x i32>* %11038, align 16
  %11040 = add <4 x i32> %11039, %10741
  %11041 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %11042 = bitcast <2 x i64>* %11041 to <4 x i32>*
  %11043 = load <4 x i32>, <4 x i32>* %11042, align 16
  %11044 = add <4 x i32> %11043, %10741
  %11045 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10984, i32 %10737) #8
  store <4 x i32> %11045, <4 x i32>* %10982, align 16
  %11046 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10988, i32 %10737) #8
  store <4 x i32> %11046, <4 x i32>* %10986, align 16
  %11047 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10992, i32 %10737) #8
  store <4 x i32> %11047, <4 x i32>* %10990, align 16
  %11048 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %10996, i32 %10737) #8
  store <4 x i32> %11048, <4 x i32>* %10994, align 16
  %11049 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11000, i32 %10737) #8
  store <4 x i32> %11049, <4 x i32>* %10998, align 16
  %11050 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11004, i32 %10737) #8
  store <4 x i32> %11050, <4 x i32>* %11002, align 16
  %11051 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11008, i32 %10737) #8
  store <4 x i32> %11051, <4 x i32>* %11006, align 16
  %11052 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11012, i32 %10737) #8
  store <4 x i32> %11052, <4 x i32>* %11010, align 16
  %11053 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11016, i32 %10737) #8
  store <4 x i32> %11053, <4 x i32>* %11014, align 16
  %11054 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11020, i32 %10737) #8
  store <4 x i32> %11054, <4 x i32>* %11018, align 16
  %11055 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11024, i32 %10737) #8
  store <4 x i32> %11055, <4 x i32>* %11022, align 16
  %11056 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11028, i32 %10737) #8
  store <4 x i32> %11056, <4 x i32>* %11026, align 16
  %11057 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11032, i32 %10737) #8
  store <4 x i32> %11057, <4 x i32>* %11030, align 16
  %11058 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11036, i32 %10737) #8
  store <4 x i32> %11058, <4 x i32>* %11034, align 16
  %11059 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11040, i32 %10737) #8
  store <4 x i32> %11059, <4 x i32>* %11038, align 16
  %11060 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11044, i32 %10737) #8
  store <4 x i32> %11060, <4 x i32>* %11042, align 16
  %11061 = shufflevector <4 x i32> %10805, <4 x i32> %10809, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11062 = bitcast <4 x i32> %11061 to <2 x i64>
  %11063 = shufflevector <4 x i32> %10805, <4 x i32> %10809, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11064 = bitcast <4 x i32> %11063 to <2 x i64>
  %11065 = shufflevector <4 x i32> %10813, <4 x i32> %10817, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11066 = bitcast <4 x i32> %11065 to <2 x i64>
  %11067 = shufflevector <4 x i32> %10813, <4 x i32> %10817, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11068 = bitcast <4 x i32> %11067 to <2 x i64>
  %11069 = shufflevector <2 x i64> %11062, <2 x i64> %11066, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11069, <2 x i64>* %10728, align 16
  %11070 = shufflevector <2 x i64> %11062, <2 x i64> %11066, <2 x i32> <i32 1, i32 3>
  %11071 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %11070, <2 x i64>* %11071, align 16
  %11072 = shufflevector <2 x i64> %11064, <2 x i64> %11068, <2 x i32> <i32 0, i32 2>
  %11073 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %11072, <2 x i64>* %11073, align 16
  %11074 = shufflevector <2 x i64> %11064, <2 x i64> %11068, <2 x i32> <i32 1, i32 3>
  %11075 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %11074, <2 x i64>* %11075, align 16
  %11076 = shufflevector <4 x i32> %10806, <4 x i32> %10810, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11077 = bitcast <4 x i32> %11076 to <2 x i64>
  %11078 = shufflevector <4 x i32> %10806, <4 x i32> %10810, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11079 = bitcast <4 x i32> %11078 to <2 x i64>
  %11080 = shufflevector <4 x i32> %10814, <4 x i32> %10818, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11081 = bitcast <4 x i32> %11080 to <2 x i64>
  %11082 = shufflevector <4 x i32> %10814, <4 x i32> %10818, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11083 = bitcast <4 x i32> %11082 to <2 x i64>
  %11084 = shufflevector <2 x i64> %11077, <2 x i64> %11081, <2 x i32> <i32 0, i32 2>
  %11085 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %11084, <2 x i64>* %11085, align 16
  %11086 = shufflevector <2 x i64> %11077, <2 x i64> %11081, <2 x i32> <i32 1, i32 3>
  %11087 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %11086, <2 x i64>* %11087, align 16
  %11088 = shufflevector <2 x i64> %11079, <2 x i64> %11083, <2 x i32> <i32 0, i32 2>
  %11089 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %11088, <2 x i64>* %11089, align 16
  %11090 = shufflevector <2 x i64> %11079, <2 x i64> %11083, <2 x i32> <i32 1, i32 3>
  %11091 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %11090, <2 x i64>* %11091, align 16
  %11092 = load <4 x i32>, <4 x i32>* %10838, align 16
  %11093 = shufflevector <4 x i32> %10885, <4 x i32> %11092, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11094 = bitcast <4 x i32> %11093 to <2 x i64>
  %11095 = shufflevector <4 x i32> %10885, <4 x i32> %11092, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11096 = bitcast <4 x i32> %11095 to <2 x i64>
  %11097 = load <4 x i32>, <4 x i32>* %10854, align 16
  %11098 = load <4 x i32>, <4 x i32>* %10870, align 16
  %11099 = shufflevector <4 x i32> %11097, <4 x i32> %11098, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11100 = bitcast <4 x i32> %11099 to <2 x i64>
  %11101 = shufflevector <4 x i32> %11097, <4 x i32> %11098, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11102 = bitcast <4 x i32> %11101 to <2 x i64>
  %11103 = shufflevector <2 x i64> %11094, <2 x i64> %11100, <2 x i32> <i32 0, i32 2>
  %11104 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %11103, <2 x i64>* %11104, align 16
  %11105 = shufflevector <2 x i64> %11094, <2 x i64> %11100, <2 x i32> <i32 1, i32 3>
  %11106 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %11105, <2 x i64>* %11106, align 16
  %11107 = shufflevector <2 x i64> %11096, <2 x i64> %11102, <2 x i32> <i32 0, i32 2>
  %11108 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %11107, <2 x i64>* %11108, align 16
  %11109 = shufflevector <2 x i64> %11096, <2 x i64> %11102, <2 x i32> <i32 1, i32 3>
  %11110 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %11109, <2 x i64>* %11110, align 16
  %11111 = load <4 x i32>, <4 x i32>* %10826, align 16
  %11112 = load <4 x i32>, <4 x i32>* %10842, align 16
  %11113 = shufflevector <4 x i32> %11111, <4 x i32> %11112, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11114 = bitcast <4 x i32> %11113 to <2 x i64>
  %11115 = shufflevector <4 x i32> %11111, <4 x i32> %11112, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11116 = bitcast <4 x i32> %11115 to <2 x i64>
  %11117 = load <4 x i32>, <4 x i32>* %10858, align 16
  %11118 = load <4 x i32>, <4 x i32>* %10874, align 16
  %11119 = shufflevector <4 x i32> %11117, <4 x i32> %11118, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11120 = bitcast <4 x i32> %11119 to <2 x i64>
  %11121 = shufflevector <4 x i32> %11117, <4 x i32> %11118, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11122 = bitcast <4 x i32> %11121 to <2 x i64>
  %11123 = shufflevector <2 x i64> %11114, <2 x i64> %11120, <2 x i32> <i32 0, i32 2>
  %11124 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %11123, <2 x i64>* %11124, align 16
  %11125 = shufflevector <2 x i64> %11114, <2 x i64> %11120, <2 x i32> <i32 1, i32 3>
  %11126 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %11125, <2 x i64>* %11126, align 16
  %11127 = shufflevector <2 x i64> %11116, <2 x i64> %11122, <2 x i32> <i32 0, i32 2>
  %11128 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %11127, <2 x i64>* %11128, align 16
  %11129 = shufflevector <2 x i64> %11116, <2 x i64> %11122, <2 x i32> <i32 1, i32 3>
  %11130 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %11129, <2 x i64>* %11130, align 16
  %11131 = shufflevector <4 x i32> %10807, <4 x i32> %10811, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11132 = bitcast <4 x i32> %11131 to <2 x i64>
  %11133 = shufflevector <4 x i32> %10807, <4 x i32> %10811, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11134 = bitcast <4 x i32> %11133 to <2 x i64>
  %11135 = shufflevector <4 x i32> %10815, <4 x i32> %10819, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11136 = bitcast <4 x i32> %11135 to <2 x i64>
  %11137 = shufflevector <4 x i32> %10815, <4 x i32> %10819, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11138 = bitcast <4 x i32> %11137 to <2 x i64>
  %11139 = shufflevector <2 x i64> %11132, <2 x i64> %11136, <2 x i32> <i32 0, i32 2>
  %11140 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %11139, <2 x i64>* %11140, align 16
  %11141 = shufflevector <2 x i64> %11132, <2 x i64> %11136, <2 x i32> <i32 1, i32 3>
  %11142 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %11141, <2 x i64>* %11142, align 16
  %11143 = shufflevector <2 x i64> %11134, <2 x i64> %11138, <2 x i32> <i32 0, i32 2>
  %11144 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %11143, <2 x i64>* %11144, align 16
  %11145 = shufflevector <2 x i64> %11134, <2 x i64> %11138, <2 x i32> <i32 1, i32 3>
  %11146 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %11145, <2 x i64>* %11146, align 16
  %11147 = shufflevector <4 x i32> %10808, <4 x i32> %10812, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11148 = bitcast <4 x i32> %11147 to <2 x i64>
  %11149 = shufflevector <4 x i32> %10808, <4 x i32> %10812, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11150 = bitcast <4 x i32> %11149 to <2 x i64>
  %11151 = shufflevector <4 x i32> %10816, <4 x i32> %10820, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11152 = bitcast <4 x i32> %11151 to <2 x i64>
  %11153 = shufflevector <4 x i32> %10816, <4 x i32> %10820, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11154 = bitcast <4 x i32> %11153 to <2 x i64>
  %11155 = shufflevector <2 x i64> %11148, <2 x i64> %11152, <2 x i32> <i32 0, i32 2>
  %11156 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %11155, <2 x i64>* %11156, align 16
  %11157 = shufflevector <2 x i64> %11148, <2 x i64> %11152, <2 x i32> <i32 1, i32 3>
  %11158 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %11157, <2 x i64>* %11158, align 16
  %11159 = shufflevector <2 x i64> %11150, <2 x i64> %11154, <2 x i32> <i32 0, i32 2>
  %11160 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %11159, <2 x i64>* %11160, align 16
  %11161 = shufflevector <2 x i64> %11150, <2 x i64> %11154, <2 x i32> <i32 1, i32 3>
  %11162 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %11161, <2 x i64>* %11162, align 16
  %11163 = load <4 x i32>, <4 x i32>* %10830, align 16
  %11164 = load <4 x i32>, <4 x i32>* %10846, align 16
  %11165 = shufflevector <4 x i32> %11163, <4 x i32> %11164, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11166 = bitcast <4 x i32> %11165 to <2 x i64>
  %11167 = shufflevector <4 x i32> %11163, <4 x i32> %11164, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11168 = bitcast <4 x i32> %11167 to <2 x i64>
  %11169 = load <4 x i32>, <4 x i32>* %10862, align 16
  %11170 = load <4 x i32>, <4 x i32>* %10878, align 16
  %11171 = shufflevector <4 x i32> %11169, <4 x i32> %11170, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11172 = bitcast <4 x i32> %11171 to <2 x i64>
  %11173 = shufflevector <4 x i32> %11169, <4 x i32> %11170, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11174 = bitcast <4 x i32> %11173 to <2 x i64>
  %11175 = shufflevector <2 x i64> %11166, <2 x i64> %11172, <2 x i32> <i32 0, i32 2>
  %11176 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %11175, <2 x i64>* %11176, align 16
  %11177 = shufflevector <2 x i64> %11166, <2 x i64> %11172, <2 x i32> <i32 1, i32 3>
  %11178 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %11177, <2 x i64>* %11178, align 16
  %11179 = shufflevector <2 x i64> %11168, <2 x i64> %11174, <2 x i32> <i32 0, i32 2>
  %11180 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %11179, <2 x i64>* %11180, align 16
  %11181 = shufflevector <2 x i64> %11168, <2 x i64> %11174, <2 x i32> <i32 1, i32 3>
  %11182 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %11181, <2 x i64>* %11182, align 16
  %11183 = load <4 x i32>, <4 x i32>* %10834, align 16
  %11184 = load <4 x i32>, <4 x i32>* %10850, align 16
  %11185 = shufflevector <4 x i32> %11183, <4 x i32> %11184, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11186 = bitcast <4 x i32> %11185 to <2 x i64>
  %11187 = shufflevector <4 x i32> %11183, <4 x i32> %11184, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11188 = bitcast <4 x i32> %11187 to <2 x i64>
  %11189 = load <4 x i32>, <4 x i32>* %10866, align 16
  %11190 = load <4 x i32>, <4 x i32>* %10882, align 16
  %11191 = shufflevector <4 x i32> %11189, <4 x i32> %11190, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11192 = bitcast <4 x i32> %11191 to <2 x i64>
  %11193 = shufflevector <4 x i32> %11189, <4 x i32> %11190, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11194 = bitcast <4 x i32> %11193 to <2 x i64>
  %11195 = shufflevector <2 x i64> %11186, <2 x i64> %11192, <2 x i32> <i32 0, i32 2>
  %11196 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %11195, <2 x i64>* %11196, align 16
  %11197 = shufflevector <2 x i64> %11186, <2 x i64> %11192, <2 x i32> <i32 1, i32 3>
  %11198 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %11197, <2 x i64>* %11198, align 16
  %11199 = shufflevector <2 x i64> %11188, <2 x i64> %11194, <2 x i32> <i32 0, i32 2>
  %11200 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %11199, <2 x i64>* %11200, align 16
  %11201 = shufflevector <2 x i64> %11188, <2 x i64> %11194, <2 x i32> <i32 1, i32 3>
  %11202 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %11201, <2 x i64>* %11202, align 16
  %11203 = load <4 x i32>, <4 x i32>* %10902, align 16
  %11204 = load <4 x i32>, <4 x i32>* %10918, align 16
  %11205 = shufflevector <4 x i32> %11203, <4 x i32> %11204, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11206 = bitcast <4 x i32> %11205 to <2 x i64>
  %11207 = shufflevector <4 x i32> %11203, <4 x i32> %11204, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11208 = bitcast <4 x i32> %11207 to <2 x i64>
  %11209 = load <4 x i32>, <4 x i32>* %10934, align 16
  %11210 = load <4 x i32>, <4 x i32>* %10950, align 16
  %11211 = shufflevector <4 x i32> %11209, <4 x i32> %11210, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11212 = bitcast <4 x i32> %11211 to <2 x i64>
  %11213 = shufflevector <4 x i32> %11209, <4 x i32> %11210, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11214 = bitcast <4 x i32> %11213 to <2 x i64>
  %11215 = shufflevector <2 x i64> %11206, <2 x i64> %11212, <2 x i32> <i32 0, i32 2>
  %11216 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %11215, <2 x i64>* %11216, align 16
  %11217 = shufflevector <2 x i64> %11206, <2 x i64> %11212, <2 x i32> <i32 1, i32 3>
  %11218 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %11217, <2 x i64>* %11218, align 16
  %11219 = shufflevector <2 x i64> %11208, <2 x i64> %11214, <2 x i32> <i32 0, i32 2>
  %11220 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %11219, <2 x i64>* %11220, align 16
  %11221 = shufflevector <2 x i64> %11208, <2 x i64> %11214, <2 x i32> <i32 1, i32 3>
  %11222 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %11221, <2 x i64>* %11222, align 16
  %11223 = load <4 x i32>, <4 x i32>* %10906, align 16
  %11224 = load <4 x i32>, <4 x i32>* %10922, align 16
  %11225 = shufflevector <4 x i32> %11223, <4 x i32> %11224, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11226 = bitcast <4 x i32> %11225 to <2 x i64>
  %11227 = shufflevector <4 x i32> %11223, <4 x i32> %11224, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11228 = bitcast <4 x i32> %11227 to <2 x i64>
  %11229 = load <4 x i32>, <4 x i32>* %10938, align 16
  %11230 = load <4 x i32>, <4 x i32>* %10954, align 16
  %11231 = shufflevector <4 x i32> %11229, <4 x i32> %11230, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11232 = bitcast <4 x i32> %11231 to <2 x i64>
  %11233 = shufflevector <4 x i32> %11229, <4 x i32> %11230, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11234 = bitcast <4 x i32> %11233 to <2 x i64>
  %11235 = shufflevector <2 x i64> %11226, <2 x i64> %11232, <2 x i32> <i32 0, i32 2>
  %11236 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %11235, <2 x i64>* %11236, align 16
  %11237 = shufflevector <2 x i64> %11226, <2 x i64> %11232, <2 x i32> <i32 1, i32 3>
  %11238 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %11237, <2 x i64>* %11238, align 16
  %11239 = shufflevector <2 x i64> %11228, <2 x i64> %11234, <2 x i32> <i32 0, i32 2>
  %11240 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %11239, <2 x i64>* %11240, align 16
  %11241 = shufflevector <2 x i64> %11228, <2 x i64> %11234, <2 x i32> <i32 1, i32 3>
  %11242 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %11241, <2 x i64>* %11242, align 16
  %11243 = load <4 x i32>, <4 x i32>* %10982, align 16
  %11244 = load <4 x i32>, <4 x i32>* %10998, align 16
  %11245 = shufflevector <4 x i32> %11243, <4 x i32> %11244, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11246 = bitcast <4 x i32> %11245 to <2 x i64>
  %11247 = shufflevector <4 x i32> %11243, <4 x i32> %11244, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11248 = bitcast <4 x i32> %11247 to <2 x i64>
  %11249 = load <4 x i32>, <4 x i32>* %11014, align 16
  %11250 = load <4 x i32>, <4 x i32>* %11030, align 16
  %11251 = shufflevector <4 x i32> %11249, <4 x i32> %11250, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11252 = bitcast <4 x i32> %11251 to <2 x i64>
  %11253 = shufflevector <4 x i32> %11249, <4 x i32> %11250, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11254 = bitcast <4 x i32> %11253 to <2 x i64>
  %11255 = shufflevector <2 x i64> %11246, <2 x i64> %11252, <2 x i32> <i32 0, i32 2>
  %11256 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %11255, <2 x i64>* %11256, align 16
  %11257 = shufflevector <2 x i64> %11246, <2 x i64> %11252, <2 x i32> <i32 1, i32 3>
  %11258 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %11257, <2 x i64>* %11258, align 16
  %11259 = shufflevector <2 x i64> %11248, <2 x i64> %11254, <2 x i32> <i32 0, i32 2>
  %11260 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %11259, <2 x i64>* %11260, align 16
  %11261 = shufflevector <2 x i64> %11248, <2 x i64> %11254, <2 x i32> <i32 1, i32 3>
  %11262 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %11261, <2 x i64>* %11262, align 16
  %11263 = load <4 x i32>, <4 x i32>* %10986, align 16
  %11264 = load <4 x i32>, <4 x i32>* %11002, align 16
  %11265 = shufflevector <4 x i32> %11263, <4 x i32> %11264, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11266 = bitcast <4 x i32> %11265 to <2 x i64>
  %11267 = shufflevector <4 x i32> %11263, <4 x i32> %11264, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11268 = bitcast <4 x i32> %11267 to <2 x i64>
  %11269 = load <4 x i32>, <4 x i32>* %11018, align 16
  %11270 = load <4 x i32>, <4 x i32>* %11034, align 16
  %11271 = shufflevector <4 x i32> %11269, <4 x i32> %11270, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11272 = bitcast <4 x i32> %11271 to <2 x i64>
  %11273 = shufflevector <4 x i32> %11269, <4 x i32> %11270, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11274 = bitcast <4 x i32> %11273 to <2 x i64>
  %11275 = shufflevector <2 x i64> %11266, <2 x i64> %11272, <2 x i32> <i32 0, i32 2>
  %11276 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %11275, <2 x i64>* %11276, align 16
  %11277 = shufflevector <2 x i64> %11266, <2 x i64> %11272, <2 x i32> <i32 1, i32 3>
  %11278 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %11277, <2 x i64>* %11278, align 16
  %11279 = shufflevector <2 x i64> %11268, <2 x i64> %11274, <2 x i32> <i32 0, i32 2>
  %11280 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %11279, <2 x i64>* %11280, align 16
  %11281 = shufflevector <2 x i64> %11268, <2 x i64> %11274, <2 x i32> <i32 1, i32 3>
  %11282 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %11281, <2 x i64>* %11282, align 16
  %11283 = load <4 x i32>, <4 x i32>* %10910, align 16
  %11284 = load <4 x i32>, <4 x i32>* %10926, align 16
  %11285 = shufflevector <4 x i32> %11283, <4 x i32> %11284, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11286 = bitcast <4 x i32> %11285 to <2 x i64>
  %11287 = shufflevector <4 x i32> %11283, <4 x i32> %11284, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11288 = bitcast <4 x i32> %11287 to <2 x i64>
  %11289 = load <4 x i32>, <4 x i32>* %10942, align 16
  %11290 = load <4 x i32>, <4 x i32>* %10958, align 16
  %11291 = shufflevector <4 x i32> %11289, <4 x i32> %11290, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11292 = bitcast <4 x i32> %11291 to <2 x i64>
  %11293 = shufflevector <4 x i32> %11289, <4 x i32> %11290, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11294 = bitcast <4 x i32> %11293 to <2 x i64>
  %11295 = shufflevector <2 x i64> %11286, <2 x i64> %11292, <2 x i32> <i32 0, i32 2>
  %11296 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %11295, <2 x i64>* %11296, align 16
  %11297 = shufflevector <2 x i64> %11286, <2 x i64> %11292, <2 x i32> <i32 1, i32 3>
  %11298 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %11297, <2 x i64>* %11298, align 16
  %11299 = shufflevector <2 x i64> %11288, <2 x i64> %11294, <2 x i32> <i32 0, i32 2>
  %11300 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %11299, <2 x i64>* %11300, align 16
  %11301 = shufflevector <2 x i64> %11288, <2 x i64> %11294, <2 x i32> <i32 1, i32 3>
  %11302 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %11301, <2 x i64>* %11302, align 16
  %11303 = load <4 x i32>, <4 x i32>* %10914, align 16
  %11304 = load <4 x i32>, <4 x i32>* %10930, align 16
  %11305 = shufflevector <4 x i32> %11303, <4 x i32> %11304, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11306 = bitcast <4 x i32> %11305 to <2 x i64>
  %11307 = shufflevector <4 x i32> %11303, <4 x i32> %11304, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11308 = bitcast <4 x i32> %11307 to <2 x i64>
  %11309 = load <4 x i32>, <4 x i32>* %10946, align 16
  %11310 = load <4 x i32>, <4 x i32>* %10962, align 16
  %11311 = shufflevector <4 x i32> %11309, <4 x i32> %11310, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11312 = bitcast <4 x i32> %11311 to <2 x i64>
  %11313 = shufflevector <4 x i32> %11309, <4 x i32> %11310, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11314 = bitcast <4 x i32> %11313 to <2 x i64>
  %11315 = shufflevector <2 x i64> %11306, <2 x i64> %11312, <2 x i32> <i32 0, i32 2>
  %11316 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %11315, <2 x i64>* %11316, align 16
  %11317 = shufflevector <2 x i64> %11306, <2 x i64> %11312, <2 x i32> <i32 1, i32 3>
  %11318 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %11317, <2 x i64>* %11318, align 16
  %11319 = shufflevector <2 x i64> %11308, <2 x i64> %11314, <2 x i32> <i32 0, i32 2>
  %11320 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %11319, <2 x i64>* %11320, align 16
  %11321 = shufflevector <2 x i64> %11308, <2 x i64> %11314, <2 x i32> <i32 1, i32 3>
  %11322 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %11321, <2 x i64>* %11322, align 16
  %11323 = load <4 x i32>, <4 x i32>* %10990, align 16
  %11324 = load <4 x i32>, <4 x i32>* %11006, align 16
  %11325 = shufflevector <4 x i32> %11323, <4 x i32> %11324, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11326 = bitcast <4 x i32> %11325 to <2 x i64>
  %11327 = shufflevector <4 x i32> %11323, <4 x i32> %11324, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11328 = bitcast <4 x i32> %11327 to <2 x i64>
  %11329 = load <4 x i32>, <4 x i32>* %11022, align 16
  %11330 = load <4 x i32>, <4 x i32>* %11038, align 16
  %11331 = shufflevector <4 x i32> %11329, <4 x i32> %11330, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11332 = bitcast <4 x i32> %11331 to <2 x i64>
  %11333 = shufflevector <4 x i32> %11329, <4 x i32> %11330, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11334 = bitcast <4 x i32> %11333 to <2 x i64>
  %11335 = shufflevector <2 x i64> %11326, <2 x i64> %11332, <2 x i32> <i32 0, i32 2>
  %11336 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %11335, <2 x i64>* %11336, align 16
  %11337 = shufflevector <2 x i64> %11326, <2 x i64> %11332, <2 x i32> <i32 1, i32 3>
  %11338 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %11337, <2 x i64>* %11338, align 16
  %11339 = shufflevector <2 x i64> %11328, <2 x i64> %11334, <2 x i32> <i32 0, i32 2>
  %11340 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %11339, <2 x i64>* %11340, align 16
  %11341 = shufflevector <2 x i64> %11328, <2 x i64> %11334, <2 x i32> <i32 1, i32 3>
  %11342 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %11341, <2 x i64>* %11342, align 16
  %11343 = load <4 x i32>, <4 x i32>* %10994, align 16
  %11344 = load <4 x i32>, <4 x i32>* %11010, align 16
  %11345 = shufflevector <4 x i32> %11343, <4 x i32> %11344, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11346 = bitcast <4 x i32> %11345 to <2 x i64>
  %11347 = shufflevector <4 x i32> %11343, <4 x i32> %11344, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11348 = bitcast <4 x i32> %11347 to <2 x i64>
  %11349 = load <4 x i32>, <4 x i32>* %11026, align 16
  %11350 = load <4 x i32>, <4 x i32>* %11042, align 16
  %11351 = shufflevector <4 x i32> %11349, <4 x i32> %11350, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11352 = bitcast <4 x i32> %11351 to <2 x i64>
  %11353 = shufflevector <4 x i32> %11349, <4 x i32> %11350, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11354 = bitcast <4 x i32> %11353 to <2 x i64>
  %11355 = shufflevector <2 x i64> %11346, <2 x i64> %11352, <2 x i32> <i32 0, i32 2>
  %11356 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %11355, <2 x i64>* %11356, align 16
  %11357 = shufflevector <2 x i64> %11346, <2 x i64> %11352, <2 x i32> <i32 1, i32 3>
  %11358 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %11357, <2 x i64>* %11358, align 16
  %11359 = shufflevector <2 x i64> %11348, <2 x i64> %11354, <2 x i32> <i32 0, i32 2>
  %11360 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %11359, <2 x i64>* %11360, align 16
  %11361 = shufflevector <2 x i64> %11348, <2 x i64> %11354, <2 x i32> <i32 1, i32 3>
  %11362 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %11361, <2 x i64>* %11362, align 16
  br label %11363

11363:                                            ; preds = %11363, %10727
  %11364 = phi i64 [ 0, %10727 ], [ %11382, %11363 ]
  %11365 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %11364
  %11366 = bitcast <2 x i64>* %11365 to <4 x i32>*
  %11367 = load <4 x i32>, <4 x i32>* %11366, align 16
  %11368 = mul <4 x i32> %11367, <i32 11586, i32 11586, i32 11586, i32 11586>
  %11369 = add <4 x i32> %11368, <i32 2048, i32 2048, i32 2048, i32 2048>
  %11370 = ashr <4 x i32> %11369, <i32 12, i32 12, i32 12, i32 12>
  %11371 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %11364
  %11372 = bitcast <2 x i64>* %11371 to <4 x i32>*
  store <4 x i32> %11370, <4 x i32>* %11372, align 16
  %11373 = or i64 %11364, 1
  %11374 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %11373
  %11375 = bitcast <2 x i64>* %11374 to <4 x i32>*
  %11376 = load <4 x i32>, <4 x i32>* %11375, align 16
  %11377 = mul <4 x i32> %11376, <i32 11586, i32 11586, i32 11586, i32 11586>
  %11378 = add <4 x i32> %11377, <i32 2048, i32 2048, i32 2048, i32 2048>
  %11379 = ashr <4 x i32> %11378, <i32 12, i32 12, i32 12, i32 12>
  %11380 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %11373
  %11381 = bitcast <2 x i64>* %11380 to <4 x i32>*
  store <4 x i32> %11379, <4 x i32>* %11381, align 16
  %11382 = add nuw nsw i64 %11364, 2
  %11383 = icmp eq i64 %11382, 64
  br i1 %11383, label %11384, label %11363

11384:                                            ; preds = %11363
  %11385 = load <4 x i32>, <4 x i32>* %10742, align 16
  %11386 = load <4 x i32>, <4 x i32>* %10758, align 16
  %11387 = shufflevector <4 x i32> %11385, <4 x i32> %11386, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11388 = bitcast <4 x i32> %11387 to <2 x i64>
  %11389 = shufflevector <4 x i32> %11385, <4 x i32> %11386, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11390 = bitcast <4 x i32> %11389 to <2 x i64>
  %11391 = load <4 x i32>, <4 x i32>* %10774, align 16
  %11392 = load <4 x i32>, <4 x i32>* %10790, align 16
  %11393 = shufflevector <4 x i32> %11391, <4 x i32> %11392, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11394 = bitcast <4 x i32> %11393 to <2 x i64>
  %11395 = shufflevector <4 x i32> %11391, <4 x i32> %11392, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11396 = bitcast <4 x i32> %11395 to <2 x i64>
  %11397 = shufflevector <2 x i64> %11388, <2 x i64> %11394, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11397, <2 x i64>* %10728, align 16
  %11398 = shufflevector <2 x i64> %11388, <2 x i64> %11394, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11398, <2 x i64>* %11071, align 16
  %11399 = shufflevector <2 x i64> %11390, <2 x i64> %11396, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11399, <2 x i64>* %11073, align 16
  %11400 = shufflevector <2 x i64> %11390, <2 x i64> %11396, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11400, <2 x i64>* %11075, align 16
  %11401 = load <4 x i32>, <4 x i32>* %10746, align 16
  %11402 = load <4 x i32>, <4 x i32>* %10762, align 16
  %11403 = shufflevector <4 x i32> %11401, <4 x i32> %11402, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11404 = bitcast <4 x i32> %11403 to <2 x i64>
  %11405 = shufflevector <4 x i32> %11401, <4 x i32> %11402, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11406 = bitcast <4 x i32> %11405 to <2 x i64>
  %11407 = load <4 x i32>, <4 x i32>* %10778, align 16
  %11408 = load <4 x i32>, <4 x i32>* %10794, align 16
  %11409 = shufflevector <4 x i32> %11407, <4 x i32> %11408, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11410 = bitcast <4 x i32> %11409 to <2 x i64>
  %11411 = shufflevector <4 x i32> %11407, <4 x i32> %11408, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11412 = bitcast <4 x i32> %11411 to <2 x i64>
  %11413 = shufflevector <2 x i64> %11404, <2 x i64> %11410, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11413, <2 x i64>* %11085, align 16
  %11414 = shufflevector <2 x i64> %11404, <2 x i64> %11410, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11414, <2 x i64>* %11087, align 16
  %11415 = shufflevector <2 x i64> %11406, <2 x i64> %11412, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11415, <2 x i64>* %11089, align 16
  %11416 = shufflevector <2 x i64> %11406, <2 x i64> %11412, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11416, <2 x i64>* %11091, align 16
  %11417 = load <4 x i32>, <4 x i32>* %10822, align 16
  %11418 = load <4 x i32>, <4 x i32>* %10838, align 16
  %11419 = shufflevector <4 x i32> %11417, <4 x i32> %11418, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11420 = bitcast <4 x i32> %11419 to <2 x i64>
  %11421 = shufflevector <4 x i32> %11417, <4 x i32> %11418, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11422 = bitcast <4 x i32> %11421 to <2 x i64>
  %11423 = load <4 x i32>, <4 x i32>* %10854, align 16
  %11424 = load <4 x i32>, <4 x i32>* %10870, align 16
  %11425 = shufflevector <4 x i32> %11423, <4 x i32> %11424, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11426 = bitcast <4 x i32> %11425 to <2 x i64>
  %11427 = shufflevector <4 x i32> %11423, <4 x i32> %11424, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11428 = bitcast <4 x i32> %11427 to <2 x i64>
  %11429 = shufflevector <2 x i64> %11420, <2 x i64> %11426, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11429, <2 x i64>* %11104, align 16
  %11430 = shufflevector <2 x i64> %11420, <2 x i64> %11426, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11430, <2 x i64>* %11106, align 16
  %11431 = shufflevector <2 x i64> %11422, <2 x i64> %11428, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11431, <2 x i64>* %11108, align 16
  %11432 = shufflevector <2 x i64> %11422, <2 x i64> %11428, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11432, <2 x i64>* %11110, align 16
  %11433 = load <4 x i32>, <4 x i32>* %10826, align 16
  %11434 = load <4 x i32>, <4 x i32>* %10842, align 16
  %11435 = shufflevector <4 x i32> %11433, <4 x i32> %11434, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11436 = bitcast <4 x i32> %11435 to <2 x i64>
  %11437 = shufflevector <4 x i32> %11433, <4 x i32> %11434, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11438 = bitcast <4 x i32> %11437 to <2 x i64>
  %11439 = load <4 x i32>, <4 x i32>* %10858, align 16
  %11440 = load <4 x i32>, <4 x i32>* %10874, align 16
  %11441 = shufflevector <4 x i32> %11439, <4 x i32> %11440, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11442 = bitcast <4 x i32> %11441 to <2 x i64>
  %11443 = shufflevector <4 x i32> %11439, <4 x i32> %11440, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11444 = bitcast <4 x i32> %11443 to <2 x i64>
  %11445 = shufflevector <2 x i64> %11436, <2 x i64> %11442, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11445, <2 x i64>* %11124, align 16
  %11446 = shufflevector <2 x i64> %11436, <2 x i64> %11442, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11446, <2 x i64>* %11126, align 16
  %11447 = shufflevector <2 x i64> %11438, <2 x i64> %11444, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11447, <2 x i64>* %11128, align 16
  %11448 = shufflevector <2 x i64> %11438, <2 x i64> %11444, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11448, <2 x i64>* %11130, align 16
  %11449 = load <4 x i32>, <4 x i32>* %10750, align 16
  %11450 = load <4 x i32>, <4 x i32>* %10766, align 16
  %11451 = shufflevector <4 x i32> %11449, <4 x i32> %11450, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11452 = bitcast <4 x i32> %11451 to <2 x i64>
  %11453 = shufflevector <4 x i32> %11449, <4 x i32> %11450, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11454 = bitcast <4 x i32> %11453 to <2 x i64>
  %11455 = load <4 x i32>, <4 x i32>* %10782, align 16
  %11456 = load <4 x i32>, <4 x i32>* %10798, align 16
  %11457 = shufflevector <4 x i32> %11455, <4 x i32> %11456, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11458 = bitcast <4 x i32> %11457 to <2 x i64>
  %11459 = shufflevector <4 x i32> %11455, <4 x i32> %11456, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11460 = bitcast <4 x i32> %11459 to <2 x i64>
  %11461 = shufflevector <2 x i64> %11452, <2 x i64> %11458, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11461, <2 x i64>* %11140, align 16
  %11462 = shufflevector <2 x i64> %11452, <2 x i64> %11458, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11462, <2 x i64>* %11142, align 16
  %11463 = shufflevector <2 x i64> %11454, <2 x i64> %11460, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11463, <2 x i64>* %11144, align 16
  %11464 = shufflevector <2 x i64> %11454, <2 x i64> %11460, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11464, <2 x i64>* %11146, align 16
  %11465 = load <4 x i32>, <4 x i32>* %10754, align 16
  %11466 = load <4 x i32>, <4 x i32>* %10770, align 16
  %11467 = shufflevector <4 x i32> %11465, <4 x i32> %11466, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11468 = bitcast <4 x i32> %11467 to <2 x i64>
  %11469 = shufflevector <4 x i32> %11465, <4 x i32> %11466, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11470 = bitcast <4 x i32> %11469 to <2 x i64>
  %11471 = load <4 x i32>, <4 x i32>* %10786, align 16
  %11472 = load <4 x i32>, <4 x i32>* %10802, align 16
  %11473 = shufflevector <4 x i32> %11471, <4 x i32> %11472, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11474 = bitcast <4 x i32> %11473 to <2 x i64>
  %11475 = shufflevector <4 x i32> %11471, <4 x i32> %11472, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11476 = bitcast <4 x i32> %11475 to <2 x i64>
  %11477 = shufflevector <2 x i64> %11468, <2 x i64> %11474, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11477, <2 x i64>* %11156, align 16
  %11478 = shufflevector <2 x i64> %11468, <2 x i64> %11474, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11478, <2 x i64>* %11158, align 16
  %11479 = shufflevector <2 x i64> %11470, <2 x i64> %11476, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11479, <2 x i64>* %11160, align 16
  %11480 = shufflevector <2 x i64> %11470, <2 x i64> %11476, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11480, <2 x i64>* %11162, align 16
  %11481 = load <4 x i32>, <4 x i32>* %10830, align 16
  %11482 = load <4 x i32>, <4 x i32>* %10846, align 16
  %11483 = shufflevector <4 x i32> %11481, <4 x i32> %11482, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11484 = bitcast <4 x i32> %11483 to <2 x i64>
  %11485 = shufflevector <4 x i32> %11481, <4 x i32> %11482, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11486 = bitcast <4 x i32> %11485 to <2 x i64>
  %11487 = load <4 x i32>, <4 x i32>* %10862, align 16
  %11488 = load <4 x i32>, <4 x i32>* %10878, align 16
  %11489 = shufflevector <4 x i32> %11487, <4 x i32> %11488, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11490 = bitcast <4 x i32> %11489 to <2 x i64>
  %11491 = shufflevector <4 x i32> %11487, <4 x i32> %11488, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11492 = bitcast <4 x i32> %11491 to <2 x i64>
  %11493 = shufflevector <2 x i64> %11484, <2 x i64> %11490, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11493, <2 x i64>* %11176, align 16
  %11494 = shufflevector <2 x i64> %11484, <2 x i64> %11490, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11494, <2 x i64>* %11178, align 16
  %11495 = shufflevector <2 x i64> %11486, <2 x i64> %11492, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11495, <2 x i64>* %11180, align 16
  %11496 = shufflevector <2 x i64> %11486, <2 x i64> %11492, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11496, <2 x i64>* %11182, align 16
  %11497 = load <4 x i32>, <4 x i32>* %10834, align 16
  %11498 = load <4 x i32>, <4 x i32>* %10850, align 16
  %11499 = shufflevector <4 x i32> %11497, <4 x i32> %11498, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11500 = bitcast <4 x i32> %11499 to <2 x i64>
  %11501 = shufflevector <4 x i32> %11497, <4 x i32> %11498, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11502 = bitcast <4 x i32> %11501 to <2 x i64>
  %11503 = load <4 x i32>, <4 x i32>* %10866, align 16
  %11504 = load <4 x i32>, <4 x i32>* %10882, align 16
  %11505 = shufflevector <4 x i32> %11503, <4 x i32> %11504, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11506 = bitcast <4 x i32> %11505 to <2 x i64>
  %11507 = shufflevector <4 x i32> %11503, <4 x i32> %11504, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11508 = bitcast <4 x i32> %11507 to <2 x i64>
  %11509 = shufflevector <2 x i64> %11500, <2 x i64> %11506, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11509, <2 x i64>* %11196, align 16
  %11510 = shufflevector <2 x i64> %11500, <2 x i64> %11506, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11510, <2 x i64>* %11198, align 16
  %11511 = shufflevector <2 x i64> %11502, <2 x i64> %11508, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11511, <2 x i64>* %11200, align 16
  %11512 = shufflevector <2 x i64> %11502, <2 x i64> %11508, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11512, <2 x i64>* %11202, align 16
  %11513 = load <4 x i32>, <4 x i32>* %10902, align 16
  %11514 = load <4 x i32>, <4 x i32>* %10918, align 16
  %11515 = shufflevector <4 x i32> %11513, <4 x i32> %11514, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11516 = bitcast <4 x i32> %11515 to <2 x i64>
  %11517 = shufflevector <4 x i32> %11513, <4 x i32> %11514, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11518 = bitcast <4 x i32> %11517 to <2 x i64>
  %11519 = load <4 x i32>, <4 x i32>* %10934, align 16
  %11520 = load <4 x i32>, <4 x i32>* %10950, align 16
  %11521 = shufflevector <4 x i32> %11519, <4 x i32> %11520, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11522 = bitcast <4 x i32> %11521 to <2 x i64>
  %11523 = shufflevector <4 x i32> %11519, <4 x i32> %11520, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11524 = bitcast <4 x i32> %11523 to <2 x i64>
  %11525 = shufflevector <2 x i64> %11516, <2 x i64> %11522, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11525, <2 x i64>* %11216, align 16
  %11526 = shufflevector <2 x i64> %11516, <2 x i64> %11522, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11526, <2 x i64>* %11218, align 16
  %11527 = shufflevector <2 x i64> %11518, <2 x i64> %11524, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11527, <2 x i64>* %11220, align 16
  %11528 = shufflevector <2 x i64> %11518, <2 x i64> %11524, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11528, <2 x i64>* %11222, align 16
  %11529 = load <4 x i32>, <4 x i32>* %10906, align 16
  %11530 = load <4 x i32>, <4 x i32>* %10922, align 16
  %11531 = shufflevector <4 x i32> %11529, <4 x i32> %11530, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11532 = bitcast <4 x i32> %11531 to <2 x i64>
  %11533 = shufflevector <4 x i32> %11529, <4 x i32> %11530, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11534 = bitcast <4 x i32> %11533 to <2 x i64>
  %11535 = load <4 x i32>, <4 x i32>* %10938, align 16
  %11536 = load <4 x i32>, <4 x i32>* %10954, align 16
  %11537 = shufflevector <4 x i32> %11535, <4 x i32> %11536, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11538 = bitcast <4 x i32> %11537 to <2 x i64>
  %11539 = shufflevector <4 x i32> %11535, <4 x i32> %11536, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11540 = bitcast <4 x i32> %11539 to <2 x i64>
  %11541 = shufflevector <2 x i64> %11532, <2 x i64> %11538, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11541, <2 x i64>* %11236, align 16
  %11542 = shufflevector <2 x i64> %11532, <2 x i64> %11538, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11542, <2 x i64>* %11238, align 16
  %11543 = shufflevector <2 x i64> %11534, <2 x i64> %11540, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11543, <2 x i64>* %11240, align 16
  %11544 = shufflevector <2 x i64> %11534, <2 x i64> %11540, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11544, <2 x i64>* %11242, align 16
  %11545 = load <4 x i32>, <4 x i32>* %10982, align 16
  %11546 = load <4 x i32>, <4 x i32>* %10998, align 16
  %11547 = shufflevector <4 x i32> %11545, <4 x i32> %11546, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11548 = bitcast <4 x i32> %11547 to <2 x i64>
  %11549 = shufflevector <4 x i32> %11545, <4 x i32> %11546, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11550 = bitcast <4 x i32> %11549 to <2 x i64>
  %11551 = load <4 x i32>, <4 x i32>* %11014, align 16
  %11552 = load <4 x i32>, <4 x i32>* %11030, align 16
  %11553 = shufflevector <4 x i32> %11551, <4 x i32> %11552, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11554 = bitcast <4 x i32> %11553 to <2 x i64>
  %11555 = shufflevector <4 x i32> %11551, <4 x i32> %11552, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11556 = bitcast <4 x i32> %11555 to <2 x i64>
  %11557 = shufflevector <2 x i64> %11548, <2 x i64> %11554, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11557, <2 x i64>* %11256, align 16
  %11558 = shufflevector <2 x i64> %11548, <2 x i64> %11554, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11558, <2 x i64>* %11258, align 16
  %11559 = shufflevector <2 x i64> %11550, <2 x i64> %11556, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11559, <2 x i64>* %11260, align 16
  %11560 = shufflevector <2 x i64> %11550, <2 x i64> %11556, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11560, <2 x i64>* %11262, align 16
  %11561 = load <4 x i32>, <4 x i32>* %10986, align 16
  %11562 = load <4 x i32>, <4 x i32>* %11002, align 16
  %11563 = shufflevector <4 x i32> %11561, <4 x i32> %11562, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11564 = bitcast <4 x i32> %11563 to <2 x i64>
  %11565 = shufflevector <4 x i32> %11561, <4 x i32> %11562, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11566 = bitcast <4 x i32> %11565 to <2 x i64>
  %11567 = load <4 x i32>, <4 x i32>* %11018, align 16
  %11568 = load <4 x i32>, <4 x i32>* %11034, align 16
  %11569 = shufflevector <4 x i32> %11567, <4 x i32> %11568, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11570 = bitcast <4 x i32> %11569 to <2 x i64>
  %11571 = shufflevector <4 x i32> %11567, <4 x i32> %11568, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11572 = bitcast <4 x i32> %11571 to <2 x i64>
  %11573 = shufflevector <2 x i64> %11564, <2 x i64> %11570, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11573, <2 x i64>* %11276, align 16
  %11574 = shufflevector <2 x i64> %11564, <2 x i64> %11570, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11574, <2 x i64>* %11278, align 16
  %11575 = shufflevector <2 x i64> %11566, <2 x i64> %11572, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11575, <2 x i64>* %11280, align 16
  %11576 = shufflevector <2 x i64> %11566, <2 x i64> %11572, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11576, <2 x i64>* %11282, align 16
  %11577 = load <4 x i32>, <4 x i32>* %10910, align 16
  %11578 = load <4 x i32>, <4 x i32>* %10926, align 16
  %11579 = shufflevector <4 x i32> %11577, <4 x i32> %11578, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11580 = bitcast <4 x i32> %11579 to <2 x i64>
  %11581 = shufflevector <4 x i32> %11577, <4 x i32> %11578, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11582 = bitcast <4 x i32> %11581 to <2 x i64>
  %11583 = load <4 x i32>, <4 x i32>* %10942, align 16
  %11584 = load <4 x i32>, <4 x i32>* %10958, align 16
  %11585 = shufflevector <4 x i32> %11583, <4 x i32> %11584, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11586 = bitcast <4 x i32> %11585 to <2 x i64>
  %11587 = shufflevector <4 x i32> %11583, <4 x i32> %11584, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11588 = bitcast <4 x i32> %11587 to <2 x i64>
  %11589 = shufflevector <2 x i64> %11580, <2 x i64> %11586, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11589, <2 x i64>* %11296, align 16
  %11590 = shufflevector <2 x i64> %11580, <2 x i64> %11586, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11590, <2 x i64>* %11298, align 16
  %11591 = shufflevector <2 x i64> %11582, <2 x i64> %11588, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11591, <2 x i64>* %11300, align 16
  %11592 = shufflevector <2 x i64> %11582, <2 x i64> %11588, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11592, <2 x i64>* %11302, align 16
  %11593 = load <4 x i32>, <4 x i32>* %10914, align 16
  %11594 = load <4 x i32>, <4 x i32>* %10930, align 16
  %11595 = shufflevector <4 x i32> %11593, <4 x i32> %11594, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11596 = bitcast <4 x i32> %11595 to <2 x i64>
  %11597 = shufflevector <4 x i32> %11593, <4 x i32> %11594, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11598 = bitcast <4 x i32> %11597 to <2 x i64>
  %11599 = load <4 x i32>, <4 x i32>* %10946, align 16
  %11600 = load <4 x i32>, <4 x i32>* %10962, align 16
  %11601 = shufflevector <4 x i32> %11599, <4 x i32> %11600, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11602 = bitcast <4 x i32> %11601 to <2 x i64>
  %11603 = shufflevector <4 x i32> %11599, <4 x i32> %11600, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11604 = bitcast <4 x i32> %11603 to <2 x i64>
  %11605 = shufflevector <2 x i64> %11596, <2 x i64> %11602, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11605, <2 x i64>* %11316, align 16
  %11606 = shufflevector <2 x i64> %11596, <2 x i64> %11602, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11606, <2 x i64>* %11318, align 16
  %11607 = shufflevector <2 x i64> %11598, <2 x i64> %11604, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11607, <2 x i64>* %11320, align 16
  %11608 = shufflevector <2 x i64> %11598, <2 x i64> %11604, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11608, <2 x i64>* %11322, align 16
  %11609 = load <4 x i32>, <4 x i32>* %10990, align 16
  %11610 = load <4 x i32>, <4 x i32>* %11006, align 16
  %11611 = shufflevector <4 x i32> %11609, <4 x i32> %11610, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11612 = bitcast <4 x i32> %11611 to <2 x i64>
  %11613 = shufflevector <4 x i32> %11609, <4 x i32> %11610, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11614 = bitcast <4 x i32> %11613 to <2 x i64>
  %11615 = load <4 x i32>, <4 x i32>* %11022, align 16
  %11616 = load <4 x i32>, <4 x i32>* %11038, align 16
  %11617 = shufflevector <4 x i32> %11615, <4 x i32> %11616, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11618 = bitcast <4 x i32> %11617 to <2 x i64>
  %11619 = shufflevector <4 x i32> %11615, <4 x i32> %11616, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11620 = bitcast <4 x i32> %11619 to <2 x i64>
  %11621 = shufflevector <2 x i64> %11612, <2 x i64> %11618, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11621, <2 x i64>* %11336, align 16
  %11622 = shufflevector <2 x i64> %11612, <2 x i64> %11618, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11622, <2 x i64>* %11338, align 16
  %11623 = shufflevector <2 x i64> %11614, <2 x i64> %11620, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11623, <2 x i64>* %11340, align 16
  %11624 = shufflevector <2 x i64> %11614, <2 x i64> %11620, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11624, <2 x i64>* %11342, align 16
  %11625 = load <4 x i32>, <4 x i32>* %10994, align 16
  %11626 = load <4 x i32>, <4 x i32>* %11010, align 16
  %11627 = shufflevector <4 x i32> %11625, <4 x i32> %11626, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11628 = bitcast <4 x i32> %11627 to <2 x i64>
  %11629 = shufflevector <4 x i32> %11625, <4 x i32> %11626, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11630 = bitcast <4 x i32> %11629 to <2 x i64>
  %11631 = load <4 x i32>, <4 x i32>* %11026, align 16
  %11632 = load <4 x i32>, <4 x i32>* %11042, align 16
  %11633 = shufflevector <4 x i32> %11631, <4 x i32> %11632, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %11634 = bitcast <4 x i32> %11633 to <2 x i64>
  %11635 = shufflevector <4 x i32> %11631, <4 x i32> %11632, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %11636 = bitcast <4 x i32> %11635 to <2 x i64>
  %11637 = shufflevector <2 x i64> %11628, <2 x i64> %11634, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11637, <2 x i64>* %11356, align 16
  %11638 = shufflevector <2 x i64> %11628, <2 x i64> %11634, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11638, <2 x i64>* %11358, align 16
  %11639 = shufflevector <2 x i64> %11630, <2 x i64> %11636, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %11639, <2 x i64>* %11360, align 16
  %11640 = shufflevector <2 x i64> %11630, <2 x i64> %11636, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %11640, <2 x i64>* %11362, align 16
  %11641 = bitcast i32* %1 to <2 x i64>*
  %11642 = load <2 x i64>, <2 x i64>* %10728, align 16
  store <2 x i64> %11642, <2 x i64>* %11641, align 16
  %11643 = getelementptr inbounds i32, i32* %1, i64 4
  %11644 = bitcast i32* %11643 to <2 x i64>*
  %11645 = load <2 x i64>, <2 x i64>* %11104, align 16
  store <2 x i64> %11645, <2 x i64>* %11644, align 16
  %11646 = getelementptr inbounds i32, i32* %1, i64 8
  %11647 = bitcast i32* %11646 to <2 x i64>*
  %11648 = load <2 x i64>, <2 x i64>* %11216, align 16
  store <2 x i64> %11648, <2 x i64>* %11647, align 16
  %11649 = getelementptr inbounds i32, i32* %1, i64 12
  %11650 = bitcast i32* %11649 to <2 x i64>*
  %11651 = load <2 x i64>, <2 x i64>* %11256, align 16
  store <2 x i64> %11651, <2 x i64>* %11650, align 16
  %11652 = getelementptr inbounds i32, i32* %1, i64 16
  %11653 = bitcast i32* %11652 to <2 x i64>*
  %11654 = load <2 x i64>, <2 x i64>* %11071, align 16
  store <2 x i64> %11654, <2 x i64>* %11653, align 16
  %11655 = getelementptr inbounds i32, i32* %1, i64 20
  %11656 = bitcast i32* %11655 to <2 x i64>*
  %11657 = load <2 x i64>, <2 x i64>* %11106, align 16
  store <2 x i64> %11657, <2 x i64>* %11656, align 16
  %11658 = getelementptr inbounds i32, i32* %1, i64 24
  %11659 = bitcast i32* %11658 to <2 x i64>*
  %11660 = load <2 x i64>, <2 x i64>* %11218, align 16
  store <2 x i64> %11660, <2 x i64>* %11659, align 16
  %11661 = getelementptr inbounds i32, i32* %1, i64 28
  %11662 = bitcast i32* %11661 to <2 x i64>*
  %11663 = load <2 x i64>, <2 x i64>* %11258, align 16
  store <2 x i64> %11663, <2 x i64>* %11662, align 16
  %11664 = getelementptr inbounds i32, i32* %1, i64 32
  %11665 = bitcast i32* %11664 to <2 x i64>*
  %11666 = load <2 x i64>, <2 x i64>* %11073, align 16
  store <2 x i64> %11666, <2 x i64>* %11665, align 16
  %11667 = getelementptr inbounds i32, i32* %1, i64 36
  %11668 = bitcast i32* %11667 to <2 x i64>*
  %11669 = load <2 x i64>, <2 x i64>* %11108, align 16
  store <2 x i64> %11669, <2 x i64>* %11668, align 16
  %11670 = getelementptr inbounds i32, i32* %1, i64 40
  %11671 = bitcast i32* %11670 to <2 x i64>*
  %11672 = load <2 x i64>, <2 x i64>* %11220, align 16
  store <2 x i64> %11672, <2 x i64>* %11671, align 16
  %11673 = getelementptr inbounds i32, i32* %1, i64 44
  %11674 = bitcast i32* %11673 to <2 x i64>*
  %11675 = load <2 x i64>, <2 x i64>* %11260, align 16
  store <2 x i64> %11675, <2 x i64>* %11674, align 16
  %11676 = getelementptr inbounds i32, i32* %1, i64 48
  %11677 = bitcast i32* %11676 to <2 x i64>*
  %11678 = load <2 x i64>, <2 x i64>* %11075, align 16
  store <2 x i64> %11678, <2 x i64>* %11677, align 16
  %11679 = getelementptr inbounds i32, i32* %1, i64 52
  %11680 = bitcast i32* %11679 to <2 x i64>*
  %11681 = load <2 x i64>, <2 x i64>* %11110, align 16
  store <2 x i64> %11681, <2 x i64>* %11680, align 16
  %11682 = getelementptr inbounds i32, i32* %1, i64 56
  %11683 = bitcast i32* %11682 to <2 x i64>*
  %11684 = load <2 x i64>, <2 x i64>* %11222, align 16
  store <2 x i64> %11684, <2 x i64>* %11683, align 16
  %11685 = getelementptr inbounds i32, i32* %1, i64 60
  %11686 = bitcast i32* %11685 to <2 x i64>*
  %11687 = load <2 x i64>, <2 x i64>* %11262, align 16
  store <2 x i64> %11687, <2 x i64>* %11686, align 16
  %11688 = getelementptr inbounds i32, i32* %1, i64 64
  %11689 = bitcast i32* %11688 to <2 x i64>*
  %11690 = load <2 x i64>, <2 x i64>* %11085, align 16
  store <2 x i64> %11690, <2 x i64>* %11689, align 16
  %11691 = getelementptr inbounds i32, i32* %1, i64 68
  %11692 = bitcast i32* %11691 to <2 x i64>*
  %11693 = load <2 x i64>, <2 x i64>* %11124, align 16
  store <2 x i64> %11693, <2 x i64>* %11692, align 16
  %11694 = getelementptr inbounds i32, i32* %1, i64 72
  %11695 = bitcast i32* %11694 to <2 x i64>*
  %11696 = load <2 x i64>, <2 x i64>* %11236, align 16
  store <2 x i64> %11696, <2 x i64>* %11695, align 16
  %11697 = getelementptr inbounds i32, i32* %1, i64 76
  %11698 = bitcast i32* %11697 to <2 x i64>*
  %11699 = load <2 x i64>, <2 x i64>* %11276, align 16
  store <2 x i64> %11699, <2 x i64>* %11698, align 16
  %11700 = getelementptr inbounds i32, i32* %1, i64 80
  %11701 = bitcast i32* %11700 to <2 x i64>*
  %11702 = load <2 x i64>, <2 x i64>* %11087, align 16
  store <2 x i64> %11702, <2 x i64>* %11701, align 16
  %11703 = getelementptr inbounds i32, i32* %1, i64 84
  %11704 = bitcast i32* %11703 to <2 x i64>*
  %11705 = load <2 x i64>, <2 x i64>* %11126, align 16
  store <2 x i64> %11705, <2 x i64>* %11704, align 16
  %11706 = getelementptr inbounds i32, i32* %1, i64 88
  %11707 = bitcast i32* %11706 to <2 x i64>*
  %11708 = load <2 x i64>, <2 x i64>* %11238, align 16
  store <2 x i64> %11708, <2 x i64>* %11707, align 16
  %11709 = getelementptr inbounds i32, i32* %1, i64 92
  %11710 = bitcast i32* %11709 to <2 x i64>*
  %11711 = load <2 x i64>, <2 x i64>* %11278, align 16
  store <2 x i64> %11711, <2 x i64>* %11710, align 16
  %11712 = getelementptr inbounds i32, i32* %1, i64 96
  %11713 = bitcast i32* %11712 to <2 x i64>*
  %11714 = load <2 x i64>, <2 x i64>* %11089, align 16
  store <2 x i64> %11714, <2 x i64>* %11713, align 16
  %11715 = getelementptr inbounds i32, i32* %1, i64 100
  %11716 = bitcast i32* %11715 to <2 x i64>*
  %11717 = load <2 x i64>, <2 x i64>* %11128, align 16
  store <2 x i64> %11717, <2 x i64>* %11716, align 16
  %11718 = getelementptr inbounds i32, i32* %1, i64 104
  %11719 = bitcast i32* %11718 to <2 x i64>*
  %11720 = load <2 x i64>, <2 x i64>* %11240, align 16
  store <2 x i64> %11720, <2 x i64>* %11719, align 16
  %11721 = getelementptr inbounds i32, i32* %1, i64 108
  %11722 = bitcast i32* %11721 to <2 x i64>*
  %11723 = load <2 x i64>, <2 x i64>* %11280, align 16
  store <2 x i64> %11723, <2 x i64>* %11722, align 16
  %11724 = getelementptr inbounds i32, i32* %1, i64 112
  %11725 = bitcast i32* %11724 to <2 x i64>*
  %11726 = load <2 x i64>, <2 x i64>* %11091, align 16
  store <2 x i64> %11726, <2 x i64>* %11725, align 16
  %11727 = getelementptr inbounds i32, i32* %1, i64 116
  %11728 = bitcast i32* %11727 to <2 x i64>*
  %11729 = load <2 x i64>, <2 x i64>* %11130, align 16
  store <2 x i64> %11729, <2 x i64>* %11728, align 16
  %11730 = getelementptr inbounds i32, i32* %1, i64 120
  %11731 = bitcast i32* %11730 to <2 x i64>*
  %11732 = load <2 x i64>, <2 x i64>* %11242, align 16
  store <2 x i64> %11732, <2 x i64>* %11731, align 16
  %11733 = getelementptr inbounds i32, i32* %1, i64 124
  %11734 = bitcast i32* %11733 to <2 x i64>*
  %11735 = load <2 x i64>, <2 x i64>* %11282, align 16
  store <2 x i64> %11735, <2 x i64>* %11734, align 16
  %11736 = getelementptr inbounds i32, i32* %1, i64 128
  %11737 = bitcast i32* %11736 to <2 x i64>*
  %11738 = load <2 x i64>, <2 x i64>* %11140, align 16
  store <2 x i64> %11738, <2 x i64>* %11737, align 16
  %11739 = getelementptr inbounds i32, i32* %1, i64 132
  %11740 = bitcast i32* %11739 to <2 x i64>*
  %11741 = load <2 x i64>, <2 x i64>* %11176, align 16
  store <2 x i64> %11741, <2 x i64>* %11740, align 16
  %11742 = getelementptr inbounds i32, i32* %1, i64 136
  %11743 = bitcast i32* %11742 to <2 x i64>*
  %11744 = load <2 x i64>, <2 x i64>* %11296, align 16
  store <2 x i64> %11744, <2 x i64>* %11743, align 16
  %11745 = getelementptr inbounds i32, i32* %1, i64 140
  %11746 = bitcast i32* %11745 to <2 x i64>*
  %11747 = load <2 x i64>, <2 x i64>* %11336, align 16
  store <2 x i64> %11747, <2 x i64>* %11746, align 16
  %11748 = getelementptr inbounds i32, i32* %1, i64 144
  %11749 = bitcast i32* %11748 to <2 x i64>*
  %11750 = load <2 x i64>, <2 x i64>* %11142, align 16
  store <2 x i64> %11750, <2 x i64>* %11749, align 16
  %11751 = getelementptr inbounds i32, i32* %1, i64 148
  %11752 = bitcast i32* %11751 to <2 x i64>*
  %11753 = load <2 x i64>, <2 x i64>* %11178, align 16
  store <2 x i64> %11753, <2 x i64>* %11752, align 16
  %11754 = getelementptr inbounds i32, i32* %1, i64 152
  %11755 = bitcast i32* %11754 to <2 x i64>*
  %11756 = load <2 x i64>, <2 x i64>* %11298, align 16
  store <2 x i64> %11756, <2 x i64>* %11755, align 16
  %11757 = getelementptr inbounds i32, i32* %1, i64 156
  %11758 = bitcast i32* %11757 to <2 x i64>*
  %11759 = load <2 x i64>, <2 x i64>* %11338, align 16
  store <2 x i64> %11759, <2 x i64>* %11758, align 16
  %11760 = getelementptr inbounds i32, i32* %1, i64 160
  %11761 = bitcast i32* %11760 to <2 x i64>*
  %11762 = load <2 x i64>, <2 x i64>* %11144, align 16
  store <2 x i64> %11762, <2 x i64>* %11761, align 16
  %11763 = getelementptr inbounds i32, i32* %1, i64 164
  %11764 = bitcast i32* %11763 to <2 x i64>*
  %11765 = load <2 x i64>, <2 x i64>* %11180, align 16
  store <2 x i64> %11765, <2 x i64>* %11764, align 16
  %11766 = getelementptr inbounds i32, i32* %1, i64 168
  %11767 = bitcast i32* %11766 to <2 x i64>*
  %11768 = load <2 x i64>, <2 x i64>* %11300, align 16
  store <2 x i64> %11768, <2 x i64>* %11767, align 16
  %11769 = getelementptr inbounds i32, i32* %1, i64 172
  %11770 = bitcast i32* %11769 to <2 x i64>*
  %11771 = load <2 x i64>, <2 x i64>* %11340, align 16
  store <2 x i64> %11771, <2 x i64>* %11770, align 16
  %11772 = getelementptr inbounds i32, i32* %1, i64 176
  %11773 = bitcast i32* %11772 to <2 x i64>*
  %11774 = load <2 x i64>, <2 x i64>* %11146, align 16
  store <2 x i64> %11774, <2 x i64>* %11773, align 16
  %11775 = getelementptr inbounds i32, i32* %1, i64 180
  %11776 = bitcast i32* %11775 to <2 x i64>*
  %11777 = load <2 x i64>, <2 x i64>* %11182, align 16
  store <2 x i64> %11777, <2 x i64>* %11776, align 16
  %11778 = getelementptr inbounds i32, i32* %1, i64 184
  %11779 = bitcast i32* %11778 to <2 x i64>*
  %11780 = load <2 x i64>, <2 x i64>* %11302, align 16
  store <2 x i64> %11780, <2 x i64>* %11779, align 16
  %11781 = getelementptr inbounds i32, i32* %1, i64 188
  %11782 = bitcast i32* %11781 to <2 x i64>*
  %11783 = load <2 x i64>, <2 x i64>* %11342, align 16
  store <2 x i64> %11783, <2 x i64>* %11782, align 16
  %11784 = getelementptr inbounds i32, i32* %1, i64 192
  %11785 = bitcast i32* %11784 to <2 x i64>*
  %11786 = load <2 x i64>, <2 x i64>* %11156, align 16
  store <2 x i64> %11786, <2 x i64>* %11785, align 16
  %11787 = getelementptr inbounds i32, i32* %1, i64 196
  %11788 = bitcast i32* %11787 to <2 x i64>*
  %11789 = load <2 x i64>, <2 x i64>* %11196, align 16
  store <2 x i64> %11789, <2 x i64>* %11788, align 16
  %11790 = getelementptr inbounds i32, i32* %1, i64 200
  %11791 = bitcast i32* %11790 to <2 x i64>*
  %11792 = load <2 x i64>, <2 x i64>* %11316, align 16
  store <2 x i64> %11792, <2 x i64>* %11791, align 16
  %11793 = getelementptr inbounds i32, i32* %1, i64 204
  %11794 = bitcast i32* %11793 to <2 x i64>*
  %11795 = load <2 x i64>, <2 x i64>* %11356, align 16
  store <2 x i64> %11795, <2 x i64>* %11794, align 16
  %11796 = getelementptr inbounds i32, i32* %1, i64 208
  %11797 = bitcast i32* %11796 to <2 x i64>*
  %11798 = load <2 x i64>, <2 x i64>* %11158, align 16
  store <2 x i64> %11798, <2 x i64>* %11797, align 16
  %11799 = getelementptr inbounds i32, i32* %1, i64 212
  %11800 = bitcast i32* %11799 to <2 x i64>*
  %11801 = load <2 x i64>, <2 x i64>* %11198, align 16
  store <2 x i64> %11801, <2 x i64>* %11800, align 16
  %11802 = getelementptr inbounds i32, i32* %1, i64 216
  %11803 = bitcast i32* %11802 to <2 x i64>*
  %11804 = load <2 x i64>, <2 x i64>* %11318, align 16
  store <2 x i64> %11804, <2 x i64>* %11803, align 16
  %11805 = getelementptr inbounds i32, i32* %1, i64 220
  %11806 = bitcast i32* %11805 to <2 x i64>*
  %11807 = load <2 x i64>, <2 x i64>* %11358, align 16
  store <2 x i64> %11807, <2 x i64>* %11806, align 16
  %11808 = getelementptr inbounds i32, i32* %1, i64 224
  %11809 = bitcast i32* %11808 to <2 x i64>*
  %11810 = load <2 x i64>, <2 x i64>* %11160, align 16
  store <2 x i64> %11810, <2 x i64>* %11809, align 16
  %11811 = getelementptr inbounds i32, i32* %1, i64 228
  %11812 = bitcast i32* %11811 to <2 x i64>*
  %11813 = load <2 x i64>, <2 x i64>* %11200, align 16
  store <2 x i64> %11813, <2 x i64>* %11812, align 16
  %11814 = getelementptr inbounds i32, i32* %1, i64 232
  %11815 = bitcast i32* %11814 to <2 x i64>*
  %11816 = load <2 x i64>, <2 x i64>* %11320, align 16
  store <2 x i64> %11816, <2 x i64>* %11815, align 16
  %11817 = getelementptr inbounds i32, i32* %1, i64 236
  %11818 = bitcast i32* %11817 to <2 x i64>*
  %11819 = load <2 x i64>, <2 x i64>* %11360, align 16
  store <2 x i64> %11819, <2 x i64>* %11818, align 16
  %11820 = getelementptr inbounds i32, i32* %1, i64 240
  %11821 = bitcast i32* %11820 to <2 x i64>*
  %11822 = load <2 x i64>, <2 x i64>* %11162, align 16
  store <2 x i64> %11822, <2 x i64>* %11821, align 16
  %11823 = getelementptr inbounds i32, i32* %1, i64 244
  %11824 = bitcast i32* %11823 to <2 x i64>*
  %11825 = load <2 x i64>, <2 x i64>* %11202, align 16
  store <2 x i64> %11825, <2 x i64>* %11824, align 16
  %11826 = getelementptr inbounds i32, i32* %1, i64 248
  %11827 = bitcast i32* %11826 to <2 x i64>*
  %11828 = load <2 x i64>, <2 x i64>* %11322, align 16
  store <2 x i64> %11828, <2 x i64>* %11827, align 16
  %11829 = getelementptr inbounds i32, i32* %1, i64 252
  %11830 = bitcast i32* %11829 to <2 x i64>*
  %11831 = load <2 x i64>, <2 x i64>* %11362, align 16
  store <2 x i64> %11831, <2 x i64>* %11830, align 16
  br label %17357

11832:                                            ; preds = %5
  %11833 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %11834 = load i8, i8* %10, align 1
  %11835 = sext i8 %11834 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %11833, i32 %2, i32 0, i32 0, i32 %11835)
  br label %11836

11836:                                            ; preds = %11836, %11832
  %11837 = phi i64 [ 0, %11832 ], [ %11855, %11836 ]
  %11838 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %11837
  %11839 = bitcast <2 x i64>* %11838 to <4 x i32>*
  %11840 = load <4 x i32>, <4 x i32>* %11839, align 16
  %11841 = mul <4 x i32> %11840, <i32 11586, i32 11586, i32 11586, i32 11586>
  %11842 = add <4 x i32> %11841, <i32 2048, i32 2048, i32 2048, i32 2048>
  %11843 = ashr <4 x i32> %11842, <i32 12, i32 12, i32 12, i32 12>
  %11844 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %11837
  %11845 = bitcast <2 x i64>* %11844 to <4 x i32>*
  store <4 x i32> %11843, <4 x i32>* %11845, align 16
  %11846 = or i64 %11837, 1
  %11847 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %11846
  %11848 = bitcast <2 x i64>* %11847 to <4 x i32>*
  %11849 = load <4 x i32>, <4 x i32>* %11848, align 16
  %11850 = mul <4 x i32> %11849, <i32 11586, i32 11586, i32 11586, i32 11586>
  %11851 = add <4 x i32> %11850, <i32 2048, i32 2048, i32 2048, i32 2048>
  %11852 = ashr <4 x i32> %11851, <i32 12, i32 12, i32 12, i32 12>
  %11853 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %11846
  %11854 = bitcast <2 x i64>* %11853 to <4 x i32>*
  store <4 x i32> %11852, <4 x i32>* %11854, align 16
  %11855 = add nuw nsw i64 %11837, 2
  %11856 = icmp eq i64 %11855, 64
  br i1 %11856, label %11857, label %11836

11857:                                            ; preds = %11836
  %11858 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %11859 = getelementptr inbounds i8, i8* %10, i64 1
  %11860 = load i8, i8* %11859, align 1
  %11861 = sext i8 %11860 to i32
  %11862 = sub nsw i32 0, %11861
  %11863 = xor i32 %11861, -1
  %11864 = shl i32 1, %11863
  %11865 = insertelement <4 x i32> undef, i32 %11864, i32 0
  %11866 = shufflevector <4 x i32> %11865, <4 x i32> undef, <4 x i32> zeroinitializer
  %11867 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %11868 = load <4 x i32>, <4 x i32>* %11867, align 16
  %11869 = add <4 x i32> %11866, %11868
  %11870 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %11871 = bitcast <2 x i64>* %11870 to <4 x i32>*
  %11872 = load <4 x i32>, <4 x i32>* %11871, align 16
  %11873 = add <4 x i32> %11866, %11872
  %11874 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %11875 = bitcast <2 x i64>* %11874 to <4 x i32>*
  %11876 = load <4 x i32>, <4 x i32>* %11875, align 16
  %11877 = add <4 x i32> %11866, %11876
  %11878 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %11879 = bitcast <2 x i64>* %11878 to <4 x i32>*
  %11880 = load <4 x i32>, <4 x i32>* %11879, align 16
  %11881 = add <4 x i32> %11880, %11866
  %11882 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %11883 = bitcast <2 x i64>* %11882 to <4 x i32>*
  %11884 = load <4 x i32>, <4 x i32>* %11883, align 16
  %11885 = add <4 x i32> %11884, %11866
  %11886 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %11887 = bitcast <2 x i64>* %11886 to <4 x i32>*
  %11888 = load <4 x i32>, <4 x i32>* %11887, align 16
  %11889 = add <4 x i32> %11888, %11866
  %11890 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %11891 = bitcast <2 x i64>* %11890 to <4 x i32>*
  %11892 = load <4 x i32>, <4 x i32>* %11891, align 16
  %11893 = add <4 x i32> %11892, %11866
  %11894 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %11895 = bitcast <2 x i64>* %11894 to <4 x i32>*
  %11896 = load <4 x i32>, <4 x i32>* %11895, align 16
  %11897 = add <4 x i32> %11896, %11866
  %11898 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %11899 = bitcast <2 x i64>* %11898 to <4 x i32>*
  %11900 = load <4 x i32>, <4 x i32>* %11899, align 16
  %11901 = add <4 x i32> %11900, %11866
  %11902 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %11903 = bitcast <2 x i64>* %11902 to <4 x i32>*
  %11904 = load <4 x i32>, <4 x i32>* %11903, align 16
  %11905 = add <4 x i32> %11904, %11866
  %11906 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %11907 = bitcast <2 x i64>* %11906 to <4 x i32>*
  %11908 = load <4 x i32>, <4 x i32>* %11907, align 16
  %11909 = add <4 x i32> %11908, %11866
  %11910 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %11911 = bitcast <2 x i64>* %11910 to <4 x i32>*
  %11912 = load <4 x i32>, <4 x i32>* %11911, align 16
  %11913 = add <4 x i32> %11912, %11866
  %11914 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %11915 = bitcast <2 x i64>* %11914 to <4 x i32>*
  %11916 = load <4 x i32>, <4 x i32>* %11915, align 16
  %11917 = add <4 x i32> %11916, %11866
  %11918 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %11919 = bitcast <2 x i64>* %11918 to <4 x i32>*
  %11920 = load <4 x i32>, <4 x i32>* %11919, align 16
  %11921 = add <4 x i32> %11920, %11866
  %11922 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %11923 = bitcast <2 x i64>* %11922 to <4 x i32>*
  %11924 = load <4 x i32>, <4 x i32>* %11923, align 16
  %11925 = add <4 x i32> %11924, %11866
  %11926 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %11927 = bitcast <2 x i64>* %11926 to <4 x i32>*
  %11928 = load <4 x i32>, <4 x i32>* %11927, align 16
  %11929 = add <4 x i32> %11928, %11866
  %11930 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11869, i32 %11862) #8
  store <4 x i32> %11930, <4 x i32>* %11867, align 16
  %11931 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11873, i32 %11862) #8
  store <4 x i32> %11931, <4 x i32>* %11871, align 16
  %11932 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11877, i32 %11862) #8
  store <4 x i32> %11932, <4 x i32>* %11875, align 16
  %11933 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11881, i32 %11862) #8
  store <4 x i32> %11933, <4 x i32>* %11879, align 16
  %11934 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11885, i32 %11862) #8
  store <4 x i32> %11934, <4 x i32>* %11883, align 16
  %11935 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11889, i32 %11862) #8
  store <4 x i32> %11935, <4 x i32>* %11887, align 16
  %11936 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11893, i32 %11862) #8
  store <4 x i32> %11936, <4 x i32>* %11891, align 16
  %11937 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11897, i32 %11862) #8
  store <4 x i32> %11937, <4 x i32>* %11895, align 16
  %11938 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11901, i32 %11862) #8
  store <4 x i32> %11938, <4 x i32>* %11899, align 16
  %11939 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11905, i32 %11862) #8
  store <4 x i32> %11939, <4 x i32>* %11903, align 16
  %11940 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11909, i32 %11862) #8
  store <4 x i32> %11940, <4 x i32>* %11907, align 16
  %11941 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11913, i32 %11862) #8
  store <4 x i32> %11941, <4 x i32>* %11911, align 16
  %11942 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11917, i32 %11862) #8
  store <4 x i32> %11942, <4 x i32>* %11915, align 16
  %11943 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11921, i32 %11862) #8
  store <4 x i32> %11943, <4 x i32>* %11919, align 16
  %11944 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11925, i32 %11862) #8
  store <4 x i32> %11944, <4 x i32>* %11923, align 16
  %11945 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11929, i32 %11862) #8
  store <4 x i32> %11945, <4 x i32>* %11927, align 16
  %11946 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %11947 = bitcast <2 x i64>* %11946 to <4 x i32>*
  %11948 = load <4 x i32>, <4 x i32>* %11947, align 16
  %11949 = add <4 x i32> %11948, %11866
  %11950 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %11951 = bitcast <2 x i64>* %11950 to <4 x i32>*
  %11952 = load <4 x i32>, <4 x i32>* %11951, align 16
  %11953 = add <4 x i32> %11952, %11866
  %11954 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %11955 = bitcast <2 x i64>* %11954 to <4 x i32>*
  %11956 = load <4 x i32>, <4 x i32>* %11955, align 16
  %11957 = add <4 x i32> %11956, %11866
  %11958 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %11959 = bitcast <2 x i64>* %11958 to <4 x i32>*
  %11960 = load <4 x i32>, <4 x i32>* %11959, align 16
  %11961 = add <4 x i32> %11960, %11866
  %11962 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %11963 = bitcast <2 x i64>* %11962 to <4 x i32>*
  %11964 = load <4 x i32>, <4 x i32>* %11963, align 16
  %11965 = add <4 x i32> %11964, %11866
  %11966 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %11967 = bitcast <2 x i64>* %11966 to <4 x i32>*
  %11968 = load <4 x i32>, <4 x i32>* %11967, align 16
  %11969 = add <4 x i32> %11968, %11866
  %11970 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %11971 = bitcast <2 x i64>* %11970 to <4 x i32>*
  %11972 = load <4 x i32>, <4 x i32>* %11971, align 16
  %11973 = add <4 x i32> %11972, %11866
  %11974 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %11975 = bitcast <2 x i64>* %11974 to <4 x i32>*
  %11976 = load <4 x i32>, <4 x i32>* %11975, align 16
  %11977 = add <4 x i32> %11976, %11866
  %11978 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %11979 = bitcast <2 x i64>* %11978 to <4 x i32>*
  %11980 = load <4 x i32>, <4 x i32>* %11979, align 16
  %11981 = add <4 x i32> %11980, %11866
  %11982 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %11983 = bitcast <2 x i64>* %11982 to <4 x i32>*
  %11984 = load <4 x i32>, <4 x i32>* %11983, align 16
  %11985 = add <4 x i32> %11984, %11866
  %11986 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %11987 = bitcast <2 x i64>* %11986 to <4 x i32>*
  %11988 = load <4 x i32>, <4 x i32>* %11987, align 16
  %11989 = add <4 x i32> %11988, %11866
  %11990 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %11991 = bitcast <2 x i64>* %11990 to <4 x i32>*
  %11992 = load <4 x i32>, <4 x i32>* %11991, align 16
  %11993 = add <4 x i32> %11992, %11866
  %11994 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %11995 = bitcast <2 x i64>* %11994 to <4 x i32>*
  %11996 = load <4 x i32>, <4 x i32>* %11995, align 16
  %11997 = add <4 x i32> %11996, %11866
  %11998 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %11999 = bitcast <2 x i64>* %11998 to <4 x i32>*
  %12000 = load <4 x i32>, <4 x i32>* %11999, align 16
  %12001 = add <4 x i32> %12000, %11866
  %12002 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %12003 = bitcast <2 x i64>* %12002 to <4 x i32>*
  %12004 = load <4 x i32>, <4 x i32>* %12003, align 16
  %12005 = add <4 x i32> %12004, %11866
  %12006 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %12007 = bitcast <2 x i64>* %12006 to <4 x i32>*
  %12008 = load <4 x i32>, <4 x i32>* %12007, align 16
  %12009 = add <4 x i32> %12008, %11866
  %12010 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11949, i32 %11862) #8
  store <4 x i32> %12010, <4 x i32>* %11947, align 16
  %12011 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11953, i32 %11862) #8
  store <4 x i32> %12011, <4 x i32>* %11951, align 16
  %12012 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11957, i32 %11862) #8
  store <4 x i32> %12012, <4 x i32>* %11955, align 16
  %12013 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11961, i32 %11862) #8
  store <4 x i32> %12013, <4 x i32>* %11959, align 16
  %12014 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11965, i32 %11862) #8
  store <4 x i32> %12014, <4 x i32>* %11963, align 16
  %12015 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11969, i32 %11862) #8
  store <4 x i32> %12015, <4 x i32>* %11967, align 16
  %12016 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11973, i32 %11862) #8
  store <4 x i32> %12016, <4 x i32>* %11971, align 16
  %12017 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11977, i32 %11862) #8
  store <4 x i32> %12017, <4 x i32>* %11975, align 16
  %12018 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11981, i32 %11862) #8
  store <4 x i32> %12018, <4 x i32>* %11979, align 16
  %12019 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11985, i32 %11862) #8
  store <4 x i32> %12019, <4 x i32>* %11983, align 16
  %12020 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11989, i32 %11862) #8
  store <4 x i32> %12020, <4 x i32>* %11987, align 16
  %12021 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11993, i32 %11862) #8
  store <4 x i32> %12021, <4 x i32>* %11991, align 16
  %12022 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %11997, i32 %11862) #8
  store <4 x i32> %12022, <4 x i32>* %11995, align 16
  %12023 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12001, i32 %11862) #8
  store <4 x i32> %12023, <4 x i32>* %11999, align 16
  %12024 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12005, i32 %11862) #8
  store <4 x i32> %12024, <4 x i32>* %12003, align 16
  %12025 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12009, i32 %11862) #8
  store <4 x i32> %12025, <4 x i32>* %12007, align 16
  %12026 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %12027 = bitcast <2 x i64>* %12026 to <4 x i32>*
  %12028 = load <4 x i32>, <4 x i32>* %12027, align 16
  %12029 = add <4 x i32> %12028, %11866
  %12030 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %12031 = bitcast <2 x i64>* %12030 to <4 x i32>*
  %12032 = load <4 x i32>, <4 x i32>* %12031, align 16
  %12033 = add <4 x i32> %12032, %11866
  %12034 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %12035 = bitcast <2 x i64>* %12034 to <4 x i32>*
  %12036 = load <4 x i32>, <4 x i32>* %12035, align 16
  %12037 = add <4 x i32> %12036, %11866
  %12038 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %12039 = bitcast <2 x i64>* %12038 to <4 x i32>*
  %12040 = load <4 x i32>, <4 x i32>* %12039, align 16
  %12041 = add <4 x i32> %12040, %11866
  %12042 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %12043 = bitcast <2 x i64>* %12042 to <4 x i32>*
  %12044 = load <4 x i32>, <4 x i32>* %12043, align 16
  %12045 = add <4 x i32> %12044, %11866
  %12046 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %12047 = bitcast <2 x i64>* %12046 to <4 x i32>*
  %12048 = load <4 x i32>, <4 x i32>* %12047, align 16
  %12049 = add <4 x i32> %12048, %11866
  %12050 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %12051 = bitcast <2 x i64>* %12050 to <4 x i32>*
  %12052 = load <4 x i32>, <4 x i32>* %12051, align 16
  %12053 = add <4 x i32> %12052, %11866
  %12054 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %12055 = bitcast <2 x i64>* %12054 to <4 x i32>*
  %12056 = load <4 x i32>, <4 x i32>* %12055, align 16
  %12057 = add <4 x i32> %12056, %11866
  %12058 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %12059 = bitcast <2 x i64>* %12058 to <4 x i32>*
  %12060 = load <4 x i32>, <4 x i32>* %12059, align 16
  %12061 = add <4 x i32> %12060, %11866
  %12062 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %12063 = bitcast <2 x i64>* %12062 to <4 x i32>*
  %12064 = load <4 x i32>, <4 x i32>* %12063, align 16
  %12065 = add <4 x i32> %12064, %11866
  %12066 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %12067 = bitcast <2 x i64>* %12066 to <4 x i32>*
  %12068 = load <4 x i32>, <4 x i32>* %12067, align 16
  %12069 = add <4 x i32> %12068, %11866
  %12070 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %12071 = bitcast <2 x i64>* %12070 to <4 x i32>*
  %12072 = load <4 x i32>, <4 x i32>* %12071, align 16
  %12073 = add <4 x i32> %12072, %11866
  %12074 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %12075 = bitcast <2 x i64>* %12074 to <4 x i32>*
  %12076 = load <4 x i32>, <4 x i32>* %12075, align 16
  %12077 = add <4 x i32> %12076, %11866
  %12078 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %12079 = bitcast <2 x i64>* %12078 to <4 x i32>*
  %12080 = load <4 x i32>, <4 x i32>* %12079, align 16
  %12081 = add <4 x i32> %12080, %11866
  %12082 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %12083 = bitcast <2 x i64>* %12082 to <4 x i32>*
  %12084 = load <4 x i32>, <4 x i32>* %12083, align 16
  %12085 = add <4 x i32> %12084, %11866
  %12086 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %12087 = bitcast <2 x i64>* %12086 to <4 x i32>*
  %12088 = load <4 x i32>, <4 x i32>* %12087, align 16
  %12089 = add <4 x i32> %12088, %11866
  %12090 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12029, i32 %11862) #8
  store <4 x i32> %12090, <4 x i32>* %12027, align 16
  %12091 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12033, i32 %11862) #8
  store <4 x i32> %12091, <4 x i32>* %12031, align 16
  %12092 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12037, i32 %11862) #8
  store <4 x i32> %12092, <4 x i32>* %12035, align 16
  %12093 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12041, i32 %11862) #8
  store <4 x i32> %12093, <4 x i32>* %12039, align 16
  %12094 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12045, i32 %11862) #8
  store <4 x i32> %12094, <4 x i32>* %12043, align 16
  %12095 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12049, i32 %11862) #8
  store <4 x i32> %12095, <4 x i32>* %12047, align 16
  %12096 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12053, i32 %11862) #8
  store <4 x i32> %12096, <4 x i32>* %12051, align 16
  %12097 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12057, i32 %11862) #8
  store <4 x i32> %12097, <4 x i32>* %12055, align 16
  %12098 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12061, i32 %11862) #8
  store <4 x i32> %12098, <4 x i32>* %12059, align 16
  %12099 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12065, i32 %11862) #8
  store <4 x i32> %12099, <4 x i32>* %12063, align 16
  %12100 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12069, i32 %11862) #8
  store <4 x i32> %12100, <4 x i32>* %12067, align 16
  %12101 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12073, i32 %11862) #8
  store <4 x i32> %12101, <4 x i32>* %12071, align 16
  %12102 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12077, i32 %11862) #8
  store <4 x i32> %12102, <4 x i32>* %12075, align 16
  %12103 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12081, i32 %11862) #8
  store <4 x i32> %12103, <4 x i32>* %12079, align 16
  %12104 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12085, i32 %11862) #8
  store <4 x i32> %12104, <4 x i32>* %12083, align 16
  %12105 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12089, i32 %11862) #8
  store <4 x i32> %12105, <4 x i32>* %12087, align 16
  %12106 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %12107 = bitcast <2 x i64>* %12106 to <4 x i32>*
  %12108 = load <4 x i32>, <4 x i32>* %12107, align 16
  %12109 = add <4 x i32> %12108, %11866
  %12110 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %12111 = bitcast <2 x i64>* %12110 to <4 x i32>*
  %12112 = load <4 x i32>, <4 x i32>* %12111, align 16
  %12113 = add <4 x i32> %12112, %11866
  %12114 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %12115 = bitcast <2 x i64>* %12114 to <4 x i32>*
  %12116 = load <4 x i32>, <4 x i32>* %12115, align 16
  %12117 = add <4 x i32> %12116, %11866
  %12118 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %12119 = bitcast <2 x i64>* %12118 to <4 x i32>*
  %12120 = load <4 x i32>, <4 x i32>* %12119, align 16
  %12121 = add <4 x i32> %12120, %11866
  %12122 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %12123 = bitcast <2 x i64>* %12122 to <4 x i32>*
  %12124 = load <4 x i32>, <4 x i32>* %12123, align 16
  %12125 = add <4 x i32> %12124, %11866
  %12126 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %12127 = bitcast <2 x i64>* %12126 to <4 x i32>*
  %12128 = load <4 x i32>, <4 x i32>* %12127, align 16
  %12129 = add <4 x i32> %12128, %11866
  %12130 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %12131 = bitcast <2 x i64>* %12130 to <4 x i32>*
  %12132 = load <4 x i32>, <4 x i32>* %12131, align 16
  %12133 = add <4 x i32> %12132, %11866
  %12134 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %12135 = bitcast <2 x i64>* %12134 to <4 x i32>*
  %12136 = load <4 x i32>, <4 x i32>* %12135, align 16
  %12137 = add <4 x i32> %12136, %11866
  %12138 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %12139 = bitcast <2 x i64>* %12138 to <4 x i32>*
  %12140 = load <4 x i32>, <4 x i32>* %12139, align 16
  %12141 = add <4 x i32> %12140, %11866
  %12142 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %12143 = bitcast <2 x i64>* %12142 to <4 x i32>*
  %12144 = load <4 x i32>, <4 x i32>* %12143, align 16
  %12145 = add <4 x i32> %12144, %11866
  %12146 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %12147 = bitcast <2 x i64>* %12146 to <4 x i32>*
  %12148 = load <4 x i32>, <4 x i32>* %12147, align 16
  %12149 = add <4 x i32> %12148, %11866
  %12150 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %12151 = bitcast <2 x i64>* %12150 to <4 x i32>*
  %12152 = load <4 x i32>, <4 x i32>* %12151, align 16
  %12153 = add <4 x i32> %12152, %11866
  %12154 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %12155 = bitcast <2 x i64>* %12154 to <4 x i32>*
  %12156 = load <4 x i32>, <4 x i32>* %12155, align 16
  %12157 = add <4 x i32> %12156, %11866
  %12158 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %12159 = bitcast <2 x i64>* %12158 to <4 x i32>*
  %12160 = load <4 x i32>, <4 x i32>* %12159, align 16
  %12161 = add <4 x i32> %12160, %11866
  %12162 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %12163 = bitcast <2 x i64>* %12162 to <4 x i32>*
  %12164 = load <4 x i32>, <4 x i32>* %12163, align 16
  %12165 = add <4 x i32> %12164, %11866
  %12166 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %12167 = bitcast <2 x i64>* %12166 to <4 x i32>*
  %12168 = load <4 x i32>, <4 x i32>* %12167, align 16
  %12169 = add <4 x i32> %12168, %11866
  %12170 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12109, i32 %11862) #8
  store <4 x i32> %12170, <4 x i32>* %12107, align 16
  %12171 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12113, i32 %11862) #8
  store <4 x i32> %12171, <4 x i32>* %12111, align 16
  %12172 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12117, i32 %11862) #8
  store <4 x i32> %12172, <4 x i32>* %12115, align 16
  %12173 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12121, i32 %11862) #8
  store <4 x i32> %12173, <4 x i32>* %12119, align 16
  %12174 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12125, i32 %11862) #8
  store <4 x i32> %12174, <4 x i32>* %12123, align 16
  %12175 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12129, i32 %11862) #8
  store <4 x i32> %12175, <4 x i32>* %12127, align 16
  %12176 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12133, i32 %11862) #8
  store <4 x i32> %12176, <4 x i32>* %12131, align 16
  %12177 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12137, i32 %11862) #8
  store <4 x i32> %12177, <4 x i32>* %12135, align 16
  %12178 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12141, i32 %11862) #8
  store <4 x i32> %12178, <4 x i32>* %12139, align 16
  %12179 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12145, i32 %11862) #8
  store <4 x i32> %12179, <4 x i32>* %12143, align 16
  %12180 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12149, i32 %11862) #8
  store <4 x i32> %12180, <4 x i32>* %12147, align 16
  %12181 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12153, i32 %11862) #8
  store <4 x i32> %12181, <4 x i32>* %12151, align 16
  %12182 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12157, i32 %11862) #8
  store <4 x i32> %12182, <4 x i32>* %12155, align 16
  %12183 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12161, i32 %11862) #8
  store <4 x i32> %12183, <4 x i32>* %12159, align 16
  %12184 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12165, i32 %11862) #8
  store <4 x i32> %12184, <4 x i32>* %12163, align 16
  %12185 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12169, i32 %11862) #8
  store <4 x i32> %12185, <4 x i32>* %12167, align 16
  %12186 = shufflevector <4 x i32> %11930, <4 x i32> %11934, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12187 = bitcast <4 x i32> %12186 to <2 x i64>
  %12188 = shufflevector <4 x i32> %11930, <4 x i32> %11934, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12189 = bitcast <4 x i32> %12188 to <2 x i64>
  %12190 = shufflevector <4 x i32> %11938, <4 x i32> %11942, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12191 = bitcast <4 x i32> %12190 to <2 x i64>
  %12192 = shufflevector <4 x i32> %11938, <4 x i32> %11942, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12193 = bitcast <4 x i32> %12192 to <2 x i64>
  %12194 = shufflevector <2 x i64> %12187, <2 x i64> %12191, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12194, <2 x i64>* %11833, align 16
  %12195 = shufflevector <2 x i64> %12187, <2 x i64> %12191, <2 x i32> <i32 1, i32 3>
  %12196 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %12195, <2 x i64>* %12196, align 16
  %12197 = shufflevector <2 x i64> %12189, <2 x i64> %12193, <2 x i32> <i32 0, i32 2>
  %12198 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %12197, <2 x i64>* %12198, align 16
  %12199 = shufflevector <2 x i64> %12189, <2 x i64> %12193, <2 x i32> <i32 1, i32 3>
  %12200 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %12199, <2 x i64>* %12200, align 16
  %12201 = shufflevector <4 x i32> %11931, <4 x i32> %11935, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12202 = bitcast <4 x i32> %12201 to <2 x i64>
  %12203 = shufflevector <4 x i32> %11931, <4 x i32> %11935, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12204 = bitcast <4 x i32> %12203 to <2 x i64>
  %12205 = shufflevector <4 x i32> %11939, <4 x i32> %11943, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12206 = bitcast <4 x i32> %12205 to <2 x i64>
  %12207 = shufflevector <4 x i32> %11939, <4 x i32> %11943, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12208 = bitcast <4 x i32> %12207 to <2 x i64>
  %12209 = shufflevector <2 x i64> %12202, <2 x i64> %12206, <2 x i32> <i32 0, i32 2>
  %12210 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %12209, <2 x i64>* %12210, align 16
  %12211 = shufflevector <2 x i64> %12202, <2 x i64> %12206, <2 x i32> <i32 1, i32 3>
  %12212 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %12211, <2 x i64>* %12212, align 16
  %12213 = shufflevector <2 x i64> %12204, <2 x i64> %12208, <2 x i32> <i32 0, i32 2>
  %12214 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %12213, <2 x i64>* %12214, align 16
  %12215 = shufflevector <2 x i64> %12204, <2 x i64> %12208, <2 x i32> <i32 1, i32 3>
  %12216 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %12215, <2 x i64>* %12216, align 16
  %12217 = load <4 x i32>, <4 x i32>* %11963, align 16
  %12218 = shufflevector <4 x i32> %12010, <4 x i32> %12217, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12219 = bitcast <4 x i32> %12218 to <2 x i64>
  %12220 = shufflevector <4 x i32> %12010, <4 x i32> %12217, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12221 = bitcast <4 x i32> %12220 to <2 x i64>
  %12222 = load <4 x i32>, <4 x i32>* %11979, align 16
  %12223 = load <4 x i32>, <4 x i32>* %11995, align 16
  %12224 = shufflevector <4 x i32> %12222, <4 x i32> %12223, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12225 = bitcast <4 x i32> %12224 to <2 x i64>
  %12226 = shufflevector <4 x i32> %12222, <4 x i32> %12223, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12227 = bitcast <4 x i32> %12226 to <2 x i64>
  %12228 = shufflevector <2 x i64> %12219, <2 x i64> %12225, <2 x i32> <i32 0, i32 2>
  %12229 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %12228, <2 x i64>* %12229, align 16
  %12230 = shufflevector <2 x i64> %12219, <2 x i64> %12225, <2 x i32> <i32 1, i32 3>
  %12231 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %12230, <2 x i64>* %12231, align 16
  %12232 = shufflevector <2 x i64> %12221, <2 x i64> %12227, <2 x i32> <i32 0, i32 2>
  %12233 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %12232, <2 x i64>* %12233, align 16
  %12234 = shufflevector <2 x i64> %12221, <2 x i64> %12227, <2 x i32> <i32 1, i32 3>
  %12235 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %12234, <2 x i64>* %12235, align 16
  %12236 = load <4 x i32>, <4 x i32>* %11951, align 16
  %12237 = load <4 x i32>, <4 x i32>* %11967, align 16
  %12238 = shufflevector <4 x i32> %12236, <4 x i32> %12237, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12239 = bitcast <4 x i32> %12238 to <2 x i64>
  %12240 = shufflevector <4 x i32> %12236, <4 x i32> %12237, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12241 = bitcast <4 x i32> %12240 to <2 x i64>
  %12242 = load <4 x i32>, <4 x i32>* %11983, align 16
  %12243 = load <4 x i32>, <4 x i32>* %11999, align 16
  %12244 = shufflevector <4 x i32> %12242, <4 x i32> %12243, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12245 = bitcast <4 x i32> %12244 to <2 x i64>
  %12246 = shufflevector <4 x i32> %12242, <4 x i32> %12243, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12247 = bitcast <4 x i32> %12246 to <2 x i64>
  %12248 = shufflevector <2 x i64> %12239, <2 x i64> %12245, <2 x i32> <i32 0, i32 2>
  %12249 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %12248, <2 x i64>* %12249, align 16
  %12250 = shufflevector <2 x i64> %12239, <2 x i64> %12245, <2 x i32> <i32 1, i32 3>
  %12251 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %12250, <2 x i64>* %12251, align 16
  %12252 = shufflevector <2 x i64> %12241, <2 x i64> %12247, <2 x i32> <i32 0, i32 2>
  %12253 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %12252, <2 x i64>* %12253, align 16
  %12254 = shufflevector <2 x i64> %12241, <2 x i64> %12247, <2 x i32> <i32 1, i32 3>
  %12255 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %12254, <2 x i64>* %12255, align 16
  %12256 = shufflevector <4 x i32> %11932, <4 x i32> %11936, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12257 = bitcast <4 x i32> %12256 to <2 x i64>
  %12258 = shufflevector <4 x i32> %11932, <4 x i32> %11936, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12259 = bitcast <4 x i32> %12258 to <2 x i64>
  %12260 = shufflevector <4 x i32> %11940, <4 x i32> %11944, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12261 = bitcast <4 x i32> %12260 to <2 x i64>
  %12262 = shufflevector <4 x i32> %11940, <4 x i32> %11944, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12263 = bitcast <4 x i32> %12262 to <2 x i64>
  %12264 = shufflevector <2 x i64> %12257, <2 x i64> %12261, <2 x i32> <i32 0, i32 2>
  %12265 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %12264, <2 x i64>* %12265, align 16
  %12266 = shufflevector <2 x i64> %12257, <2 x i64> %12261, <2 x i32> <i32 1, i32 3>
  %12267 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %12266, <2 x i64>* %12267, align 16
  %12268 = shufflevector <2 x i64> %12259, <2 x i64> %12263, <2 x i32> <i32 0, i32 2>
  %12269 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %12268, <2 x i64>* %12269, align 16
  %12270 = shufflevector <2 x i64> %12259, <2 x i64> %12263, <2 x i32> <i32 1, i32 3>
  %12271 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %12270, <2 x i64>* %12271, align 16
  %12272 = shufflevector <4 x i32> %11933, <4 x i32> %11937, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12273 = bitcast <4 x i32> %12272 to <2 x i64>
  %12274 = shufflevector <4 x i32> %11933, <4 x i32> %11937, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12275 = bitcast <4 x i32> %12274 to <2 x i64>
  %12276 = shufflevector <4 x i32> %11941, <4 x i32> %11945, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12277 = bitcast <4 x i32> %12276 to <2 x i64>
  %12278 = shufflevector <4 x i32> %11941, <4 x i32> %11945, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12279 = bitcast <4 x i32> %12278 to <2 x i64>
  %12280 = shufflevector <2 x i64> %12273, <2 x i64> %12277, <2 x i32> <i32 0, i32 2>
  %12281 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %12280, <2 x i64>* %12281, align 16
  %12282 = shufflevector <2 x i64> %12273, <2 x i64> %12277, <2 x i32> <i32 1, i32 3>
  %12283 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %12282, <2 x i64>* %12283, align 16
  %12284 = shufflevector <2 x i64> %12275, <2 x i64> %12279, <2 x i32> <i32 0, i32 2>
  %12285 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %12284, <2 x i64>* %12285, align 16
  %12286 = shufflevector <2 x i64> %12275, <2 x i64> %12279, <2 x i32> <i32 1, i32 3>
  %12287 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %12286, <2 x i64>* %12287, align 16
  %12288 = load <4 x i32>, <4 x i32>* %11955, align 16
  %12289 = load <4 x i32>, <4 x i32>* %11971, align 16
  %12290 = shufflevector <4 x i32> %12288, <4 x i32> %12289, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12291 = bitcast <4 x i32> %12290 to <2 x i64>
  %12292 = shufflevector <4 x i32> %12288, <4 x i32> %12289, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12293 = bitcast <4 x i32> %12292 to <2 x i64>
  %12294 = load <4 x i32>, <4 x i32>* %11987, align 16
  %12295 = load <4 x i32>, <4 x i32>* %12003, align 16
  %12296 = shufflevector <4 x i32> %12294, <4 x i32> %12295, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12297 = bitcast <4 x i32> %12296 to <2 x i64>
  %12298 = shufflevector <4 x i32> %12294, <4 x i32> %12295, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12299 = bitcast <4 x i32> %12298 to <2 x i64>
  %12300 = shufflevector <2 x i64> %12291, <2 x i64> %12297, <2 x i32> <i32 0, i32 2>
  %12301 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %12300, <2 x i64>* %12301, align 16
  %12302 = shufflevector <2 x i64> %12291, <2 x i64> %12297, <2 x i32> <i32 1, i32 3>
  %12303 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %12302, <2 x i64>* %12303, align 16
  %12304 = shufflevector <2 x i64> %12293, <2 x i64> %12299, <2 x i32> <i32 0, i32 2>
  %12305 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %12304, <2 x i64>* %12305, align 16
  %12306 = shufflevector <2 x i64> %12293, <2 x i64> %12299, <2 x i32> <i32 1, i32 3>
  %12307 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %12306, <2 x i64>* %12307, align 16
  %12308 = load <4 x i32>, <4 x i32>* %11959, align 16
  %12309 = load <4 x i32>, <4 x i32>* %11975, align 16
  %12310 = shufflevector <4 x i32> %12308, <4 x i32> %12309, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12311 = bitcast <4 x i32> %12310 to <2 x i64>
  %12312 = shufflevector <4 x i32> %12308, <4 x i32> %12309, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12313 = bitcast <4 x i32> %12312 to <2 x i64>
  %12314 = load <4 x i32>, <4 x i32>* %11991, align 16
  %12315 = load <4 x i32>, <4 x i32>* %12007, align 16
  %12316 = shufflevector <4 x i32> %12314, <4 x i32> %12315, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12317 = bitcast <4 x i32> %12316 to <2 x i64>
  %12318 = shufflevector <4 x i32> %12314, <4 x i32> %12315, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12319 = bitcast <4 x i32> %12318 to <2 x i64>
  %12320 = shufflevector <2 x i64> %12311, <2 x i64> %12317, <2 x i32> <i32 0, i32 2>
  %12321 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %12320, <2 x i64>* %12321, align 16
  %12322 = shufflevector <2 x i64> %12311, <2 x i64> %12317, <2 x i32> <i32 1, i32 3>
  %12323 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %12322, <2 x i64>* %12323, align 16
  %12324 = shufflevector <2 x i64> %12313, <2 x i64> %12319, <2 x i32> <i32 0, i32 2>
  %12325 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %12324, <2 x i64>* %12325, align 16
  %12326 = shufflevector <2 x i64> %12313, <2 x i64> %12319, <2 x i32> <i32 1, i32 3>
  %12327 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %12326, <2 x i64>* %12327, align 16
  %12328 = load <4 x i32>, <4 x i32>* %12027, align 16
  %12329 = load <4 x i32>, <4 x i32>* %12043, align 16
  %12330 = shufflevector <4 x i32> %12328, <4 x i32> %12329, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12331 = bitcast <4 x i32> %12330 to <2 x i64>
  %12332 = shufflevector <4 x i32> %12328, <4 x i32> %12329, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12333 = bitcast <4 x i32> %12332 to <2 x i64>
  %12334 = load <4 x i32>, <4 x i32>* %12059, align 16
  %12335 = load <4 x i32>, <4 x i32>* %12075, align 16
  %12336 = shufflevector <4 x i32> %12334, <4 x i32> %12335, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12337 = bitcast <4 x i32> %12336 to <2 x i64>
  %12338 = shufflevector <4 x i32> %12334, <4 x i32> %12335, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12339 = bitcast <4 x i32> %12338 to <2 x i64>
  %12340 = shufflevector <2 x i64> %12331, <2 x i64> %12337, <2 x i32> <i32 0, i32 2>
  %12341 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %12340, <2 x i64>* %12341, align 16
  %12342 = shufflevector <2 x i64> %12331, <2 x i64> %12337, <2 x i32> <i32 1, i32 3>
  %12343 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %12342, <2 x i64>* %12343, align 16
  %12344 = shufflevector <2 x i64> %12333, <2 x i64> %12339, <2 x i32> <i32 0, i32 2>
  %12345 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %12344, <2 x i64>* %12345, align 16
  %12346 = shufflevector <2 x i64> %12333, <2 x i64> %12339, <2 x i32> <i32 1, i32 3>
  %12347 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %12346, <2 x i64>* %12347, align 16
  %12348 = load <4 x i32>, <4 x i32>* %12031, align 16
  %12349 = load <4 x i32>, <4 x i32>* %12047, align 16
  %12350 = shufflevector <4 x i32> %12348, <4 x i32> %12349, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12351 = bitcast <4 x i32> %12350 to <2 x i64>
  %12352 = shufflevector <4 x i32> %12348, <4 x i32> %12349, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12353 = bitcast <4 x i32> %12352 to <2 x i64>
  %12354 = load <4 x i32>, <4 x i32>* %12063, align 16
  %12355 = load <4 x i32>, <4 x i32>* %12079, align 16
  %12356 = shufflevector <4 x i32> %12354, <4 x i32> %12355, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12357 = bitcast <4 x i32> %12356 to <2 x i64>
  %12358 = shufflevector <4 x i32> %12354, <4 x i32> %12355, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12359 = bitcast <4 x i32> %12358 to <2 x i64>
  %12360 = shufflevector <2 x i64> %12351, <2 x i64> %12357, <2 x i32> <i32 0, i32 2>
  %12361 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %12360, <2 x i64>* %12361, align 16
  %12362 = shufflevector <2 x i64> %12351, <2 x i64> %12357, <2 x i32> <i32 1, i32 3>
  %12363 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %12362, <2 x i64>* %12363, align 16
  %12364 = shufflevector <2 x i64> %12353, <2 x i64> %12359, <2 x i32> <i32 0, i32 2>
  %12365 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %12364, <2 x i64>* %12365, align 16
  %12366 = shufflevector <2 x i64> %12353, <2 x i64> %12359, <2 x i32> <i32 1, i32 3>
  %12367 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %12366, <2 x i64>* %12367, align 16
  %12368 = load <4 x i32>, <4 x i32>* %12107, align 16
  %12369 = load <4 x i32>, <4 x i32>* %12123, align 16
  %12370 = shufflevector <4 x i32> %12368, <4 x i32> %12369, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12371 = bitcast <4 x i32> %12370 to <2 x i64>
  %12372 = shufflevector <4 x i32> %12368, <4 x i32> %12369, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12373 = bitcast <4 x i32> %12372 to <2 x i64>
  %12374 = load <4 x i32>, <4 x i32>* %12139, align 16
  %12375 = load <4 x i32>, <4 x i32>* %12155, align 16
  %12376 = shufflevector <4 x i32> %12374, <4 x i32> %12375, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12377 = bitcast <4 x i32> %12376 to <2 x i64>
  %12378 = shufflevector <4 x i32> %12374, <4 x i32> %12375, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12379 = bitcast <4 x i32> %12378 to <2 x i64>
  %12380 = shufflevector <2 x i64> %12371, <2 x i64> %12377, <2 x i32> <i32 0, i32 2>
  %12381 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %12380, <2 x i64>* %12381, align 16
  %12382 = shufflevector <2 x i64> %12371, <2 x i64> %12377, <2 x i32> <i32 1, i32 3>
  %12383 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %12382, <2 x i64>* %12383, align 16
  %12384 = shufflevector <2 x i64> %12373, <2 x i64> %12379, <2 x i32> <i32 0, i32 2>
  %12385 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %12384, <2 x i64>* %12385, align 16
  %12386 = shufflevector <2 x i64> %12373, <2 x i64> %12379, <2 x i32> <i32 1, i32 3>
  %12387 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %12386, <2 x i64>* %12387, align 16
  %12388 = load <4 x i32>, <4 x i32>* %12111, align 16
  %12389 = load <4 x i32>, <4 x i32>* %12127, align 16
  %12390 = shufflevector <4 x i32> %12388, <4 x i32> %12389, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12391 = bitcast <4 x i32> %12390 to <2 x i64>
  %12392 = shufflevector <4 x i32> %12388, <4 x i32> %12389, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12393 = bitcast <4 x i32> %12392 to <2 x i64>
  %12394 = load <4 x i32>, <4 x i32>* %12143, align 16
  %12395 = load <4 x i32>, <4 x i32>* %12159, align 16
  %12396 = shufflevector <4 x i32> %12394, <4 x i32> %12395, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12397 = bitcast <4 x i32> %12396 to <2 x i64>
  %12398 = shufflevector <4 x i32> %12394, <4 x i32> %12395, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12399 = bitcast <4 x i32> %12398 to <2 x i64>
  %12400 = shufflevector <2 x i64> %12391, <2 x i64> %12397, <2 x i32> <i32 0, i32 2>
  %12401 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %12400, <2 x i64>* %12401, align 16
  %12402 = shufflevector <2 x i64> %12391, <2 x i64> %12397, <2 x i32> <i32 1, i32 3>
  %12403 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %12402, <2 x i64>* %12403, align 16
  %12404 = shufflevector <2 x i64> %12393, <2 x i64> %12399, <2 x i32> <i32 0, i32 2>
  %12405 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %12404, <2 x i64>* %12405, align 16
  %12406 = shufflevector <2 x i64> %12393, <2 x i64> %12399, <2 x i32> <i32 1, i32 3>
  %12407 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %12406, <2 x i64>* %12407, align 16
  %12408 = load <4 x i32>, <4 x i32>* %12035, align 16
  %12409 = load <4 x i32>, <4 x i32>* %12051, align 16
  %12410 = shufflevector <4 x i32> %12408, <4 x i32> %12409, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12411 = bitcast <4 x i32> %12410 to <2 x i64>
  %12412 = shufflevector <4 x i32> %12408, <4 x i32> %12409, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12413 = bitcast <4 x i32> %12412 to <2 x i64>
  %12414 = load <4 x i32>, <4 x i32>* %12067, align 16
  %12415 = load <4 x i32>, <4 x i32>* %12083, align 16
  %12416 = shufflevector <4 x i32> %12414, <4 x i32> %12415, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12417 = bitcast <4 x i32> %12416 to <2 x i64>
  %12418 = shufflevector <4 x i32> %12414, <4 x i32> %12415, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12419 = bitcast <4 x i32> %12418 to <2 x i64>
  %12420 = shufflevector <2 x i64> %12411, <2 x i64> %12417, <2 x i32> <i32 0, i32 2>
  %12421 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %12420, <2 x i64>* %12421, align 16
  %12422 = shufflevector <2 x i64> %12411, <2 x i64> %12417, <2 x i32> <i32 1, i32 3>
  %12423 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %12422, <2 x i64>* %12423, align 16
  %12424 = shufflevector <2 x i64> %12413, <2 x i64> %12419, <2 x i32> <i32 0, i32 2>
  %12425 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %12424, <2 x i64>* %12425, align 16
  %12426 = shufflevector <2 x i64> %12413, <2 x i64> %12419, <2 x i32> <i32 1, i32 3>
  %12427 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %12426, <2 x i64>* %12427, align 16
  %12428 = load <4 x i32>, <4 x i32>* %12039, align 16
  %12429 = load <4 x i32>, <4 x i32>* %12055, align 16
  %12430 = shufflevector <4 x i32> %12428, <4 x i32> %12429, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12431 = bitcast <4 x i32> %12430 to <2 x i64>
  %12432 = shufflevector <4 x i32> %12428, <4 x i32> %12429, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12433 = bitcast <4 x i32> %12432 to <2 x i64>
  %12434 = load <4 x i32>, <4 x i32>* %12071, align 16
  %12435 = load <4 x i32>, <4 x i32>* %12087, align 16
  %12436 = shufflevector <4 x i32> %12434, <4 x i32> %12435, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12437 = bitcast <4 x i32> %12436 to <2 x i64>
  %12438 = shufflevector <4 x i32> %12434, <4 x i32> %12435, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12439 = bitcast <4 x i32> %12438 to <2 x i64>
  %12440 = shufflevector <2 x i64> %12431, <2 x i64> %12437, <2 x i32> <i32 0, i32 2>
  %12441 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %12440, <2 x i64>* %12441, align 16
  %12442 = shufflevector <2 x i64> %12431, <2 x i64> %12437, <2 x i32> <i32 1, i32 3>
  %12443 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %12442, <2 x i64>* %12443, align 16
  %12444 = shufflevector <2 x i64> %12433, <2 x i64> %12439, <2 x i32> <i32 0, i32 2>
  %12445 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %12444, <2 x i64>* %12445, align 16
  %12446 = shufflevector <2 x i64> %12433, <2 x i64> %12439, <2 x i32> <i32 1, i32 3>
  %12447 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %12446, <2 x i64>* %12447, align 16
  %12448 = load <4 x i32>, <4 x i32>* %12115, align 16
  %12449 = load <4 x i32>, <4 x i32>* %12131, align 16
  %12450 = shufflevector <4 x i32> %12448, <4 x i32> %12449, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12451 = bitcast <4 x i32> %12450 to <2 x i64>
  %12452 = shufflevector <4 x i32> %12448, <4 x i32> %12449, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12453 = bitcast <4 x i32> %12452 to <2 x i64>
  %12454 = load <4 x i32>, <4 x i32>* %12147, align 16
  %12455 = load <4 x i32>, <4 x i32>* %12163, align 16
  %12456 = shufflevector <4 x i32> %12454, <4 x i32> %12455, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12457 = bitcast <4 x i32> %12456 to <2 x i64>
  %12458 = shufflevector <4 x i32> %12454, <4 x i32> %12455, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12459 = bitcast <4 x i32> %12458 to <2 x i64>
  %12460 = shufflevector <2 x i64> %12451, <2 x i64> %12457, <2 x i32> <i32 0, i32 2>
  %12461 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %12460, <2 x i64>* %12461, align 16
  %12462 = shufflevector <2 x i64> %12451, <2 x i64> %12457, <2 x i32> <i32 1, i32 3>
  %12463 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %12462, <2 x i64>* %12463, align 16
  %12464 = shufflevector <2 x i64> %12453, <2 x i64> %12459, <2 x i32> <i32 0, i32 2>
  %12465 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %12464, <2 x i64>* %12465, align 16
  %12466 = shufflevector <2 x i64> %12453, <2 x i64> %12459, <2 x i32> <i32 1, i32 3>
  %12467 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %12466, <2 x i64>* %12467, align 16
  %12468 = load <4 x i32>, <4 x i32>* %12119, align 16
  %12469 = load <4 x i32>, <4 x i32>* %12135, align 16
  %12470 = shufflevector <4 x i32> %12468, <4 x i32> %12469, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12471 = bitcast <4 x i32> %12470 to <2 x i64>
  %12472 = shufflevector <4 x i32> %12468, <4 x i32> %12469, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12473 = bitcast <4 x i32> %12472 to <2 x i64>
  %12474 = load <4 x i32>, <4 x i32>* %12151, align 16
  %12475 = load <4 x i32>, <4 x i32>* %12167, align 16
  %12476 = shufflevector <4 x i32> %12474, <4 x i32> %12475, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12477 = bitcast <4 x i32> %12476 to <2 x i64>
  %12478 = shufflevector <4 x i32> %12474, <4 x i32> %12475, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12479 = bitcast <4 x i32> %12478 to <2 x i64>
  %12480 = shufflevector <2 x i64> %12471, <2 x i64> %12477, <2 x i32> <i32 0, i32 2>
  %12481 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %12480, <2 x i64>* %12481, align 16
  %12482 = shufflevector <2 x i64> %12471, <2 x i64> %12477, <2 x i32> <i32 1, i32 3>
  %12483 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %12482, <2 x i64>* %12483, align 16
  %12484 = shufflevector <2 x i64> %12473, <2 x i64> %12479, <2 x i32> <i32 0, i32 2>
  %12485 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %12484, <2 x i64>* %12485, align 16
  %12486 = shufflevector <2 x i64> %12473, <2 x i64> %12479, <2 x i32> <i32 1, i32 3>
  %12487 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %12486, <2 x i64>* %12487, align 16
  %12488 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  %12489 = sext i8 %12488 to i32
  call void @fdct16x16_sse4_1(<2 x i64>* nonnull %11833, <2 x i64>* nonnull %11858, i32 %12489, i32 4)
  %12490 = load <4 x i32>, <4 x i32>* %11867, align 16
  %12491 = load <4 x i32>, <4 x i32>* %11883, align 16
  %12492 = shufflevector <4 x i32> %12490, <4 x i32> %12491, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12493 = bitcast <4 x i32> %12492 to <2 x i64>
  %12494 = shufflevector <4 x i32> %12490, <4 x i32> %12491, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12495 = bitcast <4 x i32> %12494 to <2 x i64>
  %12496 = load <4 x i32>, <4 x i32>* %11899, align 16
  %12497 = load <4 x i32>, <4 x i32>* %11915, align 16
  %12498 = shufflevector <4 x i32> %12496, <4 x i32> %12497, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12499 = bitcast <4 x i32> %12498 to <2 x i64>
  %12500 = shufflevector <4 x i32> %12496, <4 x i32> %12497, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12501 = bitcast <4 x i32> %12500 to <2 x i64>
  %12502 = shufflevector <2 x i64> %12493, <2 x i64> %12499, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12502, <2 x i64>* %11833, align 16
  %12503 = shufflevector <2 x i64> %12493, <2 x i64> %12499, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12503, <2 x i64>* %12196, align 16
  %12504 = shufflevector <2 x i64> %12495, <2 x i64> %12501, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12504, <2 x i64>* %12198, align 16
  %12505 = shufflevector <2 x i64> %12495, <2 x i64> %12501, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12505, <2 x i64>* %12200, align 16
  %12506 = load <4 x i32>, <4 x i32>* %11871, align 16
  %12507 = load <4 x i32>, <4 x i32>* %11887, align 16
  %12508 = shufflevector <4 x i32> %12506, <4 x i32> %12507, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12509 = bitcast <4 x i32> %12508 to <2 x i64>
  %12510 = shufflevector <4 x i32> %12506, <4 x i32> %12507, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12511 = bitcast <4 x i32> %12510 to <2 x i64>
  %12512 = load <4 x i32>, <4 x i32>* %11903, align 16
  %12513 = load <4 x i32>, <4 x i32>* %11919, align 16
  %12514 = shufflevector <4 x i32> %12512, <4 x i32> %12513, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12515 = bitcast <4 x i32> %12514 to <2 x i64>
  %12516 = shufflevector <4 x i32> %12512, <4 x i32> %12513, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12517 = bitcast <4 x i32> %12516 to <2 x i64>
  %12518 = shufflevector <2 x i64> %12509, <2 x i64> %12515, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12518, <2 x i64>* %12210, align 16
  %12519 = shufflevector <2 x i64> %12509, <2 x i64> %12515, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12519, <2 x i64>* %12212, align 16
  %12520 = shufflevector <2 x i64> %12511, <2 x i64> %12517, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12520, <2 x i64>* %12214, align 16
  %12521 = shufflevector <2 x i64> %12511, <2 x i64> %12517, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12521, <2 x i64>* %12216, align 16
  %12522 = load <4 x i32>, <4 x i32>* %11947, align 16
  %12523 = load <4 x i32>, <4 x i32>* %11963, align 16
  %12524 = shufflevector <4 x i32> %12522, <4 x i32> %12523, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12525 = bitcast <4 x i32> %12524 to <2 x i64>
  %12526 = shufflevector <4 x i32> %12522, <4 x i32> %12523, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12527 = bitcast <4 x i32> %12526 to <2 x i64>
  %12528 = load <4 x i32>, <4 x i32>* %11979, align 16
  %12529 = load <4 x i32>, <4 x i32>* %11995, align 16
  %12530 = shufflevector <4 x i32> %12528, <4 x i32> %12529, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12531 = bitcast <4 x i32> %12530 to <2 x i64>
  %12532 = shufflevector <4 x i32> %12528, <4 x i32> %12529, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12533 = bitcast <4 x i32> %12532 to <2 x i64>
  %12534 = shufflevector <2 x i64> %12525, <2 x i64> %12531, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12534, <2 x i64>* %12229, align 16
  %12535 = shufflevector <2 x i64> %12525, <2 x i64> %12531, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12535, <2 x i64>* %12231, align 16
  %12536 = shufflevector <2 x i64> %12527, <2 x i64> %12533, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12536, <2 x i64>* %12233, align 16
  %12537 = shufflevector <2 x i64> %12527, <2 x i64> %12533, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12537, <2 x i64>* %12235, align 16
  %12538 = load <4 x i32>, <4 x i32>* %11951, align 16
  %12539 = load <4 x i32>, <4 x i32>* %11967, align 16
  %12540 = shufflevector <4 x i32> %12538, <4 x i32> %12539, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12541 = bitcast <4 x i32> %12540 to <2 x i64>
  %12542 = shufflevector <4 x i32> %12538, <4 x i32> %12539, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12543 = bitcast <4 x i32> %12542 to <2 x i64>
  %12544 = load <4 x i32>, <4 x i32>* %11983, align 16
  %12545 = load <4 x i32>, <4 x i32>* %11999, align 16
  %12546 = shufflevector <4 x i32> %12544, <4 x i32> %12545, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12547 = bitcast <4 x i32> %12546 to <2 x i64>
  %12548 = shufflevector <4 x i32> %12544, <4 x i32> %12545, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12549 = bitcast <4 x i32> %12548 to <2 x i64>
  %12550 = shufflevector <2 x i64> %12541, <2 x i64> %12547, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12550, <2 x i64>* %12249, align 16
  %12551 = shufflevector <2 x i64> %12541, <2 x i64> %12547, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12551, <2 x i64>* %12251, align 16
  %12552 = shufflevector <2 x i64> %12543, <2 x i64> %12549, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12552, <2 x i64>* %12253, align 16
  %12553 = shufflevector <2 x i64> %12543, <2 x i64> %12549, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12553, <2 x i64>* %12255, align 16
  %12554 = load <4 x i32>, <4 x i32>* %11875, align 16
  %12555 = load <4 x i32>, <4 x i32>* %11891, align 16
  %12556 = shufflevector <4 x i32> %12554, <4 x i32> %12555, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12557 = bitcast <4 x i32> %12556 to <2 x i64>
  %12558 = shufflevector <4 x i32> %12554, <4 x i32> %12555, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12559 = bitcast <4 x i32> %12558 to <2 x i64>
  %12560 = load <4 x i32>, <4 x i32>* %11907, align 16
  %12561 = load <4 x i32>, <4 x i32>* %11923, align 16
  %12562 = shufflevector <4 x i32> %12560, <4 x i32> %12561, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12563 = bitcast <4 x i32> %12562 to <2 x i64>
  %12564 = shufflevector <4 x i32> %12560, <4 x i32> %12561, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12565 = bitcast <4 x i32> %12564 to <2 x i64>
  %12566 = shufflevector <2 x i64> %12557, <2 x i64> %12563, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12566, <2 x i64>* %12265, align 16
  %12567 = shufflevector <2 x i64> %12557, <2 x i64> %12563, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12567, <2 x i64>* %12267, align 16
  %12568 = shufflevector <2 x i64> %12559, <2 x i64> %12565, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12568, <2 x i64>* %12269, align 16
  %12569 = shufflevector <2 x i64> %12559, <2 x i64> %12565, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12569, <2 x i64>* %12271, align 16
  %12570 = load <4 x i32>, <4 x i32>* %11879, align 16
  %12571 = load <4 x i32>, <4 x i32>* %11895, align 16
  %12572 = shufflevector <4 x i32> %12570, <4 x i32> %12571, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12573 = bitcast <4 x i32> %12572 to <2 x i64>
  %12574 = shufflevector <4 x i32> %12570, <4 x i32> %12571, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12575 = bitcast <4 x i32> %12574 to <2 x i64>
  %12576 = load <4 x i32>, <4 x i32>* %11911, align 16
  %12577 = load <4 x i32>, <4 x i32>* %11927, align 16
  %12578 = shufflevector <4 x i32> %12576, <4 x i32> %12577, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12579 = bitcast <4 x i32> %12578 to <2 x i64>
  %12580 = shufflevector <4 x i32> %12576, <4 x i32> %12577, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12581 = bitcast <4 x i32> %12580 to <2 x i64>
  %12582 = shufflevector <2 x i64> %12573, <2 x i64> %12579, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12582, <2 x i64>* %12281, align 16
  %12583 = shufflevector <2 x i64> %12573, <2 x i64> %12579, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12583, <2 x i64>* %12283, align 16
  %12584 = shufflevector <2 x i64> %12575, <2 x i64> %12581, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12584, <2 x i64>* %12285, align 16
  %12585 = shufflevector <2 x i64> %12575, <2 x i64> %12581, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12585, <2 x i64>* %12287, align 16
  %12586 = load <4 x i32>, <4 x i32>* %11955, align 16
  %12587 = load <4 x i32>, <4 x i32>* %11971, align 16
  %12588 = shufflevector <4 x i32> %12586, <4 x i32> %12587, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12589 = bitcast <4 x i32> %12588 to <2 x i64>
  %12590 = shufflevector <4 x i32> %12586, <4 x i32> %12587, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12591 = bitcast <4 x i32> %12590 to <2 x i64>
  %12592 = load <4 x i32>, <4 x i32>* %11987, align 16
  %12593 = load <4 x i32>, <4 x i32>* %12003, align 16
  %12594 = shufflevector <4 x i32> %12592, <4 x i32> %12593, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12595 = bitcast <4 x i32> %12594 to <2 x i64>
  %12596 = shufflevector <4 x i32> %12592, <4 x i32> %12593, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12597 = bitcast <4 x i32> %12596 to <2 x i64>
  %12598 = shufflevector <2 x i64> %12589, <2 x i64> %12595, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12598, <2 x i64>* %12301, align 16
  %12599 = shufflevector <2 x i64> %12589, <2 x i64> %12595, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12599, <2 x i64>* %12303, align 16
  %12600 = shufflevector <2 x i64> %12591, <2 x i64> %12597, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12600, <2 x i64>* %12305, align 16
  %12601 = shufflevector <2 x i64> %12591, <2 x i64> %12597, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12601, <2 x i64>* %12307, align 16
  %12602 = load <4 x i32>, <4 x i32>* %11959, align 16
  %12603 = load <4 x i32>, <4 x i32>* %11975, align 16
  %12604 = shufflevector <4 x i32> %12602, <4 x i32> %12603, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12605 = bitcast <4 x i32> %12604 to <2 x i64>
  %12606 = shufflevector <4 x i32> %12602, <4 x i32> %12603, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12607 = bitcast <4 x i32> %12606 to <2 x i64>
  %12608 = load <4 x i32>, <4 x i32>* %11991, align 16
  %12609 = load <4 x i32>, <4 x i32>* %12007, align 16
  %12610 = shufflevector <4 x i32> %12608, <4 x i32> %12609, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12611 = bitcast <4 x i32> %12610 to <2 x i64>
  %12612 = shufflevector <4 x i32> %12608, <4 x i32> %12609, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12613 = bitcast <4 x i32> %12612 to <2 x i64>
  %12614 = shufflevector <2 x i64> %12605, <2 x i64> %12611, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12614, <2 x i64>* %12321, align 16
  %12615 = shufflevector <2 x i64> %12605, <2 x i64> %12611, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12615, <2 x i64>* %12323, align 16
  %12616 = shufflevector <2 x i64> %12607, <2 x i64> %12613, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12616, <2 x i64>* %12325, align 16
  %12617 = shufflevector <2 x i64> %12607, <2 x i64> %12613, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12617, <2 x i64>* %12327, align 16
  %12618 = load <4 x i32>, <4 x i32>* %12027, align 16
  %12619 = load <4 x i32>, <4 x i32>* %12043, align 16
  %12620 = shufflevector <4 x i32> %12618, <4 x i32> %12619, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12621 = bitcast <4 x i32> %12620 to <2 x i64>
  %12622 = shufflevector <4 x i32> %12618, <4 x i32> %12619, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12623 = bitcast <4 x i32> %12622 to <2 x i64>
  %12624 = load <4 x i32>, <4 x i32>* %12059, align 16
  %12625 = load <4 x i32>, <4 x i32>* %12075, align 16
  %12626 = shufflevector <4 x i32> %12624, <4 x i32> %12625, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12627 = bitcast <4 x i32> %12626 to <2 x i64>
  %12628 = shufflevector <4 x i32> %12624, <4 x i32> %12625, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12629 = bitcast <4 x i32> %12628 to <2 x i64>
  %12630 = shufflevector <2 x i64> %12621, <2 x i64> %12627, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12630, <2 x i64>* %12341, align 16
  %12631 = shufflevector <2 x i64> %12621, <2 x i64> %12627, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12631, <2 x i64>* %12343, align 16
  %12632 = shufflevector <2 x i64> %12623, <2 x i64> %12629, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12632, <2 x i64>* %12345, align 16
  %12633 = shufflevector <2 x i64> %12623, <2 x i64> %12629, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12633, <2 x i64>* %12347, align 16
  %12634 = load <4 x i32>, <4 x i32>* %12031, align 16
  %12635 = load <4 x i32>, <4 x i32>* %12047, align 16
  %12636 = shufflevector <4 x i32> %12634, <4 x i32> %12635, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12637 = bitcast <4 x i32> %12636 to <2 x i64>
  %12638 = shufflevector <4 x i32> %12634, <4 x i32> %12635, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12639 = bitcast <4 x i32> %12638 to <2 x i64>
  %12640 = load <4 x i32>, <4 x i32>* %12063, align 16
  %12641 = load <4 x i32>, <4 x i32>* %12079, align 16
  %12642 = shufflevector <4 x i32> %12640, <4 x i32> %12641, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12643 = bitcast <4 x i32> %12642 to <2 x i64>
  %12644 = shufflevector <4 x i32> %12640, <4 x i32> %12641, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12645 = bitcast <4 x i32> %12644 to <2 x i64>
  %12646 = shufflevector <2 x i64> %12637, <2 x i64> %12643, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12646, <2 x i64>* %12361, align 16
  %12647 = shufflevector <2 x i64> %12637, <2 x i64> %12643, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12647, <2 x i64>* %12363, align 16
  %12648 = shufflevector <2 x i64> %12639, <2 x i64> %12645, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12648, <2 x i64>* %12365, align 16
  %12649 = shufflevector <2 x i64> %12639, <2 x i64> %12645, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12649, <2 x i64>* %12367, align 16
  %12650 = load <4 x i32>, <4 x i32>* %12107, align 16
  %12651 = load <4 x i32>, <4 x i32>* %12123, align 16
  %12652 = shufflevector <4 x i32> %12650, <4 x i32> %12651, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12653 = bitcast <4 x i32> %12652 to <2 x i64>
  %12654 = shufflevector <4 x i32> %12650, <4 x i32> %12651, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12655 = bitcast <4 x i32> %12654 to <2 x i64>
  %12656 = load <4 x i32>, <4 x i32>* %12139, align 16
  %12657 = load <4 x i32>, <4 x i32>* %12155, align 16
  %12658 = shufflevector <4 x i32> %12656, <4 x i32> %12657, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12659 = bitcast <4 x i32> %12658 to <2 x i64>
  %12660 = shufflevector <4 x i32> %12656, <4 x i32> %12657, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12661 = bitcast <4 x i32> %12660 to <2 x i64>
  %12662 = shufflevector <2 x i64> %12653, <2 x i64> %12659, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12662, <2 x i64>* %12381, align 16
  %12663 = shufflevector <2 x i64> %12653, <2 x i64> %12659, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12663, <2 x i64>* %12383, align 16
  %12664 = shufflevector <2 x i64> %12655, <2 x i64> %12661, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12664, <2 x i64>* %12385, align 16
  %12665 = shufflevector <2 x i64> %12655, <2 x i64> %12661, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12665, <2 x i64>* %12387, align 16
  %12666 = load <4 x i32>, <4 x i32>* %12111, align 16
  %12667 = load <4 x i32>, <4 x i32>* %12127, align 16
  %12668 = shufflevector <4 x i32> %12666, <4 x i32> %12667, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12669 = bitcast <4 x i32> %12668 to <2 x i64>
  %12670 = shufflevector <4 x i32> %12666, <4 x i32> %12667, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12671 = bitcast <4 x i32> %12670 to <2 x i64>
  %12672 = load <4 x i32>, <4 x i32>* %12143, align 16
  %12673 = load <4 x i32>, <4 x i32>* %12159, align 16
  %12674 = shufflevector <4 x i32> %12672, <4 x i32> %12673, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12675 = bitcast <4 x i32> %12674 to <2 x i64>
  %12676 = shufflevector <4 x i32> %12672, <4 x i32> %12673, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12677 = bitcast <4 x i32> %12676 to <2 x i64>
  %12678 = shufflevector <2 x i64> %12669, <2 x i64> %12675, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12678, <2 x i64>* %12401, align 16
  %12679 = shufflevector <2 x i64> %12669, <2 x i64> %12675, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12679, <2 x i64>* %12403, align 16
  %12680 = shufflevector <2 x i64> %12671, <2 x i64> %12677, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12680, <2 x i64>* %12405, align 16
  %12681 = shufflevector <2 x i64> %12671, <2 x i64> %12677, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12681, <2 x i64>* %12407, align 16
  %12682 = load <4 x i32>, <4 x i32>* %12035, align 16
  %12683 = load <4 x i32>, <4 x i32>* %12051, align 16
  %12684 = shufflevector <4 x i32> %12682, <4 x i32> %12683, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12685 = bitcast <4 x i32> %12684 to <2 x i64>
  %12686 = shufflevector <4 x i32> %12682, <4 x i32> %12683, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12687 = bitcast <4 x i32> %12686 to <2 x i64>
  %12688 = load <4 x i32>, <4 x i32>* %12067, align 16
  %12689 = load <4 x i32>, <4 x i32>* %12083, align 16
  %12690 = shufflevector <4 x i32> %12688, <4 x i32> %12689, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12691 = bitcast <4 x i32> %12690 to <2 x i64>
  %12692 = shufflevector <4 x i32> %12688, <4 x i32> %12689, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12693 = bitcast <4 x i32> %12692 to <2 x i64>
  %12694 = shufflevector <2 x i64> %12685, <2 x i64> %12691, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12694, <2 x i64>* %12421, align 16
  %12695 = shufflevector <2 x i64> %12685, <2 x i64> %12691, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12695, <2 x i64>* %12423, align 16
  %12696 = shufflevector <2 x i64> %12687, <2 x i64> %12693, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12696, <2 x i64>* %12425, align 16
  %12697 = shufflevector <2 x i64> %12687, <2 x i64> %12693, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12697, <2 x i64>* %12427, align 16
  %12698 = load <4 x i32>, <4 x i32>* %12039, align 16
  %12699 = load <4 x i32>, <4 x i32>* %12055, align 16
  %12700 = shufflevector <4 x i32> %12698, <4 x i32> %12699, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12701 = bitcast <4 x i32> %12700 to <2 x i64>
  %12702 = shufflevector <4 x i32> %12698, <4 x i32> %12699, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12703 = bitcast <4 x i32> %12702 to <2 x i64>
  %12704 = load <4 x i32>, <4 x i32>* %12071, align 16
  %12705 = load <4 x i32>, <4 x i32>* %12087, align 16
  %12706 = shufflevector <4 x i32> %12704, <4 x i32> %12705, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12707 = bitcast <4 x i32> %12706 to <2 x i64>
  %12708 = shufflevector <4 x i32> %12704, <4 x i32> %12705, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12709 = bitcast <4 x i32> %12708 to <2 x i64>
  %12710 = shufflevector <2 x i64> %12701, <2 x i64> %12707, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12710, <2 x i64>* %12441, align 16
  %12711 = shufflevector <2 x i64> %12701, <2 x i64> %12707, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12711, <2 x i64>* %12443, align 16
  %12712 = shufflevector <2 x i64> %12703, <2 x i64> %12709, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12712, <2 x i64>* %12445, align 16
  %12713 = shufflevector <2 x i64> %12703, <2 x i64> %12709, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12713, <2 x i64>* %12447, align 16
  %12714 = load <4 x i32>, <4 x i32>* %12115, align 16
  %12715 = load <4 x i32>, <4 x i32>* %12131, align 16
  %12716 = shufflevector <4 x i32> %12714, <4 x i32> %12715, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12717 = bitcast <4 x i32> %12716 to <2 x i64>
  %12718 = shufflevector <4 x i32> %12714, <4 x i32> %12715, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12719 = bitcast <4 x i32> %12718 to <2 x i64>
  %12720 = load <4 x i32>, <4 x i32>* %12147, align 16
  %12721 = load <4 x i32>, <4 x i32>* %12163, align 16
  %12722 = shufflevector <4 x i32> %12720, <4 x i32> %12721, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12723 = bitcast <4 x i32> %12722 to <2 x i64>
  %12724 = shufflevector <4 x i32> %12720, <4 x i32> %12721, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12725 = bitcast <4 x i32> %12724 to <2 x i64>
  %12726 = shufflevector <2 x i64> %12717, <2 x i64> %12723, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12726, <2 x i64>* %12461, align 16
  %12727 = shufflevector <2 x i64> %12717, <2 x i64> %12723, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12727, <2 x i64>* %12463, align 16
  %12728 = shufflevector <2 x i64> %12719, <2 x i64> %12725, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12728, <2 x i64>* %12465, align 16
  %12729 = shufflevector <2 x i64> %12719, <2 x i64> %12725, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12729, <2 x i64>* %12467, align 16
  %12730 = load <4 x i32>, <4 x i32>* %12119, align 16
  %12731 = load <4 x i32>, <4 x i32>* %12135, align 16
  %12732 = shufflevector <4 x i32> %12730, <4 x i32> %12731, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12733 = bitcast <4 x i32> %12732 to <2 x i64>
  %12734 = shufflevector <4 x i32> %12730, <4 x i32> %12731, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12735 = bitcast <4 x i32> %12734 to <2 x i64>
  %12736 = load <4 x i32>, <4 x i32>* %12151, align 16
  %12737 = load <4 x i32>, <4 x i32>* %12167, align 16
  %12738 = shufflevector <4 x i32> %12736, <4 x i32> %12737, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %12739 = bitcast <4 x i32> %12738 to <2 x i64>
  %12740 = shufflevector <4 x i32> %12736, <4 x i32> %12737, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %12741 = bitcast <4 x i32> %12740 to <2 x i64>
  %12742 = shufflevector <2 x i64> %12733, <2 x i64> %12739, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12742, <2 x i64>* %12481, align 16
  %12743 = shufflevector <2 x i64> %12733, <2 x i64> %12739, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12743, <2 x i64>* %12483, align 16
  %12744 = shufflevector <2 x i64> %12735, <2 x i64> %12741, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12744, <2 x i64>* %12485, align 16
  %12745 = shufflevector <2 x i64> %12735, <2 x i64> %12741, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12745, <2 x i64>* %12487, align 16
  %12746 = bitcast i32* %1 to <2 x i64>*
  %12747 = load <2 x i64>, <2 x i64>* %11833, align 16
  store <2 x i64> %12747, <2 x i64>* %12746, align 16
  %12748 = getelementptr inbounds i32, i32* %1, i64 4
  %12749 = bitcast i32* %12748 to <2 x i64>*
  %12750 = load <2 x i64>, <2 x i64>* %12229, align 16
  store <2 x i64> %12750, <2 x i64>* %12749, align 16
  %12751 = getelementptr inbounds i32, i32* %1, i64 8
  %12752 = bitcast i32* %12751 to <2 x i64>*
  %12753 = load <2 x i64>, <2 x i64>* %12341, align 16
  store <2 x i64> %12753, <2 x i64>* %12752, align 16
  %12754 = getelementptr inbounds i32, i32* %1, i64 12
  %12755 = bitcast i32* %12754 to <2 x i64>*
  %12756 = load <2 x i64>, <2 x i64>* %12381, align 16
  store <2 x i64> %12756, <2 x i64>* %12755, align 16
  %12757 = getelementptr inbounds i32, i32* %1, i64 16
  %12758 = bitcast i32* %12757 to <2 x i64>*
  %12759 = load <2 x i64>, <2 x i64>* %12196, align 16
  store <2 x i64> %12759, <2 x i64>* %12758, align 16
  %12760 = getelementptr inbounds i32, i32* %1, i64 20
  %12761 = bitcast i32* %12760 to <2 x i64>*
  %12762 = load <2 x i64>, <2 x i64>* %12231, align 16
  store <2 x i64> %12762, <2 x i64>* %12761, align 16
  %12763 = getelementptr inbounds i32, i32* %1, i64 24
  %12764 = bitcast i32* %12763 to <2 x i64>*
  %12765 = load <2 x i64>, <2 x i64>* %12343, align 16
  store <2 x i64> %12765, <2 x i64>* %12764, align 16
  %12766 = getelementptr inbounds i32, i32* %1, i64 28
  %12767 = bitcast i32* %12766 to <2 x i64>*
  %12768 = load <2 x i64>, <2 x i64>* %12383, align 16
  store <2 x i64> %12768, <2 x i64>* %12767, align 16
  %12769 = getelementptr inbounds i32, i32* %1, i64 32
  %12770 = bitcast i32* %12769 to <2 x i64>*
  %12771 = load <2 x i64>, <2 x i64>* %12198, align 16
  store <2 x i64> %12771, <2 x i64>* %12770, align 16
  %12772 = getelementptr inbounds i32, i32* %1, i64 36
  %12773 = bitcast i32* %12772 to <2 x i64>*
  %12774 = load <2 x i64>, <2 x i64>* %12233, align 16
  store <2 x i64> %12774, <2 x i64>* %12773, align 16
  %12775 = getelementptr inbounds i32, i32* %1, i64 40
  %12776 = bitcast i32* %12775 to <2 x i64>*
  %12777 = load <2 x i64>, <2 x i64>* %12345, align 16
  store <2 x i64> %12777, <2 x i64>* %12776, align 16
  %12778 = getelementptr inbounds i32, i32* %1, i64 44
  %12779 = bitcast i32* %12778 to <2 x i64>*
  %12780 = load <2 x i64>, <2 x i64>* %12385, align 16
  store <2 x i64> %12780, <2 x i64>* %12779, align 16
  %12781 = getelementptr inbounds i32, i32* %1, i64 48
  %12782 = bitcast i32* %12781 to <2 x i64>*
  %12783 = load <2 x i64>, <2 x i64>* %12200, align 16
  store <2 x i64> %12783, <2 x i64>* %12782, align 16
  %12784 = getelementptr inbounds i32, i32* %1, i64 52
  %12785 = bitcast i32* %12784 to <2 x i64>*
  %12786 = load <2 x i64>, <2 x i64>* %12235, align 16
  store <2 x i64> %12786, <2 x i64>* %12785, align 16
  %12787 = getelementptr inbounds i32, i32* %1, i64 56
  %12788 = bitcast i32* %12787 to <2 x i64>*
  %12789 = load <2 x i64>, <2 x i64>* %12347, align 16
  store <2 x i64> %12789, <2 x i64>* %12788, align 16
  %12790 = getelementptr inbounds i32, i32* %1, i64 60
  %12791 = bitcast i32* %12790 to <2 x i64>*
  %12792 = load <2 x i64>, <2 x i64>* %12387, align 16
  store <2 x i64> %12792, <2 x i64>* %12791, align 16
  %12793 = getelementptr inbounds i32, i32* %1, i64 64
  %12794 = bitcast i32* %12793 to <2 x i64>*
  %12795 = load <2 x i64>, <2 x i64>* %12210, align 16
  store <2 x i64> %12795, <2 x i64>* %12794, align 16
  %12796 = getelementptr inbounds i32, i32* %1, i64 68
  %12797 = bitcast i32* %12796 to <2 x i64>*
  %12798 = load <2 x i64>, <2 x i64>* %12249, align 16
  store <2 x i64> %12798, <2 x i64>* %12797, align 16
  %12799 = getelementptr inbounds i32, i32* %1, i64 72
  %12800 = bitcast i32* %12799 to <2 x i64>*
  %12801 = load <2 x i64>, <2 x i64>* %12361, align 16
  store <2 x i64> %12801, <2 x i64>* %12800, align 16
  %12802 = getelementptr inbounds i32, i32* %1, i64 76
  %12803 = bitcast i32* %12802 to <2 x i64>*
  %12804 = load <2 x i64>, <2 x i64>* %12401, align 16
  store <2 x i64> %12804, <2 x i64>* %12803, align 16
  %12805 = getelementptr inbounds i32, i32* %1, i64 80
  %12806 = bitcast i32* %12805 to <2 x i64>*
  %12807 = load <2 x i64>, <2 x i64>* %12212, align 16
  store <2 x i64> %12807, <2 x i64>* %12806, align 16
  %12808 = getelementptr inbounds i32, i32* %1, i64 84
  %12809 = bitcast i32* %12808 to <2 x i64>*
  %12810 = load <2 x i64>, <2 x i64>* %12251, align 16
  store <2 x i64> %12810, <2 x i64>* %12809, align 16
  %12811 = getelementptr inbounds i32, i32* %1, i64 88
  %12812 = bitcast i32* %12811 to <2 x i64>*
  %12813 = load <2 x i64>, <2 x i64>* %12363, align 16
  store <2 x i64> %12813, <2 x i64>* %12812, align 16
  %12814 = getelementptr inbounds i32, i32* %1, i64 92
  %12815 = bitcast i32* %12814 to <2 x i64>*
  %12816 = load <2 x i64>, <2 x i64>* %12403, align 16
  store <2 x i64> %12816, <2 x i64>* %12815, align 16
  %12817 = getelementptr inbounds i32, i32* %1, i64 96
  %12818 = bitcast i32* %12817 to <2 x i64>*
  %12819 = load <2 x i64>, <2 x i64>* %12214, align 16
  store <2 x i64> %12819, <2 x i64>* %12818, align 16
  %12820 = getelementptr inbounds i32, i32* %1, i64 100
  %12821 = bitcast i32* %12820 to <2 x i64>*
  %12822 = load <2 x i64>, <2 x i64>* %12253, align 16
  store <2 x i64> %12822, <2 x i64>* %12821, align 16
  %12823 = getelementptr inbounds i32, i32* %1, i64 104
  %12824 = bitcast i32* %12823 to <2 x i64>*
  %12825 = load <2 x i64>, <2 x i64>* %12365, align 16
  store <2 x i64> %12825, <2 x i64>* %12824, align 16
  %12826 = getelementptr inbounds i32, i32* %1, i64 108
  %12827 = bitcast i32* %12826 to <2 x i64>*
  %12828 = load <2 x i64>, <2 x i64>* %12405, align 16
  store <2 x i64> %12828, <2 x i64>* %12827, align 16
  %12829 = getelementptr inbounds i32, i32* %1, i64 112
  %12830 = bitcast i32* %12829 to <2 x i64>*
  %12831 = load <2 x i64>, <2 x i64>* %12216, align 16
  store <2 x i64> %12831, <2 x i64>* %12830, align 16
  %12832 = getelementptr inbounds i32, i32* %1, i64 116
  %12833 = bitcast i32* %12832 to <2 x i64>*
  %12834 = load <2 x i64>, <2 x i64>* %12255, align 16
  store <2 x i64> %12834, <2 x i64>* %12833, align 16
  %12835 = getelementptr inbounds i32, i32* %1, i64 120
  %12836 = bitcast i32* %12835 to <2 x i64>*
  %12837 = load <2 x i64>, <2 x i64>* %12367, align 16
  store <2 x i64> %12837, <2 x i64>* %12836, align 16
  %12838 = getelementptr inbounds i32, i32* %1, i64 124
  %12839 = bitcast i32* %12838 to <2 x i64>*
  %12840 = load <2 x i64>, <2 x i64>* %12407, align 16
  store <2 x i64> %12840, <2 x i64>* %12839, align 16
  %12841 = getelementptr inbounds i32, i32* %1, i64 128
  %12842 = bitcast i32* %12841 to <2 x i64>*
  %12843 = load <2 x i64>, <2 x i64>* %12265, align 16
  store <2 x i64> %12843, <2 x i64>* %12842, align 16
  %12844 = getelementptr inbounds i32, i32* %1, i64 132
  %12845 = bitcast i32* %12844 to <2 x i64>*
  %12846 = load <2 x i64>, <2 x i64>* %12301, align 16
  store <2 x i64> %12846, <2 x i64>* %12845, align 16
  %12847 = getelementptr inbounds i32, i32* %1, i64 136
  %12848 = bitcast i32* %12847 to <2 x i64>*
  %12849 = load <2 x i64>, <2 x i64>* %12421, align 16
  store <2 x i64> %12849, <2 x i64>* %12848, align 16
  %12850 = getelementptr inbounds i32, i32* %1, i64 140
  %12851 = bitcast i32* %12850 to <2 x i64>*
  %12852 = load <2 x i64>, <2 x i64>* %12461, align 16
  store <2 x i64> %12852, <2 x i64>* %12851, align 16
  %12853 = getelementptr inbounds i32, i32* %1, i64 144
  %12854 = bitcast i32* %12853 to <2 x i64>*
  %12855 = load <2 x i64>, <2 x i64>* %12267, align 16
  store <2 x i64> %12855, <2 x i64>* %12854, align 16
  %12856 = getelementptr inbounds i32, i32* %1, i64 148
  %12857 = bitcast i32* %12856 to <2 x i64>*
  %12858 = load <2 x i64>, <2 x i64>* %12303, align 16
  store <2 x i64> %12858, <2 x i64>* %12857, align 16
  %12859 = getelementptr inbounds i32, i32* %1, i64 152
  %12860 = bitcast i32* %12859 to <2 x i64>*
  %12861 = load <2 x i64>, <2 x i64>* %12423, align 16
  store <2 x i64> %12861, <2 x i64>* %12860, align 16
  %12862 = getelementptr inbounds i32, i32* %1, i64 156
  %12863 = bitcast i32* %12862 to <2 x i64>*
  %12864 = load <2 x i64>, <2 x i64>* %12463, align 16
  store <2 x i64> %12864, <2 x i64>* %12863, align 16
  %12865 = getelementptr inbounds i32, i32* %1, i64 160
  %12866 = bitcast i32* %12865 to <2 x i64>*
  %12867 = load <2 x i64>, <2 x i64>* %12269, align 16
  store <2 x i64> %12867, <2 x i64>* %12866, align 16
  %12868 = getelementptr inbounds i32, i32* %1, i64 164
  %12869 = bitcast i32* %12868 to <2 x i64>*
  %12870 = load <2 x i64>, <2 x i64>* %12305, align 16
  store <2 x i64> %12870, <2 x i64>* %12869, align 16
  %12871 = getelementptr inbounds i32, i32* %1, i64 168
  %12872 = bitcast i32* %12871 to <2 x i64>*
  %12873 = load <2 x i64>, <2 x i64>* %12425, align 16
  store <2 x i64> %12873, <2 x i64>* %12872, align 16
  %12874 = getelementptr inbounds i32, i32* %1, i64 172
  %12875 = bitcast i32* %12874 to <2 x i64>*
  %12876 = load <2 x i64>, <2 x i64>* %12465, align 16
  store <2 x i64> %12876, <2 x i64>* %12875, align 16
  %12877 = getelementptr inbounds i32, i32* %1, i64 176
  %12878 = bitcast i32* %12877 to <2 x i64>*
  %12879 = load <2 x i64>, <2 x i64>* %12271, align 16
  store <2 x i64> %12879, <2 x i64>* %12878, align 16
  %12880 = getelementptr inbounds i32, i32* %1, i64 180
  %12881 = bitcast i32* %12880 to <2 x i64>*
  %12882 = load <2 x i64>, <2 x i64>* %12307, align 16
  store <2 x i64> %12882, <2 x i64>* %12881, align 16
  %12883 = getelementptr inbounds i32, i32* %1, i64 184
  %12884 = bitcast i32* %12883 to <2 x i64>*
  %12885 = load <2 x i64>, <2 x i64>* %12427, align 16
  store <2 x i64> %12885, <2 x i64>* %12884, align 16
  %12886 = getelementptr inbounds i32, i32* %1, i64 188
  %12887 = bitcast i32* %12886 to <2 x i64>*
  %12888 = load <2 x i64>, <2 x i64>* %12467, align 16
  store <2 x i64> %12888, <2 x i64>* %12887, align 16
  %12889 = getelementptr inbounds i32, i32* %1, i64 192
  %12890 = bitcast i32* %12889 to <2 x i64>*
  %12891 = load <2 x i64>, <2 x i64>* %12281, align 16
  store <2 x i64> %12891, <2 x i64>* %12890, align 16
  %12892 = getelementptr inbounds i32, i32* %1, i64 196
  %12893 = bitcast i32* %12892 to <2 x i64>*
  %12894 = load <2 x i64>, <2 x i64>* %12321, align 16
  store <2 x i64> %12894, <2 x i64>* %12893, align 16
  %12895 = getelementptr inbounds i32, i32* %1, i64 200
  %12896 = bitcast i32* %12895 to <2 x i64>*
  %12897 = load <2 x i64>, <2 x i64>* %12441, align 16
  store <2 x i64> %12897, <2 x i64>* %12896, align 16
  %12898 = getelementptr inbounds i32, i32* %1, i64 204
  %12899 = bitcast i32* %12898 to <2 x i64>*
  %12900 = load <2 x i64>, <2 x i64>* %12481, align 16
  store <2 x i64> %12900, <2 x i64>* %12899, align 16
  %12901 = getelementptr inbounds i32, i32* %1, i64 208
  %12902 = bitcast i32* %12901 to <2 x i64>*
  %12903 = load <2 x i64>, <2 x i64>* %12283, align 16
  store <2 x i64> %12903, <2 x i64>* %12902, align 16
  %12904 = getelementptr inbounds i32, i32* %1, i64 212
  %12905 = bitcast i32* %12904 to <2 x i64>*
  %12906 = load <2 x i64>, <2 x i64>* %12323, align 16
  store <2 x i64> %12906, <2 x i64>* %12905, align 16
  %12907 = getelementptr inbounds i32, i32* %1, i64 216
  %12908 = bitcast i32* %12907 to <2 x i64>*
  %12909 = load <2 x i64>, <2 x i64>* %12443, align 16
  store <2 x i64> %12909, <2 x i64>* %12908, align 16
  %12910 = getelementptr inbounds i32, i32* %1, i64 220
  %12911 = bitcast i32* %12910 to <2 x i64>*
  %12912 = load <2 x i64>, <2 x i64>* %12483, align 16
  store <2 x i64> %12912, <2 x i64>* %12911, align 16
  %12913 = getelementptr inbounds i32, i32* %1, i64 224
  %12914 = bitcast i32* %12913 to <2 x i64>*
  %12915 = load <2 x i64>, <2 x i64>* %12285, align 16
  store <2 x i64> %12915, <2 x i64>* %12914, align 16
  %12916 = getelementptr inbounds i32, i32* %1, i64 228
  %12917 = bitcast i32* %12916 to <2 x i64>*
  %12918 = load <2 x i64>, <2 x i64>* %12325, align 16
  store <2 x i64> %12918, <2 x i64>* %12917, align 16
  %12919 = getelementptr inbounds i32, i32* %1, i64 232
  %12920 = bitcast i32* %12919 to <2 x i64>*
  %12921 = load <2 x i64>, <2 x i64>* %12445, align 16
  store <2 x i64> %12921, <2 x i64>* %12920, align 16
  %12922 = getelementptr inbounds i32, i32* %1, i64 236
  %12923 = bitcast i32* %12922 to <2 x i64>*
  %12924 = load <2 x i64>, <2 x i64>* %12485, align 16
  store <2 x i64> %12924, <2 x i64>* %12923, align 16
  %12925 = getelementptr inbounds i32, i32* %1, i64 240
  %12926 = bitcast i32* %12925 to <2 x i64>*
  %12927 = load <2 x i64>, <2 x i64>* %12287, align 16
  store <2 x i64> %12927, <2 x i64>* %12926, align 16
  %12928 = getelementptr inbounds i32, i32* %1, i64 244
  %12929 = bitcast i32* %12928 to <2 x i64>*
  %12930 = load <2 x i64>, <2 x i64>* %12327, align 16
  store <2 x i64> %12930, <2 x i64>* %12929, align 16
  %12931 = getelementptr inbounds i32, i32* %1, i64 248
  %12932 = bitcast i32* %12931 to <2 x i64>*
  %12933 = load <2 x i64>, <2 x i64>* %12447, align 16
  store <2 x i64> %12933, <2 x i64>* %12932, align 16
  %12934 = getelementptr inbounds i32, i32* %1, i64 252
  %12935 = bitcast i32* %12934 to <2 x i64>*
  %12936 = load <2 x i64>, <2 x i64>* %12487, align 16
  store <2 x i64> %12936, <2 x i64>* %12935, align 16
  br label %17357

12937:                                            ; preds = %5
  %12938 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %12939 = load i8, i8* %10, align 1
  %12940 = sext i8 %12939 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %12938, i32 %2, i32 0, i32 0, i32 %12940)
  %12941 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %12942 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  %12943 = sext i8 %12942 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %12938, <2 x i64>* nonnull %12941, i32 %12943, i32 4)
  %12944 = getelementptr inbounds i8, i8* %10, i64 1
  %12945 = load i8, i8* %12944, align 1
  %12946 = sext i8 %12945 to i32
  %12947 = sub nsw i32 0, %12946
  %12948 = xor i32 %12946, -1
  %12949 = shl i32 1, %12948
  %12950 = insertelement <4 x i32> undef, i32 %12949, i32 0
  %12951 = shufflevector <4 x i32> %12950, <4 x i32> undef, <4 x i32> zeroinitializer
  %12952 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %12953 = load <4 x i32>, <4 x i32>* %12952, align 16
  %12954 = add <4 x i32> %12951, %12953
  %12955 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %12956 = bitcast <2 x i64>* %12955 to <4 x i32>*
  %12957 = load <4 x i32>, <4 x i32>* %12956, align 16
  %12958 = add <4 x i32> %12951, %12957
  %12959 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %12960 = bitcast <2 x i64>* %12959 to <4 x i32>*
  %12961 = load <4 x i32>, <4 x i32>* %12960, align 16
  %12962 = add <4 x i32> %12951, %12961
  %12963 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %12964 = bitcast <2 x i64>* %12963 to <4 x i32>*
  %12965 = load <4 x i32>, <4 x i32>* %12964, align 16
  %12966 = add <4 x i32> %12965, %12951
  %12967 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %12968 = bitcast <2 x i64>* %12967 to <4 x i32>*
  %12969 = load <4 x i32>, <4 x i32>* %12968, align 16
  %12970 = add <4 x i32> %12969, %12951
  %12971 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %12972 = bitcast <2 x i64>* %12971 to <4 x i32>*
  %12973 = load <4 x i32>, <4 x i32>* %12972, align 16
  %12974 = add <4 x i32> %12973, %12951
  %12975 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %12976 = bitcast <2 x i64>* %12975 to <4 x i32>*
  %12977 = load <4 x i32>, <4 x i32>* %12976, align 16
  %12978 = add <4 x i32> %12977, %12951
  %12979 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %12980 = bitcast <2 x i64>* %12979 to <4 x i32>*
  %12981 = load <4 x i32>, <4 x i32>* %12980, align 16
  %12982 = add <4 x i32> %12981, %12951
  %12983 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %12984 = bitcast <2 x i64>* %12983 to <4 x i32>*
  %12985 = load <4 x i32>, <4 x i32>* %12984, align 16
  %12986 = add <4 x i32> %12985, %12951
  %12987 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %12988 = bitcast <2 x i64>* %12987 to <4 x i32>*
  %12989 = load <4 x i32>, <4 x i32>* %12988, align 16
  %12990 = add <4 x i32> %12989, %12951
  %12991 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %12992 = bitcast <2 x i64>* %12991 to <4 x i32>*
  %12993 = load <4 x i32>, <4 x i32>* %12992, align 16
  %12994 = add <4 x i32> %12993, %12951
  %12995 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %12996 = bitcast <2 x i64>* %12995 to <4 x i32>*
  %12997 = load <4 x i32>, <4 x i32>* %12996, align 16
  %12998 = add <4 x i32> %12997, %12951
  %12999 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %13000 = bitcast <2 x i64>* %12999 to <4 x i32>*
  %13001 = load <4 x i32>, <4 x i32>* %13000, align 16
  %13002 = add <4 x i32> %13001, %12951
  %13003 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %13004 = bitcast <2 x i64>* %13003 to <4 x i32>*
  %13005 = load <4 x i32>, <4 x i32>* %13004, align 16
  %13006 = add <4 x i32> %13005, %12951
  %13007 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %13008 = bitcast <2 x i64>* %13007 to <4 x i32>*
  %13009 = load <4 x i32>, <4 x i32>* %13008, align 16
  %13010 = add <4 x i32> %13009, %12951
  %13011 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %13012 = bitcast <2 x i64>* %13011 to <4 x i32>*
  %13013 = load <4 x i32>, <4 x i32>* %13012, align 16
  %13014 = add <4 x i32> %13013, %12951
  %13015 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12954, i32 %12947) #8
  store <4 x i32> %13015, <4 x i32>* %12952, align 16
  %13016 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12958, i32 %12947) #8
  store <4 x i32> %13016, <4 x i32>* %12956, align 16
  %13017 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12962, i32 %12947) #8
  store <4 x i32> %13017, <4 x i32>* %12960, align 16
  %13018 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12966, i32 %12947) #8
  store <4 x i32> %13018, <4 x i32>* %12964, align 16
  %13019 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12970, i32 %12947) #8
  store <4 x i32> %13019, <4 x i32>* %12968, align 16
  %13020 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12974, i32 %12947) #8
  store <4 x i32> %13020, <4 x i32>* %12972, align 16
  %13021 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12978, i32 %12947) #8
  store <4 x i32> %13021, <4 x i32>* %12976, align 16
  %13022 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12982, i32 %12947) #8
  store <4 x i32> %13022, <4 x i32>* %12980, align 16
  %13023 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12986, i32 %12947) #8
  store <4 x i32> %13023, <4 x i32>* %12984, align 16
  %13024 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12990, i32 %12947) #8
  store <4 x i32> %13024, <4 x i32>* %12988, align 16
  %13025 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12994, i32 %12947) #8
  store <4 x i32> %13025, <4 x i32>* %12992, align 16
  %13026 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %12998, i32 %12947) #8
  store <4 x i32> %13026, <4 x i32>* %12996, align 16
  %13027 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13002, i32 %12947) #8
  store <4 x i32> %13027, <4 x i32>* %13000, align 16
  %13028 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13006, i32 %12947) #8
  store <4 x i32> %13028, <4 x i32>* %13004, align 16
  %13029 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13010, i32 %12947) #8
  store <4 x i32> %13029, <4 x i32>* %13008, align 16
  %13030 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13014, i32 %12947) #8
  store <4 x i32> %13030, <4 x i32>* %13012, align 16
  %13031 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %13032 = bitcast <2 x i64>* %13031 to <4 x i32>*
  %13033 = load <4 x i32>, <4 x i32>* %13032, align 16
  %13034 = add <4 x i32> %13033, %12951
  %13035 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %13036 = bitcast <2 x i64>* %13035 to <4 x i32>*
  %13037 = load <4 x i32>, <4 x i32>* %13036, align 16
  %13038 = add <4 x i32> %13037, %12951
  %13039 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %13040 = bitcast <2 x i64>* %13039 to <4 x i32>*
  %13041 = load <4 x i32>, <4 x i32>* %13040, align 16
  %13042 = add <4 x i32> %13041, %12951
  %13043 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %13044 = bitcast <2 x i64>* %13043 to <4 x i32>*
  %13045 = load <4 x i32>, <4 x i32>* %13044, align 16
  %13046 = add <4 x i32> %13045, %12951
  %13047 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %13048 = bitcast <2 x i64>* %13047 to <4 x i32>*
  %13049 = load <4 x i32>, <4 x i32>* %13048, align 16
  %13050 = add <4 x i32> %13049, %12951
  %13051 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %13052 = bitcast <2 x i64>* %13051 to <4 x i32>*
  %13053 = load <4 x i32>, <4 x i32>* %13052, align 16
  %13054 = add <4 x i32> %13053, %12951
  %13055 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %13056 = bitcast <2 x i64>* %13055 to <4 x i32>*
  %13057 = load <4 x i32>, <4 x i32>* %13056, align 16
  %13058 = add <4 x i32> %13057, %12951
  %13059 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %13060 = bitcast <2 x i64>* %13059 to <4 x i32>*
  %13061 = load <4 x i32>, <4 x i32>* %13060, align 16
  %13062 = add <4 x i32> %13061, %12951
  %13063 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %13064 = bitcast <2 x i64>* %13063 to <4 x i32>*
  %13065 = load <4 x i32>, <4 x i32>* %13064, align 16
  %13066 = add <4 x i32> %13065, %12951
  %13067 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %13068 = bitcast <2 x i64>* %13067 to <4 x i32>*
  %13069 = load <4 x i32>, <4 x i32>* %13068, align 16
  %13070 = add <4 x i32> %13069, %12951
  %13071 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %13072 = bitcast <2 x i64>* %13071 to <4 x i32>*
  %13073 = load <4 x i32>, <4 x i32>* %13072, align 16
  %13074 = add <4 x i32> %13073, %12951
  %13075 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %13076 = bitcast <2 x i64>* %13075 to <4 x i32>*
  %13077 = load <4 x i32>, <4 x i32>* %13076, align 16
  %13078 = add <4 x i32> %13077, %12951
  %13079 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %13080 = bitcast <2 x i64>* %13079 to <4 x i32>*
  %13081 = load <4 x i32>, <4 x i32>* %13080, align 16
  %13082 = add <4 x i32> %13081, %12951
  %13083 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %13084 = bitcast <2 x i64>* %13083 to <4 x i32>*
  %13085 = load <4 x i32>, <4 x i32>* %13084, align 16
  %13086 = add <4 x i32> %13085, %12951
  %13087 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %13088 = bitcast <2 x i64>* %13087 to <4 x i32>*
  %13089 = load <4 x i32>, <4 x i32>* %13088, align 16
  %13090 = add <4 x i32> %13089, %12951
  %13091 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %13092 = bitcast <2 x i64>* %13091 to <4 x i32>*
  %13093 = load <4 x i32>, <4 x i32>* %13092, align 16
  %13094 = add <4 x i32> %13093, %12951
  %13095 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13034, i32 %12947) #8
  store <4 x i32> %13095, <4 x i32>* %13032, align 16
  %13096 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13038, i32 %12947) #8
  store <4 x i32> %13096, <4 x i32>* %13036, align 16
  %13097 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13042, i32 %12947) #8
  store <4 x i32> %13097, <4 x i32>* %13040, align 16
  %13098 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13046, i32 %12947) #8
  store <4 x i32> %13098, <4 x i32>* %13044, align 16
  %13099 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13050, i32 %12947) #8
  store <4 x i32> %13099, <4 x i32>* %13048, align 16
  %13100 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13054, i32 %12947) #8
  store <4 x i32> %13100, <4 x i32>* %13052, align 16
  %13101 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13058, i32 %12947) #8
  store <4 x i32> %13101, <4 x i32>* %13056, align 16
  %13102 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13062, i32 %12947) #8
  store <4 x i32> %13102, <4 x i32>* %13060, align 16
  %13103 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13066, i32 %12947) #8
  store <4 x i32> %13103, <4 x i32>* %13064, align 16
  %13104 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13070, i32 %12947) #8
  store <4 x i32> %13104, <4 x i32>* %13068, align 16
  %13105 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13074, i32 %12947) #8
  store <4 x i32> %13105, <4 x i32>* %13072, align 16
  %13106 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13078, i32 %12947) #8
  store <4 x i32> %13106, <4 x i32>* %13076, align 16
  %13107 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13082, i32 %12947) #8
  store <4 x i32> %13107, <4 x i32>* %13080, align 16
  %13108 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13086, i32 %12947) #8
  store <4 x i32> %13108, <4 x i32>* %13084, align 16
  %13109 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13090, i32 %12947) #8
  store <4 x i32> %13109, <4 x i32>* %13088, align 16
  %13110 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13094, i32 %12947) #8
  store <4 x i32> %13110, <4 x i32>* %13092, align 16
  %13111 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %13112 = bitcast <2 x i64>* %13111 to <4 x i32>*
  %13113 = load <4 x i32>, <4 x i32>* %13112, align 16
  %13114 = add <4 x i32> %13113, %12951
  %13115 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %13116 = bitcast <2 x i64>* %13115 to <4 x i32>*
  %13117 = load <4 x i32>, <4 x i32>* %13116, align 16
  %13118 = add <4 x i32> %13117, %12951
  %13119 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %13120 = bitcast <2 x i64>* %13119 to <4 x i32>*
  %13121 = load <4 x i32>, <4 x i32>* %13120, align 16
  %13122 = add <4 x i32> %13121, %12951
  %13123 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %13124 = bitcast <2 x i64>* %13123 to <4 x i32>*
  %13125 = load <4 x i32>, <4 x i32>* %13124, align 16
  %13126 = add <4 x i32> %13125, %12951
  %13127 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %13128 = bitcast <2 x i64>* %13127 to <4 x i32>*
  %13129 = load <4 x i32>, <4 x i32>* %13128, align 16
  %13130 = add <4 x i32> %13129, %12951
  %13131 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %13132 = bitcast <2 x i64>* %13131 to <4 x i32>*
  %13133 = load <4 x i32>, <4 x i32>* %13132, align 16
  %13134 = add <4 x i32> %13133, %12951
  %13135 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %13136 = bitcast <2 x i64>* %13135 to <4 x i32>*
  %13137 = load <4 x i32>, <4 x i32>* %13136, align 16
  %13138 = add <4 x i32> %13137, %12951
  %13139 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %13140 = bitcast <2 x i64>* %13139 to <4 x i32>*
  %13141 = load <4 x i32>, <4 x i32>* %13140, align 16
  %13142 = add <4 x i32> %13141, %12951
  %13143 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %13144 = bitcast <2 x i64>* %13143 to <4 x i32>*
  %13145 = load <4 x i32>, <4 x i32>* %13144, align 16
  %13146 = add <4 x i32> %13145, %12951
  %13147 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %13148 = bitcast <2 x i64>* %13147 to <4 x i32>*
  %13149 = load <4 x i32>, <4 x i32>* %13148, align 16
  %13150 = add <4 x i32> %13149, %12951
  %13151 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %13152 = bitcast <2 x i64>* %13151 to <4 x i32>*
  %13153 = load <4 x i32>, <4 x i32>* %13152, align 16
  %13154 = add <4 x i32> %13153, %12951
  %13155 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %13156 = bitcast <2 x i64>* %13155 to <4 x i32>*
  %13157 = load <4 x i32>, <4 x i32>* %13156, align 16
  %13158 = add <4 x i32> %13157, %12951
  %13159 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %13160 = bitcast <2 x i64>* %13159 to <4 x i32>*
  %13161 = load <4 x i32>, <4 x i32>* %13160, align 16
  %13162 = add <4 x i32> %13161, %12951
  %13163 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %13164 = bitcast <2 x i64>* %13163 to <4 x i32>*
  %13165 = load <4 x i32>, <4 x i32>* %13164, align 16
  %13166 = add <4 x i32> %13165, %12951
  %13167 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %13168 = bitcast <2 x i64>* %13167 to <4 x i32>*
  %13169 = load <4 x i32>, <4 x i32>* %13168, align 16
  %13170 = add <4 x i32> %13169, %12951
  %13171 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %13172 = bitcast <2 x i64>* %13171 to <4 x i32>*
  %13173 = load <4 x i32>, <4 x i32>* %13172, align 16
  %13174 = add <4 x i32> %13173, %12951
  %13175 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13114, i32 %12947) #8
  store <4 x i32> %13175, <4 x i32>* %13112, align 16
  %13176 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13118, i32 %12947) #8
  store <4 x i32> %13176, <4 x i32>* %13116, align 16
  %13177 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13122, i32 %12947) #8
  store <4 x i32> %13177, <4 x i32>* %13120, align 16
  %13178 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13126, i32 %12947) #8
  store <4 x i32> %13178, <4 x i32>* %13124, align 16
  %13179 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13130, i32 %12947) #8
  store <4 x i32> %13179, <4 x i32>* %13128, align 16
  %13180 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13134, i32 %12947) #8
  store <4 x i32> %13180, <4 x i32>* %13132, align 16
  %13181 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13138, i32 %12947) #8
  store <4 x i32> %13181, <4 x i32>* %13136, align 16
  %13182 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13142, i32 %12947) #8
  store <4 x i32> %13182, <4 x i32>* %13140, align 16
  %13183 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13146, i32 %12947) #8
  store <4 x i32> %13183, <4 x i32>* %13144, align 16
  %13184 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13150, i32 %12947) #8
  store <4 x i32> %13184, <4 x i32>* %13148, align 16
  %13185 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13154, i32 %12947) #8
  store <4 x i32> %13185, <4 x i32>* %13152, align 16
  %13186 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13158, i32 %12947) #8
  store <4 x i32> %13186, <4 x i32>* %13156, align 16
  %13187 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13162, i32 %12947) #8
  store <4 x i32> %13187, <4 x i32>* %13160, align 16
  %13188 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13166, i32 %12947) #8
  store <4 x i32> %13188, <4 x i32>* %13164, align 16
  %13189 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13170, i32 %12947) #8
  store <4 x i32> %13189, <4 x i32>* %13168, align 16
  %13190 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13174, i32 %12947) #8
  store <4 x i32> %13190, <4 x i32>* %13172, align 16
  %13191 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %13192 = bitcast <2 x i64>* %13191 to <4 x i32>*
  %13193 = load <4 x i32>, <4 x i32>* %13192, align 16
  %13194 = add <4 x i32> %13193, %12951
  %13195 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %13196 = bitcast <2 x i64>* %13195 to <4 x i32>*
  %13197 = load <4 x i32>, <4 x i32>* %13196, align 16
  %13198 = add <4 x i32> %13197, %12951
  %13199 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %13200 = bitcast <2 x i64>* %13199 to <4 x i32>*
  %13201 = load <4 x i32>, <4 x i32>* %13200, align 16
  %13202 = add <4 x i32> %13201, %12951
  %13203 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %13204 = bitcast <2 x i64>* %13203 to <4 x i32>*
  %13205 = load <4 x i32>, <4 x i32>* %13204, align 16
  %13206 = add <4 x i32> %13205, %12951
  %13207 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %13208 = bitcast <2 x i64>* %13207 to <4 x i32>*
  %13209 = load <4 x i32>, <4 x i32>* %13208, align 16
  %13210 = add <4 x i32> %13209, %12951
  %13211 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %13212 = bitcast <2 x i64>* %13211 to <4 x i32>*
  %13213 = load <4 x i32>, <4 x i32>* %13212, align 16
  %13214 = add <4 x i32> %13213, %12951
  %13215 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %13216 = bitcast <2 x i64>* %13215 to <4 x i32>*
  %13217 = load <4 x i32>, <4 x i32>* %13216, align 16
  %13218 = add <4 x i32> %13217, %12951
  %13219 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %13220 = bitcast <2 x i64>* %13219 to <4 x i32>*
  %13221 = load <4 x i32>, <4 x i32>* %13220, align 16
  %13222 = add <4 x i32> %13221, %12951
  %13223 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %13224 = bitcast <2 x i64>* %13223 to <4 x i32>*
  %13225 = load <4 x i32>, <4 x i32>* %13224, align 16
  %13226 = add <4 x i32> %13225, %12951
  %13227 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %13228 = bitcast <2 x i64>* %13227 to <4 x i32>*
  %13229 = load <4 x i32>, <4 x i32>* %13228, align 16
  %13230 = add <4 x i32> %13229, %12951
  %13231 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %13232 = bitcast <2 x i64>* %13231 to <4 x i32>*
  %13233 = load <4 x i32>, <4 x i32>* %13232, align 16
  %13234 = add <4 x i32> %13233, %12951
  %13235 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %13236 = bitcast <2 x i64>* %13235 to <4 x i32>*
  %13237 = load <4 x i32>, <4 x i32>* %13236, align 16
  %13238 = add <4 x i32> %13237, %12951
  %13239 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %13240 = bitcast <2 x i64>* %13239 to <4 x i32>*
  %13241 = load <4 x i32>, <4 x i32>* %13240, align 16
  %13242 = add <4 x i32> %13241, %12951
  %13243 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %13244 = bitcast <2 x i64>* %13243 to <4 x i32>*
  %13245 = load <4 x i32>, <4 x i32>* %13244, align 16
  %13246 = add <4 x i32> %13245, %12951
  %13247 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %13248 = bitcast <2 x i64>* %13247 to <4 x i32>*
  %13249 = load <4 x i32>, <4 x i32>* %13248, align 16
  %13250 = add <4 x i32> %13249, %12951
  %13251 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %13252 = bitcast <2 x i64>* %13251 to <4 x i32>*
  %13253 = load <4 x i32>, <4 x i32>* %13252, align 16
  %13254 = add <4 x i32> %13253, %12951
  %13255 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13194, i32 %12947) #8
  store <4 x i32> %13255, <4 x i32>* %13192, align 16
  %13256 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13198, i32 %12947) #8
  store <4 x i32> %13256, <4 x i32>* %13196, align 16
  %13257 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13202, i32 %12947) #8
  store <4 x i32> %13257, <4 x i32>* %13200, align 16
  %13258 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13206, i32 %12947) #8
  store <4 x i32> %13258, <4 x i32>* %13204, align 16
  %13259 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13210, i32 %12947) #8
  store <4 x i32> %13259, <4 x i32>* %13208, align 16
  %13260 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13214, i32 %12947) #8
  store <4 x i32> %13260, <4 x i32>* %13212, align 16
  %13261 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13218, i32 %12947) #8
  store <4 x i32> %13261, <4 x i32>* %13216, align 16
  %13262 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13222, i32 %12947) #8
  store <4 x i32> %13262, <4 x i32>* %13220, align 16
  %13263 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13226, i32 %12947) #8
  store <4 x i32> %13263, <4 x i32>* %13224, align 16
  %13264 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13230, i32 %12947) #8
  store <4 x i32> %13264, <4 x i32>* %13228, align 16
  %13265 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13234, i32 %12947) #8
  store <4 x i32> %13265, <4 x i32>* %13232, align 16
  %13266 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13238, i32 %12947) #8
  store <4 x i32> %13266, <4 x i32>* %13236, align 16
  %13267 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13242, i32 %12947) #8
  store <4 x i32> %13267, <4 x i32>* %13240, align 16
  %13268 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13246, i32 %12947) #8
  store <4 x i32> %13268, <4 x i32>* %13244, align 16
  %13269 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13250, i32 %12947) #8
  store <4 x i32> %13269, <4 x i32>* %13248, align 16
  %13270 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %13254, i32 %12947) #8
  store <4 x i32> %13270, <4 x i32>* %13252, align 16
  %13271 = shufflevector <4 x i32> %13015, <4 x i32> %13019, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13272 = bitcast <4 x i32> %13271 to <2 x i64>
  %13273 = shufflevector <4 x i32> %13015, <4 x i32> %13019, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13274 = bitcast <4 x i32> %13273 to <2 x i64>
  %13275 = shufflevector <4 x i32> %13023, <4 x i32> %13027, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13276 = bitcast <4 x i32> %13275 to <2 x i64>
  %13277 = shufflevector <4 x i32> %13023, <4 x i32> %13027, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13278 = bitcast <4 x i32> %13277 to <2 x i64>
  %13279 = shufflevector <2 x i64> %13272, <2 x i64> %13276, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13279, <2 x i64>* %12938, align 16
  %13280 = shufflevector <2 x i64> %13272, <2 x i64> %13276, <2 x i32> <i32 1, i32 3>
  %13281 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %13280, <2 x i64>* %13281, align 16
  %13282 = shufflevector <2 x i64> %13274, <2 x i64> %13278, <2 x i32> <i32 0, i32 2>
  %13283 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %13282, <2 x i64>* %13283, align 16
  %13284 = shufflevector <2 x i64> %13274, <2 x i64> %13278, <2 x i32> <i32 1, i32 3>
  %13285 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %13284, <2 x i64>* %13285, align 16
  %13286 = shufflevector <4 x i32> %13016, <4 x i32> %13020, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13287 = bitcast <4 x i32> %13286 to <2 x i64>
  %13288 = shufflevector <4 x i32> %13016, <4 x i32> %13020, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13289 = bitcast <4 x i32> %13288 to <2 x i64>
  %13290 = shufflevector <4 x i32> %13024, <4 x i32> %13028, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13291 = bitcast <4 x i32> %13290 to <2 x i64>
  %13292 = shufflevector <4 x i32> %13024, <4 x i32> %13028, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13293 = bitcast <4 x i32> %13292 to <2 x i64>
  %13294 = shufflevector <2 x i64> %13287, <2 x i64> %13291, <2 x i32> <i32 0, i32 2>
  %13295 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %13294, <2 x i64>* %13295, align 16
  %13296 = shufflevector <2 x i64> %13287, <2 x i64> %13291, <2 x i32> <i32 1, i32 3>
  %13297 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %13296, <2 x i64>* %13297, align 16
  %13298 = shufflevector <2 x i64> %13289, <2 x i64> %13293, <2 x i32> <i32 0, i32 2>
  %13299 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %13298, <2 x i64>* %13299, align 16
  %13300 = shufflevector <2 x i64> %13289, <2 x i64> %13293, <2 x i32> <i32 1, i32 3>
  %13301 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %13300, <2 x i64>* %13301, align 16
  %13302 = load <4 x i32>, <4 x i32>* %13048, align 16
  %13303 = shufflevector <4 x i32> %13095, <4 x i32> %13302, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13304 = bitcast <4 x i32> %13303 to <2 x i64>
  %13305 = shufflevector <4 x i32> %13095, <4 x i32> %13302, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13306 = bitcast <4 x i32> %13305 to <2 x i64>
  %13307 = load <4 x i32>, <4 x i32>* %13064, align 16
  %13308 = load <4 x i32>, <4 x i32>* %13080, align 16
  %13309 = shufflevector <4 x i32> %13307, <4 x i32> %13308, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13310 = bitcast <4 x i32> %13309 to <2 x i64>
  %13311 = shufflevector <4 x i32> %13307, <4 x i32> %13308, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13312 = bitcast <4 x i32> %13311 to <2 x i64>
  %13313 = shufflevector <2 x i64> %13304, <2 x i64> %13310, <2 x i32> <i32 0, i32 2>
  %13314 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %13313, <2 x i64>* %13314, align 16
  %13315 = shufflevector <2 x i64> %13304, <2 x i64> %13310, <2 x i32> <i32 1, i32 3>
  %13316 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %13315, <2 x i64>* %13316, align 16
  %13317 = shufflevector <2 x i64> %13306, <2 x i64> %13312, <2 x i32> <i32 0, i32 2>
  %13318 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %13317, <2 x i64>* %13318, align 16
  %13319 = shufflevector <2 x i64> %13306, <2 x i64> %13312, <2 x i32> <i32 1, i32 3>
  %13320 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %13319, <2 x i64>* %13320, align 16
  %13321 = load <4 x i32>, <4 x i32>* %13036, align 16
  %13322 = load <4 x i32>, <4 x i32>* %13052, align 16
  %13323 = shufflevector <4 x i32> %13321, <4 x i32> %13322, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13324 = bitcast <4 x i32> %13323 to <2 x i64>
  %13325 = shufflevector <4 x i32> %13321, <4 x i32> %13322, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13326 = bitcast <4 x i32> %13325 to <2 x i64>
  %13327 = load <4 x i32>, <4 x i32>* %13068, align 16
  %13328 = load <4 x i32>, <4 x i32>* %13084, align 16
  %13329 = shufflevector <4 x i32> %13327, <4 x i32> %13328, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13330 = bitcast <4 x i32> %13329 to <2 x i64>
  %13331 = shufflevector <4 x i32> %13327, <4 x i32> %13328, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13332 = bitcast <4 x i32> %13331 to <2 x i64>
  %13333 = shufflevector <2 x i64> %13324, <2 x i64> %13330, <2 x i32> <i32 0, i32 2>
  %13334 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %13333, <2 x i64>* %13334, align 16
  %13335 = shufflevector <2 x i64> %13324, <2 x i64> %13330, <2 x i32> <i32 1, i32 3>
  %13336 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %13335, <2 x i64>* %13336, align 16
  %13337 = shufflevector <2 x i64> %13326, <2 x i64> %13332, <2 x i32> <i32 0, i32 2>
  %13338 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %13337, <2 x i64>* %13338, align 16
  %13339 = shufflevector <2 x i64> %13326, <2 x i64> %13332, <2 x i32> <i32 1, i32 3>
  %13340 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %13339, <2 x i64>* %13340, align 16
  %13341 = shufflevector <4 x i32> %13017, <4 x i32> %13021, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13342 = bitcast <4 x i32> %13341 to <2 x i64>
  %13343 = shufflevector <4 x i32> %13017, <4 x i32> %13021, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13344 = bitcast <4 x i32> %13343 to <2 x i64>
  %13345 = shufflevector <4 x i32> %13025, <4 x i32> %13029, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13346 = bitcast <4 x i32> %13345 to <2 x i64>
  %13347 = shufflevector <4 x i32> %13025, <4 x i32> %13029, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13348 = bitcast <4 x i32> %13347 to <2 x i64>
  %13349 = shufflevector <2 x i64> %13342, <2 x i64> %13346, <2 x i32> <i32 0, i32 2>
  %13350 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %13349, <2 x i64>* %13350, align 16
  %13351 = shufflevector <2 x i64> %13342, <2 x i64> %13346, <2 x i32> <i32 1, i32 3>
  %13352 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %13351, <2 x i64>* %13352, align 16
  %13353 = shufflevector <2 x i64> %13344, <2 x i64> %13348, <2 x i32> <i32 0, i32 2>
  %13354 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %13353, <2 x i64>* %13354, align 16
  %13355 = shufflevector <2 x i64> %13344, <2 x i64> %13348, <2 x i32> <i32 1, i32 3>
  %13356 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %13355, <2 x i64>* %13356, align 16
  %13357 = shufflevector <4 x i32> %13018, <4 x i32> %13022, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13358 = bitcast <4 x i32> %13357 to <2 x i64>
  %13359 = shufflevector <4 x i32> %13018, <4 x i32> %13022, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13360 = bitcast <4 x i32> %13359 to <2 x i64>
  %13361 = shufflevector <4 x i32> %13026, <4 x i32> %13030, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13362 = bitcast <4 x i32> %13361 to <2 x i64>
  %13363 = shufflevector <4 x i32> %13026, <4 x i32> %13030, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13364 = bitcast <4 x i32> %13363 to <2 x i64>
  %13365 = shufflevector <2 x i64> %13358, <2 x i64> %13362, <2 x i32> <i32 0, i32 2>
  %13366 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %13365, <2 x i64>* %13366, align 16
  %13367 = shufflevector <2 x i64> %13358, <2 x i64> %13362, <2 x i32> <i32 1, i32 3>
  %13368 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %13367, <2 x i64>* %13368, align 16
  %13369 = shufflevector <2 x i64> %13360, <2 x i64> %13364, <2 x i32> <i32 0, i32 2>
  %13370 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %13369, <2 x i64>* %13370, align 16
  %13371 = shufflevector <2 x i64> %13360, <2 x i64> %13364, <2 x i32> <i32 1, i32 3>
  %13372 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %13371, <2 x i64>* %13372, align 16
  %13373 = load <4 x i32>, <4 x i32>* %13040, align 16
  %13374 = load <4 x i32>, <4 x i32>* %13056, align 16
  %13375 = shufflevector <4 x i32> %13373, <4 x i32> %13374, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13376 = bitcast <4 x i32> %13375 to <2 x i64>
  %13377 = shufflevector <4 x i32> %13373, <4 x i32> %13374, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13378 = bitcast <4 x i32> %13377 to <2 x i64>
  %13379 = load <4 x i32>, <4 x i32>* %13072, align 16
  %13380 = load <4 x i32>, <4 x i32>* %13088, align 16
  %13381 = shufflevector <4 x i32> %13379, <4 x i32> %13380, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13382 = bitcast <4 x i32> %13381 to <2 x i64>
  %13383 = shufflevector <4 x i32> %13379, <4 x i32> %13380, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13384 = bitcast <4 x i32> %13383 to <2 x i64>
  %13385 = shufflevector <2 x i64> %13376, <2 x i64> %13382, <2 x i32> <i32 0, i32 2>
  %13386 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %13385, <2 x i64>* %13386, align 16
  %13387 = shufflevector <2 x i64> %13376, <2 x i64> %13382, <2 x i32> <i32 1, i32 3>
  %13388 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %13387, <2 x i64>* %13388, align 16
  %13389 = shufflevector <2 x i64> %13378, <2 x i64> %13384, <2 x i32> <i32 0, i32 2>
  %13390 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %13389, <2 x i64>* %13390, align 16
  %13391 = shufflevector <2 x i64> %13378, <2 x i64> %13384, <2 x i32> <i32 1, i32 3>
  %13392 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %13391, <2 x i64>* %13392, align 16
  %13393 = load <4 x i32>, <4 x i32>* %13044, align 16
  %13394 = load <4 x i32>, <4 x i32>* %13060, align 16
  %13395 = shufflevector <4 x i32> %13393, <4 x i32> %13394, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13396 = bitcast <4 x i32> %13395 to <2 x i64>
  %13397 = shufflevector <4 x i32> %13393, <4 x i32> %13394, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13398 = bitcast <4 x i32> %13397 to <2 x i64>
  %13399 = load <4 x i32>, <4 x i32>* %13076, align 16
  %13400 = load <4 x i32>, <4 x i32>* %13092, align 16
  %13401 = shufflevector <4 x i32> %13399, <4 x i32> %13400, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13402 = bitcast <4 x i32> %13401 to <2 x i64>
  %13403 = shufflevector <4 x i32> %13399, <4 x i32> %13400, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13404 = bitcast <4 x i32> %13403 to <2 x i64>
  %13405 = shufflevector <2 x i64> %13396, <2 x i64> %13402, <2 x i32> <i32 0, i32 2>
  %13406 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %13405, <2 x i64>* %13406, align 16
  %13407 = shufflevector <2 x i64> %13396, <2 x i64> %13402, <2 x i32> <i32 1, i32 3>
  %13408 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %13407, <2 x i64>* %13408, align 16
  %13409 = shufflevector <2 x i64> %13398, <2 x i64> %13404, <2 x i32> <i32 0, i32 2>
  %13410 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %13409, <2 x i64>* %13410, align 16
  %13411 = shufflevector <2 x i64> %13398, <2 x i64> %13404, <2 x i32> <i32 1, i32 3>
  %13412 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %13411, <2 x i64>* %13412, align 16
  %13413 = load <4 x i32>, <4 x i32>* %13112, align 16
  %13414 = load <4 x i32>, <4 x i32>* %13128, align 16
  %13415 = shufflevector <4 x i32> %13413, <4 x i32> %13414, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13416 = bitcast <4 x i32> %13415 to <2 x i64>
  %13417 = shufflevector <4 x i32> %13413, <4 x i32> %13414, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13418 = bitcast <4 x i32> %13417 to <2 x i64>
  %13419 = load <4 x i32>, <4 x i32>* %13144, align 16
  %13420 = load <4 x i32>, <4 x i32>* %13160, align 16
  %13421 = shufflevector <4 x i32> %13419, <4 x i32> %13420, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13422 = bitcast <4 x i32> %13421 to <2 x i64>
  %13423 = shufflevector <4 x i32> %13419, <4 x i32> %13420, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13424 = bitcast <4 x i32> %13423 to <2 x i64>
  %13425 = shufflevector <2 x i64> %13416, <2 x i64> %13422, <2 x i32> <i32 0, i32 2>
  %13426 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %13425, <2 x i64>* %13426, align 16
  %13427 = shufflevector <2 x i64> %13416, <2 x i64> %13422, <2 x i32> <i32 1, i32 3>
  %13428 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %13427, <2 x i64>* %13428, align 16
  %13429 = shufflevector <2 x i64> %13418, <2 x i64> %13424, <2 x i32> <i32 0, i32 2>
  %13430 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %13429, <2 x i64>* %13430, align 16
  %13431 = shufflevector <2 x i64> %13418, <2 x i64> %13424, <2 x i32> <i32 1, i32 3>
  %13432 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %13431, <2 x i64>* %13432, align 16
  %13433 = load <4 x i32>, <4 x i32>* %13116, align 16
  %13434 = load <4 x i32>, <4 x i32>* %13132, align 16
  %13435 = shufflevector <4 x i32> %13433, <4 x i32> %13434, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13436 = bitcast <4 x i32> %13435 to <2 x i64>
  %13437 = shufflevector <4 x i32> %13433, <4 x i32> %13434, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13438 = bitcast <4 x i32> %13437 to <2 x i64>
  %13439 = load <4 x i32>, <4 x i32>* %13148, align 16
  %13440 = load <4 x i32>, <4 x i32>* %13164, align 16
  %13441 = shufflevector <4 x i32> %13439, <4 x i32> %13440, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13442 = bitcast <4 x i32> %13441 to <2 x i64>
  %13443 = shufflevector <4 x i32> %13439, <4 x i32> %13440, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13444 = bitcast <4 x i32> %13443 to <2 x i64>
  %13445 = shufflevector <2 x i64> %13436, <2 x i64> %13442, <2 x i32> <i32 0, i32 2>
  %13446 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %13445, <2 x i64>* %13446, align 16
  %13447 = shufflevector <2 x i64> %13436, <2 x i64> %13442, <2 x i32> <i32 1, i32 3>
  %13448 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %13447, <2 x i64>* %13448, align 16
  %13449 = shufflevector <2 x i64> %13438, <2 x i64> %13444, <2 x i32> <i32 0, i32 2>
  %13450 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %13449, <2 x i64>* %13450, align 16
  %13451 = shufflevector <2 x i64> %13438, <2 x i64> %13444, <2 x i32> <i32 1, i32 3>
  %13452 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %13451, <2 x i64>* %13452, align 16
  %13453 = load <4 x i32>, <4 x i32>* %13192, align 16
  %13454 = load <4 x i32>, <4 x i32>* %13208, align 16
  %13455 = shufflevector <4 x i32> %13453, <4 x i32> %13454, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13456 = bitcast <4 x i32> %13455 to <2 x i64>
  %13457 = shufflevector <4 x i32> %13453, <4 x i32> %13454, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13458 = bitcast <4 x i32> %13457 to <2 x i64>
  %13459 = load <4 x i32>, <4 x i32>* %13224, align 16
  %13460 = load <4 x i32>, <4 x i32>* %13240, align 16
  %13461 = shufflevector <4 x i32> %13459, <4 x i32> %13460, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13462 = bitcast <4 x i32> %13461 to <2 x i64>
  %13463 = shufflevector <4 x i32> %13459, <4 x i32> %13460, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13464 = bitcast <4 x i32> %13463 to <2 x i64>
  %13465 = shufflevector <2 x i64> %13456, <2 x i64> %13462, <2 x i32> <i32 0, i32 2>
  %13466 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %13465, <2 x i64>* %13466, align 16
  %13467 = shufflevector <2 x i64> %13456, <2 x i64> %13462, <2 x i32> <i32 1, i32 3>
  %13468 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %13467, <2 x i64>* %13468, align 16
  %13469 = shufflevector <2 x i64> %13458, <2 x i64> %13464, <2 x i32> <i32 0, i32 2>
  %13470 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %13469, <2 x i64>* %13470, align 16
  %13471 = shufflevector <2 x i64> %13458, <2 x i64> %13464, <2 x i32> <i32 1, i32 3>
  %13472 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %13471, <2 x i64>* %13472, align 16
  %13473 = load <4 x i32>, <4 x i32>* %13196, align 16
  %13474 = load <4 x i32>, <4 x i32>* %13212, align 16
  %13475 = shufflevector <4 x i32> %13473, <4 x i32> %13474, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13476 = bitcast <4 x i32> %13475 to <2 x i64>
  %13477 = shufflevector <4 x i32> %13473, <4 x i32> %13474, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13478 = bitcast <4 x i32> %13477 to <2 x i64>
  %13479 = load <4 x i32>, <4 x i32>* %13228, align 16
  %13480 = load <4 x i32>, <4 x i32>* %13244, align 16
  %13481 = shufflevector <4 x i32> %13479, <4 x i32> %13480, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13482 = bitcast <4 x i32> %13481 to <2 x i64>
  %13483 = shufflevector <4 x i32> %13479, <4 x i32> %13480, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13484 = bitcast <4 x i32> %13483 to <2 x i64>
  %13485 = shufflevector <2 x i64> %13476, <2 x i64> %13482, <2 x i32> <i32 0, i32 2>
  %13486 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %13485, <2 x i64>* %13486, align 16
  %13487 = shufflevector <2 x i64> %13476, <2 x i64> %13482, <2 x i32> <i32 1, i32 3>
  %13488 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %13487, <2 x i64>* %13488, align 16
  %13489 = shufflevector <2 x i64> %13478, <2 x i64> %13484, <2 x i32> <i32 0, i32 2>
  %13490 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %13489, <2 x i64>* %13490, align 16
  %13491 = shufflevector <2 x i64> %13478, <2 x i64> %13484, <2 x i32> <i32 1, i32 3>
  %13492 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %13491, <2 x i64>* %13492, align 16
  %13493 = load <4 x i32>, <4 x i32>* %13120, align 16
  %13494 = load <4 x i32>, <4 x i32>* %13136, align 16
  %13495 = shufflevector <4 x i32> %13493, <4 x i32> %13494, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13496 = bitcast <4 x i32> %13495 to <2 x i64>
  %13497 = shufflevector <4 x i32> %13493, <4 x i32> %13494, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13498 = bitcast <4 x i32> %13497 to <2 x i64>
  %13499 = load <4 x i32>, <4 x i32>* %13152, align 16
  %13500 = load <4 x i32>, <4 x i32>* %13168, align 16
  %13501 = shufflevector <4 x i32> %13499, <4 x i32> %13500, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13502 = bitcast <4 x i32> %13501 to <2 x i64>
  %13503 = shufflevector <4 x i32> %13499, <4 x i32> %13500, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13504 = bitcast <4 x i32> %13503 to <2 x i64>
  %13505 = shufflevector <2 x i64> %13496, <2 x i64> %13502, <2 x i32> <i32 0, i32 2>
  %13506 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %13505, <2 x i64>* %13506, align 16
  %13507 = shufflevector <2 x i64> %13496, <2 x i64> %13502, <2 x i32> <i32 1, i32 3>
  %13508 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %13507, <2 x i64>* %13508, align 16
  %13509 = shufflevector <2 x i64> %13498, <2 x i64> %13504, <2 x i32> <i32 0, i32 2>
  %13510 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %13509, <2 x i64>* %13510, align 16
  %13511 = shufflevector <2 x i64> %13498, <2 x i64> %13504, <2 x i32> <i32 1, i32 3>
  %13512 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %13511, <2 x i64>* %13512, align 16
  %13513 = load <4 x i32>, <4 x i32>* %13124, align 16
  %13514 = load <4 x i32>, <4 x i32>* %13140, align 16
  %13515 = shufflevector <4 x i32> %13513, <4 x i32> %13514, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13516 = bitcast <4 x i32> %13515 to <2 x i64>
  %13517 = shufflevector <4 x i32> %13513, <4 x i32> %13514, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13518 = bitcast <4 x i32> %13517 to <2 x i64>
  %13519 = load <4 x i32>, <4 x i32>* %13156, align 16
  %13520 = load <4 x i32>, <4 x i32>* %13172, align 16
  %13521 = shufflevector <4 x i32> %13519, <4 x i32> %13520, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13522 = bitcast <4 x i32> %13521 to <2 x i64>
  %13523 = shufflevector <4 x i32> %13519, <4 x i32> %13520, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13524 = bitcast <4 x i32> %13523 to <2 x i64>
  %13525 = shufflevector <2 x i64> %13516, <2 x i64> %13522, <2 x i32> <i32 0, i32 2>
  %13526 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %13525, <2 x i64>* %13526, align 16
  %13527 = shufflevector <2 x i64> %13516, <2 x i64> %13522, <2 x i32> <i32 1, i32 3>
  %13528 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %13527, <2 x i64>* %13528, align 16
  %13529 = shufflevector <2 x i64> %13518, <2 x i64> %13524, <2 x i32> <i32 0, i32 2>
  %13530 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %13529, <2 x i64>* %13530, align 16
  %13531 = shufflevector <2 x i64> %13518, <2 x i64> %13524, <2 x i32> <i32 1, i32 3>
  %13532 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %13531, <2 x i64>* %13532, align 16
  %13533 = load <4 x i32>, <4 x i32>* %13200, align 16
  %13534 = load <4 x i32>, <4 x i32>* %13216, align 16
  %13535 = shufflevector <4 x i32> %13533, <4 x i32> %13534, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13536 = bitcast <4 x i32> %13535 to <2 x i64>
  %13537 = shufflevector <4 x i32> %13533, <4 x i32> %13534, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13538 = bitcast <4 x i32> %13537 to <2 x i64>
  %13539 = load <4 x i32>, <4 x i32>* %13232, align 16
  %13540 = load <4 x i32>, <4 x i32>* %13248, align 16
  %13541 = shufflevector <4 x i32> %13539, <4 x i32> %13540, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13542 = bitcast <4 x i32> %13541 to <2 x i64>
  %13543 = shufflevector <4 x i32> %13539, <4 x i32> %13540, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13544 = bitcast <4 x i32> %13543 to <2 x i64>
  %13545 = shufflevector <2 x i64> %13536, <2 x i64> %13542, <2 x i32> <i32 0, i32 2>
  %13546 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %13545, <2 x i64>* %13546, align 16
  %13547 = shufflevector <2 x i64> %13536, <2 x i64> %13542, <2 x i32> <i32 1, i32 3>
  %13548 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %13547, <2 x i64>* %13548, align 16
  %13549 = shufflevector <2 x i64> %13538, <2 x i64> %13544, <2 x i32> <i32 0, i32 2>
  %13550 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %13549, <2 x i64>* %13550, align 16
  %13551 = shufflevector <2 x i64> %13538, <2 x i64> %13544, <2 x i32> <i32 1, i32 3>
  %13552 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %13551, <2 x i64>* %13552, align 16
  %13553 = load <4 x i32>, <4 x i32>* %13204, align 16
  %13554 = load <4 x i32>, <4 x i32>* %13220, align 16
  %13555 = shufflevector <4 x i32> %13553, <4 x i32> %13554, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13556 = bitcast <4 x i32> %13555 to <2 x i64>
  %13557 = shufflevector <4 x i32> %13553, <4 x i32> %13554, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13558 = bitcast <4 x i32> %13557 to <2 x i64>
  %13559 = load <4 x i32>, <4 x i32>* %13236, align 16
  %13560 = load <4 x i32>, <4 x i32>* %13252, align 16
  %13561 = shufflevector <4 x i32> %13559, <4 x i32> %13560, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13562 = bitcast <4 x i32> %13561 to <2 x i64>
  %13563 = shufflevector <4 x i32> %13559, <4 x i32> %13560, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13564 = bitcast <4 x i32> %13563 to <2 x i64>
  %13565 = shufflevector <2 x i64> %13556, <2 x i64> %13562, <2 x i32> <i32 0, i32 2>
  %13566 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %13565, <2 x i64>* %13566, align 16
  %13567 = shufflevector <2 x i64> %13556, <2 x i64> %13562, <2 x i32> <i32 1, i32 3>
  %13568 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %13567, <2 x i64>* %13568, align 16
  %13569 = shufflevector <2 x i64> %13558, <2 x i64> %13564, <2 x i32> <i32 0, i32 2>
  %13570 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %13569, <2 x i64>* %13570, align 16
  %13571 = shufflevector <2 x i64> %13558, <2 x i64> %13564, <2 x i32> <i32 1, i32 3>
  %13572 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %13571, <2 x i64>* %13572, align 16
  br label %13573

13573:                                            ; preds = %13573, %12937
  %13574 = phi i64 [ 0, %12937 ], [ %13592, %13573 ]
  %13575 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %13574
  %13576 = bitcast <2 x i64>* %13575 to <4 x i32>*
  %13577 = load <4 x i32>, <4 x i32>* %13576, align 16
  %13578 = mul <4 x i32> %13577, <i32 11586, i32 11586, i32 11586, i32 11586>
  %13579 = add <4 x i32> %13578, <i32 2048, i32 2048, i32 2048, i32 2048>
  %13580 = ashr <4 x i32> %13579, <i32 12, i32 12, i32 12, i32 12>
  %13581 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %13574
  %13582 = bitcast <2 x i64>* %13581 to <4 x i32>*
  store <4 x i32> %13580, <4 x i32>* %13582, align 16
  %13583 = or i64 %13574, 1
  %13584 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %13583
  %13585 = bitcast <2 x i64>* %13584 to <4 x i32>*
  %13586 = load <4 x i32>, <4 x i32>* %13585, align 16
  %13587 = mul <4 x i32> %13586, <i32 11586, i32 11586, i32 11586, i32 11586>
  %13588 = add <4 x i32> %13587, <i32 2048, i32 2048, i32 2048, i32 2048>
  %13589 = ashr <4 x i32> %13588, <i32 12, i32 12, i32 12, i32 12>
  %13590 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %13583
  %13591 = bitcast <2 x i64>* %13590 to <4 x i32>*
  store <4 x i32> %13589, <4 x i32>* %13591, align 16
  %13592 = add nuw nsw i64 %13574, 2
  %13593 = icmp eq i64 %13592, 64
  br i1 %13593, label %13594, label %13573

13594:                                            ; preds = %13573
  %13595 = load <4 x i32>, <4 x i32>* %12952, align 16
  %13596 = load <4 x i32>, <4 x i32>* %12968, align 16
  %13597 = shufflevector <4 x i32> %13595, <4 x i32> %13596, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13598 = bitcast <4 x i32> %13597 to <2 x i64>
  %13599 = shufflevector <4 x i32> %13595, <4 x i32> %13596, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13600 = bitcast <4 x i32> %13599 to <2 x i64>
  %13601 = load <4 x i32>, <4 x i32>* %12984, align 16
  %13602 = load <4 x i32>, <4 x i32>* %13000, align 16
  %13603 = shufflevector <4 x i32> %13601, <4 x i32> %13602, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13604 = bitcast <4 x i32> %13603 to <2 x i64>
  %13605 = shufflevector <4 x i32> %13601, <4 x i32> %13602, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13606 = bitcast <4 x i32> %13605 to <2 x i64>
  %13607 = shufflevector <2 x i64> %13598, <2 x i64> %13604, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13607, <2 x i64>* %12938, align 16
  %13608 = shufflevector <2 x i64> %13598, <2 x i64> %13604, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13608, <2 x i64>* %13281, align 16
  %13609 = shufflevector <2 x i64> %13600, <2 x i64> %13606, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13609, <2 x i64>* %13283, align 16
  %13610 = shufflevector <2 x i64> %13600, <2 x i64> %13606, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13610, <2 x i64>* %13285, align 16
  %13611 = load <4 x i32>, <4 x i32>* %12956, align 16
  %13612 = load <4 x i32>, <4 x i32>* %12972, align 16
  %13613 = shufflevector <4 x i32> %13611, <4 x i32> %13612, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13614 = bitcast <4 x i32> %13613 to <2 x i64>
  %13615 = shufflevector <4 x i32> %13611, <4 x i32> %13612, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13616 = bitcast <4 x i32> %13615 to <2 x i64>
  %13617 = load <4 x i32>, <4 x i32>* %12988, align 16
  %13618 = load <4 x i32>, <4 x i32>* %13004, align 16
  %13619 = shufflevector <4 x i32> %13617, <4 x i32> %13618, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13620 = bitcast <4 x i32> %13619 to <2 x i64>
  %13621 = shufflevector <4 x i32> %13617, <4 x i32> %13618, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13622 = bitcast <4 x i32> %13621 to <2 x i64>
  %13623 = shufflevector <2 x i64> %13614, <2 x i64> %13620, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13623, <2 x i64>* %13295, align 16
  %13624 = shufflevector <2 x i64> %13614, <2 x i64> %13620, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13624, <2 x i64>* %13297, align 16
  %13625 = shufflevector <2 x i64> %13616, <2 x i64> %13622, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13625, <2 x i64>* %13299, align 16
  %13626 = shufflevector <2 x i64> %13616, <2 x i64> %13622, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13626, <2 x i64>* %13301, align 16
  %13627 = load <4 x i32>, <4 x i32>* %13032, align 16
  %13628 = load <4 x i32>, <4 x i32>* %13048, align 16
  %13629 = shufflevector <4 x i32> %13627, <4 x i32> %13628, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13630 = bitcast <4 x i32> %13629 to <2 x i64>
  %13631 = shufflevector <4 x i32> %13627, <4 x i32> %13628, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13632 = bitcast <4 x i32> %13631 to <2 x i64>
  %13633 = load <4 x i32>, <4 x i32>* %13064, align 16
  %13634 = load <4 x i32>, <4 x i32>* %13080, align 16
  %13635 = shufflevector <4 x i32> %13633, <4 x i32> %13634, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13636 = bitcast <4 x i32> %13635 to <2 x i64>
  %13637 = shufflevector <4 x i32> %13633, <4 x i32> %13634, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13638 = bitcast <4 x i32> %13637 to <2 x i64>
  %13639 = shufflevector <2 x i64> %13630, <2 x i64> %13636, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13639, <2 x i64>* %13314, align 16
  %13640 = shufflevector <2 x i64> %13630, <2 x i64> %13636, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13640, <2 x i64>* %13316, align 16
  %13641 = shufflevector <2 x i64> %13632, <2 x i64> %13638, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13641, <2 x i64>* %13318, align 16
  %13642 = shufflevector <2 x i64> %13632, <2 x i64> %13638, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13642, <2 x i64>* %13320, align 16
  %13643 = load <4 x i32>, <4 x i32>* %13036, align 16
  %13644 = load <4 x i32>, <4 x i32>* %13052, align 16
  %13645 = shufflevector <4 x i32> %13643, <4 x i32> %13644, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13646 = bitcast <4 x i32> %13645 to <2 x i64>
  %13647 = shufflevector <4 x i32> %13643, <4 x i32> %13644, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13648 = bitcast <4 x i32> %13647 to <2 x i64>
  %13649 = load <4 x i32>, <4 x i32>* %13068, align 16
  %13650 = load <4 x i32>, <4 x i32>* %13084, align 16
  %13651 = shufflevector <4 x i32> %13649, <4 x i32> %13650, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13652 = bitcast <4 x i32> %13651 to <2 x i64>
  %13653 = shufflevector <4 x i32> %13649, <4 x i32> %13650, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13654 = bitcast <4 x i32> %13653 to <2 x i64>
  %13655 = shufflevector <2 x i64> %13646, <2 x i64> %13652, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13655, <2 x i64>* %13334, align 16
  %13656 = shufflevector <2 x i64> %13646, <2 x i64> %13652, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13656, <2 x i64>* %13336, align 16
  %13657 = shufflevector <2 x i64> %13648, <2 x i64> %13654, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13657, <2 x i64>* %13338, align 16
  %13658 = shufflevector <2 x i64> %13648, <2 x i64> %13654, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13658, <2 x i64>* %13340, align 16
  %13659 = load <4 x i32>, <4 x i32>* %12960, align 16
  %13660 = load <4 x i32>, <4 x i32>* %12976, align 16
  %13661 = shufflevector <4 x i32> %13659, <4 x i32> %13660, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13662 = bitcast <4 x i32> %13661 to <2 x i64>
  %13663 = shufflevector <4 x i32> %13659, <4 x i32> %13660, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13664 = bitcast <4 x i32> %13663 to <2 x i64>
  %13665 = load <4 x i32>, <4 x i32>* %12992, align 16
  %13666 = load <4 x i32>, <4 x i32>* %13008, align 16
  %13667 = shufflevector <4 x i32> %13665, <4 x i32> %13666, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13668 = bitcast <4 x i32> %13667 to <2 x i64>
  %13669 = shufflevector <4 x i32> %13665, <4 x i32> %13666, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13670 = bitcast <4 x i32> %13669 to <2 x i64>
  %13671 = shufflevector <2 x i64> %13662, <2 x i64> %13668, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13671, <2 x i64>* %13350, align 16
  %13672 = shufflevector <2 x i64> %13662, <2 x i64> %13668, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13672, <2 x i64>* %13352, align 16
  %13673 = shufflevector <2 x i64> %13664, <2 x i64> %13670, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13673, <2 x i64>* %13354, align 16
  %13674 = shufflevector <2 x i64> %13664, <2 x i64> %13670, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13674, <2 x i64>* %13356, align 16
  %13675 = load <4 x i32>, <4 x i32>* %12964, align 16
  %13676 = load <4 x i32>, <4 x i32>* %12980, align 16
  %13677 = shufflevector <4 x i32> %13675, <4 x i32> %13676, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13678 = bitcast <4 x i32> %13677 to <2 x i64>
  %13679 = shufflevector <4 x i32> %13675, <4 x i32> %13676, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13680 = bitcast <4 x i32> %13679 to <2 x i64>
  %13681 = load <4 x i32>, <4 x i32>* %12996, align 16
  %13682 = load <4 x i32>, <4 x i32>* %13012, align 16
  %13683 = shufflevector <4 x i32> %13681, <4 x i32> %13682, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13684 = bitcast <4 x i32> %13683 to <2 x i64>
  %13685 = shufflevector <4 x i32> %13681, <4 x i32> %13682, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13686 = bitcast <4 x i32> %13685 to <2 x i64>
  %13687 = shufflevector <2 x i64> %13678, <2 x i64> %13684, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13687, <2 x i64>* %13366, align 16
  %13688 = shufflevector <2 x i64> %13678, <2 x i64> %13684, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13688, <2 x i64>* %13368, align 16
  %13689 = shufflevector <2 x i64> %13680, <2 x i64> %13686, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13689, <2 x i64>* %13370, align 16
  %13690 = shufflevector <2 x i64> %13680, <2 x i64> %13686, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13690, <2 x i64>* %13372, align 16
  %13691 = load <4 x i32>, <4 x i32>* %13040, align 16
  %13692 = load <4 x i32>, <4 x i32>* %13056, align 16
  %13693 = shufflevector <4 x i32> %13691, <4 x i32> %13692, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13694 = bitcast <4 x i32> %13693 to <2 x i64>
  %13695 = shufflevector <4 x i32> %13691, <4 x i32> %13692, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13696 = bitcast <4 x i32> %13695 to <2 x i64>
  %13697 = load <4 x i32>, <4 x i32>* %13072, align 16
  %13698 = load <4 x i32>, <4 x i32>* %13088, align 16
  %13699 = shufflevector <4 x i32> %13697, <4 x i32> %13698, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13700 = bitcast <4 x i32> %13699 to <2 x i64>
  %13701 = shufflevector <4 x i32> %13697, <4 x i32> %13698, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13702 = bitcast <4 x i32> %13701 to <2 x i64>
  %13703 = shufflevector <2 x i64> %13694, <2 x i64> %13700, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13703, <2 x i64>* %13386, align 16
  %13704 = shufflevector <2 x i64> %13694, <2 x i64> %13700, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13704, <2 x i64>* %13388, align 16
  %13705 = shufflevector <2 x i64> %13696, <2 x i64> %13702, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13705, <2 x i64>* %13390, align 16
  %13706 = shufflevector <2 x i64> %13696, <2 x i64> %13702, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13706, <2 x i64>* %13392, align 16
  %13707 = load <4 x i32>, <4 x i32>* %13044, align 16
  %13708 = load <4 x i32>, <4 x i32>* %13060, align 16
  %13709 = shufflevector <4 x i32> %13707, <4 x i32> %13708, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13710 = bitcast <4 x i32> %13709 to <2 x i64>
  %13711 = shufflevector <4 x i32> %13707, <4 x i32> %13708, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13712 = bitcast <4 x i32> %13711 to <2 x i64>
  %13713 = load <4 x i32>, <4 x i32>* %13076, align 16
  %13714 = load <4 x i32>, <4 x i32>* %13092, align 16
  %13715 = shufflevector <4 x i32> %13713, <4 x i32> %13714, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13716 = bitcast <4 x i32> %13715 to <2 x i64>
  %13717 = shufflevector <4 x i32> %13713, <4 x i32> %13714, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13718 = bitcast <4 x i32> %13717 to <2 x i64>
  %13719 = shufflevector <2 x i64> %13710, <2 x i64> %13716, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13719, <2 x i64>* %13406, align 16
  %13720 = shufflevector <2 x i64> %13710, <2 x i64> %13716, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13720, <2 x i64>* %13408, align 16
  %13721 = shufflevector <2 x i64> %13712, <2 x i64> %13718, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13721, <2 x i64>* %13410, align 16
  %13722 = shufflevector <2 x i64> %13712, <2 x i64> %13718, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13722, <2 x i64>* %13412, align 16
  %13723 = load <4 x i32>, <4 x i32>* %13112, align 16
  %13724 = load <4 x i32>, <4 x i32>* %13128, align 16
  %13725 = shufflevector <4 x i32> %13723, <4 x i32> %13724, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13726 = bitcast <4 x i32> %13725 to <2 x i64>
  %13727 = shufflevector <4 x i32> %13723, <4 x i32> %13724, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13728 = bitcast <4 x i32> %13727 to <2 x i64>
  %13729 = load <4 x i32>, <4 x i32>* %13144, align 16
  %13730 = load <4 x i32>, <4 x i32>* %13160, align 16
  %13731 = shufflevector <4 x i32> %13729, <4 x i32> %13730, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13732 = bitcast <4 x i32> %13731 to <2 x i64>
  %13733 = shufflevector <4 x i32> %13729, <4 x i32> %13730, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13734 = bitcast <4 x i32> %13733 to <2 x i64>
  %13735 = shufflevector <2 x i64> %13726, <2 x i64> %13732, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13735, <2 x i64>* %13426, align 16
  %13736 = shufflevector <2 x i64> %13726, <2 x i64> %13732, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13736, <2 x i64>* %13428, align 16
  %13737 = shufflevector <2 x i64> %13728, <2 x i64> %13734, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13737, <2 x i64>* %13430, align 16
  %13738 = shufflevector <2 x i64> %13728, <2 x i64> %13734, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13738, <2 x i64>* %13432, align 16
  %13739 = load <4 x i32>, <4 x i32>* %13116, align 16
  %13740 = load <4 x i32>, <4 x i32>* %13132, align 16
  %13741 = shufflevector <4 x i32> %13739, <4 x i32> %13740, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13742 = bitcast <4 x i32> %13741 to <2 x i64>
  %13743 = shufflevector <4 x i32> %13739, <4 x i32> %13740, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13744 = bitcast <4 x i32> %13743 to <2 x i64>
  %13745 = load <4 x i32>, <4 x i32>* %13148, align 16
  %13746 = load <4 x i32>, <4 x i32>* %13164, align 16
  %13747 = shufflevector <4 x i32> %13745, <4 x i32> %13746, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13748 = bitcast <4 x i32> %13747 to <2 x i64>
  %13749 = shufflevector <4 x i32> %13745, <4 x i32> %13746, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13750 = bitcast <4 x i32> %13749 to <2 x i64>
  %13751 = shufflevector <2 x i64> %13742, <2 x i64> %13748, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13751, <2 x i64>* %13446, align 16
  %13752 = shufflevector <2 x i64> %13742, <2 x i64> %13748, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13752, <2 x i64>* %13448, align 16
  %13753 = shufflevector <2 x i64> %13744, <2 x i64> %13750, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13753, <2 x i64>* %13450, align 16
  %13754 = shufflevector <2 x i64> %13744, <2 x i64> %13750, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13754, <2 x i64>* %13452, align 16
  %13755 = load <4 x i32>, <4 x i32>* %13192, align 16
  %13756 = load <4 x i32>, <4 x i32>* %13208, align 16
  %13757 = shufflevector <4 x i32> %13755, <4 x i32> %13756, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13758 = bitcast <4 x i32> %13757 to <2 x i64>
  %13759 = shufflevector <4 x i32> %13755, <4 x i32> %13756, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13760 = bitcast <4 x i32> %13759 to <2 x i64>
  %13761 = load <4 x i32>, <4 x i32>* %13224, align 16
  %13762 = load <4 x i32>, <4 x i32>* %13240, align 16
  %13763 = shufflevector <4 x i32> %13761, <4 x i32> %13762, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13764 = bitcast <4 x i32> %13763 to <2 x i64>
  %13765 = shufflevector <4 x i32> %13761, <4 x i32> %13762, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13766 = bitcast <4 x i32> %13765 to <2 x i64>
  %13767 = shufflevector <2 x i64> %13758, <2 x i64> %13764, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13767, <2 x i64>* %13466, align 16
  %13768 = shufflevector <2 x i64> %13758, <2 x i64> %13764, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13768, <2 x i64>* %13468, align 16
  %13769 = shufflevector <2 x i64> %13760, <2 x i64> %13766, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13769, <2 x i64>* %13470, align 16
  %13770 = shufflevector <2 x i64> %13760, <2 x i64> %13766, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13770, <2 x i64>* %13472, align 16
  %13771 = load <4 x i32>, <4 x i32>* %13196, align 16
  %13772 = load <4 x i32>, <4 x i32>* %13212, align 16
  %13773 = shufflevector <4 x i32> %13771, <4 x i32> %13772, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13774 = bitcast <4 x i32> %13773 to <2 x i64>
  %13775 = shufflevector <4 x i32> %13771, <4 x i32> %13772, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13776 = bitcast <4 x i32> %13775 to <2 x i64>
  %13777 = load <4 x i32>, <4 x i32>* %13228, align 16
  %13778 = load <4 x i32>, <4 x i32>* %13244, align 16
  %13779 = shufflevector <4 x i32> %13777, <4 x i32> %13778, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13780 = bitcast <4 x i32> %13779 to <2 x i64>
  %13781 = shufflevector <4 x i32> %13777, <4 x i32> %13778, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13782 = bitcast <4 x i32> %13781 to <2 x i64>
  %13783 = shufflevector <2 x i64> %13774, <2 x i64> %13780, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13783, <2 x i64>* %13486, align 16
  %13784 = shufflevector <2 x i64> %13774, <2 x i64> %13780, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13784, <2 x i64>* %13488, align 16
  %13785 = shufflevector <2 x i64> %13776, <2 x i64> %13782, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13785, <2 x i64>* %13490, align 16
  %13786 = shufflevector <2 x i64> %13776, <2 x i64> %13782, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13786, <2 x i64>* %13492, align 16
  %13787 = load <4 x i32>, <4 x i32>* %13120, align 16
  %13788 = load <4 x i32>, <4 x i32>* %13136, align 16
  %13789 = shufflevector <4 x i32> %13787, <4 x i32> %13788, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13790 = bitcast <4 x i32> %13789 to <2 x i64>
  %13791 = shufflevector <4 x i32> %13787, <4 x i32> %13788, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13792 = bitcast <4 x i32> %13791 to <2 x i64>
  %13793 = load <4 x i32>, <4 x i32>* %13152, align 16
  %13794 = load <4 x i32>, <4 x i32>* %13168, align 16
  %13795 = shufflevector <4 x i32> %13793, <4 x i32> %13794, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13796 = bitcast <4 x i32> %13795 to <2 x i64>
  %13797 = shufflevector <4 x i32> %13793, <4 x i32> %13794, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13798 = bitcast <4 x i32> %13797 to <2 x i64>
  %13799 = shufflevector <2 x i64> %13790, <2 x i64> %13796, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13799, <2 x i64>* %13506, align 16
  %13800 = shufflevector <2 x i64> %13790, <2 x i64> %13796, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13800, <2 x i64>* %13508, align 16
  %13801 = shufflevector <2 x i64> %13792, <2 x i64> %13798, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13801, <2 x i64>* %13510, align 16
  %13802 = shufflevector <2 x i64> %13792, <2 x i64> %13798, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13802, <2 x i64>* %13512, align 16
  %13803 = load <4 x i32>, <4 x i32>* %13124, align 16
  %13804 = load <4 x i32>, <4 x i32>* %13140, align 16
  %13805 = shufflevector <4 x i32> %13803, <4 x i32> %13804, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13806 = bitcast <4 x i32> %13805 to <2 x i64>
  %13807 = shufflevector <4 x i32> %13803, <4 x i32> %13804, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13808 = bitcast <4 x i32> %13807 to <2 x i64>
  %13809 = load <4 x i32>, <4 x i32>* %13156, align 16
  %13810 = load <4 x i32>, <4 x i32>* %13172, align 16
  %13811 = shufflevector <4 x i32> %13809, <4 x i32> %13810, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13812 = bitcast <4 x i32> %13811 to <2 x i64>
  %13813 = shufflevector <4 x i32> %13809, <4 x i32> %13810, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13814 = bitcast <4 x i32> %13813 to <2 x i64>
  %13815 = shufflevector <2 x i64> %13806, <2 x i64> %13812, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13815, <2 x i64>* %13526, align 16
  %13816 = shufflevector <2 x i64> %13806, <2 x i64> %13812, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13816, <2 x i64>* %13528, align 16
  %13817 = shufflevector <2 x i64> %13808, <2 x i64> %13814, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13817, <2 x i64>* %13530, align 16
  %13818 = shufflevector <2 x i64> %13808, <2 x i64> %13814, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13818, <2 x i64>* %13532, align 16
  %13819 = load <4 x i32>, <4 x i32>* %13200, align 16
  %13820 = load <4 x i32>, <4 x i32>* %13216, align 16
  %13821 = shufflevector <4 x i32> %13819, <4 x i32> %13820, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13822 = bitcast <4 x i32> %13821 to <2 x i64>
  %13823 = shufflevector <4 x i32> %13819, <4 x i32> %13820, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13824 = bitcast <4 x i32> %13823 to <2 x i64>
  %13825 = load <4 x i32>, <4 x i32>* %13232, align 16
  %13826 = load <4 x i32>, <4 x i32>* %13248, align 16
  %13827 = shufflevector <4 x i32> %13825, <4 x i32> %13826, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13828 = bitcast <4 x i32> %13827 to <2 x i64>
  %13829 = shufflevector <4 x i32> %13825, <4 x i32> %13826, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13830 = bitcast <4 x i32> %13829 to <2 x i64>
  %13831 = shufflevector <2 x i64> %13822, <2 x i64> %13828, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13831, <2 x i64>* %13546, align 16
  %13832 = shufflevector <2 x i64> %13822, <2 x i64> %13828, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13832, <2 x i64>* %13548, align 16
  %13833 = shufflevector <2 x i64> %13824, <2 x i64> %13830, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13833, <2 x i64>* %13550, align 16
  %13834 = shufflevector <2 x i64> %13824, <2 x i64> %13830, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13834, <2 x i64>* %13552, align 16
  %13835 = load <4 x i32>, <4 x i32>* %13204, align 16
  %13836 = load <4 x i32>, <4 x i32>* %13220, align 16
  %13837 = shufflevector <4 x i32> %13835, <4 x i32> %13836, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13838 = bitcast <4 x i32> %13837 to <2 x i64>
  %13839 = shufflevector <4 x i32> %13835, <4 x i32> %13836, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13840 = bitcast <4 x i32> %13839 to <2 x i64>
  %13841 = load <4 x i32>, <4 x i32>* %13236, align 16
  %13842 = load <4 x i32>, <4 x i32>* %13252, align 16
  %13843 = shufflevector <4 x i32> %13841, <4 x i32> %13842, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %13844 = bitcast <4 x i32> %13843 to <2 x i64>
  %13845 = shufflevector <4 x i32> %13841, <4 x i32> %13842, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %13846 = bitcast <4 x i32> %13845 to <2 x i64>
  %13847 = shufflevector <2 x i64> %13838, <2 x i64> %13844, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13847, <2 x i64>* %13566, align 16
  %13848 = shufflevector <2 x i64> %13838, <2 x i64> %13844, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13848, <2 x i64>* %13568, align 16
  %13849 = shufflevector <2 x i64> %13840, <2 x i64> %13846, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %13849, <2 x i64>* %13570, align 16
  %13850 = shufflevector <2 x i64> %13840, <2 x i64> %13846, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %13850, <2 x i64>* %13572, align 16
  %13851 = bitcast i32* %1 to <2 x i64>*
  %13852 = load <2 x i64>, <2 x i64>* %12938, align 16
  store <2 x i64> %13852, <2 x i64>* %13851, align 16
  %13853 = getelementptr inbounds i32, i32* %1, i64 4
  %13854 = bitcast i32* %13853 to <2 x i64>*
  %13855 = load <2 x i64>, <2 x i64>* %13314, align 16
  store <2 x i64> %13855, <2 x i64>* %13854, align 16
  %13856 = getelementptr inbounds i32, i32* %1, i64 8
  %13857 = bitcast i32* %13856 to <2 x i64>*
  %13858 = load <2 x i64>, <2 x i64>* %13426, align 16
  store <2 x i64> %13858, <2 x i64>* %13857, align 16
  %13859 = getelementptr inbounds i32, i32* %1, i64 12
  %13860 = bitcast i32* %13859 to <2 x i64>*
  %13861 = load <2 x i64>, <2 x i64>* %13466, align 16
  store <2 x i64> %13861, <2 x i64>* %13860, align 16
  %13862 = getelementptr inbounds i32, i32* %1, i64 16
  %13863 = bitcast i32* %13862 to <2 x i64>*
  %13864 = load <2 x i64>, <2 x i64>* %13281, align 16
  store <2 x i64> %13864, <2 x i64>* %13863, align 16
  %13865 = getelementptr inbounds i32, i32* %1, i64 20
  %13866 = bitcast i32* %13865 to <2 x i64>*
  %13867 = load <2 x i64>, <2 x i64>* %13316, align 16
  store <2 x i64> %13867, <2 x i64>* %13866, align 16
  %13868 = getelementptr inbounds i32, i32* %1, i64 24
  %13869 = bitcast i32* %13868 to <2 x i64>*
  %13870 = load <2 x i64>, <2 x i64>* %13428, align 16
  store <2 x i64> %13870, <2 x i64>* %13869, align 16
  %13871 = getelementptr inbounds i32, i32* %1, i64 28
  %13872 = bitcast i32* %13871 to <2 x i64>*
  %13873 = load <2 x i64>, <2 x i64>* %13468, align 16
  store <2 x i64> %13873, <2 x i64>* %13872, align 16
  %13874 = getelementptr inbounds i32, i32* %1, i64 32
  %13875 = bitcast i32* %13874 to <2 x i64>*
  %13876 = load <2 x i64>, <2 x i64>* %13283, align 16
  store <2 x i64> %13876, <2 x i64>* %13875, align 16
  %13877 = getelementptr inbounds i32, i32* %1, i64 36
  %13878 = bitcast i32* %13877 to <2 x i64>*
  %13879 = load <2 x i64>, <2 x i64>* %13318, align 16
  store <2 x i64> %13879, <2 x i64>* %13878, align 16
  %13880 = getelementptr inbounds i32, i32* %1, i64 40
  %13881 = bitcast i32* %13880 to <2 x i64>*
  %13882 = load <2 x i64>, <2 x i64>* %13430, align 16
  store <2 x i64> %13882, <2 x i64>* %13881, align 16
  %13883 = getelementptr inbounds i32, i32* %1, i64 44
  %13884 = bitcast i32* %13883 to <2 x i64>*
  %13885 = load <2 x i64>, <2 x i64>* %13470, align 16
  store <2 x i64> %13885, <2 x i64>* %13884, align 16
  %13886 = getelementptr inbounds i32, i32* %1, i64 48
  %13887 = bitcast i32* %13886 to <2 x i64>*
  %13888 = load <2 x i64>, <2 x i64>* %13285, align 16
  store <2 x i64> %13888, <2 x i64>* %13887, align 16
  %13889 = getelementptr inbounds i32, i32* %1, i64 52
  %13890 = bitcast i32* %13889 to <2 x i64>*
  %13891 = load <2 x i64>, <2 x i64>* %13320, align 16
  store <2 x i64> %13891, <2 x i64>* %13890, align 16
  %13892 = getelementptr inbounds i32, i32* %1, i64 56
  %13893 = bitcast i32* %13892 to <2 x i64>*
  %13894 = load <2 x i64>, <2 x i64>* %13432, align 16
  store <2 x i64> %13894, <2 x i64>* %13893, align 16
  %13895 = getelementptr inbounds i32, i32* %1, i64 60
  %13896 = bitcast i32* %13895 to <2 x i64>*
  %13897 = load <2 x i64>, <2 x i64>* %13472, align 16
  store <2 x i64> %13897, <2 x i64>* %13896, align 16
  %13898 = getelementptr inbounds i32, i32* %1, i64 64
  %13899 = bitcast i32* %13898 to <2 x i64>*
  %13900 = load <2 x i64>, <2 x i64>* %13295, align 16
  store <2 x i64> %13900, <2 x i64>* %13899, align 16
  %13901 = getelementptr inbounds i32, i32* %1, i64 68
  %13902 = bitcast i32* %13901 to <2 x i64>*
  %13903 = load <2 x i64>, <2 x i64>* %13334, align 16
  store <2 x i64> %13903, <2 x i64>* %13902, align 16
  %13904 = getelementptr inbounds i32, i32* %1, i64 72
  %13905 = bitcast i32* %13904 to <2 x i64>*
  %13906 = load <2 x i64>, <2 x i64>* %13446, align 16
  store <2 x i64> %13906, <2 x i64>* %13905, align 16
  %13907 = getelementptr inbounds i32, i32* %1, i64 76
  %13908 = bitcast i32* %13907 to <2 x i64>*
  %13909 = load <2 x i64>, <2 x i64>* %13486, align 16
  store <2 x i64> %13909, <2 x i64>* %13908, align 16
  %13910 = getelementptr inbounds i32, i32* %1, i64 80
  %13911 = bitcast i32* %13910 to <2 x i64>*
  %13912 = load <2 x i64>, <2 x i64>* %13297, align 16
  store <2 x i64> %13912, <2 x i64>* %13911, align 16
  %13913 = getelementptr inbounds i32, i32* %1, i64 84
  %13914 = bitcast i32* %13913 to <2 x i64>*
  %13915 = load <2 x i64>, <2 x i64>* %13336, align 16
  store <2 x i64> %13915, <2 x i64>* %13914, align 16
  %13916 = getelementptr inbounds i32, i32* %1, i64 88
  %13917 = bitcast i32* %13916 to <2 x i64>*
  %13918 = load <2 x i64>, <2 x i64>* %13448, align 16
  store <2 x i64> %13918, <2 x i64>* %13917, align 16
  %13919 = getelementptr inbounds i32, i32* %1, i64 92
  %13920 = bitcast i32* %13919 to <2 x i64>*
  %13921 = load <2 x i64>, <2 x i64>* %13488, align 16
  store <2 x i64> %13921, <2 x i64>* %13920, align 16
  %13922 = getelementptr inbounds i32, i32* %1, i64 96
  %13923 = bitcast i32* %13922 to <2 x i64>*
  %13924 = load <2 x i64>, <2 x i64>* %13299, align 16
  store <2 x i64> %13924, <2 x i64>* %13923, align 16
  %13925 = getelementptr inbounds i32, i32* %1, i64 100
  %13926 = bitcast i32* %13925 to <2 x i64>*
  %13927 = load <2 x i64>, <2 x i64>* %13338, align 16
  store <2 x i64> %13927, <2 x i64>* %13926, align 16
  %13928 = getelementptr inbounds i32, i32* %1, i64 104
  %13929 = bitcast i32* %13928 to <2 x i64>*
  %13930 = load <2 x i64>, <2 x i64>* %13450, align 16
  store <2 x i64> %13930, <2 x i64>* %13929, align 16
  %13931 = getelementptr inbounds i32, i32* %1, i64 108
  %13932 = bitcast i32* %13931 to <2 x i64>*
  %13933 = load <2 x i64>, <2 x i64>* %13490, align 16
  store <2 x i64> %13933, <2 x i64>* %13932, align 16
  %13934 = getelementptr inbounds i32, i32* %1, i64 112
  %13935 = bitcast i32* %13934 to <2 x i64>*
  %13936 = load <2 x i64>, <2 x i64>* %13301, align 16
  store <2 x i64> %13936, <2 x i64>* %13935, align 16
  %13937 = getelementptr inbounds i32, i32* %1, i64 116
  %13938 = bitcast i32* %13937 to <2 x i64>*
  %13939 = load <2 x i64>, <2 x i64>* %13340, align 16
  store <2 x i64> %13939, <2 x i64>* %13938, align 16
  %13940 = getelementptr inbounds i32, i32* %1, i64 120
  %13941 = bitcast i32* %13940 to <2 x i64>*
  %13942 = load <2 x i64>, <2 x i64>* %13452, align 16
  store <2 x i64> %13942, <2 x i64>* %13941, align 16
  %13943 = getelementptr inbounds i32, i32* %1, i64 124
  %13944 = bitcast i32* %13943 to <2 x i64>*
  %13945 = load <2 x i64>, <2 x i64>* %13492, align 16
  store <2 x i64> %13945, <2 x i64>* %13944, align 16
  %13946 = getelementptr inbounds i32, i32* %1, i64 128
  %13947 = bitcast i32* %13946 to <2 x i64>*
  %13948 = load <2 x i64>, <2 x i64>* %13350, align 16
  store <2 x i64> %13948, <2 x i64>* %13947, align 16
  %13949 = getelementptr inbounds i32, i32* %1, i64 132
  %13950 = bitcast i32* %13949 to <2 x i64>*
  %13951 = load <2 x i64>, <2 x i64>* %13386, align 16
  store <2 x i64> %13951, <2 x i64>* %13950, align 16
  %13952 = getelementptr inbounds i32, i32* %1, i64 136
  %13953 = bitcast i32* %13952 to <2 x i64>*
  %13954 = load <2 x i64>, <2 x i64>* %13506, align 16
  store <2 x i64> %13954, <2 x i64>* %13953, align 16
  %13955 = getelementptr inbounds i32, i32* %1, i64 140
  %13956 = bitcast i32* %13955 to <2 x i64>*
  %13957 = load <2 x i64>, <2 x i64>* %13546, align 16
  store <2 x i64> %13957, <2 x i64>* %13956, align 16
  %13958 = getelementptr inbounds i32, i32* %1, i64 144
  %13959 = bitcast i32* %13958 to <2 x i64>*
  %13960 = load <2 x i64>, <2 x i64>* %13352, align 16
  store <2 x i64> %13960, <2 x i64>* %13959, align 16
  %13961 = getelementptr inbounds i32, i32* %1, i64 148
  %13962 = bitcast i32* %13961 to <2 x i64>*
  %13963 = load <2 x i64>, <2 x i64>* %13388, align 16
  store <2 x i64> %13963, <2 x i64>* %13962, align 16
  %13964 = getelementptr inbounds i32, i32* %1, i64 152
  %13965 = bitcast i32* %13964 to <2 x i64>*
  %13966 = load <2 x i64>, <2 x i64>* %13508, align 16
  store <2 x i64> %13966, <2 x i64>* %13965, align 16
  %13967 = getelementptr inbounds i32, i32* %1, i64 156
  %13968 = bitcast i32* %13967 to <2 x i64>*
  %13969 = load <2 x i64>, <2 x i64>* %13548, align 16
  store <2 x i64> %13969, <2 x i64>* %13968, align 16
  %13970 = getelementptr inbounds i32, i32* %1, i64 160
  %13971 = bitcast i32* %13970 to <2 x i64>*
  %13972 = load <2 x i64>, <2 x i64>* %13354, align 16
  store <2 x i64> %13972, <2 x i64>* %13971, align 16
  %13973 = getelementptr inbounds i32, i32* %1, i64 164
  %13974 = bitcast i32* %13973 to <2 x i64>*
  %13975 = load <2 x i64>, <2 x i64>* %13390, align 16
  store <2 x i64> %13975, <2 x i64>* %13974, align 16
  %13976 = getelementptr inbounds i32, i32* %1, i64 168
  %13977 = bitcast i32* %13976 to <2 x i64>*
  %13978 = load <2 x i64>, <2 x i64>* %13510, align 16
  store <2 x i64> %13978, <2 x i64>* %13977, align 16
  %13979 = getelementptr inbounds i32, i32* %1, i64 172
  %13980 = bitcast i32* %13979 to <2 x i64>*
  %13981 = load <2 x i64>, <2 x i64>* %13550, align 16
  store <2 x i64> %13981, <2 x i64>* %13980, align 16
  %13982 = getelementptr inbounds i32, i32* %1, i64 176
  %13983 = bitcast i32* %13982 to <2 x i64>*
  %13984 = load <2 x i64>, <2 x i64>* %13356, align 16
  store <2 x i64> %13984, <2 x i64>* %13983, align 16
  %13985 = getelementptr inbounds i32, i32* %1, i64 180
  %13986 = bitcast i32* %13985 to <2 x i64>*
  %13987 = load <2 x i64>, <2 x i64>* %13392, align 16
  store <2 x i64> %13987, <2 x i64>* %13986, align 16
  %13988 = getelementptr inbounds i32, i32* %1, i64 184
  %13989 = bitcast i32* %13988 to <2 x i64>*
  %13990 = load <2 x i64>, <2 x i64>* %13512, align 16
  store <2 x i64> %13990, <2 x i64>* %13989, align 16
  %13991 = getelementptr inbounds i32, i32* %1, i64 188
  %13992 = bitcast i32* %13991 to <2 x i64>*
  %13993 = load <2 x i64>, <2 x i64>* %13552, align 16
  store <2 x i64> %13993, <2 x i64>* %13992, align 16
  %13994 = getelementptr inbounds i32, i32* %1, i64 192
  %13995 = bitcast i32* %13994 to <2 x i64>*
  %13996 = load <2 x i64>, <2 x i64>* %13366, align 16
  store <2 x i64> %13996, <2 x i64>* %13995, align 16
  %13997 = getelementptr inbounds i32, i32* %1, i64 196
  %13998 = bitcast i32* %13997 to <2 x i64>*
  %13999 = load <2 x i64>, <2 x i64>* %13406, align 16
  store <2 x i64> %13999, <2 x i64>* %13998, align 16
  %14000 = getelementptr inbounds i32, i32* %1, i64 200
  %14001 = bitcast i32* %14000 to <2 x i64>*
  %14002 = load <2 x i64>, <2 x i64>* %13526, align 16
  store <2 x i64> %14002, <2 x i64>* %14001, align 16
  %14003 = getelementptr inbounds i32, i32* %1, i64 204
  %14004 = bitcast i32* %14003 to <2 x i64>*
  %14005 = load <2 x i64>, <2 x i64>* %13566, align 16
  store <2 x i64> %14005, <2 x i64>* %14004, align 16
  %14006 = getelementptr inbounds i32, i32* %1, i64 208
  %14007 = bitcast i32* %14006 to <2 x i64>*
  %14008 = load <2 x i64>, <2 x i64>* %13368, align 16
  store <2 x i64> %14008, <2 x i64>* %14007, align 16
  %14009 = getelementptr inbounds i32, i32* %1, i64 212
  %14010 = bitcast i32* %14009 to <2 x i64>*
  %14011 = load <2 x i64>, <2 x i64>* %13408, align 16
  store <2 x i64> %14011, <2 x i64>* %14010, align 16
  %14012 = getelementptr inbounds i32, i32* %1, i64 216
  %14013 = bitcast i32* %14012 to <2 x i64>*
  %14014 = load <2 x i64>, <2 x i64>* %13528, align 16
  store <2 x i64> %14014, <2 x i64>* %14013, align 16
  %14015 = getelementptr inbounds i32, i32* %1, i64 220
  %14016 = bitcast i32* %14015 to <2 x i64>*
  %14017 = load <2 x i64>, <2 x i64>* %13568, align 16
  store <2 x i64> %14017, <2 x i64>* %14016, align 16
  %14018 = getelementptr inbounds i32, i32* %1, i64 224
  %14019 = bitcast i32* %14018 to <2 x i64>*
  %14020 = load <2 x i64>, <2 x i64>* %13370, align 16
  store <2 x i64> %14020, <2 x i64>* %14019, align 16
  %14021 = getelementptr inbounds i32, i32* %1, i64 228
  %14022 = bitcast i32* %14021 to <2 x i64>*
  %14023 = load <2 x i64>, <2 x i64>* %13410, align 16
  store <2 x i64> %14023, <2 x i64>* %14022, align 16
  %14024 = getelementptr inbounds i32, i32* %1, i64 232
  %14025 = bitcast i32* %14024 to <2 x i64>*
  %14026 = load <2 x i64>, <2 x i64>* %13530, align 16
  store <2 x i64> %14026, <2 x i64>* %14025, align 16
  %14027 = getelementptr inbounds i32, i32* %1, i64 236
  %14028 = bitcast i32* %14027 to <2 x i64>*
  %14029 = load <2 x i64>, <2 x i64>* %13570, align 16
  store <2 x i64> %14029, <2 x i64>* %14028, align 16
  %14030 = getelementptr inbounds i32, i32* %1, i64 240
  %14031 = bitcast i32* %14030 to <2 x i64>*
  %14032 = load <2 x i64>, <2 x i64>* %13372, align 16
  store <2 x i64> %14032, <2 x i64>* %14031, align 16
  %14033 = getelementptr inbounds i32, i32* %1, i64 244
  %14034 = bitcast i32* %14033 to <2 x i64>*
  %14035 = load <2 x i64>, <2 x i64>* %13412, align 16
  store <2 x i64> %14035, <2 x i64>* %14034, align 16
  %14036 = getelementptr inbounds i32, i32* %1, i64 248
  %14037 = bitcast i32* %14036 to <2 x i64>*
  %14038 = load <2 x i64>, <2 x i64>* %13532, align 16
  store <2 x i64> %14038, <2 x i64>* %14037, align 16
  %14039 = getelementptr inbounds i32, i32* %1, i64 252
  %14040 = bitcast i32* %14039 to <2 x i64>*
  %14041 = load <2 x i64>, <2 x i64>* %13572, align 16
  store <2 x i64> %14041, <2 x i64>* %14040, align 16
  br label %17357

14042:                                            ; preds = %5
  %14043 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %14044 = load i8, i8* %10, align 1
  %14045 = sext i8 %14044 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %14043, i32 %2, i32 0, i32 0, i32 %14045)
  br label %14046

14046:                                            ; preds = %14046, %14042
  %14047 = phi i64 [ 0, %14042 ], [ %14065, %14046 ]
  %14048 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %14047
  %14049 = bitcast <2 x i64>* %14048 to <4 x i32>*
  %14050 = load <4 x i32>, <4 x i32>* %14049, align 16
  %14051 = mul <4 x i32> %14050, <i32 11586, i32 11586, i32 11586, i32 11586>
  %14052 = add <4 x i32> %14051, <i32 2048, i32 2048, i32 2048, i32 2048>
  %14053 = ashr <4 x i32> %14052, <i32 12, i32 12, i32 12, i32 12>
  %14054 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %14047
  %14055 = bitcast <2 x i64>* %14054 to <4 x i32>*
  store <4 x i32> %14053, <4 x i32>* %14055, align 16
  %14056 = or i64 %14047, 1
  %14057 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %14056
  %14058 = bitcast <2 x i64>* %14057 to <4 x i32>*
  %14059 = load <4 x i32>, <4 x i32>* %14058, align 16
  %14060 = mul <4 x i32> %14059, <i32 11586, i32 11586, i32 11586, i32 11586>
  %14061 = add <4 x i32> %14060, <i32 2048, i32 2048, i32 2048, i32 2048>
  %14062 = ashr <4 x i32> %14061, <i32 12, i32 12, i32 12, i32 12>
  %14063 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %14056
  %14064 = bitcast <2 x i64>* %14063 to <4 x i32>*
  store <4 x i32> %14062, <4 x i32>* %14064, align 16
  %14065 = add nuw nsw i64 %14047, 2
  %14066 = icmp eq i64 %14065, 64
  br i1 %14066, label %14067, label %14046

14067:                                            ; preds = %14046
  %14068 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %14069 = getelementptr inbounds i8, i8* %10, i64 1
  %14070 = load i8, i8* %14069, align 1
  %14071 = sext i8 %14070 to i32
  %14072 = sub nsw i32 0, %14071
  %14073 = xor i32 %14071, -1
  %14074 = shl i32 1, %14073
  %14075 = insertelement <4 x i32> undef, i32 %14074, i32 0
  %14076 = shufflevector <4 x i32> %14075, <4 x i32> undef, <4 x i32> zeroinitializer
  %14077 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %14078 = load <4 x i32>, <4 x i32>* %14077, align 16
  %14079 = add <4 x i32> %14076, %14078
  %14080 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %14081 = bitcast <2 x i64>* %14080 to <4 x i32>*
  %14082 = load <4 x i32>, <4 x i32>* %14081, align 16
  %14083 = add <4 x i32> %14076, %14082
  %14084 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %14085 = bitcast <2 x i64>* %14084 to <4 x i32>*
  %14086 = load <4 x i32>, <4 x i32>* %14085, align 16
  %14087 = add <4 x i32> %14076, %14086
  %14088 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %14089 = bitcast <2 x i64>* %14088 to <4 x i32>*
  %14090 = load <4 x i32>, <4 x i32>* %14089, align 16
  %14091 = add <4 x i32> %14090, %14076
  %14092 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %14093 = bitcast <2 x i64>* %14092 to <4 x i32>*
  %14094 = load <4 x i32>, <4 x i32>* %14093, align 16
  %14095 = add <4 x i32> %14094, %14076
  %14096 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %14097 = bitcast <2 x i64>* %14096 to <4 x i32>*
  %14098 = load <4 x i32>, <4 x i32>* %14097, align 16
  %14099 = add <4 x i32> %14098, %14076
  %14100 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %14101 = bitcast <2 x i64>* %14100 to <4 x i32>*
  %14102 = load <4 x i32>, <4 x i32>* %14101, align 16
  %14103 = add <4 x i32> %14102, %14076
  %14104 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %14105 = bitcast <2 x i64>* %14104 to <4 x i32>*
  %14106 = load <4 x i32>, <4 x i32>* %14105, align 16
  %14107 = add <4 x i32> %14106, %14076
  %14108 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %14109 = bitcast <2 x i64>* %14108 to <4 x i32>*
  %14110 = load <4 x i32>, <4 x i32>* %14109, align 16
  %14111 = add <4 x i32> %14110, %14076
  %14112 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %14113 = bitcast <2 x i64>* %14112 to <4 x i32>*
  %14114 = load <4 x i32>, <4 x i32>* %14113, align 16
  %14115 = add <4 x i32> %14114, %14076
  %14116 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %14117 = bitcast <2 x i64>* %14116 to <4 x i32>*
  %14118 = load <4 x i32>, <4 x i32>* %14117, align 16
  %14119 = add <4 x i32> %14118, %14076
  %14120 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %14121 = bitcast <2 x i64>* %14120 to <4 x i32>*
  %14122 = load <4 x i32>, <4 x i32>* %14121, align 16
  %14123 = add <4 x i32> %14122, %14076
  %14124 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %14125 = bitcast <2 x i64>* %14124 to <4 x i32>*
  %14126 = load <4 x i32>, <4 x i32>* %14125, align 16
  %14127 = add <4 x i32> %14126, %14076
  %14128 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %14129 = bitcast <2 x i64>* %14128 to <4 x i32>*
  %14130 = load <4 x i32>, <4 x i32>* %14129, align 16
  %14131 = add <4 x i32> %14130, %14076
  %14132 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %14133 = bitcast <2 x i64>* %14132 to <4 x i32>*
  %14134 = load <4 x i32>, <4 x i32>* %14133, align 16
  %14135 = add <4 x i32> %14134, %14076
  %14136 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %14137 = bitcast <2 x i64>* %14136 to <4 x i32>*
  %14138 = load <4 x i32>, <4 x i32>* %14137, align 16
  %14139 = add <4 x i32> %14138, %14076
  %14140 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14079, i32 %14072) #8
  store <4 x i32> %14140, <4 x i32>* %14077, align 16
  %14141 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14083, i32 %14072) #8
  store <4 x i32> %14141, <4 x i32>* %14081, align 16
  %14142 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14087, i32 %14072) #8
  store <4 x i32> %14142, <4 x i32>* %14085, align 16
  %14143 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14091, i32 %14072) #8
  store <4 x i32> %14143, <4 x i32>* %14089, align 16
  %14144 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14095, i32 %14072) #8
  store <4 x i32> %14144, <4 x i32>* %14093, align 16
  %14145 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14099, i32 %14072) #8
  store <4 x i32> %14145, <4 x i32>* %14097, align 16
  %14146 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14103, i32 %14072) #8
  store <4 x i32> %14146, <4 x i32>* %14101, align 16
  %14147 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14107, i32 %14072) #8
  store <4 x i32> %14147, <4 x i32>* %14105, align 16
  %14148 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14111, i32 %14072) #8
  store <4 x i32> %14148, <4 x i32>* %14109, align 16
  %14149 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14115, i32 %14072) #8
  store <4 x i32> %14149, <4 x i32>* %14113, align 16
  %14150 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14119, i32 %14072) #8
  store <4 x i32> %14150, <4 x i32>* %14117, align 16
  %14151 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14123, i32 %14072) #8
  store <4 x i32> %14151, <4 x i32>* %14121, align 16
  %14152 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14127, i32 %14072) #8
  store <4 x i32> %14152, <4 x i32>* %14125, align 16
  %14153 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14131, i32 %14072) #8
  store <4 x i32> %14153, <4 x i32>* %14129, align 16
  %14154 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14135, i32 %14072) #8
  store <4 x i32> %14154, <4 x i32>* %14133, align 16
  %14155 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14139, i32 %14072) #8
  store <4 x i32> %14155, <4 x i32>* %14137, align 16
  %14156 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %14157 = bitcast <2 x i64>* %14156 to <4 x i32>*
  %14158 = load <4 x i32>, <4 x i32>* %14157, align 16
  %14159 = add <4 x i32> %14158, %14076
  %14160 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %14161 = bitcast <2 x i64>* %14160 to <4 x i32>*
  %14162 = load <4 x i32>, <4 x i32>* %14161, align 16
  %14163 = add <4 x i32> %14162, %14076
  %14164 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %14165 = bitcast <2 x i64>* %14164 to <4 x i32>*
  %14166 = load <4 x i32>, <4 x i32>* %14165, align 16
  %14167 = add <4 x i32> %14166, %14076
  %14168 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %14169 = bitcast <2 x i64>* %14168 to <4 x i32>*
  %14170 = load <4 x i32>, <4 x i32>* %14169, align 16
  %14171 = add <4 x i32> %14170, %14076
  %14172 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %14173 = bitcast <2 x i64>* %14172 to <4 x i32>*
  %14174 = load <4 x i32>, <4 x i32>* %14173, align 16
  %14175 = add <4 x i32> %14174, %14076
  %14176 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %14177 = bitcast <2 x i64>* %14176 to <4 x i32>*
  %14178 = load <4 x i32>, <4 x i32>* %14177, align 16
  %14179 = add <4 x i32> %14178, %14076
  %14180 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %14181 = bitcast <2 x i64>* %14180 to <4 x i32>*
  %14182 = load <4 x i32>, <4 x i32>* %14181, align 16
  %14183 = add <4 x i32> %14182, %14076
  %14184 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %14185 = bitcast <2 x i64>* %14184 to <4 x i32>*
  %14186 = load <4 x i32>, <4 x i32>* %14185, align 16
  %14187 = add <4 x i32> %14186, %14076
  %14188 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %14189 = bitcast <2 x i64>* %14188 to <4 x i32>*
  %14190 = load <4 x i32>, <4 x i32>* %14189, align 16
  %14191 = add <4 x i32> %14190, %14076
  %14192 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %14193 = bitcast <2 x i64>* %14192 to <4 x i32>*
  %14194 = load <4 x i32>, <4 x i32>* %14193, align 16
  %14195 = add <4 x i32> %14194, %14076
  %14196 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %14197 = bitcast <2 x i64>* %14196 to <4 x i32>*
  %14198 = load <4 x i32>, <4 x i32>* %14197, align 16
  %14199 = add <4 x i32> %14198, %14076
  %14200 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %14201 = bitcast <2 x i64>* %14200 to <4 x i32>*
  %14202 = load <4 x i32>, <4 x i32>* %14201, align 16
  %14203 = add <4 x i32> %14202, %14076
  %14204 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %14205 = bitcast <2 x i64>* %14204 to <4 x i32>*
  %14206 = load <4 x i32>, <4 x i32>* %14205, align 16
  %14207 = add <4 x i32> %14206, %14076
  %14208 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %14209 = bitcast <2 x i64>* %14208 to <4 x i32>*
  %14210 = load <4 x i32>, <4 x i32>* %14209, align 16
  %14211 = add <4 x i32> %14210, %14076
  %14212 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %14213 = bitcast <2 x i64>* %14212 to <4 x i32>*
  %14214 = load <4 x i32>, <4 x i32>* %14213, align 16
  %14215 = add <4 x i32> %14214, %14076
  %14216 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %14217 = bitcast <2 x i64>* %14216 to <4 x i32>*
  %14218 = load <4 x i32>, <4 x i32>* %14217, align 16
  %14219 = add <4 x i32> %14218, %14076
  %14220 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14159, i32 %14072) #8
  store <4 x i32> %14220, <4 x i32>* %14157, align 16
  %14221 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14163, i32 %14072) #8
  store <4 x i32> %14221, <4 x i32>* %14161, align 16
  %14222 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14167, i32 %14072) #8
  store <4 x i32> %14222, <4 x i32>* %14165, align 16
  %14223 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14171, i32 %14072) #8
  store <4 x i32> %14223, <4 x i32>* %14169, align 16
  %14224 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14175, i32 %14072) #8
  store <4 x i32> %14224, <4 x i32>* %14173, align 16
  %14225 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14179, i32 %14072) #8
  store <4 x i32> %14225, <4 x i32>* %14177, align 16
  %14226 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14183, i32 %14072) #8
  store <4 x i32> %14226, <4 x i32>* %14181, align 16
  %14227 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14187, i32 %14072) #8
  store <4 x i32> %14227, <4 x i32>* %14185, align 16
  %14228 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14191, i32 %14072) #8
  store <4 x i32> %14228, <4 x i32>* %14189, align 16
  %14229 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14195, i32 %14072) #8
  store <4 x i32> %14229, <4 x i32>* %14193, align 16
  %14230 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14199, i32 %14072) #8
  store <4 x i32> %14230, <4 x i32>* %14197, align 16
  %14231 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14203, i32 %14072) #8
  store <4 x i32> %14231, <4 x i32>* %14201, align 16
  %14232 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14207, i32 %14072) #8
  store <4 x i32> %14232, <4 x i32>* %14205, align 16
  %14233 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14211, i32 %14072) #8
  store <4 x i32> %14233, <4 x i32>* %14209, align 16
  %14234 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14215, i32 %14072) #8
  store <4 x i32> %14234, <4 x i32>* %14213, align 16
  %14235 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14219, i32 %14072) #8
  store <4 x i32> %14235, <4 x i32>* %14217, align 16
  %14236 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %14237 = bitcast <2 x i64>* %14236 to <4 x i32>*
  %14238 = load <4 x i32>, <4 x i32>* %14237, align 16
  %14239 = add <4 x i32> %14238, %14076
  %14240 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %14241 = bitcast <2 x i64>* %14240 to <4 x i32>*
  %14242 = load <4 x i32>, <4 x i32>* %14241, align 16
  %14243 = add <4 x i32> %14242, %14076
  %14244 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %14245 = bitcast <2 x i64>* %14244 to <4 x i32>*
  %14246 = load <4 x i32>, <4 x i32>* %14245, align 16
  %14247 = add <4 x i32> %14246, %14076
  %14248 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %14249 = bitcast <2 x i64>* %14248 to <4 x i32>*
  %14250 = load <4 x i32>, <4 x i32>* %14249, align 16
  %14251 = add <4 x i32> %14250, %14076
  %14252 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %14253 = bitcast <2 x i64>* %14252 to <4 x i32>*
  %14254 = load <4 x i32>, <4 x i32>* %14253, align 16
  %14255 = add <4 x i32> %14254, %14076
  %14256 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %14257 = bitcast <2 x i64>* %14256 to <4 x i32>*
  %14258 = load <4 x i32>, <4 x i32>* %14257, align 16
  %14259 = add <4 x i32> %14258, %14076
  %14260 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %14261 = bitcast <2 x i64>* %14260 to <4 x i32>*
  %14262 = load <4 x i32>, <4 x i32>* %14261, align 16
  %14263 = add <4 x i32> %14262, %14076
  %14264 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %14265 = bitcast <2 x i64>* %14264 to <4 x i32>*
  %14266 = load <4 x i32>, <4 x i32>* %14265, align 16
  %14267 = add <4 x i32> %14266, %14076
  %14268 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %14269 = bitcast <2 x i64>* %14268 to <4 x i32>*
  %14270 = load <4 x i32>, <4 x i32>* %14269, align 16
  %14271 = add <4 x i32> %14270, %14076
  %14272 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %14273 = bitcast <2 x i64>* %14272 to <4 x i32>*
  %14274 = load <4 x i32>, <4 x i32>* %14273, align 16
  %14275 = add <4 x i32> %14274, %14076
  %14276 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %14277 = bitcast <2 x i64>* %14276 to <4 x i32>*
  %14278 = load <4 x i32>, <4 x i32>* %14277, align 16
  %14279 = add <4 x i32> %14278, %14076
  %14280 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %14281 = bitcast <2 x i64>* %14280 to <4 x i32>*
  %14282 = load <4 x i32>, <4 x i32>* %14281, align 16
  %14283 = add <4 x i32> %14282, %14076
  %14284 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %14285 = bitcast <2 x i64>* %14284 to <4 x i32>*
  %14286 = load <4 x i32>, <4 x i32>* %14285, align 16
  %14287 = add <4 x i32> %14286, %14076
  %14288 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %14289 = bitcast <2 x i64>* %14288 to <4 x i32>*
  %14290 = load <4 x i32>, <4 x i32>* %14289, align 16
  %14291 = add <4 x i32> %14290, %14076
  %14292 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %14293 = bitcast <2 x i64>* %14292 to <4 x i32>*
  %14294 = load <4 x i32>, <4 x i32>* %14293, align 16
  %14295 = add <4 x i32> %14294, %14076
  %14296 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %14297 = bitcast <2 x i64>* %14296 to <4 x i32>*
  %14298 = load <4 x i32>, <4 x i32>* %14297, align 16
  %14299 = add <4 x i32> %14298, %14076
  %14300 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14239, i32 %14072) #8
  store <4 x i32> %14300, <4 x i32>* %14237, align 16
  %14301 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14243, i32 %14072) #8
  store <4 x i32> %14301, <4 x i32>* %14241, align 16
  %14302 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14247, i32 %14072) #8
  store <4 x i32> %14302, <4 x i32>* %14245, align 16
  %14303 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14251, i32 %14072) #8
  store <4 x i32> %14303, <4 x i32>* %14249, align 16
  %14304 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14255, i32 %14072) #8
  store <4 x i32> %14304, <4 x i32>* %14253, align 16
  %14305 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14259, i32 %14072) #8
  store <4 x i32> %14305, <4 x i32>* %14257, align 16
  %14306 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14263, i32 %14072) #8
  store <4 x i32> %14306, <4 x i32>* %14261, align 16
  %14307 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14267, i32 %14072) #8
  store <4 x i32> %14307, <4 x i32>* %14265, align 16
  %14308 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14271, i32 %14072) #8
  store <4 x i32> %14308, <4 x i32>* %14269, align 16
  %14309 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14275, i32 %14072) #8
  store <4 x i32> %14309, <4 x i32>* %14273, align 16
  %14310 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14279, i32 %14072) #8
  store <4 x i32> %14310, <4 x i32>* %14277, align 16
  %14311 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14283, i32 %14072) #8
  store <4 x i32> %14311, <4 x i32>* %14281, align 16
  %14312 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14287, i32 %14072) #8
  store <4 x i32> %14312, <4 x i32>* %14285, align 16
  %14313 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14291, i32 %14072) #8
  store <4 x i32> %14313, <4 x i32>* %14289, align 16
  %14314 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14295, i32 %14072) #8
  store <4 x i32> %14314, <4 x i32>* %14293, align 16
  %14315 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14299, i32 %14072) #8
  store <4 x i32> %14315, <4 x i32>* %14297, align 16
  %14316 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %14317 = bitcast <2 x i64>* %14316 to <4 x i32>*
  %14318 = load <4 x i32>, <4 x i32>* %14317, align 16
  %14319 = add <4 x i32> %14318, %14076
  %14320 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %14321 = bitcast <2 x i64>* %14320 to <4 x i32>*
  %14322 = load <4 x i32>, <4 x i32>* %14321, align 16
  %14323 = add <4 x i32> %14322, %14076
  %14324 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %14325 = bitcast <2 x i64>* %14324 to <4 x i32>*
  %14326 = load <4 x i32>, <4 x i32>* %14325, align 16
  %14327 = add <4 x i32> %14326, %14076
  %14328 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %14329 = bitcast <2 x i64>* %14328 to <4 x i32>*
  %14330 = load <4 x i32>, <4 x i32>* %14329, align 16
  %14331 = add <4 x i32> %14330, %14076
  %14332 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %14333 = bitcast <2 x i64>* %14332 to <4 x i32>*
  %14334 = load <4 x i32>, <4 x i32>* %14333, align 16
  %14335 = add <4 x i32> %14334, %14076
  %14336 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %14337 = bitcast <2 x i64>* %14336 to <4 x i32>*
  %14338 = load <4 x i32>, <4 x i32>* %14337, align 16
  %14339 = add <4 x i32> %14338, %14076
  %14340 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %14341 = bitcast <2 x i64>* %14340 to <4 x i32>*
  %14342 = load <4 x i32>, <4 x i32>* %14341, align 16
  %14343 = add <4 x i32> %14342, %14076
  %14344 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %14345 = bitcast <2 x i64>* %14344 to <4 x i32>*
  %14346 = load <4 x i32>, <4 x i32>* %14345, align 16
  %14347 = add <4 x i32> %14346, %14076
  %14348 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %14349 = bitcast <2 x i64>* %14348 to <4 x i32>*
  %14350 = load <4 x i32>, <4 x i32>* %14349, align 16
  %14351 = add <4 x i32> %14350, %14076
  %14352 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %14353 = bitcast <2 x i64>* %14352 to <4 x i32>*
  %14354 = load <4 x i32>, <4 x i32>* %14353, align 16
  %14355 = add <4 x i32> %14354, %14076
  %14356 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %14357 = bitcast <2 x i64>* %14356 to <4 x i32>*
  %14358 = load <4 x i32>, <4 x i32>* %14357, align 16
  %14359 = add <4 x i32> %14358, %14076
  %14360 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %14361 = bitcast <2 x i64>* %14360 to <4 x i32>*
  %14362 = load <4 x i32>, <4 x i32>* %14361, align 16
  %14363 = add <4 x i32> %14362, %14076
  %14364 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %14365 = bitcast <2 x i64>* %14364 to <4 x i32>*
  %14366 = load <4 x i32>, <4 x i32>* %14365, align 16
  %14367 = add <4 x i32> %14366, %14076
  %14368 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %14369 = bitcast <2 x i64>* %14368 to <4 x i32>*
  %14370 = load <4 x i32>, <4 x i32>* %14369, align 16
  %14371 = add <4 x i32> %14370, %14076
  %14372 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %14373 = bitcast <2 x i64>* %14372 to <4 x i32>*
  %14374 = load <4 x i32>, <4 x i32>* %14373, align 16
  %14375 = add <4 x i32> %14374, %14076
  %14376 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %14377 = bitcast <2 x i64>* %14376 to <4 x i32>*
  %14378 = load <4 x i32>, <4 x i32>* %14377, align 16
  %14379 = add <4 x i32> %14378, %14076
  %14380 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14319, i32 %14072) #8
  store <4 x i32> %14380, <4 x i32>* %14317, align 16
  %14381 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14323, i32 %14072) #8
  store <4 x i32> %14381, <4 x i32>* %14321, align 16
  %14382 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14327, i32 %14072) #8
  store <4 x i32> %14382, <4 x i32>* %14325, align 16
  %14383 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14331, i32 %14072) #8
  store <4 x i32> %14383, <4 x i32>* %14329, align 16
  %14384 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14335, i32 %14072) #8
  store <4 x i32> %14384, <4 x i32>* %14333, align 16
  %14385 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14339, i32 %14072) #8
  store <4 x i32> %14385, <4 x i32>* %14337, align 16
  %14386 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14343, i32 %14072) #8
  store <4 x i32> %14386, <4 x i32>* %14341, align 16
  %14387 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14347, i32 %14072) #8
  store <4 x i32> %14387, <4 x i32>* %14345, align 16
  %14388 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14351, i32 %14072) #8
  store <4 x i32> %14388, <4 x i32>* %14349, align 16
  %14389 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14355, i32 %14072) #8
  store <4 x i32> %14389, <4 x i32>* %14353, align 16
  %14390 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14359, i32 %14072) #8
  store <4 x i32> %14390, <4 x i32>* %14357, align 16
  %14391 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14363, i32 %14072) #8
  store <4 x i32> %14391, <4 x i32>* %14361, align 16
  %14392 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14367, i32 %14072) #8
  store <4 x i32> %14392, <4 x i32>* %14365, align 16
  %14393 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14371, i32 %14072) #8
  store <4 x i32> %14393, <4 x i32>* %14369, align 16
  %14394 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14375, i32 %14072) #8
  store <4 x i32> %14394, <4 x i32>* %14373, align 16
  %14395 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %14379, i32 %14072) #8
  store <4 x i32> %14395, <4 x i32>* %14377, align 16
  %14396 = shufflevector <4 x i32> %14140, <4 x i32> %14144, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14397 = bitcast <4 x i32> %14396 to <2 x i64>
  %14398 = shufflevector <4 x i32> %14140, <4 x i32> %14144, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14399 = bitcast <4 x i32> %14398 to <2 x i64>
  %14400 = shufflevector <4 x i32> %14148, <4 x i32> %14152, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14401 = bitcast <4 x i32> %14400 to <2 x i64>
  %14402 = shufflevector <4 x i32> %14148, <4 x i32> %14152, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14403 = bitcast <4 x i32> %14402 to <2 x i64>
  %14404 = shufflevector <2 x i64> %14397, <2 x i64> %14401, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14404, <2 x i64>* %14043, align 16
  %14405 = shufflevector <2 x i64> %14397, <2 x i64> %14401, <2 x i32> <i32 1, i32 3>
  %14406 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %14405, <2 x i64>* %14406, align 16
  %14407 = shufflevector <2 x i64> %14399, <2 x i64> %14403, <2 x i32> <i32 0, i32 2>
  %14408 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %14407, <2 x i64>* %14408, align 16
  %14409 = shufflevector <2 x i64> %14399, <2 x i64> %14403, <2 x i32> <i32 1, i32 3>
  %14410 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %14409, <2 x i64>* %14410, align 16
  %14411 = shufflevector <4 x i32> %14141, <4 x i32> %14145, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14412 = bitcast <4 x i32> %14411 to <2 x i64>
  %14413 = shufflevector <4 x i32> %14141, <4 x i32> %14145, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14414 = bitcast <4 x i32> %14413 to <2 x i64>
  %14415 = shufflevector <4 x i32> %14149, <4 x i32> %14153, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14416 = bitcast <4 x i32> %14415 to <2 x i64>
  %14417 = shufflevector <4 x i32> %14149, <4 x i32> %14153, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14418 = bitcast <4 x i32> %14417 to <2 x i64>
  %14419 = shufflevector <2 x i64> %14412, <2 x i64> %14416, <2 x i32> <i32 0, i32 2>
  %14420 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %14419, <2 x i64>* %14420, align 16
  %14421 = shufflevector <2 x i64> %14412, <2 x i64> %14416, <2 x i32> <i32 1, i32 3>
  %14422 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %14421, <2 x i64>* %14422, align 16
  %14423 = shufflevector <2 x i64> %14414, <2 x i64> %14418, <2 x i32> <i32 0, i32 2>
  %14424 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %14423, <2 x i64>* %14424, align 16
  %14425 = shufflevector <2 x i64> %14414, <2 x i64> %14418, <2 x i32> <i32 1, i32 3>
  %14426 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %14425, <2 x i64>* %14426, align 16
  %14427 = load <4 x i32>, <4 x i32>* %14173, align 16
  %14428 = shufflevector <4 x i32> %14220, <4 x i32> %14427, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14429 = bitcast <4 x i32> %14428 to <2 x i64>
  %14430 = shufflevector <4 x i32> %14220, <4 x i32> %14427, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14431 = bitcast <4 x i32> %14430 to <2 x i64>
  %14432 = load <4 x i32>, <4 x i32>* %14189, align 16
  %14433 = load <4 x i32>, <4 x i32>* %14205, align 16
  %14434 = shufflevector <4 x i32> %14432, <4 x i32> %14433, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14435 = bitcast <4 x i32> %14434 to <2 x i64>
  %14436 = shufflevector <4 x i32> %14432, <4 x i32> %14433, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14437 = bitcast <4 x i32> %14436 to <2 x i64>
  %14438 = shufflevector <2 x i64> %14429, <2 x i64> %14435, <2 x i32> <i32 0, i32 2>
  %14439 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %14438, <2 x i64>* %14439, align 16
  %14440 = shufflevector <2 x i64> %14429, <2 x i64> %14435, <2 x i32> <i32 1, i32 3>
  %14441 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %14440, <2 x i64>* %14441, align 16
  %14442 = shufflevector <2 x i64> %14431, <2 x i64> %14437, <2 x i32> <i32 0, i32 2>
  %14443 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %14442, <2 x i64>* %14443, align 16
  %14444 = shufflevector <2 x i64> %14431, <2 x i64> %14437, <2 x i32> <i32 1, i32 3>
  %14445 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %14444, <2 x i64>* %14445, align 16
  %14446 = load <4 x i32>, <4 x i32>* %14161, align 16
  %14447 = load <4 x i32>, <4 x i32>* %14177, align 16
  %14448 = shufflevector <4 x i32> %14446, <4 x i32> %14447, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14449 = bitcast <4 x i32> %14448 to <2 x i64>
  %14450 = shufflevector <4 x i32> %14446, <4 x i32> %14447, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14451 = bitcast <4 x i32> %14450 to <2 x i64>
  %14452 = load <4 x i32>, <4 x i32>* %14193, align 16
  %14453 = load <4 x i32>, <4 x i32>* %14209, align 16
  %14454 = shufflevector <4 x i32> %14452, <4 x i32> %14453, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14455 = bitcast <4 x i32> %14454 to <2 x i64>
  %14456 = shufflevector <4 x i32> %14452, <4 x i32> %14453, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14457 = bitcast <4 x i32> %14456 to <2 x i64>
  %14458 = shufflevector <2 x i64> %14449, <2 x i64> %14455, <2 x i32> <i32 0, i32 2>
  %14459 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %14458, <2 x i64>* %14459, align 16
  %14460 = shufflevector <2 x i64> %14449, <2 x i64> %14455, <2 x i32> <i32 1, i32 3>
  %14461 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %14460, <2 x i64>* %14461, align 16
  %14462 = shufflevector <2 x i64> %14451, <2 x i64> %14457, <2 x i32> <i32 0, i32 2>
  %14463 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %14462, <2 x i64>* %14463, align 16
  %14464 = shufflevector <2 x i64> %14451, <2 x i64> %14457, <2 x i32> <i32 1, i32 3>
  %14465 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %14464, <2 x i64>* %14465, align 16
  %14466 = shufflevector <4 x i32> %14142, <4 x i32> %14146, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14467 = bitcast <4 x i32> %14466 to <2 x i64>
  %14468 = shufflevector <4 x i32> %14142, <4 x i32> %14146, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14469 = bitcast <4 x i32> %14468 to <2 x i64>
  %14470 = shufflevector <4 x i32> %14150, <4 x i32> %14154, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14471 = bitcast <4 x i32> %14470 to <2 x i64>
  %14472 = shufflevector <4 x i32> %14150, <4 x i32> %14154, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14473 = bitcast <4 x i32> %14472 to <2 x i64>
  %14474 = shufflevector <2 x i64> %14467, <2 x i64> %14471, <2 x i32> <i32 0, i32 2>
  %14475 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %14474, <2 x i64>* %14475, align 16
  %14476 = shufflevector <2 x i64> %14467, <2 x i64> %14471, <2 x i32> <i32 1, i32 3>
  %14477 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %14476, <2 x i64>* %14477, align 16
  %14478 = shufflevector <2 x i64> %14469, <2 x i64> %14473, <2 x i32> <i32 0, i32 2>
  %14479 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %14478, <2 x i64>* %14479, align 16
  %14480 = shufflevector <2 x i64> %14469, <2 x i64> %14473, <2 x i32> <i32 1, i32 3>
  %14481 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %14480, <2 x i64>* %14481, align 16
  %14482 = shufflevector <4 x i32> %14143, <4 x i32> %14147, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14483 = bitcast <4 x i32> %14482 to <2 x i64>
  %14484 = shufflevector <4 x i32> %14143, <4 x i32> %14147, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14485 = bitcast <4 x i32> %14484 to <2 x i64>
  %14486 = shufflevector <4 x i32> %14151, <4 x i32> %14155, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14487 = bitcast <4 x i32> %14486 to <2 x i64>
  %14488 = shufflevector <4 x i32> %14151, <4 x i32> %14155, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14489 = bitcast <4 x i32> %14488 to <2 x i64>
  %14490 = shufflevector <2 x i64> %14483, <2 x i64> %14487, <2 x i32> <i32 0, i32 2>
  %14491 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %14490, <2 x i64>* %14491, align 16
  %14492 = shufflevector <2 x i64> %14483, <2 x i64> %14487, <2 x i32> <i32 1, i32 3>
  %14493 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %14492, <2 x i64>* %14493, align 16
  %14494 = shufflevector <2 x i64> %14485, <2 x i64> %14489, <2 x i32> <i32 0, i32 2>
  %14495 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %14494, <2 x i64>* %14495, align 16
  %14496 = shufflevector <2 x i64> %14485, <2 x i64> %14489, <2 x i32> <i32 1, i32 3>
  %14497 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %14496, <2 x i64>* %14497, align 16
  %14498 = load <4 x i32>, <4 x i32>* %14165, align 16
  %14499 = load <4 x i32>, <4 x i32>* %14181, align 16
  %14500 = shufflevector <4 x i32> %14498, <4 x i32> %14499, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14501 = bitcast <4 x i32> %14500 to <2 x i64>
  %14502 = shufflevector <4 x i32> %14498, <4 x i32> %14499, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14503 = bitcast <4 x i32> %14502 to <2 x i64>
  %14504 = load <4 x i32>, <4 x i32>* %14197, align 16
  %14505 = load <4 x i32>, <4 x i32>* %14213, align 16
  %14506 = shufflevector <4 x i32> %14504, <4 x i32> %14505, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14507 = bitcast <4 x i32> %14506 to <2 x i64>
  %14508 = shufflevector <4 x i32> %14504, <4 x i32> %14505, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14509 = bitcast <4 x i32> %14508 to <2 x i64>
  %14510 = shufflevector <2 x i64> %14501, <2 x i64> %14507, <2 x i32> <i32 0, i32 2>
  %14511 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %14510, <2 x i64>* %14511, align 16
  %14512 = shufflevector <2 x i64> %14501, <2 x i64> %14507, <2 x i32> <i32 1, i32 3>
  %14513 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %14512, <2 x i64>* %14513, align 16
  %14514 = shufflevector <2 x i64> %14503, <2 x i64> %14509, <2 x i32> <i32 0, i32 2>
  %14515 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %14514, <2 x i64>* %14515, align 16
  %14516 = shufflevector <2 x i64> %14503, <2 x i64> %14509, <2 x i32> <i32 1, i32 3>
  %14517 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %14516, <2 x i64>* %14517, align 16
  %14518 = load <4 x i32>, <4 x i32>* %14169, align 16
  %14519 = load <4 x i32>, <4 x i32>* %14185, align 16
  %14520 = shufflevector <4 x i32> %14518, <4 x i32> %14519, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14521 = bitcast <4 x i32> %14520 to <2 x i64>
  %14522 = shufflevector <4 x i32> %14518, <4 x i32> %14519, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14523 = bitcast <4 x i32> %14522 to <2 x i64>
  %14524 = load <4 x i32>, <4 x i32>* %14201, align 16
  %14525 = load <4 x i32>, <4 x i32>* %14217, align 16
  %14526 = shufflevector <4 x i32> %14524, <4 x i32> %14525, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14527 = bitcast <4 x i32> %14526 to <2 x i64>
  %14528 = shufflevector <4 x i32> %14524, <4 x i32> %14525, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14529 = bitcast <4 x i32> %14528 to <2 x i64>
  %14530 = shufflevector <2 x i64> %14521, <2 x i64> %14527, <2 x i32> <i32 0, i32 2>
  %14531 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %14530, <2 x i64>* %14531, align 16
  %14532 = shufflevector <2 x i64> %14521, <2 x i64> %14527, <2 x i32> <i32 1, i32 3>
  %14533 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %14532, <2 x i64>* %14533, align 16
  %14534 = shufflevector <2 x i64> %14523, <2 x i64> %14529, <2 x i32> <i32 0, i32 2>
  %14535 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %14534, <2 x i64>* %14535, align 16
  %14536 = shufflevector <2 x i64> %14523, <2 x i64> %14529, <2 x i32> <i32 1, i32 3>
  %14537 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %14536, <2 x i64>* %14537, align 16
  %14538 = load <4 x i32>, <4 x i32>* %14237, align 16
  %14539 = load <4 x i32>, <4 x i32>* %14253, align 16
  %14540 = shufflevector <4 x i32> %14538, <4 x i32> %14539, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14541 = bitcast <4 x i32> %14540 to <2 x i64>
  %14542 = shufflevector <4 x i32> %14538, <4 x i32> %14539, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14543 = bitcast <4 x i32> %14542 to <2 x i64>
  %14544 = load <4 x i32>, <4 x i32>* %14269, align 16
  %14545 = load <4 x i32>, <4 x i32>* %14285, align 16
  %14546 = shufflevector <4 x i32> %14544, <4 x i32> %14545, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14547 = bitcast <4 x i32> %14546 to <2 x i64>
  %14548 = shufflevector <4 x i32> %14544, <4 x i32> %14545, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14549 = bitcast <4 x i32> %14548 to <2 x i64>
  %14550 = shufflevector <2 x i64> %14541, <2 x i64> %14547, <2 x i32> <i32 0, i32 2>
  %14551 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %14550, <2 x i64>* %14551, align 16
  %14552 = shufflevector <2 x i64> %14541, <2 x i64> %14547, <2 x i32> <i32 1, i32 3>
  %14553 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %14552, <2 x i64>* %14553, align 16
  %14554 = shufflevector <2 x i64> %14543, <2 x i64> %14549, <2 x i32> <i32 0, i32 2>
  %14555 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %14554, <2 x i64>* %14555, align 16
  %14556 = shufflevector <2 x i64> %14543, <2 x i64> %14549, <2 x i32> <i32 1, i32 3>
  %14557 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %14556, <2 x i64>* %14557, align 16
  %14558 = load <4 x i32>, <4 x i32>* %14241, align 16
  %14559 = load <4 x i32>, <4 x i32>* %14257, align 16
  %14560 = shufflevector <4 x i32> %14558, <4 x i32> %14559, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14561 = bitcast <4 x i32> %14560 to <2 x i64>
  %14562 = shufflevector <4 x i32> %14558, <4 x i32> %14559, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14563 = bitcast <4 x i32> %14562 to <2 x i64>
  %14564 = load <4 x i32>, <4 x i32>* %14273, align 16
  %14565 = load <4 x i32>, <4 x i32>* %14289, align 16
  %14566 = shufflevector <4 x i32> %14564, <4 x i32> %14565, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14567 = bitcast <4 x i32> %14566 to <2 x i64>
  %14568 = shufflevector <4 x i32> %14564, <4 x i32> %14565, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14569 = bitcast <4 x i32> %14568 to <2 x i64>
  %14570 = shufflevector <2 x i64> %14561, <2 x i64> %14567, <2 x i32> <i32 0, i32 2>
  %14571 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %14570, <2 x i64>* %14571, align 16
  %14572 = shufflevector <2 x i64> %14561, <2 x i64> %14567, <2 x i32> <i32 1, i32 3>
  %14573 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %14572, <2 x i64>* %14573, align 16
  %14574 = shufflevector <2 x i64> %14563, <2 x i64> %14569, <2 x i32> <i32 0, i32 2>
  %14575 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %14574, <2 x i64>* %14575, align 16
  %14576 = shufflevector <2 x i64> %14563, <2 x i64> %14569, <2 x i32> <i32 1, i32 3>
  %14577 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %14576, <2 x i64>* %14577, align 16
  %14578 = load <4 x i32>, <4 x i32>* %14317, align 16
  %14579 = load <4 x i32>, <4 x i32>* %14333, align 16
  %14580 = shufflevector <4 x i32> %14578, <4 x i32> %14579, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14581 = bitcast <4 x i32> %14580 to <2 x i64>
  %14582 = shufflevector <4 x i32> %14578, <4 x i32> %14579, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14583 = bitcast <4 x i32> %14582 to <2 x i64>
  %14584 = load <4 x i32>, <4 x i32>* %14349, align 16
  %14585 = load <4 x i32>, <4 x i32>* %14365, align 16
  %14586 = shufflevector <4 x i32> %14584, <4 x i32> %14585, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14587 = bitcast <4 x i32> %14586 to <2 x i64>
  %14588 = shufflevector <4 x i32> %14584, <4 x i32> %14585, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14589 = bitcast <4 x i32> %14588 to <2 x i64>
  %14590 = shufflevector <2 x i64> %14581, <2 x i64> %14587, <2 x i32> <i32 0, i32 2>
  %14591 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %14590, <2 x i64>* %14591, align 16
  %14592 = shufflevector <2 x i64> %14581, <2 x i64> %14587, <2 x i32> <i32 1, i32 3>
  %14593 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %14592, <2 x i64>* %14593, align 16
  %14594 = shufflevector <2 x i64> %14583, <2 x i64> %14589, <2 x i32> <i32 0, i32 2>
  %14595 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %14594, <2 x i64>* %14595, align 16
  %14596 = shufflevector <2 x i64> %14583, <2 x i64> %14589, <2 x i32> <i32 1, i32 3>
  %14597 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %14596, <2 x i64>* %14597, align 16
  %14598 = load <4 x i32>, <4 x i32>* %14321, align 16
  %14599 = load <4 x i32>, <4 x i32>* %14337, align 16
  %14600 = shufflevector <4 x i32> %14598, <4 x i32> %14599, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14601 = bitcast <4 x i32> %14600 to <2 x i64>
  %14602 = shufflevector <4 x i32> %14598, <4 x i32> %14599, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14603 = bitcast <4 x i32> %14602 to <2 x i64>
  %14604 = load <4 x i32>, <4 x i32>* %14353, align 16
  %14605 = load <4 x i32>, <4 x i32>* %14369, align 16
  %14606 = shufflevector <4 x i32> %14604, <4 x i32> %14605, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14607 = bitcast <4 x i32> %14606 to <2 x i64>
  %14608 = shufflevector <4 x i32> %14604, <4 x i32> %14605, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14609 = bitcast <4 x i32> %14608 to <2 x i64>
  %14610 = shufflevector <2 x i64> %14601, <2 x i64> %14607, <2 x i32> <i32 0, i32 2>
  %14611 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %14610, <2 x i64>* %14611, align 16
  %14612 = shufflevector <2 x i64> %14601, <2 x i64> %14607, <2 x i32> <i32 1, i32 3>
  %14613 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %14612, <2 x i64>* %14613, align 16
  %14614 = shufflevector <2 x i64> %14603, <2 x i64> %14609, <2 x i32> <i32 0, i32 2>
  %14615 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %14614, <2 x i64>* %14615, align 16
  %14616 = shufflevector <2 x i64> %14603, <2 x i64> %14609, <2 x i32> <i32 1, i32 3>
  %14617 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %14616, <2 x i64>* %14617, align 16
  %14618 = load <4 x i32>, <4 x i32>* %14245, align 16
  %14619 = load <4 x i32>, <4 x i32>* %14261, align 16
  %14620 = shufflevector <4 x i32> %14618, <4 x i32> %14619, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14621 = bitcast <4 x i32> %14620 to <2 x i64>
  %14622 = shufflevector <4 x i32> %14618, <4 x i32> %14619, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14623 = bitcast <4 x i32> %14622 to <2 x i64>
  %14624 = load <4 x i32>, <4 x i32>* %14277, align 16
  %14625 = load <4 x i32>, <4 x i32>* %14293, align 16
  %14626 = shufflevector <4 x i32> %14624, <4 x i32> %14625, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14627 = bitcast <4 x i32> %14626 to <2 x i64>
  %14628 = shufflevector <4 x i32> %14624, <4 x i32> %14625, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14629 = bitcast <4 x i32> %14628 to <2 x i64>
  %14630 = shufflevector <2 x i64> %14621, <2 x i64> %14627, <2 x i32> <i32 0, i32 2>
  %14631 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %14630, <2 x i64>* %14631, align 16
  %14632 = shufflevector <2 x i64> %14621, <2 x i64> %14627, <2 x i32> <i32 1, i32 3>
  %14633 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %14632, <2 x i64>* %14633, align 16
  %14634 = shufflevector <2 x i64> %14623, <2 x i64> %14629, <2 x i32> <i32 0, i32 2>
  %14635 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %14634, <2 x i64>* %14635, align 16
  %14636 = shufflevector <2 x i64> %14623, <2 x i64> %14629, <2 x i32> <i32 1, i32 3>
  %14637 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %14636, <2 x i64>* %14637, align 16
  %14638 = load <4 x i32>, <4 x i32>* %14249, align 16
  %14639 = load <4 x i32>, <4 x i32>* %14265, align 16
  %14640 = shufflevector <4 x i32> %14638, <4 x i32> %14639, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14641 = bitcast <4 x i32> %14640 to <2 x i64>
  %14642 = shufflevector <4 x i32> %14638, <4 x i32> %14639, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14643 = bitcast <4 x i32> %14642 to <2 x i64>
  %14644 = load <4 x i32>, <4 x i32>* %14281, align 16
  %14645 = load <4 x i32>, <4 x i32>* %14297, align 16
  %14646 = shufflevector <4 x i32> %14644, <4 x i32> %14645, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14647 = bitcast <4 x i32> %14646 to <2 x i64>
  %14648 = shufflevector <4 x i32> %14644, <4 x i32> %14645, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14649 = bitcast <4 x i32> %14648 to <2 x i64>
  %14650 = shufflevector <2 x i64> %14641, <2 x i64> %14647, <2 x i32> <i32 0, i32 2>
  %14651 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %14650, <2 x i64>* %14651, align 16
  %14652 = shufflevector <2 x i64> %14641, <2 x i64> %14647, <2 x i32> <i32 1, i32 3>
  %14653 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %14652, <2 x i64>* %14653, align 16
  %14654 = shufflevector <2 x i64> %14643, <2 x i64> %14649, <2 x i32> <i32 0, i32 2>
  %14655 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %14654, <2 x i64>* %14655, align 16
  %14656 = shufflevector <2 x i64> %14643, <2 x i64> %14649, <2 x i32> <i32 1, i32 3>
  %14657 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %14656, <2 x i64>* %14657, align 16
  %14658 = load <4 x i32>, <4 x i32>* %14325, align 16
  %14659 = load <4 x i32>, <4 x i32>* %14341, align 16
  %14660 = shufflevector <4 x i32> %14658, <4 x i32> %14659, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14661 = bitcast <4 x i32> %14660 to <2 x i64>
  %14662 = shufflevector <4 x i32> %14658, <4 x i32> %14659, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14663 = bitcast <4 x i32> %14662 to <2 x i64>
  %14664 = load <4 x i32>, <4 x i32>* %14357, align 16
  %14665 = load <4 x i32>, <4 x i32>* %14373, align 16
  %14666 = shufflevector <4 x i32> %14664, <4 x i32> %14665, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14667 = bitcast <4 x i32> %14666 to <2 x i64>
  %14668 = shufflevector <4 x i32> %14664, <4 x i32> %14665, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14669 = bitcast <4 x i32> %14668 to <2 x i64>
  %14670 = shufflevector <2 x i64> %14661, <2 x i64> %14667, <2 x i32> <i32 0, i32 2>
  %14671 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %14670, <2 x i64>* %14671, align 16
  %14672 = shufflevector <2 x i64> %14661, <2 x i64> %14667, <2 x i32> <i32 1, i32 3>
  %14673 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %14672, <2 x i64>* %14673, align 16
  %14674 = shufflevector <2 x i64> %14663, <2 x i64> %14669, <2 x i32> <i32 0, i32 2>
  %14675 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %14674, <2 x i64>* %14675, align 16
  %14676 = shufflevector <2 x i64> %14663, <2 x i64> %14669, <2 x i32> <i32 1, i32 3>
  %14677 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %14676, <2 x i64>* %14677, align 16
  %14678 = load <4 x i32>, <4 x i32>* %14329, align 16
  %14679 = load <4 x i32>, <4 x i32>* %14345, align 16
  %14680 = shufflevector <4 x i32> %14678, <4 x i32> %14679, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14681 = bitcast <4 x i32> %14680 to <2 x i64>
  %14682 = shufflevector <4 x i32> %14678, <4 x i32> %14679, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14683 = bitcast <4 x i32> %14682 to <2 x i64>
  %14684 = load <4 x i32>, <4 x i32>* %14361, align 16
  %14685 = load <4 x i32>, <4 x i32>* %14377, align 16
  %14686 = shufflevector <4 x i32> %14684, <4 x i32> %14685, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14687 = bitcast <4 x i32> %14686 to <2 x i64>
  %14688 = shufflevector <4 x i32> %14684, <4 x i32> %14685, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14689 = bitcast <4 x i32> %14688 to <2 x i64>
  %14690 = shufflevector <2 x i64> %14681, <2 x i64> %14687, <2 x i32> <i32 0, i32 2>
  %14691 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %14690, <2 x i64>* %14691, align 16
  %14692 = shufflevector <2 x i64> %14681, <2 x i64> %14687, <2 x i32> <i32 1, i32 3>
  %14693 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %14692, <2 x i64>* %14693, align 16
  %14694 = shufflevector <2 x i64> %14683, <2 x i64> %14689, <2 x i32> <i32 0, i32 2>
  %14695 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %14694, <2 x i64>* %14695, align 16
  %14696 = shufflevector <2 x i64> %14683, <2 x i64> %14689, <2 x i32> <i32 1, i32 3>
  %14697 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %14696, <2 x i64>* %14697, align 16
  %14698 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  %14699 = sext i8 %14698 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %14043, <2 x i64>* nonnull %14068, i32 %14699, i32 4)
  %14700 = load <4 x i32>, <4 x i32>* %14077, align 16
  %14701 = load <4 x i32>, <4 x i32>* %14093, align 16
  %14702 = shufflevector <4 x i32> %14700, <4 x i32> %14701, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14703 = bitcast <4 x i32> %14702 to <2 x i64>
  %14704 = shufflevector <4 x i32> %14700, <4 x i32> %14701, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14705 = bitcast <4 x i32> %14704 to <2 x i64>
  %14706 = load <4 x i32>, <4 x i32>* %14109, align 16
  %14707 = load <4 x i32>, <4 x i32>* %14125, align 16
  %14708 = shufflevector <4 x i32> %14706, <4 x i32> %14707, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14709 = bitcast <4 x i32> %14708 to <2 x i64>
  %14710 = shufflevector <4 x i32> %14706, <4 x i32> %14707, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14711 = bitcast <4 x i32> %14710 to <2 x i64>
  %14712 = shufflevector <2 x i64> %14703, <2 x i64> %14709, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14712, <2 x i64>* %14043, align 16
  %14713 = shufflevector <2 x i64> %14703, <2 x i64> %14709, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14713, <2 x i64>* %14406, align 16
  %14714 = shufflevector <2 x i64> %14705, <2 x i64> %14711, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14714, <2 x i64>* %14408, align 16
  %14715 = shufflevector <2 x i64> %14705, <2 x i64> %14711, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14715, <2 x i64>* %14410, align 16
  %14716 = load <4 x i32>, <4 x i32>* %14081, align 16
  %14717 = load <4 x i32>, <4 x i32>* %14097, align 16
  %14718 = shufflevector <4 x i32> %14716, <4 x i32> %14717, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14719 = bitcast <4 x i32> %14718 to <2 x i64>
  %14720 = shufflevector <4 x i32> %14716, <4 x i32> %14717, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14721 = bitcast <4 x i32> %14720 to <2 x i64>
  %14722 = load <4 x i32>, <4 x i32>* %14113, align 16
  %14723 = load <4 x i32>, <4 x i32>* %14129, align 16
  %14724 = shufflevector <4 x i32> %14722, <4 x i32> %14723, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14725 = bitcast <4 x i32> %14724 to <2 x i64>
  %14726 = shufflevector <4 x i32> %14722, <4 x i32> %14723, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14727 = bitcast <4 x i32> %14726 to <2 x i64>
  %14728 = shufflevector <2 x i64> %14719, <2 x i64> %14725, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14728, <2 x i64>* %14420, align 16
  %14729 = shufflevector <2 x i64> %14719, <2 x i64> %14725, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14729, <2 x i64>* %14422, align 16
  %14730 = shufflevector <2 x i64> %14721, <2 x i64> %14727, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14730, <2 x i64>* %14424, align 16
  %14731 = shufflevector <2 x i64> %14721, <2 x i64> %14727, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14731, <2 x i64>* %14426, align 16
  %14732 = load <4 x i32>, <4 x i32>* %14157, align 16
  %14733 = load <4 x i32>, <4 x i32>* %14173, align 16
  %14734 = shufflevector <4 x i32> %14732, <4 x i32> %14733, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14735 = bitcast <4 x i32> %14734 to <2 x i64>
  %14736 = shufflevector <4 x i32> %14732, <4 x i32> %14733, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14737 = bitcast <4 x i32> %14736 to <2 x i64>
  %14738 = load <4 x i32>, <4 x i32>* %14189, align 16
  %14739 = load <4 x i32>, <4 x i32>* %14205, align 16
  %14740 = shufflevector <4 x i32> %14738, <4 x i32> %14739, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14741 = bitcast <4 x i32> %14740 to <2 x i64>
  %14742 = shufflevector <4 x i32> %14738, <4 x i32> %14739, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14743 = bitcast <4 x i32> %14742 to <2 x i64>
  %14744 = shufflevector <2 x i64> %14735, <2 x i64> %14741, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14744, <2 x i64>* %14439, align 16
  %14745 = shufflevector <2 x i64> %14735, <2 x i64> %14741, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14745, <2 x i64>* %14441, align 16
  %14746 = shufflevector <2 x i64> %14737, <2 x i64> %14743, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14746, <2 x i64>* %14443, align 16
  %14747 = shufflevector <2 x i64> %14737, <2 x i64> %14743, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14747, <2 x i64>* %14445, align 16
  %14748 = load <4 x i32>, <4 x i32>* %14161, align 16
  %14749 = load <4 x i32>, <4 x i32>* %14177, align 16
  %14750 = shufflevector <4 x i32> %14748, <4 x i32> %14749, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14751 = bitcast <4 x i32> %14750 to <2 x i64>
  %14752 = shufflevector <4 x i32> %14748, <4 x i32> %14749, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14753 = bitcast <4 x i32> %14752 to <2 x i64>
  %14754 = load <4 x i32>, <4 x i32>* %14193, align 16
  %14755 = load <4 x i32>, <4 x i32>* %14209, align 16
  %14756 = shufflevector <4 x i32> %14754, <4 x i32> %14755, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14757 = bitcast <4 x i32> %14756 to <2 x i64>
  %14758 = shufflevector <4 x i32> %14754, <4 x i32> %14755, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14759 = bitcast <4 x i32> %14758 to <2 x i64>
  %14760 = shufflevector <2 x i64> %14751, <2 x i64> %14757, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14760, <2 x i64>* %14459, align 16
  %14761 = shufflevector <2 x i64> %14751, <2 x i64> %14757, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14761, <2 x i64>* %14461, align 16
  %14762 = shufflevector <2 x i64> %14753, <2 x i64> %14759, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14762, <2 x i64>* %14463, align 16
  %14763 = shufflevector <2 x i64> %14753, <2 x i64> %14759, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14763, <2 x i64>* %14465, align 16
  %14764 = load <4 x i32>, <4 x i32>* %14085, align 16
  %14765 = load <4 x i32>, <4 x i32>* %14101, align 16
  %14766 = shufflevector <4 x i32> %14764, <4 x i32> %14765, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14767 = bitcast <4 x i32> %14766 to <2 x i64>
  %14768 = shufflevector <4 x i32> %14764, <4 x i32> %14765, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14769 = bitcast <4 x i32> %14768 to <2 x i64>
  %14770 = load <4 x i32>, <4 x i32>* %14117, align 16
  %14771 = load <4 x i32>, <4 x i32>* %14133, align 16
  %14772 = shufflevector <4 x i32> %14770, <4 x i32> %14771, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14773 = bitcast <4 x i32> %14772 to <2 x i64>
  %14774 = shufflevector <4 x i32> %14770, <4 x i32> %14771, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14775 = bitcast <4 x i32> %14774 to <2 x i64>
  %14776 = shufflevector <2 x i64> %14767, <2 x i64> %14773, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14776, <2 x i64>* %14475, align 16
  %14777 = shufflevector <2 x i64> %14767, <2 x i64> %14773, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14777, <2 x i64>* %14477, align 16
  %14778 = shufflevector <2 x i64> %14769, <2 x i64> %14775, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14778, <2 x i64>* %14479, align 16
  %14779 = shufflevector <2 x i64> %14769, <2 x i64> %14775, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14779, <2 x i64>* %14481, align 16
  %14780 = load <4 x i32>, <4 x i32>* %14089, align 16
  %14781 = load <4 x i32>, <4 x i32>* %14105, align 16
  %14782 = shufflevector <4 x i32> %14780, <4 x i32> %14781, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14783 = bitcast <4 x i32> %14782 to <2 x i64>
  %14784 = shufflevector <4 x i32> %14780, <4 x i32> %14781, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14785 = bitcast <4 x i32> %14784 to <2 x i64>
  %14786 = load <4 x i32>, <4 x i32>* %14121, align 16
  %14787 = load <4 x i32>, <4 x i32>* %14137, align 16
  %14788 = shufflevector <4 x i32> %14786, <4 x i32> %14787, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14789 = bitcast <4 x i32> %14788 to <2 x i64>
  %14790 = shufflevector <4 x i32> %14786, <4 x i32> %14787, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14791 = bitcast <4 x i32> %14790 to <2 x i64>
  %14792 = shufflevector <2 x i64> %14783, <2 x i64> %14789, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14792, <2 x i64>* %14491, align 16
  %14793 = shufflevector <2 x i64> %14783, <2 x i64> %14789, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14793, <2 x i64>* %14493, align 16
  %14794 = shufflevector <2 x i64> %14785, <2 x i64> %14791, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14794, <2 x i64>* %14495, align 16
  %14795 = shufflevector <2 x i64> %14785, <2 x i64> %14791, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14795, <2 x i64>* %14497, align 16
  %14796 = load <4 x i32>, <4 x i32>* %14165, align 16
  %14797 = load <4 x i32>, <4 x i32>* %14181, align 16
  %14798 = shufflevector <4 x i32> %14796, <4 x i32> %14797, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14799 = bitcast <4 x i32> %14798 to <2 x i64>
  %14800 = shufflevector <4 x i32> %14796, <4 x i32> %14797, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14801 = bitcast <4 x i32> %14800 to <2 x i64>
  %14802 = load <4 x i32>, <4 x i32>* %14197, align 16
  %14803 = load <4 x i32>, <4 x i32>* %14213, align 16
  %14804 = shufflevector <4 x i32> %14802, <4 x i32> %14803, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14805 = bitcast <4 x i32> %14804 to <2 x i64>
  %14806 = shufflevector <4 x i32> %14802, <4 x i32> %14803, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14807 = bitcast <4 x i32> %14806 to <2 x i64>
  %14808 = shufflevector <2 x i64> %14799, <2 x i64> %14805, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14808, <2 x i64>* %14511, align 16
  %14809 = shufflevector <2 x i64> %14799, <2 x i64> %14805, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14809, <2 x i64>* %14513, align 16
  %14810 = shufflevector <2 x i64> %14801, <2 x i64> %14807, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14810, <2 x i64>* %14515, align 16
  %14811 = shufflevector <2 x i64> %14801, <2 x i64> %14807, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14811, <2 x i64>* %14517, align 16
  %14812 = load <4 x i32>, <4 x i32>* %14169, align 16
  %14813 = load <4 x i32>, <4 x i32>* %14185, align 16
  %14814 = shufflevector <4 x i32> %14812, <4 x i32> %14813, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14815 = bitcast <4 x i32> %14814 to <2 x i64>
  %14816 = shufflevector <4 x i32> %14812, <4 x i32> %14813, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14817 = bitcast <4 x i32> %14816 to <2 x i64>
  %14818 = load <4 x i32>, <4 x i32>* %14201, align 16
  %14819 = load <4 x i32>, <4 x i32>* %14217, align 16
  %14820 = shufflevector <4 x i32> %14818, <4 x i32> %14819, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14821 = bitcast <4 x i32> %14820 to <2 x i64>
  %14822 = shufflevector <4 x i32> %14818, <4 x i32> %14819, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14823 = bitcast <4 x i32> %14822 to <2 x i64>
  %14824 = shufflevector <2 x i64> %14815, <2 x i64> %14821, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14824, <2 x i64>* %14531, align 16
  %14825 = shufflevector <2 x i64> %14815, <2 x i64> %14821, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14825, <2 x i64>* %14533, align 16
  %14826 = shufflevector <2 x i64> %14817, <2 x i64> %14823, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14826, <2 x i64>* %14535, align 16
  %14827 = shufflevector <2 x i64> %14817, <2 x i64> %14823, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14827, <2 x i64>* %14537, align 16
  %14828 = load <4 x i32>, <4 x i32>* %14237, align 16
  %14829 = load <4 x i32>, <4 x i32>* %14253, align 16
  %14830 = shufflevector <4 x i32> %14828, <4 x i32> %14829, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14831 = bitcast <4 x i32> %14830 to <2 x i64>
  %14832 = shufflevector <4 x i32> %14828, <4 x i32> %14829, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14833 = bitcast <4 x i32> %14832 to <2 x i64>
  %14834 = load <4 x i32>, <4 x i32>* %14269, align 16
  %14835 = load <4 x i32>, <4 x i32>* %14285, align 16
  %14836 = shufflevector <4 x i32> %14834, <4 x i32> %14835, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14837 = bitcast <4 x i32> %14836 to <2 x i64>
  %14838 = shufflevector <4 x i32> %14834, <4 x i32> %14835, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14839 = bitcast <4 x i32> %14838 to <2 x i64>
  %14840 = shufflevector <2 x i64> %14831, <2 x i64> %14837, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14840, <2 x i64>* %14551, align 16
  %14841 = shufflevector <2 x i64> %14831, <2 x i64> %14837, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14841, <2 x i64>* %14553, align 16
  %14842 = shufflevector <2 x i64> %14833, <2 x i64> %14839, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14842, <2 x i64>* %14555, align 16
  %14843 = shufflevector <2 x i64> %14833, <2 x i64> %14839, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14843, <2 x i64>* %14557, align 16
  %14844 = load <4 x i32>, <4 x i32>* %14241, align 16
  %14845 = load <4 x i32>, <4 x i32>* %14257, align 16
  %14846 = shufflevector <4 x i32> %14844, <4 x i32> %14845, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14847 = bitcast <4 x i32> %14846 to <2 x i64>
  %14848 = shufflevector <4 x i32> %14844, <4 x i32> %14845, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14849 = bitcast <4 x i32> %14848 to <2 x i64>
  %14850 = load <4 x i32>, <4 x i32>* %14273, align 16
  %14851 = load <4 x i32>, <4 x i32>* %14289, align 16
  %14852 = shufflevector <4 x i32> %14850, <4 x i32> %14851, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14853 = bitcast <4 x i32> %14852 to <2 x i64>
  %14854 = shufflevector <4 x i32> %14850, <4 x i32> %14851, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14855 = bitcast <4 x i32> %14854 to <2 x i64>
  %14856 = shufflevector <2 x i64> %14847, <2 x i64> %14853, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14856, <2 x i64>* %14571, align 16
  %14857 = shufflevector <2 x i64> %14847, <2 x i64> %14853, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14857, <2 x i64>* %14573, align 16
  %14858 = shufflevector <2 x i64> %14849, <2 x i64> %14855, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14858, <2 x i64>* %14575, align 16
  %14859 = shufflevector <2 x i64> %14849, <2 x i64> %14855, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14859, <2 x i64>* %14577, align 16
  %14860 = load <4 x i32>, <4 x i32>* %14317, align 16
  %14861 = load <4 x i32>, <4 x i32>* %14333, align 16
  %14862 = shufflevector <4 x i32> %14860, <4 x i32> %14861, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14863 = bitcast <4 x i32> %14862 to <2 x i64>
  %14864 = shufflevector <4 x i32> %14860, <4 x i32> %14861, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14865 = bitcast <4 x i32> %14864 to <2 x i64>
  %14866 = load <4 x i32>, <4 x i32>* %14349, align 16
  %14867 = load <4 x i32>, <4 x i32>* %14365, align 16
  %14868 = shufflevector <4 x i32> %14866, <4 x i32> %14867, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14869 = bitcast <4 x i32> %14868 to <2 x i64>
  %14870 = shufflevector <4 x i32> %14866, <4 x i32> %14867, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14871 = bitcast <4 x i32> %14870 to <2 x i64>
  %14872 = shufflevector <2 x i64> %14863, <2 x i64> %14869, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14872, <2 x i64>* %14591, align 16
  %14873 = shufflevector <2 x i64> %14863, <2 x i64> %14869, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14873, <2 x i64>* %14593, align 16
  %14874 = shufflevector <2 x i64> %14865, <2 x i64> %14871, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14874, <2 x i64>* %14595, align 16
  %14875 = shufflevector <2 x i64> %14865, <2 x i64> %14871, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14875, <2 x i64>* %14597, align 16
  %14876 = load <4 x i32>, <4 x i32>* %14321, align 16
  %14877 = load <4 x i32>, <4 x i32>* %14337, align 16
  %14878 = shufflevector <4 x i32> %14876, <4 x i32> %14877, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14879 = bitcast <4 x i32> %14878 to <2 x i64>
  %14880 = shufflevector <4 x i32> %14876, <4 x i32> %14877, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14881 = bitcast <4 x i32> %14880 to <2 x i64>
  %14882 = load <4 x i32>, <4 x i32>* %14353, align 16
  %14883 = load <4 x i32>, <4 x i32>* %14369, align 16
  %14884 = shufflevector <4 x i32> %14882, <4 x i32> %14883, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14885 = bitcast <4 x i32> %14884 to <2 x i64>
  %14886 = shufflevector <4 x i32> %14882, <4 x i32> %14883, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14887 = bitcast <4 x i32> %14886 to <2 x i64>
  %14888 = shufflevector <2 x i64> %14879, <2 x i64> %14885, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14888, <2 x i64>* %14611, align 16
  %14889 = shufflevector <2 x i64> %14879, <2 x i64> %14885, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14889, <2 x i64>* %14613, align 16
  %14890 = shufflevector <2 x i64> %14881, <2 x i64> %14887, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14890, <2 x i64>* %14615, align 16
  %14891 = shufflevector <2 x i64> %14881, <2 x i64> %14887, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14891, <2 x i64>* %14617, align 16
  %14892 = load <4 x i32>, <4 x i32>* %14245, align 16
  %14893 = load <4 x i32>, <4 x i32>* %14261, align 16
  %14894 = shufflevector <4 x i32> %14892, <4 x i32> %14893, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14895 = bitcast <4 x i32> %14894 to <2 x i64>
  %14896 = shufflevector <4 x i32> %14892, <4 x i32> %14893, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14897 = bitcast <4 x i32> %14896 to <2 x i64>
  %14898 = load <4 x i32>, <4 x i32>* %14277, align 16
  %14899 = load <4 x i32>, <4 x i32>* %14293, align 16
  %14900 = shufflevector <4 x i32> %14898, <4 x i32> %14899, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14901 = bitcast <4 x i32> %14900 to <2 x i64>
  %14902 = shufflevector <4 x i32> %14898, <4 x i32> %14899, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14903 = bitcast <4 x i32> %14902 to <2 x i64>
  %14904 = shufflevector <2 x i64> %14895, <2 x i64> %14901, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14904, <2 x i64>* %14631, align 16
  %14905 = shufflevector <2 x i64> %14895, <2 x i64> %14901, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14905, <2 x i64>* %14633, align 16
  %14906 = shufflevector <2 x i64> %14897, <2 x i64> %14903, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14906, <2 x i64>* %14635, align 16
  %14907 = shufflevector <2 x i64> %14897, <2 x i64> %14903, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14907, <2 x i64>* %14637, align 16
  %14908 = load <4 x i32>, <4 x i32>* %14249, align 16
  %14909 = load <4 x i32>, <4 x i32>* %14265, align 16
  %14910 = shufflevector <4 x i32> %14908, <4 x i32> %14909, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14911 = bitcast <4 x i32> %14910 to <2 x i64>
  %14912 = shufflevector <4 x i32> %14908, <4 x i32> %14909, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14913 = bitcast <4 x i32> %14912 to <2 x i64>
  %14914 = load <4 x i32>, <4 x i32>* %14281, align 16
  %14915 = load <4 x i32>, <4 x i32>* %14297, align 16
  %14916 = shufflevector <4 x i32> %14914, <4 x i32> %14915, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14917 = bitcast <4 x i32> %14916 to <2 x i64>
  %14918 = shufflevector <4 x i32> %14914, <4 x i32> %14915, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14919 = bitcast <4 x i32> %14918 to <2 x i64>
  %14920 = shufflevector <2 x i64> %14911, <2 x i64> %14917, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14920, <2 x i64>* %14651, align 16
  %14921 = shufflevector <2 x i64> %14911, <2 x i64> %14917, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14921, <2 x i64>* %14653, align 16
  %14922 = shufflevector <2 x i64> %14913, <2 x i64> %14919, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14922, <2 x i64>* %14655, align 16
  %14923 = shufflevector <2 x i64> %14913, <2 x i64> %14919, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14923, <2 x i64>* %14657, align 16
  %14924 = load <4 x i32>, <4 x i32>* %14325, align 16
  %14925 = load <4 x i32>, <4 x i32>* %14341, align 16
  %14926 = shufflevector <4 x i32> %14924, <4 x i32> %14925, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14927 = bitcast <4 x i32> %14926 to <2 x i64>
  %14928 = shufflevector <4 x i32> %14924, <4 x i32> %14925, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14929 = bitcast <4 x i32> %14928 to <2 x i64>
  %14930 = load <4 x i32>, <4 x i32>* %14357, align 16
  %14931 = load <4 x i32>, <4 x i32>* %14373, align 16
  %14932 = shufflevector <4 x i32> %14930, <4 x i32> %14931, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14933 = bitcast <4 x i32> %14932 to <2 x i64>
  %14934 = shufflevector <4 x i32> %14930, <4 x i32> %14931, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14935 = bitcast <4 x i32> %14934 to <2 x i64>
  %14936 = shufflevector <2 x i64> %14927, <2 x i64> %14933, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14936, <2 x i64>* %14671, align 16
  %14937 = shufflevector <2 x i64> %14927, <2 x i64> %14933, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14937, <2 x i64>* %14673, align 16
  %14938 = shufflevector <2 x i64> %14929, <2 x i64> %14935, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14938, <2 x i64>* %14675, align 16
  %14939 = shufflevector <2 x i64> %14929, <2 x i64> %14935, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14939, <2 x i64>* %14677, align 16
  %14940 = load <4 x i32>, <4 x i32>* %14329, align 16
  %14941 = load <4 x i32>, <4 x i32>* %14345, align 16
  %14942 = shufflevector <4 x i32> %14940, <4 x i32> %14941, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14943 = bitcast <4 x i32> %14942 to <2 x i64>
  %14944 = shufflevector <4 x i32> %14940, <4 x i32> %14941, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14945 = bitcast <4 x i32> %14944 to <2 x i64>
  %14946 = load <4 x i32>, <4 x i32>* %14361, align 16
  %14947 = load <4 x i32>, <4 x i32>* %14377, align 16
  %14948 = shufflevector <4 x i32> %14946, <4 x i32> %14947, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %14949 = bitcast <4 x i32> %14948 to <2 x i64>
  %14950 = shufflevector <4 x i32> %14946, <4 x i32> %14947, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %14951 = bitcast <4 x i32> %14950 to <2 x i64>
  %14952 = shufflevector <2 x i64> %14943, <2 x i64> %14949, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14952, <2 x i64>* %14691, align 16
  %14953 = shufflevector <2 x i64> %14943, <2 x i64> %14949, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14953, <2 x i64>* %14693, align 16
  %14954 = shufflevector <2 x i64> %14945, <2 x i64> %14951, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %14954, <2 x i64>* %14695, align 16
  %14955 = shufflevector <2 x i64> %14945, <2 x i64> %14951, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %14955, <2 x i64>* %14697, align 16
  %14956 = bitcast i32* %1 to <2 x i64>*
  %14957 = load <2 x i64>, <2 x i64>* %14043, align 16
  store <2 x i64> %14957, <2 x i64>* %14956, align 16
  %14958 = getelementptr inbounds i32, i32* %1, i64 4
  %14959 = bitcast i32* %14958 to <2 x i64>*
  %14960 = load <2 x i64>, <2 x i64>* %14439, align 16
  store <2 x i64> %14960, <2 x i64>* %14959, align 16
  %14961 = getelementptr inbounds i32, i32* %1, i64 8
  %14962 = bitcast i32* %14961 to <2 x i64>*
  %14963 = load <2 x i64>, <2 x i64>* %14551, align 16
  store <2 x i64> %14963, <2 x i64>* %14962, align 16
  %14964 = getelementptr inbounds i32, i32* %1, i64 12
  %14965 = bitcast i32* %14964 to <2 x i64>*
  %14966 = load <2 x i64>, <2 x i64>* %14591, align 16
  store <2 x i64> %14966, <2 x i64>* %14965, align 16
  %14967 = getelementptr inbounds i32, i32* %1, i64 16
  %14968 = bitcast i32* %14967 to <2 x i64>*
  %14969 = load <2 x i64>, <2 x i64>* %14406, align 16
  store <2 x i64> %14969, <2 x i64>* %14968, align 16
  %14970 = getelementptr inbounds i32, i32* %1, i64 20
  %14971 = bitcast i32* %14970 to <2 x i64>*
  %14972 = load <2 x i64>, <2 x i64>* %14441, align 16
  store <2 x i64> %14972, <2 x i64>* %14971, align 16
  %14973 = getelementptr inbounds i32, i32* %1, i64 24
  %14974 = bitcast i32* %14973 to <2 x i64>*
  %14975 = load <2 x i64>, <2 x i64>* %14553, align 16
  store <2 x i64> %14975, <2 x i64>* %14974, align 16
  %14976 = getelementptr inbounds i32, i32* %1, i64 28
  %14977 = bitcast i32* %14976 to <2 x i64>*
  %14978 = load <2 x i64>, <2 x i64>* %14593, align 16
  store <2 x i64> %14978, <2 x i64>* %14977, align 16
  %14979 = getelementptr inbounds i32, i32* %1, i64 32
  %14980 = bitcast i32* %14979 to <2 x i64>*
  %14981 = load <2 x i64>, <2 x i64>* %14408, align 16
  store <2 x i64> %14981, <2 x i64>* %14980, align 16
  %14982 = getelementptr inbounds i32, i32* %1, i64 36
  %14983 = bitcast i32* %14982 to <2 x i64>*
  %14984 = load <2 x i64>, <2 x i64>* %14443, align 16
  store <2 x i64> %14984, <2 x i64>* %14983, align 16
  %14985 = getelementptr inbounds i32, i32* %1, i64 40
  %14986 = bitcast i32* %14985 to <2 x i64>*
  %14987 = load <2 x i64>, <2 x i64>* %14555, align 16
  store <2 x i64> %14987, <2 x i64>* %14986, align 16
  %14988 = getelementptr inbounds i32, i32* %1, i64 44
  %14989 = bitcast i32* %14988 to <2 x i64>*
  %14990 = load <2 x i64>, <2 x i64>* %14595, align 16
  store <2 x i64> %14990, <2 x i64>* %14989, align 16
  %14991 = getelementptr inbounds i32, i32* %1, i64 48
  %14992 = bitcast i32* %14991 to <2 x i64>*
  %14993 = load <2 x i64>, <2 x i64>* %14410, align 16
  store <2 x i64> %14993, <2 x i64>* %14992, align 16
  %14994 = getelementptr inbounds i32, i32* %1, i64 52
  %14995 = bitcast i32* %14994 to <2 x i64>*
  %14996 = load <2 x i64>, <2 x i64>* %14445, align 16
  store <2 x i64> %14996, <2 x i64>* %14995, align 16
  %14997 = getelementptr inbounds i32, i32* %1, i64 56
  %14998 = bitcast i32* %14997 to <2 x i64>*
  %14999 = load <2 x i64>, <2 x i64>* %14557, align 16
  store <2 x i64> %14999, <2 x i64>* %14998, align 16
  %15000 = getelementptr inbounds i32, i32* %1, i64 60
  %15001 = bitcast i32* %15000 to <2 x i64>*
  %15002 = load <2 x i64>, <2 x i64>* %14597, align 16
  store <2 x i64> %15002, <2 x i64>* %15001, align 16
  %15003 = getelementptr inbounds i32, i32* %1, i64 64
  %15004 = bitcast i32* %15003 to <2 x i64>*
  %15005 = load <2 x i64>, <2 x i64>* %14420, align 16
  store <2 x i64> %15005, <2 x i64>* %15004, align 16
  %15006 = getelementptr inbounds i32, i32* %1, i64 68
  %15007 = bitcast i32* %15006 to <2 x i64>*
  %15008 = load <2 x i64>, <2 x i64>* %14459, align 16
  store <2 x i64> %15008, <2 x i64>* %15007, align 16
  %15009 = getelementptr inbounds i32, i32* %1, i64 72
  %15010 = bitcast i32* %15009 to <2 x i64>*
  %15011 = load <2 x i64>, <2 x i64>* %14571, align 16
  store <2 x i64> %15011, <2 x i64>* %15010, align 16
  %15012 = getelementptr inbounds i32, i32* %1, i64 76
  %15013 = bitcast i32* %15012 to <2 x i64>*
  %15014 = load <2 x i64>, <2 x i64>* %14611, align 16
  store <2 x i64> %15014, <2 x i64>* %15013, align 16
  %15015 = getelementptr inbounds i32, i32* %1, i64 80
  %15016 = bitcast i32* %15015 to <2 x i64>*
  %15017 = load <2 x i64>, <2 x i64>* %14422, align 16
  store <2 x i64> %15017, <2 x i64>* %15016, align 16
  %15018 = getelementptr inbounds i32, i32* %1, i64 84
  %15019 = bitcast i32* %15018 to <2 x i64>*
  %15020 = load <2 x i64>, <2 x i64>* %14461, align 16
  store <2 x i64> %15020, <2 x i64>* %15019, align 16
  %15021 = getelementptr inbounds i32, i32* %1, i64 88
  %15022 = bitcast i32* %15021 to <2 x i64>*
  %15023 = load <2 x i64>, <2 x i64>* %14573, align 16
  store <2 x i64> %15023, <2 x i64>* %15022, align 16
  %15024 = getelementptr inbounds i32, i32* %1, i64 92
  %15025 = bitcast i32* %15024 to <2 x i64>*
  %15026 = load <2 x i64>, <2 x i64>* %14613, align 16
  store <2 x i64> %15026, <2 x i64>* %15025, align 16
  %15027 = getelementptr inbounds i32, i32* %1, i64 96
  %15028 = bitcast i32* %15027 to <2 x i64>*
  %15029 = load <2 x i64>, <2 x i64>* %14424, align 16
  store <2 x i64> %15029, <2 x i64>* %15028, align 16
  %15030 = getelementptr inbounds i32, i32* %1, i64 100
  %15031 = bitcast i32* %15030 to <2 x i64>*
  %15032 = load <2 x i64>, <2 x i64>* %14463, align 16
  store <2 x i64> %15032, <2 x i64>* %15031, align 16
  %15033 = getelementptr inbounds i32, i32* %1, i64 104
  %15034 = bitcast i32* %15033 to <2 x i64>*
  %15035 = load <2 x i64>, <2 x i64>* %14575, align 16
  store <2 x i64> %15035, <2 x i64>* %15034, align 16
  %15036 = getelementptr inbounds i32, i32* %1, i64 108
  %15037 = bitcast i32* %15036 to <2 x i64>*
  %15038 = load <2 x i64>, <2 x i64>* %14615, align 16
  store <2 x i64> %15038, <2 x i64>* %15037, align 16
  %15039 = getelementptr inbounds i32, i32* %1, i64 112
  %15040 = bitcast i32* %15039 to <2 x i64>*
  %15041 = load <2 x i64>, <2 x i64>* %14426, align 16
  store <2 x i64> %15041, <2 x i64>* %15040, align 16
  %15042 = getelementptr inbounds i32, i32* %1, i64 116
  %15043 = bitcast i32* %15042 to <2 x i64>*
  %15044 = load <2 x i64>, <2 x i64>* %14465, align 16
  store <2 x i64> %15044, <2 x i64>* %15043, align 16
  %15045 = getelementptr inbounds i32, i32* %1, i64 120
  %15046 = bitcast i32* %15045 to <2 x i64>*
  %15047 = load <2 x i64>, <2 x i64>* %14577, align 16
  store <2 x i64> %15047, <2 x i64>* %15046, align 16
  %15048 = getelementptr inbounds i32, i32* %1, i64 124
  %15049 = bitcast i32* %15048 to <2 x i64>*
  %15050 = load <2 x i64>, <2 x i64>* %14617, align 16
  store <2 x i64> %15050, <2 x i64>* %15049, align 16
  %15051 = getelementptr inbounds i32, i32* %1, i64 128
  %15052 = bitcast i32* %15051 to <2 x i64>*
  %15053 = load <2 x i64>, <2 x i64>* %14475, align 16
  store <2 x i64> %15053, <2 x i64>* %15052, align 16
  %15054 = getelementptr inbounds i32, i32* %1, i64 132
  %15055 = bitcast i32* %15054 to <2 x i64>*
  %15056 = load <2 x i64>, <2 x i64>* %14511, align 16
  store <2 x i64> %15056, <2 x i64>* %15055, align 16
  %15057 = getelementptr inbounds i32, i32* %1, i64 136
  %15058 = bitcast i32* %15057 to <2 x i64>*
  %15059 = load <2 x i64>, <2 x i64>* %14631, align 16
  store <2 x i64> %15059, <2 x i64>* %15058, align 16
  %15060 = getelementptr inbounds i32, i32* %1, i64 140
  %15061 = bitcast i32* %15060 to <2 x i64>*
  %15062 = load <2 x i64>, <2 x i64>* %14671, align 16
  store <2 x i64> %15062, <2 x i64>* %15061, align 16
  %15063 = getelementptr inbounds i32, i32* %1, i64 144
  %15064 = bitcast i32* %15063 to <2 x i64>*
  %15065 = load <2 x i64>, <2 x i64>* %14477, align 16
  store <2 x i64> %15065, <2 x i64>* %15064, align 16
  %15066 = getelementptr inbounds i32, i32* %1, i64 148
  %15067 = bitcast i32* %15066 to <2 x i64>*
  %15068 = load <2 x i64>, <2 x i64>* %14513, align 16
  store <2 x i64> %15068, <2 x i64>* %15067, align 16
  %15069 = getelementptr inbounds i32, i32* %1, i64 152
  %15070 = bitcast i32* %15069 to <2 x i64>*
  %15071 = load <2 x i64>, <2 x i64>* %14633, align 16
  store <2 x i64> %15071, <2 x i64>* %15070, align 16
  %15072 = getelementptr inbounds i32, i32* %1, i64 156
  %15073 = bitcast i32* %15072 to <2 x i64>*
  %15074 = load <2 x i64>, <2 x i64>* %14673, align 16
  store <2 x i64> %15074, <2 x i64>* %15073, align 16
  %15075 = getelementptr inbounds i32, i32* %1, i64 160
  %15076 = bitcast i32* %15075 to <2 x i64>*
  %15077 = load <2 x i64>, <2 x i64>* %14479, align 16
  store <2 x i64> %15077, <2 x i64>* %15076, align 16
  %15078 = getelementptr inbounds i32, i32* %1, i64 164
  %15079 = bitcast i32* %15078 to <2 x i64>*
  %15080 = load <2 x i64>, <2 x i64>* %14515, align 16
  store <2 x i64> %15080, <2 x i64>* %15079, align 16
  %15081 = getelementptr inbounds i32, i32* %1, i64 168
  %15082 = bitcast i32* %15081 to <2 x i64>*
  %15083 = load <2 x i64>, <2 x i64>* %14635, align 16
  store <2 x i64> %15083, <2 x i64>* %15082, align 16
  %15084 = getelementptr inbounds i32, i32* %1, i64 172
  %15085 = bitcast i32* %15084 to <2 x i64>*
  %15086 = load <2 x i64>, <2 x i64>* %14675, align 16
  store <2 x i64> %15086, <2 x i64>* %15085, align 16
  %15087 = getelementptr inbounds i32, i32* %1, i64 176
  %15088 = bitcast i32* %15087 to <2 x i64>*
  %15089 = load <2 x i64>, <2 x i64>* %14481, align 16
  store <2 x i64> %15089, <2 x i64>* %15088, align 16
  %15090 = getelementptr inbounds i32, i32* %1, i64 180
  %15091 = bitcast i32* %15090 to <2 x i64>*
  %15092 = load <2 x i64>, <2 x i64>* %14517, align 16
  store <2 x i64> %15092, <2 x i64>* %15091, align 16
  %15093 = getelementptr inbounds i32, i32* %1, i64 184
  %15094 = bitcast i32* %15093 to <2 x i64>*
  %15095 = load <2 x i64>, <2 x i64>* %14637, align 16
  store <2 x i64> %15095, <2 x i64>* %15094, align 16
  %15096 = getelementptr inbounds i32, i32* %1, i64 188
  %15097 = bitcast i32* %15096 to <2 x i64>*
  %15098 = load <2 x i64>, <2 x i64>* %14677, align 16
  store <2 x i64> %15098, <2 x i64>* %15097, align 16
  %15099 = getelementptr inbounds i32, i32* %1, i64 192
  %15100 = bitcast i32* %15099 to <2 x i64>*
  %15101 = load <2 x i64>, <2 x i64>* %14491, align 16
  store <2 x i64> %15101, <2 x i64>* %15100, align 16
  %15102 = getelementptr inbounds i32, i32* %1, i64 196
  %15103 = bitcast i32* %15102 to <2 x i64>*
  %15104 = load <2 x i64>, <2 x i64>* %14531, align 16
  store <2 x i64> %15104, <2 x i64>* %15103, align 16
  %15105 = getelementptr inbounds i32, i32* %1, i64 200
  %15106 = bitcast i32* %15105 to <2 x i64>*
  %15107 = load <2 x i64>, <2 x i64>* %14651, align 16
  store <2 x i64> %15107, <2 x i64>* %15106, align 16
  %15108 = getelementptr inbounds i32, i32* %1, i64 204
  %15109 = bitcast i32* %15108 to <2 x i64>*
  %15110 = load <2 x i64>, <2 x i64>* %14691, align 16
  store <2 x i64> %15110, <2 x i64>* %15109, align 16
  %15111 = getelementptr inbounds i32, i32* %1, i64 208
  %15112 = bitcast i32* %15111 to <2 x i64>*
  %15113 = load <2 x i64>, <2 x i64>* %14493, align 16
  store <2 x i64> %15113, <2 x i64>* %15112, align 16
  %15114 = getelementptr inbounds i32, i32* %1, i64 212
  %15115 = bitcast i32* %15114 to <2 x i64>*
  %15116 = load <2 x i64>, <2 x i64>* %14533, align 16
  store <2 x i64> %15116, <2 x i64>* %15115, align 16
  %15117 = getelementptr inbounds i32, i32* %1, i64 216
  %15118 = bitcast i32* %15117 to <2 x i64>*
  %15119 = load <2 x i64>, <2 x i64>* %14653, align 16
  store <2 x i64> %15119, <2 x i64>* %15118, align 16
  %15120 = getelementptr inbounds i32, i32* %1, i64 220
  %15121 = bitcast i32* %15120 to <2 x i64>*
  %15122 = load <2 x i64>, <2 x i64>* %14693, align 16
  store <2 x i64> %15122, <2 x i64>* %15121, align 16
  %15123 = getelementptr inbounds i32, i32* %1, i64 224
  %15124 = bitcast i32* %15123 to <2 x i64>*
  %15125 = load <2 x i64>, <2 x i64>* %14495, align 16
  store <2 x i64> %15125, <2 x i64>* %15124, align 16
  %15126 = getelementptr inbounds i32, i32* %1, i64 228
  %15127 = bitcast i32* %15126 to <2 x i64>*
  %15128 = load <2 x i64>, <2 x i64>* %14535, align 16
  store <2 x i64> %15128, <2 x i64>* %15127, align 16
  %15129 = getelementptr inbounds i32, i32* %1, i64 232
  %15130 = bitcast i32* %15129 to <2 x i64>*
  %15131 = load <2 x i64>, <2 x i64>* %14655, align 16
  store <2 x i64> %15131, <2 x i64>* %15130, align 16
  %15132 = getelementptr inbounds i32, i32* %1, i64 236
  %15133 = bitcast i32* %15132 to <2 x i64>*
  %15134 = load <2 x i64>, <2 x i64>* %14695, align 16
  store <2 x i64> %15134, <2 x i64>* %15133, align 16
  %15135 = getelementptr inbounds i32, i32* %1, i64 240
  %15136 = bitcast i32* %15135 to <2 x i64>*
  %15137 = load <2 x i64>, <2 x i64>* %14497, align 16
  store <2 x i64> %15137, <2 x i64>* %15136, align 16
  %15138 = getelementptr inbounds i32, i32* %1, i64 244
  %15139 = bitcast i32* %15138 to <2 x i64>*
  %15140 = load <2 x i64>, <2 x i64>* %14537, align 16
  store <2 x i64> %15140, <2 x i64>* %15139, align 16
  %15141 = getelementptr inbounds i32, i32* %1, i64 248
  %15142 = bitcast i32* %15141 to <2 x i64>*
  %15143 = load <2 x i64>, <2 x i64>* %14657, align 16
  store <2 x i64> %15143, <2 x i64>* %15142, align 16
  %15144 = getelementptr inbounds i32, i32* %1, i64 252
  %15145 = bitcast i32* %15144 to <2 x i64>*
  %15146 = load <2 x i64>, <2 x i64>* %14697, align 16
  store <2 x i64> %15146, <2 x i64>* %15145, align 16
  br label %17357

15147:                                            ; preds = %5
  %15148 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %15149 = load i8, i8* %10, align 1
  %15150 = sext i8 %15149 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %15148, i32 %2, i32 1, i32 0, i32 %15150)
  %15151 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %15152 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 2), align 2
  %15153 = sext i8 %15152 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %15148, <2 x i64>* nonnull %15151, i32 %15153, i32 4)
  %15154 = getelementptr inbounds i8, i8* %10, i64 1
  %15155 = load i8, i8* %15154, align 1
  %15156 = sext i8 %15155 to i32
  %15157 = sub nsw i32 0, %15156
  %15158 = xor i32 %15156, -1
  %15159 = shl i32 1, %15158
  %15160 = insertelement <4 x i32> undef, i32 %15159, i32 0
  %15161 = shufflevector <4 x i32> %15160, <4 x i32> undef, <4 x i32> zeroinitializer
  %15162 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %15163 = load <4 x i32>, <4 x i32>* %15162, align 16
  %15164 = add <4 x i32> %15161, %15163
  %15165 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %15166 = bitcast <2 x i64>* %15165 to <4 x i32>*
  %15167 = load <4 x i32>, <4 x i32>* %15166, align 16
  %15168 = add <4 x i32> %15161, %15167
  %15169 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %15170 = bitcast <2 x i64>* %15169 to <4 x i32>*
  %15171 = load <4 x i32>, <4 x i32>* %15170, align 16
  %15172 = add <4 x i32> %15161, %15171
  %15173 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %15174 = bitcast <2 x i64>* %15173 to <4 x i32>*
  %15175 = load <4 x i32>, <4 x i32>* %15174, align 16
  %15176 = add <4 x i32> %15175, %15161
  %15177 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %15178 = bitcast <2 x i64>* %15177 to <4 x i32>*
  %15179 = load <4 x i32>, <4 x i32>* %15178, align 16
  %15180 = add <4 x i32> %15179, %15161
  %15181 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %15182 = bitcast <2 x i64>* %15181 to <4 x i32>*
  %15183 = load <4 x i32>, <4 x i32>* %15182, align 16
  %15184 = add <4 x i32> %15183, %15161
  %15185 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %15186 = bitcast <2 x i64>* %15185 to <4 x i32>*
  %15187 = load <4 x i32>, <4 x i32>* %15186, align 16
  %15188 = add <4 x i32> %15187, %15161
  %15189 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %15190 = bitcast <2 x i64>* %15189 to <4 x i32>*
  %15191 = load <4 x i32>, <4 x i32>* %15190, align 16
  %15192 = add <4 x i32> %15191, %15161
  %15193 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %15194 = bitcast <2 x i64>* %15193 to <4 x i32>*
  %15195 = load <4 x i32>, <4 x i32>* %15194, align 16
  %15196 = add <4 x i32> %15195, %15161
  %15197 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %15198 = bitcast <2 x i64>* %15197 to <4 x i32>*
  %15199 = load <4 x i32>, <4 x i32>* %15198, align 16
  %15200 = add <4 x i32> %15199, %15161
  %15201 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %15202 = bitcast <2 x i64>* %15201 to <4 x i32>*
  %15203 = load <4 x i32>, <4 x i32>* %15202, align 16
  %15204 = add <4 x i32> %15203, %15161
  %15205 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %15206 = bitcast <2 x i64>* %15205 to <4 x i32>*
  %15207 = load <4 x i32>, <4 x i32>* %15206, align 16
  %15208 = add <4 x i32> %15207, %15161
  %15209 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %15210 = bitcast <2 x i64>* %15209 to <4 x i32>*
  %15211 = load <4 x i32>, <4 x i32>* %15210, align 16
  %15212 = add <4 x i32> %15211, %15161
  %15213 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %15214 = bitcast <2 x i64>* %15213 to <4 x i32>*
  %15215 = load <4 x i32>, <4 x i32>* %15214, align 16
  %15216 = add <4 x i32> %15215, %15161
  %15217 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %15218 = bitcast <2 x i64>* %15217 to <4 x i32>*
  %15219 = load <4 x i32>, <4 x i32>* %15218, align 16
  %15220 = add <4 x i32> %15219, %15161
  %15221 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %15222 = bitcast <2 x i64>* %15221 to <4 x i32>*
  %15223 = load <4 x i32>, <4 x i32>* %15222, align 16
  %15224 = add <4 x i32> %15223, %15161
  %15225 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15164, i32 %15157) #8
  store <4 x i32> %15225, <4 x i32>* %15162, align 16
  %15226 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15168, i32 %15157) #8
  store <4 x i32> %15226, <4 x i32>* %15166, align 16
  %15227 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15172, i32 %15157) #8
  store <4 x i32> %15227, <4 x i32>* %15170, align 16
  %15228 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15176, i32 %15157) #8
  store <4 x i32> %15228, <4 x i32>* %15174, align 16
  %15229 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15180, i32 %15157) #8
  store <4 x i32> %15229, <4 x i32>* %15178, align 16
  %15230 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15184, i32 %15157) #8
  store <4 x i32> %15230, <4 x i32>* %15182, align 16
  %15231 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15188, i32 %15157) #8
  store <4 x i32> %15231, <4 x i32>* %15186, align 16
  %15232 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15192, i32 %15157) #8
  store <4 x i32> %15232, <4 x i32>* %15190, align 16
  %15233 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15196, i32 %15157) #8
  store <4 x i32> %15233, <4 x i32>* %15194, align 16
  %15234 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15200, i32 %15157) #8
  store <4 x i32> %15234, <4 x i32>* %15198, align 16
  %15235 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15204, i32 %15157) #8
  store <4 x i32> %15235, <4 x i32>* %15202, align 16
  %15236 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15208, i32 %15157) #8
  store <4 x i32> %15236, <4 x i32>* %15206, align 16
  %15237 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15212, i32 %15157) #8
  store <4 x i32> %15237, <4 x i32>* %15210, align 16
  %15238 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15216, i32 %15157) #8
  store <4 x i32> %15238, <4 x i32>* %15214, align 16
  %15239 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15220, i32 %15157) #8
  store <4 x i32> %15239, <4 x i32>* %15218, align 16
  %15240 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15224, i32 %15157) #8
  store <4 x i32> %15240, <4 x i32>* %15222, align 16
  %15241 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %15242 = bitcast <2 x i64>* %15241 to <4 x i32>*
  %15243 = load <4 x i32>, <4 x i32>* %15242, align 16
  %15244 = add <4 x i32> %15243, %15161
  %15245 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %15246 = bitcast <2 x i64>* %15245 to <4 x i32>*
  %15247 = load <4 x i32>, <4 x i32>* %15246, align 16
  %15248 = add <4 x i32> %15247, %15161
  %15249 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %15250 = bitcast <2 x i64>* %15249 to <4 x i32>*
  %15251 = load <4 x i32>, <4 x i32>* %15250, align 16
  %15252 = add <4 x i32> %15251, %15161
  %15253 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %15254 = bitcast <2 x i64>* %15253 to <4 x i32>*
  %15255 = load <4 x i32>, <4 x i32>* %15254, align 16
  %15256 = add <4 x i32> %15255, %15161
  %15257 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %15258 = bitcast <2 x i64>* %15257 to <4 x i32>*
  %15259 = load <4 x i32>, <4 x i32>* %15258, align 16
  %15260 = add <4 x i32> %15259, %15161
  %15261 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %15262 = bitcast <2 x i64>* %15261 to <4 x i32>*
  %15263 = load <4 x i32>, <4 x i32>* %15262, align 16
  %15264 = add <4 x i32> %15263, %15161
  %15265 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %15266 = bitcast <2 x i64>* %15265 to <4 x i32>*
  %15267 = load <4 x i32>, <4 x i32>* %15266, align 16
  %15268 = add <4 x i32> %15267, %15161
  %15269 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %15270 = bitcast <2 x i64>* %15269 to <4 x i32>*
  %15271 = load <4 x i32>, <4 x i32>* %15270, align 16
  %15272 = add <4 x i32> %15271, %15161
  %15273 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %15274 = bitcast <2 x i64>* %15273 to <4 x i32>*
  %15275 = load <4 x i32>, <4 x i32>* %15274, align 16
  %15276 = add <4 x i32> %15275, %15161
  %15277 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %15278 = bitcast <2 x i64>* %15277 to <4 x i32>*
  %15279 = load <4 x i32>, <4 x i32>* %15278, align 16
  %15280 = add <4 x i32> %15279, %15161
  %15281 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %15282 = bitcast <2 x i64>* %15281 to <4 x i32>*
  %15283 = load <4 x i32>, <4 x i32>* %15282, align 16
  %15284 = add <4 x i32> %15283, %15161
  %15285 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %15286 = bitcast <2 x i64>* %15285 to <4 x i32>*
  %15287 = load <4 x i32>, <4 x i32>* %15286, align 16
  %15288 = add <4 x i32> %15287, %15161
  %15289 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %15290 = bitcast <2 x i64>* %15289 to <4 x i32>*
  %15291 = load <4 x i32>, <4 x i32>* %15290, align 16
  %15292 = add <4 x i32> %15291, %15161
  %15293 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %15294 = bitcast <2 x i64>* %15293 to <4 x i32>*
  %15295 = load <4 x i32>, <4 x i32>* %15294, align 16
  %15296 = add <4 x i32> %15295, %15161
  %15297 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %15298 = bitcast <2 x i64>* %15297 to <4 x i32>*
  %15299 = load <4 x i32>, <4 x i32>* %15298, align 16
  %15300 = add <4 x i32> %15299, %15161
  %15301 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %15302 = bitcast <2 x i64>* %15301 to <4 x i32>*
  %15303 = load <4 x i32>, <4 x i32>* %15302, align 16
  %15304 = add <4 x i32> %15303, %15161
  %15305 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15244, i32 %15157) #8
  store <4 x i32> %15305, <4 x i32>* %15242, align 16
  %15306 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15248, i32 %15157) #8
  store <4 x i32> %15306, <4 x i32>* %15246, align 16
  %15307 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15252, i32 %15157) #8
  store <4 x i32> %15307, <4 x i32>* %15250, align 16
  %15308 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15256, i32 %15157) #8
  store <4 x i32> %15308, <4 x i32>* %15254, align 16
  %15309 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15260, i32 %15157) #8
  store <4 x i32> %15309, <4 x i32>* %15258, align 16
  %15310 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15264, i32 %15157) #8
  store <4 x i32> %15310, <4 x i32>* %15262, align 16
  %15311 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15268, i32 %15157) #8
  store <4 x i32> %15311, <4 x i32>* %15266, align 16
  %15312 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15272, i32 %15157) #8
  store <4 x i32> %15312, <4 x i32>* %15270, align 16
  %15313 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15276, i32 %15157) #8
  store <4 x i32> %15313, <4 x i32>* %15274, align 16
  %15314 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15280, i32 %15157) #8
  store <4 x i32> %15314, <4 x i32>* %15278, align 16
  %15315 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15284, i32 %15157) #8
  store <4 x i32> %15315, <4 x i32>* %15282, align 16
  %15316 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15288, i32 %15157) #8
  store <4 x i32> %15316, <4 x i32>* %15286, align 16
  %15317 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15292, i32 %15157) #8
  store <4 x i32> %15317, <4 x i32>* %15290, align 16
  %15318 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15296, i32 %15157) #8
  store <4 x i32> %15318, <4 x i32>* %15294, align 16
  %15319 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15300, i32 %15157) #8
  store <4 x i32> %15319, <4 x i32>* %15298, align 16
  %15320 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15304, i32 %15157) #8
  store <4 x i32> %15320, <4 x i32>* %15302, align 16
  %15321 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %15322 = bitcast <2 x i64>* %15321 to <4 x i32>*
  %15323 = load <4 x i32>, <4 x i32>* %15322, align 16
  %15324 = add <4 x i32> %15323, %15161
  %15325 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %15326 = bitcast <2 x i64>* %15325 to <4 x i32>*
  %15327 = load <4 x i32>, <4 x i32>* %15326, align 16
  %15328 = add <4 x i32> %15327, %15161
  %15329 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %15330 = bitcast <2 x i64>* %15329 to <4 x i32>*
  %15331 = load <4 x i32>, <4 x i32>* %15330, align 16
  %15332 = add <4 x i32> %15331, %15161
  %15333 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %15334 = bitcast <2 x i64>* %15333 to <4 x i32>*
  %15335 = load <4 x i32>, <4 x i32>* %15334, align 16
  %15336 = add <4 x i32> %15335, %15161
  %15337 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %15338 = bitcast <2 x i64>* %15337 to <4 x i32>*
  %15339 = load <4 x i32>, <4 x i32>* %15338, align 16
  %15340 = add <4 x i32> %15339, %15161
  %15341 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %15342 = bitcast <2 x i64>* %15341 to <4 x i32>*
  %15343 = load <4 x i32>, <4 x i32>* %15342, align 16
  %15344 = add <4 x i32> %15343, %15161
  %15345 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %15346 = bitcast <2 x i64>* %15345 to <4 x i32>*
  %15347 = load <4 x i32>, <4 x i32>* %15346, align 16
  %15348 = add <4 x i32> %15347, %15161
  %15349 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %15350 = bitcast <2 x i64>* %15349 to <4 x i32>*
  %15351 = load <4 x i32>, <4 x i32>* %15350, align 16
  %15352 = add <4 x i32> %15351, %15161
  %15353 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %15354 = bitcast <2 x i64>* %15353 to <4 x i32>*
  %15355 = load <4 x i32>, <4 x i32>* %15354, align 16
  %15356 = add <4 x i32> %15355, %15161
  %15357 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %15358 = bitcast <2 x i64>* %15357 to <4 x i32>*
  %15359 = load <4 x i32>, <4 x i32>* %15358, align 16
  %15360 = add <4 x i32> %15359, %15161
  %15361 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %15362 = bitcast <2 x i64>* %15361 to <4 x i32>*
  %15363 = load <4 x i32>, <4 x i32>* %15362, align 16
  %15364 = add <4 x i32> %15363, %15161
  %15365 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %15366 = bitcast <2 x i64>* %15365 to <4 x i32>*
  %15367 = load <4 x i32>, <4 x i32>* %15366, align 16
  %15368 = add <4 x i32> %15367, %15161
  %15369 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %15370 = bitcast <2 x i64>* %15369 to <4 x i32>*
  %15371 = load <4 x i32>, <4 x i32>* %15370, align 16
  %15372 = add <4 x i32> %15371, %15161
  %15373 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %15374 = bitcast <2 x i64>* %15373 to <4 x i32>*
  %15375 = load <4 x i32>, <4 x i32>* %15374, align 16
  %15376 = add <4 x i32> %15375, %15161
  %15377 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %15378 = bitcast <2 x i64>* %15377 to <4 x i32>*
  %15379 = load <4 x i32>, <4 x i32>* %15378, align 16
  %15380 = add <4 x i32> %15379, %15161
  %15381 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %15382 = bitcast <2 x i64>* %15381 to <4 x i32>*
  %15383 = load <4 x i32>, <4 x i32>* %15382, align 16
  %15384 = add <4 x i32> %15383, %15161
  %15385 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15324, i32 %15157) #8
  store <4 x i32> %15385, <4 x i32>* %15322, align 16
  %15386 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15328, i32 %15157) #8
  store <4 x i32> %15386, <4 x i32>* %15326, align 16
  %15387 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15332, i32 %15157) #8
  store <4 x i32> %15387, <4 x i32>* %15330, align 16
  %15388 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15336, i32 %15157) #8
  store <4 x i32> %15388, <4 x i32>* %15334, align 16
  %15389 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15340, i32 %15157) #8
  store <4 x i32> %15389, <4 x i32>* %15338, align 16
  %15390 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15344, i32 %15157) #8
  store <4 x i32> %15390, <4 x i32>* %15342, align 16
  %15391 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15348, i32 %15157) #8
  store <4 x i32> %15391, <4 x i32>* %15346, align 16
  %15392 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15352, i32 %15157) #8
  store <4 x i32> %15392, <4 x i32>* %15350, align 16
  %15393 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15356, i32 %15157) #8
  store <4 x i32> %15393, <4 x i32>* %15354, align 16
  %15394 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15360, i32 %15157) #8
  store <4 x i32> %15394, <4 x i32>* %15358, align 16
  %15395 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15364, i32 %15157) #8
  store <4 x i32> %15395, <4 x i32>* %15362, align 16
  %15396 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15368, i32 %15157) #8
  store <4 x i32> %15396, <4 x i32>* %15366, align 16
  %15397 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15372, i32 %15157) #8
  store <4 x i32> %15397, <4 x i32>* %15370, align 16
  %15398 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15376, i32 %15157) #8
  store <4 x i32> %15398, <4 x i32>* %15374, align 16
  %15399 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15380, i32 %15157) #8
  store <4 x i32> %15399, <4 x i32>* %15378, align 16
  %15400 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15384, i32 %15157) #8
  store <4 x i32> %15400, <4 x i32>* %15382, align 16
  %15401 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %15402 = bitcast <2 x i64>* %15401 to <4 x i32>*
  %15403 = load <4 x i32>, <4 x i32>* %15402, align 16
  %15404 = add <4 x i32> %15403, %15161
  %15405 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %15406 = bitcast <2 x i64>* %15405 to <4 x i32>*
  %15407 = load <4 x i32>, <4 x i32>* %15406, align 16
  %15408 = add <4 x i32> %15407, %15161
  %15409 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %15410 = bitcast <2 x i64>* %15409 to <4 x i32>*
  %15411 = load <4 x i32>, <4 x i32>* %15410, align 16
  %15412 = add <4 x i32> %15411, %15161
  %15413 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %15414 = bitcast <2 x i64>* %15413 to <4 x i32>*
  %15415 = load <4 x i32>, <4 x i32>* %15414, align 16
  %15416 = add <4 x i32> %15415, %15161
  %15417 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %15418 = bitcast <2 x i64>* %15417 to <4 x i32>*
  %15419 = load <4 x i32>, <4 x i32>* %15418, align 16
  %15420 = add <4 x i32> %15419, %15161
  %15421 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %15422 = bitcast <2 x i64>* %15421 to <4 x i32>*
  %15423 = load <4 x i32>, <4 x i32>* %15422, align 16
  %15424 = add <4 x i32> %15423, %15161
  %15425 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %15426 = bitcast <2 x i64>* %15425 to <4 x i32>*
  %15427 = load <4 x i32>, <4 x i32>* %15426, align 16
  %15428 = add <4 x i32> %15427, %15161
  %15429 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %15430 = bitcast <2 x i64>* %15429 to <4 x i32>*
  %15431 = load <4 x i32>, <4 x i32>* %15430, align 16
  %15432 = add <4 x i32> %15431, %15161
  %15433 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %15434 = bitcast <2 x i64>* %15433 to <4 x i32>*
  %15435 = load <4 x i32>, <4 x i32>* %15434, align 16
  %15436 = add <4 x i32> %15435, %15161
  %15437 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %15438 = bitcast <2 x i64>* %15437 to <4 x i32>*
  %15439 = load <4 x i32>, <4 x i32>* %15438, align 16
  %15440 = add <4 x i32> %15439, %15161
  %15441 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %15442 = bitcast <2 x i64>* %15441 to <4 x i32>*
  %15443 = load <4 x i32>, <4 x i32>* %15442, align 16
  %15444 = add <4 x i32> %15443, %15161
  %15445 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %15446 = bitcast <2 x i64>* %15445 to <4 x i32>*
  %15447 = load <4 x i32>, <4 x i32>* %15446, align 16
  %15448 = add <4 x i32> %15447, %15161
  %15449 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %15450 = bitcast <2 x i64>* %15449 to <4 x i32>*
  %15451 = load <4 x i32>, <4 x i32>* %15450, align 16
  %15452 = add <4 x i32> %15451, %15161
  %15453 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %15454 = bitcast <2 x i64>* %15453 to <4 x i32>*
  %15455 = load <4 x i32>, <4 x i32>* %15454, align 16
  %15456 = add <4 x i32> %15455, %15161
  %15457 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %15458 = bitcast <2 x i64>* %15457 to <4 x i32>*
  %15459 = load <4 x i32>, <4 x i32>* %15458, align 16
  %15460 = add <4 x i32> %15459, %15161
  %15461 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %15462 = bitcast <2 x i64>* %15461 to <4 x i32>*
  %15463 = load <4 x i32>, <4 x i32>* %15462, align 16
  %15464 = add <4 x i32> %15463, %15161
  %15465 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15404, i32 %15157) #8
  store <4 x i32> %15465, <4 x i32>* %15402, align 16
  %15466 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15408, i32 %15157) #8
  store <4 x i32> %15466, <4 x i32>* %15406, align 16
  %15467 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15412, i32 %15157) #8
  store <4 x i32> %15467, <4 x i32>* %15410, align 16
  %15468 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15416, i32 %15157) #8
  store <4 x i32> %15468, <4 x i32>* %15414, align 16
  %15469 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15420, i32 %15157) #8
  store <4 x i32> %15469, <4 x i32>* %15418, align 16
  %15470 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15424, i32 %15157) #8
  store <4 x i32> %15470, <4 x i32>* %15422, align 16
  %15471 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15428, i32 %15157) #8
  store <4 x i32> %15471, <4 x i32>* %15426, align 16
  %15472 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15432, i32 %15157) #8
  store <4 x i32> %15472, <4 x i32>* %15430, align 16
  %15473 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15436, i32 %15157) #8
  store <4 x i32> %15473, <4 x i32>* %15434, align 16
  %15474 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15440, i32 %15157) #8
  store <4 x i32> %15474, <4 x i32>* %15438, align 16
  %15475 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15444, i32 %15157) #8
  store <4 x i32> %15475, <4 x i32>* %15442, align 16
  %15476 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15448, i32 %15157) #8
  store <4 x i32> %15476, <4 x i32>* %15446, align 16
  %15477 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15452, i32 %15157) #8
  store <4 x i32> %15477, <4 x i32>* %15450, align 16
  %15478 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15456, i32 %15157) #8
  store <4 x i32> %15478, <4 x i32>* %15454, align 16
  %15479 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15460, i32 %15157) #8
  store <4 x i32> %15479, <4 x i32>* %15458, align 16
  %15480 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %15464, i32 %15157) #8
  store <4 x i32> %15480, <4 x i32>* %15462, align 16
  %15481 = shufflevector <4 x i32> %15225, <4 x i32> %15229, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15482 = bitcast <4 x i32> %15481 to <2 x i64>
  %15483 = shufflevector <4 x i32> %15225, <4 x i32> %15229, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15484 = bitcast <4 x i32> %15483 to <2 x i64>
  %15485 = shufflevector <4 x i32> %15233, <4 x i32> %15237, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15486 = bitcast <4 x i32> %15485 to <2 x i64>
  %15487 = shufflevector <4 x i32> %15233, <4 x i32> %15237, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15488 = bitcast <4 x i32> %15487 to <2 x i64>
  %15489 = shufflevector <2 x i64> %15482, <2 x i64> %15486, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15489, <2 x i64>* %15148, align 16
  %15490 = shufflevector <2 x i64> %15482, <2 x i64> %15486, <2 x i32> <i32 1, i32 3>
  %15491 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %15490, <2 x i64>* %15491, align 16
  %15492 = shufflevector <2 x i64> %15484, <2 x i64> %15488, <2 x i32> <i32 0, i32 2>
  %15493 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %15492, <2 x i64>* %15493, align 16
  %15494 = shufflevector <2 x i64> %15484, <2 x i64> %15488, <2 x i32> <i32 1, i32 3>
  %15495 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %15494, <2 x i64>* %15495, align 16
  %15496 = shufflevector <4 x i32> %15226, <4 x i32> %15230, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15497 = bitcast <4 x i32> %15496 to <2 x i64>
  %15498 = shufflevector <4 x i32> %15226, <4 x i32> %15230, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15499 = bitcast <4 x i32> %15498 to <2 x i64>
  %15500 = shufflevector <4 x i32> %15234, <4 x i32> %15238, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15501 = bitcast <4 x i32> %15500 to <2 x i64>
  %15502 = shufflevector <4 x i32> %15234, <4 x i32> %15238, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15503 = bitcast <4 x i32> %15502 to <2 x i64>
  %15504 = shufflevector <2 x i64> %15497, <2 x i64> %15501, <2 x i32> <i32 0, i32 2>
  %15505 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %15504, <2 x i64>* %15505, align 16
  %15506 = shufflevector <2 x i64> %15497, <2 x i64> %15501, <2 x i32> <i32 1, i32 3>
  %15507 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %15506, <2 x i64>* %15507, align 16
  %15508 = shufflevector <2 x i64> %15499, <2 x i64> %15503, <2 x i32> <i32 0, i32 2>
  %15509 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %15508, <2 x i64>* %15509, align 16
  %15510 = shufflevector <2 x i64> %15499, <2 x i64> %15503, <2 x i32> <i32 1, i32 3>
  %15511 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %15510, <2 x i64>* %15511, align 16
  %15512 = load <4 x i32>, <4 x i32>* %15258, align 16
  %15513 = shufflevector <4 x i32> %15305, <4 x i32> %15512, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15514 = bitcast <4 x i32> %15513 to <2 x i64>
  %15515 = shufflevector <4 x i32> %15305, <4 x i32> %15512, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15516 = bitcast <4 x i32> %15515 to <2 x i64>
  %15517 = load <4 x i32>, <4 x i32>* %15274, align 16
  %15518 = load <4 x i32>, <4 x i32>* %15290, align 16
  %15519 = shufflevector <4 x i32> %15517, <4 x i32> %15518, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15520 = bitcast <4 x i32> %15519 to <2 x i64>
  %15521 = shufflevector <4 x i32> %15517, <4 x i32> %15518, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15522 = bitcast <4 x i32> %15521 to <2 x i64>
  %15523 = shufflevector <2 x i64> %15514, <2 x i64> %15520, <2 x i32> <i32 0, i32 2>
  %15524 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %15523, <2 x i64>* %15524, align 16
  %15525 = shufflevector <2 x i64> %15514, <2 x i64> %15520, <2 x i32> <i32 1, i32 3>
  %15526 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %15525, <2 x i64>* %15526, align 16
  %15527 = shufflevector <2 x i64> %15516, <2 x i64> %15522, <2 x i32> <i32 0, i32 2>
  %15528 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %15527, <2 x i64>* %15528, align 16
  %15529 = shufflevector <2 x i64> %15516, <2 x i64> %15522, <2 x i32> <i32 1, i32 3>
  %15530 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %15529, <2 x i64>* %15530, align 16
  %15531 = load <4 x i32>, <4 x i32>* %15246, align 16
  %15532 = load <4 x i32>, <4 x i32>* %15262, align 16
  %15533 = shufflevector <4 x i32> %15531, <4 x i32> %15532, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15534 = bitcast <4 x i32> %15533 to <2 x i64>
  %15535 = shufflevector <4 x i32> %15531, <4 x i32> %15532, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15536 = bitcast <4 x i32> %15535 to <2 x i64>
  %15537 = load <4 x i32>, <4 x i32>* %15278, align 16
  %15538 = load <4 x i32>, <4 x i32>* %15294, align 16
  %15539 = shufflevector <4 x i32> %15537, <4 x i32> %15538, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15540 = bitcast <4 x i32> %15539 to <2 x i64>
  %15541 = shufflevector <4 x i32> %15537, <4 x i32> %15538, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15542 = bitcast <4 x i32> %15541 to <2 x i64>
  %15543 = shufflevector <2 x i64> %15534, <2 x i64> %15540, <2 x i32> <i32 0, i32 2>
  %15544 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %15543, <2 x i64>* %15544, align 16
  %15545 = shufflevector <2 x i64> %15534, <2 x i64> %15540, <2 x i32> <i32 1, i32 3>
  %15546 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %15545, <2 x i64>* %15546, align 16
  %15547 = shufflevector <2 x i64> %15536, <2 x i64> %15542, <2 x i32> <i32 0, i32 2>
  %15548 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %15547, <2 x i64>* %15548, align 16
  %15549 = shufflevector <2 x i64> %15536, <2 x i64> %15542, <2 x i32> <i32 1, i32 3>
  %15550 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %15549, <2 x i64>* %15550, align 16
  %15551 = shufflevector <4 x i32> %15227, <4 x i32> %15231, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15552 = bitcast <4 x i32> %15551 to <2 x i64>
  %15553 = shufflevector <4 x i32> %15227, <4 x i32> %15231, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15554 = bitcast <4 x i32> %15553 to <2 x i64>
  %15555 = shufflevector <4 x i32> %15235, <4 x i32> %15239, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15556 = bitcast <4 x i32> %15555 to <2 x i64>
  %15557 = shufflevector <4 x i32> %15235, <4 x i32> %15239, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15558 = bitcast <4 x i32> %15557 to <2 x i64>
  %15559 = shufflevector <2 x i64> %15552, <2 x i64> %15556, <2 x i32> <i32 0, i32 2>
  %15560 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %15559, <2 x i64>* %15560, align 16
  %15561 = shufflevector <2 x i64> %15552, <2 x i64> %15556, <2 x i32> <i32 1, i32 3>
  %15562 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %15561, <2 x i64>* %15562, align 16
  %15563 = shufflevector <2 x i64> %15554, <2 x i64> %15558, <2 x i32> <i32 0, i32 2>
  %15564 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %15563, <2 x i64>* %15564, align 16
  %15565 = shufflevector <2 x i64> %15554, <2 x i64> %15558, <2 x i32> <i32 1, i32 3>
  %15566 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %15565, <2 x i64>* %15566, align 16
  %15567 = shufflevector <4 x i32> %15228, <4 x i32> %15232, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15568 = bitcast <4 x i32> %15567 to <2 x i64>
  %15569 = shufflevector <4 x i32> %15228, <4 x i32> %15232, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15570 = bitcast <4 x i32> %15569 to <2 x i64>
  %15571 = shufflevector <4 x i32> %15236, <4 x i32> %15240, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15572 = bitcast <4 x i32> %15571 to <2 x i64>
  %15573 = shufflevector <4 x i32> %15236, <4 x i32> %15240, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15574 = bitcast <4 x i32> %15573 to <2 x i64>
  %15575 = shufflevector <2 x i64> %15568, <2 x i64> %15572, <2 x i32> <i32 0, i32 2>
  %15576 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %15575, <2 x i64>* %15576, align 16
  %15577 = shufflevector <2 x i64> %15568, <2 x i64> %15572, <2 x i32> <i32 1, i32 3>
  %15578 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %15577, <2 x i64>* %15578, align 16
  %15579 = shufflevector <2 x i64> %15570, <2 x i64> %15574, <2 x i32> <i32 0, i32 2>
  %15580 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %15579, <2 x i64>* %15580, align 16
  %15581 = shufflevector <2 x i64> %15570, <2 x i64> %15574, <2 x i32> <i32 1, i32 3>
  %15582 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %15581, <2 x i64>* %15582, align 16
  %15583 = load <4 x i32>, <4 x i32>* %15250, align 16
  %15584 = load <4 x i32>, <4 x i32>* %15266, align 16
  %15585 = shufflevector <4 x i32> %15583, <4 x i32> %15584, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15586 = bitcast <4 x i32> %15585 to <2 x i64>
  %15587 = shufflevector <4 x i32> %15583, <4 x i32> %15584, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15588 = bitcast <4 x i32> %15587 to <2 x i64>
  %15589 = load <4 x i32>, <4 x i32>* %15282, align 16
  %15590 = load <4 x i32>, <4 x i32>* %15298, align 16
  %15591 = shufflevector <4 x i32> %15589, <4 x i32> %15590, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15592 = bitcast <4 x i32> %15591 to <2 x i64>
  %15593 = shufflevector <4 x i32> %15589, <4 x i32> %15590, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15594 = bitcast <4 x i32> %15593 to <2 x i64>
  %15595 = shufflevector <2 x i64> %15586, <2 x i64> %15592, <2 x i32> <i32 0, i32 2>
  %15596 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %15595, <2 x i64>* %15596, align 16
  %15597 = shufflevector <2 x i64> %15586, <2 x i64> %15592, <2 x i32> <i32 1, i32 3>
  %15598 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %15597, <2 x i64>* %15598, align 16
  %15599 = shufflevector <2 x i64> %15588, <2 x i64> %15594, <2 x i32> <i32 0, i32 2>
  %15600 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %15599, <2 x i64>* %15600, align 16
  %15601 = shufflevector <2 x i64> %15588, <2 x i64> %15594, <2 x i32> <i32 1, i32 3>
  %15602 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %15601, <2 x i64>* %15602, align 16
  %15603 = load <4 x i32>, <4 x i32>* %15254, align 16
  %15604 = load <4 x i32>, <4 x i32>* %15270, align 16
  %15605 = shufflevector <4 x i32> %15603, <4 x i32> %15604, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15606 = bitcast <4 x i32> %15605 to <2 x i64>
  %15607 = shufflevector <4 x i32> %15603, <4 x i32> %15604, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15608 = bitcast <4 x i32> %15607 to <2 x i64>
  %15609 = load <4 x i32>, <4 x i32>* %15286, align 16
  %15610 = load <4 x i32>, <4 x i32>* %15302, align 16
  %15611 = shufflevector <4 x i32> %15609, <4 x i32> %15610, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15612 = bitcast <4 x i32> %15611 to <2 x i64>
  %15613 = shufflevector <4 x i32> %15609, <4 x i32> %15610, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15614 = bitcast <4 x i32> %15613 to <2 x i64>
  %15615 = shufflevector <2 x i64> %15606, <2 x i64> %15612, <2 x i32> <i32 0, i32 2>
  %15616 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %15615, <2 x i64>* %15616, align 16
  %15617 = shufflevector <2 x i64> %15606, <2 x i64> %15612, <2 x i32> <i32 1, i32 3>
  %15618 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %15617, <2 x i64>* %15618, align 16
  %15619 = shufflevector <2 x i64> %15608, <2 x i64> %15614, <2 x i32> <i32 0, i32 2>
  %15620 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %15619, <2 x i64>* %15620, align 16
  %15621 = shufflevector <2 x i64> %15608, <2 x i64> %15614, <2 x i32> <i32 1, i32 3>
  %15622 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %15621, <2 x i64>* %15622, align 16
  %15623 = load <4 x i32>, <4 x i32>* %15322, align 16
  %15624 = load <4 x i32>, <4 x i32>* %15338, align 16
  %15625 = shufflevector <4 x i32> %15623, <4 x i32> %15624, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15626 = bitcast <4 x i32> %15625 to <2 x i64>
  %15627 = shufflevector <4 x i32> %15623, <4 x i32> %15624, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15628 = bitcast <4 x i32> %15627 to <2 x i64>
  %15629 = load <4 x i32>, <4 x i32>* %15354, align 16
  %15630 = load <4 x i32>, <4 x i32>* %15370, align 16
  %15631 = shufflevector <4 x i32> %15629, <4 x i32> %15630, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15632 = bitcast <4 x i32> %15631 to <2 x i64>
  %15633 = shufflevector <4 x i32> %15629, <4 x i32> %15630, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15634 = bitcast <4 x i32> %15633 to <2 x i64>
  %15635 = shufflevector <2 x i64> %15626, <2 x i64> %15632, <2 x i32> <i32 0, i32 2>
  %15636 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %15635, <2 x i64>* %15636, align 16
  %15637 = shufflevector <2 x i64> %15626, <2 x i64> %15632, <2 x i32> <i32 1, i32 3>
  %15638 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %15637, <2 x i64>* %15638, align 16
  %15639 = shufflevector <2 x i64> %15628, <2 x i64> %15634, <2 x i32> <i32 0, i32 2>
  %15640 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %15639, <2 x i64>* %15640, align 16
  %15641 = shufflevector <2 x i64> %15628, <2 x i64> %15634, <2 x i32> <i32 1, i32 3>
  %15642 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %15641, <2 x i64>* %15642, align 16
  %15643 = load <4 x i32>, <4 x i32>* %15326, align 16
  %15644 = load <4 x i32>, <4 x i32>* %15342, align 16
  %15645 = shufflevector <4 x i32> %15643, <4 x i32> %15644, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15646 = bitcast <4 x i32> %15645 to <2 x i64>
  %15647 = shufflevector <4 x i32> %15643, <4 x i32> %15644, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15648 = bitcast <4 x i32> %15647 to <2 x i64>
  %15649 = load <4 x i32>, <4 x i32>* %15358, align 16
  %15650 = load <4 x i32>, <4 x i32>* %15374, align 16
  %15651 = shufflevector <4 x i32> %15649, <4 x i32> %15650, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15652 = bitcast <4 x i32> %15651 to <2 x i64>
  %15653 = shufflevector <4 x i32> %15649, <4 x i32> %15650, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15654 = bitcast <4 x i32> %15653 to <2 x i64>
  %15655 = shufflevector <2 x i64> %15646, <2 x i64> %15652, <2 x i32> <i32 0, i32 2>
  %15656 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %15655, <2 x i64>* %15656, align 16
  %15657 = shufflevector <2 x i64> %15646, <2 x i64> %15652, <2 x i32> <i32 1, i32 3>
  %15658 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %15657, <2 x i64>* %15658, align 16
  %15659 = shufflevector <2 x i64> %15648, <2 x i64> %15654, <2 x i32> <i32 0, i32 2>
  %15660 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %15659, <2 x i64>* %15660, align 16
  %15661 = shufflevector <2 x i64> %15648, <2 x i64> %15654, <2 x i32> <i32 1, i32 3>
  %15662 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %15661, <2 x i64>* %15662, align 16
  %15663 = load <4 x i32>, <4 x i32>* %15402, align 16
  %15664 = load <4 x i32>, <4 x i32>* %15418, align 16
  %15665 = shufflevector <4 x i32> %15663, <4 x i32> %15664, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15666 = bitcast <4 x i32> %15665 to <2 x i64>
  %15667 = shufflevector <4 x i32> %15663, <4 x i32> %15664, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15668 = bitcast <4 x i32> %15667 to <2 x i64>
  %15669 = load <4 x i32>, <4 x i32>* %15434, align 16
  %15670 = load <4 x i32>, <4 x i32>* %15450, align 16
  %15671 = shufflevector <4 x i32> %15669, <4 x i32> %15670, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15672 = bitcast <4 x i32> %15671 to <2 x i64>
  %15673 = shufflevector <4 x i32> %15669, <4 x i32> %15670, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15674 = bitcast <4 x i32> %15673 to <2 x i64>
  %15675 = shufflevector <2 x i64> %15666, <2 x i64> %15672, <2 x i32> <i32 0, i32 2>
  %15676 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %15675, <2 x i64>* %15676, align 16
  %15677 = shufflevector <2 x i64> %15666, <2 x i64> %15672, <2 x i32> <i32 1, i32 3>
  %15678 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %15677, <2 x i64>* %15678, align 16
  %15679 = shufflevector <2 x i64> %15668, <2 x i64> %15674, <2 x i32> <i32 0, i32 2>
  %15680 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %15679, <2 x i64>* %15680, align 16
  %15681 = shufflevector <2 x i64> %15668, <2 x i64> %15674, <2 x i32> <i32 1, i32 3>
  %15682 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %15681, <2 x i64>* %15682, align 16
  %15683 = load <4 x i32>, <4 x i32>* %15406, align 16
  %15684 = load <4 x i32>, <4 x i32>* %15422, align 16
  %15685 = shufflevector <4 x i32> %15683, <4 x i32> %15684, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15686 = bitcast <4 x i32> %15685 to <2 x i64>
  %15687 = shufflevector <4 x i32> %15683, <4 x i32> %15684, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15688 = bitcast <4 x i32> %15687 to <2 x i64>
  %15689 = load <4 x i32>, <4 x i32>* %15438, align 16
  %15690 = load <4 x i32>, <4 x i32>* %15454, align 16
  %15691 = shufflevector <4 x i32> %15689, <4 x i32> %15690, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15692 = bitcast <4 x i32> %15691 to <2 x i64>
  %15693 = shufflevector <4 x i32> %15689, <4 x i32> %15690, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15694 = bitcast <4 x i32> %15693 to <2 x i64>
  %15695 = shufflevector <2 x i64> %15686, <2 x i64> %15692, <2 x i32> <i32 0, i32 2>
  %15696 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %15695, <2 x i64>* %15696, align 16
  %15697 = shufflevector <2 x i64> %15686, <2 x i64> %15692, <2 x i32> <i32 1, i32 3>
  %15698 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %15697, <2 x i64>* %15698, align 16
  %15699 = shufflevector <2 x i64> %15688, <2 x i64> %15694, <2 x i32> <i32 0, i32 2>
  %15700 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %15699, <2 x i64>* %15700, align 16
  %15701 = shufflevector <2 x i64> %15688, <2 x i64> %15694, <2 x i32> <i32 1, i32 3>
  %15702 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %15701, <2 x i64>* %15702, align 16
  %15703 = load <4 x i32>, <4 x i32>* %15330, align 16
  %15704 = load <4 x i32>, <4 x i32>* %15346, align 16
  %15705 = shufflevector <4 x i32> %15703, <4 x i32> %15704, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15706 = bitcast <4 x i32> %15705 to <2 x i64>
  %15707 = shufflevector <4 x i32> %15703, <4 x i32> %15704, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15708 = bitcast <4 x i32> %15707 to <2 x i64>
  %15709 = load <4 x i32>, <4 x i32>* %15362, align 16
  %15710 = load <4 x i32>, <4 x i32>* %15378, align 16
  %15711 = shufflevector <4 x i32> %15709, <4 x i32> %15710, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15712 = bitcast <4 x i32> %15711 to <2 x i64>
  %15713 = shufflevector <4 x i32> %15709, <4 x i32> %15710, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15714 = bitcast <4 x i32> %15713 to <2 x i64>
  %15715 = shufflevector <2 x i64> %15706, <2 x i64> %15712, <2 x i32> <i32 0, i32 2>
  %15716 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %15715, <2 x i64>* %15716, align 16
  %15717 = shufflevector <2 x i64> %15706, <2 x i64> %15712, <2 x i32> <i32 1, i32 3>
  %15718 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %15717, <2 x i64>* %15718, align 16
  %15719 = shufflevector <2 x i64> %15708, <2 x i64> %15714, <2 x i32> <i32 0, i32 2>
  %15720 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %15719, <2 x i64>* %15720, align 16
  %15721 = shufflevector <2 x i64> %15708, <2 x i64> %15714, <2 x i32> <i32 1, i32 3>
  %15722 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %15721, <2 x i64>* %15722, align 16
  %15723 = load <4 x i32>, <4 x i32>* %15334, align 16
  %15724 = load <4 x i32>, <4 x i32>* %15350, align 16
  %15725 = shufflevector <4 x i32> %15723, <4 x i32> %15724, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15726 = bitcast <4 x i32> %15725 to <2 x i64>
  %15727 = shufflevector <4 x i32> %15723, <4 x i32> %15724, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15728 = bitcast <4 x i32> %15727 to <2 x i64>
  %15729 = load <4 x i32>, <4 x i32>* %15366, align 16
  %15730 = load <4 x i32>, <4 x i32>* %15382, align 16
  %15731 = shufflevector <4 x i32> %15729, <4 x i32> %15730, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15732 = bitcast <4 x i32> %15731 to <2 x i64>
  %15733 = shufflevector <4 x i32> %15729, <4 x i32> %15730, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15734 = bitcast <4 x i32> %15733 to <2 x i64>
  %15735 = shufflevector <2 x i64> %15726, <2 x i64> %15732, <2 x i32> <i32 0, i32 2>
  %15736 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %15735, <2 x i64>* %15736, align 16
  %15737 = shufflevector <2 x i64> %15726, <2 x i64> %15732, <2 x i32> <i32 1, i32 3>
  %15738 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %15737, <2 x i64>* %15738, align 16
  %15739 = shufflevector <2 x i64> %15728, <2 x i64> %15734, <2 x i32> <i32 0, i32 2>
  %15740 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %15739, <2 x i64>* %15740, align 16
  %15741 = shufflevector <2 x i64> %15728, <2 x i64> %15734, <2 x i32> <i32 1, i32 3>
  %15742 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %15741, <2 x i64>* %15742, align 16
  %15743 = load <4 x i32>, <4 x i32>* %15410, align 16
  %15744 = load <4 x i32>, <4 x i32>* %15426, align 16
  %15745 = shufflevector <4 x i32> %15743, <4 x i32> %15744, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15746 = bitcast <4 x i32> %15745 to <2 x i64>
  %15747 = shufflevector <4 x i32> %15743, <4 x i32> %15744, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15748 = bitcast <4 x i32> %15747 to <2 x i64>
  %15749 = load <4 x i32>, <4 x i32>* %15442, align 16
  %15750 = load <4 x i32>, <4 x i32>* %15458, align 16
  %15751 = shufflevector <4 x i32> %15749, <4 x i32> %15750, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15752 = bitcast <4 x i32> %15751 to <2 x i64>
  %15753 = shufflevector <4 x i32> %15749, <4 x i32> %15750, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15754 = bitcast <4 x i32> %15753 to <2 x i64>
  %15755 = shufflevector <2 x i64> %15746, <2 x i64> %15752, <2 x i32> <i32 0, i32 2>
  %15756 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %15755, <2 x i64>* %15756, align 16
  %15757 = shufflevector <2 x i64> %15746, <2 x i64> %15752, <2 x i32> <i32 1, i32 3>
  %15758 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %15757, <2 x i64>* %15758, align 16
  %15759 = shufflevector <2 x i64> %15748, <2 x i64> %15754, <2 x i32> <i32 0, i32 2>
  %15760 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %15759, <2 x i64>* %15760, align 16
  %15761 = shufflevector <2 x i64> %15748, <2 x i64> %15754, <2 x i32> <i32 1, i32 3>
  %15762 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %15761, <2 x i64>* %15762, align 16
  %15763 = load <4 x i32>, <4 x i32>* %15414, align 16
  %15764 = load <4 x i32>, <4 x i32>* %15430, align 16
  %15765 = shufflevector <4 x i32> %15763, <4 x i32> %15764, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15766 = bitcast <4 x i32> %15765 to <2 x i64>
  %15767 = shufflevector <4 x i32> %15763, <4 x i32> %15764, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15768 = bitcast <4 x i32> %15767 to <2 x i64>
  %15769 = load <4 x i32>, <4 x i32>* %15446, align 16
  %15770 = load <4 x i32>, <4 x i32>* %15462, align 16
  %15771 = shufflevector <4 x i32> %15769, <4 x i32> %15770, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15772 = bitcast <4 x i32> %15771 to <2 x i64>
  %15773 = shufflevector <4 x i32> %15769, <4 x i32> %15770, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15774 = bitcast <4 x i32> %15773 to <2 x i64>
  %15775 = shufflevector <2 x i64> %15766, <2 x i64> %15772, <2 x i32> <i32 0, i32 2>
  %15776 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %15775, <2 x i64>* %15776, align 16
  %15777 = shufflevector <2 x i64> %15766, <2 x i64> %15772, <2 x i32> <i32 1, i32 3>
  %15778 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %15777, <2 x i64>* %15778, align 16
  %15779 = shufflevector <2 x i64> %15768, <2 x i64> %15774, <2 x i32> <i32 0, i32 2>
  %15780 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %15779, <2 x i64>* %15780, align 16
  %15781 = shufflevector <2 x i64> %15768, <2 x i64> %15774, <2 x i32> <i32 1, i32 3>
  %15782 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %15781, <2 x i64>* %15782, align 16
  br label %15783

15783:                                            ; preds = %15783, %15147
  %15784 = phi i64 [ 0, %15147 ], [ %15802, %15783 ]
  %15785 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %15784
  %15786 = bitcast <2 x i64>* %15785 to <4 x i32>*
  %15787 = load <4 x i32>, <4 x i32>* %15786, align 16
  %15788 = mul <4 x i32> %15787, <i32 11586, i32 11586, i32 11586, i32 11586>
  %15789 = add <4 x i32> %15788, <i32 2048, i32 2048, i32 2048, i32 2048>
  %15790 = ashr <4 x i32> %15789, <i32 12, i32 12, i32 12, i32 12>
  %15791 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %15784
  %15792 = bitcast <2 x i64>* %15791 to <4 x i32>*
  store <4 x i32> %15790, <4 x i32>* %15792, align 16
  %15793 = or i64 %15784, 1
  %15794 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %15793
  %15795 = bitcast <2 x i64>* %15794 to <4 x i32>*
  %15796 = load <4 x i32>, <4 x i32>* %15795, align 16
  %15797 = mul <4 x i32> %15796, <i32 11586, i32 11586, i32 11586, i32 11586>
  %15798 = add <4 x i32> %15797, <i32 2048, i32 2048, i32 2048, i32 2048>
  %15799 = ashr <4 x i32> %15798, <i32 12, i32 12, i32 12, i32 12>
  %15800 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %15793
  %15801 = bitcast <2 x i64>* %15800 to <4 x i32>*
  store <4 x i32> %15799, <4 x i32>* %15801, align 16
  %15802 = add nuw nsw i64 %15784, 2
  %15803 = icmp eq i64 %15802, 64
  br i1 %15803, label %15804, label %15783

15804:                                            ; preds = %15783
  %15805 = load <4 x i32>, <4 x i32>* %15162, align 16
  %15806 = load <4 x i32>, <4 x i32>* %15178, align 16
  %15807 = shufflevector <4 x i32> %15805, <4 x i32> %15806, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15808 = bitcast <4 x i32> %15807 to <2 x i64>
  %15809 = shufflevector <4 x i32> %15805, <4 x i32> %15806, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15810 = bitcast <4 x i32> %15809 to <2 x i64>
  %15811 = load <4 x i32>, <4 x i32>* %15194, align 16
  %15812 = load <4 x i32>, <4 x i32>* %15210, align 16
  %15813 = shufflevector <4 x i32> %15811, <4 x i32> %15812, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15814 = bitcast <4 x i32> %15813 to <2 x i64>
  %15815 = shufflevector <4 x i32> %15811, <4 x i32> %15812, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15816 = bitcast <4 x i32> %15815 to <2 x i64>
  %15817 = shufflevector <2 x i64> %15808, <2 x i64> %15814, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15817, <2 x i64>* %15148, align 16
  %15818 = shufflevector <2 x i64> %15808, <2 x i64> %15814, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15818, <2 x i64>* %15491, align 16
  %15819 = shufflevector <2 x i64> %15810, <2 x i64> %15816, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15819, <2 x i64>* %15493, align 16
  %15820 = shufflevector <2 x i64> %15810, <2 x i64> %15816, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15820, <2 x i64>* %15495, align 16
  %15821 = load <4 x i32>, <4 x i32>* %15166, align 16
  %15822 = load <4 x i32>, <4 x i32>* %15182, align 16
  %15823 = shufflevector <4 x i32> %15821, <4 x i32> %15822, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15824 = bitcast <4 x i32> %15823 to <2 x i64>
  %15825 = shufflevector <4 x i32> %15821, <4 x i32> %15822, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15826 = bitcast <4 x i32> %15825 to <2 x i64>
  %15827 = load <4 x i32>, <4 x i32>* %15198, align 16
  %15828 = load <4 x i32>, <4 x i32>* %15214, align 16
  %15829 = shufflevector <4 x i32> %15827, <4 x i32> %15828, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15830 = bitcast <4 x i32> %15829 to <2 x i64>
  %15831 = shufflevector <4 x i32> %15827, <4 x i32> %15828, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15832 = bitcast <4 x i32> %15831 to <2 x i64>
  %15833 = shufflevector <2 x i64> %15824, <2 x i64> %15830, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15833, <2 x i64>* %15505, align 16
  %15834 = shufflevector <2 x i64> %15824, <2 x i64> %15830, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15834, <2 x i64>* %15507, align 16
  %15835 = shufflevector <2 x i64> %15826, <2 x i64> %15832, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15835, <2 x i64>* %15509, align 16
  %15836 = shufflevector <2 x i64> %15826, <2 x i64> %15832, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15836, <2 x i64>* %15511, align 16
  %15837 = load <4 x i32>, <4 x i32>* %15242, align 16
  %15838 = load <4 x i32>, <4 x i32>* %15258, align 16
  %15839 = shufflevector <4 x i32> %15837, <4 x i32> %15838, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15840 = bitcast <4 x i32> %15839 to <2 x i64>
  %15841 = shufflevector <4 x i32> %15837, <4 x i32> %15838, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15842 = bitcast <4 x i32> %15841 to <2 x i64>
  %15843 = load <4 x i32>, <4 x i32>* %15274, align 16
  %15844 = load <4 x i32>, <4 x i32>* %15290, align 16
  %15845 = shufflevector <4 x i32> %15843, <4 x i32> %15844, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15846 = bitcast <4 x i32> %15845 to <2 x i64>
  %15847 = shufflevector <4 x i32> %15843, <4 x i32> %15844, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15848 = bitcast <4 x i32> %15847 to <2 x i64>
  %15849 = shufflevector <2 x i64> %15840, <2 x i64> %15846, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15849, <2 x i64>* %15524, align 16
  %15850 = shufflevector <2 x i64> %15840, <2 x i64> %15846, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15850, <2 x i64>* %15526, align 16
  %15851 = shufflevector <2 x i64> %15842, <2 x i64> %15848, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15851, <2 x i64>* %15528, align 16
  %15852 = shufflevector <2 x i64> %15842, <2 x i64> %15848, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15852, <2 x i64>* %15530, align 16
  %15853 = load <4 x i32>, <4 x i32>* %15246, align 16
  %15854 = load <4 x i32>, <4 x i32>* %15262, align 16
  %15855 = shufflevector <4 x i32> %15853, <4 x i32> %15854, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15856 = bitcast <4 x i32> %15855 to <2 x i64>
  %15857 = shufflevector <4 x i32> %15853, <4 x i32> %15854, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15858 = bitcast <4 x i32> %15857 to <2 x i64>
  %15859 = load <4 x i32>, <4 x i32>* %15278, align 16
  %15860 = load <4 x i32>, <4 x i32>* %15294, align 16
  %15861 = shufflevector <4 x i32> %15859, <4 x i32> %15860, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15862 = bitcast <4 x i32> %15861 to <2 x i64>
  %15863 = shufflevector <4 x i32> %15859, <4 x i32> %15860, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15864 = bitcast <4 x i32> %15863 to <2 x i64>
  %15865 = shufflevector <2 x i64> %15856, <2 x i64> %15862, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15865, <2 x i64>* %15544, align 16
  %15866 = shufflevector <2 x i64> %15856, <2 x i64> %15862, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15866, <2 x i64>* %15546, align 16
  %15867 = shufflevector <2 x i64> %15858, <2 x i64> %15864, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15867, <2 x i64>* %15548, align 16
  %15868 = shufflevector <2 x i64> %15858, <2 x i64> %15864, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15868, <2 x i64>* %15550, align 16
  %15869 = load <4 x i32>, <4 x i32>* %15170, align 16
  %15870 = load <4 x i32>, <4 x i32>* %15186, align 16
  %15871 = shufflevector <4 x i32> %15869, <4 x i32> %15870, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15872 = bitcast <4 x i32> %15871 to <2 x i64>
  %15873 = shufflevector <4 x i32> %15869, <4 x i32> %15870, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15874 = bitcast <4 x i32> %15873 to <2 x i64>
  %15875 = load <4 x i32>, <4 x i32>* %15202, align 16
  %15876 = load <4 x i32>, <4 x i32>* %15218, align 16
  %15877 = shufflevector <4 x i32> %15875, <4 x i32> %15876, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15878 = bitcast <4 x i32> %15877 to <2 x i64>
  %15879 = shufflevector <4 x i32> %15875, <4 x i32> %15876, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15880 = bitcast <4 x i32> %15879 to <2 x i64>
  %15881 = shufflevector <2 x i64> %15872, <2 x i64> %15878, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15881, <2 x i64>* %15560, align 16
  %15882 = shufflevector <2 x i64> %15872, <2 x i64> %15878, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15882, <2 x i64>* %15562, align 16
  %15883 = shufflevector <2 x i64> %15874, <2 x i64> %15880, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15883, <2 x i64>* %15564, align 16
  %15884 = shufflevector <2 x i64> %15874, <2 x i64> %15880, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15884, <2 x i64>* %15566, align 16
  %15885 = load <4 x i32>, <4 x i32>* %15174, align 16
  %15886 = load <4 x i32>, <4 x i32>* %15190, align 16
  %15887 = shufflevector <4 x i32> %15885, <4 x i32> %15886, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15888 = bitcast <4 x i32> %15887 to <2 x i64>
  %15889 = shufflevector <4 x i32> %15885, <4 x i32> %15886, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15890 = bitcast <4 x i32> %15889 to <2 x i64>
  %15891 = load <4 x i32>, <4 x i32>* %15206, align 16
  %15892 = load <4 x i32>, <4 x i32>* %15222, align 16
  %15893 = shufflevector <4 x i32> %15891, <4 x i32> %15892, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15894 = bitcast <4 x i32> %15893 to <2 x i64>
  %15895 = shufflevector <4 x i32> %15891, <4 x i32> %15892, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15896 = bitcast <4 x i32> %15895 to <2 x i64>
  %15897 = shufflevector <2 x i64> %15888, <2 x i64> %15894, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15897, <2 x i64>* %15576, align 16
  %15898 = shufflevector <2 x i64> %15888, <2 x i64> %15894, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15898, <2 x i64>* %15578, align 16
  %15899 = shufflevector <2 x i64> %15890, <2 x i64> %15896, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15899, <2 x i64>* %15580, align 16
  %15900 = shufflevector <2 x i64> %15890, <2 x i64> %15896, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15900, <2 x i64>* %15582, align 16
  %15901 = load <4 x i32>, <4 x i32>* %15250, align 16
  %15902 = load <4 x i32>, <4 x i32>* %15266, align 16
  %15903 = shufflevector <4 x i32> %15901, <4 x i32> %15902, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15904 = bitcast <4 x i32> %15903 to <2 x i64>
  %15905 = shufflevector <4 x i32> %15901, <4 x i32> %15902, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15906 = bitcast <4 x i32> %15905 to <2 x i64>
  %15907 = load <4 x i32>, <4 x i32>* %15282, align 16
  %15908 = load <4 x i32>, <4 x i32>* %15298, align 16
  %15909 = shufflevector <4 x i32> %15907, <4 x i32> %15908, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15910 = bitcast <4 x i32> %15909 to <2 x i64>
  %15911 = shufflevector <4 x i32> %15907, <4 x i32> %15908, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15912 = bitcast <4 x i32> %15911 to <2 x i64>
  %15913 = shufflevector <2 x i64> %15904, <2 x i64> %15910, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15913, <2 x i64>* %15596, align 16
  %15914 = shufflevector <2 x i64> %15904, <2 x i64> %15910, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15914, <2 x i64>* %15598, align 16
  %15915 = shufflevector <2 x i64> %15906, <2 x i64> %15912, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15915, <2 x i64>* %15600, align 16
  %15916 = shufflevector <2 x i64> %15906, <2 x i64> %15912, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15916, <2 x i64>* %15602, align 16
  %15917 = load <4 x i32>, <4 x i32>* %15254, align 16
  %15918 = load <4 x i32>, <4 x i32>* %15270, align 16
  %15919 = shufflevector <4 x i32> %15917, <4 x i32> %15918, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15920 = bitcast <4 x i32> %15919 to <2 x i64>
  %15921 = shufflevector <4 x i32> %15917, <4 x i32> %15918, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15922 = bitcast <4 x i32> %15921 to <2 x i64>
  %15923 = load <4 x i32>, <4 x i32>* %15286, align 16
  %15924 = load <4 x i32>, <4 x i32>* %15302, align 16
  %15925 = shufflevector <4 x i32> %15923, <4 x i32> %15924, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15926 = bitcast <4 x i32> %15925 to <2 x i64>
  %15927 = shufflevector <4 x i32> %15923, <4 x i32> %15924, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15928 = bitcast <4 x i32> %15927 to <2 x i64>
  %15929 = shufflevector <2 x i64> %15920, <2 x i64> %15926, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15929, <2 x i64>* %15616, align 16
  %15930 = shufflevector <2 x i64> %15920, <2 x i64> %15926, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15930, <2 x i64>* %15618, align 16
  %15931 = shufflevector <2 x i64> %15922, <2 x i64> %15928, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15931, <2 x i64>* %15620, align 16
  %15932 = shufflevector <2 x i64> %15922, <2 x i64> %15928, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15932, <2 x i64>* %15622, align 16
  %15933 = load <4 x i32>, <4 x i32>* %15322, align 16
  %15934 = load <4 x i32>, <4 x i32>* %15338, align 16
  %15935 = shufflevector <4 x i32> %15933, <4 x i32> %15934, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15936 = bitcast <4 x i32> %15935 to <2 x i64>
  %15937 = shufflevector <4 x i32> %15933, <4 x i32> %15934, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15938 = bitcast <4 x i32> %15937 to <2 x i64>
  %15939 = load <4 x i32>, <4 x i32>* %15354, align 16
  %15940 = load <4 x i32>, <4 x i32>* %15370, align 16
  %15941 = shufflevector <4 x i32> %15939, <4 x i32> %15940, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15942 = bitcast <4 x i32> %15941 to <2 x i64>
  %15943 = shufflevector <4 x i32> %15939, <4 x i32> %15940, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15944 = bitcast <4 x i32> %15943 to <2 x i64>
  %15945 = shufflevector <2 x i64> %15936, <2 x i64> %15942, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15945, <2 x i64>* %15636, align 16
  %15946 = shufflevector <2 x i64> %15936, <2 x i64> %15942, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15946, <2 x i64>* %15638, align 16
  %15947 = shufflevector <2 x i64> %15938, <2 x i64> %15944, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15947, <2 x i64>* %15640, align 16
  %15948 = shufflevector <2 x i64> %15938, <2 x i64> %15944, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15948, <2 x i64>* %15642, align 16
  %15949 = load <4 x i32>, <4 x i32>* %15326, align 16
  %15950 = load <4 x i32>, <4 x i32>* %15342, align 16
  %15951 = shufflevector <4 x i32> %15949, <4 x i32> %15950, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15952 = bitcast <4 x i32> %15951 to <2 x i64>
  %15953 = shufflevector <4 x i32> %15949, <4 x i32> %15950, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15954 = bitcast <4 x i32> %15953 to <2 x i64>
  %15955 = load <4 x i32>, <4 x i32>* %15358, align 16
  %15956 = load <4 x i32>, <4 x i32>* %15374, align 16
  %15957 = shufflevector <4 x i32> %15955, <4 x i32> %15956, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15958 = bitcast <4 x i32> %15957 to <2 x i64>
  %15959 = shufflevector <4 x i32> %15955, <4 x i32> %15956, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15960 = bitcast <4 x i32> %15959 to <2 x i64>
  %15961 = shufflevector <2 x i64> %15952, <2 x i64> %15958, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15961, <2 x i64>* %15656, align 16
  %15962 = shufflevector <2 x i64> %15952, <2 x i64> %15958, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15962, <2 x i64>* %15658, align 16
  %15963 = shufflevector <2 x i64> %15954, <2 x i64> %15960, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15963, <2 x i64>* %15660, align 16
  %15964 = shufflevector <2 x i64> %15954, <2 x i64> %15960, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15964, <2 x i64>* %15662, align 16
  %15965 = load <4 x i32>, <4 x i32>* %15402, align 16
  %15966 = load <4 x i32>, <4 x i32>* %15418, align 16
  %15967 = shufflevector <4 x i32> %15965, <4 x i32> %15966, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15968 = bitcast <4 x i32> %15967 to <2 x i64>
  %15969 = shufflevector <4 x i32> %15965, <4 x i32> %15966, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15970 = bitcast <4 x i32> %15969 to <2 x i64>
  %15971 = load <4 x i32>, <4 x i32>* %15434, align 16
  %15972 = load <4 x i32>, <4 x i32>* %15450, align 16
  %15973 = shufflevector <4 x i32> %15971, <4 x i32> %15972, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15974 = bitcast <4 x i32> %15973 to <2 x i64>
  %15975 = shufflevector <4 x i32> %15971, <4 x i32> %15972, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15976 = bitcast <4 x i32> %15975 to <2 x i64>
  %15977 = shufflevector <2 x i64> %15968, <2 x i64> %15974, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15977, <2 x i64>* %15676, align 16
  %15978 = shufflevector <2 x i64> %15968, <2 x i64> %15974, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15978, <2 x i64>* %15678, align 16
  %15979 = shufflevector <2 x i64> %15970, <2 x i64> %15976, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15979, <2 x i64>* %15680, align 16
  %15980 = shufflevector <2 x i64> %15970, <2 x i64> %15976, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15980, <2 x i64>* %15682, align 16
  %15981 = load <4 x i32>, <4 x i32>* %15406, align 16
  %15982 = load <4 x i32>, <4 x i32>* %15422, align 16
  %15983 = shufflevector <4 x i32> %15981, <4 x i32> %15982, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15984 = bitcast <4 x i32> %15983 to <2 x i64>
  %15985 = shufflevector <4 x i32> %15981, <4 x i32> %15982, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15986 = bitcast <4 x i32> %15985 to <2 x i64>
  %15987 = load <4 x i32>, <4 x i32>* %15438, align 16
  %15988 = load <4 x i32>, <4 x i32>* %15454, align 16
  %15989 = shufflevector <4 x i32> %15987, <4 x i32> %15988, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %15990 = bitcast <4 x i32> %15989 to <2 x i64>
  %15991 = shufflevector <4 x i32> %15987, <4 x i32> %15988, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %15992 = bitcast <4 x i32> %15991 to <2 x i64>
  %15993 = shufflevector <2 x i64> %15984, <2 x i64> %15990, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15993, <2 x i64>* %15696, align 16
  %15994 = shufflevector <2 x i64> %15984, <2 x i64> %15990, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15994, <2 x i64>* %15698, align 16
  %15995 = shufflevector <2 x i64> %15986, <2 x i64> %15992, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %15995, <2 x i64>* %15700, align 16
  %15996 = shufflevector <2 x i64> %15986, <2 x i64> %15992, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %15996, <2 x i64>* %15702, align 16
  %15997 = load <4 x i32>, <4 x i32>* %15330, align 16
  %15998 = load <4 x i32>, <4 x i32>* %15346, align 16
  %15999 = shufflevector <4 x i32> %15997, <4 x i32> %15998, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16000 = bitcast <4 x i32> %15999 to <2 x i64>
  %16001 = shufflevector <4 x i32> %15997, <4 x i32> %15998, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16002 = bitcast <4 x i32> %16001 to <2 x i64>
  %16003 = load <4 x i32>, <4 x i32>* %15362, align 16
  %16004 = load <4 x i32>, <4 x i32>* %15378, align 16
  %16005 = shufflevector <4 x i32> %16003, <4 x i32> %16004, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16006 = bitcast <4 x i32> %16005 to <2 x i64>
  %16007 = shufflevector <4 x i32> %16003, <4 x i32> %16004, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16008 = bitcast <4 x i32> %16007 to <2 x i64>
  %16009 = shufflevector <2 x i64> %16000, <2 x i64> %16006, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16009, <2 x i64>* %15716, align 16
  %16010 = shufflevector <2 x i64> %16000, <2 x i64> %16006, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16010, <2 x i64>* %15718, align 16
  %16011 = shufflevector <2 x i64> %16002, <2 x i64> %16008, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16011, <2 x i64>* %15720, align 16
  %16012 = shufflevector <2 x i64> %16002, <2 x i64> %16008, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16012, <2 x i64>* %15722, align 16
  %16013 = load <4 x i32>, <4 x i32>* %15334, align 16
  %16014 = load <4 x i32>, <4 x i32>* %15350, align 16
  %16015 = shufflevector <4 x i32> %16013, <4 x i32> %16014, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16016 = bitcast <4 x i32> %16015 to <2 x i64>
  %16017 = shufflevector <4 x i32> %16013, <4 x i32> %16014, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16018 = bitcast <4 x i32> %16017 to <2 x i64>
  %16019 = load <4 x i32>, <4 x i32>* %15366, align 16
  %16020 = load <4 x i32>, <4 x i32>* %15382, align 16
  %16021 = shufflevector <4 x i32> %16019, <4 x i32> %16020, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16022 = bitcast <4 x i32> %16021 to <2 x i64>
  %16023 = shufflevector <4 x i32> %16019, <4 x i32> %16020, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16024 = bitcast <4 x i32> %16023 to <2 x i64>
  %16025 = shufflevector <2 x i64> %16016, <2 x i64> %16022, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16025, <2 x i64>* %15736, align 16
  %16026 = shufflevector <2 x i64> %16016, <2 x i64> %16022, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16026, <2 x i64>* %15738, align 16
  %16027 = shufflevector <2 x i64> %16018, <2 x i64> %16024, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16027, <2 x i64>* %15740, align 16
  %16028 = shufflevector <2 x i64> %16018, <2 x i64> %16024, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16028, <2 x i64>* %15742, align 16
  %16029 = load <4 x i32>, <4 x i32>* %15410, align 16
  %16030 = load <4 x i32>, <4 x i32>* %15426, align 16
  %16031 = shufflevector <4 x i32> %16029, <4 x i32> %16030, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16032 = bitcast <4 x i32> %16031 to <2 x i64>
  %16033 = shufflevector <4 x i32> %16029, <4 x i32> %16030, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16034 = bitcast <4 x i32> %16033 to <2 x i64>
  %16035 = load <4 x i32>, <4 x i32>* %15442, align 16
  %16036 = load <4 x i32>, <4 x i32>* %15458, align 16
  %16037 = shufflevector <4 x i32> %16035, <4 x i32> %16036, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16038 = bitcast <4 x i32> %16037 to <2 x i64>
  %16039 = shufflevector <4 x i32> %16035, <4 x i32> %16036, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16040 = bitcast <4 x i32> %16039 to <2 x i64>
  %16041 = shufflevector <2 x i64> %16032, <2 x i64> %16038, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16041, <2 x i64>* %15756, align 16
  %16042 = shufflevector <2 x i64> %16032, <2 x i64> %16038, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16042, <2 x i64>* %15758, align 16
  %16043 = shufflevector <2 x i64> %16034, <2 x i64> %16040, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16043, <2 x i64>* %15760, align 16
  %16044 = shufflevector <2 x i64> %16034, <2 x i64> %16040, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16044, <2 x i64>* %15762, align 16
  %16045 = load <4 x i32>, <4 x i32>* %15414, align 16
  %16046 = load <4 x i32>, <4 x i32>* %15430, align 16
  %16047 = shufflevector <4 x i32> %16045, <4 x i32> %16046, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16048 = bitcast <4 x i32> %16047 to <2 x i64>
  %16049 = shufflevector <4 x i32> %16045, <4 x i32> %16046, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16050 = bitcast <4 x i32> %16049 to <2 x i64>
  %16051 = load <4 x i32>, <4 x i32>* %15446, align 16
  %16052 = load <4 x i32>, <4 x i32>* %15462, align 16
  %16053 = shufflevector <4 x i32> %16051, <4 x i32> %16052, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16054 = bitcast <4 x i32> %16053 to <2 x i64>
  %16055 = shufflevector <4 x i32> %16051, <4 x i32> %16052, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16056 = bitcast <4 x i32> %16055 to <2 x i64>
  %16057 = shufflevector <2 x i64> %16048, <2 x i64> %16054, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16057, <2 x i64>* %15776, align 16
  %16058 = shufflevector <2 x i64> %16048, <2 x i64> %16054, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16058, <2 x i64>* %15778, align 16
  %16059 = shufflevector <2 x i64> %16050, <2 x i64> %16056, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16059, <2 x i64>* %15780, align 16
  %16060 = shufflevector <2 x i64> %16050, <2 x i64> %16056, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16060, <2 x i64>* %15782, align 16
  %16061 = bitcast i32* %1 to <2 x i64>*
  %16062 = load <2 x i64>, <2 x i64>* %15148, align 16
  store <2 x i64> %16062, <2 x i64>* %16061, align 16
  %16063 = getelementptr inbounds i32, i32* %1, i64 4
  %16064 = bitcast i32* %16063 to <2 x i64>*
  %16065 = load <2 x i64>, <2 x i64>* %15524, align 16
  store <2 x i64> %16065, <2 x i64>* %16064, align 16
  %16066 = getelementptr inbounds i32, i32* %1, i64 8
  %16067 = bitcast i32* %16066 to <2 x i64>*
  %16068 = load <2 x i64>, <2 x i64>* %15636, align 16
  store <2 x i64> %16068, <2 x i64>* %16067, align 16
  %16069 = getelementptr inbounds i32, i32* %1, i64 12
  %16070 = bitcast i32* %16069 to <2 x i64>*
  %16071 = load <2 x i64>, <2 x i64>* %15676, align 16
  store <2 x i64> %16071, <2 x i64>* %16070, align 16
  %16072 = getelementptr inbounds i32, i32* %1, i64 16
  %16073 = bitcast i32* %16072 to <2 x i64>*
  %16074 = load <2 x i64>, <2 x i64>* %15491, align 16
  store <2 x i64> %16074, <2 x i64>* %16073, align 16
  %16075 = getelementptr inbounds i32, i32* %1, i64 20
  %16076 = bitcast i32* %16075 to <2 x i64>*
  %16077 = load <2 x i64>, <2 x i64>* %15526, align 16
  store <2 x i64> %16077, <2 x i64>* %16076, align 16
  %16078 = getelementptr inbounds i32, i32* %1, i64 24
  %16079 = bitcast i32* %16078 to <2 x i64>*
  %16080 = load <2 x i64>, <2 x i64>* %15638, align 16
  store <2 x i64> %16080, <2 x i64>* %16079, align 16
  %16081 = getelementptr inbounds i32, i32* %1, i64 28
  %16082 = bitcast i32* %16081 to <2 x i64>*
  %16083 = load <2 x i64>, <2 x i64>* %15678, align 16
  store <2 x i64> %16083, <2 x i64>* %16082, align 16
  %16084 = getelementptr inbounds i32, i32* %1, i64 32
  %16085 = bitcast i32* %16084 to <2 x i64>*
  %16086 = load <2 x i64>, <2 x i64>* %15493, align 16
  store <2 x i64> %16086, <2 x i64>* %16085, align 16
  %16087 = getelementptr inbounds i32, i32* %1, i64 36
  %16088 = bitcast i32* %16087 to <2 x i64>*
  %16089 = load <2 x i64>, <2 x i64>* %15528, align 16
  store <2 x i64> %16089, <2 x i64>* %16088, align 16
  %16090 = getelementptr inbounds i32, i32* %1, i64 40
  %16091 = bitcast i32* %16090 to <2 x i64>*
  %16092 = load <2 x i64>, <2 x i64>* %15640, align 16
  store <2 x i64> %16092, <2 x i64>* %16091, align 16
  %16093 = getelementptr inbounds i32, i32* %1, i64 44
  %16094 = bitcast i32* %16093 to <2 x i64>*
  %16095 = load <2 x i64>, <2 x i64>* %15680, align 16
  store <2 x i64> %16095, <2 x i64>* %16094, align 16
  %16096 = getelementptr inbounds i32, i32* %1, i64 48
  %16097 = bitcast i32* %16096 to <2 x i64>*
  %16098 = load <2 x i64>, <2 x i64>* %15495, align 16
  store <2 x i64> %16098, <2 x i64>* %16097, align 16
  %16099 = getelementptr inbounds i32, i32* %1, i64 52
  %16100 = bitcast i32* %16099 to <2 x i64>*
  %16101 = load <2 x i64>, <2 x i64>* %15530, align 16
  store <2 x i64> %16101, <2 x i64>* %16100, align 16
  %16102 = getelementptr inbounds i32, i32* %1, i64 56
  %16103 = bitcast i32* %16102 to <2 x i64>*
  %16104 = load <2 x i64>, <2 x i64>* %15642, align 16
  store <2 x i64> %16104, <2 x i64>* %16103, align 16
  %16105 = getelementptr inbounds i32, i32* %1, i64 60
  %16106 = bitcast i32* %16105 to <2 x i64>*
  %16107 = load <2 x i64>, <2 x i64>* %15682, align 16
  store <2 x i64> %16107, <2 x i64>* %16106, align 16
  %16108 = getelementptr inbounds i32, i32* %1, i64 64
  %16109 = bitcast i32* %16108 to <2 x i64>*
  %16110 = load <2 x i64>, <2 x i64>* %15505, align 16
  store <2 x i64> %16110, <2 x i64>* %16109, align 16
  %16111 = getelementptr inbounds i32, i32* %1, i64 68
  %16112 = bitcast i32* %16111 to <2 x i64>*
  %16113 = load <2 x i64>, <2 x i64>* %15544, align 16
  store <2 x i64> %16113, <2 x i64>* %16112, align 16
  %16114 = getelementptr inbounds i32, i32* %1, i64 72
  %16115 = bitcast i32* %16114 to <2 x i64>*
  %16116 = load <2 x i64>, <2 x i64>* %15656, align 16
  store <2 x i64> %16116, <2 x i64>* %16115, align 16
  %16117 = getelementptr inbounds i32, i32* %1, i64 76
  %16118 = bitcast i32* %16117 to <2 x i64>*
  %16119 = load <2 x i64>, <2 x i64>* %15696, align 16
  store <2 x i64> %16119, <2 x i64>* %16118, align 16
  %16120 = getelementptr inbounds i32, i32* %1, i64 80
  %16121 = bitcast i32* %16120 to <2 x i64>*
  %16122 = load <2 x i64>, <2 x i64>* %15507, align 16
  store <2 x i64> %16122, <2 x i64>* %16121, align 16
  %16123 = getelementptr inbounds i32, i32* %1, i64 84
  %16124 = bitcast i32* %16123 to <2 x i64>*
  %16125 = load <2 x i64>, <2 x i64>* %15546, align 16
  store <2 x i64> %16125, <2 x i64>* %16124, align 16
  %16126 = getelementptr inbounds i32, i32* %1, i64 88
  %16127 = bitcast i32* %16126 to <2 x i64>*
  %16128 = load <2 x i64>, <2 x i64>* %15658, align 16
  store <2 x i64> %16128, <2 x i64>* %16127, align 16
  %16129 = getelementptr inbounds i32, i32* %1, i64 92
  %16130 = bitcast i32* %16129 to <2 x i64>*
  %16131 = load <2 x i64>, <2 x i64>* %15698, align 16
  store <2 x i64> %16131, <2 x i64>* %16130, align 16
  %16132 = getelementptr inbounds i32, i32* %1, i64 96
  %16133 = bitcast i32* %16132 to <2 x i64>*
  %16134 = load <2 x i64>, <2 x i64>* %15509, align 16
  store <2 x i64> %16134, <2 x i64>* %16133, align 16
  %16135 = getelementptr inbounds i32, i32* %1, i64 100
  %16136 = bitcast i32* %16135 to <2 x i64>*
  %16137 = load <2 x i64>, <2 x i64>* %15548, align 16
  store <2 x i64> %16137, <2 x i64>* %16136, align 16
  %16138 = getelementptr inbounds i32, i32* %1, i64 104
  %16139 = bitcast i32* %16138 to <2 x i64>*
  %16140 = load <2 x i64>, <2 x i64>* %15660, align 16
  store <2 x i64> %16140, <2 x i64>* %16139, align 16
  %16141 = getelementptr inbounds i32, i32* %1, i64 108
  %16142 = bitcast i32* %16141 to <2 x i64>*
  %16143 = load <2 x i64>, <2 x i64>* %15700, align 16
  store <2 x i64> %16143, <2 x i64>* %16142, align 16
  %16144 = getelementptr inbounds i32, i32* %1, i64 112
  %16145 = bitcast i32* %16144 to <2 x i64>*
  %16146 = load <2 x i64>, <2 x i64>* %15511, align 16
  store <2 x i64> %16146, <2 x i64>* %16145, align 16
  %16147 = getelementptr inbounds i32, i32* %1, i64 116
  %16148 = bitcast i32* %16147 to <2 x i64>*
  %16149 = load <2 x i64>, <2 x i64>* %15550, align 16
  store <2 x i64> %16149, <2 x i64>* %16148, align 16
  %16150 = getelementptr inbounds i32, i32* %1, i64 120
  %16151 = bitcast i32* %16150 to <2 x i64>*
  %16152 = load <2 x i64>, <2 x i64>* %15662, align 16
  store <2 x i64> %16152, <2 x i64>* %16151, align 16
  %16153 = getelementptr inbounds i32, i32* %1, i64 124
  %16154 = bitcast i32* %16153 to <2 x i64>*
  %16155 = load <2 x i64>, <2 x i64>* %15702, align 16
  store <2 x i64> %16155, <2 x i64>* %16154, align 16
  %16156 = getelementptr inbounds i32, i32* %1, i64 128
  %16157 = bitcast i32* %16156 to <2 x i64>*
  %16158 = load <2 x i64>, <2 x i64>* %15560, align 16
  store <2 x i64> %16158, <2 x i64>* %16157, align 16
  %16159 = getelementptr inbounds i32, i32* %1, i64 132
  %16160 = bitcast i32* %16159 to <2 x i64>*
  %16161 = load <2 x i64>, <2 x i64>* %15596, align 16
  store <2 x i64> %16161, <2 x i64>* %16160, align 16
  %16162 = getelementptr inbounds i32, i32* %1, i64 136
  %16163 = bitcast i32* %16162 to <2 x i64>*
  %16164 = load <2 x i64>, <2 x i64>* %15716, align 16
  store <2 x i64> %16164, <2 x i64>* %16163, align 16
  %16165 = getelementptr inbounds i32, i32* %1, i64 140
  %16166 = bitcast i32* %16165 to <2 x i64>*
  %16167 = load <2 x i64>, <2 x i64>* %15756, align 16
  store <2 x i64> %16167, <2 x i64>* %16166, align 16
  %16168 = getelementptr inbounds i32, i32* %1, i64 144
  %16169 = bitcast i32* %16168 to <2 x i64>*
  %16170 = load <2 x i64>, <2 x i64>* %15562, align 16
  store <2 x i64> %16170, <2 x i64>* %16169, align 16
  %16171 = getelementptr inbounds i32, i32* %1, i64 148
  %16172 = bitcast i32* %16171 to <2 x i64>*
  %16173 = load <2 x i64>, <2 x i64>* %15598, align 16
  store <2 x i64> %16173, <2 x i64>* %16172, align 16
  %16174 = getelementptr inbounds i32, i32* %1, i64 152
  %16175 = bitcast i32* %16174 to <2 x i64>*
  %16176 = load <2 x i64>, <2 x i64>* %15718, align 16
  store <2 x i64> %16176, <2 x i64>* %16175, align 16
  %16177 = getelementptr inbounds i32, i32* %1, i64 156
  %16178 = bitcast i32* %16177 to <2 x i64>*
  %16179 = load <2 x i64>, <2 x i64>* %15758, align 16
  store <2 x i64> %16179, <2 x i64>* %16178, align 16
  %16180 = getelementptr inbounds i32, i32* %1, i64 160
  %16181 = bitcast i32* %16180 to <2 x i64>*
  %16182 = load <2 x i64>, <2 x i64>* %15564, align 16
  store <2 x i64> %16182, <2 x i64>* %16181, align 16
  %16183 = getelementptr inbounds i32, i32* %1, i64 164
  %16184 = bitcast i32* %16183 to <2 x i64>*
  %16185 = load <2 x i64>, <2 x i64>* %15600, align 16
  store <2 x i64> %16185, <2 x i64>* %16184, align 16
  %16186 = getelementptr inbounds i32, i32* %1, i64 168
  %16187 = bitcast i32* %16186 to <2 x i64>*
  %16188 = load <2 x i64>, <2 x i64>* %15720, align 16
  store <2 x i64> %16188, <2 x i64>* %16187, align 16
  %16189 = getelementptr inbounds i32, i32* %1, i64 172
  %16190 = bitcast i32* %16189 to <2 x i64>*
  %16191 = load <2 x i64>, <2 x i64>* %15760, align 16
  store <2 x i64> %16191, <2 x i64>* %16190, align 16
  %16192 = getelementptr inbounds i32, i32* %1, i64 176
  %16193 = bitcast i32* %16192 to <2 x i64>*
  %16194 = load <2 x i64>, <2 x i64>* %15566, align 16
  store <2 x i64> %16194, <2 x i64>* %16193, align 16
  %16195 = getelementptr inbounds i32, i32* %1, i64 180
  %16196 = bitcast i32* %16195 to <2 x i64>*
  %16197 = load <2 x i64>, <2 x i64>* %15602, align 16
  store <2 x i64> %16197, <2 x i64>* %16196, align 16
  %16198 = getelementptr inbounds i32, i32* %1, i64 184
  %16199 = bitcast i32* %16198 to <2 x i64>*
  %16200 = load <2 x i64>, <2 x i64>* %15722, align 16
  store <2 x i64> %16200, <2 x i64>* %16199, align 16
  %16201 = getelementptr inbounds i32, i32* %1, i64 188
  %16202 = bitcast i32* %16201 to <2 x i64>*
  %16203 = load <2 x i64>, <2 x i64>* %15762, align 16
  store <2 x i64> %16203, <2 x i64>* %16202, align 16
  %16204 = getelementptr inbounds i32, i32* %1, i64 192
  %16205 = bitcast i32* %16204 to <2 x i64>*
  %16206 = load <2 x i64>, <2 x i64>* %15576, align 16
  store <2 x i64> %16206, <2 x i64>* %16205, align 16
  %16207 = getelementptr inbounds i32, i32* %1, i64 196
  %16208 = bitcast i32* %16207 to <2 x i64>*
  %16209 = load <2 x i64>, <2 x i64>* %15616, align 16
  store <2 x i64> %16209, <2 x i64>* %16208, align 16
  %16210 = getelementptr inbounds i32, i32* %1, i64 200
  %16211 = bitcast i32* %16210 to <2 x i64>*
  %16212 = load <2 x i64>, <2 x i64>* %15736, align 16
  store <2 x i64> %16212, <2 x i64>* %16211, align 16
  %16213 = getelementptr inbounds i32, i32* %1, i64 204
  %16214 = bitcast i32* %16213 to <2 x i64>*
  %16215 = load <2 x i64>, <2 x i64>* %15776, align 16
  store <2 x i64> %16215, <2 x i64>* %16214, align 16
  %16216 = getelementptr inbounds i32, i32* %1, i64 208
  %16217 = bitcast i32* %16216 to <2 x i64>*
  %16218 = load <2 x i64>, <2 x i64>* %15578, align 16
  store <2 x i64> %16218, <2 x i64>* %16217, align 16
  %16219 = getelementptr inbounds i32, i32* %1, i64 212
  %16220 = bitcast i32* %16219 to <2 x i64>*
  %16221 = load <2 x i64>, <2 x i64>* %15618, align 16
  store <2 x i64> %16221, <2 x i64>* %16220, align 16
  %16222 = getelementptr inbounds i32, i32* %1, i64 216
  %16223 = bitcast i32* %16222 to <2 x i64>*
  %16224 = load <2 x i64>, <2 x i64>* %15738, align 16
  store <2 x i64> %16224, <2 x i64>* %16223, align 16
  %16225 = getelementptr inbounds i32, i32* %1, i64 220
  %16226 = bitcast i32* %16225 to <2 x i64>*
  %16227 = load <2 x i64>, <2 x i64>* %15778, align 16
  store <2 x i64> %16227, <2 x i64>* %16226, align 16
  %16228 = getelementptr inbounds i32, i32* %1, i64 224
  %16229 = bitcast i32* %16228 to <2 x i64>*
  %16230 = load <2 x i64>, <2 x i64>* %15580, align 16
  store <2 x i64> %16230, <2 x i64>* %16229, align 16
  %16231 = getelementptr inbounds i32, i32* %1, i64 228
  %16232 = bitcast i32* %16231 to <2 x i64>*
  %16233 = load <2 x i64>, <2 x i64>* %15620, align 16
  store <2 x i64> %16233, <2 x i64>* %16232, align 16
  %16234 = getelementptr inbounds i32, i32* %1, i64 232
  %16235 = bitcast i32* %16234 to <2 x i64>*
  %16236 = load <2 x i64>, <2 x i64>* %15740, align 16
  store <2 x i64> %16236, <2 x i64>* %16235, align 16
  %16237 = getelementptr inbounds i32, i32* %1, i64 236
  %16238 = bitcast i32* %16237 to <2 x i64>*
  %16239 = load <2 x i64>, <2 x i64>* %15780, align 16
  store <2 x i64> %16239, <2 x i64>* %16238, align 16
  %16240 = getelementptr inbounds i32, i32* %1, i64 240
  %16241 = bitcast i32* %16240 to <2 x i64>*
  %16242 = load <2 x i64>, <2 x i64>* %15582, align 16
  store <2 x i64> %16242, <2 x i64>* %16241, align 16
  %16243 = getelementptr inbounds i32, i32* %1, i64 244
  %16244 = bitcast i32* %16243 to <2 x i64>*
  %16245 = load <2 x i64>, <2 x i64>* %15622, align 16
  store <2 x i64> %16245, <2 x i64>* %16244, align 16
  %16246 = getelementptr inbounds i32, i32* %1, i64 248
  %16247 = bitcast i32* %16246 to <2 x i64>*
  %16248 = load <2 x i64>, <2 x i64>* %15742, align 16
  store <2 x i64> %16248, <2 x i64>* %16247, align 16
  %16249 = getelementptr inbounds i32, i32* %1, i64 252
  %16250 = bitcast i32* %16249 to <2 x i64>*
  %16251 = load <2 x i64>, <2 x i64>* %15782, align 16
  store <2 x i64> %16251, <2 x i64>* %16250, align 16
  br label %17357

16252:                                            ; preds = %5
  %16253 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 0
  %16254 = load i8, i8* %10, align 1
  %16255 = sext i8 %16254 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %16253, i32 %2, i32 0, i32 1, i32 %16255)
  br label %16256

16256:                                            ; preds = %16256, %16252
  %16257 = phi i64 [ 0, %16252 ], [ %16275, %16256 ]
  %16258 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %16257
  %16259 = bitcast <2 x i64>* %16258 to <4 x i32>*
  %16260 = load <4 x i32>, <4 x i32>* %16259, align 16
  %16261 = mul <4 x i32> %16260, <i32 11586, i32 11586, i32 11586, i32 11586>
  %16262 = add <4 x i32> %16261, <i32 2048, i32 2048, i32 2048, i32 2048>
  %16263 = ashr <4 x i32> %16262, <i32 12, i32 12, i32 12, i32 12>
  %16264 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %16257
  %16265 = bitcast <2 x i64>* %16264 to <4 x i32>*
  store <4 x i32> %16263, <4 x i32>* %16265, align 16
  %16266 = or i64 %16257, 1
  %16267 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 %16266
  %16268 = bitcast <2 x i64>* %16267 to <4 x i32>*
  %16269 = load <4 x i32>, <4 x i32>* %16268, align 16
  %16270 = mul <4 x i32> %16269, <i32 11586, i32 11586, i32 11586, i32 11586>
  %16271 = add <4 x i32> %16270, <i32 2048, i32 2048, i32 2048, i32 2048>
  %16272 = ashr <4 x i32> %16271, <i32 12, i32 12, i32 12, i32 12>
  %16273 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 %16266
  %16274 = bitcast <2 x i64>* %16273 to <4 x i32>*
  store <4 x i32> %16272, <4 x i32>* %16274, align 16
  %16275 = add nuw nsw i64 %16257, 2
  %16276 = icmp eq i64 %16275, 64
  br i1 %16276, label %16277, label %16256

16277:                                            ; preds = %16256
  %16278 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  %16279 = getelementptr inbounds i8, i8* %10, i64 1
  %16280 = load i8, i8* %16279, align 1
  %16281 = sext i8 %16280 to i32
  %16282 = sub nsw i32 0, %16281
  %16283 = xor i32 %16281, -1
  %16284 = shl i32 1, %16283
  %16285 = insertelement <4 x i32> undef, i32 %16284, i32 0
  %16286 = shufflevector <4 x i32> %16285, <4 x i32> undef, <4 x i32> zeroinitializer
  %16287 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %16288 = load <4 x i32>, <4 x i32>* %16287, align 16
  %16289 = add <4 x i32> %16286, %16288
  %16290 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %16291 = bitcast <2 x i64>* %16290 to <4 x i32>*
  %16292 = load <4 x i32>, <4 x i32>* %16291, align 16
  %16293 = add <4 x i32> %16286, %16292
  %16294 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  %16295 = bitcast <2 x i64>* %16294 to <4 x i32>*
  %16296 = load <4 x i32>, <4 x i32>* %16295, align 16
  %16297 = add <4 x i32> %16286, %16296
  %16298 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  %16299 = bitcast <2 x i64>* %16298 to <4 x i32>*
  %16300 = load <4 x i32>, <4 x i32>* %16299, align 16
  %16301 = add <4 x i32> %16300, %16286
  %16302 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  %16303 = bitcast <2 x i64>* %16302 to <4 x i32>*
  %16304 = load <4 x i32>, <4 x i32>* %16303, align 16
  %16305 = add <4 x i32> %16304, %16286
  %16306 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  %16307 = bitcast <2 x i64>* %16306 to <4 x i32>*
  %16308 = load <4 x i32>, <4 x i32>* %16307, align 16
  %16309 = add <4 x i32> %16308, %16286
  %16310 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  %16311 = bitcast <2 x i64>* %16310 to <4 x i32>*
  %16312 = load <4 x i32>, <4 x i32>* %16311, align 16
  %16313 = add <4 x i32> %16312, %16286
  %16314 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  %16315 = bitcast <2 x i64>* %16314 to <4 x i32>*
  %16316 = load <4 x i32>, <4 x i32>* %16315, align 16
  %16317 = add <4 x i32> %16316, %16286
  %16318 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %16319 = bitcast <2 x i64>* %16318 to <4 x i32>*
  %16320 = load <4 x i32>, <4 x i32>* %16319, align 16
  %16321 = add <4 x i32> %16320, %16286
  %16322 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %16323 = bitcast <2 x i64>* %16322 to <4 x i32>*
  %16324 = load <4 x i32>, <4 x i32>* %16323, align 16
  %16325 = add <4 x i32> %16324, %16286
  %16326 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %16327 = bitcast <2 x i64>* %16326 to <4 x i32>*
  %16328 = load <4 x i32>, <4 x i32>* %16327, align 16
  %16329 = add <4 x i32> %16328, %16286
  %16330 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %16331 = bitcast <2 x i64>* %16330 to <4 x i32>*
  %16332 = load <4 x i32>, <4 x i32>* %16331, align 16
  %16333 = add <4 x i32> %16332, %16286
  %16334 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %16335 = bitcast <2 x i64>* %16334 to <4 x i32>*
  %16336 = load <4 x i32>, <4 x i32>* %16335, align 16
  %16337 = add <4 x i32> %16336, %16286
  %16338 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %16339 = bitcast <2 x i64>* %16338 to <4 x i32>*
  %16340 = load <4 x i32>, <4 x i32>* %16339, align 16
  %16341 = add <4 x i32> %16340, %16286
  %16342 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %16343 = bitcast <2 x i64>* %16342 to <4 x i32>*
  %16344 = load <4 x i32>, <4 x i32>* %16343, align 16
  %16345 = add <4 x i32> %16344, %16286
  %16346 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %16347 = bitcast <2 x i64>* %16346 to <4 x i32>*
  %16348 = load <4 x i32>, <4 x i32>* %16347, align 16
  %16349 = add <4 x i32> %16348, %16286
  %16350 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16289, i32 %16282) #8
  store <4 x i32> %16350, <4 x i32>* %16287, align 16
  %16351 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16293, i32 %16282) #8
  store <4 x i32> %16351, <4 x i32>* %16291, align 16
  %16352 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16297, i32 %16282) #8
  store <4 x i32> %16352, <4 x i32>* %16295, align 16
  %16353 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16301, i32 %16282) #8
  store <4 x i32> %16353, <4 x i32>* %16299, align 16
  %16354 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16305, i32 %16282) #8
  store <4 x i32> %16354, <4 x i32>* %16303, align 16
  %16355 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16309, i32 %16282) #8
  store <4 x i32> %16355, <4 x i32>* %16307, align 16
  %16356 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16313, i32 %16282) #8
  store <4 x i32> %16356, <4 x i32>* %16311, align 16
  %16357 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16317, i32 %16282) #8
  store <4 x i32> %16357, <4 x i32>* %16315, align 16
  %16358 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16321, i32 %16282) #8
  store <4 x i32> %16358, <4 x i32>* %16319, align 16
  %16359 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16325, i32 %16282) #8
  store <4 x i32> %16359, <4 x i32>* %16323, align 16
  %16360 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16329, i32 %16282) #8
  store <4 x i32> %16360, <4 x i32>* %16327, align 16
  %16361 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16333, i32 %16282) #8
  store <4 x i32> %16361, <4 x i32>* %16331, align 16
  %16362 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16337, i32 %16282) #8
  store <4 x i32> %16362, <4 x i32>* %16335, align 16
  %16363 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16341, i32 %16282) #8
  store <4 x i32> %16363, <4 x i32>* %16339, align 16
  %16364 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16345, i32 %16282) #8
  store <4 x i32> %16364, <4 x i32>* %16343, align 16
  %16365 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16349, i32 %16282) #8
  store <4 x i32> %16365, <4 x i32>* %16347, align 16
  %16366 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  %16367 = bitcast <2 x i64>* %16366 to <4 x i32>*
  %16368 = load <4 x i32>, <4 x i32>* %16367, align 16
  %16369 = add <4 x i32> %16368, %16286
  %16370 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %16371 = bitcast <2 x i64>* %16370 to <4 x i32>*
  %16372 = load <4 x i32>, <4 x i32>* %16371, align 16
  %16373 = add <4 x i32> %16372, %16286
  %16374 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  %16375 = bitcast <2 x i64>* %16374 to <4 x i32>*
  %16376 = load <4 x i32>, <4 x i32>* %16375, align 16
  %16377 = add <4 x i32> %16376, %16286
  %16378 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  %16379 = bitcast <2 x i64>* %16378 to <4 x i32>*
  %16380 = load <4 x i32>, <4 x i32>* %16379, align 16
  %16381 = add <4 x i32> %16380, %16286
  %16382 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  %16383 = bitcast <2 x i64>* %16382 to <4 x i32>*
  %16384 = load <4 x i32>, <4 x i32>* %16383, align 16
  %16385 = add <4 x i32> %16384, %16286
  %16386 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  %16387 = bitcast <2 x i64>* %16386 to <4 x i32>*
  %16388 = load <4 x i32>, <4 x i32>* %16387, align 16
  %16389 = add <4 x i32> %16388, %16286
  %16390 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  %16391 = bitcast <2 x i64>* %16390 to <4 x i32>*
  %16392 = load <4 x i32>, <4 x i32>* %16391, align 16
  %16393 = add <4 x i32> %16392, %16286
  %16394 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  %16395 = bitcast <2 x i64>* %16394 to <4 x i32>*
  %16396 = load <4 x i32>, <4 x i32>* %16395, align 16
  %16397 = add <4 x i32> %16396, %16286
  %16398 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %16399 = bitcast <2 x i64>* %16398 to <4 x i32>*
  %16400 = load <4 x i32>, <4 x i32>* %16399, align 16
  %16401 = add <4 x i32> %16400, %16286
  %16402 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %16403 = bitcast <2 x i64>* %16402 to <4 x i32>*
  %16404 = load <4 x i32>, <4 x i32>* %16403, align 16
  %16405 = add <4 x i32> %16404, %16286
  %16406 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %16407 = bitcast <2 x i64>* %16406 to <4 x i32>*
  %16408 = load <4 x i32>, <4 x i32>* %16407, align 16
  %16409 = add <4 x i32> %16408, %16286
  %16410 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %16411 = bitcast <2 x i64>* %16410 to <4 x i32>*
  %16412 = load <4 x i32>, <4 x i32>* %16411, align 16
  %16413 = add <4 x i32> %16412, %16286
  %16414 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %16415 = bitcast <2 x i64>* %16414 to <4 x i32>*
  %16416 = load <4 x i32>, <4 x i32>* %16415, align 16
  %16417 = add <4 x i32> %16416, %16286
  %16418 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %16419 = bitcast <2 x i64>* %16418 to <4 x i32>*
  %16420 = load <4 x i32>, <4 x i32>* %16419, align 16
  %16421 = add <4 x i32> %16420, %16286
  %16422 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %16423 = bitcast <2 x i64>* %16422 to <4 x i32>*
  %16424 = load <4 x i32>, <4 x i32>* %16423, align 16
  %16425 = add <4 x i32> %16424, %16286
  %16426 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %16427 = bitcast <2 x i64>* %16426 to <4 x i32>*
  %16428 = load <4 x i32>, <4 x i32>* %16427, align 16
  %16429 = add <4 x i32> %16428, %16286
  %16430 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16369, i32 %16282) #8
  store <4 x i32> %16430, <4 x i32>* %16367, align 16
  %16431 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16373, i32 %16282) #8
  store <4 x i32> %16431, <4 x i32>* %16371, align 16
  %16432 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16377, i32 %16282) #8
  store <4 x i32> %16432, <4 x i32>* %16375, align 16
  %16433 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16381, i32 %16282) #8
  store <4 x i32> %16433, <4 x i32>* %16379, align 16
  %16434 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16385, i32 %16282) #8
  store <4 x i32> %16434, <4 x i32>* %16383, align 16
  %16435 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16389, i32 %16282) #8
  store <4 x i32> %16435, <4 x i32>* %16387, align 16
  %16436 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16393, i32 %16282) #8
  store <4 x i32> %16436, <4 x i32>* %16391, align 16
  %16437 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16397, i32 %16282) #8
  store <4 x i32> %16437, <4 x i32>* %16395, align 16
  %16438 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16401, i32 %16282) #8
  store <4 x i32> %16438, <4 x i32>* %16399, align 16
  %16439 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16405, i32 %16282) #8
  store <4 x i32> %16439, <4 x i32>* %16403, align 16
  %16440 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16409, i32 %16282) #8
  store <4 x i32> %16440, <4 x i32>* %16407, align 16
  %16441 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16413, i32 %16282) #8
  store <4 x i32> %16441, <4 x i32>* %16411, align 16
  %16442 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16417, i32 %16282) #8
  store <4 x i32> %16442, <4 x i32>* %16415, align 16
  %16443 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16421, i32 %16282) #8
  store <4 x i32> %16443, <4 x i32>* %16419, align 16
  %16444 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16425, i32 %16282) #8
  store <4 x i32> %16444, <4 x i32>* %16423, align 16
  %16445 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16429, i32 %16282) #8
  store <4 x i32> %16445, <4 x i32>* %16427, align 16
  %16446 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  %16447 = bitcast <2 x i64>* %16446 to <4 x i32>*
  %16448 = load <4 x i32>, <4 x i32>* %16447, align 16
  %16449 = add <4 x i32> %16448, %16286
  %16450 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %16451 = bitcast <2 x i64>* %16450 to <4 x i32>*
  %16452 = load <4 x i32>, <4 x i32>* %16451, align 16
  %16453 = add <4 x i32> %16452, %16286
  %16454 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  %16455 = bitcast <2 x i64>* %16454 to <4 x i32>*
  %16456 = load <4 x i32>, <4 x i32>* %16455, align 16
  %16457 = add <4 x i32> %16456, %16286
  %16458 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  %16459 = bitcast <2 x i64>* %16458 to <4 x i32>*
  %16460 = load <4 x i32>, <4 x i32>* %16459, align 16
  %16461 = add <4 x i32> %16460, %16286
  %16462 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  %16463 = bitcast <2 x i64>* %16462 to <4 x i32>*
  %16464 = load <4 x i32>, <4 x i32>* %16463, align 16
  %16465 = add <4 x i32> %16464, %16286
  %16466 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  %16467 = bitcast <2 x i64>* %16466 to <4 x i32>*
  %16468 = load <4 x i32>, <4 x i32>* %16467, align 16
  %16469 = add <4 x i32> %16468, %16286
  %16470 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  %16471 = bitcast <2 x i64>* %16470 to <4 x i32>*
  %16472 = load <4 x i32>, <4 x i32>* %16471, align 16
  %16473 = add <4 x i32> %16472, %16286
  %16474 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  %16475 = bitcast <2 x i64>* %16474 to <4 x i32>*
  %16476 = load <4 x i32>, <4 x i32>* %16475, align 16
  %16477 = add <4 x i32> %16476, %16286
  %16478 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %16479 = bitcast <2 x i64>* %16478 to <4 x i32>*
  %16480 = load <4 x i32>, <4 x i32>* %16479, align 16
  %16481 = add <4 x i32> %16480, %16286
  %16482 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %16483 = bitcast <2 x i64>* %16482 to <4 x i32>*
  %16484 = load <4 x i32>, <4 x i32>* %16483, align 16
  %16485 = add <4 x i32> %16484, %16286
  %16486 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %16487 = bitcast <2 x i64>* %16486 to <4 x i32>*
  %16488 = load <4 x i32>, <4 x i32>* %16487, align 16
  %16489 = add <4 x i32> %16488, %16286
  %16490 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %16491 = bitcast <2 x i64>* %16490 to <4 x i32>*
  %16492 = load <4 x i32>, <4 x i32>* %16491, align 16
  %16493 = add <4 x i32> %16492, %16286
  %16494 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %16495 = bitcast <2 x i64>* %16494 to <4 x i32>*
  %16496 = load <4 x i32>, <4 x i32>* %16495, align 16
  %16497 = add <4 x i32> %16496, %16286
  %16498 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %16499 = bitcast <2 x i64>* %16498 to <4 x i32>*
  %16500 = load <4 x i32>, <4 x i32>* %16499, align 16
  %16501 = add <4 x i32> %16500, %16286
  %16502 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %16503 = bitcast <2 x i64>* %16502 to <4 x i32>*
  %16504 = load <4 x i32>, <4 x i32>* %16503, align 16
  %16505 = add <4 x i32> %16504, %16286
  %16506 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %16507 = bitcast <2 x i64>* %16506 to <4 x i32>*
  %16508 = load <4 x i32>, <4 x i32>* %16507, align 16
  %16509 = add <4 x i32> %16508, %16286
  %16510 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16449, i32 %16282) #8
  store <4 x i32> %16510, <4 x i32>* %16447, align 16
  %16511 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16453, i32 %16282) #8
  store <4 x i32> %16511, <4 x i32>* %16451, align 16
  %16512 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16457, i32 %16282) #8
  store <4 x i32> %16512, <4 x i32>* %16455, align 16
  %16513 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16461, i32 %16282) #8
  store <4 x i32> %16513, <4 x i32>* %16459, align 16
  %16514 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16465, i32 %16282) #8
  store <4 x i32> %16514, <4 x i32>* %16463, align 16
  %16515 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16469, i32 %16282) #8
  store <4 x i32> %16515, <4 x i32>* %16467, align 16
  %16516 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16473, i32 %16282) #8
  store <4 x i32> %16516, <4 x i32>* %16471, align 16
  %16517 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16477, i32 %16282) #8
  store <4 x i32> %16517, <4 x i32>* %16475, align 16
  %16518 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16481, i32 %16282) #8
  store <4 x i32> %16518, <4 x i32>* %16479, align 16
  %16519 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16485, i32 %16282) #8
  store <4 x i32> %16519, <4 x i32>* %16483, align 16
  %16520 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16489, i32 %16282) #8
  store <4 x i32> %16520, <4 x i32>* %16487, align 16
  %16521 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16493, i32 %16282) #8
  store <4 x i32> %16521, <4 x i32>* %16491, align 16
  %16522 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16497, i32 %16282) #8
  store <4 x i32> %16522, <4 x i32>* %16495, align 16
  %16523 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16501, i32 %16282) #8
  store <4 x i32> %16523, <4 x i32>* %16499, align 16
  %16524 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16505, i32 %16282) #8
  store <4 x i32> %16524, <4 x i32>* %16503, align 16
  %16525 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16509, i32 %16282) #8
  store <4 x i32> %16525, <4 x i32>* %16507, align 16
  %16526 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  %16527 = bitcast <2 x i64>* %16526 to <4 x i32>*
  %16528 = load <4 x i32>, <4 x i32>* %16527, align 16
  %16529 = add <4 x i32> %16528, %16286
  %16530 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %16531 = bitcast <2 x i64>* %16530 to <4 x i32>*
  %16532 = load <4 x i32>, <4 x i32>* %16531, align 16
  %16533 = add <4 x i32> %16532, %16286
  %16534 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  %16535 = bitcast <2 x i64>* %16534 to <4 x i32>*
  %16536 = load <4 x i32>, <4 x i32>* %16535, align 16
  %16537 = add <4 x i32> %16536, %16286
  %16538 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  %16539 = bitcast <2 x i64>* %16538 to <4 x i32>*
  %16540 = load <4 x i32>, <4 x i32>* %16539, align 16
  %16541 = add <4 x i32> %16540, %16286
  %16542 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  %16543 = bitcast <2 x i64>* %16542 to <4 x i32>*
  %16544 = load <4 x i32>, <4 x i32>* %16543, align 16
  %16545 = add <4 x i32> %16544, %16286
  %16546 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  %16547 = bitcast <2 x i64>* %16546 to <4 x i32>*
  %16548 = load <4 x i32>, <4 x i32>* %16547, align 16
  %16549 = add <4 x i32> %16548, %16286
  %16550 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  %16551 = bitcast <2 x i64>* %16550 to <4 x i32>*
  %16552 = load <4 x i32>, <4 x i32>* %16551, align 16
  %16553 = add <4 x i32> %16552, %16286
  %16554 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  %16555 = bitcast <2 x i64>* %16554 to <4 x i32>*
  %16556 = load <4 x i32>, <4 x i32>* %16555, align 16
  %16557 = add <4 x i32> %16556, %16286
  %16558 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %16559 = bitcast <2 x i64>* %16558 to <4 x i32>*
  %16560 = load <4 x i32>, <4 x i32>* %16559, align 16
  %16561 = add <4 x i32> %16560, %16286
  %16562 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %16563 = bitcast <2 x i64>* %16562 to <4 x i32>*
  %16564 = load <4 x i32>, <4 x i32>* %16563, align 16
  %16565 = add <4 x i32> %16564, %16286
  %16566 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %16567 = bitcast <2 x i64>* %16566 to <4 x i32>*
  %16568 = load <4 x i32>, <4 x i32>* %16567, align 16
  %16569 = add <4 x i32> %16568, %16286
  %16570 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %16571 = bitcast <2 x i64>* %16570 to <4 x i32>*
  %16572 = load <4 x i32>, <4 x i32>* %16571, align 16
  %16573 = add <4 x i32> %16572, %16286
  %16574 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %16575 = bitcast <2 x i64>* %16574 to <4 x i32>*
  %16576 = load <4 x i32>, <4 x i32>* %16575, align 16
  %16577 = add <4 x i32> %16576, %16286
  %16578 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %16579 = bitcast <2 x i64>* %16578 to <4 x i32>*
  %16580 = load <4 x i32>, <4 x i32>* %16579, align 16
  %16581 = add <4 x i32> %16580, %16286
  %16582 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %16583 = bitcast <2 x i64>* %16582 to <4 x i32>*
  %16584 = load <4 x i32>, <4 x i32>* %16583, align 16
  %16585 = add <4 x i32> %16584, %16286
  %16586 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %16587 = bitcast <2 x i64>* %16586 to <4 x i32>*
  %16588 = load <4 x i32>, <4 x i32>* %16587, align 16
  %16589 = add <4 x i32> %16588, %16286
  %16590 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16529, i32 %16282) #8
  store <4 x i32> %16590, <4 x i32>* %16527, align 16
  %16591 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16533, i32 %16282) #8
  store <4 x i32> %16591, <4 x i32>* %16531, align 16
  %16592 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16537, i32 %16282) #8
  store <4 x i32> %16592, <4 x i32>* %16535, align 16
  %16593 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16541, i32 %16282) #8
  store <4 x i32> %16593, <4 x i32>* %16539, align 16
  %16594 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16545, i32 %16282) #8
  store <4 x i32> %16594, <4 x i32>* %16543, align 16
  %16595 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16549, i32 %16282) #8
  store <4 x i32> %16595, <4 x i32>* %16547, align 16
  %16596 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16553, i32 %16282) #8
  store <4 x i32> %16596, <4 x i32>* %16551, align 16
  %16597 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16557, i32 %16282) #8
  store <4 x i32> %16597, <4 x i32>* %16555, align 16
  %16598 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16561, i32 %16282) #8
  store <4 x i32> %16598, <4 x i32>* %16559, align 16
  %16599 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16565, i32 %16282) #8
  store <4 x i32> %16599, <4 x i32>* %16563, align 16
  %16600 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16569, i32 %16282) #8
  store <4 x i32> %16600, <4 x i32>* %16567, align 16
  %16601 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16573, i32 %16282) #8
  store <4 x i32> %16601, <4 x i32>* %16571, align 16
  %16602 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16577, i32 %16282) #8
  store <4 x i32> %16602, <4 x i32>* %16575, align 16
  %16603 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16581, i32 %16282) #8
  store <4 x i32> %16603, <4 x i32>* %16579, align 16
  %16604 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16585, i32 %16282) #8
  store <4 x i32> %16604, <4 x i32>* %16583, align 16
  %16605 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %16589, i32 %16282) #8
  store <4 x i32> %16605, <4 x i32>* %16587, align 16
  %16606 = shufflevector <4 x i32> %16350, <4 x i32> %16354, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16607 = bitcast <4 x i32> %16606 to <2 x i64>
  %16608 = shufflevector <4 x i32> %16350, <4 x i32> %16354, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16609 = bitcast <4 x i32> %16608 to <2 x i64>
  %16610 = shufflevector <4 x i32> %16358, <4 x i32> %16362, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16611 = bitcast <4 x i32> %16610 to <2 x i64>
  %16612 = shufflevector <4 x i32> %16358, <4 x i32> %16362, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16613 = bitcast <4 x i32> %16612 to <2 x i64>
  %16614 = shufflevector <2 x i64> %16607, <2 x i64> %16611, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16614, <2 x i64>* %16253, align 16
  %16615 = shufflevector <2 x i64> %16607, <2 x i64> %16611, <2 x i32> <i32 1, i32 3>
  %16616 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %16615, <2 x i64>* %16616, align 16
  %16617 = shufflevector <2 x i64> %16609, <2 x i64> %16613, <2 x i32> <i32 0, i32 2>
  %16618 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 8
  store <2 x i64> %16617, <2 x i64>* %16618, align 16
  %16619 = shufflevector <2 x i64> %16609, <2 x i64> %16613, <2 x i32> <i32 1, i32 3>
  %16620 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 12
  store <2 x i64> %16619, <2 x i64>* %16620, align 16
  %16621 = shufflevector <4 x i32> %16351, <4 x i32> %16355, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16622 = bitcast <4 x i32> %16621 to <2 x i64>
  %16623 = shufflevector <4 x i32> %16351, <4 x i32> %16355, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16624 = bitcast <4 x i32> %16623 to <2 x i64>
  %16625 = shufflevector <4 x i32> %16359, <4 x i32> %16363, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16626 = bitcast <4 x i32> %16625 to <2 x i64>
  %16627 = shufflevector <4 x i32> %16359, <4 x i32> %16363, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16628 = bitcast <4 x i32> %16627 to <2 x i64>
  %16629 = shufflevector <2 x i64> %16622, <2 x i64> %16626, <2 x i32> <i32 0, i32 2>
  %16630 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %16629, <2 x i64>* %16630, align 16
  %16631 = shufflevector <2 x i64> %16622, <2 x i64> %16626, <2 x i32> <i32 1, i32 3>
  %16632 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %16631, <2 x i64>* %16632, align 16
  %16633 = shufflevector <2 x i64> %16624, <2 x i64> %16628, <2 x i32> <i32 0, i32 2>
  %16634 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %16633, <2 x i64>* %16634, align 16
  %16635 = shufflevector <2 x i64> %16624, <2 x i64> %16628, <2 x i32> <i32 1, i32 3>
  %16636 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %16635, <2 x i64>* %16636, align 16
  %16637 = load <4 x i32>, <4 x i32>* %16383, align 16
  %16638 = shufflevector <4 x i32> %16430, <4 x i32> %16637, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16639 = bitcast <4 x i32> %16638 to <2 x i64>
  %16640 = shufflevector <4 x i32> %16430, <4 x i32> %16637, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16641 = bitcast <4 x i32> %16640 to <2 x i64>
  %16642 = load <4 x i32>, <4 x i32>* %16399, align 16
  %16643 = load <4 x i32>, <4 x i32>* %16415, align 16
  %16644 = shufflevector <4 x i32> %16642, <4 x i32> %16643, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16645 = bitcast <4 x i32> %16644 to <2 x i64>
  %16646 = shufflevector <4 x i32> %16642, <4 x i32> %16643, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16647 = bitcast <4 x i32> %16646 to <2 x i64>
  %16648 = shufflevector <2 x i64> %16639, <2 x i64> %16645, <2 x i32> <i32 0, i32 2>
  %16649 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %16648, <2 x i64>* %16649, align 16
  %16650 = shufflevector <2 x i64> %16639, <2 x i64> %16645, <2 x i32> <i32 1, i32 3>
  %16651 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %16650, <2 x i64>* %16651, align 16
  %16652 = shufflevector <2 x i64> %16641, <2 x i64> %16647, <2 x i32> <i32 0, i32 2>
  %16653 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %16652, <2 x i64>* %16653, align 16
  %16654 = shufflevector <2 x i64> %16641, <2 x i64> %16647, <2 x i32> <i32 1, i32 3>
  %16655 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %16654, <2 x i64>* %16655, align 16
  %16656 = load <4 x i32>, <4 x i32>* %16371, align 16
  %16657 = load <4 x i32>, <4 x i32>* %16387, align 16
  %16658 = shufflevector <4 x i32> %16656, <4 x i32> %16657, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16659 = bitcast <4 x i32> %16658 to <2 x i64>
  %16660 = shufflevector <4 x i32> %16656, <4 x i32> %16657, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16661 = bitcast <4 x i32> %16660 to <2 x i64>
  %16662 = load <4 x i32>, <4 x i32>* %16403, align 16
  %16663 = load <4 x i32>, <4 x i32>* %16419, align 16
  %16664 = shufflevector <4 x i32> %16662, <4 x i32> %16663, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16665 = bitcast <4 x i32> %16664 to <2 x i64>
  %16666 = shufflevector <4 x i32> %16662, <4 x i32> %16663, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16667 = bitcast <4 x i32> %16666 to <2 x i64>
  %16668 = shufflevector <2 x i64> %16659, <2 x i64> %16665, <2 x i32> <i32 0, i32 2>
  %16669 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %16668, <2 x i64>* %16669, align 16
  %16670 = shufflevector <2 x i64> %16659, <2 x i64> %16665, <2 x i32> <i32 1, i32 3>
  %16671 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %16670, <2 x i64>* %16671, align 16
  %16672 = shufflevector <2 x i64> %16661, <2 x i64> %16667, <2 x i32> <i32 0, i32 2>
  %16673 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %16672, <2 x i64>* %16673, align 16
  %16674 = shufflevector <2 x i64> %16661, <2 x i64> %16667, <2 x i32> <i32 1, i32 3>
  %16675 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %16674, <2 x i64>* %16675, align 16
  %16676 = shufflevector <4 x i32> %16352, <4 x i32> %16356, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16677 = bitcast <4 x i32> %16676 to <2 x i64>
  %16678 = shufflevector <4 x i32> %16352, <4 x i32> %16356, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16679 = bitcast <4 x i32> %16678 to <2 x i64>
  %16680 = shufflevector <4 x i32> %16360, <4 x i32> %16364, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16681 = bitcast <4 x i32> %16680 to <2 x i64>
  %16682 = shufflevector <4 x i32> %16360, <4 x i32> %16364, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16683 = bitcast <4 x i32> %16682 to <2 x i64>
  %16684 = shufflevector <2 x i64> %16677, <2 x i64> %16681, <2 x i32> <i32 0, i32 2>
  %16685 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 32
  store <2 x i64> %16684, <2 x i64>* %16685, align 16
  %16686 = shufflevector <2 x i64> %16677, <2 x i64> %16681, <2 x i32> <i32 1, i32 3>
  %16687 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 36
  store <2 x i64> %16686, <2 x i64>* %16687, align 16
  %16688 = shufflevector <2 x i64> %16679, <2 x i64> %16683, <2 x i32> <i32 0, i32 2>
  %16689 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 40
  store <2 x i64> %16688, <2 x i64>* %16689, align 16
  %16690 = shufflevector <2 x i64> %16679, <2 x i64> %16683, <2 x i32> <i32 1, i32 3>
  %16691 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 44
  store <2 x i64> %16690, <2 x i64>* %16691, align 16
  %16692 = shufflevector <4 x i32> %16353, <4 x i32> %16357, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16693 = bitcast <4 x i32> %16692 to <2 x i64>
  %16694 = shufflevector <4 x i32> %16353, <4 x i32> %16357, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16695 = bitcast <4 x i32> %16694 to <2 x i64>
  %16696 = shufflevector <4 x i32> %16361, <4 x i32> %16365, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16697 = bitcast <4 x i32> %16696 to <2 x i64>
  %16698 = shufflevector <4 x i32> %16361, <4 x i32> %16365, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16699 = bitcast <4 x i32> %16698 to <2 x i64>
  %16700 = shufflevector <2 x i64> %16693, <2 x i64> %16697, <2 x i32> <i32 0, i32 2>
  %16701 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 48
  store <2 x i64> %16700, <2 x i64>* %16701, align 16
  %16702 = shufflevector <2 x i64> %16693, <2 x i64> %16697, <2 x i32> <i32 1, i32 3>
  %16703 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 52
  store <2 x i64> %16702, <2 x i64>* %16703, align 16
  %16704 = shufflevector <2 x i64> %16695, <2 x i64> %16699, <2 x i32> <i32 0, i32 2>
  %16705 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 56
  store <2 x i64> %16704, <2 x i64>* %16705, align 16
  %16706 = shufflevector <2 x i64> %16695, <2 x i64> %16699, <2 x i32> <i32 1, i32 3>
  %16707 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 60
  store <2 x i64> %16706, <2 x i64>* %16707, align 16
  %16708 = load <4 x i32>, <4 x i32>* %16375, align 16
  %16709 = load <4 x i32>, <4 x i32>* %16391, align 16
  %16710 = shufflevector <4 x i32> %16708, <4 x i32> %16709, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16711 = bitcast <4 x i32> %16710 to <2 x i64>
  %16712 = shufflevector <4 x i32> %16708, <4 x i32> %16709, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16713 = bitcast <4 x i32> %16712 to <2 x i64>
  %16714 = load <4 x i32>, <4 x i32>* %16407, align 16
  %16715 = load <4 x i32>, <4 x i32>* %16423, align 16
  %16716 = shufflevector <4 x i32> %16714, <4 x i32> %16715, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16717 = bitcast <4 x i32> %16716 to <2 x i64>
  %16718 = shufflevector <4 x i32> %16714, <4 x i32> %16715, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16719 = bitcast <4 x i32> %16718 to <2 x i64>
  %16720 = shufflevector <2 x i64> %16711, <2 x i64> %16717, <2 x i32> <i32 0, i32 2>
  %16721 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 33
  store <2 x i64> %16720, <2 x i64>* %16721, align 16
  %16722 = shufflevector <2 x i64> %16711, <2 x i64> %16717, <2 x i32> <i32 1, i32 3>
  %16723 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 37
  store <2 x i64> %16722, <2 x i64>* %16723, align 16
  %16724 = shufflevector <2 x i64> %16713, <2 x i64> %16719, <2 x i32> <i32 0, i32 2>
  %16725 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 41
  store <2 x i64> %16724, <2 x i64>* %16725, align 16
  %16726 = shufflevector <2 x i64> %16713, <2 x i64> %16719, <2 x i32> <i32 1, i32 3>
  %16727 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 45
  store <2 x i64> %16726, <2 x i64>* %16727, align 16
  %16728 = load <4 x i32>, <4 x i32>* %16379, align 16
  %16729 = load <4 x i32>, <4 x i32>* %16395, align 16
  %16730 = shufflevector <4 x i32> %16728, <4 x i32> %16729, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16731 = bitcast <4 x i32> %16730 to <2 x i64>
  %16732 = shufflevector <4 x i32> %16728, <4 x i32> %16729, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16733 = bitcast <4 x i32> %16732 to <2 x i64>
  %16734 = load <4 x i32>, <4 x i32>* %16411, align 16
  %16735 = load <4 x i32>, <4 x i32>* %16427, align 16
  %16736 = shufflevector <4 x i32> %16734, <4 x i32> %16735, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16737 = bitcast <4 x i32> %16736 to <2 x i64>
  %16738 = shufflevector <4 x i32> %16734, <4 x i32> %16735, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16739 = bitcast <4 x i32> %16738 to <2 x i64>
  %16740 = shufflevector <2 x i64> %16731, <2 x i64> %16737, <2 x i32> <i32 0, i32 2>
  %16741 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 49
  store <2 x i64> %16740, <2 x i64>* %16741, align 16
  %16742 = shufflevector <2 x i64> %16731, <2 x i64> %16737, <2 x i32> <i32 1, i32 3>
  %16743 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 53
  store <2 x i64> %16742, <2 x i64>* %16743, align 16
  %16744 = shufflevector <2 x i64> %16733, <2 x i64> %16739, <2 x i32> <i32 0, i32 2>
  %16745 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 57
  store <2 x i64> %16744, <2 x i64>* %16745, align 16
  %16746 = shufflevector <2 x i64> %16733, <2 x i64> %16739, <2 x i32> <i32 1, i32 3>
  %16747 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 61
  store <2 x i64> %16746, <2 x i64>* %16747, align 16
  %16748 = load <4 x i32>, <4 x i32>* %16447, align 16
  %16749 = load <4 x i32>, <4 x i32>* %16463, align 16
  %16750 = shufflevector <4 x i32> %16748, <4 x i32> %16749, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16751 = bitcast <4 x i32> %16750 to <2 x i64>
  %16752 = shufflevector <4 x i32> %16748, <4 x i32> %16749, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16753 = bitcast <4 x i32> %16752 to <2 x i64>
  %16754 = load <4 x i32>, <4 x i32>* %16479, align 16
  %16755 = load <4 x i32>, <4 x i32>* %16495, align 16
  %16756 = shufflevector <4 x i32> %16754, <4 x i32> %16755, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16757 = bitcast <4 x i32> %16756 to <2 x i64>
  %16758 = shufflevector <4 x i32> %16754, <4 x i32> %16755, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16759 = bitcast <4 x i32> %16758 to <2 x i64>
  %16760 = shufflevector <2 x i64> %16751, <2 x i64> %16757, <2 x i32> <i32 0, i32 2>
  %16761 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %16760, <2 x i64>* %16761, align 16
  %16762 = shufflevector <2 x i64> %16751, <2 x i64> %16757, <2 x i32> <i32 1, i32 3>
  %16763 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %16762, <2 x i64>* %16763, align 16
  %16764 = shufflevector <2 x i64> %16753, <2 x i64> %16759, <2 x i32> <i32 0, i32 2>
  %16765 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %16764, <2 x i64>* %16765, align 16
  %16766 = shufflevector <2 x i64> %16753, <2 x i64> %16759, <2 x i32> <i32 1, i32 3>
  %16767 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %16766, <2 x i64>* %16767, align 16
  %16768 = load <4 x i32>, <4 x i32>* %16451, align 16
  %16769 = load <4 x i32>, <4 x i32>* %16467, align 16
  %16770 = shufflevector <4 x i32> %16768, <4 x i32> %16769, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16771 = bitcast <4 x i32> %16770 to <2 x i64>
  %16772 = shufflevector <4 x i32> %16768, <4 x i32> %16769, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16773 = bitcast <4 x i32> %16772 to <2 x i64>
  %16774 = load <4 x i32>, <4 x i32>* %16483, align 16
  %16775 = load <4 x i32>, <4 x i32>* %16499, align 16
  %16776 = shufflevector <4 x i32> %16774, <4 x i32> %16775, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16777 = bitcast <4 x i32> %16776 to <2 x i64>
  %16778 = shufflevector <4 x i32> %16774, <4 x i32> %16775, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16779 = bitcast <4 x i32> %16778 to <2 x i64>
  %16780 = shufflevector <2 x i64> %16771, <2 x i64> %16777, <2 x i32> <i32 0, i32 2>
  %16781 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %16780, <2 x i64>* %16781, align 16
  %16782 = shufflevector <2 x i64> %16771, <2 x i64> %16777, <2 x i32> <i32 1, i32 3>
  %16783 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %16782, <2 x i64>* %16783, align 16
  %16784 = shufflevector <2 x i64> %16773, <2 x i64> %16779, <2 x i32> <i32 0, i32 2>
  %16785 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %16784, <2 x i64>* %16785, align 16
  %16786 = shufflevector <2 x i64> %16773, <2 x i64> %16779, <2 x i32> <i32 1, i32 3>
  %16787 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %16786, <2 x i64>* %16787, align 16
  %16788 = load <4 x i32>, <4 x i32>* %16527, align 16
  %16789 = load <4 x i32>, <4 x i32>* %16543, align 16
  %16790 = shufflevector <4 x i32> %16788, <4 x i32> %16789, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16791 = bitcast <4 x i32> %16790 to <2 x i64>
  %16792 = shufflevector <4 x i32> %16788, <4 x i32> %16789, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16793 = bitcast <4 x i32> %16792 to <2 x i64>
  %16794 = load <4 x i32>, <4 x i32>* %16559, align 16
  %16795 = load <4 x i32>, <4 x i32>* %16575, align 16
  %16796 = shufflevector <4 x i32> %16794, <4 x i32> %16795, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16797 = bitcast <4 x i32> %16796 to <2 x i64>
  %16798 = shufflevector <4 x i32> %16794, <4 x i32> %16795, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16799 = bitcast <4 x i32> %16798 to <2 x i64>
  %16800 = shufflevector <2 x i64> %16791, <2 x i64> %16797, <2 x i32> <i32 0, i32 2>
  %16801 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %16800, <2 x i64>* %16801, align 16
  %16802 = shufflevector <2 x i64> %16791, <2 x i64> %16797, <2 x i32> <i32 1, i32 3>
  %16803 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %16802, <2 x i64>* %16803, align 16
  %16804 = shufflevector <2 x i64> %16793, <2 x i64> %16799, <2 x i32> <i32 0, i32 2>
  %16805 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %16804, <2 x i64>* %16805, align 16
  %16806 = shufflevector <2 x i64> %16793, <2 x i64> %16799, <2 x i32> <i32 1, i32 3>
  %16807 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %16806, <2 x i64>* %16807, align 16
  %16808 = load <4 x i32>, <4 x i32>* %16531, align 16
  %16809 = load <4 x i32>, <4 x i32>* %16547, align 16
  %16810 = shufflevector <4 x i32> %16808, <4 x i32> %16809, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16811 = bitcast <4 x i32> %16810 to <2 x i64>
  %16812 = shufflevector <4 x i32> %16808, <4 x i32> %16809, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16813 = bitcast <4 x i32> %16812 to <2 x i64>
  %16814 = load <4 x i32>, <4 x i32>* %16563, align 16
  %16815 = load <4 x i32>, <4 x i32>* %16579, align 16
  %16816 = shufflevector <4 x i32> %16814, <4 x i32> %16815, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16817 = bitcast <4 x i32> %16816 to <2 x i64>
  %16818 = shufflevector <4 x i32> %16814, <4 x i32> %16815, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16819 = bitcast <4 x i32> %16818 to <2 x i64>
  %16820 = shufflevector <2 x i64> %16811, <2 x i64> %16817, <2 x i32> <i32 0, i32 2>
  %16821 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %16820, <2 x i64>* %16821, align 16
  %16822 = shufflevector <2 x i64> %16811, <2 x i64> %16817, <2 x i32> <i32 1, i32 3>
  %16823 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %16822, <2 x i64>* %16823, align 16
  %16824 = shufflevector <2 x i64> %16813, <2 x i64> %16819, <2 x i32> <i32 0, i32 2>
  %16825 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %16824, <2 x i64>* %16825, align 16
  %16826 = shufflevector <2 x i64> %16813, <2 x i64> %16819, <2 x i32> <i32 1, i32 3>
  %16827 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %16826, <2 x i64>* %16827, align 16
  %16828 = load <4 x i32>, <4 x i32>* %16455, align 16
  %16829 = load <4 x i32>, <4 x i32>* %16471, align 16
  %16830 = shufflevector <4 x i32> %16828, <4 x i32> %16829, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16831 = bitcast <4 x i32> %16830 to <2 x i64>
  %16832 = shufflevector <4 x i32> %16828, <4 x i32> %16829, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16833 = bitcast <4 x i32> %16832 to <2 x i64>
  %16834 = load <4 x i32>, <4 x i32>* %16487, align 16
  %16835 = load <4 x i32>, <4 x i32>* %16503, align 16
  %16836 = shufflevector <4 x i32> %16834, <4 x i32> %16835, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16837 = bitcast <4 x i32> %16836 to <2 x i64>
  %16838 = shufflevector <4 x i32> %16834, <4 x i32> %16835, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16839 = bitcast <4 x i32> %16838 to <2 x i64>
  %16840 = shufflevector <2 x i64> %16831, <2 x i64> %16837, <2 x i32> <i32 0, i32 2>
  %16841 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 34
  store <2 x i64> %16840, <2 x i64>* %16841, align 16
  %16842 = shufflevector <2 x i64> %16831, <2 x i64> %16837, <2 x i32> <i32 1, i32 3>
  %16843 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 38
  store <2 x i64> %16842, <2 x i64>* %16843, align 16
  %16844 = shufflevector <2 x i64> %16833, <2 x i64> %16839, <2 x i32> <i32 0, i32 2>
  %16845 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 42
  store <2 x i64> %16844, <2 x i64>* %16845, align 16
  %16846 = shufflevector <2 x i64> %16833, <2 x i64> %16839, <2 x i32> <i32 1, i32 3>
  %16847 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 46
  store <2 x i64> %16846, <2 x i64>* %16847, align 16
  %16848 = load <4 x i32>, <4 x i32>* %16459, align 16
  %16849 = load <4 x i32>, <4 x i32>* %16475, align 16
  %16850 = shufflevector <4 x i32> %16848, <4 x i32> %16849, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16851 = bitcast <4 x i32> %16850 to <2 x i64>
  %16852 = shufflevector <4 x i32> %16848, <4 x i32> %16849, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16853 = bitcast <4 x i32> %16852 to <2 x i64>
  %16854 = load <4 x i32>, <4 x i32>* %16491, align 16
  %16855 = load <4 x i32>, <4 x i32>* %16507, align 16
  %16856 = shufflevector <4 x i32> %16854, <4 x i32> %16855, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16857 = bitcast <4 x i32> %16856 to <2 x i64>
  %16858 = shufflevector <4 x i32> %16854, <4 x i32> %16855, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16859 = bitcast <4 x i32> %16858 to <2 x i64>
  %16860 = shufflevector <2 x i64> %16851, <2 x i64> %16857, <2 x i32> <i32 0, i32 2>
  %16861 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 50
  store <2 x i64> %16860, <2 x i64>* %16861, align 16
  %16862 = shufflevector <2 x i64> %16851, <2 x i64> %16857, <2 x i32> <i32 1, i32 3>
  %16863 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 54
  store <2 x i64> %16862, <2 x i64>* %16863, align 16
  %16864 = shufflevector <2 x i64> %16853, <2 x i64> %16859, <2 x i32> <i32 0, i32 2>
  %16865 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 58
  store <2 x i64> %16864, <2 x i64>* %16865, align 16
  %16866 = shufflevector <2 x i64> %16853, <2 x i64> %16859, <2 x i32> <i32 1, i32 3>
  %16867 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 62
  store <2 x i64> %16866, <2 x i64>* %16867, align 16
  %16868 = load <4 x i32>, <4 x i32>* %16535, align 16
  %16869 = load <4 x i32>, <4 x i32>* %16551, align 16
  %16870 = shufflevector <4 x i32> %16868, <4 x i32> %16869, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16871 = bitcast <4 x i32> %16870 to <2 x i64>
  %16872 = shufflevector <4 x i32> %16868, <4 x i32> %16869, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16873 = bitcast <4 x i32> %16872 to <2 x i64>
  %16874 = load <4 x i32>, <4 x i32>* %16567, align 16
  %16875 = load <4 x i32>, <4 x i32>* %16583, align 16
  %16876 = shufflevector <4 x i32> %16874, <4 x i32> %16875, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16877 = bitcast <4 x i32> %16876 to <2 x i64>
  %16878 = shufflevector <4 x i32> %16874, <4 x i32> %16875, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16879 = bitcast <4 x i32> %16878 to <2 x i64>
  %16880 = shufflevector <2 x i64> %16871, <2 x i64> %16877, <2 x i32> <i32 0, i32 2>
  %16881 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 35
  store <2 x i64> %16880, <2 x i64>* %16881, align 16
  %16882 = shufflevector <2 x i64> %16871, <2 x i64> %16877, <2 x i32> <i32 1, i32 3>
  %16883 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 39
  store <2 x i64> %16882, <2 x i64>* %16883, align 16
  %16884 = shufflevector <2 x i64> %16873, <2 x i64> %16879, <2 x i32> <i32 0, i32 2>
  %16885 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 43
  store <2 x i64> %16884, <2 x i64>* %16885, align 16
  %16886 = shufflevector <2 x i64> %16873, <2 x i64> %16879, <2 x i32> <i32 1, i32 3>
  %16887 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 47
  store <2 x i64> %16886, <2 x i64>* %16887, align 16
  %16888 = load <4 x i32>, <4 x i32>* %16539, align 16
  %16889 = load <4 x i32>, <4 x i32>* %16555, align 16
  %16890 = shufflevector <4 x i32> %16888, <4 x i32> %16889, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16891 = bitcast <4 x i32> %16890 to <2 x i64>
  %16892 = shufflevector <4 x i32> %16888, <4 x i32> %16889, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16893 = bitcast <4 x i32> %16892 to <2 x i64>
  %16894 = load <4 x i32>, <4 x i32>* %16571, align 16
  %16895 = load <4 x i32>, <4 x i32>* %16587, align 16
  %16896 = shufflevector <4 x i32> %16894, <4 x i32> %16895, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16897 = bitcast <4 x i32> %16896 to <2 x i64>
  %16898 = shufflevector <4 x i32> %16894, <4 x i32> %16895, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16899 = bitcast <4 x i32> %16898 to <2 x i64>
  %16900 = shufflevector <2 x i64> %16891, <2 x i64> %16897, <2 x i32> <i32 0, i32 2>
  %16901 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 51
  store <2 x i64> %16900, <2 x i64>* %16901, align 16
  %16902 = shufflevector <2 x i64> %16891, <2 x i64> %16897, <2 x i32> <i32 1, i32 3>
  %16903 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 55
  store <2 x i64> %16902, <2 x i64>* %16903, align 16
  %16904 = shufflevector <2 x i64> %16893, <2 x i64> %16899, <2 x i32> <i32 0, i32 2>
  %16905 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 59
  store <2 x i64> %16904, <2 x i64>* %16905, align 16
  %16906 = shufflevector <2 x i64> %16893, <2 x i64> %16899, <2 x i32> <i32 1, i32 3>
  %16907 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %6, i64 0, i64 63
  store <2 x i64> %16906, <2 x i64>* %16907, align 16
  %16908 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 2), align 2
  %16909 = sext i8 %16908 to i32
  call void @fadst16x16_sse4_1(<2 x i64>* nonnull %16253, <2 x i64>* nonnull %16278, i32 %16909, i32 4)
  %16910 = load <4 x i32>, <4 x i32>* %16287, align 16
  %16911 = load <4 x i32>, <4 x i32>* %16303, align 16
  %16912 = shufflevector <4 x i32> %16910, <4 x i32> %16911, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16913 = bitcast <4 x i32> %16912 to <2 x i64>
  %16914 = shufflevector <4 x i32> %16910, <4 x i32> %16911, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16915 = bitcast <4 x i32> %16914 to <2 x i64>
  %16916 = load <4 x i32>, <4 x i32>* %16319, align 16
  %16917 = load <4 x i32>, <4 x i32>* %16335, align 16
  %16918 = shufflevector <4 x i32> %16916, <4 x i32> %16917, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16919 = bitcast <4 x i32> %16918 to <2 x i64>
  %16920 = shufflevector <4 x i32> %16916, <4 x i32> %16917, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16921 = bitcast <4 x i32> %16920 to <2 x i64>
  %16922 = shufflevector <2 x i64> %16913, <2 x i64> %16919, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16922, <2 x i64>* %16253, align 16
  %16923 = shufflevector <2 x i64> %16913, <2 x i64> %16919, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16923, <2 x i64>* %16616, align 16
  %16924 = shufflevector <2 x i64> %16915, <2 x i64> %16921, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16924, <2 x i64>* %16618, align 16
  %16925 = shufflevector <2 x i64> %16915, <2 x i64> %16921, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16925, <2 x i64>* %16620, align 16
  %16926 = load <4 x i32>, <4 x i32>* %16291, align 16
  %16927 = load <4 x i32>, <4 x i32>* %16307, align 16
  %16928 = shufflevector <4 x i32> %16926, <4 x i32> %16927, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16929 = bitcast <4 x i32> %16928 to <2 x i64>
  %16930 = shufflevector <4 x i32> %16926, <4 x i32> %16927, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16931 = bitcast <4 x i32> %16930 to <2 x i64>
  %16932 = load <4 x i32>, <4 x i32>* %16323, align 16
  %16933 = load <4 x i32>, <4 x i32>* %16339, align 16
  %16934 = shufflevector <4 x i32> %16932, <4 x i32> %16933, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16935 = bitcast <4 x i32> %16934 to <2 x i64>
  %16936 = shufflevector <4 x i32> %16932, <4 x i32> %16933, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16937 = bitcast <4 x i32> %16936 to <2 x i64>
  %16938 = shufflevector <2 x i64> %16929, <2 x i64> %16935, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16938, <2 x i64>* %16630, align 16
  %16939 = shufflevector <2 x i64> %16929, <2 x i64> %16935, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16939, <2 x i64>* %16632, align 16
  %16940 = shufflevector <2 x i64> %16931, <2 x i64> %16937, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16940, <2 x i64>* %16634, align 16
  %16941 = shufflevector <2 x i64> %16931, <2 x i64> %16937, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16941, <2 x i64>* %16636, align 16
  %16942 = load <4 x i32>, <4 x i32>* %16367, align 16
  %16943 = load <4 x i32>, <4 x i32>* %16383, align 16
  %16944 = shufflevector <4 x i32> %16942, <4 x i32> %16943, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16945 = bitcast <4 x i32> %16944 to <2 x i64>
  %16946 = shufflevector <4 x i32> %16942, <4 x i32> %16943, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16947 = bitcast <4 x i32> %16946 to <2 x i64>
  %16948 = load <4 x i32>, <4 x i32>* %16399, align 16
  %16949 = load <4 x i32>, <4 x i32>* %16415, align 16
  %16950 = shufflevector <4 x i32> %16948, <4 x i32> %16949, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16951 = bitcast <4 x i32> %16950 to <2 x i64>
  %16952 = shufflevector <4 x i32> %16948, <4 x i32> %16949, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16953 = bitcast <4 x i32> %16952 to <2 x i64>
  %16954 = shufflevector <2 x i64> %16945, <2 x i64> %16951, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16954, <2 x i64>* %16649, align 16
  %16955 = shufflevector <2 x i64> %16945, <2 x i64> %16951, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16955, <2 x i64>* %16651, align 16
  %16956 = shufflevector <2 x i64> %16947, <2 x i64> %16953, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16956, <2 x i64>* %16653, align 16
  %16957 = shufflevector <2 x i64> %16947, <2 x i64> %16953, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16957, <2 x i64>* %16655, align 16
  %16958 = load <4 x i32>, <4 x i32>* %16371, align 16
  %16959 = load <4 x i32>, <4 x i32>* %16387, align 16
  %16960 = shufflevector <4 x i32> %16958, <4 x i32> %16959, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16961 = bitcast <4 x i32> %16960 to <2 x i64>
  %16962 = shufflevector <4 x i32> %16958, <4 x i32> %16959, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16963 = bitcast <4 x i32> %16962 to <2 x i64>
  %16964 = load <4 x i32>, <4 x i32>* %16403, align 16
  %16965 = load <4 x i32>, <4 x i32>* %16419, align 16
  %16966 = shufflevector <4 x i32> %16964, <4 x i32> %16965, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16967 = bitcast <4 x i32> %16966 to <2 x i64>
  %16968 = shufflevector <4 x i32> %16964, <4 x i32> %16965, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16969 = bitcast <4 x i32> %16968 to <2 x i64>
  %16970 = shufflevector <2 x i64> %16961, <2 x i64> %16967, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16970, <2 x i64>* %16669, align 16
  %16971 = shufflevector <2 x i64> %16961, <2 x i64> %16967, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16971, <2 x i64>* %16671, align 16
  %16972 = shufflevector <2 x i64> %16963, <2 x i64> %16969, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16972, <2 x i64>* %16673, align 16
  %16973 = shufflevector <2 x i64> %16963, <2 x i64> %16969, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16973, <2 x i64>* %16675, align 16
  %16974 = load <4 x i32>, <4 x i32>* %16295, align 16
  %16975 = load <4 x i32>, <4 x i32>* %16311, align 16
  %16976 = shufflevector <4 x i32> %16974, <4 x i32> %16975, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16977 = bitcast <4 x i32> %16976 to <2 x i64>
  %16978 = shufflevector <4 x i32> %16974, <4 x i32> %16975, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16979 = bitcast <4 x i32> %16978 to <2 x i64>
  %16980 = load <4 x i32>, <4 x i32>* %16327, align 16
  %16981 = load <4 x i32>, <4 x i32>* %16343, align 16
  %16982 = shufflevector <4 x i32> %16980, <4 x i32> %16981, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16983 = bitcast <4 x i32> %16982 to <2 x i64>
  %16984 = shufflevector <4 x i32> %16980, <4 x i32> %16981, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16985 = bitcast <4 x i32> %16984 to <2 x i64>
  %16986 = shufflevector <2 x i64> %16977, <2 x i64> %16983, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16986, <2 x i64>* %16685, align 16
  %16987 = shufflevector <2 x i64> %16977, <2 x i64> %16983, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16987, <2 x i64>* %16687, align 16
  %16988 = shufflevector <2 x i64> %16979, <2 x i64> %16985, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %16988, <2 x i64>* %16689, align 16
  %16989 = shufflevector <2 x i64> %16979, <2 x i64> %16985, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %16989, <2 x i64>* %16691, align 16
  %16990 = load <4 x i32>, <4 x i32>* %16299, align 16
  %16991 = load <4 x i32>, <4 x i32>* %16315, align 16
  %16992 = shufflevector <4 x i32> %16990, <4 x i32> %16991, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16993 = bitcast <4 x i32> %16992 to <2 x i64>
  %16994 = shufflevector <4 x i32> %16990, <4 x i32> %16991, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %16995 = bitcast <4 x i32> %16994 to <2 x i64>
  %16996 = load <4 x i32>, <4 x i32>* %16331, align 16
  %16997 = load <4 x i32>, <4 x i32>* %16347, align 16
  %16998 = shufflevector <4 x i32> %16996, <4 x i32> %16997, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %16999 = bitcast <4 x i32> %16998 to <2 x i64>
  %17000 = shufflevector <4 x i32> %16996, <4 x i32> %16997, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17001 = bitcast <4 x i32> %17000 to <2 x i64>
  %17002 = shufflevector <2 x i64> %16993, <2 x i64> %16999, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17002, <2 x i64>* %16701, align 16
  %17003 = shufflevector <2 x i64> %16993, <2 x i64> %16999, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17003, <2 x i64>* %16703, align 16
  %17004 = shufflevector <2 x i64> %16995, <2 x i64> %17001, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17004, <2 x i64>* %16705, align 16
  %17005 = shufflevector <2 x i64> %16995, <2 x i64> %17001, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17005, <2 x i64>* %16707, align 16
  %17006 = load <4 x i32>, <4 x i32>* %16375, align 16
  %17007 = load <4 x i32>, <4 x i32>* %16391, align 16
  %17008 = shufflevector <4 x i32> %17006, <4 x i32> %17007, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17009 = bitcast <4 x i32> %17008 to <2 x i64>
  %17010 = shufflevector <4 x i32> %17006, <4 x i32> %17007, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17011 = bitcast <4 x i32> %17010 to <2 x i64>
  %17012 = load <4 x i32>, <4 x i32>* %16407, align 16
  %17013 = load <4 x i32>, <4 x i32>* %16423, align 16
  %17014 = shufflevector <4 x i32> %17012, <4 x i32> %17013, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17015 = bitcast <4 x i32> %17014 to <2 x i64>
  %17016 = shufflevector <4 x i32> %17012, <4 x i32> %17013, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17017 = bitcast <4 x i32> %17016 to <2 x i64>
  %17018 = shufflevector <2 x i64> %17009, <2 x i64> %17015, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17018, <2 x i64>* %16721, align 16
  %17019 = shufflevector <2 x i64> %17009, <2 x i64> %17015, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17019, <2 x i64>* %16723, align 16
  %17020 = shufflevector <2 x i64> %17011, <2 x i64> %17017, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17020, <2 x i64>* %16725, align 16
  %17021 = shufflevector <2 x i64> %17011, <2 x i64> %17017, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17021, <2 x i64>* %16727, align 16
  %17022 = load <4 x i32>, <4 x i32>* %16379, align 16
  %17023 = load <4 x i32>, <4 x i32>* %16395, align 16
  %17024 = shufflevector <4 x i32> %17022, <4 x i32> %17023, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17025 = bitcast <4 x i32> %17024 to <2 x i64>
  %17026 = shufflevector <4 x i32> %17022, <4 x i32> %17023, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17027 = bitcast <4 x i32> %17026 to <2 x i64>
  %17028 = load <4 x i32>, <4 x i32>* %16411, align 16
  %17029 = load <4 x i32>, <4 x i32>* %16427, align 16
  %17030 = shufflevector <4 x i32> %17028, <4 x i32> %17029, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17031 = bitcast <4 x i32> %17030 to <2 x i64>
  %17032 = shufflevector <4 x i32> %17028, <4 x i32> %17029, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17033 = bitcast <4 x i32> %17032 to <2 x i64>
  %17034 = shufflevector <2 x i64> %17025, <2 x i64> %17031, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17034, <2 x i64>* %16741, align 16
  %17035 = shufflevector <2 x i64> %17025, <2 x i64> %17031, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17035, <2 x i64>* %16743, align 16
  %17036 = shufflevector <2 x i64> %17027, <2 x i64> %17033, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17036, <2 x i64>* %16745, align 16
  %17037 = shufflevector <2 x i64> %17027, <2 x i64> %17033, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17037, <2 x i64>* %16747, align 16
  %17038 = load <4 x i32>, <4 x i32>* %16447, align 16
  %17039 = load <4 x i32>, <4 x i32>* %16463, align 16
  %17040 = shufflevector <4 x i32> %17038, <4 x i32> %17039, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17041 = bitcast <4 x i32> %17040 to <2 x i64>
  %17042 = shufflevector <4 x i32> %17038, <4 x i32> %17039, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17043 = bitcast <4 x i32> %17042 to <2 x i64>
  %17044 = load <4 x i32>, <4 x i32>* %16479, align 16
  %17045 = load <4 x i32>, <4 x i32>* %16495, align 16
  %17046 = shufflevector <4 x i32> %17044, <4 x i32> %17045, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17047 = bitcast <4 x i32> %17046 to <2 x i64>
  %17048 = shufflevector <4 x i32> %17044, <4 x i32> %17045, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17049 = bitcast <4 x i32> %17048 to <2 x i64>
  %17050 = shufflevector <2 x i64> %17041, <2 x i64> %17047, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17050, <2 x i64>* %16761, align 16
  %17051 = shufflevector <2 x i64> %17041, <2 x i64> %17047, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17051, <2 x i64>* %16763, align 16
  %17052 = shufflevector <2 x i64> %17043, <2 x i64> %17049, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17052, <2 x i64>* %16765, align 16
  %17053 = shufflevector <2 x i64> %17043, <2 x i64> %17049, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17053, <2 x i64>* %16767, align 16
  %17054 = load <4 x i32>, <4 x i32>* %16451, align 16
  %17055 = load <4 x i32>, <4 x i32>* %16467, align 16
  %17056 = shufflevector <4 x i32> %17054, <4 x i32> %17055, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17057 = bitcast <4 x i32> %17056 to <2 x i64>
  %17058 = shufflevector <4 x i32> %17054, <4 x i32> %17055, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17059 = bitcast <4 x i32> %17058 to <2 x i64>
  %17060 = load <4 x i32>, <4 x i32>* %16483, align 16
  %17061 = load <4 x i32>, <4 x i32>* %16499, align 16
  %17062 = shufflevector <4 x i32> %17060, <4 x i32> %17061, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17063 = bitcast <4 x i32> %17062 to <2 x i64>
  %17064 = shufflevector <4 x i32> %17060, <4 x i32> %17061, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17065 = bitcast <4 x i32> %17064 to <2 x i64>
  %17066 = shufflevector <2 x i64> %17057, <2 x i64> %17063, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17066, <2 x i64>* %16781, align 16
  %17067 = shufflevector <2 x i64> %17057, <2 x i64> %17063, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17067, <2 x i64>* %16783, align 16
  %17068 = shufflevector <2 x i64> %17059, <2 x i64> %17065, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17068, <2 x i64>* %16785, align 16
  %17069 = shufflevector <2 x i64> %17059, <2 x i64> %17065, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17069, <2 x i64>* %16787, align 16
  %17070 = load <4 x i32>, <4 x i32>* %16527, align 16
  %17071 = load <4 x i32>, <4 x i32>* %16543, align 16
  %17072 = shufflevector <4 x i32> %17070, <4 x i32> %17071, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17073 = bitcast <4 x i32> %17072 to <2 x i64>
  %17074 = shufflevector <4 x i32> %17070, <4 x i32> %17071, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17075 = bitcast <4 x i32> %17074 to <2 x i64>
  %17076 = load <4 x i32>, <4 x i32>* %16559, align 16
  %17077 = load <4 x i32>, <4 x i32>* %16575, align 16
  %17078 = shufflevector <4 x i32> %17076, <4 x i32> %17077, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17079 = bitcast <4 x i32> %17078 to <2 x i64>
  %17080 = shufflevector <4 x i32> %17076, <4 x i32> %17077, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17081 = bitcast <4 x i32> %17080 to <2 x i64>
  %17082 = shufflevector <2 x i64> %17073, <2 x i64> %17079, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17082, <2 x i64>* %16801, align 16
  %17083 = shufflevector <2 x i64> %17073, <2 x i64> %17079, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17083, <2 x i64>* %16803, align 16
  %17084 = shufflevector <2 x i64> %17075, <2 x i64> %17081, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17084, <2 x i64>* %16805, align 16
  %17085 = shufflevector <2 x i64> %17075, <2 x i64> %17081, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17085, <2 x i64>* %16807, align 16
  %17086 = load <4 x i32>, <4 x i32>* %16531, align 16
  %17087 = load <4 x i32>, <4 x i32>* %16547, align 16
  %17088 = shufflevector <4 x i32> %17086, <4 x i32> %17087, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17089 = bitcast <4 x i32> %17088 to <2 x i64>
  %17090 = shufflevector <4 x i32> %17086, <4 x i32> %17087, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17091 = bitcast <4 x i32> %17090 to <2 x i64>
  %17092 = load <4 x i32>, <4 x i32>* %16563, align 16
  %17093 = load <4 x i32>, <4 x i32>* %16579, align 16
  %17094 = shufflevector <4 x i32> %17092, <4 x i32> %17093, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17095 = bitcast <4 x i32> %17094 to <2 x i64>
  %17096 = shufflevector <4 x i32> %17092, <4 x i32> %17093, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17097 = bitcast <4 x i32> %17096 to <2 x i64>
  %17098 = shufflevector <2 x i64> %17089, <2 x i64> %17095, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17098, <2 x i64>* %16821, align 16
  %17099 = shufflevector <2 x i64> %17089, <2 x i64> %17095, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17099, <2 x i64>* %16823, align 16
  %17100 = shufflevector <2 x i64> %17091, <2 x i64> %17097, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17100, <2 x i64>* %16825, align 16
  %17101 = shufflevector <2 x i64> %17091, <2 x i64> %17097, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17101, <2 x i64>* %16827, align 16
  %17102 = load <4 x i32>, <4 x i32>* %16455, align 16
  %17103 = load <4 x i32>, <4 x i32>* %16471, align 16
  %17104 = shufflevector <4 x i32> %17102, <4 x i32> %17103, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17105 = bitcast <4 x i32> %17104 to <2 x i64>
  %17106 = shufflevector <4 x i32> %17102, <4 x i32> %17103, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17107 = bitcast <4 x i32> %17106 to <2 x i64>
  %17108 = load <4 x i32>, <4 x i32>* %16487, align 16
  %17109 = load <4 x i32>, <4 x i32>* %16503, align 16
  %17110 = shufflevector <4 x i32> %17108, <4 x i32> %17109, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17111 = bitcast <4 x i32> %17110 to <2 x i64>
  %17112 = shufflevector <4 x i32> %17108, <4 x i32> %17109, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17113 = bitcast <4 x i32> %17112 to <2 x i64>
  %17114 = shufflevector <2 x i64> %17105, <2 x i64> %17111, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17114, <2 x i64>* %16841, align 16
  %17115 = shufflevector <2 x i64> %17105, <2 x i64> %17111, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17115, <2 x i64>* %16843, align 16
  %17116 = shufflevector <2 x i64> %17107, <2 x i64> %17113, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17116, <2 x i64>* %16845, align 16
  %17117 = shufflevector <2 x i64> %17107, <2 x i64> %17113, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17117, <2 x i64>* %16847, align 16
  %17118 = load <4 x i32>, <4 x i32>* %16459, align 16
  %17119 = load <4 x i32>, <4 x i32>* %16475, align 16
  %17120 = shufflevector <4 x i32> %17118, <4 x i32> %17119, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17121 = bitcast <4 x i32> %17120 to <2 x i64>
  %17122 = shufflevector <4 x i32> %17118, <4 x i32> %17119, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17123 = bitcast <4 x i32> %17122 to <2 x i64>
  %17124 = load <4 x i32>, <4 x i32>* %16491, align 16
  %17125 = load <4 x i32>, <4 x i32>* %16507, align 16
  %17126 = shufflevector <4 x i32> %17124, <4 x i32> %17125, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17127 = bitcast <4 x i32> %17126 to <2 x i64>
  %17128 = shufflevector <4 x i32> %17124, <4 x i32> %17125, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17129 = bitcast <4 x i32> %17128 to <2 x i64>
  %17130 = shufflevector <2 x i64> %17121, <2 x i64> %17127, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17130, <2 x i64>* %16861, align 16
  %17131 = shufflevector <2 x i64> %17121, <2 x i64> %17127, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17131, <2 x i64>* %16863, align 16
  %17132 = shufflevector <2 x i64> %17123, <2 x i64> %17129, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17132, <2 x i64>* %16865, align 16
  %17133 = shufflevector <2 x i64> %17123, <2 x i64> %17129, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17133, <2 x i64>* %16867, align 16
  %17134 = load <4 x i32>, <4 x i32>* %16535, align 16
  %17135 = load <4 x i32>, <4 x i32>* %16551, align 16
  %17136 = shufflevector <4 x i32> %17134, <4 x i32> %17135, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17137 = bitcast <4 x i32> %17136 to <2 x i64>
  %17138 = shufflevector <4 x i32> %17134, <4 x i32> %17135, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17139 = bitcast <4 x i32> %17138 to <2 x i64>
  %17140 = load <4 x i32>, <4 x i32>* %16567, align 16
  %17141 = load <4 x i32>, <4 x i32>* %16583, align 16
  %17142 = shufflevector <4 x i32> %17140, <4 x i32> %17141, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17143 = bitcast <4 x i32> %17142 to <2 x i64>
  %17144 = shufflevector <4 x i32> %17140, <4 x i32> %17141, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17145 = bitcast <4 x i32> %17144 to <2 x i64>
  %17146 = shufflevector <2 x i64> %17137, <2 x i64> %17143, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17146, <2 x i64>* %16881, align 16
  %17147 = shufflevector <2 x i64> %17137, <2 x i64> %17143, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17147, <2 x i64>* %16883, align 16
  %17148 = shufflevector <2 x i64> %17139, <2 x i64> %17145, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17148, <2 x i64>* %16885, align 16
  %17149 = shufflevector <2 x i64> %17139, <2 x i64> %17145, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17149, <2 x i64>* %16887, align 16
  %17150 = load <4 x i32>, <4 x i32>* %16539, align 16
  %17151 = load <4 x i32>, <4 x i32>* %16555, align 16
  %17152 = shufflevector <4 x i32> %17150, <4 x i32> %17151, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17153 = bitcast <4 x i32> %17152 to <2 x i64>
  %17154 = shufflevector <4 x i32> %17150, <4 x i32> %17151, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17155 = bitcast <4 x i32> %17154 to <2 x i64>
  %17156 = load <4 x i32>, <4 x i32>* %16571, align 16
  %17157 = load <4 x i32>, <4 x i32>* %16587, align 16
  %17158 = shufflevector <4 x i32> %17156, <4 x i32> %17157, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %17159 = bitcast <4 x i32> %17158 to <2 x i64>
  %17160 = shufflevector <4 x i32> %17156, <4 x i32> %17157, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %17161 = bitcast <4 x i32> %17160 to <2 x i64>
  %17162 = shufflevector <2 x i64> %17153, <2 x i64> %17159, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17162, <2 x i64>* %16901, align 16
  %17163 = shufflevector <2 x i64> %17153, <2 x i64> %17159, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17163, <2 x i64>* %16903, align 16
  %17164 = shufflevector <2 x i64> %17155, <2 x i64> %17161, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %17164, <2 x i64>* %16905, align 16
  %17165 = shufflevector <2 x i64> %17155, <2 x i64> %17161, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %17165, <2 x i64>* %16907, align 16
  %17166 = bitcast i32* %1 to <2 x i64>*
  %17167 = load <2 x i64>, <2 x i64>* %16253, align 16
  store <2 x i64> %17167, <2 x i64>* %17166, align 16
  %17168 = getelementptr inbounds i32, i32* %1, i64 4
  %17169 = bitcast i32* %17168 to <2 x i64>*
  %17170 = load <2 x i64>, <2 x i64>* %16649, align 16
  store <2 x i64> %17170, <2 x i64>* %17169, align 16
  %17171 = getelementptr inbounds i32, i32* %1, i64 8
  %17172 = bitcast i32* %17171 to <2 x i64>*
  %17173 = load <2 x i64>, <2 x i64>* %16761, align 16
  store <2 x i64> %17173, <2 x i64>* %17172, align 16
  %17174 = getelementptr inbounds i32, i32* %1, i64 12
  %17175 = bitcast i32* %17174 to <2 x i64>*
  %17176 = load <2 x i64>, <2 x i64>* %16801, align 16
  store <2 x i64> %17176, <2 x i64>* %17175, align 16
  %17177 = getelementptr inbounds i32, i32* %1, i64 16
  %17178 = bitcast i32* %17177 to <2 x i64>*
  %17179 = load <2 x i64>, <2 x i64>* %16616, align 16
  store <2 x i64> %17179, <2 x i64>* %17178, align 16
  %17180 = getelementptr inbounds i32, i32* %1, i64 20
  %17181 = bitcast i32* %17180 to <2 x i64>*
  %17182 = load <2 x i64>, <2 x i64>* %16651, align 16
  store <2 x i64> %17182, <2 x i64>* %17181, align 16
  %17183 = getelementptr inbounds i32, i32* %1, i64 24
  %17184 = bitcast i32* %17183 to <2 x i64>*
  %17185 = load <2 x i64>, <2 x i64>* %16763, align 16
  store <2 x i64> %17185, <2 x i64>* %17184, align 16
  %17186 = getelementptr inbounds i32, i32* %1, i64 28
  %17187 = bitcast i32* %17186 to <2 x i64>*
  %17188 = load <2 x i64>, <2 x i64>* %16803, align 16
  store <2 x i64> %17188, <2 x i64>* %17187, align 16
  %17189 = getelementptr inbounds i32, i32* %1, i64 32
  %17190 = bitcast i32* %17189 to <2 x i64>*
  %17191 = load <2 x i64>, <2 x i64>* %16618, align 16
  store <2 x i64> %17191, <2 x i64>* %17190, align 16
  %17192 = getelementptr inbounds i32, i32* %1, i64 36
  %17193 = bitcast i32* %17192 to <2 x i64>*
  %17194 = load <2 x i64>, <2 x i64>* %16653, align 16
  store <2 x i64> %17194, <2 x i64>* %17193, align 16
  %17195 = getelementptr inbounds i32, i32* %1, i64 40
  %17196 = bitcast i32* %17195 to <2 x i64>*
  %17197 = load <2 x i64>, <2 x i64>* %16765, align 16
  store <2 x i64> %17197, <2 x i64>* %17196, align 16
  %17198 = getelementptr inbounds i32, i32* %1, i64 44
  %17199 = bitcast i32* %17198 to <2 x i64>*
  %17200 = load <2 x i64>, <2 x i64>* %16805, align 16
  store <2 x i64> %17200, <2 x i64>* %17199, align 16
  %17201 = getelementptr inbounds i32, i32* %1, i64 48
  %17202 = bitcast i32* %17201 to <2 x i64>*
  %17203 = load <2 x i64>, <2 x i64>* %16620, align 16
  store <2 x i64> %17203, <2 x i64>* %17202, align 16
  %17204 = getelementptr inbounds i32, i32* %1, i64 52
  %17205 = bitcast i32* %17204 to <2 x i64>*
  %17206 = load <2 x i64>, <2 x i64>* %16655, align 16
  store <2 x i64> %17206, <2 x i64>* %17205, align 16
  %17207 = getelementptr inbounds i32, i32* %1, i64 56
  %17208 = bitcast i32* %17207 to <2 x i64>*
  %17209 = load <2 x i64>, <2 x i64>* %16767, align 16
  store <2 x i64> %17209, <2 x i64>* %17208, align 16
  %17210 = getelementptr inbounds i32, i32* %1, i64 60
  %17211 = bitcast i32* %17210 to <2 x i64>*
  %17212 = load <2 x i64>, <2 x i64>* %16807, align 16
  store <2 x i64> %17212, <2 x i64>* %17211, align 16
  %17213 = getelementptr inbounds i32, i32* %1, i64 64
  %17214 = bitcast i32* %17213 to <2 x i64>*
  %17215 = load <2 x i64>, <2 x i64>* %16630, align 16
  store <2 x i64> %17215, <2 x i64>* %17214, align 16
  %17216 = getelementptr inbounds i32, i32* %1, i64 68
  %17217 = bitcast i32* %17216 to <2 x i64>*
  %17218 = load <2 x i64>, <2 x i64>* %16669, align 16
  store <2 x i64> %17218, <2 x i64>* %17217, align 16
  %17219 = getelementptr inbounds i32, i32* %1, i64 72
  %17220 = bitcast i32* %17219 to <2 x i64>*
  %17221 = load <2 x i64>, <2 x i64>* %16781, align 16
  store <2 x i64> %17221, <2 x i64>* %17220, align 16
  %17222 = getelementptr inbounds i32, i32* %1, i64 76
  %17223 = bitcast i32* %17222 to <2 x i64>*
  %17224 = load <2 x i64>, <2 x i64>* %16821, align 16
  store <2 x i64> %17224, <2 x i64>* %17223, align 16
  %17225 = getelementptr inbounds i32, i32* %1, i64 80
  %17226 = bitcast i32* %17225 to <2 x i64>*
  %17227 = load <2 x i64>, <2 x i64>* %16632, align 16
  store <2 x i64> %17227, <2 x i64>* %17226, align 16
  %17228 = getelementptr inbounds i32, i32* %1, i64 84
  %17229 = bitcast i32* %17228 to <2 x i64>*
  %17230 = load <2 x i64>, <2 x i64>* %16671, align 16
  store <2 x i64> %17230, <2 x i64>* %17229, align 16
  %17231 = getelementptr inbounds i32, i32* %1, i64 88
  %17232 = bitcast i32* %17231 to <2 x i64>*
  %17233 = load <2 x i64>, <2 x i64>* %16783, align 16
  store <2 x i64> %17233, <2 x i64>* %17232, align 16
  %17234 = getelementptr inbounds i32, i32* %1, i64 92
  %17235 = bitcast i32* %17234 to <2 x i64>*
  %17236 = load <2 x i64>, <2 x i64>* %16823, align 16
  store <2 x i64> %17236, <2 x i64>* %17235, align 16
  %17237 = getelementptr inbounds i32, i32* %1, i64 96
  %17238 = bitcast i32* %17237 to <2 x i64>*
  %17239 = load <2 x i64>, <2 x i64>* %16634, align 16
  store <2 x i64> %17239, <2 x i64>* %17238, align 16
  %17240 = getelementptr inbounds i32, i32* %1, i64 100
  %17241 = bitcast i32* %17240 to <2 x i64>*
  %17242 = load <2 x i64>, <2 x i64>* %16673, align 16
  store <2 x i64> %17242, <2 x i64>* %17241, align 16
  %17243 = getelementptr inbounds i32, i32* %1, i64 104
  %17244 = bitcast i32* %17243 to <2 x i64>*
  %17245 = load <2 x i64>, <2 x i64>* %16785, align 16
  store <2 x i64> %17245, <2 x i64>* %17244, align 16
  %17246 = getelementptr inbounds i32, i32* %1, i64 108
  %17247 = bitcast i32* %17246 to <2 x i64>*
  %17248 = load <2 x i64>, <2 x i64>* %16825, align 16
  store <2 x i64> %17248, <2 x i64>* %17247, align 16
  %17249 = getelementptr inbounds i32, i32* %1, i64 112
  %17250 = bitcast i32* %17249 to <2 x i64>*
  %17251 = load <2 x i64>, <2 x i64>* %16636, align 16
  store <2 x i64> %17251, <2 x i64>* %17250, align 16
  %17252 = getelementptr inbounds i32, i32* %1, i64 116
  %17253 = bitcast i32* %17252 to <2 x i64>*
  %17254 = load <2 x i64>, <2 x i64>* %16675, align 16
  store <2 x i64> %17254, <2 x i64>* %17253, align 16
  %17255 = getelementptr inbounds i32, i32* %1, i64 120
  %17256 = bitcast i32* %17255 to <2 x i64>*
  %17257 = load <2 x i64>, <2 x i64>* %16787, align 16
  store <2 x i64> %17257, <2 x i64>* %17256, align 16
  %17258 = getelementptr inbounds i32, i32* %1, i64 124
  %17259 = bitcast i32* %17258 to <2 x i64>*
  %17260 = load <2 x i64>, <2 x i64>* %16827, align 16
  store <2 x i64> %17260, <2 x i64>* %17259, align 16
  %17261 = getelementptr inbounds i32, i32* %1, i64 128
  %17262 = bitcast i32* %17261 to <2 x i64>*
  %17263 = load <2 x i64>, <2 x i64>* %16685, align 16
  store <2 x i64> %17263, <2 x i64>* %17262, align 16
  %17264 = getelementptr inbounds i32, i32* %1, i64 132
  %17265 = bitcast i32* %17264 to <2 x i64>*
  %17266 = load <2 x i64>, <2 x i64>* %16721, align 16
  store <2 x i64> %17266, <2 x i64>* %17265, align 16
  %17267 = getelementptr inbounds i32, i32* %1, i64 136
  %17268 = bitcast i32* %17267 to <2 x i64>*
  %17269 = load <2 x i64>, <2 x i64>* %16841, align 16
  store <2 x i64> %17269, <2 x i64>* %17268, align 16
  %17270 = getelementptr inbounds i32, i32* %1, i64 140
  %17271 = bitcast i32* %17270 to <2 x i64>*
  %17272 = load <2 x i64>, <2 x i64>* %16881, align 16
  store <2 x i64> %17272, <2 x i64>* %17271, align 16
  %17273 = getelementptr inbounds i32, i32* %1, i64 144
  %17274 = bitcast i32* %17273 to <2 x i64>*
  %17275 = load <2 x i64>, <2 x i64>* %16687, align 16
  store <2 x i64> %17275, <2 x i64>* %17274, align 16
  %17276 = getelementptr inbounds i32, i32* %1, i64 148
  %17277 = bitcast i32* %17276 to <2 x i64>*
  %17278 = load <2 x i64>, <2 x i64>* %16723, align 16
  store <2 x i64> %17278, <2 x i64>* %17277, align 16
  %17279 = getelementptr inbounds i32, i32* %1, i64 152
  %17280 = bitcast i32* %17279 to <2 x i64>*
  %17281 = load <2 x i64>, <2 x i64>* %16843, align 16
  store <2 x i64> %17281, <2 x i64>* %17280, align 16
  %17282 = getelementptr inbounds i32, i32* %1, i64 156
  %17283 = bitcast i32* %17282 to <2 x i64>*
  %17284 = load <2 x i64>, <2 x i64>* %16883, align 16
  store <2 x i64> %17284, <2 x i64>* %17283, align 16
  %17285 = getelementptr inbounds i32, i32* %1, i64 160
  %17286 = bitcast i32* %17285 to <2 x i64>*
  %17287 = load <2 x i64>, <2 x i64>* %16689, align 16
  store <2 x i64> %17287, <2 x i64>* %17286, align 16
  %17288 = getelementptr inbounds i32, i32* %1, i64 164
  %17289 = bitcast i32* %17288 to <2 x i64>*
  %17290 = load <2 x i64>, <2 x i64>* %16725, align 16
  store <2 x i64> %17290, <2 x i64>* %17289, align 16
  %17291 = getelementptr inbounds i32, i32* %1, i64 168
  %17292 = bitcast i32* %17291 to <2 x i64>*
  %17293 = load <2 x i64>, <2 x i64>* %16845, align 16
  store <2 x i64> %17293, <2 x i64>* %17292, align 16
  %17294 = getelementptr inbounds i32, i32* %1, i64 172
  %17295 = bitcast i32* %17294 to <2 x i64>*
  %17296 = load <2 x i64>, <2 x i64>* %16885, align 16
  store <2 x i64> %17296, <2 x i64>* %17295, align 16
  %17297 = getelementptr inbounds i32, i32* %1, i64 176
  %17298 = bitcast i32* %17297 to <2 x i64>*
  %17299 = load <2 x i64>, <2 x i64>* %16691, align 16
  store <2 x i64> %17299, <2 x i64>* %17298, align 16
  %17300 = getelementptr inbounds i32, i32* %1, i64 180
  %17301 = bitcast i32* %17300 to <2 x i64>*
  %17302 = load <2 x i64>, <2 x i64>* %16727, align 16
  store <2 x i64> %17302, <2 x i64>* %17301, align 16
  %17303 = getelementptr inbounds i32, i32* %1, i64 184
  %17304 = bitcast i32* %17303 to <2 x i64>*
  %17305 = load <2 x i64>, <2 x i64>* %16847, align 16
  store <2 x i64> %17305, <2 x i64>* %17304, align 16
  %17306 = getelementptr inbounds i32, i32* %1, i64 188
  %17307 = bitcast i32* %17306 to <2 x i64>*
  %17308 = load <2 x i64>, <2 x i64>* %16887, align 16
  store <2 x i64> %17308, <2 x i64>* %17307, align 16
  %17309 = getelementptr inbounds i32, i32* %1, i64 192
  %17310 = bitcast i32* %17309 to <2 x i64>*
  %17311 = load <2 x i64>, <2 x i64>* %16701, align 16
  store <2 x i64> %17311, <2 x i64>* %17310, align 16
  %17312 = getelementptr inbounds i32, i32* %1, i64 196
  %17313 = bitcast i32* %17312 to <2 x i64>*
  %17314 = load <2 x i64>, <2 x i64>* %16741, align 16
  store <2 x i64> %17314, <2 x i64>* %17313, align 16
  %17315 = getelementptr inbounds i32, i32* %1, i64 200
  %17316 = bitcast i32* %17315 to <2 x i64>*
  %17317 = load <2 x i64>, <2 x i64>* %16861, align 16
  store <2 x i64> %17317, <2 x i64>* %17316, align 16
  %17318 = getelementptr inbounds i32, i32* %1, i64 204
  %17319 = bitcast i32* %17318 to <2 x i64>*
  %17320 = load <2 x i64>, <2 x i64>* %16901, align 16
  store <2 x i64> %17320, <2 x i64>* %17319, align 16
  %17321 = getelementptr inbounds i32, i32* %1, i64 208
  %17322 = bitcast i32* %17321 to <2 x i64>*
  %17323 = load <2 x i64>, <2 x i64>* %16703, align 16
  store <2 x i64> %17323, <2 x i64>* %17322, align 16
  %17324 = getelementptr inbounds i32, i32* %1, i64 212
  %17325 = bitcast i32* %17324 to <2 x i64>*
  %17326 = load <2 x i64>, <2 x i64>* %16743, align 16
  store <2 x i64> %17326, <2 x i64>* %17325, align 16
  %17327 = getelementptr inbounds i32, i32* %1, i64 216
  %17328 = bitcast i32* %17327 to <2 x i64>*
  %17329 = load <2 x i64>, <2 x i64>* %16863, align 16
  store <2 x i64> %17329, <2 x i64>* %17328, align 16
  %17330 = getelementptr inbounds i32, i32* %1, i64 220
  %17331 = bitcast i32* %17330 to <2 x i64>*
  %17332 = load <2 x i64>, <2 x i64>* %16903, align 16
  store <2 x i64> %17332, <2 x i64>* %17331, align 16
  %17333 = getelementptr inbounds i32, i32* %1, i64 224
  %17334 = bitcast i32* %17333 to <2 x i64>*
  %17335 = load <2 x i64>, <2 x i64>* %16705, align 16
  store <2 x i64> %17335, <2 x i64>* %17334, align 16
  %17336 = getelementptr inbounds i32, i32* %1, i64 228
  %17337 = bitcast i32* %17336 to <2 x i64>*
  %17338 = load <2 x i64>, <2 x i64>* %16745, align 16
  store <2 x i64> %17338, <2 x i64>* %17337, align 16
  %17339 = getelementptr inbounds i32, i32* %1, i64 232
  %17340 = bitcast i32* %17339 to <2 x i64>*
  %17341 = load <2 x i64>, <2 x i64>* %16865, align 16
  store <2 x i64> %17341, <2 x i64>* %17340, align 16
  %17342 = getelementptr inbounds i32, i32* %1, i64 236
  %17343 = bitcast i32* %17342 to <2 x i64>*
  %17344 = load <2 x i64>, <2 x i64>* %16905, align 16
  store <2 x i64> %17344, <2 x i64>* %17343, align 16
  %17345 = getelementptr inbounds i32, i32* %1, i64 240
  %17346 = bitcast i32* %17345 to <2 x i64>*
  %17347 = load <2 x i64>, <2 x i64>* %16707, align 16
  store <2 x i64> %17347, <2 x i64>* %17346, align 16
  %17348 = getelementptr inbounds i32, i32* %1, i64 244
  %17349 = bitcast i32* %17348 to <2 x i64>*
  %17350 = load <2 x i64>, <2 x i64>* %16747, align 16
  store <2 x i64> %17350, <2 x i64>* %17349, align 16
  %17351 = getelementptr inbounds i32, i32* %1, i64 248
  %17352 = bitcast i32* %17351 to <2 x i64>*
  %17353 = load <2 x i64>, <2 x i64>* %16867, align 16
  store <2 x i64> %17353, <2 x i64>* %17352, align 16
  %17354 = getelementptr inbounds i32, i32* %1, i64 252
  %17355 = bitcast i32* %17354 to <2 x i64>*
  %17356 = load <2 x i64>, <2 x i64>* %16907, align 16
  store <2 x i64> %17356, <2 x i64>* %17355, align 16
  br label %17357

17357:                                            ; preds = %5, %16277, %15804, %14067, %13594, %11857, %11384, %10279, %8518, %7433, %6348, %5263, %4178, %3116, %2081, %1046, %11
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %8) #8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @load_buffer_16x16(i16* nocapture readonly, <2 x i64>*, i32, i32, i32, i32) unnamed_addr #5 {
  %7 = alloca [64 x <2 x i64>], align 16
  %8 = bitcast [64 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 1024, i1 false)
  %9 = getelementptr inbounds i16, i16* %0, i64 8
  %10 = shl nsw i32 %2, 3
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i16, i16* %0, i64 %11
  %13 = getelementptr inbounds i16, i16* %12, i64 8
  %14 = icmp eq i32 %3, 0
  %15 = select i1 %14, i16* %0, i16* %12
  %16 = select i1 %14, i16* %9, i16* %13
  %17 = select i1 %14, i16* %12, i16* %0
  %18 = select i1 %14, i16* %13, i16* %9
  %19 = icmp eq i32 %4, 0
  %20 = select i1 %19, i16* %15, i16* %16
  %21 = select i1 %19, i16* %16, i16* %15
  %22 = select i1 %19, i16* %17, i16* %18
  %23 = select i1 %19, i16* %18, i16* %17
  %24 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 0
  br i1 %14, label %25, label %41

25:                                               ; preds = %6
  %26 = bitcast i16* %20 to <2 x i64>*
  %27 = load <2 x i64>, <2 x i64>* %26, align 16
  store <2 x i64> %27, <2 x i64>* %24, align 16
  %28 = sext i32 %2 to i64
  %29 = getelementptr inbounds i16, i16* %20, i64 %28
  %30 = bitcast i16* %29 to <2 x i64>*
  %31 = load <2 x i64>, <2 x i64>* %30, align 16
  %32 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  store <2 x i64> %31, <2 x i64>* %32, align 16
  %33 = shl nsw i32 %2, 1
  %34 = mul nsw i32 %2, 3
  %35 = shl nsw i32 %2, 2
  %36 = mul nsw i32 %2, 5
  %37 = mul nsw i32 %2, 6
  %38 = mul nsw i32 %2, 7
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %20, i64 %39
  br label %57

41:                                               ; preds = %6
  %42 = mul nsw i32 %2, 7
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i16, i16* %20, i64 %43
  %45 = bitcast i16* %44 to <2 x i64>*
  %46 = load <2 x i64>, <2 x i64>* %45, align 16
  store <2 x i64> %46, <2 x i64>* %24, align 16
  %47 = mul nsw i32 %2, 6
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %20, i64 %48
  %50 = bitcast i16* %49 to <2 x i64>*
  %51 = load <2 x i64>, <2 x i64>* %50, align 16
  %52 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  store <2 x i64> %51, <2 x i64>* %52, align 16
  %53 = mul nsw i32 %2, 5
  %54 = shl nsw i32 %2, 2
  %55 = mul nsw i32 %2, 3
  %56 = shl nsw i32 %2, 1
  br label %57

57:                                               ; preds = %41, %25
  %58 = phi i32 [ %53, %41 ], [ %33, %25 ]
  %59 = phi i32 [ %54, %41 ], [ %34, %25 ]
  %60 = phi i32 [ %55, %41 ], [ %35, %25 ]
  %61 = phi i32 [ %56, %41 ], [ %36, %25 ]
  %62 = phi i32 [ %2, %41 ], [ %37, %25 ]
  %63 = phi <2 x i64> [ %46, %41 ], [ %27, %25 ]
  %64 = phi <2 x i64> [ %51, %41 ], [ %31, %25 ]
  %65 = phi i16* [ %20, %41 ], [ %40, %25 ]
  %66 = sext i32 %62 to i64
  %67 = sext i32 %61 to i64
  %68 = sext i32 %60 to i64
  %69 = sext i32 %59 to i64
  %70 = sext i32 %58 to i64
  %71 = getelementptr inbounds i16, i16* %20, i64 %66
  %72 = getelementptr inbounds i16, i16* %20, i64 %67
  %73 = getelementptr inbounds i16, i16* %20, i64 %68
  %74 = getelementptr inbounds i16, i16* %20, i64 %69
  %75 = getelementptr inbounds i16, i16* %20, i64 %70
  %76 = bitcast i16* %71 to <2 x i64>*
  %77 = bitcast i16* %72 to <2 x i64>*
  %78 = bitcast i16* %73 to <2 x i64>*
  %79 = bitcast i16* %74 to <2 x i64>*
  %80 = bitcast i16* %75 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %76, align 16
  %82 = load <2 x i64>, <2 x i64>* %77, align 16
  %83 = load <2 x i64>, <2 x i64>* %78, align 16
  %84 = load <2 x i64>, <2 x i64>* %79, align 16
  %85 = load <2 x i64>, <2 x i64>* %80, align 16
  %86 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 2
  store <2 x i64> %85, <2 x i64>* %86, align 16
  %87 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 3
  store <2 x i64> %84, <2 x i64>* %87, align 16
  %88 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 4
  store <2 x i64> %83, <2 x i64>* %88, align 16
  %89 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 5
  store <2 x i64> %82, <2 x i64>* %89, align 16
  %90 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 6
  store <2 x i64> %81, <2 x i64>* %90, align 16
  %91 = bitcast i16* %65 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 16
  %93 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 7
  store <2 x i64> %92, <2 x i64>* %93, align 16
  br i1 %19, label %94, label %102

94:                                               ; preds = %57
  %95 = bitcast <2 x i64>* %93 to <4 x i32>*
  %96 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  %97 = bitcast <2 x i64>* %90 to <4 x i32>*
  %98 = bitcast <2 x i64>* %88 to <4 x i32>*
  %99 = bitcast <2 x i64>* %89 to <4 x i32>*
  %100 = bitcast <2 x i64>* %86 to <4 x i32>*
  %101 = bitcast <2 x i64>* %87 to <4 x i32>*
  br label %160

102:                                              ; preds = %57
  %103 = bitcast <2 x i64> %81 to <8 x i16>
  %104 = bitcast <2 x i64> %82 to <8 x i16>
  %105 = bitcast <2 x i64> %83 to <8 x i16>
  %106 = bitcast <2 x i64> %84 to <8 x i16>
  %107 = bitcast <2 x i64> %85 to <8 x i16>
  %108 = bitcast <2 x i64> %64 to <8 x i16>
  %109 = bitcast <2 x i64> %63 to <8 x i16>
  %110 = bitcast <2 x i64> %92 to <8 x i16>
  %111 = shufflevector <8 x i16> %109, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %112 = shufflevector <8 x i16> %111, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %113 = bitcast <8 x i16> %112 to <4 x i32>
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %115 = bitcast [64 x <2 x i64>]* %7 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %115, align 16
  %116 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %117 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %118 = shufflevector <8 x i16> %117, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %119 = bitcast <8 x i16> %118 to <4 x i32>
  %120 = shufflevector <4 x i32> %119, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %121 = bitcast <2 x i64>* %116 to <4 x i32>*
  store <4 x i32> %120, <4 x i32>* %121, align 16
  %122 = shufflevector <8 x i16> %107, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %123 = shufflevector <8 x i16> %122, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %124 = bitcast <8 x i16> %123 to <4 x i32>
  %125 = shufflevector <4 x i32> %124, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %126 = bitcast <2 x i64>* %86 to <4 x i32>*
  store <4 x i32> %125, <4 x i32>* %126, align 16
  %127 = shufflevector <8 x i16> %106, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %128 = shufflevector <8 x i16> %127, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %129 = bitcast <8 x i16> %128 to <4 x i32>
  %130 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %131 = bitcast <2 x i64>* %87 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %131, align 16
  %132 = shufflevector <8 x i16> %105, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %133 = shufflevector <8 x i16> %132, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %134 = bitcast <8 x i16> %133 to <4 x i32>
  %135 = shufflevector <4 x i32> %134, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %136 = bitcast <2 x i64>* %88 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %136, align 16
  %137 = shufflevector <8 x i16> %104, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %138 = shufflevector <8 x i16> %137, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %139 = bitcast <8 x i16> %138 to <4 x i32>
  %140 = shufflevector <4 x i32> %139, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %141 = bitcast <2 x i64>* %89 to <4 x i32>*
  store <4 x i32> %140, <4 x i32>* %141, align 16
  %142 = shufflevector <8 x i16> %103, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %143 = shufflevector <8 x i16> %142, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %144 = bitcast <8 x i16> %143 to <4 x i32>
  %145 = shufflevector <4 x i32> %144, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %146 = bitcast <2 x i64>* %90 to <4 x i32>*
  store <4 x i32> %145, <4 x i32>* %146, align 16
  %147 = shufflevector <8 x i16> %110, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %148 = shufflevector <8 x i16> %147, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %149 = bitcast <8 x i16> %148 to <4 x i32>
  %150 = shufflevector <4 x i32> %149, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %151 = bitcast <2 x i64>* %93 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %151, align 16
  %152 = bitcast <4 x i32> %135 to <2 x i64>
  %153 = bitcast <4 x i32> %140 to <2 x i64>
  %154 = bitcast <4 x i32> %145 to <2 x i64>
  %155 = bitcast <4 x i32> %150 to <2 x i64>
  %156 = bitcast <4 x i32> %130 to <2 x i64>
  %157 = bitcast <4 x i32> %125 to <2 x i64>
  %158 = bitcast <4 x i32> %120 to <2 x i64>
  %159 = bitcast <4 x i32> %114 to <2 x i64>
  br label %160

160:                                              ; preds = %94, %102
  %161 = phi <4 x i32>* [ %101, %94 ], [ %131, %102 ]
  %162 = phi <4 x i32>* [ %100, %94 ], [ %126, %102 ]
  %163 = phi <4 x i32>* [ %99, %94 ], [ %141, %102 ]
  %164 = phi <4 x i32>* [ %98, %94 ], [ %136, %102 ]
  %165 = phi <4 x i32>* [ %97, %94 ], [ %146, %102 ]
  %166 = phi <4 x i32>* [ %96, %94 ], [ %115, %102 ]
  %167 = phi <4 x i32>* [ %95, %94 ], [ %151, %102 ]
  %168 = phi <2 x i64> [ %63, %94 ], [ %159, %102 ]
  %169 = phi <2 x i64> [ %64, %94 ], [ %158, %102 ]
  %170 = phi <2 x i64> [ %85, %94 ], [ %157, %102 ]
  %171 = phi <2 x i64> [ %84, %94 ], [ %156, %102 ]
  %172 = phi <2 x i64> [ %92, %94 ], [ %155, %102 ]
  %173 = phi <2 x i64> [ %81, %94 ], [ %154, %102 ]
  %174 = phi <2 x i64> [ %82, %94 ], [ %153, %102 ]
  %175 = phi <2 x i64> [ %83, %94 ], [ %152, %102 ]
  %176 = shufflevector <2 x i64> %175, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %177 = bitcast <2 x i64> %175 to <8 x i16>
  %178 = shufflevector <8 x i16> %177, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %179 = sext <4 x i16> %178 to <4 x i32>
  %180 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 8
  %181 = bitcast <2 x i64>* %180 to <4 x i32>*
  %182 = bitcast <2 x i64> %176 to <8 x i16>
  %183 = shufflevector <8 x i16> %182, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %184 = sext <4 x i16> %183 to <4 x i32>
  %185 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 9
  %186 = bitcast <2 x i64>* %185 to <4 x i32>*
  %187 = shufflevector <2 x i64> %174, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %188 = bitcast <2 x i64> %174 to <8 x i16>
  %189 = shufflevector <8 x i16> %188, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %190 = sext <4 x i16> %189 to <4 x i32>
  %191 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 10
  %192 = bitcast <2 x i64>* %191 to <4 x i32>*
  %193 = bitcast <2 x i64> %187 to <8 x i16>
  %194 = shufflevector <8 x i16> %193, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %195 = sext <4 x i16> %194 to <4 x i32>
  %196 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 11
  %197 = bitcast <2 x i64>* %196 to <4 x i32>*
  %198 = shufflevector <2 x i64> %173, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %199 = bitcast <2 x i64> %173 to <8 x i16>
  %200 = shufflevector <8 x i16> %199, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %201 = sext <4 x i16> %200 to <4 x i32>
  %202 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 12
  %203 = bitcast <2 x i64>* %202 to <4 x i32>*
  %204 = bitcast <2 x i64> %198 to <8 x i16>
  %205 = shufflevector <8 x i16> %204, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %206 = sext <4 x i16> %205 to <4 x i32>
  %207 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 13
  %208 = bitcast <2 x i64>* %207 to <4 x i32>*
  %209 = shufflevector <2 x i64> %172, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %210 = bitcast <2 x i64> %172 to <8 x i16>
  %211 = shufflevector <8 x i16> %210, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %212 = sext <4 x i16> %211 to <4 x i32>
  %213 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 14
  %214 = bitcast <2 x i64>* %213 to <4 x i32>*
  %215 = bitcast <2 x i64> %209 to <8 x i16>
  %216 = shufflevector <8 x i16> %215, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %217 = sext <4 x i16> %216 to <4 x i32>
  %218 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 15
  %219 = bitcast <2 x i64>* %218 to <4 x i32>*
  %220 = shufflevector <2 x i64> %171, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %221 = bitcast <2 x i64> %171 to <8 x i16>
  %222 = shufflevector <8 x i16> %221, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %223 = sext <4 x i16> %222 to <4 x i32>
  %224 = bitcast <2 x i64> %220 to <8 x i16>
  %225 = shufflevector <8 x i16> %224, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %226 = sext <4 x i16> %225 to <4 x i32>
  %227 = shufflevector <2 x i64> %170, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %228 = bitcast <2 x i64> %170 to <8 x i16>
  %229 = shufflevector <8 x i16> %228, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %230 = sext <4 x i16> %229 to <4 x i32>
  %231 = bitcast <2 x i64> %227 to <8 x i16>
  %232 = shufflevector <8 x i16> %231, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %233 = sext <4 x i16> %232 to <4 x i32>
  %234 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 1
  %235 = shufflevector <2 x i64> %169, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %236 = bitcast <2 x i64> %169 to <8 x i16>
  %237 = shufflevector <8 x i16> %236, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %238 = sext <4 x i16> %237 to <4 x i32>
  %239 = bitcast <2 x i64> %235 to <8 x i16>
  %240 = shufflevector <8 x i16> %239, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %241 = sext <4 x i16> %240 to <4 x i32>
  %242 = shufflevector <2 x i64> %168, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %243 = bitcast <2 x i64> %168 to <8 x i16>
  %244 = shufflevector <8 x i16> %243, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %245 = sext <4 x i16> %244 to <4 x i32>
  %246 = bitcast <2 x i64> %242 to <8 x i16>
  %247 = shufflevector <8 x i16> %246, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %248 = sext <4 x i16> %247 to <4 x i32>
  %249 = bitcast <2 x i64>* %234 to <4 x i32>*
  %250 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %245, i32 %5) #8
  store <4 x i32> %250, <4 x i32>* %166, align 16
  %251 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %248, i32 %5) #8
  store <4 x i32> %251, <4 x i32>* %249, align 16
  %252 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %238, i32 %5) #8
  store <4 x i32> %252, <4 x i32>* %162, align 16
  %253 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %241, i32 %5) #8
  store <4 x i32> %253, <4 x i32>* %161, align 16
  %254 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %230, i32 %5) #8
  store <4 x i32> %254, <4 x i32>* %164, align 16
  %255 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %233, i32 %5) #8
  store <4 x i32> %255, <4 x i32>* %163, align 16
  %256 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %223, i32 %5) #8
  store <4 x i32> %256, <4 x i32>* %165, align 16
  %257 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %226, i32 %5) #8
  store <4 x i32> %257, <4 x i32>* %167, align 16
  %258 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %179, i32 %5) #8
  store <4 x i32> %258, <4 x i32>* %181, align 16
  %259 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %184, i32 %5) #8
  store <4 x i32> %259, <4 x i32>* %186, align 16
  %260 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %190, i32 %5) #8
  store <4 x i32> %260, <4 x i32>* %192, align 16
  %261 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %195, i32 %5) #8
  store <4 x i32> %261, <4 x i32>* %197, align 16
  %262 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %201, i32 %5) #8
  store <4 x i32> %262, <4 x i32>* %203, align 16
  %263 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %206, i32 %5) #8
  store <4 x i32> %263, <4 x i32>* %208, align 16
  %264 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %212, i32 %5) #8
  store <4 x i32> %264, <4 x i32>* %214, align 16
  %265 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %217, i32 %5) #8
  store <4 x i32> %265, <4 x i32>* %219, align 16
  %266 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 32
  br i1 %14, label %267, label %283

267:                                              ; preds = %160
  %268 = bitcast i16* %22 to <2 x i64>*
  %269 = load <2 x i64>, <2 x i64>* %268, align 16
  store <2 x i64> %269, <2 x i64>* %266, align 16
  %270 = sext i32 %2 to i64
  %271 = getelementptr inbounds i16, i16* %22, i64 %270
  %272 = bitcast i16* %271 to <2 x i64>*
  %273 = load <2 x i64>, <2 x i64>* %272, align 16
  %274 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  store <2 x i64> %273, <2 x i64>* %274, align 16
  %275 = shl nsw i32 %2, 1
  %276 = mul nsw i32 %2, 3
  %277 = shl nsw i32 %2, 2
  %278 = mul nsw i32 %2, 5
  %279 = mul nsw i32 %2, 6
  %280 = mul nsw i32 %2, 7
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds i16, i16* %22, i64 %281
  br label %299

283:                                              ; preds = %160
  %284 = mul nsw i32 %2, 7
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds i16, i16* %22, i64 %285
  %287 = bitcast i16* %286 to <2 x i64>*
  %288 = load <2 x i64>, <2 x i64>* %287, align 16
  store <2 x i64> %288, <2 x i64>* %266, align 16
  %289 = mul nsw i32 %2, 6
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds i16, i16* %22, i64 %290
  %292 = bitcast i16* %291 to <2 x i64>*
  %293 = load <2 x i64>, <2 x i64>* %292, align 16
  %294 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  store <2 x i64> %293, <2 x i64>* %294, align 16
  %295 = mul nsw i32 %2, 5
  %296 = shl nsw i32 %2, 2
  %297 = mul nsw i32 %2, 3
  %298 = shl nsw i32 %2, 1
  br label %299

299:                                              ; preds = %283, %267
  %300 = phi i32 [ %295, %283 ], [ %275, %267 ]
  %301 = phi i32 [ %296, %283 ], [ %276, %267 ]
  %302 = phi i32 [ %297, %283 ], [ %277, %267 ]
  %303 = phi i32 [ %298, %283 ], [ %278, %267 ]
  %304 = phi i32 [ %2, %283 ], [ %279, %267 ]
  %305 = phi <2 x i64> [ %288, %283 ], [ %269, %267 ]
  %306 = phi <2 x i64> [ %293, %283 ], [ %273, %267 ]
  %307 = phi i16* [ %22, %283 ], [ %282, %267 ]
  %308 = sext i32 %304 to i64
  %309 = sext i32 %303 to i64
  %310 = sext i32 %302 to i64
  %311 = sext i32 %301 to i64
  %312 = sext i32 %300 to i64
  %313 = getelementptr inbounds i16, i16* %22, i64 %308
  %314 = getelementptr inbounds i16, i16* %22, i64 %309
  %315 = getelementptr inbounds i16, i16* %22, i64 %310
  %316 = getelementptr inbounds i16, i16* %22, i64 %311
  %317 = getelementptr inbounds i16, i16* %22, i64 %312
  %318 = bitcast i16* %313 to <2 x i64>*
  %319 = bitcast i16* %314 to <2 x i64>*
  %320 = bitcast i16* %315 to <2 x i64>*
  %321 = bitcast i16* %316 to <2 x i64>*
  %322 = bitcast i16* %317 to <2 x i64>*
  %323 = load <2 x i64>, <2 x i64>* %318, align 16
  %324 = load <2 x i64>, <2 x i64>* %319, align 16
  %325 = load <2 x i64>, <2 x i64>* %320, align 16
  %326 = load <2 x i64>, <2 x i64>* %321, align 16
  %327 = load <2 x i64>, <2 x i64>* %322, align 16
  %328 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 34
  store <2 x i64> %327, <2 x i64>* %328, align 16
  %329 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 35
  store <2 x i64> %326, <2 x i64>* %329, align 16
  %330 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 36
  store <2 x i64> %325, <2 x i64>* %330, align 16
  %331 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 37
  store <2 x i64> %324, <2 x i64>* %331, align 16
  %332 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 38
  store <2 x i64> %323, <2 x i64>* %332, align 16
  %333 = bitcast i16* %307 to <2 x i64>*
  %334 = load <2 x i64>, <2 x i64>* %333, align 16
  %335 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 39
  store <2 x i64> %334, <2 x i64>* %335, align 16
  br i1 %19, label %336, label %344

336:                                              ; preds = %299
  %337 = bitcast <2 x i64>* %335 to <4 x i32>*
  %338 = bitcast <2 x i64>* %266 to <4 x i32>*
  %339 = bitcast <2 x i64>* %332 to <4 x i32>*
  %340 = bitcast <2 x i64>* %330 to <4 x i32>*
  %341 = bitcast <2 x i64>* %331 to <4 x i32>*
  %342 = bitcast <2 x i64>* %328 to <4 x i32>*
  %343 = bitcast <2 x i64>* %329 to <4 x i32>*
  br label %402

344:                                              ; preds = %299
  %345 = bitcast <2 x i64> %323 to <8 x i16>
  %346 = bitcast <2 x i64> %324 to <8 x i16>
  %347 = bitcast <2 x i64> %325 to <8 x i16>
  %348 = bitcast <2 x i64> %326 to <8 x i16>
  %349 = bitcast <2 x i64> %327 to <8 x i16>
  %350 = bitcast <2 x i64> %306 to <8 x i16>
  %351 = bitcast <2 x i64> %305 to <8 x i16>
  %352 = bitcast <2 x i64> %334 to <8 x i16>
  %353 = shufflevector <8 x i16> %351, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %354 = shufflevector <8 x i16> %353, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %355 = bitcast <8 x i16> %354 to <4 x i32>
  %356 = shufflevector <4 x i32> %355, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %357 = bitcast <2 x i64>* %266 to <4 x i32>*
  store <4 x i32> %356, <4 x i32>* %357, align 16
  %358 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %359 = shufflevector <8 x i16> %350, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %360 = shufflevector <8 x i16> %359, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %361 = bitcast <8 x i16> %360 to <4 x i32>
  %362 = shufflevector <4 x i32> %361, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %363 = bitcast <2 x i64>* %358 to <4 x i32>*
  store <4 x i32> %362, <4 x i32>* %363, align 16
  %364 = shufflevector <8 x i16> %349, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %365 = shufflevector <8 x i16> %364, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %366 = bitcast <8 x i16> %365 to <4 x i32>
  %367 = shufflevector <4 x i32> %366, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %368 = bitcast <2 x i64>* %328 to <4 x i32>*
  store <4 x i32> %367, <4 x i32>* %368, align 16
  %369 = shufflevector <8 x i16> %348, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %370 = shufflevector <8 x i16> %369, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %371 = bitcast <8 x i16> %370 to <4 x i32>
  %372 = shufflevector <4 x i32> %371, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %373 = bitcast <2 x i64>* %329 to <4 x i32>*
  store <4 x i32> %372, <4 x i32>* %373, align 16
  %374 = shufflevector <8 x i16> %347, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %375 = shufflevector <8 x i16> %374, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %376 = bitcast <8 x i16> %375 to <4 x i32>
  %377 = shufflevector <4 x i32> %376, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %378 = bitcast <2 x i64>* %330 to <4 x i32>*
  store <4 x i32> %377, <4 x i32>* %378, align 16
  %379 = shufflevector <8 x i16> %346, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %380 = shufflevector <8 x i16> %379, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %381 = bitcast <8 x i16> %380 to <4 x i32>
  %382 = shufflevector <4 x i32> %381, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %383 = bitcast <2 x i64>* %331 to <4 x i32>*
  store <4 x i32> %382, <4 x i32>* %383, align 16
  %384 = shufflevector <8 x i16> %345, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %385 = shufflevector <8 x i16> %384, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %386 = bitcast <8 x i16> %385 to <4 x i32>
  %387 = shufflevector <4 x i32> %386, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %388 = bitcast <2 x i64>* %332 to <4 x i32>*
  store <4 x i32> %387, <4 x i32>* %388, align 16
  %389 = shufflevector <8 x i16> %352, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %390 = shufflevector <8 x i16> %389, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %391 = bitcast <8 x i16> %390 to <4 x i32>
  %392 = shufflevector <4 x i32> %391, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %393 = bitcast <2 x i64>* %335 to <4 x i32>*
  store <4 x i32> %392, <4 x i32>* %393, align 16
  %394 = bitcast <4 x i32> %377 to <2 x i64>
  %395 = bitcast <4 x i32> %382 to <2 x i64>
  %396 = bitcast <4 x i32> %387 to <2 x i64>
  %397 = bitcast <4 x i32> %392 to <2 x i64>
  %398 = bitcast <4 x i32> %372 to <2 x i64>
  %399 = bitcast <4 x i32> %367 to <2 x i64>
  %400 = bitcast <4 x i32> %362 to <2 x i64>
  %401 = bitcast <4 x i32> %356 to <2 x i64>
  br label %402

402:                                              ; preds = %336, %344
  %403 = phi <4 x i32>* [ %343, %336 ], [ %373, %344 ]
  %404 = phi <4 x i32>* [ %342, %336 ], [ %368, %344 ]
  %405 = phi <4 x i32>* [ %341, %336 ], [ %383, %344 ]
  %406 = phi <4 x i32>* [ %340, %336 ], [ %378, %344 ]
  %407 = phi <4 x i32>* [ %339, %336 ], [ %388, %344 ]
  %408 = phi <4 x i32>* [ %338, %336 ], [ %357, %344 ]
  %409 = phi <4 x i32>* [ %337, %336 ], [ %393, %344 ]
  %410 = phi <2 x i64> [ %305, %336 ], [ %401, %344 ]
  %411 = phi <2 x i64> [ %306, %336 ], [ %400, %344 ]
  %412 = phi <2 x i64> [ %327, %336 ], [ %399, %344 ]
  %413 = phi <2 x i64> [ %326, %336 ], [ %398, %344 ]
  %414 = phi <2 x i64> [ %334, %336 ], [ %397, %344 ]
  %415 = phi <2 x i64> [ %323, %336 ], [ %396, %344 ]
  %416 = phi <2 x i64> [ %324, %336 ], [ %395, %344 ]
  %417 = phi <2 x i64> [ %325, %336 ], [ %394, %344 ]
  %418 = shufflevector <2 x i64> %417, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %419 = bitcast <2 x i64> %417 to <8 x i16>
  %420 = shufflevector <8 x i16> %419, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %421 = sext <4 x i16> %420 to <4 x i32>
  %422 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 40
  %423 = bitcast <2 x i64>* %422 to <4 x i32>*
  %424 = bitcast <2 x i64> %418 to <8 x i16>
  %425 = shufflevector <8 x i16> %424, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %426 = sext <4 x i16> %425 to <4 x i32>
  %427 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 41
  %428 = bitcast <2 x i64>* %427 to <4 x i32>*
  %429 = shufflevector <2 x i64> %416, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %430 = bitcast <2 x i64> %416 to <8 x i16>
  %431 = shufflevector <8 x i16> %430, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %432 = sext <4 x i16> %431 to <4 x i32>
  %433 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 42
  %434 = bitcast <2 x i64>* %433 to <4 x i32>*
  %435 = bitcast <2 x i64> %429 to <8 x i16>
  %436 = shufflevector <8 x i16> %435, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %437 = sext <4 x i16> %436 to <4 x i32>
  %438 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 43
  %439 = bitcast <2 x i64>* %438 to <4 x i32>*
  %440 = shufflevector <2 x i64> %415, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %441 = bitcast <2 x i64> %415 to <8 x i16>
  %442 = shufflevector <8 x i16> %441, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %443 = sext <4 x i16> %442 to <4 x i32>
  %444 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 44
  %445 = bitcast <2 x i64>* %444 to <4 x i32>*
  %446 = bitcast <2 x i64> %440 to <8 x i16>
  %447 = shufflevector <8 x i16> %446, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %448 = sext <4 x i16> %447 to <4 x i32>
  %449 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 45
  %450 = bitcast <2 x i64>* %449 to <4 x i32>*
  %451 = shufflevector <2 x i64> %414, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %452 = bitcast <2 x i64> %414 to <8 x i16>
  %453 = shufflevector <8 x i16> %452, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %454 = sext <4 x i16> %453 to <4 x i32>
  %455 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 46
  %456 = bitcast <2 x i64>* %455 to <4 x i32>*
  %457 = bitcast <2 x i64> %451 to <8 x i16>
  %458 = shufflevector <8 x i16> %457, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %459 = sext <4 x i16> %458 to <4 x i32>
  %460 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 47
  %461 = bitcast <2 x i64>* %460 to <4 x i32>*
  %462 = shufflevector <2 x i64> %413, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %463 = bitcast <2 x i64> %413 to <8 x i16>
  %464 = shufflevector <8 x i16> %463, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %465 = sext <4 x i16> %464 to <4 x i32>
  %466 = bitcast <2 x i64> %462 to <8 x i16>
  %467 = shufflevector <8 x i16> %466, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %468 = sext <4 x i16> %467 to <4 x i32>
  %469 = shufflevector <2 x i64> %412, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %470 = bitcast <2 x i64> %412 to <8 x i16>
  %471 = shufflevector <8 x i16> %470, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %472 = sext <4 x i16> %471 to <4 x i32>
  %473 = bitcast <2 x i64> %469 to <8 x i16>
  %474 = shufflevector <8 x i16> %473, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %475 = sext <4 x i16> %474 to <4 x i32>
  %476 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 33
  %477 = shufflevector <2 x i64> %411, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %478 = bitcast <2 x i64> %411 to <8 x i16>
  %479 = shufflevector <8 x i16> %478, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %480 = sext <4 x i16> %479 to <4 x i32>
  %481 = bitcast <2 x i64> %477 to <8 x i16>
  %482 = shufflevector <8 x i16> %481, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %483 = sext <4 x i16> %482 to <4 x i32>
  %484 = shufflevector <2 x i64> %410, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %485 = bitcast <2 x i64> %410 to <8 x i16>
  %486 = shufflevector <8 x i16> %485, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %487 = sext <4 x i16> %486 to <4 x i32>
  %488 = bitcast <2 x i64> %484 to <8 x i16>
  %489 = shufflevector <8 x i16> %488, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %490 = sext <4 x i16> %489 to <4 x i32>
  %491 = bitcast <2 x i64>* %476 to <4 x i32>*
  %492 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %487, i32 %5) #8
  store <4 x i32> %492, <4 x i32>* %408, align 16
  %493 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %490, i32 %5) #8
  store <4 x i32> %493, <4 x i32>* %491, align 16
  %494 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %480, i32 %5) #8
  store <4 x i32> %494, <4 x i32>* %404, align 16
  %495 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %483, i32 %5) #8
  store <4 x i32> %495, <4 x i32>* %403, align 16
  %496 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %472, i32 %5) #8
  store <4 x i32> %496, <4 x i32>* %406, align 16
  %497 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %475, i32 %5) #8
  store <4 x i32> %497, <4 x i32>* %405, align 16
  %498 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %465, i32 %5) #8
  store <4 x i32> %498, <4 x i32>* %407, align 16
  %499 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %468, i32 %5) #8
  store <4 x i32> %499, <4 x i32>* %409, align 16
  %500 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %421, i32 %5) #8
  store <4 x i32> %500, <4 x i32>* %423, align 16
  %501 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %426, i32 %5) #8
  store <4 x i32> %501, <4 x i32>* %428, align 16
  %502 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %432, i32 %5) #8
  store <4 x i32> %502, <4 x i32>* %434, align 16
  %503 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %437, i32 %5) #8
  store <4 x i32> %503, <4 x i32>* %439, align 16
  %504 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %443, i32 %5) #8
  store <4 x i32> %504, <4 x i32>* %445, align 16
  %505 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %448, i32 %5) #8
  store <4 x i32> %505, <4 x i32>* %450, align 16
  %506 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %454, i32 %5) #8
  store <4 x i32> %506, <4 x i32>* %456, align 16
  %507 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %459, i32 %5) #8
  store <4 x i32> %507, <4 x i32>* %461, align 16
  %508 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 16
  br i1 %14, label %509, label %525

509:                                              ; preds = %402
  %510 = bitcast i16* %21 to <2 x i64>*
  %511 = load <2 x i64>, <2 x i64>* %510, align 16
  store <2 x i64> %511, <2 x i64>* %508, align 16
  %512 = sext i32 %2 to i64
  %513 = getelementptr inbounds i16, i16* %21, i64 %512
  %514 = bitcast i16* %513 to <2 x i64>*
  %515 = load <2 x i64>, <2 x i64>* %514, align 16
  %516 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  store <2 x i64> %515, <2 x i64>* %516, align 16
  %517 = shl nsw i32 %2, 1
  %518 = mul nsw i32 %2, 3
  %519 = shl nsw i32 %2, 2
  %520 = mul nsw i32 %2, 5
  %521 = mul nsw i32 %2, 6
  %522 = mul nsw i32 %2, 7
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds i16, i16* %21, i64 %523
  br label %541

525:                                              ; preds = %402
  %526 = mul nsw i32 %2, 7
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds i16, i16* %21, i64 %527
  %529 = bitcast i16* %528 to <2 x i64>*
  %530 = load <2 x i64>, <2 x i64>* %529, align 16
  store <2 x i64> %530, <2 x i64>* %508, align 16
  %531 = mul nsw i32 %2, 6
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds i16, i16* %21, i64 %532
  %534 = bitcast i16* %533 to <2 x i64>*
  %535 = load <2 x i64>, <2 x i64>* %534, align 16
  %536 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  store <2 x i64> %535, <2 x i64>* %536, align 16
  %537 = mul nsw i32 %2, 5
  %538 = shl nsw i32 %2, 2
  %539 = mul nsw i32 %2, 3
  %540 = shl nsw i32 %2, 1
  br label %541

541:                                              ; preds = %525, %509
  %542 = phi i32 [ %537, %525 ], [ %517, %509 ]
  %543 = phi i32 [ %538, %525 ], [ %518, %509 ]
  %544 = phi i32 [ %539, %525 ], [ %519, %509 ]
  %545 = phi i32 [ %540, %525 ], [ %520, %509 ]
  %546 = phi i32 [ %2, %525 ], [ %521, %509 ]
  %547 = phi <2 x i64> [ %530, %525 ], [ %511, %509 ]
  %548 = phi <2 x i64> [ %535, %525 ], [ %515, %509 ]
  %549 = phi i16* [ %21, %525 ], [ %524, %509 ]
  %550 = sext i32 %546 to i64
  %551 = sext i32 %545 to i64
  %552 = sext i32 %544 to i64
  %553 = sext i32 %543 to i64
  %554 = sext i32 %542 to i64
  %555 = getelementptr inbounds i16, i16* %21, i64 %550
  %556 = getelementptr inbounds i16, i16* %21, i64 %551
  %557 = getelementptr inbounds i16, i16* %21, i64 %552
  %558 = getelementptr inbounds i16, i16* %21, i64 %553
  %559 = getelementptr inbounds i16, i16* %21, i64 %554
  %560 = bitcast i16* %555 to <2 x i64>*
  %561 = bitcast i16* %556 to <2 x i64>*
  %562 = bitcast i16* %557 to <2 x i64>*
  %563 = bitcast i16* %558 to <2 x i64>*
  %564 = bitcast i16* %559 to <2 x i64>*
  %565 = load <2 x i64>, <2 x i64>* %560, align 16
  %566 = load <2 x i64>, <2 x i64>* %561, align 16
  %567 = load <2 x i64>, <2 x i64>* %562, align 16
  %568 = load <2 x i64>, <2 x i64>* %563, align 16
  %569 = load <2 x i64>, <2 x i64>* %564, align 16
  %570 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 18
  store <2 x i64> %569, <2 x i64>* %570, align 16
  %571 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 19
  store <2 x i64> %568, <2 x i64>* %571, align 16
  %572 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 20
  store <2 x i64> %567, <2 x i64>* %572, align 16
  %573 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 21
  store <2 x i64> %566, <2 x i64>* %573, align 16
  %574 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 22
  store <2 x i64> %565, <2 x i64>* %574, align 16
  %575 = bitcast i16* %549 to <2 x i64>*
  %576 = load <2 x i64>, <2 x i64>* %575, align 16
  %577 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 23
  store <2 x i64> %576, <2 x i64>* %577, align 16
  br i1 %19, label %578, label %586

578:                                              ; preds = %541
  %579 = bitcast <2 x i64>* %577 to <4 x i32>*
  %580 = bitcast <2 x i64>* %508 to <4 x i32>*
  %581 = bitcast <2 x i64>* %574 to <4 x i32>*
  %582 = bitcast <2 x i64>* %572 to <4 x i32>*
  %583 = bitcast <2 x i64>* %573 to <4 x i32>*
  %584 = bitcast <2 x i64>* %570 to <4 x i32>*
  %585 = bitcast <2 x i64>* %571 to <4 x i32>*
  br label %644

586:                                              ; preds = %541
  %587 = bitcast <2 x i64> %565 to <8 x i16>
  %588 = bitcast <2 x i64> %566 to <8 x i16>
  %589 = bitcast <2 x i64> %567 to <8 x i16>
  %590 = bitcast <2 x i64> %568 to <8 x i16>
  %591 = bitcast <2 x i64> %569 to <8 x i16>
  %592 = bitcast <2 x i64> %548 to <8 x i16>
  %593 = bitcast <2 x i64> %547 to <8 x i16>
  %594 = bitcast <2 x i64> %576 to <8 x i16>
  %595 = shufflevector <8 x i16> %593, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %596 = shufflevector <8 x i16> %595, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %597 = bitcast <8 x i16> %596 to <4 x i32>
  %598 = shufflevector <4 x i32> %597, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %599 = bitcast <2 x i64>* %508 to <4 x i32>*
  store <4 x i32> %598, <4 x i32>* %599, align 16
  %600 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %601 = shufflevector <8 x i16> %592, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %602 = shufflevector <8 x i16> %601, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %603 = bitcast <8 x i16> %602 to <4 x i32>
  %604 = shufflevector <4 x i32> %603, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %605 = bitcast <2 x i64>* %600 to <4 x i32>*
  store <4 x i32> %604, <4 x i32>* %605, align 16
  %606 = shufflevector <8 x i16> %591, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %607 = shufflevector <8 x i16> %606, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %608 = bitcast <8 x i16> %607 to <4 x i32>
  %609 = shufflevector <4 x i32> %608, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %610 = bitcast <2 x i64>* %570 to <4 x i32>*
  store <4 x i32> %609, <4 x i32>* %610, align 16
  %611 = shufflevector <8 x i16> %590, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %612 = shufflevector <8 x i16> %611, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %613 = bitcast <8 x i16> %612 to <4 x i32>
  %614 = shufflevector <4 x i32> %613, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %615 = bitcast <2 x i64>* %571 to <4 x i32>*
  store <4 x i32> %614, <4 x i32>* %615, align 16
  %616 = shufflevector <8 x i16> %589, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %617 = shufflevector <8 x i16> %616, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %618 = bitcast <8 x i16> %617 to <4 x i32>
  %619 = shufflevector <4 x i32> %618, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %620 = bitcast <2 x i64>* %572 to <4 x i32>*
  store <4 x i32> %619, <4 x i32>* %620, align 16
  %621 = shufflevector <8 x i16> %588, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %622 = shufflevector <8 x i16> %621, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %623 = bitcast <8 x i16> %622 to <4 x i32>
  %624 = shufflevector <4 x i32> %623, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %625 = bitcast <2 x i64>* %573 to <4 x i32>*
  store <4 x i32> %624, <4 x i32>* %625, align 16
  %626 = shufflevector <8 x i16> %587, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %627 = shufflevector <8 x i16> %626, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %628 = bitcast <8 x i16> %627 to <4 x i32>
  %629 = shufflevector <4 x i32> %628, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %630 = bitcast <2 x i64>* %574 to <4 x i32>*
  store <4 x i32> %629, <4 x i32>* %630, align 16
  %631 = shufflevector <8 x i16> %594, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %632 = shufflevector <8 x i16> %631, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %633 = bitcast <8 x i16> %632 to <4 x i32>
  %634 = shufflevector <4 x i32> %633, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %635 = bitcast <2 x i64>* %577 to <4 x i32>*
  store <4 x i32> %634, <4 x i32>* %635, align 16
  %636 = bitcast <4 x i32> %619 to <2 x i64>
  %637 = bitcast <4 x i32> %624 to <2 x i64>
  %638 = bitcast <4 x i32> %629 to <2 x i64>
  %639 = bitcast <4 x i32> %634 to <2 x i64>
  %640 = bitcast <4 x i32> %614 to <2 x i64>
  %641 = bitcast <4 x i32> %609 to <2 x i64>
  %642 = bitcast <4 x i32> %604 to <2 x i64>
  %643 = bitcast <4 x i32> %598 to <2 x i64>
  br label %644

644:                                              ; preds = %578, %586
  %645 = phi <4 x i32>* [ %585, %578 ], [ %615, %586 ]
  %646 = phi <4 x i32>* [ %584, %578 ], [ %610, %586 ]
  %647 = phi <4 x i32>* [ %583, %578 ], [ %625, %586 ]
  %648 = phi <4 x i32>* [ %582, %578 ], [ %620, %586 ]
  %649 = phi <4 x i32>* [ %581, %578 ], [ %630, %586 ]
  %650 = phi <4 x i32>* [ %580, %578 ], [ %599, %586 ]
  %651 = phi <4 x i32>* [ %579, %578 ], [ %635, %586 ]
  %652 = phi <2 x i64> [ %547, %578 ], [ %643, %586 ]
  %653 = phi <2 x i64> [ %548, %578 ], [ %642, %586 ]
  %654 = phi <2 x i64> [ %569, %578 ], [ %641, %586 ]
  %655 = phi <2 x i64> [ %568, %578 ], [ %640, %586 ]
  %656 = phi <2 x i64> [ %576, %578 ], [ %639, %586 ]
  %657 = phi <2 x i64> [ %565, %578 ], [ %638, %586 ]
  %658 = phi <2 x i64> [ %566, %578 ], [ %637, %586 ]
  %659 = phi <2 x i64> [ %567, %578 ], [ %636, %586 ]
  %660 = shufflevector <2 x i64> %659, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %661 = bitcast <2 x i64> %659 to <8 x i16>
  %662 = shufflevector <8 x i16> %661, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %663 = sext <4 x i16> %662 to <4 x i32>
  %664 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 24
  %665 = bitcast <2 x i64>* %664 to <4 x i32>*
  %666 = bitcast <2 x i64> %660 to <8 x i16>
  %667 = shufflevector <8 x i16> %666, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %668 = sext <4 x i16> %667 to <4 x i32>
  %669 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 25
  %670 = bitcast <2 x i64>* %669 to <4 x i32>*
  %671 = shufflevector <2 x i64> %658, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %672 = bitcast <2 x i64> %658 to <8 x i16>
  %673 = shufflevector <8 x i16> %672, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %674 = sext <4 x i16> %673 to <4 x i32>
  %675 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 26
  %676 = bitcast <2 x i64>* %675 to <4 x i32>*
  %677 = bitcast <2 x i64> %671 to <8 x i16>
  %678 = shufflevector <8 x i16> %677, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %679 = sext <4 x i16> %678 to <4 x i32>
  %680 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 27
  %681 = bitcast <2 x i64>* %680 to <4 x i32>*
  %682 = shufflevector <2 x i64> %657, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %683 = bitcast <2 x i64> %657 to <8 x i16>
  %684 = shufflevector <8 x i16> %683, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %685 = sext <4 x i16> %684 to <4 x i32>
  %686 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 28
  %687 = bitcast <2 x i64>* %686 to <4 x i32>*
  %688 = bitcast <2 x i64> %682 to <8 x i16>
  %689 = shufflevector <8 x i16> %688, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %690 = sext <4 x i16> %689 to <4 x i32>
  %691 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 29
  %692 = bitcast <2 x i64>* %691 to <4 x i32>*
  %693 = shufflevector <2 x i64> %656, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %694 = bitcast <2 x i64> %656 to <8 x i16>
  %695 = shufflevector <8 x i16> %694, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %696 = sext <4 x i16> %695 to <4 x i32>
  %697 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 30
  %698 = bitcast <2 x i64>* %697 to <4 x i32>*
  %699 = bitcast <2 x i64> %693 to <8 x i16>
  %700 = shufflevector <8 x i16> %699, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %701 = sext <4 x i16> %700 to <4 x i32>
  %702 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 31
  %703 = bitcast <2 x i64>* %702 to <4 x i32>*
  %704 = shufflevector <2 x i64> %655, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %705 = bitcast <2 x i64> %655 to <8 x i16>
  %706 = shufflevector <8 x i16> %705, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %707 = sext <4 x i16> %706 to <4 x i32>
  %708 = bitcast <2 x i64> %704 to <8 x i16>
  %709 = shufflevector <8 x i16> %708, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %710 = sext <4 x i16> %709 to <4 x i32>
  %711 = shufflevector <2 x i64> %654, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %712 = bitcast <2 x i64> %654 to <8 x i16>
  %713 = shufflevector <8 x i16> %712, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %714 = sext <4 x i16> %713 to <4 x i32>
  %715 = bitcast <2 x i64> %711 to <8 x i16>
  %716 = shufflevector <8 x i16> %715, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %717 = sext <4 x i16> %716 to <4 x i32>
  %718 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 17
  %719 = shufflevector <2 x i64> %653, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %720 = bitcast <2 x i64> %653 to <8 x i16>
  %721 = shufflevector <8 x i16> %720, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %722 = sext <4 x i16> %721 to <4 x i32>
  %723 = bitcast <2 x i64> %719 to <8 x i16>
  %724 = shufflevector <8 x i16> %723, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %725 = sext <4 x i16> %724 to <4 x i32>
  %726 = shufflevector <2 x i64> %652, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %727 = bitcast <2 x i64> %652 to <8 x i16>
  %728 = shufflevector <8 x i16> %727, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %729 = sext <4 x i16> %728 to <4 x i32>
  %730 = bitcast <2 x i64> %726 to <8 x i16>
  %731 = shufflevector <8 x i16> %730, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %732 = sext <4 x i16> %731 to <4 x i32>
  %733 = bitcast <2 x i64>* %718 to <4 x i32>*
  %734 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %729, i32 %5) #8
  store <4 x i32> %734, <4 x i32>* %650, align 16
  %735 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %732, i32 %5) #8
  store <4 x i32> %735, <4 x i32>* %733, align 16
  %736 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %722, i32 %5) #8
  store <4 x i32> %736, <4 x i32>* %646, align 16
  %737 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %725, i32 %5) #8
  store <4 x i32> %737, <4 x i32>* %645, align 16
  %738 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %714, i32 %5) #8
  store <4 x i32> %738, <4 x i32>* %648, align 16
  %739 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %717, i32 %5) #8
  store <4 x i32> %739, <4 x i32>* %647, align 16
  %740 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %707, i32 %5) #8
  store <4 x i32> %740, <4 x i32>* %649, align 16
  %741 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %710, i32 %5) #8
  store <4 x i32> %741, <4 x i32>* %651, align 16
  %742 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %663, i32 %5) #8
  store <4 x i32> %742, <4 x i32>* %665, align 16
  %743 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %668, i32 %5) #8
  store <4 x i32> %743, <4 x i32>* %670, align 16
  %744 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %674, i32 %5) #8
  store <4 x i32> %744, <4 x i32>* %676, align 16
  %745 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %679, i32 %5) #8
  store <4 x i32> %745, <4 x i32>* %681, align 16
  %746 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %685, i32 %5) #8
  store <4 x i32> %746, <4 x i32>* %687, align 16
  %747 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %690, i32 %5) #8
  store <4 x i32> %747, <4 x i32>* %692, align 16
  %748 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %696, i32 %5) #8
  store <4 x i32> %748, <4 x i32>* %698, align 16
  %749 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %701, i32 %5) #8
  store <4 x i32> %749, <4 x i32>* %703, align 16
  %750 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 48
  br i1 %14, label %751, label %767

751:                                              ; preds = %644
  %752 = bitcast i16* %23 to <2 x i64>*
  %753 = load <2 x i64>, <2 x i64>* %752, align 16
  store <2 x i64> %753, <2 x i64>* %750, align 16
  %754 = sext i32 %2 to i64
  %755 = getelementptr inbounds i16, i16* %23, i64 %754
  %756 = bitcast i16* %755 to <2 x i64>*
  %757 = load <2 x i64>, <2 x i64>* %756, align 16
  %758 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  store <2 x i64> %757, <2 x i64>* %758, align 16
  %759 = shl nsw i32 %2, 1
  %760 = mul nsw i32 %2, 3
  %761 = shl nsw i32 %2, 2
  %762 = mul nsw i32 %2, 5
  %763 = mul nsw i32 %2, 6
  %764 = mul nsw i32 %2, 7
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds i16, i16* %23, i64 %765
  br label %783

767:                                              ; preds = %644
  %768 = mul nsw i32 %2, 7
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds i16, i16* %23, i64 %769
  %771 = bitcast i16* %770 to <2 x i64>*
  %772 = load <2 x i64>, <2 x i64>* %771, align 16
  store <2 x i64> %772, <2 x i64>* %750, align 16
  %773 = mul nsw i32 %2, 6
  %774 = sext i32 %773 to i64
  %775 = getelementptr inbounds i16, i16* %23, i64 %774
  %776 = bitcast i16* %775 to <2 x i64>*
  %777 = load <2 x i64>, <2 x i64>* %776, align 16
  %778 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  store <2 x i64> %777, <2 x i64>* %778, align 16
  %779 = mul nsw i32 %2, 5
  %780 = shl nsw i32 %2, 2
  %781 = mul nsw i32 %2, 3
  %782 = shl nsw i32 %2, 1
  br label %783

783:                                              ; preds = %767, %751
  %784 = phi i32 [ %779, %767 ], [ %759, %751 ]
  %785 = phi i32 [ %780, %767 ], [ %760, %751 ]
  %786 = phi i32 [ %781, %767 ], [ %761, %751 ]
  %787 = phi i32 [ %782, %767 ], [ %762, %751 ]
  %788 = phi i32 [ %2, %767 ], [ %763, %751 ]
  %789 = phi <2 x i64> [ %772, %767 ], [ %753, %751 ]
  %790 = phi <2 x i64> [ %777, %767 ], [ %757, %751 ]
  %791 = phi i16* [ %23, %767 ], [ %766, %751 ]
  %792 = sext i32 %788 to i64
  %793 = sext i32 %787 to i64
  %794 = sext i32 %786 to i64
  %795 = sext i32 %785 to i64
  %796 = sext i32 %784 to i64
  %797 = getelementptr inbounds i16, i16* %23, i64 %792
  %798 = getelementptr inbounds i16, i16* %23, i64 %793
  %799 = getelementptr inbounds i16, i16* %23, i64 %794
  %800 = getelementptr inbounds i16, i16* %23, i64 %795
  %801 = getelementptr inbounds i16, i16* %23, i64 %796
  %802 = bitcast i16* %797 to <2 x i64>*
  %803 = bitcast i16* %798 to <2 x i64>*
  %804 = bitcast i16* %799 to <2 x i64>*
  %805 = bitcast i16* %800 to <2 x i64>*
  %806 = bitcast i16* %801 to <2 x i64>*
  %807 = load <2 x i64>, <2 x i64>* %802, align 16
  %808 = load <2 x i64>, <2 x i64>* %803, align 16
  %809 = load <2 x i64>, <2 x i64>* %804, align 16
  %810 = load <2 x i64>, <2 x i64>* %805, align 16
  %811 = load <2 x i64>, <2 x i64>* %806, align 16
  %812 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 50
  store <2 x i64> %811, <2 x i64>* %812, align 16
  %813 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 51
  store <2 x i64> %810, <2 x i64>* %813, align 16
  %814 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 52
  store <2 x i64> %809, <2 x i64>* %814, align 16
  %815 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 53
  store <2 x i64> %808, <2 x i64>* %815, align 16
  %816 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 54
  store <2 x i64> %807, <2 x i64>* %816, align 16
  %817 = bitcast i16* %791 to <2 x i64>*
  %818 = load <2 x i64>, <2 x i64>* %817, align 16
  %819 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 55
  store <2 x i64> %818, <2 x i64>* %819, align 16
  br i1 %19, label %820, label %828

820:                                              ; preds = %783
  %821 = bitcast <2 x i64>* %819 to <4 x i32>*
  %822 = bitcast <2 x i64>* %750 to <4 x i32>*
  %823 = bitcast <2 x i64>* %816 to <4 x i32>*
  %824 = bitcast <2 x i64>* %814 to <4 x i32>*
  %825 = bitcast <2 x i64>* %815 to <4 x i32>*
  %826 = bitcast <2 x i64>* %812 to <4 x i32>*
  %827 = bitcast <2 x i64>* %813 to <4 x i32>*
  br label %886

828:                                              ; preds = %783
  %829 = bitcast <2 x i64> %807 to <8 x i16>
  %830 = bitcast <2 x i64> %808 to <8 x i16>
  %831 = bitcast <2 x i64> %809 to <8 x i16>
  %832 = bitcast <2 x i64> %810 to <8 x i16>
  %833 = bitcast <2 x i64> %811 to <8 x i16>
  %834 = bitcast <2 x i64> %790 to <8 x i16>
  %835 = bitcast <2 x i64> %789 to <8 x i16>
  %836 = bitcast <2 x i64> %818 to <8 x i16>
  %837 = shufflevector <8 x i16> %835, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %838 = shufflevector <8 x i16> %837, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %839 = bitcast <8 x i16> %838 to <4 x i32>
  %840 = shufflevector <4 x i32> %839, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %841 = bitcast <2 x i64>* %750 to <4 x i32>*
  store <4 x i32> %840, <4 x i32>* %841, align 16
  %842 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %843 = shufflevector <8 x i16> %834, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %844 = shufflevector <8 x i16> %843, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %845 = bitcast <8 x i16> %844 to <4 x i32>
  %846 = shufflevector <4 x i32> %845, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %847 = bitcast <2 x i64>* %842 to <4 x i32>*
  store <4 x i32> %846, <4 x i32>* %847, align 16
  %848 = shufflevector <8 x i16> %833, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %849 = shufflevector <8 x i16> %848, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %850 = bitcast <8 x i16> %849 to <4 x i32>
  %851 = shufflevector <4 x i32> %850, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %852 = bitcast <2 x i64>* %812 to <4 x i32>*
  store <4 x i32> %851, <4 x i32>* %852, align 16
  %853 = shufflevector <8 x i16> %832, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %854 = shufflevector <8 x i16> %853, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %855 = bitcast <8 x i16> %854 to <4 x i32>
  %856 = shufflevector <4 x i32> %855, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %857 = bitcast <2 x i64>* %813 to <4 x i32>*
  store <4 x i32> %856, <4 x i32>* %857, align 16
  %858 = shufflevector <8 x i16> %831, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %859 = shufflevector <8 x i16> %858, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %860 = bitcast <8 x i16> %859 to <4 x i32>
  %861 = shufflevector <4 x i32> %860, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %862 = bitcast <2 x i64>* %814 to <4 x i32>*
  store <4 x i32> %861, <4 x i32>* %862, align 16
  %863 = shufflevector <8 x i16> %830, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %864 = shufflevector <8 x i16> %863, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %865 = bitcast <8 x i16> %864 to <4 x i32>
  %866 = shufflevector <4 x i32> %865, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %867 = bitcast <2 x i64>* %815 to <4 x i32>*
  store <4 x i32> %866, <4 x i32>* %867, align 16
  %868 = shufflevector <8 x i16> %829, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %869 = shufflevector <8 x i16> %868, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %870 = bitcast <8 x i16> %869 to <4 x i32>
  %871 = shufflevector <4 x i32> %870, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %872 = bitcast <2 x i64>* %816 to <4 x i32>*
  store <4 x i32> %871, <4 x i32>* %872, align 16
  %873 = shufflevector <8 x i16> %836, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %874 = shufflevector <8 x i16> %873, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %875 = bitcast <8 x i16> %874 to <4 x i32>
  %876 = shufflevector <4 x i32> %875, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %877 = bitcast <2 x i64>* %819 to <4 x i32>*
  store <4 x i32> %876, <4 x i32>* %877, align 16
  %878 = bitcast <4 x i32> %861 to <2 x i64>
  %879 = bitcast <4 x i32> %866 to <2 x i64>
  %880 = bitcast <4 x i32> %871 to <2 x i64>
  %881 = bitcast <4 x i32> %876 to <2 x i64>
  %882 = bitcast <4 x i32> %856 to <2 x i64>
  %883 = bitcast <4 x i32> %851 to <2 x i64>
  %884 = bitcast <4 x i32> %846 to <2 x i64>
  %885 = bitcast <4 x i32> %840 to <2 x i64>
  br label %886

886:                                              ; preds = %820, %828
  %887 = phi <4 x i32>* [ %827, %820 ], [ %857, %828 ]
  %888 = phi <4 x i32>* [ %826, %820 ], [ %852, %828 ]
  %889 = phi <4 x i32>* [ %825, %820 ], [ %867, %828 ]
  %890 = phi <4 x i32>* [ %824, %820 ], [ %862, %828 ]
  %891 = phi <4 x i32>* [ %823, %820 ], [ %872, %828 ]
  %892 = phi <4 x i32>* [ %822, %820 ], [ %841, %828 ]
  %893 = phi <4 x i32>* [ %821, %820 ], [ %877, %828 ]
  %894 = phi <2 x i64> [ %789, %820 ], [ %885, %828 ]
  %895 = phi <2 x i64> [ %790, %820 ], [ %884, %828 ]
  %896 = phi <2 x i64> [ %811, %820 ], [ %883, %828 ]
  %897 = phi <2 x i64> [ %810, %820 ], [ %882, %828 ]
  %898 = phi <2 x i64> [ %818, %820 ], [ %881, %828 ]
  %899 = phi <2 x i64> [ %807, %820 ], [ %880, %828 ]
  %900 = phi <2 x i64> [ %808, %820 ], [ %879, %828 ]
  %901 = phi <2 x i64> [ %809, %820 ], [ %878, %828 ]
  %902 = shufflevector <2 x i64> %901, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %903 = bitcast <2 x i64> %901 to <8 x i16>
  %904 = shufflevector <8 x i16> %903, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %905 = sext <4 x i16> %904 to <4 x i32>
  %906 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 56
  %907 = bitcast <2 x i64>* %906 to <4 x i32>*
  %908 = bitcast <2 x i64> %902 to <8 x i16>
  %909 = shufflevector <8 x i16> %908, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %910 = sext <4 x i16> %909 to <4 x i32>
  %911 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 57
  %912 = bitcast <2 x i64>* %911 to <4 x i32>*
  %913 = shufflevector <2 x i64> %900, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %914 = bitcast <2 x i64> %900 to <8 x i16>
  %915 = shufflevector <8 x i16> %914, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %916 = sext <4 x i16> %915 to <4 x i32>
  %917 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 58
  %918 = bitcast <2 x i64>* %917 to <4 x i32>*
  %919 = bitcast <2 x i64> %913 to <8 x i16>
  %920 = shufflevector <8 x i16> %919, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %921 = sext <4 x i16> %920 to <4 x i32>
  %922 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 59
  %923 = bitcast <2 x i64>* %922 to <4 x i32>*
  %924 = shufflevector <2 x i64> %899, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %925 = bitcast <2 x i64> %899 to <8 x i16>
  %926 = shufflevector <8 x i16> %925, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %927 = sext <4 x i16> %926 to <4 x i32>
  %928 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 60
  %929 = bitcast <2 x i64>* %928 to <4 x i32>*
  %930 = bitcast <2 x i64> %924 to <8 x i16>
  %931 = shufflevector <8 x i16> %930, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %932 = sext <4 x i16> %931 to <4 x i32>
  %933 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 61
  %934 = bitcast <2 x i64>* %933 to <4 x i32>*
  %935 = shufflevector <2 x i64> %898, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %936 = bitcast <2 x i64> %898 to <8 x i16>
  %937 = shufflevector <8 x i16> %936, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %938 = sext <4 x i16> %937 to <4 x i32>
  %939 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 62
  %940 = bitcast <2 x i64>* %939 to <4 x i32>*
  %941 = bitcast <2 x i64> %935 to <8 x i16>
  %942 = shufflevector <8 x i16> %941, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %943 = sext <4 x i16> %942 to <4 x i32>
  %944 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 63
  %945 = bitcast <2 x i64>* %944 to <4 x i32>*
  %946 = shufflevector <2 x i64> %897, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %947 = bitcast <2 x i64> %897 to <8 x i16>
  %948 = shufflevector <8 x i16> %947, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %949 = sext <4 x i16> %948 to <4 x i32>
  %950 = bitcast <2 x i64> %946 to <8 x i16>
  %951 = shufflevector <8 x i16> %950, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %952 = sext <4 x i16> %951 to <4 x i32>
  %953 = shufflevector <2 x i64> %896, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %954 = bitcast <2 x i64> %896 to <8 x i16>
  %955 = shufflevector <8 x i16> %954, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %956 = sext <4 x i16> %955 to <4 x i32>
  %957 = bitcast <2 x i64> %953 to <8 x i16>
  %958 = shufflevector <8 x i16> %957, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %959 = sext <4 x i16> %958 to <4 x i32>
  %960 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %7, i64 0, i64 49
  %961 = shufflevector <2 x i64> %895, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %962 = bitcast <2 x i64> %895 to <8 x i16>
  %963 = shufflevector <8 x i16> %962, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %964 = sext <4 x i16> %963 to <4 x i32>
  %965 = bitcast <2 x i64> %961 to <8 x i16>
  %966 = shufflevector <8 x i16> %965, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %967 = sext <4 x i16> %966 to <4 x i32>
  %968 = shufflevector <2 x i64> %894, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %969 = bitcast <2 x i64> %894 to <8 x i16>
  %970 = shufflevector <8 x i16> %969, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %971 = sext <4 x i16> %970 to <4 x i32>
  %972 = bitcast <2 x i64> %968 to <8 x i16>
  %973 = shufflevector <8 x i16> %972, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %974 = sext <4 x i16> %973 to <4 x i32>
  %975 = bitcast <2 x i64>* %960 to <4 x i32>*
  %976 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %971, i32 %5) #8
  store <4 x i32> %976, <4 x i32>* %892, align 16
  %977 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %974, i32 %5) #8
  store <4 x i32> %977, <4 x i32>* %975, align 16
  %978 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %964, i32 %5) #8
  store <4 x i32> %978, <4 x i32>* %888, align 16
  %979 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %967, i32 %5) #8
  store <4 x i32> %979, <4 x i32>* %887, align 16
  %980 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %956, i32 %5) #8
  store <4 x i32> %980, <4 x i32>* %890, align 16
  %981 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %959, i32 %5) #8
  store <4 x i32> %981, <4 x i32>* %889, align 16
  %982 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %949, i32 %5) #8
  store <4 x i32> %982, <4 x i32>* %891, align 16
  %983 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %952, i32 %5) #8
  store <4 x i32> %983, <4 x i32>* %893, align 16
  %984 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %905, i32 %5) #8
  store <4 x i32> %984, <4 x i32>* %907, align 16
  %985 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %910, i32 %5) #8
  store <4 x i32> %985, <4 x i32>* %912, align 16
  %986 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %916, i32 %5) #8
  store <4 x i32> %986, <4 x i32>* %918, align 16
  %987 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %921, i32 %5) #8
  store <4 x i32> %987, <4 x i32>* %923, align 16
  %988 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %927, i32 %5) #8
  store <4 x i32> %988, <4 x i32>* %929, align 16
  %989 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %932, i32 %5) #8
  store <4 x i32> %989, <4 x i32>* %934, align 16
  %990 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %938, i32 %5) #8
  store <4 x i32> %990, <4 x i32>* %940, align 16
  %991 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %943, i32 %5) #8
  store <4 x i32> %991, <4 x i32>* %945, align 16
  %992 = load <2 x i64>, <2 x i64>* %24, align 16
  store <2 x i64> %992, <2 x i64>* %1, align 16
  %993 = load <2 x i64>, <2 x i64>* %234, align 16
  %994 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 1
  store <2 x i64> %993, <2 x i64>* %994, align 16
  %995 = load <2 x i64>, <2 x i64>* %508, align 16
  %996 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 2
  store <2 x i64> %995, <2 x i64>* %996, align 16
  %997 = load <2 x i64>, <2 x i64>* %718, align 16
  %998 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 3
  store <2 x i64> %997, <2 x i64>* %998, align 16
  %999 = load <2 x i64>, <2 x i64>* %86, align 16
  %1000 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 4
  store <2 x i64> %999, <2 x i64>* %1000, align 16
  %1001 = load <2 x i64>, <2 x i64>* %87, align 16
  %1002 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 5
  store <2 x i64> %1001, <2 x i64>* %1002, align 16
  %1003 = load <2 x i64>, <2 x i64>* %570, align 16
  %1004 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 6
  store <2 x i64> %1003, <2 x i64>* %1004, align 16
  %1005 = load <2 x i64>, <2 x i64>* %571, align 16
  %1006 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 7
  store <2 x i64> %1005, <2 x i64>* %1006, align 16
  %1007 = load <2 x i64>, <2 x i64>* %88, align 16
  %1008 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 8
  store <2 x i64> %1007, <2 x i64>* %1008, align 16
  %1009 = load <2 x i64>, <2 x i64>* %89, align 16
  %1010 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 9
  store <2 x i64> %1009, <2 x i64>* %1010, align 16
  %1011 = load <2 x i64>, <2 x i64>* %572, align 16
  %1012 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 10
  store <2 x i64> %1011, <2 x i64>* %1012, align 16
  %1013 = load <2 x i64>, <2 x i64>* %573, align 16
  %1014 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 11
  store <2 x i64> %1013, <2 x i64>* %1014, align 16
  %1015 = load <2 x i64>, <2 x i64>* %90, align 16
  %1016 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 12
  store <2 x i64> %1015, <2 x i64>* %1016, align 16
  %1017 = load <2 x i64>, <2 x i64>* %93, align 16
  %1018 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 13
  store <2 x i64> %1017, <2 x i64>* %1018, align 16
  %1019 = load <2 x i64>, <2 x i64>* %574, align 16
  %1020 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 14
  store <2 x i64> %1019, <2 x i64>* %1020, align 16
  %1021 = load <2 x i64>, <2 x i64>* %577, align 16
  %1022 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 15
  store <2 x i64> %1021, <2 x i64>* %1022, align 16
  %1023 = load <2 x i64>, <2 x i64>* %180, align 16
  %1024 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 16
  store <2 x i64> %1023, <2 x i64>* %1024, align 16
  %1025 = load <2 x i64>, <2 x i64>* %185, align 16
  %1026 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 17
  store <2 x i64> %1025, <2 x i64>* %1026, align 16
  %1027 = load <2 x i64>, <2 x i64>* %664, align 16
  %1028 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 18
  store <2 x i64> %1027, <2 x i64>* %1028, align 16
  %1029 = load <2 x i64>, <2 x i64>* %669, align 16
  %1030 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 19
  store <2 x i64> %1029, <2 x i64>* %1030, align 16
  %1031 = load <2 x i64>, <2 x i64>* %191, align 16
  %1032 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 20
  store <2 x i64> %1031, <2 x i64>* %1032, align 16
  %1033 = load <2 x i64>, <2 x i64>* %196, align 16
  %1034 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 21
  store <2 x i64> %1033, <2 x i64>* %1034, align 16
  %1035 = load <2 x i64>, <2 x i64>* %675, align 16
  %1036 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 22
  store <2 x i64> %1035, <2 x i64>* %1036, align 16
  %1037 = load <2 x i64>, <2 x i64>* %680, align 16
  %1038 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 23
  store <2 x i64> %1037, <2 x i64>* %1038, align 16
  %1039 = load <2 x i64>, <2 x i64>* %202, align 16
  %1040 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 24
  store <2 x i64> %1039, <2 x i64>* %1040, align 16
  %1041 = load <2 x i64>, <2 x i64>* %207, align 16
  %1042 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 25
  store <2 x i64> %1041, <2 x i64>* %1042, align 16
  %1043 = load <2 x i64>, <2 x i64>* %686, align 16
  %1044 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 26
  store <2 x i64> %1043, <2 x i64>* %1044, align 16
  %1045 = load <2 x i64>, <2 x i64>* %691, align 16
  %1046 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 27
  store <2 x i64> %1045, <2 x i64>* %1046, align 16
  %1047 = load <2 x i64>, <2 x i64>* %213, align 16
  %1048 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 28
  store <2 x i64> %1047, <2 x i64>* %1048, align 16
  %1049 = load <2 x i64>, <2 x i64>* %218, align 16
  %1050 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 29
  store <2 x i64> %1049, <2 x i64>* %1050, align 16
  %1051 = load <2 x i64>, <2 x i64>* %697, align 16
  %1052 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 30
  store <2 x i64> %1051, <2 x i64>* %1052, align 16
  %1053 = load <2 x i64>, <2 x i64>* %702, align 16
  %1054 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 31
  store <2 x i64> %1053, <2 x i64>* %1054, align 16
  %1055 = load <2 x i64>, <2 x i64>* %266, align 16
  %1056 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 32
  store <2 x i64> %1055, <2 x i64>* %1056, align 16
  %1057 = load <2 x i64>, <2 x i64>* %476, align 16
  %1058 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 33
  store <2 x i64> %1057, <2 x i64>* %1058, align 16
  %1059 = load <2 x i64>, <2 x i64>* %750, align 16
  %1060 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 34
  store <2 x i64> %1059, <2 x i64>* %1060, align 16
  %1061 = load <2 x i64>, <2 x i64>* %960, align 16
  %1062 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 35
  store <2 x i64> %1061, <2 x i64>* %1062, align 16
  %1063 = load <2 x i64>, <2 x i64>* %328, align 16
  %1064 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 36
  store <2 x i64> %1063, <2 x i64>* %1064, align 16
  %1065 = load <2 x i64>, <2 x i64>* %329, align 16
  %1066 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 37
  store <2 x i64> %1065, <2 x i64>* %1066, align 16
  %1067 = load <2 x i64>, <2 x i64>* %812, align 16
  %1068 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 38
  store <2 x i64> %1067, <2 x i64>* %1068, align 16
  %1069 = load <2 x i64>, <2 x i64>* %813, align 16
  %1070 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 39
  store <2 x i64> %1069, <2 x i64>* %1070, align 16
  %1071 = load <2 x i64>, <2 x i64>* %330, align 16
  %1072 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 40
  store <2 x i64> %1071, <2 x i64>* %1072, align 16
  %1073 = load <2 x i64>, <2 x i64>* %331, align 16
  %1074 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 41
  store <2 x i64> %1073, <2 x i64>* %1074, align 16
  %1075 = load <2 x i64>, <2 x i64>* %814, align 16
  %1076 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 42
  store <2 x i64> %1075, <2 x i64>* %1076, align 16
  %1077 = load <2 x i64>, <2 x i64>* %815, align 16
  %1078 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 43
  store <2 x i64> %1077, <2 x i64>* %1078, align 16
  %1079 = load <2 x i64>, <2 x i64>* %332, align 16
  %1080 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 44
  store <2 x i64> %1079, <2 x i64>* %1080, align 16
  %1081 = load <2 x i64>, <2 x i64>* %335, align 16
  %1082 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 45
  store <2 x i64> %1081, <2 x i64>* %1082, align 16
  %1083 = load <2 x i64>, <2 x i64>* %816, align 16
  %1084 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 46
  store <2 x i64> %1083, <2 x i64>* %1084, align 16
  %1085 = load <2 x i64>, <2 x i64>* %819, align 16
  %1086 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 47
  store <2 x i64> %1085, <2 x i64>* %1086, align 16
  %1087 = load <2 x i64>, <2 x i64>* %422, align 16
  %1088 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 48
  store <2 x i64> %1087, <2 x i64>* %1088, align 16
  %1089 = load <2 x i64>, <2 x i64>* %427, align 16
  %1090 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 49
  store <2 x i64> %1089, <2 x i64>* %1090, align 16
  %1091 = load <2 x i64>, <2 x i64>* %906, align 16
  %1092 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 50
  store <2 x i64> %1091, <2 x i64>* %1092, align 16
  %1093 = load <2 x i64>, <2 x i64>* %911, align 16
  %1094 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 51
  store <2 x i64> %1093, <2 x i64>* %1094, align 16
  %1095 = load <2 x i64>, <2 x i64>* %433, align 16
  %1096 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 52
  store <2 x i64> %1095, <2 x i64>* %1096, align 16
  %1097 = load <2 x i64>, <2 x i64>* %438, align 16
  %1098 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 53
  store <2 x i64> %1097, <2 x i64>* %1098, align 16
  %1099 = load <2 x i64>, <2 x i64>* %917, align 16
  %1100 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 54
  store <2 x i64> %1099, <2 x i64>* %1100, align 16
  %1101 = load <2 x i64>, <2 x i64>* %922, align 16
  %1102 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 55
  store <2 x i64> %1101, <2 x i64>* %1102, align 16
  %1103 = load <2 x i64>, <2 x i64>* %444, align 16
  %1104 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 56
  store <2 x i64> %1103, <2 x i64>* %1104, align 16
  %1105 = load <2 x i64>, <2 x i64>* %449, align 16
  %1106 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 57
  store <2 x i64> %1105, <2 x i64>* %1106, align 16
  %1107 = load <2 x i64>, <2 x i64>* %928, align 16
  %1108 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 58
  store <2 x i64> %1107, <2 x i64>* %1108, align 16
  %1109 = load <2 x i64>, <2 x i64>* %933, align 16
  %1110 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 59
  store <2 x i64> %1109, <2 x i64>* %1110, align 16
  %1111 = load <2 x i64>, <2 x i64>* %455, align 16
  %1112 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 60
  store <2 x i64> %1111, <2 x i64>* %1112, align 16
  %1113 = load <2 x i64>, <2 x i64>* %460, align 16
  %1114 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 61
  store <2 x i64> %1113, <2 x i64>* %1114, align 16
  %1115 = load <2 x i64>, <2 x i64>* %939, align 16
  %1116 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 62
  store <2 x i64> %1115, <2 x i64>* %1116, align 16
  %1117 = load <2 x i64>, <2 x i64>* %944, align 16
  %1118 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 63
  store <2 x i64> %1117, <2 x i64>* %1118, align 16
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %8) #8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fdct16x16_sse4_1(<2 x i64>* nocapture readonly, <2 x i64>* nocapture, i32, i32) #2 {
  %5 = add nsw i32 %2, -10
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 32
  %8 = load i32, i32* %7, align 16
  %9 = insertelement <4 x i32> undef, i32 %8, i32 0
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> zeroinitializer
  %11 = sub nsw i32 0, %8
  %12 = insertelement <4 x i32> undef, i32 %11, i32 0
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> zeroinitializer
  %14 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 48
  %15 = load i32, i32* %14, align 16
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = shufflevector <4 x i32> %16, <4 x i32> undef, <4 x i32> zeroinitializer
  %18 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 16
  %19 = load i32, i32* %18, align 16
  %20 = insertelement <4 x i32> undef, i32 %19, i32 0
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> zeroinitializer
  %22 = sub nsw i32 0, %15
  %23 = insertelement <4 x i32> undef, i32 %22, i32 0
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> zeroinitializer
  %25 = sub nsw i32 0, %19
  %26 = insertelement <4 x i32> undef, i32 %25, i32 0
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> zeroinitializer
  %28 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 56
  %29 = load i32, i32* %28, align 16
  %30 = insertelement <4 x i32> undef, i32 %29, i32 0
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> zeroinitializer
  %32 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 8
  %33 = load i32, i32* %32, align 16
  %34 = insertelement <4 x i32> undef, i32 %33, i32 0
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> zeroinitializer
  %36 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 24
  %37 = load i32, i32* %36, align 16
  %38 = insertelement <4 x i32> undef, i32 %37, i32 0
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> zeroinitializer
  %40 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 40
  %41 = load i32, i32* %40, align 16
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 60
  %45 = load i32, i32* %44, align 16
  %46 = insertelement <4 x i32> undef, i32 %45, i32 0
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> zeroinitializer
  %48 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 4
  %49 = load i32, i32* %48, align 16
  %50 = insertelement <4 x i32> undef, i32 %49, i32 0
  %51 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> zeroinitializer
  %52 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 28
  %53 = load i32, i32* %52, align 16
  %54 = insertelement <4 x i32> undef, i32 %53, i32 0
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> zeroinitializer
  %56 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 36
  %57 = load i32, i32* %56, align 16
  %58 = insertelement <4 x i32> undef, i32 %57, i32 0
  %59 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> zeroinitializer
  %60 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 44
  %61 = load i32, i32* %60, align 16
  %62 = insertelement <4 x i32> undef, i32 %61, i32 0
  %63 = shufflevector <4 x i32> %62, <4 x i32> undef, <4 x i32> zeroinitializer
  %64 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 20
  %65 = load i32, i32* %64, align 16
  %66 = insertelement <4 x i32> undef, i32 %65, i32 0
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> zeroinitializer
  %68 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 12
  %69 = load i32, i32* %68, align 16
  %70 = insertelement <4 x i32> undef, i32 %69, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 52
  %73 = load i32, i32* %72, align 16
  %74 = insertelement <4 x i32> undef, i32 %73, i32 0
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> zeroinitializer
  %76 = add nsw i32 %2, -1
  %77 = shl i32 1, %76
  %78 = insertelement <4 x i32> undef, i32 %77, i32 0
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> zeroinitializer
  %80 = icmp sgt i32 %3, 0
  br i1 %80, label %81, label %387

81:                                               ; preds = %4
  %82 = mul nsw i32 %3, 15
  %83 = mul nsw i32 %3, 14
  %84 = shl i32 %3, 1
  %85 = mul nsw i32 %3, 13
  %86 = mul nsw i32 %3, 3
  %87 = mul nsw i32 %3, 12
  %88 = shl i32 %3, 2
  %89 = mul nsw i32 %3, 11
  %90 = mul nsw i32 %3, 5
  %91 = mul nsw i32 %3, 10
  %92 = mul nsw i32 %3, 6
  %93 = mul nsw i32 %3, 9
  %94 = mul nsw i32 %3, 7
  %95 = shl i32 %3, 3
  %96 = sext i32 %95 to i64
  %97 = sext i32 %94 to i64
  %98 = sext i32 %93 to i64
  %99 = sext i32 %92 to i64
  %100 = sext i32 %91 to i64
  %101 = sext i32 %90 to i64
  %102 = sext i32 %89 to i64
  %103 = sext i32 %88 to i64
  %104 = sext i32 %87 to i64
  %105 = sext i32 %86 to i64
  %106 = sext i32 %85 to i64
  %107 = sext i32 %84 to i64
  %108 = sext i32 %83 to i64
  %109 = sext i32 %3 to i64
  %110 = sext i32 %82 to i64
  %111 = zext i32 %3 to i64
  br label %112

112:                                              ; preds = %112, %81
  %113 = phi i64 [ 0, %81 ], [ %385, %112 ]
  %114 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %113
  %115 = bitcast <2 x i64>* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 16
  %117 = add nsw i64 %113, %110
  %118 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %117
  %119 = bitcast <2 x i64>* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 16
  %121 = add <4 x i32> %120, %116
  %122 = sub <4 x i32> %116, %120
  %123 = add nsw i64 %113, %109
  %124 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %123
  %125 = bitcast <2 x i64>* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 16
  %127 = add nsw i64 %113, %108
  %128 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %127
  %129 = bitcast <2 x i64>* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 16
  %131 = add <4 x i32> %130, %126
  %132 = sub <4 x i32> %126, %130
  %133 = add nsw i64 %113, %107
  %134 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %133
  %135 = bitcast <2 x i64>* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = add nsw i64 %113, %106
  %138 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %137
  %139 = bitcast <2 x i64>* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 16
  %141 = add <4 x i32> %140, %136
  %142 = sub <4 x i32> %136, %140
  %143 = add nsw i64 %113, %105
  %144 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %143
  %145 = bitcast <2 x i64>* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 16
  %147 = add nsw i64 %113, %104
  %148 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %147
  %149 = bitcast <2 x i64>* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 16
  %151 = add <4 x i32> %150, %146
  %152 = sub <4 x i32> %146, %150
  %153 = add nsw i64 %113, %103
  %154 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %153
  %155 = bitcast <2 x i64>* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = add nsw i64 %113, %102
  %158 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %157
  %159 = bitcast <2 x i64>* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 16
  %161 = add <4 x i32> %160, %156
  %162 = sub <4 x i32> %156, %160
  %163 = add nsw i64 %113, %101
  %164 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %163
  %165 = bitcast <2 x i64>* %164 to <4 x i32>*
  %166 = load <4 x i32>, <4 x i32>* %165, align 16
  %167 = add nsw i64 %113, %100
  %168 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %167
  %169 = bitcast <2 x i64>* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 16
  %171 = add <4 x i32> %170, %166
  %172 = sub <4 x i32> %166, %170
  %173 = add nsw i64 %113, %99
  %174 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %173
  %175 = bitcast <2 x i64>* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 16
  %177 = add nsw i64 %113, %98
  %178 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %177
  %179 = bitcast <2 x i64>* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 16
  %181 = add <4 x i32> %180, %176
  %182 = sub <4 x i32> %176, %180
  %183 = add nsw i64 %113, %97
  %184 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %183
  %185 = bitcast <2 x i64>* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 16
  %187 = add nsw i64 %113, %96
  %188 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %187
  %189 = bitcast <2 x i64>* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 16
  %191 = add <4 x i32> %190, %186
  %192 = sub <4 x i32> %186, %190
  %193 = add <4 x i32> %191, %121
  %194 = sub <4 x i32> %121, %191
  %195 = add <4 x i32> %181, %131
  %196 = sub <4 x i32> %131, %181
  %197 = add <4 x i32> %171, %141
  %198 = sub <4 x i32> %141, %171
  %199 = add <4 x i32> %161, %151
  %200 = sub <4 x i32> %151, %161
  %201 = mul <4 x i32> %172, %13
  %202 = mul <4 x i32> %142, %10
  %203 = add <4 x i32> %202, %79
  %204 = add <4 x i32> %203, %201
  %205 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %204, i32 %2) #8
  %206 = mul <4 x i32> %172, %10
  %207 = mul <4 x i32> %13, %142
  %208 = sub <4 x i32> %79, %207
  %209 = add <4 x i32> %208, %206
  %210 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %209, i32 %2) #8
  %211 = mul <4 x i32> %162, %13
  %212 = mul <4 x i32> %152, %10
  %213 = add <4 x i32> %212, %79
  %214 = add <4 x i32> %213, %211
  %215 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %214, i32 %2) #8
  %216 = mul <4 x i32> %162, %10
  %217 = mul <4 x i32> %13, %152
  %218 = sub <4 x i32> %79, %217
  %219 = add <4 x i32> %218, %216
  %220 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %219, i32 %2) #8
  %221 = add <4 x i32> %193, %199
  %222 = sub <4 x i32> %193, %199
  %223 = add <4 x i32> %195, %197
  %224 = sub <4 x i32> %195, %197
  %225 = mul <4 x i32> %198, %13
  %226 = mul <4 x i32> %196, %10
  %227 = add <4 x i32> %225, %79
  %228 = add <4 x i32> %227, %226
  %229 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %228, i32 %2) #8
  %230 = mul <4 x i32> %198, %10
  %231 = mul <4 x i32> %13, %196
  %232 = add <4 x i32> %230, %79
  %233 = sub <4 x i32> %232, %231
  %234 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %233, i32 %2) #8
  %235 = add <4 x i32> %215, %192
  %236 = sub <4 x i32> %192, %215
  %237 = add <4 x i32> %205, %182
  %238 = sub <4 x i32> %182, %205
  %239 = sub <4 x i32> %122, %220
  %240 = add <4 x i32> %220, %122
  %241 = sub <4 x i32> %132, %210
  %242 = add <4 x i32> %210, %132
  %243 = mul <4 x i32> %221, %10
  %244 = mul <4 x i32> %223, %10
  %245 = add <4 x i32> %244, %79
  %246 = add <4 x i32> %245, %243
  %247 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %246, i32 %2) #8
  %248 = sub <4 x i32> %79, %244
  %249 = add <4 x i32> %248, %243
  %250 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %249, i32 %2) #8
  %251 = mul <4 x i32> %224, %17
  %252 = mul <4 x i32> %222, %21
  %253 = add <4 x i32> %251, %79
  %254 = add <4 x i32> %253, %252
  %255 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %254, i32 %2) #8
  %256 = mul <4 x i32> %222, %17
  %257 = mul <4 x i32> %21, %224
  %258 = sub <4 x i32> %79, %257
  %259 = add <4 x i32> %258, %256
  %260 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %259, i32 %2) #8
  %261 = add <4 x i32> %229, %200
  %262 = sub <4 x i32> %200, %229
  %263 = sub <4 x i32> %194, %234
  %264 = add <4 x i32> %234, %194
  %265 = mul <4 x i32> %237, %27
  %266 = mul <4 x i32> %242, %17
  %267 = add <4 x i32> %265, %79
  %268 = add <4 x i32> %267, %266
  %269 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %268, i32 %2) #8
  %270 = mul <4 x i32> %237, %17
  %271 = mul <4 x i32> %27, %242
  %272 = add <4 x i32> %270, %79
  %273 = sub <4 x i32> %272, %271
  %274 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %273, i32 %2) #8
  %275 = mul <4 x i32> %238, %24
  %276 = mul <4 x i32> %241, %27
  %277 = add <4 x i32> %275, %79
  %278 = add <4 x i32> %277, %276
  %279 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %278, i32 %2) #8
  %280 = mul <4 x i32> %238, %27
  %281 = mul <4 x i32> %24, %241
  %282 = add <4 x i32> %280, %79
  %283 = sub <4 x i32> %282, %281
  %284 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %283, i32 %2) #8
  %285 = mul <4 x i32> %261, %31
  %286 = mul <4 x i32> %264, %35
  %287 = add <4 x i32> %285, %79
  %288 = add <4 x i32> %287, %286
  %289 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %288, i32 %2) #8
  %290 = mul <4 x i32> %264, %31
  %291 = mul <4 x i32> %35, %261
  %292 = sub <4 x i32> %79, %291
  %293 = add <4 x i32> %292, %290
  %294 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %293, i32 %2) #8
  %295 = mul <4 x i32> %262, %39
  %296 = mul <4 x i32> %263, %43
  %297 = add <4 x i32> %295, %79
  %298 = add <4 x i32> %297, %296
  %299 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %298, i32 %2) #8
  %300 = mul <4 x i32> %263, %39
  %301 = mul <4 x i32> %43, %262
  %302 = sub <4 x i32> %79, %301
  %303 = add <4 x i32> %302, %300
  %304 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %303, i32 %2) #8
  %305 = add <4 x i32> %269, %235
  %306 = sub <4 x i32> %235, %269
  %307 = sub <4 x i32> %236, %279
  %308 = add <4 x i32> %279, %236
  %309 = add <4 x i32> %284, %239
  %310 = sub <4 x i32> %239, %284
  %311 = sub <4 x i32> %240, %274
  %312 = add <4 x i32> %274, %240
  %313 = mul <4 x i32> %305, %47
  %314 = mul <4 x i32> %312, %51
  %315 = add <4 x i32> %313, %79
  %316 = add <4 x i32> %315, %314
  %317 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %316, i32 %2) #8
  %318 = mul <4 x i32> %312, %47
  %319 = mul <4 x i32> %51, %305
  %320 = sub <4 x i32> %79, %319
  %321 = add <4 x i32> %320, %318
  %322 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %321, i32 %2) #8
  %323 = mul <4 x i32> %306, %55
  %324 = mul <4 x i32> %311, %59
  %325 = add <4 x i32> %323, %79
  %326 = add <4 x i32> %325, %324
  %327 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %326, i32 %2) #8
  %328 = mul <4 x i32> %311, %55
  %329 = mul <4 x i32> %59, %306
  %330 = sub <4 x i32> %79, %329
  %331 = add <4 x i32> %330, %328
  %332 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %331, i32 %2) #8
  %333 = mul <4 x i32> %307, %63
  %334 = mul <4 x i32> %310, %67
  %335 = add <4 x i32> %333, %79
  %336 = add <4 x i32> %335, %334
  %337 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %336, i32 %2) #8
  %338 = mul <4 x i32> %310, %63
  %339 = mul <4 x i32> %67, %307
  %340 = sub <4 x i32> %79, %339
  %341 = add <4 x i32> %340, %338
  %342 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %341, i32 %2) #8
  %343 = mul <4 x i32> %308, %71
  %344 = mul <4 x i32> %309, %75
  %345 = add <4 x i32> %343, %79
  %346 = add <4 x i32> %345, %344
  %347 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %346, i32 %2) #8
  %348 = mul <4 x i32> %309, %71
  %349 = mul <4 x i32> %75, %308
  %350 = sub <4 x i32> %79, %349
  %351 = add <4 x i32> %350, %348
  %352 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %351, i32 %2) #8
  %353 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %113
  %354 = bitcast <2 x i64>* %353 to <4 x i32>*
  store <4 x i32> %247, <4 x i32>* %354, align 16
  %355 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %123
  %356 = bitcast <2 x i64>* %355 to <4 x i32>*
  store <4 x i32> %317, <4 x i32>* %356, align 16
  %357 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %133
  %358 = bitcast <2 x i64>* %357 to <4 x i32>*
  store <4 x i32> %289, <4 x i32>* %358, align 16
  %359 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %143
  %360 = bitcast <2 x i64>* %359 to <4 x i32>*
  store <4 x i32> %352, <4 x i32>* %360, align 16
  %361 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %153
  %362 = bitcast <2 x i64>* %361 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %362, align 16
  %363 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %163
  %364 = bitcast <2 x i64>* %363 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %364, align 16
  %365 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %173
  %366 = bitcast <2 x i64>* %365 to <4 x i32>*
  store <4 x i32> %304, <4 x i32>* %366, align 16
  %367 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %183
  %368 = bitcast <2 x i64>* %367 to <4 x i32>*
  store <4 x i32> %332, <4 x i32>* %368, align 16
  %369 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %187
  %370 = bitcast <2 x i64>* %369 to <4 x i32>*
  store <4 x i32> %250, <4 x i32>* %370, align 16
  %371 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %177
  %372 = bitcast <2 x i64>* %371 to <4 x i32>*
  store <4 x i32> %327, <4 x i32>* %372, align 16
  %373 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %167
  %374 = bitcast <2 x i64>* %373 to <4 x i32>*
  store <4 x i32> %299, <4 x i32>* %374, align 16
  %375 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %157
  %376 = bitcast <2 x i64>* %375 to <4 x i32>*
  store <4 x i32> %342, <4 x i32>* %376, align 16
  %377 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %147
  %378 = bitcast <2 x i64>* %377 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %378, align 16
  %379 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %137
  %380 = bitcast <2 x i64>* %379 to <4 x i32>*
  store <4 x i32> %347, <4 x i32>* %380, align 16
  %381 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %127
  %382 = bitcast <2 x i64>* %381 to <4 x i32>*
  store <4 x i32> %294, <4 x i32>* %382, align 16
  %383 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %117
  %384 = bitcast <2 x i64>* %383 to <4 x i32>*
  store <4 x i32> %322, <4 x i32>* %384, align 16
  %385 = add nuw nsw i64 %113, 1
  %386 = icmp eq i64 %385, %111
  br i1 %386, label %387, label %112

387:                                              ; preds = %112, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @fadst16x16_sse4_1(<2 x i64>* nocapture readonly, <2 x i64>* nocapture, i32, i32) #0 {
  %5 = add nsw i32 %2, -10
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 32
  %8 = load i32, i32* %7, align 16
  %9 = insertelement <4 x i32> undef, i32 %8, i32 0
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> zeroinitializer
  %11 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 48
  %12 = load i32, i32* %11, align 16
  %13 = insertelement <4 x i32> undef, i32 %12, i32 0
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> zeroinitializer
  %15 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 16
  %16 = load i32, i32* %15, align 16
  %17 = insertelement <4 x i32> undef, i32 %16, i32 0
  %18 = shufflevector <4 x i32> %17, <4 x i32> undef, <4 x i32> zeroinitializer
  %19 = sub nsw i32 0, %16
  %20 = insertelement <4 x i32> undef, i32 %19, i32 0
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> zeroinitializer
  %22 = sub nsw i32 0, %12
  %23 = insertelement <4 x i32> undef, i32 %22, i32 0
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 8
  %26 = load i32, i32* %25, align 16
  %27 = insertelement <4 x i32> undef, i32 %26, i32 0
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> zeroinitializer
  %29 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 56
  %30 = load i32, i32* %29, align 16
  %31 = insertelement <4 x i32> undef, i32 %30, i32 0
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> zeroinitializer
  %33 = sub nsw i32 0, %30
  %34 = insertelement <4 x i32> undef, i32 %33, i32 0
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> zeroinitializer
  %36 = sub nsw i32 0, %26
  %37 = insertelement <4 x i32> undef, i32 %36, i32 0
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> zeroinitializer
  %39 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 24
  %40 = load i32, i32* %39, align 16
  %41 = insertelement <4 x i32> undef, i32 %40, i32 0
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> zeroinitializer
  %43 = sub nsw i32 0, %40
  %44 = insertelement <4 x i32> undef, i32 %43, i32 0
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> zeroinitializer
  %46 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 40
  %47 = load i32, i32* %46, align 16
  %48 = sub nsw i32 0, %47
  %49 = insertelement <4 x i32> undef, i32 %48, i32 0
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  %51 = insertelement <4 x i32> undef, i32 %47, i32 0
  %52 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> zeroinitializer
  %53 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 2
  %54 = load i32, i32* %53, align 8
  %55 = insertelement <4 x i32> undef, i32 %54, i32 0
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> zeroinitializer
  %57 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 62
  %58 = load i32, i32* %57, align 8
  %59 = insertelement <4 x i32> undef, i32 %58, i32 0
  %60 = shufflevector <4 x i32> %59, <4 x i32> undef, <4 x i32> zeroinitializer
  %61 = sub nsw i32 0, %54
  %62 = insertelement <4 x i32> undef, i32 %61, i32 0
  %63 = shufflevector <4 x i32> %62, <4 x i32> undef, <4 x i32> zeroinitializer
  %64 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 10
  %65 = load i32, i32* %64, align 8
  %66 = insertelement <4 x i32> undef, i32 %65, i32 0
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> zeroinitializer
  %68 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 54
  %69 = load i32, i32* %68, align 8
  %70 = insertelement <4 x i32> undef, i32 %69, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = sub nsw i32 0, %65
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 18
  %76 = load i32, i32* %75, align 8
  %77 = insertelement <4 x i32> undef, i32 %76, i32 0
  %78 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> zeroinitializer
  %79 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 46
  %80 = load i32, i32* %79, align 8
  %81 = insertelement <4 x i32> undef, i32 %80, i32 0
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> zeroinitializer
  %83 = sub nsw i32 0, %76
  %84 = insertelement <4 x i32> undef, i32 %83, i32 0
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> zeroinitializer
  %86 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 26
  %87 = load i32, i32* %86, align 8
  %88 = insertelement <4 x i32> undef, i32 %87, i32 0
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> zeroinitializer
  %90 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 38
  %91 = load i32, i32* %90, align 8
  %92 = insertelement <4 x i32> undef, i32 %91, i32 0
  %93 = shufflevector <4 x i32> %92, <4 x i32> undef, <4 x i32> zeroinitializer
  %94 = sub nsw i32 0, %87
  %95 = insertelement <4 x i32> undef, i32 %94, i32 0
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> zeroinitializer
  %97 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 34
  %98 = load i32, i32* %97, align 8
  %99 = insertelement <4 x i32> undef, i32 %98, i32 0
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> zeroinitializer
  %101 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 30
  %102 = load i32, i32* %101, align 8
  %103 = insertelement <4 x i32> undef, i32 %102, i32 0
  %104 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> zeroinitializer
  %105 = sub nsw i32 0, %98
  %106 = insertelement <4 x i32> undef, i32 %105, i32 0
  %107 = shufflevector <4 x i32> %106, <4 x i32> undef, <4 x i32> zeroinitializer
  %108 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 42
  %109 = load i32, i32* %108, align 8
  %110 = insertelement <4 x i32> undef, i32 %109, i32 0
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> zeroinitializer
  %112 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 22
  %113 = load i32, i32* %112, align 8
  %114 = insertelement <4 x i32> undef, i32 %113, i32 0
  %115 = shufflevector <4 x i32> %114, <4 x i32> undef, <4 x i32> zeroinitializer
  %116 = sub nsw i32 0, %109
  %117 = insertelement <4 x i32> undef, i32 %116, i32 0
  %118 = shufflevector <4 x i32> %117, <4 x i32> undef, <4 x i32> zeroinitializer
  %119 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 50
  %120 = load i32, i32* %119, align 8
  %121 = insertelement <4 x i32> undef, i32 %120, i32 0
  %122 = shufflevector <4 x i32> %121, <4 x i32> undef, <4 x i32> zeroinitializer
  %123 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 14
  %124 = load i32, i32* %123, align 8
  %125 = insertelement <4 x i32> undef, i32 %124, i32 0
  %126 = shufflevector <4 x i32> %125, <4 x i32> undef, <4 x i32> zeroinitializer
  %127 = sub nsw i32 0, %120
  %128 = insertelement <4 x i32> undef, i32 %127, i32 0
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> zeroinitializer
  %130 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 58
  %131 = load i32, i32* %130, align 8
  %132 = insertelement <4 x i32> undef, i32 %131, i32 0
  %133 = shufflevector <4 x i32> %132, <4 x i32> undef, <4 x i32> zeroinitializer
  %134 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 6
  %135 = load i32, i32* %134, align 8
  %136 = insertelement <4 x i32> undef, i32 %135, i32 0
  %137 = shufflevector <4 x i32> %136, <4 x i32> undef, <4 x i32> zeroinitializer
  %138 = sub nsw i32 0, %131
  %139 = insertelement <4 x i32> undef, i32 %138, i32 0
  %140 = shufflevector <4 x i32> %139, <4 x i32> undef, <4 x i32> zeroinitializer
  %141 = add nsw i32 %2, -1
  %142 = shl i32 1, %141
  %143 = insertelement <4 x i32> undef, i32 %142, i32 0
  %144 = shufflevector <4 x i32> %143, <4 x i32> undef, <4 x i32> zeroinitializer
  %145 = icmp sgt i32 %3, 0
  br i1 %145, label %146, label %516

146:                                              ; preds = %4
  %147 = mul nsw i32 %3, 15
  %148 = mul nsw i32 %3, 7
  %149 = shl i32 %3, 3
  %150 = mul nsw i32 %3, 3
  %151 = mul nsw i32 %3, 12
  %152 = shl i32 %3, 2
  %153 = mul nsw i32 %3, 11
  %154 = mul nsw i32 %3, 14
  %155 = mul nsw i32 %3, 6
  %156 = mul nsw i32 %3, 9
  %157 = shl i32 %3, 1
  %158 = mul nsw i32 %3, 13
  %159 = mul nsw i32 %3, 5
  %160 = mul nsw i32 %3, 10
  %161 = sext i32 %160 to i64
  %162 = sext i32 %159 to i64
  %163 = sext i32 %158 to i64
  %164 = sext i32 %157 to i64
  %165 = sext i32 %156 to i64
  %166 = sext i32 %155 to i64
  %167 = sext i32 %154 to i64
  %168 = sext i32 %3 to i64
  %169 = sext i32 %153 to i64
  %170 = sext i32 %152 to i64
  %171 = sext i32 %151 to i64
  %172 = sext i32 %150 to i64
  %173 = sext i32 %149 to i64
  %174 = sext i32 %148 to i64
  %175 = sext i32 %147 to i64
  %176 = zext i32 %3 to i64
  br label %177

177:                                              ; preds = %177, %146
  %178 = phi i64 [ 0, %146 ], [ %514, %177 ]
  %179 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %178
  %180 = bitcast <2 x i64>* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 16
  %182 = add nsw i64 %178, %175
  %183 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %182
  %184 = bitcast <2 x i64>* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 16
  %186 = add nsw i64 %178, %174
  %187 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %186
  %188 = bitcast <2 x i64>* %187 to <4 x i32>*
  %189 = load <4 x i32>, <4 x i32>* %188, align 16
  %190 = add nsw i64 %178, %173
  %191 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %190
  %192 = bitcast <2 x i64>* %191 to <4 x i32>*
  %193 = load <4 x i32>, <4 x i32>* %192, align 16
  %194 = add nsw i64 %178, %172
  %195 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %194
  %196 = bitcast <2 x i64>* %195 to <4 x i32>*
  %197 = load <4 x i32>, <4 x i32>* %196, align 16
  %198 = add nsw i64 %178, %171
  %199 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %198
  %200 = bitcast <2 x i64>* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 16
  %202 = add nsw i64 %178, %170
  %203 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %202
  %204 = bitcast <2 x i64>* %203 to <4 x i32>*
  %205 = load <4 x i32>, <4 x i32>* %204, align 16
  %206 = add nsw i64 %178, %169
  %207 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %206
  %208 = bitcast <2 x i64>* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 16
  %210 = add nsw i64 %178, %168
  %211 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %210
  %212 = bitcast <2 x i64>* %211 to <4 x i32>*
  %213 = load <4 x i32>, <4 x i32>* %212, align 16
  %214 = add nsw i64 %178, %167
  %215 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %214
  %216 = bitcast <2 x i64>* %215 to <4 x i32>*
  %217 = load <4 x i32>, <4 x i32>* %216, align 16
  %218 = add nsw i64 %178, %166
  %219 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %218
  %220 = bitcast <2 x i64>* %219 to <4 x i32>*
  %221 = load <4 x i32>, <4 x i32>* %220, align 16
  %222 = add nsw i64 %178, %165
  %223 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %222
  %224 = bitcast <2 x i64>* %223 to <4 x i32>*
  %225 = load <4 x i32>, <4 x i32>* %224, align 16
  %226 = add nsw i64 %178, %164
  %227 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %226
  %228 = bitcast <2 x i64>* %227 to <4 x i32>*
  %229 = load <4 x i32>, <4 x i32>* %228, align 16
  %230 = add nsw i64 %178, %163
  %231 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %230
  %232 = bitcast <2 x i64>* %231 to <4 x i32>*
  %233 = load <4 x i32>, <4 x i32>* %232, align 16
  %234 = add nsw i64 %178, %162
  %235 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %234
  %236 = bitcast <2 x i64>* %235 to <4 x i32>*
  %237 = load <4 x i32>, <4 x i32>* %236, align 16
  %238 = add nsw i64 %178, %161
  %239 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %238
  %240 = bitcast <2 x i64>* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 16
  %242 = mul <4 x i32> %10, %189
  %243 = mul <4 x i32> %193, %10
  %244 = sub <4 x i32> %144, %242
  %245 = add <4 x i32> %244, %243
  %246 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %245, i32 %2) #8
  %247 = sub <4 x i32> %244, %243
  %248 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %247, i32 %2) #8
  %249 = mul <4 x i32> %205, %10
  %250 = mul <4 x i32> %209, %10
  %251 = add <4 x i32> %249, %144
  %252 = sub <4 x i32> %251, %250
  %253 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %252, i32 %2) #8
  %254 = add <4 x i32> %251, %250
  %255 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %254, i32 %2) #8
  %256 = mul <4 x i32> %221, %10
  %257 = mul <4 x i32> %225, %10
  %258 = add <4 x i32> %256, %144
  %259 = sub <4 x i32> %258, %257
  %260 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %259, i32 %2) #8
  %261 = add <4 x i32> %258, %257
  %262 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %261, i32 %2) #8
  %263 = mul <4 x i32> %10, %237
  %264 = mul <4 x i32> %241, %10
  %265 = sub <4 x i32> %144, %263
  %266 = add <4 x i32> %265, %264
  %267 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %266, i32 %2) #8
  %268 = sub <4 x i32> %265, %264
  %269 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %268, i32 %2) #8
  %270 = add <4 x i32> %246, %181
  %271 = sub <4 x i32> %248, %185
  %272 = sub <4 x i32> %181, %246
  %273 = add <4 x i32> %248, %185
  %274 = sub <4 x i32> zeroinitializer, %273
  %275 = sub <4 x i32> %253, %197
  %276 = add <4 x i32> %255, %201
  %277 = add <4 x i32> %253, %197
  %278 = sub <4 x i32> zeroinitializer, %277
  %279 = sub <4 x i32> %201, %255
  %280 = sub <4 x i32> %260, %213
  %281 = add <4 x i32> %262, %217
  %282 = add <4 x i32> %260, %213
  %283 = sub <4 x i32> zeroinitializer, %282
  %284 = sub <4 x i32> %217, %262
  %285 = add <4 x i32> %267, %229
  %286 = sub <4 x i32> %269, %233
  %287 = sub <4 x i32> %229, %267
  %288 = add <4 x i32> %269, %233
  %289 = sub <4 x i32> zeroinitializer, %288
  %290 = mul <4 x i32> %275, %18
  %291 = mul <4 x i32> %276, %14
  %292 = add <4 x i32> %290, %144
  %293 = add <4 x i32> %292, %291
  %294 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %293, i32 %2) #8
  %295 = mul <4 x i32> %275, %14
  %296 = mul <4 x i32> %276, %21
  %297 = add <4 x i32> %295, %144
  %298 = add <4 x i32> %297, %296
  %299 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %298, i32 %2) #8
  %300 = mul <4 x i32> %24, %278
  %301 = mul <4 x i32> %279, %18
  %302 = add <4 x i32> %300, %144
  %303 = add <4 x i32> %302, %301
  %304 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %303, i32 %2) #8
  %305 = mul <4 x i32> %18, %278
  %306 = mul <4 x i32> %279, %14
  %307 = add <4 x i32> %305, %144
  %308 = add <4 x i32> %307, %306
  %309 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %308, i32 %2) #8
  %310 = mul <4 x i32> %285, %18
  %311 = mul <4 x i32> %286, %14
  %312 = add <4 x i32> %310, %144
  %313 = add <4 x i32> %312, %311
  %314 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %313, i32 %2) #8
  %315 = mul <4 x i32> %285, %14
  %316 = mul <4 x i32> %286, %21
  %317 = add <4 x i32> %315, %144
  %318 = add <4 x i32> %317, %316
  %319 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %318, i32 %2) #8
  %320 = mul <4 x i32> %287, %24
  %321 = mul <4 x i32> %18, %289
  %322 = add <4 x i32> %320, %144
  %323 = add <4 x i32> %322, %321
  %324 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %323, i32 %2) #8
  %325 = mul <4 x i32> %287, %18
  %326 = mul <4 x i32> %14, %289
  %327 = add <4 x i32> %325, %144
  %328 = add <4 x i32> %327, %326
  %329 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %328, i32 %2) #8
  %330 = add <4 x i32> %294, %270
  %331 = add <4 x i32> %299, %271
  %332 = add <4 x i32> %304, %272
  %333 = sub <4 x i32> %309, %273
  %334 = sub <4 x i32> %270, %294
  %335 = sub <4 x i32> %271, %299
  %336 = sub <4 x i32> %272, %304
  %337 = sub <4 x i32> %274, %309
  %338 = add <4 x i32> %314, %280
  %339 = add <4 x i32> %319, %281
  %340 = sub <4 x i32> %324, %282
  %341 = add <4 x i32> %329, %284
  %342 = sub <4 x i32> %280, %314
  %343 = sub <4 x i32> %281, %319
  %344 = sub <4 x i32> %283, %324
  %345 = sub <4 x i32> %284, %329
  %346 = mul <4 x i32> %338, %28
  %347 = mul <4 x i32> %339, %32
  %348 = add <4 x i32> %346, %144
  %349 = add <4 x i32> %348, %347
  %350 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %349, i32 %2) #8
  %351 = mul <4 x i32> %338, %32
  %352 = mul <4 x i32> %339, %38
  %353 = add <4 x i32> %351, %144
  %354 = add <4 x i32> %353, %352
  %355 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %354, i32 %2) #8
  %356 = mul <4 x i32> %340, %52
  %357 = mul <4 x i32> %341, %42
  %358 = add <4 x i32> %356, %144
  %359 = add <4 x i32> %358, %357
  %360 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %359, i32 %2) #8
  %361 = mul <4 x i32> %340, %42
  %362 = mul <4 x i32> %341, %50
  %363 = add <4 x i32> %361, %144
  %364 = add <4 x i32> %363, %362
  %365 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %364, i32 %2) #8
  %366 = mul <4 x i32> %342, %35
  %367 = mul <4 x i32> %343, %28
  %368 = add <4 x i32> %366, %144
  %369 = add <4 x i32> %368, %367
  %370 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %369, i32 %2) #8
  %371 = mul <4 x i32> %342, %28
  %372 = mul <4 x i32> %343, %32
  %373 = add <4 x i32> %371, %144
  %374 = add <4 x i32> %373, %372
  %375 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %374, i32 %2) #8
  %376 = mul <4 x i32> %344, %45
  %377 = mul <4 x i32> %345, %52
  %378 = add <4 x i32> %376, %144
  %379 = add <4 x i32> %378, %377
  %380 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %379, i32 %2) #8
  %381 = mul <4 x i32> %344, %52
  %382 = mul <4 x i32> %345, %42
  %383 = add <4 x i32> %381, %144
  %384 = add <4 x i32> %383, %382
  %385 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %384, i32 %2) #8
  %386 = add <4 x i32> %350, %330
  %387 = add <4 x i32> %355, %331
  %388 = add <4 x i32> %360, %332
  %389 = add <4 x i32> %365, %333
  %390 = add <4 x i32> %370, %334
  %391 = add <4 x i32> %375, %335
  %392 = add <4 x i32> %380, %336
  %393 = add <4 x i32> %385, %337
  %394 = sub <4 x i32> %330, %350
  %395 = sub <4 x i32> %331, %355
  %396 = sub <4 x i32> %332, %360
  %397 = sub <4 x i32> %333, %365
  %398 = sub <4 x i32> %334, %370
  %399 = sub <4 x i32> %335, %375
  %400 = sub <4 x i32> %336, %380
  %401 = sub <4 x i32> %337, %385
  %402 = mul <4 x i32> %386, %56
  %403 = mul <4 x i32> %387, %60
  %404 = add <4 x i32> %402, %144
  %405 = add <4 x i32> %404, %403
  %406 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %405, i32 %2) #8
  %407 = mul <4 x i32> %386, %60
  %408 = mul <4 x i32> %387, %63
  %409 = add <4 x i32> %407, %144
  %410 = add <4 x i32> %409, %408
  %411 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %410, i32 %2) #8
  %412 = mul <4 x i32> %388, %67
  %413 = mul <4 x i32> %389, %71
  %414 = add <4 x i32> %412, %144
  %415 = add <4 x i32> %414, %413
  %416 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %415, i32 %2) #8
  %417 = mul <4 x i32> %388, %71
  %418 = mul <4 x i32> %389, %74
  %419 = add <4 x i32> %417, %144
  %420 = add <4 x i32> %419, %418
  %421 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %420, i32 %2) #8
  %422 = mul <4 x i32> %390, %78
  %423 = mul <4 x i32> %391, %82
  %424 = add <4 x i32> %422, %144
  %425 = add <4 x i32> %424, %423
  %426 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %425, i32 %2) #8
  %427 = mul <4 x i32> %390, %82
  %428 = mul <4 x i32> %391, %85
  %429 = add <4 x i32> %427, %144
  %430 = add <4 x i32> %429, %428
  %431 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %430, i32 %2) #8
  %432 = mul <4 x i32> %392, %89
  %433 = mul <4 x i32> %393, %93
  %434 = add <4 x i32> %432, %144
  %435 = add <4 x i32> %434, %433
  %436 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %435, i32 %2) #8
  %437 = mul <4 x i32> %392, %93
  %438 = mul <4 x i32> %393, %96
  %439 = add <4 x i32> %437, %144
  %440 = add <4 x i32> %439, %438
  %441 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %440, i32 %2) #8
  %442 = mul <4 x i32> %394, %100
  %443 = mul <4 x i32> %395, %104
  %444 = add <4 x i32> %442, %144
  %445 = add <4 x i32> %444, %443
  %446 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %445, i32 %2) #8
  %447 = mul <4 x i32> %394, %104
  %448 = mul <4 x i32> %395, %107
  %449 = add <4 x i32> %447, %144
  %450 = add <4 x i32> %449, %448
  %451 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %450, i32 %2) #8
  %452 = mul <4 x i32> %396, %111
  %453 = mul <4 x i32> %397, %115
  %454 = add <4 x i32> %452, %144
  %455 = add <4 x i32> %454, %453
  %456 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %455, i32 %2) #8
  %457 = mul <4 x i32> %396, %115
  %458 = mul <4 x i32> %397, %118
  %459 = add <4 x i32> %457, %144
  %460 = add <4 x i32> %459, %458
  %461 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %460, i32 %2) #8
  %462 = mul <4 x i32> %398, %122
  %463 = mul <4 x i32> %399, %126
  %464 = add <4 x i32> %462, %144
  %465 = add <4 x i32> %464, %463
  %466 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %465, i32 %2) #8
  %467 = mul <4 x i32> %398, %126
  %468 = mul <4 x i32> %399, %129
  %469 = add <4 x i32> %467, %144
  %470 = add <4 x i32> %469, %468
  %471 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %470, i32 %2) #8
  %472 = mul <4 x i32> %400, %133
  %473 = mul <4 x i32> %401, %137
  %474 = add <4 x i32> %472, %144
  %475 = add <4 x i32> %474, %473
  %476 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %475, i32 %2) #8
  %477 = mul <4 x i32> %400, %137
  %478 = mul <4 x i32> %401, %140
  %479 = add <4 x i32> %477, %144
  %480 = add <4 x i32> %479, %478
  %481 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %480, i32 %2) #8
  %482 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %178
  %483 = bitcast <2 x i64>* %482 to <4 x i32>*
  store <4 x i32> %411, <4 x i32>* %483, align 16
  %484 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %210
  %485 = bitcast <2 x i64>* %484 to <4 x i32>*
  store <4 x i32> %476, <4 x i32>* %485, align 16
  %486 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %226
  %487 = bitcast <2 x i64>* %486 to <4 x i32>*
  store <4 x i32> %421, <4 x i32>* %487, align 16
  %488 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %194
  %489 = bitcast <2 x i64>* %488 to <4 x i32>*
  store <4 x i32> %466, <4 x i32>* %489, align 16
  %490 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %202
  %491 = bitcast <2 x i64>* %490 to <4 x i32>*
  store <4 x i32> %431, <4 x i32>* %491, align 16
  %492 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %234
  %493 = bitcast <2 x i64>* %492 to <4 x i32>*
  store <4 x i32> %456, <4 x i32>* %493, align 16
  %494 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %218
  %495 = bitcast <2 x i64>* %494 to <4 x i32>*
  store <4 x i32> %441, <4 x i32>* %495, align 16
  %496 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %186
  %497 = bitcast <2 x i64>* %496 to <4 x i32>*
  store <4 x i32> %446, <4 x i32>* %497, align 16
  %498 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %190
  %499 = bitcast <2 x i64>* %498 to <4 x i32>*
  store <4 x i32> %451, <4 x i32>* %499, align 16
  %500 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %222
  %501 = bitcast <2 x i64>* %500 to <4 x i32>*
  store <4 x i32> %436, <4 x i32>* %501, align 16
  %502 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %238
  %503 = bitcast <2 x i64>* %502 to <4 x i32>*
  store <4 x i32> %461, <4 x i32>* %503, align 16
  %504 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %206
  %505 = bitcast <2 x i64>* %504 to <4 x i32>*
  store <4 x i32> %426, <4 x i32>* %505, align 16
  %506 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %198
  %507 = bitcast <2 x i64>* %506 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %507, align 16
  %508 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %230
  %509 = bitcast <2 x i64>* %508 to <4 x i32>*
  store <4 x i32> %416, <4 x i32>* %509, align 16
  %510 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %214
  %511 = bitcast <2 x i64>* %510 to <4 x i32>*
  store <4 x i32> %481, <4 x i32>* %511, align 16
  %512 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %182
  %513 = bitcast <2 x i64>* %512 to <4 x i32>*
  store <4 x i32> %406, <4 x i32>* %513, align 16
  %514 = add nuw nsw i64 %178, 1
  %515 = icmp eq i64 %514, %176
  br i1 %515, label %516, label %177

516:                                              ; preds = %177, %4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @idtx16x16_sse4_1(<2 x i64>* nocapture readonly, <2 x i64>* nocapture, i32, i32) #2 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %4
  %7 = shl nsw i32 %3, 4
  %8 = sext i32 %7 to i64
  br label %10

9:                                                ; preds = %10, %4
  ret void

10:                                               ; preds = %6, %10
  %11 = phi i64 [ 0, %6 ], [ %20, %10 ]
  %12 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %11
  %13 = bitcast <2 x i64>* %12 to <4 x i32>*
  %14 = load <4 x i32>, <4 x i32>* %13, align 16
  %15 = mul <4 x i32> %14, <i32 11586, i32 11586, i32 11586, i32 11586>
  %16 = add <4 x i32> %15, <i32 2048, i32 2048, i32 2048, i32 2048>
  %17 = ashr <4 x i32> %16, <i32 12, i32 12, i32 12, i32 12>
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %11
  %19 = bitcast <2 x i64>* %18 to <4 x i32>*
  store <4 x i32> %17, <4 x i32>* %19, align 16
  %20 = add nuw nsw i64 %11, 1
  %21 = icmp slt i64 %20, %8
  br i1 %21, label %10, label %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_16x8_sse4_1(i16* nocapture readonly, i32* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [32 x <2 x i64>], align 16
  %7 = alloca [32 x <2 x i64>], align 16
  %8 = bitcast [32 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 512, i1 false)
  %9 = bitcast [32 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %9) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 512, i1 false)
  %10 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 8), align 16
  %11 = zext i8 %3 to i64
  %12 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @col_highbd_txfm8x8_arr, i64 0, i64 %11
  %13 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %12, align 8
  %14 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @row_highbd_txfm8x16_arr, i64 0, i64 %11
  %15 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %14, align 8
  %16 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 1), align 1
  %17 = sext i8 %16 to i32
  switch i8 %3, label %21 [
    i8 6, label %20
    i8 15, label %19
    i8 7, label %19
    i8 5, label %19
    i8 14, label %18
    i8 8, label %18
    i8 4, label %18
  ]

18:                                               ; preds = %5, %5, %5
  br label %21

19:                                               ; preds = %5, %5, %5
  br label %21

20:                                               ; preds = %5
  br label %21

21:                                               ; preds = %5, %18, %19, %20
  %22 = phi i1 [ false, %20 ], [ true, %19 ], [ false, %18 ], [ true, %5 ]
  %23 = phi i32 [ 1, %20 ], [ 1, %19 ], [ 0, %18 ], [ 0, %5 ]
  %24 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 0
  %25 = mul nsw i32 %2, 7
  %26 = sext i32 %25 to i64
  %27 = mul nsw i32 %2, 6
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 1
  %30 = mul nsw i32 %2, 5
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 2
  %33 = shl nsw i32 %2, 2
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 3
  %36 = mul nsw i32 %2, 3
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 4
  %39 = shl nsw i32 %2, 1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 5
  %42 = sext i32 %2 to i64
  %43 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 6
  %44 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 7
  %45 = bitcast <2 x i64>* %44 to <4 x i32>*
  %46 = bitcast [32 x <2 x i64>]* %6 to <4 x i32>*
  %47 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 8
  %48 = bitcast <2 x i64>* %47 to <4 x i32>*
  %49 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 9
  %50 = bitcast <2 x i64>* %49 to <4 x i32>*
  %51 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 10
  %52 = bitcast <2 x i64>* %51 to <4 x i32>*
  %53 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 11
  %54 = bitcast <2 x i64>* %53 to <4 x i32>*
  %55 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 12
  %56 = bitcast <2 x i64>* %55 to <4 x i32>*
  %57 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 13
  %58 = bitcast <2 x i64>* %57 to <4 x i32>*
  %59 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 14
  %60 = bitcast <2 x i64>* %59 to <4 x i32>*
  %61 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 15
  %62 = bitcast <2 x i64>* %61 to <4 x i32>*
  %63 = bitcast <2 x i64>* %43 to <4 x i32>*
  %64 = bitcast <2 x i64>* %38 to <4 x i32>*
  %65 = bitcast <2 x i64>* %41 to <4 x i32>*
  %66 = bitcast <2 x i64>* %32 to <4 x i32>*
  %67 = bitcast <2 x i64>* %35 to <4 x i32>*
  %68 = bitcast <2 x i64>* %29 to <4 x i32>*
  %69 = getelementptr inbounds i8, i8* %10, i64 1
  br label %73

70:                                               ; preds = %123
  %71 = icmp eq i32 %23, 0
  %72 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 0
  br i1 %71, label %408, label %328

73:                                               ; preds = %123, %21
  %74 = phi i64 [ 0, %21 ], [ %326, %123 ]
  %75 = shl nsw i64 %74, 3
  %76 = getelementptr inbounds i16, i16* %0, i64 %75
  %77 = load i8, i8* %10, align 1
  %78 = sext i8 %77 to i32
  br i1 %22, label %79, label %101

79:                                               ; preds = %73
  %80 = bitcast i16* %76 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 16
  store <2 x i64> %81, <2 x i64>* %24, align 16
  %82 = getelementptr inbounds i16, i16* %76, i64 %42
  %83 = bitcast i16* %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 16
  store <2 x i64> %84, <2 x i64>* %29, align 16
  %85 = getelementptr inbounds i16, i16* %76, i64 %40
  %86 = bitcast i16* %85 to <2 x i64>*
  %87 = load <2 x i64>, <2 x i64>* %86, align 16
  store <2 x i64> %87, <2 x i64>* %32, align 16
  %88 = getelementptr inbounds i16, i16* %76, i64 %37
  %89 = bitcast i16* %88 to <2 x i64>*
  %90 = load <2 x i64>, <2 x i64>* %89, align 16
  store <2 x i64> %90, <2 x i64>* %35, align 16
  %91 = getelementptr inbounds i16, i16* %76, i64 %34
  %92 = bitcast i16* %91 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 16
  store <2 x i64> %93, <2 x i64>* %38, align 16
  %94 = getelementptr inbounds i16, i16* %76, i64 %31
  %95 = bitcast i16* %94 to <2 x i64>*
  %96 = load <2 x i64>, <2 x i64>* %95, align 16
  store <2 x i64> %96, <2 x i64>* %41, align 16
  %97 = getelementptr inbounds i16, i16* %76, i64 %28
  %98 = bitcast i16* %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 16
  store <2 x i64> %99, <2 x i64>* %43, align 16
  %100 = getelementptr inbounds i16, i16* %76, i64 %26
  br label %123

101:                                              ; preds = %73
  %102 = getelementptr inbounds i16, i16* %76, i64 %26
  %103 = bitcast i16* %102 to <2 x i64>*
  %104 = load <2 x i64>, <2 x i64>* %103, align 16
  store <2 x i64> %104, <2 x i64>* %24, align 16
  %105 = getelementptr inbounds i16, i16* %76, i64 %28
  %106 = bitcast i16* %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 16
  store <2 x i64> %107, <2 x i64>* %29, align 16
  %108 = getelementptr inbounds i16, i16* %76, i64 %31
  %109 = bitcast i16* %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 16
  store <2 x i64> %110, <2 x i64>* %32, align 16
  %111 = getelementptr inbounds i16, i16* %76, i64 %34
  %112 = bitcast i16* %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 16
  store <2 x i64> %113, <2 x i64>* %35, align 16
  %114 = getelementptr inbounds i16, i16* %76, i64 %37
  %115 = bitcast i16* %114 to <2 x i64>*
  %116 = load <2 x i64>, <2 x i64>* %115, align 16
  store <2 x i64> %116, <2 x i64>* %38, align 16
  %117 = getelementptr inbounds i16, i16* %76, i64 %40
  %118 = bitcast i16* %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 16
  store <2 x i64> %119, <2 x i64>* %41, align 16
  %120 = getelementptr inbounds i16, i16* %76, i64 %42
  %121 = bitcast i16* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 16
  store <2 x i64> %122, <2 x i64>* %43, align 16
  br label %123

123:                                              ; preds = %79, %101
  %124 = phi <2 x i64> [ %104, %101 ], [ %81, %79 ]
  %125 = phi <2 x i64> [ %107, %101 ], [ %84, %79 ]
  %126 = phi <2 x i64> [ %110, %101 ], [ %87, %79 ]
  %127 = phi <2 x i64> [ %113, %101 ], [ %90, %79 ]
  %128 = phi <2 x i64> [ %122, %101 ], [ %99, %79 ]
  %129 = phi <2 x i64> [ %119, %101 ], [ %96, %79 ]
  %130 = phi <2 x i64> [ %116, %101 ], [ %93, %79 ]
  %131 = phi i16* [ %76, %101 ], [ %100, %79 ]
  %132 = bitcast i16* %131 to <2 x i64>*
  %133 = load <2 x i64>, <2 x i64>* %132, align 16
  %134 = shufflevector <2 x i64> %130, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %135 = bitcast <2 x i64> %130 to <8 x i16>
  %136 = shufflevector <8 x i16> %135, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %137 = sext <4 x i16> %136 to <4 x i32>
  %138 = bitcast <2 x i64> %134 to <8 x i16>
  %139 = shufflevector <8 x i16> %138, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %140 = sext <4 x i16> %139 to <4 x i32>
  %141 = shufflevector <2 x i64> %129, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %142 = bitcast <2 x i64> %129 to <8 x i16>
  %143 = shufflevector <8 x i16> %142, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %144 = sext <4 x i16> %143 to <4 x i32>
  %145 = bitcast <2 x i64> %141 to <8 x i16>
  %146 = shufflevector <8 x i16> %145, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %147 = sext <4 x i16> %146 to <4 x i32>
  %148 = shufflevector <2 x i64> %128, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %149 = bitcast <2 x i64> %128 to <8 x i16>
  %150 = shufflevector <8 x i16> %149, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %151 = sext <4 x i16> %150 to <4 x i32>
  %152 = bitcast <2 x i64> %148 to <8 x i16>
  %153 = shufflevector <8 x i16> %152, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %154 = sext <4 x i16> %153 to <4 x i32>
  %155 = shufflevector <2 x i64> %133, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %156 = bitcast <2 x i64> %133 to <8 x i16>
  %157 = shufflevector <8 x i16> %156, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %158 = sext <4 x i16> %157 to <4 x i32>
  %159 = bitcast <2 x i64> %155 to <8 x i16>
  %160 = shufflevector <8 x i16> %159, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %161 = sext <4 x i16> %160 to <4 x i32>
  %162 = shufflevector <2 x i64> %127, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %163 = bitcast <2 x i64> %127 to <8 x i16>
  %164 = shufflevector <8 x i16> %163, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %165 = sext <4 x i16> %164 to <4 x i32>
  %166 = bitcast <2 x i64> %162 to <8 x i16>
  %167 = shufflevector <8 x i16> %166, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %168 = sext <4 x i16> %167 to <4 x i32>
  %169 = shufflevector <2 x i64> %126, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %170 = bitcast <2 x i64> %126 to <8 x i16>
  %171 = shufflevector <8 x i16> %170, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %172 = sext <4 x i16> %171 to <4 x i32>
  %173 = bitcast <2 x i64> %169 to <8 x i16>
  %174 = shufflevector <8 x i16> %173, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %175 = sext <4 x i16> %174 to <4 x i32>
  %176 = shufflevector <2 x i64> %125, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %177 = bitcast <2 x i64> %125 to <8 x i16>
  %178 = shufflevector <8 x i16> %177, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %179 = sext <4 x i16> %178 to <4 x i32>
  %180 = bitcast <2 x i64> %176 to <8 x i16>
  %181 = shufflevector <8 x i16> %180, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %182 = sext <4 x i16> %181 to <4 x i32>
  %183 = shufflevector <2 x i64> %124, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %184 = bitcast <2 x i64> %124 to <8 x i16>
  %185 = shufflevector <8 x i16> %184, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %186 = sext <4 x i16> %185 to <4 x i32>
  %187 = bitcast <2 x i64> %183 to <8 x i16>
  %188 = shufflevector <8 x i16> %187, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %189 = sext <4 x i16> %188 to <4 x i32>
  %190 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %186, i32 %78) #8
  store <4 x i32> %190, <4 x i32>* %46, align 16
  %191 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %189, i32 %78) #8
  store <4 x i32> %191, <4 x i32>* %68, align 16
  %192 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %179, i32 %78) #8
  store <4 x i32> %192, <4 x i32>* %66, align 16
  %193 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %182, i32 %78) #8
  store <4 x i32> %193, <4 x i32>* %67, align 16
  %194 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %172, i32 %78) #8
  store <4 x i32> %194, <4 x i32>* %64, align 16
  %195 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %175, i32 %78) #8
  store <4 x i32> %195, <4 x i32>* %65, align 16
  %196 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %165, i32 %78) #8
  store <4 x i32> %196, <4 x i32>* %63, align 16
  %197 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %168, i32 %78) #8
  store <4 x i32> %197, <4 x i32>* %45, align 16
  %198 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %137, i32 %78) #8
  store <4 x i32> %198, <4 x i32>* %48, align 16
  %199 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %140, i32 %78) #8
  store <4 x i32> %199, <4 x i32>* %50, align 16
  %200 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %144, i32 %78) #8
  store <4 x i32> %200, <4 x i32>* %52, align 16
  %201 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %147, i32 %78) #8
  store <4 x i32> %201, <4 x i32>* %54, align 16
  %202 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %151, i32 %78) #8
  store <4 x i32> %202, <4 x i32>* %56, align 16
  %203 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %154, i32 %78) #8
  store <4 x i32> %203, <4 x i32>* %58, align 16
  %204 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %158, i32 %78) #8
  store <4 x i32> %204, <4 x i32>* %60, align 16
  %205 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %161, i32 %78) #8
  store <4 x i32> %205, <4 x i32>* %62, align 16
  call void %13(<2 x i64>* nonnull %24, <2 x i64>* nonnull %24, i32 %17, i32 2) #8
  %206 = load i8, i8* %69, align 1
  %207 = sext i8 %206 to i32
  %208 = sub nsw i32 0, %207
  %209 = xor i32 %207, -1
  %210 = shl i32 1, %209
  %211 = insertelement <4 x i32> undef, i32 %210, i32 0
  %212 = shufflevector <4 x i32> %211, <4 x i32> undef, <4 x i32> zeroinitializer
  %213 = load <4 x i32>, <4 x i32>* %46, align 16
  %214 = add <4 x i32> %212, %213
  %215 = load <4 x i32>, <4 x i32>* %68, align 16
  %216 = add <4 x i32> %212, %215
  %217 = load <4 x i32>, <4 x i32>* %66, align 16
  %218 = add <4 x i32> %212, %217
  %219 = load <4 x i32>, <4 x i32>* %67, align 16
  %220 = add <4 x i32> %219, %212
  %221 = load <4 x i32>, <4 x i32>* %64, align 16
  %222 = add <4 x i32> %221, %212
  %223 = load <4 x i32>, <4 x i32>* %65, align 16
  %224 = add <4 x i32> %223, %212
  %225 = load <4 x i32>, <4 x i32>* %63, align 16
  %226 = add <4 x i32> %225, %212
  %227 = load <4 x i32>, <4 x i32>* %45, align 16
  %228 = add <4 x i32> %227, %212
  %229 = load <4 x i32>, <4 x i32>* %48, align 16
  %230 = add <4 x i32> %229, %212
  %231 = load <4 x i32>, <4 x i32>* %50, align 16
  %232 = add <4 x i32> %231, %212
  %233 = load <4 x i32>, <4 x i32>* %52, align 16
  %234 = add <4 x i32> %233, %212
  %235 = load <4 x i32>, <4 x i32>* %54, align 16
  %236 = add <4 x i32> %235, %212
  %237 = load <4 x i32>, <4 x i32>* %56, align 16
  %238 = add <4 x i32> %237, %212
  %239 = load <4 x i32>, <4 x i32>* %58, align 16
  %240 = add <4 x i32> %239, %212
  %241 = load <4 x i32>, <4 x i32>* %60, align 16
  %242 = add <4 x i32> %241, %212
  %243 = load <4 x i32>, <4 x i32>* %62, align 16
  %244 = add <4 x i32> %243, %212
  %245 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %214, i32 %208) #8
  store <4 x i32> %245, <4 x i32>* %46, align 16
  %246 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %216, i32 %208) #8
  store <4 x i32> %246, <4 x i32>* %68, align 16
  %247 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %218, i32 %208) #8
  store <4 x i32> %247, <4 x i32>* %66, align 16
  %248 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %220, i32 %208) #8
  store <4 x i32> %248, <4 x i32>* %67, align 16
  %249 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %222, i32 %208) #8
  store <4 x i32> %249, <4 x i32>* %64, align 16
  %250 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %224, i32 %208) #8
  store <4 x i32> %250, <4 x i32>* %65, align 16
  %251 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %226, i32 %208) #8
  store <4 x i32> %251, <4 x i32>* %63, align 16
  %252 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %228, i32 %208) #8
  store <4 x i32> %252, <4 x i32>* %45, align 16
  %253 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %230, i32 %208) #8
  store <4 x i32> %253, <4 x i32>* %48, align 16
  %254 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %232, i32 %208) #8
  store <4 x i32> %254, <4 x i32>* %50, align 16
  %255 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %234, i32 %208) #8
  store <4 x i32> %255, <4 x i32>* %52, align 16
  %256 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %236, i32 %208) #8
  store <4 x i32> %256, <4 x i32>* %54, align 16
  %257 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %238, i32 %208) #8
  store <4 x i32> %257, <4 x i32>* %56, align 16
  %258 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %240, i32 %208) #8
  store <4 x i32> %258, <4 x i32>* %58, align 16
  %259 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %242, i32 %208) #8
  store <4 x i32> %259, <4 x i32>* %60, align 16
  %260 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %244, i32 %208) #8
  store <4 x i32> %260, <4 x i32>* %62, align 16
  %261 = shl nsw i64 %74, 4
  %262 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 %261
  %263 = shufflevector <4 x i32> %245, <4 x i32> %247, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %264 = bitcast <4 x i32> %263 to <2 x i64>
  %265 = shufflevector <4 x i32> %245, <4 x i32> %247, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %266 = bitcast <4 x i32> %265 to <2 x i64>
  %267 = shufflevector <4 x i32> %249, <4 x i32> %251, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %268 = bitcast <4 x i32> %267 to <2 x i64>
  %269 = shufflevector <4 x i32> %249, <4 x i32> %251, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %270 = bitcast <4 x i32> %269 to <2 x i64>
  %271 = shufflevector <2 x i64> %264, <2 x i64> %268, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %271, <2 x i64>* %262, align 16
  %272 = shufflevector <2 x i64> %264, <2 x i64> %268, <2 x i32> <i32 1, i32 3>
  %273 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 2
  store <2 x i64> %272, <2 x i64>* %273, align 16
  %274 = shufflevector <2 x i64> %266, <2 x i64> %270, <2 x i32> <i32 0, i32 2>
  %275 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 4
  store <2 x i64> %274, <2 x i64>* %275, align 16
  %276 = shufflevector <2 x i64> %266, <2 x i64> %270, <2 x i32> <i32 1, i32 3>
  %277 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 6
  store <2 x i64> %276, <2 x i64>* %277, align 16
  %278 = shufflevector <4 x i32> %246, <4 x i32> %248, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %279 = bitcast <4 x i32> %278 to <2 x i64>
  %280 = shufflevector <4 x i32> %246, <4 x i32> %248, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %281 = bitcast <4 x i32> %280 to <2 x i64>
  %282 = shufflevector <4 x i32> %250, <4 x i32> %252, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %283 = bitcast <4 x i32> %282 to <2 x i64>
  %284 = shufflevector <4 x i32> %250, <4 x i32> %252, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %285 = bitcast <4 x i32> %284 to <2 x i64>
  %286 = shufflevector <2 x i64> %279, <2 x i64> %283, <2 x i32> <i32 0, i32 2>
  %287 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 8
  store <2 x i64> %286, <2 x i64>* %287, align 16
  %288 = shufflevector <2 x i64> %279, <2 x i64> %283, <2 x i32> <i32 1, i32 3>
  %289 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 10
  store <2 x i64> %288, <2 x i64>* %289, align 16
  %290 = shufflevector <2 x i64> %281, <2 x i64> %285, <2 x i32> <i32 0, i32 2>
  %291 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 12
  store <2 x i64> %290, <2 x i64>* %291, align 16
  %292 = shufflevector <2 x i64> %281, <2 x i64> %285, <2 x i32> <i32 1, i32 3>
  %293 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 14
  store <2 x i64> %292, <2 x i64>* %293, align 16
  %294 = shufflevector <4 x i32> %253, <4 x i32> %255, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %295 = bitcast <4 x i32> %294 to <2 x i64>
  %296 = shufflevector <4 x i32> %253, <4 x i32> %255, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %297 = bitcast <4 x i32> %296 to <2 x i64>
  %298 = shufflevector <4 x i32> %257, <4 x i32> %259, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %299 = bitcast <4 x i32> %298 to <2 x i64>
  %300 = shufflevector <4 x i32> %257, <4 x i32> %259, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %301 = bitcast <4 x i32> %300 to <2 x i64>
  %302 = shufflevector <2 x i64> %295, <2 x i64> %299, <2 x i32> <i32 0, i32 2>
  %303 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 1
  store <2 x i64> %302, <2 x i64>* %303, align 16
  %304 = shufflevector <2 x i64> %295, <2 x i64> %299, <2 x i32> <i32 1, i32 3>
  %305 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 3
  store <2 x i64> %304, <2 x i64>* %305, align 16
  %306 = shufflevector <2 x i64> %297, <2 x i64> %301, <2 x i32> <i32 0, i32 2>
  %307 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 5
  store <2 x i64> %306, <2 x i64>* %307, align 16
  %308 = shufflevector <2 x i64> %297, <2 x i64> %301, <2 x i32> <i32 1, i32 3>
  %309 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 7
  store <2 x i64> %308, <2 x i64>* %309, align 16
  %310 = shufflevector <4 x i32> %254, <4 x i32> %256, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %311 = bitcast <4 x i32> %310 to <2 x i64>
  %312 = shufflevector <4 x i32> %254, <4 x i32> %256, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %313 = bitcast <4 x i32> %312 to <2 x i64>
  %314 = shufflevector <4 x i32> %258, <4 x i32> %260, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %315 = bitcast <4 x i32> %314 to <2 x i64>
  %316 = shufflevector <4 x i32> %258, <4 x i32> %260, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %317 = bitcast <4 x i32> %316 to <2 x i64>
  %318 = shufflevector <2 x i64> %311, <2 x i64> %315, <2 x i32> <i32 0, i32 2>
  %319 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 9
  store <2 x i64> %318, <2 x i64>* %319, align 16
  %320 = shufflevector <2 x i64> %311, <2 x i64> %315, <2 x i32> <i32 1, i32 3>
  %321 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 11
  store <2 x i64> %320, <2 x i64>* %321, align 16
  %322 = shufflevector <2 x i64> %313, <2 x i64> %317, <2 x i32> <i32 0, i32 2>
  %323 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 13
  store <2 x i64> %322, <2 x i64>* %323, align 16
  %324 = shufflevector <2 x i64> %313, <2 x i64> %317, <2 x i32> <i32 1, i32 3>
  %325 = getelementptr inbounds <2 x i64>, <2 x i64>* %262, i64 15
  store <2 x i64> %324, <2 x i64>* %325, align 16
  %326 = add nuw nsw i64 %74, 1
  %327 = icmp eq i64 %326, 2
  br i1 %327, label %70, label %73

328:                                              ; preds = %70
  %329 = load <2 x i64>, <2 x i64>* %72, align 16
  %330 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 30
  store <2 x i64> %329, <2 x i64>* %330, align 16
  %331 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 2
  %332 = load <2 x i64>, <2 x i64>* %331, align 16
  %333 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 28
  store <2 x i64> %332, <2 x i64>* %333, align 16
  %334 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 4
  %335 = load <2 x i64>, <2 x i64>* %334, align 16
  %336 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 26
  store <2 x i64> %335, <2 x i64>* %336, align 16
  %337 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 6
  %338 = load <2 x i64>, <2 x i64>* %337, align 16
  %339 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 24
  store <2 x i64> %338, <2 x i64>* %339, align 16
  %340 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 8
  %341 = load <2 x i64>, <2 x i64>* %340, align 16
  %342 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %341, <2 x i64>* %342, align 16
  %343 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 10
  %344 = load <2 x i64>, <2 x i64>* %343, align 16
  %345 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %344, <2 x i64>* %345, align 16
  %346 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 12
  %347 = load <2 x i64>, <2 x i64>* %346, align 16
  %348 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %347, <2 x i64>* %348, align 16
  %349 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 14
  %350 = load <2 x i64>, <2 x i64>* %349, align 16
  %351 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 16
  store <2 x i64> %350, <2 x i64>* %351, align 16
  %352 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 16
  %353 = load <2 x i64>, <2 x i64>* %352, align 16
  store <2 x i64> %353, <2 x i64>* %59, align 16
  %354 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 18
  %355 = load <2 x i64>, <2 x i64>* %354, align 16
  store <2 x i64> %355, <2 x i64>* %55, align 16
  %356 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 20
  %357 = load <2 x i64>, <2 x i64>* %356, align 16
  store <2 x i64> %357, <2 x i64>* %51, align 16
  %358 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 22
  %359 = load <2 x i64>, <2 x i64>* %358, align 16
  store <2 x i64> %359, <2 x i64>* %47, align 16
  %360 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 24
  %361 = load <2 x i64>, <2 x i64>* %360, align 16
  store <2 x i64> %361, <2 x i64>* %43, align 16
  %362 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 26
  %363 = load <2 x i64>, <2 x i64>* %362, align 16
  store <2 x i64> %363, <2 x i64>* %38, align 16
  %364 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 28
  %365 = load <2 x i64>, <2 x i64>* %364, align 16
  store <2 x i64> %365, <2 x i64>* %32, align 16
  %366 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 30
  %367 = load <2 x i64>, <2 x i64>* %366, align 16
  store <2 x i64> %367, <2 x i64>* %24, align 16
  %368 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 1
  %369 = load <2 x i64>, <2 x i64>* %368, align 16
  %370 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 31
  store <2 x i64> %369, <2 x i64>* %370, align 16
  %371 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 3
  %372 = load <2 x i64>, <2 x i64>* %371, align 16
  %373 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 29
  store <2 x i64> %372, <2 x i64>* %373, align 16
  %374 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 5
  %375 = load <2 x i64>, <2 x i64>* %374, align 16
  %376 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 27
  store <2 x i64> %375, <2 x i64>* %376, align 16
  %377 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 7
  %378 = load <2 x i64>, <2 x i64>* %377, align 16
  %379 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 25
  store <2 x i64> %378, <2 x i64>* %379, align 16
  %380 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 9
  %381 = load <2 x i64>, <2 x i64>* %380, align 16
  %382 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %381, <2 x i64>* %382, align 16
  %383 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 11
  %384 = load <2 x i64>, <2 x i64>* %383, align 16
  %385 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %384, <2 x i64>* %385, align 16
  %386 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 13
  %387 = load <2 x i64>, <2 x i64>* %386, align 16
  %388 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %387, <2 x i64>* %388, align 16
  %389 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 15
  %390 = load <2 x i64>, <2 x i64>* %389, align 16
  %391 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %390, <2 x i64>* %391, align 16
  %392 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 17
  %393 = load <2 x i64>, <2 x i64>* %392, align 16
  store <2 x i64> %393, <2 x i64>* %61, align 16
  %394 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 19
  %395 = load <2 x i64>, <2 x i64>* %394, align 16
  store <2 x i64> %395, <2 x i64>* %57, align 16
  %396 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 21
  %397 = load <2 x i64>, <2 x i64>* %396, align 16
  store <2 x i64> %397, <2 x i64>* %53, align 16
  %398 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 23
  %399 = load <2 x i64>, <2 x i64>* %398, align 16
  store <2 x i64> %399, <2 x i64>* %49, align 16
  %400 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 25
  %401 = load <2 x i64>, <2 x i64>* %400, align 16
  store <2 x i64> %401, <2 x i64>* %44, align 16
  %402 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 27
  %403 = load <2 x i64>, <2 x i64>* %402, align 16
  store <2 x i64> %403, <2 x i64>* %41, align 16
  %404 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 29
  %405 = load <2 x i64>, <2 x i64>* %404, align 16
  store <2 x i64> %405, <2 x i64>* %35, align 16
  %406 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 31
  %407 = load <2 x i64>, <2 x i64>* %406, align 16
  store <2 x i64> %407, <2 x i64>* %29, align 16
  br label %408

408:                                              ; preds = %70, %328
  %409 = phi <2 x i64>* [ %24, %328 ], [ %72, %70 ]
  call void %15(<2 x i64>* nonnull %409, <2 x i64>* nonnull %72, i32 %17, i32 2) #8
  %410 = getelementptr inbounds i8, i8* %10, i64 2
  %411 = bitcast [32 x <2 x i64>]* %6 to <4 x i32>*
  %412 = bitcast [32 x <2 x i64>]* %6 to <4 x i32>*
  br label %414

413:                                              ; preds = %686
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #8
  ret void

414:                                              ; preds = %686, %408
  %415 = phi i64 [ 0, %408 ], [ %739, %686 ]
  %416 = shl nsw i64 %415, 4
  %417 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 %416
  %418 = bitcast <2 x i64>* %417 to <4 x i32>*
  %419 = load <4 x i32>, <4 x i32>* %418, align 16
  %420 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 2
  %421 = bitcast <2 x i64>* %420 to <4 x i32>*
  %422 = load <4 x i32>, <4 x i32>* %421, align 16
  %423 = shufflevector <4 x i32> %419, <4 x i32> %422, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %424 = bitcast <4 x i32> %423 to <2 x i64>
  %425 = shufflevector <4 x i32> %419, <4 x i32> %422, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %426 = bitcast <4 x i32> %425 to <2 x i64>
  %427 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 4
  %428 = bitcast <2 x i64>* %427 to <4 x i32>*
  %429 = load <4 x i32>, <4 x i32>* %428, align 16
  %430 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 6
  %431 = bitcast <2 x i64>* %430 to <4 x i32>*
  %432 = load <4 x i32>, <4 x i32>* %431, align 16
  %433 = shufflevector <4 x i32> %429, <4 x i32> %432, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %434 = bitcast <4 x i32> %433 to <2 x i64>
  %435 = shufflevector <4 x i32> %429, <4 x i32> %432, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %436 = bitcast <4 x i32> %435 to <2 x i64>
  %437 = shufflevector <2 x i64> %424, <2 x i64> %434, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %437, <2 x i64>* %24, align 16
  %438 = shufflevector <2 x i64> %424, <2 x i64> %434, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %438, <2 x i64>* %32, align 16
  %439 = shufflevector <2 x i64> %426, <2 x i64> %436, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %439, <2 x i64>* %38, align 16
  %440 = shufflevector <2 x i64> %426, <2 x i64> %436, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %440, <2 x i64>* %43, align 16
  %441 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 1
  %442 = bitcast <2 x i64>* %441 to <4 x i32>*
  %443 = load <4 x i32>, <4 x i32>* %442, align 16
  %444 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 3
  %445 = bitcast <2 x i64>* %444 to <4 x i32>*
  %446 = load <4 x i32>, <4 x i32>* %445, align 16
  %447 = shufflevector <4 x i32> %443, <4 x i32> %446, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %448 = bitcast <4 x i32> %447 to <2 x i64>
  %449 = shufflevector <4 x i32> %443, <4 x i32> %446, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %450 = bitcast <4 x i32> %449 to <2 x i64>
  %451 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 5
  %452 = bitcast <2 x i64>* %451 to <4 x i32>*
  %453 = load <4 x i32>, <4 x i32>* %452, align 16
  %454 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 7
  %455 = bitcast <2 x i64>* %454 to <4 x i32>*
  %456 = load <4 x i32>, <4 x i32>* %455, align 16
  %457 = shufflevector <4 x i32> %453, <4 x i32> %456, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %458 = bitcast <4 x i32> %457 to <2 x i64>
  %459 = shufflevector <4 x i32> %453, <4 x i32> %456, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %460 = bitcast <4 x i32> %459 to <2 x i64>
  %461 = shufflevector <2 x i64> %448, <2 x i64> %458, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %461, <2 x i64>* %47, align 16
  %462 = shufflevector <2 x i64> %448, <2 x i64> %458, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %462, <2 x i64>* %51, align 16
  %463 = shufflevector <2 x i64> %450, <2 x i64> %460, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %463, <2 x i64>* %55, align 16
  %464 = shufflevector <2 x i64> %450, <2 x i64> %460, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %464, <2 x i64>* %59, align 16
  %465 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 8
  %466 = bitcast <2 x i64>* %465 to <4 x i32>*
  %467 = load <4 x i32>, <4 x i32>* %466, align 16
  %468 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 10
  %469 = bitcast <2 x i64>* %468 to <4 x i32>*
  %470 = load <4 x i32>, <4 x i32>* %469, align 16
  %471 = shufflevector <4 x i32> %467, <4 x i32> %470, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %472 = bitcast <4 x i32> %471 to <2 x i64>
  %473 = shufflevector <4 x i32> %467, <4 x i32> %470, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %474 = bitcast <4 x i32> %473 to <2 x i64>
  %475 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 12
  %476 = bitcast <2 x i64>* %475 to <4 x i32>*
  %477 = load <4 x i32>, <4 x i32>* %476, align 16
  %478 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 14
  %479 = bitcast <2 x i64>* %478 to <4 x i32>*
  %480 = load <4 x i32>, <4 x i32>* %479, align 16
  %481 = shufflevector <4 x i32> %477, <4 x i32> %480, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %482 = bitcast <4 x i32> %481 to <2 x i64>
  %483 = shufflevector <4 x i32> %477, <4 x i32> %480, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %484 = bitcast <4 x i32> %483 to <2 x i64>
  %485 = shufflevector <2 x i64> %472, <2 x i64> %482, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %485, <2 x i64>* %29, align 16
  %486 = shufflevector <2 x i64> %472, <2 x i64> %482, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %486, <2 x i64>* %35, align 16
  %487 = shufflevector <2 x i64> %474, <2 x i64> %484, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %487, <2 x i64>* %41, align 16
  %488 = shufflevector <2 x i64> %474, <2 x i64> %484, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %488, <2 x i64>* %44, align 16
  %489 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 9
  %490 = bitcast <2 x i64>* %489 to <4 x i32>*
  %491 = load <4 x i32>, <4 x i32>* %490, align 16
  %492 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 11
  %493 = bitcast <2 x i64>* %492 to <4 x i32>*
  %494 = load <4 x i32>, <4 x i32>* %493, align 16
  %495 = shufflevector <4 x i32> %491, <4 x i32> %494, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %496 = bitcast <4 x i32> %495 to <2 x i64>
  %497 = shufflevector <4 x i32> %491, <4 x i32> %494, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %498 = bitcast <4 x i32> %497 to <2 x i64>
  %499 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 13
  %500 = bitcast <2 x i64>* %499 to <4 x i32>*
  %501 = load <4 x i32>, <4 x i32>* %500, align 16
  %502 = getelementptr inbounds <2 x i64>, <2 x i64>* %417, i64 15
  %503 = bitcast <2 x i64>* %502 to <4 x i32>*
  %504 = load <4 x i32>, <4 x i32>* %503, align 16
  %505 = shufflevector <4 x i32> %501, <4 x i32> %504, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %506 = bitcast <4 x i32> %505 to <2 x i64>
  %507 = shufflevector <4 x i32> %501, <4 x i32> %504, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %508 = bitcast <4 x i32> %507 to <2 x i64>
  %509 = shufflevector <2 x i64> %496, <2 x i64> %506, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %509, <2 x i64>* %49, align 16
  %510 = shufflevector <2 x i64> %496, <2 x i64> %506, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %510, <2 x i64>* %53, align 16
  %511 = shufflevector <2 x i64> %498, <2 x i64> %508, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %511, <2 x i64>* %57, align 16
  %512 = shufflevector <2 x i64> %498, <2 x i64> %508, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %512, <2 x i64>* %61, align 16
  %513 = load i8, i8* %410, align 1
  %514 = sext i8 %513 to i32
  %515 = sub nsw i32 0, %514
  %516 = icmp slt i8 %513, 0
  %517 = bitcast <2 x i64> %485 to <4 x i32>
  %518 = bitcast <2 x i64> %486 to <4 x i32>
  %519 = bitcast <2 x i64> %487 to <4 x i32>
  %520 = bitcast <2 x i64> %488 to <4 x i32>
  %521 = bitcast <2 x i64> %509 to <4 x i32>
  %522 = bitcast <2 x i64> %510 to <4 x i32>
  %523 = bitcast <2 x i64> %511 to <4 x i32>
  br i1 %516, label %595, label %524

524:                                              ; preds = %414
  %525 = bitcast <2 x i64> %512 to <4 x i32>
  %526 = bitcast <2 x i64> %464 to <4 x i32>
  %527 = bitcast <2 x i64> %463 to <4 x i32>
  %528 = bitcast <2 x i64> %462 to <4 x i32>
  %529 = bitcast <2 x i64> %461 to <4 x i32>
  %530 = bitcast <2 x i64> %438 to <4 x i32>
  %531 = bitcast <2 x i64> %437 to <4 x i32>
  %532 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %531, i32 %514) #8
  %533 = mul <4 x i32> %532, <i32 5793, i32 5793, i32 5793, i32 5793>
  %534 = add <4 x i32> %533, <i32 2048, i32 2048, i32 2048, i32 2048>
  %535 = ashr <4 x i32> %534, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %535, <4 x i32>* %411, align 16
  %536 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %517, i32 %514) #8
  %537 = mul <4 x i32> %536, <i32 5793, i32 5793, i32 5793, i32 5793>
  %538 = add <4 x i32> %537, <i32 2048, i32 2048, i32 2048, i32 2048>
  %539 = ashr <4 x i32> %538, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %539, <4 x i32>* %68, align 16
  %540 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %530, i32 %514) #8
  %541 = mul <4 x i32> %540, <i32 5793, i32 5793, i32 5793, i32 5793>
  %542 = add <4 x i32> %541, <i32 2048, i32 2048, i32 2048, i32 2048>
  %543 = ashr <4 x i32> %542, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %543, <4 x i32>* %66, align 16
  %544 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %518, i32 %514) #8
  %545 = mul <4 x i32> %544, <i32 5793, i32 5793, i32 5793, i32 5793>
  %546 = add <4 x i32> %545, <i32 2048, i32 2048, i32 2048, i32 2048>
  %547 = ashr <4 x i32> %546, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %547, <4 x i32>* %67, align 16
  %548 = load <4 x i32>, <4 x i32>* %64, align 16
  %549 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %548, i32 %514) #8
  %550 = mul <4 x i32> %549, <i32 5793, i32 5793, i32 5793, i32 5793>
  %551 = add <4 x i32> %550, <i32 2048, i32 2048, i32 2048, i32 2048>
  %552 = ashr <4 x i32> %551, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %552, <4 x i32>* %64, align 16
  %553 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %519, i32 %514) #8
  %554 = mul <4 x i32> %553, <i32 5793, i32 5793, i32 5793, i32 5793>
  %555 = add <4 x i32> %554, <i32 2048, i32 2048, i32 2048, i32 2048>
  %556 = ashr <4 x i32> %555, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %556, <4 x i32>* %65, align 16
  %557 = load <4 x i32>, <4 x i32>* %63, align 16
  %558 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %557, i32 %514) #8
  %559 = mul <4 x i32> %558, <i32 5793, i32 5793, i32 5793, i32 5793>
  %560 = add <4 x i32> %559, <i32 2048, i32 2048, i32 2048, i32 2048>
  %561 = ashr <4 x i32> %560, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %561, <4 x i32>* %63, align 16
  %562 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %520, i32 %514) #8
  %563 = mul <4 x i32> %562, <i32 5793, i32 5793, i32 5793, i32 5793>
  %564 = add <4 x i32> %563, <i32 2048, i32 2048, i32 2048, i32 2048>
  %565 = ashr <4 x i32> %564, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %565, <4 x i32>* %45, align 16
  %566 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %529, i32 %514) #8
  %567 = mul <4 x i32> %566, <i32 5793, i32 5793, i32 5793, i32 5793>
  %568 = add <4 x i32> %567, <i32 2048, i32 2048, i32 2048, i32 2048>
  %569 = ashr <4 x i32> %568, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %569, <4 x i32>* %48, align 16
  %570 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %521, i32 %514) #8
  %571 = mul <4 x i32> %570, <i32 5793, i32 5793, i32 5793, i32 5793>
  %572 = add <4 x i32> %571, <i32 2048, i32 2048, i32 2048, i32 2048>
  %573 = ashr <4 x i32> %572, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %573, <4 x i32>* %50, align 16
  %574 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %528, i32 %514) #8
  %575 = mul <4 x i32> %574, <i32 5793, i32 5793, i32 5793, i32 5793>
  %576 = add <4 x i32> %575, <i32 2048, i32 2048, i32 2048, i32 2048>
  %577 = ashr <4 x i32> %576, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %577, <4 x i32>* %52, align 16
  %578 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %522, i32 %514) #8
  %579 = mul <4 x i32> %578, <i32 5793, i32 5793, i32 5793, i32 5793>
  %580 = add <4 x i32> %579, <i32 2048, i32 2048, i32 2048, i32 2048>
  %581 = ashr <4 x i32> %580, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %581, <4 x i32>* %54, align 16
  %582 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %527, i32 %514) #8
  %583 = mul <4 x i32> %582, <i32 5793, i32 5793, i32 5793, i32 5793>
  %584 = add <4 x i32> %583, <i32 2048, i32 2048, i32 2048, i32 2048>
  %585 = ashr <4 x i32> %584, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %585, <4 x i32>* %56, align 16
  %586 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %523, i32 %514) #8
  %587 = mul <4 x i32> %586, <i32 5793, i32 5793, i32 5793, i32 5793>
  %588 = add <4 x i32> %587, <i32 2048, i32 2048, i32 2048, i32 2048>
  %589 = ashr <4 x i32> %588, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %589, <4 x i32>* %58, align 16
  %590 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %526, i32 %514) #8
  %591 = mul <4 x i32> %590, <i32 5793, i32 5793, i32 5793, i32 5793>
  %592 = add <4 x i32> %591, <i32 2048, i32 2048, i32 2048, i32 2048>
  %593 = ashr <4 x i32> %592, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %593, <4 x i32>* %60, align 16
  %594 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %525, i32 %514) #8
  br label %686

595:                                              ; preds = %414
  %596 = xor i32 %514, -1
  %597 = shl i32 1, %596
  %598 = insertelement <4 x i32> undef, i32 %597, i32 0
  %599 = shufflevector <4 x i32> %598, <4 x i32> undef, <4 x i32> zeroinitializer
  %600 = load <4 x i32>, <4 x i32>* %412, align 16
  %601 = add <4 x i32> %600, %599
  %602 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %601, i32 %515) #8
  %603 = mul <4 x i32> %602, <i32 5793, i32 5793, i32 5793, i32 5793>
  %604 = add <4 x i32> %603, <i32 2048, i32 2048, i32 2048, i32 2048>
  %605 = ashr <4 x i32> %604, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %605, <4 x i32>* %412, align 16
  %606 = add <4 x i32> %599, %517
  %607 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %606, i32 %515) #8
  %608 = mul <4 x i32> %607, <i32 5793, i32 5793, i32 5793, i32 5793>
  %609 = add <4 x i32> %608, <i32 2048, i32 2048, i32 2048, i32 2048>
  %610 = ashr <4 x i32> %609, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %610, <4 x i32>* %68, align 16
  %611 = load <4 x i32>, <4 x i32>* %66, align 16
  %612 = add <4 x i32> %611, %599
  %613 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %612, i32 %515) #8
  %614 = mul <4 x i32> %613, <i32 5793, i32 5793, i32 5793, i32 5793>
  %615 = add <4 x i32> %614, <i32 2048, i32 2048, i32 2048, i32 2048>
  %616 = ashr <4 x i32> %615, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %616, <4 x i32>* %66, align 16
  %617 = add <4 x i32> %599, %518
  %618 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %617, i32 %515) #8
  %619 = mul <4 x i32> %618, <i32 5793, i32 5793, i32 5793, i32 5793>
  %620 = add <4 x i32> %619, <i32 2048, i32 2048, i32 2048, i32 2048>
  %621 = ashr <4 x i32> %620, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %621, <4 x i32>* %67, align 16
  %622 = load <4 x i32>, <4 x i32>* %64, align 16
  %623 = add <4 x i32> %622, %599
  %624 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %623, i32 %515) #8
  %625 = mul <4 x i32> %624, <i32 5793, i32 5793, i32 5793, i32 5793>
  %626 = add <4 x i32> %625, <i32 2048, i32 2048, i32 2048, i32 2048>
  %627 = ashr <4 x i32> %626, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %627, <4 x i32>* %64, align 16
  %628 = add <4 x i32> %599, %519
  %629 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %628, i32 %515) #8
  %630 = mul <4 x i32> %629, <i32 5793, i32 5793, i32 5793, i32 5793>
  %631 = add <4 x i32> %630, <i32 2048, i32 2048, i32 2048, i32 2048>
  %632 = ashr <4 x i32> %631, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %632, <4 x i32>* %65, align 16
  %633 = load <4 x i32>, <4 x i32>* %63, align 16
  %634 = add <4 x i32> %633, %599
  %635 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %634, i32 %515) #8
  %636 = mul <4 x i32> %635, <i32 5793, i32 5793, i32 5793, i32 5793>
  %637 = add <4 x i32> %636, <i32 2048, i32 2048, i32 2048, i32 2048>
  %638 = ashr <4 x i32> %637, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %638, <4 x i32>* %63, align 16
  %639 = add <4 x i32> %599, %520
  %640 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %639, i32 %515) #8
  %641 = mul <4 x i32> %640, <i32 5793, i32 5793, i32 5793, i32 5793>
  %642 = add <4 x i32> %641, <i32 2048, i32 2048, i32 2048, i32 2048>
  %643 = ashr <4 x i32> %642, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %643, <4 x i32>* %45, align 16
  %644 = load <4 x i32>, <4 x i32>* %48, align 16
  %645 = add <4 x i32> %644, %599
  %646 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %645, i32 %515) #8
  %647 = mul <4 x i32> %646, <i32 5793, i32 5793, i32 5793, i32 5793>
  %648 = add <4 x i32> %647, <i32 2048, i32 2048, i32 2048, i32 2048>
  %649 = ashr <4 x i32> %648, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %649, <4 x i32>* %48, align 16
  %650 = add <4 x i32> %599, %521
  %651 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %650, i32 %515) #8
  %652 = mul <4 x i32> %651, <i32 5793, i32 5793, i32 5793, i32 5793>
  %653 = add <4 x i32> %652, <i32 2048, i32 2048, i32 2048, i32 2048>
  %654 = ashr <4 x i32> %653, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %654, <4 x i32>* %50, align 16
  %655 = load <4 x i32>, <4 x i32>* %52, align 16
  %656 = add <4 x i32> %655, %599
  %657 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %656, i32 %515) #8
  %658 = mul <4 x i32> %657, <i32 5793, i32 5793, i32 5793, i32 5793>
  %659 = add <4 x i32> %658, <i32 2048, i32 2048, i32 2048, i32 2048>
  %660 = ashr <4 x i32> %659, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %660, <4 x i32>* %52, align 16
  %661 = add <4 x i32> %599, %522
  %662 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %661, i32 %515) #8
  %663 = mul <4 x i32> %662, <i32 5793, i32 5793, i32 5793, i32 5793>
  %664 = add <4 x i32> %663, <i32 2048, i32 2048, i32 2048, i32 2048>
  %665 = ashr <4 x i32> %664, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %665, <4 x i32>* %54, align 16
  %666 = load <4 x i32>, <4 x i32>* %56, align 16
  %667 = add <4 x i32> %666, %599
  %668 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %667, i32 %515) #8
  %669 = mul <4 x i32> %668, <i32 5793, i32 5793, i32 5793, i32 5793>
  %670 = add <4 x i32> %669, <i32 2048, i32 2048, i32 2048, i32 2048>
  %671 = ashr <4 x i32> %670, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %671, <4 x i32>* %56, align 16
  %672 = add <4 x i32> %599, %523
  %673 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %672, i32 %515) #8
  %674 = mul <4 x i32> %673, <i32 5793, i32 5793, i32 5793, i32 5793>
  %675 = add <4 x i32> %674, <i32 2048, i32 2048, i32 2048, i32 2048>
  %676 = ashr <4 x i32> %675, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %676, <4 x i32>* %58, align 16
  %677 = load <4 x i32>, <4 x i32>* %60, align 16
  %678 = add <4 x i32> %677, %599
  %679 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %678, i32 %515) #8
  %680 = mul <4 x i32> %679, <i32 5793, i32 5793, i32 5793, i32 5793>
  %681 = add <4 x i32> %680, <i32 2048, i32 2048, i32 2048, i32 2048>
  %682 = ashr <4 x i32> %681, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %682, <4 x i32>* %60, align 16
  %683 = load <4 x i32>, <4 x i32>* %62, align 16
  %684 = add <4 x i32> %683, %599
  %685 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %684, i32 %515) #8
  br label %686

686:                                              ; preds = %524, %595
  %687 = phi <4 x i32> [ %594, %524 ], [ %685, %595 ]
  %688 = phi <4 x i32> [ %593, %524 ], [ %682, %595 ]
  %689 = phi <4 x i32> [ %589, %524 ], [ %676, %595 ]
  %690 = phi <4 x i32> [ %585, %524 ], [ %671, %595 ]
  %691 = phi <4 x i32> [ %581, %524 ], [ %665, %595 ]
  %692 = phi <4 x i32> [ %577, %524 ], [ %660, %595 ]
  %693 = phi <4 x i32> [ %573, %524 ], [ %654, %595 ]
  %694 = phi <4 x i32> [ %569, %524 ], [ %649, %595 ]
  %695 = phi <4 x i32> [ %565, %524 ], [ %643, %595 ]
  %696 = phi <4 x i32> [ %561, %524 ], [ %638, %595 ]
  %697 = phi <4 x i32> [ %556, %524 ], [ %632, %595 ]
  %698 = phi <4 x i32> [ %552, %524 ], [ %627, %595 ]
  %699 = phi <4 x i32> [ %547, %524 ], [ %621, %595 ]
  %700 = phi <4 x i32> [ %543, %524 ], [ %616, %595 ]
  %701 = phi <4 x i32> [ %539, %524 ], [ %610, %595 ]
  %702 = phi <4 x i32> [ %535, %524 ], [ %605, %595 ]
  %703 = mul <4 x i32> %687, <i32 5793, i32 5793, i32 5793, i32 5793>
  %704 = add <4 x i32> %703, <i32 2048, i32 2048, i32 2048, i32 2048>
  %705 = ashr <4 x i32> %704, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %705, <4 x i32>* %62, align 16
  %706 = shl nsw i64 %415, 3
  %707 = getelementptr inbounds i32, i32* %1, i64 %706
  %708 = bitcast i32* %707 to <4 x i32>*
  store <4 x i32> %702, <4 x i32>* %708, align 1
  %709 = getelementptr inbounds i32, i32* %707, i64 4
  %710 = bitcast i32* %709 to <4 x i32>*
  store <4 x i32> %701, <4 x i32>* %710, align 1
  %711 = getelementptr inbounds i32, i32* %707, i64 16
  %712 = bitcast i32* %711 to <4 x i32>*
  store <4 x i32> %700, <4 x i32>* %712, align 1
  %713 = getelementptr inbounds i32, i32* %707, i64 20
  %714 = bitcast i32* %713 to <4 x i32>*
  store <4 x i32> %699, <4 x i32>* %714, align 1
  %715 = getelementptr inbounds i32, i32* %707, i64 32
  %716 = bitcast i32* %715 to <4 x i32>*
  store <4 x i32> %698, <4 x i32>* %716, align 1
  %717 = getelementptr inbounds i32, i32* %707, i64 36
  %718 = bitcast i32* %717 to <4 x i32>*
  store <4 x i32> %697, <4 x i32>* %718, align 1
  %719 = getelementptr inbounds i32, i32* %707, i64 48
  %720 = bitcast i32* %719 to <4 x i32>*
  store <4 x i32> %696, <4 x i32>* %720, align 1
  %721 = getelementptr inbounds i32, i32* %707, i64 52
  %722 = bitcast i32* %721 to <4 x i32>*
  store <4 x i32> %695, <4 x i32>* %722, align 1
  %723 = getelementptr inbounds i32, i32* %707, i64 64
  %724 = bitcast i32* %723 to <4 x i32>*
  store <4 x i32> %694, <4 x i32>* %724, align 1
  %725 = getelementptr inbounds i32, i32* %707, i64 68
  %726 = bitcast i32* %725 to <4 x i32>*
  store <4 x i32> %693, <4 x i32>* %726, align 1
  %727 = getelementptr inbounds i32, i32* %707, i64 80
  %728 = bitcast i32* %727 to <4 x i32>*
  store <4 x i32> %692, <4 x i32>* %728, align 1
  %729 = getelementptr inbounds i32, i32* %707, i64 84
  %730 = bitcast i32* %729 to <4 x i32>*
  store <4 x i32> %691, <4 x i32>* %730, align 1
  %731 = getelementptr inbounds i32, i32* %707, i64 96
  %732 = bitcast i32* %731 to <4 x i32>*
  store <4 x i32> %690, <4 x i32>* %732, align 1
  %733 = getelementptr inbounds i32, i32* %707, i64 100
  %734 = bitcast i32* %733 to <4 x i32>*
  store <4 x i32> %689, <4 x i32>* %734, align 1
  %735 = getelementptr inbounds i32, i32* %707, i64 112
  %736 = bitcast i32* %735 to <4 x i32>*
  store <4 x i32> %688, <4 x i32>* %736, align 1
  %737 = getelementptr inbounds i32, i32* %707, i64 116
  %738 = bitcast i32* %737 to <4 x i32>*
  store <4 x i32> %705, <4 x i32>* %738, align 1
  %739 = add nuw nsw i64 %415, 1
  %740 = icmp eq i64 %739, 2
  br i1 %740, label %413, label %414
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_8x16_sse4_1(i16* nocapture readonly, i32* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [32 x <2 x i64>], align 16
  %7 = alloca [32 x <2 x i64>], align 16
  %8 = bitcast [32 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 512, i1 false)
  %9 = bitcast [32 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %9) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 512, i1 false)
  %10 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 7), align 8
  %11 = zext i8 %3 to i64
  %12 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @col_highbd_txfm8x16_arr, i64 0, i64 %11
  %13 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %12, align 8
  %14 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @row_highbd_txfm8x8_arr, i64 0, i64 %11
  %15 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %14, align 8
  %16 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 2), align 1
  %17 = sext i8 %16 to i32
  switch i8 %3, label %20 [
    i8 6, label %19
    i8 15, label %18
    i8 7, label %18
    i8 5, label %18
    i8 14, label %52
    i8 8, label %52
    i8 4, label %52
  ]

18:                                               ; preds = %5, %5, %5
  br label %20

19:                                               ; preds = %5
  br label %52

20:                                               ; preds = %18, %5
  %21 = phi i32 [ 0, %5 ], [ 1, %18 ]
  %22 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 0
  %23 = load i8, i8* %10, align 1
  %24 = shl nsw i32 %2, 3
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i16, i16* %0, i64 %25
  %27 = bitcast i16* %0 to <2 x i64>*
  %28 = load <2 x i64>, <2 x i64>* %27, align 16
  store <2 x i64> %28, <2 x i64>* %22, align 16
  %29 = sext i32 %2 to i64
  %30 = getelementptr inbounds i16, i16* %0, i64 %29
  %31 = bitcast i16* %30 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 16
  %33 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %32, <2 x i64>* %33, align 16
  %34 = shl nsw i32 %2, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %0, i64 %35
  %37 = mul nsw i32 %2, 3
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i16, i16* %0, i64 %38
  %40 = shl nsw i32 %2, 2
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i16, i16* %0, i64 %41
  %43 = mul nsw i32 %2, 5
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i16, i16* %0, i64 %44
  %46 = mul nsw i32 %2, 6
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i16, i16* %0, i64 %47
  %49 = mul nsw i32 %2, 7
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i16, i16* %0, i64 %50
  br label %84

52:                                               ; preds = %5, %5, %5, %19
  %53 = phi i32 [ 1, %19 ], [ 0, %5 ], [ 0, %5 ], [ 0, %5 ]
  %54 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 0
  %55 = load i8, i8* %10, align 1
  %56 = shl nsw i32 %2, 3
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i16, i16* %0, i64 %57
  %59 = mul nsw i32 %2, 7
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i16, i16* %58, i64 %60
  %62 = bitcast i16* %61 to <2 x i64>*
  %63 = load <2 x i64>, <2 x i64>* %62, align 16
  store <2 x i64> %63, <2 x i64>* %54, align 16
  %64 = mul nsw i32 %2, 6
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i16, i16* %58, i64 %65
  %67 = bitcast i16* %66 to <2 x i64>*
  %68 = load <2 x i64>, <2 x i64>* %67, align 16
  %69 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %68, <2 x i64>* %69, align 16
  %70 = mul nsw i32 %2, 5
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i16, i16* %58, i64 %71
  %73 = shl nsw i32 %2, 2
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i16, i16* %58, i64 %74
  %76 = mul nsw i32 %2, 3
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i16, i16* %58, i64 %77
  %79 = shl nsw i32 %2, 1
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i16, i16* %58, i64 %80
  %82 = sext i32 %2 to i64
  %83 = getelementptr inbounds i16, i16* %58, i64 %82
  br label %84

84:                                               ; preds = %52, %20
  %85 = phi i16* [ %0, %52 ], [ %26, %20 ]
  %86 = phi i8 [ %55, %52 ], [ %23, %20 ]
  %87 = phi <2 x i64>* [ %54, %52 ], [ %22, %20 ]
  %88 = phi i32 [ %53, %52 ], [ %21, %20 ]
  %89 = phi i1 [ false, %52 ], [ true, %20 ]
  %90 = phi i16* [ %72, %52 ], [ %36, %20 ]
  %91 = phi i16* [ %75, %52 ], [ %39, %20 ]
  %92 = phi i16* [ %78, %52 ], [ %42, %20 ]
  %93 = phi i16* [ %81, %52 ], [ %45, %20 ]
  %94 = phi i16* [ %83, %52 ], [ %48, %20 ]
  %95 = phi <2 x i64> [ %63, %52 ], [ %28, %20 ]
  %96 = phi <2 x i64> [ %68, %52 ], [ %32, %20 ]
  %97 = phi i16* [ %58, %52 ], [ %51, %20 ]
  %98 = bitcast i16* %94 to <2 x i64>*
  %99 = bitcast i16* %93 to <2 x i64>*
  %100 = bitcast i16* %92 to <2 x i64>*
  %101 = bitcast i16* %91 to <2 x i64>*
  %102 = bitcast i16* %90 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %98, align 16
  %104 = load <2 x i64>, <2 x i64>* %99, align 16
  %105 = load <2 x i64>, <2 x i64>* %100, align 16
  %106 = load <2 x i64>, <2 x i64>* %101, align 16
  %107 = load <2 x i64>, <2 x i64>* %102, align 16
  %108 = sext i8 %86 to i32
  %109 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %107, <2 x i64>* %109, align 16
  %110 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %106, <2 x i64>* %110, align 16
  %111 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 4
  store <2 x i64> %105, <2 x i64>* %111, align 16
  %112 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %104, <2 x i64>* %112, align 16
  %113 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %103, <2 x i64>* %113, align 16
  %114 = bitcast i16* %97 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 16
  %116 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %115, <2 x i64>* %116, align 16
  %117 = icmp eq i32 %88, 0
  br i1 %117, label %118, label %126

118:                                              ; preds = %84
  %119 = bitcast <2 x i64>* %116 to <4 x i32>*
  %120 = bitcast [32 x <2 x i64>]* %6 to <4 x i32>*
  %121 = bitcast <2 x i64>* %113 to <4 x i32>*
  %122 = bitcast <2 x i64>* %111 to <4 x i32>*
  %123 = bitcast <2 x i64>* %112 to <4 x i32>*
  %124 = bitcast <2 x i64>* %109 to <4 x i32>*
  %125 = bitcast <2 x i64>* %110 to <4 x i32>*
  br label %184

126:                                              ; preds = %84
  %127 = bitcast <2 x i64> %103 to <8 x i16>
  %128 = bitcast <2 x i64> %104 to <8 x i16>
  %129 = bitcast <2 x i64> %105 to <8 x i16>
  %130 = bitcast <2 x i64> %106 to <8 x i16>
  %131 = bitcast <2 x i64> %107 to <8 x i16>
  %132 = bitcast <2 x i64> %96 to <8 x i16>
  %133 = bitcast <2 x i64> %95 to <8 x i16>
  %134 = bitcast <2 x i64> %115 to <8 x i16>
  %135 = shufflevector <8 x i16> %133, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %136 = shufflevector <8 x i16> %135, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %137 = bitcast <8 x i16> %136 to <4 x i32>
  %138 = shufflevector <4 x i32> %137, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %139 = bitcast [32 x <2 x i64>]* %6 to <4 x i32>*
  store <4 x i32> %138, <4 x i32>* %139, align 16
  %140 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 1
  %141 = shufflevector <8 x i16> %132, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %142 = shufflevector <8 x i16> %141, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %143 = bitcast <8 x i16> %142 to <4 x i32>
  %144 = shufflevector <4 x i32> %143, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %145 = bitcast <2 x i64>* %140 to <4 x i32>*
  store <4 x i32> %144, <4 x i32>* %145, align 16
  %146 = shufflevector <8 x i16> %131, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %147 = shufflevector <8 x i16> %146, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %148 = bitcast <8 x i16> %147 to <4 x i32>
  %149 = shufflevector <4 x i32> %148, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %150 = bitcast <2 x i64>* %109 to <4 x i32>*
  store <4 x i32> %149, <4 x i32>* %150, align 16
  %151 = shufflevector <8 x i16> %130, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %152 = shufflevector <8 x i16> %151, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %153 = bitcast <8 x i16> %152 to <4 x i32>
  %154 = shufflevector <4 x i32> %153, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %155 = bitcast <2 x i64>* %110 to <4 x i32>*
  store <4 x i32> %154, <4 x i32>* %155, align 16
  %156 = shufflevector <8 x i16> %129, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %157 = shufflevector <8 x i16> %156, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %158 = bitcast <8 x i16> %157 to <4 x i32>
  %159 = shufflevector <4 x i32> %158, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %160 = bitcast <2 x i64>* %111 to <4 x i32>*
  store <4 x i32> %159, <4 x i32>* %160, align 16
  %161 = shufflevector <8 x i16> %128, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %162 = shufflevector <8 x i16> %161, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %163 = bitcast <8 x i16> %162 to <4 x i32>
  %164 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %165 = bitcast <2 x i64>* %112 to <4 x i32>*
  store <4 x i32> %164, <4 x i32>* %165, align 16
  %166 = shufflevector <8 x i16> %127, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %167 = shufflevector <8 x i16> %166, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %168 = bitcast <8 x i16> %167 to <4 x i32>
  %169 = shufflevector <4 x i32> %168, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %170 = bitcast <2 x i64>* %113 to <4 x i32>*
  store <4 x i32> %169, <4 x i32>* %170, align 16
  %171 = shufflevector <8 x i16> %134, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %172 = shufflevector <8 x i16> %171, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %173 = bitcast <8 x i16> %172 to <4 x i32>
  %174 = shufflevector <4 x i32> %173, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %175 = bitcast <2 x i64>* %116 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %175, align 16
  %176 = bitcast <4 x i32> %159 to <2 x i64>
  %177 = bitcast <4 x i32> %164 to <2 x i64>
  %178 = bitcast <4 x i32> %169 to <2 x i64>
  %179 = bitcast <4 x i32> %174 to <2 x i64>
  %180 = bitcast <4 x i32> %154 to <2 x i64>
  %181 = bitcast <4 x i32> %149 to <2 x i64>
  %182 = bitcast <4 x i32> %144 to <2 x i64>
  %183 = bitcast <4 x i32> %138 to <2 x i64>
  br label %184

184:                                              ; preds = %118, %126
  %185 = phi <4 x i32>* [ %125, %118 ], [ %155, %126 ]
  %186 = phi <4 x i32>* [ %124, %118 ], [ %150, %126 ]
  %187 = phi <4 x i32>* [ %123, %118 ], [ %165, %126 ]
  %188 = phi <4 x i32>* [ %122, %118 ], [ %160, %126 ]
  %189 = phi <4 x i32>* [ %121, %118 ], [ %170, %126 ]
  %190 = phi <4 x i32>* [ %120, %118 ], [ %139, %126 ]
  %191 = phi <4 x i32>* [ %119, %118 ], [ %175, %126 ]
  %192 = phi <2 x i64> [ %95, %118 ], [ %183, %126 ]
  %193 = phi <2 x i64> [ %96, %118 ], [ %182, %126 ]
  %194 = phi <2 x i64> [ %107, %118 ], [ %181, %126 ]
  %195 = phi <2 x i64> [ %106, %118 ], [ %180, %126 ]
  %196 = phi <2 x i64> [ %115, %118 ], [ %179, %126 ]
  %197 = phi <2 x i64> [ %103, %118 ], [ %178, %126 ]
  %198 = phi <2 x i64> [ %104, %118 ], [ %177, %126 ]
  %199 = phi <2 x i64> [ %105, %118 ], [ %176, %126 ]
  %200 = shufflevector <2 x i64> %199, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %201 = bitcast <2 x i64> %199 to <8 x i16>
  %202 = shufflevector <8 x i16> %201, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %203 = sext <4 x i16> %202 to <4 x i32>
  %204 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 8
  %205 = bitcast <2 x i64>* %204 to <4 x i32>*
  %206 = bitcast <2 x i64> %200 to <8 x i16>
  %207 = shufflevector <8 x i16> %206, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %208 = sext <4 x i16> %207 to <4 x i32>
  %209 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 9
  %210 = bitcast <2 x i64>* %209 to <4 x i32>*
  %211 = shufflevector <2 x i64> %198, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %212 = bitcast <2 x i64> %198 to <8 x i16>
  %213 = shufflevector <8 x i16> %212, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %214 = sext <4 x i16> %213 to <4 x i32>
  %215 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 10
  %216 = bitcast <2 x i64>* %215 to <4 x i32>*
  %217 = bitcast <2 x i64> %211 to <8 x i16>
  %218 = shufflevector <8 x i16> %217, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %219 = sext <4 x i16> %218 to <4 x i32>
  %220 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 11
  %221 = bitcast <2 x i64>* %220 to <4 x i32>*
  %222 = shufflevector <2 x i64> %197, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %223 = bitcast <2 x i64> %197 to <8 x i16>
  %224 = shufflevector <8 x i16> %223, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %225 = sext <4 x i16> %224 to <4 x i32>
  %226 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 12
  %227 = bitcast <2 x i64>* %226 to <4 x i32>*
  %228 = bitcast <2 x i64> %222 to <8 x i16>
  %229 = shufflevector <8 x i16> %228, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %230 = sext <4 x i16> %229 to <4 x i32>
  %231 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 13
  %232 = bitcast <2 x i64>* %231 to <4 x i32>*
  %233 = shufflevector <2 x i64> %196, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %234 = bitcast <2 x i64> %196 to <8 x i16>
  %235 = shufflevector <8 x i16> %234, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %236 = sext <4 x i16> %235 to <4 x i32>
  %237 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 14
  %238 = bitcast <2 x i64>* %237 to <4 x i32>*
  %239 = bitcast <2 x i64> %233 to <8 x i16>
  %240 = shufflevector <8 x i16> %239, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %241 = sext <4 x i16> %240 to <4 x i32>
  %242 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 15
  %243 = bitcast <2 x i64>* %242 to <4 x i32>*
  %244 = shufflevector <2 x i64> %195, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %245 = bitcast <2 x i64> %195 to <8 x i16>
  %246 = shufflevector <8 x i16> %245, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %247 = sext <4 x i16> %246 to <4 x i32>
  %248 = bitcast <2 x i64> %244 to <8 x i16>
  %249 = shufflevector <8 x i16> %248, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %250 = sext <4 x i16> %249 to <4 x i32>
  %251 = shufflevector <2 x i64> %194, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %252 = bitcast <2 x i64> %194 to <8 x i16>
  %253 = shufflevector <8 x i16> %252, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %254 = sext <4 x i16> %253 to <4 x i32>
  %255 = bitcast <2 x i64> %251 to <8 x i16>
  %256 = shufflevector <8 x i16> %255, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %257 = sext <4 x i16> %256 to <4 x i32>
  %258 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 1
  %259 = shufflevector <2 x i64> %193, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %260 = bitcast <2 x i64> %193 to <8 x i16>
  %261 = shufflevector <8 x i16> %260, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %262 = sext <4 x i16> %261 to <4 x i32>
  %263 = bitcast <2 x i64> %259 to <8 x i16>
  %264 = shufflevector <8 x i16> %263, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %265 = sext <4 x i16> %264 to <4 x i32>
  %266 = shufflevector <2 x i64> %192, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %267 = bitcast <2 x i64> %192 to <8 x i16>
  %268 = shufflevector <8 x i16> %267, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %269 = sext <4 x i16> %268 to <4 x i32>
  %270 = bitcast <2 x i64> %266 to <8 x i16>
  %271 = shufflevector <8 x i16> %270, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %272 = sext <4 x i16> %271 to <4 x i32>
  %273 = bitcast <2 x i64>* %258 to <4 x i32>*
  %274 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %269, i32 %108) #8
  store <4 x i32> %274, <4 x i32>* %190, align 16
  %275 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %272, i32 %108) #8
  store <4 x i32> %275, <4 x i32>* %273, align 16
  %276 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %262, i32 %108) #8
  store <4 x i32> %276, <4 x i32>* %186, align 16
  %277 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %265, i32 %108) #8
  store <4 x i32> %277, <4 x i32>* %185, align 16
  %278 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %254, i32 %108) #8
  store <4 x i32> %278, <4 x i32>* %188, align 16
  %279 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %257, i32 %108) #8
  store <4 x i32> %279, <4 x i32>* %187, align 16
  %280 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %247, i32 %108) #8
  store <4 x i32> %280, <4 x i32>* %189, align 16
  %281 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %250, i32 %108) #8
  store <4 x i32> %281, <4 x i32>* %191, align 16
  %282 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %203, i32 %108) #8
  store <4 x i32> %282, <4 x i32>* %205, align 16
  %283 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %208, i32 %108) #8
  store <4 x i32> %283, <4 x i32>* %210, align 16
  %284 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %214, i32 %108) #8
  store <4 x i32> %284, <4 x i32>* %216, align 16
  %285 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %219, i32 %108) #8
  store <4 x i32> %285, <4 x i32>* %221, align 16
  %286 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %225, i32 %108) #8
  store <4 x i32> %286, <4 x i32>* %227, align 16
  %287 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %230, i32 %108) #8
  store <4 x i32> %287, <4 x i32>* %232, align 16
  %288 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %236, i32 %108) #8
  store <4 x i32> %288, <4 x i32>* %238, align 16
  %289 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %241, i32 %108) #8
  store <4 x i32> %289, <4 x i32>* %243, align 16
  %290 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 16
  br i1 %89, label %291, label %307

291:                                              ; preds = %184
  %292 = bitcast i16* %85 to <2 x i64>*
  %293 = load <2 x i64>, <2 x i64>* %292, align 16
  store <2 x i64> %293, <2 x i64>* %290, align 16
  %294 = sext i32 %2 to i64
  %295 = getelementptr inbounds i16, i16* %85, i64 %294
  %296 = bitcast i16* %295 to <2 x i64>*
  %297 = load <2 x i64>, <2 x i64>* %296, align 16
  %298 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %297, <2 x i64>* %298, align 16
  %299 = shl nsw i32 %2, 1
  %300 = mul nsw i32 %2, 3
  %301 = shl nsw i32 %2, 2
  %302 = mul nsw i32 %2, 5
  %303 = mul nsw i32 %2, 6
  %304 = mul nsw i32 %2, 7
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds i16, i16* %85, i64 %305
  br label %323

307:                                              ; preds = %184
  %308 = mul nsw i32 %2, 7
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds i16, i16* %85, i64 %309
  %311 = bitcast i16* %310 to <2 x i64>*
  %312 = load <2 x i64>, <2 x i64>* %311, align 16
  store <2 x i64> %312, <2 x i64>* %290, align 16
  %313 = mul nsw i32 %2, 6
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds i16, i16* %85, i64 %314
  %316 = bitcast i16* %315 to <2 x i64>*
  %317 = load <2 x i64>, <2 x i64>* %316, align 16
  %318 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 17
  store <2 x i64> %317, <2 x i64>* %318, align 16
  %319 = mul nsw i32 %2, 5
  %320 = shl nsw i32 %2, 2
  %321 = mul nsw i32 %2, 3
  %322 = shl nsw i32 %2, 1
  br label %323

323:                                              ; preds = %307, %291
  %324 = phi i32 [ %319, %307 ], [ %299, %291 ]
  %325 = phi i32 [ %320, %307 ], [ %300, %291 ]
  %326 = phi i32 [ %321, %307 ], [ %301, %291 ]
  %327 = phi i32 [ %322, %307 ], [ %302, %291 ]
  %328 = phi i32 [ %2, %307 ], [ %303, %291 ]
  %329 = phi <2 x i64> [ %312, %307 ], [ %293, %291 ]
  %330 = phi <2 x i64> [ %317, %307 ], [ %297, %291 ]
  %331 = phi i16* [ %0, %307 ], [ %306, %291 ]
  %332 = sext i32 %328 to i64
  %333 = sext i32 %327 to i64
  %334 = sext i32 %326 to i64
  %335 = sext i32 %325 to i64
  %336 = sext i32 %324 to i64
  %337 = getelementptr inbounds i16, i16* %85, i64 %332
  %338 = getelementptr inbounds i16, i16* %85, i64 %333
  %339 = getelementptr inbounds i16, i16* %85, i64 %334
  %340 = getelementptr inbounds i16, i16* %85, i64 %335
  %341 = getelementptr inbounds i16, i16* %85, i64 %336
  %342 = bitcast i16* %337 to <2 x i64>*
  %343 = bitcast i16* %338 to <2 x i64>*
  %344 = bitcast i16* %339 to <2 x i64>*
  %345 = bitcast i16* %340 to <2 x i64>*
  %346 = bitcast i16* %341 to <2 x i64>*
  %347 = load <2 x i64>, <2 x i64>* %342, align 16
  %348 = load <2 x i64>, <2 x i64>* %343, align 16
  %349 = load <2 x i64>, <2 x i64>* %344, align 16
  %350 = load <2 x i64>, <2 x i64>* %345, align 16
  %351 = load <2 x i64>, <2 x i64>* %346, align 16
  %352 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 18
  store <2 x i64> %351, <2 x i64>* %352, align 16
  %353 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 19
  store <2 x i64> %350, <2 x i64>* %353, align 16
  %354 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 20
  store <2 x i64> %349, <2 x i64>* %354, align 16
  %355 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 21
  store <2 x i64> %348, <2 x i64>* %355, align 16
  %356 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 22
  store <2 x i64> %347, <2 x i64>* %356, align 16
  %357 = bitcast i16* %331 to <2 x i64>*
  %358 = load <2 x i64>, <2 x i64>* %357, align 16
  %359 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 23
  store <2 x i64> %358, <2 x i64>* %359, align 16
  br i1 %117, label %360, label %368

360:                                              ; preds = %323
  %361 = bitcast <2 x i64>* %359 to <4 x i32>*
  %362 = bitcast <2 x i64>* %290 to <4 x i32>*
  %363 = bitcast <2 x i64>* %356 to <4 x i32>*
  %364 = bitcast <2 x i64>* %354 to <4 x i32>*
  %365 = bitcast <2 x i64>* %355 to <4 x i32>*
  %366 = bitcast <2 x i64>* %352 to <4 x i32>*
  %367 = bitcast <2 x i64>* %353 to <4 x i32>*
  br label %426

368:                                              ; preds = %323
  %369 = bitcast <2 x i64> %347 to <8 x i16>
  %370 = bitcast <2 x i64> %348 to <8 x i16>
  %371 = bitcast <2 x i64> %349 to <8 x i16>
  %372 = bitcast <2 x i64> %350 to <8 x i16>
  %373 = bitcast <2 x i64> %351 to <8 x i16>
  %374 = bitcast <2 x i64> %330 to <8 x i16>
  %375 = bitcast <2 x i64> %329 to <8 x i16>
  %376 = bitcast <2 x i64> %358 to <8 x i16>
  %377 = shufflevector <8 x i16> %375, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %378 = shufflevector <8 x i16> %377, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %379 = bitcast <8 x i16> %378 to <4 x i32>
  %380 = shufflevector <4 x i32> %379, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %381 = bitcast <2 x i64>* %290 to <4 x i32>*
  store <4 x i32> %380, <4 x i32>* %381, align 16
  %382 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 17
  %383 = shufflevector <8 x i16> %374, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %384 = shufflevector <8 x i16> %383, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %385 = bitcast <8 x i16> %384 to <4 x i32>
  %386 = shufflevector <4 x i32> %385, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %387 = bitcast <2 x i64>* %382 to <4 x i32>*
  store <4 x i32> %386, <4 x i32>* %387, align 16
  %388 = shufflevector <8 x i16> %373, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %389 = shufflevector <8 x i16> %388, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %390 = bitcast <8 x i16> %389 to <4 x i32>
  %391 = shufflevector <4 x i32> %390, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %392 = bitcast <2 x i64>* %352 to <4 x i32>*
  store <4 x i32> %391, <4 x i32>* %392, align 16
  %393 = shufflevector <8 x i16> %372, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %394 = shufflevector <8 x i16> %393, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %395 = bitcast <8 x i16> %394 to <4 x i32>
  %396 = shufflevector <4 x i32> %395, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %397 = bitcast <2 x i64>* %353 to <4 x i32>*
  store <4 x i32> %396, <4 x i32>* %397, align 16
  %398 = shufflevector <8 x i16> %371, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %399 = shufflevector <8 x i16> %398, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %400 = bitcast <8 x i16> %399 to <4 x i32>
  %401 = shufflevector <4 x i32> %400, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %402 = bitcast <2 x i64>* %354 to <4 x i32>*
  store <4 x i32> %401, <4 x i32>* %402, align 16
  %403 = shufflevector <8 x i16> %370, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %404 = shufflevector <8 x i16> %403, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %405 = bitcast <8 x i16> %404 to <4 x i32>
  %406 = shufflevector <4 x i32> %405, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %407 = bitcast <2 x i64>* %355 to <4 x i32>*
  store <4 x i32> %406, <4 x i32>* %407, align 16
  %408 = shufflevector <8 x i16> %369, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %409 = shufflevector <8 x i16> %408, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %410 = bitcast <8 x i16> %409 to <4 x i32>
  %411 = shufflevector <4 x i32> %410, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %412 = bitcast <2 x i64>* %356 to <4 x i32>*
  store <4 x i32> %411, <4 x i32>* %412, align 16
  %413 = shufflevector <8 x i16> %376, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  %414 = shufflevector <8 x i16> %413, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 6, i32 5, i32 4>
  %415 = bitcast <8 x i16> %414 to <4 x i32>
  %416 = shufflevector <4 x i32> %415, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %417 = bitcast <2 x i64>* %359 to <4 x i32>*
  store <4 x i32> %416, <4 x i32>* %417, align 16
  %418 = bitcast <4 x i32> %401 to <2 x i64>
  %419 = bitcast <4 x i32> %406 to <2 x i64>
  %420 = bitcast <4 x i32> %411 to <2 x i64>
  %421 = bitcast <4 x i32> %416 to <2 x i64>
  %422 = bitcast <4 x i32> %396 to <2 x i64>
  %423 = bitcast <4 x i32> %391 to <2 x i64>
  %424 = bitcast <4 x i32> %386 to <2 x i64>
  %425 = bitcast <4 x i32> %380 to <2 x i64>
  br label %426

426:                                              ; preds = %360, %368
  %427 = phi <4 x i32>* [ %361, %360 ], [ %417, %368 ]
  %428 = phi <4 x i32>* [ %362, %360 ], [ %381, %368 ]
  %429 = phi <4 x i32>* [ %367, %360 ], [ %397, %368 ]
  %430 = phi <4 x i32>* [ %366, %360 ], [ %392, %368 ]
  %431 = phi <4 x i32>* [ %365, %360 ], [ %407, %368 ]
  %432 = phi <4 x i32>* [ %364, %360 ], [ %402, %368 ]
  %433 = phi <4 x i32>* [ %363, %360 ], [ %412, %368 ]
  %434 = phi <2 x i64> [ %329, %360 ], [ %425, %368 ]
  %435 = phi <2 x i64> [ %330, %360 ], [ %424, %368 ]
  %436 = phi <2 x i64> [ %351, %360 ], [ %423, %368 ]
  %437 = phi <2 x i64> [ %350, %360 ], [ %422, %368 ]
  %438 = phi <2 x i64> [ %358, %360 ], [ %421, %368 ]
  %439 = phi <2 x i64> [ %347, %360 ], [ %420, %368 ]
  %440 = phi <2 x i64> [ %348, %360 ], [ %419, %368 ]
  %441 = phi <2 x i64> [ %349, %360 ], [ %418, %368 ]
  %442 = shufflevector <2 x i64> %441, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %443 = bitcast <2 x i64> %441 to <8 x i16>
  %444 = shufflevector <8 x i16> %443, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %445 = sext <4 x i16> %444 to <4 x i32>
  %446 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 24
  %447 = bitcast <2 x i64>* %446 to <4 x i32>*
  %448 = bitcast <2 x i64> %442 to <8 x i16>
  %449 = shufflevector <8 x i16> %448, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %450 = sext <4 x i16> %449 to <4 x i32>
  %451 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 25
  %452 = bitcast <2 x i64>* %451 to <4 x i32>*
  %453 = shufflevector <2 x i64> %440, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %454 = bitcast <2 x i64> %440 to <8 x i16>
  %455 = shufflevector <8 x i16> %454, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %456 = sext <4 x i16> %455 to <4 x i32>
  %457 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 26
  %458 = bitcast <2 x i64>* %457 to <4 x i32>*
  %459 = bitcast <2 x i64> %453 to <8 x i16>
  %460 = shufflevector <8 x i16> %459, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %461 = sext <4 x i16> %460 to <4 x i32>
  %462 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 27
  %463 = bitcast <2 x i64>* %462 to <4 x i32>*
  %464 = shufflevector <2 x i64> %439, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %465 = bitcast <2 x i64> %439 to <8 x i16>
  %466 = shufflevector <8 x i16> %465, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %467 = sext <4 x i16> %466 to <4 x i32>
  %468 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 28
  %469 = bitcast <2 x i64>* %468 to <4 x i32>*
  %470 = bitcast <2 x i64> %464 to <8 x i16>
  %471 = shufflevector <8 x i16> %470, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %472 = sext <4 x i16> %471 to <4 x i32>
  %473 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 29
  %474 = bitcast <2 x i64>* %473 to <4 x i32>*
  %475 = shufflevector <2 x i64> %438, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %476 = bitcast <2 x i64> %438 to <8 x i16>
  %477 = shufflevector <8 x i16> %476, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %478 = sext <4 x i16> %477 to <4 x i32>
  %479 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 30
  %480 = bitcast <2 x i64>* %479 to <4 x i32>*
  %481 = bitcast <2 x i64> %475 to <8 x i16>
  %482 = shufflevector <8 x i16> %481, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %483 = sext <4 x i16> %482 to <4 x i32>
  %484 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 31
  %485 = bitcast <2 x i64>* %484 to <4 x i32>*
  %486 = shufflevector <2 x i64> %437, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %487 = bitcast <2 x i64> %437 to <8 x i16>
  %488 = shufflevector <8 x i16> %487, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %489 = sext <4 x i16> %488 to <4 x i32>
  %490 = bitcast <2 x i64> %486 to <8 x i16>
  %491 = shufflevector <8 x i16> %490, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %492 = sext <4 x i16> %491 to <4 x i32>
  %493 = shufflevector <2 x i64> %436, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %494 = bitcast <2 x i64> %436 to <8 x i16>
  %495 = shufflevector <8 x i16> %494, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %496 = sext <4 x i16> %495 to <4 x i32>
  %497 = bitcast <2 x i64> %493 to <8 x i16>
  %498 = shufflevector <8 x i16> %497, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %499 = sext <4 x i16> %498 to <4 x i32>
  %500 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 17
  %501 = shufflevector <2 x i64> %435, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %502 = bitcast <2 x i64> %435 to <8 x i16>
  %503 = shufflevector <8 x i16> %502, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %504 = sext <4 x i16> %503 to <4 x i32>
  %505 = bitcast <2 x i64> %501 to <8 x i16>
  %506 = shufflevector <8 x i16> %505, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %507 = sext <4 x i16> %506 to <4 x i32>
  %508 = shufflevector <2 x i64> %434, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %509 = bitcast <2 x i64> %434 to <8 x i16>
  %510 = shufflevector <8 x i16> %509, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %511 = sext <4 x i16> %510 to <4 x i32>
  %512 = bitcast <2 x i64> %508 to <8 x i16>
  %513 = shufflevector <8 x i16> %512, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %514 = sext <4 x i16> %513 to <4 x i32>
  %515 = bitcast <2 x i64>* %500 to <4 x i32>*
  %516 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %511, i32 %108) #8
  store <4 x i32> %516, <4 x i32>* %428, align 16
  %517 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %514, i32 %108) #8
  store <4 x i32> %517, <4 x i32>* %515, align 16
  %518 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %504, i32 %108) #8
  store <4 x i32> %518, <4 x i32>* %430, align 16
  %519 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %507, i32 %108) #8
  store <4 x i32> %519, <4 x i32>* %429, align 16
  %520 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %496, i32 %108) #8
  store <4 x i32> %520, <4 x i32>* %432, align 16
  %521 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %499, i32 %108) #8
  store <4 x i32> %521, <4 x i32>* %431, align 16
  %522 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %489, i32 %108) #8
  store <4 x i32> %522, <4 x i32>* %433, align 16
  %523 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %492, i32 %108) #8
  store <4 x i32> %523, <4 x i32>* %427, align 16
  %524 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %445, i32 %108) #8
  store <4 x i32> %524, <4 x i32>* %447, align 16
  %525 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %450, i32 %108) #8
  store <4 x i32> %525, <4 x i32>* %452, align 16
  %526 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %456, i32 %108) #8
  store <4 x i32> %526, <4 x i32>* %458, align 16
  %527 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %461, i32 %108) #8
  store <4 x i32> %527, <4 x i32>* %463, align 16
  %528 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %467, i32 %108) #8
  store <4 x i32> %528, <4 x i32>* %469, align 16
  %529 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %472, i32 %108) #8
  store <4 x i32> %529, <4 x i32>* %474, align 16
  %530 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %478, i32 %108) #8
  store <4 x i32> %530, <4 x i32>* %480, align 16
  %531 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %483, i32 %108) #8
  store <4 x i32> %531, <4 x i32>* %485, align 16
  call void %13(<2 x i64>* nonnull %87, <2 x i64>* nonnull %87, i32 %17, i32 2) #8
  %532 = getelementptr inbounds i8, i8* %10, i64 1
  %533 = load i8, i8* %532, align 1
  %534 = sext i8 %533 to i32
  %535 = sub nsw i32 0, %534
  %536 = xor i32 %534, -1
  %537 = shl i32 1, %536
  %538 = insertelement <4 x i32> undef, i32 %537, i32 0
  %539 = shufflevector <4 x i32> %538, <4 x i32> undef, <4 x i32> zeroinitializer
  %540 = bitcast [32 x <2 x i64>]* %6 to <4 x i32>*
  %541 = load <4 x i32>, <4 x i32>* %540, align 16
  %542 = add <4 x i32> %539, %541
  %543 = load <4 x i32>, <4 x i32>* %273, align 16
  %544 = add <4 x i32> %539, %543
  %545 = load <4 x i32>, <4 x i32>* %186, align 16
  %546 = add <4 x i32> %539, %545
  %547 = load <4 x i32>, <4 x i32>* %185, align 16
  %548 = add <4 x i32> %547, %539
  %549 = load <4 x i32>, <4 x i32>* %188, align 16
  %550 = add <4 x i32> %549, %539
  %551 = load <4 x i32>, <4 x i32>* %187, align 16
  %552 = add <4 x i32> %551, %539
  %553 = load <4 x i32>, <4 x i32>* %189, align 16
  %554 = add <4 x i32> %553, %539
  %555 = bitcast <2 x i64>* %116 to <4 x i32>*
  %556 = load <4 x i32>, <4 x i32>* %555, align 16
  %557 = add <4 x i32> %556, %539
  %558 = load <4 x i32>, <4 x i32>* %205, align 16
  %559 = add <4 x i32> %558, %539
  %560 = load <4 x i32>, <4 x i32>* %210, align 16
  %561 = add <4 x i32> %560, %539
  %562 = load <4 x i32>, <4 x i32>* %216, align 16
  %563 = add <4 x i32> %562, %539
  %564 = load <4 x i32>, <4 x i32>* %221, align 16
  %565 = add <4 x i32> %564, %539
  %566 = load <4 x i32>, <4 x i32>* %227, align 16
  %567 = add <4 x i32> %566, %539
  %568 = load <4 x i32>, <4 x i32>* %232, align 16
  %569 = add <4 x i32> %568, %539
  %570 = load <4 x i32>, <4 x i32>* %238, align 16
  %571 = add <4 x i32> %570, %539
  %572 = load <4 x i32>, <4 x i32>* %243, align 16
  %573 = add <4 x i32> %572, %539
  %574 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %542, i32 %535) #8
  store <4 x i32> %574, <4 x i32>* %540, align 16
  %575 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %544, i32 %535) #8
  store <4 x i32> %575, <4 x i32>* %273, align 16
  %576 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %546, i32 %535) #8
  store <4 x i32> %576, <4 x i32>* %186, align 16
  %577 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %548, i32 %535) #8
  store <4 x i32> %577, <4 x i32>* %185, align 16
  %578 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %550, i32 %535) #8
  store <4 x i32> %578, <4 x i32>* %188, align 16
  %579 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %552, i32 %535) #8
  store <4 x i32> %579, <4 x i32>* %187, align 16
  %580 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %554, i32 %535) #8
  store <4 x i32> %580, <4 x i32>* %189, align 16
  %581 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %557, i32 %535) #8
  store <4 x i32> %581, <4 x i32>* %555, align 16
  %582 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %559, i32 %535) #8
  store <4 x i32> %582, <4 x i32>* %205, align 16
  %583 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %561, i32 %535) #8
  store <4 x i32> %583, <4 x i32>* %210, align 16
  %584 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %563, i32 %535) #8
  store <4 x i32> %584, <4 x i32>* %216, align 16
  %585 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %565, i32 %535) #8
  store <4 x i32> %585, <4 x i32>* %221, align 16
  %586 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %567, i32 %535) #8
  store <4 x i32> %586, <4 x i32>* %227, align 16
  %587 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %569, i32 %535) #8
  store <4 x i32> %587, <4 x i32>* %232, align 16
  %588 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %571, i32 %535) #8
  store <4 x i32> %588, <4 x i32>* %238, align 16
  %589 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %573, i32 %535) #8
  store <4 x i32> %589, <4 x i32>* %243, align 16
  %590 = load <4 x i32>, <4 x i32>* %428, align 16
  %591 = add <4 x i32> %590, %539
  %592 = load <4 x i32>, <4 x i32>* %515, align 16
  %593 = add <4 x i32> %592, %539
  %594 = load <4 x i32>, <4 x i32>* %430, align 16
  %595 = add <4 x i32> %594, %539
  %596 = load <4 x i32>, <4 x i32>* %429, align 16
  %597 = add <4 x i32> %596, %539
  %598 = load <4 x i32>, <4 x i32>* %432, align 16
  %599 = add <4 x i32> %598, %539
  %600 = load <4 x i32>, <4 x i32>* %431, align 16
  %601 = add <4 x i32> %600, %539
  %602 = load <4 x i32>, <4 x i32>* %433, align 16
  %603 = add <4 x i32> %602, %539
  %604 = load <4 x i32>, <4 x i32>* %427, align 16
  %605 = add <4 x i32> %604, %539
  %606 = load <4 x i32>, <4 x i32>* %447, align 16
  %607 = add <4 x i32> %606, %539
  %608 = load <4 x i32>, <4 x i32>* %452, align 16
  %609 = add <4 x i32> %608, %539
  %610 = load <4 x i32>, <4 x i32>* %458, align 16
  %611 = add <4 x i32> %610, %539
  %612 = load <4 x i32>, <4 x i32>* %463, align 16
  %613 = add <4 x i32> %612, %539
  %614 = load <4 x i32>, <4 x i32>* %469, align 16
  %615 = add <4 x i32> %614, %539
  %616 = load <4 x i32>, <4 x i32>* %474, align 16
  %617 = add <4 x i32> %616, %539
  %618 = load <4 x i32>, <4 x i32>* %480, align 16
  %619 = add <4 x i32> %618, %539
  %620 = load <4 x i32>, <4 x i32>* %485, align 16
  %621 = add <4 x i32> %620, %539
  %622 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %591, i32 %535) #8
  store <4 x i32> %622, <4 x i32>* %428, align 16
  %623 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %593, i32 %535) #8
  store <4 x i32> %623, <4 x i32>* %515, align 16
  %624 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %595, i32 %535) #8
  store <4 x i32> %624, <4 x i32>* %430, align 16
  %625 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %597, i32 %535) #8
  store <4 x i32> %625, <4 x i32>* %429, align 16
  %626 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %599, i32 %535) #8
  store <4 x i32> %626, <4 x i32>* %432, align 16
  %627 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %601, i32 %535) #8
  store <4 x i32> %627, <4 x i32>* %431, align 16
  %628 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %603, i32 %535) #8
  store <4 x i32> %628, <4 x i32>* %433, align 16
  %629 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %605, i32 %535) #8
  store <4 x i32> %629, <4 x i32>* %427, align 16
  %630 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %607, i32 %535) #8
  store <4 x i32> %630, <4 x i32>* %447, align 16
  %631 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %609, i32 %535) #8
  store <4 x i32> %631, <4 x i32>* %452, align 16
  %632 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %611, i32 %535) #8
  store <4 x i32> %632, <4 x i32>* %458, align 16
  %633 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %613, i32 %535) #8
  store <4 x i32> %633, <4 x i32>* %463, align 16
  %634 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %615, i32 %535) #8
  store <4 x i32> %634, <4 x i32>* %469, align 16
  %635 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %617, i32 %535) #8
  store <4 x i32> %635, <4 x i32>* %474, align 16
  %636 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %619, i32 %535) #8
  store <4 x i32> %636, <4 x i32>* %480, align 16
  %637 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %621, i32 %535) #8
  store <4 x i32> %637, <4 x i32>* %485, align 16
  %638 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 0
  %639 = shufflevector <4 x i32> %574, <4 x i32> %576, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %640 = bitcast <4 x i32> %639 to <2 x i64>
  %641 = shufflevector <4 x i32> %574, <4 x i32> %576, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %642 = bitcast <4 x i32> %641 to <2 x i64>
  %643 = shufflevector <4 x i32> %578, <4 x i32> %580, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %644 = bitcast <4 x i32> %643 to <2 x i64>
  %645 = shufflevector <4 x i32> %578, <4 x i32> %580, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %646 = bitcast <4 x i32> %645 to <2 x i64>
  %647 = shufflevector <2 x i64> %640, <2 x i64> %644, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %647, <2 x i64>* %638, align 16
  %648 = shufflevector <2 x i64> %640, <2 x i64> %644, <2 x i32> <i32 1, i32 3>
  %649 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 2
  store <2 x i64> %648, <2 x i64>* %649, align 16
  %650 = shufflevector <2 x i64> %642, <2 x i64> %646, <2 x i32> <i32 0, i32 2>
  %651 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 4
  store <2 x i64> %650, <2 x i64>* %651, align 16
  %652 = shufflevector <2 x i64> %642, <2 x i64> %646, <2 x i32> <i32 1, i32 3>
  %653 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 6
  store <2 x i64> %652, <2 x i64>* %653, align 16
  %654 = shufflevector <4 x i32> %575, <4 x i32> %577, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %655 = bitcast <4 x i32> %654 to <2 x i64>
  %656 = shufflevector <4 x i32> %575, <4 x i32> %577, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %657 = bitcast <4 x i32> %656 to <2 x i64>
  %658 = shufflevector <4 x i32> %579, <4 x i32> %581, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %659 = bitcast <4 x i32> %658 to <2 x i64>
  %660 = shufflevector <4 x i32> %579, <4 x i32> %581, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %661 = bitcast <4 x i32> %660 to <2 x i64>
  %662 = shufflevector <2 x i64> %655, <2 x i64> %659, <2 x i32> <i32 0, i32 2>
  %663 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 8
  store <2 x i64> %662, <2 x i64>* %663, align 16
  %664 = shufflevector <2 x i64> %655, <2 x i64> %659, <2 x i32> <i32 1, i32 3>
  %665 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 10
  store <2 x i64> %664, <2 x i64>* %665, align 16
  %666 = shufflevector <2 x i64> %657, <2 x i64> %661, <2 x i32> <i32 0, i32 2>
  %667 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 12
  store <2 x i64> %666, <2 x i64>* %667, align 16
  %668 = shufflevector <2 x i64> %657, <2 x i64> %661, <2 x i32> <i32 1, i32 3>
  %669 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 14
  store <2 x i64> %668, <2 x i64>* %669, align 16
  %670 = shufflevector <4 x i32> %582, <4 x i32> %584, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %671 = bitcast <4 x i32> %670 to <2 x i64>
  %672 = shufflevector <4 x i32> %582, <4 x i32> %584, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %673 = bitcast <4 x i32> %672 to <2 x i64>
  %674 = shufflevector <4 x i32> %586, <4 x i32> %588, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %675 = bitcast <4 x i32> %674 to <2 x i64>
  %676 = shufflevector <4 x i32> %586, <4 x i32> %588, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %677 = bitcast <4 x i32> %676 to <2 x i64>
  %678 = shufflevector <2 x i64> %671, <2 x i64> %675, <2 x i32> <i32 0, i32 2>
  %679 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 1
  store <2 x i64> %678, <2 x i64>* %679, align 16
  %680 = shufflevector <2 x i64> %671, <2 x i64> %675, <2 x i32> <i32 1, i32 3>
  %681 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 3
  store <2 x i64> %680, <2 x i64>* %681, align 16
  %682 = shufflevector <2 x i64> %673, <2 x i64> %677, <2 x i32> <i32 0, i32 2>
  %683 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 5
  store <2 x i64> %682, <2 x i64>* %683, align 16
  %684 = shufflevector <2 x i64> %673, <2 x i64> %677, <2 x i32> <i32 1, i32 3>
  %685 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 7
  store <2 x i64> %684, <2 x i64>* %685, align 16
  %686 = shufflevector <4 x i32> %583, <4 x i32> %585, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %687 = bitcast <4 x i32> %686 to <2 x i64>
  %688 = shufflevector <4 x i32> %583, <4 x i32> %585, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %689 = bitcast <4 x i32> %688 to <2 x i64>
  %690 = shufflevector <4 x i32> %587, <4 x i32> %589, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %691 = bitcast <4 x i32> %690 to <2 x i64>
  %692 = shufflevector <4 x i32> %587, <4 x i32> %589, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %693 = bitcast <4 x i32> %692 to <2 x i64>
  %694 = shufflevector <2 x i64> %687, <2 x i64> %691, <2 x i32> <i32 0, i32 2>
  %695 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 9
  store <2 x i64> %694, <2 x i64>* %695, align 16
  %696 = shufflevector <2 x i64> %687, <2 x i64> %691, <2 x i32> <i32 1, i32 3>
  %697 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 11
  store <2 x i64> %696, <2 x i64>* %697, align 16
  %698 = shufflevector <2 x i64> %689, <2 x i64> %693, <2 x i32> <i32 0, i32 2>
  %699 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 13
  store <2 x i64> %698, <2 x i64>* %699, align 16
  %700 = shufflevector <2 x i64> %689, <2 x i64> %693, <2 x i32> <i32 1, i32 3>
  %701 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 15
  store <2 x i64> %700, <2 x i64>* %701, align 16
  %702 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 16
  %703 = load <4 x i32>, <4 x i32>* %428, align 16
  %704 = load <4 x i32>, <4 x i32>* %430, align 16
  %705 = shufflevector <4 x i32> %703, <4 x i32> %704, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %706 = bitcast <4 x i32> %705 to <2 x i64>
  %707 = shufflevector <4 x i32> %703, <4 x i32> %704, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %708 = bitcast <4 x i32> %707 to <2 x i64>
  %709 = load <4 x i32>, <4 x i32>* %432, align 16
  %710 = load <4 x i32>, <4 x i32>* %433, align 16
  %711 = shufflevector <4 x i32> %709, <4 x i32> %710, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %712 = bitcast <4 x i32> %711 to <2 x i64>
  %713 = shufflevector <4 x i32> %709, <4 x i32> %710, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %714 = bitcast <4 x i32> %713 to <2 x i64>
  %715 = shufflevector <2 x i64> %706, <2 x i64> %712, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %715, <2 x i64>* %702, align 16
  %716 = shufflevector <2 x i64> %706, <2 x i64> %712, <2 x i32> <i32 1, i32 3>
  %717 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 18
  store <2 x i64> %716, <2 x i64>* %717, align 16
  %718 = shufflevector <2 x i64> %708, <2 x i64> %714, <2 x i32> <i32 0, i32 2>
  %719 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 20
  store <2 x i64> %718, <2 x i64>* %719, align 16
  %720 = shufflevector <2 x i64> %708, <2 x i64> %714, <2 x i32> <i32 1, i32 3>
  %721 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 22
  store <2 x i64> %720, <2 x i64>* %721, align 16
  %722 = load <4 x i32>, <4 x i32>* %515, align 16
  %723 = load <4 x i32>, <4 x i32>* %429, align 16
  %724 = shufflevector <4 x i32> %722, <4 x i32> %723, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %725 = bitcast <4 x i32> %724 to <2 x i64>
  %726 = shufflevector <4 x i32> %722, <4 x i32> %723, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %727 = bitcast <4 x i32> %726 to <2 x i64>
  %728 = load <4 x i32>, <4 x i32>* %431, align 16
  %729 = load <4 x i32>, <4 x i32>* %427, align 16
  %730 = shufflevector <4 x i32> %728, <4 x i32> %729, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %731 = bitcast <4 x i32> %730 to <2 x i64>
  %732 = shufflevector <4 x i32> %728, <4 x i32> %729, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %733 = bitcast <4 x i32> %732 to <2 x i64>
  %734 = shufflevector <2 x i64> %725, <2 x i64> %731, <2 x i32> <i32 0, i32 2>
  %735 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 24
  store <2 x i64> %734, <2 x i64>* %735, align 16
  %736 = shufflevector <2 x i64> %725, <2 x i64> %731, <2 x i32> <i32 1, i32 3>
  %737 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 26
  store <2 x i64> %736, <2 x i64>* %737, align 16
  %738 = shufflevector <2 x i64> %727, <2 x i64> %733, <2 x i32> <i32 0, i32 2>
  %739 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 28
  store <2 x i64> %738, <2 x i64>* %739, align 16
  %740 = shufflevector <2 x i64> %727, <2 x i64> %733, <2 x i32> <i32 1, i32 3>
  %741 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 30
  store <2 x i64> %740, <2 x i64>* %741, align 16
  %742 = load <4 x i32>, <4 x i32>* %447, align 16
  %743 = load <4 x i32>, <4 x i32>* %458, align 16
  %744 = shufflevector <4 x i32> %742, <4 x i32> %743, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %745 = bitcast <4 x i32> %744 to <2 x i64>
  %746 = shufflevector <4 x i32> %742, <4 x i32> %743, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %747 = bitcast <4 x i32> %746 to <2 x i64>
  %748 = load <4 x i32>, <4 x i32>* %469, align 16
  %749 = load <4 x i32>, <4 x i32>* %480, align 16
  %750 = shufflevector <4 x i32> %748, <4 x i32> %749, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %751 = bitcast <4 x i32> %750 to <2 x i64>
  %752 = shufflevector <4 x i32> %748, <4 x i32> %749, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %753 = bitcast <4 x i32> %752 to <2 x i64>
  %754 = shufflevector <2 x i64> %745, <2 x i64> %751, <2 x i32> <i32 0, i32 2>
  %755 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 17
  store <2 x i64> %754, <2 x i64>* %755, align 16
  %756 = shufflevector <2 x i64> %745, <2 x i64> %751, <2 x i32> <i32 1, i32 3>
  %757 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 19
  store <2 x i64> %756, <2 x i64>* %757, align 16
  %758 = shufflevector <2 x i64> %747, <2 x i64> %753, <2 x i32> <i32 0, i32 2>
  %759 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 21
  store <2 x i64> %758, <2 x i64>* %759, align 16
  %760 = shufflevector <2 x i64> %747, <2 x i64> %753, <2 x i32> <i32 1, i32 3>
  %761 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 23
  store <2 x i64> %760, <2 x i64>* %761, align 16
  %762 = load <4 x i32>, <4 x i32>* %452, align 16
  %763 = load <4 x i32>, <4 x i32>* %463, align 16
  %764 = shufflevector <4 x i32> %762, <4 x i32> %763, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %765 = bitcast <4 x i32> %764 to <2 x i64>
  %766 = shufflevector <4 x i32> %762, <4 x i32> %763, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %767 = bitcast <4 x i32> %766 to <2 x i64>
  %768 = load <4 x i32>, <4 x i32>* %474, align 16
  %769 = load <4 x i32>, <4 x i32>* %485, align 16
  %770 = shufflevector <4 x i32> %768, <4 x i32> %769, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %771 = bitcast <4 x i32> %770 to <2 x i64>
  %772 = shufflevector <4 x i32> %768, <4 x i32> %769, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %773 = bitcast <4 x i32> %772 to <2 x i64>
  %774 = shufflevector <2 x i64> %765, <2 x i64> %771, <2 x i32> <i32 0, i32 2>
  %775 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 25
  store <2 x i64> %774, <2 x i64>* %775, align 16
  %776 = shufflevector <2 x i64> %765, <2 x i64> %771, <2 x i32> <i32 1, i32 3>
  %777 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 27
  store <2 x i64> %776, <2 x i64>* %777, align 16
  %778 = shufflevector <2 x i64> %767, <2 x i64> %773, <2 x i32> <i32 0, i32 2>
  %779 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 29
  store <2 x i64> %778, <2 x i64>* %779, align 16
  %780 = shufflevector <2 x i64> %767, <2 x i64> %773, <2 x i32> <i32 1, i32 3>
  %781 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 31
  store <2 x i64> %780, <2 x i64>* %781, align 16
  %782 = bitcast [32 x <2 x i64>]* %7 to <4 x i32>*
  %783 = bitcast <2 x i64>* %649 to <4 x i32>*
  %784 = bitcast <2 x i64>* %651 to <4 x i32>*
  %785 = bitcast <2 x i64>* %653 to <4 x i32>*
  %786 = bitcast <2 x i64>* %679 to <4 x i32>*
  %787 = bitcast <2 x i64>* %681 to <4 x i32>*
  %788 = bitcast <2 x i64>* %683 to <4 x i32>*
  %789 = bitcast <2 x i64>* %685 to <4 x i32>*
  %790 = bitcast <2 x i64>* %663 to <4 x i32>*
  %791 = bitcast <2 x i64>* %665 to <4 x i32>*
  %792 = bitcast <2 x i64>* %667 to <4 x i32>*
  %793 = bitcast <2 x i64>* %669 to <4 x i32>*
  %794 = bitcast <2 x i64>* %695 to <4 x i32>*
  %795 = bitcast <2 x i64>* %697 to <4 x i32>*
  %796 = bitcast <2 x i64>* %699 to <4 x i32>*
  %797 = bitcast <2 x i64>* %701 to <4 x i32>*
  %798 = getelementptr inbounds i8, i8* %10, i64 2
  %799 = bitcast [32 x <2 x i64>]* %6 to <4 x i32>*
  %800 = bitcast [32 x <2 x i64>]* %6 to <4 x i32>*
  br label %802

801:                                              ; preds = %1038
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #8
  ret void

802:                                              ; preds = %1038, %426
  %803 = phi i64 [ 0, %426 ], [ %1091, %1038 ]
  %804 = shl nsw i64 %803, 4
  %805 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 %804
  call void %15(<2 x i64>* %805, <2 x i64>* nonnull %638, i32 %17, i32 2) #8
  %806 = load <4 x i32>, <4 x i32>* %782, align 16
  %807 = load <4 x i32>, <4 x i32>* %783, align 16
  %808 = shufflevector <4 x i32> %806, <4 x i32> %807, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %809 = bitcast <4 x i32> %808 to <2 x i64>
  %810 = shufflevector <4 x i32> %806, <4 x i32> %807, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %811 = bitcast <4 x i32> %810 to <2 x i64>
  %812 = load <4 x i32>, <4 x i32>* %784, align 16
  %813 = load <4 x i32>, <4 x i32>* %785, align 16
  %814 = shufflevector <4 x i32> %812, <4 x i32> %813, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %815 = bitcast <4 x i32> %814 to <2 x i64>
  %816 = shufflevector <4 x i32> %812, <4 x i32> %813, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %817 = bitcast <4 x i32> %816 to <2 x i64>
  %818 = shufflevector <2 x i64> %809, <2 x i64> %815, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %818, <2 x i64>* %87, align 16
  %819 = shufflevector <2 x i64> %809, <2 x i64> %815, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %819, <2 x i64>* %109, align 16
  %820 = shufflevector <2 x i64> %811, <2 x i64> %817, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %820, <2 x i64>* %111, align 16
  %821 = shufflevector <2 x i64> %811, <2 x i64> %817, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %821, <2 x i64>* %113, align 16
  %822 = load <4 x i32>, <4 x i32>* %786, align 16
  %823 = load <4 x i32>, <4 x i32>* %787, align 16
  %824 = shufflevector <4 x i32> %822, <4 x i32> %823, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %825 = bitcast <4 x i32> %824 to <2 x i64>
  %826 = shufflevector <4 x i32> %822, <4 x i32> %823, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %827 = bitcast <4 x i32> %826 to <2 x i64>
  %828 = load <4 x i32>, <4 x i32>* %788, align 16
  %829 = load <4 x i32>, <4 x i32>* %789, align 16
  %830 = shufflevector <4 x i32> %828, <4 x i32> %829, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %831 = bitcast <4 x i32> %830 to <2 x i64>
  %832 = shufflevector <4 x i32> %828, <4 x i32> %829, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %833 = bitcast <4 x i32> %832 to <2 x i64>
  %834 = shufflevector <2 x i64> %825, <2 x i64> %831, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %834, <2 x i64>* %204, align 16
  %835 = shufflevector <2 x i64> %825, <2 x i64> %831, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %835, <2 x i64>* %215, align 16
  %836 = shufflevector <2 x i64> %827, <2 x i64> %833, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %836, <2 x i64>* %226, align 16
  %837 = shufflevector <2 x i64> %827, <2 x i64> %833, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %837, <2 x i64>* %237, align 16
  %838 = load <4 x i32>, <4 x i32>* %790, align 16
  %839 = load <4 x i32>, <4 x i32>* %791, align 16
  %840 = shufflevector <4 x i32> %838, <4 x i32> %839, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %841 = bitcast <4 x i32> %840 to <2 x i64>
  %842 = shufflevector <4 x i32> %838, <4 x i32> %839, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %843 = bitcast <4 x i32> %842 to <2 x i64>
  %844 = load <4 x i32>, <4 x i32>* %792, align 16
  %845 = load <4 x i32>, <4 x i32>* %793, align 16
  %846 = shufflevector <4 x i32> %844, <4 x i32> %845, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %847 = bitcast <4 x i32> %846 to <2 x i64>
  %848 = shufflevector <4 x i32> %844, <4 x i32> %845, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %849 = bitcast <4 x i32> %848 to <2 x i64>
  %850 = shufflevector <2 x i64> %841, <2 x i64> %847, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %850, <2 x i64>* %258, align 16
  %851 = shufflevector <2 x i64> %841, <2 x i64> %847, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %851, <2 x i64>* %110, align 16
  %852 = shufflevector <2 x i64> %843, <2 x i64> %849, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %852, <2 x i64>* %112, align 16
  %853 = shufflevector <2 x i64> %843, <2 x i64> %849, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %853, <2 x i64>* %116, align 16
  %854 = load <4 x i32>, <4 x i32>* %794, align 16
  %855 = load <4 x i32>, <4 x i32>* %795, align 16
  %856 = shufflevector <4 x i32> %854, <4 x i32> %855, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %857 = bitcast <4 x i32> %856 to <2 x i64>
  %858 = shufflevector <4 x i32> %854, <4 x i32> %855, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %859 = bitcast <4 x i32> %858 to <2 x i64>
  %860 = load <4 x i32>, <4 x i32>* %796, align 16
  %861 = load <4 x i32>, <4 x i32>* %797, align 16
  %862 = shufflevector <4 x i32> %860, <4 x i32> %861, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %863 = bitcast <4 x i32> %862 to <2 x i64>
  %864 = shufflevector <4 x i32> %860, <4 x i32> %861, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %865 = bitcast <4 x i32> %864 to <2 x i64>
  %866 = shufflevector <2 x i64> %857, <2 x i64> %863, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %866, <2 x i64>* %209, align 16
  %867 = shufflevector <2 x i64> %857, <2 x i64> %863, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %867, <2 x i64>* %220, align 16
  %868 = shufflevector <2 x i64> %859, <2 x i64> %865, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %868, <2 x i64>* %231, align 16
  %869 = shufflevector <2 x i64> %859, <2 x i64> %865, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %869, <2 x i64>* %242, align 16
  %870 = load i8, i8* %798, align 1
  %871 = sext i8 %870 to i32
  %872 = sub nsw i32 0, %871
  %873 = icmp slt i8 %870, 0
  %874 = bitcast <2 x i64> %850 to <4 x i32>
  %875 = bitcast <2 x i64> %851 to <4 x i32>
  %876 = bitcast <2 x i64> %852 to <4 x i32>
  %877 = bitcast <2 x i64> %853 to <4 x i32>
  %878 = bitcast <2 x i64> %834 to <4 x i32>
  %879 = bitcast <2 x i64> %866 to <4 x i32>
  %880 = bitcast <2 x i64> %835 to <4 x i32>
  %881 = bitcast <2 x i64> %867 to <4 x i32>
  %882 = bitcast <2 x i64> %836 to <4 x i32>
  %883 = bitcast <2 x i64> %868 to <4 x i32>
  %884 = bitcast <2 x i64> %837 to <4 x i32>
  %885 = bitcast <2 x i64> %869 to <4 x i32>
  br i1 %873, label %952, label %886

886:                                              ; preds = %802
  %887 = bitcast <2 x i64> %821 to <4 x i32>
  %888 = bitcast <2 x i64> %820 to <4 x i32>
  %889 = bitcast <2 x i64> %819 to <4 x i32>
  %890 = bitcast <2 x i64> %818 to <4 x i32>
  %891 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %890, i32 %871) #8
  %892 = mul <4 x i32> %891, <i32 5793, i32 5793, i32 5793, i32 5793>
  %893 = add <4 x i32> %892, <i32 2048, i32 2048, i32 2048, i32 2048>
  %894 = ashr <4 x i32> %893, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %894, <4 x i32>* %799, align 16
  %895 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %874, i32 %871) #8
  %896 = mul <4 x i32> %895, <i32 5793, i32 5793, i32 5793, i32 5793>
  %897 = add <4 x i32> %896, <i32 2048, i32 2048, i32 2048, i32 2048>
  %898 = ashr <4 x i32> %897, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %898, <4 x i32>* %273, align 16
  %899 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %889, i32 %871) #8
  %900 = mul <4 x i32> %899, <i32 5793, i32 5793, i32 5793, i32 5793>
  %901 = add <4 x i32> %900, <i32 2048, i32 2048, i32 2048, i32 2048>
  %902 = ashr <4 x i32> %901, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %902, <4 x i32>* %186, align 16
  %903 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %875, i32 %871) #8
  %904 = mul <4 x i32> %903, <i32 5793, i32 5793, i32 5793, i32 5793>
  %905 = add <4 x i32> %904, <i32 2048, i32 2048, i32 2048, i32 2048>
  %906 = ashr <4 x i32> %905, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %906, <4 x i32>* %185, align 16
  %907 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %888, i32 %871) #8
  %908 = mul <4 x i32> %907, <i32 5793, i32 5793, i32 5793, i32 5793>
  %909 = add <4 x i32> %908, <i32 2048, i32 2048, i32 2048, i32 2048>
  %910 = ashr <4 x i32> %909, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %910, <4 x i32>* %188, align 16
  %911 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %876, i32 %871) #8
  %912 = mul <4 x i32> %911, <i32 5793, i32 5793, i32 5793, i32 5793>
  %913 = add <4 x i32> %912, <i32 2048, i32 2048, i32 2048, i32 2048>
  %914 = ashr <4 x i32> %913, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %914, <4 x i32>* %187, align 16
  %915 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %887, i32 %871) #8
  %916 = mul <4 x i32> %915, <i32 5793, i32 5793, i32 5793, i32 5793>
  %917 = add <4 x i32> %916, <i32 2048, i32 2048, i32 2048, i32 2048>
  %918 = ashr <4 x i32> %917, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %918, <4 x i32>* %189, align 16
  %919 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %877, i32 %871) #8
  %920 = mul <4 x i32> %919, <i32 5793, i32 5793, i32 5793, i32 5793>
  %921 = add <4 x i32> %920, <i32 2048, i32 2048, i32 2048, i32 2048>
  %922 = ashr <4 x i32> %921, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %922, <4 x i32>* %555, align 16
  %923 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %878, i32 %871) #8
  %924 = mul <4 x i32> %923, <i32 5793, i32 5793, i32 5793, i32 5793>
  %925 = add <4 x i32> %924, <i32 2048, i32 2048, i32 2048, i32 2048>
  %926 = ashr <4 x i32> %925, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %926, <4 x i32>* %205, align 16
  %927 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %879, i32 %871) #8
  %928 = mul <4 x i32> %927, <i32 5793, i32 5793, i32 5793, i32 5793>
  %929 = add <4 x i32> %928, <i32 2048, i32 2048, i32 2048, i32 2048>
  %930 = ashr <4 x i32> %929, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %930, <4 x i32>* %210, align 16
  %931 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %880, i32 %871) #8
  %932 = mul <4 x i32> %931, <i32 5793, i32 5793, i32 5793, i32 5793>
  %933 = add <4 x i32> %932, <i32 2048, i32 2048, i32 2048, i32 2048>
  %934 = ashr <4 x i32> %933, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %934, <4 x i32>* %216, align 16
  %935 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %881, i32 %871) #8
  %936 = mul <4 x i32> %935, <i32 5793, i32 5793, i32 5793, i32 5793>
  %937 = add <4 x i32> %936, <i32 2048, i32 2048, i32 2048, i32 2048>
  %938 = ashr <4 x i32> %937, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %938, <4 x i32>* %221, align 16
  %939 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %882, i32 %871) #8
  %940 = mul <4 x i32> %939, <i32 5793, i32 5793, i32 5793, i32 5793>
  %941 = add <4 x i32> %940, <i32 2048, i32 2048, i32 2048, i32 2048>
  %942 = ashr <4 x i32> %941, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %942, <4 x i32>* %227, align 16
  %943 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %883, i32 %871) #8
  %944 = mul <4 x i32> %943, <i32 5793, i32 5793, i32 5793, i32 5793>
  %945 = add <4 x i32> %944, <i32 2048, i32 2048, i32 2048, i32 2048>
  %946 = ashr <4 x i32> %945, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %946, <4 x i32>* %232, align 16
  %947 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %884, i32 %871) #8
  %948 = mul <4 x i32> %947, <i32 5793, i32 5793, i32 5793, i32 5793>
  %949 = add <4 x i32> %948, <i32 2048, i32 2048, i32 2048, i32 2048>
  %950 = ashr <4 x i32> %949, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %950, <4 x i32>* %238, align 16
  %951 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %885, i32 %871) #8
  br label %1038

952:                                              ; preds = %802
  %953 = xor i32 %871, -1
  %954 = shl i32 1, %953
  %955 = insertelement <4 x i32> undef, i32 %954, i32 0
  %956 = shufflevector <4 x i32> %955, <4 x i32> undef, <4 x i32> zeroinitializer
  %957 = load <4 x i32>, <4 x i32>* %800, align 16
  %958 = add <4 x i32> %957, %956
  %959 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %958, i32 %872) #8
  %960 = mul <4 x i32> %959, <i32 5793, i32 5793, i32 5793, i32 5793>
  %961 = add <4 x i32> %960, <i32 2048, i32 2048, i32 2048, i32 2048>
  %962 = ashr <4 x i32> %961, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %962, <4 x i32>* %800, align 16
  %963 = add <4 x i32> %956, %874
  %964 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %963, i32 %872) #8
  %965 = mul <4 x i32> %964, <i32 5793, i32 5793, i32 5793, i32 5793>
  %966 = add <4 x i32> %965, <i32 2048, i32 2048, i32 2048, i32 2048>
  %967 = ashr <4 x i32> %966, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %967, <4 x i32>* %273, align 16
  %968 = load <4 x i32>, <4 x i32>* %186, align 16
  %969 = add <4 x i32> %968, %956
  %970 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %969, i32 %872) #8
  %971 = mul <4 x i32> %970, <i32 5793, i32 5793, i32 5793, i32 5793>
  %972 = add <4 x i32> %971, <i32 2048, i32 2048, i32 2048, i32 2048>
  %973 = ashr <4 x i32> %972, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %973, <4 x i32>* %186, align 16
  %974 = add <4 x i32> %956, %875
  %975 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %974, i32 %872) #8
  %976 = mul <4 x i32> %975, <i32 5793, i32 5793, i32 5793, i32 5793>
  %977 = add <4 x i32> %976, <i32 2048, i32 2048, i32 2048, i32 2048>
  %978 = ashr <4 x i32> %977, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %978, <4 x i32>* %185, align 16
  %979 = load <4 x i32>, <4 x i32>* %188, align 16
  %980 = add <4 x i32> %979, %956
  %981 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %980, i32 %872) #8
  %982 = mul <4 x i32> %981, <i32 5793, i32 5793, i32 5793, i32 5793>
  %983 = add <4 x i32> %982, <i32 2048, i32 2048, i32 2048, i32 2048>
  %984 = ashr <4 x i32> %983, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %984, <4 x i32>* %188, align 16
  %985 = add <4 x i32> %956, %876
  %986 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %985, i32 %872) #8
  %987 = mul <4 x i32> %986, <i32 5793, i32 5793, i32 5793, i32 5793>
  %988 = add <4 x i32> %987, <i32 2048, i32 2048, i32 2048, i32 2048>
  %989 = ashr <4 x i32> %988, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %989, <4 x i32>* %187, align 16
  %990 = load <4 x i32>, <4 x i32>* %189, align 16
  %991 = add <4 x i32> %990, %956
  %992 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %991, i32 %872) #8
  %993 = mul <4 x i32> %992, <i32 5793, i32 5793, i32 5793, i32 5793>
  %994 = add <4 x i32> %993, <i32 2048, i32 2048, i32 2048, i32 2048>
  %995 = ashr <4 x i32> %994, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %995, <4 x i32>* %189, align 16
  %996 = add <4 x i32> %956, %877
  %997 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %996, i32 %872) #8
  %998 = mul <4 x i32> %997, <i32 5793, i32 5793, i32 5793, i32 5793>
  %999 = add <4 x i32> %998, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1000 = ashr <4 x i32> %999, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %1000, <4 x i32>* %555, align 16
  %1001 = add <4 x i32> %956, %878
  %1002 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1001, i32 %872) #8
  %1003 = mul <4 x i32> %1002, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1004 = add <4 x i32> %1003, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1005 = ashr <4 x i32> %1004, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %1005, <4 x i32>* %205, align 16
  %1006 = add <4 x i32> %956, %879
  %1007 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1006, i32 %872) #8
  %1008 = mul <4 x i32> %1007, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1009 = add <4 x i32> %1008, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1010 = ashr <4 x i32> %1009, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %1010, <4 x i32>* %210, align 16
  %1011 = add <4 x i32> %956, %880
  %1012 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1011, i32 %872) #8
  %1013 = mul <4 x i32> %1012, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1014 = add <4 x i32> %1013, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1015 = ashr <4 x i32> %1014, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %1015, <4 x i32>* %216, align 16
  %1016 = add <4 x i32> %956, %881
  %1017 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1016, i32 %872) #8
  %1018 = mul <4 x i32> %1017, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1019 = add <4 x i32> %1018, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1020 = ashr <4 x i32> %1019, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %1020, <4 x i32>* %221, align 16
  %1021 = add <4 x i32> %956, %882
  %1022 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1021, i32 %872) #8
  %1023 = mul <4 x i32> %1022, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1024 = add <4 x i32> %1023, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1025 = ashr <4 x i32> %1024, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %1025, <4 x i32>* %227, align 16
  %1026 = add <4 x i32> %956, %883
  %1027 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1026, i32 %872) #8
  %1028 = mul <4 x i32> %1027, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1029 = add <4 x i32> %1028, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1030 = ashr <4 x i32> %1029, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %1030, <4 x i32>* %232, align 16
  %1031 = add <4 x i32> %956, %884
  %1032 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1031, i32 %872) #8
  %1033 = mul <4 x i32> %1032, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1034 = add <4 x i32> %1033, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1035 = ashr <4 x i32> %1034, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %1035, <4 x i32>* %238, align 16
  %1036 = add <4 x i32> %956, %885
  %1037 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %1036, i32 %872) #8
  br label %1038

1038:                                             ; preds = %886, %952
  %1039 = phi <4 x i32> [ %951, %886 ], [ %1037, %952 ]
  %1040 = phi <4 x i32> [ %950, %886 ], [ %1035, %952 ]
  %1041 = phi <4 x i32> [ %946, %886 ], [ %1030, %952 ]
  %1042 = phi <4 x i32> [ %942, %886 ], [ %1025, %952 ]
  %1043 = phi <4 x i32> [ %938, %886 ], [ %1020, %952 ]
  %1044 = phi <4 x i32> [ %934, %886 ], [ %1015, %952 ]
  %1045 = phi <4 x i32> [ %930, %886 ], [ %1010, %952 ]
  %1046 = phi <4 x i32> [ %926, %886 ], [ %1005, %952 ]
  %1047 = phi <4 x i32> [ %922, %886 ], [ %1000, %952 ]
  %1048 = phi <4 x i32> [ %918, %886 ], [ %995, %952 ]
  %1049 = phi <4 x i32> [ %914, %886 ], [ %989, %952 ]
  %1050 = phi <4 x i32> [ %910, %886 ], [ %984, %952 ]
  %1051 = phi <4 x i32> [ %906, %886 ], [ %978, %952 ]
  %1052 = phi <4 x i32> [ %902, %886 ], [ %973, %952 ]
  %1053 = phi <4 x i32> [ %898, %886 ], [ %967, %952 ]
  %1054 = phi <4 x i32> [ %894, %886 ], [ %962, %952 ]
  %1055 = mul <4 x i32> %1039, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1056 = add <4 x i32> %1055, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1057 = ashr <4 x i32> %1056, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %1057, <4 x i32>* %243, align 16
  %1058 = shl nsw i64 %803, 6
  %1059 = getelementptr inbounds i32, i32* %1, i64 %1058
  %1060 = bitcast i32* %1059 to <4 x i32>*
  store <4 x i32> %1054, <4 x i32>* %1060, align 16
  %1061 = getelementptr inbounds i32, i32* %1059, i64 4
  %1062 = bitcast i32* %1061 to <4 x i32>*
  store <4 x i32> %1053, <4 x i32>* %1062, align 16
  %1063 = getelementptr inbounds i32, i32* %1059, i64 8
  %1064 = bitcast i32* %1063 to <4 x i32>*
  store <4 x i32> %1052, <4 x i32>* %1064, align 16
  %1065 = getelementptr inbounds i32, i32* %1059, i64 12
  %1066 = bitcast i32* %1065 to <4 x i32>*
  store <4 x i32> %1051, <4 x i32>* %1066, align 16
  %1067 = getelementptr inbounds i32, i32* %1059, i64 16
  %1068 = bitcast i32* %1067 to <4 x i32>*
  store <4 x i32> %1050, <4 x i32>* %1068, align 16
  %1069 = getelementptr inbounds i32, i32* %1059, i64 20
  %1070 = bitcast i32* %1069 to <4 x i32>*
  store <4 x i32> %1049, <4 x i32>* %1070, align 16
  %1071 = getelementptr inbounds i32, i32* %1059, i64 24
  %1072 = bitcast i32* %1071 to <4 x i32>*
  store <4 x i32> %1048, <4 x i32>* %1072, align 16
  %1073 = getelementptr inbounds i32, i32* %1059, i64 28
  %1074 = bitcast i32* %1073 to <4 x i32>*
  store <4 x i32> %1047, <4 x i32>* %1074, align 16
  %1075 = getelementptr inbounds i32, i32* %1059, i64 32
  %1076 = bitcast i32* %1075 to <4 x i32>*
  store <4 x i32> %1046, <4 x i32>* %1076, align 16
  %1077 = getelementptr inbounds i32, i32* %1059, i64 36
  %1078 = bitcast i32* %1077 to <4 x i32>*
  store <4 x i32> %1045, <4 x i32>* %1078, align 16
  %1079 = getelementptr inbounds i32, i32* %1059, i64 40
  %1080 = bitcast i32* %1079 to <4 x i32>*
  store <4 x i32> %1044, <4 x i32>* %1080, align 16
  %1081 = getelementptr inbounds i32, i32* %1059, i64 44
  %1082 = bitcast i32* %1081 to <4 x i32>*
  store <4 x i32> %1043, <4 x i32>* %1082, align 16
  %1083 = getelementptr inbounds i32, i32* %1059, i64 48
  %1084 = bitcast i32* %1083 to <4 x i32>*
  store <4 x i32> %1042, <4 x i32>* %1084, align 16
  %1085 = getelementptr inbounds i32, i32* %1059, i64 52
  %1086 = bitcast i32* %1085 to <4 x i32>*
  store <4 x i32> %1041, <4 x i32>* %1086, align 16
  %1087 = getelementptr inbounds i32, i32* %1059, i64 56
  %1088 = bitcast i32* %1087 to <4 x i32>*
  store <4 x i32> %1040, <4 x i32>* %1088, align 16
  %1089 = getelementptr inbounds i32, i32* %1059, i64 60
  %1090 = bitcast i32* %1089 to <4 x i32>*
  store <4 x i32> %1057, <4 x i32>* %1090, align 16
  %1091 = add nuw nsw i64 %803, 1
  %1092 = icmp eq i64 %1091, 2
  br i1 %1092, label %801, label %802
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_16x4_sse4_1(i16* nocapture readonly, i32*, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [16 x <2 x i64>], align 16
  %7 = bitcast [16 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 256, i1 false)
  %8 = bitcast i32* %1 to <2 x i64>*
  %9 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 14), align 16
  %10 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 0), align 2
  %11 = sext i8 %10 to i32
  %12 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 0), align 2
  %13 = sext i8 %12 to i32
  %14 = zext i8 %3 to i64
  %15 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @col_highbd_txfm4x4_arr, i64 0, i64 %14
  %16 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %15, align 8
  %17 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @row_highbd_txfm8x16_arr, i64 0, i64 %14
  %18 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %17, align 8
  switch i8 %3, label %19 [
    i8 6, label %31
    i8 15, label %23
    i8 7, label %23
    i8 5, label %23
    i8 14, label %27
    i8 8, label %27
    i8 4, label %27
  ]

19:                                               ; preds = %5
  %20 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %21 = getelementptr inbounds i16, i16* %0, i64 8
  %22 = getelementptr inbounds i16, i16* %0, i64 4
  br label %71

23:                                               ; preds = %5, %5, %5
  %24 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %25 = getelementptr inbounds i16, i16* %0, i64 8
  %26 = getelementptr inbounds i16, i16* %0, i64 12
  br label %71

27:                                               ; preds = %5, %5, %5
  %28 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %29 = getelementptr inbounds i16, i16* %0, i64 8
  %30 = getelementptr inbounds i16, i16* %0, i64 4
  br label %35

31:                                               ; preds = %5
  %32 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %33 = getelementptr inbounds i16, i16* %0, i64 8
  %34 = getelementptr inbounds i16, i16* %0, i64 12
  br label %35

35:                                               ; preds = %27, %31
  %36 = phi i16* [ %30, %27 ], [ %33, %31 ]
  %37 = phi i16* [ %29, %27 ], [ %0, %31 ]
  %38 = phi i16* [ %29, %27 ], [ %33, %31 ]
  %39 = phi <2 x i64>* [ %28, %27 ], [ %32, %31 ]
  %40 = phi i1 [ true, %27 ], [ false, %31 ]
  %41 = phi i16* [ %0, %27 ], [ %34, %31 ]
  %42 = load i8, i8* %9, align 1
  %43 = sext i8 %42 to i32
  %44 = mul nsw i32 %2, 3
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i16, i16* %41, i64 %45
  %47 = bitcast i16* %46 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %48, i32 0
  store <2 x i64> %49, <2 x i64>* %39, align 16
  %50 = shl nsw i32 %2, 1
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i16, i16* %41, i64 %51
  %53 = bitcast i16* %52 to i64*
  %54 = load i64, i64* %53, align 1
  %55 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %54, i32 0
  %56 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %55, <2 x i64>* %56, align 16
  %57 = sext i32 %2 to i64
  %58 = getelementptr inbounds i16, i16* %41, i64 %57
  %59 = bitcast i16* %58 to i64*
  %60 = load i64, i64* %59, align 1
  %61 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %60, i32 0
  %62 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %61, <2 x i64>* %62, align 16
  %63 = bitcast i16* %41 to i64*
  %64 = load i64, i64* %63, align 1
  %65 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %64, i32 0
  %66 = bitcast <2 x i64> %49 to <8 x i16>
  %67 = bitcast <2 x i64> %55 to <8 x i16>
  %68 = bitcast <2 x i64> %61 to <8 x i16>
  %69 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %65, <2 x i64>* %69, align 16
  %70 = bitcast <2 x i64> %65 to <8 x i16>
  br i1 %40, label %129, label %107

71:                                               ; preds = %19, %23
  %72 = phi i16* [ %25, %23 ], [ %22, %19 ]
  %73 = phi i16* [ %0, %23 ], [ %21, %19 ]
  %74 = phi i16* [ %25, %23 ], [ %21, %19 ]
  %75 = phi <2 x i64>* [ %24, %23 ], [ %20, %19 ]
  %76 = phi i1 [ false, %23 ], [ true, %19 ]
  %77 = phi i16* [ %26, %23 ], [ %0, %19 ]
  %78 = load i8, i8* %9, align 1
  %79 = sext i8 %78 to i32
  %80 = bitcast i16* %77 to i64*
  %81 = load i64, i64* %80, align 1
  %82 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %81, i32 0
  store <2 x i64> %82, <2 x i64>* %75, align 16
  %83 = sext i32 %2 to i64
  %84 = getelementptr inbounds i16, i16* %77, i64 %83
  %85 = bitcast i16* %84 to i64*
  %86 = load i64, i64* %85, align 1
  %87 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %86, i32 0
  %88 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %87, <2 x i64>* %88, align 16
  %89 = shl nsw i32 %2, 1
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i16, i16* %77, i64 %90
  %92 = bitcast i16* %91 to i64*
  %93 = load i64, i64* %92, align 1
  %94 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %93, i32 0
  %95 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %94, <2 x i64>* %95, align 16
  %96 = mul nsw i32 %2, 3
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i16, i16* %77, i64 %97
  %99 = bitcast i16* %98 to i64*
  %100 = load i64, i64* %99, align 1
  %101 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %100, i32 0
  %102 = bitcast <2 x i64> %82 to <8 x i16>
  %103 = bitcast <2 x i64> %87 to <8 x i16>
  %104 = bitcast <2 x i64> %94 to <8 x i16>
  %105 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %101, <2 x i64>* %105, align 16
  %106 = bitcast <2 x i64> %101 to <8 x i16>
  br i1 %76, label %129, label %107

107:                                              ; preds = %35, %71
  %108 = phi <8 x i16> [ %70, %35 ], [ %106, %71 ]
  %109 = phi <2 x i64>* [ %69, %35 ], [ %105, %71 ]
  %110 = phi <8 x i16> [ %68, %35 ], [ %104, %71 ]
  %111 = phi <8 x i16> [ %67, %35 ], [ %103, %71 ]
  %112 = phi <8 x i16> [ %66, %35 ], [ %102, %71 ]
  %113 = phi i1 [ false, %35 ], [ true, %71 ]
  %114 = phi <2 x i64>* [ %39, %35 ], [ %75, %71 ]
  %115 = phi i32 [ %43, %35 ], [ %79, %71 ]
  %116 = phi i16* [ %38, %35 ], [ %74, %71 ]
  %117 = phi i16* [ %37, %35 ], [ %73, %71 ]
  %118 = phi i16* [ %36, %35 ], [ %72, %71 ]
  %119 = bitcast [16 x <2 x i64>]* %6 to <8 x i16>*
  %120 = shufflevector <8 x i16> %112, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %120, <8 x i16>* %119, align 16
  %121 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  %122 = bitcast <2 x i64>* %121 to <8 x i16>*
  %123 = shufflevector <8 x i16> %111, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %123, <8 x i16>* %122, align 16
  %124 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  %125 = bitcast <2 x i64>* %124 to <8 x i16>*
  %126 = shufflevector <8 x i16> %110, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %126, <8 x i16>* %125, align 16
  %127 = bitcast <2 x i64>* %109 to <8 x i16>*
  %128 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %128, <8 x i16>* %127, align 16
  br label %129

129:                                              ; preds = %35, %107, %71
  %130 = phi <2 x i64>* [ %109, %107 ], [ %105, %71 ], [ %69, %35 ]
  %131 = phi i1 [ %113, %107 ], [ true, %71 ], [ false, %35 ]
  %132 = phi i1 [ false, %107 ], [ true, %71 ], [ true, %35 ]
  %133 = phi <2 x i64>* [ %114, %107 ], [ %75, %71 ], [ %39, %35 ]
  %134 = phi i32 [ %115, %107 ], [ %79, %71 ], [ %43, %35 ]
  %135 = phi i16* [ %116, %107 ], [ %74, %71 ], [ %38, %35 ]
  %136 = phi i16* [ %117, %107 ], [ %73, %71 ], [ %37, %35 ]
  %137 = phi i16* [ %118, %107 ], [ %72, %71 ], [ %36, %35 ]
  %138 = phi <8 x i16> [ %128, %107 ], [ %106, %71 ], [ %70, %35 ]
  %139 = phi <8 x i16> [ %126, %107 ], [ %104, %71 ], [ %68, %35 ]
  %140 = phi <8 x i16> [ %123, %107 ], [ %103, %71 ], [ %67, %35 ]
  %141 = phi <8 x i16> [ %120, %107 ], [ %102, %71 ], [ %66, %35 ]
  %142 = shufflevector <8 x i16> %141, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %143 = sext <4 x i16> %142 to <4 x i32>
  %144 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %145 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  %146 = shufflevector <8 x i16> %140, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %147 = sext <4 x i16> %146 to <4 x i32>
  %148 = bitcast <2 x i64>* %145 to <4 x i32>*
  %149 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  %150 = shufflevector <8 x i16> %139, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %151 = sext <4 x i16> %150 to <4 x i32>
  %152 = bitcast <2 x i64>* %149 to <4 x i32>*
  %153 = shufflevector <8 x i16> %138, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %154 = sext <4 x i16> %153 to <4 x i32>
  %155 = bitcast <2 x i64>* %130 to <4 x i32>*
  %156 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %143, i32 %134) #8
  store <4 x i32> %156, <4 x i32>* %144, align 16
  %157 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %147, i32 %134) #8
  store <4 x i32> %157, <4 x i32>* %148, align 16
  %158 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %151, i32 %134) #8
  store <4 x i32> %158, <4 x i32>* %152, align 16
  %159 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %154, i32 %134) #8
  store <4 x i32> %159, <4 x i32>* %155, align 16
  %160 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  br i1 %131, label %161, label %181

161:                                              ; preds = %129
  %162 = bitcast i16* %137 to i64*
  %163 = load i64, i64* %162, align 1
  %164 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %163, i32 0
  store <2 x i64> %164, <2 x i64>* %160, align 16
  %165 = sext i32 %2 to i64
  %166 = getelementptr inbounds i16, i16* %137, i64 %165
  %167 = bitcast i16* %166 to i64*
  %168 = load i64, i64* %167, align 1
  %169 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %168, i32 0
  %170 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %169, <2 x i64>* %170, align 16
  %171 = shl nsw i32 %2, 1
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i16, i16* %137, i64 %172
  %174 = bitcast i16* %173 to i64*
  %175 = load i64, i64* %174, align 1
  %176 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %175, i32 0
  %177 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %176, <2 x i64>* %177, align 16
  %178 = mul nsw i32 %2, 3
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds i16, i16* %137, i64 %179
  br label %201

181:                                              ; preds = %129
  %182 = mul nsw i32 %2, 3
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds i16, i16* %137, i64 %183
  %185 = bitcast i16* %184 to i64*
  %186 = load i64, i64* %185, align 1
  %187 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %186, i32 0
  store <2 x i64> %187, <2 x i64>* %160, align 16
  %188 = shl nsw i32 %2, 1
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i16, i16* %137, i64 %189
  %191 = bitcast i16* %190 to i64*
  %192 = load i64, i64* %191, align 1
  %193 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %192, i32 0
  %194 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %193, <2 x i64>* %194, align 16
  %195 = sext i32 %2 to i64
  %196 = getelementptr inbounds i16, i16* %137, i64 %195
  %197 = bitcast i16* %196 to i64*
  %198 = load i64, i64* %197, align 1
  %199 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %198, i32 0
  %200 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %199, <2 x i64>* %200, align 16
  br label %201

201:                                              ; preds = %181, %161
  %202 = phi i16* [ %137, %181 ], [ %180, %161 ]
  %203 = phi <2 x i64> [ %199, %181 ], [ %176, %161 ]
  %204 = phi <2 x i64> [ %193, %181 ], [ %169, %161 ]
  %205 = phi <2 x i64> [ %187, %181 ], [ %164, %161 ]
  %206 = bitcast i16* %202 to i64*
  %207 = load i64, i64* %206, align 1
  %208 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %207, i32 0
  %209 = bitcast <2 x i64> %205 to <8 x i16>
  %210 = bitcast <2 x i64> %204 to <8 x i16>
  %211 = bitcast <2 x i64> %203 to <8 x i16>
  %212 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %208, <2 x i64>* %212, align 16
  %213 = bitcast <2 x i64> %208 to <8 x i16>
  br i1 %132, label %225, label %214

214:                                              ; preds = %201
  %215 = bitcast <2 x i64>* %160 to <8 x i16>*
  %216 = shufflevector <8 x i16> %209, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %216, <8 x i16>* %215, align 16
  %217 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  %218 = bitcast <2 x i64>* %217 to <8 x i16>*
  %219 = shufflevector <8 x i16> %210, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %219, <8 x i16>* %218, align 16
  %220 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  %221 = bitcast <2 x i64>* %220 to <8 x i16>*
  %222 = shufflevector <8 x i16> %211, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %222, <8 x i16>* %221, align 16
  %223 = bitcast <2 x i64>* %212 to <8 x i16>*
  %224 = shufflevector <8 x i16> %213, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %224, <8 x i16>* %223, align 16
  br label %225

225:                                              ; preds = %214, %201
  %226 = phi <8 x i16> [ %224, %214 ], [ %213, %201 ]
  %227 = phi <8 x i16> [ %222, %214 ], [ %211, %201 ]
  %228 = phi <8 x i16> [ %219, %214 ], [ %210, %201 ]
  %229 = phi <8 x i16> [ %216, %214 ], [ %209, %201 ]
  %230 = shufflevector <8 x i16> %229, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %231 = sext <4 x i16> %230 to <4 x i32>
  %232 = bitcast <2 x i64>* %160 to <4 x i32>*
  %233 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  %234 = shufflevector <8 x i16> %228, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %235 = sext <4 x i16> %234 to <4 x i32>
  %236 = bitcast <2 x i64>* %233 to <4 x i32>*
  %237 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  %238 = shufflevector <8 x i16> %227, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %239 = sext <4 x i16> %238 to <4 x i32>
  %240 = bitcast <2 x i64>* %237 to <4 x i32>*
  %241 = shufflevector <8 x i16> %226, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %242 = sext <4 x i16> %241 to <4 x i32>
  %243 = bitcast <2 x i64>* %212 to <4 x i32>*
  %244 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %231, i32 %134) #8
  store <4 x i32> %244, <4 x i32>* %232, align 16
  %245 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %235, i32 %134) #8
  store <4 x i32> %245, <4 x i32>* %236, align 16
  %246 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %239, i32 %134) #8
  store <4 x i32> %246, <4 x i32>* %240, align 16
  %247 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %242, i32 %134) #8
  store <4 x i32> %247, <4 x i32>* %243, align 16
  %248 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %249 = getelementptr inbounds i16, i16* %136, i64 4
  %250 = select i1 %132, i16* %135, i16* %249
  %251 = select i1 %132, i16* %249, i16* %0
  br i1 %131, label %252, label %272

252:                                              ; preds = %225
  %253 = bitcast i16* %250 to i64*
  %254 = load i64, i64* %253, align 1
  %255 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %254, i32 0
  store <2 x i64> %255, <2 x i64>* %248, align 16
  %256 = sext i32 %2 to i64
  %257 = getelementptr inbounds i16, i16* %250, i64 %256
  %258 = bitcast i16* %257 to i64*
  %259 = load i64, i64* %258, align 1
  %260 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %259, i32 0
  %261 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %260, <2 x i64>* %261, align 16
  %262 = shl nsw i32 %2, 1
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i16, i16* %250, i64 %263
  %265 = bitcast i16* %264 to i64*
  %266 = load i64, i64* %265, align 1
  %267 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %266, i32 0
  %268 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %267, <2 x i64>* %268, align 16
  %269 = mul nsw i32 %2, 3
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i16, i16* %250, i64 %270
  br label %292

272:                                              ; preds = %225
  %273 = mul nsw i32 %2, 3
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds i16, i16* %250, i64 %274
  %276 = bitcast i16* %275 to i64*
  %277 = load i64, i64* %276, align 1
  %278 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %277, i32 0
  store <2 x i64> %278, <2 x i64>* %248, align 16
  %279 = shl nsw i32 %2, 1
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds i16, i16* %250, i64 %280
  %282 = bitcast i16* %281 to i64*
  %283 = load i64, i64* %282, align 1
  %284 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %283, i32 0
  %285 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  store <2 x i64> %284, <2 x i64>* %285, align 16
  %286 = sext i32 %2 to i64
  %287 = getelementptr inbounds i16, i16* %250, i64 %286
  %288 = bitcast i16* %287 to i64*
  %289 = load i64, i64* %288, align 1
  %290 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %289, i32 0
  %291 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  store <2 x i64> %290, <2 x i64>* %291, align 16
  br label %292

292:                                              ; preds = %272, %252
  %293 = phi i16* [ %250, %272 ], [ %271, %252 ]
  %294 = phi <2 x i64> [ %290, %272 ], [ %267, %252 ]
  %295 = phi <2 x i64> [ %284, %272 ], [ %260, %252 ]
  %296 = phi <2 x i64> [ %278, %272 ], [ %255, %252 ]
  %297 = bitcast i16* %293 to i64*
  %298 = load i64, i64* %297, align 1
  %299 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %298, i32 0
  %300 = bitcast <2 x i64> %296 to <8 x i16>
  %301 = bitcast <2 x i64> %295 to <8 x i16>
  %302 = bitcast <2 x i64> %294 to <8 x i16>
  %303 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  store <2 x i64> %299, <2 x i64>* %303, align 16
  %304 = bitcast <2 x i64> %299 to <8 x i16>
  br i1 %132, label %316, label %305

305:                                              ; preds = %292
  %306 = bitcast <2 x i64>* %248 to <8 x i16>*
  %307 = shufflevector <8 x i16> %300, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %307, <8 x i16>* %306, align 16
  %308 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %309 = bitcast <2 x i64>* %308 to <8 x i16>*
  %310 = shufflevector <8 x i16> %301, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %310, <8 x i16>* %309, align 16
  %311 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %312 = bitcast <2 x i64>* %311 to <8 x i16>*
  %313 = shufflevector <8 x i16> %302, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %313, <8 x i16>* %312, align 16
  %314 = bitcast <2 x i64>* %303 to <8 x i16>*
  %315 = shufflevector <8 x i16> %304, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %315, <8 x i16>* %314, align 16
  br label %316

316:                                              ; preds = %305, %292
  %317 = phi <8 x i16> [ %315, %305 ], [ %304, %292 ]
  %318 = phi <8 x i16> [ %313, %305 ], [ %302, %292 ]
  %319 = phi <8 x i16> [ %310, %305 ], [ %301, %292 ]
  %320 = phi <8 x i16> [ %307, %305 ], [ %300, %292 ]
  %321 = shufflevector <8 x i16> %320, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %322 = sext <4 x i16> %321 to <4 x i32>
  %323 = bitcast <2 x i64>* %248 to <4 x i32>*
  %324 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %325 = shufflevector <8 x i16> %319, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %326 = sext <4 x i16> %325 to <4 x i32>
  %327 = bitcast <2 x i64>* %324 to <4 x i32>*
  %328 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %329 = shufflevector <8 x i16> %318, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %330 = sext <4 x i16> %329 to <4 x i32>
  %331 = bitcast <2 x i64>* %328 to <4 x i32>*
  %332 = shufflevector <8 x i16> %317, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %333 = sext <4 x i16> %332 to <4 x i32>
  %334 = bitcast <2 x i64>* %303 to <4 x i32>*
  %335 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %322, i32 %134) #8
  store <4 x i32> %335, <4 x i32>* %323, align 16
  %336 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %326, i32 %134) #8
  store <4 x i32> %336, <4 x i32>* %327, align 16
  %337 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %330, i32 %134) #8
  store <4 x i32> %337, <4 x i32>* %331, align 16
  %338 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %333, i32 %134) #8
  store <4 x i32> %338, <4 x i32>* %334, align 16
  %339 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  br i1 %131, label %340, label %360

340:                                              ; preds = %316
  %341 = bitcast i16* %251 to i64*
  %342 = load i64, i64* %341, align 1
  %343 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %342, i32 0
  store <2 x i64> %343, <2 x i64>* %339, align 16
  %344 = sext i32 %2 to i64
  %345 = getelementptr inbounds i16, i16* %251, i64 %344
  %346 = bitcast i16* %345 to i64*
  %347 = load i64, i64* %346, align 1
  %348 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %347, i32 0
  %349 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %348, <2 x i64>* %349, align 16
  %350 = shl nsw i32 %2, 1
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds i16, i16* %251, i64 %351
  %353 = bitcast i16* %352 to i64*
  %354 = load i64, i64* %353, align 1
  %355 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %354, i32 0
  %356 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %355, <2 x i64>* %356, align 16
  %357 = mul nsw i32 %2, 3
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds i16, i16* %251, i64 %358
  br label %380

360:                                              ; preds = %316
  %361 = mul nsw i32 %2, 3
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds i16, i16* %251, i64 %362
  %364 = bitcast i16* %363 to i64*
  %365 = load i64, i64* %364, align 1
  %366 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %365, i32 0
  store <2 x i64> %366, <2 x i64>* %339, align 16
  %367 = shl nsw i32 %2, 1
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds i16, i16* %251, i64 %368
  %370 = bitcast i16* %369 to i64*
  %371 = load i64, i64* %370, align 1
  %372 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %371, i32 0
  %373 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  store <2 x i64> %372, <2 x i64>* %373, align 16
  %374 = sext i32 %2 to i64
  %375 = getelementptr inbounds i16, i16* %251, i64 %374
  %376 = bitcast i16* %375 to i64*
  %377 = load i64, i64* %376, align 1
  %378 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %377, i32 0
  %379 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  store <2 x i64> %378, <2 x i64>* %379, align 16
  br label %380

380:                                              ; preds = %360, %340
  %381 = phi i16* [ %251, %360 ], [ %359, %340 ]
  %382 = phi <2 x i64> [ %378, %360 ], [ %355, %340 ]
  %383 = phi <2 x i64> [ %372, %360 ], [ %348, %340 ]
  %384 = phi <2 x i64> [ %366, %360 ], [ %343, %340 ]
  %385 = bitcast i16* %381 to i64*
  %386 = load i64, i64* %385, align 1
  %387 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %386, i32 0
  %388 = bitcast <2 x i64> %384 to <8 x i16>
  %389 = bitcast <2 x i64> %383 to <8 x i16>
  %390 = bitcast <2 x i64> %382 to <8 x i16>
  %391 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  store <2 x i64> %387, <2 x i64>* %391, align 16
  %392 = bitcast <2 x i64> %387 to <8 x i16>
  br i1 %132, label %404, label %393

393:                                              ; preds = %380
  %394 = bitcast <2 x i64>* %339 to <8 x i16>*
  %395 = shufflevector <8 x i16> %388, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %395, <8 x i16>* %394, align 16
  %396 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %397 = bitcast <2 x i64>* %396 to <8 x i16>*
  %398 = shufflevector <8 x i16> %389, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %398, <8 x i16>* %397, align 16
  %399 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %400 = bitcast <2 x i64>* %399 to <8 x i16>*
  %401 = shufflevector <8 x i16> %390, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %401, <8 x i16>* %400, align 16
  %402 = bitcast <2 x i64>* %391 to <8 x i16>*
  %403 = shufflevector <8 x i16> %392, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %403, <8 x i16>* %402, align 16
  br label %404

404:                                              ; preds = %380, %393
  %405 = phi <8 x i16> [ %403, %393 ], [ %392, %380 ]
  %406 = phi <8 x i16> [ %401, %393 ], [ %390, %380 ]
  %407 = phi <8 x i16> [ %398, %393 ], [ %389, %380 ]
  %408 = phi <8 x i16> [ %395, %393 ], [ %388, %380 ]
  %409 = shufflevector <8 x i16> %408, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %410 = sext <4 x i16> %409 to <4 x i32>
  %411 = bitcast <2 x i64>* %339 to <4 x i32>*
  %412 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %413 = shufflevector <8 x i16> %407, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %414 = sext <4 x i16> %413 to <4 x i32>
  %415 = bitcast <2 x i64>* %412 to <4 x i32>*
  %416 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %417 = shufflevector <8 x i16> %406, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %418 = sext <4 x i16> %417 to <4 x i32>
  %419 = bitcast <2 x i64>* %416 to <4 x i32>*
  %420 = shufflevector <8 x i16> %405, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %421 = sext <4 x i16> %420 to <4 x i32>
  %422 = bitcast <2 x i64>* %391 to <4 x i32>*
  %423 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %410, i32 %134) #8
  store <4 x i32> %423, <4 x i32>* %411, align 16
  %424 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %414, i32 %134) #8
  store <4 x i32> %424, <4 x i32>* %415, align 16
  %425 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %418, i32 %134) #8
  store <4 x i32> %425, <4 x i32>* %419, align 16
  %426 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %421, i32 %134) #8
  store <4 x i32> %426, <4 x i32>* %422, align 16
  call void %16(<2 x i64>* %133, <2 x i64>* %8, i32 %11, i32 1) #8
  %427 = getelementptr inbounds i32, i32* %1, i64 16
  %428 = bitcast i32* %427 to <2 x i64>*
  call void %16(<2 x i64>* %160, <2 x i64>* %428, i32 %11, i32 1) #8
  %429 = getelementptr inbounds i32, i32* %1, i64 32
  %430 = bitcast i32* %429 to <2 x i64>*
  call void %16(<2 x i64>* %248, <2 x i64>* %430, i32 %11, i32 1) #8
  %431 = getelementptr inbounds i32, i32* %1, i64 48
  %432 = bitcast i32* %431 to <2 x i64>*
  call void %16(<2 x i64>* %339, <2 x i64>* %432, i32 %11, i32 1) #8
  %433 = getelementptr inbounds i8, i8* %9, i64 1
  %434 = load i8, i8* %433, align 1
  %435 = sext i8 %434 to i32
  %436 = sub nsw i32 0, %435
  %437 = xor i32 %435, -1
  %438 = shl i32 1, %437
  %439 = insertelement <4 x i32> undef, i32 %438, i32 0
  %440 = shufflevector <4 x i32> %439, <4 x i32> undef, <4 x i32> zeroinitializer
  %441 = bitcast i32* %1 to <4 x i32>*
  %442 = load <4 x i32>, <4 x i32>* %441, align 16
  %443 = add <4 x i32> %440, %442
  %444 = getelementptr inbounds i32, i32* %1, i64 4
  %445 = bitcast i32* %444 to <4 x i32>*
  %446 = load <4 x i32>, <4 x i32>* %445, align 16
  %447 = add <4 x i32> %440, %446
  %448 = getelementptr inbounds i32, i32* %1, i64 8
  %449 = bitcast i32* %448 to <4 x i32>*
  %450 = load <4 x i32>, <4 x i32>* %449, align 16
  %451 = add <4 x i32> %440, %450
  %452 = getelementptr inbounds i32, i32* %1, i64 12
  %453 = bitcast i32* %452 to <4 x i32>*
  %454 = load <4 x i32>, <4 x i32>* %453, align 16
  %455 = add <4 x i32> %454, %440
  %456 = getelementptr inbounds i32, i32* %1, i64 16
  %457 = bitcast i32* %456 to <4 x i32>*
  %458 = load <4 x i32>, <4 x i32>* %457, align 16
  %459 = add <4 x i32> %458, %440
  %460 = getelementptr inbounds i32, i32* %1, i64 20
  %461 = bitcast i32* %460 to <4 x i32>*
  %462 = load <4 x i32>, <4 x i32>* %461, align 16
  %463 = add <4 x i32> %462, %440
  %464 = getelementptr inbounds i32, i32* %1, i64 24
  %465 = bitcast i32* %464 to <4 x i32>*
  %466 = load <4 x i32>, <4 x i32>* %465, align 16
  %467 = add <4 x i32> %466, %440
  %468 = getelementptr inbounds i32, i32* %1, i64 28
  %469 = bitcast i32* %468 to <4 x i32>*
  %470 = load <4 x i32>, <4 x i32>* %469, align 16
  %471 = add <4 x i32> %470, %440
  %472 = getelementptr inbounds i32, i32* %1, i64 32
  %473 = bitcast i32* %472 to <4 x i32>*
  %474 = load <4 x i32>, <4 x i32>* %473, align 16
  %475 = add <4 x i32> %474, %440
  %476 = getelementptr inbounds i32, i32* %1, i64 36
  %477 = bitcast i32* %476 to <4 x i32>*
  %478 = load <4 x i32>, <4 x i32>* %477, align 16
  %479 = add <4 x i32> %478, %440
  %480 = getelementptr inbounds i32, i32* %1, i64 40
  %481 = bitcast i32* %480 to <4 x i32>*
  %482 = load <4 x i32>, <4 x i32>* %481, align 16
  %483 = add <4 x i32> %482, %440
  %484 = getelementptr inbounds i32, i32* %1, i64 44
  %485 = bitcast i32* %484 to <4 x i32>*
  %486 = load <4 x i32>, <4 x i32>* %485, align 16
  %487 = add <4 x i32> %486, %440
  %488 = getelementptr inbounds i32, i32* %1, i64 48
  %489 = bitcast i32* %488 to <4 x i32>*
  %490 = load <4 x i32>, <4 x i32>* %489, align 16
  %491 = add <4 x i32> %490, %440
  %492 = getelementptr inbounds i32, i32* %1, i64 52
  %493 = bitcast i32* %492 to <4 x i32>*
  %494 = load <4 x i32>, <4 x i32>* %493, align 16
  %495 = add <4 x i32> %494, %440
  %496 = getelementptr inbounds i32, i32* %1, i64 56
  %497 = bitcast i32* %496 to <4 x i32>*
  %498 = load <4 x i32>, <4 x i32>* %497, align 16
  %499 = add <4 x i32> %498, %440
  %500 = getelementptr inbounds i32, i32* %1, i64 60
  %501 = bitcast i32* %500 to <4 x i32>*
  %502 = load <4 x i32>, <4 x i32>* %501, align 16
  %503 = add <4 x i32> %502, %440
  %504 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %443, i32 %436) #8
  store <4 x i32> %504, <4 x i32>* %441, align 16
  %505 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %447, i32 %436) #8
  store <4 x i32> %505, <4 x i32>* %445, align 16
  %506 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %451, i32 %436) #8
  store <4 x i32> %506, <4 x i32>* %449, align 16
  %507 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %455, i32 %436) #8
  store <4 x i32> %507, <4 x i32>* %453, align 16
  %508 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %459, i32 %436) #8
  store <4 x i32> %508, <4 x i32>* %457, align 16
  %509 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %463, i32 %436) #8
  store <4 x i32> %509, <4 x i32>* %461, align 16
  %510 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %467, i32 %436) #8
  store <4 x i32> %510, <4 x i32>* %465, align 16
  %511 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %471, i32 %436) #8
  store <4 x i32> %511, <4 x i32>* %469, align 16
  %512 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %475, i32 %436) #8
  store <4 x i32> %512, <4 x i32>* %473, align 16
  %513 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %479, i32 %436) #8
  store <4 x i32> %513, <4 x i32>* %477, align 16
  %514 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %483, i32 %436) #8
  store <4 x i32> %514, <4 x i32>* %481, align 16
  %515 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %487, i32 %436) #8
  store <4 x i32> %515, <4 x i32>* %485, align 16
  %516 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %491, i32 %436) #8
  store <4 x i32> %516, <4 x i32>* %489, align 16
  %517 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %495, i32 %436) #8
  store <4 x i32> %517, <4 x i32>* %493, align 16
  %518 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %499, i32 %436) #8
  store <4 x i32> %518, <4 x i32>* %497, align 16
  %519 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %503, i32 %436) #8
  store <4 x i32> %519, <4 x i32>* %501, align 16
  call void %18(<2 x i64>* %8, <2 x i64>* nonnull %133, i32 %13, i32 1) #8
  %520 = bitcast [16 x <2 x i64>]* %6 to <4 x i32>*
  %521 = load <4 x i32>, <4 x i32>* %520, align 16
  %522 = load <4 x i32>, <4 x i32>* %148, align 16
  %523 = shufflevector <4 x i32> %521, <4 x i32> %522, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %524 = bitcast <4 x i32> %523 to <2 x i64>
  %525 = shufflevector <4 x i32> %521, <4 x i32> %522, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %526 = bitcast <4 x i32> %525 to <2 x i64>
  %527 = load <4 x i32>, <4 x i32>* %152, align 16
  %528 = load <4 x i32>, <4 x i32>* %155, align 16
  %529 = shufflevector <4 x i32> %527, <4 x i32> %528, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %530 = bitcast <4 x i32> %529 to <2 x i64>
  %531 = shufflevector <4 x i32> %527, <4 x i32> %528, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %532 = bitcast <4 x i32> %531 to <2 x i64>
  %533 = shufflevector <2 x i64> %524, <2 x i64> %530, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %533, <2 x i64>* %8, align 16
  %534 = shufflevector <2 x i64> %524, <2 x i64> %530, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %534, <2 x i64>* %428, align 16
  %535 = shufflevector <2 x i64> %526, <2 x i64> %532, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %535, <2 x i64>* %430, align 16
  %536 = shufflevector <2 x i64> %526, <2 x i64> %532, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %536, <2 x i64>* %432, align 16
  %537 = load <4 x i32>, <4 x i32>* %232, align 16
  %538 = load <4 x i32>, <4 x i32>* %236, align 16
  %539 = shufflevector <4 x i32> %537, <4 x i32> %538, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %540 = bitcast <4 x i32> %539 to <2 x i64>
  %541 = shufflevector <4 x i32> %537, <4 x i32> %538, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %542 = bitcast <4 x i32> %541 to <2 x i64>
  %543 = load <4 x i32>, <4 x i32>* %240, align 16
  %544 = load <4 x i32>, <4 x i32>* %243, align 16
  %545 = shufflevector <4 x i32> %543, <4 x i32> %544, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %546 = bitcast <4 x i32> %545 to <2 x i64>
  %547 = shufflevector <4 x i32> %543, <4 x i32> %544, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %548 = bitcast <4 x i32> %547 to <2 x i64>
  %549 = shufflevector <2 x i64> %540, <2 x i64> %546, <2 x i32> <i32 0, i32 2>
  %550 = getelementptr inbounds i32, i32* %1, i64 4
  %551 = bitcast i32* %550 to <2 x i64>*
  store <2 x i64> %549, <2 x i64>* %551, align 16
  %552 = shufflevector <2 x i64> %540, <2 x i64> %546, <2 x i32> <i32 1, i32 3>
  %553 = getelementptr inbounds i32, i32* %1, i64 20
  %554 = bitcast i32* %553 to <2 x i64>*
  store <2 x i64> %552, <2 x i64>* %554, align 16
  %555 = shufflevector <2 x i64> %542, <2 x i64> %548, <2 x i32> <i32 0, i32 2>
  %556 = getelementptr inbounds i32, i32* %1, i64 36
  %557 = bitcast i32* %556 to <2 x i64>*
  store <2 x i64> %555, <2 x i64>* %557, align 16
  %558 = shufflevector <2 x i64> %542, <2 x i64> %548, <2 x i32> <i32 1, i32 3>
  %559 = getelementptr inbounds i32, i32* %1, i64 52
  %560 = bitcast i32* %559 to <2 x i64>*
  store <2 x i64> %558, <2 x i64>* %560, align 16
  %561 = load <4 x i32>, <4 x i32>* %323, align 16
  %562 = load <4 x i32>, <4 x i32>* %327, align 16
  %563 = shufflevector <4 x i32> %561, <4 x i32> %562, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %564 = bitcast <4 x i32> %563 to <2 x i64>
  %565 = shufflevector <4 x i32> %561, <4 x i32> %562, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %566 = bitcast <4 x i32> %565 to <2 x i64>
  %567 = load <4 x i32>, <4 x i32>* %331, align 16
  %568 = load <4 x i32>, <4 x i32>* %334, align 16
  %569 = shufflevector <4 x i32> %567, <4 x i32> %568, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %570 = bitcast <4 x i32> %569 to <2 x i64>
  %571 = shufflevector <4 x i32> %567, <4 x i32> %568, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %572 = bitcast <4 x i32> %571 to <2 x i64>
  %573 = shufflevector <2 x i64> %564, <2 x i64> %570, <2 x i32> <i32 0, i32 2>
  %574 = getelementptr inbounds i32, i32* %1, i64 8
  %575 = bitcast i32* %574 to <2 x i64>*
  store <2 x i64> %573, <2 x i64>* %575, align 16
  %576 = shufflevector <2 x i64> %564, <2 x i64> %570, <2 x i32> <i32 1, i32 3>
  %577 = getelementptr inbounds i32, i32* %1, i64 24
  %578 = bitcast i32* %577 to <2 x i64>*
  store <2 x i64> %576, <2 x i64>* %578, align 16
  %579 = shufflevector <2 x i64> %566, <2 x i64> %572, <2 x i32> <i32 0, i32 2>
  %580 = getelementptr inbounds i32, i32* %1, i64 40
  %581 = bitcast i32* %580 to <2 x i64>*
  store <2 x i64> %579, <2 x i64>* %581, align 16
  %582 = shufflevector <2 x i64> %566, <2 x i64> %572, <2 x i32> <i32 1, i32 3>
  %583 = getelementptr inbounds i32, i32* %1, i64 56
  %584 = bitcast i32* %583 to <2 x i64>*
  store <2 x i64> %582, <2 x i64>* %584, align 16
  %585 = load <4 x i32>, <4 x i32>* %411, align 16
  %586 = load <4 x i32>, <4 x i32>* %415, align 16
  %587 = shufflevector <4 x i32> %585, <4 x i32> %586, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %588 = bitcast <4 x i32> %587 to <2 x i64>
  %589 = shufflevector <4 x i32> %585, <4 x i32> %586, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %590 = bitcast <4 x i32> %589 to <2 x i64>
  %591 = load <4 x i32>, <4 x i32>* %419, align 16
  %592 = load <4 x i32>, <4 x i32>* %422, align 16
  %593 = shufflevector <4 x i32> %591, <4 x i32> %592, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %594 = bitcast <4 x i32> %593 to <2 x i64>
  %595 = shufflevector <4 x i32> %591, <4 x i32> %592, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %596 = bitcast <4 x i32> %595 to <2 x i64>
  %597 = shufflevector <2 x i64> %588, <2 x i64> %594, <2 x i32> <i32 0, i32 2>
  %598 = getelementptr inbounds i32, i32* %1, i64 12
  %599 = bitcast i32* %598 to <2 x i64>*
  store <2 x i64> %597, <2 x i64>* %599, align 16
  %600 = shufflevector <2 x i64> %588, <2 x i64> %594, <2 x i32> <i32 1, i32 3>
  %601 = getelementptr inbounds i32, i32* %1, i64 28
  %602 = bitcast i32* %601 to <2 x i64>*
  store <2 x i64> %600, <2 x i64>* %602, align 16
  %603 = shufflevector <2 x i64> %590, <2 x i64> %596, <2 x i32> <i32 0, i32 2>
  %604 = getelementptr inbounds i32, i32* %1, i64 44
  %605 = bitcast i32* %604 to <2 x i64>*
  store <2 x i64> %603, <2 x i64>* %605, align 16
  %606 = shufflevector <2 x i64> %590, <2 x i64> %596, <2 x i32> <i32 1, i32 3>
  %607 = getelementptr inbounds i32, i32* %1, i64 60
  %608 = bitcast i32* %607 to <2 x i64>*
  store <2 x i64> %606, <2 x i64>* %608, align 16
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_16x32_sse4_1(i16* nocapture readonly, i32*, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [128 x <2 x i64>], align 16
  %7 = bitcast [128 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 2048, i1 false)
  %8 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 9), align 8
  %9 = zext i8 %3 to i64
  %10 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @col_highbd_txfm8x32_arr, i64 0, i64 %9
  %11 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %10, align 8
  %12 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @row_highbd_txfm8x32_arr, i64 0, i64 %9
  %13 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %12, align 8
  %14 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 2, i64 3), align 1
  %15 = sext i8 %14 to i32
  %16 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 2, i64 3), align 1
  %17 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 0
  %18 = load i8, i8* %8, align 1
  %19 = sext i8 %18 to i32
  call fastcc void @load_buffer_16x16(i16* %0, <2 x i64>* nonnull %17, i32 %2, i32 0, i32 0, i32 %19)
  %20 = shl nsw i32 %2, 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i16, i16* %0, i64 %21
  %23 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 64
  %24 = load i8, i8* %8, align 1
  %25 = sext i8 %24 to i32
  call fastcc void @load_buffer_16x16(i16* %22, <2 x i64>* %23, i32 %2, i32 0, i32 0, i32 %25)
  call void %11(<2 x i64>* nonnull %17, <2 x i64>* nonnull %17, i32 %15, i32 4) #8
  %26 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 1
  call void %11(<2 x i64>* %26, <2 x i64>* %26, i32 %15, i32 4) #8
  %27 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 2
  call void %11(<2 x i64>* %27, <2 x i64>* %27, i32 %15, i32 4) #8
  %28 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 3
  call void %11(<2 x i64>* %28, <2 x i64>* %28, i32 %15, i32 4) #8
  %29 = bitcast i32* %1 to <2 x i64>*
  %30 = sext i8 %16 to i32
  %31 = getelementptr inbounds i8, i8* %8, i64 1
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = sub nsw i32 0, %33
  %35 = xor i32 %33, -1
  %36 = shl i32 1, %35
  %37 = insertelement <4 x i32> undef, i32 %36, i32 0
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> zeroinitializer
  %39 = bitcast [128 x <2 x i64>]* %6 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 16
  %41 = add <4 x i32> %38, %40
  %42 = bitcast <2 x i64>* %26 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 16
  %44 = add <4 x i32> %38, %43
  %45 = bitcast <2 x i64>* %27 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 16
  %47 = add <4 x i32> %38, %46
  %48 = bitcast <2 x i64>* %28 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 16
  %50 = add <4 x i32> %49, %38
  %51 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 4
  %52 = bitcast <2 x i64>* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 16
  %54 = add <4 x i32> %53, %38
  %55 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 5
  %56 = bitcast <2 x i64>* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 16
  %58 = add <4 x i32> %57, %38
  %59 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 6
  %60 = bitcast <2 x i64>* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 16
  %62 = add <4 x i32> %61, %38
  %63 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 7
  %64 = bitcast <2 x i64>* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 16
  %66 = add <4 x i32> %65, %38
  %67 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 8
  %68 = bitcast <2 x i64>* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 16
  %70 = add <4 x i32> %69, %38
  %71 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 9
  %72 = bitcast <2 x i64>* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 16
  %74 = add <4 x i32> %73, %38
  %75 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 10
  %76 = bitcast <2 x i64>* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 16
  %78 = add <4 x i32> %77, %38
  %79 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 11
  %80 = bitcast <2 x i64>* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 16
  %82 = add <4 x i32> %81, %38
  %83 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 12
  %84 = bitcast <2 x i64>* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 16
  %86 = add <4 x i32> %85, %38
  %87 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 13
  %88 = bitcast <2 x i64>* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 16
  %90 = add <4 x i32> %89, %38
  %91 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 14
  %92 = bitcast <2 x i64>* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 16
  %94 = add <4 x i32> %93, %38
  %95 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 15
  %96 = bitcast <2 x i64>* %95 to <4 x i32>*
  %97 = load <4 x i32>, <4 x i32>* %96, align 16
  %98 = add <4 x i32> %97, %38
  %99 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %41, i32 %34) #8
  store <4 x i32> %99, <4 x i32>* %39, align 16
  %100 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %44, i32 %34) #8
  store <4 x i32> %100, <4 x i32>* %42, align 16
  %101 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %47, i32 %34) #8
  store <4 x i32> %101, <4 x i32>* %45, align 16
  %102 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %50, i32 %34) #8
  store <4 x i32> %102, <4 x i32>* %48, align 16
  %103 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %54, i32 %34) #8
  store <4 x i32> %103, <4 x i32>* %52, align 16
  %104 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %58, i32 %34) #8
  store <4 x i32> %104, <4 x i32>* %56, align 16
  %105 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %62, i32 %34) #8
  store <4 x i32> %105, <4 x i32>* %60, align 16
  %106 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %66, i32 %34) #8
  store <4 x i32> %106, <4 x i32>* %64, align 16
  %107 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %70, i32 %34) #8
  store <4 x i32> %107, <4 x i32>* %68, align 16
  %108 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %74, i32 %34) #8
  store <4 x i32> %108, <4 x i32>* %72, align 16
  %109 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %78, i32 %34) #8
  store <4 x i32> %109, <4 x i32>* %76, align 16
  %110 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %82, i32 %34) #8
  store <4 x i32> %110, <4 x i32>* %80, align 16
  %111 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %86, i32 %34) #8
  store <4 x i32> %111, <4 x i32>* %84, align 16
  %112 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %90, i32 %34) #8
  store <4 x i32> %112, <4 x i32>* %88, align 16
  %113 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %94, i32 %34) #8
  store <4 x i32> %113, <4 x i32>* %92, align 16
  %114 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %98, i32 %34) #8
  store <4 x i32> %114, <4 x i32>* %96, align 16
  %115 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 16
  %116 = bitcast <2 x i64>* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 16
  %118 = add <4 x i32> %117, %38
  %119 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 17
  %120 = bitcast <2 x i64>* %119 to <4 x i32>*
  %121 = load <4 x i32>, <4 x i32>* %120, align 16
  %122 = add <4 x i32> %121, %38
  %123 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 18
  %124 = bitcast <2 x i64>* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 16
  %126 = add <4 x i32> %125, %38
  %127 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 19
  %128 = bitcast <2 x i64>* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 16
  %130 = add <4 x i32> %129, %38
  %131 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 20
  %132 = bitcast <2 x i64>* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 16
  %134 = add <4 x i32> %133, %38
  %135 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 21
  %136 = bitcast <2 x i64>* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 16
  %138 = add <4 x i32> %137, %38
  %139 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 22
  %140 = bitcast <2 x i64>* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 16
  %142 = add <4 x i32> %141, %38
  %143 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 23
  %144 = bitcast <2 x i64>* %143 to <4 x i32>*
  %145 = load <4 x i32>, <4 x i32>* %144, align 16
  %146 = add <4 x i32> %145, %38
  %147 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 24
  %148 = bitcast <2 x i64>* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 16
  %150 = add <4 x i32> %149, %38
  %151 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 25
  %152 = bitcast <2 x i64>* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 16
  %154 = add <4 x i32> %153, %38
  %155 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 26
  %156 = bitcast <2 x i64>* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 16
  %158 = add <4 x i32> %157, %38
  %159 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 27
  %160 = bitcast <2 x i64>* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 16
  %162 = add <4 x i32> %161, %38
  %163 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 28
  %164 = bitcast <2 x i64>* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 16
  %166 = add <4 x i32> %165, %38
  %167 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 29
  %168 = bitcast <2 x i64>* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 16
  %170 = add <4 x i32> %169, %38
  %171 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 30
  %172 = bitcast <2 x i64>* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 16
  %174 = add <4 x i32> %173, %38
  %175 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 31
  %176 = bitcast <2 x i64>* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 16
  %178 = add <4 x i32> %177, %38
  %179 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %118, i32 %34) #8
  store <4 x i32> %179, <4 x i32>* %116, align 16
  %180 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %122, i32 %34) #8
  store <4 x i32> %180, <4 x i32>* %120, align 16
  %181 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %126, i32 %34) #8
  store <4 x i32> %181, <4 x i32>* %124, align 16
  %182 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %130, i32 %34) #8
  store <4 x i32> %182, <4 x i32>* %128, align 16
  %183 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %134, i32 %34) #8
  store <4 x i32> %183, <4 x i32>* %132, align 16
  %184 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %138, i32 %34) #8
  store <4 x i32> %184, <4 x i32>* %136, align 16
  %185 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %142, i32 %34) #8
  store <4 x i32> %185, <4 x i32>* %140, align 16
  %186 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %146, i32 %34) #8
  store <4 x i32> %186, <4 x i32>* %144, align 16
  %187 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %150, i32 %34) #8
  store <4 x i32> %187, <4 x i32>* %148, align 16
  %188 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %154, i32 %34) #8
  store <4 x i32> %188, <4 x i32>* %152, align 16
  %189 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %158, i32 %34) #8
  store <4 x i32> %189, <4 x i32>* %156, align 16
  %190 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %162, i32 %34) #8
  store <4 x i32> %190, <4 x i32>* %160, align 16
  %191 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %166, i32 %34) #8
  store <4 x i32> %191, <4 x i32>* %164, align 16
  %192 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %170, i32 %34) #8
  store <4 x i32> %192, <4 x i32>* %168, align 16
  %193 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %174, i32 %34) #8
  store <4 x i32> %193, <4 x i32>* %172, align 16
  %194 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %178, i32 %34) #8
  store <4 x i32> %194, <4 x i32>* %176, align 16
  %195 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 32
  %196 = bitcast <2 x i64>* %195 to <4 x i32>*
  %197 = load <4 x i32>, <4 x i32>* %196, align 16
  %198 = add <4 x i32> %197, %38
  %199 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 33
  %200 = bitcast <2 x i64>* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 16
  %202 = add <4 x i32> %201, %38
  %203 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 34
  %204 = bitcast <2 x i64>* %203 to <4 x i32>*
  %205 = load <4 x i32>, <4 x i32>* %204, align 16
  %206 = add <4 x i32> %205, %38
  %207 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 35
  %208 = bitcast <2 x i64>* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 16
  %210 = add <4 x i32> %209, %38
  %211 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 36
  %212 = bitcast <2 x i64>* %211 to <4 x i32>*
  %213 = load <4 x i32>, <4 x i32>* %212, align 16
  %214 = add <4 x i32> %213, %38
  %215 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 37
  %216 = bitcast <2 x i64>* %215 to <4 x i32>*
  %217 = load <4 x i32>, <4 x i32>* %216, align 16
  %218 = add <4 x i32> %217, %38
  %219 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 38
  %220 = bitcast <2 x i64>* %219 to <4 x i32>*
  %221 = load <4 x i32>, <4 x i32>* %220, align 16
  %222 = add <4 x i32> %221, %38
  %223 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 39
  %224 = bitcast <2 x i64>* %223 to <4 x i32>*
  %225 = load <4 x i32>, <4 x i32>* %224, align 16
  %226 = add <4 x i32> %225, %38
  %227 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 40
  %228 = bitcast <2 x i64>* %227 to <4 x i32>*
  %229 = load <4 x i32>, <4 x i32>* %228, align 16
  %230 = add <4 x i32> %229, %38
  %231 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 41
  %232 = bitcast <2 x i64>* %231 to <4 x i32>*
  %233 = load <4 x i32>, <4 x i32>* %232, align 16
  %234 = add <4 x i32> %233, %38
  %235 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 42
  %236 = bitcast <2 x i64>* %235 to <4 x i32>*
  %237 = load <4 x i32>, <4 x i32>* %236, align 16
  %238 = add <4 x i32> %237, %38
  %239 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 43
  %240 = bitcast <2 x i64>* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 16
  %242 = add <4 x i32> %241, %38
  %243 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 44
  %244 = bitcast <2 x i64>* %243 to <4 x i32>*
  %245 = load <4 x i32>, <4 x i32>* %244, align 16
  %246 = add <4 x i32> %245, %38
  %247 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 45
  %248 = bitcast <2 x i64>* %247 to <4 x i32>*
  %249 = load <4 x i32>, <4 x i32>* %248, align 16
  %250 = add <4 x i32> %249, %38
  %251 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 46
  %252 = bitcast <2 x i64>* %251 to <4 x i32>*
  %253 = load <4 x i32>, <4 x i32>* %252, align 16
  %254 = add <4 x i32> %253, %38
  %255 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 47
  %256 = bitcast <2 x i64>* %255 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 16
  %258 = add <4 x i32> %257, %38
  %259 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %198, i32 %34) #8
  store <4 x i32> %259, <4 x i32>* %196, align 16
  %260 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %202, i32 %34) #8
  store <4 x i32> %260, <4 x i32>* %200, align 16
  %261 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %206, i32 %34) #8
  store <4 x i32> %261, <4 x i32>* %204, align 16
  %262 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %210, i32 %34) #8
  store <4 x i32> %262, <4 x i32>* %208, align 16
  %263 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %214, i32 %34) #8
  store <4 x i32> %263, <4 x i32>* %212, align 16
  %264 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %218, i32 %34) #8
  store <4 x i32> %264, <4 x i32>* %216, align 16
  %265 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %222, i32 %34) #8
  store <4 x i32> %265, <4 x i32>* %220, align 16
  %266 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %226, i32 %34) #8
  store <4 x i32> %266, <4 x i32>* %224, align 16
  %267 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %230, i32 %34) #8
  store <4 x i32> %267, <4 x i32>* %228, align 16
  %268 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %234, i32 %34) #8
  store <4 x i32> %268, <4 x i32>* %232, align 16
  %269 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %238, i32 %34) #8
  store <4 x i32> %269, <4 x i32>* %236, align 16
  %270 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %242, i32 %34) #8
  store <4 x i32> %270, <4 x i32>* %240, align 16
  %271 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %246, i32 %34) #8
  store <4 x i32> %271, <4 x i32>* %244, align 16
  %272 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %250, i32 %34) #8
  store <4 x i32> %272, <4 x i32>* %248, align 16
  %273 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %254, i32 %34) #8
  store <4 x i32> %273, <4 x i32>* %252, align 16
  %274 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %258, i32 %34) #8
  store <4 x i32> %274, <4 x i32>* %256, align 16
  %275 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 48
  %276 = bitcast <2 x i64>* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 16
  %278 = add <4 x i32> %277, %38
  %279 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 49
  %280 = bitcast <2 x i64>* %279 to <4 x i32>*
  %281 = load <4 x i32>, <4 x i32>* %280, align 16
  %282 = add <4 x i32> %281, %38
  %283 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 50
  %284 = bitcast <2 x i64>* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 16
  %286 = add <4 x i32> %285, %38
  %287 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 51
  %288 = bitcast <2 x i64>* %287 to <4 x i32>*
  %289 = load <4 x i32>, <4 x i32>* %288, align 16
  %290 = add <4 x i32> %289, %38
  %291 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 52
  %292 = bitcast <2 x i64>* %291 to <4 x i32>*
  %293 = load <4 x i32>, <4 x i32>* %292, align 16
  %294 = add <4 x i32> %293, %38
  %295 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 53
  %296 = bitcast <2 x i64>* %295 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 16
  %298 = add <4 x i32> %297, %38
  %299 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 54
  %300 = bitcast <2 x i64>* %299 to <4 x i32>*
  %301 = load <4 x i32>, <4 x i32>* %300, align 16
  %302 = add <4 x i32> %301, %38
  %303 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 55
  %304 = bitcast <2 x i64>* %303 to <4 x i32>*
  %305 = load <4 x i32>, <4 x i32>* %304, align 16
  %306 = add <4 x i32> %305, %38
  %307 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 56
  %308 = bitcast <2 x i64>* %307 to <4 x i32>*
  %309 = load <4 x i32>, <4 x i32>* %308, align 16
  %310 = add <4 x i32> %309, %38
  %311 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 57
  %312 = bitcast <2 x i64>* %311 to <4 x i32>*
  %313 = load <4 x i32>, <4 x i32>* %312, align 16
  %314 = add <4 x i32> %313, %38
  %315 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 58
  %316 = bitcast <2 x i64>* %315 to <4 x i32>*
  %317 = load <4 x i32>, <4 x i32>* %316, align 16
  %318 = add <4 x i32> %317, %38
  %319 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 59
  %320 = bitcast <2 x i64>* %319 to <4 x i32>*
  %321 = load <4 x i32>, <4 x i32>* %320, align 16
  %322 = add <4 x i32> %321, %38
  %323 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 60
  %324 = bitcast <2 x i64>* %323 to <4 x i32>*
  %325 = load <4 x i32>, <4 x i32>* %324, align 16
  %326 = add <4 x i32> %325, %38
  %327 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 61
  %328 = bitcast <2 x i64>* %327 to <4 x i32>*
  %329 = load <4 x i32>, <4 x i32>* %328, align 16
  %330 = add <4 x i32> %329, %38
  %331 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 62
  %332 = bitcast <2 x i64>* %331 to <4 x i32>*
  %333 = load <4 x i32>, <4 x i32>* %332, align 16
  %334 = add <4 x i32> %333, %38
  %335 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 63
  %336 = bitcast <2 x i64>* %335 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 16
  %338 = add <4 x i32> %337, %38
  %339 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %278, i32 %34) #8
  store <4 x i32> %339, <4 x i32>* %276, align 16
  %340 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %282, i32 %34) #8
  store <4 x i32> %340, <4 x i32>* %280, align 16
  %341 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %286, i32 %34) #8
  store <4 x i32> %341, <4 x i32>* %284, align 16
  %342 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %290, i32 %34) #8
  store <4 x i32> %342, <4 x i32>* %288, align 16
  %343 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %294, i32 %34) #8
  store <4 x i32> %343, <4 x i32>* %292, align 16
  %344 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %298, i32 %34) #8
  store <4 x i32> %344, <4 x i32>* %296, align 16
  %345 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %302, i32 %34) #8
  store <4 x i32> %345, <4 x i32>* %300, align 16
  %346 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %306, i32 %34) #8
  store <4 x i32> %346, <4 x i32>* %304, align 16
  %347 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %310, i32 %34) #8
  store <4 x i32> %347, <4 x i32>* %308, align 16
  %348 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %314, i32 %34) #8
  store <4 x i32> %348, <4 x i32>* %312, align 16
  %349 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %318, i32 %34) #8
  store <4 x i32> %349, <4 x i32>* %316, align 16
  %350 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %322, i32 %34) #8
  store <4 x i32> %350, <4 x i32>* %320, align 16
  %351 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %326, i32 %34) #8
  store <4 x i32> %351, <4 x i32>* %324, align 16
  %352 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %330, i32 %34) #8
  store <4 x i32> %352, <4 x i32>* %328, align 16
  %353 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %334, i32 %34) #8
  store <4 x i32> %353, <4 x i32>* %332, align 16
  %354 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %338, i32 %34) #8
  store <4 x i32> %354, <4 x i32>* %336, align 16
  %355 = load i8, i8* %31, align 1
  %356 = sext i8 %355 to i32
  %357 = sub nsw i32 0, %356
  %358 = xor i32 %356, -1
  %359 = shl i32 1, %358
  %360 = insertelement <4 x i32> undef, i32 %359, i32 0
  %361 = shufflevector <4 x i32> %360, <4 x i32> undef, <4 x i32> zeroinitializer
  %362 = bitcast <2 x i64>* %23 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 16
  %364 = add <4 x i32> %361, %363
  %365 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 65
  %366 = bitcast <2 x i64>* %365 to <4 x i32>*
  %367 = load <4 x i32>, <4 x i32>* %366, align 16
  %368 = add <4 x i32> %361, %367
  %369 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 66
  %370 = bitcast <2 x i64>* %369 to <4 x i32>*
  %371 = load <4 x i32>, <4 x i32>* %370, align 16
  %372 = add <4 x i32> %361, %371
  %373 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 67
  %374 = bitcast <2 x i64>* %373 to <4 x i32>*
  %375 = load <4 x i32>, <4 x i32>* %374, align 16
  %376 = add <4 x i32> %375, %361
  %377 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 68
  %378 = bitcast <2 x i64>* %377 to <4 x i32>*
  %379 = load <4 x i32>, <4 x i32>* %378, align 16
  %380 = add <4 x i32> %379, %361
  %381 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 69
  %382 = bitcast <2 x i64>* %381 to <4 x i32>*
  %383 = load <4 x i32>, <4 x i32>* %382, align 16
  %384 = add <4 x i32> %383, %361
  %385 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 70
  %386 = bitcast <2 x i64>* %385 to <4 x i32>*
  %387 = load <4 x i32>, <4 x i32>* %386, align 16
  %388 = add <4 x i32> %387, %361
  %389 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 71
  %390 = bitcast <2 x i64>* %389 to <4 x i32>*
  %391 = load <4 x i32>, <4 x i32>* %390, align 16
  %392 = add <4 x i32> %391, %361
  %393 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 72
  %394 = bitcast <2 x i64>* %393 to <4 x i32>*
  %395 = load <4 x i32>, <4 x i32>* %394, align 16
  %396 = add <4 x i32> %395, %361
  %397 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 73
  %398 = bitcast <2 x i64>* %397 to <4 x i32>*
  %399 = load <4 x i32>, <4 x i32>* %398, align 16
  %400 = add <4 x i32> %399, %361
  %401 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 74
  %402 = bitcast <2 x i64>* %401 to <4 x i32>*
  %403 = load <4 x i32>, <4 x i32>* %402, align 16
  %404 = add <4 x i32> %403, %361
  %405 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 75
  %406 = bitcast <2 x i64>* %405 to <4 x i32>*
  %407 = load <4 x i32>, <4 x i32>* %406, align 16
  %408 = add <4 x i32> %407, %361
  %409 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 76
  %410 = bitcast <2 x i64>* %409 to <4 x i32>*
  %411 = load <4 x i32>, <4 x i32>* %410, align 16
  %412 = add <4 x i32> %411, %361
  %413 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 77
  %414 = bitcast <2 x i64>* %413 to <4 x i32>*
  %415 = load <4 x i32>, <4 x i32>* %414, align 16
  %416 = add <4 x i32> %415, %361
  %417 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 78
  %418 = bitcast <2 x i64>* %417 to <4 x i32>*
  %419 = load <4 x i32>, <4 x i32>* %418, align 16
  %420 = add <4 x i32> %419, %361
  %421 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 79
  %422 = bitcast <2 x i64>* %421 to <4 x i32>*
  %423 = load <4 x i32>, <4 x i32>* %422, align 16
  %424 = add <4 x i32> %423, %361
  %425 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %364, i32 %357) #8
  store <4 x i32> %425, <4 x i32>* %362, align 16
  %426 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %368, i32 %357) #8
  store <4 x i32> %426, <4 x i32>* %366, align 16
  %427 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %372, i32 %357) #8
  store <4 x i32> %427, <4 x i32>* %370, align 16
  %428 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %376, i32 %357) #8
  store <4 x i32> %428, <4 x i32>* %374, align 16
  %429 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %380, i32 %357) #8
  store <4 x i32> %429, <4 x i32>* %378, align 16
  %430 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %384, i32 %357) #8
  store <4 x i32> %430, <4 x i32>* %382, align 16
  %431 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %388, i32 %357) #8
  store <4 x i32> %431, <4 x i32>* %386, align 16
  %432 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %392, i32 %357) #8
  store <4 x i32> %432, <4 x i32>* %390, align 16
  %433 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %396, i32 %357) #8
  store <4 x i32> %433, <4 x i32>* %394, align 16
  %434 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %400, i32 %357) #8
  store <4 x i32> %434, <4 x i32>* %398, align 16
  %435 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %404, i32 %357) #8
  store <4 x i32> %435, <4 x i32>* %402, align 16
  %436 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %408, i32 %357) #8
  store <4 x i32> %436, <4 x i32>* %406, align 16
  %437 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %412, i32 %357) #8
  store <4 x i32> %437, <4 x i32>* %410, align 16
  %438 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %416, i32 %357) #8
  store <4 x i32> %438, <4 x i32>* %414, align 16
  %439 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %420, i32 %357) #8
  store <4 x i32> %439, <4 x i32>* %418, align 16
  %440 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %424, i32 %357) #8
  store <4 x i32> %440, <4 x i32>* %422, align 16
  %441 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 80
  %442 = bitcast <2 x i64>* %441 to <4 x i32>*
  %443 = load <4 x i32>, <4 x i32>* %442, align 16
  %444 = add <4 x i32> %443, %361
  %445 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 81
  %446 = bitcast <2 x i64>* %445 to <4 x i32>*
  %447 = load <4 x i32>, <4 x i32>* %446, align 16
  %448 = add <4 x i32> %447, %361
  %449 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 82
  %450 = bitcast <2 x i64>* %449 to <4 x i32>*
  %451 = load <4 x i32>, <4 x i32>* %450, align 16
  %452 = add <4 x i32> %451, %361
  %453 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 83
  %454 = bitcast <2 x i64>* %453 to <4 x i32>*
  %455 = load <4 x i32>, <4 x i32>* %454, align 16
  %456 = add <4 x i32> %455, %361
  %457 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 84
  %458 = bitcast <2 x i64>* %457 to <4 x i32>*
  %459 = load <4 x i32>, <4 x i32>* %458, align 16
  %460 = add <4 x i32> %459, %361
  %461 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 85
  %462 = bitcast <2 x i64>* %461 to <4 x i32>*
  %463 = load <4 x i32>, <4 x i32>* %462, align 16
  %464 = add <4 x i32> %463, %361
  %465 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 86
  %466 = bitcast <2 x i64>* %465 to <4 x i32>*
  %467 = load <4 x i32>, <4 x i32>* %466, align 16
  %468 = add <4 x i32> %467, %361
  %469 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 87
  %470 = bitcast <2 x i64>* %469 to <4 x i32>*
  %471 = load <4 x i32>, <4 x i32>* %470, align 16
  %472 = add <4 x i32> %471, %361
  %473 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 88
  %474 = bitcast <2 x i64>* %473 to <4 x i32>*
  %475 = load <4 x i32>, <4 x i32>* %474, align 16
  %476 = add <4 x i32> %475, %361
  %477 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 89
  %478 = bitcast <2 x i64>* %477 to <4 x i32>*
  %479 = load <4 x i32>, <4 x i32>* %478, align 16
  %480 = add <4 x i32> %479, %361
  %481 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 90
  %482 = bitcast <2 x i64>* %481 to <4 x i32>*
  %483 = load <4 x i32>, <4 x i32>* %482, align 16
  %484 = add <4 x i32> %483, %361
  %485 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 91
  %486 = bitcast <2 x i64>* %485 to <4 x i32>*
  %487 = load <4 x i32>, <4 x i32>* %486, align 16
  %488 = add <4 x i32> %487, %361
  %489 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 92
  %490 = bitcast <2 x i64>* %489 to <4 x i32>*
  %491 = load <4 x i32>, <4 x i32>* %490, align 16
  %492 = add <4 x i32> %491, %361
  %493 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 93
  %494 = bitcast <2 x i64>* %493 to <4 x i32>*
  %495 = load <4 x i32>, <4 x i32>* %494, align 16
  %496 = add <4 x i32> %495, %361
  %497 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 94
  %498 = bitcast <2 x i64>* %497 to <4 x i32>*
  %499 = load <4 x i32>, <4 x i32>* %498, align 16
  %500 = add <4 x i32> %499, %361
  %501 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 95
  %502 = bitcast <2 x i64>* %501 to <4 x i32>*
  %503 = load <4 x i32>, <4 x i32>* %502, align 16
  %504 = add <4 x i32> %503, %361
  %505 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %444, i32 %357) #8
  store <4 x i32> %505, <4 x i32>* %442, align 16
  %506 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %448, i32 %357) #8
  store <4 x i32> %506, <4 x i32>* %446, align 16
  %507 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %452, i32 %357) #8
  store <4 x i32> %507, <4 x i32>* %450, align 16
  %508 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %456, i32 %357) #8
  store <4 x i32> %508, <4 x i32>* %454, align 16
  %509 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %460, i32 %357) #8
  store <4 x i32> %509, <4 x i32>* %458, align 16
  %510 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %464, i32 %357) #8
  store <4 x i32> %510, <4 x i32>* %462, align 16
  %511 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %468, i32 %357) #8
  store <4 x i32> %511, <4 x i32>* %466, align 16
  %512 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %472, i32 %357) #8
  store <4 x i32> %512, <4 x i32>* %470, align 16
  %513 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %476, i32 %357) #8
  store <4 x i32> %513, <4 x i32>* %474, align 16
  %514 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %480, i32 %357) #8
  store <4 x i32> %514, <4 x i32>* %478, align 16
  %515 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %484, i32 %357) #8
  store <4 x i32> %515, <4 x i32>* %482, align 16
  %516 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %488, i32 %357) #8
  store <4 x i32> %516, <4 x i32>* %486, align 16
  %517 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %492, i32 %357) #8
  store <4 x i32> %517, <4 x i32>* %490, align 16
  %518 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %496, i32 %357) #8
  store <4 x i32> %518, <4 x i32>* %494, align 16
  %519 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %500, i32 %357) #8
  store <4 x i32> %519, <4 x i32>* %498, align 16
  %520 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %504, i32 %357) #8
  store <4 x i32> %520, <4 x i32>* %502, align 16
  %521 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 96
  %522 = bitcast <2 x i64>* %521 to <4 x i32>*
  %523 = load <4 x i32>, <4 x i32>* %522, align 16
  %524 = add <4 x i32> %523, %361
  %525 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 97
  %526 = bitcast <2 x i64>* %525 to <4 x i32>*
  %527 = load <4 x i32>, <4 x i32>* %526, align 16
  %528 = add <4 x i32> %527, %361
  %529 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 98
  %530 = bitcast <2 x i64>* %529 to <4 x i32>*
  %531 = load <4 x i32>, <4 x i32>* %530, align 16
  %532 = add <4 x i32> %531, %361
  %533 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 99
  %534 = bitcast <2 x i64>* %533 to <4 x i32>*
  %535 = load <4 x i32>, <4 x i32>* %534, align 16
  %536 = add <4 x i32> %535, %361
  %537 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 100
  %538 = bitcast <2 x i64>* %537 to <4 x i32>*
  %539 = load <4 x i32>, <4 x i32>* %538, align 16
  %540 = add <4 x i32> %539, %361
  %541 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 101
  %542 = bitcast <2 x i64>* %541 to <4 x i32>*
  %543 = load <4 x i32>, <4 x i32>* %542, align 16
  %544 = add <4 x i32> %543, %361
  %545 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 102
  %546 = bitcast <2 x i64>* %545 to <4 x i32>*
  %547 = load <4 x i32>, <4 x i32>* %546, align 16
  %548 = add <4 x i32> %547, %361
  %549 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 103
  %550 = bitcast <2 x i64>* %549 to <4 x i32>*
  %551 = load <4 x i32>, <4 x i32>* %550, align 16
  %552 = add <4 x i32> %551, %361
  %553 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 104
  %554 = bitcast <2 x i64>* %553 to <4 x i32>*
  %555 = load <4 x i32>, <4 x i32>* %554, align 16
  %556 = add <4 x i32> %555, %361
  %557 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 105
  %558 = bitcast <2 x i64>* %557 to <4 x i32>*
  %559 = load <4 x i32>, <4 x i32>* %558, align 16
  %560 = add <4 x i32> %559, %361
  %561 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 106
  %562 = bitcast <2 x i64>* %561 to <4 x i32>*
  %563 = load <4 x i32>, <4 x i32>* %562, align 16
  %564 = add <4 x i32> %563, %361
  %565 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 107
  %566 = bitcast <2 x i64>* %565 to <4 x i32>*
  %567 = load <4 x i32>, <4 x i32>* %566, align 16
  %568 = add <4 x i32> %567, %361
  %569 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 108
  %570 = bitcast <2 x i64>* %569 to <4 x i32>*
  %571 = load <4 x i32>, <4 x i32>* %570, align 16
  %572 = add <4 x i32> %571, %361
  %573 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 109
  %574 = bitcast <2 x i64>* %573 to <4 x i32>*
  %575 = load <4 x i32>, <4 x i32>* %574, align 16
  %576 = add <4 x i32> %575, %361
  %577 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 110
  %578 = bitcast <2 x i64>* %577 to <4 x i32>*
  %579 = load <4 x i32>, <4 x i32>* %578, align 16
  %580 = add <4 x i32> %579, %361
  %581 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 111
  %582 = bitcast <2 x i64>* %581 to <4 x i32>*
  %583 = load <4 x i32>, <4 x i32>* %582, align 16
  %584 = add <4 x i32> %583, %361
  %585 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %524, i32 %357) #8
  store <4 x i32> %585, <4 x i32>* %522, align 16
  %586 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %528, i32 %357) #8
  store <4 x i32> %586, <4 x i32>* %526, align 16
  %587 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %532, i32 %357) #8
  store <4 x i32> %587, <4 x i32>* %530, align 16
  %588 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %536, i32 %357) #8
  store <4 x i32> %588, <4 x i32>* %534, align 16
  %589 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %540, i32 %357) #8
  store <4 x i32> %589, <4 x i32>* %538, align 16
  %590 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %544, i32 %357) #8
  store <4 x i32> %590, <4 x i32>* %542, align 16
  %591 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %548, i32 %357) #8
  store <4 x i32> %591, <4 x i32>* %546, align 16
  %592 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %552, i32 %357) #8
  store <4 x i32> %592, <4 x i32>* %550, align 16
  %593 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %556, i32 %357) #8
  store <4 x i32> %593, <4 x i32>* %554, align 16
  %594 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %560, i32 %357) #8
  store <4 x i32> %594, <4 x i32>* %558, align 16
  %595 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %564, i32 %357) #8
  store <4 x i32> %595, <4 x i32>* %562, align 16
  %596 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %568, i32 %357) #8
  store <4 x i32> %596, <4 x i32>* %566, align 16
  %597 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %572, i32 %357) #8
  store <4 x i32> %597, <4 x i32>* %570, align 16
  %598 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %576, i32 %357) #8
  store <4 x i32> %598, <4 x i32>* %574, align 16
  %599 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %580, i32 %357) #8
  store <4 x i32> %599, <4 x i32>* %578, align 16
  %600 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %584, i32 %357) #8
  store <4 x i32> %600, <4 x i32>* %582, align 16
  %601 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 112
  %602 = bitcast <2 x i64>* %601 to <4 x i32>*
  %603 = load <4 x i32>, <4 x i32>* %602, align 16
  %604 = add <4 x i32> %603, %361
  %605 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 113
  %606 = bitcast <2 x i64>* %605 to <4 x i32>*
  %607 = load <4 x i32>, <4 x i32>* %606, align 16
  %608 = add <4 x i32> %607, %361
  %609 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 114
  %610 = bitcast <2 x i64>* %609 to <4 x i32>*
  %611 = load <4 x i32>, <4 x i32>* %610, align 16
  %612 = add <4 x i32> %611, %361
  %613 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 115
  %614 = bitcast <2 x i64>* %613 to <4 x i32>*
  %615 = load <4 x i32>, <4 x i32>* %614, align 16
  %616 = add <4 x i32> %615, %361
  %617 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 116
  %618 = bitcast <2 x i64>* %617 to <4 x i32>*
  %619 = load <4 x i32>, <4 x i32>* %618, align 16
  %620 = add <4 x i32> %619, %361
  %621 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 117
  %622 = bitcast <2 x i64>* %621 to <4 x i32>*
  %623 = load <4 x i32>, <4 x i32>* %622, align 16
  %624 = add <4 x i32> %623, %361
  %625 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 118
  %626 = bitcast <2 x i64>* %625 to <4 x i32>*
  %627 = load <4 x i32>, <4 x i32>* %626, align 16
  %628 = add <4 x i32> %627, %361
  %629 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 119
  %630 = bitcast <2 x i64>* %629 to <4 x i32>*
  %631 = load <4 x i32>, <4 x i32>* %630, align 16
  %632 = add <4 x i32> %631, %361
  %633 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 120
  %634 = bitcast <2 x i64>* %633 to <4 x i32>*
  %635 = load <4 x i32>, <4 x i32>* %634, align 16
  %636 = add <4 x i32> %635, %361
  %637 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 121
  %638 = bitcast <2 x i64>* %637 to <4 x i32>*
  %639 = load <4 x i32>, <4 x i32>* %638, align 16
  %640 = add <4 x i32> %639, %361
  %641 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 122
  %642 = bitcast <2 x i64>* %641 to <4 x i32>*
  %643 = load <4 x i32>, <4 x i32>* %642, align 16
  %644 = add <4 x i32> %643, %361
  %645 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 123
  %646 = bitcast <2 x i64>* %645 to <4 x i32>*
  %647 = load <4 x i32>, <4 x i32>* %646, align 16
  %648 = add <4 x i32> %647, %361
  %649 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 124
  %650 = bitcast <2 x i64>* %649 to <4 x i32>*
  %651 = load <4 x i32>, <4 x i32>* %650, align 16
  %652 = add <4 x i32> %651, %361
  %653 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 125
  %654 = bitcast <2 x i64>* %653 to <4 x i32>*
  %655 = load <4 x i32>, <4 x i32>* %654, align 16
  %656 = add <4 x i32> %655, %361
  %657 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 126
  %658 = bitcast <2 x i64>* %657 to <4 x i32>*
  %659 = load <4 x i32>, <4 x i32>* %658, align 16
  %660 = add <4 x i32> %659, %361
  %661 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 127
  %662 = bitcast <2 x i64>* %661 to <4 x i32>*
  %663 = load <4 x i32>, <4 x i32>* %662, align 16
  %664 = add <4 x i32> %663, %361
  %665 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %604, i32 %357) #8
  store <4 x i32> %665, <4 x i32>* %602, align 16
  %666 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %608, i32 %357) #8
  store <4 x i32> %666, <4 x i32>* %606, align 16
  %667 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %612, i32 %357) #8
  store <4 x i32> %667, <4 x i32>* %610, align 16
  %668 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %616, i32 %357) #8
  store <4 x i32> %668, <4 x i32>* %614, align 16
  %669 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %620, i32 %357) #8
  store <4 x i32> %669, <4 x i32>* %618, align 16
  %670 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %624, i32 %357) #8
  store <4 x i32> %670, <4 x i32>* %622, align 16
  %671 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %628, i32 %357) #8
  store <4 x i32> %671, <4 x i32>* %626, align 16
  %672 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %632, i32 %357) #8
  store <4 x i32> %672, <4 x i32>* %630, align 16
  %673 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %636, i32 %357) #8
  store <4 x i32> %673, <4 x i32>* %634, align 16
  %674 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %640, i32 %357) #8
  store <4 x i32> %674, <4 x i32>* %638, align 16
  %675 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %644, i32 %357) #8
  store <4 x i32> %675, <4 x i32>* %642, align 16
  %676 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %648, i32 %357) #8
  store <4 x i32> %676, <4 x i32>* %646, align 16
  %677 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %652, i32 %357) #8
  store <4 x i32> %677, <4 x i32>* %650, align 16
  %678 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %656, i32 %357) #8
  store <4 x i32> %678, <4 x i32>* %654, align 16
  %679 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %660, i32 %357) #8
  store <4 x i32> %679, <4 x i32>* %658, align 16
  %680 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %664, i32 %357) #8
  store <4 x i32> %680, <4 x i32>* %662, align 16
  br label %681

681:                                              ; preds = %684, %5
  %682 = phi i64 [ 0, %5 ], [ %685, %684 ]
  %683 = shl nsw i64 %682, 5
  br label %687

684:                                              ; preds = %687
  %685 = add nuw nsw i64 %682, 1
  %686 = icmp eq i64 %685, 4
  br i1 %686, label %728, label %681

687:                                              ; preds = %687, %681
  %688 = phi i64 [ 0, %681 ], [ %726, %687 ]
  %689 = shl nsw i64 %688, 4
  %690 = add nuw nsw i64 %689, %682
  %691 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %690
  %692 = bitcast <2 x i64>* %691 to <4 x i32>*
  %693 = load <4 x i32>, <4 x i32>* %692, align 16
  %694 = add nuw nsw i64 %690, 4
  %695 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %694
  %696 = bitcast <2 x i64>* %695 to <4 x i32>*
  %697 = load <4 x i32>, <4 x i32>* %696, align 16
  %698 = shufflevector <4 x i32> %693, <4 x i32> %697, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %699 = bitcast <4 x i32> %698 to <2 x i64>
  %700 = shufflevector <4 x i32> %693, <4 x i32> %697, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %701 = bitcast <4 x i32> %700 to <2 x i64>
  %702 = add nuw nsw i64 %690, 8
  %703 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %702
  %704 = bitcast <2 x i64>* %703 to <4 x i32>*
  %705 = load <4 x i32>, <4 x i32>* %704, align 16
  %706 = add nuw nsw i64 %690, 12
  %707 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %706
  %708 = bitcast <2 x i64>* %707 to <4 x i32>*
  %709 = load <4 x i32>, <4 x i32>* %708, align 16
  %710 = shufflevector <4 x i32> %705, <4 x i32> %709, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %711 = bitcast <4 x i32> %710 to <2 x i64>
  %712 = shufflevector <4 x i32> %705, <4 x i32> %709, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %713 = bitcast <4 x i32> %712 to <2 x i64>
  %714 = shufflevector <2 x i64> %699, <2 x i64> %711, <2 x i32> <i32 0, i32 2>
  %715 = add nuw nsw i64 %688, %683
  %716 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %715
  store <2 x i64> %714, <2 x i64>* %716, align 16
  %717 = shufflevector <2 x i64> %699, <2 x i64> %711, <2 x i32> <i32 1, i32 3>
  %718 = add nuw nsw i64 %715, 8
  %719 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %718
  store <2 x i64> %717, <2 x i64>* %719, align 16
  %720 = shufflevector <2 x i64> %701, <2 x i64> %713, <2 x i32> <i32 0, i32 2>
  %721 = add nuw nsw i64 %715, 16
  %722 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %721
  store <2 x i64> %720, <2 x i64>* %722, align 16
  %723 = shufflevector <2 x i64> %701, <2 x i64> %713, <2 x i32> <i32 1, i32 3>
  %724 = add nuw nsw i64 %715, 24
  %725 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %724
  store <2 x i64> %723, <2 x i64>* %725, align 16
  %726 = add nuw nsw i64 %688, 1
  %727 = icmp eq i64 %726, 8
  br i1 %727, label %684, label %687

728:                                              ; preds = %684
  call void %13(<2 x i64>* %29, <2 x i64>* nonnull %17, i32 %30, i32 8) #8
  br label %729

729:                                              ; preds = %729, %728
  %730 = phi i64 [ 0, %728 ], [ %874, %729 ]
  %731 = shl nsw i64 %730, 4
  %732 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %730
  %733 = bitcast <2 x i64>* %732 to <4 x i32>*
  %734 = load <4 x i32>, <4 x i32>* %733, align 16
  %735 = add nuw nsw i64 %730, 8
  %736 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %735
  %737 = bitcast <2 x i64>* %736 to <4 x i32>*
  %738 = load <4 x i32>, <4 x i32>* %737, align 16
  %739 = shufflevector <4 x i32> %734, <4 x i32> %738, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %740 = bitcast <4 x i32> %739 to <2 x i64>
  %741 = shufflevector <4 x i32> %734, <4 x i32> %738, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %742 = bitcast <4 x i32> %741 to <2 x i64>
  %743 = add nuw nsw i64 %730, 16
  %744 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %743
  %745 = bitcast <2 x i64>* %744 to <4 x i32>*
  %746 = load <4 x i32>, <4 x i32>* %745, align 16
  %747 = add nuw nsw i64 %730, 24
  %748 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %747
  %749 = bitcast <2 x i64>* %748 to <4 x i32>*
  %750 = load <4 x i32>, <4 x i32>* %749, align 16
  %751 = shufflevector <4 x i32> %746, <4 x i32> %750, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %752 = bitcast <4 x i32> %751 to <2 x i64>
  %753 = shufflevector <4 x i32> %746, <4 x i32> %750, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %754 = bitcast <4 x i32> %753 to <2 x i64>
  %755 = shufflevector <2 x i64> %740, <2 x i64> %752, <2 x i32> <i32 0, i32 2>
  %756 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %731
  store <2 x i64> %755, <2 x i64>* %756, align 16
  %757 = shufflevector <2 x i64> %740, <2 x i64> %752, <2 x i32> <i32 1, i32 3>
  %758 = or i64 %731, 4
  %759 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %758
  store <2 x i64> %757, <2 x i64>* %759, align 16
  %760 = shufflevector <2 x i64> %742, <2 x i64> %754, <2 x i32> <i32 0, i32 2>
  %761 = or i64 %731, 8
  %762 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %761
  store <2 x i64> %760, <2 x i64>* %762, align 16
  %763 = shufflevector <2 x i64> %742, <2 x i64> %754, <2 x i32> <i32 1, i32 3>
  %764 = or i64 %731, 12
  %765 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %764
  store <2 x i64> %763, <2 x i64>* %765, align 16
  %766 = add nuw nsw i64 %730, 32
  %767 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %766
  %768 = bitcast <2 x i64>* %767 to <4 x i32>*
  %769 = load <4 x i32>, <4 x i32>* %768, align 16
  %770 = add nuw nsw i64 %730, 40
  %771 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %770
  %772 = bitcast <2 x i64>* %771 to <4 x i32>*
  %773 = load <4 x i32>, <4 x i32>* %772, align 16
  %774 = shufflevector <4 x i32> %769, <4 x i32> %773, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %775 = bitcast <4 x i32> %774 to <2 x i64>
  %776 = shufflevector <4 x i32> %769, <4 x i32> %773, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %777 = bitcast <4 x i32> %776 to <2 x i64>
  %778 = add nuw nsw i64 %730, 48
  %779 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %778
  %780 = bitcast <2 x i64>* %779 to <4 x i32>*
  %781 = load <4 x i32>, <4 x i32>* %780, align 16
  %782 = add nuw nsw i64 %730, 56
  %783 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %782
  %784 = bitcast <2 x i64>* %783 to <4 x i32>*
  %785 = load <4 x i32>, <4 x i32>* %784, align 16
  %786 = shufflevector <4 x i32> %781, <4 x i32> %785, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %787 = bitcast <4 x i32> %786 to <2 x i64>
  %788 = shufflevector <4 x i32> %781, <4 x i32> %785, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %789 = bitcast <4 x i32> %788 to <2 x i64>
  %790 = shufflevector <2 x i64> %775, <2 x i64> %787, <2 x i32> <i32 0, i32 2>
  %791 = or i64 %731, 1
  %792 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %791
  store <2 x i64> %790, <2 x i64>* %792, align 16
  %793 = shufflevector <2 x i64> %775, <2 x i64> %787, <2 x i32> <i32 1, i32 3>
  %794 = or i64 %731, 5
  %795 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %794
  store <2 x i64> %793, <2 x i64>* %795, align 16
  %796 = shufflevector <2 x i64> %777, <2 x i64> %789, <2 x i32> <i32 0, i32 2>
  %797 = or i64 %731, 9
  %798 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %797
  store <2 x i64> %796, <2 x i64>* %798, align 16
  %799 = shufflevector <2 x i64> %777, <2 x i64> %789, <2 x i32> <i32 1, i32 3>
  %800 = or i64 %731, 13
  %801 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %800
  store <2 x i64> %799, <2 x i64>* %801, align 16
  %802 = add nuw nsw i64 %730, 64
  %803 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %802
  %804 = bitcast <2 x i64>* %803 to <4 x i32>*
  %805 = load <4 x i32>, <4 x i32>* %804, align 16
  %806 = add nuw nsw i64 %730, 72
  %807 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %806
  %808 = bitcast <2 x i64>* %807 to <4 x i32>*
  %809 = load <4 x i32>, <4 x i32>* %808, align 16
  %810 = shufflevector <4 x i32> %805, <4 x i32> %809, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %811 = bitcast <4 x i32> %810 to <2 x i64>
  %812 = shufflevector <4 x i32> %805, <4 x i32> %809, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %813 = bitcast <4 x i32> %812 to <2 x i64>
  %814 = add nuw nsw i64 %730, 80
  %815 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %814
  %816 = bitcast <2 x i64>* %815 to <4 x i32>*
  %817 = load <4 x i32>, <4 x i32>* %816, align 16
  %818 = add nuw nsw i64 %730, 88
  %819 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %818
  %820 = bitcast <2 x i64>* %819 to <4 x i32>*
  %821 = load <4 x i32>, <4 x i32>* %820, align 16
  %822 = shufflevector <4 x i32> %817, <4 x i32> %821, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %823 = bitcast <4 x i32> %822 to <2 x i64>
  %824 = shufflevector <4 x i32> %817, <4 x i32> %821, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %825 = bitcast <4 x i32> %824 to <2 x i64>
  %826 = shufflevector <2 x i64> %811, <2 x i64> %823, <2 x i32> <i32 0, i32 2>
  %827 = or i64 %731, 2
  %828 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %827
  store <2 x i64> %826, <2 x i64>* %828, align 16
  %829 = shufflevector <2 x i64> %811, <2 x i64> %823, <2 x i32> <i32 1, i32 3>
  %830 = or i64 %731, 6
  %831 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %830
  store <2 x i64> %829, <2 x i64>* %831, align 16
  %832 = shufflevector <2 x i64> %813, <2 x i64> %825, <2 x i32> <i32 0, i32 2>
  %833 = or i64 %731, 10
  %834 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %833
  store <2 x i64> %832, <2 x i64>* %834, align 16
  %835 = shufflevector <2 x i64> %813, <2 x i64> %825, <2 x i32> <i32 1, i32 3>
  %836 = or i64 %731, 14
  %837 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %836
  store <2 x i64> %835, <2 x i64>* %837, align 16
  %838 = add nuw nsw i64 %730, 96
  %839 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %838
  %840 = bitcast <2 x i64>* %839 to <4 x i32>*
  %841 = load <4 x i32>, <4 x i32>* %840, align 16
  %842 = add nuw nsw i64 %730, 104
  %843 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %842
  %844 = bitcast <2 x i64>* %843 to <4 x i32>*
  %845 = load <4 x i32>, <4 x i32>* %844, align 16
  %846 = shufflevector <4 x i32> %841, <4 x i32> %845, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %847 = bitcast <4 x i32> %846 to <2 x i64>
  %848 = shufflevector <4 x i32> %841, <4 x i32> %845, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %849 = bitcast <4 x i32> %848 to <2 x i64>
  %850 = add nuw nsw i64 %730, 112
  %851 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %850
  %852 = bitcast <2 x i64>* %851 to <4 x i32>*
  %853 = load <4 x i32>, <4 x i32>* %852, align 16
  %854 = add nuw nsw i64 %730, 120
  %855 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %854
  %856 = bitcast <2 x i64>* %855 to <4 x i32>*
  %857 = load <4 x i32>, <4 x i32>* %856, align 16
  %858 = shufflevector <4 x i32> %853, <4 x i32> %857, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %859 = bitcast <4 x i32> %858 to <2 x i64>
  %860 = shufflevector <4 x i32> %853, <4 x i32> %857, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %861 = bitcast <4 x i32> %860 to <2 x i64>
  %862 = shufflevector <2 x i64> %847, <2 x i64> %859, <2 x i32> <i32 0, i32 2>
  %863 = or i64 %731, 3
  %864 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %863
  store <2 x i64> %862, <2 x i64>* %864, align 16
  %865 = shufflevector <2 x i64> %847, <2 x i64> %859, <2 x i32> <i32 1, i32 3>
  %866 = or i64 %731, 7
  %867 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %866
  store <2 x i64> %865, <2 x i64>* %867, align 16
  %868 = shufflevector <2 x i64> %849, <2 x i64> %861, <2 x i32> <i32 0, i32 2>
  %869 = or i64 %731, 11
  %870 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %869
  store <2 x i64> %868, <2 x i64>* %870, align 16
  %871 = shufflevector <2 x i64> %849, <2 x i64> %861, <2 x i32> <i32 1, i32 3>
  %872 = or i64 %731, 15
  %873 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %872
  store <2 x i64> %871, <2 x i64>* %873, align 16
  %874 = add nuw nsw i64 %730, 1
  %875 = icmp eq i64 %874, 8
  br i1 %875, label %876, label %729

876:                                              ; preds = %729
  %877 = getelementptr inbounds i8, i8* %8, i64 2
  %878 = load i8, i8* %877, align 1
  %879 = sext i8 %878 to i32
  %880 = sub nsw i32 0, %879
  %881 = icmp slt i8 %878, 0
  br i1 %881, label %882, label %908

882:                                              ; preds = %876
  %883 = xor i32 %879, -1
  %884 = shl i32 1, %883
  %885 = insertelement <4 x i32> undef, i32 %884, i32 0
  %886 = shufflevector <4 x i32> %885, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %887

887:                                              ; preds = %887, %882
  %888 = phi i64 [ 0, %882 ], [ %906, %887 ]
  %889 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %888
  %890 = bitcast <2 x i64>* %889 to <4 x i32>*
  %891 = load <4 x i32>, <4 x i32>* %890, align 16
  %892 = add <4 x i32> %891, %886
  %893 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %892, i32 %880) #8
  %894 = mul <4 x i32> %893, <i32 5793, i32 5793, i32 5793, i32 5793>
  %895 = add <4 x i32> %894, <i32 2048, i32 2048, i32 2048, i32 2048>
  %896 = ashr <4 x i32> %895, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %896, <4 x i32>* %890, align 16
  %897 = or i64 %888, 1
  %898 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %897
  %899 = bitcast <2 x i64>* %898 to <4 x i32>*
  %900 = load <4 x i32>, <4 x i32>* %899, align 16
  %901 = add <4 x i32> %900, %886
  %902 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %901, i32 %880) #8
  %903 = mul <4 x i32> %902, <i32 5793, i32 5793, i32 5793, i32 5793>
  %904 = add <4 x i32> %903, <i32 2048, i32 2048, i32 2048, i32 2048>
  %905 = ashr <4 x i32> %904, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %905, <4 x i32>* %899, align 16
  %906 = add nuw nsw i64 %888, 2
  %907 = icmp eq i64 %906, 128
  br i1 %907, label %927, label %887

908:                                              ; preds = %876, %908
  %909 = phi i64 [ %925, %908 ], [ 0, %876 ]
  %910 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %909
  %911 = bitcast <2 x i64>* %910 to <4 x i32>*
  %912 = load <4 x i32>, <4 x i32>* %911, align 16
  %913 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %912, i32 %879) #8
  %914 = mul <4 x i32> %913, <i32 5793, i32 5793, i32 5793, i32 5793>
  %915 = add <4 x i32> %914, <i32 2048, i32 2048, i32 2048, i32 2048>
  %916 = ashr <4 x i32> %915, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %916, <4 x i32>* %911, align 16
  %917 = or i64 %909, 1
  %918 = getelementptr inbounds <2 x i64>, <2 x i64>* %29, i64 %917
  %919 = bitcast <2 x i64>* %918 to <4 x i32>*
  %920 = load <4 x i32>, <4 x i32>* %919, align 16
  %921 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %920, i32 %879) #8
  %922 = mul <4 x i32> %921, <i32 5793, i32 5793, i32 5793, i32 5793>
  %923 = add <4 x i32> %922, <i32 2048, i32 2048, i32 2048, i32 2048>
  %924 = ashr <4 x i32> %923, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %924, <4 x i32>* %919, align 16
  %925 = add nuw nsw i64 %909, 2
  %926 = icmp eq i64 %925, 128
  br i1 %926, label %927, label %908

927:                                              ; preds = %908, %887
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %7) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_32x64_sse4_1(i16* nocapture readonly, i32*, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [512 x <2 x i64>], align 16
  %7 = bitcast [512 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 8192, i1 false)
  %8 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 11), align 8
  %9 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 3, i64 4), align 1
  %10 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 3, i64 4), align 1
  %11 = load i8, i8* %8, align 1
  %12 = sext i8 %11 to i32
  %13 = sext i32 %2 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %98, %14 ]
  %16 = mul nsw i64 %15, %13
  %17 = getelementptr inbounds i16, i16* %0, i64 %16
  %18 = shl i64 %15, 3
  %19 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %18
  %20 = bitcast i16* %17 to i64*
  %21 = load i64, i64* %20, align 1
  %22 = insertelement <2 x i64> undef, i64 %21, i32 0
  %23 = getelementptr inbounds i16, i16* %17, i64 4
  %24 = bitcast i16* %23 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = insertelement <2 x i64> undef, i64 %25, i32 0
  %27 = getelementptr inbounds <2 x i64>, <2 x i64>* %19, i64 1
  %28 = getelementptr inbounds i16, i16* %17, i64 8
  %29 = bitcast i16* %28 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = insertelement <2 x i64> undef, i64 %30, i32 0
  %32 = getelementptr inbounds <2 x i64>, <2 x i64>* %19, i64 2
  %33 = getelementptr inbounds i16, i16* %17, i64 12
  %34 = bitcast i16* %33 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> undef, i64 %35, i32 0
  %37 = bitcast <2 x i64> %22 to <8 x i16>
  %38 = bitcast <2 x i64> %26 to <8 x i16>
  %39 = bitcast <2 x i64> %31 to <8 x i16>
  %40 = getelementptr inbounds <2 x i64>, <2 x i64>* %19, i64 3
  %41 = bitcast <2 x i64> %36 to <8 x i16>
  %42 = shufflevector <8 x i16> %37, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %43 = sext <4 x i16> %42 to <4 x i32>
  %44 = bitcast <2 x i64>* %19 to <4 x i32>*
  %45 = shufflevector <8 x i16> %38, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %46 = sext <4 x i16> %45 to <4 x i32>
  %47 = bitcast <2 x i64>* %27 to <4 x i32>*
  %48 = shufflevector <8 x i16> %39, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %49 = sext <4 x i16> %48 to <4 x i32>
  %50 = bitcast <2 x i64>* %32 to <4 x i32>*
  %51 = shufflevector <8 x i16> %41, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %52 = sext <4 x i16> %51 to <4 x i32>
  %53 = bitcast <2 x i64>* %40 to <4 x i32>*
  %54 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %43, i32 %12) #8
  store <4 x i32> %54, <4 x i32>* %44, align 16
  %55 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %46, i32 %12) #8
  store <4 x i32> %55, <4 x i32>* %47, align 16
  %56 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %49, i32 %12) #8
  store <4 x i32> %56, <4 x i32>* %50, align 16
  %57 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %52, i32 %12) #8
  store <4 x i32> %57, <4 x i32>* %53, align 16
  %58 = getelementptr inbounds i16, i16* %17, i64 16
  %59 = getelementptr inbounds <2 x i64>, <2 x i64>* %19, i64 4
  %60 = bitcast i16* %58 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = insertelement <2 x i64> undef, i64 %61, i32 0
  %63 = getelementptr inbounds i16, i16* %58, i64 4
  %64 = bitcast i16* %63 to i64*
  %65 = load i64, i64* %64, align 1
  %66 = insertelement <2 x i64> undef, i64 %65, i32 0
  %67 = getelementptr inbounds <2 x i64>, <2 x i64>* %19, i64 5
  %68 = getelementptr inbounds i16, i16* %58, i64 8
  %69 = bitcast i16* %68 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = insertelement <2 x i64> undef, i64 %70, i32 0
  %72 = getelementptr inbounds <2 x i64>, <2 x i64>* %19, i64 6
  %73 = getelementptr inbounds i16, i16* %58, i64 12
  %74 = bitcast i16* %73 to i64*
  %75 = load i64, i64* %74, align 1
  %76 = insertelement <2 x i64> undef, i64 %75, i32 0
  %77 = bitcast <2 x i64> %62 to <8 x i16>
  %78 = bitcast <2 x i64> %66 to <8 x i16>
  %79 = bitcast <2 x i64> %71 to <8 x i16>
  %80 = getelementptr inbounds <2 x i64>, <2 x i64>* %19, i64 7
  %81 = bitcast <2 x i64> %76 to <8 x i16>
  %82 = shufflevector <8 x i16> %77, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %83 = sext <4 x i16> %82 to <4 x i32>
  %84 = bitcast <2 x i64>* %59 to <4 x i32>*
  %85 = shufflevector <8 x i16> %78, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %86 = sext <4 x i16> %85 to <4 x i32>
  %87 = bitcast <2 x i64>* %67 to <4 x i32>*
  %88 = shufflevector <8 x i16> %79, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %89 = sext <4 x i16> %88 to <4 x i32>
  %90 = bitcast <2 x i64>* %72 to <4 x i32>*
  %91 = shufflevector <8 x i16> %81, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %92 = sext <4 x i16> %91 to <4 x i32>
  %93 = bitcast <2 x i64>* %80 to <4 x i32>*
  %94 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %83, i32 %12) #8
  store <4 x i32> %94, <4 x i32>* %84, align 16
  %95 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %86, i32 %12) #8
  store <4 x i32> %95, <4 x i32>* %87, align 16
  %96 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %89, i32 %12) #8
  store <4 x i32> %96, <4 x i32>* %90, align 16
  %97 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %92, i32 %12) #8
  store <4 x i32> %97, <4 x i32>* %93, align 16
  %98 = add nuw nsw i64 %15, 1
  %99 = icmp eq i64 %98, 64
  br i1 %99, label %100, label %14

100:                                              ; preds = %14
  %101 = bitcast i32* %1 to <2 x i64>*
  %102 = sext i8 %10 to i32
  %103 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 0
  call void @av1_fdct64_sse4_1(<2 x i64>* nonnull %103, <2 x i64>* nonnull %103, i8 signext %9, i32 8, i32 8) #8
  %104 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 1
  call void @av1_fdct64_sse4_1(<2 x i64>* %104, <2 x i64>* %104, i8 signext %9, i32 8, i32 8) #8
  %105 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 2
  call void @av1_fdct64_sse4_1(<2 x i64>* %105, <2 x i64>* %105, i8 signext %9, i32 8, i32 8) #8
  %106 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 3
  call void @av1_fdct64_sse4_1(<2 x i64>* %106, <2 x i64>* %106, i8 signext %9, i32 8, i32 8) #8
  %107 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 4
  call void @av1_fdct64_sse4_1(<2 x i64>* %107, <2 x i64>* %107, i8 signext %9, i32 8, i32 8) #8
  %108 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 5
  call void @av1_fdct64_sse4_1(<2 x i64>* %108, <2 x i64>* %108, i8 signext %9, i32 8, i32 8) #8
  %109 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 6
  call void @av1_fdct64_sse4_1(<2 x i64>* %109, <2 x i64>* %109, i8 signext %9, i32 8, i32 8) #8
  %110 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 7
  call void @av1_fdct64_sse4_1(<2 x i64>* %110, <2 x i64>* %110, i8 signext %9, i32 8, i32 8) #8
  %111 = getelementptr inbounds i8, i8* %8, i64 1
  br label %198

112:                                              ; preds = %198, %115
  %113 = phi i64 [ %116, %115 ], [ 0, %198 ]
  %114 = shl nsw i64 %113, 6
  br label %157

115:                                              ; preds = %157
  %116 = add nuw nsw i64 %113, 1
  %117 = icmp eq i64 %116, 8
  br i1 %117, label %118, label %112

118:                                              ; preds = %115
  call void @av1_fdct32_sse4_1(<2 x i64>* %101, <2 x i64>* nonnull %103, i32 %102, i32 16) #8
  %119 = getelementptr inbounds i32, i32* %1, i64 4
  %120 = bitcast i32* %119 to <2 x i64>*
  call void @av1_fdct32_sse4_1(<2 x i64>* %120, <2 x i64>* %104, i32 %102, i32 16) #8
  %121 = getelementptr inbounds i32, i32* %1, i64 8
  %122 = bitcast i32* %121 to <2 x i64>*
  call void @av1_fdct32_sse4_1(<2 x i64>* %122, <2 x i64>* %105, i32 %102, i32 16) #8
  %123 = getelementptr inbounds i32, i32* %1, i64 12
  %124 = bitcast i32* %123 to <2 x i64>*
  call void @av1_fdct32_sse4_1(<2 x i64>* %124, <2 x i64>* %106, i32 %102, i32 16) #8
  %125 = getelementptr inbounds i32, i32* %1, i64 16
  %126 = bitcast i32* %125 to <2 x i64>*
  call void @av1_fdct32_sse4_1(<2 x i64>* %126, <2 x i64>* %107, i32 %102, i32 16) #8
  %127 = getelementptr inbounds i32, i32* %1, i64 20
  %128 = bitcast i32* %127 to <2 x i64>*
  call void @av1_fdct32_sse4_1(<2 x i64>* %128, <2 x i64>* %108, i32 %102, i32 16) #8
  %129 = getelementptr inbounds i32, i32* %1, i64 24
  %130 = bitcast i32* %129 to <2 x i64>*
  call void @av1_fdct32_sse4_1(<2 x i64>* %130, <2 x i64>* %109, i32 %102, i32 16) #8
  %131 = getelementptr inbounds i32, i32* %1, i64 28
  %132 = bitcast i32* %131 to <2 x i64>*
  call void @av1_fdct32_sse4_1(<2 x i64>* %132, <2 x i64>* %110, i32 %102, i32 16) #8
  %133 = getelementptr inbounds i32, i32* %1, i64 32
  %134 = bitcast i32* %133 to <2 x i64>*
  %135 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 8
  call void @av1_fdct32_sse4_1(<2 x i64>* %134, <2 x i64>* %135, i32 %102, i32 16) #8
  %136 = getelementptr inbounds i32, i32* %1, i64 36
  %137 = bitcast i32* %136 to <2 x i64>*
  %138 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 9
  call void @av1_fdct32_sse4_1(<2 x i64>* %137, <2 x i64>* %138, i32 %102, i32 16) #8
  %139 = getelementptr inbounds i32, i32* %1, i64 40
  %140 = bitcast i32* %139 to <2 x i64>*
  %141 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 10
  call void @av1_fdct32_sse4_1(<2 x i64>* %140, <2 x i64>* %141, i32 %102, i32 16) #8
  %142 = getelementptr inbounds i32, i32* %1, i64 44
  %143 = bitcast i32* %142 to <2 x i64>*
  %144 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 11
  call void @av1_fdct32_sse4_1(<2 x i64>* %143, <2 x i64>* %144, i32 %102, i32 16) #8
  %145 = getelementptr inbounds i32, i32* %1, i64 48
  %146 = bitcast i32* %145 to <2 x i64>*
  %147 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 12
  call void @av1_fdct32_sse4_1(<2 x i64>* %146, <2 x i64>* %147, i32 %102, i32 16) #8
  %148 = getelementptr inbounds i32, i32* %1, i64 52
  %149 = bitcast i32* %148 to <2 x i64>*
  %150 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 13
  call void @av1_fdct32_sse4_1(<2 x i64>* %149, <2 x i64>* %150, i32 %102, i32 16) #8
  %151 = getelementptr inbounds i32, i32* %1, i64 56
  %152 = bitcast i32* %151 to <2 x i64>*
  %153 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 14
  call void @av1_fdct32_sse4_1(<2 x i64>* %152, <2 x i64>* %153, i32 %102, i32 16) #8
  %154 = getelementptr inbounds i32, i32* %1, i64 60
  %155 = bitcast i32* %154 to <2 x i64>*
  %156 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 15
  call void @av1_fdct32_sse4_1(<2 x i64>* %155, <2 x i64>* %156, i32 %102, i32 16) #8
  br label %530

157:                                              ; preds = %157, %112
  %158 = phi i64 [ 0, %112 ], [ %196, %157 ]
  %159 = shl nsw i64 %158, 5
  %160 = add nuw nsw i64 %159, %113
  %161 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %160
  %162 = bitcast <2 x i64>* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 16
  %164 = add nuw nsw i64 %160, 8
  %165 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %164
  %166 = bitcast <2 x i64>* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 16
  %168 = shufflevector <4 x i32> %163, <4 x i32> %167, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %169 = bitcast <4 x i32> %168 to <2 x i64>
  %170 = shufflevector <4 x i32> %163, <4 x i32> %167, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %171 = bitcast <4 x i32> %170 to <2 x i64>
  %172 = add nuw nsw i64 %160, 16
  %173 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %172
  %174 = bitcast <2 x i64>* %173 to <4 x i32>*
  %175 = load <4 x i32>, <4 x i32>* %174, align 16
  %176 = add nuw nsw i64 %160, 24
  %177 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %176
  %178 = bitcast <2 x i64>* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 16
  %180 = shufflevector <4 x i32> %175, <4 x i32> %179, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %181 = bitcast <4 x i32> %180 to <2 x i64>
  %182 = shufflevector <4 x i32> %175, <4 x i32> %179, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %183 = bitcast <4 x i32> %182 to <2 x i64>
  %184 = shufflevector <2 x i64> %169, <2 x i64> %181, <2 x i32> <i32 0, i32 2>
  %185 = add nuw nsw i64 %158, %114
  %186 = getelementptr inbounds <2 x i64>, <2 x i64>* %101, i64 %185
  store <2 x i64> %184, <2 x i64>* %186, align 16
  %187 = shufflevector <2 x i64> %169, <2 x i64> %181, <2 x i32> <i32 1, i32 3>
  %188 = add nuw nsw i64 %185, 16
  %189 = getelementptr inbounds <2 x i64>, <2 x i64>* %101, i64 %188
  store <2 x i64> %187, <2 x i64>* %189, align 16
  %190 = shufflevector <2 x i64> %171, <2 x i64> %183, <2 x i32> <i32 0, i32 2>
  %191 = add nuw nsw i64 %185, 32
  %192 = getelementptr inbounds <2 x i64>, <2 x i64>* %101, i64 %191
  store <2 x i64> %190, <2 x i64>* %192, align 16
  %193 = shufflevector <2 x i64> %171, <2 x i64> %183, <2 x i32> <i32 1, i32 3>
  %194 = add nuw nsw i64 %185, 48
  %195 = getelementptr inbounds <2 x i64>, <2 x i64>* %101, i64 %194
  store <2 x i64> %193, <2 x i64>* %195, align 16
  %196 = add nuw nsw i64 %158, 1
  %197 = icmp eq i64 %196, 16
  br i1 %197, label %115, label %157

198:                                              ; preds = %198, %100
  %199 = phi i64 [ 0, %100 ], [ %528, %198 ]
  %200 = shl nsw i64 %199, 6
  %201 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %200
  %202 = load i8, i8* %111, align 1
  %203 = sext i8 %202 to i32
  %204 = sub nsw i32 0, %203
  %205 = xor i32 %203, -1
  %206 = shl i32 1, %205
  %207 = insertelement <4 x i32> undef, i32 %206, i32 0
  %208 = shufflevector <4 x i32> %207, <4 x i32> undef, <4 x i32> zeroinitializer
  %209 = bitcast <2 x i64>* %201 to <4 x i32>*
  %210 = load <4 x i32>, <4 x i32>* %209, align 16
  %211 = add <4 x i32> %208, %210
  %212 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 1
  %213 = bitcast <2 x i64>* %212 to <4 x i32>*
  %214 = load <4 x i32>, <4 x i32>* %213, align 16
  %215 = add <4 x i32> %208, %214
  %216 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 2
  %217 = bitcast <2 x i64>* %216 to <4 x i32>*
  %218 = load <4 x i32>, <4 x i32>* %217, align 16
  %219 = add <4 x i32> %208, %218
  %220 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 3
  %221 = bitcast <2 x i64>* %220 to <4 x i32>*
  %222 = load <4 x i32>, <4 x i32>* %221, align 16
  %223 = add <4 x i32> %222, %208
  %224 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 4
  %225 = bitcast <2 x i64>* %224 to <4 x i32>*
  %226 = load <4 x i32>, <4 x i32>* %225, align 16
  %227 = add <4 x i32> %226, %208
  %228 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 5
  %229 = bitcast <2 x i64>* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 16
  %231 = add <4 x i32> %230, %208
  %232 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 6
  %233 = bitcast <2 x i64>* %232 to <4 x i32>*
  %234 = load <4 x i32>, <4 x i32>* %233, align 16
  %235 = add <4 x i32> %234, %208
  %236 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 7
  %237 = bitcast <2 x i64>* %236 to <4 x i32>*
  %238 = load <4 x i32>, <4 x i32>* %237, align 16
  %239 = add <4 x i32> %238, %208
  %240 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 8
  %241 = bitcast <2 x i64>* %240 to <4 x i32>*
  %242 = load <4 x i32>, <4 x i32>* %241, align 16
  %243 = add <4 x i32> %242, %208
  %244 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 9
  %245 = bitcast <2 x i64>* %244 to <4 x i32>*
  %246 = load <4 x i32>, <4 x i32>* %245, align 16
  %247 = add <4 x i32> %246, %208
  %248 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 10
  %249 = bitcast <2 x i64>* %248 to <4 x i32>*
  %250 = load <4 x i32>, <4 x i32>* %249, align 16
  %251 = add <4 x i32> %250, %208
  %252 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 11
  %253 = bitcast <2 x i64>* %252 to <4 x i32>*
  %254 = load <4 x i32>, <4 x i32>* %253, align 16
  %255 = add <4 x i32> %254, %208
  %256 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 12
  %257 = bitcast <2 x i64>* %256 to <4 x i32>*
  %258 = load <4 x i32>, <4 x i32>* %257, align 16
  %259 = add <4 x i32> %258, %208
  %260 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 13
  %261 = bitcast <2 x i64>* %260 to <4 x i32>*
  %262 = load <4 x i32>, <4 x i32>* %261, align 16
  %263 = add <4 x i32> %262, %208
  %264 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 14
  %265 = bitcast <2 x i64>* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 16
  %267 = add <4 x i32> %266, %208
  %268 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 15
  %269 = bitcast <2 x i64>* %268 to <4 x i32>*
  %270 = load <4 x i32>, <4 x i32>* %269, align 16
  %271 = add <4 x i32> %270, %208
  %272 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %211, i32 %204) #8
  store <4 x i32> %272, <4 x i32>* %209, align 16
  %273 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %215, i32 %204) #8
  store <4 x i32> %273, <4 x i32>* %213, align 16
  %274 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %219, i32 %204) #8
  store <4 x i32> %274, <4 x i32>* %217, align 16
  %275 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %223, i32 %204) #8
  store <4 x i32> %275, <4 x i32>* %221, align 16
  %276 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %227, i32 %204) #8
  store <4 x i32> %276, <4 x i32>* %225, align 16
  %277 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %231, i32 %204) #8
  store <4 x i32> %277, <4 x i32>* %229, align 16
  %278 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %235, i32 %204) #8
  store <4 x i32> %278, <4 x i32>* %233, align 16
  %279 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %239, i32 %204) #8
  store <4 x i32> %279, <4 x i32>* %237, align 16
  %280 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %243, i32 %204) #8
  store <4 x i32> %280, <4 x i32>* %241, align 16
  %281 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %247, i32 %204) #8
  store <4 x i32> %281, <4 x i32>* %245, align 16
  %282 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %251, i32 %204) #8
  store <4 x i32> %282, <4 x i32>* %249, align 16
  %283 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %255, i32 %204) #8
  store <4 x i32> %283, <4 x i32>* %253, align 16
  %284 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %259, i32 %204) #8
  store <4 x i32> %284, <4 x i32>* %257, align 16
  %285 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %263, i32 %204) #8
  store <4 x i32> %285, <4 x i32>* %261, align 16
  %286 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %267, i32 %204) #8
  store <4 x i32> %286, <4 x i32>* %265, align 16
  %287 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %271, i32 %204) #8
  store <4 x i32> %287, <4 x i32>* %269, align 16
  %288 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 16
  %289 = bitcast <2 x i64>* %288 to <4 x i32>*
  %290 = load <4 x i32>, <4 x i32>* %289, align 16
  %291 = add <4 x i32> %290, %208
  %292 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 17
  %293 = bitcast <2 x i64>* %292 to <4 x i32>*
  %294 = load <4 x i32>, <4 x i32>* %293, align 16
  %295 = add <4 x i32> %294, %208
  %296 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 18
  %297 = bitcast <2 x i64>* %296 to <4 x i32>*
  %298 = load <4 x i32>, <4 x i32>* %297, align 16
  %299 = add <4 x i32> %298, %208
  %300 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 19
  %301 = bitcast <2 x i64>* %300 to <4 x i32>*
  %302 = load <4 x i32>, <4 x i32>* %301, align 16
  %303 = add <4 x i32> %302, %208
  %304 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 20
  %305 = bitcast <2 x i64>* %304 to <4 x i32>*
  %306 = load <4 x i32>, <4 x i32>* %305, align 16
  %307 = add <4 x i32> %306, %208
  %308 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 21
  %309 = bitcast <2 x i64>* %308 to <4 x i32>*
  %310 = load <4 x i32>, <4 x i32>* %309, align 16
  %311 = add <4 x i32> %310, %208
  %312 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 22
  %313 = bitcast <2 x i64>* %312 to <4 x i32>*
  %314 = load <4 x i32>, <4 x i32>* %313, align 16
  %315 = add <4 x i32> %314, %208
  %316 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 23
  %317 = bitcast <2 x i64>* %316 to <4 x i32>*
  %318 = load <4 x i32>, <4 x i32>* %317, align 16
  %319 = add <4 x i32> %318, %208
  %320 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 24
  %321 = bitcast <2 x i64>* %320 to <4 x i32>*
  %322 = load <4 x i32>, <4 x i32>* %321, align 16
  %323 = add <4 x i32> %322, %208
  %324 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 25
  %325 = bitcast <2 x i64>* %324 to <4 x i32>*
  %326 = load <4 x i32>, <4 x i32>* %325, align 16
  %327 = add <4 x i32> %326, %208
  %328 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 26
  %329 = bitcast <2 x i64>* %328 to <4 x i32>*
  %330 = load <4 x i32>, <4 x i32>* %329, align 16
  %331 = add <4 x i32> %330, %208
  %332 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 27
  %333 = bitcast <2 x i64>* %332 to <4 x i32>*
  %334 = load <4 x i32>, <4 x i32>* %333, align 16
  %335 = add <4 x i32> %334, %208
  %336 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 28
  %337 = bitcast <2 x i64>* %336 to <4 x i32>*
  %338 = load <4 x i32>, <4 x i32>* %337, align 16
  %339 = add <4 x i32> %338, %208
  %340 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 29
  %341 = bitcast <2 x i64>* %340 to <4 x i32>*
  %342 = load <4 x i32>, <4 x i32>* %341, align 16
  %343 = add <4 x i32> %342, %208
  %344 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 30
  %345 = bitcast <2 x i64>* %344 to <4 x i32>*
  %346 = load <4 x i32>, <4 x i32>* %345, align 16
  %347 = add <4 x i32> %346, %208
  %348 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 31
  %349 = bitcast <2 x i64>* %348 to <4 x i32>*
  %350 = load <4 x i32>, <4 x i32>* %349, align 16
  %351 = add <4 x i32> %350, %208
  %352 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %291, i32 %204) #8
  store <4 x i32> %352, <4 x i32>* %289, align 16
  %353 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %295, i32 %204) #8
  store <4 x i32> %353, <4 x i32>* %293, align 16
  %354 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %299, i32 %204) #8
  store <4 x i32> %354, <4 x i32>* %297, align 16
  %355 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %303, i32 %204) #8
  store <4 x i32> %355, <4 x i32>* %301, align 16
  %356 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %307, i32 %204) #8
  store <4 x i32> %356, <4 x i32>* %305, align 16
  %357 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %311, i32 %204) #8
  store <4 x i32> %357, <4 x i32>* %309, align 16
  %358 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %315, i32 %204) #8
  store <4 x i32> %358, <4 x i32>* %313, align 16
  %359 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %319, i32 %204) #8
  store <4 x i32> %359, <4 x i32>* %317, align 16
  %360 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %323, i32 %204) #8
  store <4 x i32> %360, <4 x i32>* %321, align 16
  %361 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %327, i32 %204) #8
  store <4 x i32> %361, <4 x i32>* %325, align 16
  %362 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %331, i32 %204) #8
  store <4 x i32> %362, <4 x i32>* %329, align 16
  %363 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %335, i32 %204) #8
  store <4 x i32> %363, <4 x i32>* %333, align 16
  %364 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %339, i32 %204) #8
  store <4 x i32> %364, <4 x i32>* %337, align 16
  %365 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %343, i32 %204) #8
  store <4 x i32> %365, <4 x i32>* %341, align 16
  %366 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %347, i32 %204) #8
  store <4 x i32> %366, <4 x i32>* %345, align 16
  %367 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %351, i32 %204) #8
  store <4 x i32> %367, <4 x i32>* %349, align 16
  %368 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 32
  %369 = bitcast <2 x i64>* %368 to <4 x i32>*
  %370 = load <4 x i32>, <4 x i32>* %369, align 16
  %371 = add <4 x i32> %370, %208
  %372 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 33
  %373 = bitcast <2 x i64>* %372 to <4 x i32>*
  %374 = load <4 x i32>, <4 x i32>* %373, align 16
  %375 = add <4 x i32> %374, %208
  %376 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 34
  %377 = bitcast <2 x i64>* %376 to <4 x i32>*
  %378 = load <4 x i32>, <4 x i32>* %377, align 16
  %379 = add <4 x i32> %378, %208
  %380 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 35
  %381 = bitcast <2 x i64>* %380 to <4 x i32>*
  %382 = load <4 x i32>, <4 x i32>* %381, align 16
  %383 = add <4 x i32> %382, %208
  %384 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 36
  %385 = bitcast <2 x i64>* %384 to <4 x i32>*
  %386 = load <4 x i32>, <4 x i32>* %385, align 16
  %387 = add <4 x i32> %386, %208
  %388 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 37
  %389 = bitcast <2 x i64>* %388 to <4 x i32>*
  %390 = load <4 x i32>, <4 x i32>* %389, align 16
  %391 = add <4 x i32> %390, %208
  %392 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 38
  %393 = bitcast <2 x i64>* %392 to <4 x i32>*
  %394 = load <4 x i32>, <4 x i32>* %393, align 16
  %395 = add <4 x i32> %394, %208
  %396 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 39
  %397 = bitcast <2 x i64>* %396 to <4 x i32>*
  %398 = load <4 x i32>, <4 x i32>* %397, align 16
  %399 = add <4 x i32> %398, %208
  %400 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 40
  %401 = bitcast <2 x i64>* %400 to <4 x i32>*
  %402 = load <4 x i32>, <4 x i32>* %401, align 16
  %403 = add <4 x i32> %402, %208
  %404 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 41
  %405 = bitcast <2 x i64>* %404 to <4 x i32>*
  %406 = load <4 x i32>, <4 x i32>* %405, align 16
  %407 = add <4 x i32> %406, %208
  %408 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 42
  %409 = bitcast <2 x i64>* %408 to <4 x i32>*
  %410 = load <4 x i32>, <4 x i32>* %409, align 16
  %411 = add <4 x i32> %410, %208
  %412 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 43
  %413 = bitcast <2 x i64>* %412 to <4 x i32>*
  %414 = load <4 x i32>, <4 x i32>* %413, align 16
  %415 = add <4 x i32> %414, %208
  %416 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 44
  %417 = bitcast <2 x i64>* %416 to <4 x i32>*
  %418 = load <4 x i32>, <4 x i32>* %417, align 16
  %419 = add <4 x i32> %418, %208
  %420 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 45
  %421 = bitcast <2 x i64>* %420 to <4 x i32>*
  %422 = load <4 x i32>, <4 x i32>* %421, align 16
  %423 = add <4 x i32> %422, %208
  %424 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 46
  %425 = bitcast <2 x i64>* %424 to <4 x i32>*
  %426 = load <4 x i32>, <4 x i32>* %425, align 16
  %427 = add <4 x i32> %426, %208
  %428 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 47
  %429 = bitcast <2 x i64>* %428 to <4 x i32>*
  %430 = load <4 x i32>, <4 x i32>* %429, align 16
  %431 = add <4 x i32> %430, %208
  %432 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %371, i32 %204) #8
  store <4 x i32> %432, <4 x i32>* %369, align 16
  %433 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %375, i32 %204) #8
  store <4 x i32> %433, <4 x i32>* %373, align 16
  %434 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %379, i32 %204) #8
  store <4 x i32> %434, <4 x i32>* %377, align 16
  %435 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %383, i32 %204) #8
  store <4 x i32> %435, <4 x i32>* %381, align 16
  %436 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %387, i32 %204) #8
  store <4 x i32> %436, <4 x i32>* %385, align 16
  %437 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %391, i32 %204) #8
  store <4 x i32> %437, <4 x i32>* %389, align 16
  %438 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %395, i32 %204) #8
  store <4 x i32> %438, <4 x i32>* %393, align 16
  %439 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %399, i32 %204) #8
  store <4 x i32> %439, <4 x i32>* %397, align 16
  %440 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %403, i32 %204) #8
  store <4 x i32> %440, <4 x i32>* %401, align 16
  %441 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %407, i32 %204) #8
  store <4 x i32> %441, <4 x i32>* %405, align 16
  %442 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %411, i32 %204) #8
  store <4 x i32> %442, <4 x i32>* %409, align 16
  %443 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %415, i32 %204) #8
  store <4 x i32> %443, <4 x i32>* %413, align 16
  %444 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %419, i32 %204) #8
  store <4 x i32> %444, <4 x i32>* %417, align 16
  %445 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %423, i32 %204) #8
  store <4 x i32> %445, <4 x i32>* %421, align 16
  %446 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %427, i32 %204) #8
  store <4 x i32> %446, <4 x i32>* %425, align 16
  %447 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %431, i32 %204) #8
  store <4 x i32> %447, <4 x i32>* %429, align 16
  %448 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 48
  %449 = bitcast <2 x i64>* %448 to <4 x i32>*
  %450 = load <4 x i32>, <4 x i32>* %449, align 16
  %451 = add <4 x i32> %450, %208
  %452 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 49
  %453 = bitcast <2 x i64>* %452 to <4 x i32>*
  %454 = load <4 x i32>, <4 x i32>* %453, align 16
  %455 = add <4 x i32> %454, %208
  %456 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 50
  %457 = bitcast <2 x i64>* %456 to <4 x i32>*
  %458 = load <4 x i32>, <4 x i32>* %457, align 16
  %459 = add <4 x i32> %458, %208
  %460 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 51
  %461 = bitcast <2 x i64>* %460 to <4 x i32>*
  %462 = load <4 x i32>, <4 x i32>* %461, align 16
  %463 = add <4 x i32> %462, %208
  %464 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 52
  %465 = bitcast <2 x i64>* %464 to <4 x i32>*
  %466 = load <4 x i32>, <4 x i32>* %465, align 16
  %467 = add <4 x i32> %466, %208
  %468 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 53
  %469 = bitcast <2 x i64>* %468 to <4 x i32>*
  %470 = load <4 x i32>, <4 x i32>* %469, align 16
  %471 = add <4 x i32> %470, %208
  %472 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 54
  %473 = bitcast <2 x i64>* %472 to <4 x i32>*
  %474 = load <4 x i32>, <4 x i32>* %473, align 16
  %475 = add <4 x i32> %474, %208
  %476 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 55
  %477 = bitcast <2 x i64>* %476 to <4 x i32>*
  %478 = load <4 x i32>, <4 x i32>* %477, align 16
  %479 = add <4 x i32> %478, %208
  %480 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 56
  %481 = bitcast <2 x i64>* %480 to <4 x i32>*
  %482 = load <4 x i32>, <4 x i32>* %481, align 16
  %483 = add <4 x i32> %482, %208
  %484 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 57
  %485 = bitcast <2 x i64>* %484 to <4 x i32>*
  %486 = load <4 x i32>, <4 x i32>* %485, align 16
  %487 = add <4 x i32> %486, %208
  %488 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 58
  %489 = bitcast <2 x i64>* %488 to <4 x i32>*
  %490 = load <4 x i32>, <4 x i32>* %489, align 16
  %491 = add <4 x i32> %490, %208
  %492 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 59
  %493 = bitcast <2 x i64>* %492 to <4 x i32>*
  %494 = load <4 x i32>, <4 x i32>* %493, align 16
  %495 = add <4 x i32> %494, %208
  %496 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 60
  %497 = bitcast <2 x i64>* %496 to <4 x i32>*
  %498 = load <4 x i32>, <4 x i32>* %497, align 16
  %499 = add <4 x i32> %498, %208
  %500 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 61
  %501 = bitcast <2 x i64>* %500 to <4 x i32>*
  %502 = load <4 x i32>, <4 x i32>* %501, align 16
  %503 = add <4 x i32> %502, %208
  %504 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 62
  %505 = bitcast <2 x i64>* %504 to <4 x i32>*
  %506 = load <4 x i32>, <4 x i32>* %505, align 16
  %507 = add <4 x i32> %506, %208
  %508 = getelementptr inbounds <2 x i64>, <2 x i64>* %201, i64 63
  %509 = bitcast <2 x i64>* %508 to <4 x i32>*
  %510 = load <4 x i32>, <4 x i32>* %509, align 16
  %511 = add <4 x i32> %510, %208
  %512 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %451, i32 %204) #8
  store <4 x i32> %512, <4 x i32>* %449, align 16
  %513 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %455, i32 %204) #8
  store <4 x i32> %513, <4 x i32>* %453, align 16
  %514 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %459, i32 %204) #8
  store <4 x i32> %514, <4 x i32>* %457, align 16
  %515 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %463, i32 %204) #8
  store <4 x i32> %515, <4 x i32>* %461, align 16
  %516 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %467, i32 %204) #8
  store <4 x i32> %516, <4 x i32>* %465, align 16
  %517 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %471, i32 %204) #8
  store <4 x i32> %517, <4 x i32>* %469, align 16
  %518 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %475, i32 %204) #8
  store <4 x i32> %518, <4 x i32>* %473, align 16
  %519 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %479, i32 %204) #8
  store <4 x i32> %519, <4 x i32>* %477, align 16
  %520 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %483, i32 %204) #8
  store <4 x i32> %520, <4 x i32>* %481, align 16
  %521 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %487, i32 %204) #8
  store <4 x i32> %521, <4 x i32>* %485, align 16
  %522 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %491, i32 %204) #8
  store <4 x i32> %522, <4 x i32>* %489, align 16
  %523 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %495, i32 %204) #8
  store <4 x i32> %523, <4 x i32>* %493, align 16
  %524 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %499, i32 %204) #8
  store <4 x i32> %524, <4 x i32>* %497, align 16
  %525 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %503, i32 %204) #8
  store <4 x i32> %525, <4 x i32>* %501, align 16
  %526 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %507, i32 %204) #8
  store <4 x i32> %526, <4 x i32>* %505, align 16
  %527 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %511, i32 %204) #8
  store <4 x i32> %527, <4 x i32>* %509, align 16
  %528 = add nuw nsw i64 %199, 1
  %529 = icmp eq i64 %528, 8
  br i1 %529, label %112, label %198

530:                                              ; preds = %533, %118
  %531 = phi i64 [ %534, %533 ], [ 0, %118 ]
  %532 = shl nsw i64 %531, 5
  br label %536

533:                                              ; preds = %536
  %534 = add nuw nsw i64 %531, 1
  %535 = icmp eq i64 %534, 16
  br i1 %535, label %577, label %530

536:                                              ; preds = %536, %530
  %537 = phi i64 [ 0, %530 ], [ %575, %536 ]
  %538 = shl nsw i64 %537, 6
  %539 = add nuw nsw i64 %538, %531
  %540 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %539
  %541 = bitcast <2 x i64>* %540 to <4 x i32>*
  %542 = load <4 x i32>, <4 x i32>* %541, align 16
  %543 = add nuw nsw i64 %539, 16
  %544 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %543
  %545 = bitcast <2 x i64>* %544 to <4 x i32>*
  %546 = load <4 x i32>, <4 x i32>* %545, align 16
  %547 = shufflevector <4 x i32> %542, <4 x i32> %546, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %548 = bitcast <4 x i32> %547 to <2 x i64>
  %549 = shufflevector <4 x i32> %542, <4 x i32> %546, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %550 = bitcast <4 x i32> %549 to <2 x i64>
  %551 = add nuw nsw i64 %539, 32
  %552 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %551
  %553 = bitcast <2 x i64>* %552 to <4 x i32>*
  %554 = load <4 x i32>, <4 x i32>* %553, align 16
  %555 = add nuw nsw i64 %539, 48
  %556 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %555
  %557 = bitcast <2 x i64>* %556 to <4 x i32>*
  %558 = load <4 x i32>, <4 x i32>* %557, align 16
  %559 = shufflevector <4 x i32> %554, <4 x i32> %558, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %560 = bitcast <4 x i32> %559 to <2 x i64>
  %561 = shufflevector <4 x i32> %554, <4 x i32> %558, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %562 = bitcast <4 x i32> %561 to <2 x i64>
  %563 = shufflevector <2 x i64> %548, <2 x i64> %560, <2 x i32> <i32 0, i32 2>
  %564 = add nuw nsw i64 %537, %532
  %565 = getelementptr inbounds <2 x i64>, <2 x i64>* %101, i64 %564
  store <2 x i64> %563, <2 x i64>* %565, align 16
  %566 = shufflevector <2 x i64> %548, <2 x i64> %560, <2 x i32> <i32 1, i32 3>
  %567 = add nuw nsw i64 %564, 8
  %568 = getelementptr inbounds <2 x i64>, <2 x i64>* %101, i64 %567
  store <2 x i64> %566, <2 x i64>* %568, align 16
  %569 = shufflevector <2 x i64> %550, <2 x i64> %562, <2 x i32> <i32 0, i32 2>
  %570 = add nuw nsw i64 %564, 16
  %571 = getelementptr inbounds <2 x i64>, <2 x i64>* %101, i64 %570
  store <2 x i64> %569, <2 x i64>* %571, align 16
  %572 = shufflevector <2 x i64> %550, <2 x i64> %562, <2 x i32> <i32 1, i32 3>
  %573 = add nuw nsw i64 %564, 24
  %574 = getelementptr inbounds <2 x i64>, <2 x i64>* %101, i64 %573
  store <2 x i64> %572, <2 x i64>* %574, align 16
  %575 = add nuw nsw i64 %537, 1
  %576 = icmp eq i64 %575, 8
  br i1 %576, label %533, label %536

577:                                              ; preds = %533
  %578 = getelementptr inbounds i8, i8* %8, i64 2
  %579 = load i8, i8* %578, align 1
  %580 = sext i8 %579 to i32
  %581 = sub nsw i32 0, %580
  %582 = icmp slt i8 %579, 0
  br i1 %582, label %583, label %609

583:                                              ; preds = %577
  %584 = xor i32 %580, -1
  %585 = shl i32 1, %584
  %586 = insertelement <4 x i32> undef, i32 %585, i32 0
  %587 = shufflevector <4 x i32> %586, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %588

588:                                              ; preds = %588, %583
  %589 = phi i64 [ 0, %583 ], [ %607, %588 ]
  %590 = getelementptr inbounds <2 x i64>, <2 x i64>* %101, i64 %589
  %591 = bitcast <2 x i64>* %590 to <4 x i32>*
  %592 = load <4 x i32>, <4 x i32>* %591, align 16
  %593 = add <4 x i32> %592, %587
  %594 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %593, i32 %581) #8
  %595 = mul <4 x i32> %594, <i32 5793, i32 5793, i32 5793, i32 5793>
  %596 = add <4 x i32> %595, <i32 2048, i32 2048, i32 2048, i32 2048>
  %597 = ashr <4 x i32> %596, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %597, <4 x i32>* %591, align 16
  %598 = or i64 %589, 1
  %599 = getelementptr inbounds <2 x i64>, <2 x i64>* %101, i64 %598
  %600 = bitcast <2 x i64>* %599 to <4 x i32>*
  %601 = load <4 x i32>, <4 x i32>* %600, align 16
  %602 = add <4 x i32> %601, %587
  %603 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %602, i32 %581) #8
  %604 = mul <4 x i32> %603, <i32 5793, i32 5793, i32 5793, i32 5793>
  %605 = add <4 x i32> %604, <i32 2048, i32 2048, i32 2048, i32 2048>
  %606 = ashr <4 x i32> %605, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %606, <4 x i32>* %600, align 16
  %607 = add nuw nsw i64 %589, 2
  %608 = icmp eq i64 %607, 512
  br i1 %608, label %628, label %588

609:                                              ; preds = %577, %609
  %610 = phi i64 [ %626, %609 ], [ 0, %577 ]
  %611 = getelementptr inbounds <2 x i64>, <2 x i64>* %101, i64 %610
  %612 = bitcast <2 x i64>* %611 to <4 x i32>*
  %613 = load <4 x i32>, <4 x i32>* %612, align 16
  %614 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %613, i32 %580) #8
  %615 = mul <4 x i32> %614, <i32 5793, i32 5793, i32 5793, i32 5793>
  %616 = add <4 x i32> %615, <i32 2048, i32 2048, i32 2048, i32 2048>
  %617 = ashr <4 x i32> %616, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %617, <4 x i32>* %612, align 16
  %618 = or i64 %610, 1
  %619 = getelementptr inbounds <2 x i64>, <2 x i64>* %101, i64 %618
  %620 = bitcast <2 x i64>* %619 to <4 x i32>*
  %621 = load <4 x i32>, <4 x i32>* %620, align 16
  %622 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %621, i32 %580) #8
  %623 = mul <4 x i32> %622, <i32 5793, i32 5793, i32 5793, i32 5793>
  %624 = add <4 x i32> %623, <i32 2048, i32 2048, i32 2048, i32 2048>
  %625 = ashr <4 x i32> %624, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %625, <4 x i32>* %620, align 16
  %626 = add nuw nsw i64 %610, 2
  %627 = icmp eq i64 %626, 512
  br i1 %627, label %628, label %609

628:                                              ; preds = %609, %588
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %7) #8
  ret void
}

declare void @av1_fdct64_sse4_1(<2 x i64>*, <2 x i64>*, i8 signext, i32, i32) local_unnamed_addr #6

declare void @av1_fdct32_sse4_1(<2 x i64>*, <2 x i64>*, i32, i32) #6

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_64x32_sse4_1(i16* nocapture readonly, i32*, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [512 x <2 x i64>], align 16
  %7 = bitcast [512 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 8192, i1 false)
  %8 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 12), align 16
  %9 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 4, i64 3), align 1
  %10 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 4, i64 3), align 1
  %11 = getelementptr inbounds i16, i16* %0, i64 16
  %12 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 4
  %13 = getelementptr inbounds i16, i16* %0, i64 32
  %14 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 8
  %15 = getelementptr inbounds i16, i16* %0, i64 48
  %16 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 12
  %17 = sext i32 %2 to i64
  br label %18

18:                                               ; preds = %18, %5
  %19 = phi i64 [ 0, %5 ], [ %190, %18 ]
  %20 = mul nsw i64 %19, %17
  %21 = getelementptr inbounds i16, i16* %0, i64 %20
  %22 = shl nsw i64 %19, 4
  %23 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %22
  %24 = load i8, i8* %8, align 1
  %25 = sext i8 %24 to i32
  %26 = bitcast i16* %21 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = insertelement <2 x i64> undef, i64 %27, i32 0
  %29 = getelementptr inbounds i16, i16* %21, i64 4
  %30 = bitcast i16* %29 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = getelementptr inbounds <2 x i64>, <2 x i64>* %23, i64 1
  %34 = getelementptr inbounds i16, i16* %21, i64 8
  %35 = bitcast i16* %34 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = insertelement <2 x i64> undef, i64 %36, i32 0
  %38 = getelementptr inbounds <2 x i64>, <2 x i64>* %23, i64 2
  %39 = getelementptr inbounds i16, i16* %21, i64 12
  %40 = bitcast i16* %39 to i64*
  %41 = load i64, i64* %40, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = bitcast <2 x i64> %28 to <8 x i16>
  %44 = bitcast <2 x i64> %32 to <8 x i16>
  %45 = bitcast <2 x i64> %37 to <8 x i16>
  %46 = getelementptr inbounds <2 x i64>, <2 x i64>* %23, i64 3
  %47 = bitcast <2 x i64> %42 to <8 x i16>
  %48 = shufflevector <8 x i16> %43, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %49 = sext <4 x i16> %48 to <4 x i32>
  %50 = bitcast <2 x i64>* %23 to <4 x i32>*
  %51 = shufflevector <8 x i16> %44, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %52 = sext <4 x i16> %51 to <4 x i32>
  %53 = bitcast <2 x i64>* %33 to <4 x i32>*
  %54 = shufflevector <8 x i16> %45, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %55 = sext <4 x i16> %54 to <4 x i32>
  %56 = bitcast <2 x i64>* %38 to <4 x i32>*
  %57 = shufflevector <8 x i16> %47, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %58 = sext <4 x i16> %57 to <4 x i32>
  %59 = bitcast <2 x i64>* %46 to <4 x i32>*
  %60 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %49, i32 %25) #8
  store <4 x i32> %60, <4 x i32>* %50, align 16
  %61 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %52, i32 %25) #8
  store <4 x i32> %61, <4 x i32>* %53, align 16
  %62 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %55, i32 %25) #8
  store <4 x i32> %62, <4 x i32>* %56, align 16
  %63 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %58, i32 %25) #8
  store <4 x i32> %63, <4 x i32>* %59, align 16
  %64 = getelementptr inbounds i16, i16* %11, i64 %20
  %65 = getelementptr inbounds <2 x i64>, <2 x i64>* %12, i64 %22
  %66 = load i8, i8* %8, align 1
  %67 = sext i8 %66 to i32
  %68 = bitcast i16* %64 to i64*
  %69 = load i64, i64* %68, align 1
  %70 = insertelement <2 x i64> undef, i64 %69, i32 0
  %71 = getelementptr inbounds i16, i16* %64, i64 4
  %72 = bitcast i16* %71 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = insertelement <2 x i64> undef, i64 %73, i32 0
  %75 = getelementptr inbounds <2 x i64>, <2 x i64>* %65, i64 1
  %76 = getelementptr inbounds i16, i16* %64, i64 8
  %77 = bitcast i16* %76 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = insertelement <2 x i64> undef, i64 %78, i32 0
  %80 = getelementptr inbounds <2 x i64>, <2 x i64>* %65, i64 2
  %81 = getelementptr inbounds i16, i16* %64, i64 12
  %82 = bitcast i16* %81 to i64*
  %83 = load i64, i64* %82, align 1
  %84 = insertelement <2 x i64> undef, i64 %83, i32 0
  %85 = bitcast <2 x i64> %70 to <8 x i16>
  %86 = bitcast <2 x i64> %74 to <8 x i16>
  %87 = bitcast <2 x i64> %79 to <8 x i16>
  %88 = getelementptr inbounds <2 x i64>, <2 x i64>* %65, i64 3
  %89 = bitcast <2 x i64> %84 to <8 x i16>
  %90 = shufflevector <8 x i16> %85, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %91 = sext <4 x i16> %90 to <4 x i32>
  %92 = bitcast <2 x i64>* %65 to <4 x i32>*
  %93 = shufflevector <8 x i16> %86, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %94 = sext <4 x i16> %93 to <4 x i32>
  %95 = bitcast <2 x i64>* %75 to <4 x i32>*
  %96 = shufflevector <8 x i16> %87, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %97 = sext <4 x i16> %96 to <4 x i32>
  %98 = bitcast <2 x i64>* %80 to <4 x i32>*
  %99 = shufflevector <8 x i16> %89, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %100 = sext <4 x i16> %99 to <4 x i32>
  %101 = bitcast <2 x i64>* %88 to <4 x i32>*
  %102 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %91, i32 %67) #8
  store <4 x i32> %102, <4 x i32>* %92, align 16
  %103 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %94, i32 %67) #8
  store <4 x i32> %103, <4 x i32>* %95, align 16
  %104 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %97, i32 %67) #8
  store <4 x i32> %104, <4 x i32>* %98, align 16
  %105 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %100, i32 %67) #8
  store <4 x i32> %105, <4 x i32>* %101, align 16
  %106 = getelementptr inbounds i16, i16* %13, i64 %20
  %107 = getelementptr inbounds <2 x i64>, <2 x i64>* %14, i64 %22
  %108 = load i8, i8* %8, align 1
  %109 = sext i8 %108 to i32
  %110 = bitcast i16* %106 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = insertelement <2 x i64> undef, i64 %111, i32 0
  %113 = getelementptr inbounds i16, i16* %106, i64 4
  %114 = bitcast i16* %113 to i64*
  %115 = load i64, i64* %114, align 1
  %116 = insertelement <2 x i64> undef, i64 %115, i32 0
  %117 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 1
  %118 = getelementptr inbounds i16, i16* %106, i64 8
  %119 = bitcast i16* %118 to i64*
  %120 = load i64, i64* %119, align 1
  %121 = insertelement <2 x i64> undef, i64 %120, i32 0
  %122 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 2
  %123 = getelementptr inbounds i16, i16* %106, i64 12
  %124 = bitcast i16* %123 to i64*
  %125 = load i64, i64* %124, align 1
  %126 = insertelement <2 x i64> undef, i64 %125, i32 0
  %127 = bitcast <2 x i64> %112 to <8 x i16>
  %128 = bitcast <2 x i64> %116 to <8 x i16>
  %129 = bitcast <2 x i64> %121 to <8 x i16>
  %130 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 3
  %131 = bitcast <2 x i64> %126 to <8 x i16>
  %132 = shufflevector <8 x i16> %127, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %133 = sext <4 x i16> %132 to <4 x i32>
  %134 = bitcast <2 x i64>* %107 to <4 x i32>*
  %135 = shufflevector <8 x i16> %128, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %136 = sext <4 x i16> %135 to <4 x i32>
  %137 = bitcast <2 x i64>* %117 to <4 x i32>*
  %138 = shufflevector <8 x i16> %129, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %139 = sext <4 x i16> %138 to <4 x i32>
  %140 = bitcast <2 x i64>* %122 to <4 x i32>*
  %141 = shufflevector <8 x i16> %131, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %142 = sext <4 x i16> %141 to <4 x i32>
  %143 = bitcast <2 x i64>* %130 to <4 x i32>*
  %144 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %133, i32 %109) #8
  store <4 x i32> %144, <4 x i32>* %134, align 16
  %145 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %136, i32 %109) #8
  store <4 x i32> %145, <4 x i32>* %137, align 16
  %146 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %139, i32 %109) #8
  store <4 x i32> %146, <4 x i32>* %140, align 16
  %147 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %142, i32 %109) #8
  store <4 x i32> %147, <4 x i32>* %143, align 16
  %148 = getelementptr inbounds i16, i16* %15, i64 %20
  %149 = getelementptr inbounds <2 x i64>, <2 x i64>* %16, i64 %22
  %150 = load i8, i8* %8, align 1
  %151 = sext i8 %150 to i32
  %152 = bitcast i16* %148 to i64*
  %153 = load i64, i64* %152, align 1
  %154 = insertelement <2 x i64> undef, i64 %153, i32 0
  %155 = getelementptr inbounds i16, i16* %148, i64 4
  %156 = bitcast i16* %155 to i64*
  %157 = load i64, i64* %156, align 1
  %158 = insertelement <2 x i64> undef, i64 %157, i32 0
  %159 = getelementptr inbounds <2 x i64>, <2 x i64>* %149, i64 1
  %160 = getelementptr inbounds i16, i16* %148, i64 8
  %161 = bitcast i16* %160 to i64*
  %162 = load i64, i64* %161, align 1
  %163 = insertelement <2 x i64> undef, i64 %162, i32 0
  %164 = getelementptr inbounds <2 x i64>, <2 x i64>* %149, i64 2
  %165 = getelementptr inbounds i16, i16* %148, i64 12
  %166 = bitcast i16* %165 to i64*
  %167 = load i64, i64* %166, align 1
  %168 = insertelement <2 x i64> undef, i64 %167, i32 0
  %169 = bitcast <2 x i64> %154 to <8 x i16>
  %170 = bitcast <2 x i64> %158 to <8 x i16>
  %171 = bitcast <2 x i64> %163 to <8 x i16>
  %172 = getelementptr inbounds <2 x i64>, <2 x i64>* %149, i64 3
  %173 = bitcast <2 x i64> %168 to <8 x i16>
  %174 = shufflevector <8 x i16> %169, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %175 = sext <4 x i16> %174 to <4 x i32>
  %176 = bitcast <2 x i64>* %149 to <4 x i32>*
  %177 = shufflevector <8 x i16> %170, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %178 = sext <4 x i16> %177 to <4 x i32>
  %179 = bitcast <2 x i64>* %159 to <4 x i32>*
  %180 = shufflevector <8 x i16> %171, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %181 = sext <4 x i16> %180 to <4 x i32>
  %182 = bitcast <2 x i64>* %164 to <4 x i32>*
  %183 = shufflevector <8 x i16> %173, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %184 = sext <4 x i16> %183 to <4 x i32>
  %185 = bitcast <2 x i64>* %172 to <4 x i32>*
  %186 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %175, i32 %151) #8
  store <4 x i32> %186, <4 x i32>* %176, align 16
  %187 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %178, i32 %151) #8
  store <4 x i32> %187, <4 x i32>* %179, align 16
  %188 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %181, i32 %151) #8
  store <4 x i32> %188, <4 x i32>* %182, align 16
  %189 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %184, i32 %151) #8
  store <4 x i32> %189, <4 x i32>* %185, align 16
  %190 = add nuw nsw i64 %19, 1
  %191 = icmp eq i64 %190, 32
  br i1 %191, label %192, label %18

192:                                              ; preds = %18
  %193 = bitcast i32* %1 to <2 x i64>*
  %194 = sext i8 %9 to i32
  %195 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 0
  call void @av1_fdct32_sse4_1(<2 x i64>* nonnull %195, <2 x i64>* nonnull %195, i32 %194, i32 16) #8
  %196 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 1
  call void @av1_fdct32_sse4_1(<2 x i64>* %196, <2 x i64>* %196, i32 %194, i32 16) #8
  %197 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 2
  call void @av1_fdct32_sse4_1(<2 x i64>* %197, <2 x i64>* %197, i32 %194, i32 16) #8
  %198 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 3
  call void @av1_fdct32_sse4_1(<2 x i64>* %198, <2 x i64>* %198, i32 %194, i32 16) #8
  call void @av1_fdct32_sse4_1(<2 x i64>* %12, <2 x i64>* %12, i32 %194, i32 16) #8
  %199 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 5
  call void @av1_fdct32_sse4_1(<2 x i64>* %199, <2 x i64>* %199, i32 %194, i32 16) #8
  %200 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 6
  call void @av1_fdct32_sse4_1(<2 x i64>* %200, <2 x i64>* %200, i32 %194, i32 16) #8
  %201 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 7
  call void @av1_fdct32_sse4_1(<2 x i64>* %201, <2 x i64>* %201, i32 %194, i32 16) #8
  call void @av1_fdct32_sse4_1(<2 x i64>* %14, <2 x i64>* %14, i32 %194, i32 16) #8
  %202 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 9
  call void @av1_fdct32_sse4_1(<2 x i64>* %202, <2 x i64>* %202, i32 %194, i32 16) #8
  %203 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 10
  call void @av1_fdct32_sse4_1(<2 x i64>* %203, <2 x i64>* %203, i32 %194, i32 16) #8
  %204 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 11
  call void @av1_fdct32_sse4_1(<2 x i64>* %204, <2 x i64>* %204, i32 %194, i32 16) #8
  call void @av1_fdct32_sse4_1(<2 x i64>* %16, <2 x i64>* %16, i32 %194, i32 16) #8
  %205 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 13
  call void @av1_fdct32_sse4_1(<2 x i64>* %205, <2 x i64>* %205, i32 %194, i32 16) #8
  %206 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 14
  call void @av1_fdct32_sse4_1(<2 x i64>* %206, <2 x i64>* %206, i32 %194, i32 16) #8
  %207 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 15
  call void @av1_fdct32_sse4_1(<2 x i64>* %207, <2 x i64>* %207, i32 %194, i32 16) #8
  %208 = getelementptr inbounds i8, i8* %8, i64 1
  br label %271

209:                                              ; preds = %271, %212
  %210 = phi i64 [ %213, %212 ], [ 0, %271 ]
  %211 = shl nsw i64 %210, 5
  br label %230

212:                                              ; preds = %230
  %213 = add nuw nsw i64 %210, 1
  %214 = icmp eq i64 %213, 16
  br i1 %214, label %215, label %209

215:                                              ; preds = %212
  call void @av1_fdct64_sse4_1(<2 x i64>* %193, <2 x i64>* nonnull %195, i8 signext %10, i32 8, i32 8) #8
  %216 = getelementptr inbounds i32, i32* %1, i64 4
  %217 = bitcast i32* %216 to <2 x i64>*
  call void @av1_fdct64_sse4_1(<2 x i64>* %217, <2 x i64>* %196, i8 signext %10, i32 8, i32 8) #8
  %218 = getelementptr inbounds i32, i32* %1, i64 8
  %219 = bitcast i32* %218 to <2 x i64>*
  call void @av1_fdct64_sse4_1(<2 x i64>* %219, <2 x i64>* %197, i8 signext %10, i32 8, i32 8) #8
  %220 = getelementptr inbounds i32, i32* %1, i64 12
  %221 = bitcast i32* %220 to <2 x i64>*
  call void @av1_fdct64_sse4_1(<2 x i64>* %221, <2 x i64>* %198, i8 signext %10, i32 8, i32 8) #8
  %222 = getelementptr inbounds i32, i32* %1, i64 16
  %223 = bitcast i32* %222 to <2 x i64>*
  call void @av1_fdct64_sse4_1(<2 x i64>* %223, <2 x i64>* %12, i8 signext %10, i32 8, i32 8) #8
  %224 = getelementptr inbounds i32, i32* %1, i64 20
  %225 = bitcast i32* %224 to <2 x i64>*
  call void @av1_fdct64_sse4_1(<2 x i64>* %225, <2 x i64>* %199, i8 signext %10, i32 8, i32 8) #8
  %226 = getelementptr inbounds i32, i32* %1, i64 24
  %227 = bitcast i32* %226 to <2 x i64>*
  call void @av1_fdct64_sse4_1(<2 x i64>* %227, <2 x i64>* %200, i8 signext %10, i32 8, i32 8) #8
  %228 = getelementptr inbounds i32, i32* %1, i64 28
  %229 = bitcast i32* %228 to <2 x i64>*
  call void @av1_fdct64_sse4_1(<2 x i64>* %229, <2 x i64>* %201, i8 signext %10, i32 8, i32 8) #8
  br label %603

230:                                              ; preds = %230, %209
  %231 = phi i64 [ 0, %209 ], [ %269, %230 ]
  %232 = shl nsw i64 %231, 6
  %233 = add nuw nsw i64 %232, %210
  %234 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %233
  %235 = bitcast <2 x i64>* %234 to <4 x i32>*
  %236 = load <4 x i32>, <4 x i32>* %235, align 16
  %237 = add nuw nsw i64 %233, 16
  %238 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %237
  %239 = bitcast <2 x i64>* %238 to <4 x i32>*
  %240 = load <4 x i32>, <4 x i32>* %239, align 16
  %241 = shufflevector <4 x i32> %236, <4 x i32> %240, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %242 = bitcast <4 x i32> %241 to <2 x i64>
  %243 = shufflevector <4 x i32> %236, <4 x i32> %240, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %244 = bitcast <4 x i32> %243 to <2 x i64>
  %245 = add nuw nsw i64 %233, 32
  %246 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %245
  %247 = bitcast <2 x i64>* %246 to <4 x i32>*
  %248 = load <4 x i32>, <4 x i32>* %247, align 16
  %249 = add nuw nsw i64 %233, 48
  %250 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %249
  %251 = bitcast <2 x i64>* %250 to <4 x i32>*
  %252 = load <4 x i32>, <4 x i32>* %251, align 16
  %253 = shufflevector <4 x i32> %248, <4 x i32> %252, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %254 = bitcast <4 x i32> %253 to <2 x i64>
  %255 = shufflevector <4 x i32> %248, <4 x i32> %252, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %256 = bitcast <4 x i32> %255 to <2 x i64>
  %257 = shufflevector <2 x i64> %242, <2 x i64> %254, <2 x i32> <i32 0, i32 2>
  %258 = add nuw nsw i64 %231, %211
  %259 = getelementptr inbounds <2 x i64>, <2 x i64>* %193, i64 %258
  store <2 x i64> %257, <2 x i64>* %259, align 16
  %260 = shufflevector <2 x i64> %242, <2 x i64> %254, <2 x i32> <i32 1, i32 3>
  %261 = add nuw nsw i64 %258, 8
  %262 = getelementptr inbounds <2 x i64>, <2 x i64>* %193, i64 %261
  store <2 x i64> %260, <2 x i64>* %262, align 16
  %263 = shufflevector <2 x i64> %244, <2 x i64> %256, <2 x i32> <i32 0, i32 2>
  %264 = add nuw nsw i64 %258, 16
  %265 = getelementptr inbounds <2 x i64>, <2 x i64>* %193, i64 %264
  store <2 x i64> %263, <2 x i64>* %265, align 16
  %266 = shufflevector <2 x i64> %244, <2 x i64> %256, <2 x i32> <i32 1, i32 3>
  %267 = add nuw nsw i64 %258, 24
  %268 = getelementptr inbounds <2 x i64>, <2 x i64>* %193, i64 %267
  store <2 x i64> %266, <2 x i64>* %268, align 16
  %269 = add nuw nsw i64 %231, 1
  %270 = icmp eq i64 %269, 8
  br i1 %270, label %212, label %230

271:                                              ; preds = %271, %192
  %272 = phi i64 [ 0, %192 ], [ %601, %271 ]
  %273 = shl nsw i64 %272, 6
  %274 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %273
  %275 = load i8, i8* %208, align 1
  %276 = sext i8 %275 to i32
  %277 = sub nsw i32 0, %276
  %278 = xor i32 %276, -1
  %279 = shl i32 1, %278
  %280 = insertelement <4 x i32> undef, i32 %279, i32 0
  %281 = shufflevector <4 x i32> %280, <4 x i32> undef, <4 x i32> zeroinitializer
  %282 = bitcast <2 x i64>* %274 to <4 x i32>*
  %283 = load <4 x i32>, <4 x i32>* %282, align 16
  %284 = add <4 x i32> %281, %283
  %285 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 1
  %286 = bitcast <2 x i64>* %285 to <4 x i32>*
  %287 = load <4 x i32>, <4 x i32>* %286, align 16
  %288 = add <4 x i32> %281, %287
  %289 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 2
  %290 = bitcast <2 x i64>* %289 to <4 x i32>*
  %291 = load <4 x i32>, <4 x i32>* %290, align 16
  %292 = add <4 x i32> %281, %291
  %293 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 3
  %294 = bitcast <2 x i64>* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 16
  %296 = add <4 x i32> %295, %281
  %297 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 4
  %298 = bitcast <2 x i64>* %297 to <4 x i32>*
  %299 = load <4 x i32>, <4 x i32>* %298, align 16
  %300 = add <4 x i32> %299, %281
  %301 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 5
  %302 = bitcast <2 x i64>* %301 to <4 x i32>*
  %303 = load <4 x i32>, <4 x i32>* %302, align 16
  %304 = add <4 x i32> %303, %281
  %305 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 6
  %306 = bitcast <2 x i64>* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 16
  %308 = add <4 x i32> %307, %281
  %309 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 7
  %310 = bitcast <2 x i64>* %309 to <4 x i32>*
  %311 = load <4 x i32>, <4 x i32>* %310, align 16
  %312 = add <4 x i32> %311, %281
  %313 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 8
  %314 = bitcast <2 x i64>* %313 to <4 x i32>*
  %315 = load <4 x i32>, <4 x i32>* %314, align 16
  %316 = add <4 x i32> %315, %281
  %317 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 9
  %318 = bitcast <2 x i64>* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 16
  %320 = add <4 x i32> %319, %281
  %321 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 10
  %322 = bitcast <2 x i64>* %321 to <4 x i32>*
  %323 = load <4 x i32>, <4 x i32>* %322, align 16
  %324 = add <4 x i32> %323, %281
  %325 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 11
  %326 = bitcast <2 x i64>* %325 to <4 x i32>*
  %327 = load <4 x i32>, <4 x i32>* %326, align 16
  %328 = add <4 x i32> %327, %281
  %329 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 12
  %330 = bitcast <2 x i64>* %329 to <4 x i32>*
  %331 = load <4 x i32>, <4 x i32>* %330, align 16
  %332 = add <4 x i32> %331, %281
  %333 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 13
  %334 = bitcast <2 x i64>* %333 to <4 x i32>*
  %335 = load <4 x i32>, <4 x i32>* %334, align 16
  %336 = add <4 x i32> %335, %281
  %337 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 14
  %338 = bitcast <2 x i64>* %337 to <4 x i32>*
  %339 = load <4 x i32>, <4 x i32>* %338, align 16
  %340 = add <4 x i32> %339, %281
  %341 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 15
  %342 = bitcast <2 x i64>* %341 to <4 x i32>*
  %343 = load <4 x i32>, <4 x i32>* %342, align 16
  %344 = add <4 x i32> %343, %281
  %345 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %284, i32 %277) #8
  store <4 x i32> %345, <4 x i32>* %282, align 16
  %346 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %288, i32 %277) #8
  store <4 x i32> %346, <4 x i32>* %286, align 16
  %347 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %292, i32 %277) #8
  store <4 x i32> %347, <4 x i32>* %290, align 16
  %348 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %296, i32 %277) #8
  store <4 x i32> %348, <4 x i32>* %294, align 16
  %349 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %300, i32 %277) #8
  store <4 x i32> %349, <4 x i32>* %298, align 16
  %350 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %304, i32 %277) #8
  store <4 x i32> %350, <4 x i32>* %302, align 16
  %351 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %308, i32 %277) #8
  store <4 x i32> %351, <4 x i32>* %306, align 16
  %352 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %312, i32 %277) #8
  store <4 x i32> %352, <4 x i32>* %310, align 16
  %353 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %316, i32 %277) #8
  store <4 x i32> %353, <4 x i32>* %314, align 16
  %354 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %320, i32 %277) #8
  store <4 x i32> %354, <4 x i32>* %318, align 16
  %355 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %324, i32 %277) #8
  store <4 x i32> %355, <4 x i32>* %322, align 16
  %356 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %328, i32 %277) #8
  store <4 x i32> %356, <4 x i32>* %326, align 16
  %357 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %332, i32 %277) #8
  store <4 x i32> %357, <4 x i32>* %330, align 16
  %358 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %336, i32 %277) #8
  store <4 x i32> %358, <4 x i32>* %334, align 16
  %359 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %340, i32 %277) #8
  store <4 x i32> %359, <4 x i32>* %338, align 16
  %360 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %344, i32 %277) #8
  store <4 x i32> %360, <4 x i32>* %342, align 16
  %361 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 16
  %362 = bitcast <2 x i64>* %361 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 16
  %364 = add <4 x i32> %363, %281
  %365 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 17
  %366 = bitcast <2 x i64>* %365 to <4 x i32>*
  %367 = load <4 x i32>, <4 x i32>* %366, align 16
  %368 = add <4 x i32> %367, %281
  %369 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 18
  %370 = bitcast <2 x i64>* %369 to <4 x i32>*
  %371 = load <4 x i32>, <4 x i32>* %370, align 16
  %372 = add <4 x i32> %371, %281
  %373 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 19
  %374 = bitcast <2 x i64>* %373 to <4 x i32>*
  %375 = load <4 x i32>, <4 x i32>* %374, align 16
  %376 = add <4 x i32> %375, %281
  %377 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 20
  %378 = bitcast <2 x i64>* %377 to <4 x i32>*
  %379 = load <4 x i32>, <4 x i32>* %378, align 16
  %380 = add <4 x i32> %379, %281
  %381 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 21
  %382 = bitcast <2 x i64>* %381 to <4 x i32>*
  %383 = load <4 x i32>, <4 x i32>* %382, align 16
  %384 = add <4 x i32> %383, %281
  %385 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 22
  %386 = bitcast <2 x i64>* %385 to <4 x i32>*
  %387 = load <4 x i32>, <4 x i32>* %386, align 16
  %388 = add <4 x i32> %387, %281
  %389 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 23
  %390 = bitcast <2 x i64>* %389 to <4 x i32>*
  %391 = load <4 x i32>, <4 x i32>* %390, align 16
  %392 = add <4 x i32> %391, %281
  %393 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 24
  %394 = bitcast <2 x i64>* %393 to <4 x i32>*
  %395 = load <4 x i32>, <4 x i32>* %394, align 16
  %396 = add <4 x i32> %395, %281
  %397 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 25
  %398 = bitcast <2 x i64>* %397 to <4 x i32>*
  %399 = load <4 x i32>, <4 x i32>* %398, align 16
  %400 = add <4 x i32> %399, %281
  %401 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 26
  %402 = bitcast <2 x i64>* %401 to <4 x i32>*
  %403 = load <4 x i32>, <4 x i32>* %402, align 16
  %404 = add <4 x i32> %403, %281
  %405 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 27
  %406 = bitcast <2 x i64>* %405 to <4 x i32>*
  %407 = load <4 x i32>, <4 x i32>* %406, align 16
  %408 = add <4 x i32> %407, %281
  %409 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 28
  %410 = bitcast <2 x i64>* %409 to <4 x i32>*
  %411 = load <4 x i32>, <4 x i32>* %410, align 16
  %412 = add <4 x i32> %411, %281
  %413 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 29
  %414 = bitcast <2 x i64>* %413 to <4 x i32>*
  %415 = load <4 x i32>, <4 x i32>* %414, align 16
  %416 = add <4 x i32> %415, %281
  %417 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 30
  %418 = bitcast <2 x i64>* %417 to <4 x i32>*
  %419 = load <4 x i32>, <4 x i32>* %418, align 16
  %420 = add <4 x i32> %419, %281
  %421 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 31
  %422 = bitcast <2 x i64>* %421 to <4 x i32>*
  %423 = load <4 x i32>, <4 x i32>* %422, align 16
  %424 = add <4 x i32> %423, %281
  %425 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %364, i32 %277) #8
  store <4 x i32> %425, <4 x i32>* %362, align 16
  %426 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %368, i32 %277) #8
  store <4 x i32> %426, <4 x i32>* %366, align 16
  %427 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %372, i32 %277) #8
  store <4 x i32> %427, <4 x i32>* %370, align 16
  %428 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %376, i32 %277) #8
  store <4 x i32> %428, <4 x i32>* %374, align 16
  %429 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %380, i32 %277) #8
  store <4 x i32> %429, <4 x i32>* %378, align 16
  %430 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %384, i32 %277) #8
  store <4 x i32> %430, <4 x i32>* %382, align 16
  %431 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %388, i32 %277) #8
  store <4 x i32> %431, <4 x i32>* %386, align 16
  %432 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %392, i32 %277) #8
  store <4 x i32> %432, <4 x i32>* %390, align 16
  %433 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %396, i32 %277) #8
  store <4 x i32> %433, <4 x i32>* %394, align 16
  %434 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %400, i32 %277) #8
  store <4 x i32> %434, <4 x i32>* %398, align 16
  %435 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %404, i32 %277) #8
  store <4 x i32> %435, <4 x i32>* %402, align 16
  %436 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %408, i32 %277) #8
  store <4 x i32> %436, <4 x i32>* %406, align 16
  %437 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %412, i32 %277) #8
  store <4 x i32> %437, <4 x i32>* %410, align 16
  %438 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %416, i32 %277) #8
  store <4 x i32> %438, <4 x i32>* %414, align 16
  %439 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %420, i32 %277) #8
  store <4 x i32> %439, <4 x i32>* %418, align 16
  %440 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %424, i32 %277) #8
  store <4 x i32> %440, <4 x i32>* %422, align 16
  %441 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 32
  %442 = bitcast <2 x i64>* %441 to <4 x i32>*
  %443 = load <4 x i32>, <4 x i32>* %442, align 16
  %444 = add <4 x i32> %443, %281
  %445 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 33
  %446 = bitcast <2 x i64>* %445 to <4 x i32>*
  %447 = load <4 x i32>, <4 x i32>* %446, align 16
  %448 = add <4 x i32> %447, %281
  %449 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 34
  %450 = bitcast <2 x i64>* %449 to <4 x i32>*
  %451 = load <4 x i32>, <4 x i32>* %450, align 16
  %452 = add <4 x i32> %451, %281
  %453 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 35
  %454 = bitcast <2 x i64>* %453 to <4 x i32>*
  %455 = load <4 x i32>, <4 x i32>* %454, align 16
  %456 = add <4 x i32> %455, %281
  %457 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 36
  %458 = bitcast <2 x i64>* %457 to <4 x i32>*
  %459 = load <4 x i32>, <4 x i32>* %458, align 16
  %460 = add <4 x i32> %459, %281
  %461 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 37
  %462 = bitcast <2 x i64>* %461 to <4 x i32>*
  %463 = load <4 x i32>, <4 x i32>* %462, align 16
  %464 = add <4 x i32> %463, %281
  %465 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 38
  %466 = bitcast <2 x i64>* %465 to <4 x i32>*
  %467 = load <4 x i32>, <4 x i32>* %466, align 16
  %468 = add <4 x i32> %467, %281
  %469 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 39
  %470 = bitcast <2 x i64>* %469 to <4 x i32>*
  %471 = load <4 x i32>, <4 x i32>* %470, align 16
  %472 = add <4 x i32> %471, %281
  %473 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 40
  %474 = bitcast <2 x i64>* %473 to <4 x i32>*
  %475 = load <4 x i32>, <4 x i32>* %474, align 16
  %476 = add <4 x i32> %475, %281
  %477 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 41
  %478 = bitcast <2 x i64>* %477 to <4 x i32>*
  %479 = load <4 x i32>, <4 x i32>* %478, align 16
  %480 = add <4 x i32> %479, %281
  %481 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 42
  %482 = bitcast <2 x i64>* %481 to <4 x i32>*
  %483 = load <4 x i32>, <4 x i32>* %482, align 16
  %484 = add <4 x i32> %483, %281
  %485 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 43
  %486 = bitcast <2 x i64>* %485 to <4 x i32>*
  %487 = load <4 x i32>, <4 x i32>* %486, align 16
  %488 = add <4 x i32> %487, %281
  %489 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 44
  %490 = bitcast <2 x i64>* %489 to <4 x i32>*
  %491 = load <4 x i32>, <4 x i32>* %490, align 16
  %492 = add <4 x i32> %491, %281
  %493 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 45
  %494 = bitcast <2 x i64>* %493 to <4 x i32>*
  %495 = load <4 x i32>, <4 x i32>* %494, align 16
  %496 = add <4 x i32> %495, %281
  %497 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 46
  %498 = bitcast <2 x i64>* %497 to <4 x i32>*
  %499 = load <4 x i32>, <4 x i32>* %498, align 16
  %500 = add <4 x i32> %499, %281
  %501 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 47
  %502 = bitcast <2 x i64>* %501 to <4 x i32>*
  %503 = load <4 x i32>, <4 x i32>* %502, align 16
  %504 = add <4 x i32> %503, %281
  %505 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %444, i32 %277) #8
  store <4 x i32> %505, <4 x i32>* %442, align 16
  %506 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %448, i32 %277) #8
  store <4 x i32> %506, <4 x i32>* %446, align 16
  %507 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %452, i32 %277) #8
  store <4 x i32> %507, <4 x i32>* %450, align 16
  %508 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %456, i32 %277) #8
  store <4 x i32> %508, <4 x i32>* %454, align 16
  %509 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %460, i32 %277) #8
  store <4 x i32> %509, <4 x i32>* %458, align 16
  %510 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %464, i32 %277) #8
  store <4 x i32> %510, <4 x i32>* %462, align 16
  %511 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %468, i32 %277) #8
  store <4 x i32> %511, <4 x i32>* %466, align 16
  %512 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %472, i32 %277) #8
  store <4 x i32> %512, <4 x i32>* %470, align 16
  %513 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %476, i32 %277) #8
  store <4 x i32> %513, <4 x i32>* %474, align 16
  %514 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %480, i32 %277) #8
  store <4 x i32> %514, <4 x i32>* %478, align 16
  %515 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %484, i32 %277) #8
  store <4 x i32> %515, <4 x i32>* %482, align 16
  %516 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %488, i32 %277) #8
  store <4 x i32> %516, <4 x i32>* %486, align 16
  %517 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %492, i32 %277) #8
  store <4 x i32> %517, <4 x i32>* %490, align 16
  %518 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %496, i32 %277) #8
  store <4 x i32> %518, <4 x i32>* %494, align 16
  %519 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %500, i32 %277) #8
  store <4 x i32> %519, <4 x i32>* %498, align 16
  %520 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %504, i32 %277) #8
  store <4 x i32> %520, <4 x i32>* %502, align 16
  %521 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 48
  %522 = bitcast <2 x i64>* %521 to <4 x i32>*
  %523 = load <4 x i32>, <4 x i32>* %522, align 16
  %524 = add <4 x i32> %523, %281
  %525 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 49
  %526 = bitcast <2 x i64>* %525 to <4 x i32>*
  %527 = load <4 x i32>, <4 x i32>* %526, align 16
  %528 = add <4 x i32> %527, %281
  %529 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 50
  %530 = bitcast <2 x i64>* %529 to <4 x i32>*
  %531 = load <4 x i32>, <4 x i32>* %530, align 16
  %532 = add <4 x i32> %531, %281
  %533 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 51
  %534 = bitcast <2 x i64>* %533 to <4 x i32>*
  %535 = load <4 x i32>, <4 x i32>* %534, align 16
  %536 = add <4 x i32> %535, %281
  %537 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 52
  %538 = bitcast <2 x i64>* %537 to <4 x i32>*
  %539 = load <4 x i32>, <4 x i32>* %538, align 16
  %540 = add <4 x i32> %539, %281
  %541 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 53
  %542 = bitcast <2 x i64>* %541 to <4 x i32>*
  %543 = load <4 x i32>, <4 x i32>* %542, align 16
  %544 = add <4 x i32> %543, %281
  %545 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 54
  %546 = bitcast <2 x i64>* %545 to <4 x i32>*
  %547 = load <4 x i32>, <4 x i32>* %546, align 16
  %548 = add <4 x i32> %547, %281
  %549 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 55
  %550 = bitcast <2 x i64>* %549 to <4 x i32>*
  %551 = load <4 x i32>, <4 x i32>* %550, align 16
  %552 = add <4 x i32> %551, %281
  %553 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 56
  %554 = bitcast <2 x i64>* %553 to <4 x i32>*
  %555 = load <4 x i32>, <4 x i32>* %554, align 16
  %556 = add <4 x i32> %555, %281
  %557 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 57
  %558 = bitcast <2 x i64>* %557 to <4 x i32>*
  %559 = load <4 x i32>, <4 x i32>* %558, align 16
  %560 = add <4 x i32> %559, %281
  %561 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 58
  %562 = bitcast <2 x i64>* %561 to <4 x i32>*
  %563 = load <4 x i32>, <4 x i32>* %562, align 16
  %564 = add <4 x i32> %563, %281
  %565 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 59
  %566 = bitcast <2 x i64>* %565 to <4 x i32>*
  %567 = load <4 x i32>, <4 x i32>* %566, align 16
  %568 = add <4 x i32> %567, %281
  %569 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 60
  %570 = bitcast <2 x i64>* %569 to <4 x i32>*
  %571 = load <4 x i32>, <4 x i32>* %570, align 16
  %572 = add <4 x i32> %571, %281
  %573 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 61
  %574 = bitcast <2 x i64>* %573 to <4 x i32>*
  %575 = load <4 x i32>, <4 x i32>* %574, align 16
  %576 = add <4 x i32> %575, %281
  %577 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 62
  %578 = bitcast <2 x i64>* %577 to <4 x i32>*
  %579 = load <4 x i32>, <4 x i32>* %578, align 16
  %580 = add <4 x i32> %579, %281
  %581 = getelementptr inbounds <2 x i64>, <2 x i64>* %274, i64 63
  %582 = bitcast <2 x i64>* %581 to <4 x i32>*
  %583 = load <4 x i32>, <4 x i32>* %582, align 16
  %584 = add <4 x i32> %583, %281
  %585 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %524, i32 %277) #8
  store <4 x i32> %585, <4 x i32>* %522, align 16
  %586 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %528, i32 %277) #8
  store <4 x i32> %586, <4 x i32>* %526, align 16
  %587 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %532, i32 %277) #8
  store <4 x i32> %587, <4 x i32>* %530, align 16
  %588 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %536, i32 %277) #8
  store <4 x i32> %588, <4 x i32>* %534, align 16
  %589 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %540, i32 %277) #8
  store <4 x i32> %589, <4 x i32>* %538, align 16
  %590 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %544, i32 %277) #8
  store <4 x i32> %590, <4 x i32>* %542, align 16
  %591 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %548, i32 %277) #8
  store <4 x i32> %591, <4 x i32>* %546, align 16
  %592 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %552, i32 %277) #8
  store <4 x i32> %592, <4 x i32>* %550, align 16
  %593 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %556, i32 %277) #8
  store <4 x i32> %593, <4 x i32>* %554, align 16
  %594 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %560, i32 %277) #8
  store <4 x i32> %594, <4 x i32>* %558, align 16
  %595 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %564, i32 %277) #8
  store <4 x i32> %595, <4 x i32>* %562, align 16
  %596 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %568, i32 %277) #8
  store <4 x i32> %596, <4 x i32>* %566, align 16
  %597 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %572, i32 %277) #8
  store <4 x i32> %597, <4 x i32>* %570, align 16
  %598 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %576, i32 %277) #8
  store <4 x i32> %598, <4 x i32>* %574, align 16
  %599 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %580, i32 %277) #8
  store <4 x i32> %599, <4 x i32>* %578, align 16
  %600 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %584, i32 %277) #8
  store <4 x i32> %600, <4 x i32>* %582, align 16
  %601 = add nuw nsw i64 %272, 1
  %602 = icmp eq i64 %601, 8
  br i1 %602, label %209, label %271

603:                                              ; preds = %606, %215
  %604 = phi i64 [ %607, %606 ], [ 0, %215 ]
  %605 = shl nsw i64 %604, 5
  br label %609

606:                                              ; preds = %609
  %607 = add nuw nsw i64 %604, 1
  %608 = icmp eq i64 %607, 8
  br i1 %608, label %650, label %603

609:                                              ; preds = %609, %603
  %610 = phi i64 [ 0, %603 ], [ %648, %609 ]
  %611 = shl nsw i64 %610, 5
  %612 = add nuw nsw i64 %611, %604
  %613 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %612
  %614 = bitcast <2 x i64>* %613 to <4 x i32>*
  %615 = load <4 x i32>, <4 x i32>* %614, align 16
  %616 = add nuw nsw i64 %612, 8
  %617 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %616
  %618 = bitcast <2 x i64>* %617 to <4 x i32>*
  %619 = load <4 x i32>, <4 x i32>* %618, align 16
  %620 = shufflevector <4 x i32> %615, <4 x i32> %619, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %621 = bitcast <4 x i32> %620 to <2 x i64>
  %622 = shufflevector <4 x i32> %615, <4 x i32> %619, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %623 = bitcast <4 x i32> %622 to <2 x i64>
  %624 = add nuw nsw i64 %612, 16
  %625 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %624
  %626 = bitcast <2 x i64>* %625 to <4 x i32>*
  %627 = load <4 x i32>, <4 x i32>* %626, align 16
  %628 = add nuw nsw i64 %612, 24
  %629 = getelementptr inbounds [512 x <2 x i64>], [512 x <2 x i64>]* %6, i64 0, i64 %628
  %630 = bitcast <2 x i64>* %629 to <4 x i32>*
  %631 = load <4 x i32>, <4 x i32>* %630, align 16
  %632 = shufflevector <4 x i32> %627, <4 x i32> %631, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %633 = bitcast <4 x i32> %632 to <2 x i64>
  %634 = shufflevector <4 x i32> %627, <4 x i32> %631, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %635 = bitcast <4 x i32> %634 to <2 x i64>
  %636 = shufflevector <2 x i64> %621, <2 x i64> %633, <2 x i32> <i32 0, i32 2>
  %637 = add nuw nsw i64 %610, %605
  %638 = getelementptr inbounds <2 x i64>, <2 x i64>* %193, i64 %637
  store <2 x i64> %636, <2 x i64>* %638, align 16
  %639 = shufflevector <2 x i64> %621, <2 x i64> %633, <2 x i32> <i32 1, i32 3>
  %640 = add nuw nsw i64 %637, 8
  %641 = getelementptr inbounds <2 x i64>, <2 x i64>* %193, i64 %640
  store <2 x i64> %639, <2 x i64>* %641, align 16
  %642 = shufflevector <2 x i64> %623, <2 x i64> %635, <2 x i32> <i32 0, i32 2>
  %643 = add nuw nsw i64 %637, 16
  %644 = getelementptr inbounds <2 x i64>, <2 x i64>* %193, i64 %643
  store <2 x i64> %642, <2 x i64>* %644, align 16
  %645 = shufflevector <2 x i64> %623, <2 x i64> %635, <2 x i32> <i32 1, i32 3>
  %646 = add nuw nsw i64 %637, 24
  %647 = getelementptr inbounds <2 x i64>, <2 x i64>* %193, i64 %646
  store <2 x i64> %645, <2 x i64>* %647, align 16
  %648 = add nuw nsw i64 %610, 1
  %649 = icmp eq i64 %648, 8
  br i1 %649, label %606, label %609

650:                                              ; preds = %606
  %651 = getelementptr inbounds i8, i8* %8, i64 2
  %652 = load i8, i8* %651, align 1
  %653 = sext i8 %652 to i32
  %654 = sub nsw i32 0, %653
  %655 = icmp slt i8 %652, 0
  br i1 %655, label %656, label %682

656:                                              ; preds = %650
  %657 = xor i32 %653, -1
  %658 = shl i32 1, %657
  %659 = insertelement <4 x i32> undef, i32 %658, i32 0
  %660 = shufflevector <4 x i32> %659, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %661

661:                                              ; preds = %661, %656
  %662 = phi i64 [ 0, %656 ], [ %680, %661 ]
  %663 = getelementptr inbounds <2 x i64>, <2 x i64>* %193, i64 %662
  %664 = bitcast <2 x i64>* %663 to <4 x i32>*
  %665 = load <4 x i32>, <4 x i32>* %664, align 16
  %666 = add <4 x i32> %665, %660
  %667 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %666, i32 %654) #8
  %668 = mul <4 x i32> %667, <i32 5793, i32 5793, i32 5793, i32 5793>
  %669 = add <4 x i32> %668, <i32 2048, i32 2048, i32 2048, i32 2048>
  %670 = ashr <4 x i32> %669, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %670, <4 x i32>* %664, align 16
  %671 = or i64 %662, 1
  %672 = getelementptr inbounds <2 x i64>, <2 x i64>* %193, i64 %671
  %673 = bitcast <2 x i64>* %672 to <4 x i32>*
  %674 = load <4 x i32>, <4 x i32>* %673, align 16
  %675 = add <4 x i32> %674, %660
  %676 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %675, i32 %654) #8
  %677 = mul <4 x i32> %676, <i32 5793, i32 5793, i32 5793, i32 5793>
  %678 = add <4 x i32> %677, <i32 2048, i32 2048, i32 2048, i32 2048>
  %679 = ashr <4 x i32> %678, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %679, <4 x i32>* %673, align 16
  %680 = add nuw nsw i64 %662, 2
  %681 = icmp eq i64 %680, 256
  br i1 %681, label %701, label %661

682:                                              ; preds = %650, %682
  %683 = phi i64 [ %699, %682 ], [ 0, %650 ]
  %684 = getelementptr inbounds <2 x i64>, <2 x i64>* %193, i64 %683
  %685 = bitcast <2 x i64>* %684 to <4 x i32>*
  %686 = load <4 x i32>, <4 x i32>* %685, align 16
  %687 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %686, i32 %653) #8
  %688 = mul <4 x i32> %687, <i32 5793, i32 5793, i32 5793, i32 5793>
  %689 = add <4 x i32> %688, <i32 2048, i32 2048, i32 2048, i32 2048>
  %690 = ashr <4 x i32> %689, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %690, <4 x i32>* %685, align 16
  %691 = or i64 %683, 1
  %692 = getelementptr inbounds <2 x i64>, <2 x i64>* %193, i64 %691
  %693 = bitcast <2 x i64>* %692 to <4 x i32>*
  %694 = load <4 x i32>, <4 x i32>* %693, align 16
  %695 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %694, i32 %653) #8
  %696 = mul <4 x i32> %695, <i32 5793, i32 5793, i32 5793, i32 5793>
  %697 = add <4 x i32> %696, <i32 2048, i32 2048, i32 2048, i32 2048>
  %698 = ashr <4 x i32> %697, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %698, <4 x i32>* %693, align 16
  %699 = add nuw nsw i64 %683, 2
  %700 = icmp eq i64 %699, 256
  br i1 %700, label %701, label %682

701:                                              ; preds = %682, %661
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %7) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_32x16_sse4_1(i16* nocapture readonly, i32*, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [128 x <2 x i64>], align 16
  %7 = bitcast [128 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 2048, i1 false)
  %8 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 10), align 16
  %9 = zext i8 %3 to i64
  %10 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @row_highbd_txfm8x32_arr, i64 0, i64 %9
  %11 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %10, align 8
  %12 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @col_highbd_txfm8x32_arr, i64 0, i64 %9
  %13 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %12, align 8
  %14 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 3, i64 2), align 1
  %15 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 3, i64 2), align 1
  %16 = sext i8 %15 to i32
  %17 = load i8, i8* %8, align 1
  %18 = sext i8 %17 to i32
  %19 = sext i32 %2 to i64
  br label %20

20:                                               ; preds = %20, %5
  %21 = phi i64 [ 0, %5 ], [ %104, %20 ]
  %22 = mul nsw i64 %21, %19
  %23 = getelementptr inbounds i16, i16* %0, i64 %22
  %24 = shl i64 %21, 3
  %25 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %24
  %26 = bitcast i16* %23 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = insertelement <2 x i64> undef, i64 %27, i32 0
  %29 = getelementptr inbounds i16, i16* %23, i64 4
  %30 = bitcast i16* %29 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = getelementptr inbounds <2 x i64>, <2 x i64>* %25, i64 1
  %34 = getelementptr inbounds i16, i16* %23, i64 8
  %35 = bitcast i16* %34 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = insertelement <2 x i64> undef, i64 %36, i32 0
  %38 = getelementptr inbounds <2 x i64>, <2 x i64>* %25, i64 2
  %39 = getelementptr inbounds i16, i16* %23, i64 12
  %40 = bitcast i16* %39 to i64*
  %41 = load i64, i64* %40, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = bitcast <2 x i64> %28 to <8 x i16>
  %44 = bitcast <2 x i64> %32 to <8 x i16>
  %45 = bitcast <2 x i64> %37 to <8 x i16>
  %46 = getelementptr inbounds <2 x i64>, <2 x i64>* %25, i64 3
  %47 = bitcast <2 x i64> %42 to <8 x i16>
  %48 = shufflevector <8 x i16> %43, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %49 = sext <4 x i16> %48 to <4 x i32>
  %50 = bitcast <2 x i64>* %25 to <4 x i32>*
  %51 = shufflevector <8 x i16> %44, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %52 = sext <4 x i16> %51 to <4 x i32>
  %53 = bitcast <2 x i64>* %33 to <4 x i32>*
  %54 = shufflevector <8 x i16> %45, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %55 = sext <4 x i16> %54 to <4 x i32>
  %56 = bitcast <2 x i64>* %38 to <4 x i32>*
  %57 = shufflevector <8 x i16> %47, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %58 = sext <4 x i16> %57 to <4 x i32>
  %59 = bitcast <2 x i64>* %46 to <4 x i32>*
  %60 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %49, i32 %18) #8
  store <4 x i32> %60, <4 x i32>* %50, align 16
  %61 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %52, i32 %18) #8
  store <4 x i32> %61, <4 x i32>* %53, align 16
  %62 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %55, i32 %18) #8
  store <4 x i32> %62, <4 x i32>* %56, align 16
  %63 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %58, i32 %18) #8
  store <4 x i32> %63, <4 x i32>* %59, align 16
  %64 = getelementptr inbounds i16, i16* %23, i64 16
  %65 = getelementptr inbounds <2 x i64>, <2 x i64>* %25, i64 4
  %66 = bitcast i16* %64 to i64*
  %67 = load i64, i64* %66, align 1
  %68 = insertelement <2 x i64> undef, i64 %67, i32 0
  %69 = getelementptr inbounds i16, i16* %64, i64 4
  %70 = bitcast i16* %69 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = getelementptr inbounds <2 x i64>, <2 x i64>* %25, i64 5
  %74 = getelementptr inbounds i16, i16* %64, i64 8
  %75 = bitcast i16* %74 to i64*
  %76 = load i64, i64* %75, align 1
  %77 = insertelement <2 x i64> undef, i64 %76, i32 0
  %78 = getelementptr inbounds <2 x i64>, <2 x i64>* %25, i64 6
  %79 = getelementptr inbounds i16, i16* %64, i64 12
  %80 = bitcast i16* %79 to i64*
  %81 = load i64, i64* %80, align 1
  %82 = insertelement <2 x i64> undef, i64 %81, i32 0
  %83 = bitcast <2 x i64> %68 to <8 x i16>
  %84 = bitcast <2 x i64> %72 to <8 x i16>
  %85 = bitcast <2 x i64> %77 to <8 x i16>
  %86 = getelementptr inbounds <2 x i64>, <2 x i64>* %25, i64 7
  %87 = bitcast <2 x i64> %82 to <8 x i16>
  %88 = shufflevector <8 x i16> %83, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %89 = sext <4 x i16> %88 to <4 x i32>
  %90 = bitcast <2 x i64>* %65 to <4 x i32>*
  %91 = shufflevector <8 x i16> %84, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %92 = sext <4 x i16> %91 to <4 x i32>
  %93 = bitcast <2 x i64>* %73 to <4 x i32>*
  %94 = shufflevector <8 x i16> %85, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %95 = sext <4 x i16> %94 to <4 x i32>
  %96 = bitcast <2 x i64>* %78 to <4 x i32>*
  %97 = shufflevector <8 x i16> %87, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %98 = sext <4 x i16> %97 to <4 x i32>
  %99 = bitcast <2 x i64>* %86 to <4 x i32>*
  %100 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %89, i32 %18) #8
  store <4 x i32> %100, <4 x i32>* %90, align 16
  %101 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %92, i32 %18) #8
  store <4 x i32> %101, <4 x i32>* %93, align 16
  %102 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %95, i32 %18) #8
  store <4 x i32> %102, <4 x i32>* %96, align 16
  %103 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %98, i32 %18) #8
  store <4 x i32> %103, <4 x i32>* %99, align 16
  %104 = add nuw nsw i64 %21, 1
  %105 = icmp eq i64 %104, 16
  br i1 %105, label %106, label %20

106:                                              ; preds = %20
  %107 = bitcast i32* %1 to <2 x i64>*
  %108 = sext i8 %14 to i32
  %109 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 0
  call void %11(<2 x i64>* nonnull %109, <2 x i64>* nonnull %109, i32 %108, i32 8) #8
  %110 = getelementptr inbounds i8, i8* %8, i64 1
  %111 = load i8, i8* %110, align 1
  %112 = sext i8 %111 to i32
  %113 = sub nsw i32 0, %112
  %114 = xor i32 %112, -1
  %115 = shl i32 1, %114
  %116 = insertelement <4 x i32> undef, i32 %115, i32 0
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> zeroinitializer
  %118 = bitcast [128 x <2 x i64>]* %6 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 16
  %120 = add <4 x i32> %117, %119
  %121 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 1
  %122 = bitcast <2 x i64>* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 16
  %124 = add <4 x i32> %117, %123
  %125 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 2
  %126 = bitcast <2 x i64>* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 16
  %128 = add <4 x i32> %117, %127
  %129 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 3
  %130 = bitcast <2 x i64>* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 16
  %132 = add <4 x i32> %131, %117
  %133 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 4
  %134 = bitcast <2 x i64>* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 16
  %136 = add <4 x i32> %135, %117
  %137 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 5
  %138 = bitcast <2 x i64>* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 16
  %140 = add <4 x i32> %139, %117
  %141 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 6
  %142 = bitcast <2 x i64>* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 16
  %144 = add <4 x i32> %143, %117
  %145 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 7
  %146 = bitcast <2 x i64>* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 16
  %148 = add <4 x i32> %147, %117
  %149 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 8
  %150 = bitcast <2 x i64>* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 16
  %152 = add <4 x i32> %151, %117
  %153 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 9
  %154 = bitcast <2 x i64>* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 16
  %156 = add <4 x i32> %155, %117
  %157 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 10
  %158 = bitcast <2 x i64>* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 16
  %160 = add <4 x i32> %159, %117
  %161 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 11
  %162 = bitcast <2 x i64>* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 16
  %164 = add <4 x i32> %163, %117
  %165 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 12
  %166 = bitcast <2 x i64>* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 16
  %168 = add <4 x i32> %167, %117
  %169 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 13
  %170 = bitcast <2 x i64>* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 16
  %172 = add <4 x i32> %171, %117
  %173 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 14
  %174 = bitcast <2 x i64>* %173 to <4 x i32>*
  %175 = load <4 x i32>, <4 x i32>* %174, align 16
  %176 = add <4 x i32> %175, %117
  %177 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 15
  %178 = bitcast <2 x i64>* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 16
  %180 = add <4 x i32> %179, %117
  %181 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %120, i32 %113) #8
  store <4 x i32> %181, <4 x i32>* %118, align 16
  %182 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %124, i32 %113) #8
  store <4 x i32> %182, <4 x i32>* %122, align 16
  %183 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %128, i32 %113) #8
  store <4 x i32> %183, <4 x i32>* %126, align 16
  %184 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %132, i32 %113) #8
  store <4 x i32> %184, <4 x i32>* %130, align 16
  %185 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %136, i32 %113) #8
  store <4 x i32> %185, <4 x i32>* %134, align 16
  %186 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %140, i32 %113) #8
  store <4 x i32> %186, <4 x i32>* %138, align 16
  %187 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %144, i32 %113) #8
  store <4 x i32> %187, <4 x i32>* %142, align 16
  %188 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %148, i32 %113) #8
  store <4 x i32> %188, <4 x i32>* %146, align 16
  %189 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %152, i32 %113) #8
  store <4 x i32> %189, <4 x i32>* %150, align 16
  %190 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %156, i32 %113) #8
  store <4 x i32> %190, <4 x i32>* %154, align 16
  %191 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %160, i32 %113) #8
  store <4 x i32> %191, <4 x i32>* %158, align 16
  %192 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %164, i32 %113) #8
  store <4 x i32> %192, <4 x i32>* %162, align 16
  %193 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %168, i32 %113) #8
  store <4 x i32> %193, <4 x i32>* %166, align 16
  %194 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %172, i32 %113) #8
  store <4 x i32> %194, <4 x i32>* %170, align 16
  %195 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %176, i32 %113) #8
  store <4 x i32> %195, <4 x i32>* %174, align 16
  %196 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %180, i32 %113) #8
  store <4 x i32> %196, <4 x i32>* %178, align 16
  %197 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 16
  %198 = bitcast <2 x i64>* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 16
  %200 = add <4 x i32> %199, %117
  %201 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 17
  %202 = bitcast <2 x i64>* %201 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 16
  %204 = add <4 x i32> %203, %117
  %205 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 18
  %206 = bitcast <2 x i64>* %205 to <4 x i32>*
  %207 = load <4 x i32>, <4 x i32>* %206, align 16
  %208 = add <4 x i32> %207, %117
  %209 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 19
  %210 = bitcast <2 x i64>* %209 to <4 x i32>*
  %211 = load <4 x i32>, <4 x i32>* %210, align 16
  %212 = add <4 x i32> %211, %117
  %213 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 20
  %214 = bitcast <2 x i64>* %213 to <4 x i32>*
  %215 = load <4 x i32>, <4 x i32>* %214, align 16
  %216 = add <4 x i32> %215, %117
  %217 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 21
  %218 = bitcast <2 x i64>* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 16
  %220 = add <4 x i32> %219, %117
  %221 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 22
  %222 = bitcast <2 x i64>* %221 to <4 x i32>*
  %223 = load <4 x i32>, <4 x i32>* %222, align 16
  %224 = add <4 x i32> %223, %117
  %225 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 23
  %226 = bitcast <2 x i64>* %225 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 16
  %228 = add <4 x i32> %227, %117
  %229 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 24
  %230 = bitcast <2 x i64>* %229 to <4 x i32>*
  %231 = load <4 x i32>, <4 x i32>* %230, align 16
  %232 = add <4 x i32> %231, %117
  %233 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 25
  %234 = bitcast <2 x i64>* %233 to <4 x i32>*
  %235 = load <4 x i32>, <4 x i32>* %234, align 16
  %236 = add <4 x i32> %235, %117
  %237 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 26
  %238 = bitcast <2 x i64>* %237 to <4 x i32>*
  %239 = load <4 x i32>, <4 x i32>* %238, align 16
  %240 = add <4 x i32> %239, %117
  %241 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 27
  %242 = bitcast <2 x i64>* %241 to <4 x i32>*
  %243 = load <4 x i32>, <4 x i32>* %242, align 16
  %244 = add <4 x i32> %243, %117
  %245 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 28
  %246 = bitcast <2 x i64>* %245 to <4 x i32>*
  %247 = load <4 x i32>, <4 x i32>* %246, align 16
  %248 = add <4 x i32> %247, %117
  %249 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 29
  %250 = bitcast <2 x i64>* %249 to <4 x i32>*
  %251 = load <4 x i32>, <4 x i32>* %250, align 16
  %252 = add <4 x i32> %251, %117
  %253 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 30
  %254 = bitcast <2 x i64>* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 16
  %256 = add <4 x i32> %255, %117
  %257 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 31
  %258 = bitcast <2 x i64>* %257 to <4 x i32>*
  %259 = load <4 x i32>, <4 x i32>* %258, align 16
  %260 = add <4 x i32> %259, %117
  %261 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %200, i32 %113) #8
  store <4 x i32> %261, <4 x i32>* %198, align 16
  %262 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %204, i32 %113) #8
  store <4 x i32> %262, <4 x i32>* %202, align 16
  %263 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %208, i32 %113) #8
  store <4 x i32> %263, <4 x i32>* %206, align 16
  %264 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %212, i32 %113) #8
  store <4 x i32> %264, <4 x i32>* %210, align 16
  %265 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %216, i32 %113) #8
  store <4 x i32> %265, <4 x i32>* %214, align 16
  %266 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %220, i32 %113) #8
  store <4 x i32> %266, <4 x i32>* %218, align 16
  %267 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %224, i32 %113) #8
  store <4 x i32> %267, <4 x i32>* %222, align 16
  %268 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %228, i32 %113) #8
  store <4 x i32> %268, <4 x i32>* %226, align 16
  %269 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %232, i32 %113) #8
  store <4 x i32> %269, <4 x i32>* %230, align 16
  %270 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %236, i32 %113) #8
  store <4 x i32> %270, <4 x i32>* %234, align 16
  %271 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %240, i32 %113) #8
  store <4 x i32> %271, <4 x i32>* %238, align 16
  %272 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %244, i32 %113) #8
  store <4 x i32> %272, <4 x i32>* %242, align 16
  %273 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %248, i32 %113) #8
  store <4 x i32> %273, <4 x i32>* %246, align 16
  %274 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %252, i32 %113) #8
  store <4 x i32> %274, <4 x i32>* %250, align 16
  %275 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %256, i32 %113) #8
  store <4 x i32> %275, <4 x i32>* %254, align 16
  %276 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %260, i32 %113) #8
  store <4 x i32> %276, <4 x i32>* %258, align 16
  %277 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 32
  %278 = bitcast <2 x i64>* %277 to <4 x i32>*
  %279 = load <4 x i32>, <4 x i32>* %278, align 16
  %280 = add <4 x i32> %279, %117
  %281 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 33
  %282 = bitcast <2 x i64>* %281 to <4 x i32>*
  %283 = load <4 x i32>, <4 x i32>* %282, align 16
  %284 = add <4 x i32> %283, %117
  %285 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 34
  %286 = bitcast <2 x i64>* %285 to <4 x i32>*
  %287 = load <4 x i32>, <4 x i32>* %286, align 16
  %288 = add <4 x i32> %287, %117
  %289 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 35
  %290 = bitcast <2 x i64>* %289 to <4 x i32>*
  %291 = load <4 x i32>, <4 x i32>* %290, align 16
  %292 = add <4 x i32> %291, %117
  %293 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 36
  %294 = bitcast <2 x i64>* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 16
  %296 = add <4 x i32> %295, %117
  %297 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 37
  %298 = bitcast <2 x i64>* %297 to <4 x i32>*
  %299 = load <4 x i32>, <4 x i32>* %298, align 16
  %300 = add <4 x i32> %299, %117
  %301 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 38
  %302 = bitcast <2 x i64>* %301 to <4 x i32>*
  %303 = load <4 x i32>, <4 x i32>* %302, align 16
  %304 = add <4 x i32> %303, %117
  %305 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 39
  %306 = bitcast <2 x i64>* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 16
  %308 = add <4 x i32> %307, %117
  %309 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 40
  %310 = bitcast <2 x i64>* %309 to <4 x i32>*
  %311 = load <4 x i32>, <4 x i32>* %310, align 16
  %312 = add <4 x i32> %311, %117
  %313 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 41
  %314 = bitcast <2 x i64>* %313 to <4 x i32>*
  %315 = load <4 x i32>, <4 x i32>* %314, align 16
  %316 = add <4 x i32> %315, %117
  %317 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 42
  %318 = bitcast <2 x i64>* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 16
  %320 = add <4 x i32> %319, %117
  %321 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 43
  %322 = bitcast <2 x i64>* %321 to <4 x i32>*
  %323 = load <4 x i32>, <4 x i32>* %322, align 16
  %324 = add <4 x i32> %323, %117
  %325 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 44
  %326 = bitcast <2 x i64>* %325 to <4 x i32>*
  %327 = load <4 x i32>, <4 x i32>* %326, align 16
  %328 = add <4 x i32> %327, %117
  %329 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 45
  %330 = bitcast <2 x i64>* %329 to <4 x i32>*
  %331 = load <4 x i32>, <4 x i32>* %330, align 16
  %332 = add <4 x i32> %331, %117
  %333 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 46
  %334 = bitcast <2 x i64>* %333 to <4 x i32>*
  %335 = load <4 x i32>, <4 x i32>* %334, align 16
  %336 = add <4 x i32> %335, %117
  %337 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 47
  %338 = bitcast <2 x i64>* %337 to <4 x i32>*
  %339 = load <4 x i32>, <4 x i32>* %338, align 16
  %340 = add <4 x i32> %339, %117
  %341 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %280, i32 %113) #8
  store <4 x i32> %341, <4 x i32>* %278, align 16
  %342 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %284, i32 %113) #8
  store <4 x i32> %342, <4 x i32>* %282, align 16
  %343 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %288, i32 %113) #8
  store <4 x i32> %343, <4 x i32>* %286, align 16
  %344 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %292, i32 %113) #8
  store <4 x i32> %344, <4 x i32>* %290, align 16
  %345 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %296, i32 %113) #8
  store <4 x i32> %345, <4 x i32>* %294, align 16
  %346 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %300, i32 %113) #8
  store <4 x i32> %346, <4 x i32>* %298, align 16
  %347 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %304, i32 %113) #8
  store <4 x i32> %347, <4 x i32>* %302, align 16
  %348 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %308, i32 %113) #8
  store <4 x i32> %348, <4 x i32>* %306, align 16
  %349 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %312, i32 %113) #8
  store <4 x i32> %349, <4 x i32>* %310, align 16
  %350 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %316, i32 %113) #8
  store <4 x i32> %350, <4 x i32>* %314, align 16
  %351 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %320, i32 %113) #8
  store <4 x i32> %351, <4 x i32>* %318, align 16
  %352 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %324, i32 %113) #8
  store <4 x i32> %352, <4 x i32>* %322, align 16
  %353 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %328, i32 %113) #8
  store <4 x i32> %353, <4 x i32>* %326, align 16
  %354 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %332, i32 %113) #8
  store <4 x i32> %354, <4 x i32>* %330, align 16
  %355 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %336, i32 %113) #8
  store <4 x i32> %355, <4 x i32>* %334, align 16
  %356 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %340, i32 %113) #8
  store <4 x i32> %356, <4 x i32>* %338, align 16
  %357 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 48
  %358 = bitcast <2 x i64>* %357 to <4 x i32>*
  %359 = load <4 x i32>, <4 x i32>* %358, align 16
  %360 = add <4 x i32> %359, %117
  %361 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 49
  %362 = bitcast <2 x i64>* %361 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 16
  %364 = add <4 x i32> %363, %117
  %365 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 50
  %366 = bitcast <2 x i64>* %365 to <4 x i32>*
  %367 = load <4 x i32>, <4 x i32>* %366, align 16
  %368 = add <4 x i32> %367, %117
  %369 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 51
  %370 = bitcast <2 x i64>* %369 to <4 x i32>*
  %371 = load <4 x i32>, <4 x i32>* %370, align 16
  %372 = add <4 x i32> %371, %117
  %373 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 52
  %374 = bitcast <2 x i64>* %373 to <4 x i32>*
  %375 = load <4 x i32>, <4 x i32>* %374, align 16
  %376 = add <4 x i32> %375, %117
  %377 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 53
  %378 = bitcast <2 x i64>* %377 to <4 x i32>*
  %379 = load <4 x i32>, <4 x i32>* %378, align 16
  %380 = add <4 x i32> %379, %117
  %381 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 54
  %382 = bitcast <2 x i64>* %381 to <4 x i32>*
  %383 = load <4 x i32>, <4 x i32>* %382, align 16
  %384 = add <4 x i32> %383, %117
  %385 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 55
  %386 = bitcast <2 x i64>* %385 to <4 x i32>*
  %387 = load <4 x i32>, <4 x i32>* %386, align 16
  %388 = add <4 x i32> %387, %117
  %389 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 56
  %390 = bitcast <2 x i64>* %389 to <4 x i32>*
  %391 = load <4 x i32>, <4 x i32>* %390, align 16
  %392 = add <4 x i32> %391, %117
  %393 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 57
  %394 = bitcast <2 x i64>* %393 to <4 x i32>*
  %395 = load <4 x i32>, <4 x i32>* %394, align 16
  %396 = add <4 x i32> %395, %117
  %397 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 58
  %398 = bitcast <2 x i64>* %397 to <4 x i32>*
  %399 = load <4 x i32>, <4 x i32>* %398, align 16
  %400 = add <4 x i32> %399, %117
  %401 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 59
  %402 = bitcast <2 x i64>* %401 to <4 x i32>*
  %403 = load <4 x i32>, <4 x i32>* %402, align 16
  %404 = add <4 x i32> %403, %117
  %405 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 60
  %406 = bitcast <2 x i64>* %405 to <4 x i32>*
  %407 = load <4 x i32>, <4 x i32>* %406, align 16
  %408 = add <4 x i32> %407, %117
  %409 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 61
  %410 = bitcast <2 x i64>* %409 to <4 x i32>*
  %411 = load <4 x i32>, <4 x i32>* %410, align 16
  %412 = add <4 x i32> %411, %117
  %413 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 62
  %414 = bitcast <2 x i64>* %413 to <4 x i32>*
  %415 = load <4 x i32>, <4 x i32>* %414, align 16
  %416 = add <4 x i32> %415, %117
  %417 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 63
  %418 = bitcast <2 x i64>* %417 to <4 x i32>*
  %419 = load <4 x i32>, <4 x i32>* %418, align 16
  %420 = add <4 x i32> %419, %117
  %421 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %360, i32 %113) #8
  store <4 x i32> %421, <4 x i32>* %358, align 16
  %422 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %364, i32 %113) #8
  store <4 x i32> %422, <4 x i32>* %362, align 16
  %423 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %368, i32 %113) #8
  store <4 x i32> %423, <4 x i32>* %366, align 16
  %424 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %372, i32 %113) #8
  store <4 x i32> %424, <4 x i32>* %370, align 16
  %425 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %376, i32 %113) #8
  store <4 x i32> %425, <4 x i32>* %374, align 16
  %426 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %380, i32 %113) #8
  store <4 x i32> %426, <4 x i32>* %378, align 16
  %427 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %384, i32 %113) #8
  store <4 x i32> %427, <4 x i32>* %382, align 16
  %428 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %388, i32 %113) #8
  store <4 x i32> %428, <4 x i32>* %386, align 16
  %429 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %392, i32 %113) #8
  store <4 x i32> %429, <4 x i32>* %390, align 16
  %430 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %396, i32 %113) #8
  store <4 x i32> %430, <4 x i32>* %394, align 16
  %431 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %400, i32 %113) #8
  store <4 x i32> %431, <4 x i32>* %398, align 16
  %432 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %404, i32 %113) #8
  store <4 x i32> %432, <4 x i32>* %402, align 16
  %433 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %408, i32 %113) #8
  store <4 x i32> %433, <4 x i32>* %406, align 16
  %434 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %412, i32 %113) #8
  store <4 x i32> %434, <4 x i32>* %410, align 16
  %435 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %416, i32 %113) #8
  store <4 x i32> %435, <4 x i32>* %414, align 16
  %436 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %420, i32 %113) #8
  store <4 x i32> %436, <4 x i32>* %418, align 16
  %437 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 64
  %438 = load i8, i8* %110, align 1
  %439 = sext i8 %438 to i32
  %440 = sub nsw i32 0, %439
  %441 = xor i32 %439, -1
  %442 = shl i32 1, %441
  %443 = insertelement <4 x i32> undef, i32 %442, i32 0
  %444 = shufflevector <4 x i32> %443, <4 x i32> undef, <4 x i32> zeroinitializer
  %445 = bitcast <2 x i64>* %437 to <4 x i32>*
  %446 = load <4 x i32>, <4 x i32>* %445, align 16
  %447 = add <4 x i32> %444, %446
  %448 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 65
  %449 = bitcast <2 x i64>* %448 to <4 x i32>*
  %450 = load <4 x i32>, <4 x i32>* %449, align 16
  %451 = add <4 x i32> %444, %450
  %452 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 66
  %453 = bitcast <2 x i64>* %452 to <4 x i32>*
  %454 = load <4 x i32>, <4 x i32>* %453, align 16
  %455 = add <4 x i32> %444, %454
  %456 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 67
  %457 = bitcast <2 x i64>* %456 to <4 x i32>*
  %458 = load <4 x i32>, <4 x i32>* %457, align 16
  %459 = add <4 x i32> %458, %444
  %460 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 68
  %461 = bitcast <2 x i64>* %460 to <4 x i32>*
  %462 = load <4 x i32>, <4 x i32>* %461, align 16
  %463 = add <4 x i32> %462, %444
  %464 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 69
  %465 = bitcast <2 x i64>* %464 to <4 x i32>*
  %466 = load <4 x i32>, <4 x i32>* %465, align 16
  %467 = add <4 x i32> %466, %444
  %468 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 70
  %469 = bitcast <2 x i64>* %468 to <4 x i32>*
  %470 = load <4 x i32>, <4 x i32>* %469, align 16
  %471 = add <4 x i32> %470, %444
  %472 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 71
  %473 = bitcast <2 x i64>* %472 to <4 x i32>*
  %474 = load <4 x i32>, <4 x i32>* %473, align 16
  %475 = add <4 x i32> %474, %444
  %476 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 72
  %477 = bitcast <2 x i64>* %476 to <4 x i32>*
  %478 = load <4 x i32>, <4 x i32>* %477, align 16
  %479 = add <4 x i32> %478, %444
  %480 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 73
  %481 = bitcast <2 x i64>* %480 to <4 x i32>*
  %482 = load <4 x i32>, <4 x i32>* %481, align 16
  %483 = add <4 x i32> %482, %444
  %484 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 74
  %485 = bitcast <2 x i64>* %484 to <4 x i32>*
  %486 = load <4 x i32>, <4 x i32>* %485, align 16
  %487 = add <4 x i32> %486, %444
  %488 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 75
  %489 = bitcast <2 x i64>* %488 to <4 x i32>*
  %490 = load <4 x i32>, <4 x i32>* %489, align 16
  %491 = add <4 x i32> %490, %444
  %492 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 76
  %493 = bitcast <2 x i64>* %492 to <4 x i32>*
  %494 = load <4 x i32>, <4 x i32>* %493, align 16
  %495 = add <4 x i32> %494, %444
  %496 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 77
  %497 = bitcast <2 x i64>* %496 to <4 x i32>*
  %498 = load <4 x i32>, <4 x i32>* %497, align 16
  %499 = add <4 x i32> %498, %444
  %500 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 78
  %501 = bitcast <2 x i64>* %500 to <4 x i32>*
  %502 = load <4 x i32>, <4 x i32>* %501, align 16
  %503 = add <4 x i32> %502, %444
  %504 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 79
  %505 = bitcast <2 x i64>* %504 to <4 x i32>*
  %506 = load <4 x i32>, <4 x i32>* %505, align 16
  %507 = add <4 x i32> %506, %444
  %508 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %447, i32 %440) #8
  store <4 x i32> %508, <4 x i32>* %445, align 16
  %509 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %451, i32 %440) #8
  store <4 x i32> %509, <4 x i32>* %449, align 16
  %510 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %455, i32 %440) #8
  store <4 x i32> %510, <4 x i32>* %453, align 16
  %511 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %459, i32 %440) #8
  store <4 x i32> %511, <4 x i32>* %457, align 16
  %512 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %463, i32 %440) #8
  store <4 x i32> %512, <4 x i32>* %461, align 16
  %513 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %467, i32 %440) #8
  store <4 x i32> %513, <4 x i32>* %465, align 16
  %514 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %471, i32 %440) #8
  store <4 x i32> %514, <4 x i32>* %469, align 16
  %515 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %475, i32 %440) #8
  store <4 x i32> %515, <4 x i32>* %473, align 16
  %516 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %479, i32 %440) #8
  store <4 x i32> %516, <4 x i32>* %477, align 16
  %517 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %483, i32 %440) #8
  store <4 x i32> %517, <4 x i32>* %481, align 16
  %518 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %487, i32 %440) #8
  store <4 x i32> %518, <4 x i32>* %485, align 16
  %519 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %491, i32 %440) #8
  store <4 x i32> %519, <4 x i32>* %489, align 16
  %520 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %495, i32 %440) #8
  store <4 x i32> %520, <4 x i32>* %493, align 16
  %521 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %499, i32 %440) #8
  store <4 x i32> %521, <4 x i32>* %497, align 16
  %522 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %503, i32 %440) #8
  store <4 x i32> %522, <4 x i32>* %501, align 16
  %523 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %507, i32 %440) #8
  store <4 x i32> %523, <4 x i32>* %505, align 16
  %524 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 80
  %525 = bitcast <2 x i64>* %524 to <4 x i32>*
  %526 = load <4 x i32>, <4 x i32>* %525, align 16
  %527 = add <4 x i32> %526, %444
  %528 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 81
  %529 = bitcast <2 x i64>* %528 to <4 x i32>*
  %530 = load <4 x i32>, <4 x i32>* %529, align 16
  %531 = add <4 x i32> %530, %444
  %532 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 82
  %533 = bitcast <2 x i64>* %532 to <4 x i32>*
  %534 = load <4 x i32>, <4 x i32>* %533, align 16
  %535 = add <4 x i32> %534, %444
  %536 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 83
  %537 = bitcast <2 x i64>* %536 to <4 x i32>*
  %538 = load <4 x i32>, <4 x i32>* %537, align 16
  %539 = add <4 x i32> %538, %444
  %540 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 84
  %541 = bitcast <2 x i64>* %540 to <4 x i32>*
  %542 = load <4 x i32>, <4 x i32>* %541, align 16
  %543 = add <4 x i32> %542, %444
  %544 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 85
  %545 = bitcast <2 x i64>* %544 to <4 x i32>*
  %546 = load <4 x i32>, <4 x i32>* %545, align 16
  %547 = add <4 x i32> %546, %444
  %548 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 86
  %549 = bitcast <2 x i64>* %548 to <4 x i32>*
  %550 = load <4 x i32>, <4 x i32>* %549, align 16
  %551 = add <4 x i32> %550, %444
  %552 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 87
  %553 = bitcast <2 x i64>* %552 to <4 x i32>*
  %554 = load <4 x i32>, <4 x i32>* %553, align 16
  %555 = add <4 x i32> %554, %444
  %556 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 88
  %557 = bitcast <2 x i64>* %556 to <4 x i32>*
  %558 = load <4 x i32>, <4 x i32>* %557, align 16
  %559 = add <4 x i32> %558, %444
  %560 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 89
  %561 = bitcast <2 x i64>* %560 to <4 x i32>*
  %562 = load <4 x i32>, <4 x i32>* %561, align 16
  %563 = add <4 x i32> %562, %444
  %564 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 90
  %565 = bitcast <2 x i64>* %564 to <4 x i32>*
  %566 = load <4 x i32>, <4 x i32>* %565, align 16
  %567 = add <4 x i32> %566, %444
  %568 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 91
  %569 = bitcast <2 x i64>* %568 to <4 x i32>*
  %570 = load <4 x i32>, <4 x i32>* %569, align 16
  %571 = add <4 x i32> %570, %444
  %572 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 92
  %573 = bitcast <2 x i64>* %572 to <4 x i32>*
  %574 = load <4 x i32>, <4 x i32>* %573, align 16
  %575 = add <4 x i32> %574, %444
  %576 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 93
  %577 = bitcast <2 x i64>* %576 to <4 x i32>*
  %578 = load <4 x i32>, <4 x i32>* %577, align 16
  %579 = add <4 x i32> %578, %444
  %580 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 94
  %581 = bitcast <2 x i64>* %580 to <4 x i32>*
  %582 = load <4 x i32>, <4 x i32>* %581, align 16
  %583 = add <4 x i32> %582, %444
  %584 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 95
  %585 = bitcast <2 x i64>* %584 to <4 x i32>*
  %586 = load <4 x i32>, <4 x i32>* %585, align 16
  %587 = add <4 x i32> %586, %444
  %588 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %527, i32 %440) #8
  store <4 x i32> %588, <4 x i32>* %525, align 16
  %589 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %531, i32 %440) #8
  store <4 x i32> %589, <4 x i32>* %529, align 16
  %590 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %535, i32 %440) #8
  store <4 x i32> %590, <4 x i32>* %533, align 16
  %591 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %539, i32 %440) #8
  store <4 x i32> %591, <4 x i32>* %537, align 16
  %592 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %543, i32 %440) #8
  store <4 x i32> %592, <4 x i32>* %541, align 16
  %593 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %547, i32 %440) #8
  store <4 x i32> %593, <4 x i32>* %545, align 16
  %594 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %551, i32 %440) #8
  store <4 x i32> %594, <4 x i32>* %549, align 16
  %595 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %555, i32 %440) #8
  store <4 x i32> %595, <4 x i32>* %553, align 16
  %596 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %559, i32 %440) #8
  store <4 x i32> %596, <4 x i32>* %557, align 16
  %597 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %563, i32 %440) #8
  store <4 x i32> %597, <4 x i32>* %561, align 16
  %598 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %567, i32 %440) #8
  store <4 x i32> %598, <4 x i32>* %565, align 16
  %599 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %571, i32 %440) #8
  store <4 x i32> %599, <4 x i32>* %569, align 16
  %600 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %575, i32 %440) #8
  store <4 x i32> %600, <4 x i32>* %573, align 16
  %601 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %579, i32 %440) #8
  store <4 x i32> %601, <4 x i32>* %577, align 16
  %602 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %583, i32 %440) #8
  store <4 x i32> %602, <4 x i32>* %581, align 16
  %603 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %587, i32 %440) #8
  store <4 x i32> %603, <4 x i32>* %585, align 16
  %604 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 96
  %605 = bitcast <2 x i64>* %604 to <4 x i32>*
  %606 = load <4 x i32>, <4 x i32>* %605, align 16
  %607 = add <4 x i32> %606, %444
  %608 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 97
  %609 = bitcast <2 x i64>* %608 to <4 x i32>*
  %610 = load <4 x i32>, <4 x i32>* %609, align 16
  %611 = add <4 x i32> %610, %444
  %612 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 98
  %613 = bitcast <2 x i64>* %612 to <4 x i32>*
  %614 = load <4 x i32>, <4 x i32>* %613, align 16
  %615 = add <4 x i32> %614, %444
  %616 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 99
  %617 = bitcast <2 x i64>* %616 to <4 x i32>*
  %618 = load <4 x i32>, <4 x i32>* %617, align 16
  %619 = add <4 x i32> %618, %444
  %620 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 100
  %621 = bitcast <2 x i64>* %620 to <4 x i32>*
  %622 = load <4 x i32>, <4 x i32>* %621, align 16
  %623 = add <4 x i32> %622, %444
  %624 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 101
  %625 = bitcast <2 x i64>* %624 to <4 x i32>*
  %626 = load <4 x i32>, <4 x i32>* %625, align 16
  %627 = add <4 x i32> %626, %444
  %628 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 102
  %629 = bitcast <2 x i64>* %628 to <4 x i32>*
  %630 = load <4 x i32>, <4 x i32>* %629, align 16
  %631 = add <4 x i32> %630, %444
  %632 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 103
  %633 = bitcast <2 x i64>* %632 to <4 x i32>*
  %634 = load <4 x i32>, <4 x i32>* %633, align 16
  %635 = add <4 x i32> %634, %444
  %636 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 104
  %637 = bitcast <2 x i64>* %636 to <4 x i32>*
  %638 = load <4 x i32>, <4 x i32>* %637, align 16
  %639 = add <4 x i32> %638, %444
  %640 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 105
  %641 = bitcast <2 x i64>* %640 to <4 x i32>*
  %642 = load <4 x i32>, <4 x i32>* %641, align 16
  %643 = add <4 x i32> %642, %444
  %644 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 106
  %645 = bitcast <2 x i64>* %644 to <4 x i32>*
  %646 = load <4 x i32>, <4 x i32>* %645, align 16
  %647 = add <4 x i32> %646, %444
  %648 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 107
  %649 = bitcast <2 x i64>* %648 to <4 x i32>*
  %650 = load <4 x i32>, <4 x i32>* %649, align 16
  %651 = add <4 x i32> %650, %444
  %652 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 108
  %653 = bitcast <2 x i64>* %652 to <4 x i32>*
  %654 = load <4 x i32>, <4 x i32>* %653, align 16
  %655 = add <4 x i32> %654, %444
  %656 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 109
  %657 = bitcast <2 x i64>* %656 to <4 x i32>*
  %658 = load <4 x i32>, <4 x i32>* %657, align 16
  %659 = add <4 x i32> %658, %444
  %660 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 110
  %661 = bitcast <2 x i64>* %660 to <4 x i32>*
  %662 = load <4 x i32>, <4 x i32>* %661, align 16
  %663 = add <4 x i32> %662, %444
  %664 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 111
  %665 = bitcast <2 x i64>* %664 to <4 x i32>*
  %666 = load <4 x i32>, <4 x i32>* %665, align 16
  %667 = add <4 x i32> %666, %444
  %668 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %607, i32 %440) #8
  store <4 x i32> %668, <4 x i32>* %605, align 16
  %669 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %611, i32 %440) #8
  store <4 x i32> %669, <4 x i32>* %609, align 16
  %670 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %615, i32 %440) #8
  store <4 x i32> %670, <4 x i32>* %613, align 16
  %671 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %619, i32 %440) #8
  store <4 x i32> %671, <4 x i32>* %617, align 16
  %672 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %623, i32 %440) #8
  store <4 x i32> %672, <4 x i32>* %621, align 16
  %673 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %627, i32 %440) #8
  store <4 x i32> %673, <4 x i32>* %625, align 16
  %674 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %631, i32 %440) #8
  store <4 x i32> %674, <4 x i32>* %629, align 16
  %675 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %635, i32 %440) #8
  store <4 x i32> %675, <4 x i32>* %633, align 16
  %676 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %639, i32 %440) #8
  store <4 x i32> %676, <4 x i32>* %637, align 16
  %677 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %643, i32 %440) #8
  store <4 x i32> %677, <4 x i32>* %641, align 16
  %678 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %647, i32 %440) #8
  store <4 x i32> %678, <4 x i32>* %645, align 16
  %679 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %651, i32 %440) #8
  store <4 x i32> %679, <4 x i32>* %649, align 16
  %680 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %655, i32 %440) #8
  store <4 x i32> %680, <4 x i32>* %653, align 16
  %681 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %659, i32 %440) #8
  store <4 x i32> %681, <4 x i32>* %657, align 16
  %682 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %663, i32 %440) #8
  store <4 x i32> %682, <4 x i32>* %661, align 16
  %683 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %667, i32 %440) #8
  store <4 x i32> %683, <4 x i32>* %665, align 16
  %684 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 112
  %685 = bitcast <2 x i64>* %684 to <4 x i32>*
  %686 = load <4 x i32>, <4 x i32>* %685, align 16
  %687 = add <4 x i32> %686, %444
  %688 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 113
  %689 = bitcast <2 x i64>* %688 to <4 x i32>*
  %690 = load <4 x i32>, <4 x i32>* %689, align 16
  %691 = add <4 x i32> %690, %444
  %692 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 114
  %693 = bitcast <2 x i64>* %692 to <4 x i32>*
  %694 = load <4 x i32>, <4 x i32>* %693, align 16
  %695 = add <4 x i32> %694, %444
  %696 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 115
  %697 = bitcast <2 x i64>* %696 to <4 x i32>*
  %698 = load <4 x i32>, <4 x i32>* %697, align 16
  %699 = add <4 x i32> %698, %444
  %700 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 116
  %701 = bitcast <2 x i64>* %700 to <4 x i32>*
  %702 = load <4 x i32>, <4 x i32>* %701, align 16
  %703 = add <4 x i32> %702, %444
  %704 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 117
  %705 = bitcast <2 x i64>* %704 to <4 x i32>*
  %706 = load <4 x i32>, <4 x i32>* %705, align 16
  %707 = add <4 x i32> %706, %444
  %708 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 118
  %709 = bitcast <2 x i64>* %708 to <4 x i32>*
  %710 = load <4 x i32>, <4 x i32>* %709, align 16
  %711 = add <4 x i32> %710, %444
  %712 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 119
  %713 = bitcast <2 x i64>* %712 to <4 x i32>*
  %714 = load <4 x i32>, <4 x i32>* %713, align 16
  %715 = add <4 x i32> %714, %444
  %716 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 120
  %717 = bitcast <2 x i64>* %716 to <4 x i32>*
  %718 = load <4 x i32>, <4 x i32>* %717, align 16
  %719 = add <4 x i32> %718, %444
  %720 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 121
  %721 = bitcast <2 x i64>* %720 to <4 x i32>*
  %722 = load <4 x i32>, <4 x i32>* %721, align 16
  %723 = add <4 x i32> %722, %444
  %724 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 122
  %725 = bitcast <2 x i64>* %724 to <4 x i32>*
  %726 = load <4 x i32>, <4 x i32>* %725, align 16
  %727 = add <4 x i32> %726, %444
  %728 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 123
  %729 = bitcast <2 x i64>* %728 to <4 x i32>*
  %730 = load <4 x i32>, <4 x i32>* %729, align 16
  %731 = add <4 x i32> %730, %444
  %732 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 124
  %733 = bitcast <2 x i64>* %732 to <4 x i32>*
  %734 = load <4 x i32>, <4 x i32>* %733, align 16
  %735 = add <4 x i32> %734, %444
  %736 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 125
  %737 = bitcast <2 x i64>* %736 to <4 x i32>*
  %738 = load <4 x i32>, <4 x i32>* %737, align 16
  %739 = add <4 x i32> %738, %444
  %740 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 126
  %741 = bitcast <2 x i64>* %740 to <4 x i32>*
  %742 = load <4 x i32>, <4 x i32>* %741, align 16
  %743 = add <4 x i32> %742, %444
  %744 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 127
  %745 = bitcast <2 x i64>* %744 to <4 x i32>*
  %746 = load <4 x i32>, <4 x i32>* %745, align 16
  %747 = add <4 x i32> %746, %444
  %748 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %687, i32 %440) #8
  store <4 x i32> %748, <4 x i32>* %685, align 16
  %749 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %691, i32 %440) #8
  store <4 x i32> %749, <4 x i32>* %689, align 16
  %750 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %695, i32 %440) #8
  store <4 x i32> %750, <4 x i32>* %693, align 16
  %751 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %699, i32 %440) #8
  store <4 x i32> %751, <4 x i32>* %697, align 16
  %752 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %703, i32 %440) #8
  store <4 x i32> %752, <4 x i32>* %701, align 16
  %753 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %707, i32 %440) #8
  store <4 x i32> %753, <4 x i32>* %705, align 16
  %754 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %711, i32 %440) #8
  store <4 x i32> %754, <4 x i32>* %709, align 16
  %755 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %715, i32 %440) #8
  store <4 x i32> %755, <4 x i32>* %713, align 16
  %756 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %719, i32 %440) #8
  store <4 x i32> %756, <4 x i32>* %717, align 16
  %757 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %723, i32 %440) #8
  store <4 x i32> %757, <4 x i32>* %721, align 16
  %758 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %727, i32 %440) #8
  store <4 x i32> %758, <4 x i32>* %725, align 16
  %759 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %731, i32 %440) #8
  store <4 x i32> %759, <4 x i32>* %729, align 16
  %760 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %735, i32 %440) #8
  store <4 x i32> %760, <4 x i32>* %733, align 16
  %761 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %739, i32 %440) #8
  store <4 x i32> %761, <4 x i32>* %737, align 16
  %762 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %743, i32 %440) #8
  store <4 x i32> %762, <4 x i32>* %741, align 16
  %763 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %747, i32 %440) #8
  store <4 x i32> %763, <4 x i32>* %745, align 16
  br label %764

764:                                              ; preds = %764, %106
  %765 = phi i64 [ 0, %106 ], [ %909, %764 ]
  %766 = shl nsw i64 %765, 4
  %767 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %765
  %768 = bitcast <2 x i64>* %767 to <4 x i32>*
  %769 = load <4 x i32>, <4 x i32>* %768, align 16
  %770 = add nuw nsw i64 %765, 8
  %771 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %770
  %772 = bitcast <2 x i64>* %771 to <4 x i32>*
  %773 = load <4 x i32>, <4 x i32>* %772, align 16
  %774 = shufflevector <4 x i32> %769, <4 x i32> %773, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %775 = bitcast <4 x i32> %774 to <2 x i64>
  %776 = shufflevector <4 x i32> %769, <4 x i32> %773, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %777 = bitcast <4 x i32> %776 to <2 x i64>
  %778 = add nuw nsw i64 %765, 16
  %779 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %778
  %780 = bitcast <2 x i64>* %779 to <4 x i32>*
  %781 = load <4 x i32>, <4 x i32>* %780, align 16
  %782 = add nuw nsw i64 %765, 24
  %783 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %782
  %784 = bitcast <2 x i64>* %783 to <4 x i32>*
  %785 = load <4 x i32>, <4 x i32>* %784, align 16
  %786 = shufflevector <4 x i32> %781, <4 x i32> %785, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %787 = bitcast <4 x i32> %786 to <2 x i64>
  %788 = shufflevector <4 x i32> %781, <4 x i32> %785, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %789 = bitcast <4 x i32> %788 to <2 x i64>
  %790 = shufflevector <2 x i64> %775, <2 x i64> %787, <2 x i32> <i32 0, i32 2>
  %791 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %766
  store <2 x i64> %790, <2 x i64>* %791, align 16
  %792 = shufflevector <2 x i64> %775, <2 x i64> %787, <2 x i32> <i32 1, i32 3>
  %793 = or i64 %766, 4
  %794 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %793
  store <2 x i64> %792, <2 x i64>* %794, align 16
  %795 = shufflevector <2 x i64> %777, <2 x i64> %789, <2 x i32> <i32 0, i32 2>
  %796 = or i64 %766, 8
  %797 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %796
  store <2 x i64> %795, <2 x i64>* %797, align 16
  %798 = shufflevector <2 x i64> %777, <2 x i64> %789, <2 x i32> <i32 1, i32 3>
  %799 = or i64 %766, 12
  %800 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %799
  store <2 x i64> %798, <2 x i64>* %800, align 16
  %801 = add nuw nsw i64 %765, 32
  %802 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %801
  %803 = bitcast <2 x i64>* %802 to <4 x i32>*
  %804 = load <4 x i32>, <4 x i32>* %803, align 16
  %805 = add nuw nsw i64 %765, 40
  %806 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %805
  %807 = bitcast <2 x i64>* %806 to <4 x i32>*
  %808 = load <4 x i32>, <4 x i32>* %807, align 16
  %809 = shufflevector <4 x i32> %804, <4 x i32> %808, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %810 = bitcast <4 x i32> %809 to <2 x i64>
  %811 = shufflevector <4 x i32> %804, <4 x i32> %808, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %812 = bitcast <4 x i32> %811 to <2 x i64>
  %813 = add nuw nsw i64 %765, 48
  %814 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %813
  %815 = bitcast <2 x i64>* %814 to <4 x i32>*
  %816 = load <4 x i32>, <4 x i32>* %815, align 16
  %817 = add nuw nsw i64 %765, 56
  %818 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %817
  %819 = bitcast <2 x i64>* %818 to <4 x i32>*
  %820 = load <4 x i32>, <4 x i32>* %819, align 16
  %821 = shufflevector <4 x i32> %816, <4 x i32> %820, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %822 = bitcast <4 x i32> %821 to <2 x i64>
  %823 = shufflevector <4 x i32> %816, <4 x i32> %820, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %824 = bitcast <4 x i32> %823 to <2 x i64>
  %825 = shufflevector <2 x i64> %810, <2 x i64> %822, <2 x i32> <i32 0, i32 2>
  %826 = or i64 %766, 1
  %827 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %826
  store <2 x i64> %825, <2 x i64>* %827, align 16
  %828 = shufflevector <2 x i64> %810, <2 x i64> %822, <2 x i32> <i32 1, i32 3>
  %829 = or i64 %766, 5
  %830 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %829
  store <2 x i64> %828, <2 x i64>* %830, align 16
  %831 = shufflevector <2 x i64> %812, <2 x i64> %824, <2 x i32> <i32 0, i32 2>
  %832 = or i64 %766, 9
  %833 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %832
  store <2 x i64> %831, <2 x i64>* %833, align 16
  %834 = shufflevector <2 x i64> %812, <2 x i64> %824, <2 x i32> <i32 1, i32 3>
  %835 = or i64 %766, 13
  %836 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %835
  store <2 x i64> %834, <2 x i64>* %836, align 16
  %837 = add nuw nsw i64 %765, 64
  %838 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %837
  %839 = bitcast <2 x i64>* %838 to <4 x i32>*
  %840 = load <4 x i32>, <4 x i32>* %839, align 16
  %841 = add nuw nsw i64 %765, 72
  %842 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %841
  %843 = bitcast <2 x i64>* %842 to <4 x i32>*
  %844 = load <4 x i32>, <4 x i32>* %843, align 16
  %845 = shufflevector <4 x i32> %840, <4 x i32> %844, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %846 = bitcast <4 x i32> %845 to <2 x i64>
  %847 = shufflevector <4 x i32> %840, <4 x i32> %844, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %848 = bitcast <4 x i32> %847 to <2 x i64>
  %849 = add nuw nsw i64 %765, 80
  %850 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %849
  %851 = bitcast <2 x i64>* %850 to <4 x i32>*
  %852 = load <4 x i32>, <4 x i32>* %851, align 16
  %853 = add nuw nsw i64 %765, 88
  %854 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %853
  %855 = bitcast <2 x i64>* %854 to <4 x i32>*
  %856 = load <4 x i32>, <4 x i32>* %855, align 16
  %857 = shufflevector <4 x i32> %852, <4 x i32> %856, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %858 = bitcast <4 x i32> %857 to <2 x i64>
  %859 = shufflevector <4 x i32> %852, <4 x i32> %856, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %860 = bitcast <4 x i32> %859 to <2 x i64>
  %861 = shufflevector <2 x i64> %846, <2 x i64> %858, <2 x i32> <i32 0, i32 2>
  %862 = or i64 %766, 2
  %863 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %862
  store <2 x i64> %861, <2 x i64>* %863, align 16
  %864 = shufflevector <2 x i64> %846, <2 x i64> %858, <2 x i32> <i32 1, i32 3>
  %865 = or i64 %766, 6
  %866 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %865
  store <2 x i64> %864, <2 x i64>* %866, align 16
  %867 = shufflevector <2 x i64> %848, <2 x i64> %860, <2 x i32> <i32 0, i32 2>
  %868 = or i64 %766, 10
  %869 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %868
  store <2 x i64> %867, <2 x i64>* %869, align 16
  %870 = shufflevector <2 x i64> %848, <2 x i64> %860, <2 x i32> <i32 1, i32 3>
  %871 = or i64 %766, 14
  %872 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %871
  store <2 x i64> %870, <2 x i64>* %872, align 16
  %873 = add nuw nsw i64 %765, 96
  %874 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %873
  %875 = bitcast <2 x i64>* %874 to <4 x i32>*
  %876 = load <4 x i32>, <4 x i32>* %875, align 16
  %877 = add nuw nsw i64 %765, 104
  %878 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %877
  %879 = bitcast <2 x i64>* %878 to <4 x i32>*
  %880 = load <4 x i32>, <4 x i32>* %879, align 16
  %881 = shufflevector <4 x i32> %876, <4 x i32> %880, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %882 = bitcast <4 x i32> %881 to <2 x i64>
  %883 = shufflevector <4 x i32> %876, <4 x i32> %880, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %884 = bitcast <4 x i32> %883 to <2 x i64>
  %885 = add nuw nsw i64 %765, 112
  %886 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %885
  %887 = bitcast <2 x i64>* %886 to <4 x i32>*
  %888 = load <4 x i32>, <4 x i32>* %887, align 16
  %889 = add nuw nsw i64 %765, 120
  %890 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %889
  %891 = bitcast <2 x i64>* %890 to <4 x i32>*
  %892 = load <4 x i32>, <4 x i32>* %891, align 16
  %893 = shufflevector <4 x i32> %888, <4 x i32> %892, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %894 = bitcast <4 x i32> %893 to <2 x i64>
  %895 = shufflevector <4 x i32> %888, <4 x i32> %892, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %896 = bitcast <4 x i32> %895 to <2 x i64>
  %897 = shufflevector <2 x i64> %882, <2 x i64> %894, <2 x i32> <i32 0, i32 2>
  %898 = or i64 %766, 3
  %899 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %898
  store <2 x i64> %897, <2 x i64>* %899, align 16
  %900 = shufflevector <2 x i64> %882, <2 x i64> %894, <2 x i32> <i32 1, i32 3>
  %901 = or i64 %766, 7
  %902 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %901
  store <2 x i64> %900, <2 x i64>* %902, align 16
  %903 = shufflevector <2 x i64> %884, <2 x i64> %896, <2 x i32> <i32 0, i32 2>
  %904 = or i64 %766, 11
  %905 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %904
  store <2 x i64> %903, <2 x i64>* %905, align 16
  %906 = shufflevector <2 x i64> %884, <2 x i64> %896, <2 x i32> <i32 1, i32 3>
  %907 = or i64 %766, 15
  %908 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %907
  store <2 x i64> %906, <2 x i64>* %908, align 16
  %909 = add nuw nsw i64 %765, 1
  %910 = icmp eq i64 %909, 8
  br i1 %910, label %911, label %764

911:                                              ; preds = %764
  call void %13(<2 x i64>* %107, <2 x i64>* nonnull %109, i32 %16, i32 4) #8
  %912 = getelementptr inbounds i32, i32* %1, i64 4
  %913 = bitcast i32* %912 to <2 x i64>*
  call void %13(<2 x i64>* %913, <2 x i64>* %121, i32 %16, i32 4) #8
  %914 = getelementptr inbounds i32, i32* %1, i64 8
  %915 = bitcast i32* %914 to <2 x i64>*
  call void %13(<2 x i64>* %915, <2 x i64>* %125, i32 %16, i32 4) #8
  %916 = getelementptr inbounds i32, i32* %1, i64 12
  %917 = bitcast i32* %916 to <2 x i64>*
  call void %13(<2 x i64>* %917, <2 x i64>* %129, i32 %16, i32 4) #8
  br label %918

918:                                              ; preds = %921, %911
  %919 = phi i64 [ %922, %921 ], [ 0, %911 ]
  %920 = shl nsw i64 %919, 5
  br label %924

921:                                              ; preds = %924
  %922 = add nuw nsw i64 %919, 1
  %923 = icmp eq i64 %922, 4
  br i1 %923, label %965, label %918

924:                                              ; preds = %924, %918
  %925 = phi i64 [ 0, %918 ], [ %963, %924 ]
  %926 = shl nsw i64 %925, 4
  %927 = add nuw nsw i64 %926, %919
  %928 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %927
  %929 = bitcast <2 x i64>* %928 to <4 x i32>*
  %930 = load <4 x i32>, <4 x i32>* %929, align 16
  %931 = add nuw nsw i64 %927, 4
  %932 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %931
  %933 = bitcast <2 x i64>* %932 to <4 x i32>*
  %934 = load <4 x i32>, <4 x i32>* %933, align 16
  %935 = shufflevector <4 x i32> %930, <4 x i32> %934, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %936 = bitcast <4 x i32> %935 to <2 x i64>
  %937 = shufflevector <4 x i32> %930, <4 x i32> %934, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %938 = bitcast <4 x i32> %937 to <2 x i64>
  %939 = add nuw nsw i64 %927, 8
  %940 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %939
  %941 = bitcast <2 x i64>* %940 to <4 x i32>*
  %942 = load <4 x i32>, <4 x i32>* %941, align 16
  %943 = add nuw nsw i64 %927, 12
  %944 = getelementptr inbounds [128 x <2 x i64>], [128 x <2 x i64>]* %6, i64 0, i64 %943
  %945 = bitcast <2 x i64>* %944 to <4 x i32>*
  %946 = load <4 x i32>, <4 x i32>* %945, align 16
  %947 = shufflevector <4 x i32> %942, <4 x i32> %946, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %948 = bitcast <4 x i32> %947 to <2 x i64>
  %949 = shufflevector <4 x i32> %942, <4 x i32> %946, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %950 = bitcast <4 x i32> %949 to <2 x i64>
  %951 = shufflevector <2 x i64> %936, <2 x i64> %948, <2 x i32> <i32 0, i32 2>
  %952 = add nuw nsw i64 %925, %920
  %953 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %952
  store <2 x i64> %951, <2 x i64>* %953, align 16
  %954 = shufflevector <2 x i64> %936, <2 x i64> %948, <2 x i32> <i32 1, i32 3>
  %955 = add nuw nsw i64 %952, 8
  %956 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %955
  store <2 x i64> %954, <2 x i64>* %956, align 16
  %957 = shufflevector <2 x i64> %938, <2 x i64> %950, <2 x i32> <i32 0, i32 2>
  %958 = add nuw nsw i64 %952, 16
  %959 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %958
  store <2 x i64> %957, <2 x i64>* %959, align 16
  %960 = shufflevector <2 x i64> %938, <2 x i64> %950, <2 x i32> <i32 1, i32 3>
  %961 = add nuw nsw i64 %952, 24
  %962 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %961
  store <2 x i64> %960, <2 x i64>* %962, align 16
  %963 = add nuw nsw i64 %925, 1
  %964 = icmp eq i64 %963, 8
  br i1 %964, label %921, label %924

965:                                              ; preds = %921
  %966 = getelementptr inbounds i8, i8* %8, i64 2
  %967 = load i8, i8* %966, align 1
  %968 = sext i8 %967 to i32
  %969 = sub nsw i32 0, %968
  %970 = icmp slt i8 %967, 0
  br i1 %970, label %971, label %997

971:                                              ; preds = %965
  %972 = xor i32 %968, -1
  %973 = shl i32 1, %972
  %974 = insertelement <4 x i32> undef, i32 %973, i32 0
  %975 = shufflevector <4 x i32> %974, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %976

976:                                              ; preds = %976, %971
  %977 = phi i64 [ 0, %971 ], [ %995, %976 ]
  %978 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %977
  %979 = bitcast <2 x i64>* %978 to <4 x i32>*
  %980 = load <4 x i32>, <4 x i32>* %979, align 16
  %981 = add <4 x i32> %980, %975
  %982 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %981, i32 %969) #8
  %983 = mul <4 x i32> %982, <i32 5793, i32 5793, i32 5793, i32 5793>
  %984 = add <4 x i32> %983, <i32 2048, i32 2048, i32 2048, i32 2048>
  %985 = ashr <4 x i32> %984, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %985, <4 x i32>* %979, align 16
  %986 = or i64 %977, 1
  %987 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %986
  %988 = bitcast <2 x i64>* %987 to <4 x i32>*
  %989 = load <4 x i32>, <4 x i32>* %988, align 16
  %990 = add <4 x i32> %989, %975
  %991 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %990, i32 %969) #8
  %992 = mul <4 x i32> %991, <i32 5793, i32 5793, i32 5793, i32 5793>
  %993 = add <4 x i32> %992, <i32 2048, i32 2048, i32 2048, i32 2048>
  %994 = ashr <4 x i32> %993, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %994, <4 x i32>* %988, align 16
  %995 = add nuw nsw i64 %977, 2
  %996 = icmp eq i64 %995, 128
  br i1 %996, label %1016, label %976

997:                                              ; preds = %965, %997
  %998 = phi i64 [ %1014, %997 ], [ 0, %965 ]
  %999 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %998
  %1000 = bitcast <2 x i64>* %999 to <4 x i32>*
  %1001 = load <4 x i32>, <4 x i32>* %1000, align 16
  %1002 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1001, i32 %968) #8
  %1003 = mul <4 x i32> %1002, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1004 = add <4 x i32> %1003, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1005 = ashr <4 x i32> %1004, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %1005, <4 x i32>* %1000, align 16
  %1006 = or i64 %998, 1
  %1007 = getelementptr inbounds <2 x i64>, <2 x i64>* %107, i64 %1006
  %1008 = bitcast <2 x i64>* %1007 to <4 x i32>*
  %1009 = load <4 x i32>, <4 x i32>* %1008, align 16
  %1010 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %1009, i32 %968) #8
  %1011 = mul <4 x i32> %1010, <i32 5793, i32 5793, i32 5793, i32 5793>
  %1012 = add <4 x i32> %1011, <i32 2048, i32 2048, i32 2048, i32 2048>
  %1013 = ashr <4 x i32> %1012, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %1013, <4 x i32>* %1008, align 16
  %1014 = add nuw nsw i64 %998, 2
  %1015 = icmp eq i64 %1014, 128
  br i1 %1015, label %1016, label %997

1016:                                             ; preds = %997, %976
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %7) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_4x8_sse4_1(i16* nocapture readonly, i32*, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [8 x <2 x i64>], align 16
  %7 = bitcast [8 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 128, i1 false)
  %8 = bitcast i32* %1 to <2 x i64>*
  %9 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 5), align 8
  %10 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 0, i64 1), align 1
  %11 = sext i8 %10 to i32
  %12 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 0, i64 1), align 1
  %13 = sext i8 %12 to i32
  %14 = zext i8 %3 to i64
  %15 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @col_highbd_txfm4x8_arr, i64 0, i64 %14
  %16 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %15, align 8
  %17 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @row_highbd_txfm4x4_arr, i64 0, i64 %14
  %18 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %17, align 8
  switch i8 %3, label %21 [
    i8 6, label %20
    i8 15, label %19
    i8 7, label %19
    i8 5, label %19
    i8 14, label %45
    i8 8, label %45
    i8 4, label %45
  ]

19:                                               ; preds = %5, %5, %5
  br label %21

20:                                               ; preds = %5
  br label %45

21:                                               ; preds = %19, %5
  %22 = phi i32 [ 0, %5 ], [ 1, %19 ]
  %23 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 0
  %24 = load i8, i8* %9, align 1
  %25 = shl nsw i32 %2, 2
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i16, i16* %0, i64 %26
  %28 = bitcast i16* %0 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %29, i32 0
  store <2 x i64> %30, <2 x i64>* %23, align 16
  %31 = sext i32 %2 to i64
  %32 = getelementptr inbounds i16, i16* %0, i64 %31
  %33 = bitcast i16* %32 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %34, i32 0
  %36 = shl nsw i32 %2, 1
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i16, i16* %0, i64 %37
  %39 = bitcast i16* %38 to i64*
  %40 = load i64, i64* %39, align 1
  %41 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %40, i32 0
  %42 = mul nsw i32 %2, 3
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i16, i16* %0, i64 %43
  br label %69

45:                                               ; preds = %5, %5, %5, %20
  %46 = phi i32 [ 1, %20 ], [ 0, %5 ], [ 0, %5 ], [ 0, %5 ]
  %47 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 0
  %48 = load i8, i8* %9, align 1
  %49 = shl nsw i32 %2, 2
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i16, i16* %0, i64 %50
  %52 = mul nsw i32 %2, 3
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %51, i64 %53
  %55 = bitcast i16* %54 to i64*
  %56 = load i64, i64* %55, align 1
  %57 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %56, i32 0
  store <2 x i64> %57, <2 x i64>* %47, align 16
  %58 = shl nsw i32 %2, 1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i16, i16* %51, i64 %59
  %61 = bitcast i16* %60 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %62, i32 0
  %64 = sext i32 %2 to i64
  %65 = getelementptr inbounds i16, i16* %51, i64 %64
  %66 = bitcast i16* %65 to i64*
  %67 = load i64, i64* %66, align 1
  %68 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %67, i32 0
  br label %69

69:                                               ; preds = %45, %21
  %70 = phi i16* [ %51, %45 ], [ %44, %21 ]
  %71 = phi i16* [ %0, %45 ], [ %27, %21 ]
  %72 = phi i8 [ %48, %45 ], [ %24, %21 ]
  %73 = phi <2 x i64>* [ %47, %45 ], [ %23, %21 ]
  %74 = phi i32 [ %46, %45 ], [ %22, %21 ]
  %75 = phi i1 [ false, %45 ], [ true, %21 ]
  %76 = phi <2 x i64> [ %63, %45 ], [ %35, %21 ]
  %77 = phi <2 x i64> [ %68, %45 ], [ %41, %21 ]
  %78 = phi <2 x i64> [ %57, %45 ], [ %30, %21 ]
  %79 = bitcast i16* %70 to i64*
  %80 = load i64, i64* %79, align 1
  %81 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %80, i32 0
  %82 = sext i8 %72 to i32
  %83 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %76, <2 x i64>* %83, align 16
  %84 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %77, <2 x i64>* %84, align 16
  %85 = bitcast <2 x i64> %78 to <8 x i16>
  %86 = bitcast <2 x i64> %76 to <8 x i16>
  %87 = bitcast <2 x i64> %77 to <8 x i16>
  %88 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %81, <2 x i64>* %88, align 16
  %89 = icmp eq i32 %74, 0
  %90 = bitcast <2 x i64> %81 to <8 x i16>
  br i1 %89, label %100, label %91

91:                                               ; preds = %69
  %92 = bitcast [8 x <2 x i64>]* %6 to <8 x i16>*
  %93 = shufflevector <8 x i16> %85, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %93, <8 x i16>* %92, align 16
  %94 = bitcast <2 x i64>* %83 to <8 x i16>*
  %95 = shufflevector <8 x i16> %86, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %95, <8 x i16>* %94, align 16
  %96 = bitcast <2 x i64>* %84 to <8 x i16>*
  %97 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %97, <8 x i16>* %96, align 16
  %98 = bitcast <2 x i64>* %88 to <8 x i16>*
  %99 = shufflevector <8 x i16> %90, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %99, <8 x i16>* %98, align 16
  br label %100

100:                                              ; preds = %91, %69
  %101 = phi <8 x i16> [ %99, %91 ], [ %90, %69 ]
  %102 = phi <8 x i16> [ %97, %91 ], [ %87, %69 ]
  %103 = phi <8 x i16> [ %95, %91 ], [ %86, %69 ]
  %104 = phi <8 x i16> [ %93, %91 ], [ %85, %69 ]
  %105 = shufflevector <8 x i16> %104, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %106 = sext <4 x i16> %105 to <4 x i32>
  %107 = bitcast [8 x <2 x i64>]* %6 to <4 x i32>*
  %108 = shufflevector <8 x i16> %103, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %109 = sext <4 x i16> %108 to <4 x i32>
  %110 = bitcast <2 x i64>* %83 to <4 x i32>*
  %111 = shufflevector <8 x i16> %102, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %112 = sext <4 x i16> %111 to <4 x i32>
  %113 = bitcast <2 x i64>* %84 to <4 x i32>*
  %114 = shufflevector <8 x i16> %101, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %115 = sext <4 x i16> %114 to <4 x i32>
  %116 = bitcast <2 x i64>* %88 to <4 x i32>*
  %117 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %106, i32 %82) #8
  store <4 x i32> %117, <4 x i32>* %107, align 16
  %118 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %109, i32 %82) #8
  store <4 x i32> %118, <4 x i32>* %110, align 16
  %119 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %112, i32 %82) #8
  store <4 x i32> %119, <4 x i32>* %113, align 16
  %120 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %115, i32 %82) #8
  store <4 x i32> %120, <4 x i32>* %116, align 16
  %121 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 4
  br i1 %75, label %122, label %140

122:                                              ; preds = %100
  %123 = bitcast i16* %71 to i64*
  %124 = load i64, i64* %123, align 1
  %125 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %124, i32 0
  store <2 x i64> %125, <2 x i64>* %121, align 16
  %126 = sext i32 %2 to i64
  %127 = getelementptr inbounds i16, i16* %71, i64 %126
  %128 = bitcast i16* %127 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %129, i32 0
  %131 = shl nsw i32 %2, 1
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i16, i16* %71, i64 %132
  %134 = bitcast i16* %133 to i64*
  %135 = load i64, i64* %134, align 1
  %136 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %135, i32 0
  %137 = mul nsw i32 %2, 3
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i16, i16* %71, i64 %138
  br label %158

140:                                              ; preds = %100
  %141 = mul nsw i32 %2, 3
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds i16, i16* %71, i64 %142
  %144 = bitcast i16* %143 to i64*
  %145 = load i64, i64* %144, align 1
  %146 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %145, i32 0
  store <2 x i64> %146, <2 x i64>* %121, align 16
  %147 = shl nsw i32 %2, 1
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i16, i16* %71, i64 %148
  %150 = bitcast i16* %149 to i64*
  %151 = load i64, i64* %150, align 1
  %152 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %151, i32 0
  %153 = sext i32 %2 to i64
  %154 = getelementptr inbounds i16, i16* %71, i64 %153
  %155 = bitcast i16* %154 to i64*
  %156 = load i64, i64* %155, align 1
  %157 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %156, i32 0
  br label %158

158:                                              ; preds = %140, %122
  %159 = phi i16* [ %71, %140 ], [ %139, %122 ]
  %160 = phi <2 x i64> [ %152, %140 ], [ %130, %122 ]
  %161 = phi <2 x i64> [ %157, %140 ], [ %136, %122 ]
  %162 = phi <2 x i64> [ %146, %140 ], [ %125, %122 ]
  %163 = bitcast i16* %159 to i64*
  %164 = load i64, i64* %163, align 1
  %165 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %164, i32 0
  %166 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %160, <2 x i64>* %166, align 16
  %167 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %161, <2 x i64>* %167, align 16
  %168 = bitcast <2 x i64> %162 to <8 x i16>
  %169 = bitcast <2 x i64> %160 to <8 x i16>
  %170 = bitcast <2 x i64> %161 to <8 x i16>
  %171 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %165, <2 x i64>* %171, align 16
  %172 = bitcast <2 x i64> %165 to <8 x i16>
  br i1 %89, label %182, label %173

173:                                              ; preds = %158
  %174 = bitcast <2 x i64>* %121 to <8 x i16>*
  %175 = shufflevector <8 x i16> %168, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %175, <8 x i16>* %174, align 16
  %176 = bitcast <2 x i64>* %166 to <8 x i16>*
  %177 = shufflevector <8 x i16> %169, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %177, <8 x i16>* %176, align 16
  %178 = bitcast <2 x i64>* %167 to <8 x i16>*
  %179 = shufflevector <8 x i16> %170, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %179, <8 x i16>* %178, align 16
  %180 = bitcast <2 x i64>* %171 to <8 x i16>*
  %181 = shufflevector <8 x i16> %172, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %181, <8 x i16>* %180, align 16
  br label %182

182:                                              ; preds = %158, %173
  %183 = phi <8 x i16> [ %181, %173 ], [ %172, %158 ]
  %184 = phi <8 x i16> [ %179, %173 ], [ %170, %158 ]
  %185 = phi <8 x i16> [ %177, %173 ], [ %169, %158 ]
  %186 = phi <8 x i16> [ %175, %173 ], [ %168, %158 ]
  %187 = shufflevector <8 x i16> %186, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %188 = sext <4 x i16> %187 to <4 x i32>
  %189 = bitcast <2 x i64>* %121 to <4 x i32>*
  %190 = shufflevector <8 x i16> %185, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %191 = sext <4 x i16> %190 to <4 x i32>
  %192 = bitcast <2 x i64>* %166 to <4 x i32>*
  %193 = shufflevector <8 x i16> %184, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %194 = sext <4 x i16> %193 to <4 x i32>
  %195 = bitcast <2 x i64>* %167 to <4 x i32>*
  %196 = shufflevector <8 x i16> %183, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %197 = sext <4 x i16> %196 to <4 x i32>
  %198 = bitcast <2 x i64>* %171 to <4 x i32>*
  %199 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %188, i32 %82) #8
  store <4 x i32> %199, <4 x i32>* %189, align 16
  %200 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %191, i32 %82) #8
  store <4 x i32> %200, <4 x i32>* %192, align 16
  %201 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %194, i32 %82) #8
  store <4 x i32> %201, <4 x i32>* %195, align 16
  %202 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %197, i32 %82) #8
  store <4 x i32> %202, <4 x i32>* %198, align 16
  call void %16(<2 x i64>* nonnull %73, <2 x i64>* nonnull %73, i32 %11, i32 1) #8
  %203 = getelementptr inbounds i8, i8* %9, i64 1
  %204 = load i8, i8* %203, align 1
  %205 = sext i8 %204 to i32
  %206 = sub nsw i32 0, %205
  %207 = xor i32 %205, -1
  %208 = shl i32 1, %207
  %209 = insertelement <4 x i32> undef, i32 %208, i32 0
  %210 = shufflevector <4 x i32> %209, <4 x i32> undef, <4 x i32> zeroinitializer
  %211 = load <4 x i32>, <4 x i32>* %107, align 16
  %212 = add <4 x i32> %210, %211
  %213 = load <4 x i32>, <4 x i32>* %110, align 16
  %214 = add <4 x i32> %210, %213
  %215 = load <4 x i32>, <4 x i32>* %113, align 16
  %216 = add <4 x i32> %210, %215
  %217 = load <4 x i32>, <4 x i32>* %116, align 16
  %218 = add <4 x i32> %217, %210
  %219 = load <4 x i32>, <4 x i32>* %189, align 16
  %220 = add <4 x i32> %219, %210
  %221 = load <4 x i32>, <4 x i32>* %192, align 16
  %222 = add <4 x i32> %221, %210
  %223 = load <4 x i32>, <4 x i32>* %195, align 16
  %224 = add <4 x i32> %223, %210
  %225 = load <4 x i32>, <4 x i32>* %198, align 16
  %226 = add <4 x i32> %225, %210
  %227 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %212, i32 %206) #8
  store <4 x i32> %227, <4 x i32>* %107, align 16
  %228 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %214, i32 %206) #8
  store <4 x i32> %228, <4 x i32>* %110, align 16
  %229 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %216, i32 %206) #8
  store <4 x i32> %229, <4 x i32>* %113, align 16
  %230 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %218, i32 %206) #8
  store <4 x i32> %230, <4 x i32>* %116, align 16
  %231 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %220, i32 %206) #8
  store <4 x i32> %231, <4 x i32>* %189, align 16
  %232 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %222, i32 %206) #8
  store <4 x i32> %232, <4 x i32>* %192, align 16
  %233 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %224, i32 %206) #8
  store <4 x i32> %233, <4 x i32>* %195, align 16
  %234 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %226, i32 %206) #8
  store <4 x i32> %234, <4 x i32>* %198, align 16
  %235 = bitcast [8 x <2 x i64>]* %6 to <4 x i32>*
  %236 = shufflevector <4 x i32> %227, <4 x i32> %228, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %237 = bitcast <4 x i32> %236 to <2 x i64>
  %238 = shufflevector <4 x i32> %227, <4 x i32> %228, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %239 = bitcast <4 x i32> %238 to <2 x i64>
  %240 = shufflevector <4 x i32> %229, <4 x i32> %230, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %241 = bitcast <4 x i32> %240 to <2 x i64>
  %242 = shufflevector <4 x i32> %229, <4 x i32> %230, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %243 = bitcast <4 x i32> %242 to <2 x i64>
  %244 = shufflevector <2 x i64> %237, <2 x i64> %241, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %244, <2 x i64>* %8, align 16
  %245 = shufflevector <2 x i64> %237, <2 x i64> %241, <2 x i32> <i32 1, i32 3>
  %246 = getelementptr inbounds i32, i32* %1, i64 8
  %247 = bitcast i32* %246 to <2 x i64>*
  store <2 x i64> %245, <2 x i64>* %247, align 16
  %248 = shufflevector <2 x i64> %239, <2 x i64> %243, <2 x i32> <i32 0, i32 2>
  %249 = getelementptr inbounds i32, i32* %1, i64 16
  %250 = bitcast i32* %249 to <2 x i64>*
  store <2 x i64> %248, <2 x i64>* %250, align 16
  %251 = shufflevector <2 x i64> %239, <2 x i64> %243, <2 x i32> <i32 1, i32 3>
  %252 = getelementptr inbounds i32, i32* %1, i64 24
  %253 = bitcast i32* %252 to <2 x i64>*
  store <2 x i64> %251, <2 x i64>* %253, align 16
  %254 = shufflevector <4 x i32> %231, <4 x i32> %232, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %255 = bitcast <4 x i32> %254 to <2 x i64>
  %256 = shufflevector <4 x i32> %231, <4 x i32> %232, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %257 = bitcast <4 x i32> %256 to <2 x i64>
  %258 = shufflevector <4 x i32> %233, <4 x i32> %234, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %259 = bitcast <4 x i32> %258 to <2 x i64>
  %260 = shufflevector <4 x i32> %233, <4 x i32> %234, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %261 = bitcast <4 x i32> %260 to <2 x i64>
  %262 = shufflevector <2 x i64> %255, <2 x i64> %259, <2 x i32> <i32 0, i32 2>
  %263 = getelementptr inbounds i32, i32* %1, i64 4
  %264 = bitcast i32* %263 to <2 x i64>*
  store <2 x i64> %262, <2 x i64>* %264, align 16
  %265 = shufflevector <2 x i64> %255, <2 x i64> %259, <2 x i32> <i32 1, i32 3>
  %266 = getelementptr inbounds i32, i32* %1, i64 12
  %267 = bitcast i32* %266 to <2 x i64>*
  store <2 x i64> %265, <2 x i64>* %267, align 16
  %268 = shufflevector <2 x i64> %257, <2 x i64> %261, <2 x i32> <i32 0, i32 2>
  %269 = getelementptr inbounds i32, i32* %1, i64 20
  %270 = bitcast i32* %269 to <2 x i64>*
  store <2 x i64> %268, <2 x i64>* %270, align 16
  %271 = shufflevector <2 x i64> %257, <2 x i64> %261, <2 x i32> <i32 1, i32 3>
  %272 = getelementptr inbounds i32, i32* %1, i64 28
  %273 = bitcast i32* %272 to <2 x i64>*
  store <2 x i64> %271, <2 x i64>* %273, align 16
  call void %18(<2 x i64>* %8, <2 x i64>* %73, i32 %13, i32 2) #8
  call void %18(<2 x i64>* %264, <2 x i64>* %121, i32 %13, i32 2) #8
  %274 = getelementptr inbounds i8, i8* %9, i64 2
  %275 = load i8, i8* %274, align 1
  %276 = sext i8 %275 to i32
  %277 = sub nsw i32 0, %276
  %278 = icmp slt i8 %275, 0
  br i1 %278, label %324, label %279

279:                                              ; preds = %182
  %280 = load <4 x i32>, <4 x i32>* %235, align 16
  %281 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %280, i32 %276) #8
  %282 = mul <4 x i32> %281, <i32 5793, i32 5793, i32 5793, i32 5793>
  %283 = add <4 x i32> %282, <i32 2048, i32 2048, i32 2048, i32 2048>
  %284 = ashr <4 x i32> %283, <i32 12, i32 12, i32 12, i32 12>
  %285 = bitcast i32* %1 to <4 x i32>*
  store <4 x i32> %284, <4 x i32>* %285, align 16
  %286 = load <4 x i32>, <4 x i32>* %110, align 16
  %287 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %286, i32 %276) #8
  %288 = mul <4 x i32> %287, <i32 5793, i32 5793, i32 5793, i32 5793>
  %289 = add <4 x i32> %288, <i32 2048, i32 2048, i32 2048, i32 2048>
  %290 = ashr <4 x i32> %289, <i32 12, i32 12, i32 12, i32 12>
  %291 = bitcast i32* %263 to <4 x i32>*
  store <4 x i32> %290, <4 x i32>* %291, align 16
  %292 = load <4 x i32>, <4 x i32>* %113, align 16
  %293 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %292, i32 %276) #8
  %294 = mul <4 x i32> %293, <i32 5793, i32 5793, i32 5793, i32 5793>
  %295 = add <4 x i32> %294, <i32 2048, i32 2048, i32 2048, i32 2048>
  %296 = ashr <4 x i32> %295, <i32 12, i32 12, i32 12, i32 12>
  %297 = bitcast i32* %246 to <4 x i32>*
  store <4 x i32> %296, <4 x i32>* %297, align 16
  %298 = load <4 x i32>, <4 x i32>* %116, align 16
  %299 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %298, i32 %276) #8
  %300 = mul <4 x i32> %299, <i32 5793, i32 5793, i32 5793, i32 5793>
  %301 = add <4 x i32> %300, <i32 2048, i32 2048, i32 2048, i32 2048>
  %302 = ashr <4 x i32> %301, <i32 12, i32 12, i32 12, i32 12>
  %303 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %302, <4 x i32>* %303, align 16
  %304 = load <4 x i32>, <4 x i32>* %189, align 16
  %305 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %304, i32 %276) #8
  %306 = mul <4 x i32> %305, <i32 5793, i32 5793, i32 5793, i32 5793>
  %307 = add <4 x i32> %306, <i32 2048, i32 2048, i32 2048, i32 2048>
  %308 = ashr <4 x i32> %307, <i32 12, i32 12, i32 12, i32 12>
  %309 = bitcast i32* %249 to <4 x i32>*
  store <4 x i32> %308, <4 x i32>* %309, align 16
  %310 = load <4 x i32>, <4 x i32>* %192, align 16
  %311 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %310, i32 %276) #8
  %312 = mul <4 x i32> %311, <i32 5793, i32 5793, i32 5793, i32 5793>
  %313 = add <4 x i32> %312, <i32 2048, i32 2048, i32 2048, i32 2048>
  %314 = ashr <4 x i32> %313, <i32 12, i32 12, i32 12, i32 12>
  %315 = bitcast i32* %269 to <4 x i32>*
  store <4 x i32> %314, <4 x i32>* %315, align 16
  %316 = load <4 x i32>, <4 x i32>* %195, align 16
  %317 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %316, i32 %276) #8
  %318 = mul <4 x i32> %317, <i32 5793, i32 5793, i32 5793, i32 5793>
  %319 = add <4 x i32> %318, <i32 2048, i32 2048, i32 2048, i32 2048>
  %320 = ashr <4 x i32> %319, <i32 12, i32 12, i32 12, i32 12>
  %321 = bitcast i32* %252 to <4 x i32>*
  store <4 x i32> %320, <4 x i32>* %321, align 16
  %322 = load <4 x i32>, <4 x i32>* %198, align 16
  %323 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %322, i32 %276) #8
  br label %381

324:                                              ; preds = %182
  %325 = xor i32 %276, -1
  %326 = shl i32 1, %325
  %327 = insertelement <4 x i32> undef, i32 %326, i32 0
  %328 = shufflevector <4 x i32> %327, <4 x i32> undef, <4 x i32> zeroinitializer
  %329 = load <4 x i32>, <4 x i32>* %235, align 16
  %330 = add <4 x i32> %329, %328
  %331 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %330, i32 %277) #8
  %332 = mul <4 x i32> %331, <i32 5793, i32 5793, i32 5793, i32 5793>
  %333 = add <4 x i32> %332, <i32 2048, i32 2048, i32 2048, i32 2048>
  %334 = ashr <4 x i32> %333, <i32 12, i32 12, i32 12, i32 12>
  %335 = bitcast i32* %1 to <4 x i32>*
  store <4 x i32> %334, <4 x i32>* %335, align 16
  %336 = load <4 x i32>, <4 x i32>* %110, align 16
  %337 = add <4 x i32> %336, %328
  %338 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %337, i32 %277) #8
  %339 = mul <4 x i32> %338, <i32 5793, i32 5793, i32 5793, i32 5793>
  %340 = add <4 x i32> %339, <i32 2048, i32 2048, i32 2048, i32 2048>
  %341 = ashr <4 x i32> %340, <i32 12, i32 12, i32 12, i32 12>
  %342 = bitcast i32* %263 to <4 x i32>*
  store <4 x i32> %341, <4 x i32>* %342, align 16
  %343 = load <4 x i32>, <4 x i32>* %113, align 16
  %344 = add <4 x i32> %343, %328
  %345 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %344, i32 %277) #8
  %346 = mul <4 x i32> %345, <i32 5793, i32 5793, i32 5793, i32 5793>
  %347 = add <4 x i32> %346, <i32 2048, i32 2048, i32 2048, i32 2048>
  %348 = ashr <4 x i32> %347, <i32 12, i32 12, i32 12, i32 12>
  %349 = bitcast i32* %246 to <4 x i32>*
  store <4 x i32> %348, <4 x i32>* %349, align 16
  %350 = load <4 x i32>, <4 x i32>* %116, align 16
  %351 = add <4 x i32> %350, %328
  %352 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %351, i32 %277) #8
  %353 = mul <4 x i32> %352, <i32 5793, i32 5793, i32 5793, i32 5793>
  %354 = add <4 x i32> %353, <i32 2048, i32 2048, i32 2048, i32 2048>
  %355 = ashr <4 x i32> %354, <i32 12, i32 12, i32 12, i32 12>
  %356 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %355, <4 x i32>* %356, align 16
  %357 = load <4 x i32>, <4 x i32>* %189, align 16
  %358 = add <4 x i32> %357, %328
  %359 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %358, i32 %277) #8
  %360 = mul <4 x i32> %359, <i32 5793, i32 5793, i32 5793, i32 5793>
  %361 = add <4 x i32> %360, <i32 2048, i32 2048, i32 2048, i32 2048>
  %362 = ashr <4 x i32> %361, <i32 12, i32 12, i32 12, i32 12>
  %363 = bitcast i32* %249 to <4 x i32>*
  store <4 x i32> %362, <4 x i32>* %363, align 16
  %364 = load <4 x i32>, <4 x i32>* %192, align 16
  %365 = add <4 x i32> %364, %328
  %366 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %365, i32 %277) #8
  %367 = mul <4 x i32> %366, <i32 5793, i32 5793, i32 5793, i32 5793>
  %368 = add <4 x i32> %367, <i32 2048, i32 2048, i32 2048, i32 2048>
  %369 = ashr <4 x i32> %368, <i32 12, i32 12, i32 12, i32 12>
  %370 = bitcast i32* %269 to <4 x i32>*
  store <4 x i32> %369, <4 x i32>* %370, align 16
  %371 = load <4 x i32>, <4 x i32>* %195, align 16
  %372 = add <4 x i32> %371, %328
  %373 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %372, i32 %277) #8
  %374 = mul <4 x i32> %373, <i32 5793, i32 5793, i32 5793, i32 5793>
  %375 = add <4 x i32> %374, <i32 2048, i32 2048, i32 2048, i32 2048>
  %376 = ashr <4 x i32> %375, <i32 12, i32 12, i32 12, i32 12>
  %377 = bitcast i32* %252 to <4 x i32>*
  store <4 x i32> %376, <4 x i32>* %377, align 16
  %378 = load <4 x i32>, <4 x i32>* %198, align 16
  %379 = add <4 x i32> %378, %328
  %380 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %379, i32 %277) #8
  br label %381

381:                                              ; preds = %279, %324
  %382 = phi <4 x i32> [ %323, %279 ], [ %380, %324 ]
  %383 = mul <4 x i32> %382, <i32 5793, i32 5793, i32 5793, i32 5793>
  %384 = add <4 x i32> %383, <i32 2048, i32 2048, i32 2048, i32 2048>
  %385 = ashr <4 x i32> %384, <i32 12, i32 12, i32 12, i32 12>
  %386 = bitcast i32* %272 to <4 x i32>*
  store <4 x i32> %385, <4 x i32>* %386, align 16
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %7) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_fwd_txfm2d_8x4_sse4_1(i16* nocapture readonly, i32*, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [8 x <2 x i64>], align 16
  %7 = bitcast [8 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 128, i1 false)
  %8 = bitcast i32* %1 to <2 x i64>*
  %9 = load i8*, i8** getelementptr inbounds ([19 x i8*], [19 x i8*]* @av1_fwd_txfm_shift_ls, i64 0, i64 6), align 16
  %10 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_col, i64 0, i64 1, i64 0), align 1
  %11 = sext i8 %10 to i32
  %12 = load i8, i8* getelementptr inbounds ([5 x [5 x i8]], [5 x [5 x i8]]* @av1_fwd_cos_bit_row, i64 0, i64 1, i64 0), align 1
  %13 = sext i8 %12 to i32
  %14 = zext i8 %3 to i64
  %15 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @col_highbd_txfm4x4_arr, i64 0, i64 %14
  %16 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %15, align 8
  %17 = getelementptr inbounds [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*], [16 x void (<2 x i64>*, <2 x i64>*, i32, i32)*]* @row_highbd_txfm4x8_arr, i64 0, i64 %14
  %18 = load void (<2 x i64>*, <2 x i64>*, i32, i32)*, void (<2 x i64>*, <2 x i64>*, i32, i32)** %17, align 8
  switch i8 %3, label %19 [
    i8 6, label %28
    i8 15, label %22
    i8 7, label %22
    i8 5, label %22
    i8 14, label %25
    i8 8, label %25
    i8 4, label %25
  ]

19:                                               ; preds = %5
  %20 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 0
  %21 = getelementptr inbounds i16, i16* %0, i64 4
  br label %31

22:                                               ; preds = %5, %5, %5
  %23 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 0
  %24 = getelementptr inbounds i16, i16* %0, i64 4
  br label %31

25:                                               ; preds = %5, %5, %5
  %26 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 0
  %27 = getelementptr inbounds i16, i16* %0, i64 4
  br label %54

28:                                               ; preds = %5
  %29 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 0
  %30 = getelementptr inbounds i16, i16* %0, i64 4
  br label %54

31:                                               ; preds = %19, %22
  %32 = phi i16* [ %0, %22 ], [ %21, %19 ]
  %33 = phi <2 x i64>* [ %23, %22 ], [ %20, %19 ]
  %34 = phi i1 [ false, %22 ], [ true, %19 ]
  %35 = phi i16* [ %24, %22 ], [ %0, %19 ]
  %36 = load i8, i8* %9, align 1
  %37 = bitcast i16* %35 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %38, i32 0
  store <2 x i64> %39, <2 x i64>* %33, align 16
  %40 = sext i32 %2 to i64
  %41 = getelementptr inbounds i16, i16* %35, i64 %40
  %42 = bitcast i16* %41 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %43, i32 0
  %45 = shl nsw i32 %2, 1
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i16, i16* %35, i64 %46
  %48 = bitcast i16* %47 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %49, i32 0
  %51 = mul nsw i32 %2, 3
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i16, i16* %35, i64 %52
  br label %77

54:                                               ; preds = %25, %28
  %55 = phi i16* [ %27, %25 ], [ %0, %28 ]
  %56 = phi <2 x i64>* [ %26, %25 ], [ %29, %28 ]
  %57 = phi i1 [ true, %25 ], [ false, %28 ]
  %58 = phi i16* [ %0, %25 ], [ %30, %28 ]
  %59 = load i8, i8* %9, align 1
  %60 = mul nsw i32 %2, 3
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i16, i16* %58, i64 %61
  %63 = bitcast i16* %62 to i64*
  %64 = load i64, i64* %63, align 1
  %65 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %64, i32 0
  store <2 x i64> %65, <2 x i64>* %56, align 16
  %66 = shl nsw i32 %2, 1
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i16, i16* %58, i64 %67
  %69 = bitcast i16* %68 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %70, i32 0
  %72 = sext i32 %2 to i64
  %73 = getelementptr inbounds i16, i16* %58, i64 %72
  %74 = bitcast i16* %73 to i64*
  %75 = load i64, i64* %74, align 1
  %76 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %75, i32 0
  br label %77

77:                                               ; preds = %54, %31
  %78 = phi i16* [ %58, %54 ], [ %53, %31 ]
  %79 = phi i16* [ %55, %54 ], [ %32, %31 ]
  %80 = phi i8 [ %59, %54 ], [ %36, %31 ]
  %81 = phi <2 x i64>* [ %56, %54 ], [ %33, %31 ]
  %82 = phi i1 [ %57, %54 ], [ %34, %31 ]
  %83 = phi i1 [ false, %54 ], [ true, %31 ]
  %84 = phi <2 x i64> [ %71, %54 ], [ %44, %31 ]
  %85 = phi <2 x i64> [ %76, %54 ], [ %50, %31 ]
  %86 = phi <2 x i64> [ %65, %54 ], [ %39, %31 ]
  %87 = bitcast i16* %78 to i64*
  %88 = load i64, i64* %87, align 1
  %89 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %88, i32 0
  %90 = sext i8 %80 to i32
  %91 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 1
  store <2 x i64> %84, <2 x i64>* %91, align 16
  %92 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 2
  store <2 x i64> %85, <2 x i64>* %92, align 16
  %93 = bitcast <2 x i64> %86 to <8 x i16>
  %94 = bitcast <2 x i64> %84 to <8 x i16>
  %95 = bitcast <2 x i64> %85 to <8 x i16>
  %96 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 3
  store <2 x i64> %89, <2 x i64>* %96, align 16
  %97 = bitcast <2 x i64> %89 to <8 x i16>
  br i1 %82, label %107, label %98

98:                                               ; preds = %77
  %99 = bitcast [8 x <2 x i64>]* %6 to <8 x i16>*
  %100 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %100, <8 x i16>* %99, align 16
  %101 = bitcast <2 x i64>* %91 to <8 x i16>*
  %102 = shufflevector <8 x i16> %94, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %102, <8 x i16>* %101, align 16
  %103 = bitcast <2 x i64>* %92 to <8 x i16>*
  %104 = shufflevector <8 x i16> %95, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %104, <8 x i16>* %103, align 16
  %105 = bitcast <2 x i64>* %96 to <8 x i16>*
  %106 = shufflevector <8 x i16> %97, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %106, <8 x i16>* %105, align 16
  br label %107

107:                                              ; preds = %98, %77
  %108 = phi <8 x i16> [ %106, %98 ], [ %97, %77 ]
  %109 = phi <8 x i16> [ %104, %98 ], [ %95, %77 ]
  %110 = phi <8 x i16> [ %102, %98 ], [ %94, %77 ]
  %111 = phi <8 x i16> [ %100, %98 ], [ %93, %77 ]
  %112 = shufflevector <8 x i16> %111, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %113 = sext <4 x i16> %112 to <4 x i32>
  %114 = bitcast [8 x <2 x i64>]* %6 to <4 x i32>*
  %115 = shufflevector <8 x i16> %110, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %116 = sext <4 x i16> %115 to <4 x i32>
  %117 = bitcast <2 x i64>* %91 to <4 x i32>*
  %118 = shufflevector <8 x i16> %109, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %119 = sext <4 x i16> %118 to <4 x i32>
  %120 = bitcast <2 x i64>* %92 to <4 x i32>*
  %121 = shufflevector <8 x i16> %108, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %122 = sext <4 x i16> %121 to <4 x i32>
  %123 = bitcast <2 x i64>* %96 to <4 x i32>*
  %124 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %113, i32 %90) #8
  store <4 x i32> %124, <4 x i32>* %114, align 16
  %125 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %116, i32 %90) #8
  store <4 x i32> %125, <4 x i32>* %117, align 16
  %126 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %119, i32 %90) #8
  store <4 x i32> %126, <4 x i32>* %120, align 16
  %127 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %122, i32 %90) #8
  store <4 x i32> %127, <4 x i32>* %123, align 16
  %128 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 4
  br i1 %83, label %129, label %147

129:                                              ; preds = %107
  %130 = bitcast i16* %79 to i64*
  %131 = load i64, i64* %130, align 1
  %132 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %131, i32 0
  store <2 x i64> %132, <2 x i64>* %128, align 16
  %133 = sext i32 %2 to i64
  %134 = getelementptr inbounds i16, i16* %79, i64 %133
  %135 = bitcast i16* %134 to i64*
  %136 = load i64, i64* %135, align 1
  %137 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %136, i32 0
  %138 = shl nsw i32 %2, 1
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i16, i16* %79, i64 %139
  %141 = bitcast i16* %140 to i64*
  %142 = load i64, i64* %141, align 1
  %143 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %142, i32 0
  %144 = mul nsw i32 %2, 3
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i16, i16* %79, i64 %145
  br label %165

147:                                              ; preds = %107
  %148 = mul nsw i32 %2, 3
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i16, i16* %79, i64 %149
  %151 = bitcast i16* %150 to i64*
  %152 = load i64, i64* %151, align 1
  %153 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %152, i32 0
  store <2 x i64> %153, <2 x i64>* %128, align 16
  %154 = shl nsw i32 %2, 1
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds i16, i16* %79, i64 %155
  %157 = bitcast i16* %156 to i64*
  %158 = load i64, i64* %157, align 1
  %159 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %158, i32 0
  %160 = sext i32 %2 to i64
  %161 = getelementptr inbounds i16, i16* %79, i64 %160
  %162 = bitcast i16* %161 to i64*
  %163 = load i64, i64* %162, align 1
  %164 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %163, i32 0
  br label %165

165:                                              ; preds = %147, %129
  %166 = phi i16* [ %79, %147 ], [ %146, %129 ]
  %167 = phi <2 x i64> [ %159, %147 ], [ %137, %129 ]
  %168 = phi <2 x i64> [ %164, %147 ], [ %143, %129 ]
  %169 = phi <2 x i64> [ %153, %147 ], [ %132, %129 ]
  %170 = bitcast i16* %166 to i64*
  %171 = load i64, i64* %170, align 1
  %172 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %171, i32 0
  %173 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 5
  store <2 x i64> %167, <2 x i64>* %173, align 16
  %174 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 6
  store <2 x i64> %168, <2 x i64>* %174, align 16
  %175 = bitcast <2 x i64> %169 to <8 x i16>
  %176 = bitcast <2 x i64> %167 to <8 x i16>
  %177 = bitcast <2 x i64> %168 to <8 x i16>
  %178 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %6, i64 0, i64 7
  store <2 x i64> %172, <2 x i64>* %178, align 16
  %179 = bitcast <2 x i64> %172 to <8 x i16>
  br i1 %82, label %189, label %180

180:                                              ; preds = %165
  %181 = bitcast <2 x i64>* %128 to <8 x i16>*
  %182 = shufflevector <8 x i16> %175, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %182, <8 x i16>* %181, align 16
  %183 = bitcast <2 x i64>* %173 to <8 x i16>*
  %184 = shufflevector <8 x i16> %176, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %184, <8 x i16>* %183, align 16
  %185 = bitcast <2 x i64>* %174 to <8 x i16>*
  %186 = shufflevector <8 x i16> %177, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %186, <8 x i16>* %185, align 16
  %187 = bitcast <2 x i64>* %178 to <8 x i16>*
  %188 = shufflevector <8 x i16> %179, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %188, <8 x i16>* %187, align 16
  br label %189

189:                                              ; preds = %165, %180
  %190 = phi <8 x i16> [ %188, %180 ], [ %179, %165 ]
  %191 = phi <8 x i16> [ %186, %180 ], [ %177, %165 ]
  %192 = phi <8 x i16> [ %184, %180 ], [ %176, %165 ]
  %193 = phi <8 x i16> [ %182, %180 ], [ %175, %165 ]
  %194 = shufflevector <8 x i16> %193, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %195 = sext <4 x i16> %194 to <4 x i32>
  %196 = bitcast <2 x i64>* %128 to <4 x i32>*
  %197 = shufflevector <8 x i16> %192, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %198 = sext <4 x i16> %197 to <4 x i32>
  %199 = bitcast <2 x i64>* %173 to <4 x i32>*
  %200 = shufflevector <8 x i16> %191, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %201 = sext <4 x i16> %200 to <4 x i32>
  %202 = bitcast <2 x i64>* %174 to <4 x i32>*
  %203 = shufflevector <8 x i16> %190, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %204 = sext <4 x i16> %203 to <4 x i32>
  %205 = bitcast <2 x i64>* %178 to <4 x i32>*
  %206 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %195, i32 %90) #8
  store <4 x i32> %206, <4 x i32>* %196, align 16
  %207 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %198, i32 %90) #8
  store <4 x i32> %207, <4 x i32>* %199, align 16
  %208 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %201, i32 %90) #8
  store <4 x i32> %208, <4 x i32>* %202, align 16
  %209 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %204, i32 %90) #8
  store <4 x i32> %209, <4 x i32>* %205, align 16
  call void %16(<2 x i64>* %81, <2 x i64>* %81, i32 %11, i32 1) #8
  call void %16(<2 x i64>* %128, <2 x i64>* %128, i32 %11, i32 1) #8
  %210 = getelementptr inbounds i8, i8* %9, i64 1
  %211 = load i8, i8* %210, align 1
  %212 = sext i8 %211 to i32
  %213 = sub nsw i32 0, %212
  %214 = xor i32 %212, -1
  %215 = shl i32 1, %214
  %216 = insertelement <4 x i32> undef, i32 %215, i32 0
  %217 = shufflevector <4 x i32> %216, <4 x i32> undef, <4 x i32> zeroinitializer
  %218 = load <4 x i32>, <4 x i32>* %114, align 16
  %219 = add <4 x i32> %217, %218
  %220 = load <4 x i32>, <4 x i32>* %117, align 16
  %221 = add <4 x i32> %217, %220
  %222 = load <4 x i32>, <4 x i32>* %120, align 16
  %223 = add <4 x i32> %217, %222
  %224 = load <4 x i32>, <4 x i32>* %123, align 16
  %225 = add <4 x i32> %224, %217
  %226 = load <4 x i32>, <4 x i32>* %196, align 16
  %227 = add <4 x i32> %226, %217
  %228 = load <4 x i32>, <4 x i32>* %199, align 16
  %229 = add <4 x i32> %228, %217
  %230 = load <4 x i32>, <4 x i32>* %202, align 16
  %231 = add <4 x i32> %230, %217
  %232 = load <4 x i32>, <4 x i32>* %205, align 16
  %233 = add <4 x i32> %232, %217
  %234 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %219, i32 %213) #8
  store <4 x i32> %234, <4 x i32>* %114, align 16
  %235 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %221, i32 %213) #8
  store <4 x i32> %235, <4 x i32>* %117, align 16
  %236 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %223, i32 %213) #8
  store <4 x i32> %236, <4 x i32>* %120, align 16
  %237 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %225, i32 %213) #8
  store <4 x i32> %237, <4 x i32>* %123, align 16
  %238 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %227, i32 %213) #8
  store <4 x i32> %238, <4 x i32>* %196, align 16
  %239 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %229, i32 %213) #8
  store <4 x i32> %239, <4 x i32>* %199, align 16
  %240 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %231, i32 %213) #8
  store <4 x i32> %240, <4 x i32>* %202, align 16
  %241 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %233, i32 %213) #8
  store <4 x i32> %241, <4 x i32>* %205, align 16
  call void %18(<2 x i64>* nonnull %81, <2 x i64>* %8, i32 %13, i32 1) #8
  %242 = getelementptr inbounds i8, i8* %9, i64 2
  %243 = load i8, i8* %242, align 1
  %244 = sext i8 %243 to i32
  %245 = sub nsw i32 0, %244
  %246 = icmp slt i8 %243, 0
  br i1 %246, label %301, label %247

247:                                              ; preds = %189
  %248 = bitcast i32* %1 to <4 x i32>*
  %249 = load <4 x i32>, <4 x i32>* %248, align 16
  %250 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %249, i32 %244) #8
  %251 = mul <4 x i32> %250, <i32 5793, i32 5793, i32 5793, i32 5793>
  %252 = add <4 x i32> %251, <i32 2048, i32 2048, i32 2048, i32 2048>
  %253 = ashr <4 x i32> %252, <i32 12, i32 12, i32 12, i32 12>
  %254 = bitcast [8 x <2 x i64>]* %6 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %254, align 16
  %255 = getelementptr inbounds i32, i32* %1, i64 4
  %256 = bitcast i32* %255 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 16
  %258 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %257, i32 %244) #8
  %259 = mul <4 x i32> %258, <i32 5793, i32 5793, i32 5793, i32 5793>
  %260 = add <4 x i32> %259, <i32 2048, i32 2048, i32 2048, i32 2048>
  %261 = ashr <4 x i32> %260, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %261, <4 x i32>* %117, align 16
  %262 = getelementptr inbounds i32, i32* %1, i64 8
  %263 = bitcast i32* %262 to <4 x i32>*
  %264 = load <4 x i32>, <4 x i32>* %263, align 16
  %265 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %264, i32 %244) #8
  %266 = mul <4 x i32> %265, <i32 5793, i32 5793, i32 5793, i32 5793>
  %267 = add <4 x i32> %266, <i32 2048, i32 2048, i32 2048, i32 2048>
  %268 = ashr <4 x i32> %267, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %268, <4 x i32>* %120, align 16
  %269 = getelementptr inbounds i32, i32* %1, i64 12
  %270 = bitcast i32* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 16
  %272 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %271, i32 %244) #8
  %273 = mul <4 x i32> %272, <i32 5793, i32 5793, i32 5793, i32 5793>
  %274 = add <4 x i32> %273, <i32 2048, i32 2048, i32 2048, i32 2048>
  %275 = ashr <4 x i32> %274, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %275, <4 x i32>* %123, align 16
  %276 = getelementptr inbounds i32, i32* %1, i64 16
  %277 = bitcast i32* %276 to <4 x i32>*
  %278 = load <4 x i32>, <4 x i32>* %277, align 16
  %279 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %278, i32 %244) #8
  %280 = mul <4 x i32> %279, <i32 5793, i32 5793, i32 5793, i32 5793>
  %281 = add <4 x i32> %280, <i32 2048, i32 2048, i32 2048, i32 2048>
  %282 = ashr <4 x i32> %281, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %282, <4 x i32>* %196, align 16
  %283 = getelementptr inbounds i32, i32* %1, i64 20
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 16
  %286 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %285, i32 %244) #8
  %287 = mul <4 x i32> %286, <i32 5793, i32 5793, i32 5793, i32 5793>
  %288 = add <4 x i32> %287, <i32 2048, i32 2048, i32 2048, i32 2048>
  %289 = ashr <4 x i32> %288, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %289, <4 x i32>* %199, align 16
  %290 = getelementptr inbounds i32, i32* %1, i64 24
  %291 = bitcast i32* %290 to <4 x i32>*
  %292 = load <4 x i32>, <4 x i32>* %291, align 16
  %293 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %292, i32 %244) #8
  %294 = mul <4 x i32> %293, <i32 5793, i32 5793, i32 5793, i32 5793>
  %295 = add <4 x i32> %294, <i32 2048, i32 2048, i32 2048, i32 2048>
  %296 = ashr <4 x i32> %295, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %296, <4 x i32>* %202, align 16
  %297 = getelementptr inbounds i32, i32* %1, i64 28
  %298 = bitcast i32* %297 to <4 x i32>*
  %299 = load <4 x i32>, <4 x i32>* %298, align 16
  %300 = call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %299, i32 %244) #8
  br label %367

301:                                              ; preds = %189
  %302 = xor i32 %244, -1
  %303 = shl i32 1, %302
  %304 = insertelement <4 x i32> undef, i32 %303, i32 0
  %305 = shufflevector <4 x i32> %304, <4 x i32> undef, <4 x i32> zeroinitializer
  %306 = bitcast i32* %1 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 16
  %308 = add <4 x i32> %307, %305
  %309 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %308, i32 %245) #8
  %310 = mul <4 x i32> %309, <i32 5793, i32 5793, i32 5793, i32 5793>
  %311 = add <4 x i32> %310, <i32 2048, i32 2048, i32 2048, i32 2048>
  %312 = ashr <4 x i32> %311, <i32 12, i32 12, i32 12, i32 12>
  %313 = bitcast [8 x <2 x i64>]* %6 to <4 x i32>*
  store <4 x i32> %312, <4 x i32>* %313, align 16
  %314 = getelementptr inbounds i32, i32* %1, i64 4
  %315 = bitcast i32* %314 to <4 x i32>*
  %316 = load <4 x i32>, <4 x i32>* %315, align 16
  %317 = add <4 x i32> %316, %305
  %318 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %317, i32 %245) #8
  %319 = mul <4 x i32> %318, <i32 5793, i32 5793, i32 5793, i32 5793>
  %320 = add <4 x i32> %319, <i32 2048, i32 2048, i32 2048, i32 2048>
  %321 = ashr <4 x i32> %320, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %321, <4 x i32>* %117, align 16
  %322 = getelementptr inbounds i32, i32* %1, i64 8
  %323 = bitcast i32* %322 to <4 x i32>*
  %324 = load <4 x i32>, <4 x i32>* %323, align 16
  %325 = add <4 x i32> %324, %305
  %326 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %325, i32 %245) #8
  %327 = mul <4 x i32> %326, <i32 5793, i32 5793, i32 5793, i32 5793>
  %328 = add <4 x i32> %327, <i32 2048, i32 2048, i32 2048, i32 2048>
  %329 = ashr <4 x i32> %328, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %329, <4 x i32>* %120, align 16
  %330 = getelementptr inbounds i32, i32* %1, i64 12
  %331 = bitcast i32* %330 to <4 x i32>*
  %332 = load <4 x i32>, <4 x i32>* %331, align 16
  %333 = add <4 x i32> %332, %305
  %334 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %333, i32 %245) #8
  %335 = mul <4 x i32> %334, <i32 5793, i32 5793, i32 5793, i32 5793>
  %336 = add <4 x i32> %335, <i32 2048, i32 2048, i32 2048, i32 2048>
  %337 = ashr <4 x i32> %336, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %337, <4 x i32>* %123, align 16
  %338 = getelementptr inbounds i32, i32* %1, i64 16
  %339 = bitcast i32* %338 to <4 x i32>*
  %340 = load <4 x i32>, <4 x i32>* %339, align 16
  %341 = add <4 x i32> %340, %305
  %342 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %341, i32 %245) #8
  %343 = mul <4 x i32> %342, <i32 5793, i32 5793, i32 5793, i32 5793>
  %344 = add <4 x i32> %343, <i32 2048, i32 2048, i32 2048, i32 2048>
  %345 = ashr <4 x i32> %344, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %345, <4 x i32>* %196, align 16
  %346 = getelementptr inbounds i32, i32* %1, i64 20
  %347 = bitcast i32* %346 to <4 x i32>*
  %348 = load <4 x i32>, <4 x i32>* %347, align 16
  %349 = add <4 x i32> %348, %305
  %350 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %349, i32 %245) #8
  %351 = mul <4 x i32> %350, <i32 5793, i32 5793, i32 5793, i32 5793>
  %352 = add <4 x i32> %351, <i32 2048, i32 2048, i32 2048, i32 2048>
  %353 = ashr <4 x i32> %352, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %353, <4 x i32>* %199, align 16
  %354 = getelementptr inbounds i32, i32* %1, i64 24
  %355 = bitcast i32* %354 to <4 x i32>*
  %356 = load <4 x i32>, <4 x i32>* %355, align 16
  %357 = add <4 x i32> %356, %305
  %358 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %357, i32 %245) #8
  %359 = mul <4 x i32> %358, <i32 5793, i32 5793, i32 5793, i32 5793>
  %360 = add <4 x i32> %359, <i32 2048, i32 2048, i32 2048, i32 2048>
  %361 = ashr <4 x i32> %360, <i32 12, i32 12, i32 12, i32 12>
  store <4 x i32> %361, <4 x i32>* %202, align 16
  %362 = getelementptr inbounds i32, i32* %1, i64 28
  %363 = bitcast i32* %362 to <4 x i32>*
  %364 = load <4 x i32>, <4 x i32>* %363, align 16
  %365 = add <4 x i32> %364, %305
  %366 = call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %365, i32 %245) #8
  br label %367

367:                                              ; preds = %247, %301
  %368 = phi <4 x i32> [ %300, %247 ], [ %366, %301 ]
  %369 = phi <4 x i32> [ %296, %247 ], [ %361, %301 ]
  %370 = phi <4 x i32> [ %289, %247 ], [ %353, %301 ]
  %371 = phi <4 x i32> [ %282, %247 ], [ %345, %301 ]
  %372 = phi <4 x i32> [ %275, %247 ], [ %337, %301 ]
  %373 = phi <4 x i32> [ %268, %247 ], [ %329, %301 ]
  %374 = phi <4 x i32> [ %261, %247 ], [ %321, %301 ]
  %375 = phi <4 x i32> [ %253, %247 ], [ %312, %301 ]
  %376 = mul <4 x i32> %368, <i32 5793, i32 5793, i32 5793, i32 5793>
  %377 = add <4 x i32> %376, <i32 2048, i32 2048, i32 2048, i32 2048>
  %378 = ashr <4 x i32> %377, <i32 12, i32 12, i32 12, i32 12>
  %379 = shufflevector <4 x i32> %375, <4 x i32> %374, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %380 = bitcast <4 x i32> %379 to <2 x i64>
  %381 = shufflevector <4 x i32> %375, <4 x i32> %374, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %382 = bitcast <4 x i32> %381 to <2 x i64>
  %383 = shufflevector <4 x i32> %373, <4 x i32> %372, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %384 = bitcast <4 x i32> %383 to <2 x i64>
  %385 = shufflevector <4 x i32> %373, <4 x i32> %372, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %386 = bitcast <4 x i32> %385 to <2 x i64>
  %387 = shufflevector <2 x i64> %380, <2 x i64> %384, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %387, <2 x i64>* %8, align 16
  %388 = shufflevector <2 x i64> %380, <2 x i64> %384, <2 x i32> <i32 1, i32 3>
  %389 = getelementptr inbounds i32, i32* %1, i64 8
  %390 = bitcast i32* %389 to <2 x i64>*
  store <2 x i64> %388, <2 x i64>* %390, align 16
  %391 = shufflevector <2 x i64> %382, <2 x i64> %386, <2 x i32> <i32 0, i32 2>
  %392 = getelementptr inbounds i32, i32* %1, i64 16
  %393 = bitcast i32* %392 to <2 x i64>*
  store <2 x i64> %391, <2 x i64>* %393, align 16
  %394 = shufflevector <2 x i64> %382, <2 x i64> %386, <2 x i32> <i32 1, i32 3>
  %395 = getelementptr inbounds i32, i32* %1, i64 24
  %396 = bitcast i32* %395 to <2 x i64>*
  store <2 x i64> %394, <2 x i64>* %396, align 16
  %397 = shufflevector <4 x i32> %371, <4 x i32> %370, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %398 = bitcast <4 x i32> %397 to <2 x i64>
  %399 = shufflevector <4 x i32> %371, <4 x i32> %370, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %400 = bitcast <4 x i32> %399 to <2 x i64>
  %401 = shufflevector <4 x i32> %369, <4 x i32> %378, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %402 = bitcast <4 x i32> %401 to <2 x i64>
  %403 = shufflevector <4 x i32> %369, <4 x i32> %378, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %404 = bitcast <4 x i32> %403 to <2 x i64>
  %405 = shufflevector <2 x i64> %398, <2 x i64> %402, <2 x i32> <i32 0, i32 2>
  %406 = getelementptr inbounds i32, i32* %1, i64 4
  %407 = bitcast i32* %406 to <2 x i64>*
  store <2 x i64> %405, <2 x i64>* %407, align 16
  %408 = shufflevector <2 x i64> %398, <2 x i64> %402, <2 x i32> <i32 1, i32 3>
  %409 = getelementptr inbounds i32, i32* %1, i64 12
  %410 = bitcast i32* %409 to <2 x i64>*
  store <2 x i64> %408, <2 x i64>* %410, align 16
  %411 = shufflevector <2 x i64> %400, <2 x i64> %404, <2 x i32> <i32 0, i32 2>
  %412 = getelementptr inbounds i32, i32* %1, i64 20
  %413 = bitcast i32* %412 to <2 x i64>*
  store <2 x i64> %411, <2 x i64>* %413, align 16
  %414 = shufflevector <2 x i64> %400, <2 x i64> %404, <2 x i32> <i32 1, i32 3>
  %415 = getelementptr inbounds i32, i32* %1, i64 28
  %416 = bitcast i32* %415 to <2 x i64>*
  store <2 x i64> %414, <2 x i64>* %416, align 16
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %7) #8
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32>, i32) #7

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32>, i32) #7

; Function Attrs: nofree nounwind ssp uwtable
define internal void @fdct4x8_sse4_1(<2 x i64>* nocapture readonly, <2 x i64>* nocapture, i32, i32) #2 {
  %5 = add nsw i32 %2, -10
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 32
  %8 = load i32, i32* %7, align 16
  %9 = insertelement <4 x i32> undef, i32 %8, i32 0
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> zeroinitializer
  %11 = sub nsw i32 0, %8
  %12 = insertelement <4 x i32> undef, i32 %11, i32 0
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> zeroinitializer
  %14 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 48
  %15 = load i32, i32* %14, align 16
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = shufflevector <4 x i32> %16, <4 x i32> undef, <4 x i32> zeroinitializer
  %18 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 16
  %19 = load i32, i32* %18, align 16
  %20 = insertelement <4 x i32> undef, i32 %19, i32 0
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> zeroinitializer
  %22 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 56
  %23 = load i32, i32* %22, align 16
  %24 = insertelement <4 x i32> undef, i32 %23, i32 0
  %25 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> zeroinitializer
  %26 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 8
  %27 = load i32, i32* %26, align 16
  %28 = insertelement <4 x i32> undef, i32 %27, i32 0
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> zeroinitializer
  %30 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 24
  %31 = load i32, i32* %30, align 16
  %32 = insertelement <4 x i32> undef, i32 %31, i32 0
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> zeroinitializer
  %34 = getelementptr inbounds [7 x [64 x i32]], [7 x [64 x i32]]* @av1_cospi_arr_data, i64 0, i64 %6, i64 40
  %35 = load i32, i32* %34, align 16
  %36 = insertelement <4 x i32> undef, i32 %35, i32 0
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> zeroinitializer
  %38 = add nsw i32 %2, -1
  %39 = shl i32 1, %38
  %40 = insertelement <4 x i32> undef, i32 %39, i32 0
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> zeroinitializer
  %42 = mul nsw i32 %3, 7
  %43 = bitcast <2 x i64>* %0 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 16
  %45 = sext i32 %42 to i64
  %46 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %45
  %47 = bitcast <2 x i64>* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 16
  %49 = add <4 x i32> %48, %44
  %50 = sub <4 x i32> %44, %48
  %51 = mul i32 %3, 6
  %52 = sext i32 %3 to i64
  %53 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %52
  %54 = bitcast <2 x i64>* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 16
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %56
  %58 = bitcast <2 x i64>* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 16
  %60 = add <4 x i32> %59, %55
  %61 = sub <4 x i32> %55, %59
  %62 = shl nsw i32 %3, 1
  %63 = mul i32 %3, 5
  %64 = sext i32 %62 to i64
  %65 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %64
  %66 = bitcast <2 x i64>* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 16
  %68 = sext i32 %63 to i64
  %69 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %68
  %70 = bitcast <2 x i64>* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 16
  %72 = add <4 x i32> %71, %67
  %73 = sub <4 x i32> %67, %71
  %74 = mul nsw i32 %3, 3
  %75 = shl i32 %3, 2
  %76 = sext i32 %74 to i64
  %77 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %76
  %78 = bitcast <2 x i64>* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 16
  %80 = sext i32 %75 to i64
  %81 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %80
  %82 = bitcast <2 x i64>* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 16
  %84 = add <4 x i32> %83, %79
  %85 = sub <4 x i32> %79, %83
  %86 = add <4 x i32> %84, %49
  %87 = sub <4 x i32> %49, %84
  %88 = add <4 x i32> %72, %60
  %89 = sub <4 x i32> %60, %72
  %90 = mul <4 x i32> %73, %13
  %91 = mul <4 x i32> %61, %10
  %92 = add <4 x i32> %91, %41
  %93 = add <4 x i32> %92, %90
  %94 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %93, i32 %2) #8
  %95 = mul <4 x i32> %73, %10
  %96 = mul <4 x i32> %13, %61
  %97 = sub <4 x i32> %41, %96
  %98 = add <4 x i32> %97, %95
  %99 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %98, i32 %2) #8
  %100 = mul <4 x i32> %86, %10
  %101 = mul <4 x i32> %88, %10
  %102 = add <4 x i32> %101, %41
  %103 = add <4 x i32> %102, %100
  %104 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %103, i32 %2) #8
  %105 = sub <4 x i32> %41, %101
  %106 = add <4 x i32> %105, %100
  %107 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %106, i32 %2) #8
  %108 = mul <4 x i32> %89, %17
  %109 = mul <4 x i32> %87, %21
  %110 = add <4 x i32> %108, %41
  %111 = add <4 x i32> %110, %109
  %112 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %111, i32 %2) #8
  %113 = mul <4 x i32> %87, %17
  %114 = mul <4 x i32> %21, %89
  %115 = sub <4 x i32> %41, %114
  %116 = add <4 x i32> %115, %113
  %117 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %116, i32 %2) #8
  %118 = add <4 x i32> %94, %85
  %119 = sub <4 x i32> %85, %94
  %120 = sub <4 x i32> %50, %99
  %121 = add <4 x i32> %99, %50
  %122 = mul <4 x i32> %118, %25
  %123 = mul <4 x i32> %121, %29
  %124 = add <4 x i32> %122, %41
  %125 = add <4 x i32> %124, %123
  %126 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %125, i32 %2) #8
  %127 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %52
  %128 = bitcast <2 x i64>* %127 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %128, align 16
  %129 = mul <4 x i32> %121, %25
  %130 = mul <4 x i32> %29, %118
  %131 = sub <4 x i32> %41, %130
  %132 = add <4 x i32> %131, %129
  %133 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %132, i32 %2) #8
  %134 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %45
  %135 = bitcast <2 x i64>* %134 to <4 x i32>*
  store <4 x i32> %133, <4 x i32>* %135, align 16
  %136 = mul <4 x i32> %119, %33
  %137 = mul <4 x i32> %120, %37
  %138 = add <4 x i32> %136, %41
  %139 = add <4 x i32> %138, %137
  %140 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %139, i32 %2) #8
  %141 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %68
  %142 = bitcast <2 x i64>* %141 to <4 x i32>*
  store <4 x i32> %140, <4 x i32>* %142, align 16
  %143 = mul <4 x i32> %120, %33
  %144 = mul <4 x i32> %37, %119
  %145 = sub <4 x i32> %41, %144
  %146 = add <4 x i32> %145, %143
  %147 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %146, i32 %2) #8
  %148 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %76
  %149 = bitcast <2 x i64>* %148 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %149, align 16
  %150 = bitcast <2 x i64>* %1 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %150, align 16
  %151 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %80
  %152 = bitcast <2 x i64>* %151 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %152, align 16
  %153 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %64
  %154 = bitcast <2 x i64>* %153 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %154, align 16
  %155 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 %56
  %156 = bitcast <2 x i64>* %155 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %156, align 16
  ret void
}

declare void @av1_idtx32_sse4_1(<2 x i64>*, <2 x i64>*, i32, i32) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
