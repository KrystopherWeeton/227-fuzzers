; ModuleID = '../../media/base/supported_video_decoder_config.cc'
source_filename = "../../media/base/supported_video_decoder_config.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.media::SupportedVideoDecoderConfig" = type <{ i32, i32, %"class.gfx::Size", %"class.gfx::Size", i8, i8, [2 x i8] }>
%"class.gfx::Size" = type { i32, i32 }
%"class.media::VideoDecoderConfig" = type <{ i32, i32, i32, i32, %"struct.media::VideoTransformation", %"class.gfx::Size", %"class.gfx::Rect", %"class.gfx::Size", %"class.std::__1::vector", i32, %"class.media::VideoColorSpace", %"class.absl::optional", i8, [3 x i8] }>
%"struct.media::VideoTransformation" = type <{ i32, i8, [3 x i8] }>
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.media::VideoColorSpace" = type { i8, i8, i8, i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.gfx::HDRMetadata" }
%"struct.gfx::HDRMetadata" = type { %"struct.gfx::MasteringMetadata", i32, i32 }
%"struct.gfx::MasteringMetadata" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", float, float }
%"class.gfx::PointF" = type { float, float }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.media::SupportedVideoDecoderConfig"*, %"struct.media::SupportedVideoDecoderConfig"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.media::SupportedVideoDecoderConfig"* }

@_ZN5media27SupportedVideoDecoderConfigC1Ev = hidden unnamed_addr alias void (%"struct.media::SupportedVideoDecoderConfig"*), void (%"struct.media::SupportedVideoDecoderConfig"*)* @_ZN5media27SupportedVideoDecoderConfigC2Ev
@_ZN5media27SupportedVideoDecoderConfigC1ENS_17VideoCodecProfileES1_RKN3gfx4SizeES5_bb = hidden unnamed_addr alias void (%"struct.media::SupportedVideoDecoderConfig"*, i32, i32, %"class.gfx::Size"*, %"class.gfx::Size"*, i1, i1), void (%"struct.media::SupportedVideoDecoderConfig"*, i32, i32, %"class.gfx::Size"*, %"class.gfx::Size"*, i1, i1)* @_ZN5media27SupportedVideoDecoderConfigC2ENS_17VideoCodecProfileES1_RKN3gfx4SizeES5_bb
@_ZN5media27SupportedVideoDecoderConfigD1Ev = hidden unnamed_addr alias void (%"struct.media::SupportedVideoDecoderConfig"*), void (%"struct.media::SupportedVideoDecoderConfig"*)* @_ZN5media27SupportedVideoDecoderConfigD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5media27SupportedVideoDecoderConfigC2Ev(%"struct.media::SupportedVideoDecoderConfig"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 0
  store i32 -1, i32* %2, align 4
  %3 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 1
  store i32 -1, i32* %3, align 4
  %4 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 2, i32 0
  %5 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 4
  %6 = bitcast i32* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 16, i1 false)
  store i8 1, i8* %5, align 4
  %7 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 5
  store i8 0, i8* %7, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media27SupportedVideoDecoderConfigC2ENS_17VideoCodecProfileES1_RKN3gfx4SizeES5_bb(%"struct.media::SupportedVideoDecoderConfig"* nocapture, i32, i32, %"class.gfx::Size"* nocapture readonly dereferenceable(8), %"class.gfx::Size"* nocapture readonly dereferenceable(8), i1 zeroext, i1 zeroext) unnamed_addr #1 align 2 {
  %8 = zext i1 %5 to i8
  %9 = zext i1 %6 to i8
  %10 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 0
  store i32 %1, i32* %10, align 4
  %11 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 1
  store i32 %2, i32* %11, align 4
  %12 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 2
  %13 = bitcast %"class.gfx::Size"* %3 to i64*
  %14 = bitcast %"class.gfx::Size"* %12 to i64*
  %15 = load i64, i64* %13, align 4
  store i64 %15, i64* %14, align 4
  %16 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 3
  %17 = bitcast %"class.gfx::Size"* %4 to i64*
  %18 = bitcast %"class.gfx::Size"* %16 to i64*
  %19 = load i64, i64* %17, align 4
  store i64 %19, i64* %18, align 4
  %20 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 4
  store i8 %8, i8* %20, align 4
  %21 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 5
  store i8 %9, i8* %21, align 1
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5media27SupportedVideoDecoderConfigD2Ev(%"struct.media::SupportedVideoDecoderConfig"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5media27SupportedVideoDecoderConfig7MatchesERKNS_18VideoDecoderConfigE(%"struct.media::SupportedVideoDecoderConfig"* nocapture readonly, %"class.media::VideoDecoderConfig"* nocapture readonly dereferenceable(144)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.media::VideoDecoderConfig", %"class.media::VideoDecoderConfig"* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %4, %6
  br i1 %7, label %44, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %4, %10
  br i1 %11, label %44, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.media::VideoDecoderConfig", %"class.media::VideoDecoderConfig"* %1, i64 0, i32 9
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 4
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %44, label %24

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 5
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %44

24:                                               ; preds = %16, %20
  %25 = getelementptr inbounds %"class.media::VideoDecoderConfig", %"class.media::VideoDecoderConfig"* %1, i64 0, i32 5, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 2, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %26, %28
  br i1 %29, label %44, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.media::VideoDecoderConfig", %"class.media::VideoDecoderConfig"* %1, i64 0, i32 5, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 2, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %32, %34
  br i1 %35, label %44, label %36

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 3, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %26, %38
  br i1 %39, label %44, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %0, i64 0, i32 3, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = icmp sle i32 %32, %42
  br label %44

44:                                               ; preds = %40, %36, %30, %24, %20, %16, %2, %8
  %45 = phi i1 [ false, %8 ], [ false, %2 ], [ false, %16 ], [ false, %20 ], [ false, %24 ], [ false, %30 ], [ false, %36 ], [ %43, %40 ]
  ret i1 %45
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5media29IsVideoDecoderConfigSupportedERKNSt3__16vectorINS_27SupportedVideoDecoderConfigENS0_9allocatorIS2_EEEERKNS_18VideoDecoderConfigE(%"class.std::__1::vector.1"* nocapture readonly dereferenceable(24), %"class.media::VideoDecoderConfig"* nocapture readonly dereferenceable(144)) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %4 = load %"struct.media::SupportedVideoDecoderConfig"*, %"struct.media::SupportedVideoDecoderConfig"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %6 = load %"struct.media::SupportedVideoDecoderConfig"*, %"struct.media::SupportedVideoDecoderConfig"** %5, align 8
  %7 = icmp eq %"struct.media::SupportedVideoDecoderConfig"* %4, %6
  br i1 %7, label %55, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.media::VideoDecoderConfig", %"class.media::VideoDecoderConfig"* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.media::VideoDecoderConfig", %"class.media::VideoDecoderConfig"* %1, i64 0, i32 9
  %12 = getelementptr inbounds %"class.media::VideoDecoderConfig", %"class.media::VideoDecoderConfig"* %1, i64 0, i32 5, i32 0
  %13 = getelementptr inbounds %"class.media::VideoDecoderConfig", %"class.media::VideoDecoderConfig"* %1, i64 0, i32 5, i32 1
  br label %14

14:                                               ; preds = %8, %52
  %15 = phi %"struct.media::SupportedVideoDecoderConfig"* [ %4, %8 ], [ %53, %52 ]
  %16 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %15, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = icmp slt i32 %10, %17
  br i1 %18, label %52, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %15, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 %10, %21
  br i1 %22, label %52, label %23

23:                                               ; preds = %19
  %24 = load i32, i32* %11, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %15, i64 0, i32 4
  %28 = load i8, i8* %27, align 4, !range !2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %52, label %34

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %15, i64 0, i32 5
  %32 = load i8, i8* %31, align 1, !range !2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %52

34:                                               ; preds = %30, %26
  %35 = load i32, i32* %12, align 4
  %36 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %15, i64 0, i32 2, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %35, %37
  br i1 %38, label %52, label %39

39:                                               ; preds = %34
  %40 = load i32, i32* %13, align 4
  %41 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %15, i64 0, i32 2, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %40, %42
  br i1 %43, label %52, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %15, i64 0, i32 3, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = icmp sgt i32 %35, %46
  br i1 %47, label %52, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %15, i64 0, i32 3, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = icmp sgt i32 %40, %50
  br i1 %51, label %52, label %55

52:                                               ; preds = %48, %44, %39, %34, %30, %26, %14, %19
  %53 = getelementptr inbounds %"struct.media::SupportedVideoDecoderConfig", %"struct.media::SupportedVideoDecoderConfig"* %15, i64 1
  %54 = icmp eq %"struct.media::SupportedVideoDecoderConfig"* %53, %6
  br i1 %54, label %55, label %14

55:                                               ; preds = %52, %48, %2
  %56 = phi i1 [ false, %2 ], [ true, %48 ], [ false, %52 ]
  ret i1 %56
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
