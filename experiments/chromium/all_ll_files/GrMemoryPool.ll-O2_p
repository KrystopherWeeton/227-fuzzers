; ModuleID = '../../third_party/skia/src/gpu/GrMemoryPool.cpp'
source_filename = "../../third_party/skia/src/gpu/GrMemoryPool.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrMemoryPool = type { %class.GrBlockAllocator }
%class.GrBlockAllocator = type { %"class.GrBlockAllocator::Block"*, i64, %"class.GrBlockAllocator::Block" }
%"class.GrBlockAllocator::Block" = type { %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"*, i32, i32, i32, i32 }
%"struct.GrMemoryPool::Header" = type { i32, i32 }

@.str = private unnamed_addr constant [50 x i8] c"../../third_party/skia/src/gpu/GrBlockAllocator.h\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"Allocation too large (%zu bytes requested)\00", align 1

@_ZN12GrMemoryPoolC1Emm = hidden unnamed_addr alias void (%class.GrMemoryPool*, i64, i64), void (%class.GrMemoryPool*, i64, i64)* @_ZN12GrMemoryPoolC2Emm
@_ZN12GrMemoryPoolD1Ev = hidden unnamed_addr alias void (%class.GrMemoryPool*), void (%class.GrMemoryPool*)* @_ZN12GrMemoryPoolD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrMemoryPool* @_ZN12GrMemoryPool4MakeEmm(i64, i64) local_unnamed_addr #0 align 2 {
  %3 = icmp ult i64 %0, 536870912
  %4 = select i1 %3, i64 %0, i64 536870912
  %5 = icmp ugt i64 %4, 1024
  %6 = select i1 %5, i64 %4, i64 1024
  %7 = icmp ult i64 %1, 536870912
  %8 = select i1 %7, i64 %1, i64 536870912
  %9 = icmp ugt i64 %8, 1024
  %10 = select i1 %9, i64 %8, i64 1024
  %11 = tail call i8* @_Znwm(i64 %6) #6
  %12 = bitcast i8* %11 to %class.GrMemoryPool*
  %13 = bitcast i8* %11 to %class.GrBlockAllocator*
  %14 = add nsw i64 %6, -48
  tail call void @_ZN16GrBlockAllocatorC1ENS_12GrowthPolicyEmm(%class.GrBlockAllocator* nonnull %13, i32 0, i64 %10, i64 %14) #6
  ret %class.GrMemoryPool* %12
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12GrMemoryPoolC2Emm(%class.GrMemoryPool*, i64, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.GrMemoryPool, %class.GrMemoryPool* %0, i64 0, i32 0
  %5 = add i64 %1, -48
  tail call void @_ZN16GrBlockAllocatorC1ENS_12GrowthPolicyEmm(%class.GrBlockAllocator* %4, i32 0, i64 %2, i64 %5) #6
  ret void
}

declare void @_ZN16GrBlockAllocatorC1ENS_12GrowthPolicyEmm(%class.GrBlockAllocator*, i32, i64, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12GrMemoryPoolD2Ev(%class.GrMemoryPool*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.GrMemoryPool, %class.GrMemoryPool* %0, i64 0, i32 0
  tail call void @_ZN16GrBlockAllocator5resetEv(%class.GrBlockAllocator* %2) #6
  %3 = getelementptr inbounds %class.GrMemoryPool, %class.GrMemoryPool* %0, i64 0, i32 0, i32 2
  tail call void @_ZN16GrBlockAllocator5BlockD1Ev(%"class.GrBlockAllocator::Block"* %3) #6
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK12GrMemoryPool11reportLeaksEv(%class.GrMemoryPool* nocapture) local_unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN12GrMemoryPool8allocateEm(%class.GrMemoryPool*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrMemoryPool, %class.GrMemoryPool* %0, i64 0, i32 0
  %4 = icmp ugt i64 %1, 536870912
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 571, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i64 %1) #7, !noalias !2
  unreachable

6:                                                ; preds = %2
  %7 = trunc i64 %1 to i32
  %8 = getelementptr inbounds %class.GrMemoryPool, %class.GrMemoryPool* %0, i64 0, i32 0, i32 0
  %9 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %8, align 16, !noalias !2
  %10 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %9, i64 0, i32 3
  %11 = load i32, i32* %10, align 4, !noalias !2
  %12 = add i32 %11, 23
  %13 = and i32 %12, -16
  %14 = add nsw i32 %13, %7
  %15 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %9, i64 0, i32 2
  %16 = load i32, i32* %15, align 8, !noalias !2
  %17 = icmp sgt i32 %14, %16
  br i1 %17, label %18, label %26

18:                                               ; preds = %6
  %19 = add nuw nsw i32 %7, 48
  tail call void @_ZN16GrBlockAllocator8addBlockEii(%class.GrBlockAllocator* %3, i32 %19, i32 536870960) #6, !noalias !2
  %20 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %8, align 16, !noalias !2
  %21 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %20, i64 0, i32 3
  %22 = load i32, i32* %21, align 4, !noalias !2
  %23 = add i32 %22, 23
  %24 = and i32 %23, -16
  %25 = add nsw i32 %24, %7
  br label %26

26:                                               ; preds = %6, %18
  %27 = phi i32 [ %22, %18 ], [ %11, %6 ]
  %28 = phi %"class.GrBlockAllocator::Block"* [ %20, %18 ], [ %9, %6 ]
  %29 = phi i32 [ %24, %18 ], [ %13, %6 ]
  %30 = phi i32 [ %25, %18 ], [ %14, %6 ]
  %31 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %28, i64 0, i32 3
  store i32 %30, i32* %31, align 4, !noalias !2
  %32 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %8, align 16, !noalias !2
  %33 = add i32 %29, -8
  %34 = bitcast %"class.GrBlockAllocator::Block"* %32 to i8*
  %35 = sext i32 %33 to i64
  %36 = getelementptr inbounds i8, i8* %34, i64 %35
  %37 = bitcast i8* %36 to i32*
  store i32 %27, i32* %37, align 4
  %38 = getelementptr inbounds i8, i8* %36, i64 4
  %39 = bitcast i8* %38 to i32*
  store i32 %30, i32* %39, align 4
  %40 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %32, i64 0, i32 4
  %41 = load i32, i32* %40, align 8
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %40, align 8
  %43 = sext i32 %29 to i64
  %44 = getelementptr inbounds i8, i8* %34, i64 %43
  ret i8* %44
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12GrMemoryPool7releaseEPv(%class.GrMemoryPool*, i8*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint i8* %1 to i64
  %4 = add i64 %3, -8
  %5 = inttoptr i64 %4 to %"struct.GrMemoryPool::Header"*
  %6 = getelementptr inbounds %"struct.GrMemoryPool::Header", %"struct.GrMemoryPool::Header"* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = sext i32 %7 to i64
  %9 = sub i64 %4, %8
  %10 = and i64 %9, -16
  %11 = inttoptr i64 %10 to %"class.GrBlockAllocator::Block"*
  %12 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %11, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = getelementptr inbounds %class.GrMemoryPool, %class.GrMemoryPool* %0, i64 0, i32 0
  tail call void @_ZN16GrBlockAllocator12releaseBlockEPNS_5BlockE(%class.GrBlockAllocator* %16, %"class.GrBlockAllocator::Block"* %11) #6
  br label %26

17:                                               ; preds = %2
  %18 = add nsw i32 %13, -1
  store i32 %18, i32* %12, align 8
  %19 = getelementptr inbounds %"struct.GrMemoryPool::Header", %"struct.GrMemoryPool::Header"* %5, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %11, i64 0, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, %20
  br i1 %23, label %24, label %26

24:                                               ; preds = %17
  %25 = load i32, i32* %6, align 4
  store i32 %25, i32* %21, align 4
  br label %26

26:                                               ; preds = %24, %17, %15
  ret void
}

declare void @_ZN16GrBlockAllocator12releaseBlockEPNS_5BlockE(%class.GrBlockAllocator*, %"class.GrBlockAllocator::Block"*) local_unnamed_addr #2

declare void @_ZN16GrBlockAllocator5resetEv(%class.GrBlockAllocator*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN16GrBlockAllocator5BlockD1Ev(%"class.GrBlockAllocator::Block"*) unnamed_addr #4

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #5

declare void @_ZN16GrBlockAllocator8addBlockEii(%class.GrBlockAllocator*, i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN16GrBlockAllocator8allocateILm16ELm8EEENS_9ByteRangeEm: argument 0"}
!4 = distinct !{!4, !"_ZN16GrBlockAllocator8allocateILm16ELm8EEENS_9ByteRangeEm"}
