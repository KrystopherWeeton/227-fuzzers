; ModuleID = '../../extensions/browser/api/declarative_net_request/global_rules_tracker.cc'
source_filename = "../../extensions/browser/api/declarative_net_request/global_rules_tracker.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.extensions::declarative_net_request::GlobalRulesTracker" = type { i64, %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionRegistry"* }
%"class.extensions::ExtensionPrefs" = type { %class.KeyedService, %"class.content::BrowserContext"*, %class.PrefService*, %"class.base::FilePath", %class.ExtensionPrefValueMap*, %"class.base::Clock"*, i8, [7 x i8], %"class.base::ObserverList" }
%class.KeyedService = type { i32 (...)** }
%"class.content::BrowserContext" = type opaque
%class.PrefService = type { i32 (...)**, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.1", %class.scoped_refptr.21, %"class.base::RepeatingCallback.22", %class.scoped_refptr.23, %"class.std::__1::unordered_map" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.PrefNotifierImpl* }
%class.PrefNotifierImpl = type opaque
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.PrefValueStore* }
%class.PrefValueStore = type { i32 (...)**, [7 x %"class.PrefValueStore::PrefStoreKeeper"], %"class.base::RepeatingCallback", %class.PrefNotifier*, %"class.std::__1::map", i8, %"class.std::__1::unique_ptr.12" }
%"class.PrefValueStore::PrefStoreKeeper" = type <{ %"class.PrefStore::Observer", %class.PrefValueStore*, %class.scoped_refptr, i32, [4 x i8] }>
%"class.PrefStore::Observer" = type { i32 (...)** }
%class.scoped_refptr = type { %class.PrefStore* }
%class.PrefStore = type <{ i32 (...)**, %"class.base::RefCounted", [4 x i8] }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.4 }
%class.scoped_refptr.4 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.PrefNotifier = type opaque
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i64 }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.PrefValueStore::Delegate"* }
%"class.PrefValueStore::Delegate" = type { i32 (...)** }
%class.scoped_refptr.21 = type { %class.PersistentPrefStore* }
%class.PersistentPrefStore = type { %class.WriteablePrefStore.base, [4 x i8] }
%class.WriteablePrefStore.base = type { %class.PrefStore.base }
%class.PrefStore.base = type <{ i32 (...)**, %"class.base::RefCounted" }>
%"class.base::RepeatingCallback.22" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.scoped_refptr.23 = type { %class.PrefRegistry* }
%class.PrefRegistry = type opaque
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.24", %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.39", [4 x i8] }>
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26", %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { float }
%"class.base::FilePath" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%class.ExtensionPrefValueMap = type opaque
%"class.base::Clock" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.47" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.extensions::ExtensionRegistry" = type { %class.KeyedService, %"class.extensions::ExtensionSet", %"class.extensions::ExtensionSet", %"class.extensions::ExtensionSet", %"class.extensions::ExtensionSet", %"class.extensions::ExtensionSet", %"class.extensions::ExtensionSet", %"class.base::ObserverList.61", %"class.content::BrowserContext"* }
%"class.extensions::ExtensionSet" = type { %"class.std::__1::map.52" }
%"class.std::__1::map.52" = type { %"class.std::__1::__tree.53" }
%"class.std::__1::__tree.53" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.54", %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"class.base::ObserverList.61" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.62", i64, i32, [4 x i8] }>
%"class.base::LinkedList.62" = type { %"class.base::LinkNode.63" }
%"class.base::LinkNode.63" = type { %"class.base::internal::LinkNodeBase" }
%"class.std::__1::vector.68" = type { %"class.std::__1::__vector_base.69" }
%"class.std::__1::__vector_base.69" = type { %"class.std::__1::unique_ptr.70"*, %"class.std::__1::unique_ptr.70"*, %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.extensions::ExtensionInfo"* }
%"struct.extensions::ExtensionInfo" = type <{ %"class.std::__1::unique_ptr.73", %"class.std::__1::basic_string", %"class.base::FilePath", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.base::DictionaryValue"* }
%"class.base::DictionaryValue" = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.76" }
%"union.absl::variant_internal::DestructibleUnionImpl.76" = type { %"union.absl::variant_internal::DestructibleUnionImpl.77" }
%"union.absl::variant_internal::DestructibleUnionImpl.77" = type { %"union.absl::variant_internal::DestructibleUnionImpl.78" }
%"union.absl::variant_internal::DestructibleUnionImpl.78" = type { %"union.absl::variant_internal::DestructibleUnionImpl.79" }
%"union.absl::variant_internal::DestructibleUnionImpl.79" = type { %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.std::__1::unique_ptr.70"* }

@.str = private unnamed_addr constant [19 x i8] c"FlatBuffers 1.12.0\00", align 1
@_ZN11flatbuffers25flatbuffer_version_stringE = weak hidden local_unnamed_addr global i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), align 8

@_ZN10extensions23declarative_net_request18GlobalRulesTrackerC1EPNS_14ExtensionPrefsEPNS_17ExtensionRegistryE = hidden unnamed_addr alias void (%"class.extensions::declarative_net_request::GlobalRulesTracker"*, %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionRegistry"*), void (%"class.extensions::declarative_net_request::GlobalRulesTracker"*, %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionRegistry"*)* @_ZN10extensions23declarative_net_request18GlobalRulesTrackerC2EPNS_14ExtensionPrefsEPNS_17ExtensionRegistryE
@_ZN10extensions23declarative_net_request18GlobalRulesTrackerD1Ev = hidden unnamed_addr alias void (%"class.extensions::declarative_net_request::GlobalRulesTracker"*), void (%"class.extensions::declarative_net_request::GlobalRulesTracker"*)* @_ZN10extensions23declarative_net_request18GlobalRulesTrackerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23declarative_net_request18GlobalRulesTrackerC2EPNS_14ExtensionPrefsEPNS_17ExtensionRegistryE(%"class.extensions::declarative_net_request::GlobalRulesTracker"* nocapture, %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionRegistry"*) unnamed_addr #0 align 2 {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.extensions::declarative_net_request::GlobalRulesTracker", %"class.extensions::declarative_net_request::GlobalRulesTracker"* %0, i64 0, i32 0
  %6 = tail call %"class.std::__1::vector.68"* @_ZNK10extensions14ExtensionPrefs26GetInstalledExtensionsInfoEb(%"class.extensions::ExtensionPrefs"* %1, i1 zeroext false) #7
  %7 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #7
  store i64 0, i64* %4, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.68", %"class.std::__1::vector.68"* %6, i64 0, i32 0, i32 0
  %9 = load %"class.std::__1::unique_ptr.70"*, %"class.std::__1::unique_ptr.70"** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.68", %"class.std::__1::vector.68"* %6, i64 0, i32 0, i32 1
  %11 = load %"class.std::__1::unique_ptr.70"*, %"class.std::__1::unique_ptr.70"** %10, align 8
  %12 = icmp eq %"class.std::__1::unique_ptr.70"* %9, %11
  br i1 %12, label %13, label %40

13:                                               ; preds = %54, %3
  %14 = phi i64 [ 0, %3 ], [ %55, %54 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #7
  %15 = icmp eq %"class.std::__1::vector.68"* %6, null
  br i1 %15, label %58, label %16

16:                                               ; preds = %13
  %17 = load %"class.std::__1::unique_ptr.70"*, %"class.std::__1::unique_ptr.70"** %8, align 8
  %18 = icmp eq %"class.std::__1::unique_ptr.70"* %17, null
  br i1 %18, label %38, label %19

19:                                               ; preds = %16
  %20 = bitcast %"class.std::__1::unique_ptr.70"* %17 to i8*
  %21 = load %"class.std::__1::unique_ptr.70"*, %"class.std::__1::unique_ptr.70"** %10, align 8
  %22 = icmp eq %"class.std::__1::unique_ptr.70"* %21, %17
  br i1 %22, label %36, label %23

23:                                               ; preds = %19, %31
  %24 = phi %"class.std::__1::unique_ptr.70"* [ %25, %31 ], [ %21, %19 ]
  %25 = getelementptr inbounds %"class.std::__1::unique_ptr.70", %"class.std::__1::unique_ptr.70"* %24, i64 -1
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr.70", %"class.std::__1::unique_ptr.70"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = load %"struct.extensions::ExtensionInfo"*, %"struct.extensions::ExtensionInfo"** %26, align 8
  store %"struct.extensions::ExtensionInfo"* null, %"struct.extensions::ExtensionInfo"** %26, align 8
  %28 = icmp eq %"struct.extensions::ExtensionInfo"* %27, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %23
  call void @_ZN10extensions13ExtensionInfoD1Ev(%"struct.extensions::ExtensionInfo"* nonnull %27) #7
  %30 = bitcast %"struct.extensions::ExtensionInfo"* %27 to i8*
  call void @_ZdlPv(i8* %30) #8
  br label %31

31:                                               ; preds = %29, %23
  %32 = icmp eq %"class.std::__1::unique_ptr.70"* %25, %17
  br i1 %32, label %33, label %23

33:                                               ; preds = %31
  %34 = bitcast %"class.std::__1::vector.68"* %6 to i8**
  %35 = load i8*, i8** %34, align 8
  br label %36

36:                                               ; preds = %33, %19
  %37 = phi i8* [ %35, %33 ], [ %20, %19 ]
  store %"class.std::__1::unique_ptr.70"* %17, %"class.std::__1::unique_ptr.70"** %10, align 8
  call void @_ZdlPv(i8* %37) #8
  br label %38

38:                                               ; preds = %36, %16
  %39 = bitcast %"class.std::__1::vector.68"* %6 to i8*
  call void @_ZdlPv(i8* %39) #8
  br label %58

40:                                               ; preds = %3, %54
  %41 = phi i64 [ %55, %54 ], [ 0, %3 ]
  %42 = phi %"class.std::__1::unique_ptr.70"* [ %56, %54 ], [ %9, %3 ]
  %43 = getelementptr inbounds %"class.std::__1::unique_ptr.70", %"class.std::__1::unique_ptr.70"* %42, i64 0, i32 0, i32 0, i32 0
  %44 = load %"struct.extensions::ExtensionInfo"*, %"struct.extensions::ExtensionInfo"** %43, align 8
  %45 = getelementptr inbounds %"struct.extensions::ExtensionInfo", %"struct.extensions::ExtensionInfo"* %44, i64 0, i32 3
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 8
  br i1 %47, label %54, label %48

48:                                               ; preds = %40
  %49 = getelementptr inbounds %"struct.extensions::ExtensionInfo", %"struct.extensions::ExtensionInfo"* %44, i64 0, i32 1
  %50 = call zeroext i1 @_ZNK10extensions14ExtensionPrefs30GetDNRAllocatedGlobalRuleCountERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPm(%"class.extensions::ExtensionPrefs"* %1, %"class.std::__1::basic_string"* dereferenceable(24) %49, i64* nonnull %4) #7
  %51 = load i64, i64* %4, align 8
  %52 = select i1 %50, i64 %51, i64 0
  %53 = add i64 %52, %41
  br label %54

54:                                               ; preds = %48, %40
  %55 = phi i64 [ %41, %40 ], [ %53, %48 ]
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr.70", %"class.std::__1::unique_ptr.70"* %42, i64 1
  %57 = icmp eq %"class.std::__1::unique_ptr.70"* %56, %11
  br i1 %57, label %13, label %40

58:                                               ; preds = %13, %38
  store i64 %14, i64* %5, align 8
  %59 = getelementptr inbounds %"class.extensions::declarative_net_request::GlobalRulesTracker", %"class.extensions::declarative_net_request::GlobalRulesTracker"* %0, i64 0, i32 1
  store %"class.extensions::ExtensionPrefs"* %1, %"class.extensions::ExtensionPrefs"** %59, align 8
  %60 = getelementptr inbounds %"class.extensions::declarative_net_request::GlobalRulesTracker", %"class.extensions::declarative_net_request::GlobalRulesTracker"* %0, i64 0, i32 2
  store %"class.extensions::ExtensionRegistry"* %2, %"class.extensions::ExtensionRegistry"** %60, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN10extensions23declarative_net_request18GlobalRulesTrackerD2Ev(%"class.extensions::declarative_net_request::GlobalRulesTracker"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK10extensions23declarative_net_request18GlobalRulesTracker37GetAllocatedGlobalRuleCountForTestingEv(%"class.extensions::declarative_net_request::GlobalRulesTracker"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.extensions::declarative_net_request::GlobalRulesTracker", %"class.extensions::declarative_net_request::GlobalRulesTracker"* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10extensions23declarative_net_request18GlobalRulesTracker27OnExtensionRuleCountUpdatedERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEm(%"class.extensions::declarative_net_request::GlobalRulesTracker"* nocapture, %"class.std::__1::basic_string"* dereferenceable(24), i64) local_unnamed_addr #0 align 2 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = getelementptr inbounds %"class.extensions::declarative_net_request::GlobalRulesTracker", %"class.extensions::declarative_net_request::GlobalRulesTracker"* %0, i64 0, i32 1
  %7 = load %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionPrefs"** %6, align 8
  %8 = tail call zeroext i1 @_ZNK10extensions14ExtensionPrefs26GetDNRKeepExcessAllocationERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.extensions::ExtensionPrefs"* %7, %"class.std::__1::basic_string"* dereferenceable(24) %1) #7
  %9 = tail call i32 @_ZN10extensions23declarative_net_request35GetStaticGuaranteedMinimumRuleCountEv() #7
  %10 = sext i32 %9 to i64
  %11 = icmp ult i64 %10, %2
  br i1 %11, label %24, label %12

12:                                               ; preds = %3
  br i1 %8, label %49, label %13

13:                                               ; preds = %12
  %14 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #7
  store i64 0, i64* %5, align 8
  %15 = load %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionPrefs"** %6, align 8
  %16 = call zeroext i1 @_ZNK10extensions14ExtensionPrefs30GetDNRAllocatedGlobalRuleCountERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPm(%"class.extensions::ExtensionPrefs"* %15, %"class.std::__1::basic_string"* dereferenceable(24) %1, i64* nonnull %5) #7
  br i1 %16, label %17, label %23

17:                                               ; preds = %13
  %18 = load i64, i64* %5, align 8
  %19 = getelementptr inbounds %"class.extensions::declarative_net_request::GlobalRulesTracker", %"class.extensions::declarative_net_request::GlobalRulesTracker"* %0, i64 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %18
  store i64 %21, i64* %19, align 8
  %22 = load %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionPrefs"** %6, align 8
  call void @_ZN10extensions14ExtensionPrefs30SetDNRAllocatedGlobalRuleCountERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEm(%"class.extensions::ExtensionPrefs"* %22, %"class.std::__1::basic_string"* dereferenceable(24) %1, i64 0) #7
  br label %23

23:                                               ; preds = %13, %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #7
  br label %49

24:                                               ; preds = %3
  %25 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #7
  store i64 0, i64* %4, align 8
  %26 = load %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionPrefs"** %6, align 8
  %27 = call zeroext i1 @_ZNK10extensions14ExtensionPrefs30GetDNRAllocatedGlobalRuleCountERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPm(%"class.extensions::ExtensionPrefs"* %26, %"class.std::__1::basic_string"* dereferenceable(24) %1, i64* nonnull %4) #7
  %28 = load i64, i64* %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #7
  %29 = call i32 @_ZN10extensions23declarative_net_request35GetStaticGuaranteedMinimumRuleCountEv() #7
  %30 = sext i32 %29 to i64
  %31 = sub i64 %2, %30
  %32 = icmp eq i64 %31, %28
  %33 = icmp ugt i64 %28, %31
  %34 = and i1 %8, %33
  %35 = or i1 %32, %34
  br i1 %35, label %49, label %36

36:                                               ; preds = %24
  %37 = getelementptr inbounds %"class.extensions::declarative_net_request::GlobalRulesTracker", %"class.extensions::declarative_net_request::GlobalRulesTracker"* %0, i64 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = sub i64 %38, %28
  %40 = add i64 %39, %31
  %41 = call i32 @_ZN10extensions23declarative_net_request24GetGlobalStaticRuleLimitEv() #7
  %42 = sext i32 %41 to i64
  %43 = icmp ugt i64 %40, %42
  br i1 %43, label %49, label %44

44:                                               ; preds = %36
  br i1 %8, label %45, label %47

45:                                               ; preds = %44
  %46 = load %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionPrefs"** %6, align 8
  call void @_ZN10extensions14ExtensionPrefs26SetDNRKeepExcessAllocationERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEb(%"class.extensions::ExtensionPrefs"* %46, %"class.std::__1::basic_string"* dereferenceable(24) %1, i1 zeroext false) #7
  br label %47

47:                                               ; preds = %45, %44
  store i64 %40, i64* %37, align 8
  %48 = load %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionPrefs"** %6, align 8
  call void @_ZN10extensions14ExtensionPrefs30SetDNRAllocatedGlobalRuleCountERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEm(%"class.extensions::ExtensionPrefs"* %48, %"class.std::__1::basic_string"* dereferenceable(24) %1, i64 %31) #7
  br label %49

49:                                               ; preds = %24, %36, %47, %12, %23
  %50 = phi i1 [ true, %23 ], [ true, %12 ], [ true, %24 ], [ true, %47 ], [ false, %36 ]
  ret i1 %50
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare zeroext i1 @_ZNK10extensions14ExtensionPrefs26GetDNRKeepExcessAllocationERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.extensions::ExtensionPrefs"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #4

declare i32 @_ZN10extensions23declarative_net_request35GetStaticGuaranteedMinimumRuleCountEv() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23declarative_net_request18GlobalRulesTracker24ClearExtensionAllocationERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.extensions::declarative_net_request::GlobalRulesTracker"* nocapture, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #7
  store i64 0, i64* %3, align 8
  %5 = getelementptr inbounds %"class.extensions::declarative_net_request::GlobalRulesTracker", %"class.extensions::declarative_net_request::GlobalRulesTracker"* %0, i64 0, i32 1
  %6 = load %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionPrefs"** %5, align 8
  %7 = call zeroext i1 @_ZNK10extensions14ExtensionPrefs30GetDNRAllocatedGlobalRuleCountERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPm(%"class.extensions::ExtensionPrefs"* %6, %"class.std::__1::basic_string"* dereferenceable(24) %1, i64* nonnull %3) #7
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = load i64, i64* %3, align 8
  %10 = getelementptr inbounds %"class.extensions::declarative_net_request::GlobalRulesTracker", %"class.extensions::declarative_net_request::GlobalRulesTracker"* %0, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %11, %9
  store i64 %12, i64* %10, align 8
  %13 = load %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionPrefs"** %5, align 8
  call void @_ZN10extensions14ExtensionPrefs30SetDNRAllocatedGlobalRuleCountERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEm(%"class.extensions::ExtensionPrefs"* %13, %"class.std::__1::basic_string"* dereferenceable(24) %1, i64 0) #7
  br label %14

14:                                               ; preds = %2, %8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK10extensions23declarative_net_request18GlobalRulesTracker20GetAllocationInPrefsERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.extensions::declarative_net_request::GlobalRulesTracker"* nocapture readonly, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #7
  store i64 0, i64* %3, align 8
  %5 = getelementptr inbounds %"class.extensions::declarative_net_request::GlobalRulesTracker", %"class.extensions::declarative_net_request::GlobalRulesTracker"* %0, i64 0, i32 1
  %6 = load %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionPrefs"** %5, align 8
  %7 = call zeroext i1 @_ZNK10extensions14ExtensionPrefs30GetDNRAllocatedGlobalRuleCountERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPm(%"class.extensions::ExtensionPrefs"* %6, %"class.std::__1::basic_string"* dereferenceable(24) %1, i64* nonnull %3) #7
  %8 = load i64, i64* %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #7
  ret i64 %8
}

declare i32 @_ZN10extensions23declarative_net_request24GetGlobalStaticRuleLimitEv() local_unnamed_addr #4

declare void @_ZN10extensions14ExtensionPrefs26SetDNRKeepExcessAllocationERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEb(%"class.extensions::ExtensionPrefs"*, %"class.std::__1::basic_string"* dereferenceable(24), i1 zeroext) local_unnamed_addr #4

declare void @_ZN10extensions14ExtensionPrefs30SetDNRAllocatedGlobalRuleCountERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEm(%"class.extensions::ExtensionPrefs"*, %"class.std::__1::basic_string"* dereferenceable(24), i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK10extensions23declarative_net_request18GlobalRulesTracker23GetUnallocatedRuleCountEv(%"class.extensions::declarative_net_request::GlobalRulesTracker"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call i32 @_ZN10extensions23declarative_net_request24GetGlobalStaticRuleLimitEv() #7
  %3 = sext i32 %2 to i64
  %4 = getelementptr inbounds %"class.extensions::declarative_net_request::GlobalRulesTracker", %"class.extensions::declarative_net_request::GlobalRulesTracker"* %0, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = sub i64 %3, %5
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK10extensions23declarative_net_request18GlobalRulesTracker22GetAvailableAllocationERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.extensions::declarative_net_request::GlobalRulesTracker"* nocapture readonly, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = tail call i32 @_ZN10extensions23declarative_net_request24GetGlobalStaticRuleLimitEv() #7
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds %"class.extensions::declarative_net_request::GlobalRulesTracker", %"class.extensions::declarative_net_request::GlobalRulesTracker"* %0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #7
  store i64 0, i64* %3, align 8
  %10 = getelementptr inbounds %"class.extensions::declarative_net_request::GlobalRulesTracker", %"class.extensions::declarative_net_request::GlobalRulesTracker"* %0, i64 0, i32 1
  %11 = load %"class.extensions::ExtensionPrefs"*, %"class.extensions::ExtensionPrefs"** %10, align 8
  %12 = call zeroext i1 @_ZNK10extensions14ExtensionPrefs30GetDNRAllocatedGlobalRuleCountERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPm(%"class.extensions::ExtensionPrefs"* %11, %"class.std::__1::basic_string"* dereferenceable(24) %1, i64* nonnull %3) #7
  %13 = load i64, i64* %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7
  %14 = add i64 %8, %13
  ret i64 %14
}

declare zeroext i1 @_ZNK10extensions14ExtensionPrefs30GetDNRAllocatedGlobalRuleCountERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPm(%"class.extensions::ExtensionPrefs"*, %"class.std::__1::basic_string"* dereferenceable(24), i64*) local_unnamed_addr #4

declare %"class.std::__1::vector.68"* @_ZNK10extensions14ExtensionPrefs26GetInstalledExtensionsInfoEb(%"class.extensions::ExtensionPrefs"*, i1 zeroext) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN10extensions13ExtensionInfoD1Ev(%"struct.extensions::ExtensionInfo"*) unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
