; ModuleID = '../../chrome/browser/vr/content_input_delegate.cc'
source_filename = "../../chrome/browser/vr/content_input_delegate.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.vr::ContentInputDelegate" = type { %"class.vr::PlatformUiInputDelegate", i32, i32, %"struct.vr::EditedText", i32, %"class.std::__1::queue" }
%"class.vr::PlatformUiInputDelegate" = type { i32 (...)**, %"class.gfx::Size", %"class.vr::PlatformInputHandler"* }
%"class.gfx::Size" = type { i32, i32 }
%"class.vr::PlatformInputHandler" = type { i32 (...)** }
%"struct.vr::EditedText" = type { %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo" }
%"struct.vr::TextInputInfo" = type { %"class.std::__1::basic_string", i32, i32, i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.7" }
%"struct.std::__1::__split_buffer" = type { %"class.base::OnceCallback"**, %"class.base::OnceCallback"**, %"class.base::OnceCallback"**, %"class.std::__1::__compressed_pair.2" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.base::OnceCallback"** }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.vr::TextEditAction"*, %"class.vr::TextEditAction"*, %"class.std::__1::__compressed_pair.12" }
%"class.vr::TextEditAction" = type <{ i32, [4 x i8], %"class.std::__1::basic_string", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.vr::TextEditAction"* }
%"class.vr::InputEvent" = type { i32 (...)**, %struct.anon.19, i32, %"class.base::TimeTicks", %"class.gfx::PointF" }
%struct.anon.19 = type { float, float }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.gfx::PointF" = type { float, float }
%"class.base::OnceCallback.21" = type { %"class.base::internal::CallbackBase" }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::__split_buffer.23" = type { %"class.base::OnceCallback"**, %"class.base::OnceCallback"**, %"class.base::OnceCallback"**, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.3", %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.std::__1::allocator.5"* }
%"class.std::__1::allocator.5" = type { i8 }

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_ = comdat any

$_ZNSt3__112__deque_baseIN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEENS_9allocatorIS8_EEE5clearEv = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs = comdat any

$_ZNSt3__15dequeIN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEENS_9allocatorIS8_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEENS_9allocatorIS9_EEE9push_backEOS9_ = comdat any

$_ZNSt3__114__split_bufferIPN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEENS_9allocatorIS9_EEE10push_frontEOS9_ = comdat any

$_ZNSt3__114__split_bufferIPN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEERNS_9allocatorIS9_EEE10push_frontERKS9_ = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateIMN2vr20ContentInputDelegateEFvNS3_13TextInputInfoERKNSt3__112basic_stringIDsNS6_11char_traitsIDsEENS6_9allocatorIDsEEEEEJNS0_17UnretainedWrapperIS4_EES5_EEEFvSE_EE7RunOnceEPNS0_13BindStateBaseESE_ = comdat any

$_ZN4base8internal9BindStateIMN2vr20ContentInputDelegateEFvNS2_13TextInputInfoERKNSt3__112basic_stringIDsNS5_11char_traitsIDsEENS5_9allocatorIDsEEEEEJNS0_17UnretainedWrapperIS3_EES4_EE7DestroyEPKNS0_13BindStateBaseE = comdat any

@_ZTVN2vr20ContentInputDelegateE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.vr::ContentInputDelegate"*)* @_ZN2vr20ContentInputDelegateD2Ev to i8*), i8* bitcast (void (%"class.vr::ContentInputDelegate"*)* @_ZN2vr20ContentInputDelegateD0Ev to i8*), i8* bitcast (void (%"class.vr::PlatformUiInputDelegate"*, %"class.gfx::PointF"*, i64)* @_ZN2vr23PlatformUiInputDelegate12OnHoverEnterERKN3gfx6PointFEN4base9TimeTicksE to i8*), i8* bitcast (void (%"class.vr::PlatformUiInputDelegate"*, i64)* @_ZN2vr23PlatformUiInputDelegate12OnHoverLeaveEN4base9TimeTicksE to i8*), i8* bitcast (void (%"class.vr::PlatformUiInputDelegate"*, %"class.gfx::PointF"*, i64)* @_ZN2vr23PlatformUiInputDelegate11OnHoverMoveERKN3gfx6PointFEN4base9TimeTicksE to i8*), i8* bitcast (void (%"class.vr::PlatformUiInputDelegate"*, %"class.gfx::PointF"*, i64)* @_ZN2vr23PlatformUiInputDelegate12OnButtonDownERKN3gfx6PointFEN4base9TimeTicksE to i8*), i8* bitcast (void (%"class.vr::PlatformUiInputDelegate"*, %"class.gfx::PointF"*, i64)* @_ZN2vr23PlatformUiInputDelegate10OnButtonUpERKN3gfx6PointFEN4base9TimeTicksE to i8*), i8* bitcast (void (%"class.vr::PlatformUiInputDelegate"*, %"class.gfx::PointF"*, i64)* @_ZN2vr23PlatformUiInputDelegate11OnTouchMoveERKN3gfx6PointFEN4base9TimeTicksE to i8*), i8* bitcast (void (%"class.vr::PlatformUiInputDelegate"*, %"class.vr::InputEvent"*, %"class.gfx::PointF"*)* @_ZN2vr23PlatformUiInputDelegate12OnInputEventENSt3__110unique_ptrINS_10InputEventENS1_14default_deleteIS3_EEEERKN3gfx6PointFE to i8*), i8* bitcast (void (%"class.vr::ContentInputDelegate"*, %"class.vr::InputEvent"*)* @_ZN2vr20ContentInputDelegate19SendGestureToTargetENSt3__110unique_ptrINS_10InputEventENS1_14default_deleteIS3_EEEE to i8*), i8* bitcast (void (%"class.vr::ContentInputDelegate"*, i32, i32, i32, i32, %"class.base::OnceCallback"*)* @_ZN2vr20ContentInputDelegate24OnWebInputIndicesChangedEiiiiN4base12OnceCallbackIFvRKNS_13TextInputInfoEEEE to i8*)] }, align 8

@_ZN2vr20ContentInputDelegateC1Ev = hidden unnamed_addr alias void (%"class.vr::ContentInputDelegate"*), void (%"class.vr::ContentInputDelegate"*)* @_ZN2vr20ContentInputDelegateC2Ev
@_ZN2vr20ContentInputDelegateC1EPNS_20PlatformInputHandlerE = hidden unnamed_addr alias void (%"class.vr::ContentInputDelegate"*, %"class.vr::PlatformInputHandler"*), void (%"class.vr::ContentInputDelegate"*, %"class.vr::PlatformInputHandler"*)* @_ZN2vr20ContentInputDelegateC2EPNS_20PlatformInputHandlerE
@_ZN2vr20ContentInputDelegateD1Ev = hidden unnamed_addr alias void (%"class.vr::ContentInputDelegate"*), void (%"class.vr::ContentInputDelegate"*)* @_ZN2vr20ContentInputDelegateD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr20ContentInputDelegateC2Ev(%"class.vr::ContentInputDelegate"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 0
  tail call void @_ZN2vr23PlatformUiInputDelegateC2Ev(%"class.vr::PlatformUiInputDelegate"* %2) #10
  %3 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2vr20ContentInputDelegateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 1
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 2
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 3
  tail call void @_ZN2vr10EditedTextC1Ev(%"struct.vr::EditedText"* %6) #10
  %7 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 4
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 5
  %9 = bitcast %"class.std::__1::queue"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 48, i1 false) #10
  ret void
}

declare void @_ZN2vr23PlatformUiInputDelegateC2Ev(%"class.vr::PlatformUiInputDelegate"*) unnamed_addr #1

declare void @_ZN2vr10EditedTextC1Ev(%"struct.vr::EditedText"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr20ContentInputDelegateC2EPNS_20PlatformInputHandlerE(%"class.vr::ContentInputDelegate"*, %"class.vr::PlatformInputHandler"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 0
  tail call void @_ZN2vr23PlatformUiInputDelegateC2EPNS_20PlatformInputHandlerE(%"class.vr::PlatformUiInputDelegate"* %3, %"class.vr::PlatformInputHandler"* %1) #10
  %4 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2vr20ContentInputDelegateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 1
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 2
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 3
  tail call void @_ZN2vr10EditedTextC1Ev(%"struct.vr::EditedText"* %7) #10
  %8 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 4
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 5
  %10 = bitcast %"class.std::__1::queue"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 48, i1 false) #10
  ret void
}

declare void @_ZN2vr23PlatformUiInputDelegateC2EPNS_20PlatformInputHandlerE(%"class.vr::PlatformUiInputDelegate"*, %"class.vr::PlatformInputHandler"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr20ContentInputDelegateD2Ev(%"class.vr::ContentInputDelegate"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN2vr20ContentInputDelegateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 5
  %4 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %3, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__112__deque_baseIN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEENS_9allocatorIS8_EEE5clearEv(%"class.std::__1::__deque_base"* %4) #10
  %5 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %6 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %5, align 8
  %7 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2
  %8 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %7, align 8
  %9 = icmp eq %"class.base::OnceCallback"** %6, %8
  br i1 %9, label %28, label %10

10:                                               ; preds = %1, %10
  %11 = phi %"class.base::OnceCallback"** [ %14, %10 ], [ %6, %1 ]
  %12 = bitcast %"class.base::OnceCallback"** %11 to i8**
  %13 = load i8*, i8** %12, align 8
  tail call void @_ZdlPv(i8* %13) #11
  %14 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %11, i64 1
  %15 = icmp eq %"class.base::OnceCallback"** %14, %8
  br i1 %15, label %16, label %10

16:                                               ; preds = %10
  %17 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %5, align 8
  %18 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %7, align 8
  %19 = icmp eq %"class.base::OnceCallback"** %18, %17
  br i1 %19, label %28, label %20

20:                                               ; preds = %16
  %21 = ptrtoint %"class.base::OnceCallback"** %17 to i64
  %22 = getelementptr %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %18, i64 -1
  %23 = ptrtoint %"class.base::OnceCallback"** %22 to i64
  %24 = sub i64 %23, %21
  %25 = lshr i64 %24, 3
  %26 = xor i64 %25, -1
  %27 = getelementptr %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %18, i64 %26
  store %"class.base::OnceCallback"** %27, %"class.base::OnceCallback"*** %7, align 8
  br label %28

28:                                               ; preds = %20, %16, %1
  %29 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %29, align 8
  %31 = icmp eq %"class.base::OnceCallback"** %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %28
  %33 = bitcast %"class.base::OnceCallback"** %30 to i8*
  tail call void @_ZdlPv(i8* %33) #11
  br label %34

34:                                               ; preds = %28, %32
  %35 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 3
  %36 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 3, i32 1
  %37 = bitcast %"struct.vr::TextInputInfo"* %36 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %37, i64 0, i32 1, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %34
  %42 = bitcast %"struct.vr::TextInputInfo"* %36 to i8**
  %43 = load i8*, i8** %42, align 8
  tail call void @_ZdlPv(i8* %43) #11
  br label %44

44:                                               ; preds = %41, %34
  %45 = bitcast %"struct.vr::EditedText"* %35 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %45, i64 0, i32 1, i32 1
  %47 = load i8, i8* %46, align 1
  %48 = icmp slt i8 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %44
  %50 = bitcast %"struct.vr::EditedText"* %35 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @_ZdlPv(i8* %51) #11
  br label %52

52:                                               ; preds = %44, %49
  %53 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 0
  tail call void @_ZN2vr23PlatformUiInputDelegateD2Ev(%"class.vr::PlatformUiInputDelegate"* %53) #10
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2vr23PlatformUiInputDelegateD2Ev(%"class.vr::PlatformUiInputDelegate"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr20ContentInputDelegateD0Ev(%"class.vr::ContentInputDelegate"*) unnamed_addr #0 align 2 {
  tail call void @_ZN2vr20ContentInputDelegateD2Ev(%"class.vr::ContentInputDelegate"* %0) #10
  %2 = bitcast %"class.vr::ContentInputDelegate"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr20ContentInputDelegate14OnFocusChangedEb(%"class.vr::ContentInputDelegate"* nocapture readonly, i1 zeroext) local_unnamed_addr #0 align 2 {
  br i1 %1, label %10, label %3

3:                                                ; preds = %2
  %4 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 0, i32 2
  %5 = load %"class.vr::PlatformInputHandler"*, %"class.vr::PlatformInputHandler"** %4, align 8
  %6 = bitcast %"class.vr::PlatformInputHandler"* %5 to void (%"class.vr::PlatformInputHandler"*)***
  %7 = load void (%"class.vr::PlatformInputHandler"*)**, void (%"class.vr::PlatformInputHandler"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.vr::PlatformInputHandler"*)*, void (%"class.vr::PlatformInputHandler"*)** %7, i64 4
  %9 = load void (%"class.vr::PlatformInputHandler"*)*, void (%"class.vr::PlatformInputHandler"*)** %8, align 8
  tail call void %9(%"class.vr::PlatformInputHandler"* %5) #10
  br label %10

10:                                               ; preds = %3, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr20ContentInputDelegate16OnWebInputEditedERKNS_10EditedTextEb(%"class.vr::ContentInputDelegate"*, %"struct.vr::EditedText"* dereferenceable(80), i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 0, i32 2
  %6 = load %"class.vr::PlatformInputHandler"*, %"class.vr::PlatformInputHandler"** %5, align 8
  %7 = icmp eq %"class.vr::PlatformInputHandler"* %6, null
  br i1 %7, label %62, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 3, i32 0, i32 0
  %10 = getelementptr inbounds %"struct.vr::EditedText", %"struct.vr::EditedText"* %1, i64 0, i32 0, i32 0
  %11 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %9, %"class.std::__1::basic_string"* dereferenceable(24) %10) #10
  %12 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 3, i32 0, i32 1
  %13 = getelementptr inbounds %"struct.vr::EditedText", %"struct.vr::EditedText"* %1, i64 0, i32 0, i32 1
  %14 = bitcast i32* %12 to i8*
  %15 = bitcast i32* %13 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 16, i1 false) #10
  %16 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 3, i32 1, i32 0
  %17 = getelementptr inbounds %"struct.vr::EditedText", %"struct.vr::EditedText"* %1, i64 0, i32 1, i32 0
  %18 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %16, %"class.std::__1::basic_string"* dereferenceable(24) %17) #10
  %19 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 3, i32 1, i32 1
  %20 = getelementptr inbounds %"struct.vr::EditedText", %"struct.vr::EditedText"* %1, i64 0, i32 1, i32 1
  %21 = bitcast i32* %19 to i8*
  %22 = bitcast i32* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false) #10
  %23 = load %"class.vr::PlatformInputHandler"*, %"class.vr::PlatformInputHandler"** %5, align 8
  br i1 %2, label %24, label %29

24:                                               ; preds = %8
  %25 = bitcast %"class.vr::PlatformInputHandler"* %23 to void (%"class.vr::PlatformInputHandler"*)***
  %26 = load void (%"class.vr::PlatformInputHandler"*)**, void (%"class.vr::PlatformInputHandler"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.vr::PlatformInputHandler"*)*, void (%"class.vr::PlatformInputHandler"*)** %26, i64 6
  %28 = load void (%"class.vr::PlatformInputHandler"*)*, void (%"class.vr::PlatformInputHandler"*)** %27, align 8
  tail call void %28(%"class.vr::PlatformInputHandler"* %23) #10
  br label %62

29:                                               ; preds = %8
  %30 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #10
  call void @_ZNK2vr10EditedText7GetDiffEv(%"class.std::__1::vector"* nonnull sret %4, %"struct.vr::EditedText"* %1) #10
  %31 = bitcast %"class.vr::PlatformInputHandler"* %23 to void (%"class.vr::PlatformInputHandler"*, %"class.std::__1::vector"*)***
  %32 = load void (%"class.vr::PlatformInputHandler"*, %"class.std::__1::vector"*)**, void (%"class.vr::PlatformInputHandler"*, %"class.std::__1::vector"*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.vr::PlatformInputHandler"*, %"class.std::__1::vector"*)*, void (%"class.vr::PlatformInputHandler"*, %"class.std::__1::vector"*)** %32, i64 5
  %34 = load void (%"class.vr::PlatformInputHandler"*, %"class.std::__1::vector"*)*, void (%"class.vr::PlatformInputHandler"*, %"class.std::__1::vector"*)** %33, align 8
  call void %34(%"class.vr::PlatformInputHandler"* %23, %"class.std::__1::vector"* nonnull dereferenceable(24) %4) #10
  %35 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %36 = load %"class.vr::TextEditAction"*, %"class.vr::TextEditAction"** %35, align 8
  %37 = icmp eq %"class.vr::TextEditAction"* %36, null
  br i1 %37, label %61, label %38

38:                                               ; preds = %29
  %39 = bitcast %"class.vr::TextEditAction"* %36 to i8*
  %40 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %41 = load %"class.vr::TextEditAction"*, %"class.vr::TextEditAction"** %40, align 8
  %42 = icmp eq %"class.vr::TextEditAction"* %41, %36
  br i1 %42, label %59, label %43

43:                                               ; preds = %38, %54
  %44 = phi %"class.vr::TextEditAction"* [ %45, %54 ], [ %41, %38 ]
  %45 = getelementptr inbounds %"class.vr::TextEditAction", %"class.vr::TextEditAction"* %44, i64 -1
  %46 = getelementptr inbounds %"class.vr::TextEditAction", %"class.vr::TextEditAction"* %44, i64 -1, i32 2
  %47 = bitcast %"class.std::__1::basic_string"* %46 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %47, i64 0, i32 1, i32 1
  %49 = load i8, i8* %48, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %43
  %52 = bitcast %"class.std::__1::basic_string"* %46 to i8**
  %53 = load i8*, i8** %52, align 8
  call void @_ZdlPv(i8* %53) #11
  br label %54

54:                                               ; preds = %51, %43
  %55 = icmp eq %"class.vr::TextEditAction"* %45, %36
  br i1 %55, label %56, label %43

56:                                               ; preds = %54
  %57 = bitcast %"class.std::__1::vector"* %4 to i8**
  %58 = load i8*, i8** %57, align 8
  br label %59

59:                                               ; preds = %56, %38
  %60 = phi i8* [ %58, %56 ], [ %39, %38 ]
  store %"class.vr::TextEditAction"* %36, %"class.vr::TextEditAction"** %40, align 8
  call void @_ZdlPv(i8* %60) #11
  br label %61

61:                                               ; preds = %29, %59
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #10
  br label %62

62:                                               ; preds = %3, %61, %24
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZNK2vr10EditedText7GetDiffEv(%"class.std::__1::vector"* sret, %"struct.vr::EditedText"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2vr20ContentInputDelegate14OnSwapContentsEi(%"class.vr::ContentInputDelegate"* nocapture, i32) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 1
  store i32 %1, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr20ContentInputDelegate19SendGestureToTargetENSt3__110unique_ptrINS_10InputEventENS1_14default_deleteIS3_EEEE(%"class.vr::ContentInputDelegate"* nocapture, %"class.vr::InputEvent"*) unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.vr::InputEvent"* %1, null
  br i1 %3, label %32, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 0, i32 2
  %6 = load %"class.vr::PlatformInputHandler"*, %"class.vr::PlatformInputHandler"** %5, align 8
  %7 = icmp eq %"class.vr::PlatformInputHandler"* %6, null
  br i1 %7, label %27, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.vr::InputEvent", %"class.vr::InputEvent"* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  switch i32 %10, label %15 [
    i32 7, label %11
    i32 3, label %11
    i32 2, label %11
    i32 0, label %11
  ]

11:                                               ; preds = %8, %8, %8, %8
  %12 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 2
  store i32 %13, i32* %14, align 4
  br label %21

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %21, label %27

21:                                               ; preds = %15, %11
  %22 = phi i32 [ %17, %15 ], [ %13, %11 ]
  %23 = bitcast %"class.vr::PlatformInputHandler"* %6 to void (%"class.vr::PlatformInputHandler"*, %"class.vr::InputEvent"*, i32)***
  %24 = load void (%"class.vr::PlatformInputHandler"*, %"class.vr::InputEvent"*, i32)**, void (%"class.vr::PlatformInputHandler"*, %"class.vr::InputEvent"*, i32)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.vr::PlatformInputHandler"*, %"class.vr::InputEvent"*, i32)*, void (%"class.vr::PlatformInputHandler"*, %"class.vr::InputEvent"*, i32)** %24, i64 3
  %26 = load void (%"class.vr::PlatformInputHandler"*, %"class.vr::InputEvent"*, i32)*, void (%"class.vr::PlatformInputHandler"*, %"class.vr::InputEvent"*, i32)** %25, align 8
  tail call void %26(%"class.vr::PlatformInputHandler"* nonnull %6, %"class.vr::InputEvent"* nonnull %1, i32 %22) #10
  br label %32

27:                                               ; preds = %4, %15
  %28 = bitcast %"class.vr::InputEvent"* %1 to void (%"class.vr::InputEvent"*)***
  %29 = load void (%"class.vr::InputEvent"*)**, void (%"class.vr::InputEvent"*)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.vr::InputEvent"*)*, void (%"class.vr::InputEvent"*)** %29, i64 1
  %31 = load void (%"class.vr::InputEvent"*)*, void (%"class.vr::InputEvent"*)** %30, align 8
  tail call void %31(%"class.vr::InputEvent"* nonnull %1) #10
  br label %32

32:                                               ; preds = %2, %21, %27
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2vr20ContentInputDelegate22ContentGestureIsLockedENS_10InputEvent4TypeE(%"class.vr::ContentInputDelegate"* nocapture, i32) local_unnamed_addr #6 align 2 {
  switch i32 %1, label %3 [
    i32 7, label %8
    i32 3, label %8
    i32 2, label %8
    i32 0, label %8
  ]

3:                                                ; preds = %2
  %4 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  br label %12

8:                                                ; preds = %2, %2, %2, %2
  %9 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 2
  store i32 %10, i32* %11, align 4
  br label %12

12:                                               ; preds = %3, %8
  %13 = phi i32 [ %7, %3 ], [ %10, %8 ]
  %14 = phi i32 [ %5, %3 ], [ %10, %8 ]
  %15 = icmp ne i32 %14, %13
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr20ContentInputDelegate24OnWebInputIndicesChangedEiiiiN4base12OnceCallbackIFvRKNS_13TextInputInfoEEEE(%"class.vr::ContentInputDelegate"*, i32, i32, i32, i32, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %7 = alloca %"class.base::OnceCallback", align 8
  %8 = alloca %"struct.vr::TextInputInfo", align 8
  %9 = alloca %"struct.vr::TextInputInfo", align 8
  %10 = alloca %"class.base::OnceCallback.21", align 8
  %11 = bitcast %"struct.vr::TextInputInfo"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %11) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 40, i1 false)
  %12 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 3, i32 0
  call void @_ZN2vr13TextInputInfoC1ERKS0_(%"struct.vr::TextInputInfo"* nonnull %8, %"struct.vr::TextInputInfo"* dereferenceable(40) %12) #10
  %13 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %8, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, %1
  br i1 %15, label %16, label %39

16:                                               ; preds = %6
  %17 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %8, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, %2
  br i1 %19, label %20, label %39

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %8, i64 0, i32 3
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, %3
  br i1 %23, label %24, label %39

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %8, i64 0, i32 4
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, %4
  br i1 %27, label %28, label %39

28:                                               ; preds = %24
  %29 = bitcast %"class.base::OnceCallback"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #10
  %30 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  %31 = bitcast %"class.base::OnceCallback"* %5 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.base::OnceCallback"* %7 to i64*
  store i64 %32, i64* %33, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %30, align 8
  %34 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %7, i64 0, i32 0
  %35 = inttoptr i64 %32 to %"class.base::internal::BindStateBase"*
  %36 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %35, i64 0, i32 1
  %37 = bitcast void ()** %36 to void (%"class.base::internal::BindStateBase"*, %"struct.vr::TextInputInfo"*)**
  %38 = load void (%"class.base::internal::BindStateBase"*, %"struct.vr::TextInputInfo"*)*, void (%"class.base::internal::BindStateBase"*, %"struct.vr::TextInputInfo"*)** %37, align 8
  call void %38(%"class.base::internal::BindStateBase"* %35, %"struct.vr::TextInputInfo"* nonnull dereferenceable(40) %8) #10
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %34) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #10
  br label %119

39:                                               ; preds = %24, %20, %16, %6
  %40 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2
  %41 = bitcast %"class.base::OnceCallback"*** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %44 = bitcast %"class.base::OnceCallback"*** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %42, %45
  %47 = icmp eq i64 %46, 0
  %48 = shl i64 %46, 6
  %49 = add i64 %48, -1
  %50 = select i1 %47, i64 0, i64 %49
  %51 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = add i64 %54, %52
  %56 = icmp eq i64 %50, %55
  %57 = inttoptr i64 %45 to %"class.base::OnceCallback"**
  %58 = inttoptr i64 %42 to %"class.base::OnceCallback"**
  br i1 %56, label %59, label %66

59:                                               ; preds = %39
  %60 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 5, i32 0
  call void @_ZNSt3__15dequeIN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEENS_9allocatorIS8_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %60) #10
  %61 = load i64, i64* %53, align 8
  %62 = load i64, i64* %51, align 8
  %63 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %43, align 8
  %64 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %40, align 8
  %65 = add i64 %62, %61
  br label %66

66:                                               ; preds = %59, %39
  %67 = phi i64 [ %65, %59 ], [ %55, %39 ]
  %68 = phi %"class.base::OnceCallback"** [ %64, %59 ], [ %58, %39 ]
  %69 = phi %"class.base::OnceCallback"** [ %63, %59 ], [ %57, %39 ]
  %70 = icmp eq %"class.base::OnceCallback"** %68, %69
  br i1 %70, label %78, label %71

71:                                               ; preds = %66
  %72 = lshr i64 %67, 9
  %73 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %69, i64 %72
  %74 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %73, align 8
  %75 = and i64 %67, 511
  %76 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %74, i64 %75
  %77 = bitcast %"class.base::OnceCallback"* %76 to i64*
  br label %78

78:                                               ; preds = %66, %71
  %79 = phi i64* [ %77, %71 ], [ null, %66 ]
  %80 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  %81 = bitcast %"class.base::OnceCallback"* %5 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %79, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %80, align 8
  %83 = load i64, i64* %53, align 8
  %84 = add i64 %83, 1
  store i64 %84, i64* %53, align 8
  %85 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 4
  %86 = load i32, i32* %85, align 8
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %119

88:                                               ; preds = %78
  %89 = bitcast %"struct.vr::TextInputInfo"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %89) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %89, i8 -86, i64 40, i1 false)
  call void @_ZN2vr13TextInputInfoC1Ev(%"struct.vr::TextInputInfo"* nonnull %9) #10
  %90 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %9, i64 0, i32 1
  store i32 %1, i32* %90, align 8
  %91 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %9, i64 0, i32 2
  store i32 %2, i32* %91, align 4
  %92 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %9, i64 0, i32 3
  store i32 %3, i32* %92, align 8
  %93 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %9, i64 0, i32 4
  store i32 %4, i32* %93, align 4
  %94 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 0, i32 2
  %95 = load %"class.vr::PlatformInputHandler"*, %"class.vr::PlatformInputHandler"** %94, align 8
  %96 = ptrtoint %"class.vr::ContentInputDelegate"* %0 to i64
  %97 = call i8* @_Znwm(i64 96) #11, !noalias !2
  %98 = bitcast i8* %97 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %98, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.std::__1::basic_string"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN2vr20ContentInputDelegateEFvNS3_13TextInputInfoERKNSt3__112basic_stringIDsNS6_11char_traitsIDsEENS6_9allocatorIDsEEEEEJNS0_17UnretainedWrapperIS4_EES5_EEEFvSE_EE7RunOnceEPNS0_13BindStateBaseESE_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN2vr20ContentInputDelegateEFvNS2_13TextInputInfoERKNSt3__112basic_stringIDsNS5_11char_traitsIDsEENS5_9allocatorIDsEEEEEJNS0_17UnretainedWrapperIS3_EES4_EE7DestroyEPKNS0_13BindStateBaseE) #10, !noalias !2
  %99 = getelementptr inbounds i8, i8* %97, i64 32
  %100 = bitcast i8* %99 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.vr::ContentInputDelegate"*, %"struct.vr::TextInputInfo"*, %"class.std::__1::basic_string"*)* @_ZN2vr20ContentInputDelegate21OnWebInputTextChangedENS_13TextInputInfoERKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEE to i64), i64 0>, <2 x i64>* %100, align 8, !noalias !2
  %101 = getelementptr inbounds i8, i8* %97, i64 48
  %102 = bitcast i8* %101 to i64*
  store i64 %96, i64* %102, align 8, !noalias !2
  %103 = getelementptr inbounds i8, i8* %97, i64 56
  %104 = bitcast i8* %103 to %"struct.vr::TextInputInfo"*
  call void @_ZN2vr13TextInputInfoC1ERKS0_(%"struct.vr::TextInputInfo"* %104, %"struct.vr::TextInputInfo"* nonnull dereferenceable(40) %9) #10, !noalias !2
  %105 = bitcast %"class.base::OnceCallback.21"* %10 to i8**
  store i8* %97, i8** %105, align 8, !alias.scope !2
  %106 = bitcast %"class.vr::PlatformInputHandler"* %95 to void (%"class.vr::PlatformInputHandler"*, %"class.base::OnceCallback.21"*)***
  %107 = load void (%"class.vr::PlatformInputHandler"*, %"class.base::OnceCallback.21"*)**, void (%"class.vr::PlatformInputHandler"*, %"class.base::OnceCallback.21"*)*** %106, align 8
  %108 = getelementptr inbounds void (%"class.vr::PlatformInputHandler"*, %"class.base::OnceCallback.21"*)*, void (%"class.vr::PlatformInputHandler"*, %"class.base::OnceCallback.21"*)** %107, i64 7
  %109 = load void (%"class.vr::PlatformInputHandler"*, %"class.base::OnceCallback.21"*)*, void (%"class.vr::PlatformInputHandler"*, %"class.base::OnceCallback.21"*)** %108, align 8
  call void %109(%"class.vr::PlatformInputHandler"* %95, %"class.base::OnceCallback.21"* nonnull %10) #10
  %110 = getelementptr inbounds %"class.base::OnceCallback.21", %"class.base::OnceCallback.21"* %10, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %110) #10
  store i32 1, i32* %85, align 8
  %111 = bitcast %"struct.vr::TextInputInfo"* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %112 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %111, i64 0, i32 1, i32 1
  %113 = load i8, i8* %112, align 1
  %114 = icmp slt i8 %113, 0
  br i1 %114, label %115, label %118

115:                                              ; preds = %88
  %116 = bitcast %"struct.vr::TextInputInfo"* %9 to i8**
  %117 = load i8*, i8** %116, align 8
  call void @_ZdlPv(i8* %117) #11
  br label %118

118:                                              ; preds = %88, %115
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %89) #10
  br label %119

119:                                              ; preds = %78, %118, %28
  %120 = bitcast %"struct.vr::TextInputInfo"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %121 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %120, i64 0, i32 1, i32 1
  %122 = load i8, i8* %121, align 1
  %123 = icmp slt i8 %122, 0
  br i1 %123, label %124, label %127

124:                                              ; preds = %119
  %125 = bitcast %"struct.vr::TextInputInfo"* %8 to i8**
  %126 = load i8*, i8** %125, align 8
  call void @_ZdlPv(i8* %126) #11
  br label %127

127:                                              ; preds = %119, %124
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %11) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN2vr13TextInputInfoC1ERKS0_(%"struct.vr::TextInputInfo"*, %"struct.vr::TextInputInfo"* dereferenceable(40)) unnamed_addr #1

declare void @_ZN2vr13TextInputInfoC1Ev(%"struct.vr::TextInputInfo"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr20ContentInputDelegate21OnWebInputTextChangedENS_13TextInputInfoERKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEE(%"class.vr::ContentInputDelegate"* nocapture, %"struct.vr::TextInputInfo"*, %"class.std::__1::basic_string"* dereferenceable(24)) #0 align 2 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %1, i64 0, i32 0
  %7 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %6, %"class.std::__1::basic_string"* dereferenceable(24) %2)
  %8 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %61, label %11

11:                                               ; preds = %3
  %12 = bitcast %"class.base::OnceCallback"* %5 to i8*
  %13 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %16 = bitcast %"class.base::OnceCallback"* %5 to i64*
  %17 = bitcast %"class.base::OnceCallback"*** %14 to i8***
  %18 = bitcast %"class.base::OnceCallback"* %4 to i8*
  %19 = bitcast %"class.base::OnceCallback"* %4 to i64*
  %20 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  %21 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  %22 = bitcast i64* %15 to <2 x i64>*
  %23 = bitcast i64* %15 to <2 x i64>*
  br label %24

24:                                               ; preds = %11, %53
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #10
  store %"class.base::internal::BindStateBase"* inttoptr (i64 -6148914691236517206 to %"class.base::internal::BindStateBase"*), %"class.base::internal::BindStateBase"** %13, align 8
  %25 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %14, align 8
  %26 = load i64, i64* %15, align 8
  %27 = lshr i64 %26, 9
  %28 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %25, i64 %27
  %29 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %28, align 8
  %30 = and i64 %26, 511
  %31 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %29, i64 %30
  %32 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %31, i64 0, i32 0, i32 0, i32 0
  %33 = bitcast %"class.base::OnceCallback"* %31 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %16, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %32, align 8
  %35 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %14, align 8
  %36 = load i64, i64* %15, align 8
  %37 = lshr i64 %36, 9
  %38 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %35, i64 %37
  %39 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %38, align 8
  %40 = and i64 %36, 511
  %41 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %39, i64 %40, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %41) #10
  %42 = load <2 x i64>, <2 x i64>* %22, align 8
  %43 = add <2 x i64> %42, <i64 1, i64 -1>
  store <2 x i64> %43, <2 x i64>* %23, align 8
  %44 = extractelement <2 x i64> %43, i32 0
  %45 = icmp ult i64 %44, 1024
  br i1 %45, label %53, label %46

46:                                               ; preds = %24
  %47 = load i8**, i8*** %17, align 8
  %48 = load i8*, i8** %47, align 8
  call void @_ZdlPv(i8* %48) #11
  %49 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %14, align 8
  %50 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %49, i64 1
  store %"class.base::OnceCallback"** %50, %"class.base::OnceCallback"*** %14, align 8
  %51 = load i64, i64* %15, align 8
  %52 = add i64 %51, -512
  store i64 %52, i64* %15, align 8
  br label %53

53:                                               ; preds = %24, %46
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  %54 = load i64, i64* %16, align 8
  store i64 %54, i64* %19, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %13, align 8
  %55 = inttoptr i64 %54 to %"class.base::internal::BindStateBase"*
  %56 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %55, i64 0, i32 1
  %57 = bitcast void ()** %56 to void (%"class.base::internal::BindStateBase"*, %"struct.vr::TextInputInfo"*)**
  %58 = load void (%"class.base::internal::BindStateBase"*, %"struct.vr::TextInputInfo"*)*, void (%"class.base::internal::BindStateBase"*, %"struct.vr::TextInputInfo"*)** %57, align 8
  call void %58(%"class.base::internal::BindStateBase"* %55, %"struct.vr::TextInputInfo"* dereferenceable(40) %1) #10
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %20) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %21) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #10
  %59 = load i64, i64* %8, align 8
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %24

61:                                               ; preds = %53, %3
  %62 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 4
  store i32 0, i32* %62, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr20ContentInputDelegate19ClearTextInputStateEv(%"class.vr::ContentInputDelegate"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"struct.vr::EditedText", align 8
  %3 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 4
  store i32 0, i32* %3, align 8
  %4 = bitcast %"struct.vr::EditedText"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %4) #10
  call void @_ZN2vr10EditedTextC1Ev(%"struct.vr::EditedText"* nonnull %2) #10
  %5 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.vr::EditedText", %"struct.vr::EditedText"* %2, i64 0, i32 0, i32 0
  %7 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %5, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %6) #10
  %8 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 3, i32 0, i32 1
  %9 = getelementptr inbounds %"struct.vr::EditedText", %"struct.vr::EditedText"* %2, i64 0, i32 0, i32 1
  %10 = bitcast i32* %8 to i8*
  %11 = bitcast i32* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false) #10
  %12 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 3, i32 1, i32 0
  %13 = getelementptr inbounds %"struct.vr::EditedText", %"struct.vr::EditedText"* %2, i64 0, i32 1, i32 0
  %14 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %12, %"class.std::__1::basic_string"* dereferenceable(24) %13) #10
  %15 = getelementptr inbounds %"class.vr::ContentInputDelegate", %"class.vr::ContentInputDelegate"* %0, i64 0, i32 3, i32 1, i32 1
  %16 = getelementptr inbounds %"struct.vr::EditedText", %"struct.vr::EditedText"* %2, i64 0, i32 1, i32 1
  %17 = bitcast i32* %15 to i8*
  %18 = bitcast i32* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 16, i1 false) #10
  %19 = getelementptr inbounds %"struct.vr::EditedText", %"struct.vr::EditedText"* %2, i64 0, i32 1
  %20 = bitcast %"struct.vr::TextInputInfo"* %19 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %20, i64 0, i32 1, i32 1
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %1
  %25 = bitcast %"struct.vr::TextInputInfo"* %19 to i8**
  %26 = load i8*, i8** %25, align 8
  call void @_ZdlPv(i8* %26) #11
  br label %27

27:                                               ; preds = %24, %1
  %28 = bitcast %"struct.vr::EditedText"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %28, i64 0, i32 1, i32 1
  %30 = load i8, i8* %29, align 1
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %27
  %33 = bitcast %"struct.vr::EditedText"* %2 to i8**
  %34 = load i8*, i8** %33, align 8
  call void @_ZdlPv(i8* %34) #11
  br label %35

35:                                               ; preds = %27, %32
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %4) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %4 = icmp eq %"class.std::__1::basic_string"* %0, %1
  br i1 %4, label %510, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %10, i64 0, i32 1, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %9, label %341, label %14

14:                                               ; preds = %5
  br i1 %13, label %17, label %15

15:                                               ; preds = %14
  %16 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %16, i64 24, i1 false)
  br label %510

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = bitcast i16* %19 to i8*
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %22, 11
  br i1 %23, label %24, label %175

24:                                               ; preds = %17
  %25 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %26 = trunc i64 %22 to i8
  store i8 %26, i8* %7, align 1
  %27 = icmp eq i64 %22, 0
  br i1 %27, label %173, label %28

28:                                               ; preds = %24
  %29 = icmp ult i64 %22, 16
  br i1 %29, label %120, label %30

30:                                               ; preds = %28
  %31 = shl i64 %22, 1
  %32 = getelementptr i8, i8* %3, i64 %31
  %33 = getelementptr i16, i16* %19, i64 %22
  %34 = bitcast i16* %33 to %"class.std::__1::basic_string"*
  %35 = icmp ugt %"class.std::__1::basic_string"* %34, %0
  %36 = icmp ugt i8* %32, %20
  %37 = and i1 %35, %36
  br i1 %37, label %120, label %38

38:                                               ; preds = %30
  %39 = and i64 %22, -16
  %40 = sub i64 %22, %39
  %41 = getelementptr i16, i16* %19, i64 %39
  %42 = getelementptr i16, i16* %25, i64 %39
  %43 = add i64 %39, -16
  %44 = lshr exact i64 %43, 4
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 3
  %47 = icmp ult i64 %43, 48
  br i1 %47, label %99, label %48

48:                                               ; preds = %38
  %49 = sub nsw i64 %45, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %96, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %97, %50 ]
  %53 = getelementptr i16, i16* %19, i64 %51
  %54 = getelementptr i16, i16* %25, i64 %51
  %55 = bitcast i16* %53 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2, !alias.scope !7
  %57 = getelementptr i16, i16* %53, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !7
  %60 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %60, align 2, !alias.scope !10, !noalias !7
  %61 = getelementptr i16, i16* %54, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %62, align 2, !alias.scope !10, !noalias !7
  %63 = or i64 %51, 16
  %64 = getelementptr i16, i16* %19, i64 %63
  %65 = getelementptr i16, i16* %25, i64 %63
  %66 = bitcast i16* %64 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2, !alias.scope !7
  %68 = getelementptr i16, i16* %64, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2, !alias.scope !7
  %71 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %71, align 2, !alias.scope !10, !noalias !7
  %72 = getelementptr i16, i16* %65, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %73, align 2, !alias.scope !10, !noalias !7
  %74 = or i64 %51, 32
  %75 = getelementptr i16, i16* %19, i64 %74
  %76 = getelementptr i16, i16* %25, i64 %74
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !7
  %79 = getelementptr i16, i16* %75, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !7
  %82 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !alias.scope !10, !noalias !7
  %83 = getelementptr i16, i16* %76, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !10, !noalias !7
  %85 = or i64 %51, 48
  %86 = getelementptr i16, i16* %19, i64 %85
  %87 = getelementptr i16, i16* %25, i64 %85
  %88 = bitcast i16* %86 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !7
  %90 = getelementptr i16, i16* %86, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !7
  %93 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %93, align 2, !alias.scope !10, !noalias !7
  %94 = getelementptr i16, i16* %87, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !10, !noalias !7
  %96 = add i64 %51, 64
  %97 = add i64 %52, -4
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %50, !llvm.loop !12

99:                                               ; preds = %50, %38
  %100 = phi i64 [ 0, %38 ], [ %96, %50 ]
  %101 = icmp eq i64 %46, 0
  br i1 %101, label %118, label %102

102:                                              ; preds = %99, %102
  %103 = phi i64 [ %115, %102 ], [ %100, %99 ]
  %104 = phi i64 [ %116, %102 ], [ %46, %99 ]
  %105 = getelementptr i16, i16* %19, i64 %103
  %106 = getelementptr i16, i16* %25, i64 %103
  %107 = bitcast i16* %105 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !7
  %109 = getelementptr i16, i16* %105, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !7
  %112 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !10, !noalias !7
  %113 = getelementptr i16, i16* %106, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !10, !noalias !7
  %115 = add i64 %103, 16
  %116 = add i64 %104, -1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %102, !llvm.loop !14

118:                                              ; preds = %102, %99
  %119 = icmp eq i64 %22, %39
  br i1 %119, label %173, label %120

120:                                              ; preds = %118, %30, %28
  %121 = phi i64 [ %22, %30 ], [ %22, %28 ], [ %40, %118 ]
  %122 = phi i16* [ %19, %30 ], [ %19, %28 ], [ %41, %118 ]
  %123 = phi i16* [ %25, %30 ], [ %25, %28 ], [ %42, %118 ]
  %124 = add i64 %121, -1
  %125 = and i64 %121, 7
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %138, label %127

127:                                              ; preds = %120, %127
  %128 = phi i64 [ %133, %127 ], [ %121, %120 ]
  %129 = phi i16* [ %135, %127 ], [ %122, %120 ]
  %130 = phi i16* [ %134, %127 ], [ %123, %120 ]
  %131 = phi i64 [ %136, %127 ], [ %125, %120 ]
  %132 = load i16, i16* %129, align 2
  store i16 %132, i16* %130, align 2
  %133 = add i64 %128, -1
  %134 = getelementptr inbounds i16, i16* %130, i64 1
  %135 = getelementptr inbounds i16, i16* %129, i64 1
  %136 = add i64 %131, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %127, !llvm.loop !16

138:                                              ; preds = %127, %120
  %139 = phi i64 [ %121, %120 ], [ %133, %127 ]
  %140 = phi i16* [ %122, %120 ], [ %135, %127 ]
  %141 = phi i16* [ %123, %120 ], [ %134, %127 ]
  %142 = icmp ult i64 %124, 7
  br i1 %142, label %173, label %143

143:                                              ; preds = %138, %143
  %144 = phi i64 [ %169, %143 ], [ %139, %138 ]
  %145 = phi i16* [ %171, %143 ], [ %140, %138 ]
  %146 = phi i16* [ %170, %143 ], [ %141, %138 ]
  %147 = load i16, i16* %145, align 2
  store i16 %147, i16* %146, align 2
  %148 = getelementptr inbounds i16, i16* %146, i64 1
  %149 = getelementptr inbounds i16, i16* %145, i64 1
  %150 = load i16, i16* %149, align 2
  store i16 %150, i16* %148, align 2
  %151 = getelementptr inbounds i16, i16* %146, i64 2
  %152 = getelementptr inbounds i16, i16* %145, i64 2
  %153 = load i16, i16* %152, align 2
  store i16 %153, i16* %151, align 2
  %154 = getelementptr inbounds i16, i16* %146, i64 3
  %155 = getelementptr inbounds i16, i16* %145, i64 3
  %156 = load i16, i16* %155, align 2
  store i16 %156, i16* %154, align 2
  %157 = getelementptr inbounds i16, i16* %146, i64 4
  %158 = getelementptr inbounds i16, i16* %145, i64 4
  %159 = load i16, i16* %158, align 2
  store i16 %159, i16* %157, align 2
  %160 = getelementptr inbounds i16, i16* %146, i64 5
  %161 = getelementptr inbounds i16, i16* %145, i64 5
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %146, i64 6
  %164 = getelementptr inbounds i16, i16* %145, i64 6
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %146, i64 7
  %167 = getelementptr inbounds i16, i16* %145, i64 7
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = add i64 %144, -8
  %170 = getelementptr inbounds i16, i16* %146, i64 8
  %171 = getelementptr inbounds i16, i16* %145, i64 8
  %172 = icmp eq i64 %169, 0
  br i1 %172, label %173, label %143, !llvm.loop !17

173:                                              ; preds = %138, %143, %118, %24
  %174 = getelementptr inbounds i16, i16* %25, i64 %22
  store i16 0, i16* %174, align 2
  br label %510

175:                                              ; preds = %17
  %176 = add i64 %22, -10
  %177 = icmp ugt i64 %176, 9223372036854775780
  br i1 %177, label %178, label %180

178:                                              ; preds = %175
  %179 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %179) #12
  unreachable

180:                                              ; preds = %175
  %181 = icmp ugt i64 %22, 20
  %182 = select i1 %181, i64 %22, i64 20
  %183 = add nuw nsw i64 %182, 8
  %184 = and i64 %183, -8
  %185 = icmp slt i64 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %180
  tail call void @abort() #12
  unreachable

187:                                              ; preds = %180
  %188 = shl i64 %184, 1
  %189 = tail call i8* @_Znwm(i64 %188) #11
  %190 = bitcast i8* %189 to i16*
  %191 = icmp ult i64 %22, 16
  br i1 %191, label %282, label %192

192:                                              ; preds = %187
  %193 = shl i64 %22, 1
  %194 = getelementptr i8, i8* %189, i64 %193
  %195 = getelementptr i16, i16* %19, i64 %22
  %196 = bitcast i16* %195 to i8*
  %197 = icmp ult i8* %189, %196
  %198 = icmp ugt i8* %194, %20
  %199 = and i1 %197, %198
  br i1 %199, label %282, label %200

200:                                              ; preds = %192
  %201 = and i64 %22, -16
  %202 = sub i64 %22, %201
  %203 = getelementptr i16, i16* %19, i64 %201
  %204 = getelementptr i16, i16* %190, i64 %201
  %205 = add i64 %201, -16
  %206 = lshr exact i64 %205, 4
  %207 = add nuw nsw i64 %206, 1
  %208 = and i64 %207, 3
  %209 = icmp ult i64 %205, 48
  br i1 %209, label %261, label %210

210:                                              ; preds = %200
  %211 = sub nsw i64 %207, %208
  br label %212

212:                                              ; preds = %212, %210
  %213 = phi i64 [ 0, %210 ], [ %258, %212 ]
  %214 = phi i64 [ %211, %210 ], [ %259, %212 ]
  %215 = getelementptr i16, i16* %19, i64 %213
  %216 = getelementptr i16, i16* %190, i64 %213
  %217 = bitcast i16* %215 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 2, !alias.scope !18
  %219 = getelementptr i16, i16* %215, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 2, !alias.scope !18
  %222 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %218, <8 x i16>* %222, align 2, !alias.scope !21, !noalias !18
  %223 = getelementptr i16, i16* %216, i64 8
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %224, align 2, !alias.scope !21, !noalias !18
  %225 = or i64 %213, 16
  %226 = getelementptr i16, i16* %19, i64 %225
  %227 = getelementptr i16, i16* %190, i64 %225
  %228 = bitcast i16* %226 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 2, !alias.scope !18
  %230 = getelementptr i16, i16* %226, i64 8
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2, !alias.scope !18
  %233 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %233, align 2, !alias.scope !21, !noalias !18
  %234 = getelementptr i16, i16* %227, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %235, align 2, !alias.scope !21, !noalias !18
  %236 = or i64 %213, 32
  %237 = getelementptr i16, i16* %19, i64 %236
  %238 = getelementptr i16, i16* %190, i64 %236
  %239 = bitcast i16* %237 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 2, !alias.scope !18
  %241 = getelementptr i16, i16* %237, i64 8
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 2, !alias.scope !18
  %244 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %244, align 2, !alias.scope !21, !noalias !18
  %245 = getelementptr i16, i16* %238, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %246, align 2, !alias.scope !21, !noalias !18
  %247 = or i64 %213, 48
  %248 = getelementptr i16, i16* %19, i64 %247
  %249 = getelementptr i16, i16* %190, i64 %247
  %250 = bitcast i16* %248 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !18
  %252 = getelementptr i16, i16* %248, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !18
  %255 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %255, align 2, !alias.scope !21, !noalias !18
  %256 = getelementptr i16, i16* %249, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %257, align 2, !alias.scope !21, !noalias !18
  %258 = add i64 %213, 64
  %259 = add i64 %214, -4
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %212, !llvm.loop !23

261:                                              ; preds = %212, %200
  %262 = phi i64 [ 0, %200 ], [ %258, %212 ]
  %263 = icmp eq i64 %208, 0
  br i1 %263, label %280, label %264

264:                                              ; preds = %261, %264
  %265 = phi i64 [ %277, %264 ], [ %262, %261 ]
  %266 = phi i64 [ %278, %264 ], [ %208, %261 ]
  %267 = getelementptr i16, i16* %19, i64 %265
  %268 = getelementptr i16, i16* %190, i64 %265
  %269 = bitcast i16* %267 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !18
  %271 = getelementptr i16, i16* %267, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !18
  %274 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %274, align 2, !alias.scope !21, !noalias !18
  %275 = getelementptr i16, i16* %268, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %276, align 2, !alias.scope !21, !noalias !18
  %277 = add i64 %265, 16
  %278 = add i64 %266, -1
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %264, !llvm.loop !24

280:                                              ; preds = %264, %261
  %281 = icmp eq i64 %22, %201
  br i1 %281, label %335, label %282

282:                                              ; preds = %280, %192, %187
  %283 = phi i64 [ %22, %192 ], [ %22, %187 ], [ %202, %280 ]
  %284 = phi i16* [ %19, %192 ], [ %19, %187 ], [ %203, %280 ]
  %285 = phi i16* [ %190, %192 ], [ %190, %187 ], [ %204, %280 ]
  %286 = add i64 %283, -1
  %287 = and i64 %283, 7
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %300, label %289

289:                                              ; preds = %282, %289
  %290 = phi i64 [ %295, %289 ], [ %283, %282 ]
  %291 = phi i16* [ %297, %289 ], [ %284, %282 ]
  %292 = phi i16* [ %296, %289 ], [ %285, %282 ]
  %293 = phi i64 [ %298, %289 ], [ %287, %282 ]
  %294 = load i16, i16* %291, align 2
  store i16 %294, i16* %292, align 2
  %295 = add i64 %290, -1
  %296 = getelementptr inbounds i16, i16* %292, i64 1
  %297 = getelementptr inbounds i16, i16* %291, i64 1
  %298 = add i64 %293, -1
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %300, label %289, !llvm.loop !25

300:                                              ; preds = %289, %282
  %301 = phi i64 [ %283, %282 ], [ %295, %289 ]
  %302 = phi i16* [ %284, %282 ], [ %297, %289 ]
  %303 = phi i16* [ %285, %282 ], [ %296, %289 ]
  %304 = icmp ult i64 %286, 7
  br i1 %304, label %335, label %305

305:                                              ; preds = %300, %305
  %306 = phi i64 [ %331, %305 ], [ %301, %300 ]
  %307 = phi i16* [ %333, %305 ], [ %302, %300 ]
  %308 = phi i16* [ %332, %305 ], [ %303, %300 ]
  %309 = load i16, i16* %307, align 2
  store i16 %309, i16* %308, align 2
  %310 = getelementptr inbounds i16, i16* %308, i64 1
  %311 = getelementptr inbounds i16, i16* %307, i64 1
  %312 = load i16, i16* %311, align 2
  store i16 %312, i16* %310, align 2
  %313 = getelementptr inbounds i16, i16* %308, i64 2
  %314 = getelementptr inbounds i16, i16* %307, i64 2
  %315 = load i16, i16* %314, align 2
  store i16 %315, i16* %313, align 2
  %316 = getelementptr inbounds i16, i16* %308, i64 3
  %317 = getelementptr inbounds i16, i16* %307, i64 3
  %318 = load i16, i16* %317, align 2
  store i16 %318, i16* %316, align 2
  %319 = getelementptr inbounds i16, i16* %308, i64 4
  %320 = getelementptr inbounds i16, i16* %307, i64 4
  %321 = load i16, i16* %320, align 2
  store i16 %321, i16* %319, align 2
  %322 = getelementptr inbounds i16, i16* %308, i64 5
  %323 = getelementptr inbounds i16, i16* %307, i64 5
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %308, i64 6
  %326 = getelementptr inbounds i16, i16* %307, i64 6
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %308, i64 7
  %329 = getelementptr inbounds i16, i16* %307, i64 7
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = add i64 %306, -8
  %332 = getelementptr inbounds i16, i16* %308, i64 8
  %333 = getelementptr inbounds i16, i16* %307, i64 8
  %334 = icmp eq i64 %331, 0
  br i1 %334, label %335, label %305, !llvm.loop !26

335:                                              ; preds = %300, %305, %280
  %336 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %189, i8** %336, align 8
  %337 = or i64 %184, -9223372036854775808
  %338 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %337, i64* %338, align 8
  %339 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %339, align 8
  %340 = getelementptr inbounds i16, i16* %190, i64 %22
  store i16 0, i16* %340, align 2
  br label %510

341:                                              ; preds = %5
  %342 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %343 = load i16*, i16** %342, align 8
  %344 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %345 = load i64, i64* %344, align 8
  %346 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %347 = zext i8 %12 to i64
  %348 = select i1 %13, i16* %343, i16* %346
  %349 = select i1 %13, i64 %345, i64 %347
  %350 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %351 = load i64, i64* %350, align 8
  %352 = and i64 %351, 9223372036854775807
  %353 = icmp ugt i64 %352, %349
  br i1 %353, label %354, label %504

354:                                              ; preds = %341
  %355 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %356 = load i16*, i16** %355, align 8
  %357 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %349, i64* %357, align 8
  %358 = icmp eq i64 %349, 0
  br i1 %358, label %502, label %359

359:                                              ; preds = %354
  %360 = icmp ult i64 %349, 16
  br i1 %360, label %449, label %361

361:                                              ; preds = %359
  %362 = getelementptr i16, i16* %356, i64 %349
  %363 = getelementptr i16, i16* %348, i64 %349
  %364 = icmp ult i16* %356, %363
  %365 = icmp ult i16* %348, %362
  %366 = and i1 %364, %365
  br i1 %366, label %449, label %367

367:                                              ; preds = %361
  %368 = and i64 %349, -16
  %369 = sub i64 %349, %368
  %370 = getelementptr i16, i16* %348, i64 %368
  %371 = getelementptr i16, i16* %356, i64 %368
  %372 = add i64 %368, -16
  %373 = lshr exact i64 %372, 4
  %374 = add nuw nsw i64 %373, 1
  %375 = and i64 %374, 3
  %376 = icmp ult i64 %372, 48
  br i1 %376, label %428, label %377

377:                                              ; preds = %367
  %378 = sub nsw i64 %374, %375
  br label %379

379:                                              ; preds = %379, %377
  %380 = phi i64 [ 0, %377 ], [ %425, %379 ]
  %381 = phi i64 [ %378, %377 ], [ %426, %379 ]
  %382 = getelementptr i16, i16* %348, i64 %380
  %383 = getelementptr i16, i16* %356, i64 %380
  %384 = bitcast i16* %382 to <8 x i16>*
  %385 = load <8 x i16>, <8 x i16>* %384, align 2, !alias.scope !27
  %386 = getelementptr i16, i16* %382, i64 8
  %387 = bitcast i16* %386 to <8 x i16>*
  %388 = load <8 x i16>, <8 x i16>* %387, align 2, !alias.scope !27
  %389 = bitcast i16* %383 to <8 x i16>*
  store <8 x i16> %385, <8 x i16>* %389, align 2, !alias.scope !30, !noalias !27
  %390 = getelementptr i16, i16* %383, i64 8
  %391 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %391, align 2, !alias.scope !30, !noalias !27
  %392 = or i64 %380, 16
  %393 = getelementptr i16, i16* %348, i64 %392
  %394 = getelementptr i16, i16* %356, i64 %392
  %395 = bitcast i16* %393 to <8 x i16>*
  %396 = load <8 x i16>, <8 x i16>* %395, align 2, !alias.scope !27
  %397 = getelementptr i16, i16* %393, i64 8
  %398 = bitcast i16* %397 to <8 x i16>*
  %399 = load <8 x i16>, <8 x i16>* %398, align 2, !alias.scope !27
  %400 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %396, <8 x i16>* %400, align 2, !alias.scope !30, !noalias !27
  %401 = getelementptr i16, i16* %394, i64 8
  %402 = bitcast i16* %401 to <8 x i16>*
  store <8 x i16> %399, <8 x i16>* %402, align 2, !alias.scope !30, !noalias !27
  %403 = or i64 %380, 32
  %404 = getelementptr i16, i16* %348, i64 %403
  %405 = getelementptr i16, i16* %356, i64 %403
  %406 = bitcast i16* %404 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 2, !alias.scope !27
  %408 = getelementptr i16, i16* %404, i64 8
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2, !alias.scope !27
  %411 = bitcast i16* %405 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %411, align 2, !alias.scope !30, !noalias !27
  %412 = getelementptr i16, i16* %405, i64 8
  %413 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %413, align 2, !alias.scope !30, !noalias !27
  %414 = or i64 %380, 48
  %415 = getelementptr i16, i16* %348, i64 %414
  %416 = getelementptr i16, i16* %356, i64 %414
  %417 = bitcast i16* %415 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 2, !alias.scope !27
  %419 = getelementptr i16, i16* %415, i64 8
  %420 = bitcast i16* %419 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 2, !alias.scope !27
  %422 = bitcast i16* %416 to <8 x i16>*
  store <8 x i16> %418, <8 x i16>* %422, align 2, !alias.scope !30, !noalias !27
  %423 = getelementptr i16, i16* %416, i64 8
  %424 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %421, <8 x i16>* %424, align 2, !alias.scope !30, !noalias !27
  %425 = add i64 %380, 64
  %426 = add i64 %381, -4
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %379, !llvm.loop !32

428:                                              ; preds = %379, %367
  %429 = phi i64 [ 0, %367 ], [ %425, %379 ]
  %430 = icmp eq i64 %375, 0
  br i1 %430, label %447, label %431

431:                                              ; preds = %428, %431
  %432 = phi i64 [ %444, %431 ], [ %429, %428 ]
  %433 = phi i64 [ %445, %431 ], [ %375, %428 ]
  %434 = getelementptr i16, i16* %348, i64 %432
  %435 = getelementptr i16, i16* %356, i64 %432
  %436 = bitcast i16* %434 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 2, !alias.scope !27
  %438 = getelementptr i16, i16* %434, i64 8
  %439 = bitcast i16* %438 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !27
  %441 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %441, align 2, !alias.scope !30, !noalias !27
  %442 = getelementptr i16, i16* %435, i64 8
  %443 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %440, <8 x i16>* %443, align 2, !alias.scope !30, !noalias !27
  %444 = add i64 %432, 16
  %445 = add i64 %433, -1
  %446 = icmp eq i64 %445, 0
  br i1 %446, label %447, label %431, !llvm.loop !33

447:                                              ; preds = %431, %428
  %448 = icmp eq i64 %349, %368
  br i1 %448, label %502, label %449

449:                                              ; preds = %447, %361, %359
  %450 = phi i64 [ %349, %361 ], [ %349, %359 ], [ %369, %447 ]
  %451 = phi i16* [ %348, %361 ], [ %348, %359 ], [ %370, %447 ]
  %452 = phi i16* [ %356, %361 ], [ %356, %359 ], [ %371, %447 ]
  %453 = add i64 %450, -1
  %454 = and i64 %450, 7
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %467, label %456

456:                                              ; preds = %449, %456
  %457 = phi i64 [ %462, %456 ], [ %450, %449 ]
  %458 = phi i16* [ %464, %456 ], [ %451, %449 ]
  %459 = phi i16* [ %463, %456 ], [ %452, %449 ]
  %460 = phi i64 [ %465, %456 ], [ %454, %449 ]
  %461 = load i16, i16* %458, align 2
  store i16 %461, i16* %459, align 2
  %462 = add i64 %457, -1
  %463 = getelementptr inbounds i16, i16* %459, i64 1
  %464 = getelementptr inbounds i16, i16* %458, i64 1
  %465 = add i64 %460, -1
  %466 = icmp eq i64 %465, 0
  br i1 %466, label %467, label %456, !llvm.loop !34

467:                                              ; preds = %456, %449
  %468 = phi i64 [ %450, %449 ], [ %462, %456 ]
  %469 = phi i16* [ %451, %449 ], [ %464, %456 ]
  %470 = phi i16* [ %452, %449 ], [ %463, %456 ]
  %471 = icmp ult i64 %453, 7
  br i1 %471, label %502, label %472

472:                                              ; preds = %467, %472
  %473 = phi i64 [ %498, %472 ], [ %468, %467 ]
  %474 = phi i16* [ %500, %472 ], [ %469, %467 ]
  %475 = phi i16* [ %499, %472 ], [ %470, %467 ]
  %476 = load i16, i16* %474, align 2
  store i16 %476, i16* %475, align 2
  %477 = getelementptr inbounds i16, i16* %475, i64 1
  %478 = getelementptr inbounds i16, i16* %474, i64 1
  %479 = load i16, i16* %478, align 2
  store i16 %479, i16* %477, align 2
  %480 = getelementptr inbounds i16, i16* %475, i64 2
  %481 = getelementptr inbounds i16, i16* %474, i64 2
  %482 = load i16, i16* %481, align 2
  store i16 %482, i16* %480, align 2
  %483 = getelementptr inbounds i16, i16* %475, i64 3
  %484 = getelementptr inbounds i16, i16* %474, i64 3
  %485 = load i16, i16* %484, align 2
  store i16 %485, i16* %483, align 2
  %486 = getelementptr inbounds i16, i16* %475, i64 4
  %487 = getelementptr inbounds i16, i16* %474, i64 4
  %488 = load i16, i16* %487, align 2
  store i16 %488, i16* %486, align 2
  %489 = getelementptr inbounds i16, i16* %475, i64 5
  %490 = getelementptr inbounds i16, i16* %474, i64 5
  %491 = load i16, i16* %490, align 2
  store i16 %491, i16* %489, align 2
  %492 = getelementptr inbounds i16, i16* %475, i64 6
  %493 = getelementptr inbounds i16, i16* %474, i64 6
  %494 = load i16, i16* %493, align 2
  store i16 %494, i16* %492, align 2
  %495 = getelementptr inbounds i16, i16* %475, i64 7
  %496 = getelementptr inbounds i16, i16* %474, i64 7
  %497 = load i16, i16* %496, align 2
  store i16 %497, i16* %495, align 2
  %498 = add i64 %473, -8
  %499 = getelementptr inbounds i16, i16* %475, i64 8
  %500 = getelementptr inbounds i16, i16* %474, i64 8
  %501 = icmp eq i64 %498, 0
  br i1 %501, label %502, label %472, !llvm.loop !35

502:                                              ; preds = %467, %472, %447, %354
  %503 = getelementptr inbounds i16, i16* %356, i64 %349
  store i16 0, i16* %503, align 2
  br label %510

504:                                              ; preds = %341
  %505 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %506 = load i64, i64* %505, align 8
  %507 = add nsw i64 %352, -1
  %508 = add i64 %349, 1
  %509 = sub i64 %508, %352
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string"* %0, i64 %507, i64 %509, i64 %506, i64 0, i64 %506, i64 %349, i16* %348) #10
  br label %510

510:                                              ; preds = %504, %502, %335, %173, %15, %2
  ret %"class.std::__1::basic_string"* %0
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

declare void @_ZN2vr23PlatformUiInputDelegate12OnHoverEnterERKN3gfx6PointFEN4base9TimeTicksE(%"class.vr::PlatformUiInputDelegate"*, %"class.gfx::PointF"* dereferenceable(8), i64) unnamed_addr #1

declare void @_ZN2vr23PlatformUiInputDelegate12OnHoverLeaveEN4base9TimeTicksE(%"class.vr::PlatformUiInputDelegate"*, i64) unnamed_addr #1

declare void @_ZN2vr23PlatformUiInputDelegate11OnHoverMoveERKN3gfx6PointFEN4base9TimeTicksE(%"class.vr::PlatformUiInputDelegate"*, %"class.gfx::PointF"* dereferenceable(8), i64) unnamed_addr #1

declare void @_ZN2vr23PlatformUiInputDelegate12OnButtonDownERKN3gfx6PointFEN4base9TimeTicksE(%"class.vr::PlatformUiInputDelegate"*, %"class.gfx::PointF"* dereferenceable(8), i64) unnamed_addr #1

declare void @_ZN2vr23PlatformUiInputDelegate10OnButtonUpERKN3gfx6PointFEN4base9TimeTicksE(%"class.vr::PlatformUiInputDelegate"*, %"class.gfx::PointF"* dereferenceable(8), i64) unnamed_addr #1

declare void @_ZN2vr23PlatformUiInputDelegate11OnTouchMoveERKN3gfx6PointFEN4base9TimeTicksE(%"class.vr::PlatformUiInputDelegate"*, %"class.gfx::PointF"* dereferenceable(8), i64) unnamed_addr #1

declare void @_ZN2vr23PlatformUiInputDelegate12OnInputEventENSt3__110unique_ptrINS_10InputEventENS1_14default_deleteIS3_EEEERKN3gfx6PointFE(%"class.vr::PlatformUiInputDelegate"*, %"class.vr::InputEvent"*, %"class.gfx::PointF"* dereferenceable(8)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__deque_baseIN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEENS_9allocatorIS8_EEE5clearEv(%"class.std::__1::__deque_base"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 1
  %3 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 9
  %7 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %3, i64 %6
  %8 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 2
  %9 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %8, align 8
  %10 = icmp eq %"class.base::OnceCallback"** %9, %3
  %11 = ptrtoint %"class.base::OnceCallback"** %9 to i64
  %12 = ptrtoint %"class.base::OnceCallback"** %3 to i64
  %13 = bitcast %"class.base::OnceCallback"** %3 to i8**
  br i1 %10, label %14, label %16

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  br label %29

16:                                               ; preds = %1
  %17 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %7, align 8
  %18 = and i64 %5, 511
  %19 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %17, i64 %18
  %20 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, %5
  %23 = lshr i64 %22, 9
  %24 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %3, i64 %23
  %25 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %24, align 8
  %26 = and i64 %22, 511
  %27 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %25, i64 %26
  %28 = icmp eq %"class.base::OnceCallback"* %27, %19
  br i1 %28, label %29, label %47

29:                                               ; preds = %14, %16
  %30 = phi i64* [ %15, %14 ], [ %20, %16 ]
  %31 = bitcast %"class.base::OnceCallback"*** %8 to i64*
  br label %38

32:                                               ; preds = %61
  %33 = bitcast %"class.base::OnceCallback"*** %8 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.base::OnceCallback"*** %2 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = inttoptr i64 %36 to i8**
  br label %38

38:                                               ; preds = %29, %32
  %39 = phi i64* [ %30, %29 ], [ %20, %32 ]
  %40 = phi i64* [ %31, %29 ], [ %33, %32 ]
  %41 = phi i8** [ %13, %29 ], [ %37, %32 ]
  %42 = phi i64 [ %12, %29 ], [ %36, %32 ]
  %43 = phi i64 [ %11, %29 ], [ %34, %32 ]
  store i64 0, i64* %39, align 8
  %44 = sub i64 %43, %42
  %45 = ashr exact i64 %44, 3
  %46 = icmp ugt i64 %45, 2
  br i1 %46, label %66, label %77

47:                                               ; preds = %16, %61
  %48 = phi %"class.base::OnceCallback"* [ %64, %61 ], [ %19, %16 ]
  %49 = phi %"class.base::OnceCallback"** [ %63, %61 ], [ %7, %16 ]
  %50 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %48, i64 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %50) #10
  %51 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %48, i64 1
  %52 = ptrtoint %"class.base::OnceCallback"* %51 to i64
  %53 = bitcast %"class.base::OnceCallback"** %49 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = sub i64 %52, %54
  %56 = icmp eq i64 %55, 4096
  br i1 %56, label %57, label %61

57:                                               ; preds = %47
  %58 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %49, i64 1
  %59 = bitcast %"class.base::OnceCallback"** %58 to i64*
  %60 = load i64, i64* %59, align 8
  br label %61

61:                                               ; preds = %47, %57
  %62 = phi i64 [ %60, %57 ], [ %52, %47 ]
  %63 = phi %"class.base::OnceCallback"** [ %58, %57 ], [ %49, %47 ]
  %64 = inttoptr i64 %62 to %"class.base::OnceCallback"*
  %65 = icmp eq %"class.base::OnceCallback"* %27, %64
  br i1 %65, label %32, label %47

66:                                               ; preds = %38, %66
  %67 = phi i8** [ %76, %66 ], [ %41, %38 ]
  %68 = load i8*, i8** %67, align 8
  tail call void @_ZdlPv(i8* %68) #11
  %69 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %2, align 8
  %70 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %69, i64 1
  store %"class.base::OnceCallback"** %70, %"class.base::OnceCallback"*** %2, align 8
  %71 = load i64, i64* %40, align 8
  %72 = ptrtoint %"class.base::OnceCallback"** %70 to i64
  %73 = sub i64 %71, %72
  %74 = ashr exact i64 %73, 3
  %75 = icmp ugt i64 %74, 2
  %76 = bitcast %"class.base::OnceCallback"** %70 to i8**
  br i1 %75, label %66, label %77

77:                                               ; preds = %66, %38
  %78 = phi i64 [ %45, %38 ], [ %74, %66 ]
  switch i64 %78, label %82 [
    i64 1, label %80
    i64 2, label %79
  ]

79:                                               ; preds = %77
  br label %80

80:                                               ; preds = %77, %79
  %81 = phi i64 [ 512, %79 ], [ 256, %77 ]
  store i64 %81, i64* %4, align 8
  br label %82

82:                                               ; preds = %80, %77
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #0 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #12
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #12
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #11
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = sub i64 %4, %55
  %57 = getelementptr i16, i16* %24, i64 %55
  %58 = getelementptr i16, i16* %42, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %24, i64 %67
  %70 = getelementptr i16, i16* %42, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !36
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !36
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !39, !noalias !36
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !39, !noalias !36
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %24, i64 %79
  %81 = getelementptr i16, i16* %42, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !36
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !36
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !39, !noalias !36
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !39, !noalias !36
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %24, i64 %90
  %92 = getelementptr i16, i16* %42, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !36
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !36
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !39, !noalias !36
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !39, !noalias !36
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %24, i64 %101
  %103 = getelementptr i16, i16* %42, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !36
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !36
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !39, !noalias !36
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !39, !noalias !36
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !41

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %24, i64 %119
  %122 = getelementptr i16, i16* %42, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !36
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !36
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !39, !noalias !36
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !39, !noalias !36
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !42

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %56, %134 ]
  %138 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !43

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !44

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = sub i64 %6, %195
  %197 = getelementptr i16, i16* %7, i64 %195
  %198 = getelementptr i16, i16* %192, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %7, i64 %207
  %210 = getelementptr i16, i16* %192, i64 %207
  %211 = bitcast i16* %209 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %209, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %210, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %7, i64 %219
  %221 = getelementptr i16, i16* %192, i64 %219
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %221, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %7, i64 %230
  %232 = getelementptr i16, i16* %192, i64 %230
  %233 = bitcast i16* %231 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %232, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %7, i64 %241
  %243 = getelementptr i16, i16* %192, i64 %241
  %244 = bitcast i16* %242 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %242, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %243, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !45

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %7, i64 %259
  %262 = getelementptr i16, i16* %192, i64 %259
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !46

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i64 [ %6, %191 ], [ %196, %274 ]
  %278 = phi i16* [ %7, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %192, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i64 [ %285, %280 ], [ %277, %276 ]
  %282 = phi i16* [ %287, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %286, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %282, align 2
  store i16 %284, i16* %283, align 2
  %285 = add i64 %281, -1
  %286 = getelementptr inbounds i16, i16* %283, i64 1
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !47

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = sub i64 %291, %314
  %316 = getelementptr i16, i16* %297, i64 %314
  %317 = getelementptr i16, i16* %295, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %297, i64 %326
  %329 = getelementptr i16, i16* %295, i64 %326
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !49
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !49
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !52, !noalias !49
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !52, !noalias !49
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %297, i64 %338
  %340 = getelementptr i16, i16* %295, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !49
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !49
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !52, !noalias !49
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !52, !noalias !49
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %297, i64 %349
  %351 = getelementptr i16, i16* %295, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !49
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !49
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !52, !noalias !49
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !52, !noalias !49
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %297, i64 %360
  %362 = getelementptr i16, i16* %295, i64 %360
  %363 = bitcast i16* %361 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !49
  %365 = getelementptr i16, i16* %361, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !49
  %368 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !52, !noalias !49
  %369 = getelementptr i16, i16* %362, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !52, !noalias !49
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !54

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %297, i64 %378
  %381 = getelementptr i16, i16* %295, i64 %378
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !49
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !49
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !52, !noalias !49
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !52, !noalias !49
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !55

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %315, %393 ]
  %397 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %317, %393 ]
  %399 = add i64 %396, -1
  %400 = and i64 %396, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %408, %402 ], [ %396, %395 ]
  %404 = phi i16* [ %410, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %409, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %404, align 2
  store i16 %407, i16* %405, align 2
  %408 = add i64 %403, -1
  %409 = getelementptr inbounds i16, i16* %405, i64 1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !56

413:                                              ; preds = %402, %395
  %414 = phi i64 [ %396, %395 ], [ %408, %402 ]
  %415 = phi i16* [ %397, %395 ], [ %410, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %409, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i64 [ %444, %418 ], [ %414, %413 ]
  %420 = phi i16* [ %446, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %445, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %420, align 2
  store i16 %422, i16* %421, align 2
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %421, i64 3
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %421, i64 4
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %421, i64 5
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %421, i64 6
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %421, i64 7
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %419, -8
  %445 = getelementptr inbounds i16, i16* %421, i64 8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !57

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #11
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEENS_9allocatorIS8_EEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.base::OnceCallback"*, align 8
  %3 = alloca %"class.base::OnceCallback"*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.23", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 511
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -512
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %10, align 8
  %12 = bitcast %"class.base::OnceCallback"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %11, i64 1
  store %"class.base::OnceCallback"** %14, %"class.base::OnceCallback"*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %17, align 8
  %19 = icmp eq %"class.base::OnceCallback"** %16, %18
  %20 = ptrtoint %"class.base::OnceCallback"** %18 to i64
  %21 = bitcast %"class.base::OnceCallback"** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %23, align 8
  %25 = icmp ugt %"class.base::OnceCallback"** %14, %24
  %26 = ptrtoint %"class.base::OnceCallback"** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint %"class.base::OnceCallback"** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %14, i64 %32
  %34 = ptrtoint %"class.base::OnceCallback"** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast %"class.base::OnceCallback"** %33 to i8*
  %40 = bitcast %"class.base::OnceCallback"** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #10
  %41 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi %"class.base::OnceCallback"** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %33, i64 %36
  store %"class.base::OnceCallback"** %44, %"class.base::OnceCallback"*** %15, align 8
  %45 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %43, i64 %32
  store %"class.base::OnceCallback"** %45, %"class.base::OnceCallback"*** %10, align 8
  %46 = bitcast %"class.base::OnceCallback"** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast %"class.base::OnceCallback"*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #11
  %60 = bitcast i8* %59 to %"class.base::OnceCallback"**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %60, i64 %57
  %63 = ptrtoint %"class.base::OnceCallback"** %62 to i64
  %64 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %60, i64 %53
  %65 = ptrtoint %"class.base::OnceCallback"** %64 to i64
  %66 = ptrtoint %"class.base::OnceCallback"** %14 to i64
  %67 = ptrtoint %"class.base::OnceCallback"** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi %"class.base::OnceCallback"** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi %"class.base::OnceCallback"** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast %"class.base::OnceCallback"** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %79, i64 1
  %87 = ptrtoint %"class.base::OnceCallback"** %86 to i64
  %88 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !58

91:                                               ; preds = %78
  %92 = ptrtoint %"class.base::OnceCallback"** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi %"class.base::OnceCallback"** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi %"class.base::OnceCallback"** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi %"class.base::OnceCallback"** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi %"class.base::OnceCallback"** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast %"class.base::OnceCallback"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %99, i64 1
  %106 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %101, i64 1
  %107 = bitcast %"class.base::OnceCallback"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.base::OnceCallback"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %99, i64 2
  %111 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %101, i64 2
  %112 = bitcast %"class.base::OnceCallback"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.base::OnceCallback"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %99, i64 3
  %116 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %101, i64 3
  %117 = bitcast %"class.base::OnceCallback"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.base::OnceCallback"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %99, i64 4
  %121 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %101, i64 4
  %122 = bitcast %"class.base::OnceCallback"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.base::OnceCallback"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %99, i64 5
  %126 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %101, i64 5
  %127 = bitcast %"class.base::OnceCallback"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.base::OnceCallback"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %99, i64 6
  %131 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %101, i64 6
  %132 = bitcast %"class.base::OnceCallback"** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %"class.base::OnceCallback"** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %99, i64 7
  %136 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %101, i64 7
  %137 = bitcast %"class.base::OnceCallback"** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"class.base::OnceCallback"** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %99, i64 8
  %141 = ptrtoint %"class.base::OnceCallback"** %140 to i64
  %142 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %101, i64 8
  %143 = icmp eq %"class.base::OnceCallback"** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint %"class.base::OnceCallback"** %70 to i64
  %146 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi %"class.base::OnceCallback"** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast %"class.base::OnceCallback"*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast %"class.base::OnceCallback"*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq %"class.base::OnceCallback"** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast %"class.base::OnceCallback"** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #11
  %156 = bitcast %"class.base::OnceCallback"*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %15, align 8
  %161 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %160, i64 1
  store %"class.base::OnceCallback"** %161, %"class.base::OnceCallback"*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast %"class.base::OnceCallback"*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast %"class.base::OnceCallback"*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast %"class.base::OnceCallback"*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to %"class.base::OnceCallback"**
  %181 = inttoptr i64 %169 to %"class.base::OnceCallback"**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast %"class.base::OnceCallback"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #10
  %186 = tail call i8* @_Znwm(i64 4096) #11
  %187 = bitcast %"class.base::OnceCallback"** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEENS_9allocatorIS9_EEE9push_backEOS9_(%"struct.std::__1::__split_buffer"* %163, %"class.base::OnceCallback"** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #10
  br label %460

188:                                              ; preds = %182
  %189 = bitcast %"class.base::OnceCallback"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #10
  %190 = tail call i8* @_Znwm(i64 4096) #11
  %191 = bitcast %"class.base::OnceCallback"** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEENS_9allocatorIS9_EEE10push_frontEOS9_(%"struct.std::__1::__split_buffer"* %163, %"class.base::OnceCallback"** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #10
  %192 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %167, align 8
  %193 = bitcast %"class.base::OnceCallback"** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %192, i64 1
  store %"class.base::OnceCallback"** %195, %"class.base::OnceCallback"*** %167, align 8
  %196 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %164, align 8
  %197 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %172, align 8
  %198 = icmp eq %"class.base::OnceCallback"** %196, %197
  %199 = ptrtoint %"class.base::OnceCallback"** %197 to i64
  %200 = bitcast %"class.base::OnceCallback"** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %202, align 8
  %204 = icmp ugt %"class.base::OnceCallback"** %195, %203
  %205 = ptrtoint %"class.base::OnceCallback"** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint %"class.base::OnceCallback"** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %195, i64 %211
  %213 = ptrtoint %"class.base::OnceCallback"** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast %"class.base::OnceCallback"** %212 to i8*
  %219 = bitcast %"class.base::OnceCallback"** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #10
  %220 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi %"class.base::OnceCallback"** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %212, i64 %215
  store %"class.base::OnceCallback"** %223, %"class.base::OnceCallback"*** %164, align 8
  %224 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %222, i64 %211
  store %"class.base::OnceCallback"** %224, %"class.base::OnceCallback"*** %167, align 8
  %225 = bitcast %"class.base::OnceCallback"** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #12
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #11
  %237 = bitcast i8* %236 to %"class.base::OnceCallback"**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %237, i64 %234
  %240 = ptrtoint %"class.base::OnceCallback"** %239 to i64
  %241 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %237, i64 %230
  %242 = ptrtoint %"class.base::OnceCallback"** %241 to i64
  %243 = ptrtoint %"class.base::OnceCallback"** %195 to i64
  %244 = ptrtoint %"class.base::OnceCallback"** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi %"class.base::OnceCallback"** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi %"class.base::OnceCallback"** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast %"class.base::OnceCallback"** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %256, i64 1
  %264 = ptrtoint %"class.base::OnceCallback"** %263 to i64
  %265 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !59

268:                                              ; preds = %255
  %269 = ptrtoint %"class.base::OnceCallback"** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi %"class.base::OnceCallback"** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi %"class.base::OnceCallback"** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi %"class.base::OnceCallback"** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi %"class.base::OnceCallback"** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast %"class.base::OnceCallback"** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %276, i64 1
  %283 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %278, i64 1
  %284 = bitcast %"class.base::OnceCallback"** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %"class.base::OnceCallback"** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %276, i64 2
  %288 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %278, i64 2
  %289 = bitcast %"class.base::OnceCallback"** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"class.base::OnceCallback"** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %276, i64 3
  %293 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %278, i64 3
  %294 = bitcast %"class.base::OnceCallback"** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %"class.base::OnceCallback"** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %276, i64 4
  %298 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %278, i64 4
  %299 = bitcast %"class.base::OnceCallback"** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast %"class.base::OnceCallback"** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %276, i64 5
  %303 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %278, i64 5
  %304 = bitcast %"class.base::OnceCallback"** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast %"class.base::OnceCallback"** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %276, i64 6
  %308 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %278, i64 6
  %309 = bitcast %"class.base::OnceCallback"** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast %"class.base::OnceCallback"** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %276, i64 7
  %313 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %278, i64 7
  %314 = bitcast %"class.base::OnceCallback"** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast %"class.base::OnceCallback"** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %276, i64 8
  %318 = ptrtoint %"class.base::OnceCallback"** %317 to i64
  %319 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %278, i64 8
  %320 = icmp eq %"class.base::OnceCallback"** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint %"class.base::OnceCallback"** %247 to i64
  %323 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi %"class.base::OnceCallback"** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq %"class.base::OnceCallback"** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast %"class.base::OnceCallback"** %325 to i8*
  call void @_ZdlPv(i8* %330) #11
  %331 = bitcast %"class.base::OnceCallback"*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %164, align 8
  %336 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %335, i64 1
  store %"class.base::OnceCallback"** %336, %"class.base::OnceCallback"*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.23"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #10
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.23", %"struct.std::__1::__split_buffer.23"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.23", %"struct.std::__1::__split_buffer.23"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.23", %"struct.std::__1::__split_buffer.23"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.23", %"struct.std::__1::__split_buffer.23"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.23"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store %"class.base::OnceCallback"** null, %"class.base::OnceCallback"*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.5"** %342 to %"class.std::__1::__compressed_pair.2"**
  store %"class.std::__1::__compressed_pair.2"* %346, %"class.std::__1::__compressed_pair.2"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #12
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #11
  %354 = bitcast i8* %353 to %"class.base::OnceCallback"**
  %355 = bitcast %"struct.std::__1::__split_buffer.23"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %354, i64 %171
  store %"class.base::OnceCallback"** %356, %"class.base::OnceCallback"*** %340, align 8
  store %"class.base::OnceCallback"** %356, %"class.base::OnceCallback"*** %339, align 8
  %357 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %354, i64 %345
  store %"class.base::OnceCallback"** %357, %"class.base::OnceCallback"*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #11
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint %"class.base::OnceCallback"** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint %"class.base::OnceCallback"** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt %"class.base::OnceCallback"** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %356, i64 %370
  store %"class.base::OnceCallback"** %371, %"class.base::OnceCallback"*** %340, align 8
  store %"class.base::OnceCallback"** %371, %"class.base::OnceCallback"*** %339, align 8
  %372 = ptrtoint %"class.base::OnceCallback"** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #12
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.23"* %4 to i64*
  %382 = bitcast %"class.base::OnceCallback"*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #11
  %386 = bitcast i8* %385 to %"class.base::OnceCallback"**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %386, i64 %383
  %389 = ptrtoint %"class.base::OnceCallback"** %388 to i64
  %390 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %386, i64 %377
  %391 = ptrtoint %"class.base::OnceCallback"** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast %"class.base::OnceCallback"*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast %"class.base::OnceCallback"*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #11
  %394 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %164, align 8
  %395 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %167, align 8
  %396 = ptrtoint %"class.base::OnceCallback"** %395 to i64
  %397 = ptrtoint %"class.base::OnceCallback"** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi %"class.base::OnceCallback"** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi %"class.base::OnceCallback"** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi %"class.base::OnceCallback"** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast %"class.base::OnceCallback"** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %406, i64 1
  store %"class.base::OnceCallback"** %408, %"class.base::OnceCallback"*** %340, align 8
  %409 = icmp eq %"class.base::OnceCallback"** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint %"class.base::OnceCallback"** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.23"* %4 to i64*
  %413 = bitcast %"class.base::OnceCallback"*** %339 to i64*
  %414 = bitcast %"class.base::OnceCallback"*** %340 to i64*
  %415 = bitcast %"class.base::OnceCallback"*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint %"class.base::OnceCallback"** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.23"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast %"class.base::OnceCallback"*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast %"class.base::OnceCallback"*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast %"class.base::OnceCallback"*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to %"class.base::OnceCallback"**
  %441 = inttoptr i64 %434 to %"class.base::OnceCallback"**
  %442 = icmp eq %"class.base::OnceCallback"** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %441, i64 -1
  %445 = ptrtoint %"class.base::OnceCallback"** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %441, i64 %448
  store %"class.base::OnceCallback"** %449, %"class.base::OnceCallback"*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #11
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #10
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi %"class.base::OnceCallback"** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEERNS_9allocatorIS9_EEE10push_frontERKS9_(%"struct.std::__1::__split_buffer.23"* nonnull %4, %"class.base::OnceCallback"** dereferenceable(8) %457)
  %458 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %167, align 8
  %459 = icmp eq %"class.base::OnceCallback"** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEENS_9allocatorIS9_EEE9push_backEOS9_(%"struct.std::__1::__split_buffer"*, %"class.base::OnceCallback"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %5, align 8
  %7 = icmp eq %"class.base::OnceCallback"** %4, %6
  %8 = ptrtoint %"class.base::OnceCallback"** %6 to i64
  %9 = bitcast %"class.base::OnceCallback"** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %13, align 8
  %15 = icmp ugt %"class.base::OnceCallback"** %12, %14
  %16 = ptrtoint %"class.base::OnceCallback"** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"class.base::OnceCallback"** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %12, i64 %22
  %24 = ptrtoint %"class.base::OnceCallback"** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"class.base::OnceCallback"** %23 to i8*
  %30 = bitcast %"class.base::OnceCallback"** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #10
  %31 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"class.base::OnceCallback"** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %23, i64 %26
  store %"class.base::OnceCallback"** %34, %"class.base::OnceCallback"*** %3, align 8
  %35 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %33, i64 %22
  store %"class.base::OnceCallback"** %35, %"class.base::OnceCallback"*** %11, align 8
  %36 = bitcast %"class.base::OnceCallback"** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"class.base::OnceCallback"*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #11
  %50 = bitcast i8* %49 to %"class.base::OnceCallback"**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %50, i64 %47
  %53 = ptrtoint %"class.base::OnceCallback"** %52 to i64
  %54 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %50, i64 %43
  %55 = ptrtoint %"class.base::OnceCallback"** %54 to i64
  %56 = ptrtoint %"class.base::OnceCallback"** %12 to i64
  %57 = ptrtoint %"class.base::OnceCallback"** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"class.base::OnceCallback"** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"class.base::OnceCallback"** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"class.base::OnceCallback"** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %69, i64 1
  %77 = ptrtoint %"class.base::OnceCallback"** %76 to i64
  %78 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !60

81:                                               ; preds = %68
  %82 = ptrtoint %"class.base::OnceCallback"** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"class.base::OnceCallback"** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"class.base::OnceCallback"** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"class.base::OnceCallback"** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"class.base::OnceCallback"** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"class.base::OnceCallback"** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %89, i64 1
  %96 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %91, i64 1
  %97 = bitcast %"class.base::OnceCallback"** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"class.base::OnceCallback"** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %89, i64 2
  %101 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %91, i64 2
  %102 = bitcast %"class.base::OnceCallback"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"class.base::OnceCallback"** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %89, i64 3
  %106 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %91, i64 3
  %107 = bitcast %"class.base::OnceCallback"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.base::OnceCallback"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %89, i64 4
  %111 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %91, i64 4
  %112 = bitcast %"class.base::OnceCallback"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.base::OnceCallback"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %89, i64 5
  %116 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %91, i64 5
  %117 = bitcast %"class.base::OnceCallback"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.base::OnceCallback"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %89, i64 6
  %121 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %91, i64 6
  %122 = bitcast %"class.base::OnceCallback"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.base::OnceCallback"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %89, i64 7
  %126 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %91, i64 7
  %127 = bitcast %"class.base::OnceCallback"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.base::OnceCallback"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %89, i64 8
  %131 = ptrtoint %"class.base::OnceCallback"** %130 to i64
  %132 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %91, i64 8
  %133 = icmp eq %"class.base::OnceCallback"** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"class.base::OnceCallback"** %60 to i64
  %136 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"class.base::OnceCallback"** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"class.base::OnceCallback"*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"class.base::OnceCallback"*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"class.base::OnceCallback"** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %"class.base::OnceCallback"** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = bitcast %"class.base::OnceCallback"*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"class.base::OnceCallback"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %3, align 8
  %153 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %152, i64 1
  store %"class.base::OnceCallback"** %153, %"class.base::OnceCallback"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEENS_9allocatorIS9_EEE10push_frontEOS9_(%"struct.std::__1::__split_buffer"*, %"class.base::OnceCallback"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %5, align 8
  %7 = icmp eq %"class.base::OnceCallback"** %4, %6
  %8 = ptrtoint %"class.base::OnceCallback"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %12, align 8
  %14 = icmp ult %"class.base::OnceCallback"** %11, %13
  %15 = bitcast %"class.base::OnceCallback"*** %12 to i64*
  %16 = ptrtoint %"class.base::OnceCallback"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"class.base::OnceCallback"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %11, i64 %22
  %24 = ptrtoint %"class.base::OnceCallback"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %23, i64 %29
  %31 = bitcast %"class.base::OnceCallback"** %30 to i8*
  %32 = bitcast %"class.base::OnceCallback"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #10
  %33 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"class.base::OnceCallback"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"class.base::OnceCallback"** [ %30, %27 ], [ %23, %17 ]
  store %"class.base::OnceCallback"** %36, %"class.base::OnceCallback"*** %3, align 8
  %37 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %35, i64 %22
  store %"class.base::OnceCallback"** %37, %"class.base::OnceCallback"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #11
  %51 = bitcast i8* %50 to %"class.base::OnceCallback"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %51, i64 %48
  %54 = ptrtoint %"class.base::OnceCallback"** %53 to i64
  %55 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %51, i64 %43
  %56 = ptrtoint %"class.base::OnceCallback"** %55 to i64
  %57 = ptrtoint %"class.base::OnceCallback"** %4 to i64
  %58 = ptrtoint %"class.base::OnceCallback"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"class.base::OnceCallback"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"class.base::OnceCallback"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"class.base::OnceCallback"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %70, i64 1
  %78 = ptrtoint %"class.base::OnceCallback"** %77 to i64
  %79 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !61

82:                                               ; preds = %69
  %83 = ptrtoint %"class.base::OnceCallback"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"class.base::OnceCallback"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"class.base::OnceCallback"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"class.base::OnceCallback"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"class.base::OnceCallback"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"class.base::OnceCallback"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 1
  %97 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 1
  %98 = bitcast %"class.base::OnceCallback"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.base::OnceCallback"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 2
  %102 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 2
  %103 = bitcast %"class.base::OnceCallback"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.base::OnceCallback"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 3
  %107 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 3
  %108 = bitcast %"class.base::OnceCallback"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"class.base::OnceCallback"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 4
  %112 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 4
  %113 = bitcast %"class.base::OnceCallback"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.base::OnceCallback"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 5
  %117 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 5
  %118 = bitcast %"class.base::OnceCallback"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.base::OnceCallback"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 6
  %122 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 6
  %123 = bitcast %"class.base::OnceCallback"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.base::OnceCallback"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 7
  %127 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 7
  %128 = bitcast %"class.base::OnceCallback"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.base::OnceCallback"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 8
  %132 = ptrtoint %"class.base::OnceCallback"** %131 to i64
  %133 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 8
  %134 = icmp eq %"class.base::OnceCallback"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"class.base::OnceCallback"** %61 to i64
  %137 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"class.base::OnceCallback"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"class.base::OnceCallback"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"class.base::OnceCallback"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"class.base::OnceCallback"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"class.base::OnceCallback"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"class.base::OnceCallback"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %148, i64 -1
  %150 = bitcast %"class.base::OnceCallback"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"class.base::OnceCallback"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %3, align 8
  %154 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %153, i64 -1
  store %"class.base::OnceCallback"** %154, %"class.base::OnceCallback"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN4base12OnceCallbackIFvRKN2vr13TextInputInfoEEEERNS_9allocatorIS9_EEE10push_frontERKS9_(%"struct.std::__1::__split_buffer.23"*, %"class.base::OnceCallback"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.23", %"struct.std::__1::__split_buffer.23"* %0, i64 0, i32 1
  %4 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.23", %"struct.std::__1::__split_buffer.23"* %0, i64 0, i32 0
  %6 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %5, align 8
  %7 = icmp eq %"class.base::OnceCallback"** %4, %6
  %8 = ptrtoint %"class.base::OnceCallback"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.23", %"struct.std::__1::__split_buffer.23"* %0, i64 0, i32 2
  %11 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.23", %"struct.std::__1::__split_buffer.23"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %12, align 8
  %14 = icmp ult %"class.base::OnceCallback"** %11, %13
  %15 = bitcast %"class.base::OnceCallback"*** %12 to i64*
  %16 = ptrtoint %"class.base::OnceCallback"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"class.base::OnceCallback"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %11, i64 %22
  %24 = ptrtoint %"class.base::OnceCallback"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %23, i64 %29
  %31 = bitcast %"class.base::OnceCallback"** %30 to i8*
  %32 = bitcast %"class.base::OnceCallback"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #10
  %33 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"class.base::OnceCallback"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"class.base::OnceCallback"** [ %30, %27 ], [ %23, %17 ]
  store %"class.base::OnceCallback"** %36, %"class.base::OnceCallback"*** %3, align 8
  %37 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %35, i64 %22
  store %"class.base::OnceCallback"** %37, %"class.base::OnceCallback"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.23"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #11
  %51 = bitcast i8* %50 to %"class.base::OnceCallback"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %51, i64 %48
  %54 = ptrtoint %"class.base::OnceCallback"** %53 to i64
  %55 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %51, i64 %43
  %56 = ptrtoint %"class.base::OnceCallback"** %55 to i64
  %57 = ptrtoint %"class.base::OnceCallback"** %4 to i64
  %58 = ptrtoint %"class.base::OnceCallback"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"class.base::OnceCallback"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"class.base::OnceCallback"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"class.base::OnceCallback"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %70, i64 1
  %78 = ptrtoint %"class.base::OnceCallback"** %77 to i64
  %79 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !62

82:                                               ; preds = %69
  %83 = ptrtoint %"class.base::OnceCallback"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"class.base::OnceCallback"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"class.base::OnceCallback"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"class.base::OnceCallback"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"class.base::OnceCallback"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"class.base::OnceCallback"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 1
  %97 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 1
  %98 = bitcast %"class.base::OnceCallback"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.base::OnceCallback"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 2
  %102 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 2
  %103 = bitcast %"class.base::OnceCallback"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.base::OnceCallback"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 3
  %107 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 3
  %108 = bitcast %"class.base::OnceCallback"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"class.base::OnceCallback"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 4
  %112 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 4
  %113 = bitcast %"class.base::OnceCallback"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.base::OnceCallback"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 5
  %117 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 5
  %118 = bitcast %"class.base::OnceCallback"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.base::OnceCallback"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 6
  %122 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 6
  %123 = bitcast %"class.base::OnceCallback"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.base::OnceCallback"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 7
  %127 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 7
  %128 = bitcast %"class.base::OnceCallback"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.base::OnceCallback"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %90, i64 8
  %132 = ptrtoint %"class.base::OnceCallback"** %131 to i64
  %133 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %92, i64 8
  %134 = icmp eq %"class.base::OnceCallback"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"class.base::OnceCallback"** %61 to i64
  %137 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"class.base::OnceCallback"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"class.base::OnceCallback"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"class.base::OnceCallback"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"class.base::OnceCallback"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"class.base::OnceCallback"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"class.base::OnceCallback"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %148, i64 -1
  %150 = bitcast %"class.base::OnceCallback"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"class.base::OnceCallback"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"class.base::OnceCallback"**, %"class.base::OnceCallback"*** %3, align 8
  %154 = getelementptr inbounds %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %153, i64 -1
  store %"class.base::OnceCallback"** %154, %"class.base::OnceCallback"*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIMN2vr20ContentInputDelegateEFvNS3_13TextInputInfoERKNSt3__112basic_stringIDsNS6_11char_traitsIDsEENS6_9allocatorIDsEEEEEJNS0_17UnretainedWrapperIS4_EES5_EEEFvSE_EE7RunOnceEPNS0_13BindStateBaseESE_(%"class.base::internal::BindStateBase"*, %"class.std::__1::basic_string"* dereferenceable(24)) #0 comdat align 2 {
  %3 = alloca %"struct.vr::TextInputInfo", align 8
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %5 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %6 = bitcast void (%"class.base::internal::BindStateBase"*)** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %5, i64 1
  %9 = bitcast void (%"class.base::internal::BindStateBase"*)** %8 to %"struct.vr::TextInputInfo"*
  %10 = bitcast %"class.base::internal::BindStateBase"* %4 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %13 = bitcast void ()** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"struct.vr::TextInputInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %15) #10
  %16 = getelementptr inbounds i8, i8* %7, i64 %14
  %17 = bitcast i8* %16 to %"class.vr::ContentInputDelegate"*
  %18 = and i64 %11, 1
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %2
  %21 = bitcast i8* %16 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = add i64 %11, -1
  %24 = getelementptr i8, i8* %22, i64 %23
  %25 = bitcast i8* %24 to void (%"class.vr::ContentInputDelegate"*, %"struct.vr::TextInputInfo"*, %"class.std::__1::basic_string"*)**
  %26 = load void (%"class.vr::ContentInputDelegate"*, %"struct.vr::TextInputInfo"*, %"class.std::__1::basic_string"*)*, void (%"class.vr::ContentInputDelegate"*, %"struct.vr::TextInputInfo"*, %"class.std::__1::basic_string"*)** %25, align 8
  br label %29

27:                                               ; preds = %2
  %28 = inttoptr i64 %11 to void (%"class.vr::ContentInputDelegate"*, %"struct.vr::TextInputInfo"*, %"class.std::__1::basic_string"*)*
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi void (%"class.vr::ContentInputDelegate"*, %"struct.vr::TextInputInfo"*, %"class.std::__1::basic_string"*)* [ %26, %20 ], [ %28, %27 ]
  call void @_ZN2vr13TextInputInfoC1ERKS0_(%"struct.vr::TextInputInfo"* nonnull %3, %"struct.vr::TextInputInfo"* dereferenceable(40) %9) #10
  call void %30(%"class.vr::ContentInputDelegate"* %17, %"struct.vr::TextInputInfo"* nonnull %3, %"class.std::__1::basic_string"* dereferenceable(24) %1) #10
  %31 = bitcast %"struct.vr::TextInputInfo"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %31, i64 0, i32 1, i32 1
  %33 = load i8, i8* %32, align 1
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %29
  %36 = bitcast %"struct.vr::TextInputInfo"* %3 to i8**
  %37 = load i8*, i8** %36, align 8
  call void @_ZdlPv(i8* %37) #11
  br label %38

38:                                               ; preds = %29, %35
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %15) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMN2vr20ContentInputDelegateEFvNS2_13TextInputInfoERKNSt3__112basic_stringIDsNS5_11char_traitsIDsEENS5_9allocatorIDsEEEEEJNS0_17UnretainedWrapperIS3_EES4_EE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %14, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 3
  %5 = bitcast i1 (%"class.base::internal::BindStateBase"*, i32)** %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %5, i64 0, i32 1, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = bitcast i1 (%"class.base::internal::BindStateBase"*, i32)** %4 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_ZdlPv(i8* %11) #11
  br label %12

12:                                               ; preds = %3, %9
  %13 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %13) #11
  br label %14

14:                                               ; preds = %12, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN2vr20ContentInputDelegateEFvNS3_13TextInputInfoERKNSt3__112basic_stringIDsNS6_11char_traitsIDsEENS6_9allocatorIDsEEEEEJNS0_17UnretainedWrapperIS4_EES5_EEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN2vr20ContentInputDelegateEFvNS3_13TextInputInfoERKNSt3__112basic_stringIDsNS6_11char_traitsIDsEENS6_9allocatorIDsEEEEEJNS0_17UnretainedWrapperIS4_EES5_EEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base8BindOnceIMN2vr20ContentInputDelegateEFvNS1_13TextInputInfoERKNSt3__112basic_stringIDsNS4_11char_traitsIDsEENS4_9allocatorIDsEEEEEJNS_8internal17UnretainedWrapperIS2_EES3_EEENS_12OnceCallbackINSF_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSK_DpOSL_: argument 0"}
!6 = distinct !{!6, !"_ZN4base8BindOnceIMN2vr20ContentInputDelegateEFvNS1_13TextInputInfoERKNSt3__112basic_stringIDsNS4_11char_traitsIDsEENS4_9allocatorIDsEEEEEJNS_8internal17UnretainedWrapperIS2_EES3_EEENS_12OnceCallbackINSF_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSK_DpOSL_"}
!7 = !{!8}
!8 = distinct !{!8, !9}
!9 = distinct !{!9, !"LVerDomain"}
!10 = !{!11}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !15}
!17 = distinct !{!17, !13}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !13}
!24 = distinct !{!24, !15}
!25 = distinct !{!25, !15}
!26 = distinct !{!26, !13}
!27 = !{!28}
!28 = distinct !{!28, !29}
!29 = distinct !{!29, !"LVerDomain"}
!30 = !{!31}
!31 = distinct !{!31, !29}
!32 = distinct !{!32, !13}
!33 = distinct !{!33, !15}
!34 = distinct !{!34, !15}
!35 = distinct !{!35, !13}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !13}
!42 = distinct !{!42, !15}
!43 = distinct !{!43, !15}
!44 = distinct !{!44, !13}
!45 = distinct !{!45, !13}
!46 = distinct !{!46, !15}
!47 = distinct !{!47, !48, !13}
!48 = !{!"llvm.loop.unroll.runtime.disable"}
!49 = !{!50}
!50 = distinct !{!50, !51}
!51 = distinct !{!51, !"LVerDomain"}
!52 = !{!53}
!53 = distinct !{!53, !51}
!54 = distinct !{!54, !13}
!55 = distinct !{!55, !15}
!56 = distinct !{!56, !15}
!57 = distinct !{!57, !13}
!58 = distinct !{!58, !15}
!59 = distinct !{!59, !15}
!60 = distinct !{!60, !15}
!61 = distinct !{!61, !15}
!62 = distinct !{!62, !15}
