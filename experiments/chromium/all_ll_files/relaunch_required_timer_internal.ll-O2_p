; ModuleID = '../../chrome/browser/ui/views/relaunch_notification/relaunch_required_timer_internal.cc'
source_filename = "../../chrome/browser/ui/views/relaunch_notification/relaunch_required_timer_internal.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::TimeDelta" = type { i64 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

$_ZNK4base9TimeDeltamiES0_ = comdat any

@.str = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"delta_ != other.delta_\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN21relaunch_notification20ComputeDeadlineDeltaEN4base9TimeDeltaE(i64) local_unnamed_addr #0 {
  %2 = alloca %"class.base::TimeDelta", align 8
  %3 = add i64 %0, -9223372036854775807
  %4 = icmp ult i64 %3, 2
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = sitofp i64 %0 to double
  %7 = fdiv double %6, 1.000000e+06
  br label %11

8:                                                ; preds = %1
  %9 = icmp slt i64 %0, 0
  %10 = select i1 %9, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %11

11:                                               ; preds = %5, %8
  %12 = phi double [ %10, %8 ], [ %7, %5 ]
  %13 = tail call double @llvm.round.f64(double %12)
  %14 = fptosi double %13 to i64
  %15 = icmp slt i64 %14, 0
  %16 = select i1 %15, i64 -9223372036854775808, i64 9223372036854775807
  %17 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %14, i64 1000000) #5
  %18 = extractvalue { i64, i1 } %17, 1
  %19 = extractvalue { i64, i1 } %17, 0
  %20 = select i1 %18, i64 %16, i64 %19, !prof !2
  %21 = icmp sgt i64 %20, 170999999999
  br i1 %21, label %22, label %34

22:                                               ; preds = %11
  %23 = bitcast %"class.base::TimeDelta"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #5
  %24 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %20, i64 43200000000) #5
  %25 = extractvalue { i64, i1 } %24, 1
  %26 = extractvalue { i64, i1 } %24, 0
  %27 = select i1 %25, i64 9223372036854775807, i64 %26, !prof !2
  %28 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %2, i64 0, i32 0
  store i64 %27, i64* %28, align 8
  %29 = call i32 @_ZNK4base9TimeDelta6InDaysEv(%"class.base::TimeDelta"* nonnull %2) #5
  %30 = icmp eq i32 %29, 2147483647
  %31 = sext i32 %29 to i64
  %32 = mul nsw i64 %31, 86400000000
  %33 = select i1 %30, i64 9223372036854775807, i64 %32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #5
  br label %62

34:                                               ; preds = %11
  %35 = icmp sgt i64 %20, 3569999999
  br i1 %35, label %36, label %42

36:                                               ; preds = %34
  %37 = add nuw nsw i64 %20, 1800000000
  %38 = sdiv i64 %37, 3600000000
  %39 = shl i64 %38, 32
  %40 = ashr exact i64 %39, 32
  %41 = mul nsw i64 %40, 3600000000
  br label %62

42:                                               ; preds = %34
  %43 = icmp sgt i64 %20, 59499999
  br i1 %43, label %44, label %50

44:                                               ; preds = %42
  %45 = add nuw nsw i64 %20, 30000000
  %46 = sdiv i64 %45, 60000000
  %47 = shl i64 %46, 32
  %48 = ashr exact i64 %47, 32
  %49 = mul nsw i64 %48, 60000000
  br label %62

50:                                               ; preds = %42
  %51 = add nsw i64 %20, 500000
  %52 = add i64 %20, -9223372036854275807
  %53 = icmp ult i64 %52, 2
  %54 = sdiv i64 %51, 1000000
  %55 = select i1 %53, i64 %51, i64 %54
  %56 = icmp slt i64 %55, 0
  %57 = select i1 %56, i64 -9223372036854775808, i64 9223372036854775807
  %58 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %55, i64 1000000) #5
  %59 = extractvalue { i64, i1 } %58, 1
  %60 = extractvalue { i64, i1 } %58, 0
  %61 = select i1 %59, i64 %57, i64 %60, !prof !2
  br label %62

62:                                               ; preds = %44, %36, %50, %22
  %63 = phi i64 [ %33, %22 ], [ %61, %50 ], [ %41, %36 ], [ %49, %44 ]
  ret i64 %63
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZNK4base9TimeDelta6InDaysEv(%"class.base::TimeDelta"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN21relaunch_notification23ComputeNextRefreshDeltaEN4base9TimeDeltaE(i64) local_unnamed_addr #0 {
  %2 = alloca %"class.base::TimeDelta", align 8
  %3 = alloca %"class.base::TimeDelta", align 8
  %4 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %2, i64 0, i32 0
  store i64 %0, i64* %4, align 8
  %5 = bitcast %"class.base::TimeDelta"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 0, i32 0
  %7 = tail call i64 @_ZN21relaunch_notification20ComputeDeadlineDeltaEN4base9TimeDeltaE(i64 %0)
  store i64 %7, i64* %6, align 8
  %8 = icmp sgt i64 %7, 172800000000
  br i1 %8, label %9, label %14

9:                                                ; preds = %1
  %10 = call i32 @_ZNK4base9TimeDelta6InDaysEv(%"class.base::TimeDelta"* nonnull %3) #5
  %11 = add nsw i32 %10, -1
  %12 = sext i32 %11 to i64
  %13 = mul nsw i64 %12, 86400000000
  br label %38

14:                                               ; preds = %1
  %15 = icmp sgt i64 %7, 3600000000
  br i1 %15, label %16, label %22

16:                                               ; preds = %14
  %17 = udiv i64 %7, 3600000000
  %18 = shl i64 %17, 32
  %19 = add nsw i64 %18, -4294967296
  %20 = ashr exact i64 %19, 32
  %21 = mul nsw i64 %20, 3600000000
  br label %38

22:                                               ; preds = %14
  %23 = icmp sgt i64 %7, 60000000
  br i1 %23, label %24, label %30

24:                                               ; preds = %22
  %25 = trunc i64 %7 to i32
  %26 = udiv i32 %25, 60000000
  %27 = add nsw i32 %26, -1
  %28 = sext i32 %27 to i64
  %29 = mul nsw i64 %28, 60000000
  br label %38

30:                                               ; preds = %22
  %31 = icmp sgt i64 %7, 1000000
  br i1 %31, label %32, label %38

32:                                               ; preds = %30
  %33 = trunc i64 %7 to i32
  %34 = udiv i32 %33, 1000000
  %35 = zext i32 %34 to i64
  %36 = mul nuw nsw i64 %35, 1000000
  %37 = add nsw i64 %36, -1000000
  br label %38

38:                                               ; preds = %16, %30, %32, %24, %9
  %39 = phi i64 [ %13, %9 ], [ %21, %16 ], [ %29, %24 ], [ %37, %32 ], [ 0, %30 ]
  %40 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %2, i64 %39)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  ret i64 %40
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = add i64 %1, -9223372036854775807
  %7 = icmp ult i64 %6, 2
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %1, -1
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %10, i64 %1) #5
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !2
  ret i64 %16

17:                                               ; preds = %2
  %18 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #5
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp eq i64 %21, %1
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %19, align 8
  br label %34

25:                                               ; preds = %17
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #5
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %26, i8* %27) #5
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %19, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 387, %"class.logging::CheckOpResult"* nonnull %4) #5
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #5
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #5
  %35 = icmp slt i64 %1, 0
  %36 = select i1 %35, i64 9223372036854775807, i64 -9223372036854775808
  ret i64 %36
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #2

declare i8* @_ZN7logging15CheckOpValueStrEl(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
