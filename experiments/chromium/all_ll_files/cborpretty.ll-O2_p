; ModuleID = '../../third_party/openscreen/src/third_party/tinycbor/src/src/cborpretty.c'
source_filename = "../../third_party/openscreen/src/third_party/tinycbor/src/src/cborpretty.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.CborValue = type { %struct.CborParser*, i8*, i32, i16, i8, i8 }
%struct.CborParser = type { i8*, i32 }

@.str = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%c%s%s\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"-%lu\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"-18446744073709551616\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.8 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@__const.value_to_pretty.open = private unnamed_addr constant [3 x i8] c"h'\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"(_ \00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"%c%s\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"%lu%s(\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"simple(%u)\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"undefined\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"_2\00", align 1
@.str.21 = private unnamed_addr constant [2 x i8] c"f\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"_1\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"f16\00", align 1
@.str.24 = private unnamed_addr constant [9 x i8] c"%s%lu.%s\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"%.17g%s\00", align 1
@.str.27 = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c": \00", align 1
@resolve_indicator.indicators = internal constant [8 x [3 x i8]] [[3 x i8] c"_0\00", [3 x i8] c"_1\00", [3 x i8] c"_2\00", [3 x i8] c"_3\00", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] c"_\00\00"], align 16
@.str.29 = private unnamed_addr constant [5 x i8] c"%02x\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.31 = private unnamed_addr constant [4 x i8] c"\5C%c\00", align 1
@.str.32 = private unnamed_addr constant [13 x i8] c"\5Cu%04X\5Cu%04X\00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c"\5Cu%04X\00", align 1
@.str.34 = private unnamed_addr constant [38 x i8] c"<nesting too deep, recursion stopped>\00", align 1
@switch.table.value_to_pretty = private unnamed_addr constant [6 x i32] [i32 98, i32 116, i32 110, i32 116, i32 102, i32 114], align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_to_pretty_stream(i32 (i8*, i8*, ...)*, i8*, %struct.CborValue*, i32) local_unnamed_addr #0 {
  %5 = tail call fastcc i32 @value_to_pretty(i32 (i8*, i8*, ...)* %0, i8* %1, %struct.CborValue* %2, i32 %3, i32 1024)
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @value_to_pretty(i32 (i8*, i8*, ...)*, i8*, %struct.CborValue*, i32, i32) unnamed_addr #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca %struct.CborValue, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [3 x i8], align 1
  %18 = alloca i16, align 2
  %19 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 4
  %20 = load i8, i8* %19, align 2
  switch i8 %20, label %609 [
    i8 -128, label %21
    i8 -96, label %21
    i8 0, label %128
    i8 64, label %205
    i8 96, label %205
    i8 -64, label %445
    i8 -32, label %518
    i8 -10, label %524
    i8 -9, label %526
    i8 -11, label %528
    i8 -5, label %534
    i8 -6, label %537
    i8 -7, label %546
    i8 -1, label %602
  ]

21:                                               ; preds = %5, %5
  %22 = bitcast %struct.CborValue* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #5
  %23 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %14, i64 0, i32 1
  %24 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %14, i64 0, i32 2
  %25 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 1
  %26 = bitcast %struct.CborValue* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 24, i1 false)
  %27 = load i8*, i8** %25, align 8
  %28 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 0
  %29 = load %struct.CborParser*, %struct.CborParser** %28, align 8
  %30 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %29, i64 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = bitcast i8** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #5
  store i8* %27, i8** %12, align 8
  %33 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #5
  store i64 -6148914691236517206, i64* %13, align 8
  %34 = icmp eq i8* %27, %31
  br i1 %34, label %68, label %35

35:                                               ; preds = %21
  %36 = load i8, i8* %27, align 1
  %37 = and i8 %36, 31
  %38 = zext i8 %37 to i64
  %39 = icmp ult i8 %37, 24
  br i1 %39, label %68, label %40

40:                                               ; preds = %35
  %41 = and i32 %3, 2
  %42 = icmp ne i32 %41, 0
  %43 = icmp eq i8 %37, 31
  %44 = and i1 %42, %43
  br i1 %44, label %68, label %45

45:                                               ; preds = %40
  %46 = and i32 %3, 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %68, label %48

48:                                               ; preds = %45
  %49 = call i32 @_cbor_value_extract_number(i8** nonnull %12, i8* %31, i64* nonnull %13) #5
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %68

51:                                               ; preds = %48
  %52 = load i64, i64* %13, align 8
  %53 = icmp ugt i64 %52, 23
  %54 = select i1 %53, i8 24, i8 23
  %55 = icmp ugt i64 %52, 255
  %56 = zext i1 %55 to i8
  %57 = add nuw nsw i8 %54, %56
  %58 = icmp ugt i64 %52, 65535
  %59 = zext i1 %58 to i8
  %60 = add nuw nsw i8 %57, %59
  %61 = icmp ugt i64 %52, 4294967295
  %62 = zext i1 %61 to i8
  %63 = add nuw nsw i8 %60, %62
  %64 = icmp eq i8 %63, %37
  %65 = add nsw i64 %38, -24
  %66 = getelementptr inbounds [8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 %65, i64 0
  %67 = select i1 %64, i8* getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 5, i64 0), i8* %66
  br label %68

68:                                               ; preds = %21, %35, %40, %45, %48, %51
  %69 = phi i8* [ null, %21 ], [ getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 5, i64 0), %35 ], [ getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 7, i64 0), %40 ], [ getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 5, i64 0), %45 ], [ null, %48 ], [ %67, %51 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #5
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 0
  %72 = select i1 %71, i8* %69, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)
  %73 = icmp eq i8 %20, -128
  %74 = select i1 %73, i32 91, i32 123
  %75 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 %74, i8* %69, i8* %72) #5
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %126

77:                                               ; preds = %68
  %78 = call i32 @cbor_value_enter_container(%struct.CborValue* %2, %struct.CborValue* nonnull %14) #5
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %84, label %80

80:                                               ; preds = %77
  %81 = bitcast i8** %23 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast i8** %25 to i64*
  store i64 %82, i64* %83, align 8
  br label %126

84:                                               ; preds = %77
  %85 = add nsw i32 %4, -1
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %84
  %88 = load i32, i32* %24, align 8
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %120, label %90

90:                                               ; preds = %87
  %91 = xor i1 %73, true
  br label %94

92:                                               ; preds = %84
  %93 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.34, i64 0, i64 0)) #5
  br label %120

94:                                               ; preds = %90, %102
  %95 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), %102 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), %90 ]
  %96 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* nonnull %95) #5
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %115

98:                                               ; preds = %94
  %99 = call fastcc i32 @value_to_pretty(i32 (i8*, i8*, ...)* %0, i8* %1, %struct.CborValue* nonnull %14, i32 %3, i32 %85) #5
  %100 = icmp eq i32 %99, 0
  %101 = and i1 %100, %91
  br i1 %101, label %108, label %102

102:                                              ; preds = %98, %111
  %103 = phi i32 [ %99, %98 ], [ %112, %111 ]
  %104 = load i32, i32* %24, align 8
  %105 = icmp ne i32 %104, 0
  %106 = icmp eq i32 %103, 0
  %107 = and i1 %106, %105
  br i1 %107, label %94, label %113

108:                                              ; preds = %98
  %109 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i64 0, i64 0)) #5
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %115

111:                                              ; preds = %108
  %112 = call fastcc i32 @value_to_pretty(i32 (i8*, i8*, ...)* %0, i8* %1, %struct.CborValue* nonnull %14, i32 %3, i32 %85) #5
  br label %102

113:                                              ; preds = %102
  %114 = icmp eq i32 %103, 0
  br i1 %114, label %120, label %115

115:                                              ; preds = %108, %94, %113
  %116 = phi i32 [ %103, %113 ], [ %96, %94 ], [ %109, %108 ]
  %117 = bitcast i8** %23 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i8** %25 to i64*
  store i64 %118, i64* %119, align 8
  br label %126

120:                                              ; preds = %87, %92, %113
  %121 = call i32 @cbor_value_leave_container(%struct.CborValue* %2, %struct.CborValue* nonnull %14) #5
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %126

123:                                              ; preds = %120
  %124 = select i1 %73, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)
  %125 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* %124) #5
  br label %126

126:                                              ; preds = %120, %68, %123, %115, %80
  %127 = phi i32 [ %78, %80 ], [ %116, %115 ], [ %125, %123 ], [ %75, %68 ], [ %121, %120 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #5
  br label %611

128:                                              ; preds = %5
  %129 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 5
  %130 = load i8, i8* %129, align 1
  %131 = and i8 %130, 1
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %133, label %137

133:                                              ; preds = %128
  %134 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 3
  %135 = load i16, i16* %134, align 4
  %136 = zext i16 %135 to i64
  br label %141

137:                                              ; preds = %128
  %138 = tail call i64 @_cbor_value_decode_int64_internal(%struct.CborValue* %2) #5
  %139 = load i8, i8* %19, align 2
  %140 = icmp eq i8 %139, 0
  br i1 %140, label %141, label %148

141:                                              ; preds = %133, %137
  %142 = phi i64 [ %136, %133 ], [ %138, %137 ]
  %143 = load i8, i8* %129, align 1
  %144 = and i8 %143, 2
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %146, label %148

146:                                              ; preds = %141
  %147 = tail call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i64 %142) #5
  br label %156

148:                                              ; preds = %137, %141
  %149 = phi i64 [ %138, %137 ], [ %142, %141 ]
  %150 = add i64 %149, 1
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %154, label %152

152:                                              ; preds = %148
  %153 = tail call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i64 %150) #5
  br label %156

154:                                              ; preds = %148
  %155 = tail call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0)) #5
  br label %156

156:                                              ; preds = %152, %154, %146
  %157 = phi i32 [ %147, %146 ], [ %153, %152 ], [ %155, %154 ]
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %611

159:                                              ; preds = %156
  %160 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 1
  %161 = load i8*, i8** %160, align 8
  %162 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 0
  %163 = load %struct.CborParser*, %struct.CborParser** %162, align 8
  %164 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %163, i64 0, i32 0
  %165 = load i8*, i8** %164, align 8
  %166 = bitcast i8** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %166) #5
  store i8* %161, i8** %10, align 8
  %167 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %167) #5
  store i64 -6148914691236517206, i64* %11, align 8
  %168 = icmp eq i8* %161, %165
  br i1 %168, label %202, label %169

169:                                              ; preds = %159
  %170 = load i8, i8* %161, align 1
  %171 = and i8 %170, 31
  %172 = zext i8 %171 to i64
  %173 = icmp ult i8 %171, 24
  br i1 %173, label %202, label %174

174:                                              ; preds = %169
  %175 = and i32 %3, 2
  %176 = icmp ne i32 %175, 0
  %177 = icmp eq i8 %171, 31
  %178 = and i1 %176, %177
  br i1 %178, label %202, label %179

179:                                              ; preds = %174
  %180 = and i32 %3, 4
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %202, label %182

182:                                              ; preds = %179
  %183 = call i32 @_cbor_value_extract_number(i8** nonnull %10, i8* %165, i64* nonnull %11) #5
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %202

185:                                              ; preds = %182
  %186 = load i64, i64* %11, align 8
  %187 = icmp ugt i64 %186, 23
  %188 = select i1 %187, i8 24, i8 23
  %189 = icmp ugt i64 %186, 255
  %190 = zext i1 %189 to i8
  %191 = add nuw nsw i8 %188, %190
  %192 = icmp ugt i64 %186, 65535
  %193 = zext i1 %192 to i8
  %194 = add nuw nsw i8 %191, %193
  %195 = icmp ugt i64 %186, 4294967295
  %196 = zext i1 %195 to i8
  %197 = add nuw nsw i8 %194, %196
  %198 = icmp eq i8 %197, %171
  %199 = add nsw i64 %172, -24
  %200 = getelementptr inbounds [8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 %199, i64 0
  %201 = select i1 %198, i8* getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 5, i64 0), i8* %200
  br label %202

202:                                              ; preds = %159, %169, %174, %179, %182, %185
  %203 = phi i8* [ null, %159 ], [ getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 5, i64 0), %169 ], [ getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 7, i64 0), %174 ], [ getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 5, i64 0), %179 ], [ null, %182 ], [ %201, %185 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %167) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %166) #5
  %204 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* %203) #5
  br label %606

205:                                              ; preds = %5, %5
  %206 = bitcast i64* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %206) #5
  store i64 0, i64* %15, align 8
  %207 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %207) #5
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %16, align 8
  %208 = and i32 %3, 256
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %215, label %210

210:                                              ; preds = %205
  %211 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 5
  %212 = load i8, i8* %211, align 1
  %213 = and i8 %212, 4
  %214 = icmp ne i8 %213, 0
  br label %215

215:                                              ; preds = %205, %210
  %216 = phi i1 [ false, %205 ], [ %214, %210 ]
  %217 = getelementptr inbounds [3 x i8], [3 x i8]* %17, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %217) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %217, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @__const.value_to_pretty.open, i64 0, i64 0), i64 3, i1 false)
  %218 = icmp eq i8 %20, 96
  br i1 %218, label %219, label %221

219:                                              ; preds = %215
  store i8 34, i8* %217, align 1
  %220 = getelementptr inbounds [3 x i8], [3 x i8]* %17, i64 0, i64 1
  store i8 0, i8* %220, align 1
  br label %221

221:                                              ; preds = %219, %215
  %222 = phi i32 [ 34, %219 ], [ 39, %215 ]
  br i1 %216, label %223, label %228

223:                                              ; preds = %221
  %224 = tail call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0)) #5
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %226, label %443

226:                                              ; preds = %223
  %227 = tail call i32 @_cbor_value_prepare_string_iteration(%struct.CborValue* %2) #5
  br label %230

228:                                              ; preds = %221
  %229 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* nonnull %217) #5
  br label %230

230:                                              ; preds = %226, %228
  %231 = phi i32 [ %227, %226 ], [ %229, %228 ]
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %443

233:                                              ; preds = %230
  %234 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 1
  %235 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 0
  %236 = bitcast i8** %8 to i8*
  %237 = bitcast i64* %9 to i8*
  %238 = and i32 %3, 2
  %239 = icmp ne i32 %238, 0
  %240 = and i32 %3, 4
  %241 = icmp eq i32 %240, 0
  %242 = icmp eq i8 %20, 64
  %243 = xor i1 %216, true
  br label %244

244:                                              ; preds = %233, %434
  %245 = phi i8* [ null, %233 ], [ %288, %434 ]
  %246 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), %233 ], [ %436, %434 ]
  %247 = icmp eq i8* %245, null
  %248 = or i1 %216, %247
  br i1 %248, label %249, label %287

249:                                              ; preds = %244
  %250 = load i8*, i8** %234, align 8
  %251 = load %struct.CborParser*, %struct.CborParser** %235, align 8
  %252 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %251, i64 0, i32 0
  %253 = load i8*, i8** %252, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %236)
  store i8* %250, i8** %8, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %237) #5
  store i64 -6148914691236517206, i64* %9, align 8
  %254 = icmp eq i8* %250, %253
  br i1 %254, label %285, label %255

255:                                              ; preds = %249
  %256 = load i8, i8* %250, align 1
  %257 = and i8 %256, 31
  %258 = zext i8 %257 to i64
  %259 = icmp ult i8 %257, 24
  br i1 %259, label %285, label %260

260:                                              ; preds = %255
  %261 = icmp eq i8 %257, 31
  %262 = and i1 %239, %261
  %263 = or i1 %262, %241
  %264 = select i1 %262, i8* getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 7, i64 0), i8* getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 5, i64 0)
  br i1 %263, label %285, label %265

265:                                              ; preds = %260
  %266 = call i32 @_cbor_value_extract_number(i8** nonnull %8, i8* %253, i64* nonnull %9) #5
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %268, label %285

268:                                              ; preds = %265
  %269 = load i64, i64* %9, align 8
  %270 = icmp ugt i64 %269, 23
  %271 = select i1 %270, i8 24, i8 23
  %272 = icmp ugt i64 %269, 255
  %273 = zext i1 %272 to i8
  %274 = add nuw nsw i8 %271, %273
  %275 = icmp ugt i64 %269, 65535
  %276 = zext i1 %275 to i8
  %277 = add nuw nsw i8 %274, %276
  %278 = icmp ugt i64 %269, 4294967295
  %279 = zext i1 %278 to i8
  %280 = add nuw nsw i8 %277, %279
  %281 = icmp eq i8 %280, %257
  %282 = add nsw i64 %258, -24
  %283 = getelementptr inbounds [8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 %282, i64 0
  %284 = select i1 %281, i8* getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 5, i64 0), i8* %283
  br label %285

285:                                              ; preds = %260, %249, %255, %265, %268
  %286 = phi i8* [ null, %249 ], [ getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 5, i64 0), %255 ], [ %264, %260 ], [ null, %265 ], [ %284, %268 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %237) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %236)
  br label %287

287:                                              ; preds = %244, %285
  %288 = phi i8* [ %286, %285 ], [ %245, %244 ]
  %289 = call i32 @_cbor_value_get_string_chunk(%struct.CborValue* %2, i8** nonnull %16, i64* nonnull %15, %struct.CborValue* %2) #5
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %291, label %443

291:                                              ; preds = %287
  %292 = load i8*, i8** %16, align 8
  %293 = icmp eq i8* %292, null
  br i1 %293, label %438, label %294

294:                                              ; preds = %291
  br i1 %216, label %295, label %300

295:                                              ; preds = %294
  %296 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i8* %246, i8* nonnull %217) #5
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %443

298:                                              ; preds = %295
  %299 = load i8*, i8** %16, align 8
  br label %300

300:                                              ; preds = %298, %294
  %301 = phi i8* [ %299, %298 ], [ %292, %294 ]
  %302 = load i64, i64* %15, align 8
  br i1 %242, label %303, label %316

303:                                              ; preds = %300
  %304 = icmp eq i64 %302, 0
  br i1 %304, label %428, label %305

305:                                              ; preds = %303, %305
  %306 = phi i8* [ %309, %305 ], [ %301, %303 ]
  %307 = phi i64 [ %308, %305 ], [ %302, %303 ]
  %308 = add i64 %307, -1
  %309 = getelementptr inbounds i8, i8* %306, i64 1
  %310 = load i8, i8* %306, align 1
  %311 = zext i8 %310 to i32
  %312 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i64 0, i64 0), i32 %311) #5
  %313 = icmp ne i64 %308, 0
  %314 = icmp eq i32 %312, 0
  %315 = and i1 %313, %314
  br i1 %315, label %305, label %428

316:                                              ; preds = %300
  %317 = getelementptr inbounds i8, i8* %301, i64 %302
  %318 = ptrtoint i8* %317 to i64
  %319 = icmp sgt i64 %302, 0
  br i1 %319, label %320, label %428

320:                                              ; preds = %316, %423
  %321 = phi i8* [ %387, %423 ], [ %301, %316 ]
  %322 = ptrtoint i8* %321 to i64
  %323 = sub i64 %318, %322
  %324 = icmp eq i64 %323, 0
  br i1 %324, label %443, label %325

325:                                              ; preds = %320
  %326 = getelementptr inbounds i8, i8* %321, i64 1
  %327 = load i8, i8* %321, align 1
  %328 = zext i8 %327 to i32
  %329 = icmp sgt i8 %327, -1
  br i1 %329, label %386, label %330

330:                                              ; preds = %325
  %331 = icmp ult i8 %327, -62
  br i1 %331, label %443, label %332, !prof !2

332:                                              ; preds = %330
  %333 = icmp ult i8 %327, -32
  br i1 %333, label %338, label %334

334:                                              ; preds = %332
  %335 = icmp ult i8 %327, -16
  br i1 %335, label %338, label %336

336:                                              ; preds = %334
  %337 = icmp ult i8 %327, -11
  br i1 %337, label %338, label %443

338:                                              ; preds = %336, %334, %332
  %339 = phi i32 [ 31, %332 ], [ 15, %334 ], [ 7, %336 ]
  %340 = phi i32 [ 2, %332 ], [ 3, %334 ], [ 4, %336 ]
  %341 = phi i32 [ 128, %332 ], [ 2048, %334 ], [ 65536, %336 ]
  %342 = and i32 %339, %328
  %343 = zext i32 %340 to i64
  %344 = icmp slt i64 %323, %343
  br i1 %344, label %443, label %345

345:                                              ; preds = %338
  %346 = getelementptr inbounds i8, i8* %321, i64 2
  %347 = load i8, i8* %326, align 1
  %348 = zext i8 %347 to i32
  %349 = and i32 %348, 192
  %350 = icmp eq i32 %349, 128
  br i1 %350, label %351, label %443

351:                                              ; preds = %345
  %352 = shl nuw nsw i32 %342, 6
  %353 = and i32 %348, 63
  %354 = or i32 %353, %352
  %355 = icmp ugt i32 %340, 2
  br i1 %355, label %356, label %377

356:                                              ; preds = %351
  %357 = getelementptr inbounds i8, i8* %321, i64 3
  %358 = load i8, i8* %346, align 1
  %359 = zext i8 %358 to i32
  %360 = and i32 %359, 192
  %361 = icmp eq i32 %360, 128
  br i1 %361, label %362, label %443

362:                                              ; preds = %356
  %363 = shl nuw nsw i32 %354, 6
  %364 = and i32 %359, 63
  %365 = or i32 %364, %363
  %366 = icmp ugt i32 %340, 3
  br i1 %366, label %367, label %377

367:                                              ; preds = %362
  %368 = load i8, i8* %357, align 1
  %369 = zext i8 %368 to i32
  %370 = and i32 %369, 192
  %371 = icmp eq i32 %370, 128
  br i1 %371, label %372, label %443

372:                                              ; preds = %367
  %373 = getelementptr inbounds i8, i8* %321, i64 4
  %374 = shl nuw nsw i32 %365, 6
  %375 = and i32 %369, 63
  %376 = or i32 %375, %374
  br label %377

377:                                              ; preds = %372, %362, %351
  %378 = phi i8* [ %373, %372 ], [ %357, %362 ], [ %346, %351 ]
  %379 = phi i32 [ %376, %372 ], [ %365, %362 ], [ %354, %351 ]
  %380 = icmp ult i32 %379, %341
  br i1 %380, label %443, label %381

381:                                              ; preds = %377
  %382 = and i32 %379, -2048
  %383 = icmp eq i32 %382, 55296
  %384 = icmp ugt i32 %379, 1114111
  %385 = or i1 %384, %383
  br i1 %385, label %443, label %386

386:                                              ; preds = %381, %325
  %387 = phi i8* [ %378, %381 ], [ %326, %325 ]
  %388 = phi i32 [ %379, %381 ], [ %328, %325 ]
  %389 = icmp ult i32 %388, 128
  br i1 %389, label %390, label %413

390:                                              ; preds = %386
  %391 = icmp ugt i32 %388, 31
  br i1 %391, label %392, label %397

392:                                              ; preds = %390
  switch i32 %388, label %393 [
    i32 34, label %409
    i32 92, label %409
    i32 127, label %421
  ]

393:                                              ; preds = %392
  %394 = shl i32 %388, 24
  %395 = ashr exact i32 %394, 24
  %396 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0), i32 %395) #5
  br label %423

397:                                              ; preds = %390
  %398 = add i32 %388, -8
  %399 = icmp ult i32 %398, 6
  br i1 %399, label %400, label %421

400:                                              ; preds = %397
  %401 = trunc i32 %398 to i8
  %402 = lshr i8 55, %401
  %403 = and i8 %402, 1
  %404 = icmp eq i8 %403, 0
  br i1 %404, label %421, label %405

405:                                              ; preds = %400
  %406 = sext i32 %398 to i64
  %407 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.value_to_pretty, i64 0, i64 %406
  %408 = load i32, i32* %407, align 4
  br label %409

409:                                              ; preds = %405, %392, %392
  %410 = phi i32 [ %388, %392 ], [ %388, %392 ], [ %408, %405 ]
  %411 = and i32 %410, 255
  %412 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i64 0, i64 0), i32 %411) #5
  br label %423

413:                                              ; preds = %386
  %414 = icmp ugt i32 %388, 65535
  br i1 %414, label %415, label %421

415:                                              ; preds = %413
  %416 = lshr i32 %388, 10
  %417 = add nuw nsw i32 %416, 55232
  %418 = and i32 %388, 1023
  %419 = or i32 %418, 56320
  %420 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.32, i64 0, i64 0), i32 %417, i32 %419) #5
  br label %423

421:                                              ; preds = %400, %397, %413, %392
  %422 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i64 0, i64 0), i32 %388) #5
  br label %423

423:                                              ; preds = %421, %415, %409, %393
  %424 = phi i32 [ %422, %421 ], [ %420, %415 ], [ %396, %393 ], [ %412, %409 ]
  %425 = icmp ult i8* %387, %317
  %426 = icmp eq i32 %424, 0
  %427 = and i1 %425, %426
  br i1 %427, label %320, label %428

428:                                              ; preds = %423, %305, %316, %303
  %429 = phi i32 [ 0, %303 ], [ 0, %316 ], [ %312, %305 ], [ %424, %423 ]
  %430 = icmp ne i32 %429, 0
  %431 = or i1 %430, %243
  br i1 %431, label %434, label %432

432:                                              ; preds = %428
  %433 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i32 %222, i8* %288) #5
  br label %434

434:                                              ; preds = %428, %432
  %435 = phi i32 [ %429, %428 ], [ %433, %432 ]
  %436 = phi i8* [ %246, %428 ], [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), %432 ]
  %437 = icmp eq i32 %435, 0
  br i1 %437, label %244, label %443

438:                                              ; preds = %291
  br i1 %216, label %439, label %441

439:                                              ; preds = %438
  %440 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)) #5
  br label %443

441:                                              ; preds = %438
  %442 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i32 %222, i8* %288) #5
  br label %443

443:                                              ; preds = %295, %287, %434, %381, %377, %367, %356, %345, %338, %336, %330, %320, %223, %230, %441, %439
  %444 = phi i32 [ %440, %439 ], [ %442, %441 ], [ %231, %230 ], [ %224, %223 ], [ 516, %320 ], [ 516, %330 ], [ 516, %336 ], [ 516, %338 ], [ 516, %345 ], [ 516, %356 ], [ 516, %367 ], [ 516, %377 ], [ 516, %381 ], [ %296, %295 ], [ %289, %287 ], [ %435, %434 ]
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %217) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %207) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %206) #5
  br label %611

445:                                              ; preds = %5
  %446 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 5
  %447 = load i8, i8* %446, align 1
  %448 = and i8 %447, 1
  %449 = icmp eq i8 %448, 0
  br i1 %449, label %452, label %450

450:                                              ; preds = %445
  %451 = tail call i64 @_cbor_value_decode_int64_internal(%struct.CborValue* %2) #5
  br label %456

452:                                              ; preds = %445
  %453 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 3
  %454 = load i16, i16* %453, align 4
  %455 = zext i16 %454 to i64
  br label %456

456:                                              ; preds = %450, %452
  %457 = phi i64 [ %451, %450 ], [ %455, %452 ]
  %458 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 1
  %459 = load i8*, i8** %458, align 8
  %460 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 0
  %461 = load %struct.CborParser*, %struct.CborParser** %460, align 8
  %462 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %461, i64 0, i32 0
  %463 = load i8*, i8** %462, align 8
  %464 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %464) #5
  store i8* %459, i8** %6, align 8
  %465 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %465) #5
  store i64 -6148914691236517206, i64* %7, align 8
  %466 = icmp eq i8* %459, %463
  br i1 %466, label %500, label %467

467:                                              ; preds = %456
  %468 = load i8, i8* %459, align 1
  %469 = and i8 %468, 31
  %470 = zext i8 %469 to i64
  %471 = icmp ult i8 %469, 24
  br i1 %471, label %500, label %472

472:                                              ; preds = %467
  %473 = and i32 %3, 2
  %474 = icmp ne i32 %473, 0
  %475 = icmp eq i8 %469, 31
  %476 = and i1 %474, %475
  br i1 %476, label %500, label %477

477:                                              ; preds = %472
  %478 = and i32 %3, 4
  %479 = icmp eq i32 %478, 0
  br i1 %479, label %500, label %480

480:                                              ; preds = %477
  %481 = call i32 @_cbor_value_extract_number(i8** nonnull %6, i8* %463, i64* nonnull %7) #5
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %483, label %500

483:                                              ; preds = %480
  %484 = load i64, i64* %7, align 8
  %485 = icmp ugt i64 %484, 23
  %486 = select i1 %485, i8 24, i8 23
  %487 = icmp ugt i64 %484, 255
  %488 = zext i1 %487 to i8
  %489 = add nuw nsw i8 %486, %488
  %490 = icmp ugt i64 %484, 65535
  %491 = zext i1 %490 to i8
  %492 = add nuw nsw i8 %489, %491
  %493 = icmp ugt i64 %484, 4294967295
  %494 = zext i1 %493 to i8
  %495 = add nuw nsw i8 %492, %494
  %496 = icmp eq i8 %495, %469
  %497 = add nsw i64 %470, -24
  %498 = getelementptr inbounds [8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 %497, i64 0
  %499 = select i1 %496, i8* getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 5, i64 0), i8* %498
  br label %500

500:                                              ; preds = %456, %467, %472, %477, %480, %483
  %501 = phi i8* [ null, %456 ], [ getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 5, i64 0), %467 ], [ getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 7, i64 0), %472 ], [ getelementptr inbounds ([8 x [3 x i8]], [8 x [3 x i8]]* @resolve_indicator.indicators, i64 0, i64 5, i64 0), %477 ], [ null, %480 ], [ %499, %483 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %465) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %464) #5
  %502 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i64 0, i64 0), i64 %457, i8* %501) #5
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %504, label %611

504:                                              ; preds = %500
  %505 = call i32 @cbor_value_advance_fixed(%struct.CborValue* %2) #5
  %506 = icmp eq i32 %505, 0
  %507 = icmp ne i32 %4, 0
  %508 = and i1 %507, %506
  br i1 %508, label %512, label %509

509:                                              ; preds = %504
  br i1 %506, label %510, label %611

510:                                              ; preds = %509
  %511 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.34, i64 0, i64 0)) #5
  br label %516

512:                                              ; preds = %504
  %513 = add nsw i32 %4, -1
  %514 = call fastcc i32 @value_to_pretty(i32 (i8*, i8*, ...)* %0, i8* %1, %struct.CborValue* %2, i32 %3, i32 %513)
  %515 = icmp eq i32 %514, 0
  br i1 %515, label %516, label %611

516:                                              ; preds = %510, %512
  %517 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)) #5
  br label %611

518:                                              ; preds = %5
  %519 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 3
  %520 = load i16, i16* %519, align 4
  %521 = and i16 %520, 255
  %522 = zext i16 %521 to i32
  %523 = tail call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i32 %522) #5
  br label %606

524:                                              ; preds = %5
  %525 = tail call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0)) #5
  br label %606

526:                                              ; preds = %5
  %527 = tail call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i64 0, i64 0)) #5
  br label %606

528:                                              ; preds = %5
  %529 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %2, i64 0, i32 3
  %530 = load i16, i16* %529, align 4
  %531 = icmp eq i16 %530, 0
  %532 = select i1 %531, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0)
  %533 = tail call i32 (i8*, i8*, ...) %0(i8* %1, i8* %532) #5
  br label %606

534:                                              ; preds = %5
  %535 = tail call i64 @_cbor_value_decode_int64_internal(%struct.CborValue* %2) #5
  %536 = and i32 %3, 1
  br label %574

537:                                              ; preds = %5
  %538 = tail call i64 @_cbor_value_decode_int64_internal(%struct.CborValue* %2) #5
  %539 = trunc i64 %538 to i32
  %540 = bitcast i32 %539 to float
  %541 = fpext float %540 to double
  %542 = bitcast double %541 to i64
  %543 = and i32 %3, 1
  %544 = icmp eq i32 %543, 0
  %545 = select i1 %544, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0)
  br label %574

546:                                              ; preds = %5
  %547 = bitcast i16* %18 to i8*
  %548 = call i32 @cbor_value_get_half_float(%struct.CborValue* %2, i8* nonnull %547) #5
  %549 = load i16, i16* %18, align 2
  %550 = zext i16 %549 to i32
  %551 = lshr i32 %550, 10
  %552 = and i32 %551, 31
  %553 = and i32 %550, 1023
  switch i32 %552, label %557 [
    i32 0, label %554
    i32 31, label %562
  ]

554:                                              ; preds = %546
  %555 = sitofp i32 %553 to double
  %556 = call double @ldexp(double %555, i32 -24) #5
  br label %565

557:                                              ; preds = %546
  %558 = or i32 %553, 1024
  %559 = sitofp i32 %558 to double
  %560 = add nsw i32 %552, -25
  %561 = call double @ldexp(double %559, i32 %560) #5
  br label %565

562:                                              ; preds = %546
  %563 = icmp eq i32 %553, 0
  %564 = select i1 %563, double 0x7FF0000000000000, double 0x7FF8000000000000
  br label %565

565:                                              ; preds = %554, %557, %562
  %566 = phi double [ %556, %554 ], [ %561, %557 ], [ %564, %562 ]
  %567 = icmp slt i16 %549, 0
  %568 = fsub double -0.000000e+00, %566
  %569 = select i1 %567, double %568, double %566
  %570 = bitcast double %569 to i64
  %571 = and i32 %3, 1
  %572 = icmp eq i32 %571, 0
  %573 = select i1 %572, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i64 0, i64 0)
  br label %574

574:                                              ; preds = %565, %534, %537
  %575 = phi i32 [ %571, %565 ], [ %536, %534 ], [ %543, %537 ]
  %576 = phi i64 [ %570, %565 ], [ %535, %534 ], [ %542, %537 ]
  %577 = phi i8* [ %573, %565 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), %534 ], [ %545, %537 ]
  %578 = icmp ne i32 %575, 0
  %579 = bitcast i64 %576 to double
  %580 = fcmp oeq double %579, 0.000000e+00
  %581 = or i1 %578, %580
  br i1 %581, label %588, label %582

582:                                              ; preds = %574
  %583 = fcmp uno double %579, 0.000000e+00
  %584 = call double @llvm.fabs.f64(double %579) #6
  %585 = fcmp oeq double %584, 0x7FF0000000000000
  %586 = or i1 %583, %585
  %587 = select i1 %586, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), i8* %577
  br label %588

588:                                              ; preds = %574, %582
  %589 = phi i8* [ %587, %582 ], [ %577, %574 ]
  %590 = call double @llvm.fabs.f64(double %579) #5
  %591 = fcmp ult double %590, 0x43F0000000000000
  br i1 %591, label %592, label %600

592:                                              ; preds = %588
  %593 = fptoui double %590 to i64
  %594 = uitofp i64 %593 to double
  %595 = fcmp oeq double %590, %594
  br i1 %595, label %596, label %600

596:                                              ; preds = %592
  %597 = fcmp olt double %579, 0.000000e+00
  %598 = select i1 %597, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0)
  %599 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i64 0, i64 0), i8* %598, i64 %593, i8* %589) #5
  br label %606

600:                                              ; preds = %588, %592
  %601 = call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i64 0, i64 0), double %579, i8* %589) #5
  br label %606

602:                                              ; preds = %5
  %603 = tail call i32 (i8*, i8*, ...) %0(i8* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27, i64 0, i64 0)) #5
  %604 = icmp eq i32 %603, 0
  %605 = select i1 %604, i32 259, i32 %603
  br label %611

606:                                              ; preds = %202, %596, %600, %528, %526, %524, %518
  %607 = phi i32 [ %599, %596 ], [ %601, %600 ], [ %533, %528 ], [ %527, %526 ], [ %525, %524 ], [ %523, %518 ], [ %204, %202 ]
  %608 = icmp eq i32 %607, 0
  br i1 %608, label %609, label %611

609:                                              ; preds = %5, %606
  %610 = call i32 @cbor_value_advance_fixed(%struct.CborValue* %2) #5
  br label %611

611:                                              ; preds = %509, %500, %156, %516, %512, %609, %606, %602, %443, %126
  %612 = phi i32 [ %444, %443 ], [ %127, %126 ], [ %605, %602 ], [ %607, %606 ], [ %610, %609 ], [ %514, %512 ], [ %517, %516 ], [ %157, %156 ], [ %502, %500 ], [ %505, %509 ]
  ret i32 %612
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @cbor_value_enter_container(%struct.CborValue*, %struct.CborValue*) local_unnamed_addr #2

declare i32 @cbor_value_leave_container(%struct.CborValue*, %struct.CborValue*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @_cbor_value_prepare_string_iteration(%struct.CborValue*) local_unnamed_addr #2

declare i32 @_cbor_value_get_string_chunk(%struct.CborValue*, i8**, i64*, %struct.CborValue*) local_unnamed_addr #2

declare i32 @cbor_value_advance_fixed(%struct.CborValue*) local_unnamed_addr #2

declare i32 @cbor_value_get_half_float(%struct.CborValue*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #3

declare i64 @_cbor_value_decode_int64_internal(%struct.CborValue*) local_unnamed_addr #2

declare i32 @_cbor_value_extract_number(i8**, i8*, i64*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @ldexp(double, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
