; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_idct16x16_add_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_idct16x16_add_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct16x16_256_add_sse2(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [16 x <2 x i64>], align 16
  %6 = alloca [16 x <2 x i64>], align 16
  %7 = alloca [16 x <2 x i64>], align 16
  %8 = alloca [4 x [16 x <2 x i64>]], align 16
  %9 = bitcast [16 x <2 x i64>]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false)
  %10 = icmp eq i32 %3, 8
  br i1 %10, label %11, label %430

11:                                               ; preds = %4
  %12 = bitcast [16 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 256, i1 false)
  %13 = bitcast [16 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %13) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 256, i1 false)
  %14 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %15 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  br label %34

16:                                               ; preds = %34
  %17 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 0
  %18 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 1
  %19 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 2
  %20 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 3
  %21 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 4
  %22 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 5
  %23 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 6
  %24 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 7
  %25 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 8
  %26 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 9
  %27 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 10
  %28 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 11
  %29 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 12
  %30 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 13
  %31 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 14
  %32 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 15
  %33 = sext i32 %2 to i64
  br label %261

34:                                               ; preds = %34, %11
  %35 = phi <2 x i64>* [ %14, %11 ], [ %15, %34 ]
  %36 = phi i32 [ 0, %11 ], [ %259, %34 ]
  %37 = phi i32* [ %0, %11 ], [ %258, %34 ]
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 16
  %40 = getelementptr inbounds i32, i32* %37, i64 4
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 16
  %43 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %39, <4 x i32> %42) #6
  %44 = bitcast <2 x i64>* %35 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %44, align 16
  %45 = getelementptr inbounds i32, i32* %37, i64 16
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 16
  %48 = getelementptr inbounds i32, i32* %37, i64 20
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 16
  %51 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %50) #6
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 1
  %53 = bitcast <2 x i64>* %52 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %53, align 16
  %54 = getelementptr inbounds i32, i32* %37, i64 32
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 16
  %57 = getelementptr inbounds i32, i32* %37, i64 36
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 16
  %60 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %56, <4 x i32> %59) #6
  %61 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 2
  %62 = bitcast <2 x i64>* %61 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %62, align 16
  %63 = getelementptr inbounds i32, i32* %37, i64 48
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 16
  %66 = getelementptr inbounds i32, i32* %37, i64 52
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 16
  %69 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %65, <4 x i32> %68) #6
  %70 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 3
  %71 = bitcast <2 x i64>* %70 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %71, align 16
  %72 = getelementptr inbounds i32, i32* %37, i64 64
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 16
  %75 = getelementptr inbounds i32, i32* %37, i64 68
  %76 = bitcast i32* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 16
  %78 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %74, <4 x i32> %77) #6
  %79 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 4
  %80 = bitcast <2 x i64>* %79 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %80, align 16
  %81 = getelementptr inbounds i32, i32* %37, i64 80
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 16
  %84 = getelementptr inbounds i32, i32* %37, i64 84
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 16
  %87 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %83, <4 x i32> %86) #6
  %88 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 5
  %89 = bitcast <2 x i64>* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 16
  %90 = getelementptr inbounds i32, i32* %37, i64 96
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 16
  %93 = getelementptr inbounds i32, i32* %37, i64 100
  %94 = bitcast i32* %93 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 16
  %96 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %92, <4 x i32> %95) #6
  %97 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 6
  %98 = bitcast <2 x i64>* %97 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %98, align 16
  %99 = getelementptr inbounds i32, i32* %37, i64 112
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 16
  %102 = getelementptr inbounds i32, i32* %37, i64 116
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 16
  %105 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %101, <4 x i32> %104) #6
  %106 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 7
  %107 = shufflevector <8 x i16> %43, <8 x i16> %51, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %108 = shufflevector <8 x i16> %60, <8 x i16> %69, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %109 = shufflevector <8 x i16> %78, <8 x i16> %87, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %110 = shufflevector <8 x i16> %96, <8 x i16> %105, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %111 = shufflevector <8 x i16> %43, <8 x i16> %51, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %112 = shufflevector <8 x i16> %60, <8 x i16> %69, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %113 = shufflevector <8 x i16> %78, <8 x i16> %87, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %114 = shufflevector <8 x i16> %96, <8 x i16> %105, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %115 = bitcast <8 x i16> %107 to <4 x i32>
  %116 = bitcast <8 x i16> %108 to <4 x i32>
  %117 = shufflevector <4 x i32> %115, <4 x i32> %116, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %118 = bitcast <4 x i32> %117 to <2 x i64>
  %119 = bitcast <8 x i16> %109 to <4 x i32>
  %120 = bitcast <8 x i16> %110 to <4 x i32>
  %121 = shufflevector <4 x i32> %119, <4 x i32> %120, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %122 = bitcast <4 x i32> %121 to <2 x i64>
  %123 = bitcast <8 x i16> %111 to <4 x i32>
  %124 = bitcast <8 x i16> %112 to <4 x i32>
  %125 = shufflevector <4 x i32> %123, <4 x i32> %124, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %126 = bitcast <4 x i32> %125 to <2 x i64>
  %127 = bitcast <8 x i16> %113 to <4 x i32>
  %128 = bitcast <8 x i16> %114 to <4 x i32>
  %129 = shufflevector <4 x i32> %127, <4 x i32> %128, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %130 = bitcast <4 x i32> %129 to <2 x i64>
  %131 = shufflevector <4 x i32> %115, <4 x i32> %116, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %132 = bitcast <4 x i32> %131 to <2 x i64>
  %133 = shufflevector <4 x i32> %119, <4 x i32> %120, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %134 = bitcast <4 x i32> %133 to <2 x i64>
  %135 = shufflevector <4 x i32> %123, <4 x i32> %124, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %136 = bitcast <4 x i32> %135 to <2 x i64>
  %137 = shufflevector <4 x i32> %127, <4 x i32> %128, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %138 = bitcast <4 x i32> %137 to <2 x i64>
  %139 = shufflevector <2 x i64> %118, <2 x i64> %122, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %139, <2 x i64>* %35, align 16
  %140 = shufflevector <2 x i64> %118, <2 x i64> %122, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %140, <2 x i64>* %52, align 16
  %141 = shufflevector <2 x i64> %132, <2 x i64> %134, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %141, <2 x i64>* %61, align 16
  %142 = shufflevector <2 x i64> %132, <2 x i64> %134, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %142, <2 x i64>* %70, align 16
  %143 = shufflevector <2 x i64> %126, <2 x i64> %130, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %143, <2 x i64>* %79, align 16
  %144 = shufflevector <2 x i64> %126, <2 x i64> %130, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %144, <2 x i64>* %88, align 16
  %145 = shufflevector <2 x i64> %136, <2 x i64> %138, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %145, <2 x i64>* %97, align 16
  %146 = shufflevector <2 x i64> %136, <2 x i64> %138, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %146, <2 x i64>* %106, align 16
  %147 = getelementptr inbounds i32, i32* %37, i64 8
  %148 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 8
  %149 = bitcast i32* %147 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 16
  %151 = getelementptr inbounds i32, i32* %37, i64 12
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 16
  %154 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %150, <4 x i32> %153) #6
  %155 = bitcast <2 x i64>* %148 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %155, align 16
  %156 = getelementptr inbounds i32, i32* %37, i64 24
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 16
  %159 = getelementptr inbounds i32, i32* %37, i64 28
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 16
  %162 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %158, <4 x i32> %161) #6
  %163 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 9
  %164 = bitcast <2 x i64>* %163 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %164, align 16
  %165 = getelementptr inbounds i32, i32* %37, i64 40
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 16
  %168 = getelementptr inbounds i32, i32* %37, i64 44
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 16
  %171 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %167, <4 x i32> %170) #6
  %172 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 10
  %173 = bitcast <2 x i64>* %172 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %173, align 16
  %174 = getelementptr inbounds i32, i32* %37, i64 56
  %175 = bitcast i32* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 16
  %177 = getelementptr inbounds i32, i32* %37, i64 60
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 16
  %180 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %176, <4 x i32> %179) #6
  %181 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 11
  %182 = bitcast <2 x i64>* %181 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %182, align 16
  %183 = getelementptr inbounds i32, i32* %37, i64 72
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 16
  %186 = getelementptr inbounds i32, i32* %37, i64 76
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 16
  %189 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %185, <4 x i32> %188) #6
  %190 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 12
  %191 = bitcast <2 x i64>* %190 to <8 x i16>*
  store <8 x i16> %189, <8 x i16>* %191, align 16
  %192 = getelementptr inbounds i32, i32* %37, i64 88
  %193 = bitcast i32* %192 to <4 x i32>*
  %194 = load <4 x i32>, <4 x i32>* %193, align 16
  %195 = getelementptr inbounds i32, i32* %37, i64 92
  %196 = bitcast i32* %195 to <4 x i32>*
  %197 = load <4 x i32>, <4 x i32>* %196, align 16
  %198 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %194, <4 x i32> %197) #6
  %199 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 13
  %200 = bitcast <2 x i64>* %199 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %200, align 16
  %201 = getelementptr inbounds i32, i32* %37, i64 104
  %202 = bitcast i32* %201 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 16
  %204 = getelementptr inbounds i32, i32* %37, i64 108
  %205 = bitcast i32* %204 to <4 x i32>*
  %206 = load <4 x i32>, <4 x i32>* %205, align 16
  %207 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %203, <4 x i32> %206) #6
  %208 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 14
  %209 = bitcast <2 x i64>* %208 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %209, align 16
  %210 = getelementptr inbounds i32, i32* %37, i64 120
  %211 = bitcast i32* %210 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 16
  %213 = getelementptr inbounds i32, i32* %37, i64 124
  %214 = bitcast i32* %213 to <4 x i32>*
  %215 = load <4 x i32>, <4 x i32>* %214, align 16
  %216 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %212, <4 x i32> %215) #6
  %217 = getelementptr inbounds <2 x i64>, <2 x i64>* %35, i64 15
  %218 = shufflevector <8 x i16> %154, <8 x i16> %162, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %219 = shufflevector <8 x i16> %171, <8 x i16> %180, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %220 = shufflevector <8 x i16> %189, <8 x i16> %198, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %221 = shufflevector <8 x i16> %207, <8 x i16> %216, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %222 = shufflevector <8 x i16> %154, <8 x i16> %162, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %223 = shufflevector <8 x i16> %171, <8 x i16> %180, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %224 = shufflevector <8 x i16> %189, <8 x i16> %198, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %225 = shufflevector <8 x i16> %207, <8 x i16> %216, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %226 = bitcast <8 x i16> %218 to <4 x i32>
  %227 = bitcast <8 x i16> %219 to <4 x i32>
  %228 = shufflevector <4 x i32> %226, <4 x i32> %227, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %229 = bitcast <4 x i32> %228 to <2 x i64>
  %230 = bitcast <8 x i16> %220 to <4 x i32>
  %231 = bitcast <8 x i16> %221 to <4 x i32>
  %232 = shufflevector <4 x i32> %230, <4 x i32> %231, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %233 = bitcast <4 x i32> %232 to <2 x i64>
  %234 = bitcast <8 x i16> %222 to <4 x i32>
  %235 = bitcast <8 x i16> %223 to <4 x i32>
  %236 = shufflevector <4 x i32> %234, <4 x i32> %235, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %237 = bitcast <4 x i32> %236 to <2 x i64>
  %238 = bitcast <8 x i16> %224 to <4 x i32>
  %239 = bitcast <8 x i16> %225 to <4 x i32>
  %240 = shufflevector <4 x i32> %238, <4 x i32> %239, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %241 = bitcast <4 x i32> %240 to <2 x i64>
  %242 = shufflevector <4 x i32> %226, <4 x i32> %227, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %243 = bitcast <4 x i32> %242 to <2 x i64>
  %244 = shufflevector <4 x i32> %230, <4 x i32> %231, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %245 = bitcast <4 x i32> %244 to <2 x i64>
  %246 = shufflevector <4 x i32> %234, <4 x i32> %235, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %247 = bitcast <4 x i32> %246 to <2 x i64>
  %248 = shufflevector <4 x i32> %238, <4 x i32> %239, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %249 = bitcast <4 x i32> %248 to <2 x i64>
  %250 = shufflevector <2 x i64> %229, <2 x i64> %233, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %250, <2 x i64>* %148, align 16
  %251 = shufflevector <2 x i64> %229, <2 x i64> %233, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %251, <2 x i64>* %163, align 16
  %252 = shufflevector <2 x i64> %243, <2 x i64> %245, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %252, <2 x i64>* %172, align 16
  %253 = shufflevector <2 x i64> %243, <2 x i64> %245, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %253, <2 x i64>* %181, align 16
  %254 = shufflevector <2 x i64> %237, <2 x i64> %241, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %254, <2 x i64>* %190, align 16
  %255 = shufflevector <2 x i64> %237, <2 x i64> %241, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %255, <2 x i64>* %199, align 16
  %256 = shufflevector <2 x i64> %247, <2 x i64> %249, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %256, <2 x i64>* %208, align 16
  %257 = shufflevector <2 x i64> %247, <2 x i64> %249, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %257, <2 x i64>* %217, align 16
  call fastcc void @idct16_8col(<2 x i64>* %35, <2 x i64>* %35)
  %258 = getelementptr inbounds i32, i32* %37, i64 128
  %259 = add nuw nsw i32 %36, 1
  %260 = icmp eq i32 %259, 2
  br i1 %260, label %16, label %34

261:                                              ; preds = %16, %425
  %262 = phi i64 [ 0, %16 ], [ %427, %425 ]
  %263 = phi i16* [ %1, %16 ], [ %426, %425 ]
  %264 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 %262
  %265 = bitcast <2 x i64>* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 16
  %267 = getelementptr inbounds <2 x i64>, <2 x i64>* %264, i64 1
  %268 = bitcast <2 x i64>* %267 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 16
  %270 = shufflevector <8 x i16> %266, <8 x i16> %269, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %271 = getelementptr inbounds <2 x i64>, <2 x i64>* %264, i64 2
  %272 = bitcast <2 x i64>* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 16
  %274 = getelementptr inbounds <2 x i64>, <2 x i64>* %264, i64 3
  %275 = bitcast <2 x i64>* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 16
  %277 = shufflevector <8 x i16> %273, <8 x i16> %276, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %278 = getelementptr inbounds <2 x i64>, <2 x i64>* %264, i64 4
  %279 = bitcast <2 x i64>* %278 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 16
  %281 = getelementptr inbounds <2 x i64>, <2 x i64>* %264, i64 5
  %282 = bitcast <2 x i64>* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 16
  %284 = shufflevector <8 x i16> %280, <8 x i16> %283, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %285 = getelementptr inbounds <2 x i64>, <2 x i64>* %264, i64 6
  %286 = bitcast <2 x i64>* %285 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 16
  %288 = getelementptr inbounds <2 x i64>, <2 x i64>* %264, i64 7
  %289 = bitcast <2 x i64>* %288 to <8 x i16>*
  %290 = load <8 x i16>, <8 x i16>* %289, align 16
  %291 = shufflevector <8 x i16> %287, <8 x i16> %290, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %292 = shufflevector <8 x i16> %266, <8 x i16> %269, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %293 = shufflevector <8 x i16> %273, <8 x i16> %276, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %294 = shufflevector <8 x i16> %280, <8 x i16> %283, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %295 = shufflevector <8 x i16> %287, <8 x i16> %290, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %296 = bitcast <8 x i16> %270 to <4 x i32>
  %297 = bitcast <8 x i16> %277 to <4 x i32>
  %298 = shufflevector <4 x i32> %296, <4 x i32> %297, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %299 = bitcast <4 x i32> %298 to <2 x i64>
  %300 = bitcast <8 x i16> %284 to <4 x i32>
  %301 = bitcast <8 x i16> %291 to <4 x i32>
  %302 = shufflevector <4 x i32> %300, <4 x i32> %301, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %303 = bitcast <4 x i32> %302 to <2 x i64>
  %304 = bitcast <8 x i16> %292 to <4 x i32>
  %305 = bitcast <8 x i16> %293 to <4 x i32>
  %306 = shufflevector <4 x i32> %304, <4 x i32> %305, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %307 = bitcast <4 x i32> %306 to <2 x i64>
  %308 = bitcast <8 x i16> %294 to <4 x i32>
  %309 = bitcast <8 x i16> %295 to <4 x i32>
  %310 = shufflevector <4 x i32> %308, <4 x i32> %309, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %311 = bitcast <4 x i32> %310 to <2 x i64>
  %312 = shufflevector <4 x i32> %296, <4 x i32> %297, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %313 = bitcast <4 x i32> %312 to <2 x i64>
  %314 = shufflevector <4 x i32> %300, <4 x i32> %301, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %315 = bitcast <4 x i32> %314 to <2 x i64>
  %316 = shufflevector <4 x i32> %304, <4 x i32> %305, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %317 = bitcast <4 x i32> %316 to <2 x i64>
  %318 = shufflevector <4 x i32> %308, <4 x i32> %309, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %319 = bitcast <4 x i32> %318 to <2 x i64>
  %320 = shufflevector <2 x i64> %299, <2 x i64> %303, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %320, <2 x i64>* %17, align 16
  %321 = shufflevector <2 x i64> %299, <2 x i64> %303, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %321, <2 x i64>* %18, align 16
  %322 = shufflevector <2 x i64> %313, <2 x i64> %315, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %322, <2 x i64>* %19, align 16
  %323 = shufflevector <2 x i64> %313, <2 x i64> %315, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %323, <2 x i64>* %20, align 16
  %324 = shufflevector <2 x i64> %307, <2 x i64> %311, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %324, <2 x i64>* %21, align 16
  %325 = shufflevector <2 x i64> %307, <2 x i64> %311, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %325, <2 x i64>* %22, align 16
  %326 = shufflevector <2 x i64> %317, <2 x i64> %319, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %326, <2 x i64>* %23, align 16
  %327 = shufflevector <2 x i64> %317, <2 x i64> %319, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %327, <2 x i64>* %24, align 16
  %328 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 %262
  %329 = bitcast <2 x i64>* %328 to <8 x i16>*
  %330 = load <8 x i16>, <8 x i16>* %329, align 16
  %331 = getelementptr inbounds <2 x i64>, <2 x i64>* %328, i64 1
  %332 = bitcast <2 x i64>* %331 to <8 x i16>*
  %333 = load <8 x i16>, <8 x i16>* %332, align 16
  %334 = shufflevector <8 x i16> %330, <8 x i16> %333, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %335 = getelementptr inbounds <2 x i64>, <2 x i64>* %328, i64 2
  %336 = bitcast <2 x i64>* %335 to <8 x i16>*
  %337 = load <8 x i16>, <8 x i16>* %336, align 16
  %338 = getelementptr inbounds <2 x i64>, <2 x i64>* %328, i64 3
  %339 = bitcast <2 x i64>* %338 to <8 x i16>*
  %340 = load <8 x i16>, <8 x i16>* %339, align 16
  %341 = shufflevector <8 x i16> %337, <8 x i16> %340, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %342 = getelementptr inbounds <2 x i64>, <2 x i64>* %328, i64 4
  %343 = bitcast <2 x i64>* %342 to <8 x i16>*
  %344 = load <8 x i16>, <8 x i16>* %343, align 16
  %345 = getelementptr inbounds <2 x i64>, <2 x i64>* %328, i64 5
  %346 = bitcast <2 x i64>* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 16
  %348 = shufflevector <8 x i16> %344, <8 x i16> %347, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %349 = getelementptr inbounds <2 x i64>, <2 x i64>* %328, i64 6
  %350 = bitcast <2 x i64>* %349 to <8 x i16>*
  %351 = load <8 x i16>, <8 x i16>* %350, align 16
  %352 = getelementptr inbounds <2 x i64>, <2 x i64>* %328, i64 7
  %353 = bitcast <2 x i64>* %352 to <8 x i16>*
  %354 = load <8 x i16>, <8 x i16>* %353, align 16
  %355 = shufflevector <8 x i16> %351, <8 x i16> %354, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %356 = shufflevector <8 x i16> %330, <8 x i16> %333, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %357 = shufflevector <8 x i16> %337, <8 x i16> %340, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %358 = shufflevector <8 x i16> %344, <8 x i16> %347, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %359 = shufflevector <8 x i16> %351, <8 x i16> %354, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %360 = bitcast <8 x i16> %334 to <4 x i32>
  %361 = bitcast <8 x i16> %341 to <4 x i32>
  %362 = shufflevector <4 x i32> %360, <4 x i32> %361, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %363 = bitcast <4 x i32> %362 to <2 x i64>
  %364 = bitcast <8 x i16> %348 to <4 x i32>
  %365 = bitcast <8 x i16> %355 to <4 x i32>
  %366 = shufflevector <4 x i32> %364, <4 x i32> %365, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %367 = bitcast <4 x i32> %366 to <2 x i64>
  %368 = bitcast <8 x i16> %356 to <4 x i32>
  %369 = bitcast <8 x i16> %357 to <4 x i32>
  %370 = shufflevector <4 x i32> %368, <4 x i32> %369, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %371 = bitcast <4 x i32> %370 to <2 x i64>
  %372 = bitcast <8 x i16> %358 to <4 x i32>
  %373 = bitcast <8 x i16> %359 to <4 x i32>
  %374 = shufflevector <4 x i32> %372, <4 x i32> %373, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %375 = bitcast <4 x i32> %374 to <2 x i64>
  %376 = shufflevector <4 x i32> %360, <4 x i32> %361, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %377 = bitcast <4 x i32> %376 to <2 x i64>
  %378 = shufflevector <4 x i32> %364, <4 x i32> %365, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %379 = bitcast <4 x i32> %378 to <2 x i64>
  %380 = shufflevector <4 x i32> %368, <4 x i32> %369, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %381 = bitcast <4 x i32> %380 to <2 x i64>
  %382 = shufflevector <4 x i32> %372, <4 x i32> %373, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %383 = bitcast <4 x i32> %382 to <2 x i64>
  %384 = shufflevector <2 x i64> %363, <2 x i64> %367, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %384, <2 x i64>* %25, align 16
  %385 = shufflevector <2 x i64> %363, <2 x i64> %367, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %385, <2 x i64>* %26, align 16
  %386 = shufflevector <2 x i64> %377, <2 x i64> %379, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %386, <2 x i64>* %27, align 16
  %387 = shufflevector <2 x i64> %377, <2 x i64> %379, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %387, <2 x i64>* %28, align 16
  %388 = shufflevector <2 x i64> %371, <2 x i64> %375, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %388, <2 x i64>* %29, align 16
  %389 = shufflevector <2 x i64> %371, <2 x i64> %375, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %389, <2 x i64>* %30, align 16
  %390 = shufflevector <2 x i64> %381, <2 x i64> %383, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %390, <2 x i64>* %31, align 16
  %391 = shufflevector <2 x i64> %381, <2 x i64> %383, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %391, <2 x i64>* %32, align 16
  call fastcc void @idct16_8col(<2 x i64>* nonnull %17, <2 x i64>* nonnull %17)
  br label %392

392:                                              ; preds = %392, %261
  %393 = phi i64 [ 0, %261 ], [ %423, %392 ]
  %394 = mul nsw i64 %393, %33
  %395 = getelementptr inbounds i16, i16* %263, i64 %394
  %396 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 %393
  %397 = bitcast <2 x i64>* %396 to <8 x i16>*
  %398 = load <8 x i16>, <8 x i16>* %397, align 16
  %399 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %398, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %400 = ashr <8 x i16> %399, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %401 = bitcast i16* %395 to <8 x i16>*
  %402 = load <8 x i16>, <8 x i16>* %401, align 16
  %403 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %402, <8 x i16> %400) #6
  %404 = icmp sgt <8 x i16> %403, zeroinitializer
  %405 = select <8 x i1> %404, <8 x i16> %403, <8 x i16> zeroinitializer
  %406 = icmp slt <8 x i16> %405, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %407 = select <8 x i1> %406, <8 x i16> %405, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %407, <8 x i16>* %401, align 16
  %408 = or i64 %393, 1
  %409 = mul nsw i64 %408, %33
  %410 = getelementptr inbounds i16, i16* %263, i64 %409
  %411 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 %408
  %412 = bitcast <2 x i64>* %411 to <8 x i16>*
  %413 = load <8 x i16>, <8 x i16>* %412, align 16
  %414 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %413, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %415 = ashr <8 x i16> %414, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %416 = bitcast i16* %410 to <8 x i16>*
  %417 = load <8 x i16>, <8 x i16>* %416, align 16
  %418 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %417, <8 x i16> %415) #6
  %419 = icmp sgt <8 x i16> %418, zeroinitializer
  %420 = select <8 x i1> %419, <8 x i16> %418, <8 x i16> zeroinitializer
  %421 = icmp slt <8 x i16> %420, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %422 = select <8 x i1> %421, <8 x i16> %420, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %422, <8 x i16>* %416, align 16
  %423 = add nuw nsw i64 %393, 2
  %424 = icmp eq i64 %423, 16
  br i1 %424, label %425, label %392

425:                                              ; preds = %392
  %426 = getelementptr inbounds i16, i16* %263, i64 8
  %427 = add nuw nsw i64 %262, 8
  %428 = icmp ult i64 %427, 16
  br i1 %428, label %261, label %429

429:                                              ; preds = %425
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %13) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %12) #6
  br label %710

430:                                              ; preds = %4
  %431 = bitcast [4 x [16 x <2 x i64>]]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %431) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %431, i8 -86, i64 1024, i1 false)
  br label %450

432:                                              ; preds = %450
  %433 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 0
  %434 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 1
  %435 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 2
  %436 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 3
  %437 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 4
  %438 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 5
  %439 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 6
  %440 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 7
  %441 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 8
  %442 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 9
  %443 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 10
  %444 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 11
  %445 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 12
  %446 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 13
  %447 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 14
  %448 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 15
  %449 = sext i32 %2 to i64
  br label %581

450:                                              ; preds = %450, %430
  %451 = phi i64 [ 0, %430 ], [ %579, %450 ]
  %452 = phi i32* [ %0, %430 ], [ %578, %450 ]
  %453 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 0
  %454 = bitcast i32* %452 to <2 x i64>*
  %455 = load <2 x i64>, <2 x i64>* %454, align 16
  store <2 x i64> %455, <2 x i64>* %453, align 16
  %456 = getelementptr inbounds i32, i32* %452, i64 4
  %457 = bitcast i32* %456 to <2 x i64>*
  %458 = load <2 x i64>, <2 x i64>* %457, align 16
  %459 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 1
  store <2 x i64> %458, <2 x i64>* %459, align 16
  %460 = getelementptr inbounds i32, i32* %452, i64 16
  %461 = bitcast i32* %460 to <2 x i64>*
  %462 = load <2 x i64>, <2 x i64>* %461, align 16
  %463 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 2
  store <2 x i64> %462, <2 x i64>* %463, align 16
  %464 = getelementptr inbounds i32, i32* %452, i64 20
  %465 = bitcast i32* %464 to <2 x i64>*
  %466 = load <2 x i64>, <2 x i64>* %465, align 16
  %467 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 3
  store <2 x i64> %466, <2 x i64>* %467, align 16
  %468 = getelementptr inbounds i32, i32* %452, i64 32
  %469 = bitcast i32* %468 to <2 x i64>*
  %470 = load <2 x i64>, <2 x i64>* %469, align 16
  %471 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 4
  store <2 x i64> %470, <2 x i64>* %471, align 16
  %472 = getelementptr inbounds i32, i32* %452, i64 36
  %473 = bitcast i32* %472 to <2 x i64>*
  %474 = load <2 x i64>, <2 x i64>* %473, align 16
  %475 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 5
  store <2 x i64> %474, <2 x i64>* %475, align 16
  %476 = getelementptr inbounds i32, i32* %452, i64 48
  %477 = bitcast i32* %476 to <2 x i64>*
  %478 = load <2 x i64>, <2 x i64>* %477, align 16
  %479 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 6
  store <2 x i64> %478, <2 x i64>* %479, align 16
  %480 = getelementptr inbounds i32, i32* %452, i64 52
  %481 = bitcast i32* %480 to <4 x i32>*
  %482 = load <4 x i32>, <4 x i32>* %481, align 16
  %483 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 7
  %484 = bitcast <2 x i64> %455 to <4 x i32>
  %485 = bitcast <2 x i64> %462 to <4 x i32>
  %486 = shufflevector <4 x i32> %484, <4 x i32> %485, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %487 = bitcast <4 x i32> %486 to <2 x i64>
  %488 = bitcast <2 x i64> %470 to <4 x i32>
  %489 = bitcast <2 x i64> %478 to <4 x i32>
  %490 = shufflevector <4 x i32> %488, <4 x i32> %489, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %491 = bitcast <4 x i32> %490 to <2 x i64>
  %492 = shufflevector <4 x i32> %484, <4 x i32> %485, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %493 = bitcast <4 x i32> %492 to <2 x i64>
  %494 = shufflevector <4 x i32> %488, <4 x i32> %489, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %495 = bitcast <4 x i32> %494 to <2 x i64>
  %496 = bitcast <2 x i64> %458 to <4 x i32>
  %497 = bitcast <2 x i64> %466 to <4 x i32>
  %498 = shufflevector <4 x i32> %496, <4 x i32> %497, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %499 = bitcast <4 x i32> %498 to <2 x i64>
  %500 = bitcast <2 x i64> %474 to <4 x i32>
  %501 = shufflevector <4 x i32> %500, <4 x i32> %482, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %502 = bitcast <4 x i32> %501 to <2 x i64>
  %503 = shufflevector <4 x i32> %496, <4 x i32> %497, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %504 = bitcast <4 x i32> %503 to <2 x i64>
  %505 = shufflevector <4 x i32> %500, <4 x i32> %482, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %506 = bitcast <4 x i32> %505 to <2 x i64>
  %507 = shufflevector <2 x i64> %487, <2 x i64> %491, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %507, <2 x i64>* %453, align 16
  %508 = shufflevector <2 x i64> %487, <2 x i64> %491, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %508, <2 x i64>* %459, align 16
  %509 = shufflevector <2 x i64> %493, <2 x i64> %495, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %509, <2 x i64>* %463, align 16
  %510 = shufflevector <2 x i64> %493, <2 x i64> %495, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %510, <2 x i64>* %467, align 16
  %511 = shufflevector <2 x i64> %499, <2 x i64> %502, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %511, <2 x i64>* %471, align 16
  %512 = shufflevector <2 x i64> %499, <2 x i64> %502, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %512, <2 x i64>* %475, align 16
  %513 = shufflevector <2 x i64> %504, <2 x i64> %506, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %513, <2 x i64>* %479, align 16
  %514 = shufflevector <2 x i64> %504, <2 x i64> %506, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %514, <2 x i64>* %483, align 16
  %515 = getelementptr inbounds i32, i32* %452, i64 8
  %516 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 8
  %517 = bitcast i32* %515 to <2 x i64>*
  %518 = load <2 x i64>, <2 x i64>* %517, align 16
  store <2 x i64> %518, <2 x i64>* %516, align 16
  %519 = getelementptr inbounds i32, i32* %452, i64 12
  %520 = bitcast i32* %519 to <2 x i64>*
  %521 = load <2 x i64>, <2 x i64>* %520, align 16
  %522 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 9
  store <2 x i64> %521, <2 x i64>* %522, align 16
  %523 = getelementptr inbounds i32, i32* %452, i64 24
  %524 = bitcast i32* %523 to <2 x i64>*
  %525 = load <2 x i64>, <2 x i64>* %524, align 16
  %526 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 10
  store <2 x i64> %525, <2 x i64>* %526, align 16
  %527 = getelementptr inbounds i32, i32* %452, i64 28
  %528 = bitcast i32* %527 to <2 x i64>*
  %529 = load <2 x i64>, <2 x i64>* %528, align 16
  %530 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 11
  store <2 x i64> %529, <2 x i64>* %530, align 16
  %531 = getelementptr inbounds i32, i32* %452, i64 40
  %532 = bitcast i32* %531 to <2 x i64>*
  %533 = load <2 x i64>, <2 x i64>* %532, align 16
  %534 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 12
  store <2 x i64> %533, <2 x i64>* %534, align 16
  %535 = getelementptr inbounds i32, i32* %452, i64 44
  %536 = bitcast i32* %535 to <2 x i64>*
  %537 = load <2 x i64>, <2 x i64>* %536, align 16
  %538 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 13
  store <2 x i64> %537, <2 x i64>* %538, align 16
  %539 = getelementptr inbounds i32, i32* %452, i64 56
  %540 = bitcast i32* %539 to <2 x i64>*
  %541 = load <2 x i64>, <2 x i64>* %540, align 16
  %542 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 14
  store <2 x i64> %541, <2 x i64>* %542, align 16
  %543 = getelementptr inbounds i32, i32* %452, i64 60
  %544 = bitcast i32* %543 to <4 x i32>*
  %545 = load <4 x i32>, <4 x i32>* %544, align 16
  %546 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 %451, i64 15
  %547 = bitcast <2 x i64> %518 to <4 x i32>
  %548 = bitcast <2 x i64> %525 to <4 x i32>
  %549 = shufflevector <4 x i32> %547, <4 x i32> %548, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %550 = bitcast <4 x i32> %549 to <2 x i64>
  %551 = bitcast <2 x i64> %533 to <4 x i32>
  %552 = bitcast <2 x i64> %541 to <4 x i32>
  %553 = shufflevector <4 x i32> %551, <4 x i32> %552, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %554 = bitcast <4 x i32> %553 to <2 x i64>
  %555 = shufflevector <4 x i32> %547, <4 x i32> %548, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %556 = bitcast <4 x i32> %555 to <2 x i64>
  %557 = shufflevector <4 x i32> %551, <4 x i32> %552, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %558 = bitcast <4 x i32> %557 to <2 x i64>
  %559 = bitcast <2 x i64> %521 to <4 x i32>
  %560 = bitcast <2 x i64> %529 to <4 x i32>
  %561 = shufflevector <4 x i32> %559, <4 x i32> %560, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %562 = bitcast <4 x i32> %561 to <2 x i64>
  %563 = bitcast <2 x i64> %537 to <4 x i32>
  %564 = shufflevector <4 x i32> %563, <4 x i32> %545, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %565 = bitcast <4 x i32> %564 to <2 x i64>
  %566 = shufflevector <4 x i32> %559, <4 x i32> %560, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %567 = bitcast <4 x i32> %566 to <2 x i64>
  %568 = shufflevector <4 x i32> %563, <4 x i32> %545, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %569 = bitcast <4 x i32> %568 to <2 x i64>
  %570 = shufflevector <2 x i64> %550, <2 x i64> %554, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %570, <2 x i64>* %516, align 16
  %571 = shufflevector <2 x i64> %550, <2 x i64> %554, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %571, <2 x i64>* %522, align 16
  %572 = shufflevector <2 x i64> %556, <2 x i64> %558, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %572, <2 x i64>* %526, align 16
  %573 = shufflevector <2 x i64> %556, <2 x i64> %558, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %573, <2 x i64>* %530, align 16
  %574 = shufflevector <2 x i64> %562, <2 x i64> %565, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %574, <2 x i64>* %534, align 16
  %575 = shufflevector <2 x i64> %562, <2 x i64> %565, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %575, <2 x i64>* %538, align 16
  %576 = shufflevector <2 x i64> %567, <2 x i64> %569, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %576, <2 x i64>* %542, align 16
  %577 = shufflevector <2 x i64> %567, <2 x i64> %569, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %577, <2 x i64>* %546, align 16
  call fastcc void @highbd_idct16_4col(<2 x i64>* %453)
  %578 = getelementptr inbounds i32, i32* %452, i64 64
  %579 = add nuw nsw i64 %451, 1
  %580 = icmp eq i64 %579, 4
  br i1 %580, label %432, label %450

581:                                              ; preds = %432, %705
  %582 = phi i64 [ 0, %432 ], [ %707, %705 ]
  %583 = phi i16* [ %1, %432 ], [ %706, %705 ]
  %584 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 0, i64 %582
  %585 = bitcast <2 x i64>* %584 to <4 x i32>*
  %586 = load <4 x i32>, <4 x i32>* %585, align 16
  %587 = getelementptr inbounds <2 x i64>, <2 x i64>* %584, i64 1
  %588 = bitcast <2 x i64>* %587 to <4 x i32>*
  %589 = load <4 x i32>, <4 x i32>* %588, align 16
  %590 = shufflevector <4 x i32> %586, <4 x i32> %589, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %591 = bitcast <4 x i32> %590 to <2 x i64>
  %592 = getelementptr inbounds <2 x i64>, <2 x i64>* %584, i64 2
  %593 = bitcast <2 x i64>* %592 to <4 x i32>*
  %594 = load <4 x i32>, <4 x i32>* %593, align 16
  %595 = getelementptr inbounds <2 x i64>, <2 x i64>* %584, i64 3
  %596 = bitcast <2 x i64>* %595 to <4 x i32>*
  %597 = load <4 x i32>, <4 x i32>* %596, align 16
  %598 = shufflevector <4 x i32> %594, <4 x i32> %597, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %599 = bitcast <4 x i32> %598 to <2 x i64>
  %600 = shufflevector <4 x i32> %586, <4 x i32> %589, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %601 = bitcast <4 x i32> %600 to <2 x i64>
  %602 = shufflevector <4 x i32> %594, <4 x i32> %597, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %603 = bitcast <4 x i32> %602 to <2 x i64>
  %604 = shufflevector <2 x i64> %591, <2 x i64> %599, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %604, <2 x i64>* %433, align 16
  %605 = shufflevector <2 x i64> %591, <2 x i64> %599, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %605, <2 x i64>* %434, align 16
  %606 = shufflevector <2 x i64> %601, <2 x i64> %603, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %606, <2 x i64>* %435, align 16
  %607 = shufflevector <2 x i64> %601, <2 x i64> %603, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %607, <2 x i64>* %436, align 16
  %608 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 1, i64 %582
  %609 = bitcast <2 x i64>* %608 to <4 x i32>*
  %610 = load <4 x i32>, <4 x i32>* %609, align 16
  %611 = getelementptr inbounds <2 x i64>, <2 x i64>* %608, i64 1
  %612 = bitcast <2 x i64>* %611 to <4 x i32>*
  %613 = load <4 x i32>, <4 x i32>* %612, align 16
  %614 = shufflevector <4 x i32> %610, <4 x i32> %613, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %615 = bitcast <4 x i32> %614 to <2 x i64>
  %616 = getelementptr inbounds <2 x i64>, <2 x i64>* %608, i64 2
  %617 = bitcast <2 x i64>* %616 to <4 x i32>*
  %618 = load <4 x i32>, <4 x i32>* %617, align 16
  %619 = getelementptr inbounds <2 x i64>, <2 x i64>* %608, i64 3
  %620 = bitcast <2 x i64>* %619 to <4 x i32>*
  %621 = load <4 x i32>, <4 x i32>* %620, align 16
  %622 = shufflevector <4 x i32> %618, <4 x i32> %621, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %623 = bitcast <4 x i32> %622 to <2 x i64>
  %624 = shufflevector <4 x i32> %610, <4 x i32> %613, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %625 = bitcast <4 x i32> %624 to <2 x i64>
  %626 = shufflevector <4 x i32> %618, <4 x i32> %621, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %627 = bitcast <4 x i32> %626 to <2 x i64>
  %628 = shufflevector <2 x i64> %615, <2 x i64> %623, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %628, <2 x i64>* %437, align 16
  %629 = shufflevector <2 x i64> %615, <2 x i64> %623, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %629, <2 x i64>* %438, align 16
  %630 = shufflevector <2 x i64> %625, <2 x i64> %627, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %630, <2 x i64>* %439, align 16
  %631 = shufflevector <2 x i64> %625, <2 x i64> %627, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %631, <2 x i64>* %440, align 16
  %632 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 2, i64 %582
  %633 = bitcast <2 x i64>* %632 to <4 x i32>*
  %634 = load <4 x i32>, <4 x i32>* %633, align 16
  %635 = getelementptr inbounds <2 x i64>, <2 x i64>* %632, i64 1
  %636 = bitcast <2 x i64>* %635 to <4 x i32>*
  %637 = load <4 x i32>, <4 x i32>* %636, align 16
  %638 = shufflevector <4 x i32> %634, <4 x i32> %637, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %639 = bitcast <4 x i32> %638 to <2 x i64>
  %640 = getelementptr inbounds <2 x i64>, <2 x i64>* %632, i64 2
  %641 = bitcast <2 x i64>* %640 to <4 x i32>*
  %642 = load <4 x i32>, <4 x i32>* %641, align 16
  %643 = getelementptr inbounds <2 x i64>, <2 x i64>* %632, i64 3
  %644 = bitcast <2 x i64>* %643 to <4 x i32>*
  %645 = load <4 x i32>, <4 x i32>* %644, align 16
  %646 = shufflevector <4 x i32> %642, <4 x i32> %645, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %647 = bitcast <4 x i32> %646 to <2 x i64>
  %648 = shufflevector <4 x i32> %634, <4 x i32> %637, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %649 = bitcast <4 x i32> %648 to <2 x i64>
  %650 = shufflevector <4 x i32> %642, <4 x i32> %645, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %651 = bitcast <4 x i32> %650 to <2 x i64>
  %652 = shufflevector <2 x i64> %639, <2 x i64> %647, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %652, <2 x i64>* %441, align 16
  %653 = shufflevector <2 x i64> %639, <2 x i64> %647, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %653, <2 x i64>* %442, align 16
  %654 = shufflevector <2 x i64> %649, <2 x i64> %651, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %654, <2 x i64>* %443, align 16
  %655 = shufflevector <2 x i64> %649, <2 x i64> %651, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %655, <2 x i64>* %444, align 16
  %656 = getelementptr inbounds [4 x [16 x <2 x i64>]], [4 x [16 x <2 x i64>]]* %8, i64 0, i64 3, i64 %582
  %657 = bitcast <2 x i64>* %656 to <4 x i32>*
  %658 = load <4 x i32>, <4 x i32>* %657, align 16
  %659 = getelementptr inbounds <2 x i64>, <2 x i64>* %656, i64 1
  %660 = bitcast <2 x i64>* %659 to <4 x i32>*
  %661 = load <4 x i32>, <4 x i32>* %660, align 16
  %662 = shufflevector <4 x i32> %658, <4 x i32> %661, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %663 = bitcast <4 x i32> %662 to <2 x i64>
  %664 = getelementptr inbounds <2 x i64>, <2 x i64>* %656, i64 2
  %665 = bitcast <2 x i64>* %664 to <4 x i32>*
  %666 = load <4 x i32>, <4 x i32>* %665, align 16
  %667 = getelementptr inbounds <2 x i64>, <2 x i64>* %656, i64 3
  %668 = bitcast <2 x i64>* %667 to <4 x i32>*
  %669 = load <4 x i32>, <4 x i32>* %668, align 16
  %670 = shufflevector <4 x i32> %666, <4 x i32> %669, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %671 = bitcast <4 x i32> %670 to <2 x i64>
  %672 = shufflevector <4 x i32> %658, <4 x i32> %661, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %673 = bitcast <4 x i32> %672 to <2 x i64>
  %674 = shufflevector <4 x i32> %666, <4 x i32> %669, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %675 = bitcast <4 x i32> %674 to <2 x i64>
  %676 = shufflevector <2 x i64> %663, <2 x i64> %671, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %676, <2 x i64>* %445, align 16
  %677 = shufflevector <2 x i64> %663, <2 x i64> %671, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %677, <2 x i64>* %446, align 16
  %678 = shufflevector <2 x i64> %673, <2 x i64> %675, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %678, <2 x i64>* %447, align 16
  %679 = shufflevector <2 x i64> %673, <2 x i64> %675, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %679, <2 x i64>* %448, align 16
  call fastcc void @highbd_idct16_4col(<2 x i64>* nonnull %433)
  %680 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #6
  %681 = add <8 x i16> %680, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  br label %682

682:                                              ; preds = %682, %581
  %683 = phi i64 [ 0, %581 ], [ %703, %682 ]
  %684 = mul nsw i64 %683, %449
  %685 = getelementptr inbounds i16, i16* %583, i64 %684
  %686 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 %683
  %687 = bitcast <2 x i64>* %686 to <4 x i32>*
  %688 = load <4 x i32>, <4 x i32>* %687, align 16
  %689 = add <4 x i32> %688, <i32 32, i32 32, i32 32, i32 32>
  %690 = ashr <4 x i32> %689, <i32 6, i32 6, i32 6, i32 6>
  %691 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %690, <4 x i32> %690) #6
  %692 = bitcast i16* %685 to i64*
  %693 = load i64, i64* %692, align 1
  %694 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %693, i32 0
  %695 = bitcast <2 x i64> %694 to <8 x i16>
  %696 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %695, <8 x i16> %691) #6
  %697 = icmp sgt <8 x i16> %696, zeroinitializer
  %698 = select <8 x i1> %697, <8 x i16> %696, <8 x i16> zeroinitializer
  %699 = icmp slt <8 x i16> %698, %681
  %700 = select <8 x i1> %699, <8 x i16> %698, <8 x i16> %681
  %701 = bitcast <8 x i16> %700 to <2 x i64>
  %702 = extractelement <2 x i64> %701, i32 0
  store i64 %702, i64* %692, align 1
  %703 = add nuw nsw i64 %683, 1
  %704 = icmp eq i64 %703, 16
  br i1 %704, label %705, label %682

705:                                              ; preds = %682
  %706 = getelementptr inbounds i16, i16* %583, i64 4
  %707 = add nuw nsw i64 %582, 4
  %708 = icmp ult i64 %707, 16
  br i1 %708, label %581, label %709

709:                                              ; preds = %705
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %431) #6
  br label %710

710:                                              ; preds = %709, %429
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @idct16_8col(<2 x i64>* nocapture readonly, <2 x i64>* nocapture) unnamed_addr #2 {
  %3 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 1
  %4 = bitcast <2 x i64>* %3 to <8 x i16>*
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  %6 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 15
  %7 = bitcast <2 x i64>* %6 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 16
  %9 = shufflevector <8 x i16> %5, <8 x i16> %8, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %10 = shufflevector <8 x i16> %5, <8 x i16> %8, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %11 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %9, <8 x i16> <i16 1606, i16 -16305, i16 1606, i16 -16305, i16 1606, i16 -16305, i16 1606, i16 -16305>) #6
  %12 = add <4 x i32> %11, <i32 8192, i32 8192, i32 8192, i32 8192>
  %13 = ashr <4 x i32> %12, <i32 14, i32 14, i32 14, i32 14>
  %14 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %10, <8 x i16> <i16 1606, i16 -16305, i16 1606, i16 -16305, i16 1606, i16 -16305, i16 1606, i16 -16305>) #6
  %15 = add <4 x i32> %14, <i32 8192, i32 8192, i32 8192, i32 8192>
  %16 = ashr <4 x i32> %15, <i32 14, i32 14, i32 14, i32 14>
  %17 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %13, <4 x i32> %16) #6
  %18 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %9, <8 x i16> <i16 16305, i16 1606, i16 16305, i16 1606, i16 16305, i16 1606, i16 16305, i16 1606>) #6
  %19 = add <4 x i32> %18, <i32 8192, i32 8192, i32 8192, i32 8192>
  %20 = ashr <4 x i32> %19, <i32 14, i32 14, i32 14, i32 14>
  %21 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %10, <8 x i16> <i16 16305, i16 1606, i16 16305, i16 1606, i16 16305, i16 1606, i16 16305, i16 1606>) #6
  %22 = add <4 x i32> %21, <i32 8192, i32 8192, i32 8192, i32 8192>
  %23 = ashr <4 x i32> %22, <i32 14, i32 14, i32 14, i32 14>
  %24 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %20, <4 x i32> %23) #6
  %25 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 9
  %26 = bitcast <2 x i64>* %25 to <8 x i16>*
  %27 = load <8 x i16>, <8 x i16>* %26, align 16
  %28 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 7
  %29 = bitcast <2 x i64>* %28 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 16
  %31 = shufflevector <8 x i16> %27, <8 x i16> %30, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %32 = shufflevector <8 x i16> %27, <8 x i16> %30, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %31, <8 x i16> <i16 12665, i16 -10394, i16 12665, i16 -10394, i16 12665, i16 -10394, i16 12665, i16 -10394>) #6
  %34 = add <4 x i32> %33, <i32 8192, i32 8192, i32 8192, i32 8192>
  %35 = ashr <4 x i32> %34, <i32 14, i32 14, i32 14, i32 14>
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %32, <8 x i16> <i16 12665, i16 -10394, i16 12665, i16 -10394, i16 12665, i16 -10394, i16 12665, i16 -10394>) #6
  %37 = add <4 x i32> %36, <i32 8192, i32 8192, i32 8192, i32 8192>
  %38 = ashr <4 x i32> %37, <i32 14, i32 14, i32 14, i32 14>
  %39 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %35, <4 x i32> %38) #6
  %40 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %31, <8 x i16> <i16 10394, i16 12665, i16 10394, i16 12665, i16 10394, i16 12665, i16 10394, i16 12665>) #6
  %41 = add <4 x i32> %40, <i32 8192, i32 8192, i32 8192, i32 8192>
  %42 = ashr <4 x i32> %41, <i32 14, i32 14, i32 14, i32 14>
  %43 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %32, <8 x i16> <i16 10394, i16 12665, i16 10394, i16 12665, i16 10394, i16 12665, i16 10394, i16 12665>) #6
  %44 = add <4 x i32> %43, <i32 8192, i32 8192, i32 8192, i32 8192>
  %45 = ashr <4 x i32> %44, <i32 14, i32 14, i32 14, i32 14>
  %46 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %42, <4 x i32> %45) #6
  %47 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 5
  %48 = bitcast <2 x i64>* %47 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 16
  %50 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 11
  %51 = bitcast <2 x i64>* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 16
  %53 = shufflevector <8 x i16> %49, <8 x i16> %52, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %54 = shufflevector <8 x i16> %49, <8 x i16> %52, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %55 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %53, <8 x i16> <i16 7723, i16 -14449, i16 7723, i16 -14449, i16 7723, i16 -14449, i16 7723, i16 -14449>) #6
  %56 = add <4 x i32> %55, <i32 8192, i32 8192, i32 8192, i32 8192>
  %57 = ashr <4 x i32> %56, <i32 14, i32 14, i32 14, i32 14>
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %54, <8 x i16> <i16 7723, i16 -14449, i16 7723, i16 -14449, i16 7723, i16 -14449, i16 7723, i16 -14449>) #6
  %59 = add <4 x i32> %58, <i32 8192, i32 8192, i32 8192, i32 8192>
  %60 = ashr <4 x i32> %59, <i32 14, i32 14, i32 14, i32 14>
  %61 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %57, <4 x i32> %60) #6
  %62 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %53, <8 x i16> <i16 14449, i16 7723, i16 14449, i16 7723, i16 14449, i16 7723, i16 14449, i16 7723>) #6
  %63 = add <4 x i32> %62, <i32 8192, i32 8192, i32 8192, i32 8192>
  %64 = ashr <4 x i32> %63, <i32 14, i32 14, i32 14, i32 14>
  %65 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %54, <8 x i16> <i16 14449, i16 7723, i16 14449, i16 7723, i16 14449, i16 7723, i16 14449, i16 7723>) #6
  %66 = add <4 x i32> %65, <i32 8192, i32 8192, i32 8192, i32 8192>
  %67 = ashr <4 x i32> %66, <i32 14, i32 14, i32 14, i32 14>
  %68 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %64, <4 x i32> %67) #6
  %69 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 13
  %70 = bitcast <2 x i64>* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 16
  %72 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 3
  %73 = bitcast <2 x i64>* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 16
  %75 = shufflevector <8 x i16> %71, <8 x i16> %74, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %76 = shufflevector <8 x i16> %71, <8 x i16> %74, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %77 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %75, <8 x i16> <i16 15679, i16 -4756, i16 15679, i16 -4756, i16 15679, i16 -4756, i16 15679, i16 -4756>) #6
  %78 = add <4 x i32> %77, <i32 8192, i32 8192, i32 8192, i32 8192>
  %79 = ashr <4 x i32> %78, <i32 14, i32 14, i32 14, i32 14>
  %80 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %76, <8 x i16> <i16 15679, i16 -4756, i16 15679, i16 -4756, i16 15679, i16 -4756, i16 15679, i16 -4756>) #6
  %81 = add <4 x i32> %80, <i32 8192, i32 8192, i32 8192, i32 8192>
  %82 = ashr <4 x i32> %81, <i32 14, i32 14, i32 14, i32 14>
  %83 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %79, <4 x i32> %82) #6
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %75, <8 x i16> <i16 4756, i16 15679, i16 4756, i16 15679, i16 4756, i16 15679, i16 4756, i16 15679>) #6
  %85 = add <4 x i32> %84, <i32 8192, i32 8192, i32 8192, i32 8192>
  %86 = ashr <4 x i32> %85, <i32 14, i32 14, i32 14, i32 14>
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %76, <8 x i16> <i16 4756, i16 15679, i16 4756, i16 15679, i16 4756, i16 15679, i16 4756, i16 15679>) #6
  %88 = add <4 x i32> %87, <i32 8192, i32 8192, i32 8192, i32 8192>
  %89 = ashr <4 x i32> %88, <i32 14, i32 14, i32 14, i32 14>
  %90 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %86, <4 x i32> %89) #6
  %91 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 2
  %92 = bitcast <2 x i64>* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 16
  %94 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 14
  %95 = bitcast <2 x i64>* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 16
  %97 = shufflevector <8 x i16> %93, <8 x i16> %96, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %98 = shufflevector <8 x i16> %93, <8 x i16> %96, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %99 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %97, <8 x i16> <i16 3196, i16 -16069, i16 3196, i16 -16069, i16 3196, i16 -16069, i16 3196, i16 -16069>) #6
  %100 = add <4 x i32> %99, <i32 8192, i32 8192, i32 8192, i32 8192>
  %101 = ashr <4 x i32> %100, <i32 14, i32 14, i32 14, i32 14>
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %98, <8 x i16> <i16 3196, i16 -16069, i16 3196, i16 -16069, i16 3196, i16 -16069, i16 3196, i16 -16069>) #6
  %103 = add <4 x i32> %102, <i32 8192, i32 8192, i32 8192, i32 8192>
  %104 = ashr <4 x i32> %103, <i32 14, i32 14, i32 14, i32 14>
  %105 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %101, <4 x i32> %104) #6
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %97, <8 x i16> <i16 16069, i16 3196, i16 16069, i16 3196, i16 16069, i16 3196, i16 16069, i16 3196>) #6
  %107 = add <4 x i32> %106, <i32 8192, i32 8192, i32 8192, i32 8192>
  %108 = ashr <4 x i32> %107, <i32 14, i32 14, i32 14, i32 14>
  %109 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %98, <8 x i16> <i16 16069, i16 3196, i16 16069, i16 3196, i16 16069, i16 3196, i16 16069, i16 3196>) #6
  %110 = add <4 x i32> %109, <i32 8192, i32 8192, i32 8192, i32 8192>
  %111 = ashr <4 x i32> %110, <i32 14, i32 14, i32 14, i32 14>
  %112 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %108, <4 x i32> %111) #6
  %113 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 10
  %114 = bitcast <2 x i64>* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 16
  %116 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 6
  %117 = bitcast <2 x i64>* %116 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 16
  %119 = shufflevector <8 x i16> %115, <8 x i16> %118, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %120 = shufflevector <8 x i16> %115, <8 x i16> %118, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %121 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> <i16 13623, i16 -9102, i16 13623, i16 -9102, i16 13623, i16 -9102, i16 13623, i16 -9102>) #6
  %122 = add <4 x i32> %121, <i32 8192, i32 8192, i32 8192, i32 8192>
  %123 = ashr <4 x i32> %122, <i32 14, i32 14, i32 14, i32 14>
  %124 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %120, <8 x i16> <i16 13623, i16 -9102, i16 13623, i16 -9102, i16 13623, i16 -9102, i16 13623, i16 -9102>) #6
  %125 = add <4 x i32> %124, <i32 8192, i32 8192, i32 8192, i32 8192>
  %126 = ashr <4 x i32> %125, <i32 14, i32 14, i32 14, i32 14>
  %127 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %123, <4 x i32> %126) #6
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> <i16 9102, i16 13623, i16 9102, i16 13623, i16 9102, i16 13623, i16 9102, i16 13623>) #6
  %129 = add <4 x i32> %128, <i32 8192, i32 8192, i32 8192, i32 8192>
  %130 = ashr <4 x i32> %129, <i32 14, i32 14, i32 14, i32 14>
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %120, <8 x i16> <i16 9102, i16 13623, i16 9102, i16 13623, i16 9102, i16 13623, i16 9102, i16 13623>) #6
  %132 = add <4 x i32> %131, <i32 8192, i32 8192, i32 8192, i32 8192>
  %133 = ashr <4 x i32> %132, <i32 14, i32 14, i32 14, i32 14>
  %134 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %130, <4 x i32> %133) #6
  %135 = add <8 x i16> %39, %17
  %136 = sub <8 x i16> %17, %39
  %137 = sub <8 x i16> %83, %61
  %138 = add <8 x i16> %83, %61
  %139 = add <8 x i16> %90, %68
  %140 = sub <8 x i16> %90, %68
  %141 = sub <8 x i16> %24, %46
  %142 = add <8 x i16> %46, %24
  %143 = bitcast <2 x i64>* %0 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 16
  %145 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 8
  %146 = bitcast <2 x i64>* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 16
  %148 = shufflevector <8 x i16> %144, <8 x i16> %147, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %149 = shufflevector <8 x i16> %144, <8 x i16> %147, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %150 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %148, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %151 = add <4 x i32> %150, <i32 8192, i32 8192, i32 8192, i32 8192>
  %152 = ashr <4 x i32> %151, <i32 14, i32 14, i32 14, i32 14>
  %153 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %149, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %154 = add <4 x i32> %153, <i32 8192, i32 8192, i32 8192, i32 8192>
  %155 = ashr <4 x i32> %154, <i32 14, i32 14, i32 14, i32 14>
  %156 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %152, <4 x i32> %155) #6
  %157 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %148, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %158 = add <4 x i32> %157, <i32 8192, i32 8192, i32 8192, i32 8192>
  %159 = ashr <4 x i32> %158, <i32 14, i32 14, i32 14, i32 14>
  %160 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %149, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %161 = add <4 x i32> %160, <i32 8192, i32 8192, i32 8192, i32 8192>
  %162 = ashr <4 x i32> %161, <i32 14, i32 14, i32 14, i32 14>
  %163 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %159, <4 x i32> %162) #6
  %164 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 4
  %165 = bitcast <2 x i64>* %164 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 16
  %167 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 12
  %168 = bitcast <2 x i64>* %167 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 16
  %170 = shufflevector <8 x i16> %166, <8 x i16> %169, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %171 = shufflevector <8 x i16> %166, <8 x i16> %169, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> <i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137>) #6
  %173 = add <4 x i32> %172, <i32 8192, i32 8192, i32 8192, i32 8192>
  %174 = ashr <4 x i32> %173, <i32 14, i32 14, i32 14, i32 14>
  %175 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> <i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137>) #6
  %176 = add <4 x i32> %175, <i32 8192, i32 8192, i32 8192, i32 8192>
  %177 = ashr <4 x i32> %176, <i32 14, i32 14, i32 14, i32 14>
  %178 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %174, <4 x i32> %177) #6
  %179 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> <i16 15137, i16 6270, i16 15137, i16 6270, i16 15137, i16 6270, i16 15137, i16 6270>) #6
  %180 = add <4 x i32> %179, <i32 8192, i32 8192, i32 8192, i32 8192>
  %181 = ashr <4 x i32> %180, <i32 14, i32 14, i32 14, i32 14>
  %182 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> <i16 15137, i16 6270, i16 15137, i16 6270, i16 15137, i16 6270, i16 15137, i16 6270>) #6
  %183 = add <4 x i32> %182, <i32 8192, i32 8192, i32 8192, i32 8192>
  %184 = ashr <4 x i32> %183, <i32 14, i32 14, i32 14, i32 14>
  %185 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %181, <4 x i32> %184) #6
  %186 = shufflevector <8 x i16> %141, <8 x i16> %136, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %187 = shufflevector <8 x i16> %141, <8 x i16> %136, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %188 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %186, <8 x i16> <i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137>) #6
  %189 = add <4 x i32> %188, <i32 8192, i32 8192, i32 8192, i32 8192>
  %190 = ashr <4 x i32> %189, <i32 14, i32 14, i32 14, i32 14>
  %191 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %187, <8 x i16> <i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137>) #6
  %192 = add <4 x i32> %191, <i32 8192, i32 8192, i32 8192, i32 8192>
  %193 = ashr <4 x i32> %192, <i32 14, i32 14, i32 14, i32 14>
  %194 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %190, <4 x i32> %193) #6
  %195 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %186, <8 x i16> <i16 15137, i16 6270, i16 15137, i16 6270, i16 15137, i16 6270, i16 15137, i16 6270>) #6
  %196 = add <4 x i32> %195, <i32 8192, i32 8192, i32 8192, i32 8192>
  %197 = ashr <4 x i32> %196, <i32 14, i32 14, i32 14, i32 14>
  %198 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %187, <8 x i16> <i16 15137, i16 6270, i16 15137, i16 6270, i16 15137, i16 6270, i16 15137, i16 6270>) #6
  %199 = add <4 x i32> %198, <i32 8192, i32 8192, i32 8192, i32 8192>
  %200 = ashr <4 x i32> %199, <i32 14, i32 14, i32 14, i32 14>
  %201 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %197, <4 x i32> %200) #6
  %202 = shufflevector <8 x i16> %137, <8 x i16> %140, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %203 = shufflevector <8 x i16> %137, <8 x i16> %140, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %204 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %202, <8 x i16> <i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270>) #6
  %205 = add <4 x i32> %204, <i32 8192, i32 8192, i32 8192, i32 8192>
  %206 = ashr <4 x i32> %205, <i32 14, i32 14, i32 14, i32 14>
  %207 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %203, <8 x i16> <i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270>) #6
  %208 = add <4 x i32> %207, <i32 8192, i32 8192, i32 8192, i32 8192>
  %209 = ashr <4 x i32> %208, <i32 14, i32 14, i32 14, i32 14>
  %210 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %206, <4 x i32> %209) #6
  %211 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %202, <8 x i16> <i16 -6270, i16 -15137, i16 -6270, i16 -15137, i16 -6270, i16 -15137, i16 -6270, i16 -15137>) #6
  %212 = add <4 x i32> %211, <i32 8192, i32 8192, i32 8192, i32 8192>
  %213 = ashr <4 x i32> %212, <i32 14, i32 14, i32 14, i32 14>
  %214 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %203, <8 x i16> <i16 -6270, i16 -15137, i16 -6270, i16 -15137, i16 -6270, i16 -15137, i16 -6270, i16 -15137>) #6
  %215 = add <4 x i32> %214, <i32 8192, i32 8192, i32 8192, i32 8192>
  %216 = ashr <4 x i32> %215, <i32 14, i32 14, i32 14, i32 14>
  %217 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %213, <4 x i32> %216) #6
  %218 = sub <8 x i16> %105, %127
  %219 = add <8 x i16> %127, %105
  %220 = sub <8 x i16> %112, %134
  %221 = add <8 x i16> %134, %112
  %222 = add <8 x i16> %185, %163
  %223 = add <8 x i16> %178, %156
  %224 = sub <8 x i16> %156, %178
  %225 = sub <8 x i16> %163, %185
  %226 = shufflevector <8 x i16> %220, <8 x i16> %218, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %227 = shufflevector <8 x i16> %220, <8 x i16> %218, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %228 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %226, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %229 = add <4 x i32> %228, <i32 8192, i32 8192, i32 8192, i32 8192>
  %230 = ashr <4 x i32> %229, <i32 14, i32 14, i32 14, i32 14>
  %231 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %227, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %232 = add <4 x i32> %231, <i32 8192, i32 8192, i32 8192, i32 8192>
  %233 = ashr <4 x i32> %232, <i32 14, i32 14, i32 14, i32 14>
  %234 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %230, <4 x i32> %233) #6
  %235 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %226, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %236 = add <4 x i32> %235, <i32 8192, i32 8192, i32 8192, i32 8192>
  %237 = ashr <4 x i32> %236, <i32 14, i32 14, i32 14, i32 14>
  %238 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %227, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %239 = add <4 x i32> %238, <i32 8192, i32 8192, i32 8192, i32 8192>
  %240 = ashr <4 x i32> %239, <i32 14, i32 14, i32 14, i32 14>
  %241 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %237, <4 x i32> %240) #6
  %242 = add <8 x i16> %138, %135
  %243 = add <8 x i16> %217, %194
  %244 = sub <8 x i16> %194, %217
  %245 = sub <8 x i16> %135, %138
  %246 = sub <8 x i16> %142, %139
  %247 = sub <8 x i16> %201, %210
  %248 = add <8 x i16> %210, %201
  %249 = add <8 x i16> %139, %142
  %250 = add <8 x i16> %222, %221
  %251 = add <8 x i16> %241, %223
  %252 = add <8 x i16> %234, %224
  %253 = add <8 x i16> %225, %219
  %254 = sub <8 x i16> %225, %219
  %255 = sub <8 x i16> %224, %234
  %256 = sub <8 x i16> %223, %241
  %257 = sub <8 x i16> %222, %221
  %258 = shufflevector <8 x i16> %247, <8 x i16> %244, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %259 = shufflevector <8 x i16> %247, <8 x i16> %244, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %260 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %258, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %261 = add <4 x i32> %260, <i32 8192, i32 8192, i32 8192, i32 8192>
  %262 = ashr <4 x i32> %261, <i32 14, i32 14, i32 14, i32 14>
  %263 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %259, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %264 = add <4 x i32> %263, <i32 8192, i32 8192, i32 8192, i32 8192>
  %265 = ashr <4 x i32> %264, <i32 14, i32 14, i32 14, i32 14>
  %266 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %262, <4 x i32> %265) #6
  %267 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %258, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %268 = add <4 x i32> %267, <i32 8192, i32 8192, i32 8192, i32 8192>
  %269 = ashr <4 x i32> %268, <i32 14, i32 14, i32 14, i32 14>
  %270 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %259, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %271 = add <4 x i32> %270, <i32 8192, i32 8192, i32 8192, i32 8192>
  %272 = ashr <4 x i32> %271, <i32 14, i32 14, i32 14, i32 14>
  %273 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %269, <4 x i32> %272) #6
  %274 = shufflevector <8 x i16> %246, <8 x i16> %245, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %275 = shufflevector <8 x i16> %246, <8 x i16> %245, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %276 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %274, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %277 = add <4 x i32> %276, <i32 8192, i32 8192, i32 8192, i32 8192>
  %278 = ashr <4 x i32> %277, <i32 14, i32 14, i32 14, i32 14>
  %279 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %275, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %280 = add <4 x i32> %279, <i32 8192, i32 8192, i32 8192, i32 8192>
  %281 = ashr <4 x i32> %280, <i32 14, i32 14, i32 14, i32 14>
  %282 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %278, <4 x i32> %281) #6
  %283 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %274, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %284 = add <4 x i32> %283, <i32 8192, i32 8192, i32 8192, i32 8192>
  %285 = ashr <4 x i32> %284, <i32 14, i32 14, i32 14, i32 14>
  %286 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %275, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %287 = add <4 x i32> %286, <i32 8192, i32 8192, i32 8192, i32 8192>
  %288 = ashr <4 x i32> %287, <i32 14, i32 14, i32 14, i32 14>
  %289 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %285, <4 x i32> %288) #6
  %290 = add <8 x i16> %250, %249
  %291 = bitcast <2 x i64>* %1 to <8 x i16>*
  store <8 x i16> %290, <8 x i16>* %291, align 16
  %292 = add <8 x i16> %251, %248
  %293 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 1
  %294 = bitcast <2 x i64>* %293 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %294, align 16
  %295 = add <8 x i16> %273, %252
  %296 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 2
  %297 = bitcast <2 x i64>* %296 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %297, align 16
  %298 = add <8 x i16> %289, %253
  %299 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 3
  %300 = bitcast <2 x i64>* %299 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %300, align 16
  %301 = add <8 x i16> %282, %254
  %302 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 4
  %303 = bitcast <2 x i64>* %302 to <8 x i16>*
  store <8 x i16> %301, <8 x i16>* %303, align 16
  %304 = add <8 x i16> %266, %255
  %305 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 5
  %306 = bitcast <2 x i64>* %305 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %306, align 16
  %307 = add <8 x i16> %256, %243
  %308 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 6
  %309 = bitcast <2 x i64>* %308 to <8 x i16>*
  store <8 x i16> %307, <8 x i16>* %309, align 16
  %310 = add <8 x i16> %257, %242
  %311 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 7
  %312 = bitcast <2 x i64>* %311 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %312, align 16
  %313 = sub <8 x i16> %257, %242
  %314 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 8
  %315 = bitcast <2 x i64>* %314 to <8 x i16>*
  store <8 x i16> %313, <8 x i16>* %315, align 16
  %316 = sub <8 x i16> %256, %243
  %317 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 9
  %318 = bitcast <2 x i64>* %317 to <8 x i16>*
  store <8 x i16> %316, <8 x i16>* %318, align 16
  %319 = sub <8 x i16> %255, %266
  %320 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 10
  %321 = bitcast <2 x i64>* %320 to <8 x i16>*
  store <8 x i16> %319, <8 x i16>* %321, align 16
  %322 = sub <8 x i16> %254, %282
  %323 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 11
  %324 = bitcast <2 x i64>* %323 to <8 x i16>*
  store <8 x i16> %322, <8 x i16>* %324, align 16
  %325 = sub <8 x i16> %253, %289
  %326 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 12
  %327 = bitcast <2 x i64>* %326 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %327, align 16
  %328 = sub <8 x i16> %252, %273
  %329 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 13
  %330 = bitcast <2 x i64>* %329 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %330, align 16
  %331 = sub <8 x i16> %251, %248
  %332 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 14
  %333 = bitcast <2 x i64>* %332 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %333, align 16
  %334 = sub <8 x i16> %250, %249
  %335 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 15
  %336 = bitcast <2 x i64>* %335 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %336, align 16
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @highbd_idct16_4col(<2 x i64>*) unnamed_addr #2 {
  %2 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 1
  %3 = bitcast <2 x i64>* %2 to <4 x i32>*
  %4 = load <4 x i32>, <4 x i32>* %3, align 16
  %5 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 15
  %6 = bitcast <2 x i64>* %5 to <4 x i32>*
  %7 = load <4 x i32>, <4 x i32>* %6, align 16
  %8 = ashr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %9 = xor <4 x i32> %8, %4
  %10 = sub <4 x i32> %9, %8
  %11 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %16 = bitcast <4 x i32> %15 to <2 x i64>
  %17 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = ashr <4 x i32> %7, <i32 31, i32 31, i32 31, i32 31>
  %20 = xor <4 x i32> %19, %7
  %21 = sub <4 x i32> %20, %19
  %22 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %23 = bitcast <4 x i32> %22 to <2 x i64>
  %24 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %25 = bitcast <4 x i32> %24 to <2 x i64>
  %26 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %27 = bitcast <4 x i32> %26 to <2 x i64>
  %28 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = and <2 x i64> %18, <i64 4294967295, i64 4294967295>
  %31 = mul nuw nsw <2 x i64> %30, <i64 65220, i64 65220>
  %32 = xor <2 x i64> %31, %14
  %33 = and <2 x i64> %16, <i64 4294967295, i64 4294967295>
  %34 = mul nuw nsw <2 x i64> %33, <i64 65220, i64 65220>
  %35 = xor <2 x i64> %34, %12
  %36 = mul nuw nsw <2 x i64> %30, <i64 6424, i64 6424>
  %37 = xor <2 x i64> %36, %14
  %38 = mul nuw nsw <2 x i64> %33, <i64 6424, i64 6424>
  %39 = xor <2 x i64> %38, %12
  %40 = and <2 x i64> %29, <i64 4294967295, i64 4294967295>
  %41 = mul nuw nsw <2 x i64> %40, <i64 6424, i64 6424>
  %42 = xor <2 x i64> %41, %25
  %43 = and <2 x i64> %27, <i64 4294967295, i64 4294967295>
  %44 = mul nuw nsw <2 x i64> %43, <i64 6424, i64 6424>
  %45 = xor <2 x i64> %44, %23
  %46 = mul nuw nsw <2 x i64> %40, <i64 65220, i64 65220>
  %47 = xor <2 x i64> %46, %25
  %48 = mul nuw nsw <2 x i64> %43, <i64 65220, i64 65220>
  %49 = xor <2 x i64> %48, %23
  %50 = sub <2 x i64> <i64 32768, i64 32768>, %14
  %51 = add <2 x i64> %50, %25
  %52 = add <2 x i64> %51, %37
  %53 = sub <2 x i64> %52, %47
  %54 = bitcast <2 x i64> %53 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %56 = sub <2 x i64> <i64 32768, i64 32768>, %12
  %57 = add <2 x i64> %56, %23
  %58 = add <2 x i64> %57, %39
  %59 = sub <2 x i64> %58, %49
  %60 = bitcast <2 x i64> %59 to <16 x i8>
  %61 = shufflevector <16 x i8> %60, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %62 = sub <2 x i64> %50, %25
  %63 = add <2 x i64> %62, %32
  %64 = add <2 x i64> %63, %42
  %65 = bitcast <2 x i64> %64 to <16 x i8>
  %66 = shufflevector <16 x i8> %65, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %67 = sub <2 x i64> %56, %23
  %68 = add <2 x i64> %67, %35
  %69 = add <2 x i64> %68, %45
  %70 = bitcast <2 x i64> %69 to <16 x i8>
  %71 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %72 = bitcast <16 x i8> %55 to <4 x i32>
  %73 = bitcast <16 x i8> %61 to <4 x i32>
  %74 = shufflevector <4 x i32> %72, <4 x i32> %73, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %75 = shufflevector <4 x i32> %72, <4 x i32> %73, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %76 = shufflevector <4 x i32> %74, <4 x i32> %75, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %77 = bitcast <16 x i8> %66 to <4 x i32>
  %78 = bitcast <16 x i8> %71 to <4 x i32>
  %79 = shufflevector <4 x i32> %77, <4 x i32> %78, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %80 = shufflevector <4 x i32> %77, <4 x i32> %78, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %81 = shufflevector <4 x i32> %79, <4 x i32> %80, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %82 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 9
  %83 = bitcast <2 x i64>* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 16
  %85 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 7
  %86 = bitcast <2 x i64>* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 16
  %88 = ashr <4 x i32> %84, <i32 31, i32 31, i32 31, i32 31>
  %89 = xor <4 x i32> %88, %84
  %90 = sub <4 x i32> %89, %88
  %91 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %92 = bitcast <4 x i32> %91 to <2 x i64>
  %93 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %94 = bitcast <4 x i32> %93 to <2 x i64>
  %95 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %98 = bitcast <4 x i32> %97 to <2 x i64>
  %99 = ashr <4 x i32> %87, <i32 31, i32 31, i32 31, i32 31>
  %100 = xor <4 x i32> %99, %87
  %101 = sub <4 x i32> %100, %99
  %102 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %103 = bitcast <4 x i32> %102 to <2 x i64>
  %104 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %105 = bitcast <4 x i32> %104 to <2 x i64>
  %106 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %107 = bitcast <4 x i32> %106 to <2 x i64>
  %108 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %109 = bitcast <4 x i32> %108 to <2 x i64>
  %110 = and <2 x i64> %98, <i64 4294967295, i64 4294967295>
  %111 = mul nuw nsw <2 x i64> %110, <i64 41576, i64 41576>
  %112 = xor <2 x i64> %111, %94
  %113 = and <2 x i64> %96, <i64 4294967295, i64 4294967295>
  %114 = mul nuw nsw <2 x i64> %113, <i64 41576, i64 41576>
  %115 = xor <2 x i64> %114, %92
  %116 = mul nuw nsw <2 x i64> %110, <i64 50660, i64 50660>
  %117 = xor <2 x i64> %116, %94
  %118 = mul nuw nsw <2 x i64> %113, <i64 50660, i64 50660>
  %119 = xor <2 x i64> %118, %92
  %120 = and <2 x i64> %109, <i64 4294967295, i64 4294967295>
  %121 = mul nuw nsw <2 x i64> %120, <i64 50660, i64 50660>
  %122 = xor <2 x i64> %121, %105
  %123 = and <2 x i64> %107, <i64 4294967295, i64 4294967295>
  %124 = mul nuw nsw <2 x i64> %123, <i64 50660, i64 50660>
  %125 = xor <2 x i64> %124, %103
  %126 = mul nuw nsw <2 x i64> %120, <i64 41576, i64 41576>
  %127 = xor <2 x i64> %126, %105
  %128 = mul nuw nsw <2 x i64> %123, <i64 41576, i64 41576>
  %129 = xor <2 x i64> %128, %103
  %130 = sub <2 x i64> <i64 32768, i64 32768>, %94
  %131 = add <2 x i64> %130, %105
  %132 = add <2 x i64> %131, %117
  %133 = sub <2 x i64> %132, %127
  %134 = bitcast <2 x i64> %133 to <16 x i8>
  %135 = shufflevector <16 x i8> %134, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %136 = sub <2 x i64> <i64 32768, i64 32768>, %92
  %137 = add <2 x i64> %136, %103
  %138 = add <2 x i64> %137, %119
  %139 = sub <2 x i64> %138, %129
  %140 = bitcast <2 x i64> %139 to <16 x i8>
  %141 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %142 = sub <2 x i64> %130, %105
  %143 = add <2 x i64> %142, %112
  %144 = add <2 x i64> %143, %122
  %145 = bitcast <2 x i64> %144 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %147 = sub <2 x i64> %136, %103
  %148 = add <2 x i64> %147, %115
  %149 = add <2 x i64> %148, %125
  %150 = bitcast <2 x i64> %149 to <16 x i8>
  %151 = shufflevector <16 x i8> %150, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %152 = bitcast <16 x i8> %135 to <4 x i32>
  %153 = bitcast <16 x i8> %141 to <4 x i32>
  %154 = shufflevector <4 x i32> %152, <4 x i32> %153, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %155 = shufflevector <4 x i32> %152, <4 x i32> %153, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %156 = shufflevector <4 x i32> %154, <4 x i32> %155, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %157 = bitcast <16 x i8> %146 to <4 x i32>
  %158 = bitcast <16 x i8> %151 to <4 x i32>
  %159 = shufflevector <4 x i32> %157, <4 x i32> %158, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %160 = shufflevector <4 x i32> %157, <4 x i32> %158, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %161 = shufflevector <4 x i32> %159, <4 x i32> %160, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %162 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 5
  %163 = bitcast <2 x i64>* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 16
  %165 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 11
  %166 = bitcast <2 x i64>* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 16
  %168 = ashr <4 x i32> %164, <i32 31, i32 31, i32 31, i32 31>
  %169 = xor <4 x i32> %168, %164
  %170 = sub <4 x i32> %169, %168
  %171 = shufflevector <4 x i32> %168, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %172 = bitcast <4 x i32> %171 to <2 x i64>
  %173 = shufflevector <4 x i32> %168, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = shufflevector <4 x i32> %170, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %176 = bitcast <4 x i32> %175 to <2 x i64>
  %177 = shufflevector <4 x i32> %170, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %178 = bitcast <4 x i32> %177 to <2 x i64>
  %179 = ashr <4 x i32> %167, <i32 31, i32 31, i32 31, i32 31>
  %180 = xor <4 x i32> %179, %167
  %181 = sub <4 x i32> %180, %179
  %182 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %183 = bitcast <4 x i32> %182 to <2 x i64>
  %184 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %185 = bitcast <4 x i32> %184 to <2 x i64>
  %186 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %187 = bitcast <4 x i32> %186 to <2 x i64>
  %188 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %189 = bitcast <4 x i32> %188 to <2 x i64>
  %190 = and <2 x i64> %178, <i64 4294967295, i64 4294967295>
  %191 = mul nuw nsw <2 x i64> %190, <i64 57796, i64 57796>
  %192 = xor <2 x i64> %191, %174
  %193 = and <2 x i64> %176, <i64 4294967295, i64 4294967295>
  %194 = mul nuw nsw <2 x i64> %193, <i64 57796, i64 57796>
  %195 = xor <2 x i64> %194, %172
  %196 = mul nuw nsw <2 x i64> %190, <i64 30892, i64 30892>
  %197 = xor <2 x i64> %196, %174
  %198 = mul nuw nsw <2 x i64> %193, <i64 30892, i64 30892>
  %199 = xor <2 x i64> %198, %172
  %200 = and <2 x i64> %189, <i64 4294967295, i64 4294967295>
  %201 = mul nuw nsw <2 x i64> %200, <i64 30892, i64 30892>
  %202 = xor <2 x i64> %201, %185
  %203 = and <2 x i64> %187, <i64 4294967295, i64 4294967295>
  %204 = mul nuw nsw <2 x i64> %203, <i64 30892, i64 30892>
  %205 = xor <2 x i64> %204, %183
  %206 = mul nuw nsw <2 x i64> %200, <i64 57796, i64 57796>
  %207 = xor <2 x i64> %206, %185
  %208 = mul nuw nsw <2 x i64> %203, <i64 57796, i64 57796>
  %209 = xor <2 x i64> %208, %183
  %210 = sub <2 x i64> <i64 32768, i64 32768>, %174
  %211 = add <2 x i64> %210, %185
  %212 = add <2 x i64> %211, %197
  %213 = sub <2 x i64> %212, %207
  %214 = bitcast <2 x i64> %213 to <16 x i8>
  %215 = shufflevector <16 x i8> %214, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %216 = sub <2 x i64> <i64 32768, i64 32768>, %172
  %217 = add <2 x i64> %216, %183
  %218 = add <2 x i64> %217, %199
  %219 = sub <2 x i64> %218, %209
  %220 = bitcast <2 x i64> %219 to <16 x i8>
  %221 = shufflevector <16 x i8> %220, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %222 = sub <2 x i64> %210, %185
  %223 = add <2 x i64> %222, %192
  %224 = add <2 x i64> %223, %202
  %225 = bitcast <2 x i64> %224 to <16 x i8>
  %226 = shufflevector <16 x i8> %225, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %227 = sub <2 x i64> %216, %183
  %228 = add <2 x i64> %227, %195
  %229 = add <2 x i64> %228, %205
  %230 = bitcast <2 x i64> %229 to <16 x i8>
  %231 = shufflevector <16 x i8> %230, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %232 = bitcast <16 x i8> %215 to <4 x i32>
  %233 = bitcast <16 x i8> %221 to <4 x i32>
  %234 = shufflevector <4 x i32> %232, <4 x i32> %233, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %235 = shufflevector <4 x i32> %232, <4 x i32> %233, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %236 = shufflevector <4 x i32> %234, <4 x i32> %235, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %237 = bitcast <16 x i8> %226 to <4 x i32>
  %238 = bitcast <16 x i8> %231 to <4 x i32>
  %239 = shufflevector <4 x i32> %237, <4 x i32> %238, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %240 = shufflevector <4 x i32> %237, <4 x i32> %238, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %241 = shufflevector <4 x i32> %239, <4 x i32> %240, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %242 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 13
  %243 = bitcast <2 x i64>* %242 to <4 x i32>*
  %244 = load <4 x i32>, <4 x i32>* %243, align 16
  %245 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 3
  %246 = bitcast <2 x i64>* %245 to <4 x i32>*
  %247 = load <4 x i32>, <4 x i32>* %246, align 16
  %248 = ashr <4 x i32> %244, <i32 31, i32 31, i32 31, i32 31>
  %249 = xor <4 x i32> %248, %244
  %250 = sub <4 x i32> %249, %248
  %251 = shufflevector <4 x i32> %248, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %252 = bitcast <4 x i32> %251 to <2 x i64>
  %253 = shufflevector <4 x i32> %248, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %254 = bitcast <4 x i32> %253 to <2 x i64>
  %255 = shufflevector <4 x i32> %250, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %256 = bitcast <4 x i32> %255 to <2 x i64>
  %257 = shufflevector <4 x i32> %250, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %258 = bitcast <4 x i32> %257 to <2 x i64>
  %259 = ashr <4 x i32> %247, <i32 31, i32 31, i32 31, i32 31>
  %260 = xor <4 x i32> %259, %247
  %261 = sub <4 x i32> %260, %259
  %262 = shufflevector <4 x i32> %259, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %263 = bitcast <4 x i32> %262 to <2 x i64>
  %264 = shufflevector <4 x i32> %259, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %265 = bitcast <4 x i32> %264 to <2 x i64>
  %266 = shufflevector <4 x i32> %261, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %267 = bitcast <4 x i32> %266 to <2 x i64>
  %268 = shufflevector <4 x i32> %261, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %269 = bitcast <4 x i32> %268 to <2 x i64>
  %270 = and <2 x i64> %258, <i64 4294967295, i64 4294967295>
  %271 = mul nuw nsw <2 x i64> %270, <i64 19024, i64 19024>
  %272 = xor <2 x i64> %271, %254
  %273 = and <2 x i64> %256, <i64 4294967295, i64 4294967295>
  %274 = mul nuw nsw <2 x i64> %273, <i64 19024, i64 19024>
  %275 = xor <2 x i64> %274, %252
  %276 = mul nuw nsw <2 x i64> %270, <i64 62716, i64 62716>
  %277 = xor <2 x i64> %276, %254
  %278 = mul nuw nsw <2 x i64> %273, <i64 62716, i64 62716>
  %279 = xor <2 x i64> %278, %252
  %280 = and <2 x i64> %269, <i64 4294967295, i64 4294967295>
  %281 = mul nuw nsw <2 x i64> %280, <i64 62716, i64 62716>
  %282 = xor <2 x i64> %281, %265
  %283 = and <2 x i64> %267, <i64 4294967295, i64 4294967295>
  %284 = mul nuw nsw <2 x i64> %283, <i64 62716, i64 62716>
  %285 = xor <2 x i64> %284, %263
  %286 = mul nuw nsw <2 x i64> %280, <i64 19024, i64 19024>
  %287 = xor <2 x i64> %286, %265
  %288 = mul nuw nsw <2 x i64> %283, <i64 19024, i64 19024>
  %289 = xor <2 x i64> %288, %263
  %290 = sub <2 x i64> <i64 32768, i64 32768>, %254
  %291 = add <2 x i64> %290, %265
  %292 = add <2 x i64> %291, %277
  %293 = sub <2 x i64> %292, %287
  %294 = bitcast <2 x i64> %293 to <16 x i8>
  %295 = shufflevector <16 x i8> %294, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %296 = sub <2 x i64> <i64 32768, i64 32768>, %252
  %297 = add <2 x i64> %296, %263
  %298 = add <2 x i64> %297, %279
  %299 = sub <2 x i64> %298, %289
  %300 = bitcast <2 x i64> %299 to <16 x i8>
  %301 = shufflevector <16 x i8> %300, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %302 = sub <2 x i64> %290, %265
  %303 = add <2 x i64> %302, %272
  %304 = add <2 x i64> %303, %282
  %305 = bitcast <2 x i64> %304 to <16 x i8>
  %306 = shufflevector <16 x i8> %305, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %307 = sub <2 x i64> %296, %263
  %308 = add <2 x i64> %307, %275
  %309 = add <2 x i64> %308, %285
  %310 = bitcast <2 x i64> %309 to <16 x i8>
  %311 = shufflevector <16 x i8> %310, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %312 = bitcast <16 x i8> %295 to <4 x i32>
  %313 = bitcast <16 x i8> %301 to <4 x i32>
  %314 = shufflevector <4 x i32> %312, <4 x i32> %313, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %315 = shufflevector <4 x i32> %312, <4 x i32> %313, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %316 = shufflevector <4 x i32> %314, <4 x i32> %315, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %317 = bitcast <16 x i8> %306 to <4 x i32>
  %318 = bitcast <16 x i8> %311 to <4 x i32>
  %319 = shufflevector <4 x i32> %317, <4 x i32> %318, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %320 = shufflevector <4 x i32> %317, <4 x i32> %318, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %321 = shufflevector <4 x i32> %319, <4 x i32> %320, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %322 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 2
  %323 = bitcast <2 x i64>* %322 to <4 x i32>*
  %324 = load <4 x i32>, <4 x i32>* %323, align 16
  %325 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 14
  %326 = bitcast <2 x i64>* %325 to <4 x i32>*
  %327 = load <4 x i32>, <4 x i32>* %326, align 16
  %328 = ashr <4 x i32> %324, <i32 31, i32 31, i32 31, i32 31>
  %329 = xor <4 x i32> %328, %324
  %330 = sub <4 x i32> %329, %328
  %331 = shufflevector <4 x i32> %328, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %332 = bitcast <4 x i32> %331 to <2 x i64>
  %333 = shufflevector <4 x i32> %328, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %334 = bitcast <4 x i32> %333 to <2 x i64>
  %335 = shufflevector <4 x i32> %330, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %336 = bitcast <4 x i32> %335 to <2 x i64>
  %337 = shufflevector <4 x i32> %330, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %338 = bitcast <4 x i32> %337 to <2 x i64>
  %339 = ashr <4 x i32> %327, <i32 31, i32 31, i32 31, i32 31>
  %340 = xor <4 x i32> %339, %327
  %341 = sub <4 x i32> %340, %339
  %342 = shufflevector <4 x i32> %339, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %343 = bitcast <4 x i32> %342 to <2 x i64>
  %344 = shufflevector <4 x i32> %339, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %345 = bitcast <4 x i32> %344 to <2 x i64>
  %346 = shufflevector <4 x i32> %341, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %347 = bitcast <4 x i32> %346 to <2 x i64>
  %348 = shufflevector <4 x i32> %341, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %349 = bitcast <4 x i32> %348 to <2 x i64>
  %350 = and <2 x i64> %338, <i64 4294967295, i64 4294967295>
  %351 = mul nuw nsw <2 x i64> %350, <i64 64276, i64 64276>
  %352 = xor <2 x i64> %351, %334
  %353 = and <2 x i64> %336, <i64 4294967295, i64 4294967295>
  %354 = mul nuw nsw <2 x i64> %353, <i64 64276, i64 64276>
  %355 = xor <2 x i64> %354, %332
  %356 = mul nuw nsw <2 x i64> %350, <i64 12784, i64 12784>
  %357 = xor <2 x i64> %356, %334
  %358 = mul nuw nsw <2 x i64> %353, <i64 12784, i64 12784>
  %359 = xor <2 x i64> %358, %332
  %360 = and <2 x i64> %349, <i64 4294967295, i64 4294967295>
  %361 = mul nuw nsw <2 x i64> %360, <i64 12784, i64 12784>
  %362 = xor <2 x i64> %361, %345
  %363 = and <2 x i64> %347, <i64 4294967295, i64 4294967295>
  %364 = mul nuw nsw <2 x i64> %363, <i64 12784, i64 12784>
  %365 = xor <2 x i64> %364, %343
  %366 = mul nuw nsw <2 x i64> %360, <i64 64276, i64 64276>
  %367 = xor <2 x i64> %366, %345
  %368 = mul nuw nsw <2 x i64> %363, <i64 64276, i64 64276>
  %369 = xor <2 x i64> %368, %343
  %370 = sub <2 x i64> <i64 32768, i64 32768>, %334
  %371 = add <2 x i64> %370, %345
  %372 = add <2 x i64> %371, %357
  %373 = sub <2 x i64> %372, %367
  %374 = bitcast <2 x i64> %373 to <16 x i8>
  %375 = shufflevector <16 x i8> %374, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %376 = sub <2 x i64> <i64 32768, i64 32768>, %332
  %377 = add <2 x i64> %376, %343
  %378 = add <2 x i64> %377, %359
  %379 = sub <2 x i64> %378, %369
  %380 = bitcast <2 x i64> %379 to <16 x i8>
  %381 = shufflevector <16 x i8> %380, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %382 = sub <2 x i64> %370, %345
  %383 = add <2 x i64> %382, %352
  %384 = add <2 x i64> %383, %362
  %385 = bitcast <2 x i64> %384 to <16 x i8>
  %386 = shufflevector <16 x i8> %385, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %387 = sub <2 x i64> %376, %343
  %388 = add <2 x i64> %387, %355
  %389 = add <2 x i64> %388, %365
  %390 = bitcast <2 x i64> %389 to <16 x i8>
  %391 = shufflevector <16 x i8> %390, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %392 = bitcast <16 x i8> %375 to <4 x i32>
  %393 = bitcast <16 x i8> %381 to <4 x i32>
  %394 = shufflevector <4 x i32> %392, <4 x i32> %393, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %395 = shufflevector <4 x i32> %392, <4 x i32> %393, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %396 = shufflevector <4 x i32> %394, <4 x i32> %395, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %397 = bitcast <16 x i8> %386 to <4 x i32>
  %398 = bitcast <16 x i8> %391 to <4 x i32>
  %399 = shufflevector <4 x i32> %397, <4 x i32> %398, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %400 = shufflevector <4 x i32> %397, <4 x i32> %398, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %401 = shufflevector <4 x i32> %399, <4 x i32> %400, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %402 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 10
  %403 = bitcast <2 x i64>* %402 to <4 x i32>*
  %404 = load <4 x i32>, <4 x i32>* %403, align 16
  %405 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 6
  %406 = bitcast <2 x i64>* %405 to <4 x i32>*
  %407 = load <4 x i32>, <4 x i32>* %406, align 16
  %408 = ashr <4 x i32> %404, <i32 31, i32 31, i32 31, i32 31>
  %409 = xor <4 x i32> %408, %404
  %410 = sub <4 x i32> %409, %408
  %411 = shufflevector <4 x i32> %408, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %412 = bitcast <4 x i32> %411 to <2 x i64>
  %413 = shufflevector <4 x i32> %408, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %414 = bitcast <4 x i32> %413 to <2 x i64>
  %415 = shufflevector <4 x i32> %410, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %416 = bitcast <4 x i32> %415 to <2 x i64>
  %417 = shufflevector <4 x i32> %410, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %418 = bitcast <4 x i32> %417 to <2 x i64>
  %419 = ashr <4 x i32> %407, <i32 31, i32 31, i32 31, i32 31>
  %420 = xor <4 x i32> %419, %407
  %421 = sub <4 x i32> %420, %419
  %422 = shufflevector <4 x i32> %419, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %423 = bitcast <4 x i32> %422 to <2 x i64>
  %424 = shufflevector <4 x i32> %419, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %425 = bitcast <4 x i32> %424 to <2 x i64>
  %426 = shufflevector <4 x i32> %421, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %427 = bitcast <4 x i32> %426 to <2 x i64>
  %428 = shufflevector <4 x i32> %421, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %429 = bitcast <4 x i32> %428 to <2 x i64>
  %430 = and <2 x i64> %418, <i64 4294967295, i64 4294967295>
  %431 = mul nuw nsw <2 x i64> %430, <i64 36408, i64 36408>
  %432 = xor <2 x i64> %431, %414
  %433 = and <2 x i64> %416, <i64 4294967295, i64 4294967295>
  %434 = mul nuw nsw <2 x i64> %433, <i64 36408, i64 36408>
  %435 = xor <2 x i64> %434, %412
  %436 = mul nuw nsw <2 x i64> %430, <i64 54492, i64 54492>
  %437 = xor <2 x i64> %436, %414
  %438 = mul nuw nsw <2 x i64> %433, <i64 54492, i64 54492>
  %439 = xor <2 x i64> %438, %412
  %440 = and <2 x i64> %429, <i64 4294967295, i64 4294967295>
  %441 = mul nuw nsw <2 x i64> %440, <i64 54492, i64 54492>
  %442 = xor <2 x i64> %441, %425
  %443 = and <2 x i64> %427, <i64 4294967295, i64 4294967295>
  %444 = mul nuw nsw <2 x i64> %443, <i64 54492, i64 54492>
  %445 = xor <2 x i64> %444, %423
  %446 = mul nuw nsw <2 x i64> %440, <i64 36408, i64 36408>
  %447 = xor <2 x i64> %446, %425
  %448 = mul nuw nsw <2 x i64> %443, <i64 36408, i64 36408>
  %449 = xor <2 x i64> %448, %423
  %450 = sub <2 x i64> <i64 32768, i64 32768>, %414
  %451 = add <2 x i64> %450, %425
  %452 = add <2 x i64> %451, %437
  %453 = sub <2 x i64> %452, %447
  %454 = bitcast <2 x i64> %453 to <16 x i8>
  %455 = shufflevector <16 x i8> %454, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %456 = sub <2 x i64> <i64 32768, i64 32768>, %412
  %457 = add <2 x i64> %456, %423
  %458 = add <2 x i64> %457, %439
  %459 = sub <2 x i64> %458, %449
  %460 = bitcast <2 x i64> %459 to <16 x i8>
  %461 = shufflevector <16 x i8> %460, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %462 = sub <2 x i64> %450, %425
  %463 = add <2 x i64> %462, %432
  %464 = add <2 x i64> %463, %442
  %465 = bitcast <2 x i64> %464 to <16 x i8>
  %466 = shufflevector <16 x i8> %465, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %467 = sub <2 x i64> %456, %423
  %468 = add <2 x i64> %467, %435
  %469 = add <2 x i64> %468, %445
  %470 = bitcast <2 x i64> %469 to <16 x i8>
  %471 = shufflevector <16 x i8> %470, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %472 = bitcast <16 x i8> %455 to <4 x i32>
  %473 = bitcast <16 x i8> %461 to <4 x i32>
  %474 = shufflevector <4 x i32> %472, <4 x i32> %473, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %475 = shufflevector <4 x i32> %472, <4 x i32> %473, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %476 = shufflevector <4 x i32> %474, <4 x i32> %475, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %477 = bitcast <16 x i8> %466 to <4 x i32>
  %478 = bitcast <16 x i8> %471 to <4 x i32>
  %479 = shufflevector <4 x i32> %477, <4 x i32> %478, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %480 = shufflevector <4 x i32> %477, <4 x i32> %478, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %481 = shufflevector <4 x i32> %479, <4 x i32> %480, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %482 = add <4 x i32> %156, %76
  %483 = sub <4 x i32> %76, %156
  %484 = sub <4 x i32> %236, %316
  %485 = add <4 x i32> %316, %236
  %486 = add <4 x i32> %321, %241
  %487 = sub <4 x i32> %241, %321
  %488 = sub <4 x i32> %81, %161
  %489 = add <4 x i32> %161, %81
  %490 = bitcast <2 x i64>* %0 to <4 x i32>*
  %491 = load <4 x i32>, <4 x i32>* %490, align 16
  %492 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 8
  %493 = bitcast <2 x i64>* %492 to <4 x i32>*
  %494 = load <4 x i32>, <4 x i32>* %493, align 16
  %495 = add <4 x i32> %494, %491
  %496 = ashr <4 x i32> %495, <i32 31, i32 31, i32 31, i32 31>
  %497 = xor <4 x i32> %496, %495
  %498 = sub <4 x i32> %497, %496
  %499 = shufflevector <4 x i32> %496, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %500 = bitcast <4 x i32> %499 to <2 x i64>
  %501 = shufflevector <4 x i32> %496, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %502 = bitcast <4 x i32> %501 to <2 x i64>
  %503 = shufflevector <4 x i32> %498, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %504 = bitcast <4 x i32> %503 to <2 x i64>
  %505 = shufflevector <4 x i32> %498, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %506 = bitcast <4 x i32> %505 to <2 x i64>
  %507 = and <2 x i64> %506, <i64 4294967295, i64 4294967295>
  %508 = mul nuw nsw <2 x i64> %507, <i64 46340, i64 46340>
  %509 = xor <2 x i64> %508, %502
  %510 = and <2 x i64> %504, <i64 4294967295, i64 4294967295>
  %511 = mul nuw nsw <2 x i64> %510, <i64 46340, i64 46340>
  %512 = xor <2 x i64> %511, %500
  %513 = sub <2 x i64> <i64 32768, i64 32768>, %502
  %514 = add <2 x i64> %513, %509
  %515 = bitcast <2 x i64> %514 to <16 x i8>
  %516 = shufflevector <16 x i8> %515, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %517 = sub <2 x i64> <i64 32768, i64 32768>, %500
  %518 = add <2 x i64> %517, %512
  %519 = bitcast <2 x i64> %518 to <16 x i8>
  %520 = shufflevector <16 x i8> %519, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %521 = bitcast <16 x i8> %516 to <4 x i32>
  %522 = bitcast <16 x i8> %520 to <4 x i32>
  %523 = shufflevector <4 x i32> %521, <4 x i32> %522, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %524 = shufflevector <4 x i32> %521, <4 x i32> %522, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %525 = shufflevector <4 x i32> %523, <4 x i32> %524, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %526 = sub <4 x i32> %491, %494
  %527 = ashr <4 x i32> %526, <i32 31, i32 31, i32 31, i32 31>
  %528 = xor <4 x i32> %527, %526
  %529 = sub <4 x i32> %528, %527
  %530 = shufflevector <4 x i32> %527, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %531 = bitcast <4 x i32> %530 to <2 x i64>
  %532 = shufflevector <4 x i32> %527, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %533 = bitcast <4 x i32> %532 to <2 x i64>
  %534 = shufflevector <4 x i32> %529, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %535 = bitcast <4 x i32> %534 to <2 x i64>
  %536 = shufflevector <4 x i32> %529, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %537 = bitcast <4 x i32> %536 to <2 x i64>
  %538 = and <2 x i64> %537, <i64 4294967295, i64 4294967295>
  %539 = mul nuw nsw <2 x i64> %538, <i64 46340, i64 46340>
  %540 = xor <2 x i64> %539, %533
  %541 = and <2 x i64> %535, <i64 4294967295, i64 4294967295>
  %542 = mul nuw nsw <2 x i64> %541, <i64 46340, i64 46340>
  %543 = xor <2 x i64> %542, %531
  %544 = sub <2 x i64> <i64 32768, i64 32768>, %533
  %545 = add <2 x i64> %544, %540
  %546 = bitcast <2 x i64> %545 to <16 x i8>
  %547 = shufflevector <16 x i8> %546, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %548 = sub <2 x i64> <i64 32768, i64 32768>, %531
  %549 = add <2 x i64> %548, %543
  %550 = bitcast <2 x i64> %549 to <16 x i8>
  %551 = shufflevector <16 x i8> %550, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %552 = bitcast <16 x i8> %547 to <4 x i32>
  %553 = bitcast <16 x i8> %551 to <4 x i32>
  %554 = shufflevector <4 x i32> %552, <4 x i32> %553, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %555 = shufflevector <4 x i32> %552, <4 x i32> %553, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %556 = shufflevector <4 x i32> %554, <4 x i32> %555, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %557 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 4
  %558 = bitcast <2 x i64>* %557 to <4 x i32>*
  %559 = load <4 x i32>, <4 x i32>* %558, align 16
  %560 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 12
  %561 = bitcast <2 x i64>* %560 to <4 x i32>*
  %562 = load <4 x i32>, <4 x i32>* %561, align 16
  %563 = ashr <4 x i32> %559, <i32 31, i32 31, i32 31, i32 31>
  %564 = xor <4 x i32> %563, %559
  %565 = sub <4 x i32> %564, %563
  %566 = shufflevector <4 x i32> %563, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %567 = bitcast <4 x i32> %566 to <2 x i64>
  %568 = shufflevector <4 x i32> %563, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %569 = bitcast <4 x i32> %568 to <2 x i64>
  %570 = shufflevector <4 x i32> %565, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %571 = bitcast <4 x i32> %570 to <2 x i64>
  %572 = shufflevector <4 x i32> %565, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %573 = bitcast <4 x i32> %572 to <2 x i64>
  %574 = ashr <4 x i32> %562, <i32 31, i32 31, i32 31, i32 31>
  %575 = xor <4 x i32> %574, %562
  %576 = sub <4 x i32> %575, %574
  %577 = shufflevector <4 x i32> %574, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %578 = bitcast <4 x i32> %577 to <2 x i64>
  %579 = shufflevector <4 x i32> %574, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %580 = bitcast <4 x i32> %579 to <2 x i64>
  %581 = shufflevector <4 x i32> %576, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %582 = bitcast <4 x i32> %581 to <2 x i64>
  %583 = shufflevector <4 x i32> %576, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %584 = bitcast <4 x i32> %583 to <2 x i64>
  %585 = and <2 x i64> %573, <i64 4294967295, i64 4294967295>
  %586 = mul nuw nsw <2 x i64> %585, <i64 60548, i64 60548>
  %587 = xor <2 x i64> %586, %569
  %588 = and <2 x i64> %571, <i64 4294967295, i64 4294967295>
  %589 = mul nuw nsw <2 x i64> %588, <i64 60548, i64 60548>
  %590 = xor <2 x i64> %589, %567
  %591 = mul nuw nsw <2 x i64> %585, <i64 25080, i64 25080>
  %592 = xor <2 x i64> %591, %569
  %593 = mul nuw nsw <2 x i64> %588, <i64 25080, i64 25080>
  %594 = xor <2 x i64> %593, %567
  %595 = and <2 x i64> %584, <i64 4294967295, i64 4294967295>
  %596 = mul nuw nsw <2 x i64> %595, <i64 25080, i64 25080>
  %597 = xor <2 x i64> %596, %580
  %598 = and <2 x i64> %582, <i64 4294967295, i64 4294967295>
  %599 = mul nuw nsw <2 x i64> %598, <i64 25080, i64 25080>
  %600 = xor <2 x i64> %599, %578
  %601 = mul nuw nsw <2 x i64> %595, <i64 60548, i64 60548>
  %602 = xor <2 x i64> %601, %580
  %603 = mul nuw nsw <2 x i64> %598, <i64 60548, i64 60548>
  %604 = xor <2 x i64> %603, %578
  %605 = sub <2 x i64> <i64 32768, i64 32768>, %569
  %606 = add <2 x i64> %605, %580
  %607 = add <2 x i64> %606, %592
  %608 = sub <2 x i64> %607, %602
  %609 = bitcast <2 x i64> %608 to <16 x i8>
  %610 = shufflevector <16 x i8> %609, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %611 = sub <2 x i64> <i64 32768, i64 32768>, %567
  %612 = add <2 x i64> %611, %578
  %613 = add <2 x i64> %612, %594
  %614 = sub <2 x i64> %613, %604
  %615 = bitcast <2 x i64> %614 to <16 x i8>
  %616 = shufflevector <16 x i8> %615, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %617 = sub <2 x i64> %605, %580
  %618 = add <2 x i64> %617, %587
  %619 = add <2 x i64> %618, %597
  %620 = bitcast <2 x i64> %619 to <16 x i8>
  %621 = shufflevector <16 x i8> %620, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %622 = sub <2 x i64> %611, %578
  %623 = add <2 x i64> %622, %590
  %624 = add <2 x i64> %623, %600
  %625 = bitcast <2 x i64> %624 to <16 x i8>
  %626 = shufflevector <16 x i8> %625, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %627 = bitcast <16 x i8> %610 to <4 x i32>
  %628 = bitcast <16 x i8> %616 to <4 x i32>
  %629 = shufflevector <4 x i32> %627, <4 x i32> %628, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %630 = shufflevector <4 x i32> %627, <4 x i32> %628, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %631 = shufflevector <4 x i32> %629, <4 x i32> %630, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %632 = bitcast <16 x i8> %621 to <4 x i32>
  %633 = bitcast <16 x i8> %626 to <4 x i32>
  %634 = shufflevector <4 x i32> %632, <4 x i32> %633, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %635 = shufflevector <4 x i32> %632, <4 x i32> %633, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %636 = shufflevector <4 x i32> %634, <4 x i32> %635, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %637 = ashr <4 x i32> %488, <i32 31, i32 31, i32 31, i32 31>
  %638 = xor <4 x i32> %637, %488
  %639 = sub <4 x i32> %638, %637
  %640 = shufflevector <4 x i32> %637, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %641 = bitcast <4 x i32> %640 to <2 x i64>
  %642 = shufflevector <4 x i32> %637, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %643 = bitcast <4 x i32> %642 to <2 x i64>
  %644 = shufflevector <4 x i32> %639, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %645 = bitcast <4 x i32> %644 to <2 x i64>
  %646 = shufflevector <4 x i32> %639, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %647 = bitcast <4 x i32> %646 to <2 x i64>
  %648 = ashr <4 x i32> %483, <i32 31, i32 31, i32 31, i32 31>
  %649 = xor <4 x i32> %648, %483
  %650 = sub <4 x i32> %649, %648
  %651 = shufflevector <4 x i32> %648, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %652 = bitcast <4 x i32> %651 to <2 x i64>
  %653 = shufflevector <4 x i32> %648, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %654 = bitcast <4 x i32> %653 to <2 x i64>
  %655 = shufflevector <4 x i32> %650, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %656 = bitcast <4 x i32> %655 to <2 x i64>
  %657 = shufflevector <4 x i32> %650, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %658 = bitcast <4 x i32> %657 to <2 x i64>
  %659 = and <2 x i64> %647, <i64 4294967295, i64 4294967295>
  %660 = mul nuw nsw <2 x i64> %659, <i64 60548, i64 60548>
  %661 = xor <2 x i64> %660, %643
  %662 = and <2 x i64> %645, <i64 4294967295, i64 4294967295>
  %663 = mul nuw nsw <2 x i64> %662, <i64 60548, i64 60548>
  %664 = xor <2 x i64> %663, %641
  %665 = mul nuw nsw <2 x i64> %659, <i64 25080, i64 25080>
  %666 = xor <2 x i64> %665, %643
  %667 = mul nuw nsw <2 x i64> %662, <i64 25080, i64 25080>
  %668 = xor <2 x i64> %667, %641
  %669 = and <2 x i64> %658, <i64 4294967295, i64 4294967295>
  %670 = mul nuw nsw <2 x i64> %669, <i64 25080, i64 25080>
  %671 = xor <2 x i64> %670, %654
  %672 = and <2 x i64> %656, <i64 4294967295, i64 4294967295>
  %673 = mul nuw nsw <2 x i64> %672, <i64 25080, i64 25080>
  %674 = xor <2 x i64> %673, %652
  %675 = mul nuw nsw <2 x i64> %669, <i64 60548, i64 60548>
  %676 = xor <2 x i64> %675, %654
  %677 = mul nuw nsw <2 x i64> %672, <i64 60548, i64 60548>
  %678 = xor <2 x i64> %677, %652
  %679 = sub <2 x i64> <i64 32768, i64 32768>, %643
  %680 = add <2 x i64> %679, %654
  %681 = sub <2 x i64> %680, %676
  %682 = add <2 x i64> %681, %666
  %683 = bitcast <2 x i64> %682 to <16 x i8>
  %684 = shufflevector <16 x i8> %683, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %685 = sub <2 x i64> <i64 32768, i64 32768>, %641
  %686 = add <2 x i64> %685, %652
  %687 = sub <2 x i64> %686, %678
  %688 = add <2 x i64> %687, %668
  %689 = bitcast <2 x i64> %688 to <16 x i8>
  %690 = shufflevector <16 x i8> %689, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %691 = sub <2 x i64> %679, %654
  %692 = add <2 x i64> %691, %671
  %693 = add <2 x i64> %692, %661
  %694 = bitcast <2 x i64> %693 to <16 x i8>
  %695 = shufflevector <16 x i8> %694, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %696 = sub <2 x i64> %685, %652
  %697 = add <2 x i64> %696, %674
  %698 = add <2 x i64> %697, %664
  %699 = bitcast <2 x i64> %698 to <16 x i8>
  %700 = shufflevector <16 x i8> %699, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %701 = bitcast <16 x i8> %684 to <4 x i32>
  %702 = bitcast <16 x i8> %690 to <4 x i32>
  %703 = shufflevector <4 x i32> %701, <4 x i32> %702, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %704 = shufflevector <4 x i32> %701, <4 x i32> %702, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %705 = shufflevector <4 x i32> %703, <4 x i32> %704, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %706 = bitcast <16 x i8> %695 to <4 x i32>
  %707 = bitcast <16 x i8> %700 to <4 x i32>
  %708 = shufflevector <4 x i32> %706, <4 x i32> %707, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %709 = shufflevector <4 x i32> %706, <4 x i32> %707, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %710 = shufflevector <4 x i32> %708, <4 x i32> %709, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %711 = ashr <4 x i32> %484, <i32 31, i32 31, i32 31, i32 31>
  %712 = xor <4 x i32> %711, %484
  %713 = sub <4 x i32> %712, %711
  %714 = shufflevector <4 x i32> %711, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %715 = bitcast <4 x i32> %714 to <2 x i64>
  %716 = shufflevector <4 x i32> %711, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %717 = bitcast <4 x i32> %716 to <2 x i64>
  %718 = shufflevector <4 x i32> %713, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %719 = bitcast <4 x i32> %718 to <2 x i64>
  %720 = shufflevector <4 x i32> %713, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %721 = bitcast <4 x i32> %720 to <2 x i64>
  %722 = ashr <4 x i32> %487, <i32 31, i32 31, i32 31, i32 31>
  %723 = xor <4 x i32> %722, %487
  %724 = sub <4 x i32> %723, %722
  %725 = shufflevector <4 x i32> %722, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %726 = bitcast <4 x i32> %725 to <2 x i64>
  %727 = shufflevector <4 x i32> %722, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %728 = bitcast <4 x i32> %727 to <2 x i64>
  %729 = shufflevector <4 x i32> %724, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %730 = bitcast <4 x i32> %729 to <2 x i64>
  %731 = shufflevector <4 x i32> %724, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %732 = bitcast <4 x i32> %731 to <2 x i64>
  %733 = and <2 x i64> %721, <i64 4294967295, i64 4294967295>
  %734 = mul nuw nsw <2 x i64> %733, <i64 25080, i64 25080>
  %735 = xor <2 x i64> %734, %717
  %736 = and <2 x i64> %719, <i64 4294967295, i64 4294967295>
  %737 = mul nuw nsw <2 x i64> %736, <i64 25080, i64 25080>
  %738 = xor <2 x i64> %737, %715
  %739 = mul nuw nsw <2 x i64> %733, <i64 60548, i64 60548>
  %740 = xor <2 x i64> %739, %717
  %741 = mul nuw nsw <2 x i64> %736, <i64 60548, i64 60548>
  %742 = xor <2 x i64> %741, %715
  %743 = and <2 x i64> %732, <i64 4294967295, i64 4294967295>
  %744 = mul nuw nsw <2 x i64> %743, <i64 60548, i64 60548>
  %745 = xor <2 x i64> %744, %728
  %746 = and <2 x i64> %730, <i64 4294967295, i64 4294967295>
  %747 = mul nuw nsw <2 x i64> %746, <i64 60548, i64 60548>
  %748 = xor <2 x i64> %747, %726
  %749 = mul nuw nsw <2 x i64> %743, <i64 25080, i64 25080>
  %750 = xor <2 x i64> %749, %728
  %751 = mul nuw nsw <2 x i64> %746, <i64 25080, i64 25080>
  %752 = xor <2 x i64> %751, %726
  %753 = sub <2 x i64> <i64 32768, i64 32768>, %717
  %754 = add <2 x i64> %753, %728
  %755 = add <2 x i64> %754, %740
  %756 = sub <2 x i64> %755, %750
  %757 = bitcast <2 x i64> %756 to <16 x i8>
  %758 = shufflevector <16 x i8> %757, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %759 = sub <2 x i64> <i64 32768, i64 32768>, %715
  %760 = add <2 x i64> %759, %726
  %761 = add <2 x i64> %760, %742
  %762 = sub <2 x i64> %761, %752
  %763 = bitcast <2 x i64> %762 to <16 x i8>
  %764 = shufflevector <16 x i8> %763, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %765 = sub <2 x i64> %753, %728
  %766 = add <2 x i64> %765, %735
  %767 = add <2 x i64> %766, %745
  %768 = bitcast <2 x i64> %767 to <16 x i8>
  %769 = shufflevector <16 x i8> %768, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %770 = sub <2 x i64> %759, %726
  %771 = add <2 x i64> %770, %738
  %772 = add <2 x i64> %771, %748
  %773 = bitcast <2 x i64> %772 to <16 x i8>
  %774 = shufflevector <16 x i8> %773, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %775 = bitcast <16 x i8> %758 to <4 x i32>
  %776 = bitcast <16 x i8> %764 to <4 x i32>
  %777 = shufflevector <4 x i32> %775, <4 x i32> %776, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %778 = shufflevector <4 x i32> %775, <4 x i32> %776, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %779 = shufflevector <4 x i32> %777, <4 x i32> %778, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %780 = bitcast <16 x i8> %769 to <4 x i32>
  %781 = bitcast <16 x i8> %774 to <4 x i32>
  %782 = shufflevector <4 x i32> %780, <4 x i32> %781, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %783 = shufflevector <4 x i32> %780, <4 x i32> %781, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %784 = shufflevector <4 x i32> %782, <4 x i32> %783, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %785 = sub <4 x i32> %396, %476
  %786 = add <4 x i32> %476, %396
  %787 = sub <4 x i32> %401, %481
  %788 = add <4 x i32> %481, %401
  %789 = add <4 x i32> %636, %525
  %790 = add <4 x i32> %631, %556
  %791 = sub <4 x i32> %556, %631
  %792 = sub <4 x i32> %525, %636
  %793 = add <4 x i32> %787, %785
  %794 = ashr <4 x i32> %793, <i32 31, i32 31, i32 31, i32 31>
  %795 = xor <4 x i32> %794, %793
  %796 = sub <4 x i32> %795, %794
  %797 = shufflevector <4 x i32> %794, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %798 = bitcast <4 x i32> %797 to <2 x i64>
  %799 = shufflevector <4 x i32> %794, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %800 = bitcast <4 x i32> %799 to <2 x i64>
  %801 = shufflevector <4 x i32> %796, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %802 = bitcast <4 x i32> %801 to <2 x i64>
  %803 = shufflevector <4 x i32> %796, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %804 = bitcast <4 x i32> %803 to <2 x i64>
  %805 = and <2 x i64> %804, <i64 4294967295, i64 4294967295>
  %806 = mul nuw nsw <2 x i64> %805, <i64 46340, i64 46340>
  %807 = xor <2 x i64> %806, %800
  %808 = and <2 x i64> %802, <i64 4294967295, i64 4294967295>
  %809 = mul nuw nsw <2 x i64> %808, <i64 46340, i64 46340>
  %810 = xor <2 x i64> %809, %798
  %811 = sub <2 x i64> <i64 32768, i64 32768>, %800
  %812 = add <2 x i64> %811, %807
  %813 = bitcast <2 x i64> %812 to <16 x i8>
  %814 = shufflevector <16 x i8> %813, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %815 = sub <2 x i64> <i64 32768, i64 32768>, %798
  %816 = add <2 x i64> %815, %810
  %817 = bitcast <2 x i64> %816 to <16 x i8>
  %818 = shufflevector <16 x i8> %817, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %819 = bitcast <16 x i8> %814 to <4 x i32>
  %820 = bitcast <16 x i8> %818 to <4 x i32>
  %821 = shufflevector <4 x i32> %819, <4 x i32> %820, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %822 = shufflevector <4 x i32> %819, <4 x i32> %820, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %823 = shufflevector <4 x i32> %821, <4 x i32> %822, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %824 = sub <4 x i32> %787, %785
  %825 = ashr <4 x i32> %824, <i32 31, i32 31, i32 31, i32 31>
  %826 = xor <4 x i32> %825, %824
  %827 = sub <4 x i32> %826, %825
  %828 = shufflevector <4 x i32> %825, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %829 = bitcast <4 x i32> %828 to <2 x i64>
  %830 = shufflevector <4 x i32> %825, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %831 = bitcast <4 x i32> %830 to <2 x i64>
  %832 = shufflevector <4 x i32> %827, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %833 = bitcast <4 x i32> %832 to <2 x i64>
  %834 = shufflevector <4 x i32> %827, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %835 = bitcast <4 x i32> %834 to <2 x i64>
  %836 = and <2 x i64> %835, <i64 4294967295, i64 4294967295>
  %837 = mul nuw nsw <2 x i64> %836, <i64 46340, i64 46340>
  %838 = xor <2 x i64> %837, %831
  %839 = and <2 x i64> %833, <i64 4294967295, i64 4294967295>
  %840 = mul nuw nsw <2 x i64> %839, <i64 46340, i64 46340>
  %841 = xor <2 x i64> %840, %829
  %842 = sub <2 x i64> <i64 32768, i64 32768>, %831
  %843 = add <2 x i64> %842, %838
  %844 = bitcast <2 x i64> %843 to <16 x i8>
  %845 = shufflevector <16 x i8> %844, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %846 = sub <2 x i64> <i64 32768, i64 32768>, %829
  %847 = add <2 x i64> %846, %841
  %848 = bitcast <2 x i64> %847 to <16 x i8>
  %849 = shufflevector <16 x i8> %848, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %850 = bitcast <16 x i8> %845 to <4 x i32>
  %851 = bitcast <16 x i8> %849 to <4 x i32>
  %852 = shufflevector <4 x i32> %850, <4 x i32> %851, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %853 = shufflevector <4 x i32> %850, <4 x i32> %851, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %854 = shufflevector <4 x i32> %852, <4 x i32> %853, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %855 = add <4 x i32> %485, %482
  %856 = add <4 x i32> %784, %705
  %857 = sub <4 x i32> %705, %784
  %858 = sub <4 x i32> %482, %485
  %859 = sub <4 x i32> %489, %486
  %860 = sub <4 x i32> %710, %779
  %861 = add <4 x i32> %779, %710
  %862 = add <4 x i32> %486, %489
  %863 = add <4 x i32> %789, %788
  %864 = add <4 x i32> %823, %790
  %865 = add <4 x i32> %854, %791
  %866 = add <4 x i32> %792, %786
  %867 = sub <4 x i32> %792, %786
  %868 = sub <4 x i32> %791, %854
  %869 = sub <4 x i32> %790, %823
  %870 = sub <4 x i32> %789, %788
  %871 = add <4 x i32> %857, %860
  %872 = ashr <4 x i32> %871, <i32 31, i32 31, i32 31, i32 31>
  %873 = xor <4 x i32> %872, %871
  %874 = sub <4 x i32> %873, %872
  %875 = shufflevector <4 x i32> %872, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %876 = bitcast <4 x i32> %875 to <2 x i64>
  %877 = shufflevector <4 x i32> %872, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %878 = bitcast <4 x i32> %877 to <2 x i64>
  %879 = shufflevector <4 x i32> %874, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %880 = bitcast <4 x i32> %879 to <2 x i64>
  %881 = shufflevector <4 x i32> %874, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %882 = bitcast <4 x i32> %881 to <2 x i64>
  %883 = and <2 x i64> %882, <i64 4294967295, i64 4294967295>
  %884 = mul nuw nsw <2 x i64> %883, <i64 46340, i64 46340>
  %885 = xor <2 x i64> %884, %878
  %886 = and <2 x i64> %880, <i64 4294967295, i64 4294967295>
  %887 = mul nuw nsw <2 x i64> %886, <i64 46340, i64 46340>
  %888 = xor <2 x i64> %887, %876
  %889 = sub <2 x i64> <i64 32768, i64 32768>, %878
  %890 = add <2 x i64> %889, %885
  %891 = bitcast <2 x i64> %890 to <16 x i8>
  %892 = shufflevector <16 x i8> %891, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %893 = sub <2 x i64> <i64 32768, i64 32768>, %876
  %894 = add <2 x i64> %893, %888
  %895 = bitcast <2 x i64> %894 to <16 x i8>
  %896 = shufflevector <16 x i8> %895, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %897 = bitcast <16 x i8> %892 to <4 x i32>
  %898 = bitcast <16 x i8> %896 to <4 x i32>
  %899 = shufflevector <4 x i32> %897, <4 x i32> %898, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %900 = shufflevector <4 x i32> %897, <4 x i32> %898, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %901 = shufflevector <4 x i32> %899, <4 x i32> %900, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %902 = sub <4 x i32> %860, %857
  %903 = ashr <4 x i32> %902, <i32 31, i32 31, i32 31, i32 31>
  %904 = xor <4 x i32> %903, %902
  %905 = sub <4 x i32> %904, %903
  %906 = shufflevector <4 x i32> %903, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %907 = bitcast <4 x i32> %906 to <2 x i64>
  %908 = shufflevector <4 x i32> %903, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %909 = bitcast <4 x i32> %908 to <2 x i64>
  %910 = shufflevector <4 x i32> %905, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %911 = bitcast <4 x i32> %910 to <2 x i64>
  %912 = shufflevector <4 x i32> %905, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %913 = bitcast <4 x i32> %912 to <2 x i64>
  %914 = and <2 x i64> %913, <i64 4294967295, i64 4294967295>
  %915 = mul nuw nsw <2 x i64> %914, <i64 46340, i64 46340>
  %916 = xor <2 x i64> %915, %909
  %917 = and <2 x i64> %911, <i64 4294967295, i64 4294967295>
  %918 = mul nuw nsw <2 x i64> %917, <i64 46340, i64 46340>
  %919 = xor <2 x i64> %918, %907
  %920 = sub <2 x i64> <i64 32768, i64 32768>, %909
  %921 = add <2 x i64> %920, %916
  %922 = bitcast <2 x i64> %921 to <16 x i8>
  %923 = shufflevector <16 x i8> %922, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %924 = sub <2 x i64> <i64 32768, i64 32768>, %907
  %925 = add <2 x i64> %924, %919
  %926 = bitcast <2 x i64> %925 to <16 x i8>
  %927 = shufflevector <16 x i8> %926, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %928 = bitcast <16 x i8> %923 to <4 x i32>
  %929 = bitcast <16 x i8> %927 to <4 x i32>
  %930 = shufflevector <4 x i32> %928, <4 x i32> %929, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %931 = shufflevector <4 x i32> %928, <4 x i32> %929, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %932 = shufflevector <4 x i32> %930, <4 x i32> %931, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %933 = add <4 x i32> %859, %858
  %934 = ashr <4 x i32> %933, <i32 31, i32 31, i32 31, i32 31>
  %935 = xor <4 x i32> %934, %933
  %936 = sub <4 x i32> %935, %934
  %937 = shufflevector <4 x i32> %934, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %938 = bitcast <4 x i32> %937 to <2 x i64>
  %939 = shufflevector <4 x i32> %934, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %940 = bitcast <4 x i32> %939 to <2 x i64>
  %941 = shufflevector <4 x i32> %936, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %942 = bitcast <4 x i32> %941 to <2 x i64>
  %943 = shufflevector <4 x i32> %936, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %944 = bitcast <4 x i32> %943 to <2 x i64>
  %945 = and <2 x i64> %944, <i64 4294967295, i64 4294967295>
  %946 = mul nuw nsw <2 x i64> %945, <i64 46340, i64 46340>
  %947 = xor <2 x i64> %946, %940
  %948 = and <2 x i64> %942, <i64 4294967295, i64 4294967295>
  %949 = mul nuw nsw <2 x i64> %948, <i64 46340, i64 46340>
  %950 = xor <2 x i64> %949, %938
  %951 = sub <2 x i64> <i64 32768, i64 32768>, %940
  %952 = add <2 x i64> %951, %947
  %953 = bitcast <2 x i64> %952 to <16 x i8>
  %954 = shufflevector <16 x i8> %953, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %955 = sub <2 x i64> <i64 32768, i64 32768>, %938
  %956 = add <2 x i64> %955, %950
  %957 = bitcast <2 x i64> %956 to <16 x i8>
  %958 = shufflevector <16 x i8> %957, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %959 = bitcast <16 x i8> %954 to <4 x i32>
  %960 = bitcast <16 x i8> %958 to <4 x i32>
  %961 = shufflevector <4 x i32> %959, <4 x i32> %960, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %962 = shufflevector <4 x i32> %959, <4 x i32> %960, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %963 = shufflevector <4 x i32> %961, <4 x i32> %962, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %964 = sub <4 x i32> %859, %858
  %965 = ashr <4 x i32> %964, <i32 31, i32 31, i32 31, i32 31>
  %966 = xor <4 x i32> %965, %964
  %967 = sub <4 x i32> %966, %965
  %968 = shufflevector <4 x i32> %965, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %969 = bitcast <4 x i32> %968 to <2 x i64>
  %970 = shufflevector <4 x i32> %965, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %971 = bitcast <4 x i32> %970 to <2 x i64>
  %972 = shufflevector <4 x i32> %967, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %973 = bitcast <4 x i32> %972 to <2 x i64>
  %974 = shufflevector <4 x i32> %967, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %975 = bitcast <4 x i32> %974 to <2 x i64>
  %976 = and <2 x i64> %975, <i64 4294967295, i64 4294967295>
  %977 = mul nuw nsw <2 x i64> %976, <i64 46340, i64 46340>
  %978 = xor <2 x i64> %977, %971
  %979 = and <2 x i64> %973, <i64 4294967295, i64 4294967295>
  %980 = mul nuw nsw <2 x i64> %979, <i64 46340, i64 46340>
  %981 = xor <2 x i64> %980, %969
  %982 = sub <2 x i64> <i64 32768, i64 32768>, %971
  %983 = add <2 x i64> %982, %978
  %984 = bitcast <2 x i64> %983 to <16 x i8>
  %985 = shufflevector <16 x i8> %984, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %986 = sub <2 x i64> <i64 32768, i64 32768>, %969
  %987 = add <2 x i64> %986, %981
  %988 = bitcast <2 x i64> %987 to <16 x i8>
  %989 = shufflevector <16 x i8> %988, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %990 = bitcast <16 x i8> %985 to <4 x i32>
  %991 = bitcast <16 x i8> %989 to <4 x i32>
  %992 = shufflevector <4 x i32> %990, <4 x i32> %991, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %993 = shufflevector <4 x i32> %990, <4 x i32> %991, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %994 = shufflevector <4 x i32> %992, <4 x i32> %993, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %995 = add <4 x i32> %863, %862
  store <4 x i32> %995, <4 x i32>* %490, align 16
  %996 = add <4 x i32> %864, %861
  store <4 x i32> %996, <4 x i32>* %3, align 16
  %997 = add <4 x i32> %901, %865
  store <4 x i32> %997, <4 x i32>* %323, align 16
  %998 = add <4 x i32> %963, %866
  store <4 x i32> %998, <4 x i32>* %246, align 16
  %999 = add <4 x i32> %994, %867
  store <4 x i32> %999, <4 x i32>* %558, align 16
  %1000 = add <4 x i32> %932, %868
  store <4 x i32> %1000, <4 x i32>* %163, align 16
  %1001 = add <4 x i32> %869, %856
  store <4 x i32> %1001, <4 x i32>* %406, align 16
  %1002 = add <4 x i32> %870, %855
  store <4 x i32> %1002, <4 x i32>* %86, align 16
  %1003 = sub <4 x i32> %870, %855
  store <4 x i32> %1003, <4 x i32>* %493, align 16
  %1004 = sub <4 x i32> %869, %856
  store <4 x i32> %1004, <4 x i32>* %83, align 16
  %1005 = sub <4 x i32> %868, %932
  store <4 x i32> %1005, <4 x i32>* %403, align 16
  %1006 = sub <4 x i32> %867, %994
  store <4 x i32> %1006, <4 x i32>* %166, align 16
  %1007 = sub <4 x i32> %866, %963
  store <4 x i32> %1007, <4 x i32>* %561, align 16
  %1008 = sub <4 x i32> %865, %901
  store <4 x i32> %1008, <4 x i32>* %243, align 16
  %1009 = sub <4 x i32> %864, %861
  store <4 x i32> %1009, <4 x i32>* %326, align 16
  %1010 = sub <4 x i32> %863, %862
  store <4 x i32> %1010, <4 x i32>* %6, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct16x16_38_add_sse2(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [16 x <2 x i64>], align 16
  %6 = alloca [16 x <2 x i64>], align 16
  %7 = alloca [16 x <2 x i64>], align 16
  %8 = alloca [2 x [16 x <2 x i64>]], align 16
  %9 = bitcast [16 x <2 x i64>]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false)
  %10 = icmp eq i32 %3, 8
  br i1 %10, label %11, label %230

11:                                               ; preds = %4
  %12 = bitcast [16 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %12) #6
  %13 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %14 = bitcast <2 x i64>* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 144, i1 false)
  %15 = bitcast [16 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %15) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 256, i1 false)
  %16 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %17 = bitcast i32* %0 to <4 x i32>*
  %18 = load <4 x i32>, <4 x i32>* %17, align 16
  %19 = getelementptr inbounds i32, i32* %0, i64 4
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 16
  %22 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %18, <4 x i32> %21) #6
  %23 = bitcast [16 x <2 x i64>]* %6 to <8 x i16>*
  store <8 x i16> %22, <8 x i16>* %23, align 16
  %24 = getelementptr inbounds i32, i32* %0, i64 16
  %25 = bitcast i32* %24 to <4 x i32>*
  %26 = load <4 x i32>, <4 x i32>* %25, align 16
  %27 = getelementptr inbounds i32, i32* %0, i64 20
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 16
  %30 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %26, <4 x i32> %29) #6
  %31 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  %32 = getelementptr inbounds i32, i32* %0, i64 32
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 16
  %35 = getelementptr inbounds i32, i32* %0, i64 36
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 16
  %38 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %34, <4 x i32> %37) #6
  %39 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  %40 = getelementptr inbounds i32, i32* %0, i64 48
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 16
  %43 = getelementptr inbounds i32, i32* %0, i64 52
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 16
  %46 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %42, <4 x i32> %45) #6
  %47 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  %48 = getelementptr inbounds i32, i32* %0, i64 64
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 16
  %51 = getelementptr inbounds i32, i32* %0, i64 68
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 16
  %54 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %50, <4 x i32> %53) #6
  %55 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  %56 = getelementptr inbounds i32, i32* %0, i64 80
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 16
  %59 = getelementptr inbounds i32, i32* %0, i64 84
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 16
  %62 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %58, <4 x i32> %61) #6
  %63 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  %64 = getelementptr inbounds i32, i32* %0, i64 96
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 16
  %67 = getelementptr inbounds i32, i32* %0, i64 100
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 16
  %70 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %66, <4 x i32> %69) #6
  %71 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  %72 = getelementptr inbounds i32, i32* %0, i64 112
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 16
  %75 = getelementptr inbounds i32, i32* %0, i64 116
  %76 = bitcast i32* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 16
  %78 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %74, <4 x i32> %77) #6
  %79 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %80 = shufflevector <8 x i16> %22, <8 x i16> %30, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %81 = shufflevector <8 x i16> %38, <8 x i16> %46, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %82 = shufflevector <8 x i16> %54, <8 x i16> %62, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %83 = shufflevector <8 x i16> %70, <8 x i16> %78, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %84 = shufflevector <8 x i16> %22, <8 x i16> %30, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %85 = shufflevector <8 x i16> %38, <8 x i16> %46, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %86 = shufflevector <8 x i16> %54, <8 x i16> %62, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %87 = shufflevector <8 x i16> %70, <8 x i16> %78, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %88 = bitcast <8 x i16> %80 to <4 x i32>
  %89 = bitcast <8 x i16> %81 to <4 x i32>
  %90 = shufflevector <4 x i32> %88, <4 x i32> %89, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %91 = bitcast <4 x i32> %90 to <2 x i64>
  %92 = bitcast <8 x i16> %82 to <4 x i32>
  %93 = bitcast <8 x i16> %83 to <4 x i32>
  %94 = shufflevector <4 x i32> %92, <4 x i32> %93, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %95 = bitcast <4 x i32> %94 to <2 x i64>
  %96 = bitcast <8 x i16> %84 to <4 x i32>
  %97 = bitcast <8 x i16> %85 to <4 x i32>
  %98 = shufflevector <4 x i32> %96, <4 x i32> %97, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %99 = bitcast <4 x i32> %98 to <2 x i64>
  %100 = bitcast <8 x i16> %86 to <4 x i32>
  %101 = bitcast <8 x i16> %87 to <4 x i32>
  %102 = shufflevector <4 x i32> %100, <4 x i32> %101, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %103 = bitcast <4 x i32> %102 to <2 x i64>
  %104 = shufflevector <4 x i32> %88, <4 x i32> %89, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %105 = bitcast <4 x i32> %104 to <2 x i64>
  %106 = shufflevector <4 x i32> %92, <4 x i32> %93, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %107 = bitcast <4 x i32> %106 to <2 x i64>
  %108 = shufflevector <4 x i32> %96, <4 x i32> %97, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %109 = bitcast <4 x i32> %108 to <2 x i64>
  %110 = shufflevector <4 x i32> %100, <4 x i32> %101, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %111 = bitcast <4 x i32> %110 to <2 x i64>
  %112 = shufflevector <2 x i64> %91, <2 x i64> %95, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %112, <2 x i64>* %16, align 16
  %113 = shufflevector <2 x i64> %91, <2 x i64> %95, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %113, <2 x i64>* %31, align 16
  %114 = shufflevector <2 x i64> %105, <2 x i64> %107, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %114, <2 x i64>* %39, align 16
  %115 = shufflevector <2 x i64> %105, <2 x i64> %107, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %115, <2 x i64>* %47, align 16
  %116 = shufflevector <2 x i64> %99, <2 x i64> %103, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %116, <2 x i64>* %55, align 16
  %117 = shufflevector <2 x i64> %99, <2 x i64> %103, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %117, <2 x i64>* %63, align 16
  %118 = shufflevector <2 x i64> %109, <2 x i64> %111, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %118, <2 x i64>* %71, align 16
  %119 = shufflevector <2 x i64> %109, <2 x i64> %111, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %119, <2 x i64>* %79, align 16
  %120 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %121 = bitcast <2 x i64>* %120 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %121, i8 0, i64 128, i1 false)
  %122 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 0
  call fastcc void @idct16_8col(<2 x i64>* nonnull %16, <2 x i64>* nonnull %122)
  %123 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 0
  %124 = sext i32 %2 to i64
  br label %125

125:                                              ; preds = %11, %225
  %126 = phi i64 [ 0, %11 ], [ %227, %225 ]
  %127 = phi i16* [ %1, %11 ], [ %226, %225 ]
  %128 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 %126
  %129 = bitcast <2 x i64>* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 16
  %131 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 1
  %132 = bitcast <2 x i64>* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 16
  %134 = shufflevector <8 x i16> %130, <8 x i16> %133, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %135 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 2
  %136 = bitcast <2 x i64>* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 16
  %138 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 3
  %139 = bitcast <2 x i64>* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 16
  %141 = shufflevector <8 x i16> %137, <8 x i16> %140, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %142 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 4
  %143 = bitcast <2 x i64>* %142 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 16
  %145 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 5
  %146 = bitcast <2 x i64>* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 16
  %148 = shufflevector <8 x i16> %144, <8 x i16> %147, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %149 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 6
  %150 = bitcast <2 x i64>* %149 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 16
  %152 = getelementptr inbounds <2 x i64>, <2 x i64>* %128, i64 7
  %153 = bitcast <2 x i64>* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 16
  %155 = shufflevector <8 x i16> %151, <8 x i16> %154, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %156 = shufflevector <8 x i16> %130, <8 x i16> %133, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %157 = shufflevector <8 x i16> %137, <8 x i16> %140, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %158 = shufflevector <8 x i16> %144, <8 x i16> %147, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %159 = shufflevector <8 x i16> %151, <8 x i16> %154, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %160 = bitcast <8 x i16> %134 to <4 x i32>
  %161 = bitcast <8 x i16> %141 to <4 x i32>
  %162 = shufflevector <4 x i32> %160, <4 x i32> %161, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %163 = bitcast <4 x i32> %162 to <2 x i64>
  %164 = bitcast <8 x i16> %148 to <4 x i32>
  %165 = bitcast <8 x i16> %155 to <4 x i32>
  %166 = shufflevector <4 x i32> %164, <4 x i32> %165, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %167 = bitcast <4 x i32> %166 to <2 x i64>
  %168 = bitcast <8 x i16> %156 to <4 x i32>
  %169 = bitcast <8 x i16> %157 to <4 x i32>
  %170 = shufflevector <4 x i32> %168, <4 x i32> %169, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %171 = bitcast <4 x i32> %170 to <2 x i64>
  %172 = bitcast <8 x i16> %158 to <4 x i32>
  %173 = bitcast <8 x i16> %159 to <4 x i32>
  %174 = shufflevector <4 x i32> %172, <4 x i32> %173, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %175 = bitcast <4 x i32> %174 to <2 x i64>
  %176 = shufflevector <4 x i32> %160, <4 x i32> %161, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %177 = bitcast <4 x i32> %176 to <2 x i64>
  %178 = shufflevector <4 x i32> %164, <4 x i32> %165, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %179 = bitcast <4 x i32> %178 to <2 x i64>
  %180 = shufflevector <4 x i32> %168, <4 x i32> %169, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %181 = bitcast <4 x i32> %180 to <2 x i64>
  %182 = shufflevector <4 x i32> %172, <4 x i32> %173, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %183 = bitcast <4 x i32> %182 to <2 x i64>
  %184 = shufflevector <2 x i64> %163, <2 x i64> %167, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %184, <2 x i64>* %16, align 16
  %185 = shufflevector <2 x i64> %163, <2 x i64> %167, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %185, <2 x i64>* %31, align 16
  %186 = shufflevector <2 x i64> %177, <2 x i64> %179, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %186, <2 x i64>* %39, align 16
  %187 = shufflevector <2 x i64> %177, <2 x i64> %179, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %187, <2 x i64>* %47, align 16
  %188 = shufflevector <2 x i64> %171, <2 x i64> %175, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %188, <2 x i64>* %55, align 16
  %189 = shufflevector <2 x i64> %171, <2 x i64> %175, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %189, <2 x i64>* %63, align 16
  %190 = shufflevector <2 x i64> %181, <2 x i64> %183, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %190, <2 x i64>* %71, align 16
  %191 = shufflevector <2 x i64> %181, <2 x i64> %183, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %191, <2 x i64>* %79, align 16
  call fastcc void @idct16_8col(<2 x i64>* nonnull %16, <2 x i64>* nonnull %123)
  br label %192

192:                                              ; preds = %192, %125
  %193 = phi i64 [ 0, %125 ], [ %223, %192 ]
  %194 = mul nsw i64 %193, %124
  %195 = getelementptr inbounds i16, i16* %127, i64 %194
  %196 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 %193
  %197 = bitcast <2 x i64>* %196 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 16
  %199 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %198, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %200 = ashr <8 x i16> %199, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %201 = bitcast i16* %195 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 16
  %203 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %202, <8 x i16> %200) #6
  %204 = icmp sgt <8 x i16> %203, zeroinitializer
  %205 = select <8 x i1> %204, <8 x i16> %203, <8 x i16> zeroinitializer
  %206 = icmp slt <8 x i16> %205, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %207 = select <8 x i1> %206, <8 x i16> %205, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %207, <8 x i16>* %201, align 16
  %208 = or i64 %193, 1
  %209 = mul nsw i64 %208, %124
  %210 = getelementptr inbounds i16, i16* %127, i64 %209
  %211 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 %208
  %212 = bitcast <2 x i64>* %211 to <8 x i16>*
  %213 = load <8 x i16>, <8 x i16>* %212, align 16
  %214 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %213, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %215 = ashr <8 x i16> %214, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %216 = bitcast i16* %210 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 16
  %218 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %217, <8 x i16> %215) #6
  %219 = icmp sgt <8 x i16> %218, zeroinitializer
  %220 = select <8 x i1> %219, <8 x i16> %218, <8 x i16> zeroinitializer
  %221 = icmp slt <8 x i16> %220, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %222 = select <8 x i1> %221, <8 x i16> %220, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %222, <8 x i16>* %216, align 16
  %223 = add nuw nsw i64 %193, 2
  %224 = icmp eq i64 %223, 16
  br i1 %224, label %225, label %192

225:                                              ; preds = %192
  %226 = getelementptr inbounds i16, i16* %127, i64 8
  %227 = add nuw nsw i64 %126, 8
  %228 = icmp ult i64 %227, 16
  br i1 %228, label %125, label %229

229:                                              ; preds = %225
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %12) #6
  br label %391

230:                                              ; preds = %4
  %231 = bitcast [2 x [16 x <2 x i64>]]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %231) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %231, i8 -86, i64 512, i1 false)
  br label %242

232:                                              ; preds = %242
  %233 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 0
  %234 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 1
  %235 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 2
  %236 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 3
  %237 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 4
  %238 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 5
  %239 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 6
  %240 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 7
  %241 = sext i32 %2 to i64
  br label %310

242:                                              ; preds = %242, %230
  %243 = phi i64 [ 0, %230 ], [ %308, %242 ]
  %244 = phi i32* [ %0, %230 ], [ %307, %242 ]
  %245 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 %243, i64 0
  %246 = bitcast i32* %244 to <2 x i64>*
  %247 = load <2 x i64>, <2 x i64>* %246, align 16
  store <2 x i64> %247, <2 x i64>* %245, align 16
  %248 = getelementptr inbounds i32, i32* %244, i64 4
  %249 = bitcast i32* %248 to <2 x i64>*
  %250 = load <2 x i64>, <2 x i64>* %249, align 16
  %251 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 %243, i64 1
  store <2 x i64> %250, <2 x i64>* %251, align 16
  %252 = getelementptr inbounds i32, i32* %244, i64 16
  %253 = bitcast i32* %252 to <2 x i64>*
  %254 = load <2 x i64>, <2 x i64>* %253, align 16
  %255 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 %243, i64 2
  store <2 x i64> %254, <2 x i64>* %255, align 16
  %256 = getelementptr inbounds i32, i32* %244, i64 20
  %257 = bitcast i32* %256 to <2 x i64>*
  %258 = load <2 x i64>, <2 x i64>* %257, align 16
  %259 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 %243, i64 3
  store <2 x i64> %258, <2 x i64>* %259, align 16
  %260 = getelementptr inbounds i32, i32* %244, i64 32
  %261 = bitcast i32* %260 to <2 x i64>*
  %262 = load <2 x i64>, <2 x i64>* %261, align 16
  %263 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 %243, i64 4
  store <2 x i64> %262, <2 x i64>* %263, align 16
  %264 = getelementptr inbounds i32, i32* %244, i64 36
  %265 = bitcast i32* %264 to <2 x i64>*
  %266 = load <2 x i64>, <2 x i64>* %265, align 16
  %267 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 %243, i64 5
  store <2 x i64> %266, <2 x i64>* %267, align 16
  %268 = getelementptr inbounds i32, i32* %244, i64 48
  %269 = bitcast i32* %268 to <2 x i64>*
  %270 = load <2 x i64>, <2 x i64>* %269, align 16
  %271 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 %243, i64 6
  store <2 x i64> %270, <2 x i64>* %271, align 16
  %272 = getelementptr inbounds i32, i32* %244, i64 52
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 16
  %275 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 %243, i64 7
  %276 = bitcast <2 x i64> %247 to <4 x i32>
  %277 = bitcast <2 x i64> %254 to <4 x i32>
  %278 = shufflevector <4 x i32> %276, <4 x i32> %277, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %279 = bitcast <4 x i32> %278 to <2 x i64>
  %280 = bitcast <2 x i64> %262 to <4 x i32>
  %281 = bitcast <2 x i64> %270 to <4 x i32>
  %282 = shufflevector <4 x i32> %280, <4 x i32> %281, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %283 = bitcast <4 x i32> %282 to <2 x i64>
  %284 = shufflevector <4 x i32> %276, <4 x i32> %277, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %285 = bitcast <4 x i32> %284 to <2 x i64>
  %286 = shufflevector <4 x i32> %280, <4 x i32> %281, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %287 = bitcast <4 x i32> %286 to <2 x i64>
  %288 = bitcast <2 x i64> %250 to <4 x i32>
  %289 = bitcast <2 x i64> %258 to <4 x i32>
  %290 = shufflevector <4 x i32> %288, <4 x i32> %289, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %291 = bitcast <4 x i32> %290 to <2 x i64>
  %292 = bitcast <2 x i64> %266 to <4 x i32>
  %293 = shufflevector <4 x i32> %292, <4 x i32> %274, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %294 = bitcast <4 x i32> %293 to <2 x i64>
  %295 = shufflevector <4 x i32> %288, <4 x i32> %289, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %296 = bitcast <4 x i32> %295 to <2 x i64>
  %297 = shufflevector <4 x i32> %292, <4 x i32> %274, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %298 = bitcast <4 x i32> %297 to <2 x i64>
  %299 = shufflevector <2 x i64> %279, <2 x i64> %283, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %299, <2 x i64>* %245, align 16
  %300 = shufflevector <2 x i64> %279, <2 x i64> %283, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %300, <2 x i64>* %251, align 16
  %301 = shufflevector <2 x i64> %285, <2 x i64> %287, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %301, <2 x i64>* %255, align 16
  %302 = shufflevector <2 x i64> %285, <2 x i64> %287, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %302, <2 x i64>* %259, align 16
  %303 = shufflevector <2 x i64> %291, <2 x i64> %294, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %303, <2 x i64>* %263, align 16
  %304 = shufflevector <2 x i64> %291, <2 x i64> %294, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %304, <2 x i64>* %267, align 16
  %305 = shufflevector <2 x i64> %296, <2 x i64> %298, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %305, <2 x i64>* %271, align 16
  %306 = shufflevector <2 x i64> %296, <2 x i64> %298, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %306, <2 x i64>* %275, align 16
  call fastcc void @highbd_idct16x16_38_4col(<2 x i64>* %245)
  %307 = getelementptr inbounds i32, i32* %244, i64 64
  %308 = add nuw nsw i64 %243, 1
  %309 = icmp eq i64 %308, 2
  br i1 %309, label %232, label %242

310:                                              ; preds = %232, %386
  %311 = phi i64 [ 0, %232 ], [ %388, %386 ]
  %312 = phi i16* [ %1, %232 ], [ %387, %386 ]
  %313 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 0, i64 %311
  %314 = bitcast <2 x i64>* %313 to <4 x i32>*
  %315 = load <4 x i32>, <4 x i32>* %314, align 16
  %316 = getelementptr inbounds <2 x i64>, <2 x i64>* %313, i64 1
  %317 = bitcast <2 x i64>* %316 to <4 x i32>*
  %318 = load <4 x i32>, <4 x i32>* %317, align 16
  %319 = shufflevector <4 x i32> %315, <4 x i32> %318, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %320 = bitcast <4 x i32> %319 to <2 x i64>
  %321 = getelementptr inbounds <2 x i64>, <2 x i64>* %313, i64 2
  %322 = bitcast <2 x i64>* %321 to <4 x i32>*
  %323 = load <4 x i32>, <4 x i32>* %322, align 16
  %324 = getelementptr inbounds <2 x i64>, <2 x i64>* %313, i64 3
  %325 = bitcast <2 x i64>* %324 to <4 x i32>*
  %326 = load <4 x i32>, <4 x i32>* %325, align 16
  %327 = shufflevector <4 x i32> %323, <4 x i32> %326, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %328 = bitcast <4 x i32> %327 to <2 x i64>
  %329 = shufflevector <4 x i32> %315, <4 x i32> %318, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %330 = bitcast <4 x i32> %329 to <2 x i64>
  %331 = shufflevector <4 x i32> %323, <4 x i32> %326, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %332 = bitcast <4 x i32> %331 to <2 x i64>
  %333 = shufflevector <2 x i64> %320, <2 x i64> %328, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %333, <2 x i64>* %233, align 16
  %334 = shufflevector <2 x i64> %320, <2 x i64> %328, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %334, <2 x i64>* %234, align 16
  %335 = shufflevector <2 x i64> %330, <2 x i64> %332, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %335, <2 x i64>* %235, align 16
  %336 = shufflevector <2 x i64> %330, <2 x i64> %332, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %336, <2 x i64>* %236, align 16
  %337 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 1, i64 %311
  %338 = bitcast <2 x i64>* %337 to <4 x i32>*
  %339 = load <4 x i32>, <4 x i32>* %338, align 16
  %340 = getelementptr inbounds <2 x i64>, <2 x i64>* %337, i64 1
  %341 = bitcast <2 x i64>* %340 to <4 x i32>*
  %342 = load <4 x i32>, <4 x i32>* %341, align 16
  %343 = shufflevector <4 x i32> %339, <4 x i32> %342, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %344 = bitcast <4 x i32> %343 to <2 x i64>
  %345 = getelementptr inbounds <2 x i64>, <2 x i64>* %337, i64 2
  %346 = bitcast <2 x i64>* %345 to <4 x i32>*
  %347 = load <4 x i32>, <4 x i32>* %346, align 16
  %348 = getelementptr inbounds <2 x i64>, <2 x i64>* %337, i64 3
  %349 = bitcast <2 x i64>* %348 to <4 x i32>*
  %350 = load <4 x i32>, <4 x i32>* %349, align 16
  %351 = shufflevector <4 x i32> %347, <4 x i32> %350, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %352 = bitcast <4 x i32> %351 to <2 x i64>
  %353 = shufflevector <4 x i32> %339, <4 x i32> %342, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %354 = bitcast <4 x i32> %353 to <2 x i64>
  %355 = shufflevector <4 x i32> %347, <4 x i32> %350, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %356 = bitcast <4 x i32> %355 to <2 x i64>
  %357 = shufflevector <2 x i64> %344, <2 x i64> %352, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %357, <2 x i64>* %237, align 16
  %358 = shufflevector <2 x i64> %344, <2 x i64> %352, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %358, <2 x i64>* %238, align 16
  %359 = shufflevector <2 x i64> %354, <2 x i64> %356, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %359, <2 x i64>* %239, align 16
  %360 = shufflevector <2 x i64> %354, <2 x i64> %356, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %360, <2 x i64>* %240, align 16
  call fastcc void @highbd_idct16x16_38_4col(<2 x i64>* nonnull %233)
  %361 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #6
  %362 = add <8 x i16> %361, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  br label %363

363:                                              ; preds = %363, %310
  %364 = phi i64 [ 0, %310 ], [ %384, %363 ]
  %365 = mul nsw i64 %364, %241
  %366 = getelementptr inbounds i16, i16* %312, i64 %365
  %367 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 %364
  %368 = bitcast <2 x i64>* %367 to <4 x i32>*
  %369 = load <4 x i32>, <4 x i32>* %368, align 16
  %370 = add <4 x i32> %369, <i32 32, i32 32, i32 32, i32 32>
  %371 = ashr <4 x i32> %370, <i32 6, i32 6, i32 6, i32 6>
  %372 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %371, <4 x i32> %371) #6
  %373 = bitcast i16* %366 to i64*
  %374 = load i64, i64* %373, align 1
  %375 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %374, i32 0
  %376 = bitcast <2 x i64> %375 to <8 x i16>
  %377 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %376, <8 x i16> %372) #6
  %378 = icmp sgt <8 x i16> %377, zeroinitializer
  %379 = select <8 x i1> %378, <8 x i16> %377, <8 x i16> zeroinitializer
  %380 = icmp slt <8 x i16> %379, %362
  %381 = select <8 x i1> %380, <8 x i16> %379, <8 x i16> %362
  %382 = bitcast <8 x i16> %381 to <2 x i64>
  %383 = extractelement <2 x i64> %382, i32 0
  store i64 %383, i64* %373, align 1
  %384 = add nuw nsw i64 %364, 1
  %385 = icmp eq i64 %384, 16
  br i1 %385, label %386, label %363

386:                                              ; preds = %363
  %387 = getelementptr inbounds i16, i16* %312, i64 4
  %388 = add nuw nsw i64 %311, 4
  %389 = icmp ult i64 %388, 16
  br i1 %389, label %310, label %390

390:                                              ; preds = %386
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %231) #6
  br label %391

391:                                              ; preds = %390, %229
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @highbd_idct16x16_38_4col(<2 x i64>*) unnamed_addr #2 {
  %2 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 1
  %3 = bitcast <2 x i64>* %2 to <4 x i32>*
  %4 = load <4 x i32>, <4 x i32>* %3, align 16
  %5 = ashr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, %4
  %7 = sub <4 x i32> %6, %5
  %8 = shufflevector <4 x i32> %5, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %9 = bitcast <4 x i32> %8 to <2 x i64>
  %10 = shufflevector <4 x i32> %5, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %11 = bitcast <4 x i32> %10 to <2 x i64>
  %12 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %13 = bitcast <4 x i32> %12 to <2 x i64>
  %14 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 4294967295, i64 4294967295>
  %17 = mul nuw nsw <2 x i64> %16, <i64 6424, i64 6424>
  %18 = xor <2 x i64> %17, %11
  %19 = and <2 x i64> %13, <i64 4294967295, i64 4294967295>
  %20 = mul nuw nsw <2 x i64> %19, <i64 6424, i64 6424>
  %21 = xor <2 x i64> %20, %9
  %22 = sub <2 x i64> <i64 32768, i64 32768>, %11
  %23 = add <2 x i64> %18, %22
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %26 = sub <2 x i64> <i64 32768, i64 32768>, %9
  %27 = add <2 x i64> %21, %26
  %28 = bitcast <2 x i64> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %30 = bitcast <16 x i8> %25 to <4 x i32>
  %31 = bitcast <16 x i8> %29 to <4 x i32>
  %32 = shufflevector <4 x i32> %30, <4 x i32> %31, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %33 = shufflevector <4 x i32> %30, <4 x i32> %31, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %34 = shufflevector <4 x i32> %32, <4 x i32> %33, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %35 = mul nuw nsw <2 x i64> %16, <i64 65220, i64 65220>
  %36 = xor <2 x i64> %35, %11
  %37 = mul nuw nsw <2 x i64> %19, <i64 65220, i64 65220>
  %38 = xor <2 x i64> %37, %9
  %39 = add <2 x i64> %36, %22
  %40 = bitcast <2 x i64> %39 to <16 x i8>
  %41 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %42 = add <2 x i64> %38, %26
  %43 = bitcast <2 x i64> %42 to <16 x i8>
  %44 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %45 = bitcast <16 x i8> %41 to <4 x i32>
  %46 = bitcast <16 x i8> %44 to <4 x i32>
  %47 = shufflevector <4 x i32> %45, <4 x i32> %46, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %48 = shufflevector <4 x i32> %45, <4 x i32> %46, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %49 = shufflevector <4 x i32> %47, <4 x i32> %48, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %50 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 7
  %51 = bitcast <2 x i64>* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 16
  %53 = ashr <4 x i32> %52, <i32 31, i32 31, i32 31, i32 31>
  %54 = xor <4 x i32> %53, %52
  %55 = sub <4 x i32> %54, %53
  %56 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %57 = bitcast <4 x i32> %56 to <2 x i64>
  %58 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %61 = bitcast <4 x i32> %60 to <2 x i64>
  %62 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %63 = bitcast <4 x i32> %62 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 4294967295, i64 4294967295>
  %65 = mul nuw nsw <2 x i64> %64, <i64 41576, i64 41576>
  %66 = xor <2 x i64> %65, %59
  %67 = and <2 x i64> %61, <i64 4294967295, i64 4294967295>
  %68 = mul nuw nsw <2 x i64> %67, <i64 41576, i64 41576>
  %69 = xor <2 x i64> %68, %57
  %70 = add <2 x i64> %59, <i64 32768, i64 32768>
  %71 = sub <2 x i64> %70, %66
  %72 = bitcast <2 x i64> %71 to <16 x i8>
  %73 = shufflevector <16 x i8> %72, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %74 = add <2 x i64> %57, <i64 32768, i64 32768>
  %75 = sub <2 x i64> %74, %69
  %76 = bitcast <2 x i64> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %78 = bitcast <16 x i8> %73 to <4 x i32>
  %79 = bitcast <16 x i8> %77 to <4 x i32>
  %80 = shufflevector <4 x i32> %78, <4 x i32> %79, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %81 = shufflevector <4 x i32> %78, <4 x i32> %79, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %82 = shufflevector <4 x i32> %80, <4 x i32> %81, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %83 = mul nuw nsw <2 x i64> %64, <i64 50660, i64 50660>
  %84 = xor <2 x i64> %83, %59
  %85 = mul nuw nsw <2 x i64> %67, <i64 50660, i64 50660>
  %86 = xor <2 x i64> %85, %57
  %87 = sub <2 x i64> <i64 32768, i64 32768>, %59
  %88 = add <2 x i64> %87, %84
  %89 = bitcast <2 x i64> %88 to <16 x i8>
  %90 = shufflevector <16 x i8> %89, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %91 = sub <2 x i64> <i64 32768, i64 32768>, %57
  %92 = add <2 x i64> %91, %86
  %93 = bitcast <2 x i64> %92 to <16 x i8>
  %94 = shufflevector <16 x i8> %93, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %95 = bitcast <16 x i8> %90 to <4 x i32>
  %96 = bitcast <16 x i8> %94 to <4 x i32>
  %97 = shufflevector <4 x i32> %95, <4 x i32> %96, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %98 = shufflevector <4 x i32> %95, <4 x i32> %96, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %99 = shufflevector <4 x i32> %97, <4 x i32> %98, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %100 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 5
  %101 = bitcast <2 x i64>* %100 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 16
  %103 = ashr <4 x i32> %102, <i32 31, i32 31, i32 31, i32 31>
  %104 = xor <4 x i32> %103, %102
  %105 = sub <4 x i32> %104, %103
  %106 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %107 = bitcast <4 x i32> %106 to <2 x i64>
  %108 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %109 = bitcast <4 x i32> %108 to <2 x i64>
  %110 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %111 = bitcast <4 x i32> %110 to <2 x i64>
  %112 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %113 = bitcast <4 x i32> %112 to <2 x i64>
  %114 = and <2 x i64> %113, <i64 4294967295, i64 4294967295>
  %115 = mul nuw nsw <2 x i64> %114, <i64 30892, i64 30892>
  %116 = xor <2 x i64> %115, %109
  %117 = and <2 x i64> %111, <i64 4294967295, i64 4294967295>
  %118 = mul nuw nsw <2 x i64> %117, <i64 30892, i64 30892>
  %119 = xor <2 x i64> %118, %107
  %120 = sub <2 x i64> <i64 32768, i64 32768>, %109
  %121 = add <2 x i64> %116, %120
  %122 = bitcast <2 x i64> %121 to <16 x i8>
  %123 = shufflevector <16 x i8> %122, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %124 = sub <2 x i64> <i64 32768, i64 32768>, %107
  %125 = add <2 x i64> %119, %124
  %126 = bitcast <2 x i64> %125 to <16 x i8>
  %127 = shufflevector <16 x i8> %126, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %128 = bitcast <16 x i8> %123 to <4 x i32>
  %129 = bitcast <16 x i8> %127 to <4 x i32>
  %130 = shufflevector <4 x i32> %128, <4 x i32> %129, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %131 = shufflevector <4 x i32> %128, <4 x i32> %129, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %132 = shufflevector <4 x i32> %130, <4 x i32> %131, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %133 = mul nuw nsw <2 x i64> %114, <i64 57796, i64 57796>
  %134 = xor <2 x i64> %133, %109
  %135 = mul nuw nsw <2 x i64> %117, <i64 57796, i64 57796>
  %136 = xor <2 x i64> %135, %107
  %137 = add <2 x i64> %134, %120
  %138 = bitcast <2 x i64> %137 to <16 x i8>
  %139 = shufflevector <16 x i8> %138, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %140 = add <2 x i64> %136, %124
  %141 = bitcast <2 x i64> %140 to <16 x i8>
  %142 = shufflevector <16 x i8> %141, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %143 = bitcast <16 x i8> %139 to <4 x i32>
  %144 = bitcast <16 x i8> %142 to <4 x i32>
  %145 = shufflevector <4 x i32> %143, <4 x i32> %144, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %146 = shufflevector <4 x i32> %143, <4 x i32> %144, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %147 = shufflevector <4 x i32> %145, <4 x i32> %146, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %148 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 3
  %149 = bitcast <2 x i64>* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 16
  %151 = ashr <4 x i32> %150, <i32 31, i32 31, i32 31, i32 31>
  %152 = xor <4 x i32> %151, %150
  %153 = sub <4 x i32> %152, %151
  %154 = shufflevector <4 x i32> %151, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %155 = bitcast <4 x i32> %154 to <2 x i64>
  %156 = shufflevector <4 x i32> %151, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %157 = bitcast <4 x i32> %156 to <2 x i64>
  %158 = shufflevector <4 x i32> %153, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %159 = bitcast <4 x i32> %158 to <2 x i64>
  %160 = shufflevector <4 x i32> %153, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %161 = bitcast <4 x i32> %160 to <2 x i64>
  %162 = and <2 x i64> %161, <i64 4294967295, i64 4294967295>
  %163 = mul nuw nsw <2 x i64> %162, <i64 19024, i64 19024>
  %164 = xor <2 x i64> %163, %157
  %165 = and <2 x i64> %159, <i64 4294967295, i64 4294967295>
  %166 = mul nuw nsw <2 x i64> %165, <i64 19024, i64 19024>
  %167 = xor <2 x i64> %166, %155
  %168 = add <2 x i64> %157, <i64 32768, i64 32768>
  %169 = sub <2 x i64> %168, %164
  %170 = bitcast <2 x i64> %169 to <16 x i8>
  %171 = shufflevector <16 x i8> %170, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %172 = add <2 x i64> %155, <i64 32768, i64 32768>
  %173 = sub <2 x i64> %172, %167
  %174 = bitcast <2 x i64> %173 to <16 x i8>
  %175 = shufflevector <16 x i8> %174, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %176 = bitcast <16 x i8> %171 to <4 x i32>
  %177 = bitcast <16 x i8> %175 to <4 x i32>
  %178 = shufflevector <4 x i32> %176, <4 x i32> %177, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %179 = shufflevector <4 x i32> %176, <4 x i32> %177, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %180 = shufflevector <4 x i32> %178, <4 x i32> %179, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %181 = mul nuw nsw <2 x i64> %162, <i64 62716, i64 62716>
  %182 = xor <2 x i64> %181, %157
  %183 = mul nuw nsw <2 x i64> %165, <i64 62716, i64 62716>
  %184 = xor <2 x i64> %183, %155
  %185 = sub <2 x i64> <i64 32768, i64 32768>, %157
  %186 = add <2 x i64> %185, %182
  %187 = bitcast <2 x i64> %186 to <16 x i8>
  %188 = shufflevector <16 x i8> %187, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %189 = sub <2 x i64> <i64 32768, i64 32768>, %155
  %190 = add <2 x i64> %189, %184
  %191 = bitcast <2 x i64> %190 to <16 x i8>
  %192 = shufflevector <16 x i8> %191, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %193 = bitcast <16 x i8> %188 to <4 x i32>
  %194 = bitcast <16 x i8> %192 to <4 x i32>
  %195 = shufflevector <4 x i32> %193, <4 x i32> %194, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %196 = shufflevector <4 x i32> %193, <4 x i32> %194, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %197 = shufflevector <4 x i32> %195, <4 x i32> %196, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %198 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 2
  %199 = bitcast <2 x i64>* %198 to <4 x i32>*
  %200 = load <4 x i32>, <4 x i32>* %199, align 16
  %201 = ashr <4 x i32> %200, <i32 31, i32 31, i32 31, i32 31>
  %202 = xor <4 x i32> %201, %200
  %203 = sub <4 x i32> %202, %201
  %204 = shufflevector <4 x i32> %201, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %205 = bitcast <4 x i32> %204 to <2 x i64>
  %206 = shufflevector <4 x i32> %201, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %207 = bitcast <4 x i32> %206 to <2 x i64>
  %208 = shufflevector <4 x i32> %203, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %209 = bitcast <4 x i32> %208 to <2 x i64>
  %210 = shufflevector <4 x i32> %203, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %211 = bitcast <4 x i32> %210 to <2 x i64>
  %212 = and <2 x i64> %211, <i64 4294967295, i64 4294967295>
  %213 = mul nuw nsw <2 x i64> %212, <i64 12784, i64 12784>
  %214 = xor <2 x i64> %213, %207
  %215 = and <2 x i64> %209, <i64 4294967295, i64 4294967295>
  %216 = mul nuw nsw <2 x i64> %215, <i64 12784, i64 12784>
  %217 = xor <2 x i64> %216, %205
  %218 = sub <2 x i64> <i64 32768, i64 32768>, %207
  %219 = add <2 x i64> %214, %218
  %220 = bitcast <2 x i64> %219 to <16 x i8>
  %221 = shufflevector <16 x i8> %220, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %222 = sub <2 x i64> <i64 32768, i64 32768>, %205
  %223 = add <2 x i64> %217, %222
  %224 = bitcast <2 x i64> %223 to <16 x i8>
  %225 = shufflevector <16 x i8> %224, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %226 = bitcast <16 x i8> %221 to <4 x i32>
  %227 = bitcast <16 x i8> %225 to <4 x i32>
  %228 = shufflevector <4 x i32> %226, <4 x i32> %227, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %229 = shufflevector <4 x i32> %226, <4 x i32> %227, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %230 = shufflevector <4 x i32> %228, <4 x i32> %229, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %231 = mul nuw nsw <2 x i64> %212, <i64 64276, i64 64276>
  %232 = xor <2 x i64> %231, %207
  %233 = mul nuw nsw <2 x i64> %215, <i64 64276, i64 64276>
  %234 = xor <2 x i64> %233, %205
  %235 = add <2 x i64> %232, %218
  %236 = bitcast <2 x i64> %235 to <16 x i8>
  %237 = shufflevector <16 x i8> %236, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %238 = add <2 x i64> %234, %222
  %239 = bitcast <2 x i64> %238 to <16 x i8>
  %240 = shufflevector <16 x i8> %239, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %241 = bitcast <16 x i8> %237 to <4 x i32>
  %242 = bitcast <16 x i8> %240 to <4 x i32>
  %243 = shufflevector <4 x i32> %241, <4 x i32> %242, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %244 = shufflevector <4 x i32> %241, <4 x i32> %242, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %245 = shufflevector <4 x i32> %243, <4 x i32> %244, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %246 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 6
  %247 = bitcast <2 x i64>* %246 to <4 x i32>*
  %248 = load <4 x i32>, <4 x i32>* %247, align 16
  %249 = ashr <4 x i32> %248, <i32 31, i32 31, i32 31, i32 31>
  %250 = xor <4 x i32> %249, %248
  %251 = sub <4 x i32> %250, %249
  %252 = shufflevector <4 x i32> %249, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %253 = bitcast <4 x i32> %252 to <2 x i64>
  %254 = shufflevector <4 x i32> %249, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %255 = bitcast <4 x i32> %254 to <2 x i64>
  %256 = shufflevector <4 x i32> %251, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %257 = bitcast <4 x i32> %256 to <2 x i64>
  %258 = shufflevector <4 x i32> %251, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %259 = bitcast <4 x i32> %258 to <2 x i64>
  %260 = and <2 x i64> %259, <i64 4294967295, i64 4294967295>
  %261 = mul nuw nsw <2 x i64> %260, <i64 36408, i64 36408>
  %262 = xor <2 x i64> %261, %255
  %263 = and <2 x i64> %257, <i64 4294967295, i64 4294967295>
  %264 = mul nuw nsw <2 x i64> %263, <i64 36408, i64 36408>
  %265 = xor <2 x i64> %264, %253
  %266 = add <2 x i64> %255, <i64 32768, i64 32768>
  %267 = sub <2 x i64> %266, %262
  %268 = bitcast <2 x i64> %267 to <16 x i8>
  %269 = shufflevector <16 x i8> %268, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %270 = add <2 x i64> %253, <i64 32768, i64 32768>
  %271 = sub <2 x i64> %270, %265
  %272 = bitcast <2 x i64> %271 to <16 x i8>
  %273 = shufflevector <16 x i8> %272, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %274 = bitcast <16 x i8> %269 to <4 x i32>
  %275 = bitcast <16 x i8> %273 to <4 x i32>
  %276 = shufflevector <4 x i32> %274, <4 x i32> %275, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %277 = shufflevector <4 x i32> %274, <4 x i32> %275, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %278 = shufflevector <4 x i32> %276, <4 x i32> %277, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %279 = mul nuw nsw <2 x i64> %260, <i64 54492, i64 54492>
  %280 = xor <2 x i64> %279, %255
  %281 = mul nuw nsw <2 x i64> %263, <i64 54492, i64 54492>
  %282 = xor <2 x i64> %281, %253
  %283 = sub <2 x i64> <i64 32768, i64 32768>, %255
  %284 = add <2 x i64> %283, %280
  %285 = bitcast <2 x i64> %284 to <16 x i8>
  %286 = shufflevector <16 x i8> %285, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %287 = sub <2 x i64> <i64 32768, i64 32768>, %253
  %288 = add <2 x i64> %287, %282
  %289 = bitcast <2 x i64> %288 to <16 x i8>
  %290 = shufflevector <16 x i8> %289, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %291 = bitcast <16 x i8> %286 to <4 x i32>
  %292 = bitcast <16 x i8> %290 to <4 x i32>
  %293 = shufflevector <4 x i32> %291, <4 x i32> %292, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %294 = shufflevector <4 x i32> %291, <4 x i32> %292, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %295 = shufflevector <4 x i32> %293, <4 x i32> %294, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %296 = add <4 x i32> %82, %34
  %297 = sub <4 x i32> %34, %82
  %298 = sub <4 x i32> %132, %180
  %299 = add <4 x i32> %180, %132
  %300 = add <4 x i32> %197, %147
  %301 = sub <4 x i32> %147, %197
  %302 = sub <4 x i32> %49, %99
  %303 = add <4 x i32> %99, %49
  %304 = bitcast <2 x i64>* %0 to <4 x i32>*
  %305 = load <4 x i32>, <4 x i32>* %304, align 16
  %306 = ashr <4 x i32> %305, <i32 31, i32 31, i32 31, i32 31>
  %307 = xor <4 x i32> %306, %305
  %308 = sub <4 x i32> %307, %306
  %309 = shufflevector <4 x i32> %306, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %310 = bitcast <4 x i32> %309 to <2 x i64>
  %311 = shufflevector <4 x i32> %306, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %312 = bitcast <4 x i32> %311 to <2 x i64>
  %313 = shufflevector <4 x i32> %308, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %314 = bitcast <4 x i32> %313 to <2 x i64>
  %315 = shufflevector <4 x i32> %308, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %316 = bitcast <4 x i32> %315 to <2 x i64>
  %317 = and <2 x i64> %316, <i64 4294967295, i64 4294967295>
  %318 = mul nuw nsw <2 x i64> %317, <i64 46340, i64 46340>
  %319 = xor <2 x i64> %318, %312
  %320 = and <2 x i64> %314, <i64 4294967295, i64 4294967295>
  %321 = mul nuw nsw <2 x i64> %320, <i64 46340, i64 46340>
  %322 = xor <2 x i64> %321, %310
  %323 = sub <2 x i64> <i64 32768, i64 32768>, %312
  %324 = add <2 x i64> %323, %319
  %325 = bitcast <2 x i64> %324 to <16 x i8>
  %326 = shufflevector <16 x i8> %325, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %327 = sub <2 x i64> <i64 32768, i64 32768>, %310
  %328 = add <2 x i64> %327, %322
  %329 = bitcast <2 x i64> %328 to <16 x i8>
  %330 = shufflevector <16 x i8> %329, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %331 = bitcast <16 x i8> %326 to <4 x i32>
  %332 = bitcast <16 x i8> %330 to <4 x i32>
  %333 = shufflevector <4 x i32> %331, <4 x i32> %332, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %334 = shufflevector <4 x i32> %331, <4 x i32> %332, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %335 = shufflevector <4 x i32> %333, <4 x i32> %334, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %336 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 4
  %337 = bitcast <2 x i64>* %336 to <4 x i32>*
  %338 = load <4 x i32>, <4 x i32>* %337, align 16
  %339 = ashr <4 x i32> %338, <i32 31, i32 31, i32 31, i32 31>
  %340 = xor <4 x i32> %339, %338
  %341 = sub <4 x i32> %340, %339
  %342 = shufflevector <4 x i32> %339, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %343 = bitcast <4 x i32> %342 to <2 x i64>
  %344 = shufflevector <4 x i32> %339, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %345 = bitcast <4 x i32> %344 to <2 x i64>
  %346 = shufflevector <4 x i32> %341, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %347 = bitcast <4 x i32> %346 to <2 x i64>
  %348 = shufflevector <4 x i32> %341, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %349 = bitcast <4 x i32> %348 to <2 x i64>
  %350 = and <2 x i64> %349, <i64 4294967295, i64 4294967295>
  %351 = mul nuw nsw <2 x i64> %350, <i64 25080, i64 25080>
  %352 = xor <2 x i64> %351, %345
  %353 = and <2 x i64> %347, <i64 4294967295, i64 4294967295>
  %354 = mul nuw nsw <2 x i64> %353, <i64 25080, i64 25080>
  %355 = xor <2 x i64> %354, %343
  %356 = sub <2 x i64> <i64 32768, i64 32768>, %345
  %357 = add <2 x i64> %352, %356
  %358 = bitcast <2 x i64> %357 to <16 x i8>
  %359 = shufflevector <16 x i8> %358, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %360 = sub <2 x i64> <i64 32768, i64 32768>, %343
  %361 = add <2 x i64> %355, %360
  %362 = bitcast <2 x i64> %361 to <16 x i8>
  %363 = shufflevector <16 x i8> %362, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %364 = bitcast <16 x i8> %359 to <4 x i32>
  %365 = bitcast <16 x i8> %363 to <4 x i32>
  %366 = shufflevector <4 x i32> %364, <4 x i32> %365, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %367 = shufflevector <4 x i32> %364, <4 x i32> %365, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %368 = shufflevector <4 x i32> %366, <4 x i32> %367, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %369 = mul nuw nsw <2 x i64> %350, <i64 60548, i64 60548>
  %370 = xor <2 x i64> %369, %345
  %371 = mul nuw nsw <2 x i64> %353, <i64 60548, i64 60548>
  %372 = xor <2 x i64> %371, %343
  %373 = add <2 x i64> %370, %356
  %374 = bitcast <2 x i64> %373 to <16 x i8>
  %375 = shufflevector <16 x i8> %374, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %376 = add <2 x i64> %372, %360
  %377 = bitcast <2 x i64> %376 to <16 x i8>
  %378 = shufflevector <16 x i8> %377, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %379 = bitcast <16 x i8> %375 to <4 x i32>
  %380 = bitcast <16 x i8> %378 to <4 x i32>
  %381 = shufflevector <4 x i32> %379, <4 x i32> %380, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %382 = shufflevector <4 x i32> %379, <4 x i32> %380, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %383 = shufflevector <4 x i32> %381, <4 x i32> %382, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %384 = ashr <4 x i32> %302, <i32 31, i32 31, i32 31, i32 31>
  %385 = xor <4 x i32> %384, %302
  %386 = sub <4 x i32> %385, %384
  %387 = shufflevector <4 x i32> %384, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %388 = bitcast <4 x i32> %387 to <2 x i64>
  %389 = shufflevector <4 x i32> %384, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %390 = bitcast <4 x i32> %389 to <2 x i64>
  %391 = shufflevector <4 x i32> %386, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %392 = bitcast <4 x i32> %391 to <2 x i64>
  %393 = shufflevector <4 x i32> %386, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %394 = bitcast <4 x i32> %393 to <2 x i64>
  %395 = ashr <4 x i32> %297, <i32 31, i32 31, i32 31, i32 31>
  %396 = xor <4 x i32> %395, %297
  %397 = sub <4 x i32> %396, %395
  %398 = shufflevector <4 x i32> %395, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %399 = bitcast <4 x i32> %398 to <2 x i64>
  %400 = shufflevector <4 x i32> %395, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %401 = bitcast <4 x i32> %400 to <2 x i64>
  %402 = shufflevector <4 x i32> %397, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %403 = bitcast <4 x i32> %402 to <2 x i64>
  %404 = shufflevector <4 x i32> %397, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %405 = bitcast <4 x i32> %404 to <2 x i64>
  %406 = and <2 x i64> %394, <i64 4294967295, i64 4294967295>
  %407 = mul nuw nsw <2 x i64> %406, <i64 60548, i64 60548>
  %408 = xor <2 x i64> %407, %390
  %409 = and <2 x i64> %392, <i64 4294967295, i64 4294967295>
  %410 = mul nuw nsw <2 x i64> %409, <i64 60548, i64 60548>
  %411 = xor <2 x i64> %410, %388
  %412 = mul nuw nsw <2 x i64> %406, <i64 25080, i64 25080>
  %413 = xor <2 x i64> %412, %390
  %414 = mul nuw nsw <2 x i64> %409, <i64 25080, i64 25080>
  %415 = xor <2 x i64> %414, %388
  %416 = and <2 x i64> %405, <i64 4294967295, i64 4294967295>
  %417 = mul nuw nsw <2 x i64> %416, <i64 25080, i64 25080>
  %418 = xor <2 x i64> %417, %401
  %419 = and <2 x i64> %403, <i64 4294967295, i64 4294967295>
  %420 = mul nuw nsw <2 x i64> %419, <i64 25080, i64 25080>
  %421 = xor <2 x i64> %420, %399
  %422 = mul nuw nsw <2 x i64> %416, <i64 60548, i64 60548>
  %423 = xor <2 x i64> %422, %401
  %424 = mul nuw nsw <2 x i64> %419, <i64 60548, i64 60548>
  %425 = xor <2 x i64> %424, %399
  %426 = sub <2 x i64> <i64 32768, i64 32768>, %390
  %427 = add <2 x i64> %426, %401
  %428 = add <2 x i64> %427, %413
  %429 = sub <2 x i64> %428, %423
  %430 = bitcast <2 x i64> %429 to <16 x i8>
  %431 = shufflevector <16 x i8> %430, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %432 = sub <2 x i64> <i64 32768, i64 32768>, %388
  %433 = add <2 x i64> %432, %399
  %434 = add <2 x i64> %433, %415
  %435 = sub <2 x i64> %434, %425
  %436 = bitcast <2 x i64> %435 to <16 x i8>
  %437 = shufflevector <16 x i8> %436, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %438 = sub <2 x i64> %426, %401
  %439 = add <2 x i64> %438, %418
  %440 = add <2 x i64> %439, %408
  %441 = bitcast <2 x i64> %440 to <16 x i8>
  %442 = shufflevector <16 x i8> %441, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %443 = sub <2 x i64> %432, %399
  %444 = add <2 x i64> %443, %421
  %445 = add <2 x i64> %444, %411
  %446 = bitcast <2 x i64> %445 to <16 x i8>
  %447 = shufflevector <16 x i8> %446, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %448 = bitcast <16 x i8> %431 to <4 x i32>
  %449 = bitcast <16 x i8> %437 to <4 x i32>
  %450 = shufflevector <4 x i32> %448, <4 x i32> %449, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %451 = shufflevector <4 x i32> %448, <4 x i32> %449, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %452 = shufflevector <4 x i32> %450, <4 x i32> %451, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %453 = bitcast <16 x i8> %442 to <4 x i32>
  %454 = bitcast <16 x i8> %447 to <4 x i32>
  %455 = shufflevector <4 x i32> %453, <4 x i32> %454, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %456 = shufflevector <4 x i32> %453, <4 x i32> %454, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %457 = shufflevector <4 x i32> %455, <4 x i32> %456, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %458 = ashr <4 x i32> %298, <i32 31, i32 31, i32 31, i32 31>
  %459 = xor <4 x i32> %458, %298
  %460 = sub <4 x i32> %459, %458
  %461 = shufflevector <4 x i32> %458, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %462 = bitcast <4 x i32> %461 to <2 x i64>
  %463 = shufflevector <4 x i32> %458, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %464 = bitcast <4 x i32> %463 to <2 x i64>
  %465 = shufflevector <4 x i32> %460, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %466 = bitcast <4 x i32> %465 to <2 x i64>
  %467 = shufflevector <4 x i32> %460, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %468 = bitcast <4 x i32> %467 to <2 x i64>
  %469 = ashr <4 x i32> %301, <i32 31, i32 31, i32 31, i32 31>
  %470 = xor <4 x i32> %469, %301
  %471 = sub <4 x i32> %470, %469
  %472 = shufflevector <4 x i32> %469, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %473 = bitcast <4 x i32> %472 to <2 x i64>
  %474 = shufflevector <4 x i32> %469, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %475 = bitcast <4 x i32> %474 to <2 x i64>
  %476 = shufflevector <4 x i32> %471, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %477 = bitcast <4 x i32> %476 to <2 x i64>
  %478 = shufflevector <4 x i32> %471, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %479 = bitcast <4 x i32> %478 to <2 x i64>
  %480 = and <2 x i64> %468, <i64 4294967295, i64 4294967295>
  %481 = mul nuw nsw <2 x i64> %480, <i64 25080, i64 25080>
  %482 = xor <2 x i64> %481, %464
  %483 = and <2 x i64> %466, <i64 4294967295, i64 4294967295>
  %484 = mul nuw nsw <2 x i64> %483, <i64 25080, i64 25080>
  %485 = xor <2 x i64> %484, %462
  %486 = mul nuw nsw <2 x i64> %480, <i64 60548, i64 60548>
  %487 = xor <2 x i64> %486, %464
  %488 = mul nuw nsw <2 x i64> %483, <i64 60548, i64 60548>
  %489 = xor <2 x i64> %488, %462
  %490 = and <2 x i64> %479, <i64 4294967295, i64 4294967295>
  %491 = mul nuw nsw <2 x i64> %490, <i64 60548, i64 60548>
  %492 = xor <2 x i64> %491, %475
  %493 = and <2 x i64> %477, <i64 4294967295, i64 4294967295>
  %494 = mul nuw nsw <2 x i64> %493, <i64 60548, i64 60548>
  %495 = xor <2 x i64> %494, %473
  %496 = mul nuw nsw <2 x i64> %490, <i64 25080, i64 25080>
  %497 = xor <2 x i64> %496, %475
  %498 = mul nuw nsw <2 x i64> %493, <i64 25080, i64 25080>
  %499 = xor <2 x i64> %498, %473
  %500 = sub <2 x i64> <i64 32768, i64 32768>, %464
  %501 = add <2 x i64> %500, %475
  %502 = add <2 x i64> %501, %487
  %503 = sub <2 x i64> %502, %497
  %504 = bitcast <2 x i64> %503 to <16 x i8>
  %505 = shufflevector <16 x i8> %504, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %506 = sub <2 x i64> <i64 32768, i64 32768>, %462
  %507 = add <2 x i64> %506, %473
  %508 = add <2 x i64> %507, %489
  %509 = sub <2 x i64> %508, %499
  %510 = bitcast <2 x i64> %509 to <16 x i8>
  %511 = shufflevector <16 x i8> %510, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %512 = sub <2 x i64> %500, %475
  %513 = add <2 x i64> %512, %492
  %514 = add <2 x i64> %513, %482
  %515 = bitcast <2 x i64> %514 to <16 x i8>
  %516 = shufflevector <16 x i8> %515, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %517 = sub <2 x i64> %506, %473
  %518 = add <2 x i64> %517, %495
  %519 = add <2 x i64> %518, %485
  %520 = bitcast <2 x i64> %519 to <16 x i8>
  %521 = shufflevector <16 x i8> %520, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %522 = bitcast <16 x i8> %505 to <4 x i32>
  %523 = bitcast <16 x i8> %511 to <4 x i32>
  %524 = shufflevector <4 x i32> %522, <4 x i32> %523, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %525 = shufflevector <4 x i32> %522, <4 x i32> %523, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %526 = shufflevector <4 x i32> %524, <4 x i32> %525, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %527 = bitcast <16 x i8> %516 to <4 x i32>
  %528 = bitcast <16 x i8> %521 to <4 x i32>
  %529 = shufflevector <4 x i32> %527, <4 x i32> %528, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %530 = shufflevector <4 x i32> %527, <4 x i32> %528, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %531 = shufflevector <4 x i32> %529, <4 x i32> %530, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %532 = sub <4 x i32> %230, %278
  %533 = add <4 x i32> %278, %230
  %534 = sub <4 x i32> %245, %295
  %535 = add <4 x i32> %295, %245
  %536 = add <4 x i32> %383, %335
  %537 = add <4 x i32> %368, %335
  %538 = sub <4 x i32> %335, %368
  %539 = sub <4 x i32> %335, %383
  %540 = add <4 x i32> %532, %534
  %541 = ashr <4 x i32> %540, <i32 31, i32 31, i32 31, i32 31>
  %542 = xor <4 x i32> %541, %540
  %543 = sub <4 x i32> %542, %541
  %544 = shufflevector <4 x i32> %541, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %545 = bitcast <4 x i32> %544 to <2 x i64>
  %546 = shufflevector <4 x i32> %541, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %547 = bitcast <4 x i32> %546 to <2 x i64>
  %548 = shufflevector <4 x i32> %543, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %549 = bitcast <4 x i32> %548 to <2 x i64>
  %550 = shufflevector <4 x i32> %543, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %551 = bitcast <4 x i32> %550 to <2 x i64>
  %552 = and <2 x i64> %551, <i64 4294967295, i64 4294967295>
  %553 = mul nuw nsw <2 x i64> %552, <i64 46340, i64 46340>
  %554 = xor <2 x i64> %553, %547
  %555 = and <2 x i64> %549, <i64 4294967295, i64 4294967295>
  %556 = mul nuw nsw <2 x i64> %555, <i64 46340, i64 46340>
  %557 = xor <2 x i64> %556, %545
  %558 = sub <2 x i64> <i64 32768, i64 32768>, %547
  %559 = add <2 x i64> %558, %554
  %560 = bitcast <2 x i64> %559 to <16 x i8>
  %561 = shufflevector <16 x i8> %560, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %562 = sub <2 x i64> <i64 32768, i64 32768>, %545
  %563 = add <2 x i64> %562, %557
  %564 = bitcast <2 x i64> %563 to <16 x i8>
  %565 = shufflevector <16 x i8> %564, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %566 = bitcast <16 x i8> %561 to <4 x i32>
  %567 = bitcast <16 x i8> %565 to <4 x i32>
  %568 = shufflevector <4 x i32> %566, <4 x i32> %567, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %569 = shufflevector <4 x i32> %566, <4 x i32> %567, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %570 = shufflevector <4 x i32> %568, <4 x i32> %569, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %571 = sub <4 x i32> %534, %532
  %572 = ashr <4 x i32> %571, <i32 31, i32 31, i32 31, i32 31>
  %573 = xor <4 x i32> %572, %571
  %574 = sub <4 x i32> %573, %572
  %575 = shufflevector <4 x i32> %572, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %576 = bitcast <4 x i32> %575 to <2 x i64>
  %577 = shufflevector <4 x i32> %572, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %578 = bitcast <4 x i32> %577 to <2 x i64>
  %579 = shufflevector <4 x i32> %574, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %580 = bitcast <4 x i32> %579 to <2 x i64>
  %581 = shufflevector <4 x i32> %574, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %582 = bitcast <4 x i32> %581 to <2 x i64>
  %583 = and <2 x i64> %582, <i64 4294967295, i64 4294967295>
  %584 = mul nuw nsw <2 x i64> %583, <i64 46340, i64 46340>
  %585 = xor <2 x i64> %584, %578
  %586 = and <2 x i64> %580, <i64 4294967295, i64 4294967295>
  %587 = mul nuw nsw <2 x i64> %586, <i64 46340, i64 46340>
  %588 = xor <2 x i64> %587, %576
  %589 = sub <2 x i64> <i64 32768, i64 32768>, %578
  %590 = add <2 x i64> %589, %585
  %591 = bitcast <2 x i64> %590 to <16 x i8>
  %592 = shufflevector <16 x i8> %591, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %593 = sub <2 x i64> <i64 32768, i64 32768>, %576
  %594 = add <2 x i64> %593, %588
  %595 = bitcast <2 x i64> %594 to <16 x i8>
  %596 = shufflevector <16 x i8> %595, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %597 = bitcast <16 x i8> %592 to <4 x i32>
  %598 = bitcast <16 x i8> %596 to <4 x i32>
  %599 = shufflevector <4 x i32> %597, <4 x i32> %598, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %600 = shufflevector <4 x i32> %597, <4 x i32> %598, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %601 = shufflevector <4 x i32> %599, <4 x i32> %600, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %602 = add <4 x i32> %299, %296
  %603 = add <4 x i32> %531, %452
  %604 = sub <4 x i32> %452, %531
  %605 = sub <4 x i32> %296, %299
  %606 = sub <4 x i32> %303, %300
  %607 = sub <4 x i32> %457, %526
  %608 = add <4 x i32> %526, %457
  %609 = add <4 x i32> %300, %303
  %610 = add <4 x i32> %536, %535
  %611 = add <4 x i32> %570, %537
  %612 = add <4 x i32> %601, %538
  %613 = add <4 x i32> %539, %533
  %614 = sub <4 x i32> %539, %533
  %615 = sub <4 x i32> %538, %601
  %616 = sub <4 x i32> %537, %570
  %617 = sub <4 x i32> %536, %535
  %618 = add <4 x i32> %604, %607
  %619 = ashr <4 x i32> %618, <i32 31, i32 31, i32 31, i32 31>
  %620 = xor <4 x i32> %619, %618
  %621 = sub <4 x i32> %620, %619
  %622 = shufflevector <4 x i32> %619, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %623 = bitcast <4 x i32> %622 to <2 x i64>
  %624 = shufflevector <4 x i32> %619, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %625 = bitcast <4 x i32> %624 to <2 x i64>
  %626 = shufflevector <4 x i32> %621, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %627 = bitcast <4 x i32> %626 to <2 x i64>
  %628 = shufflevector <4 x i32> %621, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %629 = bitcast <4 x i32> %628 to <2 x i64>
  %630 = and <2 x i64> %629, <i64 4294967295, i64 4294967295>
  %631 = mul nuw nsw <2 x i64> %630, <i64 46340, i64 46340>
  %632 = xor <2 x i64> %631, %625
  %633 = and <2 x i64> %627, <i64 4294967295, i64 4294967295>
  %634 = mul nuw nsw <2 x i64> %633, <i64 46340, i64 46340>
  %635 = xor <2 x i64> %634, %623
  %636 = sub <2 x i64> <i64 32768, i64 32768>, %625
  %637 = add <2 x i64> %636, %632
  %638 = bitcast <2 x i64> %637 to <16 x i8>
  %639 = shufflevector <16 x i8> %638, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %640 = sub <2 x i64> <i64 32768, i64 32768>, %623
  %641 = add <2 x i64> %640, %635
  %642 = bitcast <2 x i64> %641 to <16 x i8>
  %643 = shufflevector <16 x i8> %642, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %644 = bitcast <16 x i8> %639 to <4 x i32>
  %645 = bitcast <16 x i8> %643 to <4 x i32>
  %646 = shufflevector <4 x i32> %644, <4 x i32> %645, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %647 = shufflevector <4 x i32> %644, <4 x i32> %645, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %648 = shufflevector <4 x i32> %646, <4 x i32> %647, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %649 = sub <4 x i32> %607, %604
  %650 = ashr <4 x i32> %649, <i32 31, i32 31, i32 31, i32 31>
  %651 = xor <4 x i32> %650, %649
  %652 = sub <4 x i32> %651, %650
  %653 = shufflevector <4 x i32> %650, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %654 = bitcast <4 x i32> %653 to <2 x i64>
  %655 = shufflevector <4 x i32> %650, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %656 = bitcast <4 x i32> %655 to <2 x i64>
  %657 = shufflevector <4 x i32> %652, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %658 = bitcast <4 x i32> %657 to <2 x i64>
  %659 = shufflevector <4 x i32> %652, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %660 = bitcast <4 x i32> %659 to <2 x i64>
  %661 = and <2 x i64> %660, <i64 4294967295, i64 4294967295>
  %662 = mul nuw nsw <2 x i64> %661, <i64 46340, i64 46340>
  %663 = xor <2 x i64> %662, %656
  %664 = and <2 x i64> %658, <i64 4294967295, i64 4294967295>
  %665 = mul nuw nsw <2 x i64> %664, <i64 46340, i64 46340>
  %666 = xor <2 x i64> %665, %654
  %667 = sub <2 x i64> <i64 32768, i64 32768>, %656
  %668 = add <2 x i64> %667, %663
  %669 = bitcast <2 x i64> %668 to <16 x i8>
  %670 = shufflevector <16 x i8> %669, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %671 = sub <2 x i64> <i64 32768, i64 32768>, %654
  %672 = add <2 x i64> %671, %666
  %673 = bitcast <2 x i64> %672 to <16 x i8>
  %674 = shufflevector <16 x i8> %673, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %675 = bitcast <16 x i8> %670 to <4 x i32>
  %676 = bitcast <16 x i8> %674 to <4 x i32>
  %677 = shufflevector <4 x i32> %675, <4 x i32> %676, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %678 = shufflevector <4 x i32> %675, <4 x i32> %676, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %679 = shufflevector <4 x i32> %677, <4 x i32> %678, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %680 = add <4 x i32> %605, %606
  %681 = ashr <4 x i32> %680, <i32 31, i32 31, i32 31, i32 31>
  %682 = xor <4 x i32> %681, %680
  %683 = sub <4 x i32> %682, %681
  %684 = shufflevector <4 x i32> %681, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %685 = bitcast <4 x i32> %684 to <2 x i64>
  %686 = shufflevector <4 x i32> %681, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %687 = bitcast <4 x i32> %686 to <2 x i64>
  %688 = shufflevector <4 x i32> %683, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %689 = bitcast <4 x i32> %688 to <2 x i64>
  %690 = shufflevector <4 x i32> %683, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %691 = bitcast <4 x i32> %690 to <2 x i64>
  %692 = and <2 x i64> %691, <i64 4294967295, i64 4294967295>
  %693 = mul nuw nsw <2 x i64> %692, <i64 46340, i64 46340>
  %694 = xor <2 x i64> %693, %687
  %695 = and <2 x i64> %689, <i64 4294967295, i64 4294967295>
  %696 = mul nuw nsw <2 x i64> %695, <i64 46340, i64 46340>
  %697 = xor <2 x i64> %696, %685
  %698 = sub <2 x i64> <i64 32768, i64 32768>, %687
  %699 = add <2 x i64> %698, %694
  %700 = bitcast <2 x i64> %699 to <16 x i8>
  %701 = shufflevector <16 x i8> %700, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %702 = sub <2 x i64> <i64 32768, i64 32768>, %685
  %703 = add <2 x i64> %702, %697
  %704 = bitcast <2 x i64> %703 to <16 x i8>
  %705 = shufflevector <16 x i8> %704, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %706 = bitcast <16 x i8> %701 to <4 x i32>
  %707 = bitcast <16 x i8> %705 to <4 x i32>
  %708 = shufflevector <4 x i32> %706, <4 x i32> %707, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %709 = shufflevector <4 x i32> %706, <4 x i32> %707, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %710 = shufflevector <4 x i32> %708, <4 x i32> %709, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %711 = sub <4 x i32> %606, %605
  %712 = ashr <4 x i32> %711, <i32 31, i32 31, i32 31, i32 31>
  %713 = xor <4 x i32> %712, %711
  %714 = sub <4 x i32> %713, %712
  %715 = shufflevector <4 x i32> %712, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %716 = bitcast <4 x i32> %715 to <2 x i64>
  %717 = shufflevector <4 x i32> %712, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %718 = bitcast <4 x i32> %717 to <2 x i64>
  %719 = shufflevector <4 x i32> %714, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %720 = bitcast <4 x i32> %719 to <2 x i64>
  %721 = shufflevector <4 x i32> %714, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %722 = bitcast <4 x i32> %721 to <2 x i64>
  %723 = and <2 x i64> %722, <i64 4294967295, i64 4294967295>
  %724 = mul nuw nsw <2 x i64> %723, <i64 46340, i64 46340>
  %725 = xor <2 x i64> %724, %718
  %726 = and <2 x i64> %720, <i64 4294967295, i64 4294967295>
  %727 = mul nuw nsw <2 x i64> %726, <i64 46340, i64 46340>
  %728 = xor <2 x i64> %727, %716
  %729 = sub <2 x i64> <i64 32768, i64 32768>, %718
  %730 = add <2 x i64> %729, %725
  %731 = bitcast <2 x i64> %730 to <16 x i8>
  %732 = shufflevector <16 x i8> %731, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %733 = sub <2 x i64> <i64 32768, i64 32768>, %716
  %734 = add <2 x i64> %733, %728
  %735 = bitcast <2 x i64> %734 to <16 x i8>
  %736 = shufflevector <16 x i8> %735, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %737 = bitcast <16 x i8> %732 to <4 x i32>
  %738 = bitcast <16 x i8> %736 to <4 x i32>
  %739 = shufflevector <4 x i32> %737, <4 x i32> %738, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %740 = shufflevector <4 x i32> %737, <4 x i32> %738, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %741 = shufflevector <4 x i32> %739, <4 x i32> %740, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %742 = add <4 x i32> %610, %609
  %743 = bitcast <2 x i64>* %0 to <4 x i32>*
  store <4 x i32> %742, <4 x i32>* %743, align 16
  %744 = add <4 x i32> %611, %608
  store <4 x i32> %744, <4 x i32>* %3, align 16
  %745 = add <4 x i32> %648, %612
  store <4 x i32> %745, <4 x i32>* %199, align 16
  %746 = add <4 x i32> %710, %613
  store <4 x i32> %746, <4 x i32>* %149, align 16
  %747 = add <4 x i32> %741, %614
  store <4 x i32> %747, <4 x i32>* %337, align 16
  %748 = add <4 x i32> %679, %615
  store <4 x i32> %748, <4 x i32>* %101, align 16
  %749 = add <4 x i32> %616, %603
  store <4 x i32> %749, <4 x i32>* %247, align 16
  %750 = add <4 x i32> %617, %602
  store <4 x i32> %750, <4 x i32>* %51, align 16
  %751 = sub <4 x i32> %617, %602
  %752 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 8
  %753 = bitcast <2 x i64>* %752 to <4 x i32>*
  store <4 x i32> %751, <4 x i32>* %753, align 16
  %754 = sub <4 x i32> %616, %603
  %755 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 9
  %756 = bitcast <2 x i64>* %755 to <4 x i32>*
  store <4 x i32> %754, <4 x i32>* %756, align 16
  %757 = sub <4 x i32> %615, %679
  %758 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 10
  %759 = bitcast <2 x i64>* %758 to <4 x i32>*
  store <4 x i32> %757, <4 x i32>* %759, align 16
  %760 = sub <4 x i32> %614, %741
  %761 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 11
  %762 = bitcast <2 x i64>* %761 to <4 x i32>*
  store <4 x i32> %760, <4 x i32>* %762, align 16
  %763 = sub <4 x i32> %613, %710
  %764 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 12
  %765 = bitcast <2 x i64>* %764 to <4 x i32>*
  store <4 x i32> %763, <4 x i32>* %765, align 16
  %766 = sub <4 x i32> %612, %648
  %767 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 13
  %768 = bitcast <2 x i64>* %767 to <4 x i32>*
  store <4 x i32> %766, <4 x i32>* %768, align 16
  %769 = sub <4 x i32> %611, %608
  %770 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 14
  %771 = bitcast <2 x i64>* %770 to <4 x i32>*
  store <4 x i32> %769, <4 x i32>* %771, align 16
  %772 = sub <4 x i32> %610, %609
  %773 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 15
  %774 = bitcast <2 x i64>* %773 to <4 x i32>*
  store <4 x i32> %772, <4 x i32>* %774, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct16x16_10_add_sse2(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [16 x <2 x i64>], align 16
  %6 = alloca [16 x <2 x i64>], align 16
  %7 = alloca [16 x <2 x i64>], align 16
  %8 = alloca [2 x [16 x <2 x i64>]], align 16
  %9 = bitcast [16 x <2 x i64>]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 256, i1 false)
  %10 = icmp eq i32 %3, 8
  br i1 %10, label %11, label %509

11:                                               ; preds = %4
  %12 = bitcast [16 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %12) #6
  %13 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  %14 = bitcast <2 x i64>* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 192, i1 false)
  %15 = bitcast [16 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %15) #6
  %16 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %17 = bitcast <2 x i64>* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 224, i1 false)
  %18 = bitcast i32* %0 to <4 x i32>*
  %19 = load <4 x i32>, <4 x i32>* %18, align 16
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = bitcast i32* %20 to <4 x i32>*
  %22 = load <4 x i32>, <4 x i32>* %21, align 16
  %23 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %19, <4 x i32> %22) #6
  %24 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 0
  %25 = bitcast [16 x <2 x i64>]* %6 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %25, align 16
  %26 = getelementptr inbounds i32, i32* %0, i64 16
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 16
  %29 = getelementptr inbounds i32, i32* %0, i64 20
  %30 = bitcast i32* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 16
  %32 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %28, <4 x i32> %31) #6
  %33 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 1
  %34 = bitcast <2 x i64>* %33 to <8 x i16>*
  store <8 x i16> %32, <8 x i16>* %34, align 16
  %35 = getelementptr inbounds i32, i32* %0, i64 32
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 16
  %38 = getelementptr inbounds i32, i32* %0, i64 36
  %39 = bitcast i32* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 16
  %41 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %37, <4 x i32> %40) #6
  %42 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 2
  %43 = bitcast <2 x i64>* %42 to <8 x i16>*
  store <8 x i16> %41, <8 x i16>* %43, align 16
  %44 = getelementptr inbounds i32, i32* %0, i64 48
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 16
  %47 = getelementptr inbounds i32, i32* %0, i64 52
  %48 = bitcast i32* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 16
  %50 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %46, <4 x i32> %49) #6
  %51 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 3
  %52 = bitcast <2 x i64>* %51 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %52, align 16
  %53 = shufflevector <8 x i16> %23, <8 x i16> %32, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %54 = shufflevector <8 x i16> %41, <8 x i16> %50, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = bitcast <8 x i16> %53 to <4 x i32>
  %56 = bitcast <8 x i16> %54 to <4 x i32>
  %57 = shufflevector <4 x i32> %55, <4 x i32> %56, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %58 = bitcast [16 x <2 x i64>]* %7 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %58, align 16
  %59 = shufflevector <4 x i32> %55, <4 x i32> %56, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %60 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 1
  %61 = bitcast <2 x i64>* %60 to <4 x i32>*
  store <4 x i32> %59, <4 x i32>* %61, align 16
  %62 = bitcast <4 x i32> %57 to <8 x i16>
  %63 = shufflevector <8 x i16> %62, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %64 = bitcast <4 x i32> %59 to <8 x i16>
  %65 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %64, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %66 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1606, i16 -16305, i16 1606, i16 -16305, i16 1606, i16 -16305, i16 1606, i16 -16305>, <8 x i16> %63) #6
  %67 = add <4 x i32> %66, <i32 8192, i32 8192, i32 8192, i32 8192>
  %68 = ashr <4 x i32> %67, <i32 14, i32 14, i32 14, i32 14>
  %69 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 16305, i16 1606, i16 16305, i16 1606, i16 16305, i16 1606, i16 16305, i16 1606>, <8 x i16> %63) #6
  %70 = add <4 x i32> %69, <i32 8192, i32 8192, i32 8192, i32 8192>
  %71 = ashr <4 x i32> %70, <i32 14, i32 14, i32 14, i32 14>
  %72 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %68, <4 x i32> %71) #6
  %73 = bitcast <8 x i16> %72 to <2 x i64>
  %74 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 15679, i16 -4756, i16 15679, i16 -4756, i16 15679, i16 -4756, i16 15679, i16 -4756>, <8 x i16> %65) #6
  %75 = add <4 x i32> %74, <i32 8192, i32 8192, i32 8192, i32 8192>
  %76 = ashr <4 x i32> %75, <i32 14, i32 14, i32 14, i32 14>
  %77 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 4756, i16 15679, i16 4756, i16 15679, i16 4756, i16 15679, i16 4756, i16 15679>, <8 x i16> %65) #6
  %78 = add <4 x i32> %77, <i32 8192, i32 8192, i32 8192, i32 8192>
  %79 = ashr <4 x i32> %78, <i32 14, i32 14, i32 14, i32 14>
  %80 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %76, <4 x i32> %79) #6
  %81 = bitcast <8 x i16> %80 to <2 x i64>
  %82 = shufflevector <8 x i16> %64, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %83 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 3196, i16 -16069, i16 3196, i16 -16069, i16 3196, i16 -16069, i16 3196, i16 -16069>, <8 x i16> %82) #6
  %84 = add <4 x i32> %83, <i32 8192, i32 8192, i32 8192, i32 8192>
  %85 = ashr <4 x i32> %84, <i32 14, i32 14, i32 14, i32 14>
  %86 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 16069, i16 3196, i16 16069, i16 3196, i16 16069, i16 3196, i16 16069, i16 3196>, <8 x i16> %82) #6
  %87 = add <4 x i32> %86, <i32 8192, i32 8192, i32 8192, i32 8192>
  %88 = ashr <4 x i32> %87, <i32 14, i32 14, i32 14, i32 14>
  %89 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %85, <4 x i32> %88) #6
  %90 = bitcast <8 x i16> %89 to <2 x i64>
  %91 = shufflevector <2 x i64> %81, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %92 = shufflevector <2 x i64> %73, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %93 = shufflevector <8 x i16> %62, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %94 = bitcast <2 x i64> %92 to <8 x i16>
  %95 = shufflevector <8 x i16> %72, <8 x i16> %94, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %96 = bitcast <2 x i64> %91 to <8 x i16>
  %97 = shufflevector <8 x i16> %80, <8 x i16> %96, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %98 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %93, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %99 = add <4 x i32> %98, <i32 8192, i32 8192, i32 8192, i32 8192>
  %100 = ashr <4 x i32> %99, <i32 14, i32 14, i32 14, i32 14>
  %101 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %100, <4 x i32> %100) #6
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270>, <8 x i16> %95) #6
  %103 = add <4 x i32> %102, <i32 8192, i32 8192, i32 8192, i32 8192>
  %104 = ashr <4 x i32> %103, <i32 14, i32 14, i32 14, i32 14>
  %105 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 6270, i16 15137, i16 6270, i16 15137, i16 6270, i16 15137, i16 6270, i16 15137>, <8 x i16> %95) #6
  %106 = add <4 x i32> %105, <i32 8192, i32 8192, i32 8192, i32 8192>
  %107 = ashr <4 x i32> %106, <i32 14, i32 14, i32 14, i32 14>
  %108 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %104, <4 x i32> %107) #6
  %109 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 -6270, i16 -15137, i16 -6270, i16 -15137, i16 -6270, i16 -15137, i16 -6270, i16 -15137>, <8 x i16> %97) #6
  %110 = add <4 x i32> %109, <i32 8192, i32 8192, i32 8192, i32 8192>
  %111 = ashr <4 x i32> %110, <i32 14, i32 14, i32 14, i32 14>
  %112 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270>, <8 x i16> %97) #6
  %113 = add <4 x i32> %112, <i32 8192, i32 8192, i32 8192, i32 8192>
  %114 = ashr <4 x i32> %113, <i32 14, i32 14, i32 14, i32 14>
  %115 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %111, <4 x i32> %114) #6
  %116 = shufflevector <2 x i64> %90, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %117 = bitcast <2 x i64> %116 to <8 x i16>
  %118 = shufflevector <8 x i16> %89, <8 x i16> %117, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %119 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>, <8 x i16> %118) #6
  %120 = add <4 x i32> %119, <i32 8192, i32 8192, i32 8192, i32 8192>
  %121 = ashr <4 x i32> %120, <i32 14, i32 14, i32 14, i32 14>
  %122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585>, <8 x i16> %118) #6
  %123 = add <4 x i32> %122, <i32 8192, i32 8192, i32 8192, i32 8192>
  %124 = ashr <4 x i32> %123, <i32 14, i32 14, i32 14, i32 14>
  %125 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %121, <4 x i32> %124) #6
  %126 = add <8 x i16> %80, %72
  %127 = bitcast <8 x i16> %126 to <2 x i64>
  %128 = add <8 x i16> %115, %108
  %129 = bitcast <8 x i16> %128 to <2 x i64>
  %130 = sub <8 x i16> %108, %115
  %131 = bitcast <8 x i16> %130 to <2 x i64>
  %132 = sub <8 x i16> %72, %80
  %133 = bitcast <8 x i16> %132 to <2 x i64>
  %134 = shufflevector <2 x i64> %133, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %135 = shufflevector <2 x i64> %131, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %136 = shufflevector <2 x i64> %129, <2 x i64> <i64 undef, i64 0>, <2 x i32> <i32 1, i32 3>
  %137 = shufflevector <2 x i64> %127, <2 x i64> <i64 undef, i64 0>, <2 x i32> <i32 1, i32 3>
  %138 = bitcast <2 x i64> %135 to <8 x i16>
  %139 = shufflevector <8 x i16> %130, <8 x i16> %138, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %140 = bitcast <2 x i64> %134 to <8 x i16>
  %141 = shufflevector <8 x i16> %132, <8 x i16> %140, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %142 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585>, <8 x i16> %139) #6
  %143 = add <4 x i32> %142, <i32 8192, i32 8192, i32 8192, i32 8192>
  %144 = ashr <4 x i32> %143, <i32 14, i32 14, i32 14, i32 14>
  %145 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>, <8 x i16> %139) #6
  %146 = add <4 x i32> %145, <i32 8192, i32 8192, i32 8192, i32 8192>
  %147 = ashr <4 x i32> %146, <i32 14, i32 14, i32 14, i32 14>
  %148 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %144, <4 x i32> %147) #6
  %149 = bitcast <8 x i16> %148 to <2 x i64>
  %150 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585>, <8 x i16> %141) #6
  %151 = add <4 x i32> %150, <i32 8192, i32 8192, i32 8192, i32 8192>
  %152 = ashr <4 x i32> %151, <i32 14, i32 14, i32 14, i32 14>
  %153 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>, <8 x i16> %141) #6
  %154 = add <4 x i32> %153, <i32 8192, i32 8192, i32 8192, i32 8192>
  %155 = ashr <4 x i32> %154, <i32 14, i32 14, i32 14, i32 14>
  %156 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %152, <4 x i32> %155) #6
  %157 = bitcast <8 x i16> %156 to <2 x i64>
  %158 = shufflevector <2 x i64> %149, <2 x i64> <i64 undef, i64 0>, <2 x i32> <i32 1, i32 3>
  %159 = shufflevector <2 x i64> %157, <2 x i64> <i64 undef, i64 0>, <2 x i32> <i32 1, i32 3>
  %160 = add <8 x i16> %101, %89
  %161 = bitcast <8 x i16> %160 to <2 x i64>
  %162 = add <8 x i16> %125, %101
  %163 = bitcast <8 x i16> %162 to <2 x i64>
  %164 = sub <8 x i16> %101, %125
  %165 = bitcast <8 x i16> %164 to <2 x i64>
  %166 = sub <8 x i16> %101, %89
  %167 = bitcast <8 x i16> %166 to <2 x i64>
  %168 = shufflevector <2 x i64> %161, <2 x i64> <i64 undef, i64 0>, <2 x i32> <i32 1, i32 3>
  %169 = shufflevector <2 x i64> %163, <2 x i64> <i64 undef, i64 0>, <2 x i32> <i32 1, i32 3>
  %170 = shufflevector <2 x i64> %165, <2 x i64> <i64 undef, i64 0>, <2 x i32> <i32 1, i32 3>
  %171 = shufflevector <2 x i64> %167, <2 x i64> <i64 undef, i64 0>, <2 x i32> <i32 1, i32 3>
  %172 = bitcast <2 x i64> %168 to <8 x i16>
  %173 = bitcast <2 x i64> %137 to <8 x i16>
  %174 = add <8 x i16> %172, %173
  %175 = bitcast [16 x <2 x i64>]* %7 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %175, align 16
  %176 = bitcast <2 x i64> %136 to <8 x i16>
  %177 = add <8 x i16> %162, %176
  %178 = bitcast <2 x i64>* %60 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %178, align 16
  %179 = bitcast <2 x i64> %169 to <8 x i16>
  %180 = bitcast <2 x i64> %158 to <8 x i16>
  %181 = add <8 x i16> %180, %179
  %182 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 2
  %183 = bitcast <2 x i64>* %182 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %183, align 16
  %184 = bitcast <2 x i64> %159 to <8 x i16>
  %185 = add <8 x i16> %160, %184
  %186 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 3
  %187 = bitcast <2 x i64>* %186 to <8 x i16>*
  store <8 x i16> %185, <8 x i16>* %187, align 16
  %188 = add <8 x i16> %156, %166
  %189 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 4
  %190 = bitcast <2 x i64>* %189 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %190, align 16
  %191 = bitcast <2 x i64> %170 to <8 x i16>
  %192 = add <8 x i16> %148, %191
  %193 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 5
  %194 = bitcast <2 x i64>* %193 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %194, align 16
  %195 = add <8 x i16> %164, %128
  %196 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 6
  %197 = bitcast <2 x i64>* %196 to <8 x i16>*
  store <8 x i16> %195, <8 x i16>* %197, align 16
  %198 = bitcast <2 x i64> %171 to <8 x i16>
  %199 = add <8 x i16> %126, %198
  %200 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 7
  %201 = bitcast <2 x i64>* %200 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %201, align 16
  %202 = sub <8 x i16> %198, %126
  %203 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 8
  %204 = bitcast <2 x i64>* %203 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %204, align 16
  %205 = sub <8 x i16> %164, %128
  %206 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 9
  %207 = bitcast <2 x i64>* %206 to <8 x i16>*
  store <8 x i16> %205, <8 x i16>* %207, align 16
  %208 = sub <8 x i16> %191, %148
  %209 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 10
  %210 = bitcast <2 x i64>* %209 to <8 x i16>*
  store <8 x i16> %208, <8 x i16>* %210, align 16
  %211 = sub <8 x i16> %166, %156
  %212 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 11
  %213 = bitcast <2 x i64>* %212 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %213, align 16
  %214 = sub <8 x i16> %160, %184
  %215 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 12
  %216 = bitcast <2 x i64>* %215 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %216, align 16
  %217 = sub <8 x i16> %179, %180
  %218 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 13
  %219 = bitcast <2 x i64>* %218 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %219, align 16
  %220 = sub <8 x i16> %162, %176
  %221 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 14
  %222 = bitcast <2 x i64>* %221 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %222, align 16
  %223 = sub <8 x i16> %172, %173
  %224 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 15
  %225 = bitcast <2 x i64>* %224 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %225, align 16
  %226 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 4
  %227 = bitcast <2 x i64>* %226 to <8 x i16>*
  %228 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 5
  %229 = bitcast <2 x i64>* %228 to <8 x i16>*
  %230 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 6
  %231 = bitcast <2 x i64>* %230 to <8 x i16>*
  %232 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 7
  %233 = bitcast <2 x i64>* %232 to <8 x i16>*
  %234 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 8
  %235 = bitcast <2 x i64>* %234 to <8 x i16>*
  %236 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 9
  %237 = bitcast <2 x i64>* %236 to <8 x i16>*
  %238 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 10
  %239 = bitcast <2 x i64>* %238 to <8 x i16>*
  %240 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 11
  %241 = bitcast <2 x i64>* %240 to <8 x i16>*
  %242 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 12
  %243 = bitcast <2 x i64>* %242 to <8 x i16>*
  %244 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 13
  %245 = bitcast <2 x i64>* %244 to <8 x i16>*
  %246 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 14
  %247 = bitcast <2 x i64>* %246 to <8 x i16>*
  %248 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 15
  %249 = bitcast <2 x i64>* %248 to <8 x i16>*
  %250 = sext i32 %2 to i64
  br label %251

251:                                              ; preds = %11, %504
  %252 = phi i64 [ 0, %11 ], [ %506, %504 ]
  %253 = phi i16* [ %1, %11 ], [ %505, %504 ]
  %254 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %7, i64 0, i64 %252
  %255 = bitcast <2 x i64>* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 16
  %257 = getelementptr inbounds <2 x i64>, <2 x i64>* %254, i64 1
  %258 = bitcast <2 x i64>* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 16
  %260 = shufflevector <8 x i16> %256, <8 x i16> %259, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %261 = getelementptr inbounds <2 x i64>, <2 x i64>* %254, i64 2
  %262 = bitcast <2 x i64>* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 16
  %264 = getelementptr inbounds <2 x i64>, <2 x i64>* %254, i64 3
  %265 = bitcast <2 x i64>* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 16
  %267 = shufflevector <8 x i16> %263, <8 x i16> %266, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %268 = getelementptr inbounds <2 x i64>, <2 x i64>* %254, i64 4
  %269 = bitcast <2 x i64>* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 16
  %271 = getelementptr inbounds <2 x i64>, <2 x i64>* %254, i64 5
  %272 = bitcast <2 x i64>* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 16
  %274 = shufflevector <8 x i16> %270, <8 x i16> %273, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %275 = getelementptr inbounds <2 x i64>, <2 x i64>* %254, i64 6
  %276 = bitcast <2 x i64>* %275 to <8 x i16>*
  %277 = load <8 x i16>, <8 x i16>* %276, align 16
  %278 = getelementptr inbounds <2 x i64>, <2 x i64>* %254, i64 7
  %279 = bitcast <2 x i64>* %278 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 16
  %281 = shufflevector <8 x i16> %277, <8 x i16> %280, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %282 = bitcast <8 x i16> %260 to <4 x i32>
  %283 = bitcast <8 x i16> %267 to <4 x i32>
  %284 = shufflevector <4 x i32> %282, <4 x i32> %283, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %285 = bitcast <4 x i32> %284 to <2 x i64>
  %286 = bitcast <8 x i16> %274 to <4 x i32>
  %287 = bitcast <8 x i16> %281 to <4 x i32>
  %288 = shufflevector <4 x i32> %286, <4 x i32> %287, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %289 = bitcast <4 x i32> %288 to <2 x i64>
  %290 = shufflevector <4 x i32> %282, <4 x i32> %283, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %291 = bitcast <4 x i32> %290 to <2 x i64>
  %292 = shufflevector <4 x i32> %286, <4 x i32> %287, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %293 = bitcast <4 x i32> %292 to <2 x i64>
  %294 = shufflevector <2 x i64> %285, <2 x i64> %289, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %294, <2 x i64>* %24, align 16
  %295 = shufflevector <2 x i64> %285, <2 x i64> %289, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %295, <2 x i64>* %33, align 16
  %296 = shufflevector <2 x i64> %291, <2 x i64> %293, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %296, <2 x i64>* %42, align 16
  %297 = shufflevector <2 x i64> %291, <2 x i64> %293, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %297, <2 x i64>* %51, align 16
  %298 = bitcast <2 x i64> %295 to <8 x i16>
  %299 = shufflevector <8 x i16> %298, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %300 = shufflevector <8 x i16> %298, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %301 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %299, <8 x i16> <i16 1606, i16 -16305, i16 1606, i16 -16305, i16 1606, i16 -16305, i16 1606, i16 -16305>) #6
  %302 = add <4 x i32> %301, <i32 8192, i32 8192, i32 8192, i32 8192>
  %303 = ashr <4 x i32> %302, <i32 14, i32 14, i32 14, i32 14>
  %304 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %300, <8 x i16> <i16 1606, i16 -16305, i16 1606, i16 -16305, i16 1606, i16 -16305, i16 1606, i16 -16305>) #6
  %305 = add <4 x i32> %304, <i32 8192, i32 8192, i32 8192, i32 8192>
  %306 = ashr <4 x i32> %305, <i32 14, i32 14, i32 14, i32 14>
  %307 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %303, <4 x i32> %306) #6
  %308 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %299, <8 x i16> <i16 16305, i16 1606, i16 16305, i16 1606, i16 16305, i16 1606, i16 16305, i16 1606>) #6
  %309 = add <4 x i32> %308, <i32 8192, i32 8192, i32 8192, i32 8192>
  %310 = ashr <4 x i32> %309, <i32 14, i32 14, i32 14, i32 14>
  %311 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %300, <8 x i16> <i16 16305, i16 1606, i16 16305, i16 1606, i16 16305, i16 1606, i16 16305, i16 1606>) #6
  %312 = add <4 x i32> %311, <i32 8192, i32 8192, i32 8192, i32 8192>
  %313 = ashr <4 x i32> %312, <i32 14, i32 14, i32 14, i32 14>
  %314 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %310, <4 x i32> %313) #6
  %315 = bitcast <2 x i64> %297 to <8 x i16>
  %316 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %315, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %317 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %315, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %318 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %316, <8 x i16> <i16 15679, i16 -4756, i16 15679, i16 -4756, i16 15679, i16 -4756, i16 15679, i16 -4756>) #6
  %319 = add <4 x i32> %318, <i32 8192, i32 8192, i32 8192, i32 8192>
  %320 = ashr <4 x i32> %319, <i32 14, i32 14, i32 14, i32 14>
  %321 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %317, <8 x i16> <i16 15679, i16 -4756, i16 15679, i16 -4756, i16 15679, i16 -4756, i16 15679, i16 -4756>) #6
  %322 = add <4 x i32> %321, <i32 8192, i32 8192, i32 8192, i32 8192>
  %323 = ashr <4 x i32> %322, <i32 14, i32 14, i32 14, i32 14>
  %324 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %320, <4 x i32> %323) #6
  %325 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %316, <8 x i16> <i16 4756, i16 15679, i16 4756, i16 15679, i16 4756, i16 15679, i16 4756, i16 15679>) #6
  %326 = add <4 x i32> %325, <i32 8192, i32 8192, i32 8192, i32 8192>
  %327 = ashr <4 x i32> %326, <i32 14, i32 14, i32 14, i32 14>
  %328 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %317, <8 x i16> <i16 4756, i16 15679, i16 4756, i16 15679, i16 4756, i16 15679, i16 4756, i16 15679>) #6
  %329 = add <4 x i32> %328, <i32 8192, i32 8192, i32 8192, i32 8192>
  %330 = ashr <4 x i32> %329, <i32 14, i32 14, i32 14, i32 14>
  %331 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %327, <4 x i32> %330) #6
  %332 = bitcast <2 x i64> %296 to <8 x i16>
  %333 = shufflevector <8 x i16> %332, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %334 = shufflevector <8 x i16> %332, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %335 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %333, <8 x i16> <i16 3196, i16 -16069, i16 3196, i16 -16069, i16 3196, i16 -16069, i16 3196, i16 -16069>) #6
  %336 = add <4 x i32> %335, <i32 8192, i32 8192, i32 8192, i32 8192>
  %337 = ashr <4 x i32> %336, <i32 14, i32 14, i32 14, i32 14>
  %338 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %334, <8 x i16> <i16 3196, i16 -16069, i16 3196, i16 -16069, i16 3196, i16 -16069, i16 3196, i16 -16069>) #6
  %339 = add <4 x i32> %338, <i32 8192, i32 8192, i32 8192, i32 8192>
  %340 = ashr <4 x i32> %339, <i32 14, i32 14, i32 14, i32 14>
  %341 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %337, <4 x i32> %340) #6
  %342 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %333, <8 x i16> <i16 16069, i16 3196, i16 16069, i16 3196, i16 16069, i16 3196, i16 16069, i16 3196>) #6
  %343 = add <4 x i32> %342, <i32 8192, i32 8192, i32 8192, i32 8192>
  %344 = ashr <4 x i32> %343, <i32 14, i32 14, i32 14, i32 14>
  %345 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %334, <8 x i16> <i16 16069, i16 3196, i16 16069, i16 3196, i16 16069, i16 3196, i16 16069, i16 3196>) #6
  %346 = add <4 x i32> %345, <i32 8192, i32 8192, i32 8192, i32 8192>
  %347 = ashr <4 x i32> %346, <i32 14, i32 14, i32 14, i32 14>
  %348 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %344, <4 x i32> %347) #6
  %349 = bitcast <2 x i64> %294 to <8 x i16>
  %350 = shufflevector <8 x i16> %349, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %351 = shufflevector <8 x i16> %349, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %352 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %350, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %353 = add <4 x i32> %352, <i32 8192, i32 8192, i32 8192, i32 8192>
  %354 = ashr <4 x i32> %353, <i32 14, i32 14, i32 14, i32 14>
  %355 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %351, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %356 = add <4 x i32> %355, <i32 8192, i32 8192, i32 8192, i32 8192>
  %357 = ashr <4 x i32> %356, <i32 14, i32 14, i32 14, i32 14>
  %358 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %354, <4 x i32> %357) #6
  %359 = shufflevector <8 x i16> %314, <8 x i16> %307, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %360 = shufflevector <8 x i16> %314, <8 x i16> %307, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %361 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %359, <8 x i16> <i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137>) #6
  %362 = add <4 x i32> %361, <i32 8192, i32 8192, i32 8192, i32 8192>
  %363 = ashr <4 x i32> %362, <i32 14, i32 14, i32 14, i32 14>
  %364 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %360, <8 x i16> <i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137>) #6
  %365 = add <4 x i32> %364, <i32 8192, i32 8192, i32 8192, i32 8192>
  %366 = ashr <4 x i32> %365, <i32 14, i32 14, i32 14, i32 14>
  %367 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %363, <4 x i32> %366) #6
  %368 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %359, <8 x i16> <i16 15137, i16 6270, i16 15137, i16 6270, i16 15137, i16 6270, i16 15137, i16 6270>) #6
  %369 = add <4 x i32> %368, <i32 8192, i32 8192, i32 8192, i32 8192>
  %370 = ashr <4 x i32> %369, <i32 14, i32 14, i32 14, i32 14>
  %371 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %360, <8 x i16> <i16 15137, i16 6270, i16 15137, i16 6270, i16 15137, i16 6270, i16 15137, i16 6270>) #6
  %372 = add <4 x i32> %371, <i32 8192, i32 8192, i32 8192, i32 8192>
  %373 = ashr <4 x i32> %372, <i32 14, i32 14, i32 14, i32 14>
  %374 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %370, <4 x i32> %373) #6
  %375 = shufflevector <8 x i16> %324, <8 x i16> %331, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %376 = shufflevector <8 x i16> %324, <8 x i16> %331, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %377 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %375, <8 x i16> <i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270>) #6
  %378 = add <4 x i32> %377, <i32 8192, i32 8192, i32 8192, i32 8192>
  %379 = ashr <4 x i32> %378, <i32 14, i32 14, i32 14, i32 14>
  %380 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %376, <8 x i16> <i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270, i16 -15137, i16 6270>) #6
  %381 = add <4 x i32> %380, <i32 8192, i32 8192, i32 8192, i32 8192>
  %382 = ashr <4 x i32> %381, <i32 14, i32 14, i32 14, i32 14>
  %383 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %379, <4 x i32> %382) #6
  %384 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %375, <8 x i16> <i16 -6270, i16 -15137, i16 -6270, i16 -15137, i16 -6270, i16 -15137, i16 -6270, i16 -15137>) #6
  %385 = add <4 x i32> %384, <i32 8192, i32 8192, i32 8192, i32 8192>
  %386 = ashr <4 x i32> %385, <i32 14, i32 14, i32 14, i32 14>
  %387 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %376, <8 x i16> <i16 -6270, i16 -15137, i16 -6270, i16 -15137, i16 -6270, i16 -15137, i16 -6270, i16 -15137>) #6
  %388 = add <4 x i32> %387, <i32 8192, i32 8192, i32 8192, i32 8192>
  %389 = ashr <4 x i32> %388, <i32 14, i32 14, i32 14, i32 14>
  %390 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %386, <4 x i32> %389) #6
  %391 = shufflevector <8 x i16> %348, <8 x i16> %341, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %392 = shufflevector <8 x i16> %348, <8 x i16> %341, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %393 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %391, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %394 = add <4 x i32> %393, <i32 8192, i32 8192, i32 8192, i32 8192>
  %395 = ashr <4 x i32> %394, <i32 14, i32 14, i32 14, i32 14>
  %396 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %392, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %397 = add <4 x i32> %396, <i32 8192, i32 8192, i32 8192, i32 8192>
  %398 = ashr <4 x i32> %397, <i32 14, i32 14, i32 14, i32 14>
  %399 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %395, <4 x i32> %398) #6
  %400 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %391, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %401 = add <4 x i32> %400, <i32 8192, i32 8192, i32 8192, i32 8192>
  %402 = ashr <4 x i32> %401, <i32 14, i32 14, i32 14, i32 14>
  %403 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %392, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %404 = add <4 x i32> %403, <i32 8192, i32 8192, i32 8192, i32 8192>
  %405 = ashr <4 x i32> %404, <i32 14, i32 14, i32 14, i32 14>
  %406 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %402, <4 x i32> %405) #6
  %407 = add <8 x i16> %324, %307
  %408 = add <8 x i16> %390, %367
  %409 = sub <8 x i16> %367, %390
  %410 = sub <8 x i16> %307, %324
  %411 = sub <8 x i16> %314, %331
  %412 = sub <8 x i16> %374, %383
  %413 = add <8 x i16> %383, %374
  %414 = add <8 x i16> %331, %314
  %415 = add <8 x i16> %358, %348
  %416 = add <8 x i16> %406, %358
  %417 = add <8 x i16> %399, %358
  %418 = add <8 x i16> %358, %341
  %419 = sub <8 x i16> %358, %341
  %420 = sub <8 x i16> %358, %399
  %421 = sub <8 x i16> %358, %406
  %422 = sub <8 x i16> %358, %348
  %423 = shufflevector <8 x i16> %412, <8 x i16> %409, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %424 = shufflevector <8 x i16> %412, <8 x i16> %409, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %425 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %423, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %426 = add <4 x i32> %425, <i32 8192, i32 8192, i32 8192, i32 8192>
  %427 = ashr <4 x i32> %426, <i32 14, i32 14, i32 14, i32 14>
  %428 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %424, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %429 = add <4 x i32> %428, <i32 8192, i32 8192, i32 8192, i32 8192>
  %430 = ashr <4 x i32> %429, <i32 14, i32 14, i32 14, i32 14>
  %431 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %427, <4 x i32> %430) #6
  %432 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %423, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %433 = add <4 x i32> %432, <i32 8192, i32 8192, i32 8192, i32 8192>
  %434 = ashr <4 x i32> %433, <i32 14, i32 14, i32 14, i32 14>
  %435 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %424, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %436 = add <4 x i32> %435, <i32 8192, i32 8192, i32 8192, i32 8192>
  %437 = ashr <4 x i32> %436, <i32 14, i32 14, i32 14, i32 14>
  %438 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %434, <4 x i32> %437) #6
  %439 = shufflevector <8 x i16> %411, <8 x i16> %410, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %440 = shufflevector <8 x i16> %411, <8 x i16> %410, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %441 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %439, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %442 = add <4 x i32> %441, <i32 8192, i32 8192, i32 8192, i32 8192>
  %443 = ashr <4 x i32> %442, <i32 14, i32 14, i32 14, i32 14>
  %444 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %440, <8 x i16> <i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585, i16 11585, i16 -11585>) #6
  %445 = add <4 x i32> %444, <i32 8192, i32 8192, i32 8192, i32 8192>
  %446 = ashr <4 x i32> %445, <i32 14, i32 14, i32 14, i32 14>
  %447 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %443, <4 x i32> %446) #6
  %448 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %439, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %449 = add <4 x i32> %448, <i32 8192, i32 8192, i32 8192, i32 8192>
  %450 = ashr <4 x i32> %449, <i32 14, i32 14, i32 14, i32 14>
  %451 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %440, <8 x i16> <i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585, i16 11585>) #6
  %452 = add <4 x i32> %451, <i32 8192, i32 8192, i32 8192, i32 8192>
  %453 = ashr <4 x i32> %452, <i32 14, i32 14, i32 14, i32 14>
  %454 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %450, <4 x i32> %453) #6
  %455 = add <8 x i16> %415, %414
  store <8 x i16> %455, <8 x i16>* %25, align 16
  %456 = add <8 x i16> %416, %413
  store <8 x i16> %456, <8 x i16>* %34, align 16
  %457 = add <8 x i16> %438, %417
  store <8 x i16> %457, <8 x i16>* %43, align 16
  %458 = add <8 x i16> %454, %418
  store <8 x i16> %458, <8 x i16>* %52, align 16
  %459 = add <8 x i16> %447, %419
  store <8 x i16> %459, <8 x i16>* %227, align 16
  %460 = add <8 x i16> %431, %420
  store <8 x i16> %460, <8 x i16>* %229, align 16
  %461 = add <8 x i16> %421, %408
  store <8 x i16> %461, <8 x i16>* %231, align 16
  %462 = add <8 x i16> %422, %407
  store <8 x i16> %462, <8 x i16>* %233, align 16
  %463 = sub <8 x i16> %422, %407
  store <8 x i16> %463, <8 x i16>* %235, align 16
  %464 = sub <8 x i16> %421, %408
  store <8 x i16> %464, <8 x i16>* %237, align 16
  %465 = sub <8 x i16> %420, %431
  store <8 x i16> %465, <8 x i16>* %239, align 16
  %466 = sub <8 x i16> %419, %447
  store <8 x i16> %466, <8 x i16>* %241, align 16
  %467 = sub <8 x i16> %418, %454
  store <8 x i16> %467, <8 x i16>* %243, align 16
  %468 = sub <8 x i16> %417, %438
  store <8 x i16> %468, <8 x i16>* %245, align 16
  %469 = sub <8 x i16> %416, %413
  store <8 x i16> %469, <8 x i16>* %247, align 16
  %470 = sub <8 x i16> %415, %414
  store <8 x i16> %470, <8 x i16>* %249, align 16
  br label %471

471:                                              ; preds = %471, %251
  %472 = phi i64 [ 0, %251 ], [ %502, %471 ]
  %473 = mul nsw i64 %472, %250
  %474 = getelementptr inbounds i16, i16* %253, i64 %473
  %475 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 %472
  %476 = bitcast <2 x i64>* %475 to <8 x i16>*
  %477 = load <8 x i16>, <8 x i16>* %476, align 16
  %478 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %477, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %479 = ashr <8 x i16> %478, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %480 = bitcast i16* %474 to <8 x i16>*
  %481 = load <8 x i16>, <8 x i16>* %480, align 16
  %482 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %481, <8 x i16> %479) #6
  %483 = icmp sgt <8 x i16> %482, zeroinitializer
  %484 = select <8 x i1> %483, <8 x i16> %482, <8 x i16> zeroinitializer
  %485 = icmp slt <8 x i16> %484, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %486 = select <8 x i1> %485, <8 x i16> %484, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %486, <8 x i16>* %480, align 16
  %487 = or i64 %472, 1
  %488 = mul nsw i64 %487, %250
  %489 = getelementptr inbounds i16, i16* %253, i64 %488
  %490 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %6, i64 0, i64 %487
  %491 = bitcast <2 x i64>* %490 to <8 x i16>*
  %492 = load <8 x i16>, <8 x i16>* %491, align 16
  %493 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %492, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %494 = ashr <8 x i16> %493, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %495 = bitcast i16* %489 to <8 x i16>*
  %496 = load <8 x i16>, <8 x i16>* %495, align 16
  %497 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %496, <8 x i16> %494) #6
  %498 = icmp sgt <8 x i16> %497, zeroinitializer
  %499 = select <8 x i1> %498, <8 x i16> %497, <8 x i16> zeroinitializer
  %500 = icmp slt <8 x i16> %499, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %501 = select <8 x i1> %500, <8 x i16> %499, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %501, <8 x i16>* %495, align 16
  %502 = add nuw nsw i64 %472, 2
  %503 = icmp eq i64 %502, 16
  br i1 %503, label %504, label %471

504:                                              ; preds = %471
  %505 = getelementptr inbounds i16, i16* %253, i64 8
  %506 = add nuw nsw i64 %252, 8
  %507 = icmp ult i64 %506, 16
  br i1 %507, label %251, label %508

508:                                              ; preds = %504
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %12) #6
  br label %630

509:                                              ; preds = %4
  %510 = bitcast [2 x [16 x <2 x i64>]]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %510) #6
  %511 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 0, i64 4
  %512 = bitcast <2 x i64>* %511 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %512, i8 -86, i64 448, i1 false)
  %513 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 0, i64 0
  %514 = bitcast i32* %0 to <4 x i32>*
  %515 = load <4 x i32>, <4 x i32>* %514, align 16
  %516 = getelementptr inbounds i32, i32* %0, i64 16
  %517 = bitcast i32* %516 to <4 x i32>*
  %518 = load <4 x i32>, <4 x i32>* %517, align 16
  %519 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 0, i64 1
  %520 = getelementptr inbounds i32, i32* %0, i64 32
  %521 = bitcast i32* %520 to <4 x i32>*
  %522 = load <4 x i32>, <4 x i32>* %521, align 16
  %523 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 0, i64 2
  %524 = getelementptr inbounds i32, i32* %0, i64 48
  %525 = bitcast i32* %524 to <4 x i32>*
  %526 = load <4 x i32>, <4 x i32>* %525, align 16
  %527 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 0, i64 3
  %528 = shufflevector <4 x i32> %515, <4 x i32> %518, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %529 = bitcast <4 x i32> %528 to <2 x i64>
  %530 = shufflevector <4 x i32> %522, <4 x i32> %526, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %531 = bitcast <4 x i32> %530 to <2 x i64>
  %532 = shufflevector <4 x i32> %515, <4 x i32> %518, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %533 = bitcast <4 x i32> %532 to <2 x i64>
  %534 = shufflevector <4 x i32> %522, <4 x i32> %526, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %535 = bitcast <4 x i32> %534 to <2 x i64>
  %536 = shufflevector <2 x i64> %529, <2 x i64> %531, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %536, <2 x i64>* %513, align 16
  %537 = shufflevector <2 x i64> %529, <2 x i64> %531, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %537, <2 x i64>* %519, align 16
  %538 = shufflevector <2 x i64> %533, <2 x i64> %535, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %538, <2 x i64>* %523, align 16
  %539 = shufflevector <2 x i64> %533, <2 x i64> %535, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %539, <2 x i64>* %527, align 16
  call fastcc void @highbd_idct16x16_10_4col(<2 x i64>* nonnull %513)
  %540 = getelementptr inbounds i32, i32* %0, i64 64
  %541 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 1, i64 0
  %542 = bitcast i32* %540 to <4 x i32>*
  %543 = load <4 x i32>, <4 x i32>* %542, align 16
  %544 = getelementptr inbounds i32, i32* %0, i64 80
  %545 = bitcast i32* %544 to <4 x i32>*
  %546 = load <4 x i32>, <4 x i32>* %545, align 16
  %547 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 1, i64 1
  %548 = getelementptr inbounds i32, i32* %0, i64 96
  %549 = bitcast i32* %548 to <4 x i32>*
  %550 = load <4 x i32>, <4 x i32>* %549, align 16
  %551 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 1, i64 2
  %552 = getelementptr inbounds i32, i32* %0, i64 112
  %553 = bitcast i32* %552 to <4 x i32>*
  %554 = load <4 x i32>, <4 x i32>* %553, align 16
  %555 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 1, i64 3
  %556 = shufflevector <4 x i32> %543, <4 x i32> %546, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %557 = bitcast <4 x i32> %556 to <2 x i64>
  %558 = shufflevector <4 x i32> %550, <4 x i32> %554, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %559 = bitcast <4 x i32> %558 to <2 x i64>
  %560 = shufflevector <4 x i32> %543, <4 x i32> %546, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %561 = bitcast <4 x i32> %560 to <2 x i64>
  %562 = shufflevector <4 x i32> %550, <4 x i32> %554, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %563 = bitcast <4 x i32> %562 to <2 x i64>
  %564 = shufflevector <2 x i64> %557, <2 x i64> %559, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %564, <2 x i64>* %541, align 16
  %565 = shufflevector <2 x i64> %557, <2 x i64> %559, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %565, <2 x i64>* %547, align 16
  %566 = shufflevector <2 x i64> %561, <2 x i64> %563, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %566, <2 x i64>* %551, align 16
  %567 = shufflevector <2 x i64> %561, <2 x i64> %563, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %567, <2 x i64>* %555, align 16
  call fastcc void @highbd_idct16x16_10_4col(<2 x i64>* %541)
  %568 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 0
  %569 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 1
  %570 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 2
  %571 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 3
  %572 = sext i32 %2 to i64
  br label %573

573:                                              ; preds = %509, %625
  %574 = phi i64 [ 0, %509 ], [ %627, %625 ]
  %575 = phi i16* [ %1, %509 ], [ %626, %625 ]
  %576 = getelementptr inbounds [2 x [16 x <2 x i64>]], [2 x [16 x <2 x i64>]]* %8, i64 0, i64 0, i64 %574
  %577 = bitcast <2 x i64>* %576 to <4 x i32>*
  %578 = load <4 x i32>, <4 x i32>* %577, align 16
  %579 = getelementptr inbounds <2 x i64>, <2 x i64>* %576, i64 1
  %580 = bitcast <2 x i64>* %579 to <4 x i32>*
  %581 = load <4 x i32>, <4 x i32>* %580, align 16
  %582 = shufflevector <4 x i32> %578, <4 x i32> %581, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %583 = bitcast <4 x i32> %582 to <2 x i64>
  %584 = getelementptr inbounds <2 x i64>, <2 x i64>* %576, i64 2
  %585 = bitcast <2 x i64>* %584 to <4 x i32>*
  %586 = load <4 x i32>, <4 x i32>* %585, align 16
  %587 = getelementptr inbounds <2 x i64>, <2 x i64>* %576, i64 3
  %588 = bitcast <2 x i64>* %587 to <4 x i32>*
  %589 = load <4 x i32>, <4 x i32>* %588, align 16
  %590 = shufflevector <4 x i32> %586, <4 x i32> %589, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %591 = bitcast <4 x i32> %590 to <2 x i64>
  %592 = shufflevector <4 x i32> %578, <4 x i32> %581, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %593 = bitcast <4 x i32> %592 to <2 x i64>
  %594 = shufflevector <4 x i32> %586, <4 x i32> %589, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %595 = bitcast <4 x i32> %594 to <2 x i64>
  %596 = shufflevector <2 x i64> %583, <2 x i64> %591, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %596, <2 x i64>* %568, align 16
  %597 = shufflevector <2 x i64> %583, <2 x i64> %591, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %597, <2 x i64>* %569, align 16
  %598 = shufflevector <2 x i64> %593, <2 x i64> %595, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %598, <2 x i64>* %570, align 16
  %599 = shufflevector <2 x i64> %593, <2 x i64> %595, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %599, <2 x i64>* %571, align 16
  call fastcc void @highbd_idct16x16_10_4col(<2 x i64>* nonnull %568)
  %600 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #6
  %601 = add <8 x i16> %600, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  br label %602

602:                                              ; preds = %602, %573
  %603 = phi i64 [ 0, %573 ], [ %623, %602 ]
  %604 = mul nsw i64 %603, %572
  %605 = getelementptr inbounds i16, i16* %575, i64 %604
  %606 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %5, i64 0, i64 %603
  %607 = bitcast <2 x i64>* %606 to <4 x i32>*
  %608 = load <4 x i32>, <4 x i32>* %607, align 16
  %609 = add <4 x i32> %608, <i32 32, i32 32, i32 32, i32 32>
  %610 = ashr <4 x i32> %609, <i32 6, i32 6, i32 6, i32 6>
  %611 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %610, <4 x i32> %610) #6
  %612 = bitcast i16* %605 to i64*
  %613 = load i64, i64* %612, align 1
  %614 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %613, i32 0
  %615 = bitcast <2 x i64> %614 to <8 x i16>
  %616 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %615, <8 x i16> %611) #6
  %617 = icmp sgt <8 x i16> %616, zeroinitializer
  %618 = select <8 x i1> %617, <8 x i16> %616, <8 x i16> zeroinitializer
  %619 = icmp slt <8 x i16> %618, %601
  %620 = select <8 x i1> %619, <8 x i16> %618, <8 x i16> %601
  %621 = bitcast <8 x i16> %620 to <2 x i64>
  %622 = extractelement <2 x i64> %621, i32 0
  store i64 %622, i64* %612, align 1
  %623 = add nuw nsw i64 %603, 1
  %624 = icmp eq i64 %623, 16
  br i1 %624, label %625, label %602

625:                                              ; preds = %602
  %626 = getelementptr inbounds i16, i16* %575, i64 4
  %627 = add nuw nsw i64 %574, 4
  %628 = icmp ult i64 %627, 16
  br i1 %628, label %573, label %629

629:                                              ; preds = %625
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %510) #6
  br label %630

630:                                              ; preds = %629, %508
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @highbd_idct16x16_10_4col(<2 x i64>* nocapture) unnamed_addr #2 {
  %2 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 1
  %3 = bitcast <2 x i64>* %2 to <4 x i32>*
  %4 = load <4 x i32>, <4 x i32>* %3, align 16
  %5 = ashr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, %4
  %7 = sub <4 x i32> %6, %5
  %8 = shufflevector <4 x i32> %5, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %9 = bitcast <4 x i32> %8 to <2 x i64>
  %10 = shufflevector <4 x i32> %5, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %11 = bitcast <4 x i32> %10 to <2 x i64>
  %12 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %13 = bitcast <4 x i32> %12 to <2 x i64>
  %14 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 4294967295, i64 4294967295>
  %17 = mul nuw nsw <2 x i64> %16, <i64 6424, i64 6424>
  %18 = xor <2 x i64> %17, %11
  %19 = and <2 x i64> %13, <i64 4294967295, i64 4294967295>
  %20 = mul nuw nsw <2 x i64> %19, <i64 6424, i64 6424>
  %21 = xor <2 x i64> %20, %9
  %22 = sub <2 x i64> <i64 32768, i64 32768>, %11
  %23 = add <2 x i64> %18, %22
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %26 = sub <2 x i64> <i64 32768, i64 32768>, %9
  %27 = add <2 x i64> %21, %26
  %28 = bitcast <2 x i64> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %30 = bitcast <16 x i8> %25 to <4 x i32>
  %31 = bitcast <16 x i8> %29 to <4 x i32>
  %32 = shufflevector <4 x i32> %30, <4 x i32> %31, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %33 = shufflevector <4 x i32> %30, <4 x i32> %31, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %34 = shufflevector <4 x i32> %32, <4 x i32> %33, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %35 = mul nuw nsw <2 x i64> %16, <i64 65220, i64 65220>
  %36 = xor <2 x i64> %35, %11
  %37 = mul nuw nsw <2 x i64> %19, <i64 65220, i64 65220>
  %38 = xor <2 x i64> %37, %9
  %39 = add <2 x i64> %36, %22
  %40 = bitcast <2 x i64> %39 to <16 x i8>
  %41 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %42 = add <2 x i64> %38, %26
  %43 = bitcast <2 x i64> %42 to <16 x i8>
  %44 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %45 = bitcast <16 x i8> %41 to <4 x i32>
  %46 = bitcast <16 x i8> %44 to <4 x i32>
  %47 = shufflevector <4 x i32> %45, <4 x i32> %46, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %48 = shufflevector <4 x i32> %45, <4 x i32> %46, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %49 = shufflevector <4 x i32> %47, <4 x i32> %48, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %50 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 3
  %51 = bitcast <2 x i64>* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 16
  %53 = ashr <4 x i32> %52, <i32 31, i32 31, i32 31, i32 31>
  %54 = xor <4 x i32> %53, %52
  %55 = sub <4 x i32> %54, %53
  %56 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %57 = bitcast <4 x i32> %56 to <2 x i64>
  %58 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %61 = bitcast <4 x i32> %60 to <2 x i64>
  %62 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %63 = bitcast <4 x i32> %62 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 4294967295, i64 4294967295>
  %65 = mul nuw nsw <2 x i64> %64, <i64 19024, i64 19024>
  %66 = xor <2 x i64> %65, %59
  %67 = and <2 x i64> %61, <i64 4294967295, i64 4294967295>
  %68 = mul nuw nsw <2 x i64> %67, <i64 19024, i64 19024>
  %69 = xor <2 x i64> %68, %57
  %70 = add <2 x i64> %59, <i64 32768, i64 32768>
  %71 = sub <2 x i64> %70, %66
  %72 = bitcast <2 x i64> %71 to <16 x i8>
  %73 = shufflevector <16 x i8> %72, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %74 = add <2 x i64> %57, <i64 32768, i64 32768>
  %75 = sub <2 x i64> %74, %69
  %76 = bitcast <2 x i64> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %78 = bitcast <16 x i8> %73 to <4 x i32>
  %79 = bitcast <16 x i8> %77 to <4 x i32>
  %80 = shufflevector <4 x i32> %78, <4 x i32> %79, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %81 = shufflevector <4 x i32> %78, <4 x i32> %79, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %82 = shufflevector <4 x i32> %80, <4 x i32> %81, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %83 = mul nuw nsw <2 x i64> %64, <i64 62716, i64 62716>
  %84 = xor <2 x i64> %83, %59
  %85 = mul nuw nsw <2 x i64> %67, <i64 62716, i64 62716>
  %86 = xor <2 x i64> %85, %57
  %87 = sub <2 x i64> <i64 32768, i64 32768>, %59
  %88 = add <2 x i64> %87, %84
  %89 = bitcast <2 x i64> %88 to <16 x i8>
  %90 = shufflevector <16 x i8> %89, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %91 = sub <2 x i64> <i64 32768, i64 32768>, %57
  %92 = add <2 x i64> %91, %86
  %93 = bitcast <2 x i64> %92 to <16 x i8>
  %94 = shufflevector <16 x i8> %93, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %95 = bitcast <16 x i8> %90 to <4 x i32>
  %96 = bitcast <16 x i8> %94 to <4 x i32>
  %97 = shufflevector <4 x i32> %95, <4 x i32> %96, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %98 = shufflevector <4 x i32> %95, <4 x i32> %96, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %99 = shufflevector <4 x i32> %97, <4 x i32> %98, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %100 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 2
  %101 = bitcast <2 x i64>* %100 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 16
  %103 = ashr <4 x i32> %102, <i32 31, i32 31, i32 31, i32 31>
  %104 = xor <4 x i32> %103, %102
  %105 = sub <4 x i32> %104, %103
  %106 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %107 = bitcast <4 x i32> %106 to <2 x i64>
  %108 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %109 = bitcast <4 x i32> %108 to <2 x i64>
  %110 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %111 = bitcast <4 x i32> %110 to <2 x i64>
  %112 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %113 = bitcast <4 x i32> %112 to <2 x i64>
  %114 = and <2 x i64> %113, <i64 4294967295, i64 4294967295>
  %115 = mul nuw nsw <2 x i64> %114, <i64 12784, i64 12784>
  %116 = xor <2 x i64> %115, %109
  %117 = and <2 x i64> %111, <i64 4294967295, i64 4294967295>
  %118 = mul nuw nsw <2 x i64> %117, <i64 12784, i64 12784>
  %119 = xor <2 x i64> %118, %107
  %120 = sub <2 x i64> <i64 32768, i64 32768>, %109
  %121 = add <2 x i64> %116, %120
  %122 = bitcast <2 x i64> %121 to <16 x i8>
  %123 = shufflevector <16 x i8> %122, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %124 = sub <2 x i64> <i64 32768, i64 32768>, %107
  %125 = add <2 x i64> %119, %124
  %126 = bitcast <2 x i64> %125 to <16 x i8>
  %127 = shufflevector <16 x i8> %126, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %128 = bitcast <16 x i8> %123 to <4 x i32>
  %129 = bitcast <16 x i8> %127 to <4 x i32>
  %130 = shufflevector <4 x i32> %128, <4 x i32> %129, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %131 = shufflevector <4 x i32> %128, <4 x i32> %129, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %132 = shufflevector <4 x i32> %130, <4 x i32> %131, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %133 = mul nuw nsw <2 x i64> %114, <i64 64276, i64 64276>
  %134 = xor <2 x i64> %133, %109
  %135 = mul nuw nsw <2 x i64> %117, <i64 64276, i64 64276>
  %136 = xor <2 x i64> %135, %107
  %137 = add <2 x i64> %134, %120
  %138 = bitcast <2 x i64> %137 to <16 x i8>
  %139 = shufflevector <16 x i8> %138, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %140 = add <2 x i64> %136, %124
  %141 = bitcast <2 x i64> %140 to <16 x i8>
  %142 = shufflevector <16 x i8> %141, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %143 = bitcast <16 x i8> %139 to <4 x i32>
  %144 = bitcast <16 x i8> %142 to <4 x i32>
  %145 = shufflevector <4 x i32> %143, <4 x i32> %144, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %146 = shufflevector <4 x i32> %143, <4 x i32> %144, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %147 = shufflevector <4 x i32> %145, <4 x i32> %146, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %148 = sub <4 x i32> zeroinitializer, %82
  %149 = sub <4 x i32> zeroinitializer, %99
  %150 = bitcast <2 x i64>* %0 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 16
  %152 = ashr <4 x i32> %151, <i32 31, i32 31, i32 31, i32 31>
  %153 = xor <4 x i32> %152, %151
  %154 = sub <4 x i32> %153, %152
  %155 = shufflevector <4 x i32> %152, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %156 = bitcast <4 x i32> %155 to <2 x i64>
  %157 = shufflevector <4 x i32> %152, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %158 = bitcast <4 x i32> %157 to <2 x i64>
  %159 = shufflevector <4 x i32> %154, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %160 = bitcast <4 x i32> %159 to <2 x i64>
  %161 = shufflevector <4 x i32> %154, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %162 = bitcast <4 x i32> %161 to <2 x i64>
  %163 = and <2 x i64> %162, <i64 4294967295, i64 4294967295>
  %164 = mul nuw nsw <2 x i64> %163, <i64 46340, i64 46340>
  %165 = xor <2 x i64> %164, %158
  %166 = and <2 x i64> %160, <i64 4294967295, i64 4294967295>
  %167 = mul nuw nsw <2 x i64> %166, <i64 46340, i64 46340>
  %168 = xor <2 x i64> %167, %156
  %169 = sub <2 x i64> <i64 32768, i64 32768>, %158
  %170 = add <2 x i64> %169, %165
  %171 = bitcast <2 x i64> %170 to <16 x i8>
  %172 = shufflevector <16 x i8> %171, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %173 = sub <2 x i64> <i64 32768, i64 32768>, %156
  %174 = add <2 x i64> %173, %168
  %175 = bitcast <2 x i64> %174 to <16 x i8>
  %176 = shufflevector <16 x i8> %175, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %177 = bitcast <16 x i8> %172 to <4 x i32>
  %178 = bitcast <16 x i8> %176 to <4 x i32>
  %179 = shufflevector <4 x i32> %177, <4 x i32> %178, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %180 = shufflevector <4 x i32> %177, <4 x i32> %178, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %181 = shufflevector <4 x i32> %179, <4 x i32> %180, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %182 = ashr <4 x i32> %49, <i32 31, i32 31, i32 31, i32 31>
  %183 = xor <4 x i32> %182, %49
  %184 = sub <4 x i32> %183, %182
  %185 = shufflevector <4 x i32> %182, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %186 = bitcast <4 x i32> %185 to <2 x i64>
  %187 = shufflevector <4 x i32> %182, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %188 = bitcast <4 x i32> %187 to <2 x i64>
  %189 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %190 = bitcast <4 x i32> %189 to <2 x i64>
  %191 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %192 = bitcast <4 x i32> %191 to <2 x i64>
  %193 = ashr <4 x i32> %34, <i32 31, i32 31, i32 31, i32 31>
  %194 = xor <4 x i32> %193, %34
  %195 = sub <4 x i32> %194, %193
  %196 = shufflevector <4 x i32> %193, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %197 = bitcast <4 x i32> %196 to <2 x i64>
  %198 = shufflevector <4 x i32> %193, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %199 = bitcast <4 x i32> %198 to <2 x i64>
  %200 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %201 = bitcast <4 x i32> %200 to <2 x i64>
  %202 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %203 = bitcast <4 x i32> %202 to <2 x i64>
  %204 = and <2 x i64> %192, <i64 4294967295, i64 4294967295>
  %205 = mul nuw nsw <2 x i64> %204, <i64 60548, i64 60548>
  %206 = xor <2 x i64> %205, %188
  %207 = and <2 x i64> %190, <i64 4294967295, i64 4294967295>
  %208 = mul nuw nsw <2 x i64> %207, <i64 60548, i64 60548>
  %209 = xor <2 x i64> %208, %186
  %210 = mul nuw nsw <2 x i64> %204, <i64 25080, i64 25080>
  %211 = xor <2 x i64> %210, %188
  %212 = mul nuw nsw <2 x i64> %207, <i64 25080, i64 25080>
  %213 = xor <2 x i64> %212, %186
  %214 = and <2 x i64> %203, <i64 4294967295, i64 4294967295>
  %215 = mul nuw nsw <2 x i64> %214, <i64 25080, i64 25080>
  %216 = xor <2 x i64> %215, %199
  %217 = and <2 x i64> %201, <i64 4294967295, i64 4294967295>
  %218 = mul nuw nsw <2 x i64> %217, <i64 25080, i64 25080>
  %219 = xor <2 x i64> %218, %197
  %220 = mul nuw nsw <2 x i64> %214, <i64 60548, i64 60548>
  %221 = xor <2 x i64> %220, %199
  %222 = mul nuw nsw <2 x i64> %217, <i64 60548, i64 60548>
  %223 = xor <2 x i64> %222, %197
  %224 = sub <2 x i64> <i64 32768, i64 32768>, %188
  %225 = add <2 x i64> %224, %199
  %226 = add <2 x i64> %225, %211
  %227 = sub <2 x i64> %226, %221
  %228 = bitcast <2 x i64> %227 to <16 x i8>
  %229 = shufflevector <16 x i8> %228, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %230 = sub <2 x i64> <i64 32768, i64 32768>, %186
  %231 = add <2 x i64> %230, %197
  %232 = add <2 x i64> %231, %213
  %233 = sub <2 x i64> %232, %223
  %234 = bitcast <2 x i64> %233 to <16 x i8>
  %235 = shufflevector <16 x i8> %234, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %236 = sub <2 x i64> %224, %199
  %237 = add <2 x i64> %236, %216
  %238 = add <2 x i64> %237, %206
  %239 = bitcast <2 x i64> %238 to <16 x i8>
  %240 = shufflevector <16 x i8> %239, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %241 = sub <2 x i64> %230, %197
  %242 = add <2 x i64> %241, %219
  %243 = add <2 x i64> %242, %209
  %244 = bitcast <2 x i64> %243 to <16 x i8>
  %245 = shufflevector <16 x i8> %244, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %246 = bitcast <16 x i8> %229 to <4 x i32>
  %247 = bitcast <16 x i8> %235 to <4 x i32>
  %248 = shufflevector <4 x i32> %246, <4 x i32> %247, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %249 = shufflevector <4 x i32> %246, <4 x i32> %247, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %250 = shufflevector <4 x i32> %248, <4 x i32> %249, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %251 = bitcast <16 x i8> %240 to <4 x i32>
  %252 = bitcast <16 x i8> %245 to <4 x i32>
  %253 = shufflevector <4 x i32> %251, <4 x i32> %252, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %254 = shufflevector <4 x i32> %251, <4 x i32> %252, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %255 = shufflevector <4 x i32> %253, <4 x i32> %254, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %256 = ashr <4 x i32> %148, <i32 31, i32 31, i32 31, i32 31>
  %257 = xor <4 x i32> %256, %148
  %258 = sub <4 x i32> %257, %256
  %259 = shufflevector <4 x i32> %256, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %260 = bitcast <4 x i32> %259 to <2 x i64>
  %261 = shufflevector <4 x i32> %256, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %262 = bitcast <4 x i32> %261 to <2 x i64>
  %263 = shufflevector <4 x i32> %258, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %264 = bitcast <4 x i32> %263 to <2 x i64>
  %265 = shufflevector <4 x i32> %258, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %266 = bitcast <4 x i32> %265 to <2 x i64>
  %267 = ashr <4 x i32> %149, <i32 31, i32 31, i32 31, i32 31>
  %268 = xor <4 x i32> %267, %149
  %269 = sub <4 x i32> %268, %267
  %270 = shufflevector <4 x i32> %267, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %271 = bitcast <4 x i32> %270 to <2 x i64>
  %272 = shufflevector <4 x i32> %267, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %273 = bitcast <4 x i32> %272 to <2 x i64>
  %274 = shufflevector <4 x i32> %269, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %275 = bitcast <4 x i32> %274 to <2 x i64>
  %276 = shufflevector <4 x i32> %269, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %277 = bitcast <4 x i32> %276 to <2 x i64>
  %278 = and <2 x i64> %266, <i64 4294967295, i64 4294967295>
  %279 = mul nuw nsw <2 x i64> %278, <i64 25080, i64 25080>
  %280 = xor <2 x i64> %279, %262
  %281 = and <2 x i64> %264, <i64 4294967295, i64 4294967295>
  %282 = mul nuw nsw <2 x i64> %281, <i64 25080, i64 25080>
  %283 = xor <2 x i64> %282, %260
  %284 = mul nuw nsw <2 x i64> %278, <i64 60548, i64 60548>
  %285 = xor <2 x i64> %284, %262
  %286 = mul nuw nsw <2 x i64> %281, <i64 60548, i64 60548>
  %287 = xor <2 x i64> %286, %260
  %288 = and <2 x i64> %277, <i64 4294967295, i64 4294967295>
  %289 = mul nuw nsw <2 x i64> %288, <i64 60548, i64 60548>
  %290 = xor <2 x i64> %289, %273
  %291 = and <2 x i64> %275, <i64 4294967295, i64 4294967295>
  %292 = mul nuw nsw <2 x i64> %291, <i64 60548, i64 60548>
  %293 = xor <2 x i64> %292, %271
  %294 = mul nuw nsw <2 x i64> %288, <i64 25080, i64 25080>
  %295 = xor <2 x i64> %294, %273
  %296 = mul nuw nsw <2 x i64> %291, <i64 25080, i64 25080>
  %297 = xor <2 x i64> %296, %271
  %298 = sub <2 x i64> <i64 32768, i64 32768>, %262
  %299 = add <2 x i64> %298, %273
  %300 = add <2 x i64> %299, %285
  %301 = sub <2 x i64> %300, %295
  %302 = bitcast <2 x i64> %301 to <16 x i8>
  %303 = shufflevector <16 x i8> %302, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %304 = sub <2 x i64> <i64 32768, i64 32768>, %260
  %305 = add <2 x i64> %304, %271
  %306 = add <2 x i64> %305, %287
  %307 = sub <2 x i64> %306, %297
  %308 = bitcast <2 x i64> %307 to <16 x i8>
  %309 = shufflevector <16 x i8> %308, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %310 = sub <2 x i64> %298, %273
  %311 = add <2 x i64> %310, %290
  %312 = add <2 x i64> %311, %280
  %313 = bitcast <2 x i64> %312 to <16 x i8>
  %314 = shufflevector <16 x i8> %313, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %315 = sub <2 x i64> %304, %271
  %316 = add <2 x i64> %315, %293
  %317 = add <2 x i64> %316, %283
  %318 = bitcast <2 x i64> %317 to <16 x i8>
  %319 = shufflevector <16 x i8> %318, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %320 = bitcast <16 x i8> %303 to <4 x i32>
  %321 = bitcast <16 x i8> %309 to <4 x i32>
  %322 = shufflevector <4 x i32> %320, <4 x i32> %321, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %323 = shufflevector <4 x i32> %320, <4 x i32> %321, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %324 = shufflevector <4 x i32> %322, <4 x i32> %323, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %325 = bitcast <16 x i8> %314 to <4 x i32>
  %326 = bitcast <16 x i8> %319 to <4 x i32>
  %327 = shufflevector <4 x i32> %325, <4 x i32> %326, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %328 = shufflevector <4 x i32> %325, <4 x i32> %326, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %329 = shufflevector <4 x i32> %327, <4 x i32> %328, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %330 = add <4 x i32> %132, %147
  %331 = ashr <4 x i32> %330, <i32 31, i32 31, i32 31, i32 31>
  %332 = xor <4 x i32> %331, %330
  %333 = sub <4 x i32> %332, %331
  %334 = shufflevector <4 x i32> %331, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %335 = bitcast <4 x i32> %334 to <2 x i64>
  %336 = shufflevector <4 x i32> %331, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %337 = bitcast <4 x i32> %336 to <2 x i64>
  %338 = shufflevector <4 x i32> %333, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %339 = bitcast <4 x i32> %338 to <2 x i64>
  %340 = shufflevector <4 x i32> %333, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %341 = bitcast <4 x i32> %340 to <2 x i64>
  %342 = and <2 x i64> %341, <i64 4294967295, i64 4294967295>
  %343 = mul nuw nsw <2 x i64> %342, <i64 46340, i64 46340>
  %344 = xor <2 x i64> %343, %337
  %345 = and <2 x i64> %339, <i64 4294967295, i64 4294967295>
  %346 = mul nuw nsw <2 x i64> %345, <i64 46340, i64 46340>
  %347 = xor <2 x i64> %346, %335
  %348 = sub <2 x i64> <i64 32768, i64 32768>, %337
  %349 = add <2 x i64> %348, %344
  %350 = bitcast <2 x i64> %349 to <16 x i8>
  %351 = shufflevector <16 x i8> %350, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %352 = sub <2 x i64> <i64 32768, i64 32768>, %335
  %353 = add <2 x i64> %352, %347
  %354 = bitcast <2 x i64> %353 to <16 x i8>
  %355 = shufflevector <16 x i8> %354, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %356 = bitcast <16 x i8> %351 to <4 x i32>
  %357 = bitcast <16 x i8> %355 to <4 x i32>
  %358 = shufflevector <4 x i32> %356, <4 x i32> %357, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %359 = shufflevector <4 x i32> %356, <4 x i32> %357, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %360 = shufflevector <4 x i32> %358, <4 x i32> %359, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %361 = sub <4 x i32> %147, %132
  %362 = ashr <4 x i32> %361, <i32 31, i32 31, i32 31, i32 31>
  %363 = xor <4 x i32> %362, %361
  %364 = sub <4 x i32> %363, %362
  %365 = shufflevector <4 x i32> %362, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %366 = bitcast <4 x i32> %365 to <2 x i64>
  %367 = shufflevector <4 x i32> %362, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %368 = bitcast <4 x i32> %367 to <2 x i64>
  %369 = shufflevector <4 x i32> %364, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %370 = bitcast <4 x i32> %369 to <2 x i64>
  %371 = shufflevector <4 x i32> %364, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %372 = bitcast <4 x i32> %371 to <2 x i64>
  %373 = and <2 x i64> %372, <i64 4294967295, i64 4294967295>
  %374 = mul nuw nsw <2 x i64> %373, <i64 46340, i64 46340>
  %375 = xor <2 x i64> %374, %368
  %376 = and <2 x i64> %370, <i64 4294967295, i64 4294967295>
  %377 = mul nuw nsw <2 x i64> %376, <i64 46340, i64 46340>
  %378 = xor <2 x i64> %377, %366
  %379 = sub <2 x i64> <i64 32768, i64 32768>, %368
  %380 = add <2 x i64> %379, %375
  %381 = bitcast <2 x i64> %380 to <16 x i8>
  %382 = shufflevector <16 x i8> %381, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %383 = sub <2 x i64> <i64 32768, i64 32768>, %366
  %384 = add <2 x i64> %383, %378
  %385 = bitcast <2 x i64> %384 to <16 x i8>
  %386 = shufflevector <16 x i8> %385, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %387 = bitcast <16 x i8> %382 to <4 x i32>
  %388 = bitcast <16 x i8> %386 to <4 x i32>
  %389 = shufflevector <4 x i32> %387, <4 x i32> %388, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %390 = shufflevector <4 x i32> %387, <4 x i32> %388, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %391 = shufflevector <4 x i32> %389, <4 x i32> %390, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %392 = add <4 x i32> %82, %34
  %393 = add <4 x i32> %329, %250
  %394 = sub <4 x i32> %250, %329
  %395 = sub <4 x i32> %34, %82
  %396 = sub <4 x i32> %49, %99
  %397 = sub <4 x i32> %255, %324
  %398 = add <4 x i32> %324, %255
  %399 = add <4 x i32> %99, %49
  %400 = add <4 x i32> %181, %147
  %401 = add <4 x i32> %360, %181
  %402 = add <4 x i32> %391, %181
  %403 = add <4 x i32> %181, %132
  %404 = sub <4 x i32> %181, %132
  %405 = sub <4 x i32> %181, %391
  %406 = sub <4 x i32> %181, %360
  %407 = sub <4 x i32> %181, %147
  %408 = add <4 x i32> %394, %397
  %409 = ashr <4 x i32> %408, <i32 31, i32 31, i32 31, i32 31>
  %410 = xor <4 x i32> %409, %408
  %411 = sub <4 x i32> %410, %409
  %412 = shufflevector <4 x i32> %409, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %413 = bitcast <4 x i32> %412 to <2 x i64>
  %414 = shufflevector <4 x i32> %409, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %415 = bitcast <4 x i32> %414 to <2 x i64>
  %416 = shufflevector <4 x i32> %411, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %417 = bitcast <4 x i32> %416 to <2 x i64>
  %418 = shufflevector <4 x i32> %411, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %419 = bitcast <4 x i32> %418 to <2 x i64>
  %420 = and <2 x i64> %419, <i64 4294967295, i64 4294967295>
  %421 = mul nuw nsw <2 x i64> %420, <i64 46340, i64 46340>
  %422 = xor <2 x i64> %421, %415
  %423 = and <2 x i64> %417, <i64 4294967295, i64 4294967295>
  %424 = mul nuw nsw <2 x i64> %423, <i64 46340, i64 46340>
  %425 = xor <2 x i64> %424, %413
  %426 = sub <2 x i64> <i64 32768, i64 32768>, %415
  %427 = add <2 x i64> %426, %422
  %428 = bitcast <2 x i64> %427 to <16 x i8>
  %429 = shufflevector <16 x i8> %428, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %430 = sub <2 x i64> <i64 32768, i64 32768>, %413
  %431 = add <2 x i64> %430, %425
  %432 = bitcast <2 x i64> %431 to <16 x i8>
  %433 = shufflevector <16 x i8> %432, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %434 = bitcast <16 x i8> %429 to <4 x i32>
  %435 = bitcast <16 x i8> %433 to <4 x i32>
  %436 = shufflevector <4 x i32> %434, <4 x i32> %435, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %437 = shufflevector <4 x i32> %434, <4 x i32> %435, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %438 = shufflevector <4 x i32> %436, <4 x i32> %437, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %439 = sub <4 x i32> %397, %394
  %440 = ashr <4 x i32> %439, <i32 31, i32 31, i32 31, i32 31>
  %441 = xor <4 x i32> %440, %439
  %442 = sub <4 x i32> %441, %440
  %443 = shufflevector <4 x i32> %440, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %444 = bitcast <4 x i32> %443 to <2 x i64>
  %445 = shufflevector <4 x i32> %440, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %446 = bitcast <4 x i32> %445 to <2 x i64>
  %447 = shufflevector <4 x i32> %442, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %448 = bitcast <4 x i32> %447 to <2 x i64>
  %449 = shufflevector <4 x i32> %442, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %450 = bitcast <4 x i32> %449 to <2 x i64>
  %451 = and <2 x i64> %450, <i64 4294967295, i64 4294967295>
  %452 = mul nuw nsw <2 x i64> %451, <i64 46340, i64 46340>
  %453 = xor <2 x i64> %452, %446
  %454 = and <2 x i64> %448, <i64 4294967295, i64 4294967295>
  %455 = mul nuw nsw <2 x i64> %454, <i64 46340, i64 46340>
  %456 = xor <2 x i64> %455, %444
  %457 = sub <2 x i64> <i64 32768, i64 32768>, %446
  %458 = add <2 x i64> %457, %453
  %459 = bitcast <2 x i64> %458 to <16 x i8>
  %460 = shufflevector <16 x i8> %459, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %461 = sub <2 x i64> <i64 32768, i64 32768>, %444
  %462 = add <2 x i64> %461, %456
  %463 = bitcast <2 x i64> %462 to <16 x i8>
  %464 = shufflevector <16 x i8> %463, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %465 = bitcast <16 x i8> %460 to <4 x i32>
  %466 = bitcast <16 x i8> %464 to <4 x i32>
  %467 = shufflevector <4 x i32> %465, <4 x i32> %466, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %468 = shufflevector <4 x i32> %465, <4 x i32> %466, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %469 = shufflevector <4 x i32> %467, <4 x i32> %468, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %470 = add <4 x i32> %395, %396
  %471 = ashr <4 x i32> %470, <i32 31, i32 31, i32 31, i32 31>
  %472 = xor <4 x i32> %471, %470
  %473 = sub <4 x i32> %472, %471
  %474 = shufflevector <4 x i32> %471, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %475 = bitcast <4 x i32> %474 to <2 x i64>
  %476 = shufflevector <4 x i32> %471, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %477 = bitcast <4 x i32> %476 to <2 x i64>
  %478 = shufflevector <4 x i32> %473, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %479 = bitcast <4 x i32> %478 to <2 x i64>
  %480 = shufflevector <4 x i32> %473, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %481 = bitcast <4 x i32> %480 to <2 x i64>
  %482 = and <2 x i64> %481, <i64 4294967295, i64 4294967295>
  %483 = mul nuw nsw <2 x i64> %482, <i64 46340, i64 46340>
  %484 = xor <2 x i64> %483, %477
  %485 = and <2 x i64> %479, <i64 4294967295, i64 4294967295>
  %486 = mul nuw nsw <2 x i64> %485, <i64 46340, i64 46340>
  %487 = xor <2 x i64> %486, %475
  %488 = sub <2 x i64> <i64 32768, i64 32768>, %477
  %489 = add <2 x i64> %488, %484
  %490 = bitcast <2 x i64> %489 to <16 x i8>
  %491 = shufflevector <16 x i8> %490, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %492 = sub <2 x i64> <i64 32768, i64 32768>, %475
  %493 = add <2 x i64> %492, %487
  %494 = bitcast <2 x i64> %493 to <16 x i8>
  %495 = shufflevector <16 x i8> %494, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %496 = bitcast <16 x i8> %491 to <4 x i32>
  %497 = bitcast <16 x i8> %495 to <4 x i32>
  %498 = shufflevector <4 x i32> %496, <4 x i32> %497, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %499 = shufflevector <4 x i32> %496, <4 x i32> %497, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %500 = shufflevector <4 x i32> %498, <4 x i32> %499, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %501 = sub <4 x i32> %396, %395
  %502 = ashr <4 x i32> %501, <i32 31, i32 31, i32 31, i32 31>
  %503 = xor <4 x i32> %502, %501
  %504 = sub <4 x i32> %503, %502
  %505 = shufflevector <4 x i32> %502, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %506 = bitcast <4 x i32> %505 to <2 x i64>
  %507 = shufflevector <4 x i32> %502, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %508 = bitcast <4 x i32> %507 to <2 x i64>
  %509 = shufflevector <4 x i32> %504, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %510 = bitcast <4 x i32> %509 to <2 x i64>
  %511 = shufflevector <4 x i32> %504, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %512 = bitcast <4 x i32> %511 to <2 x i64>
  %513 = and <2 x i64> %512, <i64 4294967295, i64 4294967295>
  %514 = mul nuw nsw <2 x i64> %513, <i64 46340, i64 46340>
  %515 = xor <2 x i64> %514, %508
  %516 = and <2 x i64> %510, <i64 4294967295, i64 4294967295>
  %517 = mul nuw nsw <2 x i64> %516, <i64 46340, i64 46340>
  %518 = xor <2 x i64> %517, %506
  %519 = sub <2 x i64> <i64 32768, i64 32768>, %508
  %520 = add <2 x i64> %519, %515
  %521 = bitcast <2 x i64> %520 to <16 x i8>
  %522 = shufflevector <16 x i8> %521, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %523 = sub <2 x i64> <i64 32768, i64 32768>, %506
  %524 = add <2 x i64> %523, %518
  %525 = bitcast <2 x i64> %524 to <16 x i8>
  %526 = shufflevector <16 x i8> %525, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %527 = bitcast <16 x i8> %522 to <4 x i32>
  %528 = bitcast <16 x i8> %526 to <4 x i32>
  %529 = shufflevector <4 x i32> %527, <4 x i32> %528, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %530 = shufflevector <4 x i32> %527, <4 x i32> %528, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %531 = shufflevector <4 x i32> %529, <4 x i32> %530, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %532 = add <4 x i32> %400, %399
  %533 = bitcast <2 x i64>* %0 to <4 x i32>*
  store <4 x i32> %532, <4 x i32>* %533, align 16
  %534 = add <4 x i32> %401, %398
  store <4 x i32> %534, <4 x i32>* %3, align 16
  %535 = add <4 x i32> %438, %402
  store <4 x i32> %535, <4 x i32>* %101, align 16
  %536 = add <4 x i32> %500, %403
  store <4 x i32> %536, <4 x i32>* %51, align 16
  %537 = add <4 x i32> %531, %404
  %538 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 4
  %539 = bitcast <2 x i64>* %538 to <4 x i32>*
  store <4 x i32> %537, <4 x i32>* %539, align 16
  %540 = add <4 x i32> %469, %405
  %541 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 5
  %542 = bitcast <2 x i64>* %541 to <4 x i32>*
  store <4 x i32> %540, <4 x i32>* %542, align 16
  %543 = add <4 x i32> %406, %393
  %544 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 6
  %545 = bitcast <2 x i64>* %544 to <4 x i32>*
  store <4 x i32> %543, <4 x i32>* %545, align 16
  %546 = add <4 x i32> %407, %392
  %547 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 7
  %548 = bitcast <2 x i64>* %547 to <4 x i32>*
  store <4 x i32> %546, <4 x i32>* %548, align 16
  %549 = sub <4 x i32> %407, %392
  %550 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 8
  %551 = bitcast <2 x i64>* %550 to <4 x i32>*
  store <4 x i32> %549, <4 x i32>* %551, align 16
  %552 = sub <4 x i32> %406, %393
  %553 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 9
  %554 = bitcast <2 x i64>* %553 to <4 x i32>*
  store <4 x i32> %552, <4 x i32>* %554, align 16
  %555 = sub <4 x i32> %405, %469
  %556 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 10
  %557 = bitcast <2 x i64>* %556 to <4 x i32>*
  store <4 x i32> %555, <4 x i32>* %557, align 16
  %558 = sub <4 x i32> %404, %531
  %559 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 11
  %560 = bitcast <2 x i64>* %559 to <4 x i32>*
  store <4 x i32> %558, <4 x i32>* %560, align 16
  %561 = sub <4 x i32> %403, %500
  %562 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 12
  %563 = bitcast <2 x i64>* %562 to <4 x i32>*
  store <4 x i32> %561, <4 x i32>* %563, align 16
  %564 = sub <4 x i32> %402, %438
  %565 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 13
  %566 = bitcast <2 x i64>* %565 to <4 x i32>*
  store <4 x i32> %564, <4 x i32>* %566, align 16
  %567 = sub <4 x i32> %401, %398
  %568 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 14
  %569 = bitcast <2 x i64>* %568 to <4 x i32>*
  store <4 x i32> %567, <4 x i32>* %569, align 16
  %570 = sub <4 x i32> %400, %399
  %571 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 15
  %572 = bitcast <2 x i64>* %571 to <4 x i32>*
  store <4 x i32> %570, <4 x i32>* %572, align 16
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vpx_highbd_idct16x16_1_add_sse2(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #3 {
  %5 = load i32, i32* %0, align 4
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, 11585
  %8 = add nsw i64 %7, 8192
  %9 = lshr i64 %8, 14
  %10 = shl i64 %9, 32
  %11 = ashr exact i64 %10, 32
  %12 = mul nsw i64 %11, 11585
  %13 = add nsw i64 %12, 8192
  %14 = lshr i64 %13, 14
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %15, 32
  %17 = lshr i32 %16, 6
  %18 = trunc i32 %17 to i16
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> zeroinitializer
  %21 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #6
  %22 = add <8 x i16> %21, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %23 = sext i32 %2 to i64
  br label %24

24:                                               ; preds = %24, %4
  %25 = phi i16* [ %1, %4 ], [ %42, %24 ]
  %26 = phi i32 [ 0, %4 ], [ %43, %24 ]
  %27 = bitcast i16* %25 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 16
  %29 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %28, <8 x i16> %20) #6
  %30 = icmp sgt <8 x i16> %29, zeroinitializer
  %31 = select <8 x i1> %30, <8 x i16> %29, <8 x i16> zeroinitializer
  %32 = icmp slt <8 x i16> %31, %22
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> %22
  store <8 x i16> %33, <8 x i16>* %27, align 16
  %34 = getelementptr inbounds i16, i16* %25, i64 8
  %35 = bitcast i16* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 16
  %37 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %36, <8 x i16> %20) #6
  %38 = icmp sgt <8 x i16> %37, zeroinitializer
  %39 = select <8 x i1> %38, <8 x i16> %37, <8 x i16> zeroinitializer
  %40 = icmp slt <8 x i16> %39, %22
  %41 = select <8 x i1> %40, <8 x i16> %39, <8 x i16> %22
  store <8 x i16> %41, <8 x i16>* %35, align 16
  %42 = getelementptr inbounds i16, i16* %25, i64 %23
  %43 = add nuw nsw i32 %26, 1
  %44 = icmp eq i32 %43, 16
  br i1 %44, label %45, label %24

45:                                               ; preds = %24
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #4

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16>, i32) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
