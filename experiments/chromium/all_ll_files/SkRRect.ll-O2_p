; ModuleID = '../../third_party/skia/src/core/SkRRect.cpp'
source_filename = "../../third_party/skia/src/core/SkRRect.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkWBuffer = type { i8*, i8*, i8* }
%class.SkRBuffer = type <{ i8*, i8*, i8*, i8, [7 x i8] }>
%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@.str = private unnamed_addr constant [29 x i8] c"const SkPoint corners[] = {\0A\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"    { %s, %s },\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c" /* %f %f */\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"};\00", align 1
@.str.5 = private unnamed_addr constant [44 x i8] c"../../third_party/skia/src/core/SkRRect.cpp\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@_ZZN11SkRRectPriv21ConservativeIntersectERK7SkRRectS2_E7corners = internal constant [4 x i32] [i32 0, i32 1, i32 2, i32 3], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkRRect7setOvalERK6SkRect(%class.SkRRect* nocapture, %struct.SkRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %struct.SkRect* %1 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = extractelement <2 x float> %4, i32 0
  %6 = fmul float %5, 0.000000e+00
  %7 = extractelement <2 x float> %4, i32 1
  %8 = fmul float %6, %7
  %9 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %10 = bitcast float* %9 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = extractelement <2 x float> %11, i32 0
  %13 = fmul float %8, %12
  %14 = extractelement <2 x float> %11, i32 1
  %15 = fmul float %13, %14
  %16 = fcmp ord float %15, 0.000000e+00
  br i1 %16, label %19, label %17

17:                                               ; preds = %2
  %18 = bitcast %class.SkRRect* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %18, i8 0, i64 52, i1 false) #9
  br label %59

19:                                               ; preds = %2
  %20 = fcmp olt <2 x float> %11, %4
  %21 = select <2 x i1> %20, <2 x float> %11, <2 x float> %4
  %22 = fcmp olt <2 x float> %4, %11
  %23 = select <2 x i1> %22, <2 x float> %11, <2 x float> %4
  %24 = extractelement <2 x float> %21, i32 0
  %25 = extractelement <2 x float> %21, i32 1
  %26 = extractelement <2 x float> %23, i32 0
  %27 = extractelement <2 x float> %23, i32 1
  %28 = bitcast %class.SkRRect* %0 to <2 x float>*
  store <2 x float> %21, <2 x float>* %28, align 4
  %29 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %30 = bitcast float* %29 to <2 x float>*
  store <2 x float> %23, <2 x float>* %30, align 4
  %31 = fcmp uge float %24, %26
  %32 = fcmp uge float %25, %27
  %33 = or i1 %31, %32
  br i1 %33, label %34, label %37

34:                                               ; preds = %19
  %35 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %36 = bitcast %struct.SkPoint* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %36, i8 0, i64 36, i1 false) #9
  br label %59

37:                                               ; preds = %19
  %38 = fmul <2 x float> %23, <float 5.000000e-01, float 5.000000e-01>
  %39 = fmul <2 x float> %21, <float 5.000000e-01, float 5.000000e-01>
  %40 = fsub <2 x float> %38, %39
  %41 = extractelement <2 x float> %40, i32 0
  %42 = fcmp oeq float %41, 0.000000e+00
  %43 = extractelement <2 x float> %40, i32 1
  %44 = fcmp oeq float %43, 0.000000e+00
  %45 = or i1 %42, %44
  br i1 %45, label %55, label %46

46:                                               ; preds = %37
  %47 = shufflevector <2 x float> %40, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %48 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 0
  %49 = bitcast float* %48 to <4 x float>*
  store <4 x float> %47, <4 x float>* %49, align 4
  %50 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 0
  store float %41, float* %50, align 4
  %51 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  store float %43, float* %51, align 4
  %52 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 0
  store float %41, float* %52, align 4
  %53 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  store float %43, float* %53, align 4
  %54 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 2, i32* %54, align 4
  br label %59

55:                                               ; preds = %37
  %56 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %57 = bitcast %struct.SkPoint* %56 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %57, i8 0, i64 32, i1 false)
  %58 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 1, i32* %58, align 4
  br label %59

59:                                               ; preds = %17, %34, %55, %46
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkRRect14initializeRectERK6SkRect(%class.SkRRect* nocapture, %struct.SkRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fmul float %4, 0.000000e+00
  %6 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = fmul float %5, %7
  %9 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %10 = load float, float* %9, align 4
  %11 = fmul float %8, %10
  %12 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %13 = load float, float* %12, align 4
  %14 = fmul float %11, %13
  %15 = fcmp ord float %14, 0.000000e+00
  br i1 %15, label %18, label %16

16:                                               ; preds = %2
  %17 = bitcast %class.SkRRect* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 52, i1 false)
  br label %40

18:                                               ; preds = %2
  %19 = fcmp olt float %10, %4
  %20 = select i1 %19, float %10, float %4
  %21 = fcmp olt float %13, %7
  %22 = select i1 %21, float %13, float %7
  %23 = fcmp olt float %4, %10
  %24 = select i1 %23, float %10, float %4
  %25 = fcmp olt float %7, %13
  %26 = select i1 %25, float %13, float %7
  %27 = insertelement <2 x float> undef, float %20, i32 0
  %28 = insertelement <2 x float> %27, float %22, i32 1
  %29 = insertelement <2 x float> undef, float %24, i32 0
  %30 = insertelement <2 x float> %29, float %26, i32 1
  %31 = bitcast %class.SkRRect* %0 to <2 x float>*
  store <2 x float> %28, <2 x float>* %31, align 4
  %32 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %33 = bitcast float* %32 to <2 x float>*
  store <2 x float> %30, <2 x float>* %33, align 4
  %34 = fcmp uge float %20, %24
  %35 = fcmp uge float %22, %26
  %36 = or i1 %34, %35
  br i1 %36, label %37, label %40

37:                                               ; preds = %18
  %38 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %39 = bitcast %struct.SkPoint* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %39, i8 0, i64 36, i1 false)
  br label %40

40:                                               ; preds = %18, %37, %16
  %41 = phi i1 [ false, %37 ], [ false, %16 ], [ true, %18 ]
  ret i1 %41
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkRRect9setRectXYERK6SkRectff(%class.SkRRect* nocapture, %struct.SkRect* nocapture readonly dereferenceable(16), float, float) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %6 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %7 = bitcast %struct.SkRect* %1 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = extractelement <2 x float> %8, i32 0
  %10 = fmul float %9, 0.000000e+00
  %11 = extractelement <2 x float> %8, i32 1
  %12 = fmul float %10, %11
  %13 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %14 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %15 = bitcast float* %13 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 4
  %17 = extractelement <2 x float> %16, i32 0
  %18 = fmul float %12, %17
  %19 = extractelement <2 x float> %16, i32 1
  %20 = fmul float %18, %19
  %21 = fcmp ord float %20, 0.000000e+00
  br i1 %21, label %24, label %22

22:                                               ; preds = %4
  %23 = bitcast %class.SkRRect* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %23, i8 0, i64 52, i1 false) #9
  br label %129

24:                                               ; preds = %4
  %25 = fcmp olt <2 x float> %16, %8
  %26 = select <2 x i1> %25, <2 x float> %16, <2 x float> %8
  %27 = fcmp olt <2 x float> %8, %16
  %28 = select <2 x i1> %27, <2 x float> %16, <2 x float> %8
  %29 = extractelement <2 x float> %26, i32 0
  %30 = extractelement <2 x float> %26, i32 1
  %31 = extractelement <2 x float> %28, i32 0
  %32 = extractelement <2 x float> %28, i32 1
  %33 = bitcast %class.SkRRect* %0 to <2 x float>*
  store <2 x float> %26, <2 x float>* %33, align 4
  %34 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %35 = bitcast float* %34 to <2 x float>*
  store <2 x float> %28, <2 x float>* %35, align 4
  %36 = fcmp uge float %29, %31
  %37 = fcmp uge float %30, %32
  %38 = or i1 %36, %37
  br i1 %38, label %39, label %42

39:                                               ; preds = %24
  %40 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %41 = bitcast %struct.SkPoint* %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %41, i8 0, i64 36, i1 false) #9
  br label %129

42:                                               ; preds = %24
  %43 = bitcast float %2 to i32
  %44 = and i32 %43, 2139095040
  %45 = icmp eq i32 %44, 2139095040
  br i1 %45, label %52, label %46

46:                                               ; preds = %42
  %47 = bitcast float %3 to i32
  %48 = and i32 %47, 2139095040
  %49 = icmp eq i32 %48, 2139095040
  %50 = insertelement <2 x float> undef, float %2, i32 0
  %51 = insertelement <2 x float> %50, float %3, i32 1
  br i1 %49, label %52, label %53

52:                                               ; preds = %46, %42
  br label %53

53:                                               ; preds = %46, %52
  %54 = phi <2 x float> [ zeroinitializer, %52 ], [ %51, %46 ]
  %55 = fsub <2 x float> %28, %26
  %56 = fadd <2 x float> %54, %54
  %57 = extractelement <2 x float> %55, i32 0
  %58 = extractelement <2 x float> %56, i32 0
  %59 = fcmp olt float %57, %58
  %60 = extractelement <2 x float> %55, i32 1
  %61 = extractelement <2 x float> %56, i32 1
  %62 = fcmp olt float %60, %61
  %63 = or i1 %59, %62
  br i1 %63, label %64, label %73

64:                                               ; preds = %53
  %65 = fdiv <2 x float> %55, %56
  %66 = extractelement <2 x float> %65, i32 0
  %67 = extractelement <2 x float> %65, i32 1
  %68 = fcmp olt float %67, %66
  %69 = select i1 %68, float %67, float %66
  %70 = insertelement <2 x float> undef, float %69, i32 0
  %71 = shufflevector <2 x float> %70, <2 x float> undef, <2 x i32> zeroinitializer
  %72 = fmul <2 x float> %54, %71
  br label %73

73:                                               ; preds = %53, %64
  %74 = phi <2 x float> [ %72, %64 ], [ %54, %53 ]
  %75 = extractelement <2 x float> %74, i32 0
  %76 = fcmp ole float %75, 0.000000e+00
  %77 = extractelement <2 x float> %74, i32 1
  %78 = fcmp ole float %77, 0.000000e+00
  %79 = or i1 %78, %76
  br i1 %79, label %91, label %80

80:                                               ; preds = %73
  %81 = shufflevector <2 x float> %74, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %82 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 0
  %83 = bitcast float* %82 to <4 x float>*
  store <4 x float> %81, <4 x float>* %83, align 4
  %84 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 0
  store float %75, float* %84, align 4
  %85 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  store float %77, float* %85, align 4
  %86 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 0
  store float %75, float* %86, align 4
  %87 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  store float %77, float* %87, align 4
  %88 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 3, i32* %88, align 4
  %89 = fmul float %57, 5.000000e-01
  %90 = fcmp ult float %75, %89
  br i1 %90, label %129, label %124

91:                                               ; preds = %73
  %92 = load float, float* %5, align 4
  %93 = fmul float %92, 0.000000e+00
  %94 = load float, float* %6, align 4
  %95 = fmul float %93, %94
  %96 = load float, float* %13, align 4
  %97 = fmul float %95, %96
  %98 = load float, float* %14, align 4
  %99 = fmul float %97, %98
  %100 = fcmp ord float %99, 0.000000e+00
  br i1 %100, label %103, label %101

101:                                              ; preds = %91
  %102 = bitcast %class.SkRRect* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %102, i8 0, i64 52, i1 false) #9
  br label %129

103:                                              ; preds = %91
  %104 = fcmp olt float %96, %92
  %105 = select i1 %104, float %96, float %92
  %106 = fcmp olt float %98, %94
  %107 = select i1 %106, float %98, float %94
  %108 = fcmp olt float %92, %96
  %109 = select i1 %108, float %96, float %92
  %110 = fcmp olt float %94, %98
  %111 = select i1 %110, float %98, float %94
  %112 = insertelement <2 x float> undef, float %105, i32 0
  %113 = insertelement <2 x float> %112, float %107, i32 1
  %114 = insertelement <2 x float> undef, float %109, i32 0
  %115 = insertelement <2 x float> %114, float %111, i32 1
  store <2 x float> %113, <2 x float>* %33, align 4
  store <2 x float> %115, <2 x float>* %35, align 4
  %116 = fcmp uge float %105, %109
  %117 = fcmp uge float %107, %111
  %118 = or i1 %116, %117
  %119 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %120 = bitcast %struct.SkPoint* %119 to i8*
  br i1 %118, label %121, label %122

121:                                              ; preds = %103
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %120, i8 0, i64 36, i1 false) #9
  br label %129

122:                                              ; preds = %103
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %120, i8 0, i64 32, i1 false) #9
  %123 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 1, i32* %123, align 4
  br label %129

124:                                              ; preds = %80
  %125 = fsub float %32, %30
  %126 = fmul float %125, 5.000000e-01
  %127 = fcmp ult float %77, %126
  br i1 %127, label %129, label %128

128:                                              ; preds = %124
  store i32 2, i32* %88, align 4
  br label %129

129:                                              ; preds = %22, %39, %122, %121, %101, %124, %80, %128
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkRRect12setNinePatchERK6SkRectffff(%class.SkRRect* nocapture, %struct.SkRect* nocapture readonly dereferenceable(16), float, float, float, float) local_unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = fmul float %8, 0.000000e+00
  %10 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = fmul float %9, %11
  %13 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %14 = load float, float* %13, align 4
  %15 = fmul float %12, %14
  %16 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %17 = load float, float* %16, align 4
  %18 = fmul float %15, %17
  %19 = fcmp ord float %18, 0.000000e+00
  %20 = bitcast float %2 to i32
  %21 = bitcast float %3 to i32
  %22 = bitcast float %4 to i32
  %23 = bitcast float %5 to i32
  br i1 %19, label %26, label %24

24:                                               ; preds = %6
  %25 = bitcast %class.SkRRect* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %25, i8 0, i64 52, i1 false) #9
  br label %174

26:                                               ; preds = %6
  %27 = fcmp olt float %14, %8
  %28 = select i1 %27, float %14, float %8
  %29 = fcmp olt float %17, %11
  %30 = select i1 %29, float %17, float %11
  %31 = fcmp olt float %8, %14
  %32 = select i1 %31, float %14, float %8
  %33 = fcmp olt float %11, %17
  %34 = select i1 %33, float %17, float %11
  %35 = insertelement <2 x float> undef, float %28, i32 0
  %36 = insertelement <2 x float> %35, float %30, i32 1
  %37 = insertelement <2 x float> undef, float %32, i32 0
  %38 = insertelement <2 x float> %37, float %34, i32 1
  %39 = bitcast %class.SkRRect* %0 to <2 x float>*
  store <2 x float> %36, <2 x float>* %39, align 4
  %40 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %41 = bitcast float* %40 to <2 x float>*
  store <2 x float> %38, <2 x float>* %41, align 4
  %42 = fcmp uge float %28, %32
  %43 = fcmp uge float %30, %34
  %44 = or i1 %42, %43
  br i1 %44, label %45, label %48

45:                                               ; preds = %26
  %46 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %47 = bitcast %struct.SkPoint* %46 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %47, i8 0, i64 36, i1 false) #9
  br label %174

48:                                               ; preds = %26
  %49 = fmul float %2, 0.000000e+00
  %50 = fmul float %49, %3
  %51 = fmul float %50, %4
  %52 = fmul float %51, %5
  %53 = fcmp oeq float %52, 0.000000e+00
  br i1 %53, label %87, label %54

54:                                               ; preds = %48
  %55 = load float, float* %7, align 4
  %56 = fmul float %55, 0.000000e+00
  %57 = load float, float* %10, align 4
  %58 = fmul float %56, %57
  %59 = load float, float* %13, align 4
  %60 = fmul float %58, %59
  %61 = load float, float* %16, align 4
  %62 = fmul float %60, %61
  %63 = fcmp ord float %62, 0.000000e+00
  br i1 %63, label %66, label %64

64:                                               ; preds = %54
  %65 = bitcast %class.SkRRect* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %65, i8 0, i64 52, i1 false) #9
  br label %174

66:                                               ; preds = %54
  %67 = fcmp olt float %59, %55
  %68 = select i1 %67, float %59, float %55
  %69 = fcmp olt float %61, %57
  %70 = select i1 %69, float %61, float %57
  %71 = fcmp olt float %55, %59
  %72 = select i1 %71, float %59, float %55
  %73 = fcmp olt float %57, %61
  %74 = select i1 %73, float %61, float %57
  %75 = insertelement <2 x float> undef, float %68, i32 0
  %76 = insertelement <2 x float> %75, float %70, i32 1
  %77 = insertelement <2 x float> undef, float %72, i32 0
  %78 = insertelement <2 x float> %77, float %74, i32 1
  store <2 x float> %76, <2 x float>* %39, align 4
  store <2 x float> %78, <2 x float>* %41, align 4
  %79 = fcmp uge float %68, %72
  %80 = fcmp uge float %70, %74
  %81 = or i1 %79, %80
  %82 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %83 = bitcast %struct.SkPoint* %82 to i8*
  br i1 %81, label %84, label %85

84:                                               ; preds = %66
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %83, i8 0, i64 36, i1 false) #9
  br label %174

85:                                               ; preds = %66
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %83, i8 0, i64 32, i1 false) #9
  %86 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 1, i32* %86, align 4
  br label %174

87:                                               ; preds = %48
  %88 = fcmp olt float %2, 0.000000e+00
  %89 = select i1 %88, i32 0, i32 %20
  %90 = fcmp olt float %3, 0.000000e+00
  %91 = select i1 %90, i32 0, i32 %21
  %92 = fcmp olt float %4, 0.000000e+00
  %93 = select i1 %92, i32 0, i32 %22
  %94 = fcmp olt float %5, 0.000000e+00
  %95 = select i1 %94, i32 0, i32 %23
  %96 = bitcast i32 %89 to float
  %97 = bitcast i32 %93 to float
  %98 = fadd float %96, %97
  %99 = fsub float %32, %28
  %100 = fcmp ogt float %98, %99
  %101 = bitcast i32 %91 to float
  %102 = bitcast i32 %95 to float
  %103 = fdiv float %99, %98
  %104 = select i1 %100, float %103, float 1.000000e+00
  %105 = fadd float %101, %102
  %106 = fsub float %34, %30
  %107 = fcmp ogt float %105, %106
  br i1 %107, label %108, label %112

108:                                              ; preds = %87
  %109 = fdiv float %106, %105
  %110 = fcmp olt float %109, %104
  %111 = select i1 %110, float %109, float %104
  br label %112

112:                                              ; preds = %87, %108
  %113 = phi float [ %111, %108 ], [ %104, %87 ]
  %114 = fcmp olt float %113, 1.000000e+00
  br i1 %114, label %115, label %124

115:                                              ; preds = %112
  %116 = fmul float %113, %96
  %117 = fmul float %113, %101
  %118 = fmul float %113, %97
  %119 = fmul float %113, %102
  %120 = bitcast float %116 to i32
  %121 = bitcast float %117 to i32
  %122 = bitcast float %118 to i32
  %123 = bitcast float %119 to i32
  br label %124

124:                                              ; preds = %115, %112
  %125 = phi i32 [ %123, %115 ], [ %95, %112 ]
  %126 = phi i32 [ %122, %115 ], [ %93, %112 ]
  %127 = phi i32 [ %121, %115 ], [ %91, %112 ]
  %128 = phi i32 [ %120, %115 ], [ %89, %112 ]
  %129 = phi float [ %119, %115 ], [ %102, %112 ]
  %130 = phi float [ %117, %115 ], [ %101, %112 ]
  %131 = phi float [ %118, %115 ], [ %97, %112 ]
  %132 = phi float [ %116, %115 ], [ %96, %112 ]
  %133 = fcmp oeq float %132, %131
  %134 = fcmp oeq float %130, %129
  %135 = and i1 %133, %134
  br i1 %135, label %136, label %151

136:                                              ; preds = %124
  %137 = fmul float %99, 5.000000e-01
  %138 = fcmp ult float %132, %137
  %139 = fmul float %106, 5.000000e-01
  %140 = fcmp ult float %130, %139
  %141 = or i1 %138, %140
  br i1 %141, label %144, label %142

142:                                              ; preds = %136
  %143 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 2, i32* %143, align 4
  br label %153

144:                                              ; preds = %136
  %145 = fcmp oeq float %132, 0.000000e+00
  %146 = fcmp oeq float %130, 0.000000e+00
  %147 = or i1 %145, %146
  %148 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  br i1 %147, label %149, label %150

149:                                              ; preds = %144
  store i32 1, i32* %148, align 4
  br label %153

150:                                              ; preds = %144
  store i32 3, i32* %148, align 4
  br label %153

151:                                              ; preds = %124
  %152 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 4, i32* %152, align 4
  br label %153

153:                                              ; preds = %142, %150, %149, %151
  %154 = phi i32 [ %125, %142 ], [ %125, %150 ], [ 0, %149 ], [ %125, %151 ]
  %155 = phi i32 [ %126, %142 ], [ %126, %150 ], [ 0, %149 ], [ %126, %151 ]
  %156 = phi i32 [ %127, %142 ], [ %127, %150 ], [ 0, %149 ], [ %127, %151 ]
  %157 = phi i32 [ %128, %142 ], [ %128, %150 ], [ 0, %149 ], [ %128, %151 ]
  %158 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %159 = bitcast %struct.SkPoint* %158 to i32*
  store i32 %157, i32* %159, align 4
  %160 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  %161 = bitcast float* %160 to i32*
  store i32 %156, i32* %161, align 4
  %162 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1
  %163 = bitcast %struct.SkPoint* %162 to i32*
  store i32 %155, i32* %163, align 4
  %164 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %165 = bitcast float* %164 to i32*
  store i32 %156, i32* %165, align 4
  %166 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2
  %167 = bitcast %struct.SkPoint* %166 to i32*
  store i32 %155, i32* %167, align 4
  %168 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %169 = bitcast float* %168 to i32*
  store i32 %154, i32* %169, align 4
  %170 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3
  %171 = bitcast %struct.SkPoint* %170 to i32*
  store i32 %157, i32* %171, align 4
  %172 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %173 = bitcast float* %172 to i32*
  store i32 %154, i32* %173, align 4
  br label %174

174:                                              ; preds = %153, %64, %84, %85, %24, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkRRect12setRectRadiiERK6SkRectPK7SkPoint(%class.SkRRect*, %struct.SkRect* nocapture readonly dereferenceable(16), %struct.SkPoint* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = fmul float %5, 0.000000e+00
  %7 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = fmul float %6, %8
  %10 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %11 = load float, float* %10, align 4
  %12 = fmul float %9, %11
  %13 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %14 = load float, float* %13, align 4
  %15 = fmul float %12, %14
  %16 = fcmp ord float %15, 0.000000e+00
  br i1 %16, label %19, label %17

17:                                               ; preds = %3
  %18 = bitcast %class.SkRRect* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %18, i8 0, i64 52, i1 false) #9
  br label %213

19:                                               ; preds = %3
  %20 = fcmp olt float %11, %5
  %21 = select i1 %20, float %11, float %5
  %22 = fcmp olt float %14, %8
  %23 = select i1 %22, float %14, float %8
  %24 = fcmp olt float %5, %11
  %25 = select i1 %24, float %11, float %5
  %26 = fcmp olt float %8, %14
  %27 = select i1 %26, float %14, float %8
  %28 = insertelement <2 x float> undef, float %21, i32 0
  %29 = insertelement <2 x float> %28, float %23, i32 1
  %30 = insertelement <2 x float> undef, float %25, i32 0
  %31 = insertelement <2 x float> %30, float %27, i32 1
  %32 = bitcast %class.SkRRect* %0 to <2 x float>*
  store <2 x float> %29, <2 x float>* %32, align 4
  %33 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %34 = bitcast float* %33 to <2 x float>*
  store <2 x float> %31, <2 x float>* %34, align 4
  %35 = fcmp uge float %21, %25
  %36 = fcmp uge float %23, %27
  %37 = or i1 %35, %36
  br i1 %37, label %38, label %41

38:                                               ; preds = %19
  %39 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %40 = bitcast %struct.SkPoint* %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %40, i8 0, i64 36, i1 false) #9
  br label %213

41:                                               ; preds = %19
  %42 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  %43 = load float, float* %42, align 4
  %44 = fmul float %43, 0.000000e+00
  %45 = getelementptr inbounds float, float* %42, i64 1
  %46 = load float, float* %45, align 4
  %47 = fmul float %44, %46
  %48 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 1, i32 0
  %49 = load float, float* %48, align 4
  %50 = fmul float %47, %49
  %51 = getelementptr inbounds float, float* %42, i64 3
  %52 = load float, float* %51, align 4
  %53 = fmul float %50, %52
  %54 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 2, i32 0
  %55 = load float, float* %54, align 4
  %56 = fmul float %53, %55
  %57 = getelementptr inbounds float, float* %42, i64 5
  %58 = load float, float* %57, align 4
  %59 = fmul float %56, %58
  %60 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 3, i32 0
  %61 = load float, float* %60, align 4
  %62 = fmul float %59, %61
  %63 = getelementptr inbounds float, float* %42, i64 7
  %64 = load float, float* %63, align 4
  %65 = fmul float %62, %64
  %66 = fcmp oeq float %65, 0.000000e+00
  br i1 %66, label %100, label %67

67:                                               ; preds = %41
  %68 = load float, float* %4, align 4
  %69 = fmul float %68, 0.000000e+00
  %70 = load float, float* %7, align 4
  %71 = fmul float %69, %70
  %72 = load float, float* %10, align 4
  %73 = fmul float %71, %72
  %74 = load float, float* %13, align 4
  %75 = fmul float %73, %74
  %76 = fcmp ord float %75, 0.000000e+00
  br i1 %76, label %79, label %77

77:                                               ; preds = %67
  %78 = bitcast %class.SkRRect* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %78, i8 0, i64 52, i1 false) #9
  br label %213

79:                                               ; preds = %67
  %80 = fcmp olt float %72, %68
  %81 = select i1 %80, float %72, float %68
  %82 = fcmp olt float %74, %70
  %83 = select i1 %82, float %74, float %70
  %84 = fcmp olt float %68, %72
  %85 = select i1 %84, float %72, float %68
  %86 = fcmp olt float %70, %74
  %87 = select i1 %86, float %74, float %70
  %88 = insertelement <2 x float> undef, float %81, i32 0
  %89 = insertelement <2 x float> %88, float %83, i32 1
  %90 = insertelement <2 x float> undef, float %85, i32 0
  %91 = insertelement <2 x float> %90, float %87, i32 1
  store <2 x float> %89, <2 x float>* %32, align 4
  store <2 x float> %91, <2 x float>* %34, align 4
  %92 = fcmp uge float %81, %85
  %93 = fcmp uge float %83, %87
  %94 = or i1 %92, %93
  %95 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %96 = bitcast %struct.SkPoint* %95 to i8*
  br i1 %94, label %97, label %98

97:                                               ; preds = %79
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %96, i8 0, i64 36, i1 false) #9
  br label %213

98:                                               ; preds = %79
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %96, i8 0, i64 32, i1 false) #9
  %99 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 1, i32* %99, align 4
  br label %213

100:                                              ; preds = %41
  %101 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %102 = bitcast %struct.SkPoint* %101 to i8*
  %103 = bitcast %struct.SkPoint* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %102, i8* align 4 %103, i64 32, i1 false)
  %104 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %101, i64 0, i32 0
  %105 = load float, float* %104, align 4
  %106 = fcmp ugt float %105, 0.000000e+00
  br i1 %106, label %107, label %111

107:                                              ; preds = %100
  %108 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  %109 = load float, float* %108, align 4
  %110 = fcmp ugt float %109, 0.000000e+00
  br i1 %110, label %113, label %111

111:                                              ; preds = %107, %100
  store float 0.000000e+00, float* %104, align 4
  %112 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  store float 0.000000e+00, float* %112, align 4
  br label %113

113:                                              ; preds = %111, %107
  %114 = phi i8 [ 1, %111 ], [ 0, %107 ]
  %115 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 0
  %116 = load float, float* %115, align 4
  %117 = fcmp ugt float %116, 0.000000e+00
  br i1 %117, label %118, label %122

118:                                              ; preds = %113
  %119 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %120 = load float, float* %119, align 4
  %121 = fcmp ugt float %120, 0.000000e+00
  br i1 %121, label %124, label %122

122:                                              ; preds = %118, %113
  store float 0.000000e+00, float* %115, align 4
  %123 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  store float 0.000000e+00, float* %123, align 4
  br label %124

124:                                              ; preds = %122, %118
  %125 = phi i8 [ %114, %122 ], [ 0, %118 ]
  %126 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 0
  %127 = load float, float* %126, align 4
  %128 = fcmp ugt float %127, 0.000000e+00
  br i1 %128, label %129, label %133

129:                                              ; preds = %124
  %130 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %131 = load float, float* %130, align 4
  %132 = fcmp ugt float %131, 0.000000e+00
  br i1 %132, label %135, label %133

133:                                              ; preds = %129, %124
  store float 0.000000e+00, float* %126, align 4
  %134 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  store float 0.000000e+00, float* %134, align 4
  br label %135

135:                                              ; preds = %133, %129
  %136 = phi i8 [ %125, %133 ], [ 0, %129 ]
  %137 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 0
  %138 = load float, float* %137, align 4
  %139 = fcmp ugt float %138, 0.000000e+00
  br i1 %139, label %140, label %144

140:                                              ; preds = %135
  %141 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %142 = load float, float* %141, align 4
  %143 = fcmp ugt float %142, 0.000000e+00
  br i1 %143, label %179, label %144

144:                                              ; preds = %135, %140
  store float 0.000000e+00, float* %137, align 4
  %145 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  store float 0.000000e+00, float* %145, align 4
  %146 = and i8 %136, 1
  %147 = icmp eq i8 %146, 0
  br i1 %147, label %179, label %148

148:                                              ; preds = %144
  %149 = load float, float* %4, align 4
  %150 = fmul float %149, 0.000000e+00
  %151 = load float, float* %7, align 4
  %152 = fmul float %150, %151
  %153 = load float, float* %10, align 4
  %154 = fmul float %152, %153
  %155 = load float, float* %13, align 4
  %156 = fmul float %154, %155
  %157 = fcmp ord float %156, 0.000000e+00
  br i1 %157, label %160, label %158

158:                                              ; preds = %148
  %159 = bitcast %class.SkRRect* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %159, i8 0, i64 52, i1 false) #9
  br label %213

160:                                              ; preds = %148
  %161 = fcmp olt float %153, %149
  %162 = select i1 %161, float %153, float %149
  %163 = fcmp olt float %155, %151
  %164 = select i1 %163, float %155, float %151
  %165 = fcmp olt float %149, %153
  %166 = select i1 %165, float %153, float %149
  %167 = fcmp olt float %151, %155
  %168 = select i1 %167, float %155, float %151
  %169 = insertelement <2 x float> undef, float %162, i32 0
  %170 = insertelement <2 x float> %169, float %164, i32 1
  %171 = insertelement <2 x float> undef, float %166, i32 0
  %172 = insertelement <2 x float> %171, float %168, i32 1
  store <2 x float> %170, <2 x float>* %32, align 4
  store <2 x float> %172, <2 x float>* %34, align 4
  %173 = fcmp uge float %162, %166
  %174 = fcmp uge float %164, %168
  %175 = or i1 %173, %174
  br i1 %175, label %176, label %177

176:                                              ; preds = %160
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %102, i8 0, i64 36, i1 false) #9
  br label %213

177:                                              ; preds = %160
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %102, i8 0, i64 32, i1 false) #9
  %178 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 1, i32* %178, align 4
  br label %213

179:                                              ; preds = %144, %140
  %180 = tail call zeroext i1 @_ZN7SkRRect10scaleRadiiEv(%class.SkRRect* %0)
  %181 = tail call zeroext i1 @_ZNK7SkRRect7isValidEv(%class.SkRRect* %0)
  br i1 %181, label %213, label %182

182:                                              ; preds = %179
  %183 = load float, float* %4, align 4
  %184 = fmul float %183, 0.000000e+00
  %185 = load float, float* %7, align 4
  %186 = fmul float %184, %185
  %187 = load float, float* %10, align 4
  %188 = fmul float %186, %187
  %189 = load float, float* %13, align 4
  %190 = fmul float %188, %189
  %191 = fcmp ord float %190, 0.000000e+00
  br i1 %191, label %194, label %192

192:                                              ; preds = %182
  %193 = bitcast %class.SkRRect* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %193, i8 0, i64 52, i1 false) #9
  br label %213

194:                                              ; preds = %182
  %195 = fcmp olt float %187, %183
  %196 = select i1 %195, float %187, float %183
  %197 = fcmp olt float %189, %185
  %198 = select i1 %197, float %189, float %185
  %199 = fcmp olt float %183, %187
  %200 = select i1 %199, float %187, float %183
  %201 = fcmp olt float %185, %189
  %202 = select i1 %201, float %189, float %185
  %203 = insertelement <2 x float> undef, float %196, i32 0
  %204 = insertelement <2 x float> %203, float %198, i32 1
  %205 = insertelement <2 x float> undef, float %200, i32 0
  %206 = insertelement <2 x float> %205, float %202, i32 1
  store <2 x float> %204, <2 x float>* %32, align 4
  store <2 x float> %206, <2 x float>* %34, align 4
  %207 = fcmp uge float %196, %200
  %208 = fcmp uge float %198, %202
  %209 = or i1 %207, %208
  br i1 %209, label %210, label %211

210:                                              ; preds = %194
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %102, i8 0, i64 36, i1 false) #9
  br label %213

211:                                              ; preds = %194
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %102, i8 0, i64 32, i1 false) #9
  %212 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 1, i32* %212, align 4
  br label %213

213:                                              ; preds = %17, %38, %211, %210, %192, %177, %176, %158, %98, %97, %77, %179
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7SkRRect10scaleRadiiEv(%class.SkRRect*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %3 = load float, float* %2, align 4
  %4 = fpext float %3 to double
  %5 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fpext float %6 to double
  %8 = fsub double %4, %7
  %9 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 3
  %10 = load float, float* %9, align 4
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = fpext float %13 to double
  %15 = fsub double %11, %14
  %16 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1
  %17 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %16, i64 0, i64 0, i32 0
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 0
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  %23 = fadd double %19, %22
  %24 = fcmp ogt double %23, %8
  br i1 %24, label %25, label %29

25:                                               ; preds = %1
  %26 = fdiv double %8, %23
  %27 = fcmp olt double %26, 1.000000e+00
  %28 = select i1 %27, double %26, double 1.000000e+00
  br label %29

29:                                               ; preds = %1, %25
  %30 = phi double [ %28, %25 ], [ 1.000000e+00, %1 ]
  %31 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %32 = load float, float* %31, align 4
  %33 = fpext float %32 to double
  %34 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %35 = load float, float* %34, align 4
  %36 = fpext float %35 to double
  %37 = fadd double %33, %36
  %38 = fcmp ogt double %37, %15
  br i1 %38, label %39, label %43

39:                                               ; preds = %29
  %40 = fdiv double %15, %37
  %41 = fcmp olt double %40, %30
  %42 = select i1 %41, double %40, double %30
  br label %43

43:                                               ; preds = %29, %39
  %44 = phi double [ %42, %39 ], [ %30, %29 ]
  %45 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 0
  %46 = load float, float* %45, align 4
  %47 = fpext float %46 to double
  %48 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 0
  %49 = load float, float* %48, align 4
  %50 = fpext float %49 to double
  %51 = fadd double %47, %50
  %52 = fcmp ogt double %51, %8
  br i1 %52, label %53, label %57

53:                                               ; preds = %43
  %54 = fdiv double %8, %51
  %55 = fcmp olt double %54, %44
  %56 = select i1 %55, double %54, double %44
  br label %57

57:                                               ; preds = %43, %53
  %58 = phi double [ %56, %53 ], [ %44, %43 ]
  %59 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %60 = load float, float* %59, align 4
  %61 = fpext float %60 to double
  %62 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  %63 = load float, float* %62, align 4
  %64 = fpext float %63 to double
  %65 = fadd double %61, %64
  %66 = fcmp ogt double %65, %15
  br i1 %66, label %67, label %71

67:                                               ; preds = %57
  %68 = fdiv double %15, %65
  %69 = fcmp olt double %68, %58
  %70 = select i1 %69, double %68, double %58
  br label %71

71:                                               ; preds = %57, %67
  %72 = phi double [ %70, %67 ], [ %58, %57 ]
  %73 = fadd float %18, %21
  %74 = fcmp oeq float %73, %18
  br i1 %74, label %77, label %75

75:                                               ; preds = %71
  %76 = fcmp oeq float %73, %21
  br i1 %76, label %77, label %81

77:                                               ; preds = %75, %71
  %78 = phi float* [ %20, %71 ], [ %17, %75 ]
  %79 = phi float [ 0.000000e+00, %71 ], [ %21, %75 ]
  %80 = phi float [ %18, %71 ], [ 0.000000e+00, %75 ]
  store float 0.000000e+00, float* %78, align 4
  br label %81

81:                                               ; preds = %77, %75
  %82 = phi float [ %21, %75 ], [ %79, %77 ]
  %83 = phi float [ %18, %75 ], [ %80, %77 ]
  %84 = fadd float %32, %35
  %85 = fcmp oeq float %84, %32
  br i1 %85, label %88, label %86

86:                                               ; preds = %81
  %87 = fcmp oeq float %84, %35
  br i1 %87, label %88, label %92

88:                                               ; preds = %86, %81
  %89 = phi float* [ %34, %81 ], [ %31, %86 ]
  %90 = phi float [ 0.000000e+00, %81 ], [ %35, %86 ]
  %91 = phi float [ %32, %81 ], [ 0.000000e+00, %86 ]
  store float 0.000000e+00, float* %89, align 4
  br label %92

92:                                               ; preds = %88, %86
  %93 = phi float [ %35, %86 ], [ %90, %88 ]
  %94 = phi float [ %32, %86 ], [ %91, %88 ]
  %95 = fadd float %46, %49
  %96 = fcmp oeq float %95, %46
  br i1 %96, label %99, label %97

97:                                               ; preds = %92
  %98 = fcmp oeq float %95, %49
  br i1 %98, label %99, label %101

99:                                               ; preds = %97, %92
  %100 = phi float* [ %48, %92 ], [ %45, %97 ]
  store float 0.000000e+00, float* %100, align 4
  br label %101

101:                                              ; preds = %99, %97
  %102 = fadd float %60, %63
  %103 = fcmp oeq float %102, %60
  br i1 %103, label %106, label %104

104:                                              ; preds = %101
  %105 = fcmp oeq float %102, %63
  br i1 %105, label %106, label %108

106:                                              ; preds = %104, %101
  %107 = phi float* [ %62, %101 ], [ %59, %104 ]
  store float 0.000000e+00, float* %107, align 4
  br label %108

108:                                              ; preds = %106, %104
  %109 = fcmp olt double %72, 1.000000e+00
  br i1 %109, label %110, label %254

110:                                              ; preds = %108
  %111 = fpext float %83 to double
  %112 = fmul double %72, %111
  %113 = fptrunc double %112 to float
  store float %113, float* %17, align 4
  %114 = fpext float %82 to double
  %115 = fmul double %72, %114
  %116 = fptrunc double %115 to float
  store float %116, float* %20, align 4
  %117 = fadd float %113, %116
  %118 = fpext float %117 to double
  %119 = fcmp olt double %8, %118
  br i1 %119, label %120, label %145

120:                                              ; preds = %110
  %121 = ptrtoint [4 x %struct.SkPoint]* %16 to i64
  %122 = ptrtoint float* %20 to i64
  %123 = fcmp ogt float %113, %116
  %124 = select i1 %123, i64 %122, i64 %121
  %125 = select i1 %123, i64 %121, i64 %122
  %126 = inttoptr i64 %124 to float*
  %127 = load float, float* %126, align 4
  %128 = fpext float %127 to double
  %129 = fsub double %8, %128
  %130 = fptrunc double %129 to float
  %131 = fadd float %127, %130
  %132 = fpext float %131 to double
  %133 = fcmp olt double %8, %132
  br i1 %133, label %134, label %140

134:                                              ; preds = %120, %134
  %135 = phi float [ %136, %134 ], [ %130, %120 ]
  %136 = tail call float @nextafterf(float %135, float 0.000000e+00) #9
  %137 = fadd float %127, %136
  %138 = fpext float %137 to double
  %139 = fcmp olt double %8, %138
  br i1 %139, label %134, label %140

140:                                              ; preds = %134, %120
  %141 = phi float [ %130, %120 ], [ %136, %134 ]
  %142 = inttoptr i64 %125 to float*
  store float %141, float* %142, align 4
  %143 = load float, float* %31, align 4
  %144 = load float, float* %34, align 4
  br label %145

145:                                              ; preds = %110, %140
  %146 = phi float [ %93, %110 ], [ %144, %140 ]
  %147 = phi float [ %94, %110 ], [ %143, %140 ]
  %148 = fpext float %147 to double
  %149 = fmul double %72, %148
  %150 = fptrunc double %149 to float
  store float %150, float* %31, align 4
  %151 = fpext float %146 to double
  %152 = fmul double %72, %151
  %153 = fptrunc double %152 to float
  store float %153, float* %34, align 4
  %154 = fadd float %150, %153
  %155 = fpext float %154 to double
  %156 = fcmp olt double %15, %155
  br i1 %156, label %157, label %180

157:                                              ; preds = %145
  %158 = ptrtoint float* %31 to i64
  %159 = ptrtoint float* %34 to i64
  %160 = fcmp ogt float %150, %153
  %161 = select i1 %160, i64 %159, i64 %158
  %162 = select i1 %160, i64 %158, i64 %159
  %163 = inttoptr i64 %161 to float*
  %164 = load float, float* %163, align 4
  %165 = fpext float %164 to double
  %166 = fsub double %15, %165
  %167 = fptrunc double %166 to float
  %168 = fadd float %164, %167
  %169 = fpext float %168 to double
  %170 = fcmp olt double %15, %169
  br i1 %170, label %171, label %177

171:                                              ; preds = %157, %171
  %172 = phi float [ %173, %171 ], [ %167, %157 ]
  %173 = tail call float @nextafterf(float %172, float 0.000000e+00) #9
  %174 = fadd float %164, %173
  %175 = fpext float %174 to double
  %176 = fcmp olt double %15, %175
  br i1 %176, label %171, label %177

177:                                              ; preds = %171, %157
  %178 = phi float [ %167, %157 ], [ %173, %171 ]
  %179 = inttoptr i64 %162 to float*
  store float %178, float* %179, align 4
  br label %180

180:                                              ; preds = %145, %177
  %181 = load float, float* %45, align 4
  %182 = load float, float* %48, align 4
  %183 = insertelement <2 x float> undef, float %181, i32 0
  %184 = insertelement <2 x float> %183, float %182, i32 1
  %185 = fpext <2 x float> %184 to <2 x double>
  %186 = insertelement <2 x double> undef, double %72, i32 0
  %187 = shufflevector <2 x double> %186, <2 x double> undef, <2 x i32> zeroinitializer
  %188 = fmul <2 x double> %187, %185
  %189 = fptrunc <2 x double> %188 to <2 x float>
  %190 = extractelement <2 x float> %189, i32 0
  store float %190, float* %45, align 4
  %191 = extractelement <2 x float> %189, i32 1
  store float %191, float* %48, align 4
  %192 = fadd float %190, %191
  %193 = fpext float %192 to double
  %194 = fcmp olt double %8, %193
  br i1 %194, label %195, label %218

195:                                              ; preds = %180
  %196 = ptrtoint float* %45 to i64
  %197 = ptrtoint float* %48 to i64
  %198 = fcmp ogt float %190, %191
  %199 = select i1 %198, i64 %197, i64 %196
  %200 = select i1 %198, i64 %196, i64 %197
  %201 = inttoptr i64 %199 to float*
  %202 = load float, float* %201, align 4
  %203 = fpext float %202 to double
  %204 = fsub double %8, %203
  %205 = fptrunc double %204 to float
  %206 = fadd float %202, %205
  %207 = fpext float %206 to double
  %208 = fcmp olt double %8, %207
  br i1 %208, label %209, label %215

209:                                              ; preds = %195, %209
  %210 = phi float [ %211, %209 ], [ %205, %195 ]
  %211 = tail call float @nextafterf(float %210, float 0.000000e+00) #9
  %212 = fadd float %202, %211
  %213 = fpext float %212 to double
  %214 = fcmp olt double %8, %213
  br i1 %214, label %209, label %215

215:                                              ; preds = %209, %195
  %216 = phi float [ %205, %195 ], [ %211, %209 ]
  %217 = inttoptr i64 %200 to float*
  store float %216, float* %217, align 4
  br label %218

218:                                              ; preds = %180, %215
  %219 = load float, float* %59, align 4
  %220 = load float, float* %62, align 4
  %221 = insertelement <2 x float> undef, float %219, i32 0
  %222 = insertelement <2 x float> %221, float %220, i32 1
  %223 = fpext <2 x float> %222 to <2 x double>
  %224 = fmul <2 x double> %187, %223
  %225 = fptrunc <2 x double> %224 to <2 x float>
  %226 = extractelement <2 x float> %225, i32 0
  store float %226, float* %59, align 4
  %227 = extractelement <2 x float> %225, i32 1
  store float %227, float* %62, align 4
  %228 = fadd float %226, %227
  %229 = fpext float %228 to double
  %230 = fcmp olt double %15, %229
  br i1 %230, label %231, label %254

231:                                              ; preds = %218
  %232 = ptrtoint float* %59 to i64
  %233 = ptrtoint float* %62 to i64
  %234 = fcmp ogt float %226, %227
  %235 = select i1 %234, i64 %233, i64 %232
  %236 = select i1 %234, i64 %232, i64 %233
  %237 = inttoptr i64 %235 to float*
  %238 = load float, float* %237, align 4
  %239 = fpext float %238 to double
  %240 = fsub double %15, %239
  %241 = fptrunc double %240 to float
  %242 = fadd float %238, %241
  %243 = fpext float %242 to double
  %244 = fcmp olt double %15, %243
  br i1 %244, label %245, label %251

245:                                              ; preds = %231, %245
  %246 = phi float [ %247, %245 ], [ %241, %231 ]
  %247 = tail call float @nextafterf(float %246, float 0.000000e+00) #9
  %248 = fadd float %238, %247
  %249 = fpext float %248 to double
  %250 = fcmp olt double %15, %249
  br i1 %250, label %245, label %251

251:                                              ; preds = %245, %231
  %252 = phi float [ %241, %231 ], [ %247, %245 ]
  %253 = inttoptr i64 %236 to float*
  store float %252, float* %253, align 4
  br label %254

254:                                              ; preds = %251, %218, %108
  %255 = load float, float* %17, align 4
  %256 = fcmp ugt float %255, 0.000000e+00
  br i1 %256, label %257, label %260

257:                                              ; preds = %254
  %258 = load float, float* %62, align 4
  %259 = fcmp ugt float %258, 0.000000e+00
  br i1 %259, label %261, label %260

260:                                              ; preds = %257, %254
  store float 0.000000e+00, float* %17, align 4
  store float 0.000000e+00, float* %62, align 4
  br label %261

261:                                              ; preds = %260, %257
  %262 = load float, float* %20, align 4
  %263 = fcmp ugt float %262, 0.000000e+00
  br i1 %263, label %264, label %267

264:                                              ; preds = %261
  %265 = load float, float* %31, align 4
  %266 = fcmp ugt float %265, 0.000000e+00
  br i1 %266, label %268, label %267

267:                                              ; preds = %264, %261
  store float 0.000000e+00, float* %20, align 4
  store float 0.000000e+00, float* %31, align 4
  br label %268

268:                                              ; preds = %267, %264
  %269 = load float, float* %45, align 4
  %270 = fcmp ugt float %269, 0.000000e+00
  br i1 %270, label %271, label %274

271:                                              ; preds = %268
  %272 = load float, float* %34, align 4
  %273 = fcmp ugt float %272, 0.000000e+00
  br i1 %273, label %275, label %274

274:                                              ; preds = %271, %268
  store float 0.000000e+00, float* %45, align 4
  store float 0.000000e+00, float* %34, align 4
  br label %275

275:                                              ; preds = %274, %271
  %276 = load float, float* %48, align 4
  %277 = fcmp ugt float %276, 0.000000e+00
  br i1 %277, label %278, label %281

278:                                              ; preds = %275
  %279 = load float, float* %59, align 4
  %280 = fcmp ugt float %279, 0.000000e+00
  br i1 %280, label %282, label %281

281:                                              ; preds = %278, %275
  store float 0.000000e+00, float* %48, align 4
  store float 0.000000e+00, float* %59, align 4
  br label %282

282:                                              ; preds = %278, %281
  tail call void @_ZN7SkRRect11computeTypeEv(%class.SkRRect* %0)
  ret i1 %109
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7SkRRect7isValidEv(%class.SkRRect* readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0
  %3 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1
  %4 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 0
  %5 = tail call zeroext i1 @_ZN7SkRRect20AreRectAndRadiiValidERK6SkRectPK7SkPoint(%struct.SkRect* dereferenceable(16) %2, %struct.SkPoint* %4)
  br i1 %5, label %6, label %207

6:                                                ; preds = %1
  %7 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = fcmp oeq float %8, 0.000000e+00
  %10 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = fcmp oeq float %11, 0.000000e+00
  %13 = or i1 %9, %12
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 0
  %16 = load float, float* %15, align 4
  %17 = fcmp une float %16, 0.000000e+00
  br i1 %17, label %41, label %35

18:                                               ; preds = %284
  %19 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %20 = load float, float* %19, align 4
  %21 = fcmp oeq float %11, %20
  %22 = fcmp oeq float %16, %60
  %23 = and i1 %21, %22
  br i1 %23, label %24, label %30

24:                                               ; preds = %18
  %25 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %28 = load float, float* %27, align 4
  %29 = fcmp oeq float %26, %28
  br label %30

30:                                               ; preds = %284, %18, %24
  %31 = phi i1 [ false, %18 ], [ false, %284 ], [ %29, %24 ]
  %32 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = icmp ugt i32 %33, 5
  br i1 %34, label %207, label %62

35:                                               ; preds = %6
  %36 = and i1 %9, %12
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %39 = load float, float* %38, align 4
  %40 = fcmp une float %39, 0.000000e+00
  br i1 %40, label %41, label %42

41:                                               ; preds = %35, %6
  br label %42

42:                                               ; preds = %41, %35
  %43 = phi i8 [ 0, %41 ], [ %37, %35 ]
  %44 = fcmp une float %16, %8
  br i1 %44, label %49, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %47 = load float, float* %46, align 4
  %48 = fcmp une float %47, %11
  br i1 %48, label %49, label %50

49:                                               ; preds = %45, %42
  br label %50

50:                                               ; preds = %49, %45
  %51 = phi i8 [ 0, %49 ], [ 1, %45 ]
  br i1 %17, label %52, label %57

52:                                               ; preds = %50
  %53 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %54 = load float, float* %53, align 4
  %55 = fcmp une float %54, 0.000000e+00
  br i1 %55, label %56, label %57

56:                                               ; preds = %52
  br label %57

57:                                               ; preds = %50, %52, %56
  %58 = phi i8 [ 0, %56 ], [ %14, %52 ], [ %14, %50 ]
  %59 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 0
  %60 = load float, float* %59, align 4
  %61 = fcmp une float %60, 0.000000e+00
  br i1 %61, label %239, label %235

62:                                               ; preds = %30
  switch i32 %33, label %206 [
    i32 0, label %63
    i32 1, label %82
    i32 2, label %99
    i32 3, label %144
    i32 4, label %167
    i32 5, label %185
  ]

63:                                               ; preds = %62
  %64 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 0
  %65 = load float, float* %64, align 4
  %66 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %67 = load float, float* %66, align 4
  %68 = fcmp olt float %65, %67
  br i1 %68, label %69, label %75

69:                                               ; preds = %63
  %70 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 1
  %71 = load float, float* %70, align 4
  %72 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 3
  %73 = load float, float* %72, align 4
  %74 = fcmp olt float %71, %73
  br label %75

75:                                               ; preds = %63, %69
  %76 = phi i1 [ false, %63 ], [ %74, %69 ]
  %77 = and i8 %268, 1
  %78 = and i8 %77, %285
  %79 = and i8 %78, %278
  %80 = icmp eq i8 %79, 0
  %81 = or i1 %80, %76
  br i1 %81, label %207, label %206

82:                                               ; preds = %62
  %83 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 0
  %84 = load float, float* %83, align 4
  %85 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %86 = load float, float* %85, align 4
  %87 = fcmp olt float %84, %86
  br i1 %87, label %88, label %207

88:                                               ; preds = %82
  %89 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 1
  %90 = load float, float* %89, align 4
  %91 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 3
  %92 = load float, float* %91, align 4
  %93 = fcmp uge float %90, %92
  %94 = and i8 %268, 1
  %95 = and i8 %94, %285
  %96 = and i8 %95, %278
  %97 = icmp eq i8 %96, 0
  %98 = or i1 %97, %93
  br i1 %98, label %207, label %206

99:                                               ; preds = %62
  %100 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 0
  %101 = load float, float* %100, align 4
  %102 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %103 = load float, float* %102, align 4
  %104 = fcmp olt float %101, %103
  br i1 %104, label %105, label %111

105:                                              ; preds = %99
  %106 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 1
  %107 = load float, float* %106, align 4
  %108 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 3
  %109 = load float, float* %108, align 4
  %110 = fcmp olt float %107, %109
  br label %111

111:                                              ; preds = %99, %105
  %112 = phi i1 [ false, %99 ], [ %110, %105 ]
  %113 = and i8 %268, 1
  %114 = icmp eq i8 %113, 0
  %115 = and i1 %114, %112
  %116 = and i8 %278, 1
  %117 = icmp ne i8 %116, 0
  %118 = and i1 %117, %115
  %119 = and i8 %285, 1
  %120 = icmp eq i8 %119, 0
  %121 = and i1 %120, %118
  br i1 %121, label %122, label %207

122:                                              ; preds = %111
  %123 = fmul float %103, 5.000000e-01
  %124 = fmul float %101, 5.000000e-01
  %125 = fsub float %123, %124
  %126 = fsub float %8, %125
  %127 = tail call float @llvm.fabs.f32(float %126) #9
  %128 = fcmp ugt float %127, 0x3F30000000000000
  br i1 %128, label %207, label %133

129:                                              ; preds = %133
  %130 = fsub float %16, %125
  %131 = tail call float @llvm.fabs.f32(float %130) #9
  %132 = fcmp ugt float %131, 0x3F30000000000000
  br i1 %132, label %207, label %209

133:                                              ; preds = %122
  %134 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 1
  %135 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 3
  %136 = load float, float* %135, align 4
  %137 = fmul float %136, 5.000000e-01
  %138 = load float, float* %134, align 4
  %139 = fmul float %138, 5.000000e-01
  %140 = fsub float %137, %139
  %141 = fsub float %11, %140
  %142 = tail call float @llvm.fabs.f32(float %141) #9
  %143 = fcmp ugt float %142, 0x3F30000000000000
  br i1 %143, label %207, label %129

144:                                              ; preds = %62
  %145 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 0
  %146 = load float, float* %145, align 4
  %147 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %148 = load float, float* %147, align 4
  %149 = fcmp olt float %146, %148
  br i1 %149, label %150, label %156

150:                                              ; preds = %144
  %151 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 1
  %152 = load float, float* %151, align 4
  %153 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 3
  %154 = load float, float* %153, align 4
  %155 = fcmp olt float %152, %154
  br label %156

156:                                              ; preds = %144, %150
  %157 = phi i1 [ false, %144 ], [ %155, %150 ]
  %158 = and i8 %268, 1
  %159 = icmp eq i8 %158, 0
  %160 = and i1 %159, %157
  %161 = and i8 %278, 1
  %162 = icmp ne i8 %161, 0
  %163 = and i1 %162, %160
  %164 = and i8 %285, 1
  %165 = icmp eq i8 %164, 0
  %166 = and i1 %165, %163
  br i1 %166, label %206, label %207

167:                                              ; preds = %62
  %168 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 0
  %169 = load float, float* %168, align 4
  %170 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %171 = load float, float* %170, align 4
  %172 = fcmp olt float %169, %171
  br i1 %172, label %173, label %207

173:                                              ; preds = %167
  %174 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 1
  %175 = load float, float* %174, align 4
  %176 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 3
  %177 = load float, float* %176, align 4
  %178 = fcmp olt float %175, %177
  %179 = or i8 %285, %268
  %180 = or i8 %179, %278
  %181 = and i8 %180, 1
  %182 = icmp eq i8 %181, 0
  %183 = and i1 %182, %178
  %184 = and i1 %31, %183
  br i1 %184, label %206, label %207

185:                                              ; preds = %62
  %186 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 0
  %187 = load float, float* %186, align 4
  %188 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %189 = load float, float* %188, align 4
  %190 = fcmp olt float %187, %189
  br i1 %190, label %191, label %197

191:                                              ; preds = %185
  %192 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 1
  %193 = load float, float* %192, align 4
  %194 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 3
  %195 = load float, float* %194, align 4
  %196 = fcmp olt float %193, %195
  br label %197

197:                                              ; preds = %185, %191
  %198 = phi i1 [ false, %185 ], [ %196, %191 ]
  %199 = or i8 %285, %268
  %200 = or i8 %199, %278
  %201 = and i8 %200, 1
  %202 = icmp eq i8 %201, 0
  %203 = and i1 %202, %198
  %204 = xor i1 %203, true
  %205 = or i1 %31, %204
  br i1 %205, label %207, label %206

206:                                              ; preds = %229, %173, %197, %156, %88, %75, %62
  br label %207

207:                                              ; preds = %167, %82, %133, %122, %129, %209, %215, %219, %225, %229, %173, %206, %30, %75, %88, %111, %156, %197, %1
  %208 = phi i1 [ false, %1 ], [ true, %206 ], [ false, %30 ], [ false, %75 ], [ false, %88 ], [ false, %111 ], [ false, %156 ], [ false, %173 ], [ false, %197 ], [ false, %229 ], [ false, %225 ], [ false, %219 ], [ false, %215 ], [ false, %209 ], [ false, %129 ], [ false, %122 ], [ false, %133 ], [ false, %82 ], [ false, %167 ]
  ret i1 %208

209:                                              ; preds = %129
  %210 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %211 = load float, float* %210, align 4
  %212 = fsub float %211, %140
  %213 = tail call float @llvm.fabs.f32(float %212) #9
  %214 = fcmp ugt float %213, 0x3F30000000000000
  br i1 %214, label %207, label %215

215:                                              ; preds = %209
  %216 = fsub float %60, %125
  %217 = tail call float @llvm.fabs.f32(float %216) #9
  %218 = fcmp ugt float %217, 0x3F30000000000000
  br i1 %218, label %207, label %219

219:                                              ; preds = %215
  %220 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %221 = load float, float* %220, align 4
  %222 = fsub float %221, %140
  %223 = tail call float @llvm.fabs.f32(float %222) #9
  %224 = fcmp ugt float %223, 0x3F30000000000000
  br i1 %224, label %207, label %225

225:                                              ; preds = %219
  %226 = fsub float %260, %125
  %227 = tail call float @llvm.fabs.f32(float %226) #9
  %228 = fcmp ugt float %227, 0x3F30000000000000
  br i1 %228, label %207, label %229

229:                                              ; preds = %225
  %230 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %231 = load float, float* %230, align 4
  %232 = fsub float %231, %140
  %233 = tail call float @llvm.fabs.f32(float %232) #9
  %234 = fcmp ugt float %233, 0x3F30000000000000
  br i1 %234, label %207, label %206

235:                                              ; preds = %57
  %236 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %237 = load float, float* %236, align 4
  %238 = fcmp une float %237, 0.000000e+00
  br i1 %238, label %239, label %240

239:                                              ; preds = %235, %57
  br label %240

240:                                              ; preds = %239, %235
  %241 = phi i8 [ 0, %239 ], [ %43, %235 ]
  %242 = fcmp une float %60, %16
  br i1 %242, label %249, label %243

243:                                              ; preds = %240
  %244 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %245 = load float, float* %244, align 4
  %246 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %247 = load float, float* %246, align 4
  %248 = fcmp une float %245, %247
  br i1 %248, label %249, label %250

249:                                              ; preds = %243, %240
  br label %250

250:                                              ; preds = %249, %243
  %251 = phi i8 [ 0, %249 ], [ %51, %243 ]
  br i1 %61, label %252, label %257

252:                                              ; preds = %250
  %253 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %254 = load float, float* %253, align 4
  %255 = fcmp une float %254, 0.000000e+00
  br i1 %255, label %256, label %257

256:                                              ; preds = %252
  br label %257

257:                                              ; preds = %256, %252, %250
  %258 = phi i8 [ 0, %256 ], [ %58, %252 ], [ %58, %250 ]
  %259 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 0
  %260 = load float, float* %259, align 4
  %261 = fcmp une float %260, 0.000000e+00
  br i1 %261, label %266, label %262

262:                                              ; preds = %257
  %263 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %264 = load float, float* %263, align 4
  %265 = fcmp une float %264, 0.000000e+00
  br i1 %265, label %266, label %267

266:                                              ; preds = %262, %257
  br label %267

267:                                              ; preds = %266, %262
  %268 = phi i8 [ 0, %266 ], [ %241, %262 ]
  %269 = fcmp une float %260, %60
  br i1 %269, label %276, label %270

270:                                              ; preds = %267
  %271 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %272 = load float, float* %271, align 4
  %273 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %274 = load float, float* %273, align 4
  %275 = fcmp une float %272, %274
  br i1 %275, label %276, label %277

276:                                              ; preds = %270, %267
  br label %277

277:                                              ; preds = %276, %270
  %278 = phi i8 [ 0, %276 ], [ %251, %270 ]
  br i1 %261, label %279, label %284

279:                                              ; preds = %277
  %280 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %281 = load float, float* %280, align 4
  %282 = fcmp une float %281, 0.000000e+00
  br i1 %282, label %283, label %284

283:                                              ; preds = %279
  br label %284

284:                                              ; preds = %283, %279, %277
  %285 = phi i8 [ 0, %283 ], [ %258, %279 ], [ %258, %277 ]
  %286 = fcmp oeq float %8, %260
  br i1 %286, label %18, label %30
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7SkRRect11computeTypeEv(%class.SkRRect*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %5 = load float, float* %4, align 4
  %6 = fcmp olt float %3, %5
  br i1 %6, label %7, label %13

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 3
  %11 = load float, float* %10, align 4
  %12 = fcmp uge float %9, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %7, %1
  %14 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 0, i32* %14, align 4
  br label %118

15:                                               ; preds = %7
  %16 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 0
  %17 = load float, float* %16, align 4
  %18 = fcmp oeq float %17, 0.000000e+00
  br i1 %18, label %24, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  %21 = load float, float* %20, align 4
  %22 = fcmp oeq float %21, 0.000000e+00
  %23 = zext i1 %22 to i8
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi i8 [ 1, %15 ], [ %23, %19 ]
  %26 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 0
  %27 = load float, float* %26, align 4
  %28 = fcmp une float %27, 0.000000e+00
  br i1 %28, label %29, label %34

29:                                               ; preds = %24
  %30 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %31 = load float, float* %30, align 4
  %32 = fcmp une float %31, 0.000000e+00
  br i1 %32, label %33, label %34

33:                                               ; preds = %29
  br label %34

34:                                               ; preds = %33, %29, %24
  %35 = phi i8 [ 0, %33 ], [ %25, %29 ], [ %25, %24 ]
  %36 = fcmp une float %27, %17
  br i1 %36, label %43, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %39 = load float, float* %38, align 4
  %40 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  %41 = load float, float* %40, align 4
  %42 = fcmp une float %39, %41
  br i1 %42, label %43, label %44

43:                                               ; preds = %37, %34
  br label %44

44:                                               ; preds = %37, %43
  %45 = phi i8 [ 0, %43 ], [ 1, %37 ]
  %46 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 0
  %47 = load float, float* %46, align 4
  %48 = fcmp une float %47, 0.000000e+00
  br i1 %48, label %119, label %124

49:                                               ; preds = %154
  %50 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 1, i32* %50, align 4
  br label %118

51:                                               ; preds = %154
  %52 = and i8 %155, 1
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %68, label %54

54:                                               ; preds = %51
  %55 = fsub float %5, %3
  %56 = fmul float %55, 5.000000e-01
  %57 = fcmp ult float %17, %56
  br i1 %57, label %66, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  %60 = load float, float* %59, align 4
  %61 = fsub float %11, %9
  %62 = fmul float %61, 5.000000e-01
  %63 = fcmp ult float %60, %62
  br i1 %63, label %66, label %64

64:                                               ; preds = %58
  %65 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 2, i32* %65, align 4
  br label %118

66:                                               ; preds = %58, %54
  %67 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  store i32 3, i32* %67, align 4
  br label %118

68:                                               ; preds = %51
  %69 = fcmp oeq float %17, %137
  br i1 %69, label %70, label %78

70:                                               ; preds = %68
  %71 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  %72 = load float, float* %71, align 4
  %73 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %74 = load float, float* %73, align 4
  %75 = fcmp oeq float %72, %74
  %76 = fcmp oeq float %27, %47
  %77 = and i1 %75, %76
  br i1 %77, label %80, label %78

78:                                               ; preds = %70, %68
  %79 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  br label %88

80:                                               ; preds = %70
  %81 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %82 = load float, float* %81, align 4
  %83 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %84 = load float, float* %83, align 4
  %85 = fcmp oeq float %82, %84
  %86 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  br i1 %85, label %87, label %88

87:                                               ; preds = %80
  br label %88

88:                                               ; preds = %78, %80, %87
  %89 = phi i32* [ %86, %87 ], [ %86, %80 ], [ %79, %78 ]
  %90 = phi i32 [ 4, %87 ], [ 5, %80 ], [ 5, %78 ]
  store i32 %90, i32* %89, align 4
  %91 = tail call zeroext i1 @_ZNK7SkRRect7isValidEv(%class.SkRRect* %0)
  br i1 %91, label %118, label %92

92:                                               ; preds = %88
  %93 = fmul float %3, 0.000000e+00
  %94 = fmul float %93, %9
  %95 = fmul float %5, %94
  %96 = fmul float %11, %95
  %97 = fcmp ord float %96, 0.000000e+00
  br i1 %97, label %100, label %98

98:                                               ; preds = %92
  %99 = bitcast %class.SkRRect* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %99, i8 0, i64 52, i1 false) #9
  br label %118

100:                                              ; preds = %92
  %101 = fcmp olt float %5, %3
  %102 = select i1 %101, float %5, float %3
  %103 = fcmp olt float %11, %9
  %104 = select i1 %103, float %11, float %9
  %105 = insertelement <2 x float> undef, float %102, i32 0
  %106 = insertelement <2 x float> %105, float %104, i32 1
  %107 = insertelement <2 x float> undef, float %5, i32 0
  %108 = insertelement <2 x float> %107, float %11, i32 1
  %109 = bitcast %class.SkRRect* %0 to <2 x float>*
  store <2 x float> %106, <2 x float>* %109, align 4
  %110 = bitcast float* %4 to <2 x float>*
  store <2 x float> %108, <2 x float>* %110, align 4
  %111 = fcmp uge float %102, %5
  %112 = fcmp uge float %104, %11
  %113 = or i1 %111, %112
  %114 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %115 = bitcast %struct.SkPoint* %114 to i8*
  br i1 %113, label %116, label %117

116:                                              ; preds = %100
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %115, i8 0, i64 36, i1 false) #9
  br label %118

117:                                              ; preds = %100
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %115, i8 0, i64 32, i1 false) #9
  store i32 1, i32* %89, align 4
  br label %118

118:                                              ; preds = %117, %116, %98, %49, %66, %64, %88, %13
  ret void

119:                                              ; preds = %44
  %120 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %121 = load float, float* %120, align 4
  %122 = fcmp une float %121, 0.000000e+00
  br i1 %122, label %123, label %124

123:                                              ; preds = %119
  br label %124

124:                                              ; preds = %123, %119, %44
  %125 = phi i8 [ 0, %123 ], [ %35, %119 ], [ %35, %44 ]
  %126 = fcmp une float %47, %27
  br i1 %126, label %133, label %127

127:                                              ; preds = %124
  %128 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %129 = load float, float* %128, align 4
  %130 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %131 = load float, float* %130, align 4
  %132 = fcmp une float %129, %131
  br i1 %132, label %133, label %134

133:                                              ; preds = %127, %124
  br label %134

134:                                              ; preds = %133, %127
  %135 = phi i8 [ 0, %133 ], [ %45, %127 ]
  %136 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 0
  %137 = load float, float* %136, align 4
  %138 = fcmp une float %137, 0.000000e+00
  br i1 %138, label %139, label %144

139:                                              ; preds = %134
  %140 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %141 = load float, float* %140, align 4
  %142 = fcmp une float %141, 0.000000e+00
  br i1 %142, label %143, label %144

143:                                              ; preds = %139
  br label %144

144:                                              ; preds = %143, %139, %134
  %145 = phi i8 [ 0, %143 ], [ %125, %139 ], [ %125, %134 ]
  %146 = fcmp une float %137, %47
  br i1 %146, label %153, label %147

147:                                              ; preds = %144
  %148 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %149 = load float, float* %148, align 4
  %150 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %151 = load float, float* %150, align 4
  %152 = fcmp une float %149, %151
  br i1 %152, label %153, label %154

153:                                              ; preds = %147, %144
  br label %154

154:                                              ; preds = %153, %147
  %155 = phi i8 [ 0, %153 ], [ %135, %147 ]
  %156 = and i8 %145, 1
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %51, label %49
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7SkRRect22checkCornerContainmentEff(%class.SkRRect* nocapture readonly, float, float) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 2
  %7 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 0
  %8 = load float, float* %7, align 4
  br i1 %6, label %9, label %26

9:                                                ; preds = %3
  %10 = fmul float %8, 5.000000e-01
  %11 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, 5.000000e-01
  %14 = fadd float %10, %13
  %15 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 1
  %16 = load float, float* %15, align 4
  %17 = fmul float %16, 5.000000e-01
  %18 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 3
  %19 = load float, float* %18, align 4
  %20 = fmul float %19, 5.000000e-01
  %21 = fadd float %17, %20
  %22 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 0
  %25 = load float, float* %24, align 4
  br label %76

26:                                               ; preds = %3
  %27 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 0
  %28 = load float, float* %27, align 4
  %29 = fadd float %8, %28
  %30 = fcmp ogt float %29, %1
  br i1 %30, label %31, label %38

31:                                               ; preds = %26
  %32 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 1
  %33 = load float, float* %32, align 4
  %34 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  %35 = load float, float* %34, align 4
  %36 = fadd float %33, %35
  %37 = fcmp ogt float %36, %2
  br i1 %37, label %76, label %38

38:                                               ; preds = %31, %26
  %39 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 0
  %40 = load float, float* %39, align 4
  %41 = fadd float %8, %40
  %42 = fcmp ogt float %41, %1
  br i1 %42, label %43, label %50

43:                                               ; preds = %38
  %44 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 3
  %45 = load float, float* %44, align 4
  %46 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %47 = load float, float* %46, align 4
  %48 = fsub float %45, %47
  %49 = fcmp olt float %48, %2
  br i1 %49, label %76, label %50

50:                                               ; preds = %43, %38
  %51 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %52 = load float, float* %51, align 4
  %53 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 0
  %54 = load float, float* %53, align 4
  %55 = fsub float %52, %54
  %56 = fcmp olt float %55, %1
  br i1 %56, label %57, label %64

57:                                               ; preds = %50
  %58 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 1
  %59 = load float, float* %58, align 4
  %60 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %61 = load float, float* %60, align 4
  %62 = fadd float %59, %61
  %63 = fcmp ogt float %62, %2
  br i1 %63, label %76, label %64

64:                                               ; preds = %57, %50
  %65 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 0
  %66 = load float, float* %65, align 4
  %67 = fsub float %52, %66
  %68 = fcmp olt float %67, %1
  br i1 %68, label %69, label %93

69:                                               ; preds = %64
  %70 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 3
  %71 = load float, float* %70, align 4
  %72 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %73 = load float, float* %72, align 4
  %74 = fsub float %71, %73
  %75 = fcmp olt float %74, %2
  br i1 %75, label %76, label %93

76:                                               ; preds = %69, %57, %43, %31, %9
  %77 = phi float [ %25, %9 ], [ %28, %31 ], [ %40, %43 ], [ %54, %57 ], [ %66, %69 ]
  %78 = phi float [ %23, %9 ], [ %35, %31 ], [ %47, %43 ], [ %61, %57 ], [ %73, %69 ]
  %79 = phi float [ %21, %9 ], [ %36, %31 ], [ %48, %43 ], [ %62, %57 ], [ %74, %69 ]
  %80 = phi float [ %14, %9 ], [ %29, %31 ], [ %41, %43 ], [ %55, %57 ], [ %67, %69 ]
  %81 = fsub float %1, %80
  %82 = fsub float %2, %79
  %83 = fmul float %81, %81
  %84 = fmul float %78, %78
  %85 = fmul float %83, %84
  %86 = fmul float %82, %82
  %87 = fmul float %77, %77
  %88 = fmul float %86, %87
  %89 = fadd float %85, %88
  %90 = fmul float %78, %77
  %91 = fmul float %90, %90
  %92 = fcmp ole float %89, %91
  br label %93

93:                                               ; preds = %64, %69, %76
  %94 = phi i1 [ %92, %76 ], [ true, %69 ], [ true, %64 ]
  ret i1 %94
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN11SkRRectPriv22IsNearlySimpleCircularERK7SkRRectf(%class.SkRRect* nocapture readonly dereferenceable(52), float) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = fsub float %4, %6
  %8 = tail call float @llvm.fabs.f32(float %7) #9
  %9 = fcmp ugt float %8, %1
  br i1 %9, label %46, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 0
  %12 = load float, float* %11, align 4
  %13 = fsub float %4, %12
  %14 = tail call float @llvm.fabs.f32(float %13) #9
  %15 = fcmp ugt float %14, %1
  br i1 %15, label %46, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %18 = load float, float* %17, align 4
  %19 = fsub float %4, %18
  %20 = tail call float @llvm.fabs.f32(float %19) #9
  %21 = fcmp ugt float %20, %1
  br i1 %21, label %46, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 0
  %24 = load float, float* %23, align 4
  %25 = fsub float %4, %24
  %26 = tail call float @llvm.fabs.f32(float %25) #9
  %27 = fcmp ugt float %26, %1
  br i1 %27, label %46, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %30 = load float, float* %29, align 4
  %31 = fsub float %4, %30
  %32 = tail call float @llvm.fabs.f32(float %31) #9
  %33 = fcmp ugt float %32, %1
  br i1 %33, label %46, label %34

34:                                               ; preds = %28
  %35 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 0
  %36 = load float, float* %35, align 4
  %37 = fsub float %4, %36
  %38 = tail call float @llvm.fabs.f32(float %37) #9
  %39 = fcmp ugt float %38, %1
  br i1 %39, label %46, label %40

40:                                               ; preds = %34
  %41 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %42 = load float, float* %41, align 4
  %43 = fsub float %4, %42
  %44 = tail call float @llvm.fabs.f32(float %43) #9
  %45 = fcmp ole float %44, %1
  br label %46

46:                                               ; preds = %34, %28, %22, %16, %10, %2, %40
  %47 = phi i1 [ false, %34 ], [ false, %28 ], [ false, %22 ], [ false, %16 ], [ false, %10 ], [ false, %2 ], [ %45, %40 ]
  ret i1 %47
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN11SkRRectPriv18AllCornersCircularERK7SkRRectf(%class.SkRRect* nocapture readonly dereferenceable(52), float) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = fsub float %4, %6
  %8 = tail call float @llvm.fabs.f32(float %7) #9
  %9 = fcmp ugt float %8, %1
  br i1 %9, label %34, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %14 = load float, float* %13, align 4
  %15 = fsub float %12, %14
  %16 = tail call float @llvm.fabs.f32(float %15) #9
  %17 = fcmp ugt float %16, %1
  br i1 %17, label %34, label %18

18:                                               ; preds = %10
  %19 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 0
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %22 = load float, float* %21, align 4
  %23 = fsub float %20, %22
  %24 = tail call float @llvm.fabs.f32(float %23) #9
  %25 = fcmp ugt float %24, %1
  br i1 %25, label %34, label %26

26:                                               ; preds = %18
  %27 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 0
  %28 = load float, float* %27, align 4
  %29 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %30 = load float, float* %29, align 4
  %31 = fsub float %28, %30
  %32 = tail call float @llvm.fabs.f32(float %31) #9
  %33 = fcmp ole float %32, %1
  br label %34

34:                                               ; preds = %18, %10, %2, %26
  %35 = phi i1 [ false, %18 ], [ false, %10 ], [ false, %2 ], [ %33, %26 ]
  ret i1 %35
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7SkRRect8containsERK6SkRect(%class.SkRRect* nocapture readonly, %struct.SkRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %6 = load float, float* %5, align 4
  %7 = fcmp olt float %4, %6
  br i1 %7, label %8, label %46

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %12 = load float, float* %11, align 4
  %13 = fcmp uge float %10, %12
  br i1 %13, label %46, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 0
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %18 = load float, float* %17, align 4
  %19 = fcmp olt float %16, %18
  br i1 %19, label %20, label %46

20:                                               ; preds = %14
  %21 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 1
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 3
  %24 = load float, float* %23, align 4
  %25 = fcmp uge float %22, %24
  %26 = fcmp ugt float %16, %4
  %27 = or i1 %26, %25
  br i1 %27, label %46, label %28

28:                                               ; preds = %20
  %29 = fcmp ole float %22, %10
  %30 = fcmp oge float %18, %6
  %31 = fcmp oge float %24, %12
  %32 = and i1 %30, %29
  %33 = and i1 %31, %32
  br i1 %33, label %34, label %46

34:                                               ; preds = %28
  %35 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %46, label %38

38:                                               ; preds = %34
  %39 = tail call zeroext i1 @_ZNK7SkRRect22checkCornerContainmentEff(%class.SkRRect* %0, float %4, float %10)
  br i1 %39, label %40, label %46

40:                                               ; preds = %38
  %41 = tail call zeroext i1 @_ZNK7SkRRect22checkCornerContainmentEff(%class.SkRRect* %0, float %6, float %10)
  br i1 %41, label %42, label %46

42:                                               ; preds = %40
  %43 = tail call zeroext i1 @_ZNK7SkRRect22checkCornerContainmentEff(%class.SkRRect* %0, float %6, float %12)
  br i1 %43, label %44, label %46

44:                                               ; preds = %42
  %45 = tail call zeroext i1 @_ZNK7SkRRect22checkCornerContainmentEff(%class.SkRRect* %0, float %4, float %12)
  br label %46

46:                                               ; preds = %2, %8, %14, %20, %38, %40, %42, %44, %34, %28
  %47 = phi i1 [ false, %28 ], [ true, %34 ], [ false, %42 ], [ false, %40 ], [ false, %38 ], [ %45, %44 ], [ false, %20 ], [ false, %14 ], [ false, %8 ], [ false, %2 ]
  ret i1 %47
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkRRect9transformERK8SkMatrixPS_(%class.SkRRect*, %class.SkMatrix* dereferenceable(40), %class.SkRRect*) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.SkRect, align 8
  %5 = icmp eq %class.SkRRect* %2, null
  br i1 %5, label %266, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = trunc i32 %8 to i8
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %1) #9
  %13 = zext i8 %12 to i32
  store i32 %13, i32* %7, align 4
  br label %14

14:                                               ; preds = %6, %11
  %15 = phi i32 [ %13, %11 ], [ %8, %6 ]
  %16 = and i32 %15, 15
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %14
  %19 = bitcast %class.SkRRect* %2 to i8*
  %20 = bitcast %class.SkRRect* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %19, i8* align 4 %20, i64 52, i1 false)
  br label %266

21:                                               ; preds = %14
  %22 = trunc i32 %15 to i8
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %21
  %25 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %1) #9
  %26 = zext i8 %25 to i32
  store i32 %26, i32* %7, align 4
  br label %27

27:                                               ; preds = %21, %24
  %28 = phi i32 [ %26, %24 ], [ %15, %21 ]
  %29 = and i32 %28, 16
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %266, label %31

31:                                               ; preds = %27
  %32 = bitcast %struct.SkRect* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #9
  %33 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0
  %34 = bitcast %struct.SkRect* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -1, i64 16, i1 false)
  %35 = call zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix* %1, %struct.SkRect* nonnull %4, %struct.SkRect* dereferenceable(16) %33, i32 1) #9
  br i1 %35, label %36, label %264

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %4, i64 0, i32 2
  %38 = bitcast %struct.SkRect* %4 to <2 x float>*
  %39 = load <2 x float>, <2 x float>* %38, align 8
  %40 = extractelement <2 x float> %39, i32 0
  %41 = fmul float %40, 0.000000e+00
  %42 = extractelement <2 x float> %39, i32 1
  %43 = fmul float %41, %42
  %44 = bitcast float* %37 to <2 x float>*
  %45 = load <2 x float>, <2 x float>* %44, align 8
  %46 = extractelement <2 x float> %45, i32 0
  %47 = fmul float %43, %46
  %48 = extractelement <2 x float> %45, i32 1
  %49 = fmul float %47, %48
  %50 = fcmp uno float %49, 0.000000e+00
  %51 = fcmp uge float %40, %46
  %52 = or i1 %51, %50
  %53 = fcmp uge float %42, %48
  %54 = or i1 %53, %52
  br i1 %54, label %264, label %55

55:                                               ; preds = %36
  %56 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 0
  %57 = bitcast %class.SkRRect* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %57, i8* nonnull align 8 %32, i64 16, i1 false)
  %58 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 2
  store i32 %59, i32* %60, align 4
  %61 = load i32, i32* %58, align 4
  switch i32 %61, label %74 [
    i32 1, label %264
    i32 2, label %62
  ]

62:                                               ; preds = %55
  %63 = fsub <2 x float> %45, %39
  %64 = fmul <2 x float> %63, <float 5.000000e-01, float 5.000000e-01>
  %65 = shufflevector <2 x float> %64, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %66 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 0, i32 0
  %67 = bitcast float* %66 to <4 x float>*
  store <4 x float> %65, <4 x float>* %67, align 4
  %68 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 2, i32 0
  %69 = extractelement <2 x float> %64, i32 0
  store float %69, float* %68, align 4
  %70 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 2, i32 1
  %71 = extractelement <2 x float> %64, i32 1
  store float %71, float* %70, align 4
  %72 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 3, i32 0
  store float %69, float* %72, align 4
  %73 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 3, i32 1
  store float %71, float* %73, align 4
  br label %264

74:                                               ; preds = %55
  %75 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 0
  %76 = load float, float* %75, align 4
  %77 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  %78 = load float, float* %77, align 4
  %79 = load i32, i32* %7, align 4
  %80 = trunc i32 %79 to i8
  %81 = icmp slt i8 %80, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %74
  %83 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %1) #9
  %84 = zext i8 %83 to i32
  store i32 %84, i32* %7, align 4
  br label %85

85:                                               ; preds = %74, %82
  %86 = phi i32 [ %84, %82 ], [ %79, %74 ]
  %87 = and i32 %86, 12
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %130

89:                                               ; preds = %85
  %90 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %91 = bitcast %struct.SkPoint* %90 to i32*
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 0
  %94 = bitcast %struct.SkPoint* %93 to i32*
  store i32 %92, i32* %94, align 4
  %95 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0, i32 1
  %96 = bitcast float* %95 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 0, i32 1
  %99 = bitcast float* %98 to i32*
  store i32 %97, i32* %99, align 4
  %100 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1
  %101 = bitcast %struct.SkPoint* %100 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 1
  %104 = bitcast %struct.SkPoint* %103 to i32*
  store i32 %102, i32* %104, align 4
  %105 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1, i32 1
  %106 = bitcast float* %105 to i32*
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 1, i32 1
  %109 = bitcast float* %108 to i32*
  store i32 %107, i32* %109, align 4
  %110 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2
  %111 = bitcast %struct.SkPoint* %110 to i32*
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 2
  %114 = bitcast %struct.SkPoint* %113 to i32*
  store i32 %112, i32* %114, align 4
  %115 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2, i32 1
  %116 = bitcast float* %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 2, i32 1
  %119 = bitcast float* %118 to i32*
  store i32 %117, i32* %119, align 4
  %120 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3
  %121 = bitcast %struct.SkPoint* %120 to i32*
  %122 = load i32, i32* %121, align 4
  %123 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 3
  %124 = bitcast %struct.SkPoint* %123 to i32*
  store i32 %122, i32* %124, align 4
  %125 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3, i32 1
  %126 = bitcast float* %125 to i32*
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 3, i32 1
  %129 = bitcast float* %128 to i32*
  store i32 %127, i32* %129, align 4
  br label %187

130:                                              ; preds = %85
  %131 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  %132 = load float, float* %131, align 4
  %133 = fcmp olt float %132, 0.000000e+00
  %134 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  %135 = load float, float* %134, align 4
  %136 = select i1 %133, float 1.000000e+00, float -1.000000e+00
  %137 = select i1 %133, float -1.000000e+00, float 1.000000e+00
  %138 = select i1 %133, i64 3, i64 1
  %139 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 %138, i32 1
  %140 = bitcast float* %139 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 0
  %143 = bitcast %struct.SkPoint* %142 to i32*
  store i32 %141, i32* %143, align 4
  %144 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 %138, i32 0
  %145 = bitcast float* %144 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 0, i32 1
  %148 = bitcast float* %147 to i32*
  store i32 %146, i32* %148, align 4
  %149 = add nuw nsw i64 %138, 1
  %150 = and i64 %149, 2
  %151 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 %150, i32 1
  %152 = bitcast float* %151 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 1
  %155 = bitcast %struct.SkPoint* %154 to i32*
  store i32 %153, i32* %155, align 4
  %156 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 %150, i32 0
  %157 = bitcast float* %156 to i32*
  %158 = load i32, i32* %157, align 4
  %159 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 1, i32 1
  %160 = bitcast float* %159 to i32*
  store i32 %158, i32* %160, align 4
  %161 = add nuw nsw i64 %138, 2
  %162 = and i64 %161, 3
  %163 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 %162, i32 1
  %164 = bitcast float* %163 to i32*
  %165 = load i32, i32* %164, align 4
  %166 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 2
  %167 = bitcast %struct.SkPoint* %166 to i32*
  store i32 %165, i32* %167, align 4
  %168 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 %162, i32 0
  %169 = bitcast float* %168 to i32*
  %170 = load i32, i32* %169, align 4
  %171 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 2, i32 1
  %172 = bitcast float* %171 to i32*
  store i32 %170, i32* %172, align 4
  %173 = add nuw nsw i64 %138, 3
  %174 = and i64 %173, 2
  %175 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 %174, i32 1
  %176 = bitcast float* %175 to i32*
  %177 = load i32, i32* %176, align 4
  %178 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 3
  %179 = bitcast %struct.SkPoint* %178 to i32*
  store i32 %177, i32* %179, align 4
  %180 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 %174, i32 0
  %181 = bitcast float* %180 to i32*
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 3, i32 1
  %184 = bitcast float* %183 to i32*
  store i32 %182, i32* %184, align 4
  %185 = fmul float %135, %136
  %186 = fmul float %132, %137
  br label %187

187:                                              ; preds = %130, %89
  %188 = phi i32 [ %127, %89 ], [ %182, %130 ]
  %189 = phi i32 [ %122, %89 ], [ %177, %130 ]
  %190 = phi i32 [ %117, %89 ], [ %170, %130 ]
  %191 = phi i32 [ %112, %89 ], [ %165, %130 ]
  %192 = phi i32 [ %107, %89 ], [ %158, %130 ]
  %193 = phi i32 [ %102, %89 ], [ %153, %130 ]
  %194 = phi i32 [ %97, %89 ], [ %146, %130 ]
  %195 = phi i32 [ %92, %89 ], [ %141, %130 ]
  %196 = phi float [ %76, %89 ], [ %185, %130 ]
  %197 = phi float [ %78, %89 ], [ %186, %130 ]
  %198 = bitcast i32 %195 to float
  %199 = bitcast i32 %194 to float
  %200 = bitcast i32 %193 to float
  %201 = bitcast i32 %192 to float
  %202 = bitcast i32 %191 to float
  %203 = bitcast i32 %190 to float
  %204 = bitcast i32 %189 to float
  %205 = bitcast i32 %188 to float
  %206 = fcmp olt float %196, 0.000000e+00
  %207 = fsub float -0.000000e+00, %196
  %208 = select i1 %206, float %207, float %196
  %209 = fcmp olt float %197, 0.000000e+00
  %210 = fsub float -0.000000e+00, %197
  %211 = select i1 %209, float %210, float %197
  %212 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 0, i32 0
  %213 = fmul float %208, %198
  store float %213, float* %212, align 4
  %214 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 0, i32 1
  %215 = fmul float %211, %199
  store float %215, float* %214, align 4
  %216 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 1, i32 0
  %217 = fmul float %208, %200
  store float %217, float* %216, align 4
  %218 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 1, i32 1
  %219 = fmul float %211, %201
  store float %219, float* %218, align 4
  %220 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 2, i32 0
  %221 = fmul float %208, %202
  store float %221, float* %220, align 4
  %222 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 2, i32 1
  %223 = fmul float %211, %203
  store float %223, float* %222, align 4
  %224 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 3, i32 0
  %225 = fmul float %208, %204
  store float %225, float* %224, align 4
  %226 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 3, i32 1
  %227 = fmul float %211, %205
  store float %227, float* %226, align 4
  br i1 %206, label %228, label %249

228:                                              ; preds = %187
  %229 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1
  br i1 %209, label %230, label %237

230:                                              ; preds = %228
  %231 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 2
  %232 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %231, i64 0, i32 0
  %233 = bitcast %struct.SkPoint* %231 to <2 x i64>*
  %234 = load <2 x i64>, <2 x i64>* %233, align 4
  store float %213, float* %232, align 4
  store float %215, float* %222, align 4
  %235 = bitcast [4 x %struct.SkPoint]* %229 to <2 x i64>*
  store <2 x i64> %234, <2 x i64>* %235, align 4
  %236 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 3, i32 0
  store float %217, float* %236, align 4
  store float %219, float* %226, align 4
  br label %259

237:                                              ; preds = %228
  %238 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 1
  %239 = bitcast [4 x %struct.SkPoint]* %229 to i64*
  %240 = bitcast %struct.SkPoint* %238 to i64*
  %241 = load i64, i64* %239, align 4
  store i64 %241, i64* %240, align 4
  %242 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %229, i64 0, i64 0, i32 0
  store float %217, float* %242, align 4
  store float %219, float* %214, align 4
  %243 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 2
  %244 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 3
  %245 = bitcast %struct.SkPoint* %244 to i64*
  %246 = bitcast %struct.SkPoint* %243 to i64*
  %247 = load i64, i64* %245, align 4
  store i64 %247, i64* %246, align 4
  %248 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %244, i64 0, i32 0
  store float %221, float* %248, align 4
  store float %223, float* %226, align 4
  br label %259

249:                                              ; preds = %187
  br i1 %209, label %250, label %259

250:                                              ; preds = %249
  %251 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 0
  %252 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 3, i32 0
  %253 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 2
  %254 = bitcast %struct.SkPoint* %253 to <2 x i64>*
  %255 = load <2 x i64>, <2 x i64>* %254, align 4
  %256 = shufflevector <2 x i64> %255, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store float %213, float* %252, align 4
  store float %215, float* %226, align 4
  %257 = bitcast %struct.SkPoint* %251 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %257, align 4
  %258 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %253, i64 0, i32 0
  store float %217, float* %258, align 4
  store float %219, float* %222, align 4
  br label %259

259:                                              ; preds = %249, %250, %230, %237
  %260 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 0
  %261 = call zeroext i1 @_ZN7SkRRect20AreRectAndRadiiValidERK6SkRectPK7SkPoint(%struct.SkRect* dereferenceable(16) %56, %struct.SkPoint* %260)
  br i1 %261, label %262, label %264

262:                                              ; preds = %259
  %263 = call zeroext i1 @_ZN7SkRRect10scaleRadiiEv(%class.SkRRect* nonnull %2)
  br label %264

264:                                              ; preds = %62, %36, %262, %259, %55, %31
  %265 = phi i1 [ false, %31 ], [ false, %36 ], [ true, %55 ], [ true, %262 ], [ false, %259 ], [ true, %62 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #9
  br label %266

266:                                              ; preds = %27, %3, %264, %18
  %267 = phi i1 [ true, %18 ], [ %265, %264 ], [ false, %3 ], [ false, %27 ]
  ret i1 %267
}

declare zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix*, %struct.SkRect*, %struct.SkRect* dereferenceable(16), i32) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN7SkRRect20AreRectAndRadiiValidERK6SkRectPK7SkPoint(%struct.SkRect* nocapture readonly dereferenceable(16), %struct.SkPoint* nocapture readonly) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fmul float %4, 0.000000e+00
  %6 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = fmul float %5, %7
  %9 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 2
  %10 = load float, float* %9, align 4
  %11 = fmul float %8, %10
  %12 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 3
  %13 = load float, float* %12, align 4
  %14 = fmul float %11, %13
  %15 = fcmp ord float %14, 0.000000e+00
  br i1 %15, label %16, label %64

16:                                               ; preds = %2
  %17 = fcmp ugt float %4, %10
  %18 = xor i1 %17, true
  %19 = fcmp ole float %7, %13
  %20 = and i1 %19, %18
  br i1 %20, label %21, label %64

21:                                               ; preds = %16
  %22 = fsub float %10, %4
  %23 = fsub float %13, %7
  %24 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %25 = load float, float* %24, align 4
  %26 = fcmp ult float %22, %25
  %27 = or i1 %17, %26
  %28 = fadd float %4, %25
  %29 = fcmp ugt float %28, %10
  %30 = or i1 %29, %27
  %31 = fsub float %10, %25
  %32 = fcmp ult float %31, %4
  %33 = or i1 %32, %30
  %34 = fcmp oge float %25, 0.000000e+00
  %35 = xor i1 %33, true
  %36 = and i1 %34, %35
  br i1 %36, label %51, label %64

37:                                               ; preds = %51
  %38 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 0
  %39 = load float, float* %38, align 4
  %40 = fcmp ult float %22, %39
  %41 = or i1 %17, %40
  %42 = fadd float %4, %39
  %43 = fcmp ugt float %42, %10
  %44 = or i1 %43, %41
  %45 = fsub float %10, %39
  %46 = fcmp ult float %45, %4
  %47 = or i1 %46, %44
  %48 = fcmp oge float %39, 0.000000e+00
  %49 = xor i1 %47, true
  %50 = and i1 %48, %49
  br i1 %50, label %65, label %64

51:                                               ; preds = %21
  %52 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %53 = load float, float* %52, align 4
  %54 = fcmp ult float %23, %53
  %55 = fadd float %7, %53
  %56 = fcmp ugt float %55, %13
  %57 = or i1 %56, %54
  %58 = fsub float %13, %53
  %59 = fcmp ult float %58, %7
  %60 = or i1 %59, %57
  %61 = fcmp oge float %53, 0.000000e+00
  %62 = xor i1 %60, true
  %63 = and i1 %61, %62
  br i1 %63, label %37, label %64

64:                                               ; preds = %21, %51, %37, %65, %78, %92, %105, %2, %16
  ret i1 false

65:                                               ; preds = %37
  %66 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 1
  %67 = load float, float* %66, align 4
  %68 = fcmp ult float %23, %67
  %69 = fadd float %7, %67
  %70 = fcmp ugt float %69, %13
  %71 = or i1 %70, %68
  %72 = fsub float %13, %67
  %73 = fcmp ult float %72, %7
  %74 = or i1 %73, %71
  %75 = fcmp oge float %67, 0.000000e+00
  %76 = xor i1 %74, true
  %77 = and i1 %75, %76
  br i1 %77, label %78, label %64

78:                                               ; preds = %65
  %79 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 0
  %80 = load float, float* %79, align 4
  %81 = fcmp ult float %22, %80
  %82 = or i1 %17, %81
  %83 = fadd float %4, %80
  %84 = fcmp ugt float %83, %10
  %85 = or i1 %84, %82
  %86 = fsub float %10, %80
  %87 = fcmp ult float %86, %4
  %88 = or i1 %87, %85
  %89 = fcmp oge float %80, 0.000000e+00
  %90 = xor i1 %88, true
  %91 = and i1 %89, %90
  br i1 %91, label %92, label %64

92:                                               ; preds = %78
  %93 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 1
  %94 = load float, float* %93, align 4
  %95 = fcmp ult float %23, %94
  %96 = fadd float %7, %94
  %97 = fcmp ugt float %96, %13
  %98 = or i1 %97, %95
  %99 = fsub float %13, %94
  %100 = fcmp ult float %99, %7
  %101 = or i1 %100, %98
  %102 = fcmp oge float %94, 0.000000e+00
  %103 = xor i1 %101, true
  %104 = and i1 %102, %103
  br i1 %104, label %105, label %64

105:                                              ; preds = %92
  %106 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3, i32 0
  %107 = load float, float* %106, align 4
  %108 = fcmp ult float %22, %107
  %109 = or i1 %17, %108
  %110 = fadd float %4, %107
  %111 = fcmp ugt float %110, %10
  %112 = or i1 %111, %109
  %113 = fsub float %10, %107
  %114 = fcmp ult float %113, %4
  %115 = or i1 %114, %112
  %116 = fcmp oge float %107, 0.000000e+00
  %117 = xor i1 %115, true
  %118 = and i1 %116, %117
  br i1 %118, label %119, label %64

119:                                              ; preds = %105
  %120 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3, i32 1
  %121 = load float, float* %120, align 4
  %122 = fcmp ult float %23, %121
  %123 = fadd float %7, %121
  %124 = fcmp ugt float %123, %13
  %125 = or i1 %124, %122
  %126 = fsub float %13, %121
  %127 = fcmp ult float %126, %7
  %128 = or i1 %127, %125
  %129 = fcmp oge float %121, 0.000000e+00
  %130 = xor i1 %128, true
  %131 = and i1 %129, %130
  ret i1 %131
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkRRect5insetEffPS_(%class.SkRRect* nocapture readonly, float, float, %class.SkRRect*) local_unnamed_addr #0 align 2 {
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = bitcast { <2 x float>, <2 x float> }* %5 to %struct.SkRect*
  %7 = alloca [4 x %struct.SkPoint], align 16
  %8 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #9
  %9 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %6, i64 0, i32 1
  %10 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %6, i64 0, i32 3
  %11 = bitcast %class.SkRRect* %0 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = insertelement <2 x float> undef, float %1, i32 0
  %14 = insertelement <2 x float> %13, float %2, i32 1
  %15 = fadd <2 x float> %12, %14
  %16 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %17 = bitcast float* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  %19 = fsub <2 x float> %18, %14
  %20 = extractelement <2 x float> %15, i32 0
  %21 = extractelement <2 x float> %15, i32 1
  %22 = extractelement <2 x float> %19, i32 0
  %23 = extractelement <2 x float> %19, i32 1
  %24 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0
  store <2 x float> %15, <2 x float>* %24, align 8
  %25 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  store <2 x float> %19, <2 x float>* %25, align 8
  %26 = fcmp ugt float %22, %20
  br i1 %26, label %32, label %27

27:                                               ; preds = %4
  %28 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0, i64 0
  %29 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1, i64 0
  %30 = fadd float %22, %20
  %31 = fmul float %30, 5.000000e-01
  store float %31, float* %29, align 8
  store float %31, float* %28, align 8
  br label %32

32:                                               ; preds = %4, %27
  %33 = phi float [ %31, %27 ], [ %22, %4 ]
  %34 = phi float [ %31, %27 ], [ %20, %4 ]
  %35 = phi i1 [ true, %27 ], [ false, %4 ]
  %36 = fcmp ugt float %23, %21
  br i1 %36, label %40, label %37

37:                                               ; preds = %32
  %38 = fadd float %23, %21
  %39 = fmul float %38, 5.000000e-01
  store float %39, float* %10, align 4
  store float %39, float* %9, align 4
  br label %41

40:                                               ; preds = %32
  br i1 %35, label %41, label %45

41:                                               ; preds = %37, %40
  %42 = bitcast %class.SkRRect* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %42, i8* nonnull align 8 %8, i64 16, i1 false)
  %43 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %3, i64 0, i32 1, i64 0
  %44 = bitcast %struct.SkPoint* %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %44, i8 0, i64 36, i1 false)
  br label %77

45:                                               ; preds = %40
  %46 = fmul float %34, 0.000000e+00
  %47 = fmul float %21, %46
  %48 = fmul float %33, %47
  %49 = fmul float %23, %48
  %50 = fcmp ord float %49, 0.000000e+00
  br i1 %50, label %53, label %51

51:                                               ; preds = %45
  %52 = bitcast %class.SkRRect* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %52, i8 0, i64 52, i1 false)
  br label %77

53:                                               ; preds = %45
  %54 = bitcast [4 x %struct.SkPoint]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %54) #9
  %55 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %7, i64 0, i64 0, i32 0
  %56 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %7, i64 0, i64 0, i32 1
  %57 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %7, i64 0, i64 1, i32 0
  %58 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %7, i64 0, i64 1, i32 1
  %59 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %7, i64 0, i64 2, i32 0
  %60 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %7, i64 0, i64 2, i32 1
  %61 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %7, i64 0, i64 3, i32 0
  %62 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %7, i64 0, i64 3, i32 1
  %63 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %64 = bitcast %struct.SkPoint* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %54, i8* align 4 %64, i64 32, i1 false)
  %65 = load float, float* %55, align 16
  %66 = fcmp une float %65, 0.000000e+00
  br i1 %66, label %67, label %69

67:                                               ; preds = %53
  %68 = fsub float %65, %1
  store float %68, float* %55, align 16
  br label %69

69:                                               ; preds = %67, %53
  %70 = load float, float* %56, align 4
  %71 = fcmp une float %70, 0.000000e+00
  br i1 %71, label %72, label %74

72:                                               ; preds = %69
  %73 = fsub float %70, %2
  store float %73, float* %56, align 4
  br label %74

74:                                               ; preds = %69, %72
  %75 = load float, float* %57, align 8
  %76 = fcmp une float %75, 0.000000e+00
  br i1 %76, label %78, label %80

77:                                               ; preds = %105, %51, %41
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #9
  ret void

78:                                               ; preds = %74
  %79 = fsub float %75, %1
  store float %79, float* %57, align 8
  br label %80

80:                                               ; preds = %78, %74
  %81 = load float, float* %58, align 4
  %82 = fcmp une float %81, 0.000000e+00
  br i1 %82, label %83, label %85

83:                                               ; preds = %80
  %84 = fsub float %81, %2
  store float %84, float* %58, align 4
  br label %85

85:                                               ; preds = %83, %80
  %86 = load float, float* %59, align 16
  %87 = fcmp une float %86, 0.000000e+00
  br i1 %87, label %88, label %90

88:                                               ; preds = %85
  %89 = fsub float %86, %1
  store float %89, float* %59, align 16
  br label %90

90:                                               ; preds = %88, %85
  %91 = load float, float* %60, align 4
  %92 = fcmp une float %91, 0.000000e+00
  br i1 %92, label %93, label %95

93:                                               ; preds = %90
  %94 = fsub float %91, %2
  store float %94, float* %60, align 4
  br label %95

95:                                               ; preds = %93, %90
  %96 = load float, float* %61, align 8
  %97 = fcmp une float %96, 0.000000e+00
  br i1 %97, label %98, label %100

98:                                               ; preds = %95
  %99 = fsub float %96, %1
  store float %99, float* %61, align 8
  br label %100

100:                                              ; preds = %98, %95
  %101 = load float, float* %62, align 4
  %102 = fcmp une float %101, 0.000000e+00
  br i1 %102, label %103, label %105

103:                                              ; preds = %100
  %104 = fsub float %101, %2
  store float %104, float* %62, align 4
  br label %105

105:                                              ; preds = %103, %100
  %106 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %7, i64 0, i64 0
  call void @_ZN7SkRRect12setRectRadiiERK6SkRectPK7SkPoint(%class.SkRRect* %3, %struct.SkRect* nonnull dereferenceable(16) %6, %struct.SkPoint* nonnull %106)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %54) #9
  br label %77
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7SkRRect13writeToMemoryEPv(%class.SkRRect* nocapture readonly, i8* nocapture) local_unnamed_addr #0 align 2 {
  %3 = bitcast %class.SkRRect* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 4 %3, i64 48, i1 false)
  ret i64 48
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkRRectPriv13WriteToBufferERK7SkRRectP9SkWBuffer(%class.SkRRect* dereferenceable(52), %class.SkWBuffer*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %class.SkRRect* %0 to i8*
  tail call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* %1, i8* %3, i64 48) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN7SkRRect14readFromMemoryEPKvm(%class.SkRRect*, i8* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkRRect, align 4
  %5 = icmp ult i64 %2, 48
  br i1 %5, label %11, label %6

6:                                                ; preds = %3
  %7 = bitcast %class.SkRRect* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %7) #9
  %8 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %4, i64 0, i32 0
  %9 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %4, i64 0, i32 1, i64 0
  %10 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %4, i64 0, i32 2
  store i32 0, i32* %10, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %7, i8* align 1 %1, i64 48, i1 false)
  call void @_ZN7SkRRect12setRectRadiiERK6SkRectPK7SkPoint(%class.SkRRect* %0, %struct.SkRect* nonnull dereferenceable(16) %8, %struct.SkPoint* %9)
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %7) #9
  br label %11

11:                                               ; preds = %3, %6
  %12 = phi i64 [ 48, %6 ], [ 0, %3 ]
  ret i64 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkRRectPriv14ReadFromBufferEP9SkRBufferP7SkRRect(%class.SkRBuffer*, %class.SkRRect*) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkRRect, align 4
  %4 = alloca %class.SkRRect, align 4
  %5 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %0, i64 0, i32 2
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %0, i64 0, i32 1
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %7, %10
  %12 = icmp ult i64 %11, 48
  br i1 %12, label %23, label %13

13:                                               ; preds = %2
  %14 = bitcast %class.SkRRect* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %14) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %14, i8 0, i64 52, i1 false) #9
  %15 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* %0, i8* nonnull %14, i64 48) #9
  br i1 %15, label %16, label %21

16:                                               ; preds = %13
  %17 = bitcast %class.SkRRect* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %17) #9
  %18 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %3, i64 0, i32 0
  %19 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %3, i64 0, i32 1, i64 0
  %20 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %3, i64 0, i32 2
  store i32 0, i32* %20, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* nonnull align 4 %14, i64 48, i1 false) #9
  call void @_ZN7SkRRect12setRectRadiiERK6SkRectPK7SkPoint(%class.SkRRect* %1, %struct.SkRect* nonnull dereferenceable(16) %18, %struct.SkPoint* %19) #9
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %17) #9
  br label %21

21:                                               ; preds = %16, %13
  %22 = phi i1 [ false, %13 ], [ true, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %14) #9
  br label %23

23:                                               ; preds = %2, %21
  %24 = phi i1 [ %22, %21 ], [ false, %2 ]
  ret i1 %24
}

declare zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkRRect12dumpToStringEb(%class.SkString* noalias sret, %class.SkRRect*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkString, align 8
  %5 = alloca %class.SkString, align 8
  %6 = zext i1 %2 to i32
  %7 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %1, i64 0, i32 0
  tail call void @_ZNK6SkRect4dumpEb(%struct.SkRect* %7, i1 zeroext %2) #9
  %8 = getelementptr inbounds %class.SkString, %class.SkString* %0, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %8, align 8
  tail call void @_ZN8SkStringC1EPKc(%class.SkString* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0)) #9
  %9 = bitcast %class.SkString* %4 to i8*
  %10 = getelementptr inbounds %class.SkString, %class.SkString* %4, i64 0, i32 0, i32 0
  %11 = bitcast %class.SkString* %5 to i8*
  %12 = getelementptr inbounds %class.SkString, %class.SkString* %5, i64 0, i32 0, i32 0
  br label %14

13:                                               ; preds = %29
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)) #9
  ret void

14:                                               ; preds = %29, %3
  %15 = phi i64 [ 0, %3 ], [ %30, %29 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #9
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %10, align 8
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %4) #9
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #9
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %12, align 8
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %5) #9
  %16 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %1, i64 0, i32 1, i64 %15, i32 0
  %17 = load float, float* %16, align 4
  call void @_Z14SkAppendScalarP8SkStringf20SkScalarAsStringType(%class.SkString* nonnull %4, float %17, i32 %6) #9
  %18 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %1, i64 0, i32 1, i64 %15, i32 1
  %19 = load float, float* %18, align 4
  call void @_Z14SkAppendScalarP8SkStringf20SkScalarAsStringType(%class.SkString* nonnull %5, float %19, i32 %6) #9
  %20 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %10, align 8
  %21 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %20, i64 0, i32 2
  %22 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %12, align 8
  %23 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %22, i64 0, i32 2
  call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i8* %21, i8* %23) #9
  br i1 %2, label %24, label %29

24:                                               ; preds = %14
  %25 = load float, float* %16, align 4
  %26 = fpext float %25 to double
  %27 = load float, float* %18, align 4
  %28 = fpext float %27 to double
  call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), double %26, double %28) #9
  br label %29

29:                                               ; preds = %24, %14
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #9
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #9
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #9
  %30 = add nuw nsw i64 %15, 1
  %31 = icmp eq i64 %30, 4
  br i1 %31, label %13, label %14
}

declare void @_ZNK6SkRect4dumpEb(%struct.SkRect*, i1 zeroext) local_unnamed_addr #3

declare void @_ZN8SkStringC1EPKc(%class.SkString*, i8*) unnamed_addr #3

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #3

declare void @_Z14SkAppendScalarP8SkStringf20SkScalarAsStringType(%class.SkString*, float, i32) local_unnamed_addr #3

declare void @_ZN8SkString7appendfEPKcz(%class.SkString*, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkRRect4dumpEb(%class.SkRRect*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkString, align 8
  %4 = bitcast %class.SkString* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #9
  call void @_ZNK7SkRRect12dumpToStringEb(%class.SkString* nonnull sret %3, %class.SkRRect* %0, i1 zeroext %1)
  %5 = getelementptr inbounds %class.SkString, %class.SkString* %3, i64 0, i32 0, i32 0
  %6 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %5, align 8
  %7 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %6, i64 0, i32 2
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i32 639, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i8* %7) #9
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #9
  ret void
}

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN11SkRRectPriv11InnerBoundsERK7SkRRect(%class.SkRRect* nocapture readonly dereferenceable(52)) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp ult i32 %3, 2
  %5 = bitcast %class.SkRRect* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 0, i32 2
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  br i1 %4, label %98, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 0
  %12 = bitcast %struct.SkPoint* %11 to i64*
  %13 = load i64, i64* %12, align 4
  %14 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 1
  %15 = bitcast %struct.SkPoint* %14 to i64*
  %16 = load i64, i64* %15, align 4
  %17 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 3
  %18 = bitcast %struct.SkPoint* %17 to i64*
  %19 = load i64, i64* %18, align 4
  %20 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %0, i64 0, i32 1, i64 2
  %21 = bitcast %struct.SkPoint* %20 to i64*
  %22 = load i64, i64* %21, align 4
  %23 = trunc i64 %13 to i32
  %24 = bitcast i32 %23 to float
  %25 = trunc i64 %19 to i32
  %26 = bitcast i32 %25 to float
  %27 = fcmp olt float %24, %26
  %28 = select i1 %27, float %26, float %24
  %29 = lshr i64 %13, 32
  %30 = trunc i64 %29 to i32
  %31 = bitcast i32 %30 to float
  %32 = lshr i64 %16, 32
  %33 = trunc i64 %32 to i32
  %34 = bitcast i32 %33 to float
  %35 = fcmp olt float %31, %34
  %36 = select i1 %35, float %34, float %31
  %37 = trunc i64 %16 to i32
  %38 = bitcast i32 %37 to float
  %39 = trunc i64 %22 to i32
  %40 = bitcast i32 %39 to float
  %41 = fcmp olt float %38, %40
  %42 = select i1 %41, float %40, float %38
  %43 = lshr i64 %19, 32
  %44 = trunc i64 %43 to i32
  %45 = bitcast i32 %44 to float
  %46 = lshr i64 %22, 32
  %47 = trunc i64 %46 to i32
  %48 = bitcast i32 %47 to float
  %49 = fcmp olt float %45, %48
  %50 = select i1 %49, float %48, float %45
  %51 = fadd float %28, %42
  %52 = fadd float %36, %50
  %53 = extractelement <2 x float> %9, i32 0
  %54 = extractelement <2 x float> %6, i32 0
  %55 = fsub float %53, %54
  %56 = fsub float %55, %51
  %57 = extractelement <2 x float> %9, i32 1
  %58 = extractelement <2 x float> %6, i32 1
  %59 = fsub float %57, %58
  %60 = fmul float %59, %56
  %61 = fsub float %59, %52
  %62 = fmul float %55, %61
  %63 = fmul float %51, 0x3FD2BEED40000000
  %64 = fsub float %55, %63
  %65 = fmul float %52, 0x3FD2BEED40000000
  %66 = fsub float %59, %65
  %67 = fmul float %64, %66
  %68 = fcmp ogt float %60, %62
  %69 = fcmp ogt float %60, %67
  %70 = and i1 %68, %69
  br i1 %70, label %71, label %76

71:                                               ; preds = %10
  %72 = fadd float %54, %28
  %73 = insertelement <2 x float> %6, float %72, i32 0
  %74 = fsub float %53, %42
  %75 = insertelement <2 x float> %9, float %74, i32 0
  br label %98

76:                                               ; preds = %10
  %77 = fcmp ogt float %62, %67
  br i1 %77, label %78, label %83

78:                                               ; preds = %76
  %79 = fadd float %58, %36
  %80 = insertelement <2 x float> %6, float %79, i32 1
  %81 = fsub float %57, %50
  %82 = insertelement <2 x float> %9, float %81, i32 1
  br label %98

83:                                               ; preds = %76
  %84 = fcmp ogt float %67, 0.000000e+00
  br i1 %84, label %85, label %98

85:                                               ; preds = %83
  %86 = fmul float %28, 0x3FD2BEED40000000
  %87 = fadd float %54, %86
  %88 = insertelement <2 x float> undef, float %87, i32 0
  %89 = fmul float %42, 0x3FD2BEED40000000
  %90 = fsub float %53, %89
  %91 = insertelement <2 x float> undef, float %90, i32 0
  %92 = fmul float %36, 0x3FD2BEED40000000
  %93 = fadd float %58, %92
  %94 = insertelement <2 x float> %88, float %93, i32 1
  %95 = fmul float %50, 0x3FD2BEED40000000
  %96 = fsub float %57, %95
  %97 = insertelement <2 x float> %91, float %96, i32 1
  br label %98

98:                                               ; preds = %83, %78, %85, %71, %1
  %99 = phi <2 x float> [ %6, %1 ], [ zeroinitializer, %83 ], [ %73, %71 ], [ %80, %78 ], [ %94, %85 ]
  %100 = phi <2 x float> [ %9, %1 ], [ zeroinitializer, %83 ], [ %75, %71 ], [ %82, %78 ], [ %97, %85 ]
  %101 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %99, 0
  %102 = insertvalue { <2 x float>, <2 x float> } %101, <2 x float> %100, 1
  ret { <2 x float>, <2 x float> } %102
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkRRectPriv21ConservativeIntersectERK7SkRRectS2_(%class.SkRRect* noalias nocapture sret, %class.SkRRect* dereferenceable(52), %class.SkRRect* dereferenceable(52)) local_unnamed_addr #6 align 2 {
  %4 = alloca %class.SkRRect, align 4
  %5 = bitcast %class.SkRRect* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %5) #9
  %6 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %4, i64 0, i32 0
  %7 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %4, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %4, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %4, i64 0, i32 0, i32 2
  %10 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %4, i64 0, i32 0, i32 3
  %11 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %4, i64 0, i32 1, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %5, i8 0, i64 52, i1 false) #9
  %12 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %1, i64 0, i32 0
  %13 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 0
  %14 = call zeroext i1 @_ZN6SkRect9intersectERKS_S1_(%struct.SkRect* nonnull %6, %struct.SkRect* dereferenceable(16) %12, %struct.SkRect* dereferenceable(16) %13) #9
  br i1 %14, label %15, label %24

15:                                               ; preds = %3
  %16 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %1, i64 0, i32 0, i32 2
  %17 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %1, i64 0, i32 0, i32 3
  %18 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 0, i32 2
  %19 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 0, i32 3
  %20 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %1, i64 0, i32 0, i32 0
  %21 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 0, i32 0
  %22 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %1, i64 0, i32 0, i32 1
  %23 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 0, i32 1
  br label %26

24:                                               ; preds = %3
  %25 = bitcast %class.SkRRect* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %25, i8 0, i64 52, i1 false) #9, !alias.scope !2
  br label %179

26:                                               ; preds = %15, %166
  %27 = phi i32* [ getelementptr inbounds ([4 x i32], [4 x i32]* @_ZZN11SkRRectPriv21ConservativeIntersectERK7SkRRectS2_E7corners, i64 0, i64 0), %15 ], [ %167, %166 ]
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %4, i64 0, i32 1, i64 %29
  switch i32 %28, label %31 [
    i32 0, label %35
    i32 1, label %32
    i32 3, label %33
    i32 2, label %34
  ]

31:                                               ; preds = %26
  call void @llvm.trap() #9
  unreachable

32:                                               ; preds = %26
  br label %35

33:                                               ; preds = %26
  br label %35

34:                                               ; preds = %26
  br label %35

35:                                               ; preds = %26, %34, %33, %32
  %36 = phi float* [ %9, %34 ], [ %7, %33 ], [ %9, %32 ], [ %7, %26 ]
  %37 = phi float* [ %10, %34 ], [ %10, %33 ], [ %8, %32 ], [ %8, %26 ]
  %38 = phi float* [ %16, %34 ], [ %20, %33 ], [ %16, %32 ], [ %20, %26 ]
  %39 = phi float* [ %17, %34 ], [ %17, %33 ], [ %22, %32 ], [ %22, %26 ]
  %40 = phi float* [ %18, %34 ], [ %21, %33 ], [ %18, %32 ], [ %21, %26 ]
  %41 = phi float* [ %19, %34 ], [ %19, %33 ], [ %23, %32 ], [ %23, %26 ]
  %42 = load float, float* %36, align 4
  %43 = load float, float* %37, align 4
  %44 = load float, float* %38, align 4
  %45 = load float, float* %39, align 4
  %46 = load float, float* %40, align 4
  %47 = load float, float* %41, align 4
  %48 = fcmp oeq float %42, %44
  br i1 %48, label %49, label %118

49:                                               ; preds = %35
  %50 = fcmp oeq float %43, %45
  %51 = fcmp oeq float %42, %46
  %52 = and i1 %50, %51
  %53 = fcmp oeq float %43, %47
  %54 = and i1 %53, %52
  br i1 %54, label %55, label %79

55:                                               ; preds = %49
  %56 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %1, i64 0, i32 1, i64 %29
  %57 = bitcast %struct.SkPoint* %56 to <2 x float>*
  %58 = load <2 x float>, <2 x float>* %57, align 4
  %59 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 %29
  %60 = bitcast %struct.SkPoint* %59 to <2 x float>*
  %61 = load <2 x float>, <2 x float>* %60, align 4
  %62 = extractelement <2 x float> %58, i32 0
  %63 = extractelement <2 x float> %61, i32 0
  %64 = fcmp ult float %62, %63
  br i1 %64, label %71, label %65

65:                                               ; preds = %55
  %66 = extractelement <2 x float> %58, i32 1
  %67 = extractelement <2 x float> %61, i32 1
  %68 = fcmp ult float %66, %67
  br i1 %68, label %71, label %69

69:                                               ; preds = %65
  %70 = bitcast %struct.SkPoint* %30 to <2 x float>*
  store <2 x float> %58, <2 x float>* %70, align 4
  br label %166

71:                                               ; preds = %65, %55
  %72 = fcmp ult float %63, %62
  br i1 %72, label %169, label %73

73:                                               ; preds = %71
  %74 = extractelement <2 x float> %61, i32 1
  %75 = extractelement <2 x float> %58, i32 1
  %76 = fcmp ult float %74, %75
  br i1 %76, label %169, label %77

77:                                               ; preds = %73
  %78 = bitcast %struct.SkPoint* %30 to <2 x float>*
  store <2 x float> %61, <2 x float>* %78, align 4
  br label %166

79:                                               ; preds = %49
  br i1 %50, label %80, label %118

80:                                               ; preds = %79
  %81 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %1, i64 0, i32 1, i64 %29
  %82 = bitcast %struct.SkPoint* %81 to i64*
  %83 = load i64, i64* %82, align 4
  %84 = bitcast %struct.SkPoint* %30 to i64*
  store i64 %83, i64* %84, align 4
  %85 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 %29
  %86 = bitcast %struct.SkPoint* %85 to <2 x float>*
  %87 = load <2 x float>, <2 x float>* %86, align 4
  %88 = trunc i64 %83 to i32
  %89 = bitcast i32 %88 to float
  %90 = extractelement <2 x float> %87, i32 0
  %91 = fcmp oeq float %90, %89
  br i1 %91, label %92, label %116

92:                                               ; preds = %80
  %93 = lshr i64 %83, 32
  %94 = trunc i64 %93 to i32
  %95 = bitcast i32 %94 to float
  %96 = extractelement <2 x float> %87, i32 1
  %97 = fcmp oeq float %96, %95
  br i1 %97, label %98, label %116

98:                                               ; preds = %92
  switch i32 %28, label %115 [
    i32 0, label %99
    i32 1, label %103
    i32 2, label %107
    i32 3, label %111
  ]

99:                                               ; preds = %98
  %100 = fcmp oge float %44, %46
  %101 = fcmp oge float %45, %47
  %102 = and i1 %100, %101
  br i1 %102, label %166, label %169

103:                                              ; preds = %98
  %104 = fcmp ole float %44, %46
  %105 = fcmp oge float %45, %47
  %106 = and i1 %104, %105
  br i1 %106, label %166, label %169

107:                                              ; preds = %98
  %108 = fcmp ole float %44, %46
  %109 = fcmp ole float %45, %47
  %110 = and i1 %108, %109
  br i1 %110, label %166, label %169

111:                                              ; preds = %98
  %112 = fcmp oge float %44, %46
  %113 = fcmp ole float %45, %47
  %114 = and i1 %112, %113
  br i1 %114, label %166, label %169

115:                                              ; preds = %98
  call void @llvm.trap() #9
  unreachable

116:                                              ; preds = %92, %80
  %117 = call zeroext i1 @_ZNK7SkRRect22checkCornerContainmentEff(%class.SkRRect* %2, float %44, float %45) #9
  br i1 %117, label %166, label %169

118:                                              ; preds = %35, %79
  %119 = fcmp oeq float %42, %46
  %120 = fcmp oeq float %43, %47
  %121 = and i1 %119, %120
  br i1 %121, label %122, label %160

122:                                              ; preds = %118
  %123 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %2, i64 0, i32 1, i64 %29
  %124 = bitcast %struct.SkPoint* %123 to i64*
  %125 = load i64, i64* %124, align 4
  %126 = bitcast %struct.SkPoint* %30 to i64*
  store i64 %125, i64* %126, align 4
  %127 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %1, i64 0, i32 1, i64 %29
  %128 = bitcast %struct.SkPoint* %127 to <2 x float>*
  %129 = load <2 x float>, <2 x float>* %128, align 4
  %130 = trunc i64 %125 to i32
  %131 = bitcast i32 %130 to float
  %132 = extractelement <2 x float> %129, i32 0
  %133 = fcmp oeq float %132, %131
  br i1 %133, label %134, label %158

134:                                              ; preds = %122
  %135 = lshr i64 %125, 32
  %136 = trunc i64 %135 to i32
  %137 = bitcast i32 %136 to float
  %138 = extractelement <2 x float> %129, i32 1
  %139 = fcmp oeq float %138, %137
  br i1 %139, label %140, label %158

140:                                              ; preds = %134
  switch i32 %28, label %157 [
    i32 0, label %141
    i32 1, label %145
    i32 2, label %149
    i32 3, label %153
  ]

141:                                              ; preds = %140
  %142 = fcmp oge float %46, %44
  %143 = fcmp oge float %47, %45
  %144 = and i1 %143, %142
  br i1 %144, label %166, label %169

145:                                              ; preds = %140
  %146 = fcmp ole float %46, %44
  %147 = fcmp oge float %47, %45
  %148 = and i1 %147, %146
  br i1 %148, label %166, label %169

149:                                              ; preds = %140
  %150 = fcmp ole float %46, %44
  %151 = fcmp ole float %47, %45
  %152 = and i1 %151, %150
  br i1 %152, label %166, label %169

153:                                              ; preds = %140
  %154 = fcmp oge float %46, %44
  %155 = fcmp ole float %47, %45
  %156 = and i1 %155, %154
  br i1 %156, label %166, label %169

157:                                              ; preds = %140
  call void @llvm.trap() #9
  unreachable

158:                                              ; preds = %134, %122
  %159 = call zeroext i1 @_ZNK7SkRRect22checkCornerContainmentEff(%class.SkRRect* %1, float %46, float %47) #9
  br i1 %159, label %166, label %169

160:                                              ; preds = %118
  %161 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %30, i64 0, i32 0
  store float 0.000000e+00, float* %161, align 4
  %162 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %4, i64 0, i32 1, i64 %29, i32 1
  store float 0.000000e+00, float* %162, align 4
  %163 = call zeroext i1 @_ZNK7SkRRect22checkCornerContainmentEff(%class.SkRRect* %1, float %42, float %43) #9
  br i1 %163, label %164, label %169

164:                                              ; preds = %160
  %165 = call zeroext i1 @_ZNK7SkRRect22checkCornerContainmentEff(%class.SkRRect* %2, float %42, float %43) #9
  br i1 %165, label %166, label %169

166:                                              ; preds = %153, %149, %145, %141, %111, %107, %103, %99, %77, %69, %116, %158, %164
  %167 = getelementptr inbounds i32, i32* %27, i64 1
  %168 = icmp eq i32* %167, getelementptr inbounds ([4 x i32], [4 x i32]* @_ZZN11SkRRectPriv21ConservativeIntersectERK7SkRRectS2_E7corners, i64 1, i64 0)
  br i1 %168, label %171, label %26

169:                                              ; preds = %153, %149, %145, %141, %111, %107, %103, %99, %160, %71, %73, %164, %158, %116
  %170 = bitcast %class.SkRRect* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %170, i8 0, i64 52, i1 false) #9, !alias.scope !5
  br label %179

171:                                              ; preds = %166
  %172 = call zeroext i1 @_ZN7SkRRect20AreRectAndRadiiValidERK6SkRectPK7SkPoint(%struct.SkRect* nonnull dereferenceable(16) %6, %struct.SkPoint* %11)
  br i1 %172, label %173, label %175

173:                                              ; preds = %171
  %174 = call zeroext i1 @_ZN7SkRRect10scaleRadiiEv(%class.SkRRect* nonnull %4)
  br i1 %174, label %175, label %177

175:                                              ; preds = %173, %171
  %176 = bitcast %class.SkRRect* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %176, i8 0, i64 52, i1 false) #9, !alias.scope !8
  br label %179

177:                                              ; preds = %173
  call void @_ZN7SkRRect11computeTypeEv(%class.SkRRect* nonnull %4)
  %178 = bitcast %class.SkRRect* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %178, i8* nonnull align 4 %5, i64 52, i1 false)
  br label %179

179:                                              ; preds = %169, %177, %175, %24
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %5) #9
  ret void
}

declare zeroext i1 @_ZN6SkRect9intersectERKS_S1_(%struct.SkRect*, %struct.SkRect* dereferenceable(16), %struct.SkRect* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind
declare float @nextafterf(float, float) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #7

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #3

declare void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer*, i8*, i64) local_unnamed_addr #3

declare void @_ZN8SkString6insertEmPKc(%class.SkString*, i64, i8*) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN7SkRRect9MakeEmptyEv: argument 0"}
!4 = distinct !{!4, !"_ZN7SkRRect9MakeEmptyEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN7SkRRect9MakeEmptyEv: argument 0"}
!7 = distinct !{!7, !"_ZN7SkRRect9MakeEmptyEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN7SkRRect9MakeEmptyEv: argument 0"}
!10 = distinct !{!10, !"_ZN7SkRRect9MakeEmptyEv"}
