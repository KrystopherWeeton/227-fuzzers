; ModuleID = '../../third_party/libxml/src/encoding.c'
source_filename = "../../third_party/libxml/src/encoding.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._xmlCharEncodingAlias = type { i8*, i8* }
%struct._xmlCharEncodingHandler = type { i8*, i32 (i8*, i32*, i8*, i32*)*, i32 (i8*, i32*, i8*, i32*)*, %struct._uconv_t*, %struct._uconv_t* }
%struct._uconv_t = type { %struct.UConverter*, %struct.UConverter*, [1024 x i16], i16*, i16* }
%struct.UConverter = type opaque
%struct._xmlError = type { i32, i32, i8*, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, i8* }
%struct._xmlNode = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, %struct._xmlNs*, i8*, %struct._xmlAttr*, %struct._xmlNs*, i8*, i16, i16 }
%struct._xmlDoc = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, i32, i32, %struct._xmlDtd*, %struct._xmlDtd*, %struct._xmlNs*, i8*, i8*, i8*, i8*, i8*, i32, %struct._xmlDict*, i8*, i32, i32 }
%struct._xmlDtd = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct._xmlDict = type opaque
%struct._xmlAttr = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlAttr*, %struct._xmlAttr*, %struct._xmlDoc*, %struct._xmlNs*, i32, i8* }
%struct._xmlNs = type { %struct._xmlNs*, i32, i8*, i8*, i8*, %struct._xmlDoc* }
%struct.UConverterToUnicodeArgs = type { i16, i8, %struct.UConverter*, i8*, i8*, i16*, i16*, i32* }
%struct.UConverterFromUnicodeArgs = type { i16, i8, %struct.UConverter*, i16*, i16*, i8*, i8*, i32* }
%struct._xmlBuffer = type { i8*, i32, i32, i32, i8* }
%struct._xmlParserInputBuffer = type { i8*, i32 (i8*, i8*, i32)*, i32 (i8*)*, %struct._xmlCharEncodingHandler*, %struct._xmlBuf*, %struct._xmlBuf*, i32, i32, i64 }
%struct._xmlBuf = type opaque
%struct._xmlOutputBuffer = type { i8*, i32 (i8*, i8*, i32)*, i32 (i8*)*, %struct._xmlCharEncodingHandler*, %struct._xmlBuf*, %struct._xmlBuf*, i32, i32 }
%struct._xmlParserCtxt = type { %struct._xmlSAXHandler*, i8*, %struct._xmlDoc*, i32, i32, i8*, i8*, i32, i32, %struct._xmlParserInput*, i32, i32, %struct._xmlParserInput**, %struct._xmlNode*, i32, i32, %struct._xmlNode**, i32, %struct._xmlParserNodeInfoSeq, i32, i32, i32, i32, i32, i32, %struct._xmlValidCtxt, i32, i32, i8*, i8*, i32, i32, i8**, i64, i64, i32, i32, i32, i8*, i8*, i8*, i32*, i32, i32, i32*, i32, %struct._xmlParserInput*, i32, i32, i32, i32, i8*, i32, i32, i8*, i32, i32, %struct._xmlDict*, i8**, i32, i32, i8*, i8*, i8*, i32, i32, i32, i8**, i32*, %struct._xmlStartTag*, %struct._xmlHashTable*, %struct._xmlHashTable*, i32, i32, i32, i32, %struct._xmlNode*, i32, %struct._xmlAttr*, %struct._xmlError, i32, i64, i64, %struct._xmlParserNodeInfo*, i32, i32, %struct._xmlParserNodeInfo*, i32, i64 }
%struct._xmlSAXHandler = type { void (i8*, i8*, i8*, i8*)*, i32 (i8*)*, i32 (i8*)*, i32 (i8*)*, %struct._xmlParserInput* (i8*, i8*, i8*)*, %struct._xmlEntity* (i8*, i8*)*, void (i8*, i8*, i32, i8*, i8*, i8*)*, void (i8*, i8*, i8*, i8*)*, void (i8*, i8*, i8*, i32, i32, i8*, %struct._xmlEnumeration*)*, void (i8*, i8*, i32, %struct._xmlElementContent*)*, void (i8*, i8*, i8*, i8*, i8*)*, void (i8*, %struct._xmlSAXLocator*)*, void (i8*)*, void (i8*)*, void (i8*, i8*, i8**)*, void (i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*, i32)*, void (i8*, i8*, i32)*, void (i8*, i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*, ...)*, void (i8*, i8*, ...)*, void (i8*, i8*, ...)*, %struct._xmlEntity* (i8*, i8*)*, void (i8*, i8*, i32)*, void (i8*, i8*, i8*, i8*)*, i32, i8*, void (i8*, i8*, i8*, i8*, i32, i8**, i32, i32, i8**)*, void (i8*, i8*, i8*, i8*)*, void (i8*, %struct._xmlError*)* }
%struct._xmlEnumeration = type { %struct._xmlEnumeration*, i8* }
%struct._xmlElementContent = type { i32, i32, i8*, %struct._xmlElementContent*, %struct._xmlElementContent*, %struct._xmlElementContent*, i8* }
%struct._xmlSAXLocator = type { i8* (i8*)*, i8* (i8*)*, i32 (i8*)*, i32 (i8*)* }
%struct._xmlEntity = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDtd*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, i8*, i8*, i32, i32, i8*, i8*, %struct._xmlEntity*, i8*, i32, i32, i32 }
%struct._xmlParserNodeInfoSeq = type { i64, i64, %struct._xmlParserNodeInfo* }
%struct._xmlValidCtxt = type { i8*, void (i8*, i8*, ...)*, void (i8*, i8*, ...)*, %struct._xmlNode*, i32, i32, %struct._xmlNode**, i32, %struct._xmlDoc*, i32, %struct._xmlValidState*, i32, i32, %struct._xmlValidState*, i8*, i8* }
%struct._xmlValidState = type opaque
%struct._xmlParserInput = type { %struct._xmlParserInputBuffer*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i64, void (i8*)*, i8*, i8*, i32, i32 }
%struct._xmlStartTag = type opaque
%struct._xmlHashTable = type opaque
%struct._xmlParserNodeInfo = type { %struct._xmlNode*, i64, i64, i64, i64 }

@xmlCharEncodingAliases = internal unnamed_addr global %struct._xmlCharEncodingAlias* null, align 8
@xmlCharEncodingAliasesNb = internal unnamed_addr global i32 0, align 4
@xmlFree = external local_unnamed_addr global void (i8*)*, align 8
@xmlCharEncodingAliasesMax = internal unnamed_addr global i32 0, align 4
@xmlMalloc = external local_unnamed_addr global i8* (i64)*, align 8
@xmlRealloc = external local_unnamed_addr global i8* (i8*, i64)*, align 8
@xmlMemStrdup = external local_unnamed_addr global i8* (i8*)*, align 8
@.str.1 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"UTF8\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"UTF-16\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"UTF16\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"ISO-10646-UCS-2\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"UCS-2\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"UCS2\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"ISO-10646-UCS-4\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"UCS-4\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"UCS4\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"ISO-8859-1\00", align 1
@.str.12 = private unnamed_addr constant [12 x i8] c"ISO-LATIN-1\00", align 1
@.str.13 = private unnamed_addr constant [12 x i8] c"ISO LATIN 1\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"ISO-8859-2\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"ISO-LATIN-2\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"ISO LATIN 2\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"ISO-8859-3\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"ISO-8859-4\00", align 1
@.str.19 = private unnamed_addr constant [11 x i8] c"ISO-8859-5\00", align 1
@.str.20 = private unnamed_addr constant [11 x i8] c"ISO-8859-6\00", align 1
@.str.21 = private unnamed_addr constant [11 x i8] c"ISO-8859-7\00", align 1
@.str.22 = private unnamed_addr constant [11 x i8] c"ISO-8859-8\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"ISO-8859-9\00", align 1
@.str.24 = private unnamed_addr constant [12 x i8] c"ISO-2022-JP\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"SHIFT_JIS\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"EUC-JP\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"EBCDIC\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"Shift-JIS\00", align 1
@.str.29 = private unnamed_addr constant [39 x i8] c"xmlNewCharEncodingHandler : no name !\0A\00", align 1
@.str.30 = private unnamed_addr constant [45 x i8] c"xmlNewCharEncodingHandler : out of memory !\0A\00", align 1
@handlers = internal unnamed_addr global %struct._xmlCharEncodingHandler** null, align 8
@.str.32 = private unnamed_addr constant [47 x i8] c"xmlInitCharEncodingHandlers : out of memory !\0A\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"UTF-16LE\00", align 1
@xmlUTF16LEHandler = internal unnamed_addr global %struct._xmlCharEncodingHandler* null, align 8
@.str.34 = private unnamed_addr constant [9 x i8] c"UTF-16BE\00", align 1
@xmlUTF16BEHandler = internal unnamed_addr global %struct._xmlCharEncodingHandler* null, align 8
@.str.35 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"US-ASCII\00", align 1
@.str.37 = private unnamed_addr constant [5 x i8] c"HTML\00", align 1
@nbCharEncodingHandler = internal unnamed_addr global i32 0, align 4
@.str.38 = private unnamed_addr constant [48 x i8] c"xmlRegisterCharEncodingHandler: NULL handler !\0A\00", align 1
@.str.39 = private unnamed_addr constant [69 x i8] c"xmlRegisterCharEncodingHandler: Too many handler registered, see %s\0A\00", align 1
@.str.40 = private unnamed_addr constant [22 x i8] c"MAX_ENCODING_HANDLERS\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"ebcdic\00", align 1
@.str.42 = private unnamed_addr constant [10 x i8] c"EBCDIC-US\00", align 1
@.str.43 = private unnamed_addr constant [8 x i8] c"IBM-037\00", align 1
@.str.44 = private unnamed_addr constant [10 x i8] c"SHIFT-JIS\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"Shift_JIS\00", align 1
@.str.46 = private unnamed_addr constant [48 x i8] c"ICU converter : problems with filters for '%s'\0A\00", align 1
@.str.47 = private unnamed_addr constant [28 x i8] c"0x%02X 0x%02X 0x%02X 0x%02X\00", align 1
@.str.48 = private unnamed_addr constant [54 x i8] c"input conversion failed due to input error, bytes %s\0A\00", align 1
@.str.49 = private unnamed_addr constant [41 x i8] c"xmlCharEncOutFunc: no output function !\0A\00", align 1
@.str.50 = private unnamed_addr constant [6 x i8] c"&#%d;\00", align 1
@.str.51 = private unnamed_addr constant [54 x i8] c"output conversion failed due to conv error, bytes %s\0A\00", align 1
@switch.table.xmlFindCharEncodingHandler = private unnamed_addr constant [21 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i64 0, i64 0)], align 8
@switch.table.xmlEncOutputChunk = private unnamed_addr constant [6 x i32] [i32 -2, i32 -3, i32 -2, i32 -3, i32 -3, i32 -1], align 4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @isolat1ToUTF8(i8*, i32*, i8*, i32*) #0 {
  %5 = icmp eq i8* %0, null
  %6 = icmp eq i8* %2, null
  %7 = or i1 %5, %6
  %8 = icmp eq i32* %1, null
  %9 = or i1 %8, %7
  %10 = icmp eq i32* %3, null
  %11 = or i1 %10, %9
  br i1 %11, label %91, label %12

12:                                               ; preds = %4
  %13 = load i32, i32* %1, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %0, i64 %14
  %16 = load i32, i32* %3, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %2, i64 %17
  %19 = icmp sgt i32 %16, 0
  %20 = getelementptr inbounds i8, i8* %15, i64 -1
  %21 = icmp ugt i8* %20, %0
  %22 = and i1 %21, %19
  br i1 %22, label %23, label %67

23:                                               ; preds = %12
  %24 = ptrtoint i8* %15 to i64
  br label %25

25:                                               ; preds = %23, %61
  %26 = phi i8* [ %18, %23 ], [ %50, %61 ]
  %27 = phi i8* [ %2, %23 ], [ %63, %61 ]
  %28 = phi i8* [ %0, %23 ], [ %62, %61 ]
  %29 = load i8, i8* %27, align 1
  %30 = icmp slt i8 %29, 0
  br i1 %30, label %31, label %40

31:                                               ; preds = %25
  %32 = lshr i8 %29, 6
  %33 = or i8 %32, -64
  %34 = getelementptr inbounds i8, i8* %28, i64 1
  store i8 %33, i8* %28, align 1
  %35 = load i8, i8* %27, align 1
  %36 = and i8 %35, 63
  %37 = or i8 %36, -128
  %38 = getelementptr inbounds i8, i8* %28, i64 2
  store i8 %37, i8* %34, align 1
  %39 = getelementptr inbounds i8, i8* %27, i64 1
  br label %40

40:                                               ; preds = %31, %25
  %41 = phi i8* [ %38, %31 ], [ %28, %25 ]
  %42 = phi i8* [ %39, %31 ], [ %27, %25 ]
  %43 = ptrtoint i8* %26 to i64
  %44 = ptrtoint i8* %42 to i64
  %45 = sub i64 %43, %44
  %46 = ptrtoint i8* %41 to i64
  %47 = sub i64 %24, %46
  %48 = icmp sgt i64 %45, %47
  %49 = getelementptr inbounds i8, i8* %42, i64 %47
  %50 = select i1 %48, i8* %49, i8* %26
  %51 = icmp ult i8* %42, %50
  br i1 %51, label %52, label %61

52:                                               ; preds = %40, %57
  %53 = phi i8* [ %58, %57 ], [ %42, %40 ]
  %54 = phi i8* [ %59, %57 ], [ %41, %40 ]
  %55 = load i8, i8* %53, align 1
  %56 = icmp sgt i8 %55, -1
  br i1 %56, label %57, label %61

57:                                               ; preds = %52
  %58 = getelementptr inbounds i8, i8* %53, i64 1
  %59 = getelementptr inbounds i8, i8* %54, i64 1
  store i8 %55, i8* %54, align 1
  %60 = icmp eq i8* %58, %50
  br i1 %60, label %61, label %52

61:                                               ; preds = %52, %57, %40
  %62 = phi i8* [ %41, %40 ], [ %59, %57 ], [ %54, %52 ]
  %63 = phi i8* [ %42, %40 ], [ %50, %57 ], [ %53, %52 ]
  %64 = icmp ult i8* %63, %18
  %65 = icmp ult i8* %62, %20
  %66 = and i1 %65, %64
  br i1 %66, label %25, label %67

67:                                               ; preds = %61, %12
  %68 = phi i8* [ %0, %12 ], [ %62, %61 ]
  %69 = phi i8* [ %2, %12 ], [ %63, %61 ]
  %70 = phi i1 [ %19, %12 ], [ %64, %61 ]
  %71 = icmp ult i8* %68, %15
  %72 = and i1 %71, %70
  br i1 %72, label %73, label %79

73:                                               ; preds = %67
  %74 = load i8, i8* %69, align 1
  %75 = icmp sgt i8 %74, -1
  br i1 %75, label %76, label %79

76:                                               ; preds = %73
  %77 = getelementptr inbounds i8, i8* %69, i64 1
  %78 = getelementptr inbounds i8, i8* %68, i64 1
  store i8 %74, i8* %68, align 1
  br label %79

79:                                               ; preds = %76, %73, %67
  %80 = phi i8* [ %78, %76 ], [ %68, %73 ], [ %68, %67 ]
  %81 = phi i8* [ %77, %76 ], [ %69, %73 ], [ %69, %67 ]
  %82 = ptrtoint i8* %80 to i64
  %83 = ptrtoint i8* %0 to i64
  %84 = sub i64 %82, %83
  %85 = trunc i64 %84 to i32
  store i32 %85, i32* %1, align 4
  %86 = ptrtoint i8* %81 to i64
  %87 = ptrtoint i8* %2 to i64
  %88 = sub i64 %86, %87
  %89 = trunc i64 %88 to i32
  store i32 %89, i32* %3, align 4
  %90 = load i32, i32* %1, align 4
  br label %91

91:                                               ; preds = %4, %79
  %92 = phi i32 [ %90, %79 ], [ -1, %4 ]
  ret i32 %92
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @UTF8Toisolat1(i8*, i32*, i8*, i32*) #0 {
  %5 = icmp eq i8* %0, null
  %6 = icmp eq i32* %1, null
  %7 = or i1 %5, %6
  %8 = icmp eq i32* %3, null
  %9 = or i1 %7, %8
  br i1 %9, label %128, label %10

10:                                               ; preds = %4
  %11 = icmp eq i8* %2, null
  br i1 %11, label %12, label %13

12:                                               ; preds = %10
  store i32 0, i32* %1, align 4
  store i32 0, i32* %3, align 4
  br label %128

13:                                               ; preds = %10
  %14 = load i32, i32* %3, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %2, i64 %15
  %17 = load i32, i32* %1, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %0, i64 %18
  %20 = icmp sgt i32 %14, 0
  br i1 %20, label %21, label %116

21:                                               ; preds = %13
  %22 = ptrtoint i8* %16 to i64
  br label %23

23:                                               ; preds = %21, %103
  %24 = phi i8* [ %2, %21 ], [ %101, %103 ]
  %25 = phi i8* [ %0, %21 ], [ %105, %103 ]
  %26 = getelementptr inbounds i8, i8* %24, i64 1
  %27 = load i8, i8* %24, align 1
  %28 = zext i8 %27 to i32
  %29 = icmp sgt i8 %27, -1
  br i1 %29, label %62, label %30

30:                                               ; preds = %23
  %31 = icmp ult i8 %27, -64
  br i1 %31, label %32, label %41

32:                                               ; preds = %30
  %33 = ptrtoint i8* %25 to i64
  %34 = ptrtoint i8* %0 to i64
  %35 = sub i64 %33, %34
  %36 = trunc i64 %35 to i32
  store i32 %36, i32* %1, align 4
  %37 = ptrtoint i8* %24 to i64
  %38 = ptrtoint i8* %2 to i64
  %39 = sub i64 %37, %38
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %3, align 4
  br label %128

41:                                               ; preds = %30
  %42 = icmp ult i8 %27, -32
  br i1 %42, label %43, label %45

43:                                               ; preds = %41
  %44 = and i32 %28, 31
  br label %62

45:                                               ; preds = %41
  %46 = icmp ult i8 %27, -16
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = and i32 %28, 15
  br label %62

49:                                               ; preds = %45
  %50 = icmp ult i8 %27, -8
  br i1 %50, label %51, label %53

51:                                               ; preds = %49
  %52 = and i32 %28, 7
  br label %62

53:                                               ; preds = %49
  %54 = ptrtoint i8* %25 to i64
  %55 = ptrtoint i8* %0 to i64
  %56 = sub i64 %54, %55
  %57 = trunc i64 %56 to i32
  store i32 %57, i32* %1, align 4
  %58 = ptrtoint i8* %24 to i64
  %59 = ptrtoint i8* %2 to i64
  %60 = sub i64 %58, %59
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %3, align 4
  br label %128

62:                                               ; preds = %23, %47, %51, %43
  %63 = phi i32 [ %44, %43 ], [ %48, %47 ], [ %52, %51 ], [ %28, %23 ]
  %64 = phi i32 [ 1, %43 ], [ 2, %47 ], [ 3, %51 ], [ 0, %23 ]
  %65 = ptrtoint i8* %26 to i64
  %66 = sub i64 %22, %65
  %67 = zext i32 %64 to i64
  %68 = icmp slt i64 %66, %67
  br i1 %68, label %116, label %69

69:                                               ; preds = %62
  %70 = icmp ne i32 %64, 0
  %71 = icmp ult i8* %26, %16
  %72 = and i1 %71, %70
  br i1 %72, label %73, label %99

73:                                               ; preds = %69
  %74 = load i8, i8* %26, align 1
  %75 = zext i8 %74 to i32
  %76 = and i32 %75, 192
  %77 = icmp eq i32 %76, 128
  br i1 %77, label %87, label %78

78:                                               ; preds = %143, %130, %73
  %79 = ptrtoint i8* %25 to i64
  %80 = ptrtoint i8* %0 to i64
  %81 = sub i64 %79, %80
  %82 = trunc i64 %81 to i32
  store i32 %82, i32* %1, align 4
  %83 = ptrtoint i8* %24 to i64
  %84 = ptrtoint i8* %2 to i64
  %85 = sub i64 %83, %84
  %86 = trunc i64 %85 to i32
  store i32 %86, i32* %3, align 4
  br label %128

87:                                               ; preds = %73
  %88 = getelementptr inbounds i8, i8* %24, i64 2
  %89 = shl nuw nsw i32 %63, 6
  %90 = and i32 %75, 63
  %91 = or i32 %90, %89
  %92 = icmp ne i32 %64, 1
  %93 = icmp ult i8* %88, %16
  %94 = and i1 %93, %92
  br i1 %94, label %130, label %95

95:                                               ; preds = %148, %135, %87
  %96 = phi i8* [ %88, %87 ], [ %136, %135 ], [ %149, %148 ]
  %97 = phi i32 [ %91, %87 ], [ %139, %135 ], [ %152, %148 ]
  %98 = icmp ult i32 %97, 256
  br i1 %98, label %99, label %107

99:                                               ; preds = %69, %95
  %100 = phi i32 [ %97, %95 ], [ %63, %69 ]
  %101 = phi i8* [ %96, %95 ], [ %26, %69 ]
  %102 = icmp ult i8* %25, %19
  br i1 %102, label %103, label %116

103:                                              ; preds = %99
  %104 = trunc i32 %100 to i8
  %105 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %104, i8* %25, align 1
  %106 = icmp ult i8* %101, %16
  br i1 %106, label %23, label %116

107:                                              ; preds = %95
  %108 = ptrtoint i8* %25 to i64
  %109 = ptrtoint i8* %0 to i64
  %110 = sub i64 %108, %109
  %111 = trunc i64 %110 to i32
  store i32 %111, i32* %1, align 4
  %112 = ptrtoint i8* %24 to i64
  %113 = ptrtoint i8* %2 to i64
  %114 = sub i64 %112, %113
  %115 = trunc i64 %114 to i32
  store i32 %115, i32* %3, align 4
  br label %128

116:                                              ; preds = %103, %62, %99, %13
  %117 = phi i8* [ %0, %13 ], [ %25, %99 ], [ %25, %62 ], [ %105, %103 ]
  %118 = phi i8* [ %2, %13 ], [ %24, %99 ], [ %24, %62 ], [ %101, %103 ]
  %119 = ptrtoint i8* %117 to i64
  %120 = ptrtoint i8* %0 to i64
  %121 = sub i64 %119, %120
  %122 = trunc i64 %121 to i32
  store i32 %122, i32* %1, align 4
  %123 = ptrtoint i8* %118 to i64
  %124 = ptrtoint i8* %2 to i64
  %125 = sub i64 %123, %124
  %126 = trunc i64 %125 to i32
  store i32 %126, i32* %3, align 4
  %127 = load i32, i32* %1, align 4
  br label %128

128:                                              ; preds = %4, %116, %107, %78, %53, %32, %12
  %129 = phi i32 [ 0, %12 ], [ %127, %116 ], [ -2, %107 ], [ -2, %78 ], [ -2, %32 ], [ -2, %53 ], [ -1, %4 ]
  ret i32 %129

130:                                              ; preds = %87
  %131 = load i8, i8* %88, align 1
  %132 = zext i8 %131 to i32
  %133 = and i32 %132, 192
  %134 = icmp eq i32 %133, 128
  br i1 %134, label %135, label %78

135:                                              ; preds = %130
  %136 = getelementptr inbounds i8, i8* %24, i64 3
  %137 = shl nuw nsw i32 %91, 6
  %138 = and i32 %132, 63
  %139 = or i32 %138, %137
  %140 = icmp ne i32 %64, 2
  %141 = icmp ult i8* %136, %16
  %142 = and i1 %141, %140
  br i1 %142, label %143, label %95

143:                                              ; preds = %135
  %144 = load i8, i8* %136, align 1
  %145 = zext i8 %144 to i32
  %146 = and i32 %145, 192
  %147 = icmp eq i32 %146, 128
  br i1 %147, label %148, label %78

148:                                              ; preds = %143
  %149 = getelementptr inbounds i8, i8* %24, i64 4
  %150 = shl nuw nsw i32 %139, 6
  %151 = and i32 %145, 63
  %152 = or i32 %151, %150
  br label %95
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @xmlDetectCharEncoding(i8* readonly, i32) local_unnamed_addr #2 {
  %3 = icmp eq i8* %0, null
  br i1 %3, label %112, label %4

4:                                                ; preds = %2
  %5 = icmp sgt i32 %1, 3
  br i1 %5, label %6, label %82

6:                                                ; preds = %4
  %7 = load i8, i8* %0, align 1
  switch i8 %7, label %86 [
    i8 0, label %8
    i8 60, label %19
    i8 76, label %46
  ]

8:                                                ; preds = %6
  %9 = getelementptr inbounds i8, i8* %0, i64 1
  %10 = load i8, i8* %9, align 1
  switch i8 %10, label %111 [
    i8 0, label %11
    i8 60, label %38
  ]

11:                                               ; preds = %8
  %12 = getelementptr inbounds i8, i8* %0, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %30

15:                                               ; preds = %11
  %16 = getelementptr inbounds i8, i8* %0, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 60
  br i1 %18, label %112, label %30

19:                                               ; preds = %6
  %20 = getelementptr inbounds i8, i8* %0, i64 1
  %21 = load i8, i8* %20, align 1
  switch i8 %21, label %111 [
    i8 0, label %22
    i8 63, label %58
  ]

22:                                               ; preds = %19
  %23 = getelementptr inbounds i8, i8* %0, i64 2
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %66

26:                                               ; preds = %22
  %27 = getelementptr inbounds i8, i8* %0, i64 3
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %112, label %66

30:                                               ; preds = %11, %15
  %31 = getelementptr inbounds i8, i8* %0, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 60
  br i1 %33, label %34, label %111

34:                                               ; preds = %30
  %35 = getelementptr inbounds i8, i8* %0, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %112, label %111

38:                                               ; preds = %8
  %39 = getelementptr inbounds i8, i8* %0, i64 2
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %74

42:                                               ; preds = %38
  %43 = getelementptr inbounds i8, i8* %0, i64 3
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %112, label %74

46:                                               ; preds = %6
  %47 = getelementptr inbounds i8, i8* %0, i64 1
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 111
  br i1 %49, label %50, label %111

50:                                               ; preds = %46
  %51 = getelementptr inbounds i8, i8* %0, i64 2
  %52 = load i8, i8* %51, align 1
  %53 = icmp eq i8 %52, -89
  br i1 %53, label %54, label %111

54:                                               ; preds = %50
  %55 = getelementptr inbounds i8, i8* %0, i64 3
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, -108
  br i1 %57, label %112, label %111

58:                                               ; preds = %19
  %59 = getelementptr inbounds i8, i8* %0, i64 2
  %60 = load i8, i8* %59, align 1
  %61 = icmp eq i8 %60, 120
  br i1 %61, label %62, label %111

62:                                               ; preds = %58
  %63 = getelementptr inbounds i8, i8* %0, i64 3
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, 109
  br i1 %65, label %112, label %111

66:                                               ; preds = %22, %26
  %67 = getelementptr inbounds i8, i8* %0, i64 2
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 63
  br i1 %69, label %70, label %111

70:                                               ; preds = %66
  %71 = getelementptr inbounds i8, i8* %0, i64 3
  %72 = load i8, i8* %71, align 1
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %112, label %111

74:                                               ; preds = %42, %38
  %75 = getelementptr inbounds i8, i8* %0, i64 2
  %76 = load i8, i8* %75, align 1
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %78, label %111

78:                                               ; preds = %74
  %79 = getelementptr inbounds i8, i8* %0, i64 3
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, 63
  br i1 %81, label %112, label %111

82:                                               ; preds = %4
  %83 = icmp eq i32 %1, 3
  br i1 %83, label %84, label %97

84:                                               ; preds = %82
  %85 = load i8, i8* %0, align 1
  br label %86

86:                                               ; preds = %6, %84
  %87 = phi i8 [ %85, %84 ], [ %7, %6 ]
  %88 = icmp eq i8 %87, -17
  br i1 %88, label %89, label %101

89:                                               ; preds = %86
  %90 = getelementptr inbounds i8, i8* %0, i64 1
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, -69
  br i1 %92, label %93, label %111

93:                                               ; preds = %89
  %94 = getelementptr inbounds i8, i8* %0, i64 2
  %95 = load i8, i8* %94, align 1
  %96 = icmp eq i8 %95, -65
  br i1 %96, label %112, label %111

97:                                               ; preds = %82
  %98 = icmp sgt i32 %1, 1
  br i1 %98, label %99, label %111

99:                                               ; preds = %97
  %100 = load i8, i8* %0, align 1
  br label %101

101:                                              ; preds = %99, %86
  %102 = phi i8 [ %87, %86 ], [ %100, %99 ]
  switch i8 %102, label %111 [
    i8 -2, label %103
    i8 -1, label %107
  ]

103:                                              ; preds = %101
  %104 = getelementptr inbounds i8, i8* %0, i64 1
  %105 = load i8, i8* %104, align 1
  %106 = icmp eq i8 %105, -1
  br i1 %106, label %112, label %111

107:                                              ; preds = %101
  %108 = getelementptr inbounds i8, i8* %0, i64 1
  %109 = load i8, i8* %108, align 1
  %110 = icmp eq i8 %109, -2
  br i1 %110, label %112, label %111

111:                                              ; preds = %8, %19, %58, %62, %34, %30, %54, %50, %46, %78, %74, %70, %66, %93, %89, %101, %103, %107, %97
  br label %112

112:                                              ; preds = %107, %103, %93, %78, %70, %62, %54, %42, %34, %26, %15, %2, %111
  %113 = phi i32 [ 0, %111 ], [ 0, %2 ], [ 5, %15 ], [ 4, %26 ], [ 7, %34 ], [ 8, %42 ], [ 6, %54 ], [ 1, %62 ], [ 2, %70 ], [ 3, %78 ], [ 1, %93 ], [ 3, %103 ], [ 2, %107 ]
  ret i32 %113
}

; Function Attrs: nounwind ssp uwtable
define hidden void @xmlCleanupEncodingAliases() local_unnamed_addr #3 {
  %1 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  %2 = icmp eq %struct._xmlCharEncodingAlias* %1, null
  br i1 %2, label %35, label %3

3:                                                ; preds = %0
  %4 = bitcast %struct._xmlCharEncodingAlias* %1 to i8*
  %5 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %32

7:                                                ; preds = %3, %28
  %8 = phi %struct._xmlCharEncodingAlias* [ %29, %28 ], [ %1, %3 ]
  %9 = phi i64 [ %24, %28 ], [ 0, %3 ]
  %10 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %8, i64 %9, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %7
  %14 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %14(i8* nonnull %11) #11
  %15 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  br label %16

16:                                               ; preds = %7, %13
  %17 = phi %struct._xmlCharEncodingAlias* [ %8, %7 ], [ %15, %13 ]
  %18 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %17, i64 %9, i32 1
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %16
  %22 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %22(i8* nonnull %19) #11
  br label %23

23:                                               ; preds = %16, %21
  %24 = add nuw nsw i64 %9, 1
  %25 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  %26 = sext i32 %25 to i64
  %27 = icmp slt i64 %24, %26
  br i1 %27, label %28, label %30

28:                                               ; preds = %23
  %29 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  br label %7

30:                                               ; preds = %23
  %31 = load i8*, i8** bitcast (%struct._xmlCharEncodingAlias** @xmlCharEncodingAliases to i8**), align 8
  br label %32

32:                                               ; preds = %30, %3
  %33 = phi i8* [ %31, %30 ], [ %4, %3 ]
  store i32 0, i32* @xmlCharEncodingAliasesNb, align 4
  store i32 0, i32* @xmlCharEncodingAliasesMax, align 4
  %34 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %34(i8* %33) #11
  store %struct._xmlCharEncodingAlias* null, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  br label %35

35:                                               ; preds = %0, %32
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i8* @xmlGetEncodingAlias(i8* readonly) local_unnamed_addr #4 {
  %2 = alloca [100 x i8], align 16
  %3 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %3) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 100, i1 false)
  %4 = icmp eq i8* %0, null
  %5 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  %6 = icmp eq %struct._xmlCharEncodingAlias* %5, null
  %7 = or i1 %4, %6
  br i1 %7, label %52, label %8

8:                                                ; preds = %1
  %9 = tail call i32** @__ctype_toupper_loc() #12
  %10 = load i32*, i32** %9, align 8
  br label %11

11:                                               ; preds = %64, %8
  %12 = phi i64 [ 0, %8 ], [ %65, %64 ]
  %13 = phi i32 [ 0, %8 ], [ %66, %64 ]
  %14 = getelementptr inbounds i8, i8* %0, i64 %12
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i64
  %17 = getelementptr inbounds i32, i32* %10, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 %12
  store i8 %19, i8* %20, align 2
  %21 = and i32 %18, 255
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %11
  %24 = or i64 %12, 1
  %25 = icmp eq i64 %24, 99
  br i1 %25, label %29, label %54

26:                                               ; preds = %54, %11
  %27 = phi i64 [ %12, %11 ], [ %24, %54 ]
  %28 = trunc i64 %27 to i32
  br label %31

29:                                               ; preds = %23
  %30 = or i32 %13, 1
  br label %31

31:                                               ; preds = %29, %26
  %32 = phi i32 [ %28, %26 ], [ %30, %29 ]
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 %33
  store i8 0, i8* %34, align 1
  %35 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %52

37:                                               ; preds = %31
  %38 = sext i32 %35 to i64
  br label %41

39:                                               ; preds = %41
  %40 = icmp slt i64 %47, %38
  br i1 %40, label %41, label %52

41:                                               ; preds = %37, %39
  %42 = phi i64 [ 0, %37 ], [ %47, %39 ]
  %43 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %5, i64 %42, i32 1
  %44 = load i8*, i8** %43, align 8
  %45 = call i32 @strcmp(i8* %44, i8* nonnull %3) #13
  %46 = icmp eq i32 %45, 0
  %47 = add nuw nsw i64 %42, 1
  br i1 %46, label %48, label %39

48:                                               ; preds = %41
  %49 = and i64 %42, 4294967295
  %50 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %5, i64 %49, i32 0
  %51 = load i8*, i8** %50, align 8
  br label %52

52:                                               ; preds = %39, %31, %1, %48
  %53 = phi i8* [ %51, %48 ], [ null, %1 ], [ null, %31 ], [ null, %39 ]
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %3) #11
  ret i8* %53

54:                                               ; preds = %23
  %55 = getelementptr inbounds i8, i8* %0, i64 %24
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i64
  %58 = getelementptr inbounds i32, i32* %10, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 %24
  store i8 %60, i8* %61, align 1
  %62 = and i32 %59, 255
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %26, label %64

64:                                               ; preds = %54
  %65 = add nuw nsw i64 %12, 2
  %66 = add nuw nsw i32 %13, 2
  br label %11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone
declare i32** @__ctype_toupper_loc() local_unnamed_addr #5

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @xmlAddEncodingAlias(i8*, i8* readonly) local_unnamed_addr #3 {
  %3 = alloca [100 x i8], align 16
  %4 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %4) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 100, i1 false)
  %5 = icmp eq i8* %0, null
  %6 = icmp eq i8* %1, null
  %7 = or i1 %5, %6
  br i1 %7, label %94, label %8

8:                                                ; preds = %2
  %9 = tail call i32** @__ctype_toupper_loc() #12
  br label %10

10:                                               ; preds = %107, %8
  %11 = phi i64 [ 0, %8 ], [ %108, %107 ]
  %12 = phi i32 [ 0, %8 ], [ %109, %107 ]
  %13 = load i32*, i32** %9, align 8
  %14 = getelementptr inbounds i8, i8* %1, i64 %11
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i64
  %17 = getelementptr inbounds i32, i32* %13, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i64 0, i64 %11
  store i8 %19, i8* %20, align 2
  %21 = and i32 %18, 255
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %10
  %24 = or i64 %11, 1
  %25 = icmp eq i64 %24, 99
  br i1 %25, label %29, label %96

26:                                               ; preds = %96, %10
  %27 = phi i64 [ %11, %10 ], [ %24, %96 ]
  %28 = trunc i64 %27 to i32
  br label %31

29:                                               ; preds = %23
  %30 = or i32 %12, 1
  br label %31

31:                                               ; preds = %29, %26
  %32 = phi i32 [ %28, %26 ], [ %30, %29 ]
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i64 0, i64 %33
  store i8 0, i8* %34, align 1
  %35 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  %36 = icmp eq %struct._xmlCharEncodingAlias* %35, null
  %37 = bitcast %struct._xmlCharEncodingAlias* %35 to i8*
  br i1 %36, label %38, label %42

38:                                               ; preds = %31
  store i32 0, i32* @xmlCharEncodingAliasesNb, align 4
  store i32 20, i32* @xmlCharEncodingAliasesMax, align 4
  %39 = load i8* (i64)*, i8* (i64)** @xmlMalloc, align 8
  %40 = tail call i8* %39(i64 320) #11
  store i8* %40, i8** bitcast (%struct._xmlCharEncodingAlias** @xmlCharEncodingAliases to i8**), align 8
  %41 = icmp eq i8* %40, null
  br i1 %41, label %94, label %52

42:                                               ; preds = %31
  %43 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  %44 = load i32, i32* @xmlCharEncodingAliasesMax, align 4
  %45 = icmp slt i32 %43, %44
  br i1 %45, label %56, label %46

46:                                               ; preds = %42
  %47 = shl nsw i32 %44, 1
  store i32 %47, i32* @xmlCharEncodingAliasesMax, align 4
  %48 = load i8* (i8*, i64)*, i8* (i8*, i64)** @xmlRealloc, align 8
  %49 = sext i32 %47 to i64
  %50 = shl nsw i64 %49, 4
  %51 = tail call i8* %48(i8* nonnull %37, i64 %50) #11
  store i8* %51, i8** bitcast (%struct._xmlCharEncodingAlias** @xmlCharEncodingAliases to i8**), align 8
  br label %52

52:                                               ; preds = %38, %46
  %53 = phi i8* [ %40, %38 ], [ %51, %46 ]
  %54 = bitcast i8* %53 to %struct._xmlCharEncodingAlias*
  %55 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  br label %56

56:                                               ; preds = %52, %42
  %57 = phi i32 [ %55, %52 ], [ %43, %42 ]
  %58 = phi %struct._xmlCharEncodingAlias* [ %54, %52 ], [ %35, %42 ]
  %59 = icmp sgt i32 %57, 0
  br i1 %59, label %60, label %80

60:                                               ; preds = %56
  %61 = sext i32 %57 to i64
  br label %64

62:                                               ; preds = %64
  %63 = icmp slt i64 %70, %61
  br i1 %63, label %64, label %80

64:                                               ; preds = %60, %62
  %65 = phi i64 [ 0, %60 ], [ %70, %62 ]
  %66 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %58, i64 %65, i32 1
  %67 = load i8*, i8** %66, align 8
  %68 = call i32 @strcmp(i8* %67, i8* nonnull %4) #13
  %69 = icmp eq i32 %68, 0
  %70 = add nuw nsw i64 %65, 1
  br i1 %69, label %71, label %62

71:                                               ; preds = %64
  %72 = and i64 %65, 4294967295
  %73 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %74 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %58, i64 %72, i32 0
  %75 = load i8*, i8** %74, align 8
  tail call void %73(i8* %75) #11
  %76 = load i8* (i8*)*, i8* (i8*)** @xmlMemStrdup, align 8
  %77 = tail call i8* %76(i8* %0) #11
  %78 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  %79 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %78, i64 %72, i32 0
  store i8* %77, i8** %79, align 8
  br label %94

80:                                               ; preds = %62, %56
  %81 = load i8* (i8*)*, i8* (i8*)** @xmlMemStrdup, align 8
  %82 = tail call i8* %81(i8* %0) #11
  %83 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  %84 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %83, i64 %85, i32 0
  store i8* %82, i8** %86, align 8
  %87 = load i8* (i8*)*, i8* (i8*)** @xmlMemStrdup, align 8
  %88 = call i8* %87(i8* nonnull %4) #11
  %89 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  %90 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %89, i64 %91, i32 1
  store i8* %88, i8** %92, align 8
  %93 = add nsw i32 %90, 1
  store i32 %93, i32* @xmlCharEncodingAliasesNb, align 4
  br label %94

94:                                               ; preds = %38, %2, %80, %71
  %95 = phi i32 [ 0, %71 ], [ 0, %80 ], [ -1, %2 ], [ -1, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %4) #11
  ret i32 %95

96:                                               ; preds = %23
  %97 = load i32*, i32** %9, align 8
  %98 = getelementptr inbounds i8, i8* %1, i64 %24
  %99 = load i8, i8* %98, align 1
  %100 = sext i8 %99 to i64
  %101 = getelementptr inbounds i32, i32* %97, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = trunc i32 %102 to i8
  %104 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i64 0, i64 %24
  store i8 %103, i8* %104, align 1
  %105 = and i32 %102, 255
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %26, label %107

107:                                              ; preds = %96
  %108 = add nuw nsw i64 %11, 2
  %109 = add nuw nsw i32 %12, 2
  br label %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @xmlDelEncodingAlias(i8* readonly) local_unnamed_addr #3 {
  %2 = icmp ne i8* %0, null
  %3 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  %4 = icmp ne %struct._xmlCharEncodingAlias* %3, null
  %5 = and i1 %4, %2
  %6 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  %7 = icmp sgt i32 %6, 0
  %8 = and i1 %5, %7
  br i1 %8, label %9, label %42

9:                                                ; preds = %1
  %10 = sext i32 %6 to i64
  br label %11

11:                                               ; preds = %9, %39
  %12 = phi i64 [ 0, %9 ], [ %40, %39 ]
  %13 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %3, i64 %12, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = tail call i32 @strcmp(i8* %14, i8* nonnull %0) #13
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %39

17:                                               ; preds = %11
  %18 = trunc i64 %12 to i32
  %19 = and i64 %12, 4294967295
  %20 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %21 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %3, i64 %19, i32 0
  %22 = load i8*, i8** %21, align 8
  tail call void %20(i8* %22) #11
  %23 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %24 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  %25 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %24, i64 %19, i32 1
  %26 = load i8*, i8** %25, align 8
  tail call void %23(i8* %26) #11
  %27 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  %28 = add nsw i32 %27, -1
  store i32 %28, i32* @xmlCharEncodingAliasesNb, align 4
  %29 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  %30 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %29, i64 %19
  %31 = bitcast %struct._xmlCharEncodingAlias* %30 to i8*
  %32 = add nuw nsw i64 %12, 1
  %33 = and i64 %32, 4294967295
  %34 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %29, i64 %33
  %35 = bitcast %struct._xmlCharEncodingAlias* %34 to i8*
  %36 = sub nsw i32 %28, %18
  %37 = sext i32 %36 to i64
  %38 = shl nsw i64 %37, 4
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %35, i64 %38, i1 false)
  br label %42

39:                                               ; preds = %11
  %40 = add nuw nsw i64 %12, 1
  %41 = icmp slt i64 %40, %10
  br i1 %41, label %11, label %42

42:                                               ; preds = %39, %1, %17
  %43 = phi i32 [ 0, %17 ], [ -1, %1 ], [ -1, %39 ]
  ret i32 %43
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @xmlParseCharEncoding(i8* readonly) local_unnamed_addr #4 {
  %2 = alloca [100 x i8], align 16
  %3 = alloca [500 x i8], align 16
  %4 = getelementptr inbounds [500 x i8], [500 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 500, i8* nonnull %4) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 500, i1 false)
  %5 = icmp eq i8* %0, null
  br i1 %5, label %164, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %7) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 100, i1 false) #11
  %8 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  %9 = icmp eq %struct._xmlCharEncodingAlias* %8, null
  %10 = tail call i32** @__ctype_toupper_loc() #12
  br i1 %9, label %54, label %11

11:                                               ; preds = %6
  %12 = load i32*, i32** %10, align 8
  br label %13

13:                                               ; preds = %190, %11
  %14 = phi i64 [ 0, %11 ], [ %191, %190 ]
  %15 = phi i32 [ 0, %11 ], [ %192, %190 ]
  %16 = getelementptr inbounds i8, i8* %0, i64 %14
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i64
  %19 = getelementptr inbounds i32, i32* %12, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 %14
  store i8 %21, i8* %22, align 2
  %23 = and i32 %20, 255
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %13
  %26 = or i64 %14, 1
  %27 = icmp eq i64 %26, 99
  br i1 %27, label %31, label %180

28:                                               ; preds = %180, %13
  %29 = phi i64 [ %14, %13 ], [ %26, %180 ]
  %30 = trunc i64 %29 to i32
  br label %33

31:                                               ; preds = %25
  %32 = or i32 %15, 1
  br label %33

33:                                               ; preds = %31, %28
  %34 = phi i32 [ %30, %28 ], [ %32, %31 ]
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 %35
  store i8 0, i8* %36, align 1
  %37 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %54

39:                                               ; preds = %33
  %40 = sext i32 %37 to i64
  br label %43

41:                                               ; preds = %43
  %42 = icmp eq i64 %49, %40
  br i1 %42, label %54, label %43

43:                                               ; preds = %41, %39
  %44 = phi i64 [ 0, %39 ], [ %49, %41 ]
  %45 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %8, i64 %44, i32 1
  %46 = load i8*, i8** %45, align 8
  %47 = call i32 @strcmp(i8* %46, i8* nonnull %7) #13
  %48 = icmp eq i32 %47, 0
  %49 = add nuw nsw i64 %44, 1
  br i1 %48, label %50, label %41

50:                                               ; preds = %43
  %51 = and i64 %44, 4294967295
  %52 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %8, i64 %51, i32 0
  %53 = load i8*, i8** %52, align 8
  br label %54

54:                                               ; preds = %41, %6, %33, %50
  %55 = phi i8* [ null, %33 ], [ %53, %50 ], [ null, %6 ], [ null, %41 ]
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %7) #11
  %56 = icmp eq i8* %55, null
  %57 = select i1 %56, i8* %0, i8* %55
  br label %58

58:                                               ; preds = %177, %54
  %59 = phi i64 [ 0, %54 ], [ %178, %177 ]
  %60 = phi i32 [ 0, %54 ], [ %179, %177 ]
  %61 = load i32*, i32** %10, align 8
  %62 = getelementptr inbounds i8, i8* %57, i64 %59
  %63 = load i8, i8* %62, align 1
  %64 = sext i8 %63 to i64
  %65 = getelementptr inbounds i32, i32* %61, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds [500 x i8], [500 x i8]* %3, i64 0, i64 %59
  store i8 %67, i8* %68, align 2
  %69 = and i32 %66, 255
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %58
  %72 = or i64 %59, 1
  %73 = icmp eq i64 %72, 499
  br i1 %73, label %77, label %166

74:                                               ; preds = %166, %58
  %75 = phi i64 [ %59, %58 ], [ %72, %166 ]
  %76 = trunc i64 %75 to i32
  br label %79

77:                                               ; preds = %71
  %78 = or i32 %60, 1
  br label %79

79:                                               ; preds = %77, %74
  %80 = phi i32 [ %76, %74 ], [ %78, %77 ]
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds [500 x i8], [500 x i8]* %3, i64 0, i64 %81
  store i8 0, i8* %82, align 1
  %83 = load i8, i8* %4, align 16
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %164, label %85

85:                                               ; preds = %79
  %86 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 6)
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %164, label %88

88:                                               ; preds = %85
  %89 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i64 5)
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %164, label %91

91:                                               ; preds = %88
  %92 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i64 7)
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %164, label %94

94:                                               ; preds = %91
  %95 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i64 6)
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %164, label %97

97:                                               ; preds = %94
  %98 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i64 16)
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %164, label %100

100:                                              ; preds = %97
  %101 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i64 6)
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %164, label %103

103:                                              ; preds = %100
  %104 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i64 5)
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %164, label %106

106:                                              ; preds = %103
  %107 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i64 16)
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %164, label %109

109:                                              ; preds = %106
  %110 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i64 6)
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %164, label %112

112:                                              ; preds = %109
  %113 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i64 5)
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %164, label %115

115:                                              ; preds = %112
  %116 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i64 11)
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %164, label %118

118:                                              ; preds = %115
  %119 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12, i64 0, i64 0), i64 12)
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %164, label %121

121:                                              ; preds = %118
  %122 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13, i64 0, i64 0), i64 12)
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %164, label %124

124:                                              ; preds = %121
  %125 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), i64 11)
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %164, label %127

127:                                              ; preds = %124
  %128 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i64 0, i64 0), i64 12)
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %164, label %130

130:                                              ; preds = %127
  %131 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0), i64 12)
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %164, label %133

133:                                              ; preds = %130
  %134 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i64 0, i64 0), i64 11)
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %164, label %136

136:                                              ; preds = %133
  %137 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i64 0, i64 0), i64 11)
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %164, label %139

139:                                              ; preds = %136
  %140 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19, i64 0, i64 0), i64 11)
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %164, label %142

142:                                              ; preds = %139
  %143 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i64 0, i64 0), i64 11)
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %164, label %145

145:                                              ; preds = %142
  %146 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i64 11)
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %164, label %148

148:                                              ; preds = %145
  %149 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0), i64 11)
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %164, label %151

151:                                              ; preds = %148
  %152 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i64 0, i64 0), i64 11)
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %164, label %154

154:                                              ; preds = %151
  %155 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i64 0, i64 0), i64 12)
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %164, label %157

157:                                              ; preds = %154
  %158 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i64 0, i64 0), i64 10)
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %164, label %160

160:                                              ; preds = %157
  %161 = call i32 @bcmp(i8* nonnull %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i64 0, i64 0), i64 7)
  %162 = icmp eq i32 %161, 0
  %163 = select i1 %162, i32 21, i32 -1
  br label %164

164:                                              ; preds = %160, %157, %154, %151, %148, %145, %142, %139, %136, %133, %130, %127, %124, %121, %118, %115, %112, %109, %106, %103, %100, %97, %94, %91, %88, %85, %79, %1
  %165 = phi i32 [ 0, %1 ], [ 0, %79 ], [ 1, %85 ], [ 1, %88 ], [ 2, %91 ], [ 2, %94 ], [ 9, %97 ], [ 9, %100 ], [ 9, %103 ], [ 4, %106 ], [ 4, %109 ], [ 4, %112 ], [ 10, %115 ], [ 10, %118 ], [ 10, %121 ], [ 11, %124 ], [ 11, %127 ], [ 11, %130 ], [ 12, %133 ], [ 13, %136 ], [ 14, %139 ], [ 15, %142 ], [ 16, %145 ], [ 17, %148 ], [ 18, %151 ], [ 19, %154 ], [ 20, %157 ], [ %163, %160 ]
  call void @llvm.lifetime.end.p0i8(i64 500, i8* nonnull %4) #11
  ret i32 %165

166:                                              ; preds = %71
  %167 = load i32*, i32** %10, align 8
  %168 = getelementptr inbounds i8, i8* %57, i64 %72
  %169 = load i8, i8* %168, align 1
  %170 = sext i8 %169 to i64
  %171 = getelementptr inbounds i32, i32* %167, i64 %170
  %172 = load i32, i32* %171, align 4
  %173 = trunc i32 %172 to i8
  %174 = getelementptr inbounds [500 x i8], [500 x i8]* %3, i64 0, i64 %72
  store i8 %173, i8* %174, align 1
  %175 = and i32 %172, 255
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %74, label %177

177:                                              ; preds = %166
  %178 = add nuw nsw i64 %59, 2
  %179 = add nuw nsw i32 %60, 2
  br label %58

180:                                              ; preds = %25
  %181 = getelementptr inbounds i8, i8* %0, i64 %26
  %182 = load i8, i8* %181, align 1
  %183 = sext i8 %182 to i64
  %184 = getelementptr inbounds i32, i32* %12, i64 %183
  %185 = load i32, i32* %184, align 4
  %186 = trunc i32 %185 to i8
  %187 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 %26
  store i8 %186, i8* %187, align 1
  %188 = and i32 %185, 255
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %28, label %190

190:                                              ; preds = %180
  %191 = add nuw nsw i64 %14, 2
  %192 = add nuw nsw i32 %15, 2
  br label %13
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @xmlGetCharEncodingName(i32) local_unnamed_addr #7 {
  %2 = add i32 %0, -1
  %3 = icmp ult i32 %2, 21
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [21 x i8*], [21 x i8*]* @switch.table.xmlFindCharEncodingHandler, i64 0, i64 %5
  %7 = load i8*, i8** %6, align 8
  ret i8* %7

8:                                                ; preds = %1
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._xmlCharEncodingHandler* @xmlNewCharEncodingHandler(i8* readonly, i32 (i8*, i32*, i8*, i32*)*, i32 (i8*, i32*, i8*, i32*)*) local_unnamed_addr #3 {
  %4 = alloca [100 x i8], align 16
  %5 = alloca [500 x i8], align 16
  %6 = getelementptr inbounds [500 x i8], [500 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 500, i8* nonnull %6) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 500, i1 false)
  %7 = getelementptr inbounds [100 x i8], [100 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %7) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 100, i1 false) #11
  %8 = icmp eq i8* %0, null
  %9 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  %10 = icmp eq %struct._xmlCharEncodingAlias* %9, null
  %11 = or i1 %8, %10
  br i1 %11, label %56, label %12

12:                                               ; preds = %3
  %13 = tail call i32** @__ctype_toupper_loc() #12
  %14 = load i32*, i32** %13, align 8
  br label %15

15:                                               ; preds = %133, %12
  %16 = phi i64 [ 0, %12 ], [ %134, %133 ]
  %17 = phi i32 [ 0, %12 ], [ %135, %133 ]
  %18 = getelementptr inbounds i8, i8* %0, i64 %16
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i64
  %21 = getelementptr inbounds i32, i32* %14, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds [100 x i8], [100 x i8]* %4, i64 0, i64 %16
  store i8 %23, i8* %24, align 2
  %25 = and i32 %22, 255
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %15
  %28 = or i64 %16, 1
  %29 = icmp eq i64 %28, 99
  br i1 %29, label %33, label %123

30:                                               ; preds = %123, %15
  %31 = phi i64 [ %16, %15 ], [ %28, %123 ]
  %32 = trunc i64 %31 to i32
  br label %35

33:                                               ; preds = %27
  %34 = or i32 %17, 1
  br label %35

35:                                               ; preds = %33, %30
  %36 = phi i32 [ %32, %30 ], [ %34, %33 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [100 x i8], [100 x i8]* %4, i64 0, i64 %37
  store i8 0, i8* %38, align 1
  %39 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %56

41:                                               ; preds = %35
  %42 = sext i32 %39 to i64
  br label %45

43:                                               ; preds = %45
  %44 = icmp eq i64 %51, %42
  br i1 %44, label %56, label %45

45:                                               ; preds = %43, %41
  %46 = phi i64 [ 0, %41 ], [ %51, %43 ]
  %47 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %9, i64 %46, i32 1
  %48 = load i8*, i8** %47, align 8
  %49 = call i32 @strcmp(i8* %48, i8* nonnull %7) #13
  %50 = icmp eq i32 %49, 0
  %51 = add nuw nsw i64 %46, 1
  br i1 %50, label %52, label %43

52:                                               ; preds = %45
  %53 = and i64 %46, 4294967295
  %54 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %9, i64 %53, i32 0
  %55 = load i8*, i8** %54, align 8
  br label %56

56:                                               ; preds = %43, %3, %35, %52
  %57 = phi i8* [ %55, %52 ], [ null, %3 ], [ null, %35 ], [ null, %43 ]
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %7) #11
  %58 = icmp eq i8* %57, null
  %59 = select i1 %58, i8* %0, i8* %57
  %60 = icmp eq i8* %59, null
  br i1 %60, label %63, label %61

61:                                               ; preds = %56
  %62 = tail call i32** @__ctype_toupper_loc() #12
  br label %64

63:                                               ; preds = %56
  tail call void (void (i8*, %struct._xmlError*)*, void (i8*, i8*, ...)*, i8*, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, ...) @__xmlRaiseError(void (i8*, %struct._xmlError*)* null, void (i8*, i8*, ...)* null, i8* null, i8* null, i8* null, i32 27, i32 6000, i32 3, i8* null, i32 0, i8* null, i8* null, i8* null, i32 0, i32 0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.29, i64 0, i64 0), i8* null) #11
  br label %107

64:                                               ; preds = %120, %61
  %65 = phi i64 [ 0, %61 ], [ %121, %120 ]
  %66 = phi i32 [ 0, %61 ], [ %122, %120 ]
  %67 = load i32*, i32** %62, align 8
  %68 = getelementptr inbounds i8, i8* %59, i64 %65
  %69 = load i8, i8* %68, align 1
  %70 = sext i8 %69 to i64
  %71 = getelementptr inbounds i32, i32* %67, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds [500 x i8], [500 x i8]* %5, i64 0, i64 %65
  store i8 %73, i8* %74, align 2
  %75 = and i32 %72, 255
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %80, label %77

77:                                               ; preds = %64
  %78 = or i64 %65, 1
  %79 = icmp eq i64 %78, 499
  br i1 %79, label %83, label %109

80:                                               ; preds = %109, %64
  %81 = phi i64 [ %65, %64 ], [ %78, %109 ]
  %82 = trunc i64 %81 to i32
  br label %85

83:                                               ; preds = %77
  %84 = or i32 %66, 1
  br label %85

85:                                               ; preds = %83, %80
  %86 = phi i32 [ %82, %80 ], [ %84, %83 ]
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds [500 x i8], [500 x i8]* %5, i64 0, i64 %87
  store i8 0, i8* %88, align 1
  %89 = load i8* (i8*)*, i8* (i8*)** @xmlMemStrdup, align 8
  %90 = call i8* %89(i8* nonnull %6) #11
  %91 = icmp eq i8* %90, null
  br i1 %91, label %92, label %93

92:                                               ; preds = %85
  call void @__xmlSimpleError(i32 27, i32 2, %struct._xmlNode* null, i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.30, i64 0, i64 0)) #11
  br label %107

93:                                               ; preds = %85
  %94 = load i8* (i64)*, i8* (i64)** @xmlMalloc, align 8
  %95 = call i8* %94(i64 40) #11
  %96 = bitcast i8* %95 to %struct._xmlCharEncodingHandler*
  %97 = icmp eq i8* %95, null
  br i1 %97, label %98, label %100

98:                                               ; preds = %93
  %99 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  call void %99(i8* nonnull %90) #11
  call void @__xmlSimpleError(i32 27, i32 2, %struct._xmlNode* null, i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.30, i64 0, i64 0)) #11
  br label %107

100:                                              ; preds = %93
  %101 = getelementptr inbounds i8, i8* %95, i64 8
  %102 = bitcast i8* %101 to i32 (i8*, i32*, i8*, i32*)**
  store i32 (i8*, i32*, i8*, i32*)* %1, i32 (i8*, i32*, i8*, i32*)** %102, align 8
  %103 = getelementptr inbounds i8, i8* %95, i64 16
  %104 = bitcast i8* %103 to i32 (i8*, i32*, i8*, i32*)**
  store i32 (i8*, i32*, i8*, i32*)* %2, i32 (i8*, i32*, i8*, i32*)** %104, align 8
  %105 = bitcast i8* %95 to i8**
  store i8* %90, i8** %105, align 8
  %106 = getelementptr inbounds i8, i8* %95, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 16, i1 false)
  call void @xmlRegisterCharEncodingHandler(%struct._xmlCharEncodingHandler* nonnull %96)
  br label %107

107:                                              ; preds = %100, %98, %92, %63
  %108 = phi %struct._xmlCharEncodingHandler* [ null, %63 ], [ null, %92 ], [ null, %98 ], [ %96, %100 ]
  call void @llvm.lifetime.end.p0i8(i64 500, i8* nonnull %6) #11
  ret %struct._xmlCharEncodingHandler* %108

109:                                              ; preds = %77
  %110 = load i32*, i32** %62, align 8
  %111 = getelementptr inbounds i8, i8* %59, i64 %78
  %112 = load i8, i8* %111, align 1
  %113 = sext i8 %112 to i64
  %114 = getelementptr inbounds i32, i32* %110, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds [500 x i8], [500 x i8]* %5, i64 0, i64 %78
  store i8 %116, i8* %117, align 1
  %118 = and i32 %115, 255
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %80, label %120

120:                                              ; preds = %109
  %121 = add nuw nsw i64 %65, 2
  %122 = add nuw nsw i32 %66, 2
  br label %64

123:                                              ; preds = %27
  %124 = getelementptr inbounds i8, i8* %0, i64 %28
  %125 = load i8, i8* %124, align 1
  %126 = sext i8 %125 to i64
  %127 = getelementptr inbounds i32, i32* %14, i64 %126
  %128 = load i32, i32* %127, align 4
  %129 = trunc i32 %128 to i8
  %130 = getelementptr inbounds [100 x i8], [100 x i8]* %4, i64 0, i64 %28
  store i8 %129, i8* %130, align 1
  %131 = and i32 %128, 255
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %30, label %133

133:                                              ; preds = %123
  %134 = add nuw nsw i64 %16, 2
  %135 = add nuw nsw i32 %17, 2
  br label %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @xmlRegisterCharEncodingHandler(%struct._xmlCharEncodingHandler*) local_unnamed_addr #3 {
  %2 = load %struct._xmlCharEncodingHandler**, %struct._xmlCharEncodingHandler*** @handlers, align 8
  %3 = icmp eq %struct._xmlCharEncodingHandler** %2, null
  br i1 %3, label %4, label %6

4:                                                ; preds = %1
  tail call void @xmlInitCharEncodingHandlers()
  %5 = load %struct._xmlCharEncodingHandler**, %struct._xmlCharEncodingHandler*** @handlers, align 8
  br label %6

6:                                                ; preds = %4, %1
  %7 = phi %struct._xmlCharEncodingHandler** [ %5, %4 ], [ %2, %1 ]
  %8 = icmp eq %struct._xmlCharEncodingHandler* %0, null
  %9 = icmp eq %struct._xmlCharEncodingHandler** %7, null
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %6
  tail call void (void (i8*, %struct._xmlError*)*, void (i8*, i8*, ...)*, i8*, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, ...) @__xmlRaiseError(void (i8*, %struct._xmlError*)* null, void (i8*, i8*, ...)* null, i8* null, i8* null, i8* null, i32 27, i32 6001, i32 3, i8* null, i32 0, i8* null, i8* null, i8* null, i32 0, i32 0, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.38, i64 0, i64 0), i8* null) #11
  br label %20

12:                                               ; preds = %6
  %13 = load i32, i32* @nbCharEncodingHandler, align 4
  %14 = icmp sgt i32 %13, 49
  br i1 %14, label %15, label %16

15:                                               ; preds = %12
  tail call void (void (i8*, %struct._xmlError*)*, void (i8*, i8*, ...)*, i8*, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, ...) @__xmlRaiseError(void (i8*, %struct._xmlError*)* null, void (i8*, i8*, ...)* null, i8* null, i8* null, i8* null, i32 27, i32 6002, i32 3, i8* null, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.40, i64 0, i64 0), i8* null, i8* null, i32 0, i32 0, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.40, i64 0, i64 0)) #11
  br label %20

16:                                               ; preds = %12
  %17 = add nsw i32 %13, 1
  store i32 %17, i32* @nbCharEncodingHandler, align 4
  %18 = sext i32 %13 to i64
  %19 = getelementptr inbounds %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %7, i64 %18
  store %struct._xmlCharEncodingHandler* %0, %struct._xmlCharEncodingHandler** %19, align 8
  br label %30

20:                                               ; preds = %15, %11
  br i1 %8, label %30, label %21

21:                                               ; preds = %20
  %22 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %27, label %25

25:                                               ; preds = %21
  %26 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %26(i8* nonnull %23) #11
  br label %27

27:                                               ; preds = %21, %25
  %28 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %29 = bitcast %struct._xmlCharEncodingHandler* %0 to i8*
  tail call void %28(i8* nonnull %29) #11
  br label %30

30:                                               ; preds = %20, %16, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @xmlInitCharEncodingHandlers() local_unnamed_addr #3 {
  %1 = load %struct._xmlCharEncodingHandler**, %struct._xmlCharEncodingHandler*** @handlers, align 8
  %2 = icmp eq %struct._xmlCharEncodingHandler** %1, null
  br i1 %2, label %3, label %17

3:                                                ; preds = %0
  %4 = load i8* (i64)*, i8* (i64)** @xmlMalloc, align 8
  %5 = tail call i8* %4(i64 400) #11
  store i8* %5, i8** bitcast (%struct._xmlCharEncodingHandler*** @handlers to i8**), align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @__xmlSimpleError(i32 27, i32 2, %struct._xmlNode* null, i8* null, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.32, i64 0, i64 0)) #11
  br label %17

8:                                                ; preds = %3
  %9 = tail call %struct._xmlCharEncodingHandler* @xmlNewCharEncodingHandler(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32 (i8*, i32*, i8*, i32*)* nonnull @UTF8ToUTF8, i32 (i8*, i32*, i8*, i32*)* nonnull @UTF8ToUTF8)
  %10 = tail call %struct._xmlCharEncodingHandler* @xmlNewCharEncodingHandler(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i64 0, i64 0), i32 (i8*, i32*, i8*, i32*)* nonnull @UTF16LEToUTF8, i32 (i8*, i32*, i8*, i32*)* nonnull @UTF8ToUTF16LE)
  store %struct._xmlCharEncodingHandler* %10, %struct._xmlCharEncodingHandler** @xmlUTF16LEHandler, align 8
  %11 = tail call %struct._xmlCharEncodingHandler* @xmlNewCharEncodingHandler(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.34, i64 0, i64 0), i32 (i8*, i32*, i8*, i32*)* nonnull @UTF16BEToUTF8, i32 (i8*, i32*, i8*, i32*)* nonnull @UTF8ToUTF16BE)
  store %struct._xmlCharEncodingHandler* %11, %struct._xmlCharEncodingHandler** @xmlUTF16BEHandler, align 8
  %12 = tail call %struct._xmlCharEncodingHandler* @xmlNewCharEncodingHandler(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i32 (i8*, i32*, i8*, i32*)* nonnull @UTF16LEToUTF8, i32 (i8*, i32*, i8*, i32*)* nonnull @UTF8ToUTF16)
  %13 = tail call %struct._xmlCharEncodingHandler* @xmlNewCharEncodingHandler(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i32 (i8*, i32*, i8*, i32*)* nonnull @isolat1ToUTF8, i32 (i8*, i32*, i8*, i32*)* nonnull @UTF8Toisolat1)
  %14 = tail call %struct._xmlCharEncodingHandler* @xmlNewCharEncodingHandler(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i64 0, i64 0), i32 (i8*, i32*, i8*, i32*)* nonnull @asciiToUTF8, i32 (i8*, i32*, i8*, i32*)* nonnull @UTF8Toascii)
  %15 = tail call %struct._xmlCharEncodingHandler* @xmlNewCharEncodingHandler(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i64 0, i64 0), i32 (i8*, i32*, i8*, i32*)* nonnull @asciiToUTF8, i32 (i8*, i32*, i8*, i32*)* nonnull @UTF8Toascii)
  %16 = tail call %struct._xmlCharEncodingHandler* @xmlNewCharEncodingHandler(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i64 0, i64 0), i32 (i8*, i32*, i8*, i32*)* null, i32 (i8*, i32*, i8*, i32*)* nonnull @UTF8ToHtml)
  br label %17

17:                                               ; preds = %0, %8, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @UTF8ToUTF8(i8*, i32*, i8* readonly, i32*) #3 {
  %5 = icmp eq i8* %0, null
  %6 = icmp eq i32* %1, null
  %7 = or i1 %5, %6
  %8 = icmp eq i32* %3, null
  %9 = or i1 %7, %8
  br i1 %9, label %22, label %10

10:                                               ; preds = %4
  %11 = icmp eq i8* %2, null
  br i1 %11, label %12, label %13

12:                                               ; preds = %10
  store i32 0, i32* %1, align 4
  store i32 0, i32* %3, align 4
  br label %22

13:                                               ; preds = %10
  %14 = load i32, i32* %1, align 4
  %15 = load i32, i32* %3, align 4
  %16 = icmp sgt i32 %14, %15
  %17 = select i1 %16, i32 %15, i32 %14
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = sext i32 %17 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %0, i8* nonnull align 1 %2, i64 %20, i1 false)
  store i32 %17, i32* %1, align 4
  store i32 %17, i32* %3, align 4
  %21 = load i32, i32* %1, align 4
  br label %22

22:                                               ; preds = %13, %4, %19, %12
  %23 = phi i32 [ 0, %12 ], [ %21, %19 ], [ -1, %4 ], [ -1, %13 ]
  ret i32 %23
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @UTF16LEToUTF8(i8*, i32* nocapture, i8*, i32* nocapture) #0 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i32, i32* %1, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  store i32 0, i32* %3, align 4
  br label %117

9:                                                ; preds = %4
  %10 = sext i32 %6 to i64
  %11 = getelementptr inbounds i8, i8* %0, i64 %10
  %12 = load i32, i32* %3, align 4
  %13 = srem i32 %12, 2
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = add nsw i32 %12, -1
  store i32 %16, i32* %3, align 4
  br label %17

17:                                               ; preds = %15, %9
  %18 = phi i32 [ %16, %15 ], [ %12, %9 ]
  %19 = sdiv i32 %18, 2
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i16, i16* %5, i64 %20
  %22 = icmp ugt i16* %21, %5
  %23 = ptrtoint i8* %0 to i64
  br i1 %22, label %24, label %107

24:                                               ; preds = %17, %98
  %25 = phi i16* [ %61, %98 ], [ %5, %17 ]
  %26 = phi i8* [ %100, %98 ], [ %2, %17 ]
  %27 = phi i8* [ %99, %98 ], [ %0, %17 ]
  %28 = ptrtoint i8* %27 to i64
  %29 = sub i64 %28, %23
  %30 = add nsw i64 %29, 5
  %31 = load i32, i32* %1, align 4
  %32 = sext i32 %31 to i64
  %33 = icmp slt i64 %30, %32
  br i1 %33, label %34, label %105

34:                                               ; preds = %24
  %35 = getelementptr inbounds i16, i16* %25, i64 1
  %36 = load i16, i16* %25, align 2
  %37 = zext i16 %36 to i32
  %38 = and i32 %37, 64512
  %39 = icmp eq i32 %38, 55296
  br i1 %39, label %40, label %60

40:                                               ; preds = %34
  %41 = icmp ult i16* %35, %21
  br i1 %41, label %42, label %105

42:                                               ; preds = %40
  %43 = load i16, i16* %35, align 2
  %44 = zext i16 %43 to i32
  %45 = and i32 %44, 64512
  %46 = icmp eq i32 %45, 56320
  br i1 %46, label %47, label %54

47:                                               ; preds = %42
  %48 = getelementptr inbounds i16, i16* %25, i64 2
  %49 = shl nuw nsw i32 %37, 10
  %50 = and i32 %49, 1047552
  %51 = and i32 %44, 1023
  %52 = or i32 %51, %50
  %53 = add nuw nsw i32 %52, 65536
  br label %60

54:                                               ; preds = %42
  %55 = trunc i64 %29 to i32
  store i32 %55, i32* %1, align 4
  %56 = ptrtoint i8* %26 to i64
  %57 = ptrtoint i8* %2 to i64
  %58 = sub i64 %56, %57
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %3, align 4
  br label %117

60:                                               ; preds = %47, %34
  %61 = phi i16* [ %48, %47 ], [ %35, %34 ]
  %62 = phi i32 [ %53, %47 ], [ %37, %34 ]
  %63 = icmp ult i8* %27, %11
  br i1 %63, label %64, label %105

64:                                               ; preds = %60
  %65 = icmp ult i32 %62, 128
  br i1 %65, label %66, label %69

66:                                               ; preds = %64
  %67 = trunc i32 %62 to i8
  store i8 %67, i8* %27, align 1
  %68 = getelementptr inbounds i8, i8* %27, i64 1
  br label %98

69:                                               ; preds = %64
  %70 = icmp ult i32 %62, 2048
  br i1 %70, label %77, label %71

71:                                               ; preds = %69
  %72 = icmp ult i32 %62, 65536
  %73 = select i1 %72, i32 12, i32 18
  %74 = select i1 %72, i8 15, i8 7
  %75 = select i1 %72, i8 -32, i8 -16
  %76 = select i1 %72, i32 6, i32 12
  br label %77

77:                                               ; preds = %71, %69
  %78 = phi i32 [ 6, %69 ], [ %73, %71 ]
  %79 = phi i8 [ 31, %69 ], [ %74, %71 ]
  %80 = phi i8 [ -64, %69 ], [ %75, %71 ]
  %81 = phi i32 [ 0, %69 ], [ %76, %71 ]
  %82 = lshr i32 %62, %78
  %83 = trunc i32 %82 to i8
  %84 = and i8 %79, %83
  %85 = or i8 %84, %80
  store i8 %85, i8* %27, align 1
  %86 = getelementptr inbounds i8, i8* %27, i64 1
  %87 = icmp ult i8* %86, %11
  br i1 %87, label %88, label %98

88:                                               ; preds = %77
  %89 = lshr i32 %62, %81
  %90 = trunc i32 %89 to i8
  %91 = and i8 %90, 63
  %92 = or i8 %91, -128
  store i8 %92, i8* %86, align 1
  %93 = add nsw i32 %81, -6
  %94 = getelementptr inbounds i8, i8* %27, i64 2
  %95 = icmp sgt i32 %93, -1
  %96 = icmp ult i8* %94, %11
  %97 = and i1 %95, %96
  br i1 %97, label %119, label %98

98:                                               ; preds = %88, %119, %129, %66, %77
  %99 = phi i8* [ %86, %77 ], [ %68, %66 ], [ %94, %88 ], [ %125, %119 ], [ %134, %129 ]
  %100 = bitcast i16* %61 to i8*
  %101 = icmp ult i16* %61, %21
  br i1 %101, label %24, label %102

102:                                              ; preds = %98
  %103 = bitcast i16* %61 to i8*
  %104 = ptrtoint i8* %99 to i64
  br label %107

105:                                              ; preds = %40, %60, %24
  %106 = ptrtoint i8* %27 to i64
  br label %107

107:                                              ; preds = %17, %105, %102
  %108 = phi i64 [ %104, %102 ], [ %106, %105 ], [ %23, %17 ]
  %109 = phi i8* [ %103, %102 ], [ %26, %105 ], [ %2, %17 ]
  %110 = sub i64 %108, %23
  %111 = trunc i64 %110 to i32
  store i32 %111, i32* %1, align 4
  %112 = ptrtoint i8* %109 to i64
  %113 = ptrtoint i8* %2 to i64
  %114 = sub i64 %112, %113
  %115 = trunc i64 %114 to i32
  store i32 %115, i32* %3, align 4
  %116 = load i32, i32* %1, align 4
  br label %117

117:                                              ; preds = %107, %54, %8
  %118 = phi i32 [ 0, %8 ], [ %116, %107 ], [ -2, %54 ]
  ret i32 %118

119:                                              ; preds = %88
  %120 = lshr i32 %62, %93
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 63
  %123 = or i8 %122, -128
  store i8 %123, i8* %94, align 1
  %124 = add nsw i32 %81, -12
  %125 = getelementptr inbounds i8, i8* %27, i64 3
  %126 = icmp sgt i32 %124, -1
  %127 = icmp ult i8* %125, %11
  %128 = and i1 %126, %127
  br i1 %128, label %129, label %98

129:                                              ; preds = %119
  %130 = lshr i32 %62, %124
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 63
  %133 = or i8 %132, -128
  store i8 %133, i8* %125, align 1
  %134 = getelementptr inbounds i8, i8* %27, i64 4
  br label %98
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @UTF8ToUTF16LE(i8*, i32*, i8*, i32*) #0 {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp eq i8* %0, null
  %7 = icmp eq i32* %1, null
  %8 = or i1 %6, %7
  %9 = icmp eq i32* %3, null
  %10 = or i1 %8, %9
  br i1 %10, label %129, label %11

11:                                               ; preds = %4
  %12 = icmp eq i8* %2, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %11
  store i32 0, i32* %1, align 4
  store i32 0, i32* %3, align 4
  br label %129

14:                                               ; preds = %11
  %15 = load i32, i32* %3, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %2, i64 %16
  %18 = load i32, i32* %1, align 4
  %19 = sdiv i32 %18, 2
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i16, i16* %5, i64 %20
  %22 = icmp sgt i32 %15, 0
  br i1 %22, label %23, label %117

23:                                               ; preds = %14
  %24 = ptrtoint i8* %17 to i64
  br label %25

25:                                               ; preds = %23, %113
  %26 = phi i16* [ %5, %23 ], [ %115, %113 ]
  %27 = phi i8* [ %2, %23 ], [ %114, %113 ]
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  %29 = load i8, i8* %27, align 1
  %30 = zext i8 %29 to i32
  %31 = icmp sgt i8 %29, -1
  br i1 %31, label %64, label %32

32:                                               ; preds = %25
  %33 = icmp ult i8 %29, -64
  br i1 %33, label %34, label %43

34:                                               ; preds = %32
  %35 = ptrtoint i16* %26 to i64
  %36 = ptrtoint i8* %0 to i64
  %37 = sub i64 %35, %36
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %1, align 4
  %39 = ptrtoint i8* %27 to i64
  %40 = ptrtoint i8* %2 to i64
  %41 = sub i64 %39, %40
  %42 = trunc i64 %41 to i32
  store i32 %42, i32* %3, align 4
  br label %129

43:                                               ; preds = %32
  %44 = icmp ult i8 %29, -32
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = and i32 %30, 31
  br label %64

47:                                               ; preds = %43
  %48 = icmp ult i8 %29, -16
  br i1 %48, label %49, label %51

49:                                               ; preds = %47
  %50 = and i32 %30, 15
  br label %64

51:                                               ; preds = %47
  %52 = icmp ult i8 %29, -8
  br i1 %52, label %53, label %55

53:                                               ; preds = %51
  %54 = and i32 %30, 7
  br label %64

55:                                               ; preds = %51
  %56 = ptrtoint i16* %26 to i64
  %57 = ptrtoint i8* %0 to i64
  %58 = sub i64 %56, %57
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %1, align 4
  %60 = ptrtoint i8* %27 to i64
  %61 = ptrtoint i8* %2 to i64
  %62 = sub i64 %60, %61
  %63 = trunc i64 %62 to i32
  store i32 %63, i32* %3, align 4
  br label %129

64:                                               ; preds = %25, %49, %53, %45
  %65 = phi i32 [ %46, %45 ], [ %50, %49 ], [ %54, %53 ], [ %30, %25 ]
  %66 = phi i32 [ 1, %45 ], [ 2, %49 ], [ 3, %53 ], [ 0, %25 ]
  %67 = ptrtoint i8* %28 to i64
  %68 = sub i64 %24, %67
  %69 = zext i32 %66 to i64
  %70 = icmp slt i64 %68, %69
  br i1 %70, label %117, label %71

71:                                               ; preds = %64
  %72 = icmp ne i32 %66, 0
  %73 = icmp ult i8* %28, %17
  %74 = and i1 %73, %72
  br i1 %74, label %75, label %92

75:                                               ; preds = %71
  %76 = getelementptr inbounds i8, i8* %27, i64 2
  %77 = load i8, i8* %28, align 1
  %78 = zext i8 %77 to i32
  %79 = and i32 %78, 192
  %80 = icmp eq i32 %79, 128
  br i1 %80, label %81, label %88

81:                                               ; preds = %75
  %82 = shl nuw nsw i32 %65, 6
  %83 = and i32 %78, 63
  %84 = or i32 %83, %82
  %85 = icmp ne i32 %66, 1
  %86 = icmp ult i8* %76, %17
  %87 = and i1 %86, %85
  br i1 %87, label %131, label %88

88:                                               ; preds = %150, %144, %137, %131, %75, %81
  %89 = phi i8* [ %76, %75 ], [ %76, %81 ], [ %132, %131 ], [ %132, %137 ], [ %145, %144 ], [ %145, %150 ]
  %90 = phi i32 [ %65, %75 ], [ %84, %81 ], [ %84, %131 ], [ %140, %137 ], [ %140, %144 ], [ %153, %150 ]
  %91 = icmp ult i32 %90, 65536
  br i1 %91, label %92, label %99

92:                                               ; preds = %71, %88
  %93 = phi i8* [ %89, %88 ], [ %28, %71 ]
  %94 = phi i32 [ %90, %88 ], [ %65, %71 ]
  %95 = icmp ult i16* %26, %21
  br i1 %95, label %96, label %117

96:                                               ; preds = %92
  %97 = trunc i32 %94 to i16
  %98 = getelementptr inbounds i16, i16* %26, i64 1
  store i16 %97, i16* %26, align 2
  br label %113

99:                                               ; preds = %88
  %100 = icmp ult i32 %90, 1114112
  %101 = getelementptr inbounds i16, i16* %26, i64 1
  %102 = icmp ult i16* %101, %21
  %103 = and i1 %102, %100
  br i1 %103, label %104, label %117

104:                                              ; preds = %99
  %105 = add nsw i32 %90, -65536
  %106 = lshr i32 %105, 10
  %107 = trunc i32 %106 to i16
  %108 = or i16 %107, -10240
  store i16 %108, i16* %26, align 2
  %109 = trunc i32 %105 to i16
  %110 = and i16 %109, 1023
  %111 = or i16 %110, -9216
  %112 = getelementptr inbounds i16, i16* %26, i64 2
  store i16 %111, i16* %101, align 2
  br label %113

113:                                              ; preds = %104, %96
  %114 = phi i8* [ %93, %96 ], [ %89, %104 ]
  %115 = phi i16* [ %98, %96 ], [ %112, %104 ]
  %116 = icmp ult i8* %114, %17
  br i1 %116, label %25, label %117

117:                                              ; preds = %113, %64, %99, %92, %14
  %118 = phi i8* [ %2, %14 ], [ %27, %92 ], [ %27, %99 ], [ %27, %64 ], [ %114, %113 ]
  %119 = phi i16* [ %5, %14 ], [ %26, %92 ], [ %26, %99 ], [ %26, %64 ], [ %115, %113 ]
  %120 = ptrtoint i16* %119 to i64
  %121 = ptrtoint i8* %0 to i64
  %122 = sub i64 %120, %121
  %123 = trunc i64 %122 to i32
  store i32 %123, i32* %1, align 4
  %124 = ptrtoint i8* %118 to i64
  %125 = ptrtoint i8* %2 to i64
  %126 = sub i64 %124, %125
  %127 = trunc i64 %126 to i32
  store i32 %127, i32* %3, align 4
  %128 = load i32, i32* %1, align 4
  br label %129

129:                                              ; preds = %4, %117, %55, %34, %13
  %130 = phi i32 [ 0, %13 ], [ %128, %117 ], [ -2, %34 ], [ -2, %55 ], [ -1, %4 ]
  ret i32 %130

131:                                              ; preds = %81
  %132 = getelementptr inbounds i8, i8* %27, i64 3
  %133 = load i8, i8* %76, align 1
  %134 = zext i8 %133 to i32
  %135 = and i32 %134, 192
  %136 = icmp eq i32 %135, 128
  br i1 %136, label %137, label %88

137:                                              ; preds = %131
  %138 = shl nuw nsw i32 %84, 6
  %139 = and i32 %134, 63
  %140 = or i32 %139, %138
  %141 = icmp ne i32 %66, 2
  %142 = icmp ult i8* %132, %17
  %143 = and i1 %142, %141
  br i1 %143, label %144, label %88

144:                                              ; preds = %137
  %145 = getelementptr inbounds i8, i8* %27, i64 4
  %146 = load i8, i8* %132, align 1
  %147 = zext i8 %146 to i32
  %148 = and i32 %147, 192
  %149 = icmp eq i32 %148, 128
  br i1 %149, label %150, label %88

150:                                              ; preds = %144
  %151 = shl nuw nsw i32 %140, 6
  %152 = and i32 %147, 63
  %153 = or i32 %152, %151
  br label %88
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @UTF16BEToUTF8(i8*, i32* nocapture, i8*, i32* nocapture) #0 {
  %5 = load i32, i32* %1, align 4
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = bitcast i8* %2 to i16*
  %9 = load i32, i32* %3, align 4
  %10 = srem i32 %9, 2
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %14

12:                                               ; preds = %4
  %13 = add nsw i32 %9, -1
  store i32 %13, i32* %3, align 4
  br label %14

14:                                               ; preds = %12, %4
  %15 = phi i32 [ %13, %12 ], [ %9, %4 ]
  %16 = sdiv i32 %15, 2
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i16, i16* %8, i64 %17
  %19 = icmp ugt i16* %18, %8
  br i1 %19, label %20, label %117

20:                                               ; preds = %14, %111
  %21 = phi i16* [ %74, %111 ], [ %8, %14 ]
  %22 = phi i8* [ %113, %111 ], [ %2, %14 ]
  %23 = phi i8* [ %112, %111 ], [ %0, %14 ]
  %24 = bitcast i16* %21 to i8*
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  %26 = load i8, i8* %24, align 1
  %27 = zext i8 %26 to i32
  %28 = shl nuw nsw i32 %27, 8
  %29 = load i8, i8* %25, align 1
  %30 = zext i8 %29 to i32
  %31 = or i32 %28, %30
  %32 = getelementptr inbounds i16, i16* %21, i64 1
  %33 = and i32 %27, 252
  %34 = icmp eq i32 %33, 216
  br i1 %34, label %35, label %73

35:                                               ; preds = %20
  %36 = icmp ult i16* %32, %18
  br i1 %36, label %46, label %37

37:                                               ; preds = %35
  %38 = ptrtoint i8* %23 to i64
  %39 = ptrtoint i8* %0 to i64
  %40 = sub i64 %38, %39
  %41 = trunc i64 %40 to i32
  store i32 %41, i32* %1, align 4
  %42 = ptrtoint i8* %22 to i64
  %43 = ptrtoint i8* %2 to i64
  %44 = sub i64 %42, %43
  %45 = trunc i64 %44 to i32
  store i32 %45, i32* %3, align 4
  br label %129

46:                                               ; preds = %35
  %47 = bitcast i16* %32 to i8*
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = and i32 %49, 252
  %51 = icmp eq i32 %50, 220
  br i1 %51, label %52, label %64

52:                                               ; preds = %46
  %53 = getelementptr inbounds i16, i16* %21, i64 2
  %54 = getelementptr inbounds i8, i8* %47, i64 1
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = shl nuw nsw i32 %49, 8
  %58 = shl nuw nsw i32 %31, 10
  %59 = and i32 %58, 1047552
  %60 = and i32 %57, 768
  %61 = or i32 %60, %59
  %62 = or i32 %61, %56
  %63 = add nuw nsw i32 %62, 65536
  br label %73

64:                                               ; preds = %46
  %65 = ptrtoint i8* %23 to i64
  %66 = ptrtoint i8* %0 to i64
  %67 = sub i64 %65, %66
  %68 = trunc i64 %67 to i32
  store i32 %68, i32* %1, align 4
  %69 = ptrtoint i8* %22 to i64
  %70 = ptrtoint i8* %2 to i64
  %71 = sub i64 %69, %70
  %72 = trunc i64 %71 to i32
  store i32 %72, i32* %3, align 4
  br label %129

73:                                               ; preds = %52, %20
  %74 = phi i16* [ %53, %52 ], [ %32, %20 ]
  %75 = phi i32 [ %63, %52 ], [ %31, %20 ]
  %76 = icmp ult i8* %23, %7
  br i1 %76, label %77, label %117

77:                                               ; preds = %73
  %78 = icmp ult i32 %75, 128
  br i1 %78, label %79, label %82

79:                                               ; preds = %77
  %80 = trunc i32 %75 to i8
  store i8 %80, i8* %23, align 1
  %81 = getelementptr inbounds i8, i8* %23, i64 1
  br label %111

82:                                               ; preds = %77
  %83 = icmp ult i32 %75, 2048
  br i1 %83, label %90, label %84

84:                                               ; preds = %82
  %85 = icmp ult i32 %75, 65536
  %86 = select i1 %85, i32 12, i32 18
  %87 = select i1 %85, i8 15, i8 7
  %88 = select i1 %85, i8 -32, i8 -16
  %89 = select i1 %85, i32 6, i32 12
  br label %90

90:                                               ; preds = %84, %82
  %91 = phi i32 [ 6, %82 ], [ %86, %84 ]
  %92 = phi i8 [ 31, %82 ], [ %87, %84 ]
  %93 = phi i8 [ -64, %82 ], [ %88, %84 ]
  %94 = phi i32 [ 0, %82 ], [ %89, %84 ]
  %95 = lshr i32 %75, %91
  %96 = trunc i32 %95 to i8
  %97 = and i8 %92, %96
  %98 = or i8 %97, %93
  store i8 %98, i8* %23, align 1
  %99 = getelementptr inbounds i8, i8* %23, i64 1
  %100 = icmp ult i8* %99, %7
  br i1 %100, label %101, label %111

101:                                              ; preds = %90
  %102 = lshr i32 %75, %94
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 63
  %105 = or i8 %104, -128
  store i8 %105, i8* %99, align 1
  %106 = add nsw i32 %94, -6
  %107 = getelementptr inbounds i8, i8* %23, i64 2
  %108 = icmp sgt i32 %106, -1
  %109 = icmp ult i8* %107, %7
  %110 = and i1 %108, %109
  br i1 %110, label %131, label %111

111:                                              ; preds = %101, %131, %141, %79, %90
  %112 = phi i8* [ %99, %90 ], [ %81, %79 ], [ %107, %101 ], [ %137, %131 ], [ %146, %141 ]
  %113 = bitcast i16* %74 to i8*
  %114 = icmp ult i16* %74, %18
  br i1 %114, label %20, label %115

115:                                              ; preds = %111
  %116 = bitcast i16* %74 to i8*
  br label %117

117:                                              ; preds = %73, %115, %14
  %118 = phi i8* [ %0, %14 ], [ %112, %115 ], [ %23, %73 ]
  %119 = phi i8* [ %2, %14 ], [ %116, %115 ], [ %22, %73 ]
  %120 = ptrtoint i8* %118 to i64
  %121 = ptrtoint i8* %0 to i64
  %122 = sub i64 %120, %121
  %123 = trunc i64 %122 to i32
  store i32 %123, i32* %1, align 4
  %124 = ptrtoint i8* %119 to i64
  %125 = ptrtoint i8* %2 to i64
  %126 = sub i64 %124, %125
  %127 = trunc i64 %126 to i32
  store i32 %127, i32* %3, align 4
  %128 = load i32, i32* %1, align 4
  br label %129

129:                                              ; preds = %117, %64, %37
  %130 = phi i32 [ -2, %37 ], [ %128, %117 ], [ -2, %64 ]
  ret i32 %130

131:                                              ; preds = %101
  %132 = lshr i32 %75, %106
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 63
  %135 = or i8 %134, -128
  store i8 %135, i8* %107, align 1
  %136 = add nsw i32 %94, -12
  %137 = getelementptr inbounds i8, i8* %23, i64 3
  %138 = icmp sgt i32 %136, -1
  %139 = icmp ult i8* %137, %7
  %140 = and i1 %138, %139
  br i1 %140, label %141, label %111

141:                                              ; preds = %131
  %142 = lshr i32 %75, %136
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 63
  %145 = or i8 %144, -128
  store i8 %145, i8* %137, align 1
  %146 = getelementptr inbounds i8, i8* %23, i64 4
  br label %111
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @UTF8ToUTF16BE(i8*, i32*, i8*, i32*) #0 {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp eq i8* %0, null
  %7 = icmp eq i32* %1, null
  %8 = or i1 %6, %7
  %9 = icmp eq i32* %3, null
  %10 = or i1 %8, %9
  br i1 %10, label %143, label %11

11:                                               ; preds = %4
  %12 = icmp eq i8* %2, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %11
  store i32 0, i32* %1, align 4
  store i32 0, i32* %3, align 4
  br label %143

14:                                               ; preds = %11
  %15 = load i32, i32* %3, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %2, i64 %16
  %18 = load i32, i32* %1, align 4
  %19 = sdiv i32 %18, 2
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i16, i16* %5, i64 %20
  %22 = icmp sgt i32 %15, 0
  br i1 %22, label %23, label %131

23:                                               ; preds = %14
  %24 = ptrtoint i8* %17 to i64
  br label %25

25:                                               ; preds = %23, %122
  %26 = phi i16* [ %5, %23 ], [ %129, %122 ]
  %27 = phi i8* [ %2, %23 ], [ %126, %122 ]
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  %29 = load i8, i8* %27, align 1
  %30 = zext i8 %29 to i32
  %31 = icmp sgt i8 %29, -1
  br i1 %31, label %66, label %32

32:                                               ; preds = %25
  %33 = icmp ult i8 %29, -64
  br i1 %33, label %34, label %44

34:                                               ; preds = %32
  %35 = ptrtoint i16* %26 to i64
  %36 = ptrtoint i8* %0 to i64
  %37 = sub i64 %35, %36
  %38 = lshr exact i64 %37, 1
  %39 = trunc i64 %38 to i32
  store i32 %39, i32* %1, align 4
  %40 = ptrtoint i8* %27 to i64
  %41 = ptrtoint i8* %2 to i64
  %42 = sub i64 %40, %41
  %43 = trunc i64 %42 to i32
  store i32 %43, i32* %3, align 4
  br label %143

44:                                               ; preds = %32
  %45 = icmp ult i8 %29, -32
  br i1 %45, label %46, label %48

46:                                               ; preds = %44
  %47 = and i32 %30, 31
  br label %66

48:                                               ; preds = %44
  %49 = icmp ult i8 %29, -16
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = and i32 %30, 15
  br label %66

52:                                               ; preds = %48
  %53 = icmp ult i8 %29, -8
  br i1 %53, label %54, label %56

54:                                               ; preds = %52
  %55 = and i32 %30, 7
  br label %66

56:                                               ; preds = %52
  %57 = ptrtoint i16* %26 to i64
  %58 = ptrtoint i8* %0 to i64
  %59 = sub i64 %57, %58
  %60 = lshr exact i64 %59, 1
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %1, align 4
  %62 = ptrtoint i8* %27 to i64
  %63 = ptrtoint i8* %2 to i64
  %64 = sub i64 %62, %63
  %65 = trunc i64 %64 to i32
  store i32 %65, i32* %3, align 4
  br label %143

66:                                               ; preds = %25, %50, %54, %46
  %67 = phi i32 [ %47, %46 ], [ %51, %50 ], [ %55, %54 ], [ %30, %25 ]
  %68 = phi i32 [ 1, %46 ], [ 2, %50 ], [ 3, %54 ], [ 0, %25 ]
  %69 = ptrtoint i8* %28 to i64
  %70 = sub i64 %24, %69
  %71 = zext i32 %68 to i64
  %72 = icmp slt i64 %70, %71
  br i1 %72, label %131, label %73

73:                                               ; preds = %66
  %74 = icmp ne i32 %68, 0
  %75 = icmp ult i8* %28, %17
  %76 = and i1 %75, %74
  br i1 %76, label %77, label %94

77:                                               ; preds = %73
  %78 = getelementptr inbounds i8, i8* %27, i64 2
  %79 = load i8, i8* %28, align 1
  %80 = zext i8 %79 to i32
  %81 = and i32 %80, 192
  %82 = icmp eq i32 %81, 128
  br i1 %82, label %83, label %90

83:                                               ; preds = %77
  %84 = shl nuw nsw i32 %67, 6
  %85 = and i32 %80, 63
  %86 = or i32 %85, %84
  %87 = icmp ne i32 %68, 1
  %88 = icmp ult i8* %78, %17
  %89 = and i1 %88, %87
  br i1 %89, label %145, label %90

90:                                               ; preds = %164, %158, %151, %145, %77, %83
  %91 = phi i8* [ %78, %77 ], [ %78, %83 ], [ %146, %145 ], [ %146, %151 ], [ %159, %158 ], [ %159, %164 ]
  %92 = phi i32 [ %67, %77 ], [ %86, %83 ], [ %86, %145 ], [ %154, %151 ], [ %154, %158 ], [ %167, %164 ]
  %93 = icmp ult i32 %92, 65536
  br i1 %93, label %94, label %102

94:                                               ; preds = %73, %90
  %95 = phi i8* [ %91, %90 ], [ %28, %73 ]
  %96 = phi i32 [ %92, %90 ], [ %67, %73 ]
  %97 = icmp ult i16* %26, %21
  br i1 %97, label %98, label %131

98:                                               ; preds = %94
  %99 = bitcast i16* %26 to i8*
  %100 = lshr i32 %96, 8
  %101 = trunc i32 %100 to i8
  store i8 %101, i8* %99, align 1
  br label %122

102:                                              ; preds = %90
  %103 = icmp ult i32 %92, 1114112
  %104 = getelementptr inbounds i16, i16* %26, i64 1
  %105 = icmp ult i16* %104, %21
  %106 = and i1 %105, %103
  br i1 %106, label %107, label %131

107:                                              ; preds = %102
  %108 = add nsw i32 %92, -65536
  %109 = lshr i32 %108, 10
  %110 = bitcast i16* %26 to i8*
  %111 = lshr i32 %108, 18
  %112 = trunc i32 %111 to i8
  %113 = or i8 %112, -40
  store i8 %113, i8* %110, align 1
  %114 = trunc i32 %109 to i8
  %115 = getelementptr inbounds i8, i8* %110, i64 1
  store i8 %114, i8* %115, align 1
  %116 = trunc i32 %108 to i16
  %117 = bitcast i16* %104 to i8*
  %118 = lshr i16 %116, 8
  %119 = trunc i16 %118 to i8
  %120 = and i8 %119, 3
  %121 = or i8 %120, -36
  store i8 %121, i8* %117, align 1
  br label %122

122:                                              ; preds = %107, %98
  %123 = phi i32 [ %108, %107 ], [ %96, %98 ]
  %124 = phi i8* [ %117, %107 ], [ %99, %98 ]
  %125 = phi i64 [ 2, %107 ], [ 1, %98 ]
  %126 = phi i8* [ %91, %107 ], [ %95, %98 ]
  %127 = trunc i32 %123 to i8
  %128 = getelementptr inbounds i8, i8* %124, i64 1
  store i8 %127, i8* %128, align 1
  %129 = getelementptr inbounds i16, i16* %26, i64 %125
  %130 = icmp ult i8* %126, %17
  br i1 %130, label %25, label %131

131:                                              ; preds = %122, %66, %102, %94, %14
  %132 = phi i8* [ %2, %14 ], [ %27, %94 ], [ %27, %102 ], [ %27, %66 ], [ %126, %122 ]
  %133 = phi i16* [ %5, %14 ], [ %26, %94 ], [ %26, %102 ], [ %26, %66 ], [ %129, %122 ]
  %134 = ptrtoint i16* %133 to i64
  %135 = ptrtoint i8* %0 to i64
  %136 = sub i64 %134, %135
  %137 = trunc i64 %136 to i32
  store i32 %137, i32* %1, align 4
  %138 = ptrtoint i8* %132 to i64
  %139 = ptrtoint i8* %2 to i64
  %140 = sub i64 %138, %139
  %141 = trunc i64 %140 to i32
  store i32 %141, i32* %3, align 4
  %142 = load i32, i32* %1, align 4
  br label %143

143:                                              ; preds = %4, %131, %56, %34, %13
  %144 = phi i32 [ 0, %13 ], [ %142, %131 ], [ -2, %34 ], [ -2, %56 ], [ -1, %4 ]
  ret i32 %144

145:                                              ; preds = %83
  %146 = getelementptr inbounds i8, i8* %27, i64 3
  %147 = load i8, i8* %78, align 1
  %148 = zext i8 %147 to i32
  %149 = and i32 %148, 192
  %150 = icmp eq i32 %149, 128
  br i1 %150, label %151, label %90

151:                                              ; preds = %145
  %152 = shl nuw nsw i32 %86, 6
  %153 = and i32 %148, 63
  %154 = or i32 %153, %152
  %155 = icmp ne i32 %68, 2
  %156 = icmp ult i8* %146, %17
  %157 = and i1 %156, %155
  br i1 %157, label %158, label %90

158:                                              ; preds = %151
  %159 = getelementptr inbounds i8, i8* %27, i64 4
  %160 = load i8, i8* %146, align 1
  %161 = zext i8 %160 to i32
  %162 = and i32 %161, 192
  %163 = icmp eq i32 %162, 128
  br i1 %163, label %164, label %90

164:                                              ; preds = %158
  %165 = shl nuw nsw i32 %154, 6
  %166 = and i32 %161, 63
  %167 = or i32 %166, %165
  br label %90
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @UTF8ToUTF16(i8*, i32*, i8*, i32*) #0 {
  %5 = icmp eq i8* %2, null
  br i1 %5, label %6, label %12

6:                                                ; preds = %4
  %7 = load i32, i32* %1, align 4
  %8 = icmp sgt i32 %7, 1
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  store i8 -1, i8* %0, align 1
  %10 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 -2, i8* %10, align 1
  store i32 2, i32* %1, align 4
  store i32 0, i32* %3, align 4
  br label %14

11:                                               ; preds = %6
  store i32 0, i32* %1, align 4
  store i32 0, i32* %3, align 4
  br label %14

12:                                               ; preds = %4
  %13 = tail call i32 @UTF8ToUTF16LE(i8* %0, i32* %1, i8* nonnull %2, i32* %3)
  br label %14

14:                                               ; preds = %12, %11, %9
  %15 = phi i32 [ 2, %9 ], [ 0, %11 ], [ %13, %12 ]
  ret i32 %15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @asciiToUTF8(i8*, i32* nocapture, i8*, i32* nocapture) #0 {
  %5 = load i32, i32* %1, align 4
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = load i32, i32* %3, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i8, i8* %2, i64 %9
  %11 = icmp sgt i32 %8, 0
  %12 = ptrtoint i8* %0 to i64
  br i1 %11, label %13, label %46

13:                                               ; preds = %4
  %14 = icmp sgt i32 %5, 5
  br i1 %14, label %15, label %42

15:                                               ; preds = %13, %29
  %16 = phi i64 [ %32, %29 ], [ 0, %13 ]
  %17 = phi i8* [ %25, %29 ], [ %0, %13 ]
  %18 = phi i8* [ %19, %29 ], [ %2, %13 ]
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  %20 = load i8, i8* %18, align 1
  %21 = icmp ult i8* %17, %7
  br i1 %21, label %22, label %42

22:                                               ; preds = %15
  %23 = icmp sgt i8 %20, -1
  br i1 %23, label %24, label %36

24:                                               ; preds = %22
  %25 = getelementptr inbounds i8, i8* %17, i64 1
  store i8 %20, i8* %17, align 1
  %26 = icmp ult i8* %19, %10
  br i1 %26, label %29, label %27

27:                                               ; preds = %24
  %28 = ptrtoint i8* %25 to i64
  br label %46

29:                                               ; preds = %24
  %30 = load i32, i32* %1, align 4
  %31 = ptrtoint i8* %25 to i64
  %32 = sub i64 %31, %12
  %33 = add nsw i64 %32, 5
  %34 = sext i32 %30 to i64
  %35 = icmp slt i64 %33, %34
  br i1 %35, label %15, label %42

36:                                               ; preds = %22
  %37 = trunc i64 %16 to i32
  store i32 %37, i32* %1, align 4
  %38 = ptrtoint i8* %18 to i64
  %39 = ptrtoint i8* %2 to i64
  %40 = sub i64 %38, %39
  %41 = trunc i64 %40 to i32
  store i32 %41, i32* %3, align 4
  br label %56

42:                                               ; preds = %29, %15, %13
  %43 = phi i8* [ %2, %13 ], [ %19, %29 ], [ %18, %15 ]
  %44 = phi i8* [ %0, %13 ], [ %25, %29 ], [ %17, %15 ]
  %45 = ptrtoint i8* %44 to i64
  br label %46

46:                                               ; preds = %4, %42, %27
  %47 = phi i64 [ %28, %27 ], [ %45, %42 ], [ %12, %4 ]
  %48 = phi i8* [ %19, %27 ], [ %43, %42 ], [ %2, %4 ]
  %49 = sub i64 %47, %12
  %50 = trunc i64 %49 to i32
  store i32 %50, i32* %1, align 4
  %51 = ptrtoint i8* %48 to i64
  %52 = ptrtoint i8* %2 to i64
  %53 = sub i64 %51, %52
  %54 = trunc i64 %53 to i32
  store i32 %54, i32* %3, align 4
  %55 = load i32, i32* %1, align 4
  br label %56

56:                                               ; preds = %46, %36
  %57 = phi i32 [ %55, %46 ], [ -1, %36 ]
  ret i32 %57
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @UTF8Toascii(i8*, i32*, i8*, i32*) #0 {
  %5 = icmp eq i8* %0, null
  %6 = icmp eq i32* %1, null
  %7 = or i1 %5, %6
  %8 = icmp eq i32* %3, null
  %9 = or i1 %7, %8
  br i1 %9, label %117, label %10

10:                                               ; preds = %4
  %11 = icmp eq i8* %2, null
  br i1 %11, label %12, label %13

12:                                               ; preds = %10
  store i32 0, i32* %1, align 4
  store i32 0, i32* %3, align 4
  br label %117

13:                                               ; preds = %10
  %14 = load i32, i32* %3, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %2, i64 %15
  %17 = load i32, i32* %1, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %0, i64 %18
  %20 = icmp sgt i32 %14, 0
  br i1 %20, label %21, label %105

21:                                               ; preds = %13
  %22 = ptrtoint i8* %16 to i64
  br label %23

23:                                               ; preds = %21, %92
  %24 = phi i8* [ %2, %21 ], [ %88, %92 ]
  %25 = phi i8* [ %0, %21 ], [ %94, %92 ]
  %26 = getelementptr inbounds i8, i8* %24, i64 1
  %27 = load i8, i8* %24, align 1
  %28 = zext i8 %27 to i32
  %29 = icmp sgt i8 %27, -1
  br i1 %29, label %62, label %30

30:                                               ; preds = %23
  %31 = icmp ult i8 %27, -64
  br i1 %31, label %32, label %41

32:                                               ; preds = %30
  %33 = ptrtoint i8* %25 to i64
  %34 = ptrtoint i8* %0 to i64
  %35 = sub i64 %33, %34
  %36 = trunc i64 %35 to i32
  store i32 %36, i32* %1, align 4
  %37 = ptrtoint i8* %24 to i64
  %38 = ptrtoint i8* %2 to i64
  %39 = sub i64 %37, %38
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %3, align 4
  br label %117

41:                                               ; preds = %30
  %42 = icmp ult i8 %27, -32
  br i1 %42, label %43, label %45

43:                                               ; preds = %41
  %44 = and i32 %28, 31
  br label %62

45:                                               ; preds = %41
  %46 = icmp ult i8 %27, -16
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = and i32 %28, 15
  br label %62

49:                                               ; preds = %45
  %50 = icmp ult i8 %27, -8
  br i1 %50, label %51, label %53

51:                                               ; preds = %49
  %52 = and i32 %28, 7
  br label %62

53:                                               ; preds = %49
  %54 = ptrtoint i8* %25 to i64
  %55 = ptrtoint i8* %0 to i64
  %56 = sub i64 %54, %55
  %57 = trunc i64 %56 to i32
  store i32 %57, i32* %1, align 4
  %58 = ptrtoint i8* %24 to i64
  %59 = ptrtoint i8* %2 to i64
  %60 = sub i64 %58, %59
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %3, align 4
  br label %117

62:                                               ; preds = %23, %47, %51, %43
  %63 = phi i32 [ %44, %43 ], [ %48, %47 ], [ %52, %51 ], [ %28, %23 ]
  %64 = phi i32 [ 1, %43 ], [ 2, %47 ], [ 3, %51 ], [ 0, %23 ]
  %65 = ptrtoint i8* %26 to i64
  %66 = sub i64 %22, %65
  %67 = zext i32 %64 to i64
  %68 = icmp slt i64 %66, %67
  br i1 %68, label %105, label %69

69:                                               ; preds = %62
  %70 = icmp ne i32 %64, 0
  %71 = icmp ult i8* %26, %16
  %72 = and i1 %71, %70
  br i1 %72, label %73, label %86

73:                                               ; preds = %69
  %74 = getelementptr inbounds i8, i8* %24, i64 2
  %75 = load i8, i8* %26, align 1
  %76 = zext i8 %75 to i32
  %77 = and i32 %76, 192
  %78 = icmp eq i32 %77, 128
  br i1 %78, label %79, label %86

79:                                               ; preds = %73
  %80 = shl nuw nsw i32 %63, 6
  %81 = and i32 %76, 63
  %82 = or i32 %81, %80
  %83 = icmp ne i32 %64, 1
  %84 = icmp ult i8* %74, %16
  %85 = and i1 %84, %83
  br i1 %85, label %119, label %86

86:                                               ; preds = %73, %79, %119, %125, %132, %138, %69
  %87 = phi i32 [ %63, %69 ], [ %82, %79 ], [ %63, %73 ], [ %82, %119 ], [ %128, %125 ], [ %128, %132 ], [ %141, %138 ]
  %88 = phi i8* [ %26, %69 ], [ %74, %79 ], [ %74, %73 ], [ %120, %119 ], [ %120, %125 ], [ %133, %132 ], [ %133, %138 ]
  %89 = icmp ult i32 %87, 128
  br i1 %89, label %90, label %96

90:                                               ; preds = %86
  %91 = icmp ult i8* %25, %19
  br i1 %91, label %92, label %105

92:                                               ; preds = %90
  %93 = trunc i32 %87 to i8
  %94 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %93, i8* %25, align 1
  %95 = icmp ult i8* %88, %16
  br i1 %95, label %23, label %105

96:                                               ; preds = %86
  %97 = ptrtoint i8* %25 to i64
  %98 = ptrtoint i8* %0 to i64
  %99 = sub i64 %97, %98
  %100 = trunc i64 %99 to i32
  store i32 %100, i32* %1, align 4
  %101 = ptrtoint i8* %24 to i64
  %102 = ptrtoint i8* %2 to i64
  %103 = sub i64 %101, %102
  %104 = trunc i64 %103 to i32
  store i32 %104, i32* %3, align 4
  br label %117

105:                                              ; preds = %92, %62, %90, %13
  %106 = phi i8* [ %0, %13 ], [ %25, %90 ], [ %25, %62 ], [ %94, %92 ]
  %107 = phi i8* [ %2, %13 ], [ %24, %90 ], [ %24, %62 ], [ %88, %92 ]
  %108 = ptrtoint i8* %106 to i64
  %109 = ptrtoint i8* %0 to i64
  %110 = sub i64 %108, %109
  %111 = trunc i64 %110 to i32
  store i32 %111, i32* %1, align 4
  %112 = ptrtoint i8* %107 to i64
  %113 = ptrtoint i8* %2 to i64
  %114 = sub i64 %112, %113
  %115 = trunc i64 %114 to i32
  store i32 %115, i32* %3, align 4
  %116 = load i32, i32* %1, align 4
  br label %117

117:                                              ; preds = %4, %105, %96, %53, %32, %12
  %118 = phi i32 [ 0, %12 ], [ %116, %105 ], [ -2, %96 ], [ -2, %32 ], [ -2, %53 ], [ -1, %4 ]
  ret i32 %118

119:                                              ; preds = %79
  %120 = getelementptr inbounds i8, i8* %24, i64 3
  %121 = load i8, i8* %74, align 1
  %122 = zext i8 %121 to i32
  %123 = and i32 %122, 192
  %124 = icmp eq i32 %123, 128
  br i1 %124, label %125, label %86

125:                                              ; preds = %119
  %126 = shl nuw nsw i32 %82, 6
  %127 = and i32 %122, 63
  %128 = or i32 %127, %126
  %129 = icmp ne i32 %64, 2
  %130 = icmp ult i8* %120, %16
  %131 = and i1 %130, %129
  br i1 %131, label %132, label %86

132:                                              ; preds = %125
  %133 = getelementptr inbounds i8, i8* %24, i64 4
  %134 = load i8, i8* %120, align 1
  %135 = zext i8 %134 to i32
  %136 = and i32 %135, 192
  %137 = icmp eq i32 %136, 128
  br i1 %137, label %138, label %86

138:                                              ; preds = %132
  %139 = shl nuw nsw i32 %128, 6
  %140 = and i32 %135, 63
  %141 = or i32 %140, %139
  br label %86
}

declare i32 @UTF8ToHtml(i8*, i32*, i8*, i32*) #8

; Function Attrs: nounwind ssp uwtable
define hidden void @xmlCleanupCharEncodingHandlers() local_unnamed_addr #3 {
  %1 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  %2 = icmp eq %struct._xmlCharEncodingAlias* %1, null
  br i1 %2, label %35, label %3

3:                                                ; preds = %0
  %4 = bitcast %struct._xmlCharEncodingAlias* %1 to i8*
  %5 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %32

7:                                                ; preds = %3, %28
  %8 = phi %struct._xmlCharEncodingAlias* [ %29, %28 ], [ %1, %3 ]
  %9 = phi i64 [ %24, %28 ], [ 0, %3 ]
  %10 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %8, i64 %9, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %7
  %14 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %14(i8* nonnull %11) #11
  %15 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  br label %16

16:                                               ; preds = %13, %7
  %17 = phi %struct._xmlCharEncodingAlias* [ %8, %7 ], [ %15, %13 ]
  %18 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %17, i64 %9, i32 1
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %16
  %22 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %22(i8* nonnull %19) #11
  br label %23

23:                                               ; preds = %21, %16
  %24 = add nuw nsw i64 %9, 1
  %25 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  %26 = sext i32 %25 to i64
  %27 = icmp slt i64 %24, %26
  br i1 %27, label %28, label %30

28:                                               ; preds = %23
  %29 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  br label %7

30:                                               ; preds = %23
  %31 = load i8*, i8** bitcast (%struct._xmlCharEncodingAlias** @xmlCharEncodingAliases to i8**), align 8
  br label %32

32:                                               ; preds = %30, %3
  %33 = phi i8* [ %31, %30 ], [ %4, %3 ]
  store i32 0, i32* @xmlCharEncodingAliasesNb, align 4
  store i32 0, i32* @xmlCharEncodingAliasesMax, align 4
  %34 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %34(i8* %33) #11
  store %struct._xmlCharEncodingAlias* null, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  br label %35

35:                                               ; preds = %0, %32
  %36 = load %struct._xmlCharEncodingHandler**, %struct._xmlCharEncodingHandler*** @handlers, align 8
  %37 = icmp eq %struct._xmlCharEncodingHandler** %36, null
  br i1 %37, label %77, label %38

38:                                               ; preds = %35
  %39 = bitcast %struct._xmlCharEncodingHandler** %36 to i8*
  %40 = load i32, i32* @nbCharEncodingHandler, align 4
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %74

42:                                               ; preds = %38, %70
  %43 = phi %struct._xmlCharEncodingHandler** [ %71, %70 ], [ %36, %38 ]
  %44 = phi i32 [ %68, %70 ], [ %40, %38 ]
  %45 = add nsw i32 %44, -1
  store i32 %45, i32* @nbCharEncodingHandler, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %43, i64 %46
  %48 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %47, align 8
  %49 = icmp eq %struct._xmlCharEncodingHandler* %48, null
  br i1 %49, label %67, label %50

50:                                               ; preds = %42
  %51 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %48, i64 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = icmp eq i8* %52, null
  br i1 %53, label %59, label %54

54:                                               ; preds = %50
  %55 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %55(i8* nonnull %52) #11
  %56 = load %struct._xmlCharEncodingHandler**, %struct._xmlCharEncodingHandler*** @handlers, align 8
  %57 = load i32, i32* @nbCharEncodingHandler, align 4
  %58 = sext i32 %57 to i64
  br label %59

59:                                               ; preds = %50, %54
  %60 = phi i64 [ %46, %50 ], [ %58, %54 ]
  %61 = phi %struct._xmlCharEncodingHandler** [ %43, %50 ], [ %56, %54 ]
  %62 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %63 = getelementptr inbounds %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %61, i64 %60
  %64 = bitcast %struct._xmlCharEncodingHandler** %63 to i8**
  %65 = load i8*, i8** %64, align 8
  tail call void %62(i8* %65) #11
  %66 = load i32, i32* @nbCharEncodingHandler, align 4
  br label %67

67:                                               ; preds = %42, %59
  %68 = phi i32 [ %45, %42 ], [ %66, %59 ]
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %67
  %71 = load %struct._xmlCharEncodingHandler**, %struct._xmlCharEncodingHandler*** @handlers, align 8
  br label %42

72:                                               ; preds = %67
  %73 = load i8*, i8** bitcast (%struct._xmlCharEncodingHandler*** @handlers to i8**), align 8
  br label %74

74:                                               ; preds = %72, %38
  %75 = phi i8* [ %73, %72 ], [ %39, %38 ]
  %76 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %76(i8* %75) #11
  store %struct._xmlCharEncodingHandler** null, %struct._xmlCharEncodingHandler*** @handlers, align 8
  store i32 0, i32* @nbCharEncodingHandler, align 4
  br label %77

77:                                               ; preds = %35, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._xmlCharEncodingHandler* @xmlGetCharEncodingHandler(i32) local_unnamed_addr #3 {
  %2 = load %struct._xmlCharEncodingHandler**, %struct._xmlCharEncodingHandler*** @handlers, align 8
  %3 = icmp eq %struct._xmlCharEncodingHandler** %2, null
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  tail call void @xmlInitCharEncodingHandlers()
  br label %5

5:                                                ; preds = %4, %1
  switch i32 %0, label %91 [
    i32 -1, label %92
    i32 0, label %92
    i32 1, label %92
    i32 2, label %6
    i32 3, label %8
    i32 6, label %10
    i32 5, label %22
    i32 4, label %31
    i32 21, label %88
    i32 20, label %79
    i32 9, label %40
    i32 10, label %49
    i32 11, label %52
    i32 12, label %55
    i32 13, label %58
    i32 14, label %61
    i32 15, label %64
    i32 16, label %67
    i32 17, label %70
    i32 18, label %73
    i32 19, label %76
  ]

6:                                                ; preds = %5
  %7 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** @xmlUTF16LEHandler, align 8
  br label %92

8:                                                ; preds = %5
  %9 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** @xmlUTF16BEHandler, align 8
  br label %92

10:                                               ; preds = %5
  %11 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i64 0, i64 0))
  %12 = icmp eq %struct._xmlCharEncodingHandler* %11, null
  br i1 %12, label %13, label %92

13:                                               ; preds = %10
  %14 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0))
  %15 = icmp eq %struct._xmlCharEncodingHandler* %14, null
  br i1 %15, label %16, label %92

16:                                               ; preds = %13
  %17 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.42, i64 0, i64 0))
  %18 = icmp eq %struct._xmlCharEncodingHandler* %17, null
  br i1 %18, label %19, label %92

19:                                               ; preds = %16
  %20 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.43, i64 0, i64 0))
  %21 = icmp eq %struct._xmlCharEncodingHandler* %20, null
  br i1 %21, label %91, label %92

22:                                               ; preds = %5
  %23 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0))
  %24 = icmp eq %struct._xmlCharEncodingHandler* %23, null
  br i1 %24, label %25, label %92

25:                                               ; preds = %22
  %26 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0))
  %27 = icmp eq %struct._xmlCharEncodingHandler* %26, null
  br i1 %27, label %28, label %92

28:                                               ; preds = %25
  %29 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0))
  %30 = icmp eq %struct._xmlCharEncodingHandler* %29, null
  br i1 %30, label %91, label %92

31:                                               ; preds = %5
  %32 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0))
  %33 = icmp eq %struct._xmlCharEncodingHandler* %32, null
  br i1 %33, label %34, label %92

34:                                               ; preds = %31
  %35 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0))
  %36 = icmp eq %struct._xmlCharEncodingHandler* %35, null
  br i1 %36, label %37, label %92

37:                                               ; preds = %34
  %38 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0))
  %39 = icmp eq %struct._xmlCharEncodingHandler* %38, null
  br i1 %39, label %91, label %92

40:                                               ; preds = %5
  %41 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0))
  %42 = icmp eq %struct._xmlCharEncodingHandler* %41, null
  br i1 %42, label %43, label %92

43:                                               ; preds = %40
  %44 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0))
  %45 = icmp eq %struct._xmlCharEncodingHandler* %44, null
  br i1 %45, label %46, label %92

46:                                               ; preds = %43
  %47 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0))
  %48 = icmp eq %struct._xmlCharEncodingHandler* %47, null
  br i1 %48, label %91, label %92

49:                                               ; preds = %5
  %50 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0))
  %51 = icmp eq %struct._xmlCharEncodingHandler* %50, null
  br i1 %51, label %91, label %92

52:                                               ; preds = %5
  %53 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0))
  %54 = icmp eq %struct._xmlCharEncodingHandler* %53, null
  br i1 %54, label %91, label %92

55:                                               ; preds = %5
  %56 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i64 0, i64 0))
  %57 = icmp eq %struct._xmlCharEncodingHandler* %56, null
  br i1 %57, label %91, label %92

58:                                               ; preds = %5
  %59 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i64 0, i64 0))
  %60 = icmp eq %struct._xmlCharEncodingHandler* %59, null
  br i1 %60, label %91, label %92

61:                                               ; preds = %5
  %62 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19, i64 0, i64 0))
  %63 = icmp eq %struct._xmlCharEncodingHandler* %62, null
  br i1 %63, label %91, label %92

64:                                               ; preds = %5
  %65 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i64 0, i64 0))
  %66 = icmp eq %struct._xmlCharEncodingHandler* %65, null
  br i1 %66, label %91, label %92

67:                                               ; preds = %5
  %68 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0))
  %69 = icmp eq %struct._xmlCharEncodingHandler* %68, null
  br i1 %69, label %91, label %92

70:                                               ; preds = %5
  %71 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0))
  %72 = icmp eq %struct._xmlCharEncodingHandler* %71, null
  br i1 %72, label %91, label %92

73:                                               ; preds = %5
  %74 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i64 0, i64 0))
  %75 = icmp eq %struct._xmlCharEncodingHandler* %74, null
  br i1 %75, label %91, label %92

76:                                               ; preds = %5
  %77 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i64 0, i64 0))
  %78 = icmp eq %struct._xmlCharEncodingHandler* %77, null
  br i1 %78, label %91, label %92

79:                                               ; preds = %5
  %80 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i64 0, i64 0))
  %81 = icmp eq %struct._xmlCharEncodingHandler* %80, null
  br i1 %81, label %82, label %92

82:                                               ; preds = %79
  %83 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i64 0, i64 0))
  %84 = icmp eq %struct._xmlCharEncodingHandler* %83, null
  br i1 %84, label %85, label %92

85:                                               ; preds = %82
  %86 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i64 0, i64 0))
  %87 = icmp eq %struct._xmlCharEncodingHandler* %86, null
  br i1 %87, label %91, label %92

88:                                               ; preds = %5
  %89 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i64 0, i64 0))
  %90 = icmp eq %struct._xmlCharEncodingHandler* %89, null
  br i1 %90, label %91, label %92

91:                                               ; preds = %19, %28, %37, %88, %85, %46, %49, %52, %55, %58, %61, %64, %67, %70, %73, %76, %5
  br label %92

92:                                               ; preds = %88, %85, %82, %79, %76, %73, %70, %67, %64, %61, %58, %55, %52, %49, %46, %43, %40, %37, %34, %31, %28, %25, %22, %19, %16, %13, %10, %5, %5, %5, %91, %8, %6
  %93 = phi %struct._xmlCharEncodingHandler* [ null, %91 ], [ %9, %8 ], [ %7, %6 ], [ null, %5 ], [ null, %5 ], [ null, %5 ], [ %11, %10 ], [ %14, %13 ], [ %17, %16 ], [ %20, %19 ], [ %23, %22 ], [ %26, %25 ], [ %29, %28 ], [ %32, %31 ], [ %35, %34 ], [ %38, %37 ], [ %41, %40 ], [ %44, %43 ], [ %47, %46 ], [ %50, %49 ], [ %53, %52 ], [ %56, %55 ], [ %59, %58 ], [ %62, %61 ], [ %65, %64 ], [ %68, %67 ], [ %71, %70 ], [ %74, %73 ], [ %77, %76 ], [ %80, %79 ], [ %83, %82 ], [ %86, %85 ], [ %89, %88 ]
  ret %struct._xmlCharEncodingHandler* %93
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8*) local_unnamed_addr #3 {
  %2 = alloca [100 x i8], align 16
  %3 = alloca [100 x i8], align 16
  %4 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %4) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 100, i1 false)
  %5 = load %struct._xmlCharEncodingHandler**, %struct._xmlCharEncodingHandler*** @handlers, align 8
  %6 = icmp eq %struct._xmlCharEncodingHandler** %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  tail call void @xmlInitCharEncodingHandlers()
  br label %8

8:                                                ; preds = %7, %1
  %9 = icmp eq i8* %0, null
  br i1 %9, label %179, label %10

10:                                               ; preds = %8
  %11 = load i8, i8* %0, align 1
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %179, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %14) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 100, i1 false) #11
  %15 = load %struct._xmlCharEncodingAlias*, %struct._xmlCharEncodingAlias** @xmlCharEncodingAliases, align 8
  %16 = icmp eq %struct._xmlCharEncodingAlias* %15, null
  %17 = tail call i32** @__ctype_toupper_loc() #12
  br i1 %16, label %66, label %18

18:                                               ; preds = %13
  %19 = load i32*, i32** %17, align 8
  %20 = sext i8 %11 to i64
  %21 = getelementptr inbounds i32, i32* %19, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 0
  store i8 %23, i8* %24, align 16
  %25 = and i32 %22, 255
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %45, label %27

27:                                               ; preds = %18, %33
  %28 = phi i32 [ %31, %33 ], [ 0, %18 ]
  %29 = phi i64 [ %30, %33 ], [ 0, %18 ]
  %30 = add nuw nsw i64 %29, 1
  %31 = add nuw nsw i32 %28, 1
  %32 = icmp eq i64 %30, 99
  br i1 %32, label %45, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds i8, i8* %0, i64 %30
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i64
  %37 = getelementptr inbounds i32, i32* %19, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = trunc i32 %38 to i8
  %40 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 %30
  store i8 %39, i8* %40, align 1
  %41 = and i32 %38, 255
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %27

43:                                               ; preds = %33
  %44 = trunc i64 %30 to i32
  br label %45

45:                                               ; preds = %27, %18, %43
  %46 = phi i32 [ 0, %18 ], [ %44, %43 ], [ %31, %27 ]
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 %47
  store i8 0, i8* %48, align 1
  %49 = load i32, i32* @xmlCharEncodingAliasesNb, align 4
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %66

51:                                               ; preds = %45
  %52 = sext i32 %49 to i64
  br label %55

53:                                               ; preds = %55
  %54 = icmp eq i64 %61, %52
  br i1 %54, label %66, label %55

55:                                               ; preds = %53, %51
  %56 = phi i64 [ 0, %51 ], [ %61, %53 ]
  %57 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %15, i64 %56, i32 1
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 @strcmp(i8* %58, i8* nonnull %14) #13
  %60 = icmp eq i32 %59, 0
  %61 = add nuw nsw i64 %56, 1
  br i1 %60, label %62, label %53

62:                                               ; preds = %55
  %63 = and i64 %56, 4294967295
  %64 = getelementptr inbounds %struct._xmlCharEncodingAlias, %struct._xmlCharEncodingAlias* %15, i64 %63, i32 0
  %65 = load i8*, i8** %64, align 8
  br label %66

66:                                               ; preds = %53, %13, %45, %62
  %67 = phi i8* [ null, %45 ], [ %65, %62 ], [ null, %13 ], [ null, %53 ]
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %14) #11
  %68 = icmp eq i8* %67, null
  %69 = select i1 %68, i8* %0, i8* %67
  %70 = load i32*, i32** %17, align 8
  br label %71

71:                                               ; preds = %191, %66
  %72 = phi i64 [ 0, %66 ], [ %192, %191 ]
  %73 = phi i32 [ 0, %66 ], [ %193, %191 ]
  %74 = getelementptr inbounds i8, i8* %69, i64 %72
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %75 to i64
  %77 = getelementptr inbounds i32, i32* %70, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i64 0, i64 %72
  store i8 %79, i8* %80, align 2
  %81 = and i32 %78, 255
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %71
  %84 = or i64 %72, 1
  %85 = icmp eq i64 %84, 99
  br i1 %85, label %89, label %181

86:                                               ; preds = %181, %71
  %87 = phi i64 [ %72, %71 ], [ %84, %181 ]
  %88 = trunc i64 %87 to i32
  br label %91

89:                                               ; preds = %83
  %90 = or i32 %73, 1
  br label %91

91:                                               ; preds = %89, %86
  %92 = phi i32 [ %88, %86 ], [ %90, %89 ]
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i64 0, i64 %93
  store i8 0, i8* %94, align 1
  %95 = load %struct._xmlCharEncodingHandler**, %struct._xmlCharEncodingHandler*** @handlers, align 8
  %96 = icmp ne %struct._xmlCharEncodingHandler** %95, null
  %97 = load i32, i32* @nbCharEncodingHandler, align 4
  %98 = icmp sgt i32 %97, 0
  %99 = and i1 %96, %98
  br i1 %99, label %100, label %113

100:                                              ; preds = %91
  %101 = sext i32 %97 to i64
  br label %104

102:                                              ; preds = %104
  %103 = icmp slt i64 %112, %101
  br i1 %103, label %104, label %113

104:                                              ; preds = %100, %102
  %105 = phi i64 [ 0, %100 ], [ %112, %102 ]
  %106 = getelementptr inbounds %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %95, i64 %105
  %107 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %106, align 8
  %108 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %107, i64 0, i32 0
  %109 = load i8*, i8** %108, align 8
  %110 = call i32 @strcmp(i8* nonnull %4, i8* %109) #13
  %111 = icmp eq i32 %110, 0
  %112 = add nuw nsw i64 %105, 1
  br i1 %111, label %179, label %102

113:                                              ; preds = %102, %91
  %114 = tail call fastcc %struct._uconv_t* @openIcuConverter(i8* %69, i32 1)
  %115 = tail call fastcc %struct._uconv_t* @openIcuConverter(i8* %69, i32 0)
  %116 = icmp ne %struct._uconv_t* %114, null
  %117 = icmp ne %struct._uconv_t* %115, null
  %118 = and i1 %116, %117
  br i1 %118, label %119, label %146

119:                                              ; preds = %113
  %120 = load i8* (i64)*, i8* (i64)** @xmlMalloc, align 8
  %121 = tail call i8* %120(i64 40) #11
  %122 = icmp eq i8* %121, null
  br i1 %122, label %123, label %136

123:                                              ; preds = %119
  %124 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %114, i64 0, i32 0
  %125 = load %struct.UConverter*, %struct.UConverter** %124, align 8
  tail call void @ucnv_close_69(%struct.UConverter* %125) #11
  %126 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %114, i64 0, i32 1
  %127 = load %struct.UConverter*, %struct.UConverter** %126, align 8
  tail call void @ucnv_close_69(%struct.UConverter* %127) #11
  %128 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %129 = bitcast %struct._uconv_t* %114 to i8*
  tail call void %128(i8* nonnull %129) #11
  %130 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %115, i64 0, i32 0
  %131 = load %struct.UConverter*, %struct.UConverter** %130, align 8
  tail call void @ucnv_close_69(%struct.UConverter* %131) #11
  %132 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %115, i64 0, i32 1
  %133 = load %struct.UConverter*, %struct.UConverter** %132, align 8
  tail call void @ucnv_close_69(%struct.UConverter* %133) #11
  %134 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %135 = bitcast %struct._uconv_t* %115 to i8*
  tail call void %134(i8* nonnull %135) #11
  br label %179

136:                                              ; preds = %119
  %137 = bitcast i8* %121 to %struct._xmlCharEncodingHandler*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %121, i8 0, i64 40, i1 false)
  %138 = load i8* (i8*)*, i8* (i8*)** @xmlMemStrdup, align 8
  %139 = tail call i8* %138(i8* %69) #11
  %140 = bitcast i8* %121 to i8**
  store i8* %139, i8** %140, align 8
  %141 = getelementptr inbounds i8, i8* %121, i64 8
  %142 = getelementptr inbounds i8, i8* %121, i64 24
  %143 = bitcast i8* %142 to %struct._uconv_t**
  call void @llvm.memset.p0i8.i64(i8* align 8 %141, i8 0, i64 16, i1 false)
  store %struct._uconv_t* %114, %struct._uconv_t** %143, align 8
  %144 = getelementptr inbounds i8, i8* %121, i64 32
  %145 = bitcast i8* %144 to %struct._uconv_t**
  store %struct._uconv_t* %115, %struct._uconv_t** %145, align 8
  br label %179

146:                                              ; preds = %113
  %147 = or i1 %116, %117
  br i1 %147, label %148, label %167

148:                                              ; preds = %146
  %149 = icmp eq %struct._uconv_t* %114, null
  br i1 %149, label %157, label %150

150:                                              ; preds = %148
  %151 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %114, i64 0, i32 0
  %152 = load %struct.UConverter*, %struct.UConverter** %151, align 8
  tail call void @ucnv_close_69(%struct.UConverter* %152) #11
  %153 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %114, i64 0, i32 1
  %154 = load %struct.UConverter*, %struct.UConverter** %153, align 8
  tail call void @ucnv_close_69(%struct.UConverter* %154) #11
  %155 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %156 = bitcast %struct._uconv_t* %114 to i8*
  tail call void %155(i8* nonnull %156) #11
  br label %157

157:                                              ; preds = %148, %150
  %158 = icmp eq %struct._uconv_t* %115, null
  br i1 %158, label %166, label %159

159:                                              ; preds = %157
  %160 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %115, i64 0, i32 0
  %161 = load %struct.UConverter*, %struct.UConverter** %160, align 8
  tail call void @ucnv_close_69(%struct.UConverter* %161) #11
  %162 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %115, i64 0, i32 1
  %163 = load %struct.UConverter*, %struct.UConverter** %162, align 8
  tail call void @ucnv_close_69(%struct.UConverter* %163) #11
  %164 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %165 = bitcast %struct._uconv_t* %115 to i8*
  tail call void %164(i8* nonnull %165) #11
  br label %166

166:                                              ; preds = %157, %159
  tail call void (void (i8*, %struct._xmlError*)*, void (i8*, i8*, ...)*, i8*, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, ...) @__xmlRaiseError(void (i8*, %struct._xmlError*)* null, void (i8*, i8*, ...)* null, i8* null, i8* null, i8* null, i32 27, i32 1, i32 3, i8* null, i32 0, i8* %69, i8* null, i8* null, i32 0, i32 0, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.46, i64 0, i64 0), i8* %69) #11
  br label %167

167:                                              ; preds = %166, %146
  %168 = tail call i32 @xmlParseCharEncoding(i8* nonnull %0)
  %169 = add i32 %168, -1
  %170 = icmp ult i32 %169, 21
  br i1 %170, label %171, label %179

171:                                              ; preds = %167
  %172 = sext i32 %169 to i64
  %173 = getelementptr inbounds [21 x i8*], [21 x i8*]* @switch.table.xmlFindCharEncodingHandler, i64 0, i64 %172
  %174 = load i8*, i8** %173, align 8
  %175 = tail call i32 @strcmp(i8* %69, i8* nonnull %174) #13
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %179, label %177

177:                                              ; preds = %171
  %178 = tail call %struct._xmlCharEncodingHandler* @xmlFindCharEncodingHandler(i8* nonnull %174)
  br label %179

179:                                              ; preds = %104, %167, %171, %177, %10, %8, %136, %123
  %180 = phi %struct._xmlCharEncodingHandler* [ null, %123 ], [ %137, %136 ], [ %178, %177 ], [ null, %8 ], [ null, %10 ], [ null, %171 ], [ null, %167 ], [ %107, %104 ]
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %4) #11
  ret %struct._xmlCharEncodingHandler* %180

181:                                              ; preds = %83
  %182 = getelementptr inbounds i8, i8* %69, i64 %84
  %183 = load i8, i8* %182, align 1
  %184 = sext i8 %183 to i64
  %185 = getelementptr inbounds i32, i32* %70, i64 %184
  %186 = load i32, i32* %185, align 4
  %187 = trunc i32 %186 to i8
  %188 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i64 0, i64 %84
  store i8 %187, i8* %188, align 1
  %189 = and i32 %186, 255
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %86, label %191

191:                                              ; preds = %181
  %192 = add nuw nsw i64 %72, 2
  %193 = add nuw nsw i32 %73, 2
  br label %71
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct._uconv_t* @openIcuConverter(i8*, i32) unnamed_addr #3 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #11
  store i32 0, i32* %3, align 4
  %5 = load i8* (i64)*, i8* (i64)** @xmlMalloc, align 8
  %6 = tail call i8* %5(i64 2080) #11
  %7 = bitcast i8* %6 to %struct._uconv_t*
  %8 = icmp eq i8* %6, null
  br i1 %8, label %40, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %6, i64 16
  %11 = getelementptr inbounds i8, i8* %6, i64 2064
  %12 = bitcast i8* %11 to i8**
  store i8* %10, i8** %12, align 8
  %13 = getelementptr inbounds i8, i8* %6, i64 2072
  %14 = bitcast i8* %13 to i8**
  store i8* %10, i8** %14, align 8
  %15 = call %struct.UConverter* @ucnv_open_69(i8* %0, i32* nonnull %3) #11
  %16 = bitcast i8* %6 to %struct.UConverter**
  store %struct.UConverter* %15, %struct.UConverter** %16, align 8
  %17 = load i32, i32* %3, align 4
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %34, label %19

19:                                               ; preds = %9
  store i32 0, i32* %3, align 4
  %20 = icmp eq i32 %1, 0
  br i1 %20, label %22, label %21

21:                                               ; preds = %19
  call void @ucnv_setToUCallBack_69(%struct.UConverter* %15, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)* nonnull @UCNV_TO_U_CALLBACK_STOP_69, i8* null, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)** null, i8** null, i32* nonnull %3) #11
  br label %23

22:                                               ; preds = %19
  call void @ucnv_setFromUCallBack_69(%struct.UConverter* %15, void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)* nonnull @UCNV_FROM_U_CALLBACK_STOP_69, i8* null, void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)** null, i8** null, i32* nonnull %3) #11
  br label %23

23:                                               ; preds = %22, %21
  %24 = load i32, i32* %3, align 4
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %23
  store i32 0, i32* %3, align 4
  %27 = call %struct.UConverter* @ucnv_open_69(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %3) #11
  %28 = getelementptr inbounds i8, i8* %6, i64 8
  %29 = bitcast i8* %28 to %struct.UConverter**
  store %struct.UConverter* %27, %struct.UConverter** %29, align 8
  %30 = load i32, i32* %3, align 4
  %31 = icmp slt i32 %30, 1
  br i1 %31, label %40, label %32

32:                                               ; preds = %23, %26
  %33 = load %struct.UConverter*, %struct.UConverter** %16, align 8
  br label %34

34:                                               ; preds = %32, %9
  %35 = phi %struct.UConverter* [ %33, %32 ], [ %15, %9 ]
  %36 = icmp eq %struct.UConverter* %35, null
  br i1 %36, label %38, label %37

37:                                               ; preds = %34
  call void @ucnv_close_69(%struct.UConverter* nonnull %35) #11
  br label %38

38:                                               ; preds = %34, %37
  %39 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  call void %39(i8* nonnull %6) #11
  br label %40

40:                                               ; preds = %26, %2, %38
  %41 = phi %struct._uconv_t* [ null, %38 ], [ null, %2 ], [ %7, %26 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #11
  ret %struct._uconv_t* %41
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @xmlCharEncFirstLineInt(%struct._xmlCharEncodingHandler* readonly, %struct._xmlBuffer*, %struct._xmlBuffer*, i32) local_unnamed_addr #3 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #11
  store i32 -1431655766, i32* %8, align 4
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #11
  store i32 -1431655766, i32* %9, align 4
  %12 = icmp eq %struct._xmlCharEncodingHandler* %0, null
  %13 = icmp eq %struct._xmlBuffer* %1, null
  %14 = or i1 %12, %13
  %15 = icmp eq %struct._xmlBuffer* %2, null
  %16 = or i1 %14, %15
  br i1 %16, label %129, label %17

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = xor i32 %21, -1
  %23 = add i32 %19, %22
  store i32 %23, i32* %8, align 4
  %24 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %2, i64 0, i32 1
  %25 = load i32, i32* %24, align 8
  store i32 %25, i32* %9, align 4
  %26 = icmp sgt i32 %3, -1
  br i1 %26, label %27, label %30

27:                                               ; preds = %17
  %28 = icmp sgt i32 %25, %3
  br i1 %28, label %29, label %33

29:                                               ; preds = %27
  store i32 %3, i32* %9, align 4
  br label %33

30:                                               ; preds = %17
  %31 = icmp sgt i32 %25, 180
  br i1 %31, label %32, label %33

32:                                               ; preds = %30
  store i32 180, i32* %9, align 4
  br label %33

33:                                               ; preds = %30, %32, %27, %29
  %34 = phi i32 [ %25, %30 ], [ 180, %32 ], [ %25, %27 ], [ %3, %29 ]
  %35 = shl nsw i32 %34, 1
  %36 = icmp slt i32 %35, %23
  br i1 %36, label %43, label %37

37:                                               ; preds = %33
  %38 = tail call i32 @xmlBufferGrow(%struct._xmlBuffer* nonnull %1, i32 %35) #11
  %39 = load i32, i32* %18, align 4
  %40 = load i32, i32* %20, align 8
  %41 = xor i32 %40, -1
  %42 = add i32 %39, %41
  store i32 %42, i32* %8, align 4
  br label %43

43:                                               ; preds = %33, %37
  %44 = phi i32 [ %23, %33 ], [ %42, %37 ]
  %45 = phi i32 [ %21, %33 ], [ %40, %37 ]
  %46 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %1, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = zext i32 %45 to i64
  %49 = getelementptr inbounds i8, i8* %47, i64 %48
  %50 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %2, i64 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 1
  %53 = load i32 (i8*, i32*, i8*, i32*)*, i32 (i8*, i32*, i8*, i32*)** %52, align 8
  %54 = icmp eq i32 (i8*, i32*, i8*, i32*)* %53, null
  br i1 %54, label %59, label %55

55:                                               ; preds = %43
  %56 = call i32 %53(i8* %49, i32* nonnull %8, i8* %51, i32* nonnull %9) #11
  %57 = icmp slt i32 %56, 0
  %58 = load i32, i32* %9, align 4
  br i1 %57, label %113, label %103

59:                                               ; preds = %43
  %60 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 3
  %61 = load %struct._uconv_t*, %struct._uconv_t** %60, align 8
  %62 = icmp eq %struct._uconv_t* %61, null
  br i1 %62, label %102, label %63

63:                                               ; preds = %59
  %64 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64) #11
  store i8* %51, i8** %5, align 8
  %65 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %65) #11
  store i8* %49, i8** %6, align 8
  %66 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %66) #11
  store i32 0, i32* %7, align 4
  %67 = icmp eq i8* %49, null
  %68 = icmp eq i8* %51, null
  %69 = or i1 %68, %67
  br i1 %69, label %70, label %71

70:                                               ; preds = %63
  store i32 0, i32* %8, align 4
  br label %99

71:                                               ; preds = %63
  %72 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %61, i64 0, i32 1
  %73 = load %struct.UConverter*, %struct.UConverter** %72, align 8
  %74 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %61, i64 0, i32 0
  %75 = load %struct.UConverter*, %struct.UConverter** %74, align 8
  %76 = sext i32 %44 to i64
  %77 = getelementptr inbounds i8, i8* %49, i64 %76
  %78 = sext i32 %34 to i64
  %79 = getelementptr inbounds i8, i8* %51, i64 %78
  %80 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %61, i64 0, i32 2, i64 0
  %81 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %61, i64 0, i32 3
  %82 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %61, i64 0, i32 4
  %83 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %61, i64 0, i32 2, i64 1024
  call void @ucnv_convertEx_69(%struct.UConverter* %73, %struct.UConverter* %75, i8** nonnull %6, i8* %77, i8** nonnull %5, i8* %79, i16* %80, i16** %81, i16** %82, i16* %83, i8 signext 0, i8 signext 0, i32* nonnull %7) #11
  %84 = bitcast i8** %5 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = ptrtoint i8* %51 to i64
  %87 = sub i64 %85, %86
  %88 = trunc i64 %87 to i32
  store i32 %88, i32* %9, align 4
  %89 = bitcast i8** %6 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = ptrtoint i8* %49 to i64
  %92 = sub i64 %90, %91
  %93 = trunc i64 %92 to i32
  store i32 %93, i32* %8, align 4
  %94 = load i32, i32* %7, align 4
  %95 = icmp slt i32 %94, 1
  br i1 %95, label %99, label %96

96:                                               ; preds = %71
  switch i32 %94, label %97 [
    i32 15, label %99
    i32 12, label %98
    i32 10, label %98
  ]

97:                                               ; preds = %96
  br label %99

98:                                               ; preds = %96, %96
  br label %99

99:                                               ; preds = %71, %70, %96, %97, %98
  %100 = phi i32 [ %88, %97 ], [ %34, %70 ], [ %88, %96 ], [ %88, %98 ], [ %88, %71 ]
  %101 = phi i32 [ -3, %97 ], [ -1, %70 ], [ -1, %96 ], [ -2, %98 ], [ 0, %71 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %66) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %65) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64) #11
  br label %113

102:                                              ; preds = %59
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  br label %103

103:                                              ; preds = %102, %55
  %104 = phi i32 [ %58, %55 ], [ 0, %102 ]
  %105 = phi i32 [ 0, %55 ], [ -2, %102 ]
  %106 = call i32 @xmlBufferShrink(%struct._xmlBuffer* nonnull %2, i32 %104) #11
  %107 = load i32, i32* %8, align 4
  %108 = load i32, i32* %20, align 8
  %109 = add i32 %108, %107
  store i32 %109, i32* %20, align 8
  %110 = load i8*, i8** %46, align 8
  %111 = zext i32 %109 to i64
  %112 = getelementptr inbounds i8, i8* %110, i64 %111
  store i8 0, i8* %112, align 1
  br label %124

113:                                              ; preds = %55, %99
  %114 = phi i32 [ %100, %99 ], [ %58, %55 ]
  %115 = phi i32 [ %101, %99 ], [ %56, %55 ]
  %116 = call i32 @xmlBufferShrink(%struct._xmlBuffer* nonnull %2, i32 %114) #11
  %117 = load i32, i32* %8, align 4
  %118 = load i32, i32* %20, align 8
  %119 = add i32 %118, %117
  store i32 %119, i32* %20, align 8
  %120 = load i8*, i8** %46, align 8
  %121 = zext i32 %119 to i64
  %122 = getelementptr inbounds i8, i8* %120, i64 %121
  store i8 0, i8* %122, align 1
  switch i32 %115, label %124 [
    i32 -1, label %123
    i32 -3, label %123
  ]

123:                                              ; preds = %113, %113
  br label %124

124:                                              ; preds = %103, %113, %123
  %125 = phi i32 [ 0, %123 ], [ %115, %113 ], [ %105, %103 ]
  %126 = load i32, i32* %8, align 4
  %127 = icmp eq i32 %126, 0
  %128 = select i1 %127, i32 %125, i32 %126
  br label %129

129:                                              ; preds = %4, %124
  %130 = phi i32 [ %128, %124 ], [ -1, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #11
  ret i32 %130
}

declare i32 @xmlBufferGrow(%struct._xmlBuffer*, i32) local_unnamed_addr #8

declare i32 @xmlBufferShrink(%struct._xmlBuffer*, i32) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @xmlCharEncFirstLine(%struct._xmlCharEncodingHandler* readonly, %struct._xmlBuffer*, %struct._xmlBuffer*) local_unnamed_addr #3 {
  %4 = tail call i32 @xmlCharEncFirstLineInt(%struct._xmlCharEncodingHandler* %0, %struct._xmlBuffer* %1, %struct._xmlBuffer* %2, i32 -1)
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @xmlCharEncFirstLineInput(%struct._xmlParserInputBuffer* readonly, i32) local_unnamed_addr #3 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [50 x i8], align 16
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #11
  store i32 -1431655766, i32* %6, align 4
  %10 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #11
  store i32 -1431655766, i32* %7, align 4
  %11 = icmp eq %struct._xmlParserInputBuffer* %0, null
  br i1 %11, label %148, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct._xmlParserInputBuffer, %struct._xmlParserInputBuffer* %0, i64 0, i32 3
  %14 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %13, align 8
  %15 = icmp eq %struct._xmlCharEncodingHandler* %14, null
  br i1 %15, label %148, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct._xmlParserInputBuffer, %struct._xmlParserInputBuffer* %0, i64 0, i32 4
  %18 = load %struct._xmlBuf*, %struct._xmlBuf** %17, align 8
  %19 = icmp eq %struct._xmlBuf* %18, null
  br i1 %19, label %148, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct._xmlParserInputBuffer, %struct._xmlParserInputBuffer* %0, i64 0, i32 5
  %22 = load %struct._xmlBuf*, %struct._xmlBuf** %21, align 8
  %23 = icmp eq %struct._xmlBuf* %22, null
  br i1 %23, label %148, label %24

24:                                               ; preds = %20
  %25 = tail call i64 @xmlBufUse(%struct._xmlBuf* nonnull %22) #11
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %148, label %27

27:                                               ; preds = %24
  %28 = tail call i64 @xmlBufAvail(%struct._xmlBuf* nonnull %18) #11
  %29 = add i64 %28, -1
  %30 = icmp sgt i32 %1, -1
  br i1 %30, label %31, label %36

31:                                               ; preds = %27
  %32 = zext i32 %1 to i64
  %33 = icmp ugt i64 %25, %32
  %34 = sext i32 %1 to i64
  %35 = select i1 %33, i64 %34, i64 %25
  br label %39

36:                                               ; preds = %27
  %37 = icmp ult i64 %25, 180
  %38 = select i1 %37, i64 %25, i64 180
  br label %39

39:                                               ; preds = %36, %31
  %40 = phi i64 [ %35, %31 ], [ %38, %36 ]
  %41 = shl i64 %40, 1
  %42 = icmp ult i64 %41, %29
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = trunc i64 %41 to i32
  %45 = tail call i32 @xmlBufGrow(%struct._xmlBuf* nonnull %18, i32 %44) #11
  %46 = tail call i64 @xmlBufAvail(%struct._xmlBuf* nonnull %18) #11
  %47 = add i64 %46, -1
  br label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %47, %43 ], [ %29, %39 ]
  %50 = icmp ult i64 %49, 360
  %51 = select i1 %50, i64 %49, i64 360
  %52 = trunc i64 %40 to i32
  store i32 %52, i32* %6, align 4
  %53 = trunc i64 %51 to i32
  store i32 %53, i32* %7, align 4
  %54 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %13, align 8
  %55 = tail call i8* @xmlBufEnd(%struct._xmlBuf* nonnull %18) #11
  %56 = tail call i8* @xmlBufContent(%struct._xmlBuf* nonnull %22) #11
  %57 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %54, i64 0, i32 1
  %58 = load i32 (i8*, i32*, i8*, i32*)*, i32 (i8*, i32*, i8*, i32*)** %57, align 8
  %59 = icmp eq i32 (i8*, i32*, i8*, i32*)* %58, null
  br i1 %59, label %70, label %60

60:                                               ; preds = %48
  %61 = call i32 %58(i8* %55, i32* nonnull %7, i8* %56, i32* nonnull %6) #11
  %62 = icmp slt i32 %61, 0
  %63 = load i32, i32* %6, align 4
  br i1 %62, label %118, label %64

64:                                               ; preds = %60
  %65 = sext i32 %63 to i64
  %66 = call i64 @xmlBufShrink(%struct._xmlBuf* nonnull %22, i64 %65) #11
  %67 = load i32, i32* %7, align 4
  %68 = sext i32 %67 to i64
  %69 = call i32 @xmlBufAddLen(%struct._xmlBuf* nonnull %18, i64 %68) #11
  br label %143

70:                                               ; preds = %48
  %71 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %54, i64 0, i32 3
  %72 = load %struct._uconv_t*, %struct._uconv_t** %71, align 8
  %73 = icmp eq %struct._uconv_t* %72, null
  br i1 %73, label %113, label %74

74:                                               ; preds = %70
  %75 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %75) #11
  store i8* %56, i8** %3, align 8
  %76 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #11
  store i8* %55, i8** %4, align 8
  %77 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %77) #11
  store i32 0, i32* %5, align 4
  %78 = icmp eq i8* %55, null
  %79 = icmp eq i8* %56, null
  %80 = or i1 %78, %79
  br i1 %80, label %81, label %82

81:                                               ; preds = %74
  store i32 0, i32* %7, align 4
  br label %110

82:                                               ; preds = %74
  %83 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %72, i64 0, i32 1
  %84 = load %struct.UConverter*, %struct.UConverter** %83, align 8
  %85 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %72, i64 0, i32 0
  %86 = load %struct.UConverter*, %struct.UConverter** %85, align 8
  %87 = getelementptr inbounds i8, i8* %55, i64 %51
  %88 = shl i64 %40, 32
  %89 = ashr exact i64 %88, 32
  %90 = getelementptr inbounds i8, i8* %56, i64 %89
  %91 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %72, i64 0, i32 2, i64 0
  %92 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %72, i64 0, i32 3
  %93 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %72, i64 0, i32 4
  %94 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %72, i64 0, i32 2, i64 1024
  call void @ucnv_convertEx_69(%struct.UConverter* %84, %struct.UConverter* %86, i8** nonnull %4, i8* %87, i8** nonnull %3, i8* %90, i16* %91, i16** %92, i16** %93, i16* %94, i8 signext 0, i8 signext 0, i32* nonnull %5) #11
  %95 = bitcast i8** %3 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = ptrtoint i8* %56 to i64
  %98 = sub i64 %96, %97
  %99 = trunc i64 %98 to i32
  store i32 %99, i32* %6, align 4
  %100 = bitcast i8** %4 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = ptrtoint i8* %55 to i64
  %103 = sub i64 %101, %102
  %104 = trunc i64 %103 to i32
  store i32 %104, i32* %7, align 4
  %105 = load i32, i32* %5, align 4
  %106 = icmp slt i32 %105, 1
  br i1 %106, label %110, label %107

107:                                              ; preds = %82
  switch i32 %105, label %108 [
    i32 15, label %110
    i32 12, label %109
    i32 10, label %109
  ]

108:                                              ; preds = %107
  br label %110

109:                                              ; preds = %107, %107
  br label %110

110:                                              ; preds = %82, %81, %107, %108, %109
  %111 = phi i32 [ %99, %108 ], [ %52, %81 ], [ %99, %107 ], [ %99, %109 ], [ %99, %82 ]
  %112 = phi i32 [ -3, %108 ], [ -1, %81 ], [ -1, %107 ], [ -2, %109 ], [ 0, %82 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %77) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75) #11
  br label %118

113:                                              ; preds = %70
  store i32 0, i32* %7, align 4
  store i32 0, i32* %6, align 4
  %114 = call i64 @xmlBufShrink(%struct._xmlBuf* nonnull %22, i64 0) #11
  %115 = load i32, i32* %7, align 4
  %116 = sext i32 %115 to i64
  %117 = call i32 @xmlBufAddLen(%struct._xmlBuf* nonnull %18, i64 %116) #11
  br label %126

118:                                              ; preds = %60, %110
  %119 = phi i32 [ %111, %110 ], [ %63, %60 ]
  %120 = phi i32 [ %112, %110 ], [ %61, %60 ]
  %121 = sext i32 %119 to i64
  %122 = call i64 @xmlBufShrink(%struct._xmlBuf* nonnull %22, i64 %121) #11
  %123 = load i32, i32* %7, align 4
  %124 = sext i32 %123 to i64
  %125 = call i32 @xmlBufAddLen(%struct._xmlBuf* nonnull %18, i64 %124) #11
  switch i32 %120, label %143 [
    i32 -1, label %142
    i32 -2, label %126
    i32 -3, label %142
  ]

126:                                              ; preds = %113, %118
  %127 = getelementptr inbounds [50 x i8], [50 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %127) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %127, i8 -86, i64 50, i1 false)
  %128 = call i8* @xmlBufContent(%struct._xmlBuf* nonnull %22) #11
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = getelementptr inbounds i8, i8* %128, i64 1
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = getelementptr inbounds i8, i8* %128, i64 2
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = getelementptr inbounds i8, i8* %128, i64 3
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %127, i64 49, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.47, i64 0, i64 0), i32 %130, i32 %133, i32 %136, i32 %139) #11
  %141 = getelementptr inbounds [50 x i8], [50 x i8]* %8, i64 0, i64 49
  store i8 0, i8* %141, align 1
  call void (void (i8*, %struct._xmlError*)*, void (i8*, i8*, ...)*, i8*, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, ...) @__xmlRaiseError(void (i8*, %struct._xmlError*)* null, void (i8*, i8*, ...)* null, i8* null, i8* null, i8* null, i32 27, i32 6003, i32 3, i8* null, i32 0, i8* nonnull %127, i8* null, i8* null, i32 0, i32 0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.48, i64 0, i64 0), i8* nonnull %127) #11
  call void @llvm.lifetime.end.p0i8(i64 50, i8* nonnull %127) #11
  br label %143

142:                                              ; preds = %118, %118
  br label %143

143:                                              ; preds = %64, %118, %126, %142
  %144 = phi i32 [ 0, %142 ], [ -2, %126 ], [ %120, %118 ], [ 0, %64 ]
  %145 = load i32, i32* %7, align 4
  %146 = icmp eq i32 %145, 0
  %147 = select i1 %146, i32 %144, i32 %145
  br label %148

148:                                              ; preds = %24, %2, %12, %16, %20, %143
  %149 = phi i32 [ %147, %143 ], [ -1, %20 ], [ -1, %16 ], [ -1, %12 ], [ -1, %2 ], [ 0, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #11
  ret i32 %149
}

declare i64 @xmlBufUse(%struct._xmlBuf*) local_unnamed_addr #8

declare i64 @xmlBufAvail(%struct._xmlBuf*) local_unnamed_addr #8

declare i32 @xmlBufGrow(%struct._xmlBuf*, i32) local_unnamed_addr #8

declare i8* @xmlBufEnd(%struct._xmlBuf*) local_unnamed_addr #8

declare i8* @xmlBufContent(%struct._xmlBuf*) local_unnamed_addr #8

declare i64 @xmlBufShrink(%struct._xmlBuf*, i64) local_unnamed_addr #8

declare i32 @xmlBufAddLen(%struct._xmlBuf*, i64) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define hidden i32 @xmlCharEncInput(%struct._xmlParserInputBuffer* readonly, i32) local_unnamed_addr #3 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [50 x i8], align 16
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #11
  store i32 -1431655766, i32* %6, align 4
  %10 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #11
  store i32 -1431655766, i32* %7, align 4
  %11 = icmp eq %struct._xmlParserInputBuffer* %0, null
  br i1 %11, label %150, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct._xmlParserInputBuffer, %struct._xmlParserInputBuffer* %0, i64 0, i32 3
  %14 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %13, align 8
  %15 = icmp eq %struct._xmlCharEncodingHandler* %14, null
  br i1 %15, label %150, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct._xmlParserInputBuffer, %struct._xmlParserInputBuffer* %0, i64 0, i32 4
  %18 = load %struct._xmlBuf*, %struct._xmlBuf** %17, align 8
  %19 = icmp eq %struct._xmlBuf* %18, null
  br i1 %19, label %150, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct._xmlParserInputBuffer, %struct._xmlParserInputBuffer* %0, i64 0, i32 5
  %22 = load %struct._xmlBuf*, %struct._xmlBuf** %21, align 8
  %23 = icmp eq %struct._xmlBuf* %22, null
  br i1 %23, label %150, label %24

24:                                               ; preds = %20
  %25 = tail call i64 @xmlBufUse(%struct._xmlBuf* nonnull %22) #11
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %150, label %27

27:                                               ; preds = %24
  %28 = icmp ugt i64 %25, 65536
  %29 = icmp eq i32 %1, 0
  %30 = and i1 %29, %28
  %31 = select i1 %30, i64 65536, i64 %25
  %32 = tail call i64 @xmlBufAvail(%struct._xmlBuf* nonnull %18) #11
  %33 = icmp eq i64 %32, 0
  %34 = add i64 %32, -1
  %35 = select i1 %33, i64 0, i64 %34
  %36 = shl i64 %31, 1
  %37 = icmp ult i64 %36, %35
  br i1 %37, label %45, label %38

38:                                               ; preds = %27
  %39 = trunc i64 %36 to i32
  %40 = tail call i32 @xmlBufGrow(%struct._xmlBuf* nonnull %18, i32 %39) #11
  %41 = tail call i64 @xmlBufAvail(%struct._xmlBuf* nonnull %18) #11
  %42 = icmp eq i64 %41, 0
  %43 = add i64 %41, -1
  %44 = select i1 %42, i64 0, i64 %43
  br label %45

45:                                               ; preds = %38, %27
  %46 = phi i64 [ %35, %27 ], [ %44, %38 ]
  %47 = icmp ugt i64 %46, 131072
  %48 = and i1 %29, %47
  %49 = trunc i64 %31 to i32
  store i32 %49, i32* %6, align 4
  %50 = trunc i64 %46 to i32
  %51 = select i1 %48, i32 131072, i32 %50
  store i32 %51, i32* %7, align 4
  %52 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %13, align 8
  %53 = tail call i8* @xmlBufEnd(%struct._xmlBuf* nonnull %18) #11
  %54 = tail call i8* @xmlBufContent(%struct._xmlBuf* nonnull %22) #11
  %55 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %52, i64 0, i32 1
  %56 = load i32 (i8*, i32*, i8*, i32*)*, i32 (i8*, i32*, i8*, i32*)** %55, align 8
  %57 = icmp eq i32 (i8*, i32*, i8*, i32*)* %56, null
  br i1 %57, label %68, label %58

58:                                               ; preds = %45
  %59 = call i32 %56(i8* %53, i32* nonnull %7, i8* %54, i32* nonnull %6) #11
  %60 = icmp slt i32 %59, 0
  %61 = load i32, i32* %6, align 4
  br i1 %60, label %120, label %62

62:                                               ; preds = %58
  %63 = sext i32 %61 to i64
  %64 = call i64 @xmlBufShrink(%struct._xmlBuf* nonnull %22, i64 %63) #11
  %65 = load i32, i32* %7, align 4
  %66 = sext i32 %65 to i64
  %67 = call i32 @xmlBufAddLen(%struct._xmlBuf* nonnull %18, i64 %66) #11
  br label %145

68:                                               ; preds = %45
  %69 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %52, i64 0, i32 3
  %70 = load %struct._uconv_t*, %struct._uconv_t** %69, align 8
  %71 = icmp eq %struct._uconv_t* %70, null
  br i1 %71, label %115, label %72

72:                                               ; preds = %68
  %73 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #11
  store i8* %54, i8** %3, align 8
  %74 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #11
  store i8* %53, i8** %4, align 8
  %75 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %75) #11
  store i32 0, i32* %5, align 4
  %76 = icmp eq i8* %53, null
  %77 = icmp eq i8* %54, null
  %78 = or i1 %76, %77
  br i1 %78, label %79, label %80

79:                                               ; preds = %72
  store i32 0, i32* %7, align 4
  br label %112

80:                                               ; preds = %72
  %81 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %70, i64 0, i32 1
  %82 = load %struct.UConverter*, %struct.UConverter** %81, align 8
  %83 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %70, i64 0, i32 0
  %84 = load %struct.UConverter*, %struct.UConverter** %83, align 8
  %85 = sext i32 %51 to i64
  %86 = getelementptr inbounds i8, i8* %53, i64 %85
  %87 = shl i64 %31, 32
  %88 = ashr exact i64 %87, 32
  %89 = getelementptr inbounds i8, i8* %54, i64 %88
  %90 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %70, i64 0, i32 2, i64 0
  %91 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %70, i64 0, i32 3
  %92 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %70, i64 0, i32 4
  %93 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %70, i64 0, i32 2, i64 1024
  %94 = trunc i32 %1 to i8
  call void @ucnv_convertEx_69(%struct.UConverter* %82, %struct.UConverter* %84, i8** nonnull %4, i8* %86, i8** nonnull %3, i8* %89, i16* %90, i16** %91, i16** %92, i16* %93, i8 signext 0, i8 signext %94, i32* nonnull %5) #11
  %95 = bitcast i8** %3 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = ptrtoint i8* %54 to i64
  %98 = sub i64 %96, %97
  %99 = trunc i64 %98 to i32
  store i32 %99, i32* %6, align 4
  %100 = bitcast i8** %4 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = ptrtoint i8* %53 to i64
  %103 = sub i64 %101, %102
  %104 = trunc i64 %103 to i32
  store i32 %104, i32* %7, align 4
  %105 = load i32, i32* %5, align 4
  %106 = icmp slt i32 %105, 1
  br i1 %106, label %107, label %109

107:                                              ; preds = %80
  br i1 %29, label %112, label %108

108:                                              ; preds = %107
  store i16* %90, i16** %92, align 8
  store i16* %90, i16** %91, align 8
  br label %112

109:                                              ; preds = %80
  switch i32 %105, label %110 [
    i32 15, label %112
    i32 12, label %111
    i32 10, label %111
  ]

110:                                              ; preds = %109
  br label %112

111:                                              ; preds = %109, %109
  br label %112

112:                                              ; preds = %79, %107, %108, %109, %110, %111
  %113 = phi i32 [ %99, %110 ], [ %49, %79 ], [ %99, %107 ], [ %99, %108 ], [ %99, %109 ], [ %99, %111 ]
  %114 = phi i32 [ -3, %110 ], [ -1, %79 ], [ 0, %107 ], [ 0, %108 ], [ -1, %109 ], [ -2, %111 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73) #11
  br label %120

115:                                              ; preds = %68
  store i32 0, i32* %7, align 4
  store i32 0, i32* %6, align 4
  %116 = call i64 @xmlBufShrink(%struct._xmlBuf* nonnull %22, i64 0) #11
  %117 = load i32, i32* %7, align 4
  %118 = sext i32 %117 to i64
  %119 = call i32 @xmlBufAddLen(%struct._xmlBuf* nonnull %18, i64 %118) #11
  br label %128

120:                                              ; preds = %58, %112
  %121 = phi i32 [ %113, %112 ], [ %61, %58 ]
  %122 = phi i32 [ %114, %112 ], [ %59, %58 ]
  %123 = sext i32 %121 to i64
  %124 = call i64 @xmlBufShrink(%struct._xmlBuf* nonnull %22, i64 %123) #11
  %125 = load i32, i32* %7, align 4
  %126 = sext i32 %125 to i64
  %127 = call i32 @xmlBufAddLen(%struct._xmlBuf* nonnull %18, i64 %126) #11
  switch i32 %122, label %145 [
    i32 -1, label %144
    i32 -2, label %128
    i32 -3, label %144
  ]

128:                                              ; preds = %115, %120
  %129 = getelementptr inbounds [50 x i8], [50 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %129) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %129, i8 -86, i64 50, i1 false)
  %130 = call i8* @xmlBufContent(%struct._xmlBuf* nonnull %22) #11
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = getelementptr inbounds i8, i8* %130, i64 1
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = getelementptr inbounds i8, i8* %130, i64 2
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = getelementptr inbounds i8, i8* %130, i64 3
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %129, i64 49, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.47, i64 0, i64 0), i32 %132, i32 %135, i32 %138, i32 %141) #11
  %143 = getelementptr inbounds [50 x i8], [50 x i8]* %8, i64 0, i64 49
  store i8 0, i8* %143, align 1
  call void (void (i8*, %struct._xmlError*)*, void (i8*, i8*, ...)*, i8*, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, ...) @__xmlRaiseError(void (i8*, %struct._xmlError*)* null, void (i8*, i8*, ...)* null, i8* null, i8* null, i8* null, i32 27, i32 6003, i32 3, i8* null, i32 0, i8* nonnull %129, i8* null, i8* null, i32 0, i32 0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.48, i64 0, i64 0), i8* nonnull %129) #11
  call void @llvm.lifetime.end.p0i8(i64 50, i8* nonnull %129) #11
  br label %145

144:                                              ; preds = %120, %120
  br label %145

145:                                              ; preds = %62, %120, %128, %144
  %146 = phi i32 [ 0, %144 ], [ -2, %128 ], [ %122, %120 ], [ 0, %62 ]
  %147 = load i32, i32* %7, align 4
  %148 = icmp eq i32 %147, 0
  %149 = select i1 %148, i32 %146, i32 %147
  br label %150

150:                                              ; preds = %24, %2, %12, %16, %20, %145
  %151 = phi i32 [ %149, %145 ], [ -1, %20 ], [ -1, %16 ], [ -1, %12 ], [ -1, %2 ], [ 0, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #11
  ret i32 %151
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @xmlCharEncInFunc(%struct._xmlCharEncodingHandler* readonly, %struct._xmlBuffer*, %struct._xmlBuffer*) local_unnamed_addr #3 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [50 x i8], align 16
  %10 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #11
  store i32 -1431655766, i32* %7, align 4
  %11 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #11
  store i32 -1431655766, i32* %8, align 4
  %12 = icmp eq %struct._xmlCharEncodingHandler* %0, null
  %13 = icmp eq %struct._xmlBuffer* %1, null
  %14 = or i1 %12, %13
  %15 = icmp eq %struct._xmlBuffer* %2, null
  %16 = or i1 %14, %15
  br i1 %16, label %145, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %2, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  store i32 %19, i32* %8, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %145, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %1, i64 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %1, i64 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = xor i32 %25, -1
  %27 = add i32 %23, %26
  store i32 %27, i32* %7, align 4
  %28 = shl nsw i32 %19, 1
  %29 = icmp slt i32 %28, %27
  br i1 %29, label %37, label %30

30:                                               ; preds = %21
  %31 = add i32 %23, %28
  %32 = tail call i32 @xmlBufferGrow(%struct._xmlBuffer* nonnull %1, i32 %31) #11
  %33 = load i32, i32* %22, align 4
  %34 = load i32, i32* %24, align 8
  %35 = xor i32 %34, -1
  %36 = add i32 %33, %35
  store i32 %36, i32* %7, align 4
  br label %37

37:                                               ; preds = %21, %30
  %38 = phi i32 [ %27, %21 ], [ %36, %30 ]
  %39 = phi i32 [ %25, %21 ], [ %34, %30 ]
  %40 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %1, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = zext i32 %39 to i64
  %43 = getelementptr inbounds i8, i8* %41, i64 %42
  %44 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %2, i64 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 1
  %47 = load i32 (i8*, i32*, i8*, i32*)*, i32 (i8*, i32*, i8*, i32*)** %46, align 8
  %48 = icmp eq i32 (i8*, i32*, i8*, i32*)* %47, null
  br i1 %48, label %61, label %49

49:                                               ; preds = %37
  %50 = call i32 %47(i8* %43, i32* nonnull %7, i8* %45, i32* nonnull %8) #11
  %51 = icmp slt i32 %50, 0
  %52 = load i32, i32* %8, align 4
  br i1 %51, label %113, label %53

53:                                               ; preds = %49
  %54 = call i32 @xmlBufferShrink(%struct._xmlBuffer* nonnull %2, i32 %52) #11
  %55 = load i32, i32* %7, align 4
  %56 = load i32, i32* %24, align 8
  %57 = add i32 %56, %55
  store i32 %57, i32* %24, align 8
  %58 = load i8*, i8** %40, align 8
  %59 = zext i32 %57 to i64
  %60 = getelementptr inbounds i8, i8* %58, i64 %59
  store i8 0, i8* %60, align 1
  br label %140

61:                                               ; preds = %37
  %62 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 3
  %63 = load %struct._uconv_t*, %struct._uconv_t** %62, align 8
  %64 = icmp eq %struct._uconv_t* %63, null
  br i1 %64, label %105, label %65

65:                                               ; preds = %61
  %66 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #11
  store i8* %45, i8** %4, align 8
  %67 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %67) #11
  store i8* %43, i8** %5, align 8
  %68 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %68) #11
  store i32 0, i32* %6, align 4
  %69 = icmp eq i8* %43, null
  %70 = icmp eq i8* %45, null
  %71 = or i1 %70, %69
  br i1 %71, label %72, label %73

72:                                               ; preds = %65
  store i32 0, i32* %7, align 4
  br label %102

73:                                               ; preds = %65
  %74 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %63, i64 0, i32 1
  %75 = load %struct.UConverter*, %struct.UConverter** %74, align 8
  %76 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %63, i64 0, i32 0
  %77 = load %struct.UConverter*, %struct.UConverter** %76, align 8
  %78 = sext i32 %38 to i64
  %79 = getelementptr inbounds i8, i8* %43, i64 %78
  %80 = sext i32 %19 to i64
  %81 = getelementptr inbounds i8, i8* %45, i64 %80
  %82 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %63, i64 0, i32 2, i64 0
  %83 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %63, i64 0, i32 3
  %84 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %63, i64 0, i32 4
  %85 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %63, i64 0, i32 2, i64 1024
  call void @ucnv_convertEx_69(%struct.UConverter* %75, %struct.UConverter* %77, i8** nonnull %5, i8* %79, i8** nonnull %4, i8* %81, i16* %82, i16** %83, i16** %84, i16* %85, i8 signext 0, i8 signext 1, i32* nonnull %6) #11
  %86 = bitcast i8** %4 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = ptrtoint i8* %45 to i64
  %89 = sub i64 %87, %88
  %90 = trunc i64 %89 to i32
  store i32 %90, i32* %8, align 4
  %91 = bitcast i8** %5 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = ptrtoint i8* %43 to i64
  %94 = sub i64 %92, %93
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %7, align 4
  %96 = load i32, i32* %6, align 4
  %97 = icmp slt i32 %96, 1
  br i1 %97, label %98, label %99

98:                                               ; preds = %73
  store i16* %82, i16** %84, align 8
  store i16* %82, i16** %83, align 8
  br label %102

99:                                               ; preds = %73
  switch i32 %96, label %100 [
    i32 15, label %102
    i32 12, label %101
    i32 10, label %101
  ]

100:                                              ; preds = %99
  br label %102

101:                                              ; preds = %99, %99
  br label %102

102:                                              ; preds = %72, %98, %99, %100, %101
  %103 = phi i32 [ %90, %100 ], [ %19, %72 ], [ %90, %98 ], [ %90, %99 ], [ %90, %101 ]
  %104 = phi i32 [ -3, %100 ], [ -1, %72 ], [ 0, %98 ], [ -1, %99 ], [ -2, %101 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %67) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #11
  br label %113

105:                                              ; preds = %61
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %106 = call i32 @xmlBufferShrink(%struct._xmlBuffer* nonnull %2, i32 0) #11
  %107 = load i32, i32* %7, align 4
  %108 = load i32, i32* %24, align 8
  %109 = add i32 %108, %107
  store i32 %109, i32* %24, align 8
  %110 = load i8*, i8** %40, align 8
  %111 = zext i32 %109 to i64
  %112 = getelementptr inbounds i8, i8* %110, i64 %111
  store i8 0, i8* %112, align 1
  br label %123

113:                                              ; preds = %49, %102
  %114 = phi i32 [ %103, %102 ], [ %52, %49 ]
  %115 = phi i32 [ %104, %102 ], [ %50, %49 ]
  %116 = call i32 @xmlBufferShrink(%struct._xmlBuffer* nonnull %2, i32 %114) #11
  %117 = load i32, i32* %7, align 4
  %118 = load i32, i32* %24, align 8
  %119 = add i32 %118, %117
  store i32 %119, i32* %24, align 8
  %120 = load i8*, i8** %40, align 8
  %121 = zext i32 %119 to i64
  %122 = getelementptr inbounds i8, i8* %120, i64 %121
  store i8 0, i8* %122, align 1
  switch i32 %115, label %140 [
    i32 -1, label %139
    i32 -2, label %123
    i32 -3, label %139
  ]

123:                                              ; preds = %105, %113
  %124 = getelementptr inbounds [50 x i8], [50 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %124) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %124, i8 -86, i64 50, i1 false)
  %125 = load i8*, i8** %44, align 8
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = getelementptr inbounds i8, i8* %125, i64 1
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = getelementptr inbounds i8, i8* %125, i64 2
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = getelementptr inbounds i8, i8* %125, i64 3
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %124, i64 49, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.47, i64 0, i64 0), i32 %127, i32 %130, i32 %133, i32 %136) #11
  %138 = getelementptr inbounds [50 x i8], [50 x i8]* %9, i64 0, i64 49
  store i8 0, i8* %138, align 1
  call void (void (i8*, %struct._xmlError*)*, void (i8*, i8*, ...)*, i8*, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, ...) @__xmlRaiseError(void (i8*, %struct._xmlError*)* null, void (i8*, i8*, ...)* null, i8* null, i8* null, i8* null, i32 27, i32 6003, i32 3, i8* null, i32 0, i8* nonnull %124, i8* null, i8* null, i32 0, i32 0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.48, i64 0, i64 0), i8* nonnull %124) #11
  call void @llvm.lifetime.end.p0i8(i64 50, i8* nonnull %124) #11
  br label %140

139:                                              ; preds = %113, %113
  br label %140

140:                                              ; preds = %53, %113, %123, %139
  %141 = phi i32 [ 0, %139 ], [ -2, %123 ], [ %115, %113 ], [ 0, %53 ]
  %142 = load i32, i32* %7, align 4
  %143 = icmp eq i32 %142, 0
  %144 = select i1 %143, i32 %141, i32 %142
  br label %145

145:                                              ; preds = %17, %3, %140
  %146 = phi i32 [ %144, %140 ], [ -1, %3 ], [ 0, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #11
  ret i32 %146
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @xmlCharEncOutput(%struct._xmlOutputBuffer* readonly, i32) local_unnamed_addr #3 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [20 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca [50 x i8], align 16
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #11
  store i32 -1431655766, i32* %3, align 4
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #11
  store i32 -1431655766, i32* %4, align 4
  %10 = icmp eq %struct._xmlOutputBuffer* %0, null
  br i1 %10, label %150, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct._xmlOutputBuffer, %struct._xmlOutputBuffer* %0, i64 0, i32 3
  %13 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %12, align 8
  %14 = icmp eq %struct._xmlCharEncodingHandler* %13, null
  br i1 %14, label %150, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct._xmlOutputBuffer, %struct._xmlOutputBuffer* %0, i64 0, i32 4
  %17 = load %struct._xmlBuf*, %struct._xmlBuf** %16, align 8
  %18 = icmp eq %struct._xmlBuf* %17, null
  br i1 %18, label %150, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct._xmlOutputBuffer, %struct._xmlOutputBuffer* %0, i64 0, i32 5
  %21 = load %struct._xmlBuf*, %struct._xmlBuf** %20, align 8
  %22 = icmp eq %struct._xmlBuf* %21, null
  br i1 %22, label %150, label %23

23:                                               ; preds = %19
  %24 = call i64 @xmlBufAvail(%struct._xmlBuf* nonnull %21) #11
  %25 = icmp eq i64 %24, 0
  %26 = add i64 %24, -1
  %27 = select i1 %25, i64 0, i64 %26
  %28 = icmp eq i32 %1, 0
  br i1 %28, label %29, label %34

29:                                               ; preds = %23
  %30 = getelementptr inbounds [20 x i8], [20 x i8]* %5, i64 0, i64 0
  %31 = bitcast i32* %6 to i8*
  %32 = call i64 @xmlBufUse(%struct._xmlBuf* nonnull %17) #11
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %150, label %54

34:                                               ; preds = %23
  store i32 0, i32* %3, align 4
  %35 = trunc i64 %27 to i32
  store i32 %35, i32* %4, align 4
  %36 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %12, align 8
  %37 = call i8* @xmlBufEnd(%struct._xmlBuf* nonnull %21) #11
  %38 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %36, i64 0, i32 2
  %39 = load i32 (i8*, i32*, i8*, i32*)*, i32 (i8*, i32*, i8*, i32*)** %38, align 8
  %40 = icmp eq i32 (i8*, i32*, i8*, i32*)* %39, null
  br i1 %40, label %45, label %41

41:                                               ; preds = %34
  %42 = call i32 %39(i8* %37, i32* nonnull %4, i8* null, i32* nonnull %3) #11
  %43 = load i32, i32* %4, align 4
  %44 = sext i32 %43 to i64
  br label %50

45:                                               ; preds = %34
  %46 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %36, i64 0, i32 4
  %47 = load %struct._uconv_t*, %struct._uconv_t** %46, align 8
  %48 = icmp eq %struct._uconv_t* %47, null
  store i32 0, i32* %4, align 4
  br i1 %48, label %49, label %50

49:                                               ; preds = %45
  store i32 0, i32* %3, align 4
  br label %50

50:                                               ; preds = %45, %41, %49
  %51 = phi i64 [ 0, %45 ], [ %44, %41 ], [ 0, %49 ]
  %52 = call i32 @xmlBufAddLen(%struct._xmlBuf* nonnull %21, i64 %51) #11
  %53 = load i32, i32* %4, align 4
  br label %150

54:                                               ; preds = %29, %87
  %55 = phi i64 [ %93, %87 ], [ %32, %29 ]
  %56 = phi i32 [ %88, %87 ], [ 0, %29 ]
  %57 = phi i64 [ %92, %87 ], [ %27, %29 ]
  %58 = icmp ult i64 %55, 65536
  %59 = select i1 %58, i64 %55, i64 65536
  %60 = shl nuw nsw i64 %59, 2
  %61 = icmp ult i64 %60, %57
  br i1 %61, label %67, label %62

62:                                               ; preds = %54
  %63 = trunc i64 %60 to i32
  %64 = call i32 @xmlBufGrow(%struct._xmlBuf* nonnull %21, i32 %63) #11
  %65 = call i64 @xmlBufAvail(%struct._xmlBuf* nonnull %21) #11
  %66 = add i64 %65, -1
  br label %67

67:                                               ; preds = %54, %62
  %68 = phi i64 [ %66, %62 ], [ %57, %54 ]
  %69 = icmp ult i64 %68, 262144
  %70 = select i1 %69, i64 %68, i64 262144
  %71 = trunc i64 %59 to i32
  store i32 %71, i32* %3, align 4
  %72 = trunc i64 %70 to i32
  store i32 %72, i32* %4, align 4
  %73 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %12, align 8
  %74 = call i8* @xmlBufEnd(%struct._xmlBuf* nonnull %21) #11
  %75 = call i8* @xmlBufContent(%struct._xmlBuf* nonnull %17) #11
  %76 = call fastcc i32 @xmlEncOutputChunk(%struct._xmlCharEncodingHandler* %73, i8* %74, i32* nonnull %4, i8* %75, i32* nonnull %3)
  %77 = load i32, i32* %3, align 4
  %78 = sext i32 %77 to i64
  %79 = call i64 @xmlBufShrink(%struct._xmlBuf* nonnull %17, i64 %78) #11
  %80 = load i32, i32* %4, align 4
  %81 = sext i32 %80 to i64
  %82 = call i32 @xmlBufAddLen(%struct._xmlBuf* nonnull %21, i64 %81) #11
  %83 = load i32, i32* %4, align 4
  %84 = add nsw i32 %83, %56
  switch i32 %76, label %146 [
    i32 -1, label %85
    i32 -2, label %96
    i32 -4, label %95
  ]

85:                                               ; preds = %67
  %86 = icmp sgt i32 %83, 0
  br i1 %86, label %87, label %146

87:                                               ; preds = %85, %140
  %88 = phi i32 [ %84, %85 ], [ %145, %140 ]
  %89 = call i64 @xmlBufAvail(%struct._xmlBuf* nonnull %21) #11
  %90 = icmp eq i64 %89, 0
  %91 = add i64 %89, -1
  %92 = select i1 %90, i64 0, i64 %91
  %93 = call i64 @xmlBufUse(%struct._xmlBuf* nonnull %17) #11
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %150, label %54

95:                                               ; preds = %67
  call void (void (i8*, %struct._xmlError*)*, void (i8*, i8*, ...)*, i8*, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, ...) @__xmlRaiseError(void (i8*, %struct._xmlError*)* null, void (i8*, i8*, ...)* null, i8* null, i8* null, i8* null, i32 27, i32 6004, i32 3, i8* null, i32 0, i8* null, i8* null, i8* null, i32 0, i32 0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.49, i64 0, i64 0), i8* null) #11
  br label %146

96:                                               ; preds = %67
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %30) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %30, i8 -86, i64 20, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #11
  store i32 -1431655766, i32* %6, align 4
  %97 = call i64 @xmlBufUse(%struct._xmlBuf* nonnull %17) #11
  %98 = trunc i64 %97 to i32
  store i32 %98, i32* %6, align 4
  %99 = call i8* @xmlBufContent(%struct._xmlBuf* nonnull %17) #11
  %100 = call i32 @xmlGetUTF8Char(i8* %99, i32* nonnull %6) #11
  %101 = icmp slt i32 %100, 1
  br i1 %101, label %138, label %102

102:                                              ; preds = %96
  %103 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %30, i64 20, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i64 0, i64 0), i32 %100) #11
  %104 = load i32, i32* %6, align 4
  %105 = sext i32 %104 to i64
  %106 = call i64 @xmlBufShrink(%struct._xmlBuf* nonnull %17, i64 %105) #11
  %107 = shl nsw i32 %103, 2
  %108 = call i32 @xmlBufGrow(%struct._xmlBuf* nonnull %21, i32 %107) #11
  %109 = call i64 @xmlBufAvail(%struct._xmlBuf* nonnull %21) #11
  %110 = trunc i64 %109 to i32
  %111 = add i32 %110, -1
  store i32 %111, i32* %4, align 4
  store i32 %103, i32* %3, align 4
  %112 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %12, align 8
  %113 = call i8* @xmlBufEnd(%struct._xmlBuf* nonnull %21) #11
  %114 = call fastcc i32 @xmlEncOutputChunk(%struct._xmlCharEncodingHandler* %112, i8* %113, i32* nonnull %4, i8* nonnull %30, i32* nonnull %3)
  %115 = icmp sgt i32 %114, -1
  %116 = load i32, i32* %3, align 4
  %117 = icmp eq i32 %116, %103
  %118 = and i1 %115, %117
  br i1 %118, label %140, label %119

119:                                              ; preds = %102
  %120 = getelementptr inbounds [50 x i8], [50 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %120) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %120, i8 -86, i64 50, i1 false)
  %121 = load i8, i8* %99, align 1
  %122 = zext i8 %121 to i32
  %123 = getelementptr inbounds i8, i8* %99, i64 1
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = getelementptr inbounds i8, i8* %99, i64 2
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = getelementptr inbounds i8, i8* %99, i64 3
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %120, i64 49, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.47, i64 0, i64 0), i32 %122, i32 %125, i32 %128, i32 %131) #11
  %133 = getelementptr inbounds [50 x i8], [50 x i8]* %7, i64 0, i64 49
  store i8 0, i8* %133, align 1
  call void (void (i8*, %struct._xmlError*)*, void (i8*, i8*, ...)*, i8*, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, ...) @__xmlRaiseError(void (i8*, %struct._xmlError*)* null, void (i8*, i8*, ...)* null, i8* null, i8* null, i8* null, i32 27, i32 6003, i32 3, i8* null, i32 0, i8* nonnull %120, i8* null, i8* null, i32 0, i32 0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.51, i64 0, i64 0), i8* nonnull %120) #11
  %134 = call i32 @xmlBufGetAllocationScheme(%struct._xmlBuf* nonnull %17) #11
  %135 = icmp eq i32 %134, 2
  br i1 %135, label %137, label %136

136:                                              ; preds = %119
  store i8 32, i8* %99, align 1
  br label %137

137:                                              ; preds = %119, %136
  call void @llvm.lifetime.end.p0i8(i64 50, i8* nonnull %120) #11
  br label %138

138:                                              ; preds = %96, %137
  %139 = phi i32 [ %114, %137 ], [ -2, %96 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #11
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %30) #11
  br label %146

140:                                              ; preds = %102
  %141 = load i32, i32* %4, align 4
  %142 = sext i32 %141 to i64
  %143 = call i32 @xmlBufAddLen(%struct._xmlBuf* nonnull %21, i64 %142) #11
  %144 = load i32, i32* %4, align 4
  %145 = add nsw i32 %144, %84
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #11
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %30) #11
  br label %87

146:                                              ; preds = %67, %85, %138, %95
  %147 = phi i32 [ -1, %95 ], [ %139, %138 ], [ %76, %67 ], [ -3, %85 ]
  %148 = icmp eq i32 %84, 0
  %149 = select i1 %148, i32 %147, i32 %84
  br label %150

150:                                              ; preds = %87, %29, %2, %11, %15, %19, %146, %50
  %151 = phi i32 [ %53, %50 ], [ %149, %146 ], [ -1, %19 ], [ -1, %15 ], [ -1, %11 ], [ -1, %2 ], [ 0, %29 ], [ 0, %87 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #11
  ret i32 %151
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @xmlEncOutputChunk(%struct._xmlCharEncodingHandler* nocapture readonly, i8*, i32*, i8*, i32*) unnamed_addr #3 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 2
  %10 = load i32 (i8*, i32*, i8*, i32*)*, i32 (i8*, i32*, i8*, i32*)** %9, align 8
  %11 = icmp eq i32 (i8*, i32*, i8*, i32*)* %10, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %5
  %13 = tail call i32 %10(i8* %1, i32* %2, i8* %3, i32* %4) #11
  %14 = icmp slt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  br label %71

16:                                               ; preds = %5
  %17 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 4
  %18 = load %struct._uconv_t*, %struct._uconv_t** %17, align 8
  %19 = icmp eq %struct._uconv_t* %18, null
  br i1 %19, label %70, label %20

20:                                               ; preds = %16
  %21 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #11
  store i8* %3, i8** %6, align 8
  %22 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #11
  store i8* %1, i8** %7, align 8
  %23 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #11
  store i32 0, i32* %8, align 4
  %24 = icmp eq i8* %1, null
  %25 = icmp eq i32* %2, null
  %26 = or i1 %24, %25
  %27 = icmp eq i32* %4, null
  %28 = or i1 %26, %27
  %29 = icmp eq i8* %3, null
  %30 = or i1 %29, %28
  br i1 %30, label %31, label %33

31:                                               ; preds = %20
  br i1 %25, label %68, label %32

32:                                               ; preds = %31
  store i32 0, i32* %2, align 4
  br label %68

33:                                               ; preds = %20
  %34 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %18, i64 0, i32 0
  %35 = load %struct.UConverter*, %struct.UConverter** %34, align 8
  %36 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %18, i64 0, i32 1
  %37 = load %struct.UConverter*, %struct.UConverter** %36, align 8
  %38 = load i32, i32* %2, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %1, i64 %39
  %41 = load i32, i32* %4, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %3, i64 %42
  %44 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %18, i64 0, i32 2, i64 0
  %45 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %18, i64 0, i32 3
  %46 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %18, i64 0, i32 4
  %47 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %18, i64 0, i32 2, i64 1024
  call void @ucnv_convertEx_69(%struct.UConverter* %35, %struct.UConverter* %37, i8** nonnull %7, i8* %40, i8** nonnull %6, i8* %43, i16* %44, i16** %45, i16** %46, i16* %47, i8 signext 0, i8 signext 1, i32* nonnull %8) #11
  %48 = bitcast i8** %6 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = ptrtoint i8* %3 to i64
  %51 = sub i64 %49, %50
  %52 = trunc i64 %51 to i32
  store i32 %52, i32* %4, align 4
  %53 = bitcast i8** %7 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = ptrtoint i8* %1 to i64
  %56 = sub i64 %54, %55
  %57 = trunc i64 %56 to i32
  store i32 %57, i32* %2, align 4
  %58 = load i32, i32* %8, align 4
  %59 = icmp slt i32 %58, 1
  br i1 %59, label %60, label %61

60:                                               ; preds = %33
  store i16* %44, i16** %46, align 8
  store i16* %44, i16** %45, align 8
  br label %68

61:                                               ; preds = %33
  %62 = add i32 %58, -10
  %63 = icmp ult i32 %62, 6
  br i1 %63, label %64, label %68

64:                                               ; preds = %61
  %65 = sext i32 %62 to i64
  %66 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.xmlEncOutputChunk, i64 0, i64 %65
  %67 = load i32, i32* %66, align 4
  br label %68

68:                                               ; preds = %61, %64, %31, %32, %60
  %69 = phi i32 [ -1, %31 ], [ -1, %32 ], [ 0, %60 ], [ %67, %64 ], [ -3, %61 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #11
  br label %71

70:                                               ; preds = %16
  store i32 0, i32* %2, align 4
  store i32 0, i32* %4, align 4
  br label %71

71:                                               ; preds = %68, %70, %12
  %72 = phi i32 [ %15, %12 ], [ %69, %68 ], [ -4, %70 ]
  ret i32 %72
}

declare i32 @xmlGetUTF8Char(i8*, i32*) local_unnamed_addr #8

declare i32 @xmlBufGetAllocationScheme(%struct._xmlBuf*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @xmlCharEncOutFunc(%struct._xmlCharEncodingHandler* readonly, %struct._xmlBuffer*, %struct._xmlBuffer*) local_unnamed_addr #3 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [20 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca [50 x i8], align 16
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #11
  store i32 -1431655766, i32* %4, align 4
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #11
  store i32 -1431655766, i32* %5, align 4
  %11 = icmp eq %struct._xmlCharEncodingHandler* %0, null
  %12 = icmp eq %struct._xmlBuffer* %1, null
  %13 = or i1 %11, %12
  br i1 %13, label %158, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %1, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = sub i32 %16, %18
  %20 = icmp sgt i32 %19, 0
  %21 = zext i1 %20 to i32
  %22 = sub i32 %19, %21
  store i32 %22, i32* %4, align 4
  %23 = icmp eq %struct._xmlBuffer* %2, null
  br i1 %23, label %32, label %24

24:                                               ; preds = %14
  %25 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %2, i64 0, i32 1
  %26 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %1, i64 0, i32 0
  %27 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %2, i64 0, i32 0
  %28 = getelementptr inbounds [20 x i8], [20 x i8]* %6, i64 0, i64 0
  %29 = bitcast i32* %7 to i8*
  %30 = load i32, i32* %25, align 8
  store i32 %30, i32* %5, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %158, label %56

32:                                               ; preds = %14
  store i32 0, i32* %5, align 4
  %33 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %1, i64 0, i32 0
  %34 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 2
  %35 = load i32 (i8*, i32*, i8*, i32*)*, i32 (i8*, i32*, i8*, i32*)** %34, align 8
  %36 = icmp eq i32 (i8*, i32*, i8*, i32*)* %35, null
  br i1 %36, label %44, label %37

37:                                               ; preds = %32
  %38 = load i8*, i8** %33, align 8
  %39 = zext i32 %18 to i64
  %40 = getelementptr inbounds i8, i8* %38, i64 %39
  %41 = call i32 %35(i8* %40, i32* nonnull %4, i8* null, i32* nonnull %5) #11
  %42 = load i32, i32* %4, align 4
  %43 = load i32, i32* %17, align 8
  br label %49

44:                                               ; preds = %32
  %45 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 4
  %46 = load %struct._uconv_t*, %struct._uconv_t** %45, align 8
  %47 = icmp eq %struct._uconv_t* %46, null
  store i32 0, i32* %4, align 4
  br i1 %47, label %48, label %49

48:                                               ; preds = %44
  store i32 0, i32* %5, align 4
  br label %49

49:                                               ; preds = %44, %37, %48
  %50 = phi i32 [ %18, %44 ], [ %43, %37 ], [ %18, %48 ]
  %51 = phi i32 [ 0, %44 ], [ %42, %37 ], [ 0, %48 ]
  %52 = add i32 %50, %51
  store i32 %52, i32* %17, align 8
  %53 = load i8*, i8** %33, align 8
  %54 = zext i32 %52 to i64
  %55 = getelementptr inbounds i8, i8* %53, i64 %54
  store i8 0, i8* %55, align 1
  br label %158

56:                                               ; preds = %24, %88
  %57 = phi i32 [ %96, %88 ], [ %30, %24 ]
  %58 = phi i32 [ %89, %88 ], [ 0, %24 ]
  %59 = phi i32 [ %95, %88 ], [ %22, %24 ]
  %60 = phi i32 [ %91, %88 ], [ %18, %24 ]
  %61 = shl nsw i32 %57, 2
  %62 = icmp slt i32 %61, %59
  br i1 %62, label %69, label %63

63:                                               ; preds = %56
  %64 = call i32 @xmlBufferGrow(%struct._xmlBuffer* nonnull %1, i32 %61) #11
  %65 = load i32, i32* %15, align 4
  %66 = load i32, i32* %17, align 8
  %67 = xor i32 %66, -1
  %68 = add i32 %65, %67
  store i32 %68, i32* %4, align 4
  br label %69

69:                                               ; preds = %56, %63
  %70 = phi i32 [ %60, %56 ], [ %66, %63 ]
  %71 = load i8*, i8** %26, align 8
  %72 = zext i32 %70 to i64
  %73 = getelementptr inbounds i8, i8* %71, i64 %72
  %74 = load i8*, i8** %27, align 8
  %75 = call fastcc i32 @xmlEncOutputChunk(%struct._xmlCharEncodingHandler* nonnull %0, i8* %73, i32* nonnull %4, i8* %74, i32* nonnull %5)
  %76 = load i32, i32* %5, align 4
  %77 = call i32 @xmlBufferShrink(%struct._xmlBuffer* nonnull %2, i32 %76) #11
  %78 = load i32, i32* %4, align 4
  %79 = load i32, i32* %17, align 8
  %80 = add i32 %79, %78
  store i32 %80, i32* %17, align 8
  %81 = add nsw i32 %78, %58
  %82 = load i8*, i8** %26, align 8
  %83 = zext i32 %80 to i64
  %84 = getelementptr inbounds i8, i8* %82, i64 %83
  store i8 0, i8* %84, align 1
  switch i32 %75, label %154 [
    i32 -1, label %85
    i32 -2, label %99
    i32 -4, label %98
  ]

85:                                               ; preds = %69
  %86 = load i32, i32* %4, align 4
  %87 = icmp sgt i32 %86, 0
  br i1 %87, label %88, label %154

88:                                               ; preds = %85, %146
  %89 = phi i32 [ %81, %85 ], [ %150, %146 ]
  %90 = load i32, i32* %15, align 4
  %91 = load i32, i32* %17, align 8
  %92 = sub i32 %90, %91
  %93 = icmp sgt i32 %92, 0
  %94 = zext i1 %93 to i32
  %95 = sub i32 %92, %94
  store i32 %95, i32* %4, align 4
  %96 = load i32, i32* %25, align 8
  store i32 %96, i32* %5, align 4
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %158, label %56

98:                                               ; preds = %69
  call void (void (i8*, %struct._xmlError*)*, void (i8*, i8*, ...)*, i8*, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, ...) @__xmlRaiseError(void (i8*, %struct._xmlError*)* null, void (i8*, i8*, ...)* null, i8* null, i8* null, i8* null, i32 27, i32 6004, i32 3, i8* null, i32 0, i8* null, i8* null, i8* null, i32 0, i32 0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.49, i64 0, i64 0), i8* null) #11
  br label %154

99:                                               ; preds = %69
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %28) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 20, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #11
  %100 = load i32, i32* %25, align 8
  store i32 %100, i32* %7, align 4
  %101 = load i8*, i8** %27, align 8
  %102 = call i32 @xmlGetUTF8Char(i8* %101, i32* nonnull %7) #11
  %103 = icmp slt i32 %102, 1
  br i1 %103, label %144, label %104

104:                                              ; preds = %99
  %105 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %28, i64 20, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i64 0, i64 0), i32 %102) #11
  %106 = load i32, i32* %7, align 4
  %107 = call i32 @xmlBufferShrink(%struct._xmlBuffer* nonnull %2, i32 %106) #11
  %108 = shl nsw i32 %105, 2
  %109 = call i32 @xmlBufferGrow(%struct._xmlBuffer* nonnull %1, i32 %108) #11
  %110 = load i32, i32* %15, align 4
  %111 = load i32, i32* %17, align 8
  %112 = xor i32 %111, -1
  %113 = add i32 %110, %112
  store i32 %113, i32* %4, align 4
  store i32 %105, i32* %5, align 4
  %114 = load i8*, i8** %26, align 8
  %115 = zext i32 %111 to i64
  %116 = getelementptr inbounds i8, i8* %114, i64 %115
  %117 = call fastcc i32 @xmlEncOutputChunk(%struct._xmlCharEncodingHandler* nonnull %0, i8* %116, i32* nonnull %4, i8* nonnull %28, i32* nonnull %5)
  %118 = icmp sgt i32 %117, -1
  %119 = load i32, i32* %5, align 4
  %120 = icmp eq i32 %119, %105
  %121 = and i1 %118, %120
  br i1 %121, label %146, label %122

122:                                              ; preds = %104
  %123 = getelementptr inbounds [50 x i8], [50 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %123) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %123, i8 -86, i64 50, i1 false)
  %124 = load i8*, i8** %27, align 8
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = getelementptr inbounds i8, i8* %124, i64 1
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = getelementptr inbounds i8, i8* %124, i64 2
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = getelementptr inbounds i8, i8* %124, i64 3
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %123, i64 49, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.47, i64 0, i64 0), i32 %126, i32 %129, i32 %132, i32 %135) #11
  %137 = getelementptr inbounds [50 x i8], [50 x i8]* %8, i64 0, i64 49
  store i8 0, i8* %137, align 1
  call void (void (i8*, %struct._xmlError*)*, void (i8*, i8*, ...)*, i8*, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, ...) @__xmlRaiseError(void (i8*, %struct._xmlError*)* null, void (i8*, i8*, ...)* null, i8* null, i8* null, i8* null, i32 27, i32 6003, i32 3, i8* null, i32 0, i8* nonnull %123, i8* null, i8* null, i32 0, i32 0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.51, i64 0, i64 0), i8* nonnull %123) #11
  %138 = getelementptr inbounds %struct._xmlBuffer, %struct._xmlBuffer* %2, i64 0, i32 3
  %139 = load i32, i32* %138, align 8
  %140 = icmp eq i32 %139, 2
  br i1 %140, label %143, label %141

141:                                              ; preds = %122
  %142 = load i8*, i8** %27, align 8
  store i8 32, i8* %142, align 1
  br label %143

143:                                              ; preds = %122, %141
  call void @llvm.lifetime.end.p0i8(i64 50, i8* nonnull %123) #11
  br label %144

144:                                              ; preds = %99, %143
  %145 = phi i32 [ %117, %143 ], [ -2, %99 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #11
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %28) #11
  br label %154

146:                                              ; preds = %104
  %147 = load i32, i32* %4, align 4
  %148 = load i32, i32* %17, align 8
  %149 = add i32 %148, %147
  store i32 %149, i32* %17, align 8
  %150 = add nsw i32 %147, %81
  %151 = load i8*, i8** %26, align 8
  %152 = zext i32 %149 to i64
  %153 = getelementptr inbounds i8, i8* %151, i64 %152
  store i8 0, i8* %153, align 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #11
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %28) #11
  br label %88

154:                                              ; preds = %69, %85, %144, %98
  %155 = phi i32 [ -1, %98 ], [ %145, %144 ], [ %75, %69 ], [ -3, %85 ]
  %156 = icmp eq i32 %81, 0
  %157 = select i1 %156, i32 %155, i32 %81
  br label %158

158:                                              ; preds = %88, %24, %3, %154, %49
  %159 = phi i32 [ 0, %49 ], [ %157, %154 ], [ -1, %3 ], [ 0, %24 ], [ 0, %88 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #11
  ret i32 %159
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @xmlCharEncCloseFunc(%struct._xmlCharEncodingHandler*) local_unnamed_addr #3 {
  %2 = icmp eq %struct._xmlCharEncodingHandler* %0, null
  br i1 %2, label %58, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %58, label %7

7:                                                ; preds = %3
  %8 = load %struct._xmlCharEncodingHandler**, %struct._xmlCharEncodingHandler*** @handlers, align 8
  %9 = icmp ne %struct._xmlCharEncodingHandler** %8, null
  %10 = load i32, i32* @nbCharEncodingHandler, align 4
  %11 = icmp sgt i32 %10, 0
  %12 = and i1 %9, %11
  br i1 %12, label %13, label %23

13:                                               ; preds = %7
  %14 = sext i32 %10 to i64
  br label %17

15:                                               ; preds = %17
  %16 = icmp slt i64 %22, %14
  br i1 %16, label %17, label %23

17:                                               ; preds = %13, %15
  %18 = phi i64 [ 0, %13 ], [ %22, %15 ]
  %19 = getelementptr inbounds %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %8, i64 %18
  %20 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %19, align 8
  %21 = icmp eq %struct._xmlCharEncodingHandler* %20, %0
  %22 = add nuw nsw i64 %18, 1
  br i1 %21, label %58, label %15

23:                                               ; preds = %15, %7
  %24 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 4
  %25 = load %struct._uconv_t*, %struct._uconv_t** %24, align 8
  %26 = icmp eq %struct._uconv_t* %25, null
  br i1 %26, label %27, label %31

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 3
  %29 = load %struct._uconv_t*, %struct._uconv_t** %28, align 8
  %30 = icmp eq %struct._uconv_t* %29, null
  br i1 %30, label %58, label %41

31:                                               ; preds = %23
  %32 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %25, i64 0, i32 0
  %33 = load %struct.UConverter*, %struct.UConverter** %32, align 8
  tail call void @ucnv_close_69(%struct.UConverter* %33) #11
  %34 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %25, i64 0, i32 1
  %35 = load %struct.UConverter*, %struct.UConverter** %34, align 8
  tail call void @ucnv_close_69(%struct.UConverter* %35) #11
  %36 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %37 = bitcast %struct._uconv_t* %25 to i8*
  tail call void %36(i8* nonnull %37) #11
  store %struct._uconv_t* null, %struct._uconv_t** %24, align 8
  %38 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 3
  %39 = load %struct._uconv_t*, %struct._uconv_t** %38, align 8
  %40 = icmp eq %struct._uconv_t* %39, null
  br i1 %40, label %50, label %41

41:                                               ; preds = %27, %31
  %42 = phi %struct._uconv_t* [ %39, %31 ], [ %29, %27 ]
  %43 = getelementptr inbounds %struct._xmlCharEncodingHandler, %struct._xmlCharEncodingHandler* %0, i64 0, i32 3
  %44 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %42, i64 0, i32 0
  %45 = load %struct.UConverter*, %struct.UConverter** %44, align 8
  tail call void @ucnv_close_69(%struct.UConverter* %45) #11
  %46 = getelementptr inbounds %struct._uconv_t, %struct._uconv_t* %42, i64 0, i32 1
  %47 = load %struct.UConverter*, %struct.UConverter** %46, align 8
  tail call void @ucnv_close_69(%struct.UConverter* %47) #11
  %48 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %49 = bitcast %struct._uconv_t* %42 to i8*
  tail call void %48(i8* nonnull %49) #11
  store %struct._uconv_t* null, %struct._uconv_t** %43, align 8
  br label %50

50:                                               ; preds = %31, %41
  %51 = load i8*, i8** %4, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %55, label %53

53:                                               ; preds = %50
  %54 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  tail call void %54(i8* nonnull %51) #11
  br label %55

55:                                               ; preds = %50, %53
  store i8* null, i8** %4, align 8
  %56 = load void (i8*)*, void (i8*)** @xmlFree, align 8
  %57 = bitcast %struct._xmlCharEncodingHandler* %0 to i8*
  tail call void %56(i8* nonnull %57) #11
  br label %58

58:                                               ; preds = %17, %55, %27, %3, %1
  %59 = phi i32 [ -1, %1 ], [ -1, %3 ], [ 0, %27 ], [ 0, %55 ], [ 0, %17 ]
  ret i32 %59
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @xmlByteConsumed(%struct._xmlParserCtxt* readonly) local_unnamed_addr #3 {
  %2 = alloca [32000 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = icmp eq %struct._xmlParserCtxt* %0, null
  br i1 %5, label %82, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct._xmlParserCtxt, %struct._xmlParserCtxt* %0, i64 0, i32 9
  %8 = load %struct._xmlParserInput*, %struct._xmlParserInput** %7, align 8
  %9 = icmp eq %struct._xmlParserInput* %8, null
  br i1 %9, label %82, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct._xmlParserInput, %struct._xmlParserInput* %8, i64 0, i32 0
  %12 = load %struct._xmlParserInputBuffer*, %struct._xmlParserInputBuffer** %11, align 8
  %13 = icmp eq %struct._xmlParserInputBuffer* %12, null
  br i1 %13, label %71, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct._xmlParserInputBuffer, %struct._xmlParserInputBuffer* %12, i64 0, i32 3
  %16 = load %struct._xmlCharEncodingHandler*, %struct._xmlCharEncodingHandler** %15, align 8
  %17 = icmp eq %struct._xmlCharEncodingHandler* %16, null
  br i1 %17, label %71, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct._xmlParserInput, %struct._xmlParserInput* %8, i64 0, i32 5
  %20 = bitcast i8** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %struct._xmlParserInput, %struct._xmlParserInput* %8, i64 0, i32 4
  %23 = bitcast i8** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %21, %24
  %26 = icmp sgt i64 %25, 0
  br i1 %26, label %27, label %63

27:                                               ; preds = %18
  %28 = getelementptr inbounds [32000 x i8], [32000 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32000, i8* nonnull %28) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 32000, i1 false)
  %29 = load i8*, i8** %22, align 8
  %30 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #11
  %31 = load i64, i64* %20, align 8
  %32 = ptrtoint i8* %29 to i64
  %33 = sub i64 %31, %32
  %34 = trunc i64 %33 to i32
  %35 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #11
  store i32 %34, i32* %3, align 4
  store i32 32000, i32* %4, align 4
  %36 = call fastcc i32 @xmlEncOutputChunk(%struct._xmlCharEncodingHandler* nonnull %16, i8* nonnull %28, i32* nonnull %4, i8* %29, i32* nonnull %3)
  %37 = icmp slt i32 %36, 0
  %38 = load i32, i32* %4, align 4
  br i1 %37, label %45, label %39

39:                                               ; preds = %50, %27
  %40 = phi i32 [ 0, %27 ], [ %51, %50 ]
  %41 = phi i32 [ %38, %27 ], [ %61, %50 ]
  %42 = add i32 %41, %40
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #11
  call void @llvm.lifetime.end.p0i8(i64 32000, i8* nonnull %28) #11
  %43 = zext i32 %42 to i64
  %44 = load %struct._xmlParserInputBuffer*, %struct._xmlParserInputBuffer** %11, align 8
  br label %63

45:                                               ; preds = %27, %50
  %46 = phi i32 [ %61, %50 ], [ %38, %27 ]
  %47 = phi i8* [ %54, %50 ], [ %29, %27 ]
  %48 = phi i32 [ %51, %50 ], [ 0, %27 ]
  %49 = icmp sgt i32 %46, 0
  br i1 %49, label %50, label %62

50:                                               ; preds = %45
  %51 = add i32 %46, %48
  %52 = load i32, i32* %3, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %47, i64 %53
  %55 = load i64, i64* %20, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = trunc i64 %57 to i32
  store i32 %58, i32* %3, align 4
  store i32 32000, i32* %4, align 4
  %59 = call fastcc i32 @xmlEncOutputChunk(%struct._xmlCharEncodingHandler* nonnull %16, i8* nonnull %28, i32* nonnull %4, i8* %54, i32* nonnull %3)
  %60 = icmp slt i32 %59, 0
  %61 = load i32, i32* %4, align 4
  br i1 %60, label %45, label %39

62:                                               ; preds = %45
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #11
  call void @llvm.lifetime.end.p0i8(i64 32000, i8* nonnull %28) #11
  br label %82

63:                                               ; preds = %39, %18
  %64 = phi %struct._xmlParserInputBuffer* [ %12, %18 ], [ %44, %39 ]
  %65 = phi i64 [ 0, %18 ], [ %43, %39 ]
  %66 = getelementptr inbounds %struct._xmlParserInputBuffer, %struct._xmlParserInputBuffer* %64, i64 0, i32 8
  %67 = load i64, i64* %66, align 8
  %68 = icmp ult i64 %67, %65
  %69 = sub i64 %67, %65
  %70 = select i1 %68, i64 -1, i64 %69
  ret i64 %70

71:                                               ; preds = %14, %10
  %72 = getelementptr inbounds %struct._xmlParserInput, %struct._xmlParserInput* %8, i64 0, i32 9
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %struct._xmlParserInput, %struct._xmlParserInput* %8, i64 0, i32 4
  %75 = bitcast i8** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %struct._xmlParserInput, %struct._xmlParserInput* %8, i64 0, i32 3
  %78 = bitcast i8** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = add i64 %76, %73
  %81 = sub i64 %80, %79
  br label %82

82:                                               ; preds = %62, %6, %1, %71
  %83 = phi i64 [ %81, %71 ], [ -1, %1 ], [ -1, %6 ], [ -1, %62 ]
  ret i64 %83
}

declare void @__xmlRaiseError(void (i8*, %struct._xmlError*)*, void (i8*, i8*, ...)*, i8*, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, ...) local_unnamed_addr #8

declare void @__xmlSimpleError(i32, i32, %struct._xmlNode*, i8*, i8*) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare %struct.UConverter* @ucnv_open_69(i8*, i32*) local_unnamed_addr #8

declare void @ucnv_setToUCallBack_69(%struct.UConverter*, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)*, i8*, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)**, i8**, i32*) local_unnamed_addr #8

declare void @UCNV_TO_U_CALLBACK_STOP_69(i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*) #8

declare void @ucnv_setFromUCallBack_69(%struct.UConverter*, void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)*, i8*, void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)**, i8**, i32*) local_unnamed_addr #8

declare void @UCNV_FROM_U_CALLBACK_STOP_69(i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*) #8

declare void @ucnv_close_69(%struct.UConverter*) local_unnamed_addr #8

declare void @ucnv_convertEx_69(%struct.UConverter*, %struct.UConverter*, i8**, i8*, i8**, i8*, i16*, i16**, i16**, i16*, i8 signext, i8 signext, i32*) local_unnamed_addr #8

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly }
attributes #11 = { nounwind }
attributes #12 = { nounwind readnone }
attributes #13 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
