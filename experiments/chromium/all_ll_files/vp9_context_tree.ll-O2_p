; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_context_tree.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_context_tree.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%union.int_mv = type { i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }

@.str = private unnamed_addr constant [33 x i8] c"Failed to allocate td->leaf_tree\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"Failed to allocate td->pc_tree\00", align 1
@square = internal unnamed_addr constant [4 x i8] c"\03\06\09\0C", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"Failed to allocate ctx->zcoeff_blk\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Failed to allocate ctx->coeff[i][k]\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"Failed to allocate ctx->qcoeff[i][k]\00", align 1
@.str.5 = private unnamed_addr constant [38 x i8] c"Failed to allocate ctx->dqcoeff[i][k]\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"Failed to allocate ctx->eobs[i][k]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_setup_pc_tree(%struct.VP9Common*, %struct.ThreadData* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 3
  %4 = bitcast %struct.PICK_MODE_CONTEXT** %3 to i8**
  %5 = load i8*, i8** %4, align 16
  tail call void @vpx_free(i8* %5) #3
  %6 = tail call i8* @vpx_calloc(i64 64, i64 848) #3
  store i8* %6, i8** %4, align 16
  %7 = icmp eq i8* %6, null
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %9, i32 2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0)) #3
  br label %10

10:                                               ; preds = %2, %8
  %11 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 4
  %12 = bitcast %struct.PC_TREE** %11 to i8**
  %13 = load i8*, i8** %12, align 8
  tail call void @vpx_free(i8* %13) #3
  %14 = tail call i8* @vpx_calloc(i64 85, i64 4296) #3
  store i8* %14, i8** %12, align 8
  %15 = icmp eq i8* %14, null
  %16 = bitcast i8* %14 to %struct.PC_TREE*
  br i1 %15, label %17, label %20

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %18, i32 2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0)) #3
  %19 = load %struct.PC_TREE*, %struct.PC_TREE** %11, align 8
  br label %20

20:                                               ; preds = %10, %17
  %21 = phi %struct.PC_TREE* [ %16, %10 ], [ %19, %17 ]
  %22 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %3, align 16
  tail call fastcc void @alloc_mode_context(%struct.VP9Common* %0, i32 1, %struct.PICK_MODE_CONTEXT* %22)
  br label %23

23:                                               ; preds = %20, %23
  %24 = phi i64 [ 1, %20 ], [ %27, %23 ]
  %25 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %3, align 16
  %26 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %25, i64 %24
  tail call fastcc void @alloc_mode_context(%struct.VP9Common* %0, i32 1, %struct.PICK_MODE_CONTEXT* %26)
  %27 = add nuw nsw i64 %24, 1
  %28 = icmp eq i64 %27, 64
  br i1 %28, label %29, label %23

29:                                               ; preds = %23, %29
  %30 = phi i64 [ %49, %29 ], [ 0, %23 ]
  %31 = phi %struct.PICK_MODE_CONTEXT* [ %48, %29 ], [ %22, %23 ]
  %32 = load %struct.PC_TREE*, %struct.PC_TREE** %11, align 8
  %33 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %32, i64 %30, i32 2
  store i8 3, i8* %33, align 8
  %34 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %32, i64 %30, i32 3
  tail call fastcc void @alloc_mode_context(%struct.VP9Common* %0, i32 4, %struct.PICK_MODE_CONTEXT* %34) #3
  %35 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %32, i64 %30, i32 4, i64 0
  tail call fastcc void @alloc_mode_context(%struct.VP9Common* %0, i32 2, %struct.PICK_MODE_CONTEXT* %35) #3
  %36 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %32, i64 %30, i32 5, i64 0
  tail call fastcc void @alloc_mode_context(%struct.VP9Common* %0, i32 2, %struct.PICK_MODE_CONTEXT* %36) #3
  %37 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %32, i64 %30, i32 4, i64 1, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 848, i1 false) #3
  %38 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %32, i64 %30, i32 5, i64 1, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 848, i1 false) #3
  %39 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %32, i64 %30, i32 6
  %40 = bitcast %union.anon* %39 to %struct.PICK_MODE_CONTEXT**
  store %struct.PICK_MODE_CONTEXT* %31, %struct.PICK_MODE_CONTEXT** %40, align 8
  %41 = ptrtoint %struct.PICK_MODE_CONTEXT* %31 to i64
  %42 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %32, i64 %30, i32 6, i32 0, i64 1
  %43 = bitcast %struct.PC_TREE** %42 to i64*
  store i64 %41, i64* %43, align 8
  %44 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %32, i64 %30, i32 6, i32 0, i64 2
  %45 = bitcast %struct.PC_TREE** %44 to i64*
  store i64 %41, i64* %45, align 8
  %46 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %32, i64 %30, i32 6, i32 0, i64 3
  %47 = bitcast %struct.PC_TREE** %46 to i64*
  store i64 %41, i64* %47, align 8
  %48 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %31, i64 1
  %49 = add nuw nsw i64 %30, 1
  %50 = icmp eq i64 %49, 64
  br i1 %50, label %51, label %29

51:                                               ; preds = %29, %96
  %52 = phi i64 [ %99, %96 ], [ 1, %29 ]
  %53 = phi i32 [ %100, %96 ], [ 16, %29 ]
  %54 = phi %struct.PC_TREE* [ %98, %96 ], [ %21, %29 ]
  %55 = phi i32 [ %97, %96 ], [ 64, %29 ]
  %56 = icmp sgt i32 %53, 0
  br i1 %56, label %57, label %96

57:                                               ; preds = %51
  %58 = trunc i64 %52 to i32
  %59 = shl i32 %58, 1
  %60 = shl i32 4, %59
  %61 = sdiv i32 %60, 2
  %62 = icmp sgt i32 %60, 4
  %63 = getelementptr inbounds [4 x i8], [4 x i8]* @square, i64 0, i64 %52
  %64 = sext i32 %55 to i64
  br label %65

65:                                               ; preds = %79, %57
  %66 = phi i64 [ %64, %57 ], [ %91, %79 ]
  %67 = phi %struct.PC_TREE* [ %54, %57 ], [ %89, %79 ]
  %68 = phi i32 [ 0, %57 ], [ %92, %79 ]
  %69 = load %struct.PC_TREE*, %struct.PC_TREE** %11, align 8
  %70 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %69, i64 %66, i32 3
  tail call fastcc void @alloc_mode_context(%struct.VP9Common* %0, i32 %60, %struct.PICK_MODE_CONTEXT* %70) #3
  %71 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %69, i64 %66, i32 4, i64 0
  tail call fastcc void @alloc_mode_context(%struct.VP9Common* %0, i32 %61, %struct.PICK_MODE_CONTEXT* %71) #3
  %72 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %69, i64 %66, i32 5, i64 0
  tail call fastcc void @alloc_mode_context(%struct.VP9Common* %0, i32 %61, %struct.PICK_MODE_CONTEXT* %72) #3
  br i1 %62, label %73, label %76

73:                                               ; preds = %65
  %74 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %69, i64 %66, i32 4, i64 1
  tail call fastcc void @alloc_mode_context(%struct.VP9Common* %0, i32 %61, %struct.PICK_MODE_CONTEXT* %74) #3
  %75 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %69, i64 %66, i32 5, i64 1
  tail call fastcc void @alloc_mode_context(%struct.VP9Common* %0, i32 %61, %struct.PICK_MODE_CONTEXT* %75) #3
  br label %79

76:                                               ; preds = %65
  %77 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %69, i64 %66, i32 4, i64 1, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 848, i1 false) #3
  %78 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %69, i64 %66, i32 5, i64 1, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 848, i1 false) #3
  br label %79

79:                                               ; preds = %73, %76
  %80 = load i8, i8* %63, align 1
  %81 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %69, i64 %66, i32 2
  store i8 %80, i8* %81, align 8
  %82 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %69, i64 %66, i32 6, i32 0, i64 0
  store %struct.PC_TREE* %67, %struct.PC_TREE** %82, align 8
  %83 = insertelement <2 x %struct.PC_TREE*> undef, %struct.PC_TREE* %67, i32 0
  %84 = shufflevector <2 x %struct.PC_TREE*> %83, <2 x %struct.PC_TREE*> undef, <2 x i32> zeroinitializer
  %85 = getelementptr %struct.PC_TREE, <2 x %struct.PC_TREE*> %84, <2 x i64> <i64 1, i64 2>
  %86 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %69, i64 %66, i32 6, i32 0, i64 1
  %87 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %67, i64 3
  %88 = bitcast %struct.PC_TREE** %86 to <2 x %struct.PC_TREE*>*
  store <2 x %struct.PC_TREE*> %85, <2 x %struct.PC_TREE*>* %88, align 8
  %89 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %67, i64 4
  %90 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %69, i64 %66, i32 6, i32 0, i64 3
  store %struct.PC_TREE* %87, %struct.PC_TREE** %90, align 8
  %91 = add nsw i64 %66, 1
  %92 = add nuw nsw i32 %68, 1
  %93 = icmp eq i32 %92, %53
  br i1 %93, label %94, label %65

94:                                               ; preds = %79
  %95 = trunc i64 %91 to i32
  br label %96

96:                                               ; preds = %94, %51
  %97 = phi i32 [ %55, %51 ], [ %95, %94 ]
  %98 = phi %struct.PC_TREE* [ %54, %51 ], [ %89, %94 ]
  %99 = add nuw nsw i64 %52, 1
  %100 = ashr i32 %53, 2
  %101 = icmp eq i64 %99, 4
  br i1 %101, label %102, label %51

102:                                              ; preds = %96
  %103 = load %struct.PC_TREE*, %struct.PC_TREE** %11, align 8
  %104 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %103, i64 84
  %105 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 5
  store %struct.PC_TREE* %104, %struct.PC_TREE** %105, align 16
  %106 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %103, i64 84, i32 3, i32 17
  store i32 2, i32* %106, align 8
  ret void
}

declare void @vpx_free(i8*) local_unnamed_addr #1

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #1

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @alloc_mode_context(%struct.VP9Common*, i32, %struct.PICK_MODE_CONTEXT* nocapture) unnamed_addr #0 {
  %4 = icmp sgt i32 %1, 4
  %5 = select i1 %4, i32 %1, i32 4
  %6 = shl i32 %5, 4
  %7 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %2, i64 0, i32 12
  store i32 %5, i32* %7, align 4
  %8 = zext i32 %5 to i64
  %9 = tail call i8* @vpx_calloc(i64 %8, i64 1) #3
  %10 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %2, i64 0, i32 2
  store i8* %9, i8** %10, align 8
  %11 = icmp eq i8* %9, null
  br i1 %11, label %12, label %14

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %13, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0)) #3
  br label %14

14:                                               ; preds = %3, %12
  %15 = sext i32 %6 to i64
  %16 = shl nsw i64 %15, 2
  %17 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  %18 = shl nuw i32 %5, 1
  %19 = zext i32 %18 to i64
  br label %20

20:                                               ; preds = %69, %14
  %21 = phi i64 [ 0, %14 ], [ %70, %69 ]
  br label %22

22:                                               ; preds = %51, %20
  %23 = phi i64 [ 0, %20 ], [ %67, %51 ]
  %24 = tail call i8* @vpx_memalign(i64 32, i64 %16) #3
  %25 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %2, i64 0, i32 3, i64 %21, i64 %23
  %26 = bitcast i32** %25 to i8**
  store i8* %24, i8** %26, align 8
  %27 = icmp eq i8* %24, null
  br i1 %27, label %28, label %29

28:                                               ; preds = %22
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %17, i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0)) #3
  br label %29

29:                                               ; preds = %22, %28
  %30 = tail call i8* @vpx_memalign(i64 32, i64 %16) #3
  %31 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %2, i64 0, i32 4, i64 %21, i64 %23
  %32 = bitcast i32** %31 to i8**
  store i8* %30, i8** %32, align 8
  %33 = icmp eq i8* %30, null
  br i1 %33, label %34, label %35

34:                                               ; preds = %29
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %17, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0)) #3
  br label %35

35:                                               ; preds = %29, %34
  %36 = tail call i8* @vpx_memalign(i64 32, i64 %16) #3
  %37 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %2, i64 0, i32 5, i64 %21, i64 %23
  %38 = bitcast i32** %37 to i8**
  store i8* %36, i8** %38, align 8
  %39 = icmp eq i8* %36, null
  br i1 %39, label %40, label %41

40:                                               ; preds = %35
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %17, i32 2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0)) #3
  br label %41

41:                                               ; preds = %35, %40
  %42 = tail call i8* @vpx_memalign(i64 32, i64 %19) #3
  %43 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %2, i64 0, i32 6, i64 %21, i64 %23
  %44 = bitcast i16** %43 to i8**
  store i8* %42, i8** %44, align 8
  %45 = icmp eq i8* %42, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %41
  %47 = ptrtoint i8* %42 to i64
  br label %51

48:                                               ; preds = %41
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %17, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0)) #3
  %49 = bitcast i16** %43 to i64*
  %50 = load i64, i64* %49, align 8
  br label %51

51:                                               ; preds = %46, %48
  %52 = phi i64 [ %47, %46 ], [ %50, %48 ]
  %53 = bitcast i32** %25 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %2, i64 0, i32 7, i64 %21, i64 %23
  %56 = bitcast i32** %55 to i64*
  store i64 %54, i64* %56, align 8
  %57 = bitcast i32** %31 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %2, i64 0, i32 8, i64 %21, i64 %23
  %60 = bitcast i32** %59 to i64*
  store i64 %58, i64* %60, align 8
  %61 = bitcast i32** %37 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %2, i64 0, i32 9, i64 %21, i64 %23
  %64 = bitcast i32** %63 to i64*
  store i64 %62, i64* %64, align 8
  %65 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %2, i64 0, i32 10, i64 %21, i64 %23
  %66 = bitcast i16** %65 to i64*
  store i64 %52, i64* %66, align 8
  %67 = add nuw nsw i64 %23, 1
  %68 = icmp eq i64 %67, 3
  br i1 %68, label %69, label %22

69:                                               ; preds = %51
  %70 = add nuw nsw i64 %21, 1
  %71 = icmp eq i64 %70, 3
  br i1 %71, label %72, label %20

72:                                               ; preds = %69
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_free_pc_tree(%struct.ThreadData*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.ThreadData* %0, null
  br i1 %2, label %33, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 3
  %5 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %4, align 16
  %6 = icmp eq %struct.PICK_MODE_CONTEXT* %5, null
  br i1 %6, label %16, label %7

7:                                                ; preds = %3, %7
  %8 = phi i64 [ %11, %7 ], [ 0, %3 ]
  %9 = phi %struct.PICK_MODE_CONTEXT* [ %12, %7 ], [ %5, %3 ]
  %10 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %9, i64 %8
  tail call fastcc void @free_mode_context(%struct.PICK_MODE_CONTEXT* %10)
  %11 = add nuw nsw i64 %8, 1
  %12 = load %struct.PICK_MODE_CONTEXT*, %struct.PICK_MODE_CONTEXT** %4, align 16
  %13 = icmp eq i64 %11, 64
  br i1 %13, label %14, label %7

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %12, i64 0, i32 0, i32 0
  tail call void @vpx_free(i8* %15) #3
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %4, align 16
  br label %16

16:                                               ; preds = %3, %14
  %17 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 4
  %18 = load %struct.PC_TREE*, %struct.PC_TREE** %17, align 8
  %19 = icmp eq %struct.PC_TREE* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %16, %20
  %21 = phi i64 [ %28, %20 ], [ 0, %16 ]
  %22 = phi %struct.PC_TREE* [ %29, %20 ], [ %18, %16 ]
  %23 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %22, i64 %21, i32 3
  tail call fastcc void @free_mode_context(%struct.PICK_MODE_CONTEXT* %23) #3
  %24 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %22, i64 %21, i32 4, i64 0
  tail call fastcc void @free_mode_context(%struct.PICK_MODE_CONTEXT* %24) #3
  %25 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %22, i64 %21, i32 4, i64 1
  tail call fastcc void @free_mode_context(%struct.PICK_MODE_CONTEXT* %25) #3
  %26 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %22, i64 %21, i32 5, i64 0
  tail call fastcc void @free_mode_context(%struct.PICK_MODE_CONTEXT* %26) #3
  %27 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %22, i64 %21, i32 5, i64 1
  tail call fastcc void @free_mode_context(%struct.PICK_MODE_CONTEXT* %27) #3
  %28 = add nuw nsw i64 %21, 1
  %29 = load %struct.PC_TREE*, %struct.PC_TREE** %17, align 8
  %30 = icmp eq i64 %28, 85
  br i1 %30, label %31, label %20

31:                                               ; preds = %20
  %32 = bitcast %struct.PC_TREE* %29 to i8*
  tail call void @vpx_free(i8* %32) #3
  store %struct.PC_TREE* null, %struct.PC_TREE** %17, align 8
  br label %33

33:                                               ; preds = %31, %16, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @free_mode_context(%struct.PICK_MODE_CONTEXT* nocapture) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8
  tail call void @vpx_free(i8* %3) #3
  store i8* null, i8** %2, align 8
  br label %4

4:                                                ; preds = %4, %1
  %5 = phi i64 [ 0, %1 ], [ %42, %4 ]
  %6 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 3, i64 %5, i64 0
  %7 = bitcast i32** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @vpx_free(i8* %8) #3
  store i32* null, i32** %6, align 8
  %9 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 4, i64 %5, i64 0
  %10 = bitcast i32** %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @vpx_free(i8* %11) #3
  store i32* null, i32** %9, align 8
  %12 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 5, i64 %5, i64 0
  %13 = bitcast i32** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @vpx_free(i8* %14) #3
  store i32* null, i32** %12, align 8
  %15 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 6, i64 %5, i64 0
  %16 = bitcast i16** %15 to i8**
  %17 = load i8*, i8** %16, align 8
  tail call void @vpx_free(i8* %17) #3
  store i16* null, i16** %15, align 8
  %18 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 3, i64 %5, i64 1
  %19 = bitcast i32** %18 to i8**
  %20 = load i8*, i8** %19, align 8
  tail call void @vpx_free(i8* %20) #3
  store i32* null, i32** %18, align 8
  %21 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 4, i64 %5, i64 1
  %22 = bitcast i32** %21 to i8**
  %23 = load i8*, i8** %22, align 8
  tail call void @vpx_free(i8* %23) #3
  store i32* null, i32** %21, align 8
  %24 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 5, i64 %5, i64 1
  %25 = bitcast i32** %24 to i8**
  %26 = load i8*, i8** %25, align 8
  tail call void @vpx_free(i8* %26) #3
  store i32* null, i32** %24, align 8
  %27 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 6, i64 %5, i64 1
  %28 = bitcast i16** %27 to i8**
  %29 = load i8*, i8** %28, align 8
  tail call void @vpx_free(i8* %29) #3
  store i16* null, i16** %27, align 8
  %30 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 3, i64 %5, i64 2
  %31 = bitcast i32** %30 to i8**
  %32 = load i8*, i8** %31, align 8
  tail call void @vpx_free(i8* %32) #3
  store i32* null, i32** %30, align 8
  %33 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 4, i64 %5, i64 2
  %34 = bitcast i32** %33 to i8**
  %35 = load i8*, i8** %34, align 8
  tail call void @vpx_free(i8* %35) #3
  store i32* null, i32** %33, align 8
  %36 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 5, i64 %5, i64 2
  %37 = bitcast i32** %36 to i8**
  %38 = load i8*, i8** %37, align 8
  tail call void @vpx_free(i8* %38) #3
  store i32* null, i32** %36, align 8
  %39 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 6, i64 %5, i64 2
  %40 = bitcast i16** %39 to i8**
  %41 = load i8*, i8** %40, align 8
  tail call void @vpx_free(i8* %41) #3
  store i16* null, i16** %39, align 8
  %42 = add nuw nsw i64 %5, 1
  %43 = icmp eq i64 %42, 3
  br i1 %43, label %44, label %4

44:                                               ; preds = %4
  ret void
}

declare i8* @vpx_memalign(i64, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
