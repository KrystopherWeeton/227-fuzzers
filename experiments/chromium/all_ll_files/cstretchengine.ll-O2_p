; ModuleID = '../../third_party/pdfium/core/fxge/dib/cstretchengine.cpp'
source_filename = "../../third_party/pdfium/core/fxge/dib/cstretchengine.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.CStretchEngine::CWeightTable" = type { i32, i32, i64, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%class.CStretchEngine = type { i16, i32, i32, i32, %"class.fxcrt::RetainPtr", %"class.pdfium::span", i32, i32, %"class.fxcrt::UnownedPtr.17", i32, i32, %struct.FX_RECT, %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %struct.FX_RECT, i32, i32, %struct.FXDIB_ResampleOptions, i8, i8, i32, %"class.CStretchEngine::CWeightTable" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %class.CFX_DIBBase* }
%class.CFX_DIBBase = type { %"class.fxcrt::Retainable", i16, i32, i32, i32, %"class.fxcrt::RetainPtr.3", %"class.std::__1::vector.8" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::RetainPtr.3" = type { %"class.std::__1::unique_ptr.4" }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type { %class.CFX_DIBBase, %"class.fxcrt::MaybeOwned" }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.18", %"class.fxcrt::UnownedPtr.21" }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.fxcrt::UnownedPtr.21" = type { i8* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i32*, i32*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i32* }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i32* }
%"class.fxcrt::UnownedPtr.17" = type { %class.ScanlineComposerIface* }
%struct.FX_RECT = type { i32, i32, i32, i32 }
%struct.FXDIB_ResampleOptions = type { i8, i8, i8, i8 }
%class.ScanlineComposerIface = type { i32 (...)** }
%struct.PixelWeight = type { i32, i32, [1 x i32] }
%class.PauseIndicatorIface = type { i32 (...)** }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm = comdat any

$_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEmRKh = comdat any

@_ZN14CStretchEngine12CWeightTableC1Ev = hidden unnamed_addr alias void (%"class.CStretchEngine::CWeightTable"*), void (%"class.CStretchEngine::CWeightTable"*)* @_ZN14CStretchEngine12CWeightTableC2Ev
@_ZN14CStretchEngine12CWeightTableD1Ev = hidden unnamed_addr alias void (%"class.CStretchEngine::CWeightTable"*), void (%"class.CStretchEngine::CWeightTable"*)* @_ZN14CStretchEngine12CWeightTableD2Ev
@_ZN14CStretchEngineC1EP21ScanlineComposerIface12FXDIB_FormatiiRK7FX_RECTRKN5fxcrt9RetainPtrI11CFX_DIBBaseEERK21FXDIB_ResampleOptions = hidden unnamed_addr alias void (%class.CStretchEngine*, %class.ScanlineComposerIface*, i16, i32, i32, %struct.FX_RECT*, %"class.fxcrt::RetainPtr"*, %struct.FXDIB_ResampleOptions*), void (%class.CStretchEngine*, %class.ScanlineComposerIface*, i16, i32, i32, %struct.FX_RECT*, %"class.fxcrt::RetainPtr"*, %struct.FXDIB_ResampleOptions*)* @_ZN14CStretchEngineC2EP21ScanlineComposerIface12FXDIB_FormatiiRK7FX_RECTRKN5fxcrt9RetainPtrI11CFX_DIBBaseEERK21FXDIB_ResampleOptions
@_ZN14CStretchEngineD1Ev = hidden unnamed_addr alias void (%class.CStretchEngine*), void (%class.CStretchEngine*)* @_ZN14CStretchEngineD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CStretchEngine12CWeightTableC2Ev(%"class.CStretchEngine::CWeightTable"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.CStretchEngine::CWeightTable"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 40, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CStretchEngine12CWeightTableD2Ev(%"class.CStretchEngine::CWeightTable"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %3) #6
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK14CStretchEngine12CWeightTable18GetPixelWeightSizeEv(%"class.CStretchEngine::CWeightTable"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = lshr i64 %4, 2
  %6 = add nsw i64 %5, -2
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN14CStretchEngine12CWeightTable4CalcEiiiiiiRK21FXDIB_ResampleOptions(%"class.CStretchEngine::CWeightTable"*, i32, i32, i32, i32, i32, i32, %struct.FXDIB_ResampleOptions* nocapture readonly dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %9 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %7, i64 0, i32 0
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  %12 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 3
  %13 = bitcast %"class.std::__1::vector"* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 3, i32 0, i32 1
  %16 = bitcast i8** %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 2
  store i64 0, i64* %17, align 8
  %18 = sitofp i32 %4 to float
  %19 = sitofp i32 %1 to float
  %20 = fdiv float %18, %19
  %21 = fpext float %20 to double
  %22 = icmp slt i32 %1, 0
  %23 = select i1 %22, i32 %4, i32 0
  %24 = sitofp i32 %23 to double
  %25 = tail call float @llvm.fabs.f32(float %20) #6
  %26 = tail call float @llvm.ceil.f32(float %25) #6
  %27 = fadd float %26, 1.000000e+00
  %28 = fmul float %27, 4.000000e+00
  %29 = fptosi float %28 to i32
  %30 = add i32 %29, 8
  %31 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 1
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 0
  store i32 %2, i32* %32, align 8
  %33 = sub nsw i32 %3, %2
  %34 = sdiv i32 1073741820, %30
  %35 = icmp sgt i32 %33, %34
  br i1 %35, label %202, label %36

36:                                               ; preds = %8
  %37 = mul nsw i32 %30, %33
  %38 = add nsw i32 %37, 4
  %39 = sext i32 %38 to i64
  store i64 %39, i64* %17, align 8
  %40 = icmp eq i32 %38, 0
  br i1 %40, label %42, label %41

41:                                               ; preds = %36
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %12, i64 %39) #6
  br label %42

42:                                               ; preds = %36, %41
  %43 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %7, i64 0, i32 2
  %44 = load i8, i8* %43, align 1, !range !2
  %45 = icmp ne i8 %44, 0
  %46 = fcmp olt float %25, 1.000000e+00
  %47 = or i1 %46, %45
  %48 = icmp sgt i32 %3, %2
  br i1 %47, label %53, label %49

49:                                               ; preds = %42
  br i1 %48, label %50, label %202

50:                                               ; preds = %49
  %51 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 3, i32 0, i32 0
  %52 = add nsw i32 %6, -1
  br label %113

53:                                               ; preds = %42
  br i1 %48, label %54, label %202

54:                                               ; preds = %53
  %55 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 3, i32 0, i32 0
  %56 = fmul double %21, 5.000000e-01
  %57 = add nsw i32 %6, -1
  br label %58

58:                                               ; preds = %107, %54
  %59 = phi i32 [ %2, %54 ], [ %111, %107 ]
  %60 = load i32, i32* %32, align 8
  %61 = sub nsw i32 %59, %60
  %62 = load i32, i32* %31, align 4
  %63 = mul nsw i32 %61, %62
  %64 = sext i32 %63 to i64
  %65 = load i8*, i8** %55, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %64
  %67 = sitofp i32 %59 to double
  %68 = fmul double %21, %67
  %69 = fadd double %56, %68
  %70 = fadd double %69, %24
  %71 = fptrunc double %70 to float
  br i1 %11, label %97, label %72

72:                                               ; preds = %58
  %73 = fadd float %71, -5.000000e-01
  %74 = tail call float @llvm.floor.f32(float %73) #6
  %75 = fptosi float %74 to i32
  %76 = bitcast i8* %66 to i32*
  %77 = fadd float %71, 5.000000e-01
  %78 = tail call float @llvm.floor.f32(float %77) #6
  %79 = fptosi float %78 to i32
  %80 = getelementptr inbounds i8, i8* %66, i64 4
  %81 = bitcast i8* %80 to i32*
  %82 = icmp slt i32 %75, %5
  %83 = select i1 %82, i32 %5, i32 %75
  store i32 %83, i32* %76, align 4
  %84 = icmp slt i32 %57, %79
  %85 = select i1 %84, i32 %57, i32 %79
  store i32 %85, i32* %81, align 4
  %86 = icmp eq i32 %83, %85
  br i1 %86, label %107, label %87

87:                                               ; preds = %72
  %88 = sitofp i32 %83 to double
  %89 = fsub double %70, %88
  %90 = fadd double %89, -5.000000e-01
  %91 = fptrunc double %90 to float
  %92 = fmul float %91, 6.553600e+04
  %93 = tail call i32 @FXSYS_roundf(float %92) #6
  %94 = getelementptr inbounds i8, i8* %66, i64 12
  %95 = bitcast i8* %94 to i32*
  store i32 %93, i32* %95, align 4
  %96 = sub nsw i32 65536, %93
  br label %107

97:                                               ; preds = %58
  %98 = tail call float @llvm.floor.f32(float %71) #6
  %99 = fptosi float %98 to i32
  %100 = icmp slt i32 %99, %5
  %101 = select i1 %100, i32 %5, i32 %99
  %102 = bitcast i8* %66 to i32*
  store i32 %101, i32* %102, align 4
  %103 = icmp slt i32 %57, %99
  %104 = select i1 %103, i32 %57, i32 %99
  %105 = getelementptr inbounds i8, i8* %66, i64 4
  %106 = bitcast i8* %105 to i32*
  store i32 %104, i32* %106, align 4
  br label %107

107:                                              ; preds = %72, %87, %97
  %108 = phi i32 [ %96, %87 ], [ 65536, %97 ], [ 65536, %72 ]
  %109 = getelementptr inbounds i8, i8* %66, i64 8
  %110 = bitcast i8* %109 to i32*
  store i32 %108, i32* %110, align 4
  %111 = add i32 %59, 1
  %112 = icmp eq i32 %111, %3
  br i1 %112, label %202, label %58

113:                                              ; preds = %199, %50
  %114 = phi i32 [ %2, %50 ], [ %200, %199 ]
  %115 = load i32, i32* %32, align 8
  %116 = sub nsw i32 %114, %115
  %117 = load i32, i32* %31, align 4
  %118 = mul nsw i32 %116, %117
  %119 = sext i32 %118 to i64
  %120 = load i8*, i8** %51, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 %119
  %122 = bitcast i8* %121 to %struct.PixelWeight*
  %123 = sitofp i32 %114 to double
  %124 = fmul double %21, %123
  %125 = fadd double %124, %24
  %126 = fadd double %125, %21
  %127 = fcmp olt double %126, %125
  %128 = select i1 %127, double %126, double %125
  %129 = tail call double @llvm.floor.f64(double %128)
  %130 = fptosi double %129 to i32
  %131 = fcmp olt double %125, %126
  %132 = select i1 %131, double %126, double %125
  %133 = tail call double @llvm.floor.f64(double %132)
  %134 = fptosi double %133 to i32
  %135 = icmp slt i32 %130, %5
  %136 = select i1 %135, i32 %5, i32 %130
  %137 = icmp slt i32 %52, %134
  %138 = select i1 %137, i32 %52, i32 %134
  %139 = icmp sgt i32 %136, %138
  br i1 %139, label %140, label %147

140:                                              ; preds = %113
  %141 = icmp slt i32 %52, %136
  %142 = select i1 %141, i32 %52, i32 %136
  %143 = bitcast i8* %121 to i32*
  store i32 %142, i32* %143, align 4
  %144 = getelementptr inbounds i8, i8* %121, i64 4
  %145 = bitcast i8* %144 to i32*
  store i32 %142, i32* %145, align 4
  %146 = add i32 %114, 1
  br label %199

147:                                              ; preds = %113
  %148 = bitcast i8* %121 to i32*
  store i32 %136, i32* %148, align 4
  %149 = getelementptr inbounds i8, i8* %121, i64 4
  %150 = bitcast i8* %149 to i32*
  store i32 %138, i32* %150, align 4
  %151 = add i32 %114, 1
  %152 = sitofp i32 %151 to double
  %153 = sext i32 %136 to i64
  %154 = sext i32 %138 to i64
  br label %155

155:                                              ; preds = %193, %147
  %156 = phi i64 [ %162, %193 ], [ %153, %147 ]
  %157 = trunc i64 %156 to i32
  %158 = sitofp i32 %157 to double
  %159 = fsub double %158, %24
  %160 = fdiv double %159, %21
  %161 = bitcast double %160 to i64
  %162 = add nsw i64 %156, 1
  %163 = trunc i64 %162 to i32
  %164 = sitofp i32 %163 to double
  %165 = fsub double %164, %24
  %166 = fdiv double %165, %21
  %167 = bitcast double %166 to i64
  %168 = fcmp ogt double %160, %166
  %169 = select i1 %168, i64 %161, i64 %167
  %170 = select i1 %168, i64 %167, i64 %161
  %171 = bitcast i64 %170 to double
  %172 = fcmp olt double %171, %123
  %173 = select i1 %172, double %123, double %171
  %174 = bitcast i64 %169 to double
  %175 = fcmp olt double %152, %174
  %176 = select i1 %175, double %152, double %174
  %177 = fsub double %176, %173
  %178 = fcmp ogt double %177, 0.000000e+00
  %179 = select i1 %178, double %177, double 0.000000e+00
  %180 = fcmp oeq double %179, 0.000000e+00
  %181 = icmp eq i64 %156, %154
  %182 = and i1 %181, %180
  br i1 %182, label %183, label %186

183:                                              ; preds = %155
  %184 = load i32, i32* %150, align 4
  %185 = add nsw i32 %184, -1
  store i32 %185, i32* %150, align 4
  br label %199

186:                                              ; preds = %155
  %187 = sub nsw i64 %156, %153
  %188 = load i32, i32* %31, align 4
  %189 = sext i32 %188 to i64
  %190 = lshr i64 %189, 2
  %191 = add nsw i64 %190, -2
  %192 = icmp ugt i64 %191, %187
  br i1 %192, label %193, label %202

193:                                              ; preds = %186
  %194 = fmul double %179, 6.553600e+04
  %195 = fptrunc double %194 to float
  %196 = tail call i32 @FXSYS_roundf(float %195) #6
  %197 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %122, i64 0, i32 2, i64 %187
  store i32 %196, i32* %197, align 4
  %198 = icmp slt i64 %156, %154
  br i1 %198, label %155, label %199

199:                                              ; preds = %193, %140, %183
  %200 = phi i32 [ %146, %140 ], [ %151, %183 ], [ %151, %193 ]
  %201 = icmp eq i32 %200, %3
  br i1 %201, label %202, label %113

202:                                              ; preds = %199, %186, %107, %49, %53, %8
  %203 = phi i1 [ false, %8 ], [ true, %53 ], [ true, %49 ], [ true, %107 ], [ false, %186 ], [ true, %199 ]
  ret i1 %203
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @FXSYS_roundf(float) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.PixelWeight* @_ZNK14CStretchEngine12CWeightTable14GetPixelWeightEi(%"class.CStretchEngine::CWeightTable"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = sub nsw i32 %1, %4
  %6 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = mul nsw i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 3, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %9
  %13 = bitcast i8* %12 to %struct.PixelWeight*
  ret %struct.PixelWeight* %13
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32* @_ZNK14CStretchEngine12CWeightTable23GetValueFromPixelWeightEP11PixelWeighti(%"class.CStretchEngine::CWeightTable"* nocapture readonly, %struct.PixelWeight* readonly, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, %2
  br i1 %6, label %18, label %7

7:                                                ; preds = %3
  %8 = sub nsw i32 %2, %5
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %11 to i64
  %13 = lshr i64 %12, 2
  %14 = add nsw i64 %13, -2
  %15 = icmp ugt i64 %14, %9
  %16 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %1, i64 0, i32 2, i64 %9
  %17 = select i1 %15, i32* %16, i32* null
  br label %18

18:                                               ; preds = %3, %7
  %19 = phi i32* [ %17, %7 ], [ null, %3 ]
  ret i32* %19
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CStretchEngineC2EP21ScanlineComposerIface12FXDIB_FormatiiRK7FX_RECTRKN5fxcrt9RetainPtrI11CFX_DIBBaseEERK21FXDIB_ResampleOptions(%class.CStretchEngine*, %class.ScanlineComposerIface*, i16 zeroext, i32, i32, %struct.FX_RECT* nocapture readonly dereferenceable(16), %"class.fxcrt::RetainPtr"* nocapture readonly dereferenceable(8), %struct.FXDIB_ResampleOptions* nocapture readonly dereferenceable(4)) unnamed_addr #0 align 2 {
  %9 = alloca %struct.FX_RECT, align 4
  %10 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 0
  store i16 %2, i16* %10, align 8
  %11 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 1
  %12 = and i16 %2, 255
  %13 = zext i16 %12 to i32
  store i32 %13, i32* %11, align 4
  %14 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 2
  %15 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %15, align 8
  %17 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %16, i64 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = and i16 %18, 255
  %20 = zext i16 %19 to i32
  store i32 %20, i32* %14, align 8
  %21 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 3
  %22 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %15, align 8
  %23 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %22, i64 0, i32 1
  %24 = load i16, i16* %23, align 8
  %25 = lshr i16 %24, 9
  %26 = and i16 %25, 1
  %27 = zext i16 %26 to i32
  store i32 %27, i32* %21, align 4
  %28 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 4
  %29 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %15, align 8
  %30 = ptrtoint %class.CFX_DIBBase* %29 to i64
  %31 = bitcast %"class.fxcrt::RetainPtr"* %28 to i64*
  store i64 %30, i64* %31, align 8
  %32 = icmp eq %class.CFX_DIBBase* %29, null
  br i1 %32, label %37, label %33

33:                                               ; preds = %8
  %34 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %29, i64 0, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = add nsw i64 %35, 1
  store i64 %36, i64* %34, align 8
  br label %37

37:                                               ; preds = %8, %33
  %38 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 5
  %39 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %15, align 8
  %40 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %39, i64 0, i32 6
  %41 = bitcast %"class.std::__1::vector.8"* %40 to i64*
  %42 = load i64, i64* %41, align 8, !noalias !3
  %43 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %39, i64 0, i32 6, i32 0, i32 1
  %44 = bitcast i32** %43 to i64*
  %45 = load i64, i64* %44, align 8, !noalias !3
  %46 = sub i64 %45, %42
  %47 = ashr exact i64 %46, 2
  %48 = bitcast %"class.pdfium::span"* %38 to i64*
  store i64 %42, i64* %48, align 8, !alias.scope !3
  %49 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 5, i32 1
  store i64 %47, i64* %49, align 8, !alias.scope !3
  %50 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 6
  %51 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %15, align 8
  %52 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %51, i64 0, i32 2
  %53 = load i32, i32* %52, align 4
  store i32 %53, i32* %50, align 8
  %54 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 7
  %55 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %15, align 8
  %56 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %55, i64 0, i32 3
  %57 = load i32, i32* %56, align 8
  store i32 %57, i32* %54, align 4
  %58 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 8, i32 0
  store %class.ScanlineComposerIface* %1, %class.ScanlineComposerIface** %58, align 8
  %59 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 9
  store i32 %3, i32* %59, align 8
  %60 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 10
  store i32 %4, i32* %60, align 4
  %61 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 11
  %62 = bitcast %struct.FX_RECT* %61 to i8*
  %63 = bitcast %struct.FX_RECT* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 4 %63, i64 16, i1 false)
  %64 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 12
  %65 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 16
  %66 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 19
  %67 = bitcast %"class.std::__1::vector"* %64 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 112, i1 false)
  tail call void @_ZN21FXDIB_ResampleOptionsC1Ev(%struct.FXDIB_ResampleOptions* %66) #6
  %68 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 21
  store i8 0, i8* %68, align 1
  %69 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 23
  %70 = bitcast %"class.CStretchEngine::CWeightTable"* %69 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 40, i1 false) #6
  %71 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 2
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = sub nsw i32 %72, %74
  %76 = icmp eq i32 %75, 0
  %77 = load i32, i32* %11, align 4
  br i1 %76, label %81, label %78

78:                                               ; preds = %37
  %79 = udiv i32 2147483647, %75
  %80 = icmp sgt i32 %77, %79
  br i1 %80, label %253, label %81

81:                                               ; preds = %37, %78
  %82 = mul i32 %77, %75
  %83 = icmp ugt i32 %82, 2147483616
  br i1 %83, label %253, label %84

84:                                               ; preds = %81
  %85 = add nuw nsw i32 %82, 31
  %86 = sdiv i32 %85, 32
  %87 = shl nsw i32 %86, 2
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 12, i32 0, i32 1
  %90 = bitcast i8** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = bitcast %"class.std::__1::vector"* %64 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %91, %93
  %95 = icmp ult i64 %94, %88
  %96 = inttoptr i64 %93 to i8*
  br i1 %95, label %97, label %99

97:                                               ; preds = %84
  %98 = sub i64 %88, %94
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %64, i64 %98) #6
  br label %103

99:                                               ; preds = %84
  %100 = icmp ugt i64 %94, %88
  br i1 %100, label %101, label %103

101:                                              ; preds = %99
  %102 = getelementptr inbounds i8, i8* %96, i64 %88
  store i8* %102, i8** %89, align 8
  br label %103

103:                                              ; preds = %97, %99, %101
  %104 = icmp eq i16 %2, 32
  br i1 %104, label %105, label %113

105:                                              ; preds = %103
  %106 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %64, i64 0, i32 0, i32 0
  %107 = load i8*, i8** %106, align 8
  %108 = load i64, i64* %90, align 8
  %109 = ptrtoint i8* %107 to i64
  %110 = sub i64 %108, %109
  %111 = icmp sgt i64 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %105
  call void @llvm.memset.p0i8.i64(i8* align 1 %107, i8 -1, i64 %110, i1 false)
  br label %113

113:                                              ; preds = %112, %105, %103
  %114 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 11, i32 2
  %115 = load i32, i32* %114, align 4
  %116 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %61, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  %118 = sub nsw i32 %115, %117
  %119 = load i32, i32* %11, align 4
  %120 = mul nsw i32 %118, %119
  %121 = add nsw i32 %120, 31
  %122 = sdiv i32 %121, 32
  %123 = shl nsw i32 %122, 2
  %124 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 17
  store i32 %123, i32* %124, align 8
  %125 = shl i32 %118, 3
  %126 = add nsw i32 %125, 31
  %127 = sdiv i32 %126, 32
  %128 = shl nsw i32 %127, 2
  %129 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 18
  store i32 %128, i32* %129, align 4
  %130 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %7, i64 0, i32 2
  %131 = load i8, i8* %130, align 1, !range !2
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %135, label %133

133:                                              ; preds = %113
  %134 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 19, i32 2
  store i8 1, i8* %134, align 2
  br label %164

135:                                              ; preds = %113
  %136 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %7, i64 0, i32 0
  %137 = load i8, i8* %136, align 1, !range !2
  %138 = icmp ne i8 %137, 0
  %139 = icmp eq i32 %3, 0
  %140 = or i1 %139, %138
  br i1 %140, label %160, label %141

141:                                              ; preds = %135
  %142 = icmp slt i32 %3, 0
  %143 = sub nsw i32 0, %3
  %144 = select i1 %142, i32 %143, i32 %3
  %145 = icmp slt i32 %4, 0
  %146 = sub nsw i32 0, %4
  %147 = select i1 %145, i32 %146, i32 %4
  %148 = lshr i32 %147, 3
  %149 = zext i32 %148 to i64
  %150 = load i32, i32* %50, align 8
  %151 = sext i32 %150 to i64
  %152 = load i32, i32* %54, align 4
  %153 = sext i32 %152 to i64
  %154 = mul nsw i64 %153, %151
  %155 = zext i32 %144 to i64
  %156 = sdiv i64 %154, %155
  %157 = icmp sgt i64 %156, %149
  br i1 %157, label %158, label %160

158:                                              ; preds = %141
  %159 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %66, i64 0, i32 0
  store i8 1, i8* %159, align 8
  br label %164

160:                                              ; preds = %135, %141
  %161 = bitcast %struct.FXDIB_ResampleOptions* %7 to i32*
  %162 = bitcast %struct.FXDIB_ResampleOptions* %66 to i32*
  %163 = load i32, i32* %161, align 1
  store i32 %163, i32* %162, align 8
  br label %164

164:                                              ; preds = %158, %160, %133
  %165 = load i32, i32* %50, align 8
  %166 = sitofp i32 %165 to float
  %167 = load i32, i32* %59, align 8
  %168 = sitofp i32 %167 to float
  %169 = fdiv float %166, %168
  %170 = fpext float %169 to double
  %171 = load i32, i32* %54, align 4
  %172 = sitofp i32 %171 to float
  %173 = load i32, i32* %60, align 4
  %174 = sitofp i32 %173 to float
  %175 = fdiv float %172, %174
  %176 = fpext float %175 to double
  %177 = icmp sgt i32 %167, 0
  %178 = fpext float %168 to double
  %179 = select i1 %177, double 0.000000e+00, double %178
  %180 = icmp sgt i32 %173, 0
  %181 = fpext float %174 to double
  %182 = select i1 %180, double 0.000000e+00, double %181
  %183 = load i32, i32* %73, align 4
  %184 = sitofp i32 %183 to double
  %185 = fadd double %179, %184
  %186 = fmul double %185, %170
  %187 = bitcast double %186 to i64
  %188 = load i32, i32* %71, align 4
  %189 = sitofp i32 %188 to double
  %190 = fadd double %179, %189
  %191 = fmul double %190, %170
  %192 = bitcast double %191 to i64
  %193 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 1
  %194 = load i32, i32* %193, align 4
  %195 = sitofp i32 %194 to double
  %196 = fadd double %182, %195
  %197 = fmul double %196, %176
  %198 = bitcast double %197 to i64
  %199 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 3
  %200 = load i32, i32* %199, align 4
  %201 = sitofp i32 %200 to double
  %202 = fadd double %182, %201
  %203 = fmul double %202, %176
  %204 = bitcast double %203 to i64
  %205 = fcmp ogt double %186, %191
  %206 = select i1 %205, i64 %192, i64 %187
  %207 = select i1 %205, i64 %187, i64 %192
  %208 = fcmp ogt double %197, %203
  %209 = select i1 %208, i64 %204, i64 %198
  %210 = select i1 %208, i64 %198, i64 %204
  %211 = bitcast i64 %206 to double
  %212 = tail call double @llvm.floor.f64(double %211)
  %213 = fptosi double %212 to i32
  %214 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %65, i64 0, i32 0
  store i32 %213, i32* %214, align 8
  %215 = bitcast i64 %207 to double
  %216 = tail call double @llvm.ceil.f64(double %215)
  %217 = fptosi double %216 to i32
  %218 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 16, i32 2
  store i32 %217, i32* %218, align 8
  %219 = bitcast i64 %209 to double
  %220 = tail call double @llvm.floor.f64(double %219)
  %221 = fptosi double %220 to i32
  %222 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 16, i32 1
  store i32 %221, i32* %222, align 4
  %223 = bitcast i64 %210 to double
  %224 = tail call double @llvm.ceil.f64(double %223)
  %225 = fptosi double %224 to i32
  %226 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 16, i32 3
  store i32 %225, i32* %226, align 4
  %227 = bitcast %struct.FX_RECT* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %227) #6
  %228 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %9, i64 0, i32 0
  %229 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %9, i64 0, i32 1
  %230 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %9, i64 0, i32 2
  %231 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %9, i64 0, i32 3
  store i32 0, i32* %228, align 4
  store i32 0, i32* %229, align 4
  store i32 %165, i32* %230, align 4
  store i32 %171, i32* %231, align 4
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* %65, %struct.FX_RECT* nonnull dereferenceable(16) %9) #6
  %232 = load i32, i32* %14, align 8
  switch i32 %232, label %246 [
    i32 1, label %233
    i32 8, label %237
  ]

233:                                              ; preds = %164
  %234 = load i32, i32* %11, align 4
  %235 = icmp ne i32 %234, 8
  %236 = zext i1 %235 to i8
  br label %250

237:                                              ; preds = %164
  %238 = load i32, i32* %11, align 4
  %239 = icmp eq i32 %238, 8
  %240 = load i32, i32* %21, align 4
  %241 = icmp ne i32 %240, 0
  br i1 %239, label %242, label %244

242:                                              ; preds = %237
  %243 = select i1 %241, i8 3, i8 2
  br label %250

244:                                              ; preds = %237
  %245 = select i1 %241, i8 5, i8 4
  br label %250

246:                                              ; preds = %164
  %247 = load i32, i32* %21, align 4
  %248 = icmp eq i32 %247, 0
  %249 = select i1 %248, i8 6, i8 7
  br label %250

250:                                              ; preds = %242, %244, %246, %233
  %251 = phi i8 [ %243, %242 ], [ %245, %244 ], [ %249, %246 ], [ %236, %233 ]
  %252 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 20
  store i8 %251, i8* %252, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %227) #6
  br label %253

253:                                              ; preds = %81, %78, %250
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN21FXDIB_ResampleOptionsC1Ev(%struct.FXDIB_ResampleOptions*) unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #4

declare void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT*, %struct.FX_RECT* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CStretchEngineD2Ev(%class.CStretchEngine* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 23, i32 3, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 23, i32 3, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %3) #6
  br label %9

9:                                                ; preds = %1, %5
  %10 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 15, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = ptrtoint i8* %11 to i64
  %15 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 15, i32 0, i32 1
  %16 = bitcast i8** %15 to i64*
  store i64 %14, i64* %16, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %11) #6
  br label %17

17:                                               ; preds = %9, %13
  %18 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 14, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %17
  %22 = ptrtoint i8* %19 to i64
  %23 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 14, i32 0, i32 1
  %24 = bitcast i8** %23 to i64*
  store i64 %22, i64* %24, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %19) #6
  br label %25

25:                                               ; preds = %17, %21
  %26 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 13, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %33, label %29

29:                                               ; preds = %25
  %30 = ptrtoint i8* %27 to i64
  %31 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 13, i32 0, i32 1
  %32 = bitcast i8** %31 to i64*
  store i64 %30, i64* %32, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %27) #6
  br label %33

33:                                               ; preds = %25, %29
  %34 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 12, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = icmp eq i8* %35, null
  br i1 %36, label %41, label %37

37:                                               ; preds = %33
  %38 = ptrtoint i8* %35 to i64
  %39 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 12, i32 0, i32 1
  %40 = bitcast i8** %39 to i64*
  store i64 %38, i64* %40, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %35) #6
  br label %41

41:                                               ; preds = %33, %37
  %42 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %43 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %42, align 8
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %42, align 8
  %44 = icmp eq %class.CFX_DIBBase* %43, null
  br i1 %44, label %56, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %43, i64 0, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = add nsw i64 %47, -1
  store i64 %48, i64* %46, align 8
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %56

50:                                               ; preds = %45
  %51 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %43, i64 0, i32 0
  %52 = bitcast %class.CFX_DIBBase* %43 to void (%"class.fxcrt::Retainable"*)***
  %53 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %53, i64 1
  %55 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %54, align 8
  tail call void %55(%"class.fxcrt::Retainable"* nonnull %51) #6
  br label %56

56:                                               ; preds = %41, %45, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN14CStretchEngine8ContinueEP19PauseIndicatorIface(%class.CStretchEngine*, %class.PauseIndicatorIface*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 21
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 1
  br i1 %5, label %6, label %11

6:                                                ; preds = %2, %8
  %7 = tail call zeroext i1 @_ZN14CStretchEngine19ContinueStretchHorzEP19PauseIndicatorIface(%class.CStretchEngine* %0, %class.PauseIndicatorIface* %1)
  br i1 %7, label %11, label %8

8:                                                ; preds = %6
  store i8 2, i8* %3, align 1
  tail call void @_ZN14CStretchEngine11StretchVertEv(%class.CStretchEngine* %0)
  %9 = load i8, i8* %3, align 1
  %10 = icmp eq i8 %9, 1
  br i1 %10, label %6, label %11

11:                                               ; preds = %6, %8, %2
  %12 = phi i1 [ false, %2 ], [ false, %8 ], [ true, %6 ]
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN14CStretchEngine19ContinueStretchHorzEP19PauseIndicatorIface(%class.CStretchEngine*, %class.PauseIndicatorIface*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 9
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %635, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %8 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %7, align 8
  %9 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 22
  %10 = load i32, i32* %9, align 8
  %11 = bitcast %class.CFX_DIBBase* %8 to i1 (%class.CFX_DIBBase*, i32, %class.PauseIndicatorIface*)***
  %12 = load i1 (%class.CFX_DIBBase*, i32, %class.PauseIndicatorIface*)**, i1 (%class.CFX_DIBBase*, i32, %class.PauseIndicatorIface*)*** %11, align 8
  %13 = getelementptr inbounds i1 (%class.CFX_DIBBase*, i32, %class.PauseIndicatorIface*)*, i1 (%class.CFX_DIBBase*, i32, %class.PauseIndicatorIface*)** %12, i64 4
  %14 = load i1 (%class.CFX_DIBBase*, i32, %class.PauseIndicatorIface*)*, i1 (%class.CFX_DIBBase*, i32, %class.PauseIndicatorIface*)** %13, align 8
  %15 = tail call zeroext i1 %14(%class.CFX_DIBBase* %8, i32 %10, %class.PauseIndicatorIface* %1) #6
  br i1 %15, label %635, label %16

16:                                               ; preds = %6
  %17 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = sdiv i32 %18, 8
  %20 = load i32, i32* %9, align 8
  %21 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 16, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %20, %22
  br i1 %23, label %24, label %635

24:                                               ; preds = %16
  %25 = icmp eq %class.PauseIndicatorIface* %1, null
  %26 = bitcast %class.PauseIndicatorIface* %1 to i1 (%class.PauseIndicatorIface*)***
  %27 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 14, i32 0, i32 0
  %28 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 16, i32 1
  %29 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 17
  %30 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 15, i32 0, i32 0
  %31 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 15, i32 0, i32 1
  %32 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 18
  %33 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 20
  %34 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 11, i32 0
  %35 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 11, i32 2
  %36 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 23, i32 0
  %37 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 23, i32 1
  %38 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 23, i32 3, i32 0, i32 0
  %39 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 0
  %40 = add nsw i32 %19, -3
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 5, i32 1
  %43 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 5, i32 0, i32 0
  %44 = sext i32 %19 to i64
  br label %45

45:                                               ; preds = %24, %629
  %46 = phi i32 [ %20, %24 ], [ %632, %629 ]
  %47 = phi i32 [ 10, %24 ], [ %630, %629 ]
  %48 = icmp ne i32 %47, 0
  %49 = or i1 %48, %25
  %50 = select i1 %48, i32 %47, i32 10
  br i1 %49, label %58, label %51

51:                                               ; preds = %45
  %52 = load i1 (%class.PauseIndicatorIface*)**, i1 (%class.PauseIndicatorIface*)*** %26, align 8
  %53 = getelementptr inbounds i1 (%class.PauseIndicatorIface*)*, i1 (%class.PauseIndicatorIface*)** %52, i64 2
  %54 = load i1 (%class.PauseIndicatorIface*)*, i1 (%class.PauseIndicatorIface*)** %53, align 8
  %55 = tail call zeroext i1 %54(%class.PauseIndicatorIface* nonnull %1) #6
  br i1 %55, label %635, label %56

56:                                               ; preds = %51
  %57 = load i32, i32* %9, align 8
  br label %58

58:                                               ; preds = %56, %45
  %59 = phi i32 [ %46, %45 ], [ %57, %56 ]
  %60 = phi i32 [ %50, %45 ], [ 10, %56 ]
  %61 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %7, align 8
  %62 = bitcast %class.CFX_DIBBase* %61 to i8* (%class.CFX_DIBBase*, i32)***
  %63 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %62, align 8
  %64 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %63, i64 3
  %65 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %64, align 8
  %66 = tail call i8* %65(%class.CFX_DIBBase* %61, i32 %59) #6
  %67 = load i8*, i8** %27, align 8
  %68 = load i32, i32* %9, align 8
  %69 = load i32, i32* %28, align 4
  %70 = sub nsw i32 %68, %69
  %71 = load i32, i32* %29, align 8
  %72 = mul nsw i32 %70, %71
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %67, i64 %73
  %75 = load i8*, i8** %30, align 8
  %76 = load i8*, i8** %31, align 8
  %77 = icmp eq i8* %75, %76
  br i1 %77, label %89, label %78

78:                                               ; preds = %58
  %79 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %7, align 8
  %80 = tail call i8* @_ZNK11CFX_DIBBase20GetAlphaMaskScanlineEi(%class.CFX_DIBBase* %79, i32 %68) #6
  %81 = load i8*, i8** %30, align 8
  %82 = load i32, i32* %9, align 8
  %83 = load i32, i32* %28, align 4
  %84 = sub nsw i32 %82, %83
  %85 = load i32, i32* %32, align 4
  %86 = mul nsw i32 %84, %85
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %81, i64 %87
  br label %89

89:                                               ; preds = %78, %58
  %90 = phi i8* [ null, %58 ], [ %80, %78 ]
  %91 = phi i8* [ null, %58 ], [ %88, %78 ]
  %92 = load i8, i8* %33, align 4
  switch i8 %92, label %629 [
    i8 0, label %93
    i8 1, label %93
    i8 2, label %156
    i8 3, label %208
    i8 4, label %273
    i8 5, label %362
    i8 6, label %453
    i8 7, label %527
  ]

93:                                               ; preds = %89, %89
  %94 = load i32, i32* %34, align 8
  %95 = load i32, i32* %35, align 8
  %96 = icmp slt i32 %94, %95
  br i1 %96, label %97, label %629

97:                                               ; preds = %93, %148
  %98 = phi i8* [ %152, %148 ], [ %74, %93 ]
  %99 = phi i32 [ %153, %148 ], [ %94, %93 ]
  %100 = load i32, i32* %36, align 8
  %101 = sub nsw i32 %99, %100
  %102 = load i32, i32* %37, align 4
  %103 = mul nsw i32 %101, %102
  %104 = sext i32 %103 to i64
  %105 = load i8*, i8** %38, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 %104
  %107 = bitcast i8* %106 to %struct.PixelWeight*
  %108 = bitcast i8* %106 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds i8, i8* %106, i64 4
  %111 = bitcast i8* %110 to i32*
  %112 = load i32, i32* %111, align 4
  %113 = icmp sgt i32 %109, %112
  br i1 %113, label %148, label %114

114:                                              ; preds = %97
  %115 = sext i32 %102 to i64
  %116 = lshr i64 %115, 2
  %117 = add nsw i64 %116, -2
  %118 = sext i32 %109 to i64
  %119 = sext i32 %112 to i64
  br label %120

120:                                              ; preds = %114, %144
  %121 = phi i64 [ %146, %144 ], [ %118, %114 ]
  %122 = phi i32 [ %145, %144 ], [ 0, %114 ]
  %123 = sub nsw i64 %121, %118
  %124 = icmp ule i64 %117, %123
  %125 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %107, i64 0, i32 2, i64 %123
  %126 = icmp eq i32* %125, null
  %127 = or i1 %124, %126
  br i1 %127, label %635, label %128

128:                                              ; preds = %120
  %129 = trunc i64 %121 to i32
  %130 = sdiv i32 %129, 8
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %66, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = srem i32 %129, 8
  %136 = sub nsw i32 7, %135
  %137 = shl i32 1, %136
  %138 = and i32 %137, %134
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %144, label %140

140:                                              ; preds = %128
  %141 = load i32, i32* %125, align 4
  %142 = mul nsw i32 %141, 255
  %143 = add nsw i32 %142, %122
  br label %144

144:                                              ; preds = %128, %140
  %145 = phi i32 [ %122, %128 ], [ %143, %140 ]
  %146 = add nsw i64 %121, 1
  %147 = icmp slt i64 %121, %119
  br i1 %147, label %120, label %148

148:                                              ; preds = %144, %97
  %149 = phi i32 [ 0, %97 ], [ %145, %144 ]
  %150 = lshr i32 %149, 16
  %151 = trunc i32 %150 to i8
  %152 = getelementptr inbounds i8, i8* %98, i64 1
  store i8 %151, i8* %98, align 1
  %153 = add nsw i32 %99, 1
  %154 = load i32, i32* %35, align 8
  %155 = icmp slt i32 %153, %154
  br i1 %155, label %97, label %629

156:                                              ; preds = %89
  %157 = load i32, i32* %34, align 8
  %158 = load i32, i32* %35, align 8
  %159 = icmp slt i32 %157, %158
  br i1 %159, label %160, label %629

160:                                              ; preds = %156, %200
  %161 = phi i8* [ %204, %200 ], [ %74, %156 ]
  %162 = phi i32 [ %205, %200 ], [ %157, %156 ]
  %163 = load i32, i32* %36, align 8
  %164 = sub nsw i32 %162, %163
  %165 = load i32, i32* %37, align 4
  %166 = mul nsw i32 %164, %165
  %167 = sext i32 %166 to i64
  %168 = load i8*, i8** %38, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 %167
  %170 = bitcast i8* %169 to %struct.PixelWeight*
  %171 = bitcast i8* %169 to i32*
  %172 = load i32, i32* %171, align 4
  %173 = getelementptr inbounds i8, i8* %169, i64 4
  %174 = bitcast i8* %173 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = icmp sgt i32 %172, %175
  br i1 %176, label %200, label %177

177:                                              ; preds = %160
  %178 = sext i32 %165 to i64
  %179 = lshr i64 %178, 2
  %180 = add nsw i64 %179, -2
  %181 = sext i32 %172 to i64
  %182 = sext i32 %175 to i64
  br label %183

183:                                              ; preds = %177, %191
  %184 = phi i64 [ %198, %191 ], [ %181, %177 ]
  %185 = phi i32 [ %197, %191 ], [ 0, %177 ]
  %186 = sub nsw i64 %184, %181
  %187 = icmp ule i64 %180, %186
  %188 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %170, i64 0, i32 2, i64 %186
  %189 = icmp eq i32* %188, null
  %190 = or i1 %187, %189
  br i1 %190, label %635, label %191

191:                                              ; preds = %183
  %192 = load i32, i32* %188, align 4
  %193 = getelementptr inbounds i8, i8* %66, i64 %184
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = mul nsw i32 %192, %195
  %197 = add nsw i32 %196, %185
  %198 = add nsw i64 %184, 1
  %199 = icmp slt i64 %184, %182
  br i1 %199, label %183, label %200

200:                                              ; preds = %191, %160
  %201 = phi i32 [ 0, %160 ], [ %197, %191 ]
  %202 = lshr i32 %201, 16
  %203 = trunc i32 %202 to i8
  %204 = getelementptr inbounds i8, i8* %161, i64 1
  store i8 %203, i8* %161, align 1
  %205 = add nsw i32 %162, 1
  %206 = load i32, i32* %35, align 8
  %207 = icmp slt i32 %205, %206
  br i1 %207, label %160, label %629

208:                                              ; preds = %89
  %209 = load i32, i32* %34, align 8
  %210 = load i32, i32* %35, align 8
  %211 = icmp slt i32 %209, %210
  br i1 %211, label %212, label %629

212:                                              ; preds = %208, %260
  %213 = phi i32 [ %270, %260 ], [ %209, %208 ]
  %214 = phi i8* [ %265, %260 ], [ %74, %208 ]
  %215 = phi i8* [ %269, %260 ], [ %91, %208 ]
  %216 = load i32, i32* %36, align 8
  %217 = sub nsw i32 %213, %216
  %218 = load i32, i32* %37, align 4
  %219 = mul nsw i32 %217, %218
  %220 = sext i32 %219 to i64
  %221 = load i8*, i8** %38, align 8
  %222 = getelementptr inbounds i8, i8* %221, i64 %220
  %223 = bitcast i8* %222 to %struct.PixelWeight*
  %224 = bitcast i8* %222 to i32*
  %225 = load i32, i32* %224, align 4
  %226 = getelementptr inbounds i8, i8* %222, i64 4
  %227 = bitcast i8* %226 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = icmp sgt i32 %225, %228
  br i1 %229, label %260, label %230

230:                                              ; preds = %212
  %231 = sext i32 %218 to i64
  %232 = lshr i64 %231, 2
  %233 = add nsw i64 %232, -2
  %234 = sext i32 %225 to i64
  %235 = sext i32 %228 to i64
  br label %236

236:                                              ; preds = %230, %245
  %237 = phi i64 [ %258, %245 ], [ %234, %230 ]
  %238 = phi i32 [ %256, %245 ], [ 0, %230 ]
  %239 = phi i32 [ %257, %245 ], [ 0, %230 ]
  %240 = sub nsw i64 %237, %234
  %241 = icmp ule i64 %233, %240
  %242 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %223, i64 0, i32 2, i64 %240
  %243 = icmp eq i32* %242, null
  %244 = or i1 %241, %243
  br i1 %244, label %635, label %245

245:                                              ; preds = %236
  %246 = load i32, i32* %242, align 4
  %247 = getelementptr inbounds i8, i8* %90, i64 %237
  %248 = load i8, i8* %247, align 1
  %249 = zext i8 %248 to i32
  %250 = mul nsw i32 %246, %249
  %251 = sdiv i32 %250, 255
  %252 = getelementptr inbounds i8, i8* %66, i64 %237
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i32
  %255 = mul nsw i32 %251, %254
  %256 = add nsw i32 %255, %238
  %257 = add nsw i32 %251, %239
  %258 = add nsw i64 %237, 1
  %259 = icmp slt i64 %237, %235
  br i1 %259, label %236, label %260

260:                                              ; preds = %245, %212
  %261 = phi i32 [ 0, %212 ], [ %257, %245 ]
  %262 = phi i32 [ 0, %212 ], [ %256, %245 ]
  %263 = lshr i32 %262, 16
  %264 = trunc i32 %263 to i8
  %265 = getelementptr inbounds i8, i8* %214, i64 1
  store i8 %264, i8* %214, align 1
  %266 = mul nsw i32 %261, 255
  %267 = lshr i32 %266, 16
  %268 = trunc i32 %267 to i8
  %269 = getelementptr inbounds i8, i8* %215, i64 1
  store i8 %268, i8* %215, align 1
  %270 = add nsw i32 %213, 1
  %271 = load i32, i32* %35, align 8
  %272 = icmp slt i32 %270, %271
  br i1 %272, label %212, label %629

273:                                              ; preds = %89
  %274 = load i32, i32* %34, align 8
  %275 = load i32, i32* %35, align 8
  %276 = icmp slt i32 %274, %275
  br i1 %276, label %277, label %629

277:                                              ; preds = %273, %346
  %278 = phi i32 [ %359, %346 ], [ %274, %273 ]
  %279 = phi i8* [ %358, %346 ], [ %74, %273 ]
  %280 = load i32, i32* %36, align 8
  %281 = sub nsw i32 %278, %280
  %282 = load i32, i32* %37, align 4
  %283 = mul nsw i32 %281, %282
  %284 = sext i32 %283 to i64
  %285 = load i8*, i8** %38, align 8
  %286 = getelementptr inbounds i8, i8* %285, i64 %284
  %287 = bitcast i8* %286 to %struct.PixelWeight*
  %288 = bitcast i8* %286 to i32*
  %289 = load i32, i32* %288, align 4
  %290 = getelementptr inbounds i8, i8* %286, i64 4
  %291 = bitcast i8* %290 to i32*
  %292 = load i32, i32* %291, align 4
  %293 = icmp sgt i32 %289, %292
  br i1 %293, label %346, label %294

294:                                              ; preds = %277
  %295 = sext i32 %282 to i64
  %296 = lshr i64 %295, 2
  %297 = add nsw i64 %296, -2
  %298 = sext i32 %289 to i64
  %299 = sext i32 %292 to i64
  br label %300

300:                                              ; preds = %294, %332
  %301 = phi i64 [ %344, %332 ], [ %298, %294 ]
  %302 = phi i32 [ %341, %332 ], [ 0, %294 ]
  %303 = phi i32 [ %342, %332 ], [ 0, %294 ]
  %304 = phi i32 [ %343, %332 ], [ 0, %294 ]
  %305 = sub nsw i64 %301, %298
  %306 = icmp ule i64 %297, %305
  %307 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %287, i64 0, i32 2, i64 %305
  %308 = icmp eq i32* %307, null
  %309 = or i1 %306, %308
  br i1 %309, label %635, label %310

310:                                              ; preds = %300
  %311 = load i32, i32* %307, align 4
  %312 = getelementptr inbounds i8, i8* %66, i64 %301
  %313 = load i8, i8* %312, align 1
  %314 = zext i8 %313 to i64
  %315 = load i64, i64* %42, align 8
  %316 = icmp ugt i64 %315, %314
  br i1 %316, label %318, label %317, !prof !6

317:                                              ; preds = %310
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !7
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !8
  unreachable

318:                                              ; preds = %310
  %319 = load i32*, i32** %43, align 8
  %320 = getelementptr inbounds i32, i32* %319, i64 %314
  %321 = load i32, i32* %320, align 4
  %322 = load i16, i16* %39, align 8
  %323 = icmp eq i16 %322, 24
  br i1 %323, label %324, label %328

324:                                              ; preds = %318
  %325 = lshr i32 %321, 16
  %326 = lshr i32 %321, 8
  %327 = and i32 %321, 255
  br label %332

328:                                              ; preds = %318
  %329 = lshr i32 %321, 24
  %330 = lshr i32 %321, 16
  %331 = lshr i32 %321, 8
  br label %332

332:                                              ; preds = %328, %324
  %333 = phi i32 [ %325, %324 ], [ %331, %328 ]
  %334 = phi i32 [ %326, %324 ], [ %330, %328 ]
  %335 = phi i32 [ %327, %324 ], [ %329, %328 ]
  %336 = and i32 %334, 255
  %337 = and i32 %333, 255
  %338 = mul nsw i32 %335, %311
  %339 = mul nsw i32 %336, %311
  %340 = mul nsw i32 %337, %311
  %341 = add nsw i32 %338, %302
  %342 = add nsw i32 %339, %303
  %343 = add nsw i32 %340, %304
  %344 = add nsw i64 %301, 1
  %345 = icmp slt i64 %301, %299
  br i1 %345, label %300, label %346

346:                                              ; preds = %332, %277
  %347 = phi i32 [ 0, %277 ], [ %343, %332 ]
  %348 = phi i32 [ 0, %277 ], [ %342, %332 ]
  %349 = phi i32 [ 0, %277 ], [ %341, %332 ]
  %350 = lshr i32 %349, 16
  %351 = trunc i32 %350 to i8
  %352 = getelementptr inbounds i8, i8* %279, i64 1
  store i8 %351, i8* %279, align 1
  %353 = lshr i32 %348, 16
  %354 = trunc i32 %353 to i8
  %355 = getelementptr inbounds i8, i8* %279, i64 2
  store i8 %354, i8* %352, align 1
  %356 = lshr i32 %347, 16
  %357 = trunc i32 %356 to i8
  %358 = getelementptr inbounds i8, i8* %279, i64 3
  store i8 %357, i8* %355, align 1
  %359 = add nsw i32 %278, 1
  %360 = load i32, i32* %35, align 8
  %361 = icmp slt i32 %359, %360
  br i1 %361, label %277, label %629

362:                                              ; preds = %89
  %363 = load i32, i32* %34, align 8
  %364 = load i32, i32* %35, align 8
  %365 = icmp slt i32 %363, %364
  br i1 %365, label %366, label %629

366:                                              ; preds = %362, %432
  %367 = phi i32 [ %450, %432 ], [ %363, %362 ]
  %368 = phi i8* [ %445, %432 ], [ %74, %362 ]
  %369 = phi i8* [ %449, %432 ], [ %91, %362 ]
  %370 = load i32, i32* %36, align 8
  %371 = sub nsw i32 %367, %370
  %372 = load i32, i32* %37, align 4
  %373 = mul nsw i32 %371, %372
  %374 = sext i32 %373 to i64
  %375 = load i8*, i8** %38, align 8
  %376 = getelementptr inbounds i8, i8* %375, i64 %374
  %377 = bitcast i8* %376 to %struct.PixelWeight*
  %378 = bitcast i8* %376 to i32*
  %379 = load i32, i32* %378, align 4
  %380 = getelementptr inbounds i8, i8* %376, i64 4
  %381 = bitcast i8* %380 to i32*
  %382 = load i32, i32* %381, align 4
  %383 = icmp sgt i32 %379, %382
  br i1 %383, label %432, label %384

384:                                              ; preds = %366
  %385 = sext i32 %372 to i64
  %386 = lshr i64 %385, 2
  %387 = add nsw i64 %386, -2
  %388 = sext i32 %379 to i64
  %389 = sext i32 %382 to i64
  br label %390

390:                                              ; preds = %384, %414
  %391 = phi i64 [ %430, %414 ], [ %388, %384 ]
  %392 = phi i32 [ %420, %414 ], [ 0, %384 ]
  %393 = phi i32 [ %424, %414 ], [ 0, %384 ]
  %394 = phi i32 [ %428, %414 ], [ 0, %384 ]
  %395 = phi i32 [ %429, %414 ], [ 0, %384 ]
  %396 = sub nsw i64 %391, %388
  %397 = icmp ule i64 %387, %396
  %398 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %377, i64 0, i32 2, i64 %396
  %399 = icmp eq i32* %398, null
  %400 = or i1 %397, %399
  br i1 %400, label %635, label %401

401:                                              ; preds = %390
  %402 = load i32, i32* %398, align 4
  %403 = getelementptr inbounds i8, i8* %90, i64 %391
  %404 = load i8, i8* %403, align 1
  %405 = zext i8 %404 to i32
  %406 = mul nsw i32 %402, %405
  %407 = sdiv i32 %406, 255
  %408 = getelementptr inbounds i8, i8* %66, i64 %391
  %409 = load i8, i8* %408, align 1
  %410 = zext i8 %409 to i64
  %411 = load i64, i64* %42, align 8
  %412 = icmp ugt i64 %411, %410
  br i1 %412, label %414, label %413, !prof !6

413:                                              ; preds = %401
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !7
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !8
  unreachable

414:                                              ; preds = %401
  %415 = load i32*, i32** %43, align 8
  %416 = getelementptr inbounds i32, i32* %415, i64 %410
  %417 = load i32, i32* %416, align 4
  %418 = lshr i32 %417, 24
  %419 = mul nsw i32 %418, %407
  %420 = add nsw i32 %419, %392
  %421 = lshr i32 %417, 16
  %422 = and i32 %421, 255
  %423 = mul nsw i32 %422, %407
  %424 = add nsw i32 %423, %393
  %425 = lshr i32 %417, 8
  %426 = and i32 %425, 255
  %427 = mul nsw i32 %426, %407
  %428 = add nsw i32 %427, %394
  %429 = add nsw i32 %407, %395
  %430 = add nsw i64 %391, 1
  %431 = icmp slt i64 %391, %389
  br i1 %431, label %390, label %432

432:                                              ; preds = %414, %366
  %433 = phi i32 [ 0, %366 ], [ %429, %414 ]
  %434 = phi i32 [ 0, %366 ], [ %428, %414 ]
  %435 = phi i32 [ 0, %366 ], [ %424, %414 ]
  %436 = phi i32 [ 0, %366 ], [ %420, %414 ]
  %437 = lshr i32 %436, 16
  %438 = trunc i32 %437 to i8
  %439 = getelementptr inbounds i8, i8* %368, i64 1
  store i8 %438, i8* %368, align 1
  %440 = lshr i32 %435, 16
  %441 = trunc i32 %440 to i8
  %442 = getelementptr inbounds i8, i8* %368, i64 2
  store i8 %441, i8* %439, align 1
  %443 = lshr i32 %434, 16
  %444 = trunc i32 %443 to i8
  %445 = getelementptr inbounds i8, i8* %368, i64 3
  store i8 %444, i8* %442, align 1
  %446 = mul nsw i32 %433, 255
  %447 = lshr i32 %446, 16
  %448 = trunc i32 %447 to i8
  %449 = getelementptr inbounds i8, i8* %369, i64 1
  store i8 %448, i8* %369, align 1
  %450 = add nsw i32 %367, 1
  %451 = load i32, i32* %35, align 8
  %452 = icmp slt i32 %450, %451
  br i1 %452, label %366, label %629

453:                                              ; preds = %89
  %454 = load i32, i32* %34, align 8
  %455 = load i32, i32* %35, align 8
  %456 = icmp slt i32 %454, %455
  br i1 %456, label %457, label %629

457:                                              ; preds = %453, %510
  %458 = phi i32 [ %524, %510 ], [ %454, %453 ]
  %459 = phi i8* [ %523, %510 ], [ %74, %453 ]
  %460 = load i32, i32* %36, align 8
  %461 = sub nsw i32 %458, %460
  %462 = load i32, i32* %37, align 4
  %463 = mul nsw i32 %461, %462
  %464 = sext i32 %463 to i64
  %465 = load i8*, i8** %38, align 8
  %466 = getelementptr inbounds i8, i8* %465, i64 %464
  %467 = bitcast i8* %466 to %struct.PixelWeight*
  %468 = bitcast i8* %466 to i32*
  %469 = load i32, i32* %468, align 4
  %470 = getelementptr inbounds i8, i8* %466, i64 4
  %471 = bitcast i8* %470 to i32*
  %472 = load i32, i32* %471, align 4
  %473 = icmp sgt i32 %469, %472
  br i1 %473, label %510, label %474

474:                                              ; preds = %457
  %475 = sext i32 %462 to i64
  %476 = lshr i64 %475, 2
  %477 = add nsw i64 %476, -2
  %478 = sext i32 %469 to i64
  %479 = sext i32 %472 to i64
  br label %480

480:                                              ; preds = %474, %490
  %481 = phi i64 [ %508, %490 ], [ %478, %474 ]
  %482 = phi i32 [ %498, %490 ], [ 0, %474 ]
  %483 = phi i32 [ %503, %490 ], [ 0, %474 ]
  %484 = phi i32 [ %507, %490 ], [ 0, %474 ]
  %485 = sub nsw i64 %481, %478
  %486 = icmp ule i64 %477, %485
  %487 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %467, i64 0, i32 2, i64 %485
  %488 = icmp eq i32* %487, null
  %489 = or i1 %486, %488
  br i1 %489, label %635, label %490

490:                                              ; preds = %480
  %491 = load i32, i32* %487, align 4
  %492 = mul nsw i64 %481, %44
  %493 = getelementptr inbounds i8, i8* %66, i64 %492
  %494 = getelementptr inbounds i8, i8* %493, i64 1
  %495 = load i8, i8* %493, align 1
  %496 = zext i8 %495 to i32
  %497 = mul nsw i32 %491, %496
  %498 = add nsw i32 %497, %482
  %499 = getelementptr inbounds i8, i8* %494, i64 1
  %500 = load i8, i8* %494, align 1
  %501 = zext i8 %500 to i32
  %502 = mul nsw i32 %491, %501
  %503 = add nsw i32 %502, %483
  %504 = load i8, i8* %499, align 1
  %505 = zext i8 %504 to i32
  %506 = mul nsw i32 %491, %505
  %507 = add nsw i32 %506, %484
  %508 = add nsw i64 %481, 1
  %509 = icmp slt i64 %481, %479
  br i1 %509, label %480, label %510

510:                                              ; preds = %490, %457
  %511 = phi i32 [ 0, %457 ], [ %507, %490 ]
  %512 = phi i32 [ 0, %457 ], [ %503, %490 ]
  %513 = phi i32 [ 0, %457 ], [ %498, %490 ]
  %514 = lshr i32 %513, 16
  %515 = trunc i32 %514 to i8
  %516 = getelementptr inbounds i8, i8* %459, i64 1
  store i8 %515, i8* %459, align 1
  %517 = lshr i32 %512, 16
  %518 = trunc i32 %517 to i8
  %519 = getelementptr inbounds i8, i8* %459, i64 2
  store i8 %518, i8* %516, align 1
  %520 = lshr i32 %511, 16
  %521 = trunc i32 %520 to i8
  %522 = getelementptr inbounds i8, i8* %459, i64 3
  store i8 %521, i8* %519, align 1
  %523 = getelementptr inbounds i8, i8* %522, i64 %41
  %524 = add nsw i32 %458, 1
  %525 = load i32, i32* %35, align 8
  %526 = icmp slt i32 %524, %525
  br i1 %526, label %457, label %629

527:                                              ; preds = %89
  %528 = load i32, i32* %34, align 8
  %529 = load i32, i32* %35, align 8
  %530 = icmp slt i32 %528, %529
  br i1 %530, label %531, label %629

531:                                              ; preds = %527, %623
  %532 = phi i32 [ %626, %623 ], [ %528, %527 ]
  %533 = phi i8* [ %625, %623 ], [ %74, %527 ]
  %534 = phi i8* [ %624, %623 ], [ %91, %527 ]
  %535 = load i32, i32* %36, align 8
  %536 = sub nsw i32 %532, %535
  %537 = load i32, i32* %37, align 4
  %538 = mul nsw i32 %536, %537
  %539 = sext i32 %538 to i64
  %540 = load i8*, i8** %38, align 8
  %541 = getelementptr inbounds i8, i8* %540, i64 %539
  %542 = bitcast i8* %541 to %struct.PixelWeight*
  %543 = bitcast i8* %541 to i32*
  %544 = load i32, i32* %543, align 4
  %545 = getelementptr inbounds i8, i8* %541, i64 4
  %546 = bitcast i8* %545 to i32*
  %547 = load i32, i32* %546, align 4
  %548 = icmp sgt i32 %544, %547
  br i1 %548, label %596, label %549

549:                                              ; preds = %531
  %550 = sext i32 %537 to i64
  %551 = lshr i64 %550, 2
  %552 = add nsw i64 %551, -2
  %553 = sext i32 %544 to i64
  %554 = sext i32 %547 to i64
  br label %555

555:                                              ; preds = %549, %566
  %556 = phi i64 [ %594, %566 ], [ %553, %549 ]
  %557 = phi i32 [ %583, %566 ], [ 0, %549 ]
  %558 = phi i32 [ %588, %566 ], [ 0, %549 ]
  %559 = phi i32 [ %592, %566 ], [ 0, %549 ]
  %560 = phi i32 [ %593, %566 ], [ 0, %549 ]
  %561 = sub nsw i64 %556, %553
  %562 = icmp ule i64 %552, %561
  %563 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %542, i64 0, i32 2, i64 %561
  %564 = icmp eq i32* %563, null
  %565 = or i1 %562, %564
  br i1 %565, label %635, label %566

566:                                              ; preds = %555
  %567 = load i32, i32* %563, align 4
  %568 = mul nsw i64 %556, %44
  %569 = getelementptr inbounds i8, i8* %66, i64 %568
  %570 = load i16, i16* %39, align 8
  %571 = icmp eq i16 %570, 544
  %572 = getelementptr inbounds i8, i8* %569, i64 3
  %573 = getelementptr inbounds i8, i8* %90, i64 %556
  %574 = select i1 %571, i8* %572, i8* %573
  %575 = load i8, i8* %574, align 1
  %576 = zext i8 %575 to i32
  %577 = mul nsw i32 %567, %576
  %578 = sdiv i32 %577, 255
  %579 = getelementptr inbounds i8, i8* %569, i64 1
  %580 = load i8, i8* %569, align 1
  %581 = zext i8 %580 to i32
  %582 = mul nsw i32 %578, %581
  %583 = add nsw i32 %582, %557
  %584 = getelementptr inbounds i8, i8* %579, i64 1
  %585 = load i8, i8* %579, align 1
  %586 = zext i8 %585 to i32
  %587 = mul nsw i32 %578, %586
  %588 = add nsw i32 %587, %558
  %589 = load i8, i8* %584, align 1
  %590 = zext i8 %589 to i32
  %591 = mul nsw i32 %578, %590
  %592 = add nsw i32 %591, %559
  %593 = add nsw i32 %578, %560
  %594 = add nsw i64 %556, 1
  %595 = icmp slt i64 %556, %554
  br i1 %595, label %555, label %596

596:                                              ; preds = %566, %531
  %597 = phi i32 [ 0, %531 ], [ %593, %566 ]
  %598 = phi i32 [ 0, %531 ], [ %592, %566 ]
  %599 = phi i32 [ 0, %531 ], [ %588, %566 ]
  %600 = phi i32 [ 0, %531 ], [ %583, %566 ]
  %601 = lshr i32 %600, 16
  %602 = trunc i32 %601 to i8
  %603 = getelementptr inbounds i8, i8* %533, i64 1
  store i8 %602, i8* %533, align 1
  %604 = lshr i32 %599, 16
  %605 = trunc i32 %604 to i8
  %606 = getelementptr inbounds i8, i8* %533, i64 2
  store i8 %605, i8* %603, align 1
  %607 = lshr i32 %598, 16
  %608 = trunc i32 %607 to i8
  %609 = getelementptr inbounds i8, i8* %533, i64 3
  store i8 %608, i8* %606, align 1
  %610 = load i16, i16* %39, align 8
  %611 = icmp eq i16 %610, 544
  br i1 %611, label %612, label %616

612:                                              ; preds = %596
  %613 = mul nsw i32 %597, 255
  %614 = lshr i32 %613, 16
  %615 = trunc i32 %614 to i8
  store i8 %615, i8* %609, align 1
  br label %616

616:                                              ; preds = %612, %596
  %617 = icmp eq i8* %534, null
  br i1 %617, label %623, label %618

618:                                              ; preds = %616
  %619 = mul nsw i32 %597, 255
  %620 = lshr i32 %619, 16
  %621 = trunc i32 %620 to i8
  %622 = getelementptr inbounds i8, i8* %534, i64 1
  store i8 %621, i8* %534, align 1
  br label %623

623:                                              ; preds = %616, %618
  %624 = phi i8* [ %622, %618 ], [ null, %616 ]
  %625 = getelementptr inbounds i8, i8* %609, i64 %41
  %626 = add nsw i32 %532, 1
  %627 = load i32, i32* %35, align 8
  %628 = icmp slt i32 %626, %627
  br i1 %628, label %531, label %629

629:                                              ; preds = %623, %510, %432, %346, %260, %200, %148, %527, %453, %362, %273, %208, %156, %93, %89
  %630 = add nsw i32 %60, -1
  %631 = load i32, i32* %9, align 8
  %632 = add nsw i32 %631, 1
  store i32 %632, i32* %9, align 8
  %633 = load i32, i32* %21, align 4
  %634 = icmp slt i32 %632, %633
  br i1 %634, label %45, label %635

635:                                              ; preds = %629, %51, %555, %480, %390, %300, %236, %183, %120, %16, %6, %2
  %636 = phi i1 [ false, %2 ], [ true, %6 ], [ false, %16 ], [ false, %120 ], [ false, %183 ], [ false, %236 ], [ false, %300 ], [ false, %390 ], [ false, %480 ], [ false, %555 ], [ false, %629 ], [ true, %51 ]
  ret i1 %636
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CStretchEngine11StretchVertEv(%class.CStretchEngine* readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.CStretchEngine::CWeightTable", align 8
  %3 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 10
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %428, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.CStretchEngine::CWeightTable"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #6
  %8 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %2, i64 0, i32 0
  %9 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %2, i64 0, i32 1
  %10 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %2, i64 0, i32 3, i32 0, i32 0
  %11 = getelementptr inbounds %"class.CStretchEngine::CWeightTable", %"class.CStretchEngine::CWeightTable"* %2, i64 0, i32 3, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 40, i1 false) #6
  %12 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 11, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 11, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 7
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 16, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 16, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 19
  %23 = call zeroext i1 @_ZN14CStretchEngine12CWeightTable4CalcEiiiiiiRK21FXDIB_ResampleOptions(%"class.CStretchEngine::CWeightTable"* nonnull %2, i32 %4, i32 %13, i32 %15, i32 %17, i32 %19, i32 %21, %struct.FXDIB_ResampleOptions* dereferenceable(4) %22)
  br i1 %23, label %24, label %421

24:                                               ; preds = %6
  %25 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = sdiv i32 %26, 8
  %28 = load i32, i32* %12, align 4
  %29 = load i32, i32* %14, align 4
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %31, label %421

31:                                               ; preds = %24
  %32 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 12, i32 0, i32 0
  %33 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 13, i32 0, i32 0
  %34 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 20
  %35 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 11, i32 0
  %36 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 11, i32 2
  %37 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 14, i32 0, i32 0
  %38 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 0
  %39 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 15, i32 0, i32 0
  %40 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 17
  %41 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 18
  %42 = sext i32 %27 to i64
  %43 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 8, i32 0
  br label %44

44:                                               ; preds = %31, %408
  %45 = phi i32 [ %28, %31 ], [ %418, %408 ]
  %46 = load i8*, i8** %32, align 8
  %47 = load i8*, i8** %33, align 8
  %48 = load i32, i32* %8, align 8
  %49 = sub nsw i32 %45, %48
  %50 = load i32, i32* %9, align 4
  %51 = mul nsw i32 %49, %50
  %52 = sext i32 %51 to i64
  %53 = load i8*, i8** %10, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 %52
  %55 = bitcast i8* %54 to %struct.PixelWeight*
  %56 = load i8, i8* %34, align 4
  switch i8 %56, label %408 [
    i8 0, label %57
    i8 1, label %57
    i8 2, label %57
    i8 3, label %117
    i8 4, label %194
    i8 6, label %194
    i8 5, label %274
    i8 7, label %274
  ]

57:                                               ; preds = %44, %44, %44
  %58 = load i32, i32* %35, align 8
  %59 = load i32, i32* %36, align 8
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %61, label %408

61:                                               ; preds = %57
  %62 = bitcast i8* %54 to i32*
  %63 = getelementptr inbounds i8, i8* %54, i64 4
  %64 = bitcast i8* %63 to i32*
  br label %65

65:                                               ; preds = %114, %61
  %66 = phi i32 [ %58, %61 ], [ %116, %114 ]
  %67 = phi i8* [ %46, %61 ], [ %115, %114 ]
  %68 = phi i32 [ %58, %61 ], [ %111, %114 ]
  %69 = load i8*, i8** %37, align 8
  %70 = sub nsw i32 %68, %66
  %71 = mul nsw i32 %70, %27
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %69, i64 %72
  %74 = load i32, i32* %62, align 4
  %75 = load i32, i32* %64, align 4
  %76 = icmp sgt i32 %74, %75
  br i1 %76, label %107, label %77

77:                                               ; preds = %65
  %78 = load i32, i32* %9, align 4
  %79 = sext i32 %78 to i64
  %80 = lshr i64 %79, 2
  %81 = add nsw i64 %80, -2
  %82 = sext i32 %74 to i64
  %83 = sext i32 %75 to i64
  br label %84

84:                                               ; preds = %77, %92
  %85 = phi i64 [ %105, %92 ], [ %82, %77 ]
  %86 = phi i32 [ %104, %92 ], [ 0, %77 ]
  %87 = sub nsw i64 %85, %82
  %88 = icmp ule i64 %81, %87
  %89 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %55, i64 0, i32 2, i64 %87
  %90 = icmp eq i32* %89, null
  %91 = or i1 %90, %88
  br i1 %91, label %421, label %92

92:                                               ; preds = %84
  %93 = load i32, i32* %89, align 4
  %94 = load i32, i32* %18, align 4
  %95 = trunc i64 %85 to i32
  %96 = sub nsw i32 %95, %94
  %97 = load i32, i32* %40, align 8
  %98 = mul nsw i32 %96, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %73, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = mul nsw i32 %93, %102
  %104 = add nsw i32 %103, %86
  %105 = add nsw i64 %85, 1
  %106 = icmp slt i64 %85, %83
  br i1 %106, label %84, label %107

107:                                              ; preds = %92, %65
  %108 = phi i32 [ 0, %65 ], [ %104, %92 ]
  %109 = lshr i32 %108, 16
  %110 = trunc i32 %109 to i8
  store i8 %110, i8* %67, align 1
  %111 = add nsw i32 %68, 1
  %112 = load i32, i32* %36, align 8
  %113 = icmp slt i32 %111, %112
  br i1 %113, label %114, label %408

114:                                              ; preds = %107
  %115 = getelementptr inbounds i8, i8* %67, i64 %42
  %116 = load i32, i32* %35, align 8
  br label %65

117:                                              ; preds = %44
  %118 = load i32, i32* %35, align 8
  %119 = load i32, i32* %36, align 8
  %120 = icmp slt i32 %118, %119
  br i1 %120, label %121, label %408

121:                                              ; preds = %117
  %122 = bitcast i8* %54 to i32*
  %123 = getelementptr inbounds i8, i8* %54, i64 4
  %124 = bitcast i8* %123 to i32*
  br label %125

125:                                              ; preds = %190, %121
  %126 = phi i32 [ %118, %121 ], [ %193, %190 ]
  %127 = phi i32 [ %118, %121 ], [ %187, %190 ]
  %128 = phi i8* [ %46, %121 ], [ %192, %190 ]
  %129 = phi i8* [ %47, %121 ], [ %191, %190 ]
  %130 = load i8*, i8** %37, align 8
  %131 = sub nsw i32 %127, %126
  %132 = mul nsw i32 %131, %27
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %130, i64 %133
  %135 = load i8*, i8** %39, align 8
  %136 = sext i32 %131 to i64
  %137 = getelementptr inbounds i8, i8* %135, i64 %136
  %138 = load i32, i32* %122, align 4
  %139 = load i32, i32* %124, align 4
  %140 = icmp sgt i32 %138, %139
  br i1 %140, label %180, label %141

141:                                              ; preds = %125
  %142 = load i32, i32* %9, align 4
  %143 = sext i32 %142 to i64
  %144 = lshr i64 %143, 2
  %145 = add nsw i64 %144, -2
  %146 = sext i32 %138 to i64
  %147 = sext i32 %139 to i64
  br label %148

148:                                              ; preds = %141, %157
  %149 = phi i64 [ %178, %157 ], [ %146, %141 ]
  %150 = phi i32 [ %169, %157 ], [ 0, %141 ]
  %151 = phi i32 [ %177, %157 ], [ 0, %141 ]
  %152 = sub nsw i64 %149, %146
  %153 = icmp ule i64 %145, %152
  %154 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %55, i64 0, i32 2, i64 %152
  %155 = icmp eq i32* %154, null
  %156 = or i1 %155, %153
  br i1 %156, label %421, label %157

157:                                              ; preds = %148
  %158 = load i32, i32* %154, align 4
  %159 = load i32, i32* %18, align 4
  %160 = trunc i64 %149 to i32
  %161 = sub nsw i32 %160, %159
  %162 = load i32, i32* %40, align 8
  %163 = mul nsw i32 %161, %162
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %134, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = mul nsw i32 %158, %167
  %169 = add nsw i32 %168, %150
  %170 = load i32, i32* %41, align 4
  %171 = mul nsw i32 %170, %161
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %137, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = mul nsw i32 %158, %175
  %177 = add nsw i32 %176, %151
  %178 = add nsw i64 %149, 1
  %179 = icmp slt i64 %149, %147
  br i1 %179, label %148, label %180

180:                                              ; preds = %157, %125
  %181 = phi i32 [ 0, %125 ], [ %177, %157 ]
  %182 = phi i32 [ 0, %125 ], [ %169, %157 ]
  %183 = lshr i32 %182, 16
  %184 = trunc i32 %183 to i8
  store i8 %184, i8* %128, align 1
  %185 = lshr i32 %181, 16
  %186 = trunc i32 %185 to i8
  store i8 %186, i8* %129, align 1
  %187 = add nsw i32 %127, 1
  %188 = load i32, i32* %36, align 8
  %189 = icmp slt i32 %187, %188
  br i1 %189, label %190, label %408

190:                                              ; preds = %180
  %191 = getelementptr inbounds i8, i8* %129, i64 1
  %192 = getelementptr inbounds i8, i8* %128, i64 %42
  %193 = load i32, i32* %35, align 8
  br label %125

194:                                              ; preds = %44, %44
  %195 = load i32, i32* %35, align 8
  %196 = load i32, i32* %36, align 8
  %197 = icmp slt i32 %195, %196
  br i1 %197, label %198, label %408

198:                                              ; preds = %194
  %199 = bitcast i8* %54 to i32*
  %200 = getelementptr inbounds i8, i8* %54, i64 4
  %201 = bitcast i8* %200 to i32*
  br label %202

202:                                              ; preds = %271, %198
  %203 = phi i32 [ %195, %198 ], [ %273, %271 ]
  %204 = phi i32 [ %195, %198 ], [ %268, %271 ]
  %205 = phi i8* [ %46, %198 ], [ %272, %271 ]
  %206 = load i8*, i8** %37, align 8
  %207 = sub nsw i32 %204, %203
  %208 = mul nsw i32 %207, %27
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds i8, i8* %206, i64 %209
  %211 = load i32, i32* %199, align 4
  %212 = load i32, i32* %201, align 4
  %213 = icmp sgt i32 %211, %212
  br i1 %213, label %256, label %214

214:                                              ; preds = %202
  %215 = load i32, i32* %9, align 4
  %216 = sext i32 %215 to i64
  %217 = lshr i64 %216, 2
  %218 = add nsw i64 %217, -2
  %219 = sext i32 %211 to i64
  %220 = sext i32 %212 to i64
  br label %221

221:                                              ; preds = %214, %231
  %222 = phi i64 [ %254, %231 ], [ %219, %214 ]
  %223 = phi i32 [ %244, %231 ], [ 0, %214 ]
  %224 = phi i32 [ %249, %231 ], [ 0, %214 ]
  %225 = phi i32 [ %253, %231 ], [ 0, %214 ]
  %226 = sub nsw i64 %222, %219
  %227 = icmp ule i64 %218, %226
  %228 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %55, i64 0, i32 2, i64 %226
  %229 = icmp eq i32* %228, null
  %230 = or i1 %229, %227
  br i1 %230, label %421, label %231

231:                                              ; preds = %221
  %232 = load i32, i32* %228, align 4
  %233 = load i32, i32* %18, align 4
  %234 = trunc i64 %222 to i32
  %235 = sub nsw i32 %234, %233
  %236 = load i32, i32* %40, align 8
  %237 = mul nsw i32 %235, %236
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i8, i8* %210, i64 %238
  %240 = getelementptr inbounds i8, i8* %239, i64 1
  %241 = load i8, i8* %239, align 1
  %242 = zext i8 %241 to i32
  %243 = mul nsw i32 %232, %242
  %244 = add nsw i32 %243, %223
  %245 = getelementptr inbounds i8, i8* %240, i64 1
  %246 = load i8, i8* %240, align 1
  %247 = zext i8 %246 to i32
  %248 = mul nsw i32 %232, %247
  %249 = add nsw i32 %248, %224
  %250 = load i8, i8* %245, align 1
  %251 = zext i8 %250 to i32
  %252 = mul nsw i32 %232, %251
  %253 = add nsw i32 %252, %225
  %254 = add nsw i64 %222, 1
  %255 = icmp slt i64 %222, %220
  br i1 %255, label %221, label %256

256:                                              ; preds = %231, %202
  %257 = phi i32 [ 0, %202 ], [ %253, %231 ]
  %258 = phi i32 [ 0, %202 ], [ %249, %231 ]
  %259 = phi i32 [ 0, %202 ], [ %244, %231 ]
  %260 = lshr i32 %259, 16
  %261 = trunc i32 %260 to i8
  store i8 %261, i8* %205, align 1
  %262 = lshr i32 %258, 16
  %263 = trunc i32 %262 to i8
  %264 = getelementptr inbounds i8, i8* %205, i64 1
  store i8 %263, i8* %264, align 1
  %265 = lshr i32 %257, 16
  %266 = trunc i32 %265 to i8
  %267 = getelementptr inbounds i8, i8* %205, i64 2
  store i8 %266, i8* %267, align 1
  %268 = add nsw i32 %204, 1
  %269 = load i32, i32* %36, align 8
  %270 = icmp slt i32 %268, %269
  br i1 %270, label %271, label %408

271:                                              ; preds = %256
  %272 = getelementptr inbounds i8, i8* %205, i64 %42
  %273 = load i32, i32* %35, align 8
  br label %202

274:                                              ; preds = %44, %44
  %275 = load i32, i32* %35, align 8
  %276 = load i32, i32* %36, align 8
  %277 = icmp slt i32 %275, %276
  br i1 %277, label %278, label %408

278:                                              ; preds = %274
  %279 = bitcast i8* %54 to i32*
  %280 = getelementptr inbounds i8, i8* %54, i64 4
  %281 = bitcast i8* %280 to i32*
  br label %282

282:                                              ; preds = %402, %278
  %283 = phi i32 [ %275, %278 ], [ %407, %402 ]
  %284 = phi i32 [ %275, %278 ], [ %399, %402 ]
  %285 = phi i8* [ %46, %278 ], [ %406, %402 ]
  %286 = phi i8* [ %47, %278 ], [ %405, %402 ]
  %287 = load i8*, i8** %37, align 8
  %288 = sub nsw i32 %284, %283
  %289 = mul nsw i32 %288, %27
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds i8, i8* %287, i64 %290
  %292 = load i16, i16* %38, align 8
  %293 = icmp eq i16 %292, 544
  br i1 %293, label %298, label %294

294:                                              ; preds = %282
  %295 = load i8*, i8** %39, align 8
  %296 = sext i32 %288 to i64
  %297 = getelementptr inbounds i8, i8* %295, i64 %296
  br label %298

298:                                              ; preds = %282, %294
  %299 = phi i8* [ %297, %294 ], [ null, %282 ]
  %300 = load i32, i32* %279, align 4
  %301 = load i32, i32* %281, align 4
  %302 = icmp sgt i32 %300, %301
  br i1 %302, label %391, label %303

303:                                              ; preds = %298
  %304 = load i32, i32* %9, align 4
  %305 = sext i32 %304 to i64
  %306 = lshr i64 %305, 2
  %307 = add nsw i64 %306, -2
  %308 = icmp eq i8* %299, null
  %309 = sext i32 %300 to i64
  %310 = sext i32 %301 to i64
  br label %311

311:                                              ; preds = %303, %358
  %312 = phi i64 [ %362, %358 ], [ %309, %303 ]
  %313 = phi i32 [ %344, %358 ], [ 0, %303 ]
  %314 = phi i32 [ %349, %358 ], [ 0, %303 ]
  %315 = phi i32 [ %353, %358 ], [ 0, %303 ]
  %316 = phi i32 [ %361, %358 ], [ 0, %303 ]
  %317 = sub nsw i64 %312, %309
  %318 = icmp ule i64 %307, %317
  %319 = getelementptr inbounds %struct.PixelWeight, %struct.PixelWeight* %55, i64 0, i32 2, i64 %317
  %320 = icmp eq i32* %319, null
  %321 = or i1 %320, %318
  br i1 %321, label %421, label %322

322:                                              ; preds = %311
  %323 = load i32, i32* %319, align 4
  %324 = load i32, i32* %18, align 4
  %325 = trunc i64 %312 to i32
  %326 = sub nsw i32 %325, %324
  %327 = load i32, i32* %40, align 8
  %328 = mul nsw i32 %326, %327
  %329 = sext i32 %328 to i64
  %330 = getelementptr inbounds i8, i8* %291, i64 %329
  br i1 %308, label %338, label %331

331:                                              ; preds = %322
  %332 = load i32, i32* %41, align 4
  %333 = mul nsw i32 %332, %326
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds i8, i8* %299, i64 %334
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i32
  br label %338

338:                                              ; preds = %322, %331
  %339 = phi i32 [ %337, %331 ], [ 255, %322 ]
  %340 = getelementptr inbounds i8, i8* %330, i64 1
  %341 = load i8, i8* %330, align 1
  %342 = zext i8 %341 to i32
  %343 = mul nsw i32 %323, %342
  %344 = add nsw i32 %343, %313
  %345 = getelementptr inbounds i8, i8* %340, i64 1
  %346 = load i8, i8* %340, align 1
  %347 = zext i8 %346 to i32
  %348 = mul nsw i32 %323, %347
  %349 = add nsw i32 %348, %314
  %350 = load i8, i8* %345, align 1
  %351 = zext i8 %350 to i32
  %352 = mul nsw i32 %323, %351
  %353 = add nsw i32 %352, %315
  br i1 %293, label %354, label %358

354:                                              ; preds = %338
  %355 = getelementptr inbounds i8, i8* %345, i64 1
  %356 = load i8, i8* %355, align 1
  %357 = zext i8 %356 to i32
  br label %358

358:                                              ; preds = %338, %354
  %359 = phi i32 [ %357, %354 ], [ %339, %338 ]
  %360 = mul nsw i32 %359, %323
  %361 = add nsw i32 %360, %316
  %362 = add nsw i64 %312, 1
  %363 = icmp slt i64 %312, %310
  br i1 %363, label %311, label %364

364:                                              ; preds = %358
  %365 = icmp eq i32 %361, 0
  br i1 %365, label %391, label %366

366:                                              ; preds = %364
  %367 = mul i32 %353, 255
  %368 = udiv i32 %367, %361
  %369 = mul i32 %349, 255
  %370 = udiv i32 %369, %361
  %371 = mul i32 %344, 255
  %372 = udiv i32 %371, %361
  %373 = icmp sgt i32 %372, 0
  %374 = select i1 %373, i32 %372, i32 0
  %375 = icmp slt i32 %374, 255
  %376 = select i1 %375, i32 %374, i32 255
  %377 = trunc i32 %376 to i8
  store i8 %377, i8* %285, align 1
  %378 = icmp sgt i32 %370, 0
  %379 = select i1 %378, i32 %370, i32 0
  %380 = icmp slt i32 %379, 255
  %381 = select i1 %380, i32 %379, i32 255
  %382 = trunc i32 %381 to i8
  %383 = getelementptr inbounds i8, i8* %285, i64 1
  store i8 %382, i8* %383, align 1
  %384 = icmp sgt i32 %368, 0
  %385 = select i1 %384, i32 %368, i32 0
  %386 = icmp slt i32 %385, 255
  %387 = select i1 %386, i32 %385, i32 255
  %388 = trunc i32 %387 to i8
  %389 = getelementptr inbounds i8, i8* %285, i64 2
  store i8 %388, i8* %389, align 1
  %390 = load i16, i16* %38, align 8
  br label %391

391:                                              ; preds = %298, %364, %366
  %392 = phi i32 [ 0, %364 ], [ %361, %366 ], [ 0, %298 ]
  %393 = phi i16 [ %292, %364 ], [ %390, %366 ], [ %292, %298 ]
  %394 = icmp eq i16 %393, 544
  %395 = lshr i32 %392, 16
  %396 = trunc i32 %395 to i8
  %397 = getelementptr inbounds i8, i8* %285, i64 3
  %398 = select i1 %394, i8* %397, i8* %286
  store i8 %396, i8* %398, align 1
  %399 = add nsw i32 %284, 1
  %400 = load i32, i32* %36, align 8
  %401 = icmp slt i32 %399, %400
  br i1 %401, label %402, label %408

402:                                              ; preds = %391
  %403 = icmp eq i8* %286, null
  %404 = getelementptr inbounds i8, i8* %286, i64 1
  %405 = select i1 %403, i8* null, i8* %404
  %406 = getelementptr inbounds i8, i8* %285, i64 %42
  %407 = load i32, i32* %35, align 8
  br label %282

408:                                              ; preds = %391, %256, %180, %107, %274, %194, %117, %57, %44
  %409 = load %class.ScanlineComposerIface*, %class.ScanlineComposerIface** %43, align 8
  %410 = load i32, i32* %12, align 4
  %411 = sub nsw i32 %45, %410
  %412 = load i8*, i8** %32, align 8
  %413 = load i8*, i8** %33, align 8
  %414 = bitcast %class.ScanlineComposerIface* %409 to void (%class.ScanlineComposerIface*, i32, i8*, i8*)***
  %415 = load void (%class.ScanlineComposerIface*, i32, i8*, i8*)**, void (%class.ScanlineComposerIface*, i32, i8*, i8*)*** %414, align 8
  %416 = getelementptr inbounds void (%class.ScanlineComposerIface*, i32, i8*, i8*)*, void (%class.ScanlineComposerIface*, i32, i8*, i8*)** %415, i64 2
  %417 = load void (%class.ScanlineComposerIface*, i32, i8*, i8*)*, void (%class.ScanlineComposerIface*, i32, i8*, i8*)** %416, align 8
  call void %417(%class.ScanlineComposerIface* %409, i32 %411, i8* %412, i8* %413) #6
  %418 = add nsw i32 %45, 1
  %419 = load i32, i32* %14, align 4
  %420 = icmp slt i32 %418, %419
  br i1 %420, label %44, label %421

421:                                              ; preds = %408, %311, %221, %148, %84, %24, %6
  %422 = load i8*, i8** %10, align 8
  %423 = icmp eq i8* %422, null
  br i1 %423, label %427, label %424

424:                                              ; preds = %421
  %425 = ptrtoint i8* %422 to i64
  %426 = bitcast i8** %11 to i64*
  store i64 %425, i64* %426, align 8
  call void @_Z7FX_FreePv(i8* nonnull %422) #6
  br label %427

427:                                              ; preds = %421, %424
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #6
  br label %428

428:                                              ; preds = %1, %427
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN14CStretchEngine16StartStretchHorzEv(%class.CStretchEngine*) local_unnamed_addr #0 align 2 {
  %2 = alloca i8, align 1
  %3 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 9
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %117, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 17
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %117, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 12, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 12, i32 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %12, %14
  br i1 %15, label %117, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 16, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 16, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = sub nsw i32 %18, %20
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %117, label %23

23:                                               ; preds = %16
  %24 = sdiv i32 536870912, %8
  %25 = icmp sgt i32 %21, %24
  br i1 %25, label %117, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 14
  %28 = mul nsw i32 %21, %8
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 14, i32 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.std::__1::vector"* %27 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %32, %34
  %36 = icmp ult i64 %35, %29
  %37 = inttoptr i64 %34 to i8*
  br i1 %36, label %38, label %40

38:                                               ; preds = %26
  %39 = sub i64 %29, %35
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %27, i64 %39) #6
  br label %44

40:                                               ; preds = %26
  %41 = icmp ugt i64 %35, %29
  br i1 %41, label %42, label %44

42:                                               ; preds = %40
  %43 = getelementptr inbounds i8, i8* %37, i64 %29
  store i8* %43, i8** %30, align 8
  br label %44

44:                                               ; preds = %38, %40, %42
  %45 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %46 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %45, align 8
  %47 = icmp eq %class.CFX_DIBBase* %46, null
  br i1 %47, label %98, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 3
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %98, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %46, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %54 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %53, align 8
  %55 = icmp eq %class.CFX_DIBitmap* %54, null
  br i1 %55, label %98, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 15
  %58 = load i32, i32* %17, align 4
  %59 = load i32, i32* %19, align 4
  %60 = sub nsw i32 %58, %59
  %61 = sext i32 %60 to i64
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %2) #6
  %62 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 18
  %63 = load i32, i32* %62, align 4
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %2, align 1
  %65 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 15, i32 0, i32 1
  %66 = bitcast i8** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"class.std::__1::vector"* %57 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = sub i64 %67, %69
  %71 = icmp ult i64 %70, %61
  %72 = inttoptr i64 %69 to i8*
  br i1 %71, label %73, label %76

73:                                               ; preds = %56
  %74 = sub i64 %61, %70
  call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEmRKh(%"class.std::__1::vector"* %57, i64 %74, i8* nonnull dereferenceable(1) %2) #6
  %75 = load i32, i32* %62, align 4
  br label %80

76:                                               ; preds = %56
  %77 = icmp ugt i64 %70, %61
  br i1 %77, label %78, label %80

78:                                               ; preds = %76
  %79 = getelementptr inbounds i8, i8* %72, i64 %61
  store i8* %79, i8** %65, align 8
  br label %80

80:                                               ; preds = %73, %76, %78
  %81 = phi i32 [ %75, %73 ], [ %63, %76 ], [ %63, %78 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %2) #6
  %82 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 13
  %83 = sext i32 %81 to i64
  %84 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 13, i32 0, i32 1
  %85 = bitcast i8** %84 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %"class.std::__1::vector"* %82 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = sub i64 %86, %88
  %90 = icmp ult i64 %89, %83
  %91 = inttoptr i64 %88 to i8*
  br i1 %90, label %92, label %94

92:                                               ; preds = %80
  %93 = sub i64 %83, %89
  call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %82, i64 %93) #6
  br label %98

94:                                               ; preds = %80
  %95 = icmp ugt i64 %89, %83
  br i1 %95, label %96, label %98

96:                                               ; preds = %94
  %97 = getelementptr inbounds i8, i8* %91, i64 %83
  store i8* %97, i8** %84, align 8
  br label %98

98:                                               ; preds = %52, %44, %96, %94, %92, %48
  %99 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 23
  %100 = load i32, i32* %3, align 8
  %101 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 11, i32 0
  %102 = load i32, i32* %101, align 8
  %103 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 11, i32 2
  %104 = load i32, i32* %103, align 8
  %105 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 6
  %106 = load i32, i32* %105, align 8
  %107 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 16, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 16, i32 2
  %110 = load i32, i32* %109, align 8
  %111 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 19
  %112 = call zeroext i1 @_ZN14CStretchEngine12CWeightTable4CalcEiiiiiiRK21FXDIB_ResampleOptions(%"class.CStretchEngine::CWeightTable"* %99, i32 %100, i32 %102, i32 %104, i32 %106, i32 %108, i32 %110, %struct.FXDIB_ResampleOptions* dereferenceable(4) %111)
  br i1 %112, label %113, label %117

113:                                              ; preds = %98
  %114 = load i32, i32* %19, align 4
  %115 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 22
  store i32 %114, i32* %115, align 8
  %116 = getelementptr inbounds %class.CStretchEngine, %class.CStretchEngine* %0, i64 0, i32 21
  store i8 1, i8* %116, align 1
  br label %117

117:                                              ; preds = %113, %98, %16, %23, %1, %6, %10
  %118 = phi i1 [ false, %10 ], [ false, %6 ], [ false, %1 ], [ false, %23 ], [ false, %16 ], [ true, %113 ], [ false, %98 ]
  ret i1 %118
}

declare i8* @_ZNK11CFX_DIBBase20GetAlphaMaskScanlineEi(%class.CFX_DIBBase*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #4

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #6
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %178

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #7
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %39, i64 1) #6
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #6
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = ptrtoint i8* %54 to i64
  %56 = load i8*, i8** %6, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = icmp eq i8* %56, %54
  br i1 %58, label %172, label %59

59:                                               ; preds = %41
  %60 = ptrtoint i8* %56 to i64
  %61 = sub i64 %60, %55
  %62 = icmp ult i64 %61, 16
  br i1 %62, label %158, label %63

63:                                               ; preds = %59
  %64 = sub i64 %8, %57
  %65 = sub i64 %64, %24
  %66 = getelementptr i8, i8* %54, i64 %65
  %67 = ptrtoint i8* %66 to i64
  %68 = getelementptr i8, i8* %43, i64 %67
  %69 = icmp ult i8* %68, %56
  %70 = icmp ult i8* %54, %44
  %71 = and i1 %69, %70
  br i1 %71, label %158, label %72

72:                                               ; preds = %63
  %73 = and i64 %61, -16
  %74 = sub i64 0, %73
  %75 = getelementptr i8, i8* %44, i64 %74
  %76 = sub i64 0, %73
  %77 = getelementptr i8, i8* %56, i64 %76
  %78 = add i64 %73, -16
  %79 = lshr exact i64 %78, 4
  %80 = add nuw nsw i64 %79, 1
  %81 = and i64 %80, 3
  %82 = icmp ult i64 %78, 48
  br i1 %82, label %135, label %83

83:                                               ; preds = %72
  %84 = sub nsw i64 %80, %81
  %85 = getelementptr i8, i8* %44, i64 -1
  %86 = getelementptr inbounds i8, i8* %85, i64 -8
  %87 = getelementptr inbounds i8, i8* %56, i64 -16
  %88 = getelementptr inbounds i8, i8* %86, i64 -7
  %89 = getelementptr i8, i8* %44, i64 -1
  %90 = getelementptr inbounds i8, i8* %89, i64 -8
  %91 = getelementptr inbounds i8, i8* %56, i64 -16
  %92 = getelementptr inbounds i8, i8* %90, i64 -7
  %93 = getelementptr i8, i8* %44, i64 -1
  %94 = getelementptr inbounds i8, i8* %93, i64 -8
  %95 = getelementptr inbounds i8, i8* %56, i64 -16
  %96 = getelementptr inbounds i8, i8* %94, i64 -7
  %97 = getelementptr i8, i8* %44, i64 -1
  %98 = getelementptr inbounds i8, i8* %97, i64 -8
  %99 = getelementptr inbounds i8, i8* %56, i64 -16
  %100 = getelementptr inbounds i8, i8* %98, i64 -7
  br label %101

101:                                              ; preds = %101, %83
  %102 = phi i64 [ 0, %83 ], [ %132, %101 ]
  %103 = phi i64 [ %84, %83 ], [ %133, %101 ]
  %104 = sub i64 0, %102
  %105 = sub i64 0, %102
  %106 = getelementptr inbounds i8, i8* %87, i64 %105
  %107 = bitcast i8* %106 to <2 x i64>*
  %108 = load <2 x i64>, <2 x i64>* %107, align 1, !alias.scope !9
  %109 = getelementptr inbounds i8, i8* %88, i64 %104
  %110 = bitcast i8* %109 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %110, align 1, !alias.scope !12, !noalias !9
  %111 = sub nuw nsw i64 -16, %102
  %112 = sub nuw nsw i64 -16, %102
  %113 = getelementptr inbounds i8, i8* %91, i64 %112
  %114 = bitcast i8* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1, !alias.scope !9
  %116 = getelementptr inbounds i8, i8* %92, i64 %111
  %117 = bitcast i8* %116 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %117, align 1, !alias.scope !12, !noalias !9
  %118 = sub nuw nsw i64 -32, %102
  %119 = sub nuw nsw i64 -32, %102
  %120 = getelementptr inbounds i8, i8* %95, i64 %119
  %121 = bitcast i8* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 1, !alias.scope !9
  %123 = getelementptr inbounds i8, i8* %96, i64 %118
  %124 = bitcast i8* %123 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %124, align 1, !alias.scope !12, !noalias !9
  %125 = sub nuw nsw i64 -48, %102
  %126 = sub nuw nsw i64 -48, %102
  %127 = getelementptr inbounds i8, i8* %99, i64 %126
  %128 = bitcast i8* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 1, !alias.scope !9
  %130 = getelementptr inbounds i8, i8* %100, i64 %125
  %131 = bitcast i8* %130 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %131, align 1, !alias.scope !12, !noalias !9
  %132 = add i64 %102, 64
  %133 = add i64 %103, -4
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %101, !llvm.loop !14

135:                                              ; preds = %101, %72
  %136 = phi i64 [ 0, %72 ], [ %132, %101 ]
  %137 = icmp eq i64 %81, 0
  br i1 %137, label %156, label %138

138:                                              ; preds = %135
  %139 = getelementptr i8, i8* %44, i64 -1
  %140 = getelementptr inbounds i8, i8* %139, i64 -8
  %141 = getelementptr inbounds i8, i8* %56, i64 -16
  %142 = getelementptr inbounds i8, i8* %140, i64 -7
  br label %143

143:                                              ; preds = %143, %138
  %144 = phi i64 [ %136, %138 ], [ %153, %143 ]
  %145 = phi i64 [ %81, %138 ], [ %154, %143 ]
  %146 = sub i64 0, %144
  %147 = sub i64 0, %144
  %148 = getelementptr inbounds i8, i8* %141, i64 %147
  %149 = bitcast i8* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 1, !alias.scope !9
  %151 = getelementptr inbounds i8, i8* %142, i64 %146
  %152 = bitcast i8* %151 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %152, align 1, !alias.scope !12, !noalias !9
  %153 = add i64 %144, 16
  %154 = add i64 %145, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %143, !llvm.loop !16

156:                                              ; preds = %143, %135
  %157 = icmp eq i64 %61, %73
  br i1 %157, label %168, label %158

158:                                              ; preds = %156, %63, %59
  %159 = phi i8* [ %44, %63 ], [ %44, %59 ], [ %75, %156 ]
  %160 = phi i8* [ %56, %63 ], [ %56, %59 ], [ %77, %156 ]
  br label %161

161:                                              ; preds = %158, %161
  %162 = phi i8* [ %164, %161 ], [ %159, %158 ]
  %163 = phi i8* [ %165, %161 ], [ %160, %158 ]
  %164 = getelementptr inbounds i8, i8* %162, i64 -1
  %165 = getelementptr inbounds i8, i8* %163, i64 -1
  %166 = load i8, i8* %165, align 1
  store i8 %166, i8* %164, align 1
  %167 = icmp eq i8* %165, %54
  br i1 %167, label %168, label %161, !llvm.loop !18

168:                                              ; preds = %161, %156
  %169 = phi i8* [ %75, %156 ], [ %164, %161 ]
  %170 = ptrtoint i8* %169 to i64
  %171 = load i64, i64* %23, align 8
  br label %172

172:                                              ; preds = %41, %168
  %173 = phi i64 [ %170, %168 ], [ %45, %41 ]
  %174 = phi i64 [ %171, %168 ], [ %55, %41 ]
  store i64 %173, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %178, label %176

176:                                              ; preds = %172
  %177 = inttoptr i64 %174 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %177) #6
  br label %178

178:                                              ; preds = %176, %172, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEmRKh(%"class.std::__1::vector"*, i64, i8* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %84, label %12

12:                                               ; preds = %3
  %13 = inttoptr i64 %9 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %82, label %16

16:                                               ; preds = %12
  %17 = icmp ult i64 %1, 32
  br i1 %17, label %18, label %20

18:                                               ; preds = %73, %20, %16
  %19 = phi i8* [ %13, %20 ], [ %13, %16 ], [ %27, %73 ]
  br label %77

20:                                               ; preds = %16
  %21 = getelementptr i8, i8* %2, i64 1
  %22 = icmp ugt i8* %21, %13
  %23 = icmp ugt i8* %14, %2
  %24 = and i1 %22, %23
  br i1 %24, label %18, label %25

25:                                               ; preds = %20
  %26 = and i64 %1, -32
  %27 = getelementptr i8, i8* %13, i64 %26
  %28 = add i64 %26, -32
  %29 = lshr exact i64 %28, 5
  %30 = add nuw nsw i64 %29, 1
  %31 = and i64 %30, 1
  %32 = icmp eq i64 %28, 0
  br i1 %32, label %60, label %33

33:                                               ; preds = %25
  %34 = sub nuw nsw i64 %30, %31
  %35 = load i8, i8* %2, align 1, !alias.scope !19
  %36 = insertelement <16 x i8> undef, i8 %35, i32 0
  %37 = shufflevector <16 x i8> %36, <16 x i8> undef, <16 x i32> zeroinitializer
  %38 = insertelement <16 x i8> undef, i8 %35, i32 0
  %39 = shufflevector <16 x i8> %38, <16 x i8> undef, <16 x i32> zeroinitializer
  %40 = load i8, i8* %2, align 1, !alias.scope !19
  %41 = insertelement <16 x i8> undef, i8 %40, i32 0
  %42 = shufflevector <16 x i8> %41, <16 x i8> undef, <16 x i32> zeroinitializer
  %43 = insertelement <16 x i8> undef, i8 %40, i32 0
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %45

45:                                               ; preds = %45, %33
  %46 = phi i64 [ 0, %33 ], [ %57, %45 ]
  %47 = phi i64 [ %34, %33 ], [ %58, %45 ]
  %48 = getelementptr i8, i8* %13, i64 %46
  %49 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> %37, <16 x i8>* %49, align 1, !alias.scope !22, !noalias !19
  %50 = getelementptr i8, i8* %48, i64 16
  %51 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %51, align 1, !alias.scope !22, !noalias !19
  %52 = or i64 %46, 32
  %53 = getelementptr i8, i8* %13, i64 %52
  %54 = bitcast i8* %53 to <16 x i8>*
  store <16 x i8> %42, <16 x i8>* %54, align 1, !alias.scope !22, !noalias !19
  %55 = getelementptr i8, i8* %53, i64 16
  %56 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %44, <16 x i8>* %56, align 1, !alias.scope !22, !noalias !19
  %57 = add i64 %46, 64
  %58 = add i64 %47, -2
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %45, !llvm.loop !24

60:                                               ; preds = %45, %25
  %61 = phi i64 [ 0, %25 ], [ %57, %45 ]
  %62 = icmp eq i64 %31, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %60
  %64 = getelementptr i8, i8* %13, i64 %61
  %65 = load i8, i8* %2, align 1, !alias.scope !19
  %66 = insertelement <16 x i8> undef, i8 %65, i32 0
  %67 = shufflevector <16 x i8> %66, <16 x i8> undef, <16 x i32> zeroinitializer
  %68 = insertelement <16 x i8> undef, i8 %65, i32 0
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> zeroinitializer
  %70 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %70, align 1, !alias.scope !22, !noalias !19
  %71 = getelementptr i8, i8* %64, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %72, align 1, !alias.scope !22, !noalias !19
  br label %73

73:                                               ; preds = %60, %63
  %74 = icmp eq i64 %26, %1
  br i1 %74, label %75, label %18

75:                                               ; preds = %77, %73
  %76 = ptrtoint i8* %14 to i64
  br label %82

77:                                               ; preds = %18, %77
  %78 = phi i8* [ %80, %77 ], [ %19, %18 ]
  %79 = load i8, i8* %2, align 1
  store i8 %79, i8* %78, align 1
  %80 = getelementptr inbounds i8, i8* %78, i64 1
  %81 = icmp eq i8* %80, %14
  br i1 %81, label %75, label %77, !llvm.loop !25

82:                                               ; preds = %12, %75
  %83 = phi i64 [ %76, %75 ], [ %9, %12 ]
  store i64 %83, i64* %8, align 8
  br label %300

84:                                               ; preds = %3
  %85 = bitcast %"class.std::__1::vector"* %0 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = sub i64 %9, %86
  %88 = add i64 %87, %1
  %89 = icmp slt i64 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %84
  %91 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %91) #7
  unreachable

92:                                               ; preds = %84
  %93 = sub i64 %6, %86
  %94 = icmp ult i64 %93, 4611686018427387903
  br i1 %94, label %95, label %100

95:                                               ; preds = %92
  %96 = shl i64 %93, 1
  %97 = icmp ult i64 %96, %88
  %98 = select i1 %97, i64 %88, i64 %96
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %103, label %100

100:                                              ; preds = %92, %95
  %101 = phi i64 [ %98, %95 ], [ 9223372036854775807, %92 ]
  %102 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %101, i64 1) #6
  br label %103

103:                                              ; preds = %95, %100
  %104 = phi i64 [ %101, %100 ], [ 0, %95 ]
  %105 = phi i8* [ %102, %100 ], [ null, %95 ]
  %106 = getelementptr inbounds i8, i8* %105, i64 %87
  %107 = getelementptr inbounds i8, i8* %105, i64 %104
  %108 = getelementptr inbounds i8, i8* %106, i64 %1
  %109 = icmp ult i64 %1, 32
  br i1 %109, label %165, label %110

110:                                              ; preds = %103
  %111 = getelementptr i8, i8* %2, i64 1
  %112 = icmp ult i8* %106, %111
  %113 = icmp ugt i8* %108, %2
  %114 = and i1 %112, %113
  br i1 %114, label %165, label %115

115:                                              ; preds = %110
  %116 = and i64 %1, -32
  %117 = getelementptr i8, i8* %106, i64 %116
  %118 = add i64 %116, -32
  %119 = lshr exact i64 %118, 5
  %120 = add nuw nsw i64 %119, 1
  %121 = and i64 %120, 1
  %122 = icmp eq i64 %118, 0
  br i1 %122, label %150, label %123

123:                                              ; preds = %115
  %124 = sub nuw nsw i64 %120, %121
  %125 = load i8, i8* %2, align 1, !alias.scope !26
  %126 = insertelement <16 x i8> undef, i8 %125, i32 0
  %127 = shufflevector <16 x i8> %126, <16 x i8> undef, <16 x i32> zeroinitializer
  %128 = insertelement <16 x i8> undef, i8 %125, i32 0
  %129 = shufflevector <16 x i8> %128, <16 x i8> undef, <16 x i32> zeroinitializer
  %130 = load i8, i8* %2, align 1, !alias.scope !26
  %131 = insertelement <16 x i8> undef, i8 %130, i32 0
  %132 = shufflevector <16 x i8> %131, <16 x i8> undef, <16 x i32> zeroinitializer
  %133 = insertelement <16 x i8> undef, i8 %130, i32 0
  %134 = shufflevector <16 x i8> %133, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %135

135:                                              ; preds = %135, %123
  %136 = phi i64 [ 0, %123 ], [ %147, %135 ]
  %137 = phi i64 [ %124, %123 ], [ %148, %135 ]
  %138 = getelementptr i8, i8* %106, i64 %136
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %127, <16 x i8>* %139, align 1, !alias.scope !29, !noalias !26
  %140 = getelementptr i8, i8* %138, i64 16
  %141 = bitcast i8* %140 to <16 x i8>*
  store <16 x i8> %129, <16 x i8>* %141, align 1, !alias.scope !29, !noalias !26
  %142 = or i64 %136, 32
  %143 = getelementptr i8, i8* %106, i64 %142
  %144 = bitcast i8* %143 to <16 x i8>*
  store <16 x i8> %132, <16 x i8>* %144, align 1, !alias.scope !29, !noalias !26
  %145 = getelementptr i8, i8* %143, i64 16
  %146 = bitcast i8* %145 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %146, align 1, !alias.scope !29, !noalias !26
  %147 = add i64 %136, 64
  %148 = add i64 %137, -2
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %135, !llvm.loop !31

150:                                              ; preds = %135, %115
  %151 = phi i64 [ 0, %115 ], [ %147, %135 ]
  %152 = icmp eq i64 %121, 0
  br i1 %152, label %163, label %153

153:                                              ; preds = %150
  %154 = getelementptr i8, i8* %106, i64 %151
  %155 = load i8, i8* %2, align 1, !alias.scope !26
  %156 = insertelement <16 x i8> undef, i8 %155, i32 0
  %157 = shufflevector <16 x i8> %156, <16 x i8> undef, <16 x i32> zeroinitializer
  %158 = insertelement <16 x i8> undef, i8 %155, i32 0
  %159 = shufflevector <16 x i8> %158, <16 x i8> undef, <16 x i32> zeroinitializer
  %160 = bitcast i8* %154 to <16 x i8>*
  store <16 x i8> %157, <16 x i8>* %160, align 1, !alias.scope !29, !noalias !26
  %161 = getelementptr i8, i8* %154, i64 16
  %162 = bitcast i8* %161 to <16 x i8>*
  store <16 x i8> %159, <16 x i8>* %162, align 1, !alias.scope !29, !noalias !26
  br label %163

163:                                              ; preds = %150, %153
  %164 = icmp eq i64 %116, %1
  br i1 %164, label %172, label %165

165:                                              ; preds = %163, %110, %103
  %166 = phi i8* [ %106, %110 ], [ %106, %103 ], [ %117, %163 ]
  br label %167

167:                                              ; preds = %165, %167
  %168 = phi i8* [ %170, %167 ], [ %166, %165 ]
  %169 = load i8, i8* %2, align 1
  store i8 %169, i8* %168, align 1
  %170 = getelementptr inbounds i8, i8* %168, i64 1
  %171 = icmp eq i8* %108, %170
  br i1 %171, label %172, label %167, !llvm.loop !32

172:                                              ; preds = %167, %163
  %173 = ptrtoint i8* %107 to i64
  %174 = ptrtoint i8* %108 to i64
  %175 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %176 = load i8*, i8** %175, align 8
  %177 = ptrtoint i8* %176 to i64
  %178 = load i8*, i8** %7, align 8
  %179 = ptrtoint i8* %178 to i64
  %180 = icmp eq i8* %178, %176
  br i1 %180, label %293, label %181

181:                                              ; preds = %172
  %182 = ptrtoint i8* %178 to i64
  %183 = sub i64 %182, %177
  %184 = icmp ult i64 %183, 16
  br i1 %184, label %280, label %185

185:                                              ; preds = %181
  %186 = sub i64 %9, %179
  %187 = sub i64 %186, %86
  %188 = getelementptr i8, i8* %176, i64 %187
  %189 = ptrtoint i8* %188 to i64
  %190 = getelementptr i8, i8* %105, i64 %189
  %191 = icmp ult i8* %190, %178
  %192 = icmp ult i8* %176, %106
  %193 = and i1 %191, %192
  br i1 %193, label %280, label %194

194:                                              ; preds = %185
  %195 = and i64 %183, -16
  %196 = sub i64 0, %195
  %197 = getelementptr i8, i8* %106, i64 %196
  %198 = sub i64 0, %195
  %199 = getelementptr i8, i8* %178, i64 %198
  %200 = add i64 %195, -16
  %201 = lshr exact i64 %200, 4
  %202 = add nuw nsw i64 %201, 1
  %203 = and i64 %202, 3
  %204 = icmp ult i64 %200, 48
  br i1 %204, label %257, label %205

205:                                              ; preds = %194
  %206 = sub nsw i64 %202, %203
  %207 = getelementptr i8, i8* %106, i64 -1
  %208 = getelementptr inbounds i8, i8* %207, i64 -8
  %209 = getelementptr inbounds i8, i8* %178, i64 -16
  %210 = getelementptr inbounds i8, i8* %208, i64 -7
  %211 = getelementptr i8, i8* %106, i64 -1
  %212 = getelementptr inbounds i8, i8* %211, i64 -8
  %213 = getelementptr inbounds i8, i8* %178, i64 -16
  %214 = getelementptr inbounds i8, i8* %212, i64 -7
  %215 = getelementptr i8, i8* %106, i64 -1
  %216 = getelementptr inbounds i8, i8* %215, i64 -8
  %217 = getelementptr inbounds i8, i8* %178, i64 -16
  %218 = getelementptr inbounds i8, i8* %216, i64 -7
  %219 = getelementptr i8, i8* %106, i64 -1
  %220 = getelementptr inbounds i8, i8* %219, i64 -8
  %221 = getelementptr inbounds i8, i8* %178, i64 -16
  %222 = getelementptr inbounds i8, i8* %220, i64 -7
  br label %223

223:                                              ; preds = %223, %205
  %224 = phi i64 [ 0, %205 ], [ %254, %223 ]
  %225 = phi i64 [ %206, %205 ], [ %255, %223 ]
  %226 = sub i64 0, %224
  %227 = sub i64 0, %224
  %228 = getelementptr inbounds i8, i8* %209, i64 %227
  %229 = bitcast i8* %228 to <2 x i64>*
  %230 = load <2 x i64>, <2 x i64>* %229, align 1, !alias.scope !33
  %231 = getelementptr inbounds i8, i8* %210, i64 %226
  %232 = bitcast i8* %231 to <2 x i64>*
  store <2 x i64> %230, <2 x i64>* %232, align 1, !alias.scope !36, !noalias !33
  %233 = sub nuw nsw i64 -16, %224
  %234 = sub nuw nsw i64 -16, %224
  %235 = getelementptr inbounds i8, i8* %213, i64 %234
  %236 = bitcast i8* %235 to <2 x i64>*
  %237 = load <2 x i64>, <2 x i64>* %236, align 1, !alias.scope !33
  %238 = getelementptr inbounds i8, i8* %214, i64 %233
  %239 = bitcast i8* %238 to <2 x i64>*
  store <2 x i64> %237, <2 x i64>* %239, align 1, !alias.scope !36, !noalias !33
  %240 = sub nuw nsw i64 -32, %224
  %241 = sub nuw nsw i64 -32, %224
  %242 = getelementptr inbounds i8, i8* %217, i64 %241
  %243 = bitcast i8* %242 to <2 x i64>*
  %244 = load <2 x i64>, <2 x i64>* %243, align 1, !alias.scope !33
  %245 = getelementptr inbounds i8, i8* %218, i64 %240
  %246 = bitcast i8* %245 to <2 x i64>*
  store <2 x i64> %244, <2 x i64>* %246, align 1, !alias.scope !36, !noalias !33
  %247 = sub nuw nsw i64 -48, %224
  %248 = sub nuw nsw i64 -48, %224
  %249 = getelementptr inbounds i8, i8* %221, i64 %248
  %250 = bitcast i8* %249 to <2 x i64>*
  %251 = load <2 x i64>, <2 x i64>* %250, align 1, !alias.scope !33
  %252 = getelementptr inbounds i8, i8* %222, i64 %247
  %253 = bitcast i8* %252 to <2 x i64>*
  store <2 x i64> %251, <2 x i64>* %253, align 1, !alias.scope !36, !noalias !33
  %254 = add i64 %224, 64
  %255 = add i64 %225, -4
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %257, label %223, !llvm.loop !38

257:                                              ; preds = %223, %194
  %258 = phi i64 [ 0, %194 ], [ %254, %223 ]
  %259 = icmp eq i64 %203, 0
  br i1 %259, label %278, label %260

260:                                              ; preds = %257
  %261 = getelementptr i8, i8* %106, i64 -1
  %262 = getelementptr inbounds i8, i8* %261, i64 -8
  %263 = getelementptr inbounds i8, i8* %178, i64 -16
  %264 = getelementptr inbounds i8, i8* %262, i64 -7
  br label %265

265:                                              ; preds = %265, %260
  %266 = phi i64 [ %258, %260 ], [ %275, %265 ]
  %267 = phi i64 [ %203, %260 ], [ %276, %265 ]
  %268 = sub i64 0, %266
  %269 = sub i64 0, %266
  %270 = getelementptr inbounds i8, i8* %263, i64 %269
  %271 = bitcast i8* %270 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 1, !alias.scope !33
  %273 = getelementptr inbounds i8, i8* %264, i64 %268
  %274 = bitcast i8* %273 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %274, align 1, !alias.scope !36, !noalias !33
  %275 = add i64 %266, 16
  %276 = add i64 %267, -1
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %265, !llvm.loop !39

278:                                              ; preds = %265, %257
  %279 = icmp eq i64 %183, %195
  br i1 %279, label %290, label %280

280:                                              ; preds = %278, %185, %181
  %281 = phi i8* [ %106, %185 ], [ %106, %181 ], [ %197, %278 ]
  %282 = phi i8* [ %178, %185 ], [ %178, %181 ], [ %199, %278 ]
  br label %283

283:                                              ; preds = %280, %283
  %284 = phi i8* [ %286, %283 ], [ %281, %280 ]
  %285 = phi i8* [ %287, %283 ], [ %282, %280 ]
  %286 = getelementptr inbounds i8, i8* %284, i64 -1
  %287 = getelementptr inbounds i8, i8* %285, i64 -1
  %288 = load i8, i8* %287, align 1
  store i8 %288, i8* %286, align 1
  %289 = icmp eq i8* %287, %176
  br i1 %289, label %290, label %283, !llvm.loop !40

290:                                              ; preds = %283, %278
  %291 = phi i8* [ %197, %278 ], [ %286, %283 ]
  %292 = load i64, i64* %85, align 8
  br label %293

293:                                              ; preds = %172, %290
  %294 = phi i8* [ %291, %290 ], [ %106, %172 ]
  %295 = phi i64 [ %292, %290 ], [ %177, %172 ]
  %296 = ptrtoint i8* %294 to i64
  store i64 %296, i64* %85, align 8
  store i64 %174, i64* %8, align 8
  store i64 %173, i64* %5, align 8
  %297 = icmp eq i64 %295, 0
  br i1 %297, label %300, label %298

298:                                              ; preds = %293
  %299 = inttoptr i64 %295 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %299) #6
  br label %300

300:                                              ; preds = %298, %293, %82
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv: argument 0"}
!5 = distinct !{!5, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv"}
!6 = !{!"branch_weights", i32 2000, i32 1}
!7 = !{i32 -2143796414}
!8 = !{i32 -2143796393}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = distinct !{!18, !15}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !15}
!25 = distinct !{!25, !15}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = !{!30}
!30 = distinct !{!30, !28}
!31 = distinct !{!31, !15}
!32 = distinct !{!32, !15}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = distinct !{!38, !15}
!39 = distinct !{!39, !17}
!40 = distinct !{!40, !15}
