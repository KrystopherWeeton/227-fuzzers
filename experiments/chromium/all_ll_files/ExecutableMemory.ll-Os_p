; ModuleID = '../../third_party/swiftshader/src/Reactor/ExecutableMemory.cpp'
source_filename = "../../third_party/swiftshader/src/Reactor/ExecutableMemory.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_ZZN2rr14memoryPageSizeEvE8pageSize = internal unnamed_addr global i32 0, align 4
@_ZGVZN2rr14memoryPageSizeEvE8pageSize = internal global i64 0, align 8
@_ZZN2rr12_GLOBAL__N_111anonymousFdEvE2fd = internal unnamed_addr global i32 0, align 4
@_ZGVZN2rr12_GLOBAL__N_111anonymousFdEvE2fd = internal global i64 0, align 8
@.str = private unnamed_addr constant [16 x i8] c"swiftshader_jit\00", align 1
@_ZZN2rr12_GLOBAL__N_118ensureAnonFileSizeEimE8fileSize = internal unnamed_addr global i64 0, align 8

; Function Attrs: nounwind optsize ssp uwtable
define hidden i64 @_ZN2rr14memoryPageSizeEv() local_unnamed_addr #0 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN2rr14memoryPageSizeEvE8pageSize to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %9, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN2rr14memoryPageSizeEvE8pageSize) #6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = tail call i64 @sysconf(i32 30) #7
  %8 = trunc i64 %7 to i32
  store i32 %8, i32* @_ZZN2rr14memoryPageSizeEvE8pageSize, align 4
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN2rr14memoryPageSizeEvE8pageSize) #6
  br label %9

9:                                                ; preds = %3, %6, %0
  %10 = load i32, i32* @_ZZN2rr14memoryPageSizeEvE8pageSize, align 4
  %11 = sext i32 %10 to i64
  ret i64 %11
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN2rr8allocateEmm(i64, i64) local_unnamed_addr #0 {
  %3 = alloca i8*, align 8
  %4 = icmp ult i64 %1, 8
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = tail call noalias i8* @malloc(i64 %0) #7
  br label %17

7:                                                ; preds = %2
  %8 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %9 = call i32 @posix_memalign(i8** nonnull %3, i64 %1, i64 %0) #7
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %7
  %12 = load i8*, i8** %3, align 8
  br label %15

13:                                               ; preds = %7
  %14 = tail call i32* @__errno_location() #8
  store i32 %9, i32* %14, align 4
  store i8* null, i8** %3, align 8
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi i8* [ %12, %11 ], [ null, %13 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #6
  br label %17

17:                                               ; preds = %5, %15
  %18 = phi i8* [ %6, %5 ], [ %16, %15 ]
  %19 = icmp eq i8* %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %18, i8 0, i64 %0, i1 false)
  br label %21

21:                                               ; preds = %17, %20
  ret i8* %18
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2rr10deallocateEPv(i8* nocapture) local_unnamed_addr #0 {
  tail call void @free(i8* %0) #7
  ret void
}

; Function Attrs: nounwind optsize
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN2rr19allocateMemoryPagesEmib(i64, i32, i1 zeroext) local_unnamed_addr #0 {
  %4 = tail call i64 @_ZN2rr14memoryPageSizeEv() #9
  %5 = add i64 %0, -1
  %6 = add i64 %5, %4
  %7 = sub i64 0, %4
  %8 = and i64 %6, %7
  %9 = load atomic i8, i8* bitcast (i64* @_ZGVZN2rr12_GLOBAL__N_111anonymousFdEvE2fd to i8*) acquire, align 8
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %17, !prof !2

11:                                               ; preds = %3
  %12 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN2rr12_GLOBAL__N_111anonymousFdEvE2fd) #6
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %11
  %15 = tail call i64 (i64, ...) @syscall(i64 319, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i32 0) #7
  %16 = trunc i64 %15 to i32
  store i32 %16, i32* @_ZZN2rr12_GLOBAL__N_111anonymousFdEvE2fd, align 4
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN2rr12_GLOBAL__N_111anonymousFdEvE2fd) #6
  br label %17

17:                                               ; preds = %3, %11, %14
  %18 = load i32, i32* @_ZZN2rr12_GLOBAL__N_111anonymousFdEvE2fd, align 4
  %19 = icmp eq i32 %18, -1
  br i1 %19, label %25, label %20

20:                                               ; preds = %17
  %21 = load i64, i64* @_ZZN2rr12_GLOBAL__N_118ensureAnonFileSizeEimE8fileSize, align 8
  %22 = icmp ult i64 %21, %8
  br i1 %22, label %23, label %25

23:                                               ; preds = %20
  %24 = tail call i32 @ftruncate64(i32 %18, i64 %8) #7
  store i64 %8, i64* @_ZZN2rr12_GLOBAL__N_118ensureAnonFileSizeEimE8fileSize, align 8
  br label %25

25:                                               ; preds = %23, %20, %17
  %26 = phi i32 [ 34, %17 ], [ 2, %20 ], [ 2, %23 ]
  %27 = and i32 %1, 7
  %28 = tail call i8* @mmap64(i8* null, i64 %8, i32 %27, i32 %26, i32 %18, i64 0) #7
  %29 = icmp eq i8* %28, inttoptr (i64 -1 to i8*)
  %30 = select i1 %29, i8* null, i8* %28
  ret i8* %30
}

; Function Attrs: nounwind optsize
declare i8* @mmap64(i8*, i64, i32, i32, i32, i64) local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2rr18protectMemoryPagesEPvmi(i8*, i64, i32) local_unnamed_addr #0 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %3
  %6 = tail call i64 @_ZN2rr14memoryPageSizeEv() #9
  %7 = add i64 %1, -1
  %8 = add i64 %7, %6
  %9 = sub i64 0, %6
  %10 = and i64 %8, %9
  %11 = and i32 %2, 7
  %12 = tail call i32 @mprotect(i8* %0, i64 %10, i32 %11) #7
  br label %13

13:                                               ; preds = %3, %5
  ret void
}

; Function Attrs: nounwind optsize
declare i32 @mprotect(i8*, i64, i32) local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2rr21deallocateMemoryPagesEPvm(i8*, i64) local_unnamed_addr #0 {
  %3 = tail call i64 @_ZN2rr14memoryPageSizeEv() #9
  %4 = add i64 %1, -1
  %5 = add i64 %4, %3
  %6 = sub i64 0, %3
  %7 = and i64 %5, %6
  %8 = tail call i32 @munmap(i8* %0, i64 %7) #7
  ret void
}

; Function Attrs: nounwind optsize
declare i32 @munmap(i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind optsize
declare i64 @sysconf(i32) local_unnamed_addr #3

; Function Attrs: nofree nounwind optsize
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind optsize
declare i32 @posix_memalign(i8**, i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind optsize readnone
declare i32* @__errno_location() local_unnamed_addr #5

; Function Attrs: nounwind optsize
declare i64 @syscall(i64, ...) local_unnamed_addr #3

; Function Attrs: nounwind optsize
declare i32 @ftruncate64(i32, i64) local_unnamed_addr #3

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind optsize readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind optsize }
attributes #8 = { nounwind optsize readnone }
attributes #9 = { optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
