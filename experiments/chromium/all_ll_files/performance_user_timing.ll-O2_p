; ModuleID = '../../third_party/blink/renderer/core/timing/performance_user_timing.cc'
source_filename = "../../third_party/blink/renderer/core/timing/performance_user_timing.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::trace_event::TraceCategory" = type { i8, i32, i8* }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.44" }
%"struct.std::__1::atomic.44" = type { %"struct.std::__1::__atomic_base.45" }
%"struct.std::__1::__atomic_base.45" = type { %"struct.std::__1::__atomic_base.46" }
%"struct.std::__1::__atomic_base.46" = type { %"struct.std::__1::__cxx_atomic_impl.47" }
%"struct.std::__1::__cxx_atomic_impl.47" = type { %"struct.std::__1::__cxx_atomic_base_impl.48" }
%"struct.std::__1::__cxx_atomic_base_impl.48" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.247", i32, [4 x i8], %"class.std::__1::unique_ptr.385", %"class.std::__1::unique_ptr.385", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque.391", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.397", %"class.std::__1::unique_ptr.403", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.415", %"class.std::__1::unique_ptr.421", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.428", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.250", %"class.std::__1::unique_ptr.256", %"class.std::__1::unique_ptr.262", %"class.std::__1::unique_ptr.268", %"class.std::__1::unique_ptr.274", %"class.std::__1::unique_ptr.280", %"class.std::__1::unique_ptr.291", %"class.std::__1::unique_ptr.298", %"class.std::__1::unique_ptr.298", %"class.std::__1::unique_ptr.305", %"class.std::__1::unique_ptr.312", %"class.std::__1::unique_ptr.319", %"class.std::__1::unique_ptr.319", %"class.std::__1::unique_ptr.326", %"class.std::__1::unique_ptr.333", %"class.std::__1::unique_ptr.340", %"class.std::__1::unique_ptr.365", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.250" = type { %"class.std::__1::__compressed_pair.251" }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.252" }
%"struct.std::__1::__compressed_pair_elem.252" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.256" = type { %"class.std::__1::__compressed_pair.257" }
%"class.std::__1::__compressed_pair.257" = type { %"struct.std::__1::__compressed_pair_elem.258" }
%"struct.std::__1::__compressed_pair_elem.258" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.262" = type { %"class.std::__1::__compressed_pair.263" }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.268" = type { %"class.std::__1::__compressed_pair.269" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.274" = type { %"class.std::__1::__compressed_pair.275" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.276" }
%"struct.std::__1::__compressed_pair_elem.276" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.280" = type { %"class.std::__1::__compressed_pair.281" }
%"class.std::__1::__compressed_pair.281" = type { %"struct.std::__1::__compressed_pair_elem.282" }
%"struct.std::__1::__compressed_pair_elem.282" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.283" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.283" = type { %"struct.std::__1::__atomic_base.284" }
%"struct.std::__1::__atomic_base.284" = type { %"struct.std::__1::__atomic_base.285" }
%"struct.std::__1::__atomic_base.285" = type { %"struct.std::__1::__cxx_atomic_impl.286" }
%"struct.std::__1::__cxx_atomic_impl.286" = type { %"struct.std::__1::__cxx_atomic_base_impl.287" }
%"struct.std::__1::__cxx_atomic_base_impl.287" = type { i64 }
%"class.std::__1::unique_ptr.291" = type { %"class.std::__1::__compressed_pair.292" }
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.293" }
%"struct.std::__1::__compressed_pair_elem.293" = type { %"class.blink::Worklist.294"* }
%"class.blink::Worklist.294" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.283" }
%"class.std::__1::unique_ptr.298" = type { %"class.std::__1::__compressed_pair.299" }
%"class.std::__1::__compressed_pair.299" = type { %"struct.std::__1::__compressed_pair_elem.300" }
%"struct.std::__1::__compressed_pair_elem.300" = type { %"class.blink::Worklist.301"* }
%"class.blink::Worklist.301" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.283" }
%"class.std::__1::unique_ptr.305" = type { %"class.std::__1::__compressed_pair.306" }
%"class.std::__1::__compressed_pair.306" = type { %"struct.std::__1::__compressed_pair_elem.307" }
%"struct.std::__1::__compressed_pair_elem.307" = type { %"class.blink::Worklist.308"* }
%"class.blink::Worklist.308" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.283" }
%"class.std::__1::unique_ptr.312" = type { %"class.std::__1::__compressed_pair.313" }
%"class.std::__1::__compressed_pair.313" = type { %"struct.std::__1::__compressed_pair_elem.314" }
%"struct.std::__1::__compressed_pair_elem.314" = type { %"class.blink::Worklist.315"* }
%"class.blink::Worklist.315" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.283" }
%"class.std::__1::unique_ptr.319" = type { %"class.std::__1::__compressed_pair.320" }
%"class.std::__1::__compressed_pair.320" = type { %"struct.std::__1::__compressed_pair_elem.321" }
%"struct.std::__1::__compressed_pair_elem.321" = type { %"class.blink::Worklist.322"* }
%"class.blink::Worklist.322" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.283" }
%"class.std::__1::unique_ptr.326" = type { %"class.std::__1::__compressed_pair.327" }
%"class.std::__1::__compressed_pair.327" = type { %"struct.std::__1::__compressed_pair_elem.328" }
%"struct.std::__1::__compressed_pair_elem.328" = type { %"class.blink::Worklist.329"* }
%"class.blink::Worklist.329" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.283" }
%"class.std::__1::unique_ptr.333" = type { %"class.std::__1::__compressed_pair.334" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.335" }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"class.blink::Worklist.336"* }
%"class.blink::Worklist.336" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.283" }
%"class.std::__1::unique_ptr.340" = type { %"class.std::__1::__compressed_pair.341" }
%"class.std::__1::__compressed_pair.341" = type { %"struct.std::__1::__compressed_pair_elem.342" }
%"struct.std::__1::__compressed_pair_elem.342" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.343", %"class.std::__1::__compressed_pair.352", %"class.std::__1::__compressed_pair.357", %"class.std::__1::__compressed_pair.359", [4 x i8] }>
%"class.std::__1::unique_ptr.343" = type { %"class.std::__1::__compressed_pair.344" }
%"class.std::__1::__compressed_pair.344" = type { %"struct.std::__1::__compressed_pair_elem.345", %"struct.std::__1::__compressed_pair_elem.346" }
%"struct.std::__1::__compressed_pair_elem.345" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.346" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.347" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.348" }
%"struct.std::__1::__compressed_pair_elem.348" = type { i64 }
%"class.std::__1::__compressed_pair.352" = type { %"struct.std::__1::__compressed_pair_elem.353" }
%"struct.std::__1::__compressed_pair_elem.353" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.357" = type { %"struct.std::__1::__compressed_pair_elem.348" }
%"class.std::__1::__compressed_pair.359" = type { %"struct.std::__1::__compressed_pair_elem.360" }
%"struct.std::__1::__compressed_pair_elem.360" = type { float }
%"class.std::__1::unique_ptr.365" = type { %"class.std::__1::__compressed_pair.366" }
%"class.std::__1::__compressed_pair.366" = type { %"struct.std::__1::__compressed_pair_elem.367" }
%"struct.std::__1::__compressed_pair_elem.367" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.368", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.368" = type { %"class.std::__1::__compressed_pair.369" }
%"class.std::__1::__compressed_pair.369" = type { %"struct.std::__1::__compressed_pair_elem.370" }
%"struct.std::__1::__compressed_pair_elem.370" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.377" }
%"class.WTF::Vector.377" = type { %"class.WTF::VectorBuffer.378" }
%"class.WTF::VectorBuffer.378" = type { %"class.WTF::VectorBufferBase.379" }
%"class.WTF::VectorBufferBase.379" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.385" = type { %"class.std::__1::__compressed_pair.386" }
%"class.std::__1::__compressed_pair.386" = type { %"struct.std::__1::__compressed_pair_elem.387" }
%"struct.std::__1::__compressed_pair_elem.387" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque.391" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.394" }
%"class.WTF::VectorBuffer.394" = type { %"class.WTF::VectorBufferBase.395" }
%"class.WTF::VectorBufferBase.395" = type { %"struct.std::__1::pair.396"*, i32, i32 }
%"struct.std::__1::pair.396" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.397" = type { %"class.std::__1::__compressed_pair.398" }
%"class.std::__1::__compressed_pair.398" = type { %"struct.std::__1::__compressed_pair_elem.399" }
%"struct.std::__1::__compressed_pair_elem.399" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.403" = type { %"class.std::__1::__compressed_pair.404" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.405" }
%"struct.std::__1::__compressed_pair_elem.405" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.409" }
%"class.std::__1::unique_ptr.409" = type { %"class.std::__1::__compressed_pair.410" }
%"class.std::__1::__compressed_pair.410" = type { %"struct.std::__1::__compressed_pair_elem.411" }
%"struct.std::__1::__compressed_pair_elem.411" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.294"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.301"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.308"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.315"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.322"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.436" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.436" = type { %"struct.std::__1::__compressed_pair_elem.437" }
%"struct.std::__1::__compressed_pair_elem.437" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.415" = type { %"class.std::__1::__compressed_pair.416" }
%"class.std::__1::__compressed_pair.416" = type { %"struct.std::__1::__compressed_pair_elem.417" }
%"struct.std::__1::__compressed_pair_elem.417" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.421" = type { %"class.std::__1::__compressed_pair.422" }
%"class.std::__1::__compressed_pair.422" = type { %"struct.std::__1::__compressed_pair_elem.423" }
%"struct.std::__1::__compressed_pair_elem.423" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.427 }
%class.scoped_refptr.427 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.428" = type { %"struct.std::__1::__atomic_base.429" }
%"struct.std::__1::__atomic_base.429" = type { %"struct.std::__1::__cxx_atomic_impl.430" }
%"struct.std::__1::__cxx_atomic_impl.430" = type { %"struct.std::__1::__cxx_atomic_base_impl.431" }
%"struct.std::__1::__cxx_atomic_base_impl.431" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::UserTiming" = type { %"class.blink::Member", %"class.blink::HeapHashMap", %"class.blink::HeapHashMap" }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Performance"* }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.blink::Member.3" }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.blink::Member.3" = type { %"class.blink::MemberBase.4" }
%"class.blink::MemberBase.4" = type { %"class.blink::HeapVector"* }
%"class.blink::HeapVector" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::Member.7"*, i32, i32 }
%"class.blink::Member.7" = type { %"class.blink::MemberBase.8" }
%"class.blink::MemberBase.8" = type { %"class.blink::PerformanceEntry"* }
%"class.blink::PerformanceEntry" = type <{ %"class.blink::ScriptWrappable", double, %"class.WTF::AtomicString", double, i32, [4 x i8] }>
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Performance" = type { %"class.blink::EventTargetWithInlineData", %"class.blink::HeapVector", %"class.blink::HeapDeque", i32, i8, %"class.blink::HeapVector", i32, %"class.blink::HeapVector", i32, %"class.blink::HeapVector", %"class.blink::HeapVector", %"class.blink::HeapVector", %"class.blink::HeapVector", %"class.blink::Member.7", %"class.blink::Member.29", %"class.blink::Member.7", %"class.blink::Member.7", %"class.blink::Member.31", %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"*, i8, i32, %"class.blink::HeapLinkedHashSet", %"class.blink::HeapLinkedHashSet", %"class.blink::HeapLinkedHashSet", %class.scoped_refptr.43, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.56" }
%"class.blink::EventTargetWithInlineData" = type { %"class.blink::EventTarget", %"class.blink::EventTargetData" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::EventTargetData" = type { %"class.blink::EventListenerMap", %"class.std::__1::unique_ptr" }
%"class.blink::EventListenerMap" = type { %"class.blink::HeapVector.14" }
%"class.blink::HeapVector.14" = type { %"class.WTF::Vector.17" }
%"class.WTF::Vector.17" = type { %"class.WTF::VectorBuffer.18" }
%"class.WTF::VectorBuffer.18" = type { %"class.WTF::VectorBufferBase.19", [32 x i8] }
%"class.WTF::VectorBufferBase.19" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { %"class.WTF::AtomicString", %"class.blink::Member.20" }
%"class.blink::Member.20" = type { %"class.blink::MemberBase.21" }
%"class.blink::MemberBase.21" = type { %"class.blink::HeapVector.22"* }
%"class.blink::HeapVector.22" = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.WTF::Vector.24"* }
%"class.WTF::Vector.24" = type opaque
%"class.blink::HeapDeque" = type { %"class.WTF::Deque" }
%"class.WTF::Deque" = type { %"class.WTF::Deque<blink::Member<blink::PerformanceEntry>, 0, blink::HeapAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::Member<blink::PerformanceEntry>, 0, blink::HeapAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer" }
%"class.blink::Member.29" = type { %"class.blink::MemberBase.30" }
%"class.blink::MemberBase.30" = type { %"class.blink::UserTiming"* }
%"class.blink::Member.31" = type { %"class.blink::MemberBase.32" }
%"class.blink::MemberBase.32" = type { %"class.blink::PerformanceEventTiming"* }
%"class.blink::PerformanceEventTiming" = type opaque
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.blink::HeapLinkedHashSet" = type { %"class.WTF::LinkedHashSet" }
%"class.WTF::LinkedHashSet" = type { %"class.WTF::HashMap.35", %"class.WTF::VectorBackedLinkedList" }
%"class.WTF::HashMap.35" = type { %"class.WTF::HashTable.36" }
%"class.WTF::HashTable.36" = type <{ %"struct.WTF::KeyValuePair.38"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.38" = type opaque
%"class.WTF::VectorBackedLinkedList" = type { %"class.WTF::Vector.39", i32, i32 }
%"class.WTF::Vector.39" = type { %"class.WTF::VectorBuffer.40" }
%"class.WTF::VectorBuffer.40" = type { %"class.WTF::VectorBufferBase.41" }
%"class.WTF::VectorBufferBase.41" = type { %"class.WTF::VectorBackedLinkedListNode"*, i32, i32 }
%"class.WTF::VectorBackedLinkedListNode" = type opaque
%class.scoped_refptr.43 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.44" }
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.43, %"class.base::WeakPtrFactory" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.49 }
%class.scoped_refptr.49 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.50", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.50" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.51" }
%"struct.std::__1::atomic.51" = type { %"struct.std::__1::__atomic_base.52" }
%"struct.std::__1::__atomic_base.52" = type { %"struct.std::__1::__atomic_base.53" }
%"struct.std::__1::__atomic_base.53" = type { %"struct.std::__1::__cxx_atomic_impl.54" }
%"struct.std::__1::__cxx_atomic_impl.54" = type { %"struct.std::__1::__cxx_atomic_base_impl.55" }
%"struct.std::__1::__cxx_atomic_base_impl.55" = type { i8 }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase" }
%"class.blink::Member.56" = type { %"class.blink::MemberBase.57" }
%"class.blink::MemberBase.57" = type { %"class.blink::BackgroundTracingHelper"* }
%"class.blink::BackgroundTracingHelper" = type opaque
%"class.blink::PerformanceMark" = type { %"class.blink::PerformanceEntry.base", %class.scoped_refptr.58, %"class.blink::HeapHashMap.125", %"class.base::TimeTicks" }
%"class.blink::PerformanceEntry.base" = type <{ %"class.blink::ScriptWrappable", double, %"class.WTF::AtomicString", double, i32 }>
%class.scoped_refptr.58 = type { %"class.blink::SerializedScriptValue"* }
%"class.blink::SerializedScriptValue" = type <{ %"class.WTF::ThreadSafeRefCounted", [4 x i8], %"class.std::__1::unique_ptr.60", i64, %"class.WTF::Vector.64", %"class.WTF::Vector.69", %"class.WTF::Vector.75", %"class.WTF::Vector.93", %class.scoped_refptr.102, %"class.WTF::HashMap.105", %"class.WTF::Vector.110", %"class.WTF::Vector.64", %"class.WTF::Vector.115", %"class.WTF::HashMap.120", i8, [7 x i8] }>
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.59" }
%"class.base::RefCountedThreadSafe.59" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { i8* }
%"class.WTF::Vector.69" = type { %"class.WTF::VectorBuffer.70" }
%"class.WTF::VectorBuffer.70" = type { %"class.WTF::VectorBufferBase.71", [8 x i8] }
%"class.WTF::VectorBufferBase.71" = type { %class.scoped_refptr.72*, i32, i32 }
%class.scoped_refptr.72 = type { %"class.blink::StaticBitmapImage"* }
%"class.blink::StaticBitmapImage" = type opaque
%"class.WTF::Vector.75" = type { %"class.WTF::VectorBuffer.76" }
%"class.WTF::VectorBuffer.76" = type { %"class.WTF::VectorBufferBase.77" }
%"class.WTF::VectorBufferBase.77" = type { %"class.blink::SerializedScriptValue::Stream"*, i32, i32 }
%"class.blink::SerializedScriptValue::Stream" = type { %"class.blink::MessagePortChannel", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.85" }
%"class.blink::MessagePortChannel" = type { %class.scoped_refptr.78 }
%class.scoped_refptr.78 = type { %"class.blink::MessagePortChannel::State"* }
%"class.blink::MessagePortChannel::State" = type opaque
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::ReadableStreamTransferringOptimizer"* }
%"class.blink::ReadableStreamTransferringOptimizer" = type { i32 (...)** }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.blink::WritableStreamTransferringOptimizer"* }
%"class.blink::WritableStreamTransferringOptimizer" = type { i32 (...)** }
%"class.WTF::Vector.93" = type { %"class.WTF::VectorBuffer.94" }
%"class.WTF::VectorBuffer.94" = type { %"class.WTF::VectorBufferBase.95" }
%"class.WTF::VectorBufferBase.95" = type { %"class.v8::CompiledWasmModule"*, i32, i32 }
%"class.v8::CompiledWasmModule" = type { %"class.std::__1::shared_ptr.96", %"class.std::__1::basic_string" }
%"class.std::__1::shared_ptr.96" = type { %"class.v8::internal::wasm::NativeModule"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::wasm::NativeModule" = type opaque
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%class.scoped_refptr.102 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.104 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.103 }
%union.anon.103 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.scoped_refptr.104 = type { %"class.blink::SecurityOrigin"* }
%"class.WTF::HashMap.105" = type { %"class.WTF::HashTable.106" }
%"class.WTF::HashTable.106" = type <{ %"struct.WTF::KeyValuePair.109"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.109" = type opaque
%"class.WTF::Vector.110" = type { %"class.WTF::VectorBuffer.111" }
%"class.WTF::VectorBuffer.111" = type { %"class.WTF::VectorBufferBase.112" }
%"class.WTF::VectorBufferBase.112" = type { %"class.mojo::ScopedHandleBase"*, i32, i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.WTF::Vector.64" = type { %"class.WTF::VectorBuffer.65" }
%"class.WTF::VectorBuffer.65" = type { %"class.WTF::VectorBufferBase.66", [16 x i8] }
%"class.WTF::VectorBufferBase.66" = type { %"class.blink::ArrayBufferContents"*, i32, i32 }
%"class.blink::ArrayBufferContents" = type { %"class.std::__1::shared_ptr" }
%"class.std::__1::shared_ptr" = type { %"class.v8::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::BackingStore" = type { i8 }
%"class.WTF::Vector.115" = type { %"class.WTF::VectorBuffer.116" }
%"class.WTF::VectorBuffer.116" = type { %"class.WTF::VectorBufferBase.117" }
%"class.WTF::VectorBufferBase.117" = type { %"class.mojo::PendingRemote"*, i32, i32 }
%"class.mojo::PendingRemote" = type opaque
%"class.WTF::HashMap.120" = type { %"class.WTF::HashTable.121" }
%"class.WTF::HashTable.121" = type <{ %"struct.WTF::KeyValuePair.124"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.124" = type { i8**, %"class.std::__1::unique_ptr.451" }
%"class.std::__1::unique_ptr.451" = type { %"class.std::__1::__compressed_pair.452" }
%"class.std::__1::__compressed_pair.452" = type { %"struct.std::__1::__compressed_pair_elem.453" }
%"struct.std::__1::__compressed_pair_elem.453" = type { %"class.blink::SerializedScriptValue::Attachment"* }
%"class.blink::SerializedScriptValue::Attachment" = type { i32 (...)** }
%"class.blink::HeapHashMap.125" = type { %"class.WTF::HashMap.128" }
%"class.WTF::HashMap.128" = type { %"class.WTF::HashTable.129" }
%"class.WTF::HashTable.129" = type <{ %"struct.WTF::KeyValuePair.131"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.131" = type opaque
%"class.std::__1::unique_ptr.202" = type { %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { %"class.blink::TracedValue"* }
%"class.blink::TracedValue" = type { %"class.base::trace_event::ConvertableToTraceFormat", %"class.std::__1::unique_ptr.205" }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.std::__1::unique_ptr.205" = type { %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"class.base::trace_event::TracedValue"* }
%"class.base::trace_event::TracedValue" = type { %"class.base::trace_event::ConvertableToTraceFormat", %"class.std::__1::unique_ptr.208" }
%"class.std::__1::unique_ptr.208" = type { %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"class.base::trace_event::TracedValue::Writer"* }
%"class.base::trace_event::TracedValue::Writer" = type { i32 (...)** }
%"class.blink::PerformanceTiming" = type <{ %"class.blink::ScriptWrappable", %"class.blink::ExecutionContextClient", i8, [7 x i8] }>
%"class.blink::ExecutionContextClient" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember.132" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::WeakMember.132" = type { %"class.blink::MemberBase.133" }
%"class.blink::MemberBase.133" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.171", i32, i8, [3 x i8], %"class.blink::HeapVector.173", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.181", %"class.blink::Member.183", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.192", %"class.blink::Member.198", %"class.blink::Member.200", i8, [7 x i8] }>
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.134" }
%"class.blink::HeapHashMap.134" = type { %"class.WTF::HashMap.137" }
%"class.WTF::HashMap.137" = type { %"class.WTF::HashTable.138" }
%"class.WTF::HashTable.138" = type <{ %"struct.WTF::KeyValuePair.140"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.140" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.146" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet" }
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet" }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.143" }
%"class.WTF::HashTable.143" = type <{ %"class.blink::WeakMember.145"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.145" = type opaque
%"class.blink::Supplementable.146" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.147" }
%"class.blink::HeapHashMap.147" = type { %"class.WTF::HashMap.150" }
%"class.WTF::HashMap.150" = type { %"class.WTF::HashTable.151" }
%"class.WTF::HashTable.151" = type <{ %"struct.WTF::KeyValuePair.153"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.153" = type { i8*, %"class.blink::Member.447" }
%"class.blink::Member.447" = type { %"class.blink::MemberBase.448" }
%"class.blink::MemberBase.448" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.449" }
%"class.blink::Member.449" = type { %"class.blink::MemberBase.450" }
%"class.blink::MemberBase.450" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.102, %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.160", %"class.std::__1::unique_ptr.160", %"class.blink::Member.166", i32, [4 x i8], %"class.WTF::HashSet.167", i32, i32 }
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.blink::Member.166" = type { %"class.blink::MemberBase.133" }
%"class.WTF::HashSet.167" = type { %"class.WTF::HashTable.168" }
%"class.WTF::HashTable.168" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.171" = type { %"class.blink::MemberBase.172" }
%"class.blink::MemberBase.172" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.173" = type { %"class.WTF::Vector.176" }
%"class.WTF::Vector.176" = type { %"class.WTF::VectorBuffer.177" }
%"class.WTF::VectorBuffer.177" = type { %"class.WTF::VectorBufferBase.178" }
%"class.WTF::VectorBufferBase.178" = type { %"class.blink::Member.179"*, i32, i32 }
%"class.blink::Member.179" = type opaque
%"class.blink::Member.181" = type { %"class.blink::MemberBase.182" }
%"class.blink::MemberBase.182" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.183" = type { %"class.blink::MemberBase.184" }
%"class.blink::MemberBase.184" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.185", i32, i32 }
%"class.blink::HeapHashMap.185" = type { %"class.WTF::HashMap.188" }
%"class.WTF::HashMap.188" = type { %"class.WTF::HashTable.189" }
%"class.WTF::HashTable.189" = type <{ %"struct.WTF::KeyValuePair.191"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.191" = type opaque
%"class.std::__1::unique_ptr.192" = type { %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.198" = type { %"class.blink::MemberBase.199" }
%"class.blink::MemberBase.199" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.200" = type { %"class.blink::MemberBase.201" }
%"class.blink::MemberBase.201" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::trace_event::TraceArguments" = type { i8, [2 x i8], [2 x i8*], [2 x %"union.base::trace_event::TraceValue"] }
%"union.base::trace_event::TraceValue" = type { i64 }
%"class.protozero::HeapBuffered" = type { %"class.protozero::ScatteredHeapBuffer", %"class.protozero::ScatteredStreamWriter", %"class.protozero::RootMessage" }
%"class.protozero::ScatteredHeapBuffer" = type { %"class.protozero::ScatteredStreamWriter::Delegate", i64, i64, %"class.protozero::ScatteredStreamWriter"*, %"class.std::__1::vector.499", %"class.protozero::ScatteredHeapBuffer::Slice" }
%"class.protozero::ScatteredStreamWriter::Delegate" = type { i32 (...)** }
%"class.std::__1::vector.499" = type { %"class.std::__1::__vector_base.500" }
%"class.std::__1::__vector_base.500" = type { %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.std::__1::__compressed_pair.506" }
%"class.std::__1::__compressed_pair.506" = type { %"struct.std::__1::__compressed_pair_elem.507" }
%"struct.std::__1::__compressed_pair_elem.507" = type { %"class.protozero::ScatteredHeapBuffer::Slice"* }
%"class.protozero::ScatteredHeapBuffer::Slice" = type { %"class.std::__1::unique_ptr.501", i64, i64 }
%"class.std::__1::unique_ptr.501" = type { %"class.std::__1::__compressed_pair.502" }
%"class.std::__1::__compressed_pair.502" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"class.protozero::ScatteredStreamWriter" = type { %"class.protozero::ScatteredStreamWriter::Delegate"*, %"struct.protozero::ContiguousMemoryRange", i8*, i64 }
%"struct.protozero::ContiguousMemoryRange" = type { i8*, i8* }
%"class.protozero::RootMessage" = type { %"class.perfetto::protos::pbzero::DebugAnnotation.base", %"class.protozero::MessageArena" }
%"class.perfetto::protos::pbzero::DebugAnnotation.base" = type { %"class.protozero::Message.base" }
%"class.protozero::Message.base" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8 }>
%"class.protozero::Message" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8, [7 x i8] }>
%"class.protozero::MessageArena" = type { %"class.std::__1::list" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.511" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.348" }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.220" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.220" = type { %"class.v8::TracedReference.221" }
%"class.v8::TracedReference.221" = type { %"class.v8::BasicTracedReference.222" }
%"class.v8::BasicTracedReference.222" = type { %"class.v8::TracedReferenceBase" }
%"class.WTF::StringAppend" = type { %"class.WTF::StringAppend.228", i8* }
%"class.WTF::StringAppend.228" = type { i8*, %"class.WTF::AtomicString" }
%"class.WTF::HashMap.223" = type { %"class.WTF::HashTable.224" }
%"class.WTF::HashTable.224" = type <{ %"struct.WTF::KeyValuePair.227"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.227" = type { %"class.WTF::AtomicString", { i64, i64 } }
%"class.WTF::StringTypeAdapter.515" = type <{ i8*, i32, [4 x i8] }>
%"class.blink::V8UnionDoubleOrString" = type { %"class.blink::bindings::UnionBase", i32, double, %"class.WTF::String" }
%"class.blink::bindings::UnionBase" = type { i32 (...)** }
%"class.blink::PerformanceMeasure" = type { %"class.blink::PerformanceEntry.base", %class.scoped_refptr.58, %"class.blink::HeapHashMap.125" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.233, %"class.blink::Member.432", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.233 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.234", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.234" = type { %"class.base::RefCounted.235" }
%"class.base::RefCounted.235" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.238" }
%"class.blink::HeapHashMap.238" = type { %"class.WTF::HashMap.241" }
%"class.WTF::HashMap.241" = type { %"class.WTF::HashTable.242" }
%"class.WTF::HashTable.242" = type <{ %"struct.WTF::KeyValuePair.244"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.244" = type { %"class.blink::WeakMember.245", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.245" = type { %"class.blink::MemberBase.246" }
%"class.blink::MemberBase.246" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::Member.432" = type { %"class.blink::MemberBase.433" }
%"class.blink::MemberBase.433" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.434" }
%"class.blink::Persistent.434" = type { %"class.blink::PersistentBase.435" }
%"class.blink::PersistentBase.435" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.absl::optional.441" = type { %"class.absl::optional_internal::optional_data.442" }
%"class.absl::optional_internal::optional_data.442" = type { %"class.absl::optional_internal::optional_data_base.443" }
%"class.absl::optional_internal::optional_data_base.443" = type { %"class.absl::optional_internal::optional_data_dtor_base.444" }
%"class.absl::optional_internal::optional_data_dtor_base.444" = type { i8, %union.anon.445 }
%union.anon.445 = type { double }
%"class.blink::ScriptValue" = type { %"class.v8::Isolate"*, %"class.blink::WorldSafeV8Reference" }
%"class.blink::WorldSafeV8Reference" = type { %"class.blink::TraceWrapperV8Reference.220", %class.scoped_refptr.446 }
%class.scoped_refptr.446 = type { %"class.blink::DOMWrapperWorld"* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::HeapVectorBacking" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.blink::HeapHashTableBacking" = type { i8 }
%"class.WTF::StringTypeAdapter.516" = type { %"class.WTF::StringTypeAdapter.517" }
%"class.WTF::StringTypeAdapter.517" = type { %"class.WTF::StringView" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

$_ZN20trace_event_internal13AddTraceEventINSt3__110unique_ptrIN5blink11TracedValueENS1_14default_deleteIS4_EEEEEEN4base11trace_event16TraceEventHandleEcPKhPKcSE_yjySE_OT_ = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_EcvNS_6StringEEv = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIPS3_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE16ReallocateBufferEj = comdat any

$_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_16PerformanceEntryEEEEEmm = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm = comdat any

$_ZN5blink17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm = comdat any

$_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc = comdat any

$_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv = comdat any

$_ZN5blink10TraceTraitINS_16PerformanceEntryEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink9NameTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE7GetNameEPKv = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE6insertINS_17HashMapTranslatorISH_SC_SI_EERKS1_RPS8_EENS_18HashTableAddResultISJ_SA_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE6ExpandEPSA_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE12ExpandBufferEjPSA_Rb = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE8RehashToEPSA_jSK_ = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE4CallEm = comdat any

$_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINS1_12AtomicStringENS1_12KeyValuePairIS3_NS_6MemberINS_10HeapVectorINS5_INS_16PerformanceEntryEEELj0EEEEEEENS1_24KeyValuePairKeyExtractorENS1_16AtomicStringHashENS1_18HashMapValueTraitsINS1_10HashTraitsIS3_EENSF_ISA_EEEESG_NS_13HeapAllocatorEEEE14AllocateObjectISL_EEPvm = comdat any

$_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS3_12AtomicStringENS3_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_16PerformanceEntryEEELj0EEEEEEENS3_24KeyValuePairKeyExtractorENS3_16AtomicStringHashENS3_18HashMapValueTraitsINS3_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE7GetNameEPKv = comdat any

$_ZN3WTF38TraceHashTableBackingInCollectionTraitILNS_16WeakHandlingFlagE0ENS_9HashTableINS_12AtomicStringENS_12KeyValuePairIS3_N5blink6MemberINS5_10HeapVectorINS6_INS5_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSG_ISB_EEEESH_NS5_13HeapAllocatorEEEE5TraceEPNS5_7VisitorEPKv = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE5eraseEPKSA_ = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE6AppendIS4_EEvPKT_j = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE2atEj = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendIPKcNS_12AtomicStringEE6lengthEv = comdat any

$_ZN5blink10TraceTraitINS_11PerformanceEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index = comdat any

@_ZN4base11trace_event16CategoryRegistry11categories_E = external global [300 x %"struct.base::trace_event::TraceCategory"], align 16
@.str = private unnamed_addr constant [5 x i8] c"data\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"The mark '\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"' does not exist.\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"When converting a mark name ('\00", align 1
@.str.4 = private unnamed_addr constant [142 x i8] c"') to a timestamp given a name that is a read only attribute in the PerformanceTiming interface, the global object has to be a Window object.\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.6 = private unnamed_addr constant [103 x i8] c"' is empty: either the event hasn't happened yet, or it would provide cross-origin timing information.\00", align 1
@.str.7 = private unnamed_addr constant [37 x i8] c"' cannot have a negative time stamp.\00", align 1
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@.str.8 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.9 = private unnamed_addr constant [33 x i8] c"Allocator::IsAllocationAllowed()\00", align 1
@.str.10 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.11 = private unnamed_addr constant [74 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap_allocator_impl.h\00", align 1
@.str.12 = private unnamed_addr constant [18 x i8] c"num_elements > 0u\00", align 1
@.str.13 = private unnamed_addr constant [93 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_vector_backing.h\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.14 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.15 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.16 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17HeapVectorBackingINS1_6MemberINS1_16PerformanceEntryEEENS_12VectorTraitsIS5_EEEEEEPKcv = private unnamed_addr constant [173 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HeapVectorBacking<blink::Member<blink::PerformanceEntry>, WTF::VectorTraits<blink::Member<blink::PerformanceEntry> > >]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10HeapVectorINS1_6MemberINS1_16PerformanceEntryEEELj0EEEEEPKcv = private unnamed_addr constant [108 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HeapVector<blink::Member<blink::PerformanceEntry>, 0>]\00", align 1
@_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE5TraceEPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.17 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.18 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@.str.19 = private unnamed_addr constant [97 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_hash_table_backing.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS3_12AtomicStringENS3_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_16PerformanceEntryEEELj0EEEEEEENS3_24KeyValuePairKeyExtractorENS3_16AtomicStringHashENS3_18HashMapValueTraitsINS3_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink20HeapHashTableBackingINS_9HashTableINS_12AtomicStringENS_12KeyValuePairIS4_NS1_6MemberINS1_10HeapVectorINS6_INS1_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSG_ISB_EEEESH_NS1_13HeapAllocatorEEEEEEEPKcv = private unnamed_addr constant [498 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HeapHashTableBacking<WTF::HashTable<WTF::AtomicString, WTF::KeyValuePair<WTF::AtomicString, blink::Member<blink::HeapVector<blink::Member<blink::PerformanceEntry>, 0> > >, WTF::KeyValuePairKeyExtractor, WTF::AtomicStringHash, WTF::HashMapValueTraits<WTF::HashTraits<WTF::AtomicString>, WTF::HashTraits<blink::Member<blink::HeapVector<blink::Member<blink::PerformanceEntry>, 0> > > >, WTF::HashTraits<WTF::AtomicString>, blink::HeapAllocator> >]\00", align 1
@.str.22 = private unnamed_addr constant [18 x i8] c"new_size >= size_\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.24 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.25 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.26 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1

@_ZN5blink10UserTimingC1ERNS_11PerformanceE = hidden unnamed_addr alias void (%"class.blink::UserTiming"*, %"class.blink::Performance"*), void (%"class.blink::UserTiming"*, %"class.blink::Performance"*)* @_ZN5blink10UserTimingC2ERNS_11PerformanceE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10UserTimingC2ERNS_11PerformanceE(%"class.blink::UserTiming"* nocapture, %"class.blink::Performance"* dereferenceable(672)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::Performance"* %1, %"class.blink::Performance"** %3, align 8
  %4 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 1
  %5 = bitcast %"class.blink::HeapHashMap"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 20, i1 false) #9
  %6 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 2
  %7 = bitcast %"class.blink::HeapHashMap"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 20, i1 false) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10UserTiming28AddMarkToPerformanceTimelineERNS_15PerformanceMarkE(%"class.blink::UserTiming"*, %"class.blink::PerformanceMark"* dereferenceable(88)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::TimeTicks", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::unique_ptr.202", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.blink::Performance"*, %"class.blink::Performance"** %7, align 8
  %9 = bitcast %"class.blink::Performance"* %8 to %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)***
  %10 = load %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)**, %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)*, %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)** %10, i64 27
  %12 = load %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)*, %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)** %11, align 8
  %13 = tail call %"class.blink::PerformanceTiming"* %12(%"class.blink::Performance"* %8) #9
  %14 = icmp eq %"class.blink::PerformanceTiming"* %13, null
  %15 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 16, i32 0), align 16
  %16 = and i8 %15, 25
  %17 = icmp eq i8 %16, 0
  br i1 %14, label %52, label %18

18:                                               ; preds = %2
  br i1 %17, label %73, label %19, !prof !2

19:                                               ; preds = %18
  %20 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #9
  %21 = getelementptr inbounds %"class.blink::PerformanceMark", %"class.blink::PerformanceMark"* %1, i64 0, i32 0, i32 2, i32 0
  call void @_ZNK3WTF6String4Utf8ENS_18UTF8ConversionModeE(%"class.std::__1::basic_string"* nonnull sret %4, %"class.WTF::String"* %21, i32 0) #9
  %22 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  %24 = load i8, i8* %23, align 1
  %25 = icmp slt i8 %24, 0
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = select i1 %25, i8* %27, i8* %20
  %29 = bitcast %"class.std::__1::unique_ptr.202"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #9
  %30 = load %"class.blink::Performance"*, %"class.blink::Performance"** %7, align 8
  %31 = bitcast %"class.blink::Performance"* %30 to %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)***
  %32 = load %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)**, %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)*** %31, align 8
  %33 = getelementptr inbounds %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)*, %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)** %32, i64 27
  %34 = load %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)*, %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)** %33, align 8
  %35 = call %"class.blink::PerformanceTiming"* %34(%"class.blink::Performance"* %30) #9
  %36 = call %"class.blink::TracedValue"* @_ZN5blink17PerformanceTiming24GetNavigationTracingDataEv(%"class.blink::PerformanceTiming"* %35) #9
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.202", %"class.std::__1::unique_ptr.202"* %5, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::TracedValue"* %36, %"class.blink::TracedValue"** %37, align 8
  %38 = call i64 @_ZN20trace_event_internal13AddTraceEventINSt3__110unique_ptrIN5blink11TracedValueENS1_14default_deleteIS4_EEEEEEN4base11trace_event16TraceEventHandleEcPKhPKcSE_yjySE_OT_(i8 signext 82, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 16, i32 0), i8* %28, i8* null, i64 0, i32 1, i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), %"class.std::__1::unique_ptr.202"* nonnull dereferenceable(8) %5)
  %39 = load %"class.blink::TracedValue"*, %"class.blink::TracedValue"** %37, align 8
  store %"class.blink::TracedValue"* null, %"class.blink::TracedValue"** %37, align 8
  %40 = icmp eq %"class.blink::TracedValue"* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %19
  %42 = bitcast %"class.blink::TracedValue"* %39 to void (%"class.blink::TracedValue"*)***
  %43 = load void (%"class.blink::TracedValue"*)**, void (%"class.blink::TracedValue"*)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.blink::TracedValue"*)*, void (%"class.blink::TracedValue"*)** %43, i64 1
  %45 = load void (%"class.blink::TracedValue"*)*, void (%"class.blink::TracedValue"*)** %44, align 8
  call void %45(%"class.blink::TracedValue"* nonnull %39) #9
  br label %46

46:                                               ; preds = %19, %41
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #9
  %47 = load i8, i8* %23, align 1
  %48 = icmp slt i8 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %46
  %50 = load i8*, i8** %26, align 8
  call void @_ZdlPv(i8* %50) #10
  br label %51

51:                                               ; preds = %46, %49
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #9
  br label %73

52:                                               ; preds = %2
  br i1 %17, label %73, label %53, !prof !2

53:                                               ; preds = %52
  %54 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %54) #9
  %55 = getelementptr inbounds %"class.blink::PerformanceMark", %"class.blink::PerformanceMark"* %1, i64 0, i32 0, i32 2, i32 0
  call void @_ZNK3WTF6String4Utf8ENS_18UTF8ConversionModeE(%"class.std::__1::basic_string"* nonnull sret %6, %"class.WTF::String"* %55, i32 0) #9
  %56 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %57 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %56, i64 0, i32 1, i32 0
  %58 = load i8, i8* %57, align 1
  %59 = icmp slt i8 %58, 0
  %60 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = select i1 %59, i8* %61, i8* %54
  %63 = call i32 @_ZN4base14PlatformThread9CurrentIdEv() #9
  %64 = bitcast %"class.base::TimeTicks"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64) #9
  %65 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %3, i64 0, i32 0, i32 0
  %66 = call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #9
  store i64 %66, i64* %65, align 8
  %67 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 82, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 16, i32 0), i8* %62, i8* null, i64 0, i64 0, i32 %63, %"class.base::TimeTicks"* nonnull dereferenceable(8) %3, %"class.base::trace_event::TraceArguments"* null, i32 1) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64) #9
  %68 = load i8, i8* %57, align 1
  %69 = icmp slt i8 %68, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %53
  %71 = load i8*, i8** %60, align 8
  call void @_ZdlPv(i8* %71) #10
  br label %72

72:                                               ; preds = %53, %70
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %54) #9
  br label %73

73:                                               ; preds = %72, %52, %51, %18
  %74 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 1
  %75 = bitcast %"class.blink::PerformanceMark"* %1 to %"class.blink::PerformanceEntry"*
  call fastcc void @_ZN5blink12_GLOBAL__N_122InsertPerformanceEntryERNS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberINS_10HeapVectorINS4_INS_16PerformanceEntryEEELj0EEEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENSB_IS9_EEEERS6_(%"class.blink::HeapHashMap"* dereferenceable(24) %74, %"class.blink::PerformanceEntry"* dereferenceable(48) %75)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN20trace_event_internal13AddTraceEventINSt3__110unique_ptrIN5blink11TracedValueENS1_14default_deleteIS4_EEEEEEN4base11trace_event16TraceEventHandleEcPKhPKcSE_yjySE_OT_(i8 signext, i8*, i8*, i8*, i64, i32, i64, i8*, %"class.std::__1::unique_ptr.202"* dereferenceable(8)) local_unnamed_addr #2 comdat {
  %10 = alloca %"class.base::trace_event::TraceArguments", align 8
  %11 = alloca %"class.base::TimeTicks", align 8
  %12 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #9
  %13 = bitcast %"class.base::TimeTicks"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #9
  %14 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %11, i64 0, i32 0, i32 0
  %15 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #9
  store i64 %15, i64* %14, align 8
  %16 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %16) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 40, i1 false) #9
  store i8 1, i8* %16, align 8
  %17 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 1, i64 0
  store i8 8, i8* %17, align 1
  %18 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 2, i64 0
  store i8* %7, i8** %18, align 8
  %19 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 3, i64 0
  %20 = getelementptr inbounds %"class.std::__1::unique_ptr.202", %"class.std::__1::unique_ptr.202"* %8, i64 0, i32 0, i32 0, i32 0
  %21 = load %"class.blink::TracedValue"*, %"class.blink::TracedValue"** %20, align 8
  store %"class.blink::TracedValue"* null, %"class.blink::TracedValue"** %20, align 8
  %22 = getelementptr inbounds %"class.blink::TracedValue", %"class.blink::TracedValue"* %21, i64 0, i32 0
  %23 = bitcast %"union.base::trace_event::TraceValue"* %19 to %"class.base::trace_event::ConvertableToTraceFormat"**
  store %"class.base::trace_event::ConvertableToTraceFormat"* %22, %"class.base::trace_event::ConvertableToTraceFormat"** %23, align 8
  %24 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext %0, i8* %1, i8* %2, i8* %3, i64 %4, i64 %6, i32 %12, %"class.base::TimeTicks"* nonnull dereferenceable(8) %11, %"class.base::trace_event::TraceArguments"* nonnull %10, i32 %5) #9
  %25 = load i8, i8* %16, align 8
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %61, label %27

27:                                               ; preds = %9, %56
  %28 = phi i64 [ %57, %56 ], [ 0, %9 ]
  %29 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 1, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %30, 8
  br i1 %31, label %32, label %43

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 3, i64 %28
  %34 = bitcast %"union.base::trace_event::TraceValue"* %33 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %35 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %34, align 8
  %36 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %35, null
  br i1 %36, label %56, label %37

37:                                               ; preds = %32
  %38 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %35 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %39 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %38, align 8
  %40 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %39, i64 1
  %41 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %40, align 8
  call void %41(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %35) #9
  %42 = load i8, i8* %29, align 1
  br label %43

43:                                               ; preds = %37, %27
  %44 = phi i8 [ %30, %27 ], [ %42, %37 ]
  %45 = icmp eq i8 %44, 9
  br i1 %45, label %46, label %56

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 3, i64 %28
  %48 = bitcast %"union.base::trace_event::TraceValue"* %47 to %"class.protozero::HeapBuffered"**
  %49 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %48, align 8
  %50 = icmp eq %"class.protozero::HeapBuffered"* %49, null
  br i1 %50, label %56, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %49, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %52) #9
  %53 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %49, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %53) #9
  %54 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %49, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %54) #9
  %55 = bitcast %"class.protozero::HeapBuffered"* %49 to i8*
  call void @_ZdlPv(i8* %55) #10
  br label %56

56:                                               ; preds = %51, %46, %43, %32
  %57 = add nuw nsw i64 %28, 1
  %58 = load i8, i8* %16, align 8
  %59 = zext i8 %58 to i64
  %60 = icmp ult i64 %57, %59
  br i1 %60, label %27, label %61

61:                                               ; preds = %56, %9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %16) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #9
  ret i64 %24
}

declare %"class.blink::TracedValue"* @_ZN5blink17PerformanceTiming24GetNavigationTracingDataEv(%"class.blink::PerformanceTiming"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN5blink12_GLOBAL__N_122InsertPerformanceEntryERNS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberINS_10HeapVectorINS4_INS_16PerformanceEntryEEELj0EEEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENSB_IS9_EEEERS6_(%"class.blink::HeapHashMap"* dereferenceable(24), %"class.blink::PerformanceEntry"* dereferenceable(48)) unnamed_addr #0 {
  %3 = alloca %"class.blink::PerformanceEntry"*, align 8
  %4 = alloca %"class.blink::HeapVector"*, align 8
  %5 = alloca %"class.blink::PerformanceEntry"*, align 8
  %6 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %1, i64 0, i32 2
  %7 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %7, align 8
  %9 = icmp eq %"struct.WTF::KeyValuePair"* %8, null
  %10 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  br i1 %9, label %63, label %12

12:                                               ; preds = %2
  %13 = add i32 %11, -1
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %6, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = lshr i32 %18, 8
  %20 = and i32 %19, %13
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %21
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %22, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %25, label %63, label %26

26:                                               ; preds = %12
  %27 = xor i32 %19, -1
  %28 = lshr i32 %18, 31
  %29 = add nsw i32 %28, %27
  %30 = shl i32 %29, 12
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 7
  %33 = xor i32 %32, %31
  %34 = shl i32 %33, 2
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 20
  %37 = xor i32 %36, %35
  %38 = or i32 %37, 1
  %39 = zext i32 %38 to i64
  br label %40

40:                                               ; preds = %50, %26
  %41 = phi %"struct.WTF::KeyValuePair"* [ %22, %26 ], [ %55, %50 ]
  %42 = phi i64 [ %21, %26 ], [ %54, %50 ]
  %43 = phi i64 [ 0, %26 ], [ %52, %50 ]
  %44 = bitcast %"struct.WTF::KeyValuePair"* %41 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = icmp ne i8* %45, inttoptr (i64 -1 to i8*)
  %47 = bitcast i8* %45 to %"class.WTF::StringImpl"*
  %48 = icmp eq %"class.WTF::StringImpl"* %16, %47
  %49 = and i1 %46, %48
  br i1 %49, label %59, label %50

50:                                               ; preds = %40
  %51 = icmp eq i64 %43, 0
  %52 = select i1 %51, i64 %39, i64 %43
  %53 = add i64 %52, %42
  %54 = and i64 %53, %14
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %54
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %55, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %57, null
  br i1 %58, label %63, label %40

59:                                               ; preds = %40
  %60 = icmp eq %"struct.WTF::KeyValuePair"* %41, null
  br i1 %60, label %63, label %61

61:                                               ; preds = %59
  %62 = zext i32 %11 to i64
  br label %66

63:                                               ; preds = %50, %59, %12, %2
  %64 = zext i32 %11 to i64
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %64
  br label %66

66:                                               ; preds = %61, %63
  %67 = phi i64 [ %62, %61 ], [ %64, %63 ]
  %68 = phi %"struct.WTF::KeyValuePair"* [ %41, %61 ], [ %65, %63 ]
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %67
  %70 = icmp eq %"struct.WTF::KeyValuePair"* %68, %69
  br i1 %70, label %97, label %71

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 1, i32 0, i32 0
  %73 = load %"class.blink::HeapVector"*, %"class.blink::HeapVector"** %72, align 8
  %74 = bitcast %"class.blink::PerformanceEntry"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #9
  store %"class.blink::PerformanceEntry"* %1, %"class.blink::PerformanceEntry"** %3, align 8
  %75 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %73, i64 0, i32 0, i32 0, i32 0, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %73, i64 0, i32 0, i32 0, i32 0, i32 1
  %78 = load i32, i32* %77, align 8
  %79 = icmp eq i32 %76, %78
  br i1 %79, label %95, label %80, !prof !3

80:                                               ; preds = %71
  %81 = ptrtoint %"class.blink::PerformanceEntry"* %1 to i64
  %82 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %73, i64 0, i32 0, i32 0, i32 0, i32 0
  %83 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %82, align 8
  %84 = zext i32 %76 to i64
  %85 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %83, i64 %84
  %86 = bitcast %"class.blink::Member.7"* %85 to i64*
  store atomic i64 %81, i64* %86 monotonic, align 8
  %87 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %92, label %89

89:                                               ; preds = %80
  %90 = bitcast %"class.blink::PerformanceEntry"* %1 to i8*
  %91 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %90) #9
  br label %92

92:                                               ; preds = %89, %80
  %93 = load i32, i32* %75, align 4
  %94 = add i32 %93, 1
  store i32 %94, i32* %75, align 4
  br label %147

95:                                               ; preds = %71
  %96 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %73, i64 0, i32 0
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIPS3_EEvOT_(%"class.WTF::Vector"* %96, %"class.blink::PerformanceEntry"** nonnull dereferenceable(8) %3) #9
  br label %147

97:                                               ; preds = %66
  %98 = bitcast %"class.blink::HeapVector"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %98) #9
  store %"class.blink::HeapVector"* inttoptr (i64 -6148914691236517206 to %"class.blink::HeapVector"*), %"class.blink::HeapVector"** %4, align 8
  %99 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEEEPhm(i64 16) #9
  %100 = getelementptr inbounds i8, i8* %99, i64 -4
  %101 = bitcast i8* %100 to i16*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 16, i1 false) #9
  %102 = load atomic i16, i16* %101 monotonic, align 2
  %103 = or i16 %102, 1
  store atomic i16 %103, i16* %101 release, align 2
  %104 = bitcast %"class.blink::HeapVector"** %4 to i8**
  store i8* %99, i8** %104, align 8
  %105 = bitcast %"class.blink::PerformanceEntry"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %105) #9
  store %"class.blink::PerformanceEntry"* %1, %"class.blink::PerformanceEntry"** %5, align 8
  %106 = getelementptr inbounds i8, i8* %99, i64 12
  %107 = bitcast i8* %106 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds i8, i8* %99, i64 8
  %110 = bitcast i8* %109 to i32*
  %111 = load i32, i32* %110, align 8
  %112 = icmp eq i32 %108, %111
  br i1 %112, label %128, label %113, !prof !3

113:                                              ; preds = %97
  %114 = ptrtoint %"class.blink::PerformanceEntry"* %1 to i64
  %115 = bitcast i8* %99 to %"class.blink::Member.7"**
  %116 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %115, align 8
  %117 = zext i32 %108 to i64
  %118 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %116, i64 %117
  %119 = bitcast %"class.blink::Member.7"* %118 to i64*
  store atomic i64 %114, i64* %119 monotonic, align 8
  %120 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %125, label %122

122:                                              ; preds = %113
  %123 = bitcast %"class.blink::PerformanceEntry"* %1 to i8*
  %124 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %123) #9
  br label %125

125:                                              ; preds = %122, %113
  %126 = load i32, i32* %107, align 4
  %127 = add i32 %126, 1
  store i32 %127, i32* %107, align 4
  br label %130

128:                                              ; preds = %97
  %129 = bitcast i8* %99 to %"class.WTF::Vector"*
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIPS3_EEvOT_(%"class.WTF::Vector"* %129, %"class.blink::PerformanceEntry"** nonnull dereferenceable(8) %5) #9
  br label %130

130:                                              ; preds = %125, %128
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %105) #9
  %131 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %0, i64 0, i32 0, i32 0
  %132 = call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE6insertINS_17HashMapTranslatorISH_SC_SI_EERKS1_RPS8_EENS_18HashTableAddResultISJ_SA_EEOT0_OT1_(%"class.WTF::HashTable"* %131, %"class.WTF::AtomicString"* dereferenceable(8) %6, %"class.blink::HeapVector"** nonnull dereferenceable(8) %4) #9
  %133 = extractvalue { %"struct.WTF::KeyValuePair"*, i8 } %132, 1
  %134 = and i8 %133, 1
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %136, label %147

136:                                              ; preds = %130
  %137 = extractvalue { %"struct.WTF::KeyValuePair"*, i8 } %132, 0
  %138 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %137, i64 0, i32 1
  %139 = load %"class.blink::HeapVector"*, %"class.blink::HeapVector"** %4, align 8
  %140 = ptrtoint %"class.blink::HeapVector"* %139 to i64
  %141 = bitcast %"class.blink::Member.3"* %138 to i64*
  store atomic i64 %140, i64* %141 monotonic, align 8
  %142 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %147, label %144

144:                                              ; preds = %136
  %145 = bitcast %"class.blink::HeapVector"* %139 to i8*
  %146 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %145) #9
  br label %147

147:                                              ; preds = %144, %136, %130, %95, %92
  %148 = phi i8* [ %74, %92 ], [ %74, %95 ], [ %98, %130 ], [ %98, %136 ], [ %98, %144 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %148) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10UserTiming10ClearMarksERKN3WTF12AtomicStringE(%"class.blink::UserTiming"*, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  %6 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 1, i32 0
  %7 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %6, i64 0, i32 0, i32 0
  %8 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %7, align 8
  %9 = icmp eq %"struct.WTF::KeyValuePair"* %8, null
  br i1 %5, label %10, label %47

10:                                               ; preds = %2
  br i1 %9, label %153, label %11

11:                                               ; preds = %10
  %12 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %43, label %15

15:                                               ; preds = %11
  %16 = zext i32 %13 to i64
  br label %17

17:                                               ; preds = %40, %15
  %18 = phi i64 [ 0, %15 ], [ %41, %40 ]
  %19 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %18
  %20 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %19, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  switch i64 %22, label %23 [
    i64 -1, label %40
    i64 0, label %40
  ]

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  br i1 %27, label %30, label %32

30:                                               ; preds = %23
  %31 = add i32 %29, -1
  store i32 %31, i32* %28, align 4
  br label %32

32:                                               ; preds = %30, %23
  %33 = phi i32 [ %31, %30 ], [ %29, %23 ]
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %21) #9
  br label %36

36:                                               ; preds = %35, %32
  %37 = bitcast %"struct.WTF::KeyValuePair"* %19 to i8**
  store i8* inttoptr (i64 -1 to i8*), i8** %37, align 8
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %18, i32 1
  %39 = bitcast %"class.blink::Member.3"* %38 to i64*
  store atomic i64 0, i64* %39 monotonic, align 8
  br label %40

40:                                               ; preds = %36, %17, %17
  %41 = add nuw nsw i64 %18, 1
  %42 = icmp eq i64 %41, %16
  br i1 %42, label %43, label %17

43:                                               ; preds = %40, %11
  %44 = bitcast %"struct.WTF::KeyValuePair"* %8 to i8*
  tail call void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8* nonnull %44) #9
  %45 = bitcast %"class.WTF::HashMap"* %6 to i64*
  store atomic i64 0, i64* %45 monotonic, align 8
  store i32 0, i32* %12, align 8
  %46 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 0, i32* %46, align 4
  br label %153

47:                                               ; preds = %2
  br i1 %9, label %153, label %48

48:                                               ; preds = %47
  %49 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %50 = load i32, i32* %49, align 8
  %51 = add i32 %50, -1
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load atomic i32, i32* %53 monotonic, align 4
  %55 = lshr i32 %54, 8
  %56 = and i32 %55, %51
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %58, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %153, label %62

62:                                               ; preds = %48
  %63 = xor i32 %55, -1
  %64 = lshr i32 %54, 31
  %65 = add nsw i32 %64, %63
  %66 = shl i32 %65, 12
  %67 = xor i32 %66, %65
  %68 = lshr i32 %67, 7
  %69 = xor i32 %68, %67
  %70 = shl i32 %69, 2
  %71 = xor i32 %70, %69
  %72 = lshr i32 %71, 20
  %73 = xor i32 %72, %71
  %74 = or i32 %73, 1
  %75 = zext i32 %74 to i64
  br label %76

76:                                               ; preds = %86, %62
  %77 = phi %"struct.WTF::KeyValuePair"* [ %58, %62 ], [ %91, %86 ]
  %78 = phi i64 [ %57, %62 ], [ %90, %86 ]
  %79 = phi i64 [ 0, %62 ], [ %88, %86 ]
  %80 = bitcast %"struct.WTF::KeyValuePair"* %77 to i8**
  %81 = load i8*, i8** %80, align 8
  %82 = icmp ne i8* %81, inttoptr (i64 -1 to i8*)
  %83 = bitcast i8* %81 to %"class.WTF::StringImpl"*
  %84 = icmp eq %"class.WTF::StringImpl"* %4, %83
  %85 = and i1 %82, %84
  br i1 %85, label %95, label %86

86:                                               ; preds = %76
  %87 = icmp eq i64 %79, 0
  %88 = select i1 %87, i64 %75, i64 %79
  %89 = add i64 %88, %78
  %90 = and i64 %89, %52
  %91 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %90
  %92 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %91, i64 0, i32 0, i32 0, i32 0, i32 0
  %93 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %92, align 8
  %94 = icmp eq %"class.WTF::StringImpl"* %93, null
  br i1 %94, label %153, label %76

95:                                               ; preds = %76
  %96 = icmp eq %"struct.WTF::KeyValuePair"* %77, null
  br i1 %96, label %153, label %97

97:                                               ; preds = %95
  %98 = load atomic i32, i32* %53 monotonic, align 4
  %99 = lshr i32 %98, 8
  %100 = and i32 %99, %51
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %101
  %103 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %102, i64 0, i32 0, i32 0, i32 0, i32 0
  %104 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  %105 = icmp eq %"class.WTF::StringImpl"* %104, null
  br i1 %105, label %143, label %106

106:                                              ; preds = %97
  %107 = xor i32 %99, -1
  %108 = lshr i32 %98, 31
  %109 = add nsw i32 %108, %107
  %110 = shl i32 %109, 12
  %111 = xor i32 %110, %109
  %112 = lshr i32 %111, 7
  %113 = xor i32 %112, %111
  %114 = shl i32 %113, 2
  %115 = xor i32 %114, %113
  %116 = lshr i32 %115, 20
  %117 = xor i32 %116, %115
  %118 = or i32 %117, 1
  %119 = zext i32 %118 to i64
  br label %120

120:                                              ; preds = %130, %106
  %121 = phi %"struct.WTF::KeyValuePair"* [ %102, %106 ], [ %135, %130 ]
  %122 = phi i64 [ %101, %106 ], [ %134, %130 ]
  %123 = phi i64 [ 0, %106 ], [ %132, %130 ]
  %124 = bitcast %"struct.WTF::KeyValuePair"* %121 to i8**
  %125 = load i8*, i8** %124, align 8
  %126 = icmp ne i8* %125, inttoptr (i64 -1 to i8*)
  %127 = bitcast i8* %125 to %"class.WTF::StringImpl"*
  %128 = icmp eq %"class.WTF::StringImpl"* %4, %127
  %129 = and i1 %126, %128
  br i1 %129, label %139, label %130

130:                                              ; preds = %120
  %131 = icmp eq i64 %123, 0
  %132 = select i1 %131, i64 %119, i64 %123
  %133 = add i64 %132, %122
  %134 = and i64 %133, %52
  %135 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %134
  %136 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %135, i64 0, i32 0, i32 0, i32 0, i32 0
  %137 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %136, align 8
  %138 = icmp eq %"class.WTF::StringImpl"* %137, null
  br i1 %138, label %143, label %120

139:                                              ; preds = %120
  %140 = icmp eq %"struct.WTF::KeyValuePair"* %121, null
  br i1 %140, label %143, label %141

141:                                              ; preds = %139
  %142 = zext i32 %50 to i64
  br label %146

143:                                              ; preds = %130, %139, %97
  %144 = zext i32 %50 to i64
  %145 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %144
  br label %146

146:                                              ; preds = %143, %141
  %147 = phi i64 [ %142, %141 ], [ %144, %143 ]
  %148 = phi %"struct.WTF::KeyValuePair"* [ %121, %141 ], [ %145, %143 ]
  %149 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %147
  %150 = icmp eq %"struct.WTF::KeyValuePair"* %149, %148
  br i1 %150, label %153, label %151

151:                                              ; preds = %146
  %152 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %6, i64 0, i32 0
  tail call void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE5eraseEPKSA_(%"class.WTF::HashTable"* %152, %"struct.WTF::KeyValuePair"* %148) #9
  br label %153

153:                                              ; preds = %86, %95, %48, %47, %151, %146, %43, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::PerformanceMark"* @_ZN5blink10UserTiming16FindExistingMarkERKN3WTF12AtomicStringE(%"class.blink::UserTiming"* nocapture readonly, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair"* %4, null
  %6 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  br i1 %5, label %59, label %8

8:                                                ; preds = %2
  %9 = add i32 %7, -1
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = lshr i32 %14, 8
  %16 = and i32 %15, %9
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %17
  %19 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %18, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %59, label %22

22:                                               ; preds = %8
  %23 = xor i32 %15, -1
  %24 = lshr i32 %14, 31
  %25 = add nsw i32 %24, %23
  %26 = shl i32 %25, 12
  %27 = xor i32 %26, %25
  %28 = lshr i32 %27, 7
  %29 = xor i32 %28, %27
  %30 = shl i32 %29, 2
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 20
  %33 = xor i32 %32, %31
  %34 = or i32 %33, 1
  %35 = zext i32 %34 to i64
  br label %36

36:                                               ; preds = %46, %22
  %37 = phi %"struct.WTF::KeyValuePair"* [ %18, %22 ], [ %51, %46 ]
  %38 = phi i64 [ %17, %22 ], [ %50, %46 ]
  %39 = phi i64 [ 0, %22 ], [ %48, %46 ]
  %40 = bitcast %"struct.WTF::KeyValuePair"* %37 to i8**
  %41 = load i8*, i8** %40, align 8
  %42 = icmp ne i8* %41, inttoptr (i64 -1 to i8*)
  %43 = bitcast i8* %41 to %"class.WTF::StringImpl"*
  %44 = icmp eq %"class.WTF::StringImpl"* %12, %43
  %45 = and i1 %42, %44
  br i1 %45, label %55, label %46

46:                                               ; preds = %36
  %47 = icmp eq i64 %39, 0
  %48 = select i1 %47, i64 %35, i64 %39
  %49 = add i64 %48, %38
  %50 = and i64 %49, %10
  %51 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %50
  %52 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %51, i64 0, i32 0, i32 0, i32 0, i32 0
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %52, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %53, null
  br i1 %54, label %59, label %36

55:                                               ; preds = %36
  %56 = icmp eq %"struct.WTF::KeyValuePair"* %37, null
  br i1 %56, label %59, label %57

57:                                               ; preds = %55
  %58 = zext i32 %7 to i64
  br label %62

59:                                               ; preds = %46, %55, %8, %2
  %60 = zext i32 %7 to i64
  %61 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %60
  br label %62

62:                                               ; preds = %57, %59
  %63 = phi i64 [ %58, %57 ], [ %60, %59 ]
  %64 = phi %"struct.WTF::KeyValuePair"* [ %37, %57 ], [ %61, %59 ]
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %63
  %66 = icmp eq %"struct.WTF::KeyValuePair"* %64, %65
  br i1 %66, label %77, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %64, i64 0, i32 1, i32 0, i32 0
  %69 = load %"class.blink::HeapVector"*, %"class.blink::HeapVector"** %68, align 8
  %70 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %69, i64 0, i32 0
  %71 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %69, i64 0, i32 0, i32 0, i32 0, i32 2
  %72 = load i32, i32* %71, align 4
  %73 = add i32 %72, -1
  %74 = tail call dereferenceable(8) %"class.blink::Member.7"* @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector"* %70, i32 %73) #9
  %75 = bitcast %"class.blink::Member.7"* %74 to %"class.blink::PerformanceMark"**
  %76 = load %"class.blink::PerformanceMark"*, %"class.blink::PerformanceMark"** %75, align 8
  br label %77

77:                                               ; preds = %62, %67
  %78 = phi %"class.blink::PerformanceMark"* [ %76, %67 ], [ null, %62 ]
  ret %"class.blink::PerformanceMark"* %78
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN5blink10UserTiming25FindExistingMarkStartTimeERKN3WTF12AtomicStringERNS_14ExceptionStateE(%"class.blink::UserTiming"* nocapture readonly, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.WTF::StringAppend", align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = alloca %"class.WTF::StringAppend", align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.WTF::StringAppend", align 8
  %10 = tail call %"class.blink::PerformanceMark"* @_ZN5blink10UserTiming16FindExistingMarkERKN3WTF12AtomicStringE(%"class.blink::UserTiming"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %1)
  %11 = icmp eq %"class.blink::PerformanceMark"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %3
  %13 = bitcast %"class.blink::PerformanceMark"* %10 to %"class.blink::PerformanceEntry"*
  %14 = tail call double @_ZNK5blink16PerformanceEntry9startTimeEv(%"class.blink::PerformanceEntry"* nonnull %13) #9
  br label %561

15:                                               ; preds = %3
  %16 = tail call dereferenceable(24) %"class.WTF::HashMap.223"* @_ZN5blink17PerformanceTiming19GetAttributeMappingEv() #9
  %17 = getelementptr inbounds %"class.WTF::HashMap.223", %"class.WTF::HashMap.223"* %16, i64 0, i32 0, i32 0
  %18 = load %"struct.WTF::KeyValuePair.227"*, %"struct.WTF::KeyValuePair.227"** %17, align 8
  %19 = icmp eq %"struct.WTF::KeyValuePair.227"* %18, null
  br i1 %19, label %20, label %23

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  br label %80

23:                                               ; preds = %15
  %24 = getelementptr inbounds %"class.WTF::HashMap.223", %"class.WTF::HashMap.223"* %16, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = add i32 %25, -1
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, %26
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair.227", %"struct.WTF::KeyValuePair.227"* %18, i64 %34
  %36 = getelementptr inbounds %"struct.WTF::KeyValuePair.227", %"struct.WTF::KeyValuePair.227"* %35, i64 0, i32 0, i32 0, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %38, label %80, label %39

39:                                               ; preds = %23
  %40 = xor i32 %32, -1
  %41 = lshr i32 %31, 31
  %42 = add nsw i32 %41, %40
  %43 = shl i32 %42, 12
  %44 = xor i32 %43, %42
  %45 = lshr i32 %44, 7
  %46 = xor i32 %45, %44
  %47 = shl i32 %46, 2
  %48 = xor i32 %47, %46
  %49 = lshr i32 %48, 20
  %50 = xor i32 %49, %48
  %51 = or i32 %50, 1
  %52 = zext i32 %51 to i64
  br label %53

53:                                               ; preds = %63, %39
  %54 = phi %"struct.WTF::KeyValuePair.227"* [ %35, %39 ], [ %68, %63 ]
  %55 = phi i64 [ %34, %39 ], [ %67, %63 ]
  %56 = phi i64 [ 0, %39 ], [ %65, %63 ]
  %57 = bitcast %"struct.WTF::KeyValuePair.227"* %54 to i8**
  %58 = load i8*, i8** %57, align 8
  %59 = icmp ne i8* %58, inttoptr (i64 -1 to i8*)
  %60 = bitcast i8* %58 to %"class.WTF::StringImpl"*
  %61 = icmp eq %"class.WTF::StringImpl"* %29, %60
  %62 = and i1 %59, %61
  br i1 %62, label %72, label %63

63:                                               ; preds = %53
  %64 = icmp eq i64 %56, 0
  %65 = select i1 %64, i64 %52, i64 %56
  %66 = add i64 %65, %55
  %67 = and i64 %66, %27
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair.227", %"struct.WTF::KeyValuePair.227"* %18, i64 %67
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair.227", %"struct.WTF::KeyValuePair.227"* %68, i64 0, i32 0, i32 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = icmp eq %"class.WTF::StringImpl"* %70, null
  br i1 %71, label %80, label %53

72:                                               ; preds = %53
  %73 = icmp eq %"struct.WTF::KeyValuePair.227"* %54, null
  br i1 %73, label %80, label %74

74:                                               ; preds = %72
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.227", %"struct.WTF::KeyValuePair.227"* %54, i64 0, i32 1, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair.227", %"struct.WTF::KeyValuePair.227"* %54, i64 0, i32 1, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = icmp eq i64 %76, 0
  br i1 %79, label %80, label %229

80:                                               ; preds = %63, %20, %23, %72, %74
  %81 = phi %"class.WTF::StringImpl"* [ %22, %20 ], [ %29, %23 ], [ %29, %72 ], [ %29, %74 ], [ %29, %63 ]
  %82 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #9
  %83 = bitcast %"class.WTF::StringAppend"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %83) #9
  %84 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %84, label %160, label %85

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = load atomic i32, i32* %86 monotonic, align 4
  %88 = and i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 0
  %91 = load i32, i32* %90, align 4
  br i1 %89, label %92, label %102

92:                                               ; preds = %85
  %93 = zext i32 %91 to i33
  %94 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %93, i33 1) #9
  %95 = extractvalue { i33, i1 } %94, 1
  %96 = extractvalue { i33, i1 } %94, 0
  %97 = icmp slt i33 %96, 0
  %98 = or i1 %95, %97
  br i1 %98, label %99, label %100, !prof !3

99:                                               ; preds = %92
  tail call void @llvm.trap() #9
  unreachable

100:                                              ; preds = %92
  %101 = trunc i33 %96 to i32
  store i32 %101, i32* %90, align 4
  br label %102

102:                                              ; preds = %100, %85
  %103 = phi i32 [ %101, %100 ], [ %91, %85 ]
  %104 = load atomic i32, i32* %86 monotonic, align 4
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %117

107:                                              ; preds = %102
  %108 = zext i32 %103 to i33
  %109 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %108, i33 1) #9
  %110 = extractvalue { i33, i1 } %109, 1
  %111 = extractvalue { i33, i1 } %109, 0
  %112 = icmp slt i33 %111, 0
  %113 = or i1 %110, %112
  br i1 %113, label %114, label %115, !prof !3

114:                                              ; preds = %107
  tail call void @llvm.trap() #9
  unreachable

115:                                              ; preds = %107
  %116 = trunc i33 %111 to i32
  store i32 %116, i32* %90, align 4
  br label %117

117:                                              ; preds = %115, %102
  %118 = phi i32 [ %116, %115 ], [ %103, %102 ]
  %119 = load atomic i32, i32* %86 monotonic, align 4
  %120 = and i32 %119, 2
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %124

122:                                              ; preds = %117
  %123 = add i32 %118, -1
  store i32 %123, i32* %90, align 4
  br label %124

124:                                              ; preds = %122, %117
  %125 = phi i32 [ %123, %122 ], [ %118, %117 ]
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %124
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %81) #9
  br label %128

128:                                              ; preds = %124, %127
  %129 = load atomic i32, i32* %86 monotonic, align 4, !noalias !4
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = load i32, i32* %90, align 4
  br i1 %131, label %133, label %143

133:                                              ; preds = %128
  %134 = zext i32 %132 to i33
  %135 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %134, i33 1) #9
  %136 = extractvalue { i33, i1 } %135, 1
  %137 = extractvalue { i33, i1 } %135, 0
  %138 = icmp slt i33 %137, 0
  %139 = or i1 %136, %138
  br i1 %139, label %140, label %141, !prof !3

140:                                              ; preds = %133
  tail call void @llvm.trap() #9, !noalias !4
  unreachable

141:                                              ; preds = %133
  %142 = trunc i33 %137 to i32
  store i32 %142, i32* %90, align 4, !noalias !4
  br label %143

143:                                              ; preds = %128, %141
  %144 = phi i32 [ %142, %141 ], [ %132, %128 ]
  %145 = bitcast %"class.WTF::StringAppend"* %5 to i64*
  store i64 ptrtoint ([11 x i8]* @.str.1 to i64), i64* %145, align 8, !alias.scope !4
  %146 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %81, %"class.WTF::StringImpl"** %146, align 8, !alias.scope !4
  %147 = load atomic i32, i32* %86 monotonic, align 4, !noalias !4
  %148 = and i32 %147, 2
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %164

150:                                              ; preds = %143
  %151 = zext i32 %144 to i33
  %152 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %151, i33 1) #9
  %153 = extractvalue { i33, i1 } %152, 1
  %154 = extractvalue { i33, i1 } %152, 0
  %155 = icmp slt i33 %154, 0
  %156 = or i1 %153, %155
  br i1 %156, label %157, label %158, !prof !3

157:                                              ; preds = %150
  tail call void @llvm.trap() #9, !noalias !4
  unreachable

158:                                              ; preds = %150
  %159 = trunc i33 %154 to i32
  store i32 %159, i32* %90, align 4, !noalias !4
  br label %164

160:                                              ; preds = %80
  %161 = bitcast %"class.WTF::StringAppend"* %5 to i64*
  store i64 ptrtoint ([11 x i8]* @.str.1 to i64), i64* %161, align 8, !alias.scope !4
  %162 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %162, align 8, !alias.scope !4
  %163 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i8** %163, align 8, !alias.scope !4
  br label %176

164:                                              ; preds = %158, %143
  %165 = phi i32 [ %159, %158 ], [ %144, %143 ]
  %166 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i8** %166, align 8, !alias.scope !4
  %167 = load atomic i32, i32* %86 monotonic, align 4, !noalias !4
  %168 = and i32 %167, 2
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %172

170:                                              ; preds = %164
  %171 = add i32 %165, -1
  store i32 %171, i32* %90, align 4, !noalias !4
  br label %172

172:                                              ; preds = %170, %164
  %173 = phi i32 [ %171, %170 ], [ %165, %164 ]
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %176

175:                                              ; preds = %172
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %81) #9, !noalias !4
  br label %176

176:                                              ; preds = %160, %172, %175
  %177 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_EcvNS_6StringEEv(%"class.WTF::StringAppend"* nonnull %5)
  %178 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %177, %"class.WTF::StringImpl"** %178, align 8
  %179 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %180 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %179, align 8
  %181 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %180, align 8
  call void %181(%"class.blink::ExceptionState"* %2, i32 12, %"class.WTF::String"* nonnull dereferenceable(8) %4) #9
  %182 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %178, align 8
  %183 = icmp eq %"class.WTF::StringImpl"* %182, null
  br i1 %183, label %197, label %184

184:                                              ; preds = %176
  %185 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %186 = load atomic i32, i32* %185 monotonic, align 4
  %187 = and i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 0
  %190 = load i32, i32* %189, align 4
  br i1 %188, label %191, label %193

191:                                              ; preds = %184
  %192 = add i32 %190, -1
  store i32 %192, i32* %189, align 4
  br label %193

193:                                              ; preds = %191, %184
  %194 = phi i32 [ %192, %191 ], [ %190, %184 ]
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %197

196:                                              ; preds = %193
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %182) #9
  br label %197

197:                                              ; preds = %176, %193, %196
  %198 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %199 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %198, align 8
  %200 = icmp eq %"class.WTF::StringImpl"* %199, null
  br i1 %200, label %214, label %201

201:                                              ; preds = %197
  %202 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %199, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %203 = load atomic i32, i32* %202 monotonic, align 4
  %204 = and i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %199, i64 0, i32 0
  %207 = load i32, i32* %206, align 4
  br i1 %205, label %208, label %210

208:                                              ; preds = %201
  %209 = add i32 %207, -1
  store i32 %209, i32* %206, align 4
  br label %210

210:                                              ; preds = %208, %201
  %211 = phi i32 [ %209, %208 ], [ %207, %201 ]
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %213, label %214

213:                                              ; preds = %210
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %199) #9
  br label %214

214:                                              ; preds = %197, %210, %213
  br i1 %84, label %228, label %215

215:                                              ; preds = %214
  %216 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %217 = load atomic i32, i32* %216 monotonic, align 4
  %218 = and i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 0
  %221 = load i32, i32* %220, align 4
  br i1 %219, label %222, label %224

222:                                              ; preds = %215
  %223 = add i32 %221, -1
  store i32 %223, i32* %220, align 4
  br label %224

224:                                              ; preds = %222, %215
  %225 = phi i32 [ %223, %222 ], [ %221, %215 ]
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %228

227:                                              ; preds = %224
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %81) #9
  br label %228

228:                                              ; preds = %214, %224, %227
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %83) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #9
  br label %561

229:                                              ; preds = %74
  %230 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 0, i32 0, i32 0
  %231 = load %"class.blink::Performance"*, %"class.blink::Performance"** %230, align 8
  %232 = bitcast %"class.blink::Performance"* %231 to %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)***
  %233 = load %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)**, %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)*** %232, align 8
  %234 = getelementptr inbounds %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)*, %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)** %233, i64 27
  %235 = load %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)*, %"class.blink::PerformanceTiming"* (%"class.blink::Performance"*)** %234, align 8
  %236 = tail call %"class.blink::PerformanceTiming"* %235(%"class.blink::Performance"* %231) #9
  %237 = icmp eq %"class.blink::PerformanceTiming"* %236, null
  br i1 %237, label %238, label %388

238:                                              ; preds = %229
  %239 = bitcast %"class.WTF::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %239) #9
  %240 = bitcast %"class.WTF::StringAppend"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %240) #9
  %241 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  %242 = icmp eq %"class.WTF::StringImpl"* %241, null
  br i1 %242, label %318, label %243

243:                                              ; preds = %238
  %244 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %241, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %245 = load atomic i32, i32* %244 monotonic, align 4
  %246 = and i32 %245, 2
  %247 = icmp eq i32 %246, 0
  %248 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %241, i64 0, i32 0
  %249 = load i32, i32* %248, align 4
  br i1 %247, label %250, label %260

250:                                              ; preds = %243
  %251 = zext i32 %249 to i33
  %252 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %251, i33 1) #9
  %253 = extractvalue { i33, i1 } %252, 1
  %254 = extractvalue { i33, i1 } %252, 0
  %255 = icmp slt i33 %254, 0
  %256 = or i1 %253, %255
  br i1 %256, label %257, label %258, !prof !3

257:                                              ; preds = %250
  tail call void @llvm.trap() #9
  unreachable

258:                                              ; preds = %250
  %259 = trunc i33 %254 to i32
  store i32 %259, i32* %248, align 4
  br label %260

260:                                              ; preds = %258, %243
  %261 = phi i32 [ %259, %258 ], [ %249, %243 ]
  %262 = load atomic i32, i32* %244 monotonic, align 4
  %263 = and i32 %262, 2
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %265, label %275

265:                                              ; preds = %260
  %266 = zext i32 %261 to i33
  %267 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %266, i33 1) #9
  %268 = extractvalue { i33, i1 } %267, 1
  %269 = extractvalue { i33, i1 } %267, 0
  %270 = icmp slt i33 %269, 0
  %271 = or i1 %268, %270
  br i1 %271, label %272, label %273, !prof !3

272:                                              ; preds = %265
  tail call void @llvm.trap() #9
  unreachable

273:                                              ; preds = %265
  %274 = trunc i33 %269 to i32
  store i32 %274, i32* %248, align 4
  br label %275

275:                                              ; preds = %273, %260
  %276 = phi i32 [ %274, %273 ], [ %261, %260 ]
  %277 = load atomic i32, i32* %244 monotonic, align 4
  %278 = and i32 %277, 2
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %280, label %282

280:                                              ; preds = %275
  %281 = add i32 %276, -1
  store i32 %281, i32* %248, align 4
  br label %282

282:                                              ; preds = %280, %275
  %283 = phi i32 [ %281, %280 ], [ %276, %275 ]
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %285, label %286

285:                                              ; preds = %282
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %241) #9
  br label %286

286:                                              ; preds = %282, %285
  %287 = load atomic i32, i32* %244 monotonic, align 4, !noalias !7
  %288 = and i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = load i32, i32* %248, align 4
  br i1 %289, label %291, label %301

291:                                              ; preds = %286
  %292 = zext i32 %290 to i33
  %293 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %292, i33 1) #9
  %294 = extractvalue { i33, i1 } %293, 1
  %295 = extractvalue { i33, i1 } %293, 0
  %296 = icmp slt i33 %295, 0
  %297 = or i1 %294, %296
  br i1 %297, label %298, label %299, !prof !3

298:                                              ; preds = %291
  tail call void @llvm.trap() #9, !noalias !7
  unreachable

299:                                              ; preds = %291
  %300 = trunc i33 %295 to i32
  store i32 %300, i32* %248, align 4, !noalias !7
  br label %301

301:                                              ; preds = %286, %299
  %302 = phi i32 [ %300, %299 ], [ %290, %286 ]
  %303 = bitcast %"class.WTF::StringAppend"* %7 to i64*
  store i64 ptrtoint ([31 x i8]* @.str.3 to i64), i64* %303, align 8, !alias.scope !7
  %304 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %7, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %241, %"class.WTF::StringImpl"** %304, align 8, !alias.scope !7
  %305 = load atomic i32, i32* %244 monotonic, align 4, !noalias !7
  %306 = and i32 %305, 2
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %308, label %322

308:                                              ; preds = %301
  %309 = zext i32 %302 to i33
  %310 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %309, i33 1) #9
  %311 = extractvalue { i33, i1 } %310, 1
  %312 = extractvalue { i33, i1 } %310, 0
  %313 = icmp slt i33 %312, 0
  %314 = or i1 %311, %313
  br i1 %314, label %315, label %316, !prof !3

315:                                              ; preds = %308
  tail call void @llvm.trap() #9, !noalias !7
  unreachable

316:                                              ; preds = %308
  %317 = trunc i33 %312 to i32
  store i32 %317, i32* %248, align 4, !noalias !7
  br label %322

318:                                              ; preds = %238
  %319 = bitcast %"class.WTF::StringAppend"* %7 to i64*
  store i64 ptrtoint ([31 x i8]* @.str.3 to i64), i64* %319, align 8, !alias.scope !7
  %320 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %7, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %320, align 8, !alias.scope !7
  %321 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %7, i64 0, i32 1
  store i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.4, i64 0, i64 0), i8** %321, align 8, !alias.scope !7
  br label %334

322:                                              ; preds = %316, %301
  %323 = phi i32 [ %317, %316 ], [ %302, %301 ]
  %324 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %7, i64 0, i32 1
  store i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.4, i64 0, i64 0), i8** %324, align 8, !alias.scope !7
  %325 = load atomic i32, i32* %244 monotonic, align 4, !noalias !7
  %326 = and i32 %325, 2
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %328, label %330

328:                                              ; preds = %322
  %329 = add i32 %323, -1
  store i32 %329, i32* %248, align 4, !noalias !7
  br label %330

330:                                              ; preds = %328, %322
  %331 = phi i32 [ %329, %328 ], [ %323, %322 ]
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %333, label %334

333:                                              ; preds = %330
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %241) #9, !noalias !7
  br label %334

334:                                              ; preds = %318, %330, %333
  %335 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_EcvNS_6StringEEv(%"class.WTF::StringAppend"* nonnull %7)
  %336 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %335, %"class.WTF::StringImpl"** %336, align 8
  %337 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)***
  %338 = load void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)*** %337, align 8
  %339 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)** %338, i64 3
  %340 = load void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)** %339, align 8
  call void %340(%"class.blink::ExceptionState"* %2, %"class.WTF::String"* nonnull dereferenceable(8) %6) #9
  %341 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %336, align 8
  %342 = icmp eq %"class.WTF::StringImpl"* %341, null
  br i1 %342, label %356, label %343

343:                                              ; preds = %334
  %344 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %341, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %345 = load atomic i32, i32* %344 monotonic, align 4
  %346 = and i32 %345, 2
  %347 = icmp eq i32 %346, 0
  %348 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %341, i64 0, i32 0
  %349 = load i32, i32* %348, align 4
  br i1 %347, label %350, label %352

350:                                              ; preds = %343
  %351 = add i32 %349, -1
  store i32 %351, i32* %348, align 4
  br label %352

352:                                              ; preds = %350, %343
  %353 = phi i32 [ %351, %350 ], [ %349, %343 ]
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %356

355:                                              ; preds = %352
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %341) #9
  br label %356

356:                                              ; preds = %334, %352, %355
  %357 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %7, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %358 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %357, align 8
  %359 = icmp eq %"class.WTF::StringImpl"* %358, null
  br i1 %359, label %373, label %360

360:                                              ; preds = %356
  %361 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %358, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %362 = load atomic i32, i32* %361 monotonic, align 4
  %363 = and i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %358, i64 0, i32 0
  %366 = load i32, i32* %365, align 4
  br i1 %364, label %367, label %369

367:                                              ; preds = %360
  %368 = add i32 %366, -1
  store i32 %368, i32* %365, align 4
  br label %369

369:                                              ; preds = %367, %360
  %370 = phi i32 [ %368, %367 ], [ %366, %360 ]
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %372, label %373

372:                                              ; preds = %369
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %358) #9
  br label %373

373:                                              ; preds = %356, %369, %372
  br i1 %242, label %387, label %374

374:                                              ; preds = %373
  %375 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %241, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %376 = load atomic i32, i32* %375 monotonic, align 4
  %377 = and i32 %376, 2
  %378 = icmp eq i32 %377, 0
  %379 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %241, i64 0, i32 0
  %380 = load i32, i32* %379, align 4
  br i1 %378, label %381, label %383

381:                                              ; preds = %374
  %382 = add i32 %380, -1
  store i32 %382, i32* %379, align 4
  br label %383

383:                                              ; preds = %381, %374
  %384 = phi i32 [ %382, %381 ], [ %380, %374 ]
  %385 = icmp eq i32 %384, 0
  br i1 %385, label %386, label %387

386:                                              ; preds = %383
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %241) #9
  br label %387

387:                                              ; preds = %373, %383, %386
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %240) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %239) #9
  br label %561

388:                                              ; preds = %229
  %389 = bitcast %"class.blink::PerformanceTiming"* %236 to i8*
  %390 = getelementptr inbounds i8, i8* %389, i64 %78
  %391 = bitcast i8* %390 to %"class.blink::PerformanceTiming"*
  %392 = and i64 %76, 1
  %393 = icmp eq i64 %392, 0
  br i1 %393, label %401, label %394

394:                                              ; preds = %388
  %395 = bitcast i8* %390 to i8**
  %396 = load i8*, i8** %395, align 8
  %397 = add i64 %76, -1
  %398 = getelementptr i8, i8* %396, i64 %397
  %399 = bitcast i8* %398 to i64 (%"class.blink::PerformanceTiming"*)**
  %400 = load i64 (%"class.blink::PerformanceTiming"*)*, i64 (%"class.blink::PerformanceTiming"*)** %399, align 8
  br label %403

401:                                              ; preds = %388
  %402 = inttoptr i64 %76 to i64 (%"class.blink::PerformanceTiming"*)*
  br label %403

403:                                              ; preds = %401, %394
  %404 = phi i64 (%"class.blink::PerformanceTiming"*)* [ %400, %394 ], [ %402, %401 ]
  %405 = tail call i64 %404(%"class.blink::PerformanceTiming"* %391) #9
  %406 = icmp eq i64 %405, 0
  br i1 %406, label %407, label %556

407:                                              ; preds = %403
  %408 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %408) #9
  %409 = bitcast %"class.WTF::StringAppend"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %409) #9
  %410 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  %411 = icmp eq %"class.WTF::StringImpl"* %410, null
  br i1 %411, label %487, label %412

412:                                              ; preds = %407
  %413 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %414 = load atomic i32, i32* %413 monotonic, align 4
  %415 = and i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 0
  %418 = load i32, i32* %417, align 4
  br i1 %416, label %419, label %429

419:                                              ; preds = %412
  %420 = zext i32 %418 to i33
  %421 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %420, i33 1) #9
  %422 = extractvalue { i33, i1 } %421, 1
  %423 = extractvalue { i33, i1 } %421, 0
  %424 = icmp slt i33 %423, 0
  %425 = or i1 %422, %424
  br i1 %425, label %426, label %427, !prof !3

426:                                              ; preds = %419
  tail call void @llvm.trap() #9
  unreachable

427:                                              ; preds = %419
  %428 = trunc i33 %423 to i32
  store i32 %428, i32* %417, align 4
  br label %429

429:                                              ; preds = %427, %412
  %430 = phi i32 [ %428, %427 ], [ %418, %412 ]
  %431 = load atomic i32, i32* %413 monotonic, align 4
  %432 = and i32 %431, 2
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %434, label %444

434:                                              ; preds = %429
  %435 = zext i32 %430 to i33
  %436 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %435, i33 1) #9
  %437 = extractvalue { i33, i1 } %436, 1
  %438 = extractvalue { i33, i1 } %436, 0
  %439 = icmp slt i33 %438, 0
  %440 = or i1 %437, %439
  br i1 %440, label %441, label %442, !prof !3

441:                                              ; preds = %434
  tail call void @llvm.trap() #9
  unreachable

442:                                              ; preds = %434
  %443 = trunc i33 %438 to i32
  store i32 %443, i32* %417, align 4
  br label %444

444:                                              ; preds = %442, %429
  %445 = phi i32 [ %443, %442 ], [ %430, %429 ]
  %446 = load atomic i32, i32* %413 monotonic, align 4
  %447 = and i32 %446, 2
  %448 = icmp eq i32 %447, 0
  br i1 %448, label %449, label %451

449:                                              ; preds = %444
  %450 = add i32 %445, -1
  store i32 %450, i32* %417, align 4
  br label %451

451:                                              ; preds = %449, %444
  %452 = phi i32 [ %450, %449 ], [ %445, %444 ]
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %454, label %455

454:                                              ; preds = %451
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %410) #9
  br label %455

455:                                              ; preds = %451, %454
  %456 = load atomic i32, i32* %413 monotonic, align 4, !noalias !10
  %457 = and i32 %456, 2
  %458 = icmp eq i32 %457, 0
  %459 = load i32, i32* %417, align 4
  br i1 %458, label %460, label %470

460:                                              ; preds = %455
  %461 = zext i32 %459 to i33
  %462 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %461, i33 1) #9
  %463 = extractvalue { i33, i1 } %462, 1
  %464 = extractvalue { i33, i1 } %462, 0
  %465 = icmp slt i33 %464, 0
  %466 = or i1 %463, %465
  br i1 %466, label %467, label %468, !prof !3

467:                                              ; preds = %460
  tail call void @llvm.trap() #9, !noalias !10
  unreachable

468:                                              ; preds = %460
  %469 = trunc i33 %464 to i32
  store i32 %469, i32* %417, align 4, !noalias !10
  br label %470

470:                                              ; preds = %455, %468
  %471 = phi i32 [ %469, %468 ], [ %459, %455 ]
  %472 = bitcast %"class.WTF::StringAppend"* %9 to i64*
  store i64 ptrtoint ([2 x i8]* @.str.5 to i64), i64* %472, align 8, !alias.scope !10
  %473 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %410, %"class.WTF::StringImpl"** %473, align 8, !alias.scope !10
  %474 = load atomic i32, i32* %413 monotonic, align 4, !noalias !10
  %475 = and i32 %474, 2
  %476 = icmp eq i32 %475, 0
  br i1 %476, label %477, label %491

477:                                              ; preds = %470
  %478 = zext i32 %471 to i33
  %479 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %478, i33 1) #9
  %480 = extractvalue { i33, i1 } %479, 1
  %481 = extractvalue { i33, i1 } %479, 0
  %482 = icmp slt i33 %481, 0
  %483 = or i1 %480, %482
  br i1 %483, label %484, label %485, !prof !3

484:                                              ; preds = %477
  tail call void @llvm.trap() #9, !noalias !10
  unreachable

485:                                              ; preds = %477
  %486 = trunc i33 %481 to i32
  store i32 %486, i32* %417, align 4, !noalias !10
  br label %491

487:                                              ; preds = %407
  %488 = bitcast %"class.WTF::StringAppend"* %9 to i64*
  store i64 ptrtoint ([2 x i8]* @.str.5 to i64), i64* %488, align 8, !alias.scope !10
  %489 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %489, align 8, !alias.scope !10
  %490 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.6, i64 0, i64 0), i8** %490, align 8, !alias.scope !10
  br label %503

491:                                              ; preds = %485, %470
  %492 = phi i32 [ %486, %485 ], [ %471, %470 ]
  %493 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.6, i64 0, i64 0), i8** %493, align 8, !alias.scope !10
  %494 = load atomic i32, i32* %413 monotonic, align 4, !noalias !10
  %495 = and i32 %494, 2
  %496 = icmp eq i32 %495, 0
  br i1 %496, label %497, label %499

497:                                              ; preds = %491
  %498 = add i32 %492, -1
  store i32 %498, i32* %417, align 4, !noalias !10
  br label %499

499:                                              ; preds = %497, %491
  %500 = phi i32 [ %498, %497 ], [ %492, %491 ]
  %501 = icmp eq i32 %500, 0
  br i1 %501, label %502, label %503

502:                                              ; preds = %499
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %410) #9, !noalias !10
  br label %503

503:                                              ; preds = %487, %499, %502
  %504 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_EcvNS_6StringEEv(%"class.WTF::StringAppend"* nonnull %9)
  %505 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %504, %"class.WTF::StringImpl"** %505, align 8
  %506 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %507 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %506, align 8
  %508 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %507, align 8
  call void %508(%"class.blink::ExceptionState"* %2, i32 15, %"class.WTF::String"* nonnull dereferenceable(8) %8) #9
  %509 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %505, align 8
  %510 = icmp eq %"class.WTF::StringImpl"* %509, null
  br i1 %510, label %524, label %511

511:                                              ; preds = %503
  %512 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %509, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %513 = load atomic i32, i32* %512 monotonic, align 4
  %514 = and i32 %513, 2
  %515 = icmp eq i32 %514, 0
  %516 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %509, i64 0, i32 0
  %517 = load i32, i32* %516, align 4
  br i1 %515, label %518, label %520

518:                                              ; preds = %511
  %519 = add i32 %517, -1
  store i32 %519, i32* %516, align 4
  br label %520

520:                                              ; preds = %518, %511
  %521 = phi i32 [ %519, %518 ], [ %517, %511 ]
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %523, label %524

523:                                              ; preds = %520
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %509) #9
  br label %524

524:                                              ; preds = %503, %520, %523
  %525 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %526 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %525, align 8
  %527 = icmp eq %"class.WTF::StringImpl"* %526, null
  br i1 %527, label %541, label %528

528:                                              ; preds = %524
  %529 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %526, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %530 = load atomic i32, i32* %529 monotonic, align 4
  %531 = and i32 %530, 2
  %532 = icmp eq i32 %531, 0
  %533 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %526, i64 0, i32 0
  %534 = load i32, i32* %533, align 4
  br i1 %532, label %535, label %537

535:                                              ; preds = %528
  %536 = add i32 %534, -1
  store i32 %536, i32* %533, align 4
  br label %537

537:                                              ; preds = %535, %528
  %538 = phi i32 [ %536, %535 ], [ %534, %528 ]
  %539 = icmp eq i32 %538, 0
  br i1 %539, label %540, label %541

540:                                              ; preds = %537
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %526) #9
  br label %541

541:                                              ; preds = %524, %537, %540
  br i1 %411, label %555, label %542

542:                                              ; preds = %541
  %543 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %544 = load atomic i32, i32* %543 monotonic, align 4
  %545 = and i32 %544, 2
  %546 = icmp eq i32 %545, 0
  %547 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 0
  %548 = load i32, i32* %547, align 4
  br i1 %546, label %549, label %551

549:                                              ; preds = %542
  %550 = add i32 %548, -1
  store i32 %550, i32* %547, align 4
  br label %551

551:                                              ; preds = %549, %542
  %552 = phi i32 [ %550, %549 ], [ %548, %542 ]
  %553 = icmp eq i32 %552, 0
  br i1 %553, label %554, label %555

554:                                              ; preds = %551
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %410) #9
  br label %555

555:                                              ; preds = %541, %551, %554
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %409) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %408) #9
  br label %561

556:                                              ; preds = %403
  %557 = uitofp i64 %405 to double
  %558 = tail call i64 @_ZNK5blink17PerformanceTiming15navigationStartEv(%"class.blink::PerformanceTiming"* nonnull %236) #9
  %559 = uitofp i64 %558 to double
  %560 = fsub double %557, %559
  br label %561

561:                                              ; preds = %228, %555, %556, %387, %12
  %562 = phi double [ %14, %12 ], [ 0.000000e+00, %228 ], [ 0.000000e+00, %387 ], [ %560, %556 ], [ 0.000000e+00, %555 ]
  ret double %562
}

declare double @_ZNK5blink16PerformanceEntry9startTimeEv(%"class.blink::PerformanceEntry"*) local_unnamed_addr #3

declare dereferenceable(24) %"class.WTF::HashMap.223"* @_ZN5blink17PerformanceTiming19GetAttributeMappingEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_EcvNS_6StringEEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.515", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.515", align 8
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = bitcast %"class.WTF::StringTypeAdapter.515"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false) #9
  %8 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.515"* nonnull %3, i8* %8) #9
  %9 = bitcast %"class.WTF::StringTypeAdapter.515"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false) #9
  %11 = load i8*, i8** %10, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.515"* nonnull %2, i8* %11) #9
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %16 = select i1 %14, %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"* %13
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #9
  br i1 %20, label %57, label %21

21:                                               ; preds = %1
  %22 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #9
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %23 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %24 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %23, i8** nonnull dereferenceable(8) %4) #9
  %25 = load i8*, i8** %4, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"* %0, i8* %25)
  %26 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %26, label %93, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  br i1 %31, label %34, label %44

34:                                               ; preds = %27
  %35 = zext i32 %33 to i33
  %36 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %35, i33 1) #9
  %37 = extractvalue { i33, i1 } %36, 1
  %38 = extractvalue { i33, i1 } %36, 0
  %39 = icmp slt i33 %38, 0
  %40 = or i1 %37, %39
  br i1 %40, label %41, label %42, !prof !3

41:                                               ; preds = %34
  call void @llvm.trap() #9
  unreachable

42:                                               ; preds = %34
  %43 = trunc i33 %38 to i32
  store i32 %43, i32* %32, align 4
  br label %44

44:                                               ; preds = %27, %42
  %45 = phi i32 [ %43, %42 ], [ %33, %27 ]
  %46 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  %47 = load atomic i32, i32* %28 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %52 = add i32 %45, -1
  store i32 %52, i32* %51, align 4
  br label %53

53:                                               ; preds = %50, %44
  %54 = phi i32 [ %52, %50 ], [ %45, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %93

56:                                               ; preds = %53
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #9
  br label %93

57:                                               ; preds = %1
  %58 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #9
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %5, align 8
  %59 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %60 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %59, i16** nonnull dereferenceable(8) %5) #9
  %61 = load i16*, i16** %5, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"* %0, i16* %61)
  %62 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %62, label %93, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  br i1 %67, label %70, label %80

70:                                               ; preds = %63
  %71 = zext i32 %69 to i33
  %72 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #9
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !3

77:                                               ; preds = %70
  call void @llvm.trap() #9
  unreachable

78:                                               ; preds = %70
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %68, align 4
  br label %80

80:                                               ; preds = %63, %78
  %81 = phi i32 [ %79, %78 ], [ %69, %63 ]
  %82 = ptrtoint %"class.WTF::StringImpl"* %60 to i64
  %83 = load atomic i32, i32* %64 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %88 = add i32 %81, -1
  store i32 %88, i32* %87, align 4
  br label %89

89:                                               ; preds = %86, %80
  %90 = phi i32 [ %88, %86 ], [ %81, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #9
  br label %93

93:                                               ; preds = %92, %89, %57, %56, %53, %21
  %94 = phi i8* [ %22, %21 ], [ %22, %53 ], [ %22, %56 ], [ %58, %57 ], [ %58, %89 ], [ %58, %92 ]
  %95 = phi i64 [ 0, %21 ], [ %46, %53 ], [ %46, %56 ], [ 0, %57 ], [ %82, %89 ], [ %82, %92 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #9
  %96 = inttoptr i64 %95 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %96
}

declare i64 @_ZNK5blink17PerformanceTiming15navigationStartEv(%"class.blink::PerformanceTiming"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN5blink10UserTiming21GetTimeOrFindMarkTimeERKN3WTF12AtomicStringEPKNS_21V8UnionDoubleOrStringERNS_14ExceptionStateE(%"class.blink::UserTiming"* nocapture readonly, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), %"class.blink::V8UnionDoubleOrString"* nocapture readonly, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca %"class.WTF::StringAppend", align 8
  %7 = alloca %"class.WTF::AtomicString", align 8
  %8 = getelementptr inbounds %"class.blink::V8UnionDoubleOrString", %"class.blink::V8UnionDoubleOrString"* %2, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %213 [
    i32 0, label %10
    i32 1, label %165
  ]

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.blink::V8UnionDoubleOrString", %"class.blink::V8UnionDoubleOrString"* %2, i64 0, i32 2
  %12 = load double, double* %11, align 8
  %13 = fcmp olt double %12, 0.000000e+00
  br i1 %13, label %14, label %213

14:                                               ; preds = %10
  %15 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #9
  %16 = bitcast %"class.WTF::StringAppend"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #9
  %17 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %95, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  br i1 %24, label %27, label %37

27:                                               ; preds = %20
  %28 = zext i32 %26 to i33
  %29 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %28, i33 1) #9
  %30 = extractvalue { i33, i1 } %29, 1
  %31 = extractvalue { i33, i1 } %29, 0
  %32 = icmp slt i33 %31, 0
  %33 = or i1 %30, %32
  br i1 %33, label %34, label %35, !prof !3

34:                                               ; preds = %27
  tail call void @llvm.trap() #9
  unreachable

35:                                               ; preds = %27
  %36 = trunc i33 %31 to i32
  store i32 %36, i32* %25, align 4
  br label %37

37:                                               ; preds = %35, %20
  %38 = phi i32 [ %36, %35 ], [ %26, %20 ]
  %39 = load atomic i32, i32* %21 monotonic, align 4
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %52

42:                                               ; preds = %37
  %43 = zext i32 %38 to i33
  %44 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #9
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !3

49:                                               ; preds = %42
  tail call void @llvm.trap() #9
  unreachable

50:                                               ; preds = %42
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %25, align 4
  br label %52

52:                                               ; preds = %50, %37
  %53 = phi i32 [ %51, %50 ], [ %38, %37 ]
  %54 = load atomic i32, i32* %21 monotonic, align 4
  %55 = and i32 %54, 2
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %52
  %58 = add i32 %53, -1
  store i32 %58, i32* %25, align 4
  br label %59

59:                                               ; preds = %57, %52
  %60 = phi i32 [ %58, %57 ], [ %53, %52 ]
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %59
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #9
  br label %63

63:                                               ; preds = %59, %62
  %64 = load atomic i32, i32* %21 monotonic, align 4, !noalias !13
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = load i32, i32* %25, align 4
  br i1 %66, label %68, label %78

68:                                               ; preds = %63
  %69 = zext i32 %67 to i33
  %70 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %69, i33 1) #9
  %71 = extractvalue { i33, i1 } %70, 1
  %72 = extractvalue { i33, i1 } %70, 0
  %73 = icmp slt i33 %72, 0
  %74 = or i1 %71, %73
  br i1 %74, label %75, label %76, !prof !3

75:                                               ; preds = %68
  tail call void @llvm.trap() #9, !noalias !13
  unreachable

76:                                               ; preds = %68
  %77 = trunc i33 %72 to i32
  store i32 %77, i32* %25, align 4, !noalias !13
  br label %78

78:                                               ; preds = %63, %76
  %79 = phi i32 [ %77, %76 ], [ %67, %63 ]
  %80 = bitcast %"class.WTF::StringAppend"* %6 to i64*
  store i64 ptrtoint ([2 x i8]* @.str.5 to i64), i64* %80, align 8, !alias.scope !13
  %81 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %18, %"class.WTF::StringImpl"** %81, align 8, !alias.scope !13
  %82 = load atomic i32, i32* %21 monotonic, align 4, !noalias !13
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %99

85:                                               ; preds = %78
  %86 = zext i32 %79 to i33
  %87 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %86, i33 1) #9
  %88 = extractvalue { i33, i1 } %87, 1
  %89 = extractvalue { i33, i1 } %87, 0
  %90 = icmp slt i33 %89, 0
  %91 = or i1 %88, %90
  br i1 %91, label %92, label %93, !prof !3

92:                                               ; preds = %85
  tail call void @llvm.trap() #9, !noalias !13
  unreachable

93:                                               ; preds = %85
  %94 = trunc i33 %89 to i32
  store i32 %94, i32* %25, align 4, !noalias !13
  br label %99

95:                                               ; preds = %14
  %96 = bitcast %"class.WTF::StringAppend"* %6 to i64*
  store i64 ptrtoint ([2 x i8]* @.str.5 to i64), i64* %96, align 8, !alias.scope !13
  %97 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %97, align 8, !alias.scope !13
  %98 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %6, i64 0, i32 1
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7, i64 0, i64 0), i8** %98, align 8, !alias.scope !13
  br label %111

99:                                               ; preds = %93, %78
  %100 = phi i32 [ %94, %93 ], [ %79, %78 ]
  %101 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %6, i64 0, i32 1
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7, i64 0, i64 0), i8** %101, align 8, !alias.scope !13
  %102 = load atomic i32, i32* %21 monotonic, align 4, !noalias !13
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %107

105:                                              ; preds = %99
  %106 = add i32 %100, -1
  store i32 %106, i32* %25, align 4, !noalias !13
  br label %107

107:                                              ; preds = %105, %99
  %108 = phi i32 [ %106, %105 ], [ %100, %99 ]
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %111

110:                                              ; preds = %107
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #9, !noalias !13
  br label %111

111:                                              ; preds = %95, %107, %110
  %112 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_EcvNS_6StringEEv(%"class.WTF::StringAppend"* nonnull %6)
  %113 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %112, %"class.WTF::StringImpl"** %113, align 8
  %114 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)***
  %115 = load void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)*** %114, align 8
  %116 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)** %115, i64 3
  %117 = load void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, %"class.WTF::String"*)** %116, align 8
  call void %117(%"class.blink::ExceptionState"* %3, %"class.WTF::String"* nonnull dereferenceable(8) %5) #9
  %118 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %113, align 8
  %119 = icmp eq %"class.WTF::StringImpl"* %118, null
  br i1 %119, label %133, label %120

120:                                              ; preds = %111
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %118, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = load atomic i32, i32* %121 monotonic, align 4
  %123 = and i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %118, i64 0, i32 0
  %126 = load i32, i32* %125, align 4
  br i1 %124, label %127, label %129

127:                                              ; preds = %120
  %128 = add i32 %126, -1
  store i32 %128, i32* %125, align 4
  br label %129

129:                                              ; preds = %127, %120
  %130 = phi i32 [ %128, %127 ], [ %126, %120 ]
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %133

132:                                              ; preds = %129
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %118) #9
  br label %133

133:                                              ; preds = %111, %129, %132
  %134 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %6, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %135 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %134, align 8
  %136 = icmp eq %"class.WTF::StringImpl"* %135, null
  br i1 %136, label %150, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %135, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %139 = load atomic i32, i32* %138 monotonic, align 4
  %140 = and i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %135, i64 0, i32 0
  %143 = load i32, i32* %142, align 4
  br i1 %141, label %144, label %146

144:                                              ; preds = %137
  %145 = add i32 %143, -1
  store i32 %145, i32* %142, align 4
  br label %146

146:                                              ; preds = %144, %137
  %147 = phi i32 [ %145, %144 ], [ %143, %137 ]
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %150

149:                                              ; preds = %146
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %135) #9
  br label %150

150:                                              ; preds = %133, %146, %149
  br i1 %19, label %164, label %151

151:                                              ; preds = %150
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %153 = load atomic i32, i32* %152 monotonic, align 4
  %154 = and i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %157 = load i32, i32* %156, align 4
  br i1 %155, label %158, label %160

158:                                              ; preds = %151
  %159 = add i32 %157, -1
  store i32 %159, i32* %156, align 4
  br label %160

160:                                              ; preds = %158, %151
  %161 = phi i32 [ %159, %158 ], [ %157, %151 ]
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %164

163:                                              ; preds = %160
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #9
  br label %164

164:                                              ; preds = %150, %160, %163
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #9
  br label %213

165:                                              ; preds = %4
  %166 = bitcast %"class.WTF::AtomicString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %166) #9
  %167 = getelementptr inbounds %"class.blink::V8UnionDoubleOrString", %"class.blink::V8UnionDoubleOrString"* %2, i64 0, i32 3, i32 0, i32 0
  %168 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %167, align 8
  %169 = icmp eq %"class.WTF::StringImpl"* %168, null
  br i1 %169, label %193, label %170

170:                                              ; preds = %165
  %171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %168, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %172 = load atomic i32, i32* %171 acquire, align 4
  %173 = and i32 %172, 4
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %191, label %175

175:                                              ; preds = %170
  %176 = load atomic i32, i32* %171 monotonic, align 4
  %177 = and i32 %176, 2
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %193

179:                                              ; preds = %175
  %180 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %168, i64 0, i32 0
  %181 = load i32, i32* %180, align 4
  %182 = zext i32 %181 to i33
  %183 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %182, i33 1) #9
  %184 = extractvalue { i33, i1 } %183, 1
  %185 = extractvalue { i33, i1 } %183, 0
  %186 = icmp slt i33 %185, 0
  %187 = or i1 %184, %186
  br i1 %187, label %188, label %189, !prof !3

188:                                              ; preds = %179
  tail call void @llvm.trap() #9
  unreachable

189:                                              ; preds = %179
  %190 = trunc i33 %185 to i32
  store i32 %190, i32* %180, align 4
  br label %193

191:                                              ; preds = %170
  %192 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %168) #9
  br label %193

193:                                              ; preds = %165, %175, %189, %191
  %194 = phi %"class.WTF::StringImpl"* [ %192, %191 ], [ %168, %175 ], [ %168, %189 ], [ null, %165 ]
  %195 = ptrtoint %"class.WTF::StringImpl"* %194 to i64
  %196 = bitcast %"class.WTF::AtomicString"* %7 to i64*
  store i64 %195, i64* %196, align 8
  %197 = call double @_ZN5blink10UserTiming25FindExistingMarkStartTimeERKN3WTF12AtomicStringERNS_14ExceptionStateE(%"class.blink::UserTiming"* %0, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %7, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %198 = icmp eq %"class.WTF::StringImpl"* %194, null
  br i1 %198, label %212, label %199

199:                                              ; preds = %193
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %194, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %201 = load atomic i32, i32* %200 monotonic, align 4
  %202 = and i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %194, i64 0, i32 0
  %205 = load i32, i32* %204, align 4
  br i1 %203, label %206, label %208

206:                                              ; preds = %199
  %207 = add i32 %205, -1
  store i32 %207, i32* %204, align 4
  br label %208

208:                                              ; preds = %206, %199
  %209 = phi i32 [ %207, %206 ], [ %205, %199 ]
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %212

211:                                              ; preds = %208
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %194) #9
  br label %212

212:                                              ; preds = %193, %208, %211
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %166) #9
  br label %213

213:                                              ; preds = %4, %10, %164, %212
  %214 = phi double [ %197, %212 ], [ %12, %164 ], [ %12, %10 ], [ 0.000000e+00, %4 ]
  ret double %214
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN5blink10UserTiming37GetPerformanceMarkUnsafeTimeForTracesEdPKNS_21V8UnionDoubleOrStringE(%"class.blink::UserTiming"* nocapture readonly, double, %"class.blink::V8UnionDoubleOrString"* readonly) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = icmp eq %"class.blink::V8UnionDoubleOrString"* %2, null
  br i1 %5, label %62, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.blink::V8UnionDoubleOrString", %"class.blink::V8UnionDoubleOrString"* %2, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %62

10:                                               ; preds = %6
  %11 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #9
  %12 = getelementptr inbounds %"class.blink::V8UnionDoubleOrString", %"class.blink::V8UnionDoubleOrString"* %2, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %14, label %38, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 acquire, align 4
  %18 = and i32 %17, 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %36, label %20

20:                                               ; preds = %15
  %21 = load atomic i32, i32* %16 monotonic, align 4
  %22 = and i32 %21, 2
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %38

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i33
  %28 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %27, i33 1) #9
  %29 = extractvalue { i33, i1 } %28, 1
  %30 = extractvalue { i33, i1 } %28, 0
  %31 = icmp slt i33 %30, 0
  %32 = or i1 %29, %31
  br i1 %32, label %33, label %34, !prof !3

33:                                               ; preds = %24
  tail call void @llvm.trap() #9
  unreachable

34:                                               ; preds = %24
  %35 = trunc i33 %30 to i32
  store i32 %35, i32* %25, align 4
  br label %38

36:                                               ; preds = %15
  %37 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %13) #9
  br label %38

38:                                               ; preds = %10, %20, %34, %36
  %39 = phi %"class.WTF::StringImpl"* [ %37, %36 ], [ %13, %20 ], [ %13, %34 ], [ null, %10 ]
  %40 = ptrtoint %"class.WTF::StringImpl"* %39 to i64
  %41 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  store i64 %40, i64* %41, align 8
  %42 = call %"class.blink::PerformanceMark"* @_ZN5blink10UserTiming16FindExistingMarkERKN3WTF12AtomicStringE(%"class.blink::UserTiming"* %0, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4)
  %43 = icmp eq %"class.WTF::StringImpl"* %39, null
  br i1 %43, label %57, label %44

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  br i1 %48, label %51, label %53

51:                                               ; preds = %44
  %52 = add i32 %50, -1
  store i32 %52, i32* %49, align 4
  br label %53

53:                                               ; preds = %51, %44
  %54 = phi i32 [ %52, %51 ], [ %50, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %39) #9
  br label %57

57:                                               ; preds = %38, %53, %56
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #9
  %58 = icmp eq %"class.blink::PerformanceMark"* %42, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %"class.blink::PerformanceMark", %"class.blink::PerformanceMark"* %42, i64 0, i32 3, i32 0, i32 0
  %61 = load i64, i64* %60, align 8
  br label %87

62:                                               ; preds = %57, %3, %6
  %63 = fdiv double %1, 1.000000e+03
  %64 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 0, i32 0, i32 0
  %65 = load %"class.blink::Performance"*, %"class.blink::Performance"** %64, align 8
  %66 = getelementptr inbounds %"class.blink::Performance", %"class.blink::Performance"* %65, i64 0, i32 18, i32 0, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = add i64 %67, -9223372036854775807
  %69 = icmp ult i64 %68, 2
  br i1 %69, label %73, label %70

70:                                               ; preds = %62
  %71 = sitofp i64 %67 to double
  %72 = fdiv double %71, 1.000000e+06
  br label %76

73:                                               ; preds = %62
  %74 = icmp slt i64 %67, 0
  %75 = select i1 %74, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %76

76:                                               ; preds = %70, %73
  %77 = phi double [ %75, %73 ], [ %72, %70 ]
  %78 = fadd double %63, %77
  %79 = fmul double %78, 1.000000e+06
  %80 = fcmp ult double %79, 0xC3E0000000000000
  %81 = fcmp ugt double %79, 0x43DFFFFFFFFFFFFF
  %82 = fcmp ogt double %79, 0xC3E0000000000000
  %83 = select i1 %82, double %79, double 0xC3E0000000000000
  %84 = fptosi double %83 to i64
  %85 = select i1 %80, i64 0, i64 9223372036854775807
  %86 = select i1 %81, i64 %85, i64 %84
  br label %87

87:                                               ; preds = %59, %76
  %88 = phi i64 [ %86, %76 ], [ %61, %59 ]
  ret i64 %88
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::PerformanceMeasure"* @_ZN5blink10UserTiming7MeasureEPNS_11ScriptStateERKN3WTF12AtomicStringEPKNS_21V8UnionDoubleOrStringERKN4absl8optionalIdEES9_RKNS_11ScriptValueERNS_14ExceptionStateE(%"class.blink::UserTiming"*, %"class.blink::ScriptState"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::V8UnionDoubleOrString"*, %"class.absl::optional.441"* nocapture readonly dereferenceable(16), %"class.blink::V8UnionDoubleOrString"*, %"class.blink::ScriptValue"* dereferenceable(24), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %9 = alloca %"class.base::TimeTicks", align 8
  %10 = alloca %"class.base::TimeTicks", align 8
  %11 = alloca %"class.std::__1::basic_string", align 8
  %12 = alloca %"class.std::__1::basic_string", align 8
  %13 = icmp ne %"class.blink::V8UnionDoubleOrString"* %3, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %8
  %15 = tail call double @_ZN5blink10UserTiming21GetTimeOrFindMarkTimeERKN3WTF12AtomicStringEPKNS_21V8UnionDoubleOrStringERNS_14ExceptionStateE(%"class.blink::UserTiming"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %2, %"class.blink::V8UnionDoubleOrString"* nonnull %3, %"class.blink::ExceptionState"* dereferenceable(72) %7)
  br label %16

16:                                               ; preds = %8, %14
  %17 = phi double [ %15, %14 ], [ 0.000000e+00, %8 ]
  %18 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %7, i64 0, i32 4
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %149

21:                                               ; preds = %16
  %22 = icmp eq %"class.blink::V8UnionDoubleOrString"* %5, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %21
  %24 = tail call double @_ZN5blink10UserTiming21GetTimeOrFindMarkTimeERKN3WTF12AtomicStringEPKNS_21V8UnionDoubleOrStringERNS_14ExceptionStateE(%"class.blink::UserTiming"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %2, %"class.blink::V8UnionDoubleOrString"* nonnull %5, %"class.blink::ExceptionState"* dereferenceable(72) %7)
  br label %29

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 0, i32 0, i32 0
  %27 = load %"class.blink::Performance"*, %"class.blink::Performance"** %26, align 8
  %28 = tail call double @_ZNK5blink11Performance3nowEv(%"class.blink::Performance"* %27) #9
  br label %29

29:                                               ; preds = %25, %23
  %30 = phi double [ %24, %23 ], [ %28, %25 ]
  %31 = load i32, i32* %18, align 8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %149

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.absl::optional.441", %"class.absl::optional.441"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8, i8* %34, align 8, !range !16
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.absl::optional.441", %"class.absl::optional.441"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %39 = load double, double* %38, align 8
  br i1 %13, label %42, label %40

40:                                               ; preds = %37
  %41 = fsub double %30, %39
  br label %44

42:                                               ; preds = %37
  %43 = fadd double %17, %39
  br label %44

44:                                               ; preds = %33, %40, %42
  %45 = phi double [ %43, %42 ], [ %30, %40 ], [ %30, %33 ]
  %46 = phi double [ %17, %42 ], [ %41, %40 ], [ %17, %33 ]
  %47 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 16, i32 0), align 16
  %48 = and i8 %47, 9
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %143, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.base::TimeTicks"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #9
  %52 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %9, i64 0, i32 0, i32 0
  %53 = tail call i64 @_ZN5blink10UserTiming37GetPerformanceMarkUnsafeTimeForTracesEdPKNS_21V8UnionDoubleOrStringE(%"class.blink::UserTiming"* %0, double %46, %"class.blink::V8UnionDoubleOrString"* %3)
  store i64 %53, i64* %52, align 8
  %54 = bitcast %"class.base::TimeTicks"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %54) #9
  %55 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %10, i64 0, i32 0, i32 0
  %56 = tail call i64 @_ZN5blink10UserTiming37GetPerformanceMarkUnsafeTimeForTracesEdPKNS_21V8UnionDoubleOrStringE(%"class.blink::UserTiming"* %0, double %45, %"class.blink::V8UnionDoubleOrString"* %5)
  store i64 %56, i64* %55, align 8
  %57 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  %58 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = lshr i32 %61, 8
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %50
  %65 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %59) #9
  br label %66

66:                                               ; preds = %50, %64
  %67 = phi i32 [ %65, %64 ], [ %62, %50 ]
  %68 = fptrunc double %46 to float
  %69 = bitcast float %68 to i32
  %70 = shl i32 %69, 15
  %71 = xor i32 %70, -1
  %72 = add i32 %71, %69
  %73 = lshr i32 %72, 10
  %74 = xor i32 %73, %72
  %75 = mul i32 %74, 9
  %76 = lshr i32 %75, 6
  %77 = xor i32 %76, %75
  %78 = shl i32 %77, 11
  %79 = xor i32 %78, -1
  %80 = add i32 %77, %79
  %81 = lshr i32 %80, 16
  %82 = xor i32 %81, %80
  %83 = mul i32 %67, 33
  %84 = add i32 %83, %82
  %85 = fptrunc double %45 to float
  %86 = bitcast float %85 to i32
  %87 = shl i32 %86, 15
  %88 = xor i32 %87, -1
  %89 = add i32 %88, %86
  %90 = lshr i32 %89, 10
  %91 = xor i32 %90, %89
  %92 = mul i32 %91, 9
  %93 = lshr i32 %92, 6
  %94 = xor i32 %93, %92
  %95 = shl i32 %94, 11
  %96 = xor i32 %95, -1
  %97 = add i32 %94, %96
  %98 = lshr i32 %97, 16
  %99 = xor i32 %98, %97
  %100 = mul i32 %84, 33
  %101 = add i32 %100, %99
  %102 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 16, i32 0), align 16
  %103 = and i8 %102, 25
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %142, label %105, !prof !2

105:                                              ; preds = %66
  %106 = zext i32 %101 to i64
  %107 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %107) #9
  call void @_ZNK3WTF6String4Utf8ENS_18UTF8ConversionModeE(%"class.std::__1::basic_string"* nonnull sret %11, %"class.WTF::String"* %57, i32 0) #9
  %108 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %109 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %108, i64 0, i32 1, i32 0
  %110 = load i8, i8* %109, align 1
  %111 = icmp slt i8 %110, 0
  %112 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = select i1 %111, i8* %113, i8* %107
  %115 = call i32 @_ZN4base14PlatformThread9CurrentIdEv() #9
  %116 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 98, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 16, i32 0), i8* %114, i8* null, i64 %106, i64 0, i32 %115, %"class.base::TimeTicks"* nonnull dereferenceable(8) %9, %"class.base::trace_event::TraceArguments"* null, i32 19) #9
  %117 = load i8, i8* %109, align 1
  %118 = icmp slt i8 %117, 0
  br i1 %118, label %119, label %121

119:                                              ; preds = %105
  %120 = load i8*, i8** %112, align 8
  call void @_ZdlPv(i8* %120) #10
  br label %121

121:                                              ; preds = %119, %105
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %107) #9
  %122 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 16, i32 0), align 16
  %123 = and i8 %122, 25
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %142, label %125, !prof !2

125:                                              ; preds = %121
  %126 = zext i32 %101 to i64
  %127 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %127) #9
  call void @_ZNK3WTF6String4Utf8ENS_18UTF8ConversionModeE(%"class.std::__1::basic_string"* nonnull sret %12, %"class.WTF::String"* %57, i32 0) #9
  %128 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %129 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %128, i64 0, i32 1, i32 0
  %130 = load i8, i8* %129, align 1
  %131 = icmp slt i8 %130, 0
  %132 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load i8*, i8** %132, align 8
  %134 = select i1 %131, i8* %133, i8* %127
  %135 = call i32 @_ZN4base14PlatformThread9CurrentIdEv() #9
  %136 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 101, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 16, i32 0), i8* %134, i8* null, i64 %126, i64 0, i32 %135, %"class.base::TimeTicks"* nonnull dereferenceable(8) %10, %"class.base::trace_event::TraceArguments"* null, i32 19) #9
  %137 = load i8, i8* %129, align 1
  %138 = icmp slt i8 %137, 0
  br i1 %138, label %139, label %141

139:                                              ; preds = %125
  %140 = load i8*, i8** %132, align 8
  call void @_ZdlPv(i8* %140) #10
  br label %141

141:                                              ; preds = %125, %139
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %127) #9
  br label %142

142:                                              ; preds = %66, %121, %141
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %54) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #9
  br label %143

143:                                              ; preds = %44, %142
  %144 = call %"class.blink::PerformanceMeasure"* @_ZN5blink18PerformanceMeasure6CreateEPNS_11ScriptStateERKN3WTF12AtomicStringEddRKNS_11ScriptValueERNS_14ExceptionStateE(%"class.blink::ScriptState"* %1, %"class.WTF::AtomicString"* dereferenceable(8) %2, double %46, double %45, %"class.blink::ScriptValue"* dereferenceable(24) %6, %"class.blink::ExceptionState"* dereferenceable(72) %7) #9
  %145 = icmp eq %"class.blink::PerformanceMeasure"* %144, null
  br i1 %145, label %149, label %146

146:                                              ; preds = %143
  %147 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 2
  %148 = bitcast %"class.blink::PerformanceMeasure"* %144 to %"class.blink::PerformanceEntry"*
  call fastcc void @_ZN5blink12_GLOBAL__N_122InsertPerformanceEntryERNS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberINS_10HeapVectorINS4_INS_16PerformanceEntryEEELj0EEEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENSB_IS9_EEEERS6_(%"class.blink::HeapHashMap"* dereferenceable(24) %147, %"class.blink::PerformanceEntry"* nonnull dereferenceable(48) %148)
  br label %149

149:                                              ; preds = %29, %16, %143, %146
  %150 = phi %"class.blink::PerformanceMeasure"* [ null, %16 ], [ null, %29 ], [ %144, %146 ], [ null, %143 ]
  ret %"class.blink::PerformanceMeasure"* %150
}

declare double @_ZNK5blink11Performance3nowEv(%"class.blink::Performance"*) local_unnamed_addr #3

declare i32 @_ZN4base14PlatformThread9CurrentIdEv() local_unnamed_addr #3

declare %"class.blink::PerformanceMeasure"* @_ZN5blink18PerformanceMeasure6CreateEPNS_11ScriptStateERKN3WTF12AtomicStringEddRKNS_11ScriptValueERNS_14ExceptionStateE(%"class.blink::ScriptState"*, %"class.WTF::AtomicString"* dereferenceable(8), double, double, %"class.blink::ScriptValue"* dereferenceable(24), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10UserTiming13ClearMeasuresERKN3WTF12AtomicStringE(%"class.blink::UserTiming"*, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  %6 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 2, i32 0
  %7 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %6, i64 0, i32 0, i32 0
  %8 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %7, align 8
  %9 = icmp eq %"struct.WTF::KeyValuePair"* %8, null
  br i1 %5, label %10, label %47

10:                                               ; preds = %2
  br i1 %9, label %153, label %11

11:                                               ; preds = %10
  %12 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %43, label %15

15:                                               ; preds = %11
  %16 = zext i32 %13 to i64
  br label %17

17:                                               ; preds = %40, %15
  %18 = phi i64 [ 0, %15 ], [ %41, %40 ]
  %19 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %18
  %20 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %19, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  switch i64 %22, label %23 [
    i64 -1, label %40
    i64 0, label %40
  ]

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  br i1 %27, label %30, label %32

30:                                               ; preds = %23
  %31 = add i32 %29, -1
  store i32 %31, i32* %28, align 4
  br label %32

32:                                               ; preds = %30, %23
  %33 = phi i32 [ %31, %30 ], [ %29, %23 ]
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %21) #9
  br label %36

36:                                               ; preds = %35, %32
  %37 = bitcast %"struct.WTF::KeyValuePair"* %19 to i8**
  store i8* inttoptr (i64 -1 to i8*), i8** %37, align 8
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %18, i32 1
  %39 = bitcast %"class.blink::Member.3"* %38 to i64*
  store atomic i64 0, i64* %39 monotonic, align 8
  br label %40

40:                                               ; preds = %36, %17, %17
  %41 = add nuw nsw i64 %18, 1
  %42 = icmp eq i64 %41, %16
  br i1 %42, label %43, label %17

43:                                               ; preds = %40, %11
  %44 = bitcast %"struct.WTF::KeyValuePair"* %8 to i8*
  tail call void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8* nonnull %44) #9
  %45 = bitcast %"class.WTF::HashMap"* %6 to i64*
  store atomic i64 0, i64* %45 monotonic, align 8
  store i32 0, i32* %12, align 8
  %46 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  store i32 0, i32* %46, align 4
  br label %153

47:                                               ; preds = %2
  br i1 %9, label %153, label %48

48:                                               ; preds = %47
  %49 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %50 = load i32, i32* %49, align 8
  %51 = add i32 %50, -1
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load atomic i32, i32* %53 monotonic, align 4
  %55 = lshr i32 %54, 8
  %56 = and i32 %55, %51
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %58, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %153, label %62

62:                                               ; preds = %48
  %63 = xor i32 %55, -1
  %64 = lshr i32 %54, 31
  %65 = add nsw i32 %64, %63
  %66 = shl i32 %65, 12
  %67 = xor i32 %66, %65
  %68 = lshr i32 %67, 7
  %69 = xor i32 %68, %67
  %70 = shl i32 %69, 2
  %71 = xor i32 %70, %69
  %72 = lshr i32 %71, 20
  %73 = xor i32 %72, %71
  %74 = or i32 %73, 1
  %75 = zext i32 %74 to i64
  br label %76

76:                                               ; preds = %86, %62
  %77 = phi %"struct.WTF::KeyValuePair"* [ %58, %62 ], [ %91, %86 ]
  %78 = phi i64 [ %57, %62 ], [ %90, %86 ]
  %79 = phi i64 [ 0, %62 ], [ %88, %86 ]
  %80 = bitcast %"struct.WTF::KeyValuePair"* %77 to i8**
  %81 = load i8*, i8** %80, align 8
  %82 = icmp ne i8* %81, inttoptr (i64 -1 to i8*)
  %83 = bitcast i8* %81 to %"class.WTF::StringImpl"*
  %84 = icmp eq %"class.WTF::StringImpl"* %4, %83
  %85 = and i1 %82, %84
  br i1 %85, label %95, label %86

86:                                               ; preds = %76
  %87 = icmp eq i64 %79, 0
  %88 = select i1 %87, i64 %75, i64 %79
  %89 = add i64 %88, %78
  %90 = and i64 %89, %52
  %91 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %90
  %92 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %91, i64 0, i32 0, i32 0, i32 0, i32 0
  %93 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %92, align 8
  %94 = icmp eq %"class.WTF::StringImpl"* %93, null
  br i1 %94, label %153, label %76

95:                                               ; preds = %76
  %96 = icmp eq %"struct.WTF::KeyValuePair"* %77, null
  br i1 %96, label %153, label %97

97:                                               ; preds = %95
  %98 = load atomic i32, i32* %53 monotonic, align 4
  %99 = lshr i32 %98, 8
  %100 = and i32 %99, %51
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %101
  %103 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %102, i64 0, i32 0, i32 0, i32 0, i32 0
  %104 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  %105 = icmp eq %"class.WTF::StringImpl"* %104, null
  br i1 %105, label %143, label %106

106:                                              ; preds = %97
  %107 = xor i32 %99, -1
  %108 = lshr i32 %98, 31
  %109 = add nsw i32 %108, %107
  %110 = shl i32 %109, 12
  %111 = xor i32 %110, %109
  %112 = lshr i32 %111, 7
  %113 = xor i32 %112, %111
  %114 = shl i32 %113, 2
  %115 = xor i32 %114, %113
  %116 = lshr i32 %115, 20
  %117 = xor i32 %116, %115
  %118 = or i32 %117, 1
  %119 = zext i32 %118 to i64
  br label %120

120:                                              ; preds = %130, %106
  %121 = phi %"struct.WTF::KeyValuePair"* [ %102, %106 ], [ %135, %130 ]
  %122 = phi i64 [ %101, %106 ], [ %134, %130 ]
  %123 = phi i64 [ 0, %106 ], [ %132, %130 ]
  %124 = bitcast %"struct.WTF::KeyValuePair"* %121 to i8**
  %125 = load i8*, i8** %124, align 8
  %126 = icmp ne i8* %125, inttoptr (i64 -1 to i8*)
  %127 = bitcast i8* %125 to %"class.WTF::StringImpl"*
  %128 = icmp eq %"class.WTF::StringImpl"* %4, %127
  %129 = and i1 %126, %128
  br i1 %129, label %139, label %130

130:                                              ; preds = %120
  %131 = icmp eq i64 %123, 0
  %132 = select i1 %131, i64 %119, i64 %123
  %133 = add i64 %132, %122
  %134 = and i64 %133, %52
  %135 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %134
  %136 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %135, i64 0, i32 0, i32 0, i32 0, i32 0
  %137 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %136, align 8
  %138 = icmp eq %"class.WTF::StringImpl"* %137, null
  br i1 %138, label %143, label %120

139:                                              ; preds = %120
  %140 = icmp eq %"struct.WTF::KeyValuePair"* %121, null
  br i1 %140, label %143, label %141

141:                                              ; preds = %139
  %142 = zext i32 %50 to i64
  br label %146

143:                                              ; preds = %130, %139, %97
  %144 = zext i32 %50 to i64
  %145 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %144
  br label %146

146:                                              ; preds = %143, %141
  %147 = phi i64 [ %142, %141 ], [ %144, %143 ]
  %148 = phi %"struct.WTF::KeyValuePair"* [ %121, %141 ], [ %145, %143 ]
  %149 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %147
  %150 = icmp eq %"struct.WTF::KeyValuePair"* %149, %148
  br i1 %150, label %153, label %151

151:                                              ; preds = %146
  %152 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %6, i64 0, i32 0
  tail call void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE5eraseEPKSA_(%"class.WTF::HashTable"* %152, %"struct.WTF::KeyValuePair"* %148) #9
  br label %153

153:                                              ; preds = %86, %95, %48, %47, %151, %146, %43, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink10UserTiming8GetMarksEv(%"class.blink::HeapVector"* noalias sret, %"class.blink::UserTiming"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::HeapVector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false) #9, !alias.scope !17
  %4 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4, !noalias !17
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %8 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %7, align 8, !noalias !17
  %9 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8, !noalias !17
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %11
  br i1 %6, label %46, label %13

13:                                               ; preds = %2
  %14 = icmp eq i32 %10, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %13, %19
  %16 = phi %"struct.WTF::KeyValuePair"* [ %20, %19 ], [ %8, %13 ]
  %17 = bitcast %"struct.WTF::KeyValuePair"* %16 to i64*
  %18 = load i64, i64* %17, align 8
  switch i64 %18, label %22 [
    i64 -1, label %19
    i64 0, label %19
  ]

19:                                               ; preds = %15, %15
  %20 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %16, i64 1
  %21 = icmp eq %"struct.WTF::KeyValuePair"* %20, %12
  br i1 %21, label %46, label %15

22:                                               ; preds = %15, %13
  %23 = phi %"struct.WTF::KeyValuePair"* [ %8, %13 ], [ %16, %15 ]
  %24 = icmp eq %"struct.WTF::KeyValuePair"* %23, %12
  br i1 %24, label %46, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %0, i64 0, i32 0
  br label %27

27:                                               ; preds = %44, %25
  %28 = phi %"struct.WTF::KeyValuePair"* [ %23, %25 ], [ %38, %44 ]
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %28, i64 0, i32 1, i32 0, i32 0
  %30 = load %"class.blink::HeapVector"*, %"class.blink::HeapVector"** %29, align 8
  %31 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %30, i64 0, i32 0, i32 0, i32 0, i32 0
  %32 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %31, align 8
  %33 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %30, i64 0, i32 0, i32 0, i32 0, i32 2
  %34 = load i32, i32* %33, align 4
  tail call void @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE6AppendIS4_EEvPKT_j(%"class.WTF::Vector"* %26, %"class.blink::Member.7"* %32, i32 %34) #9
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %28, i64 1
  %36 = icmp eq %"struct.WTF::KeyValuePair"* %35, %12
  br i1 %36, label %46, label %37

37:                                               ; preds = %27, %41
  %38 = phi %"struct.WTF::KeyValuePair"* [ %42, %41 ], [ %35, %27 ]
  %39 = bitcast %"struct.WTF::KeyValuePair"* %38 to i64*
  %40 = load i64, i64* %39, align 8
  switch i64 %40, label %44 [
    i64 -1, label %41
    i64 0, label %41
  ]

41:                                               ; preds = %37, %37
  %42 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %38, i64 1
  %43 = icmp eq %"struct.WTF::KeyValuePair"* %42, %12
  br i1 %43, label %46, label %37

44:                                               ; preds = %37
  %45 = icmp eq %"struct.WTF::KeyValuePair"* %38, %12
  br i1 %45, label %46, label %27

46:                                               ; preds = %19, %27, %44, %41, %2, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink10UserTiming8GetMarksERKN3WTF12AtomicStringE(%"class.blink::HeapVector"* noalias sret, %"class.blink::UserTiming"* nocapture readonly, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %1, i64 0, i32 1
  tail call fastcc void @_ZN5blinkL22GetEntrySequenceByNameERKNS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberINS_10HeapVectorINS3_INS_16PerformanceEntryEEELj0EEEEENS1_16AtomicStringHashENS1_10HashTraitsIS2_EENSA_IS8_EEEERKS2_(%"class.blink::HeapVector"* sret %0, %"class.blink::HeapHashMap"* dereferenceable(24) %4, %"class.WTF::AtomicString"* dereferenceable(8) %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN5blinkL22GetEntrySequenceByNameERKNS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberINS_10HeapVectorINS3_INS_16PerformanceEntryEEELj0EEEEENS1_16AtomicStringHashENS1_10HashTraitsIS2_EENSA_IS8_EEEERKS2_(%"class.blink::HeapVector"* noalias sret, %"class.blink::HeapHashMap"* nocapture readonly dereferenceable(24), %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) unnamed_addr #0 {
  %4 = bitcast %"class.blink::HeapVector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false) #9
  %5 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %5, align 8
  %7 = icmp eq %"struct.WTF::KeyValuePair"* %6, null
  %8 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %1, i64 0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  br i1 %7, label %61, label %10

10:                                               ; preds = %3
  %11 = add i32 %9, -1
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = lshr i32 %16, 8
  %18 = and i32 %17, %11
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %6, i64 %19
  %21 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %20, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %22, null
  br i1 %23, label %61, label %24

24:                                               ; preds = %10
  %25 = xor i32 %17, -1
  %26 = lshr i32 %16, 31
  %27 = add nsw i32 %26, %25
  %28 = shl i32 %27, 12
  %29 = xor i32 %28, %27
  %30 = lshr i32 %29, 7
  %31 = xor i32 %30, %29
  %32 = shl i32 %31, 2
  %33 = xor i32 %32, %31
  %34 = lshr i32 %33, 20
  %35 = xor i32 %34, %33
  %36 = or i32 %35, 1
  %37 = zext i32 %36 to i64
  br label %38

38:                                               ; preds = %48, %24
  %39 = phi %"struct.WTF::KeyValuePair"* [ %20, %24 ], [ %53, %48 ]
  %40 = phi i64 [ %19, %24 ], [ %52, %48 ]
  %41 = phi i64 [ 0, %24 ], [ %50, %48 ]
  %42 = bitcast %"struct.WTF::KeyValuePair"* %39 to i8**
  %43 = load i8*, i8** %42, align 8
  %44 = icmp ne i8* %43, inttoptr (i64 -1 to i8*)
  %45 = bitcast i8* %43 to %"class.WTF::StringImpl"*
  %46 = icmp eq %"class.WTF::StringImpl"* %14, %45
  %47 = and i1 %44, %46
  br i1 %47, label %57, label %48

48:                                               ; preds = %38
  %49 = icmp eq i64 %41, 0
  %50 = select i1 %49, i64 %37, i64 %41
  %51 = add i64 %50, %40
  %52 = and i64 %51, %12
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %6, i64 %52
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %53, i64 0, i32 0, i32 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %61, label %38

57:                                               ; preds = %38
  %58 = icmp eq %"struct.WTF::KeyValuePair"* %39, null
  br i1 %58, label %61, label %59

59:                                               ; preds = %57
  %60 = zext i32 %9 to i64
  br label %64

61:                                               ; preds = %48, %57, %10, %3
  %62 = zext i32 %9 to i64
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %6, i64 %62
  br label %64

64:                                               ; preds = %59, %61
  %65 = phi i64 [ %60, %59 ], [ %62, %61 ]
  %66 = phi %"struct.WTF::KeyValuePair"* [ %39, %59 ], [ %63, %61 ]
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %6, i64 %65
  %68 = icmp eq %"struct.WTF::KeyValuePair"* %66, %67
  br i1 %68, label %77, label %69

69:                                               ; preds = %64
  %70 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %0, i64 0, i32 0
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %66, i64 0, i32 1, i32 0, i32 0
  %72 = load %"class.blink::HeapVector"*, %"class.blink::HeapVector"** %71, align 8
  %73 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %72, i64 0, i32 0, i32 0, i32 0, i32 0
  %74 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %73, align 8
  %75 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %72, i64 0, i32 0, i32 0, i32 0, i32 2
  %76 = load i32, i32* %75, align 4
  tail call void @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE6AppendIS4_EEvPKT_j(%"class.WTF::Vector"* %70, %"class.blink::Member.7"* %74, i32 %76) #9
  br label %77

77:                                               ; preds = %64, %69
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink10UserTiming11GetMeasuresEv(%"class.blink::HeapVector"* noalias sret, %"class.blink::UserTiming"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::HeapVector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false) #9, !alias.scope !20
  %4 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4, !noalias !20
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %7, align 8, !noalias !20
  %9 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8, !noalias !20
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %11
  br i1 %6, label %46, label %13

13:                                               ; preds = %2
  %14 = icmp eq i32 %10, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %13, %19
  %16 = phi %"struct.WTF::KeyValuePair"* [ %20, %19 ], [ %8, %13 ]
  %17 = bitcast %"struct.WTF::KeyValuePair"* %16 to i64*
  %18 = load i64, i64* %17, align 8
  switch i64 %18, label %22 [
    i64 -1, label %19
    i64 0, label %19
  ]

19:                                               ; preds = %15, %15
  %20 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %16, i64 1
  %21 = icmp eq %"struct.WTF::KeyValuePair"* %20, %12
  br i1 %21, label %46, label %15

22:                                               ; preds = %15, %13
  %23 = phi %"struct.WTF::KeyValuePair"* [ %8, %13 ], [ %16, %15 ]
  %24 = icmp eq %"struct.WTF::KeyValuePair"* %23, %12
  br i1 %24, label %46, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %0, i64 0, i32 0
  br label %27

27:                                               ; preds = %44, %25
  %28 = phi %"struct.WTF::KeyValuePair"* [ %23, %25 ], [ %38, %44 ]
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %28, i64 0, i32 1, i32 0, i32 0
  %30 = load %"class.blink::HeapVector"*, %"class.blink::HeapVector"** %29, align 8
  %31 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %30, i64 0, i32 0, i32 0, i32 0, i32 0
  %32 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %31, align 8
  %33 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %30, i64 0, i32 0, i32 0, i32 0, i32 2
  %34 = load i32, i32* %33, align 4
  tail call void @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE6AppendIS4_EEvPKT_j(%"class.WTF::Vector"* %26, %"class.blink::Member.7"* %32, i32 %34) #9
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %28, i64 1
  %36 = icmp eq %"struct.WTF::KeyValuePair"* %35, %12
  br i1 %36, label %46, label %37

37:                                               ; preds = %27, %41
  %38 = phi %"struct.WTF::KeyValuePair"* [ %42, %41 ], [ %35, %27 ]
  %39 = bitcast %"struct.WTF::KeyValuePair"* %38 to i64*
  %40 = load i64, i64* %39, align 8
  switch i64 %40, label %44 [
    i64 -1, label %41
    i64 0, label %41
  ]

41:                                               ; preds = %37, %37
  %42 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %38, i64 1
  %43 = icmp eq %"struct.WTF::KeyValuePair"* %42, %12
  br i1 %43, label %46, label %37

44:                                               ; preds = %37
  %45 = icmp eq %"struct.WTF::KeyValuePair"* %38, %12
  br i1 %45, label %46, label %27

46:                                               ; preds = %19, %27, %44, %41, %2, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink10UserTiming11GetMeasuresERKN3WTF12AtomicStringE(%"class.blink::HeapVector"* noalias sret, %"class.blink::UserTiming"* nocapture readonly, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %1, i64 0, i32 2
  tail call fastcc void @_ZN5blinkL22GetEntrySequenceByNameERKNS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberINS_10HeapVectorINS3_INS_16PerformanceEntryEEELj0EEEEENS1_16AtomicStringHashENS1_10HashTraitsIS2_EENSA_IS8_EEEERKS2_(%"class.blink::HeapVector"* sret %0, %"class.blink::HeapHashMap"* dereferenceable(24) %4, %"class.WTF::AtomicString"* dereferenceable(8) %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink10UserTiming5TraceEPNS_7VisitorE(%"class.blink::UserTiming"*, %"class.blink::Visitor"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::UserTiming"* %0 to i64*
  %4 = load atomic i64, i64* %3 monotonic, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = inttoptr i64 %4 to i8*
  %8 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %9 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %9, i64 5
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, align 8
  tail call void %11(%"class.blink::Visitor"* %1, i8* nonnull %7, i8* nonnull %7, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_11PerformanceEE5TraceEPNS_7VisitorEPKv) #9
  br label %12

12:                                               ; preds = %2, %6
  %13 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 1
  %14 = bitcast %"class.blink::HeapHashMap"* %13 to i64*
  %15 = load atomic i64, i64* %14 monotonic, align 8
  %16 = bitcast %"class.blink::HeapHashMap"* %13 to i8**
  %17 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8**)***
  %18 = load void (%"class.blink::Visitor"*, i8**)**, void (%"class.blink::Visitor"*, i8**)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %18, i64 11
  %20 = load void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %19, align 8
  tail call void %20(%"class.blink::Visitor"* %1, i8** %16) #9
  %21 = icmp eq i64 %15, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %12
  %23 = inttoptr i64 %15 to i8*
  %24 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %25 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %25, i64 5
  %27 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %26, align 8
  tail call void %27(%"class.blink::Visitor"* %1, i8* nonnull %23, i8* nonnull %23, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv) #9
  br label %28

28:                                               ; preds = %12, %22
  %29 = getelementptr inbounds %"class.blink::UserTiming", %"class.blink::UserTiming"* %0, i64 0, i32 2
  %30 = bitcast %"class.blink::HeapHashMap"* %29 to i64*
  %31 = load atomic i64, i64* %30 monotonic, align 8
  %32 = bitcast %"class.blink::HeapHashMap"* %29 to i8**
  %33 = load void (%"class.blink::Visitor"*, i8**)**, void (%"class.blink::Visitor"*, i8**)*** %17, align 8
  %34 = getelementptr inbounds void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %33, i64 11
  %35 = load void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %34, align 8
  tail call void %35(%"class.blink::Visitor"* %1, i8** %32) #9
  %36 = icmp eq i64 %31, 0
  br i1 %36, label %43, label %37

37:                                               ; preds = %28
  %38 = inttoptr i64 %31 to i8*
  %39 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %40 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %39, align 8
  %41 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %40, i64 5
  %42 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %41, align 8
  tail call void %42(%"class.blink::Visitor"* %1, i8* nonnull %38, i8* nonnull %38, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv) #9
  br label %43

43:                                               ; preds = %28, %37
  ret void
}

declare void @_ZNK3WTF6String4Utf8ENS_18UTF8ConversionModeE(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*, i32) local_unnamed_addr #3

declare i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE14AppendSlowCaseIPS3_EEvOT_(%"class.WTF::Vector"*, %"class.blink::PerformanceEntry"** dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 2
  %9 = add i32 %7, 1
  %10 = add i32 %9, %8
  %11 = icmp ugt i32 %10, 4
  %12 = select i1 %11, i32 %10, i32 4
  %13 = icmp ugt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  tail call void @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector"* %0, i32 %14) #9
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %15, align 8
  %17 = load i32, i32* %3, align 4
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %16, i64 %18
  %20 = bitcast %"class.blink::PerformanceEntry"** %1 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.blink::Member.7"* %19 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %2
  %26 = inttoptr i64 %21 to i8*
  %27 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %26) #9
  br label %28

28:                                               ; preds = %2, %25
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, %1
  br i1 %6, label %7, label %59, !prof !2

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %8, align 8
  %10 = icmp eq %"class.blink::Member.7"* %9, null
  %11 = zext i32 %1 to i64
  %12 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_16PerformanceEntryEEEEEmm(i64 %11) #9
  br i1 %10, label %13, label %24

13:                                               ; preds = %7
  %14 = lshr i64 %12, 3
  %15 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64 %14) #9
  %16 = ptrtoint %"class.blink::HeapVectorBacking"* %15 to i64
  %17 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %16, i64* %17 monotonic, align 8
  %18 = trunc i64 %14 to i32
  store i32 %18, i32* %4, align 8
  %19 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %59, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %15, i64 0, i32 0
  %23 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %22) #9
  br label %59

24:                                               ; preds = %7
  %25 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %8, align 8
  %26 = icmp eq %"class.blink::Member.7"* %25, null
  br i1 %26, label %33, label %27

27:                                               ; preds = %24
  %28 = bitcast %"class.blink::Member.7"* %25 to i8*
  %29 = tail call zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8* nonnull %28, i64 %12) #9
  br i1 %29, label %30, label %33

30:                                               ; preds = %27
  %31 = lshr i64 %12, 3
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %4, align 8
  br label %59

33:                                               ; preds = %24, %27
  %34 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %35 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %34, i64 0, i32 1
  %36 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %35) #9
  %37 = icmp eq i8* %36, null
  br i1 %37, label %38, label %40, !prof !3

38:                                               ; preds = %33
  %39 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %35, i8* %39) #9
  br label %40

40:                                               ; preds = %38, %33
  %41 = phi i8* [ %39, %38 ], [ %36, %33 ]
  %42 = bitcast i8* %41 to %"class.blink::ThreadState"**
  %43 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %43, i64 0, i32 6
  %45 = load i8, i8* %44, align 8, !range !16
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %43, i64 0, i32 16
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %55, label %51

51:                                               ; preds = %40, %47
  %52 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %43, i64 0, i32 13
  %53 = load i64, i64* %52, align 8
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %47, %51
  %56 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.8, i64 0, i64 0), i32 1810, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9, i64 0, i64 0)) #9
  %57 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #9
  br label %58

58:                                               ; preds = %51, %55
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %1)
  br label %59

59:                                               ; preds = %30, %21, %13, %2, %58
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %13

4:                                                ; preds = %2
  %5 = bitcast %"class.WTF::Vector"* %0 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %10 monotonic, align 8
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %11, align 8
  %12 = shl nuw nsw i64 %9, 3
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %6, i64 %12) #9
  tail call void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8* %6) #9
  br label %50

13:                                               ; preds = %2
  %14 = zext i32 %1 to i64
  %15 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_16PerformanceEntryEEEEEmm(i64 %14) #9
  %16 = lshr i64 %15, 3
  %17 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64 %16) #9
  %18 = ptrtoint %"class.blink::HeapVectorBacking"* %17 to i64
  %19 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %19, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %22 = icmp ne %"class.blink::HeapVectorBacking"* %17, null
  %23 = icmp ne %"class.blink::Member.7"* %20, null
  %24 = and i1 %22, %23
  %25 = bitcast %"class.blink::Member.7"* %20 to i8*
  br i1 %24, label %28, label %26, !prof !2

26:                                               ; preds = %13
  %27 = bitcast %"class.WTF::Vector"* %0 to i8**
  br label %35

28:                                               ; preds = %13
  %29 = load i32, i32* %21, align 4
  %30 = zext i32 %29 to i64
  %31 = shl nuw nsw i64 %30, 3
  %32 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %17, i64 0, i32 0
  tail call void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8* nonnull %32, i8* nonnull %25, i64 %31) #9
  %33 = bitcast %"class.WTF::Vector"* %0 to i8**
  %34 = load i8*, i8** %33, align 8
  br label %35

35:                                               ; preds = %26, %28
  %36 = phi i8** [ %27, %26 ], [ %33, %28 ]
  %37 = phi i8* [ %25, %26 ], [ %34, %28 ]
  %38 = load i32, i32* %21, align 4
  %39 = zext i32 %38 to i64
  %40 = shl nuw nsw i64 %39, 3
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %37, i64 %40) #9
  %41 = load i8*, i8** %36, align 8
  tail call void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8* %41) #9
  %42 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %18, i64* %42 monotonic, align 8
  %43 = trunc i64 %16 to i32
  %44 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %43, i32* %44, align 8
  %45 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %50, label %47

47:                                               ; preds = %35
  %48 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %17, i64 0, i32 0
  %49 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %48) #9
  br label %50

50:                                               ; preds = %47, %35, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_16PerformanceEntryEEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 16777216
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 16777216) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.11, i64 0, i64 0), i32 39, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  ret i64 %20
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.13, i64 0, i64 0), i32 86, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  %21 = call i8* @_ZN5blink17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm(i64 %20)
  %22 = bitcast i8* %21 to %"class.blink::HeapVectorBacking"*
  %23 = getelementptr inbounds i8, i8* %21, i64 -4
  %24 = bitcast i8* %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = or i16 %25, 1
  store atomic i16 %26, i16* %24 release, align 2
  ret %"class.blink::HeapVectorBacking"* %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !3

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %18 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %17, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %19

19:                                               ; preds = %8, %16
  %20 = phi i32 [ %14, %8 ], [ %18, %16 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 4, i32 %20, i8* getelementptr inbounds ([173 x i8], [173 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17HeapVectorBackingINS1_6MemberINS1_16PerformanceEntryEEENS_12VectorTraitsIS5_EEEEEEPKcv, i64 0, i64 0))
  ret i8* %21
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"*, %"class.blink::ThreadState"*, i64, i32, i32, i8*) local_unnamed_addr #2 comdat align 2 {
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %0, i64 0, i32 19, i64 %10
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #9
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %15, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  %17 = icmp ult i64 %2, -8
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  store i8* null, i8** %15, align 8
  br label %29

19:                                               ; preds = %6
  %20 = add nsw i64 %2, 8
  %21 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %20) #9
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i64 0, i64 0), i8* %21, i8* %22) #9
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  store i8* %24, i8** %15, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  %27 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.15, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %8) #9
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #9
  br label %29

29:                                               ; preds = %18, %19, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #9
  %30 = add i64 %2, 15
  %31 = and i64 %30, -8
  %32 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %33, %31
  br i1 %34, label %67, label %35, !prof !3

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %31
  store i8* %38, i8** %36, align 8
  %39 = sub i64 %33, %31
  store i64 %39, i64* %32, align 8
  %40 = bitcast i8* %37 to i32*
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %37, i64 4
  %42 = bitcast i8* %41 to i16*
  %43 = trunc i32 %4 to i16
  %44 = shl i16 %43, 2
  store atomic i16 %44, i16* %42 monotonic, align 2
  %45 = lshr exact i64 %31, 1
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %37, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = ptrtoint i8* %37 to i64
  %50 = and i64 %49, -131072
  %51 = inttoptr i64 %50 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 4400
  %53 = bitcast i8* %52 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %54 = bitcast i8* %52 to i64*
  %55 = load i64, i64* %54, align 16
  %56 = sub i64 %49, %55
  %57 = lshr i64 %56, 3
  %58 = lshr i64 %56, 6
  %59 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %53, i64 0, i32 0, i32 1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 7
  %63 = shl i32 1, %62
  %64 = trunc i32 %63 to i8
  %65 = or i8 %60, %64
  store atomic i8 %65, i8* %59 release, align 1
  %66 = getelementptr inbounds i8, i8* %37, i64 8
  br label %70

67:                                               ; preds = %29
  %68 = zext i32 %4 to i64
  %69 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 %31, i64 %68) #9
  br label %70

70:                                               ; preds = %35, %67
  %71 = phi i8* [ %66, %35 ], [ %69, %67 ]
  ret i8* %71
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #3

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #3

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #3

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Member.7"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !3

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %17, %9
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = lshr i64 %22, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %41, label %25

25:                                               ; preds = %20
  %26 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %27

27:                                               ; preds = %38, %25
  %28 = phi i64 [ 0, %25 ], [ %39, %38 ]
  %29 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %3, i64 %28
  %30 = bitcast %"class.blink::Member.7"* %29 to i64*
  %31 = load atomic i64, i64* %30 monotonic, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = inttoptr i64 %31 to i8*
  %35 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %26, align 8
  %36 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %35, i64 5
  %37 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %36, align 8
  tail call void %37(%"class.blink::Visitor"* %0, i8* nonnull %34, i8* nonnull %34, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_16PerformanceEntryEE5TraceEPNS_7VisitorEPKv) #9
  br label %38

38:                                               ; preds = %33, %27
  %39 = add nuw nsw i64 %28, 1
  %40 = icmp eq i64 %39, %23
  br i1 %40, label %41, label %27

41:                                               ; preds = %38, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_16PerformanceEntryEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  %4 = bitcast i8* %1 to void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)**, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

declare zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8*, i64) local_unnamed_addr #3

declare void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8*, i8*, i64) local_unnamed_addr #3

declare void @_ZN3WTF13AtomicMemzeroEPvm(i8*, i64) local_unnamed_addr #3

declare void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !3

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10HeapVectorINS1_6MemberINS1_16PerformanceEntryEEELj0EEEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to i64*
  %4 = load atomic i64, i64* %3 monotonic, align 8
  %5 = icmp eq i64 %4, 0
  %6 = bitcast i8* %1 to i8**
  %7 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8**)***
  %8 = load void (%"class.blink::Visitor"*, i8**)**, void (%"class.blink::Visitor"*, i8**)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %8, i64 11
  %10 = load void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %9, align 8
  tail call void %10(%"class.blink::Visitor"* %0, i8** %6) #9
  br i1 %5, label %17, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %4 to i8*
  %13 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %14 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %14, i64 5
  %16 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %15, align 8
  tail call void %16(%"class.blink::Visitor"* %0, i8* nonnull %12, i8* nonnull %12, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_16PerformanceEntryEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv) #9
  br label %17

17:                                               ; preds = %2, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0), i8 1 }
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE6insertINS_17HashMapTranslatorISH_SC_SI_EERKS1_RPS8_EENS_18HashTableAddResultISJ_SA_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::HeapVector"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE6ExpandEPSA_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %73, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"struct.WTF::KeyValuePair"* [ %23, %27 ], [ %58, %52 ]
  %43 = phi %"struct.WTF::KeyValuePair"* [ null, %27 ], [ %53, %52 ]
  %44 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %45 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %46 = bitcast %"struct.WTF::KeyValuePair"* %42 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, inttoptr (i64 -1 to i8*)
  br i1 %48, label %52, label %49

49:                                               ; preds = %41
  %50 = bitcast i8* %47 to %"class.WTF::StringImpl"*
  %51 = icmp eq %"class.WTF::StringImpl"* %17, %50
  br i1 %51, label %171, label %52

52:                                               ; preds = %41, %49
  %53 = phi %"struct.WTF::KeyValuePair"* [ %43, %49 ], [ %42, %41 ]
  %54 = icmp eq i64 %45, 0
  %55 = select i1 %54, i64 %40, i64 %45
  %56 = add i64 %55, %44
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %58, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"struct.WTF::KeyValuePair"* %53, null
  br i1 %63, label %73, label %64

64:                                               ; preds = %62
  %65 = bitcast %"struct.WTF::KeyValuePair"* %53 to i8*
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* nonnull %65, i64 16) #9
  %66 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  %72 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  br label %73

73:                                               ; preds = %10, %62, %64
  %74 = phi %"class.WTF::StringImpl"* [ %72, %64 ], [ %17, %62 ], [ %17, %10 ]
  %75 = phi %"struct.WTF::KeyValuePair"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  %76 = icmp eq %"class.WTF::StringImpl"* %74, null
  br i1 %76, label %94, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %94

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i33
  %86 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %85, i33 1) #9
  %87 = extractvalue { i33, i1 } %86, 1
  %88 = extractvalue { i33, i1 } %86, 0
  %89 = icmp slt i33 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %92, !prof !3

91:                                               ; preds = %82
  tail call void @llvm.trap() #9
  unreachable

92:                                               ; preds = %82
  %93 = trunc i33 %88 to i32
  store i32 %93, i32* %83, align 4
  br label %94

94:                                               ; preds = %92, %77, %73
  %95 = ptrtoint %"class.WTF::StringImpl"* %74 to i64
  %96 = bitcast %"struct.WTF::KeyValuePair"* %75 to i64*
  %97 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %75, i64 0, i32 0, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  store i64 %95, i64* %96, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #9
  br label %113

113:                                              ; preds = %112, %109, %94
  %114 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %75, i64 0, i32 1
  %115 = load %"class.blink::HeapVector"*, %"class.blink::HeapVector"** %2, align 8
  %116 = ptrtoint %"class.blink::HeapVector"* %115 to i64
  %117 = bitcast %"class.blink::Member.3"* %114 to i64*
  store atomic i64 %116, i64* %117 monotonic, align 8
  %118 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %123, label %120

120:                                              ; preds = %113
  %121 = bitcast %"class.blink::HeapVector"* %115 to i8*
  %122 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %121) #9
  br label %123

123:                                              ; preds = %113, %120
  %124 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %159, label %126

126:                                              ; preds = %123
  %127 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %128 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %127, i64 0, i32 1
  %129 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %128) #9
  %130 = icmp eq i8* %129, null
  br i1 %130, label %131, label %133, !prof !3

131:                                              ; preds = %126
  %132 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %128, i8* %132) #9
  br label %133

133:                                              ; preds = %131, %126
  %134 = phi i8* [ %132, %131 ], [ %129, %126 ]
  %135 = bitcast i8* %134 to %"class.blink::ThreadState"**
  %136 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %135, align 8
  %137 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %136, i64 0, i32 9
  %138 = load i8, i8* %137, align 1, !range !16
  %139 = icmp eq i8 %138, 0
  br i1 %139, label %159, label %140

140:                                              ; preds = %133
  %141 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %136, i64 0, i32 13
  %142 = load i64, i64* %141, align 8
  %143 = add i64 %142, 1
  store i64 %143, i64* %141, align 8
  %144 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %136, i64 0, i32 24, i32 4, i32 0, i32 0, i32 0
  %145 = load %"class.blink::MarkingVisitor"*, %"class.blink::MarkingVisitor"** %144, align 8
  %146 = load atomic i64, i64* %117 monotonic, align 8
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %140
  %149 = getelementptr inbounds %"class.blink::MarkingVisitor", %"class.blink::MarkingVisitor"* %145, i64 0, i32 0, i32 0
  %150 = inttoptr i64 %146 to i8*
  %151 = bitcast %"class.blink::MarkingVisitor"* %145 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %152 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %151, align 8
  %153 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %152, i64 5
  %154 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %153, align 8
  tail call void %154(%"class.blink::Visitor"* %149, i8* nonnull %150, i8* %150, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE5TraceEPNS_7VisitorEPKv) #9
  %155 = load i64, i64* %141, align 8
  br label %156

156:                                              ; preds = %148, %140
  %157 = phi i64 [ %143, %140 ], [ %155, %148 ]
  %158 = add i64 %157, -1
  store i64 %158, i64* %141, align 8
  br label %159

159:                                              ; preds = %123, %133, %156
  %160 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %161 = load i32, i32* %160, align 4
  %162 = add i32 %161, 1
  store i32 %162, i32* %160, align 4
  %163 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %164 = load i32, i32* %163, align 8
  %165 = add i32 %164, %162
  %166 = shl i32 %165, 1
  %167 = load i32, i32* %12, align 8
  %168 = icmp ult i32 %166, %167
  br i1 %168, label %171, label %169

169:                                              ; preds = %159
  %170 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE6ExpandEPSA_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %75)
  br label %171

171:                                              ; preds = %49, %159, %169
  %172 = phi i8 [ 1, %159 ], [ 1, %169 ], [ 0, %49 ]
  %173 = phi %"struct.WTF::KeyValuePair"* [ %75, %159 ], [ %170, %169 ], [ %42, %49 ]
  %174 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %173, 0
  %175 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %174, i8 %172, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %175
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE6ExpandEPSA_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca i8, align 1
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %34, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = mul i32 %12, 6
  %14 = shl i32 %8, 1
  %15 = icmp ult i32 %13, %14
  br i1 %15, label %39, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %18, align 8
  %19 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)
  %20 = icmp ugt i32 %14, %8
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* null, i8** %18, align 8
  br label %31

22:                                               ; preds = %16
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %14) #9
  %24 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* %23, i8* %24) #9
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* %26, i8** %18, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %22
  %29 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.18, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %5) #9
  %30 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #9
  br label %31

31:                                               ; preds = %28, %22, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  %32 = load i32, i32* %7, align 8
  %33 = icmp ult i32 %32, %14
  br i1 %33, label %34, label %39

34:                                               ; preds = %2, %31
  %35 = phi i32 [ %14, %31 ], [ 8, %2 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #9
  store i8 -86, i8* %4, align 1
  %36 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE12ExpandBufferEjPSA_Rb(%"class.WTF::HashTable"* %0, i32 %35, %"struct.WTF::KeyValuePair"* %1, i8* nonnull dereferenceable(1) %4) #9
  %37 = load i8, i8* %4, align 1, !range !16
  %38 = icmp eq i8 %37, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #9
  br i1 %38, label %39, label %45

39:                                               ; preds = %10, %34, %31
  %40 = phi i32 [ %35, %34 ], [ %14, %31 ], [ %8, %10 ]
  %41 = zext i32 %40 to i64
  %42 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE4CallEm(i64 %41) #9
  %43 = bitcast %"class.blink::HeapHashTableBacking"* %42 to %"struct.WTF::KeyValuePair"*
  %44 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE8RehashToEPSA_jSK_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %43, i32 %40, %"struct.WTF::KeyValuePair"* %1) #9
  br label %45

45:                                               ; preds = %34, %39
  %46 = phi %"struct.WTF::KeyValuePair"* [ %44, %39 ], [ %36, %34 ]
  ret %"struct.WTF::KeyValuePair"* %46
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE12ExpandBufferEjPSA_Rb(%"class.WTF::HashTable"*, i32, %"struct.WTF::KeyValuePair"*, i8* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  store i8 0, i8* %3, align 1
  %6 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %7 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %6, i64 0, i32 1
  %8 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %7) #9
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %12, !prof !3

10:                                               ; preds = %4
  %11 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %7, i8* %11) #9
  br label %12

12:                                               ; preds = %10, %4
  %13 = phi i8* [ %11, %10 ], [ %8, %4 ]
  %14 = bitcast i8* %13 to %"class.blink::ThreadState"**
  %15 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 6
  %17 = load i8, i8* %16, align 8, !range !16
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 16
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %27, label %23

23:                                               ; preds = %12, %19
  %24 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 13
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %19, %23
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.18, i64 0, i64 0), i32 1801, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9, i64 0, i64 0)) #9
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #9
  br label %30

30:                                               ; preds = %23, %27
  %31 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %32 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %31, align 8
  %33 = icmp eq %"struct.WTF::KeyValuePair"* %32, null
  br i1 %33, label %116, label %34

34:                                               ; preds = %30
  %35 = zext i32 %1 to i64
  %36 = shl nuw nsw i64 %35, 4
  %37 = bitcast %"struct.WTF::KeyValuePair"* %32 to i8*
  %38 = call zeroext i1 @_ZN5blink13HeapAllocator13BackingExpandEPvm(i8* nonnull %37, i64 %36) #9
  br i1 %38, label %39, label %116

39:                                               ; preds = %34
  store i8 1, i8* %3, align 1
  %40 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %31, align 8
  %43 = zext i32 %41 to i64
  %44 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE4CallEm(i64 %43) #9
  %45 = bitcast %"class.blink::HeapHashTableBacking"* %44 to %"struct.WTF::KeyValuePair"*
  %46 = icmp eq i32 %41, 0
  br i1 %46, label %47, label %58

47:                                               ; preds = %113, %39
  %48 = phi %"struct.WTF::KeyValuePair"* [ null, %39 ], [ %65, %113 ]
  %49 = bitcast %"class.WTF::HashTable"* %0 to %"class.blink::HeapHashTableBacking"**
  store %"class.blink::HeapHashTableBacking"* %44, %"class.blink::HeapHashTableBacking"** %49, align 8
  %50 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %55, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.blink::HeapHashTableBacking", %"class.blink::HeapHashTableBacking"* %44, i64 0, i32 0
  %54 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %53) #9
  br label %55

55:                                               ; preds = %47, %52
  %56 = bitcast %"struct.WTF::KeyValuePair"* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 %36, i1 false)
  %57 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE8RehashToEPSA_jSK_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %42, i32 %1, %"struct.WTF::KeyValuePair"* %48)
  br label %116

58:                                               ; preds = %39, %113
  %59 = phi i64 [ %114, %113 ], [ 0, %39 ]
  %60 = phi %"struct.WTF::KeyValuePair"* [ %65, %113 ], [ null, %39 ]
  %61 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %31, align 8
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %61, i64 %59
  %63 = icmp eq %"struct.WTF::KeyValuePair"* %62, %2
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %45, i64 %59
  %65 = select i1 %63, %"struct.WTF::KeyValuePair"* %64, %"struct.WTF::KeyValuePair"* %60
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %62, i64 0, i32 0, i32 0, i32 0, i32 0
  %67 = bitcast %"struct.WTF::KeyValuePair"* %62 to i64*
  %68 = load i64, i64* %67, align 8
  switch i64 %68, label %71 [
    i64 -1, label %69
    i64 0, label %69
  ]

69:                                               ; preds = %58, %58
  %70 = bitcast %"struct.WTF::KeyValuePair"* %64 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 16, i1 false)
  br label %113

71:                                               ; preds = %58
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %64, i64 0, i32 0, i32 0, i32 0, i32 0
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  %74 = icmp eq %"class.WTF::StringImpl"* %73, null
  br i1 %74, label %88, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load atomic i32, i32* %76 monotonic, align 4
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 0
  %81 = load i32, i32* %80, align 4
  br i1 %79, label %82, label %84

82:                                               ; preds = %75
  %83 = add i32 %81, -1
  store i32 %83, i32* %80, align 4
  br label %84

84:                                               ; preds = %82, %75
  %85 = phi i32 [ %83, %82 ], [ %81, %75 ]
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %73) #9
  br label %88

88:                                               ; preds = %71, %84, %87
  %89 = load i64, i64* %67, align 8
  %90 = bitcast %"struct.WTF::KeyValuePair"* %64 to i64*
  store i64 %89, i64* %90, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %66, align 8
  %91 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %45, i64 %59, i32 1
  %92 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %61, i64 %59, i32 1
  %93 = bitcast %"class.blink::Member.3"* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = bitcast %"class.blink::Member.3"* %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %31, align 8
  %97 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %96, i64 %59, i32 0, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %88
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #9
  br label %113

113:                                              ; preds = %112, %109, %88, %69
  %114 = add nuw nsw i64 %59, 1
  %115 = icmp eq i64 %114, %43
  br i1 %115, label %47, label %58

116:                                              ; preds = %34, %30, %55
  %117 = phi %"struct.WTF::KeyValuePair"* [ %57, %55 ], [ null, %30 ], [ null, %34 ]
  ret %"struct.WTF::KeyValuePair"* %117
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE8RehashToEPSA_jSK_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*, i32, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"struct.WTF::KeyValuePair"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %10, align 8
  br label %70

14:                                               ; preds = %169, %4
  %15 = phi i32 [ 0, %4 ], [ %170, %169 ]
  %16 = phi %"struct.WTF::KeyValuePair"* [ null, %4 ], [ %172, %169 ]
  %17 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %14
  %20 = bitcast %"struct.WTF::KeyValuePair"* %1 to i8*
  tail call void @_ZN5blink14MarkingVisitor17RetraceObjectSlowEPKv(i8* %20) #9
  %21 = load i32, i32* %6, align 8
  br label %22

22:                                               ; preds = %14, %19
  %23 = phi i32 [ %15, %14 ], [ %21, %19 ]
  %24 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %25 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %24, align 8
  %26 = bitcast %"class.WTF::HashTable"* %0 to i64*
  store atomic i64 %5, i64* %26 monotonic, align 8
  %27 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %32, label %29

29:                                               ; preds = %22
  %30 = bitcast %"struct.WTF::KeyValuePair"* %1 to i8*
  %31 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %30) #9
  br label %32

32:                                               ; preds = %22, %29
  store i32 %2, i32* %6, align 8
  %33 = icmp eq %"struct.WTF::KeyValuePair"* %25, null
  br i1 %33, label %66, label %34

34:                                               ; preds = %32
  %35 = icmp eq i32 %23, 0
  br i1 %35, label %64, label %36

36:                                               ; preds = %34
  %37 = zext i32 %23 to i64
  br label %38

38:                                               ; preds = %61, %36
  %39 = phi i64 [ 0, %36 ], [ %62, %61 ]
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %25, i64 %39
  %41 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %40, i64 0, i32 0, i32 0, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = ptrtoint %"class.WTF::StringImpl"* %42 to i64
  switch i64 %43, label %44 [
    i64 -1, label %61
    i64 0, label %61
  ]

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  br i1 %48, label %51, label %53

51:                                               ; preds = %44
  %52 = add i32 %50, -1
  store i32 %52, i32* %49, align 4
  br label %53

53:                                               ; preds = %51, %44
  %54 = phi i32 [ %52, %51 ], [ %50, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #9
  br label %57

57:                                               ; preds = %56, %53
  %58 = bitcast %"struct.WTF::KeyValuePair"* %40 to i8**
  store i8* inttoptr (i64 -1 to i8*), i8** %58, align 8
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %25, i64 %39, i32 1
  %60 = bitcast %"class.blink::Member.3"* %59 to i64*
  store atomic i64 0, i64* %60 monotonic, align 8
  br label %61

61:                                               ; preds = %57, %38, %38
  %62 = add nuw nsw i64 %39, 1
  %63 = icmp eq i64 %62, %37
  br i1 %63, label %64, label %38

64:                                               ; preds = %61, %34
  %65 = bitcast %"struct.WTF::KeyValuePair"* %25 to i8*
  tail call void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8* nonnull %65) #9
  br label %66

66:                                               ; preds = %32, %64
  %67 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %68 = load i32, i32* %67, align 8
  %69 = and i32 %68, -2147483648
  store i32 %69, i32* %67, align 8
  ret %"struct.WTF::KeyValuePair"* %16

70:                                               ; preds = %9, %169
  %71 = phi i32 [ %7, %9 ], [ %170, %169 ]
  %72 = phi %"struct.WTF::KeyValuePair"* [ %13, %9 ], [ %171, %169 ]
  %73 = phi %"struct.WTF::KeyValuePair"* [ null, %9 ], [ %172, %169 ]
  %74 = phi i32 [ 0, %9 ], [ %173, %169 ]
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %72, i64 %75
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %76, i64 0, i32 0, i32 0, i32 0, i32 0
  %78 = bitcast %"struct.WTF::KeyValuePair"* %76 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = inttoptr i64 %79 to %"class.WTF::StringImpl"*
  switch i64 %79, label %81 [
    i64 -1, label %169
    i64 0, label %169
  ]

81:                                               ; preds = %70
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = lshr i32 %83, 8
  %85 = and i32 %84, %11
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %86
  %88 = ptrtoint %"struct.WTF::KeyValuePair"* %87 to i64
  %89 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %87, i64 0, i32 0, i32 0, i32 0, i32 0
  %90 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, align 8
  %91 = icmp eq %"class.WTF::StringImpl"* %90, null
  br i1 %91, label %108, label %92

92:                                               ; preds = %81
  %93 = xor i32 %84, -1
  %94 = lshr i32 %83, 31
  %95 = add nsw i32 %94, %93
  %96 = shl i32 %95, 12
  %97 = xor i32 %96, %95
  %98 = lshr i32 %97, 7
  %99 = xor i32 %98, %97
  %100 = shl i32 %99, 2
  %101 = xor i32 %100, %99
  %102 = lshr i32 %101, 20
  %103 = xor i32 %102, %101
  %104 = or i32 %103, 1
  %105 = zext i32 %104 to i64
  br label %114

106:                                              ; preds = %126
  %107 = ptrtoint %"struct.WTF::KeyValuePair"* %132 to i64
  br label %108

108:                                              ; preds = %106, %81
  %109 = phi i64 [ %88, %81 ], [ %107, %106 ]
  %110 = phi %"struct.WTF::KeyValuePair"* [ null, %81 ], [ %127, %106 ]
  %111 = icmp eq %"struct.WTF::KeyValuePair"* %110, null
  %112 = ptrtoint %"struct.WTF::KeyValuePair"* %110 to i64
  %113 = select i1 %111, i64 %109, i64 %112
  br label %137

114:                                              ; preds = %126, %92
  %115 = phi %"struct.WTF::KeyValuePair"* [ null, %92 ], [ %127, %126 ]
  %116 = phi i64 [ %88, %92 ], [ %133, %126 ]
  %117 = phi %"struct.WTF::KeyValuePair"* [ %87, %92 ], [ %132, %126 ]
  %118 = phi i64 [ %86, %92 ], [ %131, %126 ]
  %119 = phi i64 [ 0, %92 ], [ %129, %126 ]
  %120 = bitcast %"struct.WTF::KeyValuePair"* %117 to i8**
  %121 = load i8*, i8** %120, align 8
  %122 = icmp eq i8* %121, inttoptr (i64 -1 to i8*)
  br i1 %122, label %126, label %123

123:                                              ; preds = %114
  %124 = bitcast i8* %121 to %"class.WTF::StringImpl"*
  %125 = icmp eq %"class.WTF::StringImpl"* %80, %124
  br i1 %125, label %137, label %126

126:                                              ; preds = %123, %114
  %127 = phi %"struct.WTF::KeyValuePair"* [ %115, %123 ], [ %117, %114 ]
  %128 = icmp eq i64 %119, 0
  %129 = select i1 %128, i64 %105, i64 %119
  %130 = add i64 %129, %118
  %131 = and i64 %130, %12
  %132 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %131
  %133 = ptrtoint %"struct.WTF::KeyValuePair"* %132 to i64
  %134 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %132, i64 0, i32 0, i32 0, i32 0, i32 0
  %135 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %134, align 8
  %136 = icmp eq %"class.WTF::StringImpl"* %135, null
  br i1 %136, label %106, label %114

137:                                              ; preds = %123, %108
  %138 = phi i64 [ %113, %108 ], [ %116, %123 ]
  %139 = inttoptr i64 %138 to %"struct.WTF::KeyValuePair"*
  %140 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %139, i64 0, i32 0, i32 0, i32 0, i32 0
  %141 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %140, align 8
  %142 = icmp eq %"class.WTF::StringImpl"* %141, null
  br i1 %142, label %156, label %143

143:                                              ; preds = %137
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %145 = load atomic i32, i32* %144 monotonic, align 4
  %146 = and i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 0
  %149 = load i32, i32* %148, align 4
  br i1 %147, label %150, label %152

150:                                              ; preds = %143
  %151 = add i32 %149, -1
  store i32 %151, i32* %148, align 4
  br label %152

152:                                              ; preds = %150, %143
  %153 = phi i32 [ %151, %150 ], [ %149, %143 ]
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %152
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %141) #9
  br label %156

156:                                              ; preds = %137, %152, %155
  %157 = load i64, i64* %78, align 8
  %158 = inttoptr i64 %138 to i64*
  store i64 %157, i64* %158, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %77, align 8
  %159 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %139, i64 0, i32 1
  %160 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %72, i64 %75, i32 1
  %161 = bitcast %"class.blink::Member.3"* %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = bitcast %"class.blink::Member.3"* %159 to i64*
  store i64 %162, i64* %163, align 8
  %164 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %10, align 8
  %165 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %164, i64 %75
  %166 = icmp eq %"struct.WTF::KeyValuePair"* %165, %3
  %167 = select i1 %166, %"struct.WTF::KeyValuePair"* %139, %"struct.WTF::KeyValuePair"* %73
  %168 = load i32, i32* %6, align 8
  br label %169

169:                                              ; preds = %70, %70, %156
  %170 = phi i32 [ %71, %70 ], [ %168, %156 ], [ %71, %70 ]
  %171 = phi %"struct.WTF::KeyValuePair"* [ %72, %70 ], [ %164, %156 ], [ %72, %70 ]
  %172 = phi %"struct.WTF::KeyValuePair"* [ %73, %70 ], [ %167, %156 ], [ %73, %70 ]
  %173 = add i32 %74, 1
  %174 = icmp eq i32 %173, %170
  br i1 %174, label %14, label %70
}

declare zeroext i1 @_ZN5blink13HeapAllocator13BackingExpandEPvm(i8*, i64) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.19, i64 0, i64 0), i32 77, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 4
  %21 = call i8* @_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINS1_12AtomicStringENS1_12KeyValuePairIS3_NS_6MemberINS_10HeapVectorINS5_INS_16PerformanceEntryEEELj0EEEEEEENS1_24KeyValuePairKeyExtractorENS1_16AtomicStringHashENS1_18HashMapValueTraitsINS1_10HashTraitsIS3_EENSF_ISA_EEEESG_NS_13HeapAllocatorEEEE14AllocateObjectISL_EEPvm(i64 %20)
  %22 = bitcast i8* %21 to %"class.blink::HeapHashTableBacking"*
  %23 = getelementptr inbounds i8, i8* %21, i64 -4
  %24 = bitcast i8* %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = or i16 %25, 1
  store atomic i16 %26, i16* %24 release, align 2
  ret %"class.blink::HeapHashTableBacking"* %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINS1_12AtomicStringENS1_12KeyValuePairIS3_NS_6MemberINS_10HeapVectorINS5_INS_16PerformanceEntryEEELj0EEEEEEENS1_24KeyValuePairKeyExtractorENS1_16AtomicStringHashENS1_18HashMapValueTraitsINS1_10HashTraitsIS3_EENSF_ISA_EEEESG_NS_13HeapAllocatorEEEE14AllocateObjectISL_EEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !3

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %18 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %17, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %19

19:                                               ; preds = %8, %16
  %20 = phi i32 [ %14, %8 ], [ %18, %16 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 5, i32 %20, i8* getelementptr inbounds ([498 x i8], [498 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink20HeapHashTableBackingINS_9HashTableINS_12AtomicStringENS_12KeyValuePairIS4_NS1_6MemberINS1_10HeapVectorINS6_INS1_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSG_ISB_EEEESH_NS1_13HeapAllocatorEEEEEEEPKcv, i64 0, i64 0))
  ret i8* %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %29, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %1, i64 -2
  %6 = bitcast i8* %5 to i16*
  %7 = load atomic i16, i16* %6 monotonic, align 2
  %8 = icmp ult i16 %7, 4
  br i1 %8, label %9, label %17

9:                                                ; preds = %4
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %22

17:                                               ; preds = %4
  %18 = load atomic i16, i16* %6 monotonic, align 2
  %19 = lshr i16 %18, 2
  %20 = zext i16 %19 to i64
  %21 = shl nuw nsw i64 %20, 3
  br label %22

22:                                               ; preds = %9, %17
  %23 = phi i64 [ %16, %9 ], [ %21, %17 ]
  %24 = bitcast %"class.blink::Visitor"* %0 to i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)***
  %25 = load i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)**, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)** %25, i64 4
  %27 = load i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.blink::Visitor"* %0, i8* nonnull %1, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv, i64 %23) #9
  br i1 %28, label %30, label %29

29:                                               ; preds = %2, %22
  tail call void @_ZN3WTF38TraceHashTableBackingInCollectionTraitILNS_16WeakHandlingFlagE0ENS_9HashTableINS_12AtomicStringENS_12KeyValuePairIS3_N5blink6MemberINS5_10HeapVectorINS6_INS5_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSG_ISB_EEEESH_NS5_13HeapAllocatorEEEE5TraceEPNS5_7VisitorEPKv(%"class.blink::Visitor"* %0, i8* %1) #9
  br label %30

30:                                               ; preds = %22, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS3_12AtomicStringENS3_12KeyValuePairIS5_NS_6MemberINS_10HeapVectorINS7_INS_16PerformanceEntryEEELj0EEEEEEENS3_24KeyValuePairKeyExtractorENS3_16AtomicStringHashENS3_18HashMapValueTraitsINS3_10HashTraitsIS5_EENSH_ISC_EEEESI_NS_13HeapAllocatorEEEEEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -2
  %3 = bitcast i8* %2 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = lshr i16 %4, 2
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %7, label %15, !prof !3

7:                                                ; preds = %1
  %8 = getelementptr inbounds i8, i8* %0, i64 -8
  %9 = ptrtoint i8* %8 to i64
  %10 = and i64 %9, -131072
  %11 = inttoptr i64 %10 to i8*
  %12 = getelementptr inbounds i8, i8* %11, i64 4144
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 16
  br label %18

15:                                               ; preds = %1
  %16 = zext i16 %5 to i64
  %17 = shl nuw nsw i64 %16, 3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i64 [ %14, %7 ], [ %17, %15 ]
  %20 = add i64 %19, -8
  %21 = lshr i64 %20, 4
  %22 = bitcast i8* %0 to %"struct.WTF::KeyValuePair"*
  %23 = icmp eq i64 %21, 0
  br i1 %23, label %47, label %24

24:                                               ; preds = %18, %43
  %25 = phi i64 [ %45, %43 ], [ 0, %18 ]
  %26 = phi i32 [ %44, %43 ], [ 0, %18 ]
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %22, i64 %25, i32 0, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %29 = ptrtoint %"class.WTF::StringImpl"* %28 to i64
  switch i64 %29, label %30 [
    i64 -1, label %43
    i64 0, label %43
  ]

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %30
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi i32 [ %38, %37 ], [ %36, %30 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %28) #9
  br label %43

43:                                               ; preds = %42, %39, %24, %24
  %44 = add i32 %26, 1
  %45 = zext i32 %44 to i64
  %46 = icmp ugt i64 %21, %45
  br i1 %46, label %24, label %47

47:                                               ; preds = %43, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0), i8 1 }
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF38TraceHashTableBackingInCollectionTraitILNS_16WeakHandlingFlagE0ENS_9HashTableINS_12AtomicStringENS_12KeyValuePairIS3_N5blink6MemberINS5_10HeapVectorINS6_INS5_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSG_ISB_EEEESH_NS5_13HeapAllocatorEEEE5TraceEPNS5_7VisitorEPKv(%"class.blink::Visitor"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"struct.WTF::KeyValuePair"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !3

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %9, %17
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = lshr i64 %22, 4
  %24 = bitcast %"class.blink::Visitor"* %0 to i1 (%"class.blink::Visitor"*)***
  %25 = load i1 (%"class.blink::Visitor"*)**, i1 (%"class.blink::Visitor"*)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.blink::Visitor"*)*, i1 (%"class.blink::Visitor"*)** %25, i64 3
  %27 = load i1 (%"class.blink::Visitor"*)*, i1 (%"class.blink::Visitor"*)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.blink::Visitor"* %0) #9
  %29 = icmp eq i64 %23, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %20
  %31 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %33

32:                                               ; preds = %61, %20
  ret void

33:                                               ; preds = %61, %30
  %34 = phi i64 [ 0, %30 ], [ %62, %61 ]
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %3, i64 %34
  %36 = bitcast %"struct.WTF::KeyValuePair"* %35 to i64*
  br i1 %28, label %37, label %49

37:                                               ; preds = %33
  %38 = load atomic i64, i64* %36 monotonic, align 8
  switch i64 %38, label %39 [
    i64 -1, label %61
    i64 0, label %61
  ]

39:                                               ; preds = %37
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %3, i64 %34, i32 1
  %41 = bitcast %"class.blink::Member.3"* %40 to i64*
  %42 = load atomic i64, i64* %41 monotonic, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %61, label %44

44:                                               ; preds = %39
  %45 = inttoptr i64 %42 to i8*
  %46 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %47 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %46, i64 5
  %48 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %47, align 8
  tail call void %48(%"class.blink::Visitor"* %0, i8* nonnull %45, i8* nonnull %45, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE5TraceEPNS_7VisitorEPKv) #9
  br label %61

49:                                               ; preds = %33
  %50 = load i64, i64* %36, align 8
  switch i64 %50, label %51 [
    i64 -1, label %61
    i64 0, label %61
  ]

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %3, i64 %34, i32 1
  %53 = bitcast %"class.blink::Member.3"* %52 to i64*
  %54 = load atomic i64, i64* %53 monotonic, align 8
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %61, label %56

56:                                               ; preds = %51
  %57 = inttoptr i64 %54 to i8*
  %58 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %59 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %58, i64 5
  %60 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %59, align 8
  tail call void %60(%"class.blink::Visitor"* %0, i8* nonnull %57, i8* nonnull %57, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_10HeapVectorINS_6MemberINS_16PerformanceEntryEEELj0EEEE5TraceEPNS_7VisitorEPKv) #9
  br label %61

61:                                               ; preds = %49, %49, %37, %37, %56, %51, %39, %44
  %62 = add nuw nsw i64 %34, 1
  %63 = icmp eq i64 %62, %23
  br i1 %63, label %32, label %33
}

declare void @_ZN5blink14MarkingVisitor17RetraceObjectSlowEPKv(i8*) local_unnamed_addr #3

declare void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8*) local_unnamed_addr #3

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE5eraseEPKSA_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  br i1 %10, label %13, label %15

13:                                               ; preds = %6
  %14 = add i32 %12, -1
  store i32 %14, i32* %11, align 4
  br label %15

15:                                               ; preds = %13, %6
  %16 = phi i32 [ %14, %13 ], [ %12, %6 ]
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #9
  br label %19

19:                                               ; preds = %2, %15, %18
  %20 = bitcast %"struct.WTF::KeyValuePair"* %1 to i8**
  store i8* inttoptr (i64 -1 to i8*), i8** %20, align 8
  %21 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 1
  %22 = bitcast %"class.blink::Member.3"* %21 to i64*
  store atomic i64 0, i64* %22 monotonic, align 8
  %23 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %24 = load i32, i32* %23, align 8
  %25 = add i32 %24, 1
  %26 = and i32 %25, 2147483647
  %27 = and i32 %24, -2147483648
  %28 = or i32 %26, %27
  store i32 %28, i32* %23, align 8
  %29 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = add i32 %30, -1
  store i32 %31, i32* %29, align 4
  %32 = mul i32 %31, 6
  %33 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = icmp ult i32 %32, %34
  %36 = icmp ugt i32 %34, 8
  %37 = and i1 %35, %36
  br i1 %37, label %38, label %67

38:                                               ; preds = %19
  %39 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %40 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %39, i64 0, i32 1
  %41 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %40) #9
  %42 = icmp eq i8* %41, null
  br i1 %42, label %43, label %45, !prof !3

43:                                               ; preds = %38
  %44 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %40, i8* %44) #9
  br label %45

45:                                               ; preds = %43, %38
  %46 = phi i8* [ %44, %43 ], [ %41, %38 ]
  %47 = bitcast i8* %46 to %"class.blink::ThreadState"**
  %48 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %47, align 8
  %49 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %48, i64 0, i32 6
  %50 = load i8, i8* %49, align 8, !range !16
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %56, label %52

52:                                               ; preds = %45
  %53 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %48, i64 0, i32 16
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %67, label %56

56:                                               ; preds = %45, %52
  %57 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %48, i64 0, i32 13
  %58 = load i64, i64* %57, align 8
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %67

60:                                               ; preds = %56
  %61 = load i32, i32* %33, align 8
  %62 = lshr i32 %61, 1
  %63 = zext i32 %62 to i64
  %64 = tail call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberINS_10HeapVectorINS6_INS_16PerformanceEntryEEELj0EEEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSG_ISB_EEEESH_NS_13HeapAllocatorEEEEEE4CallEm(i64 %63) #9
  %65 = bitcast %"class.blink::HeapHashTableBacking"* %64 to %"struct.WTF::KeyValuePair"*
  %66 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberINS3_10HeapVectorINS4_INS3_16PerformanceEntryEEELj0EEEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSE_IS9_EEEESF_NS3_13HeapAllocatorEE8RehashToEPSA_jSK_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %65, i32 %62, %"struct.WTF::KeyValuePair"* null) #9
  br label %67

67:                                               ; preds = %52, %19, %60, %56
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #3

declare i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

declare i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext, i8*, i8*, i8*, i64, i64, i32, %"class.base::TimeTicks"* dereferenceable(8), %"class.base::trace_event::TraceArguments"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE6AppendIS4_EEvPKT_j(%"class.WTF::Vector"*, %"class.blink::Member.7"*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %43

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %14, align 8
  %16 = icmp ugt %"class.blink::Member.7"* %15, %1
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %15, i64 %18
  %20 = icmp ugt %"class.blink::Member.7"* %19, %1
  br i1 %20, label %29, label %21

21:                                               ; preds = %17, %13
  %22 = lshr i32 %11, 2
  %23 = add nuw i32 %11, 1
  %24 = add i32 %23, %22
  %25 = icmp ugt i32 %24, 4
  %26 = select i1 %25, i32 %24, i32 4
  %27 = icmp ugt i32 %26, %9
  %28 = select i1 %27, i32 %26, i32 %9
  tail call void @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector"* %0, i32 %28) #9
  br label %43

29:                                               ; preds = %17
  %30 = ptrtoint %"class.blink::Member.7"* %1 to i64
  %31 = ptrtoint %"class.blink::Member.7"* %15 to i64
  %32 = sub i64 %30, %31
  %33 = ashr exact i64 %32, 3
  %34 = lshr i32 %11, 2
  %35 = add nuw i32 %11, 1
  %36 = add i32 %35, %34
  %37 = icmp ugt i32 %36, 4
  %38 = select i1 %37, i32 %36, i32 4
  %39 = icmp ugt i32 %38, %9
  %40 = select i1 %39, i32 %38, i32 %9
  tail call void @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector"* %0, i32 %40) #9
  %41 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %14, align 8
  %42 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %41, i64 %33
  br label %43

43:                                               ; preds = %29, %21, %3
  %44 = phi %"class.blink::Member.7"* [ %1, %3 ], [ %1, %21 ], [ %42, %29 ]
  %45 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #9
  %46 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %46, align 8
  %47 = load i32, i32* %7, align 4
  %48 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48)
  %49 = icmp ult i32 %9, %47
  br i1 %49, label %51, label %50

50:                                               ; preds = %43
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48)
  store i8* null, i8** %46, align 8
  br label %60

51:                                               ; preds = %43
  %52 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  %53 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %47) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0), i8* %52, i8* %53) #9
  %54 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48)
  store i8* %55, i8** %46, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %60, label %57

57:                                               ; preds = %51
  %58 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.8, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #9
  %59 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #9
  br label %60

60:                                               ; preds = %50, %51, %57
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #9
  %61 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %62 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %61, align 8
  %63 = load i32, i32* %7, align 4
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %62, i64 %64
  %66 = icmp ne %"class.blink::Member.7"* %65, null
  %67 = icmp ne %"class.blink::Member.7"* %44, null
  %68 = and i1 %67, %66
  br i1 %68, label %69, label %88, !prof !2

69:                                               ; preds = %60
  %70 = zext i32 %2 to i64
  %71 = bitcast %"class.blink::Member.7"* %65 to i8*
  %72 = bitcast %"class.blink::Member.7"* %44 to i8*
  %73 = shl nuw nsw i64 %70, 3
  call void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8* nonnull %71, i8* nonnull %72, i64 %73) #9
  %74 = icmp eq i32 %2, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %69, %85
  %76 = phi i64 [ %78, %85 ], [ %70, %69 ]
  %77 = phi %"class.blink::Member.7"* [ %86, %85 ], [ %65, %69 ]
  %78 = add nsw i64 %76, -1
  %79 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %85, label %81

81:                                               ; preds = %75
  %82 = bitcast %"class.blink::Member.7"* %77 to i8**
  %83 = load i8*, i8** %82, align 8
  %84 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %83) #9
  br label %85

85:                                               ; preds = %81, %75
  %86 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %77, i64 1
  %87 = icmp eq i64 %78, 0
  br i1 %87, label %88, label %75

88:                                               ; preds = %85, %60, %69
  store i32 %9, i32* %7, align 4
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::Member.7"* @_ZN3WTF6VectorIN5blink6MemberINS1_16PerformanceEntryEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.8, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::Member.7"*, %"class.blink::Member.7"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::Member.7", %"class.blink::Member.7"* %24, i64 %25
  ret %"class.blink::Member.7"* %26
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.515", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.515"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #9
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.515", %"class.WTF::StringTypeAdapter.515"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.515"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.515"* nonnull %4, i8* %14) #9
  %15 = call i32 @_ZNK3WTF12StringAppendIPKcNS_12AtomicStringEE6lengthEv(%"class.WTF::StringAppend.228"* %9) #9
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #9
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendIPKcNS_12AtomicStringEE6lengthEv(%"class.WTF::StringAppend.228"* %9) #9
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #9
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i64 0, i64 0), i8* %25, i8* %26) #9
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.25, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #9
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #9
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #9
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #9
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #9
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.26, i64 0, i64 0), i8* %41, i8* %42) #9
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.25, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #9
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #9
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #9
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.515", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.516", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.515", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.515"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.515"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.515"* nonnull %5, i8* %10) #9
  %11 = bitcast %"class.WTF::StringTypeAdapter.515"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #9
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.515", %"class.WTF::StringTypeAdapter.515"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #9
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.515"* nonnull %3, i8* %14) #9
  %15 = bitcast %"class.WTF::StringTypeAdapter.516"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #9
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.516", %"class.WTF::StringTypeAdapter.516"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.516", %"class.WTF::StringTypeAdapter.516"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #9
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.516"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.515"* nonnull %3, i8* %1) #9
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.516", %"class.WTF::StringTypeAdapter.516"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.517"* nonnull %34, i8* %37) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #9
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_12AtomicStringEE6lengthEv(%"class.WTF::StringAppend.228"* %6) #9
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.515"* nonnull %5, i8* %40) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #9
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_12AtomicStringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.515", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.516", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.515", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.515"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.515"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.515"* nonnull %5, i8* %10) #9
  %11 = bitcast %"class.WTF::StringTypeAdapter.515"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #9
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.515", %"class.WTF::StringTypeAdapter.515"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #9
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.515"* nonnull %3, i8* %14) #9
  %15 = bitcast %"class.WTF::StringTypeAdapter.516"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #9
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.516", %"class.WTF::StringTypeAdapter.516"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.516", %"class.WTF::StringTypeAdapter.516"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #9
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.516"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.515"* nonnull %3, i16* %1) #9
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.516", %"class.WTF::StringTypeAdapter.516"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i16, i16* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.517"* nonnull %34, i16* %37) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #9
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_12AtomicStringEE6lengthEv(%"class.WTF::StringAppend.228"* %6) #9
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.515"* nonnull %5, i16* %40) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #9
  ret void
}

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.515"*, i8*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendIPKcNS_12AtomicStringEE6lengthEv(%"class.WTF::StringAppend.228"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.515", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.WTF::StringTypeAdapter.515"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.WTF::StringTypeAdapter.515", %"class.WTF::StringTypeAdapter.515"* %4, i64 0, i32 1
  %11 = getelementptr inbounds %"class.WTF::StringAppend.228", %"class.WTF::StringAppend.228"* %0, i64 0, i32 0
  %12 = bitcast %"class.WTF::StringTypeAdapter.515"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  %13 = load i8*, i8** %11, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.515"* nonnull %4, i8* %13) #9
  %14 = getelementptr inbounds %"class.WTF::StringAppend.228", %"class.WTF::StringAppend.228"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  br label %20

20:                                               ; preds = %1, %17
  %21 = phi i32 [ %19, %17 ], [ 0, %1 ]
  %22 = load i32, i32* %10, align 8
  %23 = add i32 %22, %21
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #9
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %22
  br i1 %27, label %29, label %28

28:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %20
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #9
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %22) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i64 0, i64 0), i8* %30, i8* %31) #9
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.25, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #9
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #9
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #9
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #9
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = icmp ult i32 %23, %21
  br i1 %42, label %44, label %43

43:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* null, i8** %40, align 8
  br label %53

44:                                               ; preds = %38
  %45 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #9
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.26, i64 0, i64 0), i8* %45, i8* %46) #9
  %47 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* %48, i8** %40, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.25, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #9
  %52 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #9
  br label %53

53:                                               ; preds = %43, %44, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #9
  ret i32 %23
}

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.515"*, i8*) local_unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.517"*, i8*) local_unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.515"*, i16*) local_unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.517"*, i16*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_11PerformanceEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Performance"*
  %4 = bitcast i8* %1 to void (%"class.blink::Performance"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::Performance"*, %"class.blink::Visitor"*)**, void (%"class.blink::Performance"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::Performance"*, %"class.blink::Visitor"*)*, void (%"class.blink::Performance"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::Performance"*, %"class.blink::Visitor"*)*, void (%"class.blink::Performance"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::Performance"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN3WTFplIPKcNS_12AtomicStringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!6 = distinct !{!6, !"_ZN3WTFplIPKcNS_12AtomicStringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN3WTFplIPKcNS_12AtomicStringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!9 = distinct !{!9, !"_ZN3WTFplIPKcNS_12AtomicStringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN3WTFplIPKcNS_12AtomicStringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!12 = distinct !{!12, !"_ZN3WTFplIPKcNS_12AtomicStringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN3WTFplIPKcNS_12AtomicStringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!15 = distinct !{!15, !"_ZN3WTFplIPKcNS_12AtomicStringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!16 = !{i8 0, i8 2}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN5blinkL22ConvertToEntrySequenceERKNS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberINS_10HeapVectorINS3_INS_16PerformanceEntryEEELj0EEEEENS1_16AtomicStringHashENS1_10HashTraitsIS2_EENSA_IS8_EEEE: argument 0"}
!19 = distinct !{!19, !"_ZN5blinkL22ConvertToEntrySequenceERKNS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberINS_10HeapVectorINS3_INS_16PerformanceEntryEEELj0EEEEENS1_16AtomicStringHashENS1_10HashTraitsIS2_EENSA_IS8_EEEE"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN5blinkL22ConvertToEntrySequenceERKNS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberINS_10HeapVectorINS3_INS_16PerformanceEntryEEELj0EEEEENS1_16AtomicStringHashENS1_10HashTraitsIS2_EENSA_IS8_EEEE: argument 0"}
!22 = distinct !{!22, !"_ZN5blinkL22ConvertToEntrySequenceERKNS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberINS_10HeapVectorINS3_INS_16PerformanceEntryEEELj0EEEEENS1_16AtomicStringHashENS1_10HashTraitsIS2_EENSA_IS8_EEEE"}
