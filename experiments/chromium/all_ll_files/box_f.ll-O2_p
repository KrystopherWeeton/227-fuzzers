; ModuleID = '../../ui/gfx/geometry/box_f.cc'
source_filename = "../../ui/gfx/geometry/box_f.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.gfx::BoxF" = type { %"class.gfx::Point3F", float, float, float }
%"class.gfx::Point3F" = type { float, float, float }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [12 x i8] c"%s %fx%fx%f\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3gfx4BoxF8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.gfx::BoxF"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #6
  %5 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 0
  call void @_ZNK3gfx7Point3F8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %3, %"class.gfx::Point3F"* %5) #6
  %6 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = select i1 %9, i8* %11, i8* %4
  %13 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  %16 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 2
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 3
  %20 = load float, float* %19, align 4
  %21 = fpext float %20 to double
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* %12, double %15, double %18, double %21) #6
  %22 = load i8, i8* %7, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %2
  %25 = load i8*, i8** %10, align 8
  call void @_ZdlPv(i8* %25) #7
  br label %26

26:                                               ; preds = %2, %24
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #6
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZNK3gfx7Point3F8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.gfx::Point3F"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3gfx4BoxF7IsEmptyEv(%"class.gfx::BoxF"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 1
  %3 = load float, float* %2, align 4
  %4 = fcmp oeq float %3, 0.000000e+00
  %5 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 2
  %6 = load float, float* %5, align 4
  br i1 %4, label %7, label %13

7:                                                ; preds = %1
  %8 = fcmp oeq float %6, 0.000000e+00
  br i1 %8, label %19, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 3
  %11 = load float, float* %10, align 4
  %12 = fcmp oeq float %11, 0.000000e+00
  br i1 %12, label %19, label %13

13:                                               ; preds = %1, %9
  %14 = fcmp oeq float %6, 0.000000e+00
  br i1 %14, label %15, label %19

15:                                               ; preds = %13
  %16 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 3
  %17 = load float, float* %16, align 4
  %18 = fcmp oeq float %17, 0.000000e+00
  br label %19

19:                                               ; preds = %13, %15, %9, %7
  %20 = phi i1 [ true, %9 ], [ true, %7 ], [ false, %13 ], [ %18, %15 ]
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx4BoxF8ExpandToERKNS_7Point3FES3_(%"class.gfx::BoxF"* nocapture, %"class.gfx::Point3F"* nocapture readonly dereferenceable(12), %"class.gfx::Point3F"* nocapture readonly dereferenceable(12)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fcmp olt float %7, %5
  %9 = select i1 %8, float %7, float %5
  %10 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = fcmp olt float %13, %11
  %15 = select i1 %14, float %13, float %11
  %16 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 0, i32 2
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 2
  %19 = load float, float* %18, align 4
  %20 = fcmp olt float %19, %17
  %21 = select i1 %20, float %19, float %17
  %22 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = fadd float %5, %23
  %25 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 0, i32 0
  %26 = load float, float* %25, align 4
  %27 = fcmp olt float %24, %26
  %28 = select i1 %27, float %26, float %24
  %29 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 2
  %30 = load float, float* %29, align 4
  %31 = fadd float %11, %30
  %32 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 0, i32 1
  %33 = load float, float* %32, align 4
  %34 = fcmp olt float %31, %33
  %35 = select i1 %34, float %33, float %31
  %36 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 3
  %37 = load float, float* %36, align 4
  %38 = fadd float %17, %37
  %39 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 0, i32 2
  %40 = load float, float* %39, align 4
  %41 = fcmp olt float %38, %40
  %42 = select i1 %41, float %40, float %38
  store float %9, float* %4, align 4
  store float %15, float* %10, align 4
  store float %21, float* %16, align 4
  %43 = fsub float %28, %9
  store float %43, float* %22, align 4
  %44 = fsub float %35, %15
  store float %44, float* %29, align 4
  %45 = fsub float %42, %21
  store float %45, float* %36, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx4BoxF5UnionERKS0_(%"class.gfx::BoxF"* nocapture, %"class.gfx::BoxF"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 1
  %4 = load float, float* %3, align 4
  %5 = fcmp oeq float %4, 0.000000e+00
  %6 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 2
  %7 = load float, float* %6, align 4
  br i1 %5, label %8, label %14

8:                                                ; preds = %2
  %9 = fcmp oeq float %7, 0.000000e+00
  br i1 %9, label %20, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 3
  %12 = load float, float* %11, align 4
  %13 = fcmp oeq float %12, 0.000000e+00
  br i1 %13, label %20, label %14

14:                                               ; preds = %10, %2
  %15 = fcmp oeq float %7, 0.000000e+00
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 3
  %18 = load float, float* %17, align 4
  %19 = fcmp oeq float %18, 0.000000e+00
  br i1 %19, label %20, label %23

20:                                               ; preds = %8, %10, %16
  %21 = bitcast %"class.gfx::BoxF"* %0 to i8*
  %22 = bitcast %"class.gfx::BoxF"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %22, i64 24, i1 false)
  br label %77

23:                                               ; preds = %14, %16
  %24 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 1
  %25 = load float, float* %24, align 4
  %26 = fcmp oeq float %25, 0.000000e+00
  %27 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 2
  %28 = load float, float* %27, align 4
  br i1 %26, label %29, label %35

29:                                               ; preds = %23
  %30 = fcmp oeq float %28, 0.000000e+00
  br i1 %30, label %77, label %31

31:                                               ; preds = %29
  %32 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 3
  %33 = load float, float* %32, align 4
  %34 = fcmp oeq float %33, 0.000000e+00
  br i1 %34, label %77, label %35

35:                                               ; preds = %31, %23
  %36 = fcmp oeq float %28, 0.000000e+00
  %37 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 3
  %38 = load float, float* %37, align 4
  %39 = fcmp oeq float %38, 0.000000e+00
  %40 = and i1 %36, %39
  br i1 %40, label %77, label %41

41:                                               ; preds = %35
  %42 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 0, i32 0
  %43 = load float, float* %42, align 4
  %44 = fadd float %25, %43
  %45 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 0, i32 1
  %46 = load float, float* %45, align 4
  %47 = fadd float %28, %46
  %48 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 0, i32 2
  %49 = load float, float* %48, align 4
  %50 = fadd float %49, %38
  %51 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 0, i32 0
  %52 = load float, float* %51, align 4
  %53 = fcmp olt float %43, %52
  %54 = select i1 %53, float %43, float %52
  %55 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 0, i32 1
  %56 = load float, float* %55, align 4
  %57 = fcmp olt float %46, %56
  %58 = select i1 %57, float %46, float %56
  %59 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 0, i32 2
  %60 = load float, float* %59, align 4
  %61 = fcmp olt float %49, %60
  %62 = select i1 %61, float %49, float %60
  %63 = fadd float %4, %52
  %64 = fcmp olt float %63, %44
  %65 = select i1 %64, float %44, float %63
  %66 = fadd float %7, %56
  %67 = fcmp olt float %66, %47
  %68 = select i1 %67, float %47, float %66
  %69 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 3
  %70 = load float, float* %69, align 4
  %71 = fadd float %60, %70
  %72 = fcmp olt float %71, %50
  %73 = select i1 %72, float %50, float %71
  store float %54, float* %51, align 4
  store float %58, float* %55, align 4
  store float %62, float* %59, align 4
  %74 = fsub float %65, %54
  store float %74, float* %3, align 4
  %75 = fsub float %68, %58
  store float %75, float* %6, align 4
  %76 = fsub float %73, %62
  store float %76, float* %69, align 4
  br label %77

77:                                               ; preds = %35, %29, %31, %41, %20
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx4BoxF8ExpandToERKS0_(%"class.gfx::BoxF"* nocapture, %"class.gfx::BoxF"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = fadd float %4, %6
  %8 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 2
  %11 = load float, float* %10, align 4
  %12 = fadd float %9, %11
  %13 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 0, i32 2
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 3
  %16 = load float, float* %15, align 4
  %17 = fadd float %14, %16
  %18 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 0, i32 0
  %19 = load float, float* %18, align 4
  %20 = fcmp olt float %4, %19
  %21 = select i1 %20, float %4, float %19
  %22 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = fcmp olt float %9, %23
  %25 = select i1 %24, float %9, float %23
  %26 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 0, i32 2
  %27 = load float, float* %26, align 4
  %28 = fcmp olt float %14, %27
  %29 = select i1 %28, float %14, float %27
  %30 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 1
  %31 = load float, float* %30, align 4
  %32 = fadd float %19, %31
  %33 = fcmp olt float %32, %7
  %34 = select i1 %33, float %7, float %32
  %35 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 2
  %36 = load float, float* %35, align 4
  %37 = fadd float %23, %36
  %38 = fcmp olt float %37, %12
  %39 = select i1 %38, float %12, float %37
  %40 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 3
  %41 = load float, float* %40, align 4
  %42 = fadd float %27, %41
  %43 = fcmp olt float %42, %17
  %44 = select i1 %43, float %17, float %42
  store float %21, float* %18, align 4
  store float %25, float* %22, align 4
  store float %29, float* %26, align 4
  %45 = fsub float %34, %21
  store float %45, float* %30, align 4
  %46 = fsub float %39, %25
  store float %46, float* %35, align 4
  %47 = fsub float %44, %29
  store float %47, float* %40, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3gfx4BoxF8ExpandToERKNS_7Point3FE(%"class.gfx::BoxF"* nocapture, %"class.gfx::Point3F"* nocapture readonly dereferenceable(12)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fcmp olt float %6, %4
  %8 = select i1 %7, float %6, float %4
  %9 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = fcmp olt float %12, %10
  %14 = select i1 %13, float %12, float %10
  %15 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 2
  %18 = load float, float* %17, align 4
  %19 = fcmp olt float %18, %16
  %20 = select i1 %19, float %18, float %16
  %21 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 1
  %22 = load float, float* %21, align 4
  %23 = fadd float %4, %22
  %24 = fcmp olt float %23, %6
  %25 = select i1 %24, float %6, float %23
  %26 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 2
  %27 = load float, float* %26, align 4
  %28 = fadd float %10, %27
  %29 = fcmp olt float %28, %12
  %30 = select i1 %29, float %12, float %28
  %31 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %0, i64 0, i32 3
  %32 = load float, float* %31, align 4
  %33 = fadd float %16, %32
  %34 = fcmp olt float %33, %18
  %35 = select i1 %34, float %18, float %33
  store float %8, float* %3, align 4
  store float %14, float* %9, align 4
  store float %20, float* %15, align 4
  %36 = fsub float %25, %8
  store float %36, float* %21, align 4
  %37 = fsub float %30, %14
  store float %37, float* %26, align 4
  %38 = fsub float %35, %20
  store float %38, float* %31, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx10UnionBoxesERKNS_4BoxFES2_(%"class.gfx::BoxF"* noalias nocapture sret, %"class.gfx::BoxF"* nocapture readonly dereferenceable(24), %"class.gfx::BoxF"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 {
  %4 = bitcast %"class.gfx::BoxF"* %0 to i8*
  %5 = bitcast %"class.gfx::BoxF"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %5, i64 24, i1 false)
  tail call void @_ZN3gfx4BoxF5UnionERKS0_(%"class.gfx::BoxF"* %0, %"class.gfx::BoxF"* dereferenceable(24) %2)
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
