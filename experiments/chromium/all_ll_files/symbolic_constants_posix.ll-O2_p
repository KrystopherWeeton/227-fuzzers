; ModuleID = '../../third_party/crashpad/crashpad/util/posix/symbolic_constants_posix.cc'
source_filename = "../../third_party/crashpad/crashpad/util/posix/symbolic_constants_posix.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::BasicStringPiece" = type { i8*, i64 }

@_ZN12_GLOBAL__N_112kSignalNamesE = internal unnamed_addr constant [32 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@_ZN12_GLOBAL__N_110kSigPrefixE = internal constant [4 x i8] c"SIG\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"HUP\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"INT\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"QUIT\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"ILL\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"TRAP\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"ABRT\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"BUS\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"FPE\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"KILL\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"USR1\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"SEGV\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"USR2\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"PIPE\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"ALRM\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"TERM\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"STKFLT\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"CHLD\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"CONT\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"STOP\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"TSTP\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"TTIN\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"TTOU\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"URG\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"XCPU\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"XFSZ\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"VTALRM\00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c"PROF\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"WINCH\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"IO\00", align 1
@.str.31 = private unnamed_addr constant [4 x i8] c"PWR\00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c"SYS\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8crashpad14SignalToStringEij(%"class.std::__1::basic_string"* noalias sret, i32, i32) local_unnamed_addr #0 {
  %4 = icmp ult i32 %1, 32
  br i1 %4, label %5, label %10

5:                                                ; preds = %3
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds [32 x i8*], [32 x i8*]* @_ZN12_GLOBAL__N_112kSignalNamesE, i64 0, i64 %6
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i32 %1, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %3, %5
  %11 = and i32 %2, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %10
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %1) #9
  br label %46

14:                                               ; preds = %10
  %15 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #9
  br label %46

16:                                               ; preds = %5
  %17 = and i32 %2, 1
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %45, label %19

19:                                               ; preds = %16
  %20 = tail call i64 @strlen(i8* nonnull %8) #9
  %21 = icmp ugt i64 %20, -17
  br i1 %21, label %22, label %24

22:                                               ; preds = %19
  %23 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %23) #10
  unreachable

24:                                               ; preds = %19
  %25 = icmp ult i64 %20, 23
  br i1 %25, label %34, label %26

26:                                               ; preds = %24
  %27 = add nuw i64 %20, 16
  %28 = and i64 %27, -16
  %29 = tail call i8* @_Znwm(i64 %28) #11
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %29, i8** %30, align 8
  %31 = or i64 %28, -9223372036854775808
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %31, i64* %32, align 8
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %20, i64* %33, align 8
  br label %40

34:                                               ; preds = %24
  %35 = trunc i64 %20 to i8
  %36 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  store i8 %35, i8* %37, align 1
  %38 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %39 = icmp eq i64 %20, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %34, %26
  %41 = phi i8* [ %29, %26 ], [ %38, %34 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* nonnull align 1 %8, i64 %20, i1 false) #9
  br label %42

42:                                               ; preds = %34, %40
  %43 = phi i8* [ %38, %34 ], [ %41, %40 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %20
  store i8 0, i8* %44, align 1
  br label %46

45:                                               ; preds = %16
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZN12_GLOBAL__N_110kSigPrefixE, i64 0, i64 0), i8* nonnull %8) #9
  br label %46

46:                                               ; preds = %45, %42, %14, %13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8crashpad14StringToSignalERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEjPi(%"class.base::BasicStringPiece"* dereferenceable(16), i32, i32*) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = and i32 %1, 1
  %6 = icmp ne i32 %5, 0
  %7 = xor i1 %6, true
  %8 = and i32 %1, 2
  %9 = icmp eq i32 %8, 0
  %10 = and i1 %9, %7
  br i1 %10, label %64, label %11

11:                                               ; preds = %3
  br i1 %6, label %12, label %29

12:                                               ; preds = %11
  %13 = tail call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* %0, i64 0, i64 3)
  %14 = extractvalue { i8*, i64 } %13, 0
  %15 = extractvalue { i8*, i64 } %13, 1
  %16 = icmp ult i64 %15, 3
  %17 = select i1 %16, i64 %15, i64 3
  %18 = tail call i32 @memcmp(i8* %14, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZN12_GLOBAL__N_110kSigPrefixE, i64 0, i64 0), i64 %17) #9
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %12
  %21 = icmp eq i64 %15, 3
  br i1 %21, label %25, label %22

22:                                               ; preds = %20, %12
  %23 = phi i32 [ %18, %12 ], [ 1, %20 ]
  %24 = icmp eq i32 %23, 0
  br label %29

25:                                               ; preds = %20
  %26 = tail call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* %0, i64 3, i64 -1)
  %27 = extractvalue { i8*, i64 } %26, 0
  %28 = extractvalue { i8*, i64 } %26, 1
  br label %35

29:                                               ; preds = %11, %22
  %30 = phi i1 [ %24, %22 ], [ false, %11 ]
  %31 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %34 = load i64, i64* %33, align 8
  br label %35

35:                                               ; preds = %29, %25
  %36 = phi i1 [ true, %25 ], [ %30, %29 ]
  %37 = phi i8* [ %27, %25 ], [ %32, %29 ]
  %38 = phi i64 [ %28, %25 ], [ %34, %29 ]
  br label %39

39:                                               ; preds = %61, %35
  %40 = phi i64 [ 0, %35 ], [ %62, %61 ]
  %41 = getelementptr inbounds [32 x i8*], [32 x i8*]* @_ZN12_GLOBAL__N_112kSignalNamesE, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = icmp eq i64 %40, 0
  br i1 %43, label %61, label %44

44:                                               ; preds = %39
  br i1 %36, label %45, label %55

45:                                               ; preds = %44
  %46 = call i64 @strlen(i8* nonnull %42) #9
  %47 = icmp ugt i64 %38, %46
  %48 = select i1 %47, i64 %46, i64 %38
  %49 = call i32 @bcmp(i8* %37, i8* %42, i64 %48)
  %50 = icmp eq i32 %49, 0
  %51 = icmp eq i64 %38, %46
  %52 = and i1 %51, %50
  br i1 %52, label %53, label %55

53:                                               ; preds = %45
  %54 = trunc i64 %40 to i32
  store i32 %54, i32* %2, align 4
  br label %107

55:                                               ; preds = %45, %44
  br i1 %9, label %61, label %56

56:                                               ; preds = %55
  %57 = call i32 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareEPKc(%"class.base::BasicStringPiece"* %0, i8* %42)
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = trunc i64 %40 to i32
  store i32 %60, i32* %2, align 4
  br label %107

61:                                               ; preds = %39, %55, %56
  %62 = add nuw nsw i64 %40, 1
  %63 = icmp eq i64 %62, 32
  br i1 %63, label %64, label %39

64:                                               ; preds = %61, %3
  %65 = and i32 %1, 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %107, label %67

67:                                               ; preds = %64
  %68 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %68) #9
  %69 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = icmp ugt i64 %72, -17
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = bitcast %"class.std::__1::basic_string"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %75) #10
  unreachable

76:                                               ; preds = %67
  %77 = icmp ult i64 %72, 23
  br i1 %77, label %87, label %78

78:                                               ; preds = %76
  %79 = add nuw i64 %72, 16
  %80 = and i64 %79, -16
  %81 = call i8* @_Znwm(i64 %80) #11
  %82 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %81, i8** %82, align 8
  %83 = or i64 %80, -9223372036854775808
  %84 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %72, i64* %85, align 8
  %86 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %92

87:                                               ; preds = %76
  %88 = trunc i64 %72 to i8
  %89 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %90 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %89, i64 0, i32 1, i32 0
  store i8 %88, i8* %90, align 1
  %91 = icmp eq i64 %72, 0
  br i1 %91, label %95, label %92

92:                                               ; preds = %87, %78
  %93 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %89, %87 ], [ %86, %78 ]
  %94 = phi i8* [ %68, %87 ], [ %81, %78 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %94, i8* align 1 %70, i64 %72, i1 false) #9
  br label %95

95:                                               ; preds = %87, %92
  %96 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %89, %87 ], [ %93, %92 ]
  %97 = phi i8* [ %68, %87 ], [ %94, %92 ]
  %98 = getelementptr inbounds i8, i8* %97, i64 %72
  store i8 0, i8* %98, align 1
  %99 = call zeroext i1 @_ZN8crashpad14StringToNumberERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPi(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %4, i32* %2) #9
  %100 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %96, i64 0, i32 1, i32 0
  %101 = load i8, i8* %100, align 1
  %102 = icmp slt i8 %101, 0
  br i1 %102, label %103, label %106

103:                                              ; preds = %95
  %104 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %105 = load i8*, i8** %104, align 8
  call void @_ZdlPv(i8* %105) #11
  br label %106

106:                                              ; preds = %95, %103
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %68) #9
  br label %107

107:                                              ; preds = %53, %59, %64, %106
  %108 = phi i1 [ %99, %106 ], [ false, %64 ], [ true, %59 ], [ true, %53 ]
  ret i1 %108
}

; Function Attrs: nounwind ssp uwtable
declare { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"*, i64, i64) local_unnamed_addr #0 align 2

; Function Attrs: nounwind ssp uwtable
declare i32 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareEPKc(%"class.base::BasicStringPiece"*, i8*) local_unnamed_addr #0 align 2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i1 @_ZN8crashpad14StringToNumberERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPi(%"class.std::__1::basic_string"* dereferenceable(24), i32*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
