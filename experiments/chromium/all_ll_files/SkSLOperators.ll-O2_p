; ModuleID = '../../third_party/skia/src/sksl/SkSLOperators.cpp'
source_filename = "../../third_party/skia/src/sksl/SkSLOperators.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Operator" = type { i32 }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.6", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.8" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.SkSL::Type::Field"* }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.SkSL::Type"* }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.17", %"class.std::__1::__compressed_pair.26", %"class.std::__1::__compressed_pair.31", %"class.std::__1::__compressed_pair.33", [4 x i8] }>
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19", %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { i64 }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { float }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.36"* }
%"class.std::__1::vector.36" = type opaque

@.str = private unnamed_addr constant [50 x i8] c"../../third_party/skia/src/sksl/SkSLOperators.cpp\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"unsupported binary operator\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"<<\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c">>\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"!\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"&&\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"||\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"^^\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"~\00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"&\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"|\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"^\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"==\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"!=\00", align 1
@.str.20 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.21 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"<=\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c">=\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"+=\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"-=\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"*=\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"/=\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"%=\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c"<<=\00", align 1
@.str.30 = private unnamed_addr constant [4 x i8] c">>=\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"&=\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"|=\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"^=\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"++\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.37 = private unnamed_addr constant [26 x i8] c"unsupported operator: %d\0A\00", align 1
@switch.table._ZNK4SkSL8Operator19getBinaryPrecedenceEv = private unnamed_addr constant [38 x i32] [i32 17, i32 4, i32 4, i32 5, i32 5, i32 4, i32 4, i32 4, i32 6, i32 6, i32 11, i32 10, i32 9, i32 4, i32 14, i32 13, i32 12, i32 4, i32 4, i32 4, i32 4, i32 16, i32 8, i32 8, i32 7, i32 7, i32 7, i32 7, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16], align 4
@switch.table._ZNK4SkSL8Operator12operatorNameEv = private unnamed_addr constant [38 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i64 0, i64 0)], align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK4SkSL8Operator19getBinaryPrecedenceEv(%"class.SkSL::Operator"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, -43
  %5 = icmp ult i32 %4, 38
  br i1 %5, label %7, label %6

6:                                                ; preds = %7, %1
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 49, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0)) #4
  unreachable

7:                                                ; preds = %1
  %8 = zext i32 %4 to i64
  %9 = lshr i64 274875932665, %8
  %10 = and i64 %9, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %6, label %12

12:                                               ; preds = %7
  %13 = sext i32 %4 to i64
  %14 = getelementptr inbounds [38 x i32], [38 x i32]* @switch.table._ZNK4SkSL8Operator19getBinaryPrecedenceEv, i64 0, i64 %13
  %15 = load i32, i32* %14, align 4
  ret i32 %15
}

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4SkSL8Operator10isOperatorEv(%"class.SkSL::Operator"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, -43
  %5 = icmp ult i32 %4, 38
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = zext i32 %4 to i38
  %8 = lshr i38 -1835009, %7
  %9 = and i38 %8, 1
  %10 = icmp ne i38 %9, 0
  ret i1 %10

11:                                               ; preds = %1
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZNK4SkSL8Operator12operatorNameEv(%"class.SkSL::Operator"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, -43
  %5 = icmp ult i32 %4, 38
  br i1 %5, label %7, label %6

6:                                                ; preds = %7, %1
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 134, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.37, i64 0, i64 0), i32 %3) #4
  unreachable

7:                                                ; preds = %1
  %8 = zext i32 %4 to i64
  %9 = lshr i64 274876071935, %8
  %10 = and i64 %9, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %6, label %12

12:                                               ; preds = %7
  %13 = sext i32 %4 to i64
  %14 = getelementptr inbounds [38 x i8*], [38 x i8*]* @switch.table._ZNK4SkSL8Operator12operatorNameEv, i64 0, i64 %13
  %15 = load i8*, i8** %14, align 8
  ret i8* %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4SkSL8Operator12isAssignmentEv(%"class.SkSL::Operator"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, -64
  %5 = icmp ult i32 %4, 17
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = trunc i32 %4 to i17
  %8 = lshr i17 -127, %7
  %9 = and i17 %8, 1
  %10 = icmp ne i17 %9, 0
  ret i1 %10

11:                                               ; preds = %1
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK4SkSL8Operator16removeAssignmentEv(%"class.SkSL::Operator"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, -71
  %5 = icmp ult i32 %4, 10
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  %7 = add i32 %3, -25
  ret i32 %7

8:                                                ; preds = %1
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4SkSL8Operator9isLogicalEv(%"class.SkSL::Operator"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, -67
  %5 = icmp ult i32 %4, 4
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4SkSL8Operator27isOnlyValidForIntegralTypesEv(%"class.SkSL::Operator"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, -50
  %5 = icmp ult i32 %4, 31
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = trunc i32 %4 to i31
  %8 = lshr i31 -33554369, %7
  %9 = and i31 %8, 1
  %10 = icmp ne i31 %9, 0
  ret i1 %10

11:                                               ; preds = %1
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4SkSL8Operator24isValidForMatrixOrVectorEv(%"class.SkSL::Operator"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, -46
  %5 = icmp ult i32 %4, 35
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = zext i32 %4 to i35
  %8 = lshr i35 -33553409, %7
  %9 = and i35 %8, 1
  %10 = icmp ne i35 %9, 0
  ret i1 %10

11:                                               ; preds = %1
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Operator16isMatrixMultiplyERKNS_4TypeES3_(%"class.SkSL::Operator"* nocapture readonly, %"class.SkSL::Type"* nocapture readonly dereferenceable(184), %"class.SkSL::Type"* nocapture readonly dereferenceable(184)) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %19 [
    i32 48, label %6
    i32 73, label %6
  ]

6:                                                ; preds = %3, %3
  %7 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  switch i32 %8, label %19 [
    i32 4, label %9
    i32 11, label %15
  ]

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 4
  %13 = icmp eq i32 %11, 11
  %14 = or i1 %12, %13
  ret i1 %14

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 3
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 4
  br label %19

19:                                               ; preds = %6, %3, %15
  %20 = phi i1 [ %18, %15 ], [ false, %3 ], [ false, %6 ]
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL8Operator19determineBinaryTypeERKNS_7ContextERKNS_4TypeES6_PPS5_S8_S8_(%"class.SkSL::Operator"*, %"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Type"* dereferenceable(184), %"class.SkSL::Type"* dereferenceable(184), %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.SkSL::Type"**) local_unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %1, i64 0, i32 4
  %9 = load %"struct.SkSL::ProgramConfig"*, %"struct.SkSL::ProgramConfig"** %8, align 8
  %10 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %9, i64 0, i32 1, i32 15
  %11 = load i8, i8* %10, align 1, !range !2
  %12 = icmp ne i8 %11, 0
  %13 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %0, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  switch i32 %14, label %92 [
    i32 64, label %15
    i32 65, label %23
    i32 66, label %23
    i32 57, label %65
    i32 59, label %65
    i32 58, label %65
    i32 43, label %91
  ]

15:                                               ; preds = %7
  store %"class.SkSL::Type"* %2, %"class.SkSL::Type"** %4, align 8
  store %"class.SkSL::Type"* %2, %"class.SkSL::Type"** %5, align 8
  store %"class.SkSL::Type"* %2, %"class.SkSL::Type"** %6, align 8
  %16 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %3, %"class.SkSL::Type"* dereferenceable(184) %2) #5
  %17 = extractvalue { i64, i8 } %16, 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %283

19:                                               ; preds = %15
  %20 = extractvalue { i64, i8 } %16, 0
  %21 = icmp ult i64 %20, 4294967296
  %22 = or i1 %12, %21
  br label %283

23:                                               ; preds = %7, %7
  %24 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %3, %"class.SkSL::Type"* dereferenceable(184) %2) #5
  %25 = extractvalue { i64, i8 } %24, 0
  %26 = extractvalue { i64, i8 } %24, 1
  %27 = trunc i64 %25 to i32
  %28 = lshr i64 %25, 32
  %29 = trunc i64 %28 to i32
  %30 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %2, %"class.SkSL::Type"* dereferenceable(184) %3) #5
  %31 = extractvalue { i64, i8 } %30, 0
  %32 = extractvalue { i64, i8 } %30, 1
  %33 = lshr i64 %31, 32
  %34 = trunc i64 %33 to i32
  %35 = trunc i64 %31 to i32
  %36 = icmp ult i8 %26, %32
  br i1 %36, label %45, label %37

37:                                               ; preds = %23
  %38 = icmp ugt i8 %26, %32
  br i1 %38, label %55, label %39

39:                                               ; preds = %37
  %40 = icmp slt i32 %29, %34
  br i1 %40, label %45, label %41

41:                                               ; preds = %39
  %42 = icmp sle i32 %29, %34
  %43 = icmp slt i32 %27, %35
  %44 = and i1 %43, %42
  br i1 %44, label %45, label %55

45:                                               ; preds = %41, %39, %23
  %46 = icmp eq i8 %26, 0
  %47 = icmp eq i32 %29, 0
  %48 = or i1 %12, %47
  %49 = and i1 %46, %48
  br i1 %49, label %50, label %283

50:                                               ; preds = %45
  store %"class.SkSL::Type"* %2, %"class.SkSL::Type"** %4, align 8
  store %"class.SkSL::Type"* %2, %"class.SkSL::Type"** %5, align 8
  %51 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %1, i64 0, i32 0, i32 24, i32 0, i32 0, i32 0
  %52 = bitcast %"class.SkSL::Type"** %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %"class.SkSL::Type"** %6 to i64*
  store i64 %53, i64* %54, align 8
  br label %283

55:                                               ; preds = %41, %37
  %56 = icmp eq i8 %32, 0
  %57 = icmp eq i32 %34, 0
  %58 = or i1 %12, %57
  %59 = and i1 %56, %58
  br i1 %59, label %60, label %283

60:                                               ; preds = %55
  store %"class.SkSL::Type"* %3, %"class.SkSL::Type"** %4, align 8
  store %"class.SkSL::Type"* %3, %"class.SkSL::Type"** %5, align 8
  %61 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %1, i64 0, i32 0, i32 24, i32 0, i32 0, i32 0
  %62 = bitcast %"class.SkSL::Type"** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = bitcast %"class.SkSL::Type"** %6 to i64*
  store i64 %63, i64* %64, align 8
  br label %283

65:                                               ; preds = %7, %7, %7
  %66 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %1, i64 0, i32 0, i32 24, i32 0, i32 0, i32 0
  %67 = bitcast %"class.SkSL::Type"** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.SkSL::Type"** %4 to i64*
  store i64 %68, i64* %69, align 8
  %70 = load i64, i64* %67, align 8
  %71 = bitcast %"class.SkSL::Type"** %5 to i64*
  store i64 %70, i64* %71, align 8
  %72 = load i64, i64* %67, align 8
  %73 = bitcast %"class.SkSL::Type"** %6 to i64*
  store i64 %72, i64* %73, align 8
  %74 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %66, align 8
  %75 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %2, %"class.SkSL::Type"* dereferenceable(184) %74) #5
  %76 = extractvalue { i64, i8 } %75, 1
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %78, label %283

78:                                               ; preds = %65
  %79 = extractvalue { i64, i8 } %75, 0
  %80 = icmp ult i64 %79, 4294967296
  %81 = or i1 %12, %80
  br i1 %81, label %82, label %283

82:                                               ; preds = %78
  %83 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %66, align 8
  %84 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %3, %"class.SkSL::Type"* dereferenceable(184) %83) #5
  %85 = extractvalue { i64, i8 } %84, 1
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %87, label %283

87:                                               ; preds = %82
  %88 = extractvalue { i64, i8 } %84, 0
  %89 = icmp ult i64 %88, 4294967296
  %90 = or i1 %12, %89
  br label %283

91:                                               ; preds = %7
  store %"class.SkSL::Type"* %2, %"class.SkSL::Type"** %4, align 8
  store %"class.SkSL::Type"* %3, %"class.SkSL::Type"** %5, align 8
  store %"class.SkSL::Type"* %3, %"class.SkSL::Type"** %6, align 8
  br label %283

92:                                               ; preds = %7
  %93 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 6
  %94 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %93, align 8
  %95 = icmp eq %"class.SkSL::Type"* %94, null
  %96 = select i1 %95, %"class.SkSL::Type"* %2, %"class.SkSL::Type"* %94
  %97 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %3, i64 0, i32 6
  %98 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %97, align 8
  %99 = icmp eq %"class.SkSL::Type"* %98, null
  %100 = select i1 %99, %"class.SkSL::Type"* %3, %"class.SkSL::Type"* %98
  %101 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %96, i64 0, i32 4
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, 3
  br i1 %103, label %283, label %104

104:                                              ; preds = %92
  %105 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %100, i64 0, i32 4
  %106 = load i32, i32* %105, align 4
  %107 = icmp eq i32 %106, 3
  br i1 %107, label %283, label %108

108:                                              ; preds = %104
  %109 = add i32 %14, -71
  %110 = icmp ult i32 %109, 10
  switch i32 %14, label %111 [
    i32 48, label %114
    i32 73, label %114
  ]

111:                                              ; preds = %108
  %112 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 3
  %113 = load i32, i32* %112, align 8
  br label %166

114:                                              ; preds = %108, %108
  %115 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 3
  %116 = load i32, i32* %115, align 8
  switch i32 %116, label %166 [
    i32 4, label %117
    i32 11, label %120
  ]

117:                                              ; preds = %114
  %118 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %3, i64 0, i32 3
  %119 = load i32, i32* %118, align 8
  switch i32 %119, label %166 [
    i32 11, label %124
    i32 4, label %124
  ]

120:                                              ; preds = %114
  %121 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %3, i64 0, i32 3
  %122 = load i32, i32* %121, align 8
  %123 = icmp eq i32 %122, 4
  br i1 %123, label %124, label %166

124:                                              ; preds = %117, %117, %120
  %125 = tail call zeroext i1 @_ZN4SkSL8Operator19determineBinaryTypeERKNS_7ContextERKNS_4TypeES6_PPS5_S8_S8_(%"class.SkSL::Operator"* %0, %"class.SkSL::Context"* dereferenceable(744) %1, %"class.SkSL::Type"* dereferenceable(184) %96, %"class.SkSL::Type"* dereferenceable(184) %100, %"class.SkSL::Type"** %4, %"class.SkSL::Type"** %5, %"class.SkSL::Type"** %6)
  br i1 %125, label %126, label %283

126:                                              ; preds = %124
  %127 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %6, align 8
  %128 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 8
  %129 = load i32, i32* %128, align 8
  %130 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 9
  %131 = load i32, i32* %130, align 4
  %132 = tail call dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL4Type10toCompoundERKNS_7ContextEii(%"class.SkSL::Type"* %127, %"class.SkSL::Context"* dereferenceable(744) %1, i32 %129, i32 %131) #5
  store %"class.SkSL::Type"* %132, %"class.SkSL::Type"** %4, align 8
  %133 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %6, align 8
  %134 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %3, i64 0, i32 8
  %135 = load i32, i32* %134, align 8
  %136 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %3, i64 0, i32 9
  %137 = load i32, i32* %136, align 4
  %138 = tail call dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL4Type10toCompoundERKNS_7ContextEii(%"class.SkSL::Type"* %133, %"class.SkSL::Context"* dereferenceable(744) %1, i32 %135, i32 %137) #5
  store %"class.SkSL::Type"* %138, %"class.SkSL::Type"** %5, align 8
  %139 = load i32, i32* %128, align 8
  %140 = load i32, i32* %130, align 4
  %141 = load i32, i32* %134, align 8
  %142 = load i32, i32* %136, align 4
  %143 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %3, i64 0, i32 3
  %144 = load i32, i32* %143, align 8
  %145 = icmp eq i32 %144, 11
  %146 = select i1 %145, i32 %142, i32 %141
  %147 = select i1 %145, i32 %141, i32 %142
  %148 = icmp sgt i32 %146, 1
  %149 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %6, align 8
  br i1 %148, label %150, label %152

150:                                              ; preds = %126
  %151 = tail call dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL4Type10toCompoundERKNS_7ContextEii(%"class.SkSL::Type"* %149, %"class.SkSL::Context"* dereferenceable(744) %1, i32 %146, i32 %140) #5
  br label %154

152:                                              ; preds = %126
  %153 = tail call dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL4Type10toCompoundERKNS_7ContextEii(%"class.SkSL::Type"* %149, %"class.SkSL::Context"* dereferenceable(744) %1, i32 %140, i32 %146) #5
  br label %154

154:                                              ; preds = %152, %150
  %155 = phi %"class.SkSL::Type"* [ %153, %152 ], [ %151, %150 ]
  store %"class.SkSL::Type"* %155, %"class.SkSL::Type"** %6, align 8
  br i1 %110, label %156, label %164

156:                                              ; preds = %154
  %157 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %155, i64 0, i32 8
  %158 = load i32, i32* %157, align 8
  %159 = icmp eq i32 %158, %139
  br i1 %159, label %160, label %283

160:                                              ; preds = %156
  %161 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %155, i64 0, i32 9
  %162 = load i32, i32* %161, align 4
  %163 = icmp eq i32 %162, %140
  br i1 %163, label %164, label %283

164:                                              ; preds = %160, %154
  %165 = icmp eq i32 %139, %147
  br label %283

166:                                              ; preds = %111, %117, %114, %120
  %167 = phi i32 [ %113, %111 ], [ 4, %117 ], [ %116, %114 ], [ 11, %120 ]
  %168 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 3
  switch i32 %14, label %191 [
    i32 46, label %169
    i32 47, label %169
    i32 48, label %169
    i32 49, label %169
    i32 50, label %169
    i32 51, label %169
    i32 52, label %169
    i32 55, label %169
    i32 53, label %169
    i32 54, label %169
    i32 71, label %169
    i32 72, label %169
    i32 73, label %169
    i32 74, label %169
    i32 75, label %169
    i32 76, label %169
    i32 77, label %169
    i32 80, label %169
    i32 78, label %169
    i32 79, label %169
  ]

169:                                              ; preds = %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166
  switch i32 %167, label %191 [
    i32 11, label %170
    i32 4, label %170
  ]

170:                                              ; preds = %169, %169
  %171 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %3, i64 0, i32 3
  %172 = load i32, i32* %171, align 8
  %173 = icmp eq i32 %172, 8
  br i1 %173, label %174, label %191

174:                                              ; preds = %170
  %175 = tail call zeroext i1 @_ZN4SkSL8Operator19determineBinaryTypeERKNS_7ContextERKNS_4TypeES6_PPS5_S8_S8_(%"class.SkSL::Operator"* %0, %"class.SkSL::Context"* dereferenceable(744) %1, %"class.SkSL::Type"* dereferenceable(184) %96, %"class.SkSL::Type"* dereferenceable(184) %3, %"class.SkSL::Type"** %4, %"class.SkSL::Type"** %5, %"class.SkSL::Type"** %6)
  br i1 %175, label %176, label %283

176:                                              ; preds = %174
  %177 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %4, align 8
  %178 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 8
  %179 = load i32, i32* %178, align 8
  %180 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 9
  %181 = load i32, i32* %180, align 4
  %182 = tail call dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL4Type10toCompoundERKNS_7ContextEii(%"class.SkSL::Type"* %177, %"class.SkSL::Context"* dereferenceable(744) %1, i32 %179, i32 %181) #5
  store %"class.SkSL::Type"* %182, %"class.SkSL::Type"** %4, align 8
  %183 = load i32, i32* %13, align 4
  %184 = add i32 %183, -67
  %185 = icmp ult i32 %184, 4
  br i1 %185, label %283, label %186

186:                                              ; preds = %176
  %187 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %6, align 8
  %188 = load i32, i32* %178, align 8
  %189 = load i32, i32* %180, align 4
  %190 = tail call dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL4Type10toCompoundERKNS_7ContextEii(%"class.SkSL::Type"* %187, %"class.SkSL::Context"* dereferenceable(744) %1, i32 %188, i32 %189) #5
  store %"class.SkSL::Type"* %190, %"class.SkSL::Type"** %6, align 8
  br label %283

191:                                              ; preds = %169, %166, %170
  %192 = phi i1 [ false, %169 ], [ true, %170 ], [ false, %166 ]
  %193 = phi i1 [ false, %169 ], [ false, %170 ], [ true, %166 ]
  %194 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %3, i64 0, i32 3
  %195 = load i32, i32* %194, align 8
  %196 = icmp ne i32 %195, 11
  %197 = icmp ne i32 %195, 4
  %198 = and i1 %196, %197
  %199 = or i1 %110, %198
  %200 = or i1 %193, %199
  %201 = xor i1 %200, true
  %202 = icmp eq i32 %167, 8
  %203 = and i1 %202, %201
  br i1 %203, label %204, label %221

204:                                              ; preds = %191
  %205 = tail call zeroext i1 @_ZN4SkSL8Operator19determineBinaryTypeERKNS_7ContextERKNS_4TypeES6_PPS5_S8_S8_(%"class.SkSL::Operator"* %0, %"class.SkSL::Context"* dereferenceable(744) %1, %"class.SkSL::Type"* dereferenceable(184) %2, %"class.SkSL::Type"* dereferenceable(184) %100, %"class.SkSL::Type"** %4, %"class.SkSL::Type"** %5, %"class.SkSL::Type"** %6)
  br i1 %205, label %206, label %283

206:                                              ; preds = %204
  %207 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %5, align 8
  %208 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %3, i64 0, i32 8
  %209 = load i32, i32* %208, align 8
  %210 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %3, i64 0, i32 9
  %211 = load i32, i32* %210, align 4
  %212 = tail call dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL4Type10toCompoundERKNS_7ContextEii(%"class.SkSL::Type"* %207, %"class.SkSL::Context"* dereferenceable(744) %1, i32 %209, i32 %211) #5
  store %"class.SkSL::Type"* %212, %"class.SkSL::Type"** %5, align 8
  %213 = load i32, i32* %13, align 4
  %214 = add i32 %213, -67
  %215 = icmp ult i32 %214, 4
  br i1 %215, label %283, label %216

216:                                              ; preds = %206
  %217 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %6, align 8
  %218 = load i32, i32* %208, align 8
  %219 = load i32, i32* %210, align 4
  %220 = tail call dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL4Type10toCompoundERKNS_7ContextEii(%"class.SkSL::Type"* %217, %"class.SkSL::Context"* dereferenceable(744) %1, i32 %218, i32 %219) #5
  store %"class.SkSL::Type"* %220, %"class.SkSL::Type"** %6, align 8
  br label %283

221:                                              ; preds = %191
  %222 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %3, %"class.SkSL::Type"* dereferenceable(184) %2) #5
  %223 = extractvalue { i64, i8 } %222, 0
  %224 = extractvalue { i64, i8 } %222, 1
  %225 = trunc i64 %223 to i32
  %226 = lshr i64 %223, 32
  %227 = trunc i64 %226 to i32
  br i1 %110, label %235, label %228

228:                                              ; preds = %221
  %229 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %2, %"class.SkSL::Type"* dereferenceable(184) %3) #5
  %230 = extractvalue { i64, i8 } %229, 0
  %231 = extractvalue { i64, i8 } %229, 1
  %232 = lshr i64 %230, 32
  %233 = trunc i64 %232 to i32
  %234 = trunc i64 %230 to i32
  br label %235

235:                                              ; preds = %221, %228
  %236 = phi i32 [ %233, %228 ], [ 0, %221 ]
  %237 = phi i32 [ %234, %228 ], [ 0, %221 ]
  %238 = phi i8 [ %231, %228 ], [ 1, %221 ]
  %239 = load i32, i32* %168, align 8
  %240 = icmp eq i32 %239, 8
  %241 = load i32, i32* %194, align 8
  %242 = icmp eq i32 %241, 8
  %243 = and i1 %240, %242
  %244 = or i1 %192, %243
  br i1 %244, label %245, label %283

245:                                              ; preds = %235
  %246 = load i32, i32* %13, align 4
  switch i32 %246, label %255 [
    i32 51, label %247
    i32 52, label %247
    i32 55, label %247
    i32 53, label %247
    i32 54, label %247
    i32 50, label %247
    i32 76, label %247
    i32 77, label %247
    i32 80, label %247
    i32 78, label %247
    i32 79, label %247
    i32 75, label %247
  ]

247:                                              ; preds = %245, %245, %245, %245, %245, %245, %245, %245, %245, %245, %245, %245
  %248 = load i32, i32* %101, align 4
  %249 = add i32 %248, -1
  %250 = icmp ult i32 %249, 2
  br i1 %250, label %251, label %283

251:                                              ; preds = %247
  %252 = load i32, i32* %105, align 4
  %253 = add i32 %252, -1
  %254 = icmp ult i32 %253, 2
  br i1 %254, label %255, label %283

255:                                              ; preds = %245, %251
  %256 = icmp eq i8 %224, 0
  %257 = icmp eq i32 %227, 0
  %258 = or i1 %12, %257
  %259 = and i1 %256, %258
  br i1 %259, label %260, label %268

260:                                              ; preds = %255
  %261 = icmp ne i8 %238, 0
  %262 = icmp sgt i32 %236, %227
  %263 = or i1 %261, %262
  br i1 %263, label %273, label %264

264:                                              ; preds = %260
  %265 = icmp sge i32 %236, %227
  %266 = icmp sgt i32 %237, %225
  %267 = and i1 %265, %266
  br i1 %267, label %273, label %268

268:                                              ; preds = %264, %255
  %269 = icmp eq i8 %238, 0
  %270 = icmp eq i32 %236, 0
  %271 = or i1 %12, %270
  %272 = and i1 %271, %269
  br i1 %272, label %273, label %283

273:                                              ; preds = %260, %268, %264
  %274 = phi %"class.SkSL::Type"* [ %2, %260 ], [ %2, %264 ], [ %3, %268 ]
  store %"class.SkSL::Type"* %274, %"class.SkSL::Type"** %4, align 8
  store %"class.SkSL::Type"* %274, %"class.SkSL::Type"** %5, align 8
  store %"class.SkSL::Type"* %274, %"class.SkSL::Type"** %6, align 8
  %275 = load i32, i32* %13, align 4
  %276 = add i32 %275, -67
  %277 = icmp ult i32 %276, 4
  br i1 %277, label %278, label %283

278:                                              ; preds = %273
  %279 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %1, i64 0, i32 0, i32 24, i32 0, i32 0, i32 0
  %280 = bitcast %"class.SkSL::Type"** %279 to i64*
  %281 = load i64, i64* %280, align 8
  %282 = bitcast %"class.SkSL::Type"** %6 to i64*
  store i64 %281, i64* %282, align 8
  br label %283

283:                                              ; preds = %251, %247, %278, %273, %268, %235, %50, %60, %45, %55, %65, %164, %160, %156, %87, %82, %19, %15, %104, %92, %174, %186, %176, %206, %216, %204, %124, %78, %91
  %284 = phi i1 [ true, %91 ], [ false, %78 ], [ false, %104 ], [ false, %92 ], [ false, %124 ], [ false, %174 ], [ true, %186 ], [ true, %176 ], [ false, %204 ], [ true, %216 ], [ true, %206 ], [ false, %15 ], [ %22, %19 ], [ false, %82 ], [ %90, %87 ], [ %165, %164 ], [ false, %160 ], [ false, %156 ], [ false, %65 ], [ true, %50 ], [ true, %60 ], [ false, %45 ], [ false, %55 ], [ false, %251 ], [ false, %247 ], [ true, %278 ], [ true, %273 ], [ false, %268 ], [ false, %235 ]
  ret i1 %284
}

declare { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"*, %"class.SkSL::Type"* dereferenceable(184)) local_unnamed_addr #3

declare dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL4Type10toCompoundERKNS_7ContextEii(%"class.SkSL::Type"*, %"class.SkSL::Context"* dereferenceable(744), i32, i32) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
