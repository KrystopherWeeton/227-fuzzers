; ModuleID = '../../third_party/blink/renderer/platform/wtf/text/string_impl.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/text/string_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.WTF::Threading"*, %"class.base::ThreadLocalStorage::Slot" }
%"class.WTF::Threading" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.15", i32, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.WTF::AtomicStringTable"* }
%"class.WTF::AtomicStringTable" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.9" }
%"class.WTF::HashTable.9" = type <{ %"class.WTF::StringImpl"**, i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.WTF::ICUConverterWrapper"* }
%"struct.WTF::ICUConverterWrapper" = type opaque
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<WTF::HashMap<unsigned int, WTF::StringImpl *, WTF::AlreadyHashed, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::StringImpl *>, WTF::PartitionAllocator> >::InstanceStorage" }
%"class.WTF::StaticSingleton<WTF::HashMap<unsigned int, WTF::StringImpl *, WTF::AlreadyHashed, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::StringImpl *>, WTF::PartitionAllocator> >::InstanceStorage" = type { [24 x i8] }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { i32, %"class.WTF::StringImpl"* }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.3 }
%class.scoped_refptr.3 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.4" }
%"struct.std::__1::atomic.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl.7" }
%"struct.std::__1::__cxx_atomic_impl.7" = type { %"struct.std::__1::__cxx_atomic_base_impl.8" }
%"struct.std::__1::__cxx_atomic_base_impl.8" = type { i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

$_ZN3WTF10StringImpl22StripMatchedCharactersINS_23SpaceOrNewlinePredicateEEE13scoped_refptrIS0_ET_ = comdat any

$_ZN3WTF10StringImpl22StripMatchedCharactersINS_14UCharPredicateEEE13scoped_refptrIS0_ET_ = comdat any

$_ZN3WTF10StringImpl32SimplifyMatchedCharactersToSpaceIhNS_23SpaceOrNewlinePredicateEEE13scoped_refptrIS0_ET0_NS_13StripBehaviorE = comdat any

$_ZN3WTF10StringImpl32SimplifyMatchedCharactersToSpaceIDsNS_23SpaceOrNewlinePredicateEEE13scoped_refptrIS0_ET0_NS_13StripBehaviorE = comdat any

$_ZN3WTF10StringImpl32SimplifyMatchedCharactersToSpaceIhNS_14UCharPredicateEEE13scoped_refptrIS0_ET0_NS_13StripBehaviorE = comdat any

$_ZN3WTF10StringImpl32SimplifyMatchedCharactersToSpaceIDsNS_14UCharPredicateEEE13scoped_refptrIS0_ET0_NS_13StripBehaviorE = comdat any

$_ZN3WTF32CodeUnitCompareIgnoringASCIICaseIhEEiPKNS_10StringImplEPKT_j = comdat any

$_ZN3WTF32CodeUnitCompareIgnoringASCIICaseIDsEEiPKNS_10StringImplEPKT_j = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISB_S6_SC_EERjRS3_EENS_18HashTableAddResultISD_S4_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE6ExpandEPS4_ = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSE_ = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj = comdat any

@.str = private unnamed_addr constant [16 x i8] c"WTF::StringImpl\00", align 1
@_ZN3WTF10StringImpl6empty_E = hidden local_unnamed_addr global %"class.WTF::StringImpl"* bitcast ([2 x i8*]* @_ZN3WTF21g_global_emptyStorageE to %"class.WTF::StringImpl"*), align 8
@_ZN3WTF10StringImpl29highest_static_string_length_E = hidden local_unnamed_addr global i32 0, align 4
@_ZN3WTF21g_global_emptyStorageE = hidden global [2 x i8*] zeroinitializer, align 16
@_ZN3WTF14g_global_emptyE = hidden local_unnamed_addr constant %"class.WTF::StringImpl"* bitcast ([2 x i8*]* @_ZN3WTF21g_global_emptyStorageE to %"class.WTF::StringImpl"*), align 8
@_ZN3WTF27g_global_empty16_bitStorageE = hidden global [2 x i8*] zeroinitializer, align 16
@_ZN3WTF20g_global_empty16_bitE = hidden local_unnamed_addr constant %"class.WTF::StringImpl"* bitcast ([2 x i8*]* @_ZN3WTF27g_global_empty16_bitStorageE to %"class.WTF::StringImpl"*), align 8
@_ZN3WTF10StringImpl12empty16_bit_E = hidden local_unnamed_addr global %"class.WTF::StringImpl"* bitcast ([2 x i8*]* @_ZN3WTF27g_global_empty16_bitStorageE to %"class.WTF::StringImpl"*), align 8
@.str.1 = private unnamed_addr constant [66 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_impl.cc\00", align 1
@.str.2 = private unnamed_addr constant [85 x i8] c"Benign race on the reference counter of a static string created by StringImpl::empty\00", align 1
@.str.3 = private unnamed_addr constant [90 x i8] c"Benign race on the reference counter of a static string created by StringImpl::empty16Bit\00", align 1
@.str.4 = private unnamed_addr constant [90 x i8] c"length <= ((std::numeric_limits<wtf_size_t>::max() - sizeof(StringImpl)) / sizeof(LChar))\00", align 1
@.str.5 = private unnamed_addr constant [92 x i8] c"Benign race on the reference counter of a static string created by StringImpl::createStatic\00", align 1
@.str.6 = private unnamed_addr constant [67 x i8] c"length_ <= static_cast<wtf_size_t>(numeric_limits<int32_t>::max())\00", align 1
@_ZN3WTF10StringImpl20kLatin1CaseFoldTableE = hidden local_unnamed_addr constant [256 x i16] [i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 128, i16 129, i16 130, i16 131, i16 132, i16 133, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 141, i16 142, i16 143, i16 144, i16 145, i16 146, i16 147, i16 148, i16 149, i16 150, i16 151, i16 152, i16 153, i16 154, i16 155, i16 156, i16 157, i16 158, i16 159, i16 160, i16 161, i16 162, i16 163, i16 164, i16 165, i16 166, i16 167, i16 168, i16 169, i16 170, i16 171, i16 172, i16 173, i16 174, i16 175, i16 176, i16 177, i16 178, i16 179, i16 180, i16 956, i16 182, i16 183, i16 184, i16 185, i16 186, i16 187, i16 188, i16 189, i16 190, i16 191, i16 224, i16 225, i16 226, i16 227, i16 228, i16 229, i16 230, i16 231, i16 232, i16 233, i16 234, i16 235, i16 236, i16 237, i16 238, i16 239, i16 240, i16 241, i16 242, i16 243, i16 244, i16 245, i16 246, i16 215, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 223, i16 224, i16 225, i16 226, i16 227, i16 228, i16 229, i16 230, i16 231, i16 232, i16 233, i16 234, i16 235, i16 236, i16 237, i16 238, i16 239, i16 240, i16 241, i16 242, i16 243, i16 244, i16 245, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255], align 16
@.str.7 = private unnamed_addr constant [88 x i8] c"(length() - length_to_replace) < (numeric_limits<wtf_size_t>::max() - length_to_insert)\00", align 1
@.str.8 = private unnamed_addr constant [85 x i8] c"!rep_str_length || match_count <= numeric_limits<wtf_size_t>::max() / rep_str_length\00", align 1
@.str.9 = private unnamed_addr constant [62 x i8] c"new_size < (numeric_limits<wtf_size_t>::max() - replace_size)\00", align 1
@.str.10 = private unnamed_addr constant [79 x i8] c"new_size <= (numeric_limits<wtf_size_t>::max() - match_count * rep_str_length)\00", align 1
@_ZN3WTF9Threading12static_data_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_9ThreadingEEEPKcv = private unnamed_addr constant [62 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::Threading]\00", align 1
@_ZZN3WTFL13StaticStringsEvE16s_static_strings = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN3WTFL13StaticStringsEvE16s_static_strings = internal global i64 0, align 8
@_ZN3WTF19kASCIICaseFoldTableE = external local_unnamed_addr constant [256 x i8], align 16
@.str.11 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.12 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIjPNS_10StringImplEEEEEPKcv = private unnamed_addr constant [98 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<unsigned int, WTF::StringImpl *>]\00", align 1
@.str.13 = private unnamed_addr constant [39 x i8] c"!static_cast<int>( new_capacity >> 31)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN3WTF10StringImplnwEm(i64) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  ret i8* %2
}

declare i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF10StringImpldlEPv(i8*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* %0) #15
  ret void
}

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  %4 = and i32 %3, 2
  %5 = icmp ne i32 %4, 0
  %6 = icmp eq %"class.WTF::StringImpl"* %0, null
  %7 = or i1 %6, %5
  br i1 %7, label %27, label %8

8:                                                ; preds = %1
  %9 = load atomic i32, i32* %2 acquire, align 4
  %10 = and i32 %9, 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %25, label %12

12:                                               ; preds = %8
  %13 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN3WTF9Threading12static_data_E, align 8
  %14 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %13, i64 0, i32 1
  %15 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %14) #15
  %16 = bitcast i8* %15 to %"class.WTF::Threading"*
  %17 = icmp eq i8* %15, null
  br i1 %17, label %18, label %21, !prof !2

18:                                               ; preds = %12
  %19 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 24, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_9ThreadingEEEPKcv, i64 0, i64 0)) #15
  %20 = bitcast i8* %19 to %"class.WTF::Threading"*
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %14, i8* %19) #15
  tail call void @_ZN3WTF9ThreadingC1Ev(%"class.WTF::Threading"* %20) #15
  br label %21

21:                                               ; preds = %18, %12
  %22 = phi %"class.WTF::Threading"* [ %20, %18 ], [ %16, %12 ]
  %23 = getelementptr inbounds %"class.WTF::Threading", %"class.WTF::Threading"* %22, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::AtomicStringTable"*, %"class.WTF::AtomicStringTable"** %23, align 8
  tail call void @_ZN3WTF17AtomicStringTable6RemoveEPNS_10StringImplE(%"class.WTF::AtomicStringTable"* %24, %"class.WTF::StringImpl"* nonnull %0) #15
  br label %25

25:                                               ; preds = %8, %21
  %26 = bitcast %"class.WTF::StringImpl"* %0 to i8*
  tail call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* %26) #15
  br label %27

27:                                               ; preds = %25, %1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  %4 = and i32 %3, 1
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %5, label %144, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.WTF::StringImpl"* %6 to i8*
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  %12 = icmp eq i32 %10, 0
  br i1 %12, label %138, label %13

13:                                               ; preds = %7
  %14 = icmp ult i32 %10, 32
  br i1 %14, label %15, label %19

15:                                               ; preds = %93, %13
  %16 = phi i64 [ 0, %13 ], [ %20, %93 ]
  %17 = phi i1 [ false, %13 ], [ %117, %93 ]
  %18 = phi i8 [ 0, %13 ], [ %107, %93 ]
  br label %126

19:                                               ; preds = %13
  %20 = and i64 %11, 4294967264
  %21 = add nsw i64 %20, -32
  %22 = lshr exact i64 %21, 5
  %23 = add nuw nsw i64 %22, 1
  %24 = and i64 %23, 1
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %67, label %26

26:                                               ; preds = %19
  %27 = sub nuw nsw i64 %23, %24
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i64 [ 0, %26 ], [ %64, %28 ]
  %30 = phi <16 x i1> [ zeroinitializer, %26 ], [ %62, %28 ]
  %31 = phi <16 x i1> [ zeroinitializer, %26 ], [ %63, %28 ]
  %32 = phi <16 x i8> [ zeroinitializer, %26 ], [ %56, %28 ]
  %33 = phi <16 x i8> [ zeroinitializer, %26 ], [ %57, %28 ]
  %34 = phi i64 [ %27, %26 ], [ %65, %28 ]
  %35 = getelementptr inbounds i8, i8* %8, i64 %29
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = getelementptr inbounds i8, i8* %35, i64 16
  %39 = bitcast i8* %38 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 1
  %41 = or <16 x i8> %37, %32
  %42 = or <16 x i8> %40, %33
  %43 = add <16 x i8> %37, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %44 = add <16 x i8> %40, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %45 = icmp ult <16 x i8> %43, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %46 = icmp ult <16 x i8> %44, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %47 = or <16 x i1> %30, %45
  %48 = or <16 x i1> %31, %46
  %49 = or i64 %29, 32
  %50 = getelementptr inbounds i8, i8* %8, i64 %49
  %51 = bitcast i8* %50 to <16 x i8>*
  %52 = load <16 x i8>, <16 x i8>* %51, align 1
  %53 = getelementptr inbounds i8, i8* %50, i64 16
  %54 = bitcast i8* %53 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1
  %56 = or <16 x i8> %52, %41
  %57 = or <16 x i8> %55, %42
  %58 = add <16 x i8> %52, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %59 = add <16 x i8> %55, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %60 = icmp ult <16 x i8> %58, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %61 = icmp ult <16 x i8> %59, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %62 = or <16 x i1> %47, %60
  %63 = or <16 x i1> %48, %61
  %64 = add i64 %29, 64
  %65 = add i64 %34, -2
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %28, !llvm.loop !3

67:                                               ; preds = %28, %19
  %68 = phi <16 x i8> [ undef, %19 ], [ %56, %28 ]
  %69 = phi <16 x i8> [ undef, %19 ], [ %57, %28 ]
  %70 = phi <16 x i1> [ undef, %19 ], [ %62, %28 ]
  %71 = phi <16 x i1> [ undef, %19 ], [ %63, %28 ]
  %72 = phi i64 [ 0, %19 ], [ %64, %28 ]
  %73 = phi <16 x i1> [ zeroinitializer, %19 ], [ %62, %28 ]
  %74 = phi <16 x i1> [ zeroinitializer, %19 ], [ %63, %28 ]
  %75 = phi <16 x i8> [ zeroinitializer, %19 ], [ %56, %28 ]
  %76 = phi <16 x i8> [ zeroinitializer, %19 ], [ %57, %28 ]
  %77 = icmp eq i64 %24, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %67
  %79 = getelementptr inbounds i8, i8* %8, i64 %72
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = getelementptr inbounds i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1
  %85 = add <16 x i8> %84, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %86 = icmp ult <16 x i8> %85, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %87 = or <16 x i1> %74, %86
  %88 = add <16 x i8> %81, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %89 = icmp ult <16 x i8> %88, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %90 = or <16 x i1> %73, %89
  %91 = or <16 x i8> %84, %76
  %92 = or <16 x i8> %81, %75
  br label %93

93:                                               ; preds = %67, %78
  %94 = phi <16 x i8> [ %68, %67 ], [ %92, %78 ]
  %95 = phi <16 x i8> [ %69, %67 ], [ %91, %78 ]
  %96 = phi <16 x i1> [ %70, %67 ], [ %90, %78 ]
  %97 = phi <16 x i1> [ %71, %67 ], [ %87, %78 ]
  %98 = or <16 x i8> %95, %94
  %99 = shufflevector <16 x i8> %98, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %100 = or <16 x i8> %98, %99
  %101 = shufflevector <16 x i8> %100, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %102 = or <16 x i8> %100, %101
  %103 = shufflevector <16 x i8> %102, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = or <16 x i8> %102, %103
  %105 = shufflevector <16 x i8> %104, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %106 = or <16 x i8> %104, %105
  %107 = extractelement <16 x i8> %106, i32 0
  %108 = or <16 x i1> %97, %96
  %109 = shufflevector <16 x i1> %108, <16 x i1> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = or <16 x i1> %108, %109
  %111 = shufflevector <16 x i1> %110, <16 x i1> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = or <16 x i1> %110, %111
  %113 = shufflevector <16 x i1> %112, <16 x i1> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %114 = or <16 x i1> %112, %113
  %115 = shufflevector <16 x i1> %114, <16 x i1> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %116 = or <16 x i1> %114, %115
  %117 = extractelement <16 x i1> %116, i32 0
  %118 = icmp eq i64 %20, %11
  br i1 %118, label %119, label %15

119:                                              ; preds = %126, %93
  %120 = phi i8 [ %107, %93 ], [ %132, %126 ]
  %121 = phi i1 [ %117, %93 ], [ %135, %126 ]
  %122 = xor i1 %121, true
  %123 = lshr i8 %120, 7
  %124 = zext i1 %122 to i8
  %125 = shl nuw nsw i8 %124, 1
  br label %138

126:                                              ; preds = %15, %126
  %127 = phi i64 [ %136, %126 ], [ %16, %15 ]
  %128 = phi i1 [ %135, %126 ], [ %17, %15 ]
  %129 = phi i8 [ %132, %126 ], [ %18, %15 ]
  %130 = getelementptr inbounds i8, i8* %8, i64 %127
  %131 = load i8, i8* %130, align 1
  %132 = or i8 %131, %129
  %133 = add i8 %131, -65
  %134 = icmp ult i8 %133, 26
  %135 = or i1 %128, %134
  %136 = add nuw nsw i64 %127, 1
  %137 = icmp eq i64 %136, %11
  br i1 %137, label %119, label %126, !llvm.loop !5

138:                                              ; preds = %7, %119
  %139 = phi i8 [ 0, %7 ], [ %123, %119 ]
  %140 = phi i8 [ 2, %7 ], [ %125, %119 ]
  %141 = or i8 %140, %139
  %142 = xor i8 %141, 1
  %143 = zext i8 %142 to i32
  br label %276

144:                                              ; preds = %1
  %145 = bitcast %"class.WTF::StringImpl"* %6 to i16*
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %147 = load i32, i32* %146, align 4
  %148 = zext i32 %147 to i64
  %149 = icmp eq i32 %147, 0
  br i1 %149, label %272, label %150

150:                                              ; preds = %144
  %151 = icmp ult i32 %147, 16
  br i1 %151, label %152, label %156

152:                                              ; preds = %230, %150
  %153 = phi i64 [ 0, %150 ], [ %157, %230 ]
  %154 = phi i1 [ false, %150 ], [ %250, %230 ]
  %155 = phi i16 [ 0, %150 ], [ %242, %230 ]
  br label %260

156:                                              ; preds = %150
  %157 = and i64 %148, 4294967280
  %158 = add nsw i64 %157, -16
  %159 = lshr exact i64 %158, 4
  %160 = add nuw nsw i64 %159, 1
  %161 = and i64 %160, 1
  %162 = icmp eq i64 %158, 0
  br i1 %162, label %204, label %163

163:                                              ; preds = %156
  %164 = sub nuw nsw i64 %160, %161
  br label %165

165:                                              ; preds = %165, %163
  %166 = phi i64 [ 0, %163 ], [ %201, %165 ]
  %167 = phi <8 x i1> [ zeroinitializer, %163 ], [ %199, %165 ]
  %168 = phi <8 x i1> [ zeroinitializer, %163 ], [ %200, %165 ]
  %169 = phi <8 x i16> [ zeroinitializer, %163 ], [ %193, %165 ]
  %170 = phi <8 x i16> [ zeroinitializer, %163 ], [ %194, %165 ]
  %171 = phi i64 [ %164, %163 ], [ %202, %165 ]
  %172 = getelementptr inbounds i16, i16* %145, i64 %166
  %173 = bitcast i16* %172 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 2
  %175 = getelementptr inbounds i16, i16* %172, i64 8
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2
  %178 = or <8 x i16> %174, %169
  %179 = or <8 x i16> %177, %170
  %180 = add <8 x i16> %174, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %181 = add <8 x i16> %177, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %182 = icmp ult <8 x i16> %180, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %183 = icmp ult <8 x i16> %181, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %184 = or <8 x i1> %167, %182
  %185 = or <8 x i1> %168, %183
  %186 = or i64 %166, 16
  %187 = getelementptr inbounds i16, i16* %145, i64 %186
  %188 = bitcast i16* %187 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 2
  %190 = getelementptr inbounds i16, i16* %187, i64 8
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2
  %193 = or <8 x i16> %189, %178
  %194 = or <8 x i16> %192, %179
  %195 = add <8 x i16> %189, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %196 = add <8 x i16> %192, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %197 = icmp ult <8 x i16> %195, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %198 = icmp ult <8 x i16> %196, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %199 = or <8 x i1> %184, %197
  %200 = or <8 x i1> %185, %198
  %201 = add i64 %166, 32
  %202 = add i64 %171, -2
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %165, !llvm.loop !7

204:                                              ; preds = %165, %156
  %205 = phi <8 x i16> [ undef, %156 ], [ %193, %165 ]
  %206 = phi <8 x i16> [ undef, %156 ], [ %194, %165 ]
  %207 = phi <8 x i1> [ undef, %156 ], [ %199, %165 ]
  %208 = phi <8 x i1> [ undef, %156 ], [ %200, %165 ]
  %209 = phi i64 [ 0, %156 ], [ %201, %165 ]
  %210 = phi <8 x i1> [ zeroinitializer, %156 ], [ %199, %165 ]
  %211 = phi <8 x i1> [ zeroinitializer, %156 ], [ %200, %165 ]
  %212 = phi <8 x i16> [ zeroinitializer, %156 ], [ %193, %165 ]
  %213 = phi <8 x i16> [ zeroinitializer, %156 ], [ %194, %165 ]
  %214 = icmp eq i64 %161, 0
  br i1 %214, label %230, label %215

215:                                              ; preds = %204
  %216 = getelementptr inbounds i16, i16* %145, i64 %209
  %217 = bitcast i16* %216 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 2
  %219 = getelementptr inbounds i16, i16* %216, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 2
  %222 = add <8 x i16> %221, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %223 = icmp ult <8 x i16> %222, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %224 = or <8 x i1> %211, %223
  %225 = add <8 x i16> %218, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %226 = icmp ult <8 x i16> %225, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %227 = or <8 x i1> %210, %226
  %228 = or <8 x i16> %221, %213
  %229 = or <8 x i16> %218, %212
  br label %230

230:                                              ; preds = %204, %215
  %231 = phi <8 x i16> [ %205, %204 ], [ %229, %215 ]
  %232 = phi <8 x i16> [ %206, %204 ], [ %228, %215 ]
  %233 = phi <8 x i1> [ %207, %204 ], [ %227, %215 ]
  %234 = phi <8 x i1> [ %208, %204 ], [ %224, %215 ]
  %235 = or <8 x i16> %232, %231
  %236 = shufflevector <8 x i16> %235, <8 x i16> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %237 = or <8 x i16> %235, %236
  %238 = shufflevector <8 x i16> %237, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %239 = or <8 x i16> %237, %238
  %240 = shufflevector <8 x i16> %239, <8 x i16> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %241 = or <8 x i16> %239, %240
  %242 = extractelement <8 x i16> %241, i32 0
  %243 = or <8 x i1> %234, %233
  %244 = shufflevector <8 x i1> %243, <8 x i1> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %245 = or <8 x i1> %243, %244
  %246 = shufflevector <8 x i1> %245, <8 x i1> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %247 = or <8 x i1> %245, %246
  %248 = shufflevector <8 x i1> %247, <8 x i1> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %249 = or <8 x i1> %247, %248
  %250 = extractelement <8 x i1> %249, i32 0
  %251 = icmp eq i64 %157, %148
  br i1 %251, label %252, label %152

252:                                              ; preds = %260, %230
  %253 = phi i16 [ %242, %230 ], [ %266, %260 ]
  %254 = phi i1 [ %250, %230 ], [ %269, %260 ]
  %255 = icmp ult i16 %253, 128
  %256 = xor i1 %254, true
  %257 = zext i1 %255 to i32
  %258 = zext i1 %256 to i32
  %259 = shl nuw nsw i32 %258, 1
  br label %272

260:                                              ; preds = %152, %260
  %261 = phi i64 [ %270, %260 ], [ %153, %152 ]
  %262 = phi i1 [ %269, %260 ], [ %154, %152 ]
  %263 = phi i16 [ %266, %260 ], [ %155, %152 ]
  %264 = getelementptr inbounds i16, i16* %145, i64 %261
  %265 = load i16, i16* %264, align 2
  %266 = or i16 %265, %263
  %267 = add i16 %265, -65
  %268 = icmp ult i16 %267, 26
  %269 = or i1 %262, %268
  %270 = add nuw nsw i64 %261, 1
  %271 = icmp eq i64 %270, %148
  br i1 %271, label %252, label %260, !llvm.loop !8

272:                                              ; preds = %144, %252
  %273 = phi i32 [ 1, %144 ], [ %257, %252 ]
  %274 = phi i32 [ 2, %144 ], [ %259, %252 ]
  %275 = or i32 %274, %273
  br label %276

276:                                              ; preds = %272, %138
  %277 = phi i32 [ %143, %138 ], [ %275, %272 ]
  %278 = and i32 %277, 1
  %279 = icmp eq i32 %278, 0
  %280 = select i1 %279, i32 8, i32 24
  %281 = shl nsw i32 %277, 4
  %282 = and i32 %281, 32
  %283 = or i32 %280, %282
  %284 = atomicrmw or i32* %2, i32 %283 monotonic
  ret i32 %283
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3WTF10StringImpl27IsSafeToSendToAnotherThreadEv(%"class.WTF::StringImpl"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  %4 = and i32 %3, 2
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %14

6:                                                ; preds = %1
  %7 = load atomic i32, i32* %2 acquire, align 4
  %8 = and i32 %7, 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 1
  br label %14

14:                                               ; preds = %6, %1, %10
  %15 = phi i1 [ true, %1 ], [ false, %6 ], [ %13, %10 ]
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i32 %0, 0
  br i1 %3, label %4, label %24

4:                                                ; preds = %2
  store i8* null, i8** %1, align 8
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %35, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %35

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #15
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %12
  tail call void @llvm.trap() #15
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %35

24:                                               ; preds = %2
  %25 = zext i32 %0 to i64
  %26 = add nuw nsw i64 %25, 12
  %27 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %26, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %28 = getelementptr inbounds i8, i8* %27, i64 12
  store i8* %28, i8** %1, align 8
  %29 = bitcast i8* %27 to %"class.WTF::StringImpl"*
  %30 = bitcast i8* %27 to i32*
  store i32 1, i32* %30, align 4
  %31 = getelementptr inbounds i8, i8* %27, i64 4
  %32 = bitcast i8* %31 to i32*
  store i32 %0, i32* %32, align 4
  %33 = getelementptr inbounds i8, i8* %27, i64 8
  %34 = bitcast i8* %33 to i32*
  store i32 1, i32* %34, align 4
  br label %35

35:                                               ; preds = %22, %7, %4, %24
  %36 = phi %"class.WTF::StringImpl"* [ %29, %24 ], [ null, %4 ], [ %5, %7 ], [ %5, %22 ]
  ret %"class.WTF::StringImpl"* %36
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i32 %0, 0
  br i1 %3, label %4, label %24

4:                                                ; preds = %2
  store i16* null, i16** %1, align 8
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %37, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %37

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #15
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %12
  tail call void @llvm.trap() #15
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %37

24:                                               ; preds = %2
  %25 = zext i32 %0 to i64
  %26 = shl nuw nsw i64 %25, 1
  %27 = add nuw nsw i64 %26, 12
  %28 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %27, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %29 = getelementptr inbounds i8, i8* %28, i64 12
  %30 = bitcast i16** %1 to i8**
  store i8* %29, i8** %30, align 8
  %31 = bitcast i8* %28 to %"class.WTF::StringImpl"*
  %32 = bitcast i8* %28 to i32*
  store i32 1, i32* %32, align 4
  %33 = getelementptr inbounds i8, i8* %28, i64 4
  %34 = bitcast i8* %33 to i32*
  store i32 %0, i32* %34, align 4
  %35 = getelementptr inbounds i8, i8* %28, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 0, i32* %36, align 4
  br label %37

37:                                               ; preds = %22, %7, %4, %24
  %38 = phi %"class.WTF::StringImpl"* [ %31, %24 ], [ null, %4 ], [ %5, %7 ], [ %5, %22 ]
  ret %"class.WTF::StringImpl"* %38
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.WTF::HashMap"* @_ZN3WTF10StringImpl16AllStaticStringsEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !9

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings) #15
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN3WTFL13StaticStringsEvE16s_static_strings, i64 0, i32 0, i32 0, i64 0), i8 0, i64 20, i1 false) #15
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings) #15
  br label %7

7:                                                ; preds = %0, %3, %6
  ret %"class.WTF::HashMap"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN3WTFL13StaticStringsEvE16s_static_strings to %"class.WTF::HashMap"*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3WTF10StringImpl19FreezeStaticStringsEv() local_unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF10StringImpl11InitStaticsEv() local_unnamed_addr #0 align 2 {
  %1 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %2 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  store i32 1, i32* %2, align 4
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 1
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 59, i32* %4, align 4
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = icmp ult i32 %5, 256
  br i1 %6, label %7, label %9

7:                                                ; preds = %0
  %8 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %1) #15
  br label %9

9:                                                ; preds = %0, %7
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl12empty16_bit_E, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  store i32 1, i32* %11, align 4
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 58, i32* %13, align 4
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = icmp ult i32 %14, 256
  br i1 %15, label %16, label %18

16:                                               ; preds = %9
  %17 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %10) #15
  br label %18

18:                                               ; preds = %9, %16
  %19 = load i8*, i8** bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i8**), align 8
  tail call void @WTFAnnotateBenignRaceSized(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 182, i8* %19, i64 12, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.2, i64 0, i64 0)) #15
  %20 = load i8*, i8** bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl12empty16_bit_E to i8**), align 8
  tail call void @WTFAnnotateBenignRaceSized(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 185, i8* %20, i64 12, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.3, i64 0, i64 0)) #15
  ret void
}

declare void @WTFAnnotateBenignRaceSized(i8*, i32, i8*, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl12CreateStaticEPKcjj(i8* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca i32, align 4
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = alloca %"class.WTF::StringImpl"*, align 8
  store i32 %2, i32* %5, align 4
  %9 = load atomic i8, i8* bitcast (i64* @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings to i8*) acquire, align 8
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %15, !prof !9

11:                                               ; preds = %3
  %12 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings) #15
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %11
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN3WTFL13StaticStringsEvE16s_static_strings, i64 0, i32 0, i32 0, i64 0), i8 0, i64 20, i1 false) #15
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings) #15
  br label %15

15:                                               ; preds = %3, %11, %14
  %16 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN3WTFL13StaticStringsEvE16s_static_strings to %"struct.WTF::KeyValuePair"**), align 8
  %17 = icmp eq %"struct.WTF::KeyValuePair"* %16, null
  %18 = load i32, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN3WTFL13StaticStringsEvE16s_static_strings, i64 0, i32 0, i32 0, i64 8) to i32*), align 8
  br i1 %17, label %60, label %19

19:                                               ; preds = %15
  %20 = add i32 %18, -1
  %21 = zext i32 %20 to i64
  %22 = load i32, i32* %5, align 4
  %23 = and i32 %22, %20
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %16, i64 %24
  %26 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %25, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, %22
  br i1 %28, label %57, label %29

29:                                               ; preds = %19
  %30 = xor i32 %22, -1
  %31 = lshr i32 %22, 23
  %32 = add i32 %31, %30
  %33 = shl i32 %32, 12
  %34 = xor i32 %33, %32
  %35 = lshr i32 %34, 7
  %36 = xor i32 %35, %34
  %37 = shl i32 %36, 2
  %38 = xor i32 %37, %36
  %39 = lshr i32 %38, 20
  %40 = xor i32 %39, %38
  %41 = or i32 %40, 1
  %42 = zext i32 %41 to i64
  br label %43

43:                                               ; preds = %48, %29
  %44 = phi i32 [ %27, %29 ], [ %55, %48 ]
  %45 = phi i64 [ %24, %29 ], [ %52, %48 ]
  %46 = phi i64 [ 0, %29 ], [ %50, %48 ]
  %47 = icmp eq i32 %44, 0
  br i1 %47, label %60, label %48

48:                                               ; preds = %43
  %49 = icmp eq i64 %46, 0
  %50 = select i1 %49, i64 %42, i64 %46
  %51 = add i64 %50, %45
  %52 = and i64 %51, %21
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %16, i64 %52
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %53, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, %22
  br i1 %56, label %57, label %43

57:                                               ; preds = %48, %19
  %58 = phi %"struct.WTF::KeyValuePair"* [ %25, %19 ], [ %53, %48 ]
  %59 = icmp eq %"struct.WTF::KeyValuePair"* %58, null
  br i1 %59, label %60, label %63

60:                                               ; preds = %43, %57, %15
  %61 = zext i32 %18 to i64
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %16, i64 %61
  br label %63

63:                                               ; preds = %57, %60
  %64 = phi %"struct.WTF::KeyValuePair"* [ %62, %60 ], [ %58, %57 ]
  %65 = load atomic i8, i8* bitcast (i64* @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings to i8*) acquire, align 8
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %67, label %71, !prof !9

67:                                               ; preds = %63
  %68 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings) #15
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %71, label %70

70:                                               ; preds = %67
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN3WTFL13StaticStringsEvE16s_static_strings, i64 0, i32 0, i32 0, i64 0), i8 0, i64 20, i1 false) #15
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings) #15
  br label %71

71:                                               ; preds = %63, %67, %70
  %72 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN3WTFL13StaticStringsEvE16s_static_strings to %"struct.WTF::KeyValuePair"**), align 8
  %73 = load i32, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN3WTFL13StaticStringsEvE16s_static_strings, i64 0, i32 0, i32 0, i64 8) to i32*), align 8
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %72, i64 %74
  %76 = icmp eq %"struct.WTF::KeyValuePair"* %64, %75
  br i1 %76, label %80, label %77

77:                                               ; preds = %71
  %78 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %64, i64 0, i32 1
  %79 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %78, align 8
  br label %126

80:                                               ; preds = %71
  %81 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #15
  %82 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %82, align 8
  %83 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83)
  %84 = zext i32 %1 to i64
  %85 = icmp ugt i32 %1, -13
  br i1 %85, label %87, label %86

86:                                               ; preds = %80
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83)
  store i8* null, i8** %82, align 8
  br label %96

87:                                               ; preds = %80
  %88 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #15
  %89 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 4294967283) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.4, i64 0, i64 0), i8* %88, i8* %89) #15
  %90 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %91 = load i8*, i8** %90, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83)
  store i8* %91, i8** %82, align 8
  %92 = icmp eq i8* %91, null
  br i1 %92, label %96, label %93

93:                                               ; preds = %87
  %94 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 208, %"class.logging::CheckOpResult"* nonnull %6) #15
  %95 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #15
  br label %96

96:                                               ; preds = %86, %87, %93
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #15
  %97 = add i32 %1, 12
  %98 = bitcast %"class.WTF::StringImpl"** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %98) #15
  %99 = zext i32 %97 to i64
  %100 = call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %99, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %101 = bitcast %"class.WTF::StringImpl"** %8 to i8**
  %102 = getelementptr inbounds i8, i8* %100, i64 12
  %103 = load i32, i32* %5, align 4
  %104 = bitcast i8* %100 to i32*
  store i32 1, i32* %104, align 4
  %105 = getelementptr inbounds i8, i8* %100, i64 4
  %106 = bitcast i8* %105 to i32*
  store i32 %1, i32* %106, align 4
  %107 = shl i32 %103, 8
  %108 = icmp eq i32 %1, 0
  %109 = select i1 %108, i32 59, i32 3
  %110 = or i32 %107, %109
  %111 = getelementptr inbounds i8, i8* %100, i64 8
  %112 = bitcast i8* %111 to i32*
  store i32 %110, i32* %112, align 4
  store i8* %100, i8** %101, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %102, i8* align 1 %0, i64 %84, i1 false)
  %113 = load i32, i32* @_ZN3WTF10StringImpl29highest_static_string_length_E, align 4
  %114 = icmp ult i32 %113, %1
  %115 = select i1 %114, i32 %1, i32 %113
  store i32 %115, i32* @_ZN3WTF10StringImpl29highest_static_string_length_E, align 4
  %116 = load atomic i8, i8* bitcast (i64* @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings to i8*) acquire, align 8
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %118, label %122, !prof !9

118:                                              ; preds = %96
  %119 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings) #15
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %122, label %121

121:                                              ; preds = %118
  call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN3WTFL13StaticStringsEvE16s_static_strings, i64 0, i32 0, i32 0, i64 0), i8 0, i64 20, i1 false) #15
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings) #15
  br label %122

122:                                              ; preds = %96, %118, %121
  %123 = call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISB_S6_SC_EERjRS3_EENS_18HashTableAddResultISD_S4_EEOT0_OT1_(%"class.WTF::HashTable"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN3WTFL13StaticStringsEvE16s_static_strings to %"class.WTF::HashTable"*), i32* nonnull dereferenceable(4) %5, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %8) #15
  %124 = load i8*, i8** %101, align 8
  call void @WTFAnnotateBenignRaceSized(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 228, i8* %124, i64 12, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.5, i64 0, i64 0)) #15
  %125 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %98) #15
  br label %126

126:                                              ; preds = %122, %77
  %127 = phi %"class.WTF::StringImpl"* [ %79, %77 ], [ %125, %122 ]
  ret %"class.WTF::StringImpl"* %127
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF10StringImpl35ReserveStaticStringsCapacityForSizeEj(i32) local_unnamed_addr #0 align 2 {
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %8, !prof !9

4:                                                ; preds = %1
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings) #15
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN3WTFL13StaticStringsEvE16s_static_strings, i64 0, i32 0, i32 0, i64 0), i8 0, i64 20, i1 false) #15
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3WTFL13StaticStringsEvE16s_static_strings) #15
  br label %8

8:                                                ; preds = %1, %4, %7
  tail call void @_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN3WTFL13StaticStringsEvE16s_static_strings to %"class.WTF::HashTable"*), i32 %0) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKDsj(i16* readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = icmp ne i16* %0, null
  %4 = icmp ne i32 %1, 0
  %5 = and i1 %3, %4
  br i1 %5, label %27, label %6

6:                                                ; preds = %2
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %8 = ptrtoint %"class.WTF::StringImpl"* %7 to i64
  %9 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %9, label %40, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %40

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #15
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #15
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %40

27:                                               ; preds = %2
  %28 = zext i32 %1 to i64
  %29 = shl nuw nsw i64 %28, 1
  %30 = add nuw nsw i64 %29, 12
  %31 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %30, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %32 = getelementptr inbounds i8, i8* %31, i64 12
  %33 = bitcast i8* %31 to i32*
  store i32 1, i32* %33, align 4
  %34 = getelementptr inbounds i8, i8* %31, i64 4
  %35 = bitcast i8* %34 to i32*
  store i32 %1, i32* %35, align 4
  %36 = getelementptr inbounds i8, i8* %31, i64 8
  %37 = bitcast i8* %36 to i32*
  store i32 0, i32* %37, align 4
  %38 = ptrtoint i8* %31 to i64
  %39 = bitcast i16* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %32, i8* nonnull align 2 %39, i64 %29, i1 false)
  br label %40

40:                                               ; preds = %25, %10, %6, %27
  %41 = phi i64 [ %38, %27 ], [ %8, %6 ], [ %8, %10 ], [ %8, %25 ]
  %42 = inttoptr i64 %41 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %42
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = icmp ne i8* %0, null
  %4 = icmp ne i32 %1, 0
  %5 = and i1 %3, %4
  br i1 %5, label %27, label %6

6:                                                ; preds = %2
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %8 = ptrtoint %"class.WTF::StringImpl"* %7 to i64
  %9 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %9, label %38, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %38

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #15
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #15
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %38

27:                                               ; preds = %2
  %28 = zext i32 %1 to i64
  %29 = add nuw nsw i64 %28, 12
  %30 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %29, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %31 = getelementptr inbounds i8, i8* %30, i64 12
  %32 = bitcast i8* %30 to i32*
  store i32 1, i32* %32, align 4
  %33 = getelementptr inbounds i8, i8* %30, i64 4
  %34 = bitcast i8* %33 to i32*
  store i32 %1, i32* %34, align 4
  %35 = getelementptr inbounds i8, i8* %30, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 1, i32* %36, align 4
  %37 = ptrtoint i8* %30 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %31, i8* nonnull align 1 %0, i64 %28, i1 false)
  br label %38

38:                                               ; preds = %25, %10, %6, %27
  %39 = phi i64 [ %37, %27 ], [ %8, %6 ], [ %8, %10 ], [ %8, %25 ]
  %40 = inttoptr i64 %39 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %40
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhjNS_21ASCIIStringAttributesE(i8* readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp ne i8* %0, null
  %5 = icmp ne i32 %1, 0
  %6 = and i1 %4, %5
  br i1 %6, label %27, label %7

7:                                                ; preds = %3
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %38, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %38

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #15
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #15
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %38

27:                                               ; preds = %3
  %28 = zext i32 %1 to i64
  %29 = add nuw nsw i64 %28, 12
  %30 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %29, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %31 = getelementptr inbounds i8, i8* %30, i64 12
  %32 = bitcast i8* %30 to i32*
  store i32 1, i32* %32, align 4
  %33 = getelementptr inbounds i8, i8* %30, i64 4
  %34 = bitcast i8* %33 to i32*
  store i32 %1, i32* %34, align 4
  %35 = getelementptr inbounds i8, i8* %30, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 1, i32* %36, align 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %31, i8* nonnull align 1 %0, i64 %28, i1 false) #15
  %37 = bitcast i8* %30 to %"class.WTF::StringImpl"*
  br label %40

38:                                               ; preds = %7, %10, %25
  %39 = icmp eq i32 %1, 0
  br i1 %39, label %50, label %40

40:                                               ; preds = %27, %38
  %41 = phi %"class.WTF::StringImpl"* [ %37, %27 ], [ %8, %38 ]
  %42 = and i32 %2, 1
  %43 = icmp eq i32 %42, 0
  %44 = select i1 %43, i32 8, i32 24
  %45 = shl i32 %2, 4
  %46 = and i32 %45, 32
  %47 = or i32 %44, %46
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = atomicrmw or i32* %48, i32 %47 monotonic
  br label %50

50:                                               ; preds = %40, %38
  %51 = phi %"class.WTF::StringImpl"* [ %41, %40 ], [ %8, %38 ]
  ret %"class.WTF::StringImpl"* %51
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16* readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = icmp ne i16* %0, null
  %4 = icmp ne i32 %1, 0
  %5 = and i1 %3, %4
  br i1 %5, label %27, label %6

6:                                                ; preds = %2
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %8 = ptrtoint %"class.WTF::StringImpl"* %7 to i64
  %9 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %9, label %73, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %73

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #15
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #15
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %73

27:                                               ; preds = %2
  %28 = zext i32 %1 to i64
  %29 = add nuw nsw i64 %28, 12
  %30 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %29, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %31 = getelementptr inbounds i8, i8* %30, i64 12
  %32 = bitcast i8* %30 to i32*
  store i32 1, i32* %32, align 4
  %33 = getelementptr inbounds i8, i8* %30, i64 4
  %34 = bitcast i8* %33 to i32*
  store i32 %1, i32* %34, align 4
  %35 = getelementptr inbounds i8, i8* %30, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 1, i32* %36, align 4
  %37 = ptrtoint i8* %30 to i64
  br label %38

38:                                               ; preds = %43, %27
  %39 = phi i64 [ 0, %27 ], [ %46, %43 ]
  %40 = getelementptr inbounds i16, i16* %0, i64 %39
  %41 = load i16, i16* %40, align 2
  %42 = icmp ugt i16 %41, 255
  br i1 %42, label %48, label %43

43:                                               ; preds = %38
  %44 = trunc i16 %41 to i8
  %45 = getelementptr inbounds i8, i8* %31, i64 %39
  store i8 %44, i8* %45, align 1
  %46 = add nuw nsw i64 %39, 1
  %47 = icmp eq i64 %46, %28
  br i1 %47, label %73, label %38

48:                                               ; preds = %38
  %49 = shl nuw nsw i64 %28, 1
  %50 = add nuw nsw i64 %49, 12
  %51 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %50, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %52 = getelementptr inbounds i8, i8* %51, i64 12
  %53 = bitcast i8* %51 to i32*
  store i32 1, i32* %53, align 4
  %54 = getelementptr inbounds i8, i8* %51, i64 4
  %55 = bitcast i8* %54 to i32*
  store i32 %1, i32* %55, align 4
  %56 = getelementptr inbounds i8, i8* %51, i64 8
  %57 = bitcast i8* %56 to i32*
  store i32 0, i32* %57, align 4
  %58 = ptrtoint i8* %51 to i64
  %59 = bitcast i16* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %52, i8* nonnull align 2 %59, i64 %49, i1 false) #15
  %60 = bitcast i8* %30 to %"class.WTF::StringImpl"*
  %61 = icmp eq i8* %30, null
  br i1 %61, label %73, label %62

62:                                               ; preds = %48
  %63 = load atomic i32, i32* %36 monotonic, align 4
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = load i32, i32* %32, align 4
  br i1 %65, label %67, label %69

67:                                               ; preds = %62
  %68 = add i32 %66, -1
  store i32 %68, i32* %32, align 4
  br label %69

69:                                               ; preds = %67, %62
  %70 = phi i32 [ %68, %67 ], [ %66, %62 ]
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %69
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #15
  br label %73

73:                                               ; preds = %43, %72, %69, %48, %25, %10, %6
  %74 = phi i64 [ %8, %6 ], [ %8, %10 ], [ %8, %25 ], [ %58, %48 ], [ %58, %69 ], [ %58, %72 ], [ %37, %43 ]
  %75 = inttoptr i64 %74 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %75
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKh(i8* readonly) local_unnamed_addr #0 align 2 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %3, label %23

3:                                                ; preds = %1
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %65, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %65

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i33
  %15 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %14, i33 1) #15
  %16 = extractvalue { i33, i1 } %15, 1
  %17 = extractvalue { i33, i1 } %15, 0
  %18 = icmp slt i33 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %20, label %21, !prof !2

20:                                               ; preds = %11
  tail call void @llvm.trap() #15
  unreachable

21:                                               ; preds = %11
  %22 = trunc i33 %17 to i32
  store i32 %22, i32* %12, align 4
  br label %65

23:                                               ; preds = %1
  %24 = tail call i64 @strlen(i8* nonnull %0) #16
  %25 = icmp ult i64 %24, 4294967296
  br i1 %25, label %27, label %26, !prof !10

26:                                               ; preds = %23
  tail call void @llvm.trap() #15
  unreachable

27:                                               ; preds = %23
  %28 = trunc i64 %24 to i32
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %51

30:                                               ; preds = %27
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %32 = ptrtoint %"class.WTF::StringImpl"* %31 to i64
  %33 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %33, label %62, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %62

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i33
  %43 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %42, i33 1) #15
  %44 = extractvalue { i33, i1 } %43, 1
  %45 = extractvalue { i33, i1 } %43, 0
  %46 = icmp slt i33 %45, 0
  %47 = or i1 %44, %46
  br i1 %47, label %48, label %49, !prof !2

48:                                               ; preds = %39
  tail call void @llvm.trap() #15
  unreachable

49:                                               ; preds = %39
  %50 = trunc i33 %45 to i32
  store i32 %50, i32* %40, align 4
  br label %62

51:                                               ; preds = %27
  %52 = and i64 %24, 4294967295
  %53 = add nuw nsw i64 %52, 12
  %54 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %53, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %55 = getelementptr inbounds i8, i8* %54, i64 12
  %56 = bitcast i8* %54 to i32*
  store i32 1, i32* %56, align 4
  %57 = getelementptr inbounds i8, i8* %54, i64 4
  %58 = bitcast i8* %57 to i32*
  store i32 %28, i32* %58, align 4
  %59 = getelementptr inbounds i8, i8* %54, i64 8
  %60 = bitcast i8* %59 to i32*
  store i32 1, i32* %60, align 4
  %61 = ptrtoint i8* %54 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* nonnull align 1 %0, i64 %52, i1 false) #15
  br label %62

62:                                               ; preds = %30, %34, %49, %51
  %63 = phi i64 [ %61, %51 ], [ %32, %30 ], [ %32, %34 ], [ %32, %49 ]
  %64 = inttoptr i64 %63 to %"class.WTF::StringImpl"*
  br label %65

65:                                               ; preds = %21, %6, %3, %62
  %66 = phi %"class.WTF::StringImpl"* [ %64, %62 ], [ null, %3 ], [ %4, %6 ], [ %4, %21 ]
  ret %"class.WTF::StringImpl"* %66
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF10StringImpl29ContainsOnlyWhitespaceOrEmptyEv(%"class.WTF::StringImpl"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  %4 = and i32 %3, 1
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %5, label %14, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.WTF::StringImpl"* %6 to i8*
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %30, label %12

12:                                               ; preds = %7
  %13 = zext i32 %10 to i64
  br label %21

14:                                               ; preds = %1
  %15 = bitcast %"class.WTF::StringImpl"* %6 to i16*
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %30, label %19

19:                                               ; preds = %14
  %20 = zext i32 %17 to i64
  br label %32

21:                                               ; preds = %12, %27
  %22 = phi i64 [ 0, %12 ], [ %28, %27 ]
  %23 = getelementptr inbounds i8, i8* %8, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = icmp ult i8 %24, 33
  br i1 %25, label %26, label %30

26:                                               ; preds = %21
  switch i8 %24, label %30 [
    i8 32, label %27
    i8 13, label %27
    i8 12, label %27
    i8 11, label %27
    i8 10, label %27
    i8 9, label %27
  ]

27:                                               ; preds = %26, %26, %26, %26, %26, %26
  %28 = add nuw nsw i64 %22, 1
  %29 = icmp ult i64 %28, %13
  br i1 %29, label %21, label %30

30:                                               ; preds = %27, %21, %26, %32, %38, %37, %14, %7
  %31 = phi i1 [ true, %14 ], [ true, %7 ], [ false, %32 ], [ true, %38 ], [ false, %37 ], [ true, %27 ], [ false, %21 ], [ false, %26 ]
  ret i1 %31

32:                                               ; preds = %19, %38
  %33 = phi i64 [ 0, %19 ], [ %39, %38 ]
  %34 = getelementptr inbounds i16, i16* %15, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = icmp ult i16 %35, 33
  br i1 %36, label %37, label %30

37:                                               ; preds = %32
  switch i16 %35, label %30 [
    i16 32, label %38
    i16 13, label %38
    i16 12, label %38
    i16 11, label %38
    i16 10, label %38
    i16 9, label %38
  ]

38:                                               ; preds = %37, %37, %37, %37, %37, %37
  %39 = add nuw nsw i64 %33, 1
  %40 = icmp ult i64 %39, %20
  br i1 %40, label %32, label %30
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp ugt i32 %5, %1
  br i1 %6, label %27, label %7

7:                                                ; preds = %3
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %144, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %144

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #15
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #15
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %144

27:                                               ; preds = %3
  %28 = sub i32 %5, %1
  %29 = icmp ugt i32 %28, %2
  br i1 %29, label %51, label %30

30:                                               ; preds = %27
  %31 = icmp eq i32 %1, 0
  br i1 %31, label %32, label %51

32:                                               ; preds = %30
  %33 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %33, label %144, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %144

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i33
  %43 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %42, i33 1) #15
  %44 = extractvalue { i33, i1 } %43, 1
  %45 = extractvalue { i33, i1 } %43, 0
  %46 = icmp slt i33 %45, 0
  %47 = or i1 %44, %46
  br i1 %47, label %48, label %49, !prof !2

48:                                               ; preds = %39
  tail call void @llvm.trap() #15
  unreachable

49:                                               ; preds = %39
  %50 = trunc i33 %45 to i32
  store i32 %50, i32* %40, align 4
  br label %144

51:                                               ; preds = %30, %27
  %52 = phi i32 [ %2, %27 ], [ %28, %30 ]
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load atomic i32, i32* %53 monotonic, align 4
  %55 = and i32 %54, 1
  %56 = icmp eq i32 %55, 0
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %56, label %100, label %58

58:                                               ; preds = %51
  %59 = bitcast %"class.WTF::StringImpl"* %57 to i8*
  %60 = zext i32 %1 to i64
  %61 = getelementptr inbounds i8, i8* %59, i64 %60
  %62 = icmp ne i8* %61, null
  %63 = icmp ne i32 %52, 0
  %64 = and i1 %62, %63
  br i1 %64, label %86, label %65

65:                                               ; preds = %58
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %67 = ptrtoint %"class.WTF::StringImpl"* %66 to i64
  %68 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %68, label %97, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = load atomic i32, i32* %70 monotonic, align 4
  %72 = and i32 %71, 2
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %97

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 0
  %76 = load i32, i32* %75, align 4
  %77 = zext i32 %76 to i33
  %78 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %77, i33 1) #15
  %79 = extractvalue { i33, i1 } %78, 1
  %80 = extractvalue { i33, i1 } %78, 0
  %81 = icmp slt i33 %80, 0
  %82 = or i1 %79, %81
  br i1 %82, label %83, label %84, !prof !2

83:                                               ; preds = %74
  tail call void @llvm.trap() #15
  unreachable

84:                                               ; preds = %74
  %85 = trunc i33 %80 to i32
  store i32 %85, i32* %75, align 4
  br label %97

86:                                               ; preds = %58
  %87 = zext i32 %52 to i64
  %88 = add nuw nsw i64 %87, 12
  %89 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %88, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %90 = getelementptr inbounds i8, i8* %89, i64 12
  %91 = bitcast i8* %89 to i32*
  store i32 1, i32* %91, align 4
  %92 = getelementptr inbounds i8, i8* %89, i64 4
  %93 = bitcast i8* %92 to i32*
  store i32 %52, i32* %93, align 4
  %94 = getelementptr inbounds i8, i8* %89, i64 8
  %95 = bitcast i8* %94 to i32*
  store i32 1, i32* %95, align 4
  %96 = ptrtoint i8* %89 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %90, i8* nonnull align 1 %61, i64 %87, i1 false) #15
  br label %97

97:                                               ; preds = %65, %69, %84, %86
  %98 = phi i64 [ %96, %86 ], [ %67, %65 ], [ %67, %69 ], [ %67, %84 ]
  %99 = inttoptr i64 %98 to %"class.WTF::StringImpl"*
  br label %144

100:                                              ; preds = %51
  %101 = bitcast %"class.WTF::StringImpl"* %57 to i16*
  %102 = zext i32 %1 to i64
  %103 = getelementptr inbounds i16, i16* %101, i64 %102
  %104 = icmp ne i16* %103, null
  %105 = icmp ne i32 %52, 0
  %106 = and i1 %104, %105
  br i1 %106, label %128, label %107

107:                                              ; preds = %100
  %108 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %109 = ptrtoint %"class.WTF::StringImpl"* %108 to i64
  %110 = icmp eq %"class.WTF::StringImpl"* %108, null
  br i1 %110, label %141, label %111

111:                                              ; preds = %107
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = load atomic i32, i32* %112 monotonic, align 4
  %114 = and i32 %113, 2
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %141

116:                                              ; preds = %111
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 0
  %118 = load i32, i32* %117, align 4
  %119 = zext i32 %118 to i33
  %120 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %119, i33 1) #15
  %121 = extractvalue { i33, i1 } %120, 1
  %122 = extractvalue { i33, i1 } %120, 0
  %123 = icmp slt i33 %122, 0
  %124 = or i1 %121, %123
  br i1 %124, label %125, label %126, !prof !2

125:                                              ; preds = %116
  tail call void @llvm.trap() #15
  unreachable

126:                                              ; preds = %116
  %127 = trunc i33 %122 to i32
  store i32 %127, i32* %117, align 4
  br label %141

128:                                              ; preds = %100
  %129 = zext i32 %52 to i64
  %130 = shl nuw nsw i64 %129, 1
  %131 = add nuw nsw i64 %130, 12
  %132 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %131, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %133 = getelementptr inbounds i8, i8* %132, i64 12
  %134 = bitcast i8* %132 to i32*
  store i32 1, i32* %134, align 4
  %135 = getelementptr inbounds i8, i8* %132, i64 4
  %136 = bitcast i8* %135 to i32*
  store i32 %52, i32* %136, align 4
  %137 = getelementptr inbounds i8, i8* %132, i64 8
  %138 = bitcast i8* %137 to i32*
  store i32 0, i32* %138, align 4
  %139 = ptrtoint i8* %132 to i64
  %140 = bitcast i16* %103 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %133, i8* nonnull align 2 %140, i64 %130, i1 false) #15
  br label %141

141:                                              ; preds = %107, %111, %126, %128
  %142 = phi i64 [ %139, %128 ], [ %109, %107 ], [ %109, %111 ], [ %109, %126 ]
  %143 = inttoptr i64 %142 to %"class.WTF::StringImpl"*
  br label %144

144:                                              ; preds = %49, %34, %32, %25, %10, %7, %97, %141
  %145 = phi %"class.WTF::StringImpl"* [ %99, %97 ], [ %143, %141 ], [ null, %7 ], [ %8, %10 ], [ %8, %25 ], [ null, %32 ], [ %0, %34 ], [ %0, %49 ]
  ret %"class.WTF::StringImpl"* %145
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN3WTF10StringImpl19CharacterStartingAtEj(%"class.WTF::StringImpl"* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load atomic i32, i32* %3 monotonic, align 4
  %5 = and i32 %4, 1
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %6, label %14, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.WTF::StringImpl"* %7 to i8*
  %10 = zext i32 %1 to i64
  %11 = getelementptr inbounds i8, i8* %9, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  br label %43

14:                                               ; preds = %2
  %15 = bitcast %"class.WTF::StringImpl"* %7 to i16*
  %16 = zext i32 %1 to i64
  %17 = getelementptr inbounds i16, i16* %15, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = and i16 %18, -2048
  %20 = icmp eq i16 %19, -10240
  br i1 %20, label %23, label %21

21:                                               ; preds = %14
  %22 = zext i16 %18 to i32
  br label %43

23:                                               ; preds = %14
  %24 = add i32 %1, 1
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp ult i32 %24, %26
  %28 = and i16 %18, -1024
  %29 = icmp eq i16 %28, -10240
  %30 = and i1 %29, %27
  br i1 %30, label %31, label %43

31:                                               ; preds = %23
  %32 = zext i32 %24 to i64
  %33 = getelementptr inbounds i16, i16* %15, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = and i16 %34, -1024
  %36 = icmp eq i16 %35, -9216
  br i1 %36, label %37, label %43

37:                                               ; preds = %31
  %38 = zext i16 %18 to i32
  %39 = shl nuw nsw i32 %38, 10
  %40 = zext i16 %34 to i32
  %41 = add nsw i32 %39, -56613888
  %42 = add nsw i32 %41, %40
  br label %43

43:                                               ; preds = %23, %31, %37, %21, %8
  %44 = phi i32 [ %13, %8 ], [ %42, %37 ], [ %22, %21 ], [ 0, %31 ], [ 0, %23 ]
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3WTF10StringImpl6CopyToEPDsjj(%"class.WTF::StringImpl"* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = bitcast i16* %1 to i8*
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = sub i32 %7, %2
  %9 = icmp ugt i32 %8, %3
  %10 = select i1 %9, i32 %3, i32 %8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %144, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %16, label %137, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.WTF::StringImpl"* %17 to i8*
  %20 = zext i32 %2 to i64
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  %22 = zext i32 %10 to i64
  %23 = icmp ult i32 %10, 16
  br i1 %23, label %95, label %24

24:                                               ; preds = %18
  %25 = getelementptr i16, i16* %1, i64 %22
  %26 = bitcast i16* %25 to i8*
  %27 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1, i32 0
  %28 = bitcast i32* %27 to i8*
  %29 = getelementptr i8, i8* %28, i64 %20
  %30 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1, i32 0
  %31 = bitcast i32* %30 to i8*
  %32 = add nuw nsw i64 %20, %22
  %33 = getelementptr i8, i8* %31, i64 %32
  %34 = icmp ugt i8* %33, %5
  %35 = icmp ult i8* %29, %26
  %36 = and i1 %34, %35
  br i1 %36, label %95, label %37

37:                                               ; preds = %24
  %38 = and i64 %22, 4294967280
  %39 = add nsw i64 %38, -16
  %40 = lshr exact i64 %39, 4
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %39, 0
  br i1 %43, label %77, label %44

44:                                               ; preds = %37
  %45 = sub nuw nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %74, %46 ]
  %48 = phi i64 [ %45, %44 ], [ %75, %46 ]
  %49 = getelementptr inbounds i8, i8* %21, i64 %47
  %50 = bitcast i8* %49 to <8 x i8>*
  %51 = load <8 x i8>, <8 x i8>* %50, align 1, !alias.scope !11
  %52 = getelementptr inbounds i8, i8* %49, i64 8
  %53 = bitcast i8* %52 to <8 x i8>*
  %54 = load <8 x i8>, <8 x i8>* %53, align 1, !alias.scope !11
  %55 = zext <8 x i8> %51 to <8 x i16>
  %56 = zext <8 x i8> %54 to <8 x i16>
  %57 = getelementptr inbounds i16, i16* %1, i64 %47
  %58 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %58, align 2, !alias.scope !14, !noalias !11
  %59 = getelementptr inbounds i16, i16* %57, i64 8
  %60 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %60, align 2, !alias.scope !14, !noalias !11
  %61 = or i64 %47, 16
  %62 = getelementptr inbounds i8, i8* %21, i64 %61
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1, !alias.scope !11
  %65 = getelementptr inbounds i8, i8* %62, i64 8
  %66 = bitcast i8* %65 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1, !alias.scope !11
  %68 = zext <8 x i8> %64 to <8 x i16>
  %69 = zext <8 x i8> %67 to <8 x i16>
  %70 = getelementptr inbounds i16, i16* %1, i64 %61
  %71 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %71, align 2, !alias.scope !14, !noalias !11
  %72 = getelementptr inbounds i16, i16* %70, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %73, align 2, !alias.scope !14, !noalias !11
  %74 = add i64 %47, 32
  %75 = add i64 %48, -2
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %46, !llvm.loop !16

77:                                               ; preds = %46, %37
  %78 = phi i64 [ 0, %37 ], [ %74, %46 ]
  %79 = icmp eq i64 %42, 0
  br i1 %79, label %93, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds i8, i8* %21, i64 %78
  %82 = bitcast i8* %81 to <8 x i8>*
  %83 = load <8 x i8>, <8 x i8>* %82, align 1, !alias.scope !11
  %84 = getelementptr inbounds i8, i8* %81, i64 8
  %85 = bitcast i8* %84 to <8 x i8>*
  %86 = load <8 x i8>, <8 x i8>* %85, align 1, !alias.scope !11
  %87 = zext <8 x i8> %83 to <8 x i16>
  %88 = zext <8 x i8> %86 to <8 x i16>
  %89 = getelementptr inbounds i16, i16* %1, i64 %78
  %90 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %90, align 2, !alias.scope !14, !noalias !11
  %91 = getelementptr inbounds i16, i16* %89, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %92, align 2, !alias.scope !14, !noalias !11
  br label %93

93:                                               ; preds = %77, %80
  %94 = icmp eq i64 %38, %22
  br i1 %94, label %144, label %95

95:                                               ; preds = %93, %24, %18
  %96 = phi i64 [ 0, %24 ], [ 0, %18 ], [ %38, %93 ]
  %97 = xor i64 %96, -1
  %98 = add nsw i64 %97, %22
  %99 = and i64 %22, 3
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %111, label %101

101:                                              ; preds = %95, %101
  %102 = phi i64 [ %108, %101 ], [ %96, %95 ]
  %103 = phi i64 [ %109, %101 ], [ %99, %95 ]
  %104 = getelementptr inbounds i8, i8* %21, i64 %102
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i16
  %107 = getelementptr inbounds i16, i16* %1, i64 %102
  store i16 %106, i16* %107, align 2
  %108 = add nuw nsw i64 %102, 1
  %109 = add i64 %103, -1
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %101, !llvm.loop !17

111:                                              ; preds = %101, %95
  %112 = phi i64 [ %96, %95 ], [ %108, %101 ]
  %113 = icmp ult i64 %98, 3
  br i1 %113, label %144, label %114

114:                                              ; preds = %111, %114
  %115 = phi i64 [ %135, %114 ], [ %112, %111 ]
  %116 = getelementptr inbounds i8, i8* %21, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i16
  %119 = getelementptr inbounds i16, i16* %1, i64 %115
  store i16 %118, i16* %119, align 2
  %120 = add nuw nsw i64 %115, 1
  %121 = getelementptr inbounds i8, i8* %21, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i16
  %124 = getelementptr inbounds i16, i16* %1, i64 %120
  store i16 %123, i16* %124, align 2
  %125 = add nuw nsw i64 %115, 2
  %126 = getelementptr inbounds i8, i8* %21, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i16
  %129 = getelementptr inbounds i16, i16* %1, i64 %125
  store i16 %128, i16* %129, align 2
  %130 = add nuw nsw i64 %115, 3
  %131 = getelementptr inbounds i8, i8* %21, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i16
  %134 = getelementptr inbounds i16, i16* %1, i64 %130
  store i16 %133, i16* %134, align 2
  %135 = add nuw nsw i64 %115, 4
  %136 = icmp eq i64 %135, %22
  br i1 %136, label %144, label %114, !llvm.loop !19

137:                                              ; preds = %12
  %138 = bitcast %"class.WTF::StringImpl"* %17 to i16*
  %139 = zext i32 %2 to i64
  %140 = getelementptr inbounds i16, i16* %138, i64 %139
  %141 = bitcast i16* %140 to i8*
  %142 = zext i32 %10 to i64
  %143 = shl nuw nsw i64 %142, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %5, i8* align 2 %141, i64 %143, i1 false) #15
  br label %144

144:                                              ; preds = %111, %114, %93, %137, %4
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl10LowerASCIIEv(%"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %9 = bitcast %"class.WTF::StringImpl"* %8 to i8*
  br i1 %7, label %171, label %10

10:                                               ; preds = %1
  %11 = zext i32 %3 to i64
  %12 = icmp eq i32 %3, 0
  br i1 %12, label %106, label %13

13:                                               ; preds = %10
  %14 = icmp ult i32 %3, 32
  br i1 %14, label %91, label %15

15:                                               ; preds = %13
  %16 = and i64 %11, 4294967264
  %17 = add nsw i64 %16, -32
  %18 = lshr exact i64 %17, 5
  %19 = add nuw nsw i64 %18, 1
  %20 = and i64 %19, 1
  %21 = icmp eq i64 %17, 0
  br i1 %21, label %57, label %22

22:                                               ; preds = %15
  %23 = sub nuw nsw i64 %19, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %54, %24 ]
  %26 = phi <16 x i1> [ zeroinitializer, %22 ], [ %52, %24 ]
  %27 = phi <16 x i1> [ zeroinitializer, %22 ], [ %53, %24 ]
  %28 = phi i64 [ %23, %22 ], [ %55, %24 ]
  %29 = getelementptr inbounds i8, i8* %9, i64 %25
  %30 = bitcast i8* %29 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 1
  %32 = getelementptr inbounds i8, i8* %29, i64 16
  %33 = bitcast i8* %32 to <16 x i8>*
  %34 = load <16 x i8>, <16 x i8>* %33, align 1
  %35 = add <16 x i8> %31, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %36 = add <16 x i8> %34, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %37 = icmp ult <16 x i8> %35, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %38 = icmp ult <16 x i8> %36, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %39 = or <16 x i1> %26, %37
  %40 = or <16 x i1> %27, %38
  %41 = or i64 %25, 32
  %42 = getelementptr inbounds i8, i8* %9, i64 %41
  %43 = bitcast i8* %42 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 1
  %45 = getelementptr inbounds i8, i8* %42, i64 16
  %46 = bitcast i8* %45 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1
  %48 = add <16 x i8> %44, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %49 = add <16 x i8> %47, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %50 = icmp ult <16 x i8> %48, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %51 = icmp ult <16 x i8> %49, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %52 = or <16 x i1> %39, %50
  %53 = or <16 x i1> %40, %51
  %54 = add i64 %25, 64
  %55 = add i64 %28, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %24, !llvm.loop !20

57:                                               ; preds = %24, %15
  %58 = phi <16 x i1> [ undef, %15 ], [ %52, %24 ]
  %59 = phi <16 x i1> [ undef, %15 ], [ %53, %24 ]
  %60 = phi i64 [ 0, %15 ], [ %54, %24 ]
  %61 = phi <16 x i1> [ zeroinitializer, %15 ], [ %52, %24 ]
  %62 = phi <16 x i1> [ zeroinitializer, %15 ], [ %53, %24 ]
  %63 = icmp eq i64 %20, 0
  br i1 %63, label %77, label %64

64:                                               ; preds = %57
  %65 = getelementptr inbounds i8, i8* %9, i64 %60
  %66 = getelementptr inbounds i8, i8* %65, i64 16
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = add <16 x i8> %68, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %70 = icmp ult <16 x i8> %69, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %71 = or <16 x i1> %62, %70
  %72 = bitcast i8* %65 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1
  %74 = add <16 x i8> %73, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %75 = icmp ult <16 x i8> %74, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %76 = or <16 x i1> %61, %75
  br label %77

77:                                               ; preds = %57, %64
  %78 = phi <16 x i1> [ %58, %57 ], [ %76, %64 ]
  %79 = phi <16 x i1> [ %59, %57 ], [ %71, %64 ]
  %80 = or <16 x i1> %79, %78
  %81 = shufflevector <16 x i1> %80, <16 x i1> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %82 = or <16 x i1> %80, %81
  %83 = shufflevector <16 x i1> %82, <16 x i1> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %84 = or <16 x i1> %82, %83
  %85 = shufflevector <16 x i1> %84, <16 x i1> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = or <16 x i1> %84, %85
  %87 = shufflevector <16 x i1> %86, <16 x i1> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = or <16 x i1> %86, %87
  %89 = extractelement <16 x i1> %88, i32 0
  %90 = icmp eq i64 %16, %11
  br i1 %90, label %104, label %91

91:                                               ; preds = %77, %13
  %92 = phi i64 [ 0, %13 ], [ %16, %77 ]
  %93 = phi i1 [ false, %13 ], [ %89, %77 ]
  br label %94

94:                                               ; preds = %91, %94
  %95 = phi i64 [ %102, %94 ], [ %92, %91 ]
  %96 = phi i1 [ %101, %94 ], [ %93, %91 ]
  %97 = getelementptr inbounds i8, i8* %9, i64 %95
  %98 = load i8, i8* %97, align 1
  %99 = add i8 %98, -65
  %100 = icmp ult i8 %99, 26
  %101 = or i1 %96, %100
  %102 = add nuw nsw i64 %95, 1
  %103 = icmp eq i64 %102, %11
  br i1 %103, label %104, label %94, !llvm.loop !21

104:                                              ; preds = %94, %77
  %105 = phi i1 [ %89, %77 ], [ %101, %94 ]
  br i1 %105, label %124, label %106

106:                                              ; preds = %104, %10
  %107 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %107, label %393, label %108

108:                                              ; preds = %106
  %109 = load atomic i32, i32* %4 monotonic, align 4
  %110 = and i32 %109, 2
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %393

112:                                              ; preds = %108
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %114 = load i32, i32* %113, align 4
  %115 = zext i32 %114 to i33
  %116 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %115, i33 1) #15
  %117 = extractvalue { i33, i1 } %116, 1
  %118 = extractvalue { i33, i1 } %116, 0
  %119 = icmp slt i33 %118, 0
  %120 = or i1 %117, %119
  br i1 %120, label %121, label %122, !prof !2

121:                                              ; preds = %112
  tail call void @llvm.trap() #15
  unreachable

122:                                              ; preds = %112
  %123 = trunc i33 %118 to i32
  store i32 %123, i32* %113, align 4
  br label %393

124:                                              ; preds = %104
  %125 = add nuw nsw i64 %11, 12
  %126 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %125, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %127 = getelementptr inbounds i8, i8* %126, i64 12
  %128 = bitcast i8* %126 to i32*
  store i32 1, i32* %128, align 4
  %129 = getelementptr inbounds i8, i8* %126, i64 4
  %130 = bitcast i8* %129 to i32*
  store i32 %3, i32* %130, align 4
  %131 = getelementptr inbounds i8, i8* %126, i64 8
  %132 = bitcast i8* %131 to i32*
  store i32 1, i32* %132, align 4
  %133 = add nsw i64 %11, -1
  %134 = and i64 %11, 3
  %135 = icmp ult i64 %133, 3
  br i1 %135, label %376, label %136

136:                                              ; preds = %124
  %137 = sub nsw i64 %11, %134
  br label %138

138:                                              ; preds = %138, %136
  %139 = phi i64 [ 0, %136 ], [ %168, %138 ]
  %140 = phi i64 [ %137, %136 ], [ %169, %138 ]
  %141 = getelementptr inbounds i8, i8* %9, i64 %139
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i64
  %144 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = getelementptr inbounds i8, i8* %127, i64 %139
  store i8 %145, i8* %146, align 1
  %147 = or i64 %139, 1
  %148 = getelementptr inbounds i8, i8* %9, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i64
  %151 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = getelementptr inbounds i8, i8* %127, i64 %147
  store i8 %152, i8* %153, align 1
  %154 = or i64 %139, 2
  %155 = getelementptr inbounds i8, i8* %9, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i64
  %158 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %157
  %159 = load i8, i8* %158, align 1
  %160 = getelementptr inbounds i8, i8* %127, i64 %154
  store i8 %159, i8* %160, align 1
  %161 = or i64 %139, 3
  %162 = getelementptr inbounds i8, i8* %9, i64 %161
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i64
  %165 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = getelementptr inbounds i8, i8* %127, i64 %161
  store i8 %166, i8* %167, align 1
  %168 = add nuw nsw i64 %139, 4
  %169 = add i64 %140, -4
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %376, label %138

171:                                              ; preds = %1
  %172 = bitcast %"class.WTF::StringImpl"* %8 to i16*
  %173 = zext i32 %3 to i64
  %174 = icmp eq i32 %3, 0
  br i1 %174, label %266, label %175

175:                                              ; preds = %171
  %176 = icmp ult i32 %3, 16
  br i1 %176, label %251, label %177

177:                                              ; preds = %175
  %178 = and i64 %173, 4294967280
  %179 = add nsw i64 %178, -16
  %180 = lshr exact i64 %179, 4
  %181 = add nuw nsw i64 %180, 1
  %182 = and i64 %181, 1
  %183 = icmp eq i64 %179, 0
  br i1 %183, label %219, label %184

184:                                              ; preds = %177
  %185 = sub nuw nsw i64 %181, %182
  br label %186

186:                                              ; preds = %186, %184
  %187 = phi i64 [ 0, %184 ], [ %216, %186 ]
  %188 = phi <8 x i1> [ zeroinitializer, %184 ], [ %214, %186 ]
  %189 = phi <8 x i1> [ zeroinitializer, %184 ], [ %215, %186 ]
  %190 = phi i64 [ %185, %184 ], [ %217, %186 ]
  %191 = getelementptr inbounds i16, i16* %172, i64 %187
  %192 = bitcast i16* %191 to <8 x i16>*
  %193 = load <8 x i16>, <8 x i16>* %192, align 2
  %194 = getelementptr inbounds i16, i16* %191, i64 8
  %195 = bitcast i16* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 2
  %197 = add <8 x i16> %193, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %198 = add <8 x i16> %196, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %199 = icmp ult <8 x i16> %197, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %200 = icmp ult <8 x i16> %198, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %201 = or <8 x i1> %188, %199
  %202 = or <8 x i1> %189, %200
  %203 = or i64 %187, 16
  %204 = getelementptr inbounds i16, i16* %172, i64 %203
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2
  %207 = getelementptr inbounds i16, i16* %204, i64 8
  %208 = bitcast i16* %207 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 2
  %210 = add <8 x i16> %206, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %211 = add <8 x i16> %209, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %212 = icmp ult <8 x i16> %210, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %213 = icmp ult <8 x i16> %211, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %214 = or <8 x i1> %201, %212
  %215 = or <8 x i1> %202, %213
  %216 = add i64 %187, 32
  %217 = add i64 %190, -2
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %186, !llvm.loop !22

219:                                              ; preds = %186, %177
  %220 = phi <8 x i1> [ undef, %177 ], [ %214, %186 ]
  %221 = phi <8 x i1> [ undef, %177 ], [ %215, %186 ]
  %222 = phi i64 [ 0, %177 ], [ %216, %186 ]
  %223 = phi <8 x i1> [ zeroinitializer, %177 ], [ %214, %186 ]
  %224 = phi <8 x i1> [ zeroinitializer, %177 ], [ %215, %186 ]
  %225 = icmp eq i64 %182, 0
  br i1 %225, label %239, label %226

226:                                              ; preds = %219
  %227 = getelementptr inbounds i16, i16* %172, i64 %222
  %228 = getelementptr inbounds i16, i16* %227, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 2
  %231 = add <8 x i16> %230, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %232 = icmp ult <8 x i16> %231, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %233 = or <8 x i1> %224, %232
  %234 = bitcast i16* %227 to <8 x i16>*
  %235 = load <8 x i16>, <8 x i16>* %234, align 2
  %236 = add <8 x i16> %235, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %237 = icmp ult <8 x i16> %236, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %238 = or <8 x i1> %223, %237
  br label %239

239:                                              ; preds = %219, %226
  %240 = phi <8 x i1> [ %220, %219 ], [ %238, %226 ]
  %241 = phi <8 x i1> [ %221, %219 ], [ %233, %226 ]
  %242 = or <8 x i1> %241, %240
  %243 = shufflevector <8 x i1> %242, <8 x i1> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %244 = or <8 x i1> %242, %243
  %245 = shufflevector <8 x i1> %244, <8 x i1> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %246 = or <8 x i1> %244, %245
  %247 = shufflevector <8 x i1> %246, <8 x i1> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %248 = or <8 x i1> %246, %247
  %249 = extractelement <8 x i1> %248, i32 0
  %250 = icmp eq i64 %178, %173
  br i1 %250, label %264, label %251

251:                                              ; preds = %239, %175
  %252 = phi i64 [ 0, %175 ], [ %178, %239 ]
  %253 = phi i1 [ false, %175 ], [ %249, %239 ]
  br label %254

254:                                              ; preds = %251, %254
  %255 = phi i64 [ %262, %254 ], [ %252, %251 ]
  %256 = phi i1 [ %261, %254 ], [ %253, %251 ]
  %257 = getelementptr inbounds i16, i16* %172, i64 %255
  %258 = load i16, i16* %257, align 2
  %259 = add i16 %258, -65
  %260 = icmp ult i16 %259, 26
  %261 = or i1 %256, %260
  %262 = add nuw nsw i64 %255, 1
  %263 = icmp eq i64 %262, %173
  br i1 %263, label %264, label %254, !llvm.loop !23

264:                                              ; preds = %254, %239
  %265 = phi i1 [ %249, %239 ], [ %261, %254 ]
  br i1 %265, label %284, label %266

266:                                              ; preds = %264, %171
  %267 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %267, label %393, label %268

268:                                              ; preds = %266
  %269 = load atomic i32, i32* %4 monotonic, align 4
  %270 = and i32 %269, 2
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %272, label %393

272:                                              ; preds = %268
  %273 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %274 = load i32, i32* %273, align 4
  %275 = zext i32 %274 to i33
  %276 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %275, i33 1) #15
  %277 = extractvalue { i33, i1 } %276, 1
  %278 = extractvalue { i33, i1 } %276, 0
  %279 = icmp slt i33 %278, 0
  %280 = or i1 %277, %279
  br i1 %280, label %281, label %282, !prof !2

281:                                              ; preds = %272
  tail call void @llvm.trap() #15
  unreachable

282:                                              ; preds = %272
  %283 = trunc i33 %278 to i32
  store i32 %283, i32* %273, align 4
  br label %393

284:                                              ; preds = %264
  %285 = shl nuw nsw i64 %173, 1
  %286 = add nuw nsw i64 %285, 12
  %287 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %286, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %288 = getelementptr inbounds i8, i8* %287, i64 12
  %289 = bitcast i8* %288 to i16*
  %290 = bitcast i8* %287 to i32*
  store i32 1, i32* %290, align 4
  %291 = getelementptr inbounds i8, i8* %287, i64 4
  %292 = bitcast i8* %291 to i32*
  store i32 %3, i32* %292, align 4
  %293 = getelementptr inbounds i8, i8* %287, i64 8
  %294 = bitcast i8* %293 to i32*
  store i32 0, i32* %294, align 4
  %295 = icmp ult i32 %3, 16
  br i1 %295, label %334, label %296

296:                                              ; preds = %284
  %297 = shl nuw nsw i64 %173, 1
  %298 = add nuw nsw i64 %297, 12
  %299 = getelementptr i8, i8* %287, i64 %298
  %300 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1, i32 0
  %301 = bitcast i32* %300 to i8*
  %302 = getelementptr i8, i8* %301, i64 %297
  %303 = icmp ult i8* %288, %302
  %304 = icmp ugt i8* %299, %9
  %305 = and i1 %303, %304
  br i1 %305, label %334, label %306

306:                                              ; preds = %296
  %307 = and i64 %173, 4294967280
  br label %308

308:                                              ; preds = %308, %306
  %309 = phi i64 [ 0, %306 ], [ %330, %308 ]
  %310 = getelementptr inbounds i16, i16* %172, i64 %309
  %311 = bitcast i16* %310 to <8 x i16>*
  %312 = load <8 x i16>, <8 x i16>* %311, align 2, !alias.scope !24
  %313 = getelementptr inbounds i16, i16* %310, i64 8
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 2, !alias.scope !24
  %316 = add <8 x i16> %312, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %317 = add <8 x i16> %315, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %318 = icmp ult <8 x i16> %316, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %319 = icmp ult <8 x i16> %317, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %320 = zext <8 x i1> %318 to <8 x i16>
  %321 = zext <8 x i1> %319 to <8 x i16>
  %322 = shl nuw nsw <8 x i16> %320, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %323 = shl nuw nsw <8 x i16> %321, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %324 = or <8 x i16> %322, %312
  %325 = or <8 x i16> %323, %315
  %326 = getelementptr inbounds i16, i16* %289, i64 %309
  %327 = bitcast i16* %326 to <8 x i16>*
  store <8 x i16> %324, <8 x i16>* %327, align 2, !alias.scope !27, !noalias !24
  %328 = getelementptr inbounds i16, i16* %326, i64 8
  %329 = bitcast i16* %328 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %329, align 2, !alias.scope !27, !noalias !24
  %330 = add i64 %309, 16
  %331 = icmp eq i64 %330, %307
  br i1 %331, label %332, label %308, !llvm.loop !29

332:                                              ; preds = %308
  %333 = icmp eq i64 %307, %173
  br i1 %333, label %374, label %334

334:                                              ; preds = %332, %296, %284
  %335 = phi i64 [ 0, %296 ], [ 0, %284 ], [ %307, %332 ]
  %336 = xor i64 %335, -1
  %337 = and i64 %173, 1
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %349, label %339

339:                                              ; preds = %334
  %340 = getelementptr inbounds i16, i16* %172, i64 %335
  %341 = load i16, i16* %340, align 2
  %342 = add i16 %341, -65
  %343 = icmp ult i16 %342, 26
  %344 = zext i1 %343 to i16
  %345 = shl nuw nsw i16 %344, 5
  %346 = or i16 %345, %341
  %347 = getelementptr inbounds i16, i16* %289, i64 %335
  store i16 %346, i16* %347, align 2
  %348 = or i64 %335, 1
  br label %349

349:                                              ; preds = %334, %339
  %350 = phi i64 [ %335, %334 ], [ %348, %339 ]
  %351 = sub nsw i64 0, %173
  %352 = icmp eq i64 %336, %351
  br i1 %352, label %374, label %353

353:                                              ; preds = %349, %353
  %354 = phi i64 [ %372, %353 ], [ %350, %349 ]
  %355 = getelementptr inbounds i16, i16* %172, i64 %354
  %356 = load i16, i16* %355, align 2
  %357 = add i16 %356, -65
  %358 = icmp ult i16 %357, 26
  %359 = zext i1 %358 to i16
  %360 = shl nuw nsw i16 %359, 5
  %361 = or i16 %360, %356
  %362 = getelementptr inbounds i16, i16* %289, i64 %354
  store i16 %361, i16* %362, align 2
  %363 = add nuw nsw i64 %354, 1
  %364 = getelementptr inbounds i16, i16* %172, i64 %363
  %365 = load i16, i16* %364, align 2
  %366 = add i16 %365, -65
  %367 = icmp ult i16 %366, 26
  %368 = zext i1 %367 to i16
  %369 = shl nuw nsw i16 %368, 5
  %370 = or i16 %369, %365
  %371 = getelementptr inbounds i16, i16* %289, i64 %363
  store i16 %370, i16* %371, align 2
  %372 = add nuw nsw i64 %354, 2
  %373 = icmp eq i64 %372, %173
  br i1 %373, label %374, label %353, !llvm.loop !30

374:                                              ; preds = %349, %353, %332
  %375 = bitcast i8* %287 to %"class.WTF::StringImpl"*
  br label %393

376:                                              ; preds = %138, %124
  %377 = phi i64 [ 0, %124 ], [ %168, %138 ]
  %378 = icmp eq i64 %134, 0
  br i1 %378, label %391, label %379

379:                                              ; preds = %376, %379
  %380 = phi i64 [ %388, %379 ], [ %377, %376 ]
  %381 = phi i64 [ %389, %379 ], [ %134, %376 ]
  %382 = getelementptr inbounds i8, i8* %9, i64 %380
  %383 = load i8, i8* %382, align 1
  %384 = zext i8 %383 to i64
  %385 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %384
  %386 = load i8, i8* %385, align 1
  %387 = getelementptr inbounds i8, i8* %127, i64 %380
  store i8 %386, i8* %387, align 1
  %388 = add nuw nsw i64 %380, 1
  %389 = add i64 %381, -1
  %390 = icmp eq i64 %389, 0
  br i1 %390, label %391, label %379, !llvm.loop !31

391:                                              ; preds = %379, %376
  %392 = bitcast i8* %126 to %"class.WTF::StringImpl"*
  br label %393

393:                                              ; preds = %391, %374, %106, %108, %122, %266, %268, %282
  %394 = phi %"class.WTF::StringImpl"* [ null, %106 ], [ %0, %108 ], [ %0, %122 ], [ null, %266 ], [ %0, %268 ], [ %0, %282 ], [ %375, %374 ], [ %392, %391 ]
  ret %"class.WTF::StringImpl"* %394
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl10UpperASCIIEv(%"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %9 = bitcast %"class.WTF::StringImpl"* %8 to i8*
  br i1 %7, label %216, label %10

10:                                               ; preds = %1
  %11 = zext i32 %3 to i64
  %12 = icmp eq i32 %3, 0
  br i1 %12, label %106, label %13

13:                                               ; preds = %10
  %14 = icmp ult i32 %3, 32
  br i1 %14, label %91, label %15

15:                                               ; preds = %13
  %16 = and i64 %11, 4294967264
  %17 = add nsw i64 %16, -32
  %18 = lshr exact i64 %17, 5
  %19 = add nuw nsw i64 %18, 1
  %20 = and i64 %19, 1
  %21 = icmp eq i64 %17, 0
  br i1 %21, label %57, label %22

22:                                               ; preds = %15
  %23 = sub nuw nsw i64 %19, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %54, %24 ]
  %26 = phi <16 x i1> [ zeroinitializer, %22 ], [ %52, %24 ]
  %27 = phi <16 x i1> [ zeroinitializer, %22 ], [ %53, %24 ]
  %28 = phi i64 [ %23, %22 ], [ %55, %24 ]
  %29 = getelementptr inbounds i8, i8* %9, i64 %25
  %30 = bitcast i8* %29 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 1
  %32 = getelementptr inbounds i8, i8* %29, i64 16
  %33 = bitcast i8* %32 to <16 x i8>*
  %34 = load <16 x i8>, <16 x i8>* %33, align 1
  %35 = add <16 x i8> %31, <i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97>
  %36 = add <16 x i8> %34, <i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97>
  %37 = icmp ult <16 x i8> %35, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %38 = icmp ult <16 x i8> %36, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %39 = or <16 x i1> %26, %37
  %40 = or <16 x i1> %27, %38
  %41 = or i64 %25, 32
  %42 = getelementptr inbounds i8, i8* %9, i64 %41
  %43 = bitcast i8* %42 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 1
  %45 = getelementptr inbounds i8, i8* %42, i64 16
  %46 = bitcast i8* %45 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1
  %48 = add <16 x i8> %44, <i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97>
  %49 = add <16 x i8> %47, <i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97>
  %50 = icmp ult <16 x i8> %48, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %51 = icmp ult <16 x i8> %49, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %52 = or <16 x i1> %39, %50
  %53 = or <16 x i1> %40, %51
  %54 = add i64 %25, 64
  %55 = add i64 %28, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %24, !llvm.loop !32

57:                                               ; preds = %24, %15
  %58 = phi <16 x i1> [ undef, %15 ], [ %52, %24 ]
  %59 = phi <16 x i1> [ undef, %15 ], [ %53, %24 ]
  %60 = phi i64 [ 0, %15 ], [ %54, %24 ]
  %61 = phi <16 x i1> [ zeroinitializer, %15 ], [ %52, %24 ]
  %62 = phi <16 x i1> [ zeroinitializer, %15 ], [ %53, %24 ]
  %63 = icmp eq i64 %20, 0
  br i1 %63, label %77, label %64

64:                                               ; preds = %57
  %65 = getelementptr inbounds i8, i8* %9, i64 %60
  %66 = getelementptr inbounds i8, i8* %65, i64 16
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = add <16 x i8> %68, <i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97>
  %70 = icmp ult <16 x i8> %69, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %71 = or <16 x i1> %62, %70
  %72 = bitcast i8* %65 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1
  %74 = add <16 x i8> %73, <i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97>
  %75 = icmp ult <16 x i8> %74, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %76 = or <16 x i1> %61, %75
  br label %77

77:                                               ; preds = %57, %64
  %78 = phi <16 x i1> [ %58, %57 ], [ %76, %64 ]
  %79 = phi <16 x i1> [ %59, %57 ], [ %71, %64 ]
  %80 = or <16 x i1> %79, %78
  %81 = shufflevector <16 x i1> %80, <16 x i1> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %82 = or <16 x i1> %80, %81
  %83 = shufflevector <16 x i1> %82, <16 x i1> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %84 = or <16 x i1> %82, %83
  %85 = shufflevector <16 x i1> %84, <16 x i1> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = or <16 x i1> %84, %85
  %87 = shufflevector <16 x i1> %86, <16 x i1> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = or <16 x i1> %86, %87
  %89 = extractelement <16 x i1> %88, i32 0
  %90 = icmp eq i64 %16, %11
  br i1 %90, label %104, label %91

91:                                               ; preds = %77, %13
  %92 = phi i64 [ 0, %13 ], [ %16, %77 ]
  %93 = phi i1 [ false, %13 ], [ %89, %77 ]
  br label %94

94:                                               ; preds = %91, %94
  %95 = phi i64 [ %102, %94 ], [ %92, %91 ]
  %96 = phi i1 [ %101, %94 ], [ %93, %91 ]
  %97 = getelementptr inbounds i8, i8* %9, i64 %95
  %98 = load i8, i8* %97, align 1
  %99 = add i8 %98, -97
  %100 = icmp ult i8 %99, 26
  %101 = or i1 %96, %100
  %102 = add nuw nsw i64 %95, 1
  %103 = icmp eq i64 %102, %11
  br i1 %103, label %104, label %94, !llvm.loop !33

104:                                              ; preds = %94, %77
  %105 = phi i1 [ %89, %77 ], [ %101, %94 ]
  br i1 %105, label %124, label %106

106:                                              ; preds = %104, %10
  %107 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %107, label %428, label %108

108:                                              ; preds = %106
  %109 = load atomic i32, i32* %4 monotonic, align 4
  %110 = and i32 %109, 2
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %428

112:                                              ; preds = %108
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %114 = load i32, i32* %113, align 4
  %115 = zext i32 %114 to i33
  %116 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %115, i33 1) #15
  %117 = extractvalue { i33, i1 } %116, 1
  %118 = extractvalue { i33, i1 } %116, 0
  %119 = icmp slt i33 %118, 0
  %120 = or i1 %117, %119
  br i1 %120, label %121, label %122, !prof !2

121:                                              ; preds = %112
  tail call void @llvm.trap() #15
  unreachable

122:                                              ; preds = %112
  %123 = trunc i33 %118 to i32
  store i32 %123, i32* %113, align 4
  br label %428

124:                                              ; preds = %104
  %125 = add nuw nsw i64 %11, 12
  %126 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %125, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %127 = getelementptr inbounds i8, i8* %126, i64 12
  %128 = bitcast i8* %126 to i32*
  store i32 1, i32* %128, align 4
  %129 = getelementptr inbounds i8, i8* %126, i64 4
  %130 = bitcast i8* %129 to i32*
  store i32 %3, i32* %130, align 4
  %131 = getelementptr inbounds i8, i8* %126, i64 8
  %132 = bitcast i8* %131 to i32*
  store i32 1, i32* %132, align 4
  %133 = icmp ult i32 %3, 32
  br i1 %133, label %173, label %134

134:                                              ; preds = %124
  %135 = add nuw nsw i64 %11, 12
  %136 = getelementptr i8, i8* %126, i64 %135
  %137 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1, i32 0
  %138 = bitcast i32* %137 to i8*
  %139 = getelementptr i8, i8* %138, i64 %11
  %140 = icmp ult i8* %127, %139
  %141 = icmp ugt i8* %136, %9
  %142 = and i1 %140, %141
  br i1 %142, label %173, label %143

143:                                              ; preds = %134
  %144 = and i64 %11, 4294967264
  br label %145

145:                                              ; preds = %145, %143
  %146 = phi i64 [ 0, %143 ], [ %169, %145 ]
  %147 = getelementptr inbounds i8, i8* %9, i64 %146
  %148 = bitcast i8* %147 to <16 x i8>*
  %149 = load <16 x i8>, <16 x i8>* %148, align 1, !alias.scope !34
  %150 = getelementptr inbounds i8, i8* %147, i64 16
  %151 = bitcast i8* %150 to <16 x i8>*
  %152 = load <16 x i8>, <16 x i8>* %151, align 1, !alias.scope !34
  %153 = add <16 x i8> %149, <i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97>
  %154 = add <16 x i8> %152, <i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97, i8 -97>
  %155 = icmp ult <16 x i8> %153, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %156 = icmp ult <16 x i8> %154, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %157 = zext <16 x i1> %155 to <16 x i8>
  %158 = zext <16 x i1> %156 to <16 x i8>
  %159 = shl nuw nsw <16 x i8> %157, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %160 = shl nuw nsw <16 x i8> %158, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %161 = xor <16 x i8> %159, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %162 = xor <16 x i8> %160, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %163 = and <16 x i8> %149, %161
  %164 = and <16 x i8> %152, %162
  %165 = getelementptr inbounds i8, i8* %127, i64 %146
  %166 = bitcast i8* %165 to <16 x i8>*
  store <16 x i8> %163, <16 x i8>* %166, align 1, !alias.scope !37, !noalias !34
  %167 = getelementptr inbounds i8, i8* %165, i64 16
  %168 = bitcast i8* %167 to <16 x i8>*
  store <16 x i8> %164, <16 x i8>* %168, align 1, !alias.scope !37, !noalias !34
  %169 = add i64 %146, 32
  %170 = icmp eq i64 %169, %144
  br i1 %170, label %171, label %145, !llvm.loop !39

171:                                              ; preds = %145
  %172 = icmp eq i64 %144, %11
  br i1 %172, label %426, label %173

173:                                              ; preds = %171, %134, %124
  %174 = phi i64 [ 0, %134 ], [ 0, %124 ], [ %144, %171 ]
  %175 = xor i64 %174, -1
  %176 = and i64 %11, 1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %189, label %178

178:                                              ; preds = %173
  %179 = getelementptr inbounds i8, i8* %9, i64 %174
  %180 = load i8, i8* %179, align 1
  %181 = add i8 %180, -97
  %182 = icmp ult i8 %181, 26
  %183 = zext i1 %182 to i8
  %184 = shl nuw nsw i8 %183, 5
  %185 = xor i8 %184, -1
  %186 = and i8 %180, %185
  %187 = getelementptr inbounds i8, i8* %127, i64 %174
  store i8 %186, i8* %187, align 1
  %188 = or i64 %174, 1
  br label %189

189:                                              ; preds = %173, %178
  %190 = phi i64 [ %174, %173 ], [ %188, %178 ]
  %191 = sub nsw i64 0, %11
  %192 = icmp eq i64 %175, %191
  br i1 %192, label %426, label %193

193:                                              ; preds = %189, %193
  %194 = phi i64 [ %214, %193 ], [ %190, %189 ]
  %195 = getelementptr inbounds i8, i8* %9, i64 %194
  %196 = load i8, i8* %195, align 1
  %197 = add i8 %196, -97
  %198 = icmp ult i8 %197, 26
  %199 = zext i1 %198 to i8
  %200 = shl nuw nsw i8 %199, 5
  %201 = xor i8 %200, -1
  %202 = and i8 %196, %201
  %203 = getelementptr inbounds i8, i8* %127, i64 %194
  store i8 %202, i8* %203, align 1
  %204 = add nuw nsw i64 %194, 1
  %205 = getelementptr inbounds i8, i8* %9, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = add i8 %206, -97
  %208 = icmp ult i8 %207, 26
  %209 = zext i1 %208 to i8
  %210 = shl nuw nsw i8 %209, 5
  %211 = xor i8 %210, -1
  %212 = and i8 %206, %211
  %213 = getelementptr inbounds i8, i8* %127, i64 %204
  store i8 %212, i8* %213, align 1
  %214 = add nuw nsw i64 %194, 2
  %215 = icmp eq i64 %214, %11
  br i1 %215, label %426, label %193, !llvm.loop !40

216:                                              ; preds = %1
  %217 = bitcast %"class.WTF::StringImpl"* %8 to i16*
  %218 = zext i32 %3 to i64
  %219 = icmp eq i32 %3, 0
  br i1 %219, label %311, label %220

220:                                              ; preds = %216
  %221 = icmp ult i32 %3, 16
  br i1 %221, label %296, label %222

222:                                              ; preds = %220
  %223 = and i64 %218, 4294967280
  %224 = add nsw i64 %223, -16
  %225 = lshr exact i64 %224, 4
  %226 = add nuw nsw i64 %225, 1
  %227 = and i64 %226, 1
  %228 = icmp eq i64 %224, 0
  br i1 %228, label %264, label %229

229:                                              ; preds = %222
  %230 = sub nuw nsw i64 %226, %227
  br label %231

231:                                              ; preds = %231, %229
  %232 = phi i64 [ 0, %229 ], [ %261, %231 ]
  %233 = phi <8 x i1> [ zeroinitializer, %229 ], [ %259, %231 ]
  %234 = phi <8 x i1> [ zeroinitializer, %229 ], [ %260, %231 ]
  %235 = phi i64 [ %230, %229 ], [ %262, %231 ]
  %236 = getelementptr inbounds i16, i16* %217, i64 %232
  %237 = bitcast i16* %236 to <8 x i16>*
  %238 = load <8 x i16>, <8 x i16>* %237, align 2
  %239 = getelementptr inbounds i16, i16* %236, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2
  %242 = add <8 x i16> %238, <i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97>
  %243 = add <8 x i16> %241, <i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97>
  %244 = icmp ult <8 x i16> %242, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %245 = icmp ult <8 x i16> %243, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %246 = or <8 x i1> %233, %244
  %247 = or <8 x i1> %234, %245
  %248 = or i64 %232, 16
  %249 = getelementptr inbounds i16, i16* %217, i64 %248
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2
  %252 = getelementptr inbounds i16, i16* %249, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2
  %255 = add <8 x i16> %251, <i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97>
  %256 = add <8 x i16> %254, <i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97>
  %257 = icmp ult <8 x i16> %255, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %258 = icmp ult <8 x i16> %256, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %259 = or <8 x i1> %246, %257
  %260 = or <8 x i1> %247, %258
  %261 = add i64 %232, 32
  %262 = add i64 %235, -2
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %231, !llvm.loop !41

264:                                              ; preds = %231, %222
  %265 = phi <8 x i1> [ undef, %222 ], [ %259, %231 ]
  %266 = phi <8 x i1> [ undef, %222 ], [ %260, %231 ]
  %267 = phi i64 [ 0, %222 ], [ %261, %231 ]
  %268 = phi <8 x i1> [ zeroinitializer, %222 ], [ %259, %231 ]
  %269 = phi <8 x i1> [ zeroinitializer, %222 ], [ %260, %231 ]
  %270 = icmp eq i64 %227, 0
  br i1 %270, label %284, label %271

271:                                              ; preds = %264
  %272 = getelementptr inbounds i16, i16* %217, i64 %267
  %273 = getelementptr inbounds i16, i16* %272, i64 8
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2
  %276 = add <8 x i16> %275, <i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97>
  %277 = icmp ult <8 x i16> %276, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %278 = or <8 x i1> %269, %277
  %279 = bitcast i16* %272 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 2
  %281 = add <8 x i16> %280, <i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97>
  %282 = icmp ult <8 x i16> %281, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %283 = or <8 x i1> %268, %282
  br label %284

284:                                              ; preds = %264, %271
  %285 = phi <8 x i1> [ %265, %264 ], [ %283, %271 ]
  %286 = phi <8 x i1> [ %266, %264 ], [ %278, %271 ]
  %287 = or <8 x i1> %286, %285
  %288 = shufflevector <8 x i1> %287, <8 x i1> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %289 = or <8 x i1> %287, %288
  %290 = shufflevector <8 x i1> %289, <8 x i1> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %291 = or <8 x i1> %289, %290
  %292 = shufflevector <8 x i1> %291, <8 x i1> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %293 = or <8 x i1> %291, %292
  %294 = extractelement <8 x i1> %293, i32 0
  %295 = icmp eq i64 %223, %218
  br i1 %295, label %309, label %296

296:                                              ; preds = %284, %220
  %297 = phi i64 [ 0, %220 ], [ %223, %284 ]
  %298 = phi i1 [ false, %220 ], [ %294, %284 ]
  br label %299

299:                                              ; preds = %296, %299
  %300 = phi i64 [ %307, %299 ], [ %297, %296 ]
  %301 = phi i1 [ %306, %299 ], [ %298, %296 ]
  %302 = getelementptr inbounds i16, i16* %217, i64 %300
  %303 = load i16, i16* %302, align 2
  %304 = add i16 %303, -97
  %305 = icmp ult i16 %304, 26
  %306 = or i1 %301, %305
  %307 = add nuw nsw i64 %300, 1
  %308 = icmp eq i64 %307, %218
  br i1 %308, label %309, label %299, !llvm.loop !42

309:                                              ; preds = %299, %284
  %310 = phi i1 [ %294, %284 ], [ %306, %299 ]
  br i1 %310, label %329, label %311

311:                                              ; preds = %309, %216
  %312 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %312, label %428, label %313

313:                                              ; preds = %311
  %314 = load atomic i32, i32* %4 monotonic, align 4
  %315 = and i32 %314, 2
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %317, label %428

317:                                              ; preds = %313
  %318 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %319 = load i32, i32* %318, align 4
  %320 = zext i32 %319 to i33
  %321 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %320, i33 1) #15
  %322 = extractvalue { i33, i1 } %321, 1
  %323 = extractvalue { i33, i1 } %321, 0
  %324 = icmp slt i33 %323, 0
  %325 = or i1 %322, %324
  br i1 %325, label %326, label %327, !prof !2

326:                                              ; preds = %317
  tail call void @llvm.trap() #15
  unreachable

327:                                              ; preds = %317
  %328 = trunc i33 %323 to i32
  store i32 %328, i32* %318, align 4
  br label %428

329:                                              ; preds = %309
  %330 = shl nuw nsw i64 %218, 1
  %331 = add nuw nsw i64 %330, 12
  %332 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %331, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %333 = getelementptr inbounds i8, i8* %332, i64 12
  %334 = bitcast i8* %333 to i16*
  %335 = bitcast i8* %332 to i32*
  store i32 1, i32* %335, align 4
  %336 = getelementptr inbounds i8, i8* %332, i64 4
  %337 = bitcast i8* %336 to i32*
  store i32 %3, i32* %337, align 4
  %338 = getelementptr inbounds i8, i8* %332, i64 8
  %339 = bitcast i8* %338 to i32*
  store i32 0, i32* %339, align 4
  %340 = icmp ult i32 %3, 16
  br i1 %340, label %381, label %341

341:                                              ; preds = %329
  %342 = shl nuw nsw i64 %218, 1
  %343 = add nuw nsw i64 %342, 12
  %344 = getelementptr i8, i8* %332, i64 %343
  %345 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1, i32 0
  %346 = bitcast i32* %345 to i8*
  %347 = getelementptr i8, i8* %346, i64 %342
  %348 = icmp ult i8* %333, %347
  %349 = icmp ugt i8* %344, %9
  %350 = and i1 %348, %349
  br i1 %350, label %381, label %351

351:                                              ; preds = %341
  %352 = and i64 %218, 4294967280
  br label %353

353:                                              ; preds = %353, %351
  %354 = phi i64 [ 0, %351 ], [ %377, %353 ]
  %355 = getelementptr inbounds i16, i16* %217, i64 %354
  %356 = bitcast i16* %355 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 2, !alias.scope !43
  %358 = getelementptr inbounds i16, i16* %355, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  %360 = load <8 x i16>, <8 x i16>* %359, align 2, !alias.scope !43
  %361 = add <8 x i16> %357, <i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97>
  %362 = add <8 x i16> %360, <i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97>
  %363 = icmp ult <8 x i16> %361, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %364 = icmp ult <8 x i16> %362, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %365 = zext <8 x i1> %363 to <8 x i16>
  %366 = zext <8 x i1> %364 to <8 x i16>
  %367 = shl nuw nsw <8 x i16> %365, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %368 = shl nuw nsw <8 x i16> %366, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %369 = xor <8 x i16> %367, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %370 = xor <8 x i16> %368, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %371 = and <8 x i16> %357, %369
  %372 = and <8 x i16> %360, %370
  %373 = getelementptr inbounds i16, i16* %334, i64 %354
  %374 = bitcast i16* %373 to <8 x i16>*
  store <8 x i16> %371, <8 x i16>* %374, align 2, !alias.scope !46, !noalias !43
  %375 = getelementptr inbounds i16, i16* %373, i64 8
  %376 = bitcast i16* %375 to <8 x i16>*
  store <8 x i16> %372, <8 x i16>* %376, align 2, !alias.scope !46, !noalias !43
  %377 = add i64 %354, 16
  %378 = icmp eq i64 %377, %352
  br i1 %378, label %379, label %353, !llvm.loop !48

379:                                              ; preds = %353
  %380 = icmp eq i64 %352, %218
  br i1 %380, label %424, label %381

381:                                              ; preds = %379, %341, %329
  %382 = phi i64 [ 0, %341 ], [ 0, %329 ], [ %352, %379 ]
  %383 = xor i64 %382, -1
  %384 = and i64 %218, 1
  %385 = icmp eq i64 %384, 0
  br i1 %385, label %397, label %386

386:                                              ; preds = %381
  %387 = getelementptr inbounds i16, i16* %217, i64 %382
  %388 = load i16, i16* %387, align 2
  %389 = add i16 %388, -97
  %390 = icmp ult i16 %389, 26
  %391 = zext i1 %390 to i16
  %392 = shl nuw nsw i16 %391, 5
  %393 = xor i16 %392, -1
  %394 = and i16 %388, %393
  %395 = getelementptr inbounds i16, i16* %334, i64 %382
  store i16 %394, i16* %395, align 2
  %396 = or i64 %382, 1
  br label %397

397:                                              ; preds = %381, %386
  %398 = phi i64 [ %382, %381 ], [ %396, %386 ]
  %399 = sub nsw i64 0, %218
  %400 = icmp eq i64 %383, %399
  br i1 %400, label %424, label %401

401:                                              ; preds = %397, %401
  %402 = phi i64 [ %422, %401 ], [ %398, %397 ]
  %403 = getelementptr inbounds i16, i16* %217, i64 %402
  %404 = load i16, i16* %403, align 2
  %405 = add i16 %404, -97
  %406 = icmp ult i16 %405, 26
  %407 = zext i1 %406 to i16
  %408 = shl nuw nsw i16 %407, 5
  %409 = xor i16 %408, -1
  %410 = and i16 %404, %409
  %411 = getelementptr inbounds i16, i16* %334, i64 %402
  store i16 %410, i16* %411, align 2
  %412 = add nuw nsw i64 %402, 1
  %413 = getelementptr inbounds i16, i16* %217, i64 %412
  %414 = load i16, i16* %413, align 2
  %415 = add i16 %414, -97
  %416 = icmp ult i16 %415, 26
  %417 = zext i1 %416 to i16
  %418 = shl nuw nsw i16 %417, 5
  %419 = xor i16 %418, -1
  %420 = and i16 %414, %419
  %421 = getelementptr inbounds i16, i16* %334, i64 %412
  store i16 %420, i16* %421, align 2
  %422 = add nuw nsw i64 %402, 2
  %423 = icmp eq i64 %422, %218
  br i1 %423, label %424, label %401, !llvm.loop !49

424:                                              ; preds = %397, %401, %379
  %425 = bitcast i8* %332 to %"class.WTF::StringImpl"*
  br label %428

426:                                              ; preds = %189, %193, %171
  %427 = bitcast i8* %126 to %"class.WTF::StringImpl"*
  br label %428

428:                                              ; preds = %426, %424, %106, %108, %122, %311, %313, %327
  %429 = phi %"class.WTF::StringImpl"* [ null, %106 ], [ %0, %108 ], [ %0, %122 ], [ null, %311 ], [ %0, %313 ], [ %0, %327 ], [ %425, %424 ], [ %427, %426 ]
  ret %"class.WTF::StringImpl"* %429
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl4FillEDs(%"class.WTF::StringImpl"* nocapture readonly, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = icmp ugt i16 %1, 127
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %3, label %53, label %7

7:                                                ; preds = %2
  br i1 %6, label %8, label %28

8:                                                ; preds = %7
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %39, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %39

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #15
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !2

25:                                               ; preds = %16
  tail call void @llvm.trap() #15
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %39

28:                                               ; preds = %7
  %29 = zext i32 %5 to i64
  %30 = add nuw nsw i64 %29, 12
  %31 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %30, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %32 = getelementptr inbounds i8, i8* %31, i64 12
  %33 = bitcast i8* %31 to %"class.WTF::StringImpl"*
  %34 = bitcast i8* %31 to i32*
  store i32 1, i32* %34, align 4
  %35 = getelementptr inbounds i8, i8* %31, i64 4
  %36 = bitcast i8* %35 to i32*
  store i32 %5, i32* %36, align 4
  %37 = getelementptr inbounds i8, i8* %31, i64 8
  %38 = bitcast i8* %37 to i32*
  store i32 1, i32* %38, align 4
  br label %39

39:                                               ; preds = %8, %11, %26, %28
  %40 = phi i8* [ null, %8 ], [ null, %26 ], [ null, %11 ], [ %32, %28 ]
  %41 = phi %"class.WTF::StringImpl"* [ null, %8 ], [ %9, %26 ], [ %9, %11 ], [ %33, %28 ]
  %42 = load i32, i32* %4, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %99, label %44

44:                                               ; preds = %39
  %45 = trunc i16 %1 to i8
  br label %46

46:                                               ; preds = %44, %46
  %47 = phi i64 [ 0, %44 ], [ %49, %46 ]
  %48 = getelementptr inbounds i8, i8* %40, i64 %47
  store i8 %45, i8* %48, align 1
  %49 = add nuw nsw i64 %47, 1
  %50 = load i32, i32* %4, align 4
  %51 = zext i32 %50 to i64
  %52 = icmp ult i64 %49, %51
  br i1 %52, label %46, label %99

53:                                               ; preds = %2
  br i1 %6, label %54, label %74

54:                                               ; preds = %53
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %87, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %87

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = zext i32 %64 to i33
  %66 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %65, i33 1) #15
  %67 = extractvalue { i33, i1 } %66, 1
  %68 = extractvalue { i33, i1 } %66, 0
  %69 = icmp slt i33 %68, 0
  %70 = or i1 %67, %69
  br i1 %70, label %71, label %72, !prof !2

71:                                               ; preds = %62
  tail call void @llvm.trap() #15
  unreachable

72:                                               ; preds = %62
  %73 = trunc i33 %68 to i32
  store i32 %73, i32* %63, align 4
  br label %87

74:                                               ; preds = %53
  %75 = zext i32 %5 to i64
  %76 = shl nuw nsw i64 %75, 1
  %77 = add nuw nsw i64 %76, 12
  %78 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %77, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %79 = getelementptr inbounds i8, i8* %78, i64 12
  %80 = bitcast i8* %79 to i16*
  %81 = bitcast i8* %78 to %"class.WTF::StringImpl"*
  %82 = bitcast i8* %78 to i32*
  store i32 1, i32* %82, align 4
  %83 = getelementptr inbounds i8, i8* %78, i64 4
  %84 = bitcast i8* %83 to i32*
  store i32 %5, i32* %84, align 4
  %85 = getelementptr inbounds i8, i8* %78, i64 8
  %86 = bitcast i8* %85 to i32*
  store i32 0, i32* %86, align 4
  br label %87

87:                                               ; preds = %54, %57, %72, %74
  %88 = phi i16* [ null, %54 ], [ null, %72 ], [ null, %57 ], [ %80, %74 ]
  %89 = phi %"class.WTF::StringImpl"* [ null, %54 ], [ %55, %72 ], [ %55, %57 ], [ %81, %74 ]
  %90 = load i32, i32* %4, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %99, label %92

92:                                               ; preds = %87, %92
  %93 = phi i64 [ %95, %92 ], [ 0, %87 ]
  %94 = getelementptr inbounds i16, i16* %88, i64 %93
  store i16 %1, i16* %94, align 2
  %95 = add nuw nsw i64 %93, 1
  %96 = load i32, i32* %4, align 4
  %97 = zext i32 %96 to i64
  %98 = icmp ult i64 %95, %97
  br i1 %98, label %92, label %99

99:                                               ; preds = %46, %92, %87, %39
  %100 = phi %"class.WTF::StringImpl"* [ %89, %87 ], [ %41, %39 ], [ %89, %92 ], [ %41, %46 ]
  ret %"class.WTF::StringImpl"* %100
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl8FoldCaseEv(%"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #15
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp slt i32 %10, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %8, align 8
  br label %23

14:                                               ; preds = %1
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %10) #15
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 2147483647) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.6, i64 0, i64 0), i8* %15, i8* %16) #15
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %8, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 405, %"class.logging::CheckOpResult"* nonnull %5) #15
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #15
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #15
  %24 = load i32, i32* %9, align 4
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = icmp eq i32 %24, 0
  br i1 %28, label %129, label %30

30:                                               ; preds = %23
  br i1 %29, label %31, label %53

31:                                               ; preds = %30
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %33 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %33, label %51, label %34

34:                                               ; preds = %31
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %51

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i33
  %43 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %42, i33 1) #15
  %44 = extractvalue { i33, i1 } %43, 1
  %45 = extractvalue { i33, i1 } %43, 0
  %46 = icmp slt i33 %45, 0
  %47 = or i1 %44, %46
  br i1 %47, label %48, label %49, !prof !2

48:                                               ; preds = %39
  call void @llvm.trap() #15
  unreachable

49:                                               ; preds = %39
  %50 = trunc i33 %45 to i32
  store i32 %50, i32* %40, align 4
  br label %51

51:                                               ; preds = %31, %34, %49
  %52 = ptrtoint %"class.WTF::StringImpl"* %32 to i64
  br label %380

53:                                               ; preds = %30
  %54 = zext i32 %24 to i64
  %55 = add nuw nsw i64 %54, 12
  %56 = call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %55, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %57 = getelementptr inbounds i8, i8* %56, i64 12
  %58 = bitcast i8* %56 to i32*
  store i32 1, i32* %58, align 4
  %59 = getelementptr inbounds i8, i8* %56, i64 4
  %60 = bitcast i8* %59 to i32*
  store i32 %24, i32* %60, align 4
  %61 = getelementptr inbounds i8, i8* %56, i64 8
  %62 = bitcast i8* %61 to i32*
  store i32 1, i32* %62, align 4
  %63 = ptrtoint i8* %56 to i64
  %64 = icmp sgt i32 %24, 0
  br i1 %64, label %65, label %380

65:                                               ; preds = %53
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %67 = bitcast %"class.WTF::StringImpl"* %66 to i8*
  %68 = zext i32 %24 to i64
  %69 = and i64 %68, 1
  %70 = icmp eq i32 %24, 1
  br i1 %70, label %73, label %71

71:                                               ; preds = %65
  %72 = sub nsw i64 %68, %69
  br label %95

73:                                               ; preds = %95, %65
  %74 = phi i32 [ undef, %65 ], [ %115, %95 ]
  %75 = phi i64 [ 0, %65 ], [ %116, %95 ]
  %76 = phi i32 [ 0, %65 ], [ %115, %95 ]
  %77 = icmp eq i64 %69, 0
  br i1 %77, label %87, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds i8, i8* %67, i64 %75
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i64
  %82 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = getelementptr inbounds i8, i8* %57, i64 %75
  store i8 %83, i8* %84, align 1
  %85 = zext i8 %80 to i32
  %86 = or i32 %76, %85
  br label %87

87:                                               ; preds = %73, %78
  %88 = phi i32 [ %74, %73 ], [ %86, %78 ]
  %89 = icmp ugt i32 %88, 127
  %90 = and i1 %89, %64
  br i1 %90, label %91, label %380

91:                                               ; preds = %87
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %93 = bitcast %"class.WTF::StringImpl"* %92 to i8*
  %94 = zext i32 %24 to i64
  br label %119

95:                                               ; preds = %95, %71
  %96 = phi i64 [ 0, %71 ], [ %116, %95 ]
  %97 = phi i32 [ 0, %71 ], [ %115, %95 ]
  %98 = phi i64 [ %72, %71 ], [ %117, %95 ]
  %99 = getelementptr inbounds i8, i8* %67, i64 %96
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i64
  %102 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = getelementptr inbounds i8, i8* %57, i64 %96
  store i8 %103, i8* %104, align 1
  %105 = zext i8 %100 to i32
  %106 = or i32 %97, %105
  %107 = or i64 %96, 1
  %108 = getelementptr inbounds i8, i8* %67, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i64
  %111 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds i8, i8* %57, i64 %107
  store i8 %112, i8* %113, align 1
  %114 = zext i8 %109 to i32
  %115 = or i32 %106, %114
  %116 = add nuw nsw i64 %96, 2
  %117 = add i64 %98, -2
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %73, label %95

119:                                              ; preds = %119, %91
  %120 = phi i64 [ 0, %91 ], [ %127, %119 ]
  %121 = getelementptr inbounds i8, i8* %93, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = call i32 @u_tolower_69(i32 %123) #15
  %125 = trunc i32 %124 to i8
  %126 = getelementptr inbounds i8, i8* %57, i64 %120
  store i8 %125, i8* %126, align 1
  %127 = add nuw nsw i64 %120, 1
  %128 = icmp eq i64 %127, %94
  br i1 %128, label %380, label %119

129:                                              ; preds = %23
  br i1 %29, label %130, label %152

130:                                              ; preds = %129
  %131 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %132 = icmp eq %"class.WTF::StringImpl"* %131, null
  br i1 %132, label %150, label %133

133:                                              ; preds = %130
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %150

138:                                              ; preds = %133
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = zext i32 %140 to i33
  %142 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %141, i33 1) #15
  %143 = extractvalue { i33, i1 } %142, 1
  %144 = extractvalue { i33, i1 } %142, 0
  %145 = icmp slt i33 %144, 0
  %146 = or i1 %143, %145
  br i1 %146, label %147, label %148, !prof !2

147:                                              ; preds = %138
  call void @llvm.trap() #15
  unreachable

148:                                              ; preds = %138
  %149 = trunc i33 %144 to i32
  store i32 %149, i32* %139, align 4
  br label %150

150:                                              ; preds = %130, %133, %148
  %151 = ptrtoint %"class.WTF::StringImpl"* %131 to i64
  br label %380

152:                                              ; preds = %129
  %153 = zext i32 %24 to i64
  %154 = shl nuw nsw i64 %153, 1
  %155 = add nuw nsw i64 %154, 12
  %156 = call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %155, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %157 = getelementptr inbounds i8, i8* %156, i64 12
  %158 = bitcast i8* %157 to i16*
  %159 = bitcast i8* %156 to %"class.WTF::StringImpl"*
  %160 = bitcast i8* %156 to i32*
  store i32 1, i32* %160, align 4
  %161 = getelementptr inbounds i8, i8* %156, i64 4
  %162 = bitcast i8* %161 to i32*
  store i32 %24, i32* %162, align 4
  %163 = getelementptr inbounds i8, i8* %156, i64 8
  %164 = bitcast i8* %163 to i32*
  store i32 0, i32* %164, align 4
  %165 = ptrtoint i8* %156 to i64
  %166 = icmp sgt i32 %24, 0
  br i1 %166, label %167, label %380

167:                                              ; preds = %152
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %169 = bitcast %"class.WTF::StringImpl"* %168 to i16*
  %170 = zext i32 %24 to i64
  %171 = icmp ult i32 %24, 8
  br i1 %171, label %172, label %196

172:                                              ; preds = %239, %196, %167
  %173 = phi i64 [ 0, %196 ], [ 0, %167 ], [ %208, %239 ]
  %174 = phi i32 [ 0, %196 ], [ 0, %167 ], [ %245, %239 ]
  %175 = xor i64 %173, -1
  %176 = and i64 %170, 1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %190, label %178

178:                                              ; preds = %172
  %179 = getelementptr inbounds i16, i16* %169, i64 %173
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = or i32 %174, %181
  %183 = add i16 %180, -65
  %184 = icmp ult i16 %183, 26
  %185 = zext i1 %184 to i16
  %186 = shl nuw nsw i16 %185, 5
  %187 = or i16 %186, %180
  %188 = getelementptr inbounds i16, i16* %158, i64 %173
  store i16 %187, i16* %188, align 2
  %189 = or i64 %173, 1
  br label %190

190:                                              ; preds = %172, %178
  %191 = phi i32 [ undef, %172 ], [ %182, %178 ]
  %192 = phi i64 [ %173, %172 ], [ %189, %178 ]
  %193 = phi i32 [ %174, %172 ], [ %182, %178 ]
  %194 = sub nsw i64 0, %170
  %195 = icmp eq i64 %175, %194
  br i1 %195, label %247, label %250

196:                                              ; preds = %167
  %197 = bitcast %"class.WTF::StringImpl"* %168 to i8*
  %198 = shl nuw nsw i64 %170, 1
  %199 = add nuw nsw i64 %198, 12
  %200 = getelementptr i8, i8* %156, i64 %199
  %201 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1, i32 0
  %202 = bitcast i32* %201 to i8*
  %203 = getelementptr i8, i8* %202, i64 %198
  %204 = icmp ult i8* %157, %203
  %205 = icmp ugt i8* %200, %197
  %206 = and i1 %204, %205
  br i1 %206, label %172, label %207

207:                                              ; preds = %196
  %208 = and i64 %170, 4294967288
  br label %209

209:                                              ; preds = %209, %207
  %210 = phi i64 [ 0, %207 ], [ %237, %209 ]
  %211 = phi <4 x i32> [ zeroinitializer, %207 ], [ %221, %209 ]
  %212 = phi <4 x i32> [ zeroinitializer, %207 ], [ %222, %209 ]
  %213 = getelementptr inbounds i16, i16* %169, i64 %210
  %214 = bitcast i16* %213 to <4 x i16>*
  %215 = load <4 x i16>, <4 x i16>* %214, align 2, !alias.scope !50
  %216 = getelementptr inbounds i16, i16* %213, i64 4
  %217 = bitcast i16* %216 to <4 x i16>*
  %218 = load <4 x i16>, <4 x i16>* %217, align 2, !alias.scope !50
  %219 = zext <4 x i16> %215 to <4 x i32>
  %220 = zext <4 x i16> %218 to <4 x i32>
  %221 = or <4 x i32> %211, %219
  %222 = or <4 x i32> %212, %220
  %223 = add <4 x i16> %215, <i16 -65, i16 -65, i16 -65, i16 -65>
  %224 = add <4 x i16> %218, <i16 -65, i16 -65, i16 -65, i16 -65>
  %225 = icmp ult <4 x i16> %223, <i16 26, i16 26, i16 26, i16 26>
  %226 = icmp ult <4 x i16> %224, <i16 26, i16 26, i16 26, i16 26>
  %227 = zext <4 x i1> %225 to <4 x i16>
  %228 = zext <4 x i1> %226 to <4 x i16>
  %229 = shl nuw nsw <4 x i16> %227, <i16 5, i16 5, i16 5, i16 5>
  %230 = shl nuw nsw <4 x i16> %228, <i16 5, i16 5, i16 5, i16 5>
  %231 = or <4 x i16> %229, %215
  %232 = or <4 x i16> %230, %218
  %233 = getelementptr inbounds i16, i16* %158, i64 %210
  %234 = bitcast i16* %233 to <4 x i16>*
  store <4 x i16> %231, <4 x i16>* %234, align 2, !alias.scope !53, !noalias !50
  %235 = getelementptr inbounds i16, i16* %233, i64 4
  %236 = bitcast i16* %235 to <4 x i16>*
  store <4 x i16> %232, <4 x i16>* %236, align 2, !alias.scope !53, !noalias !50
  %237 = add i64 %210, 8
  %238 = icmp eq i64 %237, %208
  br i1 %238, label %239, label %209, !llvm.loop !55

239:                                              ; preds = %209
  %240 = or <4 x i32> %222, %221
  %241 = shufflevector <4 x i32> %240, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %242 = or <4 x i32> %240, %241
  %243 = shufflevector <4 x i32> %242, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %244 = or <4 x i32> %242, %243
  %245 = extractelement <4 x i32> %244, i32 0
  %246 = icmp eq i64 %208, %170
  br i1 %246, label %247, label %172

247:                                              ; preds = %190, %250, %239
  %248 = phi i32 [ %245, %239 ], [ %191, %190 ], [ %267, %250 ]
  %249 = icmp ugt i32 %248, 127
  br i1 %249, label %276, label %380

250:                                              ; preds = %190, %250
  %251 = phi i64 [ %274, %250 ], [ %192, %190 ]
  %252 = phi i32 [ %267, %250 ], [ %193, %190 ]
  %253 = getelementptr inbounds i16, i16* %169, i64 %251
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = or i32 %252, %255
  %257 = add i16 %254, -65
  %258 = icmp ult i16 %257, 26
  %259 = zext i1 %258 to i16
  %260 = shl nuw nsw i16 %259, 5
  %261 = or i16 %260, %254
  %262 = getelementptr inbounds i16, i16* %158, i64 %251
  store i16 %261, i16* %262, align 2
  %263 = add nuw nsw i64 %251, 1
  %264 = getelementptr inbounds i16, i16* %169, i64 %263
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = or i32 %256, %266
  %268 = add i16 %265, -65
  %269 = icmp ult i16 %268, 26
  %270 = zext i1 %269 to i16
  %271 = shl nuw nsw i16 %270, 5
  %272 = or i16 %271, %265
  %273 = getelementptr inbounds i16, i16* %158, i64 %263
  store i16 %272, i16* %273, align 2
  %274 = add nuw nsw i64 %251, 2
  %275 = icmp eq i64 %274, %170
  br i1 %275, label %247, label %250, !llvm.loop !56

276:                                              ; preds = %247
  %277 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %278 = bitcast %"class.WTF::StringImpl"* %277 to i16*
  %279 = load i32, i32* %9, align 4
  %280 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %280) #15
  store i32 0, i32* %2, align 4
  %281 = call i32 @u_strFoldCase_69(i16* %158, i32 %24, i16* %278, i32 %279, i32 0, i32* nonnull %2) #15
  %282 = load i32, i32* %2, align 4
  %283 = icmp slt i32 %282, 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %280) #15
  %284 = icmp eq i32 %281, %24
  %285 = and i1 %284, %283
  br i1 %285, label %380, label %286

286:                                              ; preds = %276
  %287 = icmp eq i32 %281, 0
  br i1 %287, label %288, label %308

288:                                              ; preds = %286
  %289 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %290 = icmp eq %"class.WTF::StringImpl"* %289, null
  br i1 %290, label %321, label %291

291:                                              ; preds = %288
  %292 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %289, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %293 = load atomic i32, i32* %292 monotonic, align 4
  %294 = and i32 %293, 2
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %321

296:                                              ; preds = %291
  %297 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %289, i64 0, i32 0
  %298 = load i32, i32* %297, align 4
  %299 = zext i32 %298 to i33
  %300 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %299, i33 1) #15
  %301 = extractvalue { i33, i1 } %300, 1
  %302 = extractvalue { i33, i1 } %300, 0
  %303 = icmp slt i33 %302, 0
  %304 = or i1 %301, %303
  br i1 %304, label %305, label %306, !prof !2

305:                                              ; preds = %296
  call void @llvm.trap() #15
  unreachable

306:                                              ; preds = %296
  %307 = trunc i33 %302 to i32
  store i32 %307, i32* %297, align 4
  br label %321

308:                                              ; preds = %286
  %309 = zext i32 %281 to i64
  %310 = shl nuw nsw i64 %309, 1
  %311 = add nuw nsw i64 %310, 12
  %312 = call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %311, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %313 = getelementptr inbounds i8, i8* %312, i64 12
  %314 = bitcast i8* %313 to i16*
  %315 = bitcast i8* %312 to %"class.WTF::StringImpl"*
  %316 = bitcast i8* %312 to i32*
  store i32 1, i32* %316, align 4
  %317 = getelementptr inbounds i8, i8* %312, i64 4
  %318 = bitcast i8* %317 to i32*
  store i32 %281, i32* %318, align 4
  %319 = getelementptr inbounds i8, i8* %312, i64 8
  %320 = bitcast i8* %319 to i32*
  store i32 0, i32* %320, align 4
  br label %321

321:                                              ; preds = %288, %291, %306, %308
  %322 = phi i16* [ null, %288 ], [ null, %306 ], [ null, %291 ], [ %314, %308 ]
  %323 = phi %"class.WTF::StringImpl"* [ null, %288 ], [ %289, %306 ], [ %289, %291 ], [ %315, %308 ]
  %324 = ptrtoint %"class.WTF::StringImpl"* %323 to i64
  %325 = icmp eq i8* %156, null
  br i1 %325, label %340, label %326

326:                                              ; preds = %321
  %327 = getelementptr inbounds i8, i8* %156, i64 8
  %328 = bitcast i8* %327 to i32*
  %329 = load atomic i32, i32* %328 monotonic, align 4
  %330 = and i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = bitcast i8* %156 to i32*
  %333 = load i32, i32* %332, align 4
  br i1 %331, label %334, label %336

334:                                              ; preds = %326
  %335 = add i32 %333, -1
  store i32 %335, i32* %332, align 4
  br label %336

336:                                              ; preds = %334, %326
  %337 = phi i32 [ %335, %334 ], [ %333, %326 ]
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %339, label %340

339:                                              ; preds = %336
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %159) #15
  br label %340

340:                                              ; preds = %321, %336, %339
  %341 = load i32, i32* %9, align 4
  %342 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %342) #15
  store i32 0, i32* %3, align 4
  %343 = call i32 @u_strFoldCase_69(i16* %322, i32 %281, i16* %278, i32 %341, i32 0, i32* nonnull %3) #15
  %344 = load i32, i32* %3, align 4
  %345 = icmp slt i32 %344, 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %342) #15
  br i1 %345, label %380, label %346

346:                                              ; preds = %340
  %347 = ptrtoint %"class.WTF::StringImpl"* %0 to i64
  %348 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %348, label %365, label %349

349:                                              ; preds = %346
  %350 = load atomic i32, i32* %25 monotonic, align 4
  %351 = and i32 %350, 2
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %353, label %365

353:                                              ; preds = %349
  %354 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %355 = load i32, i32* %354, align 4
  %356 = zext i32 %355 to i33
  %357 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %356, i33 1) #15
  %358 = extractvalue { i33, i1 } %357, 1
  %359 = extractvalue { i33, i1 } %357, 0
  %360 = icmp slt i33 %359, 0
  %361 = or i1 %358, %360
  br i1 %361, label %362, label %363, !prof !2

362:                                              ; preds = %353
  call void @llvm.trap() #15
  unreachable

363:                                              ; preds = %353
  %364 = trunc i33 %359 to i32
  store i32 %364, i32* %354, align 4
  br label %365

365:                                              ; preds = %346, %349, %363
  %366 = icmp eq %"class.WTF::StringImpl"* %323, null
  br i1 %366, label %380, label %367

367:                                              ; preds = %365
  %368 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %323, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %369 = load atomic i32, i32* %368 monotonic, align 4
  %370 = and i32 %369, 2
  %371 = icmp eq i32 %370, 0
  %372 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %323, i64 0, i32 0
  %373 = load i32, i32* %372, align 4
  br i1 %371, label %374, label %376

374:                                              ; preds = %367
  %375 = add i32 %373, -1
  store i32 %375, i32* %372, align 4
  br label %376

376:                                              ; preds = %374, %367
  %377 = phi i32 [ %375, %374 ], [ %373, %367 ]
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %379, label %380

379:                                              ; preds = %376
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %323) #15
  br label %380

380:                                              ; preds = %119, %150, %152, %51, %53, %340, %276, %247, %379, %376, %365, %87
  %381 = phi i64 [ %63, %87 ], [ %347, %365 ], [ %347, %376 ], [ %347, %379 ], [ %324, %340 ], [ %165, %276 ], [ %165, %247 ], [ %52, %51 ], [ %63, %53 ], [ %151, %150 ], [ %165, %152 ], [ %63, %119 ]
  %382 = inttoptr i64 %381 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %382
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl8TruncateEj(%"class.WTF::StringImpl"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp ugt i32 %4, %1
  br i1 %5, label %25, label %6

6:                                                ; preds = %2
  %7 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %7, label %109, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %109

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #15
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %13
  tail call void @llvm.trap() #15
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %109

25:                                               ; preds = %2
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load atomic i32, i32* %26 monotonic, align 4
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %31 = icmp ne %"class.WTF::StringImpl"* %30, null
  %32 = icmp ne i32 %1, 0
  %33 = and i1 %31, %32
  br i1 %29, label %71, label %34

34:                                               ; preds = %25
  br i1 %33, label %56, label %35

35:                                               ; preds = %34
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %37 = ptrtoint %"class.WTF::StringImpl"* %36 to i64
  %38 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %38, label %68, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %68

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i33
  %48 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %47, i33 1) #15
  %49 = extractvalue { i33, i1 } %48, 1
  %50 = extractvalue { i33, i1 } %48, 0
  %51 = icmp slt i33 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %54, !prof !2

53:                                               ; preds = %44
  tail call void @llvm.trap() #15
  unreachable

54:                                               ; preds = %44
  %55 = trunc i33 %50 to i32
  store i32 %55, i32* %45, align 4
  br label %68

56:                                               ; preds = %34
  %57 = bitcast %"class.WTF::StringImpl"* %30 to i8*
  %58 = zext i32 %1 to i64
  %59 = add nuw nsw i64 %58, 12
  %60 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %59, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %61 = getelementptr inbounds i8, i8* %60, i64 12
  %62 = bitcast i8* %60 to i32*
  store i32 1, i32* %62, align 4
  %63 = getelementptr inbounds i8, i8* %60, i64 4
  %64 = bitcast i8* %63 to i32*
  store i32 %1, i32* %64, align 4
  %65 = getelementptr inbounds i8, i8* %60, i64 8
  %66 = bitcast i8* %65 to i32*
  store i32 1, i32* %66, align 4
  %67 = ptrtoint i8* %60 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* nonnull align 1 %57, i64 %58, i1 false) #15
  br label %68

68:                                               ; preds = %35, %39, %54, %56
  %69 = phi i64 [ %67, %56 ], [ %37, %35 ], [ %37, %39 ], [ %37, %54 ]
  %70 = inttoptr i64 %69 to %"class.WTF::StringImpl"*
  br label %109

71:                                               ; preds = %25
  br i1 %33, label %93, label %72

72:                                               ; preds = %71
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %74 = ptrtoint %"class.WTF::StringImpl"* %73 to i64
  %75 = icmp eq %"class.WTF::StringImpl"* %73, null
  br i1 %75, label %106, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = and i32 %78, 2
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %106

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = zext i32 %83 to i33
  %85 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %84, i33 1) #15
  %86 = extractvalue { i33, i1 } %85, 1
  %87 = extractvalue { i33, i1 } %85, 0
  %88 = icmp slt i33 %87, 0
  %89 = or i1 %86, %88
  br i1 %89, label %90, label %91, !prof !2

90:                                               ; preds = %81
  tail call void @llvm.trap() #15
  unreachable

91:                                               ; preds = %81
  %92 = trunc i33 %87 to i32
  store i32 %92, i32* %82, align 4
  br label %106

93:                                               ; preds = %71
  %94 = zext i32 %1 to i64
  %95 = shl nuw nsw i64 %94, 1
  %96 = add nuw nsw i64 %95, 12
  %97 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %96, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %98 = getelementptr inbounds i8, i8* %97, i64 12
  %99 = bitcast i8* %97 to i32*
  store i32 1, i32* %99, align 4
  %100 = getelementptr inbounds i8, i8* %97, i64 4
  %101 = bitcast i8* %100 to i32*
  store i32 %1, i32* %101, align 4
  %102 = getelementptr inbounds i8, i8* %97, i64 8
  %103 = bitcast i8* %102 to i32*
  store i32 0, i32* %103, align 4
  %104 = ptrtoint i8* %97 to i64
  %105 = bitcast %"class.WTF::StringImpl"* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %98, i8* nonnull align 2 %105, i64 %95, i1 false) #15
  br label %106

106:                                              ; preds = %72, %76, %91, %93
  %107 = phi i64 [ %104, %93 ], [ %74, %72 ], [ %74, %76 ], [ %74, %91 ]
  %108 = inttoptr i64 %107 to %"class.WTF::StringImpl"*
  br label %109

109:                                              ; preds = %23, %8, %6, %106, %68
  %110 = phi %"class.WTF::StringImpl"* [ %70, %68 ], [ %108, %106 ], [ null, %6 ], [ %0, %8 ], [ %0, %23 ]
  ret %"class.WTF::StringImpl"* %110
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl15StripWhiteSpaceEv(%"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl22StripMatchedCharactersINS_23SpaceOrNewlinePredicateEEE13scoped_refptrIS0_ET_(%"class.WTF::StringImpl"* %0)
  ret %"class.WTF::StringImpl"* %2
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl22StripMatchedCharactersINS_23SpaceOrNewlinePredicateEEE13scoped_refptrIS0_ET_(%"class.WTF::StringImpl"*) local_unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %25

5:                                                ; preds = %1
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %231, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %231

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #15
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %13
  tail call void @llvm.trap() #15
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %231

25:                                               ; preds = %1
  %26 = add i32 %3, -1
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %29 = bitcast %"class.WTF::StringImpl"* %28 to i8*
  %30 = bitcast %"class.WTF::StringImpl"* %28 to i16*
  br label %31

31:                                               ; preds = %25, %55
  %32 = phi i32 [ 0, %25 ], [ %57, %55 ]
  %33 = phi i32 [ 0, %25 ], [ %56, %55 ]
  %34 = load atomic i32, i32* %27 monotonic, align 4
  %35 = and i32 %34, 1
  %36 = icmp eq i32 %35, 0
  %37 = zext i32 %33 to i64
  br i1 %36, label %42, label %38

38:                                               ; preds = %31
  %39 = getelementptr inbounds i8, i8* %29, i64 %37
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i16
  br label %45

42:                                               ; preds = %31
  %43 = getelementptr inbounds i16, i16* %30, i64 %37
  %44 = load i16, i16* %43, align 2
  br label %45

45:                                               ; preds = %42, %38
  %46 = phi i16 [ %41, %38 ], [ %44, %42 ]
  %47 = icmp ult i16 %46, 128
  br i1 %47, label %48, label %51

48:                                               ; preds = %45
  %49 = icmp ult i16 %46, 33
  br i1 %49, label %50, label %59

50:                                               ; preds = %48
  switch i16 %46, label %59 [
    i16 32, label %55
    i16 13, label %55
    i16 12, label %55
    i16 11, label %55
    i16 10, label %55
    i16 9, label %55
  ]

51:                                               ; preds = %45
  %52 = zext i16 %46 to i32
  %53 = tail call i32 @u_charDirection_69(i32 %52) #15
  %54 = icmp eq i32 %53, 9
  br i1 %54, label %55, label %59

55:                                               ; preds = %50, %50, %50, %50, %50, %50, %51
  %56 = add i32 %33, 1
  %57 = xor i32 %33, -1
  %58 = icmp ugt i32 %56, %26
  br i1 %58, label %64, label %31

59:                                               ; preds = %50, %48, %51
  %60 = zext i32 %33 to i64
  %61 = icmp eq i32 %26, 0
  br i1 %61, label %116, label %62

62:                                               ; preds = %59
  %63 = zext i32 %26 to i64
  br label %84

64:                                               ; preds = %55
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %66, label %231, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %231

72:                                               ; preds = %67
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = zext i32 %74 to i33
  %76 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %75, i33 1) #15
  %77 = extractvalue { i33, i1 } %76, 1
  %78 = extractvalue { i33, i1 } %76, 0
  %79 = icmp slt i33 %78, 0
  %80 = or i1 %77, %79
  br i1 %80, label %81, label %82, !prof !2

81:                                               ; preds = %72
  tail call void @llvm.trap() #15
  unreachable

82:                                               ; preds = %72
  %83 = trunc i33 %78 to i32
  store i32 %83, i32* %73, align 4
  br label %231

84:                                               ; preds = %62, %107
  %85 = phi i64 [ %63, %62 ], [ %109, %107 ]
  %86 = load atomic i32, i32* %27 monotonic, align 4
  %87 = and i32 %86, 1
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %93, label %89

89:                                               ; preds = %84
  %90 = getelementptr inbounds i8, i8* %29, i64 %85
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i16
  br label %96

93:                                               ; preds = %84
  %94 = getelementptr inbounds i16, i16* %30, i64 %85
  %95 = load i16, i16* %94, align 2
  br label %96

96:                                               ; preds = %93, %89
  %97 = phi i16 [ %92, %89 ], [ %95, %93 ]
  %98 = icmp ult i16 %97, 128
  %99 = trunc i64 %85 to i32
  br i1 %98, label %100, label %103

100:                                              ; preds = %96
  %101 = icmp ult i16 %97, 33
  br i1 %101, label %102, label %112

102:                                              ; preds = %100
  switch i16 %97, label %110 [
    i16 32, label %107
    i16 13, label %107
    i16 12, label %107
    i16 11, label %107
    i16 10, label %107
    i16 9, label %107
  ]

103:                                              ; preds = %96
  %104 = zext i16 %97 to i32
  %105 = tail call i32 @u_charDirection_69(i32 %104) #15
  %106 = icmp eq i32 %105, 9
  br i1 %106, label %107, label %114

107:                                              ; preds = %102, %102, %102, %102, %102, %102, %103
  %108 = icmp eq i32 %99, 1
  %109 = add nsw i64 %85, -1
  br i1 %108, label %116, label %84

110:                                              ; preds = %102
  %111 = trunc i64 %85 to i32
  br label %116

112:                                              ; preds = %100
  %113 = trunc i64 %85 to i32
  br label %116

114:                                              ; preds = %103
  %115 = trunc i64 %85 to i32
  br label %116

116:                                              ; preds = %107, %110, %112, %114, %59
  %117 = phi i32 [ 0, %59 ], [ %111, %110 ], [ %113, %112 ], [ %115, %114 ], [ 0, %107 ]
  %118 = icmp eq i32 %33, 0
  br i1 %118, label %119, label %141

119:                                              ; preds = %116
  %120 = load i32, i32* %2, align 4
  %121 = add i32 %120, -1
  %122 = icmp eq i32 %117, %121
  br i1 %122, label %123, label %141

123:                                              ; preds = %119
  %124 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %124, label %231, label %125

125:                                              ; preds = %123
  %126 = load atomic i32, i32* %27 monotonic, align 4
  %127 = and i32 %126, 2
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %231

129:                                              ; preds = %125
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %131 = load i32, i32* %130, align 4
  %132 = zext i32 %131 to i33
  %133 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %132, i33 1) #15
  %134 = extractvalue { i33, i1 } %133, 1
  %135 = extractvalue { i33, i1 } %133, 0
  %136 = icmp slt i33 %135, 0
  %137 = or i1 %134, %136
  br i1 %137, label %138, label %139, !prof !2

138:                                              ; preds = %129
  tail call void @llvm.trap() #15
  unreachable

139:                                              ; preds = %129
  %140 = trunc i33 %135 to i32
  store i32 %140, i32* %130, align 4
  br label %231

141:                                              ; preds = %116, %119
  %142 = load atomic i32, i32* %27 monotonic, align 4
  %143 = and i32 %142, 1
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %187, label %145

145:                                              ; preds = %141
  %146 = getelementptr inbounds i8, i8* %29, i64 %60
  %147 = add i32 %117, 1
  %148 = add i32 %147, %32
  %149 = icmp ne i8* %146, null
  %150 = icmp ne i32 %148, 0
  %151 = and i1 %149, %150
  br i1 %151, label %173, label %152

152:                                              ; preds = %145
  %153 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %154 = ptrtoint %"class.WTF::StringImpl"* %153 to i64
  %155 = icmp eq %"class.WTF::StringImpl"* %153, null
  br i1 %155, label %184, label %156

156:                                              ; preds = %152
  %157 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %158 = load atomic i32, i32* %157 monotonic, align 4
  %159 = and i32 %158, 2
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %184

161:                                              ; preds = %156
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 0
  %163 = load i32, i32* %162, align 4
  %164 = zext i32 %163 to i33
  %165 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %164, i33 1) #15
  %166 = extractvalue { i33, i1 } %165, 1
  %167 = extractvalue { i33, i1 } %165, 0
  %168 = icmp slt i33 %167, 0
  %169 = or i1 %166, %168
  br i1 %169, label %170, label %171, !prof !2

170:                                              ; preds = %161
  tail call void @llvm.trap() #15
  unreachable

171:                                              ; preds = %161
  %172 = trunc i33 %167 to i32
  store i32 %172, i32* %162, align 4
  br label %184

173:                                              ; preds = %145
  %174 = zext i32 %148 to i64
  %175 = add nuw nsw i64 %174, 12
  %176 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %175, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %177 = getelementptr inbounds i8, i8* %176, i64 12
  %178 = bitcast i8* %176 to i32*
  store i32 1, i32* %178, align 4
  %179 = getelementptr inbounds i8, i8* %176, i64 4
  %180 = bitcast i8* %179 to i32*
  store i32 %148, i32* %180, align 4
  %181 = getelementptr inbounds i8, i8* %176, i64 8
  %182 = bitcast i8* %181 to i32*
  store i32 1, i32* %182, align 4
  %183 = ptrtoint i8* %176 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %177, i8* nonnull align 1 %146, i64 %174, i1 false) #15
  br label %184

184:                                              ; preds = %152, %156, %171, %173
  %185 = phi i64 [ %183, %173 ], [ %154, %152 ], [ %154, %156 ], [ %154, %171 ]
  %186 = inttoptr i64 %185 to %"class.WTF::StringImpl"*
  br label %231

187:                                              ; preds = %141
  %188 = getelementptr inbounds i16, i16* %30, i64 %60
  %189 = add i32 %117, 1
  %190 = add i32 %189, %32
  %191 = icmp ne i16* %188, null
  %192 = icmp ne i32 %190, 0
  %193 = and i1 %191, %192
  br i1 %193, label %215, label %194

194:                                              ; preds = %187
  %195 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %196 = ptrtoint %"class.WTF::StringImpl"* %195 to i64
  %197 = icmp eq %"class.WTF::StringImpl"* %195, null
  br i1 %197, label %228, label %198

198:                                              ; preds = %194
  %199 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %200 = load atomic i32, i32* %199 monotonic, align 4
  %201 = and i32 %200, 2
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %228

203:                                              ; preds = %198
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 0
  %205 = load i32, i32* %204, align 4
  %206 = zext i32 %205 to i33
  %207 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %206, i33 1) #15
  %208 = extractvalue { i33, i1 } %207, 1
  %209 = extractvalue { i33, i1 } %207, 0
  %210 = icmp slt i33 %209, 0
  %211 = or i1 %208, %210
  br i1 %211, label %212, label %213, !prof !2

212:                                              ; preds = %203
  tail call void @llvm.trap() #15
  unreachable

213:                                              ; preds = %203
  %214 = trunc i33 %209 to i32
  store i32 %214, i32* %204, align 4
  br label %228

215:                                              ; preds = %187
  %216 = zext i32 %190 to i64
  %217 = shl nuw nsw i64 %216, 1
  %218 = add nuw nsw i64 %217, 12
  %219 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %218, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %220 = getelementptr inbounds i8, i8* %219, i64 12
  %221 = bitcast i8* %219 to i32*
  store i32 1, i32* %221, align 4
  %222 = getelementptr inbounds i8, i8* %219, i64 4
  %223 = bitcast i8* %222 to i32*
  store i32 %190, i32* %223, align 4
  %224 = getelementptr inbounds i8, i8* %219, i64 8
  %225 = bitcast i8* %224 to i32*
  store i32 0, i32* %225, align 4
  %226 = ptrtoint i8* %219 to i64
  %227 = bitcast i16* %188 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %220, i8* nonnull align 2 %227, i64 %217, i1 false) #15
  br label %228

228:                                              ; preds = %194, %198, %213, %215
  %229 = phi i64 [ %226, %215 ], [ %196, %194 ], [ %196, %198 ], [ %196, %213 ]
  %230 = inttoptr i64 %229 to %"class.WTF::StringImpl"*
  br label %231

231:                                              ; preds = %139, %125, %123, %82, %67, %64, %23, %8, %5, %184, %228
  %232 = phi %"class.WTF::StringImpl"* [ %186, %184 ], [ %230, %228 ], [ null, %5 ], [ %6, %8 ], [ %6, %23 ], [ null, %64 ], [ %65, %67 ], [ %65, %82 ], [ null, %123 ], [ %0, %125 ], [ %0, %139 ]
  ret %"class.WTF::StringImpl"* %232
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl15StripWhiteSpaceEPFbDsE(%"class.WTF::StringImpl"*, i1 (i16)*) local_unnamed_addr #0 align 2 {
  %3 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl22StripMatchedCharactersINS_14UCharPredicateEEE13scoped_refptrIS0_ET_(%"class.WTF::StringImpl"* %0, i1 (i16)* %1)
  ret %"class.WTF::StringImpl"* %3
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl22StripMatchedCharactersINS_14UCharPredicateEEE13scoped_refptrIS0_ET_(%"class.WTF::StringImpl"*, i1 (i16)*) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %26

6:                                                ; preds = %2
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %214, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %214

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #15
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %14
  tail call void @llvm.trap() #15
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %214

26:                                               ; preds = %2
  %27 = add i32 %4, -1
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %30 = bitcast %"class.WTF::StringImpl"* %29 to i8*
  %31 = bitcast %"class.WTF::StringImpl"* %29 to i16*
  br label %32

32:                                               ; preds = %26, %54
  %33 = phi i32 [ 0, %26 ], [ %56, %54 ]
  %34 = phi i32 [ 0, %26 ], [ %55, %54 ]
  %35 = load atomic i32, i32* %28 monotonic, align 4
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  %38 = zext i32 %34 to i64
  br i1 %37, label %43, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds i8, i8* %30, i64 %38
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i16
  br label %46

43:                                               ; preds = %32
  %44 = getelementptr inbounds i16, i16* %31, i64 %38
  %45 = load i16, i16* %44, align 2
  br label %46

46:                                               ; preds = %43, %39
  %47 = phi i16 [ %42, %39 ], [ %45, %43 ]
  %48 = tail call zeroext i1 %1(i16 zeroext %47) #15
  br i1 %48, label %54, label %49

49:                                               ; preds = %46
  %50 = zext i32 %34 to i64
  %51 = icmp eq i32 %27, 0
  br i1 %51, label %99, label %52

52:                                               ; preds = %49
  %53 = zext i32 %27 to i64
  br label %78

54:                                               ; preds = %46
  %55 = add i32 %34, 1
  %56 = xor i32 %34, -1
  %57 = icmp ugt i32 %55, %27
  br i1 %57, label %58, label %32

58:                                               ; preds = %54
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %60, label %214, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %214

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = zext i32 %68 to i33
  %70 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %69, i33 1) #15
  %71 = extractvalue { i33, i1 } %70, 1
  %72 = extractvalue { i33, i1 } %70, 0
  %73 = icmp slt i33 %72, 0
  %74 = or i1 %71, %73
  br i1 %74, label %75, label %76, !prof !2

75:                                               ; preds = %66
  tail call void @llvm.trap() #15
  unreachable

76:                                               ; preds = %66
  %77 = trunc i33 %72 to i32
  store i32 %77, i32* %67, align 4
  br label %214

78:                                               ; preds = %52, %94
  %79 = phi i64 [ %53, %52 ], [ %96, %94 ]
  %80 = load atomic i32, i32* %28 monotonic, align 4
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %87, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds i8, i8* %30, i64 %79
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i16
  br label %90

87:                                               ; preds = %78
  %88 = getelementptr inbounds i16, i16* %31, i64 %79
  %89 = load i16, i16* %88, align 2
  br label %90

90:                                               ; preds = %87, %83
  %91 = phi i16 [ %86, %83 ], [ %89, %87 ]
  %92 = tail call zeroext i1 %1(i16 zeroext %91) #15
  %93 = trunc i64 %79 to i32
  br i1 %92, label %94, label %97

94:                                               ; preds = %90
  %95 = icmp eq i32 %93, 1
  %96 = add nsw i64 %79, -1
  br i1 %95, label %99, label %78

97:                                               ; preds = %90
  %98 = trunc i64 %79 to i32
  br label %99

99:                                               ; preds = %97, %94, %49
  %100 = phi i32 [ 0, %49 ], [ %98, %97 ], [ 0, %94 ]
  %101 = icmp eq i32 %34, 0
  br i1 %101, label %102, label %124

102:                                              ; preds = %99
  %103 = load i32, i32* %3, align 4
  %104 = add i32 %103, -1
  %105 = icmp eq i32 %100, %104
  br i1 %105, label %106, label %124

106:                                              ; preds = %102
  %107 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %107, label %214, label %108

108:                                              ; preds = %106
  %109 = load atomic i32, i32* %28 monotonic, align 4
  %110 = and i32 %109, 2
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %214

112:                                              ; preds = %108
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %114 = load i32, i32* %113, align 4
  %115 = zext i32 %114 to i33
  %116 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %115, i33 1) #15
  %117 = extractvalue { i33, i1 } %116, 1
  %118 = extractvalue { i33, i1 } %116, 0
  %119 = icmp slt i33 %118, 0
  %120 = or i1 %117, %119
  br i1 %120, label %121, label %122, !prof !2

121:                                              ; preds = %112
  tail call void @llvm.trap() #15
  unreachable

122:                                              ; preds = %112
  %123 = trunc i33 %118 to i32
  store i32 %123, i32* %113, align 4
  br label %214

124:                                              ; preds = %99, %102
  %125 = load atomic i32, i32* %28 monotonic, align 4
  %126 = and i32 %125, 1
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %170, label %128

128:                                              ; preds = %124
  %129 = getelementptr inbounds i8, i8* %30, i64 %50
  %130 = add i32 %100, 1
  %131 = add i32 %130, %33
  %132 = icmp ne i8* %129, null
  %133 = icmp ne i32 %131, 0
  %134 = and i1 %132, %133
  br i1 %134, label %156, label %135

135:                                              ; preds = %128
  %136 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %137 = ptrtoint %"class.WTF::StringImpl"* %136 to i64
  %138 = icmp eq %"class.WTF::StringImpl"* %136, null
  br i1 %138, label %167, label %139

139:                                              ; preds = %135
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %141 = load atomic i32, i32* %140 monotonic, align 4
  %142 = and i32 %141, 2
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %167

144:                                              ; preds = %139
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 0, i32 0
  %146 = load i32, i32* %145, align 4
  %147 = zext i32 %146 to i33
  %148 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %147, i33 1) #15
  %149 = extractvalue { i33, i1 } %148, 1
  %150 = extractvalue { i33, i1 } %148, 0
  %151 = icmp slt i33 %150, 0
  %152 = or i1 %149, %151
  br i1 %152, label %153, label %154, !prof !2

153:                                              ; preds = %144
  tail call void @llvm.trap() #15
  unreachable

154:                                              ; preds = %144
  %155 = trunc i33 %150 to i32
  store i32 %155, i32* %145, align 4
  br label %167

156:                                              ; preds = %128
  %157 = zext i32 %131 to i64
  %158 = add nuw nsw i64 %157, 12
  %159 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %158, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %160 = getelementptr inbounds i8, i8* %159, i64 12
  %161 = bitcast i8* %159 to i32*
  store i32 1, i32* %161, align 4
  %162 = getelementptr inbounds i8, i8* %159, i64 4
  %163 = bitcast i8* %162 to i32*
  store i32 %131, i32* %163, align 4
  %164 = getelementptr inbounds i8, i8* %159, i64 8
  %165 = bitcast i8* %164 to i32*
  store i32 1, i32* %165, align 4
  %166 = ptrtoint i8* %159 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %160, i8* nonnull align 1 %129, i64 %157, i1 false) #15
  br label %167

167:                                              ; preds = %135, %139, %154, %156
  %168 = phi i64 [ %166, %156 ], [ %137, %135 ], [ %137, %139 ], [ %137, %154 ]
  %169 = inttoptr i64 %168 to %"class.WTF::StringImpl"*
  br label %214

170:                                              ; preds = %124
  %171 = getelementptr inbounds i16, i16* %31, i64 %50
  %172 = add i32 %100, 1
  %173 = add i32 %172, %33
  %174 = icmp ne i16* %171, null
  %175 = icmp ne i32 %173, 0
  %176 = and i1 %174, %175
  br i1 %176, label %198, label %177

177:                                              ; preds = %170
  %178 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %179 = ptrtoint %"class.WTF::StringImpl"* %178 to i64
  %180 = icmp eq %"class.WTF::StringImpl"* %178, null
  br i1 %180, label %211, label %181

181:                                              ; preds = %177
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %183 = load atomic i32, i32* %182 monotonic, align 4
  %184 = and i32 %183, 2
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %186, label %211

186:                                              ; preds = %181
  %187 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 0
  %188 = load i32, i32* %187, align 4
  %189 = zext i32 %188 to i33
  %190 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %189, i33 1) #15
  %191 = extractvalue { i33, i1 } %190, 1
  %192 = extractvalue { i33, i1 } %190, 0
  %193 = icmp slt i33 %192, 0
  %194 = or i1 %191, %193
  br i1 %194, label %195, label %196, !prof !2

195:                                              ; preds = %186
  tail call void @llvm.trap() #15
  unreachable

196:                                              ; preds = %186
  %197 = trunc i33 %192 to i32
  store i32 %197, i32* %187, align 4
  br label %211

198:                                              ; preds = %170
  %199 = zext i32 %173 to i64
  %200 = shl nuw nsw i64 %199, 1
  %201 = add nuw nsw i64 %200, 12
  %202 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %201, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %203 = getelementptr inbounds i8, i8* %202, i64 12
  %204 = bitcast i8* %202 to i32*
  store i32 1, i32* %204, align 4
  %205 = getelementptr inbounds i8, i8* %202, i64 4
  %206 = bitcast i8* %205 to i32*
  store i32 %173, i32* %206, align 4
  %207 = getelementptr inbounds i8, i8* %202, i64 8
  %208 = bitcast i8* %207 to i32*
  store i32 0, i32* %208, align 4
  %209 = ptrtoint i8* %202 to i64
  %210 = bitcast i16* %171 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %203, i8* nonnull align 2 %210, i64 %200, i1 false) #15
  br label %211

211:                                              ; preds = %177, %181, %196, %198
  %212 = phi i64 [ %209, %198 ], [ %179, %177 ], [ %179, %181 ], [ %179, %196 ]
  %213 = inttoptr i64 %212 to %"class.WTF::StringImpl"*
  br label %214

214:                                              ; preds = %122, %108, %106, %76, %61, %58, %24, %9, %6, %167, %211
  %215 = phi %"class.WTF::StringImpl"* [ %169, %167 ], [ %213, %211 ], [ null, %6 ], [ %7, %9 ], [ %7, %24 ], [ null, %58 ], [ %59, %61 ], [ %59, %76 ], [ null, %106 ], [ %0, %108 ], [ %0, %122 ]
  ret %"class.WTF::StringImpl"* %215
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl16RemoveCharactersEPFbDsE(%"class.WTF::StringImpl"*, i1 (i16)* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load atomic i32, i32* %3 monotonic, align 4
  %5 = and i32 %4, 1
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %6, label %153, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.WTF::StringImpl"* %7 to i8*
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %9, i64 %12
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %8, %20
  %16 = phi i8* [ %21, %20 ], [ %9, %8 ]
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = tail call zeroext i1 %1(i16 zeroext %18) #15
  br i1 %19, label %41, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds i8, i8* %16, i64 1
  %22 = icmp eq i8* %21, %13
  br i1 %22, label %23, label %15

23:                                               ; preds = %20, %8
  %24 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %24, label %299, label %25

25:                                               ; preds = %23
  %26 = load atomic i32, i32* %3 monotonic, align 4
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %299

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i33
  %33 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %32, i33 1) #15
  %34 = extractvalue { i33, i1 } %33, 1
  %35 = extractvalue { i33, i1 } %33, 0
  %36 = icmp slt i33 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %39, !prof !2

38:                                               ; preds = %29
  tail call void @llvm.trap() #15
  unreachable

39:                                               ; preds = %29
  %40 = trunc i33 %35 to i32
  store i32 %40, i32* %30, align 4
  br label %299

41:                                               ; preds = %15
  %42 = load i32, i32* %10, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %66

44:                                               ; preds = %41
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %46, label %87, label %47

47:                                               ; preds = %44
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %64

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i33
  %56 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %55, i33 1) #15
  %57 = extractvalue { i33, i1 } %56, 1
  %58 = extractvalue { i33, i1 } %56, 0
  %59 = icmp slt i33 %58, 0
  %60 = or i1 %57, %59
  br i1 %60, label %61, label %62, !prof !2

61:                                               ; preds = %52
  tail call void @llvm.trap() #15
  unreachable

62:                                               ; preds = %52
  %63 = trunc i33 %58 to i32
  store i32 %63, i32* %53, align 4
  br label %64

64:                                               ; preds = %62, %47
  %65 = ptrtoint %"class.WTF::StringImpl"* %45 to i64
  br label %78

66:                                               ; preds = %41
  %67 = zext i32 %42 to i64
  %68 = add nuw nsw i64 %67, 12
  %69 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %68, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %70 = bitcast i8* %69 to %"class.WTF::StringImpl"*
  %71 = bitcast i8* %69 to i32*
  store i32 1, i32* %71, align 4
  %72 = getelementptr inbounds i8, i8* %69, i64 4
  %73 = bitcast i8* %72 to i32*
  store i32 %42, i32* %73, align 4
  %74 = getelementptr inbounds i8, i8* %69, i64 8
  %75 = bitcast i8* %74 to i32*
  store i32 1, i32* %75, align 4
  %76 = ptrtoint i8* %69 to i64
  %77 = icmp eq i8* %69, null
  br i1 %77, label %87, label %78

78:                                               ; preds = %66, %64
  %79 = phi i64 [ %65, %64 ], [ %76, %66 ]
  %80 = phi %"class.WTF::StringImpl"* [ %45, %64 ], [ %70, %66 ]
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %87, label %84

84:                                               ; preds = %78
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 1
  %86 = bitcast %"class.WTF::StringImpl"* %85 to i8*
  br label %87

87:                                               ; preds = %84, %78, %66, %44
  %88 = phi i1 [ false, %84 ], [ false, %78 ], [ true, %66 ], [ true, %44 ]
  %89 = phi %"class.WTF::StringImpl"* [ %80, %84 ], [ %80, %78 ], [ null, %66 ], [ null, %44 ]
  %90 = phi i64 [ %79, %84 ], [ %79, %78 ], [ %76, %66 ], [ 0, %44 ]
  %91 = phi i8* [ %86, %84 ], [ null, %78 ], [ null, %66 ], [ null, %44 ]
  %92 = ptrtoint i8* %16 to i64
  %93 = ptrtoint %"class.WTF::StringImpl"* %7 to i64
  %94 = sub i64 %92, %93
  %95 = trunc i64 %94 to i32
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %99, label %97

97:                                               ; preds = %87
  %98 = and i64 %94, 4294967295
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %91, i8* align 1 %9, i64 %98, i1 false) #15
  br label %99

99:                                               ; preds = %97, %87
  %100 = icmp eq i8* %16, %13
  br i1 %100, label %129, label %103

101:                                              ; preds = %116
  %102 = icmp eq i8* %118, %13
  br i1 %102, label %129, label %103

103:                                              ; preds = %99, %101
  %104 = phi i32 [ %117, %101 ], [ %95, %99 ]
  %105 = phi i8* [ %118, %101 ], [ %16, %99 ]
  br label %106

106:                                              ; preds = %103, %111
  %107 = phi i8* [ %112, %111 ], [ %105, %103 ]
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i16
  %110 = tail call zeroext i1 %1(i16 zeroext %109) #15
  br i1 %110, label %111, label %114

111:                                              ; preds = %106
  %112 = getelementptr inbounds i8, i8* %107, i64 1
  %113 = icmp eq i8* %112, %13
  br i1 %113, label %129, label %106

114:                                              ; preds = %106
  %115 = icmp eq i8* %107, %13
  br i1 %115, label %129, label %116

116:                                              ; preds = %114, %122
  %117 = phi i32 [ %125, %122 ], [ %104, %114 ]
  %118 = phi i8* [ %123, %122 ], [ %107, %114 ]
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i16
  %121 = tail call zeroext i1 %1(i16 zeroext %120) #15
  br i1 %121, label %101, label %122

122:                                              ; preds = %116
  %123 = getelementptr inbounds i8, i8* %118, i64 1
  %124 = load i8, i8* %118, align 1
  %125 = add i32 %117, 1
  %126 = zext i32 %117 to i64
  %127 = getelementptr inbounds i8, i8* %91, i64 %126
  store i8 %124, i8* %127, align 1
  %128 = icmp eq i8* %123, %13
  br i1 %128, label %129, label %116

129:                                              ; preds = %101, %114, %111, %122, %99
  %130 = phi i32 [ %95, %99 ], [ %125, %122 ], [ %104, %111 ], [ %117, %101 ], [ %104, %114 ]
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 1
  %132 = load i32, i32* %131, align 4
  %133 = icmp eq i32 %132, %130
  br i1 %133, label %150, label %134

134:                                              ; preds = %129
  %135 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"* %89, i32 0, i32 %130) #15
  %136 = ptrtoint %"class.WTF::StringImpl"* %135 to i64
  br i1 %88, label %150, label %137

137:                                              ; preds = %134
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %139 = load atomic i32, i32* %138 monotonic, align 4
  %140 = and i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 0
  %143 = load i32, i32* %142, align 4
  br i1 %141, label %144, label %146

144:                                              ; preds = %137
  %145 = add i32 %143, -1
  store i32 %145, i32* %142, align 4
  br label %146

146:                                              ; preds = %144, %137
  %147 = phi i32 [ %145, %144 ], [ %143, %137 ]
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %150

149:                                              ; preds = %146
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %89) #15
  br label %150

150:                                              ; preds = %149, %146, %134, %129
  %151 = phi i64 [ %90, %129 ], [ %136, %134 ], [ %136, %149 ], [ %136, %146 ]
  %152 = inttoptr i64 %151 to %"class.WTF::StringImpl"*
  br label %299

153:                                              ; preds = %2
  %154 = bitcast %"class.WTF::StringImpl"* %7 to i16*
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %156 = load i32, i32* %155, align 4
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds i16, i16* %154, i64 %157
  %159 = icmp eq i32 %156, 0
  br i1 %159, label %167, label %160

160:                                              ; preds = %153, %164
  %161 = phi i16* [ %165, %164 ], [ %154, %153 ]
  %162 = load i16, i16* %161, align 2
  %163 = tail call zeroext i1 %1(i16 zeroext %162) #15
  br i1 %163, label %185, label %164

164:                                              ; preds = %160
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = icmp eq i16* %165, %158
  br i1 %166, label %167, label %160

167:                                              ; preds = %164, %153
  %168 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %168, label %299, label %169

169:                                              ; preds = %167
  %170 = load atomic i32, i32* %3 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %299

173:                                              ; preds = %169
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i33
  %177 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %176, i33 1) #15
  %178 = extractvalue { i33, i1 } %177, 1
  %179 = extractvalue { i33, i1 } %177, 0
  %180 = icmp slt i33 %179, 0
  %181 = or i1 %178, %180
  br i1 %181, label %182, label %183, !prof !2

182:                                              ; preds = %173
  tail call void @llvm.trap() #15
  unreachable

183:                                              ; preds = %173
  %184 = trunc i33 %179 to i32
  store i32 %184, i32* %174, align 4
  br label %299

185:                                              ; preds = %160
  %186 = load i32, i32* %155, align 4
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %210

188:                                              ; preds = %185
  %189 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %190 = icmp eq %"class.WTF::StringImpl"* %189, null
  br i1 %190, label %232, label %191

191:                                              ; preds = %188
  %192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %189, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %193 = load atomic i32, i32* %192 monotonic, align 4
  %194 = and i32 %193, 2
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %208

196:                                              ; preds = %191
  %197 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %189, i64 0, i32 0
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i33
  %200 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %199, i33 1) #15
  %201 = extractvalue { i33, i1 } %200, 1
  %202 = extractvalue { i33, i1 } %200, 0
  %203 = icmp slt i33 %202, 0
  %204 = or i1 %201, %203
  br i1 %204, label %205, label %206, !prof !2

205:                                              ; preds = %196
  tail call void @llvm.trap() #15
  unreachable

206:                                              ; preds = %196
  %207 = trunc i33 %202 to i32
  store i32 %207, i32* %197, align 4
  br label %208

208:                                              ; preds = %206, %191
  %209 = ptrtoint %"class.WTF::StringImpl"* %189 to i64
  br label %223

210:                                              ; preds = %185
  %211 = zext i32 %186 to i64
  %212 = shl nuw nsw i64 %211, 1
  %213 = add nuw nsw i64 %212, 12
  %214 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %213, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %215 = bitcast i8* %214 to %"class.WTF::StringImpl"*
  %216 = bitcast i8* %214 to i32*
  store i32 1, i32* %216, align 4
  %217 = getelementptr inbounds i8, i8* %214, i64 4
  %218 = bitcast i8* %217 to i32*
  store i32 %186, i32* %218, align 4
  %219 = getelementptr inbounds i8, i8* %214, i64 8
  %220 = bitcast i8* %219 to i32*
  store i32 0, i32* %220, align 4
  %221 = ptrtoint i8* %214 to i64
  %222 = icmp eq i8* %214, null
  br i1 %222, label %232, label %223

223:                                              ; preds = %210, %208
  %224 = phi i64 [ %209, %208 ], [ %221, %210 ]
  %225 = phi %"class.WTF::StringImpl"* [ %189, %208 ], [ %215, %210 ]
  %226 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %225, i64 0, i32 1
  %227 = load i32, i32* %226, align 4
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %232, label %229

229:                                              ; preds = %223
  %230 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %225, i64 1
  %231 = bitcast %"class.WTF::StringImpl"* %230 to i16*
  br label %232

232:                                              ; preds = %229, %223, %210, %188
  %233 = phi i1 [ false, %229 ], [ false, %223 ], [ true, %210 ], [ true, %188 ]
  %234 = phi %"class.WTF::StringImpl"* [ %225, %229 ], [ %225, %223 ], [ null, %210 ], [ null, %188 ]
  %235 = phi i64 [ %224, %229 ], [ %224, %223 ], [ %221, %210 ], [ 0, %188 ]
  %236 = phi i16* [ %231, %229 ], [ null, %223 ], [ null, %210 ], [ null, %188 ]
  %237 = ptrtoint i16* %161 to i64
  %238 = ptrtoint %"class.WTF::StringImpl"* %7 to i64
  %239 = sub i64 %237, %238
  %240 = lshr exact i64 %239, 1
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %247, label %243

243:                                              ; preds = %232
  %244 = bitcast i16* %236 to i8*
  %245 = bitcast %"class.WTF::StringImpl"* %7 to i8*
  %246 = and i64 %239, 8589934590
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %244, i8* align 2 %245, i64 %246, i1 false) #15
  br label %247

247:                                              ; preds = %243, %232
  %248 = icmp eq i16* %161, %158
  br i1 %248, label %275, label %251

249:                                              ; preds = %263
  %250 = icmp eq i16* %265, %158
  br i1 %250, label %275, label %251

251:                                              ; preds = %247, %249
  %252 = phi i32 [ %264, %249 ], [ %241, %247 ]
  %253 = phi i16* [ %265, %249 ], [ %161, %247 ]
  br label %254

254:                                              ; preds = %251, %258
  %255 = phi i16* [ %259, %258 ], [ %253, %251 ]
  %256 = load i16, i16* %255, align 2
  %257 = tail call zeroext i1 %1(i16 zeroext %256) #15
  br i1 %257, label %258, label %261

258:                                              ; preds = %254
  %259 = getelementptr inbounds i16, i16* %255, i64 1
  %260 = icmp eq i16* %259, %158
  br i1 %260, label %275, label %254

261:                                              ; preds = %254
  %262 = icmp eq i16* %255, %158
  br i1 %262, label %275, label %263

263:                                              ; preds = %261, %268
  %264 = phi i32 [ %271, %268 ], [ %252, %261 ]
  %265 = phi i16* [ %269, %268 ], [ %255, %261 ]
  %266 = load i16, i16* %265, align 2
  %267 = tail call zeroext i1 %1(i16 zeroext %266) #15
  br i1 %267, label %249, label %268

268:                                              ; preds = %263
  %269 = getelementptr inbounds i16, i16* %265, i64 1
  %270 = load i16, i16* %265, align 2
  %271 = add i32 %264, 1
  %272 = zext i32 %264 to i64
  %273 = getelementptr inbounds i16, i16* %236, i64 %272
  store i16 %270, i16* %273, align 2
  %274 = icmp eq i16* %269, %158
  br i1 %274, label %275, label %263

275:                                              ; preds = %249, %261, %258, %268, %247
  %276 = phi i32 [ %241, %247 ], [ %271, %268 ], [ %252, %258 ], [ %264, %249 ], [ %252, %261 ]
  %277 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %234, i64 0, i32 1
  %278 = load i32, i32* %277, align 4
  %279 = icmp eq i32 %278, %276
  br i1 %279, label %296, label %280

280:                                              ; preds = %275
  %281 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"* %234, i32 0, i32 %276) #15
  %282 = ptrtoint %"class.WTF::StringImpl"* %281 to i64
  br i1 %233, label %296, label %283

283:                                              ; preds = %280
  %284 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %234, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %285 = load atomic i32, i32* %284 monotonic, align 4
  %286 = and i32 %285, 2
  %287 = icmp eq i32 %286, 0
  %288 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %234, i64 0, i32 0
  %289 = load i32, i32* %288, align 4
  br i1 %287, label %290, label %292

290:                                              ; preds = %283
  %291 = add i32 %289, -1
  store i32 %291, i32* %288, align 4
  br label %292

292:                                              ; preds = %290, %283
  %293 = phi i32 [ %291, %290 ], [ %289, %283 ]
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %296

295:                                              ; preds = %292
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %234) #15
  br label %296

296:                                              ; preds = %295, %292, %280, %275
  %297 = phi i64 [ %235, %275 ], [ %282, %280 ], [ %282, %295 ], [ %282, %292 ]
  %298 = inttoptr i64 %297 to %"class.WTF::StringImpl"*
  br label %299

299:                                              ; preds = %296, %183, %169, %167, %150, %39, %25, %23
  %300 = phi %"class.WTF::StringImpl"* [ %152, %150 ], [ null, %23 ], [ %0, %25 ], [ %0, %39 ], [ %298, %296 ], [ null, %167 ], [ %0, %169 ], [ %0, %183 ]
  ret %"class.WTF::StringImpl"* %300
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6RemoveEjj(%"class.WTF::StringImpl"*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %5, label %24

5:                                                ; preds = %3
  %6 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %6, label %188, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %188

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #15
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %12
  tail call void @llvm.trap() #15
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %188

24:                                               ; preds = %3
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp ugt i32 %26, %1
  br i1 %27, label %47, label %28

28:                                               ; preds = %24
  %29 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %29, label %188, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %188

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #15
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !2

44:                                               ; preds = %35
  tail call void @llvm.trap() #15
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %188

47:                                               ; preds = %24
  %48 = sub i32 %26, %1
  %49 = icmp ugt i32 %48, %2
  %50 = select i1 %49, i32 %2, i32 %48
  %51 = add i32 %50, %1
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  %56 = sub i32 %26, %50
  %57 = icmp eq i32 %56, 0
  br i1 %55, label %119, label %58

58:                                               ; preds = %47
  br i1 %57, label %59, label %79

59:                                               ; preds = %58
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %104, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %90

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = zext i32 %69 to i33
  %71 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %70, i33 1) #15
  %72 = extractvalue { i33, i1 } %71, 1
  %73 = extractvalue { i33, i1 } %71, 0
  %74 = icmp slt i33 %73, 0
  %75 = or i1 %72, %74
  br i1 %75, label %76, label %77, !prof !2

76:                                               ; preds = %67
  tail call void @llvm.trap() #15
  unreachable

77:                                               ; preds = %67
  %78 = trunc i33 %73 to i32
  store i32 %78, i32* %68, align 4
  br label %90

79:                                               ; preds = %58
  %80 = zext i32 %56 to i64
  %81 = add nuw nsw i64 %80, 12
  %82 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %81, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %83 = bitcast i8* %82 to %"class.WTF::StringImpl"*
  %84 = bitcast i8* %82 to i32*
  store i32 1, i32* %84, align 4
  %85 = getelementptr inbounds i8, i8* %82, i64 4
  %86 = bitcast i8* %85 to i32*
  store i32 %56, i32* %86, align 4
  %87 = getelementptr inbounds i8, i8* %82, i64 8
  %88 = bitcast i8* %87 to i32*
  store i32 1, i32* %88, align 4
  %89 = icmp eq i8* %82, null
  br i1 %89, label %104, label %90

90:                                               ; preds = %62, %77, %79
  %91 = phi %"class.WTF::StringImpl"* [ %83, %79 ], [ %60, %77 ], [ %60, %62 ]
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 1
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %93, 0
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 1
  %96 = bitcast %"class.WTF::StringImpl"* %95 to i8*
  %97 = select i1 %94, i8* null, i8* %96
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %99 = bitcast %"class.WTF::StringImpl"* %98 to i8*
  %100 = zext i32 %1 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %97, i8* align 1 %99, i64 %100, i1 false) #15
  %101 = load i32, i32* %92, align 4
  %102 = icmp eq i32 %101, 0
  %103 = select i1 %102, i8* null, i8* %96
  br label %108

104:                                              ; preds = %79, %59
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %106 = bitcast %"class.WTF::StringImpl"* %105 to i8*
  %107 = zext i32 %1 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 536870912 null, i8* align 1 %106, i64 %107, i1 false) #15
  br label %108

108:                                              ; preds = %90, %104
  %109 = phi i64 [ %107, %104 ], [ %100, %90 ]
  %110 = phi i8* [ %106, %104 ], [ %99, %90 ]
  %111 = phi %"class.WTF::StringImpl"* [ null, %104 ], [ %91, %90 ]
  %112 = phi i8* [ null, %104 ], [ %103, %90 ]
  %113 = getelementptr inbounds i8, i8* %112, i64 %109
  %114 = zext i32 %51 to i64
  %115 = getelementptr inbounds i8, i8* %110, i64 %114
  %116 = load i32, i32* %25, align 4
  %117 = sub i32 %116, %51
  %118 = zext i32 %117 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %113, i8* align 1 %115, i64 %118, i1 false) #15
  br label %188

119:                                              ; preds = %47
  br i1 %57, label %120, label %140

120:                                              ; preds = %119
  %121 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %122 = icmp eq %"class.WTF::StringImpl"* %121, null
  br i1 %122, label %168, label %123

123:                                              ; preds = %120
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %121, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %125 = load atomic i32, i32* %124 monotonic, align 4
  %126 = and i32 %125, 2
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %152

128:                                              ; preds = %123
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %121, i64 0, i32 0
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i33
  %132 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %131, i33 1) #15
  %133 = extractvalue { i33, i1 } %132, 1
  %134 = extractvalue { i33, i1 } %132, 0
  %135 = icmp slt i33 %134, 0
  %136 = or i1 %133, %135
  br i1 %136, label %137, label %138, !prof !2

137:                                              ; preds = %128
  tail call void @llvm.trap() #15
  unreachable

138:                                              ; preds = %128
  %139 = trunc i33 %134 to i32
  store i32 %139, i32* %129, align 4
  br label %152

140:                                              ; preds = %119
  %141 = zext i32 %56 to i64
  %142 = shl nuw nsw i64 %141, 1
  %143 = add nuw nsw i64 %142, 12
  %144 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %143, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %145 = bitcast i8* %144 to %"class.WTF::StringImpl"*
  %146 = bitcast i8* %144 to i32*
  store i32 1, i32* %146, align 4
  %147 = getelementptr inbounds i8, i8* %144, i64 4
  %148 = bitcast i8* %147 to i32*
  store i32 %56, i32* %148, align 4
  %149 = getelementptr inbounds i8, i8* %144, i64 8
  %150 = bitcast i8* %149 to i32*
  store i32 0, i32* %150, align 4
  %151 = icmp eq i8* %144, null
  br i1 %151, label %168, label %152

152:                                              ; preds = %123, %138, %140
  %153 = phi %"class.WTF::StringImpl"* [ %145, %140 ], [ %121, %138 ], [ %121, %123 ]
  %154 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 1
  %155 = load i32, i32* %154, align 4
  %156 = icmp eq i32 %155, 0
  %157 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 1
  %158 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %159 = bitcast %"class.WTF::StringImpl"* %157 to i8*
  %160 = select i1 %156, i8* null, i8* %159
  %161 = bitcast %"class.WTF::StringImpl"* %158 to i8*
  %162 = zext i32 %1 to i64
  %163 = shl nuw nsw i64 %162, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %160, i8* align 2 %161, i64 %163, i1 false) #15
  %164 = load i32, i32* %154, align 4
  %165 = icmp eq i32 %164, 0
  %166 = bitcast %"class.WTF::StringImpl"* %157 to i16*
  %167 = select i1 %165, i16* null, i16* %166
  br label %173

168:                                              ; preds = %140, %120
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %170 = bitcast %"class.WTF::StringImpl"* %169 to i8*
  %171 = zext i32 %1 to i64
  %172 = shl nuw nsw i64 %171, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 536870912 null, i8* align 2 %170, i64 %172, i1 false) #15
  br label %173

173:                                              ; preds = %152, %168
  %174 = phi i64 [ %171, %168 ], [ %162, %152 ]
  %175 = phi %"class.WTF::StringImpl"* [ %169, %168 ], [ %158, %152 ]
  %176 = phi %"class.WTF::StringImpl"* [ null, %168 ], [ %153, %152 ]
  %177 = phi i16* [ null, %168 ], [ %167, %152 ]
  %178 = bitcast %"class.WTF::StringImpl"* %175 to i16*
  %179 = getelementptr inbounds i16, i16* %177, i64 %174
  %180 = zext i32 %51 to i64
  %181 = getelementptr inbounds i16, i16* %178, i64 %180
  %182 = load i32, i32* %25, align 4
  %183 = sub i32 %182, %51
  %184 = bitcast i16* %179 to i8*
  %185 = bitcast i16* %181 to i8*
  %186 = zext i32 %183 to i64
  %187 = shl nuw nsw i64 %186, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %184, i8* align 2 %185, i64 %187, i1 false) #15
  br label %188

188:                                              ; preds = %45, %30, %28, %22, %7, %5, %108, %173
  %189 = phi %"class.WTF::StringImpl"* [ %111, %108 ], [ %176, %173 ], [ null, %5 ], [ %0, %7 ], [ %0, %22 ], [ null, %28 ], [ %0, %30 ], [ %0, %45 ]
  ret %"class.WTF::StringImpl"* %189
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl18SimplifyWhiteSpaceENS_13StripBehaviorE(%"class.WTF::StringImpl"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load atomic i32, i32* %3 monotonic, align 4
  %5 = and i32 %4, 1
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %2
  %8 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl32SimplifyMatchedCharactersToSpaceIhNS_23SpaceOrNewlinePredicateEEE13scoped_refptrIS0_ET0_NS_13StripBehaviorE(%"class.WTF::StringImpl"* %0, i32 %1)
  br label %11

9:                                                ; preds = %2
  %10 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl32SimplifyMatchedCharactersToSpaceIDsNS_23SpaceOrNewlinePredicateEEE13scoped_refptrIS0_ET0_NS_13StripBehaviorE(%"class.WTF::StringImpl"* %0, i32 %1)
  br label %11

11:                                               ; preds = %9, %7
  %12 = phi %"class.WTF::StringImpl"* [ %8, %7 ], [ %10, %9 ]
  ret %"class.WTF::StringImpl"* %12
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl32SimplifyMatchedCharactersToSpaceIhNS_23SpaceOrNewlinePredicateEEE13scoped_refptrIS0_ET0_NS_13StripBehaviorE(%"class.WTF::StringImpl"*, i32) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %9, label %12

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %11 = bitcast %"class.WTF::StringImpl"* %10 to i8*
  br label %64

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #15
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !2

26:                                               ; preds = %17
  tail call void @llvm.trap() #15
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %29

29:                                               ; preds = %27, %12
  %30 = ptrtoint %"class.WTF::StringImpl"* %7 to i64
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %32 = bitcast %"class.WTF::StringImpl"* %31 to i8*
  %33 = load i32, i32* %3, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %32, i64 %34
  br label %53

36:                                               ; preds = %2
  %37 = zext i32 %4 to i64
  %38 = add nuw nsw i64 %37, 12
  %39 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %38, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %40 = bitcast i8* %39 to %"class.WTF::StringImpl"*
  %41 = bitcast i8* %39 to i32*
  store i32 1, i32* %41, align 4
  %42 = getelementptr inbounds i8, i8* %39, i64 4
  %43 = bitcast i8* %42 to i32*
  store i32 %4, i32* %43, align 4
  %44 = getelementptr inbounds i8, i8* %39, i64 8
  %45 = bitcast i8* %44 to i32*
  store i32 1, i32* %45, align 4
  %46 = ptrtoint i8* %39 to i64
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %48 = bitcast %"class.WTF::StringImpl"* %47 to i8*
  %49 = load i32, i32* %3, align 4
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = icmp eq i8* %39, null
  br i1 %52, label %64, label %53

53:                                               ; preds = %29, %36
  %54 = phi i8* [ %35, %29 ], [ %51, %36 ]
  %55 = phi i8* [ %32, %29 ], [ %48, %36 ]
  %56 = phi i64 [ %30, %29 ], [ %46, %36 ]
  %57 = phi %"class.WTF::StringImpl"* [ %7, %29 ], [ %40, %36 ]
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %53
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 1
  %63 = bitcast %"class.WTF::StringImpl"* %62 to i8*
  br label %64

64:                                               ; preds = %9, %36, %53, %61
  %65 = phi i1 [ false, %61 ], [ false, %53 ], [ true, %36 ], [ true, %9 ]
  %66 = phi %"class.WTF::StringImpl"* [ %57, %61 ], [ %57, %53 ], [ null, %36 ], [ null, %9 ]
  %67 = phi i8* [ %54, %61 ], [ %54, %53 ], [ %51, %36 ], [ %11, %9 ]
  %68 = phi i8* [ %55, %61 ], [ %55, %53 ], [ %48, %36 ], [ %11, %9 ]
  %69 = phi i64 [ %56, %61 ], [ %56, %53 ], [ %46, %36 ], [ 0, %9 ]
  %70 = phi i8* [ %63, %61 ], [ null, %53 ], [ null, %36 ], [ null, %9 ]
  %71 = icmp eq i32 %1, 0
  %72 = icmp eq i8* %68, %67
  br i1 %71, label %73, label %74

73:                                               ; preds = %64
  br i1 %72, label %137, label %75

74:                                               ; preds = %64
  br i1 %72, label %181, label %148

75:                                               ; preds = %73, %128
  %76 = phi i8 [ %80, %128 ], [ 0, %73 ]
  %77 = phi i32 [ %130, %128 ], [ 0, %73 ]
  %78 = phi i8* [ %105, %128 ], [ %68, %73 ]
  br label %79

79:                                               ; preds = %75, %93
  %80 = phi i8 [ %96, %93 ], [ %76, %75 ]
  %81 = phi i8* [ %97, %93 ], [ %78, %75 ]
  %82 = load i8, i8* %81, align 1
  %83 = icmp sgt i8 %82, -1
  br i1 %83, label %84, label %87

84:                                               ; preds = %79
  %85 = icmp ult i8 %82, 33
  br i1 %85, label %86, label %99

86:                                               ; preds = %84
  switch i8 %82, label %99 [
    i8 32, label %93
    i8 13, label %93
    i8 12, label %93
    i8 11, label %93
    i8 10, label %93
    i8 9, label %93
  ]

87:                                               ; preds = %79
  %88 = zext i8 %82 to i32
  %89 = tail call i32 @u_charDirection_69(i32 %88) #15
  %90 = icmp eq i32 %89, 9
  br i1 %90, label %91, label %99

91:                                               ; preds = %87
  %92 = load i8, i8* %81, align 1
  br label %93

93:                                               ; preds = %91, %86, %86, %86, %86, %86, %86
  %94 = phi i8 [ %92, %91 ], [ %82, %86 ], [ %82, %86 ], [ %82, %86 ], [ %82, %86 ], [ %82, %86 ], [ %82, %86 ]
  %95 = icmp eq i8 %94, 32
  %96 = select i1 %95, i8 %80, i8 1
  %97 = getelementptr inbounds i8, i8* %81, i64 1
  %98 = icmp eq i8* %97, %67
  br i1 %98, label %137, label %79

99:                                               ; preds = %87, %84, %86
  %100 = icmp eq i8* %81, %67
  br i1 %100, label %137, label %101

101:                                              ; preds = %99
  %102 = sext i32 %77 to i64
  br label %103

103:                                              ; preds = %101, %122
  %104 = phi i64 [ %102, %101 ], [ %125, %122 ]
  %105 = phi i8* [ %81, %101 ], [ %124, %122 ]
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i16
  %108 = icmp sgt i8 %106, -1
  br i1 %108, label %109, label %116

109:                                              ; preds = %103
  %110 = icmp ult i8 %106, 33
  br i1 %110, label %111, label %122

111:                                              ; preds = %109
  %112 = icmp eq i8 %106, 32
  %113 = add nsw i16 %107, -9
  %114 = icmp ult i16 %113, 5
  %115 = or i1 %112, %114
  br i1 %115, label %128, label %120

116:                                              ; preds = %103
  %117 = zext i8 %106 to i32
  %118 = tail call i32 @u_charDirection_69(i32 %117) #15
  %119 = icmp eq i32 %118, 9
  br i1 %119, label %128, label %120

120:                                              ; preds = %111, %116
  %121 = load i8, i8* %105, align 1
  br label %122

122:                                              ; preds = %120, %109
  %123 = phi i8 [ %121, %120 ], [ %106, %109 ]
  %124 = getelementptr inbounds i8, i8* %105, i64 1
  %125 = add i64 %104, 1
  %126 = getelementptr inbounds i8, i8* %70, i64 %104
  store i8 %123, i8* %126, align 1
  %127 = icmp eq i8* %124, %67
  br i1 %127, label %135, label %103

128:                                              ; preds = %116, %111
  %129 = trunc i64 %104 to i32
  %130 = add nsw i32 %129, 1
  %131 = shl i64 %104, 32
  %132 = ashr exact i64 %131, 32
  %133 = getelementptr inbounds i8, i8* %70, i64 %132
  store i8 32, i8* %133, align 1
  %134 = icmp eq i8* %105, %67
  br i1 %134, label %137, label %75

135:                                              ; preds = %122
  %136 = trunc i64 %125 to i32
  br label %137

137:                                              ; preds = %99, %128, %93, %73, %135
  %138 = phi i8 [ %80, %135 ], [ 0, %73 ], [ %96, %93 ], [ %80, %128 ], [ %80, %99 ]
  %139 = phi i32 [ %136, %135 ], [ 0, %73 ], [ %77, %93 ], [ %130, %128 ], [ %77, %99 ]
  %140 = icmp sgt i32 %139, 0
  br i1 %140, label %141, label %181

141:                                              ; preds = %137
  %142 = add nsw i32 %139, -1
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %70, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = icmp eq i8 %145, 32
  %147 = select i1 %146, i32 %142, i32 %139
  br label %181

148:                                              ; preds = %74, %172
  %149 = phi i64 [ %176, %172 ], [ 0, %74 ]
  %150 = phi i8 [ %174, %172 ], [ 0, %74 ]
  %151 = phi i8* [ %177, %172 ], [ %68, %74 ]
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i16
  %154 = icmp sgt i8 %152, -1
  br i1 %154, label %155, label %159

155:                                              ; preds = %148
  %156 = icmp ult i8 %152, 33
  br i1 %156, label %157, label %170

157:                                              ; preds = %155
  %158 = icmp eq i8 %152, 32
  br i1 %158, label %169, label %164

159:                                              ; preds = %148
  %160 = zext i8 %152 to i32
  %161 = tail call i32 @u_charDirection_69(i32 %160) #15
  %162 = icmp eq i32 %161, 9
  %163 = load i8, i8* %151, align 1
  br i1 %162, label %167, label %170

164:                                              ; preds = %157
  %165 = add nsw i16 %153, -9
  %166 = icmp ult i16 %165, 5
  br i1 %166, label %172, label %170

167:                                              ; preds = %159
  %168 = icmp eq i8 %163, 32
  br i1 %168, label %169, label %172

169:                                              ; preds = %157, %167
  br label %172

170:                                              ; preds = %155, %159, %164
  %171 = phi i8 [ %152, %164 ], [ %163, %159 ], [ %152, %155 ]
  br label %172

172:                                              ; preds = %169, %167, %164, %170
  %173 = phi i8 [ %171, %170 ], [ 32, %164 ], [ 32, %167 ], [ 32, %169 ]
  %174 = phi i8 [ %150, %170 ], [ 1, %164 ], [ 1, %167 ], [ %150, %169 ]
  %175 = getelementptr inbounds i8, i8* %70, i64 %149
  store i8 %173, i8* %175, align 1
  %176 = add nuw i64 %149, 1
  %177 = getelementptr inbounds i8, i8* %151, i64 1
  %178 = icmp eq i8* %177, %67
  br i1 %178, label %179, label %148

179:                                              ; preds = %172
  %180 = trunc i64 %176 to i32
  br label %181

181:                                              ; preds = %179, %74, %141, %137
  %182 = phi i32 [ %139, %137 ], [ %147, %141 ], [ 0, %74 ], [ %180, %179 ]
  %183 = phi i8 [ %138, %137 ], [ %138, %141 ], [ 0, %74 ], [ %174, %179 ]
  %184 = load i32, i32* %3, align 4
  %185 = icmp eq i32 %182, %184
  %186 = and i8 %183, 1
  %187 = icmp eq i8 %186, 0
  %188 = and i1 %185, %187
  br i1 %188, label %189, label %208

189:                                              ; preds = %181
  %190 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %190, label %231, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %193 = load atomic i32, i32* %192 monotonic, align 4
  %194 = and i32 %193, 2
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %231

196:                                              ; preds = %191
  %197 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i33
  %200 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %199, i33 1) #15
  %201 = extractvalue { i33, i1 } %200, 1
  %202 = extractvalue { i33, i1 } %200, 0
  %203 = icmp slt i33 %202, 0
  %204 = or i1 %201, %203
  br i1 %204, label %205, label %206, !prof !2

205:                                              ; preds = %196
  tail call void @llvm.trap() #15
  unreachable

206:                                              ; preds = %196
  %207 = trunc i33 %202 to i32
  store i32 %207, i32* %197, align 4
  br label %231

208:                                              ; preds = %181
  %209 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 1
  %210 = load i32, i32* %209, align 4
  %211 = icmp eq i32 %210, %182
  br i1 %211, label %228, label %212

212:                                              ; preds = %208
  %213 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"* %66, i32 0, i32 %182) #15
  %214 = ptrtoint %"class.WTF::StringImpl"* %213 to i64
  br i1 %65, label %228, label %215

215:                                              ; preds = %212
  %216 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %217 = load atomic i32, i32* %216 monotonic, align 4
  %218 = and i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %66, i64 0, i32 0
  %221 = load i32, i32* %220, align 4
  br i1 %219, label %222, label %224

222:                                              ; preds = %215
  %223 = add i32 %221, -1
  store i32 %223, i32* %220, align 4
  br label %224

224:                                              ; preds = %222, %215
  %225 = phi i32 [ %223, %222 ], [ %221, %215 ]
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %228

227:                                              ; preds = %224
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %66) #15
  br label %228

228:                                              ; preds = %227, %224, %212, %208
  %229 = phi i64 [ %69, %208 ], [ %214, %212 ], [ %214, %227 ], [ %214, %224 ]
  %230 = inttoptr i64 %229 to %"class.WTF::StringImpl"*
  br label %247

231:                                              ; preds = %206, %191, %189
  %232 = inttoptr i64 %69 to %"class.WTF::StringImpl"*
  %233 = icmp eq i64 %69, 0
  br i1 %233, label %247, label %234

234:                                              ; preds = %231
  %235 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %232, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %236 = load atomic i32, i32* %235 monotonic, align 4
  %237 = and i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %232, i64 0, i32 0
  %240 = load i32, i32* %239, align 4
  br i1 %238, label %241, label %243

241:                                              ; preds = %234
  %242 = add i32 %240, -1
  store i32 %242, i32* %239, align 4
  br label %243

243:                                              ; preds = %241, %234
  %244 = phi i32 [ %242, %241 ], [ %240, %234 ]
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %247

246:                                              ; preds = %243
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %232) #15
  br label %247

247:                                              ; preds = %228, %231, %243, %246
  %248 = phi %"class.WTF::StringImpl"* [ %230, %228 ], [ %0, %231 ], [ %0, %243 ], [ %0, %246 ]
  ret %"class.WTF::StringImpl"* %248
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl32SimplifyMatchedCharactersToSpaceIDsNS_23SpaceOrNewlinePredicateEEE13scoped_refptrIS0_ET0_NS_13StripBehaviorE(%"class.WTF::StringImpl"*, i32) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %36

6:                                                ; preds = %2
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %9, label %12

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %11 = bitcast %"class.WTF::StringImpl"* %10 to i16*
  br label %65

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #15
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !2

26:                                               ; preds = %17
  tail call void @llvm.trap() #15
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %29

29:                                               ; preds = %27, %12
  %30 = ptrtoint %"class.WTF::StringImpl"* %7 to i64
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %32 = bitcast %"class.WTF::StringImpl"* %31 to i16*
  %33 = load i32, i32* %3, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds i16, i16* %32, i64 %34
  br label %54

36:                                               ; preds = %2
  %37 = zext i32 %4 to i64
  %38 = shl nuw nsw i64 %37, 1
  %39 = add nuw nsw i64 %38, 12
  %40 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %39, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %41 = bitcast i8* %40 to %"class.WTF::StringImpl"*
  %42 = bitcast i8* %40 to i32*
  store i32 1, i32* %42, align 4
  %43 = getelementptr inbounds i8, i8* %40, i64 4
  %44 = bitcast i8* %43 to i32*
  store i32 %4, i32* %44, align 4
  %45 = getelementptr inbounds i8, i8* %40, i64 8
  %46 = bitcast i8* %45 to i32*
  store i32 0, i32* %46, align 4
  %47 = ptrtoint i8* %40 to i64
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %49 = bitcast %"class.WTF::StringImpl"* %48 to i16*
  %50 = load i32, i32* %3, align 4
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds i16, i16* %49, i64 %51
  %53 = icmp eq i8* %40, null
  br i1 %53, label %65, label %54

54:                                               ; preds = %29, %36
  %55 = phi i16* [ %35, %29 ], [ %52, %36 ]
  %56 = phi i16* [ %32, %29 ], [ %49, %36 ]
  %57 = phi i64 [ %30, %29 ], [ %47, %36 ]
  %58 = phi %"class.WTF::StringImpl"* [ %7, %29 ], [ %41, %36 ]
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %65, label %62

62:                                               ; preds = %54
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 1
  %64 = bitcast %"class.WTF::StringImpl"* %63 to i16*
  br label %65

65:                                               ; preds = %9, %36, %54, %62
  %66 = phi i1 [ false, %62 ], [ false, %54 ], [ true, %36 ], [ true, %9 ]
  %67 = phi %"class.WTF::StringImpl"* [ %58, %62 ], [ %58, %54 ], [ null, %36 ], [ null, %9 ]
  %68 = phi i16* [ %55, %62 ], [ %55, %54 ], [ %52, %36 ], [ %11, %9 ]
  %69 = phi i16* [ %56, %62 ], [ %56, %54 ], [ %49, %36 ], [ %11, %9 ]
  %70 = phi i64 [ %57, %62 ], [ %57, %54 ], [ %47, %36 ], [ 0, %9 ]
  %71 = phi i16* [ %64, %62 ], [ null, %54 ], [ null, %36 ], [ null, %9 ]
  %72 = icmp eq i32 %1, 0
  %73 = icmp eq i16* %69, %68
  br i1 %72, label %74, label %75

74:                                               ; preds = %65
  br i1 %73, label %133, label %76

75:                                               ; preds = %65
  br i1 %73, label %176, label %144

76:                                               ; preds = %74, %124
  %77 = phi i8 [ %81, %124 ], [ 0, %74 ]
  %78 = phi i32 [ %126, %124 ], [ 0, %74 ]
  %79 = phi i16* [ %106, %124 ], [ %69, %74 ]
  br label %80

80:                                               ; preds = %76, %94
  %81 = phi i8 [ %97, %94 ], [ %77, %76 ]
  %82 = phi i16* [ %98, %94 ], [ %79, %76 ]
  %83 = load i16, i16* %82, align 2
  %84 = icmp ult i16 %83, 128
  br i1 %84, label %85, label %88

85:                                               ; preds = %80
  %86 = icmp ult i16 %83, 33
  br i1 %86, label %87, label %100

87:                                               ; preds = %85
  switch i16 %83, label %100 [
    i16 32, label %94
    i16 13, label %94
    i16 12, label %94
    i16 11, label %94
    i16 10, label %94
    i16 9, label %94
  ]

88:                                               ; preds = %80
  %89 = zext i16 %83 to i32
  %90 = tail call i32 @u_charDirection_69(i32 %89) #15
  %91 = icmp eq i32 %90, 9
  br i1 %91, label %92, label %100

92:                                               ; preds = %88
  %93 = load i16, i16* %82, align 2
  br label %94

94:                                               ; preds = %92, %87, %87, %87, %87, %87, %87
  %95 = phi i16 [ %93, %92 ], [ %83, %87 ], [ %83, %87 ], [ %83, %87 ], [ %83, %87 ], [ %83, %87 ], [ %83, %87 ]
  %96 = icmp eq i16 %95, 32
  %97 = select i1 %96, i8 %81, i8 1
  %98 = getelementptr inbounds i16, i16* %82, i64 1
  %99 = icmp eq i16* %98, %68
  br i1 %99, label %133, label %80

100:                                              ; preds = %88, %85, %87
  %101 = icmp eq i16* %82, %68
  br i1 %101, label %133, label %102

102:                                              ; preds = %100
  %103 = sext i32 %78 to i64
  br label %104

104:                                              ; preds = %102, %118
  %105 = phi i64 [ %103, %102 ], [ %121, %118 ]
  %106 = phi i16* [ %82, %102 ], [ %120, %118 ]
  %107 = load i16, i16* %106, align 2
  %108 = icmp ult i16 %107, 128
  br i1 %108, label %109, label %112

109:                                              ; preds = %104
  %110 = icmp ult i16 %107, 33
  br i1 %110, label %111, label %118

111:                                              ; preds = %109
  switch i16 %107, label %116 [
    i16 32, label %124
    i16 13, label %124
    i16 12, label %124
    i16 11, label %124
    i16 10, label %124
    i16 9, label %124
  ]

112:                                              ; preds = %104
  %113 = zext i16 %107 to i32
  %114 = tail call i32 @u_charDirection_69(i32 %113) #15
  %115 = icmp eq i32 %114, 9
  br i1 %115, label %124, label %116

116:                                              ; preds = %111, %112
  %117 = load i16, i16* %106, align 2
  br label %118

118:                                              ; preds = %116, %109
  %119 = phi i16 [ %117, %116 ], [ %107, %109 ]
  %120 = getelementptr inbounds i16, i16* %106, i64 1
  %121 = add i64 %105, 1
  %122 = getelementptr inbounds i16, i16* %71, i64 %105
  store i16 %119, i16* %122, align 2
  %123 = icmp eq i16* %120, %68
  br i1 %123, label %131, label %104

124:                                              ; preds = %111, %111, %111, %111, %111, %111, %112
  %125 = trunc i64 %105 to i32
  %126 = add nsw i32 %125, 1
  %127 = shl i64 %105, 32
  %128 = ashr exact i64 %127, 32
  %129 = getelementptr inbounds i16, i16* %71, i64 %128
  store i16 32, i16* %129, align 2
  %130 = icmp eq i16* %106, %68
  br i1 %130, label %133, label %76

131:                                              ; preds = %118
  %132 = trunc i64 %121 to i32
  br label %133

133:                                              ; preds = %100, %124, %94, %74, %131
  %134 = phi i8 [ %81, %131 ], [ 0, %74 ], [ %97, %94 ], [ %81, %124 ], [ %81, %100 ]
  %135 = phi i32 [ %132, %131 ], [ 0, %74 ], [ %78, %94 ], [ %126, %124 ], [ %78, %100 ]
  %136 = icmp sgt i32 %135, 0
  br i1 %136, label %137, label %176

137:                                              ; preds = %133
  %138 = add nsw i32 %135, -1
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i16, i16* %71, i64 %139
  %141 = load i16, i16* %140, align 2
  %142 = icmp eq i16 %141, 32
  %143 = select i1 %142, i32 %138, i32 %135
  br label %176

144:                                              ; preds = %75, %167
  %145 = phi i64 [ %171, %167 ], [ 0, %75 ]
  %146 = phi i8 [ %169, %167 ], [ 0, %75 ]
  %147 = phi i16* [ %172, %167 ], [ %69, %75 ]
  %148 = load i16, i16* %147, align 2
  %149 = icmp ult i16 %148, 128
  br i1 %149, label %150, label %154

150:                                              ; preds = %144
  %151 = icmp ult i16 %148, 33
  br i1 %151, label %152, label %165

152:                                              ; preds = %150
  %153 = icmp eq i16 %148, 32
  br i1 %153, label %164, label %159

154:                                              ; preds = %144
  %155 = zext i16 %148 to i32
  %156 = tail call i32 @u_charDirection_69(i32 %155) #15
  %157 = icmp eq i32 %156, 9
  %158 = load i16, i16* %147, align 2
  br i1 %157, label %162, label %165

159:                                              ; preds = %152
  %160 = add nsw i16 %148, -9
  %161 = icmp ult i16 %160, 5
  br i1 %161, label %167, label %165

162:                                              ; preds = %154
  %163 = icmp eq i16 %158, 32
  br i1 %163, label %164, label %167

164:                                              ; preds = %152, %162
  br label %167

165:                                              ; preds = %150, %154, %159
  %166 = phi i16 [ %148, %159 ], [ %158, %154 ], [ %148, %150 ]
  br label %167

167:                                              ; preds = %164, %162, %159, %165
  %168 = phi i16 [ %166, %165 ], [ 32, %159 ], [ 32, %162 ], [ 32, %164 ]
  %169 = phi i8 [ %146, %165 ], [ 1, %159 ], [ 1, %162 ], [ %146, %164 ]
  %170 = getelementptr inbounds i16, i16* %71, i64 %145
  store i16 %168, i16* %170, align 2
  %171 = add nuw i64 %145, 1
  %172 = getelementptr inbounds i16, i16* %147, i64 1
  %173 = icmp eq i16* %172, %68
  br i1 %173, label %174, label %144

174:                                              ; preds = %167
  %175 = trunc i64 %171 to i32
  br label %176

176:                                              ; preds = %174, %75, %137, %133
  %177 = phi i32 [ %135, %133 ], [ %143, %137 ], [ 0, %75 ], [ %175, %174 ]
  %178 = phi i8 [ %134, %133 ], [ %134, %137 ], [ 0, %75 ], [ %169, %174 ]
  %179 = load i32, i32* %3, align 4
  %180 = icmp eq i32 %177, %179
  %181 = and i8 %178, 1
  %182 = icmp eq i8 %181, 0
  %183 = and i1 %180, %182
  br i1 %183, label %184, label %203

184:                                              ; preds = %176
  %185 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %185, label %226, label %186

186:                                              ; preds = %184
  %187 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %188 = load atomic i32, i32* %187 monotonic, align 4
  %189 = and i32 %188, 2
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %226

191:                                              ; preds = %186
  %192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %193 = load i32, i32* %192, align 4
  %194 = zext i32 %193 to i33
  %195 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %194, i33 1) #15
  %196 = extractvalue { i33, i1 } %195, 1
  %197 = extractvalue { i33, i1 } %195, 0
  %198 = icmp slt i33 %197, 0
  %199 = or i1 %196, %198
  br i1 %199, label %200, label %201, !prof !2

200:                                              ; preds = %191
  tail call void @llvm.trap() #15
  unreachable

201:                                              ; preds = %191
  %202 = trunc i33 %197 to i32
  store i32 %202, i32* %192, align 4
  br label %226

203:                                              ; preds = %176
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 1
  %205 = load i32, i32* %204, align 4
  %206 = icmp eq i32 %205, %177
  br i1 %206, label %223, label %207

207:                                              ; preds = %203
  %208 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"* %67, i32 0, i32 %177) #15
  %209 = ptrtoint %"class.WTF::StringImpl"* %208 to i64
  br i1 %66, label %223, label %210

210:                                              ; preds = %207
  %211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %212 = load atomic i32, i32* %211 monotonic, align 4
  %213 = and i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 0
  %216 = load i32, i32* %215, align 4
  br i1 %214, label %217, label %219

217:                                              ; preds = %210
  %218 = add i32 %216, -1
  store i32 %218, i32* %215, align 4
  br label %219

219:                                              ; preds = %217, %210
  %220 = phi i32 [ %218, %217 ], [ %216, %210 ]
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %223

222:                                              ; preds = %219
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %67) #15
  br label %223

223:                                              ; preds = %222, %219, %207, %203
  %224 = phi i64 [ %70, %203 ], [ %209, %207 ], [ %209, %222 ], [ %209, %219 ]
  %225 = inttoptr i64 %224 to %"class.WTF::StringImpl"*
  br label %242

226:                                              ; preds = %201, %186, %184
  %227 = inttoptr i64 %70 to %"class.WTF::StringImpl"*
  %228 = icmp eq i64 %70, 0
  br i1 %228, label %242, label %229

229:                                              ; preds = %226
  %230 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %227, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %231 = load atomic i32, i32* %230 monotonic, align 4
  %232 = and i32 %231, 2
  %233 = icmp eq i32 %232, 0
  %234 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %227, i64 0, i32 0
  %235 = load i32, i32* %234, align 4
  br i1 %233, label %236, label %238

236:                                              ; preds = %229
  %237 = add i32 %235, -1
  store i32 %237, i32* %234, align 4
  br label %238

238:                                              ; preds = %236, %229
  %239 = phi i32 [ %237, %236 ], [ %235, %229 ]
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %241, label %242

241:                                              ; preds = %238
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %227) #15
  br label %242

242:                                              ; preds = %223, %226, %238, %241
  %243 = phi %"class.WTF::StringImpl"* [ %225, %223 ], [ %0, %226 ], [ %0, %238 ], [ %0, %241 ]
  ret %"class.WTF::StringImpl"* %243
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl18SimplifyWhiteSpaceEPFbDsENS_13StripBehaviorE(%"class.WTF::StringImpl"*, i1 (i16)*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl32SimplifyMatchedCharactersToSpaceIhNS_14UCharPredicateEEE13scoped_refptrIS0_ET0_NS_13StripBehaviorE(%"class.WTF::StringImpl"* %0, i1 (i16)* %1, i32 %2)
  br label %12

10:                                               ; preds = %3
  %11 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl32SimplifyMatchedCharactersToSpaceIDsNS_14UCharPredicateEEE13scoped_refptrIS0_ET0_NS_13StripBehaviorE(%"class.WTF::StringImpl"* %0, i1 (i16)* %1, i32 %2)
  br label %12

12:                                               ; preds = %10, %8
  %13 = phi %"class.WTF::StringImpl"* [ %9, %8 ], [ %11, %10 ]
  ret %"class.WTF::StringImpl"* %13
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl32SimplifyMatchedCharactersToSpaceIhNS_14UCharPredicateEEE13scoped_refptrIS0_ET0_NS_13StripBehaviorE(%"class.WTF::StringImpl"*, i1 (i16)*, i32) local_unnamed_addr #7 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %37

7:                                                ; preds = %3
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %10, label %13

10:                                               ; preds = %7
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %12 = bitcast %"class.WTF::StringImpl"* %11 to i8*
  br label %65

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #15
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !2

27:                                               ; preds = %18
  tail call void @llvm.trap() #15
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %30

30:                                               ; preds = %28, %13
  %31 = ptrtoint %"class.WTF::StringImpl"* %8 to i64
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %33 = bitcast %"class.WTF::StringImpl"* %32 to i8*
  %34 = load i32, i32* %4, align 4
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %33, i64 %35
  br label %54

37:                                               ; preds = %3
  %38 = zext i32 %5 to i64
  %39 = add nuw nsw i64 %38, 12
  %40 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %39, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %41 = bitcast i8* %40 to %"class.WTF::StringImpl"*
  %42 = bitcast i8* %40 to i32*
  store i32 1, i32* %42, align 4
  %43 = getelementptr inbounds i8, i8* %40, i64 4
  %44 = bitcast i8* %43 to i32*
  store i32 %5, i32* %44, align 4
  %45 = getelementptr inbounds i8, i8* %40, i64 8
  %46 = bitcast i8* %45 to i32*
  store i32 1, i32* %46, align 4
  %47 = ptrtoint i8* %40 to i64
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %49 = bitcast %"class.WTF::StringImpl"* %48 to i8*
  %50 = load i32, i32* %4, align 4
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %49, i64 %51
  %53 = icmp eq i8* %40, null
  br i1 %53, label %65, label %54

54:                                               ; preds = %30, %37
  %55 = phi i8* [ %36, %30 ], [ %52, %37 ]
  %56 = phi i8* [ %33, %30 ], [ %49, %37 ]
  %57 = phi i64 [ %31, %30 ], [ %47, %37 ]
  %58 = phi %"class.WTF::StringImpl"* [ %8, %30 ], [ %41, %37 ]
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %65, label %62

62:                                               ; preds = %54
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 1
  %64 = bitcast %"class.WTF::StringImpl"* %63 to i8*
  br label %65

65:                                               ; preds = %10, %37, %54, %62
  %66 = phi i1 [ false, %62 ], [ false, %54 ], [ true, %37 ], [ true, %10 ]
  %67 = phi %"class.WTF::StringImpl"* [ %58, %62 ], [ %58, %54 ], [ null, %37 ], [ null, %10 ]
  %68 = phi i8* [ %55, %62 ], [ %55, %54 ], [ %52, %37 ], [ %12, %10 ]
  %69 = phi i8* [ %56, %62 ], [ %56, %54 ], [ %49, %37 ], [ %12, %10 ]
  %70 = phi i64 [ %57, %62 ], [ %57, %54 ], [ %47, %37 ], [ 0, %10 ]
  %71 = phi i8* [ %64, %62 ], [ null, %54 ], [ null, %37 ], [ null, %10 ]
  %72 = icmp eq i32 %2, 0
  %73 = icmp eq i8* %69, %68
  br i1 %72, label %74, label %75

74:                                               ; preds = %65
  br i1 %73, label %117, label %76

75:                                               ; preds = %65
  br i1 %73, label %146, label %128

76:                                               ; preds = %74, %108
  %77 = phi i8 [ %81, %108 ], [ 0, %74 ]
  %78 = phi i32 [ %110, %108 ], [ 0, %74 ]
  %79 = phi i8* [ %98, %108 ], [ %69, %74 ]
  br label %80

80:                                               ; preds = %76, %86
  %81 = phi i8 [ %89, %86 ], [ %77, %76 ]
  %82 = phi i8* [ %90, %86 ], [ %79, %76 ]
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i16
  %85 = tail call zeroext i1 %1(i16 zeroext %84) #15
  br i1 %85, label %86, label %92

86:                                               ; preds = %80
  %87 = load i8, i8* %82, align 1
  %88 = icmp eq i8 %87, 32
  %89 = select i1 %88, i8 %81, i8 1
  %90 = getelementptr inbounds i8, i8* %82, i64 1
  %91 = icmp eq i8* %90, %68
  br i1 %91, label %117, label %80

92:                                               ; preds = %80
  %93 = icmp eq i8* %82, %68
  br i1 %93, label %117, label %94

94:                                               ; preds = %92
  %95 = sext i32 %78 to i64
  br label %96

96:                                               ; preds = %94, %102
  %97 = phi i64 [ %95, %94 ], [ %105, %102 ]
  %98 = phi i8* [ %82, %94 ], [ %103, %102 ]
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i16
  %101 = tail call zeroext i1 %1(i16 zeroext %100) #15
  br i1 %101, label %108, label %102

102:                                              ; preds = %96
  %103 = getelementptr inbounds i8, i8* %98, i64 1
  %104 = load i8, i8* %98, align 1
  %105 = add i64 %97, 1
  %106 = getelementptr inbounds i8, i8* %71, i64 %97
  store i8 %104, i8* %106, align 1
  %107 = icmp eq i8* %103, %68
  br i1 %107, label %115, label %96

108:                                              ; preds = %96
  %109 = trunc i64 %97 to i32
  %110 = add nsw i32 %109, 1
  %111 = shl i64 %97, 32
  %112 = ashr exact i64 %111, 32
  %113 = getelementptr inbounds i8, i8* %71, i64 %112
  store i8 32, i8* %113, align 1
  %114 = icmp eq i8* %98, %68
  br i1 %114, label %117, label %76

115:                                              ; preds = %102
  %116 = trunc i64 %105 to i32
  br label %117

117:                                              ; preds = %92, %108, %86, %74, %115
  %118 = phi i8 [ %81, %115 ], [ 0, %74 ], [ %89, %86 ], [ %81, %108 ], [ %81, %92 ]
  %119 = phi i32 [ %116, %115 ], [ 0, %74 ], [ %78, %86 ], [ %110, %108 ], [ %78, %92 ]
  %120 = icmp sgt i32 %119, 0
  br i1 %120, label %121, label %146

121:                                              ; preds = %117
  %122 = add nsw i32 %119, -1
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %71, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = icmp eq i8 %125, 32
  %127 = select i1 %126, i32 %122, i32 %119
  br label %146

128:                                              ; preds = %75, %128
  %129 = phi i64 [ %141, %128 ], [ 0, %75 ]
  %130 = phi i8 [ %139, %128 ], [ 0, %75 ]
  %131 = phi i8* [ %142, %128 ], [ %69, %75 ]
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i16
  %134 = tail call zeroext i1 %1(i16 zeroext %133) #15
  %135 = load i8, i8* %131, align 1
  %136 = icmp eq i8 %135, 32
  %137 = select i1 %136, i8 %130, i8 1
  %138 = select i1 %134, i8 32, i8 %135
  %139 = select i1 %134, i8 %137, i8 %130
  %140 = getelementptr inbounds i8, i8* %71, i64 %129
  store i8 %138, i8* %140, align 1
  %141 = add nuw i64 %129, 1
  %142 = getelementptr inbounds i8, i8* %131, i64 1
  %143 = icmp eq i8* %142, %68
  br i1 %143, label %144, label %128

144:                                              ; preds = %128
  %145 = trunc i64 %141 to i32
  br label %146

146:                                              ; preds = %144, %75, %121, %117
  %147 = phi i32 [ %119, %117 ], [ %127, %121 ], [ 0, %75 ], [ %145, %144 ]
  %148 = phi i8 [ %118, %117 ], [ %118, %121 ], [ 0, %75 ], [ %139, %144 ]
  %149 = load i32, i32* %4, align 4
  %150 = icmp eq i32 %147, %149
  %151 = and i8 %148, 1
  %152 = icmp eq i8 %151, 0
  %153 = and i1 %150, %152
  br i1 %153, label %154, label %173

154:                                              ; preds = %146
  %155 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %155, label %196, label %156

156:                                              ; preds = %154
  %157 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %158 = load atomic i32, i32* %157 monotonic, align 4
  %159 = and i32 %158, 2
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %196

161:                                              ; preds = %156
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %163 = load i32, i32* %162, align 4
  %164 = zext i32 %163 to i33
  %165 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %164, i33 1) #15
  %166 = extractvalue { i33, i1 } %165, 1
  %167 = extractvalue { i33, i1 } %165, 0
  %168 = icmp slt i33 %167, 0
  %169 = or i1 %166, %168
  br i1 %169, label %170, label %171, !prof !2

170:                                              ; preds = %161
  tail call void @llvm.trap() #15
  unreachable

171:                                              ; preds = %161
  %172 = trunc i33 %167 to i32
  store i32 %172, i32* %162, align 4
  br label %196

173:                                              ; preds = %146
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 1
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %175, %147
  br i1 %176, label %193, label %177

177:                                              ; preds = %173
  %178 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"* %67, i32 0, i32 %147) #15
  %179 = ptrtoint %"class.WTF::StringImpl"* %178 to i64
  br i1 %66, label %193, label %180

180:                                              ; preds = %177
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %182 = load atomic i32, i32* %181 monotonic, align 4
  %183 = and i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 0
  %186 = load i32, i32* %185, align 4
  br i1 %184, label %187, label %189

187:                                              ; preds = %180
  %188 = add i32 %186, -1
  store i32 %188, i32* %185, align 4
  br label %189

189:                                              ; preds = %187, %180
  %190 = phi i32 [ %188, %187 ], [ %186, %180 ]
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %193

192:                                              ; preds = %189
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %67) #15
  br label %193

193:                                              ; preds = %192, %189, %177, %173
  %194 = phi i64 [ %70, %173 ], [ %179, %177 ], [ %179, %192 ], [ %179, %189 ]
  %195 = inttoptr i64 %194 to %"class.WTF::StringImpl"*
  br label %212

196:                                              ; preds = %171, %156, %154
  %197 = inttoptr i64 %70 to %"class.WTF::StringImpl"*
  %198 = icmp eq i64 %70, 0
  br i1 %198, label %212, label %199

199:                                              ; preds = %196
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %197, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %201 = load atomic i32, i32* %200 monotonic, align 4
  %202 = and i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %197, i64 0, i32 0
  %205 = load i32, i32* %204, align 4
  br i1 %203, label %206, label %208

206:                                              ; preds = %199
  %207 = add i32 %205, -1
  store i32 %207, i32* %204, align 4
  br label %208

208:                                              ; preds = %206, %199
  %209 = phi i32 [ %207, %206 ], [ %205, %199 ]
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %212

211:                                              ; preds = %208
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %197) #15
  br label %212

212:                                              ; preds = %193, %196, %208, %211
  %213 = phi %"class.WTF::StringImpl"* [ %195, %193 ], [ %0, %196 ], [ %0, %208 ], [ %0, %211 ]
  ret %"class.WTF::StringImpl"* %213
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl32SimplifyMatchedCharactersToSpaceIDsNS_14UCharPredicateEEE13scoped_refptrIS0_ET0_NS_13StripBehaviorE(%"class.WTF::StringImpl"*, i1 (i16)*, i32) local_unnamed_addr #7 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %37

7:                                                ; preds = %3
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %10, label %13

10:                                               ; preds = %7
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %12 = bitcast %"class.WTF::StringImpl"* %11 to i16*
  br label %66

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #15
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !2

27:                                               ; preds = %18
  tail call void @llvm.trap() #15
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %30

30:                                               ; preds = %28, %13
  %31 = ptrtoint %"class.WTF::StringImpl"* %8 to i64
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %33 = bitcast %"class.WTF::StringImpl"* %32 to i16*
  %34 = load i32, i32* %4, align 4
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %33, i64 %35
  br label %55

37:                                               ; preds = %3
  %38 = zext i32 %5 to i64
  %39 = shl nuw nsw i64 %38, 1
  %40 = add nuw nsw i64 %39, 12
  %41 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %42 = bitcast i8* %41 to %"class.WTF::StringImpl"*
  %43 = bitcast i8* %41 to i32*
  store i32 1, i32* %43, align 4
  %44 = getelementptr inbounds i8, i8* %41, i64 4
  %45 = bitcast i8* %44 to i32*
  store i32 %5, i32* %45, align 4
  %46 = getelementptr inbounds i8, i8* %41, i64 8
  %47 = bitcast i8* %46 to i32*
  store i32 0, i32* %47, align 4
  %48 = ptrtoint i8* %41 to i64
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %50 = bitcast %"class.WTF::StringImpl"* %49 to i16*
  %51 = load i32, i32* %4, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds i16, i16* %50, i64 %52
  %54 = icmp eq i8* %41, null
  br i1 %54, label %66, label %55

55:                                               ; preds = %30, %37
  %56 = phi i16* [ %36, %30 ], [ %53, %37 ]
  %57 = phi i16* [ %33, %30 ], [ %50, %37 ]
  %58 = phi i64 [ %31, %30 ], [ %48, %37 ]
  %59 = phi %"class.WTF::StringImpl"* [ %8, %30 ], [ %42, %37 ]
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %66, label %63

63:                                               ; preds = %55
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 1
  %65 = bitcast %"class.WTF::StringImpl"* %64 to i16*
  br label %66

66:                                               ; preds = %10, %37, %55, %63
  %67 = phi i1 [ false, %63 ], [ false, %55 ], [ true, %37 ], [ true, %10 ]
  %68 = phi %"class.WTF::StringImpl"* [ %59, %63 ], [ %59, %55 ], [ null, %37 ], [ null, %10 ]
  %69 = phi i16* [ %56, %63 ], [ %56, %55 ], [ %53, %37 ], [ %12, %10 ]
  %70 = phi i16* [ %57, %63 ], [ %57, %55 ], [ %50, %37 ], [ %12, %10 ]
  %71 = phi i64 [ %58, %63 ], [ %58, %55 ], [ %48, %37 ], [ 0, %10 ]
  %72 = phi i16* [ %65, %63 ], [ null, %55 ], [ null, %37 ], [ null, %10 ]
  %73 = icmp eq i32 %2, 0
  %74 = icmp eq i16* %70, %69
  br i1 %73, label %75, label %76

75:                                               ; preds = %66
  br i1 %74, label %116, label %77

76:                                               ; preds = %66
  br i1 %74, label %144, label %127

77:                                               ; preds = %75, %107
  %78 = phi i8 [ %82, %107 ], [ 0, %75 ]
  %79 = phi i32 [ %109, %107 ], [ 0, %75 ]
  %80 = phi i16* [ %98, %107 ], [ %70, %75 ]
  br label %81

81:                                               ; preds = %77, %86
  %82 = phi i8 [ %89, %86 ], [ %78, %77 ]
  %83 = phi i16* [ %90, %86 ], [ %80, %77 ]
  %84 = load i16, i16* %83, align 2
  %85 = tail call zeroext i1 %1(i16 zeroext %84) #15
  br i1 %85, label %86, label %92

86:                                               ; preds = %81
  %87 = load i16, i16* %83, align 2
  %88 = icmp eq i16 %87, 32
  %89 = select i1 %88, i8 %82, i8 1
  %90 = getelementptr inbounds i16, i16* %83, i64 1
  %91 = icmp eq i16* %90, %69
  br i1 %91, label %116, label %81

92:                                               ; preds = %81
  %93 = icmp eq i16* %83, %69
  br i1 %93, label %116, label %94

94:                                               ; preds = %92
  %95 = sext i32 %79 to i64
  br label %96

96:                                               ; preds = %94, %101
  %97 = phi i64 [ %95, %94 ], [ %104, %101 ]
  %98 = phi i16* [ %83, %94 ], [ %102, %101 ]
  %99 = load i16, i16* %98, align 2
  %100 = tail call zeroext i1 %1(i16 zeroext %99) #15
  br i1 %100, label %107, label %101

101:                                              ; preds = %96
  %102 = getelementptr inbounds i16, i16* %98, i64 1
  %103 = load i16, i16* %98, align 2
  %104 = add i64 %97, 1
  %105 = getelementptr inbounds i16, i16* %72, i64 %97
  store i16 %103, i16* %105, align 2
  %106 = icmp eq i16* %102, %69
  br i1 %106, label %114, label %96

107:                                              ; preds = %96
  %108 = trunc i64 %97 to i32
  %109 = add nsw i32 %108, 1
  %110 = shl i64 %97, 32
  %111 = ashr exact i64 %110, 32
  %112 = getelementptr inbounds i16, i16* %72, i64 %111
  store i16 32, i16* %112, align 2
  %113 = icmp eq i16* %98, %69
  br i1 %113, label %116, label %77

114:                                              ; preds = %101
  %115 = trunc i64 %104 to i32
  br label %116

116:                                              ; preds = %92, %107, %86, %75, %114
  %117 = phi i8 [ %82, %114 ], [ 0, %75 ], [ %89, %86 ], [ %82, %107 ], [ %82, %92 ]
  %118 = phi i32 [ %115, %114 ], [ 0, %75 ], [ %79, %86 ], [ %109, %107 ], [ %79, %92 ]
  %119 = icmp sgt i32 %118, 0
  br i1 %119, label %120, label %144

120:                                              ; preds = %116
  %121 = add nsw i32 %118, -1
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i16, i16* %72, i64 %122
  %124 = load i16, i16* %123, align 2
  %125 = icmp eq i16 %124, 32
  %126 = select i1 %125, i32 %121, i32 %118
  br label %144

127:                                              ; preds = %76, %127
  %128 = phi i64 [ %139, %127 ], [ 0, %76 ]
  %129 = phi i8 [ %137, %127 ], [ 0, %76 ]
  %130 = phi i16* [ %140, %127 ], [ %70, %76 ]
  %131 = load i16, i16* %130, align 2
  %132 = tail call zeroext i1 %1(i16 zeroext %131) #15
  %133 = load i16, i16* %130, align 2
  %134 = icmp eq i16 %133, 32
  %135 = select i1 %134, i8 %129, i8 1
  %136 = select i1 %132, i16 32, i16 %133
  %137 = select i1 %132, i8 %135, i8 %129
  %138 = getelementptr inbounds i16, i16* %72, i64 %128
  store i16 %136, i16* %138, align 2
  %139 = add nuw i64 %128, 1
  %140 = getelementptr inbounds i16, i16* %130, i64 1
  %141 = icmp eq i16* %140, %69
  br i1 %141, label %142, label %127

142:                                              ; preds = %127
  %143 = trunc i64 %139 to i32
  br label %144

144:                                              ; preds = %142, %76, %120, %116
  %145 = phi i32 [ %118, %116 ], [ %126, %120 ], [ 0, %76 ], [ %143, %142 ]
  %146 = phi i8 [ %117, %116 ], [ %117, %120 ], [ 0, %76 ], [ %137, %142 ]
  %147 = load i32, i32* %4, align 4
  %148 = icmp eq i32 %145, %147
  %149 = and i8 %146, 1
  %150 = icmp eq i8 %149, 0
  %151 = and i1 %148, %150
  br i1 %151, label %152, label %171

152:                                              ; preds = %144
  %153 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %153, label %194, label %154

154:                                              ; preds = %152
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %194

159:                                              ; preds = %154
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %161 = load i32, i32* %160, align 4
  %162 = zext i32 %161 to i33
  %163 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %162, i33 1) #15
  %164 = extractvalue { i33, i1 } %163, 1
  %165 = extractvalue { i33, i1 } %163, 0
  %166 = icmp slt i33 %165, 0
  %167 = or i1 %164, %166
  br i1 %167, label %168, label %169, !prof !2

168:                                              ; preds = %159
  tail call void @llvm.trap() #15
  unreachable

169:                                              ; preds = %159
  %170 = trunc i33 %165 to i32
  store i32 %170, i32* %160, align 4
  br label %194

171:                                              ; preds = %144
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 1
  %173 = load i32, i32* %172, align 4
  %174 = icmp eq i32 %173, %145
  br i1 %174, label %191, label %175

175:                                              ; preds = %171
  %176 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"* %68, i32 0, i32 %145) #15
  %177 = ptrtoint %"class.WTF::StringImpl"* %176 to i64
  br i1 %67, label %191, label %178

178:                                              ; preds = %175
  %179 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %180 = load atomic i32, i32* %179 monotonic, align 4
  %181 = and i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 0
  %184 = load i32, i32* %183, align 4
  br i1 %182, label %185, label %187

185:                                              ; preds = %178
  %186 = add i32 %184, -1
  store i32 %186, i32* %183, align 4
  br label %187

187:                                              ; preds = %185, %178
  %188 = phi i32 [ %186, %185 ], [ %184, %178 ]
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %191

190:                                              ; preds = %187
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %68) #15
  br label %191

191:                                              ; preds = %190, %187, %175, %171
  %192 = phi i64 [ %71, %171 ], [ %177, %175 ], [ %177, %190 ], [ %177, %187 ]
  %193 = inttoptr i64 %192 to %"class.WTF::StringImpl"*
  br label %210

194:                                              ; preds = %169, %154, %152
  %195 = inttoptr i64 %71 to %"class.WTF::StringImpl"*
  %196 = icmp eq i64 %71, 0
  br i1 %196, label %210, label %197

197:                                              ; preds = %194
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %199 = load atomic i32, i32* %198 monotonic, align 4
  %200 = and i32 %199, 2
  %201 = icmp eq i32 %200, 0
  %202 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 0
  %203 = load i32, i32* %202, align 4
  br i1 %201, label %204, label %206

204:                                              ; preds = %197
  %205 = add i32 %203, -1
  store i32 %205, i32* %202, align 4
  br label %206

206:                                              ; preds = %204, %197
  %207 = phi i32 [ %205, %204 ], [ %203, %197 ]
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %209, label %210

209:                                              ; preds = %206
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %195) #15
  br label %210

210:                                              ; preds = %191, %194, %206, %209
  %211 = phi %"class.WTF::StringImpl"* [ %193, %191 ], [ %0, %194 ], [ %0, %206 ], [ %0, %209 ]
  ret %"class.WTF::StringImpl"* %211
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3WTF10StringImpl5ToIntENS_20NumberParsingOptionsEPb(%"class.WTF::StringImpl"*, i32, i8*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %7, label %15, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.WTF::StringImpl"* %8 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = tail call i32 @_ZN3WTF15CharactersToIntEPKhmNS_20NumberParsingOptionsEPb(i8* %10, i64 %13, i32 %1, i8* %2) #15
  br label %21

15:                                               ; preds = %3
  %16 = bitcast %"class.WTF::StringImpl"* %8 to i16*
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = tail call i32 @_ZN3WTF15CharactersToIntEPKDsmNS_20NumberParsingOptionsEPb(i16* %16, i64 %19, i32 %1, i8* %2) #15
  br label %21

21:                                               ; preds = %15, %9
  %22 = phi i32 [ %14, %9 ], [ %20, %15 ]
  ret i32 %22
}

declare i32 @_ZN3WTF15CharactersToIntEPKhmNS_20NumberParsingOptionsEPb(i8*, i64, i32, i8*) local_unnamed_addr #1

declare i32 @_ZN3WTF15CharactersToIntEPKDsmNS_20NumberParsingOptionsEPb(i16*, i64, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3WTF10StringImpl6ToUIntENS_20NumberParsingOptionsEPb(%"class.WTF::StringImpl"*, i32, i8*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %7, label %15, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.WTF::StringImpl"* %8 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = tail call i32 @_ZN3WTF16CharactersToUIntEPKhmNS_20NumberParsingOptionsEPb(i8* %10, i64 %13, i32 %1, i8* %2) #15
  br label %21

15:                                               ; preds = %3
  %16 = bitcast %"class.WTF::StringImpl"* %8 to i16*
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = tail call i32 @_ZN3WTF16CharactersToUIntEPKDsmNS_20NumberParsingOptionsEPb(i16* %16, i64 %19, i32 %1, i8* %2) #15
  br label %21

21:                                               ; preds = %15, %9
  %22 = phi i32 [ %14, %9 ], [ %20, %15 ]
  ret i32 %22
}

declare i32 @_ZN3WTF16CharactersToUIntEPKhmNS_20NumberParsingOptionsEPb(i8*, i64, i32, i8*) local_unnamed_addr #1

declare i32 @_ZN3WTF16CharactersToUIntEPKDsmNS_20NumberParsingOptionsEPb(i16*, i64, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF10StringImpl15HexToUIntStrictEPb(%"class.WTF::StringImpl"*, i8*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load atomic i32, i32* %3 monotonic, align 4
  %5 = and i32 %4, 1
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %6, label %14, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.WTF::StringImpl"* %7 to i8*
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = tail call i32 @_ZN3WTF19HexCharactersToUIntEPKhmNS_20NumberParsingOptionsEPb(i8* %9, i64 %12, i32 6, i8* %1) #15
  br label %20

14:                                               ; preds = %2
  %15 = bitcast %"class.WTF::StringImpl"* %7 to i16*
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i64
  %19 = tail call i32 @_ZN3WTF19HexCharactersToUIntEPKDsmNS_20NumberParsingOptionsEPb(i16* %15, i64 %18, i32 6, i8* %1) #15
  br label %20

20:                                               ; preds = %14, %8
  %21 = phi i32 [ %13, %8 ], [ %19, %14 ]
  ret i32 %21
}

declare i32 @_ZN3WTF19HexCharactersToUIntEPKhmNS_20NumberParsingOptionsEPb(i8*, i64, i32, i8*) local_unnamed_addr #1

declare i32 @_ZN3WTF19HexCharactersToUIntEPKDsmNS_20NumberParsingOptionsEPb(i16*, i64, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF10StringImpl17HexToUInt64StrictEPb(%"class.WTF::StringImpl"*, i8*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load atomic i32, i32* %3 monotonic, align 4
  %5 = and i32 %4, 1
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %6, label %14, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.WTF::StringImpl"* %7 to i8*
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = tail call i64 @_ZN3WTF21HexCharactersToUInt64EPKhmNS_20NumberParsingOptionsEPb(i8* %9, i64 %12, i32 6, i8* %1) #15
  br label %20

14:                                               ; preds = %2
  %15 = bitcast %"class.WTF::StringImpl"* %7 to i16*
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i64
  %19 = tail call i64 @_ZN3WTF21HexCharactersToUInt64EPKDsmNS_20NumberParsingOptionsEPb(i16* %15, i64 %18, i32 6, i8* %1) #15
  br label %20

20:                                               ; preds = %14, %8
  %21 = phi i64 [ %13, %8 ], [ %19, %14 ]
  ret i64 %21
}

declare i64 @_ZN3WTF21HexCharactersToUInt64EPKhmNS_20NumberParsingOptionsEPb(i8*, i64, i32, i8*) local_unnamed_addr #1

declare i64 @_ZN3WTF21HexCharactersToUInt64EPKDsmNS_20NumberParsingOptionsEPb(i16*, i64, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK3WTF10StringImpl7ToInt64ENS_20NumberParsingOptionsEPb(%"class.WTF::StringImpl"*, i32, i8*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %7, label %15, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.WTF::StringImpl"* %8 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = tail call i64 @_ZN3WTF17CharactersToInt64EPKhmNS_20NumberParsingOptionsEPb(i8* %10, i64 %13, i32 %1, i8* %2) #15
  br label %21

15:                                               ; preds = %3
  %16 = bitcast %"class.WTF::StringImpl"* %8 to i16*
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = tail call i64 @_ZN3WTF17CharactersToInt64EPKDsmNS_20NumberParsingOptionsEPb(i16* %16, i64 %19, i32 %1, i8* %2) #15
  br label %21

21:                                               ; preds = %15, %9
  %22 = phi i64 [ %14, %9 ], [ %20, %15 ]
  ret i64 %22
}

declare i64 @_ZN3WTF17CharactersToInt64EPKhmNS_20NumberParsingOptionsEPb(i8*, i64, i32, i8*) local_unnamed_addr #1

declare i64 @_ZN3WTF17CharactersToInt64EPKDsmNS_20NumberParsingOptionsEPb(i16*, i64, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK3WTF10StringImpl8ToUInt64ENS_20NumberParsingOptionsEPb(%"class.WTF::StringImpl"*, i32, i8*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %7, label %15, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.WTF::StringImpl"* %8 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = tail call i64 @_ZN3WTF18CharactersToUInt64EPKhmNS_20NumberParsingOptionsEPb(i8* %10, i64 %13, i32 %1, i8* %2) #15
  br label %21

15:                                               ; preds = %3
  %16 = bitcast %"class.WTF::StringImpl"* %8 to i16*
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = tail call i64 @_ZN3WTF18CharactersToUInt64EPKDsmNS_20NumberParsingOptionsEPb(i16* %16, i64 %19, i32 %1, i8* %2) #15
  br label %21

21:                                               ; preds = %15, %9
  %22 = phi i64 [ %14, %9 ], [ %20, %15 ]
  ret i64 %22
}

declare i64 @_ZN3WTF18CharactersToUInt64EPKhmNS_20NumberParsingOptionsEPb(i8*, i64, i32, i8*) local_unnamed_addr #1

declare i64 @_ZN3WTF18CharactersToUInt64EPKDsmNS_20NumberParsingOptionsEPb(i16*, i64, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3WTF10StringImpl8ToDoubleEPb(%"class.WTF::StringImpl"*, i8*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load atomic i32, i32* %3 monotonic, align 4
  %5 = and i32 %4, 1
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %6, label %14, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.WTF::StringImpl"* %7 to i8*
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = tail call double @_ZN3WTF18CharactersToDoubleEPKhmPb(i8* %9, i64 %12, i8* %1) #15
  br label %20

14:                                               ; preds = %2
  %15 = bitcast %"class.WTF::StringImpl"* %7 to i16*
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i64
  %19 = tail call double @_ZN3WTF18CharactersToDoubleEPKDsmPb(i16* %15, i64 %18, i8* %1) #15
  br label %20

20:                                               ; preds = %14, %8
  %21 = phi double [ %13, %8 ], [ %19, %14 ]
  ret double %21
}

declare double @_ZN3WTF18CharactersToDoubleEPKhmPb(i8*, i64, i8*) local_unnamed_addr #1

declare double @_ZN3WTF18CharactersToDoubleEPKDsmPb(i16*, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3WTF10StringImpl7ToFloatEPb(%"class.WTF::StringImpl"*, i8*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load atomic i32, i32* %3 monotonic, align 4
  %5 = and i32 %4, 1
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %6, label %14, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.WTF::StringImpl"* %7 to i8*
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = tail call float @_ZN3WTF17CharactersToFloatEPKhmPb(i8* %9, i64 %12, i8* %1) #15
  br label %20

14:                                               ; preds = %2
  %15 = bitcast %"class.WTF::StringImpl"* %7 to i16*
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i64
  %19 = tail call float @_ZN3WTF17CharactersToFloatEPKDsmPb(i16* %15, i64 %18, i8* %1) #15
  br label %20

20:                                               ; preds = %14, %8
  %21 = phi float [ %13, %8 ], [ %19, %14 ]
  ret float %21
}

declare float @_ZN3WTF17CharactersToFloatEPKhmPb(i8*, i64, i8*) local_unnamed_addr #1

declare float @_ZN3WTF17CharactersToFloatEPKDsmPb(i16*, i64, i8*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN3WTF27DeprecatedEqualIgnoringCaseEPKhS1_j(i8* readonly, i8* readonly, i32) local_unnamed_addr #8 {
  %4 = icmp eq i8* %0, %1
  br i1 %4, label %23, label %5

5:                                                ; preds = %3, %10
  %6 = phi i8* [ %12, %10 ], [ %0, %3 ]
  %7 = phi i8* [ %17, %10 ], [ %1, %3 ]
  %8 = phi i32 [ %11, %10 ], [ %2, %3 ]
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %23, label %10

10:                                               ; preds = %5
  %11 = add i32 %8, -1
  %12 = getelementptr inbounds i8, i8* %6, i64 1
  %13 = load i8, i8* %6, align 1
  %14 = zext i8 %13 to i64
  %15 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %14
  %16 = load i16, i16* %15, align 2
  %17 = getelementptr inbounds i8, i8* %7, i64 1
  %18 = load i8, i8* %7, align 1
  %19 = zext i8 %18 to i64
  %20 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = icmp eq i16 %16, %21
  br i1 %22, label %5, label %23

23:                                               ; preds = %5, %10, %3
  %24 = phi i1 [ true, %3 ], [ true, %5 ], [ false, %10 ]
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF27DeprecatedEqualIgnoringCaseEPKDsS1_j(i16*, i16*, i32) local_unnamed_addr #0 {
  %4 = icmp eq i16* %0, %1
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  %6 = tail call i32 @u_memcasecmp_69(i16* %0, i16* %1, i32 %2, i32 0) #15
  %7 = icmp eq i32 %6, 0
  br label %8

8:                                                ; preds = %3, %5
  %9 = phi i1 [ %7, %5 ], [ true, %3 ]
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF27DeprecatedEqualIgnoringCaseEPKDsPKhj(i16* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  br label %4

4:                                                ; preds = %9, %3
  %5 = phi i16* [ %0, %3 ], [ %11, %9 ]
  %6 = phi i8* [ %1, %3 ], [ %15, %9 ]
  %7 = phi i32 [ %2, %3 ], [ %10, %9 ]
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %22, label %9

9:                                                ; preds = %4
  %10 = add i32 %7, -1
  %11 = getelementptr inbounds i16, i16* %5, i64 1
  %12 = load i16, i16* %5, align 2
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @u_foldCase_69(i32 %13, i32 0) #15
  %15 = getelementptr inbounds i8, i8* %6, i64 1
  %16 = load i8, i8* %6, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %17
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = icmp eq i32 %14, %20
  br i1 %21, label %4, label %22

22:                                               ; preds = %4, %9
  %23 = phi i1 [ false, %9 ], [ true, %4 ]
  ret i1 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF10StringImpl4FindEPFbDsEj(%"class.WTF::StringImpl"* nocapture readonly, i1 (i16)* nocapture, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %7, label %28, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.WTF::StringImpl"* %8 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp ugt i32 %12, %2
  br i1 %13, label %14, label %46

14:                                               ; preds = %9
  %15 = zext i32 %2 to i64
  br label %16

16:                                               ; preds = %22, %14
  %17 = phi i64 [ %15, %14 ], [ %23, %22 ]
  %18 = getelementptr inbounds i8, i8* %10, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = tail call zeroext i1 %1(i16 zeroext %20) #15
  br i1 %21, label %26, label %22

22:                                               ; preds = %16
  %23 = add nuw nsw i64 %17, 1
  %24 = trunc i64 %23 to i32
  %25 = icmp eq i32 %12, %24
  br i1 %25, label %46, label %16

26:                                               ; preds = %16
  %27 = trunc i64 %17 to i32
  br label %46

28:                                               ; preds = %3
  %29 = bitcast %"class.WTF::StringImpl"* %8 to i16*
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp ugt i32 %31, %2
  br i1 %32, label %33, label %46

33:                                               ; preds = %28
  %34 = zext i32 %2 to i64
  br label %35

35:                                               ; preds = %40, %33
  %36 = phi i64 [ %34, %33 ], [ %41, %40 ]
  %37 = getelementptr inbounds i16, i16* %29, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = tail call zeroext i1 %1(i16 zeroext %38) #15
  br i1 %39, label %44, label %40

40:                                               ; preds = %35
  %41 = add nuw nsw i64 %36, 1
  %42 = trunc i64 %41 to i32
  %43 = icmp eq i32 %31, %42
  br i1 %43, label %46, label %35

44:                                               ; preds = %35
  %45 = trunc i64 %36 to i32
  br label %46

46:                                               ; preds = %22, %40, %44, %28, %26, %9
  %47 = phi i32 [ -1, %9 ], [ %27, %26 ], [ -1, %28 ], [ %45, %44 ], [ -1, %40 ], [ -1, %22 ]
  ret i32 %47
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3WTF10StringImpl4FindEN4base17RepeatingCallbackIFbDsEEEj(%"class.WTF::StringImpl"* nocapture readonly, %"class.base::RepeatingCallback"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %7, label %32, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.WTF::StringImpl"* %8 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp ugt i32 %12, %2
  br i1 %13, label %14, label %58

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = zext i32 %2 to i64
  br label %17

17:                                               ; preds = %14, %27
  %18 = phi i64 [ %16, %14 ], [ %28, %27 ]
  %19 = getelementptr inbounds i8, i8* %10, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i16
  %22 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %15, align 8
  %23 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %22, i64 0, i32 1
  %24 = bitcast void ()** %23 to i1 (%"class.base::internal::BindStateBase"*, i16)**
  %25 = load i1 (%"class.base::internal::BindStateBase"*, i16)*, i1 (%"class.base::internal::BindStateBase"*, i16)** %24, align 8
  %26 = tail call zeroext i1 %25(%"class.base::internal::BindStateBase"* %22, i16 zeroext %21) #15
  br i1 %26, label %56, label %27

27:                                               ; preds = %17
  %28 = add nuw nsw i64 %18, 1
  %29 = load i32, i32* %11, align 4
  %30 = zext i32 %29 to i64
  %31 = icmp ult i64 %28, %30
  br i1 %31, label %17, label %58

32:                                               ; preds = %3
  %33 = bitcast %"class.WTF::StringImpl"* %8 to i16*
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp ugt i32 %35, %2
  br i1 %36, label %37, label %58

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %39 = zext i32 %2 to i64
  br label %40

40:                                               ; preds = %37, %49
  %41 = phi i64 [ %39, %37 ], [ %50, %49 ]
  %42 = getelementptr inbounds i16, i16* %33, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %38, align 8
  %45 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %44, i64 0, i32 1
  %46 = bitcast void ()** %45 to i1 (%"class.base::internal::BindStateBase"*, i16)**
  %47 = load i1 (%"class.base::internal::BindStateBase"*, i16)*, i1 (%"class.base::internal::BindStateBase"*, i16)** %46, align 8
  %48 = tail call zeroext i1 %47(%"class.base::internal::BindStateBase"* %44, i16 zeroext %43) #15
  br i1 %48, label %54, label %49

49:                                               ; preds = %40
  %50 = add nuw nsw i64 %41, 1
  %51 = load i32, i32* %34, align 4
  %52 = zext i32 %51 to i64
  %53 = icmp ult i64 %50, %52
  br i1 %53, label %40, label %58

54:                                               ; preds = %40
  %55 = trunc i64 %41 to i32
  br label %58

56:                                               ; preds = %17
  %57 = trunc i64 %18 to i32
  br label %58

58:                                               ; preds = %27, %49, %56, %54, %9, %32
  %59 = phi i32 [ -1, %32 ], [ -1, %9 ], [ %55, %54 ], [ %57, %56 ], [ -1, %49 ], [ -1, %27 ]
  ret i32 %59
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF10StringImpl4FindERKNS_10StringViewEj(%"class.WTF::StringImpl"*, %"class.WTF::StringView"* nocapture readonly dereferenceable(24), i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  %7 = bitcast i8* %5 to i16*
  br i1 %6, label %780, label %8, !prof !2

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  switch i32 %10, label %87 [
    i32 1, label %11
    i32 0, label %82
  ], !prof !57

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %15, label %51, label %17

17:                                               ; preds = %11
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %17
  %28 = load i8, i8* %5, align 1
  %29 = zext i8 %28 to i16
  br label %32

30:                                               ; preds = %17
  %31 = load i16, i16* %7, align 2
  br label %32

32:                                               ; preds = %27, %30
  %33 = phi i16 [ %29, %27 ], [ %31, %30 ]
  %34 = icmp ult i16 %33, 256
  %35 = icmp ugt i32 %20, %2
  %36 = and i1 %35, %34
  br i1 %36, label %37, label %780

37:                                               ; preds = %32
  %38 = zext i32 %2 to i64
  %39 = getelementptr inbounds i8, i8* %18, i64 %38
  %40 = and i16 %33, 255
  %41 = zext i16 %40 to i32
  %42 = sub i32 %20, %2
  %43 = zext i32 %42 to i64
  %44 = tail call i8* @memchr(i8* %39, i32 %41, i64 %43) #16
  %45 = icmp eq i8* %44, null
  %46 = ptrtoint i8* %44 to i64
  %47 = ptrtoint %"class.WTF::StringImpl"* %16 to i64
  %48 = sub i64 %46, %47
  %49 = trunc i64 %48 to i32
  %50 = select i1 %45, i32 -1, i32 %49
  br label %780

51:                                               ; preds = %11
  %52 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %51
  %62 = load i8, i8* %5, align 1
  %63 = zext i8 %62 to i16
  br label %66

64:                                               ; preds = %51
  %65 = load i16, i16* %7, align 2
  br label %66

66:                                               ; preds = %61, %64
  %67 = phi i16 [ %63, %61 ], [ %65, %64 ]
  %68 = icmp ugt i32 %54, %2
  br i1 %68, label %69, label %780

69:                                               ; preds = %66
  %70 = zext i32 %2 to i64
  br label %71

71:                                               ; preds = %76, %69
  %72 = phi i64 [ %70, %69 ], [ %77, %76 ]
  %73 = getelementptr inbounds i16, i16* %52, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = icmp eq i16 %74, %67
  br i1 %75, label %80, label %76

76:                                               ; preds = %71
  %77 = add nuw nsw i64 %72, 1
  %78 = trunc i64 %77 to i32
  %79 = icmp eq i32 %54, %78
  br i1 %79, label %780, label %71

80:                                               ; preds = %71
  %81 = trunc i64 %72 to i32
  br label %780

82:                                               ; preds = %8
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = icmp ult i32 %84, %2
  %86 = select i1 %85, i32 %84, i32 %2
  br label %780

87:                                               ; preds = %8
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = icmp ult i32 %89, %2
  br i1 %90, label %780, label %91

91:                                               ; preds = %87
  %92 = sub i32 %89, %2
  %93 = icmp ult i32 %92, %10
  br i1 %93, label %780, label %94

94:                                               ; preds = %91
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = load atomic i32, i32* %95 monotonic, align 4
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  %99 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %100 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %99, align 8
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 1
  %104 = icmp ne i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %98, label %442, label %106

106:                                              ; preds = %94
  %107 = bitcast %"class.WTF::StringImpl"* %105 to i8*
  %108 = zext i32 %2 to i64
  %109 = getelementptr inbounds i8, i8* %107, i64 %108
  %110 = zext i32 %10 to i64
  %111 = icmp ult i32 %10, 8
  br i1 %104, label %227, label %112

112:                                              ; preds = %106
  br i1 %111, label %113, label %117

113:                                              ; preds = %209, %112
  %114 = phi i64 [ 0, %112 ], [ %118, %209 ]
  %115 = phi i32 [ 0, %112 ], [ %225, %209 ]
  %116 = phi i32 [ 0, %112 ], [ %219, %209 ]
  br label %392

117:                                              ; preds = %112
  %118 = and i64 %110, 4294967288
  %119 = add nsw i64 %118, -8
  %120 = lshr exact i64 %119, 3
  %121 = add nuw nsw i64 %120, 1
  %122 = and i64 %121, 1
  %123 = icmp eq i64 %119, 0
  br i1 %123, label %177, label %124

124:                                              ; preds = %117
  %125 = sub nuw nsw i64 %121, %122
  br label %126

126:                                              ; preds = %126, %124
  %127 = phi i64 [ 0, %124 ], [ %174, %126 ]
  %128 = phi <4 x i32> [ zeroinitializer, %124 ], [ %172, %126 ]
  %129 = phi <4 x i32> [ zeroinitializer, %124 ], [ %173, %126 ]
  %130 = phi <4 x i32> [ zeroinitializer, %124 ], [ %162, %126 ]
  %131 = phi <4 x i32> [ zeroinitializer, %124 ], [ %163, %126 ]
  %132 = phi i64 [ %125, %124 ], [ %175, %126 ]
  %133 = getelementptr inbounds i8, i8* %109, i64 %127
  %134 = bitcast i8* %133 to <4 x i8>*
  %135 = load <4 x i8>, <4 x i8>* %134, align 1
  %136 = getelementptr inbounds i8, i8* %133, i64 4
  %137 = bitcast i8* %136 to <4 x i8>*
  %138 = load <4 x i8>, <4 x i8>* %137, align 1
  %139 = zext <4 x i8> %135 to <4 x i32>
  %140 = zext <4 x i8> %138 to <4 x i32>
  %141 = add <4 x i32> %130, %139
  %142 = add <4 x i32> %131, %140
  %143 = getelementptr inbounds i16, i16* %7, i64 %127
  %144 = bitcast i16* %143 to <4 x i16>*
  %145 = load <4 x i16>, <4 x i16>* %144, align 2
  %146 = getelementptr inbounds i16, i16* %143, i64 4
  %147 = bitcast i16* %146 to <4 x i16>*
  %148 = load <4 x i16>, <4 x i16>* %147, align 2
  %149 = zext <4 x i16> %145 to <4 x i32>
  %150 = zext <4 x i16> %148 to <4 x i32>
  %151 = add <4 x i32> %128, %149
  %152 = add <4 x i32> %129, %150
  %153 = or i64 %127, 8
  %154 = getelementptr inbounds i8, i8* %109, i64 %153
  %155 = bitcast i8* %154 to <4 x i8>*
  %156 = load <4 x i8>, <4 x i8>* %155, align 1
  %157 = getelementptr inbounds i8, i8* %154, i64 4
  %158 = bitcast i8* %157 to <4 x i8>*
  %159 = load <4 x i8>, <4 x i8>* %158, align 1
  %160 = zext <4 x i8> %156 to <4 x i32>
  %161 = zext <4 x i8> %159 to <4 x i32>
  %162 = add <4 x i32> %141, %160
  %163 = add <4 x i32> %142, %161
  %164 = getelementptr inbounds i16, i16* %7, i64 %153
  %165 = bitcast i16* %164 to <4 x i16>*
  %166 = load <4 x i16>, <4 x i16>* %165, align 2
  %167 = getelementptr inbounds i16, i16* %164, i64 4
  %168 = bitcast i16* %167 to <4 x i16>*
  %169 = load <4 x i16>, <4 x i16>* %168, align 2
  %170 = zext <4 x i16> %166 to <4 x i32>
  %171 = zext <4 x i16> %169 to <4 x i32>
  %172 = add <4 x i32> %151, %170
  %173 = add <4 x i32> %152, %171
  %174 = add i64 %127, 16
  %175 = add i64 %132, -2
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %126, !llvm.loop !58

177:                                              ; preds = %126, %117
  %178 = phi <4 x i32> [ undef, %117 ], [ %162, %126 ]
  %179 = phi <4 x i32> [ undef, %117 ], [ %163, %126 ]
  %180 = phi <4 x i32> [ undef, %117 ], [ %172, %126 ]
  %181 = phi <4 x i32> [ undef, %117 ], [ %173, %126 ]
  %182 = phi i64 [ 0, %117 ], [ %174, %126 ]
  %183 = phi <4 x i32> [ zeroinitializer, %117 ], [ %172, %126 ]
  %184 = phi <4 x i32> [ zeroinitializer, %117 ], [ %173, %126 ]
  %185 = phi <4 x i32> [ zeroinitializer, %117 ], [ %162, %126 ]
  %186 = phi <4 x i32> [ zeroinitializer, %117 ], [ %163, %126 ]
  %187 = icmp eq i64 %122, 0
  br i1 %187, label %209, label %188

188:                                              ; preds = %177
  %189 = getelementptr inbounds i8, i8* %109, i64 %182
  %190 = getelementptr inbounds i16, i16* %7, i64 %182
  %191 = getelementptr inbounds i16, i16* %190, i64 4
  %192 = bitcast i16* %191 to <4 x i16>*
  %193 = load <4 x i16>, <4 x i16>* %192, align 2
  %194 = zext <4 x i16> %193 to <4 x i32>
  %195 = add <4 x i32> %184, %194
  %196 = bitcast i16* %190 to <4 x i16>*
  %197 = load <4 x i16>, <4 x i16>* %196, align 2
  %198 = zext <4 x i16> %197 to <4 x i32>
  %199 = add <4 x i32> %183, %198
  %200 = getelementptr inbounds i8, i8* %189, i64 4
  %201 = bitcast i8* %200 to <4 x i8>*
  %202 = load <4 x i8>, <4 x i8>* %201, align 1
  %203 = zext <4 x i8> %202 to <4 x i32>
  %204 = add <4 x i32> %186, %203
  %205 = bitcast i8* %189 to <4 x i8>*
  %206 = load <4 x i8>, <4 x i8>* %205, align 1
  %207 = zext <4 x i8> %206 to <4 x i32>
  %208 = add <4 x i32> %185, %207
  br label %209

209:                                              ; preds = %177, %188
  %210 = phi <4 x i32> [ %178, %177 ], [ %208, %188 ]
  %211 = phi <4 x i32> [ %179, %177 ], [ %204, %188 ]
  %212 = phi <4 x i32> [ %180, %177 ], [ %199, %188 ]
  %213 = phi <4 x i32> [ %181, %177 ], [ %195, %188 ]
  %214 = add <4 x i32> %211, %210
  %215 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %216 = add <4 x i32> %214, %215
  %217 = shufflevector <4 x i32> %216, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %218 = add <4 x i32> %216, %217
  %219 = extractelement <4 x i32> %218, i32 0
  %220 = add <4 x i32> %213, %212
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %222 = add <4 x i32> %220, %221
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %224 = add <4 x i32> %222, %223
  %225 = extractelement <4 x i32> %224, i32 0
  %226 = icmp eq i64 %118, %110
  br i1 %226, label %387, label %113

227:                                              ; preds = %106
  br i1 %111, label %228, label %232

228:                                              ; preds = %324, %227
  %229 = phi i64 [ 0, %227 ], [ %233, %324 ]
  %230 = phi i32 [ 0, %227 ], [ %340, %324 ]
  %231 = phi i32 [ 0, %227 ], [ %334, %324 ]
  br label %347

232:                                              ; preds = %227
  %233 = and i64 %110, 4294967288
  %234 = add nsw i64 %233, -8
  %235 = lshr exact i64 %234, 3
  %236 = add nuw nsw i64 %235, 1
  %237 = and i64 %236, 1
  %238 = icmp eq i64 %234, 0
  br i1 %238, label %292, label %239

239:                                              ; preds = %232
  %240 = sub nuw nsw i64 %236, %237
  br label %241

241:                                              ; preds = %241, %239
  %242 = phi i64 [ 0, %239 ], [ %289, %241 ]
  %243 = phi <4 x i32> [ zeroinitializer, %239 ], [ %287, %241 ]
  %244 = phi <4 x i32> [ zeroinitializer, %239 ], [ %288, %241 ]
  %245 = phi <4 x i32> [ zeroinitializer, %239 ], [ %277, %241 ]
  %246 = phi <4 x i32> [ zeroinitializer, %239 ], [ %278, %241 ]
  %247 = phi i64 [ %240, %239 ], [ %290, %241 ]
  %248 = getelementptr inbounds i8, i8* %109, i64 %242
  %249 = bitcast i8* %248 to <4 x i8>*
  %250 = load <4 x i8>, <4 x i8>* %249, align 1
  %251 = getelementptr inbounds i8, i8* %248, i64 4
  %252 = bitcast i8* %251 to <4 x i8>*
  %253 = load <4 x i8>, <4 x i8>* %252, align 1
  %254 = zext <4 x i8> %250 to <4 x i32>
  %255 = zext <4 x i8> %253 to <4 x i32>
  %256 = add <4 x i32> %245, %254
  %257 = add <4 x i32> %246, %255
  %258 = getelementptr inbounds i8, i8* %5, i64 %242
  %259 = bitcast i8* %258 to <4 x i8>*
  %260 = load <4 x i8>, <4 x i8>* %259, align 1
  %261 = getelementptr inbounds i8, i8* %258, i64 4
  %262 = bitcast i8* %261 to <4 x i8>*
  %263 = load <4 x i8>, <4 x i8>* %262, align 1
  %264 = zext <4 x i8> %260 to <4 x i32>
  %265 = zext <4 x i8> %263 to <4 x i32>
  %266 = add <4 x i32> %243, %264
  %267 = add <4 x i32> %244, %265
  %268 = or i64 %242, 8
  %269 = getelementptr inbounds i8, i8* %109, i64 %268
  %270 = bitcast i8* %269 to <4 x i8>*
  %271 = load <4 x i8>, <4 x i8>* %270, align 1
  %272 = getelementptr inbounds i8, i8* %269, i64 4
  %273 = bitcast i8* %272 to <4 x i8>*
  %274 = load <4 x i8>, <4 x i8>* %273, align 1
  %275 = zext <4 x i8> %271 to <4 x i32>
  %276 = zext <4 x i8> %274 to <4 x i32>
  %277 = add <4 x i32> %256, %275
  %278 = add <4 x i32> %257, %276
  %279 = getelementptr inbounds i8, i8* %5, i64 %268
  %280 = bitcast i8* %279 to <4 x i8>*
  %281 = load <4 x i8>, <4 x i8>* %280, align 1
  %282 = getelementptr inbounds i8, i8* %279, i64 4
  %283 = bitcast i8* %282 to <4 x i8>*
  %284 = load <4 x i8>, <4 x i8>* %283, align 1
  %285 = zext <4 x i8> %281 to <4 x i32>
  %286 = zext <4 x i8> %284 to <4 x i32>
  %287 = add <4 x i32> %266, %285
  %288 = add <4 x i32> %267, %286
  %289 = add i64 %242, 16
  %290 = add i64 %247, -2
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %241, !llvm.loop !59

292:                                              ; preds = %241, %232
  %293 = phi <4 x i32> [ undef, %232 ], [ %277, %241 ]
  %294 = phi <4 x i32> [ undef, %232 ], [ %278, %241 ]
  %295 = phi <4 x i32> [ undef, %232 ], [ %287, %241 ]
  %296 = phi <4 x i32> [ undef, %232 ], [ %288, %241 ]
  %297 = phi i64 [ 0, %232 ], [ %289, %241 ]
  %298 = phi <4 x i32> [ zeroinitializer, %232 ], [ %287, %241 ]
  %299 = phi <4 x i32> [ zeroinitializer, %232 ], [ %288, %241 ]
  %300 = phi <4 x i32> [ zeroinitializer, %232 ], [ %277, %241 ]
  %301 = phi <4 x i32> [ zeroinitializer, %232 ], [ %278, %241 ]
  %302 = icmp eq i64 %237, 0
  br i1 %302, label %324, label %303

303:                                              ; preds = %292
  %304 = getelementptr inbounds i8, i8* %109, i64 %297
  %305 = getelementptr inbounds i8, i8* %5, i64 %297
  %306 = getelementptr inbounds i8, i8* %305, i64 4
  %307 = bitcast i8* %306 to <4 x i8>*
  %308 = load <4 x i8>, <4 x i8>* %307, align 1
  %309 = zext <4 x i8> %308 to <4 x i32>
  %310 = add <4 x i32> %299, %309
  %311 = bitcast i8* %305 to <4 x i8>*
  %312 = load <4 x i8>, <4 x i8>* %311, align 1
  %313 = zext <4 x i8> %312 to <4 x i32>
  %314 = add <4 x i32> %298, %313
  %315 = getelementptr inbounds i8, i8* %304, i64 4
  %316 = bitcast i8* %315 to <4 x i8>*
  %317 = load <4 x i8>, <4 x i8>* %316, align 1
  %318 = zext <4 x i8> %317 to <4 x i32>
  %319 = add <4 x i32> %301, %318
  %320 = bitcast i8* %304 to <4 x i8>*
  %321 = load <4 x i8>, <4 x i8>* %320, align 1
  %322 = zext <4 x i8> %321 to <4 x i32>
  %323 = add <4 x i32> %300, %322
  br label %324

324:                                              ; preds = %292, %303
  %325 = phi <4 x i32> [ %293, %292 ], [ %323, %303 ]
  %326 = phi <4 x i32> [ %294, %292 ], [ %319, %303 ]
  %327 = phi <4 x i32> [ %295, %292 ], [ %314, %303 ]
  %328 = phi <4 x i32> [ %296, %292 ], [ %310, %303 ]
  %329 = add <4 x i32> %326, %325
  %330 = shufflevector <4 x i32> %329, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %331 = add <4 x i32> %329, %330
  %332 = shufflevector <4 x i32> %331, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %333 = add <4 x i32> %331, %332
  %334 = extractelement <4 x i32> %333, i32 0
  %335 = add <4 x i32> %328, %327
  %336 = shufflevector <4 x i32> %335, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %337 = add <4 x i32> %335, %336
  %338 = shufflevector <4 x i32> %337, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %339 = add <4 x i32> %337, %338
  %340 = extractelement <4 x i32> %339, i32 0
  %341 = icmp eq i64 %233, %110
  br i1 %341, label %342, label %228

342:                                              ; preds = %347, %324
  %343 = phi i32 [ %334, %324 ], [ %354, %347 ]
  %344 = phi i32 [ %340, %324 ], [ %358, %347 ]
  %345 = sub i32 %92, %10
  %346 = zext i32 %345 to i64
  br label %361

347:                                              ; preds = %228, %347
  %348 = phi i64 [ %359, %347 ], [ %229, %228 ]
  %349 = phi i32 [ %358, %347 ], [ %230, %228 ]
  %350 = phi i32 [ %354, %347 ], [ %231, %228 ]
  %351 = getelementptr inbounds i8, i8* %109, i64 %348
  %352 = load i8, i8* %351, align 1
  %353 = zext i8 %352 to i32
  %354 = add i32 %350, %353
  %355 = getelementptr inbounds i8, i8* %5, i64 %348
  %356 = load i8, i8* %355, align 1
  %357 = zext i8 %356 to i32
  %358 = add i32 %349, %357
  %359 = add nuw nsw i64 %348, 1
  %360 = icmp eq i64 %359, %110
  br i1 %360, label %342, label %347, !llvm.loop !60

361:                                              ; preds = %371, %342
  %362 = phi i64 [ 0, %342 ], [ %383, %371 ]
  %363 = phi i32 [ %343, %342 ], [ %382, %371 ]
  %364 = icmp eq i32 %363, %344
  br i1 %364, label %365, label %369

365:                                              ; preds = %361
  %366 = getelementptr inbounds i8, i8* %109, i64 %362
  %367 = tail call i32 @bcmp(i8* %366, i8* nonnull %5, i64 %110) #15
  %368 = icmp eq i32 %367, 0
  br i1 %368, label %384, label %369

369:                                              ; preds = %365, %361
  %370 = icmp eq i64 %362, %346
  br i1 %370, label %780, label %371

371:                                              ; preds = %369
  %372 = trunc i64 %362 to i32
  %373 = add i32 %10, %372
  %374 = zext i32 %373 to i64
  %375 = getelementptr inbounds i8, i8* %109, i64 %374
  %376 = load i8, i8* %375, align 1
  %377 = zext i8 %376 to i32
  %378 = add i32 %363, %377
  %379 = getelementptr inbounds i8, i8* %109, i64 %362
  %380 = load i8, i8* %379, align 1
  %381 = zext i8 %380 to i32
  %382 = sub i32 %378, %381
  %383 = add nuw nsw i64 %362, 1
  br label %361

384:                                              ; preds = %365
  %385 = trunc i64 %362 to i32
  %386 = add i32 %385, %2
  br label %780

387:                                              ; preds = %392, %209
  %388 = phi i32 [ %219, %209 ], [ %399, %392 ]
  %389 = phi i32 [ %225, %209 ], [ %403, %392 ]
  %390 = sub i32 %92, %10
  %391 = zext i32 %390 to i64
  br label %406

392:                                              ; preds = %113, %392
  %393 = phi i64 [ %404, %392 ], [ %114, %113 ]
  %394 = phi i32 [ %403, %392 ], [ %115, %113 ]
  %395 = phi i32 [ %399, %392 ], [ %116, %113 ]
  %396 = getelementptr inbounds i8, i8* %109, i64 %393
  %397 = load i8, i8* %396, align 1
  %398 = zext i8 %397 to i32
  %399 = add i32 %395, %398
  %400 = getelementptr inbounds i16, i16* %7, i64 %393
  %401 = load i16, i16* %400, align 2
  %402 = zext i16 %401 to i32
  %403 = add i32 %394, %402
  %404 = add nuw nsw i64 %393, 1
  %405 = icmp eq i64 %404, %110
  br i1 %405, label %387, label %392, !llvm.loop !61

406:                                              ; preds = %426, %387
  %407 = phi i64 [ 0, %387 ], [ %438, %426 ]
  %408 = phi i32 [ %388, %387 ], [ %437, %426 ]
  %409 = icmp eq i32 %408, %389
  br i1 %409, label %410, label %424

410:                                              ; preds = %406
  %411 = getelementptr inbounds i8, i8* %109, i64 %407
  br label %414

412:                                              ; preds = %414
  %413 = icmp eq i64 %423, %110
  br i1 %413, label %439, label %414

414:                                              ; preds = %410, %412
  %415 = phi i64 [ %423, %412 ], [ 0, %410 ]
  %416 = getelementptr inbounds i8, i8* %411, i64 %415
  %417 = load i8, i8* %416, align 1
  %418 = zext i8 %417 to i32
  %419 = getelementptr inbounds i16, i16* %7, i64 %415
  %420 = load i16, i16* %419, align 2
  %421 = zext i16 %420 to i32
  %422 = icmp eq i32 %418, %421
  %423 = add nuw nsw i64 %415, 1
  br i1 %422, label %412, label %424

424:                                              ; preds = %414, %406
  %425 = icmp eq i64 %407, %391
  br i1 %425, label %780, label %426

426:                                              ; preds = %424
  %427 = trunc i64 %407 to i32
  %428 = add i32 %10, %427
  %429 = zext i32 %428 to i64
  %430 = getelementptr inbounds i8, i8* %109, i64 %429
  %431 = load i8, i8* %430, align 1
  %432 = zext i8 %431 to i32
  %433 = add i32 %408, %432
  %434 = getelementptr inbounds i8, i8* %109, i64 %407
  %435 = load i8, i8* %434, align 1
  %436 = zext i8 %435 to i32
  %437 = sub i32 %433, %436
  %438 = add nuw nsw i64 %407, 1
  br label %406

439:                                              ; preds = %412
  %440 = trunc i64 %407 to i32
  %441 = add i32 %440, %2
  br label %780

442:                                              ; preds = %94
  %443 = bitcast %"class.WTF::StringImpl"* %105 to i16*
  %444 = zext i32 %2 to i64
  %445 = getelementptr inbounds i16, i16* %443, i64 %444
  %446 = zext i32 %10 to i64
  %447 = icmp ult i32 %10, 8
  br i1 %104, label %563, label %448

448:                                              ; preds = %442
  br i1 %447, label %449, label %453

449:                                              ; preds = %545, %448
  %450 = phi i64 [ 0, %448 ], [ %454, %545 ]
  %451 = phi i32 [ 0, %448 ], [ %561, %545 ]
  %452 = phi i32 [ 0, %448 ], [ %555, %545 ]
  br label %739

453:                                              ; preds = %448
  %454 = and i64 %446, 4294967288
  %455 = add nsw i64 %454, -8
  %456 = lshr exact i64 %455, 3
  %457 = add nuw nsw i64 %456, 1
  %458 = and i64 %457, 1
  %459 = icmp eq i64 %455, 0
  br i1 %459, label %513, label %460

460:                                              ; preds = %453
  %461 = sub nuw nsw i64 %457, %458
  br label %462

462:                                              ; preds = %462, %460
  %463 = phi i64 [ 0, %460 ], [ %510, %462 ]
  %464 = phi <4 x i32> [ zeroinitializer, %460 ], [ %508, %462 ]
  %465 = phi <4 x i32> [ zeroinitializer, %460 ], [ %509, %462 ]
  %466 = phi <4 x i32> [ zeroinitializer, %460 ], [ %498, %462 ]
  %467 = phi <4 x i32> [ zeroinitializer, %460 ], [ %499, %462 ]
  %468 = phi i64 [ %461, %460 ], [ %511, %462 ]
  %469 = getelementptr inbounds i16, i16* %445, i64 %463
  %470 = bitcast i16* %469 to <4 x i16>*
  %471 = load <4 x i16>, <4 x i16>* %470, align 2
  %472 = getelementptr inbounds i16, i16* %469, i64 4
  %473 = bitcast i16* %472 to <4 x i16>*
  %474 = load <4 x i16>, <4 x i16>* %473, align 2
  %475 = zext <4 x i16> %471 to <4 x i32>
  %476 = zext <4 x i16> %474 to <4 x i32>
  %477 = add <4 x i32> %466, %475
  %478 = add <4 x i32> %467, %476
  %479 = getelementptr inbounds i16, i16* %7, i64 %463
  %480 = bitcast i16* %479 to <4 x i16>*
  %481 = load <4 x i16>, <4 x i16>* %480, align 2
  %482 = getelementptr inbounds i16, i16* %479, i64 4
  %483 = bitcast i16* %482 to <4 x i16>*
  %484 = load <4 x i16>, <4 x i16>* %483, align 2
  %485 = zext <4 x i16> %481 to <4 x i32>
  %486 = zext <4 x i16> %484 to <4 x i32>
  %487 = add <4 x i32> %464, %485
  %488 = add <4 x i32> %465, %486
  %489 = or i64 %463, 8
  %490 = getelementptr inbounds i16, i16* %445, i64 %489
  %491 = bitcast i16* %490 to <4 x i16>*
  %492 = load <4 x i16>, <4 x i16>* %491, align 2
  %493 = getelementptr inbounds i16, i16* %490, i64 4
  %494 = bitcast i16* %493 to <4 x i16>*
  %495 = load <4 x i16>, <4 x i16>* %494, align 2
  %496 = zext <4 x i16> %492 to <4 x i32>
  %497 = zext <4 x i16> %495 to <4 x i32>
  %498 = add <4 x i32> %477, %496
  %499 = add <4 x i32> %478, %497
  %500 = getelementptr inbounds i16, i16* %7, i64 %489
  %501 = bitcast i16* %500 to <4 x i16>*
  %502 = load <4 x i16>, <4 x i16>* %501, align 2
  %503 = getelementptr inbounds i16, i16* %500, i64 4
  %504 = bitcast i16* %503 to <4 x i16>*
  %505 = load <4 x i16>, <4 x i16>* %504, align 2
  %506 = zext <4 x i16> %502 to <4 x i32>
  %507 = zext <4 x i16> %505 to <4 x i32>
  %508 = add <4 x i32> %487, %506
  %509 = add <4 x i32> %488, %507
  %510 = add i64 %463, 16
  %511 = add i64 %468, -2
  %512 = icmp eq i64 %511, 0
  br i1 %512, label %513, label %462, !llvm.loop !62

513:                                              ; preds = %462, %453
  %514 = phi <4 x i32> [ undef, %453 ], [ %498, %462 ]
  %515 = phi <4 x i32> [ undef, %453 ], [ %499, %462 ]
  %516 = phi <4 x i32> [ undef, %453 ], [ %508, %462 ]
  %517 = phi <4 x i32> [ undef, %453 ], [ %509, %462 ]
  %518 = phi i64 [ 0, %453 ], [ %510, %462 ]
  %519 = phi <4 x i32> [ zeroinitializer, %453 ], [ %508, %462 ]
  %520 = phi <4 x i32> [ zeroinitializer, %453 ], [ %509, %462 ]
  %521 = phi <4 x i32> [ zeroinitializer, %453 ], [ %498, %462 ]
  %522 = phi <4 x i32> [ zeroinitializer, %453 ], [ %499, %462 ]
  %523 = icmp eq i64 %458, 0
  br i1 %523, label %545, label %524

524:                                              ; preds = %513
  %525 = getelementptr inbounds i16, i16* %445, i64 %518
  %526 = getelementptr inbounds i16, i16* %7, i64 %518
  %527 = getelementptr inbounds i16, i16* %526, i64 4
  %528 = bitcast i16* %527 to <4 x i16>*
  %529 = load <4 x i16>, <4 x i16>* %528, align 2
  %530 = zext <4 x i16> %529 to <4 x i32>
  %531 = add <4 x i32> %520, %530
  %532 = bitcast i16* %526 to <4 x i16>*
  %533 = load <4 x i16>, <4 x i16>* %532, align 2
  %534 = zext <4 x i16> %533 to <4 x i32>
  %535 = add <4 x i32> %519, %534
  %536 = getelementptr inbounds i16, i16* %525, i64 4
  %537 = bitcast i16* %536 to <4 x i16>*
  %538 = load <4 x i16>, <4 x i16>* %537, align 2
  %539 = zext <4 x i16> %538 to <4 x i32>
  %540 = add <4 x i32> %522, %539
  %541 = bitcast i16* %525 to <4 x i16>*
  %542 = load <4 x i16>, <4 x i16>* %541, align 2
  %543 = zext <4 x i16> %542 to <4 x i32>
  %544 = add <4 x i32> %521, %543
  br label %545

545:                                              ; preds = %513, %524
  %546 = phi <4 x i32> [ %514, %513 ], [ %544, %524 ]
  %547 = phi <4 x i32> [ %515, %513 ], [ %540, %524 ]
  %548 = phi <4 x i32> [ %516, %513 ], [ %535, %524 ]
  %549 = phi <4 x i32> [ %517, %513 ], [ %531, %524 ]
  %550 = add <4 x i32> %547, %546
  %551 = shufflevector <4 x i32> %550, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %552 = add <4 x i32> %550, %551
  %553 = shufflevector <4 x i32> %552, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %554 = add <4 x i32> %552, %553
  %555 = extractelement <4 x i32> %554, i32 0
  %556 = add <4 x i32> %549, %548
  %557 = shufflevector <4 x i32> %556, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %558 = add <4 x i32> %556, %557
  %559 = shufflevector <4 x i32> %558, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %560 = add <4 x i32> %558, %559
  %561 = extractelement <4 x i32> %560, i32 0
  %562 = icmp eq i64 %454, %446
  br i1 %562, label %733, label %449

563:                                              ; preds = %442
  br i1 %447, label %564, label %568

564:                                              ; preds = %660, %563
  %565 = phi i64 [ 0, %563 ], [ %569, %660 ]
  %566 = phi i32 [ 0, %563 ], [ %676, %660 ]
  %567 = phi i32 [ 0, %563 ], [ %670, %660 ]
  br label %683

568:                                              ; preds = %563
  %569 = and i64 %446, 4294967288
  %570 = add nsw i64 %569, -8
  %571 = lshr exact i64 %570, 3
  %572 = add nuw nsw i64 %571, 1
  %573 = and i64 %572, 1
  %574 = icmp eq i64 %570, 0
  br i1 %574, label %628, label %575

575:                                              ; preds = %568
  %576 = sub nuw nsw i64 %572, %573
  br label %577

577:                                              ; preds = %577, %575
  %578 = phi i64 [ 0, %575 ], [ %625, %577 ]
  %579 = phi <4 x i32> [ zeroinitializer, %575 ], [ %623, %577 ]
  %580 = phi <4 x i32> [ zeroinitializer, %575 ], [ %624, %577 ]
  %581 = phi <4 x i32> [ zeroinitializer, %575 ], [ %613, %577 ]
  %582 = phi <4 x i32> [ zeroinitializer, %575 ], [ %614, %577 ]
  %583 = phi i64 [ %576, %575 ], [ %626, %577 ]
  %584 = getelementptr inbounds i16, i16* %445, i64 %578
  %585 = bitcast i16* %584 to <4 x i16>*
  %586 = load <4 x i16>, <4 x i16>* %585, align 2
  %587 = getelementptr inbounds i16, i16* %584, i64 4
  %588 = bitcast i16* %587 to <4 x i16>*
  %589 = load <4 x i16>, <4 x i16>* %588, align 2
  %590 = zext <4 x i16> %586 to <4 x i32>
  %591 = zext <4 x i16> %589 to <4 x i32>
  %592 = add <4 x i32> %581, %590
  %593 = add <4 x i32> %582, %591
  %594 = getelementptr inbounds i8, i8* %5, i64 %578
  %595 = bitcast i8* %594 to <4 x i8>*
  %596 = load <4 x i8>, <4 x i8>* %595, align 1
  %597 = getelementptr inbounds i8, i8* %594, i64 4
  %598 = bitcast i8* %597 to <4 x i8>*
  %599 = load <4 x i8>, <4 x i8>* %598, align 1
  %600 = zext <4 x i8> %596 to <4 x i32>
  %601 = zext <4 x i8> %599 to <4 x i32>
  %602 = add <4 x i32> %579, %600
  %603 = add <4 x i32> %580, %601
  %604 = or i64 %578, 8
  %605 = getelementptr inbounds i16, i16* %445, i64 %604
  %606 = bitcast i16* %605 to <4 x i16>*
  %607 = load <4 x i16>, <4 x i16>* %606, align 2
  %608 = getelementptr inbounds i16, i16* %605, i64 4
  %609 = bitcast i16* %608 to <4 x i16>*
  %610 = load <4 x i16>, <4 x i16>* %609, align 2
  %611 = zext <4 x i16> %607 to <4 x i32>
  %612 = zext <4 x i16> %610 to <4 x i32>
  %613 = add <4 x i32> %592, %611
  %614 = add <4 x i32> %593, %612
  %615 = getelementptr inbounds i8, i8* %5, i64 %604
  %616 = bitcast i8* %615 to <4 x i8>*
  %617 = load <4 x i8>, <4 x i8>* %616, align 1
  %618 = getelementptr inbounds i8, i8* %615, i64 4
  %619 = bitcast i8* %618 to <4 x i8>*
  %620 = load <4 x i8>, <4 x i8>* %619, align 1
  %621 = zext <4 x i8> %617 to <4 x i32>
  %622 = zext <4 x i8> %620 to <4 x i32>
  %623 = add <4 x i32> %602, %621
  %624 = add <4 x i32> %603, %622
  %625 = add i64 %578, 16
  %626 = add i64 %583, -2
  %627 = icmp eq i64 %626, 0
  br i1 %627, label %628, label %577, !llvm.loop !63

628:                                              ; preds = %577, %568
  %629 = phi <4 x i32> [ undef, %568 ], [ %613, %577 ]
  %630 = phi <4 x i32> [ undef, %568 ], [ %614, %577 ]
  %631 = phi <4 x i32> [ undef, %568 ], [ %623, %577 ]
  %632 = phi <4 x i32> [ undef, %568 ], [ %624, %577 ]
  %633 = phi i64 [ 0, %568 ], [ %625, %577 ]
  %634 = phi <4 x i32> [ zeroinitializer, %568 ], [ %623, %577 ]
  %635 = phi <4 x i32> [ zeroinitializer, %568 ], [ %624, %577 ]
  %636 = phi <4 x i32> [ zeroinitializer, %568 ], [ %613, %577 ]
  %637 = phi <4 x i32> [ zeroinitializer, %568 ], [ %614, %577 ]
  %638 = icmp eq i64 %573, 0
  br i1 %638, label %660, label %639

639:                                              ; preds = %628
  %640 = getelementptr inbounds i16, i16* %445, i64 %633
  %641 = getelementptr inbounds i8, i8* %5, i64 %633
  %642 = getelementptr inbounds i8, i8* %641, i64 4
  %643 = bitcast i8* %642 to <4 x i8>*
  %644 = load <4 x i8>, <4 x i8>* %643, align 1
  %645 = zext <4 x i8> %644 to <4 x i32>
  %646 = add <4 x i32> %635, %645
  %647 = bitcast i8* %641 to <4 x i8>*
  %648 = load <4 x i8>, <4 x i8>* %647, align 1
  %649 = zext <4 x i8> %648 to <4 x i32>
  %650 = add <4 x i32> %634, %649
  %651 = getelementptr inbounds i16, i16* %640, i64 4
  %652 = bitcast i16* %651 to <4 x i16>*
  %653 = load <4 x i16>, <4 x i16>* %652, align 2
  %654 = zext <4 x i16> %653 to <4 x i32>
  %655 = add <4 x i32> %637, %654
  %656 = bitcast i16* %640 to <4 x i16>*
  %657 = load <4 x i16>, <4 x i16>* %656, align 2
  %658 = zext <4 x i16> %657 to <4 x i32>
  %659 = add <4 x i32> %636, %658
  br label %660

660:                                              ; preds = %628, %639
  %661 = phi <4 x i32> [ %629, %628 ], [ %659, %639 ]
  %662 = phi <4 x i32> [ %630, %628 ], [ %655, %639 ]
  %663 = phi <4 x i32> [ %631, %628 ], [ %650, %639 ]
  %664 = phi <4 x i32> [ %632, %628 ], [ %646, %639 ]
  %665 = add <4 x i32> %662, %661
  %666 = shufflevector <4 x i32> %665, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %667 = add <4 x i32> %665, %666
  %668 = shufflevector <4 x i32> %667, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %669 = add <4 x i32> %667, %668
  %670 = extractelement <4 x i32> %669, i32 0
  %671 = add <4 x i32> %664, %663
  %672 = shufflevector <4 x i32> %671, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %673 = add <4 x i32> %671, %672
  %674 = shufflevector <4 x i32> %673, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %675 = add <4 x i32> %673, %674
  %676 = extractelement <4 x i32> %675, i32 0
  %677 = icmp eq i64 %569, %446
  br i1 %677, label %678, label %564

678:                                              ; preds = %683, %660
  %679 = phi i32 [ %670, %660 ], [ %690, %683 ]
  %680 = phi i32 [ %676, %660 ], [ %694, %683 ]
  %681 = sub i32 %92, %10
  %682 = zext i32 %681 to i64
  br label %697

683:                                              ; preds = %564, %683
  %684 = phi i64 [ %695, %683 ], [ %565, %564 ]
  %685 = phi i32 [ %694, %683 ], [ %566, %564 ]
  %686 = phi i32 [ %690, %683 ], [ %567, %564 ]
  %687 = getelementptr inbounds i16, i16* %445, i64 %684
  %688 = load i16, i16* %687, align 2
  %689 = zext i16 %688 to i32
  %690 = add i32 %686, %689
  %691 = getelementptr inbounds i8, i8* %5, i64 %684
  %692 = load i8, i8* %691, align 1
  %693 = zext i8 %692 to i32
  %694 = add i32 %685, %693
  %695 = add nuw nsw i64 %684, 1
  %696 = icmp eq i64 %695, %446
  br i1 %696, label %678, label %683, !llvm.loop !64

697:                                              ; preds = %717, %678
  %698 = phi i64 [ 0, %678 ], [ %729, %717 ]
  %699 = phi i32 [ %679, %678 ], [ %728, %717 ]
  %700 = icmp eq i32 %699, %680
  br i1 %700, label %701, label %715

701:                                              ; preds = %697
  %702 = getelementptr inbounds i16, i16* %445, i64 %698
  br label %705

703:                                              ; preds = %705
  %704 = icmp eq i64 %714, %446
  br i1 %704, label %730, label %705

705:                                              ; preds = %701, %703
  %706 = phi i64 [ %714, %703 ], [ 0, %701 ]
  %707 = getelementptr inbounds i8, i8* %5, i64 %706
  %708 = load i8, i8* %707, align 1
  %709 = zext i8 %708 to i32
  %710 = getelementptr inbounds i16, i16* %702, i64 %706
  %711 = load i16, i16* %710, align 2
  %712 = zext i16 %711 to i32
  %713 = icmp eq i32 %709, %712
  %714 = add nuw nsw i64 %706, 1
  br i1 %713, label %703, label %715

715:                                              ; preds = %705, %697
  %716 = icmp eq i64 %698, %682
  br i1 %716, label %780, label %717

717:                                              ; preds = %715
  %718 = trunc i64 %698 to i32
  %719 = add i32 %10, %718
  %720 = zext i32 %719 to i64
  %721 = getelementptr inbounds i16, i16* %445, i64 %720
  %722 = load i16, i16* %721, align 2
  %723 = zext i16 %722 to i32
  %724 = add i32 %699, %723
  %725 = getelementptr inbounds i16, i16* %445, i64 %698
  %726 = load i16, i16* %725, align 2
  %727 = zext i16 %726 to i32
  %728 = sub i32 %724, %727
  %729 = add nuw nsw i64 %698, 1
  br label %697

730:                                              ; preds = %703
  %731 = trunc i64 %698 to i32
  %732 = add i32 %731, %2
  br label %780

733:                                              ; preds = %739, %545
  %734 = phi i32 [ %555, %545 ], [ %746, %739 ]
  %735 = phi i32 [ %561, %545 ], [ %750, %739 ]
  %736 = sub i32 %92, %10
  %737 = shl nuw nsw i64 %446, 1
  %738 = zext i32 %736 to i64
  br label %753

739:                                              ; preds = %449, %739
  %740 = phi i64 [ %751, %739 ], [ %450, %449 ]
  %741 = phi i32 [ %750, %739 ], [ %451, %449 ]
  %742 = phi i32 [ %746, %739 ], [ %452, %449 ]
  %743 = getelementptr inbounds i16, i16* %445, i64 %740
  %744 = load i16, i16* %743, align 2
  %745 = zext i16 %744 to i32
  %746 = add i32 %742, %745
  %747 = getelementptr inbounds i16, i16* %7, i64 %740
  %748 = load i16, i16* %747, align 2
  %749 = zext i16 %748 to i32
  %750 = add i32 %741, %749
  %751 = add nuw nsw i64 %740, 1
  %752 = icmp eq i64 %751, %446
  br i1 %752, label %733, label %739, !llvm.loop !65

753:                                              ; preds = %764, %733
  %754 = phi i64 [ 0, %733 ], [ %776, %764 ]
  %755 = phi i32 [ %734, %733 ], [ %775, %764 ]
  %756 = icmp eq i32 %755, %735
  br i1 %756, label %757, label %762

757:                                              ; preds = %753
  %758 = getelementptr inbounds i16, i16* %445, i64 %754
  %759 = bitcast i16* %758 to i8*
  %760 = tail call i32 @bcmp(i8* %759, i8* nonnull %5, i64 %737) #15
  %761 = icmp eq i32 %760, 0
  br i1 %761, label %777, label %762

762:                                              ; preds = %757, %753
  %763 = icmp eq i64 %754, %738
  br i1 %763, label %780, label %764

764:                                              ; preds = %762
  %765 = trunc i64 %754 to i32
  %766 = add i32 %10, %765
  %767 = zext i32 %766 to i64
  %768 = getelementptr inbounds i16, i16* %445, i64 %767
  %769 = load i16, i16* %768, align 2
  %770 = zext i16 %769 to i32
  %771 = add i32 %755, %770
  %772 = getelementptr inbounds i16, i16* %445, i64 %754
  %773 = load i16, i16* %772, align 2
  %774 = zext i16 %773 to i32
  %775 = sub i32 %771, %774
  %776 = add nuw nsw i64 %754, 1
  br label %753

777:                                              ; preds = %757
  %778 = trunc i64 %754 to i32
  %779 = add i32 %778, %2
  br label %780

780:                                              ; preds = %76, %424, %369, %762, %715, %777, %730, %439, %384, %80, %66, %37, %32, %82, %87, %91, %3
  %781 = phi i32 [ -1, %3 ], [ %86, %82 ], [ -1, %87 ], [ -1, %91 ], [ -1, %32 ], [ %50, %37 ], [ -1, %66 ], [ %81, %80 ], [ %386, %384 ], [ %441, %439 ], [ %732, %730 ], [ %779, %777 ], [ -1, %715 ], [ -1, %762 ], [ -1, %369 ], [ -1, %424 ], [ -1, %76 ]
  ret i32 %781
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF10StringImpl16FindIgnoringCaseERKNS_10StringViewEj(%"class.WTF::StringImpl"*, %"class.WTF::StringView"* nocapture readonly dereferenceable(24), i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  %7 = bitcast i8* %5 to i16*
  br i1 %6, label %167, label %8, !prof !2

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %13, %2
  br i1 %11, label %15, label %17

15:                                               ; preds = %8
  %16 = select i1 %14, i32 %13, i32 %2
  br label %167

17:                                               ; preds = %8
  br i1 %14, label %167, label %18

18:                                               ; preds = %17
  %19 = sub i32 %13, %2
  %20 = icmp ult i32 %19, %10
  br i1 %20, label %167, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 1
  %31 = icmp ne i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %25, label %108, label %33

33:                                               ; preds = %21
  %34 = bitcast %"class.WTF::StringImpl"* %32 to i8*
  %35 = zext i32 %2 to i64
  %36 = getelementptr inbounds i8, i8* %34, i64 %35
  br i1 %31, label %37, label %77

37:                                               ; preds = %33
  %38 = icmp eq i8* %36, %5
  br i1 %38, label %74, label %39

39:                                               ; preds = %37
  %40 = sub i32 %19, %10
  %41 = zext i32 %40 to i64
  br label %42

42:                                               ; preds = %65, %39
  %43 = phi i64 [ 0, %39 ], [ %71, %65 ]
  %44 = phi i8* [ %36, %39 ], [ %69, %65 ]
  br label %45

45:                                               ; preds = %50, %42
  %46 = phi i8* [ %52, %50 ], [ %44, %42 ]
  %47 = phi i8* [ %57, %50 ], [ %5, %42 ]
  %48 = phi i32 [ %51, %50 ], [ %10, %42 ]
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %72, label %50

50:                                               ; preds = %45
  %51 = add i32 %48, -1
  %52 = getelementptr inbounds i8, i8* %46, i64 1
  %53 = load i8, i8* %46, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %54
  %56 = load i16, i16* %55, align 2
  %57 = getelementptr inbounds i8, i8* %47, i64 1
  %58 = load i8, i8* %47, align 1
  %59 = zext i8 %58 to i64
  %60 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %59
  %61 = load i16, i16* %60, align 2
  %62 = icmp eq i16 %56, %61
  br i1 %62, label %45, label %63

63:                                               ; preds = %50
  %64 = icmp eq i64 %43, %41
  br i1 %64, label %167, label %65

65:                                               ; preds = %63
  %66 = trunc i64 %43 to i32
  %67 = add i32 %66, 1
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %36, i64 %68
  %70 = icmp eq i8* %69, %5
  %71 = add nuw nsw i64 %43, 1
  br i1 %70, label %74, label %42

72:                                               ; preds = %45
  %73 = trunc i64 %43 to i32
  br label %74

74:                                               ; preds = %65, %72, %37
  %75 = phi i32 [ 0, %37 ], [ %73, %72 ], [ %67, %65 ]
  %76 = add i32 %75, %2
  br label %167

77:                                               ; preds = %33
  %78 = sub i32 %19, %10
  %79 = zext i32 %78 to i64
  br label %80

80:                                               ; preds = %103, %77
  %81 = phi i64 [ %104, %103 ], [ 0, %77 ]
  %82 = getelementptr inbounds i8, i8* %36, i64 %81
  br label %83

83:                                               ; preds = %88, %80
  %84 = phi i16* [ %7, %80 ], [ %90, %88 ]
  %85 = phi i8* [ %82, %80 ], [ %94, %88 ]
  %86 = phi i32 [ %10, %80 ], [ %89, %88 ]
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %105, label %88

88:                                               ; preds = %83
  %89 = add i32 %86, -1
  %90 = getelementptr inbounds i16, i16* %84, i64 1
  %91 = load i16, i16* %84, align 2
  %92 = zext i16 %91 to i32
  %93 = tail call i32 @u_foldCase_69(i32 %92, i32 0) #15
  %94 = getelementptr inbounds i8, i8* %85, i64 1
  %95 = load i8, i8* %85, align 1
  %96 = zext i8 %95 to i64
  %97 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %96
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = icmp eq i32 %93, %99
  br i1 %100, label %83, label %101

101:                                              ; preds = %88
  %102 = icmp eq i64 %81, %79
  br i1 %102, label %167, label %103

103:                                              ; preds = %101
  %104 = add nuw nsw i64 %81, 1
  br label %80

105:                                              ; preds = %83
  %106 = trunc i64 %81 to i32
  %107 = add i32 %106, %2
  br label %167

108:                                              ; preds = %21
  %109 = bitcast %"class.WTF::StringImpl"* %32 to i16*
  %110 = zext i32 %2 to i64
  %111 = getelementptr inbounds i16, i16* %109, i64 %110
  br i1 %31, label %112, label %143

112:                                              ; preds = %108
  %113 = sub i32 %19, %10
  %114 = zext i32 %113 to i64
  br label %115

115:                                              ; preds = %138, %112
  %116 = phi i64 [ %139, %138 ], [ 0, %112 ]
  %117 = getelementptr inbounds i16, i16* %111, i64 %116
  br label %118

118:                                              ; preds = %123, %115
  %119 = phi i16* [ %117, %115 ], [ %125, %123 ]
  %120 = phi i8* [ %5, %115 ], [ %129, %123 ]
  %121 = phi i32 [ %10, %115 ], [ %124, %123 ]
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %140, label %123

123:                                              ; preds = %118
  %124 = add i32 %121, -1
  %125 = getelementptr inbounds i16, i16* %119, i64 1
  %126 = load i16, i16* %119, align 2
  %127 = zext i16 %126 to i32
  %128 = tail call i32 @u_foldCase_69(i32 %127, i32 0) #15
  %129 = getelementptr inbounds i8, i8* %120, i64 1
  %130 = load i8, i8* %120, align 1
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %131
  %133 = load i16, i16* %132, align 2
  %134 = zext i16 %133 to i32
  %135 = icmp eq i32 %128, %134
  br i1 %135, label %118, label %136

136:                                              ; preds = %123
  %137 = icmp eq i64 %116, %114
  br i1 %137, label %167, label %138

138:                                              ; preds = %136
  %139 = add nuw nsw i64 %116, 1
  br label %115

140:                                              ; preds = %118
  %141 = trunc i64 %116 to i32
  %142 = add i32 %141, %2
  br label %167

143:                                              ; preds = %108
  %144 = icmp eq i16* %111, %7
  br i1 %144, label %164, label %145

145:                                              ; preds = %143
  %146 = sub i32 %19, %10
  %147 = zext i32 %146 to i64
  br label %148

148:                                              ; preds = %156, %145
  %149 = phi i64 [ 0, %145 ], [ %161, %156 ]
  %150 = phi i16* [ %111, %145 ], [ %159, %156 ]
  %151 = tail call i32 @u_memcasecmp_69(i16* %150, i16* nonnull %7, i32 %10, i32 0) #15
  %152 = icmp eq i32 %151, 0
  %153 = trunc i64 %149 to i32
  br i1 %152, label %162, label %154

154:                                              ; preds = %148
  %155 = icmp eq i64 %149, %147
  br i1 %155, label %167, label %156

156:                                              ; preds = %154
  %157 = add i32 %153, 1
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds i16, i16* %111, i64 %158
  %160 = icmp eq i16* %159, %7
  %161 = add nuw nsw i64 %149, 1
  br i1 %160, label %164, label %148

162:                                              ; preds = %148
  %163 = trunc i64 %149 to i32
  br label %164

164:                                              ; preds = %156, %162, %143
  %165 = phi i32 [ 0, %143 ], [ %163, %162 ], [ %157, %156 ]
  %166 = add i32 %165, %2
  br label %167

167:                                              ; preds = %101, %63, %154, %136, %164, %140, %105, %74, %15, %17, %18, %3
  %168 = phi i32 [ -1, %3 ], [ %16, %15 ], [ -1, %17 ], [ -1, %18 ], [ %76, %74 ], [ %107, %105 ], [ %142, %140 ], [ %166, %164 ], [ -1, %136 ], [ -1, %154 ], [ -1, %63 ], [ -1, %101 ]
  ret i32 %168
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF10StringImpl21FindIgnoringASCIICaseERKNS_10StringViewEj(%"class.WTF::StringImpl"* nocapture readonly, %"class.WTF::StringView"* nocapture readonly dereferenceable(24), i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  %7 = bitcast i8* %5 to i16*
  br i1 %6, label %171, label %8, !prof !2

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %13, %2
  br i1 %11, label %15, label %17

15:                                               ; preds = %8
  %16 = select i1 %14, i32 %13, i32 %2
  br label %171

17:                                               ; preds = %8
  br i1 %14, label %171, label %18

18:                                               ; preds = %17
  %19 = sub i32 %13, %2
  %20 = icmp ult i32 %19, %10
  br i1 %20, label %171, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 1
  %31 = icmp ne i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %25, label %100, label %33

33:                                               ; preds = %21
  %34 = bitcast %"class.WTF::StringImpl"* %32 to i8*
  %35 = zext i32 %2 to i64
  %36 = getelementptr inbounds i8, i8* %34, i64 %35
  %37 = sub i32 %19, %10
  %38 = zext i32 %10 to i64
  %39 = zext i32 %37 to i64
  br i1 %31, label %40, label %68

40:                                               ; preds = %33, %61
  %41 = phi i64 [ %62, %61 ], [ 0, %33 ]
  %42 = phi i8* [ %64, %61 ], [ %36, %33 ]
  br label %45

43:                                               ; preds = %45
  %44 = icmp eq i64 %58, %38
  br i1 %44, label %65, label %45

45:                                               ; preds = %43, %40
  %46 = phi i64 [ 0, %40 ], [ %58, %43 ]
  %47 = getelementptr inbounds i8, i8* %42, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr inbounds i8, i8* %5, i64 %46
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %51, %56
  %58 = add nuw nsw i64 %46, 1
  br i1 %57, label %43, label %59

59:                                               ; preds = %45
  %60 = icmp eq i64 %41, %39
  br i1 %60, label %171, label %61

61:                                               ; preds = %59
  %62 = add nuw nsw i64 %41, 1
  %63 = and i64 %62, 4294967295
  %64 = getelementptr inbounds i8, i8* %36, i64 %63
  br label %40

65:                                               ; preds = %43
  %66 = trunc i64 %41 to i32
  %67 = add i32 %66, %2
  br label %171

68:                                               ; preds = %33, %93
  %69 = phi i64 [ %94, %93 ], [ 0, %33 ]
  %70 = phi i8* [ %96, %93 ], [ %36, %33 ]
  br label %73

71:                                               ; preds = %73
  %72 = icmp eq i64 %90, %38
  br i1 %72, label %97, label %73

73:                                               ; preds = %71, %68
  %74 = phi i64 [ 0, %68 ], [ %90, %71 ]
  %75 = getelementptr inbounds i8, i8* %70, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i64
  %78 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = getelementptr inbounds i16, i16* %7, i64 %74
  %82 = load i16, i16* %81, align 2
  %83 = add i16 %82, -65
  %84 = icmp ult i16 %83, 26
  %85 = zext i1 %84 to i16
  %86 = shl nuw nsw i16 %85, 5
  %87 = or i16 %86, %82
  %88 = zext i16 %87 to i32
  %89 = icmp eq i32 %80, %88
  %90 = add nuw nsw i64 %74, 1
  br i1 %89, label %71, label %91

91:                                               ; preds = %73
  %92 = icmp eq i64 %69, %39
  br i1 %92, label %171, label %93

93:                                               ; preds = %91
  %94 = add nuw nsw i64 %69, 1
  %95 = and i64 %94, 4294967295
  %96 = getelementptr inbounds i8, i8* %36, i64 %95
  br label %68

97:                                               ; preds = %71
  %98 = trunc i64 %69 to i32
  %99 = add i32 %98, %2
  br label %171

100:                                              ; preds = %21
  %101 = bitcast %"class.WTF::StringImpl"* %32 to i16*
  %102 = zext i32 %2 to i64
  %103 = getelementptr inbounds i16, i16* %101, i64 %102
  %104 = sub i32 %19, %10
  %105 = zext i32 %10 to i64
  %106 = zext i32 %104 to i64
  br i1 %31, label %107, label %139

107:                                              ; preds = %100, %132
  %108 = phi i64 [ %133, %132 ], [ 0, %100 ]
  %109 = phi i16* [ %135, %132 ], [ %103, %100 ]
  br label %112

110:                                              ; preds = %112
  %111 = icmp eq i64 %129, %105
  br i1 %111, label %136, label %112

112:                                              ; preds = %110, %107
  %113 = phi i64 [ 0, %107 ], [ %129, %110 ]
  %114 = getelementptr inbounds i16, i16* %109, i64 %113
  %115 = load i16, i16* %114, align 2
  %116 = add i16 %115, -65
  %117 = icmp ult i16 %116, 26
  %118 = zext i1 %117 to i16
  %119 = shl nuw nsw i16 %118, 5
  %120 = or i16 %119, %115
  %121 = zext i16 %120 to i32
  %122 = getelementptr inbounds i8, i8* %5, i64 %113
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = icmp eq i32 %121, %127
  %129 = add nuw nsw i64 %113, 1
  br i1 %128, label %110, label %130

130:                                              ; preds = %112
  %131 = icmp eq i64 %108, %106
  br i1 %131, label %171, label %132

132:                                              ; preds = %130
  %133 = add nuw nsw i64 %108, 1
  %134 = and i64 %133, 4294967295
  %135 = getelementptr inbounds i16, i16* %103, i64 %134
  br label %107

136:                                              ; preds = %110
  %137 = trunc i64 %108 to i32
  %138 = add i32 %137, %2
  br label %171

139:                                              ; preds = %100, %164
  %140 = phi i64 [ %165, %164 ], [ 0, %100 ]
  %141 = phi i16* [ %167, %164 ], [ %103, %100 ]
  br label %144

142:                                              ; preds = %144
  %143 = icmp eq i64 %161, %105
  br i1 %143, label %168, label %144

144:                                              ; preds = %142, %139
  %145 = phi i64 [ 0, %139 ], [ %161, %142 ]
  %146 = getelementptr inbounds i16, i16* %141, i64 %145
  %147 = load i16, i16* %146, align 2
  %148 = add i16 %147, -65
  %149 = icmp ult i16 %148, 26
  %150 = zext i1 %149 to i16
  %151 = shl nuw nsw i16 %150, 5
  %152 = or i16 %151, %147
  %153 = getelementptr inbounds i16, i16* %7, i64 %145
  %154 = load i16, i16* %153, align 2
  %155 = add i16 %154, -65
  %156 = icmp ult i16 %155, 26
  %157 = zext i1 %156 to i16
  %158 = shl nuw nsw i16 %157, 5
  %159 = or i16 %158, %154
  %160 = icmp eq i16 %152, %159
  %161 = add nuw nsw i64 %145, 1
  br i1 %160, label %142, label %162

162:                                              ; preds = %144
  %163 = icmp eq i64 %140, %106
  br i1 %163, label %171, label %164

164:                                              ; preds = %162
  %165 = add nuw nsw i64 %140, 1
  %166 = and i64 %165, 4294967295
  %167 = getelementptr inbounds i16, i16* %103, i64 %166
  br label %139

168:                                              ; preds = %142
  %169 = trunc i64 %140 to i32
  %170 = add i32 %169, %2
  br label %171

171:                                              ; preds = %91, %59, %162, %130, %168, %136, %97, %65, %15, %17, %18, %3
  %172 = phi i32 [ -1, %3 ], [ %16, %15 ], [ -1, %17 ], [ -1, %18 ], [ %67, %65 ], [ %99, %97 ], [ %138, %136 ], [ %170, %168 ], [ -1, %130 ], [ -1, %162 ], [ -1, %59 ], [ -1, %91 ]
  ret i32 %172
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN3WTF10StringImpl11ReverseFindEDsj(%"class.WTF::StringImpl"* nocapture readonly, i16 zeroext, i32) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %7, label %30, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.WTF::StringImpl"* %8 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp ugt i16 %1, 255
  br i1 %13, label %48, label %14

14:                                               ; preds = %9
  %15 = trunc i16 %1 to i8
  %16 = icmp eq i32 %12, 0
  br i1 %16, label %48, label %17

17:                                               ; preds = %14
  %18 = icmp ugt i32 %12, %2
  %19 = add i32 %12, -1
  %20 = select i1 %18, i32 %2, i32 %19
  br label %21

21:                                               ; preds = %27, %17
  %22 = phi i32 [ %20, %17 ], [ %28, %27 ]
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %10, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, %15
  br i1 %26, label %48, label %27

27:                                               ; preds = %21
  %28 = add i32 %22, -1
  %29 = icmp eq i32 %22, 0
  br i1 %29, label %48, label %21

30:                                               ; preds = %3
  %31 = bitcast %"class.WTF::StringImpl"* %8 to i16*
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %48, label %35

35:                                               ; preds = %30
  %36 = icmp ugt i32 %33, %2
  %37 = add i32 %33, -1
  %38 = select i1 %36, i32 %2, i32 %37
  br label %39

39:                                               ; preds = %45, %35
  %40 = phi i32 [ %38, %35 ], [ %46, %45 ]
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds i16, i16* %31, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = icmp eq i16 %43, %1
  br i1 %44, label %48, label %45

45:                                               ; preds = %39
  %46 = add i32 %40, -1
  %47 = icmp eq i32 %40, 0
  br i1 %47, label %48, label %39

48:                                               ; preds = %27, %21, %45, %39, %30, %14, %9
  %49 = phi i32 [ -1, %9 ], [ -1, %14 ], [ -1, %30 ], [ -1, %45 ], [ %40, %39 ], [ %22, %21 ], [ -1, %27 ]
  ret i32 %49
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF10StringImpl11ReverseFindERKNS_10StringViewEj(%"class.WTF::StringImpl"* nocapture readonly, %"class.WTF::StringView"* nocapture readonly dereferenceable(24), i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  %7 = bitcast i8* %5 to i16*
  br i1 %6, label %824, label %8, !prof !2

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  switch i32 %10, label %82 [
    i32 0, label %13
    i32 1, label %16
  ]

13:                                               ; preds = %8
  %14 = icmp ult i32 %12, %2
  %15 = select i1 %14, i32 %12, i32 %2
  br label %824

16:                                               ; preds = %8
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %20, label %53, label %22

22:                                               ; preds = %16
  %23 = bitcast %"class.WTF::StringImpl"* %21 to i8*
  %24 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load atomic i32, i32* %26 monotonic, align 4
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %22
  %31 = load i8, i8* %5, align 1
  %32 = zext i8 %31 to i16
  br label %36

33:                                               ; preds = %22
  %34 = load i16, i16* %7, align 2
  %35 = icmp ugt i16 %34, 255
  br i1 %35, label %824, label %36

36:                                               ; preds = %30, %33
  %37 = phi i16 [ %32, %30 ], [ %34, %33 ]
  %38 = trunc i16 %37 to i8
  %39 = icmp eq i32 %12, 0
  br i1 %39, label %824, label %40

40:                                               ; preds = %36
  %41 = icmp ugt i32 %12, %2
  %42 = add i32 %12, -1
  %43 = select i1 %41, i32 %2, i32 %42
  br label %44

44:                                               ; preds = %50, %40
  %45 = phi i32 [ %43, %40 ], [ %51, %50 ]
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %23, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, %38
  br i1 %49, label %824, label %50

50:                                               ; preds = %44
  %51 = add i32 %45, -1
  %52 = icmp eq i32 %45, 0
  br i1 %52, label %824, label %44

53:                                               ; preds = %16
  %54 = bitcast %"class.WTF::StringImpl"* %21 to i16*
  %55 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %53
  %62 = load i8, i8* %5, align 1
  %63 = zext i8 %62 to i16
  br label %66

64:                                               ; preds = %53
  %65 = load i16, i16* %7, align 2
  br label %66

66:                                               ; preds = %61, %64
  %67 = phi i16 [ %63, %61 ], [ %65, %64 ]
  %68 = icmp eq i32 %12, 0
  br i1 %68, label %824, label %69

69:                                               ; preds = %66
  %70 = icmp ugt i32 %12, %2
  %71 = add i32 %12, -1
  %72 = select i1 %70, i32 %2, i32 %71
  br label %73

73:                                               ; preds = %79, %69
  %74 = phi i32 [ %72, %69 ], [ %80, %79 ]
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i16, i16* %54, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = icmp eq i16 %77, %67
  br i1 %78, label %824, label %79

79:                                               ; preds = %73
  %80 = add i32 %74, -1
  %81 = icmp eq i32 %74, 0
  br i1 %81, label %824, label %73

82:                                               ; preds = %8
  %83 = icmp ult i32 %12, %10
  br i1 %83, label %824, label %84

84:                                               ; preds = %82
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = load atomic i32, i32* %85 monotonic, align 4
  %87 = and i32 %86, 1
  %88 = icmp eq i32 %87, 0
  %89 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %90 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, align 8
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load atomic i32, i32* %91 monotonic, align 4
  %93 = and i32 %92, 1
  %94 = icmp ne i32 %93, 0
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %88, label %459, label %96

96:                                               ; preds = %84
  %97 = bitcast %"class.WTF::StringImpl"* %95 to i8*
  %98 = sub i32 %12, %10
  %99 = icmp ult i32 %98, %2
  %100 = select i1 %99, i32 %98, i32 %2
  %101 = zext i32 %10 to i64
  %102 = icmp ult i32 %10, 8
  br i1 %94, label %192, label %103

103:                                              ; preds = %96
  br i1 %102, label %104, label %138

104:                                              ; preds = %178, %138, %103
  %105 = phi i64 [ 0, %138 ], [ 0, %103 ], [ %146, %178 ]
  %106 = phi i32 [ 0, %138 ], [ 0, %103 ], [ %190, %178 ]
  %107 = phi i32 [ 0, %138 ], [ 0, %103 ], [ %184, %178 ]
  %108 = xor i64 %105, -1
  %109 = add nsw i64 %108, %101
  %110 = and i64 %101, 3
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %131, label %112

112:                                              ; preds = %104, %112
  %113 = phi i64 [ %128, %112 ], [ %105, %104 ]
  %114 = phi i32 [ %127, %112 ], [ %106, %104 ]
  %115 = phi i32 [ %123, %112 ], [ %107, %104 ]
  %116 = phi i64 [ %129, %112 ], [ %110, %104 ]
  %117 = trunc i64 %113 to i32
  %118 = add i32 %100, %117
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds i8, i8* %97, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = add i32 %115, %122
  %124 = getelementptr inbounds i16, i16* %7, i64 %113
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = add i32 %114, %126
  %128 = add nuw nsw i64 %113, 1
  %129 = add i64 %116, -1
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %112, !llvm.loop !66

131:                                              ; preds = %112, %104
  %132 = phi i32 [ undef, %104 ], [ %123, %112 ]
  %133 = phi i32 [ undef, %104 ], [ %127, %112 ]
  %134 = phi i64 [ %105, %104 ], [ %128, %112 ]
  %135 = phi i32 [ %106, %104 ], [ %127, %112 ]
  %136 = phi i32 [ %107, %104 ], [ %123, %112 ]
  %137 = icmp ult i64 %109, 3
  br i1 %137, label %365, label %369

138:                                              ; preds = %103
  %139 = add nsw i64 %101, -1
  %140 = trunc i64 %139 to i32
  %141 = xor i32 %100, -1
  %142 = icmp ult i32 %141, %140
  %143 = icmp ugt i64 %139, 4294967295
  %144 = or i1 %142, %143
  br i1 %144, label %104, label %145

145:                                              ; preds = %138
  %146 = and i64 %101, 4294967288
  br label %147

147:                                              ; preds = %147, %145
  %148 = phi i64 [ 0, %145 ], [ %176, %147 ]
  %149 = phi <4 x i32> [ zeroinitializer, %145 ], [ %174, %147 ]
  %150 = phi <4 x i32> [ zeroinitializer, %145 ], [ %175, %147 ]
  %151 = phi <4 x i32> [ zeroinitializer, %145 ], [ %164, %147 ]
  %152 = phi <4 x i32> [ zeroinitializer, %145 ], [ %165, %147 ]
  %153 = trunc i64 %148 to i32
  %154 = add i32 %100, %153
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds i8, i8* %97, i64 %155
  %157 = bitcast i8* %156 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1
  %159 = getelementptr inbounds i8, i8* %156, i64 4
  %160 = bitcast i8* %159 to <4 x i8>*
  %161 = load <4 x i8>, <4 x i8>* %160, align 1
  %162 = zext <4 x i8> %158 to <4 x i32>
  %163 = zext <4 x i8> %161 to <4 x i32>
  %164 = add <4 x i32> %151, %162
  %165 = add <4 x i32> %152, %163
  %166 = getelementptr inbounds i16, i16* %7, i64 %148
  %167 = bitcast i16* %166 to <4 x i16>*
  %168 = load <4 x i16>, <4 x i16>* %167, align 2
  %169 = getelementptr inbounds i16, i16* %166, i64 4
  %170 = bitcast i16* %169 to <4 x i16>*
  %171 = load <4 x i16>, <4 x i16>* %170, align 2
  %172 = zext <4 x i16> %168 to <4 x i32>
  %173 = zext <4 x i16> %171 to <4 x i32>
  %174 = add <4 x i32> %149, %172
  %175 = add <4 x i32> %150, %173
  %176 = add i64 %148, 8
  %177 = icmp eq i64 %176, %146
  br i1 %177, label %178, label %147, !llvm.loop !67

178:                                              ; preds = %147
  %179 = add <4 x i32> %165, %164
  %180 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %181 = add <4 x i32> %179, %180
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %183 = add <4 x i32> %181, %182
  %184 = extractelement <4 x i32> %183, i32 0
  %185 = add <4 x i32> %175, %174
  %186 = shufflevector <4 x i32> %185, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %187 = add <4 x i32> %185, %186
  %188 = shufflevector <4 x i32> %187, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %189 = add <4 x i32> %187, %188
  %190 = extractelement <4 x i32> %189, i32 0
  %191 = icmp eq i64 %146, %101
  br i1 %191, label %365, label %104

192:                                              ; preds = %96
  br i1 %102, label %193, label %227

193:                                              ; preds = %267, %227, %192
  %194 = phi i64 [ 0, %227 ], [ 0, %192 ], [ %235, %267 ]
  %195 = phi i32 [ 0, %227 ], [ 0, %192 ], [ %279, %267 ]
  %196 = phi i32 [ 0, %227 ], [ 0, %192 ], [ %273, %267 ]
  %197 = xor i64 %194, -1
  %198 = add nsw i64 %197, %101
  %199 = and i64 %101, 3
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %220, label %201

201:                                              ; preds = %193, %201
  %202 = phi i64 [ %217, %201 ], [ %194, %193 ]
  %203 = phi i32 [ %216, %201 ], [ %195, %193 ]
  %204 = phi i32 [ %212, %201 ], [ %196, %193 ]
  %205 = phi i64 [ %218, %201 ], [ %199, %193 ]
  %206 = trunc i64 %202 to i32
  %207 = add i32 %100, %206
  %208 = zext i32 %207 to i64
  %209 = getelementptr inbounds i8, i8* %97, i64 %208
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i32
  %212 = add i32 %204, %211
  %213 = getelementptr inbounds i8, i8* %5, i64 %202
  %214 = load i8, i8* %213, align 1
  %215 = zext i8 %214 to i32
  %216 = add i32 %203, %215
  %217 = add nuw nsw i64 %202, 1
  %218 = add i64 %205, -1
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %201, !llvm.loop !68

220:                                              ; preds = %201, %193
  %221 = phi i32 [ undef, %193 ], [ %212, %201 ]
  %222 = phi i32 [ undef, %193 ], [ %216, %201 ]
  %223 = phi i64 [ %194, %193 ], [ %217, %201 ]
  %224 = phi i32 [ %195, %193 ], [ %216, %201 ]
  %225 = phi i32 [ %196, %193 ], [ %212, %201 ]
  %226 = icmp ult i64 %198, 3
  br i1 %226, label %281, label %285

227:                                              ; preds = %192
  %228 = add nsw i64 %101, -1
  %229 = trunc i64 %228 to i32
  %230 = xor i32 %100, -1
  %231 = icmp ult i32 %230, %229
  %232 = icmp ugt i64 %228, 4294967295
  %233 = or i1 %231, %232
  br i1 %233, label %193, label %234

234:                                              ; preds = %227
  %235 = and i64 %101, 4294967288
  br label %236

236:                                              ; preds = %236, %234
  %237 = phi i64 [ 0, %234 ], [ %265, %236 ]
  %238 = phi <4 x i32> [ zeroinitializer, %234 ], [ %263, %236 ]
  %239 = phi <4 x i32> [ zeroinitializer, %234 ], [ %264, %236 ]
  %240 = phi <4 x i32> [ zeroinitializer, %234 ], [ %253, %236 ]
  %241 = phi <4 x i32> [ zeroinitializer, %234 ], [ %254, %236 ]
  %242 = trunc i64 %237 to i32
  %243 = add i32 %100, %242
  %244 = zext i32 %243 to i64
  %245 = getelementptr inbounds i8, i8* %97, i64 %244
  %246 = bitcast i8* %245 to <4 x i8>*
  %247 = load <4 x i8>, <4 x i8>* %246, align 1
  %248 = getelementptr inbounds i8, i8* %245, i64 4
  %249 = bitcast i8* %248 to <4 x i8>*
  %250 = load <4 x i8>, <4 x i8>* %249, align 1
  %251 = zext <4 x i8> %247 to <4 x i32>
  %252 = zext <4 x i8> %250 to <4 x i32>
  %253 = add <4 x i32> %240, %251
  %254 = add <4 x i32> %241, %252
  %255 = getelementptr inbounds i8, i8* %5, i64 %237
  %256 = bitcast i8* %255 to <4 x i8>*
  %257 = load <4 x i8>, <4 x i8>* %256, align 1
  %258 = getelementptr inbounds i8, i8* %255, i64 4
  %259 = bitcast i8* %258 to <4 x i8>*
  %260 = load <4 x i8>, <4 x i8>* %259, align 1
  %261 = zext <4 x i8> %257 to <4 x i32>
  %262 = zext <4 x i8> %260 to <4 x i32>
  %263 = add <4 x i32> %238, %261
  %264 = add <4 x i32> %239, %262
  %265 = add i64 %237, 8
  %266 = icmp eq i64 %265, %235
  br i1 %266, label %267, label %236, !llvm.loop !69

267:                                              ; preds = %236
  %268 = add <4 x i32> %254, %253
  %269 = shufflevector <4 x i32> %268, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %270 = add <4 x i32> %268, %269
  %271 = shufflevector <4 x i32> %270, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %272 = add <4 x i32> %270, %271
  %273 = extractelement <4 x i32> %272, i32 0
  %274 = add <4 x i32> %264, %263
  %275 = shufflevector <4 x i32> %274, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %276 = add <4 x i32> %274, %275
  %277 = shufflevector <4 x i32> %276, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %278 = add <4 x i32> %276, %277
  %279 = extractelement <4 x i32> %278, i32 0
  %280 = icmp eq i64 %235, %101
  br i1 %280, label %281, label %193

281:                                              ; preds = %220, %285, %267
  %282 = phi i32 [ %273, %267 ], [ %221, %220 ], [ %331, %285 ]
  %283 = phi i32 [ %279, %267 ], [ %222, %220 ], [ %335, %285 ]
  %284 = zext i32 %100 to i64
  br label %338

285:                                              ; preds = %220, %285
  %286 = phi i64 [ %336, %285 ], [ %223, %220 ]
  %287 = phi i32 [ %335, %285 ], [ %224, %220 ]
  %288 = phi i32 [ %331, %285 ], [ %225, %220 ]
  %289 = trunc i64 %286 to i32
  %290 = add i32 %100, %289
  %291 = zext i32 %290 to i64
  %292 = getelementptr inbounds i8, i8* %97, i64 %291
  %293 = load i8, i8* %292, align 1
  %294 = zext i8 %293 to i32
  %295 = add i32 %288, %294
  %296 = getelementptr inbounds i8, i8* %5, i64 %286
  %297 = load i8, i8* %296, align 1
  %298 = zext i8 %297 to i32
  %299 = add i32 %287, %298
  %300 = add nuw nsw i64 %286, 1
  %301 = trunc i64 %300 to i32
  %302 = add i32 %100, %301
  %303 = zext i32 %302 to i64
  %304 = getelementptr inbounds i8, i8* %97, i64 %303
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i32
  %307 = add i32 %295, %306
  %308 = getelementptr inbounds i8, i8* %5, i64 %300
  %309 = load i8, i8* %308, align 1
  %310 = zext i8 %309 to i32
  %311 = add i32 %299, %310
  %312 = add nuw nsw i64 %286, 2
  %313 = trunc i64 %312 to i32
  %314 = add i32 %100, %313
  %315 = zext i32 %314 to i64
  %316 = getelementptr inbounds i8, i8* %97, i64 %315
  %317 = load i8, i8* %316, align 1
  %318 = zext i8 %317 to i32
  %319 = add i32 %307, %318
  %320 = getelementptr inbounds i8, i8* %5, i64 %312
  %321 = load i8, i8* %320, align 1
  %322 = zext i8 %321 to i32
  %323 = add i32 %311, %322
  %324 = add nuw nsw i64 %286, 3
  %325 = trunc i64 %324 to i32
  %326 = add i32 %100, %325
  %327 = zext i32 %326 to i64
  %328 = getelementptr inbounds i8, i8* %97, i64 %327
  %329 = load i8, i8* %328, align 1
  %330 = zext i8 %329 to i32
  %331 = add i32 %319, %330
  %332 = getelementptr inbounds i8, i8* %5, i64 %324
  %333 = load i8, i8* %332, align 1
  %334 = zext i8 %333 to i32
  %335 = add i32 %323, %334
  %336 = add nuw nsw i64 %286, 4
  %337 = icmp eq i64 %336, %101
  br i1 %337, label %281, label %285, !llvm.loop !70

338:                                              ; preds = %348, %281
  %339 = phi i64 [ %284, %281 ], [ %362, %348 ]
  %340 = phi i32 [ %282, %281 ], [ %361, %348 ]
  %341 = icmp eq i32 %340, %283
  br i1 %341, label %342, label %346

342:                                              ; preds = %338
  %343 = getelementptr inbounds i8, i8* %97, i64 %339
  %344 = tail call i32 @bcmp(i8* %343, i8* nonnull %5, i64 %101) #15
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %363, label %346

346:                                              ; preds = %342, %338
  %347 = icmp eq i64 %339, 0
  br i1 %347, label %824, label %348

348:                                              ; preds = %346
  %349 = trunc i64 %339 to i32
  %350 = add i32 %349, -1
  %351 = add i32 %350, %10
  %352 = zext i32 %351 to i64
  %353 = getelementptr inbounds i8, i8* %97, i64 %352
  %354 = load i8, i8* %353, align 1
  %355 = zext i8 %354 to i32
  %356 = sub i32 %340, %355
  %357 = zext i32 %350 to i64
  %358 = getelementptr inbounds i8, i8* %97, i64 %357
  %359 = load i8, i8* %358, align 1
  %360 = zext i8 %359 to i32
  %361 = add i32 %356, %360
  %362 = add nsw i64 %339, -1
  br label %338

363:                                              ; preds = %342
  %364 = trunc i64 %339 to i32
  br label %824

365:                                              ; preds = %131, %369, %178
  %366 = phi i32 [ %184, %178 ], [ %132, %131 ], [ %415, %369 ]
  %367 = phi i32 [ %190, %178 ], [ %133, %131 ], [ %419, %369 ]
  %368 = zext i32 %100 to i64
  br label %422

369:                                              ; preds = %131, %369
  %370 = phi i64 [ %420, %369 ], [ %134, %131 ]
  %371 = phi i32 [ %419, %369 ], [ %135, %131 ]
  %372 = phi i32 [ %415, %369 ], [ %136, %131 ]
  %373 = trunc i64 %370 to i32
  %374 = add i32 %100, %373
  %375 = zext i32 %374 to i64
  %376 = getelementptr inbounds i8, i8* %97, i64 %375
  %377 = load i8, i8* %376, align 1
  %378 = zext i8 %377 to i32
  %379 = add i32 %372, %378
  %380 = getelementptr inbounds i16, i16* %7, i64 %370
  %381 = load i16, i16* %380, align 2
  %382 = zext i16 %381 to i32
  %383 = add i32 %371, %382
  %384 = add nuw nsw i64 %370, 1
  %385 = trunc i64 %384 to i32
  %386 = add i32 %100, %385
  %387 = zext i32 %386 to i64
  %388 = getelementptr inbounds i8, i8* %97, i64 %387
  %389 = load i8, i8* %388, align 1
  %390 = zext i8 %389 to i32
  %391 = add i32 %379, %390
  %392 = getelementptr inbounds i16, i16* %7, i64 %384
  %393 = load i16, i16* %392, align 2
  %394 = zext i16 %393 to i32
  %395 = add i32 %383, %394
  %396 = add nuw nsw i64 %370, 2
  %397 = trunc i64 %396 to i32
  %398 = add i32 %100, %397
  %399 = zext i32 %398 to i64
  %400 = getelementptr inbounds i8, i8* %97, i64 %399
  %401 = load i8, i8* %400, align 1
  %402 = zext i8 %401 to i32
  %403 = add i32 %391, %402
  %404 = getelementptr inbounds i16, i16* %7, i64 %396
  %405 = load i16, i16* %404, align 2
  %406 = zext i16 %405 to i32
  %407 = add i32 %395, %406
  %408 = add nuw nsw i64 %370, 3
  %409 = trunc i64 %408 to i32
  %410 = add i32 %100, %409
  %411 = zext i32 %410 to i64
  %412 = getelementptr inbounds i8, i8* %97, i64 %411
  %413 = load i8, i8* %412, align 1
  %414 = zext i8 %413 to i32
  %415 = add i32 %403, %414
  %416 = getelementptr inbounds i16, i16* %7, i64 %408
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = add i32 %407, %418
  %420 = add nuw nsw i64 %370, 4
  %421 = icmp eq i64 %420, %101
  br i1 %421, label %365, label %369, !llvm.loop !71

422:                                              ; preds = %442, %365
  %423 = phi i64 [ %368, %365 ], [ %456, %442 ]
  %424 = phi i32 [ %366, %365 ], [ %455, %442 ]
  %425 = icmp eq i32 %424, %367
  br i1 %425, label %426, label %440

426:                                              ; preds = %422
  %427 = getelementptr inbounds i8, i8* %97, i64 %423
  br label %430

428:                                              ; preds = %430
  %429 = icmp eq i64 %439, %101
  br i1 %429, label %457, label %430

430:                                              ; preds = %426, %428
  %431 = phi i64 [ %439, %428 ], [ 0, %426 ]
  %432 = getelementptr inbounds i8, i8* %427, i64 %431
  %433 = load i8, i8* %432, align 1
  %434 = zext i8 %433 to i32
  %435 = getelementptr inbounds i16, i16* %7, i64 %431
  %436 = load i16, i16* %435, align 2
  %437 = zext i16 %436 to i32
  %438 = icmp eq i32 %434, %437
  %439 = add nuw nsw i64 %431, 1
  br i1 %438, label %428, label %440

440:                                              ; preds = %430, %422
  %441 = icmp eq i64 %423, 0
  br i1 %441, label %824, label %442

442:                                              ; preds = %440
  %443 = trunc i64 %423 to i32
  %444 = add i32 %443, -1
  %445 = add i32 %444, %10
  %446 = zext i32 %445 to i64
  %447 = getelementptr inbounds i8, i8* %97, i64 %446
  %448 = load i8, i8* %447, align 1
  %449 = zext i8 %448 to i32
  %450 = sub i32 %424, %449
  %451 = zext i32 %444 to i64
  %452 = getelementptr inbounds i8, i8* %97, i64 %451
  %453 = load i8, i8* %452, align 1
  %454 = zext i8 %453 to i32
  %455 = add i32 %450, %454
  %456 = add nsw i64 %423, -1
  br label %422

457:                                              ; preds = %428
  %458 = trunc i64 %423 to i32
  br label %824

459:                                              ; preds = %84
  %460 = bitcast %"class.WTF::StringImpl"* %95 to i16*
  %461 = sub i32 %12, %10
  %462 = icmp ult i32 %461, %2
  %463 = select i1 %462, i32 %461, i32 %2
  %464 = zext i32 %10 to i64
  %465 = icmp ult i32 %10, 8
  br i1 %94, label %555, label %466

466:                                              ; preds = %459
  br i1 %465, label %467, label %501

467:                                              ; preds = %541, %501, %466
  %468 = phi i64 [ 0, %501 ], [ 0, %466 ], [ %509, %541 ]
  %469 = phi i32 [ 0, %501 ], [ 0, %466 ], [ %553, %541 ]
  %470 = phi i32 [ 0, %501 ], [ 0, %466 ], [ %547, %541 ]
  %471 = xor i64 %468, -1
  %472 = add nsw i64 %471, %464
  %473 = and i64 %464, 3
  %474 = icmp eq i64 %473, 0
  br i1 %474, label %494, label %475

475:                                              ; preds = %467, %475
  %476 = phi i64 [ %491, %475 ], [ %468, %467 ]
  %477 = phi i32 [ %490, %475 ], [ %469, %467 ]
  %478 = phi i32 [ %486, %475 ], [ %470, %467 ]
  %479 = phi i64 [ %492, %475 ], [ %473, %467 ]
  %480 = trunc i64 %476 to i32
  %481 = add i32 %463, %480
  %482 = zext i32 %481 to i64
  %483 = getelementptr inbounds i16, i16* %460, i64 %482
  %484 = load i16, i16* %483, align 2
  %485 = zext i16 %484 to i32
  %486 = add i32 %478, %485
  %487 = getelementptr inbounds i16, i16* %7, i64 %476
  %488 = load i16, i16* %487, align 2
  %489 = zext i16 %488 to i32
  %490 = add i32 %477, %489
  %491 = add nuw nsw i64 %476, 1
  %492 = add i64 %479, -1
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %494, label %475, !llvm.loop !72

494:                                              ; preds = %475, %467
  %495 = phi i32 [ undef, %467 ], [ %486, %475 ]
  %496 = phi i32 [ undef, %467 ], [ %490, %475 ]
  %497 = phi i64 [ %468, %467 ], [ %491, %475 ]
  %498 = phi i32 [ %469, %467 ], [ %490, %475 ]
  %499 = phi i32 [ %470, %467 ], [ %486, %475 ]
  %500 = icmp ult i64 %472, 3
  br i1 %500, label %738, label %743

501:                                              ; preds = %466
  %502 = add nsw i64 %464, -1
  %503 = trunc i64 %502 to i32
  %504 = xor i32 %463, -1
  %505 = icmp ult i32 %504, %503
  %506 = icmp ugt i64 %502, 4294967295
  %507 = or i1 %505, %506
  br i1 %507, label %467, label %508

508:                                              ; preds = %501
  %509 = and i64 %464, 4294967288
  br label %510

510:                                              ; preds = %510, %508
  %511 = phi i64 [ 0, %508 ], [ %539, %510 ]
  %512 = phi <4 x i32> [ zeroinitializer, %508 ], [ %537, %510 ]
  %513 = phi <4 x i32> [ zeroinitializer, %508 ], [ %538, %510 ]
  %514 = phi <4 x i32> [ zeroinitializer, %508 ], [ %527, %510 ]
  %515 = phi <4 x i32> [ zeroinitializer, %508 ], [ %528, %510 ]
  %516 = trunc i64 %511 to i32
  %517 = add i32 %463, %516
  %518 = zext i32 %517 to i64
  %519 = getelementptr inbounds i16, i16* %460, i64 %518
  %520 = bitcast i16* %519 to <4 x i16>*
  %521 = load <4 x i16>, <4 x i16>* %520, align 2
  %522 = getelementptr inbounds i16, i16* %519, i64 4
  %523 = bitcast i16* %522 to <4 x i16>*
  %524 = load <4 x i16>, <4 x i16>* %523, align 2
  %525 = zext <4 x i16> %521 to <4 x i32>
  %526 = zext <4 x i16> %524 to <4 x i32>
  %527 = add <4 x i32> %514, %525
  %528 = add <4 x i32> %515, %526
  %529 = getelementptr inbounds i16, i16* %7, i64 %511
  %530 = bitcast i16* %529 to <4 x i16>*
  %531 = load <4 x i16>, <4 x i16>* %530, align 2
  %532 = getelementptr inbounds i16, i16* %529, i64 4
  %533 = bitcast i16* %532 to <4 x i16>*
  %534 = load <4 x i16>, <4 x i16>* %533, align 2
  %535 = zext <4 x i16> %531 to <4 x i32>
  %536 = zext <4 x i16> %534 to <4 x i32>
  %537 = add <4 x i32> %512, %535
  %538 = add <4 x i32> %513, %536
  %539 = add i64 %511, 8
  %540 = icmp eq i64 %539, %509
  br i1 %540, label %541, label %510, !llvm.loop !73

541:                                              ; preds = %510
  %542 = add <4 x i32> %528, %527
  %543 = shufflevector <4 x i32> %542, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %544 = add <4 x i32> %542, %543
  %545 = shufflevector <4 x i32> %544, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %546 = add <4 x i32> %544, %545
  %547 = extractelement <4 x i32> %546, i32 0
  %548 = add <4 x i32> %538, %537
  %549 = shufflevector <4 x i32> %548, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %550 = add <4 x i32> %548, %549
  %551 = shufflevector <4 x i32> %550, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %552 = add <4 x i32> %550, %551
  %553 = extractelement <4 x i32> %552, i32 0
  %554 = icmp eq i64 %509, %464
  br i1 %554, label %738, label %467

555:                                              ; preds = %459
  br i1 %465, label %556, label %590

556:                                              ; preds = %630, %590, %555
  %557 = phi i64 [ 0, %590 ], [ 0, %555 ], [ %598, %630 ]
  %558 = phi i32 [ 0, %590 ], [ 0, %555 ], [ %642, %630 ]
  %559 = phi i32 [ 0, %590 ], [ 0, %555 ], [ %636, %630 ]
  %560 = xor i64 %557, -1
  %561 = add nsw i64 %560, %464
  %562 = and i64 %464, 3
  %563 = icmp eq i64 %562, 0
  br i1 %563, label %583, label %564

564:                                              ; preds = %556, %564
  %565 = phi i64 [ %580, %564 ], [ %557, %556 ]
  %566 = phi i32 [ %579, %564 ], [ %558, %556 ]
  %567 = phi i32 [ %575, %564 ], [ %559, %556 ]
  %568 = phi i64 [ %581, %564 ], [ %562, %556 ]
  %569 = trunc i64 %565 to i32
  %570 = add i32 %463, %569
  %571 = zext i32 %570 to i64
  %572 = getelementptr inbounds i16, i16* %460, i64 %571
  %573 = load i16, i16* %572, align 2
  %574 = zext i16 %573 to i32
  %575 = add i32 %567, %574
  %576 = getelementptr inbounds i8, i8* %5, i64 %565
  %577 = load i8, i8* %576, align 1
  %578 = zext i8 %577 to i32
  %579 = add i32 %566, %578
  %580 = add nuw nsw i64 %565, 1
  %581 = add i64 %568, -1
  %582 = icmp eq i64 %581, 0
  br i1 %582, label %583, label %564, !llvm.loop !74

583:                                              ; preds = %564, %556
  %584 = phi i32 [ undef, %556 ], [ %575, %564 ]
  %585 = phi i32 [ undef, %556 ], [ %579, %564 ]
  %586 = phi i64 [ %557, %556 ], [ %580, %564 ]
  %587 = phi i32 [ %558, %556 ], [ %579, %564 ]
  %588 = phi i32 [ %559, %556 ], [ %575, %564 ]
  %589 = icmp ult i64 %561, 3
  br i1 %589, label %644, label %648

590:                                              ; preds = %555
  %591 = add nsw i64 %464, -1
  %592 = trunc i64 %591 to i32
  %593 = xor i32 %463, -1
  %594 = icmp ult i32 %593, %592
  %595 = icmp ugt i64 %591, 4294967295
  %596 = or i1 %594, %595
  br i1 %596, label %556, label %597

597:                                              ; preds = %590
  %598 = and i64 %464, 4294967288
  br label %599

599:                                              ; preds = %599, %597
  %600 = phi i64 [ 0, %597 ], [ %628, %599 ]
  %601 = phi <4 x i32> [ zeroinitializer, %597 ], [ %626, %599 ]
  %602 = phi <4 x i32> [ zeroinitializer, %597 ], [ %627, %599 ]
  %603 = phi <4 x i32> [ zeroinitializer, %597 ], [ %616, %599 ]
  %604 = phi <4 x i32> [ zeroinitializer, %597 ], [ %617, %599 ]
  %605 = trunc i64 %600 to i32
  %606 = add i32 %463, %605
  %607 = zext i32 %606 to i64
  %608 = getelementptr inbounds i16, i16* %460, i64 %607
  %609 = bitcast i16* %608 to <4 x i16>*
  %610 = load <4 x i16>, <4 x i16>* %609, align 2
  %611 = getelementptr inbounds i16, i16* %608, i64 4
  %612 = bitcast i16* %611 to <4 x i16>*
  %613 = load <4 x i16>, <4 x i16>* %612, align 2
  %614 = zext <4 x i16> %610 to <4 x i32>
  %615 = zext <4 x i16> %613 to <4 x i32>
  %616 = add <4 x i32> %603, %614
  %617 = add <4 x i32> %604, %615
  %618 = getelementptr inbounds i8, i8* %5, i64 %600
  %619 = bitcast i8* %618 to <4 x i8>*
  %620 = load <4 x i8>, <4 x i8>* %619, align 1
  %621 = getelementptr inbounds i8, i8* %618, i64 4
  %622 = bitcast i8* %621 to <4 x i8>*
  %623 = load <4 x i8>, <4 x i8>* %622, align 1
  %624 = zext <4 x i8> %620 to <4 x i32>
  %625 = zext <4 x i8> %623 to <4 x i32>
  %626 = add <4 x i32> %601, %624
  %627 = add <4 x i32> %602, %625
  %628 = add i64 %600, 8
  %629 = icmp eq i64 %628, %598
  br i1 %629, label %630, label %599, !llvm.loop !75

630:                                              ; preds = %599
  %631 = add <4 x i32> %617, %616
  %632 = shufflevector <4 x i32> %631, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %633 = add <4 x i32> %631, %632
  %634 = shufflevector <4 x i32> %633, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %635 = add <4 x i32> %633, %634
  %636 = extractelement <4 x i32> %635, i32 0
  %637 = add <4 x i32> %627, %626
  %638 = shufflevector <4 x i32> %637, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %639 = add <4 x i32> %637, %638
  %640 = shufflevector <4 x i32> %639, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %641 = add <4 x i32> %639, %640
  %642 = extractelement <4 x i32> %641, i32 0
  %643 = icmp eq i64 %598, %464
  br i1 %643, label %644, label %556

644:                                              ; preds = %583, %648, %630
  %645 = phi i32 [ %636, %630 ], [ %584, %583 ], [ %694, %648 ]
  %646 = phi i32 [ %642, %630 ], [ %585, %583 ], [ %698, %648 ]
  %647 = zext i32 %463 to i64
  br label %701

648:                                              ; preds = %583, %648
  %649 = phi i64 [ %699, %648 ], [ %586, %583 ]
  %650 = phi i32 [ %698, %648 ], [ %587, %583 ]
  %651 = phi i32 [ %694, %648 ], [ %588, %583 ]
  %652 = trunc i64 %649 to i32
  %653 = add i32 %463, %652
  %654 = zext i32 %653 to i64
  %655 = getelementptr inbounds i16, i16* %460, i64 %654
  %656 = load i16, i16* %655, align 2
  %657 = zext i16 %656 to i32
  %658 = add i32 %651, %657
  %659 = getelementptr inbounds i8, i8* %5, i64 %649
  %660 = load i8, i8* %659, align 1
  %661 = zext i8 %660 to i32
  %662 = add i32 %650, %661
  %663 = add nuw nsw i64 %649, 1
  %664 = trunc i64 %663 to i32
  %665 = add i32 %463, %664
  %666 = zext i32 %665 to i64
  %667 = getelementptr inbounds i16, i16* %460, i64 %666
  %668 = load i16, i16* %667, align 2
  %669 = zext i16 %668 to i32
  %670 = add i32 %658, %669
  %671 = getelementptr inbounds i8, i8* %5, i64 %663
  %672 = load i8, i8* %671, align 1
  %673 = zext i8 %672 to i32
  %674 = add i32 %662, %673
  %675 = add nuw nsw i64 %649, 2
  %676 = trunc i64 %675 to i32
  %677 = add i32 %463, %676
  %678 = zext i32 %677 to i64
  %679 = getelementptr inbounds i16, i16* %460, i64 %678
  %680 = load i16, i16* %679, align 2
  %681 = zext i16 %680 to i32
  %682 = add i32 %670, %681
  %683 = getelementptr inbounds i8, i8* %5, i64 %675
  %684 = load i8, i8* %683, align 1
  %685 = zext i8 %684 to i32
  %686 = add i32 %674, %685
  %687 = add nuw nsw i64 %649, 3
  %688 = trunc i64 %687 to i32
  %689 = add i32 %463, %688
  %690 = zext i32 %689 to i64
  %691 = getelementptr inbounds i16, i16* %460, i64 %690
  %692 = load i16, i16* %691, align 2
  %693 = zext i16 %692 to i32
  %694 = add i32 %682, %693
  %695 = getelementptr inbounds i8, i8* %5, i64 %687
  %696 = load i8, i8* %695, align 1
  %697 = zext i8 %696 to i32
  %698 = add i32 %686, %697
  %699 = add nuw nsw i64 %649, 4
  %700 = icmp eq i64 %699, %464
  br i1 %700, label %644, label %648, !llvm.loop !76

701:                                              ; preds = %721, %644
  %702 = phi i64 [ %647, %644 ], [ %735, %721 ]
  %703 = phi i32 [ %645, %644 ], [ %734, %721 ]
  %704 = icmp eq i32 %703, %646
  br i1 %704, label %705, label %719

705:                                              ; preds = %701
  %706 = getelementptr inbounds i16, i16* %460, i64 %702
  br label %709

707:                                              ; preds = %709
  %708 = icmp eq i64 %718, %464
  br i1 %708, label %736, label %709

709:                                              ; preds = %705, %707
  %710 = phi i64 [ %718, %707 ], [ 0, %705 ]
  %711 = getelementptr inbounds i8, i8* %5, i64 %710
  %712 = load i8, i8* %711, align 1
  %713 = zext i8 %712 to i32
  %714 = getelementptr inbounds i16, i16* %706, i64 %710
  %715 = load i16, i16* %714, align 2
  %716 = zext i16 %715 to i32
  %717 = icmp eq i32 %713, %716
  %718 = add nuw nsw i64 %710, 1
  br i1 %717, label %707, label %719

719:                                              ; preds = %709, %701
  %720 = icmp eq i64 %702, 0
  br i1 %720, label %824, label %721

721:                                              ; preds = %719
  %722 = trunc i64 %702 to i32
  %723 = add i32 %722, -1
  %724 = add i32 %723, %10
  %725 = zext i32 %724 to i64
  %726 = getelementptr inbounds i16, i16* %460, i64 %725
  %727 = load i16, i16* %726, align 2
  %728 = zext i16 %727 to i32
  %729 = sub i32 %703, %728
  %730 = zext i32 %723 to i64
  %731 = getelementptr inbounds i16, i16* %460, i64 %730
  %732 = load i16, i16* %731, align 2
  %733 = zext i16 %732 to i32
  %734 = add i32 %729, %733
  %735 = add nsw i64 %702, -1
  br label %701

736:                                              ; preds = %707
  %737 = trunc i64 %702 to i32
  br label %824

738:                                              ; preds = %494, %743, %541
  %739 = phi i32 [ %547, %541 ], [ %495, %494 ], [ %789, %743 ]
  %740 = phi i32 [ %553, %541 ], [ %496, %494 ], [ %793, %743 ]
  %741 = shl nuw nsw i64 %464, 1
  %742 = zext i32 %463 to i64
  br label %796

743:                                              ; preds = %494, %743
  %744 = phi i64 [ %794, %743 ], [ %497, %494 ]
  %745 = phi i32 [ %793, %743 ], [ %498, %494 ]
  %746 = phi i32 [ %789, %743 ], [ %499, %494 ]
  %747 = trunc i64 %744 to i32
  %748 = add i32 %463, %747
  %749 = zext i32 %748 to i64
  %750 = getelementptr inbounds i16, i16* %460, i64 %749
  %751 = load i16, i16* %750, align 2
  %752 = zext i16 %751 to i32
  %753 = add i32 %746, %752
  %754 = getelementptr inbounds i16, i16* %7, i64 %744
  %755 = load i16, i16* %754, align 2
  %756 = zext i16 %755 to i32
  %757 = add i32 %745, %756
  %758 = add nuw nsw i64 %744, 1
  %759 = trunc i64 %758 to i32
  %760 = add i32 %463, %759
  %761 = zext i32 %760 to i64
  %762 = getelementptr inbounds i16, i16* %460, i64 %761
  %763 = load i16, i16* %762, align 2
  %764 = zext i16 %763 to i32
  %765 = add i32 %753, %764
  %766 = getelementptr inbounds i16, i16* %7, i64 %758
  %767 = load i16, i16* %766, align 2
  %768 = zext i16 %767 to i32
  %769 = add i32 %757, %768
  %770 = add nuw nsw i64 %744, 2
  %771 = trunc i64 %770 to i32
  %772 = add i32 %463, %771
  %773 = zext i32 %772 to i64
  %774 = getelementptr inbounds i16, i16* %460, i64 %773
  %775 = load i16, i16* %774, align 2
  %776 = zext i16 %775 to i32
  %777 = add i32 %765, %776
  %778 = getelementptr inbounds i16, i16* %7, i64 %770
  %779 = load i16, i16* %778, align 2
  %780 = zext i16 %779 to i32
  %781 = add i32 %769, %780
  %782 = add nuw nsw i64 %744, 3
  %783 = trunc i64 %782 to i32
  %784 = add i32 %463, %783
  %785 = zext i32 %784 to i64
  %786 = getelementptr inbounds i16, i16* %460, i64 %785
  %787 = load i16, i16* %786, align 2
  %788 = zext i16 %787 to i32
  %789 = add i32 %777, %788
  %790 = getelementptr inbounds i16, i16* %7, i64 %782
  %791 = load i16, i16* %790, align 2
  %792 = zext i16 %791 to i32
  %793 = add i32 %781, %792
  %794 = add nuw nsw i64 %744, 4
  %795 = icmp eq i64 %794, %464
  br i1 %795, label %738, label %743, !llvm.loop !77

796:                                              ; preds = %807, %738
  %797 = phi i64 [ %742, %738 ], [ %821, %807 ]
  %798 = phi i32 [ %739, %738 ], [ %820, %807 ]
  %799 = icmp eq i32 %798, %740
  br i1 %799, label %800, label %805

800:                                              ; preds = %796
  %801 = getelementptr inbounds i16, i16* %460, i64 %797
  %802 = bitcast i16* %801 to i8*
  %803 = tail call i32 @bcmp(i8* %802, i8* nonnull %5, i64 %741) #15
  %804 = icmp eq i32 %803, 0
  br i1 %804, label %822, label %805

805:                                              ; preds = %800, %796
  %806 = icmp eq i64 %797, 0
  br i1 %806, label %824, label %807

807:                                              ; preds = %805
  %808 = trunc i64 %797 to i32
  %809 = add i32 %808, -1
  %810 = add i32 %809, %10
  %811 = zext i32 %810 to i64
  %812 = getelementptr inbounds i16, i16* %460, i64 %811
  %813 = load i16, i16* %812, align 2
  %814 = zext i16 %813 to i32
  %815 = sub i32 %798, %814
  %816 = zext i32 %809 to i64
  %817 = getelementptr inbounds i16, i16* %460, i64 %816
  %818 = load i16, i16* %817, align 2
  %819 = zext i16 %818 to i32
  %820 = add i32 %815, %819
  %821 = add nsw i64 %797, -1
  br label %796

822:                                              ; preds = %800
  %823 = trunc i64 %797 to i32
  br label %824

824:                                              ; preds = %44, %50, %73, %79, %440, %346, %805, %719, %13, %82, %33, %36, %66, %363, %457, %736, %822, %3
  %825 = phi i32 [ -1, %3 ], [ %15, %13 ], [ -1, %82 ], [ -1, %33 ], [ -1, %36 ], [ -1, %66 ], [ %364, %363 ], [ %458, %457 ], [ %737, %736 ], [ %823, %822 ], [ -1, %719 ], [ -1, %805 ], [ -1, %346 ], [ -1, %440 ], [ -1, %79 ], [ %74, %73 ], [ %45, %44 ], [ -1, %50 ]
  ret i32 %825
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3WTF10StringImpl10StartsWithEDs(%"class.WTF::StringImpl"* nocapture readonly, i16 zeroext) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %22, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %10, label %16, label %12

12:                                               ; preds = %6
  %13 = bitcast %"class.WTF::StringImpl"* %11 to i8*
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i16
  br label %19

16:                                               ; preds = %6
  %17 = bitcast %"class.WTF::StringImpl"* %11 to i16*
  %18 = load i16, i16* %17, align 2
  br label %19

19:                                               ; preds = %12, %16
  %20 = phi i16 [ %15, %12 ], [ %18, %16 ]
  %21 = icmp eq i16 %20, %1
  br label %22

22:                                               ; preds = %2, %19
  %23 = phi i1 [ false, %2 ], [ %21, %19 ]
  ret i1 %23
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3WTF10StringImpl10StartsWithERKNS_10StringViewE(%"class.WTF::StringImpl"* nocapture readonly, %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #9 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp ugt i32 %4, %6
  br i1 %7, label %72, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp ne i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %12, label %46, label %20

20:                                               ; preds = %8
  %21 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  %22 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  br i1 %18, label %23, label %28

23:                                               ; preds = %20
  %24 = load i8*, i8** %22, align 8
  %25 = zext i32 %4 to i64
  %26 = tail call i32 @bcmp(i8* %21, i8* %24, i64 %25) #15
  %27 = icmp eq i32 %26, 0
  br label %72

28:                                               ; preds = %20
  %29 = bitcast i8** %22 to i16**
  %30 = load i16*, i16** %29, align 8
  %31 = icmp eq i32 %4, 0
  br i1 %31, label %72, label %32

32:                                               ; preds = %28
  %33 = zext i32 %4 to i64
  br label %36

34:                                               ; preds = %36
  %35 = icmp eq i64 %45, %33
  br i1 %35, label %72, label %36

36:                                               ; preds = %34, %32
  %37 = phi i64 [ 0, %32 ], [ %45, %34 ]
  %38 = getelementptr inbounds i8, i8* %21, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds i16, i16* %30, i64 %37
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = icmp eq i32 %40, %43
  %45 = add nuw nsw i64 %37, 1
  br i1 %44, label %34, label %72

46:                                               ; preds = %8
  %47 = bitcast %"class.WTF::StringImpl"* %19 to i16*
  %48 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %49 = load i8*, i8** %48, align 8
  br i1 %18, label %50, label %66

50:                                               ; preds = %46
  %51 = icmp eq i32 %4, 0
  br i1 %51, label %72, label %52

52:                                               ; preds = %50
  %53 = zext i32 %4 to i64
  br label %56

54:                                               ; preds = %56
  %55 = icmp eq i64 %65, %53
  br i1 %55, label %72, label %56

56:                                               ; preds = %54, %52
  %57 = phi i64 [ 0, %52 ], [ %65, %54 ]
  %58 = getelementptr inbounds i8, i8* %49, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds i16, i16* %47, i64 %57
  %62 = load i16, i16* %61, align 2
  %63 = zext i16 %62 to i32
  %64 = icmp eq i32 %60, %63
  %65 = add nuw nsw i64 %57, 1
  br i1 %64, label %54, label %72

66:                                               ; preds = %46
  %67 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  %68 = zext i32 %4 to i64
  %69 = shl nuw nsw i64 %68, 1
  %70 = tail call i32 @bcmp(i8* %67, i8* %49, i64 %69) #15
  %71 = icmp eq i32 %70, 0
  br label %72

72:                                               ; preds = %36, %34, %56, %54, %50, %28, %2, %66, %23
  %73 = phi i1 [ %27, %23 ], [ %71, %66 ], [ false, %2 ], [ true, %28 ], [ true, %50 ], [ true, %54 ], [ false, %56 ], [ false, %36 ], [ true, %34 ]
  ret i1 %73
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3WTF10StringImpl22StartsWithIgnoringCaseERKNS_10StringViewE(%"class.WTF::StringImpl"*, %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp ugt i32 %4, %6
  br i1 %7, label %95, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp ne i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %12, label %65, label %20

20:                                               ; preds = %8
  %21 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  %22 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  br i1 %18, label %23, label %44

23:                                               ; preds = %20
  %24 = load i8*, i8** %22, align 8
  %25 = icmp eq i8* %24, %21
  br i1 %25, label %95, label %26

26:                                               ; preds = %23, %31
  %27 = phi i8* [ %33, %31 ], [ %21, %23 ]
  %28 = phi i8* [ %38, %31 ], [ %24, %23 ]
  %29 = phi i32 [ %32, %31 ], [ %4, %23 ]
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %95, label %31

31:                                               ; preds = %26
  %32 = add i32 %29, -1
  %33 = getelementptr inbounds i8, i8* %27, i64 1
  %34 = load i8, i8* %27, align 1
  %35 = zext i8 %34 to i64
  %36 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = getelementptr inbounds i8, i8* %28, i64 1
  %39 = load i8, i8* %28, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %37, %42
  br i1 %43, label %26, label %95

44:                                               ; preds = %20
  %45 = bitcast i8** %22 to i16**
  %46 = load i16*, i16** %45, align 8
  br label %47

47:                                               ; preds = %52, %44
  %48 = phi i16* [ %46, %44 ], [ %54, %52 ]
  %49 = phi i8* [ %21, %44 ], [ %58, %52 ]
  %50 = phi i32 [ %4, %44 ], [ %53, %52 ]
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %95, label %52

52:                                               ; preds = %47
  %53 = add i32 %50, -1
  %54 = getelementptr inbounds i16, i16* %48, i64 1
  %55 = load i16, i16* %48, align 2
  %56 = zext i16 %55 to i32
  %57 = tail call i32 @u_foldCase_69(i32 %56, i32 0) #15
  %58 = getelementptr inbounds i8, i8* %49, i64 1
  %59 = load i8, i8* %49, align 1
  %60 = zext i8 %59 to i64
  %61 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = zext i16 %62 to i32
  %64 = icmp eq i32 %57, %63
  br i1 %64, label %47, label %95

65:                                               ; preds = %8
  %66 = bitcast %"class.WTF::StringImpl"* %19 to i16*
  %67 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  br i1 %18, label %68, label %88

68:                                               ; preds = %65
  %69 = load i8*, i8** %67, align 8
  br label %70

70:                                               ; preds = %75, %68
  %71 = phi i16* [ %66, %68 ], [ %77, %75 ]
  %72 = phi i8* [ %69, %68 ], [ %81, %75 ]
  %73 = phi i32 [ %4, %68 ], [ %76, %75 ]
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %95, label %75

75:                                               ; preds = %70
  %76 = add i32 %73, -1
  %77 = getelementptr inbounds i16, i16* %71, i64 1
  %78 = load i16, i16* %71, align 2
  %79 = zext i16 %78 to i32
  %80 = tail call i32 @u_foldCase_69(i32 %79, i32 0) #15
  %81 = getelementptr inbounds i8, i8* %72, i64 1
  %82 = load i8, i8* %72, align 1
  %83 = zext i8 %82 to i64
  %84 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %83
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = icmp eq i32 %80, %86
  br i1 %87, label %70, label %95

88:                                               ; preds = %65
  %89 = bitcast i8** %67 to i16**
  %90 = load i16*, i16** %89, align 8
  %91 = icmp eq i16* %90, %66
  br i1 %91, label %95, label %92

92:                                               ; preds = %88
  %93 = tail call i32 @u_memcasecmp_69(i16* %66, i16* %90, i32 %4, i32 0) #15
  %94 = icmp eq i32 %93, 0
  br label %95

95:                                               ; preds = %52, %47, %31, %26, %75, %70, %92, %88, %23, %2
  %96 = phi i1 [ false, %2 ], [ true, %23 ], [ %94, %92 ], [ true, %88 ], [ true, %70 ], [ false, %75 ], [ false, %31 ], [ true, %26 ], [ true, %47 ], [ false, %52 ]
  ret i1 %96
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3WTF10StringImpl27StartsWithIgnoringASCIICaseERKNS_10StringViewE(%"class.WTF::StringImpl"* nocapture readonly, %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp ugt i32 %4, %6
  br i1 %7, label %124, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp ne i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %12, label %70, label %20

20:                                               ; preds = %8
  %21 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  %22 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  br i1 %18, label %23, label %44

23:                                               ; preds = %20
  %24 = load i8*, i8** %22, align 8
  %25 = icmp eq i32 %4, 0
  br i1 %25, label %124, label %26

26:                                               ; preds = %23
  %27 = zext i32 %4 to i64
  br label %30

28:                                               ; preds = %30
  %29 = icmp eq i64 %43, %27
  br i1 %29, label %124, label %30

30:                                               ; preds = %28, %26
  %31 = phi i64 [ 0, %26 ], [ %43, %28 ]
  %32 = getelementptr inbounds i8, i8* %21, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds i8, i8* %24, i64 %31
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i64
  %40 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %36, %41
  %43 = add nuw nsw i64 %31, 1
  br i1 %42, label %28, label %124

44:                                               ; preds = %20
  %45 = bitcast i8** %22 to i16**
  %46 = load i16*, i16** %45, align 8
  %47 = icmp eq i32 %4, 0
  br i1 %47, label %124, label %48

48:                                               ; preds = %44
  %49 = zext i32 %4 to i64
  br label %52

50:                                               ; preds = %52
  %51 = icmp eq i64 %69, %49
  br i1 %51, label %124, label %52

52:                                               ; preds = %50, %48
  %53 = phi i64 [ 0, %48 ], [ %69, %50 ]
  %54 = getelementptr inbounds i8, i8* %21, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = getelementptr inbounds i16, i16* %46, i64 %53
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, -65
  %63 = icmp ult i16 %62, 26
  %64 = zext i1 %63 to i16
  %65 = shl nuw nsw i16 %64, 5
  %66 = or i16 %65, %61
  %67 = zext i16 %66 to i32
  %68 = icmp eq i32 %59, %67
  %69 = add nuw nsw i64 %53, 1
  br i1 %68, label %50, label %124

70:                                               ; preds = %8
  %71 = bitcast %"class.WTF::StringImpl"* %19 to i16*
  %72 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  br i1 %18, label %73, label %98

73:                                               ; preds = %70
  %74 = load i8*, i8** %72, align 8
  %75 = icmp eq i32 %4, 0
  br i1 %75, label %124, label %76

76:                                               ; preds = %73
  %77 = zext i32 %4 to i64
  br label %80

78:                                               ; preds = %80
  %79 = icmp eq i64 %97, %77
  br i1 %79, label %124, label %80

80:                                               ; preds = %78, %76
  %81 = phi i64 [ 0, %76 ], [ %97, %78 ]
  %82 = getelementptr inbounds i16, i16* %71, i64 %81
  %83 = load i16, i16* %82, align 2
  %84 = add i16 %83, -65
  %85 = icmp ult i16 %84, 26
  %86 = zext i1 %85 to i16
  %87 = shl nuw nsw i16 %86, 5
  %88 = or i16 %87, %83
  %89 = zext i16 %88 to i32
  %90 = getelementptr inbounds i8, i8* %74, i64 %81
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i64
  %93 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = icmp eq i32 %89, %95
  %97 = add nuw nsw i64 %81, 1
  br i1 %96, label %78, label %124

98:                                               ; preds = %70
  %99 = bitcast i8** %72 to i16**
  %100 = load i16*, i16** %99, align 8
  %101 = icmp eq i32 %4, 0
  br i1 %101, label %124, label %102

102:                                              ; preds = %98
  %103 = zext i32 %4 to i64
  br label %106

104:                                              ; preds = %106
  %105 = icmp eq i64 %123, %103
  br i1 %105, label %124, label %106

106:                                              ; preds = %104, %102
  %107 = phi i64 [ 0, %102 ], [ %123, %104 ]
  %108 = getelementptr inbounds i16, i16* %71, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = add i16 %109, -65
  %111 = icmp ult i16 %110, 26
  %112 = zext i1 %111 to i16
  %113 = shl nuw nsw i16 %112, 5
  %114 = or i16 %113, %109
  %115 = getelementptr inbounds i16, i16* %100, i64 %107
  %116 = load i16, i16* %115, align 2
  %117 = add i16 %116, -65
  %118 = icmp ult i16 %117, 26
  %119 = zext i1 %118 to i16
  %120 = shl nuw nsw i16 %119, 5
  %121 = or i16 %120, %116
  %122 = icmp eq i16 %114, %121
  %123 = add nuw nsw i64 %107, 1
  br i1 %122, label %104, label %124

124:                                              ; preds = %52, %50, %30, %28, %106, %104, %80, %78, %98, %73, %44, %23, %2
  %125 = phi i1 [ false, %2 ], [ true, %23 ], [ true, %44 ], [ true, %73 ], [ true, %98 ], [ false, %80 ], [ true, %78 ], [ false, %106 ], [ true, %104 ], [ false, %30 ], [ true, %28 ], [ false, %52 ], [ true, %50 ]
  ret i1 %125
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3WTF10StringImpl8EndsWithEDs(%"class.WTF::StringImpl"* nocapture readonly, i16 zeroext) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %27, label %6

6:                                                ; preds = %2
  %7 = add i32 %4, -1
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %11, label %19, label %13

13:                                               ; preds = %6
  %14 = bitcast %"class.WTF::StringImpl"* %12 to i8*
  %15 = zext i32 %7 to i64
  %16 = getelementptr inbounds i8, i8* %14, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  br label %24

19:                                               ; preds = %6
  %20 = bitcast %"class.WTF::StringImpl"* %12 to i16*
  %21 = zext i32 %7 to i64
  %22 = getelementptr inbounds i16, i16* %20, i64 %21
  %23 = load i16, i16* %22, align 2
  br label %24

24:                                               ; preds = %13, %19
  %25 = phi i16 [ %18, %13 ], [ %23, %19 ]
  %26 = icmp eq i16 %25, %1
  br label %27

27:                                               ; preds = %2, %24
  %28 = phi i1 [ false, %2 ], [ %26, %24 ]
  ret i1 %28
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3WTF10StringImpl8EndsWithERKNS_10StringViewE(%"class.WTF::StringImpl"* nocapture readonly, %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #9 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp ult i32 %6, %4
  br i1 %7, label %77, label %8

8:                                                ; preds = %2
  %9 = sub i32 %6, %4
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 1
  %19 = icmp ne i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %13, label %49, label %21

21:                                               ; preds = %8
  %22 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  %23 = zext i32 %9 to i64
  %24 = getelementptr inbounds i8, i8* %22, i64 %23
  %25 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  br i1 %19, label %26, label %31

26:                                               ; preds = %21
  %27 = load i8*, i8** %25, align 8
  %28 = zext i32 %4 to i64
  %29 = tail call i32 @bcmp(i8* %24, i8* %27, i64 %28) #15
  %30 = icmp eq i32 %29, 0
  br label %77

31:                                               ; preds = %21
  %32 = bitcast i8** %25 to i16**
  %33 = load i16*, i16** %32, align 8
  %34 = icmp eq i32 %4, 0
  br i1 %34, label %77, label %35

35:                                               ; preds = %31
  %36 = zext i32 %4 to i64
  br label %39

37:                                               ; preds = %39
  %38 = icmp eq i64 %48, %36
  br i1 %38, label %77, label %39

39:                                               ; preds = %37, %35
  %40 = phi i64 [ 0, %35 ], [ %48, %37 ]
  %41 = getelementptr inbounds i8, i8* %24, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds i16, i16* %33, i64 %40
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = icmp eq i32 %43, %46
  %48 = add nuw nsw i64 %40, 1
  br i1 %47, label %37, label %77

49:                                               ; preds = %8
  %50 = bitcast %"class.WTF::StringImpl"* %20 to i16*
  %51 = zext i32 %9 to i64
  %52 = getelementptr inbounds i16, i16* %50, i64 %51
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %54 = load i8*, i8** %53, align 8
  br i1 %19, label %55, label %71

55:                                               ; preds = %49
  %56 = icmp eq i32 %4, 0
  br i1 %56, label %77, label %57

57:                                               ; preds = %55
  %58 = zext i32 %4 to i64
  br label %61

59:                                               ; preds = %61
  %60 = icmp eq i64 %70, %58
  br i1 %60, label %77, label %61

61:                                               ; preds = %59, %57
  %62 = phi i64 [ 0, %57 ], [ %70, %59 ]
  %63 = getelementptr inbounds i8, i8* %54, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds i16, i16* %52, i64 %62
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = icmp eq i32 %65, %68
  %70 = add nuw nsw i64 %62, 1
  br i1 %69, label %59, label %77

71:                                               ; preds = %49
  %72 = bitcast i16* %52 to i8*
  %73 = zext i32 %4 to i64
  %74 = shl nuw nsw i64 %73, 1
  %75 = tail call i32 @bcmp(i8* %72, i8* %54, i64 %74) #15
  %76 = icmp eq i32 %75, 0
  br label %77

77:                                               ; preds = %39, %37, %61, %59, %55, %31, %26, %71, %2
  %78 = phi i1 [ false, %2 ], [ %30, %26 ], [ %76, %71 ], [ true, %31 ], [ true, %55 ], [ true, %59 ], [ false, %61 ], [ false, %39 ], [ true, %37 ]
  ret i1 %78
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3WTF10StringImpl20EndsWithIgnoringCaseERKNS_10StringViewE(%"class.WTF::StringImpl"*, %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp ult i32 %6, %4
  br i1 %7, label %100, label %8

8:                                                ; preds = %2
  %9 = sub i32 %6, %4
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 1
  %19 = icmp ne i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %13, label %68, label %21

21:                                               ; preds = %8
  %22 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  %23 = zext i32 %9 to i64
  %24 = getelementptr inbounds i8, i8* %22, i64 %23
  %25 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  br i1 %19, label %26, label %47

26:                                               ; preds = %21
  %27 = load i8*, i8** %25, align 8
  %28 = icmp eq i8* %24, %27
  br i1 %28, label %100, label %29

29:                                               ; preds = %26, %34
  %30 = phi i8* [ %36, %34 ], [ %24, %26 ]
  %31 = phi i8* [ %41, %34 ], [ %27, %26 ]
  %32 = phi i32 [ %35, %34 ], [ %4, %26 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %100, label %34

34:                                               ; preds = %29
  %35 = add i32 %32, -1
  %36 = getelementptr inbounds i8, i8* %30, i64 1
  %37 = load i8, i8* %30, align 1
  %38 = zext i8 %37 to i64
  %39 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = getelementptr inbounds i8, i8* %31, i64 1
  %42 = load i8, i8* %31, align 1
  %43 = zext i8 %42 to i64
  %44 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %43
  %45 = load i16, i16* %44, align 2
  %46 = icmp eq i16 %40, %45
  br i1 %46, label %29, label %100

47:                                               ; preds = %21
  %48 = bitcast i8** %25 to i16**
  %49 = load i16*, i16** %48, align 8
  br label %50

50:                                               ; preds = %55, %47
  %51 = phi i16* [ %49, %47 ], [ %57, %55 ]
  %52 = phi i8* [ %24, %47 ], [ %61, %55 ]
  %53 = phi i32 [ %4, %47 ], [ %56, %55 ]
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %100, label %55

55:                                               ; preds = %50
  %56 = add i32 %53, -1
  %57 = getelementptr inbounds i16, i16* %51, i64 1
  %58 = load i16, i16* %51, align 2
  %59 = zext i16 %58 to i32
  %60 = tail call i32 @u_foldCase_69(i32 %59, i32 0) #15
  %61 = getelementptr inbounds i8, i8* %52, i64 1
  %62 = load i8, i8* %52, align 1
  %63 = zext i8 %62 to i64
  %64 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = icmp eq i32 %60, %66
  br i1 %67, label %50, label %100

68:                                               ; preds = %8
  %69 = bitcast %"class.WTF::StringImpl"* %20 to i16*
  %70 = zext i32 %9 to i64
  %71 = getelementptr inbounds i16, i16* %69, i64 %70
  %72 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  br i1 %19, label %73, label %93

73:                                               ; preds = %68
  %74 = load i8*, i8** %72, align 8
  br label %75

75:                                               ; preds = %80, %73
  %76 = phi i16* [ %71, %73 ], [ %82, %80 ]
  %77 = phi i8* [ %74, %73 ], [ %86, %80 ]
  %78 = phi i32 [ %4, %73 ], [ %81, %80 ]
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %100, label %80

80:                                               ; preds = %75
  %81 = add i32 %78, -1
  %82 = getelementptr inbounds i16, i16* %76, i64 1
  %83 = load i16, i16* %76, align 2
  %84 = zext i16 %83 to i32
  %85 = tail call i32 @u_foldCase_69(i32 %84, i32 0) #15
  %86 = getelementptr inbounds i8, i8* %77, i64 1
  %87 = load i8, i8* %77, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i16], [256 x i16]* @_ZN3WTF10StringImpl20kLatin1CaseFoldTableE, i64 0, i64 %88
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = icmp eq i32 %85, %91
  br i1 %92, label %75, label %100

93:                                               ; preds = %68
  %94 = bitcast i8** %72 to i16**
  %95 = load i16*, i16** %94, align 8
  %96 = icmp eq i16* %71, %95
  br i1 %96, label %100, label %97

97:                                               ; preds = %93
  %98 = tail call i32 @u_memcasecmp_69(i16* %71, i16* %95, i32 %4, i32 0) #15
  %99 = icmp eq i32 %98, 0
  br label %100

100:                                              ; preds = %55, %50, %34, %29, %80, %75, %97, %93, %26, %2
  %101 = phi i1 [ false, %2 ], [ true, %26 ], [ %99, %97 ], [ true, %93 ], [ true, %75 ], [ false, %80 ], [ false, %34 ], [ true, %29 ], [ true, %50 ], [ false, %55 ]
  ret i1 %101
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3WTF10StringImpl25EndsWithIgnoringASCIICaseERKNS_10StringViewE(%"class.WTF::StringImpl"* nocapture readonly, %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp ult i32 %6, %4
  br i1 %7, label %129, label %8

8:                                                ; preds = %2
  %9 = sub i32 %6, %4
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 1
  %19 = icmp ne i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %13, label %73, label %21

21:                                               ; preds = %8
  %22 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  %23 = zext i32 %9 to i64
  %24 = getelementptr inbounds i8, i8* %22, i64 %23
  %25 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  br i1 %19, label %26, label %47

26:                                               ; preds = %21
  %27 = load i8*, i8** %25, align 8
  %28 = icmp eq i32 %4, 0
  br i1 %28, label %129, label %29

29:                                               ; preds = %26
  %30 = zext i32 %4 to i64
  br label %33

31:                                               ; preds = %33
  %32 = icmp eq i64 %46, %30
  br i1 %32, label %129, label %33

33:                                               ; preds = %31, %29
  %34 = phi i64 [ 0, %29 ], [ %46, %31 ]
  %35 = getelementptr inbounds i8, i8* %24, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds i8, i8* %27, i64 %34
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %39, %44
  %46 = add nuw nsw i64 %34, 1
  br i1 %45, label %31, label %129

47:                                               ; preds = %21
  %48 = bitcast i8** %25 to i16**
  %49 = load i16*, i16** %48, align 8
  %50 = icmp eq i32 %4, 0
  br i1 %50, label %129, label %51

51:                                               ; preds = %47
  %52 = zext i32 %4 to i64
  br label %55

53:                                               ; preds = %55
  %54 = icmp eq i64 %72, %52
  br i1 %54, label %129, label %55

55:                                               ; preds = %53, %51
  %56 = phi i64 [ 0, %51 ], [ %72, %53 ]
  %57 = getelementptr inbounds i8, i8* %24, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i64
  %60 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = getelementptr inbounds i16, i16* %49, i64 %56
  %64 = load i16, i16* %63, align 2
  %65 = add i16 %64, -65
  %66 = icmp ult i16 %65, 26
  %67 = zext i1 %66 to i16
  %68 = shl nuw nsw i16 %67, 5
  %69 = or i16 %68, %64
  %70 = zext i16 %69 to i32
  %71 = icmp eq i32 %62, %70
  %72 = add nuw nsw i64 %56, 1
  br i1 %71, label %53, label %129

73:                                               ; preds = %8
  %74 = bitcast %"class.WTF::StringImpl"* %20 to i16*
  %75 = zext i32 %9 to i64
  %76 = getelementptr inbounds i16, i16* %74, i64 %75
  %77 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  br i1 %19, label %78, label %103

78:                                               ; preds = %73
  %79 = load i8*, i8** %77, align 8
  %80 = icmp eq i32 %4, 0
  br i1 %80, label %129, label %81

81:                                               ; preds = %78
  %82 = zext i32 %4 to i64
  br label %85

83:                                               ; preds = %85
  %84 = icmp eq i64 %102, %82
  br i1 %84, label %129, label %85

85:                                               ; preds = %83, %81
  %86 = phi i64 [ 0, %81 ], [ %102, %83 ]
  %87 = getelementptr inbounds i16, i16* %76, i64 %86
  %88 = load i16, i16* %87, align 2
  %89 = add i16 %88, -65
  %90 = icmp ult i16 %89, 26
  %91 = zext i1 %90 to i16
  %92 = shl nuw nsw i16 %91, 5
  %93 = or i16 %92, %88
  %94 = zext i16 %93 to i32
  %95 = getelementptr inbounds i8, i8* %79, i64 %86
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i64
  %98 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = icmp eq i32 %94, %100
  %102 = add nuw nsw i64 %86, 1
  br i1 %101, label %83, label %129

103:                                              ; preds = %73
  %104 = bitcast i8** %77 to i16**
  %105 = load i16*, i16** %104, align 8
  %106 = icmp eq i32 %4, 0
  br i1 %106, label %129, label %107

107:                                              ; preds = %103
  %108 = zext i32 %4 to i64
  br label %111

109:                                              ; preds = %111
  %110 = icmp eq i64 %128, %108
  br i1 %110, label %129, label %111

111:                                              ; preds = %109, %107
  %112 = phi i64 [ 0, %107 ], [ %128, %109 ]
  %113 = getelementptr inbounds i16, i16* %76, i64 %112
  %114 = load i16, i16* %113, align 2
  %115 = add i16 %114, -65
  %116 = icmp ult i16 %115, 26
  %117 = zext i1 %116 to i16
  %118 = shl nuw nsw i16 %117, 5
  %119 = or i16 %118, %114
  %120 = getelementptr inbounds i16, i16* %105, i64 %112
  %121 = load i16, i16* %120, align 2
  %122 = add i16 %121, -65
  %123 = icmp ult i16 %122, 26
  %124 = zext i1 %123 to i16
  %125 = shl nuw nsw i16 %124, 5
  %126 = or i16 %125, %121
  %127 = icmp eq i16 %119, %126
  %128 = add nuw nsw i64 %112, 1
  br i1 %127, label %109, label %129

129:                                              ; preds = %55, %53, %33, %31, %111, %109, %85, %83, %103, %78, %47, %26, %2
  %130 = phi i1 [ false, %2 ], [ true, %26 ], [ true, %47 ], [ true, %78 ], [ true, %103 ], [ false, %85 ], [ true, %83 ], [ false, %111 ], [ true, %109 ], [ false, %33 ], [ true, %31 ], [ false, %55 ], [ true, %53 ]
  ret i1 %130
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsDs(%"class.WTF::StringImpl"*, i16 zeroext, i16 zeroext) local_unnamed_addr #0 align 2 {
  %4 = zext i16 %1 to i32
  %5 = icmp eq i16 %1, %2
  br i1 %5, label %6, label %26

6:                                                ; preds = %3
  %7 = ptrtoint %"class.WTF::StringImpl"* %0 to i64
  %8 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %8, label %262, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %262

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #15
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %14
  tail call void @llvm.trap() #15
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %262

26:                                               ; preds = %3
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %29, 0
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %30, label %48, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp ult i16 %1, 256
  %36 = icmp ne i32 %34, 0
  %37 = and i1 %35, %36
  br i1 %37, label %38, label %68

38:                                               ; preds = %32
  %39 = bitcast %"class.WTF::StringImpl"* %31 to i8*
  %40 = and i16 %1, 255
  %41 = zext i16 %40 to i32
  %42 = zext i32 %34 to i64
  %43 = tail call i8* @memchr(i8* %39, i32 %41, i64 %42) #16
  %44 = icmp eq i8* %43, null
  %45 = ptrtoint i8* %43 to i64
  %46 = ptrtoint %"class.WTF::StringImpl"* %31 to i64
  %47 = sub i64 %45, %46
  br i1 %44, label %68, label %63

48:                                               ; preds = %26
  %49 = bitcast %"class.WTF::StringImpl"* %31 to i16*
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %68, label %53

53:                                               ; preds = %48
  %54 = zext i32 %51 to i64
  br label %55

55:                                               ; preds = %53, %60
  %56 = phi i64 [ %61, %60 ], [ 0, %53 ]
  %57 = getelementptr inbounds i16, i16* %49, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = icmp eq i16 %58, %1
  br i1 %59, label %63, label %60

60:                                               ; preds = %55
  %61 = add nuw nsw i64 %56, 1
  %62 = icmp eq i64 %61, %54
  br i1 %62, label %68, label %55

63:                                               ; preds = %55, %38
  %64 = phi i32 [ %34, %38 ], [ %51, %55 ]
  %65 = phi i64 [ %47, %38 ], [ %56, %55 ]
  %66 = trunc i64 %65 to i32
  %67 = icmp eq i32 %66, -1
  br i1 %67, label %68, label %87

68:                                               ; preds = %60, %48, %38, %32, %63
  %69 = ptrtoint %"class.WTF::StringImpl"* %0 to i64
  %70 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %70, label %262, label %71

71:                                               ; preds = %68
  %72 = load atomic i32, i32* %27 monotonic, align 4
  %73 = and i32 %72, 2
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %262

75:                                               ; preds = %71
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %77 = load i32, i32* %76, align 4
  %78 = zext i32 %77 to i33
  %79 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %78, i33 1) #15
  %80 = extractvalue { i33, i1 } %79, 1
  %81 = extractvalue { i33, i1 } %79, 0
  %82 = icmp slt i33 %81, 0
  %83 = or i1 %80, %82
  br i1 %83, label %84, label %85, !prof !2

84:                                               ; preds = %75
  tail call void @llvm.trap() #15
  unreachable

85:                                               ; preds = %75
  %86 = trunc i33 %81 to i32
  store i32 %86, i32* %76, align 4
  br label %262

87:                                               ; preds = %63
  %88 = load atomic i32, i32* %27 monotonic, align 4
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %207, label %91

91:                                               ; preds = %87
  %92 = icmp ult i16 %2, 256
  br i1 %92, label %93, label %150

93:                                               ; preds = %91
  %94 = trunc i16 %2 to i8
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %96 = icmp eq i32 %64, 0
  br i1 %96, label %97, label %117

97:                                               ; preds = %93
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %128, label %100

100:                                              ; preds = %97
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %128

105:                                              ; preds = %100
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i33
  %109 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %108, i33 1) #15
  %110 = extractvalue { i33, i1 } %109, 1
  %111 = extractvalue { i33, i1 } %109, 0
  %112 = icmp slt i33 %111, 0
  %113 = or i1 %110, %112
  br i1 %113, label %114, label %115, !prof !2

114:                                              ; preds = %105
  tail call void @llvm.trap() #15
  unreachable

115:                                              ; preds = %105
  %116 = trunc i33 %111 to i32
  store i32 %116, i32* %106, align 4
  br label %128

117:                                              ; preds = %93
  %118 = zext i32 %64 to i64
  %119 = add nuw nsw i64 %118, 12
  %120 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %119, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %121 = getelementptr inbounds i8, i8* %120, i64 12
  %122 = bitcast i8* %120 to %"class.WTF::StringImpl"*
  %123 = bitcast i8* %120 to i32*
  store i32 1, i32* %123, align 4
  %124 = getelementptr inbounds i8, i8* %120, i64 4
  %125 = bitcast i8* %124 to i32*
  store i32 %64, i32* %125, align 4
  %126 = getelementptr inbounds i8, i8* %120, i64 8
  %127 = bitcast i8* %126 to i32*
  store i32 1, i32* %127, align 4
  br label %128

128:                                              ; preds = %97, %100, %115, %117
  %129 = phi i8* [ null, %97 ], [ null, %115 ], [ null, %100 ], [ %121, %117 ]
  %130 = phi %"class.WTF::StringImpl"* [ null, %97 ], [ %98, %115 ], [ %98, %100 ], [ %122, %117 ]
  %131 = ptrtoint %"class.WTF::StringImpl"* %130 to i64
  %132 = load i32, i32* %95, align 4
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %262, label %134

134:                                              ; preds = %128
  %135 = bitcast %"class.WTF::StringImpl"* %31 to i8*
  %136 = and i16 %1, 255
  %137 = zext i16 %136 to i32
  br label %138

138:                                              ; preds = %134, %138
  %139 = phi i32 [ 0, %134 ], [ %147, %138 ]
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds i8, i8* %135, i64 %140
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = icmp eq i32 %143, %137
  %145 = select i1 %144, i8 %94, i8 %142
  %146 = getelementptr inbounds i8, i8* %129, i64 %140
  store i8 %145, i8* %146, align 1
  %147 = add i32 %139, 1
  %148 = load i32, i32* %95, align 4
  %149 = icmp eq i32 %147, %148
  br i1 %149, label %262, label %138

150:                                              ; preds = %91
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %152 = icmp eq i32 %64, 0
  br i1 %152, label %153, label %173

153:                                              ; preds = %150
  %154 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %155 = icmp eq %"class.WTF::StringImpl"* %154, null
  br i1 %155, label %186, label %156

156:                                              ; preds = %153
  %157 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %154, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %158 = load atomic i32, i32* %157 monotonic, align 4
  %159 = and i32 %158, 2
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %186

161:                                              ; preds = %156
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %154, i64 0, i32 0
  %163 = load i32, i32* %162, align 4
  %164 = zext i32 %163 to i33
  %165 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %164, i33 1) #15
  %166 = extractvalue { i33, i1 } %165, 1
  %167 = extractvalue { i33, i1 } %165, 0
  %168 = icmp slt i33 %167, 0
  %169 = or i1 %166, %168
  br i1 %169, label %170, label %171, !prof !2

170:                                              ; preds = %161
  tail call void @llvm.trap() #15
  unreachable

171:                                              ; preds = %161
  %172 = trunc i33 %167 to i32
  store i32 %172, i32* %162, align 4
  br label %186

173:                                              ; preds = %150
  %174 = zext i32 %64 to i64
  %175 = shl nuw nsw i64 %174, 1
  %176 = add nuw nsw i64 %175, 12
  %177 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %176, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %178 = getelementptr inbounds i8, i8* %177, i64 12
  %179 = bitcast i8* %178 to i16*
  %180 = bitcast i8* %177 to %"class.WTF::StringImpl"*
  %181 = bitcast i8* %177 to i32*
  store i32 1, i32* %181, align 4
  %182 = getelementptr inbounds i8, i8* %177, i64 4
  %183 = bitcast i8* %182 to i32*
  store i32 %64, i32* %183, align 4
  %184 = getelementptr inbounds i8, i8* %177, i64 8
  %185 = bitcast i8* %184 to i32*
  store i32 0, i32* %185, align 4
  br label %186

186:                                              ; preds = %153, %156, %171, %173
  %187 = phi i16* [ null, %153 ], [ null, %171 ], [ null, %156 ], [ %179, %173 ]
  %188 = phi %"class.WTF::StringImpl"* [ null, %153 ], [ %154, %171 ], [ %154, %156 ], [ %180, %173 ]
  %189 = ptrtoint %"class.WTF::StringImpl"* %188 to i64
  %190 = load i32, i32* %151, align 4
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %262, label %192

192:                                              ; preds = %186
  %193 = bitcast %"class.WTF::StringImpl"* %31 to i8*
  br label %194

194:                                              ; preds = %192, %194
  %195 = phi i32 [ 0, %192 ], [ %204, %194 ]
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds i8, i8* %193, i64 %196
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i16
  %200 = zext i8 %198 to i32
  %201 = icmp eq i32 %200, %4
  %202 = select i1 %201, i16 %2, i16 %199
  %203 = getelementptr inbounds i16, i16* %187, i64 %196
  store i16 %202, i16* %203, align 2
  %204 = add i32 %195, 1
  %205 = load i32, i32* %151, align 4
  %206 = icmp eq i32 %204, %205
  br i1 %206, label %262, label %194

207:                                              ; preds = %87
  %208 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %209 = icmp eq i32 %64, 0
  br i1 %209, label %210, label %230

210:                                              ; preds = %207
  %211 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %212 = icmp eq %"class.WTF::StringImpl"* %211, null
  br i1 %212, label %243, label %213

213:                                              ; preds = %210
  %214 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %211, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %215 = load atomic i32, i32* %214 monotonic, align 4
  %216 = and i32 %215, 2
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %243

218:                                              ; preds = %213
  %219 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %211, i64 0, i32 0
  %220 = load i32, i32* %219, align 4
  %221 = zext i32 %220 to i33
  %222 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %221, i33 1) #15
  %223 = extractvalue { i33, i1 } %222, 1
  %224 = extractvalue { i33, i1 } %222, 0
  %225 = icmp slt i33 %224, 0
  %226 = or i1 %223, %225
  br i1 %226, label %227, label %228, !prof !2

227:                                              ; preds = %218
  tail call void @llvm.trap() #15
  unreachable

228:                                              ; preds = %218
  %229 = trunc i33 %224 to i32
  store i32 %229, i32* %219, align 4
  br label %243

230:                                              ; preds = %207
  %231 = zext i32 %64 to i64
  %232 = shl nuw nsw i64 %231, 1
  %233 = add nuw nsw i64 %232, 12
  %234 = tail call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %233, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %235 = getelementptr inbounds i8, i8* %234, i64 12
  %236 = bitcast i8* %235 to i16*
  %237 = bitcast i8* %234 to %"class.WTF::StringImpl"*
  %238 = bitcast i8* %234 to i32*
  store i32 1, i32* %238, align 4
  %239 = getelementptr inbounds i8, i8* %234, i64 4
  %240 = bitcast i8* %239 to i32*
  store i32 %64, i32* %240, align 4
  %241 = getelementptr inbounds i8, i8* %234, i64 8
  %242 = bitcast i8* %241 to i32*
  store i32 0, i32* %242, align 4
  br label %243

243:                                              ; preds = %210, %213, %228, %230
  %244 = phi i16* [ null, %210 ], [ null, %228 ], [ null, %213 ], [ %236, %230 ]
  %245 = phi %"class.WTF::StringImpl"* [ null, %210 ], [ %211, %228 ], [ %211, %213 ], [ %237, %230 ]
  %246 = ptrtoint %"class.WTF::StringImpl"* %245 to i64
  %247 = load i32, i32* %208, align 4
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %262, label %249

249:                                              ; preds = %243
  %250 = bitcast %"class.WTF::StringImpl"* %31 to i16*
  br label %251

251:                                              ; preds = %249, %251
  %252 = phi i32 [ 0, %249 ], [ %259, %251 ]
  %253 = zext i32 %252 to i64
  %254 = getelementptr inbounds i16, i16* %250, i64 %253
  %255 = load i16, i16* %254, align 2
  %256 = icmp eq i16 %255, %1
  %257 = select i1 %256, i16 %2, i16 %255
  %258 = getelementptr inbounds i16, i16* %244, i64 %253
  store i16 %257, i16* %258, align 2
  %259 = add i32 %252, 1
  %260 = load i32, i32* %208, align 4
  %261 = icmp eq i32 %259, %260
  br i1 %261, label %262, label %251

262:                                              ; preds = %194, %138, %251, %186, %128, %243, %85, %71, %68, %24, %9, %6
  %263 = phi i64 [ %7, %6 ], [ %7, %9 ], [ %7, %24 ], [ %69, %68 ], [ %69, %71 ], [ %69, %85 ], [ %246, %243 ], [ %131, %128 ], [ %189, %186 ], [ %246, %251 ], [ %131, %138 ], [ %189, %194 ]
  %264 = inttoptr i64 %263 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %264
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEjjRKNS_10StringViewE(%"class.WTF::StringImpl"*, i32, i32, %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp ult i32 %9, %1
  %11 = select i1 %10, i32 %9, i32 %1
  %12 = sub i32 %9, %11
  %13 = icmp ult i32 %12, %2
  %14 = select i1 %13, i32 %12, i32 %2
  %15 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = or i32 %14, %16
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %39

19:                                               ; preds = %4
  %20 = ptrtoint %"class.WTF::StringImpl"* %0 to i64
  %21 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %21, label %404, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %404

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i33
  %31 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %30, i33 1) #15
  %32 = extractvalue { i33, i1 } %31, 1
  %33 = extractvalue { i33, i1 } %31, 0
  %34 = icmp slt i33 %33, 0
  %35 = or i1 %32, %34
  br i1 %35, label %36, label %37, !prof !2

36:                                               ; preds = %27
  tail call void @llvm.trap() #15
  unreachable

37:                                               ; preds = %27
  %38 = trunc i33 %33 to i32
  store i32 %38, i32* %28, align 4
  br label %404

39:                                               ; preds = %4
  %40 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #15
  %41 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %41, align 8
  %42 = sub i32 %9, %14
  %43 = xor i32 %16, -1
  %44 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44)
  %45 = icmp ult i32 %42, %43
  br i1 %45, label %46, label %47

46:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44)
  store i8* null, i8** %41, align 8
  br label %56

47:                                               ; preds = %39
  %48 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %42) #15
  %49 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %43) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.7, i64 0, i64 0), i8* %48, i8* %49) #15
  %50 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %51 = load i8*, i8** %50, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44)
  store i8* %51, i8** %41, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %56, label %53

53:                                               ; preds = %47
  %54 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %54) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 1240, %"class.logging::CheckOpResult"* nonnull %6) #15
  %55 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %54) #15
  br label %56

56:                                               ; preds = %46, %47, %53
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #15
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %133, label %61

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %63 = load i8*, i8** %62, align 8
  %64 = icmp eq i8* %63, null
  br i1 %64, label %72, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  %67 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %66, align 8
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 1
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %133, label %72

72:                                               ; preds = %65, %61
  %73 = load i32, i32* %8, align 4
  %74 = sub i32 %73, %14
  %75 = add i32 %74, %16
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %97

77:                                               ; preds = %72
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %108, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %108

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = zext i32 %87 to i33
  %89 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %88, i33 1) #15
  %90 = extractvalue { i33, i1 } %89, 1
  %91 = extractvalue { i33, i1 } %89, 0
  %92 = icmp slt i33 %91, 0
  %93 = or i1 %90, %92
  br i1 %93, label %94, label %95, !prof !2

94:                                               ; preds = %85
  call void @llvm.trap() #15
  unreachable

95:                                               ; preds = %85
  %96 = trunc i33 %91 to i32
  store i32 %96, i32* %86, align 4
  br label %108

97:                                               ; preds = %72
  %98 = zext i32 %75 to i64
  %99 = add nuw nsw i64 %98, 12
  %100 = call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %99, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %101 = getelementptr inbounds i8, i8* %100, i64 12
  %102 = bitcast i8* %100 to %"class.WTF::StringImpl"*
  %103 = bitcast i8* %100 to i32*
  store i32 1, i32* %103, align 4
  %104 = getelementptr inbounds i8, i8* %100, i64 4
  %105 = bitcast i8* %104 to i32*
  store i32 %75, i32* %105, align 4
  %106 = getelementptr inbounds i8, i8* %100, i64 8
  %107 = bitcast i8* %106 to i32*
  store i32 1, i32* %107, align 4
  br label %108

108:                                              ; preds = %77, %80, %95, %97
  %109 = phi i8* [ null, %77 ], [ null, %95 ], [ null, %80 ], [ %101, %97 ]
  %110 = phi %"class.WTF::StringImpl"* [ null, %77 ], [ %78, %95 ], [ %78, %80 ], [ %102, %97 ]
  %111 = ptrtoint %"class.WTF::StringImpl"* %110 to i64
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %113 = bitcast %"class.WTF::StringImpl"* %112 to i8*
  %114 = zext i32 %11 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %109, i8* align 1 %113, i64 %114, i1 false)
  %115 = load i8*, i8** %62, align 8
  %116 = icmp eq i8* %115, null
  br i1 %116, label %117, label %119

117:                                              ; preds = %108
  %118 = zext i32 %16 to i64
  br label %122

119:                                              ; preds = %108
  %120 = getelementptr inbounds i8, i8* %109, i64 %114
  %121 = zext i32 %16 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %120, i8* nonnull align 1 %115, i64 %121, i1 false)
  br label %122

122:                                              ; preds = %117, %119
  %123 = phi i64 [ %118, %117 ], [ %121, %119 ]
  %124 = getelementptr inbounds i8, i8* %109, i64 %114
  %125 = getelementptr inbounds i8, i8* %124, i64 %123
  %126 = getelementptr inbounds i8, i8* %113, i64 %114
  %127 = zext i32 %14 to i64
  %128 = getelementptr inbounds i8, i8* %126, i64 %127
  %129 = load i32, i32* %8, align 4
  %130 = add i32 %14, %11
  %131 = sub i32 %129, %130
  %132 = zext i32 %131 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %128, i64 %132, i1 false)
  br label %404

133:                                              ; preds = %65, %56
  %134 = load i32, i32* %8, align 4
  %135 = sub i32 %134, %14
  %136 = add i32 %135, %16
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %158

138:                                              ; preds = %133
  %139 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %140 = icmp eq %"class.WTF::StringImpl"* %139, null
  br i1 %140, label %171, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = load atomic i32, i32* %142 monotonic, align 4
  %144 = and i32 %143, 2
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %171

146:                                              ; preds = %141
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 0
  %148 = load i32, i32* %147, align 4
  %149 = zext i32 %148 to i33
  %150 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %149, i33 1) #15
  %151 = extractvalue { i33, i1 } %150, 1
  %152 = extractvalue { i33, i1 } %150, 0
  %153 = icmp slt i33 %152, 0
  %154 = or i1 %151, %153
  br i1 %154, label %155, label %156, !prof !2

155:                                              ; preds = %146
  call void @llvm.trap() #15
  unreachable

156:                                              ; preds = %146
  %157 = trunc i33 %152 to i32
  store i32 %157, i32* %147, align 4
  br label %171

158:                                              ; preds = %133
  %159 = zext i32 %136 to i64
  %160 = shl nuw nsw i64 %159, 1
  %161 = add nuw nsw i64 %160, 12
  %162 = call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %161, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %163 = getelementptr inbounds i8, i8* %162, i64 12
  %164 = bitcast i8* %163 to i16*
  %165 = bitcast i8* %162 to %"class.WTF::StringImpl"*
  %166 = bitcast i8* %162 to i32*
  store i32 1, i32* %166, align 4
  %167 = getelementptr inbounds i8, i8* %162, i64 4
  %168 = bitcast i8* %167 to i32*
  store i32 %136, i32* %168, align 4
  %169 = getelementptr inbounds i8, i8* %162, i64 8
  %170 = bitcast i8* %169 to i32*
  store i32 0, i32* %170, align 4
  br label %171

171:                                              ; preds = %138, %141, %156, %158
  %172 = phi i8* [ null, %138 ], [ null, %156 ], [ null, %141 ], [ %163, %158 ]
  %173 = phi i16* [ null, %138 ], [ null, %156 ], [ null, %141 ], [ %164, %158 ]
  %174 = phi %"class.WTF::StringImpl"* [ null, %138 ], [ %139, %156 ], [ %139, %141 ], [ %165, %158 ]
  %175 = ptrtoint %"class.WTF::StringImpl"* %174 to i64
  %176 = load atomic i32, i32* %57 monotonic, align 4
  %177 = and i32 %176, 1
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %263, label %179

179:                                              ; preds = %171
  %180 = icmp eq i32 %11, 0
  br i1 %180, label %268, label %181

181:                                              ; preds = %179
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %183 = bitcast %"class.WTF::StringImpl"* %182 to i8*
  %184 = zext i32 %11 to i64
  %185 = icmp ult i32 %11, 16
  br i1 %185, label %253, label %186

186:                                              ; preds = %181
  %187 = getelementptr i16, i16* %173, i64 %184
  %188 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1, i32 0
  %189 = bitcast i32* %188 to i8*
  %190 = getelementptr i8, i8* %189, i64 %184
  %191 = icmp ult i8* %172, %190
  %192 = bitcast i16* %187 to %"class.WTF::StringImpl"*
  %193 = icmp ult %"class.WTF::StringImpl"* %182, %192
  %194 = and i1 %191, %193
  br i1 %194, label %253, label %195

195:                                              ; preds = %186
  %196 = and i64 %184, 4294967280
  %197 = add nsw i64 %196, -16
  %198 = lshr exact i64 %197, 4
  %199 = add nuw nsw i64 %198, 1
  %200 = and i64 %199, 1
  %201 = icmp eq i64 %197, 0
  br i1 %201, label %235, label %202

202:                                              ; preds = %195
  %203 = sub nuw nsw i64 %199, %200
  br label %204

204:                                              ; preds = %204, %202
  %205 = phi i64 [ 0, %202 ], [ %232, %204 ]
  %206 = phi i64 [ %203, %202 ], [ %233, %204 ]
  %207 = getelementptr inbounds i8, i8* %183, i64 %205
  %208 = bitcast i8* %207 to <8 x i8>*
  %209 = load <8 x i8>, <8 x i8>* %208, align 1, !alias.scope !78
  %210 = getelementptr inbounds i8, i8* %207, i64 8
  %211 = bitcast i8* %210 to <8 x i8>*
  %212 = load <8 x i8>, <8 x i8>* %211, align 1, !alias.scope !78
  %213 = zext <8 x i8> %209 to <8 x i16>
  %214 = zext <8 x i8> %212 to <8 x i16>
  %215 = getelementptr inbounds i16, i16* %173, i64 %205
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %216, align 2, !alias.scope !81, !noalias !78
  %217 = getelementptr inbounds i16, i16* %215, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %218, align 2, !alias.scope !81, !noalias !78
  %219 = or i64 %205, 16
  %220 = getelementptr inbounds i8, i8* %183, i64 %219
  %221 = bitcast i8* %220 to <8 x i8>*
  %222 = load <8 x i8>, <8 x i8>* %221, align 1, !alias.scope !78
  %223 = getelementptr inbounds i8, i8* %220, i64 8
  %224 = bitcast i8* %223 to <8 x i8>*
  %225 = load <8 x i8>, <8 x i8>* %224, align 1, !alias.scope !78
  %226 = zext <8 x i8> %222 to <8 x i16>
  %227 = zext <8 x i8> %225 to <8 x i16>
  %228 = getelementptr inbounds i16, i16* %173, i64 %219
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2, !alias.scope !81, !noalias !78
  %230 = getelementptr inbounds i16, i16* %228, i64 8
  %231 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %227, <8 x i16>* %231, align 2, !alias.scope !81, !noalias !78
  %232 = add i64 %205, 32
  %233 = add i64 %206, -2
  %234 = icmp eq i64 %233, 0
  br i1 %234, label %235, label %204, !llvm.loop !83

235:                                              ; preds = %204, %195
  %236 = phi i64 [ 0, %195 ], [ %232, %204 ]
  %237 = icmp eq i64 %200, 0
  br i1 %237, label %251, label %238

238:                                              ; preds = %235
  %239 = getelementptr inbounds i8, i8* %183, i64 %236
  %240 = bitcast i8* %239 to <8 x i8>*
  %241 = load <8 x i8>, <8 x i8>* %240, align 1, !alias.scope !78
  %242 = getelementptr inbounds i8, i8* %239, i64 8
  %243 = bitcast i8* %242 to <8 x i8>*
  %244 = load <8 x i8>, <8 x i8>* %243, align 1, !alias.scope !78
  %245 = zext <8 x i8> %241 to <8 x i16>
  %246 = zext <8 x i8> %244 to <8 x i16>
  %247 = getelementptr inbounds i16, i16* %173, i64 %236
  %248 = bitcast i16* %247 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %248, align 2, !alias.scope !81, !noalias !78
  %249 = getelementptr inbounds i16, i16* %247, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %246, <8 x i16>* %250, align 2, !alias.scope !81, !noalias !78
  br label %251

251:                                              ; preds = %235, %238
  %252 = icmp eq i64 %196, %184
  br i1 %252, label %268, label %253

253:                                              ; preds = %251, %186, %181
  %254 = phi i64 [ 0, %186 ], [ 0, %181 ], [ %196, %251 ]
  br label %255

255:                                              ; preds = %253, %255
  %256 = phi i64 [ %261, %255 ], [ %254, %253 ]
  %257 = getelementptr inbounds i8, i8* %183, i64 %256
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i16
  %260 = getelementptr inbounds i16, i16* %173, i64 %256
  store i16 %259, i16* %260, align 2
  %261 = add nuw nsw i64 %256, 1
  %262 = icmp ult i64 %261, %184
  br i1 %262, label %255, label %268, !llvm.loop !84

263:                                              ; preds = %171
  %264 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %265 = bitcast %"class.WTF::StringImpl"* %264 to i8*
  %266 = zext i32 %11 to i64
  %267 = shl nuw nsw i64 %266, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %172, i8* align 2 %265, i64 %267, i1 false)
  br label %268

268:                                              ; preds = %255, %251, %179, %263
  %269 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %270 = load i8*, i8** %269, align 8
  %271 = icmp eq i8* %270, null
  br i1 %271, label %359, label %272

272:                                              ; preds = %268
  %273 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  %274 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %273, align 8
  %275 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %274, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %276 = load atomic i32, i32* %275 monotonic, align 4
  %277 = and i32 %276, 1
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %336, label %279

279:                                              ; preds = %272
  %280 = icmp eq i32 %16, 0
  br i1 %280, label %359, label %281

281:                                              ; preds = %279
  %282 = zext i32 %16 to i64
  %283 = load i8, i8* %270, align 1
  %284 = zext i8 %283 to i16
  %285 = zext i32 %11 to i64
  %286 = getelementptr inbounds i16, i16* %173, i64 %285
  store i16 %284, i16* %286, align 2
  %287 = icmp eq i32 %16, 1
  br i1 %287, label %359, label %288

288:                                              ; preds = %281
  %289 = add nsw i64 %282, -1
  %290 = add nsw i64 %282, -2
  %291 = and i64 %289, 3
  %292 = icmp ult i64 %290, 3
  br i1 %292, label %342, label %293

293:                                              ; preds = %288
  %294 = sub nsw i64 %289, %291
  br label %295

295:                                              ; preds = %295, %293
  %296 = phi i64 [ 1, %293 ], [ %333, %295 ]
  %297 = phi i64 [ %294, %293 ], [ %334, %295 ]
  %298 = load i8*, i8** %269, align 8
  %299 = getelementptr inbounds i8, i8* %298, i64 %296
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i16
  %302 = trunc i64 %296 to i32
  %303 = add i32 %11, %302
  %304 = zext i32 %303 to i64
  %305 = getelementptr inbounds i16, i16* %173, i64 %304
  store i16 %301, i16* %305, align 2
  %306 = add nuw nsw i64 %296, 1
  %307 = load i8*, i8** %269, align 8
  %308 = getelementptr inbounds i8, i8* %307, i64 %306
  %309 = load i8, i8* %308, align 1
  %310 = zext i8 %309 to i16
  %311 = trunc i64 %306 to i32
  %312 = add i32 %11, %311
  %313 = zext i32 %312 to i64
  %314 = getelementptr inbounds i16, i16* %173, i64 %313
  store i16 %310, i16* %314, align 2
  %315 = add nuw nsw i64 %296, 2
  %316 = load i8*, i8** %269, align 8
  %317 = getelementptr inbounds i8, i8* %316, i64 %315
  %318 = load i8, i8* %317, align 1
  %319 = zext i8 %318 to i16
  %320 = trunc i64 %315 to i32
  %321 = add i32 %11, %320
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds i16, i16* %173, i64 %322
  store i16 %319, i16* %323, align 2
  %324 = add nuw nsw i64 %296, 3
  %325 = load i8*, i8** %269, align 8
  %326 = getelementptr inbounds i8, i8* %325, i64 %324
  %327 = load i8, i8* %326, align 1
  %328 = zext i8 %327 to i16
  %329 = trunc i64 %324 to i32
  %330 = add i32 %11, %329
  %331 = zext i32 %330 to i64
  %332 = getelementptr inbounds i16, i16* %173, i64 %331
  store i16 %328, i16* %332, align 2
  %333 = add nuw nsw i64 %296, 4
  %334 = add i64 %297, -4
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %342, label %295

336:                                              ; preds = %272
  %337 = zext i32 %11 to i64
  %338 = getelementptr inbounds i16, i16* %173, i64 %337
  %339 = bitcast i16* %338 to i8*
  %340 = zext i32 %16 to i64
  %341 = shl nuw nsw i64 %340, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %339, i8* nonnull align 2 %270, i64 %341, i1 false)
  br label %359

342:                                              ; preds = %295, %288
  %343 = phi i64 [ 1, %288 ], [ %333, %295 ]
  %344 = icmp eq i64 %291, 0
  br i1 %344, label %359, label %345

345:                                              ; preds = %342, %345
  %346 = phi i64 [ %356, %345 ], [ %343, %342 ]
  %347 = phi i64 [ %357, %345 ], [ %291, %342 ]
  %348 = load i8*, i8** %269, align 8
  %349 = getelementptr inbounds i8, i8* %348, i64 %346
  %350 = load i8, i8* %349, align 1
  %351 = zext i8 %350 to i16
  %352 = trunc i64 %346 to i32
  %353 = add i32 %11, %352
  %354 = zext i32 %353 to i64
  %355 = getelementptr inbounds i16, i16* %173, i64 %354
  store i16 %351, i16* %355, align 2
  %356 = add nuw nsw i64 %346, 1
  %357 = add i64 %347, -1
  %358 = icmp eq i64 %357, 0
  br i1 %358, label %359, label %345, !llvm.loop !85

359:                                              ; preds = %342, %345, %281, %279, %336, %268
  %360 = load atomic i32, i32* %57 monotonic, align 4
  %361 = and i32 %360, 1
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %387, label %363

363:                                              ; preds = %359
  %364 = load i32, i32* %8, align 4
  %365 = add i32 %14, %11
  %366 = icmp eq i32 %364, %365
  br i1 %366, label %404, label %367

367:                                              ; preds = %363
  %368 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %369 = bitcast %"class.WTF::StringImpl"* %368 to i8*
  br label %370

370:                                              ; preds = %367, %370
  %371 = phi i64 [ 0, %367 ], [ %382, %370 ]
  %372 = trunc i64 %371 to i32
  %373 = add i32 %11, %372
  %374 = add i32 %373, %14
  %375 = zext i32 %374 to i64
  %376 = getelementptr inbounds i8, i8* %369, i64 %375
  %377 = load i8, i8* %376, align 1
  %378 = zext i8 %377 to i16
  %379 = add i32 %373, %16
  %380 = zext i32 %379 to i64
  %381 = getelementptr inbounds i16, i16* %173, i64 %380
  store i16 %378, i16* %381, align 2
  %382 = add nuw nsw i64 %371, 1
  %383 = load i32, i32* %8, align 4
  %384 = sub i32 %383, %365
  %385 = zext i32 %384 to i64
  %386 = icmp ult i64 %382, %385
  br i1 %386, label %370, label %404

387:                                              ; preds = %359
  %388 = zext i32 %11 to i64
  %389 = getelementptr inbounds i16, i16* %173, i64 %388
  %390 = zext i32 %16 to i64
  %391 = getelementptr inbounds i16, i16* %389, i64 %390
  %392 = bitcast i16* %391 to i8*
  %393 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %394 = bitcast %"class.WTF::StringImpl"* %393 to i16*
  %395 = getelementptr inbounds i16, i16* %394, i64 %388
  %396 = zext i32 %14 to i64
  %397 = getelementptr inbounds i16, i16* %395, i64 %396
  %398 = bitcast i16* %397 to i8*
  %399 = load i32, i32* %8, align 4
  %400 = add i32 %14, %11
  %401 = sub i32 %399, %400
  %402 = zext i32 %401 to i64
  %403 = shl nuw nsw i64 %402, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %392, i8* align 2 %398, i64 %403, i1 false)
  br label %404

404:                                              ; preds = %370, %363, %387, %37, %22, %19, %122
  %405 = phi i64 [ %111, %122 ], [ %20, %19 ], [ %20, %22 ], [ %20, %37 ], [ %175, %387 ], [ %175, %363 ], [ %175, %370 ]
  %406 = inttoptr i64 %405 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %406
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsRKNS_10StringViewE(%"class.WTF::StringImpl"*, i16 zeroext, %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  %7 = bitcast i8* %5 to i16*
  br i1 %6, label %8, label %27

8:                                                ; preds = %3
  %9 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %9, label %40, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %40

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #15
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #15
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %40

27:                                               ; preds = %3
  %28 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 0
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 2
  %35 = load i32, i32* %34, align 8
  br i1 %33, label %38, label %36

36:                                               ; preds = %27
  %37 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsPKhj(%"class.WTF::StringImpl"* %0, i16 zeroext %1, i8* nonnull %5, i32 %35)
  br label %40

38:                                               ; preds = %27
  %39 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsPKDsj(%"class.WTF::StringImpl"* %0, i16 zeroext %1, i16* nonnull %7, i32 %35)
  br label %40

40:                                               ; preds = %25, %10, %8, %38, %36
  %41 = phi %"class.WTF::StringImpl"* [ %37, %36 ], [ %39, %38 ], [ null, %8 ], [ %0, %10 ], [ %0, %25 ]
  ret %"class.WTF::StringImpl"* %41
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsPKhj(%"class.WTF::StringImpl"*, i16 zeroext, i8* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %12 = icmp ult i16 %1, 256
  %13 = bitcast %"class.WTF::StringImpl"* %10 to i8*
  %14 = and i16 %1, 255
  %15 = zext i16 %14 to i32
  %16 = ptrtoint %"class.WTF::StringImpl"* %10 to i64
  %17 = bitcast %"class.WTF::StringImpl"* %10 to i16*
  %18 = load i32, i32* %11, align 4
  br label %19

19:                                               ; preds = %53, %4
  %20 = phi i32 [ 0, %4 ], [ %55, %53 ]
  %21 = phi i32 [ 0, %4 ], [ %54, %53 ]
  %22 = load atomic i32, i32* %9 monotonic, align 4
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp ugt i32 %18, %20
  br i1 %24, label %37, label %26

26:                                               ; preds = %19
  %27 = and i1 %12, %25
  br i1 %27, label %28, label %56

28:                                               ; preds = %26
  %29 = zext i32 %20 to i64
  %30 = getelementptr inbounds i8, i8* %13, i64 %29
  %31 = sub i32 %18, %20
  %32 = zext i32 %31 to i64
  %33 = tail call i8* @memchr(i8* %30, i32 %15, i64 %32) #16
  %34 = icmp eq i8* %33, null
  %35 = ptrtoint i8* %33 to i64
  %36 = sub i64 %35, %16
  br i1 %34, label %56, label %49

37:                                               ; preds = %19
  br i1 %25, label %38, label %56

38:                                               ; preds = %37
  %39 = zext i32 %20 to i64
  br label %40

40:                                               ; preds = %45, %38
  %41 = phi i64 [ %39, %38 ], [ %46, %45 ]
  %42 = getelementptr inbounds i16, i16* %17, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = icmp eq i16 %43, %1
  br i1 %44, label %49, label %45

45:                                               ; preds = %40
  %46 = add nuw nsw i64 %41, 1
  %47 = trunc i64 %46 to i32
  %48 = icmp eq i32 %18, %47
  br i1 %48, label %56, label %40

49:                                               ; preds = %40, %28
  %50 = phi i64 [ %36, %28 ], [ %41, %40 ]
  %51 = trunc i64 %50 to i32
  %52 = icmp eq i32 %51, -1
  br i1 %52, label %56, label %53

53:                                               ; preds = %49
  %54 = add i32 %21, 1
  %55 = add nuw i32 %51, 1
  br label %19

56:                                               ; preds = %28, %37, %26, %49, %45
  %57 = icmp eq i32 %21, 0
  br i1 %57, label %58, label %77

58:                                               ; preds = %56
  %59 = ptrtoint %"class.WTF::StringImpl"* %0 to i64
  %60 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %60, label %448, label %61

61:                                               ; preds = %58
  %62 = load atomic i32, i32* %9 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %448

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i33
  %69 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %68, i33 1) #15
  %70 = extractvalue { i33, i1 } %69, 1
  %71 = extractvalue { i33, i1 } %69, 0
  %72 = icmp slt i33 %71, 0
  %73 = or i1 %70, %72
  br i1 %73, label %74, label %75, !prof !2

74:                                               ; preds = %65
  tail call void @llvm.trap() #15
  unreachable

75:                                               ; preds = %65
  %76 = trunc i33 %71 to i32
  store i32 %76, i32* %66, align 4
  br label %448

77:                                               ; preds = %56
  %78 = icmp eq i32 %3, 0
  br i1 %78, label %86, label %79

79:                                               ; preds = %77
  %80 = udiv i32 -1, %3
  %81 = icmp ugt i32 %21, %80
  br i1 %81, label %82, label %86

82:                                               ; preds = %79
  %83 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #15
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 1311, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.8, i64 0, i64 0)) #15
  %84 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #15
  %85 = load i32, i32* %11, align 4
  br label %86

86:                                               ; preds = %79, %77, %82
  %87 = phi i32 [ %18, %79 ], [ %18, %77 ], [ %85, %82 ]
  %88 = mul i32 %21, %3
  %89 = sub i32 %87, %21
  %90 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #15
  %91 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %91, align 8
  %92 = xor i32 %88, -1
  %93 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %93)
  %94 = icmp ult i32 %89, %92
  br i1 %94, label %95, label %96

95:                                               ; preds = %86
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93)
  store i8* null, i8** %91, align 8
  br label %105

96:                                               ; preds = %86
  %97 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %89) #15
  %98 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %92) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.9, i64 0, i64 0), i8* %97, i8* %98) #15
  %99 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %100 = load i8*, i8** %99, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93)
  store i8* %100, i8** %91, align 8
  %101 = icmp eq i8* %100, null
  br i1 %101, label %105, label %102

102:                                              ; preds = %96
  %103 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %103) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 1315, %"class.logging::CheckOpResult"* nonnull %7) #15
  %104 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %103) #15
  br label %105

105:                                              ; preds = %95, %96, %102
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #15
  %106 = add i32 %89, %88
  %107 = load atomic i32, i32* %9 monotonic, align 4
  %108 = and i32 %107, 1
  %109 = icmp eq i32 %108, 0
  %110 = icmp eq i32 %106, 0
  br i1 %109, label %202, label %111

111:                                              ; preds = %105
  br i1 %110, label %112, label %132

112:                                              ; preds = %111
  %113 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %114 = icmp eq %"class.WTF::StringImpl"* %113, null
  br i1 %114, label %143, label %115

115:                                              ; preds = %112
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %143

120:                                              ; preds = %115
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 0
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i33
  %124 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %123, i33 1) #15
  %125 = extractvalue { i33, i1 } %124, 1
  %126 = extractvalue { i33, i1 } %124, 0
  %127 = icmp slt i33 %126, 0
  %128 = or i1 %125, %127
  br i1 %128, label %129, label %130, !prof !2

129:                                              ; preds = %120
  call void @llvm.trap() #15
  unreachable

130:                                              ; preds = %120
  %131 = trunc i33 %126 to i32
  store i32 %131, i32* %121, align 4
  br label %143

132:                                              ; preds = %111
  %133 = zext i32 %106 to i64
  %134 = add nuw nsw i64 %133, 12
  %135 = call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %134, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %136 = getelementptr inbounds i8, i8* %135, i64 12
  %137 = bitcast i8* %135 to %"class.WTF::StringImpl"*
  %138 = bitcast i8* %135 to i32*
  store i32 1, i32* %138, align 4
  %139 = getelementptr inbounds i8, i8* %135, i64 4
  %140 = bitcast i8* %139 to i32*
  store i32 %106, i32* %140, align 4
  %141 = getelementptr inbounds i8, i8* %135, i64 8
  %142 = bitcast i8* %141 to i32*
  store i32 1, i32* %142, align 4
  br label %143

143:                                              ; preds = %112, %115, %130, %132
  %144 = phi i8* [ null, %112 ], [ null, %130 ], [ null, %115 ], [ %136, %132 ]
  %145 = phi %"class.WTF::StringImpl"* [ null, %112 ], [ %113, %130 ], [ %113, %115 ], [ %137, %132 ]
  %146 = ptrtoint %"class.WTF::StringImpl"* %145 to i64
  %147 = zext i32 %3 to i64
  br label %148

148:                                              ; preds = %183, %143
  %149 = phi i32 [ 0, %143 ], [ %194, %183 ]
  %150 = phi i32 [ 0, %143 ], [ %193, %183 ]
  %151 = load atomic i32, i32* %9 monotonic, align 4
  %152 = and i32 %151, 1
  %153 = icmp eq i32 %152, 0
  %154 = load i32, i32* %11, align 4
  %155 = icmp ugt i32 %154, %149
  br i1 %153, label %167, label %156

156:                                              ; preds = %148
  %157 = and i1 %12, %155
  br i1 %157, label %158, label %195

158:                                              ; preds = %156
  %159 = zext i32 %149 to i64
  %160 = getelementptr inbounds i8, i8* %13, i64 %159
  %161 = sub i32 %154, %149
  %162 = zext i32 %161 to i64
  %163 = call i8* @memchr(i8* %160, i32 %15, i64 %162) #16
  %164 = icmp eq i8* %163, null
  %165 = ptrtoint i8* %163 to i64
  %166 = sub i64 %165, %16
  br i1 %164, label %195, label %179

167:                                              ; preds = %148
  br i1 %155, label %168, label %195

168:                                              ; preds = %167
  %169 = zext i32 %149 to i64
  br label %170

170:                                              ; preds = %175, %168
  %171 = phi i64 [ %169, %168 ], [ %176, %175 ]
  %172 = getelementptr inbounds i16, i16* %17, i64 %171
  %173 = load i16, i16* %172, align 2
  %174 = icmp eq i16 %173, %1
  br i1 %174, label %179, label %175

175:                                              ; preds = %170
  %176 = add nuw nsw i64 %171, 1
  %177 = trunc i64 %176 to i32
  %178 = icmp eq i32 %154, %177
  br i1 %178, label %195, label %170

179:                                              ; preds = %170, %158
  %180 = phi i64 [ %166, %158 ], [ %171, %170 ]
  %181 = trunc i64 %180 to i32
  %182 = icmp eq i32 %181, -1
  br i1 %182, label %195, label %183

183:                                              ; preds = %179
  %184 = sub i32 %181, %149
  %185 = zext i32 %150 to i64
  %186 = getelementptr inbounds i8, i8* %144, i64 %185
  %187 = zext i32 %149 to i64
  %188 = getelementptr inbounds i8, i8* %13, i64 %187
  %189 = zext i32 %184 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %186, i8* align 1 %188, i64 %189, i1 false)
  %190 = add i32 %184, %150
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds i8, i8* %144, i64 %191
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %192, i8* align 1 %2, i64 %147, i1 false)
  %193 = add i32 %190, %3
  %194 = add nuw i32 %181, 1
  br label %148

195:                                              ; preds = %158, %167, %156, %179, %175
  %196 = zext i32 %149 to i64
  %197 = sub i32 %154, %149
  %198 = zext i32 %150 to i64
  %199 = getelementptr inbounds i8, i8* %144, i64 %198
  %200 = getelementptr inbounds i8, i8* %13, i64 %196
  %201 = zext i32 %197 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %199, i8* align 1 %200, i64 %201, i1 false)
  br label %448

202:                                              ; preds = %105
  br i1 %110, label %203, label %223

203:                                              ; preds = %202
  %204 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %205 = icmp eq %"class.WTF::StringImpl"* %204, null
  br i1 %205, label %236, label %206

206:                                              ; preds = %203
  %207 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %204, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %208 = load atomic i32, i32* %207 monotonic, align 4
  %209 = and i32 %208, 2
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %236

211:                                              ; preds = %206
  %212 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %204, i64 0, i32 0
  %213 = load i32, i32* %212, align 4
  %214 = zext i32 %213 to i33
  %215 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %214, i33 1) #15
  %216 = extractvalue { i33, i1 } %215, 1
  %217 = extractvalue { i33, i1 } %215, 0
  %218 = icmp slt i33 %217, 0
  %219 = or i1 %216, %218
  br i1 %219, label %220, label %221, !prof !2

220:                                              ; preds = %211
  call void @llvm.trap() #15
  unreachable

221:                                              ; preds = %211
  %222 = trunc i33 %217 to i32
  store i32 %222, i32* %212, align 4
  br label %236

223:                                              ; preds = %202
  %224 = zext i32 %106 to i64
  %225 = shl nuw nsw i64 %224, 1
  %226 = add nuw nsw i64 %225, 12
  %227 = call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %226, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %228 = getelementptr inbounds i8, i8* %227, i64 12
  %229 = bitcast i8* %228 to i16*
  %230 = bitcast i8* %227 to %"class.WTF::StringImpl"*
  %231 = bitcast i8* %227 to i32*
  store i32 1, i32* %231, align 4
  %232 = getelementptr inbounds i8, i8* %227, i64 4
  %233 = bitcast i8* %232 to i32*
  store i32 %106, i32* %233, align 4
  %234 = getelementptr inbounds i8, i8* %227, i64 8
  %235 = bitcast i8* %234 to i32*
  store i32 0, i32* %235, align 4
  br label %236

236:                                              ; preds = %203, %206, %221, %223
  %237 = phi i16* [ null, %203 ], [ null, %221 ], [ null, %206 ], [ %229, %223 ]
  %238 = phi %"class.WTF::StringImpl"* [ null, %203 ], [ %204, %221 ], [ %204, %206 ], [ %230, %223 ]
  %239 = ptrtoint %"class.WTF::StringImpl"* %238 to i64
  %240 = zext i32 %3 to i64
  %241 = add nsw i64 %240, -1
  %242 = getelementptr i8, i8* %2, i64 %240
  %243 = getelementptr i16, i16* %237, i64 %240
  %244 = and i64 %240, 4294967280
  %245 = add nsw i64 %244, -16
  %246 = lshr exact i64 %245, 4
  %247 = add nuw nsw i64 %246, 1
  %248 = icmp ult i32 %3, 16
  %249 = trunc i64 %241 to i32
  %250 = icmp ugt i64 %241, 4294967295
  %251 = and i64 %240, 4294967280
  %252 = and i64 %247, 1
  %253 = icmp eq i64 %245, 0
  %254 = sub nuw nsw i64 %247, %252
  %255 = icmp eq i64 %252, 0
  %256 = icmp eq i64 %251, %240
  %257 = and i64 %240, 3
  %258 = icmp eq i64 %257, 0
  br label %259

259:                                              ; preds = %400, %236
  %260 = phi i32 [ 0, %236 ], [ %402, %400 ]
  %261 = phi i32 [ 0, %236 ], [ %401, %400 ]
  %262 = load atomic i32, i32* %9 monotonic, align 4
  %263 = and i32 %262, 1
  %264 = icmp eq i32 %263, 0
  %265 = load i32, i32* %11, align 4
  %266 = icmp ugt i32 %265, %260
  br i1 %264, label %278, label %267

267:                                              ; preds = %259
  %268 = and i1 %12, %266
  br i1 %268, label %269, label %438

269:                                              ; preds = %267
  %270 = zext i32 %260 to i64
  %271 = getelementptr inbounds i8, i8* %13, i64 %270
  %272 = sub i32 %265, %260
  %273 = zext i32 %272 to i64
  %274 = call i8* @memchr(i8* %271, i32 %15, i64 %273) #16
  %275 = icmp eq i8* %274, null
  %276 = ptrtoint i8* %274 to i64
  %277 = sub i64 %276, %16
  br i1 %275, label %438, label %290

278:                                              ; preds = %259
  br i1 %266, label %279, label %438

279:                                              ; preds = %278
  %280 = zext i32 %260 to i64
  br label %281

281:                                              ; preds = %286, %279
  %282 = phi i64 [ %280, %279 ], [ %287, %286 ]
  %283 = getelementptr inbounds i16, i16* %17, i64 %282
  %284 = load i16, i16* %283, align 2
  %285 = icmp eq i16 %284, %1
  br i1 %285, label %290, label %286

286:                                              ; preds = %281
  %287 = add nuw nsw i64 %282, 1
  %288 = trunc i64 %287 to i32
  %289 = icmp eq i32 %265, %288
  br i1 %289, label %438, label %281

290:                                              ; preds = %281, %269
  %291 = phi i64 [ %277, %269 ], [ %282, %281 ]
  %292 = trunc i64 %291 to i32
  %293 = icmp eq i32 %292, -1
  br i1 %293, label %438, label %294

294:                                              ; preds = %290
  %295 = sub i32 %292, %260
  %296 = zext i32 %261 to i64
  %297 = getelementptr inbounds i16, i16* %237, i64 %296
  %298 = bitcast i16* %297 to i8*
  %299 = zext i32 %260 to i64
  %300 = getelementptr inbounds i16, i16* %17, i64 %299
  %301 = bitcast i16* %300 to i8*
  %302 = zext i32 %295 to i64
  %303 = shl nuw nsw i64 %302, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %298, i8* align 2 %301, i64 %303, i1 false)
  %304 = add i32 %295, %261
  br i1 %78, label %400, label %305

305:                                              ; preds = %294
  br i1 %248, label %306, label %326

306:                                              ; preds = %399, %332, %326, %305
  %307 = phi i64 [ 0, %332 ], [ 0, %326 ], [ 0, %305 ], [ %251, %399 ]
  %308 = xor i64 %307, -1
  %309 = add nsw i64 %308, %240
  br i1 %258, label %323, label %310

310:                                              ; preds = %306, %310
  %311 = phi i64 [ %320, %310 ], [ %307, %306 ]
  %312 = phi i64 [ %321, %310 ], [ %257, %306 ]
  %313 = getelementptr inbounds i8, i8* %2, i64 %311
  %314 = load i8, i8* %313, align 1
  %315 = zext i8 %314 to i16
  %316 = trunc i64 %311 to i32
  %317 = add i32 %304, %316
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds i16, i16* %237, i64 %318
  store i16 %315, i16* %319, align 2
  %320 = add nuw nsw i64 %311, 1
  %321 = add i64 %312, -1
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %323, label %310, !llvm.loop !86

323:                                              ; preds = %310, %306
  %324 = phi i64 [ %307, %306 ], [ %320, %310 ]
  %325 = icmp ult i64 %309, 3
  br i1 %325, label %400, label %403

326:                                              ; preds = %305
  %327 = add i32 %261, %292
  %328 = xor i32 %327, -1
  %329 = add i32 %260, %328
  %330 = icmp ult i32 %329, %249
  %331 = or i1 %330, %250
  br i1 %331, label %306, label %332

332:                                              ; preds = %326
  %333 = add i32 %261, %292
  %334 = sub i32 %333, %260
  %335 = zext i32 %334 to i64
  %336 = getelementptr i16, i16* %237, i64 %335
  %337 = bitcast i16* %336 to i8*
  %338 = getelementptr i16, i16* %243, i64 %335
  %339 = bitcast i16* %338 to i8*
  %340 = icmp ugt i8* %339, %2
  %341 = icmp ugt i8* %242, %337
  %342 = and i1 %340, %341
  br i1 %342, label %306, label %343

343:                                              ; preds = %332
  br i1 %253, label %381, label %344

344:                                              ; preds = %343, %344
  %345 = phi i64 [ %378, %344 ], [ 0, %343 ]
  %346 = phi i64 [ %379, %344 ], [ %254, %343 ]
  %347 = getelementptr inbounds i8, i8* %2, i64 %345
  %348 = bitcast i8* %347 to <8 x i8>*
  %349 = load <8 x i8>, <8 x i8>* %348, align 1, !alias.scope !87, !noalias !90
  %350 = getelementptr inbounds i8, i8* %347, i64 8
  %351 = bitcast i8* %350 to <8 x i8>*
  %352 = load <8 x i8>, <8 x i8>* %351, align 1, !alias.scope !87, !noalias !90
  %353 = zext <8 x i8> %349 to <8 x i16>
  %354 = zext <8 x i8> %352 to <8 x i16>
  %355 = trunc i64 %345 to i32
  %356 = add i32 %304, %355
  %357 = zext i32 %356 to i64
  %358 = getelementptr inbounds i16, i16* %237, i64 %357
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %359, align 2, !alias.scope !90
  %360 = getelementptr inbounds i16, i16* %358, i64 8
  %361 = bitcast i16* %360 to <8 x i16>*
  store <8 x i16> %354, <8 x i16>* %361, align 2, !alias.scope !90
  %362 = or i64 %345, 16
  %363 = getelementptr inbounds i8, i8* %2, i64 %362
  %364 = bitcast i8* %363 to <8 x i8>*
  %365 = load <8 x i8>, <8 x i8>* %364, align 1, !alias.scope !87, !noalias !90
  %366 = getelementptr inbounds i8, i8* %363, i64 8
  %367 = bitcast i8* %366 to <8 x i8>*
  %368 = load <8 x i8>, <8 x i8>* %367, align 1, !alias.scope !87, !noalias !90
  %369 = zext <8 x i8> %365 to <8 x i16>
  %370 = zext <8 x i8> %368 to <8 x i16>
  %371 = trunc i64 %362 to i32
  %372 = add i32 %304, %371
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds i16, i16* %237, i64 %373
  %375 = bitcast i16* %374 to <8 x i16>*
  store <8 x i16> %369, <8 x i16>* %375, align 2, !alias.scope !90
  %376 = getelementptr inbounds i16, i16* %374, i64 8
  %377 = bitcast i16* %376 to <8 x i16>*
  store <8 x i16> %370, <8 x i16>* %377, align 2, !alias.scope !90
  %378 = add i64 %345, 32
  %379 = add i64 %346, -2
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %381, label %344, !llvm.loop !92

381:                                              ; preds = %344, %343
  %382 = phi i64 [ 0, %343 ], [ %378, %344 ]
  br i1 %255, label %399, label %383

383:                                              ; preds = %381
  %384 = getelementptr inbounds i8, i8* %2, i64 %382
  %385 = bitcast i8* %384 to <8 x i8>*
  %386 = load <8 x i8>, <8 x i8>* %385, align 1, !alias.scope !87, !noalias !90
  %387 = getelementptr inbounds i8, i8* %384, i64 8
  %388 = bitcast i8* %387 to <8 x i8>*
  %389 = load <8 x i8>, <8 x i8>* %388, align 1, !alias.scope !87, !noalias !90
  %390 = zext <8 x i8> %386 to <8 x i16>
  %391 = zext <8 x i8> %389 to <8 x i16>
  %392 = trunc i64 %382 to i32
  %393 = add i32 %304, %392
  %394 = zext i32 %393 to i64
  %395 = getelementptr inbounds i16, i16* %237, i64 %394
  %396 = bitcast i16* %395 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %396, align 2, !alias.scope !90
  %397 = getelementptr inbounds i16, i16* %395, i64 8
  %398 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %391, <8 x i16>* %398, align 2, !alias.scope !90
  br label %399

399:                                              ; preds = %381, %383
  br i1 %256, label %400, label %306

400:                                              ; preds = %323, %403, %399, %294
  %401 = add i32 %304, %3
  %402 = add i32 %292, 1
  br label %259

403:                                              ; preds = %323, %403
  %404 = phi i64 [ %436, %403 ], [ %324, %323 ]
  %405 = getelementptr inbounds i8, i8* %2, i64 %404
  %406 = load i8, i8* %405, align 1
  %407 = zext i8 %406 to i16
  %408 = trunc i64 %404 to i32
  %409 = add i32 %304, %408
  %410 = zext i32 %409 to i64
  %411 = getelementptr inbounds i16, i16* %237, i64 %410
  store i16 %407, i16* %411, align 2
  %412 = add nuw nsw i64 %404, 1
  %413 = getelementptr inbounds i8, i8* %2, i64 %412
  %414 = load i8, i8* %413, align 1
  %415 = zext i8 %414 to i16
  %416 = trunc i64 %412 to i32
  %417 = add i32 %304, %416
  %418 = zext i32 %417 to i64
  %419 = getelementptr inbounds i16, i16* %237, i64 %418
  store i16 %415, i16* %419, align 2
  %420 = add nuw nsw i64 %404, 2
  %421 = getelementptr inbounds i8, i8* %2, i64 %420
  %422 = load i8, i8* %421, align 1
  %423 = zext i8 %422 to i16
  %424 = trunc i64 %420 to i32
  %425 = add i32 %304, %424
  %426 = zext i32 %425 to i64
  %427 = getelementptr inbounds i16, i16* %237, i64 %426
  store i16 %423, i16* %427, align 2
  %428 = add nuw nsw i64 %404, 3
  %429 = getelementptr inbounds i8, i8* %2, i64 %428
  %430 = load i8, i8* %429, align 1
  %431 = zext i8 %430 to i16
  %432 = trunc i64 %428 to i32
  %433 = add i32 %304, %432
  %434 = zext i32 %433 to i64
  %435 = getelementptr inbounds i16, i16* %237, i64 %434
  store i16 %431, i16* %435, align 2
  %436 = add nuw nsw i64 %404, 4
  %437 = icmp eq i64 %436, %240
  br i1 %437, label %400, label %403, !llvm.loop !93

438:                                              ; preds = %269, %278, %267, %290, %286
  %439 = zext i32 %260 to i64
  %440 = sub i32 %265, %260
  %441 = zext i32 %261 to i64
  %442 = getelementptr inbounds i16, i16* %237, i64 %441
  %443 = bitcast i16* %442 to i8*
  %444 = getelementptr inbounds i16, i16* %17, i64 %439
  %445 = bitcast i16* %444 to i8*
  %446 = zext i32 %440 to i64
  %447 = shl nuw nsw i64 %446, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %443, i8* align 2 %445, i64 %447, i1 false)
  br label %448

448:                                              ; preds = %75, %61, %58, %195, %438
  %449 = phi i64 [ %146, %195 ], [ %239, %438 ], [ %59, %58 ], [ %59, %61 ], [ %59, %75 ]
  %450 = inttoptr i64 %449 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %450
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceEDsPKDsj(%"class.WTF::StringImpl"*, i16 zeroext, i16* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %12 = icmp ult i16 %1, 256
  %13 = bitcast %"class.WTF::StringImpl"* %10 to i8*
  %14 = and i16 %1, 255
  %15 = zext i16 %14 to i32
  %16 = ptrtoint %"class.WTF::StringImpl"* %10 to i64
  %17 = bitcast %"class.WTF::StringImpl"* %10 to i16*
  %18 = load i32, i32* %11, align 4
  br label %19

19:                                               ; preds = %53, %4
  %20 = phi i32 [ 0, %4 ], [ %55, %53 ]
  %21 = phi i32 [ 0, %4 ], [ %54, %53 ]
  %22 = load atomic i32, i32* %9 monotonic, align 4
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp ugt i32 %18, %20
  br i1 %24, label %37, label %26

26:                                               ; preds = %19
  %27 = and i1 %12, %25
  br i1 %27, label %28, label %56

28:                                               ; preds = %26
  %29 = zext i32 %20 to i64
  %30 = getelementptr inbounds i8, i8* %13, i64 %29
  %31 = sub i32 %18, %20
  %32 = zext i32 %31 to i64
  %33 = tail call i8* @memchr(i8* %30, i32 %15, i64 %32) #16
  %34 = icmp eq i8* %33, null
  %35 = ptrtoint i8* %33 to i64
  %36 = sub i64 %35, %16
  br i1 %34, label %56, label %49

37:                                               ; preds = %19
  br i1 %25, label %38, label %56

38:                                               ; preds = %37
  %39 = zext i32 %20 to i64
  br label %40

40:                                               ; preds = %45, %38
  %41 = phi i64 [ %39, %38 ], [ %46, %45 ]
  %42 = getelementptr inbounds i16, i16* %17, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = icmp eq i16 %43, %1
  br i1 %44, label %49, label %45

45:                                               ; preds = %40
  %46 = add nuw nsw i64 %41, 1
  %47 = trunc i64 %46 to i32
  %48 = icmp eq i32 %18, %47
  br i1 %48, label %56, label %40

49:                                               ; preds = %40, %28
  %50 = phi i64 [ %36, %28 ], [ %41, %40 ]
  %51 = trunc i64 %50 to i32
  %52 = icmp eq i32 %51, -1
  br i1 %52, label %56, label %53

53:                                               ; preds = %49
  %54 = add i32 %21, 1
  %55 = add nuw i32 %51, 1
  br label %19

56:                                               ; preds = %28, %37, %26, %49, %45
  %57 = icmp eq i32 %21, 0
  br i1 %57, label %58, label %77

58:                                               ; preds = %56
  %59 = ptrtoint %"class.WTF::StringImpl"* %0 to i64
  %60 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %60, label %651, label %61

61:                                               ; preds = %58
  %62 = load atomic i32, i32* %9 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %651

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i33
  %69 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %68, i33 1) #15
  %70 = extractvalue { i33, i1 } %69, 1
  %71 = extractvalue { i33, i1 } %69, 0
  %72 = icmp slt i33 %71, 0
  %73 = or i1 %70, %72
  br i1 %73, label %74, label %75, !prof !2

74:                                               ; preds = %65
  tail call void @llvm.trap() #15
  unreachable

75:                                               ; preds = %65
  %76 = trunc i33 %71 to i32
  store i32 %76, i32* %66, align 4
  br label %651

77:                                               ; preds = %56
  %78 = icmp eq i32 %3, 0
  br i1 %78, label %86, label %79

79:                                               ; preds = %77
  %80 = udiv i32 -1, %3
  %81 = icmp ugt i32 %21, %80
  br i1 %81, label %82, label %86

82:                                               ; preds = %79
  %83 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #15
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 1392, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.8, i64 0, i64 0)) #15
  %84 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #15
  %85 = load i32, i32* %11, align 4
  br label %86

86:                                               ; preds = %79, %77, %82
  %87 = phi i32 [ %18, %79 ], [ %18, %77 ], [ %85, %82 ]
  %88 = mul i32 %21, %3
  %89 = sub i32 %87, %21
  %90 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #15
  %91 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %91, align 8
  %92 = xor i32 %88, -1
  %93 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %93)
  %94 = icmp ult i32 %89, %92
  br i1 %94, label %95, label %96

95:                                               ; preds = %86
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93)
  store i8* null, i8** %91, align 8
  br label %105

96:                                               ; preds = %86
  %97 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %89) #15
  %98 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %92) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.9, i64 0, i64 0), i8* %97, i8* %98) #15
  %99 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %100 = load i8*, i8** %99, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93)
  store i8* %100, i8** %91, align 8
  %101 = icmp eq i8* %100, null
  br i1 %101, label %105, label %102

102:                                              ; preds = %96
  %103 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %103) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 1396, %"class.logging::CheckOpResult"* nonnull %7) #15
  %104 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %103) #15
  br label %105

105:                                              ; preds = %95, %96, %102
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #15
  %106 = add i32 %89, %88
  %107 = load atomic i32, i32* %9 monotonic, align 4
  %108 = and i32 %107, 1
  %109 = icmp eq i32 %108, 0
  %110 = icmp eq i32 %106, 0
  br i1 %109, label %549, label %111

111:                                              ; preds = %105
  br i1 %110, label %112, label %132

112:                                              ; preds = %111
  %113 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %114 = icmp eq %"class.WTF::StringImpl"* %113, null
  br i1 %114, label %145, label %115

115:                                              ; preds = %112
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %145

120:                                              ; preds = %115
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 0
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i33
  %124 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %123, i33 1) #15
  %125 = extractvalue { i33, i1 } %124, 1
  %126 = extractvalue { i33, i1 } %124, 0
  %127 = icmp slt i33 %126, 0
  %128 = or i1 %125, %127
  br i1 %128, label %129, label %130, !prof !2

129:                                              ; preds = %120
  call void @llvm.trap() #15
  unreachable

130:                                              ; preds = %120
  %131 = trunc i33 %126 to i32
  store i32 %131, i32* %121, align 4
  br label %145

132:                                              ; preds = %111
  %133 = zext i32 %106 to i64
  %134 = shl nuw nsw i64 %133, 1
  %135 = add nuw nsw i64 %134, 12
  %136 = call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %135, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %137 = getelementptr inbounds i8, i8* %136, i64 12
  %138 = bitcast i8* %137 to i16*
  %139 = bitcast i8* %136 to %"class.WTF::StringImpl"*
  %140 = bitcast i8* %136 to i32*
  store i32 1, i32* %140, align 4
  %141 = getelementptr inbounds i8, i8* %136, i64 4
  %142 = bitcast i8* %141 to i32*
  store i32 %106, i32* %142, align 4
  %143 = getelementptr inbounds i8, i8* %136, i64 8
  %144 = bitcast i8* %143 to i32*
  store i32 0, i32* %144, align 4
  br label %145

145:                                              ; preds = %112, %115, %130, %132
  %146 = phi i16* [ null, %112 ], [ null, %130 ], [ null, %115 ], [ %138, %132 ]
  %147 = phi %"class.WTF::StringImpl"* [ null, %112 ], [ %113, %130 ], [ %113, %115 ], [ %139, %132 ]
  %148 = ptrtoint %"class.WTF::StringImpl"* %147 to i64
  %149 = bitcast i16* %2 to i8*
  %150 = zext i32 %3 to i64
  %151 = shl nuw nsw i64 %150, 1
  %152 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %153 = bitcast %"class.WTF::StringImpl"* %152 to i8*
  %154 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %155 = bitcast %"class.WTF::StringImpl"* %154 to i8*
  br label %156

156:                                              ; preds = %321, %145
  %157 = phi i32 [ 0, %145 ], [ %327, %321 ]
  %158 = phi i32 [ 0, %145 ], [ %326, %321 ]
  %159 = load atomic i32, i32* %9 monotonic, align 4
  %160 = and i32 %159, 1
  %161 = icmp eq i32 %160, 0
  %162 = load i32, i32* %11, align 4
  %163 = icmp ugt i32 %162, %157
  br i1 %161, label %175, label %164

164:                                              ; preds = %156
  %165 = and i1 %12, %163
  br i1 %165, label %166, label %371

166:                                              ; preds = %164
  %167 = zext i32 %157 to i64
  %168 = getelementptr inbounds i8, i8* %13, i64 %167
  %169 = sub i32 %162, %157
  %170 = zext i32 %169 to i64
  %171 = call i8* @memchr(i8* %168, i32 %15, i64 %170) #16
  %172 = icmp eq i8* %171, null
  %173 = ptrtoint i8* %171 to i64
  %174 = sub i64 %173, %16
  br i1 %172, label %371, label %187

175:                                              ; preds = %156
  br i1 %163, label %176, label %371

176:                                              ; preds = %175
  %177 = zext i32 %157 to i64
  br label %178

178:                                              ; preds = %183, %176
  %179 = phi i64 [ %177, %176 ], [ %184, %183 ]
  %180 = getelementptr inbounds i16, i16* %17, i64 %179
  %181 = load i16, i16* %180, align 2
  %182 = icmp eq i16 %181, %1
  br i1 %182, label %187, label %183

183:                                              ; preds = %178
  %184 = add nuw nsw i64 %179, 1
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %162, %185
  br i1 %186, label %371, label %178

187:                                              ; preds = %178, %166
  %188 = phi i64 [ %174, %166 ], [ %179, %178 ]
  %189 = trunc i64 %188 to i32
  %190 = icmp eq i32 %189, -1
  br i1 %190, label %371, label %191

191:                                              ; preds = %187
  %192 = sub i32 %189, %157
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %321, label %194

194:                                              ; preds = %191
  %195 = zext i32 %192 to i64
  %196 = icmp ult i32 %192, 16
  br i1 %196, label %197, label %221

197:                                              ; preds = %319, %234, %221, %194
  %198 = phi i64 [ 0, %234 ], [ 0, %221 ], [ 0, %194 ], [ %249, %319 ]
  %199 = xor i64 %198, -1
  %200 = add nsw i64 %199, %195
  %201 = and i64 %195, 3
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %218, label %203

203:                                              ; preds = %197, %203
  %204 = phi i64 [ %215, %203 ], [ %198, %197 ]
  %205 = phi i64 [ %216, %203 ], [ %201, %197 ]
  %206 = trunc i64 %204 to i32
  %207 = add i32 %157, %206
  %208 = zext i32 %207 to i64
  %209 = getelementptr inbounds i8, i8* %13, i64 %208
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i16
  %212 = add i32 %158, %206
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds i16, i16* %146, i64 %213
  store i16 %211, i16* %214, align 2
  %215 = add nuw nsw i64 %204, 1
  %216 = add i64 %205, -1
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %218, label %203, !llvm.loop !94

218:                                              ; preds = %203, %197
  %219 = phi i64 [ %198, %197 ], [ %215, %203 ]
  %220 = icmp ult i64 %200, 3
  br i1 %220, label %321, label %328

221:                                              ; preds = %194
  %222 = add nsw i64 %195, -1
  %223 = trunc i64 %222 to i32
  %224 = xor i32 %158, -1
  %225 = icmp ult i32 %224, %223
  %226 = icmp ugt i64 %222, 4294967295
  %227 = or i1 %225, %226
  %228 = trunc i64 %222 to i32
  %229 = xor i32 %157, -1
  %230 = icmp ult i32 %229, %228
  %231 = icmp ugt i64 %222, 4294967295
  %232 = or i1 %230, %231
  %233 = or i1 %227, %232
  br i1 %233, label %197, label %234

234:                                              ; preds = %221
  %235 = zext i32 %158 to i64
  %236 = getelementptr i16, i16* %146, i64 %235
  %237 = bitcast i16* %236 to i8*
  %238 = add nuw nsw i64 %235, %195
  %239 = getelementptr i16, i16* %146, i64 %238
  %240 = bitcast i16* %239 to i8*
  %241 = zext i32 %157 to i64
  %242 = getelementptr i8, i8* %153, i64 %241
  %243 = add nuw nsw i64 %241, %195
  %244 = getelementptr i8, i8* %155, i64 %243
  %245 = icmp ugt i8* %244, %237
  %246 = icmp ult i8* %242, %240
  %247 = and i1 %245, %246
  br i1 %247, label %197, label %248

248:                                              ; preds = %234
  %249 = and i64 %195, 4294967280
  %250 = add nsw i64 %249, -16
  %251 = lshr exact i64 %250, 4
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 1
  %254 = icmp eq i64 %250, 0
  br i1 %254, label %298, label %255

255:                                              ; preds = %248
  %256 = sub nuw nsw i64 %252, %253
  br label %257

257:                                              ; preds = %257, %255
  %258 = phi i64 [ 0, %255 ], [ %295, %257 ]
  %259 = phi i64 [ %256, %255 ], [ %296, %257 ]
  %260 = trunc i64 %258 to i32
  %261 = add i32 %157, %260
  %262 = zext i32 %261 to i64
  %263 = getelementptr inbounds i8, i8* %13, i64 %262
  %264 = bitcast i8* %263 to <8 x i8>*
  %265 = load <8 x i8>, <8 x i8>* %264, align 1, !alias.scope !95
  %266 = getelementptr inbounds i8, i8* %263, i64 8
  %267 = bitcast i8* %266 to <8 x i8>*
  %268 = load <8 x i8>, <8 x i8>* %267, align 1, !alias.scope !95
  %269 = zext <8 x i8> %265 to <8 x i16>
  %270 = zext <8 x i8> %268 to <8 x i16>
  %271 = add i32 %158, %260
  %272 = zext i32 %271 to i64
  %273 = getelementptr inbounds i16, i16* %146, i64 %272
  %274 = bitcast i16* %273 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %274, align 2, !alias.scope !98, !noalias !95
  %275 = getelementptr inbounds i16, i16* %273, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %276, align 2, !alias.scope !98, !noalias !95
  %277 = trunc i64 %258 to i32
  %278 = or i32 %277, 16
  %279 = add i32 %157, %278
  %280 = zext i32 %279 to i64
  %281 = getelementptr inbounds i8, i8* %13, i64 %280
  %282 = bitcast i8* %281 to <8 x i8>*
  %283 = load <8 x i8>, <8 x i8>* %282, align 1, !alias.scope !95
  %284 = getelementptr inbounds i8, i8* %281, i64 8
  %285 = bitcast i8* %284 to <8 x i8>*
  %286 = load <8 x i8>, <8 x i8>* %285, align 1, !alias.scope !95
  %287 = zext <8 x i8> %283 to <8 x i16>
  %288 = zext <8 x i8> %286 to <8 x i16>
  %289 = add i32 %158, %278
  %290 = zext i32 %289 to i64
  %291 = getelementptr inbounds i16, i16* %146, i64 %290
  %292 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %292, align 2, !alias.scope !98, !noalias !95
  %293 = getelementptr inbounds i16, i16* %291, i64 8
  %294 = bitcast i16* %293 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %294, align 2, !alias.scope !98, !noalias !95
  %295 = add i64 %258, 32
  %296 = add i64 %259, -2
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %298, label %257, !llvm.loop !100

298:                                              ; preds = %257, %248
  %299 = phi i64 [ 0, %248 ], [ %295, %257 ]
  %300 = icmp eq i64 %253, 0
  br i1 %300, label %319, label %301

301:                                              ; preds = %298
  %302 = trunc i64 %299 to i32
  %303 = add i32 %157, %302
  %304 = zext i32 %303 to i64
  %305 = getelementptr inbounds i8, i8* %13, i64 %304
  %306 = bitcast i8* %305 to <8 x i8>*
  %307 = load <8 x i8>, <8 x i8>* %306, align 1, !alias.scope !95
  %308 = getelementptr inbounds i8, i8* %305, i64 8
  %309 = bitcast i8* %308 to <8 x i8>*
  %310 = load <8 x i8>, <8 x i8>* %309, align 1, !alias.scope !95
  %311 = zext <8 x i8> %307 to <8 x i16>
  %312 = zext <8 x i8> %310 to <8 x i16>
  %313 = add i32 %158, %302
  %314 = zext i32 %313 to i64
  %315 = getelementptr inbounds i16, i16* %146, i64 %314
  %316 = bitcast i16* %315 to <8 x i16>*
  store <8 x i16> %311, <8 x i16>* %316, align 2, !alias.scope !98, !noalias !95
  %317 = getelementptr inbounds i16, i16* %315, i64 8
  %318 = bitcast i16* %317 to <8 x i16>*
  store <8 x i16> %312, <8 x i16>* %318, align 2, !alias.scope !98, !noalias !95
  br label %319

319:                                              ; preds = %298, %301
  %320 = icmp eq i64 %249, %195
  br i1 %320, label %321, label %197

321:                                              ; preds = %218, %328, %319, %191
  %322 = add i32 %192, %158
  %323 = zext i32 %322 to i64
  %324 = getelementptr inbounds i16, i16* %146, i64 %323
  %325 = bitcast i16* %324 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %325, i8* align 2 %149, i64 %151, i1 false)
  %326 = add i32 %322, %3
  %327 = add i32 %189, 1
  br label %156

328:                                              ; preds = %218, %328
  %329 = phi i64 [ %369, %328 ], [ %219, %218 ]
  %330 = trunc i64 %329 to i32
  %331 = add i32 %157, %330
  %332 = zext i32 %331 to i64
  %333 = getelementptr inbounds i8, i8* %13, i64 %332
  %334 = load i8, i8* %333, align 1
  %335 = zext i8 %334 to i16
  %336 = add i32 %158, %330
  %337 = zext i32 %336 to i64
  %338 = getelementptr inbounds i16, i16* %146, i64 %337
  store i16 %335, i16* %338, align 2
  %339 = trunc i64 %329 to i32
  %340 = add i32 %339, 1
  %341 = add i32 %157, %340
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds i8, i8* %13, i64 %342
  %344 = load i8, i8* %343, align 1
  %345 = zext i8 %344 to i16
  %346 = add i32 %158, %340
  %347 = zext i32 %346 to i64
  %348 = getelementptr inbounds i16, i16* %146, i64 %347
  store i16 %345, i16* %348, align 2
  %349 = trunc i64 %329 to i32
  %350 = add i32 %349, 2
  %351 = add i32 %157, %350
  %352 = zext i32 %351 to i64
  %353 = getelementptr inbounds i8, i8* %13, i64 %352
  %354 = load i8, i8* %353, align 1
  %355 = zext i8 %354 to i16
  %356 = add i32 %158, %350
  %357 = zext i32 %356 to i64
  %358 = getelementptr inbounds i16, i16* %146, i64 %357
  store i16 %355, i16* %358, align 2
  %359 = trunc i64 %329 to i32
  %360 = add i32 %359, 3
  %361 = add i32 %157, %360
  %362 = zext i32 %361 to i64
  %363 = getelementptr inbounds i8, i8* %13, i64 %362
  %364 = load i8, i8* %363, align 1
  %365 = zext i8 %364 to i16
  %366 = add i32 %158, %360
  %367 = zext i32 %366 to i64
  %368 = getelementptr inbounds i16, i16* %146, i64 %367
  store i16 %365, i16* %368, align 2
  %369 = add nuw nsw i64 %329, 4
  %370 = icmp eq i64 %369, %195
  br i1 %370, label %321, label %328, !llvm.loop !101

371:                                              ; preds = %166, %175, %164, %187, %183
  %372 = sub i32 %162, %157
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %651, label %374

374:                                              ; preds = %371
  %375 = zext i32 %372 to i64
  %376 = icmp ult i32 %372, 16
  br i1 %376, label %482, label %377

377:                                              ; preds = %374
  %378 = add nsw i64 %375, -1
  %379 = trunc i64 %378 to i32
  %380 = xor i32 %158, -1
  %381 = icmp ult i32 %380, %379
  %382 = icmp ugt i64 %378, 4294967295
  %383 = or i1 %381, %382
  %384 = trunc i64 %378 to i32
  %385 = xor i32 %157, -1
  %386 = icmp ult i32 %385, %384
  %387 = icmp ugt i64 %378, 4294967295
  %388 = or i1 %386, %387
  %389 = or i1 %383, %388
  br i1 %389, label %482, label %390

390:                                              ; preds = %377
  %391 = zext i32 %158 to i64
  %392 = getelementptr i16, i16* %146, i64 %391
  %393 = bitcast i16* %392 to i8*
  %394 = add nuw nsw i64 %391, %375
  %395 = getelementptr i16, i16* %146, i64 %394
  %396 = bitcast i16* %395 to i8*
  %397 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1, i32 0
  %398 = bitcast i32* %397 to i8*
  %399 = zext i32 %157 to i64
  %400 = getelementptr i8, i8* %398, i64 %399
  %401 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1, i32 0
  %402 = bitcast i32* %401 to i8*
  %403 = add nuw nsw i64 %399, %375
  %404 = getelementptr i8, i8* %402, i64 %403
  %405 = icmp ugt i8* %404, %393
  %406 = icmp ult i8* %400, %396
  %407 = and i1 %405, %406
  br i1 %407, label %482, label %408

408:                                              ; preds = %390
  %409 = and i64 %375, 4294967280
  %410 = add nsw i64 %409, -16
  %411 = lshr exact i64 %410, 4
  %412 = add nuw nsw i64 %411, 1
  %413 = and i64 %412, 1
  %414 = icmp eq i64 %410, 0
  br i1 %414, label %460, label %415

415:                                              ; preds = %408
  %416 = sub nuw nsw i64 %412, %413
  br label %417

417:                                              ; preds = %417, %415
  %418 = phi i64 [ 0, %415 ], [ %455, %417 ]
  %419 = phi i64 [ %416, %415 ], [ %456, %417 ]
  %420 = trunc i64 %418 to i32
  %421 = add i32 %157, %420
  %422 = zext i32 %421 to i64
  %423 = getelementptr inbounds i8, i8* %13, i64 %422
  %424 = bitcast i8* %423 to <8 x i8>*
  %425 = load <8 x i8>, <8 x i8>* %424, align 1, !alias.scope !102
  %426 = getelementptr inbounds i8, i8* %423, i64 8
  %427 = bitcast i8* %426 to <8 x i8>*
  %428 = load <8 x i8>, <8 x i8>* %427, align 1, !alias.scope !102
  %429 = zext <8 x i8> %425 to <8 x i16>
  %430 = zext <8 x i8> %428 to <8 x i16>
  %431 = add i32 %158, %420
  %432 = zext i32 %431 to i64
  %433 = getelementptr inbounds i16, i16* %146, i64 %432
  %434 = bitcast i16* %433 to <8 x i16>*
  store <8 x i16> %429, <8 x i16>* %434, align 2, !alias.scope !105, !noalias !102
  %435 = getelementptr inbounds i16, i16* %433, i64 8
  %436 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %430, <8 x i16>* %436, align 2, !alias.scope !105, !noalias !102
  %437 = trunc i64 %418 to i32
  %438 = or i32 %437, 16
  %439 = add i32 %157, %438
  %440 = zext i32 %439 to i64
  %441 = getelementptr inbounds i8, i8* %13, i64 %440
  %442 = bitcast i8* %441 to <8 x i8>*
  %443 = load <8 x i8>, <8 x i8>* %442, align 1, !alias.scope !102
  %444 = getelementptr inbounds i8, i8* %441, i64 8
  %445 = bitcast i8* %444 to <8 x i8>*
  %446 = load <8 x i8>, <8 x i8>* %445, align 1, !alias.scope !102
  %447 = zext <8 x i8> %443 to <8 x i16>
  %448 = zext <8 x i8> %446 to <8 x i16>
  %449 = add i32 %158, %438
  %450 = zext i32 %449 to i64
  %451 = getelementptr inbounds i16, i16* %146, i64 %450
  %452 = bitcast i16* %451 to <8 x i16>*
  store <8 x i16> %447, <8 x i16>* %452, align 2, !alias.scope !105, !noalias !102
  %453 = getelementptr inbounds i16, i16* %451, i64 8
  %454 = bitcast i16* %453 to <8 x i16>*
  store <8 x i16> %448, <8 x i16>* %454, align 2, !alias.scope !105, !noalias !102
  %455 = add i64 %418, 32
  %456 = add i64 %419, -2
  %457 = icmp eq i64 %456, 0
  br i1 %457, label %458, label %417, !llvm.loop !107

458:                                              ; preds = %417
  %459 = trunc i64 %455 to i32
  br label %460

460:                                              ; preds = %458, %408
  %461 = phi i32 [ 0, %408 ], [ %459, %458 ]
  %462 = icmp eq i64 %413, 0
  br i1 %462, label %480, label %463

463:                                              ; preds = %460
  %464 = add i32 %157, %461
  %465 = zext i32 %464 to i64
  %466 = getelementptr inbounds i8, i8* %13, i64 %465
  %467 = bitcast i8* %466 to <8 x i8>*
  %468 = load <8 x i8>, <8 x i8>* %467, align 1, !alias.scope !102
  %469 = getelementptr inbounds i8, i8* %466, i64 8
  %470 = bitcast i8* %469 to <8 x i8>*
  %471 = load <8 x i8>, <8 x i8>* %470, align 1, !alias.scope !102
  %472 = zext <8 x i8> %468 to <8 x i16>
  %473 = zext <8 x i8> %471 to <8 x i16>
  %474 = add i32 %158, %461
  %475 = zext i32 %474 to i64
  %476 = getelementptr inbounds i16, i16* %146, i64 %475
  %477 = bitcast i16* %476 to <8 x i16>*
  store <8 x i16> %472, <8 x i16>* %477, align 2, !alias.scope !105, !noalias !102
  %478 = getelementptr inbounds i16, i16* %476, i64 8
  %479 = bitcast i16* %478 to <8 x i16>*
  store <8 x i16> %473, <8 x i16>* %479, align 2, !alias.scope !105, !noalias !102
  br label %480

480:                                              ; preds = %460, %463
  %481 = icmp eq i64 %409, %375
  br i1 %481, label %651, label %482

482:                                              ; preds = %480, %390, %377, %374
  %483 = phi i64 [ 0, %390 ], [ 0, %377 ], [ 0, %374 ], [ %409, %480 ]
  %484 = xor i64 %483, -1
  %485 = add nsw i64 %484, %375
  %486 = and i64 %375, 3
  %487 = icmp eq i64 %486, 0
  br i1 %487, label %503, label %488

488:                                              ; preds = %482, %488
  %489 = phi i64 [ %500, %488 ], [ %483, %482 ]
  %490 = phi i64 [ %501, %488 ], [ %486, %482 ]
  %491 = trunc i64 %489 to i32
  %492 = add i32 %157, %491
  %493 = zext i32 %492 to i64
  %494 = getelementptr inbounds i8, i8* %13, i64 %493
  %495 = load i8, i8* %494, align 1
  %496 = zext i8 %495 to i16
  %497 = add i32 %158, %491
  %498 = zext i32 %497 to i64
  %499 = getelementptr inbounds i16, i16* %146, i64 %498
  store i16 %496, i16* %499, align 2
  %500 = add nuw nsw i64 %489, 1
  %501 = add i64 %490, -1
  %502 = icmp eq i64 %501, 0
  br i1 %502, label %503, label %488, !llvm.loop !108

503:                                              ; preds = %488, %482
  %504 = phi i64 [ %483, %482 ], [ %500, %488 ]
  %505 = icmp ult i64 %485, 3
  br i1 %505, label %651, label %506

506:                                              ; preds = %503, %506
  %507 = phi i64 [ %547, %506 ], [ %504, %503 ]
  %508 = trunc i64 %507 to i32
  %509 = add i32 %157, %508
  %510 = zext i32 %509 to i64
  %511 = getelementptr inbounds i8, i8* %13, i64 %510
  %512 = load i8, i8* %511, align 1
  %513 = zext i8 %512 to i16
  %514 = add i32 %158, %508
  %515 = zext i32 %514 to i64
  %516 = getelementptr inbounds i16, i16* %146, i64 %515
  store i16 %513, i16* %516, align 2
  %517 = trunc i64 %507 to i32
  %518 = add i32 %517, 1
  %519 = add i32 %157, %518
  %520 = zext i32 %519 to i64
  %521 = getelementptr inbounds i8, i8* %13, i64 %520
  %522 = load i8, i8* %521, align 1
  %523 = zext i8 %522 to i16
  %524 = add i32 %158, %518
  %525 = zext i32 %524 to i64
  %526 = getelementptr inbounds i16, i16* %146, i64 %525
  store i16 %523, i16* %526, align 2
  %527 = trunc i64 %507 to i32
  %528 = add i32 %527, 2
  %529 = add i32 %157, %528
  %530 = zext i32 %529 to i64
  %531 = getelementptr inbounds i8, i8* %13, i64 %530
  %532 = load i8, i8* %531, align 1
  %533 = zext i8 %532 to i16
  %534 = add i32 %158, %528
  %535 = zext i32 %534 to i64
  %536 = getelementptr inbounds i16, i16* %146, i64 %535
  store i16 %533, i16* %536, align 2
  %537 = trunc i64 %507 to i32
  %538 = add i32 %537, 3
  %539 = add i32 %157, %538
  %540 = zext i32 %539 to i64
  %541 = getelementptr inbounds i8, i8* %13, i64 %540
  %542 = load i8, i8* %541, align 1
  %543 = zext i8 %542 to i16
  %544 = add i32 %158, %538
  %545 = zext i32 %544 to i64
  %546 = getelementptr inbounds i16, i16* %146, i64 %545
  store i16 %543, i16* %546, align 2
  %547 = add nuw nsw i64 %507, 4
  %548 = icmp eq i64 %547, %375
  br i1 %548, label %651, label %506, !llvm.loop !109

549:                                              ; preds = %105
  br i1 %110, label %550, label %570

550:                                              ; preds = %549
  %551 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %552 = icmp eq %"class.WTF::StringImpl"* %551, null
  br i1 %552, label %583, label %553

553:                                              ; preds = %550
  %554 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %551, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %555 = load atomic i32, i32* %554 monotonic, align 4
  %556 = and i32 %555, 2
  %557 = icmp eq i32 %556, 0
  br i1 %557, label %558, label %583

558:                                              ; preds = %553
  %559 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %551, i64 0, i32 0
  %560 = load i32, i32* %559, align 4
  %561 = zext i32 %560 to i33
  %562 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %561, i33 1) #15
  %563 = extractvalue { i33, i1 } %562, 1
  %564 = extractvalue { i33, i1 } %562, 0
  %565 = icmp slt i33 %564, 0
  %566 = or i1 %563, %565
  br i1 %566, label %567, label %568, !prof !2

567:                                              ; preds = %558
  call void @llvm.trap() #15
  unreachable

568:                                              ; preds = %558
  %569 = trunc i33 %564 to i32
  store i32 %569, i32* %559, align 4
  br label %583

570:                                              ; preds = %549
  %571 = zext i32 %106 to i64
  %572 = shl nuw nsw i64 %571, 1
  %573 = add nuw nsw i64 %572, 12
  %574 = call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %573, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %575 = getelementptr inbounds i8, i8* %574, i64 12
  %576 = bitcast i8* %575 to i16*
  %577 = bitcast i8* %574 to %"class.WTF::StringImpl"*
  %578 = bitcast i8* %574 to i32*
  store i32 1, i32* %578, align 4
  %579 = getelementptr inbounds i8, i8* %574, i64 4
  %580 = bitcast i8* %579 to i32*
  store i32 %106, i32* %580, align 4
  %581 = getelementptr inbounds i8, i8* %574, i64 8
  %582 = bitcast i8* %581 to i32*
  store i32 0, i32* %582, align 4
  br label %583

583:                                              ; preds = %550, %553, %568, %570
  %584 = phi i16* [ null, %550 ], [ null, %568 ], [ null, %553 ], [ %576, %570 ]
  %585 = phi %"class.WTF::StringImpl"* [ null, %550 ], [ %551, %568 ], [ %551, %553 ], [ %577, %570 ]
  %586 = ptrtoint %"class.WTF::StringImpl"* %585 to i64
  %587 = bitcast i16* %2 to i8*
  %588 = zext i32 %3 to i64
  %589 = shl nuw nsw i64 %588, 1
  br label %590

590:                                              ; preds = %625, %583
  %591 = phi i32 [ 0, %583 ], [ %640, %625 ]
  %592 = phi i32 [ 0, %583 ], [ %639, %625 ]
  %593 = load atomic i32, i32* %9 monotonic, align 4
  %594 = and i32 %593, 1
  %595 = icmp eq i32 %594, 0
  %596 = load i32, i32* %11, align 4
  %597 = icmp ugt i32 %596, %591
  br i1 %595, label %609, label %598

598:                                              ; preds = %590
  %599 = and i1 %12, %597
  br i1 %599, label %600, label %641

600:                                              ; preds = %598
  %601 = zext i32 %591 to i64
  %602 = getelementptr inbounds i8, i8* %13, i64 %601
  %603 = sub i32 %596, %591
  %604 = zext i32 %603 to i64
  %605 = call i8* @memchr(i8* %602, i32 %15, i64 %604) #16
  %606 = icmp eq i8* %605, null
  %607 = ptrtoint i8* %605 to i64
  %608 = sub i64 %607, %16
  br i1 %606, label %641, label %621

609:                                              ; preds = %590
  br i1 %597, label %610, label %641

610:                                              ; preds = %609
  %611 = zext i32 %591 to i64
  br label %612

612:                                              ; preds = %617, %610
  %613 = phi i64 [ %611, %610 ], [ %618, %617 ]
  %614 = getelementptr inbounds i16, i16* %17, i64 %613
  %615 = load i16, i16* %614, align 2
  %616 = icmp eq i16 %615, %1
  br i1 %616, label %621, label %617

617:                                              ; preds = %612
  %618 = add nuw nsw i64 %613, 1
  %619 = trunc i64 %618 to i32
  %620 = icmp eq i32 %596, %619
  br i1 %620, label %641, label %612

621:                                              ; preds = %612, %600
  %622 = phi i64 [ %608, %600 ], [ %613, %612 ]
  %623 = trunc i64 %622 to i32
  %624 = icmp eq i32 %623, -1
  br i1 %624, label %641, label %625

625:                                              ; preds = %621
  %626 = sub i32 %623, %591
  %627 = zext i32 %592 to i64
  %628 = getelementptr inbounds i16, i16* %584, i64 %627
  %629 = bitcast i16* %628 to i8*
  %630 = zext i32 %591 to i64
  %631 = getelementptr inbounds i16, i16* %17, i64 %630
  %632 = bitcast i16* %631 to i8*
  %633 = zext i32 %626 to i64
  %634 = shl nuw nsw i64 %633, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %629, i8* align 2 %632, i64 %634, i1 false)
  %635 = add i32 %626, %592
  %636 = zext i32 %635 to i64
  %637 = getelementptr inbounds i16, i16* %584, i64 %636
  %638 = bitcast i16* %637 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %638, i8* align 2 %587, i64 %589, i1 false)
  %639 = add i32 %635, %3
  %640 = add nuw i32 %623, 1
  br label %590

641:                                              ; preds = %600, %609, %598, %621, %617
  %642 = zext i32 %591 to i64
  %643 = sub i32 %596, %591
  %644 = zext i32 %592 to i64
  %645 = getelementptr inbounds i16, i16* %584, i64 %644
  %646 = bitcast i16* %645 to i8*
  %647 = getelementptr inbounds i16, i16* %17, i64 %642
  %648 = bitcast i16* %647 to i8*
  %649 = zext i32 %643 to i64
  %650 = shl nuw nsw i64 %649, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %646, i8* align 2 %648, i64 %650, i1 false)
  br label %651

651:                                              ; preds = %503, %506, %480, %371, %75, %61, %58, %641
  %652 = phi i64 [ %586, %641 ], [ %59, %58 ], [ %59, %61 ], [ %59, %75 ], [ %148, %371 ], [ %148, %480 ], [ %148, %506 ], [ %148, %503 ]
  %653 = inttoptr i64 %652 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %653
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl7ReplaceERKNS_10StringViewES3_(%"class.WTF::StringImpl"*, %"class.WTF::StringView"* nocapture readonly dereferenceable(24), %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  br i1 %14, label %15, label %35

15:                                               ; preds = %11, %3
  %16 = ptrtoint %"class.WTF::StringImpl"* %0 to i64
  %17 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %17, label %717, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = and i32 %20, 2
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %717

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i33
  %27 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %26, i33 1) #15
  %28 = extractvalue { i33, i1 } %27, 1
  %29 = extractvalue { i33, i1 } %27, 0
  %30 = icmp slt i33 %29, 0
  %31 = or i1 %28, %30
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %23
  tail call void @llvm.trap() #15
  unreachable

33:                                               ; preds = %23
  %34 = trunc i33 %29 to i32
  store i32 %34, i32* %24, align 4
  br label %717

35:                                               ; preds = %11
  %36 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %59

39:                                               ; preds = %35
  %40 = ptrtoint %"class.WTF::StringImpl"* %0 to i64
  %41 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %41, label %717, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %717

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i33
  %51 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %50, i33 1) #15
  %52 = extractvalue { i33, i1 } %51, 1
  %53 = extractvalue { i33, i1 } %51, 0
  %54 = icmp slt i33 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %56, label %57, !prof !2

56:                                               ; preds = %47
  tail call void @llvm.trap() #15
  unreachable

57:                                               ; preds = %47
  %58 = trunc i33 %53 to i32
  store i32 %58, i32* %48, align 4
  br label %717

59:                                               ; preds = %35
  %60 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 2
  %61 = load i32, i32* %60, align 8
  %62 = tail call i32 @_ZN3WTF10StringImpl4FindERKNS_10StringViewEj(%"class.WTF::StringImpl"* %0, %"class.WTF::StringView"* dereferenceable(24) %1, i32 0)
  %63 = icmp eq i32 %62, -1
  br i1 %63, label %73, label %64

64:                                               ; preds = %59, %64
  %65 = phi i32 [ %69, %64 ], [ %62, %59 ]
  %66 = phi i32 [ %67, %64 ], [ 0, %59 ]
  %67 = add i32 %66, 1
  %68 = add i32 %65, %37
  %69 = tail call i32 @_ZN3WTF10StringImpl4FindERKNS_10StringViewEj(%"class.WTF::StringImpl"* %0, %"class.WTF::StringView"* dereferenceable(24) %1, i32 %68)
  %70 = icmp eq i32 %69, -1
  br i1 %70, label %71, label %64

71:                                               ; preds = %64
  %72 = icmp eq i32 %67, 0
  br i1 %72, label %73, label %93

73:                                               ; preds = %59, %71
  %74 = ptrtoint %"class.WTF::StringImpl"* %0 to i64
  %75 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %75, label %717, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = and i32 %78, 2
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %717

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = zext i32 %83 to i33
  %85 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %84, i33 1) #15
  %86 = extractvalue { i33, i1 } %85, 1
  %87 = extractvalue { i33, i1 } %85, 0
  %88 = icmp slt i33 %87, 0
  %89 = or i1 %86, %88
  br i1 %89, label %90, label %91, !prof !2

90:                                               ; preds = %81
  tail call void @llvm.trap() #15
  unreachable

91:                                               ; preds = %81
  %92 = trunc i33 %87 to i32
  store i32 %92, i32* %82, align 4
  br label %717

93:                                               ; preds = %71
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %95 = load i32, i32* %94, align 4
  %96 = mul i32 %67, %37
  %97 = sub i32 %95, %96
  %98 = icmp eq i32 %61, 0
  br i1 %98, label %105, label %99

99:                                               ; preds = %93
  %100 = udiv i32 -1, %61
  %101 = icmp ugt i32 %67, %100
  br i1 %101, label %102, label %105

102:                                              ; preds = %99
  %103 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %103) #15
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 1480, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.8, i64 0, i64 0)) #15
  %104 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %103) #15
  br label %105

105:                                              ; preds = %99, %93, %102
  %106 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106) #15
  %107 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %107, align 8
  %108 = mul i32 %67, %61
  %109 = xor i32 %108, -1
  %110 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %110)
  %111 = icmp ugt i32 %97, %109
  br i1 %111, label %113, label %112

112:                                              ; preds = %105
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %110)
  store i8* null, i8** %107, align 8
  br label %122

113:                                              ; preds = %105
  %114 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %97) #15
  %115 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %109) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.10, i64 0, i64 0), i8* %114, i8* %115) #15
  %116 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %117 = load i8*, i8** %116, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %110)
  store i8* %117, i8** %107, align 8
  %118 = icmp eq i8* %117, null
  br i1 %118, label %122, label %119

119:                                              ; preds = %113
  %120 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %120) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 1483, %"class.logging::CheckOpResult"* nonnull %6) #15
  %121 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %120) #15
  br label %122

122:                                              ; preds = %112, %113, %119
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106) #15
  %123 = add i32 %97, %108
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %125 = load atomic i32, i32* %124 monotonic, align 4
  %126 = and i32 %125, 1
  %127 = icmp ne i32 %126, 0
  %128 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = and i32 %131, 1
  %133 = icmp eq i32 %132, 0
  %134 = and i32 %126, %131
  %135 = icmp eq i32 %134, 0
  %136 = icmp eq i32 %123, 0
  br i1 %135, label %210, label %137

137:                                              ; preds = %122
  br i1 %136, label %138, label %158

138:                                              ; preds = %137
  %139 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %140 = icmp eq %"class.WTF::StringImpl"* %139, null
  br i1 %140, label %169, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = load atomic i32, i32* %142 monotonic, align 4
  %144 = and i32 %143, 2
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %169

146:                                              ; preds = %141
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 0
  %148 = load i32, i32* %147, align 4
  %149 = zext i32 %148 to i33
  %150 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %149, i33 1) #15
  %151 = extractvalue { i33, i1 } %150, 1
  %152 = extractvalue { i33, i1 } %150, 0
  %153 = icmp slt i33 %152, 0
  %154 = or i1 %151, %153
  br i1 %154, label %155, label %156, !prof !2

155:                                              ; preds = %146
  call void @llvm.trap() #15
  unreachable

156:                                              ; preds = %146
  %157 = trunc i33 %152 to i32
  store i32 %157, i32* %147, align 4
  br label %169

158:                                              ; preds = %137
  %159 = zext i32 %123 to i64
  %160 = add nuw nsw i64 %159, 12
  %161 = call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %160, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %162 = getelementptr inbounds i8, i8* %161, i64 12
  %163 = bitcast i8* %161 to %"class.WTF::StringImpl"*
  %164 = bitcast i8* %161 to i32*
  store i32 1, i32* %164, align 4
  %165 = getelementptr inbounds i8, i8* %161, i64 4
  %166 = bitcast i8* %165 to i32*
  store i32 %123, i32* %166, align 4
  %167 = getelementptr inbounds i8, i8* %161, i64 8
  %168 = bitcast i8* %167 to i32*
  store i32 1, i32* %168, align 4
  br label %169

169:                                              ; preds = %138, %141, %156, %158
  %170 = phi i8* [ null, %138 ], [ null, %156 ], [ null, %141 ], [ %162, %158 ]
  %171 = phi %"class.WTF::StringImpl"* [ null, %138 ], [ %139, %156 ], [ %139, %141 ], [ %163, %158 ]
  %172 = ptrtoint %"class.WTF::StringImpl"* %171 to i64
  %173 = call i32 @_ZN3WTF10StringImpl4FindERKNS_10StringViewEj(%"class.WTF::StringImpl"* %0, %"class.WTF::StringView"* dereferenceable(24) %1, i32 0)
  %174 = icmp eq i32 %173, -1
  br i1 %174, label %199, label %175

175:                                              ; preds = %169
  %176 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %177 = bitcast %"class.WTF::StringImpl"* %176 to i8*
  %178 = zext i32 %61 to i64
  br label %179

179:                                              ; preds = %175, %179
  %180 = phi i32 [ %173, %175 ], [ %195, %179 ]
  %181 = phi i32 [ 0, %175 ], [ %193, %179 ]
  %182 = phi i32 [ 0, %175 ], [ %194, %179 ]
  %183 = sub i32 %180, %182
  %184 = zext i32 %181 to i64
  %185 = getelementptr inbounds i8, i8* %170, i64 %184
  %186 = zext i32 %182 to i64
  %187 = getelementptr inbounds i8, i8* %177, i64 %186
  %188 = zext i32 %183 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %185, i8* align 1 %187, i64 %188, i1 false)
  %189 = add i32 %183, %181
  %190 = zext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %170, i64 %190
  %192 = load i8*, i8** %12, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %191, i8* align 1 %192, i64 %178, i1 false)
  %193 = add i32 %189, %61
  %194 = add i32 %180, %37
  %195 = call i32 @_ZN3WTF10StringImpl4FindERKNS_10StringViewEj(%"class.WTF::StringImpl"* %0, %"class.WTF::StringView"* dereferenceable(24) %1, i32 %194)
  %196 = icmp eq i32 %195, -1
  br i1 %196, label %197, label %179

197:                                              ; preds = %179
  %198 = zext i32 %193 to i64
  br label %199

199:                                              ; preds = %169, %197
  %200 = phi i32 [ %194, %197 ], [ 0, %169 ]
  %201 = phi i64 [ %198, %197 ], [ 0, %169 ]
  %202 = load i32, i32* %94, align 4
  %203 = sub i32 %202, %200
  %204 = getelementptr inbounds i8, i8* %170, i64 %201
  %205 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %206 = bitcast %"class.WTF::StringImpl"* %205 to i8*
  %207 = zext i32 %200 to i64
  %208 = getelementptr inbounds i8, i8* %206, i64 %207
  %209 = zext i32 %203 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %204, i8* align 1 %208, i64 %209, i1 false)
  br label %717

210:                                              ; preds = %122
  br i1 %136, label %211, label %231

211:                                              ; preds = %210
  %212 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %213 = icmp eq %"class.WTF::StringImpl"* %212, null
  br i1 %213, label %244, label %214

214:                                              ; preds = %211
  %215 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %212, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %216 = load atomic i32, i32* %215 monotonic, align 4
  %217 = and i32 %216, 2
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %244

219:                                              ; preds = %214
  %220 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %212, i64 0, i32 0
  %221 = load i32, i32* %220, align 4
  %222 = zext i32 %221 to i33
  %223 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %222, i33 1) #15
  %224 = extractvalue { i33, i1 } %223, 1
  %225 = extractvalue { i33, i1 } %223, 0
  %226 = icmp slt i33 %225, 0
  %227 = or i1 %224, %226
  br i1 %227, label %228, label %229, !prof !2

228:                                              ; preds = %219
  call void @llvm.trap() #15
  unreachable

229:                                              ; preds = %219
  %230 = trunc i33 %225 to i32
  store i32 %230, i32* %220, align 4
  br label %244

231:                                              ; preds = %210
  %232 = zext i32 %123 to i64
  %233 = shl nuw nsw i64 %232, 1
  %234 = add nuw nsw i64 %233, 12
  %235 = call i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64 %234, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #15
  %236 = getelementptr inbounds i8, i8* %235, i64 12
  %237 = bitcast i8* %236 to i16*
  %238 = bitcast i8* %235 to %"class.WTF::StringImpl"*
  %239 = bitcast i8* %235 to i32*
  store i32 1, i32* %239, align 4
  %240 = getelementptr inbounds i8, i8* %235, i64 4
  %241 = bitcast i8* %240 to i32*
  store i32 %123, i32* %241, align 4
  %242 = getelementptr inbounds i8, i8* %235, i64 8
  %243 = bitcast i8* %242 to i32*
  store i32 0, i32* %243, align 4
  br label %244

244:                                              ; preds = %211, %214, %229, %231
  %245 = phi i16* [ null, %211 ], [ null, %229 ], [ null, %214 ], [ %237, %231 ]
  %246 = phi %"class.WTF::StringImpl"* [ null, %211 ], [ %212, %229 ], [ %212, %214 ], [ %238, %231 ]
  %247 = ptrtoint %"class.WTF::StringImpl"* %246 to i64
  %248 = call i32 @_ZN3WTF10StringImpl4FindERKNS_10StringViewEj(%"class.WTF::StringImpl"* %0, %"class.WTF::StringView"* dereferenceable(24) %1, i32 0)
  %249 = icmp eq i32 %248, -1
  br i1 %249, label %522, label %250

250:                                              ; preds = %244
  %251 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %252 = bitcast %"class.WTF::StringImpl"* %251 to i16*
  %253 = bitcast %"class.WTF::StringImpl"* %251 to i8*
  %254 = zext i32 %61 to i64
  %255 = shl nuw nsw i64 %254, 1
  %256 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %257 = bitcast %"class.WTF::StringImpl"* %256 to i8*
  %258 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %259 = bitcast %"class.WTF::StringImpl"* %258 to i8*
  %260 = add nsw i64 %254, -1
  %261 = and i64 %254, 3
  %262 = icmp ult i64 %260, 3
  %263 = sub nsw i64 %254, %261
  %264 = icmp eq i64 %261, 0
  br label %265

265:                                              ; preds = %250, %517
  %266 = phi i32 [ %248, %250 ], [ %520, %517 ]
  %267 = phi i32 [ 0, %250 ], [ %518, %517 ]
  %268 = phi i32 [ 0, %250 ], [ %519, %517 ]
  %269 = sub i32 %266, %268
  br i1 %127, label %270, label %442

270:                                              ; preds = %265
  %271 = icmp eq i32 %269, 0
  br i1 %271, label %451, label %272

272:                                              ; preds = %270
  %273 = zext i32 %269 to i64
  %274 = icmp ult i32 %269, 16
  br i1 %274, label %375, label %275

275:                                              ; preds = %272
  %276 = add nsw i64 %273, -1
  %277 = trunc i64 %276 to i32
  %278 = xor i32 %267, -1
  %279 = icmp ult i32 %278, %277
  %280 = icmp ugt i64 %276, 4294967295
  %281 = or i1 %279, %280
  %282 = trunc i64 %276 to i32
  %283 = xor i32 %268, -1
  %284 = icmp ult i32 %283, %282
  %285 = icmp ugt i64 %276, 4294967295
  %286 = or i1 %284, %285
  %287 = or i1 %281, %286
  br i1 %287, label %375, label %288

288:                                              ; preds = %275
  %289 = zext i32 %267 to i64
  %290 = getelementptr i16, i16* %245, i64 %289
  %291 = bitcast i16* %290 to i8*
  %292 = add nuw nsw i64 %289, %273
  %293 = getelementptr i16, i16* %245, i64 %292
  %294 = bitcast i16* %293 to i8*
  %295 = zext i32 %268 to i64
  %296 = getelementptr i8, i8* %257, i64 %295
  %297 = add nuw nsw i64 %295, %273
  %298 = getelementptr i8, i8* %259, i64 %297
  %299 = icmp ugt i8* %298, %291
  %300 = icmp ult i8* %296, %294
  %301 = and i1 %299, %300
  br i1 %301, label %375, label %302

302:                                              ; preds = %288
  %303 = and i64 %273, 4294967280
  %304 = add nsw i64 %303, -16
  %305 = lshr exact i64 %304, 4
  %306 = add nuw nsw i64 %305, 1
  %307 = and i64 %306, 1
  %308 = icmp eq i64 %304, 0
  br i1 %308, label %352, label %309

309:                                              ; preds = %302
  %310 = sub nuw nsw i64 %306, %307
  br label %311

311:                                              ; preds = %311, %309
  %312 = phi i64 [ 0, %309 ], [ %349, %311 ]
  %313 = phi i64 [ %310, %309 ], [ %350, %311 ]
  %314 = trunc i64 %312 to i32
  %315 = add i32 %268, %314
  %316 = zext i32 %315 to i64
  %317 = getelementptr inbounds i8, i8* %253, i64 %316
  %318 = bitcast i8* %317 to <8 x i8>*
  %319 = load <8 x i8>, <8 x i8>* %318, align 1, !alias.scope !110
  %320 = getelementptr inbounds i8, i8* %317, i64 8
  %321 = bitcast i8* %320 to <8 x i8>*
  %322 = load <8 x i8>, <8 x i8>* %321, align 1, !alias.scope !110
  %323 = zext <8 x i8> %319 to <8 x i16>
  %324 = zext <8 x i8> %322 to <8 x i16>
  %325 = add i32 %267, %314
  %326 = zext i32 %325 to i64
  %327 = getelementptr inbounds i16, i16* %245, i64 %326
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %328, align 2, !alias.scope !113, !noalias !110
  %329 = getelementptr inbounds i16, i16* %327, i64 8
  %330 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %324, <8 x i16>* %330, align 2, !alias.scope !113, !noalias !110
  %331 = trunc i64 %312 to i32
  %332 = or i32 %331, 16
  %333 = add i32 %268, %332
  %334 = zext i32 %333 to i64
  %335 = getelementptr inbounds i8, i8* %253, i64 %334
  %336 = bitcast i8* %335 to <8 x i8>*
  %337 = load <8 x i8>, <8 x i8>* %336, align 1, !alias.scope !110
  %338 = getelementptr inbounds i8, i8* %335, i64 8
  %339 = bitcast i8* %338 to <8 x i8>*
  %340 = load <8 x i8>, <8 x i8>* %339, align 1, !alias.scope !110
  %341 = zext <8 x i8> %337 to <8 x i16>
  %342 = zext <8 x i8> %340 to <8 x i16>
  %343 = add i32 %267, %332
  %344 = zext i32 %343 to i64
  %345 = getelementptr inbounds i16, i16* %245, i64 %344
  %346 = bitcast i16* %345 to <8 x i16>*
  store <8 x i16> %341, <8 x i16>* %346, align 2, !alias.scope !113, !noalias !110
  %347 = getelementptr inbounds i16, i16* %345, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %348, align 2, !alias.scope !113, !noalias !110
  %349 = add i64 %312, 32
  %350 = add i64 %313, -2
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %352, label %311, !llvm.loop !115

352:                                              ; preds = %311, %302
  %353 = phi i64 [ 0, %302 ], [ %349, %311 ]
  %354 = icmp eq i64 %307, 0
  br i1 %354, label %373, label %355

355:                                              ; preds = %352
  %356 = trunc i64 %353 to i32
  %357 = add i32 %268, %356
  %358 = zext i32 %357 to i64
  %359 = getelementptr inbounds i8, i8* %253, i64 %358
  %360 = bitcast i8* %359 to <8 x i8>*
  %361 = load <8 x i8>, <8 x i8>* %360, align 1, !alias.scope !110
  %362 = getelementptr inbounds i8, i8* %359, i64 8
  %363 = bitcast i8* %362 to <8 x i8>*
  %364 = load <8 x i8>, <8 x i8>* %363, align 1, !alias.scope !110
  %365 = zext <8 x i8> %361 to <8 x i16>
  %366 = zext <8 x i8> %364 to <8 x i16>
  %367 = add i32 %267, %356
  %368 = zext i32 %367 to i64
  %369 = getelementptr inbounds i16, i16* %245, i64 %368
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %365, <8 x i16>* %370, align 2, !alias.scope !113, !noalias !110
  %371 = getelementptr inbounds i16, i16* %369, i64 8
  %372 = bitcast i16* %371 to <8 x i16>*
  store <8 x i16> %366, <8 x i16>* %372, align 2, !alias.scope !113, !noalias !110
  br label %373

373:                                              ; preds = %352, %355
  %374 = icmp eq i64 %303, %273
  br i1 %374, label %451, label %375

375:                                              ; preds = %373, %288, %275, %272
  %376 = phi i64 [ 0, %288 ], [ 0, %275 ], [ 0, %272 ], [ %303, %373 ]
  %377 = xor i64 %376, -1
  %378 = add nsw i64 %377, %273
  %379 = and i64 %273, 3
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %396, label %381

381:                                              ; preds = %375, %381
  %382 = phi i64 [ %393, %381 ], [ %376, %375 ]
  %383 = phi i64 [ %394, %381 ], [ %379, %375 ]
  %384 = trunc i64 %382 to i32
  %385 = add i32 %268, %384
  %386 = zext i32 %385 to i64
  %387 = getelementptr inbounds i8, i8* %253, i64 %386
  %388 = load i8, i8* %387, align 1
  %389 = zext i8 %388 to i16
  %390 = add i32 %267, %384
  %391 = zext i32 %390 to i64
  %392 = getelementptr inbounds i16, i16* %245, i64 %391
  store i16 %389, i16* %392, align 2
  %393 = add nuw nsw i64 %382, 1
  %394 = add i64 %383, -1
  %395 = icmp eq i64 %394, 0
  br i1 %395, label %396, label %381, !llvm.loop !116

396:                                              ; preds = %381, %375
  %397 = phi i64 [ %376, %375 ], [ %393, %381 ]
  %398 = icmp ult i64 %378, 3
  br i1 %398, label %451, label %399

399:                                              ; preds = %396, %399
  %400 = phi i64 [ %440, %399 ], [ %397, %396 ]
  %401 = trunc i64 %400 to i32
  %402 = add i32 %268, %401
  %403 = zext i32 %402 to i64
  %404 = getelementptr inbounds i8, i8* %253, i64 %403
  %405 = load i8, i8* %404, align 1
  %406 = zext i8 %405 to i16
  %407 = add i32 %267, %401
  %408 = zext i32 %407 to i64
  %409 = getelementptr inbounds i16, i16* %245, i64 %408
  store i16 %406, i16* %409, align 2
  %410 = trunc i64 %400 to i32
  %411 = add i32 %410, 1
  %412 = add i32 %268, %411
  %413 = zext i32 %412 to i64
  %414 = getelementptr inbounds i8, i8* %253, i64 %413
  %415 = load i8, i8* %414, align 1
  %416 = zext i8 %415 to i16
  %417 = add i32 %267, %411
  %418 = zext i32 %417 to i64
  %419 = getelementptr inbounds i16, i16* %245, i64 %418
  store i16 %416, i16* %419, align 2
  %420 = trunc i64 %400 to i32
  %421 = add i32 %420, 2
  %422 = add i32 %268, %421
  %423 = zext i32 %422 to i64
  %424 = getelementptr inbounds i8, i8* %253, i64 %423
  %425 = load i8, i8* %424, align 1
  %426 = zext i8 %425 to i16
  %427 = add i32 %267, %421
  %428 = zext i32 %427 to i64
  %429 = getelementptr inbounds i16, i16* %245, i64 %428
  store i16 %426, i16* %429, align 2
  %430 = trunc i64 %400 to i32
  %431 = add i32 %430, 3
  %432 = add i32 %268, %431
  %433 = zext i32 %432 to i64
  %434 = getelementptr inbounds i8, i8* %253, i64 %433
  %435 = load i8, i8* %434, align 1
  %436 = zext i8 %435 to i16
  %437 = add i32 %267, %431
  %438 = zext i32 %437 to i64
  %439 = getelementptr inbounds i16, i16* %245, i64 %438
  store i16 %436, i16* %439, align 2
  %440 = add nuw nsw i64 %400, 4
  %441 = icmp eq i64 %440, %273
  br i1 %441, label %451, label %399, !llvm.loop !117

442:                                              ; preds = %265
  %443 = zext i32 %267 to i64
  %444 = getelementptr inbounds i16, i16* %245, i64 %443
  %445 = bitcast i16* %444 to i8*
  %446 = zext i32 %268 to i64
  %447 = getelementptr inbounds i16, i16* %252, i64 %446
  %448 = bitcast i16* %447 to i8*
  %449 = zext i32 %269 to i64
  %450 = shl nuw nsw i64 %449, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %445, i8* align 2 %448, i64 %450, i1 false)
  br label %451

451:                                              ; preds = %396, %399, %373, %270, %442
  %452 = add i32 %269, %267
  br i1 %133, label %496, label %453

453:                                              ; preds = %451
  br i1 %98, label %517, label %454

454:                                              ; preds = %453
  br i1 %262, label %501, label %455

455:                                              ; preds = %454, %455
  %456 = phi i64 [ %493, %455 ], [ 0, %454 ]
  %457 = phi i64 [ %494, %455 ], [ %263, %454 ]
  %458 = load i8*, i8** %12, align 8
  %459 = getelementptr inbounds i8, i8* %458, i64 %456
  %460 = load i8, i8* %459, align 1
  %461 = zext i8 %460 to i16
  %462 = trunc i64 %456 to i32
  %463 = add i32 %452, %462
  %464 = zext i32 %463 to i64
  %465 = getelementptr inbounds i16, i16* %245, i64 %464
  store i16 %461, i16* %465, align 2
  %466 = or i64 %456, 1
  %467 = load i8*, i8** %12, align 8
  %468 = getelementptr inbounds i8, i8* %467, i64 %466
  %469 = load i8, i8* %468, align 1
  %470 = zext i8 %469 to i16
  %471 = trunc i64 %466 to i32
  %472 = add i32 %452, %471
  %473 = zext i32 %472 to i64
  %474 = getelementptr inbounds i16, i16* %245, i64 %473
  store i16 %470, i16* %474, align 2
  %475 = or i64 %456, 2
  %476 = load i8*, i8** %12, align 8
  %477 = getelementptr inbounds i8, i8* %476, i64 %475
  %478 = load i8, i8* %477, align 1
  %479 = zext i8 %478 to i16
  %480 = trunc i64 %475 to i32
  %481 = add i32 %452, %480
  %482 = zext i32 %481 to i64
  %483 = getelementptr inbounds i16, i16* %245, i64 %482
  store i16 %479, i16* %483, align 2
  %484 = or i64 %456, 3
  %485 = load i8*, i8** %12, align 8
  %486 = getelementptr inbounds i8, i8* %485, i64 %484
  %487 = load i8, i8* %486, align 1
  %488 = zext i8 %487 to i16
  %489 = trunc i64 %484 to i32
  %490 = add i32 %452, %489
  %491 = zext i32 %490 to i64
  %492 = getelementptr inbounds i16, i16* %245, i64 %491
  store i16 %488, i16* %492, align 2
  %493 = add nuw nsw i64 %456, 4
  %494 = add i64 %457, -4
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %501, label %455

496:                                              ; preds = %451
  %497 = zext i32 %452 to i64
  %498 = getelementptr inbounds i16, i16* %245, i64 %497
  %499 = bitcast i16* %498 to i8*
  %500 = load i8*, i8** %12, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %499, i8* align 2 %500, i64 %255, i1 false)
  br label %517

501:                                              ; preds = %455, %454
  %502 = phi i64 [ 0, %454 ], [ %493, %455 ]
  br i1 %264, label %517, label %503

503:                                              ; preds = %501, %503
  %504 = phi i64 [ %514, %503 ], [ %502, %501 ]
  %505 = phi i64 [ %515, %503 ], [ %261, %501 ]
  %506 = load i8*, i8** %12, align 8
  %507 = getelementptr inbounds i8, i8* %506, i64 %504
  %508 = load i8, i8* %507, align 1
  %509 = zext i8 %508 to i16
  %510 = trunc i64 %504 to i32
  %511 = add i32 %452, %510
  %512 = zext i32 %511 to i64
  %513 = getelementptr inbounds i16, i16* %245, i64 %512
  store i16 %509, i16* %513, align 2
  %514 = add nuw nsw i64 %504, 1
  %515 = add i64 %505, -1
  %516 = icmp eq i64 %515, 0
  br i1 %516, label %517, label %503, !llvm.loop !118

517:                                              ; preds = %501, %503, %453, %496
  %518 = add i32 %452, %61
  %519 = add i32 %266, %37
  %520 = call i32 @_ZN3WTF10StringImpl4FindERKNS_10StringViewEj(%"class.WTF::StringImpl"* %0, %"class.WTF::StringView"* dereferenceable(24) %1, i32 %519)
  %521 = icmp eq i32 %520, -1
  br i1 %521, label %522, label %265

522:                                              ; preds = %517, %244
  %523 = phi i32 [ 0, %244 ], [ %519, %517 ]
  %524 = phi i32 [ 0, %244 ], [ %518, %517 ]
  %525 = load i32, i32* %94, align 4
  %526 = sub i32 %525, %523
  br i1 %127, label %527, label %706

527:                                              ; preds = %522
  %528 = icmp eq i32 %526, 0
  br i1 %528, label %717, label %529

529:                                              ; preds = %527
  %530 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %531 = bitcast %"class.WTF::StringImpl"* %530 to i8*
  %532 = zext i32 %526 to i64
  %533 = icmp ult i32 %526, 16
  br i1 %533, label %639, label %534

534:                                              ; preds = %529
  %535 = add nsw i64 %532, -1
  %536 = trunc i64 %535 to i32
  %537 = xor i32 %524, -1
  %538 = icmp ult i32 %537, %536
  %539 = icmp ugt i64 %535, 4294967295
  %540 = or i1 %538, %539
  %541 = trunc i64 %535 to i32
  %542 = xor i32 %523, -1
  %543 = icmp ult i32 %542, %541
  %544 = icmp ugt i64 %535, 4294967295
  %545 = or i1 %543, %544
  %546 = or i1 %540, %545
  br i1 %546, label %639, label %547

547:                                              ; preds = %534
  %548 = zext i32 %524 to i64
  %549 = getelementptr i16, i16* %245, i64 %548
  %550 = bitcast i16* %549 to i8*
  %551 = add nuw nsw i64 %548, %532
  %552 = getelementptr i16, i16* %245, i64 %551
  %553 = bitcast i16* %552 to i8*
  %554 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1, i32 0
  %555 = bitcast i32* %554 to i8*
  %556 = zext i32 %523 to i64
  %557 = getelementptr i8, i8* %555, i64 %556
  %558 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1, i32 0
  %559 = bitcast i32* %558 to i8*
  %560 = add nuw nsw i64 %556, %532
  %561 = getelementptr i8, i8* %559, i64 %560
  %562 = icmp ugt i8* %561, %550
  %563 = icmp ult i8* %557, %553
  %564 = and i1 %562, %563
  br i1 %564, label %639, label %565

565:                                              ; preds = %547
  %566 = and i64 %532, 4294967280
  %567 = add nsw i64 %566, -16
  %568 = lshr exact i64 %567, 4
  %569 = add nuw nsw i64 %568, 1
  %570 = and i64 %569, 1
  %571 = icmp eq i64 %567, 0
  br i1 %571, label %617, label %572

572:                                              ; preds = %565
  %573 = sub nuw nsw i64 %569, %570
  br label %574

574:                                              ; preds = %574, %572
  %575 = phi i64 [ 0, %572 ], [ %612, %574 ]
  %576 = phi i64 [ %573, %572 ], [ %613, %574 ]
  %577 = trunc i64 %575 to i32
  %578 = add i32 %523, %577
  %579 = zext i32 %578 to i64
  %580 = getelementptr inbounds i8, i8* %531, i64 %579
  %581 = bitcast i8* %580 to <8 x i8>*
  %582 = load <8 x i8>, <8 x i8>* %581, align 1, !alias.scope !119
  %583 = getelementptr inbounds i8, i8* %580, i64 8
  %584 = bitcast i8* %583 to <8 x i8>*
  %585 = load <8 x i8>, <8 x i8>* %584, align 1, !alias.scope !119
  %586 = zext <8 x i8> %582 to <8 x i16>
  %587 = zext <8 x i8> %585 to <8 x i16>
  %588 = add i32 %524, %577
  %589 = zext i32 %588 to i64
  %590 = getelementptr inbounds i16, i16* %245, i64 %589
  %591 = bitcast i16* %590 to <8 x i16>*
  store <8 x i16> %586, <8 x i16>* %591, align 2, !alias.scope !122, !noalias !119
  %592 = getelementptr inbounds i16, i16* %590, i64 8
  %593 = bitcast i16* %592 to <8 x i16>*
  store <8 x i16> %587, <8 x i16>* %593, align 2, !alias.scope !122, !noalias !119
  %594 = trunc i64 %575 to i32
  %595 = or i32 %594, 16
  %596 = add i32 %523, %595
  %597 = zext i32 %596 to i64
  %598 = getelementptr inbounds i8, i8* %531, i64 %597
  %599 = bitcast i8* %598 to <8 x i8>*
  %600 = load <8 x i8>, <8 x i8>* %599, align 1, !alias.scope !119
  %601 = getelementptr inbounds i8, i8* %598, i64 8
  %602 = bitcast i8* %601 to <8 x i8>*
  %603 = load <8 x i8>, <8 x i8>* %602, align 1, !alias.scope !119
  %604 = zext <8 x i8> %600 to <8 x i16>
  %605 = zext <8 x i8> %603 to <8 x i16>
  %606 = add i32 %524, %595
  %607 = zext i32 %606 to i64
  %608 = getelementptr inbounds i16, i16* %245, i64 %607
  %609 = bitcast i16* %608 to <8 x i16>*
  store <8 x i16> %604, <8 x i16>* %609, align 2, !alias.scope !122, !noalias !119
  %610 = getelementptr inbounds i16, i16* %608, i64 8
  %611 = bitcast i16* %610 to <8 x i16>*
  store <8 x i16> %605, <8 x i16>* %611, align 2, !alias.scope !122, !noalias !119
  %612 = add i64 %575, 32
  %613 = add i64 %576, -2
  %614 = icmp eq i64 %613, 0
  br i1 %614, label %615, label %574, !llvm.loop !124

615:                                              ; preds = %574
  %616 = trunc i64 %612 to i32
  br label %617

617:                                              ; preds = %615, %565
  %618 = phi i32 [ 0, %565 ], [ %616, %615 ]
  %619 = icmp eq i64 %570, 0
  br i1 %619, label %637, label %620

620:                                              ; preds = %617
  %621 = add i32 %523, %618
  %622 = zext i32 %621 to i64
  %623 = getelementptr inbounds i8, i8* %531, i64 %622
  %624 = bitcast i8* %623 to <8 x i8>*
  %625 = load <8 x i8>, <8 x i8>* %624, align 1, !alias.scope !119
  %626 = getelementptr inbounds i8, i8* %623, i64 8
  %627 = bitcast i8* %626 to <8 x i8>*
  %628 = load <8 x i8>, <8 x i8>* %627, align 1, !alias.scope !119
  %629 = zext <8 x i8> %625 to <8 x i16>
  %630 = zext <8 x i8> %628 to <8 x i16>
  %631 = add i32 %524, %618
  %632 = zext i32 %631 to i64
  %633 = getelementptr inbounds i16, i16* %245, i64 %632
  %634 = bitcast i16* %633 to <8 x i16>*
  store <8 x i16> %629, <8 x i16>* %634, align 2, !alias.scope !122, !noalias !119
  %635 = getelementptr inbounds i16, i16* %633, i64 8
  %636 = bitcast i16* %635 to <8 x i16>*
  store <8 x i16> %630, <8 x i16>* %636, align 2, !alias.scope !122, !noalias !119
  br label %637

637:                                              ; preds = %617, %620
  %638 = icmp eq i64 %566, %532
  br i1 %638, label %717, label %639

639:                                              ; preds = %637, %547, %534, %529
  %640 = phi i64 [ 0, %547 ], [ 0, %534 ], [ 0, %529 ], [ %566, %637 ]
  %641 = xor i64 %640, -1
  %642 = add nsw i64 %641, %532
  %643 = and i64 %532, 3
  %644 = icmp eq i64 %643, 0
  br i1 %644, label %660, label %645

645:                                              ; preds = %639, %645
  %646 = phi i64 [ %657, %645 ], [ %640, %639 ]
  %647 = phi i64 [ %658, %645 ], [ %643, %639 ]
  %648 = trunc i64 %646 to i32
  %649 = add i32 %523, %648
  %650 = zext i32 %649 to i64
  %651 = getelementptr inbounds i8, i8* %531, i64 %650
  %652 = load i8, i8* %651, align 1
  %653 = zext i8 %652 to i16
  %654 = add i32 %524, %648
  %655 = zext i32 %654 to i64
  %656 = getelementptr inbounds i16, i16* %245, i64 %655
  store i16 %653, i16* %656, align 2
  %657 = add nuw nsw i64 %646, 1
  %658 = add i64 %647, -1
  %659 = icmp eq i64 %658, 0
  br i1 %659, label %660, label %645, !llvm.loop !125

660:                                              ; preds = %645, %639
  %661 = phi i64 [ %640, %639 ], [ %657, %645 ]
  %662 = icmp ult i64 %642, 3
  br i1 %662, label %717, label %663

663:                                              ; preds = %660, %663
  %664 = phi i64 [ %704, %663 ], [ %661, %660 ]
  %665 = trunc i64 %664 to i32
  %666 = add i32 %523, %665
  %667 = zext i32 %666 to i64
  %668 = getelementptr inbounds i8, i8* %531, i64 %667
  %669 = load i8, i8* %668, align 1
  %670 = zext i8 %669 to i16
  %671 = add i32 %524, %665
  %672 = zext i32 %671 to i64
  %673 = getelementptr inbounds i16, i16* %245, i64 %672
  store i16 %670, i16* %673, align 2
  %674 = trunc i64 %664 to i32
  %675 = add i32 %674, 1
  %676 = add i32 %523, %675
  %677 = zext i32 %676 to i64
  %678 = getelementptr inbounds i8, i8* %531, i64 %677
  %679 = load i8, i8* %678, align 1
  %680 = zext i8 %679 to i16
  %681 = add i32 %524, %675
  %682 = zext i32 %681 to i64
  %683 = getelementptr inbounds i16, i16* %245, i64 %682
  store i16 %680, i16* %683, align 2
  %684 = trunc i64 %664 to i32
  %685 = add i32 %684, 2
  %686 = add i32 %523, %685
  %687 = zext i32 %686 to i64
  %688 = getelementptr inbounds i8, i8* %531, i64 %687
  %689 = load i8, i8* %688, align 1
  %690 = zext i8 %689 to i16
  %691 = add i32 %524, %685
  %692 = zext i32 %691 to i64
  %693 = getelementptr inbounds i16, i16* %245, i64 %692
  store i16 %690, i16* %693, align 2
  %694 = trunc i64 %664 to i32
  %695 = add i32 %694, 3
  %696 = add i32 %523, %695
  %697 = zext i32 %696 to i64
  %698 = getelementptr inbounds i8, i8* %531, i64 %697
  %699 = load i8, i8* %698, align 1
  %700 = zext i8 %699 to i16
  %701 = add i32 %524, %695
  %702 = zext i32 %701 to i64
  %703 = getelementptr inbounds i16, i16* %245, i64 %702
  store i16 %700, i16* %703, align 2
  %704 = add nuw nsw i64 %664, 4
  %705 = icmp eq i64 %704, %532
  br i1 %705, label %717, label %663, !llvm.loop !126

706:                                              ; preds = %522
  %707 = zext i32 %524 to i64
  %708 = getelementptr inbounds i16, i16* %245, i64 %707
  %709 = bitcast i16* %708 to i8*
  %710 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %711 = bitcast %"class.WTF::StringImpl"* %710 to i16*
  %712 = zext i32 %523 to i64
  %713 = getelementptr inbounds i16, i16* %711, i64 %712
  %714 = bitcast i16* %713 to i8*
  %715 = zext i32 %526 to i64
  %716 = shl nuw nsw i64 %715, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %709, i8* align 2 %714, i64 %716, i1 false)
  br label %717

717:                                              ; preds = %660, %663, %637, %527, %706, %91, %76, %73, %57, %42, %39, %33, %18, %15, %199
  %718 = phi i64 [ %172, %199 ], [ %16, %15 ], [ %16, %18 ], [ %16, %33 ], [ %40, %39 ], [ %40, %42 ], [ %40, %57 ], [ %74, %73 ], [ %74, %76 ], [ %74, %91 ], [ %247, %706 ], [ %247, %527 ], [ %247, %637 ], [ %247, %663 ], [ %247, %660 ]
  %719 = inttoptr i64 %718 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %719
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl17UpconvertedStringEv(%"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  %4 = and i32 %3, 1
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %8 = bitcast %"class.WTF::StringImpl"* %7 to i8*
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = tail call %"class.WTF::StringImpl"* @_ZN3WTF6String23Make16BitFrom8BitSourceEPKhj(i8* %8, i32 %10) #15
  br label %30

12:                                               ; preds = %1
  %13 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %13, label %30, label %14

14:                                               ; preds = %12
  %15 = load atomic i32, i32* %2 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #15
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !2

27:                                               ; preds = %18
  tail call void @llvm.trap() #15
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %30

30:                                               ; preds = %28, %14, %12, %6
  %31 = phi %"class.WTF::StringImpl"* [ %11, %6 ], [ null, %12 ], [ %0, %14 ], [ %0, %28 ]
  ret %"class.WTF::StringImpl"* %31
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String23Make16BitFrom8BitSourceEPKhj(i8*, i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* readonly, %"class.WTF::StringImpl"* readonly) local_unnamed_addr #9 {
  %3 = icmp eq %"class.WTF::StringImpl"* %0, %1
  br i1 %3, label %85, label %4

4:                                                ; preds = %2
  %5 = icmp ne %"class.WTF::StringImpl"* %0, null
  %6 = icmp ne %"class.WTF::StringImpl"* %1, null
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %85

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 acquire, align 4
  %11 = and i32 %10, 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 acquire, align 4
  %16 = and i32 %15, 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %85

18:                                               ; preds = %13, %8
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %20, %22
  br i1 %23, label %24, label %85

24:                                               ; preds = %18
  %25 = load atomic i32, i32* %9 monotonic, align 4
  %26 = and i32 %25, 1
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 1
  %31 = icmp ne i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %27, label %58, label %33

33:                                               ; preds = %24
  %34 = bitcast %"class.WTF::StringImpl"* %32 to i8*
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 1
  br i1 %31, label %36, label %41

36:                                               ; preds = %33
  %37 = bitcast %"class.WTF::StringImpl"* %35 to i8*
  %38 = zext i32 %20 to i64
  %39 = tail call i32 @bcmp(i8* %34, i8* %37, i64 %38) #15
  %40 = icmp eq i32 %39, 0
  br label %85

41:                                               ; preds = %33
  %42 = bitcast %"class.WTF::StringImpl"* %35 to i16*
  %43 = icmp eq i32 %20, 0
  br i1 %43, label %85, label %44

44:                                               ; preds = %41
  %45 = zext i32 %20 to i64
  br label %48

46:                                               ; preds = %48
  %47 = icmp eq i64 %57, %45
  br i1 %47, label %85, label %48

48:                                               ; preds = %46, %44
  %49 = phi i64 [ 0, %44 ], [ %57, %46 ]
  %50 = getelementptr inbounds i8, i8* %34, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = getelementptr inbounds i16, i16* %42, i64 %49
  %54 = load i16, i16* %53, align 2
  %55 = zext i16 %54 to i32
  %56 = icmp eq i32 %52, %55
  %57 = add nuw nsw i64 %49, 1
  br i1 %56, label %46, label %85

58:                                               ; preds = %24
  %59 = bitcast %"class.WTF::StringImpl"* %32 to i16*
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 1
  br i1 %31, label %61, label %78

61:                                               ; preds = %58
  %62 = bitcast %"class.WTF::StringImpl"* %60 to i8*
  %63 = icmp eq i32 %20, 0
  br i1 %63, label %85, label %64

64:                                               ; preds = %61
  %65 = zext i32 %20 to i64
  br label %68

66:                                               ; preds = %68
  %67 = icmp eq i64 %77, %65
  br i1 %67, label %85, label %68

68:                                               ; preds = %66, %64
  %69 = phi i64 [ 0, %64 ], [ %77, %66 ]
  %70 = getelementptr inbounds i8, i8* %62, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = getelementptr inbounds i16, i16* %59, i64 %69
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = icmp eq i32 %72, %75
  %77 = add nuw nsw i64 %69, 1
  br i1 %76, label %66, label %85

78:                                               ; preds = %58
  %79 = bitcast %"class.WTF::StringImpl"* %32 to i8*
  %80 = bitcast %"class.WTF::StringImpl"* %60 to i8*
  %81 = zext i32 %20 to i64
  %82 = shl nuw nsw i64 %81, 1
  %83 = tail call i32 @bcmp(i8* %79, i8* %80, i64 %82) #15
  %84 = icmp eq i32 %83, 0
  br label %85

85:                                               ; preds = %48, %46, %68, %66, %13, %78, %61, %41, %36, %18, %4, %2
  %86 = phi i1 [ true, %2 ], [ false, %4 ], [ false, %13 ], [ %40, %36 ], [ %84, %78 ], [ false, %18 ], [ true, %41 ], [ true, %61 ], [ false, %68 ], [ true, %66 ], [ true, %46 ], [ false, %48 ]
  ret i1 %86
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKhj(%"class.WTF::StringImpl"* readonly, i8* readonly, i32) local_unnamed_addr #9 {
  %4 = icmp eq %"class.WTF::StringImpl"* %0, null
  %5 = icmp ne i8* %1, null
  br i1 %4, label %6, label %8

6:                                                ; preds = %3
  %7 = xor i1 %5, true
  br label %41

8:                                                ; preds = %3
  br i1 %5, label %9, label %41

9:                                                ; preds = %8
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, %2
  br i1 %12, label %13, label %41

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %17, label %24, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.WTF::StringImpl"* %18 to i8*
  %21 = zext i32 %2 to i64
  %22 = tail call i32 @bcmp(i8* %20, i8* nonnull %1, i64 %21) #15
  %23 = icmp eq i32 %22, 0
  br label %41

24:                                               ; preds = %13
  %25 = bitcast %"class.WTF::StringImpl"* %18 to i16*
  %26 = icmp eq i32 %2, 0
  br i1 %26, label %41, label %27

27:                                               ; preds = %24
  %28 = zext i32 %2 to i64
  br label %31

29:                                               ; preds = %31
  %30 = icmp eq i64 %40, %28
  br i1 %30, label %41, label %31

31:                                               ; preds = %29, %27
  %32 = phi i64 [ 0, %27 ], [ %40, %29 ]
  %33 = getelementptr inbounds i8, i8* %1, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds i16, i16* %25, i64 %32
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = icmp eq i32 %35, %38
  %40 = add nuw nsw i64 %32, 1
  br i1 %39, label %29, label %41

41:                                               ; preds = %29, %31, %6, %8, %9, %19, %24
  %42 = phi i1 [ %23, %19 ], [ %7, %6 ], [ false, %8 ], [ false, %9 ], [ true, %24 ], [ false, %31 ], [ true, %29 ]
  ret i1 %42
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKDsj(%"class.WTF::StringImpl"* readonly, i16* readonly, i32) local_unnamed_addr #9 {
  %4 = icmp eq %"class.WTF::StringImpl"* %0, null
  %5 = icmp ne i16* %1, null
  br i1 %4, label %6, label %8

6:                                                ; preds = %3
  %7 = xor i1 %5, true
  br label %42

8:                                                ; preds = %3
  br i1 %5, label %9, label %42

9:                                                ; preds = %8
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, %2
  br i1 %12, label %13, label %42

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %19 = bitcast %"class.WTF::StringImpl"* %18 to i8*
  br i1 %17, label %36, label %20

20:                                               ; preds = %13
  %21 = icmp eq i32 %2, 0
  br i1 %21, label %42, label %22

22:                                               ; preds = %20
  %23 = zext i32 %2 to i64
  br label %26

24:                                               ; preds = %26
  %25 = icmp eq i64 %35, %23
  br i1 %25, label %42, label %26

26:                                               ; preds = %24, %22
  %27 = phi i64 [ 0, %22 ], [ %35, %24 ]
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = getelementptr inbounds i16, i16* %1, i64 %27
  %32 = load i16, i16* %31, align 2
  %33 = zext i16 %32 to i32
  %34 = icmp eq i32 %30, %33
  %35 = add nuw nsw i64 %27, 1
  br i1 %34, label %24, label %42

36:                                               ; preds = %13
  %37 = bitcast i16* %1 to i8*
  %38 = zext i32 %2 to i64
  %39 = shl nuw nsw i64 %38, 1
  %40 = tail call i32 @bcmp(i8* %19, i8* nonnull %37, i64 %39) #15
  %41 = icmp eq i32 %40, 0
  br label %42

42:                                               ; preds = %24, %26, %6, %8, %9, %20, %36
  %43 = phi i1 [ %41, %36 ], [ %7, %6 ], [ false, %8 ], [ false, %9 ], [ true, %20 ], [ true, %24 ], [ false, %26 ]
  ret i1 %43
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKh(%"class.WTF::StringImpl"* readonly, i8* readonly) local_unnamed_addr #2 {
  %3 = icmp eq %"class.WTF::StringImpl"* %0, null
  %4 = icmp ne i8* %1, null
  br i1 %3, label %5, label %7

5:                                                ; preds = %2
  %6 = xor i1 %4, true
  br label %60

7:                                                ; preds = %2
  br i1 %4, label %8, label %60

8:                                                ; preds = %7
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %14, label %37, label %16

16:                                               ; preds = %8
  %17 = bitcast %"class.WTF::StringImpl"* %15 to i8*
  %18 = icmp eq i32 %10, 0
  br i1 %18, label %32, label %21

19:                                               ; preds = %27
  %20 = icmp eq i32 %31, %10
  br i1 %20, label %32, label %21

21:                                               ; preds = %16, %19
  %22 = phi i32 [ %31, %19 ], [ 0, %16 ]
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %1, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %60, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds i8, i8* %17, i64 %23
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, %25
  %31 = add i32 %22, 1
  br i1 %30, label %19, label %60

32:                                               ; preds = %19, %16
  %33 = zext i32 %10 to i64
  %34 = getelementptr inbounds i8, i8* %1, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  br label %60

37:                                               ; preds = %8
  %38 = bitcast %"class.WTF::StringImpl"* %15 to i16*
  %39 = icmp eq i32 %10, 0
  br i1 %39, label %55, label %42

40:                                               ; preds = %48
  %41 = icmp eq i32 %54, %10
  br i1 %41, label %55, label %42

42:                                               ; preds = %37, %40
  %43 = phi i32 [ %54, %40 ], [ 0, %37 ]
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %1, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %60, label %48

48:                                               ; preds = %42
  %49 = getelementptr inbounds i16, i16* %38, i64 %44
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = zext i8 %46 to i32
  %53 = icmp eq i32 %51, %52
  %54 = add i32 %43, 1
  br i1 %53, label %40, label %60

55:                                               ; preds = %40, %37
  %56 = zext i32 %10 to i64
  %57 = getelementptr inbounds i8, i8* %1, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 0
  br label %60

60:                                               ; preds = %27, %21, %48, %42, %32, %55, %7, %5
  %61 = phi i1 [ %6, %5 ], [ false, %7 ], [ %36, %32 ], [ %59, %55 ], [ false, %42 ], [ false, %48 ], [ false, %21 ], [ false, %27 ]
  ret i1 %61
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* readonly, %"class.WTF::StringImpl"* readonly) local_unnamed_addr #9 {
  %3 = icmp eq %"class.WTF::StringImpl"* %0, %1
  br i1 %3, label %72, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %6, %8
  br i1 %9, label %10, label %72

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp ne i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  br i1 %14, label %45, label %20

20:                                               ; preds = %10
  %21 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 1
  br i1 %18, label %23, label %28

23:                                               ; preds = %20
  %24 = bitcast %"class.WTF::StringImpl"* %22 to i8*
  %25 = zext i32 %6 to i64
  %26 = tail call i32 @bcmp(i8* %21, i8* %24, i64 %25) #15
  %27 = icmp eq i32 %26, 0
  br label %72

28:                                               ; preds = %20
  %29 = bitcast %"class.WTF::StringImpl"* %22 to i16*
  %30 = icmp eq i32 %6, 0
  br i1 %30, label %72, label %31

31:                                               ; preds = %28
  %32 = zext i32 %6 to i64
  br label %35

33:                                               ; preds = %35
  %34 = icmp eq i64 %44, %32
  br i1 %34, label %72, label %35

35:                                               ; preds = %33, %31
  %36 = phi i64 [ 0, %31 ], [ %44, %33 ]
  %37 = getelementptr inbounds i8, i8* %21, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds i16, i16* %29, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = icmp eq i32 %39, %42
  %44 = add nuw nsw i64 %36, 1
  br i1 %43, label %33, label %72

45:                                               ; preds = %10
  %46 = bitcast %"class.WTF::StringImpl"* %19 to i16*
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 1
  br i1 %18, label %48, label %65

48:                                               ; preds = %45
  %49 = bitcast %"class.WTF::StringImpl"* %47 to i8*
  %50 = icmp eq i32 %6, 0
  br i1 %50, label %72, label %51

51:                                               ; preds = %48
  %52 = zext i32 %6 to i64
  br label %55

53:                                               ; preds = %55
  %54 = icmp eq i64 %64, %52
  br i1 %54, label %72, label %55

55:                                               ; preds = %53, %51
  %56 = phi i64 [ 0, %51 ], [ %64, %53 ]
  %57 = getelementptr inbounds i8, i8* %49, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = getelementptr inbounds i16, i16* %46, i64 %56
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = icmp eq i32 %59, %62
  %64 = add nuw nsw i64 %56, 1
  br i1 %63, label %53, label %72

65:                                               ; preds = %45
  %66 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  %67 = bitcast %"class.WTF::StringImpl"* %47 to i8*
  %68 = zext i32 %6 to i64
  %69 = shl nuw nsw i64 %68, 1
  %70 = tail call i32 @bcmp(i8* %66, i8* %67, i64 %69) #15
  %71 = icmp eq i32 %70, 0
  br label %72

72:                                               ; preds = %35, %33, %55, %53, %65, %48, %28, %23, %4, %2
  %73 = phi i1 [ true, %2 ], [ %27, %23 ], [ %71, %65 ], [ false, %4 ], [ true, %28 ], [ true, %48 ], [ false, %55 ], [ true, %53 ], [ true, %33 ], [ false, %35 ]
  ret i1 %73
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF20EqualIgnoringNullityEPNS_10StringImplES1_(%"class.WTF::StringImpl"* readonly, %"class.WTF::StringImpl"* readonly) local_unnamed_addr #9 {
  %3 = icmp eq %"class.WTF::StringImpl"* %0, null
  %4 = icmp ne %"class.WTF::StringImpl"* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %20, label %18

10:                                               ; preds = %2
  %11 = icmp eq %"class.WTF::StringImpl"* %1, null
  %12 = icmp ne %"class.WTF::StringImpl"* %0, null
  %13 = and i1 %12, %11
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %6, %14, %10
  %19 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %0, %"class.WTF::StringImpl"* %1)
  br label %20

20:                                               ; preds = %14, %6, %18
  %21 = phi i1 [ %19, %18 ], [ true, %6 ], [ true, %14 ]
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF32CodeUnitCompareIgnoringASCIICaseEPKNS_10StringImplEPKh(%"class.WTF::StringImpl"*, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = tail call i64 @strlen(i8* nonnull %1) #16
  %6 = trunc i64 %5 to i32
  br label %7

7:                                                ; preds = %2, %4
  %8 = phi i32 [ %6, %4 ], [ 0, %2 ]
  %9 = tail call i32 @_ZN3WTF32CodeUnitCompareIgnoringASCIICaseIhEEiPKNS_10StringImplEPKT_j(%"class.WTF::StringImpl"* %0, i8* %1, i32 %8)
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3WTF32CodeUnitCompareIgnoringASCIICaseIhEEiPKNS_10StringImplEPKT_j(%"class.WTF::StringImpl"*, i8*, i32) local_unnamed_addr #0 comdat {
  %4 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %4, label %5, label %8

5:                                                ; preds = %3
  %6 = icmp ne i32 %2, 0
  %7 = sext i1 %6 to i32
  br label %87

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i8* %1, null
  br i1 %11, label %12, label %15

12:                                               ; preds = %8
  %13 = icmp ne i32 %10, 0
  %14 = zext i1 %13 to i32
  br label %87

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %21 = icmp ult i32 %10, %2
  %22 = select i1 %21, i32 %10, i32 %2
  %23 = icmp eq i32 %22, 0
  br i1 %19, label %53, label %24

24:                                               ; preds = %15
  br i1 %23, label %48, label %25

25:                                               ; preds = %24
  %26 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  br label %27

27:                                               ; preds = %25, %40
  %28 = phi i32 [ %43, %40 ], [ 0, %25 ]
  %29 = phi i8* [ %42, %40 ], [ %1, %25 ]
  %30 = phi i8* [ %41, %40 ], [ %26, %25 ]
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = load i8, i8* %29, align 1
  %36 = zext i8 %35 to i64
  %37 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %34, %38
  br i1 %39, label %40, label %45

40:                                               ; preds = %27
  %41 = getelementptr inbounds i8, i8* %30, i64 1
  %42 = getelementptr inbounds i8, i8* %29, i64 1
  %43 = add nuw i32 %28, 1
  %44 = icmp ult i32 %43, %22
  br i1 %44, label %27, label %48

45:                                               ; preds = %27
  %46 = icmp ugt i8 %34, %38
  %47 = select i1 %46, i32 1, i32 -1
  br label %87

48:                                               ; preds = %40, %24
  %49 = icmp eq i32 %10, %2
  br i1 %49, label %87, label %50

50:                                               ; preds = %48
  %51 = icmp ugt i32 %10, %2
  %52 = select i1 %51, i32 1, i32 -1
  br label %87

53:                                               ; preds = %15
  br i1 %23, label %82, label %54

54:                                               ; preds = %53
  %55 = bitcast %"class.WTF::StringImpl"* %20 to i16*
  br label %56

56:                                               ; preds = %54, %73
  %57 = phi i32 [ %76, %73 ], [ 0, %54 ]
  %58 = phi i8* [ %75, %73 ], [ %1, %54 ]
  %59 = phi i16* [ %74, %73 ], [ %55, %54 ]
  %60 = load i16, i16* %59, align 2
  %61 = add i16 %60, -65
  %62 = icmp ult i16 %61, 26
  %63 = zext i1 %62 to i16
  %64 = shl nuw nsw i16 %63, 5
  %65 = or i16 %64, %60
  %66 = zext i16 %65 to i32
  %67 = load i8, i8* %58, align 1
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %73, label %78

73:                                               ; preds = %56
  %74 = getelementptr inbounds i16, i16* %59, i64 1
  %75 = getelementptr inbounds i8, i8* %58, i64 1
  %76 = add nuw i32 %57, 1
  %77 = icmp ult i32 %76, %22
  br i1 %77, label %56, label %82

78:                                               ; preds = %56
  %79 = zext i8 %70 to i32
  %80 = icmp ugt i32 %66, %79
  %81 = select i1 %80, i32 1, i32 -1
  br label %87

82:                                               ; preds = %73, %53
  %83 = icmp eq i32 %10, %2
  br i1 %83, label %87, label %84

84:                                               ; preds = %82
  %85 = icmp ugt i32 %10, %2
  %86 = select i1 %85, i32 1, i32 -1
  br label %87

87:                                               ; preds = %84, %82, %78, %50, %48, %45, %12, %5
  %88 = phi i32 [ %7, %5 ], [ %14, %12 ], [ %47, %45 ], [ %52, %50 ], [ 0, %48 ], [ %81, %78 ], [ %86, %84 ], [ 0, %82 ]
  ret i32 %88
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3WTF32CodeUnitCompareIgnoringASCIICaseEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #0 {
  %3 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %3, label %4, label %11

4:                                                ; preds = %2
  %5 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %5, label %27, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp ne i32 %8, 0
  %10 = zext i1 %9 to i32
  br label %27

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 1
  br i1 %15, label %22, label %17

17:                                               ; preds = %11
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = tail call i32 @_ZN3WTF32CodeUnitCompareIgnoringASCIICaseIhEEiPKNS_10StringImplEPKT_j(%"class.WTF::StringImpl"* %0, i8* %18, i32 %20) #15
  br label %27

22:                                               ; preds = %11
  %23 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = tail call i32 @_ZN3WTF32CodeUnitCompareIgnoringASCIICaseIDsEEiPKNS_10StringImplEPKT_j(%"class.WTF::StringImpl"* %0, i16* %23, i32 %25) #15
  br label %27

27:                                               ; preds = %22, %17, %6, %4
  %28 = phi i32 [ 0, %4 ], [ %10, %6 ], [ %21, %17 ], [ %26, %22 ]
  ret i32 %28
}

declare void @_ZN3WTF17AtomicStringTable6RemoveEPNS_10StringImplE(%"class.WTF::AtomicStringTable"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare void @_ZN3WTF9ThreadingC1Ev(%"class.WTF::Threading"*) unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #10

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #11

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #11

declare i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare i32 @u_tolower_69(i32) local_unnamed_addr #1

declare i32 @u_strFoldCase_69(i16*, i32, i16*, i32, i32, i32*) local_unnamed_addr #1

declare i32 @u_memcasecmp_69(i16*, i16*, i32, i32) local_unnamed_addr #1

declare i32 @u_foldCase_69(i32, i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3WTF32CodeUnitCompareIgnoringASCIICaseIDsEEiPKNS_10StringImplEPKT_j(%"class.WTF::StringImpl"*, i16*, i32) local_unnamed_addr #0 comdat {
  %4 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %4, label %5, label %8

5:                                                ; preds = %3
  %6 = icmp ne i32 %2, 0
  %7 = sext i1 %6 to i32
  br label %91

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i16* %1, null
  br i1 %11, label %12, label %15

12:                                               ; preds = %8
  %13 = icmp ne i32 %10, 0
  %14 = zext i1 %13 to i32
  br label %91

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %21 = icmp ult i32 %10, %2
  %22 = select i1 %21, i32 %10, i32 %2
  %23 = icmp eq i32 %22, 0
  br i1 %19, label %58, label %24

24:                                               ; preds = %15
  br i1 %23, label %53, label %25

25:                                               ; preds = %24
  %26 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  br label %27

27:                                               ; preds = %25, %44
  %28 = phi i32 [ %47, %44 ], [ 0, %25 ]
  %29 = phi i16* [ %46, %44 ], [ %1, %25 ]
  %30 = phi i8* [ %45, %44 ], [ %26, %25 ]
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = load i16, i16* %29, align 2
  %37 = add i16 %36, -65
  %38 = icmp ult i16 %37, 26
  %39 = zext i1 %38 to i16
  %40 = shl nuw nsw i16 %39, 5
  %41 = or i16 %40, %36
  %42 = zext i16 %41 to i32
  %43 = icmp eq i32 %35, %42
  br i1 %43, label %44, label %49

44:                                               ; preds = %27
  %45 = getelementptr inbounds i8, i8* %30, i64 1
  %46 = getelementptr inbounds i16, i16* %29, i64 1
  %47 = add nuw i32 %28, 1
  %48 = icmp ult i32 %47, %22
  br i1 %48, label %27, label %53

49:                                               ; preds = %27
  %50 = zext i8 %34 to i32
  %51 = icmp ugt i32 %50, %42
  %52 = select i1 %51, i32 1, i32 -1
  br label %91

53:                                               ; preds = %44, %24
  %54 = icmp eq i32 %10, %2
  br i1 %54, label %91, label %55

55:                                               ; preds = %53
  %56 = icmp ugt i32 %10, %2
  %57 = select i1 %56, i32 1, i32 -1
  br label %91

58:                                               ; preds = %15
  br i1 %23, label %86, label %59

59:                                               ; preds = %58
  %60 = bitcast %"class.WTF::StringImpl"* %20 to i16*
  br label %61

61:                                               ; preds = %59, %78
  %62 = phi i32 [ %81, %78 ], [ 0, %59 ]
  %63 = phi i16* [ %80, %78 ], [ %1, %59 ]
  %64 = phi i16* [ %79, %78 ], [ %60, %59 ]
  %65 = load i16, i16* %64, align 2
  %66 = add i16 %65, -65
  %67 = icmp ult i16 %66, 26
  %68 = zext i1 %67 to i16
  %69 = shl nuw nsw i16 %68, 5
  %70 = or i16 %69, %65
  %71 = load i16, i16* %63, align 2
  %72 = add i16 %71, -65
  %73 = icmp ult i16 %72, 26
  %74 = zext i1 %73 to i16
  %75 = shl nuw nsw i16 %74, 5
  %76 = or i16 %75, %71
  %77 = icmp eq i16 %70, %76
  br i1 %77, label %78, label %83

78:                                               ; preds = %61
  %79 = getelementptr inbounds i16, i16* %64, i64 1
  %80 = getelementptr inbounds i16, i16* %63, i64 1
  %81 = add nuw i32 %62, 1
  %82 = icmp ult i32 %81, %22
  br i1 %82, label %61, label %86

83:                                               ; preds = %61
  %84 = icmp ugt i16 %70, %76
  %85 = select i1 %84, i32 1, i32 -1
  br label %91

86:                                               ; preds = %78, %58
  %87 = icmp eq i32 %10, %2
  br i1 %87, label %91, label %88

88:                                               ; preds = %86
  %89 = icmp ugt i32 %10, %2
  %90 = select i1 %89, i32 1, i32 -1
  br label %91

91:                                               ; preds = %88, %86, %83, %55, %53, %49, %12, %5
  %92 = phi i32 [ %7, %5 ], [ %14, %12 ], [ %52, %49 ], [ %57, %55 ], [ 0, %53 ], [ %85, %83 ], [ %90, %88 ], [ 0, %86 ]
  ret i32 %92
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISB_S6_SC_EERjRS3_EENS_18HashTableAddResultISD_S4_EEOT0_OT1_(%"class.WTF::HashTable"*, i32* dereferenceable(4), %"class.WTF::StringImpl"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load i32, i32* %1, align 4
  %17 = and i32 %16, %14
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %18
  %20 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %19, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %66, label %23

23:                                               ; preds = %10
  %24 = xor i32 %16, -1
  %25 = lshr i32 %16, 23
  %26 = add i32 %25, %24
  %27 = shl i32 %26, 12
  %28 = xor i32 %27, %26
  %29 = lshr i32 %28, 7
  %30 = xor i32 %29, %28
  %31 = shl i32 %30, 2
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 20
  %34 = xor i32 %33, %32
  %35 = or i32 %34, 1
  %36 = zext i32 %35 to i64
  br label %37

37:                                               ; preds = %23, %44
  %38 = phi i32 [ %21, %23 ], [ %53, %44 ]
  %39 = phi %"struct.WTF::KeyValuePair"* [ %19, %23 ], [ %51, %44 ]
  %40 = phi %"struct.WTF::KeyValuePair"* [ null, %23 ], [ %46, %44 ]
  %41 = phi i64 [ %18, %23 ], [ %50, %44 ]
  %42 = phi i64 [ 0, %23 ], [ %48, %44 ]
  %43 = icmp eq i32 %38, %16
  br i1 %43, label %85, label %44

44:                                               ; preds = %37
  %45 = icmp eq i32 %38, -1
  %46 = select i1 %45, %"struct.WTF::KeyValuePair"* %39, %"struct.WTF::KeyValuePair"* %40
  %47 = icmp eq i64 %42, 0
  %48 = select i1 %47, i64 %36, i64 %42
  %49 = add i64 %48, %41
  %50 = and i64 %49, %15
  %51 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %50
  %52 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %51, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %37

55:                                               ; preds = %44
  %56 = icmp eq %"struct.WTF::KeyValuePair"* %46, null
  br i1 %56, label %66, label %57

57:                                               ; preds = %55
  %58 = bitcast %"struct.WTF::KeyValuePair"* %46 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 0, i64 16, i1 false) #15
  %59 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %60 = load i32, i32* %59, align 8
  %61 = add i32 %60, 2147483647
  %62 = and i32 %61, 2147483647
  %63 = and i32 %60, -2147483648
  %64 = or i32 %62, %63
  store i32 %64, i32* %59, align 8
  %65 = load i32, i32* %1, align 4
  br label %66

66:                                               ; preds = %10, %55, %57
  %67 = phi i32 [ %65, %57 ], [ %16, %55 ], [ %16, %10 ]
  %68 = phi %"struct.WTF::KeyValuePair"* [ %46, %57 ], [ %51, %55 ], [ %19, %10 ]
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 0
  store i32 %67, i32* %69, align 8
  %70 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 1
  %71 = bitcast %"class.WTF::StringImpl"** %2 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = bitcast %"class.WTF::StringImpl"** %70 to i64*
  store i64 %72, i64* %73, align 8
  %74 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %75 = load i32, i32* %74, align 4
  %76 = add i32 %75, 1
  store i32 %76, i32* %74, align 4
  %77 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %78 = load i32, i32* %77, align 8
  %79 = add i32 %78, %76
  %80 = shl i32 %79, 1
  %81 = load i32, i32* %12, align 8
  %82 = icmp ult i32 %80, %81
  br i1 %82, label %85, label %83

83:                                               ; preds = %66
  %84 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %68)
  br label %85

85:                                               ; preds = %37, %66, %83
  %86 = phi i8 [ 1, %66 ], [ 1, %83 ], [ 0, %37 ]
  %87 = phi %"struct.WTF::KeyValuePair"* [ %68, %66 ], [ %84, %83 ], [ %39, %37 ]
  %88 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %87, 0
  %89 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %88, i8 %86, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %89
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #15
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #15
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* %22, i8* %23) #15
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.12, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #15
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #15
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #15
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIjPNS_10StringImplEEEEEPKcv, i64 0, i64 0)) #15
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #15
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair"*
  %37 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSE_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %36, i32 %32, %"struct.WTF::KeyValuePair"* %1) #15
  ret %"struct.WTF::KeyValuePair"* %37
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSE_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*, i32, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"struct.WTF::KeyValuePair"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %9, align 8
  %17 = ptrtoint %"struct.WTF::KeyValuePair"* %16 to i64
  br label %31

18:                                               ; preds = %104
  %19 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %105, %18 ]
  %23 = phi %"struct.WTF::KeyValuePair"* [ null, %10 ], [ %108, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %26) #15
  br label %27

27:                                               ; preds = %20, %25
  %28 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, -2147483648
  store i32 %30, i32* %28, align 8
  ret %"struct.WTF::KeyValuePair"* %23

31:                                               ; preds = %13, %104
  %32 = phi i64 [ %17, %13 ], [ %105, %104 ]
  %33 = phi i32 [ %7, %13 ], [ %106, %104 ]
  %34 = phi %"struct.WTF::KeyValuePair"* [ %16, %13 ], [ %107, %104 ]
  %35 = phi %"struct.WTF::KeyValuePair"* [ null, %13 ], [ %108, %104 ]
  %36 = phi i32 [ 0, %13 ], [ %109, %104 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %34, i64 %37
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %38, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = add i32 %40, 1
  %42 = icmp ult i32 %41, 2
  br i1 %42, label %104, label %43

43:                                               ; preds = %31
  %44 = and i32 %40, %14
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %45
  %47 = ptrtoint %"struct.WTF::KeyValuePair"* %46 to i64
  %48 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %46, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %68, label %51

51:                                               ; preds = %43
  %52 = xor i32 %40, -1
  %53 = lshr i32 %40, 23
  %54 = add i32 %53, %52
  %55 = shl i32 %54, 12
  %56 = xor i32 %55, %54
  %57 = lshr i32 %56, 7
  %58 = xor i32 %57, %56
  %59 = shl i32 %58, 2
  %60 = xor i32 %59, %58
  %61 = lshr i32 %60, 20
  %62 = xor i32 %61, %60
  %63 = or i32 %62, 1
  %64 = zext i32 %63 to i64
  br label %74

65:                                               ; preds = %81
  %66 = ptrtoint %"struct.WTF::KeyValuePair"* %88 to i64
  %67 = inttoptr i64 %83 to %"struct.WTF::KeyValuePair"*
  br label %68

68:                                               ; preds = %65, %43
  %69 = phi i64 [ %66, %65 ], [ %47, %43 ]
  %70 = phi %"struct.WTF::KeyValuePair"* [ %67, %65 ], [ null, %43 ]
  %71 = icmp eq %"struct.WTF::KeyValuePair"* %70, null
  %72 = ptrtoint %"struct.WTF::KeyValuePair"* %70 to i64
  %73 = select i1 %71, i64 %69, i64 %72
  br label %93

74:                                               ; preds = %81, %51
  %75 = phi i64 [ 0, %51 ], [ %83, %81 ]
  %76 = phi i32 [ %49, %51 ], [ %91, %81 ]
  %77 = phi i64 [ %47, %51 ], [ %89, %81 ]
  %78 = phi i64 [ %45, %51 ], [ %87, %81 ]
  %79 = phi i64 [ 0, %51 ], [ %85, %81 ]
  %80 = icmp eq i32 %76, %40
  br i1 %80, label %93, label %81

81:                                               ; preds = %74
  %82 = icmp eq i32 %76, -1
  %83 = select i1 %82, i64 %77, i64 %75
  %84 = icmp eq i64 %79, 0
  %85 = select i1 %84, i64 %64, i64 %79
  %86 = add i64 %85, %78
  %87 = and i64 %86, %15
  %88 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %87
  %89 = ptrtoint %"struct.WTF::KeyValuePair"* %88 to i64
  %90 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %88, i64 0, i32 0
  %91 = load i32, i32* %90, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %65, label %74

93:                                               ; preds = %74, %68
  %94 = phi i64 [ %73, %68 ], [ %77, %74 ]
  %95 = inttoptr i64 %94 to %"struct.WTF::KeyValuePair"*
  %96 = inttoptr i64 %94 to i8*
  %97 = bitcast %"struct.WTF::KeyValuePair"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 16, i1 false) #15
  %98 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %9, align 8
  %99 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %98, i64 %37
  %100 = icmp eq %"struct.WTF::KeyValuePair"* %99, %3
  %101 = select i1 %100, %"struct.WTF::KeyValuePair"* %95, %"struct.WTF::KeyValuePair"* %35
  %102 = load i32, i32* %6, align 8
  %103 = ptrtoint %"struct.WTF::KeyValuePair"* %98 to i64
  br label %104

104:                                              ; preds = %31, %93
  %105 = phi i64 [ %32, %31 ], [ %103, %93 ]
  %106 = phi i32 [ %33, %31 ], [ %102, %93 ]
  %107 = phi %"struct.WTF::KeyValuePair"* [ %34, %31 ], [ %98, %93 ]
  %108 = phi %"struct.WTF::KeyValuePair"* [ %35, %31 ], [ %101, %93 ]
  %109 = add i32 %36, 1
  %110 = icmp eq i32 %109, %106
  br i1 %110, label %18, label %31
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %2, %5
  %6 = phi i32 [ %9, %5 ], [ %1, %2 ]
  %7 = phi i32 [ %8, %5 ], [ %1, %2 ]
  %8 = or i32 %7, %6
  %9 = lshr i32 %6, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %5

11:                                               ; preds = %5
  %12 = shl i32 %8, 1
  %13 = add i32 %12, 2
  %14 = icmp ugt i32 %13, 8
  %15 = select i1 %14, i32 %13, i32 8
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi i32 [ 8, %2 ], [ %15, %11 ]
  %18 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %32

21:                                               ; preds = %16
  %22 = icmp slt i32 %17, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #15
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.12, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.13, i64 0, i64 0)) #15
  %25 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #15
  br label %26

26:                                               ; preds = %21, %23
  %27 = zext i32 %17 to i64
  %28 = shl nuw nsw i64 %27, 4
  %29 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIjPNS_10StringImplEEEEEPKcv, i64 0, i64 0)) #15
  call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 0, i64 %28, i1 false) #15
  %30 = bitcast i8* %29 to %"struct.WTF::KeyValuePair"*
  %31 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIjPNS_10StringImplEEENS_24KeyValuePairKeyExtractorENS_13AlreadyHashedENS_18HashMapValueTraitsINS_10HashTraitsIjEENS8_IS3_EEEES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSE_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %30, i32 %17, %"struct.WTF::KeyValuePair"* null) #15
  br label %32

32:                                               ; preds = %26, %16
  ret void
}

declare i32 @u_charDirection_69(i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #14

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { nofree nounwind }
attributes #12 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind readnone speculatable }
attributes #14 = { nofree nounwind readonly }
attributes #15 = { nounwind }
attributes #16 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6, !4}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !6, !4}
!9 = !{!"branch_weights", i32 1, i32 1048575}
!10 = !{!"branch_weights", i32 2000, i32 1}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !4}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !4}
!20 = distinct !{!20, !4}
!21 = distinct !{!21, !6, !4}
!22 = distinct !{!22, !4}
!23 = distinct !{!23, !6, !4}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !4}
!30 = distinct !{!30, !4}
!31 = distinct !{!31, !18}
!32 = distinct !{!32, !4}
!33 = distinct !{!33, !6, !4}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = distinct !{!39, !4}
!40 = distinct !{!40, !4}
!41 = distinct !{!41, !4}
!42 = distinct !{!42, !6, !4}
!43 = !{!44}
!44 = distinct !{!44, !45}
!45 = distinct !{!45, !"LVerDomain"}
!46 = !{!47}
!47 = distinct !{!47, !45}
!48 = distinct !{!48, !4}
!49 = distinct !{!49, !4}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = distinct !{!55, !4}
!56 = distinct !{!56, !4}
!57 = !{!"branch_weights", i32 2000, i32 2001, i32 1}
!58 = distinct !{!58, !4}
!59 = distinct !{!59, !4}
!60 = distinct !{!60, !6, !4}
!61 = distinct !{!61, !6, !4}
!62 = distinct !{!62, !4}
!63 = distinct !{!63, !4}
!64 = distinct !{!64, !6, !4}
!65 = distinct !{!65, !6, !4}
!66 = distinct !{!66, !18}
!67 = distinct !{!67, !4}
!68 = distinct !{!68, !18}
!69 = distinct !{!69, !4}
!70 = distinct !{!70, !4}
!71 = distinct !{!71, !4}
!72 = distinct !{!72, !18}
!73 = distinct !{!73, !4}
!74 = distinct !{!74, !18}
!75 = distinct !{!75, !4}
!76 = distinct !{!76, !4}
!77 = distinct !{!77, !4}
!78 = !{!79}
!79 = distinct !{!79, !80}
!80 = distinct !{!80, !"LVerDomain"}
!81 = !{!82}
!82 = distinct !{!82, !80}
!83 = distinct !{!83, !4}
!84 = distinct !{!84, !4}
!85 = distinct !{!85, !18}
!86 = distinct !{!86, !18}
!87 = !{!88}
!88 = distinct !{!88, !89}
!89 = distinct !{!89, !"LVerDomain"}
!90 = !{!91}
!91 = distinct !{!91, !89}
!92 = distinct !{!92, !4}
!93 = distinct !{!93, !4}
!94 = distinct !{!94, !18}
!95 = !{!96}
!96 = distinct !{!96, !97}
!97 = distinct !{!97, !"LVerDomain"}
!98 = !{!99}
!99 = distinct !{!99, !97}
!100 = distinct !{!100, !4}
!101 = distinct !{!101, !4}
!102 = !{!103}
!103 = distinct !{!103, !104}
!104 = distinct !{!104, !"LVerDomain"}
!105 = !{!106}
!106 = distinct !{!106, !104}
!107 = distinct !{!107, !4}
!108 = distinct !{!108, !18}
!109 = distinct !{!109, !4}
!110 = !{!111}
!111 = distinct !{!111, !112}
!112 = distinct !{!112, !"LVerDomain"}
!113 = !{!114}
!114 = distinct !{!114, !112}
!115 = distinct !{!115, !4}
!116 = distinct !{!116, !18}
!117 = distinct !{!117, !4}
!118 = distinct !{!118, !18}
!119 = !{!120}
!120 = distinct !{!120, !121}
!121 = distinct !{!121, !"LVerDomain"}
!122 = !{!123}
!123 = distinct !{!123, !121}
!124 = distinct !{!124, !4}
!125 = distinct !{!125, !18}
!126 = distinct !{!126, !4}
