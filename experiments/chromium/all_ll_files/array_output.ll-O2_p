; ModuleID = '../../ppapi/cpp/array_output.cc'
source_filename = "../../ppapi/cpp/array_output.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.pp::VarArrayOutputAdapterWithStorage" = type { %"class.pp::ArrayOutputAdapter", %"class.std::__1::vector", %"class.std::__1::vector.1" }
%"class.pp::ArrayOutputAdapter" = type { %"class.pp::ArrayOutputAdapterBase", %"class.std::__1::vector"* }
%"class.pp::ArrayOutputAdapterBase" = type { i32 (...)**, %struct.PP_ArrayOutput }
%struct.PP_ArrayOutput = type { i8* (i8*, i32, i32)*, i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %struct.PP_Var*, %struct.PP_Var*, %"class.std::__1::__compressed_pair" }
%struct.PP_Var = type { i32, i32, %union.PP_VarValue }
%union.PP_VarValue = type { double }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.PP_Var* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.pp::Var"*, %"class.pp::Var"*, %"class.std::__1::__compressed_pair.3" }
%"class.pp::Var" = type <{ i32 (...)**, %struct.PP_Var, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.pp::Var"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN2pp3VarENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZN2pp18ArrayOutputAdapterI6PP_VarE13GetDataBufferEjj = comdat any

$_ZNSt3__16vectorIN2pp3VarENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_ = comdat any

$_ZNSt3__16vectorI6PP_VarNS_9allocatorIS1_EEE8__appendEm = comdat any

@_ZTVN2pp32VarArrayOutputAdapterWithStorageE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.pp::VarArrayOutputAdapterWithStorage"*)* @_ZN2pp32VarArrayOutputAdapterWithStorageD2Ev to i8*), i8* bitcast (void (%"class.pp::VarArrayOutputAdapterWithStorage"*)* @_ZN2pp32VarArrayOutputAdapterWithStorageD0Ev to i8*), i8* bitcast (i8* (%"class.pp::ArrayOutputAdapter"*, i32, i32)* @_ZN2pp18ArrayOutputAdapterI6PP_VarE13GetDataBufferEjj to i8*)] }, align 8
@_ZTVN2pp3VarE = external unnamed_addr constant { [5 x i8*] }, align 8

@_ZN2pp32VarArrayOutputAdapterWithStorageC1Ev = hidden unnamed_addr alias void (%"class.pp::VarArrayOutputAdapterWithStorage"*), void (%"class.pp::VarArrayOutputAdapterWithStorage"*)* @_ZN2pp32VarArrayOutputAdapterWithStorageC2Ev
@_ZN2pp32VarArrayOutputAdapterWithStorageD1Ev = hidden unnamed_addr alias void (%"class.pp::VarArrayOutputAdapterWithStorage"*), void (%"class.pp::VarArrayOutputAdapterWithStorage"*)* @_ZN2pp32VarArrayOutputAdapterWithStorageD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN2pp22ArrayOutputAdapterBase18GetDataBufferThunkEPvjj(i8*, i32, i32) #0 align 2 {
  %4 = bitcast i8* %0 to %"class.pp::ArrayOutputAdapterBase"*
  %5 = bitcast i8* %0 to i8* (%"class.pp::ArrayOutputAdapterBase"*, i32, i32)***
  %6 = load i8* (%"class.pp::ArrayOutputAdapterBase"*, i32, i32)**, i8* (%"class.pp::ArrayOutputAdapterBase"*, i32, i32)*** %5, align 8
  %7 = getelementptr inbounds i8* (%"class.pp::ArrayOutputAdapterBase"*, i32, i32)*, i8* (%"class.pp::ArrayOutputAdapterBase"*, i32, i32)** %6, i64 2
  %8 = load i8* (%"class.pp::ArrayOutputAdapterBase"*, i32, i32)*, i8* (%"class.pp::ArrayOutputAdapterBase"*, i32, i32)** %7, align 8
  %9 = tail call i8* %8(%"class.pp::ArrayOutputAdapterBase"* %4, i32 %1, i32 %2) #9
  ret i8* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2pp32VarArrayOutputAdapterWithStorageC2Ev(%"class.pp::VarArrayOutputAdapterWithStorage"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 0, i32 0
  %3 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  store i8* (i8*, i32, i32)* @_ZN2pp22ArrayOutputAdapterBase18GetDataBufferThunkEPvjj, i8* (i8*, i32, i32)** %4, align 8
  %5 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %6 = bitcast i8** %5 to %"class.pp::ArrayOutputAdapterBase"**
  store %"class.pp::ArrayOutputAdapterBase"* %2, %"class.pp::ArrayOutputAdapterBase"** %6, align 8
  %7 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 0, i32 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2pp32VarArrayOutputAdapterWithStorageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %8 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 1
  %9 = bitcast %"class.std::__1::vector"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 48, i1 false)
  store %"class.std::__1::vector"* %8, %"class.std::__1::vector"** %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2pp32VarArrayOutputAdapterWithStorageD2Ev(%"class.pp::VarArrayOutputAdapterWithStorage"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2pp32VarArrayOutputAdapterWithStorageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %struct.PP_Var*, %struct.PP_Var** %3, align 8
  %5 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = load %struct.PP_Var*, %struct.PP_Var** %5, align 8
  %7 = icmp eq %struct.PP_Var* %4, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = tail call dereferenceable(24) %"class.std::__1::vector.1"* @_ZN2pp32VarArrayOutputAdapterWithStorage6outputEv(%"class.pp::VarArrayOutputAdapterWithStorage"* %0)
  br label %10

10:                                               ; preds = %8, %1
  %11 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 2
  %12 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %11, i64 0, i32 0, i32 0
  %13 = load %"class.pp::Var"*, %"class.pp::Var"** %12, align 8
  %14 = icmp eq %"class.pp::Var"* %13, null
  br i1 %14, label %32, label %15

15:                                               ; preds = %10
  %16 = bitcast %"class.pp::Var"* %13 to i8*
  %17 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 2, i32 0, i32 1
  %18 = load %"class.pp::Var"*, %"class.pp::Var"** %17, align 8
  %19 = icmp eq %"class.pp::Var"* %18, %13
  br i1 %19, label %30, label %20

20:                                               ; preds = %15, %20
  %21 = phi %"class.pp::Var"* [ %22, %20 ], [ %18, %15 ]
  %22 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %21, i64 -1
  %23 = bitcast %"class.pp::Var"* %22 to void (%"class.pp::Var"*)***
  %24 = load void (%"class.pp::Var"*)**, void (%"class.pp::Var"*)*** %23, align 8
  %25 = load void (%"class.pp::Var"*)*, void (%"class.pp::Var"*)** %24, align 8
  tail call void %25(%"class.pp::Var"* %22) #9
  %26 = icmp eq %"class.pp::Var"* %22, %13
  br i1 %26, label %27, label %20

27:                                               ; preds = %20
  %28 = bitcast %"class.std::__1::vector.1"* %11 to i8**
  %29 = load i8*, i8** %28, align 8
  br label %30

30:                                               ; preds = %27, %15
  %31 = phi i8* [ %29, %27 ], [ %16, %15 ]
  store %"class.pp::Var"* %13, %"class.pp::Var"** %17, align 8
  tail call void @_ZdlPv(i8* %31) #10
  br label %32

32:                                               ; preds = %10, %30
  %33 = load %struct.PP_Var*, %struct.PP_Var** %3, align 8
  %34 = icmp eq %struct.PP_Var* %33, null
  br i1 %34, label %39, label %35

35:                                               ; preds = %32
  %36 = ptrtoint %struct.PP_Var* %33 to i64
  %37 = bitcast %struct.PP_Var** %5 to i64*
  store i64 %36, i64* %37, align 8
  %38 = bitcast %struct.PP_Var* %33 to i8*
  tail call void @_ZdlPv(i8* %38) #10
  br label %39

39:                                               ; preds = %32, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.std::__1::vector.1"* @_ZN2pp32VarArrayOutputAdapterWithStorage6outputEv(%"class.pp::VarArrayOutputAdapterWithStorage"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.pp::Var", align 8
  %3 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = bitcast %struct.PP_Var** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 4
  tail call void @_ZNSt3__16vectorIN2pp3VarENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.1"* %3, i64 %11)
  %12 = load i64, i64* %6, align 8
  %13 = load i64, i64* %8, align 8
  %14 = icmp eq i64 %12, %13
  br i1 %14, label %24, label %15

15:                                               ; preds = %1
  %16 = bitcast %"class.pp::Var"* %2 to i8*
  %17 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %2, i64 0, i32 0
  %18 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %2, i64 0, i32 1
  %19 = bitcast %struct.PP_Var* %18 to i8*
  %20 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %2, i64 0, i32 2
  %21 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 2, i32 0, i32 1
  %22 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %23 = bitcast %"class.pp::Var"** %21 to i64*
  br label %26

24:                                               ; preds = %39, %1
  %25 = phi i64 [ %12, %1 ], [ %42, %39 ]
  store i64 %25, i64* %6, align 8
  ret %"class.std::__1::vector.1"* %3

26:                                               ; preds = %15, %39
  %27 = phi i64 [ %13, %15 ], [ %42, %39 ]
  %28 = phi i64 [ 0, %15 ], [ %40, %39 ]
  %29 = inttoptr i64 %27 to %struct.PP_Var*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #9
  %30 = getelementptr inbounds %struct.PP_Var, %struct.PP_Var* %29, i64 %28
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2pp3VarE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %17, align 8
  %31 = bitcast %struct.PP_Var* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %31, i64 16, i1 false) #9
  store i8 1, i8* %20, align 8
  %32 = load %"class.pp::Var"*, %"class.pp::Var"** %21, align 8
  %33 = load %"class.pp::Var"*, %"class.pp::Var"** %22, align 8
  %34 = icmp ult %"class.pp::Var"* %32, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %26
  call void @_ZN2pp3VarC1ERKS0_(%"class.pp::Var"* %32, %"class.pp::Var"* nonnull dereferenceable(32) %2) #9
  %36 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %32, i64 1
  %37 = ptrtoint %"class.pp::Var"* %36 to i64
  store i64 %37, i64* %23, align 8
  br label %39

38:                                               ; preds = %26
  call void @_ZNSt3__16vectorIN2pp3VarENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector.1"* %3, %"class.pp::Var"* nonnull dereferenceable(32) %2) #9
  br label %39

39:                                               ; preds = %35, %38
  call void @_ZN2pp3VarD1Ev(%"class.pp::Var"* nonnull %2) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #9
  %40 = add nuw i64 %28, 1
  %41 = load i64, i64* %6, align 8
  %42 = load i64, i64* %8, align 8
  %43 = sub i64 %41, %42
  %44 = ashr exact i64 %43, 4
  %45 = icmp ult i64 %40, %44
  br i1 %45, label %26, label %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2pp32VarArrayOutputAdapterWithStorageD0Ev(%"class.pp::VarArrayOutputAdapterWithStorage"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2pp32VarArrayOutputAdapterWithStorageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %struct.PP_Var*, %struct.PP_Var** %3, align 8
  %5 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = load %struct.PP_Var*, %struct.PP_Var** %5, align 8
  %7 = icmp eq %struct.PP_Var* %4, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = tail call dereferenceable(24) %"class.std::__1::vector.1"* @_ZN2pp32VarArrayOutputAdapterWithStorage6outputEv(%"class.pp::VarArrayOutputAdapterWithStorage"* %0) #9
  br label %10

10:                                               ; preds = %8, %1
  %11 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 2
  %12 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %11, i64 0, i32 0, i32 0
  %13 = load %"class.pp::Var"*, %"class.pp::Var"** %12, align 8
  %14 = icmp eq %"class.pp::Var"* %13, null
  br i1 %14, label %32, label %15

15:                                               ; preds = %10
  %16 = bitcast %"class.pp::Var"* %13 to i8*
  %17 = getelementptr inbounds %"class.pp::VarArrayOutputAdapterWithStorage", %"class.pp::VarArrayOutputAdapterWithStorage"* %0, i64 0, i32 2, i32 0, i32 1
  %18 = load %"class.pp::Var"*, %"class.pp::Var"** %17, align 8
  %19 = icmp eq %"class.pp::Var"* %18, %13
  br i1 %19, label %30, label %20

20:                                               ; preds = %15, %20
  %21 = phi %"class.pp::Var"* [ %22, %20 ], [ %18, %15 ]
  %22 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %21, i64 -1
  %23 = bitcast %"class.pp::Var"* %22 to void (%"class.pp::Var"*)***
  %24 = load void (%"class.pp::Var"*)**, void (%"class.pp::Var"*)*** %23, align 8
  %25 = load void (%"class.pp::Var"*)*, void (%"class.pp::Var"*)** %24, align 8
  tail call void %25(%"class.pp::Var"* %22) #9
  %26 = icmp eq %"class.pp::Var"* %22, %13
  br i1 %26, label %27, label %20

27:                                               ; preds = %20
  %28 = bitcast %"class.std::__1::vector.1"* %11 to i8**
  %29 = load i8*, i8** %28, align 8
  br label %30

30:                                               ; preds = %27, %15
  %31 = phi i8* [ %29, %27 ], [ %16, %15 ]
  store %"class.pp::Var"* %13, %"class.pp::Var"** %17, align 8
  tail call void @_ZdlPv(i8* %31) #10
  br label %32

32:                                               ; preds = %30, %10
  %33 = load %struct.PP_Var*, %struct.PP_Var** %3, align 8
  %34 = icmp eq %struct.PP_Var* %33, null
  br i1 %34, label %39, label %35

35:                                               ; preds = %32
  %36 = ptrtoint %struct.PP_Var* %33 to i64
  %37 = bitcast %struct.PP_Var** %5 to i64*
  store i64 %36, i64* %37, align 8
  %38 = bitcast %struct.PP_Var* %33 to i8*
  tail call void @_ZdlPv(i8* %38) #10
  br label %39

39:                                               ; preds = %32, %35
  %40 = bitcast %"class.pp::VarArrayOutputAdapterWithStorage"* %0 to i8*
  tail call void @_ZdlPv(i8* %40) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2pp3VarENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.pp::Var"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.pp::Var"*
  br i1 %10, label %12, label %58

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.pp::Var"** %13 to i64*
  %15 = icmp ugt i64 %1, 576460752303423487
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #11
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = ashr exact i64 %19, 5
  %21 = shl i64 %1, 5
  %22 = tail call i8* @_Znwm(i64 %21) #10
  %23 = bitcast i8* %22 to %"class.pp::Var"*
  %24 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %23, i64 %20
  %25 = ptrtoint %"class.pp::Var"* %24 to i64
  %26 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %23, i64 %1
  %27 = ptrtoint %"class.pp::Var"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.pp::Var"*
  %29 = icmp eq %"class.pp::Var"* %28, %11
  br i1 %29, label %41, label %30

30:                                               ; preds = %17, %30
  %31 = phi %"class.pp::Var"* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %"class.pp::Var"* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %31, i64 -1
  %34 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %32, i64 -1
  tail call void @_ZN2pp3VarC1ERKS0_(%"class.pp::Var"* %33, %"class.pp::Var"* dereferenceable(32) %34) #9
  %35 = icmp eq %"class.pp::Var"* %34, %11
  br i1 %35, label %36, label %30

36:                                               ; preds = %30
  %37 = ptrtoint %"class.pp::Var"* %33 to i64
  %38 = load i64, i64* %6, align 8
  %39 = load %"class.pp::Var"*, %"class.pp::Var"** %13, align 8
  %40 = inttoptr i64 %38 to %"class.pp::Var"*
  br label %41

41:                                               ; preds = %17, %36
  %42 = phi %"class.pp::Var"* [ %40, %36 ], [ %28, %17 ]
  %43 = phi %"class.pp::Var"* [ %39, %36 ], [ %11, %17 ]
  %44 = phi i64 [ %37, %36 ], [ %25, %17 ]
  %45 = phi i64 [ %38, %36 ], [ %18, %17 ]
  store i64 %44, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %46 = icmp eq %"class.pp::Var"* %43, %42
  br i1 %46, label %54, label %47

47:                                               ; preds = %41, %47
  %48 = phi %"class.pp::Var"* [ %49, %47 ], [ %43, %41 ]
  %49 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %48, i64 -1
  %50 = bitcast %"class.pp::Var"* %49 to void (%"class.pp::Var"*)***
  %51 = load void (%"class.pp::Var"*)**, void (%"class.pp::Var"*)*** %50, align 8
  %52 = load void (%"class.pp::Var"*)*, void (%"class.pp::Var"*)** %51, align 8
  tail call void %52(%"class.pp::Var"* %49) #9
  %53 = icmp eq %"class.pp::Var"* %49, %42
  br i1 %53, label %54, label %47

54:                                               ; preds = %47, %41
  %55 = icmp eq i64 %45, 0
  br i1 %55, label %58, label %56

56:                                               ; preds = %54
  %57 = inttoptr i64 %45 to i8*
  tail call void @_ZdlPv(i8* %57) #10
  br label %58

58:                                               ; preds = %56, %54, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare void @_ZN2pp3VarD1Ev(%"class.pp::Var"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN2pp18ArrayOutputAdapterI6PP_VarE13GetDataBufferEjj(%"class.pp::ArrayOutputAdapter"*, i32, i32) unnamed_addr #0 comdat align 2 {
  %4 = icmp ne i32 %1, 0
  %5 = icmp eq i32 %2, 16
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.pp::ArrayOutputAdapter", %"class.pp::ArrayOutputAdapter"* %0, i64 0, i32 1
  %9 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %8, align 8
  %10 = zext i32 %1 to i64
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 1
  %12 = bitcast %struct.PP_Var** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::vector"* %9 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = ashr exact i64 %16, 4
  %18 = icmp ult i64 %17, %10
  %19 = inttoptr i64 %15 to %struct.PP_Var*
  br i1 %18, label %20, label %22

20:                                               ; preds = %7
  %21 = sub nsw i64 %10, %17
  tail call void @_ZNSt3__16vectorI6PP_VarNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector"* %9, i64 %21) #9
  br label %26

22:                                               ; preds = %7
  %23 = icmp ugt i64 %17, %10
  br i1 %23, label %24, label %26

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.PP_Var, %struct.PP_Var* %19, i64 %10
  store %struct.PP_Var* %25, %struct.PP_Var** %11, align 8
  br label %26

26:                                               ; preds = %20, %22, %24
  %27 = bitcast %"class.std::__1::vector"** %8 to i8***
  %28 = load i8**, i8*** %27, align 8
  %29 = load i8*, i8** %28, align 8
  br label %30

30:                                               ; preds = %3, %26
  %31 = phi i8* [ %29, %26 ], [ null, %3 ]
  ret i8* %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN2pp3VarC1ERKS0_(%"class.pp::Var"*, %"class.pp::Var"* dereferenceable(32)) unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2pp3VarENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector.1"*, %"class.pp::Var"* dereferenceable(32)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.pp::Var"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.pp::Var"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #11
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %"class.pp::Var"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.pp::Var"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %36, i64 %9
  %38 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %36, i64 %35
  %39 = ptrtoint %"class.pp::Var"* %38 to i64
  tail call void @_ZN2pp3VarC1ERKS0_(%"class.pp::Var"* %37, %"class.pp::Var"* dereferenceable(32) %1) #9
  %40 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %37, i64 1
  %41 = ptrtoint %"class.pp::Var"* %40 to i64
  %42 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %43 = load %"class.pp::Var"*, %"class.pp::Var"** %42, align 8
  %44 = load %"class.pp::Var"*, %"class.pp::Var"** %3, align 8
  %45 = icmp eq %"class.pp::Var"* %44, %43
  br i1 %45, label %46, label %48

46:                                               ; preds = %34
  %47 = ptrtoint %"class.pp::Var"* %43 to i64
  br label %57

48:                                               ; preds = %34, %48
  %49 = phi %"class.pp::Var"* [ %51, %48 ], [ %37, %34 ]
  %50 = phi %"class.pp::Var"* [ %52, %48 ], [ %44, %34 ]
  %51 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %49, i64 -1
  %52 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %50, i64 -1
  tail call void @_ZN2pp3VarC1ERKS0_(%"class.pp::Var"* %51, %"class.pp::Var"* dereferenceable(32) %52) #9
  %53 = icmp eq %"class.pp::Var"* %52, %43
  br i1 %53, label %54, label %48

54:                                               ; preds = %48
  %55 = load i64, i64* %6, align 8
  %56 = load %"class.pp::Var"*, %"class.pp::Var"** %3, align 8
  br label %57

57:                                               ; preds = %46, %54
  %58 = phi %"class.pp::Var"* [ %43, %46 ], [ %56, %54 ]
  %59 = phi %"class.pp::Var"* [ %37, %46 ], [ %51, %54 ]
  %60 = phi i64 [ %47, %46 ], [ %55, %54 ]
  %61 = ptrtoint %"class.pp::Var"* %59 to i64
  store i64 %61, i64* %6, align 8
  store i64 %41, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %62 = inttoptr i64 %60 to %"class.pp::Var"*
  %63 = icmp eq %"class.pp::Var"* %58, %62
  br i1 %63, label %71, label %64

64:                                               ; preds = %57, %64
  %65 = phi %"class.pp::Var"* [ %66, %64 ], [ %58, %57 ]
  %66 = getelementptr inbounds %"class.pp::Var", %"class.pp::Var"* %65, i64 -1
  %67 = bitcast %"class.pp::Var"* %66 to void (%"class.pp::Var"*)***
  %68 = load void (%"class.pp::Var"*)**, void (%"class.pp::Var"*)*** %67, align 8
  %69 = load void (%"class.pp::Var"*)*, void (%"class.pp::Var"*)** %68, align 8
  tail call void %69(%"class.pp::Var"* %66) #9
  %70 = icmp eq %"class.pp::Var"* %66, %62
  br i1 %70, label %71, label %64

71:                                               ; preds = %64, %57
  %72 = icmp eq i64 %60, 0
  br i1 %72, label %75, label %73

73:                                               ; preds = %71
  %74 = inttoptr i64 %60 to i8*
  tail call void @_ZdlPv(i8* %74) #10
  br label %75

75:                                               ; preds = %71, %73
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI6PP_VarNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %struct.PP_Var** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %struct.PP_Var** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 4
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %struct.PP_Var*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.PP_Var, %struct.PP_Var* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %struct.PP_Var, %struct.PP_Var* %13, i64 %18, i32 0
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 16
  %25 = and i64 %24, -16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint %struct.PP_Var* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 4
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 1152921504606846975
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 4
  %41 = icmp ult i64 %40, 576460752303423487
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 3
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 1152921504606846975
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 1152921504606846975, %38 ]
  %52 = shl i64 %51, 4
  %53 = tail call i8* @_Znwm(i64 %52) #10
  %54 = bitcast i8* %53 to %struct.PP_Var*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %struct.PP_Var* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %struct.PP_Var, %struct.PP_Var* %57, i64 %33
  %59 = bitcast %struct.PP_Var* %58 to i8*
  %60 = getelementptr inbounds %struct.PP_Var, %struct.PP_Var* %57, i64 %56
  %61 = getelementptr inbounds %struct.PP_Var, %struct.PP_Var* %58, i64 %1
  %62 = shl nsw i64 %1, 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 %62, i1 false)
  %63 = ptrtoint %struct.PP_Var* %60 to i64
  %64 = ptrtoint %struct.PP_Var* %61 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load %struct.PP_Var*, %struct.PP_Var** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint %struct.PP_Var* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 4
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds %struct.PP_Var, %struct.PP_Var* %58, i64 %71
  %73 = ptrtoint %struct.PP_Var* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast %struct.PP_Var* %72 to i8*
  %77 = bitcast %struct.PP_Var* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #9
  %78 = load %struct.PP_Var*, %struct.PP_Var** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi %struct.PP_Var* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq %struct.PP_Var* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast %struct.PP_Var* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #10
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
