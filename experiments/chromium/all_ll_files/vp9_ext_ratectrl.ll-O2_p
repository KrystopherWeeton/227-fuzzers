; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_ext_ratectrl.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_ext_ratectrl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vpx_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%union.int_mv = type { i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@__const.vp9_extrc_update_encodeframe_result.psnr = private unnamed_addr constant %struct.vpx_psnr_pkt { [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], [4 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF] }, align 8
@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [28 x i8] c"Unsupported update_type %d\0A\00", align 1
@switch.table.vp9_extrc_get_encodeframe_decision = private unnamed_addr constant [5 x i32] [i32 0, i32 1, i32 4, i32 2, i32 3], align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_extrc_init(%struct.EXT_RATECTRL*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.EXT_RATECTRL* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.EXT_RATECTRL* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 104, i1 false)
  br label %5

5:                                                ; preds = %1, %3
  %6 = phi i32 [ 0, %3 ], [ 8, %1 ]
  ret i32 %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_extrc_create(%struct.vpx_rc_funcs* nocapture readonly byval(%struct.vpx_rc_funcs) align 8, %struct.vpx_rc_config* nocapture readonly byval(%struct.vpx_rc_config) align 8, %struct.EXT_RATECTRL*) local_unnamed_addr #0 {
  %4 = icmp eq %struct.EXT_RATECTRL* %2, null
  br i1 %4, label %47, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %2, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %20, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %2, i64 0, i32 2, i32 4
  %11 = load i32 (i8*)*, i32 (i8*)** %10, align 8
  %12 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %2, i64 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = tail call i32 %11(i8* %13) #5
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %22, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %2, i64 0, i32 4, i32 0
  %18 = bitcast %struct.vpx_rc_frame_stats** %17 to i8**
  %19 = load i8*, i8** %18, align 8
  tail call void @vpx_free(i8* %19) #5
  br label %20

20:                                               ; preds = %16, %5
  %21 = bitcast %struct.EXT_RATECTRL* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 104, i1 false) #5
  br label %22

22:                                               ; preds = %9, %20
  %23 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %2, i64 0, i32 2
  %24 = bitcast %struct.vpx_rc_funcs* %23 to i8*
  %25 = bitcast %struct.vpx_rc_funcs* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* nonnull align 8 %25, i64 48, i1 false)
  %26 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %2, i64 0, i32 3
  %27 = bitcast %struct.vpx_rc_config* %26 to i8*
  %28 = bitcast %struct.vpx_rc_config* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* nonnull align 8 %28, i64 24, i1 false)
  %29 = getelementptr inbounds %struct.vpx_rc_funcs, %struct.vpx_rc_funcs* %23, i64 0, i32 0
  %30 = load i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_config*, i8**)** %29, align 8
  %31 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %2, i64 0, i32 2, i32 5
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %2, i64 0, i32 1
  %34 = tail call i32 %30(i8* %32, %struct.vpx_rc_config* %26, i8** %33) #5
  %35 = icmp eq i32 %34, 1
  br i1 %35, label %47, label %36

36:                                               ; preds = %22
  %37 = getelementptr inbounds %struct.vpx_rc_config, %struct.vpx_rc_config* %1, i64 0, i32 2
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %2, i64 0, i32 4, i32 1
  store i32 %38, i32* %39, align 8
  %40 = sext i32 %38 to i64
  %41 = mul nsw i64 %40, 200
  %42 = tail call i8* @vpx_malloc(i64 %41) #5
  %43 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %2, i64 0, i32 4, i32 0
  %44 = bitcast %struct.vpx_rc_frame_stats** %43 to i8**
  store i8* %42, i8** %44, align 8
  %45 = icmp eq i8* %42, null
  br i1 %45, label %47, label %46

46:                                               ; preds = %36
  store i32 1, i32* %6, align 8
  br label %47

47:                                               ; preds = %36, %22, %3, %46
  %48 = phi i32 [ 0, %46 ], [ 8, %3 ], [ 1, %22 ], [ 2, %36 ]
  ret i32 %48
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_extrc_delete(%struct.EXT_RATECTRL*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.EXT_RATECTRL* %0, null
  br i1 %2, label %20, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 2, i32 4
  %9 = load i32 (i8*)*, i32 (i8*)** %8, align 8
  %10 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = tail call i32 %9(i8* %11) #5
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %20, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 4, i32 0
  %16 = bitcast %struct.vpx_rc_frame_stats** %15 to i8**
  %17 = load i8*, i8** %16, align 8
  tail call void @vpx_free(i8* %17) #5
  br label %18

18:                                               ; preds = %14, %3
  %19 = bitcast %struct.EXT_RATECTRL* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 0, i64 104, i1 false) #5
  br label %20

20:                                               ; preds = %7, %1, %18
  %21 = phi i32 [ 0, %18 ], [ 8, %1 ], [ 1, %7 ]
  ret i32 %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i8* @vpx_malloc(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @vpx_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_extrc_send_firstpass_stats(%struct.EXT_RATECTRL*, %struct.FIRST_PASS_INFO* nocapture readonly) local_unnamed_addr #0 {
  %3 = icmp eq %struct.EXT_RATECTRL* %0, null
  br i1 %3, label %157, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %156, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 4
  %10 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 4, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %149

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.FIRST_PASS_INFO, %struct.FIRST_PASS_INFO* %1, i64 0, i32 0
  %15 = getelementptr inbounds %struct.vpx_rc_firstpass_stats, %struct.vpx_rc_firstpass_stats* %9, i64 0, i32 0
  br label %16

16:                                               ; preds = %13, %16
  %17 = phi i64 [ 0, %13 ], [ %145, %16 ]
  %18 = load %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS** %14, align 8
  %19 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17
  %20 = load %struct.vpx_rc_frame_stats*, %struct.vpx_rc_frame_stats** %15, align 8
  %21 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17
  %22 = bitcast %struct.FIRSTPASS_STATS* %19 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %struct.vpx_rc_frame_stats* %21 to i64*
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 1
  %29 = bitcast double* %28 to i64*
  store i64 %27, i64* %29, align 8
  %30 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 2
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 2
  %34 = bitcast double* %33 to i64*
  store i64 %32, i64* %34, align 8
  %35 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 3
  %36 = bitcast double* %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 3
  %39 = bitcast double* %38 to i64*
  store i64 %37, i64* %39, align 8
  %40 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 4
  %41 = bitcast double* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 4
  %44 = bitcast double* %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 5
  %46 = bitcast double* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 5
  %49 = bitcast double* %48 to i64*
  store i64 %47, i64* %49, align 8
  %50 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 6
  %51 = bitcast double* %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 6
  %54 = bitcast double* %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 7
  %56 = bitcast double* %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 7
  %59 = bitcast double* %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 8
  %61 = bitcast double* %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 8
  %64 = bitcast double* %63 to i64*
  store i64 %62, i64* %64, align 8
  %65 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 9
  %66 = bitcast double* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 9
  %69 = bitcast double* %68 to i64*
  store i64 %67, i64* %69, align 8
  %70 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 10
  %71 = bitcast double* %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 10
  %74 = bitcast double* %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 11
  %76 = bitcast double* %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 11
  %79 = bitcast double* %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 12
  %81 = bitcast double* %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 12
  %84 = bitcast double* %83 to i64*
  store i64 %82, i64* %84, align 8
  %85 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 13
  %86 = bitcast double* %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 13
  %89 = bitcast double* %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 14
  %91 = bitcast double* %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 14
  %94 = bitcast double* %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 15
  %96 = bitcast double* %95 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 15
  %99 = bitcast double* %98 to i64*
  store i64 %97, i64* %99, align 8
  %100 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 16
  %101 = bitcast double* %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 16
  %104 = bitcast double* %103 to i64*
  store i64 %102, i64* %104, align 8
  %105 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 17
  %106 = bitcast double* %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 17
  %109 = bitcast double* %108 to i64*
  store i64 %107, i64* %109, align 8
  %110 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 18
  %111 = bitcast double* %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 18
  %114 = bitcast double* %113 to i64*
  store i64 %112, i64* %114, align 8
  %115 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 19
  %116 = bitcast double* %115 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 19
  %119 = bitcast double* %118 to i64*
  store i64 %117, i64* %119, align 8
  %120 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 20
  %121 = bitcast double* %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 20
  %124 = bitcast double* %123 to i64*
  store i64 %122, i64* %124, align 8
  %125 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 21
  %126 = bitcast double* %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 21
  %129 = bitcast double* %128 to i64*
  store i64 %127, i64* %129, align 8
  %130 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 22
  %131 = bitcast double* %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 22
  %134 = bitcast double* %133 to i64*
  store i64 %132, i64* %134, align 8
  %135 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 23
  %136 = bitcast double* %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 23
  %139 = bitcast double* %138 to i64*
  store i64 %137, i64* %139, align 8
  %140 = getelementptr inbounds %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS* %18, i64 %17, i32 24
  %141 = bitcast double* %140 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = getelementptr inbounds %struct.vpx_rc_frame_stats, %struct.vpx_rc_frame_stats* %20, i64 %17, i32 24
  %144 = bitcast double* %143 to i64*
  store i64 %142, i64* %144, align 8
  %145 = add nuw nsw i64 %17, 1
  %146 = load i32, i32* %10, align 8
  %147 = sext i32 %146 to i64
  %148 = icmp slt i64 %145, %147
  br i1 %148, label %16, label %149

149:                                              ; preds = %16, %8
  %150 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 2, i32 1
  %151 = load i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)** %150, align 8
  %152 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 1
  %153 = load i8*, i8** %152, align 8
  %154 = tail call i32 %151(i8* %153, %struct.vpx_rc_firstpass_stats* %9) #5
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %157, label %156

156:                                              ; preds = %149, %4
  br label %157

157:                                              ; preds = %149, %2, %156
  %158 = phi i32 [ 0, %156 ], [ 1, %149 ], [ 8, %2 ]
  ret i32 %158
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_extrc_get_encodeframe_decision(%struct.EXT_RATECTRL* readonly, i32, i32, i32, i32, %struct.RefCntBuffer**, i32, %struct.vpx_rc_encodeframe_decision*) local_unnamed_addr #0 {
  %9 = alloca %struct.vpx_rc_encodeframe_info, align 4
  %10 = icmp eq %struct.EXT_RATECTRL* %0, null
  br i1 %10, label %38, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %37, label %15

15:                                               ; preds = %11
  %16 = bitcast %struct.vpx_rc_encodeframe_info* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %16) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %16, i8 -86, i64 40, i1 false)
  %17 = getelementptr inbounds %struct.vpx_rc_encodeframe_info, %struct.vpx_rc_encodeframe_info* %9, i64 0, i32 1
  store i32 %1, i32* %17, align 4
  %18 = getelementptr inbounds %struct.vpx_rc_encodeframe_info, %struct.vpx_rc_encodeframe_info* %9, i64 0, i32 2
  store i32 %2, i32* %18, align 4
  %19 = getelementptr inbounds %struct.vpx_rc_encodeframe_info, %struct.vpx_rc_encodeframe_info* %9, i64 0, i32 3
  store i32 %3, i32* %19, align 4
  %20 = icmp ult i32 %4, 5
  br i1 %20, label %24, label %21

21:                                               ; preds = %15
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %23 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i32 %4) #6
  tail call void @abort() #7
  unreachable

24:                                               ; preds = %15
  %25 = sext i32 %4 to i64
  %26 = getelementptr inbounds [5 x i32], [5 x i32]* @switch.table.vp9_extrc_get_encodeframe_decision, i64 0, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.vpx_rc_encodeframe_info, %struct.vpx_rc_encodeframe_info* %9, i64 0, i32 0
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %struct.vpx_rc_encodeframe_info, %struct.vpx_rc_encodeframe_info* %9, i64 0, i32 4, i64 0
  %30 = getelementptr inbounds %struct.vpx_rc_encodeframe_info, %struct.vpx_rc_encodeframe_info* %9, i64 0, i32 5, i64 0
  call void @vp9_get_ref_frame_info(i32 %4, i32 %6, %struct.RefCntBuffer** %5, i32* %29, i32* %30) #5
  %31 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 2, i32 2
  %32 = load i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)** %31, align 8
  %33 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 1
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 %32(i8* %34, %struct.vpx_rc_encodeframe_info* nonnull %9, %struct.vpx_rc_encodeframe_decision* %7) #5
  %36 = icmp eq i32 %35, 1
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %16) #5
  br i1 %36, label %38, label %37

37:                                               ; preds = %24, %11
  br label %38

38:                                               ; preds = %24, %8, %37
  %39 = phi i32 [ 0, %37 ], [ 1, %24 ], [ 8, %8 ]
  ret i32 %39
}

declare void @vp9_get_ref_frame_info(i32, i32, %struct.RefCntBuffer**, i32*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_extrc_update_encodeframe_result(%struct.EXT_RATECTRL* readonly, i64, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i32, i32) local_unnamed_addr #0 {
  %7 = alloca %struct.vpx_psnr_pkt, align 8
  %8 = alloca %struct.vpx_rc_encodeframe_result, align 8
  %9 = icmp eq %struct.EXT_RATECTRL* %0, null
  br i1 %9, label %42, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %41, label %14

14:                                               ; preds = %10
  %15 = bitcast %struct.vpx_psnr_pkt* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %15) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %15, i8* align 8 bitcast (%struct.vpx_psnr_pkt* @__const.vp9_extrc_update_encodeframe_result.psnr to i8*), i64 80, i1 false)
  %16 = bitcast %struct.vpx_rc_encodeframe_result* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #5
  %17 = getelementptr inbounds %struct.vpx_rc_encodeframe_result, %struct.vpx_rc_encodeframe_result* %8, i64 0, i32 0
  %18 = getelementptr inbounds %struct.vpx_rc_encodeframe_result, %struct.vpx_rc_encodeframe_result* %8, i64 0, i32 1
  %19 = getelementptr inbounds %struct.vpx_rc_encodeframe_result, %struct.vpx_rc_encodeframe_result* %8, i64 0, i32 2
  store i64 %1, i64* %18, align 8
  %20 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = mul nsw i32 %23, %21
  %25 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 7
  %26 = load i32, i32* %25, align 4
  %27 = shl i32 %26, 1
  %28 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 8
  %29 = load i32, i32* %28, align 8
  %30 = mul nsw i32 %27, %29
  %31 = add nsw i32 %30, %24
  %32 = sext i32 %31 to i64
  store i64 %32, i64* %19, align 8
  call void @vpx_calc_highbd_psnr(%struct.yv12_buffer_config* %2, %struct.yv12_buffer_config* %3, %struct.vpx_psnr_pkt* nonnull %7, i32 %4, i32 %5) #5
  %33 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %7, i64 0, i32 1, i64 0
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %17, align 8
  %35 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 2, i32 3
  %36 = load i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)** %35, align 8
  %37 = getelementptr inbounds %struct.EXT_RATECTRL, %struct.EXT_RATECTRL* %0, i64 0, i32 1
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 %36(i8* %38, %struct.vpx_rc_encodeframe_result* nonnull %8) #5
  %40 = icmp eq i32 %39, 1
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #5
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %15) #5
  br i1 %40, label %42, label %41

41:                                               ; preds = %14, %10
  br label %42

42:                                               ; preds = %14, %6, %41
  %43 = phi i32 [ 0, %41 ], [ 1, %14 ], [ 8, %6 ]
  ret i32 %43
}

declare void @vpx_calc_highbd_psnr(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.vpx_psnr_pkt*, i32, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { cold nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
