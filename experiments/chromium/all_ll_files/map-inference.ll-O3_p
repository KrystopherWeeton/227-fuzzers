; ModuleID = '../../v8/src/compiler/map-inference.cc'
source_filename = "../../v8/src/compiler/map-inference.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::internal::compiler::MapInference" = type <{ %"class.v8::internal::compiler::JSHeapBroker"*, %"class.v8::internal::compiler::Node"*, %"class.std::__1::vector.1238", i32, [4 x i8] }>
%"class.std::__1::vector.1238" = type { %"class.std::__1::__vector_base.1239" }
%"class.std::__1::__vector_base.1239" = type { %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"*, %"class.std::__1::__compressed_pair.1241" }
%"class.v8::internal::Handle.1240" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.std::__1::__compressed_pair.1241" = type { %"struct.std::__1::__compressed_pair_elem.1242" }
%"struct.std::__1::__compressed_pair_elem.1242" = type { %"class.v8::internal::Handle.1240"* }
%"class.v8::internal::compiler::JSHeapBroker" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*, %"class.v8::base::Optional.1129", %"class.v8::internal::compiler::RefsMap"*, %"class.v8::internal::RootIndexMap", %"class.v8::internal::ZoneUnorderedSet", i32, i8, i8, i8, i8, i32, [4 x i8], %"class.std::__1::unique_ptr.1061", %"class.v8::internal::LocalIsolate"*, %"class.std::__1::unique_ptr.744", i32, [4 x i8], %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::ZoneUnorderedMap", %"class.v8::internal::ZoneUnorderedMap.1178", %"class.v8::internal::ZoneUnorderedMap.1201", %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneMultimap", i32, [4 x i8] }>
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.645", %"class.std::__1::unique_ptr.666", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.676", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.815", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.828", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.838", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.849", %"struct.std::__1::atomic.152", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.924", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.967"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.976", i32, i8, i8, i32, i32, %"class.std::__1::vector.982", %"class.std::__1::vector.982", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.989", i64, %"class.std::__1::unordered_map.990", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.541", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.160", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1046", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1084", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1118", %"class.std::__1::vector.1122", %"class.std::__1::vector.1122", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.19", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.19", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.19", i64, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.29", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.146", %"class.std::__1::unique_ptr.146", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.161", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.19", i64, i8, %"struct.std::__1::atomic.19", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.165", %"class.std::__1::vector.165", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.172", %"class.std::__1::unique_ptr.178", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.308", %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.320", %"class.std::__1::unique_ptr.359", %"class.std::__1::unique_ptr.398", %"class.std::__1::unique_ptr.428", %"class.std::__1::unique_ptr.434", %"class.std::__1::unique_ptr.444", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.456", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.468", %"class.std::__1::unique_ptr.474", %"class.std::__1::shared_ptr.480", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.503", %"class.std::__1::unique_ptr.529", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.535", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.548", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.330", i8, [7 x i8], %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.580", %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.604", %"class.std::__1::vector.632", i8, %"class.std::__1::unique_ptr.639", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.2", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.16", [4 x i8] }>
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4", %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24" }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl.27" }
%"struct.std::__1::__cxx_atomic_impl.27" = type { %"struct.std::__1::__cxx_atomic_base_impl.28" }
%"struct.std::__1::__cxx_atomic_base_impl.28" = type { i64 }
%"struct.std::__1::atomic.29" = type { %"struct.std::__1::__atomic_base.30" }
%"struct.std::__1::__atomic_base.30" = type { %"struct.std::__1::__cxx_atomic_impl.31" }
%"struct.std::__1::__cxx_atomic_impl.31" = type { %"struct.std::__1::__cxx_atomic_base_impl.32" }
%"struct.std::__1::__cxx_atomic_base_impl.32" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.33" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.103" }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.19"*, %"class.std::__1::unique_ptr.97" }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.19", i64 }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.38", %"class.std::__1::vector.38", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.40" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.45" }
%"class.std::__1::__hash_table.45" = type <{ %"class.std::__1::unique_ptr.46", %"class.std::__1::__compressed_pair.56", %"class.std::__1::__compressed_pair.61", %"class.std::__1::__compressed_pair.63", [4 x i8] }>
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48", %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.std::__1::__hash_node_base.49"** }
%"struct.std::__1::__hash_node_base.49" = type { %"struct.std::__1::__hash_node_base.49"* }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.std::__1::__bucket_list_deallocator.51" }
%"class.std::__1::__bucket_list_deallocator.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"struct.std::__1::__hash_node_base.49" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.24", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.86", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.19"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.24", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.68", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.68" = type { %"struct.std::__1::__atomic_base.69" }
%"struct.std::__1::__atomic_base.69" = type { %"struct.std::__1::__cxx_atomic_impl.70" }
%"struct.std::__1::__cxx_atomic_impl.70" = type { %"struct.std::__1::__cxx_atomic_base_impl.71" }
%"struct.std::__1::__cxx_atomic_base_impl.71" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.72" }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.74" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.86" = type { %"struct.std::__1::__atomic_base.87" }
%"struct.std::__1::__atomic_base.87" = type { %"struct.std::__1::__cxx_atomic_impl.88" }
%"struct.std::__1::__cxx_atomic_impl.88" = type { %"struct.std::__1::__cxx_atomic_base_impl.89" }
%"struct.std::__1::__cxx_atomic_base_impl.89" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.90", i8, [7 x i8] }>
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { i64*, i64*, %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.19", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"struct.std::__1::pair.105"*, %"struct.std::__1::pair.105"*, %"class.std::__1::__compressed_pair.106" }
%"struct.std::__1::pair.105" = type { i32, i64 }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.std::__1::pair.105"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.19", i64, %"struct.std::__1::atomic.19" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.19", i32, %"struct.std::__1::atomic.19", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.111" }
%"class.std::__1::unordered_map.111" = type { %"class.std::__1::__hash_table.112" }
%"class.std::__1::__hash_table.112" = type <{ %"class.std::__1::unique_ptr.113", %"class.std::__1::__compressed_pair.123", %"class.std::__1::__compressed_pair.128", %"class.std::__1::__compressed_pair.133", [4 x i8] }>
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115", %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.std::__1::__hash_node_base.116"** }
%"struct.std::__1::__hash_node_base.116" = type { %"struct.std::__1::__hash_node_base.116"* }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::__bucket_list_deallocator.118" }
%"class.std::__1::__bucket_list_deallocator.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.std::__1::__hash_node_base.116" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.139", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.141" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1051", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1055", %"class.std::__1::unique_ptr.1061", %"class.std::__1::unique_ptr.474", %"class.std::__1::vector.1067", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1051" = type { %"struct.std::__1::__atomic_base.1052" }
%"struct.std::__1::__atomic_base.1052" = type { %"struct.std::__1::__cxx_atomic_impl.1053" }
%"struct.std::__1::__cxx_atomic_impl.1053" = type { %"struct.std::__1::__cxx_atomic_base_impl.1054" }
%"struct.std::__1::__cxx_atomic_base_impl.1054" = type { i32 }
%"class.std::__1::unique_ptr.1055" = type { %"class.std::__1::__compressed_pair.1056" }
%"class.std::__1::__compressed_pair.1056" = type { %"struct.std::__1::__compressed_pair_elem.1057" }
%"struct.std::__1::__compressed_pair_elem.1057" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.808" }
%"class.std::__1::vector.808" = type { %"class.std::__1::__vector_base.809" }
%"class.std::__1::__vector_base.809" = type { i64**, i64**, %"class.std::__1::__compressed_pair.810" }
%"class.std::__1::__compressed_pair.810" = type { %"struct.std::__1::__compressed_pair_elem.811" }
%"struct.std::__1::__compressed_pair_elem.811" = type { i64** }
%"class.std::__1::vector.1067" = type { %"class.std::__1::__vector_base.1068" }
%"class.std::__1::__vector_base.1068" = type { %"struct.std::__1::pair.1069"*, %"struct.std::__1::pair.1069"*, %"class.std::__1::__compressed_pair.1070" }
%"struct.std::__1::pair.1069" = type opaque
%"class.std::__1::__compressed_pair.1070" = type { %"struct.std::__1::__compressed_pair_elem.1071" }
%"struct.std::__1::__compressed_pair_elem.1071" = type { %"struct.std::__1::pair.1069"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.152", %"struct.std::__1::atomic.156", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.19" }
%"struct.std::__1::atomic.156" = type { %"struct.std::__1::__atomic_base.157" }
%"struct.std::__1::__atomic_base.157" = type { %"struct.std::__1::__cxx_atomic_impl.158" }
%"struct.std::__1::__cxx_atomic_impl.158" = type { %"struct.std::__1::__cxx_atomic_base_impl.159" }
%"struct.std::__1::__cxx_atomic_base_impl.159" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.19", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.160" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.161" = type { %"struct.std::__1::__atomic_base.162" }
%"struct.std::__1::__atomic_base.162" = type { %"struct.std::__1::__cxx_atomic_impl.163" }
%"struct.std::__1::__cxx_atomic_impl.163" = type { %"struct.std::__1::__cxx_atomic_base_impl.164" }
%"struct.std::__1::__cxx_atomic_base_impl.164" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"struct.std::__1::atomic.19" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i64 }
%"class.std::__1::vector.165" = type { %"class.std::__1::__vector_base.166" }
%"class.std::__1::__vector_base.166" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.167" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.220", %"class.std::__1::unique_ptr.226", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.287", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.181", %"class.std::__1::vector.182", %"class.std::__1::vector.189", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.181" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.182" = type { %"class.std::__1::__vector_base.183" }
%"class.std::__1::__vector_base.183" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.184" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.189" = type { %"class.std::__1::__vector_base.190" }
%"class.std::__1::__vector_base.190" = type { %"class.std::__1::unique_ptr.191"*, %"class.std::__1::unique_ptr.191"*, %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::unique_ptr.191" = type opaque
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"class.std::__1::unique_ptr.191"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.197", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.203", %"class.v8::internal::Worklist.205", %"class.v8::internal::Worklist.207", %"class.v8::internal::Worklist.209", %"class.v8::internal::Worklist.211" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.197" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.199" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.201" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.203" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.205" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.207" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.209" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.211" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.213", i8, i64 }
%"class.std::__1::vector.213" = type { %"class.std::__1::__vector_base.214" }
%"class.std::__1::__vector_base.214" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.226" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.229" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.181"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.229" = type { %"class.std::__1::__hash_table.230" }
%"class.std::__1::__hash_table.230" = type <{ %"class.std::__1::unique_ptr.231", %"class.std::__1::__compressed_pair.241", %"class.std::__1::__compressed_pair.246", %"class.std::__1::__compressed_pair.249", [4 x i8] }>
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233", %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.std::__1::__hash_node_base.234"** }
%"struct.std::__1::__hash_node_base.234" = type { %"struct.std::__1::__hash_node_base.234"* }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"class.std::__1::__bucket_list_deallocator.236" }
%"class.std::__1::__bucket_list_deallocator.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"struct.std::__1::__hash_node_base.234" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.256" }
%"class.std::__1::unordered_map.256" = type { %"class.std::__1::__hash_table.257" }
%"class.std::__1::__hash_table.257" = type <{ %"class.std::__1::unique_ptr.258", %"class.std::__1::__compressed_pair.268", %"class.std::__1::__compressed_pair.273", %"class.std::__1::__compressed_pair.276", [4 x i8] }>
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260", %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.std::__1::__hash_node_base.261"** }
%"struct.std::__1::__hash_node_base.261" = type { %"struct.std::__1::__hash_node_base.261"* }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"class.std::__1::__bucket_list_deallocator.263" }
%"class.std::__1::__bucket_list_deallocator.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.269" }
%"struct.std::__1::__compressed_pair_elem.269" = type { %"struct.std::__1::__hash_node_base.261" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.280" = type { %"class.std::__1::__vector_base.281" }
%"class.std::__1::__vector_base.281" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { %"struct.std::__1::pair.289"*, %"struct.std::__1::pair.289"*, %"class.std::__1::__compressed_pair.290" }
%"struct.std::__1::pair.289" = type opaque
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"struct.std::__1::pair.289"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.295", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.280"], [3 x %"class.std::__1::vector.280"], i8, %"struct.std::__1::atomic.152", [6 x i8], %"class.std::__1::vector.280", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.295" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.305"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.305" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.314" = type { %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.320" = type { %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.330", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.323"], %"class.std::__1::unique_ptr.295" }
%"class.std::__1::vector.323" = type { %"class.std::__1::__vector_base.324" }
%"class.std::__1::__vector_base.324" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.359" = type { %"class.std::__1::__compressed_pair.360" }
%"class.std::__1::__compressed_pair.360" = type { %"struct.std::__1::__compressed_pair_elem.361" }
%"struct.std::__1::__compressed_pair_elem.361" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.362", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.366", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.371" }
%"struct.std::__1::atomic.362" = type { %"struct.std::__1::__atomic_base.363" }
%"struct.std::__1::__atomic_base.363" = type { %"struct.std::__1::__cxx_atomic_impl.364" }
%"struct.std::__1::__cxx_atomic_impl.364" = type { %"struct.std::__1::__cxx_atomic_base_impl.365" }
%"struct.std::__1::__cxx_atomic_base_impl.365" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.366" = type { %"struct.std::__1::__atomic_base.367" }
%"struct.std::__1::__atomic_base.367" = type { %"struct.std::__1::__cxx_atomic_impl.368" }
%"struct.std::__1::__cxx_atomic_impl.368" = type { %"struct.std::__1::__cxx_atomic_base_impl.369" }
%"struct.std::__1::__cxx_atomic_base_impl.369" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.371" = type { %"class.std::__1::__hash_table.372" }
%"class.std::__1::__hash_table.372" = type <{ %"class.std::__1::unique_ptr.373", %"class.std::__1::__compressed_pair.383", %"class.std::__1::__compressed_pair.388", %"class.std::__1::__compressed_pair.391", [4 x i8] }>
%"class.std::__1::unique_ptr.373" = type { %"class.std::__1::__compressed_pair.374" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375", %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"struct.std::__1::__hash_node_base.376"** }
%"struct.std::__1::__hash_node_base.376" = type { %"struct.std::__1::__hash_node_base.376"* }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"class.std::__1::__bucket_list_deallocator.378" }
%"class.std::__1::__bucket_list_deallocator.378" = type { %"class.std::__1::__compressed_pair.379" }
%"class.std::__1::__compressed_pair.379" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"struct.std::__1::__hash_node_base.376" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.391" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.398" = type { %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.400" }
%"struct.std::__1::__compressed_pair_elem.400" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.295", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.152", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.401", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.401" = type { %"class.std::__1::__hash_table.402" }
%"class.std::__1::__hash_table.402" = type <{ %"class.std::__1::unique_ptr.403", %"class.std::__1::__compressed_pair.413", %"class.std::__1::__compressed_pair.418", %"class.std::__1::__compressed_pair.421", [4 x i8] }>
%"class.std::__1::unique_ptr.403" = type { %"class.std::__1::__compressed_pair.404" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.405", %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.405" = type { %"struct.std::__1::__hash_node_base.406"** }
%"struct.std::__1::__hash_node_base.406" = type { %"struct.std::__1::__hash_node_base.406"* }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"class.std::__1::__bucket_list_deallocator.408" }
%"class.std::__1::__bucket_list_deallocator.408" = type { %"class.std::__1::__compressed_pair.409" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.414" }
%"struct.std::__1::__compressed_pair_elem.414" = type { %"struct.std::__1::__hash_node_base.406" }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.421" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.428" = type { %"class.std::__1::__compressed_pair.429" }
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.434" = type { %"class.std::__1::__compressed_pair.435" }
%"class.std::__1::__compressed_pair.435" = type { %"struct.std::__1::__compressed_pair_elem.436" }
%"struct.std::__1::__compressed_pair_elem.436" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.437" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"class.std::__1::unique_ptr.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.450" = type { %"class.std::__1::__compressed_pair.451" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.452" }
%"struct.std::__1::__compressed_pair_elem.452" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.456" = type { %"class.std::__1::__compressed_pair.457" }
%"class.std::__1::__compressed_pair.457" = type { %"struct.std::__1::__compressed_pair_elem.458" }
%"struct.std::__1::__compressed_pair_elem.458" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.462" = type { %"class.std::__1::__compressed_pair.463" }
%"class.std::__1::__compressed_pair.463" = type { %"struct.std::__1::__compressed_pair_elem.464" }
%"struct.std::__1::__compressed_pair_elem.464" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.468" = type { %"class.std::__1::__compressed_pair.469" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.474" = type { %"class.std::__1::__compressed_pair.475" }
%"class.std::__1::__compressed_pair.475" = type { %"struct.std::__1::__compressed_pair_elem.476" }
%"struct.std::__1::__compressed_pair_elem.476" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.480" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.499", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.481", %"class.v8::internal::VirtualMemory" }
%"class.std::__1::unique_ptr.481" = type { %"class.std::__1::__compressed_pair.482" }
%"class.std::__1::__compressed_pair.482" = type { %"struct.std::__1::__compressed_pair_elem.483" }
%"struct.std::__1::__compressed_pair_elem.483" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.484", %"class.std::__1::set.492" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.484" = type { %"class.std::__1::__tree.485" }
%"class.std::__1::__tree.485" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.490" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.490" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::set.492" = type { %"class.std::__1::__tree.493" }
%"class.std::__1::__tree.493" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.494" }
%"class.std::__1::__compressed_pair.494" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.499" = type { %"struct.std::__1::__atomic_base.500" }
%"struct.std::__1::__atomic_base.500" = type { %"struct.std::__1::__cxx_atomic_impl.501" }
%"struct.std::__1::__cxx_atomic_impl.501" = type { %"struct.std::__1::__cxx_atomic_base_impl.502" }
%"struct.std::__1::__cxx_atomic_base_impl.502" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.503" = type { %"class.std::__1::__hash_table.504" }
%"class.std::__1::__hash_table.504" = type <{ %"class.std::__1::unique_ptr.505", %"class.std::__1::__compressed_pair.515", %"class.std::__1::__compressed_pair.520", %"class.std::__1::__compressed_pair.523", [4 x i8] }>
%"class.std::__1::unique_ptr.505" = type { %"class.std::__1::__compressed_pair.506" }
%"class.std::__1::__compressed_pair.506" = type { %"struct.std::__1::__compressed_pair_elem.507", %"struct.std::__1::__compressed_pair_elem.509" }
%"struct.std::__1::__compressed_pair_elem.507" = type { %"struct.std::__1::__hash_node_base.508"** }
%"struct.std::__1::__hash_node_base.508" = type { %"struct.std::__1::__hash_node_base.508"* }
%"struct.std::__1::__compressed_pair_elem.509" = type { %"class.std::__1::__bucket_list_deallocator.510" }
%"class.std::__1::__bucket_list_deallocator.510" = type { %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.516" }
%"struct.std::__1::__compressed_pair_elem.516" = type { %"struct.std::__1::__hash_node_base.508" }
%"class.std::__1::__compressed_pair.520" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.529" = type { %"class.std::__1::__compressed_pair.530" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.535" = type { %"class.std::__1::__compressed_pair.536" }
%"class.std::__1::__compressed_pair.536" = type { %"struct.std::__1::__compressed_pair_elem.537" }
%"struct.std::__1::__compressed_pair_elem.537" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.541", %"class.std::__1::vector.541" }
%"class.std::__1::unique_ptr.548" = type { %"class.std::__1::__compressed_pair.549" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set.330" = type { %"class.std::__1::__hash_table.331" }
%"class.std::__1::__hash_table.331" = type <{ %"class.std::__1::unique_ptr.332", %"class.std::__1::__compressed_pair.342", %"class.std::__1::__compressed_pair.347", %"class.std::__1::__compressed_pair.351", [4 x i8] }>
%"class.std::__1::unique_ptr.332" = type { %"class.std::__1::__compressed_pair.333" }
%"class.std::__1::__compressed_pair.333" = type { %"struct.std::__1::__compressed_pair_elem.334", %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.334" = type { %"struct.std::__1::__hash_node_base.335"** }
%"struct.std::__1::__hash_node_base.335" = type { %"struct.std::__1::__hash_node_base.335"* }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.std::__1::__bucket_list_deallocator.337" }
%"class.std::__1::__bucket_list_deallocator.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.342" = type { %"struct.std::__1::__compressed_pair_elem.343" }
%"struct.std::__1::__compressed_pair_elem.343" = type { %"struct.std::__1::__hash_node_base.335" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.580" = type { %"class.std::__1::__hash_table.581" }
%"class.std::__1::__hash_table.581" = type <{ %"class.std::__1::unique_ptr.582", %"class.std::__1::__compressed_pair.592", %"class.std::__1::__compressed_pair.597", %"class.std::__1::__compressed_pair.600", [4 x i8] }>
%"class.std::__1::unique_ptr.582" = type { %"class.std::__1::__compressed_pair.583" }
%"class.std::__1::__compressed_pair.583" = type { %"struct.std::__1::__compressed_pair_elem.584", %"struct.std::__1::__compressed_pair_elem.586" }
%"struct.std::__1::__compressed_pair_elem.584" = type { %"struct.std::__1::__hash_node_base.585"** }
%"struct.std::__1::__hash_node_base.585" = type { %"struct.std::__1::__hash_node_base.585"* }
%"struct.std::__1::__compressed_pair_elem.586" = type { %"class.std::__1::__bucket_list_deallocator.587" }
%"class.std::__1::__bucket_list_deallocator.587" = type { %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.592" = type { %"struct.std::__1::__compressed_pair_elem.593" }
%"struct.std::__1::__compressed_pair_elem.593" = type { %"struct.std::__1::__hash_node_base.585" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.600" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.554" = type { %"class.std::__1::__hash_table.555" }
%"class.std::__1::__hash_table.555" = type <{ %"class.std::__1::unique_ptr.556", %"class.std::__1::__compressed_pair.566", %"class.std::__1::__compressed_pair.571", %"class.std::__1::__compressed_pair.574", [4 x i8] }>
%"class.std::__1::unique_ptr.556" = type { %"class.std::__1::__compressed_pair.557" }
%"class.std::__1::__compressed_pair.557" = type { %"struct.std::__1::__compressed_pair_elem.558", %"struct.std::__1::__compressed_pair_elem.560" }
%"struct.std::__1::__compressed_pair_elem.558" = type { %"struct.std::__1::__hash_node_base.559"** }
%"struct.std::__1::__hash_node_base.559" = type { %"struct.std::__1::__hash_node_base.559"* }
%"struct.std::__1::__compressed_pair_elem.560" = type { %"class.std::__1::__bucket_list_deallocator.561" }
%"class.std::__1::__bucket_list_deallocator.561" = type { %"class.std::__1::__compressed_pair.562" }
%"class.std::__1::__compressed_pair.562" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.566" = type { %"struct.std::__1::__compressed_pair_elem.567" }
%"struct.std::__1::__compressed_pair_elem.567" = type { %"struct.std::__1::__hash_node_base.559" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.574" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.604" = type { %"class.std::__1::__hash_table.605" }
%"class.std::__1::__hash_table.605" = type <{ %"class.std::__1::unique_ptr.606", %"class.std::__1::__compressed_pair.616", %"class.std::__1::__compressed_pair.621", %"class.std::__1::__compressed_pair.626", [4 x i8] }>
%"class.std::__1::unique_ptr.606" = type { %"class.std::__1::__compressed_pair.607" }
%"class.std::__1::__compressed_pair.607" = type { %"struct.std::__1::__compressed_pair_elem.608", %"struct.std::__1::__compressed_pair_elem.610" }
%"struct.std::__1::__compressed_pair_elem.608" = type { %"struct.std::__1::__hash_node_base.609"** }
%"struct.std::__1::__hash_node_base.609" = type { %"struct.std::__1::__hash_node_base.609"* }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"class.std::__1::__bucket_list_deallocator.611" }
%"class.std::__1::__bucket_list_deallocator.611" = type { %"class.std::__1::__compressed_pair.612" }
%"class.std::__1::__compressed_pair.612" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.616" = type { %"struct.std::__1::__compressed_pair_elem.617" }
%"struct.std::__1::__compressed_pair_elem.617" = type { %"struct.std::__1::__hash_node_base.609" }
%"class.std::__1::__compressed_pair.621" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.632" = type { %"class.std::__1::__vector_base.633" }
%"class.std::__1::__vector_base.633" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.634" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.635" }
%"struct.std::__1::__compressed_pair_elem.635" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.639" = type { %"class.std::__1::__compressed_pair.640" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.641" }
%"struct.std::__1::__compressed_pair_elem.641" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.541" }
%"class.std::__1::shared_ptr.645" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.139", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.646", %"class.std::__1::unique_ptr.660" }
%"class.std::__1::unique_ptr.646" = type { %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.649" }
%"class.std::__1::vector.649" = type { %"class.std::__1::__vector_base.650" }
%"class.std::__1::__vector_base.650" = type { %"class.std::__1::unique_ptr.651"*, %"class.std::__1::unique_ptr.651"*, %"class.std::__1::__compressed_pair.652" }
%"class.std::__1::unique_ptr.651" = type { %"class.std::__1::__compressed_pair.1371" }
%"class.std::__1::__compressed_pair.1371" = type { %"struct.std::__1::__compressed_pair_elem.1372" }
%"struct.std::__1::__compressed_pair_elem.1372" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.652" = type { %"struct.std::__1::__compressed_pair_elem.653" }
%"struct.std::__1::__compressed_pair_elem.653" = type { %"class.std::__1::unique_ptr.651"* }
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::unique_ptr.666" = type { %"class.std::__1::__compressed_pair.667" }
%"class.std::__1::__compressed_pair.667" = type { %"struct.std::__1::__compressed_pair_elem.668" }
%"struct.std::__1::__compressed_pair_elem.668" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.669", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.669" = type { %"struct.std::__1::__atomic_base.670" }
%"struct.std::__1::__atomic_base.670" = type { %"struct.std::__1::__cxx_atomic_impl.671" }
%"struct.std::__1::__cxx_atomic_impl.671" = type { %"struct.std::__1::__cxx_atomic_base_impl.672" }
%"struct.std::__1::__cxx_atomic_base_impl.672" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.676" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.677", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.677" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.678", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.678" = type { %"class.std::__1::__vector_base.679" }
%"class.std::__1::__vector_base.679" = type { %"class.std::__1::unique_ptr.680"*, %"class.std::__1::unique_ptr.680"*, %"class.std::__1::__compressed_pair.681" }
%"class.std::__1::unique_ptr.680" = type opaque
%"class.std::__1::__compressed_pair.681" = type { %"struct.std::__1::__compressed_pair_elem.682" }
%"struct.std::__1::__compressed_pair_elem.682" = type { %"class.std::__1::unique_ptr.680"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.686", %"class.std::__1::unique_ptr.692", %"struct.std::__1::atomic.152", %"class.std::__1::unique_ptr.698", %"class.std::__1::unique_ptr.704", %"class.std::__1::unique_ptr.710", %"class.std::__1::unique_ptr.716", %"class.std::__1::unique_ptr.722", %"class.std::__1::set.728", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.686" = type { %"class.std::__1::__compressed_pair.687" }
%"class.std::__1::__compressed_pair.687" = type { %"struct.std::__1::__compressed_pair_elem.688" }
%"struct.std::__1::__compressed_pair_elem.688" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.692" = type { %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.694" }
%"struct.std::__1::__compressed_pair_elem.694" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.698" = type { %"class.std::__1::__compressed_pair.699" }
%"class.std::__1::__compressed_pair.699" = type { %"struct.std::__1::__compressed_pair_elem.700" }
%"struct.std::__1::__compressed_pair_elem.700" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.706" }
%"struct.std::__1::__compressed_pair_elem.706" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.710" = type { %"class.std::__1::__compressed_pair.711" }
%"class.std::__1::__compressed_pair.711" = type { %"struct.std::__1::__compressed_pair_elem.712" }
%"struct.std::__1::__compressed_pair_elem.712" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.716" = type { %"class.std::__1::__compressed_pair.717" }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.718" }
%"struct.std::__1::__compressed_pair_elem.718" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.722" = type { %"class.std::__1::__compressed_pair.723" }
%"class.std::__1::__compressed_pair.723" = type { %"struct.std::__1::__compressed_pair_elem.724" }
%"struct.std::__1::__compressed_pair_elem.724" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.728" = type { %"class.std::__1::__tree.729" }
%"class.std::__1::__tree.729" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.730", %"class.std::__1::__compressed_pair.734" }
%"class.std::__1::__compressed_pair.730" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.734" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.737" }
%"class.v8::internal::TaggedImpl.737" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.736" }
%"class.v8::internal::TaggedImpl.736" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.744", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.750", %"class.v8::internal::DetachableVector.751", %"class.v8::internal::DetachableVector.750", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.751" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.750" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.std::__1::unique_ptr.738", %"class.std::__1::unique_ptr.481" }
%"class.std::__1::unique_ptr.738" = type { %"class.std::__1::__compressed_pair.739" }
%"class.std::__1::__compressed_pair.739" = type { %"struct.std::__1::__compressed_pair_elem.740" }
%"struct.std::__1::__compressed_pair_elem.740" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.752", %"class.std::__1::vector.758", %"class.std::__1::unique_ptr.765", %"class.std::__1::vector.772", %"class.std::__1::unique_ptr.779", i64, %"class.std::__1::vector.785", %"class.std::__1::vector.793", %"class.std::__1::vector.801", i8, i8, i32 }
%"class.std::__1::unique_ptr.752" = type { %"class.std::__1::__compressed_pair.753" }
%"class.std::__1::__compressed_pair.753" = type { %"struct.std::__1::__compressed_pair_elem.754" }
%"struct.std::__1::__compressed_pair_elem.754" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.758" = type { %"class.std::__1::__vector_base.759" }
%"class.std::__1::__vector_base.759" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.760" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.760" = type { %"struct.std::__1::__compressed_pair_elem.761" }
%"struct.std::__1::__compressed_pair_elem.761" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.765" = type { %"class.std::__1::__compressed_pair.766" }
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"class.v8::internal::GlobalHandles::NodeSpace.768"* }
%"class.v8::internal::GlobalHandles::NodeSpace.768" = type opaque
%"class.std::__1::vector.772" = type { %"class.std::__1::__vector_base.773" }
%"class.std::__1::__vector_base.773" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.774" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.774" = type { %"struct.std::__1::__compressed_pair_elem.775" }
%"struct.std::__1::__compressed_pair_elem.775" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.779" = type { %"class.std::__1::__compressed_pair.780" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.781" }
%"struct.std::__1::__compressed_pair_elem.781" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.785" = type { %"class.std::__1::__vector_base.786" }
%"class.std::__1::__vector_base.786" = type { %"struct.std::__1::pair.787"*, %"struct.std::__1::pair.787"*, %"class.std::__1::__compressed_pair.788" }
%"struct.std::__1::pair.787" = type opaque
%"class.std::__1::__compressed_pair.788" = type { %"struct.std::__1::__compressed_pair_elem.789" }
%"struct.std::__1::__compressed_pair_elem.789" = type { %"struct.std::__1::pair.787"* }
%"class.std::__1::vector.793" = type { %"class.std::__1::__vector_base.794" }
%"class.std::__1::__vector_base.794" = type { %"struct.std::__1::pair.795"*, %"struct.std::__1::pair.795"*, %"class.std::__1::__compressed_pair.796" }
%"struct.std::__1::pair.795" = type opaque
%"class.std::__1::__compressed_pair.796" = type { %"struct.std::__1::__compressed_pair_elem.797" }
%"struct.std::__1::__compressed_pair_elem.797" = type { %"struct.std::__1::pair.795"* }
%"class.std::__1::vector.801" = type { %"class.std::__1::__vector_base.802" }
%"class.std::__1::__vector_base.802" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.803" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.808", %"class.std::__1::vector.815" }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.822" }
%"class.std::__1::unique_ptr.822" = type { %"class.std::__1::__compressed_pair.823" }
%"class.std::__1::__compressed_pair.823" = type { %"struct.std::__1::__compressed_pair_elem.824" }
%"struct.std::__1::__compressed_pair_elem.824" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.815" = type { %"class.std::__1::__vector_base.816" }
%"class.std::__1::__vector_base.816" = type { i32*, i32*, %"class.std::__1::__compressed_pair.817" }
%"class.std::__1::__compressed_pair.817" = type { %"struct.std::__1::__compressed_pair_elem.818" }
%"struct.std::__1::__compressed_pair_elem.818" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"struct.std::__1::atomic.828" = type { %"struct.std::__1::__atomic_base.829" }
%"struct.std::__1::__atomic_base.829" = type { %"struct.std::__1::__cxx_atomic_impl.830" }
%"struct.std::__1::__cxx_atomic_impl.830" = type { %"struct.std::__1::__cxx_atomic_base_impl.831" }
%"struct.std::__1::__cxx_atomic_base_impl.831" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.838" = type { %"struct.std::__1::__atomic_base.839" }
%"struct.std::__1::__atomic_base.839" = type { %"struct.std::__1::__cxx_atomic_impl.840" }
%"struct.std::__1::__cxx_atomic_impl.840" = type { %"struct.std::__1::__cxx_atomic_base_impl.841" }
%"struct.std::__1::__cxx_atomic_base_impl.841" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.843" }
%"class.std::__1::__compressed_pair.843" = type { %"struct.std::__1::__compressed_pair_elem.844" }
%"struct.std::__1::__compressed_pair_elem.844" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.845 }
%union.anon.845 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.849" = type { %"class.std::__1::__hash_table.850" }
%"class.std::__1::__hash_table.850" = type <{ %"class.std::__1::unique_ptr.851", %"class.std::__1::__compressed_pair.861", %"class.std::__1::__compressed_pair.866", %"class.std::__1::__compressed_pair.869", [4 x i8] }>
%"class.std::__1::unique_ptr.851" = type { %"class.std::__1::__compressed_pair.852" }
%"class.std::__1::__compressed_pair.852" = type { %"struct.std::__1::__compressed_pair_elem.853", %"struct.std::__1::__compressed_pair_elem.855" }
%"struct.std::__1::__compressed_pair_elem.853" = type { %"struct.std::__1::__hash_node_base.854"** }
%"struct.std::__1::__hash_node_base.854" = type { %"struct.std::__1::__hash_node_base.854"* }
%"struct.std::__1::__compressed_pair_elem.855" = type { %"class.std::__1::__bucket_list_deallocator.856" }
%"class.std::__1::__bucket_list_deallocator.856" = type { %"class.std::__1::__compressed_pair.857" }
%"class.std::__1::__compressed_pair.857" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.861" = type { %"struct.std::__1::__compressed_pair_elem.862" }
%"struct.std::__1::__compressed_pair_elem.862" = type { %"struct.std::__1::__hash_node_base.854" }
%"class.std::__1::__compressed_pair.866" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.869" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::atomic.152" = type { %"struct.std::__1::__atomic_base.153" }
%"struct.std::__1::__atomic_base.153" = type { %"struct.std::__1::__cxx_atomic_impl.154" }
%"struct.std::__1::__cxx_atomic_impl.154" = type { %"struct.std::__1::__cxx_atomic_base_impl.155" }
%"struct.std::__1::__cxx_atomic_base_impl.155" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.875", %"class.v8::internal::Handle.881", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.882", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.875" = type { %"class.std::__1::__compressed_pair.876" }
%"class.std::__1::__compressed_pair.876" = type { %"struct.std::__1::__compressed_pair_elem.877" }
%"struct.std::__1::__compressed_pair_elem.877" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.881" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.882" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.883", %"class.std::__1::vector.889", %"class.std::__1::unique_ptr.897", %"class.std::__1::unique_ptr.903", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.909", %"class.std::__1::vector.915", %"struct.std::__1::pair.923" }
%"class.std::__1::unique_ptr.883" = type { %"class.std::__1::__compressed_pair.884" }
%"class.std::__1::__compressed_pair.884" = type { %"struct.std::__1::__compressed_pair_elem.885" }
%"struct.std::__1::__compressed_pair_elem.885" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.889" = type { %"class.std::__1::__vector_base.890" }
%"class.std::__1::__vector_base.890" = type { %"class.std::__1::unique_ptr.891"*, %"class.std::__1::unique_ptr.891"*, %"class.std::__1::__compressed_pair.892" }
%"class.std::__1::unique_ptr.891" = type opaque
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"class.std::__1::unique_ptr.891"* }
%"class.std::__1::unique_ptr.897" = type { %"class.std::__1::__compressed_pair.898" }
%"class.std::__1::__compressed_pair.898" = type { %"struct.std::__1::__compressed_pair_elem.899" }
%"struct.std::__1::__compressed_pair_elem.899" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.903" = type { %"class.std::__1::__compressed_pair.904" }
%"class.std::__1::__compressed_pair.904" = type { %"struct.std::__1::__compressed_pair_elem.905" }
%"struct.std::__1::__compressed_pair_elem.905" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.909" = type { %"class.std::__1::__compressed_pair.910" }
%"class.std::__1::__compressed_pair.910" = type { %"struct.std::__1::__compressed_pair_elem.911" }
%"struct.std::__1::__compressed_pair_elem.911" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.915" = type { %"class.std::__1::__vector_base.916" }
%"class.std::__1::__vector_base.916" = type { %"struct.std::__1::pair.917"*, %"struct.std::__1::pair.917"*, %"class.std::__1::__compressed_pair.918" }
%"struct.std::__1::pair.917" = type opaque
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"struct.std::__1::pair.917"* }
%"struct.std::__1::pair.923" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.0"*, i16, i8*)*, i8* }
%"class.v8::Local.0" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.924" = type { %"class.std::__1::__compressed_pair.925" }
%"class.std::__1::__compressed_pair.925" = type { %"struct.std::__1::__compressed_pair_elem.926" }
%"struct.std::__1::__compressed_pair_elem.926" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.927", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.927" = type { %"class.std::__1::__hash_table.928" }
%"class.std::__1::__hash_table.928" = type <{ %"class.std::__1::unique_ptr.929", %"class.std::__1::__compressed_pair.939", %"class.std::__1::__compressed_pair.944", %"class.std::__1::__compressed_pair.948", [4 x i8] }>
%"class.std::__1::unique_ptr.929" = type { %"class.std::__1::__compressed_pair.930" }
%"class.std::__1::__compressed_pair.930" = type { %"struct.std::__1::__compressed_pair_elem.931", %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.931" = type { %"struct.std::__1::__hash_node_base.932"** }
%"struct.std::__1::__hash_node_base.932" = type { %"struct.std::__1::__hash_node_base.932"* }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.std::__1::__bucket_list_deallocator.934" }
%"class.std::__1::__bucket_list_deallocator.934" = type { %"class.std::__1::__compressed_pair.935" }
%"class.std::__1::__compressed_pair.935" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.939" = type { %"struct.std::__1::__compressed_pair_elem.940" }
%"struct.std::__1::__compressed_pair_elem.940" = type { %"struct.std::__1::__hash_node_base.932" }
%"class.std::__1::__compressed_pair.944" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.962" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"class.std::__1::__compressed_pair.957" }
%"struct.std::__1::pair.956" = type opaque
%"class.std::__1::__compressed_pair.957" = type { %"struct.std::__1::__compressed_pair_elem.958" }
%"struct.std::__1::__compressed_pair_elem.958" = type { %"struct.std::__1::pair.956"** }
%"class.std::__1::__compressed_pair.962" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.967" = type { %"class.std::__1::__vector_base.968" }
%"class.std::__1::__vector_base.968" = type { %"class.v8::internal::Handle.969"*, %"class.v8::internal::Handle.969"*, %"class.std::__1::__compressed_pair.970" }
%"class.v8::internal::Handle.969" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.970" = type { %"struct.std::__1::__compressed_pair_elem.971" }
%"struct.std::__1::__compressed_pair_elem.971" = type { %"class.v8::internal::Handle.969"* }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type { %"class.v8::internal::PointerToIndexHashMap.975" }
%"class.v8::internal::PointerToIndexHashMap.975" = type { %"class.v8::base::TemplateHashMapImpl" }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<unsigned long, unsigned int, v8::base::KeyEqualityMatcher<long>, v8::base::DefaultAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<unsigned long, unsigned int, v8::base::KeyEqualityMatcher<long>, v8::base::DefaultAllocationPolicy>::Impl" = type { %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"struct.v8::base::TemplateHashMapEntry" = type <{ i64, i32, i32, i8, [7 x i8] }>
%"class.v8::internal::HeapObjectToIndexHashMap" = type { %"class.v8::internal::PointerToIndexHashMap" }
%"class.v8::internal::PointerToIndexHashMap" = type { %"class.v8::base::TemplateHashMapImpl" }
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.833", i32, %"class.v8::Local.0" }
%"class.v8::Local.833" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.976" = type { %"class.std::__1::__compressed_pair.977" }
%"class.std::__1::__compressed_pair.977" = type { %"struct.std::__1::__compressed_pair_elem.978" }
%"struct.std::__1::__compressed_pair_elem.978" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.808", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.982" = type { %"class.std::__1::__vector_base.983" }
%"class.std::__1::__vector_base.983" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.984" }
%"class.std::__1::__compressed_pair.984" = type { %"struct.std::__1::__compressed_pair_elem.985" }
%"struct.std::__1::__compressed_pair_elem.985" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.989" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.990" = type { %"class.std::__1::__hash_table.991" }
%"class.std::__1::__hash_table.991" = type <{ %"class.std::__1::unique_ptr.992", %"class.std::__1::__compressed_pair.1002", %"class.std::__1::__compressed_pair.1007", %"class.std::__1::__compressed_pair.1010", [4 x i8] }>
%"class.std::__1::unique_ptr.992" = type { %"class.std::__1::__compressed_pair.993" }
%"class.std::__1::__compressed_pair.993" = type { %"struct.std::__1::__compressed_pair_elem.994", %"struct.std::__1::__compressed_pair_elem.996" }
%"struct.std::__1::__compressed_pair_elem.994" = type { %"struct.std::__1::__hash_node_base.995"** }
%"struct.std::__1::__hash_node_base.995" = type { %"struct.std::__1::__hash_node_base.995"* }
%"struct.std::__1::__compressed_pair_elem.996" = type { %"class.std::__1::__bucket_list_deallocator.997" }
%"class.std::__1::__bucket_list_deallocator.997" = type { %"class.std::__1::__compressed_pair.998" }
%"class.std::__1::__compressed_pair.998" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1002" = type { %"struct.std::__1::__compressed_pair_elem.1003" }
%"struct.std::__1::__compressed_pair_elem.1003" = type { %"struct.std::__1::__hash_node_base.995" }
%"class.std::__1::__compressed_pair.1007" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1010" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.541" = type { %"class.std::__1::__vector_base.542" }
%"class.std::__1::__vector_base.542" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.543" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.160" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1014", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1043", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1044", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1014" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1039, %union.anon.1041, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1039 = type { i64 }
%union.anon.1041 = type { i64 }
%"class.std::__1::weak_ptr.1043" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1044" = type { %"class.v8::PersistentBase.1045" }
%"class.v8::PersistentBase.1045" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1015", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1015" = type { %"class.std::__1::__hash_table.1016" }
%"class.std::__1::__hash_table.1016" = type <{ %"class.std::__1::unique_ptr.1017", %"class.std::__1::__compressed_pair.1027", %"class.std::__1::__compressed_pair.1032", %"class.std::__1::__compressed_pair.1035", [4 x i8] }>
%"class.std::__1::unique_ptr.1017" = type { %"class.std::__1::__compressed_pair.1018" }
%"class.std::__1::__compressed_pair.1018" = type { %"struct.std::__1::__compressed_pair_elem.1019", %"struct.std::__1::__compressed_pair_elem.1021" }
%"struct.std::__1::__compressed_pair_elem.1019" = type { %"struct.std::__1::__hash_node_base.1020"** }
%"struct.std::__1::__hash_node_base.1020" = type { %"struct.std::__1::__hash_node_base.1020"* }
%"struct.std::__1::__compressed_pair_elem.1021" = type { %"class.std::__1::__bucket_list_deallocator.1022" }
%"class.std::__1::__bucket_list_deallocator.1022" = type { %"class.std::__1::__compressed_pair.1023" }
%"class.std::__1::__compressed_pair.1023" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1027" = type { %"struct.std::__1::__compressed_pair_elem.1028" }
%"struct.std::__1::__compressed_pair_elem.1028" = type { %"struct.std::__1::__hash_node_base.1020" }
%"class.std::__1::__compressed_pair.1032" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1035" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1046" = type { %"class.std::__1::__compressed_pair.1047" }
%"class.std::__1::__compressed_pair.1047" = type { %"struct.std::__1::__compressed_pair_elem.1048" }
%"struct.std::__1::__compressed_pair_elem.1048" = type { %"class.v8::internal::LocalIsolate"* }
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1084" = type { %"class.std::__1::__compressed_pair.1085" }
%"class.std::__1::__compressed_pair.1085" = type { %"struct.std::__1::__compressed_pair_elem.1086" }
%"struct.std::__1::__compressed_pair_elem.1086" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.834", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.834" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1092" }
%"class.std::__1::unordered_map.1092" = type { %"class.std::__1::__hash_table.1093" }
%"class.std::__1::__hash_table.1093" = type <{ %"class.std::__1::unique_ptr.1094", %"class.std::__1::__compressed_pair.1104", %"class.std::__1::__compressed_pair.1109", %"class.std::__1::__compressed_pair.1112", [4 x i8] }>
%"class.std::__1::unique_ptr.1094" = type { %"class.std::__1::__compressed_pair.1095" }
%"class.std::__1::__compressed_pair.1095" = type { %"struct.std::__1::__compressed_pair_elem.1096", %"struct.std::__1::__compressed_pair_elem.1098" }
%"struct.std::__1::__compressed_pair_elem.1096" = type { %"struct.std::__1::__hash_node_base.1097"** }
%"struct.std::__1::__hash_node_base.1097" = type { %"struct.std::__1::__hash_node_base.1097"* }
%"struct.std::__1::__compressed_pair_elem.1098" = type { %"class.std::__1::__bucket_list_deallocator.1099" }
%"class.std::__1::__bucket_list_deallocator.1099" = type { %"class.std::__1::__compressed_pair.1100" }
%"class.std::__1::__compressed_pair.1100" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1104" = type { %"struct.std::__1::__compressed_pair_elem.1105" }
%"struct.std::__1::__compressed_pair_elem.1105" = type { %"struct.std::__1::__hash_node_base.1097" }
%"class.std::__1::__compressed_pair.1109" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1112" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.1118" = type { %"struct.std::__1::__atomic_base.1119" }
%"struct.std::__1::__atomic_base.1119" = type { %"struct.std::__1::__cxx_atomic_impl.1120" }
%"struct.std::__1::__cxx_atomic_impl.1120" = type { %"struct.std::__1::__cxx_atomic_base_impl.1121" }
%"struct.std::__1::__cxx_atomic_base_impl.1121" = type { %"class.std::__1::vector.1122"* }
%"class.std::__1::vector.1122" = type { %"class.std::__1::__vector_base.1123" }
%"class.std::__1::__vector_base.1123" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1124" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1124" = type { %"struct.std::__1::__compressed_pair_elem.1125" }
%"struct.std::__1::__compressed_pair_elem.1125" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::base::Optional.1129" = type { %"class.v8::base::internal::OptionalBase.1130" }
%"class.v8::base::internal::OptionalBase.1130" = type { %"struct.v8::base::internal::OptionalStorage.1131" }
%"struct.v8::base::internal::OptionalStorage.1131" = type { %"struct.v8::base::internal::OptionalStorageBase.1132" }
%"struct.v8::base::internal::OptionalStorageBase.1132" = type { i8, %union.anon.1133 }
%union.anon.1133 = type { %"class.v8::internal::compiler::NativeContextRef" }
%"class.v8::internal::compiler::NativeContextRef" = type { %"class.v8::internal::compiler::ContextRef" }
%"class.v8::internal::compiler::ContextRef" = type { %"class.v8::internal::compiler::HeapObjectRef" }
%"class.v8::internal::compiler::HeapObjectRef" = type { %"class.v8::internal::compiler::ObjectRef" }
%"class.v8::internal::compiler::ObjectRef" = type { %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::JSHeapBroker"* }
%"class.v8::internal::compiler::ObjectData" = type opaque
%"class.v8::internal::compiler::RefsMap" = type { %"class.v8::base::TemplateHashMapImpl.1134" }
%"class.v8::base::TemplateHashMapImpl.1134" = type { %"struct.v8::base::TemplateHashMapImpl<unsigned long, v8::internal::compiler::ObjectData *, v8::internal::compiler::AddressMatcher, v8::internal::ZoneAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<unsigned long, v8::internal::compiler::ObjectData *, v8::internal::compiler::AddressMatcher, v8::internal::ZoneAllocationPolicy>::Impl" = type { %"class.v8::internal::ZoneAllocationPolicy", %"struct.v8::base::TemplateHashMapEntry.1136"*, i32, i32 }
%"class.v8::internal::ZoneAllocationPolicy" = type { %"class.v8::internal::Zone"* }
%"struct.v8::base::TemplateHashMapEntry.1136" = type opaque
%"class.v8::internal::RootIndexMap" = type { %"class.v8::internal::HeapObjectToIndexHashMap"* }
%"class.v8::internal::ZoneUnorderedSet" = type { %"class.std::__1::unordered_set.1137" }
%"class.std::__1::unordered_set.1137" = type { %"class.std::__1::__hash_table.1138" }
%"class.std::__1::__hash_table.1138" = type <{ %"class.std::__1::unique_ptr.1139", %"class.std::__1::__compressed_pair.1147", %"class.std::__1::__compressed_pair.1151", %"class.std::__1::__compressed_pair.1153", [4 x i8] }>
%"class.std::__1::unique_ptr.1139" = type { %"class.std::__1::__compressed_pair.1140" }
%"class.std::__1::__compressed_pair.1140" = type { %"struct.std::__1::__compressed_pair_elem.1141", %"struct.std::__1::__compressed_pair_elem.1143" }
%"struct.std::__1::__compressed_pair_elem.1141" = type { %"struct.std::__1::__hash_node_base.1142"** }
%"struct.std::__1::__hash_node_base.1142" = type { %"struct.std::__1::__hash_node_base.1142"* }
%"struct.std::__1::__compressed_pair_elem.1143" = type { %"class.std::__1::__bucket_list_deallocator.1144" }
%"class.std::__1::__bucket_list_deallocator.1144" = type { %"class.std::__1::__compressed_pair.1145" }
%"class.std::__1::__compressed_pair.1145" = type { %"struct.std::__1::__compressed_pair_elem.7", %"struct.std::__1::__compressed_pair_elem.1146" }
%"struct.std::__1::__compressed_pair_elem.1146" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1147" = type { %"struct.std::__1::__compressed_pair_elem.1148", %"struct.std::__1::__compressed_pair_elem.1149" }
%"struct.std::__1::__compressed_pair_elem.1148" = type { %"struct.std::__1::__hash_node_base.1142" }
%"struct.std::__1::__compressed_pair_elem.1149" = type { %"class.v8::internal::ZoneAllocator.1150" }
%"class.v8::internal::ZoneAllocator.1150" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1151" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1153" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.1061" = type { %"class.std::__1::__compressed_pair.1062" }
%"class.std::__1::__compressed_pair.1062" = type { %"struct.std::__1::__compressed_pair_elem.1063" }
%"struct.std::__1::__compressed_pair_elem.1063" = type { %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1075", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.std::__1::unique_ptr.1075" = type { %"class.std::__1::__compressed_pair.1076" }
%"class.std::__1::__compressed_pair.1076" = type { %"struct.std::__1::__compressed_pair_elem.1077" }
%"struct.std::__1::__compressed_pair_elem.1077" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"class.std::__1::unique_ptr.744" = type { %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"struct.std::__1::__compressed_pair_elem.746" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type { %"class.v8::internal::IdentityMapBase.base", %"class.v8::internal::ZoneAllocationPolicy" }
%"class.v8::internal::IdentityMapBase.base" = type <{ i32 (...)**, %"struct.v8::base::hash", [7 x i8], %"class.v8::internal::Heap"*, i32, i32, i32, i32, i64*, %"class.v8::internal::StrongRootsEntry"*, i64*, i8 }>
%"struct.v8::base::hash" = type { i8 }
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::ZoneUnorderedMap" = type { %"class.std::__1::unordered_map.1156" }
%"class.std::__1::unordered_map.1156" = type { %"class.std::__1::__hash_table.1157" }
%"class.std::__1::__hash_table.1157" = type <{ %"class.std::__1::unique_ptr.1158", %"class.std::__1::__compressed_pair.1167", %"class.std::__1::__compressed_pair.1171", %"class.std::__1::__compressed_pair.1174", [4 x i8] }>
%"class.std::__1::unique_ptr.1158" = type { %"class.std::__1::__compressed_pair.1159" }
%"class.std::__1::__compressed_pair.1159" = type { %"struct.std::__1::__compressed_pair_elem.1160", %"struct.std::__1::__compressed_pair_elem.1162" }
%"struct.std::__1::__compressed_pair_elem.1160" = type { %"struct.std::__1::__hash_node_base.1161"** }
%"struct.std::__1::__hash_node_base.1161" = type { %"struct.std::__1::__hash_node_base.1161"* }
%"struct.std::__1::__compressed_pair_elem.1162" = type { %"class.std::__1::__bucket_list_deallocator.1163" }
%"class.std::__1::__bucket_list_deallocator.1163" = type { %"class.std::__1::__compressed_pair.1164" }
%"class.std::__1::__compressed_pair.1164" = type { %"struct.std::__1::__compressed_pair_elem.7", %"struct.std::__1::__compressed_pair_elem.1165" }
%"struct.std::__1::__compressed_pair_elem.1165" = type { %"class.v8::internal::ZoneAllocator.1166" }
%"class.v8::internal::ZoneAllocator.1166" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1167" = type { %"struct.std::__1::__compressed_pair_elem.1168", %"struct.std::__1::__compressed_pair_elem.1169" }
%"struct.std::__1::__compressed_pair_elem.1168" = type { %"struct.std::__1::__hash_node_base.1161" }
%"struct.std::__1::__compressed_pair_elem.1169" = type { %"class.v8::internal::ZoneAllocator.1170" }
%"class.v8::internal::ZoneAllocator.1170" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1171" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1174" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::ZoneUnorderedMap.1178" = type { %"class.std::__1::unordered_map.1179" }
%"class.std::__1::unordered_map.1179" = type { %"class.std::__1::__hash_table.1180" }
%"class.std::__1::__hash_table.1180" = type <{ %"class.std::__1::unique_ptr.1181", %"class.std::__1::__compressed_pair.1190", %"class.std::__1::__compressed_pair.1194", %"class.std::__1::__compressed_pair.1197", [4 x i8] }>
%"class.std::__1::unique_ptr.1181" = type { %"class.std::__1::__compressed_pair.1182" }
%"class.std::__1::__compressed_pair.1182" = type { %"struct.std::__1::__compressed_pair_elem.1183", %"struct.std::__1::__compressed_pair_elem.1185" }
%"struct.std::__1::__compressed_pair_elem.1183" = type { %"struct.std::__1::__hash_node_base.1184"** }
%"struct.std::__1::__hash_node_base.1184" = type { %"struct.std::__1::__hash_node_base.1184"* }
%"struct.std::__1::__compressed_pair_elem.1185" = type { %"class.std::__1::__bucket_list_deallocator.1186" }
%"class.std::__1::__bucket_list_deallocator.1186" = type { %"class.std::__1::__compressed_pair.1187" }
%"class.std::__1::__compressed_pair.1187" = type { %"struct.std::__1::__compressed_pair_elem.7", %"struct.std::__1::__compressed_pair_elem.1188" }
%"struct.std::__1::__compressed_pair_elem.1188" = type { %"class.v8::internal::ZoneAllocator.1189" }
%"class.v8::internal::ZoneAllocator.1189" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1190" = type { %"struct.std::__1::__compressed_pair_elem.1191", %"struct.std::__1::__compressed_pair_elem.1192" }
%"struct.std::__1::__compressed_pair_elem.1191" = type { %"struct.std::__1::__hash_node_base.1184" }
%"struct.std::__1::__compressed_pair_elem.1192" = type { %"class.v8::internal::ZoneAllocator.1193" }
%"class.v8::internal::ZoneAllocator.1193" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1194" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1197" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::ZoneUnorderedMap.1201" = type { %"class.std::__1::unordered_map.1202" }
%"class.std::__1::unordered_map.1202" = type { %"class.std::__1::__hash_table.1203" }
%"class.std::__1::__hash_table.1203" = type <{ %"class.std::__1::unique_ptr.1204", %"class.std::__1::__compressed_pair.1213", %"class.std::__1::__compressed_pair.1217", %"class.std::__1::__compressed_pair.1220", [4 x i8] }>
%"class.std::__1::unique_ptr.1204" = type { %"class.std::__1::__compressed_pair.1205" }
%"class.std::__1::__compressed_pair.1205" = type { %"struct.std::__1::__compressed_pair_elem.1206", %"struct.std::__1::__compressed_pair_elem.1208" }
%"struct.std::__1::__compressed_pair_elem.1206" = type { %"struct.std::__1::__hash_node_base.1207"** }
%"struct.std::__1::__hash_node_base.1207" = type { %"struct.std::__1::__hash_node_base.1207"* }
%"struct.std::__1::__compressed_pair_elem.1208" = type { %"class.std::__1::__bucket_list_deallocator.1209" }
%"class.std::__1::__bucket_list_deallocator.1209" = type { %"class.std::__1::__compressed_pair.1210" }
%"class.std::__1::__compressed_pair.1210" = type { %"struct.std::__1::__compressed_pair_elem.7", %"struct.std::__1::__compressed_pair_elem.1211" }
%"struct.std::__1::__compressed_pair_elem.1211" = type { %"class.v8::internal::ZoneAllocator.1212" }
%"class.v8::internal::ZoneAllocator.1212" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1213" = type { %"struct.std::__1::__compressed_pair_elem.1214", %"struct.std::__1::__compressed_pair_elem.1215" }
%"struct.std::__1::__compressed_pair_elem.1214" = type { %"struct.std::__1::__hash_node_base.1207" }
%"struct.std::__1::__compressed_pair_elem.1215" = type { %"class.v8::internal::ZoneAllocator.1216" }
%"class.v8::internal::ZoneAllocator.1216" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1217" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1220" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector.1224" }
%"class.std::__1::vector.1224" = type { %"class.std::__1::__vector_base.1225" }
%"class.std::__1::__vector_base.1225" = type { %"class.v8::internal::compiler::ObjectData"**, %"class.v8::internal::compiler::ObjectData"**, %"class.std::__1::__compressed_pair.1226" }
%"class.std::__1::__compressed_pair.1226" = type { %"struct.std::__1::__compressed_pair_elem.1227", %"struct.std::__1::__compressed_pair_elem.1228" }
%"struct.std::__1::__compressed_pair_elem.1227" = type { %"class.v8::internal::compiler::ObjectData"** }
%"struct.std::__1::__compressed_pair_elem.1228" = type { %"class.v8::internal::ZoneAllocator.1229" }
%"class.v8::internal::ZoneAllocator.1229" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneMultimap" = type { %"class.std::__1::multimap" }
%"class.std::__1::multimap" = type { %"class.std::__1::__tree.1230" }
%"class.std::__1::__tree.1230" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1231", %"class.std::__1::__compressed_pair.1234" }
%"class.std::__1::__compressed_pair.1231" = type { %"struct.std::__1::__compressed_pair_elem.80", %"struct.std::__1::__compressed_pair_elem.1232" }
%"struct.std::__1::__compressed_pair_elem.1232" = type { %"class.v8::internal::ZoneAllocator.1233" }
%"class.v8::internal::ZoneAllocator.1233" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1234" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::internal::compiler::Node" = type { %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Type", i32, i32, %"struct.v8::internal::compiler::Node::Use"* }
%"class.v8::internal::compiler::Operator" = type <{ i32 (...)**, i8*, i16, %"class.v8::base::Flags", i8, i32, i32, i32, i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.v8::base::Flags" = type { i8 }
%"class.v8::internal::compiler::Type" = type { i64 }
%"struct.v8::internal::compiler::Node::Use" = type { %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"*, i32 }
%"class.v8::internal::ZoneHandleSet" = type { i64 }
%"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator" = type { %"class.v8::internal::ZoneHandleSet"*, i64 }
%"class.v8::internal::ZoneVector.1376" = type { %"class.std::__1::vector.1377" }
%"class.std::__1::vector.1377" = type { %"class.std::__1::__vector_base.1378" }
%"class.std::__1::__vector_base.1378" = type { i64**, i64**, %"class.std::__1::__compressed_pair.1379" }
%"class.std::__1::__compressed_pair.1379" = type { %"struct.std::__1::__compressed_pair_elem.811", %"struct.std::__1::__compressed_pair_elem.1380" }
%"struct.std::__1::__compressed_pair_elem.1380" = type { %"class.v8::internal::ZoneAllocator.1381" }
%"class.v8::internal::ZoneAllocator.1381" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i16)* }
%"class.v8::base::Optional.1390" = type { %"class.v8::base::internal::OptionalBase.1391" }
%"class.v8::base::internal::OptionalBase.1391" = type { %"struct.v8::base::internal::OptionalStorage.1392" }
%"struct.v8::base::internal::OptionalStorage.1392" = type { %"struct.v8::base::internal::OptionalStorageBase.1393" }
%"struct.v8::base::internal::OptionalStorageBase.1393" = type { i8, %union.anon.1394 }
%union.anon.1394 = type { %"class.v8::internal::compiler::MapRef" }
%"class.v8::internal::compiler::MapRef" = type { %"class.v8::internal::compiler::HeapObjectRef" }
%class.anon.1249 = type { %"class.v8::internal::compiler::MapInference"*, %"class.std::__1::function" }
%class.anon.1250 = type { %"class.v8::internal::compiler::MapInference"*, %"class.std::__1::function" }
%"class.v8::internal::compiler::JSGraph" = type { %"class.v8::internal::compiler::MachineGraph", %"class.v8::internal::Isolate"*, %"class.v8::internal::compiler::JSOperatorBuilder"*, %"class.v8::internal::compiler::SimplifiedOperatorBuilder"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"* }
%"class.v8::internal::compiler::MachineGraph" = type { %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::MachineOperatorBuilder"*, %"class.v8::internal::compiler::CommonNodeCache", %"class.v8::internal::compiler::Node"* }
%"class.v8::internal::compiler::Graph" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, i32, i32, %"class.v8::internal::ZoneVector.1251" }
%"class.v8::internal::ZoneVector.1251" = type { %"class.std::__1::vector.1252" }
%"class.std::__1::vector.1252" = type { %"class.std::__1::__vector_base.1253" }
%"class.std::__1::__vector_base.1253" = type { %"class.v8::internal::compiler::GraphDecorator"**, %"class.v8::internal::compiler::GraphDecorator"**, %"class.std::__1::__compressed_pair.1254" }
%"class.v8::internal::compiler::GraphDecorator" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.1254" = type { %"struct.std::__1::__compressed_pair_elem.1255", %"struct.std::__1::__compressed_pair_elem.1256" }
%"struct.std::__1::__compressed_pair_elem.1255" = type { %"class.v8::internal::compiler::GraphDecorator"** }
%"struct.std::__1::__compressed_pair_elem.1256" = type { %"class.v8::internal::ZoneAllocator.1257" }
%"class.v8::internal::ZoneAllocator.1257" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::compiler::CommonOperatorBuilder" = type { %"struct.v8::internal::compiler::CommonOperatorGlobalCache"*, %"class.v8::internal::Zone"* }
%"struct.v8::internal::compiler::CommonOperatorGlobalCache" = type opaque
%"class.v8::internal::compiler::MachineOperatorBuilder" = type <{ %"class.v8::internal::Zone"*, %"struct.v8::internal::compiler::MachineOperatorGlobalCache"*, i8, [3 x i8], %"class.v8::base::Flags.1258", %"class.v8::internal::compiler::MachineOperatorBuilder::AlignmentRequirements", [4 x i8] }>
%"struct.v8::internal::compiler::MachineOperatorGlobalCache" = type opaque
%"class.v8::base::Flags.1258" = type { i32 }
%"class.v8::internal::compiler::MachineOperatorBuilder::AlignmentRequirements" = type { i32, %"class.v8::base::EnumSet", %"class.v8::base::EnumSet" }
%"class.v8::base::EnumSet" = type { i32 }
%"class.v8::internal::compiler::CommonNodeCache" = type { %"class.v8::internal::compiler::NodeCache", %"class.v8::internal::compiler::NodeCache.1283", %"class.v8::internal::compiler::NodeCache", %"class.v8::internal::compiler::NodeCache", %"class.v8::internal::compiler::NodeCache.1283", %"class.v8::internal::compiler::NodeCache.1283", %"class.v8::internal::compiler::NodeCache.1283", %"class.v8::internal::compiler::NodeCache.1283", %"class.v8::internal::compiler::NodeCache.1283", %"class.v8::internal::compiler::NodeCache.1310", %"class.v8::internal::compiler::NodeCache.1337" }
%"class.v8::internal::compiler::NodeCache" = type { %"class.v8::internal::ZoneUnorderedMap.1259" }
%"class.v8::internal::ZoneUnorderedMap.1259" = type { %"class.std::__1::unordered_map.1260" }
%"class.std::__1::unordered_map.1260" = type { %"class.std::__1::__hash_table.1261" }
%"class.std::__1::__hash_table.1261" = type <{ %"class.std::__1::unique_ptr.1262", %"class.std::__1::__compressed_pair.1271", %"class.std::__1::__compressed_pair.1275", %"class.std::__1::__compressed_pair.1279", [4 x i8] }>
%"class.std::__1::unique_ptr.1262" = type { %"class.std::__1::__compressed_pair.1263" }
%"class.std::__1::__compressed_pair.1263" = type { %"struct.std::__1::__compressed_pair_elem.1264", %"struct.std::__1::__compressed_pair_elem.1266" }
%"struct.std::__1::__compressed_pair_elem.1264" = type { %"struct.std::__1::__hash_node_base.1265"** }
%"struct.std::__1::__hash_node_base.1265" = type { %"struct.std::__1::__hash_node_base.1265"* }
%"struct.std::__1::__compressed_pair_elem.1266" = type { %"class.std::__1::__bucket_list_deallocator.1267" }
%"class.std::__1::__bucket_list_deallocator.1267" = type { %"class.std::__1::__compressed_pair.1268" }
%"class.std::__1::__compressed_pair.1268" = type { %"struct.std::__1::__compressed_pair_elem.7", %"struct.std::__1::__compressed_pair_elem.1269" }
%"struct.std::__1::__compressed_pair_elem.1269" = type { %"class.v8::internal::ZoneAllocator.1270" }
%"class.v8::internal::ZoneAllocator.1270" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1271" = type { %"struct.std::__1::__compressed_pair_elem.1272", %"struct.std::__1::__compressed_pair_elem.1273" }
%"struct.std::__1::__compressed_pair_elem.1272" = type { %"struct.std::__1::__hash_node_base.1265" }
%"struct.std::__1::__compressed_pair_elem.1273" = type { %"class.v8::internal::ZoneAllocator.1274" }
%"class.v8::internal::ZoneAllocator.1274" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1275" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1279" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::compiler::NodeCache.1283" = type { %"class.v8::internal::ZoneUnorderedMap.1284" }
%"class.v8::internal::ZoneUnorderedMap.1284" = type { %"class.std::__1::unordered_map.1285" }
%"class.std::__1::unordered_map.1285" = type { %"class.std::__1::__hash_table.1286" }
%"class.std::__1::__hash_table.1286" = type <{ %"class.std::__1::unique_ptr.1287", %"class.std::__1::__compressed_pair.1296", %"class.std::__1::__compressed_pair.1300", %"class.std::__1::__compressed_pair.1304", [4 x i8] }>
%"class.std::__1::unique_ptr.1287" = type { %"class.std::__1::__compressed_pair.1288" }
%"class.std::__1::__compressed_pair.1288" = type { %"struct.std::__1::__compressed_pair_elem.1289", %"struct.std::__1::__compressed_pair_elem.1291" }
%"struct.std::__1::__compressed_pair_elem.1289" = type { %"struct.std::__1::__hash_node_base.1290"** }
%"struct.std::__1::__hash_node_base.1290" = type { %"struct.std::__1::__hash_node_base.1290"* }
%"struct.std::__1::__compressed_pair_elem.1291" = type { %"class.std::__1::__bucket_list_deallocator.1292" }
%"class.std::__1::__bucket_list_deallocator.1292" = type { %"class.std::__1::__compressed_pair.1293" }
%"class.std::__1::__compressed_pair.1293" = type { %"struct.std::__1::__compressed_pair_elem.7", %"struct.std::__1::__compressed_pair_elem.1294" }
%"struct.std::__1::__compressed_pair_elem.1294" = type { %"class.v8::internal::ZoneAllocator.1295" }
%"class.v8::internal::ZoneAllocator.1295" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1296" = type { %"struct.std::__1::__compressed_pair_elem.1297", %"struct.std::__1::__compressed_pair_elem.1298" }
%"struct.std::__1::__compressed_pair_elem.1297" = type { %"struct.std::__1::__hash_node_base.1290" }
%"struct.std::__1::__compressed_pair_elem.1298" = type { %"class.v8::internal::ZoneAllocator.1299" }
%"class.v8::internal::ZoneAllocator.1299" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1300" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1304" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::compiler::NodeCache.1310" = type { %"class.v8::internal::ZoneUnorderedMap.1311" }
%"class.v8::internal::ZoneUnorderedMap.1311" = type { %"class.std::__1::unordered_map.1312" }
%"class.std::__1::unordered_map.1312" = type { %"class.std::__1::__hash_table.1313" }
%"class.std::__1::__hash_table.1313" = type <{ %"class.std::__1::unique_ptr.1314", %"class.std::__1::__compressed_pair.1323", %"class.std::__1::__compressed_pair.1327", %"class.std::__1::__compressed_pair.1331", [4 x i8] }>
%"class.std::__1::unique_ptr.1314" = type { %"class.std::__1::__compressed_pair.1315" }
%"class.std::__1::__compressed_pair.1315" = type { %"struct.std::__1::__compressed_pair_elem.1316", %"struct.std::__1::__compressed_pair_elem.1318" }
%"struct.std::__1::__compressed_pair_elem.1316" = type { %"struct.std::__1::__hash_node_base.1317"** }
%"struct.std::__1::__hash_node_base.1317" = type { %"struct.std::__1::__hash_node_base.1317"* }
%"struct.std::__1::__compressed_pair_elem.1318" = type { %"class.std::__1::__bucket_list_deallocator.1319" }
%"class.std::__1::__bucket_list_deallocator.1319" = type { %"class.std::__1::__compressed_pair.1320" }
%"class.std::__1::__compressed_pair.1320" = type { %"struct.std::__1::__compressed_pair_elem.7", %"struct.std::__1::__compressed_pair_elem.1321" }
%"struct.std::__1::__compressed_pair_elem.1321" = type { %"class.v8::internal::ZoneAllocator.1322" }
%"class.v8::internal::ZoneAllocator.1322" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1323" = type { %"struct.std::__1::__compressed_pair_elem.1324", %"struct.std::__1::__compressed_pair_elem.1325" }
%"struct.std::__1::__compressed_pair_elem.1324" = type { %"struct.std::__1::__hash_node_base.1317" }
%"struct.std::__1::__compressed_pair_elem.1325" = type { %"class.v8::internal::ZoneAllocator.1326" }
%"class.v8::internal::ZoneAllocator.1326" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1327" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1331" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::compiler::NodeCache.1337" = type { %"class.v8::internal::ZoneUnorderedMap.1338" }
%"class.v8::internal::ZoneUnorderedMap.1338" = type { %"class.std::__1::unordered_map.1339" }
%"class.std::__1::unordered_map.1339" = type { %"class.std::__1::__hash_table.1340" }
%"class.std::__1::__hash_table.1340" = type <{ %"class.std::__1::unique_ptr.1341", %"class.std::__1::__compressed_pair.1350", %"class.std::__1::__compressed_pair.1354", %"class.std::__1::__compressed_pair.1358", [4 x i8] }>
%"class.std::__1::unique_ptr.1341" = type { %"class.std::__1::__compressed_pair.1342" }
%"class.std::__1::__compressed_pair.1342" = type { %"struct.std::__1::__compressed_pair_elem.1343", %"struct.std::__1::__compressed_pair_elem.1345" }
%"struct.std::__1::__compressed_pair_elem.1343" = type { %"struct.std::__1::__hash_node_base.1344"** }
%"struct.std::__1::__hash_node_base.1344" = type { %"struct.std::__1::__hash_node_base.1344"* }
%"struct.std::__1::__compressed_pair_elem.1345" = type { %"class.std::__1::__bucket_list_deallocator.1346" }
%"class.std::__1::__bucket_list_deallocator.1346" = type { %"class.std::__1::__compressed_pair.1347" }
%"class.std::__1::__compressed_pair.1347" = type { %"struct.std::__1::__compressed_pair_elem.7", %"struct.std::__1::__compressed_pair_elem.1348" }
%"struct.std::__1::__compressed_pair_elem.1348" = type { %"class.v8::internal::ZoneAllocator.1349" }
%"class.v8::internal::ZoneAllocator.1349" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1350" = type { %"struct.std::__1::__compressed_pair_elem.1351", %"struct.std::__1::__compressed_pair_elem.1352" }
%"struct.std::__1::__compressed_pair_elem.1351" = type { %"struct.std::__1::__hash_node_base.1344" }
%"struct.std::__1::__compressed_pair_elem.1352" = type { %"class.v8::internal::ZoneAllocator.1353" }
%"class.v8::internal::ZoneAllocator.1353" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1354" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1358" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::compiler::JSOperatorBuilder" = type { %"struct.v8::internal::compiler::JSOperatorGlobalCache"*, %"class.v8::internal::Zone"* }
%"struct.v8::internal::compiler::JSOperatorGlobalCache" = type opaque
%"class.v8::internal::compiler::SimplifiedOperatorBuilder" = type { %"struct.v8::internal::compiler::SimplifiedOperatorGlobalCache"*, %"class.v8::internal::Zone"* }
%"struct.v8::internal::compiler::SimplifiedOperatorGlobalCache" = type opaque
%"class.v8::internal::compiler::Effect" = type { %"class.v8::internal::compiler::NodeWrapper" }
%"class.v8::internal::compiler::NodeWrapper" = type { %"class.v8::internal::compiler::Node"* }
%"struct.v8::internal::compiler::FeedbackSource" = type <{ %"class.v8::internal::Handle.1364", %"class.v8::internal::FeedbackSlot", [4 x i8] }>
%"class.v8::internal::Handle.1364" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::FeedbackSlot" = type { i32 }
%"struct.std::__1::array" = type { [3 x %"class.v8::internal::compiler::Node"*] }
%"class.v8::internal::compiler::CompilationDependencies" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::JSHeapBroker"*, %"class.v8::internal::ZoneForwardList" }
%"class.v8::internal::ZoneForwardList" = type { %"class.std::__1::forward_list" }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.1366" }
%"class.std::__1::__compressed_pair.1366" = type { %"struct.std::__1::__compressed_pair_elem.1367", %"struct.std::__1::__compressed_pair_elem.1368" }
%"struct.std::__1::__compressed_pair_elem.1367" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.v8::internal::compiler::CompilationDependency"* }
%"class.v8::internal::compiler::CompilationDependency" = type opaque
%"struct.std::__1::__compressed_pair_elem.1368" = type { %"class.v8::internal::ZoneAllocator.1369" }
%"class.v8::internal::ZoneAllocator.1369" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.v8::internal::StdoutStream" = type { %"class.v8::internal::OFStream.base", %"class.v8::base::LockGuard", %"class.std::__1::basic_ios.base" }
%"class.v8::internal::OFStream.base" = type { %"class.std::__1::basic_ostream.base", %"class.v8::internal::OFStreamBase" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.v8::internal::OFStreamBase" = type { %"class.std::__1::basic_streambuf", %struct._IO_FILE* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.v8::base::LockGuard" = type { %"class.v8::base::RecursiveMutex"* }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"struct.v8::internal::Brief" = type { i64 }
%"class.v8::internal::OFStream" = type { %"class.std::__1::basic_ostream.base", %"class.v8::internal::OFStreamBase", %"class.std::__1::basic_ios.base" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"class.std::__1::basic_ios" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32, [4 x i8] }>
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }

$_ZNSt3__16vectorIN2v88internal6HandleINS2_3MapEEENS_9allocatorIS5_EEE6insertINS2_13ZoneHandleSetIS4_E14const_iteratorEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISE_E9referenceEEE5valueENS_11__wrap_iterIPS5_EEE4typeENSI_IPKS5_EESE_SE_ = comdat any

$_ZN2v88internal19InstanceTypeChecker12IsJSReceiverENS0_12InstanceTypeE = comdat any

$_ZN2v88internal13ZoneHandleSetINS0_3MapEE6insertENS0_6HandleIS2_EEPNS0_4ZoneE = comdat any

$_ZNSt3__110__function16__policy_invokerIFbN2v88internal12InstanceTypeEEE11__call_implINS0_20__default_alloc_funcIPS5_S5_EEEEbPKNS0_16__policy_storageES4_ = comdat any

$_ZN2v88internal8compiler10TryMakeRefINS0_3MapEvEENS_4base8OptionalINS1_10ref_traitsIT_E8ref_typeEEEPNS1_12JSHeapBrokerENS0_6HandleIS7_EENS4_5FlagsINS1_19GetOrCreateDataFlagEiEE = comdat any

$_ZN2v88internal12StdoutStreamD1Ev = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZN2v88internal8OFStreamD1Ev = comdat any

$_ZN2v88internal8OFStreamD0Ev = comdat any

$_ZTv0_n24_N2v88internal8OFStreamD1Ev = comdat any

$_ZTv0_n24_N2v88internal8OFStreamD0Ev = comdat any

$_ZN2v88internal12StdoutStreamD0Ev = comdat any

$_ZTv0_n24_N2v88internal12StdoutStreamD1Ev = comdat any

$_ZTv0_n24_N2v88internal12StdoutStreamD0Ev = comdat any

$_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIPFbN2v88internal12InstanceTypeEES7_EEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = comdat any

$_ZTVN2v88internal12StdoutStreamE = comdat any

$_ZTTN2v88internal12StdoutStreamE = comdat any

$_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE = comdat any

$_ZTCN2v88internal12StdoutStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE = comdat any

$_ZTVN2v88internal8OFStreamE = comdat any

$_ZTTN2v88internal8OFStreamE = comdat any

$_ZTCN2v88internal8OFStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE = comdat any

@.str = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"Safe()\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"HaveMaps()\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"!InstanceTypeChecker::IsString(type)\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"feedback.IsValid()\00", align 1
@.str.5 = private unnamed_addr constant [62 x i8] c"RelyOnMapsHelper(nullptr, jsgraph, effect, control, feedback)\00", align 1
@_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIPFbN2v88internal12InstanceTypeEES7_EEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" zeroinitializer, comdat, align 8
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZNK2v88internal8compiler12MapInference21AllOfInstanceTypesAreENS5_12InstanceTypeEE3$_0FbS8_EEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZNK2v88internal8compiler12MapInference21AnyOfInstanceTypesAreENS5_12InstanceTypeEE3$_1FbS8_EEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8
@.str.7 = private unnamed_addr constant [9 x i8] c"Missing \00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"ObjectData for \00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.10 = private unnamed_addr constant [39 x i8] c"../../v8/src/compiler/js-heap-broker.h\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c")\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@stdout = external local_unnamed_addr global %struct._IO_FILE*, align 8
@_ZTVN2v88internal12StdoutStreamE = linkonce_odr hidden unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* inttoptr (i64 88 to i8*), i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::StdoutStream"*)* @_ZN2v88internal12StdoutStreamD1Ev to i8*), i8* bitcast (void (%"class.v8::internal::StdoutStream"*)* @_ZN2v88internal12StdoutStreamD0Ev to i8*)], [5 x i8*] [i8* inttoptr (i64 -88 to i8*), i8* inttoptr (i64 -88 to i8*), i8* null, i8* bitcast (void (%"class.v8::internal::StdoutStream"*)* @_ZTv0_n24_N2v88internal12StdoutStreamD1Ev to i8*), i8* bitcast (void (%"class.v8::internal::StdoutStream"*)* @_ZTv0_n24_N2v88internal12StdoutStreamD0Ev to i8*)] }, comdat, align 8
@_ZTTN2v88internal12StdoutStreamE = linkonce_odr hidden unnamed_addr constant [6 x i8*] [i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i32 0, inrange i32 0, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i32 0, inrange i32 0, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE, i32 0, inrange i32 0, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE, i32 0, inrange i32 1, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i32 0, inrange i32 1, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i32 0, inrange i32 1, i32 3) to i8*)], comdat, align 8
@_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE = linkonce_odr hidden unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* inttoptr (i64 88 to i8*), i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZN2v88internal8OFStreamD1Ev to i8*), i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZN2v88internal8OFStreamD0Ev to i8*)], [5 x i8*] [i8* inttoptr (i64 -88 to i8*), i8* inttoptr (i64 -88 to i8*), i8* null, i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZTv0_n24_N2v88internal8OFStreamD1Ev to i8*), i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZTv0_n24_N2v88internal8OFStreamD0Ev to i8*)] }, comdat, align 8
@_ZTCN2v88internal12StdoutStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE = linkonce_odr hidden unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* inttoptr (i64 88 to i8*), i8* null, i8* null, i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev to i8*)], [5 x i8*] [i8* inttoptr (i64 -88 to i8*), i8* inttoptr (i64 -88 to i8*), i8* null, i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev to i8*)] }, comdat, align 8
@_ZTVNSt3__19basic_iosIcNS_11char_traitsIcEEEE = external unnamed_addr constant { [4 x i8*] }, align 8
@_ZTVN2v88internal8OFStreamE = linkonce_odr hidden unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* inttoptr (i64 80 to i8*), i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZN2v88internal8OFStreamD1Ev to i8*), i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZN2v88internal8OFStreamD0Ev to i8*)], [5 x i8*] [i8* inttoptr (i64 -80 to i8*), i8* inttoptr (i64 -80 to i8*), i8* null, i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZTv0_n24_N2v88internal8OFStreamD1Ev to i8*), i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZTv0_n24_N2v88internal8OFStreamD0Ev to i8*)] }, comdat, align 8
@_ZTTN2v88internal8OFStreamE = linkonce_odr hidden unnamed_addr constant [4 x i8*] [i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i32 0, inrange i32 0, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal8OFStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE, i32 0, inrange i32 0, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal8OFStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE, i32 0, inrange i32 1, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i32 0, inrange i32 1, i32 3) to i8*)], comdat, align 8
@_ZTCN2v88internal8OFStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE = linkonce_odr hidden unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* inttoptr (i64 80 to i8*), i8* null, i8* null, i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev to i8*)], [5 x i8*] [i8* inttoptr (i64 -80 to i8*), i8* inttoptr (i64 -80 to i8*), i8* null, i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev to i8*)] }, comdat, align 8
@.str.13 = private unnamed_addr constant [8 x i8] c"IsMap()\00", align 1
@.str.16 = private unnamed_addr constant [23 x i8] c"storage_.is_populated_\00", align 1

@_ZN2v88internal8compiler12MapInferenceC1EPNS1_12JSHeapBrokerEPNS1_4NodeES6_ = hidden unnamed_addr alias void (%"class.v8::internal::compiler::MapInference"*, %"class.v8::internal::compiler::JSHeapBroker"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*), void (%"class.v8::internal::compiler::MapInference"*, %"class.v8::internal::compiler::JSHeapBroker"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*)* @_ZN2v88internal8compiler12MapInferenceC2EPNS1_12JSHeapBrokerEPNS1_4NodeES6_
@_ZN2v88internal8compiler12MapInferenceD1Ev = hidden unnamed_addr alias void (%"class.v8::internal::compiler::MapInference"*), void (%"class.v8::internal::compiler::MapInference"*)* @_ZN2v88internal8compiler12MapInferenceD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler12MapInferenceC2EPNS1_12JSHeapBrokerEPNS1_4NodeES6_(%"class.v8::internal::compiler::MapInference"*, %"class.v8::internal::compiler::JSHeapBroker"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*) unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::internal::ZoneHandleSet", align 8
  %6 = alloca %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator", align 8
  %7 = alloca %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator", align 8
  %8 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 0
  store %"class.v8::internal::compiler::JSHeapBroker"* %1, %"class.v8::internal::compiler::JSHeapBroker"** %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 1
  store %"class.v8::internal::compiler::Node"* %2, %"class.v8::internal::compiler::Node"** %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2
  %11 = bitcast %"class.std::__1::vector.1238"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #13
  %12 = bitcast %"class.v8::internal::ZoneHandleSet"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13
  %13 = getelementptr inbounds %"class.v8::internal::ZoneHandleSet", %"class.v8::internal::ZoneHandleSet"* %5, i64 0, i32 0
  store i64 1, i64* %13, align 8
  %14 = call i32 @_ZN2v88internal8compiler14NodeProperties15InferMapsUnsafeEPNS1_12JSHeapBrokerEPNS1_4NodeES6_PNS0_13ZoneHandleSetINS0_3MapEEE(%"class.v8::internal::compiler::JSHeapBroker"* %1, %"class.v8::internal::compiler::Node"* %2, %"class.v8::internal::compiler::Node"* %3, %"class.v8::internal::ZoneHandleSet"* nonnull %5) #13
  %15 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %16 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator", %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator"* %6, i64 0, i32 0
  store %"class.v8::internal::ZoneHandleSet"* %5, %"class.v8::internal::ZoneHandleSet"** %17, align 8, !alias.scope !2
  %18 = getelementptr inbounds %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator", %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator"* %6, i64 0, i32 1
  store i64 0, i64* %18, align 8, !alias.scope !2
  %19 = load i64, i64* %13, align 8, !noalias !5
  %20 = and i64 %19, 3
  switch i64 %20, label %22 [
    i64 1, label %32
    i64 0, label %21
  ]

21:                                               ; preds = %4
  br label %32

22:                                               ; preds = %4
  %23 = add i64 %19, -2
  %24 = inttoptr i64 %23 to %"class.v8::internal::ZoneVector.1376"*
  %25 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %24, i64 0, i32 0, i32 0, i32 1
  %26 = bitcast i64*** %25 to i64*
  %27 = load i64, i64* %26, align 8, !noalias !5
  %28 = inttoptr i64 %23 to i64*
  %29 = load i64, i64* %28, align 8, !noalias !5
  %30 = sub i64 %27, %29
  %31 = ashr exact i64 %30, 3
  br label %32

32:                                               ; preds = %4, %21, %22
  %33 = phi i64 [ 1, %21 ], [ %31, %22 ], [ 0, %4 ]
  %34 = getelementptr inbounds %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator", %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator"* %7, i64 0, i32 0
  store %"class.v8::internal::ZoneHandleSet"* %5, %"class.v8::internal::ZoneHandleSet"** %34, align 8, !alias.scope !5
  %35 = getelementptr inbounds %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator", %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator"* %7, i64 0, i32 1
  store i64 %33, i64* %35, align 8, !alias.scope !5
  %36 = call %"class.v8::internal::Handle.1240"* @_ZNSt3__16vectorIN2v88internal6HandleINS2_3MapEEENS_9allocatorIS5_EEE6insertINS2_13ZoneHandleSetIS4_E14const_iteratorEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISE_E9referenceEEE5valueENS_11__wrap_iterIPS5_EEE4typeENSI_IPKS5_EESE_SE_(%"class.std::__1::vector.1238"* %10, %"class.v8::internal::Handle.1240"* %16, %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator"* nonnull %6, %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator"* nonnull %7)
  %37 = icmp eq i32 %14, 2
  %38 = zext i1 %37 to i32
  %39 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 3
  store i32 %38, i32* %39, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN2v88internal8compiler14NodeProperties15InferMapsUnsafeEPNS1_12JSHeapBrokerEPNS1_4NodeES6_PNS0_13ZoneHandleSetINS0_3MapEEE(%"class.v8::internal::compiler::JSHeapBroker"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::ZoneHandleSet"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::Handle.1240"* @_ZNSt3__16vectorIN2v88internal6HandleINS2_3MapEEENS_9allocatorIS5_EEE6insertINS2_13ZoneHandleSetIS4_E14const_iteratorEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISE_E9referenceEEE5valueENS_11__wrap_iterIPS5_EEE4typeENSI_IPKS5_EESE_SE_(%"class.std::__1::vector.1238"*, %"class.v8::internal::Handle.1240"*, %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator"*, %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator"*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.v8::internal::Handle.1240"* %1 to i8*
  %6 = ptrtoint %"class.v8::internal::Handle.1240"* %1 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector.1238", %"class.std::__1::vector.1238"* %0, i64 0, i32 0, i32 0
  %8 = bitcast %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator"* %2 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator", %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator"* %2, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator"* %3 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator", %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator"* %3, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = inttoptr i64 %9 to %"class.v8::internal::ZoneHandleSet"*
  %17 = inttoptr i64 %13 to %"class.v8::internal::ZoneHandleSet"*
  %18 = icmp eq %"class.v8::internal::ZoneHandleSet"* %16, %17
  %19 = icmp eq i64 %15, %11
  %20 = and i1 %18, %19
  br i1 %20, label %580, label %21

21:                                               ; preds = %4
  br i1 %18, label %23, label %22

22:                                               ; preds = %21, %22
  br label %22

23:                                               ; preds = %21
  %24 = sub i64 %15, %11
  %25 = icmp sgt i64 %24, 0
  br i1 %25, label %26, label %580

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"class.std::__1::vector.1238", %"class.std::__1::vector.1238"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %28 = bitcast %"class.v8::internal::Handle.1240"** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::vector.1238", %"class.std::__1::vector.1238"* %0, i64 0, i32 0, i32 1
  %31 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %30, align 8
  %32 = ptrtoint %"class.v8::internal::Handle.1240"* %31 to i64
  %33 = sub i64 %29, %32
  %34 = ashr exact i64 %33, 3
  %35 = icmp sgt i64 %24, %34
  %36 = bitcast %"class.v8::internal::Handle.1240"** %30 to i64*
  br i1 %35, label %304, label %37

37:                                               ; preds = %26
  %38 = sub i64 %32, %6
  %39 = ashr exact i64 %38, 3
  %40 = icmp sgt i64 %24, %39
  br i1 %40, label %41, label %90

41:                                               ; preds = %37
  %42 = icmp sgt i64 %38, 0
  %43 = select i1 %42, i64 %39, i64 0
  %44 = add i64 %43, %11
  %45 = icmp eq i64 %44, %15
  br i1 %45, label %86, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.v8::internal::ZoneHandleSet", %"class.v8::internal::ZoneHandleSet"* %16, i64 0, i32 0
  br label %48

48:                                               ; preds = %46, %74
  %49 = phi i64 [ %80, %74 ], [ %32, %46 ]
  %50 = phi i64 [ %77, %74 ], [ %44, %46 ]
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %47, align 8
  %53 = and i64 %52, 3
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %72, label %55

55:                                               ; preds = %48
  %56 = add i64 %52, -2
  %57 = inttoptr i64 %56 to %"class.v8::internal::ZoneVector.1376"*
  %58 = shl i64 %50, 32
  %59 = ashr exact i64 %58, 32
  %60 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %57, i64 0, i32 0, i32 0, i32 1
  %61 = bitcast i64*** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = inttoptr i64 %56 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = sub i64 %62, %64
  %66 = ashr exact i64 %65, 3
  %67 = icmp ugt i64 %66, %59
  br i1 %67, label %68, label %82

68:                                               ; preds = %55
  %69 = inttoptr i64 %64 to i64**
  %70 = getelementptr inbounds i64*, i64** %69, i64 %59
  %71 = load i64*, i64** %70, align 8
  br label %74

72:                                               ; preds = %48
  %73 = inttoptr i64 %52 to i64*
  br label %74

74:                                               ; preds = %72, %68
  %75 = phi i64* [ %73, %72 ], [ %71, %68 ]
  %76 = ptrtoint i64* %75 to i64
  store i64 %76, i64* %51, align 8
  %77 = add i64 %50, 1
  %78 = inttoptr i64 %49 to %"class.v8::internal::Handle.1240"*
  %79 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %78, i64 1
  %80 = ptrtoint %"class.v8::internal::Handle.1240"* %79 to i64
  %81 = icmp eq i64 %77, %15
  br i1 %81, label %84, label %48

82:                                               ; preds = %55
  %83 = inttoptr i64 %56 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %83) #14
  unreachable

84:                                               ; preds = %74
  %85 = ptrtoint %"class.v8::internal::Handle.1240"* %79 to i64
  br label %86

86:                                               ; preds = %84, %41
  %87 = phi i64 [ %32, %41 ], [ %85, %84 ]
  store i64 %87, i64* %36, align 8
  br i1 %42, label %88, label %580

88:                                               ; preds = %86
  %89 = inttoptr i64 %87 to %"class.v8::internal::Handle.1240"*
  br label %90

90:                                               ; preds = %88, %37
  %91 = phi i64 [ %87, %88 ], [ %32, %37 ]
  %92 = phi %"class.v8::internal::Handle.1240"* [ %89, %88 ], [ %31, %37 ]
  %93 = phi i64 [ %44, %88 ], [ %15, %37 ]
  %94 = phi i64 [ %9, %88 ], [ %13, %37 ]
  %95 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %1, i64 %24
  %96 = ptrtoint %"class.v8::internal::Handle.1240"* %95 to i64
  %97 = sub i64 %91, %96
  %98 = ashr exact i64 %97, 3
  %99 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %1, i64 %98
  %100 = icmp ult %"class.v8::internal::Handle.1240"* %99, %31
  br i1 %100, label %101, label %214

101:                                              ; preds = %90
  %102 = sub nsw i64 0, %98
  %103 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %31, i64 %102, i32 0, i32 0
  %104 = bitcast i64** %103 to i8*
  %105 = xor i64 %6, -1
  %106 = getelementptr i8, i8* %104, i64 %105
  %107 = ptrtoint i8* %106 to i64
  %108 = lshr i64 %107, 3
  %109 = add nuw nsw i64 %108, 1
  %110 = icmp ult i64 %109, 4
  br i1 %110, label %111, label %114

111:                                              ; preds = %209, %114, %101
  %112 = phi %"class.v8::internal::Handle.1240"* [ %92, %114 ], [ %92, %101 ], [ %132, %209 ]
  %113 = phi %"class.v8::internal::Handle.1240"* [ %99, %114 ], [ %99, %101 ], [ %133, %209 ]
  br label %221

114:                                              ; preds = %101
  %115 = sub nsw i64 0, %98
  %116 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %31, i64 %115, i32 0, i32 0
  %117 = bitcast i64** %116 to i8*
  %118 = xor i64 %6, -1
  %119 = getelementptr i8, i8* %117, i64 %118
  %120 = ptrtoint i8* %119 to i64
  %121 = lshr i64 %120, 3
  %122 = add nuw nsw i64 %121, 1
  %123 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %92, i64 %122
  %124 = add nsw i64 %98, %121
  %125 = add nsw i64 %124, 1
  %126 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %1, i64 %125
  %127 = icmp ult %"class.v8::internal::Handle.1240"* %92, %126
  %128 = icmp ult %"class.v8::internal::Handle.1240"* %99, %123
  %129 = and i1 %127, %128
  br i1 %129, label %111, label %130

130:                                              ; preds = %114
  %131 = and i64 %109, 4611686018427387900
  %132 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %92, i64 %131
  %133 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %99, i64 %131
  %134 = add nsw i64 %131, -4
  %135 = lshr exact i64 %134, 2
  %136 = add nuw nsw i64 %135, 1
  %137 = and i64 %136, 3
  %138 = icmp ult i64 %134, 12
  br i1 %138, label %190, label %139

139:                                              ; preds = %130
  %140 = sub nsw i64 %136, %137
  br label %141

141:                                              ; preds = %141, %139
  %142 = phi i64 [ 0, %139 ], [ %187, %141 ]
  %143 = phi i64 [ %140, %139 ], [ %188, %141 ]
  %144 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %92, i64 %142
  %145 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %99, i64 %142
  %146 = bitcast %"class.v8::internal::Handle.1240"* %145 to <2 x i64>*
  %147 = load <2 x i64>, <2 x i64>* %146, align 8, !alias.scope !8
  %148 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %145, i64 2
  %149 = bitcast %"class.v8::internal::Handle.1240"* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 8, !alias.scope !8
  %151 = bitcast %"class.v8::internal::Handle.1240"* %144 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %151, align 8, !alias.scope !11, !noalias !8
  %152 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %144, i64 2
  %153 = bitcast %"class.v8::internal::Handle.1240"* %152 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %153, align 8, !alias.scope !11, !noalias !8
  %154 = or i64 %142, 4
  %155 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %92, i64 %154
  %156 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %99, i64 %154
  %157 = bitcast %"class.v8::internal::Handle.1240"* %156 to <2 x i64>*
  %158 = load <2 x i64>, <2 x i64>* %157, align 8, !alias.scope !8
  %159 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %156, i64 2
  %160 = bitcast %"class.v8::internal::Handle.1240"* %159 to <2 x i64>*
  %161 = load <2 x i64>, <2 x i64>* %160, align 8, !alias.scope !8
  %162 = bitcast %"class.v8::internal::Handle.1240"* %155 to <2 x i64>*
  store <2 x i64> %158, <2 x i64>* %162, align 8, !alias.scope !11, !noalias !8
  %163 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %155, i64 2
  %164 = bitcast %"class.v8::internal::Handle.1240"* %163 to <2 x i64>*
  store <2 x i64> %161, <2 x i64>* %164, align 8, !alias.scope !11, !noalias !8
  %165 = or i64 %142, 8
  %166 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %92, i64 %165
  %167 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %99, i64 %165
  %168 = bitcast %"class.v8::internal::Handle.1240"* %167 to <2 x i64>*
  %169 = load <2 x i64>, <2 x i64>* %168, align 8, !alias.scope !8
  %170 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %167, i64 2
  %171 = bitcast %"class.v8::internal::Handle.1240"* %170 to <2 x i64>*
  %172 = load <2 x i64>, <2 x i64>* %171, align 8, !alias.scope !8
  %173 = bitcast %"class.v8::internal::Handle.1240"* %166 to <2 x i64>*
  store <2 x i64> %169, <2 x i64>* %173, align 8, !alias.scope !11, !noalias !8
  %174 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %166, i64 2
  %175 = bitcast %"class.v8::internal::Handle.1240"* %174 to <2 x i64>*
  store <2 x i64> %172, <2 x i64>* %175, align 8, !alias.scope !11, !noalias !8
  %176 = or i64 %142, 12
  %177 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %92, i64 %176
  %178 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %99, i64 %176
  %179 = bitcast %"class.v8::internal::Handle.1240"* %178 to <2 x i64>*
  %180 = load <2 x i64>, <2 x i64>* %179, align 8, !alias.scope !8
  %181 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %178, i64 2
  %182 = bitcast %"class.v8::internal::Handle.1240"* %181 to <2 x i64>*
  %183 = load <2 x i64>, <2 x i64>* %182, align 8, !alias.scope !8
  %184 = bitcast %"class.v8::internal::Handle.1240"* %177 to <2 x i64>*
  store <2 x i64> %180, <2 x i64>* %184, align 8, !alias.scope !11, !noalias !8
  %185 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %177, i64 2
  %186 = bitcast %"class.v8::internal::Handle.1240"* %185 to <2 x i64>*
  store <2 x i64> %183, <2 x i64>* %186, align 8, !alias.scope !11, !noalias !8
  %187 = add i64 %142, 16
  %188 = add i64 %143, -4
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %190, label %141, !llvm.loop !13

190:                                              ; preds = %141, %130
  %191 = phi i64 [ 0, %130 ], [ %187, %141 ]
  %192 = icmp eq i64 %137, 0
  br i1 %192, label %209, label %193

193:                                              ; preds = %190, %193
  %194 = phi i64 [ %206, %193 ], [ %191, %190 ]
  %195 = phi i64 [ %207, %193 ], [ %137, %190 ]
  %196 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %92, i64 %194
  %197 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %99, i64 %194
  %198 = bitcast %"class.v8::internal::Handle.1240"* %197 to <2 x i64>*
  %199 = load <2 x i64>, <2 x i64>* %198, align 8, !alias.scope !8
  %200 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %197, i64 2
  %201 = bitcast %"class.v8::internal::Handle.1240"* %200 to <2 x i64>*
  %202 = load <2 x i64>, <2 x i64>* %201, align 8, !alias.scope !8
  %203 = bitcast %"class.v8::internal::Handle.1240"* %196 to <2 x i64>*
  store <2 x i64> %199, <2 x i64>* %203, align 8, !alias.scope !11, !noalias !8
  %204 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %196, i64 2
  %205 = bitcast %"class.v8::internal::Handle.1240"* %204 to <2 x i64>*
  store <2 x i64> %202, <2 x i64>* %205, align 8, !alias.scope !11, !noalias !8
  %206 = add i64 %194, 4
  %207 = add i64 %195, -1
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %193, !llvm.loop !15

209:                                              ; preds = %193, %190
  %210 = icmp eq i64 %109, %131
  br i1 %210, label %211, label %111

211:                                              ; preds = %221, %209
  %212 = phi %"class.v8::internal::Handle.1240"* [ %132, %209 ], [ %228, %221 ]
  %213 = ptrtoint %"class.v8::internal::Handle.1240"* %212 to i64
  br label %214

214:                                              ; preds = %211, %90
  %215 = phi i64 [ %213, %211 ], [ %91, %90 ]
  store i64 %215, i64* %36, align 8
  %216 = icmp eq i64 %97, 0
  br i1 %216, label %230, label %217

217:                                              ; preds = %214
  %218 = sub nsw i64 0, %98
  %219 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %92, i64 %218
  %220 = bitcast %"class.v8::internal::Handle.1240"* %219 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %220, i8* align 8 %5, i64 %97, i1 false) #13
  br label %230

221:                                              ; preds = %111, %221
  %222 = phi %"class.v8::internal::Handle.1240"* [ %228, %221 ], [ %112, %111 ]
  %223 = phi %"class.v8::internal::Handle.1240"* [ %227, %221 ], [ %113, %111 ]
  %224 = bitcast %"class.v8::internal::Handle.1240"* %223 to i64*
  %225 = bitcast %"class.v8::internal::Handle.1240"* %222 to i64*
  %226 = load i64, i64* %224, align 8
  store i64 %226, i64* %225, align 8
  %227 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %223, i64 1
  %228 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %222, i64 1
  %229 = icmp ult %"class.v8::internal::Handle.1240"* %227, %31
  br i1 %229, label %221, label %211, !llvm.loop !17

230:                                              ; preds = %214, %217
  %231 = getelementptr inbounds %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator", %"class.v8::internal::ZoneHandleSet<v8::internal::Map>::const_iterator"* %2, i64 0, i32 0
  %232 = load %"class.v8::internal::ZoneHandleSet"*, %"class.v8::internal::ZoneHandleSet"** %231, align 8
  %233 = load i64, i64* %10, align 8
  %234 = inttoptr i64 %94 to %"class.v8::internal::ZoneHandleSet"*
  %235 = icmp eq %"class.v8::internal::ZoneHandleSet"* %232, %234
  %236 = icmp eq i64 %233, %93
  %237 = and i1 %235, %236
  br i1 %237, label %580, label %238

238:                                              ; preds = %230
  %239 = getelementptr inbounds %"class.v8::internal::ZoneHandleSet", %"class.v8::internal::ZoneHandleSet"* %232, i64 0, i32 0
  br i1 %235, label %240, label %271

240:                                              ; preds = %238, %265
  %241 = phi %"class.v8::internal::Handle.1240"* [ %269, %265 ], [ %1, %238 ]
  %242 = phi i64 [ %268, %265 ], [ %233, %238 ]
  %243 = load i64, i64* %239, align 8
  %244 = and i64 %243, 3
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %263, label %246

246:                                              ; preds = %240
  %247 = add i64 %243, -2
  %248 = inttoptr i64 %247 to %"class.v8::internal::ZoneVector.1376"*
  %249 = shl i64 %242, 32
  %250 = ashr exact i64 %249, 32
  %251 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %248, i64 0, i32 0, i32 0, i32 1
  %252 = bitcast i64*** %251 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = inttoptr i64 %247 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = sub i64 %253, %255
  %257 = ashr exact i64 %256, 3
  %258 = icmp ugt i64 %257, %250
  br i1 %258, label %259, label %292

259:                                              ; preds = %246
  %260 = inttoptr i64 %255 to i64**
  %261 = getelementptr inbounds i64*, i64** %260, i64 %250
  %262 = load i64*, i64** %261, align 8
  br label %265

263:                                              ; preds = %240
  %264 = inttoptr i64 %243 to i64*
  br label %265

265:                                              ; preds = %263, %259
  %266 = phi i64* [ %264, %263 ], [ %262, %259 ]
  %267 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %241, i64 0, i32 0, i32 0
  store i64* %266, i64** %267, align 8
  %268 = add i64 %242, 1
  %269 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %241, i64 1
  %270 = icmp eq i64 %268, %93
  br i1 %270, label %580, label %240

271:                                              ; preds = %238, %299
  %272 = phi %"class.v8::internal::Handle.1240"* [ %303, %299 ], [ %1, %238 ]
  %273 = phi i64 [ %302, %299 ], [ %233, %238 ]
  %274 = load i64, i64* %239, align 8
  %275 = and i64 %274, 3
  %276 = icmp eq i64 %275, 0
  br i1 %276, label %277, label %279

277:                                              ; preds = %271
  %278 = inttoptr i64 %274 to i64*
  br label %299

279:                                              ; preds = %271
  %280 = add i64 %274, -2
  %281 = inttoptr i64 %280 to %"class.v8::internal::ZoneVector.1376"*
  %282 = shl i64 %273, 32
  %283 = ashr exact i64 %282, 32
  %284 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %281, i64 0, i32 0, i32 0, i32 1
  %285 = bitcast i64*** %284 to i64*
  %286 = load i64, i64* %285, align 8
  %287 = inttoptr i64 %280 to i64*
  %288 = load i64, i64* %287, align 8
  %289 = sub i64 %286, %288
  %290 = ashr exact i64 %289, 3
  %291 = icmp ugt i64 %290, %283
  br i1 %291, label %295, label %292

292:                                              ; preds = %279, %246
  %293 = phi i64 [ %247, %246 ], [ %280, %279 ]
  %294 = inttoptr i64 %293 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %294) #14
  unreachable

295:                                              ; preds = %279
  %296 = inttoptr i64 %288 to i64**
  %297 = getelementptr inbounds i64*, i64** %296, i64 %283
  %298 = load i64*, i64** %297, align 8
  br label %299

299:                                              ; preds = %295, %277
  %300 = phi i64* [ %278, %277 ], [ %298, %295 ]
  %301 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %272, i64 0, i32 0, i32 0
  store i64* %300, i64** %301, align 8
  %302 = add i64 %273, 1
  %303 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %272, i64 1
  br label %271

304:                                              ; preds = %26
  %305 = bitcast %"class.std::__1::vector.1238"* %0 to i64*
  %306 = load i64, i64* %305, align 8
  %307 = sub i64 %32, %306
  %308 = ashr exact i64 %307, 3
  %309 = add i64 %308, %24
  %310 = icmp ugt i64 %309, 2305843009213693951
  br i1 %310, label %311, label %313

311:                                              ; preds = %304
  %312 = bitcast %"class.std::__1::vector.1238"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %312) #14
  unreachable

313:                                              ; preds = %304
  %314 = sub i64 %29, %306
  %315 = ashr exact i64 %314, 3
  %316 = icmp ult i64 %315, 1152921504606846975
  br i1 %316, label %320, label %317

317:                                              ; preds = %313
  %318 = sub i64 %6, %306
  %319 = ashr exact i64 %318, 3
  br label %330

320:                                              ; preds = %313
  %321 = ashr exact i64 %314, 2
  %322 = icmp ult i64 %321, %309
  %323 = select i1 %322, i64 %309, i64 %321
  %324 = sub i64 %6, %306
  %325 = ashr exact i64 %324, 3
  %326 = icmp eq i64 %323, 0
  br i1 %326, label %336, label %327

327:                                              ; preds = %320
  %328 = icmp ugt i64 %323, 2305843009213693951
  br i1 %328, label %329, label %330

329:                                              ; preds = %327
  tail call void @abort() #14
  unreachable

330:                                              ; preds = %317, %327
  %331 = phi i64 [ 2305843009213693951, %317 ], [ %323, %327 ]
  %332 = phi i64 [ %319, %317 ], [ %325, %327 ]
  %333 = shl i64 %331, 3
  %334 = tail call i8* @_Znwm(i64 %333) #15
  %335 = bitcast i8* %334 to %"class.v8::internal::Handle.1240"*
  br label %336

336:                                              ; preds = %330, %320
  %337 = phi i64 [ %332, %330 ], [ %325, %320 ]
  %338 = phi i64 [ %331, %330 ], [ 0, %320 ]
  %339 = phi %"class.v8::internal::Handle.1240"* [ %335, %330 ], [ null, %320 ]
  %340 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %339, i64 %337
  %341 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %339, i64 %338
  %342 = ptrtoint %"class.v8::internal::Handle.1240"* %341 to i64
  %343 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %340, i64 %24
  %344 = getelementptr inbounds %"class.v8::internal::ZoneHandleSet", %"class.v8::internal::ZoneHandleSet"* %16, i64 0, i32 0
  br label %345

345:                                              ; preds = %372, %336
  %346 = phi i64 [ %378, %372 ], [ %11, %336 ]
  %347 = phi %"class.v8::internal::Handle.1240"* [ %376, %372 ], [ %340, %336 ]
  %348 = load i64, i64* %344, align 8
  %349 = and i64 %348, 3
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %351, label %353

351:                                              ; preds = %345
  %352 = inttoptr i64 %348 to i64*
  br label %372

353:                                              ; preds = %345
  %354 = add i64 %348, -2
  %355 = inttoptr i64 %354 to %"class.v8::internal::ZoneVector.1376"*
  %356 = shl i64 %346, 32
  %357 = ashr exact i64 %356, 32
  %358 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %355, i64 0, i32 0, i32 0, i32 1
  %359 = bitcast i64*** %358 to i64*
  %360 = load i64, i64* %359, align 8
  %361 = inttoptr i64 %354 to i64*
  %362 = load i64, i64* %361, align 8
  %363 = sub i64 %360, %362
  %364 = ashr exact i64 %363, 3
  %365 = icmp ugt i64 %364, %357
  br i1 %365, label %368, label %366

366:                                              ; preds = %353
  %367 = inttoptr i64 %354 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %367) #14
  unreachable

368:                                              ; preds = %353
  %369 = inttoptr i64 %362 to i64**
  %370 = getelementptr inbounds i64*, i64** %369, i64 %357
  %371 = load i64*, i64** %370, align 8
  br label %372

372:                                              ; preds = %368, %351
  %373 = phi i64* [ %352, %351 ], [ %371, %368 ]
  %374 = ptrtoint i64* %373 to i64
  %375 = bitcast %"class.v8::internal::Handle.1240"* %347 to i64*
  store i64 %374, i64* %375, align 8
  %376 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %347, i64 1
  %377 = icmp eq %"class.v8::internal::Handle.1240"* %343, %376
  %378 = add i64 %346, 1
  br i1 %377, label %379, label %345

379:                                              ; preds = %372
  %380 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %7, align 8
  %381 = ptrtoint %"class.v8::internal::Handle.1240"* %380 to i64
  %382 = sub i64 %6, %381
  %383 = ashr exact i64 %382, 3
  %384 = sub nsw i64 0, %383
  %385 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %340, i64 %384
  %386 = ptrtoint %"class.v8::internal::Handle.1240"* %385 to i64
  %387 = icmp sgt i64 %382, 0
  br i1 %387, label %388, label %391

388:                                              ; preds = %379
  %389 = bitcast %"class.v8::internal::Handle.1240"* %385 to i8*
  %390 = bitcast %"class.v8::internal::Handle.1240"* %380 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %389, i8* align 8 %390, i64 %382, i1 false) #13
  br label %391

391:                                              ; preds = %388, %379
  %392 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %30, align 8
  %393 = icmp eq %"class.v8::internal::Handle.1240"* %392, %1
  br i1 %393, label %573, label %394

394:                                              ; preds = %391
  %395 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %392, i64 -1, i32 0, i32 0
  %396 = ptrtoint i64** %395 to i64
  %397 = sub i64 %396, %6
  %398 = lshr i64 %397, 3
  %399 = add nuw nsw i64 %398, 1
  %400 = icmp ult i64 %399, 4
  br i1 %400, label %498, label %401

401:                                              ; preds = %394
  %402 = add i64 %337, %15
  %403 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %392, i64 -1, i32 0, i32 0
  %404 = ptrtoint i64** %403 to i64
  %405 = sub i64 %404, %6
  %406 = lshr i64 %405, 3
  %407 = add i64 %402, %406
  %408 = add i64 %407, 1
  %409 = sub i64 %408, %11
  %410 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %339, i64 %409
  %411 = add nuw nsw i64 %406, 1
  %412 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %1, i64 %411
  %413 = icmp ult %"class.v8::internal::Handle.1240"* %343, %412
  %414 = icmp ugt %"class.v8::internal::Handle.1240"* %410, %1
  %415 = and i1 %413, %414
  br i1 %415, label %498, label %416

416:                                              ; preds = %401
  %417 = and i64 %399, 4611686018427387900
  %418 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %343, i64 %417
  %419 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %343, i64 %417
  %420 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %1, i64 %417
  %421 = add nsw i64 %417, -4
  %422 = lshr exact i64 %421, 2
  %423 = add nuw nsw i64 %422, 1
  %424 = and i64 %423, 3
  %425 = icmp ult i64 %421, 12
  br i1 %425, label %477, label %426

426:                                              ; preds = %416
  %427 = sub nsw i64 %423, %424
  br label %428

428:                                              ; preds = %428, %426
  %429 = phi i64 [ 0, %426 ], [ %474, %428 ]
  %430 = phi i64 [ %427, %426 ], [ %475, %428 ]
  %431 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %343, i64 %429
  %432 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %1, i64 %429
  %433 = bitcast %"class.v8::internal::Handle.1240"* %432 to <2 x i64>*
  %434 = load <2 x i64>, <2 x i64>* %433, align 8, !alias.scope !18
  %435 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %432, i64 2
  %436 = bitcast %"class.v8::internal::Handle.1240"* %435 to <2 x i64>*
  %437 = load <2 x i64>, <2 x i64>* %436, align 8, !alias.scope !18
  %438 = bitcast %"class.v8::internal::Handle.1240"* %431 to <2 x i64>*
  store <2 x i64> %434, <2 x i64>* %438, align 8, !alias.scope !21, !noalias !18
  %439 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %431, i64 2
  %440 = bitcast %"class.v8::internal::Handle.1240"* %439 to <2 x i64>*
  store <2 x i64> %437, <2 x i64>* %440, align 8, !alias.scope !21, !noalias !18
  %441 = or i64 %429, 4
  %442 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %343, i64 %441
  %443 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %1, i64 %441
  %444 = bitcast %"class.v8::internal::Handle.1240"* %443 to <2 x i64>*
  %445 = load <2 x i64>, <2 x i64>* %444, align 8, !alias.scope !18
  %446 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %443, i64 2
  %447 = bitcast %"class.v8::internal::Handle.1240"* %446 to <2 x i64>*
  %448 = load <2 x i64>, <2 x i64>* %447, align 8, !alias.scope !18
  %449 = bitcast %"class.v8::internal::Handle.1240"* %442 to <2 x i64>*
  store <2 x i64> %445, <2 x i64>* %449, align 8, !alias.scope !21, !noalias !18
  %450 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %442, i64 2
  %451 = bitcast %"class.v8::internal::Handle.1240"* %450 to <2 x i64>*
  store <2 x i64> %448, <2 x i64>* %451, align 8, !alias.scope !21, !noalias !18
  %452 = or i64 %429, 8
  %453 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %343, i64 %452
  %454 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %1, i64 %452
  %455 = bitcast %"class.v8::internal::Handle.1240"* %454 to <2 x i64>*
  %456 = load <2 x i64>, <2 x i64>* %455, align 8, !alias.scope !18
  %457 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %454, i64 2
  %458 = bitcast %"class.v8::internal::Handle.1240"* %457 to <2 x i64>*
  %459 = load <2 x i64>, <2 x i64>* %458, align 8, !alias.scope !18
  %460 = bitcast %"class.v8::internal::Handle.1240"* %453 to <2 x i64>*
  store <2 x i64> %456, <2 x i64>* %460, align 8, !alias.scope !21, !noalias !18
  %461 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %453, i64 2
  %462 = bitcast %"class.v8::internal::Handle.1240"* %461 to <2 x i64>*
  store <2 x i64> %459, <2 x i64>* %462, align 8, !alias.scope !21, !noalias !18
  %463 = or i64 %429, 12
  %464 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %343, i64 %463
  %465 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %1, i64 %463
  %466 = bitcast %"class.v8::internal::Handle.1240"* %465 to <2 x i64>*
  %467 = load <2 x i64>, <2 x i64>* %466, align 8, !alias.scope !18
  %468 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %465, i64 2
  %469 = bitcast %"class.v8::internal::Handle.1240"* %468 to <2 x i64>*
  %470 = load <2 x i64>, <2 x i64>* %469, align 8, !alias.scope !18
  %471 = bitcast %"class.v8::internal::Handle.1240"* %464 to <2 x i64>*
  store <2 x i64> %467, <2 x i64>* %471, align 8, !alias.scope !21, !noalias !18
  %472 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %464, i64 2
  %473 = bitcast %"class.v8::internal::Handle.1240"* %472 to <2 x i64>*
  store <2 x i64> %470, <2 x i64>* %473, align 8, !alias.scope !21, !noalias !18
  %474 = add i64 %429, 16
  %475 = add i64 %430, -4
  %476 = icmp eq i64 %475, 0
  br i1 %476, label %477, label %428, !llvm.loop !23

477:                                              ; preds = %428, %416
  %478 = phi i64 [ 0, %416 ], [ %474, %428 ]
  %479 = icmp eq i64 %424, 0
  br i1 %479, label %496, label %480

480:                                              ; preds = %477, %480
  %481 = phi i64 [ %493, %480 ], [ %478, %477 ]
  %482 = phi i64 [ %494, %480 ], [ %424, %477 ]
  %483 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %343, i64 %481
  %484 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %1, i64 %481
  %485 = bitcast %"class.v8::internal::Handle.1240"* %484 to <2 x i64>*
  %486 = load <2 x i64>, <2 x i64>* %485, align 8, !alias.scope !18
  %487 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %484, i64 2
  %488 = bitcast %"class.v8::internal::Handle.1240"* %487 to <2 x i64>*
  %489 = load <2 x i64>, <2 x i64>* %488, align 8, !alias.scope !18
  %490 = bitcast %"class.v8::internal::Handle.1240"* %483 to <2 x i64>*
  store <2 x i64> %486, <2 x i64>* %490, align 8, !alias.scope !21, !noalias !18
  %491 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %483, i64 2
  %492 = bitcast %"class.v8::internal::Handle.1240"* %491 to <2 x i64>*
  store <2 x i64> %489, <2 x i64>* %492, align 8, !alias.scope !21, !noalias !18
  %493 = add i64 %481, 4
  %494 = add i64 %482, -1
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %496, label %480, !llvm.loop !24

496:                                              ; preds = %480, %477
  %497 = icmp eq i64 %399, %417
  br i1 %497, label %573, label %498

498:                                              ; preds = %496, %401, %394
  %499 = phi %"class.v8::internal::Handle.1240"* [ %343, %401 ], [ %343, %394 ], [ %418, %496 ]
  %500 = phi %"class.v8::internal::Handle.1240"* [ %343, %401 ], [ %343, %394 ], [ %419, %496 ]
  %501 = phi %"class.v8::internal::Handle.1240"* [ %1, %401 ], [ %1, %394 ], [ %420, %496 ]
  %502 = ptrtoint %"class.v8::internal::Handle.1240"* %501 to i64
  %503 = getelementptr %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %392, i64 -1, i32 0, i32 0
  %504 = ptrtoint i64** %503 to i64
  %505 = sub i64 %504, %502
  %506 = lshr i64 %505, 3
  %507 = add nuw nsw i64 %506, 1
  %508 = and i64 %507, 7
  %509 = icmp eq i64 %508, 0
  br i1 %509, label %522, label %510

510:                                              ; preds = %498, %510
  %511 = phi %"class.v8::internal::Handle.1240"* [ %519, %510 ], [ %499, %498 ]
  %512 = phi %"class.v8::internal::Handle.1240"* [ %519, %510 ], [ %500, %498 ]
  %513 = phi %"class.v8::internal::Handle.1240"* [ %518, %510 ], [ %501, %498 ]
  %514 = phi i64 [ %520, %510 ], [ %508, %498 ]
  %515 = bitcast %"class.v8::internal::Handle.1240"* %512 to i64*
  %516 = bitcast %"class.v8::internal::Handle.1240"* %513 to i64*
  %517 = load i64, i64* %516, align 8
  store i64 %517, i64* %515, align 8
  %518 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %513, i64 1
  %519 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %511, i64 1
  %520 = add i64 %514, -1
  %521 = icmp eq i64 %520, 0
  br i1 %521, label %522, label %510, !llvm.loop !25

522:                                              ; preds = %510, %498
  %523 = phi %"class.v8::internal::Handle.1240"* [ undef, %498 ], [ %519, %510 ]
  %524 = phi %"class.v8::internal::Handle.1240"* [ %499, %498 ], [ %519, %510 ]
  %525 = phi %"class.v8::internal::Handle.1240"* [ %500, %498 ], [ %519, %510 ]
  %526 = phi %"class.v8::internal::Handle.1240"* [ %501, %498 ], [ %518, %510 ]
  %527 = icmp ult i64 %505, 56
  br i1 %527, label %573, label %528

528:                                              ; preds = %522, %528
  %529 = phi %"class.v8::internal::Handle.1240"* [ %571, %528 ], [ %524, %522 ]
  %530 = phi %"class.v8::internal::Handle.1240"* [ %571, %528 ], [ %525, %522 ]
  %531 = phi %"class.v8::internal::Handle.1240"* [ %570, %528 ], [ %526, %522 ]
  %532 = bitcast %"class.v8::internal::Handle.1240"* %530 to i64*
  %533 = bitcast %"class.v8::internal::Handle.1240"* %531 to i64*
  %534 = load i64, i64* %533, align 8
  store i64 %534, i64* %532, align 8
  %535 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %531, i64 1
  %536 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %529, i64 1
  %537 = bitcast %"class.v8::internal::Handle.1240"* %536 to i64*
  %538 = bitcast %"class.v8::internal::Handle.1240"* %535 to i64*
  %539 = load i64, i64* %538, align 8
  store i64 %539, i64* %537, align 8
  %540 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %531, i64 2
  %541 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %529, i64 2
  %542 = bitcast %"class.v8::internal::Handle.1240"* %541 to i64*
  %543 = bitcast %"class.v8::internal::Handle.1240"* %540 to i64*
  %544 = load i64, i64* %543, align 8
  store i64 %544, i64* %542, align 8
  %545 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %531, i64 3
  %546 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %529, i64 3
  %547 = bitcast %"class.v8::internal::Handle.1240"* %546 to i64*
  %548 = bitcast %"class.v8::internal::Handle.1240"* %545 to i64*
  %549 = load i64, i64* %548, align 8
  store i64 %549, i64* %547, align 8
  %550 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %531, i64 4
  %551 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %529, i64 4
  %552 = bitcast %"class.v8::internal::Handle.1240"* %551 to i64*
  %553 = bitcast %"class.v8::internal::Handle.1240"* %550 to i64*
  %554 = load i64, i64* %553, align 8
  store i64 %554, i64* %552, align 8
  %555 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %531, i64 5
  %556 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %529, i64 5
  %557 = bitcast %"class.v8::internal::Handle.1240"* %556 to i64*
  %558 = bitcast %"class.v8::internal::Handle.1240"* %555 to i64*
  %559 = load i64, i64* %558, align 8
  store i64 %559, i64* %557, align 8
  %560 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %531, i64 6
  %561 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %529, i64 6
  %562 = bitcast %"class.v8::internal::Handle.1240"* %561 to i64*
  %563 = bitcast %"class.v8::internal::Handle.1240"* %560 to i64*
  %564 = load i64, i64* %563, align 8
  store i64 %564, i64* %562, align 8
  %565 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %531, i64 7
  %566 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %529, i64 7
  %567 = bitcast %"class.v8::internal::Handle.1240"* %566 to i64*
  %568 = bitcast %"class.v8::internal::Handle.1240"* %565 to i64*
  %569 = load i64, i64* %568, align 8
  store i64 %569, i64* %567, align 8
  %570 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %531, i64 8
  %571 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %529, i64 8
  %572 = icmp eq %"class.v8::internal::Handle.1240"* %570, %392
  br i1 %572, label %573, label %528, !llvm.loop !26

573:                                              ; preds = %522, %528, %496, %391
  %574 = phi %"class.v8::internal::Handle.1240"* [ %343, %391 ], [ %418, %496 ], [ %523, %522 ], [ %571, %528 ]
  %575 = ptrtoint %"class.v8::internal::Handle.1240"* %574 to i64
  %576 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %7, align 8
  store i64 %386, i64* %305, align 8
  store i64 %575, i64* %36, align 8
  store i64 %342, i64* %28, align 8
  %577 = icmp eq %"class.v8::internal::Handle.1240"* %576, null
  br i1 %577, label %580, label %578

578:                                              ; preds = %573
  %579 = bitcast %"class.v8::internal::Handle.1240"* %576 to i8*
  tail call void @_ZdlPv(i8* %579) #15
  br label %580

580:                                              ; preds = %265, %4, %578, %573, %86, %230, %23
  %581 = phi %"class.v8::internal::Handle.1240"* [ %1, %23 ], [ %1, %230 ], [ %1, %86 ], [ %340, %573 ], [ %340, %578 ], [ %1, %4 ], [ %1, %265 ]
  ret %"class.v8::internal::Handle.1240"* %581
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler12MapInferenceD2Ev(%"class.v8::internal::compiler::MapInference"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 2
  br i1 %4, label %5, label %6, !prof !27

5:                                                ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0)) #14
  unreachable

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 0
  %8 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %7, align 8
  %9 = icmp eq %"class.v8::internal::Handle.1240"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = ptrtoint %"class.v8::internal::Handle.1240"* %8 to i64
  %12 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %13 = bitcast %"class.v8::internal::Handle.1240"** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = bitcast %"class.v8::internal::Handle.1240"* %8 to i8*
  tail call void @_ZdlPv(i8* %14) #15
  br label %15

15:                                               ; preds = %6, %10
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal8compiler12MapInference4SafeEv(%"class.v8::internal::compiler::MapInference"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp ne i32 %3, 2
  ret i1 %4
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler12MapInference24SetNeedGuardIfUnreliableEv(%"class.v8::internal::compiler::MapInference"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %5 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %4, align 8
  %6 = icmp eq %"class.v8::internal::Handle.1240"* %3, %5
  br i1 %6, label %7, label %8, !prof !27

7:                                                ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0)) #14
  unreachable

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %13

12:                                               ; preds = %8
  store i32 2, i32* %9, align 8
  br label %13

13:                                               ; preds = %12, %8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal8compiler12MapInference8HaveMapsEv(%"class.v8::internal::compiler::MapInference"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %5 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %4, align 8
  %6 = icmp ne %"class.v8::internal::Handle.1240"* %3, %5
  ret i1 %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal8compiler12MapInference10SetGuardedEv(%"class.v8::internal::compiler::MapInference"* nocapture) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 3
  store i32 0, i32* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal8compiler12MapInference31AllOfInstanceTypesAreJSReceiverEv(%"class.v8::internal::compiler::MapInference"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::function", align 8
  %3 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %2, i64 0, i32 0, i32 1, i32 0
  %4 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %2, i64 0, i32 0, i32 2
  store i1 (%"union.std::__1::__function::__policy_storage"*, i16)* @_ZNSt3__110__function16__policy_invokerIFbN2v88internal12InstanceTypeEEE11__call_implINS0_20__default_alloc_funcIPS5_S5_EEEEbPKNS0_16__policy_storageES4_, i1 (%"union.std::__1::__function::__policy_storage"*, i16)** %3, align 8
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIPFbN2v88internal12InstanceTypeEES7_EEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_, %"struct.std::__1::__function::__policy"** %4, align 8
  %5 = bitcast %"class.std::__1::function"* %2 to i64*
  store i64 ptrtoint (i1 (i16)* @_ZN2v88internal19InstanceTypeChecker12IsJSReceiverENS0_12InstanceTypeE to i64), i64* %5, align 8
  %6 = call zeroext i1 @_ZNK2v88internal8compiler12MapInference24AllOfInstanceTypesUnsafeENSt3__18functionIFbNS0_12InstanceTypeEEEE(%"class.v8::internal::compiler::MapInference"* %0, %"class.std::__1::function"* nonnull %2)
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal8compiler12MapInference24AllOfInstanceTypesUnsafeENSt3__18functionIFbNS0_12InstanceTypeEEEE(%"class.v8::internal::compiler::MapInference"*, %"class.std::__1::function"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::base::Optional.1390", align 8
  %4 = alloca <2 x i64>, align 16
  %5 = bitcast <2 x i64>* %4 to %"class.v8::internal::compiler::MapRef"*
  %6 = alloca %class.anon.1249, align 8
  %7 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 0
  %8 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %10 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %9, align 8
  %11 = icmp eq %"class.v8::internal::Handle.1240"* %8, %10
  br i1 %11, label %12, label %13, !prof !27

12:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0)) #14
  unreachable

13:                                               ; preds = %2
  %14 = ptrtoint %"class.v8::internal::compiler::MapInference"* %0 to i64
  %15 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 0, i32 1
  %18 = bitcast [8 x i8]* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 8
  %20 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 2
  %21 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %20, align 8
  %22 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %21, i64 0, i32 0
  %23 = load i8* (i8*)*, i8* (i8*)** %22, align 8
  %24 = icmp eq i8* (i8*)* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %13
  %26 = tail call i8* %23(i8* %16) #13
  %27 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %7, align 8
  %28 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %9, align 8
  br label %29

29:                                               ; preds = %13, %25
  %30 = phi %"class.v8::internal::Handle.1240"* [ %10, %13 ], [ %28, %25 ]
  %31 = phi %"class.v8::internal::Handle.1240"* [ %8, %13 ], [ %27, %25 ]
  %32 = phi i8* [ %16, %13 ], [ %26, %25 ]
  %33 = bitcast %class.anon.1249* %6 to i64*
  store i64 %14, i64* %33, align 8
  %34 = getelementptr inbounds %class.anon.1249, %class.anon.1249* %6, i64 0, i32 1, i32 0, i32 0, i32 0
  store i8* %32, i8** %34, align 8
  %35 = getelementptr inbounds %class.anon.1249, %class.anon.1249* %6, i64 0, i32 1, i32 0, i32 0, i32 1
  %36 = bitcast [8 x i8]* %35 to <2 x i64>*
  store <2 x i64> %19, <2 x i64>* %36, align 8
  %37 = getelementptr inbounds %class.anon.1249, %class.anon.1249* %6, i64 0, i32 1, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* %21, %"struct.std::__1::__function::__policy"** %37, align 8
  %38 = load i8* (i8*)*, i8* (i8*)** %22, align 8
  %39 = icmp eq i8* (i8*)* %38, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %29
  %41 = tail call i8* %38(i8* %32) #13
  store i8* %41, i8** %34, align 8
  br label %42

42:                                               ; preds = %29, %40
  %43 = icmp eq %"class.v8::internal::Handle.1240"* %31, %30
  br i1 %43, label %80, label %44

44:                                               ; preds = %42
  %45 = getelementptr inbounds %class.anon.1249, %class.anon.1249* %6, i64 0, i32 0
  %46 = bitcast <2 x i64>* %4 to i8*
  %47 = getelementptr inbounds %"class.v8::base::Optional.1390", %"class.v8::base::Optional.1390"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %48 = getelementptr inbounds %"class.v8::base::Optional.1390", %"class.v8::base::Optional.1390"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %49 = getelementptr inbounds %class.anon.1249, %class.anon.1249* %6, i64 0, i32 1, i32 0, i32 1, i32 0
  %50 = getelementptr inbounds %class.anon.1249, %class.anon.1249* %6, i64 0, i32 1, i32 0, i32 0
  %51 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %31, i64 0, i32 0, i32 0
  %52 = load i64*, i64** %51, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #13
  %53 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 0
  %54 = load %"class.v8::internal::compiler::JSHeapBroker"*, %"class.v8::internal::compiler::JSHeapBroker"** %53, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #13
  call void @_ZN2v88internal8compiler10TryMakeRefINS0_3MapEvEENS_4base8OptionalINS1_10ref_traitsIT_E8ref_typeEEEPNS1_12JSHeapBrokerENS0_6HandleIS7_EENS4_5FlagsINS1_19GetOrCreateDataFlagEiEE(%"class.v8::base::Optional.1390"* nonnull sret %3, %"class.v8::internal::compiler::JSHeapBroker"* %54, i64* %52, i32 1) #13
  %55 = load i8, i8* %47, align 8, !range !28
  %56 = icmp eq i8 %55, 1
  br i1 %56, label %57, label %69, !prof !29

57:                                               ; preds = %44
  %58 = bitcast %"class.v8::internal::compiler::ObjectData"** %48 to <2 x i64>*
  br label %70

59:                                               ; preds = %70
  %60 = icmp eq %"class.v8::internal::Handle.1240"* %76, %30
  br i1 %60, label %77, label %61

61:                                               ; preds = %59
  %62 = load %"class.v8::internal::compiler::MapInference"*, %"class.v8::internal::compiler::MapInference"** %45, align 8
  %63 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %76, i64 0, i32 0, i32 0
  %64 = load i64*, i64** %63, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #13
  %65 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %62, i64 0, i32 0
  %66 = load %"class.v8::internal::compiler::JSHeapBroker"*, %"class.v8::internal::compiler::JSHeapBroker"** %65, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #13
  call void @_ZN2v88internal8compiler10TryMakeRefINS0_3MapEvEENS_4base8OptionalINS1_10ref_traitsIT_E8ref_typeEEEPNS1_12JSHeapBrokerENS0_6HandleIS7_EENS4_5FlagsINS1_19GetOrCreateDataFlagEiEE(%"class.v8::base::Optional.1390"* nonnull sret %3, %"class.v8::internal::compiler::JSHeapBroker"* %66, i64* %64, i32 1) #13
  %67 = load i8, i8* %47, align 8, !range !28
  %68 = icmp eq i8 %67, 1
  br i1 %68, label %70, label %69, !prof !29

69:                                               ; preds = %61, %44
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i64 0, i64 0)) #14
  unreachable

70:                                               ; preds = %57, %61
  %71 = phi %"class.v8::internal::Handle.1240"* [ %76, %61 ], [ %31, %57 ]
  %72 = load <2 x i64>, <2 x i64>* %58, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %47) #13
  store <2 x i64> %72, <2 x i64>* %4, align 16
  %73 = call zeroext i16 @_ZNK2v88internal8compiler6MapRef13instance_typeEv(%"class.v8::internal::compiler::MapRef"* nonnull %5) #13
  %74 = load i1 (%"union.std::__1::__function::__policy_storage"*, i16)*, i1 (%"union.std::__1::__function::__policy_storage"*, i16)** %49, align 8
  %75 = call zeroext i1 %74(%"union.std::__1::__function::__policy_storage"* %50, i16 zeroext %73) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #13
  %76 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %71, i64 1
  br i1 %75, label %59, label %77

77:                                               ; preds = %70, %59
  %78 = phi i1 [ true, %59 ], [ false, %70 ]
  %79 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %37, align 8
  br label %80

80:                                               ; preds = %77, %42
  %81 = phi %"struct.std::__1::__function::__policy"* [ %21, %42 ], [ %79, %77 ]
  %82 = phi i1 [ true, %42 ], [ %78, %77 ]
  %83 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %81, i64 0, i32 1
  %84 = load void (i8*)*, void (i8*)** %83, align 8
  %85 = icmp eq void (i8*)* %84, null
  br i1 %85, label %88, label %86

86:                                               ; preds = %80
  %87 = load i8*, i8** %34, align 8
  call void %84(i8* %87) #13
  br label %88

88:                                               ; preds = %80, %86
  %89 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %21, i64 0, i32 1
  %90 = load void (i8*)*, void (i8*)** %89, align 8
  %91 = icmp eq void (i8*)* %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %88
  call void %90(i8* %32) #13
  br label %93

93:                                               ; preds = %88, %92
  ret i1 %82
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal19InstanceTypeChecker12IsJSReceiverENS0_12InstanceTypeE(i16 zeroext) #6 comdat {
  %2 = icmp ugt i16 %0, 185
  ret i1 %2
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal8compiler12MapInference21AllOfInstanceTypesAreENS0_12InstanceTypeE(%"class.v8::internal::compiler::MapInference"*, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::function", align 8
  %4 = icmp ult i16 %1, 64
  br i1 %4, label %5, label %6, !prof !27

5:                                                ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0)) #14
  unreachable

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 2
  store i1 (%"union.std::__1::__function::__policy_storage"*, i16)* @"_ZNSt3__110__function16__policy_invokerIFbN2v88internal12InstanceTypeEEE11__call_implINS0_20__default_alloc_funcIZNKS3_8compiler12MapInference21AllOfInstanceTypesAreES4_E3$_0S5_EEEEbPKNS0_16__policy_storageES4_", i1 (%"union.std::__1::__function::__policy_storage"*, i16)** %7, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZNK2v88internal8compiler12MapInference21AllOfInstanceTypesAreENS5_12InstanceTypeEE3$_0FbS8_EEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %8, align 8
  %9 = bitcast %"class.std::__1::function"* %3 to i16*
  store i16 %1, i16* %9, align 8
  %10 = call zeroext i1 @_ZNK2v88internal8compiler12MapInference24AllOfInstanceTypesUnsafeENSt3__18functionIFbNS0_12InstanceTypeEEEE(%"class.v8::internal::compiler::MapInference"* %0, %"class.std::__1::function"* nonnull %3)
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal8compiler12MapInference21AnyOfInstanceTypesAreENS0_12InstanceTypeE(%"class.v8::internal::compiler::MapInference"*, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::function", align 8
  %4 = icmp ult i16 %1, 64
  br i1 %4, label %5, label %6, !prof !27

5:                                                ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0)) #14
  unreachable

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 2
  store i1 (%"union.std::__1::__function::__policy_storage"*, i16)* @"_ZNSt3__110__function16__policy_invokerIFbN2v88internal12InstanceTypeEEE11__call_implINS0_20__default_alloc_funcIZNKS3_8compiler12MapInference21AnyOfInstanceTypesAreES4_E3$_1S5_EEEEbPKNS0_16__policy_storageES4_", i1 (%"union.std::__1::__function::__policy_storage"*, i16)** %7, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZNK2v88internal8compiler12MapInference21AnyOfInstanceTypesAreENS5_12InstanceTypeEE3$_1FbS8_EEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %8, align 8
  %9 = bitcast %"class.std::__1::function"* %3 to i16*
  store i16 %1, i16* %9, align 8
  %10 = call zeroext i1 @_ZNK2v88internal8compiler12MapInference24AnyOfInstanceTypesUnsafeENSt3__18functionIFbNS0_12InstanceTypeEEEE(%"class.v8::internal::compiler::MapInference"* %0, %"class.std::__1::function"* nonnull %3)
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal8compiler12MapInference24AnyOfInstanceTypesUnsafeENSt3__18functionIFbNS0_12InstanceTypeEEEE(%"class.v8::internal::compiler::MapInference"*, %"class.std::__1::function"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::base::Optional.1390", align 8
  %4 = alloca <2 x i64>, align 16
  %5 = bitcast <2 x i64>* %4 to %"class.v8::internal::compiler::MapRef"*
  %6 = alloca %class.anon.1250, align 8
  %7 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 0
  %8 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %10 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %9, align 8
  %11 = icmp eq %"class.v8::internal::Handle.1240"* %8, %10
  br i1 %11, label %12, label %13, !prof !27

12:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0)) #14
  unreachable

13:                                               ; preds = %2
  %14 = ptrtoint %"class.v8::internal::compiler::MapInference"* %0 to i64
  %15 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 0, i32 1
  %18 = bitcast [8 x i8]* %17 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 8
  %20 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 2
  %21 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %20, align 8
  %22 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %21, i64 0, i32 0
  %23 = load i8* (i8*)*, i8* (i8*)** %22, align 8
  %24 = icmp eq i8* (i8*)* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %13
  %26 = tail call i8* %23(i8* %16) #13
  %27 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %7, align 8
  %28 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %9, align 8
  br label %29

29:                                               ; preds = %13, %25
  %30 = phi %"class.v8::internal::Handle.1240"* [ %10, %13 ], [ %28, %25 ]
  %31 = phi %"class.v8::internal::Handle.1240"* [ %8, %13 ], [ %27, %25 ]
  %32 = phi i8* [ %16, %13 ], [ %26, %25 ]
  %33 = bitcast %class.anon.1250* %6 to i64*
  store i64 %14, i64* %33, align 8
  %34 = getelementptr inbounds %class.anon.1250, %class.anon.1250* %6, i64 0, i32 1, i32 0, i32 0, i32 0
  store i8* %32, i8** %34, align 8
  %35 = getelementptr inbounds %class.anon.1250, %class.anon.1250* %6, i64 0, i32 1, i32 0, i32 0, i32 1
  %36 = bitcast [8 x i8]* %35 to <2 x i64>*
  store <2 x i64> %19, <2 x i64>* %36, align 8
  %37 = getelementptr inbounds %class.anon.1250, %class.anon.1250* %6, i64 0, i32 1, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* %21, %"struct.std::__1::__function::__policy"** %37, align 8
  %38 = load i8* (i8*)*, i8* (i8*)** %22, align 8
  %39 = icmp eq i8* (i8*)* %38, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %29
  %41 = tail call i8* %38(i8* %32) #13
  store i8* %41, i8** %34, align 8
  br label %42

42:                                               ; preds = %29, %40
  %43 = icmp eq %"class.v8::internal::Handle.1240"* %31, %30
  br i1 %43, label %80, label %44

44:                                               ; preds = %42
  %45 = getelementptr inbounds %class.anon.1250, %class.anon.1250* %6, i64 0, i32 0
  %46 = bitcast <2 x i64>* %4 to i8*
  %47 = getelementptr inbounds %"class.v8::base::Optional.1390", %"class.v8::base::Optional.1390"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %48 = getelementptr inbounds %"class.v8::base::Optional.1390", %"class.v8::base::Optional.1390"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %49 = getelementptr inbounds %class.anon.1250, %class.anon.1250* %6, i64 0, i32 1, i32 0, i32 1, i32 0
  %50 = getelementptr inbounds %class.anon.1250, %class.anon.1250* %6, i64 0, i32 1, i32 0, i32 0
  %51 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %31, i64 0, i32 0, i32 0
  %52 = load i64*, i64** %51, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #13
  %53 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 0
  %54 = load %"class.v8::internal::compiler::JSHeapBroker"*, %"class.v8::internal::compiler::JSHeapBroker"** %53, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #13
  call void @_ZN2v88internal8compiler10TryMakeRefINS0_3MapEvEENS_4base8OptionalINS1_10ref_traitsIT_E8ref_typeEEEPNS1_12JSHeapBrokerENS0_6HandleIS7_EENS4_5FlagsINS1_19GetOrCreateDataFlagEiEE(%"class.v8::base::Optional.1390"* nonnull sret %3, %"class.v8::internal::compiler::JSHeapBroker"* %54, i64* %52, i32 1) #13
  %55 = load i8, i8* %47, align 8, !range !28
  %56 = icmp eq i8 %55, 1
  br i1 %56, label %57, label %69, !prof !29

57:                                               ; preds = %44
  %58 = bitcast %"class.v8::internal::compiler::ObjectData"** %48 to <2 x i64>*
  br label %70

59:                                               ; preds = %70
  %60 = icmp eq %"class.v8::internal::Handle.1240"* %76, %30
  br i1 %60, label %77, label %61

61:                                               ; preds = %59
  %62 = load %"class.v8::internal::compiler::MapInference"*, %"class.v8::internal::compiler::MapInference"** %45, align 8
  %63 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %76, i64 0, i32 0, i32 0
  %64 = load i64*, i64** %63, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #13
  %65 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %62, i64 0, i32 0
  %66 = load %"class.v8::internal::compiler::JSHeapBroker"*, %"class.v8::internal::compiler::JSHeapBroker"** %65, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #13
  call void @_ZN2v88internal8compiler10TryMakeRefINS0_3MapEvEENS_4base8OptionalINS1_10ref_traitsIT_E8ref_typeEEEPNS1_12JSHeapBrokerENS0_6HandleIS7_EENS4_5FlagsINS1_19GetOrCreateDataFlagEiEE(%"class.v8::base::Optional.1390"* nonnull sret %3, %"class.v8::internal::compiler::JSHeapBroker"* %66, i64* %64, i32 1) #13
  %67 = load i8, i8* %47, align 8, !range !28
  %68 = icmp eq i8 %67, 1
  br i1 %68, label %70, label %69, !prof !29

69:                                               ; preds = %61, %44
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i64 0, i64 0)) #14
  unreachable

70:                                               ; preds = %57, %61
  %71 = phi %"class.v8::internal::Handle.1240"* [ %76, %61 ], [ %31, %57 ]
  %72 = load <2 x i64>, <2 x i64>* %58, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %47) #13
  store <2 x i64> %72, <2 x i64>* %4, align 16
  %73 = call zeroext i16 @_ZNK2v88internal8compiler6MapRef13instance_typeEv(%"class.v8::internal::compiler::MapRef"* nonnull %5) #13
  %74 = load i1 (%"union.std::__1::__function::__policy_storage"*, i16)*, i1 (%"union.std::__1::__function::__policy_storage"*, i16)** %49, align 8
  %75 = call zeroext i1 %74(%"union.std::__1::__function::__policy_storage"* %50, i16 zeroext %73) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #13
  %76 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %71, i64 1
  br i1 %75, label %77, label %59

77:                                               ; preds = %70, %59
  %78 = phi i1 [ false, %59 ], [ true, %70 ]
  %79 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %37, align 8
  br label %80

80:                                               ; preds = %77, %42
  %81 = phi %"struct.std::__1::__function::__policy"* [ %21, %42 ], [ %79, %77 ]
  %82 = phi i1 [ false, %42 ], [ %78, %77 ]
  %83 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %81, i64 0, i32 1
  %84 = load void (i8*)*, void (i8*)** %83, align 8
  %85 = icmp eq void (i8*)* %84, null
  br i1 %85, label %88, label %86

86:                                               ; preds = %80
  %87 = load i8*, i8** %34, align 8
  call void %84(i8* %87) #13
  br label %88

88:                                               ; preds = %80, %86
  %89 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %21, i64 0, i32 1
  %90 = load void (i8*)*, void (i8*)** %89, align 8
  %91 = icmp eq void (i8*)* %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %88
  call void %90(i8* %32) #13
  br label %93

93:                                               ; preds = %88, %92
  ret i1 %82
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal8compiler12MapInference18AllOfInstanceTypesENSt3__18functionIFbNS0_12InstanceTypeEEEE(%"class.v8::internal::compiler::MapInference"*, %"class.std::__1::function"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::function", align 8
  %4 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %7 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %6, align 8
  %8 = icmp eq %"class.v8::internal::Handle.1240"* %5, %7
  br i1 %8, label %9, label %10, !prof !27

9:                                                ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0)) #14
  unreachable

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %15

14:                                               ; preds = %10
  store i32 2, i32* %11, align 8
  br label %15

15:                                               ; preds = %10, %14
  %16 = bitcast %"class.std::__1::function"* %3 to i8*
  %17 = bitcast %"class.std::__1::function"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %16, i8* align 8 %17, i64 16, i1 false) #13
  %18 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 1
  %20 = bitcast %"struct.std::__1::__function::__policy_invoker"* %19 to i64*
  %21 = bitcast %"struct.std::__1::__function::__policy_invoker"* %18 to i64*
  %22 = load i64, i64* %20, align 8
  store i64 %22, i64* %21, align 8
  %23 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 2
  %24 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 2
  %25 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %24, align 8
  store %"struct.std::__1::__function::__policy"* %25, %"struct.std::__1::__function::__policy"** %23, align 8
  %26 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %25, i64 0, i32 0
  %27 = load i8* (i8*)*, i8* (i8*)** %26, align 8
  %28 = icmp eq i8* (i8*)* %27, null
  br i1 %28, label %34, label %29

29:                                               ; preds = %15
  %30 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = tail call i8* %27(i8* %31) #13
  %33 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 0, i32 0
  store i8* %32, i8** %33, align 8
  br label %34

34:                                               ; preds = %15, %29
  %35 = call zeroext i1 @_ZNK2v88internal8compiler12MapInference24AllOfInstanceTypesUnsafeENSt3__18functionIFbNS0_12InstanceTypeEEEE(%"class.v8::internal::compiler::MapInference"* %0, %"class.std::__1::function"* nonnull %3)
  %36 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %25, i64 0, i32 1
  %37 = load void (i8*)*, void (i8*)** %36, align 8
  %38 = icmp eq void (i8*)* %37, null
  br i1 %38, label %42, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %3, i64 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  tail call void %37(i8* %41) #13
  br label %42

42:                                               ; preds = %34, %39
  ret i1 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.std::__1::vector.1238"* @_ZN2v88internal8compiler12MapInference7GetMapsEv(%"class.v8::internal::compiler::MapInference"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %5 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %4, align 8
  %6 = icmp eq %"class.v8::internal::Handle.1240"* %3, %5
  br i1 %6, label %7, label %8, !prof !27

7:                                                ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0)) #14
  unreachable

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %13

12:                                               ; preds = %8
  store i32 2, i32* %9, align 8
  br label %13

13:                                               ; preds = %8, %12
  %14 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2
  ret %"class.std::__1::vector.1238"* %14
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal8compiler12MapInference2IsENS0_6HandleINS0_3MapEEE(%"class.v8::internal::compiler::MapInference"* nocapture, i64*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %6 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %5, align 8
  %7 = icmp eq %"class.v8::internal::Handle.1240"* %4, %6
  %8 = ptrtoint %"class.v8::internal::Handle.1240"* %6 to i64
  %9 = ptrtoint %"class.v8::internal::Handle.1240"* %4 to i64
  %10 = bitcast %"class.v8::internal::Handle.1240"* %4 to i64*
  br i1 %7, label %23, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 3
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %16

15:                                               ; preds = %11
  store i32 2, i32* %12, align 8
  br label %16

16:                                               ; preds = %11, %15
  %17 = sub i64 %8, %9
  %18 = icmp eq i64 %17, 8
  br i1 %18, label %19, label %23

19:                                               ; preds = %16
  %20 = ptrtoint i64* %1 to i64
  %21 = load i64, i64* %10, align 1
  %22 = icmp eq i64 %21, %20
  br label %23

23:                                               ; preds = %2, %19, %16
  %24 = phi i1 [ false, %2 ], [ %22, %19 ], [ false, %16 ]
  ret i1 %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler12MapInference15InsertMapChecksEPNS1_7JSGraphEPNS1_6EffectENS1_7ControlERKNS1_14FeedbackSourceE(%"class.v8::internal::compiler::MapInference"* nocapture, %"class.v8::internal::compiler::JSGraph"* nocapture readonly, %"class.v8::internal::compiler::Effect"* nocapture, %"class.v8::internal::compiler::Node"*, %"struct.v8::internal::compiler::FeedbackSource"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %6 = alloca %"struct.std::__1::array", align 8
  %7 = alloca %"class.v8::internal::ZoneHandleSet", align 8
  %8 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 0
  %9 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %11 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %10, align 8
  %12 = icmp eq %"class.v8::internal::Handle.1240"* %9, %11
  br i1 %12, label %13, label %14, !prof !27

13:                                               ; preds = %5
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0)) #14
  unreachable

14:                                               ; preds = %5
  %15 = getelementptr inbounds %"struct.v8::internal::compiler::FeedbackSource", %"struct.v8::internal::compiler::FeedbackSource"* %4, i64 0, i32 0, i32 0, i32 0
  %16 = load i64*, i64** %15, align 8
  %17 = icmp eq i64* %16, null
  br i1 %17, label %22, label %18, !prof !30

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"struct.v8::internal::compiler::FeedbackSource", %"struct.v8::internal::compiler::FeedbackSource"* %4, i64 0, i32 1, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, -1
  br i1 %21, label %22, label %23, !prof !27

22:                                               ; preds = %18, %14
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0)) #14
  unreachable

23:                                               ; preds = %18
  %24 = bitcast %"class.v8::internal::ZoneHandleSet"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #13
  %25 = getelementptr inbounds %"class.v8::internal::ZoneHandleSet", %"class.v8::internal::ZoneHandleSet"* %7, i64 0, i32 0
  store i64 1, i64* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %1, i64 0, i32 0, i32 0
  br label %48

27:                                               ; preds = %48
  %28 = load i64, i64* %25, align 8
  %29 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %1, i64 0, i32 0, i32 0
  %30 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %1, i64 0, i32 3
  %32 = load %"class.v8::internal::compiler::SimplifiedOperatorBuilder"*, %"class.v8::internal::compiler::SimplifiedOperatorBuilder"** %31, align 8
  %33 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler25SimplifiedOperatorBuilder9CheckMapsENS_4base5FlagsINS1_13CheckMapsFlagEiEENS0_13ZoneHandleSetINS0_3MapEEERKNS1_14FeedbackSourceE(%"class.v8::internal::compiler::SimplifiedOperatorBuilder"* %32, i32 0, i64 %28, %"struct.v8::internal::compiler::FeedbackSource"* dereferenceable(16) %4) #13
  %34 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 1
  %35 = bitcast %"class.v8::internal::compiler::Node"** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %"class.v8::internal::compiler::Effect", %"class.v8::internal::compiler::Effect"* %2, i64 0, i32 0, i32 0
  %38 = bitcast %"class.v8::internal::compiler::Effect"* %2 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"struct.std::__1::array"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %40) #13
  %41 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %6, i64 0, i32 0, i64 0
  %42 = bitcast %"struct.std::__1::array"* %6 to i64*
  store i64 %36, i64* %42, align 8
  %43 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %6, i64 0, i32 0, i64 1
  %44 = bitcast %"class.v8::internal::compiler::Node"** %43 to i64*
  store i64 %39, i64* %44, align 8
  %45 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %6, i64 0, i32 0, i64 2
  store %"class.v8::internal::compiler::Node"* %3, %"class.v8::internal::compiler::Node"** %45, align 8
  %46 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %30, %"class.v8::internal::compiler::Operator"* %33, i32 3, %"class.v8::internal::compiler::Node"** nonnull %41, i1 zeroext false) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %40) #13
  store %"class.v8::internal::compiler::Node"* %46, %"class.v8::internal::compiler::Node"** %37, align 8
  %47 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 3
  store i32 0, i32* %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #13
  ret void

48:                                               ; preds = %23, %48
  %49 = phi %"class.v8::internal::Handle.1240"* [ %9, %23 ], [ %55, %48 ]
  %50 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %49, i64 0, i32 0, i32 0
  %51 = load i64*, i64** %50, align 8
  %52 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %26, align 8
  %53 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %52, i64 0, i32 0
  %54 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %53, align 8
  call void @_ZN2v88internal13ZoneHandleSetINS0_3MapEE6insertENS0_6HandleIS2_EEPNS0_4ZoneE(%"class.v8::internal::ZoneHandleSet"* nonnull %7, i64* %51, %"class.v8::internal::Zone"* %54)
  %55 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %49, i64 1
  %56 = icmp eq %"class.v8::internal::Handle.1240"* %55, %11
  br i1 %56, label %27, label %48
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal13ZoneHandleSetINS0_3MapEE6insertENS0_6HandleIS2_EEPNS0_4ZoneE(%"class.v8::internal::ZoneHandleSet"*, i64*, %"class.v8::internal::Zone"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i64* %1 to i64
  %5 = ptrtoint %"class.v8::internal::Zone"* %2 to i64
  %6 = getelementptr inbounds %"class.v8::internal::ZoneHandleSet", %"class.v8::internal::ZoneHandleSet"* %0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  switch i64 %8, label %974 [
    i64 1, label %9
    i64 0, label %10
  ]

9:                                                ; preds = %3
  store i64 %4, i64* %6, align 8
  br label %1980

10:                                               ; preds = %3
  %11 = inttoptr i64 %7 to i64*
  %12 = bitcast %"class.v8::internal::ZoneHandleSet"* %0 to i64**
  %13 = icmp eq i64* %11, %1
  br i1 %13, label %1980, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %16
  %20 = icmp ult i64 %19, 32
  br i1 %20, label %21, label %23, !prof !27

21:                                               ; preds = %14
  %22 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 32) #13
  br label %25

23:                                               ; preds = %14
  %24 = add i64 %16, 32
  store i64 %24, i64* %15, align 8
  br label %25

25:                                               ; preds = %21, %23
  %26 = phi i64 [ %22, %21 ], [ %16, %23 ]
  %27 = inttoptr i64 %26 to i8*
  %28 = inttoptr i64 %26 to %"class.v8::internal::ZoneVector.1376"*
  %29 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %28, i64 0, i32 0, i32 0, i32 2, i32 1
  %30 = bitcast %"struct.std::__1::__compressed_pair_elem.1380"* %29 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 24, i1 false) #13
  store i64 %5, i64* %30, align 8
  %31 = load i64*, i64** %12, align 8
  %32 = icmp ult i64* %31, %1
  br i1 %32, label %33, label %501

33:                                               ; preds = %25
  %34 = ptrtoint i64* %31 to i64
  %35 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %28, i64 0, i32 0, i32 0, i32 1
  %36 = load i64**, i64*** %35, align 8
  %37 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %28, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %38 = load i64**, i64*** %37, align 8
  %39 = icmp ult i64** %36, %38
  %40 = ptrtoint i64** %38 to i64
  br i1 %39, label %41, label %48

41:                                               ; preds = %33
  %42 = bitcast i64** %36 to i64*
  store i64 %34, i64* %42, align 8
  %43 = getelementptr inbounds i64*, i64** %36, i64 1
  %44 = ptrtoint i64** %43 to i64
  %45 = bitcast i64*** %35 to i64*
  store i64 %44, i64* %45, align 8
  %46 = load i64**, i64*** %37, align 8
  %47 = ptrtoint i64** %46 to i64
  br label %269

48:                                               ; preds = %33
  %49 = ptrtoint i64** %36 to i64
  %50 = bitcast i64*** %35 to i64*
  %51 = inttoptr i64 %26 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %49, %52
  %54 = ashr exact i64 %53, 3
  %55 = add nsw i64 %54, 1
  %56 = icmp ugt i64 %55, 268435455
  br i1 %56, label %57, label %59

57:                                               ; preds = %48
  %58 = inttoptr i64 %26 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %58) #14
  unreachable

59:                                               ; preds = %48
  %60 = bitcast i64*** %37 to i64*
  %61 = sub i64 %40, %52
  %62 = ashr exact i64 %61, 3
  %63 = icmp ult i64 %62, 134217727
  br i1 %63, label %64, label %69

64:                                               ; preds = %59
  %65 = ashr exact i64 %61, 2
  %66 = icmp ult i64 %65, %55
  %67 = select i1 %66, i64 %55, i64 %65
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %83, label %69

69:                                               ; preds = %64, %59
  %70 = phi i64 [ %67, %64 ], [ 268435455, %59 ]
  %71 = shl i64 %70, 3
  %72 = load i64, i64* %15, align 8
  %73 = load i64, i64* %17, align 8
  %74 = sub i64 %73, %72
  %75 = icmp ugt i64 %71, %74
  br i1 %75, label %76, label %78, !prof !27

76:                                               ; preds = %69
  %77 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %71) #13
  br label %80

78:                                               ; preds = %69
  %79 = add i64 %72, %71
  store i64 %79, i64* %15, align 8
  br label %80

80:                                               ; preds = %78, %76
  %81 = phi i64 [ %77, %76 ], [ %72, %78 ]
  %82 = inttoptr i64 %81 to i64**
  br label %83

83:                                               ; preds = %80, %64
  %84 = phi i64 [ %70, %80 ], [ 0, %64 ]
  %85 = phi i64** [ %82, %80 ], [ null, %64 ]
  %86 = getelementptr inbounds i64*, i64** %85, i64 %54
  %87 = getelementptr inbounds i64*, i64** %85, i64 %84
  %88 = ptrtoint i64** %87 to i64
  %89 = bitcast i64** %86 to i64*
  store i64 %34, i64* %89, align 8
  %90 = getelementptr inbounds i64*, i64** %86, i64 1
  %91 = ptrtoint i64** %90 to i64
  %92 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %28, i64 0, i32 0, i32 0, i32 0
  %93 = load i64**, i64*** %92, align 8
  %94 = ptrtoint i64** %93 to i64
  %95 = load i64**, i64*** %35, align 8
  %96 = icmp eq i64** %95, %93
  br i1 %96, label %266, label %97

97:                                               ; preds = %83
  %98 = getelementptr i64*, i64** %95, i64 -1
  %99 = ptrtoint i64** %98 to i64
  %100 = sub i64 %99, %94
  %101 = lshr i64 %100, 3
  %102 = add nuw nsw i64 %101, 1
  %103 = icmp ult i64 %102, 4
  br i1 %103, label %196, label %104

104:                                              ; preds = %97
  %105 = getelementptr i64*, i64** %95, i64 -1
  %106 = ptrtoint i64** %105 to i64
  %107 = sub i64 %106, %94
  %108 = lshr i64 %107, 3
  %109 = xor i64 %108, -1
  %110 = add nsw i64 %54, %109
  %111 = getelementptr i64*, i64** %85, i64 %110
  %112 = xor i64 %108, -1
  %113 = getelementptr i64*, i64** %95, i64 %112
  %114 = icmp ult i64** %111, %95
  %115 = icmp ult i64** %113, %86
  %116 = and i1 %114, %115
  br i1 %116, label %196, label %117

117:                                              ; preds = %104
  %118 = and i64 %102, 4611686018427387900
  %119 = sub nsw i64 0, %118
  %120 = getelementptr i64*, i64** %86, i64 %119
  %121 = sub nsw i64 0, %118
  %122 = getelementptr i64*, i64** %95, i64 %121
  %123 = add nsw i64 %118, -4
  %124 = lshr exact i64 %123, 2
  %125 = add nuw nsw i64 %124, 1
  %126 = and i64 %125, 1
  %127 = icmp eq i64 %123, 0
  br i1 %127, label %172, label %128

128:                                              ; preds = %117
  %129 = sub nuw nsw i64 %125, %126
  %130 = getelementptr i64*, i64** %86, i64 -1
  %131 = getelementptr i64*, i64** %95, i64 -1
  %132 = getelementptr i64*, i64** %86, i64 -1
  %133 = getelementptr i64*, i64** %95, i64 -1
  br label %134

134:                                              ; preds = %134, %128
  %135 = phi i64 [ 0, %128 ], [ %169, %134 ]
  %136 = phi i64 [ %129, %128 ], [ %170, %134 ]
  %137 = sub i64 0, %135
  %138 = sub i64 0, %135
  %139 = getelementptr inbounds i64*, i64** %130, i64 %137
  %140 = getelementptr inbounds i64*, i64** %131, i64 %138
  %141 = getelementptr inbounds i64*, i64** %140, i64 -1
  %142 = bitcast i64** %141 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 8, !alias.scope !31
  %144 = getelementptr inbounds i64*, i64** %140, i64 -2
  %145 = getelementptr inbounds i64*, i64** %144, i64 -1
  %146 = bitcast i64** %145 to <2 x i64>*
  %147 = load <2 x i64>, <2 x i64>* %146, align 8, !alias.scope !31
  %148 = getelementptr inbounds i64*, i64** %139, i64 -1
  %149 = bitcast i64** %148 to <2 x i64>*
  store <2 x i64> %143, <2 x i64>* %149, align 8, !alias.scope !34, !noalias !31
  %150 = getelementptr inbounds i64*, i64** %139, i64 -2
  %151 = getelementptr inbounds i64*, i64** %150, i64 -1
  %152 = bitcast i64** %151 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %152, align 8, !alias.scope !34, !noalias !31
  %153 = sub nuw nsw i64 -4, %135
  %154 = sub nuw nsw i64 -4, %135
  %155 = getelementptr inbounds i64*, i64** %132, i64 %153
  %156 = getelementptr inbounds i64*, i64** %133, i64 %154
  %157 = getelementptr inbounds i64*, i64** %156, i64 -1
  %158 = bitcast i64** %157 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 8, !alias.scope !31
  %160 = getelementptr inbounds i64*, i64** %156, i64 -2
  %161 = getelementptr inbounds i64*, i64** %160, i64 -1
  %162 = bitcast i64** %161 to <2 x i64>*
  %163 = load <2 x i64>, <2 x i64>* %162, align 8, !alias.scope !31
  %164 = getelementptr inbounds i64*, i64** %155, i64 -1
  %165 = bitcast i64** %164 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %165, align 8, !alias.scope !34, !noalias !31
  %166 = getelementptr inbounds i64*, i64** %155, i64 -2
  %167 = getelementptr inbounds i64*, i64** %166, i64 -1
  %168 = bitcast i64** %167 to <2 x i64>*
  store <2 x i64> %163, <2 x i64>* %168, align 8, !alias.scope !34, !noalias !31
  %169 = add i64 %135, 8
  %170 = add i64 %136, -2
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %134, !llvm.loop !36

172:                                              ; preds = %134, %117
  %173 = phi i64 [ 0, %117 ], [ %169, %134 ]
  %174 = icmp eq i64 %126, 0
  br i1 %174, label %194, label %175

175:                                              ; preds = %172
  %176 = sub i64 0, %173
  %177 = getelementptr i64*, i64** %86, i64 -1
  %178 = sub i64 0, %173
  %179 = getelementptr i64*, i64** %95, i64 -1
  %180 = getelementptr inbounds i64*, i64** %177, i64 %176
  %181 = getelementptr inbounds i64*, i64** %179, i64 %178
  %182 = getelementptr inbounds i64*, i64** %181, i64 -1
  %183 = bitcast i64** %182 to <2 x i64>*
  %184 = load <2 x i64>, <2 x i64>* %183, align 8, !alias.scope !31
  %185 = getelementptr inbounds i64*, i64** %181, i64 -2
  %186 = getelementptr inbounds i64*, i64** %185, i64 -1
  %187 = bitcast i64** %186 to <2 x i64>*
  %188 = load <2 x i64>, <2 x i64>* %187, align 8, !alias.scope !31
  %189 = getelementptr inbounds i64*, i64** %180, i64 -1
  %190 = bitcast i64** %189 to <2 x i64>*
  store <2 x i64> %184, <2 x i64>* %190, align 8, !alias.scope !34, !noalias !31
  %191 = getelementptr inbounds i64*, i64** %180, i64 -2
  %192 = getelementptr inbounds i64*, i64** %191, i64 -1
  %193 = bitcast i64** %192 to <2 x i64>*
  store <2 x i64> %188, <2 x i64>* %193, align 8, !alias.scope !34, !noalias !31
  br label %194

194:                                              ; preds = %172, %175
  %195 = icmp eq i64 %102, %118
  br i1 %195, label %266, label %196

196:                                              ; preds = %194, %104, %97
  %197 = phi i64** [ %86, %104 ], [ %86, %97 ], [ %120, %194 ]
  %198 = phi i64** [ %95, %104 ], [ %95, %97 ], [ %122, %194 ]
  %199 = getelementptr i64*, i64** %198, i64 -1
  %200 = ptrtoint i64** %199 to i64
  %201 = sub i64 %200, %94
  %202 = lshr i64 %201, 3
  %203 = add nuw nsw i64 %202, 1
  %204 = and i64 %203, 7
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %217, label %206

206:                                              ; preds = %196, %206
  %207 = phi i64** [ %210, %206 ], [ %197, %196 ]
  %208 = phi i64** [ %211, %206 ], [ %198, %196 ]
  %209 = phi i64 [ %215, %206 ], [ %204, %196 ]
  %210 = getelementptr inbounds i64*, i64** %207, i64 -1
  %211 = getelementptr inbounds i64*, i64** %208, i64 -1
  %212 = bitcast i64** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = bitcast i64** %210 to i64*
  store i64 %213, i64* %214, align 8
  %215 = add i64 %209, -1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %206, !llvm.loop !37

217:                                              ; preds = %206, %196
  %218 = phi i64** [ undef, %196 ], [ %210, %206 ]
  %219 = phi i64** [ %197, %196 ], [ %210, %206 ]
  %220 = phi i64** [ %198, %196 ], [ %211, %206 ]
  %221 = icmp ult i64 %201, 56
  br i1 %221, label %266, label %222

222:                                              ; preds = %217, %222
  %223 = phi i64** [ %260, %222 ], [ %219, %217 ]
  %224 = phi i64** [ %261, %222 ], [ %220, %217 ]
  %225 = getelementptr inbounds i64*, i64** %223, i64 -1
  %226 = getelementptr inbounds i64*, i64** %224, i64 -1
  %227 = bitcast i64** %226 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = bitcast i64** %225 to i64*
  store i64 %228, i64* %229, align 8
  %230 = getelementptr inbounds i64*, i64** %223, i64 -2
  %231 = getelementptr inbounds i64*, i64** %224, i64 -2
  %232 = bitcast i64** %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = bitcast i64** %230 to i64*
  store i64 %233, i64* %234, align 8
  %235 = getelementptr inbounds i64*, i64** %223, i64 -3
  %236 = getelementptr inbounds i64*, i64** %224, i64 -3
  %237 = bitcast i64** %236 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = bitcast i64** %235 to i64*
  store i64 %238, i64* %239, align 8
  %240 = getelementptr inbounds i64*, i64** %223, i64 -4
  %241 = getelementptr inbounds i64*, i64** %224, i64 -4
  %242 = bitcast i64** %241 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = bitcast i64** %240 to i64*
  store i64 %243, i64* %244, align 8
  %245 = getelementptr inbounds i64*, i64** %223, i64 -5
  %246 = getelementptr inbounds i64*, i64** %224, i64 -5
  %247 = bitcast i64** %246 to i64*
  %248 = load i64, i64* %247, align 8
  %249 = bitcast i64** %245 to i64*
  store i64 %248, i64* %249, align 8
  %250 = getelementptr inbounds i64*, i64** %223, i64 -6
  %251 = getelementptr inbounds i64*, i64** %224, i64 -6
  %252 = bitcast i64** %251 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = bitcast i64** %250 to i64*
  store i64 %253, i64* %254, align 8
  %255 = getelementptr inbounds i64*, i64** %223, i64 -7
  %256 = getelementptr inbounds i64*, i64** %224, i64 -7
  %257 = bitcast i64** %256 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = bitcast i64** %255 to i64*
  store i64 %258, i64* %259, align 8
  %260 = getelementptr inbounds i64*, i64** %223, i64 -8
  %261 = getelementptr inbounds i64*, i64** %224, i64 -8
  %262 = bitcast i64** %261 to i64*
  %263 = load i64, i64* %262, align 8
  %264 = bitcast i64** %260 to i64*
  store i64 %263, i64* %264, align 8
  %265 = icmp eq i64** %261, %93
  br i1 %265, label %266, label %222, !llvm.loop !38

266:                                              ; preds = %217, %222, %194, %83
  %267 = phi i64** [ %86, %83 ], [ %120, %194 ], [ %218, %217 ], [ %260, %222 ]
  %268 = ptrtoint i64** %267 to i64
  store i64 %268, i64* %51, align 8
  store i64 %91, i64* %50, align 8
  store i64 %88, i64* %60, align 8
  br label %269

269:                                              ; preds = %41, %266
  %270 = phi i64 [ %47, %41 ], [ %88, %266 ]
  %271 = phi i64** [ %46, %41 ], [ %87, %266 ]
  %272 = phi i64** [ %43, %41 ], [ %90, %266 ]
  %273 = icmp eq i64** %272, %271
  br i1 %273, label %279, label %274

274:                                              ; preds = %269
  %275 = bitcast i64** %272 to i64*
  store i64 %4, i64* %275, align 8
  %276 = getelementptr inbounds i64*, i64** %272, i64 1
  %277 = ptrtoint i64** %276 to i64
  %278 = bitcast i64*** %35 to i64*
  store i64 %277, i64* %278, align 8
  br label %972

279:                                              ; preds = %269
  %280 = bitcast i64*** %35 to i64*
  %281 = inttoptr i64 %26 to i64*
  %282 = load i64, i64* %281, align 8
  %283 = sub i64 %270, %282
  %284 = ashr exact i64 %283, 3
  %285 = add nsw i64 %284, 1
  %286 = icmp ugt i64 %285, 268435455
  br i1 %286, label %287, label %289

287:                                              ; preds = %279
  %288 = inttoptr i64 %26 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %288) #14
  unreachable

289:                                              ; preds = %279
  %290 = bitcast i64*** %37 to i64*
  %291 = icmp ult i64 %284, 134217727
  br i1 %291, label %292, label %297

292:                                              ; preds = %289
  %293 = ashr exact i64 %283, 2
  %294 = icmp ult i64 %293, %285
  %295 = select i1 %294, i64 %285, i64 %293
  %296 = icmp eq i64 %295, 0
  br i1 %296, label %315, label %297

297:                                              ; preds = %292, %289
  %298 = phi i64 [ %295, %292 ], [ 268435455, %289 ]
  %299 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %28, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %300 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %299, align 8
  %301 = shl i64 %298, 3
  %302 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %300, i64 0, i32 2
  %303 = load i64, i64* %302, align 8
  %304 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %300, i64 0, i32 3
  %305 = load i64, i64* %304, align 8
  %306 = sub i64 %305, %303
  %307 = icmp ugt i64 %301, %306
  br i1 %307, label %308, label %310, !prof !27

308:                                              ; preds = %297
  %309 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %300, i64 %301) #13
  br label %312

310:                                              ; preds = %297
  %311 = add i64 %303, %301
  store i64 %311, i64* %302, align 8
  br label %312

312:                                              ; preds = %310, %308
  %313 = phi i64 [ %309, %308 ], [ %303, %310 ]
  %314 = inttoptr i64 %313 to i64**
  br label %315

315:                                              ; preds = %312, %292
  %316 = phi i64 [ %298, %312 ], [ 0, %292 ]
  %317 = phi i64** [ %314, %312 ], [ null, %292 ]
  %318 = getelementptr inbounds i64*, i64** %317, i64 %284
  %319 = getelementptr inbounds i64*, i64** %317, i64 %316
  %320 = ptrtoint i64** %319 to i64
  %321 = bitcast i64** %318 to i64*
  store i64 %4, i64* %321, align 8
  %322 = getelementptr inbounds i64*, i64** %318, i64 1
  %323 = ptrtoint i64** %322 to i64
  %324 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %28, i64 0, i32 0, i32 0, i32 0
  %325 = load i64**, i64*** %324, align 8
  %326 = ptrtoint i64** %325 to i64
  %327 = load i64**, i64*** %35, align 8
  %328 = icmp eq i64** %327, %325
  br i1 %328, label %498, label %329

329:                                              ; preds = %315
  %330 = getelementptr i64*, i64** %327, i64 -1
  %331 = ptrtoint i64** %330 to i64
  %332 = sub i64 %331, %326
  %333 = lshr i64 %332, 3
  %334 = add nuw nsw i64 %333, 1
  %335 = icmp ult i64 %334, 4
  br i1 %335, label %428, label %336

336:                                              ; preds = %329
  %337 = getelementptr i64*, i64** %327, i64 -1
  %338 = ptrtoint i64** %337 to i64
  %339 = sub i64 %338, %326
  %340 = lshr i64 %339, 3
  %341 = xor i64 %340, -1
  %342 = add nsw i64 %284, %341
  %343 = getelementptr i64*, i64** %317, i64 %342
  %344 = xor i64 %340, -1
  %345 = getelementptr i64*, i64** %327, i64 %344
  %346 = icmp ult i64** %343, %327
  %347 = icmp ult i64** %345, %318
  %348 = and i1 %346, %347
  br i1 %348, label %428, label %349

349:                                              ; preds = %336
  %350 = and i64 %334, 4611686018427387900
  %351 = sub nsw i64 0, %350
  %352 = getelementptr i64*, i64** %318, i64 %351
  %353 = sub nsw i64 0, %350
  %354 = getelementptr i64*, i64** %327, i64 %353
  %355 = add nsw i64 %350, -4
  %356 = lshr exact i64 %355, 2
  %357 = add nuw nsw i64 %356, 1
  %358 = and i64 %357, 1
  %359 = icmp eq i64 %355, 0
  br i1 %359, label %406, label %360

360:                                              ; preds = %349
  %361 = sub nuw nsw i64 %357, %358
  %362 = getelementptr i64*, i64** %318, i64 -1
  %363 = getelementptr i64*, i64** %327, i64 -1
  %364 = getelementptr i64*, i64** %318, i64 -1
  %365 = getelementptr i64*, i64** %327, i64 -1
  br label %366

366:                                              ; preds = %366, %360
  %367 = phi i64 [ 0, %360 ], [ %401, %366 ]
  %368 = phi i64 [ %361, %360 ], [ %402, %366 ]
  %369 = sub i64 0, %367
  %370 = sub i64 0, %367
  %371 = getelementptr inbounds i64*, i64** %362, i64 %369
  %372 = getelementptr inbounds i64*, i64** %363, i64 %370
  %373 = getelementptr inbounds i64*, i64** %372, i64 -1
  %374 = bitcast i64** %373 to <2 x i64>*
  %375 = load <2 x i64>, <2 x i64>* %374, align 8, !alias.scope !39
  %376 = getelementptr inbounds i64*, i64** %372, i64 -2
  %377 = getelementptr inbounds i64*, i64** %376, i64 -1
  %378 = bitcast i64** %377 to <2 x i64>*
  %379 = load <2 x i64>, <2 x i64>* %378, align 8, !alias.scope !39
  %380 = getelementptr inbounds i64*, i64** %371, i64 -1
  %381 = bitcast i64** %380 to <2 x i64>*
  store <2 x i64> %375, <2 x i64>* %381, align 8, !alias.scope !42, !noalias !39
  %382 = getelementptr inbounds i64*, i64** %371, i64 -2
  %383 = getelementptr inbounds i64*, i64** %382, i64 -1
  %384 = bitcast i64** %383 to <2 x i64>*
  store <2 x i64> %379, <2 x i64>* %384, align 8, !alias.scope !42, !noalias !39
  %385 = sub nuw nsw i64 -4, %367
  %386 = sub nuw nsw i64 -4, %367
  %387 = getelementptr inbounds i64*, i64** %364, i64 %385
  %388 = getelementptr inbounds i64*, i64** %365, i64 %386
  %389 = getelementptr inbounds i64*, i64** %388, i64 -1
  %390 = bitcast i64** %389 to <2 x i64>*
  %391 = load <2 x i64>, <2 x i64>* %390, align 8, !alias.scope !39
  %392 = getelementptr inbounds i64*, i64** %388, i64 -2
  %393 = getelementptr inbounds i64*, i64** %392, i64 -1
  %394 = bitcast i64** %393 to <2 x i64>*
  %395 = load <2 x i64>, <2 x i64>* %394, align 8, !alias.scope !39
  %396 = getelementptr inbounds i64*, i64** %387, i64 -1
  %397 = bitcast i64** %396 to <2 x i64>*
  store <2 x i64> %391, <2 x i64>* %397, align 8, !alias.scope !42, !noalias !39
  %398 = getelementptr inbounds i64*, i64** %387, i64 -2
  %399 = getelementptr inbounds i64*, i64** %398, i64 -1
  %400 = bitcast i64** %399 to <2 x i64>*
  store <2 x i64> %395, <2 x i64>* %400, align 8, !alias.scope !42, !noalias !39
  %401 = add i64 %367, 8
  %402 = add i64 %368, -2
  %403 = icmp eq i64 %402, 0
  br i1 %403, label %404, label %366, !llvm.loop !44

404:                                              ; preds = %366
  %405 = sub nuw nsw i64 -8, %367
  br label %406

406:                                              ; preds = %404, %349
  %407 = phi i64 [ 0, %349 ], [ %405, %404 ]
  %408 = icmp eq i64 %358, 0
  br i1 %408, label %426, label %409

409:                                              ; preds = %406
  %410 = getelementptr i64*, i64** %318, i64 -1
  %411 = getelementptr i64*, i64** %327, i64 -1
  %412 = getelementptr inbounds i64*, i64** %410, i64 %407
  %413 = getelementptr inbounds i64*, i64** %411, i64 %407
  %414 = getelementptr inbounds i64*, i64** %413, i64 -1
  %415 = bitcast i64** %414 to <2 x i64>*
  %416 = load <2 x i64>, <2 x i64>* %415, align 8, !alias.scope !39
  %417 = getelementptr inbounds i64*, i64** %413, i64 -2
  %418 = getelementptr inbounds i64*, i64** %417, i64 -1
  %419 = bitcast i64** %418 to <2 x i64>*
  %420 = load <2 x i64>, <2 x i64>* %419, align 8, !alias.scope !39
  %421 = getelementptr inbounds i64*, i64** %412, i64 -1
  %422 = bitcast i64** %421 to <2 x i64>*
  store <2 x i64> %416, <2 x i64>* %422, align 8, !alias.scope !42, !noalias !39
  %423 = getelementptr inbounds i64*, i64** %412, i64 -2
  %424 = getelementptr inbounds i64*, i64** %423, i64 -1
  %425 = bitcast i64** %424 to <2 x i64>*
  store <2 x i64> %420, <2 x i64>* %425, align 8, !alias.scope !42, !noalias !39
  br label %426

426:                                              ; preds = %406, %409
  %427 = icmp eq i64 %334, %350
  br i1 %427, label %498, label %428

428:                                              ; preds = %426, %336, %329
  %429 = phi i64** [ %318, %336 ], [ %318, %329 ], [ %352, %426 ]
  %430 = phi i64** [ %327, %336 ], [ %327, %329 ], [ %354, %426 ]
  %431 = getelementptr i64*, i64** %430, i64 -1
  %432 = ptrtoint i64** %431 to i64
  %433 = sub i64 %432, %326
  %434 = lshr i64 %433, 3
  %435 = add nuw nsw i64 %434, 1
  %436 = and i64 %435, 7
  %437 = icmp eq i64 %436, 0
  br i1 %437, label %449, label %438

438:                                              ; preds = %428, %438
  %439 = phi i64** [ %442, %438 ], [ %429, %428 ]
  %440 = phi i64** [ %443, %438 ], [ %430, %428 ]
  %441 = phi i64 [ %447, %438 ], [ %436, %428 ]
  %442 = getelementptr inbounds i64*, i64** %439, i64 -1
  %443 = getelementptr inbounds i64*, i64** %440, i64 -1
  %444 = bitcast i64** %443 to i64*
  %445 = load i64, i64* %444, align 8
  %446 = bitcast i64** %442 to i64*
  store i64 %445, i64* %446, align 8
  %447 = add i64 %441, -1
  %448 = icmp eq i64 %447, 0
  br i1 %448, label %449, label %438, !llvm.loop !45

449:                                              ; preds = %438, %428
  %450 = phi i64** [ undef, %428 ], [ %442, %438 ]
  %451 = phi i64** [ %429, %428 ], [ %442, %438 ]
  %452 = phi i64** [ %430, %428 ], [ %443, %438 ]
  %453 = icmp ult i64 %433, 56
  br i1 %453, label %498, label %454

454:                                              ; preds = %449, %454
  %455 = phi i64** [ %492, %454 ], [ %451, %449 ]
  %456 = phi i64** [ %493, %454 ], [ %452, %449 ]
  %457 = getelementptr inbounds i64*, i64** %455, i64 -1
  %458 = getelementptr inbounds i64*, i64** %456, i64 -1
  %459 = bitcast i64** %458 to i64*
  %460 = load i64, i64* %459, align 8
  %461 = bitcast i64** %457 to i64*
  store i64 %460, i64* %461, align 8
  %462 = getelementptr inbounds i64*, i64** %455, i64 -2
  %463 = getelementptr inbounds i64*, i64** %456, i64 -2
  %464 = bitcast i64** %463 to i64*
  %465 = load i64, i64* %464, align 8
  %466 = bitcast i64** %462 to i64*
  store i64 %465, i64* %466, align 8
  %467 = getelementptr inbounds i64*, i64** %455, i64 -3
  %468 = getelementptr inbounds i64*, i64** %456, i64 -3
  %469 = bitcast i64** %468 to i64*
  %470 = load i64, i64* %469, align 8
  %471 = bitcast i64** %467 to i64*
  store i64 %470, i64* %471, align 8
  %472 = getelementptr inbounds i64*, i64** %455, i64 -4
  %473 = getelementptr inbounds i64*, i64** %456, i64 -4
  %474 = bitcast i64** %473 to i64*
  %475 = load i64, i64* %474, align 8
  %476 = bitcast i64** %472 to i64*
  store i64 %475, i64* %476, align 8
  %477 = getelementptr inbounds i64*, i64** %455, i64 -5
  %478 = getelementptr inbounds i64*, i64** %456, i64 -5
  %479 = bitcast i64** %478 to i64*
  %480 = load i64, i64* %479, align 8
  %481 = bitcast i64** %477 to i64*
  store i64 %480, i64* %481, align 8
  %482 = getelementptr inbounds i64*, i64** %455, i64 -6
  %483 = getelementptr inbounds i64*, i64** %456, i64 -6
  %484 = bitcast i64** %483 to i64*
  %485 = load i64, i64* %484, align 8
  %486 = bitcast i64** %482 to i64*
  store i64 %485, i64* %486, align 8
  %487 = getelementptr inbounds i64*, i64** %455, i64 -7
  %488 = getelementptr inbounds i64*, i64** %456, i64 -7
  %489 = bitcast i64** %488 to i64*
  %490 = load i64, i64* %489, align 8
  %491 = bitcast i64** %487 to i64*
  store i64 %490, i64* %491, align 8
  %492 = getelementptr inbounds i64*, i64** %455, i64 -8
  %493 = getelementptr inbounds i64*, i64** %456, i64 -8
  %494 = bitcast i64** %493 to i64*
  %495 = load i64, i64* %494, align 8
  %496 = bitcast i64** %492 to i64*
  store i64 %495, i64* %496, align 8
  %497 = icmp eq i64** %493, %325
  br i1 %497, label %498, label %454, !llvm.loop !46

498:                                              ; preds = %449, %454, %426, %315
  %499 = phi i64** [ %318, %315 ], [ %352, %426 ], [ %450, %449 ], [ %492, %454 ]
  %500 = ptrtoint i64** %499 to i64
  store i64 %500, i64* %281, align 8
  store i64 %323, i64* %280, align 8
  store i64 %320, i64* %290, align 8
  br label %972

501:                                              ; preds = %25
  %502 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %28, i64 0, i32 0, i32 0, i32 1
  %503 = load i64**, i64*** %502, align 8
  %504 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %28, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %505 = load i64**, i64*** %504, align 8
  %506 = icmp eq i64** %503, %505
  %507 = ptrtoint i64** %505 to i64
  br i1 %506, label %515, label %508

508:                                              ; preds = %501
  %509 = bitcast i64** %503 to i64*
  store i64 %4, i64* %509, align 8
  %510 = getelementptr inbounds i64*, i64** %503, i64 1
  %511 = ptrtoint i64** %510 to i64
  %512 = bitcast i64*** %502 to i64*
  store i64 %511, i64* %512, align 8
  %513 = load i64**, i64*** %504, align 8
  %514 = ptrtoint i64** %513 to i64
  br label %736

515:                                              ; preds = %501
  %516 = ptrtoint i64** %503 to i64
  %517 = bitcast i64*** %502 to i64*
  %518 = inttoptr i64 %26 to i64*
  %519 = load i64, i64* %518, align 8
  %520 = sub i64 %516, %519
  %521 = ashr exact i64 %520, 3
  %522 = add nsw i64 %521, 1
  %523 = icmp ugt i64 %522, 268435455
  br i1 %523, label %524, label %526

524:                                              ; preds = %515
  %525 = inttoptr i64 %26 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %525) #14
  unreachable

526:                                              ; preds = %515
  %527 = bitcast i64*** %504 to i64*
  %528 = sub i64 %507, %519
  %529 = ashr exact i64 %528, 3
  %530 = icmp ult i64 %529, 134217727
  br i1 %530, label %531, label %536

531:                                              ; preds = %526
  %532 = ashr exact i64 %528, 2
  %533 = icmp ult i64 %532, %522
  %534 = select i1 %533, i64 %522, i64 %532
  %535 = icmp eq i64 %534, 0
  br i1 %535, label %550, label %536

536:                                              ; preds = %531, %526
  %537 = phi i64 [ %534, %531 ], [ 268435455, %526 ]
  %538 = shl i64 %537, 3
  %539 = load i64, i64* %15, align 8
  %540 = load i64, i64* %17, align 8
  %541 = sub i64 %540, %539
  %542 = icmp ugt i64 %538, %541
  br i1 %542, label %543, label %545, !prof !27

543:                                              ; preds = %536
  %544 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %538) #13
  br label %547

545:                                              ; preds = %536
  %546 = add i64 %539, %538
  store i64 %546, i64* %15, align 8
  br label %547

547:                                              ; preds = %545, %543
  %548 = phi i64 [ %544, %543 ], [ %539, %545 ]
  %549 = inttoptr i64 %548 to i64**
  br label %550

550:                                              ; preds = %547, %531
  %551 = phi i64 [ %537, %547 ], [ 0, %531 ]
  %552 = phi i64** [ %549, %547 ], [ null, %531 ]
  %553 = getelementptr inbounds i64*, i64** %552, i64 %521
  %554 = getelementptr inbounds i64*, i64** %552, i64 %551
  %555 = ptrtoint i64** %554 to i64
  %556 = bitcast i64** %553 to i64*
  store i64 %4, i64* %556, align 8
  %557 = getelementptr inbounds i64*, i64** %553, i64 1
  %558 = ptrtoint i64** %557 to i64
  %559 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %28, i64 0, i32 0, i32 0, i32 0
  %560 = load i64**, i64*** %559, align 8
  %561 = ptrtoint i64** %560 to i64
  %562 = load i64**, i64*** %502, align 8
  %563 = icmp eq i64** %562, %560
  br i1 %563, label %733, label %564

564:                                              ; preds = %550
  %565 = getelementptr i64*, i64** %562, i64 -1
  %566 = ptrtoint i64** %565 to i64
  %567 = sub i64 %566, %561
  %568 = lshr i64 %567, 3
  %569 = add nuw nsw i64 %568, 1
  %570 = icmp ult i64 %569, 4
  br i1 %570, label %663, label %571

571:                                              ; preds = %564
  %572 = getelementptr i64*, i64** %562, i64 -1
  %573 = ptrtoint i64** %572 to i64
  %574 = sub i64 %573, %561
  %575 = lshr i64 %574, 3
  %576 = xor i64 %575, -1
  %577 = add nsw i64 %521, %576
  %578 = getelementptr i64*, i64** %552, i64 %577
  %579 = xor i64 %575, -1
  %580 = getelementptr i64*, i64** %562, i64 %579
  %581 = icmp ult i64** %578, %562
  %582 = icmp ult i64** %580, %553
  %583 = and i1 %581, %582
  br i1 %583, label %663, label %584

584:                                              ; preds = %571
  %585 = and i64 %569, 4611686018427387900
  %586 = sub nsw i64 0, %585
  %587 = getelementptr i64*, i64** %553, i64 %586
  %588 = sub nsw i64 0, %585
  %589 = getelementptr i64*, i64** %562, i64 %588
  %590 = add nsw i64 %585, -4
  %591 = lshr exact i64 %590, 2
  %592 = add nuw nsw i64 %591, 1
  %593 = and i64 %592, 1
  %594 = icmp eq i64 %590, 0
  br i1 %594, label %639, label %595

595:                                              ; preds = %584
  %596 = sub nuw nsw i64 %592, %593
  %597 = getelementptr i64*, i64** %553, i64 -1
  %598 = getelementptr i64*, i64** %562, i64 -1
  %599 = getelementptr i64*, i64** %553, i64 -1
  %600 = getelementptr i64*, i64** %562, i64 -1
  br label %601

601:                                              ; preds = %601, %595
  %602 = phi i64 [ 0, %595 ], [ %636, %601 ]
  %603 = phi i64 [ %596, %595 ], [ %637, %601 ]
  %604 = sub i64 0, %602
  %605 = sub i64 0, %602
  %606 = getelementptr inbounds i64*, i64** %597, i64 %604
  %607 = getelementptr inbounds i64*, i64** %598, i64 %605
  %608 = getelementptr inbounds i64*, i64** %607, i64 -1
  %609 = bitcast i64** %608 to <2 x i64>*
  %610 = load <2 x i64>, <2 x i64>* %609, align 8, !alias.scope !47
  %611 = getelementptr inbounds i64*, i64** %607, i64 -2
  %612 = getelementptr inbounds i64*, i64** %611, i64 -1
  %613 = bitcast i64** %612 to <2 x i64>*
  %614 = load <2 x i64>, <2 x i64>* %613, align 8, !alias.scope !47
  %615 = getelementptr inbounds i64*, i64** %606, i64 -1
  %616 = bitcast i64** %615 to <2 x i64>*
  store <2 x i64> %610, <2 x i64>* %616, align 8, !alias.scope !50, !noalias !47
  %617 = getelementptr inbounds i64*, i64** %606, i64 -2
  %618 = getelementptr inbounds i64*, i64** %617, i64 -1
  %619 = bitcast i64** %618 to <2 x i64>*
  store <2 x i64> %614, <2 x i64>* %619, align 8, !alias.scope !50, !noalias !47
  %620 = sub nuw nsw i64 -4, %602
  %621 = sub nuw nsw i64 -4, %602
  %622 = getelementptr inbounds i64*, i64** %599, i64 %620
  %623 = getelementptr inbounds i64*, i64** %600, i64 %621
  %624 = getelementptr inbounds i64*, i64** %623, i64 -1
  %625 = bitcast i64** %624 to <2 x i64>*
  %626 = load <2 x i64>, <2 x i64>* %625, align 8, !alias.scope !47
  %627 = getelementptr inbounds i64*, i64** %623, i64 -2
  %628 = getelementptr inbounds i64*, i64** %627, i64 -1
  %629 = bitcast i64** %628 to <2 x i64>*
  %630 = load <2 x i64>, <2 x i64>* %629, align 8, !alias.scope !47
  %631 = getelementptr inbounds i64*, i64** %622, i64 -1
  %632 = bitcast i64** %631 to <2 x i64>*
  store <2 x i64> %626, <2 x i64>* %632, align 8, !alias.scope !50, !noalias !47
  %633 = getelementptr inbounds i64*, i64** %622, i64 -2
  %634 = getelementptr inbounds i64*, i64** %633, i64 -1
  %635 = bitcast i64** %634 to <2 x i64>*
  store <2 x i64> %630, <2 x i64>* %635, align 8, !alias.scope !50, !noalias !47
  %636 = add i64 %602, 8
  %637 = add i64 %603, -2
  %638 = icmp eq i64 %637, 0
  br i1 %638, label %639, label %601, !llvm.loop !52

639:                                              ; preds = %601, %584
  %640 = phi i64 [ 0, %584 ], [ %636, %601 ]
  %641 = icmp eq i64 %593, 0
  br i1 %641, label %661, label %642

642:                                              ; preds = %639
  %643 = sub i64 0, %640
  %644 = getelementptr i64*, i64** %553, i64 -1
  %645 = sub i64 0, %640
  %646 = getelementptr i64*, i64** %562, i64 -1
  %647 = getelementptr inbounds i64*, i64** %644, i64 %643
  %648 = getelementptr inbounds i64*, i64** %646, i64 %645
  %649 = getelementptr inbounds i64*, i64** %648, i64 -1
  %650 = bitcast i64** %649 to <2 x i64>*
  %651 = load <2 x i64>, <2 x i64>* %650, align 8, !alias.scope !47
  %652 = getelementptr inbounds i64*, i64** %648, i64 -2
  %653 = getelementptr inbounds i64*, i64** %652, i64 -1
  %654 = bitcast i64** %653 to <2 x i64>*
  %655 = load <2 x i64>, <2 x i64>* %654, align 8, !alias.scope !47
  %656 = getelementptr inbounds i64*, i64** %647, i64 -1
  %657 = bitcast i64** %656 to <2 x i64>*
  store <2 x i64> %651, <2 x i64>* %657, align 8, !alias.scope !50, !noalias !47
  %658 = getelementptr inbounds i64*, i64** %647, i64 -2
  %659 = getelementptr inbounds i64*, i64** %658, i64 -1
  %660 = bitcast i64** %659 to <2 x i64>*
  store <2 x i64> %655, <2 x i64>* %660, align 8, !alias.scope !50, !noalias !47
  br label %661

661:                                              ; preds = %639, %642
  %662 = icmp eq i64 %569, %585
  br i1 %662, label %733, label %663

663:                                              ; preds = %661, %571, %564
  %664 = phi i64** [ %553, %571 ], [ %553, %564 ], [ %587, %661 ]
  %665 = phi i64** [ %562, %571 ], [ %562, %564 ], [ %589, %661 ]
  %666 = getelementptr i64*, i64** %665, i64 -1
  %667 = ptrtoint i64** %666 to i64
  %668 = sub i64 %667, %561
  %669 = lshr i64 %668, 3
  %670 = add nuw nsw i64 %669, 1
  %671 = and i64 %670, 7
  %672 = icmp eq i64 %671, 0
  br i1 %672, label %684, label %673

673:                                              ; preds = %663, %673
  %674 = phi i64** [ %677, %673 ], [ %664, %663 ]
  %675 = phi i64** [ %678, %673 ], [ %665, %663 ]
  %676 = phi i64 [ %682, %673 ], [ %671, %663 ]
  %677 = getelementptr inbounds i64*, i64** %674, i64 -1
  %678 = getelementptr inbounds i64*, i64** %675, i64 -1
  %679 = bitcast i64** %678 to i64*
  %680 = load i64, i64* %679, align 8
  %681 = bitcast i64** %677 to i64*
  store i64 %680, i64* %681, align 8
  %682 = add i64 %676, -1
  %683 = icmp eq i64 %682, 0
  br i1 %683, label %684, label %673, !llvm.loop !53

684:                                              ; preds = %673, %663
  %685 = phi i64** [ undef, %663 ], [ %677, %673 ]
  %686 = phi i64** [ %664, %663 ], [ %677, %673 ]
  %687 = phi i64** [ %665, %663 ], [ %678, %673 ]
  %688 = icmp ult i64 %668, 56
  br i1 %688, label %733, label %689

689:                                              ; preds = %684, %689
  %690 = phi i64** [ %727, %689 ], [ %686, %684 ]
  %691 = phi i64** [ %728, %689 ], [ %687, %684 ]
  %692 = getelementptr inbounds i64*, i64** %690, i64 -1
  %693 = getelementptr inbounds i64*, i64** %691, i64 -1
  %694 = bitcast i64** %693 to i64*
  %695 = load i64, i64* %694, align 8
  %696 = bitcast i64** %692 to i64*
  store i64 %695, i64* %696, align 8
  %697 = getelementptr inbounds i64*, i64** %690, i64 -2
  %698 = getelementptr inbounds i64*, i64** %691, i64 -2
  %699 = bitcast i64** %698 to i64*
  %700 = load i64, i64* %699, align 8
  %701 = bitcast i64** %697 to i64*
  store i64 %700, i64* %701, align 8
  %702 = getelementptr inbounds i64*, i64** %690, i64 -3
  %703 = getelementptr inbounds i64*, i64** %691, i64 -3
  %704 = bitcast i64** %703 to i64*
  %705 = load i64, i64* %704, align 8
  %706 = bitcast i64** %702 to i64*
  store i64 %705, i64* %706, align 8
  %707 = getelementptr inbounds i64*, i64** %690, i64 -4
  %708 = getelementptr inbounds i64*, i64** %691, i64 -4
  %709 = bitcast i64** %708 to i64*
  %710 = load i64, i64* %709, align 8
  %711 = bitcast i64** %707 to i64*
  store i64 %710, i64* %711, align 8
  %712 = getelementptr inbounds i64*, i64** %690, i64 -5
  %713 = getelementptr inbounds i64*, i64** %691, i64 -5
  %714 = bitcast i64** %713 to i64*
  %715 = load i64, i64* %714, align 8
  %716 = bitcast i64** %712 to i64*
  store i64 %715, i64* %716, align 8
  %717 = getelementptr inbounds i64*, i64** %690, i64 -6
  %718 = getelementptr inbounds i64*, i64** %691, i64 -6
  %719 = bitcast i64** %718 to i64*
  %720 = load i64, i64* %719, align 8
  %721 = bitcast i64** %717 to i64*
  store i64 %720, i64* %721, align 8
  %722 = getelementptr inbounds i64*, i64** %690, i64 -7
  %723 = getelementptr inbounds i64*, i64** %691, i64 -7
  %724 = bitcast i64** %723 to i64*
  %725 = load i64, i64* %724, align 8
  %726 = bitcast i64** %722 to i64*
  store i64 %725, i64* %726, align 8
  %727 = getelementptr inbounds i64*, i64** %690, i64 -8
  %728 = getelementptr inbounds i64*, i64** %691, i64 -8
  %729 = bitcast i64** %728 to i64*
  %730 = load i64, i64* %729, align 8
  %731 = bitcast i64** %727 to i64*
  store i64 %730, i64* %731, align 8
  %732 = icmp eq i64** %728, %560
  br i1 %732, label %733, label %689, !llvm.loop !54

733:                                              ; preds = %684, %689, %661, %550
  %734 = phi i64** [ %553, %550 ], [ %587, %661 ], [ %685, %684 ], [ %727, %689 ]
  %735 = ptrtoint i64** %734 to i64
  store i64 %735, i64* %518, align 8
  store i64 %558, i64* %517, align 8
  store i64 %555, i64* %527, align 8
  br label %736

736:                                              ; preds = %508, %733
  %737 = phi i64 [ %514, %508 ], [ %555, %733 ]
  %738 = phi i64** [ %513, %508 ], [ %554, %733 ]
  %739 = phi i64** [ %510, %508 ], [ %557, %733 ]
  %740 = load i64, i64* %6, align 8
  %741 = icmp ult i64** %739, %738
  br i1 %741, label %742, label %747

742:                                              ; preds = %736
  %743 = bitcast i64** %739 to i64*
  store i64 %740, i64* %743, align 8
  %744 = getelementptr inbounds i64*, i64** %739, i64 1
  %745 = ptrtoint i64** %744 to i64
  %746 = bitcast i64*** %502 to i64*
  store i64 %745, i64* %746, align 8
  br label %972

747:                                              ; preds = %736
  %748 = ptrtoint i64** %739 to i64
  %749 = bitcast i64*** %502 to i64*
  %750 = inttoptr i64 %26 to i64*
  %751 = load i64, i64* %750, align 8
  %752 = sub i64 %748, %751
  %753 = ashr exact i64 %752, 3
  %754 = add nsw i64 %753, 1
  %755 = icmp ugt i64 %754, 268435455
  br i1 %755, label %756, label %758

756:                                              ; preds = %747
  %757 = inttoptr i64 %26 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %757) #14
  unreachable

758:                                              ; preds = %747
  %759 = bitcast i64*** %504 to i64*
  %760 = sub i64 %737, %751
  %761 = ashr exact i64 %760, 3
  %762 = icmp ult i64 %761, 134217727
  br i1 %762, label %763, label %768

763:                                              ; preds = %758
  %764 = ashr exact i64 %760, 2
  %765 = icmp ult i64 %764, %754
  %766 = select i1 %765, i64 %754, i64 %764
  %767 = icmp eq i64 %766, 0
  br i1 %767, label %786, label %768

768:                                              ; preds = %763, %758
  %769 = phi i64 [ %766, %763 ], [ 268435455, %758 ]
  %770 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %28, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %771 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %770, align 8
  %772 = shl i64 %769, 3
  %773 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %771, i64 0, i32 2
  %774 = load i64, i64* %773, align 8
  %775 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %771, i64 0, i32 3
  %776 = load i64, i64* %775, align 8
  %777 = sub i64 %776, %774
  %778 = icmp ugt i64 %772, %777
  br i1 %778, label %779, label %781, !prof !27

779:                                              ; preds = %768
  %780 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %771, i64 %772) #13
  br label %783

781:                                              ; preds = %768
  %782 = add i64 %774, %772
  store i64 %782, i64* %773, align 8
  br label %783

783:                                              ; preds = %781, %779
  %784 = phi i64 [ %780, %779 ], [ %774, %781 ]
  %785 = inttoptr i64 %784 to i64**
  br label %786

786:                                              ; preds = %783, %763
  %787 = phi i64 [ %769, %783 ], [ 0, %763 ]
  %788 = phi i64** [ %785, %783 ], [ null, %763 ]
  %789 = getelementptr inbounds i64*, i64** %788, i64 %753
  %790 = getelementptr inbounds i64*, i64** %788, i64 %787
  %791 = ptrtoint i64** %790 to i64
  %792 = bitcast i64** %789 to i64*
  store i64 %740, i64* %792, align 8
  %793 = getelementptr inbounds i64*, i64** %789, i64 1
  %794 = ptrtoint i64** %793 to i64
  %795 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %28, i64 0, i32 0, i32 0, i32 0
  %796 = load i64**, i64*** %795, align 8
  %797 = ptrtoint i64** %796 to i64
  %798 = load i64**, i64*** %502, align 8
  %799 = icmp eq i64** %798, %796
  br i1 %799, label %969, label %800

800:                                              ; preds = %786
  %801 = getelementptr i64*, i64** %798, i64 -1
  %802 = ptrtoint i64** %801 to i64
  %803 = sub i64 %802, %797
  %804 = lshr i64 %803, 3
  %805 = add nuw nsw i64 %804, 1
  %806 = icmp ult i64 %805, 4
  br i1 %806, label %899, label %807

807:                                              ; preds = %800
  %808 = getelementptr i64*, i64** %798, i64 -1
  %809 = ptrtoint i64** %808 to i64
  %810 = sub i64 %809, %797
  %811 = lshr i64 %810, 3
  %812 = xor i64 %811, -1
  %813 = add nsw i64 %753, %812
  %814 = getelementptr i64*, i64** %788, i64 %813
  %815 = xor i64 %811, -1
  %816 = getelementptr i64*, i64** %798, i64 %815
  %817 = icmp ult i64** %814, %798
  %818 = icmp ult i64** %816, %789
  %819 = and i1 %817, %818
  br i1 %819, label %899, label %820

820:                                              ; preds = %807
  %821 = and i64 %805, 4611686018427387900
  %822 = sub nsw i64 0, %821
  %823 = getelementptr i64*, i64** %789, i64 %822
  %824 = sub nsw i64 0, %821
  %825 = getelementptr i64*, i64** %798, i64 %824
  %826 = add nsw i64 %821, -4
  %827 = lshr exact i64 %826, 2
  %828 = add nuw nsw i64 %827, 1
  %829 = and i64 %828, 1
  %830 = icmp eq i64 %826, 0
  br i1 %830, label %877, label %831

831:                                              ; preds = %820
  %832 = sub nuw nsw i64 %828, %829
  %833 = getelementptr i64*, i64** %789, i64 -1
  %834 = getelementptr i64*, i64** %798, i64 -1
  %835 = getelementptr i64*, i64** %789, i64 -1
  %836 = getelementptr i64*, i64** %798, i64 -1
  br label %837

837:                                              ; preds = %837, %831
  %838 = phi i64 [ 0, %831 ], [ %872, %837 ]
  %839 = phi i64 [ %832, %831 ], [ %873, %837 ]
  %840 = sub i64 0, %838
  %841 = sub i64 0, %838
  %842 = getelementptr inbounds i64*, i64** %833, i64 %840
  %843 = getelementptr inbounds i64*, i64** %834, i64 %841
  %844 = getelementptr inbounds i64*, i64** %843, i64 -1
  %845 = bitcast i64** %844 to <2 x i64>*
  %846 = load <2 x i64>, <2 x i64>* %845, align 8, !alias.scope !55
  %847 = getelementptr inbounds i64*, i64** %843, i64 -2
  %848 = getelementptr inbounds i64*, i64** %847, i64 -1
  %849 = bitcast i64** %848 to <2 x i64>*
  %850 = load <2 x i64>, <2 x i64>* %849, align 8, !alias.scope !55
  %851 = getelementptr inbounds i64*, i64** %842, i64 -1
  %852 = bitcast i64** %851 to <2 x i64>*
  store <2 x i64> %846, <2 x i64>* %852, align 8, !alias.scope !58, !noalias !55
  %853 = getelementptr inbounds i64*, i64** %842, i64 -2
  %854 = getelementptr inbounds i64*, i64** %853, i64 -1
  %855 = bitcast i64** %854 to <2 x i64>*
  store <2 x i64> %850, <2 x i64>* %855, align 8, !alias.scope !58, !noalias !55
  %856 = sub nuw nsw i64 -4, %838
  %857 = sub nuw nsw i64 -4, %838
  %858 = getelementptr inbounds i64*, i64** %835, i64 %856
  %859 = getelementptr inbounds i64*, i64** %836, i64 %857
  %860 = getelementptr inbounds i64*, i64** %859, i64 -1
  %861 = bitcast i64** %860 to <2 x i64>*
  %862 = load <2 x i64>, <2 x i64>* %861, align 8, !alias.scope !55
  %863 = getelementptr inbounds i64*, i64** %859, i64 -2
  %864 = getelementptr inbounds i64*, i64** %863, i64 -1
  %865 = bitcast i64** %864 to <2 x i64>*
  %866 = load <2 x i64>, <2 x i64>* %865, align 8, !alias.scope !55
  %867 = getelementptr inbounds i64*, i64** %858, i64 -1
  %868 = bitcast i64** %867 to <2 x i64>*
  store <2 x i64> %862, <2 x i64>* %868, align 8, !alias.scope !58, !noalias !55
  %869 = getelementptr inbounds i64*, i64** %858, i64 -2
  %870 = getelementptr inbounds i64*, i64** %869, i64 -1
  %871 = bitcast i64** %870 to <2 x i64>*
  store <2 x i64> %866, <2 x i64>* %871, align 8, !alias.scope !58, !noalias !55
  %872 = add i64 %838, 8
  %873 = add i64 %839, -2
  %874 = icmp eq i64 %873, 0
  br i1 %874, label %875, label %837, !llvm.loop !60

875:                                              ; preds = %837
  %876 = sub nuw nsw i64 -8, %838
  br label %877

877:                                              ; preds = %875, %820
  %878 = phi i64 [ 0, %820 ], [ %876, %875 ]
  %879 = icmp eq i64 %829, 0
  br i1 %879, label %897, label %880

880:                                              ; preds = %877
  %881 = getelementptr i64*, i64** %789, i64 -1
  %882 = getelementptr i64*, i64** %798, i64 -1
  %883 = getelementptr inbounds i64*, i64** %881, i64 %878
  %884 = getelementptr inbounds i64*, i64** %882, i64 %878
  %885 = getelementptr inbounds i64*, i64** %884, i64 -1
  %886 = bitcast i64** %885 to <2 x i64>*
  %887 = load <2 x i64>, <2 x i64>* %886, align 8, !alias.scope !55
  %888 = getelementptr inbounds i64*, i64** %884, i64 -2
  %889 = getelementptr inbounds i64*, i64** %888, i64 -1
  %890 = bitcast i64** %889 to <2 x i64>*
  %891 = load <2 x i64>, <2 x i64>* %890, align 8, !alias.scope !55
  %892 = getelementptr inbounds i64*, i64** %883, i64 -1
  %893 = bitcast i64** %892 to <2 x i64>*
  store <2 x i64> %887, <2 x i64>* %893, align 8, !alias.scope !58, !noalias !55
  %894 = getelementptr inbounds i64*, i64** %883, i64 -2
  %895 = getelementptr inbounds i64*, i64** %894, i64 -1
  %896 = bitcast i64** %895 to <2 x i64>*
  store <2 x i64> %891, <2 x i64>* %896, align 8, !alias.scope !58, !noalias !55
  br label %897

897:                                              ; preds = %877, %880
  %898 = icmp eq i64 %805, %821
  br i1 %898, label %969, label %899

899:                                              ; preds = %897, %807, %800
  %900 = phi i64** [ %789, %807 ], [ %789, %800 ], [ %823, %897 ]
  %901 = phi i64** [ %798, %807 ], [ %798, %800 ], [ %825, %897 ]
  %902 = getelementptr i64*, i64** %901, i64 -1
  %903 = ptrtoint i64** %902 to i64
  %904 = sub i64 %903, %797
  %905 = lshr i64 %904, 3
  %906 = add nuw nsw i64 %905, 1
  %907 = and i64 %906, 7
  %908 = icmp eq i64 %907, 0
  br i1 %908, label %920, label %909

909:                                              ; preds = %899, %909
  %910 = phi i64** [ %913, %909 ], [ %900, %899 ]
  %911 = phi i64** [ %914, %909 ], [ %901, %899 ]
  %912 = phi i64 [ %918, %909 ], [ %907, %899 ]
  %913 = getelementptr inbounds i64*, i64** %910, i64 -1
  %914 = getelementptr inbounds i64*, i64** %911, i64 -1
  %915 = bitcast i64** %914 to i64*
  %916 = load i64, i64* %915, align 8
  %917 = bitcast i64** %913 to i64*
  store i64 %916, i64* %917, align 8
  %918 = add i64 %912, -1
  %919 = icmp eq i64 %918, 0
  br i1 %919, label %920, label %909, !llvm.loop !61

920:                                              ; preds = %909, %899
  %921 = phi i64** [ undef, %899 ], [ %913, %909 ]
  %922 = phi i64** [ %900, %899 ], [ %913, %909 ]
  %923 = phi i64** [ %901, %899 ], [ %914, %909 ]
  %924 = icmp ult i64 %904, 56
  br i1 %924, label %969, label %925

925:                                              ; preds = %920, %925
  %926 = phi i64** [ %963, %925 ], [ %922, %920 ]
  %927 = phi i64** [ %964, %925 ], [ %923, %920 ]
  %928 = getelementptr inbounds i64*, i64** %926, i64 -1
  %929 = getelementptr inbounds i64*, i64** %927, i64 -1
  %930 = bitcast i64** %929 to i64*
  %931 = load i64, i64* %930, align 8
  %932 = bitcast i64** %928 to i64*
  store i64 %931, i64* %932, align 8
  %933 = getelementptr inbounds i64*, i64** %926, i64 -2
  %934 = getelementptr inbounds i64*, i64** %927, i64 -2
  %935 = bitcast i64** %934 to i64*
  %936 = load i64, i64* %935, align 8
  %937 = bitcast i64** %933 to i64*
  store i64 %936, i64* %937, align 8
  %938 = getelementptr inbounds i64*, i64** %926, i64 -3
  %939 = getelementptr inbounds i64*, i64** %927, i64 -3
  %940 = bitcast i64** %939 to i64*
  %941 = load i64, i64* %940, align 8
  %942 = bitcast i64** %938 to i64*
  store i64 %941, i64* %942, align 8
  %943 = getelementptr inbounds i64*, i64** %926, i64 -4
  %944 = getelementptr inbounds i64*, i64** %927, i64 -4
  %945 = bitcast i64** %944 to i64*
  %946 = load i64, i64* %945, align 8
  %947 = bitcast i64** %943 to i64*
  store i64 %946, i64* %947, align 8
  %948 = getelementptr inbounds i64*, i64** %926, i64 -5
  %949 = getelementptr inbounds i64*, i64** %927, i64 -5
  %950 = bitcast i64** %949 to i64*
  %951 = load i64, i64* %950, align 8
  %952 = bitcast i64** %948 to i64*
  store i64 %951, i64* %952, align 8
  %953 = getelementptr inbounds i64*, i64** %926, i64 -6
  %954 = getelementptr inbounds i64*, i64** %927, i64 -6
  %955 = bitcast i64** %954 to i64*
  %956 = load i64, i64* %955, align 8
  %957 = bitcast i64** %953 to i64*
  store i64 %956, i64* %957, align 8
  %958 = getelementptr inbounds i64*, i64** %926, i64 -7
  %959 = getelementptr inbounds i64*, i64** %927, i64 -7
  %960 = bitcast i64** %959 to i64*
  %961 = load i64, i64* %960, align 8
  %962 = bitcast i64** %958 to i64*
  store i64 %961, i64* %962, align 8
  %963 = getelementptr inbounds i64*, i64** %926, i64 -8
  %964 = getelementptr inbounds i64*, i64** %927, i64 -8
  %965 = bitcast i64** %964 to i64*
  %966 = load i64, i64* %965, align 8
  %967 = bitcast i64** %963 to i64*
  store i64 %966, i64* %967, align 8
  %968 = icmp eq i64** %964, %796
  br i1 %968, label %969, label %925, !llvm.loop !62

969:                                              ; preds = %920, %925, %897, %786
  %970 = phi i64** [ %789, %786 ], [ %823, %897 ], [ %921, %920 ], [ %963, %925 ]
  %971 = ptrtoint i64** %970 to i64
  store i64 %971, i64* %750, align 8
  store i64 %794, i64* %749, align 8
  store i64 %791, i64* %759, align 8
  br label %972

972:                                              ; preds = %969, %742, %498, %274
  %973 = or i64 %26, 2
  store i64 %973, i64* %6, align 8
  br label %1980

974:                                              ; preds = %3
  %975 = add i64 %7, -2
  %976 = inttoptr i64 %975 to %"class.v8::internal::ZoneVector.1376"*
  %977 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %976, i64 0, i32 0, i32 0, i32 1
  %978 = bitcast i64*** %977 to i64*
  %979 = load i64, i64* %978, align 8
  %980 = inttoptr i64 %975 to i64*
  %981 = load i64, i64* %980, align 8
  %982 = icmp eq i64 %979, %981
  br i1 %982, label %997, label %983

983:                                              ; preds = %974
  %984 = inttoptr i64 %981 to i64**
  %985 = sub i64 %979, %981
  %986 = ashr exact i64 %985, 3
  br label %987

987:                                              ; preds = %992, %983
  %988 = phi i64 [ 0, %983 ], [ %994, %992 ]
  %989 = getelementptr inbounds i64*, i64** %984, i64 %988
  %990 = load i64*, i64** %989, align 8
  %991 = icmp eq i64* %990, %1
  br i1 %991, label %1980, label %992

992:                                              ; preds = %987
  %993 = icmp ule i64* %990, %1
  %994 = add nuw i64 %988, 1
  %995 = icmp ult i64 %994, %986
  %996 = and i1 %993, %995
  br i1 %996, label %987, label %997

997:                                              ; preds = %992, %974
  %998 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %999 = load i64, i64* %998, align 8
  %1000 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %1001 = load i64, i64* %1000, align 8
  %1002 = sub i64 %1001, %999
  %1003 = icmp ult i64 %1002, 32
  br i1 %1003, label %1004, label %1006, !prof !27

1004:                                             ; preds = %997
  %1005 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 32) #13
  br label %1008

1006:                                             ; preds = %997
  %1007 = add i64 %999, 32
  store i64 %1007, i64* %998, align 8
  br label %1008

1008:                                             ; preds = %1004, %1006
  %1009 = phi i64 [ %1005, %1004 ], [ %999, %1006 ]
  %1010 = inttoptr i64 %1009 to i8*
  %1011 = inttoptr i64 %1009 to %"class.v8::internal::ZoneVector.1376"*
  %1012 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %1011, i64 0, i32 0, i32 0, i32 2, i32 1
  %1013 = bitcast %"struct.std::__1::__compressed_pair_elem.1380"* %1012 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %1010, i8 0, i64 24, i1 false) #13
  store i64 %5, i64* %1013, align 8
  %1014 = load i64, i64* %978, align 8
  %1015 = load i64, i64* %980, align 8
  %1016 = sub i64 %1014, %1015
  %1017 = ashr exact i64 %1016, 3
  %1018 = add nsw i64 %1017, 1
  %1019 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %1011, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %1020 = bitcast i64*** %1019 to i64*
  %1021 = load i64, i64* %1020, align 8
  %1022 = inttoptr i64 %1009 to i64*
  %1023 = load i64, i64* %1022, align 8
  %1024 = sub i64 %1021, %1023
  %1025 = ashr exact i64 %1024, 3
  %1026 = icmp ult i64 %1025, %1018
  %1027 = inttoptr i64 %1021 to i64**
  br i1 %1026, label %1028, label %1231

1028:                                             ; preds = %1008
  %1029 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %1011, i64 0, i32 0, i32 0, i32 1
  %1030 = bitcast i64*** %1029 to i64*
  %1031 = load i64, i64* %1030, align 8
  %1032 = sub i64 %1031, %1023
  %1033 = ashr exact i64 %1032, 3
  %1034 = shl i64 %1018, 3
  %1035 = load i64, i64* %998, align 8
  %1036 = load i64, i64* %1000, align 8
  %1037 = sub i64 %1036, %1035
  %1038 = icmp ugt i64 %1034, %1037
  br i1 %1038, label %1039, label %1041, !prof !27

1039:                                             ; preds = %1028
  %1040 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %1034) #13
  br label %1043

1041:                                             ; preds = %1028
  %1042 = add i64 %1035, %1034
  store i64 %1042, i64* %998, align 8
  br label %1043

1043:                                             ; preds = %1041, %1039
  %1044 = phi i64 [ %1040, %1039 ], [ %1035, %1041 ]
  %1045 = inttoptr i64 %1044 to i64**
  %1046 = getelementptr inbounds i64*, i64** %1045, i64 %1033
  %1047 = ptrtoint i64** %1046 to i64
  %1048 = getelementptr inbounds i64*, i64** %1045, i64 %1018
  %1049 = ptrtoint i64** %1048 to i64
  %1050 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %1011, i64 0, i32 0, i32 0, i32 0
  %1051 = load i64**, i64*** %1050, align 8
  %1052 = ptrtoint i64** %1051 to i64
  %1053 = load i64**, i64*** %1029, align 8
  %1054 = icmp eq i64** %1053, %1051
  br i1 %1054, label %1227, label %1055

1055:                                             ; preds = %1043
  %1056 = getelementptr i64*, i64** %1053, i64 -1
  %1057 = ptrtoint i64** %1056 to i64
  %1058 = sub i64 %1057, %1052
  %1059 = lshr i64 %1058, 3
  %1060 = add nuw nsw i64 %1059, 1
  %1061 = icmp ult i64 %1060, 4
  br i1 %1061, label %1154, label %1062

1062:                                             ; preds = %1055
  %1063 = getelementptr i64*, i64** %1053, i64 -1
  %1064 = ptrtoint i64** %1063 to i64
  %1065 = sub i64 %1064, %1052
  %1066 = lshr i64 %1065, 3
  %1067 = xor i64 %1066, -1
  %1068 = add nsw i64 %1033, %1067
  %1069 = getelementptr i64*, i64** %1045, i64 %1068
  %1070 = xor i64 %1066, -1
  %1071 = getelementptr i64*, i64** %1053, i64 %1070
  %1072 = icmp ult i64** %1069, %1053
  %1073 = icmp ult i64** %1071, %1046
  %1074 = and i1 %1072, %1073
  br i1 %1074, label %1154, label %1075

1075:                                             ; preds = %1062
  %1076 = and i64 %1060, 4611686018427387900
  %1077 = sub nsw i64 0, %1076
  %1078 = getelementptr i64*, i64** %1046, i64 %1077
  %1079 = sub nsw i64 0, %1076
  %1080 = getelementptr i64*, i64** %1053, i64 %1079
  %1081 = add nsw i64 %1076, -4
  %1082 = lshr exact i64 %1081, 2
  %1083 = add nuw nsw i64 %1082, 1
  %1084 = and i64 %1083, 1
  %1085 = icmp eq i64 %1081, 0
  br i1 %1085, label %1130, label %1086

1086:                                             ; preds = %1075
  %1087 = sub nuw nsw i64 %1083, %1084
  %1088 = getelementptr i64*, i64** %1046, i64 -1
  %1089 = getelementptr i64*, i64** %1053, i64 -1
  %1090 = getelementptr i64*, i64** %1046, i64 -1
  %1091 = getelementptr i64*, i64** %1053, i64 -1
  br label %1092

1092:                                             ; preds = %1092, %1086
  %1093 = phi i64 [ 0, %1086 ], [ %1127, %1092 ]
  %1094 = phi i64 [ %1087, %1086 ], [ %1128, %1092 ]
  %1095 = sub i64 0, %1093
  %1096 = sub i64 0, %1093
  %1097 = getelementptr inbounds i64*, i64** %1088, i64 %1095
  %1098 = getelementptr inbounds i64*, i64** %1089, i64 %1096
  %1099 = getelementptr inbounds i64*, i64** %1098, i64 -1
  %1100 = bitcast i64** %1099 to <2 x i64>*
  %1101 = load <2 x i64>, <2 x i64>* %1100, align 8, !alias.scope !63
  %1102 = getelementptr inbounds i64*, i64** %1098, i64 -2
  %1103 = getelementptr inbounds i64*, i64** %1102, i64 -1
  %1104 = bitcast i64** %1103 to <2 x i64>*
  %1105 = load <2 x i64>, <2 x i64>* %1104, align 8, !alias.scope !63
  %1106 = getelementptr inbounds i64*, i64** %1097, i64 -1
  %1107 = bitcast i64** %1106 to <2 x i64>*
  store <2 x i64> %1101, <2 x i64>* %1107, align 8, !alias.scope !66, !noalias !63
  %1108 = getelementptr inbounds i64*, i64** %1097, i64 -2
  %1109 = getelementptr inbounds i64*, i64** %1108, i64 -1
  %1110 = bitcast i64** %1109 to <2 x i64>*
  store <2 x i64> %1105, <2 x i64>* %1110, align 8, !alias.scope !66, !noalias !63
  %1111 = sub nuw nsw i64 -4, %1093
  %1112 = sub nuw nsw i64 -4, %1093
  %1113 = getelementptr inbounds i64*, i64** %1090, i64 %1111
  %1114 = getelementptr inbounds i64*, i64** %1091, i64 %1112
  %1115 = getelementptr inbounds i64*, i64** %1114, i64 -1
  %1116 = bitcast i64** %1115 to <2 x i64>*
  %1117 = load <2 x i64>, <2 x i64>* %1116, align 8, !alias.scope !63
  %1118 = getelementptr inbounds i64*, i64** %1114, i64 -2
  %1119 = getelementptr inbounds i64*, i64** %1118, i64 -1
  %1120 = bitcast i64** %1119 to <2 x i64>*
  %1121 = load <2 x i64>, <2 x i64>* %1120, align 8, !alias.scope !63
  %1122 = getelementptr inbounds i64*, i64** %1113, i64 -1
  %1123 = bitcast i64** %1122 to <2 x i64>*
  store <2 x i64> %1117, <2 x i64>* %1123, align 8, !alias.scope !66, !noalias !63
  %1124 = getelementptr inbounds i64*, i64** %1113, i64 -2
  %1125 = getelementptr inbounds i64*, i64** %1124, i64 -1
  %1126 = bitcast i64** %1125 to <2 x i64>*
  store <2 x i64> %1121, <2 x i64>* %1126, align 8, !alias.scope !66, !noalias !63
  %1127 = add i64 %1093, 8
  %1128 = add i64 %1094, -2
  %1129 = icmp eq i64 %1128, 0
  br i1 %1129, label %1130, label %1092, !llvm.loop !68

1130:                                             ; preds = %1092, %1075
  %1131 = phi i64 [ 0, %1075 ], [ %1127, %1092 ]
  %1132 = icmp eq i64 %1084, 0
  br i1 %1132, label %1152, label %1133

1133:                                             ; preds = %1130
  %1134 = sub i64 0, %1131
  %1135 = getelementptr i64*, i64** %1046, i64 -1
  %1136 = sub i64 0, %1131
  %1137 = getelementptr i64*, i64** %1053, i64 -1
  %1138 = getelementptr inbounds i64*, i64** %1135, i64 %1134
  %1139 = getelementptr inbounds i64*, i64** %1137, i64 %1136
  %1140 = getelementptr inbounds i64*, i64** %1139, i64 -1
  %1141 = bitcast i64** %1140 to <2 x i64>*
  %1142 = load <2 x i64>, <2 x i64>* %1141, align 8, !alias.scope !63
  %1143 = getelementptr inbounds i64*, i64** %1139, i64 -2
  %1144 = getelementptr inbounds i64*, i64** %1143, i64 -1
  %1145 = bitcast i64** %1144 to <2 x i64>*
  %1146 = load <2 x i64>, <2 x i64>* %1145, align 8, !alias.scope !63
  %1147 = getelementptr inbounds i64*, i64** %1138, i64 -1
  %1148 = bitcast i64** %1147 to <2 x i64>*
  store <2 x i64> %1142, <2 x i64>* %1148, align 8, !alias.scope !66, !noalias !63
  %1149 = getelementptr inbounds i64*, i64** %1138, i64 -2
  %1150 = getelementptr inbounds i64*, i64** %1149, i64 -1
  %1151 = bitcast i64** %1150 to <2 x i64>*
  store <2 x i64> %1146, <2 x i64>* %1151, align 8, !alias.scope !66, !noalias !63
  br label %1152

1152:                                             ; preds = %1130, %1133
  %1153 = icmp eq i64 %1060, %1076
  br i1 %1153, label %1224, label %1154

1154:                                             ; preds = %1152, %1062, %1055
  %1155 = phi i64** [ %1046, %1062 ], [ %1046, %1055 ], [ %1078, %1152 ]
  %1156 = phi i64** [ %1053, %1062 ], [ %1053, %1055 ], [ %1080, %1152 ]
  %1157 = getelementptr i64*, i64** %1156, i64 -1
  %1158 = ptrtoint i64** %1157 to i64
  %1159 = sub i64 %1158, %1052
  %1160 = lshr i64 %1159, 3
  %1161 = add nuw nsw i64 %1160, 1
  %1162 = and i64 %1161, 7
  %1163 = icmp eq i64 %1162, 0
  br i1 %1163, label %1175, label %1164

1164:                                             ; preds = %1154, %1164
  %1165 = phi i64** [ %1168, %1164 ], [ %1155, %1154 ]
  %1166 = phi i64** [ %1169, %1164 ], [ %1156, %1154 ]
  %1167 = phi i64 [ %1173, %1164 ], [ %1162, %1154 ]
  %1168 = getelementptr inbounds i64*, i64** %1165, i64 -1
  %1169 = getelementptr inbounds i64*, i64** %1166, i64 -1
  %1170 = bitcast i64** %1169 to i64*
  %1171 = load i64, i64* %1170, align 8
  %1172 = bitcast i64** %1168 to i64*
  store i64 %1171, i64* %1172, align 8
  %1173 = add i64 %1167, -1
  %1174 = icmp eq i64 %1173, 0
  br i1 %1174, label %1175, label %1164, !llvm.loop !69

1175:                                             ; preds = %1164, %1154
  %1176 = phi i64** [ undef, %1154 ], [ %1168, %1164 ]
  %1177 = phi i64** [ %1155, %1154 ], [ %1168, %1164 ]
  %1178 = phi i64** [ %1156, %1154 ], [ %1169, %1164 ]
  %1179 = icmp ult i64 %1159, 56
  br i1 %1179, label %1224, label %1180

1180:                                             ; preds = %1175, %1180
  %1181 = phi i64** [ %1218, %1180 ], [ %1177, %1175 ]
  %1182 = phi i64** [ %1219, %1180 ], [ %1178, %1175 ]
  %1183 = getelementptr inbounds i64*, i64** %1181, i64 -1
  %1184 = getelementptr inbounds i64*, i64** %1182, i64 -1
  %1185 = bitcast i64** %1184 to i64*
  %1186 = load i64, i64* %1185, align 8
  %1187 = bitcast i64** %1183 to i64*
  store i64 %1186, i64* %1187, align 8
  %1188 = getelementptr inbounds i64*, i64** %1181, i64 -2
  %1189 = getelementptr inbounds i64*, i64** %1182, i64 -2
  %1190 = bitcast i64** %1189 to i64*
  %1191 = load i64, i64* %1190, align 8
  %1192 = bitcast i64** %1188 to i64*
  store i64 %1191, i64* %1192, align 8
  %1193 = getelementptr inbounds i64*, i64** %1181, i64 -3
  %1194 = getelementptr inbounds i64*, i64** %1182, i64 -3
  %1195 = bitcast i64** %1194 to i64*
  %1196 = load i64, i64* %1195, align 8
  %1197 = bitcast i64** %1193 to i64*
  store i64 %1196, i64* %1197, align 8
  %1198 = getelementptr inbounds i64*, i64** %1181, i64 -4
  %1199 = getelementptr inbounds i64*, i64** %1182, i64 -4
  %1200 = bitcast i64** %1199 to i64*
  %1201 = load i64, i64* %1200, align 8
  %1202 = bitcast i64** %1198 to i64*
  store i64 %1201, i64* %1202, align 8
  %1203 = getelementptr inbounds i64*, i64** %1181, i64 -5
  %1204 = getelementptr inbounds i64*, i64** %1182, i64 -5
  %1205 = bitcast i64** %1204 to i64*
  %1206 = load i64, i64* %1205, align 8
  %1207 = bitcast i64** %1203 to i64*
  store i64 %1206, i64* %1207, align 8
  %1208 = getelementptr inbounds i64*, i64** %1181, i64 -6
  %1209 = getelementptr inbounds i64*, i64** %1182, i64 -6
  %1210 = bitcast i64** %1209 to i64*
  %1211 = load i64, i64* %1210, align 8
  %1212 = bitcast i64** %1208 to i64*
  store i64 %1211, i64* %1212, align 8
  %1213 = getelementptr inbounds i64*, i64** %1181, i64 -7
  %1214 = getelementptr inbounds i64*, i64** %1182, i64 -7
  %1215 = bitcast i64** %1214 to i64*
  %1216 = load i64, i64* %1215, align 8
  %1217 = bitcast i64** %1213 to i64*
  store i64 %1216, i64* %1217, align 8
  %1218 = getelementptr inbounds i64*, i64** %1181, i64 -8
  %1219 = getelementptr inbounds i64*, i64** %1182, i64 -8
  %1220 = bitcast i64** %1219 to i64*
  %1221 = load i64, i64* %1220, align 8
  %1222 = bitcast i64** %1218 to i64*
  store i64 %1221, i64* %1222, align 8
  %1223 = icmp eq i64** %1219, %1051
  br i1 %1223, label %1224, label %1180, !llvm.loop !70

1224:                                             ; preds = %1175, %1180, %1152
  %1225 = phi i64** [ %1078, %1152 ], [ %1176, %1175 ], [ %1218, %1180 ]
  %1226 = ptrtoint i64** %1225 to i64
  br label %1227

1227:                                             ; preds = %1224, %1043
  %1228 = phi i64 [ %1226, %1224 ], [ %1047, %1043 ]
  store i64 %1228, i64* %1022, align 8
  store i64 %1047, i64* %1030, align 8
  store i64 %1049, i64* %1020, align 8
  %1229 = load i64, i64* %978, align 8
  %1230 = load i64, i64* %980, align 8
  br label %1231

1231:                                             ; preds = %1008, %1227
  %1232 = phi i64** [ %1027, %1008 ], [ %1048, %1227 ]
  %1233 = phi i64 [ %1015, %1008 ], [ %1230, %1227 ]
  %1234 = phi i64 [ %1014, %1008 ], [ %1229, %1227 ]
  %1235 = icmp eq i64 %1234, %1233
  br i1 %1235, label %1492, label %1236

1236:                                             ; preds = %1231
  %1237 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %1011, i64 0, i32 0, i32 0, i32 1
  %1238 = bitcast i64*** %1237 to i64*
  %1239 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %1011, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %1240 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %1011, i64 0, i32 0, i32 0, i32 0
  br label %1241

1241:                                             ; preds = %1236, %1482
  %1242 = phi i64 [ %1233, %1236 ], [ %1485, %1482 ]
  %1243 = phi i64 [ 0, %1236 ], [ %1483, %1482 ]
  %1244 = inttoptr i64 %1242 to i64**
  %1245 = getelementptr inbounds i64*, i64** %1244, i64 %1243
  %1246 = load i64*, i64** %1245, align 8
  %1247 = icmp ugt i64* %1246, %1
  %1248 = ptrtoint i64* %1246 to i64
  br i1 %1247, label %1489, label %1249

1249:                                             ; preds = %1241
  %1250 = load i64**, i64*** %1237, align 8
  %1251 = load i64**, i64*** %1019, align 8
  %1252 = icmp eq i64** %1250, %1251
  %1253 = ptrtoint i64** %1251 to i64
  br i1 %1252, label %1258, label %1254

1254:                                             ; preds = %1249
  %1255 = bitcast i64** %1250 to i64*
  store i64 %1248, i64* %1255, align 8
  %1256 = getelementptr inbounds i64*, i64** %1250, i64 1
  %1257 = ptrtoint i64** %1256 to i64
  store i64 %1257, i64* %1238, align 8
  br label %1482

1258:                                             ; preds = %1249
  %1259 = ptrtoint i64** %1250 to i64
  %1260 = load i64, i64* %1022, align 8
  %1261 = sub i64 %1259, %1260
  %1262 = ashr exact i64 %1261, 3
  %1263 = add nsw i64 %1262, 1
  %1264 = icmp ugt i64 %1263, 268435455
  br i1 %1264, label %1265, label %1267

1265:                                             ; preds = %1258
  %1266 = inttoptr i64 %1009 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1266) #14
  unreachable

1267:                                             ; preds = %1258
  %1268 = sub i64 %1253, %1260
  %1269 = ashr exact i64 %1268, 3
  %1270 = icmp ult i64 %1269, 134217727
  br i1 %1270, label %1271, label %1276

1271:                                             ; preds = %1267
  %1272 = ashr exact i64 %1268, 2
  %1273 = icmp ult i64 %1272, %1263
  %1274 = select i1 %1273, i64 %1263, i64 %1272
  %1275 = icmp eq i64 %1274, 0
  br i1 %1275, label %1295, label %1276

1276:                                             ; preds = %1271, %1267
  %1277 = phi i64 [ %1274, %1271 ], [ 268435455, %1267 ]
  %1278 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1239, align 8
  %1279 = shl i64 %1277, 3
  %1280 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1278, i64 0, i32 2
  %1281 = load i64, i64* %1280, align 8
  %1282 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1278, i64 0, i32 3
  %1283 = load i64, i64* %1282, align 8
  %1284 = sub i64 %1283, %1281
  %1285 = icmp ugt i64 %1279, %1284
  br i1 %1285, label %1286, label %1288, !prof !27

1286:                                             ; preds = %1276
  %1287 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1278, i64 %1279) #13
  br label %1290

1288:                                             ; preds = %1276
  %1289 = add i64 %1281, %1279
  store i64 %1289, i64* %1280, align 8
  br label %1290

1290:                                             ; preds = %1288, %1286
  %1291 = phi i64 [ %1287, %1286 ], [ %1281, %1288 ]
  %1292 = inttoptr i64 %1291 to i64**
  %1293 = bitcast i64** %1245 to i64*
  %1294 = load i64, i64* %1293, align 8
  br label %1295

1295:                                             ; preds = %1271, %1290
  %1296 = phi i64 [ %1294, %1290 ], [ %1248, %1271 ]
  %1297 = phi i64 [ %1277, %1290 ], [ 0, %1271 ]
  %1298 = phi i64** [ %1292, %1290 ], [ null, %1271 ]
  %1299 = getelementptr inbounds i64*, i64** %1298, i64 %1262
  %1300 = getelementptr inbounds i64*, i64** %1298, i64 %1297
  %1301 = ptrtoint i64** %1300 to i64
  %1302 = bitcast i64** %1299 to i64*
  store i64 %1296, i64* %1302, align 8
  %1303 = getelementptr inbounds i64*, i64** %1299, i64 1
  %1304 = ptrtoint i64** %1303 to i64
  %1305 = load i64**, i64*** %1240, align 8
  %1306 = ptrtoint i64** %1305 to i64
  %1307 = load i64**, i64*** %1237, align 8
  %1308 = icmp eq i64** %1307, %1305
  br i1 %1308, label %1479, label %1309

1309:                                             ; preds = %1295
  %1310 = getelementptr i64*, i64** %1307, i64 -1
  %1311 = ptrtoint i64** %1310 to i64
  %1312 = sub i64 %1311, %1306
  %1313 = lshr i64 %1312, 3
  %1314 = add nuw nsw i64 %1313, 1
  %1315 = icmp ult i64 %1314, 4
  br i1 %1315, label %1409, label %1316

1316:                                             ; preds = %1309
  %1317 = getelementptr i64*, i64** %1298, i64 -1
  %1318 = getelementptr i64*, i64** %1307, i64 -1
  %1319 = ptrtoint i64** %1318 to i64
  %1320 = sub i64 %1319, %1306
  %1321 = lshr i64 %1320, 3
  %1322 = sub nsw i64 %1262, %1321
  %1323 = getelementptr i64*, i64** %1317, i64 %1322
  %1324 = getelementptr i64*, i64** %1307, i64 -1
  %1325 = sub nsw i64 0, %1321
  %1326 = getelementptr i64*, i64** %1324, i64 %1325
  %1327 = icmp ult i64** %1323, %1307
  %1328 = icmp ult i64** %1326, %1299
  %1329 = and i1 %1327, %1328
  br i1 %1329, label %1409, label %1330

1330:                                             ; preds = %1316
  %1331 = and i64 %1314, 4611686018427387900
  %1332 = sub nsw i64 0, %1331
  %1333 = getelementptr i64*, i64** %1299, i64 %1332
  %1334 = sub nsw i64 0, %1331
  %1335 = getelementptr i64*, i64** %1307, i64 %1334
  %1336 = add nsw i64 %1331, -4
  %1337 = lshr exact i64 %1336, 2
  %1338 = add nuw nsw i64 %1337, 1
  %1339 = and i64 %1338, 1
  %1340 = icmp eq i64 %1336, 0
  br i1 %1340, label %1385, label %1341

1341:                                             ; preds = %1330
  %1342 = sub nuw nsw i64 %1338, %1339
  %1343 = getelementptr i64*, i64** %1299, i64 -1
  %1344 = getelementptr i64*, i64** %1307, i64 -1
  %1345 = getelementptr i64*, i64** %1299, i64 -1
  %1346 = getelementptr i64*, i64** %1307, i64 -1
  br label %1347

1347:                                             ; preds = %1347, %1341
  %1348 = phi i64 [ 0, %1341 ], [ %1382, %1347 ]
  %1349 = phi i64 [ %1342, %1341 ], [ %1383, %1347 ]
  %1350 = sub i64 0, %1348
  %1351 = sub i64 0, %1348
  %1352 = getelementptr inbounds i64*, i64** %1343, i64 %1350
  %1353 = getelementptr inbounds i64*, i64** %1344, i64 %1351
  %1354 = getelementptr inbounds i64*, i64** %1353, i64 -1
  %1355 = bitcast i64** %1354 to <2 x i64>*
  %1356 = load <2 x i64>, <2 x i64>* %1355, align 8, !alias.scope !71
  %1357 = getelementptr inbounds i64*, i64** %1353, i64 -2
  %1358 = getelementptr inbounds i64*, i64** %1357, i64 -1
  %1359 = bitcast i64** %1358 to <2 x i64>*
  %1360 = load <2 x i64>, <2 x i64>* %1359, align 8, !alias.scope !71
  %1361 = getelementptr inbounds i64*, i64** %1352, i64 -1
  %1362 = bitcast i64** %1361 to <2 x i64>*
  store <2 x i64> %1356, <2 x i64>* %1362, align 8, !alias.scope !74, !noalias !71
  %1363 = getelementptr inbounds i64*, i64** %1352, i64 -2
  %1364 = getelementptr inbounds i64*, i64** %1363, i64 -1
  %1365 = bitcast i64** %1364 to <2 x i64>*
  store <2 x i64> %1360, <2 x i64>* %1365, align 8, !alias.scope !74, !noalias !71
  %1366 = sub nuw nsw i64 -4, %1348
  %1367 = sub nuw nsw i64 -4, %1348
  %1368 = getelementptr inbounds i64*, i64** %1345, i64 %1366
  %1369 = getelementptr inbounds i64*, i64** %1346, i64 %1367
  %1370 = getelementptr inbounds i64*, i64** %1369, i64 -1
  %1371 = bitcast i64** %1370 to <2 x i64>*
  %1372 = load <2 x i64>, <2 x i64>* %1371, align 8, !alias.scope !71
  %1373 = getelementptr inbounds i64*, i64** %1369, i64 -2
  %1374 = getelementptr inbounds i64*, i64** %1373, i64 -1
  %1375 = bitcast i64** %1374 to <2 x i64>*
  %1376 = load <2 x i64>, <2 x i64>* %1375, align 8, !alias.scope !71
  %1377 = getelementptr inbounds i64*, i64** %1368, i64 -1
  %1378 = bitcast i64** %1377 to <2 x i64>*
  store <2 x i64> %1372, <2 x i64>* %1378, align 8, !alias.scope !74, !noalias !71
  %1379 = getelementptr inbounds i64*, i64** %1368, i64 -2
  %1380 = getelementptr inbounds i64*, i64** %1379, i64 -1
  %1381 = bitcast i64** %1380 to <2 x i64>*
  store <2 x i64> %1376, <2 x i64>* %1381, align 8, !alias.scope !74, !noalias !71
  %1382 = add i64 %1348, 8
  %1383 = add i64 %1349, -2
  %1384 = icmp eq i64 %1383, 0
  br i1 %1384, label %1385, label %1347, !llvm.loop !76

1385:                                             ; preds = %1347, %1330
  %1386 = phi i64 [ 0, %1330 ], [ %1382, %1347 ]
  %1387 = icmp eq i64 %1339, 0
  br i1 %1387, label %1407, label %1388

1388:                                             ; preds = %1385
  %1389 = sub i64 0, %1386
  %1390 = getelementptr i64*, i64** %1299, i64 -1
  %1391 = sub i64 0, %1386
  %1392 = getelementptr i64*, i64** %1307, i64 -1
  %1393 = getelementptr inbounds i64*, i64** %1390, i64 %1389
  %1394 = getelementptr inbounds i64*, i64** %1392, i64 %1391
  %1395 = getelementptr inbounds i64*, i64** %1394, i64 -1
  %1396 = bitcast i64** %1395 to <2 x i64>*
  %1397 = load <2 x i64>, <2 x i64>* %1396, align 8, !alias.scope !71
  %1398 = getelementptr inbounds i64*, i64** %1394, i64 -2
  %1399 = getelementptr inbounds i64*, i64** %1398, i64 -1
  %1400 = bitcast i64** %1399 to <2 x i64>*
  %1401 = load <2 x i64>, <2 x i64>* %1400, align 8, !alias.scope !71
  %1402 = getelementptr inbounds i64*, i64** %1393, i64 -1
  %1403 = bitcast i64** %1402 to <2 x i64>*
  store <2 x i64> %1397, <2 x i64>* %1403, align 8, !alias.scope !74, !noalias !71
  %1404 = getelementptr inbounds i64*, i64** %1393, i64 -2
  %1405 = getelementptr inbounds i64*, i64** %1404, i64 -1
  %1406 = bitcast i64** %1405 to <2 x i64>*
  store <2 x i64> %1401, <2 x i64>* %1406, align 8, !alias.scope !74, !noalias !71
  br label %1407

1407:                                             ; preds = %1385, %1388
  %1408 = icmp eq i64 %1314, %1331
  br i1 %1408, label %1479, label %1409

1409:                                             ; preds = %1407, %1316, %1309
  %1410 = phi i64** [ %1299, %1316 ], [ %1299, %1309 ], [ %1333, %1407 ]
  %1411 = phi i64** [ %1307, %1316 ], [ %1307, %1309 ], [ %1335, %1407 ]
  %1412 = getelementptr i64*, i64** %1411, i64 -1
  %1413 = ptrtoint i64** %1412 to i64
  %1414 = sub i64 %1413, %1306
  %1415 = lshr i64 %1414, 3
  %1416 = add nuw nsw i64 %1415, 1
  %1417 = and i64 %1416, 7
  %1418 = icmp eq i64 %1417, 0
  br i1 %1418, label %1430, label %1419

1419:                                             ; preds = %1409, %1419
  %1420 = phi i64** [ %1423, %1419 ], [ %1410, %1409 ]
  %1421 = phi i64** [ %1424, %1419 ], [ %1411, %1409 ]
  %1422 = phi i64 [ %1428, %1419 ], [ %1417, %1409 ]
  %1423 = getelementptr inbounds i64*, i64** %1420, i64 -1
  %1424 = getelementptr inbounds i64*, i64** %1421, i64 -1
  %1425 = bitcast i64** %1424 to i64*
  %1426 = load i64, i64* %1425, align 8
  %1427 = bitcast i64** %1423 to i64*
  store i64 %1426, i64* %1427, align 8
  %1428 = add i64 %1422, -1
  %1429 = icmp eq i64 %1428, 0
  br i1 %1429, label %1430, label %1419, !llvm.loop !77

1430:                                             ; preds = %1419, %1409
  %1431 = phi i64** [ undef, %1409 ], [ %1423, %1419 ]
  %1432 = phi i64** [ %1410, %1409 ], [ %1423, %1419 ]
  %1433 = phi i64** [ %1411, %1409 ], [ %1424, %1419 ]
  %1434 = icmp ult i64 %1414, 56
  br i1 %1434, label %1479, label %1435

1435:                                             ; preds = %1430, %1435
  %1436 = phi i64** [ %1473, %1435 ], [ %1432, %1430 ]
  %1437 = phi i64** [ %1474, %1435 ], [ %1433, %1430 ]
  %1438 = getelementptr inbounds i64*, i64** %1436, i64 -1
  %1439 = getelementptr inbounds i64*, i64** %1437, i64 -1
  %1440 = bitcast i64** %1439 to i64*
  %1441 = load i64, i64* %1440, align 8
  %1442 = bitcast i64** %1438 to i64*
  store i64 %1441, i64* %1442, align 8
  %1443 = getelementptr inbounds i64*, i64** %1436, i64 -2
  %1444 = getelementptr inbounds i64*, i64** %1437, i64 -2
  %1445 = bitcast i64** %1444 to i64*
  %1446 = load i64, i64* %1445, align 8
  %1447 = bitcast i64** %1443 to i64*
  store i64 %1446, i64* %1447, align 8
  %1448 = getelementptr inbounds i64*, i64** %1436, i64 -3
  %1449 = getelementptr inbounds i64*, i64** %1437, i64 -3
  %1450 = bitcast i64** %1449 to i64*
  %1451 = load i64, i64* %1450, align 8
  %1452 = bitcast i64** %1448 to i64*
  store i64 %1451, i64* %1452, align 8
  %1453 = getelementptr inbounds i64*, i64** %1436, i64 -4
  %1454 = getelementptr inbounds i64*, i64** %1437, i64 -4
  %1455 = bitcast i64** %1454 to i64*
  %1456 = load i64, i64* %1455, align 8
  %1457 = bitcast i64** %1453 to i64*
  store i64 %1456, i64* %1457, align 8
  %1458 = getelementptr inbounds i64*, i64** %1436, i64 -5
  %1459 = getelementptr inbounds i64*, i64** %1437, i64 -5
  %1460 = bitcast i64** %1459 to i64*
  %1461 = load i64, i64* %1460, align 8
  %1462 = bitcast i64** %1458 to i64*
  store i64 %1461, i64* %1462, align 8
  %1463 = getelementptr inbounds i64*, i64** %1436, i64 -6
  %1464 = getelementptr inbounds i64*, i64** %1437, i64 -6
  %1465 = bitcast i64** %1464 to i64*
  %1466 = load i64, i64* %1465, align 8
  %1467 = bitcast i64** %1463 to i64*
  store i64 %1466, i64* %1467, align 8
  %1468 = getelementptr inbounds i64*, i64** %1436, i64 -7
  %1469 = getelementptr inbounds i64*, i64** %1437, i64 -7
  %1470 = bitcast i64** %1469 to i64*
  %1471 = load i64, i64* %1470, align 8
  %1472 = bitcast i64** %1468 to i64*
  store i64 %1471, i64* %1472, align 8
  %1473 = getelementptr inbounds i64*, i64** %1436, i64 -8
  %1474 = getelementptr inbounds i64*, i64** %1437, i64 -8
  %1475 = bitcast i64** %1474 to i64*
  %1476 = load i64, i64* %1475, align 8
  %1477 = bitcast i64** %1473 to i64*
  store i64 %1476, i64* %1477, align 8
  %1478 = icmp eq i64** %1474, %1305
  br i1 %1478, label %1479, label %1435, !llvm.loop !78

1479:                                             ; preds = %1430, %1435, %1407, %1295
  %1480 = phi i64** [ %1299, %1295 ], [ %1333, %1407 ], [ %1431, %1430 ], [ %1473, %1435 ]
  %1481 = ptrtoint i64** %1480 to i64
  store i64 %1481, i64* %1022, align 8
  store i64 %1304, i64* %1238, align 8
  store i64 %1301, i64* %1020, align 8
  br label %1482

1482:                                             ; preds = %1254, %1479
  %1483 = add nuw i64 %1243, 1
  %1484 = load i64, i64* %978, align 8
  %1485 = load i64, i64* %980, align 8
  %1486 = sub i64 %1484, %1485
  %1487 = ashr exact i64 %1486, 3
  %1488 = icmp ult i64 %1483, %1487
  br i1 %1488, label %1241, label %1489

1489:                                             ; preds = %1241, %1482
  %1490 = phi i64 [ %1483, %1482 ], [ %1243, %1241 ]
  %1491 = load i64**, i64*** %1019, align 8
  br label %1492

1492:                                             ; preds = %1489, %1231
  %1493 = phi i64** [ %1232, %1231 ], [ %1491, %1489 ]
  %1494 = phi i64 [ 0, %1231 ], [ %1490, %1489 ]
  %1495 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %1011, i64 0, i32 0, i32 0, i32 1
  %1496 = load i64**, i64*** %1495, align 8
  %1497 = icmp eq i64** %1496, %1493
  br i1 %1497, label %1503, label %1498

1498:                                             ; preds = %1492
  %1499 = bitcast i64** %1496 to i64*
  store i64 %4, i64* %1499, align 8
  %1500 = getelementptr inbounds i64*, i64** %1496, i64 1
  %1501 = ptrtoint i64** %1500 to i64
  %1502 = bitcast i64*** %1495 to i64*
  store i64 %1501, i64* %1502, align 8
  br label %1724

1503:                                             ; preds = %1492
  %1504 = ptrtoint i64** %1493 to i64
  %1505 = bitcast i64*** %1495 to i64*
  %1506 = load i64, i64* %1022, align 8
  %1507 = sub i64 %1504, %1506
  %1508 = ashr exact i64 %1507, 3
  %1509 = add nsw i64 %1508, 1
  %1510 = icmp ugt i64 %1509, 268435455
  br i1 %1510, label %1511, label %1513

1511:                                             ; preds = %1503
  %1512 = inttoptr i64 %1009 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1512) #14
  unreachable

1513:                                             ; preds = %1503
  %1514 = icmp ult i64 %1508, 134217727
  br i1 %1514, label %1515, label %1520

1515:                                             ; preds = %1513
  %1516 = ashr exact i64 %1507, 2
  %1517 = icmp ult i64 %1516, %1509
  %1518 = select i1 %1517, i64 %1509, i64 %1516
  %1519 = icmp eq i64 %1518, 0
  br i1 %1519, label %1538, label %1520

1520:                                             ; preds = %1515, %1513
  %1521 = phi i64 [ %1518, %1515 ], [ 268435455, %1513 ]
  %1522 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %1011, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %1523 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1522, align 8
  %1524 = shl i64 %1521, 3
  %1525 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1523, i64 0, i32 2
  %1526 = load i64, i64* %1525, align 8
  %1527 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1523, i64 0, i32 3
  %1528 = load i64, i64* %1527, align 8
  %1529 = sub i64 %1528, %1526
  %1530 = icmp ugt i64 %1524, %1529
  br i1 %1530, label %1531, label %1533, !prof !27

1531:                                             ; preds = %1520
  %1532 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1523, i64 %1524) #13
  br label %1535

1533:                                             ; preds = %1520
  %1534 = add i64 %1526, %1524
  store i64 %1534, i64* %1525, align 8
  br label %1535

1535:                                             ; preds = %1533, %1531
  %1536 = phi i64 [ %1532, %1531 ], [ %1526, %1533 ]
  %1537 = inttoptr i64 %1536 to i64**
  br label %1538

1538:                                             ; preds = %1535, %1515
  %1539 = phi i64 [ %1521, %1535 ], [ 0, %1515 ]
  %1540 = phi i64** [ %1537, %1535 ], [ null, %1515 ]
  %1541 = getelementptr inbounds i64*, i64** %1540, i64 %1508
  %1542 = getelementptr inbounds i64*, i64** %1540, i64 %1539
  %1543 = ptrtoint i64** %1542 to i64
  %1544 = bitcast i64** %1541 to i64*
  store i64 %4, i64* %1544, align 8
  %1545 = getelementptr inbounds i64*, i64** %1541, i64 1
  %1546 = ptrtoint i64** %1545 to i64
  %1547 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %1011, i64 0, i32 0, i32 0, i32 0
  %1548 = load i64**, i64*** %1547, align 8
  %1549 = ptrtoint i64** %1548 to i64
  %1550 = load i64**, i64*** %1495, align 8
  %1551 = icmp eq i64** %1550, %1548
  br i1 %1551, label %1721, label %1552

1552:                                             ; preds = %1538
  %1553 = getelementptr i64*, i64** %1550, i64 -1
  %1554 = ptrtoint i64** %1553 to i64
  %1555 = sub i64 %1554, %1549
  %1556 = lshr i64 %1555, 3
  %1557 = add nuw nsw i64 %1556, 1
  %1558 = icmp ult i64 %1557, 4
  br i1 %1558, label %1651, label %1559

1559:                                             ; preds = %1552
  %1560 = getelementptr i64*, i64** %1550, i64 -1
  %1561 = ptrtoint i64** %1560 to i64
  %1562 = sub i64 %1561, %1549
  %1563 = lshr i64 %1562, 3
  %1564 = xor i64 %1563, -1
  %1565 = add nsw i64 %1508, %1564
  %1566 = getelementptr i64*, i64** %1540, i64 %1565
  %1567 = xor i64 %1563, -1
  %1568 = getelementptr i64*, i64** %1550, i64 %1567
  %1569 = icmp ult i64** %1566, %1550
  %1570 = icmp ult i64** %1568, %1541
  %1571 = and i1 %1569, %1570
  br i1 %1571, label %1651, label %1572

1572:                                             ; preds = %1559
  %1573 = and i64 %1557, 4611686018427387900
  %1574 = sub nsw i64 0, %1573
  %1575 = getelementptr i64*, i64** %1541, i64 %1574
  %1576 = sub nsw i64 0, %1573
  %1577 = getelementptr i64*, i64** %1550, i64 %1576
  %1578 = add nsw i64 %1573, -4
  %1579 = lshr exact i64 %1578, 2
  %1580 = add nuw nsw i64 %1579, 1
  %1581 = and i64 %1580, 1
  %1582 = icmp eq i64 %1578, 0
  br i1 %1582, label %1629, label %1583

1583:                                             ; preds = %1572
  %1584 = sub nuw nsw i64 %1580, %1581
  %1585 = getelementptr i64*, i64** %1541, i64 -1
  %1586 = getelementptr i64*, i64** %1550, i64 -1
  %1587 = getelementptr i64*, i64** %1541, i64 -1
  %1588 = getelementptr i64*, i64** %1550, i64 -1
  br label %1589

1589:                                             ; preds = %1589, %1583
  %1590 = phi i64 [ 0, %1583 ], [ %1624, %1589 ]
  %1591 = phi i64 [ %1584, %1583 ], [ %1625, %1589 ]
  %1592 = sub i64 0, %1590
  %1593 = sub i64 0, %1590
  %1594 = getelementptr inbounds i64*, i64** %1585, i64 %1592
  %1595 = getelementptr inbounds i64*, i64** %1586, i64 %1593
  %1596 = getelementptr inbounds i64*, i64** %1595, i64 -1
  %1597 = bitcast i64** %1596 to <2 x i64>*
  %1598 = load <2 x i64>, <2 x i64>* %1597, align 8, !alias.scope !79
  %1599 = getelementptr inbounds i64*, i64** %1595, i64 -2
  %1600 = getelementptr inbounds i64*, i64** %1599, i64 -1
  %1601 = bitcast i64** %1600 to <2 x i64>*
  %1602 = load <2 x i64>, <2 x i64>* %1601, align 8, !alias.scope !79
  %1603 = getelementptr inbounds i64*, i64** %1594, i64 -1
  %1604 = bitcast i64** %1603 to <2 x i64>*
  store <2 x i64> %1598, <2 x i64>* %1604, align 8, !alias.scope !82, !noalias !79
  %1605 = getelementptr inbounds i64*, i64** %1594, i64 -2
  %1606 = getelementptr inbounds i64*, i64** %1605, i64 -1
  %1607 = bitcast i64** %1606 to <2 x i64>*
  store <2 x i64> %1602, <2 x i64>* %1607, align 8, !alias.scope !82, !noalias !79
  %1608 = sub nuw nsw i64 -4, %1590
  %1609 = sub nuw nsw i64 -4, %1590
  %1610 = getelementptr inbounds i64*, i64** %1587, i64 %1608
  %1611 = getelementptr inbounds i64*, i64** %1588, i64 %1609
  %1612 = getelementptr inbounds i64*, i64** %1611, i64 -1
  %1613 = bitcast i64** %1612 to <2 x i64>*
  %1614 = load <2 x i64>, <2 x i64>* %1613, align 8, !alias.scope !79
  %1615 = getelementptr inbounds i64*, i64** %1611, i64 -2
  %1616 = getelementptr inbounds i64*, i64** %1615, i64 -1
  %1617 = bitcast i64** %1616 to <2 x i64>*
  %1618 = load <2 x i64>, <2 x i64>* %1617, align 8, !alias.scope !79
  %1619 = getelementptr inbounds i64*, i64** %1610, i64 -1
  %1620 = bitcast i64** %1619 to <2 x i64>*
  store <2 x i64> %1614, <2 x i64>* %1620, align 8, !alias.scope !82, !noalias !79
  %1621 = getelementptr inbounds i64*, i64** %1610, i64 -2
  %1622 = getelementptr inbounds i64*, i64** %1621, i64 -1
  %1623 = bitcast i64** %1622 to <2 x i64>*
  store <2 x i64> %1618, <2 x i64>* %1623, align 8, !alias.scope !82, !noalias !79
  %1624 = add i64 %1590, 8
  %1625 = add i64 %1591, -2
  %1626 = icmp eq i64 %1625, 0
  br i1 %1626, label %1627, label %1589, !llvm.loop !84

1627:                                             ; preds = %1589
  %1628 = sub nuw nsw i64 -8, %1590
  br label %1629

1629:                                             ; preds = %1627, %1572
  %1630 = phi i64 [ 0, %1572 ], [ %1628, %1627 ]
  %1631 = icmp eq i64 %1581, 0
  br i1 %1631, label %1649, label %1632

1632:                                             ; preds = %1629
  %1633 = getelementptr i64*, i64** %1541, i64 -1
  %1634 = getelementptr i64*, i64** %1550, i64 -1
  %1635 = getelementptr inbounds i64*, i64** %1633, i64 %1630
  %1636 = getelementptr inbounds i64*, i64** %1634, i64 %1630
  %1637 = getelementptr inbounds i64*, i64** %1636, i64 -1
  %1638 = bitcast i64** %1637 to <2 x i64>*
  %1639 = load <2 x i64>, <2 x i64>* %1638, align 8, !alias.scope !79
  %1640 = getelementptr inbounds i64*, i64** %1636, i64 -2
  %1641 = getelementptr inbounds i64*, i64** %1640, i64 -1
  %1642 = bitcast i64** %1641 to <2 x i64>*
  %1643 = load <2 x i64>, <2 x i64>* %1642, align 8, !alias.scope !79
  %1644 = getelementptr inbounds i64*, i64** %1635, i64 -1
  %1645 = bitcast i64** %1644 to <2 x i64>*
  store <2 x i64> %1639, <2 x i64>* %1645, align 8, !alias.scope !82, !noalias !79
  %1646 = getelementptr inbounds i64*, i64** %1635, i64 -2
  %1647 = getelementptr inbounds i64*, i64** %1646, i64 -1
  %1648 = bitcast i64** %1647 to <2 x i64>*
  store <2 x i64> %1643, <2 x i64>* %1648, align 8, !alias.scope !82, !noalias !79
  br label %1649

1649:                                             ; preds = %1629, %1632
  %1650 = icmp eq i64 %1557, %1573
  br i1 %1650, label %1721, label %1651

1651:                                             ; preds = %1649, %1559, %1552
  %1652 = phi i64** [ %1541, %1559 ], [ %1541, %1552 ], [ %1575, %1649 ]
  %1653 = phi i64** [ %1550, %1559 ], [ %1550, %1552 ], [ %1577, %1649 ]
  %1654 = getelementptr i64*, i64** %1653, i64 -1
  %1655 = ptrtoint i64** %1654 to i64
  %1656 = sub i64 %1655, %1549
  %1657 = lshr i64 %1656, 3
  %1658 = add nuw nsw i64 %1657, 1
  %1659 = and i64 %1658, 7
  %1660 = icmp eq i64 %1659, 0
  br i1 %1660, label %1672, label %1661

1661:                                             ; preds = %1651, %1661
  %1662 = phi i64** [ %1665, %1661 ], [ %1652, %1651 ]
  %1663 = phi i64** [ %1666, %1661 ], [ %1653, %1651 ]
  %1664 = phi i64 [ %1670, %1661 ], [ %1659, %1651 ]
  %1665 = getelementptr inbounds i64*, i64** %1662, i64 -1
  %1666 = getelementptr inbounds i64*, i64** %1663, i64 -1
  %1667 = bitcast i64** %1666 to i64*
  %1668 = load i64, i64* %1667, align 8
  %1669 = bitcast i64** %1665 to i64*
  store i64 %1668, i64* %1669, align 8
  %1670 = add i64 %1664, -1
  %1671 = icmp eq i64 %1670, 0
  br i1 %1671, label %1672, label %1661, !llvm.loop !85

1672:                                             ; preds = %1661, %1651
  %1673 = phi i64** [ undef, %1651 ], [ %1665, %1661 ]
  %1674 = phi i64** [ %1652, %1651 ], [ %1665, %1661 ]
  %1675 = phi i64** [ %1653, %1651 ], [ %1666, %1661 ]
  %1676 = icmp ult i64 %1656, 56
  br i1 %1676, label %1721, label %1677

1677:                                             ; preds = %1672, %1677
  %1678 = phi i64** [ %1715, %1677 ], [ %1674, %1672 ]
  %1679 = phi i64** [ %1716, %1677 ], [ %1675, %1672 ]
  %1680 = getelementptr inbounds i64*, i64** %1678, i64 -1
  %1681 = getelementptr inbounds i64*, i64** %1679, i64 -1
  %1682 = bitcast i64** %1681 to i64*
  %1683 = load i64, i64* %1682, align 8
  %1684 = bitcast i64** %1680 to i64*
  store i64 %1683, i64* %1684, align 8
  %1685 = getelementptr inbounds i64*, i64** %1678, i64 -2
  %1686 = getelementptr inbounds i64*, i64** %1679, i64 -2
  %1687 = bitcast i64** %1686 to i64*
  %1688 = load i64, i64* %1687, align 8
  %1689 = bitcast i64** %1685 to i64*
  store i64 %1688, i64* %1689, align 8
  %1690 = getelementptr inbounds i64*, i64** %1678, i64 -3
  %1691 = getelementptr inbounds i64*, i64** %1679, i64 -3
  %1692 = bitcast i64** %1691 to i64*
  %1693 = load i64, i64* %1692, align 8
  %1694 = bitcast i64** %1690 to i64*
  store i64 %1693, i64* %1694, align 8
  %1695 = getelementptr inbounds i64*, i64** %1678, i64 -4
  %1696 = getelementptr inbounds i64*, i64** %1679, i64 -4
  %1697 = bitcast i64** %1696 to i64*
  %1698 = load i64, i64* %1697, align 8
  %1699 = bitcast i64** %1695 to i64*
  store i64 %1698, i64* %1699, align 8
  %1700 = getelementptr inbounds i64*, i64** %1678, i64 -5
  %1701 = getelementptr inbounds i64*, i64** %1679, i64 -5
  %1702 = bitcast i64** %1701 to i64*
  %1703 = load i64, i64* %1702, align 8
  %1704 = bitcast i64** %1700 to i64*
  store i64 %1703, i64* %1704, align 8
  %1705 = getelementptr inbounds i64*, i64** %1678, i64 -6
  %1706 = getelementptr inbounds i64*, i64** %1679, i64 -6
  %1707 = bitcast i64** %1706 to i64*
  %1708 = load i64, i64* %1707, align 8
  %1709 = bitcast i64** %1705 to i64*
  store i64 %1708, i64* %1709, align 8
  %1710 = getelementptr inbounds i64*, i64** %1678, i64 -7
  %1711 = getelementptr inbounds i64*, i64** %1679, i64 -7
  %1712 = bitcast i64** %1711 to i64*
  %1713 = load i64, i64* %1712, align 8
  %1714 = bitcast i64** %1710 to i64*
  store i64 %1713, i64* %1714, align 8
  %1715 = getelementptr inbounds i64*, i64** %1678, i64 -8
  %1716 = getelementptr inbounds i64*, i64** %1679, i64 -8
  %1717 = bitcast i64** %1716 to i64*
  %1718 = load i64, i64* %1717, align 8
  %1719 = bitcast i64** %1715 to i64*
  store i64 %1718, i64* %1719, align 8
  %1720 = icmp eq i64** %1716, %1548
  br i1 %1720, label %1721, label %1677, !llvm.loop !86

1721:                                             ; preds = %1672, %1677, %1649, %1538
  %1722 = phi i64** [ %1541, %1538 ], [ %1575, %1649 ], [ %1673, %1672 ], [ %1715, %1677 ]
  %1723 = ptrtoint i64** %1722 to i64
  store i64 %1723, i64* %1022, align 8
  store i64 %1546, i64* %1505, align 8
  store i64 %1543, i64* %1020, align 8
  br label %1724

1724:                                             ; preds = %1498, %1721
  %1725 = phi i64** [ %1500, %1498 ], [ %1545, %1721 ]
  %1726 = load i64, i64* %978, align 8
  %1727 = load i64, i64* %980, align 8
  %1728 = sub i64 %1726, %1727
  %1729 = ashr exact i64 %1728, 3
  %1730 = icmp ult i64 %1494, %1729
  br i1 %1730, label %1731, label %1978

1731:                                             ; preds = %1724
  %1732 = bitcast i64*** %1495 to i64*
  %1733 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %1011, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %1734 = getelementptr inbounds %"class.v8::internal::ZoneVector.1376", %"class.v8::internal::ZoneVector.1376"* %1011, i64 0, i32 0, i32 0, i32 0
  br label %1735

1735:                                             ; preds = %1731, %1970
  %1736 = phi i64** [ %1725, %1731 ], [ %1971, %1970 ]
  %1737 = phi i64 [ %1727, %1731 ], [ %1974, %1970 ]
  %1738 = phi i64 [ %1494, %1731 ], [ %1972, %1970 ]
  %1739 = inttoptr i64 %1737 to i64**
  %1740 = getelementptr inbounds i64*, i64** %1739, i64 %1738
  %1741 = load i64**, i64*** %1019, align 8
  %1742 = icmp eq i64** %1736, %1741
  br i1 %1742, label %1749, label %1743

1743:                                             ; preds = %1735
  %1744 = bitcast i64** %1740 to i64*
  %1745 = load i64, i64* %1744, align 8
  %1746 = bitcast i64** %1736 to i64*
  store i64 %1745, i64* %1746, align 8
  %1747 = getelementptr inbounds i64*, i64** %1736, i64 1
  %1748 = ptrtoint i64** %1747 to i64
  store i64 %1748, i64* %1732, align 8
  br label %1970

1749:                                             ; preds = %1735
  %1750 = ptrtoint i64** %1741 to i64
  %1751 = load i64, i64* %1022, align 8
  %1752 = sub i64 %1750, %1751
  %1753 = ashr exact i64 %1752, 3
  %1754 = add nsw i64 %1753, 1
  %1755 = icmp ugt i64 %1754, 268435455
  br i1 %1755, label %1756, label %1758

1756:                                             ; preds = %1749
  %1757 = inttoptr i64 %1009 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1757) #14
  unreachable

1758:                                             ; preds = %1749
  %1759 = icmp ult i64 %1753, 134217727
  br i1 %1759, label %1760, label %1765

1760:                                             ; preds = %1758
  %1761 = ashr exact i64 %1752, 2
  %1762 = icmp ult i64 %1761, %1754
  %1763 = select i1 %1762, i64 %1754, i64 %1761
  %1764 = icmp eq i64 %1763, 0
  br i1 %1764, label %1782, label %1765

1765:                                             ; preds = %1760, %1758
  %1766 = phi i64 [ %1763, %1760 ], [ 268435455, %1758 ]
  %1767 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1733, align 8
  %1768 = shl i64 %1766, 3
  %1769 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1767, i64 0, i32 2
  %1770 = load i64, i64* %1769, align 8
  %1771 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1767, i64 0, i32 3
  %1772 = load i64, i64* %1771, align 8
  %1773 = sub i64 %1772, %1770
  %1774 = icmp ugt i64 %1768, %1773
  br i1 %1774, label %1775, label %1777, !prof !27

1775:                                             ; preds = %1765
  %1776 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1767, i64 %1768) #13
  br label %1779

1777:                                             ; preds = %1765
  %1778 = add i64 %1770, %1768
  store i64 %1778, i64* %1769, align 8
  br label %1779

1779:                                             ; preds = %1777, %1775
  %1780 = phi i64 [ %1776, %1775 ], [ %1770, %1777 ]
  %1781 = inttoptr i64 %1780 to i64**
  br label %1782

1782:                                             ; preds = %1779, %1760
  %1783 = phi i64 [ %1766, %1779 ], [ 0, %1760 ]
  %1784 = phi i64** [ %1781, %1779 ], [ null, %1760 ]
  %1785 = getelementptr inbounds i64*, i64** %1784, i64 %1753
  %1786 = getelementptr inbounds i64*, i64** %1784, i64 %1783
  %1787 = ptrtoint i64** %1786 to i64
  %1788 = bitcast i64** %1740 to i64*
  %1789 = load i64, i64* %1788, align 8
  %1790 = bitcast i64** %1785 to i64*
  store i64 %1789, i64* %1790, align 8
  %1791 = getelementptr inbounds i64*, i64** %1785, i64 1
  %1792 = ptrtoint i64** %1791 to i64
  %1793 = load i64**, i64*** %1734, align 8
  %1794 = ptrtoint i64** %1793 to i64
  %1795 = load i64**, i64*** %1495, align 8
  %1796 = icmp eq i64** %1795, %1793
  br i1 %1796, label %1967, label %1797

1797:                                             ; preds = %1782
  %1798 = getelementptr i64*, i64** %1795, i64 -1
  %1799 = ptrtoint i64** %1798 to i64
  %1800 = sub i64 %1799, %1794
  %1801 = lshr i64 %1800, 3
  %1802 = add nuw nsw i64 %1801, 1
  %1803 = icmp ult i64 %1802, 4
  br i1 %1803, label %1897, label %1804

1804:                                             ; preds = %1797
  %1805 = getelementptr i64*, i64** %1784, i64 -1
  %1806 = getelementptr i64*, i64** %1795, i64 -1
  %1807 = ptrtoint i64** %1806 to i64
  %1808 = sub i64 %1807, %1794
  %1809 = lshr i64 %1808, 3
  %1810 = sub nsw i64 %1753, %1809
  %1811 = getelementptr i64*, i64** %1805, i64 %1810
  %1812 = getelementptr i64*, i64** %1795, i64 -1
  %1813 = sub nsw i64 0, %1809
  %1814 = getelementptr i64*, i64** %1812, i64 %1813
  %1815 = icmp ult i64** %1811, %1795
  %1816 = icmp ult i64** %1814, %1785
  %1817 = and i1 %1815, %1816
  br i1 %1817, label %1897, label %1818

1818:                                             ; preds = %1804
  %1819 = and i64 %1802, 4611686018427387900
  %1820 = sub nsw i64 0, %1819
  %1821 = getelementptr i64*, i64** %1785, i64 %1820
  %1822 = sub nsw i64 0, %1819
  %1823 = getelementptr i64*, i64** %1795, i64 %1822
  %1824 = add nsw i64 %1819, -4
  %1825 = lshr exact i64 %1824, 2
  %1826 = add nuw nsw i64 %1825, 1
  %1827 = and i64 %1826, 1
  %1828 = icmp eq i64 %1824, 0
  br i1 %1828, label %1873, label %1829

1829:                                             ; preds = %1818
  %1830 = sub nuw nsw i64 %1826, %1827
  %1831 = getelementptr i64*, i64** %1785, i64 -1
  %1832 = getelementptr i64*, i64** %1795, i64 -1
  %1833 = getelementptr i64*, i64** %1785, i64 -1
  %1834 = getelementptr i64*, i64** %1795, i64 -1
  br label %1835

1835:                                             ; preds = %1835, %1829
  %1836 = phi i64 [ 0, %1829 ], [ %1870, %1835 ]
  %1837 = phi i64 [ %1830, %1829 ], [ %1871, %1835 ]
  %1838 = sub i64 0, %1836
  %1839 = sub i64 0, %1836
  %1840 = getelementptr inbounds i64*, i64** %1831, i64 %1838
  %1841 = getelementptr inbounds i64*, i64** %1832, i64 %1839
  %1842 = getelementptr inbounds i64*, i64** %1841, i64 -1
  %1843 = bitcast i64** %1842 to <2 x i64>*
  %1844 = load <2 x i64>, <2 x i64>* %1843, align 8, !alias.scope !87
  %1845 = getelementptr inbounds i64*, i64** %1841, i64 -2
  %1846 = getelementptr inbounds i64*, i64** %1845, i64 -1
  %1847 = bitcast i64** %1846 to <2 x i64>*
  %1848 = load <2 x i64>, <2 x i64>* %1847, align 8, !alias.scope !87
  %1849 = getelementptr inbounds i64*, i64** %1840, i64 -1
  %1850 = bitcast i64** %1849 to <2 x i64>*
  store <2 x i64> %1844, <2 x i64>* %1850, align 8, !alias.scope !90, !noalias !87
  %1851 = getelementptr inbounds i64*, i64** %1840, i64 -2
  %1852 = getelementptr inbounds i64*, i64** %1851, i64 -1
  %1853 = bitcast i64** %1852 to <2 x i64>*
  store <2 x i64> %1848, <2 x i64>* %1853, align 8, !alias.scope !90, !noalias !87
  %1854 = sub nuw nsw i64 -4, %1836
  %1855 = sub nuw nsw i64 -4, %1836
  %1856 = getelementptr inbounds i64*, i64** %1833, i64 %1854
  %1857 = getelementptr inbounds i64*, i64** %1834, i64 %1855
  %1858 = getelementptr inbounds i64*, i64** %1857, i64 -1
  %1859 = bitcast i64** %1858 to <2 x i64>*
  %1860 = load <2 x i64>, <2 x i64>* %1859, align 8, !alias.scope !87
  %1861 = getelementptr inbounds i64*, i64** %1857, i64 -2
  %1862 = getelementptr inbounds i64*, i64** %1861, i64 -1
  %1863 = bitcast i64** %1862 to <2 x i64>*
  %1864 = load <2 x i64>, <2 x i64>* %1863, align 8, !alias.scope !87
  %1865 = getelementptr inbounds i64*, i64** %1856, i64 -1
  %1866 = bitcast i64** %1865 to <2 x i64>*
  store <2 x i64> %1860, <2 x i64>* %1866, align 8, !alias.scope !90, !noalias !87
  %1867 = getelementptr inbounds i64*, i64** %1856, i64 -2
  %1868 = getelementptr inbounds i64*, i64** %1867, i64 -1
  %1869 = bitcast i64** %1868 to <2 x i64>*
  store <2 x i64> %1864, <2 x i64>* %1869, align 8, !alias.scope !90, !noalias !87
  %1870 = add i64 %1836, 8
  %1871 = add i64 %1837, -2
  %1872 = icmp eq i64 %1871, 0
  br i1 %1872, label %1873, label %1835, !llvm.loop !92

1873:                                             ; preds = %1835, %1818
  %1874 = phi i64 [ 0, %1818 ], [ %1870, %1835 ]
  %1875 = icmp eq i64 %1827, 0
  br i1 %1875, label %1895, label %1876

1876:                                             ; preds = %1873
  %1877 = sub i64 0, %1874
  %1878 = getelementptr i64*, i64** %1785, i64 -1
  %1879 = sub i64 0, %1874
  %1880 = getelementptr i64*, i64** %1795, i64 -1
  %1881 = getelementptr inbounds i64*, i64** %1878, i64 %1877
  %1882 = getelementptr inbounds i64*, i64** %1880, i64 %1879
  %1883 = getelementptr inbounds i64*, i64** %1882, i64 -1
  %1884 = bitcast i64** %1883 to <2 x i64>*
  %1885 = load <2 x i64>, <2 x i64>* %1884, align 8, !alias.scope !87
  %1886 = getelementptr inbounds i64*, i64** %1882, i64 -2
  %1887 = getelementptr inbounds i64*, i64** %1886, i64 -1
  %1888 = bitcast i64** %1887 to <2 x i64>*
  %1889 = load <2 x i64>, <2 x i64>* %1888, align 8, !alias.scope !87
  %1890 = getelementptr inbounds i64*, i64** %1881, i64 -1
  %1891 = bitcast i64** %1890 to <2 x i64>*
  store <2 x i64> %1885, <2 x i64>* %1891, align 8, !alias.scope !90, !noalias !87
  %1892 = getelementptr inbounds i64*, i64** %1881, i64 -2
  %1893 = getelementptr inbounds i64*, i64** %1892, i64 -1
  %1894 = bitcast i64** %1893 to <2 x i64>*
  store <2 x i64> %1889, <2 x i64>* %1894, align 8, !alias.scope !90, !noalias !87
  br label %1895

1895:                                             ; preds = %1873, %1876
  %1896 = icmp eq i64 %1802, %1819
  br i1 %1896, label %1967, label %1897

1897:                                             ; preds = %1895, %1804, %1797
  %1898 = phi i64** [ %1785, %1804 ], [ %1785, %1797 ], [ %1821, %1895 ]
  %1899 = phi i64** [ %1795, %1804 ], [ %1795, %1797 ], [ %1823, %1895 ]
  %1900 = getelementptr i64*, i64** %1899, i64 -1
  %1901 = ptrtoint i64** %1900 to i64
  %1902 = sub i64 %1901, %1794
  %1903 = lshr i64 %1902, 3
  %1904 = add nuw nsw i64 %1903, 1
  %1905 = and i64 %1904, 7
  %1906 = icmp eq i64 %1905, 0
  br i1 %1906, label %1918, label %1907

1907:                                             ; preds = %1897, %1907
  %1908 = phi i64** [ %1911, %1907 ], [ %1898, %1897 ]
  %1909 = phi i64** [ %1912, %1907 ], [ %1899, %1897 ]
  %1910 = phi i64 [ %1916, %1907 ], [ %1905, %1897 ]
  %1911 = getelementptr inbounds i64*, i64** %1908, i64 -1
  %1912 = getelementptr inbounds i64*, i64** %1909, i64 -1
  %1913 = bitcast i64** %1912 to i64*
  %1914 = load i64, i64* %1913, align 8
  %1915 = bitcast i64** %1911 to i64*
  store i64 %1914, i64* %1915, align 8
  %1916 = add i64 %1910, -1
  %1917 = icmp eq i64 %1916, 0
  br i1 %1917, label %1918, label %1907, !llvm.loop !93

1918:                                             ; preds = %1907, %1897
  %1919 = phi i64** [ undef, %1897 ], [ %1911, %1907 ]
  %1920 = phi i64** [ %1898, %1897 ], [ %1911, %1907 ]
  %1921 = phi i64** [ %1899, %1897 ], [ %1912, %1907 ]
  %1922 = icmp ult i64 %1902, 56
  br i1 %1922, label %1967, label %1923

1923:                                             ; preds = %1918, %1923
  %1924 = phi i64** [ %1961, %1923 ], [ %1920, %1918 ]
  %1925 = phi i64** [ %1962, %1923 ], [ %1921, %1918 ]
  %1926 = getelementptr inbounds i64*, i64** %1924, i64 -1
  %1927 = getelementptr inbounds i64*, i64** %1925, i64 -1
  %1928 = bitcast i64** %1927 to i64*
  %1929 = load i64, i64* %1928, align 8
  %1930 = bitcast i64** %1926 to i64*
  store i64 %1929, i64* %1930, align 8
  %1931 = getelementptr inbounds i64*, i64** %1924, i64 -2
  %1932 = getelementptr inbounds i64*, i64** %1925, i64 -2
  %1933 = bitcast i64** %1932 to i64*
  %1934 = load i64, i64* %1933, align 8
  %1935 = bitcast i64** %1931 to i64*
  store i64 %1934, i64* %1935, align 8
  %1936 = getelementptr inbounds i64*, i64** %1924, i64 -3
  %1937 = getelementptr inbounds i64*, i64** %1925, i64 -3
  %1938 = bitcast i64** %1937 to i64*
  %1939 = load i64, i64* %1938, align 8
  %1940 = bitcast i64** %1936 to i64*
  store i64 %1939, i64* %1940, align 8
  %1941 = getelementptr inbounds i64*, i64** %1924, i64 -4
  %1942 = getelementptr inbounds i64*, i64** %1925, i64 -4
  %1943 = bitcast i64** %1942 to i64*
  %1944 = load i64, i64* %1943, align 8
  %1945 = bitcast i64** %1941 to i64*
  store i64 %1944, i64* %1945, align 8
  %1946 = getelementptr inbounds i64*, i64** %1924, i64 -5
  %1947 = getelementptr inbounds i64*, i64** %1925, i64 -5
  %1948 = bitcast i64** %1947 to i64*
  %1949 = load i64, i64* %1948, align 8
  %1950 = bitcast i64** %1946 to i64*
  store i64 %1949, i64* %1950, align 8
  %1951 = getelementptr inbounds i64*, i64** %1924, i64 -6
  %1952 = getelementptr inbounds i64*, i64** %1925, i64 -6
  %1953 = bitcast i64** %1952 to i64*
  %1954 = load i64, i64* %1953, align 8
  %1955 = bitcast i64** %1951 to i64*
  store i64 %1954, i64* %1955, align 8
  %1956 = getelementptr inbounds i64*, i64** %1924, i64 -7
  %1957 = getelementptr inbounds i64*, i64** %1925, i64 -7
  %1958 = bitcast i64** %1957 to i64*
  %1959 = load i64, i64* %1958, align 8
  %1960 = bitcast i64** %1956 to i64*
  store i64 %1959, i64* %1960, align 8
  %1961 = getelementptr inbounds i64*, i64** %1924, i64 -8
  %1962 = getelementptr inbounds i64*, i64** %1925, i64 -8
  %1963 = bitcast i64** %1962 to i64*
  %1964 = load i64, i64* %1963, align 8
  %1965 = bitcast i64** %1961 to i64*
  store i64 %1964, i64* %1965, align 8
  %1966 = icmp eq i64** %1962, %1793
  br i1 %1966, label %1967, label %1923, !llvm.loop !94

1967:                                             ; preds = %1918, %1923, %1895, %1782
  %1968 = phi i64** [ %1785, %1782 ], [ %1821, %1895 ], [ %1919, %1918 ], [ %1961, %1923 ]
  %1969 = ptrtoint i64** %1968 to i64
  store i64 %1969, i64* %1022, align 8
  store i64 %1792, i64* %1732, align 8
  store i64 %1787, i64* %1020, align 8
  br label %1970

1970:                                             ; preds = %1743, %1967
  %1971 = phi i64** [ %1747, %1743 ], [ %1791, %1967 ]
  %1972 = add nuw i64 %1738, 1
  %1973 = load i64, i64* %978, align 8
  %1974 = load i64, i64* %980, align 8
  %1975 = sub i64 %1973, %1974
  %1976 = ashr exact i64 %1975, 3
  %1977 = icmp ult i64 %1972, %1976
  br i1 %1977, label %1735, label %1978

1978:                                             ; preds = %1970, %1724
  %1979 = or i64 %1009, 2
  store i64 %1979, i64* %6, align 8
  br label %1980

1980:                                             ; preds = %987, %9, %972, %1978, %10
  ret void
}

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler25SimplifiedOperatorBuilder9CheckMapsENS_4base5FlagsINS1_13CheckMapsFlagEiEENS0_13ZoneHandleSetINS0_3MapEEERKNS1_14FeedbackSourceE(%"class.v8::internal::compiler::SimplifiedOperatorBuilder"*, i32, i64, %"struct.v8::internal::compiler::FeedbackSource"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal8compiler12MapInference22RelyOnMapsViaStabilityEPNS1_23CompilationDependenciesE(%"class.v8::internal::compiler::MapInference"* nocapture, %"class.v8::internal::compiler::CompilationDependencies"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.v8::internal::compiler::FeedbackSource", align 8
  %4 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %7 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %6, align 8
  %8 = icmp eq %"class.v8::internal::Handle.1240"* %5, %7
  br i1 %8, label %9, label %10, !prof !27

9:                                                ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0)) #14
  unreachable

10:                                               ; preds = %2
  %11 = bitcast %"struct.v8::internal::compiler::FeedbackSource"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #13
  %12 = getelementptr inbounds %"struct.v8::internal::compiler::FeedbackSource", %"struct.v8::internal::compiler::FeedbackSource"* %3, i64 0, i32 0, i32 0, i32 0
  store i64* null, i64** %12, align 8
  %13 = getelementptr inbounds %"struct.v8::internal::compiler::FeedbackSource", %"struct.v8::internal::compiler::FeedbackSource"* %3, i64 0, i32 1, i32 0
  store i32 -1, i32* %13, align 8
  %14 = call zeroext i1 @_ZN2v88internal8compiler12MapInference16RelyOnMapsHelperEPNS1_23CompilationDependenciesEPNS1_7JSGraphEPNS1_6EffectENS1_7ControlERKNS1_14FeedbackSourceE(%"class.v8::internal::compiler::MapInference"* %0, %"class.v8::internal::compiler::CompilationDependencies"* %1, %"class.v8::internal::compiler::JSGraph"* null, %"class.v8::internal::compiler::Effect"* null, %"class.v8::internal::compiler::Node"* null, %"struct.v8::internal::compiler::FeedbackSource"* nonnull dereferenceable(16) %3)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #13
  ret i1 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal8compiler12MapInference16RelyOnMapsHelperEPNS1_23CompilationDependenciesEPNS1_7JSGraphEPNS1_6EffectENS1_7ControlERKNS1_14FeedbackSourceE(%"class.v8::internal::compiler::MapInference"* nocapture, %"class.v8::internal::compiler::CompilationDependencies"*, %"class.v8::internal::compiler::JSGraph"* nocapture readonly, %"class.v8::internal::compiler::Effect"* nocapture, %"class.v8::internal::compiler::Node"*, %"struct.v8::internal::compiler::FeedbackSource"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.v8::base::Optional.1390", align 8
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to %"class.v8::internal::compiler::MapRef"*
  %10 = alloca %"class.v8::base::Optional.1390", align 8
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %"class.v8::internal::compiler::MapRef"*
  %13 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 2
  br i1 %15, label %16, label %76

16:                                               ; preds = %6
  %17 = icmp eq %"class.v8::internal::compiler::CompilationDependencies"* %1, null
  br i1 %17, label %67, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 0
  %20 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %22 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %21, align 8
  %23 = icmp eq %"class.v8::internal::Handle.1240"* %20, %22
  br i1 %23, label %54, label %24

24:                                               ; preds = %18
  %25 = getelementptr %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 0
  %26 = bitcast <2 x i64>* %8 to i8*
  %27 = getelementptr inbounds %"class.v8::base::Optional.1390", %"class.v8::base::Optional.1390"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.v8::base::Optional.1390", %"class.v8::base::Optional.1390"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %29 = bitcast %"class.v8::internal::compiler::ObjectData"** %28 to <2 x i64>*
  br label %32

30:                                               ; preds = %40
  %31 = icmp eq %"class.v8::internal::Handle.1240"* %43, %22
  br i1 %31, label %44, label %32

32:                                               ; preds = %30, %24
  %33 = phi %"class.v8::internal::Handle.1240"* [ %20, %24 ], [ %43, %30 ]
  %34 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %33, i64 0, i32 0, i32 0
  %35 = load i64*, i64** %34, align 8
  %36 = load %"class.v8::internal::compiler::JSHeapBroker"*, %"class.v8::internal::compiler::JSHeapBroker"** %25, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #13
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #13
  call void @_ZN2v88internal8compiler10TryMakeRefINS0_3MapEvEENS_4base8OptionalINS1_10ref_traitsIT_E8ref_typeEEEPNS1_12JSHeapBrokerENS0_6HandleIS7_EENS4_5FlagsINS1_19GetOrCreateDataFlagEiEE(%"class.v8::base::Optional.1390"* nonnull sret %7, %"class.v8::internal::compiler::JSHeapBroker"* %36, i64* %35, i32 1) #13
  %37 = load i8, i8* %27, align 8, !range !28
  %38 = icmp eq i8 %37, 1
  br i1 %38, label %40, label %39, !prof !29

39:                                               ; preds = %32
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i64 0, i64 0)) #14
  unreachable

40:                                               ; preds = %32
  %41 = load <2 x i64>, <2 x i64>* %29, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #13
  store <2 x i64> %41, <2 x i64>* %8, align 16
  %42 = call zeroext i1 @_ZNK2v88internal8compiler6MapRef9is_stableEv(%"class.v8::internal::compiler::MapRef"* nonnull %9) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #13
  %43 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %33, i64 1
  br i1 %42, label %30, label %67

44:                                               ; preds = %30
  %45 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %19, align 8
  %46 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %21, align 8
  %47 = icmp eq %"class.v8::internal::Handle.1240"* %45, %46
  br i1 %47, label %54, label %48

48:                                               ; preds = %44
  %49 = bitcast <2 x i64>* %11 to i8*
  %50 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 0
  %51 = getelementptr inbounds %"class.v8::base::Optional.1390", %"class.v8::base::Optional.1390"* %10, i64 0, i32 0, i32 0, i32 0, i32 0
  %52 = getelementptr inbounds %"class.v8::base::Optional.1390", %"class.v8::base::Optional.1390"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %53 = bitcast %"class.v8::internal::compiler::ObjectData"** %52 to <2 x i64>*
  br label %55

54:                                               ; preds = %63, %18, %44
  store i32 0, i32* %13, align 8
  br label %76

55:                                               ; preds = %48, %63
  %56 = phi %"class.v8::internal::Handle.1240"* [ %45, %48 ], [ %65, %63 ]
  %57 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %56, i64 0, i32 0, i32 0
  %58 = load i64*, i64** %57, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #13
  %59 = load %"class.v8::internal::compiler::JSHeapBroker"*, %"class.v8::internal::compiler::JSHeapBroker"** %50, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #13
  call void @_ZN2v88internal8compiler10TryMakeRefINS0_3MapEvEENS_4base8OptionalINS1_10ref_traitsIT_E8ref_typeEEEPNS1_12JSHeapBrokerENS0_6HandleIS7_EENS4_5FlagsINS1_19GetOrCreateDataFlagEiEE(%"class.v8::base::Optional.1390"* nonnull sret %10, %"class.v8::internal::compiler::JSHeapBroker"* %59, i64* %58, i32 1) #13
  %60 = load i8, i8* %51, align 8, !range !28
  %61 = icmp eq i8 %60, 1
  br i1 %61, label %63, label %62, !prof !29

62:                                               ; preds = %55
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i64 0, i64 0)) #14
  unreachable

63:                                               ; preds = %55
  %64 = load <2 x i64>, <2 x i64>* %53, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #13
  store <2 x i64> %64, <2 x i64>* %11, align 16
  call void @_ZN2v88internal8compiler23CompilationDependencies17DependOnStableMapERKNS1_6MapRefE(%"class.v8::internal::compiler::CompilationDependencies"* nonnull %1, %"class.v8::internal::compiler::MapRef"* nonnull dereferenceable(16) %12) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #13
  %65 = getelementptr inbounds %"class.v8::internal::Handle.1240", %"class.v8::internal::Handle.1240"* %56, i64 1
  %66 = icmp eq %"class.v8::internal::Handle.1240"* %65, %46
  br i1 %66, label %54, label %55

67:                                               ; preds = %40, %16
  %68 = getelementptr inbounds %"struct.v8::internal::compiler::FeedbackSource", %"struct.v8::internal::compiler::FeedbackSource"* %5, i64 0, i32 0, i32 0, i32 0
  %69 = load i64*, i64** %68, align 8
  %70 = icmp eq i64* %69, null
  br i1 %70, label %76, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %"struct.v8::internal::compiler::FeedbackSource", %"struct.v8::internal::compiler::FeedbackSource"* %5, i64 0, i32 1, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, -1
  br i1 %74, label %76, label %75

75:                                               ; preds = %71
  call void @_ZN2v88internal8compiler12MapInference15InsertMapChecksEPNS1_7JSGraphEPNS1_6EffectENS1_7ControlERKNS1_14FeedbackSourceE(%"class.v8::internal::compiler::MapInference"* %0, %"class.v8::internal::compiler::JSGraph"* %2, %"class.v8::internal::compiler::Effect"* %3, %"class.v8::internal::compiler::Node"* %4, %"struct.v8::internal::compiler::FeedbackSource"* dereferenceable(16) %5)
  br label %76

76:                                               ; preds = %71, %6, %67, %54, %75
  %77 = phi i1 [ true, %6 ], [ true, %54 ], [ true, %75 ], [ false, %71 ], [ false, %67 ]
  ret i1 %77
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal8compiler12MapInference25RelyOnMapsPreferStabilityEPNS1_23CompilationDependenciesEPNS1_7JSGraphEPNS1_6EffectENS1_7ControlERKNS1_14FeedbackSourceE(%"class.v8::internal::compiler::MapInference"* nocapture, %"class.v8::internal::compiler::CompilationDependencies"*, %"class.v8::internal::compiler::JSGraph"* nocapture readonly, %"class.v8::internal::compiler::Effect"* nocapture, %"class.v8::internal::compiler::Node"*, %"struct.v8::internal::compiler::FeedbackSource"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %7 = alloca %"struct.v8::internal::compiler::FeedbackSource", align 8
  %8 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 0
  %9 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %11 = load %"class.v8::internal::Handle.1240"*, %"class.v8::internal::Handle.1240"** %10, align 8
  %12 = icmp eq %"class.v8::internal::Handle.1240"* %9, %11
  br i1 %12, label %13, label %14, !prof !27

13:                                               ; preds = %6
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0)) #14
  unreachable

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 2
  br i1 %17, label %18, label %36

18:                                               ; preds = %14
  %19 = bitcast %"struct.v8::internal::compiler::FeedbackSource"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #13
  %20 = getelementptr inbounds %"struct.v8::internal::compiler::FeedbackSource", %"struct.v8::internal::compiler::FeedbackSource"* %7, i64 0, i32 0, i32 0, i32 0
  store i64* null, i64** %20, align 8
  %21 = getelementptr inbounds %"struct.v8::internal::compiler::FeedbackSource", %"struct.v8::internal::compiler::FeedbackSource"* %7, i64 0, i32 1, i32 0
  store i32 -1, i32* %21, align 8
  %22 = call zeroext i1 @_ZN2v88internal8compiler12MapInference16RelyOnMapsHelperEPNS1_23CompilationDependenciesEPNS1_7JSGraphEPNS1_6EffectENS1_7ControlERKNS1_14FeedbackSourceE(%"class.v8::internal::compiler::MapInference"* %0, %"class.v8::internal::compiler::CompilationDependencies"* %1, %"class.v8::internal::compiler::JSGraph"* null, %"class.v8::internal::compiler::Effect"* null, %"class.v8::internal::compiler::Node"* null, %"struct.v8::internal::compiler::FeedbackSource"* nonnull dereferenceable(16) %7) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #13
  br i1 %22, label %36, label %23

23:                                               ; preds = %18
  %24 = load i32, i32* %15, align 8
  %25 = icmp eq i32 %24, 2
  br i1 %25, label %26, label %36

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"struct.v8::internal::compiler::FeedbackSource", %"struct.v8::internal::compiler::FeedbackSource"* %5, i64 0, i32 0, i32 0, i32 0
  %28 = load i64*, i64** %27, align 8
  %29 = icmp eq i64* %28, null
  br i1 %29, label %35, label %30, !prof !30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"struct.v8::internal::compiler::FeedbackSource", %"struct.v8::internal::compiler::FeedbackSource"* %5, i64 0, i32 1, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, -1
  br i1 %33, label %35, label %34, !prof !30

34:                                               ; preds = %30
  call void @_ZN2v88internal8compiler12MapInference15InsertMapChecksEPNS1_7JSGraphEPNS1_6EffectENS1_7ControlERKNS1_14FeedbackSourceE(%"class.v8::internal::compiler::MapInference"* %0, %"class.v8::internal::compiler::JSGraph"* %2, %"class.v8::internal::compiler::Effect"* %3, %"class.v8::internal::compiler::Node"* %4, %"struct.v8::internal::compiler::FeedbackSource"* dereferenceable(16) %5) #13
  br label %36

35:                                               ; preds = %30, %26
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.5, i64 0, i64 0)) #14
  unreachable

36:                                               ; preds = %14, %34, %23, %18
  %37 = phi i1 [ false, %14 ], [ true, %18 ], [ false, %23 ], [ false, %34 ]
  ret i1 %37
}

declare void @_ZN2v88internal8compiler23CompilationDependencies17DependOnStableMapERKNS1_6MapRefE(%"class.v8::internal::compiler::CompilationDependencies"*, %"class.v8::internal::compiler::MapRef"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden noalias %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler12MapInference8NoChangeEv(%"class.v8::internal::compiler::MapInference"* nocapture) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 3
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2
  %4 = bitcast %"class.std::__1::vector.1238"* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::compiler::MapInference", %"class.v8::internal::compiler::MapInference"* %0, i64 0, i32 2, i32 0, i32 1
  %7 = bitcast %"class.v8::internal::Handle.1240"** %6 to i64*
  store i64 %5, i64* %7, align 8
  ret %"class.v8::internal::compiler::Node"* null
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__110__function16__policy_invokerIFbN2v88internal12InstanceTypeEEE11__call_implINS0_20__default_alloc_funcIPS5_S5_EEEEbPKNS0_16__policy_storageES4_(%"union.std::__1::__function::__policy_storage"*, i16 zeroext) #0 comdat align 2 {
  %3 = bitcast %"union.std::__1::__function::__policy_storage"* %0 to i1 (i16)**
  %4 = load i1 (i16)*, i1 (i16)** %3, align 8
  %5 = tail call zeroext i1 %4(i16 zeroext %1) #13
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @"_ZNSt3__110__function16__policy_invokerIFbN2v88internal12InstanceTypeEEE11__call_implINS0_20__default_alloc_funcIZNKS3_8compiler12MapInference21AllOfInstanceTypesAreES4_E3$_0S5_EEEEbPKNS0_16__policy_storageES4_"(%"union.std::__1::__function::__policy_storage"* nocapture readonly, i16 zeroext) #3 align 2 {
  %3 = bitcast %"union.std::__1::__function::__policy_storage"* %0 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = icmp eq i16 %4, %1
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @"_ZNSt3__110__function16__policy_invokerIFbN2v88internal12InstanceTypeEEE11__call_implINS0_20__default_alloc_funcIZNKS3_8compiler12MapInference21AnyOfInstanceTypesAreES4_E3$_1S5_EEEEbPKNS0_16__policy_storageES4_"(%"union.std::__1::__function::__policy_storage"* nocapture readonly, i16 zeroext) #3 align 2 {
  %3 = bitcast %"union.std::__1::__function::__policy_storage"* %0 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = icmp eq i16 %4, %1
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal8compiler10TryMakeRefINS0_3MapEvEENS_4base8OptionalINS1_10ref_traitsIT_E8ref_typeEEEPNS1_12JSHeapBrokerENS0_6HandleIS7_EENS4_5FlagsINS1_19GetOrCreateDataFlagEiEE(%"class.v8::base::Optional.1390"* noalias sret, %"class.v8::internal::compiler::JSHeapBroker"*, i64*, i32) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.std::__1::locale", align 8
  %6 = alloca %"class.v8::internal::StdoutStream", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"struct.v8::internal::Brief", align 8
  %9 = alloca %"class.v8::internal::compiler::MapRef", align 8
  %10 = tail call %"class.v8::internal::compiler::ObjectData"* @_ZN2v88internal8compiler12JSHeapBroker18TryGetOrCreateDataENS0_6HandleINS0_6ObjectEEENS_4base5FlagsINS1_19GetOrCreateDataFlagEiEE(%"class.v8::internal::compiler::JSHeapBroker"* %1, i64* %2, i32 %3) #13
  %11 = icmp eq %"class.v8::internal::compiler::ObjectData"* %10, null
  br i1 %11, label %12, label %79

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.v8::internal::compiler::JSHeapBroker", %"class.v8::internal::compiler::JSHeapBroker"* %1, i64 0, i32 7
  %14 = load i8, i8* %13, align 4, !range !28
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %77, label %16

16:                                               ; preds = %12
  %17 = bitcast %"class.v8::internal::StdoutStream"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %17) #13
  %18 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %6, i64 0, i32 2, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVNSt3__19basic_iosIcNS_11char_traitsIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  %19 = bitcast %"class.v8::internal::StdoutStream"* %6 to %"class.v8::internal::OFStream"*
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  call void @_ZN2v88internal8OFStreamC2EP8_IO_FILE(%"class.v8::internal::OFStream"* nonnull %19, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTTN2v88internal12StdoutStreamE, i64 0, i64 1), %struct._IO_FILE* %20) #13
  %21 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %6, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %21, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %18, align 8
  %22 = call %"class.v8::base::RecursiveMutex"* @_ZN2v88internal12StdoutStream14GetStdoutMutexEv() #13
  %23 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %6, i64 0, i32 1, i32 0
  store %"class.v8::base::RecursiveMutex"* %22, %"class.v8::base::RecursiveMutex"** %23, align 8
  call void @_ZN2v84base14RecursiveMutex4LockEv(%"class.v8::base::RecursiveMutex"* %22) #13
  %24 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #13
  call void @_ZNK2v88internal8compiler12JSHeapBroker5TraceEv(%"class.std::__1::basic_string"* nonnull sret %7, %"class.v8::internal::compiler::JSHeapBroker"* %1) #13
  %25 = bitcast %"class.v8::internal::StdoutStream"* %6 to %"class.std::__1::basic_ostream"*
  %26 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %27 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %26, i64 0, i32 1, i32 0
  %28 = load i8, i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = zext i8 %28 to i64
  %35 = select i1 %29, i8* %31, i8* %24
  %36 = select i1 %29, i64 %33, i64 %34
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %25, i8* %35, i64 %36) #13
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %25, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i64 8) #13
  %39 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %25, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i64 15) #13
  %40 = bitcast %"struct.v8::internal::Brief"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #13
  %41 = load i64, i64* %2, align 8
  %42 = getelementptr inbounds %"struct.v8::internal::Brief", %"struct.v8::internal::Brief"* %8, i64 0, i32 0
  store i64 %41, i64* %42, align 8
  %43 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN2v88internallsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEERKNS0_5BriefE(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %25, %"struct.v8::internal::Brief"* nonnull dereferenceable(8) %8) #13
  %44 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i64 2) #13
  %45 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %25, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.10, i64 0, i64 0), i64 38) #13
  %46 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0), i64 1) #13
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(%"class.std::__1::basic_ostream"* nonnull %25, i32 598) #13
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0), i64 1) #13
  %49 = bitcast %"class.v8::internal::StdoutStream"* %6 to i8**
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr i8, i8* %50, i64 -24
  %52 = bitcast i8* %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds i8, i8* %17, i64 %53
  %55 = bitcast %"class.std::__1::locale"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #13
  %56 = bitcast i8* %54 to %"class.std::__1::ios_base"*
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %5, %"class.std::__1::ios_base"* %56) #13
  %57 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %5, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #13
  %58 = bitcast %"class.std::__1::locale::facet"* %57 to %"class.std::__1::ctype"*
  %59 = bitcast %"class.std::__1::locale::facet"* %57 to i8 (%"class.std::__1::ctype"*, i8)***
  %60 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %59, align 8
  %61 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %60, i64 7
  %62 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %61, align 8
  %63 = call signext i8 %62(%"class.std::__1::ctype"* %58, i8 signext 10) #13
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #13
  %64 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(%"class.std::__1::basic_ostream"* nonnull %25, i8 signext %63) #13
  %65 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(%"class.std::__1::basic_ostream"* nonnull %25) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #13
  %66 = load i8, i8* %27, align 1
  %67 = icmp slt i8 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %16
  %69 = load i8*, i8** %30, align 8
  call void @_ZdlPv(i8* %69) #15
  br label %70

70:                                               ; preds = %16, %68
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #13
  %71 = bitcast %"class.v8::internal::StdoutStream"* %6 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %71, align 8
  %72 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %6, i64 0, i32 2
  %73 = bitcast %"class.std::__1::basic_ios.base"* %72 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %73, align 8
  %74 = load %"class.v8::base::RecursiveMutex"*, %"class.v8::base::RecursiveMutex"** %23, align 8
  call void @_ZN2v84base14RecursiveMutex6UnlockEv(%"class.v8::base::RecursiveMutex"* %74) #13
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %71, align 8
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %73, align 8
  %75 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %6, i64 0, i32 0, i32 1, i32 0
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %75) #13
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* nonnull %25, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTTN2v88internal12StdoutStreamE, i64 0, i64 2)) #13
  %76 = bitcast %"class.std::__1::basic_ios.base"* %72 to %"class.std::__1::basic_ios"*
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %76) #13
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %17) #13
  br label %77

77:                                               ; preds = %12, %70
  %78 = getelementptr inbounds %"class.v8::base::Optional.1390", %"class.v8::base::Optional.1390"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 24, i1 false)
  br label %90

79:                                               ; preds = %4
  %80 = bitcast %"class.v8::internal::compiler::MapRef"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %80) #13
  %81 = getelementptr inbounds %"class.v8::internal::compiler::MapRef", %"class.v8::internal::compiler::MapRef"* %9, i64 0, i32 0, i32 0, i32 0
  store %"class.v8::internal::compiler::ObjectData"* %10, %"class.v8::internal::compiler::ObjectData"** %81, align 8
  %82 = getelementptr inbounds %"class.v8::internal::compiler::MapRef", %"class.v8::internal::compiler::MapRef"* %9, i64 0, i32 0, i32 0, i32 1
  store %"class.v8::internal::compiler::JSHeapBroker"* %1, %"class.v8::internal::compiler::JSHeapBroker"** %82, align 8
  %83 = getelementptr inbounds %"class.v8::internal::compiler::MapRef", %"class.v8::internal::compiler::MapRef"* %9, i64 0, i32 0, i32 0
  %84 = call zeroext i1 @_ZNK2v88internal8compiler9ObjectRef5IsMapEv(%"class.v8::internal::compiler::ObjectRef"* nonnull %83) #13
  br i1 %84, label %86, label %85, !prof !29

85:                                               ; preds = %79
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i64 0, i64 0)) #14
  unreachable

86:                                               ; preds = %79
  %87 = getelementptr inbounds %"class.v8::base::Optional.1390", %"class.v8::base::Optional.1390"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %87, align 8
  %88 = getelementptr inbounds %"class.v8::base::Optional.1390", %"class.v8::base::Optional.1390"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %89 = bitcast %"class.v8::internal::compiler::MapRef"* %88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* nonnull align 8 %80, i64 16, i1 false) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %80) #13
  br label %90

90:                                               ; preds = %86, %77
  ret void
}

declare %"class.v8::internal::compiler::ObjectData"* @_ZN2v88internal8compiler12JSHeapBroker18TryGetOrCreateDataENS0_6HandleINS0_6ObjectEEENS_4base5FlagsINS1_19GetOrCreateDataFlagEiEE(%"class.v8::internal::compiler::JSHeapBroker"*, i64*, i32) local_unnamed_addr #2

declare void @_ZNK2v88internal8compiler12JSHeapBroker5TraceEv(%"class.std::__1::basic_string"* sret, %"class.v8::internal::compiler::JSHeapBroker"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal12StdoutStreamD1Ev(%"class.v8::internal::StdoutStream"*) unnamed_addr #11 comdat align 2 {
  %2 = bitcast %"class.v8::internal::StdoutStream"* %0 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %0, i64 0, i32 2
  %4 = bitcast %"class.std::__1::basic_ios.base"* %3 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %0, i64 0, i32 1, i32 0
  %6 = load %"class.v8::base::RecursiveMutex"*, %"class.v8::base::RecursiveMutex"** %5, align 8
  tail call void @_ZN2v84base14RecursiveMutex6UnlockEv(%"class.v8::base::RecursiveMutex"* %6) #13
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %7 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %0, i64 0, i32 0, i32 1, i32 0
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %7) #13
  %8 = bitcast %"class.v8::internal::StdoutStream"* %0 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %8, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTTN2v88internal12StdoutStreamE, i64 0, i64 2)) #13
  %9 = bitcast %"class.std::__1::basic_ios.base"* %3 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %9) #13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #13
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #13
  %7 = load i8, i8* %6, align 8, !range !28
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #13
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #13
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #13
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #13
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #13
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #13
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #13
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #13
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #13
  %32 = icmp ult i64 %17, 23
  br i1 %32, label %42, label %33

33:                                               ; preds = %30
  %34 = add nuw i64 %17, 16
  %35 = and i64 %34, -16
  %36 = tail call i8* @_Znwm(i64 %35) #15
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %36, i8** %37, align 8
  %38 = or i64 %35, -9223372036854775808
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %17, i64* %40, align 8
  %41 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %46

42:                                               ; preds = %30
  %43 = trunc i64 %17 to i8
  %44 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %45 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  store i8 %43, i8* %45, align 1
  br label %46

46:                                               ; preds = %33, %42
  %47 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %41, %33 ], [ %44, %42 ]
  %48 = phi i8* [ %36, %33 ], [ %31, %42 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %48, i8 %5, i64 %17, i1 false) #13
  %49 = getelementptr inbounds i8, i8* %48, i64 %17
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  %51 = load i8, i8* %50, align 1
  %52 = icmp slt i8 %51, 0
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = select i1 %52, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #13
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %50, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %46
  %65 = load i8*, i8** %53, align 8
  call void @_ZdlPv(i8* %65) #15
  br label %66

66:                                               ; preds = %46, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #13
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #13
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #12

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #12

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(%"class.std::__1::basic_ostream"*, i32) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN2v88internallsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEERKNS0_5BriefE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"struct.v8::internal::Brief"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN2v88internal8OFStreamC2EP8_IO_FILE(%"class.v8::internal::OFStream"*, i8**, %struct._IO_FILE*) unnamed_addr #2

declare %"class.v8::base::RecursiveMutex"* @_ZN2v88internal12StdoutStream14GetStdoutMutexEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal8OFStreamD1Ev(%"class.v8::internal::OFStream"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.v8::internal::OFStream"* %0 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::OFStream", %"class.v8::internal::OFStream"* %0, i64 0, i32 2
  %4 = bitcast %"class.std::__1::basic_ios.base"* %3 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::OFStream", %"class.v8::internal::OFStream"* %0, i64 0, i32 1, i32 0
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %5) #13
  %6 = bitcast %"class.v8::internal::OFStream"* %0 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %6, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTN2v88internal8OFStreamE, i64 0, i64 1)) #13
  %7 = bitcast %"class.std::__1::basic_ios.base"* %3 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %7) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal8OFStreamD0Ev(%"class.v8::internal::OFStream"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.v8::internal::OFStream"* %0 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::OFStream", %"class.v8::internal::OFStream"* %0, i64 0, i32 2
  %4 = bitcast %"class.std::__1::basic_ios.base"* %3 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::OFStream", %"class.v8::internal::OFStream"* %0, i64 0, i32 1, i32 0
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %5) #13
  %6 = bitcast %"class.v8::internal::OFStream"* %0 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %6, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTN2v88internal8OFStreamE, i64 0, i64 1)) #13
  %7 = bitcast %"class.std::__1::basic_ios.base"* %3 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %7) #13
  %8 = bitcast %"class.v8::internal::OFStream"* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZTv0_n24_N2v88internal8OFStreamD1Ev(%"class.v8::internal::OFStream"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.v8::internal::OFStream"* %0 to i8*
  %3 = bitcast %"class.v8::internal::OFStream"* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 -24
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 %7
  %9 = bitcast i8* %8 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  %10 = getelementptr inbounds i8, i8* %8, i64 80
  %11 = bitcast i8* %10 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 8
  %13 = bitcast i8* %12 to %"class.std::__1::basic_streambuf"*
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %13) #13
  %14 = bitcast i8* %8 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %14, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTN2v88internal8OFStreamE, i64 0, i64 1)) #13
  %15 = bitcast i8* %10 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %15) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZTv0_n24_N2v88internal8OFStreamD0Ev(%"class.v8::internal::OFStream"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.v8::internal::OFStream"* %0 to i8*
  %3 = bitcast %"class.v8::internal::OFStream"* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 -24
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 %7
  %9 = bitcast i8* %8 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  %10 = getelementptr inbounds i8, i8* %8, i64 80
  %11 = bitcast i8* %10 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 8
  %13 = bitcast i8* %12 to %"class.std::__1::basic_streambuf"*
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %13) #13
  %14 = bitcast i8* %8 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %14, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTN2v88internal8OFStreamE, i64 0, i64 1)) #13
  %15 = bitcast i8* %10 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %15) #13
  tail call void @_ZdlPv(i8* %8) #15
  ret void
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(%"class.std::__1::basic_ostream"*) unnamed_addr #12

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(%"class.std::__1::basic_ostream"*) unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
declare void @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(%"class.std::__1::basic_ostream"*) unnamed_addr #0 align 2

; Function Attrs: nounwind ssp uwtable
declare void @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(%"class.std::__1::basic_ostream"*) unnamed_addr #0 align 2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal12StdoutStreamD0Ev(%"class.v8::internal::StdoutStream"*) unnamed_addr #11 comdat align 2 {
  %2 = bitcast %"class.v8::internal::StdoutStream"* %0 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %0, i64 0, i32 2
  %4 = bitcast %"class.std::__1::basic_ios.base"* %3 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %0, i64 0, i32 1, i32 0
  %6 = load %"class.v8::base::RecursiveMutex"*, %"class.v8::base::RecursiveMutex"** %5, align 8
  tail call void @_ZN2v84base14RecursiveMutex6UnlockEv(%"class.v8::base::RecursiveMutex"* %6) #13
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %7 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %0, i64 0, i32 0, i32 1, i32 0
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %7) #13
  %8 = bitcast %"class.v8::internal::StdoutStream"* %0 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %8, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTTN2v88internal12StdoutStreamE, i64 0, i64 2)) #13
  %9 = bitcast %"class.std::__1::basic_ios.base"* %3 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %9) #13
  %10 = bitcast %"class.v8::internal::StdoutStream"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZTv0_n24_N2v88internal12StdoutStreamD1Ev(%"class.v8::internal::StdoutStream"*) unnamed_addr #11 comdat align 2 {
  %2 = bitcast %"class.v8::internal::StdoutStream"* %0 to i8*
  %3 = bitcast %"class.v8::internal::StdoutStream"* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 -24
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 %7
  %9 = bitcast i8* %8 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  %10 = getelementptr inbounds i8, i8* %8, i64 88
  %11 = bitcast i8* %10 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 80
  %13 = bitcast i8* %12 to %"class.v8::base::RecursiveMutex"**
  %14 = load %"class.v8::base::RecursiveMutex"*, %"class.v8::base::RecursiveMutex"** %13, align 8
  tail call void @_ZN2v84base14RecursiveMutex6UnlockEv(%"class.v8::base::RecursiveMutex"* %14) #13
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %15 = getelementptr inbounds i8, i8* %8, i64 8
  %16 = bitcast i8* %15 to %"class.std::__1::basic_streambuf"*
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %16) #13
  %17 = bitcast i8* %8 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %17, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTTN2v88internal12StdoutStreamE, i64 0, i64 2)) #13
  %18 = bitcast i8* %10 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %18) #13
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZTv0_n24_N2v88internal12StdoutStreamD0Ev(%"class.v8::internal::StdoutStream"*) unnamed_addr #11 comdat align 2 {
  %2 = bitcast %"class.v8::internal::StdoutStream"* %0 to i8*
  %3 = bitcast %"class.v8::internal::StdoutStream"* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 -24
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 %7
  %9 = bitcast i8* %8 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  %10 = getelementptr inbounds i8, i8* %8, i64 88
  %11 = bitcast i8* %10 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 80
  %13 = bitcast i8* %12 to %"class.v8::base::RecursiveMutex"**
  %14 = load %"class.v8::base::RecursiveMutex"*, %"class.v8::base::RecursiveMutex"** %13, align 8
  tail call void @_ZN2v84base14RecursiveMutex6UnlockEv(%"class.v8::base::RecursiveMutex"* %14) #13
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %15 = getelementptr inbounds i8, i8* %8, i64 8
  %16 = bitcast i8* %15 to %"class.std::__1::basic_streambuf"*
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %16) #13
  %17 = bitcast i8* %8 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %17, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTTN2v88internal12StdoutStreamE, i64 0, i64 2)) #13
  %18 = bitcast i8* %10 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %18) #13
  tail call void @_ZdlPv(i8* %8) #15
  ret void
}

declare void @_ZN2v84base14RecursiveMutex4LockEv(%"class.v8::base::RecursiveMutex"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"*) unnamed_addr #12

; Function Attrs: nounwind
declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #12

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"*, i8**) unnamed_addr #12

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(%"class.std::__1::basic_ostream"*, i8 signext) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(%"class.std::__1::basic_ostream"*) local_unnamed_addr #2

declare void @_ZN2v84base14RecursiveMutex6UnlockEv(%"class.v8::base::RecursiveMutex"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v88internal8compiler9ObjectRef5IsMapEv(%"class.v8::internal::compiler::ObjectRef"*) local_unnamed_addr #2

declare zeroext i16 @_ZNK2v88internal8compiler6MapRef13instance_typeEv(%"class.v8::internal::compiler::MapRef"*) local_unnamed_addr #2

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #2

declare %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Operator"*, i32, %"class.v8::internal::compiler::Node"**, i1 zeroext) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v88internal8compiler6MapRef9is_stableEv(%"class.v8::internal::compiler::MapRef"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { alwaysinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK2v88internal13ZoneHandleSetINS0_3MapEE5beginEv: argument 0"}
!4 = distinct !{!4, !"_ZNK2v88internal13ZoneHandleSetINS0_3MapEE5beginEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK2v88internal13ZoneHandleSetINS0_3MapEE3endEv: argument 0"}
!7 = distinct !{!7, !"_ZNK2v88internal13ZoneHandleSetINS0_3MapEE3endEv"}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.isvectorized", i32 1}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.unroll.disable"}
!17 = distinct !{!17, !14}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !14}
!24 = distinct !{!24, !16}
!25 = distinct !{!25, !16}
!26 = distinct !{!26, !14}
!27 = !{!"branch_weights", i32 1, i32 2000}
!28 = !{i8 0, i8 2}
!29 = !{!"branch_weights", i32 2000, i32 1}
!30 = !{!"branch_weights", i32 1073205, i32 2146410443}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !14}
!37 = distinct !{!37, !16}
!38 = distinct !{!38, !14}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !14}
!45 = distinct !{!45, !16}
!46 = distinct !{!46, !14}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !14}
!53 = distinct !{!53, !16}
!54 = distinct !{!54, !14}
!55 = !{!56}
!56 = distinct !{!56, !57}
!57 = distinct !{!57, !"LVerDomain"}
!58 = !{!59}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !14}
!61 = distinct !{!61, !16}
!62 = distinct !{!62, !14}
!63 = !{!64}
!64 = distinct !{!64, !65}
!65 = distinct !{!65, !"LVerDomain"}
!66 = !{!67}
!67 = distinct !{!67, !65}
!68 = distinct !{!68, !14}
!69 = distinct !{!69, !16}
!70 = distinct !{!70, !14}
!71 = !{!72}
!72 = distinct !{!72, !73}
!73 = distinct !{!73, !"LVerDomain"}
!74 = !{!75}
!75 = distinct !{!75, !73}
!76 = distinct !{!76, !14}
!77 = distinct !{!77, !16}
!78 = distinct !{!78, !14}
!79 = !{!80}
!80 = distinct !{!80, !81}
!81 = distinct !{!81, !"LVerDomain"}
!82 = !{!83}
!83 = distinct !{!83, !81}
!84 = distinct !{!84, !14}
!85 = distinct !{!85, !16}
!86 = distinct !{!86, !14}
!87 = !{!88}
!88 = distinct !{!88, !89}
!89 = distinct !{!89, !"LVerDomain"}
!90 = !{!91}
!91 = distinct !{!91, !89}
!92 = distinct !{!92, !14}
!93 = distinct !{!93, !16}
!94 = distinct !{!94, !14}
