; ModuleID = '../../base/memory/weak_ptr.cc'
source_filename = "../../base/memory/weak_ptr.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%class.scoped_refptr.6 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.6 }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }

@_ZN4base8internal13WeakReference4FlagC1Ev = hidden unnamed_addr alias void (%"class.base::internal::WeakReference::Flag"*), void (%"class.base::internal::WeakReference::Flag"*)* @_ZN4base8internal13WeakReference4FlagC2Ev
@_ZN4base8internal13WeakReference4FlagD1Ev = hidden unnamed_addr alias void (%"class.base::internal::WeakReference::Flag"*), void (%"class.base::internal::WeakReference::Flag"*)* @_ZN4base8internal13WeakReference4FlagD2Ev
@_ZN4base8internal13WeakReferenceC1Ev = hidden unnamed_addr alias void (%"class.base::internal::WeakReference"*), void (%"class.base::internal::WeakReference"*)* @_ZN4base8internal13WeakReferenceC2Ev
@_ZN4base8internal13WeakReferenceC1ERK13scoped_refptrINS1_4FlagEE = hidden unnamed_addr alias void (%"class.base::internal::WeakReference"*, %class.scoped_refptr.6*), void (%"class.base::internal::WeakReference"*, %class.scoped_refptr.6*)* @_ZN4base8internal13WeakReferenceC2ERK13scoped_refptrINS1_4FlagEE
@_ZN4base8internal13WeakReferenceD1Ev = hidden unnamed_addr alias void (%"class.base::internal::WeakReference"*), void (%"class.base::internal::WeakReference"*)* @_ZN4base8internal13WeakReferenceD2Ev
@_ZN4base8internal13WeakReferenceC1EOS1_ = hidden unnamed_addr alias void (%"class.base::internal::WeakReference"*, %"class.base::internal::WeakReference"*), void (%"class.base::internal::WeakReference"*, %"class.base::internal::WeakReference"*)* @_ZN4base8internal13WeakReferenceC2EOS1_
@_ZN4base8internal13WeakReferenceC1ERKS1_ = hidden unnamed_addr alias void (%"class.base::internal::WeakReference"*, %"class.base::internal::WeakReference"*), void (%"class.base::internal::WeakReference"*, %"class.base::internal::WeakReference"*)* @_ZN4base8internal13WeakReferenceC2ERKS1_
@_ZN4base8internal18WeakReferenceOwnerC1Ev = hidden unnamed_addr alias void (%"class.base::internal::WeakReferenceOwner"*), void (%"class.base::internal::WeakReferenceOwner"*)* @_ZN4base8internal18WeakReferenceOwnerC2Ev
@_ZN4base8internal18WeakReferenceOwnerD1Ev = hidden unnamed_addr alias void (%"class.base::internal::WeakReferenceOwner"*), void (%"class.base::internal::WeakReferenceOwner"*)* @_ZN4base8internal18WeakReferenceOwnerD2Ev
@_ZN4base8internal11WeakPtrBaseC1Ev = hidden unnamed_addr alias void (%"class.base::internal::WeakPtrBase"*), void (%"class.base::internal::WeakPtrBase"*)* @_ZN4base8internal11WeakPtrBaseC2Ev
@_ZN4base8internal11WeakPtrBaseD1Ev = hidden unnamed_addr alias void (%"class.base::internal::WeakPtrBase"*), void (%"class.base::internal::WeakPtrBase"*)* @_ZN4base8internal11WeakPtrBaseD2Ev
@_ZN4base8internal11WeakPtrBaseC1ERKNS0_13WeakReferenceEm = hidden unnamed_addr alias void (%"class.base::internal::WeakPtrBase"*, %"class.base::internal::WeakReference"*, i64), void (%"class.base::internal::WeakPtrBase"*, %"class.base::internal::WeakReference"*, i64)* @_ZN4base8internal11WeakPtrBaseC2ERKNS0_13WeakReferenceEm
@_ZN4base8internal18WeakPtrFactoryBaseC1Em = hidden unnamed_addr alias void (%"class.base::internal::WeakPtrFactoryBase"*, i64), void (%"class.base::internal::WeakPtrFactoryBase"*, i64)* @_ZN4base8internal18WeakPtrFactoryBaseC2Em
@_ZN4base8internal18WeakPtrFactoryBaseD1Ev = hidden unnamed_addr alias void (%"class.base::internal::WeakPtrFactoryBase"*), void (%"class.base::internal::WeakPtrFactoryBase"*)* @_ZN4base8internal18WeakPtrFactoryBaseD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13WeakReference4FlagC2Ev(%"class.base::internal::WeakReference::Flag"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %0, i64 0, i32 1
  tail call void @_ZN4base10AtomicFlagC1Ev(%"class.base::AtomicFlag"* %3) #9
  ret void
}

declare void @_ZN4base10AtomicFlagC1Ev(%"class.base::AtomicFlag"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13WeakReference4Flag10InvalidateEv(%"class.base::internal::WeakReference::Flag"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %0, i64 0, i32 1
  tail call void @_ZN4base10AtomicFlag3SetEv(%"class.base::AtomicFlag"* %2) #9
  ret void
}

declare void @_ZN4base10AtomicFlag3SetEv(%"class.base::AtomicFlag"*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal13WeakReference4Flag7IsValidEv(%"class.base::internal::WeakReference::Flag"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i8, i8* %2 acquire, align 1
  %4 = icmp eq i8 %3, 0
  ret i1 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal13WeakReference4Flag10MaybeValidEv(%"class.base::internal::WeakReference::Flag"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i8, i8* %2 acquire, align 1
  %4 = icmp eq i8 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4base8internal13WeakReference4Flag18DetachFromSequenceEv(%"class.base::internal::WeakReference::Flag"* nocapture) local_unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13WeakReference4FlagD2Ev(%"class.base::internal::WeakReference::Flag"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %0, i64 0, i32 1
  tail call void @_ZN4base10AtomicFlagD1Ev(%"class.base::AtomicFlag"* %2) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base10AtomicFlagD1Ev(%"class.base::AtomicFlag"*) unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base8internal13WeakReferenceC2Ev(%"class.base::internal::WeakReference"* nocapture) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WeakReference", %"class.base::internal::WeakReference"* %0, i64 0, i32 0, i32 0
  store %"class.base::internal::WeakReference::Flag"* null, %"class.base::internal::WeakReference::Flag"** %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal13WeakReferenceC2ERK13scoped_refptrINS1_4FlagEE(%"class.base::internal::WeakReference"* nocapture, %class.scoped_refptr.6* nocapture readonly dereferenceable(8)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.scoped_refptr.6, %class.scoped_refptr.6* %1, i64 0, i32 0
  %4 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::WeakReference", %"class.base::internal::WeakReference"* %0, i64 0, i32 0, i32 0
  store %"class.base::internal::WeakReference::Flag"* %4, %"class.base::internal::WeakReference::Flag"** %5, align 8
  %6 = icmp eq %"class.base::internal::WeakReference::Flag"* %4, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13WeakReferenceD2Ev(%"class.base::internal::WeakReference"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WeakReference", %"class.base::internal::WeakReference"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %2, align 8
  %4 = icmp eq %"class.base::internal::WeakReference::Flag"* %3, null
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw sub i32* %6, i32 1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %3, i64 0, i32 0
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %10, i64 1
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %11 to %"class.base::AtomicFlag"*
  tail call void @_ZN4base10AtomicFlagD1Ev(%"class.base::AtomicFlag"* %12) #9
  %13 = bitcast %"class.base::internal::WeakReference::Flag"* %3 to i8*
  tail call void @_ZdlPv(i8* %13) #10
  br label %14

14:                                               ; preds = %1, %5, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal13WeakReferenceC2EOS1_(%"class.base::internal::WeakReference"* nocapture, %"class.base::internal::WeakReference"* nocapture dereferenceable(8)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::WeakReference", %"class.base::internal::WeakReference"* %1, i64 0, i32 0, i32 0
  %4 = bitcast %"class.base::internal::WeakReference"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.base::internal::WeakReference"* %0 to i64*
  store i64 %5, i64* %6, align 8
  store %"class.base::internal::WeakReference::Flag"* null, %"class.base::internal::WeakReference::Flag"** %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal13WeakReferenceC2ERKS1_(%"class.base::internal::WeakReference"* nocapture, %"class.base::internal::WeakReference"* nocapture readonly dereferenceable(8)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::WeakReference", %"class.base::internal::WeakReference"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::WeakReference", %"class.base::internal::WeakReference"* %0, i64 0, i32 0, i32 0
  store %"class.base::internal::WeakReference::Flag"* %4, %"class.base::internal::WeakReference::Flag"** %5, align 8
  %6 = icmp eq %"class.base::internal::WeakReference::Flag"* %4, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WeakReference", %"class.base::internal::WeakReference"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %2, align 8
  %4 = icmp eq %"class.base::internal::WeakReference::Flag"* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %3, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i8, i8* %6 acquire, align 1
  %8 = icmp eq i8 %7, 0
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal13WeakReference10MaybeValidEv(%"class.base::internal::WeakReference"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WeakReference", %"class.base::internal::WeakReference"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %2, align 8
  %4 = icmp eq %"class.base::internal::WeakReference::Flag"* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %3, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i8, i8* %6 acquire, align 1
  %8 = icmp eq i8 %7, 0
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal18WeakReferenceOwnerC2Ev(%"class.base::internal::WeakReferenceOwner"* nocapture) unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 8) #10
  %3 = bitcast i8* %2 to i32*
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds i8, i8* %2, i64 4
  %5 = bitcast i8* %4 to %"class.base::AtomicFlag"*
  tail call void @_ZN4base10AtomicFlagC1Ev(%"class.base::AtomicFlag"* %5) #9
  %6 = atomicrmw add i32* %3, i32 1 monotonic
  %7 = bitcast %"class.base::internal::WeakReferenceOwner"* %0 to i8**
  store i8* %2, i8** %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal18WeakReferenceOwnerD2Ev(%"class.base::internal::WeakReferenceOwner"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WeakReferenceOwner", %"class.base::internal::WeakReferenceOwner"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %2, align 8
  %4 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %3, i64 0, i32 1
  tail call void @_ZN4base10AtomicFlag3SetEv(%"class.base::AtomicFlag"* %4) #9
  %5 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %2, align 8
  %6 = icmp eq %"class.base::internal::WeakReference::Flag"* %5, null
  br i1 %6, label %16, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %16

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %5, i64 0, i32 0
  %13 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %12, i64 1
  %14 = bitcast %"class.base::RefCountedThreadSafe"* %13 to %"class.base::AtomicFlag"*
  tail call void @_ZN4base10AtomicFlagD1Ev(%"class.base::AtomicFlag"* %14) #9
  %15 = bitcast %"class.base::internal::WeakReference::Flag"* %5 to i8*
  tail call void @_ZdlPv(i8* %15) #10
  br label %16

16:                                               ; preds = %1, %7, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4base8internal18WeakReferenceOwner6GetRefEv(%"class.base::internal::WeakReference"* noalias nocapture sret, %"class.base::internal::WeakReferenceOwner"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::WeakReferenceOwner", %"class.base::internal::WeakReferenceOwner"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %4, i64 0, i32 0, i32 0
  %6 = tail call zeroext i1 @_ZNK4base6subtle24RefCountedThreadSafeBase9HasOneRefEv(%"class.base::subtle::RefCountedThreadSafeBase"* %5) #9
  %7 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %3, align 8
  %8 = getelementptr inbounds %"class.base::internal::WeakReference", %"class.base::internal::WeakReference"* %0, i64 0, i32 0, i32 0
  store %"class.base::internal::WeakReference::Flag"* %7, %"class.base::internal::WeakReference::Flag"** %8, align 8
  %9 = icmp eq %"class.base::internal::WeakReference::Flag"* %7, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw add i32* %11, i32 1 monotonic
  br label %13

13:                                               ; preds = %2, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal18WeakReferenceOwner10InvalidateEv(%"class.base::internal::WeakReferenceOwner"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WeakReferenceOwner", %"class.base::internal::WeakReferenceOwner"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %2, align 8
  %4 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %3, i64 0, i32 1
  tail call void @_ZN4base10AtomicFlag3SetEv(%"class.base::AtomicFlag"* %4) #9
  %5 = tail call i8* @_Znwm(i64 8) #10
  %6 = bitcast i8* %5 to i32*
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds i8, i8* %5, i64 4
  %8 = bitcast i8* %7 to %"class.base::AtomicFlag"*
  tail call void @_ZN4base10AtomicFlagC1Ev(%"class.base::AtomicFlag"* %8) #9
  %9 = atomicrmw add i32* %6, i32 1 monotonic
  %10 = ptrtoint i8* %5 to i64
  %11 = bitcast %"class.base::internal::WeakReferenceOwner"* %0 to i64*
  %12 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %2, align 8
  store i64 %10, i64* %11, align 8
  %13 = icmp eq %"class.base::internal::WeakReference::Flag"* %12, null
  br i1 %13, label %23, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = atomicrmw sub i32* %15, i32 1 acq_rel
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %23

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %12, i64 0, i32 0
  %20 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %19, i64 1
  %21 = bitcast %"class.base::RefCountedThreadSafe"* %20 to %"class.base::AtomicFlag"*
  tail call void @_ZN4base10AtomicFlagD1Ev(%"class.base::AtomicFlag"* %21) #9
  %22 = bitcast %"class.base::internal::WeakReference::Flag"* %12 to i8*
  tail call void @_ZdlPv(i8* %22) #10
  br label %23

23:                                               ; preds = %1, %14, %18
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base8internal11WeakPtrBaseC2Ev(%"class.base::internal::WeakPtrBase"* nocapture) unnamed_addr #5 align 2 {
  %2 = bitcast %"class.base::internal::WeakPtrBase"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WeakPtrBase", %"class.base::internal::WeakPtrBase"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %2, align 8
  %4 = icmp eq %"class.base::internal::WeakReference::Flag"* %3, null
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw sub i32* %6, i32 1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %3, i64 0, i32 0
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %10, i64 1
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %11 to %"class.base::AtomicFlag"*
  tail call void @_ZN4base10AtomicFlagD1Ev(%"class.base::AtomicFlag"* %12) #9
  %13 = bitcast %"class.base::internal::WeakReference::Flag"* %3 to i8*
  tail call void @_ZdlPv(i8* %13) #10
  br label %14

14:                                               ; preds = %1, %5, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal11WeakPtrBaseC2ERKNS0_13WeakReferenceEm(%"class.base::internal::WeakPtrBase"* nocapture, %"class.base::internal::WeakReference"* nocapture readonly dereferenceable(8), i64) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.base::internal::WeakReference", %"class.base::internal::WeakReference"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %4, align 8
  %6 = getelementptr inbounds %"class.base::internal::WeakPtrBase", %"class.base::internal::WeakPtrBase"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::WeakReference::Flag"* %5, %"class.base::internal::WeakReference::Flag"** %6, align 8
  %7 = icmp eq %"class.base::internal::WeakReference::Flag"* %5, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw add i32* %9, i32 1 monotonic
  br label %11

11:                                               ; preds = %3, %8
  %12 = getelementptr inbounds %"class.base::internal::WeakPtrBase", %"class.base::internal::WeakPtrBase"* %0, i64 0, i32 1
  store i64 %2, i64* %12, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal18WeakPtrFactoryBaseC2Em(%"class.base::internal::WeakPtrFactoryBase"* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 8) #10
  %4 = bitcast i8* %3 to i32*
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds i8, i8* %3, i64 4
  %6 = bitcast i8* %5 to %"class.base::AtomicFlag"*
  tail call void @_ZN4base10AtomicFlagC1Ev(%"class.base::AtomicFlag"* %6) #9
  %7 = atomicrmw add i32* %4, i32 1 monotonic
  %8 = bitcast %"class.base::internal::WeakPtrFactoryBase"* %0 to i8**
  store i8* %3, i8** %8, align 8
  %9 = getelementptr inbounds %"class.base::internal::WeakPtrFactoryBase", %"class.base::internal::WeakPtrFactoryBase"* %0, i64 0, i32 1
  store i64 %1, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::WeakPtrFactoryBase", %"class.base::internal::WeakPtrFactoryBase"* %0, i64 0, i32 1
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::WeakPtrFactoryBase", %"class.base::internal::WeakPtrFactoryBase"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %4, i64 0, i32 1
  tail call void @_ZN4base10AtomicFlag3SetEv(%"class.base::AtomicFlag"* %5) #9
  %6 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %3, align 8
  %7 = icmp eq %"class.base::internal::WeakReference::Flag"* %6, null
  br i1 %7, label %17, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw sub i32* %9, i32 1 acq_rel
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %17

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %6, i64 0, i32 0
  %14 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %13, i64 1
  %15 = bitcast %"class.base::RefCountedThreadSafe"* %14 to %"class.base::AtomicFlag"*
  tail call void @_ZN4base10AtomicFlagD1Ev(%"class.base::AtomicFlag"* %15) #9
  %16 = bitcast %"class.base::internal::WeakReference::Flag"* %6 to i8*
  tail call void @_ZdlPv(i8* %16) #10
  br label %17

17:                                               ; preds = %1, %8, %12
  ret void
}

declare zeroext i1 @_ZNK4base6subtle24RefCountedThreadSafeBase9HasOneRefEv(%"class.base::subtle::RefCountedThreadSafeBase"*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nounwind }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
