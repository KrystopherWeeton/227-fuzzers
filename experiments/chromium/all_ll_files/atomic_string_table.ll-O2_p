; ModuleID = '../../third_party/blink/renderer/platform/wtf/text/atomic_string_table.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/text/atomic_string_table.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.WTF::AtomicStringTable" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.WTF::StringImpl"**, i32, i32, i32, [4 x i8] }>
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.1" }
%"class.WTF::HashTable.1" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { i32, %"class.WTF::StringImpl"* }
%"struct.WTF::(anonymous namespace)::HashAndUTF8Characters" = type { i32, i8*, i32, i32 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"struct.WTF::HashTableConstIteratorAdapter.4" = type { %"class.WTF::HashTableConstIterator.5" }
%"class.WTF::HashTableConstIterator.5" = type { %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"** }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZZN7logging15CheckOpValueStrIN3WTF29HashTableConstIteratorAdapterINS1_9HashTableIPNS1_10StringImplES5_NS1_17IdentityExtractorENS1_10StringHashENS1_10HashTraitsIS5_EES9_NS1_18PartitionAllocatorEEES9_EEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINSD_14remove_pointerISF_E4typeEEE5valueEPcE4typeESH_ENUlRNSD_13basic_ostreamIcNSD_11char_traitsIcEEEEPKvE_8__invokeESS_SU_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE8RehashToEPS2_jS9_ = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_ = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS4_S6_S7_EERKS2_RS2_EENS_18HashTableAddResultIS8_S2_EEOT0_OT1_ = comdat any

$_ZNK3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE4findERKS2_ = comdat any

@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str = private unnamed_addr constant [25 x i8] c"iterator != table_.end()\00", align 1
@.str.1 = private unnamed_addr constant [74 x i8] c"../../third_party/blink/renderer/platform/wtf/text/atomic_string_table.cc\00", align 1
@.str.2 = private unnamed_addr constant [73 x i8] c"../../third_party/blink/renderer/platform/wtf/text/atomic_string_table.h\00", align 1
@.str.3 = private unnamed_addr constant [53 x i8] c"!str || str->IsAtomic() || str == StringImpl::empty_\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"iterator representing <end>\00", align 1
@.str.5 = private unnamed_addr constant [22 x i8] c"iterator pointing to \00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@.str.7 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c"!static_cast<int>( new_capacity >> 31)\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPNS_10StringImplEEEPKcv = private unnamed_addr constant [65 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::StringImpl *]\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@_ZN3WTF19kASCIICaseFoldTableE = external local_unnamed_addr constant [256 x i8], align 16

@_ZN3WTF17AtomicStringTableC1Ev = hidden unnamed_addr alias void (%"class.WTF::AtomicStringTable"*), void (%"class.WTF::AtomicStringTable"*)* @_ZN3WTF17AtomicStringTableC2Ev
@_ZN3WTF17AtomicStringTableD1Ev = hidden unnamed_addr alias void (%"class.WTF::AtomicStringTable"*), void (%"class.WTF::AtomicStringTable"*)* @_ZN3WTF17AtomicStringTableD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF17AtomicStringTableC2Ev(%"class.WTF::AtomicStringTable"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::StringImpl"*, align 8
  %3 = bitcast %"class.WTF::AtomicStringTable"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 20, i1 false) #9
  %4 = tail call dereferenceable(24) %"class.WTF::HashMap"* @_ZN3WTF10StringImpl16AllStaticStringsEv() #9
  %5 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %4, i64 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %4, i64 0, i32 0, i32 0
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %4, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %9, i64 %12
  br i1 %7, label %31, label %14

14:                                               ; preds = %1
  %15 = icmp eq i32 %11, 0
  br i1 %15, label %25, label %16

16:                                               ; preds = %14, %22
  %17 = phi %"struct.WTF::KeyValuePair"* [ %23, %22 ], [ %9, %14 ]
  %18 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %17, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = add i32 %19, 1
  %21 = icmp ult i32 %20, 2
  br i1 %21, label %22, label %25

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %17, i64 1
  %24 = icmp eq %"struct.WTF::KeyValuePair"* %23, %13
  br i1 %24, label %31, label %16

25:                                               ; preds = %16, %14
  %26 = phi %"struct.WTF::KeyValuePair"* [ %9, %14 ], [ %17, %16 ]
  %27 = icmp eq %"struct.WTF::KeyValuePair"* %26, %13
  br i1 %27, label %31, label %28

28:                                               ; preds = %25
  %29 = bitcast %"class.WTF::StringImpl"** %2 to i8*
  %30 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0
  br label %32

31:                                               ; preds = %22, %49, %61, %58, %1, %25
  ret void

32:                                               ; preds = %28, %61
  %33 = phi %"struct.WTF::KeyValuePair"* [ %26, %28 ], [ %53, %61 ]
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %33, i64 0, i32 1
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29)
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %2, align 8
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %49, label %39

39:                                               ; preds = %32
  %40 = call { %"class.WTF::StringImpl"**, i8 } @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS4_S6_S7_EERKS2_RS2_EENS_18HashTableAddResultIS8_S2_EEOT0_OT1_(%"class.WTF::HashTable"* %30, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %2, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %2) #9
  %41 = extractvalue { %"class.WTF::StringImpl"**, i8 } %40, 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 acquire, align 4
  %45 = and i32 %44, 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %39
  %48 = atomicrmw or i32* %43, i32 4 release
  br label %49

49:                                               ; preds = %32, %39, %47
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29)
  %50 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %33, i64 1
  %51 = icmp eq %"struct.WTF::KeyValuePair"* %50, %13
  br i1 %51, label %31, label %52

52:                                               ; preds = %49, %58
  %53 = phi %"struct.WTF::KeyValuePair"* [ %59, %58 ], [ %50, %49 ]
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %53, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = add i32 %55, 1
  %57 = icmp ult i32 %56, 2
  br i1 %57, label %58, label %61

58:                                               ; preds = %52
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %53, i64 1
  %60 = icmp eq %"struct.WTF::KeyValuePair"* %59, %13
  br i1 %60, label %31, label %52

61:                                               ; preds = %52
  %62 = icmp eq %"struct.WTF::KeyValuePair"* %53, %13
  br i1 %62, label %31, label %32
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare dereferenceable(24) %"class.WTF::HashMap"* @_ZN3WTF10StringImpl16AllStaticStringsEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF17AtomicStringTable3AddEPNS_10StringImplE(%"class.WTF::AtomicStringTable"*, %"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringImpl"*, align 8
  store %"class.WTF::StringImpl"* %1, %"class.WTF::StringImpl"** %3, align 8
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  br label %20

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0
  %11 = call { %"class.WTF::StringImpl"**, i8 } @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS4_S6_S7_EERKS2_RS2_EENS_18HashTableAddResultIS8_S2_EEOT0_OT1_(%"class.WTF::HashTable"* %10, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %3, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %3) #9
  %12 = extractvalue { %"class.WTF::StringImpl"**, i8 } %11, 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 acquire, align 4
  %16 = and i32 %15, 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %9
  %19 = atomicrmw or i32* %14, i32 4 release
  br label %20

20:                                               ; preds = %9, %18, %7
  %21 = phi %"class.WTF::StringImpl"* [ %8, %7 ], [ %13, %18 ], [ %13, %9 ]
  ret %"class.WTF::StringImpl"* %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF17AtomicStringTableD2Ev(%"class.WTF::AtomicStringTable"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  %5 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, i64 %9
  br i1 %4, label %25, label %11

11:                                               ; preds = %1
  %12 = icmp eq i32 %8, 0
  br i1 %12, label %20, label %13

13:                                               ; preds = %11, %17
  %14 = phi %"class.WTF::StringImpl"** [ %18, %17 ], [ %6, %11 ]
  %15 = bitcast %"class.WTF::StringImpl"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  switch i64 %16, label %20 [
    i64 -1, label %17
    i64 0, label %17
  ]

17:                                               ; preds = %13, %13
  %18 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, i64 1
  %19 = icmp eq %"class.WTF::StringImpl"** %18, %10
  br i1 %19, label %25, label %13

20:                                               ; preds = %13, %11
  %21 = phi %"class.WTF::StringImpl"** [ %6, %11 ], [ %14, %13 ]
  %22 = icmp eq %"class.WTF::StringImpl"** %21, %10
  br i1 %22, label %25, label %31

23:                                               ; preds = %40, %50, %47
  %24 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %5, align 8
  br label %25

25:                                               ; preds = %17, %1, %23, %20
  %26 = phi %"class.WTF::StringImpl"** [ %24, %23 ], [ %6, %20 ], [ %6, %1 ], [ %6, %17 ]
  %27 = icmp eq %"class.WTF::StringImpl"** %26, null
  br i1 %27, label %30, label %28, !prof !2

28:                                               ; preds = %25
  %29 = bitcast %"class.WTF::StringImpl"** %26 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %29) #9
  store %"class.WTF::StringImpl"** null, %"class.WTF::StringImpl"*** %5, align 8
  br label %30

30:                                               ; preds = %25, %28
  ret void

31:                                               ; preds = %20, %50
  %32 = phi %"class.WTF::StringImpl"** [ %44, %50 ], [ %21, %20 ]
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %31
  %39 = atomicrmw and i32* %34, i32 -5 release
  br label %40

40:                                               ; preds = %31, %38
  %41 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, i64 1
  %42 = icmp eq %"class.WTF::StringImpl"** %41, %10
  br i1 %42, label %23, label %43

43:                                               ; preds = %40, %47
  %44 = phi %"class.WTF::StringImpl"** [ %48, %47 ], [ %41, %40 ]
  %45 = bitcast %"class.WTF::StringImpl"** %44 to i64*
  %46 = load i64, i64* %45, align 8
  switch i64 %46, label %50 [
    i64 -1, label %47
    i64 0, label %47
  ]

47:                                               ; preds = %43, %43
  %48 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, i64 1
  %49 = icmp eq %"class.WTF::StringImpl"** %48, %10
  br i1 %49, label %23, label %43

50:                                               ; preds = %43
  %51 = icmp eq %"class.WTF::StringImpl"** %44, %10
  br i1 %51, label %23, label %31
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF17AtomicStringTable15ReserveCapacityEj(%"class.WTF::AtomicStringTable"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"* %3, i32 %1) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF17AtomicStringTable3AddEPKDsj(%"class.WTF::AtomicStringTable"*, i16*, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i16* %1, null
  br i1 %4, label %250, label %5

5:                                                ; preds = %3
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %7, label %27

7:                                                ; preds = %5
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %250, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %250

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #9
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !3

24:                                               ; preds = %15
  tail call void @llvm.trap() #9
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %250

27:                                               ; preds = %5
  %28 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"** %30, null
  br i1 %31, label %32, label %35

32:                                               ; preds = %27
  %33 = tail call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable"* %28, %"class.WTF::StringImpl"** null) #9
  %34 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %29, align 8, !noalias !4
  br label %35

35:                                               ; preds = %32, %27
  %36 = phi %"class.WTF::StringImpl"** [ %30, %27 ], [ %34, %32 ]
  %37 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %38 = load i32, i32* %37, align 8, !noalias !4
  %39 = add i32 %38, -1
  %40 = zext i32 %39 to i64
  %41 = and i32 %2, 1
  %42 = icmp eq i32 %41, 0
  %43 = lshr i32 %2, 1
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %107, label %45

45:                                               ; preds = %35
  %46 = and i32 %43, 1
  %47 = icmp eq i32 %43, 1
  br i1 %47, label %82, label %48

48:                                               ; preds = %45
  %49 = sub nsw i32 %43, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i32 [ -1640531527, %48 ], [ %78, %50 ]
  %52 = phi i16* [ %1, %48 ], [ %79, %50 ]
  %53 = phi i32 [ %49, %48 ], [ %80, %50 ]
  %54 = load i16, i16* %52, align 2, !noalias !4
  %55 = getelementptr inbounds i16, i16* %52, i64 1
  %56 = load i16, i16* %55, align 2, !noalias !4
  %57 = zext i16 %54 to i32
  %58 = add i32 %51, %57
  %59 = shl i32 %58, 16
  %60 = zext i16 %56 to i32
  %61 = shl nuw nsw i32 %60, 11
  %62 = xor i32 %61, %58
  %63 = xor i32 %62, %59
  %64 = lshr i32 %63, 11
  %65 = add i32 %64, %63
  %66 = getelementptr inbounds i16, i16* %52, i64 2
  %67 = load i16, i16* %66, align 2, !noalias !4
  %68 = getelementptr inbounds i16, i16* %52, i64 3
  %69 = load i16, i16* %68, align 2, !noalias !4
  %70 = zext i16 %67 to i32
  %71 = add i32 %65, %70
  %72 = shl i32 %71, 16
  %73 = zext i16 %69 to i32
  %74 = shl nuw nsw i32 %73, 11
  %75 = xor i32 %74, %71
  %76 = xor i32 %75, %72
  %77 = lshr i32 %76, 11
  %78 = add i32 %77, %76
  %79 = getelementptr inbounds i16, i16* %52, i64 4
  %80 = add i32 %53, -2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %50

82:                                               ; preds = %50, %45
  %83 = phi i32 [ undef, %45 ], [ %78, %50 ]
  %84 = phi i32 [ -1640531527, %45 ], [ %78, %50 ]
  %85 = phi i16* [ %1, %45 ], [ %79, %50 ]
  %86 = icmp eq i32 %46, 0
  br i1 %86, label %100, label %87

87:                                               ; preds = %82
  %88 = load i16, i16* %85, align 2, !noalias !4
  %89 = getelementptr inbounds i16, i16* %85, i64 1
  %90 = load i16, i16* %89, align 2, !noalias !4
  %91 = zext i16 %88 to i32
  %92 = add i32 %84, %91
  %93 = shl i32 %92, 16
  %94 = zext i16 %90 to i32
  %95 = shl nuw nsw i32 %94, 11
  %96 = xor i32 %95, %92
  %97 = xor i32 %96, %93
  %98 = lshr i32 %97, 11
  %99 = add i32 %98, %97
  br label %100

100:                                              ; preds = %82, %87
  %101 = phi i32 [ %83, %82 ], [ %99, %87 ]
  %102 = add nsw i32 %43, -1
  %103 = zext i32 %102 to i64
  %104 = shl nuw nsw i64 %103, 1
  %105 = add nuw nsw i64 %104, 2
  %106 = getelementptr i16, i16* %1, i64 %105
  br label %107

107:                                              ; preds = %100, %35
  %108 = phi i32 [ -1640531527, %35 ], [ %101, %100 ]
  %109 = phi i16* [ %1, %35 ], [ %106, %100 ]
  br i1 %42, label %118, label %110

110:                                              ; preds = %107
  %111 = load i16, i16* %109, align 2, !noalias !4
  %112 = zext i16 %111 to i32
  %113 = add i32 %108, %112
  %114 = shl i32 %113, 11
  %115 = xor i32 %114, %113
  %116 = lshr i32 %115, 17
  %117 = add i32 %116, %115
  br label %118

118:                                              ; preds = %110, %107
  %119 = phi i32 [ %117, %110 ], [ %108, %107 ]
  %120 = shl i32 %119, 3
  %121 = xor i32 %120, %119
  %122 = lshr i32 %121, 5
  %123 = add i32 %122, %121
  %124 = shl i32 %123, 2
  %125 = xor i32 %124, %123
  %126 = lshr i32 %125, 15
  %127 = add i32 %126, %125
  %128 = shl i32 %127, 10
  %129 = xor i32 %128, %127
  %130 = and i32 %129, 16777215
  %131 = icmp eq i32 %130, 0
  %132 = select i1 %131, i32 8388608, i32 %130
  %133 = and i32 %132, %39
  %134 = zext i32 %133 to i64
  %135 = xor i32 %132, -1
  %136 = lshr i32 %132, 23
  %137 = add nsw i32 %136, %135
  %138 = shl i32 %137, 12
  %139 = xor i32 %138, %137
  %140 = lshr i32 %139, 7
  %141 = xor i32 %140, %139
  %142 = shl i32 %141, 2
  %143 = xor i32 %142, %141
  %144 = lshr i32 %143, 20
  %145 = xor i32 %144, %143
  %146 = or i32 %145, 1
  %147 = zext i32 %146 to i64
  br label %148

148:                                              ; preds = %157, %118
  %149 = phi i64 [ 0, %118 ], [ %160, %157 ]
  %150 = phi i64 [ %134, %118 ], [ %162, %157 ]
  %151 = phi %"class.WTF::StringImpl"** [ null, %118 ], [ %158, %157 ]
  %152 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, i64 %150
  %153 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %152, align 8, !noalias !4
  %154 = ptrtoint %"class.WTF::StringImpl"* %153 to i64
  switch i64 %154, label %155 [
    i64 0, label %163
    i64 -1, label %157
  ]

155:                                              ; preds = %148
  %156 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKDsj(%"class.WTF::StringImpl"* %153, i16* nonnull %1, i32 %2) #9, !noalias !4
  br i1 %156, label %230, label %157

157:                                              ; preds = %155, %148
  %158 = phi %"class.WTF::StringImpl"** [ %151, %155 ], [ %152, %148 ]
  %159 = icmp eq i64 %149, 0
  %160 = select i1 %159, i64 %147, i64 %149
  %161 = add i64 %160, %150
  %162 = and i64 %161, %40
  br label %148

163:                                              ; preds = %148
  %164 = icmp eq %"class.WTF::StringImpl"** %151, null
  %165 = select i1 %164, %"class.WTF::StringImpl"** %152, %"class.WTF::StringImpl"** %151
  %166 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %165, align 8
  %167 = icmp eq %"class.WTF::StringImpl"* %166, inttoptr (i64 -1 to %"class.WTF::StringImpl"*)
  br i1 %167, label %168, label %176

168:                                              ; preds = %163
  %169 = bitcast %"class.WTF::StringImpl"** %165 to i64*
  store i64 0, i64* %169, align 8
  %170 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 3
  %171 = load i32, i32* %170, align 8
  %172 = add i32 %171, 2147483647
  %173 = and i32 %172, 2147483647
  %174 = and i32 %171, -2147483648
  %175 = or i32 %173, %174
  store i32 %175, i32* %170, align 8
  br label %176

176:                                              ; preds = %168, %163
  %177 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16* nonnull %1, i32 %2) #9
  %178 = icmp eq %"class.WTF::StringImpl"* %177, null
  br i1 %178, label %196, label %179

179:                                              ; preds = %176
  %180 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %177, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %181 = load atomic i32, i32* %180 monotonic, align 4
  %182 = and i32 %181, 2
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %196

184:                                              ; preds = %179
  %185 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %177, i64 0, i32 0
  %186 = load i32, i32* %185, align 4
  %187 = zext i32 %186 to i33
  %188 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %187, i33 1) #9
  %189 = extractvalue { i33, i1 } %188, 1
  %190 = extractvalue { i33, i1 } %188, 0
  %191 = icmp slt i33 %190, 0
  %192 = or i1 %189, %191
  br i1 %192, label %193, label %194, !prof !3

193:                                              ; preds = %184
  tail call void @llvm.trap() #9
  unreachable

194:                                              ; preds = %184
  %195 = trunc i33 %190 to i32
  store i32 %195, i32* %185, align 4
  br label %196

196:                                              ; preds = %194, %179, %176
  store %"class.WTF::StringImpl"* %177, %"class.WTF::StringImpl"** %165, align 8
  %197 = shl nuw i32 %132, 8
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %177, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %199 = atomicrmw or i32* %198, i32 %197 monotonic
  %200 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %165, align 8
  %201 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %200, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %202 = atomicrmw or i32* %201, i32 4 release
  br i1 %178, label %215, label %203

203:                                              ; preds = %196
  %204 = load atomic i32, i32* %198 monotonic, align 4
  %205 = and i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %177, i64 0, i32 0
  %208 = load i32, i32* %207, align 4
  br i1 %206, label %209, label %211

209:                                              ; preds = %203
  %210 = add i32 %208, -1
  store i32 %210, i32* %207, align 4
  br label %211

211:                                              ; preds = %209, %203
  %212 = phi i32 [ %210, %209 ], [ %208, %203 ]
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %215

214:                                              ; preds = %211
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %177) #9
  br label %215

215:                                              ; preds = %214, %211, %196
  %216 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 2
  %217 = load i32, i32* %216, align 4
  %218 = add i32 %217, 1
  store i32 %218, i32* %216, align 4
  %219 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 3
  %220 = load i32, i32* %219, align 8
  %221 = add i32 %220, %218
  %222 = shl i32 %221, 1
  %223 = load i32, i32* %37, align 8
  %224 = icmp ult i32 %222, %223
  br i1 %224, label %227, label %225

225:                                              ; preds = %215
  %226 = tail call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable"* %28, %"class.WTF::StringImpl"** %165) #9
  br label %227

227:                                              ; preds = %225, %215
  %228 = phi %"class.WTF::StringImpl"** [ %165, %215 ], [ %226, %225 ]
  %229 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %228, align 8
  br label %250

230:                                              ; preds = %155
  %231 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %152, align 8
  %232 = icmp eq %"class.WTF::StringImpl"* %231, null
  br i1 %232, label %250, label %233

233:                                              ; preds = %230
  %234 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %231, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %235 = load atomic i32, i32* %234 monotonic, align 4
  %236 = and i32 %235, 2
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %238, label %250

238:                                              ; preds = %233
  %239 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %231, i64 0, i32 0
  %240 = load i32, i32* %239, align 4
  %241 = zext i32 %240 to i33
  %242 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %241, i33 1) #9
  %243 = extractvalue { i33, i1 } %242, 1
  %244 = extractvalue { i33, i1 } %242, 0
  %245 = icmp slt i33 %244, 0
  %246 = or i1 %243, %245
  br i1 %246, label %247, label %248, !prof !3

247:                                              ; preds = %238
  tail call void @llvm.trap() #9
  unreachable

248:                                              ; preds = %238
  %249 = trunc i33 %244 to i32
  store i32 %249, i32* %239, align 4
  br label %250

250:                                              ; preds = %248, %233, %230, %227, %25, %10, %7, %3
  %251 = phi %"class.WTF::StringImpl"* [ null, %3 ], [ null, %7 ], [ %8, %10 ], [ %8, %25 ], [ %229, %227 ], [ null, %230 ], [ %231, %233 ], [ %231, %248 ]
  ret %"class.WTF::StringImpl"* %251
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF17AtomicStringTable3AddEPKhj(%"class.WTF::AtomicStringTable"*, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i8* %1, null
  br i1 %4, label %248, label %5

5:                                                ; preds = %3
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %7, label %27

7:                                                ; preds = %5
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %248, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %248

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #9
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !3

24:                                               ; preds = %15
  tail call void @llvm.trap() #9
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %248

27:                                               ; preds = %5
  %28 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"** %30, null
  br i1 %31, label %32, label %35

32:                                               ; preds = %27
  %33 = tail call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable"* %28, %"class.WTF::StringImpl"** null) #9
  %34 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %29, align 8, !noalias !7
  br label %35

35:                                               ; preds = %32, %27
  %36 = phi %"class.WTF::StringImpl"** [ %30, %27 ], [ %34, %32 ]
  %37 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %38 = load i32, i32* %37, align 8, !noalias !7
  %39 = add i32 %38, -1
  %40 = zext i32 %39 to i64
  %41 = and i32 %2, 1
  %42 = icmp eq i32 %41, 0
  %43 = lshr i32 %2, 1
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %107, label %45

45:                                               ; preds = %35
  %46 = and i32 %43, 1
  %47 = icmp eq i32 %43, 1
  br i1 %47, label %82, label %48

48:                                               ; preds = %45
  %49 = sub nsw i32 %43, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i32 [ -1640531527, %48 ], [ %78, %50 ]
  %52 = phi i8* [ %1, %48 ], [ %79, %50 ]
  %53 = phi i32 [ %49, %48 ], [ %80, %50 ]
  %54 = load i8, i8* %52, align 1, !noalias !7
  %55 = getelementptr inbounds i8, i8* %52, i64 1
  %56 = load i8, i8* %55, align 1, !noalias !7
  %57 = zext i8 %54 to i32
  %58 = add i32 %51, %57
  %59 = shl i32 %58, 16
  %60 = zext i8 %56 to i32
  %61 = shl nuw nsw i32 %60, 11
  %62 = xor i32 %61, %58
  %63 = xor i32 %62, %59
  %64 = lshr i32 %63, 11
  %65 = add i32 %64, %63
  %66 = getelementptr inbounds i8, i8* %52, i64 2
  %67 = load i8, i8* %66, align 1, !noalias !7
  %68 = getelementptr inbounds i8, i8* %52, i64 3
  %69 = load i8, i8* %68, align 1, !noalias !7
  %70 = zext i8 %67 to i32
  %71 = add i32 %65, %70
  %72 = shl i32 %71, 16
  %73 = zext i8 %69 to i32
  %74 = shl nuw nsw i32 %73, 11
  %75 = xor i32 %74, %71
  %76 = xor i32 %75, %72
  %77 = lshr i32 %76, 11
  %78 = add i32 %77, %76
  %79 = getelementptr inbounds i8, i8* %52, i64 4
  %80 = add i32 %53, -2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %50

82:                                               ; preds = %50, %45
  %83 = phi i32 [ undef, %45 ], [ %78, %50 ]
  %84 = phi i32 [ -1640531527, %45 ], [ %78, %50 ]
  %85 = phi i8* [ %1, %45 ], [ %79, %50 ]
  %86 = icmp eq i32 %46, 0
  br i1 %86, label %100, label %87

87:                                               ; preds = %82
  %88 = load i8, i8* %85, align 1, !noalias !7
  %89 = getelementptr inbounds i8, i8* %85, i64 1
  %90 = load i8, i8* %89, align 1, !noalias !7
  %91 = zext i8 %88 to i32
  %92 = add i32 %84, %91
  %93 = shl i32 %92, 16
  %94 = zext i8 %90 to i32
  %95 = shl nuw nsw i32 %94, 11
  %96 = xor i32 %95, %92
  %97 = xor i32 %96, %93
  %98 = lshr i32 %97, 11
  %99 = add i32 %98, %97
  br label %100

100:                                              ; preds = %82, %87
  %101 = phi i32 [ %83, %82 ], [ %99, %87 ]
  %102 = add nsw i32 %43, -1
  %103 = zext i32 %102 to i64
  %104 = shl nuw nsw i64 %103, 1
  %105 = add nuw nsw i64 %104, 2
  %106 = getelementptr i8, i8* %1, i64 %105
  br label %107

107:                                              ; preds = %100, %35
  %108 = phi i32 [ -1640531527, %35 ], [ %101, %100 ]
  %109 = phi i8* [ %1, %35 ], [ %106, %100 ]
  br i1 %42, label %118, label %110

110:                                              ; preds = %107
  %111 = load i8, i8* %109, align 1, !noalias !7
  %112 = zext i8 %111 to i32
  %113 = add i32 %108, %112
  %114 = shl i32 %113, 11
  %115 = xor i32 %114, %113
  %116 = lshr i32 %115, 17
  %117 = add i32 %116, %115
  br label %118

118:                                              ; preds = %110, %107
  %119 = phi i32 [ %117, %110 ], [ %108, %107 ]
  %120 = shl i32 %119, 3
  %121 = xor i32 %120, %119
  %122 = lshr i32 %121, 5
  %123 = add i32 %122, %121
  %124 = shl i32 %123, 2
  %125 = xor i32 %124, %123
  %126 = lshr i32 %125, 15
  %127 = add i32 %126, %125
  %128 = shl i32 %127, 10
  %129 = xor i32 %128, %127
  %130 = and i32 %129, 16777215
  %131 = icmp eq i32 %130, 0
  %132 = select i1 %131, i32 8388608, i32 %130
  %133 = and i32 %132, %39
  %134 = zext i32 %133 to i64
  %135 = xor i32 %132, -1
  %136 = lshr i32 %132, 23
  %137 = add nsw i32 %136, %135
  %138 = shl i32 %137, 12
  %139 = xor i32 %138, %137
  %140 = lshr i32 %139, 7
  %141 = xor i32 %140, %139
  %142 = shl i32 %141, 2
  %143 = xor i32 %142, %141
  %144 = lshr i32 %143, 20
  %145 = xor i32 %144, %143
  %146 = or i32 %145, 1
  %147 = zext i32 %146 to i64
  br label %148

148:                                              ; preds = %157, %118
  %149 = phi i64 [ 0, %118 ], [ %160, %157 ]
  %150 = phi i64 [ %134, %118 ], [ %162, %157 ]
  %151 = phi %"class.WTF::StringImpl"** [ null, %118 ], [ %158, %157 ]
  %152 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, i64 %150
  %153 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %152, align 8, !noalias !7
  %154 = ptrtoint %"class.WTF::StringImpl"* %153 to i64
  switch i64 %154, label %155 [
    i64 0, label %163
    i64 -1, label %157
  ]

155:                                              ; preds = %148
  %156 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKhj(%"class.WTF::StringImpl"* %153, i8* nonnull %1, i32 %2) #9, !noalias !7
  br i1 %156, label %228, label %157

157:                                              ; preds = %155, %148
  %158 = phi %"class.WTF::StringImpl"** [ %151, %155 ], [ %152, %148 ]
  %159 = icmp eq i64 %149, 0
  %160 = select i1 %159, i64 %147, i64 %149
  %161 = add i64 %160, %150
  %162 = and i64 %161, %40
  br label %148

163:                                              ; preds = %148
  %164 = icmp eq %"class.WTF::StringImpl"** %151, null
  %165 = select i1 %164, %"class.WTF::StringImpl"** %152, %"class.WTF::StringImpl"** %151
  %166 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %165, align 8
  %167 = icmp eq %"class.WTF::StringImpl"* %166, inttoptr (i64 -1 to %"class.WTF::StringImpl"*)
  br i1 %167, label %168, label %176

168:                                              ; preds = %163
  %169 = bitcast %"class.WTF::StringImpl"** %165 to i64*
  store i64 0, i64* %169, align 8
  %170 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 3
  %171 = load i32, i32* %170, align 8
  %172 = add i32 %171, 2147483647
  %173 = and i32 %172, 2147483647
  %174 = and i32 %171, -2147483648
  %175 = or i32 %173, %174
  store i32 %175, i32* %170, align 8
  br label %176

176:                                              ; preds = %168, %163
  %177 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* nonnull %1, i32 %2) #9
  %178 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %177, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %179 = load atomic i32, i32* %178 monotonic, align 4
  %180 = and i32 %179, 2
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %194

182:                                              ; preds = %176
  %183 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %177, i64 0, i32 0
  %184 = load i32, i32* %183, align 4
  %185 = zext i32 %184 to i33
  %186 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %185, i33 1) #9
  %187 = extractvalue { i33, i1 } %186, 1
  %188 = extractvalue { i33, i1 } %186, 0
  %189 = icmp slt i33 %188, 0
  %190 = or i1 %187, %189
  br i1 %190, label %191, label %192, !prof !3

191:                                              ; preds = %182
  tail call void @llvm.trap() #9
  unreachable

192:                                              ; preds = %182
  %193 = trunc i33 %188 to i32
  store i32 %193, i32* %183, align 4
  br label %194

194:                                              ; preds = %192, %176
  store %"class.WTF::StringImpl"* %177, %"class.WTF::StringImpl"** %165, align 8
  %195 = shl nuw i32 %132, 8
  %196 = atomicrmw or i32* %178, i32 %195 monotonic
  %197 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %165, align 8
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %197, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %199 = atomicrmw or i32* %198, i32 4 release
  %200 = icmp eq %"class.WTF::StringImpl"* %177, null
  br i1 %200, label %213, label %201

201:                                              ; preds = %194
  %202 = load atomic i32, i32* %178 monotonic, align 4
  %203 = and i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %177, i64 0, i32 0
  %206 = load i32, i32* %205, align 4
  br i1 %204, label %207, label %209

207:                                              ; preds = %201
  %208 = add i32 %206, -1
  store i32 %208, i32* %205, align 4
  br label %209

209:                                              ; preds = %207, %201
  %210 = phi i32 [ %208, %207 ], [ %206, %201 ]
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %213

212:                                              ; preds = %209
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %177) #9
  br label %213

213:                                              ; preds = %212, %209, %194
  %214 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 2
  %215 = load i32, i32* %214, align 4
  %216 = add i32 %215, 1
  store i32 %216, i32* %214, align 4
  %217 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 3
  %218 = load i32, i32* %217, align 8
  %219 = add i32 %218, %216
  %220 = shl i32 %219, 1
  %221 = load i32, i32* %37, align 8
  %222 = icmp ult i32 %220, %221
  br i1 %222, label %225, label %223

223:                                              ; preds = %213
  %224 = tail call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable"* %28, %"class.WTF::StringImpl"** %165) #9
  br label %225

225:                                              ; preds = %223, %213
  %226 = phi %"class.WTF::StringImpl"** [ %165, %213 ], [ %224, %223 ]
  %227 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %226, align 8
  br label %248

228:                                              ; preds = %155
  %229 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %152, align 8
  %230 = icmp eq %"class.WTF::StringImpl"* %229, null
  br i1 %230, label %248, label %231

231:                                              ; preds = %228
  %232 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %229, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %233 = load atomic i32, i32* %232 monotonic, align 4
  %234 = and i32 %233, 2
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %236, label %248

236:                                              ; preds = %231
  %237 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %229, i64 0, i32 0
  %238 = load i32, i32* %237, align 4
  %239 = zext i32 %238 to i33
  %240 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %239, i33 1) #9
  %241 = extractvalue { i33, i1 } %240, 1
  %242 = extractvalue { i33, i1 } %240, 0
  %243 = icmp slt i33 %242, 0
  %244 = or i1 %241, %243
  br i1 %244, label %245, label %246, !prof !3

245:                                              ; preds = %236
  tail call void @llvm.trap() #9
  unreachable

246:                                              ; preds = %236
  %247 = trunc i33 %242 to i32
  store i32 %247, i32* %237, align 4
  br label %248

248:                                              ; preds = %246, %231, %228, %225, %25, %10, %7, %3
  %249 = phi %"class.WTF::StringImpl"* [ null, %3 ], [ null, %7 ], [ %8, %10 ], [ %8, %25 ], [ %227, %225 ], [ null, %228 ], [ %229, %231 ], [ %229, %246 ]
  ret %"class.WTF::StringImpl"* %249
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF17AtomicStringTable7AddUTF8EPKcS2_(%"class.WTF::AtomicStringTable"*, i8*, i8*) local_unnamed_addr #0 align 2 {
  %4 = alloca i8, align 1
  %5 = alloca i16*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %"struct.WTF::(anonymous namespace)::HashAndUTF8Characters", align 8
  %8 = bitcast %"struct.WTF::(anonymous namespace)::HashAndUTF8Characters"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  %9 = getelementptr inbounds %"struct.WTF::(anonymous namespace)::HashAndUTF8Characters", %"struct.WTF::(anonymous namespace)::HashAndUTF8Characters"* %7, i64 0, i32 1
  store i8* %1, i8** %9, align 8
  %10 = getelementptr inbounds %"struct.WTF::(anonymous namespace)::HashAndUTF8Characters", %"struct.WTF::(anonymous namespace)::HashAndUTF8Characters"* %7, i64 0, i32 2
  %11 = getelementptr inbounds %"struct.WTF::(anonymous namespace)::HashAndUTF8Characters", %"struct.WTF::(anonymous namespace)::HashAndUTF8Characters"* %7, i64 0, i32 3
  %12 = call i32 @_ZN3WTF7unicode51CalculateStringHashAndLengthFromUTF8MaskingTop8BitsEPKcS2_RjS3_(i8* %1, i8* %2, i32* dereferenceable(4) %10, i32* dereferenceable(4) %11) #9
  %13 = getelementptr inbounds %"struct.WTF::(anonymous namespace)::HashAndUTF8Characters", %"struct.WTF::(anonymous namespace)::HashAndUTF8Characters"* %7, i64 0, i32 0
  store i32 %12, i32* %13, align 8
  %14 = icmp eq i32 %12, 0
  br i1 %14, label %234, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"** %18, null
  br i1 %19, label %20, label %24

20:                                               ; preds = %15
  %21 = call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable"* %16, %"class.WTF::StringImpl"** null) #9
  %22 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %17, align 8, !noalias !10
  %23 = load i32, i32* %13, align 8, !noalias !10
  br label %24

24:                                               ; preds = %20, %15
  %25 = phi i32 [ %12, %15 ], [ %23, %20 ]
  %26 = phi %"class.WTF::StringImpl"** [ %18, %15 ], [ %22, %20 ]
  %27 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %28 = load i32, i32* %27, align 8, !noalias !10
  %29 = add i32 %28, -1
  %30 = zext i32 %29 to i64
  %31 = and i32 %25, %29
  %32 = zext i32 %31 to i64
  %33 = xor i32 %25, -1
  %34 = lshr i32 %25, 23
  %35 = add i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %120, %24
  %47 = phi i64 [ 0, %24 ], [ %123, %120 ]
  %48 = phi i64 [ %32, %24 ], [ %125, %120 ]
  %49 = phi %"class.WTF::StringImpl"** [ null, %24 ], [ %121, %120 ]
  %50 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, i64 %48
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8, !noalias !10
  %52 = ptrtoint %"class.WTF::StringImpl"* %51 to i64
  switch i64 %52, label %53 [
    i64 0, label %126
    i64 -1, label %120
  ]

53:                                               ; preds = %46
  %54 = load i32, i32* %11, align 4, !noalias !10
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 1
  %56 = load i32, i32* %55, align 4, !noalias !10
  %57 = icmp eq i32 %54, %56
  br i1 %57, label %58, label %120

58:                                               ; preds = %53
  %59 = load i32, i32* %10, align 8, !noalias !10
  %60 = icmp eq i32 %54, %59
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load atomic i32, i32* %61 monotonic, align 4, !noalias !10
  %63 = and i32 %62, 1
  %64 = icmp ne i32 %63, 0
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 1
  br i1 %60, label %75, label %66

66:                                               ; preds = %58
  br i1 %64, label %67, label %112

67:                                               ; preds = %66
  %68 = bitcast %"class.WTF::StringImpl"* %65 to i8*
  %69 = zext i32 %54 to i64
  %70 = getelementptr inbounds i8, i8* %68, i64 %69
  %71 = load i8*, i8** %9, align 8, !noalias !10
  %72 = zext i32 %59 to i64
  %73 = getelementptr inbounds i8, i8* %71, i64 %72
  %74 = call zeroext i1 @_ZN3WTF7unicode19EqualLatin1WithUTF8EPKhS2_PKcS4_(i8* %68, i8* %70, i8* %71, i8* %73) #9, !noalias !10
  br i1 %74, label %212, label %120

75:                                               ; preds = %58
  br i1 %64, label %76, label %94

76:                                               ; preds = %75
  %77 = bitcast %"class.WTF::StringImpl"* %65 to i8*
  %78 = icmp eq i32 %54, 0
  br i1 %78, label %212, label %79

79:                                               ; preds = %76
  %80 = load i8*, i8** %9, align 8, !noalias !10
  %81 = zext i32 %54 to i64
  br label %84

82:                                               ; preds = %84
  %83 = icmp eq i64 %93, %81
  br i1 %83, label %214, label %84

84:                                               ; preds = %82, %79
  %85 = phi i64 [ 0, %79 ], [ %93, %82 ]
  %86 = getelementptr inbounds i8, i8* %77, i64 %85
  %87 = load i8, i8* %86, align 1, !noalias !10
  %88 = zext i8 %87 to i32
  %89 = getelementptr inbounds i8, i8* %80, i64 %85
  %90 = load i8, i8* %89, align 1, !noalias !10
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %88, %91
  %93 = add nuw nsw i64 %85, 1
  br i1 %92, label %82, label %120

94:                                               ; preds = %75
  %95 = bitcast %"class.WTF::StringImpl"* %65 to i16*
  %96 = icmp eq i32 %54, 0
  br i1 %96, label %212, label %97

97:                                               ; preds = %94
  %98 = load i8*, i8** %9, align 8, !noalias !10
  %99 = zext i32 %54 to i64
  br label %102

100:                                              ; preds = %102
  %101 = icmp eq i64 %111, %99
  br i1 %101, label %214, label %102

102:                                              ; preds = %100, %97
  %103 = phi i64 [ 0, %97 ], [ %111, %100 ]
  %104 = getelementptr inbounds i16, i16* %95, i64 %103
  %105 = load i16, i16* %104, align 2, !noalias !10
  %106 = zext i16 %105 to i32
  %107 = getelementptr inbounds i8, i8* %98, i64 %103
  %108 = load i8, i8* %107, align 1, !noalias !10
  %109 = sext i8 %108 to i32
  %110 = icmp eq i32 %106, %109
  %111 = add nuw nsw i64 %103, 1
  br i1 %110, label %100, label %120

112:                                              ; preds = %66
  %113 = bitcast %"class.WTF::StringImpl"* %65 to i16*
  %114 = zext i32 %54 to i64
  %115 = getelementptr inbounds i16, i16* %113, i64 %114
  %116 = load i8*, i8** %9, align 8, !noalias !10
  %117 = zext i32 %59 to i64
  %118 = getelementptr inbounds i8, i8* %116, i64 %117
  %119 = call zeroext i1 @_ZN3WTF7unicode18EqualUTF16WithUTF8EPKDsS2_PKcS4_(i16* %113, i16* %115, i8* %116, i8* %118) #9, !noalias !10
  br i1 %119, label %212, label %120

120:                                              ; preds = %102, %84, %112, %67, %53, %46
  %121 = phi %"class.WTF::StringImpl"** [ %49, %112 ], [ %49, %67 ], [ %49, %53 ], [ %50, %46 ], [ %49, %84 ], [ %49, %102 ]
  %122 = icmp eq i64 %47, 0
  %123 = select i1 %122, i64 %45, i64 %47
  %124 = add i64 %123, %48
  %125 = and i64 %124, %30
  br label %46

126:                                              ; preds = %46
  %127 = icmp eq %"class.WTF::StringImpl"** %49, null
  %128 = select i1 %127, %"class.WTF::StringImpl"** %50, %"class.WTF::StringImpl"** %49
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, inttoptr (i64 -1 to %"class.WTF::StringImpl"*)
  br i1 %130, label %131, label %139

131:                                              ; preds = %126
  %132 = bitcast %"class.WTF::StringImpl"** %128 to i64*
  store i64 0, i64* %132, align 8
  %133 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 3
  %134 = load i32, i32* %133, align 8
  %135 = add i32 %134, 2147483647
  %136 = and i32 %135, 2147483647
  %137 = and i32 %134, -2147483648
  %138 = or i32 %136, %137
  store i32 %138, i32* %133, align 8
  br label %139

139:                                              ; preds = %131, %126
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #9
  %140 = load i32, i32* %11, align 4
  %141 = load i32, i32* %10, align 8
  %142 = icmp eq i32 %140, %141
  %143 = zext i1 %142 to i8
  store i8 %143, i8* %4, align 1
  br i1 %142, label %157, label %144

144:                                              ; preds = %139
  %145 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %145) #9
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %5, align 8
  %146 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %140, i16** nonnull dereferenceable(8) %5) #9
  %147 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %147) #9
  %148 = load i8*, i8** %9, align 8
  store i8* %148, i8** %6, align 8
  %149 = load i32, i32* %10, align 8
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds i8, i8* %148, i64 %150
  %152 = load i16*, i16** %5, align 8
  %153 = load i32, i32* %11, align 4
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds i16, i16* %152, i64 %154
  %156 = call i32 @_ZN3WTF7unicode18ConvertUTF8ToUTF16EPPKcS2_PPDsS4_Pbb(i8** nonnull %6, i8* %151, i16** nonnull %5, i16* %155, i8* nonnull %4, i1 zeroext true) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %147) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %145) #9
  br label %160

157:                                              ; preds = %139
  %158 = load i8*, i8** %9, align 8
  %159 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %158, i32 %140) #9
  br label %160

160:                                              ; preds = %157, %144
  %161 = phi %"class.WTF::StringImpl"* [ %159, %157 ], [ %146, %144 ]
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %163 = load atomic i32, i32* %162 monotonic, align 4
  %164 = and i32 %163, 2
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %178

166:                                              ; preds = %160
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 0
  %168 = load i32, i32* %167, align 4
  %169 = zext i32 %168 to i33
  %170 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %169, i33 1) #9
  %171 = extractvalue { i33, i1 } %170, 1
  %172 = extractvalue { i33, i1 } %170, 0
  %173 = icmp slt i33 %172, 0
  %174 = or i1 %171, %173
  br i1 %174, label %175, label %176, !prof !3

175:                                              ; preds = %166
  call void @llvm.trap() #9
  unreachable

176:                                              ; preds = %166
  %177 = trunc i33 %172 to i32
  store i32 %177, i32* %167, align 4
  br label %178

178:                                              ; preds = %176, %160
  store %"class.WTF::StringImpl"* %161, %"class.WTF::StringImpl"** %128, align 8
  %179 = shl i32 %25, 8
  %180 = atomicrmw or i32* %162, i32 %179 monotonic
  %181 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %181, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %183 = atomicrmw or i32* %182, i32 4 release
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #9
  %184 = icmp eq %"class.WTF::StringImpl"* %161, null
  br i1 %184, label %197, label %185

185:                                              ; preds = %178
  %186 = load atomic i32, i32* %162 monotonic, align 4
  %187 = and i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 0
  %190 = load i32, i32* %189, align 4
  br i1 %188, label %191, label %193

191:                                              ; preds = %185
  %192 = add i32 %190, -1
  store i32 %192, i32* %189, align 4
  br label %193

193:                                              ; preds = %191, %185
  %194 = phi i32 [ %192, %191 ], [ %190, %185 ]
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %197

196:                                              ; preds = %193
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %161) #9
  br label %197

197:                                              ; preds = %196, %193, %178
  %198 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 2
  %199 = load i32, i32* %198, align 4
  %200 = add i32 %199, 1
  store i32 %200, i32* %198, align 4
  %201 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 3
  %202 = load i32, i32* %201, align 8
  %203 = add i32 %202, %200
  %204 = shl i32 %203, 1
  %205 = load i32, i32* %27, align 8
  %206 = icmp ult i32 %204, %205
  br i1 %206, label %209, label %207

207:                                              ; preds = %197
  %208 = call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable"* %16, %"class.WTF::StringImpl"** %128) #9
  br label %209

209:                                              ; preds = %207, %197
  %210 = phi %"class.WTF::StringImpl"** [ %208, %207 ], [ %128, %197 ]
  %211 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %210, align 8
  br label %234

212:                                              ; preds = %112, %94, %76, %67
  %213 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  br label %214

214:                                              ; preds = %100, %82, %212
  %215 = phi %"class.WTF::StringImpl"* [ %213, %212 ], [ %51, %82 ], [ %51, %100 ]
  %216 = icmp eq %"class.WTF::StringImpl"* %215, null
  br i1 %216, label %234, label %217

217:                                              ; preds = %214
  %218 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %215, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %219 = load atomic i32, i32* %218 monotonic, align 4
  %220 = and i32 %219, 2
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %234

222:                                              ; preds = %217
  %223 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %215, i64 0, i32 0
  %224 = load i32, i32* %223, align 4
  %225 = zext i32 %224 to i33
  %226 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %225, i33 1) #9
  %227 = extractvalue { i33, i1 } %226, 1
  %228 = extractvalue { i33, i1 } %226, 0
  %229 = icmp slt i33 %228, 0
  %230 = or i1 %227, %229
  br i1 %230, label %231, label %232, !prof !3

231:                                              ; preds = %222
  call void @llvm.trap() #9
  unreachable

232:                                              ; preds = %222
  %233 = trunc i33 %228 to i32
  store i32 %233, i32* %223, align 4
  br label %234

234:                                              ; preds = %232, %217, %214, %209, %3
  %235 = phi %"class.WTF::StringImpl"* [ null, %3 ], [ %211, %209 ], [ null, %214 ], [ %215, %217 ], [ %215, %232 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #9
  ret %"class.WTF::StringImpl"* %235
}

declare i32 @_ZN3WTF7unicode51CalculateStringHashAndLengthFromUTF8MaskingTop8BitsEPKcS2_RjS3_(i8*, i8*, i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF17AtomicStringTable12WeakFindSlowEPNS_10StringImplE(%"class.WTF::AtomicStringTable"*, %"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.WTF::StringImpl"*, align 8
  store %"class.WTF::StringImpl"* %1, %"class.WTF::StringImpl"** %4, align 8
  %5 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0
  %6 = call { %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"** } @_ZNK3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE4findERKS2_(%"class.WTF::HashTable"* %5, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %4) #9
  %7 = extractvalue { %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"** } %6, 0
  %8 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, i64 %12
  %14 = icmp eq %"class.WTF::StringImpl"** %7, %13
  br i1 %14, label %30, label %15

15:                                               ; preds = %2
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %17 = ptrtoint %"class.WTF::StringImpl"* %16 to i64
  %18 = icmp eq %"class.WTF::StringImpl"* %16, null
  br i1 %18, label %30, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load atomic i32, i32* %20 acquire, align 4
  %22 = and i32 %21, 4
  %23 = icmp ne i32 %22, 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %24, %16
  %26 = or i1 %23, %25
  br i1 %26, label %30, label %27

27:                                               ; preds = %19
  %28 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.3, i64 0, i64 0)) #9
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #9
  br label %30

30:                                               ; preds = %27, %19, %15, %2
  %31 = phi i64 [ 0, %2 ], [ %17, %15 ], [ %17, %19 ], [ %17, %27 ]
  ret i64 %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF17AtomicStringTable12WeakFindSlowERKNS_10StringViewE(%"class.WTF::AtomicStringTable"* nocapture readonly, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"** %6, null
  br i1 %7, label %268, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = add i32 %10, -1
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 1
  %16 = bitcast %"class.WTF::StringImpl"* %15 to i8*
  %17 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %18 = load i8*, i8** %17, align 8
  %19 = icmp eq i8* %18, %16
  %20 = bitcast i8* %18 to i16*
  %21 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %22 = load i32, i32* %21, align 8
  br i1 %19, label %23, label %36

23:                                               ; preds = %8
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp ne i32 %22, %25
  %27 = icmp eq %"class.WTF::StringImpl"* %14, null
  %28 = or i1 %27, %26
  br i1 %28, label %36, label %29, !prof !13

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = lshr i32 %31, 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %223

34:                                               ; preds = %29
  %35 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* nonnull %14) #9
  br label %223

36:                                               ; preds = %23, %8
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  %41 = and i32 %22, 1
  %42 = icmp eq i32 %41, 0
  %43 = lshr i32 %22, 1
  %44 = icmp eq i32 %43, 0
  br i1 %40, label %134, label %45

45:                                               ; preds = %36
  br i1 %44, label %108, label %46

46:                                               ; preds = %45
  %47 = and i32 %43, 1
  %48 = icmp eq i32 %43, 1
  br i1 %48, label %83, label %49

49:                                               ; preds = %46
  %50 = sub nsw i32 %43, %47
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi i32 [ -1640531527, %49 ], [ %79, %51 ]
  %53 = phi i8* [ %18, %49 ], [ %80, %51 ]
  %54 = phi i32 [ %50, %49 ], [ %81, %51 ]
  %55 = load i8, i8* %53, align 1
  %56 = getelementptr inbounds i8, i8* %53, i64 1
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %55 to i32
  %59 = add i32 %52, %58
  %60 = shl i32 %59, 16
  %61 = zext i8 %57 to i32
  %62 = shl nuw nsw i32 %61, 11
  %63 = xor i32 %62, %59
  %64 = xor i32 %63, %60
  %65 = lshr i32 %64, 11
  %66 = add i32 %65, %64
  %67 = getelementptr inbounds i8, i8* %53, i64 2
  %68 = load i8, i8* %67, align 1
  %69 = getelementptr inbounds i8, i8* %53, i64 3
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %68 to i32
  %72 = add i32 %66, %71
  %73 = shl i32 %72, 16
  %74 = zext i8 %70 to i32
  %75 = shl nuw nsw i32 %74, 11
  %76 = xor i32 %75, %72
  %77 = xor i32 %76, %73
  %78 = lshr i32 %77, 11
  %79 = add i32 %78, %77
  %80 = getelementptr inbounds i8, i8* %53, i64 4
  %81 = add i32 %54, -2
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %51

83:                                               ; preds = %51, %46
  %84 = phi i32 [ undef, %46 ], [ %79, %51 ]
  %85 = phi i32 [ -1640531527, %46 ], [ %79, %51 ]
  %86 = phi i8* [ %18, %46 ], [ %80, %51 ]
  %87 = icmp eq i32 %47, 0
  br i1 %87, label %101, label %88

88:                                               ; preds = %83
  %89 = load i8, i8* %86, align 1
  %90 = getelementptr inbounds i8, i8* %86, i64 1
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %89 to i32
  %93 = add i32 %85, %92
  %94 = shl i32 %93, 16
  %95 = zext i8 %91 to i32
  %96 = shl nuw nsw i32 %95, 11
  %97 = xor i32 %96, %93
  %98 = xor i32 %97, %94
  %99 = lshr i32 %98, 11
  %100 = add i32 %99, %98
  br label %101

101:                                              ; preds = %83, %88
  %102 = phi i32 [ %84, %83 ], [ %100, %88 ]
  %103 = add nsw i32 %43, -1
  %104 = zext i32 %103 to i64
  %105 = shl nuw nsw i64 %104, 1
  %106 = add nuw nsw i64 %105, 2
  %107 = getelementptr i8, i8* %18, i64 %106
  br label %108

108:                                              ; preds = %101, %45
  %109 = phi i32 [ -1640531527, %45 ], [ %102, %101 ]
  %110 = phi i8* [ %18, %45 ], [ %107, %101 ]
  br i1 %42, label %119, label %111

111:                                              ; preds = %108
  %112 = load i8, i8* %110, align 1
  %113 = zext i8 %112 to i32
  %114 = add i32 %109, %113
  %115 = shl i32 %114, 11
  %116 = xor i32 %115, %114
  %117 = lshr i32 %116, 17
  %118 = add i32 %117, %116
  br label %119

119:                                              ; preds = %111, %108
  %120 = phi i32 [ %118, %111 ], [ %109, %108 ]
  %121 = shl i32 %120, 3
  %122 = xor i32 %121, %120
  %123 = lshr i32 %122, 5
  %124 = add i32 %123, %122
  %125 = shl i32 %124, 2
  %126 = xor i32 %125, %124
  %127 = lshr i32 %126, 15
  %128 = add i32 %127, %126
  %129 = shl i32 %128, 10
  %130 = xor i32 %129, %128
  %131 = and i32 %130, 16777215
  %132 = icmp eq i32 %131, 0
  %133 = select i1 %132, i32 8388608, i32 %131
  br label %223

134:                                              ; preds = %36
  br i1 %44, label %197, label %135

135:                                              ; preds = %134
  %136 = and i32 %43, 1
  %137 = icmp eq i32 %43, 1
  br i1 %137, label %172, label %138

138:                                              ; preds = %135
  %139 = sub nsw i32 %43, %136
  br label %140

140:                                              ; preds = %140, %138
  %141 = phi i32 [ -1640531527, %138 ], [ %168, %140 ]
  %142 = phi i16* [ %20, %138 ], [ %169, %140 ]
  %143 = phi i32 [ %139, %138 ], [ %170, %140 ]
  %144 = load i16, i16* %142, align 2
  %145 = getelementptr inbounds i16, i16* %142, i64 1
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %144 to i32
  %148 = add i32 %141, %147
  %149 = shl i32 %148, 16
  %150 = zext i16 %146 to i32
  %151 = shl nuw nsw i32 %150, 11
  %152 = xor i32 %151, %148
  %153 = xor i32 %152, %149
  %154 = lshr i32 %153, 11
  %155 = add i32 %154, %153
  %156 = getelementptr inbounds i16, i16* %142, i64 2
  %157 = load i16, i16* %156, align 2
  %158 = getelementptr inbounds i16, i16* %142, i64 3
  %159 = load i16, i16* %158, align 2
  %160 = zext i16 %157 to i32
  %161 = add i32 %155, %160
  %162 = shl i32 %161, 16
  %163 = zext i16 %159 to i32
  %164 = shl nuw nsw i32 %163, 11
  %165 = xor i32 %164, %161
  %166 = xor i32 %165, %162
  %167 = lshr i32 %166, 11
  %168 = add i32 %167, %166
  %169 = getelementptr inbounds i16, i16* %142, i64 4
  %170 = add i32 %143, -2
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %140

172:                                              ; preds = %140, %135
  %173 = phi i32 [ undef, %135 ], [ %168, %140 ]
  %174 = phi i32 [ -1640531527, %135 ], [ %168, %140 ]
  %175 = phi i16* [ %20, %135 ], [ %169, %140 ]
  %176 = icmp eq i32 %136, 0
  br i1 %176, label %190, label %177

177:                                              ; preds = %172
  %178 = load i16, i16* %175, align 2
  %179 = getelementptr inbounds i16, i16* %175, i64 1
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %178 to i32
  %182 = add i32 %174, %181
  %183 = shl i32 %182, 16
  %184 = zext i16 %180 to i32
  %185 = shl nuw nsw i32 %184, 11
  %186 = xor i32 %185, %182
  %187 = xor i32 %186, %183
  %188 = lshr i32 %187, 11
  %189 = add i32 %188, %187
  br label %190

190:                                              ; preds = %172, %177
  %191 = phi i32 [ %173, %172 ], [ %189, %177 ]
  %192 = add nsw i32 %43, -1
  %193 = zext i32 %192 to i64
  %194 = shl nuw nsw i64 %193, 1
  %195 = add nuw nsw i64 %194, 2
  %196 = getelementptr i16, i16* %20, i64 %195
  br label %197

197:                                              ; preds = %190, %134
  %198 = phi i32 [ -1640531527, %134 ], [ %191, %190 ]
  %199 = phi i16* [ %20, %134 ], [ %196, %190 ]
  br i1 %42, label %208, label %200

200:                                              ; preds = %197
  %201 = load i16, i16* %199, align 2
  %202 = zext i16 %201 to i32
  %203 = add i32 %198, %202
  %204 = shl i32 %203, 11
  %205 = xor i32 %204, %203
  %206 = lshr i32 %205, 17
  %207 = add i32 %206, %205
  br label %208

208:                                              ; preds = %200, %197
  %209 = phi i32 [ %207, %200 ], [ %198, %197 ]
  %210 = shl i32 %209, 3
  %211 = xor i32 %210, %209
  %212 = lshr i32 %211, 5
  %213 = add i32 %212, %211
  %214 = shl i32 %213, 2
  %215 = xor i32 %214, %213
  %216 = lshr i32 %215, 15
  %217 = add i32 %216, %215
  %218 = shl i32 %217, 10
  %219 = xor i32 %218, %217
  %220 = and i32 %219, 16777215
  %221 = icmp eq i32 %220, 0
  %222 = select i1 %221, i32 8388608, i32 %220
  br label %223

223:                                              ; preds = %208, %119, %34, %29
  %224 = phi i32 [ %133, %119 ], [ %222, %208 ], [ %35, %34 ], [ %32, %29 ]
  %225 = and i32 %224, %11
  %226 = zext i32 %225 to i64
  %227 = bitcast %"class.WTF::StringView"* %4 to i8*
  %228 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  %229 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %230 = bitcast i8** %229 to %"class.WTF::StringImpl"**
  %231 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  %232 = xor i32 %224, -1
  %233 = lshr i32 %224, 23
  %234 = add i32 %233, %232
  %235 = shl i32 %234, 12
  %236 = xor i32 %235, %234
  %237 = lshr i32 %236, 7
  %238 = xor i32 %237, %236
  %239 = shl i32 %238, 2
  %240 = xor i32 %239, %238
  %241 = lshr i32 %240, 20
  %242 = xor i32 %241, %240
  %243 = or i32 %242, 1
  %244 = zext i32 %243 to i64
  br label %245

245:                                              ; preds = %257, %223
  %246 = phi i64 [ 0, %223 ], [ %259, %257 ]
  %247 = phi i64 [ %226, %223 ], [ %261, %257 ]
  %248 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, i64 %247
  %249 = bitcast %"class.WTF::StringImpl"** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = inttoptr i64 %250 to %"class.WTF::StringImpl"*
  switch i64 %250, label %252 [
    i64 0, label %268
    i64 -1, label %257
  ]

252:                                              ; preds = %245
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %227) #9
  store %"class.WTF::StringImpl"* %251, %"class.WTF::StringImpl"** %228, align 8
  %253 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %251, i64 1
  store %"class.WTF::StringImpl"* %253, %"class.WTF::StringImpl"** %230, align 8
  %254 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %251, i64 0, i32 1
  %255 = load i32, i32* %254, align 4
  store i32 %255, i32* %231, align 8
  %256 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %4, %"class.WTF::StringView"* dereferenceable(24) %1) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %227) #9
  br i1 %256, label %262, label %257

257:                                              ; preds = %252, %245
  %258 = icmp eq i64 %246, 0
  %259 = select i1 %258, i64 %244, i64 %246
  %260 = add i64 %259, %247
  %261 = and i64 %260, %12
  br label %245

262:                                              ; preds = %252
  %263 = icmp eq %"class.WTF::StringImpl"** %248, null
  br i1 %263, label %268, label %264

264:                                              ; preds = %262
  %265 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %5, align 8
  %266 = load i32, i32* %9, align 8
  %267 = zext i32 %266 to i64
  br label %274

268:                                              ; preds = %245, %262, %2
  %269 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %5, align 8
  %270 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %271 = load i32, i32* %270, align 8
  %272 = zext i32 %271 to i64
  %273 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %269, i64 %272
  br label %274

274:                                              ; preds = %264, %268
  %275 = phi i64 [ %267, %264 ], [ %272, %268 ]
  %276 = phi %"class.WTF::StringImpl"** [ %265, %264 ], [ %269, %268 ]
  %277 = phi %"class.WTF::StringImpl"** [ %248, %264 ], [ %273, %268 ]
  %278 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %276, i64 %275
  %279 = icmp eq %"class.WTF::StringImpl"** %277, %278
  br i1 %279, label %295, label %280

280:                                              ; preds = %274
  %281 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %277, align 8
  %282 = ptrtoint %"class.WTF::StringImpl"* %281 to i64
  %283 = icmp eq %"class.WTF::StringImpl"* %281, null
  br i1 %283, label %295, label %284

284:                                              ; preds = %280
  %285 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %281, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %286 = load atomic i32, i32* %285 acquire, align 4
  %287 = and i32 %286, 4
  %288 = icmp ne i32 %287, 0
  %289 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %290 = icmp eq %"class.WTF::StringImpl"* %289, %281
  %291 = or i1 %288, %290
  br i1 %291, label %295, label %292

292:                                              ; preds = %284
  %293 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %293) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.3, i64 0, i64 0)) #9
  %294 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %293) #9
  br label %295

295:                                              ; preds = %292, %284, %280, %274
  %296 = phi i64 [ 0, %274 ], [ %282, %280 ], [ %282, %284 ], [ %282, %292 ]
  ret i64 %296
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF17AtomicStringTable22WeakFindLowercasedSlowERKNS_10StringViewE(%"class.WTF::AtomicStringTable"* nocapture readonly, %"class.WTF::StringView"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"** %5, null
  br i1 %6, label %546, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -1
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, %15
  br i1 %18, label %19, label %46

19:                                               ; preds = %7
  %20 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = icmp ne i32 %21, %23
  %25 = icmp eq %"class.WTF::StringImpl"* %13, null
  %26 = or i1 %25, %24
  br i1 %26, label %46, label %27, !prof !13

27:                                               ; preds = %19
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 8
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %27
  %33 = tail call i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"* nonnull %13) #9
  br label %34

34:                                               ; preds = %32, %27
  %35 = phi i32 [ %33, %32 ], [ %29, %27 ]
  %36 = and i32 %35, 32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40, !prof !3

38:                                               ; preds = %34
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  br label %46

40:                                               ; preds = %34
  %41 = load atomic i32, i32* %28 monotonic, align 4
  %42 = lshr i32 %41, 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %195

44:                                               ; preds = %40
  %45 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* nonnull %13) #9
  br label %195

46:                                               ; preds = %38, %19, %7
  %47 = phi %"class.WTF::StringImpl"* [ %39, %38 ], [ %13, %19 ], [ %13, %7 ]
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %120, label %52

52:                                               ; preds = %46
  %53 = load i8*, i8** %16, align 8
  %54 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %55 = load i32, i32* %54, align 8
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = lshr i32 %55, 1
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %91, label %60

60:                                               ; preds = %52, %60
  %61 = phi i32 [ %82, %60 ], [ -1640531527, %52 ]
  %62 = phi i32 [ %64, %60 ], [ %58, %52 ]
  %63 = phi i8* [ %83, %60 ], [ %53, %52 ]
  %64 = add nsw i32 %62, -1
  %65 = load i8, i8* %63, align 1
  %66 = zext i8 %65 to i64
  %67 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = getelementptr inbounds i8, i8* %63, i64 1
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i64
  %72 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %68 to i32
  %75 = add i32 %61, %74
  %76 = shl i32 %75, 16
  %77 = zext i8 %73 to i32
  %78 = shl nuw nsw i32 %77, 11
  %79 = xor i32 %76, %75
  %80 = xor i32 %79, %78
  %81 = lshr i32 %80, 11
  %82 = add i32 %81, %80
  %83 = getelementptr inbounds i8, i8* %63, i64 2
  %84 = icmp eq i32 %64, 0
  br i1 %84, label %85, label %60

85:                                               ; preds = %60
  %86 = add nsw i32 %58, -1
  %87 = zext i32 %86 to i64
  %88 = shl nuw nsw i64 %87, 1
  %89 = add nuw nsw i64 %88, 2
  %90 = getelementptr i8, i8* %53, i64 %89
  br label %91

91:                                               ; preds = %85, %52
  %92 = phi i32 [ -1640531527, %52 ], [ %82, %85 ]
  %93 = phi i8* [ %53, %52 ], [ %90, %85 ]
  br i1 %57, label %105, label %94

94:                                               ; preds = %91
  %95 = load i8, i8* %93, align 1
  %96 = zext i8 %95 to i64
  %97 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = add i32 %92, %99
  %101 = shl i32 %100, 11
  %102 = xor i32 %101, %100
  %103 = lshr i32 %102, 17
  %104 = add i32 %103, %102
  br label %105

105:                                              ; preds = %94, %91
  %106 = phi i32 [ %104, %94 ], [ %92, %91 ]
  %107 = shl i32 %106, 3
  %108 = xor i32 %107, %106
  %109 = lshr i32 %108, 5
  %110 = add i32 %109, %108
  %111 = shl i32 %110, 2
  %112 = xor i32 %111, %110
  %113 = lshr i32 %112, 15
  %114 = add i32 %113, %112
  %115 = shl i32 %114, 10
  %116 = xor i32 %115, %114
  %117 = and i32 %116, 16777215
  %118 = icmp eq i32 %117, 0
  %119 = select i1 %118, i32 8388608, i32 %117
  br label %195

120:                                              ; preds = %46
  %121 = bitcast i8** %16 to i16**
  %122 = load i16*, i16** %121, align 8
  %123 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %124 = load i32, i32* %123, align 8
  %125 = and i32 %124, 1
  %126 = icmp eq i32 %125, 0
  %127 = lshr i32 %124, 1
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %164, label %129

129:                                              ; preds = %120, %129
  %130 = phi i32 [ %155, %129 ], [ -1640531527, %120 ]
  %131 = phi i32 [ %133, %129 ], [ %127, %120 ]
  %132 = phi i16* [ %156, %129 ], [ %122, %120 ]
  %133 = add nsw i32 %131, -1
  %134 = load i16, i16* %132, align 2
  %135 = add i16 %134, -65
  %136 = icmp ult i16 %135, 26
  %137 = zext i1 %136 to i16
  %138 = shl nuw nsw i16 %137, 5
  %139 = or i16 %138, %134
  %140 = getelementptr inbounds i16, i16* %132, i64 1
  %141 = load i16, i16* %140, align 2
  %142 = add i16 %141, -65
  %143 = icmp ult i16 %142, 26
  %144 = zext i1 %143 to i16
  %145 = shl nuw nsw i16 %144, 5
  %146 = or i16 %145, %141
  %147 = zext i16 %139 to i32
  %148 = add i32 %130, %147
  %149 = shl i32 %148, 16
  %150 = zext i16 %146 to i32
  %151 = shl nuw nsw i32 %150, 11
  %152 = xor i32 %151, %148
  %153 = xor i32 %152, %149
  %154 = lshr i32 %153, 11
  %155 = add i32 %154, %153
  %156 = getelementptr inbounds i16, i16* %132, i64 2
  %157 = icmp eq i32 %133, 0
  br i1 %157, label %158, label %129

158:                                              ; preds = %129
  %159 = add nsw i32 %127, -1
  %160 = zext i32 %159 to i64
  %161 = shl nuw nsw i64 %160, 1
  %162 = add nuw nsw i64 %161, 2
  %163 = getelementptr i16, i16* %122, i64 %162
  br label %164

164:                                              ; preds = %158, %120
  %165 = phi i32 [ -1640531527, %120 ], [ %155, %158 ]
  %166 = phi i16* [ %122, %120 ], [ %163, %158 ]
  br i1 %126, label %180, label %167

167:                                              ; preds = %164
  %168 = load i16, i16* %166, align 2
  %169 = add i16 %168, -65
  %170 = icmp ult i16 %169, 26
  %171 = zext i1 %170 to i16
  %172 = shl nuw nsw i16 %171, 5
  %173 = or i16 %172, %168
  %174 = zext i16 %173 to i32
  %175 = add i32 %165, %174
  %176 = shl i32 %175, 11
  %177 = xor i32 %176, %175
  %178 = lshr i32 %177, 17
  %179 = add i32 %178, %177
  br label %180

180:                                              ; preds = %167, %164
  %181 = phi i32 [ %179, %167 ], [ %165, %164 ]
  %182 = shl i32 %181, 3
  %183 = xor i32 %182, %181
  %184 = lshr i32 %183, 5
  %185 = add i32 %184, %183
  %186 = shl i32 %185, 2
  %187 = xor i32 %186, %185
  %188 = lshr i32 %187, 15
  %189 = add i32 %188, %187
  %190 = shl i32 %189, 10
  %191 = xor i32 %190, %189
  %192 = and i32 %191, 16777215
  %193 = icmp eq i32 %192, 0
  %194 = select i1 %193, i32 8388608, i32 %192
  br label %195

195:                                              ; preds = %180, %105, %44, %40
  %196 = phi i32 [ %119, %105 ], [ %194, %180 ], [ %45, %44 ], [ %42, %40 ]
  %197 = and i32 %196, %10
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %200 = xor i32 %196, -1
  %201 = lshr i32 %196, 23
  %202 = add i32 %201, %200
  %203 = shl i32 %202, 12
  %204 = xor i32 %203, %202
  %205 = lshr i32 %204, 7
  %206 = xor i32 %205, %204
  %207 = shl i32 %206, 2
  %208 = xor i32 %207, %206
  %209 = lshr i32 %208, 20
  %210 = xor i32 %209, %208
  %211 = or i32 %210, 1
  %212 = zext i32 %211 to i64
  br label %213

213:                                              ; preds = %538, %195
  %214 = phi i64 [ 0, %195 ], [ %540, %538 ]
  %215 = phi i64 [ %198, %195 ], [ %542, %538 ]
  %216 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, i64 %215
  %217 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %216, align 8
  %218 = ptrtoint %"class.WTF::StringImpl"* %217 to i64
  switch i64 %218, label %219 [
    i64 0, label %546
    i64 -1, label %538
  ]

219:                                              ; preds = %213
  %220 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %217, i64 0, i32 1
  %221 = load i32, i32* %220, align 4
  %222 = load i32, i32* %199, align 8
  %223 = icmp eq i32 %221, %222
  br i1 %223, label %224, label %538

224:                                              ; preds = %219
  %225 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %217, i64 1
  %226 = bitcast %"class.WTF::StringImpl"* %225 to i8*
  %227 = load i8*, i8** %16, align 8
  %228 = icmp eq i8* %227, %226
  %229 = bitcast i8* %227 to i16*
  br i1 %228, label %230, label %444

230:                                              ; preds = %224
  %231 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %217, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %232 = load atomic i32, i32* %231 monotonic, align 4
  %233 = and i32 %232, 1
  %234 = icmp ne i32 %233, 0
  %235 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %236 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %235, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %237 = load atomic i32, i32* %236 monotonic, align 4
  %238 = and i32 %237, 1
  %239 = icmp ne i32 %238, 0
  %240 = xor i1 %234, %239
  br i1 %240, label %444, label %241

241:                                              ; preds = %230
  %242 = icmp eq %"class.WTF::StringImpl"* %217, %235
  %243 = bitcast %"class.WTF::StringImpl"* %225 to i16*
  %244 = load atomic i32, i32* %236 monotonic, align 4
  br i1 %242, label %245, label %254

245:                                              ; preds = %241
  %246 = and i32 %244, 8
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %248, label %250

248:                                              ; preds = %245
  %249 = tail call i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"* nonnull %217) #9
  br label %250

250:                                              ; preds = %248, %245
  %251 = phi i32 [ %249, %248 ], [ %244, %245 ]
  %252 = and i32 %251, 32
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %538, label %543

254:                                              ; preds = %241
  %255 = and i32 %244, 1
  %256 = icmp eq i32 %255, 0
  %257 = icmp eq i32 %221, 0
  br i1 %256, label %353, label %258

258:                                              ; preds = %254
  br i1 %257, label %543, label %259

259:                                              ; preds = %258
  %260 = zext i32 %221 to i64
  %261 = icmp ult i32 %221, 32
  br i1 %261, label %262, label %265

262:                                              ; preds = %327, %259
  %263 = phi i64 [ 0, %259 ], [ %266, %327 ]
  %264 = phi i1 [ false, %259 ], [ %339, %327 ]
  br label %343

265:                                              ; preds = %259
  %266 = and i64 %260, 4294967264
  %267 = add nsw i64 %266, -32
  %268 = lshr exact i64 %267, 5
  %269 = add nuw nsw i64 %268, 1
  %270 = and i64 %269, 1
  %271 = icmp eq i64 %267, 0
  br i1 %271, label %307, label %272

272:                                              ; preds = %265
  %273 = sub nuw nsw i64 %269, %270
  br label %274

274:                                              ; preds = %274, %272
  %275 = phi i64 [ 0, %272 ], [ %304, %274 ]
  %276 = phi <16 x i1> [ zeroinitializer, %272 ], [ %302, %274 ]
  %277 = phi <16 x i1> [ zeroinitializer, %272 ], [ %303, %274 ]
  %278 = phi i64 [ %273, %272 ], [ %305, %274 ]
  %279 = getelementptr inbounds i8, i8* %226, i64 %275
  %280 = bitcast i8* %279 to <16 x i8>*
  %281 = load <16 x i8>, <16 x i8>* %280, align 1
  %282 = getelementptr inbounds i8, i8* %279, i64 16
  %283 = bitcast i8* %282 to <16 x i8>*
  %284 = load <16 x i8>, <16 x i8>* %283, align 1
  %285 = add <16 x i8> %281, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %286 = add <16 x i8> %284, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %287 = icmp ult <16 x i8> %285, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %288 = icmp ult <16 x i8> %286, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %289 = or <16 x i1> %276, %287
  %290 = or <16 x i1> %277, %288
  %291 = or i64 %275, 32
  %292 = getelementptr inbounds i8, i8* %226, i64 %291
  %293 = bitcast i8* %292 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1
  %295 = getelementptr inbounds i8, i8* %292, i64 16
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1
  %298 = add <16 x i8> %294, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %299 = add <16 x i8> %297, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %300 = icmp ult <16 x i8> %298, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %301 = icmp ult <16 x i8> %299, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %302 = or <16 x i1> %289, %300
  %303 = or <16 x i1> %290, %301
  %304 = add i64 %275, 64
  %305 = add i64 %278, -2
  %306 = icmp eq i64 %305, 0
  br i1 %306, label %307, label %274, !llvm.loop !14

307:                                              ; preds = %274, %265
  %308 = phi <16 x i1> [ undef, %265 ], [ %302, %274 ]
  %309 = phi <16 x i1> [ undef, %265 ], [ %303, %274 ]
  %310 = phi i64 [ 0, %265 ], [ %304, %274 ]
  %311 = phi <16 x i1> [ zeroinitializer, %265 ], [ %302, %274 ]
  %312 = phi <16 x i1> [ zeroinitializer, %265 ], [ %303, %274 ]
  %313 = icmp eq i64 %270, 0
  br i1 %313, label %327, label %314

314:                                              ; preds = %307
  %315 = getelementptr inbounds i8, i8* %226, i64 %310
  %316 = getelementptr inbounds i8, i8* %315, i64 16
  %317 = bitcast i8* %316 to <16 x i8>*
  %318 = load <16 x i8>, <16 x i8>* %317, align 1
  %319 = add <16 x i8> %318, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %320 = icmp ult <16 x i8> %319, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %321 = or <16 x i1> %312, %320
  %322 = bitcast i8* %315 to <16 x i8>*
  %323 = load <16 x i8>, <16 x i8>* %322, align 1
  %324 = add <16 x i8> %323, <i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65, i8 -65>
  %325 = icmp ult <16 x i8> %324, <i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26, i8 26>
  %326 = or <16 x i1> %311, %325
  br label %327

327:                                              ; preds = %307, %314
  %328 = phi <16 x i1> [ %308, %307 ], [ %326, %314 ]
  %329 = phi <16 x i1> [ %309, %307 ], [ %321, %314 ]
  %330 = or <16 x i1> %329, %328
  %331 = shufflevector <16 x i1> %330, <16 x i1> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %332 = or <16 x i1> %330, %331
  %333 = shufflevector <16 x i1> %332, <16 x i1> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %334 = or <16 x i1> %332, %333
  %335 = shufflevector <16 x i1> %334, <16 x i1> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %336 = or <16 x i1> %334, %335
  %337 = shufflevector <16 x i1> %336, <16 x i1> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %338 = or <16 x i1> %336, %337
  %339 = extractelement <16 x i1> %338, i32 0
  %340 = icmp eq i64 %266, %260
  br i1 %340, label %341, label %262

341:                                              ; preds = %343, %327
  %342 = phi i1 [ %339, %327 ], [ %350, %343 ]
  br i1 %342, label %538, label %543

343:                                              ; preds = %262, %343
  %344 = phi i64 [ %351, %343 ], [ %263, %262 ]
  %345 = phi i1 [ %350, %343 ], [ %264, %262 ]
  %346 = getelementptr inbounds i8, i8* %226, i64 %344
  %347 = load i8, i8* %346, align 1
  %348 = add i8 %347, -65
  %349 = icmp ult i8 %348, 26
  %350 = or i1 %345, %349
  %351 = add nuw nsw i64 %344, 1
  %352 = icmp eq i64 %351, %260
  br i1 %352, label %341, label %343, !llvm.loop !16

353:                                              ; preds = %254
  br i1 %257, label %543, label %354

354:                                              ; preds = %353
  %355 = zext i32 %221 to i64
  %356 = icmp ult i32 %221, 16
  br i1 %356, label %431, label %357

357:                                              ; preds = %354
  %358 = and i64 %355, 4294967280
  %359 = add nsw i64 %358, -16
  %360 = lshr exact i64 %359, 4
  %361 = add nuw nsw i64 %360, 1
  %362 = and i64 %361, 1
  %363 = icmp eq i64 %359, 0
  br i1 %363, label %399, label %364

364:                                              ; preds = %357
  %365 = sub nuw nsw i64 %361, %362
  br label %366

366:                                              ; preds = %366, %364
  %367 = phi i64 [ 0, %364 ], [ %396, %366 ]
  %368 = phi <8 x i1> [ zeroinitializer, %364 ], [ %394, %366 ]
  %369 = phi <8 x i1> [ zeroinitializer, %364 ], [ %395, %366 ]
  %370 = phi i64 [ %365, %364 ], [ %397, %366 ]
  %371 = getelementptr inbounds i16, i16* %243, i64 %367
  %372 = bitcast i16* %371 to <8 x i16>*
  %373 = load <8 x i16>, <8 x i16>* %372, align 2
  %374 = getelementptr inbounds i16, i16* %371, i64 8
  %375 = bitcast i16* %374 to <8 x i16>*
  %376 = load <8 x i16>, <8 x i16>* %375, align 2
  %377 = add <8 x i16> %373, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %378 = add <8 x i16> %376, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %379 = icmp ult <8 x i16> %377, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %380 = icmp ult <8 x i16> %378, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %381 = or <8 x i1> %368, %379
  %382 = or <8 x i1> %369, %380
  %383 = or i64 %367, 16
  %384 = getelementptr inbounds i16, i16* %243, i64 %383
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2
  %387 = getelementptr inbounds i16, i16* %384, i64 8
  %388 = bitcast i16* %387 to <8 x i16>*
  %389 = load <8 x i16>, <8 x i16>* %388, align 2
  %390 = add <8 x i16> %386, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %391 = add <8 x i16> %389, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %392 = icmp ult <8 x i16> %390, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %393 = icmp ult <8 x i16> %391, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %394 = or <8 x i1> %381, %392
  %395 = or <8 x i1> %382, %393
  %396 = add i64 %367, 32
  %397 = add i64 %370, -2
  %398 = icmp eq i64 %397, 0
  br i1 %398, label %399, label %366, !llvm.loop !18

399:                                              ; preds = %366, %357
  %400 = phi <8 x i1> [ undef, %357 ], [ %394, %366 ]
  %401 = phi <8 x i1> [ undef, %357 ], [ %395, %366 ]
  %402 = phi i64 [ 0, %357 ], [ %396, %366 ]
  %403 = phi <8 x i1> [ zeroinitializer, %357 ], [ %394, %366 ]
  %404 = phi <8 x i1> [ zeroinitializer, %357 ], [ %395, %366 ]
  %405 = icmp eq i64 %362, 0
  br i1 %405, label %419, label %406

406:                                              ; preds = %399
  %407 = getelementptr inbounds i16, i16* %243, i64 %402
  %408 = getelementptr inbounds i16, i16* %407, i64 8
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2
  %411 = add <8 x i16> %410, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %412 = icmp ult <8 x i16> %411, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %413 = or <8 x i1> %404, %412
  %414 = bitcast i16* %407 to <8 x i16>*
  %415 = load <8 x i16>, <8 x i16>* %414, align 2
  %416 = add <8 x i16> %415, <i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65>
  %417 = icmp ult <8 x i16> %416, <i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26>
  %418 = or <8 x i1> %403, %417
  br label %419

419:                                              ; preds = %399, %406
  %420 = phi <8 x i1> [ %400, %399 ], [ %418, %406 ]
  %421 = phi <8 x i1> [ %401, %399 ], [ %413, %406 ]
  %422 = or <8 x i1> %421, %420
  %423 = shufflevector <8 x i1> %422, <8 x i1> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %424 = or <8 x i1> %422, %423
  %425 = shufflevector <8 x i1> %424, <8 x i1> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %426 = or <8 x i1> %424, %425
  %427 = shufflevector <8 x i1> %426, <8 x i1> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %428 = or <8 x i1> %426, %427
  %429 = extractelement <8 x i1> %428, i32 0
  %430 = icmp eq i64 %358, %355
  br i1 %430, label %536, label %431

431:                                              ; preds = %419, %354
  %432 = phi i64 [ 0, %354 ], [ %358, %419 ]
  %433 = phi i1 [ false, %354 ], [ %429, %419 ]
  br label %434

434:                                              ; preds = %431, %434
  %435 = phi i64 [ %442, %434 ], [ %432, %431 ]
  %436 = phi i1 [ %441, %434 ], [ %433, %431 ]
  %437 = getelementptr inbounds i16, i16* %243, i64 %435
  %438 = load i16, i16* %437, align 2
  %439 = add i16 %438, -65
  %440 = icmp ult i16 %439, 26
  %441 = or i1 %436, %440
  %442 = add nuw nsw i64 %435, 1
  %443 = icmp eq i64 %442, %355
  br i1 %443, label %536, label %434, !llvm.loop !19

444:                                              ; preds = %230, %224
  %445 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %217, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %446 = load atomic i32, i32* %445 monotonic, align 4
  %447 = and i32 %446, 1
  %448 = icmp eq i32 %447, 0
  br i1 %448, label %492, label %449

449:                                              ; preds = %444
  %450 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %451 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %450, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %452 = load atomic i32, i32* %451 monotonic, align 4
  %453 = and i32 %452, 1
  %454 = icmp eq i32 %453, 0
  %455 = icmp eq i32 %221, 0
  br i1 %454, label %472, label %456

456:                                              ; preds = %449
  br i1 %455, label %543, label %457

457:                                              ; preds = %456
  %458 = zext i32 %221 to i64
  br label %461

459:                                              ; preds = %461
  %460 = icmp eq i64 %471, %458
  br i1 %460, label %543, label %461

461:                                              ; preds = %459, %457
  %462 = phi i64 [ 0, %457 ], [ %471, %459 ]
  %463 = getelementptr inbounds i8, i8* %226, i64 %462
  %464 = load i8, i8* %463, align 1
  %465 = getelementptr inbounds i8, i8* %227, i64 %462
  %466 = load i8, i8* %465, align 1
  %467 = zext i8 %466 to i64
  %468 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %467
  %469 = load i8, i8* %468, align 1
  %470 = icmp eq i8 %464, %469
  %471 = add nuw nsw i64 %462, 1
  br i1 %470, label %459, label %538

472:                                              ; preds = %449
  br i1 %455, label %543, label %473

473:                                              ; preds = %472
  %474 = zext i32 %221 to i64
  br label %477

475:                                              ; preds = %477
  %476 = icmp eq i64 %491, %474
  br i1 %476, label %543, label %477

477:                                              ; preds = %475, %473
  %478 = phi i64 [ 0, %473 ], [ %491, %475 ]
  %479 = getelementptr inbounds i8, i8* %226, i64 %478
  %480 = load i8, i8* %479, align 1
  %481 = zext i8 %480 to i32
  %482 = getelementptr inbounds i16, i16* %229, i64 %478
  %483 = load i16, i16* %482, align 2
  %484 = add i16 %483, -65
  %485 = icmp ult i16 %484, 26
  %486 = zext i1 %485 to i16
  %487 = shl nuw nsw i16 %486, 5
  %488 = or i16 %487, %483
  %489 = zext i16 %488 to i32
  %490 = icmp eq i32 %481, %489
  %491 = add nuw nsw i64 %478, 1
  br i1 %490, label %475, label %538

492:                                              ; preds = %444
  %493 = bitcast %"class.WTF::StringImpl"* %225 to i16*
  %494 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %495 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %494, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %496 = load atomic i32, i32* %495 monotonic, align 4
  %497 = and i32 %496, 1
  %498 = icmp eq i32 %497, 0
  %499 = icmp eq i32 %221, 0
  br i1 %498, label %518, label %500

500:                                              ; preds = %492
  br i1 %499, label %543, label %501

501:                                              ; preds = %500
  %502 = zext i32 %221 to i64
  br label %505

503:                                              ; preds = %505
  %504 = icmp eq i64 %517, %502
  br i1 %504, label %543, label %505

505:                                              ; preds = %503, %501
  %506 = phi i64 [ 0, %501 ], [ %517, %503 ]
  %507 = getelementptr inbounds i16, i16* %493, i64 %506
  %508 = load i16, i16* %507, align 2
  %509 = zext i16 %508 to i32
  %510 = getelementptr inbounds i8, i8* %227, i64 %506
  %511 = load i8, i8* %510, align 1
  %512 = zext i8 %511 to i64
  %513 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %512
  %514 = load i8, i8* %513, align 1
  %515 = zext i8 %514 to i32
  %516 = icmp eq i32 %509, %515
  %517 = add nuw nsw i64 %506, 1
  br i1 %516, label %503, label %538

518:                                              ; preds = %492
  br i1 %499, label %543, label %519

519:                                              ; preds = %518
  %520 = zext i32 %221 to i64
  br label %523

521:                                              ; preds = %523
  %522 = icmp eq i64 %535, %520
  br i1 %522, label %543, label %523

523:                                              ; preds = %521, %519
  %524 = phi i64 [ 0, %519 ], [ %535, %521 ]
  %525 = getelementptr inbounds i16, i16* %493, i64 %524
  %526 = load i16, i16* %525, align 2
  %527 = getelementptr inbounds i16, i16* %229, i64 %524
  %528 = load i16, i16* %527, align 2
  %529 = add i16 %528, -65
  %530 = icmp ult i16 %529, 26
  %531 = zext i1 %530 to i16
  %532 = shl nuw nsw i16 %531, 5
  %533 = or i16 %532, %528
  %534 = icmp eq i16 %526, %533
  %535 = add nuw nsw i64 %524, 1
  br i1 %534, label %521, label %538

536:                                              ; preds = %434, %419
  %537 = phi i1 [ %429, %419 ], [ %441, %434 ]
  br i1 %537, label %538, label %543

538:                                              ; preds = %461, %477, %505, %523, %536, %341, %250, %219, %213
  %539 = icmp eq i64 %214, 0
  %540 = select i1 %539, i64 %212, i64 %214
  %541 = add i64 %540, %215
  %542 = and i64 %541, %11
  br label %213

543:                                              ; preds = %250, %258, %341, %353, %456, %472, %500, %518, %536, %459, %475, %503, %521
  %544 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, i64 %215
  %545 = icmp eq %"class.WTF::StringImpl"** %544, null
  br i1 %545, label %546, label %552

546:                                              ; preds = %213, %543, %2
  %547 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %4, align 8
  %548 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %549 = load i32, i32* %548, align 8
  %550 = zext i32 %549 to i64
  %551 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %547, i64 %550
  br label %552

552:                                              ; preds = %543, %546
  %553 = phi %"class.WTF::StringImpl"** [ %551, %546 ], [ %544, %543 ]
  %554 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %4, align 8
  %555 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %556 = load i32, i32* %555, align 8
  %557 = zext i32 %556 to i64
  %558 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %554, i64 %557
  %559 = icmp eq %"class.WTF::StringImpl"** %553, %558
  br i1 %559, label %575, label %560

560:                                              ; preds = %552
  %561 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %553, align 8
  %562 = ptrtoint %"class.WTF::StringImpl"* %561 to i64
  %563 = icmp eq %"class.WTF::StringImpl"* %561, null
  br i1 %563, label %575, label %564

564:                                              ; preds = %560
  %565 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %561, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %566 = load atomic i32, i32* %565 acquire, align 4
  %567 = and i32 %566, 4
  %568 = icmp ne i32 %567, 0
  %569 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %570 = icmp eq %"class.WTF::StringImpl"* %569, %561
  %571 = or i1 %568, %570
  br i1 %571, label %575, label %572

572:                                              ; preds = %564
  %573 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %573) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.3, i64 0, i64 0)) #9
  %574 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %573) #9
  br label %575

575:                                              ; preds = %572, %564, %560, %552
  %576 = phi i64 [ 0, %552 ], [ %562, %560 ], [ %562, %564 ], [ %562, %572 ]
  ret i64 %576
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF17AtomicStringTable8WeakFindEPKhj(%"class.WTF::AtomicStringTable"* nocapture readonly, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = icmp eq i8* %1, null
  br i1 %6, label %187, label %7

7:                                                ; preds = %3
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %11 = ptrtoint %"class.WTF::StringImpl"* %10 to i64
  %12 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %12, label %187, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 acquire, align 4
  %16 = and i32 %15, 4
  %17 = icmp ne i32 %16, 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, %10
  %20 = or i1 %17, %19
  br i1 %20, label %187, label %21

21:                                               ; preds = %13
  %22 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.3, i64 0, i64 0)) #9
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #9
  br label %187

24:                                               ; preds = %7
  %25 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"** %26, null
  br i1 %27, label %160, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = add i32 %30, -1
  %32 = zext i32 %31 to i64
  %33 = and i32 %2, 1
  %34 = icmp eq i32 %33, 0
  %35 = lshr i32 %2, 1
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %99, label %37

37:                                               ; preds = %28
  %38 = and i32 %35, 1
  %39 = icmp eq i32 %35, 1
  br i1 %39, label %74, label %40

40:                                               ; preds = %37
  %41 = sub nsw i32 %35, %38
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i32 [ -1640531527, %40 ], [ %70, %42 ]
  %44 = phi i8* [ %1, %40 ], [ %71, %42 ]
  %45 = phi i32 [ %41, %40 ], [ %72, %42 ]
  %46 = load i8, i8* %44, align 1
  %47 = getelementptr inbounds i8, i8* %44, i64 1
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %46 to i32
  %50 = add i32 %43, %49
  %51 = shl i32 %50, 16
  %52 = zext i8 %48 to i32
  %53 = shl nuw nsw i32 %52, 11
  %54 = xor i32 %53, %50
  %55 = xor i32 %54, %51
  %56 = lshr i32 %55, 11
  %57 = add i32 %56, %55
  %58 = getelementptr inbounds i8, i8* %44, i64 2
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %44, i64 3
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %59 to i32
  %63 = add i32 %57, %62
  %64 = shl i32 %63, 16
  %65 = zext i8 %61 to i32
  %66 = shl nuw nsw i32 %65, 11
  %67 = xor i32 %66, %63
  %68 = xor i32 %67, %64
  %69 = lshr i32 %68, 11
  %70 = add i32 %69, %68
  %71 = getelementptr inbounds i8, i8* %44, i64 4
  %72 = add i32 %45, -2
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %42

74:                                               ; preds = %42, %37
  %75 = phi i32 [ undef, %37 ], [ %70, %42 ]
  %76 = phi i32 [ -1640531527, %37 ], [ %70, %42 ]
  %77 = phi i8* [ %1, %37 ], [ %71, %42 ]
  %78 = icmp eq i32 %38, 0
  br i1 %78, label %92, label %79

79:                                               ; preds = %74
  %80 = load i8, i8* %77, align 1
  %81 = getelementptr inbounds i8, i8* %77, i64 1
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %80 to i32
  %84 = add i32 %76, %83
  %85 = shl i32 %84, 16
  %86 = zext i8 %82 to i32
  %87 = shl nuw nsw i32 %86, 11
  %88 = xor i32 %87, %84
  %89 = xor i32 %88, %85
  %90 = lshr i32 %89, 11
  %91 = add i32 %90, %89
  br label %92

92:                                               ; preds = %74, %79
  %93 = phi i32 [ %75, %74 ], [ %91, %79 ]
  %94 = add nsw i32 %35, -1
  %95 = zext i32 %94 to i64
  %96 = shl nuw nsw i64 %95, 1
  %97 = add nuw nsw i64 %96, 2
  %98 = getelementptr i8, i8* %1, i64 %97
  br label %99

99:                                               ; preds = %92, %28
  %100 = phi i32 [ -1640531527, %28 ], [ %93, %92 ]
  %101 = phi i8* [ %1, %28 ], [ %98, %92 ]
  br i1 %34, label %110, label %102

102:                                              ; preds = %99
  %103 = load i8, i8* %101, align 1
  %104 = zext i8 %103 to i32
  %105 = add i32 %100, %104
  %106 = shl i32 %105, 11
  %107 = xor i32 %106, %105
  %108 = lshr i32 %107, 17
  %109 = add i32 %108, %107
  br label %110

110:                                              ; preds = %102, %99
  %111 = phi i32 [ %109, %102 ], [ %100, %99 ]
  %112 = shl i32 %111, 3
  %113 = xor i32 %112, %111
  %114 = lshr i32 %113, 5
  %115 = add i32 %114, %113
  %116 = shl i32 %115, 2
  %117 = xor i32 %116, %115
  %118 = lshr i32 %117, 15
  %119 = add i32 %118, %117
  %120 = shl i32 %119, 10
  %121 = xor i32 %120, %119
  %122 = and i32 %121, 16777215
  %123 = icmp eq i32 %122, 0
  %124 = select i1 %123, i32 8388608, i32 %122
  %125 = and i32 %124, %31
  %126 = zext i32 %125 to i64
  %127 = xor i32 %124, -1
  %128 = lshr i32 %124, 23
  %129 = add nsw i32 %128, %127
  %130 = shl i32 %129, 12
  %131 = xor i32 %130, %129
  %132 = lshr i32 %131, 7
  %133 = xor i32 %132, %131
  %134 = shl i32 %133, 2
  %135 = xor i32 %134, %133
  %136 = lshr i32 %135, 20
  %137 = xor i32 %136, %135
  %138 = or i32 %137, 1
  %139 = zext i32 %138 to i64
  br label %140

140:                                              ; preds = %148, %110
  %141 = phi i64 [ 0, %110 ], [ %150, %148 ]
  %142 = phi i64 [ %126, %110 ], [ %152, %148 ]
  %143 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, i64 %142
  %144 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %143, align 8
  %145 = ptrtoint %"class.WTF::StringImpl"* %144 to i64
  switch i64 %145, label %146 [
    i64 0, label %160
    i64 -1, label %148
  ]

146:                                              ; preds = %140
  %147 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKhj(%"class.WTF::StringImpl"* %144, i8* nonnull %1, i32 %2) #9
  br i1 %147, label %153, label %148

148:                                              ; preds = %146, %140
  %149 = icmp eq i64 %141, 0
  %150 = select i1 %149, i64 %139, i64 %141
  %151 = add i64 %150, %142
  %152 = and i64 %151, %32
  br label %140

153:                                              ; preds = %146
  %154 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, i64 %142
  %155 = icmp eq %"class.WTF::StringImpl"** %154, null
  br i1 %155, label %160, label %156

156:                                              ; preds = %153
  %157 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %25, align 8
  %158 = load i32, i32* %29, align 8
  %159 = zext i32 %158 to i64
  br label %166

160:                                              ; preds = %140, %153, %24
  %161 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %25, align 8
  %162 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %163 = load i32, i32* %162, align 8
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %161, i64 %164
  br label %166

166:                                              ; preds = %156, %160
  %167 = phi i64 [ %159, %156 ], [ %164, %160 ]
  %168 = phi %"class.WTF::StringImpl"** [ %157, %156 ], [ %161, %160 ]
  %169 = phi %"class.WTF::StringImpl"** [ %154, %156 ], [ %165, %160 ]
  %170 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, i64 %167
  %171 = icmp eq %"class.WTF::StringImpl"** %169, %170
  br i1 %171, label %187, label %172

172:                                              ; preds = %166
  %173 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %169, align 8
  %174 = ptrtoint %"class.WTF::StringImpl"* %173 to i64
  %175 = icmp eq %"class.WTF::StringImpl"* %173, null
  br i1 %175, label %187, label %176

176:                                              ; preds = %172
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %173, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %178 = load atomic i32, i32* %177 acquire, align 4
  %179 = and i32 %178, 4
  %180 = icmp ne i32 %179, 0
  %181 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %182 = icmp eq %"class.WTF::StringImpl"* %181, %173
  %183 = or i1 %180, %182
  br i1 %183, label %187, label %184

184:                                              ; preds = %176
  %185 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.3, i64 0, i64 0)) #9
  %186 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #9
  br label %187

187:                                              ; preds = %166, %172, %176, %184, %21, %13, %9, %3
  %188 = phi i64 [ 0, %3 ], [ %11, %9 ], [ %11, %13 ], [ %11, %21 ], [ 0, %166 ], [ %174, %172 ], [ %174, %176 ], [ %174, %184 ]
  ret i64 %188
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF17AtomicStringTable8WeakFindEPKDsj(%"class.WTF::AtomicStringTable"* nocapture readonly, i16*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = icmp eq i16* %1, null
  br i1 %6, label %187, label %7

7:                                                ; preds = %3
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %11 = ptrtoint %"class.WTF::StringImpl"* %10 to i64
  %12 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %12, label %187, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 acquire, align 4
  %16 = and i32 %15, 4
  %17 = icmp ne i32 %16, 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, %10
  %20 = or i1 %17, %19
  br i1 %20, label %187, label %21

21:                                               ; preds = %13
  %22 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.3, i64 0, i64 0)) #9
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #9
  br label %187

24:                                               ; preds = %7
  %25 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"** %26, null
  br i1 %27, label %160, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = add i32 %30, -1
  %32 = zext i32 %31 to i64
  %33 = and i32 %2, 1
  %34 = icmp eq i32 %33, 0
  %35 = lshr i32 %2, 1
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %99, label %37

37:                                               ; preds = %28
  %38 = and i32 %35, 1
  %39 = icmp eq i32 %35, 1
  br i1 %39, label %74, label %40

40:                                               ; preds = %37
  %41 = sub nsw i32 %35, %38
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i32 [ -1640531527, %40 ], [ %70, %42 ]
  %44 = phi i16* [ %1, %40 ], [ %71, %42 ]
  %45 = phi i32 [ %41, %40 ], [ %72, %42 ]
  %46 = load i16, i16* %44, align 2
  %47 = getelementptr inbounds i16, i16* %44, i64 1
  %48 = load i16, i16* %47, align 2
  %49 = zext i16 %46 to i32
  %50 = add i32 %43, %49
  %51 = shl i32 %50, 16
  %52 = zext i16 %48 to i32
  %53 = shl nuw nsw i32 %52, 11
  %54 = xor i32 %53, %50
  %55 = xor i32 %54, %51
  %56 = lshr i32 %55, 11
  %57 = add i32 %56, %55
  %58 = getelementptr inbounds i16, i16* %44, i64 2
  %59 = load i16, i16* %58, align 2
  %60 = getelementptr inbounds i16, i16* %44, i64 3
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %59 to i32
  %63 = add i32 %57, %62
  %64 = shl i32 %63, 16
  %65 = zext i16 %61 to i32
  %66 = shl nuw nsw i32 %65, 11
  %67 = xor i32 %66, %63
  %68 = xor i32 %67, %64
  %69 = lshr i32 %68, 11
  %70 = add i32 %69, %68
  %71 = getelementptr inbounds i16, i16* %44, i64 4
  %72 = add i32 %45, -2
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %42

74:                                               ; preds = %42, %37
  %75 = phi i32 [ undef, %37 ], [ %70, %42 ]
  %76 = phi i32 [ -1640531527, %37 ], [ %70, %42 ]
  %77 = phi i16* [ %1, %37 ], [ %71, %42 ]
  %78 = icmp eq i32 %38, 0
  br i1 %78, label %92, label %79

79:                                               ; preds = %74
  %80 = load i16, i16* %77, align 2
  %81 = getelementptr inbounds i16, i16* %77, i64 1
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %80 to i32
  %84 = add i32 %76, %83
  %85 = shl i32 %84, 16
  %86 = zext i16 %82 to i32
  %87 = shl nuw nsw i32 %86, 11
  %88 = xor i32 %87, %84
  %89 = xor i32 %88, %85
  %90 = lshr i32 %89, 11
  %91 = add i32 %90, %89
  br label %92

92:                                               ; preds = %74, %79
  %93 = phi i32 [ %75, %74 ], [ %91, %79 ]
  %94 = add nsw i32 %35, -1
  %95 = zext i32 %94 to i64
  %96 = shl nuw nsw i64 %95, 1
  %97 = add nuw nsw i64 %96, 2
  %98 = getelementptr i16, i16* %1, i64 %97
  br label %99

99:                                               ; preds = %92, %28
  %100 = phi i32 [ -1640531527, %28 ], [ %93, %92 ]
  %101 = phi i16* [ %1, %28 ], [ %98, %92 ]
  br i1 %34, label %110, label %102

102:                                              ; preds = %99
  %103 = load i16, i16* %101, align 2
  %104 = zext i16 %103 to i32
  %105 = add i32 %100, %104
  %106 = shl i32 %105, 11
  %107 = xor i32 %106, %105
  %108 = lshr i32 %107, 17
  %109 = add i32 %108, %107
  br label %110

110:                                              ; preds = %102, %99
  %111 = phi i32 [ %109, %102 ], [ %100, %99 ]
  %112 = shl i32 %111, 3
  %113 = xor i32 %112, %111
  %114 = lshr i32 %113, 5
  %115 = add i32 %114, %113
  %116 = shl i32 %115, 2
  %117 = xor i32 %116, %115
  %118 = lshr i32 %117, 15
  %119 = add i32 %118, %117
  %120 = shl i32 %119, 10
  %121 = xor i32 %120, %119
  %122 = and i32 %121, 16777215
  %123 = icmp eq i32 %122, 0
  %124 = select i1 %123, i32 8388608, i32 %122
  %125 = and i32 %124, %31
  %126 = zext i32 %125 to i64
  %127 = xor i32 %124, -1
  %128 = lshr i32 %124, 23
  %129 = add nsw i32 %128, %127
  %130 = shl i32 %129, 12
  %131 = xor i32 %130, %129
  %132 = lshr i32 %131, 7
  %133 = xor i32 %132, %131
  %134 = shl i32 %133, 2
  %135 = xor i32 %134, %133
  %136 = lshr i32 %135, 20
  %137 = xor i32 %136, %135
  %138 = or i32 %137, 1
  %139 = zext i32 %138 to i64
  br label %140

140:                                              ; preds = %148, %110
  %141 = phi i64 [ 0, %110 ], [ %150, %148 ]
  %142 = phi i64 [ %126, %110 ], [ %152, %148 ]
  %143 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, i64 %142
  %144 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %143, align 8
  %145 = ptrtoint %"class.WTF::StringImpl"* %144 to i64
  switch i64 %145, label %146 [
    i64 0, label %160
    i64 -1, label %148
  ]

146:                                              ; preds = %140
  %147 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKDsj(%"class.WTF::StringImpl"* %144, i16* nonnull %1, i32 %2) #9
  br i1 %147, label %153, label %148

148:                                              ; preds = %146, %140
  %149 = icmp eq i64 %141, 0
  %150 = select i1 %149, i64 %139, i64 %141
  %151 = add i64 %150, %142
  %152 = and i64 %151, %32
  br label %140

153:                                              ; preds = %146
  %154 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, i64 %142
  %155 = icmp eq %"class.WTF::StringImpl"** %154, null
  br i1 %155, label %160, label %156

156:                                              ; preds = %153
  %157 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %25, align 8
  %158 = load i32, i32* %29, align 8
  %159 = zext i32 %158 to i64
  br label %166

160:                                              ; preds = %140, %153, %24
  %161 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %25, align 8
  %162 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %163 = load i32, i32* %162, align 8
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %161, i64 %164
  br label %166

166:                                              ; preds = %156, %160
  %167 = phi i64 [ %159, %156 ], [ %164, %160 ]
  %168 = phi %"class.WTF::StringImpl"** [ %157, %156 ], [ %161, %160 ]
  %169 = phi %"class.WTF::StringImpl"** [ %154, %156 ], [ %165, %160 ]
  %170 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, i64 %167
  %171 = icmp eq %"class.WTF::StringImpl"** %169, %170
  br i1 %171, label %187, label %172

172:                                              ; preds = %166
  %173 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %169, align 8
  %174 = ptrtoint %"class.WTF::StringImpl"* %173 to i64
  %175 = icmp eq %"class.WTF::StringImpl"* %173, null
  br i1 %175, label %187, label %176

176:                                              ; preds = %172
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %173, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %178 = load atomic i32, i32* %177 acquire, align 4
  %179 = and i32 %178, 4
  %180 = icmp ne i32 %179, 0
  %181 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %182 = icmp eq %"class.WTF::StringImpl"* %181, %173
  %183 = or i1 %180, %182
  br i1 %183, label %187, label %184

184:                                              ; preds = %176
  %185 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.3, i64 0, i64 0)) #9
  %186 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #9
  br label %187

187:                                              ; preds = %166, %172, %176, %184, %21, %13, %9, %3
  %188 = phi i64 [ 0, %3 ], [ %11, %9 ], [ %11, %13 ], [ %11, %21 ], [ 0, %166 ], [ %174, %172 ], [ %174, %176 ], [ %174, %184 ]
  ret i64 %188
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF17AtomicStringTable6RemoveEPNS_10StringImplE(%"class.WTF::AtomicStringTable"*, %"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringImpl"*, align 8
  %5 = alloca %"struct.WTF::HashTableConstIteratorAdapter.4", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"struct.WTF::HashTableConstIteratorAdapter.4", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  store %"class.WTF::StringImpl"* %1, %"class.WTF::StringImpl"** %4, align 8
  %9 = bitcast %"struct.WTF::HashTableConstIteratorAdapter.4"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"struct.WTF::HashTableConstIteratorAdapter.4", %"struct.WTF::HashTableConstIteratorAdapter.4"* %5, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"struct.WTF::HashTableConstIteratorAdapter.4", %"struct.WTF::HashTableConstIteratorAdapter.4"* %5, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0
  %13 = call { %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"** } @_ZNK3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE4findERKS2_(%"class.WTF::HashTable"* %12, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %4) #9
  %14 = extractvalue { %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"** } %13, 0
  store %"class.WTF::StringImpl"** %14, %"class.WTF::StringImpl"*** %10, align 8
  %15 = extractvalue { %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"** } %13, 1
  store %"class.WTF::StringImpl"** %15, %"class.WTF::StringImpl"*** %11, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"struct.WTF::HashTableConstIteratorAdapter.4"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #9
  %19 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %19, align 8
  %21 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, i64 %23
  %25 = getelementptr inbounds %"struct.WTF::HashTableConstIteratorAdapter.4", %"struct.WTF::HashTableConstIteratorAdapter.4"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"** %24, %"class.WTF::StringImpl"*** %25, align 8
  %26 = getelementptr inbounds %"struct.WTF::HashTableConstIteratorAdapter.4", %"struct.WTF::HashTableConstIteratorAdapter.4"* %7, i64 0, i32 0, i32 1
  store %"class.WTF::StringImpl"** %24, %"class.WTF::StringImpl"*** %26, align 8
  %27 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27)
  %28 = icmp eq %"class.WTF::StringImpl"** %14, %24
  br i1 %28, label %30, label %29

29:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* null, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #9
  br label %39

30:                                               ; preds = %2
  %31 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %9, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIN3WTF29HashTableConstIteratorAdapterINS1_9HashTableIPNS1_10StringImplES5_NS1_17IdentityExtractorENS1_10StringHashENS1_10HashTraitsIS5_EES9_NS1_18PartitionAllocatorEEES9_EEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINSD_14remove_pointerISF_E4typeEEE5valueEPcE4typeESH_ENUlRNSD_13basic_ostreamIcNSD_11char_traitsIcEEEEPKvE_8__invokeESS_SU_) #9
  %32 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %18, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIN3WTF29HashTableConstIteratorAdapterINS1_9HashTableIPNS1_10StringImplES5_NS1_17IdentityExtractorENS1_10StringHashENS1_10HashTraitsIS5_EES9_NS1_18PartitionAllocatorEEES9_EEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINSD_14remove_pointerISF_E4typeEEE5valueEPcE4typeESH_ENUlRNSD_13basic_ostreamIcNSD_11char_traitsIcEEEEPKvE_8__invokeESS_SU_) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8* %31, i8* %32) #9
  %33 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* %34, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #9
  %35 = icmp eq i8* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.1, i64 0, i64 0), i32 372, %"class.logging::CheckOpResult"* nonnull %6) #9
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #9
  br label %39

39:                                               ; preds = %29, %30, %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  %40 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %10, align 8
  %41 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %19, align 8
  %42 = load i32, i32* %21, align 8
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, i64 %43
  %45 = icmp eq %"class.WTF::StringImpl"** %44, %40
  br i1 %45, label %68, label %46

46:                                               ; preds = %39
  store %"class.WTF::StringImpl"* inttoptr (i64 -1 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %40, align 8
  %47 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 3
  %48 = load i32, i32* %47, align 8
  %49 = add i32 %48, 1
  %50 = and i32 %49, 2147483647
  %51 = and i32 %48, -2147483648
  %52 = or i32 %50, %51
  store i32 %52, i32* %47, align 8
  %53 = getelementptr inbounds %"class.WTF::AtomicStringTable", %"class.WTF::AtomicStringTable"* %0, i64 0, i32 0, i32 0, i32 2
  %54 = load i32, i32* %53, align 4
  %55 = add i32 %54, -1
  store i32 %55, i32* %53, align 4
  %56 = mul i32 %55, 6
  %57 = load i32, i32* %21, align 8
  %58 = icmp ult i32 %56, %57
  %59 = icmp ugt i32 %57, 8
  %60 = and i1 %58, %59
  br i1 %60, label %61, label %68

61:                                               ; preds = %46
  %62 = lshr i32 %57, 1
  %63 = zext i32 %62 to i64
  %64 = shl nuw nsw i64 %63, 3
  %65 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %64, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPNS_10StringImplEEEPKcv, i64 0, i64 0)) #9
  call void @llvm.memset.p0i8.i64(i8* align 1 %65, i8 0, i64 %64, i1 false) #9
  %66 = bitcast i8* %65 to %"class.WTF::StringImpl"**
  %67 = call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE8RehashToEPS2_jS9_(%"class.WTF::HashTable"* %12, %"class.WTF::StringImpl"** %66, i32 %62, %"class.WTF::StringImpl"** null) #9
  br label %68

68:                                               ; preds = %39, %46, %61
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #9
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8*, void (%"class.std::__1::basic_ostream"*, i8*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN7logging15CheckOpValueStrIN3WTF29HashTableConstIteratorAdapterINS1_9HashTableIPNS1_10StringImplES5_NS1_17IdentityExtractorENS1_10StringHashENS1_10HashTraitsIS5_EES9_NS1_18PartitionAllocatorEEES9_EEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINSD_14remove_pointerISF_E4typeEEE5valueEPcE4typeESH_ENUlRNSD_13basic_ostreamIcNSD_11char_traitsIcEEEEPKvE_8__invokeESS_SU_(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*) #4 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.WTF::StringImpl"***
  %4 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %3, align 8
  %5 = getelementptr inbounds i8, i8* %1, i64 8
  %6 = bitcast i8* %5 to %"class.WTF::StringImpl"***
  %7 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"** %4, %7
  br i1 %8, label %9, label %11

9:                                                ; preds = %2
  %10 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0), i64 27) #9
  br label %16

11:                                               ; preds = %2
  %12 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i64 0, i64 0), i64 21) #9
  %13 = bitcast i8* %1 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPKv(%"class.std::__1::basic_ostream"* %12, i8* %14) #9
  br label %16

16:                                               ; preds = %9, %11
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPKv(%"class.std::__1::basic_ostream"*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #9
  %7 = load i8, i8* %6, align 8, !range !20
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #9
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #9
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #9
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #9
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #9
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #9
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #9
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #9
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #9
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #10
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #9
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #9
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #10
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #9
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #9
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #3

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %2, %5
  %6 = phi i32 [ %9, %5 ], [ %1, %2 ]
  %7 = phi i32 [ %8, %5 ], [ %1, %2 ]
  %8 = or i32 %7, %6
  %9 = lshr i32 %6, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %5

11:                                               ; preds = %5
  %12 = shl i32 %8, 1
  %13 = add i32 %12, 2
  %14 = icmp ugt i32 %13, 8
  %15 = select i1 %14, i32 %13, i32 8
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi i32 [ 8, %2 ], [ %15, %11 ]
  %18 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %32

21:                                               ; preds = %16
  %22 = icmp slt i32 %17, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.7, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0)) #9
  %25 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #9
  br label %26

26:                                               ; preds = %21, %23
  %27 = zext i32 %17 to i64
  %28 = shl nuw nsw i64 %27, 3
  %29 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPNS_10StringImplEEEPKcv, i64 0, i64 0)) #9
  call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 0, i64 %28, i1 false) #9
  %30 = bitcast i8* %29 to %"class.WTF::StringImpl"**
  %31 = call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE8RehashToEPS2_jS9_(%"class.WTF::HashTable"* %0, %"class.WTF::StringImpl"** %30, i32 %17, %"class.WTF::StringImpl"** null) #9
  br label %32

32:                                               ; preds = %26, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE8RehashToEPS2_jS9_(%"class.WTF::HashTable"*, %"class.WTF::StringImpl"**, i32, %"class.WTF::StringImpl"**) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"class.WTF::StringImpl"** %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %9, align 8
  %17 = ptrtoint %"class.WTF::StringImpl"** %16 to i64
  br label %31

18:                                               ; preds = %95
  %19 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %96, %18 ]
  %23 = phi %"class.WTF::StringImpl"** [ null, %10 ], [ %99, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %26) #9
  br label %27

27:                                               ; preds = %20, %25
  %28 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, -2147483648
  store i32 %30, i32* %28, align 8
  ret %"class.WTF::StringImpl"** %23

31:                                               ; preds = %13, %95
  %32 = phi i64 [ %17, %13 ], [ %96, %95 ]
  %33 = phi i32 [ %7, %13 ], [ %97, %95 ]
  %34 = phi %"class.WTF::StringImpl"** [ %16, %13 ], [ %98, %95 ]
  %35 = phi %"class.WTF::StringImpl"** [ null, %13 ], [ %99, %95 ]
  %36 = phi i32 [ 0, %13 ], [ %100, %95 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, i64 %37
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %40 = ptrtoint %"class.WTF::StringImpl"* %39 to i64
  switch i64 %40, label %41 [
    i64 -1, label %95
    i64 0, label %95
  ]

41:                                               ; preds = %31
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = lshr i32 %43, 8
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %41
  %47 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* nonnull %39) #9
  br label %48

48:                                               ; preds = %46, %41
  %49 = phi i32 [ %47, %46 ], [ %44, %41 ]
  %50 = and i32 %49, %14
  %51 = zext i32 %50 to i64
  %52 = xor i32 %49, -1
  %53 = lshr i32 %49, 23
  %54 = add i32 %53, %52
  %55 = shl i32 %54, 12
  %56 = xor i32 %55, %54
  %57 = lshr i32 %56, 7
  %58 = xor i32 %57, %56
  %59 = shl i32 %58, 2
  %60 = xor i32 %59, %58
  %61 = lshr i32 %60, 20
  %62 = xor i32 %61, %60
  %63 = or i32 %62, 1
  %64 = zext i32 %63 to i64
  br label %65

65:                                               ; preds = %78, %48
  %66 = phi %"class.WTF::StringImpl"** [ null, %48 ], [ %79, %78 ]
  %67 = phi i64 [ 0, %48 ], [ %81, %78 ]
  %68 = phi i64 [ %51, %48 ], [ %83, %78 ]
  %69 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, i64 %68
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = ptrtoint %"class.WTF::StringImpl"* %70 to i64
  switch i64 %71, label %75 [
    i64 0, label %72
    i64 -1, label %78
  ]

72:                                               ; preds = %65
  %73 = icmp eq %"class.WTF::StringImpl"** %66, null
  %74 = select i1 %73, %"class.WTF::StringImpl"** %69, %"class.WTF::StringImpl"** %66
  br label %84

75:                                               ; preds = %65
  %76 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %77 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %70, %"class.WTF::StringImpl"* %76) #9
  br i1 %77, label %84, label %78

78:                                               ; preds = %75, %65
  %79 = phi %"class.WTF::StringImpl"** [ %66, %75 ], [ %69, %65 ]
  %80 = icmp eq i64 %67, 0
  %81 = select i1 %80, i64 %64, i64 %67
  %82 = add i64 %81, %68
  %83 = and i64 %82, %15
  br label %65

84:                                               ; preds = %75, %72
  %85 = phi %"class.WTF::StringImpl"** [ %74, %72 ], [ %69, %75 ]
  %86 = bitcast %"class.WTF::StringImpl"** %38 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %"class.WTF::StringImpl"** %85 to i64*
  store i64 %87, i64* %88, align 8
  %89 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %9, align 8
  %90 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, i64 %37
  %91 = icmp eq %"class.WTF::StringImpl"** %90, %3
  %92 = select i1 %91, %"class.WTF::StringImpl"** %85, %"class.WTF::StringImpl"** %35
  %93 = load i32, i32* %6, align 8
  %94 = ptrtoint %"class.WTF::StringImpl"** %89 to i64
  br label %95

95:                                               ; preds = %31, %31, %84
  %96 = phi i64 [ %32, %31 ], [ %94, %84 ], [ %32, %31 ]
  %97 = phi i32 [ %33, %31 ], [ %93, %84 ], [ %33, %31 ]
  %98 = phi %"class.WTF::StringImpl"** [ %34, %31 ], [ %89, %84 ], [ %34, %31 ]
  %99 = phi %"class.WTF::StringImpl"** [ %35, %31 ], [ %92, %84 ], [ %35, %31 ]
  %100 = add i32 %36, 1
  %101 = icmp eq i32 %100, %97
  br i1 %101, label %18, label %31
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

declare i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable"*, %"class.WTF::StringImpl"**) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #9
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* %22, i8* %23) #9
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.7, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #9
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #9
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPNS_10StringImplEEEPKcv, i64 0, i64 0)) #9
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #9
  %36 = bitcast i8* %35 to %"class.WTF::StringImpl"**
  %37 = call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE8RehashToEPS2_jS9_(%"class.WTF::HashTable"* %0, %"class.WTF::StringImpl"** %36, i32 %32, %"class.WTF::StringImpl"** %1) #9
  ret %"class.WTF::StringImpl"** %37
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKDsj(%"class.WTF::StringImpl"*, i16*, i32) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16*, i32) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKhj(%"class.WTF::StringImpl"*, i8*, i32) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::StringImpl"**, i8 } @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS4_S6_S7_EERKS2_RS2_EENS_18HashTableAddResultIS8_S2_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.WTF::StringImpl"** dereferenceable(8), %"class.WTF::StringImpl"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"** %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable"* %0, %"class.WTF::StringImpl"** null)
  %9 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.WTF::StringImpl"** [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, align 8
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = lshr i32 %18, 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %10
  %22 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %16) #9
  br label %23

23:                                               ; preds = %10, %21
  %24 = phi i32 [ %22, %21 ], [ %19, %10 ]
  %25 = and i32 %24, %14
  %26 = zext i32 %25 to i64
  %27 = xor i32 %24, -1
  %28 = lshr i32 %24, 23
  %29 = add i32 %28, %27
  %30 = shl i32 %29, 12
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 7
  %33 = xor i32 %32, %31
  %34 = shl i32 %33, 2
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 20
  %37 = xor i32 %36, %35
  %38 = or i32 %37, 1
  %39 = zext i32 %38 to i64
  br label %40

40:                                               ; preds = %50, %23
  %41 = phi i64 [ 0, %23 ], [ %53, %50 ]
  %42 = phi i64 [ %26, %23 ], [ %55, %50 ]
  %43 = phi %"class.WTF::StringImpl"** [ null, %23 ], [ %51, %50 ]
  %44 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, i64 %42
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %46 = ptrtoint %"class.WTF::StringImpl"* %45 to i64
  switch i64 %46, label %47 [
    i64 0, label %56
    i64 -1, label %50
  ]

47:                                               ; preds = %40
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, align 8
  %49 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %45, %"class.WTF::StringImpl"* %48) #9
  br i1 %49, label %84, label %50

50:                                               ; preds = %40, %47
  %51 = phi %"class.WTF::StringImpl"** [ %43, %47 ], [ %44, %40 ]
  %52 = icmp eq i64 %41, 0
  %53 = select i1 %52, i64 %39, i64 %41
  %54 = add i64 %53, %42
  %55 = and i64 %54, %15
  br label %40

56:                                               ; preds = %40
  %57 = icmp eq %"class.WTF::StringImpl"** %43, null
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = bitcast %"class.WTF::StringImpl"** %44 to i64*
  br label %68

60:                                               ; preds = %56
  %61 = bitcast %"class.WTF::StringImpl"** %43 to i64*
  store i64 0, i64* %61, align 8
  %62 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %63 = load i32, i32* %62, align 8
  %64 = add i32 %63, 2147483647
  %65 = and i32 %64, 2147483647
  %66 = and i32 %63, -2147483648
  %67 = or i32 %65, %66
  store i32 %67, i32* %62, align 8
  br label %68

68:                                               ; preds = %58, %60
  %69 = phi i64* [ %59, %58 ], [ %61, %60 ]
  %70 = phi %"class.WTF::StringImpl"** [ %44, %58 ], [ %43, %60 ]
  %71 = bitcast %"class.WTF::StringImpl"** %2 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %69, align 8
  %73 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %74 = load i32, i32* %73, align 4
  %75 = add i32 %74, 1
  store i32 %75, i32* %73, align 4
  %76 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = add i32 %77, %75
  %79 = shl i32 %78, 1
  %80 = load i32, i32* %12, align 8
  %81 = icmp ult i32 %79, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %68
  %83 = tail call %"class.WTF::StringImpl"** @_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable"* %0, %"class.WTF::StringImpl"** %70)
  br label %84

84:                                               ; preds = %47, %68, %82
  %85 = phi i8 [ 1, %68 ], [ 1, %82 ], [ 0, %47 ]
  %86 = phi %"class.WTF::StringImpl"** [ %70, %68 ], [ %83, %82 ], [ %44, %47 ]
  %87 = insertvalue { %"class.WTF::StringImpl"**, i8 } undef, %"class.WTF::StringImpl"** %86, 0
  %88 = insertvalue { %"class.WTF::StringImpl"**, i8 } %87, i8 %85, 1
  ret { %"class.WTF::StringImpl"**, i8 } %88
}

declare zeroext i1 @_ZN3WTF7unicode19EqualLatin1WithUTF8EPKhS2_PKcS4_(i8*, i8*, i8*, i8*) local_unnamed_addr #2

declare zeroext i1 @_ZN3WTF7unicode18EqualUTF16WithUTF8EPKDsS2_PKcS4_(i16*, i16*, i8*, i8*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #2

declare i32 @_ZN3WTF7unicode18ConvertUTF8ToUTF16EPPKcS2_PPDsS4_Pbb(i8**, i8*, i16**, i16*, i8*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"** } @_ZNK3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE4findERKS2_(%"class.WTF::HashTable"*, %"class.WTF::StringImpl"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %4 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"** %4, null
  br i1 %5, label %52, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, -1
  %10 = zext i32 %9 to i64
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = lshr i32 %13, 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %6
  %17 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %11) #9
  br label %18

18:                                               ; preds = %16, %6
  %19 = phi i32 [ %17, %16 ], [ %14, %6 ]
  %20 = and i32 %19, %9
  %21 = zext i32 %20 to i64
  %22 = xor i32 %19, -1
  %23 = lshr i32 %19, 23
  %24 = add i32 %23, %22
  %25 = shl i32 %24, 12
  %26 = xor i32 %25, %24
  %27 = lshr i32 %26, 7
  %28 = xor i32 %27, %26
  %29 = shl i32 %28, 2
  %30 = xor i32 %29, %28
  %31 = lshr i32 %30, 20
  %32 = xor i32 %31, %30
  %33 = or i32 %32, 1
  %34 = zext i32 %33 to i64
  br label %35

35:                                               ; preds = %44, %18
  %36 = phi i64 [ 0, %18 ], [ %46, %44 ]
  %37 = phi i64 [ %21, %18 ], [ %48, %44 ]
  %38 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, i64 %37
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %40 = ptrtoint %"class.WTF::StringImpl"* %39 to i64
  switch i64 %40, label %41 [
    i64 0, label %52
    i64 -1, label %44
  ]

41:                                               ; preds = %35
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, align 8
  %43 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %39, %"class.WTF::StringImpl"* %42) #9
  br i1 %43, label %49, label %44

44:                                               ; preds = %41, %35
  %45 = icmp eq i64 %36, 0
  %46 = select i1 %45, i64 %34, i64 %36
  %47 = add i64 %46, %37
  %48 = and i64 %47, %10
  br label %35

49:                                               ; preds = %41
  %50 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, i64 %37
  %51 = icmp eq %"class.WTF::StringImpl"** %50, null
  br i1 %51, label %52, label %58

52:                                               ; preds = %35, %49, %2
  %53 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %3, align 8
  %54 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %55 = load i32, i32* %54, align 8
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %53, i64 %56
  br label %63

58:                                               ; preds = %49
  %59 = load %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"*** %3, align 8
  %60 = load i32, i32* %7, align 8
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, i64 %61
  br label %63

63:                                               ; preds = %52, %58
  %64 = phi %"class.WTF::StringImpl"** [ %50, %58 ], [ %57, %52 ]
  %65 = phi %"class.WTF::StringImpl"** [ %62, %58 ], [ %57, %52 ]
  %66 = insertvalue { %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"** } undef, %"class.WTF::StringImpl"** %64, 0
  %67 = insertvalue { %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"** } %66, %"class.WTF::StringImpl"** %65, 1
  ret { %"class.WTF::StringImpl"**, %"class.WTF::StringImpl"** } %67
}

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

declare i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE20FullLookupForWritingINS_24HashSetTranslatorAdapterINS_12_GLOBAL__N_121UCharBufferTranslatorEEENSB_24HashTranslatorCharBufferIDsEEEENSt3__14pairINSH_IPS2_bEEjEERKT0_: argument 0"}
!6 = distinct !{!6, !"_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE20FullLookupForWritingINS_24HashSetTranslatorAdapterINS_12_GLOBAL__N_121UCharBufferTranslatorEEENSB_24HashTranslatorCharBufferIDsEEEENSt3__14pairINSH_IPS2_bEEjEERKT0_"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE20FullLookupForWritingINS_24HashSetTranslatorAdapterINS_21LCharBufferTranslatorEEENS_12_GLOBAL__N_124HashTranslatorCharBufferIhEEEENSt3__14pairINSH_IPS2_bEEjEERKT0_: argument 0"}
!9 = distinct !{!9, !"_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE20FullLookupForWritingINS_24HashSetTranslatorAdapterINS_21LCharBufferTranslatorEEENS_12_GLOBAL__N_124HashTranslatorCharBufferIhEEEENSt3__14pairINSH_IPS2_bEEjEERKT0_"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE20FullLookupForWritingINS_24HashSetTranslatorAdapterINS_12_GLOBAL__N_131HashAndUTF8CharactersTranslatorEEENSB_21HashAndUTF8CharactersEEENSt3__14pairINSG_IPS2_bEEjEERKT0_: argument 0"}
!12 = distinct !{!12, !"_ZN3WTF9HashTableIPNS_10StringImplES2_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS2_EES6_NS_18PartitionAllocatorEE20FullLookupForWritingINS_24HashSetTranslatorAdapterINS_12_GLOBAL__N_131HashAndUTF8CharactersTranslatorEEENSB_21HashAndUTF8CharactersEEENSt3__14pairINSG_IPS2_bEEjEERKT0_"}
!13 = !{!"branch_weights", i32 2002, i32 2000}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !17, !15}
!17 = !{!"llvm.loop.unroll.runtime.disable"}
!18 = distinct !{!18, !15}
!19 = distinct !{!19, !17, !15}
!20 = !{i8 0, i8 2}
