; ModuleID = '../../third_party/icu/source/i18n/csrucode.cpp'
source_filename = "../../third_party/icu/source/i18n/csrucode.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.icu_69::CharsetRecog_Unicode" = type { %"class.icu_69::CharsetRecognizer" }
%"class.icu_69::CharsetRecognizer" = type { i32 (...)** }
%"class.icu_69::CharsetRecog_UTF_16_BE" = type { %"class.icu_69::CharsetRecog_Unicode" }
%"class.icu_69::CharsetRecog_UTF_16_LE" = type { %"class.icu_69::CharsetRecog_Unicode" }
%"class.icu_69::CharsetRecog_UTF_32" = type { %"class.icu_69::CharsetRecog_Unicode" }
%"class.icu_69::CharsetRecog_UTF_32_BE" = type { %"class.icu_69::CharsetRecog_UTF_32" }
%"class.icu_69::CharsetRecog_UTF_32_LE" = type { %"class.icu_69::CharsetRecog_UTF_32" }
%"class.icu_69::InputText" = type <{ i8*, i32, [4 x i8], i16*, i8, [7 x i8], i8*, i8*, i32, [4 x i8] }>
%"class.icu_69::CharsetMatch" = type { %"class.icu_69::InputText"*, i32, i8*, i8* }

@.str = private unnamed_addr constant [9 x i8] c"UTF-16BE\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"UTF-16LE\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"UTF-32BE\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"UTF-32LE\00", align 1
@_ZTVN6icu_6920CharsetRecog_UnicodeE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6icu_6920CharsetRecog_UnicodeE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i8* (%"class.icu_69::CharsetRecognizer"*)* @_ZNK6icu_6917CharsetRecognizer11getLanguageEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD0Ev to i8*)] }, align 8
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global i8*
@_ZTSN6icu_6920CharsetRecog_UnicodeE = hidden constant [32 x i8] c"N6icu_6920CharsetRecog_UnicodeE\00", align 1
@_ZTIN6icu_6917CharsetRecognizerE = external constant i8*
@_ZTIN6icu_6920CharsetRecog_UnicodeE = hidden constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @_ZTSN6icu_6920CharsetRecog_UnicodeE, i32 0, i32 0), i8* bitcast (i8** @_ZTIN6icu_6917CharsetRecognizerE to i8*) }, align 8
@_ZTVN6icu_6922CharsetRecog_UTF_16_BEE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6icu_6922CharsetRecog_UTF_16_BEE to i8*), i8* bitcast (i8* (%"class.icu_69::CharsetRecog_UTF_16_BE"*)* @_ZNK6icu_6922CharsetRecog_UTF_16_BE7getNameEv to i8*), i8* bitcast (i8* (%"class.icu_69::CharsetRecognizer"*)* @_ZNK6icu_6917CharsetRecognizer11getLanguageEv to i8*), i8* bitcast (i8 (%"class.icu_69::CharsetRecog_UTF_16_BE"*, %"class.icu_69::InputText"*, %"class.icu_69::CharsetMatch"*)* @_ZNK6icu_6922CharsetRecog_UTF_16_BE5matchEPNS_9InputTextEPNS_12CharsetMatchE to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_UTF_16_BE"*)* @_ZN6icu_6922CharsetRecog_UTF_16_BED0Ev to i8*)] }, align 8
@_ZTSN6icu_6922CharsetRecog_UTF_16_BEE = hidden constant [34 x i8] c"N6icu_6922CharsetRecog_UTF_16_BEE\00", align 1
@_ZTIN6icu_6922CharsetRecog_UTF_16_BEE = hidden constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @_ZTSN6icu_6922CharsetRecog_UTF_16_BEE, i32 0, i32 0), i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6icu_6920CharsetRecog_UnicodeE to i8*) }, align 8
@_ZTVN6icu_6922CharsetRecog_UTF_16_LEE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6icu_6922CharsetRecog_UTF_16_LEE to i8*), i8* bitcast (i8* (%"class.icu_69::CharsetRecog_UTF_16_LE"*)* @_ZNK6icu_6922CharsetRecog_UTF_16_LE7getNameEv to i8*), i8* bitcast (i8* (%"class.icu_69::CharsetRecognizer"*)* @_ZNK6icu_6917CharsetRecognizer11getLanguageEv to i8*), i8* bitcast (i8 (%"class.icu_69::CharsetRecog_UTF_16_LE"*, %"class.icu_69::InputText"*, %"class.icu_69::CharsetMatch"*)* @_ZNK6icu_6922CharsetRecog_UTF_16_LE5matchEPNS_9InputTextEPNS_12CharsetMatchE to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_UTF_16_LE"*)* @_ZN6icu_6922CharsetRecog_UTF_16_LED0Ev to i8*)] }, align 8
@_ZTSN6icu_6922CharsetRecog_UTF_16_LEE = hidden constant [34 x i8] c"N6icu_6922CharsetRecog_UTF_16_LEE\00", align 1
@_ZTIN6icu_6922CharsetRecog_UTF_16_LEE = hidden constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @_ZTSN6icu_6922CharsetRecog_UTF_16_LEE, i32 0, i32 0), i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6icu_6920CharsetRecog_UnicodeE to i8*) }, align 8
@_ZTVN6icu_6919CharsetRecog_UTF_32E = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6icu_6919CharsetRecog_UTF_32E to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i8* (%"class.icu_69::CharsetRecognizer"*)* @_ZNK6icu_6917CharsetRecognizer11getLanguageEv to i8*), i8* bitcast (i8 (%"class.icu_69::CharsetRecog_UTF_32"*, %"class.icu_69::InputText"*, %"class.icu_69::CharsetMatch"*)* @_ZNK6icu_6919CharsetRecog_UTF_325matchEPNS_9InputTextEPNS_12CharsetMatchE to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_UTF_32"*)* @_ZN6icu_6919CharsetRecog_UTF_32D0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTSN6icu_6919CharsetRecog_UTF_32E = hidden constant [31 x i8] c"N6icu_6919CharsetRecog_UTF_32E\00", align 1
@_ZTIN6icu_6919CharsetRecog_UTF_32E = hidden constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @_ZTSN6icu_6919CharsetRecog_UTF_32E, i32 0, i32 0), i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6icu_6920CharsetRecog_UnicodeE to i8*) }, align 8
@_ZTVN6icu_6922CharsetRecog_UTF_32_BEE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6icu_6922CharsetRecog_UTF_32_BEE to i8*), i8* bitcast (i8* (%"class.icu_69::CharsetRecog_UTF_32_BE"*)* @_ZNK6icu_6922CharsetRecog_UTF_32_BE7getNameEv to i8*), i8* bitcast (i8* (%"class.icu_69::CharsetRecognizer"*)* @_ZNK6icu_6917CharsetRecognizer11getLanguageEv to i8*), i8* bitcast (i8 (%"class.icu_69::CharsetRecog_UTF_32"*, %"class.icu_69::InputText"*, %"class.icu_69::CharsetMatch"*)* @_ZNK6icu_6919CharsetRecog_UTF_325matchEPNS_9InputTextEPNS_12CharsetMatchE to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_UTF_32_BE"*)* @_ZN6icu_6922CharsetRecog_UTF_32_BED0Ev to i8*), i8* bitcast (i32 (%"class.icu_69::CharsetRecog_UTF_32_BE"*, i8*, i32)* @_ZNK6icu_6922CharsetRecog_UTF_32_BE7getCharEPKhi to i8*)] }, align 8
@_ZTSN6icu_6922CharsetRecog_UTF_32_BEE = hidden constant [34 x i8] c"N6icu_6922CharsetRecog_UTF_32_BEE\00", align 1
@_ZTIN6icu_6922CharsetRecog_UTF_32_BEE = hidden constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @_ZTSN6icu_6922CharsetRecog_UTF_32_BEE, i32 0, i32 0), i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6icu_6919CharsetRecog_UTF_32E to i8*) }, align 8
@_ZTVN6icu_6922CharsetRecog_UTF_32_LEE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6icu_6922CharsetRecog_UTF_32_LEE to i8*), i8* bitcast (i8* (%"class.icu_69::CharsetRecog_UTF_32_LE"*)* @_ZNK6icu_6922CharsetRecog_UTF_32_LE7getNameEv to i8*), i8* bitcast (i8* (%"class.icu_69::CharsetRecognizer"*)* @_ZNK6icu_6917CharsetRecognizer11getLanguageEv to i8*), i8* bitcast (i8 (%"class.icu_69::CharsetRecog_UTF_32"*, %"class.icu_69::InputText"*, %"class.icu_69::CharsetMatch"*)* @_ZNK6icu_6919CharsetRecog_UTF_325matchEPNS_9InputTextEPNS_12CharsetMatchE to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_UTF_32_LE"*)* @_ZN6icu_6922CharsetRecog_UTF_32_LED0Ev to i8*), i8* bitcast (i32 (%"class.icu_69::CharsetRecog_UTF_32_LE"*, i8*, i32)* @_ZNK6icu_6922CharsetRecog_UTF_32_LE7getCharEPKhi to i8*)] }, align 8
@_ZTSN6icu_6922CharsetRecog_UTF_32_LEE = hidden constant [34 x i8] c"N6icu_6922CharsetRecog_UTF_32_LEE\00", align 1
@_ZTIN6icu_6922CharsetRecog_UTF_32_LEE = hidden constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @_ZTSN6icu_6922CharsetRecog_UTF_32_LEE, i32 0, i32 0), i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6icu_6919CharsetRecog_UTF_32E to i8*) }, align 8

@_ZN6icu_6920CharsetRecog_UnicodeD1Ev = hidden unnamed_addr alias void (%"class.icu_69::CharsetRecog_Unicode"*), void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev
@_ZN6icu_6922CharsetRecog_UTF_16_BED2Ev = hidden unnamed_addr alias void (%"class.icu_69::CharsetRecog_UTF_16_BE"*), bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to void (%"class.icu_69::CharsetRecog_UTF_16_BE"*)*)
@_ZN6icu_6922CharsetRecog_UTF_16_BED1Ev = hidden unnamed_addr alias void (%"class.icu_69::CharsetRecog_UTF_16_BE"*), bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to void (%"class.icu_69::CharsetRecog_UTF_16_BE"*)*)
@_ZN6icu_6922CharsetRecog_UTF_16_LED2Ev = hidden unnamed_addr alias void (%"class.icu_69::CharsetRecog_UTF_16_LE"*), bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to void (%"class.icu_69::CharsetRecog_UTF_16_LE"*)*)
@_ZN6icu_6922CharsetRecog_UTF_16_LED1Ev = hidden unnamed_addr alias void (%"class.icu_69::CharsetRecog_UTF_16_LE"*), bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to void (%"class.icu_69::CharsetRecog_UTF_16_LE"*)*)
@_ZN6icu_6919CharsetRecog_UTF_32D2Ev = hidden unnamed_addr alias void (%"class.icu_69::CharsetRecog_UTF_32"*), bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to void (%"class.icu_69::CharsetRecog_UTF_32"*)*)
@_ZN6icu_6919CharsetRecog_UTF_32D1Ev = hidden unnamed_addr alias void (%"class.icu_69::CharsetRecog_UTF_32"*), bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to void (%"class.icu_69::CharsetRecog_UTF_32"*)*)
@_ZN6icu_6922CharsetRecog_UTF_32_BED2Ev = hidden unnamed_addr alias void (%"class.icu_69::CharsetRecog_UTF_32_BE"*), bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to void (%"class.icu_69::CharsetRecog_UTF_32_BE"*)*)
@_ZN6icu_6922CharsetRecog_UTF_32_BED1Ev = hidden unnamed_addr alias void (%"class.icu_69::CharsetRecog_UTF_32_BE"*), bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to void (%"class.icu_69::CharsetRecog_UTF_32_BE"*)*)
@_ZN6icu_6922CharsetRecog_UTF_32_LED2Ev = hidden unnamed_addr alias void (%"class.icu_69::CharsetRecog_UTF_32_LE"*), bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to void (%"class.icu_69::CharsetRecog_UTF_32_LE"*)*)
@_ZN6icu_6922CharsetRecog_UTF_32_LED1Ev = hidden unnamed_addr alias void (%"class.icu_69::CharsetRecog_UTF_32_LE"*), bitcast (void (%"class.icu_69::CharsetRecog_Unicode"*)* @_ZN6icu_6920CharsetRecog_UnicodeD2Ev to void (%"class.icu_69::CharsetRecog_UTF_32_LE"*)*)

; Function Attrs: nounwind
declare void @_ZN6icu_6917CharsetRecognizerD2Ev(%"class.icu_69::CharsetRecognizer"*) unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6icu_6920CharsetRecog_UnicodeD2Ev(%"class.icu_69::CharsetRecog_Unicode"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.icu_69::CharsetRecog_Unicode", %"class.icu_69::CharsetRecog_Unicode"* %0, i64 0, i32 0
  tail call void @_ZN6icu_6917CharsetRecognizerD2Ev(%"class.icu_69::CharsetRecognizer"* %2) #7
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN6icu_6920CharsetRecog_UnicodeD0Ev(%"class.icu_69::CharsetRecog_Unicode"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #8
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6icu_6922CharsetRecog_UTF_16_BED0Ev(%"class.icu_69::CharsetRecog_UTF_16_BE"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.icu_69::CharsetRecog_UTF_16_BE", %"class.icu_69::CharsetRecog_UTF_16_BE"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN6icu_6917CharsetRecognizerD2Ev(%"class.icu_69::CharsetRecognizer"* %2) #7
  %3 = bitcast %"class.icu_69::CharsetRecog_UTF_16_BE"* %0 to i8*
  tail call void @_ZN6icu_697UMemorydlEPv(i8* %3) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6icu_697UMemorydlEPv(i8*) local_unnamed_addr #0

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZNK6icu_6922CharsetRecog_UTF_16_BE7getNameEv(%"class.icu_69::CharsetRecog_UTF_16_BE"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i8 @_ZNK6icu_6922CharsetRecog_UTF_16_BE5matchEPNS_9InputTextEPNS_12CharsetMatchE(%"class.icu_69::CharsetRecog_UTF_16_BE"*, %"class.icu_69::InputText"*, %"class.icu_69::CharsetMatch"*) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.icu_69::InputText", %"class.icu_69::InputText"* %1, i64 0, i32 7
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.icu_69::InputText", %"class.icu_69::InputText"* %1, i64 0, i32 8
  %7 = load i32, i32* %6, align 8
  %8 = icmp slt i32 %7, 30
  %9 = select i1 %8, i32 %7, i32 30
  %10 = add nsw i32 %9, -1
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %46

12:                                               ; preds = %3, %42
  %13 = phi i64 [ %43, %42 ], [ 0, %3 ]
  %14 = phi i32 [ %41, %42 ], [ 10, %3 ]
  %15 = getelementptr inbounds i8, i8* %5, i64 %13
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i16
  %18 = shl nuw i16 %17, 8
  %19 = or i64 %13, 1
  %20 = getelementptr inbounds i8, i8* %5, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  %23 = or i16 %18, %22
  %24 = icmp eq i64 %13, 0
  %25 = icmp eq i16 %23, -257
  %26 = and i1 %24, %25
  br i1 %26, label %46, label %27

27:                                               ; preds = %12
  %28 = icmp eq i16 %23, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = add nsw i32 %14, -10
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %46, label %40

32:                                               ; preds = %27
  %33 = add i16 %23, -32
  %34 = icmp ult i16 %33, 224
  %35 = icmp eq i16 %23, 10
  %36 = or i1 %35, %34
  %37 = add nuw nsw i32 %14, 10
  %38 = select i1 %36, i32 %37, i32 %14
  %39 = icmp slt i32 %38, 100
  br i1 %39, label %40, label %46

40:                                               ; preds = %29, %32
  %41 = phi i32 [ %38, %32 ], [ %30, %29 ]
  switch i32 %41, label %42 [
    i32 100, label %46
    i32 0, label %46
  ]

42:                                               ; preds = %40
  %43 = add nuw i64 %13, 2
  %44 = trunc i64 %43 to i32
  %45 = icmp sgt i32 %10, %44
  br i1 %45, label %12, label %46

46:                                               ; preds = %42, %12, %40, %40, %32, %29, %3
  %47 = phi i32 [ 10, %3 ], [ 0, %29 ], [ 100, %32 ], [ %41, %40 ], [ %41, %40 ], [ 100, %12 ], [ %41, %42 ]
  %48 = icmp slt i32 %9, 4
  %49 = icmp slt i32 %47, 100
  %50 = and i1 %48, %49
  %51 = select i1 %50, i32 0, i32 %47
  %52 = getelementptr inbounds %"class.icu_69::CharsetRecog_UTF_16_BE", %"class.icu_69::CharsetRecog_UTF_16_BE"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN6icu_6912CharsetMatch3setEPNS_9InputTextEPKNS_17CharsetRecognizerEiPKcS7_(%"class.icu_69::CharsetMatch"* %2, %"class.icu_69::InputText"* %1, %"class.icu_69::CharsetRecognizer"* %52, i32 %51, i8* null, i8* null) #7
  %53 = icmp sgt i32 %51, 0
  %54 = zext i1 %53 to i8
  ret i8 %54
}

declare void @_ZN6icu_6912CharsetMatch3setEPNS_9InputTextEPKNS_17CharsetRecognizerEiPKcS7_(%"class.icu_69::CharsetMatch"*, %"class.icu_69::InputText"*, %"class.icu_69::CharsetRecognizer"*, i32, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6icu_6922CharsetRecog_UTF_16_LED0Ev(%"class.icu_69::CharsetRecog_UTF_16_LE"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.icu_69::CharsetRecog_UTF_16_LE", %"class.icu_69::CharsetRecog_UTF_16_LE"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN6icu_6917CharsetRecognizerD2Ev(%"class.icu_69::CharsetRecognizer"* %2) #7
  %3 = bitcast %"class.icu_69::CharsetRecog_UTF_16_LE"* %0 to i8*
  tail call void @_ZN6icu_697UMemorydlEPv(i8* %3) #7
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZNK6icu_6922CharsetRecog_UTF_16_LE7getNameEv(%"class.icu_69::CharsetRecog_UTF_16_LE"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i8 @_ZNK6icu_6922CharsetRecog_UTF_16_LE5matchEPNS_9InputTextEPNS_12CharsetMatchE(%"class.icu_69::CharsetRecog_UTF_16_LE"*, %"class.icu_69::InputText"*, %"class.icu_69::CharsetMatch"*) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.icu_69::InputText", %"class.icu_69::InputText"* %1, i64 0, i32 7
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.icu_69::InputText", %"class.icu_69::InputText"* %1, i64 0, i32 8
  %7 = load i32, i32* %6, align 8
  %8 = icmp slt i32 %7, 30
  %9 = select i1 %8, i32 %7, i32 30
  %10 = add nsw i32 %9, -1
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %57

12:                                               ; preds = %3, %53
  %13 = phi i64 [ %54, %53 ], [ 0, %3 ]
  %14 = phi i32 [ %52, %53 ], [ 10, %3 ]
  %15 = getelementptr inbounds i8, i8* %5, i64 %13
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i16
  %18 = or i64 %13, 1
  %19 = getelementptr inbounds i8, i8* %5, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i16
  %22 = shl nuw i16 %21, 8
  %23 = or i16 %22, %17
  %24 = icmp eq i64 %13, 0
  %25 = icmp eq i16 %23, -257
  %26 = and i1 %24, %25
  br i1 %26, label %27, label %38

27:                                               ; preds = %12
  %28 = icmp sgt i32 %7, 3
  br i1 %28, label %29, label %57

29:                                               ; preds = %27
  %30 = getelementptr inbounds i8, i8* %5, i64 2
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %57

33:                                               ; preds = %29
  %34 = getelementptr inbounds i8, i8* %5, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  %37 = select i1 %36, i32 0, i32 100
  br label %57

38:                                               ; preds = %12
  %39 = icmp eq i16 %23, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %38
  %41 = add nsw i32 %14, -10
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %57, label %51

43:                                               ; preds = %38
  %44 = add i16 %23, -32
  %45 = icmp ult i16 %44, 224
  %46 = icmp eq i16 %23, 10
  %47 = or i1 %46, %45
  %48 = add nuw nsw i32 %14, 10
  %49 = select i1 %47, i32 %48, i32 %14
  %50 = icmp slt i32 %49, 100
  br i1 %50, label %51, label %57

51:                                               ; preds = %40, %43
  %52 = phi i32 [ %49, %43 ], [ %41, %40 ]
  switch i32 %52, label %53 [
    i32 100, label %57
    i32 0, label %57
  ]

53:                                               ; preds = %51
  %54 = add nuw i64 %13, 2
  %55 = trunc i64 %54 to i32
  %56 = icmp sgt i32 %10, %55
  br i1 %56, label %12, label %57

57:                                               ; preds = %53, %51, %51, %43, %40, %3, %27, %29, %33
  %58 = phi i32 [ %37, %33 ], [ 100, %27 ], [ 100, %29 ], [ 10, %3 ], [ %52, %53 ], [ %52, %51 ], [ %52, %51 ], [ 100, %43 ], [ 0, %40 ]
  %59 = icmp slt i32 %9, 4
  %60 = icmp slt i32 %58, 100
  %61 = and i1 %59, %60
  %62 = select i1 %61, i32 0, i32 %58
  %63 = getelementptr inbounds %"class.icu_69::CharsetRecog_UTF_16_LE", %"class.icu_69::CharsetRecog_UTF_16_LE"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN6icu_6912CharsetMatch3setEPNS_9InputTextEPKNS_17CharsetRecognizerEiPKcS7_(%"class.icu_69::CharsetMatch"* %2, %"class.icu_69::InputText"* %1, %"class.icu_69::CharsetRecognizer"* %63, i32 %62, i8* null, i8* null) #7
  %64 = icmp sgt i32 %62, 0
  %65 = zext i1 %64 to i8
  ret i8 %65
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN6icu_6919CharsetRecog_UTF_32D0Ev(%"class.icu_69::CharsetRecog_UTF_32"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #8
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i8 @_ZNK6icu_6919CharsetRecog_UTF_325matchEPNS_9InputTextEPNS_12CharsetMatchE(%"class.icu_69::CharsetRecog_UTF_32"*, %"class.icu_69::InputText"*, %"class.icu_69::CharsetMatch"*) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.icu_69::InputText", %"class.icu_69::InputText"* %1, i64 0, i32 7
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.icu_69::InputText", %"class.icu_69::InputText"* %1, i64 0, i32 8
  %7 = load i32, i32* %6, align 8
  %8 = sdiv i32 %7, 4
  %9 = shl nsw i32 %8, 2
  %10 = icmp sgt i32 %7, 3
  br i1 %10, label %11, label %54

11:                                               ; preds = %3
  %12 = bitcast %"class.icu_69::CharsetRecog_UTF_32"* %0 to i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)***
  %13 = load i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)**, i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)*** %12, align 8
  %14 = getelementptr inbounds i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)*, i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)** %13, i64 5
  %15 = load i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)*, i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)** %14, align 8
  %16 = tail call i32 %15(%"class.icu_69::CharsetRecog_UTF_32"* %0, i8* %5, i32 0) #7
  %17 = icmp eq i32 %16, 65279
  %18 = bitcast %"class.icu_69::CharsetRecog_UTF_32"* %0 to i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)***
  br label %22

19:                                               ; preds = %22
  %20 = icmp eq i32 %39, 0
  %21 = and i1 %17, %20
  br i1 %21, label %54, label %42

22:                                               ; preds = %11, %22
  %23 = phi i32 [ 0, %11 ], [ %40, %22 ]
  %24 = phi i32 [ 0, %11 ], [ %39, %22 ]
  %25 = phi i32 [ 0, %11 ], [ %37, %22 ]
  %26 = load i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)**, i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)*** %18, align 8
  %27 = getelementptr inbounds i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)*, i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)** %26, i64 5
  %28 = load i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)*, i32 (%"class.icu_69::CharsetRecog_UTF_32"*, i8*, i32)** %27, align 8
  %29 = tail call i32 %28(%"class.icu_69::CharsetRecog_UTF_32"* %0, i8* %5, i32 %23) #7
  %30 = icmp ugt i32 %29, 1114110
  %31 = and i32 %29, -2048
  %32 = icmp eq i32 %31, 55296
  %33 = or i1 %30, %32
  %34 = or i1 %30, %32
  %35 = xor i1 %34, true
  %36 = zext i1 %35 to i32
  %37 = add nuw nsw i32 %25, %36
  %38 = zext i1 %33 to i32
  %39 = add nuw nsw i32 %24, %38
  %40 = add nuw nsw i32 %23, 4
  %41 = icmp slt i32 %40, %9
  br i1 %41, label %22, label %19

42:                                               ; preds = %19
  %43 = mul nsw i32 %39, 10
  %44 = icmp ugt i32 %37, %43
  %45 = and i1 %17, %44
  br i1 %45, label %54, label %46

46:                                               ; preds = %42
  %47 = icmp ugt i32 %37, 3
  %48 = and i1 %47, %20
  br i1 %48, label %54, label %49

49:                                               ; preds = %46
  %50 = icmp ne i32 %37, 0
  %51 = and i1 %50, %20
  %52 = select i1 %44, i32 25, i32 0
  %53 = select i1 %51, i32 80, i32 %52
  br label %54

54:                                               ; preds = %49, %3, %46, %42, %19
  %55 = phi i32 [ 100, %19 ], [ 80, %42 ], [ 100, %46 ], [ 0, %3 ], [ %53, %49 ]
  %56 = getelementptr inbounds %"class.icu_69::CharsetRecog_UTF_32", %"class.icu_69::CharsetRecog_UTF_32"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN6icu_6912CharsetMatch3setEPNS_9InputTextEPKNS_17CharsetRecognizerEiPKcS7_(%"class.icu_69::CharsetMatch"* %2, %"class.icu_69::InputText"* %1, %"class.icu_69::CharsetRecognizer"* %56, i32 %55, i8* null, i8* null) #7
  %57 = icmp ne i32 %55, 0
  %58 = zext i1 %57 to i8
  ret i8 %58
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6icu_6922CharsetRecog_UTF_32_BED0Ev(%"class.icu_69::CharsetRecog_UTF_32_BE"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.icu_69::CharsetRecog_UTF_32_BE", %"class.icu_69::CharsetRecog_UTF_32_BE"* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN6icu_6917CharsetRecognizerD2Ev(%"class.icu_69::CharsetRecognizer"* %2) #7
  %3 = bitcast %"class.icu_69::CharsetRecog_UTF_32_BE"* %0 to i8*
  tail call void @_ZN6icu_697UMemorydlEPv(i8* %3) #7
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZNK6icu_6922CharsetRecog_UTF_32_BE7getNameEv(%"class.icu_69::CharsetRecog_UTF_32_BE"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK6icu_6922CharsetRecog_UTF_32_BE7getCharEPKhi(%"class.icu_69::CharsetRecog_UTF_32_BE"* nocapture readnone, i8* nocapture readonly, i32) unnamed_addr #6 align 2 {
  %4 = sext i32 %2 to i64
  %5 = getelementptr inbounds i8, i8* %1, i64 %4
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw i32 %7, 24
  %9 = add nsw i32 %2, 1
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %1, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = shl nuw nsw i32 %13, 16
  %15 = or i32 %14, %8
  %16 = add nsw i32 %2, 2
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %1, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = shl nuw nsw i32 %20, 8
  %22 = or i32 %15, %21
  %23 = add nsw i32 %2, 3
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %1, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = or i32 %22, %27
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6icu_6922CharsetRecog_UTF_32_LED0Ev(%"class.icu_69::CharsetRecog_UTF_32_LE"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.icu_69::CharsetRecog_UTF_32_LE", %"class.icu_69::CharsetRecog_UTF_32_LE"* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN6icu_6917CharsetRecognizerD2Ev(%"class.icu_69::CharsetRecognizer"* %2) #7
  %3 = bitcast %"class.icu_69::CharsetRecog_UTF_32_LE"* %0 to i8*
  tail call void @_ZN6icu_697UMemorydlEPv(i8* %3) #7
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZNK6icu_6922CharsetRecog_UTF_32_LE7getNameEv(%"class.icu_69::CharsetRecog_UTF_32_LE"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK6icu_6922CharsetRecog_UTF_32_LE7getCharEPKhi(%"class.icu_69::CharsetRecog_UTF_32_LE"* nocapture readnone, i8* nocapture readonly, i32) unnamed_addr #6 align 2 {
  %4 = add nsw i32 %2, 3
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = shl nuw i32 %8, 24
  %10 = add nsw i32 %2, 2
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %1, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = shl nuw nsw i32 %14, 16
  %16 = or i32 %15, %9
  %17 = add nsw i32 %2, 1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %1, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = shl nuw nsw i32 %21, 8
  %23 = or i32 %16, %22
  %24 = sext i32 %2 to i64
  %25 = getelementptr inbounds i8, i8* %1, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = or i32 %23, %27
  ret i32 %28
}

declare void @__cxa_pure_virtual() unnamed_addr

declare i8* @_ZNK6icu_6917CharsetRecognizer11getLanguageEv(%"class.icu_69::CharsetRecognizer"*) unnamed_addr #5

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
