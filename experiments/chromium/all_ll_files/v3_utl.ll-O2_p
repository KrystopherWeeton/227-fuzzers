; ModuleID = '../../third_party/boringssl/src/crypto/x509v3/v3_utl.c'
source_filename = "../../third_party/boringssl/src/crypto/x509v3/v3_utl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stack_st_CONF_VALUE = type opaque
%struct.conf_value_st = type { i8*, i8*, i8* }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.v3_ext_method = type { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* }
%struct.ASN1_ITEM_st = type opaque
%struct.v3_ext_ctx = type { i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_req_st*, %struct.X509_crl_st*, %struct.X509V3_CONF_METHOD_st*, i8* }
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.X509_req_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type { %struct.DIST_POINT_NAME_st*, i32, i32, %struct.asn1_string_st*, i32, i32 }
%struct.DIST_POINT_NAME_st = type { i32, %union.anon.0, %struct.X509_name_st* }
%union.anon.0 = type { %struct.stack_st_GENERAL_NAME* }
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.X509V3_CONF_METHOD_st = type { i8* (i8*, i8*, i8*)*, %struct.stack_st_CONF_VALUE* (i8*, i8*)*, void (i8*, i8*)*, void (i8*, %struct.stack_st_CONF_VALUE*)* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.stack_st_OPENSSL_STRING = type opaque
%struct.X509_name_entry_st = type { %struct.asn1_object_st*, %struct.asn1_string_st*, i32, i32 }
%struct.GENERAL_NAME_st = type { i32, %union.anon.1 }
%union.anon.1 = type { i8* }
%struct.stack_st_ACCESS_DESCRIPTION = type opaque
%struct.X509_extension_st = type { %struct.asn1_object_st*, i32, %struct.asn1_string_st* }
%struct.IPV6_STAT = type { [16 x i8], i32, i32, i32 }

@.str = private unnamed_addr constant [55 x i8] c"../../third_party/boringssl/src/crypto/x509v3/v3_utl.c\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"TRUE\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"FALSE\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"Y\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"YES\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"yes\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"N\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"n\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"NO\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"section:\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c",name:\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c",value:\00", align 1
@x509v3_bytes_to_hex.hexdig = internal unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 16
@.str.16 = private unnamed_addr constant [4 x i8] c"-0x\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"xn--\00", align 1
@.str.19 = private unnamed_addr constant [12 x i8] c"%d.%d.%d.%d\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_add_value(i8*, i8*, %struct.stack_st_CONF_VALUE** nocapture) local_unnamed_addr #0 {
  %4 = icmp eq i8* %0, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  %6 = tail call i8* @OPENSSL_strdup(i8* nonnull %0) #11
  %7 = icmp eq i8* %6, null
  br i1 %7, label %38, label %8

8:                                                ; preds = %5, %3
  %9 = phi i8* [ %6, %5 ], [ null, %3 ]
  %10 = icmp eq i8* %1, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %8
  %12 = tail call i8* @OPENSSL_strdup(i8* nonnull %1) #11
  %13 = icmp eq i8* %12, null
  br i1 %13, label %38, label %14

14:                                               ; preds = %11, %8
  %15 = phi i8* [ %12, %11 ], [ null, %8 ]
  %16 = tail call %struct.conf_value_st* @CONF_VALUE_new() #11
  %17 = icmp eq %struct.conf_value_st* %16, null
  br i1 %17, label %38, label %18

18:                                               ; preds = %14
  %19 = load %struct.stack_st_CONF_VALUE*, %struct.stack_st_CONF_VALUE** %2, align 8
  %20 = icmp eq %struct.stack_st_CONF_VALUE* %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %18
  %22 = bitcast %struct.stack_st_CONF_VALUE** %2 to %struct.stack_st**
  br label %29

23:                                               ; preds = %18
  %24 = tail call %struct.stack_st* @sk_new_null() #11
  %25 = bitcast %struct.stack_st_CONF_VALUE** %2 to %struct.stack_st**
  store %struct.stack_st* %24, %struct.stack_st** %25, align 8
  %26 = icmp eq %struct.stack_st* %24, null
  br i1 %26, label %27, label %29

27:                                               ; preds = %23
  %28 = bitcast %struct.conf_value_st* %16 to i8*
  br label %41

29:                                               ; preds = %21, %23
  %30 = phi %struct.stack_st** [ %22, %21 ], [ %25, %23 ]
  %31 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %16, i64 0, i32 0
  store i8* null, i8** %31, align 8
  %32 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %16, i64 0, i32 1
  store i8* %9, i8** %32, align 8
  %33 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %16, i64 0, i32 2
  store i8* %15, i8** %33, align 8
  %34 = load %struct.stack_st*, %struct.stack_st** %30, align 8
  %35 = bitcast %struct.conf_value_st* %16 to i8*
  %36 = tail call i64 @sk_push(%struct.stack_st* %34, i8* nonnull %35) #11
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %51

38:                                               ; preds = %14, %11, %5
  %39 = phi i8* [ null, %5 ], [ %9, %11 ], [ %9, %14 ]
  %40 = phi i8* [ null, %5 ], [ null, %11 ], [ %15, %14 ]
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 111) #11
  br label %43

41:                                               ; preds = %27, %29
  %42 = phi i8* [ %28, %27 ], [ %35, %29 ]
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 111) #11
  tail call void @OPENSSL_free(i8* nonnull %42) #11
  br label %43

43:                                               ; preds = %38, %41
  %44 = phi i8* [ %40, %38 ], [ %15, %41 ]
  %45 = phi i8* [ %39, %38 ], [ %9, %41 ]
  %46 = icmp eq i8* %45, null
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  tail call void @OPENSSL_free(i8* nonnull %45) #11
  br label %48

48:                                               ; preds = %43, %47
  %49 = icmp eq i8* %44, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %48
  tail call void @OPENSSL_free(i8* nonnull %44) #11
  br label %51

51:                                               ; preds = %50, %48, %29
  %52 = phi i32 [ 1, %29 ], [ 0, %48 ], [ 0, %50 ]
  ret i32 %52
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @OPENSSL_strdup(i8*) local_unnamed_addr #2

declare %struct.conf_value_st* @CONF_VALUE_new() local_unnamed_addr #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_add_value_uchar(i8*, i8*, %struct.stack_st_CONF_VALUE** nocapture) local_unnamed_addr #0 {
  %4 = tail call i32 @X509V3_add_value(i8* %0, i8* %1, %struct.stack_st_CONF_VALUE** %2)
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @X509V3_conf_free(%struct.conf_value_st*) #0 {
  %2 = icmp eq %struct.conf_value_st* %0, null
  br i1 %2, label %20, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @OPENSSL_free(i8* nonnull %5) #11
  br label %8

8:                                                ; preds = %3, %7
  %9 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void @OPENSSL_free(i8* nonnull %10) #11
  br label %13

13:                                               ; preds = %8, %12
  %14 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %13
  tail call void @OPENSSL_free(i8* nonnull %15) #11
  br label %18

18:                                               ; preds = %13, %17
  %19 = bitcast %struct.conf_value_st* %0 to i8*
  tail call void @OPENSSL_free(i8* nonnull %19) #11
  br label %20

20:                                               ; preds = %1, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_add_value_bool(i8*, i32, %struct.stack_st_CONF_VALUE** nocapture) local_unnamed_addr #0 {
  %4 = icmp eq i32 %1, 0
  %5 = select i1 %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)
  %6 = tail call i32 @X509V3_add_value(i8* %0, i8* %5, %struct.stack_st_CONF_VALUE** %2)
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_add_value_bool_nf(i8*, i32, %struct.stack_st_CONF_VALUE** nocapture) local_unnamed_addr #0 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %3
  %6 = tail call i32 @X509V3_add_value(i8* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), %struct.stack_st_CONF_VALUE** %2)
  br label %7

7:                                                ; preds = %3, %5
  %8 = phi i32 [ %6, %5 ], [ 1, %3 ]
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @i2s_ASN1_ENUMERATED(%struct.v3_ext_method* nocapture readnone, %struct.asn1_string_st*) local_unnamed_addr #0 {
  %3 = icmp eq %struct.asn1_string_st* %1, null
  br i1 %3, label %13, label %4

4:                                                ; preds = %2
  %5 = tail call %struct.bignum_st* @ASN1_ENUMERATED_to_BN(%struct.asn1_string_st* nonnull %1, %struct.bignum_st* null) #11
  %6 = icmp eq %struct.bignum_st* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call fastcc i8* @bignum_to_string(%struct.bignum_st* nonnull %5)
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %7, %4
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 205) #11
  br label %11

11:                                               ; preds = %7, %10
  %12 = phi i8* [ %8, %7 ], [ null, %10 ]
  tail call void @BN_free(%struct.bignum_st* %5) #11
  br label %13

13:                                               ; preds = %2, %11
  %14 = phi i8* [ %12, %11 ], [ null, %2 ]
  ret i8* %14
}

declare %struct.bignum_st* @ASN1_ENUMERATED_to_BN(%struct.asn1_string_st*, %struct.bignum_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @bignum_to_string(%struct.bignum_st*) unnamed_addr #0 {
  %2 = tail call i32 @BN_num_bits(%struct.bignum_st* %0) #11
  %3 = icmp ult i32 %2, 32
  br i1 %3, label %4, label %6

4:                                                ; preds = %1
  %5 = tail call i8* @BN_bn2dec(%struct.bignum_st* %0) #11
  br label %26

6:                                                ; preds = %1
  %7 = tail call i8* @BN_bn2hex(%struct.bignum_st* %0) #11
  %8 = icmp eq i8* %7, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %6
  %10 = tail call i64 @strlen(i8* nonnull %7) #12
  %11 = add i64 %10, 3
  %12 = tail call i8* @OPENSSL_malloc(i64 %11) #11
  %13 = icmp eq i8* %12, null
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 180) #11
  tail call void @OPENSSL_free(i8* nonnull %7) #11
  br label %26

15:                                               ; preds = %9
  %16 = load i8, i8* %7, align 1
  %17 = icmp eq i8 %16, 45
  br i1 %17, label %18, label %22

18:                                               ; preds = %15
  %19 = tail call i64 @OPENSSL_strlcpy(i8* nonnull %12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0), i64 %11) #11
  %20 = getelementptr inbounds i8, i8* %7, i64 1
  %21 = tail call i64 @OPENSSL_strlcat(i8* nonnull %12, i8* %20, i64 %11) #11
  br label %25

22:                                               ; preds = %15
  %23 = tail call i64 @OPENSSL_strlcpy(i8* nonnull %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0), i64 %11) #11
  %24 = tail call i64 @OPENSSL_strlcat(i8* nonnull %12, i8* nonnull %7, i64 %11) #11
  br label %25

25:                                               ; preds = %22, %18
  tail call void @OPENSSL_free(i8* nonnull %7) #11
  br label %26

26:                                               ; preds = %6, %25, %14, %4
  %27 = phi i8* [ %5, %4 ], [ null, %14 ], [ %12, %25 ], [ null, %6 ]
  ret i8* %27
}

declare void @BN_free(%struct.bignum_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i8* @i2s_ASN1_INTEGER(%struct.v3_ext_method* nocapture readnone, %struct.asn1_string_st*) local_unnamed_addr #0 {
  %3 = icmp eq %struct.asn1_string_st* %1, null
  br i1 %3, label %13, label %4

4:                                                ; preds = %2
  %5 = tail call %struct.bignum_st* @ASN1_INTEGER_to_BN(%struct.asn1_string_st* nonnull %1, %struct.bignum_st* null) #11
  %6 = icmp eq %struct.bignum_st* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call fastcc i8* @bignum_to_string(%struct.bignum_st* nonnull %5)
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %7, %4
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 218) #11
  br label %11

11:                                               ; preds = %7, %10
  %12 = phi i8* [ %8, %7 ], [ null, %10 ]
  tail call void @BN_free(%struct.bignum_st* %5) #11
  br label %13

13:                                               ; preds = %2, %11
  %14 = phi i8* [ %12, %11 ], [ null, %2 ]
  ret i8* %14
}

declare %struct.bignum_st* @ASN1_INTEGER_to_BN(%struct.asn1_string_st*, %struct.bignum_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @s2i_ASN1_INTEGER(%struct.v3_ext_method* nocapture readnone, i8*) local_unnamed_addr #0 {
  %3 = alloca %struct.bignum_st*, align 8
  %4 = bitcast %struct.bignum_st** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #11
  store %struct.bignum_st* null, %struct.bignum_st** %3, align 8
  %5 = icmp eq i8* %1, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  tail call void @ERR_put_error(i32 20, i32 0, i32 126, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 230) #11
  br label %53

7:                                                ; preds = %2
  %8 = tail call %struct.bignum_st* @BN_new() #11
  store %struct.bignum_st* %8, %struct.bignum_st** %3, align 8
  %9 = load i8, i8* %1, align 1
  %10 = icmp eq i8 %9, 45
  %11 = getelementptr inbounds i8, i8* %1, i64 1
  %12 = select i1 %10, i8* %11, i8* %1
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 48
  br i1 %14, label %15, label %21

15:                                               ; preds = %7
  %16 = getelementptr inbounds i8, i8* %12, i64 1
  %17 = load i8, i8* %16, align 1
  switch i8 %17, label %21 [
    i8 120, label %18
    i8 88, label %18
  ]

18:                                               ; preds = %15, %15
  %19 = getelementptr inbounds i8, i8* %12, i64 2
  %20 = call i32 @BN_hex2bn(%struct.bignum_st** nonnull %3, i8* %19) #11
  br label %23

21:                                               ; preds = %15, %7
  %22 = call i32 @BN_dec2bn(%struct.bignum_st** nonnull %3, i8* %12) #11
  br label %23

23:                                               ; preds = %21, %18
  %24 = phi i8* [ %19, %18 ], [ %12, %21 ]
  %25 = phi i32 [ %20, %18 ], [ %22, %21 ]
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = sext i32 %25 to i64
  %29 = getelementptr inbounds i8, i8* %24, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %34, label %32

32:                                               ; preds = %27, %23
  %33 = load %struct.bignum_st*, %struct.bignum_st** %3, align 8
  call void @BN_free(%struct.bignum_st* %33) #11
  call void @ERR_put_error(i32 20, i32 0, i32 102, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 253) #11
  br label %53

34:                                               ; preds = %27
  br i1 %10, label %35, label %40

35:                                               ; preds = %34
  %36 = load %struct.bignum_st*, %struct.bignum_st** %3, align 8
  %37 = call i32 @BN_is_zero(%struct.bignum_st* %36) #11
  %38 = icmp eq i32 %37, 0
  %39 = zext i1 %38 to i32
  br label %40

40:                                               ; preds = %34, %35
  %41 = phi i32 [ 0, %34 ], [ %39, %35 ]
  %42 = load %struct.bignum_st*, %struct.bignum_st** %3, align 8
  %43 = call %struct.asn1_string_st* @BN_to_ASN1_INTEGER(%struct.bignum_st* %42, %struct.asn1_string_st* null) #11
  %44 = load %struct.bignum_st*, %struct.bignum_st** %3, align 8
  call void @BN_free(%struct.bignum_st* %44) #11
  %45 = icmp eq %struct.asn1_string_st* %43, null
  br i1 %45, label %46, label %47

46:                                               ; preds = %40
  call void @ERR_put_error(i32 20, i32 0, i32 103, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 263) #11
  br label %53

47:                                               ; preds = %40
  %48 = icmp eq i32 %41, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %47
  %50 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %43, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = or i32 %51, 256
  store i32 %52, i32* %50, align 4
  br label %53

53:                                               ; preds = %49, %47, %46, %32, %6
  %54 = phi %struct.asn1_string_st* [ null, %32 ], [ null, %46 ], [ null, %6 ], [ %43, %47 ], [ %43, %49 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #11
  ret %struct.asn1_string_st* %54
}

declare %struct.bignum_st* @BN_new() local_unnamed_addr #2

declare i32 @BN_hex2bn(%struct.bignum_st**, i8*) local_unnamed_addr #2

declare i32 @BN_dec2bn(%struct.bignum_st**, i8*) local_unnamed_addr #2

declare i32 @BN_is_zero(%struct.bignum_st*) local_unnamed_addr #2

declare %struct.asn1_string_st* @BN_to_ASN1_INTEGER(%struct.bignum_st*, %struct.asn1_string_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_add_value_int(i8*, %struct.asn1_string_st*, %struct.stack_st_CONF_VALUE** nocapture) local_unnamed_addr #0 {
  %4 = icmp eq %struct.asn1_string_st* %1, null
  br i1 %4, label %14, label %5

5:                                                ; preds = %3
  %6 = tail call %struct.bignum_st* @ASN1_INTEGER_to_BN(%struct.asn1_string_st* nonnull %1, %struct.bignum_st* null) #11
  %7 = icmp eq %struct.bignum_st* %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %5
  %9 = tail call fastcc i8* @bignum_to_string(%struct.bignum_st* nonnull %6) #11
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %12

11:                                               ; preds = %5, %8
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 218) #11
  tail call void @BN_free(%struct.bignum_st* %6) #11
  br label %14

12:                                               ; preds = %8
  tail call void @BN_free(%struct.bignum_st* nonnull %6) #11
  %13 = tail call i32 @X509V3_add_value(i8* %0, i8* nonnull %9, %struct.stack_st_CONF_VALUE** %2)
  tail call void @OPENSSL_free(i8* nonnull %9) #11
  br label %14

14:                                               ; preds = %11, %3, %12
  %15 = phi i32 [ %13, %12 ], [ 1, %3 ], [ 0, %11 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_get_value_bool(%struct.conf_value_st* nocapture readonly, i32* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %44, label %6

6:                                                ; preds = %2
  %7 = tail call i32 @strcmp(i8* nonnull %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)) #12
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %24, label %9

9:                                                ; preds = %6
  %10 = tail call i32 @strcmp(i8* nonnull %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #12
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %9
  %13 = tail call i32 @strcmp(i8* nonnull %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #12
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %24, label %15

15:                                               ; preds = %12
  %16 = tail call i32 @strcmp(i8* nonnull %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)) #12
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %15
  %19 = tail call i32 @strcmp(i8* nonnull %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0)) #12
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %18
  %22 = tail call i32 @strcmp(i8* nonnull %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0)) #12
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %21, %18, %15, %12, %9, %6
  store i32 255, i32* %1, align 4
  br label %50

25:                                               ; preds = %21
  %26 = tail call i32 @strcmp(i8* nonnull %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)) #12
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %43, label %28

28:                                               ; preds = %25
  %29 = tail call i32 @strcmp(i8* nonnull %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0)) #12
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %43, label %31

31:                                               ; preds = %28
  %32 = tail call i32 @strcmp(i8* nonnull %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)) #12
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %43, label %34

34:                                               ; preds = %31
  %35 = tail call i32 @strcmp(i8* nonnull %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #12
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %43, label %37

37:                                               ; preds = %34
  %38 = tail call i32 @strcmp(i8* nonnull %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0)) #12
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %37
  %41 = tail call i32 @strcmp(i8* nonnull %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0)) #12
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %40, %37, %34, %31, %28, %25
  store i32 0, i32* %1, align 4
  br label %50

44:                                               ; preds = %40, %2
  tail call void @ERR_put_error(i32 20, i32 0, i32 120, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 302) #11
  %45 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 1
  %48 = load i8*, i8** %47, align 8
  %49 = load i8*, i8** %3, align 8
  tail call void (i32, ...) @ERR_add_error_data(i32 6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i64 0, i64 0), i8* %46, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i64 0, i64 0), i8* %48, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i64 0, i64 0), i8* %49) #11
  br label %50

50:                                               ; preds = %44, %43, %24
  %51 = phi i32 [ 0, %44 ], [ 1, %43 ], [ 1, %24 ]
  ret i32 %51
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #3

declare void @ERR_add_error_data(i32, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_get_value_int(%struct.conf_value_st* nocapture readonly, %struct.asn1_string_st** nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = tail call %struct.asn1_string_st* @s2i_ASN1_INTEGER(%struct.v3_ext_method* undef, i8* %4)
  %6 = icmp eq %struct.asn1_string_st* %5, null
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = load i8*, i8** %3, align 8
  tail call void (i32, ...) @ERR_add_error_data(i32 6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i64 0, i64 0), i8* %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i64 0, i64 0), i8* %11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i64 0, i64 0), i8* %12) #11
  br label %14

13:                                               ; preds = %2
  store %struct.asn1_string_st* %5, %struct.asn1_string_st** %1, align 8
  br label %14

14:                                               ; preds = %13, %7
  %15 = phi i32 [ 1, %13 ], [ 0, %7 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_CONF_VALUE* @X509V3_parse_list(i8*) local_unnamed_addr #0 {
  %2 = alloca %struct.stack_st_CONF_VALUE*, align 8
  %3 = bitcast %struct.stack_st_CONF_VALUE** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #11
  store %struct.stack_st_CONF_VALUE* null, %struct.stack_st_CONF_VALUE** %2, align 8
  %4 = tail call i8* @OPENSSL_strdup(i8* %0) #11
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 335) #11
  br label %202

7:                                                ; preds = %1, %145
  %8 = phi i8* [ %149, %145 ], [ %4, %1 ]
  %9 = phi i8* [ %146, %145 ], [ %4, %1 ]
  %10 = phi i8* [ %147, %145 ], [ null, %1 ]
  %11 = phi i32 [ %148, %145 ], [ 1, %1 ]
  %12 = load i8, i8* %8, align 1
  switch i8 %12, label %13 [
    i8 0, label %150
    i8 13, label %150
    i8 10, label %150
  ]

13:                                               ; preds = %7
  switch i32 %11, label %145 [
    i32 1, label %14
    i32 2, label %100
  ]

14:                                               ; preds = %13
  switch i8 %12, label %145 [
    i8 58, label %15
    i8 44, label %57
  ]

15:                                               ; preds = %14
  store i8 0, i8* %8, align 1
  %16 = load i8, i8* %9, align 1
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %54, label %18

18:                                               ; preds = %15
  %19 = tail call i16** @__ctype_b_loc() #13
  %20 = load i16*, i16** %19, align 8
  br label %21

21:                                               ; preds = %29, %18
  %22 = phi i8 [ %16, %18 ], [ %31, %29 ]
  %23 = phi i8* [ %9, %18 ], [ %30, %29 ]
  %24 = zext i8 %22 to i64
  %25 = getelementptr inbounds i16, i16* %20, i64 %24
  %26 = load i16, i16* %25, align 2
  %27 = and i16 %26, 8192
  %28 = icmp eq i16 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %21
  %30 = getelementptr inbounds i8, i8* %23, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %54, label %21

33:                                               ; preds = %21
  %34 = tail call i64 @strlen(i8* %23) #12
  %35 = getelementptr inbounds i8, i8* %23, i64 %34
  br label %36

36:                                               ; preds = %40, %33
  %37 = phi i8* [ %35, %33 ], [ %38, %40 ]
  %38 = getelementptr inbounds i8, i8* %37, i64 -1
  %39 = icmp eq i8* %38, %23
  br i1 %39, label %49, label %40

40:                                               ; preds = %36
  %41 = load i8, i8* %38, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds i16, i16* %20, i64 %42
  %44 = load i16, i16* %43, align 2
  %45 = and i16 %44, 8192
  %46 = icmp eq i16 %45, 0
  br i1 %46, label %47, label %36

47:                                               ; preds = %40
  store i8 0, i8* %37, align 1
  %48 = load i8, i8* %23, align 1
  br label %49

49:                                               ; preds = %36, %47
  %50 = phi i8 [ %48, %47 ], [ %22, %36 ]
  %51 = icmp eq i8 %50, 0
  %52 = icmp eq i8* %23, null
  %53 = or i1 %52, %51
  br i1 %53, label %54, label %55

54:                                               ; preds = %49, %15, %29
  tail call void @ERR_put_error(i32 20, i32 0, i32 125, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 351) #11
  br label %202

55:                                               ; preds = %49
  %56 = getelementptr inbounds i8, i8* %8, i64 1
  br label %145

57:                                               ; preds = %14
  store i8 0, i8* %8, align 1
  %58 = load i8, i8* %9, align 1
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %96, label %60

60:                                               ; preds = %57
  %61 = tail call i16** @__ctype_b_loc() #13
  %62 = load i16*, i16** %61, align 8
  br label %63

63:                                               ; preds = %71, %60
  %64 = phi i8 [ %58, %60 ], [ %73, %71 ]
  %65 = phi i8* [ %9, %60 ], [ %72, %71 ]
  %66 = zext i8 %64 to i64
  %67 = getelementptr inbounds i16, i16* %62, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = and i16 %68, 8192
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %75, label %71

71:                                               ; preds = %63
  %72 = getelementptr inbounds i8, i8* %65, i64 1
  %73 = load i8, i8* %72, align 1
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %96, label %63

75:                                               ; preds = %63
  %76 = tail call i64 @strlen(i8* %65) #12
  %77 = getelementptr inbounds i8, i8* %65, i64 %76
  br label %78

78:                                               ; preds = %82, %75
  %79 = phi i8* [ %77, %75 ], [ %80, %82 ]
  %80 = getelementptr inbounds i8, i8* %79, i64 -1
  %81 = icmp eq i8* %80, %65
  br i1 %81, label %91, label %82

82:                                               ; preds = %78
  %83 = load i8, i8* %80, align 1
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds i16, i16* %62, i64 %84
  %86 = load i16, i16* %85, align 2
  %87 = and i16 %86, 8192
  %88 = icmp eq i16 %87, 0
  br i1 %88, label %89, label %78

89:                                               ; preds = %82
  store i8 0, i8* %79, align 1
  %90 = load i8, i8* %65, align 1
  br label %91

91:                                               ; preds = %78, %89
  %92 = phi i8 [ %90, %89 ], [ %64, %78 ]
  %93 = icmp eq i8 %92, 0
  %94 = icmp eq i8* %65, null
  %95 = or i1 %94, %93
  br i1 %95, label %96, label %97

96:                                               ; preds = %91, %57, %71
  tail call void @ERR_put_error(i32 20, i32 0, i32 125, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 363) #11
  br label %202

97:                                               ; preds = %91
  %98 = getelementptr inbounds i8, i8* %8, i64 1
  %99 = call i32 @X509V3_add_value(i8* nonnull %65, i8* null, %struct.stack_st_CONF_VALUE** nonnull %2)
  br label %145

100:                                              ; preds = %13
  %101 = icmp eq i8 %12, 44
  br i1 %101, label %102, label %145

102:                                              ; preds = %100
  store i8 0, i8* %8, align 1
  %103 = load i8, i8* %9, align 1
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %141, label %105

105:                                              ; preds = %102
  %106 = tail call i16** @__ctype_b_loc() #13
  %107 = load i16*, i16** %106, align 8
  br label %108

108:                                              ; preds = %116, %105
  %109 = phi i8 [ %103, %105 ], [ %118, %116 ]
  %110 = phi i8* [ %9, %105 ], [ %117, %116 ]
  %111 = zext i8 %109 to i64
  %112 = getelementptr inbounds i16, i16* %107, i64 %111
  %113 = load i16, i16* %112, align 2
  %114 = and i16 %113, 8192
  %115 = icmp eq i16 %114, 0
  br i1 %115, label %120, label %116

116:                                              ; preds = %108
  %117 = getelementptr inbounds i8, i8* %110, i64 1
  %118 = load i8, i8* %117, align 1
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %141, label %108

120:                                              ; preds = %108
  %121 = tail call i64 @strlen(i8* %110) #12
  %122 = getelementptr inbounds i8, i8* %110, i64 %121
  br label %123

123:                                              ; preds = %127, %120
  %124 = phi i8* [ %122, %120 ], [ %125, %127 ]
  %125 = getelementptr inbounds i8, i8* %124, i64 -1
  %126 = icmp eq i8* %125, %110
  br i1 %126, label %136, label %127

127:                                              ; preds = %123
  %128 = load i8, i8* %125, align 1
  %129 = zext i8 %128 to i64
  %130 = getelementptr inbounds i16, i16* %107, i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = and i16 %131, 8192
  %133 = icmp eq i16 %132, 0
  br i1 %133, label %134, label %123

134:                                              ; preds = %127
  store i8 0, i8* %124, align 1
  %135 = load i8, i8* %110, align 1
  br label %136

136:                                              ; preds = %123, %134
  %137 = phi i8 [ %135, %134 ], [ %109, %123 ]
  %138 = icmp eq i8 %137, 0
  %139 = icmp eq i8* %110, null
  %140 = or i1 %139, %138
  br i1 %140, label %141, label %142

141:                                              ; preds = %136, %102, %116
  tail call void @ERR_put_error(i32 20, i32 0, i32 126, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 379) #11
  br label %202

142:                                              ; preds = %136
  %143 = call i32 @X509V3_add_value(i8* %10, i8* nonnull %110, %struct.stack_st_CONF_VALUE** nonnull %2)
  %144 = getelementptr inbounds i8, i8* %8, i64 1
  br label %145

145:                                              ; preds = %14, %13, %97, %55, %142, %100
  %146 = phi i8* [ %9, %13 ], [ %144, %142 ], [ %9, %100 ], [ %56, %55 ], [ %98, %97 ], [ %9, %14 ]
  %147 = phi i8* [ %10, %13 ], [ null, %142 ], [ %10, %100 ], [ %23, %55 ], [ %65, %97 ], [ %10, %14 ]
  %148 = phi i32 [ %11, %13 ], [ 1, %142 ], [ 2, %100 ], [ 2, %55 ], [ 1, %97 ], [ 1, %14 ]
  %149 = getelementptr inbounds i8, i8* %8, i64 1
  br label %7

150:                                              ; preds = %7, %7, %7
  %151 = icmp eq i32 %11, 2
  %152 = load i8, i8* %9, align 1
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %189, label %154

154:                                              ; preds = %150
  %155 = tail call i16** @__ctype_b_loc() #13
  %156 = load i16*, i16** %155, align 8
  br label %157

157:                                              ; preds = %165, %154
  %158 = phi i8 [ %152, %154 ], [ %167, %165 ]
  %159 = phi i8* [ %9, %154 ], [ %166, %165 ]
  %160 = zext i8 %158 to i64
  %161 = getelementptr inbounds i16, i16* %156, i64 %160
  %162 = load i16, i16* %161, align 2
  %163 = and i16 %162, 8192
  %164 = icmp eq i16 %163, 0
  br i1 %164, label %169, label %165

165:                                              ; preds = %157
  %166 = getelementptr inbounds i8, i8* %159, i64 1
  %167 = load i8, i8* %166, align 1
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %189, label %157

169:                                              ; preds = %157
  %170 = tail call i64 @strlen(i8* %159) #12
  %171 = getelementptr inbounds i8, i8* %159, i64 %170
  br label %172

172:                                              ; preds = %176, %169
  %173 = phi i8* [ %171, %169 ], [ %174, %176 ]
  %174 = getelementptr inbounds i8, i8* %173, i64 -1
  %175 = icmp eq i8* %174, %159
  br i1 %175, label %185, label %176

176:                                              ; preds = %172
  %177 = load i8, i8* %174, align 1
  %178 = zext i8 %177 to i64
  %179 = getelementptr inbounds i16, i16* %156, i64 %178
  %180 = load i16, i16* %179, align 2
  %181 = and i16 %180, 8192
  %182 = icmp eq i16 %181, 0
  br i1 %182, label %183, label %172

183:                                              ; preds = %176
  store i8 0, i8* %173, align 1
  %184 = load i8, i8* %159, align 1
  br label %185

185:                                              ; preds = %172, %183
  %186 = phi i8 [ %184, %183 ], [ %158, %172 ]
  %187 = icmp eq i8 %186, 0
  %188 = select i1 %187, i8* null, i8* %159
  br label %189

189:                                              ; preds = %165, %150, %185
  %190 = phi i8* [ %188, %185 ], [ null, %150 ], [ null, %165 ]
  %191 = icmp eq i8* %190, null
  br i1 %151, label %192, label %196

192:                                              ; preds = %189
  br i1 %191, label %193, label %194

193:                                              ; preds = %192
  tail call void @ERR_put_error(i32 20, i32 0, i32 126, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 396) #11
  br label %202

194:                                              ; preds = %192
  %195 = call i32 @X509V3_add_value(i8* %10, i8* nonnull %190, %struct.stack_st_CONF_VALUE** nonnull %2)
  br label %200

196:                                              ; preds = %189
  br i1 %191, label %197, label %198

197:                                              ; preds = %196
  tail call void @ERR_put_error(i32 20, i32 0, i32 125, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 406) #11
  br label %202

198:                                              ; preds = %196
  %199 = call i32 @X509V3_add_value(i8* nonnull %190, i8* null, %struct.stack_st_CONF_VALUE** nonnull %2)
  br label %200

200:                                              ; preds = %198, %194
  tail call void @OPENSSL_free(i8* nonnull %4) #11
  %201 = load %struct.stack_st_CONF_VALUE*, %struct.stack_st_CONF_VALUE** %2, align 8
  br label %205

202:                                              ; preds = %197, %193, %141, %96, %54, %6
  tail call void @OPENSSL_free(i8* %4) #11
  %203 = bitcast %struct.stack_st_CONF_VALUE** %2 to %struct.stack_st**
  %204 = load %struct.stack_st*, %struct.stack_st** %203, align 8
  tail call void @sk_pop_free_ex(%struct.stack_st* %204, void (void (i8*)*, i8*)* nonnull @sk_CONF_VALUE_call_free_func, void (i8*)* bitcast (void (%struct.conf_value_st*)* @X509V3_conf_free to void (i8*)*)) #11
  br label %205

205:                                              ; preds = %202, %200
  %206 = phi %struct.stack_st_CONF_VALUE* [ null, %202 ], [ %201, %200 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #11
  ret %struct.stack_st_CONF_VALUE* %206
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @x509v3_bytes_to_hex(i8* readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ne i8* %0, null
  %4 = icmp ne i64 %1, 0
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %75

6:                                                ; preds = %2
  %7 = mul nsw i64 %1, 3
  %8 = add nsw i64 %7, 1
  %9 = tail call i8* @OPENSSL_malloc(i64 %8) #11
  %10 = icmp eq i8* %9, null
  br i1 %10, label %18, label %11

11:                                               ; preds = %6
  %12 = icmp sgt i64 %1, 0
  br i1 %12, label %13, label %72

13:                                               ; preds = %11
  %14 = and i64 %1, 1
  %15 = icmp eq i64 %1, 1
  br i1 %15, label %53, label %16

16:                                               ; preds = %13
  %17 = sub i64 %1, %14
  br label %19

18:                                               ; preds = %6
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 458) #11
  br label %75

19:                                               ; preds = %19, %16
  %20 = phi i8* [ %0, %16 ], [ %50, %19 ]
  %21 = phi i8* [ %9, %16 ], [ %49, %19 ]
  %22 = phi i64 [ %17, %16 ], [ %51, %19 ]
  %23 = load i8, i8* %20, align 1
  %24 = lshr i8 %23, 4
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds [17 x i8], [17 x i8]* @x509v3_bytes_to_hex.hexdig, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %21, i64 1
  store i8 %27, i8* %21, align 1
  %29 = load i8, i8* %20, align 1
  %30 = and i8 %29, 15
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [17 x i8], [17 x i8]* @x509v3_bytes_to_hex.hexdig, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %21, i64 2
  store i8 %33, i8* %28, align 1
  %35 = getelementptr inbounds i8, i8* %21, i64 3
  store i8 58, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %20, i64 1
  %37 = load i8, i8* %36, align 1
  %38 = lshr i8 %37, 4
  %39 = zext i8 %38 to i64
  %40 = getelementptr inbounds [17 x i8], [17 x i8]* @x509v3_bytes_to_hex.hexdig, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds i8, i8* %21, i64 4
  store i8 %41, i8* %35, align 1
  %43 = load i8, i8* %36, align 1
  %44 = and i8 %43, 15
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [17 x i8], [17 x i8]* @x509v3_bytes_to_hex.hexdig, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds i8, i8* %21, i64 5
  store i8 %47, i8* %42, align 1
  %49 = getelementptr inbounds i8, i8* %21, i64 6
  store i8 58, i8* %48, align 1
  %50 = getelementptr inbounds i8, i8* %20, i64 2
  %51 = add i64 %22, -2
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %19

53:                                               ; preds = %19, %13
  %54 = phi i8* [ undef, %13 ], [ %49, %19 ]
  %55 = phi i8* [ %0, %13 ], [ %50, %19 ]
  %56 = phi i8* [ %9, %13 ], [ %49, %19 ]
  %57 = icmp eq i64 %14, 0
  br i1 %57, label %72, label %58

58:                                               ; preds = %53
  %59 = load i8, i8* %55, align 1
  %60 = lshr i8 %59, 4
  %61 = zext i8 %60 to i64
  %62 = getelementptr inbounds [17 x i8], [17 x i8]* @x509v3_bytes_to_hex.hexdig, i64 0, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds i8, i8* %56, i64 1
  store i8 %63, i8* %56, align 1
  %65 = load i8, i8* %55, align 1
  %66 = and i8 %65, 15
  %67 = zext i8 %66 to i64
  %68 = getelementptr inbounds [17 x i8], [17 x i8]* @x509v3_bytes_to_hex.hexdig, i64 0, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds i8, i8* %56, i64 2
  store i8 %69, i8* %64, align 1
  store i8 58, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %56, i64 3
  br label %72

72:                                               ; preds = %58, %53, %11
  %73 = phi i8* [ %9, %11 ], [ %54, %53 ], [ %71, %58 ]
  %74 = getelementptr inbounds i8, i8* %73, i64 -1
  store i8 0, i8* %74, align 1
  br label %75

75:                                               ; preds = %2, %72, %18
  %76 = phi i8* [ %9, %72 ], [ null, %18 ], [ null, %2 ]
  ret i8* %76
}

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i8* @x509v3_hex_to_bytes(i8* readonly, i64*) local_unnamed_addr #0 {
  %3 = icmp eq i8* %0, null
  br i1 %3, label %4, label %5

4:                                                ; preds = %2
  tail call void @ERR_put_error(i32 20, i32 0, i32 124, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 477) #11
  br label %65

5:                                                ; preds = %2
  %6 = tail call i64 @strlen(i8* nonnull %0) #12
  %7 = lshr i64 %6, 1
  %8 = tail call i8* @OPENSSL_malloc(i64 %7) #11
  %9 = icmp eq i8* %8, null
  br i1 %9, label %63, label %10

10:                                               ; preds = %5, %52
  %11 = phi i8* [ %56, %52 ], [ %8, %5 ]
  %12 = phi i8* [ %21, %52 ], [ %0, %5 ]
  br label %13

13:                                               ; preds = %10, %17
  %14 = phi i8* [ %18, %17 ], [ %12, %10 ]
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %57, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds i8, i8* %14, i64 1
  %19 = icmp eq i8 %15, 58
  br i1 %19, label %13, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds i8, i8* %14, i64 2
  %22 = load i8, i8* %18, align 1
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %20
  tail call void @ERR_put_error(i32 20, i32 0, i32 146, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 488) #11
  tail call void @OPENSSL_free(i8* nonnull %8) #11
  br label %65

25:                                               ; preds = %20
  %26 = add i8 %15, -48
  %27 = icmp ult i8 %26, 10
  br i1 %27, label %38, label %28

28:                                               ; preds = %25
  %29 = add i8 %15, -97
  %30 = icmp ult i8 %29, 6
  br i1 %30, label %31, label %33

31:                                               ; preds = %28
  %32 = add nsw i8 %15, -87
  br label %38

33:                                               ; preds = %28
  %34 = add i8 %15, -65
  %35 = icmp ult i8 %34, 6
  br i1 %35, label %36, label %64

36:                                               ; preds = %33
  %37 = add nsw i8 %15, -55
  br label %38

38:                                               ; preds = %25, %31, %36
  %39 = phi i8 [ %32, %31 ], [ %37, %36 ], [ %26, %25 ]
  %40 = add i8 %22, -48
  %41 = icmp ult i8 %40, 10
  br i1 %41, label %52, label %42

42:                                               ; preds = %38
  %43 = add i8 %22, -97
  %44 = icmp ult i8 %43, 6
  br i1 %44, label %45, label %47

45:                                               ; preds = %42
  %46 = add nsw i8 %22, -87
  br label %52

47:                                               ; preds = %42
  %48 = add i8 %22, -65
  %49 = icmp ult i8 %48, 6
  br i1 %49, label %50, label %64

50:                                               ; preds = %47
  %51 = add nsw i8 %22, -55
  br label %52

52:                                               ; preds = %38, %45, %50
  %53 = phi i8 [ %46, %45 ], [ %51, %50 ], [ %40, %38 ]
  %54 = shl i8 %39, 4
  %55 = or i8 %53, %54
  %56 = getelementptr inbounds i8, i8* %11, i64 1
  store i8 %55, i8* %11, align 1
  br label %10

57:                                               ; preds = %13
  %58 = icmp eq i64* %1, null
  br i1 %58, label %65, label %59

59:                                               ; preds = %57
  %60 = ptrtoint i8* %11 to i64
  %61 = ptrtoint i8* %8 to i64
  %62 = sub i64 %60, %61
  store i64 %62, i64* %1, align 8
  br label %65

63:                                               ; preds = %5
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 522) #11
  br label %65

64:                                               ; preds = %47, %33
  tail call void @OPENSSL_free(i8* nonnull %8) #11
  tail call void @ERR_put_error(i32 20, i32 0, i32 118, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 527) #11
  br label %65

65:                                               ; preds = %59, %57, %64, %63, %24, %4
  %66 = phi i8* [ null, %64 ], [ null, %24 ], [ null, %63 ], [ null, %4 ], [ %8, %57 ], [ %8, %59 ]
  ret i8* %66
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @x509v3_name_cmp(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #5 {
  %3 = tail call i64 @strlen(i8* %1) #12
  %4 = shl i64 %3, 32
  %5 = ashr exact i64 %4, 32
  %6 = tail call i32 @strncmp(i8* %0, i8* %1, i64 %5) #12
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %2
  %9 = getelementptr inbounds i8, i8* %0, i64 %5
  %10 = load i8, i8* %9, align 1
  switch i8 %10, label %11 [
    i8 0, label %12
    i8 46, label %12
  ]

11:                                               ; preds = %8
  br label %12

12:                                               ; preds = %8, %8, %2, %11
  %13 = phi i32 [ 1, %11 ], [ %6, %2 ], [ 0, %8 ], [ 0, %8 ]
  ret i32 %13
}

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_OPENSSL_STRING* @X509_get1_email(%struct.x509_st*) local_unnamed_addr #0 {
  %2 = tail call i8* @X509_get_ext_d2i(%struct.x509_st* %0, i32 85, i32* null, i32* null) #11
  %3 = bitcast i8* %2 to %struct.stack_st_GENERAL_NAME*
  %4 = tail call %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st* %0) #11
  %5 = tail call fastcc %struct.stack_st_OPENSSL_STRING* @get_email(%struct.X509_name_st* %4, %struct.stack_st_GENERAL_NAME* %3)
  %6 = bitcast %struct.stack_st_GENERAL_NAME* %3 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* %6, void (void (i8*)*, i8*)* nonnull @sk_GENERAL_NAME_call_free_func, void (i8*)* bitcast (void (%struct.GENERAL_NAME_st*)* @GENERAL_NAME_free to void (i8*)*)) #11
  ret %struct.stack_st_OPENSSL_STRING* %5
}

declare i8* @X509_get_ext_d2i(%struct.x509_st*, i32, i32*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.stack_st_OPENSSL_STRING* @get_email(%struct.X509_name_st*, %struct.stack_st_GENERAL_NAME*) unnamed_addr #0 {
  %3 = alloca %struct.stack_st_OPENSSL_STRING*, align 8
  %4 = bitcast %struct.stack_st_OPENSSL_STRING** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #11
  store %struct.stack_st_OPENSSL_STRING* null, %struct.stack_st_OPENSSL_STRING** %3, align 8
  br label %5

5:                                                ; preds = %13, %2
  %6 = phi i32 [ -1, %2 ], [ %7, %13 ]
  %7 = tail call i32 @X509_NAME_get_index_by_NID(%struct.X509_name_st* %0, i32 48, i32 %6) #11
  %8 = icmp sgt i32 %7, -1
  br i1 %8, label %13, label %9

9:                                                ; preds = %5
  %10 = bitcast %struct.stack_st_GENERAL_NAME* %1 to %struct.stack_st*
  %11 = tail call i64 @sk_num(%struct.stack_st* %10) #11
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %34, label %18

13:                                               ; preds = %5
  %14 = tail call %struct.X509_name_entry_st* @X509_NAME_get_entry(%struct.X509_name_st* %0, i32 %7) #11
  %15 = tail call %struct.asn1_string_st* @X509_NAME_ENTRY_get_data(%struct.X509_name_entry_st* %14) #11
  %16 = call fastcc i32 @append_ia5(%struct.stack_st_OPENSSL_STRING** nonnull %3, %struct.asn1_string_st* %15)
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %36, label %5

18:                                               ; preds = %9, %30
  %19 = phi i64 [ %31, %30 ], [ 0, %9 ]
  %20 = tail call i8* @sk_value(%struct.stack_st* %10, i64 %19) #11
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %30

24:                                               ; preds = %18
  %25 = getelementptr inbounds i8, i8* %20, i64 8
  %26 = bitcast i8* %25 to %struct.asn1_string_st**
  %27 = load %struct.asn1_string_st*, %struct.asn1_string_st** %26, align 8
  %28 = call fastcc i32 @append_ia5(%struct.stack_st_OPENSSL_STRING** nonnull %3, %struct.asn1_string_st* %27)
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %36, label %30

30:                                               ; preds = %24, %18
  %31 = add nuw i64 %19, 1
  %32 = tail call i64 @sk_num(%struct.stack_st* %10) #11
  %33 = icmp ult i64 %31, %32
  br i1 %33, label %18, label %34

34:                                               ; preds = %30, %9
  %35 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %3, align 8
  br label %36

36:                                               ; preds = %13, %24, %34
  %37 = phi %struct.stack_st_OPENSSL_STRING* [ %35, %34 ], [ null, %24 ], [ null, %13 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #11
  ret %struct.stack_st_OPENSSL_STRING* %37
}

declare %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st*) local_unnamed_addr #2

declare void @GENERAL_NAME_free(%struct.GENERAL_NAME_st*) #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_OPENSSL_STRING* @X509_get1_ocsp(%struct.x509_st*) local_unnamed_addr #0 {
  %2 = alloca %struct.stack_st_OPENSSL_STRING*, align 8
  %3 = bitcast %struct.stack_st_OPENSSL_STRING** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #11
  store %struct.stack_st_OPENSSL_STRING* null, %struct.stack_st_OPENSSL_STRING** %2, align 8
  %4 = tail call i8* @X509_get_ext_d2i(%struct.x509_st* %0, i32 177, i32* null, i32* null) #11
  %5 = bitcast i8* %4 to %struct.stack_st_ACCESS_DESCRIPTION*
  %6 = icmp eq i8* %4, null
  br i1 %6, label %39, label %7

7:                                                ; preds = %1
  %8 = bitcast %struct.stack_st_ACCESS_DESCRIPTION* %5 to %struct.stack_st*
  %9 = tail call i64 @sk_num(%struct.stack_st* nonnull %8) #11
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %37, label %11

11:                                               ; preds = %7, %31
  %12 = phi i64 [ %32, %31 ], [ 0, %7 ]
  %13 = tail call i8* @sk_value(%struct.stack_st* nonnull %8, i64 %12) #11
  %14 = bitcast i8* %13 to %struct.asn1_object_st**
  %15 = load %struct.asn1_object_st*, %struct.asn1_object_st** %14, align 8
  %16 = tail call i32 @OBJ_obj2nid(%struct.asn1_object_st* %15) #11
  %17 = icmp eq i32 %16, 178
  br i1 %17, label %18, label %31

18:                                               ; preds = %11
  %19 = getelementptr inbounds i8, i8* %13, i64 8
  %20 = bitcast i8* %19 to %struct.GENERAL_NAME_st**
  %21 = load %struct.GENERAL_NAME_st*, %struct.GENERAL_NAME_st** %20, align 8
  %22 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %21, i64 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 6
  br i1 %24, label %25, label %31

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %21, i64 0, i32 1
  %27 = bitcast %union.anon.1* %26 to %struct.asn1_string_st**
  %28 = load %struct.asn1_string_st*, %struct.asn1_string_st** %27, align 8
  %29 = call fastcc i32 @append_ia5(%struct.stack_st_OPENSSL_STRING** nonnull %2, %struct.asn1_string_st* %28)
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %11, %18, %25
  %32 = add nuw i64 %12, 1
  %33 = tail call i64 @sk_num(%struct.stack_st* nonnull %8) #11
  %34 = icmp ult i64 %32, %33
  br i1 %34, label %11, label %35

35:                                               ; preds = %25, %31
  %36 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %2, align 8
  br label %37

37:                                               ; preds = %35, %7
  %38 = phi %struct.stack_st_OPENSSL_STRING* [ %36, %35 ], [ null, %7 ]
  tail call void @AUTHORITY_INFO_ACCESS_free(%struct.stack_st_ACCESS_DESCRIPTION* nonnull %5) #11
  br label %39

39:                                               ; preds = %1, %37
  %40 = phi %struct.stack_st_OPENSSL_STRING* [ %38, %37 ], [ null, %1 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #11
  ret %struct.stack_st_OPENSSL_STRING* %40
}

declare i32 @OBJ_obj2nid(%struct.asn1_object_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @append_ia5(%struct.stack_st_OPENSSL_STRING** nocapture, %struct.asn1_string_st* nocapture readonly) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 22
  br i1 %5, label %6, label %42

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %1, i64 0, i32 2
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %42, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %42, label %14

14:                                               ; preds = %10
  %15 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %0, align 8
  %16 = icmp eq %struct.stack_st_OPENSSL_STRING* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %14
  %18 = bitcast %struct.stack_st_OPENSSL_STRING** %0 to %struct.stack_st**
  br label %24

19:                                               ; preds = %14
  %20 = tail call %struct.stack_st* @sk_new(i32 (i8**, i8**)* nonnull @sk_strcmp) #11
  %21 = bitcast %struct.stack_st* %20 to %struct.stack_st_OPENSSL_STRING*
  %22 = bitcast %struct.stack_st_OPENSSL_STRING** %0 to %struct.stack_st**
  store %struct.stack_st* %20, %struct.stack_st** %22, align 8
  %23 = icmp eq %struct.stack_st* %20, null
  br i1 %23, label %42, label %24

24:                                               ; preds = %17, %19
  %25 = phi %struct.stack_st** [ %18, %17 ], [ %22, %19 ]
  %26 = phi %struct.stack_st_OPENSSL_STRING* [ %15, %17 ], [ %21, %19 ]
  %27 = bitcast %struct.stack_st_OPENSSL_STRING* %26 to %struct.stack_st*
  tail call void @sk_sort(%struct.stack_st* %27) #11
  %28 = load %struct.stack_st*, %struct.stack_st** %25, align 8
  %29 = load i8*, i8** %7, align 8
  %30 = tail call i32 @sk_find(%struct.stack_st* %28, i64* null, i8* %29, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_OPENSSL_STRING_call_cmp_func) #11
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %42

32:                                               ; preds = %24
  %33 = load i8*, i8** %7, align 8
  %34 = tail call i8* @OPENSSL_strdup(i8* %33) #11
  %35 = icmp eq i8* %34, null
  br i1 %35, label %40, label %36

36:                                               ; preds = %32
  %37 = load %struct.stack_st*, %struct.stack_st** %25, align 8
  %38 = tail call i64 @sk_push(%struct.stack_st* %37, i8* nonnull %34) #11
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %36, %32
  %41 = load %struct.stack_st*, %struct.stack_st** %25, align 8
  tail call void @sk_pop_free_ex(%struct.stack_st* %41, void (void (i8*)*, i8*)* nonnull @sk_OPENSSL_STRING_call_free_func, void (i8*)* nonnull @str_free) #11
  store %struct.stack_st_OPENSSL_STRING* null, %struct.stack_st_OPENSSL_STRING** %0, align 8
  br label %42

42:                                               ; preds = %36, %24, %19, %6, %10, %2, %40
  %43 = phi i32 [ 0, %40 ], [ 1, %2 ], [ 1, %10 ], [ 1, %6 ], [ 0, %19 ], [ 1, %24 ], [ 1, %36 ]
  ret i32 %43
}

declare void @AUTHORITY_INFO_ACCESS_free(%struct.stack_st_ACCESS_DESCRIPTION*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_OPENSSL_STRING* @X509_REQ_get1_email(%struct.X509_req_st*) local_unnamed_addr #0 {
  %2 = tail call %struct.stack_st_X509_EXTENSION* @X509_REQ_get_extensions(%struct.X509_req_st* %0) #11
  %3 = tail call i8* @X509V3_get_d2i(%struct.stack_st_X509_EXTENSION* %2, i32 85, i32* null, i32* null) #11
  %4 = bitcast i8* %3 to %struct.stack_st_GENERAL_NAME*
  %5 = tail call %struct.X509_name_st* @X509_REQ_get_subject_name(%struct.X509_req_st* %0) #11
  %6 = tail call fastcc %struct.stack_st_OPENSSL_STRING* @get_email(%struct.X509_name_st* %5, %struct.stack_st_GENERAL_NAME* %4)
  %7 = bitcast %struct.stack_st_GENERAL_NAME* %4 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* %7, void (void (i8*)*, i8*)* nonnull @sk_GENERAL_NAME_call_free_func, void (i8*)* bitcast (void (%struct.GENERAL_NAME_st*)* @GENERAL_NAME_free to void (i8*)*)) #11
  %8 = bitcast %struct.stack_st_X509_EXTENSION* %2 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* %8, void (void (i8*)*, i8*)* nonnull @sk_X509_EXTENSION_call_free_func, void (i8*)* bitcast (void (%struct.X509_extension_st*)* @X509_EXTENSION_free to void (i8*)*)) #11
  ret %struct.stack_st_OPENSSL_STRING* %6
}

declare %struct.stack_st_X509_EXTENSION* @X509_REQ_get_extensions(%struct.X509_req_st*) local_unnamed_addr #2

declare i8* @X509V3_get_d2i(%struct.stack_st_X509_EXTENSION*, i32, i32*, i32*) local_unnamed_addr #2

declare %struct.X509_name_st* @X509_REQ_get_subject_name(%struct.X509_req_st*) local_unnamed_addr #2

declare void @X509_EXTENSION_free(%struct.X509_extension_st*) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_email_free(%struct.stack_st_OPENSSL_STRING*) local_unnamed_addr #0 {
  %2 = bitcast %struct.stack_st_OPENSSL_STRING* %0 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* %2, void (void (i8*)*, i8*)* nonnull @sk_OPENSSL_STRING_call_free_func, void (i8*)* nonnull @str_free) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @str_free(i8*) #0 {
  tail call void @OPENSSL_free(i8* %0) #11
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @x509v3_looks_like_dns_name(i8* nocapture readonly, i64) local_unnamed_addr #6 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %55, label %4

4:                                                ; preds = %2
  %5 = add i64 %1, -1
  %6 = getelementptr inbounds i8, i8* %0, i64 %5
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 46
  %9 = select i1 %8, i64 %5, i64 %1
  %10 = icmp ugt i64 %9, 1
  br i1 %10, label %11, label %21

11:                                               ; preds = %4
  %12 = load i8, i8* %0, align 1
  %13 = icmp eq i8 %12, 42
  br i1 %13, label %14, label %25

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 46
  br i1 %17, label %18, label %25

18:                                               ; preds = %14
  %19 = getelementptr inbounds i8, i8* %0, i64 2
  %20 = add i64 %9, -2
  br label %21

21:                                               ; preds = %18, %4
  %22 = phi i8* [ %19, %18 ], [ %0, %4 ]
  %23 = phi i64 [ %20, %18 ], [ %9, %4 ]
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %55, label %25

25:                                               ; preds = %11, %14, %21
  %26 = phi i64 [ %23, %21 ], [ %9, %14 ], [ %9, %11 ]
  %27 = phi i8* [ %22, %21 ], [ %0, %14 ], [ %0, %11 ]
  %28 = add i64 %26, -1
  br label %29

29:                                               ; preds = %51, %25
  %30 = phi i64 [ 0, %25 ], [ %53, %51 ]
  %31 = phi i64 [ 0, %25 ], [ %52, %51 ]
  %32 = getelementptr inbounds i8, i8* %27, i64 %30
  %33 = load i8, i8* %32, align 1
  %34 = add i8 %33, -48
  %35 = icmp ult i8 %34, 10
  %36 = and i8 %33, -33
  %37 = add i8 %36, -65
  %38 = icmp ult i8 %37, 26
  %39 = or i1 %38, %35
  br i1 %39, label %51, label %40

40:                                               ; preds = %29
  %41 = icmp eq i8 %33, 45
  %42 = icmp ugt i64 %30, %31
  %43 = and i1 %42, %41
  br i1 %43, label %51, label %44

44:                                               ; preds = %40
  switch i8 %33, label %45 [
    i8 95, label %51
    i8 58, label %51
  ]

45:                                               ; preds = %44
  %46 = icmp eq i8 %33, 46
  %47 = and i1 %42, %46
  %48 = icmp ult i64 %30, %28
  %49 = and i1 %48, %47
  %50 = add nuw i64 %30, 1
  br i1 %49, label %51, label %55

51:                                               ; preds = %45, %44, %44, %29, %40
  %52 = phi i64 [ %31, %44 ], [ %31, %40 ], [ %31, %29 ], [ %31, %44 ], [ %50, %45 ]
  %53 = add nuw i64 %30, 1
  %54 = icmp eq i64 %53, %26
  br i1 %54, label %55, label %29

55:                                               ; preds = %45, %51, %2, %21
  %56 = phi i32 [ 0, %21 ], [ 0, %2 ], [ 1, %51 ], [ 0, %45 ]
  ret i32 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_check_host(%struct.x509_st*, i8*, i64, i32, i8**) local_unnamed_addr #0 {
  %6 = icmp eq i8* %1, null
  br i1 %6, label %14, label %7

7:                                                ; preds = %5
  %8 = icmp eq i64 %2, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %7
  %10 = tail call i8* @memchr(i8* nonnull %1, i32 0, i64 %2) #12
  %11 = icmp eq i8* %10, null
  br i1 %11, label %12, label %14

12:                                               ; preds = %7, %9
  %13 = tail call fastcc i32 @do_x509_check(%struct.x509_st* %0, i8* nonnull %1, i64 %2, i32 %3, i32 2, i8** %4)
  br label %14

14:                                               ; preds = %9, %5, %12
  %15 = phi i32 [ %13, %12 ], [ -2, %5 ], [ -2, %9 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @do_x509_check(%struct.x509_st*, i8*, i64, i32, i32, i8**) unnamed_addr #0 {
  %7 = and i32 %3, -32769
  switch i32 %4, label %20 [
    i32 1, label %21
    i32 2, label %8
  ]

8:                                                ; preds = %6
  %9 = icmp ugt i64 %2, 1
  br i1 %9, label %10, label %15

10:                                               ; preds = %8
  %11 = load i8, i8* %1, align 1
  %12 = icmp eq i8 %11, 46
  %13 = or i32 %3, 32768
  %14 = select i1 %12, i32 %13, i32 %7
  br label %15

15:                                               ; preds = %10, %8
  %16 = phi i32 [ %7, %8 ], [ %14, %10 ]
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, i32 (i8*, i64, i8*, i64, i32)* @equal_wildcard, i32 (i8*, i64, i8*, i64, i32)* @equal_nocase
  br label %21

20:                                               ; preds = %6
  br label %21

21:                                               ; preds = %15, %6, %20
  %22 = phi i32 [ 0, %20 ], [ 48, %6 ], [ 13, %15 ]
  %23 = phi i32 [ 4, %20 ], [ 22, %6 ], [ 22, %15 ]
  %24 = phi i32 (i8*, i64, i8*, i64, i32)* [ @equal_case, %20 ], [ @equal_email, %6 ], [ %19, %15 ]
  %25 = phi i32 [ %7, %20 ], [ %7, %6 ], [ %16, %15 ]
  %26 = tail call i8* @X509_get_ext_d2i(%struct.x509_st* %0, i32 85, i32* null, i32* null) #11
  %27 = bitcast i8* %26 to %struct.stack_st_GENERAL_NAME*
  %28 = icmp eq i8* %26, null
  br i1 %28, label %51, label %29

29:                                               ; preds = %21
  %30 = bitcast %struct.stack_st_GENERAL_NAME* %27 to %struct.stack_st*
  %31 = tail call i64 @sk_num(%struct.stack_st* nonnull %30) #11
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %49, label %33

33:                                               ; preds = %29, %45
  %34 = phi i64 [ %46, %45 ], [ 0, %29 ]
  %35 = tail call i8* @sk_value(%struct.stack_st* nonnull %30, i64 %34) #11
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, %4
  br i1 %38, label %39, label %45

39:                                               ; preds = %33
  %40 = getelementptr inbounds i8, i8* %35, i64 8
  %41 = bitcast i8* %40 to %struct.asn1_string_st**
  %42 = load %struct.asn1_string_st*, %struct.asn1_string_st** %41, align 8
  %43 = tail call fastcc i32 @do_check_string(%struct.asn1_string_st* %42, i32 %23, i32 (i8*, i64, i8*, i64, i32)* %24, i32 %25, i32 %4, i8* %1, i64 %2, i8** %5)
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %49

45:                                               ; preds = %39, %33
  %46 = add nuw i64 %34, 1
  %47 = tail call i64 @sk_num(%struct.stack_st* nonnull %30) #11
  %48 = icmp ult i64 %46, %47
  br i1 %48, label %33, label %49

49:                                               ; preds = %45, %39, %29
  %50 = phi i32 [ 0, %29 ], [ %43, %39 ], [ 0, %45 ]
  tail call void @GENERAL_NAMES_free(%struct.stack_st_GENERAL_NAME* nonnull %27) #11
  br label %67

51:                                               ; preds = %21
  %52 = icmp ne i32 %22, 0
  %53 = and i32 %25, 32
  %54 = icmp eq i32 %53, 0
  %55 = and i1 %52, %54
  br i1 %55, label %56, label %67

56:                                               ; preds = %51
  %57 = tail call %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st* %0) #11
  br label %58

58:                                               ; preds = %62, %56
  %59 = phi i32 [ -1, %56 ], [ %60, %62 ]
  %60 = tail call i32 @X509_NAME_get_index_by_NID(%struct.X509_name_st* %57, i32 %22, i32 %59) #11
  %61 = icmp sgt i32 %60, -1
  br i1 %61, label %62, label %67

62:                                               ; preds = %58
  %63 = tail call %struct.X509_name_entry_st* @X509_NAME_get_entry(%struct.X509_name_st* %57, i32 %60) #11
  %64 = tail call %struct.asn1_string_st* @X509_NAME_ENTRY_get_data(%struct.X509_name_entry_st* %63) #11
  %65 = tail call fastcc i32 @do_check_string(%struct.asn1_string_st* %64, i32 -1, i32 (i8*, i64, i8*, i64, i32)* %24, i32 %25, i32 %4, i8* %1, i64 %2, i8** %5)
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %58, label %67

67:                                               ; preds = %58, %62, %51, %49
  %68 = phi i32 [ %50, %49 ], [ 0, %51 ], [ 0, %58 ], [ %65, %62 ]
  ret i32 %68
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_check_email(%struct.x509_st*, i8*, i64, i32) local_unnamed_addr #0 {
  %5 = icmp eq i8* %1, null
  br i1 %5, label %13, label %6

6:                                                ; preds = %4
  %7 = icmp eq i64 %2, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %6
  %9 = tail call i8* @memchr(i8* nonnull %1, i32 0, i64 %2) #12
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %6, %8
  %12 = tail call fastcc i32 @do_x509_check(%struct.x509_st* %0, i8* nonnull %1, i64 %2, i32 %3, i32 1, i8** null)
  br label %13

13:                                               ; preds = %8, %4, %11
  %14 = phi i32 [ %12, %11 ], [ -2, %4 ], [ -2, %8 ]
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_check_ip(%struct.x509_st*, i8*, i64, i32) local_unnamed_addr #0 {
  %5 = icmp eq i8* %1, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %4
  %7 = tail call fastcc i32 @do_x509_check(%struct.x509_st* %0, i8* nonnull %1, i64 %2, i32 %3, i32 7, i8** null)
  br label %8

8:                                                ; preds = %4, %6
  %9 = phi i32 [ %7, %6 ], [ -2, %4 ]
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_check_ip_asc(%struct.x509_st*, i8*, i32) local_unnamed_addr #0 {
  %4 = alloca [16 x i8], align 16
  %5 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = icmp eq i8* %1, null
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 16, i1 false)
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = call i32 @a2i_ipadd(i8* nonnull %5, i8* nonnull %1)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %7
  %11 = sext i32 %8 to i64
  %12 = call fastcc i32 @do_x509_check(%struct.x509_st* %0, i8* nonnull %5, i64 %11, i32 %2, i32 7, i8** null)
  br label %13

13:                                               ; preds = %7, %3, %10
  %14 = phi i32 [ %12, %10 ], [ -2, %3 ], [ -2, %7 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @a2i_ipadd(i8* nocapture, i8*) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.IPV6_STAT, align 4
  %8 = tail call i8* @strchr(i8* %1, i32 58) #12
  %9 = icmp eq i8* %8, null
  br i1 %9, label %63, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.IPV6_STAT, %struct.IPV6_STAT* %7, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %11) #11
  %12 = getelementptr inbounds %struct.IPV6_STAT, %struct.IPV6_STAT* %7, i64 0, i32 1
  %13 = getelementptr inbounds %struct.IPV6_STAT, %struct.IPV6_STAT* %7, i64 0, i32 2
  %14 = getelementptr inbounds %struct.IPV6_STAT, %struct.IPV6_STAT* %7, i64 0, i32 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %11, i8 -86, i64 16, i1 false) #11
  store i32 0, i32* %12, align 4
  store i32 -1, i32* %13, align 4
  store i32 0, i32* %14, align 4
  %15 = call i32 @CONF_parse_list(i8* %1, i8 signext 58, i32 0, i32 (i8*, i32, i8*)* nonnull @ipv6_cb, i8* nonnull %11) #11
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %89, label %17

17:                                               ; preds = %10
  %18 = load i32, i32* %13, align 4
  %19 = icmp eq i32 %18, -1
  %20 = load i32, i32* %12, align 4
  %21 = icmp eq i32 %20, 16
  br i1 %19, label %22, label %23

22:                                               ; preds = %17
  br i1 %21, label %62, label %89

23:                                               ; preds = %17
  br i1 %21, label %89, label %24

24:                                               ; preds = %23
  %25 = load i32, i32* %14, align 4
  %26 = icmp sgt i32 %25, 3
  br i1 %26, label %89, label %27

27:                                               ; preds = %24
  switch i32 %25, label %34 [
    i32 3, label %28
    i32 2, label %30
  ]

28:                                               ; preds = %27
  %29 = icmp sgt i32 %20, 0
  br i1 %29, label %89, label %38

30:                                               ; preds = %27
  %31 = icmp eq i32 %18, 0
  %32 = icmp eq i32 %20, %18
  %33 = or i1 %31, %32
  br i1 %33, label %38, label %89

34:                                               ; preds = %27
  %35 = icmp eq i32 %18, 0
  %36 = icmp eq i32 %20, %18
  %37 = or i1 %35, %36
  br i1 %37, label %89, label %38

38:                                               ; preds = %34, %30, %28
  %39 = icmp sgt i32 %18, -1
  br i1 %39, label %40, label %62

40:                                               ; preds = %38
  %41 = sext i32 %18 to i64
  %42 = icmp eq i32 %18, 0
  br i1 %42, label %44, label %43

43:                                               ; preds = %40
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* nonnull align 4 %11, i64 %41, i1 false) #11
  br label %44

44:                                               ; preds = %43, %40
  %45 = getelementptr inbounds i8, i8* %0, i64 %41
  %46 = sub nsw i32 16, %20
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %50, label %48

48:                                               ; preds = %44
  %49 = sext i32 %46 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 0, i64 %49, i1 false) #11
  br label %50

50:                                               ; preds = %48, %44
  %51 = icmp eq i32 %20, %18
  br i1 %51, label %89, label %52

52:                                               ; preds = %50
  %53 = sub nsw i32 %20, %18
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %89, label %55

55:                                               ; preds = %52
  %56 = sext i32 %53 to i64
  %57 = getelementptr inbounds %struct.IPV6_STAT, %struct.IPV6_STAT* %7, i64 0, i32 0, i64 %41
  %58 = getelementptr inbounds i8, i8* %45, i64 16
  %59 = sext i32 %20 to i64
  %60 = sub nsw i64 0, %59
  %61 = getelementptr inbounds i8, i8* %58, i64 %60
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %57, i64 %56, i1 false) #11
  br label %89

62:                                               ; preds = %38, %22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* nonnull align 4 %11, i64 16, i1 false) #11
  br label %89

63:                                               ; preds = %2
  %64 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %64) #11
  store i32 -1431655766, i32* %3, align 4
  %65 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %65) #11
  store i32 -1431655766, i32* %4, align 4
  %66 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %66) #11
  store i32 -1431655766, i32* %5, align 4
  %67 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %67) #11
  store i32 -1431655766, i32* %6, align 4
  %68 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.19, i64 0, i64 0), i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6) #11
  %69 = icmp eq i32 %68, 4
  br i1 %69, label %70, label %87

70:                                               ; preds = %63
  %71 = load i32, i32* %3, align 4
  %72 = load i32, i32* %4, align 4
  %73 = or i32 %72, %71
  %74 = load i32, i32* %5, align 4
  %75 = or i32 %73, %74
  %76 = load i32, i32* %6, align 4
  %77 = or i32 %75, %76
  %78 = icmp ugt i32 %77, 255
  br i1 %78, label %87, label %79

79:                                               ; preds = %70
  %80 = trunc i32 %71 to i8
  store i8 %80, i8* %0, align 1
  %81 = trunc i32 %72 to i8
  %82 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %81, i8* %82, align 1
  %83 = trunc i32 %74 to i8
  %84 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %83, i8* %84, align 1
  %85 = trunc i32 %76 to i8
  %86 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %85, i8* %86, align 1
  br label %87

87:                                               ; preds = %63, %70, %79
  %88 = phi i32 [ 4, %79 ], [ 0, %63 ], [ 0, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %67) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %66) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %65) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %64) #11
  ret i32 %88

89:                                               ; preds = %34, %30, %28, %24, %23, %22, %10, %62, %55, %52, %50
  %90 = phi i32 [ 16, %50 ], [ 16, %52 ], [ 16, %55 ], [ 16, %62 ], [ 0, %10 ], [ 0, %22 ], [ 0, %23 ], [ 0, %24 ], [ 0, %28 ], [ 0, %30 ], [ 0, %34 ]
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %11) #11
  ret i32 %90
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @a2i_IPADDRESS(i8*) local_unnamed_addr #0 {
  %2 = alloca [16 x i8], align 16
  %3 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 16, i1 false)
  %4 = call i32 @a2i_ipadd(i8* nonnull %3, i8* %0)
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %1
  %7 = tail call %struct.asn1_string_st* @ASN1_OCTET_STRING_new() #11
  %8 = icmp eq %struct.asn1_string_st* %7, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %6
  %10 = call i32 @ASN1_OCTET_STRING_set(%struct.asn1_string_st* nonnull %7, i8* nonnull %3, i32 %4) #11
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  call void @ASN1_OCTET_STRING_free(%struct.asn1_string_st* nonnull %7) #11
  br label %13

13:                                               ; preds = %9, %6, %1, %12
  %14 = phi %struct.asn1_string_st* [ null, %12 ], [ null, %1 ], [ null, %6 ], [ %7, %9 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  ret %struct.asn1_string_st* %14
}

declare %struct.asn1_string_st* @ASN1_OCTET_STRING_new() local_unnamed_addr #2

declare i32 @ASN1_OCTET_STRING_set(%struct.asn1_string_st*, i8*, i32) local_unnamed_addr #2

declare void @ASN1_OCTET_STRING_free(%struct.asn1_string_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @a2i_IPADDRESS_NC(i8*) local_unnamed_addr #0 {
  %2 = alloca [32 x i8], align 16
  %3 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 32, i1 false)
  %4 = tail call i8* @strchr(i8* %0, i32 47) #12
  %5 = icmp eq i8* %4, null
  br i1 %5, label %33, label %6

6:                                                ; preds = %1
  %7 = tail call i8* @OPENSSL_strdup(i8* %0) #11
  %8 = icmp eq i8* %7, null
  br i1 %8, label %33, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %4 to i64
  %11 = ptrtoint i8* %0 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds i8, i8* %7, i64 %12
  store i8 0, i8* %13, align 1
  %14 = call i32 @a2i_ipadd(i8* nonnull %3, i8* nonnull %7)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %31, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds i8, i8* %13, i64 1
  %18 = sext i32 %14 to i64
  %19 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i64 %18
  %20 = call i32 @a2i_ipadd(i8* %19, i8* %17)
  tail call void @OPENSSL_free(i8* nonnull %7) #11
  %21 = icmp ne i32 %20, 0
  %22 = icmp eq i32 %14, %20
  %23 = and i1 %21, %22
  br i1 %23, label %24, label %33

24:                                               ; preds = %16
  %25 = tail call %struct.asn1_string_st* @ASN1_OCTET_STRING_new() #11
  %26 = icmp eq %struct.asn1_string_st* %25, null
  br i1 %26, label %33, label %27

27:                                               ; preds = %24
  %28 = shl nsw i32 %14, 1
  %29 = call i32 @ASN1_OCTET_STRING_set(%struct.asn1_string_st* nonnull %25, i8* nonnull %3, i32 %28) #11
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %32, label %33

31:                                               ; preds = %9
  tail call void @OPENSSL_free(i8* nonnull %7) #11
  br label %33

32:                                               ; preds = %27
  call void @ASN1_OCTET_STRING_free(%struct.asn1_string_st* nonnull %25) #11
  br label %33

33:                                               ; preds = %24, %16, %31, %32, %27, %6, %1
  %34 = phi %struct.asn1_string_st* [ null, %1 ], [ null, %6 ], [ %25, %27 ], [ null, %32 ], [ null, %31 ], [ null, %16 ], [ null, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #11
  ret %struct.asn1_string_st* %34
}

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_NAME_from_section(%struct.X509_name_st*, %struct.stack_st_CONF_VALUE*, i64) local_unnamed_addr #0 {
  %4 = icmp eq %struct.X509_name_st* %0, null
  br i1 %4, label %43, label %5

5:                                                ; preds = %3
  %6 = bitcast %struct.stack_st_CONF_VALUE* %1 to %struct.stack_st*
  %7 = tail call i64 @sk_num(%struct.stack_st* %6) #11
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %43, label %9

9:                                                ; preds = %5
  %10 = trunc i64 %2 to i32
  br label %14

11:                                               ; preds = %30
  %12 = tail call i64 @sk_num(%struct.stack_st* %6) #11
  %13 = icmp ult i64 %42, %12
  br i1 %13, label %14, label %43

14:                                               ; preds = %9, %11
  %15 = phi i64 [ 0, %9 ], [ %42, %11 ]
  %16 = tail call i8* @sk_value(%struct.stack_st* %6, i64 %15) #11
  %17 = getelementptr inbounds i8, i8* %16, i64 8
  %18 = bitcast i8* %17 to i8**
  %19 = load i8*, i8** %18, align 8
  br label %20

20:                                               ; preds = %28, %14
  %21 = phi i8* [ %19, %14 ], [ %29, %28 ]
  %22 = load i8, i8* %21, align 1
  switch i8 %22, label %28 [
    i8 0, label %30
    i8 58, label %23
    i8 44, label %23
    i8 46, label %23
  ]

23:                                               ; preds = %20, %20, %20
  %24 = getelementptr inbounds i8, i8* %21, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 0
  %27 = select i1 %26, i8* %19, i8* %24
  br label %30

28:                                               ; preds = %20
  %29 = getelementptr inbounds i8, i8* %21, i64 1
  br label %20

30:                                               ; preds = %20, %23
  %31 = phi i8* [ %27, %23 ], [ %19, %20 ]
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 43
  %34 = getelementptr inbounds i8, i8* %31, i64 1
  %35 = sext i1 %33 to i32
  %36 = select i1 %33, i8* %34, i8* %31
  %37 = getelementptr inbounds i8, i8* %16, i64 16
  %38 = bitcast i8* %37 to i8**
  %39 = load i8*, i8** %38, align 8
  %40 = tail call i32 @X509_NAME_add_entry_by_txt(%struct.X509_name_st* nonnull %0, i8* %36, i32 %10, i8* %39, i32 -1, i32 -1, i32 %35) #11
  %41 = icmp eq i32 %40, 0
  %42 = add nuw i64 %15, 1
  br i1 %41, label %43, label %11

43:                                               ; preds = %30, %11, %5, %3
  %44 = phi i32 [ 0, %3 ], [ 1, %5 ], [ 0, %30 ], [ 1, %11 ]
  ret i32 %44
}

declare i32 @X509_NAME_add_entry_by_txt(%struct.X509_name_st*, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #2

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #2

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #2

declare i32 @BN_num_bits(%struct.bignum_st*) local_unnamed_addr #2

declare i8* @BN_bn2dec(%struct.bignum_st*) local_unnamed_addr #2

declare i8* @BN_bn2hex(%struct.bignum_st*) local_unnamed_addr #2

declare i64 @OPENSSL_strlcpy(i8*, i8*, i64) local_unnamed_addr #2

declare i64 @OPENSSL_strlcat(i8*, i8*, i64) local_unnamed_addr #2

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_CONF_VALUE_call_free_func(void (i8*)* nocapture, i8*) #7 {
  %3 = bitcast void (i8*)* %0 to void (%struct.conf_value_st*)*
  %4 = bitcast i8* %1 to %struct.conf_value_st*
  tail call void %3(%struct.conf_value_st* %4) #11
  ret void
}

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() local_unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_GENERAL_NAME_call_free_func(void (i8*)* nocapture, i8*) #7 {
  %3 = bitcast void (i8*)* %0 to void (%struct.GENERAL_NAME_st*)*
  %4 = bitcast i8* %1 to %struct.GENERAL_NAME_st*
  tail call void %3(%struct.GENERAL_NAME_st* %4) #11
  ret void
}

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #2

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_X509_EXTENSION_call_free_func(void (i8*)* nocapture, i8*) #7 {
  %3 = bitcast void (i8*)* %0 to void (%struct.X509_extension_st*)*
  %4 = bitcast i8* %1 to %struct.X509_extension_st*
  tail call void %3(%struct.X509_extension_st* %4) #11
  ret void
}

declare i32 @X509_NAME_get_index_by_NID(%struct.X509_name_st*, i32, i32) local_unnamed_addr #2

declare %struct.X509_name_entry_st* @X509_NAME_get_entry(%struct.X509_name_st*, i32) local_unnamed_addr #2

declare %struct.asn1_string_st* @X509_NAME_ENTRY_get_data(%struct.X509_name_entry_st*) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @sk_strcmp(i8** nocapture readonly, i8** nocapture readonly) #5 {
  %3 = load i8*, i8** %0, align 8
  %4 = load i8*, i8** %1, align 8
  %5 = tail call i32 @strcmp(i8* %3, i8* %4) #12
  ret i32 %5
}

declare %struct.stack_st* @sk_new(i32 (i8**, i8**)*) local_unnamed_addr #2

declare void @sk_sort(%struct.stack_st*) local_unnamed_addr #2

declare i32 @sk_find(%struct.stack_st*, i64*, i8*, i32 (i32 (i8**, i8**)*, i8**, i8**)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @sk_OPENSSL_STRING_call_cmp_func(i32 (i8**, i8**)* nocapture, i8** nocapture readonly, i8** nocapture readonly) #7 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #11
  %7 = bitcast i8** %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast i8** %4 to i64*
  store i64 %8, i64* %9, align 8
  %10 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #11
  %11 = bitcast i8** %2 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast i8** %5 to i64*
  store i64 %12, i64* %13, align 8
  %14 = call i32 %0(i8** nonnull %4, i8** nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #11
  ret i32 %14
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_OPENSSL_STRING_call_free_func(void (i8*)* nocapture, i8*) #7 {
  tail call void %0(i8* %1) #11
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @equal_email(i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32) #5 {
  %6 = icmp eq i64 %1, %3
  br i1 %6, label %7, label %61

7:                                                ; preds = %5, %15
  %8 = phi i64 [ %11, %15 ], [ %1, %5 ]
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %54, label %10

10:                                               ; preds = %7
  %11 = add i64 %8, -1
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 64
  br i1 %14, label %19, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds i8, i8* %2, i64 %11
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 64
  br i1 %18, label %19, label %7

19:                                               ; preds = %15, %10
  %20 = sub i64 %1, %11
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %52, label %22

22:                                               ; preds = %19
  %23 = icmp eq i8 %13, 0
  br i1 %23, label %61, label %24

24:                                               ; preds = %22
  %25 = getelementptr inbounds i8, i8* %2, i64 %11
  %26 = getelementptr inbounds i8, i8* %0, i64 %11
  br label %27

27:                                               ; preds = %24, %48
  %28 = phi i8* [ %25, %24 ], [ %49, %48 ]
  %29 = phi i8* [ %26, %24 ], [ %45, %48 ]
  %30 = phi i64 [ %20, %24 ], [ %46, %48 ]
  %31 = phi i8 [ %13, %24 ], [ %50, %48 ]
  %32 = load i8, i8* %28, align 1
  %33 = icmp eq i8 %31, %32
  br i1 %33, label %44, label %34

34:                                               ; preds = %27
  %35 = add i8 %31, -65
  %36 = icmp ult i8 %35, 26
  %37 = add i8 %31, 32
  %38 = select i1 %36, i8 %37, i8 %31
  %39 = add i8 %32, -65
  %40 = icmp ult i8 %39, 26
  %41 = add i8 %32, 32
  %42 = select i1 %40, i8 %41, i8 %32
  %43 = icmp eq i8 %38, %42
  br i1 %43, label %44, label %61

44:                                               ; preds = %34, %27
  %45 = getelementptr inbounds i8, i8* %29, i64 1
  %46 = add i64 %30, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds i8, i8* %28, i64 1
  %50 = load i8, i8* %45, align 1
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %61, label %27

52:                                               ; preds = %44, %19
  %53 = icmp eq i64 %11, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %7, %52
  %55 = icmp eq i64 %1, 0
  br i1 %55, label %61, label %56

56:                                               ; preds = %52, %54
  %57 = phi i64 [ %1, %54 ], [ %11, %52 ]
  %58 = tail call i32 @bcmp(i8* %0, i8* %2, i64 %57) #11
  %59 = icmp eq i32 %58, 0
  %60 = zext i1 %59 to i32
  br label %61

61:                                               ; preds = %48, %34, %22, %56, %54, %5
  %62 = phi i32 [ 0, %5 ], [ %60, %56 ], [ 1, %54 ], [ 0, %22 ], [ 0, %34 ], [ 0, %48 ]
  ret i32 %62
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @equal_nocase(i8*, i64, i8* nocapture readonly, i64, i32) #6 {
  %6 = trunc i32 %4 to i16
  %7 = icmp sgt i16 %6, -1
  br i1 %7, label %31, label %8

8:                                                ; preds = %5
  %9 = icmp ugt i64 %1, %3
  br i1 %9, label %10, label %25

10:                                               ; preds = %8
  %11 = and i32 %4, 16
  %12 = icmp ne i32 %11, 0
  br label %13

13:                                               ; preds = %21, %10
  %14 = phi i64 [ %1, %10 ], [ %23, %21 ]
  %15 = phi i8* [ %0, %10 ], [ %22, %21 ]
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  %18 = icmp eq i8 %16, 46
  %19 = and i1 %12, %18
  %20 = or i1 %17, %19
  br i1 %20, label %25, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds i8, i8* %15, i64 1
  %23 = add i64 %14, -1
  %24 = icmp ugt i64 %23, %3
  br i1 %24, label %13, label %25

25:                                               ; preds = %21, %13, %8
  %26 = phi i8* [ %0, %8 ], [ %22, %21 ], [ %15, %13 ]
  %27 = phi i64 [ %1, %8 ], [ %23, %21 ], [ %14, %13 ]
  %28 = icmp eq i64 %27, %3
  %29 = select i1 %28, i8* %26, i8* %0
  %30 = select i1 %28, i64 %3, i64 %1
  br label %31

31:                                               ; preds = %25, %5
  %32 = phi i8* [ %0, %5 ], [ %29, %25 ]
  %33 = phi i64 [ %1, %5 ], [ %30, %25 ]
  %34 = icmp eq i64 %33, %3
  br i1 %34, label %35, label %61

35:                                               ; preds = %31
  %36 = icmp eq i64 %3, 0
  br i1 %36, label %61, label %37

37:                                               ; preds = %35, %56
  %38 = phi i8* [ %58, %56 ], [ %2, %35 ]
  %39 = phi i64 [ %59, %56 ], [ %3, %35 ]
  %40 = phi i8* [ %57, %56 ], [ %32, %35 ]
  %41 = load i8, i8* %40, align 1
  %42 = load i8, i8* %38, align 1
  %43 = icmp eq i8 %41, 0
  br i1 %43, label %61, label %44

44:                                               ; preds = %37
  %45 = icmp eq i8 %41, %42
  br i1 %45, label %56, label %46

46:                                               ; preds = %44
  %47 = add i8 %41, -65
  %48 = icmp ult i8 %47, 26
  %49 = add i8 %41, 32
  %50 = select i1 %48, i8 %49, i8 %41
  %51 = add i8 %42, -65
  %52 = icmp ult i8 %51, 26
  %53 = add i8 %42, 32
  %54 = select i1 %52, i8 %53, i8 %42
  %55 = icmp eq i8 %50, %54
  br i1 %55, label %56, label %61

56:                                               ; preds = %44, %46
  %57 = getelementptr inbounds i8, i8* %40, i64 1
  %58 = getelementptr inbounds i8, i8* %38, i64 1
  %59 = add i64 %39, -1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %37

61:                                               ; preds = %56, %37, %46, %35, %31
  %62 = phi i32 [ 0, %31 ], [ 1, %35 ], [ 1, %56 ], [ 0, %37 ], [ 0, %46 ]
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @equal_wildcard(i8*, i64, i8*, i64, i32) #0 {
  %6 = icmp ugt i64 %3, 1
  br i1 %6, label %7, label %12

7:                                                ; preds = %5
  %8 = load i8, i8* %2, align 1
  %9 = icmp eq i8 %8, 46
  %10 = icmp eq i64 %1, 0
  %11 = or i1 %10, %9
  br i1 %11, label %92, label %14

12:                                               ; preds = %5
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %92, label %14

14:                                               ; preds = %7, %12
  %15 = add i64 %1, -1
  %16 = and i32 %4, 4
  %17 = icmp eq i32 %16, 0
  br label %18

18:                                               ; preds = %79, %14
  %19 = phi i32 [ 0, %14 ], [ %82, %79 ]
  %20 = phi i32 [ 1, %14 ], [ %81, %79 ]
  %21 = phi i64 [ 0, %14 ], [ %83, %79 ]
  %22 = phi i8* [ null, %14 ], [ %80, %79 ]
  %23 = getelementptr inbounds i8, i8* %0, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 42
  br i1 %25, label %26, label %48

26:                                               ; preds = %18
  %27 = and i32 %20, 1
  %28 = icmp eq i64 %21, %15
  br i1 %28, label %34, label %29

29:                                               ; preds = %26
  %30 = add nuw i64 %21, 1
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 46
  br label %34

34:                                               ; preds = %29, %26
  %35 = phi i1 [ true, %26 ], [ %33, %29 ]
  %36 = icmp eq i8* %22, null
  br i1 %36, label %37, label %92

37:                                               ; preds = %34
  %38 = and i32 %20, 8
  %39 = or i32 %38, %19
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %92

41:                                               ; preds = %37
  %42 = icmp ne i32 %27, 0
  %43 = and i1 %42, %35
  %44 = or i1 %17, %43
  %45 = or i1 %42, %35
  %46 = and i1 %45, %44
  %47 = and i32 %20, -2
  br i1 %46, label %79, label %92

48:                                               ; preds = %18
  %49 = and i8 %24, -33
  %50 = add i8 %49, -65
  %51 = icmp ult i8 %50, 26
  %52 = add i8 %24, -48
  %53 = icmp ult i8 %52, 10
  %54 = or i1 %53, %51
  br i1 %54, label %55, label %68

55:                                               ; preds = %48
  %56 = and i32 %20, 1
  %57 = icmp ne i32 %56, 0
  %58 = sub i64 %1, %21
  %59 = icmp ugt i64 %58, 3
  %60 = and i1 %57, %59
  br i1 %60, label %61, label %65

61:                                               ; preds = %55
  %62 = tail call i32 @OPENSSL_strncasecmp(i8* %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), i64 4) #11
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %63, i32 8, i32 %20
  br label %65

65:                                               ; preds = %61, %55
  %66 = phi i32 [ %20, %55 ], [ %64, %61 ]
  %67 = and i32 %66, -6
  br label %79

68:                                               ; preds = %48
  switch i8 %24, label %92 [
    i8 46, label %69
    i8 45, label %74
  ]

69:                                               ; preds = %68
  %70 = and i32 %20, 5
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %92

72:                                               ; preds = %69
  %73 = add nsw i32 %19, 1
  br label %79

74:                                               ; preds = %68
  %75 = and i32 %20, 1
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %92

77:                                               ; preds = %74
  %78 = or i32 %20, 4
  br label %79

79:                                               ; preds = %77, %72, %65, %41
  %80 = phi i8* [ %23, %41 ], [ %22, %65 ], [ %22, %72 ], [ %22, %77 ]
  %81 = phi i32 [ %47, %41 ], [ %67, %65 ], [ 1, %72 ], [ %78, %77 ]
  %82 = phi i32 [ %19, %41 ], [ %19, %65 ], [ %73, %72 ], [ %19, %77 ]
  %83 = add nuw i64 %21, 1
  %84 = icmp eq i64 %83, %1
  br i1 %84, label %85, label %18

85:                                               ; preds = %79
  %86 = and i32 %81, 5
  %87 = icmp ne i32 %86, 0
  %88 = icmp slt i32 %82, 2
  %89 = or i1 %87, %88
  %90 = icmp eq i8* %80, null
  %91 = or i1 %90, %89
  br i1 %91, label %92, label %148

92:                                               ; preds = %34, %37, %68, %74, %69, %41, %12, %85, %7
  %93 = trunc i32 %4 to i16
  %94 = icmp sgt i16 %93, -1
  br i1 %94, label %118, label %95

95:                                               ; preds = %92
  %96 = icmp ugt i64 %1, %3
  br i1 %96, label %97, label %112

97:                                               ; preds = %95
  %98 = and i32 %4, 16
  %99 = icmp ne i32 %98, 0
  br label %100

100:                                              ; preds = %108, %97
  %101 = phi i64 [ %1, %97 ], [ %110, %108 ]
  %102 = phi i8* [ %0, %97 ], [ %109, %108 ]
  %103 = load i8, i8* %102, align 1
  %104 = icmp eq i8 %103, 0
  %105 = icmp eq i8 %103, 46
  %106 = and i1 %99, %105
  %107 = or i1 %104, %106
  br i1 %107, label %112, label %108

108:                                              ; preds = %100
  %109 = getelementptr inbounds i8, i8* %102, i64 1
  %110 = add i64 %101, -1
  %111 = icmp ugt i64 %110, %3
  br i1 %111, label %100, label %112

112:                                              ; preds = %108, %100, %95
  %113 = phi i8* [ %0, %95 ], [ %102, %100 ], [ %109, %108 ]
  %114 = phi i64 [ %1, %95 ], [ %101, %100 ], [ %110, %108 ]
  %115 = icmp eq i64 %114, %3
  %116 = select i1 %115, i8* %113, i8* %0
  %117 = select i1 %115, i64 %3, i64 %1
  br label %118

118:                                              ; preds = %112, %92
  %119 = phi i8* [ %0, %92 ], [ %116, %112 ]
  %120 = phi i64 [ %1, %92 ], [ %117, %112 ]
  %121 = icmp eq i64 %120, %3
  br i1 %121, label %122, label %260

122:                                              ; preds = %118
  %123 = icmp eq i64 %3, 0
  br i1 %123, label %260, label %124

124:                                              ; preds = %122, %143
  %125 = phi i8* [ %145, %143 ], [ %2, %122 ]
  %126 = phi i64 [ %146, %143 ], [ %3, %122 ]
  %127 = phi i8* [ %144, %143 ], [ %119, %122 ]
  %128 = load i8, i8* %127, align 1
  %129 = load i8, i8* %125, align 1
  %130 = icmp eq i8 %128, 0
  br i1 %130, label %260, label %131

131:                                              ; preds = %124
  %132 = icmp eq i8 %128, %129
  br i1 %132, label %143, label %133

133:                                              ; preds = %131
  %134 = add i8 %128, -65
  %135 = icmp ult i8 %134, 26
  %136 = add i8 %128, 32
  %137 = select i1 %135, i8 %136, i8 %128
  %138 = add i8 %129, -65
  %139 = icmp ult i8 %138, 26
  %140 = add i8 %129, 32
  %141 = select i1 %139, i8 %140, i8 %129
  %142 = icmp eq i8 %137, %141
  br i1 %142, label %143, label %260

143:                                              ; preds = %133, %131
  %144 = getelementptr inbounds i8, i8* %127, i64 1
  %145 = getelementptr inbounds i8, i8* %125, i64 1
  %146 = add i64 %126, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %260, label %124

148:                                              ; preds = %85
  %149 = ptrtoint i8* %80 to i64
  %150 = ptrtoint i8* %0 to i64
  %151 = sub i64 %149, %150
  %152 = getelementptr inbounds i8, i8* %80, i64 1
  %153 = getelementptr inbounds i8, i8* %0, i64 %1
  %154 = ptrtoint i8* %153 to i64
  %155 = xor i64 %149, -1
  %156 = add i64 %155, %154
  %157 = add i64 %156, %151
  %158 = icmp ugt i64 %157, %3
  br i1 %158, label %260, label %159

159:                                              ; preds = %148
  %160 = icmp eq i64 %151, 0
  br i1 %160, label %185, label %161

161:                                              ; preds = %159, %180
  %162 = phi i8* [ %182, %180 ], [ %2, %159 ]
  %163 = phi i64 [ %183, %180 ], [ %151, %159 ]
  %164 = phi i8* [ %181, %180 ], [ %0, %159 ]
  %165 = load i8, i8* %164, align 1
  %166 = load i8, i8* %162, align 1
  %167 = icmp eq i8 %165, 0
  br i1 %167, label %260, label %168

168:                                              ; preds = %161
  %169 = icmp eq i8 %165, %166
  br i1 %169, label %180, label %170

170:                                              ; preds = %168
  %171 = add i8 %165, -65
  %172 = icmp ult i8 %171, 26
  %173 = add i8 %165, 32
  %174 = select i1 %172, i8 %173, i8 %165
  %175 = add i8 %166, -65
  %176 = icmp ult i8 %175, 26
  %177 = add i8 %166, 32
  %178 = select i1 %176, i8 %177, i8 %166
  %179 = icmp eq i8 %174, %178
  br i1 %179, label %180, label %260

180:                                              ; preds = %170, %168
  %181 = getelementptr inbounds i8, i8* %164, i64 1
  %182 = getelementptr inbounds i8, i8* %162, i64 1
  %183 = add i64 %163, -1
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %185, label %161

185:                                              ; preds = %180, %159
  %186 = getelementptr inbounds i8, i8* %2, i64 %151
  %187 = sub i64 %3, %156
  %188 = getelementptr inbounds i8, i8* %2, i64 %187
  %189 = icmp eq i64 %156, 0
  br i1 %189, label %214, label %190

190:                                              ; preds = %185, %209
  %191 = phi i8* [ %211, %209 ], [ %152, %185 ]
  %192 = phi i64 [ %212, %209 ], [ %156, %185 ]
  %193 = phi i8* [ %210, %209 ], [ %188, %185 ]
  %194 = load i8, i8* %193, align 1
  %195 = load i8, i8* %191, align 1
  %196 = icmp eq i8 %194, 0
  br i1 %196, label %260, label %197

197:                                              ; preds = %190
  %198 = icmp eq i8 %194, %195
  br i1 %198, label %209, label %199

199:                                              ; preds = %197
  %200 = add i8 %194, -65
  %201 = icmp ult i8 %200, 26
  %202 = add i8 %194, 32
  %203 = select i1 %201, i8 %202, i8 %194
  %204 = add i8 %195, -65
  %205 = icmp ult i8 %204, 26
  %206 = add i8 %195, 32
  %207 = select i1 %205, i8 %206, i8 %195
  %208 = icmp eq i8 %203, %207
  br i1 %208, label %209, label %260

209:                                              ; preds = %199, %197
  %210 = getelementptr inbounds i8, i8* %193, i64 1
  %211 = getelementptr inbounds i8, i8* %191, i64 1
  %212 = add i64 %192, -1
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %190

214:                                              ; preds = %209, %185
  br i1 %160, label %215, label %223

215:                                              ; preds = %214
  %216 = load i8, i8* %152, align 1
  %217 = icmp eq i8 %216, 46
  br i1 %217, label %218, label %223

218:                                              ; preds = %215
  %219 = icmp eq i64 %187, 0
  br i1 %219, label %260, label %220

220:                                              ; preds = %218
  %221 = lshr i32 %4, 3
  %222 = and i32 %221, 1
  br label %228

223:                                              ; preds = %215, %214
  %224 = icmp ugt i64 %3, 3
  br i1 %224, label %225, label %228

225:                                              ; preds = %223
  %226 = tail call i32 @OPENSSL_strncasecmp(i8* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), i64 4) #11
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %260, label %228

228:                                              ; preds = %225, %223, %220
  %229 = phi i32 [ %222, %220 ], [ 0, %223 ], [ 0, %225 ]
  %230 = getelementptr inbounds i8, i8* %186, i64 1
  %231 = icmp eq i8* %188, %230
  br i1 %231, label %232, label %237

232:                                              ; preds = %228
  %233 = load i8, i8* %186, align 1
  %234 = icmp eq i8 %233, 42
  %235 = icmp eq i64 %187, %151
  %236 = or i1 %235, %234
  br i1 %236, label %260, label %239

237:                                              ; preds = %228
  %238 = icmp eq i64 %187, %151
  br i1 %238, label %260, label %239

239:                                              ; preds = %237, %232
  %240 = icmp ne i32 %229, 0
  br label %241

241:                                              ; preds = %257, %239
  %242 = phi i8* [ %186, %239 ], [ %258, %257 ]
  %243 = load i8, i8* %242, align 1
  %244 = add i8 %243, -48
  %245 = icmp ult i8 %244, 10
  %246 = add i8 %243, -65
  %247 = icmp ult i8 %246, 26
  %248 = or i1 %245, %247
  br i1 %248, label %257, label %249

249:                                              ; preds = %241
  %250 = add i8 %243, -97
  %251 = icmp ult i8 %250, 26
  %252 = icmp eq i8 %243, 45
  %253 = or i1 %252, %251
  %254 = icmp eq i8 %243, 46
  %255 = and i1 %240, %254
  %256 = or i1 %255, %253
  br i1 %256, label %257, label %260

257:                                              ; preds = %249, %241
  %258 = getelementptr inbounds i8, i8* %242, i64 1
  %259 = icmp eq i8* %258, %188
  br i1 %259, label %260, label %241

260:                                              ; preds = %170, %161, %199, %190, %257, %249, %143, %133, %124, %237, %232, %225, %218, %148, %122, %118
  %261 = phi i32 [ 0, %118 ], [ 1, %122 ], [ 0, %148 ], [ 0, %218 ], [ 0, %225 ], [ 1, %232 ], [ 1, %237 ], [ 0, %133 ], [ 0, %124 ], [ 1, %143 ], [ 1, %257 ], [ 0, %249 ], [ 0, %190 ], [ 0, %199 ], [ 0, %161 ], [ 0, %170 ]
  ret i32 %261
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @equal_case(i8*, i64, i8* nocapture readonly, i64, i32) #5 {
  %6 = trunc i32 %4 to i16
  %7 = icmp sgt i16 %6, -1
  br i1 %7, label %29, label %8

8:                                                ; preds = %5
  %9 = icmp ugt i64 %1, %3
  br i1 %9, label %10, label %25

10:                                               ; preds = %8
  %11 = and i32 %4, 16
  %12 = icmp ne i32 %11, 0
  br label %13

13:                                               ; preds = %21, %10
  %14 = phi i64 [ %1, %10 ], [ %23, %21 ]
  %15 = phi i8* [ %0, %10 ], [ %22, %21 ]
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  %18 = icmp eq i8 %16, 46
  %19 = and i1 %12, %18
  %20 = or i1 %17, %19
  br i1 %20, label %25, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds i8, i8* %15, i64 1
  %23 = add i64 %14, -1
  %24 = icmp ugt i64 %23, %3
  br i1 %24, label %13, label %25

25:                                               ; preds = %21, %13, %8
  %26 = phi i8* [ %0, %8 ], [ %22, %21 ], [ %15, %13 ]
  %27 = phi i64 [ %1, %8 ], [ %23, %21 ], [ %14, %13 ]
  %28 = icmp eq i64 %27, %3
  br i1 %28, label %31, label %29

29:                                               ; preds = %5, %25
  %30 = icmp eq i64 %1, %3
  br i1 %30, label %31, label %39

31:                                               ; preds = %25, %29
  %32 = phi i64 [ %1, %29 ], [ %3, %25 ]
  %33 = phi i8* [ %0, %29 ], [ %26, %25 ]
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = tail call i32 @bcmp(i8* %33, i8* %2, i64 %32)
  %37 = icmp eq i32 %36, 0
  %38 = zext i1 %37 to i32
  br label %39

39:                                               ; preds = %35, %31, %29
  %40 = phi i32 [ 0, %29 ], [ %38, %35 ], [ 1, %31 ]
  ret i32 %40
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @do_check_string(%struct.asn1_string_st*, i32, i32 (i8*, i64, i8*, i64, i32)* nocapture, i32, i32, i8*, i64, i8**) unnamed_addr #0 {
  %9 = alloca i8*, align 8
  %10 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %119, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %119, label %17

17:                                               ; preds = %13
  %18 = icmp sgt i32 %1, 0
  br i1 %18, label %19, label %46

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, %1
  br i1 %22, label %23, label %119

23:                                               ; preds = %19
  %24 = icmp eq i32 %1, 22
  br i1 %24, label %25, label %28

25:                                               ; preds = %23
  %26 = sext i32 %15 to i64
  %27 = tail call i32 %2(i8* nonnull %11, i64 %26, i8* %5, i64 %6, i32 %3) #11, !callees !2
  br label %36

28:                                               ; preds = %23
  %29 = trunc i64 %6 to i32
  %30 = icmp eq i32 %15, %29
  br i1 %30, label %31, label %119

31:                                               ; preds = %28
  %32 = icmp eq i64 %6, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %31
  %34 = tail call i32 @bcmp(i8* nonnull %11, i8* %5, i64 %6)
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %119

36:                                               ; preds = %33, %31, %25
  %37 = phi i32 [ %27, %25 ], [ 1, %31 ], [ 1, %33 ]
  %38 = icmp sgt i32 %37, 0
  %39 = icmp ne i8** %7, null
  %40 = and i1 %39, %38
  br i1 %40, label %41, label %119

41:                                               ; preds = %36
  %42 = load i8*, i8** %10, align 8
  %43 = load i32, i32* %14, align 8
  %44 = sext i32 %43 to i64
  %45 = tail call i8* @OPENSSL_strndup(i8* %42, i64 %44) #11
  store i8* %45, i8** %7, align 8
  br label %119

46:                                               ; preds = %17
  %47 = bitcast i8** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #11
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %9, align 8
  %48 = call i32 @ASN1_STRING_to_UTF8(i8** nonnull %9, %struct.asn1_string_st* %0) #11
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %118, label %50

50:                                               ; preds = %46
  %51 = icmp eq i32 %4, 2
  %52 = load i8*, i8** %9, align 8
  %53 = sext i32 %48 to i64
  br i1 %51, label %54, label %107

54:                                               ; preds = %50
  %55 = icmp eq i32 %48, 0
  br i1 %55, label %115, label %56

56:                                               ; preds = %54
  %57 = add nsw i64 %53, -1
  %58 = getelementptr inbounds i8, i8* %52, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, 46
  %61 = select i1 %60, i64 %57, i64 %53
  %62 = icmp ugt i64 %61, 1
  br i1 %62, label %63, label %73

63:                                               ; preds = %56
  %64 = load i8, i8* %52, align 1
  %65 = icmp eq i8 %64, 42
  br i1 %65, label %66, label %77

66:                                               ; preds = %63
  %67 = getelementptr inbounds i8, i8* %52, i64 1
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 46
  br i1 %69, label %70, label %77

70:                                               ; preds = %66
  %71 = getelementptr inbounds i8, i8* %52, i64 2
  %72 = add nsw i64 %61, -2
  br label %73

73:                                               ; preds = %70, %56
  %74 = phi i8* [ %71, %70 ], [ %52, %56 ]
  %75 = phi i64 [ %72, %70 ], [ %61, %56 ]
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %115, label %77

77:                                               ; preds = %73, %66, %63
  %78 = phi i64 [ %75, %73 ], [ %61, %66 ], [ %61, %63 ]
  %79 = phi i8* [ %74, %73 ], [ %52, %66 ], [ %52, %63 ]
  %80 = add nsw i64 %78, -1
  br label %81

81:                                               ; preds = %103, %77
  %82 = phi i64 [ 0, %77 ], [ %105, %103 ]
  %83 = phi i64 [ 0, %77 ], [ %104, %103 ]
  %84 = getelementptr inbounds i8, i8* %79, i64 %82
  %85 = load i8, i8* %84, align 1
  %86 = add i8 %85, -48
  %87 = icmp ult i8 %86, 10
  %88 = and i8 %85, -33
  %89 = add i8 %88, -65
  %90 = icmp ult i8 %89, 26
  %91 = or i1 %87, %90
  br i1 %91, label %103, label %92

92:                                               ; preds = %81
  %93 = icmp eq i8 %85, 45
  %94 = icmp ugt i64 %82, %83
  %95 = and i1 %94, %93
  br i1 %95, label %103, label %96

96:                                               ; preds = %92
  switch i8 %85, label %97 [
    i8 95, label %103
    i8 58, label %103
  ]

97:                                               ; preds = %96
  %98 = icmp eq i8 %85, 46
  %99 = and i1 %94, %98
  %100 = icmp ult i64 %82, %80
  %101 = and i1 %100, %99
  %102 = add nuw i64 %82, 1
  br i1 %101, label %103, label %115

103:                                              ; preds = %97, %96, %96, %92, %81
  %104 = phi i64 [ %83, %96 ], [ %83, %92 ], [ %83, %81 ], [ %83, %96 ], [ %102, %97 ]
  %105 = add nuw i64 %82, 1
  %106 = icmp eq i64 %105, %78
  br i1 %106, label %107, label %81

107:                                              ; preds = %103, %50
  %108 = call i32 %2(i8* %52, i64 %53, i8* %5, i64 %6, i32 %3) #11, !callees !2
  %109 = icmp sgt i32 %108, 0
  %110 = icmp ne i8** %7, null
  %111 = and i1 %110, %109
  br i1 %111, label %112, label %115

112:                                              ; preds = %107
  %113 = load i8*, i8** %9, align 8
  %114 = call i8* @OPENSSL_strndup(i8* %113, i64 %53) #11
  store i8* %114, i8** %7, align 8
  br label %115

115:                                              ; preds = %97, %107, %112, %54, %73
  %116 = phi i32 [ %108, %112 ], [ %108, %107 ], [ 0, %54 ], [ 0, %73 ], [ 0, %97 ]
  %117 = load i8*, i8** %9, align 8
  call void @OPENSSL_free(i8* %117) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #11
  br label %119

118:                                              ; preds = %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #11
  br label %119

119:                                              ; preds = %33, %28, %41, %36, %115, %118, %19, %8, %13
  %120 = phi i32 [ -1, %118 ], [ 0, %13 ], [ 0, %8 ], [ 0, %19 ], [ %37, %41 ], [ %37, %36 ], [ %116, %115 ], [ 0, %28 ], [ 0, %33 ]
  ret i32 %120
}

declare void @GENERAL_NAMES_free(%struct.stack_st_GENERAL_NAME*) local_unnamed_addr #2

declare i32 @OPENSSL_strncasecmp(i8*, i8*, i64) local_unnamed_addr #2

declare i8* @OPENSSL_strndup(i8*, i64) local_unnamed_addr #2

declare i32 @ASN1_STRING_to_UTF8(i8**, %struct.asn1_string_st*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__isoc99_sscanf(i8* nocapture readonly, i8* nocapture readonly, ...) local_unnamed_addr #9

declare i32 @CONF_parse_list(i8*, i8 signext, i32, i32 (i8*, i32, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @ipv6_cb(i8* nocapture readonly, i32, i8* nocapture) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 16
  br i1 %11, label %97, label %12

12:                                               ; preds = %3
  %13 = icmp eq i32 %1, 0
  br i1 %13, label %14, label %27

14:                                               ; preds = %12
  %15 = getelementptr inbounds i8, i8* %2, i64 20
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %19, label %20

19:                                               ; preds = %14
  store i32 %10, i32* %16, align 4
  br label %22

20:                                               ; preds = %14
  %21 = icmp eq i32 %17, %10
  br i1 %21, label %22, label %97

22:                                               ; preds = %20, %19
  %23 = getelementptr inbounds i8, i8* %2, i64 24
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %24, align 4
  br label %97

27:                                               ; preds = %12
  %28 = icmp sgt i32 %1, 4
  br i1 %28, label %29, label %65

29:                                               ; preds = %27
  %30 = icmp sgt i32 %10, 12
  br i1 %30, label %97, label %31

31:                                               ; preds = %29
  %32 = sext i32 %1 to i64
  %33 = getelementptr inbounds i8, i8* %0, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %97

36:                                               ; preds = %31
  %37 = sext i32 %10 to i64
  %38 = getelementptr inbounds i8, i8* %2, i64 %37
  %39 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %39) #11
  store i32 -1431655766, i32* %4, align 4
  %40 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %40) #11
  store i32 -1431655766, i32* %5, align 4
  %41 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41) #11
  store i32 -1431655766, i32* %6, align 4
  %42 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %42) #11
  store i32 -1431655766, i32* %7, align 4
  %43 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.19, i64 0, i64 0), i32* nonnull %4, i32* nonnull %5, i32* nonnull %6, i32* nonnull %7) #11
  %44 = icmp eq i32 %43, 4
  br i1 %44, label %45, label %64

45:                                               ; preds = %36
  %46 = load i32, i32* %4, align 4
  %47 = load i32, i32* %5, align 4
  %48 = or i32 %47, %46
  %49 = load i32, i32* %6, align 4
  %50 = or i32 %48, %49
  %51 = load i32, i32* %7, align 4
  %52 = or i32 %50, %51
  %53 = icmp ugt i32 %52, 255
  br i1 %53, label %64, label %54

54:                                               ; preds = %45
  %55 = trunc i32 %46 to i8
  store i8 %55, i8* %38, align 1
  %56 = trunc i32 %47 to i8
  %57 = getelementptr inbounds i8, i8* %38, i64 1
  store i8 %56, i8* %57, align 1
  %58 = trunc i32 %49 to i8
  %59 = getelementptr inbounds i8, i8* %38, i64 2
  store i8 %58, i8* %59, align 1
  %60 = trunc i32 %51 to i8
  %61 = getelementptr inbounds i8, i8* %38, i64 3
  store i8 %60, i8* %61, align 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %42) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %40) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %39) #11
  %62 = load i32, i32* %9, align 4
  %63 = add nsw i32 %62, 4
  store i32 %63, i32* %9, align 4
  br label %97

64:                                               ; preds = %36, %45
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %42) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %40) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %39) #11
  br label %97

65:                                               ; preds = %27
  %66 = sext i32 %10 to i64
  %67 = getelementptr inbounds i8, i8* %2, i64 %66
  br label %68

68:                                               ; preds = %65, %85
  %69 = phi i32 [ %72, %85 ], [ %1, %65 ]
  %70 = phi i32 [ %88, %85 ], [ 0, %65 ]
  %71 = phi i8* [ %73, %85 ], [ %0, %65 ]
  %72 = add nsw i32 %69, -1
  %73 = getelementptr inbounds i8, i8* %71, i64 1
  %74 = load i8, i8* %71, align 1
  %75 = shl i32 %70, 4
  %76 = zext i8 %74 to i32
  %77 = add i8 %74, -48
  %78 = icmp ult i8 %77, 10
  br i1 %78, label %85, label %79

79:                                               ; preds = %68
  %80 = add i8 %74, -65
  %81 = icmp ult i8 %80, 6
  br i1 %81, label %85, label %82

82:                                               ; preds = %79
  %83 = add i8 %74, -97
  %84 = icmp ult i8 %83, 6
  br i1 %84, label %85, label %97

85:                                               ; preds = %82, %79, %68
  %86 = phi i32 [ -48, %68 ], [ -55, %79 ], [ -87, %82 ]
  %87 = add nsw i32 %86, %76
  %88 = or i32 %87, %75
  %89 = icmp eq i32 %72, 0
  br i1 %89, label %90, label %68

90:                                               ; preds = %85
  %91 = lshr i32 %88, 8
  %92 = trunc i32 %91 to i8
  store i8 %92, i8* %67, align 1
  %93 = trunc i32 %88 to i8
  %94 = getelementptr inbounds i8, i8* %67, i64 1
  store i8 %93, i8* %94, align 1
  %95 = load i32, i32* %9, align 4
  %96 = add nsw i32 %95, 2
  store i32 %96, i32* %9, align 4
  br label %97

97:                                               ; preds = %82, %64, %22, %90, %54, %31, %29, %20, %3
  %98 = phi i32 [ 0, %3 ], [ 0, %20 ], [ 0, %29 ], [ 0, %31 ], [ 0, %64 ], [ 1, %54 ], [ 1, %90 ], [ 1, %22 ], [ 0, %82 ]
  ret i32 %98
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly }
attributes #11 = { nounwind }
attributes #12 = { nounwind readonly }
attributes #13 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 (i8*, i64, i8*, i64, i32)* @equal_case, i32 (i8*, i64, i8*, i64, i32)* @equal_email, i32 (i8*, i64, i8*, i64, i32)* @equal_nocase, i32 (i8*, i64, i8*, i64, i32)* @equal_wildcard}
