; ModuleID = '../../base/metrics/histogram_samples.cc'
source_filename = "../../base/metrics/histogram_samples.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::HistogramSamples::LocalMetadata" = type { %"struct.base::HistogramSamples::Metadata" }
%"struct.base::HistogramSamples::Metadata" = type { i64, i64, i32, %"union.base::HistogramSamples::AtomicSingleSample" }
%"union.base::HistogramSamples::AtomicSingleSample" = type { i32 }
%"class.base::HistogramSamples" = type { i32 (...)**, %"struct.base::HistogramSamples::Metadata"* }
%"class.base::SampleCountIterator" = type { i32 (...)** }
%"class.base::SingleSampleIterator" = type <{ %"class.base::SampleCountIterator", i32, [4 x i8], i64, i64, i32, [4 x i8] }>
%"class.base::PickleIterator" = type { i8*, i64, i64 }
%"class.base::(anonymous namespace)::SampleCountPickleIterator" = type <{ %"class.base::SampleCountIterator", %"class.base::PickleIterator"*, i32, [4 x i8], i64, i32, i8, [3 x i8] }>
%"class.base::Pickle" = type { i32 (...)**, %"struct.base::Pickle::Header"*, i64, i64, i64 }
%"struct.base::Pickle::Header" = type { i32 }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic.2", [4 x i8] }>
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i32 }
%"class.base::DictionaryValue" = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.7" }
%"union.absl::variant_internal::DestructibleUnionImpl.7" = type { %"union.absl::variant_internal::DestructibleUnionImpl.8" }
%"union.absl::variant_internal::DestructibleUnionImpl.8" = type { %"union.absl::variant_internal::DestructibleUnionImpl.9" }
%"union.absl::variant_internal::DestructibleUnionImpl.9" = type { %"union.absl::variant_internal::DestructibleUnionImpl.10" }
%"union.absl::variant_internal::DestructibleUnionImpl.10" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZTVN4base16HistogramSamplesE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::HistogramSamples"*)* @_ZN4base16HistogramSamplesD2Ev to i8*), i8* bitcast (void (%"class.base::HistogramSamples"*)* @_ZN4base16HistogramSamplesD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.base::HistogramSamples"*, %"class.base::HistogramSamples"*)* @_ZN4base16HistogramSamples3AddERKS0_ to i8*), i8* bitcast (i1 (%"class.base::HistogramSamples"*, %"class.base::PickleIterator"*)* @_ZN4base16HistogramSamples13AddFromPickleEPNS_14PickleIteratorE to i8*), i8* bitcast (void (%"class.base::HistogramSamples"*, %"class.base::HistogramSamples"*)* @_ZN4base16HistogramSamples8SubtractERKS0_ to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.base::HistogramSamples"*, %"class.base::Pickle"*)* @_ZNK4base16HistogramSamples9SerializeEPNS_6PickleE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*)* @_ZNK4base16HistogramSamples12GetAsciiBodyEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*, i8*, i64, i32)* @_ZNK4base16HistogramSamples14GetAsciiHeaderENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi to i8*)] }, align 8
@.str = private unnamed_addr constant [27 x i8] c"UMA.NegativeSamples.Reason\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"UMA.NegativeSamples.Increment\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"UMA.NegativeSamples.Histogram\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"header\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"body\00", align 1
@.str.6 = private unnamed_addr constant [36 x i8] c"Histogram: %.*s recorded %d samples\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c" (flags = 0x%x)\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"O\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c" (%d = %3.1f%%)\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@_ZTVN4base20SingleSampleIteratorE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::SampleCountIterator"*)* @_ZN4base19SampleCountIteratorD2Ev to i8*), i8* bitcast (void (%"class.base::SingleSampleIterator"*)* @_ZN4base20SingleSampleIteratorD0Ev to i8*), i8* bitcast (i1 (%"class.base::SingleSampleIterator"*)* @_ZNK4base20SingleSampleIterator4DoneEv to i8*), i8* bitcast (void (%"class.base::SingleSampleIterator"*)* @_ZN4base20SingleSampleIterator4NextEv to i8*), i8* bitcast (void (%"class.base::SingleSampleIterator"*, i32*, i64*, i32*)* @_ZNK4base20SingleSampleIterator3GetEPiPlS1_ to i8*), i8* bitcast (i1 (%"class.base::SingleSampleIterator"*, i64*)* @_ZNK4base20SingleSampleIterator14GetBucketIndexEPm to i8*)] }, align 8
@_ZTVN4base19SampleCountIteratorE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::SampleCountIterator"*)* @_ZN4base19SampleCountIteratorD2Ev to i8*), i8* bitcast (void (%"class.base::SampleCountIterator"*)* @_ZN4base19SampleCountIteratorD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.base::SampleCountIterator"*, i64*)* @_ZNK4base19SampleCountIterator14GetBucketIndexEPm to i8*)] }, align 8
@_ZTVN4base12_GLOBAL__N_125SampleCountPickleIteratorE = internal unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::SampleCountIterator"*)* @_ZN4base19SampleCountIteratorD2Ev to i8*), i8* bitcast (void (%"class.base::(anonymous namespace)::SampleCountPickleIterator"*)* @_ZN4base12_GLOBAL__N_125SampleCountPickleIteratorD0Ev to i8*), i8* bitcast (i1 (%"class.base::(anonymous namespace)::SampleCountPickleIterator"*)* @_ZNK4base12_GLOBAL__N_125SampleCountPickleIterator4DoneEv to i8*), i8* bitcast (void (%"class.base::(anonymous namespace)::SampleCountPickleIterator"*)* @_ZN4base12_GLOBAL__N_125SampleCountPickleIterator4NextEv to i8*), i8* bitcast (void (%"class.base::(anonymous namespace)::SampleCountPickleIterator"*, i32*, i64*, i32*)* @_ZNK4base12_GLOBAL__N_125SampleCountPickleIterator3GetEPiPlS2_ to i8*), i8* bitcast (i1 (%"class.base::SampleCountIterator"*, i64*)* @_ZNK4base19SampleCountIterator14GetBucketIndexEPm to i8*)] }, align 8
@_ZZN4base16HistogramSamples20RecordNegativeSampleENS0_20NegativeSampleReasonEiE24atomic_histogram_pointer.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN4base16HistogramSamples20RecordNegativeSampleENS0_20NegativeSampleReasonEiE24atomic_histogram_pointer_0.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8

@_ZN4base16HistogramSamples13LocalMetadataC1Ev = hidden unnamed_addr alias void (%"struct.base::HistogramSamples::LocalMetadata"*), void (%"struct.base::HistogramSamples::LocalMetadata"*)* @_ZN4base16HistogramSamples13LocalMetadataC2Ev
@_ZN4base16HistogramSamplesD1Ev = hidden unnamed_addr alias void (%"class.base::HistogramSamples"*), void (%"class.base::HistogramSamples"*)* @_ZN4base16HistogramSamplesD2Ev
@_ZN4base19SampleCountIteratorD1Ev = hidden unnamed_addr alias void (%"class.base::SampleCountIterator"*), void (%"class.base::SampleCountIterator"*)* @_ZN4base19SampleCountIteratorD2Ev
@_ZN4base20SingleSampleIteratorC1Eili = hidden unnamed_addr alias void (%"class.base::SingleSampleIterator"*, i32, i64, i32), void (%"class.base::SingleSampleIterator"*, i32, i64, i32)* @_ZN4base20SingleSampleIteratorC2Eili
@_ZN4base20SingleSampleIteratorC1Eilim = hidden unnamed_addr alias void (%"class.base::SingleSampleIterator"*, i32, i64, i32, i64), void (%"class.base::SingleSampleIterator"*, i32, i64, i32, i64)* @_ZN4base20SingleSampleIteratorC2Eilim
@_ZN4base20SingleSampleIteratorD2Ev = hidden unnamed_addr alias void (%"class.base::SingleSampleIterator"*), bitcast (void (%"class.base::SampleCountIterator"*)* @_ZN4base19SampleCountIteratorD2Ev to void (%"class.base::SingleSampleIterator"*)*)
@_ZN4base20SingleSampleIteratorD1Ev = hidden unnamed_addr alias void (%"class.base::SingleSampleIterator"*), bitcast (void (%"class.base::SampleCountIterator"*)* @_ZN4base19SampleCountIteratorD2Ev to void (%"class.base::SingleSampleIterator"*)*)

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK4base16HistogramSamples18AtomicSingleSample4LoadEv(%"union.base::HistogramSamples::AtomicSingleSample"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"union.base::HistogramSamples::AtomicSingleSample", %"union.base::HistogramSamples::AtomicSingleSample"* %0, i64 0, i32 0
  %3 = load atomic i32, i32* %2 acquire, align 4
  %4 = icmp eq i32 %3, -1
  %5 = select i1 %4, i32 0, i32 %3
  ret i32 %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4base16HistogramSamples18AtomicSingleSample7ExtractEb(%"union.base::HistogramSamples::AtomicSingleSample"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"union.base::HistogramSamples::AtomicSingleSample", %"union.base::HistogramSamples::AtomicSingleSample"* %0, i64 0, i32 0
  %4 = sext i1 %1 to i32
  %5 = atomicrmw volatile xchg i32* %3, i32 %4 monotonic
  %6 = icmp eq i32 %5, -1
  %7 = select i1 %6, i32 0, i32 %5
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base16HistogramSamples18AtomicSingleSample10AccumulateEmi(%"union.base::HistogramSamples::AtomicSingleSample"*, i64, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %47, label %5

5:                                                ; preds = %3
  %6 = add i32 %2, 65535
  %7 = icmp ugt i32 %6, 131070
  %8 = icmp ugt i64 %1, 65535
  %9 = or i1 %8, %7
  br i1 %9, label %47, label %10

10:                                               ; preds = %5
  %11 = icmp slt i32 %2, 0
  %12 = sub nsw i32 0, %2
  %13 = select i1 %11, i32 %12, i32 %2
  %14 = trunc i32 %13 to i16
  %15 = trunc i64 %1 to i16
  %16 = getelementptr inbounds %"union.base::HistogramSamples::AtomicSingleSample", %"union.base::HistogramSamples::AtomicSingleSample"* %0, i64 0, i32 0
  %17 = trunc i64 %1 to i32
  %18 = and i32 %17, 65535
  br label %19

19:                                               ; preds = %44, %10
  %20 = load atomic i32, i32* %16 acquire, align 4
  %21 = icmp eq i32 %20, -1
  br i1 %21, label %47, label %22

22:                                               ; preds = %19
  %23 = lshr i32 %20, 16
  %24 = trunc i32 %23 to i16
  %25 = icmp eq i32 %20, 0
  %26 = trunc i32 %20 to i16
  %27 = icmp eq i16 %26, %15
  %28 = or i1 %25, %27
  br i1 %28, label %29, label %47

29:                                               ; preds = %22
  br i1 %11, label %30, label %34

30:                                               ; preds = %29
  %31 = tail call { i16, i1 } @llvm.usub.with.overflow.i16(i16 %24, i16 %14) #13
  %32 = extractvalue { i16, i1 } %31, 1
  %33 = extractvalue { i16, i1 } %31, 0
  br i1 %32, label %47, label %38, !prof !2

34:                                               ; preds = %29
  %35 = tail call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %24, i16 %14) #13
  %36 = extractvalue { i16, i1 } %35, 1
  %37 = extractvalue { i16, i1 } %35, 0
  br i1 %36, label %47, label %38, !prof !2

38:                                               ; preds = %30, %34
  %39 = phi i16 [ %33, %30 ], [ %37, %34 ]
  %40 = zext i16 %39 to i32
  %41 = shl nuw i32 %40, 16
  %42 = or i32 %41, %18
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %47, label %44

44:                                               ; preds = %38
  %45 = cmpxchg volatile i32* %16, i32 %20, i32 %42 release monotonic
  %46 = extractvalue { i32, i1 } %45, 1
  br i1 %46, label %47, label %19

47:                                               ; preds = %34, %44, %38, %19, %30, %22, %5, %3
  %48 = phi i1 [ true, %3 ], [ false, %5 ], [ false, %30 ], [ false, %34 ], [ false, %38 ], [ false, %19 ], [ true, %44 ], [ false, %22 ]
  ret i1 %48
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base16HistogramSamples18AtomicSingleSample10IsDisabledEv(%"union.base::HistogramSamples::AtomicSingleSample"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"union.base::HistogramSamples::AtomicSingleSample", %"union.base::HistogramSamples::AtomicSingleSample"* %0, i64 0, i32 0
  %3 = load atomic i32, i32* %2 acquire, align 4
  %4 = icmp eq i32 %3, -1
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base16HistogramSamples13LocalMetadataC2Ev(%"struct.base::HistogramSamples::LocalMetadata"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.base::HistogramSamples::LocalMetadata"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base16HistogramSamplesC2EmPNS0_8MetadataE(%"class.base::HistogramSamples"* nocapture, i64, %"struct.base::HistogramSamples::Metadata"*) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.base::HistogramSamples", %"class.base::HistogramSamples"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4base16HistogramSamplesE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.base::HistogramSamples", %"class.base::HistogramSamples"* %0, i64 0, i32 1
  store %"struct.base::HistogramSamples::Metadata"* %2, %"struct.base::HistogramSamples::Metadata"** %5, align 8
  %6 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %2, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  store i64 %1, i64* %6, align 8
  br label %10

10:                                               ; preds = %3, %9
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4base16HistogramSamplesD2Ev(%"class.base::HistogramSamples"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN4base16HistogramSamplesD0Ev(%"class.base::HistogramSamples"* nocapture readnone) unnamed_addr #4 align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base16HistogramSamples3AddERKS0_(%"class.base::HistogramSamples"*, %"class.base::HistogramSamples"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::HistogramSamples", %"class.base::HistogramSamples"* %1, i64 0, i32 1
  %4 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %3, align 8
  %5 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %4, i64 0, i32 1
  %6 = load atomic i64, i64* %5 monotonic, align 8
  %7 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %4, i64 0, i32 2
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = getelementptr inbounds %"class.base::HistogramSamples", %"class.base::HistogramSamples"* %0, i64 0, i32 1
  %10 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %9, align 8
  %11 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %10, i64 0, i32 1
  %12 = atomicrmw volatile add i64* %11, i64 %6 monotonic
  %13 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %9, align 8
  %14 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %13, i64 0, i32 2
  %15 = atomicrmw volatile add i32* %14, i32 %8 monotonic
  %16 = bitcast %"class.base::HistogramSamples"* %1 to %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)***
  %17 = load %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)**, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)** %17, i64 8
  %19 = load %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)** %18, align 8
  %20 = tail call %"class.base::SampleCountIterator"* %19(%"class.base::HistogramSamples"* %1) #13
  %21 = bitcast %"class.base::HistogramSamples"* %0 to i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)***
  %22 = load i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)**, i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)*** %21, align 8
  %23 = getelementptr inbounds i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)*, i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)** %22, i64 10
  %24 = load i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)*, i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)** %23, align 8
  %25 = tail call zeroext i1 %24(%"class.base::HistogramSamples"* %0, %"class.base::SampleCountIterator"* %20, i32 0) #13
  %26 = icmp eq %"class.base::SampleCountIterator"* %20, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %2
  %28 = bitcast %"class.base::SampleCountIterator"* %20 to void (%"class.base::SampleCountIterator"*)***
  %29 = load void (%"class.base::SampleCountIterator"*)**, void (%"class.base::SampleCountIterator"*)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %29, i64 1
  %31 = load void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %30, align 8
  tail call void %31(%"class.base::SampleCountIterator"* nonnull %20) #13
  br label %32

32:                                               ; preds = %2, %27
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base16HistogramSamples19IncreaseSumAndCountEli(%"class.base::HistogramSamples"* nocapture readonly, i64, i32) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.base::HistogramSamples", %"class.base::HistogramSamples"* %0, i64 0, i32 1
  %5 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %4, align 8
  %6 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %5, i64 0, i32 1
  %7 = atomicrmw volatile add i64* %6, i64 %1 monotonic
  %8 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %4, align 8
  %9 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %8, i64 0, i32 2
  %10 = atomicrmw volatile add i32* %9, i32 %2 monotonic
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base16HistogramSamples13AddFromPickleEPNS_14PickleIteratorE(%"class.base::HistogramSamples"*, %"class.base::PickleIterator"*) unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca %"class.base::(anonymous namespace)::SampleCountPickleIterator", align 8
  %6 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #13
  store i64 -6148914691236517206, i64* %3, align 8
  %7 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #13
  store i32 -1431655766, i32* %4, align 4
  %8 = call zeroext i1 @_ZN4base14PickleIterator9ReadInt64EPl(%"class.base::PickleIterator"* %1, i64* nonnull %3) #13
  br i1 %8, label %9, label %45

9:                                                ; preds = %2
  %10 = call zeroext i1 @_ZN4base14PickleIterator7ReadIntEPi(%"class.base::PickleIterator"* %1, i32* nonnull %4) #13
  br i1 %10, label %11, label %45

11:                                               ; preds = %9
  %12 = load i64, i64* %3, align 8
  %13 = load i32, i32* %4, align 4
  %14 = getelementptr inbounds %"class.base::HistogramSamples", %"class.base::HistogramSamples"* %0, i64 0, i32 1
  %15 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %14, align 8
  %16 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %15, i64 0, i32 1
  %17 = atomicrmw volatile add i64* %16, i64 %12 monotonic
  %18 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %14, align 8
  %19 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %18, i64 0, i32 2
  %20 = atomicrmw volatile add i32* %19, i32 %13 monotonic
  %21 = bitcast %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %21) #13
  %22 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %5, i64 0, i32 2
  %23 = bitcast i32* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 24, i1 false)
  %24 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4base12_GLOBAL__N_125SampleCountPickleIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %24, align 8
  %25 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %5, i64 0, i32 1
  store %"class.base::PickleIterator"* %1, %"class.base::PickleIterator"** %25, align 8
  %26 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %5, i64 0, i32 6
  store i8 0, i8* %26, align 4
  %27 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %5, i64 0, i32 2
  %28 = call zeroext i1 @_ZN4base14PickleIterator7ReadIntEPi(%"class.base::PickleIterator"* %1, i32* %27) #13
  br i1 %28, label %29, label %37

29:                                               ; preds = %11
  %30 = load %"class.base::PickleIterator"*, %"class.base::PickleIterator"** %25, align 8
  %31 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %5, i64 0, i32 4
  %32 = call zeroext i1 @_ZN4base14PickleIterator9ReadInt64EPl(%"class.base::PickleIterator"* %30, i64* %31) #13
  br i1 %32, label %33, label %37

33:                                               ; preds = %29
  %34 = load %"class.base::PickleIterator"*, %"class.base::PickleIterator"** %25, align 8
  %35 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %5, i64 0, i32 5
  %36 = call zeroext i1 @_ZN4base14PickleIterator7ReadIntEPi(%"class.base::PickleIterator"* %34, i32* %35) #13
  br i1 %36, label %38, label %37

37:                                               ; preds = %33, %29, %11
  store i8 1, i8* %26, align 4
  br label %38

38:                                               ; preds = %33, %37
  %39 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %5, i64 0, i32 0
  %40 = bitcast %"class.base::HistogramSamples"* %0 to i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)***
  %41 = load i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)**, i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)*** %40, align 8
  %42 = getelementptr inbounds i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)*, i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)** %41, i64 10
  %43 = load i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)*, i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)** %42, align 8
  %44 = call zeroext i1 %43(%"class.base::HistogramSamples"* %0, %"class.base::SampleCountIterator"* nonnull %39, i32 0) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %21) #13
  br label %45

45:                                               ; preds = %2, %9, %38
  %46 = phi i1 [ %44, %38 ], [ false, %9 ], [ false, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #13
  ret i1 %46
}

declare zeroext i1 @_ZN4base14PickleIterator9ReadInt64EPl(%"class.base::PickleIterator"*, i64*) local_unnamed_addr #6

declare zeroext i1 @_ZN4base14PickleIterator7ReadIntEPi(%"class.base::PickleIterator"*, i32*) local_unnamed_addr #6

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4base19SampleCountIteratorD2Ev(%"class.base::SampleCountIterator"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base16HistogramSamples8SubtractERKS0_(%"class.base::HistogramSamples"*, %"class.base::HistogramSamples"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::HistogramSamples", %"class.base::HistogramSamples"* %1, i64 0, i32 1
  %4 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %3, align 8
  %5 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %4, i64 0, i32 1
  %6 = load atomic i64, i64* %5 monotonic, align 8
  %7 = sub nsw i64 0, %6
  %8 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %4, i64 0, i32 2
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = sub nsw i32 0, %9
  %11 = getelementptr inbounds %"class.base::HistogramSamples", %"class.base::HistogramSamples"* %0, i64 0, i32 1
  %12 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %11, align 8
  %13 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %12, i64 0, i32 1
  %14 = atomicrmw volatile add i64* %13, i64 %7 monotonic
  %15 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %11, align 8
  %16 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %15, i64 0, i32 2
  %17 = atomicrmw volatile add i32* %16, i32 %10 monotonic
  %18 = bitcast %"class.base::HistogramSamples"* %1 to %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)***
  %19 = load %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)**, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*** %18, align 8
  %20 = getelementptr inbounds %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)** %19, i64 8
  %21 = load %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)** %20, align 8
  %22 = tail call %"class.base::SampleCountIterator"* %21(%"class.base::HistogramSamples"* %1) #13
  %23 = bitcast %"class.base::HistogramSamples"* %0 to i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)***
  %24 = load i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)**, i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)*** %23, align 8
  %25 = getelementptr inbounds i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)*, i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)** %24, i64 10
  %26 = load i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)*, i1 (%"class.base::HistogramSamples"*, %"class.base::SampleCountIterator"*, i32)** %25, align 8
  %27 = tail call zeroext i1 %26(%"class.base::HistogramSamples"* %0, %"class.base::SampleCountIterator"* %22, i32 1) #13
  %28 = icmp eq %"class.base::SampleCountIterator"* %22, null
  br i1 %28, label %34, label %29

29:                                               ; preds = %2
  %30 = bitcast %"class.base::SampleCountIterator"* %22 to void (%"class.base::SampleCountIterator"*)***
  %31 = load void (%"class.base::SampleCountIterator"*)**, void (%"class.base::SampleCountIterator"*)*** %30, align 8
  %32 = getelementptr inbounds void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %31, i64 1
  %33 = load void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %32, align 8
  tail call void %33(%"class.base::SampleCountIterator"* nonnull %22) #13
  br label %34

34:                                               ; preds = %2, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4base16HistogramSamples9SerializeEPNS_6PickleE(%"class.base::HistogramSamples"*, %"class.base::Pickle"*) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = getelementptr inbounds %"class.base::HistogramSamples", %"class.base::HistogramSamples"* %0, i64 0, i32 1
  %12 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %11, align 8
  %13 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %12, i64 0, i32 1
  %14 = load atomic i64, i64* %13 monotonic, align 8
  %15 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15)
  store i64 %14, i64* %7, align 8
  call void @_ZN4base6Pickle16WriteBytesStaticILm8EEEvPKv(%"class.base::Pickle"* %1, i8* nonnull %15) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15)
  %16 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %11, align 8
  %17 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %16, i64 0, i32 2
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19)
  store i32 %18, i32* %5, align 4
  call void @_ZN4base6Pickle16WriteBytesStaticILm4EEEvPKv(%"class.base::Pickle"* %1, i8* nonnull %19) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19)
  %20 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #13
  store i32 -1431655766, i32* %8, align 4
  %21 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #13
  store i64 -6148914691236517206, i64* %9, align 8
  %22 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #13
  store i32 -1431655766, i32* %10, align 4
  %23 = bitcast %"class.base::HistogramSamples"* %0 to %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)***
  %24 = load %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)**, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*** %23, align 8
  %25 = getelementptr inbounds %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)** %24, i64 8
  %26 = load %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)** %25, align 8
  %27 = call %"class.base::SampleCountIterator"* %26(%"class.base::HistogramSamples"* %0) #13
  %28 = bitcast %"class.base::SampleCountIterator"* %27 to i1 (%"class.base::SampleCountIterator"*)***
  %29 = load i1 (%"class.base::SampleCountIterator"*)**, i1 (%"class.base::SampleCountIterator"*)*** %28, align 8
  %30 = getelementptr inbounds i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %29, i64 2
  %31 = load i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %30, align 8
  %32 = call zeroext i1 %31(%"class.base::SampleCountIterator"* %27) #13
  br i1 %32, label %39, label %33

33:                                               ; preds = %2
  %34 = bitcast %"class.base::SampleCountIterator"* %27 to void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)***
  %35 = bitcast i32* %3 to i8*
  %36 = bitcast i64* %4 to i8*
  %37 = bitcast i32* %6 to i8*
  %38 = bitcast %"class.base::SampleCountIterator"* %27 to void (%"class.base::SampleCountIterator"*)***
  br label %47

39:                                               ; preds = %47, %2
  %40 = icmp eq %"class.base::SampleCountIterator"* %27, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %39
  %42 = bitcast %"class.base::SampleCountIterator"* %27 to void (%"class.base::SampleCountIterator"*)***
  %43 = load void (%"class.base::SampleCountIterator"*)**, void (%"class.base::SampleCountIterator"*)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %43, i64 1
  %45 = load void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %44, align 8
  call void %45(%"class.base::SampleCountIterator"* nonnull %27) #13
  br label %46

46:                                               ; preds = %39, %41
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #13
  ret void

47:                                               ; preds = %33, %47
  %48 = load void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)**, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*** %34, align 8
  %49 = getelementptr inbounds void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)** %48, i64 4
  %50 = load void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)** %49, align 8
  call void %50(%"class.base::SampleCountIterator"* %27, i32* nonnull %8, i64* nonnull %9, i32* nonnull %10) #13
  %51 = load i32, i32* %8, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35)
  store i32 %51, i32* %3, align 4
  call void @_ZN4base6Pickle16WriteBytesStaticILm4EEEvPKv(%"class.base::Pickle"* %1, i8* nonnull %35) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35)
  %52 = load i64, i64* %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36)
  store i64 %52, i64* %4, align 8
  call void @_ZN4base6Pickle16WriteBytesStaticILm8EEEvPKv(%"class.base::Pickle"* %1, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36)
  %53 = load i32, i32* %10, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37)
  store i32 %53, i32* %6, align 4
  call void @_ZN4base6Pickle16WriteBytesStaticILm4EEEvPKv(%"class.base::Pickle"* %1, i8* nonnull %37) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37)
  %54 = load void (%"class.base::SampleCountIterator"*)**, void (%"class.base::SampleCountIterator"*)*** %38, align 8
  %55 = getelementptr inbounds void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %54, i64 3
  %56 = load void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %55, align 8
  call void %56(%"class.base::SampleCountIterator"* %27) #13
  %57 = load i1 (%"class.base::SampleCountIterator"*)**, i1 (%"class.base::SampleCountIterator"*)*** %28, align 8
  %58 = getelementptr inbounds i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %57, i64 2
  %59 = load i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %58, align 8
  %60 = call zeroext i1 %59(%"class.base::SampleCountIterator"* %27) #13
  br i1 %60, label %39, label %47
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base16HistogramSamples22AccumulateSingleSampleEiim(%"class.base::HistogramSamples"* nocapture readonly, i32, i32, i64) local_unnamed_addr #7 align 2 {
  %5 = getelementptr inbounds %"class.base::HistogramSamples", %"class.base::HistogramSamples"* %0, i64 0, i32 1
  %6 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %5, align 8
  %7 = icmp eq i32 %2, 0
  br i1 %7, label %52, label %8

8:                                                ; preds = %4
  %9 = add i32 %2, 65535
  %10 = icmp ugt i32 %9, 131070
  %11 = icmp ugt i64 %3, 65535
  %12 = or i1 %11, %10
  br i1 %12, label %62, label %13

13:                                               ; preds = %8
  %14 = icmp slt i32 %2, 0
  %15 = sub nsw i32 0, %2
  %16 = select i1 %14, i32 %15, i32 %2
  %17 = trunc i32 %16 to i16
  %18 = trunc i64 %3 to i16
  %19 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %6, i64 0, i32 3, i32 0
  %20 = trunc i64 %3 to i32
  %21 = and i32 %20, 65535
  br label %22

22:                                               ; preds = %47, %13
  %23 = load atomic i32, i32* %19 acquire, align 4
  %24 = icmp eq i32 %23, -1
  br i1 %24, label %62, label %25

25:                                               ; preds = %22
  %26 = lshr i32 %23, 16
  %27 = trunc i32 %26 to i16
  %28 = icmp eq i32 %23, 0
  %29 = trunc i32 %23 to i16
  %30 = icmp eq i16 %29, %18
  %31 = or i1 %28, %30
  br i1 %31, label %32, label %62

32:                                               ; preds = %25
  br i1 %14, label %33, label %37

33:                                               ; preds = %32
  %34 = tail call { i16, i1 } @llvm.usub.with.overflow.i16(i16 %27, i16 %17) #13
  %35 = extractvalue { i16, i1 } %34, 1
  %36 = extractvalue { i16, i1 } %34, 0
  br i1 %35, label %62, label %41, !prof !2

37:                                               ; preds = %32
  %38 = tail call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %27, i16 %17) #13
  %39 = extractvalue { i16, i1 } %38, 1
  %40 = extractvalue { i16, i1 } %38, 0
  br i1 %39, label %62, label %41, !prof !2

41:                                               ; preds = %37, %33
  %42 = phi i16 [ %36, %33 ], [ %40, %37 ]
  %43 = zext i16 %42 to i32
  %44 = shl nuw i32 %43, 16
  %45 = or i32 %44, %21
  %46 = icmp eq i32 %45, -1
  br i1 %46, label %62, label %47

47:                                               ; preds = %41
  %48 = cmpxchg volatile i32* %19, i32 %23, i32 %45 release monotonic
  %49 = extractvalue { i32, i1 } %48, 1
  br i1 %49, label %50, label %22

50:                                               ; preds = %47
  %51 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %5, align 8
  br label %52

52:                                               ; preds = %50, %4
  %53 = phi %"struct.base::HistogramSamples::Metadata"* [ %51, %50 ], [ %6, %4 ]
  %54 = sext i32 %1 to i64
  %55 = sext i32 %2 to i64
  %56 = mul nsw i64 %55, %54
  %57 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %53, i64 0, i32 1
  %58 = atomicrmw volatile add i64* %57, i64 %56 monotonic
  %59 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %5, align 8
  %60 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %59, i64 0, i32 2
  %61 = atomicrmw volatile add i32* %60, i32 %2 monotonic
  br label %62

62:                                               ; preds = %25, %22, %41, %37, %33, %8, %52
  %63 = phi i1 [ true, %52 ], [ false, %8 ], [ false, %33 ], [ false, %37 ], [ false, %41 ], [ false, %22 ], [ false, %25 ]
  ret i1 %63
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base16HistogramSamples20RecordNegativeSampleENS0_20NegativeSampleReasonEi(%"class.base::HistogramSamples"* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = load atomic i64, i64* @_ZZN4base16HistogramSamples20RecordNegativeSampleENS0_20NegativeSampleReasonEiE24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %5 = inttoptr i64 %4 to %"class.base::HistogramBase"*
  %6 = icmp eq i64 %4, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i32 1, i32 9, i32 10, i32 1) #13
  %9 = ptrtoint %"class.base::HistogramBase"* %8 to i64
  store atomic i64 %9, i64* @_ZZN4base16HistogramSamples20RecordNegativeSampleENS0_20NegativeSampleReasonEiE24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.base::HistogramBase"* [ %5, %3 ], [ %8, %7 ]
  %12 = bitcast %"class.base::HistogramBase"* %11 to void (%"class.base::HistogramBase"*, i32)***
  %13 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %13, i64 6
  %15 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %14, align 8
  tail call void %15(%"class.base::HistogramBase"* %11, i32 %1) #13
  %16 = load atomic i64, i64* @_ZZN4base16HistogramSamples20RecordNegativeSampleENS0_20NegativeSampleReasonEiE24atomic_histogram_pointer_0.0.0.0.0.0 acquire, align 8
  %17 = inttoptr i64 %16 to %"class.base::HistogramBase"*
  %18 = icmp eq i64 %16, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %10
  %20 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 1, i32 1073741824, i32 100, i32 1) #13
  %21 = ptrtoint %"class.base::HistogramBase"* %20 to i64
  store atomic i64 %21, i64* @_ZZN4base16HistogramSamples20RecordNegativeSampleENS0_20NegativeSampleReasonEiE24atomic_histogram_pointer_0.0.0.0.0.0 release, align 8
  br label %22

22:                                               ; preds = %10, %19
  %23 = phi %"class.base::HistogramBase"* [ %17, %10 ], [ %20, %19 ]
  %24 = bitcast %"class.base::HistogramBase"* %23 to void (%"class.base::HistogramBase"*, i32)***
  %25 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %25, i64 6
  %27 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %26, align 8
  tail call void %27(%"class.base::HistogramBase"* %23, i32 %2) #13
  %28 = getelementptr inbounds %"class.base::HistogramSamples", %"class.base::HistogramSamples"* %0, i64 0, i32 1
  %29 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %28, align 8
  %30 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %29, i64 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = trunc i64 %31 to i32
  tail call void @_ZN4base18UmaHistogramSparseEPKci(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0), i32 %32) #13
  ret void
}

declare %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8*, i32, i32, i32, i32) local_unnamed_addr #6

declare %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8*, i32, i32, i32, i32) local_unnamed_addr #6

declare void @_ZN4base18UmaHistogramSparseEPKci(i8*, i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4base16HistogramSamples11ToGraphDictENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.base::DictionaryValue"* noalias sret, %"class.base::HistogramSamples"*, i8*, i64, i32) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = bitcast %"class.base::DictionaryValue"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 -86, i64 32, i1 false)
  tail call void @_ZN4base15DictionaryValueC1Ev(%"class.base::DictionaryValue"* %0) #13
  %9 = tail call %"class.base::Value"* @_ZN4base15DictionaryValue9SetStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_(%"class.base::DictionaryValue"* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i64 4, i8* %2, i64 %3) #13
  %10 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #13
  %11 = bitcast %"class.base::HistogramSamples"* %1 to void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*, i8*, i64, i32)***
  %12 = load void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*, i8*, i64, i32)**, void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*, i8*, i64, i32)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*, i8*, i64, i32)*, void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*, i8*, i64, i32)** %12, i64 12
  %14 = load void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*, i8*, i64, i32)*, void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*, i8*, i64, i32)** %13, align 8
  call void %14(%"class.std::__1::basic_string"* nonnull sret %6, %"class.base::HistogramSamples"* %1, i8* %2, i64 %3, i32 %4) #13
  %15 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = select i1 %18, i8* %20, i8* %10
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = zext i8 %17 to i64
  %25 = select i1 %18, i64 %23, i64 %24
  %26 = call %"class.base::Value"* @_ZN4base15DictionaryValue9SetStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_(%"class.base::DictionaryValue"* %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i64 6, i8* %21, i64 %25) #13
  %27 = load i8, i8* %16, align 1
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %5
  %30 = load i8*, i8** %19, align 8
  call void @_ZdlPv(i8* %30) #15
  br label %31

31:                                               ; preds = %5, %29
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #13
  %32 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #13
  %33 = bitcast %"class.base::HistogramSamples"* %1 to void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*)***
  %34 = load void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*)**, void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*)*, void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*)** %34, i64 11
  %36 = load void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*)*, void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*)** %35, align 8
  call void %36(%"class.std::__1::basic_string"* nonnull sret %7, %"class.base::HistogramSamples"* %1) #13
  %37 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = select i1 %40, i8* %42, i8* %32
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = zext i8 %39 to i64
  %47 = select i1 %40, i64 %45, i64 %46
  %48 = call %"class.base::Value"* @_ZN4base15DictionaryValue9SetStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_(%"class.base::DictionaryValue"* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i64 4, i8* %43, i64 %47) #13
  %49 = load i8, i8* %38, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %31
  %52 = load i8*, i8** %41, align 8
  call void @_ZdlPv(i8* %52) #15
  br label %53

53:                                               ; preds = %31, %51
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #13
  ret void
}

declare void @_ZN4base15DictionaryValueC1Ev(%"class.base::DictionaryValue"*) unnamed_addr #6

declare %"class.base::Value"* @_ZN4base15DictionaryValue9SetStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_(%"class.base::DictionaryValue"*, i8*, i64, i8*, i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4base16HistogramSamples14GetAsciiHeaderENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.std::__1::basic_string"* noalias sret, %"class.base::HistogramSamples"*, i8*, i64, i32) unnamed_addr #0 align 2 {
  %6 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #13
  %7 = trunc i64 %3 to i32
  %8 = bitcast %"class.base::HistogramSamples"* %1 to i32 (%"class.base::HistogramSamples"*)***
  %9 = load i32 (%"class.base::HistogramSamples"*)**, i32 (%"class.base::HistogramSamples"*)*** %8, align 8
  %10 = getelementptr inbounds i32 (%"class.base::HistogramSamples"*)*, i32 (%"class.base::HistogramSamples"*)** %9, i64 4
  %11 = load i32 (%"class.base::HistogramSamples"*)*, i32 (%"class.base::HistogramSamples"*)** %10, align 8
  %12 = tail call i32 %11(%"class.base::HistogramSamples"* %1) #13
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6, i64 0, i64 0), i32 %7, i8* %2, i32 %12) #13
  %13 = icmp eq i32 %4, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %5
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0), i32 %4) #13
  br label %15

15:                                               ; preds = %14, %5
  ret void
}

declare void @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"*, i8*, ...) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4base16HistogramSamples12GetAsciiBodyEv(%"class.std::__1::basic_string"* noalias sret, %"class.base::HistogramSamples"*) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca %"class.std::__1::basic_string", align 8
  %11 = bitcast %"class.base::HistogramSamples"* %1 to i32 (%"class.base::HistogramSamples"*)***
  %12 = load i32 (%"class.base::HistogramSamples"*)**, i32 (%"class.base::HistogramSamples"*)*** %11, align 8
  %13 = getelementptr inbounds i32 (%"class.base::HistogramSamples"*)*, i32 (%"class.base::HistogramSamples"*)** %12, i64 4
  %14 = load i32 (%"class.base::HistogramSamples"*)*, i32 (%"class.base::HistogramSamples"*)** %13, align 8
  %15 = tail call i32 %14(%"class.base::HistogramSamples"* %1) #13
  %16 = sitofp i32 %15 to double
  %17 = fdiv double %16, 1.000000e+02
  %18 = bitcast %"class.base::HistogramSamples"* %1 to %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)***
  %19 = load %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)**, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*** %18, align 8
  %20 = getelementptr inbounds %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)** %19, i64 8
  %21 = load %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)** %20, align 8
  %22 = tail call %"class.base::SampleCountIterator"* %21(%"class.base::HistogramSamples"* %1) #13
  %23 = bitcast %"class.base::SampleCountIterator"* %22 to i1 (%"class.base::SampleCountIterator"*)***
  %24 = load i1 (%"class.base::SampleCountIterator"*)**, i1 (%"class.base::SampleCountIterator"*)*** %23, align 8
  %25 = getelementptr inbounds i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %24, i64 2
  %26 = load i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %25, align 8
  %27 = call zeroext i1 %26(%"class.base::SampleCountIterator"* %22) #13
  br i1 %27, label %58, label %28

28:                                               ; preds = %2
  %29 = bitcast i32* %3 to i8*
  %30 = bitcast i64* %4 to i8*
  %31 = bitcast i32* %5 to i8*
  %32 = bitcast %"class.base::SampleCountIterator"* %22 to void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)***
  %33 = bitcast %"class.base::SampleCountIterator"* %22 to void (%"class.base::SampleCountIterator"*)***
  br label %34

34:                                               ; preds = %28, %34
  %35 = phi i32 [ 0, %28 ], [ %45, %34 ]
  %36 = phi i32 [ 0, %28 ], [ %42, %34 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #13
  store i32 -1431655766, i32* %3, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #13
  store i64 -6148914691236517206, i64* %4, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #13
  store i32 -1431655766, i32* %5, align 4
  %37 = load void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)**, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*** %32, align 8
  %38 = getelementptr inbounds void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)** %37, i64 4
  %39 = load void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)** %38, align 8
  call void %39(%"class.base::SampleCountIterator"* %22, i32* nonnull %3, i64* nonnull %4, i32* nonnull %5) #13
  %40 = load i32, i32* %3, align 4
  %41 = icmp sgt i32 %40, %36
  %42 = select i1 %41, i32 %40, i32 %36
  %43 = load i32, i32* %5, align 4
  %44 = icmp sgt i32 %43, %35
  %45 = select i1 %44, i32 %43, i32 %35
  %46 = load void (%"class.base::SampleCountIterator"*)**, void (%"class.base::SampleCountIterator"*)*** %33, align 8
  %47 = getelementptr inbounds void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %46, i64 3
  %48 = load void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %47, align 8
  call void %48(%"class.base::SampleCountIterator"* %22) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #13
  %49 = load i1 (%"class.base::SampleCountIterator"*)**, i1 (%"class.base::SampleCountIterator"*)*** %23, align 8
  %50 = getelementptr inbounds i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %49, i64 2
  %51 = load i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %50, align 8
  %52 = call zeroext i1 %51(%"class.base::SampleCountIterator"* %22) #13
  br i1 %52, label %53, label %34

53:                                               ; preds = %34
  %54 = icmp sgt i32 %45, 72
  br i1 %54, label %55, label %58

55:                                               ; preds = %53
  %56 = sitofp i32 %45 to double
  %57 = fdiv double 7.200000e+01, %56
  br label %58

58:                                               ; preds = %2, %55, %53
  %59 = phi i32 [ %42, %55 ], [ %42, %53 ], [ 0, %2 ]
  %60 = phi double [ %57, %55 ], [ 1.000000e+00, %53 ], [ 1.000000e+00, %2 ]
  %61 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %61) #13
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i32 %59) #13
  %62 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %63 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %62, i64 0, i32 1, i32 0
  %64 = load i8, i8* %63, align 1
  %65 = icmp slt i8 %64, 0
  br i1 %65, label %68, label %66

66:                                               ; preds = %58
  %67 = zext i8 %64 to i64
  br label %73

68:                                               ; preds = %58
  %69 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  call void @_ZdlPv(i8* %72) #15
  br label %73

73:                                               ; preds = %66, %68
  %74 = phi i64 [ %67, %66 ], [ %70, %68 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %61) #13
  %75 = load %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)**, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*** %18, align 8
  %76 = getelementptr inbounds %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)** %75, i64 8
  %77 = load %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)*, %"class.base::SampleCountIterator"* (%"class.base::HistogramSamples"*)** %76, align 8
  %78 = call %"class.base::SampleCountIterator"* %77(%"class.base::HistogramSamples"* %1) #13
  %79 = icmp eq %"class.base::SampleCountIterator"* %22, null
  br i1 %79, label %85, label %80

80:                                               ; preds = %73
  %81 = bitcast %"class.base::SampleCountIterator"* %22 to void (%"class.base::SampleCountIterator"*)***
  %82 = load void (%"class.base::SampleCountIterator"*)**, void (%"class.base::SampleCountIterator"*)*** %81, align 8
  %83 = getelementptr inbounds void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %82, i64 1
  %84 = load void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %83, align 8
  call void %84(%"class.base::SampleCountIterator"* nonnull %22) #13
  br label %85

85:                                               ; preds = %80, %73
  %86 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 24, i1 false) #13
  %87 = bitcast %"class.base::SampleCountIterator"* %78 to i1 (%"class.base::SampleCountIterator"*)***
  %88 = load i1 (%"class.base::SampleCountIterator"*)**, i1 (%"class.base::SampleCountIterator"*)*** %87, align 8
  %89 = getelementptr inbounds i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %88, i64 2
  %90 = load i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %89, align 8
  %91 = call zeroext i1 %90(%"class.base::SampleCountIterator"* %78) #13
  br i1 %91, label %173, label %92

92:                                               ; preds = %85
  %93 = bitcast i32* %7 to i8*
  %94 = bitcast i64* %8 to i8*
  %95 = bitcast i32* %9 to i8*
  %96 = bitcast %"class.base::SampleCountIterator"* %78 to void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)***
  %97 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %98 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %100 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %101 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %100, i64 0, i32 1, i32 0
  %102 = add i64 %74, 2
  %103 = bitcast %"class.base::SampleCountIterator"* %78 to void (%"class.base::SampleCountIterator"*)***
  %104 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  br label %105

105:                                              ; preds = %92, %158
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %93) #13
  store i32 -1431655766, i32* %7, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #13
  store i64 -6148914691236517206, i64* %8, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %95) #13
  store i32 -1431655766, i32* %9, align 4
  %106 = load void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)**, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*** %96, align 8
  %107 = getelementptr inbounds void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)** %106, i64 4
  %108 = load void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)** %107, align 8
  call void %108(%"class.base::SampleCountIterator"* %78, i32* nonnull %7, i64* nonnull %8, i32* nonnull %9) #13
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %97) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %104, i8 -86, i64 24, i1 false)
  %109 = load i32, i32* %7, align 4
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i32 %109) #13
  %110 = load i8, i8* %101, align 1
  %111 = icmp slt i8 %110, 0
  %112 = load i8*, i8** %98, align 8
  %113 = load i64, i64* %99, align 8
  %114 = zext i8 %110 to i64
  %115 = select i1 %111, i8* %112, i8* %97
  %116 = select i1 %111, i64 %113, i64 %114
  %117 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %115, i64 %116) #13
  %118 = load i8, i8* %101, align 1
  %119 = icmp slt i8 %118, 0
  %120 = load i64, i64* %99, align 8
  %121 = zext i8 %118 to i64
  %122 = select i1 %119, i64 %120, i64 %121
  %123 = icmp ult i64 %122, %102
  br i1 %123, label %163, label %124

124:                                              ; preds = %163, %105
  %125 = load i32, i32* %9, align 4
  %126 = sitofp i32 %125 to double
  %127 = fmul double %60, %126
  %128 = call double @llvm.round.f64(double %127)
  %129 = fptosi double %128 to i32
  %130 = sitofp i32 %129 to double
  %131 = fsub double 7.200000e+01, %130
  %132 = fptosi double %131 to i32
  %133 = icmp sgt i32 %129, 0
  br i1 %133, label %134, label %139

134:                                              ; preds = %124, %134
  %135 = phi double [ %136, %134 ], [ %130, %124 ]
  %136 = fadd double %135, -1.000000e+00
  %137 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)) #13
  %138 = fcmp ogt double %136, 0.000000e+00
  br i1 %138, label %134, label %139

139:                                              ; preds = %134, %124
  %140 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #13
  %141 = icmp sgt i32 %132, 0
  br i1 %141, label %142, label %147

142:                                              ; preds = %139, %142
  %143 = phi i32 [ %144, %142 ], [ %132, %139 ]
  %144 = add nsw i32 %143, -1
  %145 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0)) #13
  %146 = icmp sgt i32 %144, 0
  br i1 %146, label %142, label %147

147:                                              ; preds = %142, %139
  %148 = load i32, i32* %9, align 4
  %149 = sitofp i32 %148 to double
  %150 = fdiv double %149, %17
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i32 %148, double %150) #13
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)) #13
  %151 = load void (%"class.base::SampleCountIterator"*)**, void (%"class.base::SampleCountIterator"*)*** %103, align 8
  %152 = getelementptr inbounds void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %151, i64 3
  %153 = load void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %152, align 8
  call void %153(%"class.base::SampleCountIterator"* %78) #13
  %154 = load i8, i8* %101, align 1
  %155 = icmp slt i8 %154, 0
  br i1 %155, label %156, label %158

156:                                              ; preds = %147
  %157 = load i8*, i8** %98, align 8
  call void @_ZdlPv(i8* %157) #15
  br label %158

158:                                              ; preds = %147, %156
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %97) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %95) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %93) #13
  %159 = load i1 (%"class.base::SampleCountIterator"*)**, i1 (%"class.base::SampleCountIterator"*)*** %87, align 8
  %160 = getelementptr inbounds i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %159, i64 2
  %161 = load i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %160, align 8
  %162 = call zeroext i1 %161(%"class.base::SampleCountIterator"* %78) #13
  br i1 %162, label %173, label %105

163:                                              ; preds = %105, %163
  %164 = phi i64 [ %165, %163 ], [ 0, %105 ]
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %0, i8 signext 32) #13
  %165 = add i64 %164, 1
  %166 = load i8, i8* %101, align 1
  %167 = icmp slt i8 %166, 0
  %168 = load i64, i64* %99, align 8
  %169 = zext i8 %166 to i64
  %170 = select i1 %167, i64 %168, i64 %169
  %171 = add i64 %170, %165
  %172 = icmp ult i64 %171, %102
  br i1 %172, label %163, label %124

173:                                              ; preds = %158, %85
  %174 = icmp eq %"class.base::SampleCountIterator"* %78, null
  br i1 %174, label %180, label %175

175:                                              ; preds = %173
  %176 = bitcast %"class.base::SampleCountIterator"* %78 to void (%"class.base::SampleCountIterator"*)***
  %177 = load void (%"class.base::SampleCountIterator"*)**, void (%"class.base::SampleCountIterator"*)*** %176, align 8
  %178 = getelementptr inbounds void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %177, i64 1
  %179 = load void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %178, align 8
  call void %179(%"class.base::SampleCountIterator"* nonnull %78) #13
  br label %180

180:                                              ; preds = %173, %175
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4base16HistogramSamples25GetSimpleAsciiBucketRangeEi(%"class.std::__1::basic_string"* noalias sret, %"class.base::HistogramSamples"* nocapture readnone, i32) local_unnamed_addr #0 align 2 {
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i32 %2) #13
  ret void
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4base16HistogramSamples21WriteAsciiBucketGraphEdiPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.base::HistogramSamples"* nocapture readnone, double, i32, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %5 = sitofp i32 %2 to double
  %6 = fsub double %5, %1
  %7 = fptosi double %6 to i32
  %8 = fcmp ogt double %1, 0.000000e+00
  br i1 %8, label %9, label %14

9:                                                ; preds = %4, %9
  %10 = phi double [ %11, %9 ], [ %1, %4 ]
  %11 = fadd double %10, -1.000000e+00
  %12 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)) #13
  %13 = fcmp ogt double %11, 0.000000e+00
  br i1 %13, label %9, label %14

14:                                               ; preds = %9, %4
  %15 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #13
  %16 = icmp sgt i32 %7, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %14, %17
  %18 = phi i32 [ %19, %17 ], [ %7, %14 ]
  %19 = add nsw i32 %18, -1
  %20 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0)) #13
  %21 = icmp sgt i32 %19, 0
  br i1 %21, label %17, label %22

22:                                               ; preds = %17, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4base16HistogramSamples21WriteAsciiBucketValueEidPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.base::HistogramSamples"* nocapture readnone, i32, double, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %5 = sitofp i32 %1 to double
  %6 = fdiv double %5, %2
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"* %3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i32 %1, double %6) #13
  ret void
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #6

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #6

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN4base19SampleCountIteratorD0Ev(%"class.base::SampleCountIterator"* nocapture readnone) unnamed_addr #4 align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK4base19SampleCountIterator14GetBucketIndexEPm(%"class.base::SampleCountIterator"* nocapture readnone, i64* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 false
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base20SingleSampleIteratorC2Eili(%"class.base::SingleSampleIterator"* nocapture, i32, i64, i32) unnamed_addr #9 align 2 {
  %5 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4base20SingleSampleIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 1
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 3
  store i64 %2, i64* %7, align 8
  %8 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 4
  store i64 -1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 5
  store i32 %3, i32* %9, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base20SingleSampleIteratorC2Eilim(%"class.base::SingleSampleIterator"* nocapture, i32, i64, i32, i64) unnamed_addr #9 align 2 {
  %6 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4base20SingleSampleIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 1
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 3
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 4
  store i64 %4, i64* %9, align 8
  %10 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 5
  store i32 %3, i32* %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base20SingleSampleIteratorD0Ev(%"class.base::SingleSampleIterator"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.base::SingleSampleIterator"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4base20SingleSampleIterator4DoneEv(%"class.base::SingleSampleIterator"* nocapture readonly) unnamed_addr #11 align 2 {
  %2 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  ret i1 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base20SingleSampleIterator4NextEv(%"class.base::SingleSampleIterator"* nocapture) unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 5
  store i32 0, i32* %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK4base20SingleSampleIterator3GetEPiPlS1_(%"class.base::SingleSampleIterator"* nocapture readonly, i32*, i64*, i32*) unnamed_addr #2 align 2 {
  %5 = icmp eq i32* %1, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  store i32 %8, i32* %1, align 4
  br label %9

9:                                                ; preds = %4, %6
  %10 = icmp eq i64* %2, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %9
  %12 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 3
  %13 = load i64, i64* %12, align 8
  store i64 %13, i64* %2, align 8
  br label %14

14:                                               ; preds = %9, %11
  %15 = icmp eq i32* %3, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %14
  %17 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 5
  %18 = load i32, i32* %17, align 8
  store i32 %18, i32* %3, align 4
  br label %19

19:                                               ; preds = %14, %16
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base20SingleSampleIterator14GetBucketIndexEPm(%"class.base::SingleSampleIterator"* nocapture readonly, i64* nocapture) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.base::SingleSampleIterator", %"class.base::SingleSampleIterator"* %0, i64 0, i32 4
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, -1
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  store i64 %4, i64* %1, align 8
  br label %7

7:                                                ; preds = %2, %6
  %8 = phi i1 [ true, %6 ], [ false, %2 ]
  ret i1 %8
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare { i16, i1 } @llvm.usub.with.overflow.i16(i16, i16) #8

; Function Attrs: nounwind readnone speculatable
declare { i16, i1 } @llvm.uadd.with.overflow.i16(i16, i16) #8

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4base12_GLOBAL__N_125SampleCountPickleIteratorD0Ev(%"class.base::(anonymous namespace)::SampleCountPickleIterator"*) unnamed_addr #12 align 2 {
  %2 = bitcast %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @_ZNK4base12_GLOBAL__N_125SampleCountPickleIterator4DoneEv(%"class.base::(anonymous namespace)::SampleCountPickleIterator"* nocapture readonly) unnamed_addr #11 align 2 {
  %2 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %0, i64 0, i32 6
  %3 = load i8, i8* %2, align 4, !range !3
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base12_GLOBAL__N_125SampleCountPickleIterator4NextEv(%"class.base::(anonymous namespace)::SampleCountPickleIterator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %0, i64 0, i32 1
  %3 = load %"class.base::PickleIterator"*, %"class.base::PickleIterator"** %2, align 8
  %4 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %0, i64 0, i32 2
  %5 = tail call zeroext i1 @_ZN4base14PickleIterator7ReadIntEPi(%"class.base::PickleIterator"* %3, i32* %4) #13
  br i1 %5, label %6, label %14

6:                                                ; preds = %1
  %7 = load %"class.base::PickleIterator"*, %"class.base::PickleIterator"** %2, align 8
  %8 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %0, i64 0, i32 4
  %9 = tail call zeroext i1 @_ZN4base14PickleIterator9ReadInt64EPl(%"class.base::PickleIterator"* %7, i64* %8) #13
  br i1 %9, label %10, label %14

10:                                               ; preds = %6
  %11 = load %"class.base::PickleIterator"*, %"class.base::PickleIterator"** %2, align 8
  %12 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %0, i64 0, i32 5
  %13 = tail call zeroext i1 @_ZN4base14PickleIterator7ReadIntEPi(%"class.base::PickleIterator"* %11, i32* %12) #13
  br i1 %13, label %16, label %14

14:                                               ; preds = %10, %6, %1
  %15 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %0, i64 0, i32 6
  store i8 1, i8* %15, align 4
  br label %16

16:                                               ; preds = %14, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZNK4base12_GLOBAL__N_125SampleCountPickleIterator3GetEPiPlS2_(%"class.base::(anonymous namespace)::SampleCountPickleIterator"* nocapture readonly, i32* nocapture, i64* nocapture, i32* nocapture) unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  store i32 %6, i32* %1, align 4
  %7 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %0, i64 0, i32 4
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %2, align 8
  %9 = getelementptr inbounds %"class.base::(anonymous namespace)::SampleCountPickleIterator", %"class.base::(anonymous namespace)::SampleCountPickleIterator"* %0, i64 0, i32 5
  %10 = load i32, i32* %9, align 8
  store i32 %10, i32* %3, align 4
  ret void
}

declare void @_ZN4base6Pickle16WriteBytesStaticILm8EEEvPKv(%"class.base::Pickle"*, i8*) local_unnamed_addr #6

declare void @_ZN4base6Pickle16WriteBytesStaticILm4EEEvPKv(%"class.base::Pickle"*, i8*) local_unnamed_addr #6

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
