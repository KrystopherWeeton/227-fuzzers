; ModuleID = '../../third_party/blink/renderer/core/layout/ng/ng_ink_overflow.cc'
source_filename = "../../third_party/blink/renderer/core/layout/ng/ng_ink_overflow.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::ComputedStyle" = type { %"class.blink::ComputedStyleBase.base", %"class.WTF::RefCounted.606", %"class.std::__1::unique_ptr.608" }
%"class.blink::ComputedStyleBase.base" = type <{ %"class.blink::DataRef", %"class.blink::DataRef.244", %"class.blink::DataRef.316", %"class.blink::DataRef.320", %"class.blink::DataRef.520", %"class.blink::DataRef.589", %"class.blink::DataRef.593", %"class.blink::DataRef.597", %"class.blink::DataRef.601", [20 x i8] }>
%"class.blink::DataRef" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::ComputedStyleBase::StyleInheritedData"* }
%"class.blink::ComputedStyleBase::StyleInheritedData" = type { %"class.WTF::RefCounted", %"class.blink::DataRef.0", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i16, i16 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::DataRef.0" = type { %class.scoped_refptr.1 }
%class.scoped_refptr.1 = type { %"class.blink::ComputedStyleBase::StyleFontData"* }
%"class.blink::ComputedStyleBase::StyleFontData" = type { %"class.WTF::RefCounted.2", %"class.blink::Font" }
%"class.WTF::RefCounted.2" = type { %"class.base::RefCounted.3" }
%"class.base::RefCounted.3" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Font" = type { %"class.blink::FontDescription", %class.scoped_refptr.29 }
%"class.blink::FontDescription" = type { %"class.blink::FontFamily", %class.scoped_refptr.7, %class.scoped_refptr.10, %class.scoped_refptr.20, float, float, float, float, float, float, %"struct.blink::FontSelectionRequest", %"class.blink::FontSelectionValue", %union.anon.28 }
%"class.blink::FontFamily" = type { %"class.WTF::AtomicString", %class.scoped_refptr.6 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.4 }
%class.scoped_refptr.4 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.6 = type { %"class.blink::SharedFontFamily"* }
%"class.blink::SharedFontFamily" = type <{ %"class.blink::FontFamily", %"class.WTF::RefCounted.628", [4 x i8] }>
%"class.WTF::RefCounted.628" = type { %"class.base::RefCounted.629" }
%"class.base::RefCounted.629" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.7 = type { %"class.blink::FontFeatureSettings"* }
%"class.blink::FontFeatureSettings" = type <{ %"class.blink::FontSettings", %"class.WTF::RefCounted.8", [4 x i8] }>
%"class.blink::FontSettings" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::FontTagValuePair"*, i32, i32 }
%"class.blink::FontTagValuePair" = type { i32, i32 }
%"class.WTF::RefCounted.8" = type { %"class.base::RefCounted.9" }
%"class.base::RefCounted.9" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.10 = type { %"class.blink::FontVariationSettings"* }
%"class.blink::FontVariationSettings" = type <{ %"class.blink::FontSettings.11", %"class.WTF::RefCounted.18", [4 x i8] }>
%"class.blink::FontSettings.11" = type { %"class.WTF::Vector.12" }
%"class.WTF::Vector.12" = type { %"class.WTF::VectorBuffer.13" }
%"class.WTF::VectorBuffer.13" = type { %"class.WTF::VectorBufferBase.14" }
%"class.WTF::VectorBufferBase.14" = type { %"class.blink::FontTagValuePair.15"*, i32, i32 }
%"class.blink::FontTagValuePair.15" = type { i32, float }
%"class.WTF::RefCounted.18" = type { %"class.base::RefCounted.19" }
%"class.base::RefCounted.19" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.20 = type { %"class.blink::LayoutLocale"* }
%"class.blink::LayoutLocale" = type <{ %"class.WTF::RefCounted.21", [4 x i8], %"class.WTF::AtomicString", %"class.std::__1::basic_string", %"class.WTF::CaseMap::Locale", %class.scoped_refptr.25, %struct.hb_language_impl_t*, i32, i32, i8, [7 x i8] }>
%"class.WTF::RefCounted.21" = type { %"class.base::RefCounted.22" }
%"class.base::RefCounted.22" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.23 }
%union.anon.23 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.WTF::CaseMap::Locale" = type { i8* }
%class.scoped_refptr.25 = type { %"class.blink::Hyphenation"* }
%"class.blink::Hyphenation" = type <{ i32 (...)**, %"class.WTF::RefCounted.26", [4 x i8] }>
%"class.WTF::RefCounted.26" = type { %"class.base::RefCounted.27" }
%"class.base::RefCounted.27" = type { %"class.base::subtle::RefCountedBase" }
%struct.hb_language_impl_t = type opaque
%"struct.blink::FontSelectionRequest" = type { %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue" }
%"class.blink::FontSelectionValue" = type { i16 }
%union.anon.28 = type { %"struct.blink::FontDescription::BitFields" }
%"struct.blink::FontDescription::BitFields" = type { i56 }
%class.scoped_refptr.29 = type { %"class.blink::FontFallbackList"* }
%"class.blink::FontFallbackList" = type { %"class.WTF::RefCounted.30", %"class.WTF::Vector.32", %"class.blink::SimpleFontData"*, %"class.blink::WeakPersistent", i32, i16, i8, %"class.base::WeakPtr" }
%"class.WTF::RefCounted.30" = type { %"class.base::RefCounted.31" }
%"class.base::RefCounted.31" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.32" = type { %"class.WTF::VectorBuffer.33" }
%"class.WTF::VectorBuffer.33" = type { %"class.WTF::VectorBufferBase.34", [8 x i8] }
%"class.WTF::VectorBufferBase.34" = type { %class.scoped_refptr.35*, i32, i32 }
%class.scoped_refptr.35 = type { %"class.blink::FontData"* }
%"class.blink::FontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.36", [4 x i8] }>
%"class.WTF::RefCounted.36" = type { %"class.base::RefCounted.37" }
%"class.base::RefCounted.37" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::FontFallbackMap"*, %"class.blink::PersistentNodePtr" }
%"class.blink::FontFallbackMap" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.59", i32, [4 x i8], %"class.std::__1::unique_ptr.197", %"class.std::__1::unique_ptr.197", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.207", %"class.std::__1::unique_ptr.213", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.225", %"class.std::__1::unique_ptr.231", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.238", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.62", %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.103", %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.117", %"class.std::__1::unique_ptr.124", %"class.std::__1::unique_ptr.131", %"class.std::__1::unique_ptr.131", %"class.std::__1::unique_ptr.138", %"class.std::__1::unique_ptr.145", %"class.std::__1::unique_ptr.152", %"class.std::__1::unique_ptr.177", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.95" = type { %"struct.std::__1::__atomic_base.96" }
%"struct.std::__1::__atomic_base.96" = type { %"struct.std::__1::__atomic_base.97" }
%"struct.std::__1::__atomic_base.97" = type { %"struct.std::__1::__cxx_atomic_impl.98" }
%"struct.std::__1::__cxx_atomic_impl.98" = type { %"struct.std::__1::__cxx_atomic_base_impl.99" }
%"struct.std::__1::__cxx_atomic_base_impl.99" = type { i64 }
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.blink::Worklist.106"* }
%"class.blink::Worklist.106" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.blink::Worklist.113"* }
%"class.blink::Worklist.113" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.blink::Worklist.120"* }
%"class.blink::Worklist.120" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.blink::Worklist.127"* }
%"class.blink::Worklist.127" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.blink::Worklist.134"* }
%"class.blink::Worklist.134" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.blink::Worklist.141"* }
%"class.blink::Worklist.141" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.145" = type { %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"class.blink::Worklist.148"* }
%"class.blink::Worklist.148" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.152" = type { %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.155", %"class.std::__1::__compressed_pair.164", %"class.std::__1::__compressed_pair.169", %"class.std::__1::__compressed_pair.171", [4 x i8] }>
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157", %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { i64 }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { float }
%"class.std::__1::unique_ptr.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.180", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.189" }
%"class.WTF::Vector.189" = type { %"class.WTF::VectorBuffer.190" }
%"class.WTF::VectorBuffer.190" = type { %"class.WTF::VectorBufferBase.191" }
%"class.WTF::VectorBufferBase.191" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.197" = type { %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.205" }
%"class.WTF::VectorBuffer.205" = type { %"class.WTF::VectorBufferBase.206" }
%"class.WTF::VectorBufferBase.206" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.207" = type { %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.213" = type { %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.219" }
%"class.std::__1::unique_ptr.219" = type { %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.106"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.113"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.120"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.127"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.134"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.623" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.623" = type { %"struct.std::__1::__compressed_pair_elem.624" }
%"struct.std::__1::__compressed_pair_elem.624" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.225" = type { %"class.std::__1::__compressed_pair.226" }
%"class.std::__1::__compressed_pair.226" = type { %"struct.std::__1::__compressed_pair_elem.227" }
%"struct.std::__1::__compressed_pair_elem.227" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.237 }
%class.scoped_refptr.237 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.238" = type { %"struct.std::__1::__atomic_base.239" }
%"struct.std::__1::__atomic_base.239" = type { %"struct.std::__1::__cxx_atomic_impl.240" }
%"struct.std::__1::__cxx_atomic_impl.240" = type { %"struct.std::__1::__cxx_atomic_base_impl.241" }
%"struct.std::__1::__cxx_atomic_base_impl.241" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.242 }
%class.scoped_refptr.242 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.41" }
%"struct.std::__1::atomic.41" = type { %"struct.std::__1::__atomic_base.42" }
%"struct.std::__1::__atomic_base.42" = type { %"struct.std::__1::__atomic_base.43" }
%"struct.std::__1::__atomic_base.43" = type { %"struct.std::__1::__cxx_atomic_impl.44" }
%"struct.std::__1::__cxx_atomic_impl.44" = type { %"struct.std::__1::__cxx_atomic_base_impl.45" }
%"struct.std::__1::__cxx_atomic_base_impl.45" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.46" }
%"struct.std::__1::atomic.46" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__atomic_base.48" }
%"struct.std::__1::__atomic_base.48" = type { %"struct.std::__1::__cxx_atomic_impl.49" }
%"struct.std::__1::__cxx_atomic_impl.49" = type { %"struct.std::__1::__cxx_atomic_base_impl.50" }
%"struct.std::__1::__cxx_atomic_base_impl.50" = type { i8 }
%"class.blink::Length" = type <{ %union.anon.243, i8, i8, i8, i8 }>
%union.anon.243 = type { i32 }
%"class.blink::StyleColor" = type { %"class.blink::Color", i32 }
%"class.blink::Color" = type { i32 }
%"class.blink::DataRef.244" = type { %class.scoped_refptr.245 }
%class.scoped_refptr.245 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData" = type <{ %"class.WTF::RefCounted.246", [4 x i8], %"class.blink::DataRef.248", %"class.blink::DataRef.280", %"class.WTF::Vector.284", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %class.scoped_refptr.289, %class.scoped_refptr.298, %"class.blink::Persistent.306", %"class.blink::Persistent.308", %"class.blink::TextDecorationThickness", %"class.blink::Length", %"class.blink::Length", %"class.blink::TextSizeAdjust", %"struct.blink::TabSize", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", i16, i16, [5 x i8], [3 x i8] }>
%"class.WTF::RefCounted.246" = type { %"class.base::RefCounted.247" }
%"class.base::RefCounted.247" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.248" = type { %class.scoped_refptr.249 }
%class.scoped_refptr.249 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData" = type <{ %"class.WTF::RefCounted.250", [4 x i8], %"class.WTF::AtomicString", %class.scoped_refptr.252, %class.scoped_refptr.259, %"class.blink::Persistent.270", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", %"class.blink::StyleAutoColor", i16, i16, i16, i8, i8, i16, [2 x i8] }>
%"class.WTF::RefCounted.250" = type { %"class.base::RefCounted.251" }
%"class.base::RefCounted.251" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.252 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type { %"class.base::RefCountedThreadSafe.253", %"class.WTF::Vector.254" }
%"class.base::RefCountedThreadSafe.253" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.254" = type { %"class.WTF::VectorBuffer.255" }
%"class.WTF::VectorBuffer.255" = type { %"class.WTF::VectorBufferBase.256" }
%"class.WTF::VectorBufferBase.256" = type { %"class.blink::AppliedTextDecoration"*, i32, i32 }
%"class.blink::AppliedTextDecoration" = type { i8, %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" }
%class.scoped_refptr.259 = type { %"class.blink::StyleInitialData"* }
%"class.blink::StyleInitialData" = type { %"class.WTF::RefCounted.260", %"class.blink::StyleVariables" }
%"class.WTF::RefCounted.260" = type { %"class.base::RefCounted.261" }
%"class.base::RefCounted.261" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::StyleVariables" = type { %"class.WTF::HashMap", %"class.blink::Persistent" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %class.scoped_refptr.660 }
%class.scoped_refptr.660 = type { %"class.blink::CSSVariableData"* }
%"class.blink::CSSVariableData" = type { %"class.WTF::RefCounted.661", %"class.WTF::Vector.503", %"class.WTF::Vector.663", %"class.WTF::String", i8, i8, i8, i8, %"class.WTF::String", %"class.WTF::TextEncoding" }
%"class.WTF::RefCounted.661" = type { %"class.base::RefCounted.662" }
%"class.base::RefCounted.662" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.503" = type { %"class.WTF::VectorBuffer.504" }
%"class.WTF::VectorBuffer.504" = type { %"class.WTF::VectorBufferBase.505" }
%"class.WTF::VectorBufferBase.505" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::Vector.663" = type { %"class.WTF::VectorBuffer.664" }
%"class.WTF::VectorBuffer.664" = type { %"class.WTF::VectorBufferBase.665" }
%"class.WTF::VectorBufferBase.665" = type { %"class.blink::CSSParserToken"*, i32, i32 }
%"class.blink::CSSParserToken" = type { i24, i32, i8*, %union.anon.666 }
%union.anon.666 = type { double }
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase.264" }
%"class.blink::PersistentBase.264" = type { %"class.blink::HeapHashMap"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.265" }
%"class.WTF::HashMap.265" = type { %"class.WTF::HashTable.266" }
%"class.WTF::HashTable.266" = type <{ %"struct.WTF::KeyValuePair.268"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.268" = type opaque
%"class.blink::PersistentNodePtr.269" = type { %"class.blink::PersistentNode"* }
%"class.blink::Persistent.270" = type { %"class.blink::PersistentBase.271" }
%"class.blink::PersistentBase.271" = type { %"class.blink::HeapVector"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.274" }
%"class.WTF::Vector.274" = type { %"class.WTF::VectorBuffer.275" }
%"class.WTF::VectorBuffer.275" = type { %"class.WTF::VectorBufferBase.276" }
%"class.WTF::VectorBufferBase.276" = type { %"class.blink::CursorData"*, i32, i32 }
%"class.blink::CursorData" = type <{ %"class.blink::Member", i8, [3 x i8], %"class.blink::IntPoint", [4 x i8] }>
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::StyleImage"* }
%"class.blink::StyleImage" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::DataRef.280" = type { %class.scoped_refptr.281 }
%class.scoped_refptr.281 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData" = type <{ %"class.WTF::RefCounted.282", %"class.blink::StyleColor", i16, i8, i8 }>
%"class.WTF::RefCounted.282" = type { %"class.base::RefCounted.283" }
%"class.base::RefCounted.283" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.284" = type { %"class.WTF::VectorBuffer.285" }
%"class.WTF::VectorBuffer.285" = type { %"class.WTF::VectorBufferBase.286" }
%"class.WTF::VectorBufferBase.286" = type { %"class.WTF::AtomicString"*, i32, i32 }
%class.scoped_refptr.289 = type { %"class.blink::QuotesData"* }
%"class.blink::QuotesData" = type { %"class.WTF::RefCounted.290", %"class.WTF::Vector.292" }
%"class.WTF::RefCounted.290" = type { %"class.base::RefCounted.291" }
%"class.base::RefCounted.291" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.292" = type { %"class.WTF::VectorBuffer.293" }
%"class.WTF::VectorBuffer.293" = type { %"class.WTF::VectorBufferBase.294" }
%"class.WTF::VectorBufferBase.294" = type { %"struct.std::__1::pair.295"*, i32, i32 }
%"struct.std::__1::pair.295" = type { %"class.WTF::String", %"class.WTF::String" }
%class.scoped_refptr.298 = type { %"class.blink::ShadowList"* }
%"class.blink::ShadowList" = type { %"class.WTF::RefCounted.299", [4 x i8], %"class.WTF::Vector.301" }
%"class.WTF::RefCounted.299" = type { %"class.base::RefCounted.300" }
%"class.base::RefCounted.300" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.301" = type { %"class.WTF::VectorBuffer.base", [4 x i8] }
%"class.WTF::VectorBuffer.base" = type <{ %"class.WTF::VectorBufferBase.303", [28 x i8] }>
%"class.WTF::VectorBufferBase.303" = type { %"class.blink::ShadowData"*, i32, i32 }
%"class.blink::ShadowData" = type { %"class.blink::FloatPoint", float, float, %"class.blink::StyleColor", i32 }
%"class.blink::Persistent.306" = type { %"class.blink::PersistentBase.307" }
%"class.blink::PersistentBase.307" = type { %"class.blink::StyleImage"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::Persistent.308" = type { %"class.blink::PersistentBase.309" }
%"class.blink::PersistentBase.309" = type { %"class.blink::ListStyleTypeData"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::ListStyleTypeData" = type { i32, %"class.WTF::AtomicString", %"class.blink::Member.312", %"class.blink::Member.314" }
%"class.blink::Member.312" = type { %"class.blink::MemberBase.313" }
%"class.blink::MemberBase.313" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type opaque
%"class.blink::Member.314" = type { %"class.blink::MemberBase.315" }
%"class.blink::MemberBase.315" = type { %"class.blink::CounterStyle"* }
%"class.blink::CounterStyle" = type opaque
%"class.blink::TextDecorationThickness" = type { %"class.blink::Length", i8, [3 x i8] }
%"class.blink::TextSizeAdjust" = type { float }
%"struct.blink::TabSize" = type <{ float, i8, [3 x i8] }>
%"class.blink::StyleAutoColor" = type { %"class.blink::StyleColor" }
%"class.blink::DataRef.316" = type { %class.scoped_refptr.317 }
%class.scoped_refptr.317 = type { %"class.blink::ComputedStyleBase::StyleVisualData"* }
%"class.blink::ComputedStyleBase::StyleVisualData" = type <{ %"class.WTF::RefCounted.318", %"class.blink::LengthBox", float, i8, [3 x i8] }>
%"class.WTF::RefCounted.318" = type { %"class.base::RefCounted.319" }
%"class.base::RefCounted.319" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::LengthBox" = type { %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.blink::DataRef.320" = type { %class.scoped_refptr.321 }
%class.scoped_refptr.321 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData" = type <{ %"class.WTF::RefCounted.322", [4 x i8], %"class.blink::DataRef.324", %"class.blink::DataRef.390", %"class.blink::TransformOperations", %class.scoped_refptr.298, %"class.blink::Persistent.514", %"class.blink::TransformOrigin", float, float, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", i16, [2 x i8] }>
%"class.WTF::RefCounted.322" = type { %"class.base::RefCounted.323" }
%"class.base::RefCounted.323" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.324" = type { %class.scoped_refptr.325 }
%class.scoped_refptr.325 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData" = type <{ %"class.WTF::RefCounted.326", [4 x i8], %"class.blink::DataRef.328", %"class.blink::Persistent.366", %"class.blink::Length", float, float, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i32, i32, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", [3 x i8], [5 x i8] }>
%"class.WTF::RefCounted.326" = type { %"class.base::RefCounted.327" }
%"class.base::RefCounted.327" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.328" = type { %class.scoped_refptr.329 }
%class.scoped_refptr.329 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData" = type { %"class.WTF::RefCounted.330", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.WTF::AtomicString", %class.scoped_refptr.348, %class.scoped_refptr.351, %class.scoped_refptr.354, %class.scoped_refptr.357, %class.scoped_refptr.358, %class.scoped_refptr.359, %"class.blink::Persistent.366", %"class.blink::Persistent.381", %"class.absl::optional.385", %"class.absl::optional.385", %"struct.blink::StyleOffsetRotation", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, %"struct.cc::ScrollSnapType", %"struct.cc::ScrollSnapAlign", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32, i16, [2 x i8], %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleSelfAlignmentData", i32 }
%"class.WTF::RefCounted.330" = type { %"class.base::RefCounted.331" }
%"class.base::RefCounted.331" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::GridTrackList" = type { %"class.WTF::Vector.332", %"class.std::__1::unique_ptr.337" }
%"class.WTF::Vector.332" = type { %"class.WTF::VectorBuffer.333" }
%"class.WTF::VectorBuffer.333" = type { %"class.WTF::VectorBufferBase.334" }
%"class.WTF::VectorBufferBase.334" = type { %"class.blink::GridTrackSize"*, i32, i32 }
%"class.blink::GridTrackSize" = type <{ i32, [4 x i8], %"class.blink::GridLength", %"class.blink::GridLength", %"class.blink::GridLength", i16, [6 x i8] }>
%"class.blink::GridLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.339" }
%"struct.std::__1::__compressed_pair_elem.339" = type { %"class.blink::NGGridTrackList"* }
%"class.blink::NGGridTrackList" = type { %"class.WTF::Vector.340", %"class.WTF::Vector.332", i32, i32 }
%"class.WTF::Vector.340" = type { %"class.WTF::VectorBuffer.341" }
%"class.WTF::VectorBuffer.341" = type { %"class.WTF::VectorBufferBase.342" }
%"class.WTF::VectorBufferBase.342" = type { %"struct.blink::NGGridTrackRepeater"*, i32, i32 }
%"struct.blink::NGGridTrackRepeater" = type { i32, i32, i32, i32 }
%"class.blink::GridPosition" = type { i32, i32, %"class.WTF::AtomicString" }
%class.scoped_refptr.348 = type { %"class.blink::ClipPathOperation"* }
%"class.blink::ClipPathOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.349", [4 x i8] }>
%"class.WTF::RefCounted.349" = type { %"class.base::RefCounted.350" }
%"class.base::RefCounted.350" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.351 = type { %"class.blink::BasicShape"* }
%"class.blink::BasicShape" = type <{ i32 (...)**, %"class.WTF::RefCounted.352", [4 x i8] }>
%"class.WTF::RefCounted.352" = type { %"class.base::RefCounted.353" }
%"class.base::RefCounted.353" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.354 = type { %"class.blink::RotateTransformOperation"* }
%"class.blink::RotateTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], %"struct.blink::Rotation", i32, [4 x i8] }>
%"class.blink::TransformOperation.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.355" }>
%"class.WTF::RefCounted.355" = type { %"class.base::RefCounted.356" }
%"class.base::RefCounted.356" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::Rotation" = type { %"class.blink::FloatPoint3D", double }
%"class.blink::FloatPoint3D" = type { float, float, float }
%class.scoped_refptr.357 = type { %"class.blink::ScaleTransformOperation"* }
%"class.blink::ScaleTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], double, double, double, i32, [4 x i8] }>
%class.scoped_refptr.358 = type { %"class.blink::TranslateTransformOperation"* }
%"class.blink::TranslateTransformOperation" = type <{ %"class.blink::TransformOperation.base", %"class.blink::Length", %"class.blink::Length", [4 x i8], double, i32, [4 x i8] }>
%class.scoped_refptr.359 = type { %"class.blink::StyleReflection"* }
%"class.blink::StyleReflection" = type { %"class.WTF::RefCounted.360", i32, %"class.blink::Length", %"class.blink::NinePieceImage" }
%"class.WTF::RefCounted.360" = type { %"class.base::RefCounted.361" }
%"class.base::RefCounted.361" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::NinePieceImage" = type { %"class.blink::DataRef.362" }
%"class.blink::DataRef.362" = type { %class.scoped_refptr.363 }
%class.scoped_refptr.363 = type { %"class.blink::NinePieceImageData"* }
%"class.blink::NinePieceImageData" = type { %"class.WTF::RefCountedCopyable", i8, %"class.blink::Persistent.306", %"class.blink::LengthBox", %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox" }
%"class.WTF::RefCountedCopyable" = type { %"class.WTF::RefCounted.364" }
%"class.WTF::RefCounted.364" = type { %"class.base::RefCounted.365" }
%"class.base::RefCounted.365" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::BorderImageLengthBox" = type { %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength" }
%"class.blink::BorderImageLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.blink::Persistent.381" = type { %"class.blink::PersistentBase.382" }
%"class.blink::PersistentBase.382" = type { %"class.blink::ShapeValue"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::ShapeValue" = type <{ i32 (...)**, i32, [4 x i8], %class.scoped_refptr.351, %"class.blink::Member", i32, [4 x i8] }>
%"class.absl::optional.385" = type { %"class.absl::optional_internal::optional_data.386" }
%"class.absl::optional_internal::optional_data.386" = type { %"class.absl::optional_internal::optional_data_base.387" }
%"class.absl::optional_internal::optional_data_base.387" = type { %"class.absl::optional_internal::optional_data_dtor_base.388" }
%"class.absl::optional_internal::optional_data_dtor_base.388" = type { i8, [3 x i8], %union.anon.389 }
%union.anon.389 = type { %"class.blink::Length" }
%"struct.blink::StyleOffsetRotation" = type { float, i32 }
%"struct.blink::LengthPoint" = type { %"class.blink::Length", %"class.blink::Length" }
%"struct.cc::ScrollSnapType" = type { i8, i32, i32 }
%"struct.cc::ScrollSnapAlign" = type { i32, i32 }
%"class.blink::Persistent.366" = type { %"class.blink::PersistentBase.367" }
%"class.blink::PersistentBase.367" = type { %"class.blink::StyleFilterData"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::StyleFilterData" = type { %"class.blink::FilterOperations" }
%"class.blink::FilterOperations" = type { %"class.blink::HeapVector.370" }
%"class.blink::HeapVector.370" = type { %"class.WTF::Vector.373" }
%"class.WTF::Vector.373" = type { %"class.WTF::VectorBuffer.374" }
%"class.WTF::VectorBuffer.374" = type { %"class.WTF::VectorBufferBase.375" }
%"class.WTF::VectorBufferBase.375" = type { %"class.blink::Member.376"*, i32, i32 }
%"class.blink::Member.376" = type { %"class.blink::MemberBase.377" }
%"class.blink::MemberBase.377" = type { %"class.blink::FilterOperation"* }
%"class.blink::FilterOperation" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.blink::DataRef.390" = type { %class.scoped_refptr.391 }
%class.scoped_refptr.391 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData" = type { %"class.WTF::RefCounted.392", %"class.blink::DataRef.394", %"class.blink::DataRef.398", %"class.blink::DataRef.407", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.std::__1::unique_ptr.426", %"class.std::__1::unique_ptr.437", %"class.std::__1::unique_ptr.475", %"class.std::__1::unique_ptr.486", %"class.std::__1::unique_ptr.497", %"class.WTF::Vector.503", %"class.blink::FillLayer", %"class.blink::NinePieceImage", %"class.blink::FloatSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32 }
%"class.WTF::RefCounted.392" = type { %"class.base::RefCounted.393" }
%"class.base::RefCounted.393" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.394" = type { %class.scoped_refptr.395 }
%class.scoped_refptr.395 = type { %"class.blink::ComputedStyleBase::StyleMultiColData"* }
%"class.blink::ComputedStyleBase::StyleMultiColData" = type <{ %"class.WTF::RefCounted.396", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.396" = type { %"class.base::RefCounted.397" }
%"class.base::RefCounted.397" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.398" = type { %class.scoped_refptr.399 }
%class.scoped_refptr.399 = type { %"class.blink::ComputedStyleBase::StyleWillChangeData"* }
%"class.blink::ComputedStyleBase::StyleWillChangeData" = type <{ %"class.WTF::RefCounted.400", [4 x i8], %"class.WTF::Vector.402", i8, [7 x i8] }>
%"class.WTF::RefCounted.400" = type { %"class.base::RefCounted.401" }
%"class.base::RefCounted.401" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.402" = type { %"class.WTF::VectorBuffer.403" }
%"class.WTF::VectorBuffer.403" = type { %"class.WTF::VectorBufferBase.404" }
%"class.WTF::VectorBufferBase.404" = type { i32*, i32, i32 }
%"class.blink::DataRef.407" = type { %class.scoped_refptr.408 }
%class.scoped_refptr.408 = type { %"class.blink::ComputedStyleBase::StyleGridData"* }
%"class.blink::ComputedStyleBase::StyleGridData" = type <{ %"class.WTF::RefCounted.409", [4 x i8], %"class.WTF::HashMap.411", %"class.WTF::HashMap.411", %"class.WTF::HashMap.411", %"class.WTF::HashMap.411", %"class.WTF::HashMap.411", %"class.WTF::HashMap.411", %"class.WTF::HashMap.416", %"class.WTF::HashMap.416", %"class.WTF::HashMap.416", %"class.WTF::HashMap.416", %"class.WTF::HashMap.421", %"class.WTF::Vector.332", %"class.WTF::Vector.332", i64, i64, i64, i64, i8, [7 x i8] }>
%"class.WTF::RefCounted.409" = type { %"class.base::RefCounted.410" }
%"class.base::RefCounted.410" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::HashMap.411" = type { %"class.WTF::HashTable.412" }
%"class.WTF::HashTable.412" = type <{ %"struct.WTF::KeyValuePair.415"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.415" = type { %"class.WTF::String", %"class.WTF::Vector.650" }
%"class.WTF::Vector.650" = type { %"class.WTF::VectorBuffer.651" }
%"class.WTF::VectorBuffer.651" = type { %"class.WTF::VectorBufferBase.652" }
%"class.WTF::VectorBufferBase.652" = type { i64*, i32, i32 }
%"class.WTF::HashMap.416" = type { %"class.WTF::HashTable.417" }
%"class.WTF::HashTable.417" = type <{ %"struct.WTF::KeyValuePair.420"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.420" = type { i64, %"class.WTF::Vector.503" }
%"class.WTF::HashMap.421" = type { %"class.WTF::HashTable.422" }
%"class.WTF::HashTable.422" = type <{ %"struct.WTF::KeyValuePair.425"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.425" = type { %"class.WTF::String", %"struct.blink::GridArea" }
%"struct.blink::GridArea" = type { %"struct.blink::GridSpan", %"struct.blink::GridSpan" }
%"struct.blink::GridSpan" = type { i32, i32, i32 }
%"class.std::__1::unique_ptr.426" = type { %"class.std::__1::__compressed_pair.427" }
%"class.std::__1::__compressed_pair.427" = type { %"struct.std::__1::__compressed_pair_elem.428" }
%"struct.std::__1::__compressed_pair_elem.428" = type { %"class.blink::CounterDirectiveMap"* }
%"class.blink::CounterDirectiveMap" = type { %"class.WTF::HashMap.429" }
%"class.WTF::HashMap.429" = type { %"class.WTF::HashTable.430" }
%"class.WTF::HashTable.430" = type <{ %"struct.WTF::KeyValuePair.433"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.433" = type { %"class.WTF::AtomicString", %"class.blink::CounterDirectives" }
%"class.blink::CounterDirectives" = type { %"class.absl::optional.655", %"class.absl::optional.655", %"class.absl::optional.655" }
%"class.absl::optional.655" = type { %"class.absl::optional_internal::optional_data.656" }
%"class.absl::optional_internal::optional_data.656" = type { %"class.absl::optional_internal::optional_data_base.657" }
%"class.absl::optional_internal::optional_data_base.657" = type { %"class.absl::optional_internal::optional_data_dtor_base.658" }
%"class.absl::optional_internal::optional_data_dtor_base.658" = type { i8, %union.anon.659 }
%union.anon.659 = type { i32 }
%"class.std::__1::unique_ptr.437" = type { %"class.std::__1::__compressed_pair.438" }
%"class.std::__1::__compressed_pair.438" = type { %"struct.std::__1::__compressed_pair_elem.439" }
%"struct.std::__1::__compressed_pair_elem.439" = type { %"class.blink::CSSAnimationData"* }
%"class.blink::CSSAnimationData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.284", %"class.WTF::Vector.452", %"class.WTF::Vector.440", %"class.WTF::Vector.457", %"class.WTF::Vector.462", %"class.WTF::Vector.467" }
%"class.blink::CSSTimingData" = type { %"class.WTF::Vector.440", %"class.WTF::Vector.440", %"class.WTF::Vector.445" }
%"class.WTF::Vector.445" = type { %"class.WTF::VectorBuffer.446" }
%"class.WTF::VectorBuffer.446" = type { %"class.WTF::VectorBufferBase.447" }
%"class.WTF::VectorBufferBase.447" = type { %class.scoped_refptr.448*, i32, i32 }
%class.scoped_refptr.448 = type { %"class.blink::TimingFunction"* }
%"class.blink::TimingFunction" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i32 }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.449" }
%"class.base::RefCountedThreadSafe.449" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.452" = type { %"class.WTF::VectorBuffer.453" }
%"class.WTF::VectorBuffer.453" = type { %"class.WTF::VectorBufferBase.454" }
%"class.WTF::VectorBufferBase.454" = type { %"class.blink::StyleNameOrKeyword"*, i32, i32 }
%"class.blink::StyleNameOrKeyword" = type { i32, %"class.blink::StyleName" }
%"class.blink::StyleName" = type { i32, %"class.WTF::AtomicString" }
%"class.WTF::Vector.440" = type { %"class.WTF::VectorBuffer.441" }
%"class.WTF::VectorBuffer.441" = type { %"class.WTF::VectorBufferBase.442" }
%"class.WTF::VectorBufferBase.442" = type { double*, i32, i32 }
%"class.WTF::Vector.457" = type { %"class.WTF::VectorBuffer.458" }
%"class.WTF::VectorBuffer.458" = type { %"class.WTF::VectorBufferBase.459" }
%"class.WTF::VectorBufferBase.459" = type { i32*, i32, i32 }
%"class.WTF::Vector.462" = type { %"class.WTF::VectorBuffer.463" }
%"class.WTF::VectorBuffer.463" = type { %"class.WTF::VectorBufferBase.464" }
%"class.WTF::VectorBufferBase.464" = type { i32*, i32, i32 }
%"class.WTF::Vector.467" = type { %"class.WTF::VectorBuffer.468" }
%"class.WTF::VectorBuffer.468" = type { %"class.WTF::VectorBufferBase.469" }
%"class.WTF::VectorBufferBase.469" = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.475" = type { %"class.std::__1::__compressed_pair.476" }
%"class.std::__1::__compressed_pair.476" = type { %"struct.std::__1::__compressed_pair_elem.477" }
%"struct.std::__1::__compressed_pair_elem.477" = type { %"class.blink::CSSTransitionData"* }
%"class.blink::CSSTransitionData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.478" }
%"class.WTF::Vector.478" = type { %"class.WTF::VectorBuffer.479" }
%"class.WTF::VectorBuffer.479" = type { %"class.WTF::VectorBufferBase.480" }
%"class.WTF::VectorBufferBase.480" = type { %"struct.blink::CSSTransitionData::TransitionProperty"*, i32, i32 }
%"struct.blink::CSSTransitionData::TransitionProperty" = type { i32, i32, %"class.WTF::AtomicString" }
%"class.std::__1::unique_ptr.486" = type { %"class.std::__1::__compressed_pair.487" }
%"class.std::__1::__compressed_pair.487" = type { %"struct.std::__1::__compressed_pair_elem.488" }
%"struct.std::__1::__compressed_pair_elem.488" = type { %"class.blink::PaintImages"* }
%"class.blink::PaintImages" = type { %"class.WTF::Vector.489" }
%"class.WTF::Vector.489" = type { %"class.WTF::VectorBuffer.490" }
%"class.WTF::VectorBuffer.490" = type { %"class.WTF::VectorBufferBase.491" }
%"class.WTF::VectorBufferBase.491" = type { %"class.blink::Persistent.306"*, i32, i32 }
%"class.std::__1::unique_ptr.497" = type { %"class.std::__1::__compressed_pair.498" }
%"class.std::__1::__compressed_pair.498" = type { %"struct.std::__1::__compressed_pair_elem.499" }
%"struct.std::__1::__compressed_pair_elem.499" = type { %"class.blink::StyleNonInheritedVariables"* }
%"class.blink::StyleNonInheritedVariables" = type { %"class.blink::StyleVariables" }
%"class.blink::FillLayer" = type <{ %"class.blink::FillLayer"*, %"class.blink::Persistent.306", %"class.blink::Length", %"class.blink::Length", %"class.blink::LengthSize", [7 x i8], i8 }>
%"class.blink::LengthSize" = type { %"class.blink::Length", %"class.blink::Length" }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::TransformOperations" = type { %"class.WTF::Vector.508" }
%"class.WTF::Vector.508" = type { %"class.WTF::VectorBuffer.509" }
%"class.WTF::VectorBuffer.509" = type { %"class.WTF::VectorBufferBase.510" }
%"class.WTF::VectorBufferBase.510" = type { %class.scoped_refptr.511*, i32, i32 }
%class.scoped_refptr.511 = type { %"class.blink::TransformOperation"* }
%"class.blink::TransformOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.355", [4 x i8] }>
%"class.blink::Persistent.514" = type { %"class.blink::PersistentBase.515" }
%"class.blink::PersistentBase.515" = type { %"class.blink::ContentData"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::ContentData" = type { i32 (...)**, %"class.blink::Member.518" }
%"class.blink::Member.518" = type { %"class.blink::MemberBase.519" }
%"class.blink::MemberBase.519" = type { %"class.blink::ContentData"* }
%"class.blink::TransformOrigin" = type { %"class.blink::Length", %"class.blink::Length", float }
%"class.blink::StyleSelfAlignmentData" = type { i8, [3 x i8] }
%"class.blink::StyleContentAlignmentData" = type { i16, [2 x i8] }
%"class.blink::DataRef.520" = type { %class.scoped_refptr.521 }
%class.scoped_refptr.521 = type { %"class.blink::ComputedStyleBase::StyleSVGData"* }
%"class.blink::ComputedStyleBase::StyleSVGData" = type <{ %"class.WTF::RefCounted.522", [4 x i8], %"class.blink::DataRef.524", %"class.blink::DataRef.528", %"class.blink::DataRef.549", %"class.blink::DataRef.569", %"class.blink::DataRef.581", %"class.blink::DataRef.585", %class.scoped_refptr.553, i32, [4 x i8] }>
%"class.WTF::RefCounted.522" = type { %"class.base::RefCounted.523" }
%"class.base::RefCounted.523" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.524" = type { %class.scoped_refptr.525 }
%class.scoped_refptr.525 = type { %"class.blink::ComputedStyleBase::StyleMiscData"* }
%"class.blink::ComputedStyleBase::StyleMiscData" = type <{ %"class.WTF::RefCounted.526", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.526" = type { %"class.base::RefCounted.527" }
%"class.base::RefCounted.527" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.528" = type { %class.scoped_refptr.529 }
%class.scoped_refptr.529 = type { %"class.blink::ComputedStyleBase::StyleGeometryData"* }
%"class.blink::ComputedStyleBase::StyleGeometryData" = type { %"class.WTF::RefCounted.530", %class.scoped_refptr.532, %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.WTF::RefCounted.530" = type { %"class.base::RefCounted.531" }
%"class.base::RefCounted.531" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.532 = type { %"class.blink::StylePath"* }
%"class.blink::StylePath" = type { %"class.blink::BasicShape.base", %"class.std::__1::unique_ptr.533", %"class.std::__1::unique_ptr.539", float, i32 }
%"class.blink::BasicShape.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.352" }>
%"class.std::__1::unique_ptr.533" = type { %"class.std::__1::__compressed_pair.534" }
%"class.std::__1::__compressed_pair.534" = type { %"struct.std::__1::__compressed_pair_elem.535" }
%"struct.std::__1::__compressed_pair_elem.535" = type { %"class.blink::SVGPathByteStream"* }
%"class.blink::SVGPathByteStream" = type opaque
%"class.std::__1::unique_ptr.539" = type { %"class.std::__1::__compressed_pair.540" }
%"class.std::__1::__compressed_pair.540" = type { %"struct.std::__1::__compressed_pair_elem.541" }
%"struct.std::__1::__compressed_pair_elem.541" = type { %"class.blink::Path"* }
%"class.blink::Path" = type { %class.SkPath }
%class.SkPath = type <{ %class.sk_sp.542, i32, %"struct.std::__1::atomic.46", %"struct.std::__1::atomic.46", i8, i8 }>
%class.sk_sp.542 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.543, %class.SkTDArray.544, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic.41" }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.543 = type { i8*, i32, i32 }
%class.SkTDArray.544 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.545 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic.41", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.46" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.545 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.238", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic.41" }>
%"class.blink::DataRef.549" = type { %class.scoped_refptr.550 }
%class.scoped_refptr.550 = type { %"class.blink::ComputedStyleBase::StyleFillData"* }
%"class.blink::ComputedStyleBase::StyleFillData" = type { %"class.WTF::RefCounted.551", [4 x i8], %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", float, [4 x i8] }
%"class.WTF::RefCounted.551" = type { %"class.base::RefCounted.552" }
%"class.base::RefCounted.552" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::SVGPaint" = type <{ %class.scoped_refptr.553, %"class.blink::StyleColor", i32, [4 x i8] }>
%"class.blink::DataRef.569" = type { %class.scoped_refptr.570 }
%class.scoped_refptr.570 = type { %"class.blink::ComputedStyleBase::StyleStrokeData"* }
%"class.blink::ComputedStyleBase::StyleStrokeData" = type <{ %"class.WTF::RefCounted.571", [4 x i8], %class.scoped_refptr.573, %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", %"class.blink::Length", %"class.blink::UnzoomedLength", float, float, i8, [7 x i8] }>
%"class.WTF::RefCounted.571" = type { %"class.base::RefCounted.572" }
%"class.base::RefCounted.572" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.573 = type { %"class.base::RefCountedData.574"* }
%"class.base::RefCountedData.574" = type { %"class.base::RefCountedThreadSafe.575", %"class.WTF::Vector.576" }
%"class.base::RefCountedThreadSafe.575" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.576" = type { %"class.WTF::VectorBuffer.577" }
%"class.WTF::VectorBuffer.577" = type { %"class.WTF::VectorBufferBase.578" }
%"class.WTF::VectorBufferBase.578" = type { %"class.blink::Length"*, i32, i32 }
%"class.blink::UnzoomedLength" = type { %"class.blink::Length" }
%"class.blink::DataRef.581" = type { %class.scoped_refptr.582 }
%class.scoped_refptr.582 = type { %"class.blink::ComputedStyleBase::StyleInheritedResourcesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedResourcesData" = type { %"class.WTF::RefCounted.583", %class.scoped_refptr.553, %class.scoped_refptr.553, %class.scoped_refptr.553 }
%"class.WTF::RefCounted.583" = type { %"class.base::RefCounted.584" }
%"class.base::RefCounted.584" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.585" = type { %class.scoped_refptr.586 }
%class.scoped_refptr.586 = type { %"class.blink::ComputedStyleBase::StyleStopData"* }
%"class.blink::ComputedStyleBase::StyleStopData" = type { %"class.WTF::RefCounted.587", float, %"class.blink::StyleColor" }
%"class.WTF::RefCounted.587" = type { %"class.base::RefCounted.588" }
%"class.base::RefCounted.588" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.553 = type { %"class.blink::StyleSVGResource"* }
%"class.blink::StyleSVGResource" = type { %"class.WTF::RefCounted.554", %"class.blink::Persistent.556", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.554" = type { %"class.base::RefCounted.555" }
%"class.base::RefCounted.555" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.556" = type { %"class.blink::PersistentBase.557" }
%"class.blink::PersistentBase.557" = type { %"class.blink::SVGResource"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::SVGResource" = type { i32 (...)**, %"class.blink::Member.560", %"class.blink::HeapHashMap.562" }
%"class.blink::Member.560" = type { %"class.blink::MemberBase.561" }
%"class.blink::MemberBase.561" = type { %"class.blink::Element"* }
%"class.blink::Element" = type opaque
%"class.blink::HeapHashMap.562" = type { %"class.WTF::HashMap.565" }
%"class.WTF::HashMap.565" = type { %"class.WTF::HashTable.566" }
%"class.WTF::HashTable.566" = type <{ %"struct.WTF::KeyValuePair.568"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.568" = type opaque
%"class.blink::DataRef.589" = type { %class.scoped_refptr.590 }
%class.scoped_refptr.590 = type { %"class.blink::ComputedStyleBase::StyleBoxData"* }
%"class.blink::ComputedStyleBase::StyleBoxData" = type <{ %"class.WTF::RefCounted.591", %"class.blink::StyleAspectRatio", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", i32, i8, [3 x i8] }>
%"class.WTF::RefCounted.591" = type { %"class.base::RefCounted.592" }
%"class.base::RefCounted.592" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::StyleAspectRatio" = type { i8, %"class.blink::FloatSize" }
%"class.blink::DataRef.593" = type { %class.scoped_refptr.594 }
%class.scoped_refptr.594 = type { %"class.blink::ComputedStyleBase::StyleBackgroundData"* }
%"class.blink::ComputedStyleBase::StyleBackgroundData" = type { %"class.WTF::RefCounted.595", [4 x i8], %"class.blink::FillLayer", %"class.blink::StyleColor" }
%"class.WTF::RefCounted.595" = type { %"class.base::RefCounted.596" }
%"class.base::RefCounted.596" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.597" = type { %class.scoped_refptr.598 }
%class.scoped_refptr.598 = type { %"class.blink::ComputedStyleBase::StyleSurroundData"* }
%"class.blink::ComputedStyleBase::StyleSurroundData" = type <{ %"class.WTF::RefCounted.599", [4 x i8], %"class.blink::NinePieceImage", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i16, [6 x i8] }>
%"class.WTF::RefCounted.599" = type { %"class.base::RefCounted.600" }
%"class.base::RefCounted.600" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.601" = type { %class.scoped_refptr.602 }
%class.scoped_refptr.602 = type { %"class.blink::ComputedStyleBase::StyleInheritedVariablesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedVariablesData" = type { %"class.WTF::RefCounted.603", %class.scoped_refptr.605 }
%"class.WTF::RefCounted.603" = type { %"class.base::RefCounted.604" }
%"class.base::RefCounted.604" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.605 = type { %"class.blink::StyleInheritedVariables"* }
%"class.blink::StyleInheritedVariables" = type { %"class.WTF::RefCounted.621", %"class.blink::StyleVariables", %class.scoped_refptr.605 }
%"class.WTF::RefCounted.621" = type { %"class.base::RefCounted.622" }
%"class.base::RefCounted.622" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::RefCounted.606" = type { %"class.base::RefCounted.607" }
%"class.base::RefCounted.607" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unique_ptr.608" = type { %"class.std::__1::__compressed_pair.609" }
%"class.std::__1::__compressed_pair.609" = type { %"struct.std::__1::__compressed_pair_elem.610" }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"class.blink::StyleCachedData"* }
%"class.blink::StyleCachedData" = type { %"class.std::__1::unique_ptr.611" }
%"class.std::__1::unique_ptr.611" = type { %"class.std::__1::__compressed_pair.612" }
%"class.std::__1::__compressed_pair.612" = type { %"struct.std::__1::__compressed_pair_elem.613" }
%"struct.std::__1::__compressed_pair_elem.613" = type { %"class.WTF::Vector.614"* }
%"class.WTF::Vector.614" = type opaque
%"class.blink::LayoutUnit" = type { i32 }
%"class.blink::SimpleFontData" = type { %"class.blink::FontData.base", %"class.blink::FontMetrics", float, float, [4 x i8], %"class.blink::FontPlatformData", %class.SkFont, i16, float, i16, %"class.std::__1::unique_ptr", %class.scoped_refptr.56, i32, i32, %"struct.blink::FontHeight" }
%"class.blink::FontData.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.36" }>
%"class.blink::FontMetrics" = type <{ i32, float, float, float, float, float, float, %"class.absl::optional", %"class.absl::optional", i32, i32, i8, i8, [2 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.40 }
%union.anon.40 = type { float }
%"class.blink::FontPlatformData" = type <{ %class.sk_sp, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr.51, i8, [7 x i8] }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.41" }
%class.SkFontStyle = type { i32 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr.51 = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type opaque
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"struct.blink::SimpleFontData::DerivedFontData"* }
%"struct.blink::SimpleFontData::DerivedFontData" = type { %class.scoped_refptr.54, %class.scoped_refptr.54 }
%class.scoped_refptr.54 = type { %"class.blink::SimpleFontData"* }
%class.scoped_refptr.56 = type { %"class.blink::CustomFontData"* }
%"class.blink::CustomFontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.57", [4 x i8] }>
%"class.WTF::RefCounted.57" = type { %"class.base::RefCounted.58" }
%"class.base::RefCounted.58" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::FontHeight" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::FloatPoint" = type { float, float }
%"class.WTF::Vector.640" = type { %"class.WTF::VectorBuffer.641" }
%"class.WTF::VectorBuffer.641" = type { %"class.WTF::VectorBufferBase.642" }
%"class.WTF::VectorBufferBase.642" = type { float*, i32, i32 }
%"struct.blink::TextDecorationInfo::PerLineData" = type { float, float, i32, [4 x i8], %"class.absl::optional.645" }
%"class.absl::optional.645" = type { %"class.absl::optional_internal::optional_data.646" }
%"class.absl::optional_internal::optional_data.646" = type { %"class.absl::optional_internal::optional_data_base.647" }
%"class.absl::optional_internal::optional_data_base.647" = type { %"class.absl::optional_internal::optional_data_dtor_base.648" }
%"class.absl::optional_internal::optional_data_dtor_base.648" = type { i8, [7 x i8], %union.anon.649 }
%union.anon.649 = type { %"class.blink::Path" }
%"class.blink::NGInkOverflow" = type { %union.anon }
%union.anon = type { %"struct.blink::NGSingleInkOverflow"* }
%"struct.blink::NGSingleInkOverflow" = type { %"struct.blink::PhysicalRect" }
%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::NGContainerInkOverflow" = type { %"struct.blink::NGSingleInkOverflow", %"struct.blink::PhysicalRect" }
%"struct.blink::NGTextFragmentPaintInfo" = type opaque
%"class.absl::optional.630" = type { %"class.absl::optional_internal::optional_data.631" }
%"class.absl::optional_internal::optional_data.631" = type { %"class.absl::optional_internal::optional_data_base.632" }
%"class.absl::optional_internal::optional_data_base.632" = type { %"class.absl::optional_internal::optional_data_dtor_base.633" }
%"class.absl::optional_internal::optional_data_dtor_base.633" = type { i8, %union.anon.634 }
%union.anon.634 = type { %"struct.blink::PhysicalRect" }
%"class.blink::LayoutRect" = type { %"class.blink::LayoutPoint", %"class.blink::LayoutSize" }
%"class.blink::LayoutPoint" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutRectOutsets" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::WritingModeConverter" = type { %"class.blink::WritingDirectionMode", %"struct.blink::PhysicalSize" }
%"class.blink::WritingDirectionMode" = type { i8, i8 }
%"struct.blink::LogicalRect" = type { %"struct.blink::LogicalOffset", %"struct.blink::LogicalSize" }
%"struct.blink::LogicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::LogicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::TextDecorationInfo" = type { %"class.blink::ComputedStyle"*, %"class.absl::optional.635", i32, %"class.blink::LayoutUnit", %"class.blink::SimpleFontData"*, float, i32, %"class.blink::FloatPoint", i8, %"class.WTF::Vector.640", i32, [4 x i8], [3 x %"struct.blink::TextDecorationInfo::PerLineData"] }
%"class.absl::optional.635" = type { %"class.absl::optional_internal::optional_data.636" }
%"class.absl::optional_internal::optional_data.636" = type { %"class.absl::optional_internal::optional_data_base.637" }
%"class.absl::optional_internal::optional_data_base.637" = type { %"class.absl::optional_internal::optional_data_dtor_base.638" }
%"class.absl::optional_internal::optional_data_dtor_base.638" = type { i8, %union.anon.639 }
%union.anon.639 = type { %"class.blink::AppliedTextDecoration" }
%"class.blink::NGTextDecorationOffset" = type { %"class.blink::TextDecorationOffsetBase", %"class.blink::ComputedStyle"*, %"class.blink::NGPhysicalBoxFragment"* }
%"class.blink::TextDecorationOffsetBase" = type { i32 (...)**, %"class.blink::ComputedStyle"* }
%"class.blink::NGPhysicalBoxFragment" = type opaque
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink18TextDecorationInfoD2Ev = comdat any

$_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZNK3WTF6VectorIN5blink21AppliedTextDecorationELj0ENS_18PartitionAllocatorEE2atEj = comdat any

@__const._ZN5blink13NGInkOverflow29ComputeTextDecorationOverflowERKNS_23NGTextFragmentPaintInfoERKNS_13ComputedStyleERKNS_10LayoutRectE.decoration_info = private unnamed_addr constant { %"class.blink::ComputedStyle"*, { { { { i8, [3 x i8], { { i8, [3 x i8], %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" } } } } } }, i32, %"class.blink::LayoutUnit", %"class.blink::SimpleFontData"*, float, i32, %"class.blink::FloatPoint", i8, [7 x i8], %"class.WTF::Vector.640", i32, [4 x i8], [3 x %"struct.blink::TextDecorationInfo::PerLineData"] } { %"class.blink::ComputedStyle"* inttoptr (i64 -6148914691236517206 to %"class.blink::ComputedStyle"*), { { { { i8, [3 x i8], { { i8, [3 x i8], %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" } } } } } } { { { { i8, [3 x i8], { { i8, [3 x i8], %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" } } } } } { { { i8, [3 x i8], { { i8, [3 x i8], %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" } } } } { { i8, [3 x i8], { { i8, [3 x i8], %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" } } } { i8 -86, [3 x i8] c"\AA\AA\AA", { { i8, [3 x i8], %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" } } { { i8, [3 x i8], %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" } { i8 -86, [3 x i8] c"\AA\AA\AA", %"class.blink::Color" { i32 -1431655766 }, %"class.blink::TextDecorationThickness" { %"class.blink::Length" <{ %union.anon.243 { i32 -1431655766 }, i8 -86, i8 -86, i8 -86, i8 -86 }>, i8 -86, [3 x i8] c"\AA\AA\AA" }, %"class.blink::Length" <{ %union.anon.243 { i32 -1431655766 }, i8 -86, i8 -86, i8 -86, i8 -86 }> } } } } } }, i32 -1431655766, %"class.blink::LayoutUnit" { i32 -1431655766 }, %"class.blink::SimpleFontData"* inttoptr (i64 -6148914691236517206 to %"class.blink::SimpleFontData"*), float 0xFFFFFFFFE0000000, i32 -1431655766, %"class.blink::FloatPoint" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %"class.WTF::Vector.640" { %"class.WTF::VectorBuffer.641" { %"class.WTF::VectorBufferBase.642" { float* inttoptr (i64 -6148914691236517206 to float*), i32 -1431655766, i32 -1431655766 } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x %"struct.blink::TextDecorationInfo::PerLineData"] [%"struct.blink::TextDecorationInfo::PerLineData" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.absl::optional.645" { %"class.absl::optional_internal::optional_data.646" { %"class.absl::optional_internal::optional_data_base.647" { %"class.absl::optional_internal::optional_data_dtor_base.648" { i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %union.anon.649 { %"class.blink::Path" { %class.SkPath <{ %class.sk_sp.542 { %class.SkPathRef* inttoptr (i64 -6148914691236517206 to %class.SkPathRef*) }, i32 -1431655766, %"struct.std::__1::atomic.46" { %"struct.std::__1::__atomic_base.47" { %"struct.std::__1::__atomic_base.48" { %"struct.std::__1::__cxx_atomic_impl.49" { %"struct.std::__1::__cxx_atomic_base_impl.50" { i8 -86 } } } } }, %"struct.std::__1::atomic.46" { %"struct.std::__1::__atomic_base.47" { %"struct.std::__1::__atomic_base.48" { %"struct.std::__1::__cxx_atomic_impl.49" { %"struct.std::__1::__cxx_atomic_base_impl.50" { i8 -86 } } } } }, i8 -86, i8 -86 }> } } } } } } }, %"struct.blink::TextDecorationInfo::PerLineData" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.absl::optional.645" { %"class.absl::optional_internal::optional_data.646" { %"class.absl::optional_internal::optional_data_base.647" { %"class.absl::optional_internal::optional_data_dtor_base.648" { i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %union.anon.649 { %"class.blink::Path" { %class.SkPath <{ %class.sk_sp.542 { %class.SkPathRef* inttoptr (i64 -6148914691236517206 to %class.SkPathRef*) }, i32 -1431655766, %"struct.std::__1::atomic.46" { %"struct.std::__1::__atomic_base.47" { %"struct.std::__1::__atomic_base.48" { %"struct.std::__1::__cxx_atomic_impl.49" { %"struct.std::__1::__cxx_atomic_base_impl.50" { i8 -86 } } } } }, %"struct.std::__1::atomic.46" { %"struct.std::__1::__atomic_base.47" { %"struct.std::__1::__atomic_base.48" { %"struct.std::__1::__cxx_atomic_impl.49" { %"struct.std::__1::__cxx_atomic_base_impl.50" { i8 -86 } } } } }, i8 -86, i8 -86 }> } } } } } } }, %"struct.blink::TextDecorationInfo::PerLineData" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.absl::optional.645" { %"class.absl::optional_internal::optional_data.646" { %"class.absl::optional_internal::optional_data_base.647" { %"class.absl::optional_internal::optional_data_dtor_base.648" { i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %union.anon.649 { %"class.blink::Path" { %class.SkPath <{ %class.sk_sp.542 { %class.SkPathRef* inttoptr (i64 -6148914691236517206 to %class.SkPathRef*) }, i32 -1431655766, %"struct.std::__1::atomic.46" { %"struct.std::__1::__atomic_base.47" { %"struct.std::__1::__atomic_base.48" { %"struct.std::__1::__cxx_atomic_impl.49" { %"struct.std::__1::__cxx_atomic_base_impl.50" { i8 -86 } } } } }, %"struct.std::__1::atomic.46" { %"struct.std::__1::__atomic_base.47" { %"struct.std::__1::__atomic_base.48" { %"struct.std::__1::__cxx_atomic_impl.49" { %"struct.std::__1::__cxx_atomic_base_impl.50" { i8 -86 } } } } }, i8 -86, i8 -86 }> } } } } } } }] }, align 8
@_ZTVN5blink22NGTextDecorationOffsetE = external unnamed_addr constant { [3 x i8*] }, align 8
@.str = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

@_ZN5blink13NGInkOverflowC1ENS0_4TypeERKS0_ = hidden unnamed_addr alias void (%"class.blink::NGInkOverflow"*, i32, %"class.blink::NGInkOverflow"*), void (%"class.blink::NGInkOverflow"*, i32, %"class.blink::NGInkOverflow"*)* @_ZN5blink13NGInkOverflowC2ENS0_4TypeERKS0_
@_ZN5blink13NGInkOverflowC1ENS0_4TypeEOS0_ = hidden unnamed_addr alias void (%"class.blink::NGInkOverflow"*, i32, %"class.blink::NGInkOverflow"*), void (%"class.blink::NGInkOverflow"*, i32, %"class.blink::NGInkOverflow"*)* @_ZN5blink13NGInkOverflowC2ENS0_4TypeEOS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13NGInkOverflowC2ENS0_4TypeERKS0_(%"class.blink::NGInkOverflow"* nocapture, i32, %"class.blink::NGInkOverflow"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.blink::NGInkOverflow"* %0 to i64*
  store i64 0, i64* %4, align 8
  switch i32 %1, label %18 [
    i32 7, label %13
    i32 6, label %8
    i32 4, label %8
    i32 3, label %5
    i32 5, label %5
  ]

5:                                                ; preds = %3, %3
  %6 = bitcast %"class.blink::NGInkOverflow"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %4, align 8
  br label %18

8:                                                ; preds = %3, %3
  %9 = tail call noalias i8* @malloc(i64 16) #10
  %10 = bitcast %"class.blink::NGInkOverflow"* %2 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %11, i64 16, i1 false)
  %12 = bitcast %"class.blink::NGInkOverflow"* %0 to i8**
  store i8* %9, i8** %12, align 8
  br label %18

13:                                               ; preds = %3
  %14 = tail call noalias i8* @malloc(i64 32) #10
  %15 = bitcast %"class.blink::NGInkOverflow"* %2 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 4 %16, i64 32, i1 false)
  %17 = bitcast %"class.blink::NGInkOverflow"* %0 to i8**
  store i8* %14, i8** %17, align 8
  br label %18

18:                                               ; preds = %3, %13, %8, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink13NGInkOverflowC2ENS0_4TypeEOS0_(%"class.blink::NGInkOverflow"* nocapture, i32, %"class.blink::NGInkOverflow"* nocapture dereferenceable(8)) unnamed_addr #2 align 2 {
  %4 = bitcast %"class.blink::NGInkOverflow"* %0 to i64*
  store i64 0, i64* %4, align 8
  switch i32 %1, label %16 [
    i32 7, label %12
    i32 6, label %8
    i32 4, label %8
    i32 3, label %5
    i32 5, label %5
  ]

5:                                                ; preds = %3, %3
  %6 = bitcast %"class.blink::NGInkOverflow"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %4, align 8
  br label %16

8:                                                ; preds = %3, %3
  %9 = getelementptr inbounds %"class.blink::NGInkOverflow", %"class.blink::NGInkOverflow"* %2, i64 0, i32 0, i32 0
  %10 = bitcast %"class.blink::NGInkOverflow"* %2 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %4, align 8
  store %"struct.blink::NGSingleInkOverflow"* null, %"struct.blink::NGSingleInkOverflow"** %9, align 8
  br label %16

12:                                               ; preds = %3
  %13 = bitcast %"class.blink::NGInkOverflow"* %2 to %"struct.blink::NGContainerInkOverflow"**
  %14 = bitcast %"class.blink::NGInkOverflow"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %4, align 8
  store %"struct.blink::NGContainerInkOverflow"* null, %"struct.blink::NGContainerInkOverflow"** %13, align 8
  br label %16

16:                                               ; preds = %3, %12, %8, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink13NGInkOverflow5ResetENS0_4TypeES1_(%"class.blink::NGInkOverflow"* nocapture readonly, i32, i32 returned) local_unnamed_addr #0 align 2 {
  switch i32 %1, label %16 [
    i32 7, label %10
    i32 6, label %4
    i32 4, label %4
  ]

4:                                                ; preds = %3, %3
  %5 = getelementptr inbounds %"class.blink::NGInkOverflow", %"class.blink::NGInkOverflow"* %0, i64 0, i32 0, i32 0
  %6 = load %"struct.blink::NGSingleInkOverflow"*, %"struct.blink::NGSingleInkOverflow"** %5, align 8
  %7 = icmp eq %"struct.blink::NGSingleInkOverflow"* %6, null
  br i1 %7, label %16, label %8

8:                                                ; preds = %4
  %9 = bitcast %"struct.blink::NGSingleInkOverflow"* %6 to i8*
  tail call void @free(i8* %9) #10
  br label %16

10:                                               ; preds = %3
  %11 = bitcast %"class.blink::NGInkOverflow"* %0 to %"struct.blink::NGContainerInkOverflow"**
  %12 = load %"struct.blink::NGContainerInkOverflow"*, %"struct.blink::NGContainerInkOverflow"** %11, align 8
  %13 = icmp eq %"struct.blink::NGContainerInkOverflow"* %12, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = bitcast %"struct.blink::NGContainerInkOverflow"* %12 to i8*
  tail call void @free(i8* %15) #10
  br label %16

16:                                               ; preds = %10, %14, %4, %8, %3
  ret i32 %2
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK5blink13NGInkOverflow11FromOutsetsERKNS_12PhysicalSizeE(%"class.blink::NGInkOverflow"* nocapture readonly, %"struct.blink::PhysicalSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #3 align 2 {
  %3 = bitcast %"class.blink::NGInkOverflow"* %0 to [4 x i16]*
  %4 = bitcast %"class.blink::NGInkOverflow"* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %8 = load i16, i16* %7, align 2
  %9 = zext i16 %8 to i32
  %10 = tail call i1 @llvm.is.constant.i32(i32 %6) #10
  %11 = sub nsw i32 0, %6
  %12 = icmp eq i32 %11, -2147483648
  %13 = and i1 %10, %12
  %14 = tail call i1 @llvm.is.constant.i32(i32 %9) #10
  %15 = sub nsw i32 0, %9
  %16 = icmp eq i32 %15, -2147483648
  %17 = and i1 %14, %16
  %18 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %1, i64 0, i32 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp slt i32 %19, 0
  %21 = select i1 %20, i32 -2147483648, i32 2147483647
  %22 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %19) #10
  %23 = extractvalue { i32, i1 } %22, 1
  %24 = extractvalue { i32, i1 } %22, 0
  %25 = select i1 %23, i32 %21, i32 %24, !prof !2
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %27 = load i16, i16* %26, align 4
  %28 = zext i16 %27 to i32
  %29 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %25, i32 %28) #10
  %30 = extractvalue { i32, i1 } %29, 1
  %31 = extractvalue { i32, i1 } %29, 0
  %32 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %1, i64 0, i32 1, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = icmp slt i32 %33, 0
  %35 = select i1 %34, i32 -2147483648, i32 2147483647
  %36 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %9, i32 %33) #10
  %37 = extractvalue { i32, i1 } %36, 1
  %38 = extractvalue { i32, i1 } %36, 0
  %39 = select i1 %37, i32 %35, i32 %38, !prof !2
  %40 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %39, i32 %42) #10
  %44 = extractvalue { i32, i1 } %43, 1
  %45 = extractvalue { i32, i1 } %43, 0
  %46 = zext i32 %15 to i64
  %47 = shl nuw i64 %46, 32
  %48 = select i1 %17, i64 9223372032559808512, i64 %47
  %49 = zext i32 %11 to i64
  %50 = select i1 %13, i64 2147483647, i64 %49
  %51 = or i64 %48, %50
  %52 = insertvalue { i64, i64 } undef, i64 %51, 0
  %53 = zext i32 %45 to i64
  %54 = shl nuw i64 %53, 32
  %55 = select i1 %44, i64 9223372032559808512, i64 %54, !prof !2
  %56 = zext i32 %31 to i64
  %57 = select i1 %30, i64 2147483647, i64 %56, !prof !2
  %58 = or i64 %55, %57
  %59 = insertvalue { i64, i64 } %52, i64 %58, 1
  ret { i64, i64 } %59
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink13NGInkOverflow4SelfENS0_4TypeERKNS_12PhysicalSizeE(%"class.blink::NGInkOverflow"* nocapture readonly, i32, %"struct.blink::PhysicalSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  switch i32 %1, label %71 [
    i32 0, label %4
    i32 1, label %4
    i32 2, label %4
    i32 5, label %4
    i32 6, label %4
    i32 3, label %7
    i32 4, label %63
    i32 7, label %63
  ]

4:                                                ; preds = %3, %3, %3, %3, %3
  %5 = bitcast %"struct.blink::PhysicalSize"* %2 to i64*
  %6 = load i64, i64* %5, align 4
  br label %74

7:                                                ; preds = %3
  %8 = bitcast %"class.blink::NGInkOverflow"* %0 to [4 x i16]*
  %9 = bitcast %"class.blink::NGInkOverflow"* %0 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = tail call i1 @llvm.is.constant.i32(i32 %11) #10
  %16 = sub nsw i32 0, %11
  %17 = icmp eq i32 %16, -2147483648
  %18 = and i1 %15, %17
  %19 = tail call i1 @llvm.is.constant.i32(i32 %14) #10
  %20 = sub nsw i32 0, %14
  %21 = icmp eq i32 %20, -2147483648
  %22 = and i1 %19, %21
  %23 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  %26 = select i1 %25, i32 -2147483648, i32 2147483647
  %27 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %11, i32 %24) #10
  %28 = extractvalue { i32, i1 } %27, 1
  %29 = extractvalue { i32, i1 } %27, 0
  %30 = select i1 %28, i32 %26, i32 %29, !prof !2
  %31 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  %32 = load i16, i16* %31, align 4
  %33 = zext i16 %32 to i32
  %34 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %30, i32 %33) #10
  %35 = extractvalue { i32, i1 } %34, 1
  %36 = extractvalue { i32, i1 } %34, 0
  %37 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 1, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, 0
  %40 = select i1 %39, i32 -2147483648, i32 2147483647
  %41 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %14, i32 %38) #10
  %42 = extractvalue { i32, i1 } %41, 1
  %43 = extractvalue { i32, i1 } %41, 0
  %44 = select i1 %42, i32 %40, i32 %43, !prof !2
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %44, i32 %47) #10
  %49 = extractvalue { i32, i1 } %48, 1
  %50 = extractvalue { i32, i1 } %48, 0
  %51 = zext i32 %20 to i64
  %52 = shl nuw i64 %51, 32
  %53 = select i1 %22, i64 9223372032559808512, i64 %52
  %54 = zext i32 %16 to i64
  %55 = select i1 %18, i64 2147483647, i64 %54
  %56 = or i64 %53, %55
  %57 = zext i32 %50 to i64
  %58 = shl nuw i64 %57, 32
  %59 = select i1 %49, i64 9223372032559808512, i64 %58, !prof !2
  %60 = zext i32 %36 to i64
  %61 = select i1 %35, i64 2147483647, i64 %60, !prof !2
  %62 = or i64 %59, %61
  br label %74

63:                                               ; preds = %3, %3
  %64 = bitcast %"class.blink::NGInkOverflow"* %0 to i8**
  %65 = load i8*, i8** %64, align 8
  %66 = bitcast i8* %65 to i64*
  %67 = load i64, i64* %66, align 4
  %68 = getelementptr inbounds i8, i8* %65, i64 8
  %69 = bitcast i8* %68 to i64*
  %70 = load i64, i64* %69, align 4
  br label %74

71:                                               ; preds = %3
  %72 = bitcast %"struct.blink::PhysicalSize"* %2 to i64*
  %73 = load i64, i64* %72, align 4
  br label %74

74:                                               ; preds = %71, %63, %7, %4
  %75 = phi i64 [ 0, %71 ], [ %67, %63 ], [ %56, %7 ], [ 0, %4 ]
  %76 = phi i64 [ %73, %71 ], [ %70, %63 ], [ %62, %7 ], [ %6, %4 ]
  %77 = insertvalue { i64, i64 } undef, i64 %75, 0
  %78 = insertvalue { i64, i64 } %77, i64 %76, 1
  ret { i64, i64 } %78
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink13NGInkOverflow8ContentsENS0_4TypeERKNS_12PhysicalSizeE(%"class.blink::NGInkOverflow"* nocapture readonly, i32, %"struct.blink::PhysicalSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  switch i32 %1, label %77 [
    i32 7, label %68
    i32 6, label %60
    i32 5, label %4
  ]

4:                                                ; preds = %3
  %5 = bitcast %"class.blink::NGInkOverflow"* %0 to [4 x i16]*
  %6 = bitcast %"class.blink::NGInkOverflow"* %0 to i16*
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = getelementptr inbounds [4 x i16], [4 x i16]* %5, i64 0, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i32
  %12 = tail call i1 @llvm.is.constant.i32(i32 %8) #10
  %13 = sub nsw i32 0, %8
  %14 = icmp eq i32 %13, -2147483648
  %15 = and i1 %12, %14
  %16 = tail call i1 @llvm.is.constant.i32(i32 %11) #10
  %17 = sub nsw i32 0, %11
  %18 = icmp eq i32 %17, -2147483648
  %19 = and i1 %16, %18
  %20 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp slt i32 %21, 0
  %23 = select i1 %22, i32 -2147483648, i32 2147483647
  %24 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %8, i32 %21) #10
  %25 = extractvalue { i32, i1 } %24, 1
  %26 = extractvalue { i32, i1 } %24, 0
  %27 = select i1 %25, i32 %23, i32 %26, !prof !2
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %5, i64 0, i64 2
  %29 = load i16, i16* %28, align 4
  %30 = zext i16 %29 to i32
  %31 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %27, i32 %30) #10
  %32 = extractvalue { i32, i1 } %31, 1
  %33 = extractvalue { i32, i1 } %31, 0
  %34 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 1, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 0
  %37 = select i1 %36, i32 -2147483648, i32 2147483647
  %38 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %11, i32 %35) #10
  %39 = extractvalue { i32, i1 } %38, 1
  %40 = extractvalue { i32, i1 } %38, 0
  %41 = select i1 %39, i32 %37, i32 %40, !prof !2
  %42 = getelementptr inbounds [4 x i16], [4 x i16]* %5, i64 0, i64 3
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %41, i32 %44) #10
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = zext i32 %17 to i64
  %49 = shl nuw i64 %48, 32
  %50 = select i1 %19, i64 9223372032559808512, i64 %49
  %51 = zext i32 %13 to i64
  %52 = select i1 %15, i64 2147483647, i64 %51
  %53 = or i64 %50, %52
  %54 = zext i32 %47 to i64
  %55 = shl nuw i64 %54, 32
  %56 = select i1 %46, i64 9223372032559808512, i64 %55, !prof !2
  %57 = zext i32 %33 to i64
  %58 = select i1 %32, i64 2147483647, i64 %57, !prof !2
  %59 = or i64 %56, %58
  br label %77

60:                                               ; preds = %3
  %61 = bitcast %"class.blink::NGInkOverflow"* %0 to i8**
  %62 = load i8*, i8** %61, align 8
  %63 = bitcast i8* %62 to i64*
  %64 = load i64, i64* %63, align 4
  %65 = getelementptr inbounds i8, i8* %62, i64 8
  %66 = bitcast i8* %65 to i64*
  %67 = load i64, i64* %66, align 4
  br label %77

68:                                               ; preds = %3
  %69 = bitcast %"class.blink::NGInkOverflow"* %0 to %"struct.blink::NGContainerInkOverflow"**
  %70 = load %"struct.blink::NGContainerInkOverflow"*, %"struct.blink::NGContainerInkOverflow"** %69, align 8
  %71 = getelementptr inbounds %"struct.blink::NGContainerInkOverflow", %"struct.blink::NGContainerInkOverflow"* %70, i64 0, i32 1
  %72 = bitcast %"struct.blink::PhysicalRect"* %71 to i64*
  %73 = load i64, i64* %72, align 4
  %74 = getelementptr inbounds %"struct.blink::NGContainerInkOverflow", %"struct.blink::NGContainerInkOverflow"* %70, i64 0, i32 1, i32 1
  %75 = bitcast %"struct.blink::PhysicalSize"* %74 to i64*
  %76 = load i64, i64* %75, align 4
  br label %77

77:                                               ; preds = %3, %68, %60, %4
  %78 = phi i64 [ %73, %68 ], [ %64, %60 ], [ %53, %4 ], [ 0, %3 ]
  %79 = phi i64 [ %76, %68 ], [ %67, %60 ], [ %59, %4 ], [ 0, %3 ]
  %80 = insertvalue { i64, i64 } undef, i64 %78, 0
  %81 = insertvalue { i64, i64 } %80, i64 %79, 1
  ret { i64, i64 } %81
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink13NGInkOverflow15SelfAndContentsENS0_4TypeERKNS_12PhysicalSizeE(%"class.blink::NGInkOverflow"* nocapture readonly, i32, %"struct.blink::PhysicalSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca { i64, i64 }, align 8
  switch i32 %1, label %83 [
    i32 0, label %5
    i32 1, label %5
    i32 2, label %5
    i32 3, label %8
    i32 5, label %8
    i32 4, label %64
    i32 6, label %64
    i32 7, label %72
  ]

5:                                                ; preds = %3, %3, %3
  %6 = bitcast %"struct.blink::PhysicalSize"* %2 to i64*
  %7 = load i64, i64* %6, align 4
  br label %86

8:                                                ; preds = %3, %3
  %9 = bitcast %"class.blink::NGInkOverflow"* %0 to [4 x i16]*
  %10 = bitcast %"class.blink::NGInkOverflow"* %0 to i16*
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = tail call i1 @llvm.is.constant.i32(i32 %12) #10
  %17 = sub nsw i32 0, %12
  %18 = icmp eq i32 %17, -2147483648
  %19 = and i1 %16, %18
  %20 = tail call i1 @llvm.is.constant.i32(i32 %15) #10
  %21 = sub nsw i32 0, %15
  %22 = icmp eq i32 %21, -2147483648
  %23 = and i1 %20, %22
  %24 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  %27 = select i1 %26, i32 -2147483648, i32 2147483647
  %28 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %12, i32 %25) #10
  %29 = extractvalue { i32, i1 } %28, 1
  %30 = extractvalue { i32, i1 } %28, 0
  %31 = select i1 %29, i32 %27, i32 %30, !prof !2
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 2
  %33 = load i16, i16* %32, align 4
  %34 = zext i16 %33 to i32
  %35 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %31, i32 %34) #10
  %36 = extractvalue { i32, i1 } %35, 1
  %37 = extractvalue { i32, i1 } %35, 0
  %38 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %39, 0
  %41 = select i1 %40, i32 -2147483648, i32 2147483647
  %42 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %15, i32 %39) #10
  %43 = extractvalue { i32, i1 } %42, 1
  %44 = extractvalue { i32, i1 } %42, 0
  %45 = select i1 %43, i32 %41, i32 %44, !prof !2
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 3
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %45, i32 %48) #10
  %50 = extractvalue { i32, i1 } %49, 1
  %51 = extractvalue { i32, i1 } %49, 0
  %52 = zext i32 %21 to i64
  %53 = shl nuw i64 %52, 32
  %54 = select i1 %23, i64 9223372032559808512, i64 %53
  %55 = zext i32 %17 to i64
  %56 = select i1 %19, i64 2147483647, i64 %55
  %57 = or i64 %54, %56
  %58 = zext i32 %51 to i64
  %59 = shl nuw i64 %58, 32
  %60 = select i1 %50, i64 9223372032559808512, i64 %59, !prof !2
  %61 = zext i32 %37 to i64
  %62 = select i1 %36, i64 2147483647, i64 %61, !prof !2
  %63 = or i64 %60, %62
  br label %86

64:                                               ; preds = %3, %3
  %65 = bitcast %"class.blink::NGInkOverflow"* %0 to i8**
  %66 = load i8*, i8** %65, align 8
  %67 = bitcast i8* %66 to i64*
  %68 = load i64, i64* %67, align 4
  %69 = getelementptr inbounds i8, i8* %66, i64 8
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 4
  br label %86

72:                                               ; preds = %3
  %73 = bitcast %"class.blink::NGInkOverflow"* %0 to %"struct.blink::NGContainerInkOverflow"**
  %74 = load %"struct.blink::NGContainerInkOverflow"*, %"struct.blink::NGContainerInkOverflow"** %73, align 8
  %75 = getelementptr inbounds %"struct.blink::NGContainerInkOverflow", %"struct.blink::NGContainerInkOverflow"* %74, i64 0, i32 1
  %76 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %76) #10
  %77 = bitcast { i64, i64 }* %4 to %"struct.blink::PhysicalRect"*
  %78 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  %79 = bitcast %"struct.blink::NGContainerInkOverflow"* %74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %76, i8* align 4 %79, i64 16, i1 false) #10
  call void @_ZN5blink12PhysicalRect5UniteERKS0_(%"struct.blink::PhysicalRect"* nonnull %77, %"struct.blink::PhysicalRect"* dereferenceable(16) %75) #10
  %80 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = load i64, i64* %78, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %76) #10
  br label %86

83:                                               ; preds = %3
  %84 = bitcast %"struct.blink::PhysicalSize"* %2 to i64*
  %85 = load i64, i64* %84, align 4
  br label %86

86:                                               ; preds = %83, %72, %64, %8, %5
  %87 = phi i64 [ 0, %83 ], [ %81, %72 ], [ %68, %64 ], [ %57, %8 ], [ 0, %5 ]
  %88 = phi i64 [ %85, %83 ], [ %82, %72 ], [ %71, %64 ], [ %63, %8 ], [ %7, %5 ]
  %89 = insertvalue { i64, i64 } undef, i64 %87, 0
  %90 = insertvalue { i64, i64 } %89, i64 %88, 1
  ret { i64, i64 } %90
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink13NGInkOverflow13TrySetOutsetsENS0_4TypeENS_10LayoutUnitES2_S2_S2_(%"class.blink::NGInkOverflow"* nocapture, i32, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %7 = icmp sgt i32 %2, 65535
  %8 = icmp sgt i32 %3, 65535
  %9 = or i1 %7, %8
  %10 = icmp sgt i32 %4, 65535
  %11 = or i1 %9, %10
  %12 = icmp sgt i32 %5, 65535
  %13 = or i1 %11, %12
  br i1 %13, label %37, label %14

14:                                               ; preds = %6
  switch i32 %1, label %27 [
    i32 7, label %21
    i32 6, label %15
    i32 4, label %15
  ]

15:                                               ; preds = %14, %14
  %16 = getelementptr inbounds %"class.blink::NGInkOverflow", %"class.blink::NGInkOverflow"* %0, i64 0, i32 0, i32 0
  %17 = load %"struct.blink::NGSingleInkOverflow"*, %"struct.blink::NGSingleInkOverflow"** %16, align 8
  %18 = icmp eq %"struct.blink::NGSingleInkOverflow"* %17, null
  br i1 %18, label %27, label %19

19:                                               ; preds = %15
  %20 = bitcast %"struct.blink::NGSingleInkOverflow"* %17 to i8*
  tail call void @free(i8* %20) #10
  br label %27

21:                                               ; preds = %14
  %22 = bitcast %"class.blink::NGInkOverflow"* %0 to %"struct.blink::NGContainerInkOverflow"**
  %23 = load %"struct.blink::NGContainerInkOverflow"*, %"struct.blink::NGContainerInkOverflow"** %22, align 8
  %24 = icmp eq %"struct.blink::NGContainerInkOverflow"* %23, null
  br i1 %24, label %27, label %25

25:                                               ; preds = %21
  %26 = bitcast %"struct.blink::NGContainerInkOverflow"* %23 to i8*
  tail call void @free(i8* %26) #10
  br label %27

27:                                               ; preds = %14, %15, %19, %21, %25
  %28 = trunc i32 %2 to i16
  %29 = bitcast %"class.blink::NGInkOverflow"* %0 to [4 x i16]*
  %30 = bitcast %"class.blink::NGInkOverflow"* %0 to i16*
  store i16 %28, i16* %30, align 8
  %31 = trunc i32 %3 to i16
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %29, i64 0, i64 1
  store i16 %31, i16* %32, align 2
  %33 = trunc i32 %4 to i16
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %29, i64 0, i64 2
  store i16 %33, i16* %34, align 4
  %35 = trunc i32 %5 to i16
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %29, i64 0, i64 3
  store i16 %35, i16* %36, align 2
  br label %37

37:                                               ; preds = %6, %27
  %38 = phi i1 [ true, %27 ], [ false, %6 ]
  ret i1 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink13NGInkOverflow9SetSingleENS0_4TypeERKNS_12PhysicalRectERKNS_12PhysicalSizeES1_S1_(%"class.blink::NGInkOverflow"* nocapture, i32, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16), %"struct.blink::PhysicalSize"* nocapture readonly dereferenceable(8), i32, i32) local_unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = tail call i1 @llvm.is.constant.i32(i32 %8) #10
  br i1 %9, label %10, label %14

10:                                               ; preds = %6
  %11 = sub i32 0, %8
  %12 = icmp eq i32 %11, -2147483648
  %13 = select i1 %12, i32 2147483647, i32 %11
  br label %19

14:                                               ; preds = %6
  %15 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %8) #10
  %16 = extractvalue { i32, i1 } %15, 1
  %17 = extractvalue { i32, i1 } %15, 0
  %18 = select i1 %16, i32 2147483647, i32 %17
  br label %19

19:                                               ; preds = %10, %14
  %20 = phi i32 [ %13, %10 ], [ %18, %14 ]
  %21 = icmp sgt i32 %20, 0
  %22 = select i1 %21, i32 %20, i32 0
  %23 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 0, i32 1, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = tail call i1 @llvm.is.constant.i32(i32 %24) #10
  br i1 %25, label %26, label %30

26:                                               ; preds = %19
  %27 = sub i32 0, %24
  %28 = icmp eq i32 %27, -2147483648
  %29 = select i1 %28, i32 2147483647, i32 %27
  br label %35

30:                                               ; preds = %19
  %31 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %24) #10
  %32 = extractvalue { i32, i1 } %31, 1
  %33 = extractvalue { i32, i1 } %31, 0
  %34 = select i1 %32, i32 2147483647, i32 %33
  br label %35

35:                                               ; preds = %26, %30
  %36 = phi i32 [ %29, %26 ], [ %34, %30 ]
  %37 = icmp sgt i32 %36, 0
  %38 = select i1 %37, i32 %36, i32 0
  %39 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 1, i32 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = icmp slt i32 %40, 0
  %42 = select i1 %41, i32 -2147483648, i32 2147483647
  %43 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %8, i32 %40) #10
  %44 = extractvalue { i32, i1 } %43, 1
  %45 = extractvalue { i32, i1 } %43, 0
  %46 = select i1 %44, i32 %42, i32 %45, !prof !2
  %47 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %3, i64 0, i32 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp sgt i32 %48, -1
  %50 = select i1 %49, i32 -2147483648, i32 2147483647
  %51 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %46, i32 %48) #10
  %52 = extractvalue { i32, i1 } %51, 1
  %53 = extractvalue { i32, i1 } %51, 0
  %54 = select i1 %52, i32 %50, i32 %53, !prof !2
  %55 = icmp sgt i32 %54, 0
  %56 = select i1 %55, i32 %54, i32 0
  %57 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 1, i32 1, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = icmp slt i32 %58, 0
  %60 = select i1 %59, i32 -2147483648, i32 2147483647
  %61 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %24, i32 %58) #10
  %62 = extractvalue { i32, i1 } %61, 1
  %63 = extractvalue { i32, i1 } %61, 0
  %64 = select i1 %62, i32 %60, i32 %63, !prof !2
  %65 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %3, i64 0, i32 1, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = icmp sgt i32 %66, -1
  %68 = select i1 %67, i32 -2147483648, i32 2147483647
  %69 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %64, i32 %66) #10
  %70 = extractvalue { i32, i1 } %69, 1
  %71 = extractvalue { i32, i1 } %69, 0
  %72 = select i1 %70, i32 %68, i32 %71, !prof !2
  %73 = icmp sgt i32 %72, 0
  %74 = select i1 %73, i32 %72, i32 0
  %75 = icmp sgt i32 %22, 65535
  %76 = icmp sgt i32 %38, 65535
  %77 = or i1 %75, %76
  %78 = icmp sgt i32 %56, 65535
  %79 = or i1 %77, %78
  %80 = icmp sgt i32 %74, 65535
  %81 = or i1 %79, %80
  br i1 %81, label %105, label %82

82:                                               ; preds = %35
  switch i32 %1, label %95 [
    i32 7, label %89
    i32 6, label %83
    i32 4, label %83
  ]

83:                                               ; preds = %82, %82
  %84 = getelementptr inbounds %"class.blink::NGInkOverflow", %"class.blink::NGInkOverflow"* %0, i64 0, i32 0, i32 0
  %85 = load %"struct.blink::NGSingleInkOverflow"*, %"struct.blink::NGSingleInkOverflow"** %84, align 8
  %86 = icmp eq %"struct.blink::NGSingleInkOverflow"* %85, null
  br i1 %86, label %95, label %87

87:                                               ; preds = %83
  %88 = bitcast %"struct.blink::NGSingleInkOverflow"* %85 to i8*
  tail call void @free(i8* %88) #10
  br label %95

89:                                               ; preds = %82
  %90 = bitcast %"class.blink::NGInkOverflow"* %0 to %"struct.blink::NGContainerInkOverflow"**
  %91 = load %"struct.blink::NGContainerInkOverflow"*, %"struct.blink::NGContainerInkOverflow"** %90, align 8
  %92 = icmp eq %"struct.blink::NGContainerInkOverflow"* %91, null
  br i1 %92, label %95, label %93

93:                                               ; preds = %89
  %94 = bitcast %"struct.blink::NGContainerInkOverflow"* %91 to i8*
  tail call void @free(i8* %94) #10
  br label %95

95:                                               ; preds = %82, %83, %87, %89, %93
  %96 = trunc i32 %22 to i16
  %97 = bitcast %"class.blink::NGInkOverflow"* %0 to [4 x i16]*
  %98 = bitcast %"class.blink::NGInkOverflow"* %0 to i16*
  store i16 %96, i16* %98, align 8
  %99 = trunc i32 %38 to i16
  %100 = getelementptr inbounds [4 x i16], [4 x i16]* %97, i64 0, i64 1
  store i16 %99, i16* %100, align 2
  %101 = trunc i32 %56 to i16
  %102 = getelementptr inbounds [4 x i16], [4 x i16]* %97, i64 0, i64 2
  store i16 %101, i16* %102, align 4
  %103 = trunc i32 %74 to i16
  %104 = getelementptr inbounds [4 x i16], [4 x i16]* %97, i64 0, i64 3
  store i16 %103, i16* %104, align 2
  br label %163

105:                                              ; preds = %35
  %106 = tail call i1 @llvm.is.constant.i32(i32 %22) #10
  %107 = sub nsw i32 0, %22
  %108 = icmp eq i32 %107, -2147483648
  %109 = and i1 %106, %108
  %110 = select i1 %109, i32 2147483647, i32 %107
  %111 = tail call i1 @llvm.is.constant.i32(i32 %38) #10
  %112 = sub nsw i32 0, %38
  %113 = icmp eq i32 %112, -2147483648
  %114 = and i1 %111, %113
  %115 = select i1 %114, i32 2147483647, i32 %112
  %116 = icmp slt i32 %48, 0
  %117 = select i1 %116, i32 -2147483648, i32 2147483647
  %118 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %22, i32 %48) #10
  %119 = extractvalue { i32, i1 } %118, 1
  %120 = extractvalue { i32, i1 } %118, 0
  %121 = select i1 %119, i32 %117, i32 %120, !prof !2
  %122 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %121, i32 %56) #10
  %123 = extractvalue { i32, i1 } %122, 1
  %124 = extractvalue { i32, i1 } %122, 0
  %125 = select i1 %123, i32 2147483647, i32 %124, !prof !2
  %126 = icmp slt i32 %66, 0
  %127 = select i1 %126, i32 -2147483648, i32 2147483647
  %128 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %38, i32 %66) #10
  %129 = extractvalue { i32, i1 } %128, 1
  %130 = extractvalue { i32, i1 } %128, 0
  %131 = select i1 %129, i32 %127, i32 %130, !prof !2
  %132 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %131, i32 %74) #10
  %133 = extractvalue { i32, i1 } %132, 1
  %134 = extractvalue { i32, i1 } %132, 0
  %135 = select i1 %133, i32 2147483647, i32 %134, !prof !2
  switch i32 %1, label %162 [
    i32 7, label %136
    i32 0, label %142
    i32 1, label %142
    i32 2, label %142
    i32 3, label %142
    i32 5, label %142
    i32 4, label %152
    i32 6, label %152
  ]

136:                                              ; preds = %105
  %137 = bitcast %"class.blink::NGInkOverflow"* %0 to %"struct.blink::NGContainerInkOverflow"**
  %138 = load %"struct.blink::NGContainerInkOverflow"*, %"struct.blink::NGContainerInkOverflow"** %137, align 8
  %139 = icmp eq %"struct.blink::NGContainerInkOverflow"* %138, null
  br i1 %139, label %142, label %140

140:                                              ; preds = %136
  %141 = bitcast %"struct.blink::NGContainerInkOverflow"* %138 to i8*
  tail call void @free(i8* %141) #10
  br label %142

142:                                              ; preds = %140, %136, %105, %105, %105, %105, %105
  %143 = tail call noalias i8* @malloc(i64 16) #10
  %144 = bitcast i8* %143 to i32*
  store i32 %110, i32* %144, align 4
  %145 = getelementptr inbounds i8, i8* %143, i64 4
  %146 = bitcast i8* %145 to i32*
  store i32 %115, i32* %146, align 4
  %147 = getelementptr inbounds i8, i8* %143, i64 8
  %148 = bitcast i8* %147 to i32*
  store i32 %125, i32* %148, align 4
  %149 = getelementptr inbounds i8, i8* %143, i64 12
  %150 = bitcast i8* %149 to i32*
  store i32 %135, i32* %150, align 4
  %151 = bitcast %"class.blink::NGInkOverflow"* %0 to i8**
  store i8* %143, i8** %151, align 8
  br label %163

152:                                              ; preds = %105, %105
  %153 = bitcast %"class.blink::NGInkOverflow"* %0 to i8**
  %154 = load i8*, i8** %153, align 8
  %155 = bitcast i8* %154 to i32*
  store i32 %110, i32* %155, align 4
  %156 = getelementptr inbounds i8, i8* %154, i64 4
  %157 = bitcast i8* %156 to i32*
  store i32 %115, i32* %157, align 4
  %158 = getelementptr inbounds i8, i8* %154, i64 8
  %159 = bitcast i8* %158 to i32*
  store i32 %125, i32* %159, align 4
  %160 = getelementptr inbounds i8, i8* %154, i64 12
  %161 = bitcast i8* %160 to i32*
  store i32 %135, i32* %161, align 4
  br label %163

162:                                              ; preds = %105
  unreachable

163:                                              ; preds = %142, %152, %95
  %164 = phi i32 [ %5, %95 ], [ %4, %152 ], [ %4, %142 ]
  ret i32 %164
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink13NGInkOverflow7SetSelfENS0_4TypeERKNS_12PhysicalRectERKNS_12PhysicalSizeE(%"class.blink::NGInkOverflow"* nocapture, i32, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16), %"struct.blink::PhysicalSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 1, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %40, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 1, i32 1, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %40, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 0, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %53, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 0, i32 1, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %53, label %20

20:                                               ; preds = %16
  %21 = icmp slt i32 %6, 0
  %22 = select i1 %21, i32 -2147483648, i32 2147483647
  %23 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %14, i32 %6) #10
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %22, i32 %25, !prof !2
  %27 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %3, i64 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %26, %28
  br i1 %29, label %53, label %30

30:                                               ; preds = %20
  %31 = icmp slt i32 %10, 0
  %32 = select i1 %31, i32 -2147483648, i32 2147483647
  %33 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %18, i32 %10) #10
  %34 = extractvalue { i32, i1 } %33, 1
  %35 = extractvalue { i32, i1 } %33, 0
  %36 = select i1 %34, i32 %32, i32 %35, !prof !2
  %37 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %3, i64 0, i32 1, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %36, %38
  br i1 %39, label %53, label %40

40:                                               ; preds = %4, %8, %30
  switch i32 %1, label %55 [
    i32 7, label %47
    i32 6, label %41
    i32 4, label %41
  ]

41:                                               ; preds = %40, %40
  %42 = getelementptr inbounds %"class.blink::NGInkOverflow", %"class.blink::NGInkOverflow"* %0, i64 0, i32 0, i32 0
  %43 = load %"struct.blink::NGSingleInkOverflow"*, %"struct.blink::NGSingleInkOverflow"** %42, align 8
  %44 = icmp eq %"struct.blink::NGSingleInkOverflow"* %43, null
  br i1 %44, label %55, label %45

45:                                               ; preds = %41
  %46 = bitcast %"struct.blink::NGSingleInkOverflow"* %43 to i8*
  tail call void @free(i8* %46) #10
  br label %55

47:                                               ; preds = %40
  %48 = bitcast %"class.blink::NGInkOverflow"* %0 to %"struct.blink::NGContainerInkOverflow"**
  %49 = load %"struct.blink::NGContainerInkOverflow"*, %"struct.blink::NGContainerInkOverflow"** %48, align 8
  %50 = icmp eq %"struct.blink::NGContainerInkOverflow"* %49, null
  br i1 %50, label %55, label %51

51:                                               ; preds = %47
  %52 = bitcast %"struct.blink::NGContainerInkOverflow"* %49 to i8*
  tail call void @free(i8* %52) #10
  br label %55

53:                                               ; preds = %12, %16, %20, %30
  %54 = tail call i32 @_ZN5blink13NGInkOverflow9SetSingleENS0_4TypeERKNS_12PhysicalRectERKNS_12PhysicalSizeES1_S1_(%"class.blink::NGInkOverflow"* %0, i32 %1, %"struct.blink::PhysicalRect"* dereferenceable(16) %2, %"struct.blink::PhysicalSize"* dereferenceable(8) %3, i32 4, i32 3)
  br label %55

55:                                               ; preds = %51, %47, %45, %41, %40, %53
  %56 = phi i32 [ %54, %53 ], [ 2, %40 ], [ 2, %41 ], [ 2, %45 ], [ 2, %47 ], [ 2, %51 ]
  ret i32 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink13NGInkOverflow11SetContentsENS0_4TypeERKNS_12PhysicalRectERKNS_12PhysicalSizeE(%"class.blink::NGInkOverflow"* nocapture, i32, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16), %"struct.blink::PhysicalSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 1, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %40, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 1, i32 1, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %40, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 0, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %53, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 0, i32 1, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %53, label %20

20:                                               ; preds = %16
  %21 = icmp slt i32 %6, 0
  %22 = select i1 %21, i32 -2147483648, i32 2147483647
  %23 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %14, i32 %6) #10
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %22, i32 %25, !prof !2
  %27 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %3, i64 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %26, %28
  br i1 %29, label %53, label %30

30:                                               ; preds = %20
  %31 = icmp slt i32 %10, 0
  %32 = select i1 %31, i32 -2147483648, i32 2147483647
  %33 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %18, i32 %10) #10
  %34 = extractvalue { i32, i1 } %33, 1
  %35 = extractvalue { i32, i1 } %33, 0
  %36 = select i1 %34, i32 %32, i32 %35, !prof !2
  %37 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %3, i64 0, i32 1, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %36, %38
  br i1 %39, label %53, label %40

40:                                               ; preds = %4, %8, %30
  switch i32 %1, label %55 [
    i32 7, label %47
    i32 6, label %41
    i32 4, label %41
  ]

41:                                               ; preds = %40, %40
  %42 = getelementptr inbounds %"class.blink::NGInkOverflow", %"class.blink::NGInkOverflow"* %0, i64 0, i32 0, i32 0
  %43 = load %"struct.blink::NGSingleInkOverflow"*, %"struct.blink::NGSingleInkOverflow"** %42, align 8
  %44 = icmp eq %"struct.blink::NGSingleInkOverflow"* %43, null
  br i1 %44, label %55, label %45

45:                                               ; preds = %41
  %46 = bitcast %"struct.blink::NGSingleInkOverflow"* %43 to i8*
  tail call void @free(i8* %46) #10
  br label %55

47:                                               ; preds = %40
  %48 = bitcast %"class.blink::NGInkOverflow"* %0 to %"struct.blink::NGContainerInkOverflow"**
  %49 = load %"struct.blink::NGContainerInkOverflow"*, %"struct.blink::NGContainerInkOverflow"** %48, align 8
  %50 = icmp eq %"struct.blink::NGContainerInkOverflow"* %49, null
  br i1 %50, label %55, label %51

51:                                               ; preds = %47
  %52 = bitcast %"struct.blink::NGContainerInkOverflow"* %49 to i8*
  tail call void @free(i8* %52) #10
  br label %55

53:                                               ; preds = %12, %16, %20, %30
  %54 = tail call i32 @_ZN5blink13NGInkOverflow9SetSingleENS0_4TypeERKNS_12PhysicalRectERKNS_12PhysicalSizeES1_S1_(%"class.blink::NGInkOverflow"* %0, i32 %1, %"struct.blink::PhysicalRect"* dereferenceable(16) %2, %"struct.blink::PhysicalSize"* dereferenceable(8) %3, i32 6, i32 5)
  br label %55

55:                                               ; preds = %51, %47, %45, %41, %40, %53
  %56 = phi i32 [ %54, %53 ], [ 2, %40 ], [ 2, %41 ], [ 2, %45 ], [ 2, %47 ], [ 2, %51 ]
  ret i32 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink13NGInkOverflow3SetENS0_4TypeERKNS_12PhysicalRectES4_RKNS_12PhysicalSizeE(%"class.blink::NGInkOverflow"* nocapture, i32, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16), %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16), %"struct.blink::PhysicalSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 1, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %41, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 1, i32 1, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %41, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %41, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %2, i64 0, i32 0, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %41, label %21

21:                                               ; preds = %17
  %22 = icmp slt i32 %7, 0
  %23 = select i1 %22, i32 -2147483648, i32 2147483647
  %24 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %15, i32 %7) #10
  %25 = extractvalue { i32, i1 } %24, 1
  %26 = extractvalue { i32, i1 } %24, 0
  %27 = select i1 %25, i32 %23, i32 %26, !prof !2
  %28 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %4, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %27, %29
  br i1 %30, label %41, label %31

31:                                               ; preds = %21
  %32 = icmp slt i32 %11, 0
  %33 = select i1 %32, i32 -2147483648, i32 2147483647
  %34 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %19, i32 %11) #10
  %35 = extractvalue { i32, i1 } %34, 1
  %36 = extractvalue { i32, i1 } %34, 0
  %37 = select i1 %35, i32 %33, i32 %36, !prof !2
  %38 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %4, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = icmp sgt i32 %37, %39
  br label %41

41:                                               ; preds = %5, %9, %13, %17, %21, %31
  %42 = phi i1 [ false, %9 ], [ true, %21 ], [ true, %17 ], [ true, %13 ], [ %40, %31 ], [ false, %5 ]
  %43 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %3, i64 0, i32 1, i32 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %78, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %3, i64 0, i32 1, i32 1, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %78, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %3, i64 0, i32 0, i32 0, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %78, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %3, i64 0, i32 0, i32 1, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %78, label %58

58:                                               ; preds = %54
  %59 = icmp slt i32 %44, 0
  %60 = select i1 %59, i32 -2147483648, i32 2147483647
  %61 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %52, i32 %44) #10
  %62 = extractvalue { i32, i1 } %61, 1
  %63 = extractvalue { i32, i1 } %61, 0
  %64 = select i1 %62, i32 %60, i32 %63, !prof !2
  %65 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %4, i64 0, i32 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = icmp sgt i32 %64, %66
  br i1 %67, label %78, label %68

68:                                               ; preds = %58
  %69 = icmp slt i32 %48, 0
  %70 = select i1 %69, i32 -2147483648, i32 2147483647
  %71 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %56, i32 %48) #10
  %72 = extractvalue { i32, i1 } %71, 1
  %73 = extractvalue { i32, i1 } %71, 0
  %74 = select i1 %72, i32 %70, i32 %73, !prof !2
  %75 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %4, i64 0, i32 1, i32 0
  %76 = load i32, i32* %75, align 4
  %77 = icmp sgt i32 %74, %76
  br label %78

78:                                               ; preds = %41, %46, %50, %54, %58, %68
  %79 = phi i1 [ false, %46 ], [ true, %58 ], [ true, %54 ], [ true, %50 ], [ %77, %68 ], [ false, %41 ]
  br i1 %42, label %96, label %80

80:                                               ; preds = %78
  br i1 %79, label %94, label %81

81:                                               ; preds = %80
  switch i32 %1, label %122 [
    i32 7, label %88
    i32 6, label %82
    i32 4, label %82
  ]

82:                                               ; preds = %81, %81
  %83 = getelementptr inbounds %"class.blink::NGInkOverflow", %"class.blink::NGInkOverflow"* %0, i64 0, i32 0, i32 0
  %84 = load %"struct.blink::NGSingleInkOverflow"*, %"struct.blink::NGSingleInkOverflow"** %83, align 8
  %85 = icmp eq %"struct.blink::NGSingleInkOverflow"* %84, null
  br i1 %85, label %122, label %86

86:                                               ; preds = %82
  %87 = bitcast %"struct.blink::NGSingleInkOverflow"* %84 to i8*
  tail call void @free(i8* %87) #10
  br label %122

88:                                               ; preds = %81
  %89 = bitcast %"class.blink::NGInkOverflow"* %0 to %"struct.blink::NGContainerInkOverflow"**
  %90 = load %"struct.blink::NGContainerInkOverflow"*, %"struct.blink::NGContainerInkOverflow"** %89, align 8
  %91 = icmp eq %"struct.blink::NGContainerInkOverflow"* %90, null
  br i1 %91, label %122, label %92

92:                                               ; preds = %88
  %93 = bitcast %"struct.blink::NGContainerInkOverflow"* %90 to i8*
  tail call void @free(i8* %93) #10
  br label %122

94:                                               ; preds = %80
  %95 = tail call i32 @_ZN5blink13NGInkOverflow9SetSingleENS0_4TypeERKNS_12PhysicalRectERKNS_12PhysicalSizeES1_S1_(%"class.blink::NGInkOverflow"* %0, i32 %1, %"struct.blink::PhysicalRect"* dereferenceable(16) %3, %"struct.blink::PhysicalSize"* dereferenceable(8) %4, i32 6, i32 5)
  br label %122

96:                                               ; preds = %78
  br i1 %79, label %99, label %97

97:                                               ; preds = %96
  %98 = tail call i32 @_ZN5blink13NGInkOverflow9SetSingleENS0_4TypeERKNS_12PhysicalRectERKNS_12PhysicalSizeES1_S1_(%"class.blink::NGInkOverflow"* %0, i32 %1, %"struct.blink::PhysicalRect"* dereferenceable(16) %2, %"struct.blink::PhysicalSize"* dereferenceable(8) %4, i32 4, i32 3)
  br label %122

99:                                               ; preds = %96
  switch i32 %1, label %121 [
    i32 7, label %112
    i32 5, label %106
    i32 0, label %106
    i32 1, label %106
    i32 2, label %106
    i32 3, label %106
    i32 4, label %100
    i32 6, label %100
  ]

100:                                              ; preds = %99, %99
  %101 = getelementptr inbounds %"class.blink::NGInkOverflow", %"class.blink::NGInkOverflow"* %0, i64 0, i32 0, i32 0
  %102 = load %"struct.blink::NGSingleInkOverflow"*, %"struct.blink::NGSingleInkOverflow"** %101, align 8
  %103 = icmp eq %"struct.blink::NGSingleInkOverflow"* %102, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %100
  %105 = bitcast %"struct.blink::NGSingleInkOverflow"* %102 to i8*
  tail call void @free(i8* %105) #10
  br label %106

106:                                              ; preds = %99, %99, %99, %99, %99, %104, %100
  %107 = tail call noalias i8* @malloc(i64 32) #10
  %108 = bitcast %"struct.blink::PhysicalRect"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %107, i8* align 4 %108, i64 16, i1 false) #10
  %109 = getelementptr inbounds i8, i8* %107, i64 16
  %110 = bitcast %"struct.blink::PhysicalRect"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %109, i8* align 4 %110, i64 16, i1 false) #10
  %111 = bitcast %"class.blink::NGInkOverflow"* %0 to i8**
  store i8* %107, i8** %111, align 8
  br label %122

112:                                              ; preds = %99
  %113 = bitcast %"class.blink::NGInkOverflow"* %0 to %"struct.blink::NGContainerInkOverflow"**
  %114 = bitcast %"class.blink::NGInkOverflow"* %0 to i8**
  %115 = load i8*, i8** %114, align 8
  %116 = bitcast %"struct.blink::PhysicalRect"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %115, i8* align 4 %116, i64 16, i1 false)
  %117 = load %"struct.blink::NGContainerInkOverflow"*, %"struct.blink::NGContainerInkOverflow"** %113, align 8
  %118 = getelementptr inbounds %"struct.blink::NGContainerInkOverflow", %"struct.blink::NGContainerInkOverflow"* %117, i64 0, i32 1
  %119 = bitcast %"struct.blink::PhysicalRect"* %118 to i8*
  %120 = bitcast %"struct.blink::PhysicalRect"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %119, i8* align 4 %120, i64 16, i1 false)
  br label %122

121:                                              ; preds = %99
  unreachable

122:                                              ; preds = %92, %88, %86, %82, %81, %112, %106, %97, %94
  %123 = phi i32 [ 7, %112 ], [ 7, %106 ], [ %98, %97 ], [ %95, %94 ], [ 2, %81 ], [ 2, %82 ], [ 2, %86 ], [ 2, %88 ], [ 2, %92 ]
  ret i32 %123
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink13NGInkOverflow18SetTextInkOverflowENS0_4TypeERKNS_23NGTextFragmentPaintInfoERKNS_13ComputedStyleERKNS_12PhysicalSizeEPNS_12PhysicalRectE(%"class.blink::NGInkOverflow"* nocapture, i32, %"struct.blink::NGTextFragmentPaintInfo"*, %"class.blink::ComputedStyle"* dereferenceable(104), %"struct.blink::PhysicalSize"* nocapture readonly dereferenceable(8), %"struct.blink::PhysicalRect"* nocapture) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.absl::optional.630", align 4
  %8 = getelementptr inbounds %"class.absl::optional.630", %"class.absl::optional.630"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %8) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %8, i8 -86, i64 20, i1 false)
  call void @_ZN5blink13NGInkOverflow22ComputeTextInkOverflowERKNS_23NGTextFragmentPaintInfoERKNS_13ComputedStyleERKNS_12PhysicalSizeE(%"class.absl::optional.630"* nonnull sret %7, %"struct.blink::NGTextFragmentPaintInfo"* %2, %"class.blink::ComputedStyle"* dereferenceable(104) %3, %"struct.blink::PhysicalSize"* dereferenceable(8) %4)
  %9 = load i8, i8* %8, align 4, !range !3
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %29

11:                                               ; preds = %6
  %12 = bitcast %"struct.blink::PhysicalSize"* %4 to i64*
  %13 = load i64, i64* %12, align 4
  %14 = bitcast %"struct.blink::PhysicalRect"* %5 to i64*
  store i64 0, i64* %14, align 4
  %15 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %5, i64 0, i32 1
  %16 = bitcast %"struct.blink::PhysicalSize"* %15 to i64*
  store i64 %13, i64* %16, align 4
  switch i32 %1, label %34 [
    i32 7, label %23
    i32 6, label %17
    i32 4, label %17
  ]

17:                                               ; preds = %11, %11
  %18 = getelementptr inbounds %"class.blink::NGInkOverflow", %"class.blink::NGInkOverflow"* %0, i64 0, i32 0, i32 0
  %19 = load %"struct.blink::NGSingleInkOverflow"*, %"struct.blink::NGSingleInkOverflow"** %18, align 8
  %20 = icmp eq %"struct.blink::NGSingleInkOverflow"* %19, null
  br i1 %20, label %34, label %21

21:                                               ; preds = %17
  %22 = bitcast %"struct.blink::NGSingleInkOverflow"* %19 to i8*
  tail call void @free(i8* %22) #10
  br label %34

23:                                               ; preds = %11
  %24 = bitcast %"class.blink::NGInkOverflow"* %0 to %"struct.blink::NGContainerInkOverflow"**
  %25 = load %"struct.blink::NGContainerInkOverflow"*, %"struct.blink::NGContainerInkOverflow"** %24, align 8
  %26 = icmp eq %"struct.blink::NGContainerInkOverflow"* %25, null
  br i1 %26, label %34, label %27

27:                                               ; preds = %23
  %28 = bitcast %"struct.blink::NGContainerInkOverflow"* %25 to i8*
  tail call void @free(i8* %28) #10
  br label %34

29:                                               ; preds = %6
  %30 = getelementptr inbounds %"class.absl::optional.630", %"class.absl::optional.630"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %31 = bitcast %"struct.blink::PhysicalRect"* %5 to i8*
  %32 = bitcast %"struct.blink::PhysicalRect"* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 16, i1 false)
  %33 = call i32 @_ZN5blink13NGInkOverflow7SetSelfENS0_4TypeERKNS_12PhysicalRectERKNS_12PhysicalSizeE(%"class.blink::NGInkOverflow"* %0, i32 %1, %"struct.blink::PhysicalRect"* dereferenceable(16) %30, %"struct.blink::PhysicalSize"* dereferenceable(8) %4)
  br label %34

34:                                               ; preds = %27, %23, %21, %17, %11, %29
  %35 = phi i32 [ %33, %29 ], [ 2, %11 ], [ 2, %17 ], [ 2, %21 ], [ 2, %23 ], [ 2, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %8) #10
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13NGInkOverflow22ComputeTextInkOverflowERKNS_23NGTextFragmentPaintInfoERKNS_13ComputedStyleERKNS_12PhysicalSizeE(%"class.absl::optional.630"* noalias nocapture sret, %"struct.blink::NGTextFragmentPaintInfo"*, %"class.blink::ComputedStyle"* dereferenceable(104), %"struct.blink::PhysicalSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to %"class.blink::LayoutRect"*
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %"class.blink::LayoutRect"*
  %9 = alloca { i64, i64 }, align 8
  %10 = bitcast { i64, i64 }* %9 to %"class.blink::LayoutRectOutsets"*
  %11 = alloca <4 x i32>, align 16
  %12 = bitcast <4 x i32>* %11 to %"class.blink::LayoutRectOutsets"*
  %13 = alloca { i64, i64 }, align 8
  %14 = bitcast { i64, i64 }* %13 to %"struct.blink::PhysicalRect"*
  %15 = alloca %"class.blink::WritingModeConverter", align 4
  %16 = alloca %"struct.blink::LogicalRect", align 8
  %17 = alloca %"struct.blink::PhysicalRect", align 8
  %18 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %19, i64 0, i32 1, i32 0, i32 0
  %21 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %20, align 8
  %22 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %21, i64 0, i32 1
  %23 = tail call { <2 x float>, <2 x float> } @_ZNK5blink4Font13TextInkBoundsERKNS_23NGTextFragmentPaintInfoE(%"class.blink::Font"* %22, %"struct.blink::NGTextFragmentPaintInfo"* %1) #10
  %24 = extractvalue { <2 x float>, <2 x float> } %23, 0
  %25 = extractvalue { <2 x float>, <2 x float> } %23, 1
  %26 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #10
  %27 = bitcast { i64, i64 }* %5 to i32*
  %28 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %6, i64 0, i32 0, i32 1, i32 0
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %30 = bitcast i64* %29 to i32*
  %31 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %6, i64 0, i32 1, i32 1, i32 0
  %32 = extractelement <2 x float> %24, i32 0
  %33 = fmul float %32, 6.400000e+01
  %34 = tail call float @llvm.floor.f32(float %33) #10
  %35 = fcmp ult float %34, 0xC1E0000000000000
  %36 = fcmp ugt float %34, 0x41DFFFFFE0000000
  %37 = fcmp ogt float %34, 0xC1E0000000000000
  %38 = select i1 %37, float %34, float 0xC1E0000000000000
  %39 = fptosi float %38 to i32
  %40 = select i1 %35, i32 0, i32 2147483647
  %41 = select i1 %36, i32 %40, i32 %39
  %42 = extractelement <2 x float> %24, i32 1
  %43 = fmul float %42, 6.400000e+01
  %44 = tail call float @llvm.floor.f32(float %43) #10
  %45 = fcmp ult float %44, 0xC1E0000000000000
  %46 = fcmp ugt float %44, 0x41DFFFFFE0000000
  %47 = fcmp ogt float %44, 0xC1E0000000000000
  %48 = select i1 %47, float %44, float 0xC1E0000000000000
  %49 = fptosi float %48 to i32
  %50 = select i1 %45, i32 0, i32 2147483647
  %51 = select i1 %46, i32 %50, i32 %49
  %52 = extractelement <2 x float> %25, i32 0
  %53 = fadd float %32, %52
  %54 = fmul float %53, 6.400000e+01
  %55 = tail call float @llvm.ceil.f32(float %54) #10
  %56 = fcmp ult float %55, 0xC1E0000000000000
  %57 = fcmp ugt float %55, 0x41DFFFFFE0000000
  %58 = fcmp ogt float %55, 0xC1E0000000000000
  %59 = select i1 %58, float %55, float 0xC1E0000000000000
  %60 = fptosi float %59 to i32
  %61 = select i1 %56, i32 0, i32 2147483647
  %62 = select i1 %57, i32 %61, i32 %60
  %63 = extractelement <2 x float> %25, i32 1
  %64 = fadd float %42, %63
  %65 = fmul float %64, 6.400000e+01
  %66 = tail call float @llvm.ceil.f32(float %65) #10
  %67 = fcmp ult float %66, 0xC1E0000000000000
  %68 = fcmp ugt float %66, 0x41DFFFFFE0000000
  %69 = fcmp ogt float %66, 0xC1E0000000000000
  %70 = select i1 %69, float %66, float 0xC1E0000000000000
  %71 = fptosi float %70 to i32
  %72 = select i1 %67, i32 0, i32 2147483647
  %73 = select i1 %68, i32 %72, i32 %71
  %74 = icmp sgt i32 %41, -1
  %75 = select i1 %74, i32 -2147483648, i32 2147483647
  %76 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %62, i32 %41) #10
  %77 = extractvalue { i32, i1 } %76, 1
  %78 = extractvalue { i32, i1 } %76, 0
  %79 = select i1 %77, i32 %75, i32 %78, !prof !2
  %80 = icmp sgt i32 %51, -1
  %81 = select i1 %80, i32 -2147483648, i32 2147483647
  %82 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %73, i32 %51) #10
  %83 = extractvalue { i32, i1 } %82, 1
  %84 = extractvalue { i32, i1 } %82, 0
  %85 = select i1 %83, i32 %81, i32 %84, !prof !2
  %86 = zext i32 %51 to i64
  %87 = shl nuw i64 %86, 32
  %88 = zext i32 %41 to i64
  %89 = or i64 %87, %88
  %90 = zext i32 %85 to i64
  %91 = shl nuw i64 %90, 32
  %92 = zext i32 %79 to i64
  %93 = or i64 %91, %92
  %94 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  store i64 %89, i64* %94, align 8
  store i64 %93, i64* %29, align 8
  %95 = tail call %"class.blink::FontFallbackList"* @_ZNK5blink4Font22EnsureFontFallbackListEv(%"class.blink::Font"* %22) #10
  %96 = getelementptr inbounds %"class.blink::FontFallbackList", %"class.blink::FontFallbackList"* %95, i64 0, i32 2
  %97 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %96, align 8
  %98 = icmp eq %"class.blink::SimpleFontData"* %97, null
  br i1 %98, label %99, label %103

99:                                               ; preds = %4
  %100 = getelementptr inbounds %"class.blink::Font", %"class.blink::Font"* %22, i64 0, i32 0
  %101 = tail call %"class.blink::SimpleFontData"* @_ZN5blink16FontFallbackList30DeterminePrimarySimpleFontDataERKNS_15FontDescriptionE(%"class.blink::FontFallbackList"* %95, %"class.blink::FontDescription"* dereferenceable(80) %100) #10
  store %"class.blink::SimpleFontData"* %101, %"class.blink::SimpleFontData"** %96, align 8
  %102 = icmp eq %"class.blink::SimpleFontData"* %101, null
  br i1 %102, label %122, label %103

103:                                              ; preds = %4, %99
  %104 = phi %"class.blink::SimpleFontData"* [ %101, %99 ], [ %97, %4 ]
  %105 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %104, i64 0, i32 1, i32 1
  %106 = load float, float* %105, align 4
  %107 = fmul float %106, 6.400000e+01
  %108 = tail call float @llvm.round.f32(float %107) #10
  %109 = fcmp ult float %108, 0xC1E0000000000000
  %110 = fcmp ugt float %108, 0x41DFFFFFE0000000
  %111 = fcmp ogt float %108, 0xC1E0000000000000
  %112 = select i1 %111, float %108, float 0xC1E0000000000000
  %113 = fptosi float %112 to i32
  %114 = select i1 %109, i32 0, i32 2147483647
  %115 = select i1 %110, i32 %114, i32 %113
  %116 = icmp slt i32 %115, 0
  %117 = select i1 %116, i32 -2147483648, i32 2147483647
  %118 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %51, i32 %115) #10
  %119 = extractvalue { i32, i1 } %118, 1
  %120 = extractvalue { i32, i1 } %118, 0
  %121 = select i1 %119, i32 %117, i32 %120, !prof !2
  store i32 %121, i32* %28, align 4
  br label %122

122:                                              ; preds = %99, %103
  %123 = phi i32 [ %51, %99 ], [ %121, %103 ]
  %124 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %2, i64 0, i32 0, i32 1, i32 0, i32 0
  %125 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"** %124, align 8
  %126 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* %125, i64 0, i32 16
  %127 = load float, float* %126, align 8
  %128 = fcmp une float %127, 0.000000e+00
  br i1 %128, label %129, label %168

129:                                              ; preds = %122
  %130 = fmul float %127, 5.000000e-01
  %131 = fmul float %130, 6.400000e+01
  %132 = tail call float @llvm.ceil.f32(float %131) #10
  %133 = fcmp ult float %132, 0xC1E0000000000000
  %134 = fcmp ugt float %132, 0x41DFFFFFE0000000
  %135 = fcmp ogt float %132, 0xC1E0000000000000
  %136 = select i1 %135, float %132, float 0xC1E0000000000000
  %137 = fptosi float %136 to i32
  %138 = select i1 %133, i32 0, i32 2147483647
  %139 = select i1 %134, i32 %138, i32 %137
  %140 = icmp sgt i32 %139, -1
  %141 = select i1 %140, i32 -2147483648, i32 2147483647
  %142 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %41, i32 %139) #10
  %143 = extractvalue { i32, i1 } %142, 1
  %144 = extractvalue { i32, i1 } %142, 0
  %145 = select i1 %143, i32 %141, i32 %144, !prof !2
  store i32 %145, i32* %27, align 8
  %146 = icmp slt i32 %139, 0
  %147 = select i1 %146, i32 -2147483648, i32 2147483647
  %148 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %79, i32 %139) #10
  %149 = extractvalue { i32, i1 } %148, 1
  %150 = extractvalue { i32, i1 } %148, 0
  %151 = select i1 %149, i32 %147, i32 %150, !prof !2
  %152 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %151, i32 %139) #10
  %153 = extractvalue { i32, i1 } %152, 1
  %154 = extractvalue { i32, i1 } %152, 0
  %155 = select i1 %153, i32 %147, i32 %154, !prof !2
  store i32 %155, i32* %30, align 8
  %156 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %123, i32 %139) #10
  %157 = extractvalue { i32, i1 } %156, 1
  %158 = extractvalue { i32, i1 } %156, 0
  %159 = select i1 %157, i32 %141, i32 %158, !prof !2
  store i32 %159, i32* %28, align 4
  %160 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %85, i32 %139) #10
  %161 = extractvalue { i32, i1 } %160, 1
  %162 = extractvalue { i32, i1 } %160, 0
  %163 = select i1 %161, i32 %147, i32 %162, !prof !2
  %164 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %163, i32 %139) #10
  %165 = extractvalue { i32, i1 } %164, 1
  %166 = extractvalue { i32, i1 } %164, 0
  %167 = select i1 %165, i32 %147, i32 %166, !prof !2
  store i32 %167, i32* %31, align 4
  br label %168

168:                                              ; preds = %129, %122
  %169 = tail call dereferenceable(16) %"class.WTF::Vector.254"* @_ZNK5blink13ComputedStyle22AppliedTextDecorationsEv(%"class.blink::ComputedStyle"* %2) #10
  %170 = getelementptr inbounds %"class.WTF::Vector.254", %"class.WTF::Vector.254"* %169, i64 0, i32 0, i32 0, i32 2
  %171 = load i32, i32* %170, align 4
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %189, label %173

173:                                              ; preds = %168
  %174 = tail call %"class.blink::FontFallbackList"* @_ZNK5blink4Font22EnsureFontFallbackListEv(%"class.blink::Font"* %22) #10
  %175 = getelementptr inbounds %"class.blink::FontFallbackList", %"class.blink::FontFallbackList"* %174, i64 0, i32 2
  %176 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %175, align 8
  %177 = icmp eq %"class.blink::SimpleFontData"* %176, null
  br i1 %177, label %178, label %182

178:                                              ; preds = %173
  %179 = getelementptr inbounds %"class.blink::Font", %"class.blink::Font"* %22, i64 0, i32 0
  %180 = tail call %"class.blink::SimpleFontData"* @_ZN5blink16FontFallbackList30DeterminePrimarySimpleFontDataERKNS_15FontDescriptionE(%"class.blink::FontFallbackList"* %174, %"class.blink::FontDescription"* dereferenceable(80) %179) #10
  store %"class.blink::SimpleFontData"* %180, %"class.blink::SimpleFontData"** %175, align 8
  %181 = icmp eq %"class.blink::SimpleFontData"* %180, null
  br i1 %181, label %189, label %182

182:                                              ; preds = %173, %178
  %183 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %183) #10
  %184 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %185 = call { i64, i64 } @_ZN5blink13NGInkOverflow29ComputeTextDecorationOverflowERKNS_23NGTextFragmentPaintInfoERKNS_13ComputedStyleERKNS_10LayoutRectE(%"struct.blink::NGTextFragmentPaintInfo"* undef, %"class.blink::ComputedStyle"* dereferenceable(104) %2, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %6)
  %186 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  %187 = extractvalue { i64, i64 } %185, 0
  store i64 %187, i64* %186, align 8
  %188 = extractvalue { i64, i64 } %185, 1
  store i64 %188, i64* %184, align 8
  call void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"* nonnull %6, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %8) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %183) #10
  br label %189

189:                                              ; preds = %178, %182, %168
  %190 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %2, i64 0, i32 0, i32 9
  %191 = bitcast [20 x i8]* %190 to i160*
  %192 = load i160, i160* %191, align 8
  %193 = lshr i160 %192, 102
  %194 = trunc i160 %193 to i8
  %195 = and i8 %194, 3
  %196 = call i32 @_ZNK5blink13ComputedStyle19GetTextEmphasisMarkEv(%"class.blink::ComputedStyle"* %2) #10
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %276, label %198

198:                                              ; preds = %189
  %199 = call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink13ComputedStyle22TextEmphasisMarkStringEv(%"class.blink::ComputedStyle"* %2) #10
  %200 = call i32 @_ZNK5blink4Font18EmphasisMarkHeightERKN3WTF12AtomicStringE(%"class.blink::Font"* %22, %"class.WTF::AtomicString"* dereferenceable(8) %199) #10
  %201 = icmp sgt i32 %200, 33554431
  br i1 %201, label %206, label %202

202:                                              ; preds = %198
  %203 = icmp slt i32 %200, -33554432
  %204 = shl i32 %200, 6
  %205 = select i1 %203, i32 -2147483648, i32 %204
  br label %206

206:                                              ; preds = %202, %198
  %207 = phi i32 [ 2147483647, %198 ], [ %205, %202 ]
  %208 = call i32 @_ZNK5blink13ComputedStyle30GetTextEmphasisLineLogicalSideEv(%"class.blink::ComputedStyle"* %2) #10
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %236

210:                                              ; preds = %206
  %211 = load i32, i32* %28, align 4
  %212 = call i1 @llvm.is.constant.i32(i32 %207) #10
  br i1 %212, label %213, label %217

213:                                              ; preds = %210
  %214 = sub i32 0, %207
  %215 = icmp eq i32 %214, -2147483648
  %216 = select i1 %215, i32 2147483647, i32 %214
  br label %222

217:                                              ; preds = %210
  %218 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %207) #10
  %219 = extractvalue { i32, i1 } %218, 1
  %220 = extractvalue { i32, i1 } %218, 0
  %221 = select i1 %219, i32 2147483647, i32 %220
  br label %222

222:                                              ; preds = %213, %217
  %223 = phi i32 [ %216, %213 ], [ %221, %217 ]
  %224 = icmp slt i32 %223, %211
  %225 = select i1 %224, i32 %223, i32 %211
  %226 = icmp sgt i32 %211, -1
  %227 = select i1 %226, i32 -2147483648, i32 2147483647
  %228 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %225, i32 %211) #10
  %229 = extractvalue { i32, i1 } %228, 1
  %230 = extractvalue { i32, i1 } %228, 0
  %231 = select i1 %229, i32 %227, i32 %230, !prof !2
  store i32 %225, i32* %28, align 4
  %232 = load i32, i32* %31, align 4
  %233 = icmp sgt i32 %231, -1
  %234 = select i1 %233, i32 -2147483648, i32 2147483647
  %235 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %232, i32 %231) #10
  br label %268

236:                                              ; preds = %206
  %237 = icmp eq i8 %195, 0
  %238 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %3, i64 0, i32 1
  %239 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %3, i64 0, i32 0
  %240 = select i1 %237, %"class.blink::LayoutUnit"* %238, %"class.blink::LayoutUnit"* %239
  %241 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %240, i64 0, i32 0
  %242 = load i32, i32* %241, align 4
  %243 = load i32, i32* %28, align 4
  %244 = load i32, i32* %31, align 4
  %245 = icmp slt i32 %244, 0
  %246 = select i1 %245, i32 -2147483648, i32 2147483647
  %247 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %243, i32 %244) #10
  %248 = extractvalue { i32, i1 } %247, 1
  %249 = extractvalue { i32, i1 } %247, 0
  %250 = select i1 %248, i32 %246, i32 %249
  %251 = icmp slt i32 %207, 0
  %252 = select i1 %251, i32 -2147483648, i32 2147483647
  %253 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %242, i32 %207) #10
  %254 = extractvalue { i32, i1 } %253, 1
  %255 = extractvalue { i32, i1 } %253, 0
  %256 = select i1 %254, i32 %252, i32 %255, !prof !2
  %257 = icmp slt i32 %250, %256
  %258 = select i1 %257, i32 %256, i32 %250
  %259 = icmp sgt i32 %250, -1
  %260 = select i1 %259, i32 -2147483648, i32 2147483647
  %261 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %258, i32 %250) #10
  %262 = extractvalue { i32, i1 } %261, 1
  %263 = extractvalue { i32, i1 } %261, 0
  %264 = select i1 %262, i32 %260, i32 %263, !prof !2
  %265 = icmp slt i32 %264, 0
  %266 = select i1 %265, i32 -2147483648, i32 2147483647
  %267 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %244, i32 %264) #10
  br label %268

268:                                              ; preds = %236, %222
  %269 = phi { i32, i1 } [ %267, %236 ], [ %235, %222 ]
  %270 = phi i32 [ %266, %236 ], [ %234, %222 ]
  %271 = extractvalue { i32, i1 } %269, 1
  %272 = extractvalue { i32, i1 } %269, 0
  %273 = select i1 %271, i32 %270, i32 %272
  %274 = icmp sgt i32 %273, 0
  %275 = select i1 %274, i32 %273, i32 0
  store i32 %275, i32* %31, align 4
  br label %276

276:                                              ; preds = %268, %189
  %277 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"** %124, align 8
  %278 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* %277, i64 0, i32 8, i32 0
  %279 = load %"class.blink::ShadowList"*, %"class.blink::ShadowList"** %278, align 8
  %280 = icmp eq %"class.blink::ShadowList"* %279, null
  br i1 %280, label %281, label %286

281:                                              ; preds = %276
  %282 = load i32, i32* %27, align 8
  %283 = load i32, i32* %28, align 4
  %284 = load i32, i32* %30, align 8
  %285 = load i32, i32* %31, align 4
  br label %378

286:                                              ; preds = %276
  %287 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %287) #10
  %288 = bitcast { i64, i64 }* %9 to i32*
  %289 = getelementptr inbounds %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRectOutsets"* %10, i64 0, i32 1, i32 0
  %290 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %291 = bitcast i64* %290 to i32*
  %292 = getelementptr inbounds %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRectOutsets"* %10, i64 0, i32 3, i32 0
  %293 = bitcast <4 x i32>* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %293) #10
  %294 = call { <2 x float>, <2 x float> } @_ZNK5blink10ShadowList28RectOutsetsIncludingOriginalEv(%"class.blink::ShadowList"* nonnull %279) #10
  %295 = extractvalue { <2 x float>, <2 x float> } %294, 0
  %296 = extractvalue { <2 x float>, <2 x float> } %294, 1
  %297 = shufflevector <2 x float> %295, <2 x float> %296, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %298 = fmul <4 x float> %297, <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>
  %299 = fcmp ult <4 x float> %298, <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %300 = fcmp ugt <4 x float> %298, <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %301 = fcmp ogt <4 x float> %298, <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %302 = select <4 x i1> %301, <4 x float> %298, <4 x float> <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %303 = fptosi <4 x float> %302 to <4 x i32>
  %304 = select <4 x i1> %299, <4 x i32> zeroinitializer, <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %305 = select <4 x i1> %300, <4 x i32> %304, <4 x i32> %303
  store <4 x i32> %305, <4 x i32>* %11, align 16
  %306 = call { i64, i64 } @_ZN5blink32LineOrientationLayoutRectOutsetsERKNS_17LayoutRectOutsetsENS_11WritingModeE(%"class.blink::LayoutRectOutsets"* nonnull dereferenceable(16) %12, i8 zeroext %195) #10
  %307 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  %308 = extractvalue { i64, i64 } %306, 0
  store i64 %308, i64* %307, align 8
  %309 = extractvalue { i64, i64 } %306, 1
  store i64 %309, i64* %290, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %293) #10
  call void @_ZN5blink17LayoutRectOutsets19ClampNegativeToZeroEv(%"class.blink::LayoutRectOutsets"* nonnull %10) #10
  %310 = load i32, i32* %292, align 4
  %311 = call i1 @llvm.is.constant.i32(i32 %310) #10
  br i1 %311, label %312, label %316

312:                                              ; preds = %286
  %313 = sub i32 0, %310
  %314 = icmp eq i32 %313, -2147483648
  %315 = select i1 %314, i32 2147483647, i32 %313
  br label %321

316:                                              ; preds = %286
  %317 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %310) #10
  %318 = extractvalue { i32, i1 } %317, 1
  %319 = extractvalue { i32, i1 } %317, 0
  %320 = select i1 %318, i32 2147483647, i32 %319
  br label %321

321:                                              ; preds = %316, %312
  %322 = phi i32 [ %315, %312 ], [ %320, %316 ]
  %323 = load i32, i32* %288, align 8
  %324 = call i1 @llvm.is.constant.i32(i32 %323) #10
  br i1 %324, label %325, label %329

325:                                              ; preds = %321
  %326 = sub i32 0, %323
  %327 = icmp eq i32 %326, -2147483648
  %328 = select i1 %327, i32 2147483647, i32 %326
  br label %334

329:                                              ; preds = %321
  %330 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %323) #10
  %331 = extractvalue { i32, i1 } %330, 1
  %332 = extractvalue { i32, i1 } %330, 0
  %333 = select i1 %331, i32 2147483647, i32 %332
  br label %334

334:                                              ; preds = %325, %329
  %335 = phi i32 [ %328, %325 ], [ %333, %329 ]
  %336 = load i32, i32* %27, align 8
  %337 = icmp slt i32 %322, 0
  %338 = select i1 %337, i32 -2147483648, i32 2147483647
  %339 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %336, i32 %322) #10
  %340 = extractvalue { i32, i1 } %339, 1
  %341 = extractvalue { i32, i1 } %339, 0
  %342 = select i1 %340, i32 %338, i32 %341, !prof !2
  store i32 %342, i32* %27, align 8
  %343 = load i32, i32* %28, align 4
  %344 = icmp slt i32 %335, 0
  %345 = select i1 %344, i32 -2147483648, i32 2147483647
  %346 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %343, i32 %335) #10
  %347 = extractvalue { i32, i1 } %346, 1
  %348 = extractvalue { i32, i1 } %346, 0
  %349 = select i1 %347, i32 %345, i32 %348, !prof !2
  store i32 %349, i32* %28, align 4
  %350 = load i32, i32* %289, align 4
  %351 = icmp slt i32 %350, 0
  %352 = select i1 %351, i32 -2147483648, i32 2147483647
  %353 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %310, i32 %350) #10
  %354 = extractvalue { i32, i1 } %353, 1
  %355 = extractvalue { i32, i1 } %353, 0
  %356 = select i1 %354, i32 %352, i32 %355, !prof !2
  %357 = load i32, i32* %291, align 8
  %358 = icmp slt i32 %357, 0
  %359 = select i1 %358, i32 -2147483648, i32 2147483647
  %360 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %323, i32 %357) #10
  %361 = extractvalue { i32, i1 } %360, 1
  %362 = extractvalue { i32, i1 } %360, 0
  %363 = select i1 %361, i32 %359, i32 %362, !prof !2
  %364 = load i32, i32* %30, align 8
  %365 = icmp slt i32 %356, 0
  %366 = select i1 %365, i32 -2147483648, i32 2147483647
  %367 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %364, i32 %356) #10
  %368 = extractvalue { i32, i1 } %367, 1
  %369 = extractvalue { i32, i1 } %367, 0
  %370 = select i1 %368, i32 %366, i32 %369, !prof !2
  store i32 %370, i32* %30, align 8
  %371 = load i32, i32* %31, align 4
  %372 = icmp slt i32 %363, 0
  %373 = select i1 %372, i32 -2147483648, i32 2147483647
  %374 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %371, i32 %363) #10
  %375 = extractvalue { i32, i1 } %374, 1
  %376 = extractvalue { i32, i1 } %374, 0
  %377 = select i1 %375, i32 %373, i32 %376, !prof !2
  store i32 %377, i32* %31, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %287) #10
  br label %378

378:                                              ; preds = %281, %334
  %379 = phi i32 [ %285, %281 ], [ %377, %334 ]
  %380 = phi i32 [ %284, %281 ], [ %370, %334 ]
  %381 = phi i32 [ %283, %281 ], [ %349, %334 ]
  %382 = phi i32 [ %282, %281 ], [ %342, %334 ]
  %383 = bitcast { i64, i64 }* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %383) #10
  %384 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  %385 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %15, i64 0, i32 0, i32 0
  %386 = bitcast { i64, i64 }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %386, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %385) #10
  %387 = zext i8 %195 to i16
  %388 = bitcast %"class.blink::WritingModeConverter"* %15 to i16*
  store i16 %387, i16* %388, align 4
  %389 = getelementptr inbounds %"class.blink::WritingModeConverter", %"class.blink::WritingModeConverter"* %15, i64 0, i32 1
  %390 = bitcast %"struct.blink::PhysicalSize"* %3 to i64*
  %391 = bitcast %"struct.blink::PhysicalSize"* %389 to i64*
  %392 = load i64, i64* %390, align 4
  store i64 %392, i64* %391, align 4
  %393 = bitcast %"struct.blink::LogicalRect"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %393) #10
  %394 = bitcast %"struct.blink::LogicalRect"* %16 to i64*
  %395 = zext i32 %381 to i64
  %396 = shl nuw i64 %395, 32
  %397 = zext i32 %382 to i64
  %398 = or i64 %396, %397
  store i64 %398, i64* %394, align 8
  %399 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %16, i64 0, i32 1
  %400 = bitcast %"struct.blink::LogicalSize"* %399 to i64*
  %401 = zext i32 %379 to i64
  %402 = shl nuw i64 %401, 32
  %403 = zext i32 %380 to i64
  %404 = or i64 %402, %403
  store i64 %404, i64* %400, align 8
  %405 = icmp eq i8 %195, 0
  br i1 %405, label %418, label %406

406:                                              ; preds = %378
  %407 = call { i64, i64 } @_ZNK5blink20WritingModeConverter14SlowToPhysicalERKNS_11LogicalRectE(%"class.blink::WritingModeConverter"* nonnull %15, %"struct.blink::LogicalRect"* nonnull dereferenceable(16) %16) #10
  %408 = extractvalue { i64, i64 } %407, 0
  %409 = trunc i64 %408 to i32
  %410 = lshr i64 %408, 32
  %411 = trunc i64 %410 to i32
  %412 = extractvalue { i64, i64 } %407, 1
  %413 = trunc i64 %412 to i32
  %414 = lshr i64 %412, 32
  %415 = trunc i64 %414 to i32
  %416 = and i64 %408, -4294967296
  %417 = and i64 %412, -4294967296
  br label %418

418:                                              ; preds = %378, %406
  %419 = phi i64 [ %417, %406 ], [ %402, %378 ]
  %420 = phi i64 [ %416, %406 ], [ %396, %378 ]
  %421 = phi i32 [ %415, %406 ], [ %379, %378 ]
  %422 = phi i32 [ %413, %406 ], [ %380, %378 ]
  %423 = phi i32 [ %411, %406 ], [ %381, %378 ]
  %424 = phi i32 [ %409, %406 ], [ %382, %378 ]
  %425 = zext i32 %424 to i64
  %426 = or i64 %420, %425
  %427 = zext i32 %422 to i64
  %428 = or i64 %419, %427
  %429 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 0
  store i64 %426, i64* %429, align 8
  store i64 %428, i64* %384, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %393) #10
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %385) #10
  %430 = icmp eq i32 %422, 0
  %431 = icmp eq i32 %421, 0
  %432 = or i1 %430, %431
  br i1 %432, label %456, label %433

433:                                              ; preds = %418
  %434 = or i32 %424, %423
  %435 = icmp slt i32 %434, 0
  br i1 %435, label %458, label %436

436:                                              ; preds = %433
  %437 = icmp slt i32 %422, 0
  %438 = select i1 %437, i32 -2147483648, i32 2147483647
  %439 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %424, i32 %422) #10
  %440 = extractvalue { i32, i1 } %439, 1
  %441 = extractvalue { i32, i1 } %439, 0
  %442 = select i1 %440, i32 %438, i32 %441, !prof !2
  %443 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %3, i64 0, i32 0, i32 0
  %444 = load i32, i32* %443, align 4
  %445 = icmp sgt i32 %442, %444
  br i1 %445, label %458, label %446

446:                                              ; preds = %436
  %447 = icmp slt i32 %421, 0
  %448 = select i1 %447, i32 -2147483648, i32 2147483647
  %449 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %423, i32 %421) #10
  %450 = extractvalue { i32, i1 } %449, 1
  %451 = extractvalue { i32, i1 } %449, 0
  %452 = select i1 %450, i32 %448, i32 %451, !prof !2
  %453 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %3, i64 0, i32 1, i32 0
  %454 = load i32, i32* %453, align 4
  %455 = icmp sgt i32 %452, %454
  br i1 %455, label %458, label %456

456:                                              ; preds = %418, %446
  %457 = getelementptr inbounds %"class.absl::optional.630", %"class.absl::optional.630"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %457, align 4
  br label %467

458:                                              ; preds = %433, %436, %446
  %459 = bitcast %"struct.blink::PhysicalRect"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %459) #10
  %460 = bitcast %"struct.blink::PhysicalRect"* %17 to i64*
  store i64 0, i64* %460, align 8
  %461 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %17, i64 0, i32 1
  %462 = bitcast %"struct.blink::PhysicalSize"* %461 to i64*
  %463 = load i64, i64* %390, align 4
  store i64 %463, i64* %462, align 8
  call void @_ZN5blink12PhysicalRect5UniteERKS0_(%"struct.blink::PhysicalRect"* nonnull %14, %"struct.blink::PhysicalRect"* nonnull dereferenceable(16) %17) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %459) #10
  call void @_ZN5blink12PhysicalRect28ExpandEdgesToPixelBoundariesEv(%"struct.blink::PhysicalRect"* nonnull %14) #10
  %464 = getelementptr inbounds %"class.absl::optional.630", %"class.absl::optional.630"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %464, align 4
  %465 = getelementptr inbounds %"class.absl::optional.630", %"class.absl::optional.630"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %466 = bitcast %"struct.blink::PhysicalRect"* %465 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %466, i8* nonnull align 8 %383, i64 16, i1 false) #10
  br label %467

467:                                              ; preds = %458, %456
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %383) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #10
  ret void
}

declare { <2 x float>, <2 x float> } @_ZNK5blink4Font13TextInkBoundsERKNS_23NGTextFragmentPaintInfoE(%"class.blink::Font"*, %"struct.blink::NGTextFragmentPaintInfo"*) local_unnamed_addr #4

declare dereferenceable(16) %"class.WTF::Vector.254"* @_ZNK5blink13ComputedStyle22AppliedTextDecorationsEv(%"class.blink::ComputedStyle"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN5blink13NGInkOverflow29ComputeTextDecorationOverflowERKNS_23NGTextFragmentPaintInfoERKNS_13ComputedStyleERKNS_10LayoutRectE(%"struct.blink::NGTextFragmentPaintInfo"* nocapture readnone, %"class.blink::ComputedStyle"* dereferenceable(104), %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca i64, align 8
  %5 = bitcast i64* %4 to %"struct.blink::PhysicalOffset"*
  %6 = alloca %"class.blink::TextDecorationInfo", align 8
  %7 = alloca %"class.absl::optional.635", align 4
  %8 = alloca %"class.blink::NGTextDecorationOffset", align 8
  %9 = alloca %"class.blink::FloatRect", align 4
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to %"class.blink::Length"*
  %12 = alloca { <2 x float>, <2 x float> }, align 8
  %13 = bitcast { <2 x float>, <2 x float> }* %12 to %"class.blink::FloatRect"*
  %14 = alloca i64, align 8
  %15 = bitcast i64* %14 to %"class.blink::Length"*
  %16 = alloca { <2 x float>, <2 x float> }, align 8
  %17 = bitcast { <2 x float>, <2 x float> }* %16 to %"class.blink::FloatRect"*
  %18 = alloca { <2 x float>, <2 x float> }, align 8
  %19 = bitcast { <2 x float>, <2 x float> }* %18 to %"class.blink::FloatRect"*
  %20 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  %21 = bitcast i64* %4 to i32*
  %22 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %5, i64 0, i32 1, i32 0
  store i32 0, i32* %21, align 8
  store i32 0, i32* %22, align 4
  %23 = bitcast %"class.blink::TextDecorationInfo"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 224, i8* nonnull %23) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* align 8 bitcast ({ %"class.blink::ComputedStyle"*, { { { { i8, [3 x i8], { { i8, [3 x i8], %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" } } } } } }, i32, %"class.blink::LayoutUnit", %"class.blink::SimpleFontData"*, float, i32, %"class.blink::FloatPoint", i8, [7 x i8], %"class.WTF::Vector.640", i32, [4 x i8], [3 x %"struct.blink::TextDecorationInfo::PerLineData"] }* @__const._ZN5blink13NGInkOverflow29ComputeTextDecorationOverflowERKNS_23NGTextFragmentPaintInfoERKNS_13ComputedStyleERKNS_10LayoutRectE.decoration_info to i8*), i64 224, i1 false)
  %24 = load i64, i64* %4, align 8
  %25 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %2, i64 0, i32 1, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = tail call i32 @_ZNK5blink13ComputedStyle15GetFontBaselineEv(%"class.blink::ComputedStyle"* %1) #10
  %28 = getelementptr inbounds %"class.absl::optional.635", %"class.absl::optional.635"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %28, align 4
  %29 = getelementptr inbounds %"class.absl::optional.635", %"class.absl::optional.635"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 28, i1 false) #10
  call void @_ZN5blink18TextDecorationInfoC1ERKNS_14PhysicalOffsetES1_NS_10LayoutUnitENS_12FontBaselineERKNS_13ComputedStyleEN4absl8optionalINS_21AppliedTextDecorationEEEPS7_(%"class.blink::TextDecorationInfo"* nonnull %6, %"struct.blink::PhysicalOffset"* nonnull dereferenceable(8) %5, i64 %24, i32 %26, i32 %27, %"class.blink::ComputedStyle"* dereferenceable(104) %1, %"class.absl::optional.635"* nonnull %7, %"class.blink::ComputedStyle"* null) #10
  %30 = load i8, i8* %28, align 4, !range !3
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %45, label %32

32:                                               ; preds = %3
  %33 = getelementptr inbounds %"class.absl::optional.635", %"class.absl::optional.635"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 8
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.absl::optional.635", %"class.absl::optional.635"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3
  call void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"* %37) #10
  br label %38

38:                                               ; preds = %36, %32
  %39 = getelementptr inbounds %"class.absl::optional.635", %"class.absl::optional.635"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 0, i32 2
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 8
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.absl::optional.635", %"class.absl::optional.635"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 0
  call void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"* %43) #10
  br label %44

44:                                               ; preds = %42, %38
  store i8 0, i8* %28, align 4
  br label %45

45:                                               ; preds = %3, %44
  %46 = bitcast %"class.blink::NGTextDecorationOffset"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #10
  %47 = getelementptr inbounds %"class.blink::NGTextDecorationOffset", %"class.blink::NGTextDecorationOffset"* %8, i64 0, i32 0, i32 0
  %48 = getelementptr inbounds %"class.blink::NGTextDecorationOffset", %"class.blink::NGTextDecorationOffset"* %8, i64 0, i32 0, i32 1
  %49 = getelementptr inbounds %"class.blink::NGTextDecorationOffset", %"class.blink::NGTextDecorationOffset"* %8, i64 0, i32 1
  %50 = getelementptr inbounds %"class.blink::NGTextDecorationOffset", %"class.blink::NGTextDecorationOffset"* %8, i64 0, i32 2
  %51 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %6, i64 0, i32 0
  %52 = bitcast %"class.blink::TextDecorationInfo"* %6 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %"class.blink::ComputedStyle"** %48 to i64*
  store i64 %53, i64* %54, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN5blink22NGTextDecorationOffsetE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %47, align 8
  store %"class.blink::ComputedStyle"* %1, %"class.blink::ComputedStyle"** %49, align 8
  store %"class.blink::NGPhysicalBoxFragment"* null, %"class.blink::NGPhysicalBoxFragment"** %50, align 8
  %55 = call dereferenceable(16) %"class.WTF::Vector.254"* @_ZNK5blink13ComputedStyle22AppliedTextDecorationsEv(%"class.blink::ComputedStyle"* %1) #10
  %56 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %6, i64 0, i32 6
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 3
  %59 = select i1 %58, i32 2, i32 %57
  %60 = bitcast %"class.blink::FloatRect"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %60) #10
  %61 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %9, i64 0, i32 0, i32 0
  %62 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %9, i64 0, i32 0, i32 1
  %63 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %9, i64 0, i32 1, i32 0
  %64 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %9, i64 0, i32 1, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %60, i8 0, i64 16, i1 false) #10
  %65 = getelementptr inbounds %"class.WTF::Vector.254", %"class.WTF::Vector.254"* %55, i64 0, i32 0, i32 0, i32 2
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %93, label %68

68:                                               ; preds = %45
  %69 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %6, i64 0, i32 9
  %70 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %6, i64 0, i32 10
  %71 = bitcast i64* %10 to i8*
  %72 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %11, i64 0, i32 2
  %73 = getelementptr inbounds %"class.blink::NGTextDecorationOffset", %"class.blink::NGTextDecorationOffset"* %8, i64 0, i32 0
  %74 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %6, i64 0, i32 4
  %75 = bitcast { <2 x float>, <2 x float> }* %12 to i8*
  %76 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, i64 0, i32 0
  %77 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, i64 0, i32 1
  %78 = bitcast i64* %14 to i8*
  %79 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %15, i64 0, i32 2
  %80 = select i1 %58, i32 2, i32 0
  %81 = bitcast { <2 x float>, <2 x float> }* %16 to i8*
  %82 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %16, i64 0, i32 0
  %83 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %16, i64 0, i32 1
  %84 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %6, i64 0, i32 5
  %85 = bitcast { <2 x float>, <2 x float> }* %18 to i8*
  %86 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %18, i64 0, i32 0
  %87 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %18, i64 0, i32 1
  br label %158

88:                                               ; preds = %246
  %89 = load float, float* %61, align 4
  %90 = load float, float* %62, align 4
  %91 = load float, float* %63, align 4
  %92 = load float, float* %64, align 4
  br label %93

93:                                               ; preds = %88, %45
  %94 = phi float [ %92, %88 ], [ 0.000000e+00, %45 ]
  %95 = phi float [ %91, %88 ], [ 0.000000e+00, %45 ]
  %96 = phi float [ %90, %88 ], [ 0.000000e+00, %45 ]
  %97 = phi float [ %89, %88 ], [ 0.000000e+00, %45 ]
  %98 = fmul float %97, 6.400000e+01
  %99 = call float @llvm.floor.f32(float %98) #10
  %100 = fcmp ult float %99, 0xC1E0000000000000
  %101 = fcmp ugt float %99, 0x41DFFFFFE0000000
  %102 = fcmp ogt float %99, 0xC1E0000000000000
  %103 = select i1 %102, float %99, float 0xC1E0000000000000
  %104 = fptosi float %103 to i32
  %105 = select i1 %100, i32 0, i32 2147483647
  %106 = select i1 %101, i32 %105, i32 %104
  %107 = fmul float %96, 6.400000e+01
  %108 = call float @llvm.floor.f32(float %107) #10
  %109 = fcmp ult float %108, 0xC1E0000000000000
  %110 = fcmp ugt float %108, 0x41DFFFFFE0000000
  %111 = fcmp ogt float %108, 0xC1E0000000000000
  %112 = select i1 %111, float %108, float 0xC1E0000000000000
  %113 = fptosi float %112 to i32
  %114 = select i1 %109, i32 0, i32 2147483647
  %115 = select i1 %110, i32 %114, i32 %113
  %116 = fadd float %97, %95
  %117 = fmul float %116, 6.400000e+01
  %118 = call float @llvm.ceil.f32(float %117) #10
  %119 = fcmp ult float %118, 0xC1E0000000000000
  %120 = fcmp ugt float %118, 0x41DFFFFFE0000000
  %121 = fcmp ogt float %118, 0xC1E0000000000000
  %122 = select i1 %121, float %118, float 0xC1E0000000000000
  %123 = fptosi float %122 to i32
  %124 = select i1 %119, i32 0, i32 2147483647
  %125 = select i1 %120, i32 %124, i32 %123
  %126 = fadd float %96, %94
  %127 = fmul float %126, 6.400000e+01
  %128 = call float @llvm.ceil.f32(float %127) #10
  %129 = fcmp ult float %128, 0xC1E0000000000000
  %130 = fcmp ugt float %128, 0x41DFFFFFE0000000
  %131 = fcmp ogt float %128, 0xC1E0000000000000
  %132 = select i1 %131, float %128, float 0xC1E0000000000000
  %133 = fptosi float %132 to i32
  %134 = select i1 %129, i32 0, i32 2147483647
  %135 = select i1 %130, i32 %134, i32 %133
  %136 = icmp sgt i32 %106, -1
  %137 = select i1 %136, i32 -2147483648, i32 2147483647
  %138 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %125, i32 %106) #10
  %139 = extractvalue { i32, i1 } %138, 1
  %140 = extractvalue { i32, i1 } %138, 0
  %141 = select i1 %139, i32 %137, i32 %140, !prof !2
  %142 = icmp sgt i32 %115, -1
  %143 = select i1 %142, i32 -2147483648, i32 2147483647
  %144 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %135, i32 %115) #10
  %145 = extractvalue { i32, i1 } %144, 1
  %146 = extractvalue { i32, i1 } %144, 0
  %147 = select i1 %145, i32 %143, i32 %146, !prof !2
  %148 = zext i32 %115 to i64
  %149 = shl nuw i64 %148, 32
  %150 = zext i32 %106 to i64
  %151 = or i64 %149, %150
  %152 = insertvalue { i64, i64 } undef, i64 %151, 0
  %153 = zext i32 %147 to i64
  %154 = shl nuw i64 %153, 32
  %155 = zext i32 %141 to i64
  %156 = or i64 %154, %155
  %157 = insertvalue { i64, i64 } %152, i64 %156, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %60) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #10
  call void @_ZN5blink18TextDecorationInfoD2Ev(%"class.blink::TextDecorationInfo"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 224, i8* nonnull %23) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  ret { i64, i64 } %157

158:                                              ; preds = %68, %246
  %159 = phi i64 [ 0, %68 ], [ %247, %246 ]
  %160 = trunc i64 %159 to i32
  %161 = call dereferenceable(28) %"class.blink::AppliedTextDecoration"* @_ZNK3WTF6VectorIN5blink21AppliedTextDecorationELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.254"* %55, i32 %160) #10
  %162 = getelementptr inbounds %"class.blink::AppliedTextDecoration", %"class.blink::AppliedTextDecoration"* %161, i64 0, i32 0
  %163 = load i8, i8* %162, align 4
  %164 = and i8 %163, 1
  %165 = lshr i8 %163, 1
  %166 = and i8 %165, 1
  %167 = select i1 %58, i8 %166, i8 %164
  %168 = select i1 %58, i8 %164, i8 %166
  call void @_ZN5blink18TextDecorationInfo18SetDecorationIndexEi(%"class.blink::TextDecorationInfo"* nonnull %6, i32 %160) #10
  %169 = load i32, i32* %70, align 8
  %170 = call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.640"* %69, i32 %169) #10
  %171 = load float, float* %170, align 4
  %172 = icmp eq i8 %167, 0
  br i1 %172, label %202, label %173

173:                                              ; preds = %158
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #10
  store i64 -6148914691236517206, i64* %10, align 8
  br i1 %58, label %174, label %175

174:                                              ; preds = %173
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %71, i8 0, i64 7, i1 false) #10
  br label %182

175:                                              ; preds = %173
  %176 = getelementptr inbounds %"class.blink::AppliedTextDecoration", %"class.blink::AppliedTextDecoration"* %161, i64 0, i32 3
  %177 = bitcast %"class.blink::Length"* %176 to i64*
  %178 = load i64, i64* %177, align 4, !noalias !4
  store i64 %178, i64* %10, align 8, !alias.scope !4
  %179 = and i64 %178, 280375465082880
  %180 = icmp eq i64 %179, 8796093022208
  br i1 %180, label %181, label %182

181:                                              ; preds = %175
  call void @_ZNK5blink6Length22IncrementCalculatedRefEv(%"class.blink::Length"* nonnull %11) #10
  br label %182

182:                                              ; preds = %181, %175, %174
  %183 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %51, align 8
  %184 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %183, i64 0, i32 0, i32 0, i32 0, i32 0
  %185 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %184, align 8
  %186 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %185, i64 0, i32 1, i32 0, i32 0
  %187 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %186, align 8
  %188 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %187, i64 0, i32 1, i32 0, i32 5
  %189 = load float, float* %188, align 4
  %190 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %74, align 8
  %191 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %190, i64 0, i32 1
  %192 = call i32 @_ZNK5blink24TextDecorationOffsetBase22ComputeUnderlineOffsetENS_25ResolvedUnderlinePositionEfRKNS_11FontMetricsERKNS_6LengthEf(%"class.blink::TextDecorationOffsetBase"* nonnull %73, i32 %59, float %189, %"class.blink::FontMetrics"* dereferenceable(56) %191, %"class.blink::Length"* nonnull dereferenceable(8) %11, float %171) #10
  %193 = sitofp i32 %192 to float
  %194 = fadd float %171, 1.000000e+00
  call void @_ZN5blink18TextDecorationInfo14SetPerLineDataENS_14TextDecorationEffi(%"class.blink::TextDecorationInfo"* nonnull %6, i32 1, float %193, float %194, i32 1) #10
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %75) #10
  %195 = call { <2 x float>, <2 x float> } @_ZNK5blink18TextDecorationInfo13BoundsForLineENS_14TextDecorationE(%"class.blink::TextDecorationInfo"* nonnull %6, i32 1) #10
  %196 = extractvalue { <2 x float>, <2 x float> } %195, 0
  store <2 x float> %196, <2 x float>* %76, align 8
  %197 = extractvalue { <2 x float>, <2 x float> } %195, 1
  store <2 x float> %197, <2 x float>* %77, align 8
  call void @_ZN5blink9FloatRect5UniteERKS0_(%"class.blink::FloatRect"* nonnull %9, %"class.blink::FloatRect"* nonnull dereferenceable(16) %13) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %75) #10
  %198 = load i8, i8* %72, align 1
  %199 = icmp eq i8 %198, 8
  br i1 %199, label %200, label %201

200:                                              ; preds = %182
  call void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"* nonnull %11) #10
  br label %201

201:                                              ; preds = %182, %200
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #10
  br label %202

202:                                              ; preds = %158, %201
  %203 = icmp eq i8 %168, 0
  br i1 %203, label %232, label %204

204:                                              ; preds = %202
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %78) #10
  store i64 -6148914691236517206, i64* %14, align 8
  br i1 %58, label %205, label %212

205:                                              ; preds = %204
  %206 = getelementptr inbounds %"class.blink::AppliedTextDecoration", %"class.blink::AppliedTextDecoration"* %161, i64 0, i32 3
  %207 = bitcast %"class.blink::Length"* %206 to i64*
  %208 = load i64, i64* %207, align 4, !noalias !7
  store i64 %208, i64* %14, align 8, !alias.scope !7
  %209 = and i64 %208, 280375465082880
  %210 = icmp eq i64 %209, 8796093022208
  br i1 %210, label %211, label %213

211:                                              ; preds = %205
  call void @_ZNK5blink6Length22IncrementCalculatedRefEv(%"class.blink::Length"* nonnull %15) #10
  br label %213

212:                                              ; preds = %204
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 0, i64 7, i1 false) #10
  br label %213

213:                                              ; preds = %211, %205, %212
  %214 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %51, align 8
  %215 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %214, i64 0, i32 0, i32 0, i32 0, i32 0
  %216 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %215, align 8
  %217 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %216, i64 0, i32 1, i32 0, i32 0
  %218 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %217, align 8
  %219 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %218, i64 0, i32 1, i32 0, i32 5
  %220 = load float, float* %219, align 4
  %221 = call i32 @_ZNK5blink22NGTextDecorationOffset30ComputeUnderlineOffsetForUnderERKNS_6LengthEffNS_24FontVerticalPositionTypeE(%"class.blink::NGTextDecorationOffset"* nonnull %8, %"class.blink::Length"* nonnull dereferenceable(8) %15, float %220, float %171, i32 %80) #10
  %222 = sitofp i32 %221 to float
  %223 = fadd float %171, 1.000000e+00
  %224 = fsub float -0.000000e+00, %223
  call void @_ZN5blink18TextDecorationInfo14SetPerLineDataENS_14TextDecorationEffi(%"class.blink::TextDecorationInfo"* nonnull %6, i32 2, float %222, float %224, i32 1) #10
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %81) #10
  %225 = call { <2 x float>, <2 x float> } @_ZNK5blink18TextDecorationInfo13BoundsForLineENS_14TextDecorationE(%"class.blink::TextDecorationInfo"* nonnull %6, i32 2) #10
  %226 = extractvalue { <2 x float>, <2 x float> } %225, 0
  store <2 x float> %226, <2 x float>* %82, align 8
  %227 = extractvalue { <2 x float>, <2 x float> } %225, 1
  store <2 x float> %227, <2 x float>* %83, align 8
  call void @_ZN5blink9FloatRect5UniteERKS0_(%"class.blink::FloatRect"* nonnull %9, %"class.blink::FloatRect"* nonnull dereferenceable(16) %17) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #10
  %228 = load i8, i8* %79, align 1
  %229 = icmp eq i8 %228, 8
  br i1 %229, label %230, label %231

230:                                              ; preds = %213
  call void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"* nonnull %15) #10
  br label %231

231:                                              ; preds = %213, %230
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %78) #10
  br label %232

232:                                              ; preds = %202, %231
  %233 = and i8 %163, 4
  %234 = icmp eq i8 %233, 0
  br i1 %234, label %246, label %235

235:                                              ; preds = %232
  %236 = load float, float* %84, align 8
  %237 = fmul float %236, 2.000000e+00
  %238 = fdiv float %237, 3.000000e+00
  %239 = fmul float %171, 5.000000e-01
  %240 = fsub float %238, %239
  %241 = fadd float %171, 1.000000e+00
  %242 = call float @llvm.floor.f32(float %241)
  call void @_ZN5blink18TextDecorationInfo14SetPerLineDataENS_14TextDecorationEffi(%"class.blink::TextDecorationInfo"* nonnull %6, i32 4, float %240, float %242, i32 0) #10
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %85) #10
  %243 = call { <2 x float>, <2 x float> } @_ZNK5blink18TextDecorationInfo13BoundsForLineENS_14TextDecorationE(%"class.blink::TextDecorationInfo"* nonnull %6, i32 4) #10
  %244 = extractvalue { <2 x float>, <2 x float> } %243, 0
  store <2 x float> %244, <2 x float>* %86, align 8
  %245 = extractvalue { <2 x float>, <2 x float> } %243, 1
  store <2 x float> %245, <2 x float>* %87, align 8
  call void @_ZN5blink9FloatRect5UniteERKS0_(%"class.blink::FloatRect"* nonnull %9, %"class.blink::FloatRect"* nonnull dereferenceable(16) %19) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %85) #10
  br label %246

246:                                              ; preds = %232, %235
  %247 = add nuw nsw i64 %159, 1
  %248 = load i32, i32* %65, align 4
  %249 = zext i32 %248 to i64
  %250 = icmp ult i64 %247, %249
  br i1 %250, label %158, label %88
}

declare void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"*, %"class.blink::LayoutRect"* dereferenceable(16)) local_unnamed_addr #4

declare i32 @_ZNK5blink13ComputedStyle19GetTextEmphasisMarkEv(%"class.blink::ComputedStyle"*) local_unnamed_addr #4

declare i32 @_ZNK5blink4Font18EmphasisMarkHeightERKN3WTF12AtomicStringE(%"class.blink::Font"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #4

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink13ComputedStyle22TextEmphasisMarkStringEv(%"class.blink::ComputedStyle"*) local_unnamed_addr #4

declare i32 @_ZNK5blink13ComputedStyle30GetTextEmphasisLineLogicalSideEv(%"class.blink::ComputedStyle"*) local_unnamed_addr #4

declare { i64, i64 } @_ZN5blink32LineOrientationLayoutRectOutsetsERKNS_17LayoutRectOutsetsENS_11WritingModeE(%"class.blink::LayoutRectOutsets"* dereferenceable(16), i8 zeroext) local_unnamed_addr #4

declare { <2 x float>, <2 x float> } @_ZNK5blink10ShadowList28RectOutsetsIncludingOriginalEv(%"class.blink::ShadowList"*) local_unnamed_addr #4

declare void @_ZN5blink17LayoutRectOutsets19ClampNegativeToZeroEv(%"class.blink::LayoutRectOutsets"*) local_unnamed_addr #4

declare void @_ZN5blink12PhysicalRect5UniteERKS0_(%"struct.blink::PhysicalRect"*, %"struct.blink::PhysicalRect"* dereferenceable(16)) local_unnamed_addr #4

declare void @_ZN5blink12PhysicalRect28ExpandEdgesToPixelBoundariesEv(%"struct.blink::PhysicalRect"*) local_unnamed_addr #4

declare i32 @_ZNK5blink13ComputedStyle15GetFontBaselineEv(%"class.blink::ComputedStyle"*) local_unnamed_addr #4

declare void @_ZN5blink18TextDecorationInfoC1ERKNS_14PhysicalOffsetES1_NS_10LayoutUnitENS_12FontBaselineERKNS_13ComputedStyleEN4absl8optionalINS_21AppliedTextDecorationEEEPS7_(%"class.blink::TextDecorationInfo"*, %"struct.blink::PhysicalOffset"* dereferenceable(8), i64, i32, i32, %"class.blink::ComputedStyle"* dereferenceable(104), %"class.absl::optional.635"*, %"class.blink::ComputedStyle"*) unnamed_addr #4

declare void @_ZN5blink18TextDecorationInfo18SetDecorationIndexEi(%"class.blink::TextDecorationInfo"*, i32) local_unnamed_addr #4

declare i32 @_ZNK5blink24TextDecorationOffsetBase22ComputeUnderlineOffsetENS_25ResolvedUnderlinePositionEfRKNS_11FontMetricsERKNS_6LengthEf(%"class.blink::TextDecorationOffsetBase"*, i32, float, %"class.blink::FontMetrics"* dereferenceable(56), %"class.blink::Length"* dereferenceable(8), float) local_unnamed_addr #4

declare void @_ZN5blink18TextDecorationInfo14SetPerLineDataENS_14TextDecorationEffi(%"class.blink::TextDecorationInfo"*, i32, float, float, i32) local_unnamed_addr #4

declare void @_ZN5blink9FloatRect5UniteERKS0_(%"class.blink::FloatRect"*, %"class.blink::FloatRect"* dereferenceable(16)) local_unnamed_addr #4

declare { <2 x float>, <2 x float> } @_ZNK5blink18TextDecorationInfo13BoundsForLineENS_14TextDecorationE(%"class.blink::TextDecorationInfo"*, i32) local_unnamed_addr #4

declare i32 @_ZNK5blink22NGTextDecorationOffset30ComputeUnderlineOffsetForUnderERKNS_6LengthEffNS_24FontVerticalPositionTypeE(%"class.blink::NGTextDecorationOffset"*, %"class.blink::Length"* dereferenceable(8), float, float, i32) unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink18TextDecorationInfoD2Ev(%"class.blink::TextDecorationInfo"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %0, i64 0, i32 12, i64 2, i32 4, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !3
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %0, i64 0, i32 12, i64 2, i32 4, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN5blink4PathD1Ev(%"class.blink::Path"* %6) #10
  store i8 0, i8* %2, align 8
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %0, i64 0, i32 12, i64 1, i32 4, i32 0, i32 0, i32 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !3
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %37, label %35

11:                                               ; preds = %43
  %12 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %0, i64 0, i32 9, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15, !prof !2

15:                                               ; preds = %11
  store i32 0, i32* %12, align 4
  br label %16

16:                                               ; preds = %15, %11
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %47) #10
  store float* null, float** %44, align 8
  br label %17

17:                                               ; preds = %43, %16
  %18 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %19 = load i8, i8* %18, align 4, !range !3
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %34, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 2
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, 8
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3
  tail call void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"* %26) #10
  br label %27

27:                                               ; preds = %25, %21
  %28 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 0, i32 2
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, 8
  br i1 %30, label %31, label %33

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 0
  tail call void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"* %32) #10
  br label %33

33:                                               ; preds = %31, %27
  store i8 0, i8* %18, align 4
  br label %34

34:                                               ; preds = %17, %33
  ret void

35:                                               ; preds = %7
  %36 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %0, i64 0, i32 12, i64 1, i32 4, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN5blink4PathD1Ev(%"class.blink::Path"* %36) #10
  store i8 0, i8* %8, align 8
  br label %37

37:                                               ; preds = %35, %7
  %38 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %0, i64 0, i32 12, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %39 = load i8, i8* %38, align 8, !range !3
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %43, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %0, i64 0, i32 12, i64 0, i32 4, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN5blink4PathD1Ev(%"class.blink::Path"* %42) #10
  store i8 0, i8* %38, align 8
  br label %43

43:                                               ; preds = %41, %37
  %44 = getelementptr inbounds %"class.blink::TextDecorationInfo", %"class.blink::TextDecorationInfo"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %45 = load float*, float** %44, align 8
  %46 = icmp eq float* %45, null
  %47 = bitcast float* %45 to i8*
  br i1 %46, label %17, label %11, !prof !10
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #8

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i32(i32) #9

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #5

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #5

declare %"class.blink::FontFallbackList"* @_ZNK5blink4Font22EnsureFontFallbackListEv(%"class.blink::Font"*) local_unnamed_addr #4

declare %"class.blink::SimpleFontData"* @_ZN5blink16FontFallbackList30DeterminePrimarySimpleFontDataERKNS_15FontDescriptionE(%"class.blink::FontFallbackList"*, %"class.blink::FontDescription"* dereferenceable(80)) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #5

declare { i64, i64 } @_ZNK5blink20WritingModeConverter14SlowToPhysicalERKNS_11LogicalRectE(%"class.blink::WritingModeConverter"*, %"struct.blink::LogicalRect"* dereferenceable(16)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.640"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.640", %"class.WTF::Vector.640"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.WTF::Vector.640", %"class.WTF::Vector.640"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load float*, float** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds float, float* %24, i64 %25
  ret float* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

declare void @_ZNK5blink6Length22IncrementCalculatedRefEv(%"class.blink::Length"*) local_unnamed_addr #4

declare void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN5blink4PathD1Ev(%"class.blink::Path"*) unnamed_addr #8

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(28) %"class.blink::AppliedTextDecoration"* @_ZNK3WTF6VectorIN5blink21AppliedTextDecorationELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.254"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.254", %"class.WTF::Vector.254"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.WTF::Vector.254", %"class.WTF::Vector.254"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::AppliedTextDecoration"*, %"class.blink::AppliedTextDecoration"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::AppliedTextDecoration", %"class.blink::AppliedTextDecoration"* %24, i64 %25
  ret %"class.blink::AppliedTextDecoration"* %26
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZNK5blink21AppliedTextDecoration15UnderlineOffsetEv: argument 0"}
!6 = distinct !{!6, !"_ZNK5blink21AppliedTextDecoration15UnderlineOffsetEv"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK5blink21AppliedTextDecoration15UnderlineOffsetEv: argument 0"}
!9 = distinct !{!9, !"_ZNK5blink21AppliedTextDecoration15UnderlineOffsetEv"}
!10 = !{!"branch_weights", i32 2000, i32 1}
