; ModuleID = '../../ui/display/mojom/display_configuration_params_mojom_traits.cc'
source_filename = "../../ui/display/mojom/display_configuration_params_mojom_traits.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.display::mojom::internal::DisplayConfigurationParams_Data" = type { %"struct.mojo::internal::StructHeader", i64, %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer.0" }
%"struct.mojo::internal::StructHeader" = type { i32, i32 }
%"struct.mojo::internal::Pointer" = type { i64 }
%"struct.mojo::internal::Pointer.0" = type { i64 }
%"class.mojo::Message" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::internal::Buffer", %"class.std::__1::vector", %"class.std::__1::vector.3", %"class.mojo::ConnectionGroup::Ref"*, i8, i8, i8* }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessageHandle" }
%"class.mojo::MessageHandle" = type { i64 }
%"class.mojo::internal::Buffer" = type { %"class.mojo::MessageHandle", i64, i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.mojo::ScopedHandleBase.1"*, %"class.mojo::ScopedHandleBase.1"*, %"class.std::__1::__compressed_pair" }
%"class.mojo::ScopedHandleBase.1" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.mojo::ScopedHandleBase.1"* }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.std::__1::__compressed_pair.5" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.mojo::ScopedInterfaceEndpointHandle"* }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.10 }
%class.scoped_refptr.10 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.14, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.16", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.12 }
%class.scoped_refptr.12 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.13", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.13" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.14 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.15" }>
%"class.base::RefCountedThreadSafe.15" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.16" = type { %"struct.std::__1::__atomic_base.17" }
%"struct.std::__1::__atomic_base.17" = type { %"struct.std::__1::__atomic_base.18" }
%"struct.std::__1::__atomic_base.18" = type { %"struct.std::__1::__cxx_atomic_impl.19" }
%"struct.std::__1::__cxx_atomic_impl.19" = type { %"struct.std::__1::__cxx_atomic_base_impl.20" }
%"struct.std::__1::__cxx_atomic_base_impl.20" = type { i32 }
%"struct.display::DisplayConfigurationParams" = type { i64, %"class.gfx::Point", %"class.absl::optional" }
%"class.gfx::Point" = type { i32, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.display::DisplayMode"* }
%"class.display::DisplayMode" = type <{ %"class.gfx::Size", float, i8, [3 x i8] }>
%"class.gfx::Size" = type { i32, i32 }
%"class.display::mojom::internal::DisplayMode_Data" = type { %"struct.mojo::internal::StructHeader", %"struct.mojo::internal::Pointer.24", i8, [3 x i8], float }
%"struct.mojo::internal::Pointer.24" = type { i64 }

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4mojo12StructTraitsIN7display5mojom34DisplayConfigurationParamsDataViewENS1_26DisplayConfigurationParamsEE4ReadES3_PS4_(%"class.display::mojom::internal::DisplayConfigurationParams_Data"*, %"class.mojo::Message"*, %"struct.display::DisplayConfigurationParams"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.absl::optional", align 8
  %5 = getelementptr inbounds %"class.display::mojom::internal::DisplayConfigurationParams_Data", %"class.display::mojom::internal::DisplayConfigurationParams_Data"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer"* %5, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  %9 = bitcast %"struct.mojo::internal::Pointer"* %5 to i8*
  %10 = getelementptr inbounds i8, i8* %9, i64 %7
  br i1 %8, label %21, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds i8, i8* %10, i64 8
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds i8, i8* %10, i64 12
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 1
  %18 = zext i32 %17 to i64
  %19 = shl nuw i64 %18, 32
  %20 = zext i32 %14 to i64
  br label %21

21:                                               ; preds = %11, %3
  %22 = phi i64 [ 0, %3 ], [ %19, %11 ]
  %23 = phi i64 [ 0, %3 ], [ %20, %11 ]
  %24 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 16, i1 false)
  store i8 0, i8* %24, align 8
  %25 = getelementptr inbounds %"class.display::mojom::internal::DisplayConfigurationParams_Data", %"class.display::mojom::internal::DisplayConfigurationParams_Data"* %0, i64 0, i32 3
  %26 = getelementptr inbounds %"struct.mojo::internal::Pointer.0", %"struct.mojo::internal::Pointer.0"* %25, i64 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %39, label %29

29:                                               ; preds = %21
  %30 = bitcast %"struct.mojo::internal::Pointer.0"* %25 to i8*
  %31 = getelementptr inbounds i8, i8* %30, i64 %27
  %32 = bitcast i8* %31 to %"class.display::mojom::internal::DisplayMode_Data"*
  %33 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %34 = bitcast %"class.std::__1::unique_ptr"* %33 to i64*
  store i64 0, i64* %34, align 8
  store i8 1, i8* %24, align 8
  %35 = call zeroext i1 @_ZN4mojo12StructTraitsIN7display5mojom19DisplayModeDataViewENSt3__110unique_ptrINS1_11DisplayModeENS4_14default_deleteIS6_EEEEE4ReadES3_PS9_(%"class.display::mojom::internal::DisplayMode_Data"* nonnull %32, %"class.mojo::Message"* %1, %"class.std::__1::unique_ptr"* %33) #5
  br i1 %35, label %36, label %77

36:                                               ; preds = %29
  %37 = load i8, i8* %24, align 8, !range !2
  %38 = icmp eq i8 %37, 0
  br label %39

39:                                               ; preds = %36, %21
  %40 = phi i1 [ %38, %36 ], [ true, %21 ]
  %41 = getelementptr inbounds %"class.display::mojom::internal::DisplayConfigurationParams_Data", %"class.display::mojom::internal::DisplayConfigurationParams_Data"* %0, i64 0, i32 1
  %42 = load i64, i64* %41, align 1
  %43 = getelementptr inbounds %"struct.display::DisplayConfigurationParams", %"struct.display::DisplayConfigurationParams"* %2, i64 0, i32 0
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"struct.display::DisplayConfigurationParams", %"struct.display::DisplayConfigurationParams"* %2, i64 0, i32 1
  %45 = bitcast %"class.gfx::Point"* %44 to i64*
  %46 = or i64 %23, %22
  store i64 %46, i64* %45, align 8
  %47 = getelementptr inbounds %"struct.display::DisplayConfigurationParams", %"struct.display::DisplayConfigurationParams"* %2, i64 0, i32 2
  br i1 %40, label %66, label %48

48:                                               ; preds = %39
  %49 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %50 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %47, i64 0, i32 0, i32 0, i32 0, i32 0
  %51 = load i8, i8* %50, align 8, !range !2
  %52 = icmp eq i8 %51, 0
  %53 = getelementptr inbounds %"struct.display::DisplayConfigurationParams", %"struct.display::DisplayConfigurationParams"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %54 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %55 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %56 = load i64, i64* %55, align 8
  store %"class.display::DisplayMode"* null, %"class.display::DisplayMode"** %54, align 8
  br i1 %52, label %64, label %57

57:                                               ; preds = %48
  %58 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %53, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.display::DisplayMode"*, %"class.display::DisplayMode"** %58, align 8
  %60 = bitcast %"class.std::__1::unique_ptr"* %53 to i64*
  store i64 %56, i64* %60, align 8
  %61 = icmp eq %"class.display::DisplayMode"* %59, null
  br i1 %61, label %77, label %62

62:                                               ; preds = %57
  call void @_ZN7display11DisplayModeD1Ev(%"class.display::DisplayMode"* nonnull %59) #5
  %63 = bitcast %"class.display::DisplayMode"* %59 to i8*
  call void @_ZdlPv(i8* %63) #6
  br label %77

64:                                               ; preds = %48
  %65 = bitcast %"class.std::__1::unique_ptr"* %53 to i64*
  store i64 %56, i64* %65, align 8
  store i8 1, i8* %50, align 8
  br label %77

66:                                               ; preds = %39
  %67 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %47, i64 0, i32 0, i32 0, i32 0, i32 0
  %68 = load i8, i8* %67, align 8, !range !2
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %77, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %"struct.display::DisplayConfigurationParams", %"struct.display::DisplayConfigurationParams"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %72 = load %"class.display::DisplayMode"*, %"class.display::DisplayMode"** %71, align 8
  store %"class.display::DisplayMode"* null, %"class.display::DisplayMode"** %71, align 8
  %73 = icmp eq %"class.display::DisplayMode"* %72, null
  br i1 %73, label %76, label %74

74:                                               ; preds = %70
  call void @_ZN7display11DisplayModeD1Ev(%"class.display::DisplayMode"* nonnull %72) #5
  %75 = bitcast %"class.display::DisplayMode"* %72 to i8*
  call void @_ZdlPv(i8* %75) #6
  br label %76

76:                                               ; preds = %74, %70
  store i8 0, i8* %67, align 8
  br label %77

77:                                               ; preds = %76, %66, %64, %62, %57, %29
  %78 = phi i1 [ false, %29 ], [ true, %57 ], [ true, %62 ], [ true, %64 ], [ true, %66 ], [ true, %76 ]
  %79 = load i8, i8* %24, align 8, !range !2
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %88, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %83 = load %"class.display::DisplayMode"*, %"class.display::DisplayMode"** %82, align 8
  store %"class.display::DisplayMode"* null, %"class.display::DisplayMode"** %82, align 8
  %84 = icmp eq %"class.display::DisplayMode"* %83, null
  br i1 %84, label %87, label %85

85:                                               ; preds = %81
  call void @_ZN7display11DisplayModeD1Ev(%"class.display::DisplayMode"* nonnull %83) #5
  %86 = bitcast %"class.display::DisplayMode"* %83 to i8*
  call void @_ZdlPv(i8* %86) #6
  br label %87

87:                                               ; preds = %85, %81
  store i8 0, i8* %24, align 8
  br label %88

88:                                               ; preds = %87, %77
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #5
  ret i1 %78
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @_ZN7display11DisplayModeD1Ev(%"class.display::DisplayMode"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

declare zeroext i1 @_ZN4mojo12StructTraitsIN7display5mojom19DisplayModeDataViewENSt3__110unique_ptrINS1_11DisplayModeENS4_14default_deleteIS6_EEEEE4ReadES3_PS9_(%"class.display::mojom::internal::DisplayMode_Data"*, %"class.mojo::Message"*, %"class.std::__1::unique_ptr"*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
