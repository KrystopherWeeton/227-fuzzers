; ModuleID = '../../third_party/libwebp/src/enc/frame_enc.c'
source_filename = "../../third_party/libwebp/src/enc/frame_enc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VP8Residual = type { i32, i32, i16*, i32, [3 x [11 x i8]]*, [3 x [11 x i32]]*, [3 x i16*]* }
%struct.VP8Encoder = type { %struct.WebPConfig*, %struct.WebPPicture*, %struct.VP8EncFilterHeader, %struct.VP8EncSegmentHeader, i32, i32, i32, i32, i32, %struct.VP8BitWriter, [8 x %struct.VP8BitWriter], %struct.VP8TBuffer, i32, i32, i8*, i32, %struct.WebPWorker, [4 x %struct.VP8SegmentInfo], i32, i32, i32, i32, i32, i32, i32, i32, %struct.VP8EncProba, [4 x i64], i64, i32, [3 x [4 x i32]], [3 x i32], i32, i32, i32, i32, i32, i32, i32, %struct.VP8MBInfo*, i8*, i32*, i8*, i8*, [4 x [64 x double]]*, [2 x [2 x i8]]* }
%struct.WebPConfig = type { i32, float, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.WebPPicture = type { i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i32, [2 x i32], i32*, i32, [3 x i32], i32 (i8*, i64, %struct.WebPPicture*)*, i8*, i32, i8*, %struct.WebPAuxStats*, i32, i32 (i32, %struct.WebPPicture*)*, i8*, [3 x i32], i8*, i8*, [8 x i32], i8*, i8*, [2 x i8*] }
%struct.WebPAuxStats = type { i32, [5 x float], [3 x i32], [2 x i32], [3 x [4 x i32]], [4 x i32], [4 x i32], [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.VP8EncFilterHeader = type { i32, i32, i32, i32 }
%struct.VP8EncSegmentHeader = type { i32, i32, i32 }
%struct.VP8BitWriter = type { i32, i32, i32, i32, i8*, i64, i64, i32 }
%struct.VP8TBuffer = type { %struct.VP8Tokens*, %struct.VP8Tokens**, i16*, i32, i32, i32 }
%struct.VP8Tokens = type opaque
%struct.WebPWorker = type { i8*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VP8SegmentInfo = type { %struct.VP8Matrix, %struct.VP8Matrix, %struct.VP8Matrix, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.VP8Matrix = type { [16 x i16], [16 x i16], [16 x i32], [16 x i32], [16 x i16] }
%struct.VP8EncProba = type { [3 x i8], i8, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i32]]]], [4 x [8 x [3 x [68 x i16]]]], [4 x [16 x [3 x i16*]]], i32, i32, i32 }
%struct.VP8MBInfo = type { i8, i8, [2 x i8] }
%struct.VP8EncIterator = type { i32, i32, i8*, i8*, i8*, i8*, %struct.VP8Encoder*, %struct.VP8MBInfo*, %struct.VP8BitWriter*, i8*, i32*, [37 x i8], i8*, i32, [9 x i32], [9 x i32], [4 x [3 x i64]], i64, i64, [4 x [64 x double]]*, i32, i32, i32, i32, [2 x [2 x i8]], [2 x [2 x i8]]*, i8*, i8*, i8*, i8*, i8*, [88 x i8], [3359 x i8] }
%struct.VP8ModeScore = type { i64, i64, i64, i64, i64, [16 x i16], [16 x [16 x i16]], [8 x [16 x i16]], i32, [16 x i8], i32, i32, [2 x [3 x i8]] }

@VP8Cat3 = hidden local_unnamed_addr constant [3 x i8] c"\AD\94\8C", align 1
@VP8Cat4 = hidden local_unnamed_addr constant [4 x i8] c"\B0\9B\8C\87", align 1
@VP8Cat5 = hidden local_unnamed_addr constant [5 x i8] c"\B4\9D\8D\86\82", align 1
@VP8Cat6 = hidden local_unnamed_addr constant [11 x i8] c"\FE\FE\F3\E6\C4\B1\99\8C\85\82\81", align 1
@kAverageBytesPerMB = internal unnamed_addr constant [8 x i8] c"2\18\10\09\07\05\03\02", align 1
@VP8SetResidualCoeffs = external local_unnamed_addr global void (i16*, %struct.VP8Residual*)*, align 8
@VP8EntropyCost = external local_unnamed_addr constant [256 x i16], align 16
@VP8EncBands = external local_unnamed_addr constant [17 x i8], align 16
@VP8CoeffsUpdateProba = external local_unnamed_addr constant [4 x [8 x [3 x [11 x i8]]]], align 16
@VP8CoeffsProba0 = external local_unnamed_addr constant [4 x [8 x [3 x [11 x i8]]]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8EncLoop(%struct.VP8Encoder*) local_unnamed_addr #0 {
  %2 = alloca %struct.VP8Residual, align 8
  %3 = alloca %struct.VP8Residual, align 8
  %4 = alloca %struct.VP8EncIterator, align 8
  %5 = alloca %struct.VP8ModeScore, align 8
  %6 = alloca %struct.VP8EncIterator, align 8
  %7 = alloca %struct.VP8ModeScore, align 8
  %8 = bitcast %struct.VP8EncIterator* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3848, i8* nonnull %8) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 3848, i1 false)
  %9 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 18
  %10 = load i32, i32* %9, align 8
  %11 = ashr i32 %10, 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* @kAverageBytesPerMB, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 5
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 6
  %19 = load i32, i32* %18, align 4
  %20 = mul i32 %17, %15
  %21 = mul i32 %20, %19
  %22 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 8
  %23 = load i32, i32* %22, align 4
  %24 = sdiv i32 %21, %23
  %25 = sext i32 %24 to i64
  %26 = icmp sgt i32 %23, 0
  br i1 %26, label %27, label %41

27:                                               ; preds = %1, %32
  %28 = phi i64 [ %33, %32 ], [ 0, %1 ]
  %29 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 10, i64 %28
  %30 = tail call i32 @VP8BitWriterInit(%struct.VP8BitWriter* %29, i64 %25) #6
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %37, label %32

32:                                               ; preds = %27
  %33 = add nuw nsw i64 %28, 1
  %34 = load i32, i32* %22, align 4
  %35 = sext i32 %34 to i64
  %36 = icmp slt i64 %33, %35
  br i1 %36, label %27, label %41

37:                                               ; preds = %27
  tail call void @VP8EncFreeBitWriters(%struct.VP8Encoder* %0) #6
  %38 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 1
  %39 = load %struct.WebPPicture*, %struct.WebPPicture** %38, align 8
  %40 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* %39, i32 1) #6
  br label %648

41:                                               ; preds = %32, %1
  %42 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 32
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 37
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %43, 3
  switch i32 %43, label %49 [
    i32 3, label %47
    i32 0, label %47
  ]

47:                                               ; preds = %41, %41
  %48 = icmp eq i32 %45, 0
  br label %49

49:                                               ; preds = %47, %41
  %50 = phi i1 [ %48, %47 ], [ false, %41 ]
  %51 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 0
  %52 = load %struct.WebPConfig*, %struct.WebPConfig** %51, align 8
  %53 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %52, i64 0, i32 15
  %54 = load i32, i32* %53, align 4
  %55 = sdiv i32 %54, 2
  %56 = add nsw i32 %55, 20
  %57 = sdiv i32 %56, %54
  %58 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 12
  %59 = load i32, i32* %58, align 8
  %60 = add nsw i32 %59, 20
  %61 = icmp sgt i32 %43, 2
  %62 = icmp ne i32 %45, 0
  %63 = or i1 %61, %62
  %64 = zext i1 %63 to i32
  %65 = load i32, i32* %16, align 8
  %66 = load i32, i32* %18, align 4
  %67 = mul nsw i32 %66, %65
  %68 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %52, i64 0, i32 4
  %69 = load i32, i32* %68, align 4
  %70 = icmp ne i32 %69, 0
  %71 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %52, i64 0, i32 5
  %72 = load float, float* %71, align 4
  %73 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %52, i64 0, i32 27
  %74 = load i32, i32* %73, align 4
  %75 = sitofp i32 %74 to float
  %76 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %52, i64 0, i32 28
  %77 = load i32, i32* %76, align 4
  %78 = sitofp i32 %77 to float
  %79 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %52, i64 0, i32 1
  %80 = load float, float* %79, align 4
  %81 = fcmp olt float %80, %75
  %82 = fcmp ogt float %80, %78
  %83 = select i1 %82, float %78, float %80
  %84 = select i1 %81, float %75, float %83
  br i1 %70, label %85, label %88

85:                                               ; preds = %49
  %86 = sext i32 %69 to i64
  %87 = uitofp i64 %86 to double
  br label %92

88:                                               ; preds = %49
  %89 = fpext float %72 to double
  %90 = fcmp ogt float %72, 0.000000e+00
  %91 = select i1 %90, double %89, double 4.000000e+01
  br label %92

92:                                               ; preds = %88, %85
  %93 = phi double [ %87, %85 ], [ %91, %88 ]
  %94 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 3, i64 0
  %95 = bitcast [8 x [3 x [11 x i32]]]* %94 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %95, i8 0, i64 4224, i1 false) #6
  br i1 %50, label %96, label %104

96:                                               ; preds = %92
  %97 = icmp sgt i32 %67, 200
  br i1 %46, label %98, label %101

98:                                               ; preds = %96
  %99 = ashr i32 %67, 1
  %100 = select i1 %97, i32 %99, i32 100
  br label %104

101:                                              ; preds = %96
  %102 = ashr i32 %67, 2
  %103 = select i1 %97, i32 %102, i32 50
  br label %104

104:                                              ; preds = %101, %98, %92
  %105 = phi i32 [ %100, %98 ], [ %103, %101 ], [ %67, %92 ]
  %106 = icmp sgt i32 %54, 0
  br i1 %106, label %107, label %385

107:                                              ; preds = %104
  %108 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 34
  %109 = bitcast %struct.VP8EncIterator* %4 to i8*
  %110 = mul nsw i32 %105, 384
  %111 = sext i32 %110 to i64
  %112 = bitcast %struct.VP8ModeScore* %5 to i8*
  %113 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 8
  %114 = bitcast %struct.VP8Residual* %3 to i8*
  %115 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 6
  %116 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 7
  %117 = bitcast %struct.VP8MBInfo** %116 to i8**
  %118 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 5, i64 0
  %119 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 14, i64 8
  %120 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 15, i64 8
  %121 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 14, i64 0
  %122 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 14, i64 1
  %123 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 14, i64 2
  %124 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 14, i64 3
  %125 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 14, i64 4
  %126 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 15, i64 4
  %127 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 7, i64 0, i64 0
  %128 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 14, i64 5
  %129 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 7, i64 1, i64 0
  %130 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 15, i64 5
  %131 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 7, i64 2, i64 0
  %132 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 7, i64 3, i64 0
  %133 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 14, i64 6
  %134 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 15, i64 6
  %135 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 7, i64 4, i64 0
  %136 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 14, i64 7
  %137 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 7, i64 5, i64 0
  %138 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 15, i64 7
  %139 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 7, i64 6, i64 0
  %140 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 7, i64 7, i64 0
  %141 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 3
  %142 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 2
  %143 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 0
  %144 = icmp eq i32 %57, 0
  %145 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 3, i32 2
  %146 = icmp ne i32 %105, 0
  %147 = uitofp i64 %111 to double
  %148 = fmul double %147, 6.502500e+04
  %149 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 1
  %150 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 7
  %151 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26
  br label %152

152:                                              ; preds = %376, %107
  %153 = phi i32 [ %54, %107 ], [ %383, %376 ]
  %154 = phi i32 [ 1, %107 ], [ %382, %376 ]
  %155 = phi float [ 1.000000e+01, %107 ], [ %381, %376 ]
  %156 = phi float [ %84, %107 ], [ %380, %376 ]
  %157 = phi float [ %84, %107 ], [ %379, %376 ]
  %158 = phi float [ %84, %107 ], [ %378, %376 ]
  %159 = phi double [ 0.000000e+00, %107 ], [ %377, %376 ]
  %160 = add nsw i32 %153, -1
  %161 = call float @llvm.fabs.f32(float %155) #6
  %162 = fpext float %161 to double
  %163 = fcmp ole double %162, 4.000000e-01
  %164 = icmp eq i32 %160, 0
  %165 = or i1 %164, %163
  br i1 %165, label %169, label %166

166:                                              ; preds = %152
  %167 = load i32, i32* %108, align 8
  %168 = icmp eq i32 %167, 0
  br label %169

169:                                              ; preds = %166, %152
  %170 = phi i1 [ true, %152 ], [ %168, %166 ]
  call void @llvm.lifetime.start.p0i8(i64 3848, i8* nonnull %109) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %109, i8 -86, i64 3848, i1 false) #6
  call void @VP8IteratorInit(%struct.VP8Encoder* %0, %struct.VP8EncIterator* nonnull %4) #6
  call fastcc void @SetLoopParams(%struct.VP8Encoder* %0, float %157) #6
  br label %171

171:                                              ; preds = %276, %169
  %172 = phi i32 [ %105, %169 ], [ %277, %276 ]
  %173 = phi i64 [ 0, %169 ], [ %265, %276 ]
  %174 = phi i64 [ 0, %169 ], [ %266, %276 ]
  %175 = phi i64 [ 0, %169 ], [ %268, %276 ]
  call void @llvm.lifetime.start.p0i8(i64 880, i8* nonnull %112) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %112, i8 -86, i64 880, i1 false) #6
  call void @VP8IteratorImport(%struct.VP8EncIterator* nonnull %4, i8* null) #6
  %176 = call i32 @VP8Decimate(%struct.VP8EncIterator* nonnull %4, %struct.VP8ModeScore* nonnull %5, i32 %64) #6
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %181, label %178

178:                                              ; preds = %171
  %179 = load i32, i32* %113, align 8
  %180 = add nsw i32 %179, 1
  store i32 %180, i32* %113, align 8
  br label %181

181:                                              ; preds = %178, %171
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %114) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %114, i8 -86, i64 48, i1 false) #6
  %182 = load %struct.VP8Encoder*, %struct.VP8Encoder** %115, align 8
  call void @VP8IteratorNzToBytes(%struct.VP8EncIterator* nonnull %4) #6
  %183 = load i8*, i8** %117, align 8
  %184 = load i8, i8* %183, align 4
  %185 = and i8 %184, 3
  %186 = icmp eq i8 %185, 1
  br i1 %186, label %187, label %193

187:                                              ; preds = %181
  call void @VP8InitResidual(i32 0, i32 1, %struct.VP8Encoder* %182, %struct.VP8Residual* nonnull %3) #6
  %188 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %188(i16* %118, %struct.VP8Residual* nonnull %3) #6
  %189 = load i32, i32* %119, align 4
  %190 = load i32, i32* %120, align 8
  %191 = add nsw i32 %190, %189
  %192 = call i32 @VP8RecordCoeffs(i32 %191, %struct.VP8Residual* nonnull %3) #6
  store i32 %192, i32* %120, align 8
  store i32 %192, i32* %119, align 4
  call void @VP8InitResidual(i32 1, i32 0, %struct.VP8Encoder* %182, %struct.VP8Residual* nonnull %3) #6
  br label %194

193:                                              ; preds = %181
  call void @VP8InitResidual(i32 0, i32 3, %struct.VP8Encoder* %182, %struct.VP8Residual* nonnull %3) #6
  br label %194

194:                                              ; preds = %193, %187
  br label %195

195:                                              ; preds = %194, %195
  %196 = phi i64 [ %223, %195 ], [ 0, %194 ]
  %197 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %4, i64 0, i32 15, i64 %196
  %198 = shl i64 %196, 2
  %199 = load i32, i32* %121, align 4
  %200 = load i32, i32* %197, align 4
  %201 = add nsw i32 %200, %199
  %202 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  %203 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 6, i64 %198, i64 0
  call void %202(i16* %203, %struct.VP8Residual* nonnull %3) #6
  %204 = call i32 @VP8RecordCoeffs(i32 %201, %struct.VP8Residual* nonnull %3) #6
  store i32 %204, i32* %197, align 4
  store i32 %204, i32* %121, align 4
  %205 = load i32, i32* %122, align 4
  %206 = add nsw i32 %205, %204
  %207 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  %208 = or i64 %198, 1
  %209 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 6, i64 %208, i64 0
  call void %207(i16* %209, %struct.VP8Residual* nonnull %3) #6
  %210 = call i32 @VP8RecordCoeffs(i32 %206, %struct.VP8Residual* nonnull %3) #6
  store i32 %210, i32* %197, align 4
  store i32 %210, i32* %122, align 4
  %211 = load i32, i32* %123, align 4
  %212 = add nsw i32 %211, %210
  %213 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  %214 = or i64 %198, 2
  %215 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 6, i64 %214, i64 0
  call void %213(i16* %215, %struct.VP8Residual* nonnull %3) #6
  %216 = call i32 @VP8RecordCoeffs(i32 %212, %struct.VP8Residual* nonnull %3) #6
  store i32 %216, i32* %197, align 4
  store i32 %216, i32* %123, align 4
  %217 = load i32, i32* %124, align 4
  %218 = add nsw i32 %217, %216
  %219 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  %220 = or i64 %198, 3
  %221 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %5, i64 0, i32 6, i64 %220, i64 0
  call void %219(i16* %221, %struct.VP8Residual* nonnull %3) #6
  %222 = call i32 @VP8RecordCoeffs(i32 %218, %struct.VP8Residual* nonnull %3) #6
  store i32 %222, i32* %197, align 4
  store i32 %222, i32* %124, align 4
  %223 = add nuw nsw i64 %196, 1
  %224 = icmp eq i64 %223, 4
  br i1 %224, label %225, label %195

225:                                              ; preds = %195
  call void @VP8InitResidual(i32 0, i32 2, %struct.VP8Encoder* %182, %struct.VP8Residual* nonnull %3) #6
  %226 = load i32, i32* %125, align 4
  %227 = load i32, i32* %126, align 8
  %228 = add nsw i32 %227, %226
  %229 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %229(i16* %127, %struct.VP8Residual* nonnull %3) #6
  %230 = call i32 @VP8RecordCoeffs(i32 %228, %struct.VP8Residual* nonnull %3) #6
  store i32 %230, i32* %126, align 8
  store i32 %230, i32* %125, align 4
  %231 = load i32, i32* %128, align 4
  %232 = add nsw i32 %231, %230
  %233 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %233(i16* %129, %struct.VP8Residual* nonnull %3) #6
  %234 = call i32 @VP8RecordCoeffs(i32 %232, %struct.VP8Residual* nonnull %3) #6
  store i32 %234, i32* %126, align 8
  store i32 %234, i32* %128, align 4
  %235 = load i32, i32* %125, align 4
  %236 = load i32, i32* %130, align 4
  %237 = add nsw i32 %236, %235
  %238 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %238(i16* %131, %struct.VP8Residual* nonnull %3) #6
  %239 = call i32 @VP8RecordCoeffs(i32 %237, %struct.VP8Residual* nonnull %3) #6
  store i32 %239, i32* %130, align 4
  store i32 %239, i32* %125, align 4
  %240 = load i32, i32* %128, align 4
  %241 = add nsw i32 %240, %239
  %242 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %242(i16* %132, %struct.VP8Residual* nonnull %3) #6
  %243 = call i32 @VP8RecordCoeffs(i32 %241, %struct.VP8Residual* nonnull %3) #6
  store i32 %243, i32* %130, align 4
  store i32 %243, i32* %128, align 4
  %244 = load i32, i32* %133, align 4
  %245 = load i32, i32* %134, align 8
  %246 = add nsw i32 %245, %244
  %247 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %247(i16* %135, %struct.VP8Residual* nonnull %3) #6
  %248 = call i32 @VP8RecordCoeffs(i32 %246, %struct.VP8Residual* nonnull %3) #6
  store i32 %248, i32* %134, align 8
  store i32 %248, i32* %133, align 4
  %249 = load i32, i32* %136, align 4
  %250 = add nsw i32 %249, %248
  %251 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %251(i16* %137, %struct.VP8Residual* nonnull %3) #6
  %252 = call i32 @VP8RecordCoeffs(i32 %250, %struct.VP8Residual* nonnull %3) #6
  store i32 %252, i32* %134, align 8
  store i32 %252, i32* %136, align 4
  %253 = load i32, i32* %133, align 4
  %254 = load i32, i32* %138, align 4
  %255 = add nsw i32 %254, %253
  %256 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %256(i16* %139, %struct.VP8Residual* nonnull %3) #6
  %257 = call i32 @VP8RecordCoeffs(i32 %255, %struct.VP8Residual* nonnull %3) #6
  store i32 %257, i32* %138, align 4
  store i32 %257, i32* %133, align 4
  %258 = load i32, i32* %136, align 4
  %259 = add nsw i32 %258, %257
  %260 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %260(i16* %140, %struct.VP8Residual* nonnull %3) #6
  %261 = call i32 @VP8RecordCoeffs(i32 %259, %struct.VP8Residual* nonnull %3) #6
  store i32 %261, i32* %138, align 4
  store i32 %261, i32* %136, align 4
  call void @VP8IteratorBytesToNz(%struct.VP8EncIterator* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %114) #6
  %262 = load i64, i64* %141, align 8
  %263 = load i64, i64* %142, align 8
  %264 = add i64 %262, %173
  %265 = add i64 %264, %263
  %266 = add i64 %263, %174
  %267 = load i64, i64* %143, align 8
  %268 = add i64 %267, %175
  br i1 %144, label %272, label %269

269:                                              ; preds = %225
  %270 = call i32 @VP8IteratorProgress(%struct.VP8EncIterator* nonnull %4, i32 %57) #6
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %275, label %272

272:                                              ; preds = %269, %225
  call void @VP8IteratorSaveBoundary(%struct.VP8EncIterator* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 880, i8* nonnull %112) #6
  %273 = call i32 @VP8IteratorNext(%struct.VP8EncIterator* nonnull %4) #6
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %279, label %276

275:                                              ; preds = %269
  call void @llvm.lifetime.end.p0i8(i64 880, i8* nonnull %112) #6
  call void @llvm.lifetime.end.p0i8(i64 3848, i8* nonnull %109) #6
  br label %417

276:                                              ; preds = %272
  %277 = add nsw i32 %172, -1
  %278 = icmp sgt i32 %277, 0
  br i1 %278, label %171, label %279

279:                                              ; preds = %276, %272
  %280 = load i32, i32* %145, align 8
  %281 = sext i32 %280 to i64
  %282 = add i64 %266, %281
  br i1 %70, label %283, label %326

283:                                              ; preds = %279
  %284 = load i32, i32* %16, align 8
  %285 = load i32, i32* %18, align 4
  %286 = mul nsw i32 %285, %284
  %287 = load i32, i32* %113, align 8
  %288 = sext i32 %286 to i64
  %289 = icmp eq i32 %286, 0
  br i1 %289, label %290, label %291

290:                                              ; preds = %283
  store i8 -1, i8* %149, align 1
  store i32 0, i32* %150, align 4
  br label %315

291:                                              ; preds = %283
  %292 = sext i32 %287 to i64
  %293 = sub nsw i64 %288, %292
  %294 = mul nsw i64 %293, 255
  %295 = udiv i64 %294, %288
  %296 = trunc i64 %295 to i8
  store i8 %296, i8* %149, align 1
  %297 = and i64 %295, 254
  %298 = icmp ult i64 %297, 250
  %299 = zext i1 %298 to i32
  store i32 %299, i32* %150, align 4
  br i1 %298, label %300, label %315

300:                                              ; preds = %291
  %301 = and i64 %295, 255
  %302 = xor i64 %301, 255
  %303 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %302
  %304 = load i16, i16* %303, align 2
  %305 = zext i16 %304 to i32
  %306 = mul nsw i32 %287, %305
  %307 = sub nsw i32 %286, %287
  %308 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %301
  %309 = load i16, i16* %308, align 2
  %310 = zext i16 %309 to i32
  %311 = mul nsw i32 %307, %310
  %312 = add i32 %306, 2304
  %313 = add i32 %312, %311
  %314 = sext i32 %313 to i64
  br label %315

315:                                              ; preds = %300, %291, %290
  %316 = phi i64 [ %314, %300 ], [ 256, %291 ], [ 256, %290 ]
  %317 = call fastcc i32 @FinalizeTokenProbas(%struct.VP8EncProba* %151) #6
  %318 = sext i32 %317 to i64
  %319 = add i64 %265, 1024
  %320 = add i64 %319, %282
  %321 = add i64 %320, %316
  %322 = add i64 %321, %318
  %323 = lshr i64 %322, 11
  %324 = add nuw nsw i64 %323, 30
  %325 = uitofp i64 %324 to double
  br label %334

326:                                              ; preds = %279
  %327 = icmp ne i64 %268, 0
  %328 = and i1 %146, %327
  br i1 %328, label %329, label %334

329:                                              ; preds = %326
  %330 = uitofp i64 %268 to double
  %331 = fdiv double %148, %330
  %332 = call double @log10(double %331) #6
  %333 = fmul double %332, 1.000000e+01
  br label %334

334:                                              ; preds = %329, %326, %315
  %335 = phi double [ %325, %315 ], [ %333, %329 ], [ 9.900000e+01, %326 ]
  call void @llvm.lifetime.end.p0i8(i64 3848, i8* nonnull %109) #6
  %336 = icmp eq i64 %282, 0
  br i1 %336, label %417, label %337

337:                                              ; preds = %334
  %338 = load i32, i32* %108, align 8
  %339 = icmp sgt i32 %338, 0
  %340 = icmp ugt i64 %282, 1069547520
  %341 = and i1 %340, %339
  br i1 %341, label %342, label %344

342:                                              ; preds = %337
  %343 = lshr i32 %338, 1
  store i32 %343, i32* %108, align 8
  br label %376

344:                                              ; preds = %337
  br i1 %170, label %385, label %345

345:                                              ; preds = %344
  br i1 %62, label %346, label %376

346:                                              ; preds = %345
  %347 = icmp eq i32 %154, 0
  br i1 %347, label %352, label %348

348:                                              ; preds = %346
  %349 = fcmp ogt double %335, %93
  %350 = fsub float -0.000000e+00, %155
  %351 = select i1 %349, float %350, float %155
  br label %362

352:                                              ; preds = %346
  %353 = fcmp une double %335, %159
  br i1 %353, label %354, label %362

354:                                              ; preds = %352
  %355 = fsub double %93, %335
  %356 = fsub double %159, %335
  %357 = fdiv double %355, %356
  %358 = fsub float %158, %157
  %359 = fpext float %358 to double
  %360 = fmul double %357, %359
  %361 = fptrunc double %360 to float
  br label %362

362:                                              ; preds = %354, %352, %348
  %363 = phi float [ %351, %348 ], [ %361, %354 ], [ 0.000000e+00, %352 ]
  %364 = fcmp olt float %363, -3.000000e+01
  %365 = fcmp ogt float %363, 3.000000e+01
  %366 = select i1 %365, float 3.000000e+01, float %363
  %367 = select i1 %364, float -3.000000e+01, float %366
  %368 = fadd float %157, %367
  %369 = fcmp olt float %368, %75
  %370 = fcmp ogt float %368, %78
  %371 = select i1 %370, float %78, float %368
  %372 = select i1 %369, float %75, float %371
  %373 = call float @llvm.fabs.f32(float %367) #6
  %374 = fpext float %373 to double
  %375 = fcmp ugt double %374, 4.000000e-01
  br i1 %375, label %376, label %387

376:                                              ; preds = %362, %345, %342
  %377 = phi double [ %159, %342 ], [ %335, %362 ], [ %159, %345 ]
  %378 = phi float [ %158, %342 ], [ %156, %362 ], [ %158, %345 ]
  %379 = phi float [ %157, %342 ], [ %372, %362 ], [ %157, %345 ]
  %380 = phi float [ %156, %342 ], [ %372, %362 ], [ %156, %345 ]
  %381 = phi float [ %155, %342 ], [ %367, %362 ], [ %155, %345 ]
  %382 = phi i32 [ %154, %342 ], [ 0, %362 ], [ %154, %345 ]
  %383 = phi i32 [ %153, %342 ], [ %160, %362 ], [ %160, %345 ]
  %384 = icmp sgt i32 %383, 0
  br i1 %384, label %152, label %385

385:                                              ; preds = %376, %344, %104
  %386 = and i1 %62, %70
  br i1 %386, label %412, label %388

387:                                              ; preds = %362
  br i1 %70, label %412, label %388

388:                                              ; preds = %387, %385
  %389 = load i32, i32* %16, align 8
  %390 = load i32, i32* %18, align 4
  %391 = mul nsw i32 %390, %389
  %392 = sext i32 %391 to i64
  %393 = icmp eq i32 %391, 0
  br i1 %393, label %402, label %394

394:                                              ; preds = %388
  %395 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 8
  %396 = load i32, i32* %395, align 8
  %397 = sext i32 %396 to i64
  %398 = sub nsw i64 %392, %397
  %399 = mul nsw i64 %398, 255
  %400 = udiv i64 %399, %392
  %401 = trunc i64 %400 to i32
  br label %402

402:                                              ; preds = %394, %388
  %403 = phi i32 [ %401, %394 ], [ 255, %388 ]
  %404 = trunc i32 %403 to i8
  %405 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 1
  store i8 %404, i8* %405, align 1
  %406 = and i32 %403, 254
  %407 = icmp ult i32 %406, 250
  %408 = zext i1 %407 to i32
  %409 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 7
  store i32 %408, i32* %409, align 4
  %410 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26
  %411 = call fastcc i32 @FinalizeTokenProbas(%struct.VP8EncProba* %410) #6
  br label %412

412:                                              ; preds = %402, %387, %385
  %413 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26
  call void @VP8CalculateLevelCosts(%struct.VP8EncProba* %413) #6
  %414 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 1
  %415 = load %struct.WebPPicture*, %struct.WebPPicture** %414, align 8
  %416 = call i32 @WebPReportProgress(%struct.WebPPicture* %415, i32 %60, i32* %58) #6
  br label %417

417:                                              ; preds = %334, %275, %412
  call void @VP8IteratorInit(%struct.VP8Encoder* %0, %struct.VP8EncIterator* nonnull %6) #6
  call void @VP8InitFilter(%struct.VP8EncIterator* nonnull %6) #6
  %418 = bitcast %struct.VP8ModeScore* %7 to i8*
  %419 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 7
  %420 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 33
  %421 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 7
  %422 = bitcast %struct.VP8MBInfo** %421 to i8**
  %423 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 10
  %424 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 15, i64 8
  %425 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 8
  %426 = bitcast %struct.VP8Residual* %2 to i8*
  %427 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 6
  %428 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %7, i64 0, i32 5, i64 0
  %429 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 14, i64 8
  %430 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 14, i64 0
  %431 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 14, i64 1
  %432 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 14, i64 2
  %433 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 14, i64 3
  %434 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 17
  %435 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 18
  %436 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 0
  %437 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 1
  %438 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 14, i64 4
  %439 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 15, i64 4
  %440 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %7, i64 0, i32 7, i64 0, i64 0
  %441 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 14, i64 5
  %442 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %7, i64 0, i32 7, i64 1, i64 0
  %443 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 15, i64 5
  %444 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %7, i64 0, i32 7, i64 2, i64 0
  %445 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %7, i64 0, i32 7, i64 3, i64 0
  %446 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 14, i64 6
  %447 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 15, i64 6
  %448 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %7, i64 0, i32 7, i64 4, i64 0
  %449 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 14, i64 7
  %450 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %7, i64 0, i32 7, i64 5, i64 0
  %451 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 15, i64 7
  %452 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %7, i64 0, i32 7, i64 6, i64 0
  %453 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %7, i64 0, i32 7, i64 7, i64 0
  br label %454

454:                                              ; preds = %620, %417
  call void @llvm.lifetime.start.p0i8(i64 880, i8* nonnull %418) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %418, i8 -86, i64 880, i1 false)
  %455 = load i32, i32* %419, align 4
  %456 = icmp eq i32 %455, 0
  %457 = load i32, i32* %420, align 4
  call void @VP8IteratorImport(%struct.VP8EncIterator* nonnull %6, i8* null) #6
  %458 = call i32 @VP8Decimate(%struct.VP8EncIterator* nonnull %6, %struct.VP8ModeScore* nonnull %7, i32 %457) #6
  %459 = icmp eq i32 %458, 0
  %460 = or i1 %456, %459
  br i1 %460, label %461, label %586

461:                                              ; preds = %454
  %462 = load %struct.VP8BitWriter*, %struct.VP8BitWriter** %425, align 8
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %426) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %426, i8 -86, i64 48, i1 false) #6
  %463 = load i8*, i8** %422, align 8
  %464 = load i8, i8* %463, align 4
  %465 = and i8 %464, 3
  %466 = icmp eq i8 %465, 1
  %467 = lshr i8 %464, 5
  %468 = and i8 %467, 3
  %469 = load %struct.VP8Encoder*, %struct.VP8Encoder** %427, align 8
  call void @VP8IteratorNzToBytes(%struct.VP8EncIterator* nonnull %6) #6
  %470 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %462, i64 0, i32 3
  %471 = load i32, i32* %470, align 4
  %472 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %462, i64 0, i32 5
  %473 = load i64, i64* %472, align 8
  %474 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %462, i64 0, i32 2
  %475 = load i32, i32* %474, align 8
  %476 = sext i32 %475 to i64
  %477 = add i64 %473, %476
  br i1 %466, label %478, label %484

478:                                              ; preds = %461
  call void @VP8InitResidual(i32 0, i32 1, %struct.VP8Encoder* %469, %struct.VP8Residual* nonnull %2) #6
  %479 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %479(i16* %428, %struct.VP8Residual* nonnull %2) #6
  %480 = load i32, i32* %429, align 4
  %481 = load i32, i32* %424, align 8
  %482 = add nsw i32 %481, %480
  %483 = call fastcc i32 @PutCoeffs(%struct.VP8BitWriter* %462, i32 %482, %struct.VP8Residual* nonnull %2) #6
  store i32 %483, i32* %424, align 8
  store i32 %483, i32* %429, align 4
  call void @VP8InitResidual(i32 1, i32 0, %struct.VP8Encoder* %469, %struct.VP8Residual* nonnull %2) #6
  br label %485

484:                                              ; preds = %461
  call void @VP8InitResidual(i32 0, i32 3, %struct.VP8Encoder* %469, %struct.VP8Residual* nonnull %2) #6
  br label %485

485:                                              ; preds = %484, %478
  br label %486

486:                                              ; preds = %485, %486
  %487 = phi i64 [ %514, %486 ], [ 0, %485 ]
  %488 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 15, i64 %487
  %489 = shl i64 %487, 2
  %490 = load i32, i32* %430, align 4
  %491 = load i32, i32* %488, align 4
  %492 = add nsw i32 %491, %490
  %493 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  %494 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %7, i64 0, i32 6, i64 %489, i64 0
  call void %493(i16* %494, %struct.VP8Residual* nonnull %2) #6
  %495 = call fastcc i32 @PutCoeffs(%struct.VP8BitWriter* %462, i32 %492, %struct.VP8Residual* nonnull %2) #6
  store i32 %495, i32* %488, align 4
  store i32 %495, i32* %430, align 4
  %496 = load i32, i32* %431, align 4
  %497 = add nsw i32 %496, %495
  %498 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  %499 = or i64 %489, 1
  %500 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %7, i64 0, i32 6, i64 %499, i64 0
  call void %498(i16* %500, %struct.VP8Residual* nonnull %2) #6
  %501 = call fastcc i32 @PutCoeffs(%struct.VP8BitWriter* %462, i32 %497, %struct.VP8Residual* nonnull %2) #6
  store i32 %501, i32* %488, align 4
  store i32 %501, i32* %431, align 4
  %502 = load i32, i32* %432, align 4
  %503 = add nsw i32 %502, %501
  %504 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  %505 = or i64 %489, 2
  %506 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %7, i64 0, i32 6, i64 %505, i64 0
  call void %504(i16* %506, %struct.VP8Residual* nonnull %2) #6
  %507 = call fastcc i32 @PutCoeffs(%struct.VP8BitWriter* %462, i32 %503, %struct.VP8Residual* nonnull %2) #6
  store i32 %507, i32* %488, align 4
  store i32 %507, i32* %432, align 4
  %508 = load i32, i32* %433, align 4
  %509 = add nsw i32 %508, %507
  %510 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  %511 = or i64 %489, 3
  %512 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %7, i64 0, i32 6, i64 %511, i64 0
  call void %510(i16* %512, %struct.VP8Residual* nonnull %2) #6
  %513 = call fastcc i32 @PutCoeffs(%struct.VP8BitWriter* %462, i32 %509, %struct.VP8Residual* nonnull %2) #6
  store i32 %513, i32* %488, align 4
  store i32 %513, i32* %433, align 4
  %514 = add nuw nsw i64 %487, 1
  %515 = icmp eq i64 %514, 4
  br i1 %515, label %516, label %486

516:                                              ; preds = %486
  %517 = load i32, i32* %470, align 4
  %518 = load i64, i64* %472, align 8
  %519 = load i32, i32* %474, align 8
  %520 = sext i32 %519 to i64
  %521 = add i64 %518, %520
  call void @VP8InitResidual(i32 0, i32 2, %struct.VP8Encoder* %469, %struct.VP8Residual* nonnull %2) #6
  %522 = load i32, i32* %438, align 4
  %523 = load i32, i32* %439, align 8
  %524 = add nsw i32 %523, %522
  %525 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %525(i16* %440, %struct.VP8Residual* nonnull %2) #6
  %526 = call fastcc i32 @PutCoeffs(%struct.VP8BitWriter* %462, i32 %524, %struct.VP8Residual* nonnull %2) #6
  store i32 %526, i32* %439, align 8
  store i32 %526, i32* %438, align 4
  %527 = load i32, i32* %441, align 4
  %528 = add nsw i32 %527, %526
  %529 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %529(i16* %442, %struct.VP8Residual* nonnull %2) #6
  %530 = call fastcc i32 @PutCoeffs(%struct.VP8BitWriter* %462, i32 %528, %struct.VP8Residual* nonnull %2) #6
  store i32 %530, i32* %439, align 8
  store i32 %530, i32* %441, align 4
  %531 = load i32, i32* %438, align 4
  %532 = load i32, i32* %443, align 4
  %533 = add nsw i32 %532, %531
  %534 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %534(i16* %444, %struct.VP8Residual* nonnull %2) #6
  %535 = call fastcc i32 @PutCoeffs(%struct.VP8BitWriter* %462, i32 %533, %struct.VP8Residual* nonnull %2) #6
  store i32 %535, i32* %443, align 4
  store i32 %535, i32* %438, align 4
  %536 = load i32, i32* %441, align 4
  %537 = add nsw i32 %536, %535
  %538 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %538(i16* %445, %struct.VP8Residual* nonnull %2) #6
  %539 = call fastcc i32 @PutCoeffs(%struct.VP8BitWriter* %462, i32 %537, %struct.VP8Residual* nonnull %2) #6
  store i32 %539, i32* %443, align 4
  store i32 %539, i32* %441, align 4
  %540 = load i32, i32* %446, align 4
  %541 = load i32, i32* %447, align 8
  %542 = add nsw i32 %541, %540
  %543 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %543(i16* %448, %struct.VP8Residual* nonnull %2) #6
  %544 = call fastcc i32 @PutCoeffs(%struct.VP8BitWriter* %462, i32 %542, %struct.VP8Residual* nonnull %2) #6
  store i32 %544, i32* %447, align 8
  store i32 %544, i32* %446, align 4
  %545 = load i32, i32* %449, align 4
  %546 = add nsw i32 %545, %544
  %547 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %547(i16* %450, %struct.VP8Residual* nonnull %2) #6
  %548 = call fastcc i32 @PutCoeffs(%struct.VP8BitWriter* %462, i32 %546, %struct.VP8Residual* nonnull %2) #6
  store i32 %548, i32* %447, align 8
  store i32 %548, i32* %449, align 4
  %549 = load i32, i32* %446, align 4
  %550 = load i32, i32* %451, align 4
  %551 = add nsw i32 %550, %549
  %552 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %552(i16* %452, %struct.VP8Residual* nonnull %2) #6
  %553 = call fastcc i32 @PutCoeffs(%struct.VP8BitWriter* %462, i32 %551, %struct.VP8Residual* nonnull %2) #6
  store i32 %553, i32* %451, align 4
  store i32 %553, i32* %446, align 4
  %554 = load i32, i32* %449, align 4
  %555 = add nsw i32 %554, %553
  %556 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %556(i16* %453, %struct.VP8Residual* nonnull %2) #6
  %557 = call fastcc i32 @PutCoeffs(%struct.VP8BitWriter* %462, i32 %555, %struct.VP8Residual* nonnull %2) #6
  store i32 %557, i32* %451, align 4
  store i32 %557, i32* %449, align 4
  %558 = add nsw i32 %517, 8
  %559 = shl i64 %521, 3
  %560 = sext i32 %558 to i64
  %561 = add i64 %559, %560
  %562 = load i32, i32* %470, align 4
  %563 = add nsw i32 %562, 8
  %564 = sext i32 %563 to i64
  %565 = load i64, i64* %472, align 8
  %566 = load i32, i32* %474, align 8
  %567 = sext i32 %566 to i64
  %568 = add i64 %565, %567
  %569 = shl i64 %568, 3
  %570 = sub i32 -8, %471
  %571 = sext i32 %570 to i64
  %572 = mul i64 %477, -8
  %573 = add i64 %572, %571
  %574 = add i64 %573, %561
  store i64 %574, i64* %434, align 8
  %575 = sub i64 %564, %561
  %576 = add i64 %575, %569
  store i64 %576, i64* %435, align 8
  %577 = zext i8 %468 to i64
  %578 = zext i1 %466 to i64
  %579 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 16, i64 %577, i64 %578
  %580 = load i64, i64* %579, align 8
  %581 = add i64 %580, %574
  store i64 %581, i64* %579, align 8
  %582 = load i64, i64* %435, align 8
  %583 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %6, i64 0, i32 16, i64 %577, i64 2
  %584 = load i64, i64* %583, align 8
  %585 = add i64 %584, %582
  store i64 %585, i64* %583, align 8
  call void @VP8IteratorBytesToNz(%struct.VP8EncIterator* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %426) #6
  br label %596

586:                                              ; preds = %454
  %587 = load i8*, i8** %422, align 8
  %588 = load i8, i8* %587, align 4
  %589 = and i8 %588, 3
  %590 = icmp eq i8 %589, 1
  %591 = load i32*, i32** %423, align 8
  br i1 %590, label %592, label %593

592:                                              ; preds = %586
  store i32 0, i32* %591, align 4
  store i32 0, i32* %424, align 8
  br label %596

593:                                              ; preds = %586
  %594 = load i32, i32* %591, align 4
  %595 = and i32 %594, 16777216
  store i32 %595, i32* %591, align 4
  br label %596

596:                                              ; preds = %593, %592, %516
  %597 = load %struct.VP8Encoder*, %struct.VP8Encoder** %427, align 8
  %598 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %597, i64 0, i32 1
  %599 = load %struct.WebPPicture*, %struct.WebPPicture** %598, align 8
  %600 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %599, i64 0, i32 18
  %601 = load i8*, i8** %600, align 8
  %602 = icmp ne i8* %601, null
  %603 = load i32, i32* %436, align 8
  %604 = load i32, i32* %437, align 4
  %605 = or i32 %603, %604
  %606 = icmp eq i32 %605, 0
  %607 = and i1 %606, %602
  br i1 %607, label %608, label %615

608:                                              ; preds = %596
  %609 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %597, i64 0, i32 5
  %610 = load i32, i32* %609, align 8
  %611 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %597, i64 0, i32 6
  %612 = load i32, i32* %611, align 4
  %613 = mul nsw i32 %612, %610
  %614 = sext i32 %613 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %601, i8 0, i64 %614, i1 false) #6
  br label %615

615:                                              ; preds = %596, %608
  call void @VP8StoreFilterStats(%struct.VP8EncIterator* nonnull %6) #6
  call void @VP8IteratorExport(%struct.VP8EncIterator* nonnull %6) #6
  %616 = call i32 @VP8IteratorProgress(%struct.VP8EncIterator* nonnull %6, i32 20) #6
  call void @VP8IteratorSaveBoundary(%struct.VP8EncIterator* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 880, i8* nonnull %418) #6
  %617 = icmp eq i32 %616, 0
  br i1 %617, label %618, label %620

618:                                              ; preds = %615
  %619 = load %struct.VP8Encoder*, %struct.VP8Encoder** %427, align 8
  br label %646

620:                                              ; preds = %615
  %621 = call i32 @VP8IteratorNext(%struct.VP8EncIterator* nonnull %6) #6
  %622 = icmp eq i32 %621, 0
  br i1 %622, label %623, label %454

623:                                              ; preds = %620
  %624 = load %struct.VP8Encoder*, %struct.VP8Encoder** %427, align 8
  %625 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %624, i64 0, i32 8
  %626 = load i32, i32* %625, align 4
  %627 = icmp sgt i32 %626, 0
  br i1 %627, label %628, label %644

628:                                              ; preds = %623, %628
  %629 = phi i64 [ %638, %628 ], [ 0, %623 ]
  %630 = phi i32 [ %637, %628 ], [ %616, %623 ]
  %631 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %624, i64 0, i32 10, i64 %629
  %632 = call i8* @VP8BitWriterFinish(%struct.VP8BitWriter* %631) #6
  %633 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %624, i64 0, i32 10, i64 %629, i32 7
  %634 = load i32, i32* %633, align 8
  %635 = icmp eq i32 %634, 0
  %636 = zext i1 %635 to i32
  %637 = and i32 %630, %636
  %638 = add nuw nsw i64 %629, 1
  %639 = load i32, i32* %625, align 4
  %640 = sext i32 %639 to i64
  %641 = icmp slt i64 %638, %640
  br i1 %641, label %628, label %642

642:                                              ; preds = %628
  %643 = icmp eq i32 %637, 0
  br i1 %643, label %646, label %644

644:                                              ; preds = %642, %623
  %645 = phi i32 [ 1, %642 ], [ %616, %623 ]
  call void @VP8AdjustFilterStrength(%struct.VP8EncIterator* nonnull %6) #6
  br label %648

646:                                              ; preds = %618, %642
  %647 = phi %struct.VP8Encoder* [ %619, %618 ], [ %624, %642 ]
  call void @VP8EncFreeBitWriters(%struct.VP8Encoder* %647) #6
  br label %648

648:                                              ; preds = %646, %644, %37
  %649 = phi i32 [ 0, %37 ], [ 0, %646 ], [ %645, %644 ]
  call void @llvm.lifetime.end.p0i8(i64 3848, i8* nonnull %8) #6
  ret i32 %649
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @VP8IteratorInit(%struct.VP8Encoder*, %struct.VP8EncIterator*) local_unnamed_addr #2

declare void @VP8InitFilter(%struct.VP8EncIterator*) local_unnamed_addr #2

declare void @VP8IteratorImport(%struct.VP8EncIterator*, i8*) local_unnamed_addr #2

declare i32 @VP8Decimate(%struct.VP8EncIterator*, %struct.VP8ModeScore*, i32) local_unnamed_addr #2

declare void @VP8StoreFilterStats(%struct.VP8EncIterator*) local_unnamed_addr #2

declare void @VP8IteratorExport(%struct.VP8EncIterator*) local_unnamed_addr #2

declare i32 @VP8IteratorProgress(%struct.VP8EncIterator*, i32) local_unnamed_addr #2

declare void @VP8IteratorSaveBoundary(%struct.VP8EncIterator*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @VP8IteratorNext(%struct.VP8EncIterator*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8EncTokenLoop(%struct.VP8Encoder*) local_unnamed_addr #0 {
  %2 = alloca %struct.VP8Residual, align 8
  %3 = alloca %struct.VP8EncIterator, align 8
  %4 = alloca %struct.VP8ModeScore, align 8
  %5 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 5
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 6
  %8 = load i32, i32* %7, align 4
  %9 = mul i32 %8, %6
  %10 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 0
  %11 = load %struct.WebPConfig*, %struct.WebPConfig** %10, align 8
  %12 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %11, i64 0, i32 15
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 37
  %15 = load i32, i32* %14, align 4
  %16 = bitcast %struct.VP8EncIterator* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3848, i8* nonnull %16) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 3848, i1 false)
  %17 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26
  %18 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 33
  %19 = load i32, i32* %18, align 4
  %20 = mul nsw i32 %9, 384
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %11, i64 0, i32 4
  %23 = load i32, i32* %22, align 4
  %24 = icmp ne i32 %23, 0
  %25 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %11, i64 0, i32 5
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %11, i64 0, i32 27
  %28 = load i32, i32* %27, align 4
  %29 = sitofp i32 %28 to float
  %30 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %11, i64 0, i32 28
  %31 = load i32, i32* %30, align 4
  %32 = sitofp i32 %31 to float
  %33 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %11, i64 0, i32 1
  %34 = load float, float* %33, align 4
  %35 = fcmp olt float %34, %29
  %36 = fcmp ogt float %34, %32
  %37 = select i1 %36, float %32, float %34
  %38 = select i1 %35, float %29, float %37
  br i1 %24, label %39, label %42

39:                                               ; preds = %1
  %40 = sext i32 %23 to i64
  %41 = uitofp i64 %40 to double
  br label %46

42:                                               ; preds = %1
  %43 = fpext float %26 to double
  %44 = fcmp ogt float %26, 0.000000e+00
  %45 = select i1 %44, double %43, double 4.000000e+01
  br label %46

46:                                               ; preds = %39, %42
  %47 = phi double [ %41, %39 ], [ %45, %42 ]
  %48 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 18
  %49 = load i32, i32* %48, align 8
  %50 = ashr i32 %49, 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [8 x i8], [8 x i8]* @kAverageBytesPerMB, i64 0, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = mul i32 %9, %54
  %56 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 8
  %57 = load i32, i32* %56, align 4
  %58 = sdiv i32 %55, %57
  %59 = sext i32 %58 to i64
  %60 = icmp sgt i32 %57, 0
  br i1 %60, label %61, label %75

61:                                               ; preds = %46, %66
  %62 = phi i64 [ %67, %66 ], [ 0, %46 ]
  %63 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 10, i64 %62
  %64 = tail call i32 @VP8BitWriterInit(%struct.VP8BitWriter* %63, i64 %59) #6
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %71, label %66

66:                                               ; preds = %61
  %67 = add nuw nsw i64 %62, 1
  %68 = load i32, i32* %56, align 4
  %69 = sext i32 %68 to i64
  %70 = icmp slt i64 %67, %69
  br i1 %70, label %61, label %75

71:                                               ; preds = %61
  tail call void @VP8EncFreeBitWriters(%struct.VP8Encoder* %0) #6
  %72 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 1
  %73 = load %struct.WebPPicture*, %struct.WebPPicture** %72, align 8
  %74 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* %73, i32 1) #6
  br label %383

75:                                               ; preds = %66, %46
  %76 = ashr i32 %9, 3
  %77 = icmp slt i32 %9, 768
  %78 = select i1 %77, i32 96, i32 %76
  %79 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 34
  %80 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 3, i64 0
  %81 = bitcast [8 x [3 x [11 x i32]]]* %80 to i8*
  %82 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 11
  %83 = bitcast %struct.VP8ModeScore* %4 to i8*
  %84 = bitcast %struct.VP8Residual* %2 to i8*
  %85 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 6
  %86 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 7
  %87 = bitcast %struct.VP8MBInfo** %86 to i8**
  %88 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 14, i64 8
  %89 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 15, i64 8
  %90 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 5, i64 0
  %91 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 14, i64 0
  %92 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 14, i64 1
  %93 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 14, i64 2
  %94 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 14, i64 3
  %95 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 11, i32 5
  %96 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 2
  %97 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 0
  %98 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 0
  %99 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 1
  %100 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 3, i32 2
  %101 = icmp ne i32 %9, 0
  %102 = uitofp i64 %21 to double
  %103 = fmul double %102, 6.502500e+04
  %104 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 2, i64 0, i64 0, i64 0, i64 0
  %105 = icmp eq i32 %15, 0
  %106 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 14, i64 4
  %107 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 15, i64 4
  %108 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 7, i64 0, i64 0
  %109 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 14, i64 5
  %110 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 7, i64 1, i64 0
  %111 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 15, i64 5
  %112 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 7, i64 2, i64 0
  %113 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 7, i64 3, i64 0
  %114 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 14, i64 6
  %115 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 15, i64 6
  %116 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 7, i64 4, i64 0
  %117 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 14, i64 7
  %118 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 7, i64 5, i64 0
  %119 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 15, i64 7
  %120 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 7, i64 6, i64 0
  %121 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 7, i64 7, i64 0
  %122 = icmp sgt i32 %13, 0
  br i1 %122, label %123, label %341

123:                                              ; preds = %75, %332
  %124 = phi i32 [ %339, %332 ], [ %13, %75 ]
  %125 = phi double [ %333, %332 ], [ 0.000000e+00, %75 ]
  %126 = phi float [ %334, %332 ], [ %38, %75 ]
  %127 = phi float [ %335, %332 ], [ %38, %75 ]
  %128 = phi float [ %336, %332 ], [ %38, %75 ]
  %129 = phi float [ %337, %332 ], [ 1.000000e+01, %75 ]
  %130 = phi i32 [ %338, %332 ], [ 1, %75 ]
  %131 = add nsw i32 %124, -1
  %132 = call float @llvm.fabs.f32(float %129)
  %133 = fpext float %132 to double
  %134 = fcmp ole double %133, 4.000000e-01
  %135 = icmp eq i32 %131, 0
  %136 = or i1 %134, %135
  br i1 %136, label %140, label %137

137:                                              ; preds = %123
  %138 = load i32, i32* %79, align 8
  %139 = icmp eq i32 %138, 0
  br label %140

140:                                              ; preds = %137, %123
  %141 = phi i1 [ true, %123 ], [ %139, %137 ]
  call void @VP8IteratorInit(%struct.VP8Encoder* %0, %struct.VP8EncIterator* nonnull %3) #6
  call fastcc void @SetLoopParams(%struct.VP8Encoder* %0, float %127)
  br i1 %141, label %142, label %143

142:                                              ; preds = %140
  call void @llvm.memset.p0i8.i64(i8* align 4 %81, i8 0, i64 4224, i1 false) #6
  call void @VP8InitFilter(%struct.VP8EncIterator* nonnull %3) #6
  br label %143

143:                                              ; preds = %142, %140
  call void @VP8TBufferClear(%struct.VP8TBuffer* %82) #6
  br label %144

144:                                              ; preds = %270, %143
  %145 = phi i64 [ 0, %143 ], [ %243, %270 ]
  %146 = phi i64 [ 0, %143 ], [ %245, %270 ]
  %147 = phi i32 [ %78, %143 ], [ %153, %270 ]
  call void @llvm.lifetime.start.p0i8(i64 880, i8* nonnull %83) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %83, i8 -86, i64 880, i1 false)
  call void @VP8IteratorImport(%struct.VP8EncIterator* nonnull %3, i8* null) #6
  %148 = add nsw i32 %147, -1
  %149 = icmp slt i32 %147, 1
  br i1 %149, label %150, label %152

150:                                              ; preds = %144
  %151 = call fastcc i32 @FinalizeTokenProbas(%struct.VP8EncProba* %17)
  call void @VP8CalculateLevelCosts(%struct.VP8EncProba* %17) #6
  br label %152

152:                                              ; preds = %150, %144
  %153 = phi i32 [ %78, %150 ], [ %148, %144 ]
  %154 = call i32 @VP8Decimate(%struct.VP8EncIterator* nonnull %3, %struct.VP8ModeScore* nonnull %4, i32 %19) #6
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %84) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %84, i8 -86, i64 48, i1 false) #6
  %155 = load %struct.VP8Encoder*, %struct.VP8Encoder** %85, align 8
  call void @VP8IteratorNzToBytes(%struct.VP8EncIterator* nonnull %3) #6
  %156 = load i8*, i8** %87, align 8
  %157 = load i8, i8* %156, align 4
  %158 = and i8 %157, 3
  %159 = icmp eq i8 %158, 1
  br i1 %159, label %160, label %166

160:                                              ; preds = %152
  %161 = load i32, i32* %88, align 4
  %162 = load i32, i32* %89, align 8
  %163 = add nsw i32 %162, %161
  call void @VP8InitResidual(i32 0, i32 1, %struct.VP8Encoder* %155, %struct.VP8Residual* nonnull %2) #6
  %164 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %164(i16* %90, %struct.VP8Residual* nonnull %2) #6
  %165 = call i32 @VP8RecordCoeffTokens(i32 %163, %struct.VP8Residual* nonnull %2, %struct.VP8TBuffer* %82) #6
  store i32 %165, i32* %89, align 8
  store i32 %165, i32* %88, align 4
  call void @VP8InitResidual(i32 1, i32 0, %struct.VP8Encoder* %155, %struct.VP8Residual* nonnull %2) #6
  br label %167

166:                                              ; preds = %152
  call void @VP8InitResidual(i32 0, i32 3, %struct.VP8Encoder* %155, %struct.VP8Residual* nonnull %2) #6
  br label %167

167:                                              ; preds = %166, %160
  br label %168

168:                                              ; preds = %167, %168
  %169 = phi i64 [ %196, %168 ], [ 0, %167 ]
  %170 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 15, i64 %169
  %171 = shl i64 %169, 2
  %172 = load i32, i32* %91, align 4
  %173 = load i32, i32* %170, align 4
  %174 = add nsw i32 %173, %172
  %175 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  %176 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 6, i64 %171, i64 0
  call void %175(i16* %176, %struct.VP8Residual* nonnull %2) #6
  %177 = call i32 @VP8RecordCoeffTokens(i32 %174, %struct.VP8Residual* nonnull %2, %struct.VP8TBuffer* %82) #6
  store i32 %177, i32* %170, align 4
  store i32 %177, i32* %91, align 4
  %178 = load i32, i32* %92, align 4
  %179 = add nsw i32 %178, %177
  %180 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  %181 = or i64 %171, 1
  %182 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 6, i64 %181, i64 0
  call void %180(i16* %182, %struct.VP8Residual* nonnull %2) #6
  %183 = call i32 @VP8RecordCoeffTokens(i32 %179, %struct.VP8Residual* nonnull %2, %struct.VP8TBuffer* %82) #6
  store i32 %183, i32* %170, align 4
  store i32 %183, i32* %92, align 4
  %184 = load i32, i32* %93, align 4
  %185 = add nsw i32 %184, %183
  %186 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  %187 = or i64 %171, 2
  %188 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 6, i64 %187, i64 0
  call void %186(i16* %188, %struct.VP8Residual* nonnull %2) #6
  %189 = call i32 @VP8RecordCoeffTokens(i32 %185, %struct.VP8Residual* nonnull %2, %struct.VP8TBuffer* %82) #6
  store i32 %189, i32* %170, align 4
  store i32 %189, i32* %93, align 4
  %190 = load i32, i32* %94, align 4
  %191 = add nsw i32 %190, %189
  %192 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  %193 = or i64 %171, 3
  %194 = getelementptr inbounds %struct.VP8ModeScore, %struct.VP8ModeScore* %4, i64 0, i32 6, i64 %193, i64 0
  call void %192(i16* %194, %struct.VP8Residual* nonnull %2) #6
  %195 = call i32 @VP8RecordCoeffTokens(i32 %191, %struct.VP8Residual* nonnull %2, %struct.VP8TBuffer* %82) #6
  store i32 %195, i32* %170, align 4
  store i32 %195, i32* %94, align 4
  %196 = add nuw nsw i64 %169, 1
  %197 = icmp eq i64 %196, 4
  br i1 %197, label %198, label %168

198:                                              ; preds = %168
  call void @VP8InitResidual(i32 0, i32 2, %struct.VP8Encoder* %155, %struct.VP8Residual* nonnull %2) #6
  %199 = load i32, i32* %106, align 4
  %200 = load i32, i32* %107, align 8
  %201 = add nsw i32 %200, %199
  %202 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %202(i16* %108, %struct.VP8Residual* nonnull %2) #6
  %203 = call i32 @VP8RecordCoeffTokens(i32 %201, %struct.VP8Residual* nonnull %2, %struct.VP8TBuffer* %82) #6
  store i32 %203, i32* %107, align 8
  store i32 %203, i32* %106, align 4
  %204 = load i32, i32* %109, align 4
  %205 = add nsw i32 %204, %203
  %206 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %206(i16* %110, %struct.VP8Residual* nonnull %2) #6
  %207 = call i32 @VP8RecordCoeffTokens(i32 %205, %struct.VP8Residual* nonnull %2, %struct.VP8TBuffer* %82) #6
  store i32 %207, i32* %107, align 8
  store i32 %207, i32* %109, align 4
  %208 = load i32, i32* %106, align 4
  %209 = load i32, i32* %111, align 4
  %210 = add nsw i32 %209, %208
  %211 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %211(i16* %112, %struct.VP8Residual* nonnull %2) #6
  %212 = call i32 @VP8RecordCoeffTokens(i32 %210, %struct.VP8Residual* nonnull %2, %struct.VP8TBuffer* %82) #6
  store i32 %212, i32* %111, align 4
  store i32 %212, i32* %106, align 4
  %213 = load i32, i32* %109, align 4
  %214 = add nsw i32 %213, %212
  %215 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %215(i16* %113, %struct.VP8Residual* nonnull %2) #6
  %216 = call i32 @VP8RecordCoeffTokens(i32 %214, %struct.VP8Residual* nonnull %2, %struct.VP8TBuffer* %82) #6
  store i32 %216, i32* %111, align 4
  store i32 %216, i32* %109, align 4
  %217 = load i32, i32* %114, align 4
  %218 = load i32, i32* %115, align 8
  %219 = add nsw i32 %218, %217
  %220 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %220(i16* %116, %struct.VP8Residual* nonnull %2) #6
  %221 = call i32 @VP8RecordCoeffTokens(i32 %219, %struct.VP8Residual* nonnull %2, %struct.VP8TBuffer* %82) #6
  store i32 %221, i32* %115, align 8
  store i32 %221, i32* %114, align 4
  %222 = load i32, i32* %117, align 4
  %223 = add nsw i32 %222, %221
  %224 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %224(i16* %118, %struct.VP8Residual* nonnull %2) #6
  %225 = call i32 @VP8RecordCoeffTokens(i32 %223, %struct.VP8Residual* nonnull %2, %struct.VP8TBuffer* %82) #6
  store i32 %225, i32* %115, align 8
  store i32 %225, i32* %117, align 4
  %226 = load i32, i32* %114, align 4
  %227 = load i32, i32* %119, align 4
  %228 = add nsw i32 %227, %226
  %229 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %229(i16* %120, %struct.VP8Residual* nonnull %2) #6
  %230 = call i32 @VP8RecordCoeffTokens(i32 %228, %struct.VP8Residual* nonnull %2, %struct.VP8TBuffer* %82) #6
  store i32 %230, i32* %119, align 4
  store i32 %230, i32* %114, align 4
  %231 = load i32, i32* %117, align 4
  %232 = add nsw i32 %231, %230
  %233 = load void (i16*, %struct.VP8Residual*)*, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  call void %233(i16* %121, %struct.VP8Residual* nonnull %2) #6
  %234 = call i32 @VP8RecordCoeffTokens(i32 %232, %struct.VP8Residual* nonnull %2, %struct.VP8TBuffer* %82) #6
  store i32 %234, i32* %119, align 4
  store i32 %234, i32* %117, align 4
  call void @VP8IteratorBytesToNz(%struct.VP8EncIterator* nonnull %3) #6
  %235 = load i32, i32* %95, align 8
  %236 = icmp eq i32 %235, 0
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %84) #6
  br i1 %236, label %241, label %237

237:                                              ; preds = %198
  %238 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 1
  %239 = load %struct.WebPPicture*, %struct.WebPPicture** %238, align 8
  %240 = call i32 @WebPEncodingSetError(%struct.WebPPicture* %239, i32 1) #6
  call void @llvm.lifetime.end.p0i8(i64 880, i8* nonnull %83) #6
  br label %348

241:                                              ; preds = %198
  %242 = load i64, i64* %96, align 8
  %243 = add i64 %242, %145
  %244 = load i64, i64* %97, align 8
  %245 = add i64 %244, %146
  br i1 %141, label %246, label %267

246:                                              ; preds = %241
  %247 = load %struct.VP8Encoder*, %struct.VP8Encoder** %85, align 8
  %248 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %247, i64 0, i32 1
  %249 = load %struct.WebPPicture*, %struct.WebPPicture** %248, align 8
  %250 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %249, i64 0, i32 18
  %251 = load i8*, i8** %250, align 8
  %252 = icmp ne i8* %251, null
  %253 = load i32, i32* %98, align 8
  %254 = load i32, i32* %99, align 4
  %255 = or i32 %253, %254
  %256 = icmp eq i32 %255, 0
  %257 = and i1 %256, %252
  br i1 %257, label %258, label %265

258:                                              ; preds = %246
  %259 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %247, i64 0, i32 5
  %260 = load i32, i32* %259, align 8
  %261 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %247, i64 0, i32 6
  %262 = load i32, i32* %261, align 4
  %263 = mul nsw i32 %262, %260
  %264 = sext i32 %263 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %251, i8 0, i64 %264, i1 false) #6
  br label %265

265:                                              ; preds = %246, %258
  call void @VP8StoreFilterStats(%struct.VP8EncIterator* nonnull %3) #6
  call void @VP8IteratorExport(%struct.VP8EncIterator* nonnull %3) #6
  %266 = call i32 @VP8IteratorProgress(%struct.VP8EncIterator* nonnull %3, i32 20) #6
  br label %267

267:                                              ; preds = %241, %265
  %268 = phi i32 [ %266, %265 ], [ 1, %241 ]
  call void @VP8IteratorSaveBoundary(%struct.VP8EncIterator* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 880, i8* nonnull %83) #6
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %348, label %270

270:                                              ; preds = %267
  %271 = call i32 @VP8IteratorNext(%struct.VP8EncIterator* nonnull %3) #6
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %273, label %144

273:                                              ; preds = %270
  %274 = load i32, i32* %100, align 8
  %275 = sext i32 %274 to i64
  %276 = add i64 %243, %275
  br i1 %24, label %277, label %287

277:                                              ; preds = %273
  %278 = call fastcc i32 @FinalizeTokenProbas(%struct.VP8EncProba* %17)
  %279 = sext i32 %278 to i64
  %280 = call i64 @VP8EstimateTokenSize(%struct.VP8TBuffer* %82, i8* %104) #6
  %281 = add i64 %276, 1024
  %282 = add i64 %281, %279
  %283 = add i64 %282, %280
  %284 = lshr i64 %283, 11
  %285 = add nuw nsw i64 %284, 30
  %286 = uitofp i64 %285 to double
  br label %295

287:                                              ; preds = %273
  %288 = icmp ne i64 %245, 0
  %289 = and i1 %101, %288
  br i1 %289, label %290, label %295

290:                                              ; preds = %287
  %291 = uitofp i64 %245 to double
  %292 = fdiv double %103, %291
  %293 = call double @log10(double %292) #6
  %294 = fmul double %293, 1.000000e+01
  br label %295

295:                                              ; preds = %290, %287, %277
  %296 = phi double [ %286, %277 ], [ %294, %290 ], [ 9.900000e+01, %287 ]
  %297 = load i32, i32* %79, align 8
  %298 = icmp sgt i32 %297, 0
  %299 = icmp ugt i64 %276, 1069547520
  %300 = and i1 %299, %298
  br i1 %300, label %301, label %303

301:                                              ; preds = %295
  %302 = lshr i32 %297, 1
  store i32 %302, i32* %79, align 8
  br label %332

303:                                              ; preds = %295
  br i1 %141, label %341, label %304

304:                                              ; preds = %303
  br i1 %105, label %332, label %305

305:                                              ; preds = %304
  %306 = icmp eq i32 %130, 0
  br i1 %306, label %311, label %307

307:                                              ; preds = %305
  %308 = fcmp ogt double %296, %47
  %309 = fsub float -0.000000e+00, %129
  %310 = select i1 %308, float %309, float %129
  br label %321

311:                                              ; preds = %305
  %312 = fcmp une double %296, %125
  br i1 %312, label %313, label %321

313:                                              ; preds = %311
  %314 = fsub double %47, %296
  %315 = fsub double %125, %296
  %316 = fdiv double %314, %315
  %317 = fsub float %126, %127
  %318 = fpext float %317 to double
  %319 = fmul double %316, %318
  %320 = fptrunc double %319 to float
  br label %321

321:                                              ; preds = %307, %311, %313
  %322 = phi float [ %310, %307 ], [ %320, %313 ], [ 0.000000e+00, %311 ]
  %323 = fcmp olt float %322, -3.000000e+01
  %324 = fcmp ogt float %322, 3.000000e+01
  %325 = select i1 %324, float 3.000000e+01, float %322
  %326 = select i1 %323, float -3.000000e+01, float %325
  %327 = fadd float %127, %326
  %328 = fcmp olt float %327, %29
  %329 = fcmp ogt float %327, %32
  %330 = select i1 %329, float %32, float %327
  %331 = select i1 %328, float %29, float %330
  br label %332

332:                                              ; preds = %301, %321, %304
  %333 = phi double [ %125, %304 ], [ %296, %321 ], [ %125, %301 ]
  %334 = phi float [ %126, %304 ], [ %128, %321 ], [ %126, %301 ]
  %335 = phi float [ %127, %304 ], [ %331, %321 ], [ %127, %301 ]
  %336 = phi float [ %128, %304 ], [ %331, %321 ], [ %128, %301 ]
  %337 = phi float [ %129, %304 ], [ %326, %321 ], [ %129, %301 ]
  %338 = phi i32 [ %130, %304 ], [ 0, %321 ], [ %130, %301 ]
  %339 = phi i32 [ %131, %304 ], [ %131, %321 ], [ %124, %301 ]
  %340 = icmp sgt i32 %339, 0
  br i1 %340, label %123, label %341

341:                                              ; preds = %303, %332, %75
  br i1 %24, label %344, label %342

342:                                              ; preds = %341
  %343 = call fastcc i32 @FinalizeTokenProbas(%struct.VP8EncProba* %17)
  br label %344

344:                                              ; preds = %341, %342
  %345 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 10, i64 0
  %346 = call i32 @VP8EmitTokens(%struct.VP8TBuffer* %82, %struct.VP8BitWriter* %345, i8* %104, i32 1) #6
  %347 = icmp eq i32 %346, 0
  br i1 %347, label %348, label %351

348:                                              ; preds = %267, %344, %237
  %349 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %3, i64 0, i32 6
  %350 = load %struct.VP8Encoder*, %struct.VP8Encoder** %349, align 8
  br label %381

351:                                              ; preds = %344
  %352 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 1
  %353 = load %struct.WebPPicture*, %struct.WebPPicture** %352, align 8
  %354 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 12
  %355 = load i32, i32* %354, align 8
  %356 = add nsw i32 %355, 20
  %357 = call i32 @WebPReportProgress(%struct.WebPPicture* %353, i32 %356, i32* %354) #6
  %358 = icmp eq i32 %357, 0
  %359 = load %struct.VP8Encoder*, %struct.VP8Encoder** %85, align 8
  br i1 %358, label %381, label %360

360:                                              ; preds = %351
  %361 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %359, i64 0, i32 8
  %362 = load i32, i32* %361, align 4
  %363 = icmp sgt i32 %362, 0
  br i1 %363, label %364, label %380

364:                                              ; preds = %360, %364
  %365 = phi i64 [ %374, %364 ], [ 0, %360 ]
  %366 = phi i32 [ %373, %364 ], [ 1, %360 ]
  %367 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %359, i64 0, i32 10, i64 %365
  %368 = call i8* @VP8BitWriterFinish(%struct.VP8BitWriter* %367) #6
  %369 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %359, i64 0, i32 10, i64 %365, i32 7
  %370 = load i32, i32* %369, align 8
  %371 = icmp eq i32 %370, 0
  %372 = zext i1 %371 to i32
  %373 = and i32 %366, %372
  %374 = add nuw nsw i64 %365, 1
  %375 = load i32, i32* %361, align 4
  %376 = sext i32 %375 to i64
  %377 = icmp slt i64 %374, %376
  br i1 %377, label %364, label %378

378:                                              ; preds = %364
  %379 = icmp eq i32 %373, 0
  br i1 %379, label %381, label %380

380:                                              ; preds = %378, %360
  call void @VP8AdjustFilterStrength(%struct.VP8EncIterator* nonnull %3) #6
  br label %383

381:                                              ; preds = %348, %378, %351
  %382 = phi %struct.VP8Encoder* [ %350, %348 ], [ %359, %378 ], [ %359, %351 ]
  call void @VP8EncFreeBitWriters(%struct.VP8Encoder* %382) #6
  br label %383

383:                                              ; preds = %381, %380, %71
  %384 = phi i32 [ 0, %71 ], [ 0, %381 ], [ 1, %380 ]
  call void @llvm.lifetime.end.p0i8(i64 3848, i8* nonnull %16) #6
  ret i32 %384
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @SetLoopParams(%struct.VP8Encoder*, float) unnamed_addr #0 {
  %3 = alloca [4 x i32], align 16
  %4 = fcmp olt float %1, 0.000000e+00
  %5 = fcmp ogt float %1, 1.000000e+02
  %6 = select i1 %5, float 1.000000e+02, float %1
  %7 = select i1 %4, float 0.000000e+00, float %6
  tail call void @VP8SetSegmentParams(%struct.VP8Encoder* %0, float %7) #6
  %8 = bitcast [4 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 16, i1 false) #6
  %9 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 5
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 6
  %12 = load i32, i32* %11, align 4
  %13 = mul nsw i32 %12, %10
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %58

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 39
  %17 = load %struct.VP8MBInfo*, %struct.VP8MBInfo** %16, align 8
  %18 = sext i32 %13 to i64
  %19 = and i64 %18, 1
  %20 = icmp eq i32 %13, 1
  br i1 %20, label %46, label %21

21:                                               ; preds = %15
  %22 = sub nsw i64 %18, %19
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 0, %21 ], [ %43, %23 ]
  %25 = phi i64 [ %22, %21 ], [ %44, %23 ]
  %26 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %17, i64 %24, i32 0
  %27 = load i8, i8* %26, align 4
  %28 = lshr i8 %27, 5
  %29 = and i8 %28, 3
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %31, align 4
  %34 = or i64 %24, 1
  %35 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %17, i64 %34, i32 0
  %36 = load i8, i8* %35, align 4
  %37 = lshr i8 %36, 5
  %38 = and i8 %37, 3
  %39 = zext i8 %38 to i64
  %40 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %40, align 4
  %43 = add nuw nsw i64 %24, 2
  %44 = add i64 %25, -2
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %23

46:                                               ; preds = %23, %15
  %47 = phi i64 [ 0, %15 ], [ %43, %23 ]
  %48 = icmp eq i64 %19, 0
  br i1 %48, label %58, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %17, i64 %47, i32 0
  %51 = load i8, i8* %50, align 4
  %52 = lshr i8 %51, 5
  %53 = and i8 %52, 3
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %55, align 4
  br label %58

58:                                               ; preds = %49, %46, %2
  %59 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 3, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = icmp sgt i32 %60, 1
  br i1 %61, label %62, label %175

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 0, i64 0
  %64 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 0
  %65 = load i32, i32* %64, align 16
  %66 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %67 = load i32, i32* %66, align 4
  %68 = add nsw i32 %67, %65
  %69 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 2
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %72 = load i32, i32* %71, align 4
  %73 = add nsw i32 %72, %70
  %74 = add nsw i32 %73, %68
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %82, label %76

76:                                               ; preds = %62
  %77 = mul nsw i32 %68, 255
  %78 = sdiv i32 %74, 2
  %79 = add nsw i32 %78, %77
  %80 = sdiv i32 %79, %74
  %81 = trunc i32 %80 to i8
  br label %82

82:                                               ; preds = %76, %62
  %83 = phi i8 [ %81, %76 ], [ -1, %62 ]
  store i8 %83, i8* %63, align 1
  %84 = icmp eq i32 %68, 0
  br i1 %84, label %91, label %85

85:                                               ; preds = %82
  %86 = mul nsw i32 %65, 255
  %87 = sdiv i32 %68, 2
  %88 = add nsw i32 %87, %86
  %89 = sdiv i32 %88, %68
  %90 = trunc i32 %89 to i8
  br label %91

91:                                               ; preds = %85, %82
  %92 = phi i8 [ %90, %85 ], [ -1, %82 ]
  %93 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 0, i64 1
  store i8 %92, i8* %93, align 1
  %94 = icmp eq i32 %73, 0
  br i1 %94, label %100, label %95

95:                                               ; preds = %91
  %96 = mul nsw i32 %70, 255
  %97 = sdiv i32 %73, 2
  %98 = add nsw i32 %97, %96
  %99 = sdiv i32 %98, %73
  br label %100

100:                                              ; preds = %95, %91
  %101 = phi i32 [ %99, %95 ], [ 255, %91 ]
  %102 = trunc i32 %101 to i8
  %103 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 0, i64 2
  store i8 %102, i8* %103, align 1
  %104 = and i8 %92, %83
  %105 = icmp eq i8 %104, -1
  br i1 %105, label %108, label %106

106:                                              ; preds = %100
  %107 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 3, i32 1
  store i32 1, i32* %107, align 4
  br label %133

108:                                              ; preds = %100
  %109 = and i32 %101, 255
  %110 = icmp ne i32 %109, 255
  %111 = zext i1 %110 to i32
  %112 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 3, i32 1
  store i32 %111, i32* %112, align 4
  %113 = xor i1 %110, true
  %114 = and i1 %14, %113
  br i1 %114, label %115, label %133

115:                                              ; preds = %108
  %116 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 39
  br label %117

117:                                              ; preds = %117, %115
  %118 = phi i64 [ 0, %115 ], [ %123, %117 ]
  %119 = load %struct.VP8MBInfo*, %struct.VP8MBInfo** %116, align 8
  %120 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %119, i64 %118, i32 0
  %121 = load i8, i8* %120, align 4
  %122 = and i8 %121, -97
  store i8 %122, i8* %120, align 4
  %123 = add nuw nsw i64 %118, 1
  %124 = load i32, i32* %9, align 8
  %125 = load i32, i32* %11, align 4
  %126 = mul nsw i32 %125, %124
  %127 = sext i32 %126 to i64
  %128 = icmp slt i64 %123, %127
  br i1 %128, label %117, label %129

129:                                              ; preds = %117
  %130 = load i8, i8* %63, align 1
  %131 = load i8, i8* %93, align 1
  %132 = load i8, i8* %103, align 1
  br label %133

133:                                              ; preds = %129, %108, %106
  %134 = phi i8 [ %132, %129 ], [ %102, %108 ], [ %102, %106 ]
  %135 = phi i8 [ %131, %129 ], [ %92, %108 ], [ %92, %106 ]
  %136 = phi i8 [ %130, %129 ], [ %83, %108 ], [ %83, %106 ]
  %137 = zext i8 %136 to i64
  %138 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %137
  %139 = load i16, i16* %138, align 2
  %140 = zext i16 %139 to i32
  %141 = zext i8 %135 to i64
  %142 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %141
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = add nuw nsw i32 %144, %140
  %146 = mul nsw i32 %145, %65
  %147 = xor i8 %135, -1
  %148 = zext i8 %147 to i64
  %149 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %148
  %150 = load i16, i16* %149, align 2
  %151 = zext i16 %150 to i32
  %152 = add nuw nsw i32 %151, %140
  %153 = mul nsw i32 %152, %67
  %154 = add nsw i32 %153, %146
  %155 = xor i8 %136, -1
  %156 = zext i8 %155 to i64
  %157 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %156
  %158 = load i16, i16* %157, align 2
  %159 = zext i16 %158 to i32
  %160 = zext i8 %134 to i64
  %161 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %160
  %162 = load i16, i16* %161, align 2
  %163 = zext i16 %162 to i32
  %164 = add nuw nsw i32 %163, %159
  %165 = mul nsw i32 %164, %70
  %166 = add nsw i32 %154, %165
  %167 = xor i8 %134, -1
  %168 = zext i8 %167 to i64
  %169 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %168
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = add nuw nsw i32 %171, %159
  %173 = mul nsw i32 %172, %72
  %174 = add nsw i32 %166, %173
  br label %177

175:                                              ; preds = %58
  %176 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 3, i32 1
  store i32 0, i32* %176, align 4
  br label %177

177:                                              ; preds = %133, %175
  %178 = phi i32 [ %174, %133 ], [ 0, %175 ]
  %179 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 3, i32 2
  store i32 %178, i32* %179, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #6
  %180 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26
  tail call void @VP8CalculateLevelCosts(%struct.VP8EncProba* %180) #6
  %181 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 8
  store i32 0, i32* %181, align 8
  ret void
}

declare void @VP8TBufferClear(%struct.VP8TBuffer*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @FinalizeTokenProbas(%struct.VP8EncProba* nocapture) unnamed_addr #3 {
  br label %2

2:                                                ; preds = %99, %1
  %3 = phi i64 [ 0, %1 ], [ %100, %99 ]
  %4 = phi i32 [ 0, %1 ], [ %89, %99 ]
  %5 = phi i32 [ 0, %1 ], [ %88, %99 ]
  br label %6

6:                                                ; preds = %96, %2
  %7 = phi i64 [ 0, %2 ], [ %97, %96 ]
  %8 = phi i32 [ %4, %2 ], [ %89, %96 ]
  %9 = phi i32 [ %5, %2 ], [ %88, %96 ]
  br label %10

10:                                               ; preds = %93, %6
  %11 = phi i64 [ 0, %6 ], [ %94, %93 ]
  %12 = phi i32 [ %8, %6 ], [ %89, %93 ]
  %13 = phi i32 [ %9, %6 ], [ %88, %93 ]
  br label %14

14:                                               ; preds = %86, %10
  %15 = phi i64 [ 0, %10 ], [ %91, %86 ]
  %16 = phi i32 [ %12, %10 ], [ %89, %86 ]
  %17 = phi i32 [ %13, %10 ], [ %88, %86 ]
  %18 = getelementptr inbounds %struct.VP8EncProba, %struct.VP8EncProba* %0, i64 0, i32 3, i64 %3, i64 %7, i64 %11, i64 %15
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 65535
  %21 = lshr i32 %19, 16
  %22 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @VP8CoeffsUpdateProba, i64 0, i64 %3, i64 %7, i64 %11, i64 %15
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @VP8CoeffsProba0, i64 0, i64 %3, i64 %7, i64 %11, i64 %15
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = icmp eq i32 %20, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %14
  %29 = mul nuw nsw i32 %20, 255
  %30 = udiv i32 %29, %21
  %31 = sub nsw i32 255, %30
  br label %32

32:                                               ; preds = %14, %28
  %33 = phi i32 [ %31, %28 ], [ 255, %14 ]
  %34 = xor i32 %26, 255
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nuw nsw i32 %20, %38
  %40 = sub nsw i32 %21, %20
  %41 = zext i8 %25 to i64
  %42 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nsw i32 %40, %44
  %46 = add nsw i32 %45, %39
  %47 = zext i8 %23 to i64
  %48 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %47
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = add nsw i32 %46, %50
  %52 = and i32 %33, 255
  %53 = xor i32 %52, 255
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %54
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %20, %57
  %59 = zext i32 %52 to i64
  %60 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %59
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = mul nsw i32 %40, %62
  %64 = xor i8 %23, -1
  %65 = zext i8 %64 to i64
  %66 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = add nuw i32 %58, 2048
  %70 = add i32 %69, %63
  %71 = add i32 %70, %68
  %72 = icmp sgt i32 %51, %71
  %73 = sext i1 %72 to i8
  %74 = xor i8 %23, %73
  %75 = zext i8 %74 to i64
  %76 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = add nsw i32 %17, %78
  br i1 %72, label %80, label %86

80:                                               ; preds = %32
  %81 = trunc i32 %33 to i8
  %82 = icmp ne i32 %33, %26
  %83 = zext i1 %82 to i32
  %84 = or i32 %16, %83
  %85 = add nsw i32 %79, 2048
  br label %86

86:                                               ; preds = %32, %80
  %87 = phi i8 [ %81, %80 ], [ %25, %32 ]
  %88 = phi i32 [ %85, %80 ], [ %79, %32 ]
  %89 = phi i32 [ %84, %80 ], [ %16, %32 ]
  %90 = getelementptr inbounds %struct.VP8EncProba, %struct.VP8EncProba* %0, i64 0, i32 2, i64 %3, i64 %7, i64 %11, i64 %15
  store i8 %87, i8* %90, align 1
  %91 = add nuw nsw i64 %15, 1
  %92 = icmp eq i64 %91, 11
  br i1 %92, label %93, label %14

93:                                               ; preds = %86
  %94 = add nuw nsw i64 %11, 1
  %95 = icmp eq i64 %94, 3
  br i1 %95, label %96, label %10

96:                                               ; preds = %93
  %97 = add nuw nsw i64 %7, 1
  %98 = icmp eq i64 %97, 8
  br i1 %98, label %99, label %6

99:                                               ; preds = %96
  %100 = add nuw nsw i64 %3, 1
  %101 = icmp eq i64 %100, 4
  br i1 %101, label %102, label %2

102:                                              ; preds = %99
  %103 = getelementptr inbounds %struct.VP8EncProba, %struct.VP8EncProba* %0, i64 0, i32 6
  store i32 %89, i32* %103, align 8
  ret i32 %88
}

declare void @VP8CalculateLevelCosts(%struct.VP8EncProba*) local_unnamed_addr #2

declare i32 @WebPEncodingSetError(%struct.WebPPicture*, i32) local_unnamed_addr #2

declare i64 @VP8EstimateTokenSize(%struct.VP8TBuffer*, i8*) local_unnamed_addr #2

declare i32 @VP8EmitTokens(%struct.VP8TBuffer*, %struct.VP8BitWriter*, i8*, i32) local_unnamed_addr #2

declare i32 @WebPReportProgress(%struct.WebPPicture*, i32, i32*) local_unnamed_addr #2

declare i32 @VP8BitWriterInit(%struct.VP8BitWriter*, i64) local_unnamed_addr #2

declare void @VP8EncFreeBitWriters(%struct.VP8Encoder*) local_unnamed_addr #2

declare void @VP8IteratorNzToBytes(%struct.VP8EncIterator*) local_unnamed_addr #2

declare void @VP8InitResidual(i32, i32, %struct.VP8Encoder*, %struct.VP8Residual*) local_unnamed_addr #2

declare i32 @VP8RecordCoeffs(i32, %struct.VP8Residual*) local_unnamed_addr #2

declare void @VP8IteratorBytesToNz(%struct.VP8EncIterator*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @PutCoeffs(%struct.VP8BitWriter*, i32, %struct.VP8Residual* nocapture readonly) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP8Residual, %struct.VP8Residual* %2, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.VP8Residual, %struct.VP8Residual* %2, i64 0, i32 4
  %7 = load [3 x [11 x i8]]*, [3 x [11 x i8]]** %6, align 8
  %8 = sext i32 %5 to i64
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds [3 x [11 x i8]], [3 x [11 x i8]]* %7, i64 %8, i64 %9, i64 0
  %11 = getelementptr inbounds %struct.VP8Residual, %struct.VP8Residual* %2, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = lshr i32 %12, 31
  %14 = xor i32 %13, 1
  %15 = load i8, i8* %10, align 1
  %16 = zext i8 %15 to i32
  %17 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %14, i32 %16) #6
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %180, label %19

19:                                               ; preds = %3
  %20 = icmp slt i32 %5, 16
  br i1 %20, label %21, label %180

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.VP8Residual, %struct.VP8Residual* %2, i64 0, i32 2
  br label %23

23:                                               ; preds = %177, %21
  %24 = phi i64 [ %8, %21 ], [ %27, %177 ]
  %25 = phi i8* [ %10, %21 ], [ %178, %177 ]
  %26 = load i16*, i16** %22, align 8
  %27 = add nsw i64 %24, 1
  %28 = getelementptr inbounds i16, i16* %26, i64 %24
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = icmp slt i16 %29, 0
  %32 = lshr i16 %29, 15
  %33 = zext i16 %32 to i32
  %34 = sub nsw i32 0, %30
  %35 = select i1 %31, i32 %34, i32 %30
  %36 = icmp ne i16 %29, 0
  %37 = zext i1 %36 to i32
  %38 = getelementptr inbounds i8, i8* %25, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %37, i32 %40) #6
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %49

43:                                               ; preds = %23
  %44 = load [3 x [11 x i8]]*, [3 x [11 x i8]]** %6, align 8
  %45 = getelementptr inbounds [17 x i8], [17 x i8]* @VP8EncBands, i64 0, i64 %27
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i64
  %48 = getelementptr inbounds [3 x [11 x i8]], [3 x [11 x i8]]* %44, i64 %47, i64 0, i64 0
  br label %177

49:                                               ; preds = %23
  %50 = icmp sgt i32 %35, 1
  %51 = zext i1 %50 to i32
  %52 = getelementptr inbounds i8, i8* %25, i64 2
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %51, i32 %54) #6
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %159, label %57

57:                                               ; preds = %49
  %58 = icmp sgt i32 %35, 4
  %59 = zext i1 %58 to i32
  %60 = getelementptr inbounds i8, i8* %25, i64 3
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %59, i32 %62) #6
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %80

65:                                               ; preds = %57
  %66 = icmp ne i32 %35, 2
  %67 = zext i1 %66 to i32
  %68 = getelementptr inbounds i8, i8* %25, i64 4
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %67, i32 %70) #6
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %159, label %73

73:                                               ; preds = %65
  %74 = icmp eq i32 %35, 4
  %75 = zext i1 %74 to i32
  %76 = getelementptr inbounds i8, i8* %25, i64 5
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %75, i32 %78) #6
  br label %159

80:                                               ; preds = %57
  %81 = icmp sgt i32 %35, 10
  %82 = zext i1 %81 to i32
  %83 = getelementptr inbounds i8, i8* %25, i64 6
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %82, i32 %85) #6
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %107

88:                                               ; preds = %80
  %89 = icmp sgt i32 %35, 6
  %90 = zext i1 %89 to i32
  %91 = getelementptr inbounds i8, i8* %25, i64 7
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %90, i32 %93) #6
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %100

96:                                               ; preds = %88
  %97 = icmp eq i32 %35, 6
  %98 = zext i1 %97 to i32
  %99 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %98, i32 159) #6
  br label %159

100:                                              ; preds = %88
  %101 = icmp sgt i32 %35, 8
  %102 = zext i1 %101 to i32
  %103 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %102, i32 165) #6
  %104 = and i32 %35, 1
  %105 = xor i32 %104, 1
  %106 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %105, i32 145) #6
  br label %159

107:                                              ; preds = %80
  %108 = icmp slt i32 %35, 19
  br i1 %108, label %109, label %118

109:                                              ; preds = %107
  %110 = getelementptr inbounds i8, i8* %25, i64 8
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 0, i32 %112) #6
  %114 = getelementptr inbounds i8, i8* %25, i64 9
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 0, i32 %116) #6
  br label %142

118:                                              ; preds = %107
  %119 = icmp slt i32 %35, 35
  br i1 %119, label %120, label %129

120:                                              ; preds = %118
  %121 = getelementptr inbounds i8, i8* %25, i64 8
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 0, i32 %123) #6
  %125 = getelementptr inbounds i8, i8* %25, i64 9
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 1, i32 %127) #6
  br label %142

129:                                              ; preds = %118
  %130 = icmp slt i32 %35, 67
  %131 = getelementptr inbounds i8, i8* %25, i64 8
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 1, i32 %133) #6
  %135 = getelementptr inbounds i8, i8* %25, i64 10
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  br i1 %130, label %138, label %140

138:                                              ; preds = %129
  %139 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 0, i32 %137) #6
  br label %142

140:                                              ; preds = %129
  %141 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 1, i32 %137) #6
  br label %142

142:                                              ; preds = %120, %140, %138, %109
  %143 = phi i32 [ -19, %120 ], [ -67, %140 ], [ -35, %138 ], [ -11, %109 ]
  %144 = phi i32 [ 8, %120 ], [ 1024, %140 ], [ 16, %138 ], [ 4, %109 ]
  %145 = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @VP8Cat4, i64 0, i64 0), %120 ], [ getelementptr inbounds ([11 x i8], [11 x i8]* @VP8Cat6, i64 0, i64 0), %140 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @VP8Cat5, i64 0, i64 0), %138 ], [ getelementptr inbounds ([3 x i8], [3 x i8]* @VP8Cat3, i64 0, i64 0), %109 ]
  %146 = add nsw i32 %35, %143
  br label %147

147:                                              ; preds = %142, %147
  %148 = phi i8* [ %145, %142 ], [ %153, %147 ]
  %149 = phi i32 [ %144, %142 ], [ %157, %147 ]
  %150 = and i32 %149, %146
  %151 = icmp ne i32 %150, 0
  %152 = zext i1 %151 to i32
  %153 = getelementptr inbounds i8, i8* %148, i64 1
  %154 = load i8, i8* %148, align 1
  %155 = zext i8 %154 to i32
  %156 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %152, i32 %155) #6
  %157 = ashr i32 %149, 1
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %147

159:                                              ; preds = %147, %73, %96, %100, %65, %49
  %160 = phi i64 [ 1, %49 ], [ 2, %65 ], [ 2, %100 ], [ 2, %96 ], [ 2, %73 ], [ 2, %147 ]
  %161 = load [3 x [11 x i8]]*, [3 x [11 x i8]]** %6, align 8
  %162 = getelementptr inbounds [17 x i8], [17 x i8]* @VP8EncBands, i64 0, i64 %27
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i64
  %165 = getelementptr inbounds [3 x [11 x i8]], [3 x [11 x i8]]* %161, i64 %164, i64 %160, i64 0
  %166 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %0, i32 %33) #6
  %167 = icmp eq i64 %27, 16
  br i1 %167, label %180, label %168

168:                                              ; preds = %159
  %169 = load i32, i32* %11, align 4
  %170 = sext i32 %169 to i64
  %171 = icmp slt i64 %24, %170
  %172 = zext i1 %171 to i32
  %173 = load i8, i8* %165, align 1
  %174 = zext i8 %173 to i32
  %175 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %172, i32 %174) #6
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %180, label %177

177:                                              ; preds = %168, %43
  %178 = phi i8* [ %48, %43 ], [ %165, %168 ]
  %179 = icmp eq i64 %27, 16
  br i1 %179, label %180, label %23

180:                                              ; preds = %159, %168, %177, %19, %3
  %181 = phi i32 [ 0, %3 ], [ 1, %19 ], [ 1, %177 ], [ 1, %168 ], [ 1, %159 ]
  ret i32 %181
}

declare i32 @VP8PutBit(%struct.VP8BitWriter*, i32, i32) local_unnamed_addr #2

declare i32 @VP8PutBitUniform(%struct.VP8BitWriter*, i32) local_unnamed_addr #2

declare i8* @VP8BitWriterFinish(%struct.VP8BitWriter*) local_unnamed_addr #2

declare void @VP8AdjustFilterStrength(%struct.VP8EncIterator*) local_unnamed_addr #2

declare void @VP8SetSegmentParams(%struct.VP8Encoder*, float) local_unnamed_addr #2

declare i32 @VP8RecordCoeffTokens(i32, %struct.VP8Residual*, %struct.VP8TBuffer*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @log10(double) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
