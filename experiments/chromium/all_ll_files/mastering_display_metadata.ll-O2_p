; ModuleID = '../../third_party/ffmpeg/libavutil/mastering_display_metadata.c'
source_filename = "../../third_party/ffmpeg/libavutil/mastering_display_metadata.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVMasteringDisplayMetadata = type { [3 x [2 x %struct.AVRational]], [2 x %struct.AVRational], %struct.AVRational, %struct.AVRational, i32, i32 }
%struct.AVRational = type { i32, i32 }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVContentLightMetadata = type { i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct.AVMasteringDisplayMetadata* @av_mastering_display_metadata_alloc() local_unnamed_addr #0 {
  %1 = tail call noalias i8* @av_mallocz(i64 88) #3
  %2 = bitcast i8* %1 to %struct.AVMasteringDisplayMetadata*
  ret %struct.AVMasteringDisplayMetadata* %2
}

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AVMasteringDisplayMetadata* @av_mastering_display_metadata_create_side_data(%struct.AVFrame*) local_unnamed_addr #0 {
  %2 = tail call %struct.AVFrameSideData* @av_frame_new_side_data(%struct.AVFrame* %0, i32 11, i32 88) #3
  %3 = icmp eq %struct.AVFrameSideData* %2, null
  br i1 %3, label %9, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.AVFrameSideData, %struct.AVFrameSideData* %2, i64 0, i32 1
  %6 = load i8*, i8** %5, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 0, i64 88, i1 false)
  %7 = bitcast i8** %5 to %struct.AVMasteringDisplayMetadata**
  %8 = load %struct.AVMasteringDisplayMetadata*, %struct.AVMasteringDisplayMetadata** %7, align 8
  br label %9

9:                                                ; preds = %1, %4
  %10 = phi %struct.AVMasteringDisplayMetadata* [ %8, %4 ], [ null, %1 ]
  ret %struct.AVMasteringDisplayMetadata* %10
}

declare %struct.AVFrameSideData* @av_frame_new_side_data(%struct.AVFrame*, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct.AVContentLightMetadata* @av_content_light_metadata_alloc(i64*) local_unnamed_addr #0 {
  %2 = tail call noalias i8* @av_mallocz(i64 8) #3
  %3 = bitcast i8* %2 to %struct.AVContentLightMetadata*
  %4 = icmp eq i64* %0, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  store i64 8, i64* %0, align 8
  br label %6

6:                                                ; preds = %1, %5
  ret %struct.AVContentLightMetadata* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AVContentLightMetadata* @av_content_light_metadata_create_side_data(%struct.AVFrame*) local_unnamed_addr #0 {
  %2 = tail call %struct.AVFrameSideData* @av_frame_new_side_data(%struct.AVFrame* %0, i32 14, i32 8) #3
  %3 = icmp eq %struct.AVFrameSideData* %2, null
  br i1 %3, label %10, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.AVFrameSideData, %struct.AVFrameSideData* %2, i64 0, i32 1
  %6 = bitcast i8** %5 to i64**
  %7 = load i64*, i64** %6, align 8
  store i64 0, i64* %7, align 1
  %8 = bitcast i8** %5 to %struct.AVContentLightMetadata**
  %9 = load %struct.AVContentLightMetadata*, %struct.AVContentLightMetadata** %8, align 8
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi %struct.AVContentLightMetadata* [ %9, %4 ], [ null, %1 ]
  ret %struct.AVContentLightMetadata* %11
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
