; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/decoder/decodeframe.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/decoder/decodeframe.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.mv_context = type { [19 x i8] }
%struct.VP8D_COMP = type { %struct.macroblockd, [4 x %struct.yv12_buffer_config*], %struct.VP8Common, [9 x %struct.BOOL_DECODER], %struct.VP8D_CONFIG, %struct.FRAGMENT_DATA, %struct.vpx_atomic_int, i32, i32, i32, i32, [4 x i32], i32, %struct.vpx_atomic_int*, i8**, i8**, i8**, i8**, i8**, i8**, %struct.MB_ROW_DEC*, %struct.DECODETHREAD_DATA*, i64*, %union.sem_t*, %union.sem_t, i64, i32, i8, i8, i8, i8, i32, i32, i32, i32, i32, void (i8*, i8*, i8*, i32)*, i8*, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%union.int_mv = type { i32 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_DECODER = type { i8*, i8*, i64, i32, i32, void (i8*, i8*, i8*, i32)*, i8* }
%struct.VP8D_CONFIG = type { i32, i32, i32, i32, i32, i32 }
%struct.FRAGMENT_DATA = type { i32, i32, [9 x i8*], [9 x i32] }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_DEC = type { %struct.macroblockd }
%struct.DECODETHREAD_DATA = type { i32, i8*, i8* }
%union.sem_t = type { i64, [24 x i8] }

@vp8_mb_feature_data_bits = external local_unnamed_addr constant [2 x i32], align 4
@.str = private unnamed_addr constant [17 x i8] c"Truncated packet\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"Truncated packet or corrupt partition 0 length\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"Invalid frame sync code\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"Truncated key frame header\00", align 1
@.str.4 = private unnamed_addr constant [34 x i8] c"Failed to allocate bool decoder 0\00", align 1
@vp8_coef_update_probs = external local_unnamed_addr constant [4 x [8 x [3 x [11 x i8]]]], align 16
@.str.5 = private unnamed_addr constant [46 x i8] c"A stream must start with a complete key frame\00", align 1
@vp8_default_mv_context = external local_unnamed_addr constant [2 x %struct.mv_context], align 16
@vp8_sixtap_predict4x4 = external local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)*, align 8
@vp8_sixtap_predict8x4 = external local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)*, align 8
@vp8_sixtap_predict8x8 = external local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)*, align 8
@vp8_sixtap_predict16x16 = external local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)*, align 8
@vp8_bilinear_predict8x8 = external local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)*, align 8
@vp8_bilinear_predict16x16 = external local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)*, align 8
@vp8_norm = external local_unnamed_addr constant [256 x i8], align 16
@.str.6 = private unnamed_addr constant [27 x i8] c"Corrupted fragment size %d\00", align 1
@.str.7 = private unnamed_addr constant [35 x i8] c"Failed to allocate bool decoder %d\00", align 1
@.str.8 = private unnamed_addr constant [57 x i8] c"Truncated packet or corrupt partition. No bytes left %d.\00", align 1
@.str.9 = private unnamed_addr constant [30 x i8] c"Truncated partition size data\00", align 1
@.str.10 = private unnamed_addr constant [48 x i8] c"Truncated packet or corrupt partition %d length\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8cx_init_de_quantizer(%struct.VP8D_COMP* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 35
  %3 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 36
  %4 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 38
  %5 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 37
  %6 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 39
  br label %7

7:                                                ; preds = %7, %1
  %8 = phi i64 [ 0, %1 ], [ %33, %7 ]
  %9 = load i32, i32* %2, align 4
  %10 = trunc i64 %8 to i32
  %11 = tail call i32 @vp8_dc_quant(i32 %10, i32 %9) #4
  %12 = trunc i32 %11 to i16
  %13 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 2, i64 %8, i64 0
  store i16 %12, i16* %13, align 4
  %14 = load i32, i32* %3, align 8
  %15 = tail call i32 @vp8_dc2quant(i32 %10, i32 %14) #4
  %16 = trunc i32 %15 to i16
  %17 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 3, i64 %8, i64 0
  store i16 %16, i16* %17, align 4
  %18 = load i32, i32* %4, align 16
  %19 = tail call i32 @vp8_dc_uv_quant(i32 %10, i32 %18) #4
  %20 = trunc i32 %19 to i16
  %21 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 4, i64 %8, i64 0
  store i16 %20, i16* %21, align 4
  %22 = tail call i32 @vp8_ac_yquant(i32 %10) #4
  %23 = trunc i32 %22 to i16
  %24 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 2, i64 %8, i64 1
  store i16 %23, i16* %24, align 2
  %25 = load i32, i32* %5, align 4
  %26 = tail call i32 @vp8_ac2quant(i32 %10, i32 %25) #4
  %27 = trunc i32 %26 to i16
  %28 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 3, i64 %8, i64 1
  store i16 %27, i16* %28, align 2
  %29 = load i32, i32* %6, align 4
  %30 = tail call i32 @vp8_ac_uv_quant(i32 %10, i32 %29) #4
  %31 = trunc i32 %30 to i16
  %32 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 4, i64 %8, i64 1
  store i16 %31, i16* %32, align 2
  %33 = add nuw nsw i64 %8, 1
  %34 = icmp eq i64 %33, 128
  br i1 %34, label %35, label %7

35:                                               ; preds = %7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @vp8_dc_quant(i32, i32) local_unnamed_addr #2

declare i32 @vp8_dc2quant(i32, i32) local_unnamed_addr #2

declare i32 @vp8_dc_uv_quant(i32, i32) local_unnamed_addr #2

declare i32 @vp8_ac_yquant(i32) local_unnamed_addr #2

declare i32 @vp8_ac2quant(i32, i32) local_unnamed_addr #2

declare i32 @vp8_ac_uv_quant(i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_mb_init_dequantizer(%struct.VP8D_COMP* nocapture readonly, %struct.macroblockd* nocapture) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 13
  %4 = load %struct.modeinfo*, %struct.modeinfo** %3, align 32
  %5 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 23
  %6 = load i8, i8* %5, align 32
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %35, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 26
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 1
  br i1 %11, label %12, label %19

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %4, i64 0, i32 0, i32 8
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i64
  %16 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 28, i64 0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  br label %29

19:                                               ; preds = %8
  %20 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 34
  %21 = load i32, i32* %20, align 16
  %22 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %4, i64 0, i32 0, i32 8
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 28, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = add nsw i32 %21, %27
  br label %29

29:                                               ; preds = %19, %12
  %30 = phi i32 [ %18, %12 ], [ %28, %19 ]
  %31 = icmp sgt i32 %30, -1
  %32 = icmp slt i32 %30, 127
  %33 = select i1 %32, i32 %30, i32 127
  %34 = select i1 %31, i32 %33, i32 0
  br label %38

35:                                               ; preds = %2
  %36 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 34
  %37 = load i32, i32* %36, align 16
  br label %38

38:                                               ; preds = %29, %35
  %39 = phi i32 [ %37, %35 ], [ %34, %29 ]
  %40 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6, i64 0
  store i16 1, i16* %40, align 32
  %41 = sext i32 %39 to i64
  %42 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 2, i64 %41, i64 0
  %43 = load i16, i16* %42, align 4
  %44 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i64 0
  store i16 %43, i16* %44, align 32
  %45 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 3, i64 %41, i64 0
  %46 = load i16, i16* %45, align 4
  %47 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 7, i64 0
  store i16 %46, i16* %47, align 32
  %48 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 4, i64 %41, i64 0
  %49 = load i16, i16* %48, align 4
  %50 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 8, i64 0
  store i16 %49, i16* %50, align 32
  %51 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 2, i64 %41, i64 1
  %52 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 3, i64 %41, i64 1
  %53 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 4, i64 %41, i64 1
  br label %54

54:                                               ; preds = %66, %38
  %55 = phi i64 [ 1, %38 ], [ %74, %66 ]
  %56 = load i16, i16* %51, align 2
  %57 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i64 %55
  store i16 %56, i16* %57, align 2
  %58 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6, i64 %55
  store i16 %56, i16* %58, align 2
  %59 = load i16, i16* %52, align 2
  %60 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 7, i64 %55
  store i16 %59, i16* %60, align 2
  %61 = load i16, i16* %53, align 2
  %62 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 8, i64 %55
  store i16 %61, i16* %62, align 2
  %63 = add nuw nsw i64 %55, 1
  %64 = icmp eq i64 %63, 16
  br i1 %64, label %65, label %66

65:                                               ; preds = %54
  ret void

66:                                               ; preds = %54
  %67 = load i16, i16* %51, align 2
  %68 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i64 %63
  store i16 %67, i16* %68, align 2
  %69 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6, i64 %63
  store i16 %67, i16* %69, align 2
  %70 = load i16, i16* %52, align 2
  %71 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 7, i64 %63
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %53, align 2
  %73 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 8, i64 %63
  store i16 %72, i16* %73, align 2
  %74 = add nuw nsw i64 %55, 2
  br label %54
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_decode_frame(%struct.VP8D_COMP*) local_unnamed_addr #0 {
  %2 = alloca [4 x [3 x i8*]], align 16
  %3 = alloca [4 x i32], align 16
  %4 = alloca [3 x i8], align 1
  %5 = alloca [10 x i8], align 1
  %6 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 8
  %7 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2
  %8 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0
  %9 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 2, i64 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 3, i64 0
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %10, i64 %13
  %15 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 34
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 1, i64 0
  %18 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %17, align 32
  %19 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 44
  store i32 0, i32* %19, align 32
  %20 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %18, i64 0, i32 28
  store i32 0, i32* %20, align 4
  %21 = ptrtoint i8* %14 to i64
  %22 = icmp ult i32 %12, 3
  br i1 %22, label %23, label %33

23:                                               ; preds = %1
  %24 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 32
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %7, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %28, i32 7, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #4
  br label %29

29:                                               ; preds = %23, %27
  %30 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 23
  store i32 1, i32* %30, align 4
  %31 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 61
  store i32 0, i32* %31, align 16
  %32 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 24
  store i32 1, i32* %32, align 8
  br label %144

33:                                               ; preds = %1
  %34 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %34) #4
  %35 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 36
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %34, i8 -86, i64 10, i1 false)
  %36 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %35, align 8
  %37 = icmp eq void (i8*, i8*, i8*, i32)* %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %33
  %39 = icmp ult i32 %12, 10
  %40 = select i1 %39, i32 %12, i32 10
  %41 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 37
  %42 = load i8*, i8** %41, align 16
  call void %36(i8* %42, i8* %10, i8* nonnull %34, i32 %40) #4
  br label %43

43:                                               ; preds = %33, %38
  %44 = phi i8* [ %34, %38 ], [ %10, %33 ]
  %45 = load i8, i8* %44, align 1
  %46 = and i8 %45, 1
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 23
  store i32 %47, i32* %48, align 4
  %49 = load i8, i8* %44, align 1
  %50 = lshr i8 %49, 1
  %51 = and i8 %50, 7
  %52 = zext i8 %51 to i32
  %53 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 61
  store i32 %52, i32* %53, align 16
  %54 = load i8, i8* %44, align 1
  %55 = lshr i8 %54, 4
  %56 = and i8 %55, 1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 24
  store i32 %57, i32* %58, align 8
  %59 = load i8, i8* %44, align 1
  %60 = zext i8 %59 to i64
  %61 = getelementptr inbounds i8, i8* %44, i64 1
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i64
  %64 = shl nuw nsw i64 %63, 8
  %65 = or i64 %64, %60
  %66 = getelementptr inbounds i8, i8* %44, i64 2
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i64
  %69 = shl nuw nsw i64 %68, 16
  %70 = or i64 %65, %69
  %71 = lshr i64 %70, 5
  %72 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 32
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, 0
  %75 = icmp ugt i64 %71, %13
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %79

77:                                               ; preds = %43
  %78 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %7, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %78, i32 7, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0)) #4
  br label %79

79:                                               ; preds = %43, %77
  %80 = getelementptr inbounds i8, i8* %10, i64 3
  %81 = getelementptr inbounds i8, i8* %44, i64 3
  call void @vp8_setup_version(%struct.VP8Common* %7) #4
  %82 = load i32, i32* %48, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %136

84:                                               ; preds = %79
  %85 = icmp ugt i32 %12, 6
  br i1 %85, label %86, label %131

86:                                               ; preds = %84
  %87 = load i8, i8* %81, align 1
  %88 = icmp eq i8 %87, -99
  br i1 %88, label %89, label %97

89:                                               ; preds = %86
  %90 = getelementptr inbounds i8, i8* %44, i64 4
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, 1
  br i1 %92, label %93, label %97

93:                                               ; preds = %89
  %94 = getelementptr inbounds i8, i8* %44, i64 5
  %95 = load i8, i8* %94, align 1
  %96 = icmp eq i8 %95, 42
  br i1 %96, label %99, label %97

97:                                               ; preds = %93, %89, %86
  %98 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %7, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %98, i32 5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #4
  br label %99

99:                                               ; preds = %93, %97
  %100 = icmp ugt i32 %12, 9
  br i1 %100, label %101, label %131

101:                                              ; preds = %99
  %102 = getelementptr inbounds i8, i8* %44, i64 6
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = getelementptr inbounds i8, i8* %44, i64 7
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = shl nuw nsw i32 %107, 8
  %109 = and i32 %108, 16128
  %110 = or i32 %109, %104
  %111 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 5
  store i32 %110, i32* %111, align 16
  %112 = load i8, i8* %105, align 1
  %113 = lshr i8 %112, 6
  %114 = zext i8 %113 to i32
  %115 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 7
  store i32 %114, i32* %115, align 8
  %116 = getelementptr inbounds i8, i8* %44, i64 8
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = getelementptr inbounds i8, i8* %44, i64 9
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = shl nuw nsw i32 %121, 8
  %123 = and i32 %122, 16128
  %124 = or i32 %123, %118
  %125 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 6
  store i32 %124, i32* %125, align 4
  %126 = load i8, i8* %119, align 1
  %127 = lshr i8 %126, 6
  %128 = zext i8 %127 to i32
  %129 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 8
  store i32 %128, i32* %129, align 4
  %130 = getelementptr inbounds i8, i8* %10, i64 10
  br label %142

131:                                              ; preds = %84, %99
  %132 = load i32, i32* %72, align 4
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %142

134:                                              ; preds = %131
  %135 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %7, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %135, i32 7, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0)) #4
  br label %142

136:                                              ; preds = %79
  %137 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 11
  %138 = bitcast %struct.yv12_buffer_config* %137 to i8*
  %139 = bitcast %struct.yv12_buffer_config* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %138, i8* align 8 %139, i64 160, i1 false)
  %140 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 12
  %141 = bitcast %struct.yv12_buffer_config* %140 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %141, i8* align 8 %139, i64 160, i1 false)
  br label %142

142:                                              ; preds = %131, %101, %134, %136
  %143 = phi i8* [ %130, %101 ], [ %80, %134 ], [ %80, %136 ], [ %14, %131 ]
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %34) #4
  br label %144

144:                                              ; preds = %142, %29
  %145 = phi i8* [ %10, %29 ], [ %143, %142 ]
  %146 = phi i64 [ 0, %29 ], [ %71, %142 ]
  %147 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 33
  %148 = load i32, i32* %147, align 8
  %149 = icmp eq i32 %148, 0
  %150 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 23
  %151 = load i32, i32* %150, align 4
  br i1 %149, label %152, label %156

152:                                              ; preds = %144
  %153 = icmp eq i32 %151, 0
  br i1 %153, label %154, label %3220

154:                                              ; preds = %152
  %155 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 23
  br label %159

156:                                              ; preds = %144
  %157 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 23
  %158 = icmp eq i32 %151, 0
  br i1 %158, label %159, label %174

159:                                              ; preds = %154, %156
  %160 = phi i32* [ %155, %154 ], [ %157, %156 ]
  %161 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 5, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %161, i8* align 16 getelementptr inbounds ([2 x %struct.mv_context], [2 x %struct.mv_context]* @vp8_default_mv_context, i64 0, i64 0, i32 0, i64 0), i64 38, i1 false) #4
  call void @vp8_init_mbmode_probs(%struct.VP8Common* %7) #4
  call void @vp8_default_coef_probs(%struct.VP8Common* %7) #4
  %162 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 28, i64 0, i64 0
  %163 = bitcast i8* %162 to i64*
  store i64 0, i64* %163, align 1
  %164 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 26
  store i8 0, i8* %164, align 1
  %165 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 32, i64 0
  %166 = bitcast i8* %165 to i32*
  store i32 0, i32* %166, align 1
  %167 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 34, i64 0
  %168 = bitcast i8* %167 to i32*
  store i32 0, i32* %168, align 1
  %169 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 50
  %170 = bitcast i32* %169 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 0, i32 0>, <4 x i32>* %170, align 16
  %171 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 55, i64 2
  store i32 0, i32* %171, align 4
  %172 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 55, i64 3
  store i32 0, i32* %172, align 4
  %173 = load i32, i32* %160, align 4
  br label %205

174:                                              ; preds = %156
  %175 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 32
  %176 = load i32, i32* %175, align 8
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %178, label %185

178:                                              ; preds = %174
  %179 = load i64, i64* bitcast (void (i8*, i32, i32, i32, i8*, i32)** @vp8_sixtap_predict4x4 to i64*), align 8
  %180 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 39
  %181 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %180 to i64*
  store i64 %179, i64* %181, align 8
  %182 = load i64, i64* bitcast (void (i8*, i32, i32, i32, i8*, i32)** @vp8_sixtap_predict8x4 to i64*), align 8
  %183 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 40
  %184 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %183 to i64*
  store i64 %182, i64* %184, align 32
  br label %188

185:                                              ; preds = %174
  %186 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 39
  %187 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %186 to <2 x void (i8*, i32, i32, i32, i8*, i32)*>*
  store <2 x void (i8*, i32, i32, i32, i8*, i32)*> <void (i8*, i32, i32, i32, i8*, i32)* @vp8_bilinear_predict4x4_sse2, void (i8*, i32, i32, i32, i8*, i32)* @vp8_bilinear_predict8x4_sse2>, <2 x void (i8*, i32, i32, i32, i8*, i32)*>* %187, align 8
  br label %188

188:                                              ; preds = %178, %185
  %189 = phi i64* [ bitcast (void (i8*, i32, i32, i32, i8*, i32)** @vp8_sixtap_predict8x8 to i64*), %178 ], [ bitcast (void (i8*, i32, i32, i32, i8*, i32)** @vp8_bilinear_predict8x8 to i64*), %185 ]
  %190 = phi i64* [ bitcast (void (i8*, i32, i32, i32, i8*, i32)** @vp8_sixtap_predict16x16 to i64*), %178 ], [ bitcast (void (i8*, i32, i32, i32, i8*, i32)** @vp8_bilinear_predict16x16 to i64*), %185 ]
  %191 = load i64, i64* %189, align 8
  %192 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 41
  %193 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %192 to i64*
  store i64 %191, i64* %193, align 8
  %194 = load i64, i64* %190, align 8
  %195 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 42
  %196 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %195 to i64*
  store i64 %194, i64* %196, align 16
  %197 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 31
  %198 = load i32, i32* %197, align 16
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %205, label %200

200:                                              ; preds = %188
  %201 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 32
  %202 = load i32, i32* %201, align 4
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %204, label %205

204:                                              ; preds = %200
  store i32 1, i32* %201, align 4
  br label %205

205:                                              ; preds = %159, %188, %200, %204
  %206 = phi i32* [ %157, %200 ], [ %157, %188 ], [ %157, %204 ], [ %160, %159 ]
  %207 = phi i32 [ %151, %200 ], [ %151, %188 ], [ %151, %204 ], [ %173, %159 ]
  %208 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 57
  %209 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 22
  store %struct.ENTROPY_CONTEXT_PLANES* %208, %struct.ENTROPY_CONTEXT_PLANES** %209, align 8
  %210 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 41
  %211 = bitcast %struct.modeinfo** %210 to i64*
  %212 = load i64, i64* %211, align 16
  %213 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 13
  %214 = bitcast %struct.modeinfo** %213 to i64*
  store i64 %212, i64* %214, align 32
  %215 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 15
  store i32 %207, i32* %215, align 4
  %216 = inttoptr i64 %212 to %struct.modeinfo*
  %217 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %216, i64 0, i32 0, i32 0
  store i8 0, i8* %217, align 4
  %218 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 29
  %219 = load i32, i32* %218, align 4
  %220 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 14
  store i32 %219, i32* %220, align 8
  store i32 0, i32* %19, align 32
  %221 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 10
  %222 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 33
  %223 = load i32, i32* %222, align 4
  %224 = icmp eq i32 %223, 0
  %225 = select i1 %224, i32 -1, i32 -8
  store i32 %225, i32* %221, align 8
  %226 = ptrtoint i8* %145 to i64
  %227 = sub i64 %21, %226
  %228 = trunc i64 %227 to i32
  %229 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 36
  %230 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %229, align 8
  %231 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 37
  %232 = load i8*, i8** %231, align 16
  %233 = call i32 @vp8dx_start_decode(%struct.BOOL_DECODER* %6, i8* %145, i32 %228, void (i8*, i8*, i8*, i32)* %230, i8* %232) #4
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %237, label %235

235:                                              ; preds = %205
  %236 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %7, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %236, i32 2, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0)) #4
  br label %237

237:                                              ; preds = %205, %235
  %238 = load i32, i32* %206, align 4
  %239 = icmp eq i32 %238, 0
  %240 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 8, i32 4
  %241 = load i32, i32* %240, align 4
  br i1 %239, label %245, label %242

242:                                              ; preds = %237
  %243 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 8, i32 3
  %244 = load i32, i32* %243, align 8
  br label %310

245:                                              ; preds = %237
  %246 = shl i32 %241, 7
  %247 = add i32 %246, -128
  %248 = lshr i32 %247, 8
  %249 = add nuw nsw i32 %248, 1
  %250 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 8, i32 3
  %251 = load i32, i32* %250, align 8
  %252 = icmp slt i32 %251, 0
  br i1 %252, label %253, label %255

253:                                              ; preds = %245
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %254 = load i32, i32* %250, align 8
  br label %255

255:                                              ; preds = %253, %245
  %256 = phi i32 [ %254, %253 ], [ %251, %245 ]
  %257 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 8, i32 2
  %258 = load i64, i64* %257, align 8
  %259 = zext i32 %249 to i64
  %260 = shl i64 %259, 56
  %261 = icmp ult i64 %258, %260
  br i1 %261, label %266, label %262

262:                                              ; preds = %255
  %263 = load i32, i32* %240, align 4
  %264 = sub i32 %263, %249
  %265 = sub i64 %258, %260
  br label %266

266:                                              ; preds = %255, %262
  %267 = phi i64 [ %265, %262 ], [ %258, %255 ]
  %268 = phi i32 [ %264, %262 ], [ %249, %255 ]
  %269 = and i32 %268, 255
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %270
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i32
  %274 = shl i32 %268, %273
  %275 = zext i8 %272 to i64
  %276 = shl i64 %267, %275
  %277 = sub nsw i32 %256, %273
  store i64 %276, i64* %257, align 8
  store i32 %277, i32* %250, align 8
  store i32 %274, i32* %240, align 4
  %278 = shl i32 %274, 7
  %279 = add i32 %278, -128
  %280 = lshr i32 %279, 8
  %281 = add nuw nsw i32 %280, 1
  %282 = icmp slt i32 %277, 0
  br i1 %282, label %283, label %286

283:                                              ; preds = %266
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %284 = load i32, i32* %250, align 8
  %285 = load i64, i64* %257, align 8
  br label %286

286:                                              ; preds = %283, %266
  %287 = phi i64 [ %285, %283 ], [ %276, %266 ]
  %288 = phi i32 [ %284, %283 ], [ %277, %266 ]
  %289 = zext i32 %281 to i64
  %290 = shl i64 %289, 56
  %291 = icmp ult i64 %287, %290
  br i1 %291, label %296, label %292

292:                                              ; preds = %286
  %293 = load i32, i32* %240, align 4
  %294 = sub i32 %293, %281
  %295 = sub i64 %287, %290
  br label %296

296:                                              ; preds = %286, %292
  %297 = phi i64 [ %295, %292 ], [ %287, %286 ]
  %298 = phi i32 [ %294, %292 ], [ %281, %286 ]
  %299 = phi i32 [ 1, %292 ], [ 0, %286 ]
  %300 = and i32 %298, 255
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %301
  %303 = load i8, i8* %302, align 1
  %304 = zext i8 %303 to i32
  %305 = shl i32 %298, %304
  %306 = zext i8 %303 to i64
  %307 = shl i64 %297, %306
  %308 = sub nsw i32 %288, %304
  store i64 %307, i64* %257, align 8
  store i32 %308, i32* %250, align 8
  store i32 %305, i32* %240, align 4
  %309 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 9
  store i32 %299, i32* %309, align 16
  br label %310

310:                                              ; preds = %242, %296
  %311 = phi i32 [ %244, %242 ], [ %308, %296 ]
  %312 = phi i32 [ %241, %242 ], [ %305, %296 ]
  %313 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 8, i32 4
  %314 = shl i32 %312, 7
  %315 = add i32 %314, -128
  %316 = lshr i32 %315, 8
  %317 = add nuw nsw i32 %316, 1
  %318 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 8, i32 3
  %319 = icmp slt i32 %311, 0
  br i1 %319, label %320, label %322

320:                                              ; preds = %310
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %321 = load i32, i32* %318, align 8
  br label %322

322:                                              ; preds = %320, %310
  %323 = phi i32 [ %321, %320 ], [ %311, %310 ]
  %324 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 8, i32 2
  %325 = load i64, i64* %324, align 8
  %326 = zext i32 %317 to i64
  %327 = shl i64 %326, 56
  %328 = icmp ult i64 %325, %327
  br i1 %328, label %333, label %329

329:                                              ; preds = %322
  %330 = load i32, i32* %313, align 4
  %331 = sub i32 %330, %317
  %332 = sub i64 %325, %327
  br label %333

333:                                              ; preds = %322, %329
  %334 = phi i64 [ %332, %329 ], [ %325, %322 ]
  %335 = phi i32 [ %331, %329 ], [ %317, %322 ]
  %336 = phi i8 [ 1, %329 ], [ 0, %322 ]
  %337 = and i32 %335, 255
  %338 = zext i32 %337 to i64
  %339 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %338
  %340 = load i8, i8* %339, align 1
  %341 = zext i8 %340 to i32
  %342 = shl i32 %335, %341
  %343 = zext i8 %340 to i64
  %344 = shl i64 %334, %343
  %345 = sub nsw i32 %323, %341
  store i64 %344, i64* %324, align 8
  store i32 %345, i32* %318, align 8
  store i32 %342, i32* %313, align 4
  %346 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 23
  store i8 %336, i8* %346, align 32
  %347 = icmp eq i8 %336, 0
  br i1 %347, label %663, label %348

348:                                              ; preds = %333
  %349 = shl i32 %342, 7
  %350 = add i32 %349, -128
  %351 = lshr i32 %350, 8
  %352 = add nuw nsw i32 %351, 1
  %353 = icmp slt i32 %345, 0
  br i1 %353, label %354, label %357

354:                                              ; preds = %348
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %355 = load i32, i32* %318, align 8
  %356 = load i64, i64* %324, align 8
  br label %357

357:                                              ; preds = %354, %348
  %358 = phi i64 [ %356, %354 ], [ %344, %348 ]
  %359 = phi i32 [ %355, %354 ], [ %345, %348 ]
  %360 = zext i32 %352 to i64
  %361 = shl i64 %360, 56
  %362 = icmp ult i64 %358, %361
  br i1 %362, label %367, label %363

363:                                              ; preds = %357
  %364 = load i32, i32* %313, align 4
  %365 = sub i32 %364, %352
  %366 = sub i64 %358, %361
  br label %367

367:                                              ; preds = %357, %363
  %368 = phi i64 [ %366, %363 ], [ %358, %357 ]
  %369 = phi i32 [ %365, %363 ], [ %352, %357 ]
  %370 = phi i8 [ 1, %363 ], [ 0, %357 ]
  %371 = and i32 %369, 255
  %372 = zext i32 %371 to i64
  %373 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %372
  %374 = load i8, i8* %373, align 1
  %375 = zext i8 %374 to i32
  %376 = shl i32 %369, %375
  %377 = zext i8 %374 to i64
  %378 = shl i64 %368, %377
  %379 = sub nsw i32 %359, %375
  store i64 %378, i64* %324, align 8
  store i32 %379, i32* %318, align 8
  store i32 %376, i32* %313, align 4
  %380 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 24
  store i8 %370, i8* %380, align 1
  %381 = shl i32 %376, 7
  %382 = add i32 %381, -128
  %383 = lshr i32 %382, 8
  %384 = add nuw nsw i32 %383, 1
  %385 = icmp slt i32 %379, 0
  br i1 %385, label %386, label %389

386:                                              ; preds = %367
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %387 = load i32, i32* %318, align 8
  %388 = load i64, i64* %324, align 8
  br label %389

389:                                              ; preds = %386, %367
  %390 = phi i64 [ %388, %386 ], [ %378, %367 ]
  %391 = phi i32 [ %387, %386 ], [ %379, %367 ]
  %392 = zext i32 %384 to i64
  %393 = shl i64 %392, 56
  %394 = icmp ult i64 %390, %393
  br i1 %394, label %399, label %395

395:                                              ; preds = %389
  %396 = load i32, i32* %313, align 4
  %397 = sub i32 %396, %384
  %398 = sub i64 %390, %393
  br label %399

399:                                              ; preds = %389, %395
  %400 = phi i64 [ %398, %395 ], [ %390, %389 ]
  %401 = phi i32 [ %397, %395 ], [ %384, %389 ]
  %402 = phi i8 [ 1, %395 ], [ 0, %389 ]
  %403 = and i32 %401, 255
  %404 = zext i32 %403 to i64
  %405 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %404
  %406 = load i8, i8* %405, align 1
  %407 = zext i8 %406 to i32
  %408 = shl i32 %401, %407
  %409 = zext i8 %406 to i64
  %410 = shl i64 %400, %409
  %411 = sub nsw i32 %391, %407
  store i64 %410, i64* %324, align 8
  store i32 %411, i32* %318, align 8
  store i32 %408, i32* %313, align 4
  %412 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 25
  store i8 %402, i8* %412, align 2
  %413 = icmp eq i8 %402, 0
  br i1 %413, label %577, label %414

414:                                              ; preds = %399
  %415 = shl i32 %408, 7
  %416 = add i32 %415, -128
  %417 = lshr i32 %416, 8
  %418 = add nuw nsw i32 %417, 1
  %419 = icmp slt i32 %411, 0
  br i1 %419, label %420, label %423

420:                                              ; preds = %414
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %421 = load i32, i32* %318, align 8
  %422 = load i64, i64* %324, align 8
  br label %423

423:                                              ; preds = %420, %414
  %424 = phi i64 [ %422, %420 ], [ %410, %414 ]
  %425 = phi i32 [ %421, %420 ], [ %411, %414 ]
  %426 = zext i32 %418 to i64
  %427 = shl i64 %426, 56
  %428 = icmp ult i64 %424, %427
  br i1 %428, label %433, label %429

429:                                              ; preds = %423
  %430 = load i32, i32* %313, align 4
  %431 = sub i32 %430, %418
  %432 = sub i64 %424, %427
  br label %433

433:                                              ; preds = %423, %429
  %434 = phi i64 [ %432, %429 ], [ %424, %423 ]
  %435 = phi i32 [ %431, %429 ], [ %418, %423 ]
  %436 = phi i8 [ 1, %429 ], [ 0, %423 ]
  %437 = and i32 %435, 255
  %438 = zext i32 %437 to i64
  %439 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %438
  %440 = load i8, i8* %439, align 1
  %441 = zext i8 %440 to i32
  %442 = shl i32 %435, %441
  %443 = zext i8 %440 to i64
  %444 = shl i64 %434, %443
  %445 = sub nsw i32 %425, %441
  store i64 %444, i64* %324, align 8
  store i32 %445, i32* %318, align 8
  store i32 %442, i32* %313, align 4
  %446 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 26
  store i8 %436, i8* %446, align 1
  %447 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 28
  %448 = bitcast [2 x [4 x i8]]* %447 to i64*
  store i64 0, i64* %448, align 1
  br label %449

449:                                              ; preds = %574, %433
  %450 = phi i64 [ 0, %433 ], [ %575, %574 ]
  %451 = getelementptr inbounds [2 x i32], [2 x i32]* @vp8_mb_feature_data_bits, i64 0, i64 %450
  br label %452

452:                                              ; preds = %571, %449
  %453 = phi i64 [ 0, %449 ], [ %572, %571 ]
  %454 = load i32, i32* %313, align 4
  %455 = shl i32 %454, 7
  %456 = add i32 %455, -128
  %457 = lshr i32 %456, 8
  %458 = add nuw nsw i32 %457, 1
  %459 = load i32, i32* %318, align 8
  %460 = icmp slt i32 %459, 0
  br i1 %460, label %461, label %463

461:                                              ; preds = %452
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %462 = load i32, i32* %318, align 8
  br label %463

463:                                              ; preds = %461, %452
  %464 = phi i32 [ %462, %461 ], [ %459, %452 ]
  %465 = load i64, i64* %324, align 8
  %466 = zext i32 %458 to i64
  %467 = shl i64 %466, 56
  %468 = icmp ult i64 %465, %467
  br i1 %468, label %473, label %469

469:                                              ; preds = %463
  %470 = load i32, i32* %313, align 4
  %471 = sub i32 %470, %458
  %472 = sub i64 %465, %467
  br label %473

473:                                              ; preds = %463, %469
  %474 = phi i64 [ %472, %469 ], [ %465, %463 ]
  %475 = phi i32 [ %471, %469 ], [ %458, %463 ]
  %476 = phi i1 [ false, %469 ], [ true, %463 ]
  %477 = and i32 %475, 255
  %478 = zext i32 %477 to i64
  %479 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %478
  %480 = load i8, i8* %479, align 1
  %481 = zext i8 %480 to i32
  %482 = shl i32 %475, %481
  %483 = zext i8 %480 to i64
  %484 = shl i64 %474, %483
  %485 = sub nsw i32 %464, %481
  store i64 %484, i64* %324, align 8
  store i32 %485, i32* %318, align 8
  store i32 %482, i32* %313, align 4
  br i1 %476, label %569, label %486

486:                                              ; preds = %473
  %487 = load i32, i32* %451, align 4
  %488 = icmp sgt i32 %487, 0
  br i1 %488, label %489, label %530

489:                                              ; preds = %486, %514
  %490 = phi i64 [ %525, %514 ], [ %484, %486 ]
  %491 = phi i32 [ %526, %514 ], [ %485, %486 ]
  %492 = phi i32 [ %523, %514 ], [ %482, %486 ]
  %493 = phi i32 [ %495, %514 ], [ %487, %486 ]
  %494 = phi i32 [ %528, %514 ], [ 0, %486 ]
  %495 = add nsw i32 %493, -1
  %496 = shl i32 %492, 7
  %497 = add i32 %496, -128
  %498 = lshr i32 %497, 8
  %499 = add nuw nsw i32 %498, 1
  %500 = icmp slt i32 %491, 0
  br i1 %500, label %501, label %504

501:                                              ; preds = %489
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %502 = load i32, i32* %318, align 8
  %503 = load i64, i64* %324, align 8
  br label %504

504:                                              ; preds = %501, %489
  %505 = phi i64 [ %503, %501 ], [ %490, %489 ]
  %506 = phi i32 [ %502, %501 ], [ %491, %489 ]
  %507 = zext i32 %499 to i64
  %508 = shl i64 %507, 56
  %509 = icmp ult i64 %505, %508
  br i1 %509, label %514, label %510

510:                                              ; preds = %504
  %511 = load i32, i32* %313, align 4
  %512 = sub i32 %511, %499
  %513 = sub i64 %505, %508
  br label %514

514:                                              ; preds = %510, %504
  %515 = phi i64 [ %513, %510 ], [ %505, %504 ]
  %516 = phi i32 [ %512, %510 ], [ %499, %504 ]
  %517 = phi i32 [ 1, %510 ], [ 0, %504 ]
  %518 = and i32 %516, 255
  %519 = zext i32 %518 to i64
  %520 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %519
  %521 = load i8, i8* %520, align 1
  %522 = zext i8 %521 to i32
  %523 = shl i32 %516, %522
  %524 = zext i8 %521 to i64
  %525 = shl i64 %515, %524
  %526 = sub nsw i32 %506, %522
  store i64 %525, i64* %324, align 8
  store i32 %526, i32* %318, align 8
  store i32 %523, i32* %313, align 4
  %527 = shl i32 %517, %495
  %528 = or i32 %527, %494
  %529 = icmp sgt i32 %495, 0
  br i1 %529, label %489, label %530

530:                                              ; preds = %514, %486
  %531 = phi i32 [ 0, %486 ], [ %528, %514 ]
  %532 = trunc i32 %531 to i8
  %533 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 28, i64 %450, i64 %453
  store i8 %532, i8* %533, align 1
  %534 = load i32, i32* %313, align 4
  %535 = shl i32 %534, 7
  %536 = add i32 %535, -128
  %537 = lshr i32 %536, 8
  %538 = add nuw nsw i32 %537, 1
  %539 = load i32, i32* %318, align 8
  %540 = icmp slt i32 %539, 0
  br i1 %540, label %541, label %543

541:                                              ; preds = %530
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %542 = load i32, i32* %318, align 8
  br label %543

543:                                              ; preds = %541, %530
  %544 = phi i32 [ %542, %541 ], [ %539, %530 ]
  %545 = load i64, i64* %324, align 8
  %546 = zext i32 %538 to i64
  %547 = shl i64 %546, 56
  %548 = icmp ult i64 %545, %547
  br i1 %548, label %553, label %549

549:                                              ; preds = %543
  %550 = load i32, i32* %313, align 4
  %551 = sub i32 %550, %538
  %552 = sub i64 %545, %547
  br label %553

553:                                              ; preds = %543, %549
  %554 = phi i64 [ %552, %549 ], [ %545, %543 ]
  %555 = phi i32 [ %551, %549 ], [ %538, %543 ]
  %556 = phi i1 [ false, %549 ], [ true, %543 ]
  %557 = and i32 %555, 255
  %558 = zext i32 %557 to i64
  %559 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %558
  %560 = load i8, i8* %559, align 1
  %561 = zext i8 %560 to i32
  %562 = shl i32 %555, %561
  %563 = zext i8 %560 to i64
  %564 = shl i64 %554, %563
  %565 = sub nsw i32 %544, %561
  store i64 %564, i64* %324, align 8
  store i32 %565, i32* %318, align 8
  store i32 %562, i32* %313, align 4
  br i1 %556, label %571, label %566

566:                                              ; preds = %553
  %567 = load i8, i8* %533, align 1
  %568 = sub i8 0, %567
  store i8 %568, i8* %533, align 1
  br label %571

569:                                              ; preds = %473
  %570 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 28, i64 %450, i64 %453
  store i8 0, i8* %570, align 1
  br label %571

571:                                              ; preds = %553, %569, %566
  %572 = add nuw nsw i64 %453, 1
  %573 = icmp eq i64 %572, 4
  br i1 %573, label %574, label %452

574:                                              ; preds = %571
  %575 = add nuw nsw i64 %450, 1
  %576 = icmp eq i64 %575, 2
  br i1 %576, label %577, label %449

577:                                              ; preds = %574, %399
  %578 = load i8, i8* %380, align 1
  %579 = icmp eq i8 %578, 0
  br i1 %579, label %666, label %580

580:                                              ; preds = %577
  %581 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 27, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %581, i8 -1, i64 3, i1 false)
  br label %582

582:                                              ; preds = %660, %580
  %583 = phi i64 [ 0, %580 ], [ %661, %660 ]
  %584 = load i32, i32* %313, align 4
  %585 = shl i32 %584, 7
  %586 = add i32 %585, -128
  %587 = lshr i32 %586, 8
  %588 = add nuw nsw i32 %587, 1
  %589 = load i32, i32* %318, align 8
  %590 = icmp slt i32 %589, 0
  br i1 %590, label %591, label %593

591:                                              ; preds = %582
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %592 = load i32, i32* %318, align 8
  br label %593

593:                                              ; preds = %591, %582
  %594 = phi i32 [ %592, %591 ], [ %589, %582 ]
  %595 = load i64, i64* %324, align 8
  %596 = zext i32 %588 to i64
  %597 = shl i64 %596, 56
  %598 = icmp ult i64 %595, %597
  br i1 %598, label %603, label %599

599:                                              ; preds = %593
  %600 = load i32, i32* %313, align 4
  %601 = sub i32 %600, %588
  %602 = sub i64 %595, %597
  br label %603

603:                                              ; preds = %593, %599
  %604 = phi i64 [ %602, %599 ], [ %595, %593 ]
  %605 = phi i32 [ %601, %599 ], [ %588, %593 ]
  %606 = phi i1 [ false, %599 ], [ true, %593 ]
  %607 = and i32 %605, 255
  %608 = zext i32 %607 to i64
  %609 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %608
  %610 = load i8, i8* %609, align 1
  %611 = zext i8 %610 to i32
  %612 = shl i32 %605, %611
  %613 = zext i8 %610 to i64
  %614 = shl i64 %604, %613
  %615 = sub nsw i32 %594, %611
  store i64 %614, i64* %324, align 8
  store i32 %615, i32* %318, align 8
  store i32 %612, i32* %313, align 4
  br i1 %606, label %660, label %616

616:                                              ; preds = %603, %641
  %617 = phi i64 [ %652, %641 ], [ %614, %603 ]
  %618 = phi i32 [ %653, %641 ], [ %615, %603 ]
  %619 = phi i32 [ %650, %641 ], [ %612, %603 ]
  %620 = phi i32 [ %622, %641 ], [ 8, %603 ]
  %621 = phi i32 [ %655, %641 ], [ 0, %603 ]
  %622 = add nsw i32 %620, -1
  %623 = shl i32 %619, 7
  %624 = add i32 %623, -128
  %625 = lshr i32 %624, 8
  %626 = add nuw nsw i32 %625, 1
  %627 = icmp slt i32 %618, 0
  br i1 %627, label %628, label %631

628:                                              ; preds = %616
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %629 = load i32, i32* %318, align 8
  %630 = load i64, i64* %324, align 8
  br label %631

631:                                              ; preds = %628, %616
  %632 = phi i64 [ %630, %628 ], [ %617, %616 ]
  %633 = phi i32 [ %629, %628 ], [ %618, %616 ]
  %634 = zext i32 %626 to i64
  %635 = shl i64 %634, 56
  %636 = icmp ult i64 %632, %635
  br i1 %636, label %641, label %637

637:                                              ; preds = %631
  %638 = load i32, i32* %313, align 4
  %639 = sub i32 %638, %626
  %640 = sub i64 %632, %635
  br label %641

641:                                              ; preds = %637, %631
  %642 = phi i64 [ %640, %637 ], [ %632, %631 ]
  %643 = phi i32 [ %639, %637 ], [ %626, %631 ]
  %644 = phi i32 [ 1, %637 ], [ 0, %631 ]
  %645 = and i32 %643, 255
  %646 = zext i32 %645 to i64
  %647 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %646
  %648 = load i8, i8* %647, align 1
  %649 = zext i8 %648 to i32
  %650 = shl i32 %643, %649
  %651 = zext i8 %648 to i64
  %652 = shl i64 %642, %651
  %653 = sub nsw i32 %633, %649
  store i64 %652, i64* %324, align 8
  store i32 %653, i32* %318, align 8
  store i32 %650, i32* %313, align 4
  %654 = shl i32 %644, %622
  %655 = or i32 %654, %621
  %656 = icmp eq i32 %622, 0
  br i1 %656, label %657, label %616

657:                                              ; preds = %641
  %658 = trunc i32 %655 to i8
  %659 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 27, i64 %583
  store i8 %658, i8* %659, align 1
  br label %660

660:                                              ; preds = %603, %657
  %661 = add nuw nsw i64 %583, 1
  %662 = icmp eq i64 %661, 3
  br i1 %662, label %666, label %582

663:                                              ; preds = %333
  %664 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 24
  store i8 0, i8* %664, align 1
  %665 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 25
  store i8 0, i8* %665, align 2
  br label %666

666:                                              ; preds = %660, %577, %663
  %667 = load i32, i32* %313, align 4
  %668 = shl i32 %667, 7
  %669 = add i32 %668, -128
  %670 = lshr i32 %669, 8
  %671 = add nuw nsw i32 %670, 1
  %672 = load i32, i32* %318, align 8
  %673 = icmp slt i32 %672, 0
  br i1 %673, label %674, label %676

674:                                              ; preds = %666
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %675 = load i32, i32* %318, align 8
  br label %676

676:                                              ; preds = %674, %666
  %677 = phi i32 [ %675, %674 ], [ %672, %666 ]
  %678 = load i64, i64* %324, align 8
  %679 = zext i32 %671 to i64
  %680 = shl i64 %679, 56
  %681 = icmp ult i64 %678, %680
  br i1 %681, label %686, label %682

682:                                              ; preds = %676
  %683 = load i32, i32* %313, align 4
  %684 = sub i32 %683, %671
  %685 = sub i64 %678, %680
  br label %686

686:                                              ; preds = %676, %682
  %687 = phi i64 [ %685, %682 ], [ %678, %676 ]
  %688 = phi i32 [ %684, %682 ], [ %671, %676 ]
  %689 = phi i32 [ 1, %682 ], [ 0, %676 ]
  %690 = and i32 %688, 255
  %691 = zext i32 %690 to i64
  %692 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %691
  %693 = load i8, i8* %692, align 1
  %694 = zext i8 %693 to i32
  %695 = shl i32 %688, %694
  %696 = zext i8 %693 to i64
  %697 = shl i64 %687, %696
  %698 = sub nsw i32 %677, %694
  store i64 %697, i64* %324, align 8
  store i32 %698, i32* %318, align 8
  store i32 %695, i32* %313, align 4
  %699 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 43
  store i32 %689, i32* %699, align 16
  br label %700

700:                                              ; preds = %725, %686
  %701 = phi i64 [ %697, %686 ], [ %736, %725 ]
  %702 = phi i32 [ %698, %686 ], [ %737, %725 ]
  %703 = phi i32 [ %695, %686 ], [ %734, %725 ]
  %704 = phi i32 [ 6, %686 ], [ %706, %725 ]
  %705 = phi i32 [ 0, %686 ], [ %739, %725 ]
  %706 = add nsw i32 %704, -1
  %707 = shl i32 %703, 7
  %708 = add i32 %707, -128
  %709 = lshr i32 %708, 8
  %710 = add nuw nsw i32 %709, 1
  %711 = icmp slt i32 %702, 0
  br i1 %711, label %712, label %715

712:                                              ; preds = %700
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %713 = load i32, i32* %318, align 8
  %714 = load i64, i64* %324, align 8
  br label %715

715:                                              ; preds = %712, %700
  %716 = phi i64 [ %714, %712 ], [ %701, %700 ]
  %717 = phi i32 [ %713, %712 ], [ %702, %700 ]
  %718 = zext i32 %710 to i64
  %719 = shl i64 %718, 56
  %720 = icmp ult i64 %716, %719
  br i1 %720, label %725, label %721

721:                                              ; preds = %715
  %722 = load i32, i32* %313, align 4
  %723 = sub i32 %722, %710
  %724 = sub i64 %716, %719
  br label %725

725:                                              ; preds = %721, %715
  %726 = phi i64 [ %724, %721 ], [ %716, %715 ]
  %727 = phi i32 [ %723, %721 ], [ %710, %715 ]
  %728 = phi i32 [ 1, %721 ], [ 0, %715 ]
  %729 = and i32 %727, 255
  %730 = zext i32 %729 to i64
  %731 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %730
  %732 = load i8, i8* %731, align 1
  %733 = zext i8 %732 to i32
  %734 = shl i32 %727, %733
  %735 = zext i8 %732 to i64
  %736 = shl i64 %726, %735
  %737 = sub nsw i32 %717, %733
  store i64 %736, i64* %324, align 8
  store i32 %737, i32* %318, align 8
  store i32 %734, i32* %313, align 4
  %738 = shl i32 %728, %706
  %739 = or i32 %738, %705
  %740 = icmp eq i32 %706, 0
  br i1 %740, label %741, label %700

741:                                              ; preds = %725
  %742 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 46
  store i32 %739, i32* %742, align 16
  %743 = shl i32 %734, 7
  %744 = add i32 %743, -128
  %745 = lshr i32 %744, 8
  %746 = add nuw nsw i32 %745, 1
  %747 = icmp slt i32 %737, 0
  br i1 %747, label %748, label %751

748:                                              ; preds = %741
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %749 = load i32, i32* %318, align 8
  %750 = load i64, i64* %324, align 8
  br label %751

751:                                              ; preds = %748, %741
  %752 = phi i64 [ %750, %748 ], [ %736, %741 ]
  %753 = phi i32 [ %749, %748 ], [ %737, %741 ]
  %754 = zext i32 %746 to i64
  %755 = shl i64 %754, 56
  %756 = icmp ult i64 %752, %755
  br i1 %756, label %761, label %757

757:                                              ; preds = %751
  %758 = load i32, i32* %313, align 4
  %759 = sub i32 %758, %746
  %760 = sub i64 %752, %755
  br label %761

761:                                              ; preds = %757, %751
  %762 = phi i64 [ %760, %757 ], [ %752, %751 ]
  %763 = phi i32 [ %759, %757 ], [ %746, %751 ]
  %764 = phi i32 [ 4, %757 ], [ 0, %751 ]
  %765 = and i32 %763, 255
  %766 = zext i32 %765 to i64
  %767 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %766
  %768 = load i8, i8* %767, align 1
  %769 = zext i8 %768 to i32
  %770 = shl i32 %763, %769
  %771 = zext i8 %768 to i64
  %772 = shl i64 %762, %771
  %773 = sub nsw i32 %753, %769
  store i64 %772, i64* %324, align 8
  store i32 %773, i32* %318, align 8
  store i32 %770, i32* %313, align 4
  %774 = shl i32 %770, 7
  %775 = add i32 %774, -128
  %776 = lshr i32 %775, 8
  %777 = add nuw nsw i32 %776, 1
  %778 = icmp slt i32 %773, 0
  br i1 %778, label %3757, label %3760

779:                                              ; preds = %3802
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %780 = load i32, i32* %318, align 8
  %781 = load i64, i64* %324, align 8
  br label %782

782:                                              ; preds = %779, %3802
  %783 = phi i64 [ %781, %779 ], [ %3813, %3802 ]
  %784 = phi i32 [ %780, %779 ], [ %3814, %3802 ]
  %785 = zext i32 %3821 to i64
  %786 = shl i64 %785, 56
  %787 = icmp ult i64 %783, %786
  br i1 %787, label %792, label %788

788:                                              ; preds = %782
  %789 = load i32, i32* %313, align 4
  %790 = sub i32 %789, %3821
  %791 = sub i64 %783, %786
  br label %792

792:                                              ; preds = %782, %788
  %793 = phi i64 [ %791, %788 ], [ %783, %782 ]
  %794 = phi i32 [ %790, %788 ], [ %3821, %782 ]
  %795 = phi i8 [ 1, %788 ], [ 0, %782 ]
  %796 = and i32 %794, 255
  %797 = zext i32 %796 to i64
  %798 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %797
  %799 = load i8, i8* %798, align 1
  %800 = zext i8 %799 to i32
  %801 = shl i32 %794, %800
  %802 = zext i8 %799 to i64
  %803 = shl i64 %793, %802
  %804 = sub nsw i32 %784, %800
  store i64 %803, i64* %324, align 8
  store i32 %804, i32* %318, align 8
  store i32 %801, i32* %313, align 4
  %805 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 29
  store i8 %795, i8* %805, align 1
  %806 = icmp eq i8 %795, 0
  br i1 %806, label %1078, label %807

807:                                              ; preds = %792
  %808 = shl i32 %801, 7
  %809 = add i32 %808, -128
  %810 = lshr i32 %809, 8
  %811 = add nuw nsw i32 %810, 1
  %812 = icmp slt i32 %804, 0
  br i1 %812, label %813, label %816

813:                                              ; preds = %807
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %814 = load i32, i32* %318, align 8
  %815 = load i64, i64* %324, align 8
  br label %816

816:                                              ; preds = %813, %807
  %817 = phi i64 [ %815, %813 ], [ %803, %807 ]
  %818 = phi i32 [ %814, %813 ], [ %804, %807 ]
  %819 = zext i32 %811 to i64
  %820 = shl i64 %819, 56
  %821 = icmp ult i64 %817, %820
  br i1 %821, label %826, label %822

822:                                              ; preds = %816
  %823 = load i32, i32* %313, align 4
  %824 = sub i32 %823, %811
  %825 = sub i64 %817, %820
  br label %826

826:                                              ; preds = %816, %822
  %827 = phi i64 [ %825, %822 ], [ %817, %816 ]
  %828 = phi i32 [ %824, %822 ], [ %811, %816 ]
  %829 = phi i8 [ 1, %822 ], [ 0, %816 ]
  %830 = and i32 %828, 255
  %831 = zext i32 %830 to i64
  %832 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %831
  %833 = load i8, i8* %832, align 1
  %834 = zext i8 %833 to i32
  %835 = shl i32 %828, %834
  %836 = zext i8 %833 to i64
  %837 = shl i64 %827, %836
  %838 = sub nsw i32 %818, %834
  store i64 %837, i64* %324, align 8
  store i32 %838, i32* %318, align 8
  store i32 %835, i32* %313, align 4
  store i8 %829, i8* %3817, align 16
  %839 = icmp eq i8 %829, 0
  br i1 %839, label %1078, label %840

840:                                              ; preds = %826, %956
  %841 = phi i32 [ %958, %956 ], [ %838, %826 ]
  %842 = phi i32 [ %957, %956 ], [ %835, %826 ]
  %843 = phi i64 [ %954, %956 ], [ 0, %826 ]
  %844 = shl i32 %842, 7
  %845 = add i32 %844, -128
  %846 = lshr i32 %845, 8
  %847 = add nuw nsw i32 %846, 1
  %848 = icmp slt i32 %841, 0
  br i1 %848, label %849, label %851

849:                                              ; preds = %840
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %850 = load i32, i32* %318, align 8
  br label %851

851:                                              ; preds = %849, %840
  %852 = phi i32 [ %850, %849 ], [ %841, %840 ]
  %853 = load i64, i64* %324, align 8
  %854 = zext i32 %847 to i64
  %855 = shl i64 %854, 56
  %856 = icmp ult i64 %853, %855
  br i1 %856, label %861, label %857

857:                                              ; preds = %851
  %858 = load i32, i32* %313, align 4
  %859 = sub i32 %858, %847
  %860 = sub i64 %853, %855
  br label %861

861:                                              ; preds = %851, %857
  %862 = phi i64 [ %860, %857 ], [ %853, %851 ]
  %863 = phi i32 [ %859, %857 ], [ %847, %851 ]
  %864 = phi i1 [ false, %857 ], [ true, %851 ]
  %865 = and i32 %863, 255
  %866 = zext i32 %865 to i64
  %867 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %866
  %868 = load i8, i8* %867, align 1
  %869 = zext i8 %868 to i32
  %870 = shl i32 %863, %869
  %871 = zext i8 %868 to i64
  %872 = shl i64 %862, %871
  %873 = sub nsw i32 %852, %869
  store i64 %872, i64* %324, align 8
  store i32 %873, i32* %318, align 8
  store i32 %870, i32* %313, align 4
  br i1 %864, label %953, label %874

874:                                              ; preds = %861, %899
  %875 = phi i64 [ %910, %899 ], [ %872, %861 ]
  %876 = phi i32 [ %911, %899 ], [ %873, %861 ]
  %877 = phi i32 [ %908, %899 ], [ %870, %861 ]
  %878 = phi i32 [ %880, %899 ], [ 6, %861 ]
  %879 = phi i32 [ %913, %899 ], [ 0, %861 ]
  %880 = add nsw i32 %878, -1
  %881 = shl i32 %877, 7
  %882 = add i32 %881, -128
  %883 = lshr i32 %882, 8
  %884 = add nuw nsw i32 %883, 1
  %885 = icmp slt i32 %876, 0
  br i1 %885, label %886, label %889

886:                                              ; preds = %874
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %887 = load i32, i32* %318, align 8
  %888 = load i64, i64* %324, align 8
  br label %889

889:                                              ; preds = %886, %874
  %890 = phi i64 [ %888, %886 ], [ %875, %874 ]
  %891 = phi i32 [ %887, %886 ], [ %876, %874 ]
  %892 = zext i32 %884 to i64
  %893 = shl i64 %892, 56
  %894 = icmp ult i64 %890, %893
  br i1 %894, label %899, label %895

895:                                              ; preds = %889
  %896 = load i32, i32* %313, align 4
  %897 = sub i32 %896, %884
  %898 = sub i64 %890, %893
  br label %899

899:                                              ; preds = %895, %889
  %900 = phi i64 [ %898, %895 ], [ %890, %889 ]
  %901 = phi i32 [ %897, %895 ], [ %884, %889 ]
  %902 = phi i32 [ 1, %895 ], [ 0, %889 ]
  %903 = and i32 %901, 255
  %904 = zext i32 %903 to i64
  %905 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %904
  %906 = load i8, i8* %905, align 1
  %907 = zext i8 %906 to i32
  %908 = shl i32 %901, %907
  %909 = zext i8 %906 to i64
  %910 = shl i64 %900, %909
  %911 = sub nsw i32 %891, %907
  store i64 %910, i64* %324, align 8
  store i32 %911, i32* %318, align 8
  store i32 %908, i32* %313, align 4
  %912 = shl i32 %902, %880
  %913 = or i32 %912, %879
  %914 = icmp eq i32 %880, 0
  br i1 %914, label %915, label %874

915:                                              ; preds = %899
  %916 = trunc i32 %913 to i8
  %917 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 32, i64 %843
  store i8 %916, i8* %917, align 1
  %918 = load i32, i32* %313, align 4
  %919 = shl i32 %918, 7
  %920 = add i32 %919, -128
  %921 = lshr i32 %920, 8
  %922 = add nuw nsw i32 %921, 1
  %923 = load i32, i32* %318, align 8
  %924 = icmp slt i32 %923, 0
  br i1 %924, label %925, label %927

925:                                              ; preds = %915
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %926 = load i32, i32* %318, align 8
  br label %927

927:                                              ; preds = %925, %915
  %928 = phi i32 [ %926, %925 ], [ %923, %915 ]
  %929 = load i64, i64* %324, align 8
  %930 = zext i32 %922 to i64
  %931 = shl i64 %930, 56
  %932 = icmp ult i64 %929, %931
  br i1 %932, label %937, label %933

933:                                              ; preds = %927
  %934 = load i32, i32* %313, align 4
  %935 = sub i32 %934, %922
  %936 = sub i64 %929, %931
  br label %937

937:                                              ; preds = %927, %933
  %938 = phi i64 [ %936, %933 ], [ %929, %927 ]
  %939 = phi i32 [ %935, %933 ], [ %922, %927 ]
  %940 = phi i1 [ false, %933 ], [ true, %927 ]
  %941 = and i32 %939, 255
  %942 = zext i32 %941 to i64
  %943 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %942
  %944 = load i8, i8* %943, align 1
  %945 = zext i8 %944 to i32
  %946 = shl i32 %939, %945
  %947 = zext i8 %944 to i64
  %948 = shl i64 %938, %947
  %949 = sub nsw i32 %928, %945
  store i64 %948, i64* %324, align 8
  store i32 %949, i32* %318, align 8
  store i32 %946, i32* %313, align 4
  br i1 %940, label %953, label %950

950:                                              ; preds = %937
  %951 = load i8, i8* %917, align 1
  %952 = sub i8 0, %951
  store i8 %952, i8* %917, align 1
  br label %953

953:                                              ; preds = %937, %861, %950
  %954 = add nuw nsw i64 %843, 1
  %955 = icmp eq i64 %954, 4
  br i1 %955, label %959, label %956

956:                                              ; preds = %953
  %957 = load i32, i32* %313, align 4
  %958 = load i32, i32* %318, align 8
  br label %840

959:                                              ; preds = %953, %1072
  %960 = phi i64 [ %1073, %1072 ], [ 0, %953 ]
  %961 = load i32, i32* %313, align 4
  %962 = shl i32 %961, 7
  %963 = add i32 %962, -128
  %964 = lshr i32 %963, 8
  %965 = add nuw nsw i32 %964, 1
  %966 = load i32, i32* %318, align 8
  %967 = icmp slt i32 %966, 0
  br i1 %967, label %968, label %970

968:                                              ; preds = %959
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %969 = load i32, i32* %318, align 8
  br label %970

970:                                              ; preds = %968, %959
  %971 = phi i32 [ %969, %968 ], [ %966, %959 ]
  %972 = load i64, i64* %324, align 8
  %973 = zext i32 %965 to i64
  %974 = shl i64 %973, 56
  %975 = icmp ult i64 %972, %974
  br i1 %975, label %980, label %976

976:                                              ; preds = %970
  %977 = load i32, i32* %313, align 4
  %978 = sub i32 %977, %965
  %979 = sub i64 %972, %974
  br label %980

980:                                              ; preds = %970, %976
  %981 = phi i64 [ %979, %976 ], [ %972, %970 ]
  %982 = phi i32 [ %978, %976 ], [ %965, %970 ]
  %983 = phi i1 [ false, %976 ], [ true, %970 ]
  %984 = and i32 %982, 255
  %985 = zext i32 %984 to i64
  %986 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %985
  %987 = load i8, i8* %986, align 1
  %988 = zext i8 %987 to i32
  %989 = shl i32 %982, %988
  %990 = zext i8 %987 to i64
  %991 = shl i64 %981, %990
  %992 = sub nsw i32 %971, %988
  store i64 %991, i64* %324, align 8
  store i32 %992, i32* %318, align 8
  store i32 %989, i32* %313, align 4
  br i1 %983, label %1072, label %993

993:                                              ; preds = %980, %1018
  %994 = phi i64 [ %1029, %1018 ], [ %991, %980 ]
  %995 = phi i32 [ %1030, %1018 ], [ %992, %980 ]
  %996 = phi i32 [ %1027, %1018 ], [ %989, %980 ]
  %997 = phi i32 [ %999, %1018 ], [ 6, %980 ]
  %998 = phi i32 [ %1032, %1018 ], [ 0, %980 ]
  %999 = add nsw i32 %997, -1
  %1000 = shl i32 %996, 7
  %1001 = add i32 %1000, -128
  %1002 = lshr i32 %1001, 8
  %1003 = add nuw nsw i32 %1002, 1
  %1004 = icmp slt i32 %995, 0
  br i1 %1004, label %1005, label %1008

1005:                                             ; preds = %993
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1006 = load i32, i32* %318, align 8
  %1007 = load i64, i64* %324, align 8
  br label %1008

1008:                                             ; preds = %1005, %993
  %1009 = phi i64 [ %1007, %1005 ], [ %994, %993 ]
  %1010 = phi i32 [ %1006, %1005 ], [ %995, %993 ]
  %1011 = zext i32 %1003 to i64
  %1012 = shl i64 %1011, 56
  %1013 = icmp ult i64 %1009, %1012
  br i1 %1013, label %1018, label %1014

1014:                                             ; preds = %1008
  %1015 = load i32, i32* %313, align 4
  %1016 = sub i32 %1015, %1003
  %1017 = sub i64 %1009, %1012
  br label %1018

1018:                                             ; preds = %1014, %1008
  %1019 = phi i64 [ %1017, %1014 ], [ %1009, %1008 ]
  %1020 = phi i32 [ %1016, %1014 ], [ %1003, %1008 ]
  %1021 = phi i32 [ 1, %1014 ], [ 0, %1008 ]
  %1022 = and i32 %1020, 255
  %1023 = zext i32 %1022 to i64
  %1024 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1023
  %1025 = load i8, i8* %1024, align 1
  %1026 = zext i8 %1025 to i32
  %1027 = shl i32 %1020, %1026
  %1028 = zext i8 %1025 to i64
  %1029 = shl i64 %1019, %1028
  %1030 = sub nsw i32 %1010, %1026
  store i64 %1029, i64* %324, align 8
  store i32 %1030, i32* %318, align 8
  store i32 %1027, i32* %313, align 4
  %1031 = shl i32 %1021, %999
  %1032 = or i32 %1031, %998
  %1033 = icmp eq i32 %999, 0
  br i1 %1033, label %1034, label %993

1034:                                             ; preds = %1018
  %1035 = trunc i32 %1032 to i8
  %1036 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 34, i64 %960
  store i8 %1035, i8* %1036, align 1
  %1037 = load i32, i32* %313, align 4
  %1038 = shl i32 %1037, 7
  %1039 = add i32 %1038, -128
  %1040 = lshr i32 %1039, 8
  %1041 = add nuw nsw i32 %1040, 1
  %1042 = load i32, i32* %318, align 8
  %1043 = icmp slt i32 %1042, 0
  br i1 %1043, label %1044, label %1046

1044:                                             ; preds = %1034
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1045 = load i32, i32* %318, align 8
  br label %1046

1046:                                             ; preds = %1044, %1034
  %1047 = phi i32 [ %1045, %1044 ], [ %1042, %1034 ]
  %1048 = load i64, i64* %324, align 8
  %1049 = zext i32 %1041 to i64
  %1050 = shl i64 %1049, 56
  %1051 = icmp ult i64 %1048, %1050
  br i1 %1051, label %1056, label %1052

1052:                                             ; preds = %1046
  %1053 = load i32, i32* %313, align 4
  %1054 = sub i32 %1053, %1041
  %1055 = sub i64 %1048, %1050
  br label %1056

1056:                                             ; preds = %1046, %1052
  %1057 = phi i64 [ %1055, %1052 ], [ %1048, %1046 ]
  %1058 = phi i32 [ %1054, %1052 ], [ %1041, %1046 ]
  %1059 = phi i1 [ false, %1052 ], [ true, %1046 ]
  %1060 = and i32 %1058, 255
  %1061 = zext i32 %1060 to i64
  %1062 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1061
  %1063 = load i8, i8* %1062, align 1
  %1064 = zext i8 %1063 to i32
  %1065 = shl i32 %1058, %1064
  %1066 = zext i8 %1063 to i64
  %1067 = shl i64 %1057, %1066
  %1068 = sub nsw i32 %1047, %1064
  store i64 %1067, i64* %324, align 8
  store i32 %1068, i32* %318, align 8
  store i32 %1065, i32* %313, align 4
  br i1 %1059, label %1072, label %1069

1069:                                             ; preds = %1056
  %1070 = load i8, i8* %1036, align 1
  %1071 = sub i8 0, %1070
  store i8 %1071, i8* %1036, align 1
  br label %1072

1072:                                             ; preds = %1056, %980, %1069
  %1073 = add nuw nsw i64 %960, 1
  %1074 = icmp eq i64 %1073, 4
  br i1 %1074, label %1075, label %959

1075:                                             ; preds = %1072
  %1076 = load i32, i32* %313, align 4
  %1077 = load i32, i32* %318, align 8
  br label %1078

1078:                                             ; preds = %1075, %826, %792
  %1079 = phi i32 [ %1077, %1075 ], [ %838, %826 ], [ %804, %792 ]
  %1080 = phi i32 [ %1076, %1075 ], [ %835, %826 ], [ %801, %792 ]
  %1081 = getelementptr inbounds i8, i8* %145, i64 %146
  %1082 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 2
  %1083 = getelementptr inbounds [9 x i8*], [9 x i8*]* %1082, i64 0, i64 0
  %1084 = load i8*, i8** %1083, align 8
  %1085 = load i32, i32* %11, align 8
  %1086 = zext i32 %1085 to i64
  %1087 = shl i32 %1080, 7
  %1088 = add i32 %1087, -128
  %1089 = lshr i32 %1088, 8
  %1090 = add nuw nsw i32 %1089, 1
  %1091 = icmp slt i32 %1079, 0
  br i1 %1091, label %1092, label %1094

1092:                                             ; preds = %1078
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1093 = load i32, i32* %318, align 8
  br label %1094

1094:                                             ; preds = %1092, %1078
  %1095 = phi i32 [ %1093, %1092 ], [ %1079, %1078 ]
  %1096 = load i64, i64* %324, align 8
  %1097 = zext i32 %1090 to i64
  %1098 = shl i64 %1097, 56
  %1099 = icmp ult i64 %1096, %1098
  br i1 %1099, label %1104, label %1100

1100:                                             ; preds = %1094
  %1101 = load i32, i32* %313, align 4
  %1102 = sub i32 %1101, %1090
  %1103 = sub i64 %1096, %1098
  br label %1104

1104:                                             ; preds = %1100, %1094
  %1105 = phi i64 [ %1103, %1100 ], [ %1096, %1094 ]
  %1106 = phi i32 [ %1102, %1100 ], [ %1090, %1094 ]
  %1107 = phi i32 [ 2, %1100 ], [ 0, %1094 ]
  %1108 = and i32 %1106, 255
  %1109 = zext i32 %1108 to i64
  %1110 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1109
  %1111 = load i8, i8* %1110, align 1
  %1112 = zext i8 %1111 to i32
  %1113 = shl i32 %1106, %1112
  %1114 = zext i8 %1111 to i64
  %1115 = shl i64 %1105, %1114
  %1116 = sub nsw i32 %1095, %1112
  store i64 %1115, i64* %324, align 8
  store i32 %1116, i32* %318, align 8
  store i32 %1113, i32* %313, align 4
  %1117 = shl i32 %1113, 7
  %1118 = add i32 %1117, -128
  %1119 = lshr i32 %1118, 8
  %1120 = add nuw nsw i32 %1119, 1
  %1121 = icmp slt i32 %1116, 0
  br i1 %1121, label %1295, label %1298

1122:                                             ; preds = %1308
  store i32 %1321, i32* %1326, align 4
  br label %1123

1123:                                             ; preds = %1327, %1122
  %1124 = phi i32 [ %1328, %1327 ], [ %1321, %1122 ]
  %1125 = shl i32 1, %1124
  %1126 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 1
  %1127 = load i32, i32* %1126, align 4
  %1128 = icmp eq i32 %1127, 0
  br i1 %1128, label %1258, label %1129

1129:                                             ; preds = %1123
  %1130 = bitcast [9 x i8*]* %1082 to i64*
  %1131 = ptrtoint i8* %1081 to i64
  %1132 = shl i32 3, %1124
  %1133 = add i32 %1132, -3
  %1134 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %7, i64 0, i32 0
  %1135 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 2, i64 1
  %1136 = add nsw i32 %1125, -1
  %1137 = ptrtoint i8* %1323 to i64
  %1138 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 0
  %1139 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 1
  %1140 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 2
  %1141 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 32
  br label %1142

1142:                                             ; preds = %1253, %1129
  %1143 = phi i32 [ 0, %1129 ], [ %1255, %1253 ]
  %1144 = zext i32 %1143 to i64
  %1145 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 3, i64 %1144
  %1146 = load i32, i32* %1145, align 4
  %1147 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 2, i64 %1144
  %1148 = load i8*, i8** %1147, align 8
  %1149 = zext i32 %1146 to i64
  %1150 = getelementptr inbounds i8, i8* %1148, i64 %1149
  %1151 = icmp eq i32 %1143, 0
  br i1 %1151, label %1152, label %1166

1152:                                             ; preds = %1142
  %1153 = load i64, i64* %1130, align 8
  %1154 = sub i64 %1131, %1153
  %1155 = trunc i64 %1154 to i32
  %1156 = add i32 %1133, %1155
  %1157 = icmp ult i32 %1146, %1156
  br i1 %1157, label %1158, label %1159

1158:                                             ; preds = %1152
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1134, i32 7, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i32 %1146) #4
  br label %1159

1159:                                             ; preds = %1158, %1152
  %1160 = sub i32 %1146, %1156
  %1161 = icmp eq i32 %1160, 0
  br i1 %1161, label %1253, label %1162

1162:                                             ; preds = %1159
  store i32 %1156, i32* %11, align 8
  %1163 = load i8*, i8** %1083, align 8
  %1164 = zext i32 %1156 to i64
  %1165 = getelementptr inbounds i8, i8* %1163, i64 %1164
  store i8* %1165, i8** %1135, align 8
  br label %1168

1166:                                             ; preds = %1142
  %1167 = icmp eq i32 %1146, 0
  br i1 %1167, label %1253, label %1168

1168:                                             ; preds = %1166, %1162
  %1169 = phi i8* [ %1165, %1162 ], [ %1148, %1166 ]
  %1170 = phi i32 [ %1160, %1162 ], [ %1146, %1166 ]
  %1171 = phi i32 [ 1, %1162 ], [ %1143, %1166 ]
  %1172 = ptrtoint i8* %1150 to i64
  br label %1173

1173:                                             ; preds = %1247, %1168
  %1174 = phi i8* [ %1169, %1168 ], [ %1250, %1247 ]
  %1175 = phi i32 [ %1170, %1168 ], [ %1245, %1247 ]
  %1176 = phi i32 [ %1171, %1168 ], [ %1248, %1247 ]
  %1177 = zext i32 %1176 to i64
  %1178 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 2, i64 %1177
  %1179 = add i32 %1176, -1
  %1180 = mul nsw i32 %1179, 3
  %1181 = sext i32 %1180 to i64
  %1182 = getelementptr inbounds i8, i8* %1081, i64 %1181
  %1183 = ptrtoint i8* %1174 to i64
  %1184 = sub i64 %1172, %1183
  %1185 = icmp slt i64 %1184, 0
  br i1 %1185, label %1186, label %1188

1186:                                             ; preds = %1173
  %1187 = trunc i64 %1184 to i32
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1134, i32 7, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.8, i64 0, i64 0), i32 %1187) #4
  br label %1188

1188:                                             ; preds = %1186, %1173
  %1189 = icmp sgt i32 %1136, %1179
  br i1 %1189, label %1190, label %1221

1190:                                             ; preds = %1188
  %1191 = icmp ult i8* %1182, %1323
  br i1 %1191, label %1192, label %1215

1192:                                             ; preds = %1190
  %1193 = ptrtoint i8* %1182 to i64
  %1194 = sub i64 %1137, %1193
  %1195 = icmp ult i64 %1194, 3
  br i1 %1195, label %1215, label %1196

1196:                                             ; preds = %1192
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %1138) #4
  store i8 -86, i8* %1138, align 1
  store i8 -86, i8* %1139, align 1
  store i8 -86, i8* %1140, align 1
  %1197 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %229, align 8
  %1198 = icmp eq void (i8*, i8*, i8*, i32)* %1197, null
  br i1 %1198, label %1201, label %1199

1199:                                             ; preds = %1196
  %1200 = load i8*, i8** %231, align 16
  call void %1197(i8* %1200, i8* %1182, i8* nonnull %1138, i32 3) #4
  br label %1201

1201:                                             ; preds = %1199, %1196
  %1202 = phi i8* [ %1138, %1199 ], [ %1182, %1196 ]
  %1203 = load i8, i8* %1202, align 1
  %1204 = zext i8 %1203 to i32
  %1205 = getelementptr inbounds i8, i8* %1202, i64 1
  %1206 = load i8, i8* %1205, align 1
  %1207 = zext i8 %1206 to i32
  %1208 = shl nuw nsw i32 %1207, 8
  %1209 = or i32 %1208, %1204
  %1210 = getelementptr inbounds i8, i8* %1202, i64 2
  %1211 = load i8, i8* %1210, align 1
  %1212 = zext i8 %1211 to i32
  %1213 = shl nuw nsw i32 %1212, 16
  %1214 = or i32 %1209, %1213
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %1138) #4
  br label %1223

1215:                                             ; preds = %1192, %1190
  %1216 = load i32, i32* %1141, align 4
  %1217 = icmp eq i32 %1216, 0
  br i1 %1217, label %1220, label %1218

1218:                                             ; preds = %1215
  %1219 = trunc i64 %1184 to i32
  br label %1223

1220:                                             ; preds = %1215
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1134, i32 7, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i64 0, i64 0)) #4
  br label %1231

1221:                                             ; preds = %1188
  %1222 = trunc i64 %1184 to i32
  br label %1223

1223:                                             ; preds = %1221, %1218, %1201
  %1224 = phi i32 [ %1214, %1201 ], [ %1219, %1218 ], [ %1222, %1221 ]
  %1225 = icmp eq i32 %1224, 0
  %1226 = icmp ule i8* %1150, %1174
  %1227 = or i1 %1226, %1225
  %1228 = zext i32 %1224 to i64
  %1229 = icmp ult i64 %1184, %1228
  %1230 = or i1 %1227, %1229
  br i1 %1230, label %1231, label %1238

1231:                                             ; preds = %1223, %1220
  %1232 = phi i32 [ 0, %1220 ], [ %1224, %1223 ]
  %1233 = load i32, i32* %1141, align 4
  %1234 = icmp eq i32 %1233, 0
  br i1 %1234, label %1237, label %1235

1235:                                             ; preds = %1231
  %1236 = trunc i64 %1184 to i32
  br label %1238

1237:                                             ; preds = %1231
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1134, i32 7, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.10, i64 0, i64 0), i32 %1176) #4
  br label %1238

1238:                                             ; preds = %1237, %1235, %1223
  %1239 = phi i32 [ %1236, %1235 ], [ %1232, %1237 ], [ %1224, %1223 ]
  %1240 = zext i32 %1239 to i64
  %1241 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 3, i64 %1177
  store i32 %1239, i32* %1241, align 4
  %1242 = icmp ult i32 %1175, %1239
  br i1 %1242, label %1243, label %1244

1243:                                             ; preds = %1238
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1134, i32 7, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i32 %1175) #4
  br label %1244

1244:                                             ; preds = %1243, %1238
  %1245 = sub i32 %1175, %1239
  %1246 = icmp eq i32 %1245, 0
  br i1 %1246, label %1253, label %1247

1247:                                             ; preds = %1244
  %1248 = add i32 %1176, 1
  %1249 = load i8*, i8** %1178, align 8
  %1250 = getelementptr inbounds i8, i8* %1249, i64 %1240
  %1251 = zext i32 %1248 to i64
  %1252 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 2, i64 %1251
  store i8* %1250, i8** %1252, align 8
  br label %1173

1253:                                             ; preds = %1244, %1166, %1159
  %1254 = phi i32 [ %1143, %1166 ], [ 0, %1159 ], [ %1176, %1244 ]
  %1255 = add i32 %1254, 1
  %1256 = load i32, i32* %1126, align 4
  %1257 = icmp ult i32 %1255, %1256
  br i1 %1257, label %1142, label %1258

1258:                                             ; preds = %1253, %1123
  %1259 = add i32 %1125, 1
  store i32 %1259, i32* %1126, align 4
  %1260 = icmp ugt i32 %1259, 1
  br i1 %1260, label %1261, label %1282

1261:                                             ; preds = %1258
  %1262 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %7, i64 0, i32 0
  br label %1263

1263:                                             ; preds = %1276, %1261
  %1264 = phi i64 [ 1, %1261 ], [ %1278, %1276 ]
  %1265 = phi %struct.BOOL_DECODER* [ %1322, %1261 ], [ %1277, %1276 ]
  %1266 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 2, i64 %1264
  %1267 = load i8*, i8** %1266, align 8
  %1268 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 5, i32 3, i64 %1264
  %1269 = load i32, i32* %1268, align 4
  %1270 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %229, align 8
  %1271 = load i8*, i8** %231, align 16
  %1272 = call i32 @vp8dx_start_decode(%struct.BOOL_DECODER* %1265, i8* %1267, i32 %1269, void (i8*, i8*, i8*, i32)* %1270, i8* %1271) #4
  %1273 = icmp eq i32 %1272, 0
  br i1 %1273, label %1276, label %1274

1274:                                             ; preds = %1263
  %1275 = trunc i64 %1264 to i32
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1262, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0), i32 %1275) #4
  br label %1276

1276:                                             ; preds = %1274, %1263
  %1277 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %1265, i64 1
  %1278 = add nuw nsw i64 %1264, 1
  %1279 = load i32, i32* %1126, align 4
  %1280 = zext i32 %1279 to i64
  %1281 = icmp ult i64 %1278, %1280
  br i1 %1281, label %1263, label %1282

1282:                                             ; preds = %1276, %1258
  %1283 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 9
  %1284 = load i32, i32* %1283, align 4
  %1285 = add i32 %1125, -1
  %1286 = icmp ugt i32 %1284, %1285
  br i1 %1286, label %1287, label %1288

1287:                                             ; preds = %1282
  store i32 %1285, i32* %1283, align 4
  br label %1288

1288:                                             ; preds = %1287, %1282
  %1289 = phi i32 [ %1285, %1287 ], [ %1284, %1282 ]
  %1290 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 27
  %1291 = load i32, i32* %1290, align 4
  %1292 = icmp slt i32 %1289, %1291
  br i1 %1292, label %1329, label %1293

1293:                                             ; preds = %1288
  %1294 = add nsw i32 %1291, -1
  store i32 %1294, i32* %1283, align 4
  br label %1329

1295:                                             ; preds = %1104
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1296 = load i32, i32* %318, align 8
  %1297 = load i64, i64* %324, align 8
  br label %1298

1298:                                             ; preds = %1295, %1104
  %1299 = phi i64 [ %1297, %1295 ], [ %1115, %1104 ]
  %1300 = phi i32 [ %1296, %1295 ], [ %1116, %1104 ]
  %1301 = zext i32 %1120 to i64
  %1302 = shl i64 %1301, 56
  %1303 = icmp ult i64 %1299, %1302
  br i1 %1303, label %1308, label %1304

1304:                                             ; preds = %1298
  %1305 = load i32, i32* %313, align 4
  %1306 = sub i32 %1305, %1120
  %1307 = sub i64 %1299, %1302
  br label %1308

1308:                                             ; preds = %1304, %1298
  %1309 = phi i64 [ %1307, %1304 ], [ %1299, %1298 ]
  %1310 = phi i32 [ %1306, %1304 ], [ %1120, %1298 ]
  %1311 = phi i32 [ 1, %1304 ], [ 0, %1298 ]
  %1312 = and i32 %1310, 255
  %1313 = zext i32 %1312 to i64
  %1314 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1313
  %1315 = load i8, i8* %1314, align 1
  %1316 = zext i8 %1315 to i32
  %1317 = shl i32 %1310, %1316
  %1318 = zext i8 %1315 to i64
  %1319 = shl i64 %1309, %1318
  %1320 = sub nsw i32 %1300, %1316
  store i64 %1319, i64* %324, align 8
  store i32 %1320, i32* %318, align 8
  store i32 %1317, i32* %313, align 4
  %1321 = or i32 %1311, %1107
  %1322 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 0
  %1323 = getelementptr inbounds i8, i8* %1084, i64 %1086
  %1324 = add i32 %1320, -65
  %1325 = icmp ugt i32 %1324, 1073741758
  %1326 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 62
  br i1 %1325, label %1122, label %1327

1327:                                             ; preds = %1308
  %1328 = load i32, i32* %1326, align 4
  br label %1123

1329:                                             ; preds = %1288, %1293
  %1330 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 43
  %1331 = bitcast i8** %1330 to %struct.BOOL_DECODER**
  store %struct.BOOL_DECODER* %1322, %struct.BOOL_DECODER** %1331, align 8
  %1332 = load i32, i32* %313, align 4
  %1333 = load i32, i32* %318, align 8
  br label %1334

1334:                                             ; preds = %1357, %1329
  %1335 = phi i32 [ %1333, %1329 ], [ %1369, %1357 ]
  %1336 = phi i32 [ %1332, %1329 ], [ %1366, %1357 ]
  %1337 = phi i32 [ 7, %1329 ], [ %1339, %1357 ]
  %1338 = phi i32 [ 0, %1329 ], [ %1371, %1357 ]
  %1339 = add nsw i32 %1337, -1
  %1340 = shl i32 %1336, 7
  %1341 = add i32 %1340, -128
  %1342 = lshr i32 %1341, 8
  %1343 = add nuw nsw i32 %1342, 1
  %1344 = icmp slt i32 %1335, 0
  br i1 %1344, label %1345, label %1347

1345:                                             ; preds = %1334
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1346 = load i32, i32* %318, align 8
  br label %1347

1347:                                             ; preds = %1345, %1334
  %1348 = phi i32 [ %1346, %1345 ], [ %1335, %1334 ]
  %1349 = load i64, i64* %324, align 8
  %1350 = zext i32 %1343 to i64
  %1351 = shl i64 %1350, 56
  %1352 = icmp ult i64 %1349, %1351
  br i1 %1352, label %1357, label %1353

1353:                                             ; preds = %1347
  %1354 = load i32, i32* %313, align 4
  %1355 = sub i32 %1354, %1343
  %1356 = sub i64 %1349, %1351
  br label %1357

1357:                                             ; preds = %1353, %1347
  %1358 = phi i64 [ %1356, %1353 ], [ %1349, %1347 ]
  %1359 = phi i32 [ %1355, %1353 ], [ %1343, %1347 ]
  %1360 = phi i32 [ 1, %1353 ], [ 0, %1347 ]
  %1361 = and i32 %1359, 255
  %1362 = zext i32 %1361 to i64
  %1363 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1362
  %1364 = load i8, i8* %1363, align 1
  %1365 = zext i8 %1364 to i32
  %1366 = shl i32 %1359, %1365
  %1367 = zext i8 %1364 to i64
  %1368 = shl i64 %1358, %1367
  %1369 = sub nsw i32 %1348, %1365
  store i64 %1368, i64* %324, align 8
  store i32 %1369, i32* %318, align 8
  store i32 %1366, i32* %313, align 4
  %1370 = shl i32 %1360, %1339
  %1371 = or i32 %1370, %1338
  %1372 = icmp eq i32 %1339, 0
  br i1 %1372, label %1373, label %1334

1373:                                             ; preds = %1357
  %1374 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 34
  store i32 %1371, i32* %1374, align 16
  %1375 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 35
  %1376 = load i32, i32* %1375, align 4
  %1377 = shl i32 %1366, 7
  %1378 = add i32 %1377, -128
  %1379 = lshr i32 %1378, 8
  %1380 = add nuw nsw i32 %1379, 1
  %1381 = icmp slt i32 %1369, 0
  br i1 %1381, label %1382, label %1385

1382:                                             ; preds = %1373
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1383 = load i32, i32* %318, align 8
  %1384 = load i64, i64* %324, align 8
  br label %1385

1385:                                             ; preds = %1382, %1373
  %1386 = phi i64 [ %1384, %1382 ], [ %1368, %1373 ]
  %1387 = phi i32 [ %1383, %1382 ], [ %1369, %1373 ]
  %1388 = zext i32 %1380 to i64
  %1389 = shl i64 %1388, 56
  %1390 = icmp ult i64 %1386, %1389
  br i1 %1390, label %1395, label %1391

1391:                                             ; preds = %1385
  %1392 = load i32, i32* %313, align 4
  %1393 = sub i32 %1392, %1380
  %1394 = sub i64 %1386, %1389
  br label %1395

1395:                                             ; preds = %1385, %1391
  %1396 = phi i64 [ %1394, %1391 ], [ %1386, %1385 ]
  %1397 = phi i32 [ %1393, %1391 ], [ %1380, %1385 ]
  %1398 = phi i1 [ false, %1391 ], [ true, %1385 ]
  %1399 = and i32 %1397, 255
  %1400 = zext i32 %1399 to i64
  %1401 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1400
  %1402 = load i8, i8* %1401, align 1
  %1403 = zext i8 %1402 to i32
  %1404 = shl i32 %1397, %1403
  %1405 = zext i8 %1402 to i64
  %1406 = shl i64 %1396, %1405
  %1407 = sub nsw i32 %1387, %1403
  store i64 %1406, i64* %324, align 8
  store i32 %1407, i32* %318, align 8
  store i32 %1404, i32* %313, align 4
  br i1 %1398, label %1473, label %1408

1408:                                             ; preds = %1395
  %1409 = shl i32 %1404, 7
  %1410 = add i32 %1409, -128
  %1411 = lshr i32 %1410, 8
  %1412 = add nuw nsw i32 %1411, 1
  %1413 = icmp slt i32 %1407, 0
  br i1 %1413, label %1414, label %1417

1414:                                             ; preds = %1408
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1415 = load i32, i32* %318, align 8
  %1416 = load i64, i64* %324, align 8
  br label %1417

1417:                                             ; preds = %1414, %1408
  %1418 = phi i64 [ %1416, %1414 ], [ %1406, %1408 ]
  %1419 = phi i32 [ %1415, %1414 ], [ %1407, %1408 ]
  %1420 = zext i32 %1412 to i64
  %1421 = shl i64 %1420, 56
  %1422 = icmp ult i64 %1418, %1421
  br i1 %1422, label %1427, label %1423

1423:                                             ; preds = %1417
  %1424 = load i32, i32* %313, align 4
  %1425 = sub i32 %1424, %1412
  %1426 = sub i64 %1418, %1421
  br label %1427

1427:                                             ; preds = %1423, %1417
  %1428 = phi i64 [ %1426, %1423 ], [ %1418, %1417 ]
  %1429 = phi i32 [ %1425, %1423 ], [ %1412, %1417 ]
  %1430 = phi i32 [ 8, %1423 ], [ 0, %1417 ]
  %1431 = and i32 %1429, 255
  %1432 = zext i32 %1431 to i64
  %1433 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1432
  %1434 = load i8, i8* %1433, align 1
  %1435 = zext i8 %1434 to i32
  %1436 = shl i32 %1429, %1435
  %1437 = zext i8 %1434 to i64
  %1438 = shl i64 %1428, %1437
  %1439 = sub nsw i32 %1419, %1435
  store i64 %1438, i64* %324, align 8
  store i32 %1439, i32* %318, align 8
  store i32 %1436, i32* %313, align 4
  %1440 = shl i32 %1436, 7
  %1441 = add i32 %1440, -128
  %1442 = lshr i32 %1441, 8
  %1443 = add nuw nsw i32 %1442, 1
  %1444 = icmp slt i32 %1439, 0
  br i1 %1444, label %3661, label %3664

1445:                                             ; preds = %3738
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1446 = load i32, i32* %318, align 8
  %1447 = load i64, i64* %324, align 8
  br label %1448

1448:                                             ; preds = %1445, %3738
  %1449 = phi i64 [ %1447, %1445 ], [ %3749, %3738 ]
  %1450 = phi i32 [ %1446, %1445 ], [ %3750, %3738 ]
  %1451 = zext i32 %3755 to i64
  %1452 = shl i64 %1451, 56
  %1453 = icmp ult i64 %1449, %1452
  br i1 %1453, label %1458, label %1454

1454:                                             ; preds = %1448
  %1455 = load i32, i32* %313, align 4
  %1456 = sub i32 %1455, %3755
  %1457 = sub i64 %1449, %1452
  br label %1458

1458:                                             ; preds = %1448, %1454
  %1459 = phi i64 [ %1457, %1454 ], [ %1449, %1448 ]
  %1460 = phi i32 [ %1456, %1454 ], [ %3755, %1448 ]
  %1461 = phi i1 [ false, %1454 ], [ true, %1448 ]
  %1462 = and i32 %1460, 255
  %1463 = zext i32 %1462 to i64
  %1464 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1463
  %1465 = load i8, i8* %1464, align 1
  %1466 = zext i8 %1465 to i32
  %1467 = shl i32 %1460, %1466
  %1468 = zext i8 %1465 to i64
  %1469 = shl i64 %1459, %1468
  %1470 = sub nsw i32 %1450, %1466
  store i64 %1469, i64* %324, align 8
  store i32 %1470, i32* %318, align 8
  store i32 %1467, i32* %313, align 4
  %1471 = sub nsw i32 0, %3751
  %1472 = select i1 %1461, i32 %3751, i32 %1471
  br label %1473

1473:                                             ; preds = %1458, %1395
  %1474 = phi i64 [ %1406, %1395 ], [ %1469, %1458 ]
  %1475 = phi i32 [ %1407, %1395 ], [ %1470, %1458 ]
  %1476 = phi i32 [ %1404, %1395 ], [ %1467, %1458 ]
  %1477 = phi i32 [ 0, %1395 ], [ %1472, %1458 ]
  %1478 = icmp ne i32 %1477, %1376
  store i32 %1477, i32* %1375, align 4
  %1479 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 36
  %1480 = load i32, i32* %1479, align 8
  %1481 = shl i32 %1476, 7
  %1482 = add i32 %1481, -128
  %1483 = lshr i32 %1482, 8
  %1484 = add nuw nsw i32 %1483, 1
  %1485 = icmp slt i32 %1475, 0
  br i1 %1485, label %1486, label %1489

1486:                                             ; preds = %1473
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1487 = load i32, i32* %318, align 8
  %1488 = load i64, i64* %324, align 8
  br label %1489

1489:                                             ; preds = %1486, %1473
  %1490 = phi i64 [ %1488, %1486 ], [ %1474, %1473 ]
  %1491 = phi i32 [ %1487, %1486 ], [ %1475, %1473 ]
  %1492 = zext i32 %1484 to i64
  %1493 = shl i64 %1492, 56
  %1494 = icmp ult i64 %1490, %1493
  br i1 %1494, label %1499, label %1495

1495:                                             ; preds = %1489
  %1496 = load i32, i32* %313, align 4
  %1497 = sub i32 %1496, %1484
  %1498 = sub i64 %1490, %1493
  br label %1499

1499:                                             ; preds = %1489, %1495
  %1500 = phi i64 [ %1498, %1495 ], [ %1490, %1489 ]
  %1501 = phi i32 [ %1497, %1495 ], [ %1484, %1489 ]
  %1502 = phi i1 [ false, %1495 ], [ true, %1489 ]
  %1503 = and i32 %1501, 255
  %1504 = zext i32 %1503 to i64
  %1505 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1504
  %1506 = load i8, i8* %1505, align 1
  %1507 = zext i8 %1506 to i32
  %1508 = shl i32 %1501, %1507
  %1509 = zext i8 %1506 to i64
  %1510 = shl i64 %1500, %1509
  %1511 = sub nsw i32 %1491, %1507
  store i64 %1510, i64* %324, align 8
  store i32 %1511, i32* %318, align 8
  store i32 %1508, i32* %313, align 4
  br i1 %1502, label %1577, label %1512

1512:                                             ; preds = %1499
  %1513 = shl i32 %1508, 7
  %1514 = add i32 %1513, -128
  %1515 = lshr i32 %1514, 8
  %1516 = add nuw nsw i32 %1515, 1
  %1517 = icmp slt i32 %1511, 0
  br i1 %1517, label %1518, label %1521

1518:                                             ; preds = %1512
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1519 = load i32, i32* %318, align 8
  %1520 = load i64, i64* %324, align 8
  br label %1521

1521:                                             ; preds = %1518, %1512
  %1522 = phi i64 [ %1520, %1518 ], [ %1510, %1512 ]
  %1523 = phi i32 [ %1519, %1518 ], [ %1511, %1512 ]
  %1524 = zext i32 %1516 to i64
  %1525 = shl i64 %1524, 56
  %1526 = icmp ult i64 %1522, %1525
  br i1 %1526, label %1531, label %1527

1527:                                             ; preds = %1521
  %1528 = load i32, i32* %313, align 4
  %1529 = sub i32 %1528, %1516
  %1530 = sub i64 %1522, %1525
  br label %1531

1531:                                             ; preds = %1527, %1521
  %1532 = phi i64 [ %1530, %1527 ], [ %1522, %1521 ]
  %1533 = phi i32 [ %1529, %1527 ], [ %1516, %1521 ]
  %1534 = phi i32 [ 8, %1527 ], [ 0, %1521 ]
  %1535 = and i32 %1533, 255
  %1536 = zext i32 %1535 to i64
  %1537 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1536
  %1538 = load i8, i8* %1537, align 1
  %1539 = zext i8 %1538 to i32
  %1540 = shl i32 %1533, %1539
  %1541 = zext i8 %1538 to i64
  %1542 = shl i64 %1532, %1541
  %1543 = sub nsw i32 %1523, %1539
  store i64 %1542, i64* %324, align 8
  store i32 %1543, i32* %318, align 8
  store i32 %1540, i32* %313, align 4
  %1544 = shl i32 %1540, 7
  %1545 = add i32 %1544, -128
  %1546 = lshr i32 %1545, 8
  %1547 = add nuw nsw i32 %1546, 1
  %1548 = icmp slt i32 %1543, 0
  br i1 %1548, label %3565, label %3568

1549:                                             ; preds = %3642
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1550 = load i32, i32* %318, align 8
  %1551 = load i64, i64* %324, align 8
  br label %1552

1552:                                             ; preds = %1549, %3642
  %1553 = phi i64 [ %1551, %1549 ], [ %3653, %3642 ]
  %1554 = phi i32 [ %1550, %1549 ], [ %3654, %3642 ]
  %1555 = zext i32 %3659 to i64
  %1556 = shl i64 %1555, 56
  %1557 = icmp ult i64 %1553, %1556
  br i1 %1557, label %1562, label %1558

1558:                                             ; preds = %1552
  %1559 = load i32, i32* %313, align 4
  %1560 = sub i32 %1559, %3659
  %1561 = sub i64 %1553, %1556
  br label %1562

1562:                                             ; preds = %1552, %1558
  %1563 = phi i64 [ %1561, %1558 ], [ %1553, %1552 ]
  %1564 = phi i32 [ %1560, %1558 ], [ %3659, %1552 ]
  %1565 = phi i1 [ false, %1558 ], [ true, %1552 ]
  %1566 = and i32 %1564, 255
  %1567 = zext i32 %1566 to i64
  %1568 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1567
  %1569 = load i8, i8* %1568, align 1
  %1570 = zext i8 %1569 to i32
  %1571 = shl i32 %1564, %1570
  %1572 = zext i8 %1569 to i64
  %1573 = shl i64 %1563, %1572
  %1574 = sub nsw i32 %1554, %1570
  store i64 %1573, i64* %324, align 8
  store i32 %1574, i32* %318, align 8
  store i32 %1571, i32* %313, align 4
  %1575 = sub nsw i32 0, %3655
  %1576 = select i1 %1565, i32 %3655, i32 %1575
  br label %1577

1577:                                             ; preds = %1562, %1499
  %1578 = phi i64 [ %1510, %1499 ], [ %1573, %1562 ]
  %1579 = phi i32 [ %1511, %1499 ], [ %1574, %1562 ]
  %1580 = phi i32 [ %1508, %1499 ], [ %1571, %1562 ]
  %1581 = phi i32 [ 0, %1499 ], [ %1576, %1562 ]
  %1582 = icmp ne i32 %1581, %1480
  %1583 = or i1 %1478, %1582
  store i32 %1581, i32* %1479, align 8
  %1584 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 37
  %1585 = load i32, i32* %1584, align 4
  %1586 = shl i32 %1580, 7
  %1587 = add i32 %1586, -128
  %1588 = lshr i32 %1587, 8
  %1589 = add nuw nsw i32 %1588, 1
  %1590 = icmp slt i32 %1579, 0
  br i1 %1590, label %1591, label %1594

1591:                                             ; preds = %1577
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1592 = load i32, i32* %318, align 8
  %1593 = load i64, i64* %324, align 8
  br label %1594

1594:                                             ; preds = %1591, %1577
  %1595 = phi i64 [ %1593, %1591 ], [ %1578, %1577 ]
  %1596 = phi i32 [ %1592, %1591 ], [ %1579, %1577 ]
  %1597 = zext i32 %1589 to i64
  %1598 = shl i64 %1597, 56
  %1599 = icmp ult i64 %1595, %1598
  br i1 %1599, label %1604, label %1600

1600:                                             ; preds = %1594
  %1601 = load i32, i32* %313, align 4
  %1602 = sub i32 %1601, %1589
  %1603 = sub i64 %1595, %1598
  br label %1604

1604:                                             ; preds = %1594, %1600
  %1605 = phi i64 [ %1603, %1600 ], [ %1595, %1594 ]
  %1606 = phi i32 [ %1602, %1600 ], [ %1589, %1594 ]
  %1607 = phi i1 [ false, %1600 ], [ true, %1594 ]
  %1608 = and i32 %1606, 255
  %1609 = zext i32 %1608 to i64
  %1610 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1609
  %1611 = load i8, i8* %1610, align 1
  %1612 = zext i8 %1611 to i32
  %1613 = shl i32 %1606, %1612
  %1614 = zext i8 %1611 to i64
  %1615 = shl i64 %1605, %1614
  %1616 = sub nsw i32 %1596, %1612
  store i64 %1615, i64* %324, align 8
  store i32 %1616, i32* %318, align 8
  store i32 %1613, i32* %313, align 4
  br i1 %1607, label %1682, label %1617

1617:                                             ; preds = %1604
  %1618 = shl i32 %1613, 7
  %1619 = add i32 %1618, -128
  %1620 = lshr i32 %1619, 8
  %1621 = add nuw nsw i32 %1620, 1
  %1622 = icmp slt i32 %1616, 0
  br i1 %1622, label %1623, label %1626

1623:                                             ; preds = %1617
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1624 = load i32, i32* %318, align 8
  %1625 = load i64, i64* %324, align 8
  br label %1626

1626:                                             ; preds = %1623, %1617
  %1627 = phi i64 [ %1625, %1623 ], [ %1615, %1617 ]
  %1628 = phi i32 [ %1624, %1623 ], [ %1616, %1617 ]
  %1629 = zext i32 %1621 to i64
  %1630 = shl i64 %1629, 56
  %1631 = icmp ult i64 %1627, %1630
  br i1 %1631, label %1636, label %1632

1632:                                             ; preds = %1626
  %1633 = load i32, i32* %313, align 4
  %1634 = sub i32 %1633, %1621
  %1635 = sub i64 %1627, %1630
  br label %1636

1636:                                             ; preds = %1632, %1626
  %1637 = phi i64 [ %1635, %1632 ], [ %1627, %1626 ]
  %1638 = phi i32 [ %1634, %1632 ], [ %1621, %1626 ]
  %1639 = phi i32 [ 8, %1632 ], [ 0, %1626 ]
  %1640 = and i32 %1638, 255
  %1641 = zext i32 %1640 to i64
  %1642 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1641
  %1643 = load i8, i8* %1642, align 1
  %1644 = zext i8 %1643 to i32
  %1645 = shl i32 %1638, %1644
  %1646 = zext i8 %1643 to i64
  %1647 = shl i64 %1637, %1646
  %1648 = sub nsw i32 %1628, %1644
  store i64 %1647, i64* %324, align 8
  store i32 %1648, i32* %318, align 8
  store i32 %1645, i32* %313, align 4
  %1649 = shl i32 %1645, 7
  %1650 = add i32 %1649, -128
  %1651 = lshr i32 %1650, 8
  %1652 = add nuw nsw i32 %1651, 1
  %1653 = icmp slt i32 %1648, 0
  br i1 %1653, label %3469, label %3472

1654:                                             ; preds = %3546
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1655 = load i32, i32* %318, align 8
  %1656 = load i64, i64* %324, align 8
  br label %1657

1657:                                             ; preds = %1654, %3546
  %1658 = phi i64 [ %1656, %1654 ], [ %3557, %3546 ]
  %1659 = phi i32 [ %1655, %1654 ], [ %3558, %3546 ]
  %1660 = zext i32 %3563 to i64
  %1661 = shl i64 %1660, 56
  %1662 = icmp ult i64 %1658, %1661
  br i1 %1662, label %1667, label %1663

1663:                                             ; preds = %1657
  %1664 = load i32, i32* %313, align 4
  %1665 = sub i32 %1664, %3563
  %1666 = sub i64 %1658, %1661
  br label %1667

1667:                                             ; preds = %1657, %1663
  %1668 = phi i64 [ %1666, %1663 ], [ %1658, %1657 ]
  %1669 = phi i32 [ %1665, %1663 ], [ %3563, %1657 ]
  %1670 = phi i1 [ false, %1663 ], [ true, %1657 ]
  %1671 = and i32 %1669, 255
  %1672 = zext i32 %1671 to i64
  %1673 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1672
  %1674 = load i8, i8* %1673, align 1
  %1675 = zext i8 %1674 to i32
  %1676 = shl i32 %1669, %1675
  %1677 = zext i8 %1674 to i64
  %1678 = shl i64 %1668, %1677
  %1679 = sub nsw i32 %1659, %1675
  store i64 %1678, i64* %324, align 8
  store i32 %1679, i32* %318, align 8
  store i32 %1676, i32* %313, align 4
  %1680 = sub nsw i32 0, %3559
  %1681 = select i1 %1670, i32 %3559, i32 %1680
  br label %1682

1682:                                             ; preds = %1667, %1604
  %1683 = phi i64 [ %1615, %1604 ], [ %1678, %1667 ]
  %1684 = phi i32 [ %1616, %1604 ], [ %1679, %1667 ]
  %1685 = phi i32 [ %1613, %1604 ], [ %1676, %1667 ]
  %1686 = phi i32 [ 0, %1604 ], [ %1681, %1667 ]
  %1687 = icmp ne i32 %1686, %1585
  %1688 = or i1 %1583, %1687
  store i32 %1686, i32* %1584, align 4
  %1689 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 38
  %1690 = load i32, i32* %1689, align 16
  %1691 = shl i32 %1685, 7
  %1692 = add i32 %1691, -128
  %1693 = lshr i32 %1692, 8
  %1694 = add nuw nsw i32 %1693, 1
  %1695 = icmp slt i32 %1684, 0
  br i1 %1695, label %1696, label %1699

1696:                                             ; preds = %1682
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1697 = load i32, i32* %318, align 8
  %1698 = load i64, i64* %324, align 8
  br label %1699

1699:                                             ; preds = %1696, %1682
  %1700 = phi i64 [ %1698, %1696 ], [ %1683, %1682 ]
  %1701 = phi i32 [ %1697, %1696 ], [ %1684, %1682 ]
  %1702 = zext i32 %1694 to i64
  %1703 = shl i64 %1702, 56
  %1704 = icmp ult i64 %1700, %1703
  br i1 %1704, label %1709, label %1705

1705:                                             ; preds = %1699
  %1706 = load i32, i32* %313, align 4
  %1707 = sub i32 %1706, %1694
  %1708 = sub i64 %1700, %1703
  br label %1709

1709:                                             ; preds = %1699, %1705
  %1710 = phi i64 [ %1708, %1705 ], [ %1700, %1699 ]
  %1711 = phi i32 [ %1707, %1705 ], [ %1694, %1699 ]
  %1712 = phi i1 [ false, %1705 ], [ true, %1699 ]
  %1713 = and i32 %1711, 255
  %1714 = zext i32 %1713 to i64
  %1715 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1714
  %1716 = load i8, i8* %1715, align 1
  %1717 = zext i8 %1716 to i32
  %1718 = shl i32 %1711, %1717
  %1719 = zext i8 %1716 to i64
  %1720 = shl i64 %1710, %1719
  %1721 = sub nsw i32 %1701, %1717
  store i64 %1720, i64* %324, align 8
  store i32 %1721, i32* %318, align 8
  store i32 %1718, i32* %313, align 4
  br i1 %1712, label %1787, label %1722

1722:                                             ; preds = %1709
  %1723 = shl i32 %1718, 7
  %1724 = add i32 %1723, -128
  %1725 = lshr i32 %1724, 8
  %1726 = add nuw nsw i32 %1725, 1
  %1727 = icmp slt i32 %1721, 0
  br i1 %1727, label %1728, label %1731

1728:                                             ; preds = %1722
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1729 = load i32, i32* %318, align 8
  %1730 = load i64, i64* %324, align 8
  br label %1731

1731:                                             ; preds = %1728, %1722
  %1732 = phi i64 [ %1730, %1728 ], [ %1720, %1722 ]
  %1733 = phi i32 [ %1729, %1728 ], [ %1721, %1722 ]
  %1734 = zext i32 %1726 to i64
  %1735 = shl i64 %1734, 56
  %1736 = icmp ult i64 %1732, %1735
  br i1 %1736, label %1741, label %1737

1737:                                             ; preds = %1731
  %1738 = load i32, i32* %313, align 4
  %1739 = sub i32 %1738, %1726
  %1740 = sub i64 %1732, %1735
  br label %1741

1741:                                             ; preds = %1737, %1731
  %1742 = phi i64 [ %1740, %1737 ], [ %1732, %1731 ]
  %1743 = phi i32 [ %1739, %1737 ], [ %1726, %1731 ]
  %1744 = phi i32 [ 8, %1737 ], [ 0, %1731 ]
  %1745 = and i32 %1743, 255
  %1746 = zext i32 %1745 to i64
  %1747 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1746
  %1748 = load i8, i8* %1747, align 1
  %1749 = zext i8 %1748 to i32
  %1750 = shl i32 %1743, %1749
  %1751 = zext i8 %1748 to i64
  %1752 = shl i64 %1742, %1751
  %1753 = sub nsw i32 %1733, %1749
  store i64 %1752, i64* %324, align 8
  store i32 %1753, i32* %318, align 8
  store i32 %1750, i32* %313, align 4
  %1754 = shl i32 %1750, 7
  %1755 = add i32 %1754, -128
  %1756 = lshr i32 %1755, 8
  %1757 = add nuw nsw i32 %1756, 1
  %1758 = icmp slt i32 %1753, 0
  br i1 %1758, label %3373, label %3376

1759:                                             ; preds = %3450
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1760 = load i32, i32* %318, align 8
  %1761 = load i64, i64* %324, align 8
  br label %1762

1762:                                             ; preds = %1759, %3450
  %1763 = phi i64 [ %1761, %1759 ], [ %3461, %3450 ]
  %1764 = phi i32 [ %1760, %1759 ], [ %3462, %3450 ]
  %1765 = zext i32 %3467 to i64
  %1766 = shl i64 %1765, 56
  %1767 = icmp ult i64 %1763, %1766
  br i1 %1767, label %1772, label %1768

1768:                                             ; preds = %1762
  %1769 = load i32, i32* %313, align 4
  %1770 = sub i32 %1769, %3467
  %1771 = sub i64 %1763, %1766
  br label %1772

1772:                                             ; preds = %1762, %1768
  %1773 = phi i64 [ %1771, %1768 ], [ %1763, %1762 ]
  %1774 = phi i32 [ %1770, %1768 ], [ %3467, %1762 ]
  %1775 = phi i1 [ false, %1768 ], [ true, %1762 ]
  %1776 = and i32 %1774, 255
  %1777 = zext i32 %1776 to i64
  %1778 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1777
  %1779 = load i8, i8* %1778, align 1
  %1780 = zext i8 %1779 to i32
  %1781 = shl i32 %1774, %1780
  %1782 = zext i8 %1779 to i64
  %1783 = shl i64 %1773, %1782
  %1784 = sub nsw i32 %1764, %1780
  store i64 %1783, i64* %324, align 8
  store i32 %1784, i32* %318, align 8
  store i32 %1781, i32* %313, align 4
  %1785 = sub nsw i32 0, %3463
  %1786 = select i1 %1775, i32 %3463, i32 %1785
  br label %1787

1787:                                             ; preds = %1772, %1709
  %1788 = phi i64 [ %1720, %1709 ], [ %1783, %1772 ]
  %1789 = phi i32 [ %1721, %1709 ], [ %1784, %1772 ]
  %1790 = phi i32 [ %1718, %1709 ], [ %1781, %1772 ]
  %1791 = phi i32 [ 0, %1709 ], [ %1786, %1772 ]
  %1792 = icmp ne i32 %1791, %1690
  %1793 = or i1 %1688, %1792
  store i32 %1791, i32* %1689, align 16
  %1794 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 39
  %1795 = load i32, i32* %1794, align 4
  %1796 = shl i32 %1790, 7
  %1797 = add i32 %1796, -128
  %1798 = lshr i32 %1797, 8
  %1799 = add nuw nsw i32 %1798, 1
  %1800 = icmp slt i32 %1789, 0
  br i1 %1800, label %1801, label %1804

1801:                                             ; preds = %1787
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1802 = load i32, i32* %318, align 8
  %1803 = load i64, i64* %324, align 8
  br label %1804

1804:                                             ; preds = %1801, %1787
  %1805 = phi i64 [ %1803, %1801 ], [ %1788, %1787 ]
  %1806 = phi i32 [ %1802, %1801 ], [ %1789, %1787 ]
  %1807 = zext i32 %1799 to i64
  %1808 = shl i64 %1807, 56
  %1809 = icmp ult i64 %1805, %1808
  br i1 %1809, label %1814, label %1810

1810:                                             ; preds = %1804
  %1811 = load i32, i32* %313, align 4
  %1812 = sub i32 %1811, %1799
  %1813 = sub i64 %1805, %1808
  br label %1814

1814:                                             ; preds = %1804, %1810
  %1815 = phi i64 [ %1813, %1810 ], [ %1805, %1804 ]
  %1816 = phi i32 [ %1812, %1810 ], [ %1799, %1804 ]
  %1817 = phi i1 [ false, %1810 ], [ true, %1804 ]
  %1818 = and i32 %1816, 255
  %1819 = zext i32 %1818 to i64
  %1820 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1819
  %1821 = load i8, i8* %1820, align 1
  %1822 = zext i8 %1821 to i32
  %1823 = shl i32 %1816, %1822
  %1824 = zext i8 %1821 to i64
  %1825 = shl i64 %1815, %1824
  %1826 = sub nsw i32 %1806, %1822
  store i64 %1825, i64* %324, align 8
  store i32 %1826, i32* %318, align 8
  store i32 %1823, i32* %313, align 4
  br i1 %1817, label %1892, label %1827

1827:                                             ; preds = %1814
  %1828 = shl i32 %1823, 7
  %1829 = add i32 %1828, -128
  %1830 = lshr i32 %1829, 8
  %1831 = add nuw nsw i32 %1830, 1
  %1832 = icmp slt i32 %1826, 0
  br i1 %1832, label %1833, label %1836

1833:                                             ; preds = %1827
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1834 = load i32, i32* %318, align 8
  %1835 = load i64, i64* %324, align 8
  br label %1836

1836:                                             ; preds = %1833, %1827
  %1837 = phi i64 [ %1835, %1833 ], [ %1825, %1827 ]
  %1838 = phi i32 [ %1834, %1833 ], [ %1826, %1827 ]
  %1839 = zext i32 %1831 to i64
  %1840 = shl i64 %1839, 56
  %1841 = icmp ult i64 %1837, %1840
  br i1 %1841, label %1846, label %1842

1842:                                             ; preds = %1836
  %1843 = load i32, i32* %313, align 4
  %1844 = sub i32 %1843, %1831
  %1845 = sub i64 %1837, %1840
  br label %1846

1846:                                             ; preds = %1842, %1836
  %1847 = phi i64 [ %1845, %1842 ], [ %1837, %1836 ]
  %1848 = phi i32 [ %1844, %1842 ], [ %1831, %1836 ]
  %1849 = phi i32 [ 8, %1842 ], [ 0, %1836 ]
  %1850 = and i32 %1848, 255
  %1851 = zext i32 %1850 to i64
  %1852 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1851
  %1853 = load i8, i8* %1852, align 1
  %1854 = zext i8 %1853 to i32
  %1855 = shl i32 %1848, %1854
  %1856 = zext i8 %1853 to i64
  %1857 = shl i64 %1847, %1856
  %1858 = sub nsw i32 %1838, %1854
  store i64 %1857, i64* %324, align 8
  store i32 %1858, i32* %318, align 8
  store i32 %1855, i32* %313, align 4
  %1859 = shl i32 %1855, 7
  %1860 = add i32 %1859, -128
  %1861 = lshr i32 %1860, 8
  %1862 = add nuw nsw i32 %1861, 1
  %1863 = icmp slt i32 %1858, 0
  br i1 %1863, label %3277, label %3280

1864:                                             ; preds = %3354
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1865 = load i32, i32* %318, align 8
  %1866 = load i64, i64* %324, align 8
  br label %1867

1867:                                             ; preds = %1864, %3354
  %1868 = phi i64 [ %1866, %1864 ], [ %3365, %3354 ]
  %1869 = phi i32 [ %1865, %1864 ], [ %3366, %3354 ]
  %1870 = zext i32 %3371 to i64
  %1871 = shl i64 %1870, 56
  %1872 = icmp ult i64 %1868, %1871
  br i1 %1872, label %1877, label %1873

1873:                                             ; preds = %1867
  %1874 = load i32, i32* %313, align 4
  %1875 = sub i32 %1874, %3371
  %1876 = sub i64 %1868, %1871
  br label %1877

1877:                                             ; preds = %1867, %1873
  %1878 = phi i64 [ %1876, %1873 ], [ %1868, %1867 ]
  %1879 = phi i32 [ %1875, %1873 ], [ %3371, %1867 ]
  %1880 = phi i1 [ false, %1873 ], [ true, %1867 ]
  %1881 = and i32 %1879, 255
  %1882 = zext i32 %1881 to i64
  %1883 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1882
  %1884 = load i8, i8* %1883, align 1
  %1885 = zext i8 %1884 to i32
  %1886 = shl i32 %1879, %1885
  %1887 = zext i8 %1884 to i64
  %1888 = shl i64 %1878, %1887
  %1889 = sub nsw i32 %1869, %1885
  store i64 %1888, i64* %324, align 8
  store i32 %1889, i32* %318, align 8
  store i32 %1886, i32* %313, align 4
  %1890 = sub nsw i32 0, %3367
  %1891 = select i1 %1880, i32 %3367, i32 %1890
  br label %1892

1892:                                             ; preds = %1877, %1814
  %1893 = phi i32 [ 0, %1814 ], [ %1891, %1877 ]
  %1894 = icmp eq i32 %1893, %1795
  store i32 %1893, i32* %1794, align 4
  %1895 = xor i1 %1793, true
  %1896 = and i1 %1894, %1895
  br i1 %1896, label %1898, label %1897

1897:                                             ; preds = %1892
  call void @vp8cx_init_de_quantizer(%struct.VP8D_COMP* %0)
  br label %1898

1898:                                             ; preds = %1892, %1897
  %1899 = load %struct.modeinfo*, %struct.modeinfo** %213, align 32
  %1900 = load i8, i8* %346, align 32
  %1901 = icmp eq i8 %1900, 0
  br i1 %1901, label %1928, label %1902

1902:                                             ; preds = %1898
  %1903 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 26
  %1904 = load i8, i8* %1903, align 1
  %1905 = icmp eq i8 %1904, 1
  br i1 %1905, label %1906, label %1913

1906:                                             ; preds = %1902
  %1907 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1899, i64 0, i32 0, i32 8
  %1908 = load i8, i8* %1907, align 1
  %1909 = zext i8 %1908 to i64
  %1910 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 28, i64 0, i64 %1909
  %1911 = load i8, i8* %1910, align 1
  %1912 = sext i8 %1911 to i32
  br label %1922

1913:                                             ; preds = %1902
  %1914 = load i32, i32* %1374, align 16
  %1915 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1899, i64 0, i32 0, i32 8
  %1916 = load i8, i8* %1915, align 1
  %1917 = zext i8 %1916 to i64
  %1918 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 28, i64 0, i64 %1917
  %1919 = load i8, i8* %1918, align 1
  %1920 = sext i8 %1919 to i32
  %1921 = add nsw i32 %1914, %1920
  br label %1922

1922:                                             ; preds = %1913, %1906
  %1923 = phi i32 [ %1912, %1906 ], [ %1921, %1913 ]
  %1924 = icmp sgt i32 %1923, -1
  %1925 = icmp slt i32 %1923, 127
  %1926 = select i1 %1925, i32 %1923, i32 127
  %1927 = select i1 %1924, i32 %1926, i32 0
  br label %1930

1928:                                             ; preds = %1898
  %1929 = load i32, i32* %1374, align 16
  br label %1930

1930:                                             ; preds = %1928, %1922
  %1931 = phi i32 [ %1929, %1928 ], [ %1927, %1922 ]
  %1932 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 6, i64 0
  store i16 1, i16* %1932, align 32
  %1933 = sext i32 %1931 to i64
  %1934 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 2, i64 %1933, i64 0
  %1935 = load i16, i16* %1934, align 4
  %1936 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 5, i64 0
  store i16 %1935, i16* %1936, align 32
  %1937 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 3, i64 %1933, i64 0
  %1938 = load i16, i16* %1937, align 4
  %1939 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 7, i64 0
  store i16 %1938, i16* %1939, align 32
  %1940 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 4, i64 %1933, i64 0
  %1941 = load i16, i16* %1940, align 4
  %1942 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 8, i64 0
  store i16 %1941, i16* %1942, align 32
  %1943 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 2, i64 %1933, i64 1
  %1944 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 3, i64 %1933, i64 1
  %1945 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 4, i64 %1933, i64 1
  br label %1946

1946:                                             ; preds = %3832, %1930
  %1947 = phi i64 [ 1, %1930 ], [ %3840, %3832 ]
  %1948 = load i16, i16* %1943, align 2
  %1949 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 5, i64 %1947
  store i16 %1948, i16* %1949, align 2
  %1950 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 6, i64 %1947
  store i16 %1948, i16* %1950, align 2
  %1951 = load i16, i16* %1944, align 2
  %1952 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 7, i64 %1947
  store i16 %1951, i16* %1952, align 2
  %1953 = load i16, i16* %1945, align 2
  %1954 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 8, i64 %1947
  store i16 %1953, i16* %1954, align 2
  %1955 = add nuw nsw i64 %1947, 1
  %1956 = icmp eq i64 %1955, 16
  br i1 %1956, label %1957, label %3832

1957:                                             ; preds = %1946
  %1958 = load i32, i32* %206, align 4
  %1959 = icmp eq i32 %1958, 0
  br i1 %1959, label %2178, label %1960

1960:                                             ; preds = %1957
  %1961 = load i32, i32* %313, align 4
  %1962 = shl i32 %1961, 7
  %1963 = add i32 %1962, -128
  %1964 = lshr i32 %1963, 8
  %1965 = add nuw nsw i32 %1964, 1
  %1966 = load i32, i32* %318, align 8
  %1967 = icmp slt i32 %1966, 0
  br i1 %1967, label %1968, label %1970

1968:                                             ; preds = %1960
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %1969 = load i32, i32* %318, align 8
  br label %1970

1970:                                             ; preds = %1968, %1960
  %1971 = phi i32 [ %1969, %1968 ], [ %1966, %1960 ]
  %1972 = load i64, i64* %324, align 8
  %1973 = zext i32 %1965 to i64
  %1974 = shl i64 %1973, 56
  %1975 = icmp ult i64 %1972, %1974
  br i1 %1975, label %1980, label %1976

1976:                                             ; preds = %1970
  %1977 = load i32, i32* %313, align 4
  %1978 = sub i32 %1977, %1965
  %1979 = sub i64 %1972, %1974
  br label %1980

1980:                                             ; preds = %1970, %1976
  %1981 = phi i64 [ %1979, %1976 ], [ %1972, %1970 ]
  %1982 = phi i32 [ %1978, %1976 ], [ %1965, %1970 ]
  %1983 = phi i32 [ 1, %1976 ], [ 0, %1970 ]
  %1984 = and i32 %1982, 255
  %1985 = zext i32 %1984 to i64
  %1986 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1985
  %1987 = load i8, i8* %1986, align 1
  %1988 = zext i8 %1987 to i32
  %1989 = shl i32 %1982, %1988
  %1990 = zext i8 %1987 to i64
  %1991 = shl i64 %1981, %1990
  %1992 = sub nsw i32 %1971, %1988
  store i64 %1991, i64* %324, align 8
  store i32 %1992, i32* %318, align 8
  store i32 %1989, i32* %313, align 4
  %1993 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 50
  store i32 %1983, i32* %1993, align 16
  %1994 = shl i32 %1989, 7
  %1995 = add i32 %1994, -128
  %1996 = lshr i32 %1995, 8
  %1997 = add nuw nsw i32 %1996, 1
  %1998 = icmp slt i32 %1992, 0
  br i1 %1998, label %1999, label %2002

1999:                                             ; preds = %1980
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %2000 = load i32, i32* %318, align 8
  %2001 = load i64, i64* %324, align 8
  br label %2002

2002:                                             ; preds = %1999, %1980
  %2003 = phi i64 [ %2001, %1999 ], [ %1991, %1980 ]
  %2004 = phi i32 [ %2000, %1999 ], [ %1992, %1980 ]
  %2005 = zext i32 %1997 to i64
  %2006 = shl i64 %2005, 56
  %2007 = icmp ult i64 %2003, %2006
  br i1 %2007, label %2012, label %2008

2008:                                             ; preds = %2002
  %2009 = load i32, i32* %313, align 4
  %2010 = sub i32 %2009, %1997
  %2011 = sub i64 %2003, %2006
  br label %2012

2012:                                             ; preds = %2002, %2008
  %2013 = phi i64 [ %2011, %2008 ], [ %2003, %2002 ]
  %2014 = phi i32 [ %2010, %2008 ], [ %1997, %2002 ]
  %2015 = phi i32 [ 1, %2008 ], [ 0, %2002 ]
  %2016 = and i32 %2014, 255
  %2017 = zext i32 %2016 to i64
  %2018 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %2017
  %2019 = load i8, i8* %2018, align 1
  %2020 = zext i8 %2019 to i32
  %2021 = shl i32 %2014, %2020
  %2022 = zext i8 %2019 to i64
  %2023 = shl i64 %2013, %2022
  %2024 = sub nsw i32 %2004, %2020
  store i64 %2023, i64* %324, align 8
  store i32 %2024, i32* %318, align 8
  store i32 %2021, i32* %313, align 4
  %2025 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 51
  store i32 %2015, i32* %2025, align 4
  %2026 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 52
  store i32 0, i32* %2026, align 8
  %2027 = load i32, i32* %1993, align 16
  %2028 = icmp eq i32 %2027, 0
  br i1 %2028, label %2029, label %2066

2029:                                             ; preds = %2012
  %2030 = shl i32 %2021, 7
  %2031 = add i32 %2030, -128
  %2032 = lshr i32 %2031, 8
  %2033 = add nuw nsw i32 %2032, 1
  %2034 = icmp slt i32 %2024, 0
  br i1 %2034, label %2035, label %2038

2035:                                             ; preds = %2029
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %2036 = load i32, i32* %318, align 8
  %2037 = load i64, i64* %324, align 8
  br label %2038

2038:                                             ; preds = %2035, %2029
  %2039 = phi i64 [ %2037, %2035 ], [ %2023, %2029 ]
  %2040 = phi i32 [ %2036, %2035 ], [ %2024, %2029 ]
  %2041 = zext i32 %2033 to i64
  %2042 = shl i64 %2041, 56
  %2043 = icmp ult i64 %2039, %2042
  br i1 %2043, label %2048, label %2044

2044:                                             ; preds = %2038
  %2045 = load i32, i32* %313, align 4
  %2046 = sub i32 %2045, %2033
  %2047 = sub i64 %2039, %2042
  br label %2048

2048:                                             ; preds = %2044, %2038
  %2049 = phi i64 [ %2047, %2044 ], [ %2039, %2038 ]
  %2050 = phi i32 [ %2046, %2044 ], [ %2033, %2038 ]
  %2051 = phi i32 [ 2, %2044 ], [ 0, %2038 ]
  %2052 = and i32 %2050, 255
  %2053 = zext i32 %2052 to i64
  %2054 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %2053
  %2055 = load i8, i8* %2054, align 1
  %2056 = zext i8 %2055 to i32
  %2057 = shl i32 %2050, %2056
  %2058 = zext i8 %2055 to i64
  %2059 = shl i64 %2049, %2058
  %2060 = sub nsw i32 %2040, %2056
  store i64 %2059, i64* %324, align 8
  store i32 %2060, i32* %318, align 8
  store i32 %2057, i32* %313, align 4
  %2061 = shl i32 %2057, 7
  %2062 = add i32 %2061, -128
  %2063 = lshr i32 %2062, 8
  %2064 = add nuw nsw i32 %2063, 1
  %2065 = icmp slt i32 %2060, 0
  br i1 %2065, label %3249, label %3252

2066:                                             ; preds = %2012, %3262
  %2067 = phi i64 [ %2023, %2012 ], [ %3273, %3262 ]
  %2068 = phi i32 [ %2024, %2012 ], [ %3274, %3262 ]
  %2069 = phi i32 [ %2021, %2012 ], [ %3271, %3262 ]
  %2070 = phi i32 [ %2015, %2012 ], [ %3276, %3262 ]
  %2071 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 53
  store i32 0, i32* %2071, align 4
  %2072 = icmp eq i32 %2070, 0
  br i1 %2072, label %2073, label %2110

2073:                                             ; preds = %2066
  %2074 = shl i32 %2069, 7
  %2075 = add i32 %2074, -128
  %2076 = lshr i32 %2075, 8
  %2077 = add nuw nsw i32 %2076, 1
  %2078 = icmp slt i32 %2068, 0
  br i1 %2078, label %2079, label %2082

2079:                                             ; preds = %2073
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %2080 = load i32, i32* %318, align 8
  %2081 = load i64, i64* %324, align 8
  br label %2082

2082:                                             ; preds = %2079, %2073
  %2083 = phi i64 [ %2081, %2079 ], [ %2067, %2073 ]
  %2084 = phi i32 [ %2080, %2079 ], [ %2068, %2073 ]
  %2085 = zext i32 %2077 to i64
  %2086 = shl i64 %2085, 56
  %2087 = icmp ult i64 %2083, %2086
  br i1 %2087, label %2092, label %2088

2088:                                             ; preds = %2082
  %2089 = load i32, i32* %313, align 4
  %2090 = sub i32 %2089, %2077
  %2091 = sub i64 %2083, %2086
  br label %2092

2092:                                             ; preds = %2088, %2082
  %2093 = phi i64 [ %2091, %2088 ], [ %2083, %2082 ]
  %2094 = phi i32 [ %2090, %2088 ], [ %2077, %2082 ]
  %2095 = phi i32 [ 2, %2088 ], [ 0, %2082 ]
  %2096 = and i32 %2094, 255
  %2097 = zext i32 %2096 to i64
  %2098 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %2097
  %2099 = load i8, i8* %2098, align 1
  %2100 = zext i8 %2099 to i32
  %2101 = shl i32 %2094, %2100
  %2102 = zext i8 %2099 to i64
  %2103 = shl i64 %2093, %2102
  %2104 = sub nsw i32 %2084, %2100
  store i64 %2103, i64* %324, align 8
  store i32 %2104, i32* %318, align 8
  store i32 %2101, i32* %313, align 4
  %2105 = shl i32 %2101, 7
  %2106 = add i32 %2105, -128
  %2107 = lshr i32 %2106, 8
  %2108 = add nuw nsw i32 %2107, 1
  %2109 = icmp slt i32 %2104, 0
  br i1 %2109, label %3222, label %3225

2110:                                             ; preds = %2066, %3235
  %2111 = phi i64 [ %2067, %2066 ], [ %3246, %3235 ]
  %2112 = phi i32 [ %2068, %2066 ], [ %3247, %3235 ]
  %2113 = phi i32 [ %2069, %2066 ], [ %3244, %3235 ]
  %2114 = shl i32 %2113, 7
  %2115 = add i32 %2114, -128
  %2116 = lshr i32 %2115, 8
  %2117 = add nuw nsw i32 %2116, 1
  %2118 = icmp slt i32 %2112, 0
  br i1 %2118, label %2119, label %2122

2119:                                             ; preds = %2110
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %2120 = load i32, i32* %318, align 8
  %2121 = load i64, i64* %324, align 8
  br label %2122

2122:                                             ; preds = %2119, %2110
  %2123 = phi i64 [ %2121, %2119 ], [ %2111, %2110 ]
  %2124 = phi i32 [ %2120, %2119 ], [ %2112, %2110 ]
  %2125 = zext i32 %2117 to i64
  %2126 = shl i64 %2125, 56
  %2127 = icmp ult i64 %2123, %2126
  br i1 %2127, label %2132, label %2128

2128:                                             ; preds = %2122
  %2129 = load i32, i32* %313, align 4
  %2130 = sub i32 %2129, %2117
  %2131 = sub i64 %2123, %2126
  br label %2132

2132:                                             ; preds = %2122, %2128
  %2133 = phi i64 [ %2131, %2128 ], [ %2123, %2122 ]
  %2134 = phi i32 [ %2130, %2128 ], [ %2117, %2122 ]
  %2135 = phi i32 [ 1, %2128 ], [ 0, %2122 ]
  %2136 = and i32 %2134, 255
  %2137 = zext i32 %2136 to i64
  %2138 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %2137
  %2139 = load i8, i8* %2138, align 1
  %2140 = zext i8 %2139 to i32
  %2141 = shl i32 %2134, %2140
  %2142 = zext i8 %2139 to i64
  %2143 = shl i64 %2133, %2142
  %2144 = sub nsw i32 %2124, %2140
  store i64 %2143, i64* %324, align 8
  store i32 %2144, i32* %318, align 8
  store i32 %2141, i32* %313, align 4
  %2145 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 55, i64 2
  store i32 %2135, i32* %2145, align 4
  %2146 = shl i32 %2141, 7
  %2147 = add i32 %2146, -128
  %2148 = lshr i32 %2147, 8
  %2149 = add nuw nsw i32 %2148, 1
  %2150 = icmp slt i32 %2144, 0
  br i1 %2150, label %2151, label %2154

2151:                                             ; preds = %2132
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %2152 = load i32, i32* %318, align 8
  %2153 = load i64, i64* %324, align 8
  br label %2154

2154:                                             ; preds = %2151, %2132
  %2155 = phi i64 [ %2153, %2151 ], [ %2143, %2132 ]
  %2156 = phi i32 [ %2152, %2151 ], [ %2144, %2132 ]
  %2157 = zext i32 %2149 to i64
  %2158 = shl i64 %2157, 56
  %2159 = icmp ult i64 %2155, %2158
  br i1 %2159, label %2164, label %2160

2160:                                             ; preds = %2154
  %2161 = load i32, i32* %313, align 4
  %2162 = sub i32 %2161, %2149
  %2163 = sub i64 %2155, %2158
  br label %2164

2164:                                             ; preds = %2154, %2160
  %2165 = phi i64 [ %2163, %2160 ], [ %2155, %2154 ]
  %2166 = phi i32 [ %2162, %2160 ], [ %2149, %2154 ]
  %2167 = phi i32 [ 1, %2160 ], [ 0, %2154 ]
  %2168 = and i32 %2166, 255
  %2169 = zext i32 %2168 to i64
  %2170 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %2169
  %2171 = load i8, i8* %2170, align 1
  %2172 = zext i8 %2171 to i32
  %2173 = shl i32 %2166, %2172
  %2174 = zext i8 %2171 to i64
  %2175 = shl i64 %2165, %2174
  %2176 = sub nsw i32 %2156, %2172
  store i64 %2175, i64* %324, align 8
  store i32 %2176, i32* %318, align 8
  store i32 %2173, i32* %313, align 4
  %2177 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 55, i64 3
  store i32 %2167, i32* %2177, align 4
  br label %2181

2178:                                             ; preds = %1957
  %2179 = load i32, i32* %318, align 8
  %2180 = load i32, i32* %313, align 4
  br label %2181

2181:                                             ; preds = %2178, %2164
  %2182 = phi i32 [ %2180, %2178 ], [ %2173, %2164 ]
  %2183 = phi i32 [ %2179, %2178 ], [ %2176, %2164 ]
  %2184 = shl i32 %2182, 7
  %2185 = add i32 %2184, -128
  %2186 = lshr i32 %2185, 8
  %2187 = add nuw nsw i32 %2186, 1
  %2188 = icmp slt i32 %2183, 0
  br i1 %2188, label %2189, label %2191

2189:                                             ; preds = %2181
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %2190 = load i32, i32* %318, align 8
  br label %2191

2191:                                             ; preds = %2189, %2181
  %2192 = phi i32 [ %2190, %2189 ], [ %2183, %2181 ]
  %2193 = load i64, i64* %324, align 8
  %2194 = zext i32 %2187 to i64
  %2195 = shl i64 %2194, 56
  %2196 = icmp ult i64 %2193, %2195
  br i1 %2196, label %2201, label %2197

2197:                                             ; preds = %2191
  %2198 = load i32, i32* %313, align 4
  %2199 = sub i32 %2198, %2187
  %2200 = sub i64 %2193, %2195
  br label %2201

2201:                                             ; preds = %2191, %2197
  %2202 = phi i64 [ %2200, %2197 ], [ %2193, %2191 ]
  %2203 = phi i32 [ %2199, %2197 ], [ %2187, %2191 ]
  %2204 = phi i32 [ 1, %2197 ], [ 0, %2191 ]
  %2205 = and i32 %2203, 255
  %2206 = zext i32 %2205 to i64
  %2207 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %2206
  %2208 = load i8, i8* %2207, align 1
  %2209 = zext i8 %2208 to i32
  %2210 = shl i32 %2203, %2209
  %2211 = zext i8 %2208 to i64
  %2212 = shl i64 %2202, %2211
  %2213 = sub nsw i32 %2192, %2209
  store i64 %2212, i64* %324, align 8
  store i32 %2213, i32* %318, align 8
  store i32 %2210, i32* %313, align 4
  %2214 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 54
  store i32 %2204, i32* %2214, align 16
  %2215 = icmp eq i32 %2204, 0
  br i1 %2215, label %2216, label %2219

2216:                                             ; preds = %2201
  %2217 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 58, i32 0, i64 0
  %2218 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2217, i8* align 2 %2218, i64 1113, i1 false)
  br label %2219

2219:                                             ; preds = %2216, %2201
  %2220 = load i32, i32* %206, align 4
  %2221 = icmp eq i32 %2220, 0
  br i1 %2221, label %2254, label %2222

2222:                                             ; preds = %2219
  %2223 = shl i32 %2210, 7
  %2224 = add i32 %2223, -128
  %2225 = lshr i32 %2224, 8
  %2226 = add nuw nsw i32 %2225, 1
  %2227 = icmp slt i32 %2213, 0
  br i1 %2227, label %2228, label %2231

2228:                                             ; preds = %2222
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %2229 = load i32, i32* %318, align 8
  %2230 = load i64, i64* %324, align 8
  br label %2231

2231:                                             ; preds = %2228, %2222
  %2232 = phi i64 [ %2230, %2228 ], [ %2212, %2222 ]
  %2233 = phi i32 [ %2229, %2228 ], [ %2213, %2222 ]
  %2234 = zext i32 %2226 to i64
  %2235 = shl i64 %2234, 56
  %2236 = icmp ult i64 %2232, %2235
  br i1 %2236, label %2241, label %2237

2237:                                             ; preds = %2231
  %2238 = load i32, i32* %313, align 4
  %2239 = sub i32 %2238, %2226
  %2240 = sub i64 %2232, %2235
  br label %2241

2241:                                             ; preds = %2231, %2237
  %2242 = phi i64 [ %2240, %2237 ], [ %2232, %2231 ]
  %2243 = phi i32 [ %2239, %2237 ], [ %2226, %2231 ]
  %2244 = phi i32 [ 1, %2237 ], [ 0, %2231 ]
  %2245 = and i32 %2243, 255
  %2246 = zext i32 %2245 to i64
  %2247 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %2246
  %2248 = load i8, i8* %2247, align 1
  %2249 = zext i8 %2248 to i32
  %2250 = shl i32 %2243, %2249
  %2251 = zext i8 %2248 to i64
  %2252 = shl i64 %2242, %2251
  %2253 = sub nsw i32 %2233, %2249
  store i64 %2252, i64* %324, align 8
  store i32 %2253, i32* %318, align 8
  store i32 %2250, i32* %313, align 4
  br label %2254

2254:                                             ; preds = %2241, %2219
  %2255 = phi i32 [ 1, %2219 ], [ %2244, %2241 ]
  %2256 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 49
  store i32 %2255, i32* %2256, align 4
  store i32 1, i32* %15, align 4
  br label %2257

2257:                                             ; preds = %2362, %2254
  %2258 = phi i64 [ 0, %2254 ], [ %2363, %2362 ]
  br label %2259

2259:                                             ; preds = %2359, %2257
  %2260 = phi i64 [ 0, %2257 ], [ %2360, %2359 ]
  br label %2261

2261:                                             ; preds = %2356, %2259
  %2262 = phi i64 [ 0, %2259 ], [ %2357, %2356 ]
  %2263 = icmp eq i64 %2262, 0
  %2264 = add nsw i64 %2262, -1
  br label %2265

2265:                                             ; preds = %2353, %2261
  %2266 = phi i64 [ 0, %2261 ], [ %2354, %2353 ]
  %2267 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 4, i64 %2258, i64 %2260, i64 %2262, i64 %2266
  %2268 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @vp8_coef_update_probs, i64 0, i64 %2258, i64 %2260, i64 %2262, i64 %2266
  %2269 = load i8, i8* %2268, align 1
  %2270 = zext i8 %2269 to i32
  %2271 = load i32, i32* %313, align 4
  %2272 = add i32 %2271, -1
  %2273 = mul i32 %2272, %2270
  %2274 = lshr i32 %2273, 8
  %2275 = add nuw nsw i32 %2274, 1
  %2276 = load i32, i32* %318, align 8
  %2277 = icmp slt i32 %2276, 0
  br i1 %2277, label %2278, label %2280

2278:                                             ; preds = %2265
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %2279 = load i32, i32* %318, align 8
  br label %2280

2280:                                             ; preds = %2278, %2265
  %2281 = phi i32 [ %2279, %2278 ], [ %2276, %2265 ]
  %2282 = load i64, i64* %324, align 8
  %2283 = zext i32 %2275 to i64
  %2284 = shl i64 %2283, 56
  %2285 = icmp ult i64 %2282, %2284
  br i1 %2285, label %2290, label %2286

2286:                                             ; preds = %2280
  %2287 = load i32, i32* %313, align 4
  %2288 = sub i32 %2287, %2275
  %2289 = sub i64 %2282, %2284
  br label %2290

2290:                                             ; preds = %2280, %2286
  %2291 = phi i64 [ %2289, %2286 ], [ %2282, %2280 ]
  %2292 = phi i32 [ %2288, %2286 ], [ %2275, %2280 ]
  %2293 = phi i1 [ false, %2286 ], [ true, %2280 ]
  %2294 = and i32 %2292, 255
  %2295 = zext i32 %2294 to i64
  %2296 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %2295
  %2297 = load i8, i8* %2296, align 1
  %2298 = zext i8 %2297 to i32
  %2299 = shl i32 %2292, %2298
  %2300 = zext i8 %2297 to i64
  %2301 = shl i64 %2291, %2300
  %2302 = sub nsw i32 %2281, %2298
  store i64 %2301, i64* %324, align 8
  store i32 %2302, i32* %318, align 8
  store i32 %2299, i32* %313, align 4
  br i1 %2293, label %2346, label %2303

2303:                                             ; preds = %2290, %2328
  %2304 = phi i64 [ %2339, %2328 ], [ %2301, %2290 ]
  %2305 = phi i32 [ %2340, %2328 ], [ %2302, %2290 ]
  %2306 = phi i32 [ %2337, %2328 ], [ %2299, %2290 ]
  %2307 = phi i32 [ %2309, %2328 ], [ 8, %2290 ]
  %2308 = phi i32 [ %2342, %2328 ], [ 0, %2290 ]
  %2309 = add nsw i32 %2307, -1
  %2310 = shl i32 %2306, 7
  %2311 = add i32 %2310, -128
  %2312 = lshr i32 %2311, 8
  %2313 = add nuw nsw i32 %2312, 1
  %2314 = icmp slt i32 %2305, 0
  br i1 %2314, label %2315, label %2318

2315:                                             ; preds = %2303
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %2316 = load i32, i32* %318, align 8
  %2317 = load i64, i64* %324, align 8
  br label %2318

2318:                                             ; preds = %2315, %2303
  %2319 = phi i64 [ %2317, %2315 ], [ %2304, %2303 ]
  %2320 = phi i32 [ %2316, %2315 ], [ %2305, %2303 ]
  %2321 = zext i32 %2313 to i64
  %2322 = shl i64 %2321, 56
  %2323 = icmp ult i64 %2319, %2322
  br i1 %2323, label %2328, label %2324

2324:                                             ; preds = %2318
  %2325 = load i32, i32* %313, align 4
  %2326 = sub i32 %2325, %2313
  %2327 = sub i64 %2319, %2322
  br label %2328

2328:                                             ; preds = %2324, %2318
  %2329 = phi i64 [ %2327, %2324 ], [ %2319, %2318 ]
  %2330 = phi i32 [ %2326, %2324 ], [ %2313, %2318 ]
  %2331 = phi i32 [ 1, %2324 ], [ 0, %2318 ]
  %2332 = and i32 %2330, 255
  %2333 = zext i32 %2332 to i64
  %2334 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %2333
  %2335 = load i8, i8* %2334, align 1
  %2336 = zext i8 %2335 to i32
  %2337 = shl i32 %2330, %2336
  %2338 = zext i8 %2335 to i64
  %2339 = shl i64 %2329, %2338
  %2340 = sub nsw i32 %2320, %2336
  store i64 %2339, i64* %324, align 8
  store i32 %2340, i32* %318, align 8
  store i32 %2337, i32* %313, align 4
  %2341 = shl i32 %2331, %2309
  %2342 = or i32 %2341, %2308
  %2343 = icmp eq i32 %2309, 0
  br i1 %2343, label %2344, label %2303

2344:                                             ; preds = %2328
  %2345 = trunc i32 %2342 to i8
  store i8 %2345, i8* %2267, align 1
  br label %2346

2346:                                             ; preds = %2290, %2344
  br i1 %2263, label %2353, label %2347

2347:                                             ; preds = %2346
  %2348 = load i8, i8* %2267, align 1
  %2349 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 4, i64 %2258, i64 %2260, i64 %2264, i64 %2266
  %2350 = load i8, i8* %2349, align 1
  %2351 = icmp eq i8 %2348, %2350
  br i1 %2351, label %2353, label %2352

2352:                                             ; preds = %2347
  store i32 0, i32* %15, align 4
  br label %2353

2353:                                             ; preds = %2347, %2346, %2352
  %2354 = add nuw nsw i64 %2266, 1
  %2355 = icmp eq i64 %2354, 11
  br i1 %2355, label %2356, label %2265

2356:                                             ; preds = %2353
  %2357 = add nuw nsw i64 %2262, 1
  %2358 = icmp eq i64 %2357, 3
  br i1 %2358, label %2359, label %2261

2359:                                             ; preds = %2356
  %2360 = add nuw nsw i64 %2260, 1
  %2361 = icmp eq i64 %2360, 8
  br i1 %2361, label %2362, label %2259

2362:                                             ; preds = %2359
  %2363 = add nuw nsw i64 %2258, 1
  %2364 = icmp eq i64 %2363, 4
  br i1 %2364, label %2365, label %2257

2365:                                             ; preds = %2362
  %2366 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 1, i64 0
  %2367 = bitcast i16* %2366 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %2367, i8 0, i64 800, i1 false)
  call void @vp8_decode_mode_mvs(%struct.VP8D_COMP* %0) #4
  %2368 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 56
  %2369 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %2368 to i8**
  %2370 = load i8*, i8** %2369, align 8
  %2371 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 28
  %2372 = load i32, i32* %2371, align 8
  %2373 = sext i32 %2372 to i64
  %2374 = mul nsw i64 %2373, 9
  call void @llvm.memset.p0i8.i64(i8* align 1 %2370, i8 0, i64 %2374, i1 false)
  %2375 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 35
  store i32 0, i32* %2375, align 32
  %2376 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 6, i32 0
  %2377 = load atomic volatile i32, i32* %2376 acquire, align 4
  %2378 = icmp eq i32 %2377, 0
  %2379 = load i32, i32* %1326, align 4
  br i1 %2378, label %2422, label %2380

2380:                                             ; preds = %2365
  %2381 = icmp eq i32 %2379, 0
  br i1 %2381, label %2422, label %2382

2382:                                             ; preds = %2380
  %2383 = call i32 @vp8mt_decode_mb_rows(%struct.VP8D_COMP* %0, %struct.macroblockd* %8) #4
  %2384 = icmp eq i32 %2383, 0
  br i1 %2384, label %2388, label %2385

2385:                                             ; preds = %2382
  call void @vp8_decoder_remove_threads(%struct.VP8D_COMP* %0) #4
  %2386 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 38
  store i32 1, i32* %2386, align 8
  %2387 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %7, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %2387, i32 7, i8* null) #4
  br label %2388

2388:                                             ; preds = %2382, %2385
  call void @vp8_yv12_extend_frame_borders_c(%struct.yv12_buffer_config* %18) #4
  %2389 = load i32, i32* %1283, align 4
  %2390 = icmp eq i32 %2389, 0
  br i1 %2390, label %3198, label %2391

2391:                                             ; preds = %2388
  %2392 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 20
  %2393 = load %struct.MB_ROW_DEC*, %struct.MB_ROW_DEC** %2392, align 32
  %2394 = zext i32 %2389 to i64
  %2395 = add nsw i64 %2394, -1
  %2396 = and i64 %2394, 3
  %2397 = icmp ult i64 %2395, 3
  br i1 %2397, label %3183, label %2398

2398:                                             ; preds = %2391
  %2399 = sub nsw i64 %2394, %2396
  br label %2400

2400:                                             ; preds = %2400, %2398
  %2401 = phi i64 [ 0, %2398 ], [ %2419, %2400 ]
  %2402 = phi i32 [ 0, %2398 ], [ %2418, %2400 ]
  %2403 = phi i64 [ %2399, %2398 ], [ %2420, %2400 ]
  %2404 = getelementptr inbounds %struct.MB_ROW_DEC, %struct.MB_ROW_DEC* %2393, i64 %2401, i32 0, i32 44
  %2405 = load i32, i32* %2404, align 32
  %2406 = or i32 %2405, %2402
  %2407 = or i64 %2401, 1
  %2408 = getelementptr inbounds %struct.MB_ROW_DEC, %struct.MB_ROW_DEC* %2393, i64 %2407, i32 0, i32 44
  %2409 = load i32, i32* %2408, align 32
  %2410 = or i32 %2409, %2406
  %2411 = or i64 %2401, 2
  %2412 = getelementptr inbounds %struct.MB_ROW_DEC, %struct.MB_ROW_DEC* %2393, i64 %2411, i32 0, i32 44
  %2413 = load i32, i32* %2412, align 32
  %2414 = or i32 %2413, %2410
  %2415 = or i64 %2401, 3
  %2416 = getelementptr inbounds %struct.MB_ROW_DEC, %struct.MB_ROW_DEC* %2393, i64 %2415, i32 0, i32 44
  %2417 = load i32, i32* %2416, align 32
  %2418 = or i32 %2417, %2414
  %2419 = add nuw nsw i64 %2401, 4
  %2420 = add i64 %2403, -4
  %2421 = icmp eq i64 %2420, 0
  br i1 %2421, label %3183, label %2400

2422:                                             ; preds = %2365, %2380
  %2423 = phi i32 [ 0, %2380 ], [ %2379, %2365 ]
  %2424 = load %struct.modeinfo*, %struct.modeinfo** %213, align 32
  %2425 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %17, align 32
  %2426 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2425, i64 0, i32 4
  %2427 = load i32, i32* %2426, align 8
  %2428 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2425, i64 0, i32 9
  %2429 = load i32, i32* %2428, align 4
  %2430 = bitcast [4 x [3 x i8*]]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %2430) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2430, i8 -86, i64 96, i1 false) #4
  %2431 = bitcast [4 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2431) #4
  %2432 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 0
  %2433 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %2434 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 2
  %2435 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  store i32 0, i32* %2432, align 16
  %2436 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 1, i64 1
  %2437 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %2436, align 8
  %2438 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2437, i64 0, i32 13
  %2439 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %2, i64 0, i64 1
  %2440 = bitcast i8** %2438 to <2 x i64>*
  %2441 = load <2 x i64>, <2 x i64>* %2440, align 8
  %2442 = bitcast [3 x i8*]* %2439 to <2 x i64>*
  store <2 x i64> %2441, <2 x i64>* %2442, align 8
  %2443 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2437, i64 0, i32 15
  %2444 = bitcast i8** %2443 to i64*
  %2445 = load i64, i64* %2444, align 8
  %2446 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %2, i64 0, i64 1, i64 2
  %2447 = bitcast i8** %2446 to i64*
  store i64 %2445, i64* %2447, align 8
  %2448 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2437, i64 0, i32 28
  %2449 = load i32, i32* %2448, align 4
  store i32 %2449, i32* %2433, align 4
  %2450 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 1, i64 2
  %2451 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %2450, align 8
  %2452 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2451, i64 0, i32 13
  %2453 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %2, i64 0, i64 2
  %2454 = bitcast i8** %2452 to <2 x i64>*
  %2455 = load <2 x i64>, <2 x i64>* %2454, align 8
  %2456 = bitcast [3 x i8*]* %2453 to <2 x i64>*
  store <2 x i64> %2455, <2 x i64>* %2456, align 16
  %2457 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2451, i64 0, i32 15
  %2458 = bitcast i8** %2457 to i64*
  %2459 = load i64, i64* %2458, align 8
  %2460 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %2, i64 0, i64 2, i64 2
  %2461 = bitcast i8** %2460 to i64*
  store i64 %2459, i64* %2461, align 16
  %2462 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2451, i64 0, i32 28
  %2463 = load i32, i32* %2462, align 4
  store i32 %2463, i32* %2434, align 8
  %2464 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 1, i64 3
  %2465 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %2464, align 8
  %2466 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2465, i64 0, i32 13
  %2467 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %2, i64 0, i64 3
  %2468 = bitcast i8** %2466 to <2 x i64>*
  %2469 = load <2 x i64>, <2 x i64>* %2468, align 8
  %2470 = bitcast [3 x i8*]* %2467 to <2 x i64>*
  store <2 x i64> %2469, <2 x i64>* %2470, align 8
  %2471 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2465, i64 0, i32 15
  %2472 = bitcast i8** %2471 to i64*
  %2473 = load i64, i64* %2472, align 8
  %2474 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %2, i64 0, i64 3, i64 2
  %2475 = bitcast i8** %2474 to i64*
  store i64 %2473, i64* %2475, align 8
  %2476 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2465, i64 0, i32 28
  %2477 = load i32, i32* %2476, align 4
  store i32 %2477, i32* %2435, align 4
  %2478 = shl i32 1, %2423
  %2479 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2425, i64 0, i32 13
  %2480 = load i8*, i8** %2479, align 8
  %2481 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2425, i64 0, i32 14
  %2482 = load i8*, i8** %2481, align 8
  %2483 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2425, i64 0, i32 15
  %2484 = load i8*, i8** %2483, align 8
  %2485 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 16
  store i32 0, i32* %2485, align 16
  %2486 = load i32, i32* %742, align 16
  %2487 = icmp eq i32 %2486, 0
  br i1 %2487, label %2489, label %2488

2488:                                             ; preds = %2422
  call void @vp8_loop_filter_frame_init(%struct.VP8Common* %7, %struct.macroblockd* %8, i32 %2486) #4
  br label %2489

2489:                                             ; preds = %2488, %2422
  call void @vp8_setup_intra_recon_top_line(%struct.yv12_buffer_config* %2425) #4
  %2490 = load i32, i32* %1290, align 4
  %2491 = icmp sgt i32 %2490, 0
  br i1 %2491, label %2492, label %2944

2492:                                             ; preds = %2489
  %2493 = icmp sgt i32 %2478, 1
  %2494 = shl i32 %2427, 4
  %2495 = shl i32 %2429, 3
  %2496 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %2368 to i64*
  %2497 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 21
  %2498 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %2497 to i64*
  %2499 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %209 to i8**
  %2500 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 17
  %2501 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 37
  %2502 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 38
  %2503 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 18, i64 0
  %2504 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 18, i64 1
  %2505 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 18, i64 2
  %2506 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 19, i64 0
  %2507 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 19, i64 1
  %2508 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 19, i64 2
  %2509 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 12, i32 4
  %2510 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 12, i32 9
  %2511 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 20, i64 0
  %2512 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 20, i64 1
  %2513 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 35
  %2514 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 36
  %2515 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 12, i32 13
  %2516 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 12, i32 14
  %2517 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 12, i32 15
  %2518 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 11, i32 13
  %2519 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 11, i32 14
  %2520 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 11, i32 15
  %2521 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 26
  %2522 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 3, i64 0
  %2523 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 9, i64 24
  %2524 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 3, i64 24
  %2525 = getelementptr inbounds %struct.blockd, %struct.blockd* %2523, i64 0, i32 0
  %2526 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 9, i64 24, i32 1
  %2527 = bitcast %struct.blockd* %2523 to i32**
  %2528 = bitcast %struct.blockd* %2523 to i8**
  %2529 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 1, i64 256
  %2530 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 3, i64 16
  %2531 = sext i32 %2494 to i64
  %2532 = sext i32 %2495 to i64
  %2533 = bitcast i8** %2518 to i8*
  %2534 = bitcast i8** %2503 to <2 x i8*>*
  %2535 = bitcast i8** %2503 to <2 x i8*>*
  %2536 = bitcast i8** %2505 to <2 x i8*>*
  %2537 = bitcast i8** %2505 to <2 x i8*>*
  %2538 = bitcast i8** %2507 to <2 x i8*>*
  %2539 = bitcast i8** %2507 to <2 x i8*>*
  br label %2540

2540:                                             ; preds = %2927, %2492
  %2541 = phi i64 [ 0, %2492 ], [ %2935, %2927 ]
  %2542 = phi i32 [ 0, %2492 ], [ %2940, %2927 ]
  %2543 = phi i32 [ 0, %2492 ], [ %2939, %2927 ]
  %2544 = phi i8* [ %2480, %2492 ], [ %2934, %2927 ]
  %2545 = phi i8* [ %2482, %2492 ], [ %2933, %2927 ]
  %2546 = phi i8* [ %2484, %2492 ], [ %2932, %2927 ]
  %2547 = phi i8* [ %2480, %2492 ], [ %2931, %2927 ]
  %2548 = phi i8* [ %2482, %2492 ], [ %2930, %2927 ]
  %2549 = phi i8* [ %2484, %2492 ], [ %2929, %2927 ]
  %2550 = phi i32 [ 0, %2492 ], [ %2561, %2927 ]
  %2551 = phi %struct.modeinfo* [ %2424, %2492 ], [ %2928, %2927 ]
  %2552 = sext i32 %2543 to i64
  %2553 = sext i32 %2542 to i64
  br i1 %2493, label %2554, label %2560

2554:                                             ; preds = %2540
  %2555 = sext i32 %2550 to i64
  %2556 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 %2555
  store %struct.BOOL_DECODER* %2556, %struct.BOOL_DECODER** %1331, align 8
  %2557 = add nsw i32 %2550, 1
  %2558 = icmp eq i32 %2557, %2478
  %2559 = select i1 %2558, i32 0, i32 %2557
  br label %2560

2560:                                             ; preds = %2554, %2540
  %2561 = phi i32 [ %2559, %2554 ], [ %2550, %2540 ]
  %2562 = trunc i64 %2541 to i32
  %2563 = mul i32 %2494, %2562
  %2564 = mul i32 %2495, %2562
  %2565 = load i64, i64* %2496, align 8
  store i64 %2565, i64* %2498, align 16
  %2566 = load i8*, i8** %2499, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %2566, i8 0, i64 9, i1 false) #4
  store i32 0, i32* %2500, align 4
  %2567 = shl i32 %2562, 7
  %2568 = sub nsw i32 0, %2567
  store i32 %2568, i32* %2501, align 4
  %2569 = load i32, i32* %1290, align 4
  %2570 = xor i32 %2562, 33554431
  %2571 = add i32 %2569, %2570
  %2572 = shl i32 %2571, 7
  store i32 %2572, i32* %2502, align 16
  %2573 = sext i32 %2563 to i64
  %2574 = getelementptr inbounds i8, i8* %2480, i64 %2573
  %2575 = sext i32 %2564 to i64
  %2576 = getelementptr inbounds i8, i8* %2482, i64 %2575
  %2577 = getelementptr inbounds i8, i8* %2484, i64 %2575
  %2578 = getelementptr inbounds i8, i8* %2574, i64 -1
  store i8* %2578, i8** %2506, align 16
  %2579 = getelementptr inbounds i8, i8* %2576, i64 -1
  store i8* %2579, i8** %2507, align 8
  %2580 = getelementptr inbounds i8, i8* %2577, i64 -1
  store i8* %2580, i8** %2508, align 16
  %2581 = load i32, i32* %2509, align 16
  %2582 = sext i32 %2581 to i64
  %2583 = sub nsw i64 0, %2582
  %2584 = getelementptr inbounds i8, i8* %2574, i64 %2583
  store i8* %2584, i8** %2503, align 8
  %2585 = load i32, i32* %2510, align 4
  %2586 = sext i32 %2585 to i64
  %2587 = sub nsw i64 0, %2586
  %2588 = getelementptr inbounds i8, i8* %2576, i64 %2587
  store i8* %2588, i8** %2504, align 8
  %2589 = getelementptr inbounds i8, i8* %2577, i64 %2587
  store i8* %2589, i8** %2505, align 8
  store i32 %2581, i32* %2511, align 8
  store i32 %2585, i32* %2512, align 4
  store i8 -127, i8* %2578, align 1
  %2590 = getelementptr inbounds i8, i8* %2578, i64 %2582
  store i8 -127, i8* %2590, align 1
  %2591 = shl nsw i64 %2582, 1
  %2592 = getelementptr inbounds i8, i8* %2578, i64 %2591
  store i8 -127, i8* %2592, align 1
  %2593 = mul nsw i64 %2582, 3
  %2594 = getelementptr inbounds i8, i8* %2578, i64 %2593
  store i8 -127, i8* %2594, align 1
  %2595 = shl nsw i64 %2582, 2
  %2596 = getelementptr inbounds i8, i8* %2578, i64 %2595
  store i8 -127, i8* %2596, align 1
  %2597 = mul nsw i64 %2582, 5
  %2598 = getelementptr inbounds i8, i8* %2578, i64 %2597
  store i8 -127, i8* %2598, align 1
  %2599 = mul nsw i64 %2582, 6
  %2600 = getelementptr inbounds i8, i8* %2578, i64 %2599
  store i8 -127, i8* %2600, align 1
  %2601 = mul nsw i64 %2582, 7
  %2602 = getelementptr inbounds i8, i8* %2578, i64 %2601
  store i8 -127, i8* %2602, align 1
  %2603 = shl nsw i64 %2582, 3
  %2604 = getelementptr inbounds i8, i8* %2578, i64 %2603
  store i8 -127, i8* %2604, align 1
  %2605 = mul nsw i64 %2582, 9
  %2606 = getelementptr inbounds i8, i8* %2578, i64 %2605
  store i8 -127, i8* %2606, align 1
  %2607 = mul nsw i64 %2582, 10
  %2608 = getelementptr inbounds i8, i8* %2578, i64 %2607
  store i8 -127, i8* %2608, align 1
  %2609 = mul nsw i64 %2582, 11
  %2610 = getelementptr inbounds i8, i8* %2578, i64 %2609
  store i8 -127, i8* %2610, align 1
  %2611 = mul nsw i64 %2582, 12
  %2612 = getelementptr inbounds i8, i8* %2578, i64 %2611
  store i8 -127, i8* %2612, align 1
  %2613 = mul nsw i64 %2582, 13
  %2614 = getelementptr inbounds i8, i8* %2578, i64 %2613
  store i8 -127, i8* %2614, align 1
  %2615 = mul nsw i64 %2582, 14
  %2616 = getelementptr inbounds i8, i8* %2578, i64 %2615
  store i8 -127, i8* %2616, align 1
  %2617 = mul nsw i64 %2582, 15
  %2618 = getelementptr inbounds i8, i8* %2578, i64 %2617
  store i8 -127, i8* %2618, align 1
  store i8 -127, i8* %2579, align 1
  %2619 = getelementptr inbounds i8, i8* %2579, i64 %2586
  store i8 -127, i8* %2619, align 1
  %2620 = shl nsw i64 %2586, 1
  %2621 = getelementptr inbounds i8, i8* %2579, i64 %2620
  store i8 -127, i8* %2621, align 1
  %2622 = mul nsw i64 %2586, 3
  %2623 = getelementptr inbounds i8, i8* %2579, i64 %2622
  store i8 -127, i8* %2623, align 1
  %2624 = shl nsw i64 %2586, 2
  %2625 = getelementptr inbounds i8, i8* %2579, i64 %2624
  store i8 -127, i8* %2625, align 1
  %2626 = mul nsw i64 %2586, 5
  %2627 = getelementptr inbounds i8, i8* %2579, i64 %2626
  store i8 -127, i8* %2627, align 1
  %2628 = mul nsw i64 %2586, 6
  %2629 = getelementptr inbounds i8, i8* %2579, i64 %2628
  store i8 -127, i8* %2629, align 1
  %2630 = mul nsw i64 %2586, 7
  %2631 = getelementptr inbounds i8, i8* %2579, i64 %2630
  store i8 -127, i8* %2631, align 1
  store i8 -127, i8* %2580, align 1
  %2632 = getelementptr inbounds i8, i8* %2580, i64 %2586
  store i8 -127, i8* %2632, align 1
  %2633 = getelementptr inbounds i8, i8* %2580, i64 %2620
  store i8 -127, i8* %2633, align 1
  %2634 = getelementptr inbounds i8, i8* %2580, i64 %2622
  store i8 -127, i8* %2634, align 1
  %2635 = getelementptr inbounds i8, i8* %2580, i64 %2624
  store i8 -127, i8* %2635, align 1
  %2636 = getelementptr inbounds i8, i8* %2580, i64 %2626
  store i8 -127, i8* %2636, align 1
  %2637 = getelementptr inbounds i8, i8* %2580, i64 %2628
  store i8 -127, i8* %2637, align 1
  %2638 = getelementptr inbounds i8, i8* %2580, i64 %2630
  store i8 -127, i8* %2638, align 1
  %2639 = load i32, i32* %2371, align 8
  %2640 = icmp sgt i32 %2639, 0
  br i1 %2640, label %2641, label %2886

2641:                                             ; preds = %2560
  %2642 = load %struct.modeinfo*, %struct.modeinfo** %213, align 32
  br label %2643

2643:                                             ; preds = %2862, %2641
  %2644 = phi %struct.modeinfo* [ %2642, %2641 ], [ %2880, %2862 ]
  %2645 = phi i64 [ %2553, %2641 ], [ %2878, %2862 ]
  %2646 = phi i64 [ %2552, %2641 ], [ %2879, %2862 ]
  %2647 = phi i32 [ %2639, %2641 ], [ %2884, %2862 ]
  %2648 = phi i32 [ 0, %2641 ], [ %2883, %2862 ]
  %2649 = shl i32 %2648, 7
  %2650 = sub nsw i32 0, %2649
  store i32 %2650, i32* %2513, align 4
  %2651 = xor i32 %2648, 33554431
  %2652 = add i32 %2651, %2647
  %2653 = shl i32 %2652, 7
  store i32 %2653, i32* %2514, align 8
  %2654 = getelementptr inbounds i8, i8* %2480, i64 %2645
  store i8* %2654, i8** %2515, align 8
  %2655 = getelementptr inbounds i8, i8* %2482, i64 %2646
  store i8* %2655, i8** %2516, align 32
  %2656 = getelementptr inbounds i8, i8* %2484, i64 %2646
  store i8* %2656, i8** %2517, align 8
  %2657 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2644, i64 0, i32 0, i32 2
  %2658 = load i8, i8* %2657, align 2
  %2659 = icmp eq i8 %2658, 0
  br i1 %2659, label %2671, label %2660

2660:                                             ; preds = %2643
  %2661 = zext i8 %2658 to i64
  %2662 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %2, i64 0, i64 %2661, i64 0
  %2663 = load i8*, i8** %2662, align 8
  %2664 = getelementptr inbounds i8, i8* %2663, i64 %2645
  store i8* %2664, i8** %2518, align 8
  %2665 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %2, i64 0, i64 %2661, i64 1
  %2666 = load i8*, i8** %2665, align 8
  %2667 = getelementptr inbounds i8, i8* %2666, i64 %2646
  store i8* %2667, i8** %2519, align 32
  %2668 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %2, i64 0, i64 %2661, i64 2
  %2669 = load i8*, i8** %2668, align 8
  %2670 = getelementptr inbounds i8, i8* %2669, i64 %2646
  store i8* %2670, i8** %2520, align 8
  br label %2672

2671:                                             ; preds = %2643
  call void @llvm.memset.p0i8.i64(i8* align 8 %2533, i8 0, i64 24, i1 false) #4
  br label %2672

2672:                                             ; preds = %2671, %2660
  %2673 = load i8, i8* %2657, align 2
  %2674 = zext i8 %2673 to i64
  %2675 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %2674
  %2676 = load i32, i32* %2675, align 4
  %2677 = load i32, i32* %19, align 32
  %2678 = or i32 %2677, %2676
  store i32 %2678, i32* %19, align 32
  %2679 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2644, i64 0, i32 0, i32 6
  %2680 = load i8, i8* %2679, align 1
  %2681 = icmp eq i8 %2680, 0
  br i1 %2681, label %2683, label %2682

2682:                                             ; preds = %2672
  call void @vp8_reset_mb_tokens_context(%struct.macroblockd* %8) #4
  br label %2695

2683:                                             ; preds = %2672
  %2684 = load %struct.BOOL_DECODER*, %struct.BOOL_DECODER** %1331, align 8
  %2685 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %2684, i64 0, i32 3
  %2686 = load i32, i32* %2685, align 8
  %2687 = add i32 %2686, -65
  %2688 = icmp ugt i32 %2687, 1073741758
  br i1 %2688, label %2689, label %2695

2689:                                             ; preds = %2683
  %2690 = call i32 @vp8_decode_mb_tokens(%struct.VP8D_COMP* %0, %struct.macroblockd* %8) #4
  %2691 = icmp eq i32 %2690, 0
  %2692 = zext i1 %2691 to i8
  %2693 = load %struct.modeinfo*, %struct.modeinfo** %213, align 32
  %2694 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2693, i64 0, i32 0, i32 6
  store i8 %2692, i8* %2694, align 1
  br label %2695

2695:                                             ; preds = %2689, %2683, %2682
  %2696 = load %struct.modeinfo*, %struct.modeinfo** %213, align 32
  %2697 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2696, i64 0, i32 0, i32 0
  %2698 = load i8, i8* %2697, align 4
  %2699 = load i8, i8* %346, align 32
  %2700 = icmp eq i8 %2699, 0
  br i1 %2700, label %2749, label %2701

2701:                                             ; preds = %2695
  %2702 = load i8, i8* %2521, align 1
  %2703 = icmp eq i8 %2702, 1
  br i1 %2703, label %2704, label %2711

2704:                                             ; preds = %2701
  %2705 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2696, i64 0, i32 0, i32 8
  %2706 = load i8, i8* %2705, align 1
  %2707 = zext i8 %2706 to i64
  %2708 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 28, i64 0, i64 %2707
  %2709 = load i8, i8* %2708, align 1
  %2710 = sext i8 %2709 to i32
  br label %2720

2711:                                             ; preds = %2701
  %2712 = load i32, i32* %1374, align 16
  %2713 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2696, i64 0, i32 0, i32 8
  %2714 = load i8, i8* %2713, align 1
  %2715 = zext i8 %2714 to i64
  %2716 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 28, i64 0, i64 %2715
  %2717 = load i8, i8* %2716, align 1
  %2718 = sext i8 %2717 to i32
  %2719 = add nsw i32 %2712, %2718
  br label %2720

2720:                                             ; preds = %2711, %2704
  %2721 = phi i32 [ %2710, %2704 ], [ %2719, %2711 ]
  %2722 = icmp sgt i32 %2721, -1
  %2723 = icmp slt i32 %2721, 127
  %2724 = select i1 %2723, i32 %2721, i32 127
  %2725 = select i1 %2722, i32 %2724, i32 0
  store i16 1, i16* %1932, align 32
  %2726 = sext i32 %2725 to i64
  %2727 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 2, i64 %2726, i64 0
  %2728 = load i16, i16* %2727, align 4
  store i16 %2728, i16* %1936, align 32
  %2729 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 3, i64 %2726, i64 0
  %2730 = load i16, i16* %2729, align 4
  store i16 %2730, i16* %1939, align 32
  %2731 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 4, i64 %2726, i64 0
  %2732 = load i16, i16* %2731, align 4
  store i16 %2732, i16* %1942, align 32
  %2733 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 2, i64 %2726, i64 1
  %2734 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 3, i64 %2726, i64 1
  %2735 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 4, i64 %2726, i64 1
  br label %2736

2736:                                             ; preds = %3823, %2720
  %2737 = phi i64 [ 1, %2720 ], [ %3831, %3823 ]
  %2738 = load i16, i16* %2733, align 2
  %2739 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 5, i64 %2737
  store i16 %2738, i16* %2739, align 2
  %2740 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 6, i64 %2737
  store i16 %2738, i16* %2740, align 2
  %2741 = load i16, i16* %2734, align 2
  %2742 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 7, i64 %2737
  store i16 %2741, i16* %2742, align 2
  %2743 = load i16, i16* %2735, align 2
  %2744 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 8, i64 %2737
  store i16 %2743, i16* %2744, align 2
  %2745 = add nuw nsw i64 %2737, 1
  %2746 = icmp eq i64 %2745, 16
  br i1 %2746, label %2747, label %3823

2747:                                             ; preds = %2736
  %2748 = load %struct.modeinfo*, %struct.modeinfo** %213, align 32
  br label %2749

2749:                                             ; preds = %2747, %2695
  %2750 = phi %struct.modeinfo* [ %2748, %2747 ], [ %2696, %2695 ]
  %2751 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2750, i64 0, i32 0, i32 2
  %2752 = load i8, i8* %2751, align 2
  %2753 = icmp eq i8 %2752, 0
  br i1 %2753, label %2754, label %2832

2754:                                             ; preds = %2749
  %2755 = load i8*, i8** %2504, align 8
  %2756 = load i8*, i8** %2505, align 8
  %2757 = load i8*, i8** %2507, align 8
  %2758 = load i8*, i8** %2508, align 16
  %2759 = load i32, i32* %2512, align 4
  %2760 = load i8*, i8** %2516, align 32
  %2761 = load i8*, i8** %2517, align 8
  %2762 = load i32, i32* %2510, align 4
  call void @vp8_build_intra_predictors_mbuv_s(%struct.macroblockd* %8, i8* %2755, i8* %2756, i8* %2757, i8* %2758, i32 %2759, i8* %2760, i8* %2761, i32 %2762) #4
  %2763 = icmp eq i8 %2698, 4
  br i1 %2763, label %2770, label %2764

2764:                                             ; preds = %2754
  %2765 = load i8*, i8** %2503, align 8
  %2766 = load i8*, i8** %2506, align 16
  %2767 = load i32, i32* %2511, align 8
  %2768 = load i8*, i8** %2515, align 8
  %2769 = load i32, i32* %2509, align 16
  call void @vp8_build_intra_predictors_mby_s(%struct.macroblockd* %8, i8* %2765, i8* %2766, i32 %2767, i8* %2768, i32 %2769) #4
  br label %2833

2770:                                             ; preds = %2754
  %2771 = load i32, i32* %2509, align 16
  %2772 = load %struct.modeinfo*, %struct.modeinfo** %213, align 32
  %2773 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2772, i64 0, i32 0, i32 6
  %2774 = load i8, i8* %2773, align 1
  %2775 = icmp eq i8 %2774, 0
  br i1 %2775, label %2777, label %2776

2776:                                             ; preds = %2770
  call void @llvm.memset.p0i8.i64(i8* align 32 %2522, i8 0, i64 25, i1 false) #4
  br label %2777

2777:                                             ; preds = %2776, %2770
  %2778 = load i8*, i8** %2503, align 8
  %2779 = getelementptr inbounds i8, i8* %2778, i64 16
  %2780 = load i8*, i8** %2515, align 8
  %2781 = sext i32 %2771 to i64
  %2782 = sub nsw i64 0, %2781
  %2783 = getelementptr inbounds i8, i8* %2780, i64 16
  %2784 = getelementptr inbounds i8, i8* %2783, i64 %2782
  %2785 = bitcast i8* %2779 to i32*
  %2786 = shl nsw i32 %2771, 2
  %2787 = sext i32 %2786 to i64
  %2788 = getelementptr inbounds i8, i8* %2784, i64 %2787
  %2789 = bitcast i8* %2788 to i32*
  %2790 = shl nsw i32 %2771, 3
  %2791 = sext i32 %2790 to i64
  %2792 = getelementptr inbounds i8, i8* %2784, i64 %2791
  %2793 = bitcast i8* %2792 to i32*
  %2794 = mul nsw i32 %2771, 12
  %2795 = sext i32 %2794 to i64
  %2796 = getelementptr inbounds i8, i8* %2784, i64 %2795
  %2797 = bitcast i8* %2796 to i32*
  %2798 = load i32, i32* %2785, align 4
  store i32 %2798, i32* %2789, align 4
  %2799 = load i32, i32* %2785, align 4
  store i32 %2799, i32* %2793, align 4
  %2800 = load i32, i32* %2785, align 4
  store i32 %2800, i32* %2797, align 4
  br label %2801

2801:                                             ; preds = %2829, %2777
  %2802 = phi i64 [ 0, %2777 ], [ %2830, %2829 ]
  %2803 = load i8*, i8** %2515, align 8
  %2804 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 9, i64 %2802, i32 4
  %2805 = load i32, i32* %2804, align 8
  %2806 = sext i32 %2805 to i64
  %2807 = getelementptr inbounds i8, i8* %2803, i64 %2806
  %2808 = load %struct.modeinfo*, %struct.modeinfo** %213, align 32
  %2809 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2808, i64 0, i32 1, i64 %2802, i32 0
  %2810 = load i32, i32* %2809, align 4
  %2811 = getelementptr inbounds i8, i8* %2807, i64 %2782
  %2812 = getelementptr inbounds i8, i8* %2807, i64 -1
  %2813 = getelementptr inbounds i8, i8* %2811, i64 -1
  %2814 = load i8, i8* %2813, align 1
  call void @vp8_intra4x4_predict(i8* %2811, i8* %2812, i32 %2771, i32 %2810, i8* %2807, i32 %2771, i8 zeroext %2814) #4
  %2815 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 3, i64 %2802
  %2816 = load i8, i8* %2815, align 1
  %2817 = icmp eq i8 %2816, 0
  br i1 %2817, label %2829, label %2818

2818:                                             ; preds = %2801
  %2819 = icmp sgt i8 %2816, 1
  %2820 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 9, i64 %2802, i32 0
  %2821 = load i16*, i16** %2820, align 8
  br i1 %2819, label %2822, label %2823

2822:                                             ; preds = %2818
  call void @vp8_dequant_idct_add_mmx(i16* %2821, i16* %1936, i8* %2807, i32 %2771) #4
  br label %2829

2823:                                             ; preds = %2818
  %2824 = load i16, i16* %2821, align 2
  %2825 = load i16, i16* %1936, align 2
  %2826 = mul i16 %2825, %2824
  call void @vp8_dc_only_idct_add_mmx(i16 signext %2826, i8* %2807, i32 %2771, i8* %2807, i32 %2771) #4
  %2827 = bitcast i16** %2820 to i32**
  %2828 = load i32*, i32** %2827, align 8
  store i32 0, i32* %2828, align 2
  br label %2829

2829:                                             ; preds = %2823, %2822, %2801
  %2830 = add nuw nsw i64 %2802, 1
  %2831 = icmp eq i64 %2830, 16
  br i1 %2831, label %2833, label %2801

2832:                                             ; preds = %2749
  call void @vp8_build_inter_predictors_mb(%struct.macroblockd* %8) #4
  br label %2833

2833:                                             ; preds = %2829, %2832, %2764
  %2834 = load %struct.modeinfo*, %struct.modeinfo** %213, align 32
  %2835 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2834, i64 0, i32 0, i32 6
  %2836 = load i8, i8* %2835, align 1
  %2837 = icmp eq i8 %2836, 0
  br i1 %2837, label %2838, label %2862

2838:                                             ; preds = %2833
  switch i8 %2698, label %2839 [
    i8 4, label %2857
    i8 9, label %2853
  ]

2839:                                             ; preds = %2838
  %2840 = load i8, i8* %2524, align 8
  %2841 = icmp sgt i8 %2840, 1
  br i1 %2841, label %2842, label %2845

2842:                                             ; preds = %2839
  call void @vp8_dequantize_b_mmx(%struct.blockd* %2523, i16* %1939) #4
  %2843 = load i16*, i16** %2526, align 8
  call void @vp8_short_inv_walsh4x4_sse2(i16* %2843, i16* %2366) #4
  %2844 = load i8*, i8** %2528, align 8
  call void @llvm.memset.p0i8.i64(i8* align 2 %2844, i8 0, i64 32, i1 false) #4
  br label %2853

2845:                                             ; preds = %2839
  %2846 = load i16*, i16** %2525, align 8
  %2847 = load i16, i16* %2846, align 2
  %2848 = load i16, i16* %1939, align 32
  %2849 = mul i16 %2848, %2847
  %2850 = load i16*, i16** %2526, align 8
  store i16 %2849, i16* %2850, align 2
  %2851 = load i16*, i16** %2526, align 8
  call void @vp8_short_inv_walsh4x4_1_c(i16* %2851, i16* %2366) #4
  %2852 = load i32*, i32** %2527, align 8
  store i32 0, i32* %2852, align 2
  br label %2853

2853:                                             ; preds = %2845, %2842, %2838
  %2854 = phi i16* [ %1936, %2838 ], [ %1932, %2845 ], [ %1932, %2842 ]
  %2855 = load i8*, i8** %2515, align 8
  %2856 = load i32, i32* %2509, align 16
  call void @vp8_dequant_idct_add_y_block_sse2(i16* %2366, i16* %2854, i8* %2855, i32 %2856, i8* %2522) #4
  br label %2857

2857:                                             ; preds = %2853, %2838
  %2858 = load i8*, i8** %2516, align 32
  %2859 = load i8*, i8** %2517, align 8
  %2860 = load i32, i32* %2510, align 4
  call void @vp8_dequant_idct_add_uv_block_sse2(i16* %2529, i16* %1942, i8* %2858, i8* %2859, i32 %2860, i8* %2530) #4
  %2861 = load %struct.modeinfo*, %struct.modeinfo** %213, align 32
  br label %2862

2862:                                             ; preds = %2857, %2833
  %2863 = phi %struct.modeinfo* [ %2834, %2833 ], [ %2861, %2857 ]
  store i32 1, i32* %2500, align 4
  %2864 = load %struct.BOOL_DECODER*, %struct.BOOL_DECODER** %1331, align 8
  %2865 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %2864, i64 0, i32 3
  %2866 = load i32, i32* %2865, align 8
  %2867 = add i32 %2866, -65
  %2868 = icmp ult i32 %2867, 1073741759
  %2869 = zext i1 %2868 to i32
  %2870 = load i32, i32* %19, align 32
  %2871 = or i32 %2870, %2869
  store i32 %2871, i32* %19, align 32
  %2872 = load <2 x i8*>, <2 x i8*>* %2534, align 8
  %2873 = getelementptr i8, <2 x i8*> %2872, <2 x i64> <i64 16, i64 8>
  store <2 x i8*> %2873, <2 x i8*>* %2535, align 8
  %2874 = load <2 x i8*>, <2 x i8*>* %2536, align 8
  %2875 = getelementptr i8, <2 x i8*> %2874, <2 x i64> <i64 8, i64 16>
  store <2 x i8*> %2875, <2 x i8*>* %2537, align 8
  %2876 = load <2 x i8*>, <2 x i8*>* %2538, align 8
  %2877 = getelementptr i8, <2 x i8*> %2876, <2 x i64> <i64 8, i64 8>
  store <2 x i8*> %2877, <2 x i8*>* %2539, align 8
  %2878 = add nsw i64 %2645, 16
  %2879 = add nsw i64 %2646, 8
  %2880 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2863, i64 1
  store %struct.modeinfo* %2880, %struct.modeinfo** %213, align 32
  %2881 = load %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES** %2497, align 16
  %2882 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %2881, i64 1
  store %struct.ENTROPY_CONTEXT_PLANES* %2882, %struct.ENTROPY_CONTEXT_PLANES** %2497, align 16
  %2883 = add nuw nsw i32 %2648, 1
  %2884 = load i32, i32* %2371, align 8
  %2885 = icmp slt i32 %2883, %2884
  br i1 %2885, label %2643, label %2886

2886:                                             ; preds = %2862, %2560
  %2887 = load i8*, i8** %2515, align 8
  %2888 = getelementptr inbounds i8, i8* %2887, i64 16
  %2889 = load i8*, i8** %2516, align 32
  %2890 = getelementptr inbounds i8, i8* %2889, i64 8
  %2891 = load i8*, i8** %2517, align 8
  %2892 = getelementptr inbounds i8, i8* %2891, i64 8
  call void @vp8_extend_mb_row(%struct.yv12_buffer_config* %2425, i8* %2888, i8* %2890, i8* %2892) #4
  %2893 = load %struct.modeinfo*, %struct.modeinfo** %213, align 32
  %2894 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2893, i64 1
  store %struct.modeinfo* %2894, %struct.modeinfo** %213, align 32
  store i32 1, i32* %2485, align 16
  %2895 = load i32, i32* %742, align 16
  %2896 = icmp eq i32 %2895, 0
  %2897 = icmp ne i64 %2541, 0
  br i1 %2896, label %2922, label %2898

2898:                                             ; preds = %2886
  br i1 %2897, label %2899, label %2927

2899:                                             ; preds = %2898
  %2900 = load i32, i32* %699, align 16
  %2901 = icmp eq i32 %2900, 0
  %2902 = add i32 %2562, -1
  br i1 %2901, label %2903, label %2904

2903:                                             ; preds = %2899
  call void @vp8_loop_filter_row_normal(%struct.VP8Common* %7, %struct.modeinfo* %2551, i32 %2902, i32 %2427, i32 %2429, i8* %2547, i8* %2548, i8* %2549) #4
  br label %2905

2904:                                             ; preds = %2899
  call void @vp8_loop_filter_row_simple(%struct.VP8Common* %7, %struct.modeinfo* %2551, i32 %2902, i32 %2427, i8* %2547) #4
  br label %2905

2905:                                             ; preds = %2904, %2903
  %2906 = icmp ugt i64 %2541, 1
  br i1 %2906, label %2907, label %2911

2907:                                             ; preds = %2905
  call fastcc void @yv12_extend_frame_left_right_c(%struct.yv12_buffer_config* %2425, i8* %2544, i8* %2545, i8* %2546) #4
  %2908 = getelementptr inbounds i8, i8* %2544, i64 %2531
  %2909 = getelementptr inbounds i8, i8* %2545, i64 %2532
  %2910 = getelementptr inbounds i8, i8* %2546, i64 %2532
  br label %2911

2911:                                             ; preds = %2907, %2905
  %2912 = phi i8* [ %2910, %2907 ], [ %2546, %2905 ]
  %2913 = phi i8* [ %2909, %2907 ], [ %2545, %2905 ]
  %2914 = phi i8* [ %2908, %2907 ], [ %2544, %2905 ]
  %2915 = getelementptr inbounds i8, i8* %2547, i64 %2531
  %2916 = getelementptr inbounds i8, i8* %2548, i64 %2532
  %2917 = getelementptr inbounds i8, i8* %2549, i64 %2532
  %2918 = load i32, i32* %2371, align 8
  %2919 = sext i32 %2918 to i64
  %2920 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2551, i64 1
  %2921 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2920, i64 %2919
  br label %2927

2922:                                             ; preds = %2886
  br i1 %2897, label %2923, label %2927

2923:                                             ; preds = %2922
  call fastcc void @yv12_extend_frame_left_right_c(%struct.yv12_buffer_config* %2425, i8* %2544, i8* %2545, i8* %2546) #4
  %2924 = getelementptr inbounds i8, i8* %2544, i64 %2531
  %2925 = getelementptr inbounds i8, i8* %2545, i64 %2532
  %2926 = getelementptr inbounds i8, i8* %2546, i64 %2532
  br label %2927

2927:                                             ; preds = %2923, %2922, %2911, %2898
  %2928 = phi %struct.modeinfo* [ %2921, %2911 ], [ %2551, %2898 ], [ %2551, %2923 ], [ %2551, %2922 ]
  %2929 = phi i8* [ %2917, %2911 ], [ %2549, %2898 ], [ %2549, %2923 ], [ %2549, %2922 ]
  %2930 = phi i8* [ %2916, %2911 ], [ %2548, %2898 ], [ %2548, %2923 ], [ %2548, %2922 ]
  %2931 = phi i8* [ %2915, %2911 ], [ %2547, %2898 ], [ %2547, %2923 ], [ %2547, %2922 ]
  %2932 = phi i8* [ %2912, %2911 ], [ %2546, %2898 ], [ %2926, %2923 ], [ %2546, %2922 ]
  %2933 = phi i8* [ %2913, %2911 ], [ %2545, %2898 ], [ %2925, %2923 ], [ %2545, %2922 ]
  %2934 = phi i8* [ %2914, %2911 ], [ %2544, %2898 ], [ %2924, %2923 ], [ %2544, %2922 ]
  %2935 = add nuw nsw i64 %2541, 1
  %2936 = load i32, i32* %1290, align 4
  %2937 = sext i32 %2936 to i64
  %2938 = icmp slt i64 %2935, %2937
  %2939 = add i32 %2543, %2495
  %2940 = add i32 %2542, %2494
  br i1 %2938, label %2540, label %2941

2941:                                             ; preds = %2927
  %2942 = trunc i64 %2935 to i32
  %2943 = add i32 %2942, -1
  br label %2944

2944:                                             ; preds = %2941, %2489
  %2945 = phi %struct.modeinfo* [ %2424, %2489 ], [ %2928, %2941 ]
  %2946 = phi i32 [ -1, %2489 ], [ %2943, %2941 ]
  %2947 = phi i8* [ %2484, %2489 ], [ %2929, %2941 ]
  %2948 = phi i8* [ %2482, %2489 ], [ %2930, %2941 ]
  %2949 = phi i8* [ %2480, %2489 ], [ %2931, %2941 ]
  %2950 = phi i8* [ %2484, %2489 ], [ %2932, %2941 ]
  %2951 = phi i8* [ %2482, %2489 ], [ %2933, %2941 ]
  %2952 = phi i8* [ %2480, %2489 ], [ %2934, %2941 ]
  %2953 = load i32, i32* %742, align 16
  %2954 = icmp eq i32 %2953, 0
  br i1 %2954, label %2968, label %2955

2955:                                             ; preds = %2944
  %2956 = load i32, i32* %699, align 16
  %2957 = icmp eq i32 %2956, 0
  br i1 %2957, label %2958, label %2959

2958:                                             ; preds = %2955
  call void @vp8_loop_filter_row_normal(%struct.VP8Common* %7, %struct.modeinfo* %2945, i32 %2946, i32 %2427, i32 %2429, i8* %2949, i8* %2948, i8* %2947) #4
  br label %2960

2959:                                             ; preds = %2955
  call void @vp8_loop_filter_row_simple(%struct.VP8Common* %7, %struct.modeinfo* %2945, i32 %2946, i32 %2427, i8* %2949) #4
  br label %2960

2960:                                             ; preds = %2959, %2958
  call fastcc void @yv12_extend_frame_left_right_c(%struct.yv12_buffer_config* %2425, i8* %2952, i8* %2951, i8* %2950) #4
  %2961 = shl nsw i32 %2427, 4
  %2962 = sext i32 %2961 to i64
  %2963 = getelementptr inbounds i8, i8* %2952, i64 %2962
  %2964 = shl nsw i32 %2429, 3
  %2965 = sext i32 %2964 to i64
  %2966 = getelementptr inbounds i8, i8* %2951, i64 %2965
  %2967 = getelementptr inbounds i8, i8* %2950, i64 %2965
  br label %2968

2968:                                             ; preds = %2960, %2944
  %2969 = phi i8* [ %2967, %2960 ], [ %2950, %2944 ]
  %2970 = phi i8* [ %2966, %2960 ], [ %2951, %2944 ]
  %2971 = phi i8* [ %2963, %2960 ], [ %2952, %2944 ]
  call fastcc void @yv12_extend_frame_left_right_c(%struct.yv12_buffer_config* %2425, i8* %2971, i8* %2970, i8* %2969) #4
  %2972 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2425, i64 0, i32 19
  %2973 = load i32, i32* %2972, align 8
  %2974 = load i32, i32* %2426, align 8
  %2975 = load i8*, i8** %2479, align 8
  %2976 = zext i32 %2973 to i64
  %2977 = sub nsw i64 0, %2976
  %2978 = getelementptr inbounds i8, i8* %2975, i64 %2977
  %2979 = icmp sgt i32 %2973, 0
  br i1 %2979, label %2980, label %3009

2980:                                             ; preds = %2968
  %2981 = mul i32 %2974, %2973
  %2982 = zext i32 %2981 to i64
  %2983 = sub nsw i64 0, %2982
  %2984 = getelementptr inbounds i8, i8* %2978, i64 %2983
  %2985 = sext i32 %2974 to i64
  %2986 = add i32 %2973, -1
  %2987 = and i32 %2973, 3
  %2988 = icmp ult i32 %2986, 3
  br i1 %2988, label %3000, label %2989

2989:                                             ; preds = %2980
  %2990 = sub i32 %2973, %2987
  br label %2991

2991:                                             ; preds = %2991, %2989
  %2992 = phi i8* [ %2984, %2989 ], [ %2997, %2991 ]
  %2993 = phi i32 [ %2990, %2989 ], [ %2998, %2991 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2992, i8* align 1 %2978, i64 %2985, i1 false) #4
  %2994 = getelementptr inbounds i8, i8* %2992, i64 %2985
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2994, i8* align 1 %2978, i64 %2985, i1 false) #4
  %2995 = getelementptr inbounds i8, i8* %2994, i64 %2985
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2995, i8* align 1 %2978, i64 %2985, i1 false) #4
  %2996 = getelementptr inbounds i8, i8* %2995, i64 %2985
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2996, i8* align 1 %2978, i64 %2985, i1 false) #4
  %2997 = getelementptr inbounds i8, i8* %2996, i64 %2985
  %2998 = add i32 %2993, -4
  %2999 = icmp eq i32 %2998, 0
  br i1 %2999, label %3000, label %2991

3000:                                             ; preds = %2991, %2980
  %3001 = phi i8* [ %2984, %2980 ], [ %2997, %2991 ]
  %3002 = icmp eq i32 %2987, 0
  br i1 %3002, label %3009, label %3003

3003:                                             ; preds = %3000, %3003
  %3004 = phi i8* [ %3006, %3003 ], [ %3001, %3000 ]
  %3005 = phi i32 [ %3007, %3003 ], [ %2987, %3000 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3004, i8* align 1 %2978, i64 %2985, i1 false) #4
  %3006 = getelementptr inbounds i8, i8* %3004, i64 %2985
  %3007 = add i32 %3005, -1
  %3008 = icmp eq i32 %3007, 0
  br i1 %3008, label %3009, label %3003, !llvm.loop !2

3009:                                             ; preds = %3000, %3003, %2968
  %3010 = load i32, i32* %2428, align 4
  %3011 = lshr i32 %2973, 1
  %3012 = load i8*, i8** %2481, align 8
  %3013 = zext i32 %3011 to i64
  %3014 = sub nsw i64 0, %3013
  %3015 = getelementptr inbounds i8, i8* %3012, i64 %3014
  %3016 = mul i32 %3010, %3011
  %3017 = zext i32 %3016 to i64
  %3018 = sub nsw i64 0, %3017
  %3019 = icmp eq i32 %3011, 0
  br i1 %3019, label %3073, label %3020

3020:                                             ; preds = %3009
  %3021 = getelementptr inbounds i8, i8* %3015, i64 %3018
  %3022 = sext i32 %3010 to i64
  %3023 = add nsw i32 %3011, -1
  %3024 = and i32 %3011, 3
  %3025 = icmp ult i32 %3023, 3
  br i1 %3025, label %3037, label %3026

3026:                                             ; preds = %3020
  %3027 = sub nsw i32 %3011, %3024
  br label %3028

3028:                                             ; preds = %3028, %3026
  %3029 = phi i8* [ %3021, %3026 ], [ %3034, %3028 ]
  %3030 = phi i32 [ %3027, %3026 ], [ %3035, %3028 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3029, i8* align 1 %3015, i64 %3022, i1 false) #4
  %3031 = getelementptr inbounds i8, i8* %3029, i64 %3022
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3031, i8* align 1 %3015, i64 %3022, i1 false) #4
  %3032 = getelementptr inbounds i8, i8* %3031, i64 %3022
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3032, i8* align 1 %3015, i64 %3022, i1 false) #4
  %3033 = getelementptr inbounds i8, i8* %3032, i64 %3022
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3033, i8* align 1 %3015, i64 %3022, i1 false) #4
  %3034 = getelementptr inbounds i8, i8* %3033, i64 %3022
  %3035 = add i32 %3030, -4
  %3036 = icmp eq i32 %3035, 0
  br i1 %3036, label %3037, label %3028

3037:                                             ; preds = %3028, %3020
  %3038 = phi i8* [ %3021, %3020 ], [ %3034, %3028 ]
  %3039 = icmp eq i32 %3024, 0
  br i1 %3039, label %3046, label %3040

3040:                                             ; preds = %3037, %3040
  %3041 = phi i8* [ %3043, %3040 ], [ %3038, %3037 ]
  %3042 = phi i32 [ %3044, %3040 ], [ %3024, %3037 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3041, i8* align 1 %3015, i64 %3022, i1 false) #4
  %3043 = getelementptr inbounds i8, i8* %3041, i64 %3022
  %3044 = add i32 %3042, -1
  %3045 = icmp eq i32 %3044, 0
  br i1 %3045, label %3046, label %3040, !llvm.loop !4

3046:                                             ; preds = %3040, %3037
  %3047 = load i8*, i8** %2483, align 8
  %3048 = getelementptr inbounds i8, i8* %3047, i64 %3014
  %3049 = getelementptr inbounds i8, i8* %3048, i64 %3018
  %3050 = add nsw i32 %3011, -1
  %3051 = and i32 %3011, 3
  %3052 = icmp ult i32 %3050, 3
  br i1 %3052, label %3064, label %3053

3053:                                             ; preds = %3046
  %3054 = sub nsw i32 %3011, %3051
  br label %3055

3055:                                             ; preds = %3055, %3053
  %3056 = phi i8* [ %3049, %3053 ], [ %3061, %3055 ]
  %3057 = phi i32 [ %3054, %3053 ], [ %3062, %3055 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3056, i8* align 1 %3048, i64 %3022, i1 false) #4
  %3058 = getelementptr inbounds i8, i8* %3056, i64 %3022
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3058, i8* align 1 %3048, i64 %3022, i1 false) #4
  %3059 = getelementptr inbounds i8, i8* %3058, i64 %3022
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3059, i8* align 1 %3048, i64 %3022, i1 false) #4
  %3060 = getelementptr inbounds i8, i8* %3059, i64 %3022
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3060, i8* align 1 %3048, i64 %3022, i1 false) #4
  %3061 = getelementptr inbounds i8, i8* %3060, i64 %3022
  %3062 = add i32 %3057, -4
  %3063 = icmp eq i32 %3062, 0
  br i1 %3063, label %3064, label %3055

3064:                                             ; preds = %3055, %3046
  %3065 = phi i8* [ %3049, %3046 ], [ %3061, %3055 ]
  %3066 = icmp eq i32 %3051, 0
  br i1 %3066, label %3073, label %3067

3067:                                             ; preds = %3064, %3067
  %3068 = phi i8* [ %3070, %3067 ], [ %3065, %3064 ]
  %3069 = phi i32 [ %3071, %3067 ], [ %3051, %3064 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3068, i8* align 1 %3048, i64 %3022, i1 false) #4
  %3070 = getelementptr inbounds i8, i8* %3068, i64 %3022
  %3071 = add i32 %3069, -1
  %3072 = icmp eq i32 %3071, 0
  br i1 %3072, label %3073, label %3067, !llvm.loop !5

3073:                                             ; preds = %3064, %3067, %3009
  %3074 = load i32, i32* %2972, align 8
  %3075 = load i32, i32* %2426, align 8
  %3076 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2425, i64 0, i32 1
  %3077 = load i32, i32* %3076, align 4
  %3078 = load i8*, i8** %2479, align 8
  %3079 = zext i32 %3074 to i64
  %3080 = sub nsw i64 0, %3079
  %3081 = getelementptr inbounds i8, i8* %3078, i64 %3080
  %3082 = mul nsw i32 %3077, %3075
  %3083 = sext i32 %3082 to i64
  %3084 = getelementptr inbounds i8, i8* %3081, i64 %3083
  %3085 = sext i32 %3075 to i64
  %3086 = sub nsw i64 0, %3085
  %3087 = getelementptr inbounds i8, i8* %3084, i64 %3086
  %3088 = icmp sgt i32 %3074, 0
  br i1 %3088, label %3089, label %3113

3089:                                             ; preds = %3073
  %3090 = add i32 %3074, -1
  %3091 = and i32 %3074, 3
  %3092 = icmp ult i32 %3090, 3
  br i1 %3092, label %3104, label %3093

3093:                                             ; preds = %3089
  %3094 = sub i32 %3074, %3091
  br label %3095

3095:                                             ; preds = %3095, %3093
  %3096 = phi i8* [ %3087, %3093 ], [ %3101, %3095 ]
  %3097 = phi i32 [ %3094, %3093 ], [ %3102, %3095 ]
  %3098 = getelementptr inbounds i8, i8* %3096, i64 %3085
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3098, i8* align 1 %3087, i64 %3085, i1 false) #4
  %3099 = getelementptr inbounds i8, i8* %3098, i64 %3085
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3099, i8* align 1 %3087, i64 %3085, i1 false) #4
  %3100 = getelementptr inbounds i8, i8* %3099, i64 %3085
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3100, i8* align 1 %3087, i64 %3085, i1 false) #4
  %3101 = getelementptr inbounds i8, i8* %3100, i64 %3085
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3101, i8* align 1 %3087, i64 %3085, i1 false) #4
  %3102 = add i32 %3097, -4
  %3103 = icmp eq i32 %3102, 0
  br i1 %3103, label %3104, label %3095

3104:                                             ; preds = %3095, %3089
  %3105 = phi i8* [ %3087, %3089 ], [ %3101, %3095 ]
  %3106 = icmp eq i32 %3091, 0
  br i1 %3106, label %3113, label %3107

3107:                                             ; preds = %3104, %3107
  %3108 = phi i8* [ %3110, %3107 ], [ %3105, %3104 ]
  %3109 = phi i32 [ %3111, %3107 ], [ %3091, %3104 ]
  %3110 = getelementptr inbounds i8, i8* %3108, i64 %3085
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3110, i8* align 1 %3087, i64 %3085, i1 false) #4
  %3111 = add i32 %3109, -1
  %3112 = icmp eq i32 %3111, 0
  br i1 %3112, label %3113, label %3107, !llvm.loop !6

3113:                                             ; preds = %3104, %3107, %3073
  %3114 = load i32, i32* %2428, align 4
  %3115 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2425, i64 0, i32 6
  %3116 = load i32, i32* %3115, align 8
  %3117 = lshr i32 %3074, 1
  %3118 = load i8*, i8** %2481, align 8
  %3119 = zext i32 %3117 to i64
  %3120 = sub nsw i64 0, %3119
  %3121 = getelementptr inbounds i8, i8* %3118, i64 %3120
  %3122 = mul nsw i32 %3116, %3114
  %3123 = sext i32 %3122 to i64
  %3124 = getelementptr inbounds i8, i8* %3121, i64 %3123
  %3125 = sext i32 %3114 to i64
  %3126 = sub nsw i64 0, %3125
  %3127 = getelementptr inbounds i8, i8* %3124, i64 %3126
  %3128 = icmp eq i32 %3117, 0
  br i1 %3128, label %3181, label %3129

3129:                                             ; preds = %3113
  %3130 = add nsw i32 %3117, -1
  %3131 = and i32 %3117, 3
  %3132 = icmp ult i32 %3130, 3
  br i1 %3132, label %3144, label %3133

3133:                                             ; preds = %3129
  %3134 = sub nsw i32 %3117, %3131
  br label %3135

3135:                                             ; preds = %3135, %3133
  %3136 = phi i8* [ %3127, %3133 ], [ %3141, %3135 ]
  %3137 = phi i32 [ %3134, %3133 ], [ %3142, %3135 ]
  %3138 = getelementptr inbounds i8, i8* %3136, i64 %3125
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3138, i8* align 1 %3127, i64 %3125, i1 false) #4
  %3139 = getelementptr inbounds i8, i8* %3138, i64 %3125
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3139, i8* align 1 %3127, i64 %3125, i1 false) #4
  %3140 = getelementptr inbounds i8, i8* %3139, i64 %3125
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3140, i8* align 1 %3127, i64 %3125, i1 false) #4
  %3141 = getelementptr inbounds i8, i8* %3140, i64 %3125
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3141, i8* align 1 %3127, i64 %3125, i1 false) #4
  %3142 = add i32 %3137, -4
  %3143 = icmp eq i32 %3142, 0
  br i1 %3143, label %3144, label %3135

3144:                                             ; preds = %3135, %3129
  %3145 = phi i8* [ %3127, %3129 ], [ %3141, %3135 ]
  %3146 = icmp eq i32 %3131, 0
  br i1 %3146, label %3153, label %3147

3147:                                             ; preds = %3144, %3147
  %3148 = phi i8* [ %3150, %3147 ], [ %3145, %3144 ]
  %3149 = phi i32 [ %3151, %3147 ], [ %3131, %3144 ]
  %3150 = getelementptr inbounds i8, i8* %3148, i64 %3125
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3150, i8* align 1 %3127, i64 %3125, i1 false) #4
  %3151 = add i32 %3149, -1
  %3152 = icmp eq i32 %3151, 0
  br i1 %3152, label %3153, label %3147, !llvm.loop !7

3153:                                             ; preds = %3147, %3144
  %3154 = load i8*, i8** %2483, align 8
  %3155 = getelementptr inbounds i8, i8* %3154, i64 %3120
  %3156 = getelementptr inbounds i8, i8* %3155, i64 %3123
  %3157 = getelementptr inbounds i8, i8* %3156, i64 %3126
  %3158 = add nsw i32 %3117, -1
  %3159 = and i32 %3117, 3
  %3160 = icmp ult i32 %3158, 3
  br i1 %3160, label %3172, label %3161

3161:                                             ; preds = %3153
  %3162 = sub nsw i32 %3117, %3159
  br label %3163

3163:                                             ; preds = %3163, %3161
  %3164 = phi i8* [ %3157, %3161 ], [ %3169, %3163 ]
  %3165 = phi i32 [ %3162, %3161 ], [ %3170, %3163 ]
  %3166 = getelementptr inbounds i8, i8* %3164, i64 %3125
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3166, i8* align 1 %3157, i64 %3125, i1 false) #4
  %3167 = getelementptr inbounds i8, i8* %3166, i64 %3125
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3167, i8* align 1 %3157, i64 %3125, i1 false) #4
  %3168 = getelementptr inbounds i8, i8* %3167, i64 %3125
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3168, i8* align 1 %3157, i64 %3125, i1 false) #4
  %3169 = getelementptr inbounds i8, i8* %3168, i64 %3125
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3169, i8* align 1 %3157, i64 %3125, i1 false) #4
  %3170 = add i32 %3165, -4
  %3171 = icmp eq i32 %3170, 0
  br i1 %3171, label %3172, label %3163

3172:                                             ; preds = %3163, %3153
  %3173 = phi i8* [ %3157, %3153 ], [ %3169, %3163 ]
  %3174 = icmp eq i32 %3159, 0
  br i1 %3174, label %3181, label %3175

3175:                                             ; preds = %3172, %3175
  %3176 = phi i8* [ %3178, %3175 ], [ %3173, %3172 ]
  %3177 = phi i32 [ %3179, %3175 ], [ %3159, %3172 ]
  %3178 = getelementptr inbounds i8, i8* %3176, i64 %3125
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3178, i8* align 1 %3157, i64 %3125, i1 false) #4
  %3179 = add i32 %3177, -1
  %3180 = icmp eq i32 %3179, 0
  br i1 %3180, label %3181, label %3175, !llvm.loop !8

3181:                                             ; preds = %3172, %3175, %3113
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2431) #4
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %2430) #4
  %3182 = load i32, i32* %19, align 32
  br label %3198

3183:                                             ; preds = %2400, %2391
  %3184 = phi i32 [ undef, %2391 ], [ %2418, %2400 ]
  %3185 = phi i64 [ 0, %2391 ], [ %2419, %2400 ]
  %3186 = phi i32 [ 0, %2391 ], [ %2418, %2400 ]
  %3187 = icmp eq i64 %2396, 0
  br i1 %3187, label %3198, label %3188

3188:                                             ; preds = %3183, %3188
  %3189 = phi i64 [ %3195, %3188 ], [ %3185, %3183 ]
  %3190 = phi i32 [ %3194, %3188 ], [ %3186, %3183 ]
  %3191 = phi i64 [ %3196, %3188 ], [ %2396, %3183 ]
  %3192 = getelementptr inbounds %struct.MB_ROW_DEC, %struct.MB_ROW_DEC* %2393, i64 %3189, i32 0, i32 44
  %3193 = load i32, i32* %3192, align 32
  %3194 = or i32 %3193, %3190
  %3195 = add nuw nsw i64 %3189, 1
  %3196 = add i64 %3191, -1
  %3197 = icmp eq i64 %3196, 0
  br i1 %3197, label %3198, label %3188, !llvm.loop !9

3198:                                             ; preds = %3183, %3188, %2388, %3181
  %3199 = phi i32 [ %3182, %3181 ], [ 0, %2388 ], [ %3184, %3183 ], [ %3194, %3188 ]
  %3200 = load i32, i32* %318, align 8
  %3201 = add i32 %3200, -65
  %3202 = icmp ult i32 %3201, 1073741759
  %3203 = zext i1 %3202 to i32
  %3204 = or i32 %3199, %3203
  store i32 %3204, i32* %20, align 4
  %3205 = load i32, i32* %147, align 8
  %3206 = icmp eq i32 %3205, 0
  br i1 %3206, label %3207, label %3214

3207:                                             ; preds = %3198
  %3208 = load i32, i32* %206, align 4
  %3209 = or i32 %3208, %3204
  %3210 = icmp eq i32 %3209, 0
  br i1 %3210, label %3211, label %3212

3211:                                             ; preds = %3207
  store i32 1, i32* %147, align 8
  br label %3214

3212:                                             ; preds = %3207
  %3213 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %7, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %3213, i32 7, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i64 0, i64 0)) #4
  br label %3214

3214:                                             ; preds = %3198, %3211, %3212
  %3215 = load i32, i32* %2214, align 16
  %3216 = icmp eq i32 %3215, 0
  br i1 %3216, label %3217, label %3220

3217:                                             ; preds = %3214
  %3218 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 0, i64 0
  %3219 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 58, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %3218, i8* align 1 %3219, i64 1113, i1 false)
  store i32 %16, i32* %15, align 4
  br label %3220

3220:                                             ; preds = %3214, %3217, %152
  %3221 = phi i32 [ -1, %152 ], [ 0, %3217 ], [ 0, %3214 ]
  ret i32 %3221

3222:                                             ; preds = %2092
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3223 = load i32, i32* %318, align 8
  %3224 = load i64, i64* %324, align 8
  br label %3225

3225:                                             ; preds = %3222, %2092
  %3226 = phi i64 [ %3224, %3222 ], [ %2103, %2092 ]
  %3227 = phi i32 [ %3223, %3222 ], [ %2104, %2092 ]
  %3228 = zext i32 %2108 to i64
  %3229 = shl i64 %3228, 56
  %3230 = icmp ult i64 %3226, %3229
  br i1 %3230, label %3235, label %3231

3231:                                             ; preds = %3225
  %3232 = load i32, i32* %313, align 4
  %3233 = sub i32 %3232, %2108
  %3234 = sub i64 %3226, %3229
  br label %3235

3235:                                             ; preds = %3231, %3225
  %3236 = phi i64 [ %3234, %3231 ], [ %3226, %3225 ]
  %3237 = phi i32 [ %3233, %3231 ], [ %2108, %3225 ]
  %3238 = phi i32 [ 1, %3231 ], [ 0, %3225 ]
  %3239 = and i32 %3237, 255
  %3240 = zext i32 %3239 to i64
  %3241 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3240
  %3242 = load i8, i8* %3241, align 1
  %3243 = zext i8 %3242 to i32
  %3244 = shl i32 %3237, %3243
  %3245 = zext i8 %3242 to i64
  %3246 = shl i64 %3236, %3245
  %3247 = sub nsw i32 %3227, %3243
  store i64 %3246, i64* %324, align 8
  store i32 %3247, i32* %318, align 8
  store i32 %3244, i32* %313, align 4
  %3248 = or i32 %3238, %2095
  store i32 %3248, i32* %2071, align 4
  br label %2110

3249:                                             ; preds = %2048
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3250 = load i32, i32* %318, align 8
  %3251 = load i64, i64* %324, align 8
  br label %3252

3252:                                             ; preds = %3249, %2048
  %3253 = phi i64 [ %3251, %3249 ], [ %2059, %2048 ]
  %3254 = phi i32 [ %3250, %3249 ], [ %2060, %2048 ]
  %3255 = zext i32 %2064 to i64
  %3256 = shl i64 %3255, 56
  %3257 = icmp ult i64 %3253, %3256
  br i1 %3257, label %3262, label %3258

3258:                                             ; preds = %3252
  %3259 = load i32, i32* %313, align 4
  %3260 = sub i32 %3259, %2064
  %3261 = sub i64 %3253, %3256
  br label %3262

3262:                                             ; preds = %3258, %3252
  %3263 = phi i64 [ %3261, %3258 ], [ %3253, %3252 ]
  %3264 = phi i32 [ %3260, %3258 ], [ %2064, %3252 ]
  %3265 = phi i32 [ 1, %3258 ], [ 0, %3252 ]
  %3266 = and i32 %3264, 255
  %3267 = zext i32 %3266 to i64
  %3268 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3267
  %3269 = load i8, i8* %3268, align 1
  %3270 = zext i8 %3269 to i32
  %3271 = shl i32 %3264, %3270
  %3272 = zext i8 %3269 to i64
  %3273 = shl i64 %3263, %3272
  %3274 = sub nsw i32 %3254, %3270
  store i64 %3273, i64* %324, align 8
  store i32 %3274, i32* %318, align 8
  store i32 %3271, i32* %313, align 4
  %3275 = or i32 %3265, %2051
  store i32 %3275, i32* %2026, align 8
  %3276 = load i32, i32* %2025, align 4
  br label %2066

3277:                                             ; preds = %1846
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3278 = load i32, i32* %318, align 8
  %3279 = load i64, i64* %324, align 8
  br label %3280

3280:                                             ; preds = %3277, %1846
  %3281 = phi i64 [ %3279, %3277 ], [ %1857, %1846 ]
  %3282 = phi i32 [ %3278, %3277 ], [ %1858, %1846 ]
  %3283 = zext i32 %1862 to i64
  %3284 = shl i64 %3283, 56
  %3285 = icmp ult i64 %3281, %3284
  br i1 %3285, label %3290, label %3286

3286:                                             ; preds = %3280
  %3287 = load i32, i32* %313, align 4
  %3288 = sub i32 %3287, %1862
  %3289 = sub i64 %3281, %3284
  br label %3290

3290:                                             ; preds = %3286, %3280
  %3291 = phi i64 [ %3289, %3286 ], [ %3281, %3280 ]
  %3292 = phi i32 [ %3288, %3286 ], [ %1862, %3280 ]
  %3293 = phi i32 [ 4, %3286 ], [ 0, %3280 ]
  %3294 = and i32 %3292, 255
  %3295 = zext i32 %3294 to i64
  %3296 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3295
  %3297 = load i8, i8* %3296, align 1
  %3298 = zext i8 %3297 to i32
  %3299 = shl i32 %3292, %3298
  %3300 = zext i8 %3297 to i64
  %3301 = shl i64 %3291, %3300
  %3302 = sub nsw i32 %3282, %3298
  store i64 %3301, i64* %324, align 8
  store i32 %3302, i32* %318, align 8
  store i32 %3299, i32* %313, align 4
  %3303 = or i32 %3293, %1849
  %3304 = shl i32 %3299, 7
  %3305 = add i32 %3304, -128
  %3306 = lshr i32 %3305, 8
  %3307 = add nuw nsw i32 %3306, 1
  %3308 = icmp slt i32 %3302, 0
  br i1 %3308, label %3309, label %3312

3309:                                             ; preds = %3290
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3310 = load i32, i32* %318, align 8
  %3311 = load i64, i64* %324, align 8
  br label %3312

3312:                                             ; preds = %3309, %3290
  %3313 = phi i64 [ %3311, %3309 ], [ %3301, %3290 ]
  %3314 = phi i32 [ %3310, %3309 ], [ %3302, %3290 ]
  %3315 = zext i32 %3307 to i64
  %3316 = shl i64 %3315, 56
  %3317 = icmp ult i64 %3313, %3316
  br i1 %3317, label %3322, label %3318

3318:                                             ; preds = %3312
  %3319 = load i32, i32* %313, align 4
  %3320 = sub i32 %3319, %3307
  %3321 = sub i64 %3313, %3316
  br label %3322

3322:                                             ; preds = %3318, %3312
  %3323 = phi i64 [ %3321, %3318 ], [ %3313, %3312 ]
  %3324 = phi i32 [ %3320, %3318 ], [ %3307, %3312 ]
  %3325 = phi i32 [ 2, %3318 ], [ 0, %3312 ]
  %3326 = and i32 %3324, 255
  %3327 = zext i32 %3326 to i64
  %3328 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3327
  %3329 = load i8, i8* %3328, align 1
  %3330 = zext i8 %3329 to i32
  %3331 = shl i32 %3324, %3330
  %3332 = zext i8 %3329 to i64
  %3333 = shl i64 %3323, %3332
  %3334 = sub nsw i32 %3314, %3330
  store i64 %3333, i64* %324, align 8
  store i32 %3334, i32* %318, align 8
  store i32 %3331, i32* %313, align 4
  %3335 = or i32 %3325, %3303
  %3336 = shl i32 %3331, 7
  %3337 = add i32 %3336, -128
  %3338 = lshr i32 %3337, 8
  %3339 = add nuw nsw i32 %3338, 1
  %3340 = icmp slt i32 %3334, 0
  br i1 %3340, label %3341, label %3344

3341:                                             ; preds = %3322
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3342 = load i32, i32* %318, align 8
  %3343 = load i64, i64* %324, align 8
  br label %3344

3344:                                             ; preds = %3341, %3322
  %3345 = phi i64 [ %3343, %3341 ], [ %3333, %3322 ]
  %3346 = phi i32 [ %3342, %3341 ], [ %3334, %3322 ]
  %3347 = zext i32 %3339 to i64
  %3348 = shl i64 %3347, 56
  %3349 = icmp ult i64 %3345, %3348
  br i1 %3349, label %3354, label %3350

3350:                                             ; preds = %3344
  %3351 = load i32, i32* %313, align 4
  %3352 = sub i32 %3351, %3339
  %3353 = sub i64 %3345, %3348
  br label %3354

3354:                                             ; preds = %3350, %3344
  %3355 = phi i64 [ %3353, %3350 ], [ %3345, %3344 ]
  %3356 = phi i32 [ %3352, %3350 ], [ %3339, %3344 ]
  %3357 = phi i32 [ 1, %3350 ], [ 0, %3344 ]
  %3358 = and i32 %3356, 255
  %3359 = zext i32 %3358 to i64
  %3360 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3359
  %3361 = load i8, i8* %3360, align 1
  %3362 = zext i8 %3361 to i32
  %3363 = shl i32 %3356, %3362
  %3364 = zext i8 %3361 to i64
  %3365 = shl i64 %3355, %3364
  %3366 = sub nsw i32 %3346, %3362
  store i64 %3365, i64* %324, align 8
  store i32 %3366, i32* %318, align 8
  store i32 %3363, i32* %313, align 4
  %3367 = or i32 %3357, %3335
  %3368 = shl i32 %3363, 7
  %3369 = add i32 %3368, -128
  %3370 = lshr i32 %3369, 8
  %3371 = add nuw nsw i32 %3370, 1
  %3372 = icmp slt i32 %3366, 0
  br i1 %3372, label %1864, label %1867

3373:                                             ; preds = %1741
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3374 = load i32, i32* %318, align 8
  %3375 = load i64, i64* %324, align 8
  br label %3376

3376:                                             ; preds = %3373, %1741
  %3377 = phi i64 [ %3375, %3373 ], [ %1752, %1741 ]
  %3378 = phi i32 [ %3374, %3373 ], [ %1753, %1741 ]
  %3379 = zext i32 %1757 to i64
  %3380 = shl i64 %3379, 56
  %3381 = icmp ult i64 %3377, %3380
  br i1 %3381, label %3386, label %3382

3382:                                             ; preds = %3376
  %3383 = load i32, i32* %313, align 4
  %3384 = sub i32 %3383, %1757
  %3385 = sub i64 %3377, %3380
  br label %3386

3386:                                             ; preds = %3382, %3376
  %3387 = phi i64 [ %3385, %3382 ], [ %3377, %3376 ]
  %3388 = phi i32 [ %3384, %3382 ], [ %1757, %3376 ]
  %3389 = phi i32 [ 4, %3382 ], [ 0, %3376 ]
  %3390 = and i32 %3388, 255
  %3391 = zext i32 %3390 to i64
  %3392 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3391
  %3393 = load i8, i8* %3392, align 1
  %3394 = zext i8 %3393 to i32
  %3395 = shl i32 %3388, %3394
  %3396 = zext i8 %3393 to i64
  %3397 = shl i64 %3387, %3396
  %3398 = sub nsw i32 %3378, %3394
  store i64 %3397, i64* %324, align 8
  store i32 %3398, i32* %318, align 8
  store i32 %3395, i32* %313, align 4
  %3399 = or i32 %3389, %1744
  %3400 = shl i32 %3395, 7
  %3401 = add i32 %3400, -128
  %3402 = lshr i32 %3401, 8
  %3403 = add nuw nsw i32 %3402, 1
  %3404 = icmp slt i32 %3398, 0
  br i1 %3404, label %3405, label %3408

3405:                                             ; preds = %3386
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3406 = load i32, i32* %318, align 8
  %3407 = load i64, i64* %324, align 8
  br label %3408

3408:                                             ; preds = %3405, %3386
  %3409 = phi i64 [ %3407, %3405 ], [ %3397, %3386 ]
  %3410 = phi i32 [ %3406, %3405 ], [ %3398, %3386 ]
  %3411 = zext i32 %3403 to i64
  %3412 = shl i64 %3411, 56
  %3413 = icmp ult i64 %3409, %3412
  br i1 %3413, label %3418, label %3414

3414:                                             ; preds = %3408
  %3415 = load i32, i32* %313, align 4
  %3416 = sub i32 %3415, %3403
  %3417 = sub i64 %3409, %3412
  br label %3418

3418:                                             ; preds = %3414, %3408
  %3419 = phi i64 [ %3417, %3414 ], [ %3409, %3408 ]
  %3420 = phi i32 [ %3416, %3414 ], [ %3403, %3408 ]
  %3421 = phi i32 [ 2, %3414 ], [ 0, %3408 ]
  %3422 = and i32 %3420, 255
  %3423 = zext i32 %3422 to i64
  %3424 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3423
  %3425 = load i8, i8* %3424, align 1
  %3426 = zext i8 %3425 to i32
  %3427 = shl i32 %3420, %3426
  %3428 = zext i8 %3425 to i64
  %3429 = shl i64 %3419, %3428
  %3430 = sub nsw i32 %3410, %3426
  store i64 %3429, i64* %324, align 8
  store i32 %3430, i32* %318, align 8
  store i32 %3427, i32* %313, align 4
  %3431 = or i32 %3421, %3399
  %3432 = shl i32 %3427, 7
  %3433 = add i32 %3432, -128
  %3434 = lshr i32 %3433, 8
  %3435 = add nuw nsw i32 %3434, 1
  %3436 = icmp slt i32 %3430, 0
  br i1 %3436, label %3437, label %3440

3437:                                             ; preds = %3418
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3438 = load i32, i32* %318, align 8
  %3439 = load i64, i64* %324, align 8
  br label %3440

3440:                                             ; preds = %3437, %3418
  %3441 = phi i64 [ %3439, %3437 ], [ %3429, %3418 ]
  %3442 = phi i32 [ %3438, %3437 ], [ %3430, %3418 ]
  %3443 = zext i32 %3435 to i64
  %3444 = shl i64 %3443, 56
  %3445 = icmp ult i64 %3441, %3444
  br i1 %3445, label %3450, label %3446

3446:                                             ; preds = %3440
  %3447 = load i32, i32* %313, align 4
  %3448 = sub i32 %3447, %3435
  %3449 = sub i64 %3441, %3444
  br label %3450

3450:                                             ; preds = %3446, %3440
  %3451 = phi i64 [ %3449, %3446 ], [ %3441, %3440 ]
  %3452 = phi i32 [ %3448, %3446 ], [ %3435, %3440 ]
  %3453 = phi i32 [ 1, %3446 ], [ 0, %3440 ]
  %3454 = and i32 %3452, 255
  %3455 = zext i32 %3454 to i64
  %3456 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3455
  %3457 = load i8, i8* %3456, align 1
  %3458 = zext i8 %3457 to i32
  %3459 = shl i32 %3452, %3458
  %3460 = zext i8 %3457 to i64
  %3461 = shl i64 %3451, %3460
  %3462 = sub nsw i32 %3442, %3458
  store i64 %3461, i64* %324, align 8
  store i32 %3462, i32* %318, align 8
  store i32 %3459, i32* %313, align 4
  %3463 = or i32 %3453, %3431
  %3464 = shl i32 %3459, 7
  %3465 = add i32 %3464, -128
  %3466 = lshr i32 %3465, 8
  %3467 = add nuw nsw i32 %3466, 1
  %3468 = icmp slt i32 %3462, 0
  br i1 %3468, label %1759, label %1762

3469:                                             ; preds = %1636
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3470 = load i32, i32* %318, align 8
  %3471 = load i64, i64* %324, align 8
  br label %3472

3472:                                             ; preds = %3469, %1636
  %3473 = phi i64 [ %3471, %3469 ], [ %1647, %1636 ]
  %3474 = phi i32 [ %3470, %3469 ], [ %1648, %1636 ]
  %3475 = zext i32 %1652 to i64
  %3476 = shl i64 %3475, 56
  %3477 = icmp ult i64 %3473, %3476
  br i1 %3477, label %3482, label %3478

3478:                                             ; preds = %3472
  %3479 = load i32, i32* %313, align 4
  %3480 = sub i32 %3479, %1652
  %3481 = sub i64 %3473, %3476
  br label %3482

3482:                                             ; preds = %3478, %3472
  %3483 = phi i64 [ %3481, %3478 ], [ %3473, %3472 ]
  %3484 = phi i32 [ %3480, %3478 ], [ %1652, %3472 ]
  %3485 = phi i32 [ 4, %3478 ], [ 0, %3472 ]
  %3486 = and i32 %3484, 255
  %3487 = zext i32 %3486 to i64
  %3488 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3487
  %3489 = load i8, i8* %3488, align 1
  %3490 = zext i8 %3489 to i32
  %3491 = shl i32 %3484, %3490
  %3492 = zext i8 %3489 to i64
  %3493 = shl i64 %3483, %3492
  %3494 = sub nsw i32 %3474, %3490
  store i64 %3493, i64* %324, align 8
  store i32 %3494, i32* %318, align 8
  store i32 %3491, i32* %313, align 4
  %3495 = or i32 %3485, %1639
  %3496 = shl i32 %3491, 7
  %3497 = add i32 %3496, -128
  %3498 = lshr i32 %3497, 8
  %3499 = add nuw nsw i32 %3498, 1
  %3500 = icmp slt i32 %3494, 0
  br i1 %3500, label %3501, label %3504

3501:                                             ; preds = %3482
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3502 = load i32, i32* %318, align 8
  %3503 = load i64, i64* %324, align 8
  br label %3504

3504:                                             ; preds = %3501, %3482
  %3505 = phi i64 [ %3503, %3501 ], [ %3493, %3482 ]
  %3506 = phi i32 [ %3502, %3501 ], [ %3494, %3482 ]
  %3507 = zext i32 %3499 to i64
  %3508 = shl i64 %3507, 56
  %3509 = icmp ult i64 %3505, %3508
  br i1 %3509, label %3514, label %3510

3510:                                             ; preds = %3504
  %3511 = load i32, i32* %313, align 4
  %3512 = sub i32 %3511, %3499
  %3513 = sub i64 %3505, %3508
  br label %3514

3514:                                             ; preds = %3510, %3504
  %3515 = phi i64 [ %3513, %3510 ], [ %3505, %3504 ]
  %3516 = phi i32 [ %3512, %3510 ], [ %3499, %3504 ]
  %3517 = phi i32 [ 2, %3510 ], [ 0, %3504 ]
  %3518 = and i32 %3516, 255
  %3519 = zext i32 %3518 to i64
  %3520 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3519
  %3521 = load i8, i8* %3520, align 1
  %3522 = zext i8 %3521 to i32
  %3523 = shl i32 %3516, %3522
  %3524 = zext i8 %3521 to i64
  %3525 = shl i64 %3515, %3524
  %3526 = sub nsw i32 %3506, %3522
  store i64 %3525, i64* %324, align 8
  store i32 %3526, i32* %318, align 8
  store i32 %3523, i32* %313, align 4
  %3527 = or i32 %3517, %3495
  %3528 = shl i32 %3523, 7
  %3529 = add i32 %3528, -128
  %3530 = lshr i32 %3529, 8
  %3531 = add nuw nsw i32 %3530, 1
  %3532 = icmp slt i32 %3526, 0
  br i1 %3532, label %3533, label %3536

3533:                                             ; preds = %3514
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3534 = load i32, i32* %318, align 8
  %3535 = load i64, i64* %324, align 8
  br label %3536

3536:                                             ; preds = %3533, %3514
  %3537 = phi i64 [ %3535, %3533 ], [ %3525, %3514 ]
  %3538 = phi i32 [ %3534, %3533 ], [ %3526, %3514 ]
  %3539 = zext i32 %3531 to i64
  %3540 = shl i64 %3539, 56
  %3541 = icmp ult i64 %3537, %3540
  br i1 %3541, label %3546, label %3542

3542:                                             ; preds = %3536
  %3543 = load i32, i32* %313, align 4
  %3544 = sub i32 %3543, %3531
  %3545 = sub i64 %3537, %3540
  br label %3546

3546:                                             ; preds = %3542, %3536
  %3547 = phi i64 [ %3545, %3542 ], [ %3537, %3536 ]
  %3548 = phi i32 [ %3544, %3542 ], [ %3531, %3536 ]
  %3549 = phi i32 [ 1, %3542 ], [ 0, %3536 ]
  %3550 = and i32 %3548, 255
  %3551 = zext i32 %3550 to i64
  %3552 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3551
  %3553 = load i8, i8* %3552, align 1
  %3554 = zext i8 %3553 to i32
  %3555 = shl i32 %3548, %3554
  %3556 = zext i8 %3553 to i64
  %3557 = shl i64 %3547, %3556
  %3558 = sub nsw i32 %3538, %3554
  store i64 %3557, i64* %324, align 8
  store i32 %3558, i32* %318, align 8
  store i32 %3555, i32* %313, align 4
  %3559 = or i32 %3549, %3527
  %3560 = shl i32 %3555, 7
  %3561 = add i32 %3560, -128
  %3562 = lshr i32 %3561, 8
  %3563 = add nuw nsw i32 %3562, 1
  %3564 = icmp slt i32 %3558, 0
  br i1 %3564, label %1654, label %1657

3565:                                             ; preds = %1531
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3566 = load i32, i32* %318, align 8
  %3567 = load i64, i64* %324, align 8
  br label %3568

3568:                                             ; preds = %3565, %1531
  %3569 = phi i64 [ %3567, %3565 ], [ %1542, %1531 ]
  %3570 = phi i32 [ %3566, %3565 ], [ %1543, %1531 ]
  %3571 = zext i32 %1547 to i64
  %3572 = shl i64 %3571, 56
  %3573 = icmp ult i64 %3569, %3572
  br i1 %3573, label %3578, label %3574

3574:                                             ; preds = %3568
  %3575 = load i32, i32* %313, align 4
  %3576 = sub i32 %3575, %1547
  %3577 = sub i64 %3569, %3572
  br label %3578

3578:                                             ; preds = %3574, %3568
  %3579 = phi i64 [ %3577, %3574 ], [ %3569, %3568 ]
  %3580 = phi i32 [ %3576, %3574 ], [ %1547, %3568 ]
  %3581 = phi i32 [ 4, %3574 ], [ 0, %3568 ]
  %3582 = and i32 %3580, 255
  %3583 = zext i32 %3582 to i64
  %3584 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3583
  %3585 = load i8, i8* %3584, align 1
  %3586 = zext i8 %3585 to i32
  %3587 = shl i32 %3580, %3586
  %3588 = zext i8 %3585 to i64
  %3589 = shl i64 %3579, %3588
  %3590 = sub nsw i32 %3570, %3586
  store i64 %3589, i64* %324, align 8
  store i32 %3590, i32* %318, align 8
  store i32 %3587, i32* %313, align 4
  %3591 = or i32 %3581, %1534
  %3592 = shl i32 %3587, 7
  %3593 = add i32 %3592, -128
  %3594 = lshr i32 %3593, 8
  %3595 = add nuw nsw i32 %3594, 1
  %3596 = icmp slt i32 %3590, 0
  br i1 %3596, label %3597, label %3600

3597:                                             ; preds = %3578
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3598 = load i32, i32* %318, align 8
  %3599 = load i64, i64* %324, align 8
  br label %3600

3600:                                             ; preds = %3597, %3578
  %3601 = phi i64 [ %3599, %3597 ], [ %3589, %3578 ]
  %3602 = phi i32 [ %3598, %3597 ], [ %3590, %3578 ]
  %3603 = zext i32 %3595 to i64
  %3604 = shl i64 %3603, 56
  %3605 = icmp ult i64 %3601, %3604
  br i1 %3605, label %3610, label %3606

3606:                                             ; preds = %3600
  %3607 = load i32, i32* %313, align 4
  %3608 = sub i32 %3607, %3595
  %3609 = sub i64 %3601, %3604
  br label %3610

3610:                                             ; preds = %3606, %3600
  %3611 = phi i64 [ %3609, %3606 ], [ %3601, %3600 ]
  %3612 = phi i32 [ %3608, %3606 ], [ %3595, %3600 ]
  %3613 = phi i32 [ 2, %3606 ], [ 0, %3600 ]
  %3614 = and i32 %3612, 255
  %3615 = zext i32 %3614 to i64
  %3616 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3615
  %3617 = load i8, i8* %3616, align 1
  %3618 = zext i8 %3617 to i32
  %3619 = shl i32 %3612, %3618
  %3620 = zext i8 %3617 to i64
  %3621 = shl i64 %3611, %3620
  %3622 = sub nsw i32 %3602, %3618
  store i64 %3621, i64* %324, align 8
  store i32 %3622, i32* %318, align 8
  store i32 %3619, i32* %313, align 4
  %3623 = or i32 %3613, %3591
  %3624 = shl i32 %3619, 7
  %3625 = add i32 %3624, -128
  %3626 = lshr i32 %3625, 8
  %3627 = add nuw nsw i32 %3626, 1
  %3628 = icmp slt i32 %3622, 0
  br i1 %3628, label %3629, label %3632

3629:                                             ; preds = %3610
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3630 = load i32, i32* %318, align 8
  %3631 = load i64, i64* %324, align 8
  br label %3632

3632:                                             ; preds = %3629, %3610
  %3633 = phi i64 [ %3631, %3629 ], [ %3621, %3610 ]
  %3634 = phi i32 [ %3630, %3629 ], [ %3622, %3610 ]
  %3635 = zext i32 %3627 to i64
  %3636 = shl i64 %3635, 56
  %3637 = icmp ult i64 %3633, %3636
  br i1 %3637, label %3642, label %3638

3638:                                             ; preds = %3632
  %3639 = load i32, i32* %313, align 4
  %3640 = sub i32 %3639, %3627
  %3641 = sub i64 %3633, %3636
  br label %3642

3642:                                             ; preds = %3638, %3632
  %3643 = phi i64 [ %3641, %3638 ], [ %3633, %3632 ]
  %3644 = phi i32 [ %3640, %3638 ], [ %3627, %3632 ]
  %3645 = phi i32 [ 1, %3638 ], [ 0, %3632 ]
  %3646 = and i32 %3644, 255
  %3647 = zext i32 %3646 to i64
  %3648 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3647
  %3649 = load i8, i8* %3648, align 1
  %3650 = zext i8 %3649 to i32
  %3651 = shl i32 %3644, %3650
  %3652 = zext i8 %3649 to i64
  %3653 = shl i64 %3643, %3652
  %3654 = sub nsw i32 %3634, %3650
  store i64 %3653, i64* %324, align 8
  store i32 %3654, i32* %318, align 8
  store i32 %3651, i32* %313, align 4
  %3655 = or i32 %3645, %3623
  %3656 = shl i32 %3651, 7
  %3657 = add i32 %3656, -128
  %3658 = lshr i32 %3657, 8
  %3659 = add nuw nsw i32 %3658, 1
  %3660 = icmp slt i32 %3654, 0
  br i1 %3660, label %1549, label %1552

3661:                                             ; preds = %1427
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3662 = load i32, i32* %318, align 8
  %3663 = load i64, i64* %324, align 8
  br label %3664

3664:                                             ; preds = %3661, %1427
  %3665 = phi i64 [ %3663, %3661 ], [ %1438, %1427 ]
  %3666 = phi i32 [ %3662, %3661 ], [ %1439, %1427 ]
  %3667 = zext i32 %1443 to i64
  %3668 = shl i64 %3667, 56
  %3669 = icmp ult i64 %3665, %3668
  br i1 %3669, label %3674, label %3670

3670:                                             ; preds = %3664
  %3671 = load i32, i32* %313, align 4
  %3672 = sub i32 %3671, %1443
  %3673 = sub i64 %3665, %3668
  br label %3674

3674:                                             ; preds = %3670, %3664
  %3675 = phi i64 [ %3673, %3670 ], [ %3665, %3664 ]
  %3676 = phi i32 [ %3672, %3670 ], [ %1443, %3664 ]
  %3677 = phi i32 [ 4, %3670 ], [ 0, %3664 ]
  %3678 = and i32 %3676, 255
  %3679 = zext i32 %3678 to i64
  %3680 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3679
  %3681 = load i8, i8* %3680, align 1
  %3682 = zext i8 %3681 to i32
  %3683 = shl i32 %3676, %3682
  %3684 = zext i8 %3681 to i64
  %3685 = shl i64 %3675, %3684
  %3686 = sub nsw i32 %3666, %3682
  store i64 %3685, i64* %324, align 8
  store i32 %3686, i32* %318, align 8
  store i32 %3683, i32* %313, align 4
  %3687 = or i32 %3677, %1430
  %3688 = shl i32 %3683, 7
  %3689 = add i32 %3688, -128
  %3690 = lshr i32 %3689, 8
  %3691 = add nuw nsw i32 %3690, 1
  %3692 = icmp slt i32 %3686, 0
  br i1 %3692, label %3693, label %3696

3693:                                             ; preds = %3674
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3694 = load i32, i32* %318, align 8
  %3695 = load i64, i64* %324, align 8
  br label %3696

3696:                                             ; preds = %3693, %3674
  %3697 = phi i64 [ %3695, %3693 ], [ %3685, %3674 ]
  %3698 = phi i32 [ %3694, %3693 ], [ %3686, %3674 ]
  %3699 = zext i32 %3691 to i64
  %3700 = shl i64 %3699, 56
  %3701 = icmp ult i64 %3697, %3700
  br i1 %3701, label %3706, label %3702

3702:                                             ; preds = %3696
  %3703 = load i32, i32* %313, align 4
  %3704 = sub i32 %3703, %3691
  %3705 = sub i64 %3697, %3700
  br label %3706

3706:                                             ; preds = %3702, %3696
  %3707 = phi i64 [ %3705, %3702 ], [ %3697, %3696 ]
  %3708 = phi i32 [ %3704, %3702 ], [ %3691, %3696 ]
  %3709 = phi i32 [ 2, %3702 ], [ 0, %3696 ]
  %3710 = and i32 %3708, 255
  %3711 = zext i32 %3710 to i64
  %3712 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3711
  %3713 = load i8, i8* %3712, align 1
  %3714 = zext i8 %3713 to i32
  %3715 = shl i32 %3708, %3714
  %3716 = zext i8 %3713 to i64
  %3717 = shl i64 %3707, %3716
  %3718 = sub nsw i32 %3698, %3714
  store i64 %3717, i64* %324, align 8
  store i32 %3718, i32* %318, align 8
  store i32 %3715, i32* %313, align 4
  %3719 = or i32 %3709, %3687
  %3720 = shl i32 %3715, 7
  %3721 = add i32 %3720, -128
  %3722 = lshr i32 %3721, 8
  %3723 = add nuw nsw i32 %3722, 1
  %3724 = icmp slt i32 %3718, 0
  br i1 %3724, label %3725, label %3728

3725:                                             ; preds = %3706
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3726 = load i32, i32* %318, align 8
  %3727 = load i64, i64* %324, align 8
  br label %3728

3728:                                             ; preds = %3725, %3706
  %3729 = phi i64 [ %3727, %3725 ], [ %3717, %3706 ]
  %3730 = phi i32 [ %3726, %3725 ], [ %3718, %3706 ]
  %3731 = zext i32 %3723 to i64
  %3732 = shl i64 %3731, 56
  %3733 = icmp ult i64 %3729, %3732
  br i1 %3733, label %3738, label %3734

3734:                                             ; preds = %3728
  %3735 = load i32, i32* %313, align 4
  %3736 = sub i32 %3735, %3723
  %3737 = sub i64 %3729, %3732
  br label %3738

3738:                                             ; preds = %3734, %3728
  %3739 = phi i64 [ %3737, %3734 ], [ %3729, %3728 ]
  %3740 = phi i32 [ %3736, %3734 ], [ %3723, %3728 ]
  %3741 = phi i32 [ 1, %3734 ], [ 0, %3728 ]
  %3742 = and i32 %3740, 255
  %3743 = zext i32 %3742 to i64
  %3744 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3743
  %3745 = load i8, i8* %3744, align 1
  %3746 = zext i8 %3745 to i32
  %3747 = shl i32 %3740, %3746
  %3748 = zext i8 %3745 to i64
  %3749 = shl i64 %3739, %3748
  %3750 = sub nsw i32 %3730, %3746
  store i64 %3749, i64* %324, align 8
  store i32 %3750, i32* %318, align 8
  store i32 %3747, i32* %313, align 4
  %3751 = or i32 %3741, %3719
  %3752 = shl i32 %3747, 7
  %3753 = add i32 %3752, -128
  %3754 = lshr i32 %3753, 8
  %3755 = add nuw nsw i32 %3754, 1
  %3756 = icmp slt i32 %3750, 0
  br i1 %3756, label %1445, label %1448

3757:                                             ; preds = %761
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3758 = load i32, i32* %318, align 8
  %3759 = load i64, i64* %324, align 8
  br label %3760

3760:                                             ; preds = %3757, %761
  %3761 = phi i64 [ %3759, %3757 ], [ %772, %761 ]
  %3762 = phi i32 [ %3758, %3757 ], [ %773, %761 ]
  %3763 = zext i32 %777 to i64
  %3764 = shl i64 %3763, 56
  %3765 = icmp ult i64 %3761, %3764
  br i1 %3765, label %3770, label %3766

3766:                                             ; preds = %3760
  %3767 = load i32, i32* %313, align 4
  %3768 = sub i32 %3767, %777
  %3769 = sub i64 %3761, %3764
  br label %3770

3770:                                             ; preds = %3766, %3760
  %3771 = phi i64 [ %3769, %3766 ], [ %3761, %3760 ]
  %3772 = phi i32 [ %3768, %3766 ], [ %777, %3760 ]
  %3773 = phi i32 [ 2, %3766 ], [ 0, %3760 ]
  %3774 = and i32 %3772, 255
  %3775 = zext i32 %3774 to i64
  %3776 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3775
  %3777 = load i8, i8* %3776, align 1
  %3778 = zext i8 %3777 to i32
  %3779 = shl i32 %3772, %3778
  %3780 = zext i8 %3777 to i64
  %3781 = shl i64 %3771, %3780
  %3782 = sub nsw i32 %3762, %3778
  store i64 %3781, i64* %324, align 8
  store i32 %3782, i32* %318, align 8
  store i32 %3779, i32* %313, align 4
  %3783 = or i32 %3773, %764
  %3784 = shl i32 %3779, 7
  %3785 = add i32 %3784, -128
  %3786 = lshr i32 %3785, 8
  %3787 = add nuw nsw i32 %3786, 1
  %3788 = icmp slt i32 %3782, 0
  br i1 %3788, label %3789, label %3792

3789:                                             ; preds = %3770
  call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #4
  %3790 = load i32, i32* %318, align 8
  %3791 = load i64, i64* %324, align 8
  br label %3792

3792:                                             ; preds = %3789, %3770
  %3793 = phi i64 [ %3791, %3789 ], [ %3781, %3770 ]
  %3794 = phi i32 [ %3790, %3789 ], [ %3782, %3770 ]
  %3795 = zext i32 %3787 to i64
  %3796 = shl i64 %3795, 56
  %3797 = icmp ult i64 %3793, %3796
  br i1 %3797, label %3802, label %3798

3798:                                             ; preds = %3792
  %3799 = load i32, i32* %313, align 4
  %3800 = sub i32 %3799, %3787
  %3801 = sub i64 %3793, %3796
  br label %3802

3802:                                             ; preds = %3798, %3792
  %3803 = phi i64 [ %3801, %3798 ], [ %3793, %3792 ]
  %3804 = phi i32 [ %3800, %3798 ], [ %3787, %3792 ]
  %3805 = phi i32 [ 1, %3798 ], [ 0, %3792 ]
  %3806 = and i32 %3804, 255
  %3807 = zext i32 %3806 to i64
  %3808 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %3807
  %3809 = load i8, i8* %3808, align 1
  %3810 = zext i8 %3809 to i32
  %3811 = shl i32 %3804, %3810
  %3812 = zext i8 %3809 to i64
  %3813 = shl i64 %3803, %3812
  %3814 = sub nsw i32 %3794, %3810
  store i64 %3813, i64* %324, align 8
  store i32 %3814, i32* %318, align 8
  store i32 %3811, i32* %313, align 4
  %3815 = or i32 %3805, %3783
  %3816 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 48
  store i32 %3815, i32* %3816, align 8
  %3817 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 30
  store i8 0, i8* %3817, align 16
  %3818 = shl i32 %3811, 7
  %3819 = add i32 %3818, -128
  %3820 = lshr i32 %3819, 8
  %3821 = add nuw nsw i32 %3820, 1
  %3822 = icmp slt i32 %3814, 0
  br i1 %3822, label %779, label %782

3823:                                             ; preds = %2736
  %3824 = load i16, i16* %2733, align 2
  %3825 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 5, i64 %2745
  store i16 %3824, i16* %3825, align 2
  %3826 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 6, i64 %2745
  store i16 %3824, i16* %3826, align 2
  %3827 = load i16, i16* %2734, align 2
  %3828 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 7, i64 %2745
  store i16 %3827, i16* %3828, align 2
  %3829 = load i16, i16* %2735, align 2
  %3830 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 8, i64 %2745
  store i16 %3829, i16* %3830, align 2
  %3831 = add nuw nsw i64 %2737, 2
  br label %2736

3832:                                             ; preds = %1946
  %3833 = load i16, i16* %1943, align 2
  %3834 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 5, i64 %1955
  store i16 %3833, i16* %3834, align 2
  %3835 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 6, i64 %1955
  store i16 %3833, i16* %3835, align 2
  %3836 = load i16, i16* %1944, align 2
  %3837 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 7, i64 %1955
  store i16 %3836, i16* %3837, align 2
  %3838 = load i16, i16* %1945, align 2
  %3839 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 8, i64 %1955
  store i16 %3838, i16* %3839, align 2
  %3840 = add nuw nsw i64 %1947, 2
  br label %1946
}

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #2

declare void @vp8_setup_version(%struct.VP8Common*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @vp8dx_start_decode(%struct.BOOL_DECODER*, i8*, i32, void (i8*, i8*, i8*, i32)*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @vp8_decode_mode_mvs(%struct.VP8D_COMP*) local_unnamed_addr #2

declare i32 @vp8mt_decode_mb_rows(%struct.VP8D_COMP*, %struct.macroblockd*) local_unnamed_addr #2

declare void @vp8_decoder_remove_threads(%struct.VP8D_COMP*) local_unnamed_addr #2

declare void @vp8_yv12_extend_frame_borders_c(%struct.yv12_buffer_config*) local_unnamed_addr #2

declare void @vp8_init_mbmode_probs(%struct.VP8Common*) local_unnamed_addr #2

declare void @vp8_default_coef_probs(%struct.VP8Common*) local_unnamed_addr #2

declare void @vp8_bilinear_predict4x4_sse2(i8*, i32, i32, i32, i8*, i32) #2

declare void @vp8_bilinear_predict8x4_sse2(i8*, i32, i32, i32, i8*, i32) #2

declare void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER*) local_unnamed_addr #2

declare void @vp8_loop_filter_frame_init(%struct.VP8Common*, %struct.macroblockd*, i32) local_unnamed_addr #2

declare void @vp8_setup_intra_recon_top_line(%struct.yv12_buffer_config*) local_unnamed_addr #2

declare void @vp8_extend_mb_row(%struct.yv12_buffer_config*, i8*, i8*, i8*) local_unnamed_addr #2

declare void @vp8_loop_filter_row_normal(%struct.VP8Common*, %struct.modeinfo*, i32, i32, i32, i8*, i8*, i8*) local_unnamed_addr #2

declare void @vp8_loop_filter_row_simple(%struct.VP8Common*, %struct.modeinfo*, i32, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @yv12_extend_frame_left_right_c(%struct.yv12_buffer_config* nocapture readonly, i8* nocapture, i8* nocapture, i8* nocapture) unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 19
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %1, i64 %11
  %13 = getelementptr inbounds i8, i8* %12, i64 -1
  %14 = zext i32 %6 to i64
  %15 = sub nsw i64 0, %14
  %16 = getelementptr inbounds i8, i8* %1, i64 %15
  %17 = getelementptr inbounds i8, i8* %13, i64 1
  %18 = sext i32 %8 to i64
  %19 = load i8, i8* %1, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 %19, i64 %14, i1 false)
  %20 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 %20, i64 %14, i1 false)
  %21 = getelementptr inbounds i8, i8* %1, i64 %18
  %22 = getelementptr inbounds i8, i8* %13, i64 %18
  %23 = getelementptr inbounds i8, i8* %16, i64 %18
  %24 = getelementptr inbounds i8, i8* %17, i64 %18
  %25 = load i8, i8* %21, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %25, i64 %14, i1 false)
  %26 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 %14, i1 false)
  %27 = getelementptr inbounds i8, i8* %21, i64 %18
  %28 = getelementptr inbounds i8, i8* %22, i64 %18
  %29 = getelementptr inbounds i8, i8* %23, i64 %18
  %30 = getelementptr inbounds i8, i8* %24, i64 %18
  %31 = load i8, i8* %27, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %31, i64 %14, i1 false)
  %32 = load i8, i8* %28, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %32, i64 %14, i1 false)
  %33 = getelementptr inbounds i8, i8* %27, i64 %18
  %34 = getelementptr inbounds i8, i8* %28, i64 %18
  %35 = getelementptr inbounds i8, i8* %29, i64 %18
  %36 = getelementptr inbounds i8, i8* %30, i64 %18
  %37 = load i8, i8* %33, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %37, i64 %14, i1 false)
  %38 = load i8, i8* %34, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %38, i64 %14, i1 false)
  %39 = getelementptr inbounds i8, i8* %33, i64 %18
  %40 = getelementptr inbounds i8, i8* %34, i64 %18
  %41 = getelementptr inbounds i8, i8* %35, i64 %18
  %42 = getelementptr inbounds i8, i8* %36, i64 %18
  %43 = load i8, i8* %39, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %43, i64 %14, i1 false)
  %44 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %44, i64 %14, i1 false)
  %45 = getelementptr inbounds i8, i8* %39, i64 %18
  %46 = getelementptr inbounds i8, i8* %40, i64 %18
  %47 = getelementptr inbounds i8, i8* %41, i64 %18
  %48 = getelementptr inbounds i8, i8* %42, i64 %18
  %49 = load i8, i8* %45, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %49, i64 %14, i1 false)
  %50 = load i8, i8* %46, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %50, i64 %14, i1 false)
  %51 = getelementptr inbounds i8, i8* %45, i64 %18
  %52 = getelementptr inbounds i8, i8* %46, i64 %18
  %53 = getelementptr inbounds i8, i8* %47, i64 %18
  %54 = getelementptr inbounds i8, i8* %48, i64 %18
  %55 = load i8, i8* %51, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 %55, i64 %14, i1 false)
  %56 = load i8, i8* %52, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %56, i64 %14, i1 false)
  %57 = getelementptr inbounds i8, i8* %51, i64 %18
  %58 = getelementptr inbounds i8, i8* %52, i64 %18
  %59 = getelementptr inbounds i8, i8* %53, i64 %18
  %60 = getelementptr inbounds i8, i8* %54, i64 %18
  %61 = load i8, i8* %57, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 %61, i64 %14, i1 false)
  %62 = load i8, i8* %58, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 %62, i64 %14, i1 false)
  %63 = getelementptr inbounds i8, i8* %57, i64 %18
  %64 = getelementptr inbounds i8, i8* %58, i64 %18
  %65 = getelementptr inbounds i8, i8* %59, i64 %18
  %66 = getelementptr inbounds i8, i8* %60, i64 %18
  %67 = load i8, i8* %63, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %65, i8 %67, i64 %14, i1 false)
  %68 = load i8, i8* %64, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 %68, i64 %14, i1 false)
  %69 = getelementptr inbounds i8, i8* %63, i64 %18
  %70 = getelementptr inbounds i8, i8* %64, i64 %18
  %71 = getelementptr inbounds i8, i8* %65, i64 %18
  %72 = getelementptr inbounds i8, i8* %66, i64 %18
  %73 = load i8, i8* %69, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %71, i8 %73, i64 %14, i1 false)
  %74 = load i8, i8* %70, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 %74, i64 %14, i1 false)
  %75 = getelementptr inbounds i8, i8* %69, i64 %18
  %76 = getelementptr inbounds i8, i8* %70, i64 %18
  %77 = getelementptr inbounds i8, i8* %71, i64 %18
  %78 = getelementptr inbounds i8, i8* %72, i64 %18
  %79 = load i8, i8* %75, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %77, i8 %79, i64 %14, i1 false)
  %80 = load i8, i8* %76, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %78, i8 %80, i64 %14, i1 false)
  %81 = getelementptr inbounds i8, i8* %75, i64 %18
  %82 = getelementptr inbounds i8, i8* %76, i64 %18
  %83 = getelementptr inbounds i8, i8* %77, i64 %18
  %84 = getelementptr inbounds i8, i8* %78, i64 %18
  %85 = load i8, i8* %81, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %83, i8 %85, i64 %14, i1 false)
  %86 = load i8, i8* %82, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 %86, i64 %14, i1 false)
  %87 = getelementptr inbounds i8, i8* %81, i64 %18
  %88 = getelementptr inbounds i8, i8* %82, i64 %18
  %89 = getelementptr inbounds i8, i8* %83, i64 %18
  %90 = getelementptr inbounds i8, i8* %84, i64 %18
  %91 = load i8, i8* %87, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %89, i8 %91, i64 %14, i1 false)
  %92 = load i8, i8* %88, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %90, i8 %92, i64 %14, i1 false)
  %93 = getelementptr inbounds i8, i8* %87, i64 %18
  %94 = getelementptr inbounds i8, i8* %88, i64 %18
  %95 = getelementptr inbounds i8, i8* %89, i64 %18
  %96 = getelementptr inbounds i8, i8* %90, i64 %18
  %97 = load i8, i8* %93, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %95, i8 %97, i64 %14, i1 false)
  %98 = load i8, i8* %94, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 %98, i64 %14, i1 false)
  %99 = getelementptr inbounds i8, i8* %93, i64 %18
  %100 = getelementptr inbounds i8, i8* %94, i64 %18
  %101 = getelementptr inbounds i8, i8* %95, i64 %18
  %102 = getelementptr inbounds i8, i8* %96, i64 %18
  %103 = load i8, i8* %99, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %101, i8 %103, i64 %14, i1 false)
  %104 = load i8, i8* %100, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 %104, i64 %14, i1 false)
  %105 = getelementptr inbounds i8, i8* %99, i64 %18
  %106 = getelementptr inbounds i8, i8* %100, i64 %18
  %107 = getelementptr inbounds i8, i8* %101, i64 %18
  %108 = getelementptr inbounds i8, i8* %102, i64 %18
  %109 = load i8, i8* %105, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %107, i8 %109, i64 %14, i1 false)
  %110 = load i8, i8* %106, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %108, i8 %110, i64 %14, i1 false)
  %111 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %114 = load i32, i32* %113, align 4
  %115 = lshr i32 %6, 1
  %116 = sext i32 %114 to i64
  %117 = getelementptr inbounds i8, i8* %2, i64 %116
  %118 = getelementptr inbounds i8, i8* %117, i64 -1
  %119 = zext i32 %115 to i64
  %120 = sub nsw i64 0, %119
  %121 = getelementptr inbounds i8, i8* %2, i64 %120
  %122 = getelementptr inbounds i8, i8* %118, i64 1
  %123 = sext i32 %112 to i64
  %124 = load i8, i8* %2, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %121, i8 %124, i64 %119, i1 false)
  %125 = load i8, i8* %118, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %122, i8 %125, i64 %119, i1 false)
  %126 = getelementptr inbounds i8, i8* %2, i64 %123
  %127 = getelementptr inbounds i8, i8* %118, i64 %123
  %128 = getelementptr inbounds i8, i8* %121, i64 %123
  %129 = getelementptr inbounds i8, i8* %122, i64 %123
  %130 = load i8, i8* %126, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %128, i8 %130, i64 %119, i1 false)
  %131 = load i8, i8* %127, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %129, i8 %131, i64 %119, i1 false)
  %132 = getelementptr inbounds i8, i8* %126, i64 %123
  %133 = getelementptr inbounds i8, i8* %127, i64 %123
  %134 = getelementptr inbounds i8, i8* %128, i64 %123
  %135 = getelementptr inbounds i8, i8* %129, i64 %123
  %136 = load i8, i8* %132, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %134, i8 %136, i64 %119, i1 false)
  %137 = load i8, i8* %133, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %135, i8 %137, i64 %119, i1 false)
  %138 = getelementptr inbounds i8, i8* %132, i64 %123
  %139 = getelementptr inbounds i8, i8* %133, i64 %123
  %140 = getelementptr inbounds i8, i8* %134, i64 %123
  %141 = getelementptr inbounds i8, i8* %135, i64 %123
  %142 = load i8, i8* %138, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %140, i8 %142, i64 %119, i1 false)
  %143 = load i8, i8* %139, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %141, i8 %143, i64 %119, i1 false)
  %144 = getelementptr inbounds i8, i8* %138, i64 %123
  %145 = getelementptr inbounds i8, i8* %139, i64 %123
  %146 = getelementptr inbounds i8, i8* %140, i64 %123
  %147 = getelementptr inbounds i8, i8* %141, i64 %123
  %148 = load i8, i8* %144, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %146, i8 %148, i64 %119, i1 false)
  %149 = load i8, i8* %145, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %147, i8 %149, i64 %119, i1 false)
  %150 = getelementptr inbounds i8, i8* %144, i64 %123
  %151 = getelementptr inbounds i8, i8* %145, i64 %123
  %152 = getelementptr inbounds i8, i8* %146, i64 %123
  %153 = getelementptr inbounds i8, i8* %147, i64 %123
  %154 = load i8, i8* %150, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %152, i8 %154, i64 %119, i1 false)
  %155 = load i8, i8* %151, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %153, i8 %155, i64 %119, i1 false)
  %156 = getelementptr inbounds i8, i8* %150, i64 %123
  %157 = getelementptr inbounds i8, i8* %151, i64 %123
  %158 = getelementptr inbounds i8, i8* %152, i64 %123
  %159 = getelementptr inbounds i8, i8* %153, i64 %123
  %160 = load i8, i8* %156, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %158, i8 %160, i64 %119, i1 false)
  %161 = load i8, i8* %157, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %159, i8 %161, i64 %119, i1 false)
  %162 = getelementptr inbounds i8, i8* %156, i64 %123
  %163 = getelementptr inbounds i8, i8* %157, i64 %123
  %164 = getelementptr inbounds i8, i8* %158, i64 %123
  %165 = getelementptr inbounds i8, i8* %159, i64 %123
  %166 = load i8, i8* %162, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %164, i8 %166, i64 %119, i1 false)
  %167 = load i8, i8* %163, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %165, i8 %167, i64 %119, i1 false)
  %168 = getelementptr inbounds i8, i8* %3, i64 %116
  %169 = getelementptr inbounds i8, i8* %168, i64 -1
  %170 = getelementptr inbounds i8, i8* %3, i64 %120
  %171 = getelementptr inbounds i8, i8* %169, i64 1
  %172 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %170, i8 %172, i64 %119, i1 false)
  %173 = load i8, i8* %169, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %171, i8 %173, i64 %119, i1 false)
  %174 = getelementptr inbounds i8, i8* %3, i64 %123
  %175 = getelementptr inbounds i8, i8* %169, i64 %123
  %176 = getelementptr inbounds i8, i8* %170, i64 %123
  %177 = getelementptr inbounds i8, i8* %171, i64 %123
  %178 = load i8, i8* %174, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %176, i8 %178, i64 %119, i1 false)
  %179 = load i8, i8* %175, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %177, i8 %179, i64 %119, i1 false)
  %180 = getelementptr inbounds i8, i8* %174, i64 %123
  %181 = getelementptr inbounds i8, i8* %175, i64 %123
  %182 = getelementptr inbounds i8, i8* %176, i64 %123
  %183 = getelementptr inbounds i8, i8* %177, i64 %123
  %184 = load i8, i8* %180, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %182, i8 %184, i64 %119, i1 false)
  %185 = load i8, i8* %181, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %183, i8 %185, i64 %119, i1 false)
  %186 = getelementptr inbounds i8, i8* %180, i64 %123
  %187 = getelementptr inbounds i8, i8* %181, i64 %123
  %188 = getelementptr inbounds i8, i8* %182, i64 %123
  %189 = getelementptr inbounds i8, i8* %183, i64 %123
  %190 = load i8, i8* %186, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %188, i8 %190, i64 %119, i1 false)
  %191 = load i8, i8* %187, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %189, i8 %191, i64 %119, i1 false)
  %192 = getelementptr inbounds i8, i8* %186, i64 %123
  %193 = getelementptr inbounds i8, i8* %187, i64 %123
  %194 = getelementptr inbounds i8, i8* %188, i64 %123
  %195 = getelementptr inbounds i8, i8* %189, i64 %123
  %196 = load i8, i8* %192, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %194, i8 %196, i64 %119, i1 false)
  %197 = load i8, i8* %193, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %195, i8 %197, i64 %119, i1 false)
  %198 = getelementptr inbounds i8, i8* %192, i64 %123
  %199 = getelementptr inbounds i8, i8* %193, i64 %123
  %200 = getelementptr inbounds i8, i8* %194, i64 %123
  %201 = getelementptr inbounds i8, i8* %195, i64 %123
  %202 = load i8, i8* %198, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %200, i8 %202, i64 %119, i1 false)
  %203 = load i8, i8* %199, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %201, i8 %203, i64 %119, i1 false)
  %204 = getelementptr inbounds i8, i8* %198, i64 %123
  %205 = getelementptr inbounds i8, i8* %199, i64 %123
  %206 = getelementptr inbounds i8, i8* %200, i64 %123
  %207 = getelementptr inbounds i8, i8* %201, i64 %123
  %208 = load i8, i8* %204, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %206, i8 %208, i64 %119, i1 false)
  %209 = load i8, i8* %205, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %207, i8 %209, i64 %119, i1 false)
  %210 = getelementptr inbounds i8, i8* %204, i64 %123
  %211 = getelementptr inbounds i8, i8* %205, i64 %123
  %212 = getelementptr inbounds i8, i8* %206, i64 %123
  %213 = getelementptr inbounds i8, i8* %207, i64 %123
  %214 = load i8, i8* %210, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %212, i8 %214, i64 %119, i1 false)
  %215 = load i8, i8* %211, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %213, i8 %215, i64 %119, i1 false)
  ret void
}

declare void @vp8_reset_mb_tokens_context(%struct.macroblockd*) local_unnamed_addr #2

declare i32 @vp8_decode_mb_tokens(%struct.VP8D_COMP*, %struct.macroblockd*) local_unnamed_addr #2

declare void @vp8_build_intra_predictors_mbuv_s(%struct.macroblockd*, i8*, i8*, i8*, i8*, i32, i8*, i8*, i32) local_unnamed_addr #2

declare void @vp8_build_intra_predictors_mby_s(%struct.macroblockd*, i8*, i8*, i32, i8*, i32) local_unnamed_addr #2

declare void @vp8_intra4x4_predict(i8*, i8*, i32, i32, i8*, i32, i8 zeroext) local_unnamed_addr #2

declare void @vp8_dequant_idct_add_mmx(i16*, i16*, i8*, i32) local_unnamed_addr #2

declare void @vp8_dc_only_idct_add_mmx(i16 signext, i8*, i32, i8*, i32) local_unnamed_addr #2

declare void @vp8_build_inter_predictors_mb(%struct.macroblockd*) local_unnamed_addr #2

declare void @vp8_dequantize_b_mmx(%struct.blockd*, i16*) local_unnamed_addr #2

declare void @vp8_short_inv_walsh4x4_sse2(i16*, i16*) local_unnamed_addr #2

declare void @vp8_short_inv_walsh4x4_1_c(i16*, i16*) local_unnamed_addr #2

declare void @vp8_dequant_idct_add_y_block_sse2(i16*, i16*, i8*, i32, i8*) local_unnamed_addr #2

declare void @vp8_dequant_idct_add_uv_block_sse2(i16*, i16*, i8*, i8*, i32, i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
