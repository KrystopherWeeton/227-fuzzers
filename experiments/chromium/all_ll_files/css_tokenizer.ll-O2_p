; ModuleID = '../../third_party/blink/renderer/core/css/parser/css_tokenizer.cc'
source_filename = "../../third_party/blink/renderer/core/css/parser/css_tokenizer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::CSSTokenizer" = type { %"class.blink::CSSTokenizerInputStream", %"class.WTF::Vector", %"class.WTF::Vector.1", i32, i32 }
%"class.blink::CSSTokenizerInputStream" = type { i32, i32, %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.WTF::VectorBufferBase" = type { i32*, i32, i32 }
%"class.WTF::Vector.1" = type { %"class.WTF::VectorBuffer.2" }
%"class.WTF::VectorBuffer.2" = type { %"class.WTF::VectorBufferBase.3" }
%"class.WTF::VectorBufferBase.3" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%"class.blink::CSSParserToken" = type { i24, i32, i8*, %union.anon }
%union.anon = type { double }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::Vector.6" = type { %"class.WTF::VectorBuffer.7" }
%"class.WTF::VectorBuffer.7" = type { %"class.WTF::VectorBufferBase.8", [768 x i8] }
%"class.WTF::VectorBufferBase.8" = type { %"class.blink::CSSParserToken"*, i32, i32 }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon.11, i32, i8, i8, [2 x i8] }>
%union.anon.11 = type { %"class.WTF::Vector.12" }
%"class.WTF::Vector.12" = type { %"class.WTF::VectorBuffer.13" }
%"class.WTF::VectorBuffer.13" = type { %"class.WTF::VectorBufferBase.14", [16 x i8] }
%"class.WTF::VectorBufferBase.14" = type { i8*, i32, i32 }
%"class.WTF::Vector.17" = type { %"class.WTF::VectorBuffer.18" }
%"class.WTF::VectorBuffer.18" = type { %"class.WTF::VectorBufferBase.19", [16 x i8] }
%"class.WTF::VectorBufferBase.19" = type { i16*, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.22 }
%union.anon.22 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF13StringBuilder6AppendEDs = comdat any

$_ZN3WTF12VectorBufferIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_ = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_ = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_ = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

$_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink14CSSParserTokenEEEmm = comdat any

$_ZN3WTF6VectorIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS2_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18CSSParserTokenTypeEEEmm = comdat any

$_ZN3WTF12VectorBufferIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_ = comdat any

$_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

@_ZN5blink12CSSTokenizer11kCodePointsE = hidden local_unnamed_addr constant [128 x { i64, i64 }] [{ i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9EndOfFileEDs to i64), i64 0 }, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10WhiteSpaceEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10WhiteSpaceEDs to i64), i64 0 }, { i64, i64 } zeroinitializer, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10WhiteSpaceEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10WhiteSpaceEDs to i64), i64 0 }, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10WhiteSpaceEDs to i64), i64 0 }, { i64, i64 } zeroinitializer, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer11StringStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer4HashEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10DollarSignEDs to i64), i64 0 }, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer11StringStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer15LeftParenthesisEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer16RightParenthesisEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer8AsteriskEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer14PlusOrFullStopEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer5CommaEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer11HyphenMinusEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer14PlusOrFullStopEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer7SolidusEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10AsciiDigitEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10AsciiDigitEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10AsciiDigitEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10AsciiDigitEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10AsciiDigitEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10AsciiDigitEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10AsciiDigitEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10AsciiDigitEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10AsciiDigitEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10AsciiDigitEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer5ColonEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9SemiColonEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer8LessThanEDs to i64), i64 0 }, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } zeroinitializer, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer12CommercialAtEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer7LetterUEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer11LeftBracketEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer14ReverseSolidusEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer12RightBracketEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer16CircumflexAccentEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } zeroinitializer, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer7LetterUEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9LeftBraceEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer12VerticalLineEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer10RightBraceEDs to i64), i64 0 }, { i64, i64 } { i64 ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer5TildeEDs to i64), i64 0 }, { i64, i64 } zeroinitializer], align 16
@.str.1 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.2 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.4 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.5 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink14CSSParserTokenEEEPKcv = private unnamed_addr constant [69 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CSSParserToken]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18CSSParserTokenTypeEEEPKcv = private unnamed_addr constant [73 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CSSParserTokenType]\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@_ZN3WTF19kASCIICaseFoldTableE = external local_unnamed_addr constant [256 x i8], align 16
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1

@_ZN5blink12CSSTokenizerC1ERKN3WTF6StringEj = hidden unnamed_addr alias void (%"class.blink::CSSTokenizer"*, %"class.WTF::String"*, i32), void (%"class.blink::CSSTokenizer"*, %"class.WTF::String"*, i32)* @_ZN5blink12CSSTokenizerC2ERKN3WTF6StringEj

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer9EndOfFileEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"* nocapture readnone, i16 zeroext) #0 align 2 {
  %4 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, -256
  %7 = or i32 %6, 31
  store i32 %7, i32* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer10WhiteSpaceEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0
  tail call void @_ZN5blink23CSSTokenizerInputStream25AdvanceUntilNonWhitespaceEv(%"class.blink::CSSTokenizerInputStream"* %4) #9
  %5 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, -256
  %8 = or i32 %7, 17
  store i32 %8, i32* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer11StringStartEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  tail call void @_ZN5blink12CSSTokenizer23ConsumeStringTokenUntilEDs(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %1, i16 zeroext %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer4HashEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp ult i32 %7, %9
  br i1 %10, label %11, label %30

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  br i1 %17, label %25, label %19

19:                                               ; preds = %11
  %20 = bitcast %"class.WTF::StringImpl"* %18 to i8*
  %21 = zext i32 %7 to i64
  %22 = getelementptr inbounds i8, i8* %20, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i16
  br label %30

25:                                               ; preds = %11
  %26 = bitcast %"class.WTF::StringImpl"* %18 to i16*
  %27 = zext i32 %7 to i64
  %28 = getelementptr inbounds i16, i16* %26, i64 %27
  %29 = load i16, i16* %28, align 2
  br label %30

30:                                               ; preds = %3, %19, %25
  %31 = phi i16 [ 0, %3 ], [ %24, %19 ], [ %29, %25 ]
  %32 = or i16 %31, 32
  %33 = add i16 %32, -97
  %34 = icmp ult i16 %33, 26
  %35 = icmp eq i16 %31, 95
  %36 = or i1 %35, %34
  %37 = icmp ugt i16 %31, 127
  %38 = or i1 %37, %36
  br i1 %38, label %70, label %39

39:                                               ; preds = %30
  %40 = add nsw i16 %31, -48
  %41 = icmp ult i16 %40, 10
  %42 = icmp eq i16 %31, 45
  %43 = or i1 %42, %41
  br i1 %43, label %70, label %44

44:                                               ; preds = %39
  %45 = add i32 %7, 1
  %46 = icmp ult i32 %45, %9
  br i1 %46, label %47, label %66

47:                                               ; preds = %44
  %48 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %48, align 8
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 1
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 1
  br i1 %53, label %61, label %55

55:                                               ; preds = %47
  %56 = bitcast %"class.WTF::StringImpl"* %54 to i8*
  %57 = zext i32 %45 to i64
  %58 = getelementptr inbounds i8, i8* %56, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i16
  br label %66

61:                                               ; preds = %47
  %62 = bitcast %"class.WTF::StringImpl"* %54 to i16*
  %63 = zext i32 %45 to i64
  %64 = getelementptr inbounds i16, i16* %62, i64 %63
  %65 = load i16, i16* %64, align 2
  br label %66

66:                                               ; preds = %44, %55, %61
  %67 = phi i16 [ 0, %44 ], [ %60, %55 ], [ %65, %61 ]
  %68 = icmp eq i16 %31, 92
  br i1 %68, label %69, label %102

69:                                               ; preds = %66
  switch i16 %67, label %70 [
    i16 13, label %102
    i16 10, label %102
    i16 12, label %102
  ]

70:                                               ; preds = %30, %69, %39
  br i1 %10, label %71, label %94

71:                                               ; preds = %70
  %72 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 1
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 1
  br i1 %77, label %85, label %79

79:                                               ; preds = %71
  %80 = bitcast %"class.WTF::StringImpl"* %78 to i8*
  %81 = zext i32 %7 to i64
  %82 = getelementptr inbounds i8, i8* %80, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i16
  br label %90

85:                                               ; preds = %71
  %86 = bitcast %"class.WTF::StringImpl"* %78 to i16*
  %87 = zext i32 %7 to i64
  %88 = getelementptr inbounds i16, i16* %86, i64 %87
  %89 = load i16, i16* %88, align 2
  br label %90

90:                                               ; preds = %85, %79
  %91 = phi i16 [ %84, %79 ], [ %89, %85 ]
  %92 = icmp eq i16 %91, 0
  %93 = select i1 %92, i16 -3, i16 %91
  br label %94

94:                                               ; preds = %70, %90
  %95 = phi i16 [ %93, %90 ], [ 0, %70 ]
  %96 = add i32 %7, 1
  store i32 %96, i32* %6, align 8
  %97 = tail call zeroext i1 @_ZN5blink22NextCharsAreIdentifierEDsRKNS_23CSSTokenizerInputStreamE(i16 zeroext %95, %"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %5) #9
  %98 = load i32, i32* %6, align 8
  %99 = add i32 %98, -1
  store i32 %99, i32* %6, align 8
  %100 = xor i1 %97, true
  %101 = zext i1 %100 to i32
  call void @_ZN5blink12CSSTokenizer11ConsumeNameEv(%"class.WTF::StringView"* nonnull sret %4, %"class.blink::CSSTokenizer"* %1)
  tail call void @_ZN5blink14CSSParserTokenC1ENS_13HashTokenTypeEN3WTF10StringViewE(%"class.blink::CSSParserToken"* %0, i32 %101, %"class.WTF::StringView"* nonnull byval(%"class.WTF::StringView") align 8 %4) #9
  br label %103

102:                                              ; preds = %66, %69, %69, %69
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext %2) #9
  br label %103

103:                                              ; preds = %102, %94
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer10DollarSignEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"* nocapture, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  br i1 %8, label %9, label %37

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %15, label %23, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = zext i32 %5 to i64
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  br label %28

23:                                               ; preds = %9
  %24 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %25 = zext i32 %5 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  %27 = load i16, i16* %26, align 2
  br label %28

28:                                               ; preds = %23, %17
  %29 = phi i16 [ %22, %17 ], [ %27, %23 ]
  %30 = icmp eq i16 %29, 61
  br i1 %30, label %31, label %37

31:                                               ; preds = %28
  %32 = add nuw i32 %5, 1
  store i32 %32, i32* %4, align 8
  %33 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %34 = load i32, i32* %33, align 8
  %35 = and i32 %34, -256
  %36 = or i32 %35, 13
  store i32 %36, i32* %33, align 8
  br label %38

37:                                               ; preds = %3, %28
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext 36) #9
  br label %38

38:                                               ; preds = %37, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer15LeftParenthesisEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5)
  store i32 23, i32* %4, align 4, !noalias !2
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1
  %7 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4, !noalias !2
  %9 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8, !noalias !2
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %19, label %12, !prof !5

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %6, i64 0, i32 0, i32 0, i32 0
  %14 = load i32*, i32** %13, align 8, !noalias !2
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds i32, i32* %14, i64 %15
  store i32 23, i32* %16, align 4, !noalias !2
  %17 = load i32, i32* %7, align 4, !noalias !2
  %18 = add i32 %17, 1
  store i32 %18, i32* %7, align 4, !noalias !2
  br label %20

19:                                               ; preds = %3
  call void @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"* %6, i32* nonnull dereferenceable(4) %4) #9, !noalias !2
  br label %20

20:                                               ; preds = %12, %19
  %21 = load i32, i32* %4, align 4, !noalias !2
  %22 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %23 = load i32, i32* %22, align 8, !alias.scope !2
  %24 = and i32 %21, 63
  %25 = and i32 %23, -256
  %26 = or i32 %24, %25
  %27 = or i32 %26, 64
  store i32 %27, i32* %22, align 8, !alias.scope !2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer16RightParenthesisEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4, !noalias !6
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1
  %9 = add i32 %5, -1
  %10 = tail call dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %8, i32 %9) #9, !noalias !6
  %11 = load i32, i32* %10, align 4, !noalias !6
  %12 = icmp eq i32 %11, 23
  br i1 %12, label %13, label %16

13:                                               ; preds = %7
  %14 = load i32, i32* %4, align 4, !noalias !6
  %15 = add i32 %14, -1
  store i32 %15, i32* %4, align 4, !noalias !6
  br label %16

16:                                               ; preds = %3, %7, %13
  %17 = phi i32 [ 152, %13 ], [ 24, %7 ], [ 24, %3 ]
  %18 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %19 = load i32, i32* %18, align 8, !alias.scope !6
  %20 = and i32 %19, -256
  %21 = or i32 %20, %17
  store i32 %21, i32* %18, align 8, !alias.scope !6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer8AsteriskEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"* nocapture, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  br i1 %8, label %9, label %37

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %15, label %23, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = zext i32 %5 to i64
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  br label %28

23:                                               ; preds = %9
  %24 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %25 = zext i32 %5 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  %27 = load i16, i16* %26, align 2
  br label %28

28:                                               ; preds = %23, %17
  %29 = phi i16 [ %22, %17 ], [ %27, %23 ]
  %30 = icmp eq i16 %29, 61
  br i1 %30, label %31, label %37

31:                                               ; preds = %28
  %32 = add nuw i32 %5, 1
  store i32 %32, i32* %4, align 8
  %33 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %34 = load i32, i32* %33, align 8
  %35 = and i32 %34, -256
  %36 = or i32 %35, 14
  store i32 %36, i32* %33, align 8
  br label %38

37:                                               ; preds = %3, %28
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext 42) #9
  br label %38

38:                                               ; preds = %37, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer14PlusOrFullStopEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  br i1 %8, label %9, label %28

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %15, label %23, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = zext i32 %5 to i64
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  br label %28

23:                                               ; preds = %9
  %24 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %25 = zext i32 %5 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  %27 = load i16, i16* %26, align 2
  br label %28

28:                                               ; preds = %23, %17, %3
  %29 = phi i16 [ 0, %3 ], [ %22, %17 ], [ %27, %23 ]
  %30 = add i16 %2, -48
  %31 = icmp ult i16 %30, 10
  br i1 %31, label %67, label %32

32:                                               ; preds = %28
  switch i16 %2, label %69 [
    i16 43, label %33
    i16 45, label %33
    i16 46, label %60
  ]

33:                                               ; preds = %32, %32
  %34 = add i16 %29, -48
  %35 = icmp ult i16 %34, 10
  br i1 %35, label %67, label %36

36:                                               ; preds = %33
  %37 = icmp eq i16 %29, 46
  br i1 %37, label %38, label %69

38:                                               ; preds = %36
  %39 = add i32 %5, 1
  %40 = icmp ult i32 %39, %7
  br i1 %40, label %41, label %69

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = and i32 %45, 1
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 1
  br i1 %47, label %55, label %49

49:                                               ; preds = %41
  %50 = bitcast %"class.WTF::StringImpl"* %48 to i8*
  %51 = zext i32 %39 to i64
  %52 = getelementptr inbounds i8, i8* %50, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i16
  br label %63

55:                                               ; preds = %41
  %56 = bitcast %"class.WTF::StringImpl"* %48 to i16*
  %57 = zext i32 %39 to i64
  %58 = getelementptr inbounds i16, i16* %56, i64 %57
  %59 = load i16, i16* %58, align 2
  br label %63

60:                                               ; preds = %32
  %61 = add i16 %29, -48
  %62 = icmp ult i16 %61, 10
  br i1 %62, label %67, label %69

63:                                               ; preds = %49, %55
  %64 = phi i16 [ %54, %49 ], [ %59, %55 ]
  %65 = add i16 %64, -48
  %66 = icmp ult i16 %65, 10
  br i1 %66, label %67, label %69

67:                                               ; preds = %33, %28, %60, %63
  %68 = add i32 %5, -1
  store i32 %68, i32* %4, align 8
  tail call void @_ZN5blink12CSSTokenizer19ConsumeNumericTokenEv(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %1)
  br label %70

69:                                               ; preds = %32, %36, %38, %60, %63
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext %2) #9
  br label %70

70:                                               ; preds = %69, %67
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer5CommaEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"* nocapture readnone, i16 zeroext) #0 align 2 {
  %4 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, -256
  %7 = or i32 %6, 22
  store i32 %7, i32* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer11HyphenMinusEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  br i1 %8, label %9, label %28

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %15, label %23, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = zext i32 %5 to i64
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  br label %28

23:                                               ; preds = %9
  %24 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %25 = zext i32 %5 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  %27 = load i16, i16* %26, align 2
  br label %28

28:                                               ; preds = %23, %17, %3
  %29 = phi i16 [ 0, %3 ], [ %22, %17 ], [ %27, %23 ]
  %30 = add i16 %2, -48
  %31 = icmp ult i16 %30, 10
  br i1 %31, label %67, label %32

32:                                               ; preds = %28
  switch i16 %2, label %69 [
    i16 43, label %33
    i16 45, label %33
    i16 46, label %60
  ]

33:                                               ; preds = %32, %32
  %34 = add i16 %29, -48
  %35 = icmp ult i16 %34, 10
  br i1 %35, label %67, label %36

36:                                               ; preds = %33
  %37 = icmp eq i16 %29, 46
  br i1 %37, label %38, label %69

38:                                               ; preds = %36
  %39 = add i32 %5, 1
  %40 = icmp ult i32 %39, %7
  br i1 %40, label %41, label %69

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = and i32 %45, 1
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 1
  br i1 %47, label %55, label %49

49:                                               ; preds = %41
  %50 = bitcast %"class.WTF::StringImpl"* %48 to i8*
  %51 = zext i32 %39 to i64
  %52 = getelementptr inbounds i8, i8* %50, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i16
  br label %63

55:                                               ; preds = %41
  %56 = bitcast %"class.WTF::StringImpl"* %48 to i16*
  %57 = zext i32 %39 to i64
  %58 = getelementptr inbounds i16, i16* %56, i64 %57
  %59 = load i16, i16* %58, align 2
  br label %63

60:                                               ; preds = %32
  %61 = add i16 %29, -48
  %62 = icmp ult i16 %61, 10
  br i1 %62, label %67, label %69

63:                                               ; preds = %49, %55
  %64 = phi i16 [ %54, %49 ], [ %59, %55 ]
  %65 = add i16 %64, -48
  %66 = icmp ult i16 %65, 10
  br i1 %66, label %67, label %69

67:                                               ; preds = %33, %28, %60, %63
  %68 = add i32 %5, -1
  store i32 %68, i32* %4, align 8
  tail call void @_ZN5blink12CSSTokenizer19ConsumeNumericTokenEv(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %1)
  br label %126

69:                                               ; preds = %32, %36, %38, %60, %63
  %70 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0
  br i1 %8, label %71, label %120

71:                                               ; preds = %69
  %72 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 1
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 1
  br i1 %77, label %85, label %79

79:                                               ; preds = %71
  %80 = bitcast %"class.WTF::StringImpl"* %78 to i8*
  %81 = zext i32 %5 to i64
  %82 = getelementptr inbounds i8, i8* %80, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i16
  br label %90

85:                                               ; preds = %71
  %86 = bitcast %"class.WTF::StringImpl"* %78 to i16*
  %87 = zext i32 %5 to i64
  %88 = getelementptr inbounds i16, i16* %86, i64 %87
  %89 = load i16, i16* %88, align 2
  br label %90

90:                                               ; preds = %79, %85
  %91 = phi i16 [ %84, %79 ], [ %89, %85 ]
  %92 = icmp eq i16 %91, 45
  br i1 %92, label %93, label %120

93:                                               ; preds = %90
  %94 = add nuw i32 %5, 1
  %95 = icmp ult i32 %94, %7
  br i1 %95, label %96, label %120

96:                                               ; preds = %93
  %97 = load atomic i32, i32* %74 monotonic, align 4
  %98 = and i32 %97, 1
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %106, label %100

100:                                              ; preds = %96
  %101 = bitcast %"class.WTF::StringImpl"* %78 to i8*
  %102 = zext i32 %94 to i64
  %103 = getelementptr inbounds i8, i8* %101, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  br label %111

106:                                              ; preds = %96
  %107 = bitcast %"class.WTF::StringImpl"* %78 to i16*
  %108 = zext i32 %94 to i64
  %109 = getelementptr inbounds i16, i16* %107, i64 %108
  %110 = load i16, i16* %109, align 2
  br label %111

111:                                              ; preds = %100, %106
  %112 = phi i16 [ %105, %100 ], [ %110, %106 ]
  %113 = icmp eq i16 %112, 62
  br i1 %113, label %114, label %120

114:                                              ; preds = %111
  %115 = add nuw i32 %5, 2
  store i32 %115, i32* %4, align 8
  %116 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %117 = load i32, i32* %116, align 8
  %118 = and i32 %117, -256
  %119 = or i32 %118, 19
  store i32 %119, i32* %116, align 8
  br label %126

120:                                              ; preds = %93, %69, %111, %90
  %121 = tail call zeroext i1 @_ZN5blink22NextCharsAreIdentifierEDsRKNS_23CSSTokenizerInputStreamE(i16 zeroext %2, %"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %70) #9
  br i1 %121, label %122, label %125

122:                                              ; preds = %120
  %123 = load i32, i32* %4, align 8
  %124 = add i32 %123, -1
  store i32 %124, i32* %4, align 8
  tail call void @_ZN5blink12CSSTokenizer21ConsumeIdentLikeTokenEv(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %1)
  br label %126

125:                                              ; preds = %120
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext %2) #9
  br label %126

126:                                              ; preds = %125, %122, %114, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer7SolidusEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"* nocapture, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  br i1 %8, label %9, label %91

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %15, label %23, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = zext i32 %5 to i64
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  br label %28

23:                                               ; preds = %9
  %24 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %25 = zext i32 %5 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  %27 = load i16, i16* %26, align 2
  br label %28

28:                                               ; preds = %23, %17
  %29 = phi i16 [ %22, %17 ], [ %27, %23 ]
  %30 = icmp eq i16 %29, 42
  br i1 %30, label %31, label %91

31:                                               ; preds = %28
  %32 = add nuw i32 %5, 1
  store i32 %32, i32* %4, align 8
  %33 = icmp ult i32 %32, %7
  br i1 %33, label %34, label %53

34:                                               ; preds = %31
  %35 = load atomic i32, i32* %12 monotonic, align 4
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %44, label %38

38:                                               ; preds = %34
  %39 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %40 = zext i32 %32 to i64
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i16
  br label %49

44:                                               ; preds = %34
  %45 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %46 = zext i32 %32 to i64
  %47 = getelementptr inbounds i16, i16* %45, i64 %46
  %48 = load i16, i16* %47, align 2
  br label %49

49:                                               ; preds = %44, %38
  %50 = phi i16 [ %43, %38 ], [ %48, %44 ]
  %51 = icmp eq i16 %50, 0
  %52 = select i1 %51, i16 -3, i16 %50
  br label %53

53:                                               ; preds = %49, %31
  %54 = phi i16 [ %52, %49 ], [ 0, %31 ]
  %55 = add i32 %5, 2
  store i32 %55, i32* %4, align 8
  %56 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %57 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  br label %58

58:                                               ; preds = %81, %53
  %59 = phi i32 [ %55, %53 ], [ %83, %81 ]
  %60 = phi i16 [ %54, %53 ], [ %82, %81 ]
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %86, label %62

62:                                               ; preds = %58
  %63 = icmp eq i16 %60, 42
  %64 = icmp ult i32 %59, %7
  br i1 %64, label %65, label %81

65:                                               ; preds = %62
  %66 = load atomic i32, i32* %12 monotonic, align 4
  %67 = and i32 %66, 1
  %68 = icmp eq i32 %67, 0
  %69 = zext i32 %59 to i64
  br i1 %68, label %74, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds i8, i8* %56, i64 %69
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i16
  br label %77

74:                                               ; preds = %65
  %75 = getelementptr inbounds i16, i16* %57, i64 %69
  %76 = load i16, i16* %75, align 2
  br label %77

77:                                               ; preds = %74, %70
  %78 = phi i16 [ %73, %70 ], [ %76, %74 ]
  %79 = icmp eq i16 %78, 0
  %80 = select i1 %79, i16 -3, i16 %78
  br label %81

81:                                               ; preds = %77, %62
  %82 = phi i16 [ %80, %77 ], [ 0, %62 ]
  %83 = add i32 %59, 1
  store i32 %83, i32* %4, align 8
  %84 = icmp eq i16 %82, 47
  %85 = and i1 %63, %84
  br i1 %85, label %86, label %58

86:                                               ; preds = %58, %81
  %87 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %88 = load i32, i32* %87, align 8
  %89 = and i32 %88, -256
  %90 = or i32 %89, 32
  store i32 %90, i32* %87, align 8
  br label %92

91:                                               ; preds = %3, %28
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext %2) #9
  br label %92

92:                                               ; preds = %91, %86
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer10AsciiDigitEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = add i32 %5, -1
  store i32 %6, i32* %4, align 8
  tail call void @_ZN5blink12CSSTokenizer19ConsumeNumericTokenEv(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %1)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer5ColonEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"* nocapture readnone, i16 zeroext) #0 align 2 {
  %4 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, -256
  %7 = or i32 %6, 20
  store i32 %7, i32* %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer9SemiColonEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"* nocapture readnone, i16 zeroext) #0 align 2 {
  %4 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, -256
  %7 = or i32 %6, 21
  store i32 %7, i32* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer8LessThanEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"* nocapture, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  br i1 %8, label %9, label %79

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %15, label %23, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = zext i32 %5 to i64
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  br label %28

23:                                               ; preds = %9
  %24 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %25 = zext i32 %5 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  %27 = load i16, i16* %26, align 2
  br label %28

28:                                               ; preds = %17, %23
  %29 = phi i16 [ %22, %17 ], [ %27, %23 ]
  %30 = icmp eq i16 %29, 33
  br i1 %30, label %31, label %79

31:                                               ; preds = %28
  %32 = add nuw i32 %5, 1
  %33 = icmp ult i32 %32, %7
  br i1 %33, label %34, label %79

34:                                               ; preds = %31
  %35 = load atomic i32, i32* %12 monotonic, align 4
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %44, label %38

38:                                               ; preds = %34
  %39 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %40 = zext i32 %32 to i64
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i16
  br label %49

44:                                               ; preds = %34
  %45 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %46 = zext i32 %32 to i64
  %47 = getelementptr inbounds i16, i16* %45, i64 %46
  %48 = load i16, i16* %47, align 2
  br label %49

49:                                               ; preds = %38, %44
  %50 = phi i16 [ %43, %38 ], [ %48, %44 ]
  %51 = icmp eq i16 %50, 45
  br i1 %51, label %52, label %79

52:                                               ; preds = %49
  %53 = add nuw i32 %5, 2
  %54 = icmp ult i32 %53, %7
  br i1 %54, label %55, label %79

55:                                               ; preds = %52
  %56 = load atomic i32, i32* %12 monotonic, align 4
  %57 = and i32 %56, 1
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %65, label %59

59:                                               ; preds = %55
  %60 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %61 = zext i32 %53 to i64
  %62 = getelementptr inbounds i8, i8* %60, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  br label %70

65:                                               ; preds = %55
  %66 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %67 = zext i32 %53 to i64
  %68 = getelementptr inbounds i16, i16* %66, i64 %67
  %69 = load i16, i16* %68, align 2
  br label %70

70:                                               ; preds = %59, %65
  %71 = phi i16 [ %64, %59 ], [ %69, %65 ]
  %72 = icmp eq i16 %71, 45
  br i1 %72, label %73, label %79

73:                                               ; preds = %70
  %74 = add nuw i32 %5, 3
  store i32 %74, i32* %4, align 8
  %75 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %76 = load i32, i32* %75, align 8
  %77 = and i32 %76, -256
  %78 = or i32 %77, 18
  store i32 %78, i32* %75, align 8
  br label %80

79:                                               ; preds = %52, %31, %3, %70, %49, %28
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext 60) #9
  br label %80

80:                                               ; preds = %79, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer12CommercialAtEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp ult i32 %6, %8
  br i1 %9, label %10, label %33

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  br i1 %16, label %24, label %18

18:                                               ; preds = %10
  %19 = bitcast %"class.WTF::StringImpl"* %17 to i8*
  %20 = zext i32 %6 to i64
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i16
  br label %29

24:                                               ; preds = %10
  %25 = bitcast %"class.WTF::StringImpl"* %17 to i16*
  %26 = zext i32 %6 to i64
  %27 = getelementptr inbounds i16, i16* %25, i64 %26
  %28 = load i16, i16* %27, align 2
  br label %29

29:                                               ; preds = %24, %18
  %30 = phi i16 [ %23, %18 ], [ %28, %24 ]
  %31 = icmp eq i16 %30, 0
  %32 = select i1 %31, i16 -3, i16 %30
  br label %33

33:                                               ; preds = %3, %29
  %34 = phi i16 [ %32, %29 ], [ 0, %3 ]
  %35 = add i32 %6, 1
  store i32 %35, i32* %5, align 8
  %36 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0
  %37 = tail call zeroext i1 @_ZN5blink22NextCharsAreIdentifierEDsRKNS_23CSSTokenizerInputStreamE(i16 zeroext %34, %"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %36) #9
  %38 = load i32, i32* %5, align 8
  %39 = add i32 %38, -1
  store i32 %39, i32* %5, align 8
  br i1 %37, label %40, label %63

40:                                               ; preds = %33
  call void @_ZN5blink12CSSTokenizer11ConsumeNameEv(%"class.WTF::StringView"* nonnull sret %4, %"class.blink::CSSTokenizer"* %1)
  %41 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %44 = bitcast i8** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  %47 = load i32, i32* %46, align 8
  %48 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %49 = load i32, i32* %48, align 8
  %50 = and i32 %49, -256
  %51 = or i32 %50, 2
  store i32 %51, i32* %48, align 8
  %52 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 1
  store i32 %47, i32* %52, align 4
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load atomic i32, i32* %53 monotonic, align 4
  %55 = shl i32 %54, 18
  %56 = and i32 %55, 262144
  %57 = and i32 %51, -262398
  %58 = or i32 %56, %57
  store i32 %58, i32* %48, align 8
  %59 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 2
  %60 = bitcast i8** %59 to i64*
  store i64 %45, i64* %60, align 8
  %61 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 3
  %62 = bitcast %union.anon* %61 to i32*
  store i32 -1, i32* %62, align 8
  br label %64

63:                                               ; preds = %33
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext 64) #9
  br label %64

64:                                               ; preds = %63, %40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer9NameStartEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = add i32 %5, -1
  store i32 %6, i32* %4, align 8
  tail call void @_ZN5blink12CSSTokenizer21ConsumeIdentLikeTokenEv(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer7LetterUEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  br i1 %8, label %9, label %76

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %15, label %23, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = zext i32 %5 to i64
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  br label %28

23:                                               ; preds = %9
  %24 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %25 = zext i32 %5 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  %27 = load i16, i16* %26, align 2
  br label %28

28:                                               ; preds = %17, %23
  %29 = phi i16 [ %22, %17 ], [ %27, %23 ]
  %30 = icmp eq i16 %29, 43
  br i1 %30, label %31, label %76

31:                                               ; preds = %28
  %32 = add nuw i32 %5, 1
  %33 = icmp ult i32 %32, %7
  br i1 %33, label %34, label %76

34:                                               ; preds = %31
  %35 = load atomic i32, i32* %12 monotonic, align 4
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %44, label %38

38:                                               ; preds = %34
  %39 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %40 = zext i32 %32 to i64
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i16
  br label %49

44:                                               ; preds = %34
  %45 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %46 = zext i32 %32 to i64
  %47 = getelementptr inbounds i16, i16* %45, i64 %46
  %48 = load i16, i16* %47, align 2
  br label %49

49:                                               ; preds = %38, %44
  %50 = phi i16 [ %43, %38 ], [ %48, %44 ]
  %51 = add i16 %50, -48
  %52 = icmp ult i16 %51, 10
  br i1 %52, label %75, label %53

53:                                               ; preds = %49
  %54 = or i16 %50, 32
  %55 = add i16 %54, -97
  %56 = icmp ult i16 %55, 6
  br i1 %56, label %75, label %57

57:                                               ; preds = %53
  %58 = load atomic i32, i32* %12 monotonic, align 4
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %67, label %61

61:                                               ; preds = %57
  %62 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %63 = zext i32 %32 to i64
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i16
  br label %72

67:                                               ; preds = %57
  %68 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %69 = zext i32 %32 to i64
  %70 = getelementptr inbounds i16, i16* %68, i64 %69
  %71 = load i16, i16* %70, align 2
  br label %72

72:                                               ; preds = %61, %67
  %73 = phi i16 [ %66, %61 ], [ %71, %67 ]
  %74 = icmp eq i16 %73, 63
  br i1 %74, label %75, label %76

75:                                               ; preds = %49, %72, %53
  store i32 %32, i32* %4, align 8
  tail call void @_ZN5blink12CSSTokenizer19ConsumeUnicodeRangeEv(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %1)
  br label %78

76:                                               ; preds = %31, %3, %72, %28
  %77 = add i32 %5, -1
  store i32 %77, i32* %4, align 8
  tail call void @_ZN5blink12CSSTokenizer21ConsumeIdentLikeTokenEv(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %1)
  br label %78

78:                                               ; preds = %76, %75
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer11LeftBracketEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5)
  store i32 25, i32* %4, align 4, !noalias !9
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1
  %7 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4, !noalias !9
  %9 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8, !noalias !9
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %19, label %12, !prof !5

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %6, i64 0, i32 0, i32 0, i32 0
  %14 = load i32*, i32** %13, align 8, !noalias !9
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds i32, i32* %14, i64 %15
  store i32 25, i32* %16, align 4, !noalias !9
  %17 = load i32, i32* %7, align 4, !noalias !9
  %18 = add i32 %17, 1
  store i32 %18, i32* %7, align 4, !noalias !9
  br label %20

19:                                               ; preds = %3
  call void @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"* %6, i32* nonnull dereferenceable(4) %4) #9, !noalias !9
  br label %20

20:                                               ; preds = %12, %19
  %21 = load i32, i32* %4, align 4, !noalias !9
  %22 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %23 = load i32, i32* %22, align 8, !alias.scope !9
  %24 = and i32 %21, 63
  %25 = and i32 %23, -256
  %26 = or i32 %24, %25
  %27 = or i32 %26, 64
  store i32 %27, i32* %22, align 8, !alias.scope !9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer14ReverseSolidusEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  br i1 %8, label %9, label %28

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %15, label %23, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = zext i32 %5 to i64
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  br label %28

23:                                               ; preds = %9
  %24 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %25 = zext i32 %5 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  %27 = load i16, i16* %26, align 2
  br label %28

28:                                               ; preds = %3, %17, %23
  %29 = phi i16 [ 0, %3 ], [ %22, %17 ], [ %27, %23 ]
  %30 = icmp eq i16 %2, 92
  br i1 %30, label %31, label %34

31:                                               ; preds = %28
  switch i16 %29, label %32 [
    i16 13, label %34
    i16 10, label %34
    i16 12, label %34
  ]

32:                                               ; preds = %31
  %33 = add i32 %5, -1
  store i32 %33, i32* %4, align 8
  tail call void @_ZN5blink12CSSTokenizer21ConsumeIdentLikeTokenEv(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %1)
  br label %35

34:                                               ; preds = %28, %31, %31, %31
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext %2) #9
  br label %35

35:                                               ; preds = %34, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer12RightBracketEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4, !noalias !12
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1
  %9 = add i32 %5, -1
  %10 = tail call dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %8, i32 %9) #9, !noalias !12
  %11 = load i32, i32* %10, align 4, !noalias !12
  %12 = icmp eq i32 %11, 25
  br i1 %12, label %13, label %16

13:                                               ; preds = %7
  %14 = load i32, i32* %4, align 4, !noalias !12
  %15 = add i32 %14, -1
  store i32 %15, i32* %4, align 4, !noalias !12
  br label %16

16:                                               ; preds = %3, %7, %13
  %17 = phi i32 [ 154, %13 ], [ 26, %7 ], [ 26, %3 ]
  %18 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %19 = load i32, i32* %18, align 8, !alias.scope !12
  %20 = and i32 %19, -256
  %21 = or i32 %20, %17
  store i32 %21, i32* %18, align 8, !alias.scope !12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer16CircumflexAccentEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"* nocapture, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  br i1 %8, label %9, label %37

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %15, label %23, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = zext i32 %5 to i64
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  br label %28

23:                                               ; preds = %9
  %24 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %25 = zext i32 %5 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  %27 = load i16, i16* %26, align 2
  br label %28

28:                                               ; preds = %23, %17
  %29 = phi i16 [ %22, %17 ], [ %27, %23 ]
  %30 = icmp eq i16 %29, 61
  br i1 %30, label %31, label %37

31:                                               ; preds = %28
  %32 = add nuw i32 %5, 1
  store i32 %32, i32* %4, align 8
  %33 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %34 = load i32, i32* %33, align 8
  %35 = and i32 %34, -256
  %36 = or i32 %35, 12
  store i32 %36, i32* %33, align 8
  br label %38

37:                                               ; preds = %3, %28
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext 94) #9
  br label %38

38:                                               ; preds = %37, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer9LeftBraceEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5)
  store i32 27, i32* %4, align 4, !noalias !15
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1
  %7 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4, !noalias !15
  %9 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8, !noalias !15
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %19, label %12, !prof !5

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %6, i64 0, i32 0, i32 0, i32 0
  %14 = load i32*, i32** %13, align 8, !noalias !15
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds i32, i32* %14, i64 %15
  store i32 27, i32* %16, align 4, !noalias !15
  %17 = load i32, i32* %7, align 4, !noalias !15
  %18 = add i32 %17, 1
  store i32 %18, i32* %7, align 4, !noalias !15
  br label %20

19:                                               ; preds = %3
  call void @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"* %6, i32* nonnull dereferenceable(4) %4) #9, !noalias !15
  br label %20

20:                                               ; preds = %12, %19
  %21 = load i32, i32* %4, align 4, !noalias !15
  %22 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %23 = load i32, i32* %22, align 8, !alias.scope !15
  %24 = and i32 %21, 63
  %25 = and i32 %23, -256
  %26 = or i32 %24, %25
  %27 = or i32 %26, 64
  store i32 %27, i32* %22, align 8, !alias.scope !15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer12VerticalLineEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"* nocapture, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  br i1 %8, label %9, label %65

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %15, label %23, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = zext i32 %5 to i64
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  br label %28

23:                                               ; preds = %9
  %24 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %25 = zext i32 %5 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  %27 = load i16, i16* %26, align 2
  br label %28

28:                                               ; preds = %23, %17
  %29 = phi i16 [ %22, %17 ], [ %27, %23 ]
  %30 = icmp eq i16 %29, 61
  br i1 %30, label %31, label %37

31:                                               ; preds = %28
  %32 = add nuw i32 %5, 1
  store i32 %32, i32* %4, align 8
  %33 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %34 = load i32, i32* %33, align 8
  %35 = and i32 %34, -256
  %36 = or i32 %35, 11
  store i32 %36, i32* %33, align 8
  br label %66

37:                                               ; preds = %28
  %38 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 1
  %43 = icmp eq i32 %42, 0
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 1
  br i1 %43, label %51, label %45

45:                                               ; preds = %37
  %46 = bitcast %"class.WTF::StringImpl"* %44 to i8*
  %47 = zext i32 %5 to i64
  %48 = getelementptr inbounds i8, i8* %46, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  br label %56

51:                                               ; preds = %37
  %52 = bitcast %"class.WTF::StringImpl"* %44 to i16*
  %53 = zext i32 %5 to i64
  %54 = getelementptr inbounds i16, i16* %52, i64 %53
  %55 = load i16, i16* %54, align 2
  br label %56

56:                                               ; preds = %51, %45
  %57 = phi i16 [ %50, %45 ], [ %55, %51 ]
  %58 = icmp eq i16 %57, 124
  br i1 %58, label %59, label %65

59:                                               ; preds = %56
  %60 = add nuw i32 %5, 1
  store i32 %60, i32* %4, align 8
  %61 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %62 = load i32, i32* %61, align 8
  %63 = and i32 %62, -256
  %64 = or i32 %63, 15
  store i32 %64, i32* %61, align 8
  br label %66

65:                                               ; preds = %3, %56
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext 124) #9
  br label %66

66:                                               ; preds = %65, %59, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer10RightBraceEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4, !noalias !18
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1
  %9 = add i32 %5, -1
  %10 = tail call dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %8, i32 %9) #9, !noalias !18
  %11 = load i32, i32* %10, align 4, !noalias !18
  %12 = icmp eq i32 %11, 27
  br i1 %12, label %13, label %16

13:                                               ; preds = %7
  %14 = load i32, i32* %4, align 4, !noalias !18
  %15 = add i32 %14, -1
  store i32 %15, i32* %4, align 4, !noalias !18
  br label %16

16:                                               ; preds = %3, %7, %13
  %17 = phi i32 [ 156, %13 ], [ 28, %7 ], [ 28, %3 ]
  %18 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %19 = load i32, i32* %18, align 8, !alias.scope !18
  %20 = and i32 %19, -256
  %21 = or i32 %20, %17
  store i32 %21, i32* %18, align 8, !alias.scope !18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer5TildeEDs(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"* nocapture, i16 zeroext) #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  br i1 %8, label %9, label %37

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %15, label %23, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = zext i32 %5 to i64
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  br label %28

23:                                               ; preds = %9
  %24 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %25 = zext i32 %5 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  %27 = load i16, i16* %26, align 2
  br label %28

28:                                               ; preds = %23, %17
  %29 = phi i16 [ %22, %17 ], [ %27, %23 ]
  %30 = icmp eq i16 %29, 61
  br i1 %30, label %31, label %37

31:                                               ; preds = %28
  %32 = add nuw i32 %5, 1
  store i32 %32, i32* %4, align 8
  %33 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %34 = load i32, i32* %33, align 8
  %35 = and i32 %34, -256
  %36 = or i32 %35, 10
  store i32 %36, i32* %33, align 8
  br label %38

37:                                               ; preds = %3, %28
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext 126) #9
  br label %38

38:                                               ; preds = %37, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizerC2ERKN3WTF6StringEj(%"class.blink::CSSTokenizer"*, %"class.WTF::String"* dereferenceable(8), i32) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0
  tail call void @_ZN5blink23CSSTokenizerInputStreamC1ERKN3WTF6StringE(%"class.blink::CSSTokenizerInputStream"* %4, %"class.WTF::String"* dereferenceable(8) %1) #9
  %5 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 1, i32 0, i32 1, i64 0
  %7 = bitcast %"class.WTF::Vector"* %5 to i8**
  store i8* %6, i8** %7, align 8
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 8, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 0
  %12 = bitcast %"class.WTF::Vector.1"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false)
  %13 = load i32, i32* %11, align 8
  %14 = add i32 %13, %2
  store i32 %14, i32* %11, align 8
  ret void
}

declare void @_ZN5blink23CSSTokenizerInputStreamC1ERKN3WTF6StringE(%"class.blink::CSSTokenizerInputStream"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer13TokenizeToEOFEv(%"class.WTF::Vector.6"* noalias sret, %"class.blink::CSSTokenizer"*) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.blink::CSSParserToken", align 8
  %4 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 1, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 -86, i64 768, i1 false)
  %5 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 1, i64 0
  %6 = bitcast %"class.WTF::Vector.6"* %0 to i8**
  store i8* %5, i8** %6, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 32, i32* %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp ult i32 %10, %12
  %14 = select i1 %13, i32 %10, i32 %12
  %15 = sub i32 %10, %14
  %16 = icmp ugt i32 %15, 98
  br i1 %16, label %17, label %26

17:                                               ; preds = %2
  %18 = udiv i32 %15, 3
  %19 = zext i32 %18 to i64
  %20 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink14CSSParserTokenEEEmm(i64 %19) #9
  %21 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %20, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink14CSSParserTokenEEEPKcv, i64 0, i64 0)) #9
  %22 = ptrtoint i8* %21 to i64
  %23 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %22, i64* %23 monotonic, align 8
  %24 = udiv i64 %20, 24
  %25 = trunc i64 %24 to i32
  store i32 %25, i32* %7, align 8
  br label %26

26:                                               ; preds = %2, %17
  %27 = bitcast %"class.blink::CSSParserToken"* %3 to i8*
  %28 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %3, i64 0, i32 0
  %29 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %3, i64 0, i32 1
  %30 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %3, i64 0, i32 2
  %31 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %3, i64 0, i32 3, i32 0
  %32 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %33 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 4
  %34 = bitcast %"class.blink::CSSTokenizer"* %1 to i8*
  %35 = bitcast %"class.blink::CSSParserToken"* %3 to i32*
  %36 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 0
  br label %37

37:                                               ; preds = %116, %26
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #9
  store i24 -5592406, i24* %28, align 8
  store i32 -1431655766, i32* %29, align 4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %30, align 8
  store double 0xFFFFFFFFFFFFFFFF, double* %31, align 8
  %38 = load i32, i32* %11, align 8, !noalias !21
  %39 = load i32, i32* %9, align 4, !noalias !21
  %40 = icmp ult i32 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %37
  %42 = add i32 %38, 1
  store i32 %42, i32* %11, align 8, !noalias !21
  br label %71

43:                                               ; preds = %37
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8, !noalias !21
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 1
  br i1 %48, label %56, label %50

50:                                               ; preds = %43
  %51 = bitcast %"class.WTF::StringImpl"* %49 to i8*
  %52 = zext i32 %38 to i64
  %53 = getelementptr inbounds i8, i8* %51, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i16
  br label %61

56:                                               ; preds = %43
  %57 = bitcast %"class.WTF::StringImpl"* %49 to i16*
  %58 = zext i32 %38 to i64
  %59 = getelementptr inbounds i16, i16* %57, i64 %58
  %60 = load i16, i16* %59, align 2
  br label %61

61:                                               ; preds = %56, %50
  %62 = phi i16 [ %55, %50 ], [ %60, %56 ]
  %63 = icmp eq i16 %62, 0
  %64 = add nuw i32 %38, 1
  store i32 %64, i32* %11, align 8, !noalias !21
  br i1 %63, label %67, label %65

65:                                               ; preds = %61
  %66 = icmp ult i16 %62, 128
  br i1 %66, label %71, label %67

67:                                               ; preds = %65, %61
  %68 = phi i16 [ %62, %65 ], [ -3, %61 ]
  %69 = load i32, i32* %33, align 4, !noalias !21
  %70 = add i32 %69, 1
  store i32 %70, i32* %33, align 4, !noalias !21
  br label %81

71:                                               ; preds = %65, %41
  %72 = phi i16 [ 0, %41 ], [ %62, %65 ]
  %73 = zext i16 %72 to i64
  %74 = getelementptr inbounds [128 x { i64, i64 }], [128 x { i64, i64 }]* @_ZN5blink12CSSTokenizer11kCodePointsE, i64 0, i64 %73, i32 0
  %75 = load i64, i64* %74, align 16
  %76 = getelementptr inbounds [128 x { i64, i64 }], [128 x { i64, i64 }]* @_ZN5blink12CSSTokenizer11kCodePointsE, i64 0, i64 %73, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = load i32, i32* %33, align 4, !noalias !21
  %79 = add i32 %78, 1
  store i32 %79, i32* %33, align 4, !noalias !21
  %80 = icmp eq i64 %75, 0
  br i1 %80, label %100, label %81

81:                                               ; preds = %71, %67
  %82 = phi i64 [ ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), %67 ], [ %75, %71 ]
  %83 = phi i64 [ 0, %67 ], [ %77, %71 ]
  %84 = phi i16 [ %68, %67 ], [ %72, %71 ]
  %85 = getelementptr inbounds i8, i8* %34, i64 %83
  %86 = bitcast i8* %85 to %"class.blink::CSSTokenizer"*
  %87 = and i64 %82, 1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %96, label %89

89:                                               ; preds = %81
  %90 = bitcast i8* %85 to i8**
  %91 = load i8*, i8** %90, align 8, !noalias !21
  %92 = add i64 %82, -1
  %93 = getelementptr i8, i8* %91, i64 %92
  %94 = bitcast i8* %93 to void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)**
  %95 = load void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)*, void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)** %94, align 8
  br label %98

96:                                               ; preds = %81
  %97 = inttoptr i64 %82 to void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)*
  br label %98

98:                                               ; preds = %96, %89
  %99 = phi void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* [ %95, %89 ], [ %97, %96 ]
  call void %99(%"class.blink::CSSParserToken"* nonnull sret %3, %"class.blink::CSSTokenizer"* %86, i16 zeroext %84) #9
  br label %101

100:                                              ; preds = %71
  call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* nonnull %3, i32 6, i16 zeroext %72) #9
  br label %101

101:                                              ; preds = %98, %100
  %102 = load i32, i32* %35, align 8
  %103 = and i32 %102, 63
  switch i32 %103, label %104 [
    i32 32, label %116
    i32 31, label %117
  ]

104:                                              ; preds = %101
  %105 = load i32, i32* %8, align 4
  %106 = load i32, i32* %7, align 8
  %107 = icmp eq i32 %105, %106
  br i1 %107, label %115, label %108, !prof !5

108:                                              ; preds = %104
  %109 = load %"class.blink::CSSParserToken"*, %"class.blink::CSSParserToken"** %36, align 8
  %110 = zext i32 %105 to i64
  %111 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %109, i64 %110
  %112 = bitcast %"class.blink::CSSParserToken"* %111 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* nonnull align 8 %27, i64 24, i1 false) #9
  %113 = load i32, i32* %8, align 4
  %114 = add i32 %113, 1
  store i32 %114, i32* %8, align 4
  br label %116

115:                                              ; preds = %104
  call void @_ZN3WTF6VectorIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS2_EEvOT_(%"class.WTF::Vector.6"* %0, %"class.blink::CSSParserToken"* nonnull dereferenceable(24) %3) #9
  br label %116

116:                                              ; preds = %115, %108, %101
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #9
  br label %37

117:                                              ; preds = %101
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer9NextTokenEv(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp ult i32 %4, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = add i32 %4, 1
  store i32 %9, i32* %3, align 8
  br label %40

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  br i1 %16, label %24, label %18

18:                                               ; preds = %10
  %19 = bitcast %"class.WTF::StringImpl"* %17 to i8*
  %20 = zext i32 %4 to i64
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i16
  br label %29

24:                                               ; preds = %10
  %25 = bitcast %"class.WTF::StringImpl"* %17 to i16*
  %26 = zext i32 %4 to i64
  %27 = getelementptr inbounds i16, i16* %25, i64 %26
  %28 = load i16, i16* %27, align 2
  br label %29

29:                                               ; preds = %24, %18
  %30 = phi i16 [ %23, %18 ], [ %28, %24 ]
  %31 = icmp eq i16 %30, 0
  %32 = add nuw i32 %4, 1
  store i32 %32, i32* %3, align 8
  br i1 %31, label %35, label %33

33:                                               ; preds = %29
  %34 = icmp ult i16 %30, 128
  br i1 %34, label %40, label %35

35:                                               ; preds = %29, %33
  %36 = phi i16 [ %30, %33 ], [ -3, %29 ]
  %37 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 4
  %38 = load i32, i32* %37, align 4
  %39 = add i32 %38, 1
  store i32 %39, i32* %37, align 4
  br label %51

40:                                               ; preds = %33, %8
  %41 = phi i16 [ 0, %8 ], [ %30, %33 ]
  %42 = zext i16 %41 to i64
  %43 = getelementptr inbounds [128 x { i64, i64 }], [128 x { i64, i64 }]* @_ZN5blink12CSSTokenizer11kCodePointsE, i64 0, i64 %42, i32 0
  %44 = load i64, i64* %43, align 16
  %45 = getelementptr inbounds [128 x { i64, i64 }], [128 x { i64, i64 }]* @_ZN5blink12CSSTokenizer11kCodePointsE, i64 0, i64 %42, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 4
  %48 = load i32, i32* %47, align 4
  %49 = add i32 %48, 1
  store i32 %49, i32* %47, align 4
  %50 = icmp eq i64 %44, 0
  br i1 %50, label %71, label %51

51:                                               ; preds = %35, %40
  %52 = phi i64 [ ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), %35 ], [ %44, %40 ]
  %53 = phi i64 [ 0, %35 ], [ %46, %40 ]
  %54 = phi i16 [ %36, %35 ], [ %41, %40 ]
  %55 = bitcast %"class.blink::CSSTokenizer"* %1 to i8*
  %56 = getelementptr inbounds i8, i8* %55, i64 %53
  %57 = bitcast i8* %56 to %"class.blink::CSSTokenizer"*
  %58 = and i64 %52, 1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %67, label %60

60:                                               ; preds = %51
  %61 = bitcast i8* %56 to i8**
  %62 = load i8*, i8** %61, align 8
  %63 = add i64 %52, -1
  %64 = getelementptr i8, i8* %62, i64 %63
  %65 = bitcast i8* %64 to void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)**
  %66 = load void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)*, void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)** %65, align 8
  br label %69

67:                                               ; preds = %51
  %68 = inttoptr i64 %52 to void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)*
  br label %69

69:                                               ; preds = %67, %60
  %70 = phi void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* [ %66, %60 ], [ %68, %67 ]
  tail call void %70(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %57, i16 zeroext %54) #9
  br label %72

71:                                               ; preds = %40
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext %41) #9
  br label %72

72:                                               ; preds = %71, %69
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK5blink12CSSTokenizer13StringRangeAtEjj(%"class.WTF::StringView"* noalias nocapture sret, %"class.blink::CSSTokenizer"* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8, !noalias !24
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  store i32 %3, i32* %7, align 8, !alias.scope !24
  %8 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  store %"class.WTF::StringImpl"* %6, %"class.WTF::StringImpl"** %8, align 8, !alias.scope !24
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4, !noalias !24
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  br i1 %12, label %19, label %14

14:                                               ; preds = %4
  %15 = bitcast %"class.WTF::StringImpl"* %13 to i8*
  %16 = zext i32 %2 to i64
  %17 = getelementptr inbounds i8, i8* %15, i64 %16
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  store i8* %17, i8** %18, align 8, !alias.scope !24
  br label %25

19:                                               ; preds = %4
  %20 = bitcast %"class.WTF::StringImpl"* %13 to i16*
  %21 = zext i32 %2 to i64
  %22 = getelementptr inbounds i16, i16* %20, i64 %21
  %23 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  %24 = bitcast i8** %23 to i16**
  store i16* %22, i16** %24, align 8, !alias.scope !24
  br label %25

25:                                               ; preds = %14, %19
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink12CSSTokenizer15BlockStackDepthEv(%"class.blink::CSSTokenizer"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer14TokenizeSingleEv(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 3
  %6 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 3, i32 0
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %11 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 4
  %12 = bitcast %"class.blink::CSSTokenizer"* %1 to i8*
  %13 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  br label %14

14:                                               ; preds = %80, %2
  %15 = load i32, i32* %4, align 4
  %16 = load i32, i32* %3, align 4
  %17 = icmp ult i32 %15, %16
  %18 = select i1 %17, i32 %15, i32 %16
  store i32 %18, i32* %5, align 8
  store i24 -5592406, i24* %6, align 8
  store i32 -1431655766, i32* %7, align 4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  %19 = icmp ult i32 %16, %15
  br i1 %19, label %22, label %20

20:                                               ; preds = %14
  %21 = add i32 %16, 1
  store i32 %21, i32* %3, align 8, !noalias !27
  br label %50

22:                                               ; preds = %14
  %23 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8, !noalias !27
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 1
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 1
  br i1 %27, label %35, label %29

29:                                               ; preds = %22
  %30 = bitcast %"class.WTF::StringImpl"* %28 to i8*
  %31 = zext i32 %16 to i64
  %32 = getelementptr inbounds i8, i8* %30, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  br label %40

35:                                               ; preds = %22
  %36 = bitcast %"class.WTF::StringImpl"* %28 to i16*
  %37 = zext i32 %16 to i64
  %38 = getelementptr inbounds i16, i16* %36, i64 %37
  %39 = load i16, i16* %38, align 2
  br label %40

40:                                               ; preds = %35, %29
  %41 = phi i16 [ %34, %29 ], [ %39, %35 ]
  %42 = icmp eq i16 %41, 0
  %43 = add nuw i32 %16, 1
  store i32 %43, i32* %3, align 8, !noalias !27
  br i1 %42, label %46, label %44

44:                                               ; preds = %40
  %45 = icmp ult i16 %41, 128
  br i1 %45, label %50, label %46

46:                                               ; preds = %44, %40
  %47 = phi i16 [ %41, %44 ], [ -3, %40 ]
  %48 = load i32, i32* %11, align 4, !noalias !27
  %49 = add i32 %48, 1
  store i32 %49, i32* %11, align 4, !noalias !27
  br label %60

50:                                               ; preds = %44, %20
  %51 = phi i16 [ 0, %20 ], [ %41, %44 ]
  %52 = zext i16 %51 to i64
  %53 = getelementptr inbounds [128 x { i64, i64 }], [128 x { i64, i64 }]* @_ZN5blink12CSSTokenizer11kCodePointsE, i64 0, i64 %52, i32 0
  %54 = load i64, i64* %53, align 16
  %55 = getelementptr inbounds [128 x { i64, i64 }], [128 x { i64, i64 }]* @_ZN5blink12CSSTokenizer11kCodePointsE, i64 0, i64 %52, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = load i32, i32* %11, align 4, !noalias !27
  %58 = add i32 %57, 1
  store i32 %58, i32* %11, align 4, !noalias !27
  %59 = icmp eq i64 %54, 0
  br i1 %59, label %79, label %60

60:                                               ; preds = %50, %46
  %61 = phi i64 [ ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), %46 ], [ %54, %50 ]
  %62 = phi i64 [ 0, %46 ], [ %56, %50 ]
  %63 = phi i16 [ %47, %46 ], [ %51, %50 ]
  %64 = getelementptr inbounds i8, i8* %12, i64 %62
  %65 = bitcast i8* %64 to %"class.blink::CSSTokenizer"*
  %66 = and i64 %61, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %75, label %68

68:                                               ; preds = %60
  %69 = bitcast i8* %64 to i8**
  %70 = load i8*, i8** %69, align 8, !noalias !27
  %71 = add i64 %61, -1
  %72 = getelementptr i8, i8* %70, i64 %71
  %73 = bitcast i8* %72 to void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)**
  %74 = load void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)*, void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)** %73, align 8
  br label %77

75:                                               ; preds = %60
  %76 = inttoptr i64 %61 to void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)*
  br label %77

77:                                               ; preds = %75, %68
  %78 = phi void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* [ %74, %68 ], [ %76, %75 ]
  tail call void %78(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %65, i16 zeroext %63) #9
  br label %80

79:                                               ; preds = %50
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext %51) #9
  br label %80

80:                                               ; preds = %77, %79
  %81 = load i32, i32* %13, align 8
  %82 = and i32 %81, 63
  %83 = icmp eq i32 %82, 32
  br i1 %83, label %14, label %84

84:                                               ; preds = %80
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer26TokenizeSingleWithCommentsEv(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = load i32, i32* %3, align 4
  %7 = icmp ult i32 %5, %6
  %8 = select i1 %7, i32 %5, i32 %6
  %9 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 3
  store i32 %8, i32* %9, align 8
  %10 = icmp ult i32 %6, %5
  br i1 %10, label %13, label %11

11:                                               ; preds = %2
  %12 = add i32 %6, 1
  store i32 %12, i32* %3, align 8, !noalias !30
  br label %43

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8, !noalias !30
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 1
  br i1 %19, label %27, label %21

21:                                               ; preds = %13
  %22 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  %23 = zext i32 %6 to i64
  %24 = getelementptr inbounds i8, i8* %22, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  br label %32

27:                                               ; preds = %13
  %28 = bitcast %"class.WTF::StringImpl"* %20 to i16*
  %29 = zext i32 %6 to i64
  %30 = getelementptr inbounds i16, i16* %28, i64 %29
  %31 = load i16, i16* %30, align 2
  br label %32

32:                                               ; preds = %27, %21
  %33 = phi i16 [ %26, %21 ], [ %31, %27 ]
  %34 = icmp eq i16 %33, 0
  %35 = add nuw i32 %6, 1
  store i32 %35, i32* %3, align 8, !noalias !30
  br i1 %34, label %38, label %36

36:                                               ; preds = %32
  %37 = icmp ult i16 %33, 128
  br i1 %37, label %43, label %38

38:                                               ; preds = %36, %32
  %39 = phi i16 [ %33, %36 ], [ -3, %32 ]
  %40 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 4
  %41 = load i32, i32* %40, align 4, !noalias !30
  %42 = add i32 %41, 1
  store i32 %42, i32* %40, align 4, !noalias !30
  br label %54

43:                                               ; preds = %36, %11
  %44 = phi i16 [ 0, %11 ], [ %33, %36 ]
  %45 = zext i16 %44 to i64
  %46 = getelementptr inbounds [128 x { i64, i64 }], [128 x { i64, i64 }]* @_ZN5blink12CSSTokenizer11kCodePointsE, i64 0, i64 %45, i32 0
  %47 = load i64, i64* %46, align 16
  %48 = getelementptr inbounds [128 x { i64, i64 }], [128 x { i64, i64 }]* @_ZN5blink12CSSTokenizer11kCodePointsE, i64 0, i64 %45, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 4
  %51 = load i32, i32* %50, align 4, !noalias !30
  %52 = add i32 %51, 1
  store i32 %52, i32* %50, align 4, !noalias !30
  %53 = icmp eq i64 %47, 0
  br i1 %53, label %74, label %54

54:                                               ; preds = %43, %38
  %55 = phi i64 [ ptrtoint (void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* @_ZN5blink12CSSTokenizer9NameStartEDs to i64), %38 ], [ %47, %43 ]
  %56 = phi i64 [ 0, %38 ], [ %49, %43 ]
  %57 = phi i16 [ %39, %38 ], [ %44, %43 ]
  %58 = bitcast %"class.blink::CSSTokenizer"* %1 to i8*
  %59 = getelementptr inbounds i8, i8* %58, i64 %56
  %60 = bitcast i8* %59 to %"class.blink::CSSTokenizer"*
  %61 = and i64 %55, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %70, label %63

63:                                               ; preds = %54
  %64 = bitcast i8* %59 to i8**
  %65 = load i8*, i8** %64, align 8, !noalias !30
  %66 = add i64 %55, -1
  %67 = getelementptr i8, i8* %65, i64 %66
  %68 = bitcast i8* %67 to void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)**
  %69 = load void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)*, void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)** %68, align 8
  br label %72

70:                                               ; preds = %54
  %71 = inttoptr i64 %55 to void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)*
  br label %72

72:                                               ; preds = %70, %63
  %73 = phi void (%"class.blink::CSSParserToken"*, %"class.blink::CSSTokenizer"*, i16)* [ %69, %63 ], [ %71, %70 ]
  tail call void %73(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %60, i16 zeroext %57) #9
  br label %75

74:                                               ; preds = %43
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"* %0, i32 6, i16 zeroext %44) #9
  br label %75

75:                                               ; preds = %72, %74
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN5blink12CSSTokenizer10TokenCountEv(%"class.blink::CSSTokenizer"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer9ReconsumeEDs(%"class.blink::CSSTokenizer"* nocapture, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = add i32 %4, -1
  store i32 %5, i32* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i16 @_ZN5blink12CSSTokenizer7ConsumeEv(%"class.blink::CSSTokenizer"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp ult i32 %3, %5
  br i1 %6, label %7, label %30

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 2, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 1
  br i1 %13, label %21, label %15

15:                                               ; preds = %7
  %16 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %17 = zext i32 %3 to i64
  %18 = getelementptr inbounds i8, i8* %16, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  br label %26

21:                                               ; preds = %7
  %22 = bitcast %"class.WTF::StringImpl"* %14 to i16*
  %23 = zext i32 %3 to i64
  %24 = getelementptr inbounds i16, i16* %22, i64 %23
  %25 = load i16, i16* %24, align 2
  br label %26

26:                                               ; preds = %21, %15
  %27 = phi i16 [ %20, %15 ], [ %25, %21 ]
  %28 = icmp eq i16 %27, 0
  %29 = select i1 %28, i16 -3, i16 %27
  br label %30

30:                                               ; preds = %1, %26
  %31 = phi i16 [ %29, %26 ], [ 0, %1 ]
  %32 = add i32 %3, 1
  store i32 %32, i32* %2, align 8
  ret i16 %31
}

declare void @_ZN5blink23CSSTokenizerInputStream25AdvanceUntilNonWhitespaceEv(%"class.blink::CSSTokenizerInputStream"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer10BlockStartENS_18CSSParserTokenTypeE(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca i32, align 4
  store i32 %2, i32* %4, align 4
  %5 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %7, %9
  br i1 %10, label %18, label %11, !prof !5

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = zext i32 %7 to i64
  %15 = getelementptr inbounds i32, i32* %13, i64 %14
  store i32 %2, i32* %15, align 4
  %16 = load i32, i32* %6, align 4
  %17 = add i32 %16, 1
  store i32 %17, i32* %6, align 4
  br label %19

18:                                               ; preds = %3
  call void @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"* %5, i32* nonnull dereferenceable(4) %4) #9
  br label %19

19:                                               ; preds = %11, %18
  %20 = load i32, i32* %4, align 4
  %21 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %20, 63
  %24 = and i32 %22, -256
  %25 = or i32 %23, %24
  %26 = or i32 %25, 64
  store i32 %26, i32* %21, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer10BlockStartENS_18CSSParserTokenTypeES1_N3WTF10StringViewE(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, i32, i32, %"class.WTF::StringView"* nocapture readonly byval(%"class.WTF::StringView") align 8) local_unnamed_addr #1 align 2 {
  %6 = alloca i32, align 4
  store i32 %2, i32* %6, align 4
  %7 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %20, label %13, !prof !5

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %7, i64 0, i32 0, i32 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = zext i32 %9 to i64
  %17 = getelementptr inbounds i32, i32* %15, i64 %16
  store i32 %2, i32* %17, align 4
  %18 = load i32, i32* %8, align 4
  %19 = add i32 %18, 1
  store i32 %19, i32* %8, align 4
  br label %21

20:                                               ; preds = %5
  call void @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"* %7, i32* nonnull dereferenceable(4) %6) #9
  br label %21

21:                                               ; preds = %13, %20
  %22 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  %23 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %24 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %25 = bitcast i8** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = and i32 %3, 63
  %32 = and i32 %30, -262400
  %33 = or i32 %31, %32
  %34 = or i32 %33, 64
  %35 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 1
  store i32 %28, i32* %35, align 4
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = shl i32 %37, 18
  %39 = and i32 %38, 262144
  %40 = or i32 %39, %34
  store i32 %40, i32* %29, align 8
  %41 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 2
  %42 = bitcast i8** %41 to i64*
  store i64 %26, i64* %42, align 8
  %43 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 3
  %44 = bitcast %union.anon* %43 to i32*
  store i32 -1, i32* %44, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer8BlockEndENS_18CSSParserTokenTypeES1_(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %23, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1
  %10 = add i32 %6, -1
  %11 = tail call dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %9, i32 %10) #9
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, %3
  br i1 %13, label %14, label %23

14:                                               ; preds = %8
  %15 = load i32, i32* %5, align 4
  %16 = add i32 %15, -1
  store i32 %16, i32* %5, align 4
  %17 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %18 = load i32, i32* %17, align 8
  %19 = and i32 %2, 63
  %20 = and i32 %18, -256
  %21 = or i32 %19, %20
  %22 = or i32 %21, 128
  br label %29

23:                                               ; preds = %8, %4
  %24 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = and i32 %2, 63
  %27 = and i32 %25, -256
  %28 = or i32 %27, %26
  br label %29

29:                                               ; preds = %23, %14
  %30 = phi i32* [ %24, %23 ], [ %17, %14 ]
  %31 = phi i32 [ %28, %23 ], [ %22, %14 ]
  store i32 %31, i32* %30, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12CSSTokenizer18NextCharsAreNumberEDs(%"class.blink::CSSTokenizer"* nocapture readonly, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp ult i32 %4, %6
  br i1 %7, label %8, label %27

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 2, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 1
  br i1 %14, label %22, label %16

16:                                               ; preds = %8
  %17 = bitcast %"class.WTF::StringImpl"* %15 to i8*
  %18 = zext i32 %4 to i64
  %19 = getelementptr inbounds i8, i8* %17, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i16
  br label %27

22:                                               ; preds = %8
  %23 = bitcast %"class.WTF::StringImpl"* %15 to i16*
  %24 = zext i32 %4 to i64
  %25 = getelementptr inbounds i16, i16* %23, i64 %24
  %26 = load i16, i16* %25, align 2
  br label %27

27:                                               ; preds = %2, %16, %22
  %28 = phi i16 [ 0, %2 ], [ %21, %16 ], [ %26, %22 ]
  %29 = add i16 %1, -48
  %30 = icmp ult i16 %29, 10
  br i1 %30, label %66, label %31

31:                                               ; preds = %27
  switch i16 %1, label %66 [
    i16 43, label %32
    i16 45, label %32
    i16 46, label %63
  ]

32:                                               ; preds = %31, %31
  %33 = add i16 %28, -48
  %34 = icmp ult i16 %33, 10
  br i1 %34, label %66, label %35

35:                                               ; preds = %32
  %36 = icmp eq i16 %28, 46
  br i1 %36, label %37, label %66

37:                                               ; preds = %35
  %38 = add i32 %4, 1
  %39 = icmp ult i32 %38, %6
  br i1 %39, label %40, label %59

40:                                               ; preds = %37
  %41 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 2, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 1
  br i1 %46, label %54, label %48

48:                                               ; preds = %40
  %49 = bitcast %"class.WTF::StringImpl"* %47 to i8*
  %50 = zext i32 %38 to i64
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  br label %59

54:                                               ; preds = %40
  %55 = bitcast %"class.WTF::StringImpl"* %47 to i16*
  %56 = zext i32 %38 to i64
  %57 = getelementptr inbounds i16, i16* %55, i64 %56
  %58 = load i16, i16* %57, align 2
  br label %59

59:                                               ; preds = %37, %48, %54
  %60 = phi i16 [ 0, %37 ], [ %53, %48 ], [ %58, %54 ]
  %61 = add i16 %60, -48
  %62 = icmp ult i16 %61, 10
  br label %66

63:                                               ; preds = %31
  %64 = add i16 %28, -48
  %65 = icmp ult i16 %64, 10
  br label %66

66:                                               ; preds = %31, %32, %59, %35, %27, %63
  %67 = phi i1 [ %65, %63 ], [ true, %27 ], [ true, %32 ], [ false, %35 ], [ %62, %59 ], [ false, %31 ]
  ret i1 %67
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer19ConsumeNumericTokenEv(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"*) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 0
  store i24 -5592406, i24* %4, align 8
  %5 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 1
  store i32 -1431655766, i32* %5, align 4
  %6 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 2
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 3, i32 0
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  tail call void @_ZN5blink12CSSTokenizer13ConsumeNumberEv(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %1)
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp ult i32 %9, %11
  br i1 %12, label %13, label %36

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 1
  br i1 %19, label %27, label %21

21:                                               ; preds = %13
  %22 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  %23 = zext i32 %9 to i64
  %24 = getelementptr inbounds i8, i8* %22, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  br label %32

27:                                               ; preds = %13
  %28 = bitcast %"class.WTF::StringImpl"* %20 to i16*
  %29 = zext i32 %9 to i64
  %30 = getelementptr inbounds i16, i16* %28, i64 %29
  %31 = load i16, i16* %30, align 2
  br label %32

32:                                               ; preds = %27, %21
  %33 = phi i16 [ %26, %21 ], [ %31, %27 ]
  %34 = icmp eq i16 %33, 0
  %35 = select i1 %34, i16 -3, i16 %33
  br label %36

36:                                               ; preds = %2, %32
  %37 = phi i16 [ %35, %32 ], [ 0, %2 ]
  %38 = add i32 %9, 1
  store i32 %38, i32* %8, align 8
  %39 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0
  %40 = tail call zeroext i1 @_ZN5blink22NextCharsAreIdentifierEDsRKNS_23CSSTokenizerInputStreamE(i16 zeroext %37, %"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %39) #9
  %41 = load i32, i32* %8, align 8
  %42 = add i32 %41, -1
  store i32 %42, i32* %8, align 8
  br i1 %40, label %43, label %44

43:                                               ; preds = %36
  call void @_ZN5blink12CSSTokenizer11ConsumeNameEv(%"class.WTF::StringView"* nonnull sret %3, %"class.blink::CSSTokenizer"* %1)
  tail call void @_ZN5blink14CSSParserToken26ConvertToDimensionWithUnitEN3WTF10StringViewE(%"class.blink::CSSParserToken"* %0, %"class.WTF::StringView"* nonnull byval(%"class.WTF::StringView") align 8 %3) #9
  br label %70

44:                                               ; preds = %36
  %45 = load i32, i32* %10, align 4
  %46 = icmp ult i32 %42, %45
  br i1 %46, label %47, label %70

47:                                               ; preds = %44
  %48 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %48, align 8
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 1
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 1
  br i1 %53, label %61, label %55

55:                                               ; preds = %47
  %56 = bitcast %"class.WTF::StringImpl"* %54 to i8*
  %57 = zext i32 %42 to i64
  %58 = getelementptr inbounds i8, i8* %56, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i16
  br label %66

61:                                               ; preds = %47
  %62 = bitcast %"class.WTF::StringImpl"* %54 to i16*
  %63 = zext i32 %42 to i64
  %64 = getelementptr inbounds i16, i16* %62, i64 %63
  %65 = load i16, i16* %64, align 2
  br label %66

66:                                               ; preds = %61, %55
  %67 = phi i16 [ %60, %55 ], [ %65, %61 ]
  %68 = icmp eq i16 %67, 37
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  store i32 %41, i32* %8, align 8
  tail call void @_ZN5blink14CSSParserToken19ConvertToPercentageEv(%"class.blink::CSSParserToken"* %0) #9
  br label %70

70:                                               ; preds = %44, %66, %69, %43
  ret void
}

declare void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEDs(%"class.blink::CSSParserToken"*, i32, i16 zeroext) unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12CSSTokenizer13ConsumeIfNextEDs(%"class.blink::CSSTokenizer"* nocapture, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp ult i32 %4, %6
  br i1 %7, label %8, label %27

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 2, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 1
  br i1 %14, label %22, label %16

16:                                               ; preds = %8
  %17 = bitcast %"class.WTF::StringImpl"* %15 to i8*
  %18 = zext i32 %4 to i64
  %19 = getelementptr inbounds i8, i8* %17, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i16
  br label %27

22:                                               ; preds = %8
  %23 = bitcast %"class.WTF::StringImpl"* %15 to i16*
  %24 = zext i32 %4 to i64
  %25 = getelementptr inbounds i16, i16* %23, i64 %24
  %26 = load i16, i16* %25, align 2
  br label %27

27:                                               ; preds = %2, %16, %22
  %28 = phi i16 [ 0, %2 ], [ %21, %16 ], [ %26, %22 ]
  %29 = icmp eq i16 %28, %1
  br i1 %29, label %30, label %32

30:                                               ; preds = %27
  %31 = add i32 %4, 1
  store i32 %31, i32* %3, align 8
  br label %32

32:                                               ; preds = %27, %30
  %33 = phi i1 [ true, %30 ], [ false, %27 ]
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12CSSTokenizer22NextCharsAreIdentifierEDs(%"class.blink::CSSTokenizer"*, i16 zeroext) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0
  %4 = tail call zeroext i1 @_ZN5blink22NextCharsAreIdentifierEDsRKNS_23CSSTokenizerInputStreamE(i16 zeroext %1, %"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %3) #9
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer21ConsumeIdentLikeTokenEv(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*) local_unnamed_addr #1 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  %9 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  call void @_ZN5blink12CSSTokenizer11ConsumeNameEv(%"class.WTF::StringView"* nonnull sret %4, %"class.blink::CSSTokenizer"* %1)
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %11, %13
  br i1 %14, label %15, label %178

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 1
  br i1 %21, label %29, label %23

23:                                               ; preds = %15
  %24 = bitcast %"class.WTF::StringImpl"* %22 to i8*
  %25 = zext i32 %11 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i16
  br label %34

29:                                               ; preds = %15
  %30 = bitcast %"class.WTF::StringImpl"* %22 to i16*
  %31 = zext i32 %11 to i64
  %32 = getelementptr inbounds i16, i16* %30, i64 %31
  %33 = load i16, i16* %32, align 2
  br label %34

34:                                               ; preds = %29, %23
  %35 = phi i16 [ %28, %23 ], [ %33, %29 ]
  %36 = icmp eq i16 %35, 40
  br i1 %36, label %37, label %178

37:                                               ; preds = %34
  %38 = add nuw i32 %11, 1
  store i32 %38, i32* %10, align 8
  %39 = load i32, i32* %8, align 8
  %40 = icmp eq i32 %39, 3
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  br i1 %40, label %45, label %42

42:                                               ; preds = %37
  %43 = bitcast i8** %7 to i64*
  %44 = load i64, i64* %43, align 8
  br label %146

45:                                               ; preds = %37
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 1
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %71, label %50

50:                                               ; preds = %45
  %51 = load i8*, i8** %7, align 8
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i64
  %54 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 117), align 1
  %58 = sext i8 %57 to i32
  %59 = icmp eq i32 %56, %58
  %60 = ptrtoint i8* %51 to i64
  br i1 %59, label %61, label %146

61:                                               ; preds = %50
  %62 = getelementptr inbounds i8, i8* %51, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i64
  %65 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 114), align 2
  %69 = sext i8 %68 to i32
  %70 = icmp eq i32 %67, %69
  br i1 %70, label %109, label %146

71:                                               ; preds = %45
  %72 = bitcast i8** %7 to i16**
  %73 = load i16*, i16** %72, align 8
  %74 = load i16, i16* %73, align 2
  %75 = add i16 %74, -65
  %76 = icmp ult i16 %75, 26
  %77 = zext i1 %76 to i16
  %78 = shl nuw nsw i16 %77, 5
  %79 = or i16 %78, %74
  %80 = zext i16 %79 to i32
  %81 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 117), align 1
  %82 = sext i8 %81 to i32
  %83 = icmp eq i32 %80, %82
  %84 = ptrtoint i16* %73 to i64
  br i1 %83, label %85, label %146

85:                                               ; preds = %71
  %86 = getelementptr inbounds i16, i16* %73, i64 1
  %87 = load i16, i16* %86, align 2
  %88 = add i16 %87, -65
  %89 = icmp ult i16 %88, 26
  %90 = zext i1 %89 to i16
  %91 = shl nuw nsw i16 %90, 5
  %92 = or i16 %91, %87
  %93 = zext i16 %92 to i32
  %94 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 114), align 2
  %95 = sext i8 %94 to i32
  %96 = icmp eq i32 %93, %95
  br i1 %96, label %97, label %146

97:                                               ; preds = %85
  %98 = getelementptr inbounds i16, i16* %73, i64 2
  %99 = load i16, i16* %98, align 2
  %100 = add i16 %99, -65
  %101 = icmp ult i16 %100, 26
  %102 = zext i1 %101 to i16
  %103 = shl nuw nsw i16 %102, 5
  %104 = or i16 %103, %99
  %105 = zext i16 %104 to i32
  %106 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 108), align 4
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %105, %107
  br i1 %108, label %119, label %146

109:                                              ; preds = %61
  %110 = getelementptr inbounds i8, i8* %51, i64 2
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 108), align 4
  %117 = sext i8 %116 to i32
  %118 = icmp eq i32 %115, %117
  br i1 %118, label %119, label %146

119:                                              ; preds = %97, %109
  %120 = phi i64 [ %84, %97 ], [ %60, %109 ]
  %121 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0
  tail call void @_ZN5blink23CSSTokenizerInputStream25AdvanceUntilNonWhitespaceEv(%"class.blink::CSSTokenizerInputStream"* %121) #9
  %122 = load i32, i32* %10, align 8
  %123 = load i32, i32* %12, align 4
  %124 = icmp ult i32 %122, %123
  br i1 %124, label %125, label %145

125:                                              ; preds = %119
  %126 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %128 = load atomic i32, i32* %127 monotonic, align 4
  %129 = and i32 %128, 1
  %130 = icmp eq i32 %129, 0
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 1
  br i1 %130, label %138, label %132

132:                                              ; preds = %125
  %133 = bitcast %"class.WTF::StringImpl"* %131 to i8*
  %134 = zext i32 %122 to i64
  %135 = getelementptr inbounds i8, i8* %133, i64 %134
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i16
  br label %143

138:                                              ; preds = %125
  %139 = bitcast %"class.WTF::StringImpl"* %131 to i16*
  %140 = zext i32 %122 to i64
  %141 = getelementptr inbounds i16, i16* %139, i64 %140
  %142 = load i16, i16* %141, align 2
  br label %143

143:                                              ; preds = %132, %138
  %144 = phi i16 [ %137, %132 ], [ %142, %138 ]
  switch i16 %144, label %145 [
    i16 34, label %146
    i16 39, label %146
  ]

145:                                              ; preds = %119, %143
  tail call void @_ZN5blink12CSSTokenizer15ConsumeUrlTokenEv(%"class.blink::CSSParserToken"* sret %0, %"class.blink::CSSTokenizer"* %1)
  br label %196

146:                                              ; preds = %42, %61, %50, %85, %71, %97, %143, %143, %109
  %147 = phi i64 [ %44, %42 ], [ %60, %61 ], [ %60, %50 ], [ %84, %85 ], [ %84, %71 ], [ %84, %97 ], [ %120, %143 ], [ %120, %143 ], [ %60, %109 ]
  %148 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %148)
  store i32 23, i32* %3, align 4, !noalias !33
  %149 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1
  %150 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %151 = load i32, i32* %150, align 4, !noalias !33
  %152 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %153 = load i32, i32* %152, align 8, !noalias !33
  %154 = icmp eq i32 %151, %153
  br i1 %154, label %162, label %155, !prof !5

155:                                              ; preds = %146
  %156 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %149, i64 0, i32 0, i32 0, i32 0
  %157 = load i32*, i32** %156, align 8, !noalias !33
  %158 = zext i32 %151 to i64
  %159 = getelementptr inbounds i32, i32* %157, i64 %158
  store i32 23, i32* %159, align 4, !noalias !33
  %160 = load i32, i32* %150, align 4, !noalias !33
  %161 = add i32 %160, 1
  store i32 %161, i32* %150, align 4, !noalias !33
  br label %163

162:                                              ; preds = %146
  call void @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"* %149, i32* nonnull dereferenceable(4) %3) #9, !noalias !33
  br label %163

163:                                              ; preds = %155, %162
  %164 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %165 = load i32, i32* %164, align 8, !alias.scope !33
  %166 = and i32 %165, -262400
  %167 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 1
  store i32 %39, i32* %167, align 4, !alias.scope !33
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %169 = load atomic i32, i32* %168 monotonic, align 4, !noalias !33
  %170 = shl i32 %169, 18
  %171 = and i32 %170, 262144
  %172 = or i32 %166, %171
  %173 = or i32 %172, 65
  store i32 %173, i32* %164, align 8, !alias.scope !33
  %174 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 2
  %175 = bitcast i8** %174 to i64*
  store i64 %147, i64* %175, align 8, !alias.scope !33
  %176 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 3
  %177 = bitcast %union.anon* %176 to i32*
  store i32 -1, i32* %177, align 8, !alias.scope !33
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %148)
  br label %196

178:                                              ; preds = %2, %34
  %179 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %180 = bitcast i8** %7 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = load i32, i32* %8, align 8
  %183 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %184 = load i32, i32* %183, align 8
  %185 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 1
  store i32 %182, i32* %185, align 4
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %179, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %187 = load atomic i32, i32* %186 monotonic, align 4
  %188 = shl i32 %187, 18
  %189 = and i32 %188, 262144
  %190 = and i32 %184, -262400
  %191 = or i32 %189, %190
  store i32 %191, i32* %183, align 8
  %192 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 2
  %193 = bitcast i8** %192 to i64*
  store i64 %181, i64* %193, align 8
  %194 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 3
  %195 = bitcast %union.anon* %194 to i32*
  store i32 -1, i32* %195, align 8
  br label %196

196:                                              ; preds = %145, %178, %163
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer27ConsumeUntilCommentEndFoundEv(%"class.blink::CSSTokenizer"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp ult i32 %3, %5
  br i1 %6, label %7, label %30

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 2, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 1
  br i1 %13, label %21, label %15

15:                                               ; preds = %7
  %16 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %17 = zext i32 %3 to i64
  %18 = getelementptr inbounds i8, i8* %16, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  br label %26

21:                                               ; preds = %7
  %22 = bitcast %"class.WTF::StringImpl"* %14 to i16*
  %23 = zext i32 %3 to i64
  %24 = getelementptr inbounds i16, i16* %22, i64 %23
  %25 = load i16, i16* %24, align 2
  br label %26

26:                                               ; preds = %21, %15
  %27 = phi i16 [ %20, %15 ], [ %25, %21 ]
  %28 = icmp eq i16 %27, 0
  %29 = select i1 %28, i16 -3, i16 %27
  br label %30

30:                                               ; preds = %1, %26
  %31 = phi i16 [ %29, %26 ], [ 0, %1 ]
  %32 = add i32 %3, 1
  store i32 %32, i32* %2, align 8
  %33 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 2, i32 0
  br label %34

34:                                               ; preds = %63, %30
  %35 = phi i32 [ %32, %30 ], [ %65, %63 ]
  %36 = phi i16 [ %31, %30 ], [ %64, %63 ]
  %37 = icmp eq i16 %36, 0
  br i1 %37, label %68, label %38

38:                                               ; preds = %34
  %39 = icmp eq i16 %36, 42
  %40 = icmp ult i32 %35, %5
  br i1 %40, label %41, label %63

41:                                               ; preds = %38
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 1
  br i1 %46, label %54, label %48

48:                                               ; preds = %41
  %49 = bitcast %"class.WTF::StringImpl"* %47 to i8*
  %50 = zext i32 %35 to i64
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  br label %59

54:                                               ; preds = %41
  %55 = bitcast %"class.WTF::StringImpl"* %47 to i16*
  %56 = zext i32 %35 to i64
  %57 = getelementptr inbounds i16, i16* %55, i64 %56
  %58 = load i16, i16* %57, align 2
  br label %59

59:                                               ; preds = %54, %48
  %60 = phi i16 [ %53, %48 ], [ %58, %54 ]
  %61 = icmp eq i16 %60, 0
  %62 = select i1 %61, i16 -3, i16 %60
  br label %63

63:                                               ; preds = %38, %59
  %64 = phi i16 [ %62, %59 ], [ 0, %38 ]
  %65 = add i32 %35, 1
  store i32 %65, i32* %2, align 8
  %66 = icmp eq i16 %64, 47
  %67 = and i1 %39, %66
  br i1 %67, label %68, label %34

68:                                               ; preds = %63, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12CSSTokenizer22NextCharsAreIdentifierEv(%"class.blink::CSSTokenizer"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp ult i32 %3, %5
  br i1 %6, label %7, label %30

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 2, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 1
  br i1 %13, label %21, label %15

15:                                               ; preds = %7
  %16 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %17 = zext i32 %3 to i64
  %18 = getelementptr inbounds i8, i8* %16, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  br label %26

21:                                               ; preds = %7
  %22 = bitcast %"class.WTF::StringImpl"* %14 to i16*
  %23 = zext i32 %3 to i64
  %24 = getelementptr inbounds i16, i16* %22, i64 %23
  %25 = load i16, i16* %24, align 2
  br label %26

26:                                               ; preds = %21, %15
  %27 = phi i16 [ %20, %15 ], [ %25, %21 ]
  %28 = icmp eq i16 %27, 0
  %29 = select i1 %28, i16 -3, i16 %27
  br label %30

30:                                               ; preds = %1, %26
  %31 = phi i16 [ %29, %26 ], [ 0, %1 ]
  %32 = add i32 %3, 1
  store i32 %32, i32* %2, align 8
  %33 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0
  %34 = tail call zeroext i1 @_ZN5blink22NextCharsAreIdentifierEDsRKNS_23CSSTokenizerInputStreamE(i16 zeroext %31, %"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %33) #9
  %35 = load i32, i32* %2, align 8
  %36 = add i32 %35, -1
  store i32 %36, i32* %2, align 8
  ret i1 %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer11ConsumeNameEv(%"class.WTF::StringView"* noalias nocapture sret, %"class.blink::CSSTokenizer"*) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  br label %9

9:                                                ; preds = %74, %2
  %10 = phi i32 [ 0, %2 ], [ %75, %74 ]
  %11 = add i32 %5, %10
  %12 = icmp ult i32 %11, %7
  br i1 %12, label %13, label %31

13:                                               ; preds = %9
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 1
  br i1 %18, label %26, label %20

20:                                               ; preds = %13
  %21 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  %22 = zext i32 %11 to i64
  %23 = getelementptr inbounds i8, i8* %21, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i16
  br label %31

26:                                               ; preds = %13
  %27 = bitcast %"class.WTF::StringImpl"* %19 to i16*
  %28 = zext i32 %11 to i64
  %29 = getelementptr inbounds i16, i16* %27, i64 %28
  %30 = load i16, i16* %29, align 2
  br label %31

31:                                               ; preds = %9, %20, %26
  %32 = phi i16 [ 0, %9 ], [ %25, %20 ], [ %30, %26 ]
  %33 = or i16 %32, 32
  %34 = add i16 %33, -97
  %35 = icmp ult i16 %34, 26
  %36 = icmp eq i16 %32, 95
  %37 = or i1 %36, %35
  %38 = icmp ugt i16 %32, 127
  %39 = or i1 %38, %37
  br i1 %39, label %74, label %40

40:                                               ; preds = %31
  %41 = add nsw i16 %32, -48
  %42 = icmp ult i16 %41, 10
  %43 = icmp eq i16 %32, 45
  %44 = or i1 %43, %42
  br i1 %44, label %74, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0
  switch i16 %32, label %52 [
    i16 0, label %47
    i16 92, label %76
  ]

47:                                               ; preds = %45
  %48 = icmp ult i32 %7, %5
  %49 = select i1 %48, i32 %7, i32 %5
  %50 = add i32 %49, %10
  %51 = icmp ult i32 %50, %7
  br i1 %51, label %76, label %52

52:                                               ; preds = %45, %47
  %53 = icmp ult i32 %7, %5
  %54 = select i1 %53, i32 %7, i32 %5
  store i32 %11, i32* %4, align 8
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8, !noalias !36
  %56 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  store i32 %10, i32* %56, align 8, !alias.scope !36
  %57 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  store %"class.WTF::StringImpl"* %55, %"class.WTF::StringImpl"** %57, align 8, !alias.scope !36
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4, !noalias !36
  %60 = and i32 %59, 1
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 1
  br i1 %61, label %68, label %63

63:                                               ; preds = %52
  %64 = bitcast %"class.WTF::StringImpl"* %62 to i8*
  %65 = zext i32 %54 to i64
  %66 = getelementptr inbounds i8, i8* %64, i64 %65
  %67 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  store i8* %66, i8** %67, align 8, !alias.scope !36
  br label %142

68:                                               ; preds = %52
  %69 = bitcast %"class.WTF::StringImpl"* %62 to i16*
  %70 = zext i32 %54 to i64
  %71 = getelementptr inbounds i16, i16* %69, i64 %70
  %72 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  %73 = bitcast i8** %72 to i16**
  store i16* %71, i16** %73, align 8, !alias.scope !36
  br label %142

74:                                               ; preds = %31, %40
  %75 = add i32 %10, 1
  br label %9

76:                                               ; preds = %47, %45
  %77 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %77) #9
  %78 = tail call %"class.WTF::StringImpl"* @_ZN5blink11ConsumeNameERNS_23CSSTokenizerInputStreamE(%"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %46) #9
  %79 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %78, %"class.WTF::StringImpl"** %79, align 8
  %80 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2
  %81 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %82 = load i32, i32* %81, align 4, !noalias !39
  %83 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %84 = load i32, i32* %83, align 8, !noalias !39
  %85 = icmp eq i32 %82, %84
  br i1 %85, label %112, label %86, !prof !5

86:                                               ; preds = %76
  %87 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %80, i64 0, i32 0, i32 0, i32 0
  %88 = load %"class.WTF::String"*, %"class.WTF::String"** %87, align 8, !noalias !39
  %89 = zext i32 %82 to i64
  %90 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %88, i64 %89, i32 0, i32 0
  store %"class.WTF::StringImpl"* %78, %"class.WTF::StringImpl"** %90, align 8, !noalias !39
  %91 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %91, label %109, label %92

92:                                               ; preds = %86
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = load atomic i32, i32* %93 monotonic, align 4, !noalias !39
  %95 = and i32 %94, 2
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %109

97:                                               ; preds = %92
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %99 = load i32, i32* %98, align 4, !noalias !39
  %100 = zext i32 %99 to i33
  %101 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %100, i33 1) #9
  %102 = extractvalue { i33, i1 } %101, 1
  %103 = extractvalue { i33, i1 } %101, 0
  %104 = icmp slt i33 %103, 0
  %105 = or i1 %102, %104
  br i1 %105, label %106, label %107, !prof !5

106:                                              ; preds = %97
  tail call void @llvm.trap() #9, !noalias !39
  unreachable

107:                                              ; preds = %97
  %108 = trunc i33 %103 to i32
  store i32 %108, i32* %98, align 4, !noalias !39
  br label %109

109:                                              ; preds = %107, %92, %86
  %110 = load i32, i32* %81, align 4, !noalias !39
  %111 = add i32 %110, 1
  store i32 %111, i32* %81, align 4, !noalias !39
  br label %113

112:                                              ; preds = %76
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.1"* %80, %"class.WTF::String"* nonnull dereferenceable(8) %3) #9, !noalias !39
  br label %113

113:                                              ; preds = %112, %109
  %114 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %79, align 8, !noalias !39
  %115 = icmp eq %"class.WTF::StringImpl"* %114, null
  br i1 %115, label %116, label %121

116:                                              ; preds = %113
  %117 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  store i8* null, i8** %117, align 8, !alias.scope !39
  %118 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8, !noalias !39
  %119 = bitcast %"class.WTF::StringView"* %0 to i64*
  store i64 %118, i64* %119, align 8, !alias.scope !39
  %120 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  store i32 0, i32* %120, align 8, !alias.scope !39
  br label %141

121:                                              ; preds = %113
  %122 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  store %"class.WTF::StringImpl"* %114, %"class.WTF::StringImpl"** %122, align 8, !alias.scope !39
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 0, i32 1
  %124 = load i32, i32* %123, align 4, !noalias !39
  %125 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 1
  %126 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  %127 = bitcast i8** %126 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %125, %"class.WTF::StringImpl"** %127, align 8, !alias.scope !39
  %128 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  store i32 %124, i32* %128, align 8, !alias.scope !39
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %130 = load atomic i32, i32* %129 monotonic, align 4
  %131 = and i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 0, i32 0
  %134 = load i32, i32* %133, align 4
  br i1 %132, label %135, label %137

135:                                              ; preds = %121
  %136 = add i32 %134, -1
  store i32 %136, i32* %133, align 4
  br label %137

137:                                              ; preds = %135, %121
  %138 = phi i32 [ %136, %135 ], [ %134, %121 ]
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %137
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %114) #9
  br label %141

141:                                              ; preds = %116, %137, %140
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %77) #9
  br label %142

142:                                              ; preds = %68, %63, %141
  ret void
}

declare void @_ZN5blink14CSSParserTokenC1ENS_13HashTokenTypeEN3WTF10StringViewE(%"class.blink::CSSParserToken"*, i32, %"class.WTF::StringView"* byval(%"class.WTF::StringView") align 8) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer19ConsumeUnicodeRangeEv(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %6 = load i32, i32* %3, align 8
  %7 = load i32, i32* %4, align 4
  br label %8

8:                                                ; preds = %2, %55
  %9 = phi i32 [ %6, %2 ], [ %59, %55 ]
  %10 = phi i32 [ 0, %2 ], [ %66, %55 ]
  %11 = phi i32 [ 6, %2 ], [ %67, %55 ]
  %12 = icmp ult i32 %9, %7
  br i1 %12, label %13, label %115

13:                                               ; preds = %8
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 1
  br i1 %18, label %26, label %20

20:                                               ; preds = %13
  %21 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  %22 = zext i32 %9 to i64
  %23 = getelementptr inbounds i8, i8* %21, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i16
  br label %31

26:                                               ; preds = %13
  %27 = bitcast %"class.WTF::StringImpl"* %19 to i16*
  %28 = zext i32 %9 to i64
  %29 = getelementptr inbounds i16, i16* %27, i64 %28
  %30 = load i16, i16* %29, align 2
  br label %31

31:                                               ; preds = %20, %26
  %32 = phi i16 [ %25, %20 ], [ %30, %26 ]
  %33 = add i16 %32, -48
  %34 = icmp ult i16 %33, 10
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = or i16 %32, 32
  %37 = add i16 %36, -97
  %38 = icmp ult i16 %37, 6
  br i1 %38, label %39, label %69

39:                                               ; preds = %35, %31
  %40 = shl i32 %10, 4
  %41 = load atomic i32, i32* %15 monotonic, align 4
  %42 = and i32 %41, 1
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %50, label %44

44:                                               ; preds = %39
  %45 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  %46 = zext i32 %9 to i64
  %47 = getelementptr inbounds i8, i8* %45, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  br label %55

50:                                               ; preds = %39
  %51 = bitcast %"class.WTF::StringImpl"* %19 to i16*
  %52 = zext i32 %9 to i64
  %53 = getelementptr inbounds i16, i16* %51, i64 %52
  %54 = load i16, i16* %53, align 2
  br label %55

55:                                               ; preds = %44, %50
  %56 = phi i16 [ %49, %44 ], [ %54, %50 ]
  %57 = icmp eq i16 %56, 0
  %58 = select i1 %57, i16 -3, i16 %56
  %59 = add nuw i32 %9, 1
  store i32 %59, i32* %3, align 8
  %60 = zext i16 %58 to i32
  %61 = icmp ult i16 %58, 65
  %62 = add nsw i32 %60, -48
  %63 = add nuw nsw i32 %60, 9
  %64 = and i32 %63, 15
  %65 = select i1 %61, i32 %62, i32 %64
  %66 = add nsw i32 %65, %40
  %67 = add nsw i32 %11, -1
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %115, label %8

69:                                               ; preds = %35
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load atomic i32, i32* %71 monotonic, align 4
  %73 = and i32 %72, 1
  %74 = icmp eq i32 %73, 0
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 1
  br i1 %74, label %82, label %76

76:                                               ; preds = %69
  %77 = bitcast %"class.WTF::StringImpl"* %75 to i8*
  %78 = zext i32 %9 to i64
  %79 = getelementptr inbounds i8, i8* %77, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i16
  br label %87

82:                                               ; preds = %69
  %83 = bitcast %"class.WTF::StringImpl"* %75 to i16*
  %84 = zext i32 %9 to i64
  %85 = getelementptr inbounds i16, i16* %83, i64 %84
  %86 = load i16, i16* %85, align 2
  br label %87

87:                                               ; preds = %82, %76
  %88 = phi i16 [ %81, %76 ], [ %86, %82 ]
  %89 = icmp eq i16 %88, 63
  br i1 %89, label %90, label %115

90:                                               ; preds = %87
  %91 = bitcast %"class.WTF::StringImpl"* %75 to i8*
  %92 = bitcast %"class.WTF::StringImpl"* %75 to i16*
  %93 = add nuw i32 %9, 1
  store i32 %93, i32* %3, align 8
  %94 = shl nsw i32 %10, 4
  %95 = shl nsw i32 %10, 4
  %96 = or i32 %95, 15
  %97 = icmp ne i32 %11, 1
  %98 = icmp ult i32 %93, %7
  %99 = and i1 %97, %98
  br i1 %99, label %100, label %228

100:                                              ; preds = %90
  %101 = load atomic i32, i32* %71 monotonic, align 4
  %102 = and i32 %101, 1
  %103 = icmp eq i32 %102, 0
  %104 = zext i32 %93 to i64
  br i1 %103, label %109, label %105

105:                                              ; preds = %100
  %106 = getelementptr inbounds i8, i8* %91, i64 %104
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i16
  br label %112

109:                                              ; preds = %100
  %110 = getelementptr inbounds i16, i16* %92, i64 %104
  %111 = load i16, i16* %110, align 2
  br label %112

112:                                              ; preds = %109, %105
  %113 = phi i16 [ %108, %105 ], [ %111, %109 ]
  %114 = icmp eq i16 %113, 63
  br i1 %114, label %231, label %228

115:                                              ; preds = %55, %8, %87
  %116 = phi i32 [ %9, %87 ], [ %59, %55 ], [ %9, %8 ]
  %117 = phi i32 [ %10, %87 ], [ %66, %55 ], [ %10, %8 ]
  %118 = icmp ult i32 %116, %7
  br i1 %118, label %119, label %228

119:                                              ; preds = %115
  %120 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = load atomic i32, i32* %121 monotonic, align 4
  %123 = and i32 %122, 1
  %124 = icmp eq i32 %123, 0
  %125 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 1
  br i1 %124, label %132, label %126

126:                                              ; preds = %119
  %127 = bitcast %"class.WTF::StringImpl"* %125 to i8*
  %128 = zext i32 %116 to i64
  %129 = getelementptr inbounds i8, i8* %127, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i16
  br label %137

132:                                              ; preds = %119
  %133 = bitcast %"class.WTF::StringImpl"* %125 to i16*
  %134 = zext i32 %116 to i64
  %135 = getelementptr inbounds i16, i16* %133, i64 %134
  %136 = load i16, i16* %135, align 2
  br label %137

137:                                              ; preds = %126, %132
  %138 = phi i16 [ %131, %126 ], [ %136, %132 ]
  %139 = icmp eq i16 %138, 45
  br i1 %139, label %140, label %228

140:                                              ; preds = %137
  %141 = add nuw i32 %116, 1
  %142 = icmp ult i32 %141, %7
  br i1 %142, label %143, label %228

143:                                              ; preds = %140
  %144 = load atomic i32, i32* %121 monotonic, align 4
  %145 = and i32 %144, 1
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %153, label %147

147:                                              ; preds = %143
  %148 = bitcast %"class.WTF::StringImpl"* %125 to i8*
  %149 = zext i32 %141 to i64
  %150 = getelementptr inbounds i8, i8* %148, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i16
  br label %158

153:                                              ; preds = %143
  %154 = bitcast %"class.WTF::StringImpl"* %125 to i16*
  %155 = zext i32 %141 to i64
  %156 = getelementptr inbounds i16, i16* %154, i64 %155
  %157 = load i16, i16* %156, align 2
  br label %158

158:                                              ; preds = %147, %153
  %159 = phi i16 [ %152, %147 ], [ %157, %153 ]
  %160 = add i16 %159, -48
  %161 = icmp ult i16 %160, 10
  br i1 %161, label %166, label %162

162:                                              ; preds = %158
  %163 = or i16 %159, 32
  %164 = add i16 %163, -97
  %165 = icmp ult i16 %164, 6
  br i1 %165, label %166, label %228

166:                                              ; preds = %158, %162
  store i32 %141, i32* %3, align 8
  %167 = bitcast %"class.WTF::StringImpl"* %125 to i8*
  %168 = bitcast %"class.WTF::StringImpl"* %125 to i16*
  %169 = bitcast %"class.WTF::StringImpl"* %125 to i8*
  %170 = bitcast %"class.WTF::StringImpl"* %125 to i16*
  br label %171

171:                                              ; preds = %227, %166
  %172 = phi i32 [ %141, %166 ], [ %195, %227 ]
  %173 = phi i32 [ 6, %166 ], [ %203, %227 ]
  %174 = phi i32 [ 0, %166 ], [ %202, %227 ]
  %175 = shl nsw i32 %174, 4
  %176 = icmp ult i32 %172, %7
  br i1 %176, label %177, label %193

177:                                              ; preds = %171
  %178 = load atomic i32, i32* %121 monotonic, align 4
  %179 = and i32 %178, 1
  %180 = icmp eq i32 %179, 0
  %181 = zext i32 %172 to i64
  br i1 %180, label %186, label %182

182:                                              ; preds = %177
  %183 = getelementptr inbounds i8, i8* %167, i64 %181
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i16
  br label %189

186:                                              ; preds = %177
  %187 = getelementptr inbounds i16, i16* %168, i64 %181
  %188 = load i16, i16* %187, align 2
  br label %189

189:                                              ; preds = %186, %182
  %190 = phi i16 [ %185, %182 ], [ %188, %186 ]
  %191 = icmp eq i16 %190, 0
  %192 = select i1 %191, i16 -3, i16 %190
  br label %193

193:                                              ; preds = %189, %171
  %194 = phi i16 [ 0, %171 ], [ %192, %189 ]
  %195 = add i32 %172, 1
  store i32 %195, i32* %3, align 8
  %196 = zext i16 %194 to i32
  %197 = icmp ult i16 %194, 65
  %198 = add nsw i32 %196, -48
  %199 = add nuw nsw i32 %196, 9
  %200 = and i32 %199, 15
  %201 = select i1 %197, i32 %198, i32 %200
  %202 = add nsw i32 %201, %175
  %203 = add nsw i32 %173, -1
  %204 = icmp ne i32 %203, 0
  %205 = icmp ult i32 %195, %7
  %206 = and i1 %204, %205
  br i1 %206, label %207, label %228

207:                                              ; preds = %193
  %208 = load atomic i32, i32* %121 monotonic, align 4
  %209 = and i32 %208, 1
  %210 = icmp eq i32 %209, 0
  %211 = zext i32 %195 to i64
  br i1 %210, label %216, label %212

212:                                              ; preds = %207
  %213 = getelementptr inbounds i8, i8* %169, i64 %211
  %214 = load i8, i8* %213, align 1
  %215 = zext i8 %214 to i16
  br label %219

216:                                              ; preds = %207
  %217 = getelementptr inbounds i16, i16* %170, i64 %211
  %218 = load i16, i16* %217, align 2
  br label %219

219:                                              ; preds = %212, %216
  %220 = phi i16 [ %215, %212 ], [ %218, %216 ]
  %221 = add i16 %220, -48
  %222 = icmp ult i16 %221, 10
  br i1 %222, label %227, label %223

223:                                              ; preds = %219
  %224 = or i16 %220, 32
  %225 = add i16 %224, -97
  %226 = icmp ult i16 %225, 6
  br i1 %226, label %227, label %228

227:                                              ; preds = %223, %219
  br label %171

228:                                              ; preds = %112, %90, %231, %251, %254, %274, %277, %297, %300, %320, %323, %331, %223, %193, %140, %115, %137, %162
  %229 = phi i32 [ %117, %162 ], [ %117, %137 ], [ %117, %115 ], [ %117, %140 ], [ %117, %193 ], [ %117, %223 ], [ %94, %90 ], [ %94, %112 ], [ %233, %231 ], [ %233, %251 ], [ %256, %254 ], [ %256, %274 ], [ %279, %277 ], [ %279, %297 ], [ %302, %300 ], [ %302, %320 ], [ %325, %323 ], [ %325, %331 ]
  %230 = phi i32 [ %117, %162 ], [ %117, %137 ], [ %117, %115 ], [ %117, %140 ], [ %202, %193 ], [ %202, %223 ], [ %96, %90 ], [ %96, %112 ], [ %235, %231 ], [ %235, %251 ], [ %258, %254 ], [ %258, %274 ], [ %281, %277 ], [ %281, %297 ], [ %304, %300 ], [ %304, %320 ], [ %327, %323 ], [ %327, %331 ]
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEii(%"class.blink::CSSParserToken"* %0, i32 16, i32 %229, i32 %230) #9
  ret void

231:                                              ; preds = %112
  %232 = add nuw i32 %9, 2
  store i32 %232, i32* %3, align 8
  %233 = shl nsw i32 %10, 8
  %234 = shl nsw i32 %96, 4
  %235 = or i32 %234, 15
  %236 = icmp ne i32 %11, 2
  %237 = icmp ult i32 %232, %7
  %238 = and i1 %236, %237
  br i1 %238, label %239, label %228

239:                                              ; preds = %231
  %240 = load atomic i32, i32* %71 monotonic, align 4
  %241 = and i32 %240, 1
  %242 = icmp eq i32 %241, 0
  %243 = zext i32 %232 to i64
  br i1 %242, label %248, label %244

244:                                              ; preds = %239
  %245 = getelementptr inbounds i8, i8* %91, i64 %243
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i16
  br label %251

248:                                              ; preds = %239
  %249 = getelementptr inbounds i16, i16* %92, i64 %243
  %250 = load i16, i16* %249, align 2
  br label %251

251:                                              ; preds = %248, %244
  %252 = phi i16 [ %247, %244 ], [ %250, %248 ]
  %253 = icmp eq i16 %252, 63
  br i1 %253, label %254, label %228

254:                                              ; preds = %251
  %255 = add nuw i32 %9, 3
  store i32 %255, i32* %3, align 8
  %256 = shl nsw i32 %10, 12
  %257 = shl nsw i32 %235, 4
  %258 = or i32 %257, 15
  %259 = icmp ne i32 %11, 3
  %260 = icmp ult i32 %255, %7
  %261 = and i1 %259, %260
  br i1 %261, label %262, label %228

262:                                              ; preds = %254
  %263 = load atomic i32, i32* %71 monotonic, align 4
  %264 = and i32 %263, 1
  %265 = icmp eq i32 %264, 0
  %266 = zext i32 %255 to i64
  br i1 %265, label %271, label %267

267:                                              ; preds = %262
  %268 = getelementptr inbounds i8, i8* %91, i64 %266
  %269 = load i8, i8* %268, align 1
  %270 = zext i8 %269 to i16
  br label %274

271:                                              ; preds = %262
  %272 = getelementptr inbounds i16, i16* %92, i64 %266
  %273 = load i16, i16* %272, align 2
  br label %274

274:                                              ; preds = %271, %267
  %275 = phi i16 [ %270, %267 ], [ %273, %271 ]
  %276 = icmp eq i16 %275, 63
  br i1 %276, label %277, label %228

277:                                              ; preds = %274
  %278 = add nuw i32 %9, 4
  store i32 %278, i32* %3, align 8
  %279 = shl nsw i32 %10, 16
  %280 = shl nsw i32 %258, 4
  %281 = or i32 %280, 15
  %282 = icmp ne i32 %11, 4
  %283 = icmp ult i32 %278, %7
  %284 = and i1 %282, %283
  br i1 %284, label %285, label %228

285:                                              ; preds = %277
  %286 = load atomic i32, i32* %71 monotonic, align 4
  %287 = and i32 %286, 1
  %288 = icmp eq i32 %287, 0
  %289 = zext i32 %278 to i64
  br i1 %288, label %294, label %290

290:                                              ; preds = %285
  %291 = getelementptr inbounds i8, i8* %91, i64 %289
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i16
  br label %297

294:                                              ; preds = %285
  %295 = getelementptr inbounds i16, i16* %92, i64 %289
  %296 = load i16, i16* %295, align 2
  br label %297

297:                                              ; preds = %294, %290
  %298 = phi i16 [ %293, %290 ], [ %296, %294 ]
  %299 = icmp eq i16 %298, 63
  br i1 %299, label %300, label %228

300:                                              ; preds = %297
  %301 = add nuw i32 %9, 5
  store i32 %301, i32* %3, align 8
  %302 = shl nsw i32 %10, 20
  %303 = shl nsw i32 %281, 4
  %304 = or i32 %303, 15
  %305 = icmp ne i32 %11, 5
  %306 = icmp ult i32 %301, %7
  %307 = and i1 %305, %306
  br i1 %307, label %308, label %228

308:                                              ; preds = %300
  %309 = load atomic i32, i32* %71 monotonic, align 4
  %310 = and i32 %309, 1
  %311 = icmp eq i32 %310, 0
  %312 = zext i32 %301 to i64
  br i1 %311, label %317, label %313

313:                                              ; preds = %308
  %314 = getelementptr inbounds i8, i8* %91, i64 %312
  %315 = load i8, i8* %314, align 1
  %316 = zext i8 %315 to i16
  br label %320

317:                                              ; preds = %308
  %318 = getelementptr inbounds i16, i16* %92, i64 %312
  %319 = load i16, i16* %318, align 2
  br label %320

320:                                              ; preds = %317, %313
  %321 = phi i16 [ %316, %313 ], [ %319, %317 ]
  %322 = icmp eq i16 %321, 63
  br i1 %322, label %323, label %228

323:                                              ; preds = %320
  %324 = add nuw i32 %9, 6
  store i32 %324, i32* %3, align 8
  %325 = shl nsw i32 %10, 24
  %326 = shl nsw i32 %304, 4
  %327 = or i32 %326, 15
  %328 = icmp ne i32 %11, 6
  %329 = icmp ult i32 %324, %7
  %330 = and i1 %328, %329
  br i1 %330, label %331, label %228

331:                                              ; preds = %323
  %332 = load atomic i32, i32* %71 monotonic, align 4
  br label %228
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer23ConsumeStringTokenUntilEDs(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, i16 zeroext) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.WTF::StringBuilder", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  br label %11

11:                                               ; preds = %74, %3
  %12 = phi i32 [ 0, %3 ], [ %75, %74 ]
  %13 = add i32 %7, %12
  %14 = icmp ult i32 %13, %9
  br i1 %14, label %15, label %33

15:                                               ; preds = %11
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 1
  br i1 %20, label %28, label %22

22:                                               ; preds = %15
  %23 = bitcast %"class.WTF::StringImpl"* %21 to i8*
  %24 = zext i32 %13 to i64
  %25 = getelementptr inbounds i8, i8* %23, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i16
  br label %33

28:                                               ; preds = %15
  %29 = bitcast %"class.WTF::StringImpl"* %21 to i16*
  %30 = zext i32 %13 to i64
  %31 = getelementptr inbounds i16, i16* %29, i64 %30
  %32 = load i16, i16* %31, align 2
  br label %33

33:                                               ; preds = %11, %22, %28
  %34 = phi i16 [ 0, %11 ], [ %27, %22 ], [ %32, %28 ]
  %35 = icmp eq i16 %34, %2
  br i1 %35, label %36, label %68

36:                                               ; preds = %33
  %37 = icmp ult i32 %9, %7
  %38 = select i1 %37, i32 %9, i32 %7
  %39 = add i32 %12, 1
  %40 = add i32 %39, %7
  store i32 %40, i32* %6, align 8
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8, !noalias !42
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4, !noalias !42
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 1
  %47 = bitcast %"class.WTF::StringImpl"* %46 to i16*
  %48 = zext i32 %38 to i64
  %49 = getelementptr inbounds i16, i16* %47, i64 %48
  %50 = bitcast i16* %49 to i8*
  %51 = bitcast %"class.WTF::StringImpl"* %46 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 %48
  %53 = select i1 %45, i8* %50, i8* %52
  %54 = ptrtoint i8* %53 to i64
  %55 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 1
  store i32 %12, i32* %57, align 4
  %58 = load atomic i32, i32* %42 monotonic, align 4
  %59 = shl i32 %58, 18
  %60 = and i32 %59, 262144
  %61 = and i32 %56, -262400
  %62 = or i32 %61, 29
  %63 = or i32 %60, %62
  store i32 %63, i32* %55, align 8
  %64 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 2
  %65 = bitcast i8** %64 to i64*
  store i64 %54, i64* %65, align 8
  %66 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 3
  %67 = bitcast %union.anon* %66 to i32*
  store i32 -1, i32* %67, align 8
  br label %255

68:                                               ; preds = %33
  switch i16 %34, label %74 [
    i16 13, label %69
    i16 10, label %69
    i16 12, label %69
    i16 0, label %76
    i16 92, label %76
  ]

69:                                               ; preds = %68, %68, %68
  store i32 %13, i32* %6, align 8
  %70 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %71 = load i32, i32* %70, align 8
  %72 = and i32 %71, -256
  %73 = or i32 %72, 30
  store i32 %73, i32* %70, align 8
  br label %255

74:                                               ; preds = %68
  %75 = add i32 %12, 1
  br label %11

76:                                               ; preds = %68, %68
  %77 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0
  %78 = bitcast %"class.WTF::StringBuilder"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %78) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 -86, i64 48, i1 false)
  %79 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %79, align 8
  %80 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 1
  %81 = bitcast %union.anon.11* %80 to i8*
  store i8 0, i8* %81, align 8
  %82 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 2
  store i32 0, i32* %82, align 8
  %83 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 3
  store i8 1, i8* %83, align 4
  %84 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %4, i64 0, i32 4
  store i8 0, i8* %84, align 1
  %85 = icmp ult i32 %7, %9
  br i1 %85, label %89, label %86

86:                                               ; preds = %234, %76
  %87 = phi i32 [ %7, %76 ], [ %235, %234 ]
  %88 = add i32 %87, 1
  store i32 %88, i32* %6, align 8
  br label %115

89:                                               ; preds = %76, %234
  %90 = phi i32 [ %236, %234 ], [ %9, %76 ]
  %91 = phi i32 [ %235, %234 ], [ %7, %76 ]
  %92 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %92, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = load atomic i32, i32* %93 monotonic, align 4
  %95 = and i32 %94, 1
  %96 = icmp eq i32 %95, 0
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %92, i64 1
  br i1 %96, label %104, label %98

98:                                               ; preds = %89
  %99 = bitcast %"class.WTF::StringImpl"* %97 to i8*
  %100 = zext i32 %91 to i64
  %101 = getelementptr inbounds i8, i8* %99, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i16
  br label %109

104:                                              ; preds = %89
  %105 = bitcast %"class.WTF::StringImpl"* %97 to i16*
  %106 = zext i32 %91 to i64
  %107 = getelementptr inbounds i16, i16* %105, i64 %106
  %108 = load i16, i16* %107, align 2
  br label %109

109:                                              ; preds = %98, %104
  %110 = phi i16 [ %103, %98 ], [ %108, %104 ]
  %111 = icmp eq i16 %110, 0
  %112 = select i1 %111, i16 -3, i16 %110
  %113 = add nuw i32 %91, 1
  store i32 %113, i32* %6, align 8
  %114 = icmp eq i16 %112, %2
  br i1 %114, label %115, label %194

115:                                              ; preds = %109, %86
  %116 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %116) #9
  %117 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %4) #9
  %118 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %117, %"class.WTF::StringImpl"** %118, align 8
  %119 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2
  %120 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %121 = load i32, i32* %120, align 4, !noalias !45
  %122 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %123 = load i32, i32* %122, align 8, !noalias !45
  %124 = icmp eq i32 %121, %123
  br i1 %124, label %151, label %125, !prof !5

125:                                              ; preds = %115
  %126 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %119, i64 0, i32 0, i32 0, i32 0
  %127 = load %"class.WTF::String"*, %"class.WTF::String"** %126, align 8, !noalias !45
  %128 = zext i32 %121 to i64
  %129 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 %128, i32 0, i32 0
  store %"class.WTF::StringImpl"* %117, %"class.WTF::StringImpl"** %129, align 8, !noalias !45
  %130 = icmp eq %"class.WTF::StringImpl"* %117, null
  br i1 %130, label %148, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %117, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4, !noalias !45
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %117, i64 0, i32 0
  %138 = load i32, i32* %137, align 4, !noalias !45
  %139 = zext i32 %138 to i33
  %140 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %139, i33 1) #9
  %141 = extractvalue { i33, i1 } %140, 1
  %142 = extractvalue { i33, i1 } %140, 0
  %143 = icmp slt i33 %142, 0
  %144 = or i1 %141, %143
  br i1 %144, label %145, label %146, !prof !5

145:                                              ; preds = %136
  call void @llvm.trap() #9, !noalias !45
  unreachable

146:                                              ; preds = %136
  %147 = trunc i33 %142 to i32
  store i32 %147, i32* %137, align 4, !noalias !45
  br label %148

148:                                              ; preds = %146, %131, %125
  %149 = load i32, i32* %120, align 4, !noalias !45
  %150 = add i32 %149, 1
  store i32 %150, i32* %120, align 4, !noalias !45
  br label %152

151:                                              ; preds = %115
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.1"* %119, %"class.WTF::String"* nonnull dereferenceable(8) %5) #9, !noalias !45
  br label %152

152:                                              ; preds = %151, %148
  %153 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %118, align 8, !noalias !45
  %154 = icmp eq %"class.WTF::StringImpl"* %153, null
  br i1 %154, label %155, label %157

155:                                              ; preds = %152
  %156 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8, !noalias !45
  br label %162

157:                                              ; preds = %152
  %158 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 1
  %159 = load i32, i32* %158, align 4, !noalias !45
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 1
  %161 = ptrtoint %"class.WTF::StringImpl"* %160 to i64
  br label %162

162:                                              ; preds = %155, %157
  %163 = phi i64 [ 0, %155 ], [ %161, %157 ]
  %164 = phi %"class.WTF::StringImpl"* [ %156, %155 ], [ %153, %157 ]
  %165 = phi i32 [ 0, %155 ], [ %159, %157 ]
  %166 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %167 = load i32, i32* %166, align 8
  %168 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 1
  store i32 %165, i32* %168, align 4
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %164, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = shl i32 %170, 18
  %172 = and i32 %171, 262144
  %173 = and i32 %167, -262400
  %174 = or i32 %173, 29
  %175 = or i32 %172, %174
  store i32 %175, i32* %166, align 8
  %176 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 2
  %177 = bitcast i8** %176 to i64*
  store i64 %163, i64* %177, align 8
  %178 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 3
  %179 = bitcast %union.anon* %178 to i32*
  store i32 -1, i32* %179, align 8
  br i1 %154, label %193, label %180

180:                                              ; preds = %162
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %182 = load atomic i32, i32* %181 monotonic, align 4
  %183 = and i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 0
  %186 = load i32, i32* %185, align 4
  br i1 %184, label %187, label %189

187:                                              ; preds = %180
  %188 = add i32 %186, -1
  store i32 %188, i32* %185, align 4
  br label %189

189:                                              ; preds = %187, %180
  %190 = phi i32 [ %188, %187 ], [ %186, %180 ]
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %193

192:                                              ; preds = %189
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %153) #9
  br label %193

193:                                              ; preds = %162, %189, %192
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %116) #9
  br label %238

194:                                              ; preds = %109
  switch i16 %112, label %233 [
    i16 13, label %195
    i16 10, label %195
    i16 12, label %195
    i16 92, label %200
  ]

195:                                              ; preds = %194, %194, %194
  store i32 %91, i32* %6, align 8
  %196 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %197 = load i32, i32* %196, align 8
  %198 = and i32 %197, -256
  %199 = or i32 %198, 30
  store i32 %199, i32* %196, align 8
  br label %238

200:                                              ; preds = %194
  %201 = icmp ult i32 %113, %90
  br i1 %201, label %202, label %234

202:                                              ; preds = %200
  %203 = load atomic i32, i32* %93 monotonic, align 4
  %204 = load atomic i32, i32* %93 monotonic, align 4
  %205 = and i32 %204, 1
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %213, label %207

207:                                              ; preds = %202
  %208 = bitcast %"class.WTF::StringImpl"* %97 to i8*
  %209 = zext i32 %113 to i64
  %210 = getelementptr inbounds i8, i8* %208, i64 %209
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i16
  br label %218

213:                                              ; preds = %202
  %214 = bitcast %"class.WTF::StringImpl"* %97 to i16*
  %215 = zext i32 %113 to i64
  %216 = getelementptr inbounds i16, i16* %214, i64 %215
  %217 = load i16, i16* %216, align 2
  br label %218

218:                                              ; preds = %207, %213
  %219 = phi i16 [ %212, %207 ], [ %217, %213 ]
  switch i16 %219, label %221 [
    i16 13, label %220
    i16 10, label %220
    i16 12, label %220
  ]

220:                                              ; preds = %218, %218, %218
  call void @_ZN5blink29ConsumeSingleWhitespaceIfNextERNS_23CSSTokenizerInputStreamE(%"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %77) #9
  br label %234

221:                                              ; preds = %218
  %222 = call i32 @_ZN5blink13ConsumeEscapeERNS_23CSSTokenizerInputStreamE(%"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %77) #9
  %223 = icmp ult i32 %222, 65536
  br i1 %223, label %224, label %226

224:                                              ; preds = %221
  %225 = trunc i32 %222 to i16
  call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* nonnull %4, i16 zeroext %225) #9
  br label %234

226:                                              ; preds = %221
  %227 = lshr i32 %222, 10
  %228 = trunc i32 %227 to i16
  %229 = add i16 %228, -10304
  call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* nonnull %4, i16 zeroext %229) #9
  %230 = trunc i32 %222 to i16
  %231 = and i16 %230, 1023
  %232 = or i16 %231, -9216
  call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* nonnull %4, i16 zeroext %232) #9
  br label %234

233:                                              ; preds = %194
  call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* nonnull %4, i16 zeroext %112)
  br label %234

234:                                              ; preds = %226, %224, %200, %233, %220
  %235 = load i32, i32* %6, align 8
  %236 = load i32, i32* %8, align 4
  %237 = icmp ult i32 %235, %236
  br i1 %237, label %89, label %86

238:                                              ; preds = %193, %195
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %4) #9
  %239 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %79, align 8
  %240 = icmp eq %"class.WTF::StringImpl"* %239, null
  br i1 %240, label %254, label %241

241:                                              ; preds = %238
  %242 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %239, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %243 = load atomic i32, i32* %242 monotonic, align 4
  %244 = and i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %239, i64 0, i32 0
  %247 = load i32, i32* %246, align 4
  br i1 %245, label %248, label %250

248:                                              ; preds = %241
  %249 = add i32 %247, -1
  store i32 %249, i32* %246, align 4
  br label %250

250:                                              ; preds = %248, %241
  %251 = phi i32 [ %249, %248 ], [ %247, %241 ]
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %253, label %254

253:                                              ; preds = %250
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %239) #9
  br label %254

254:                                              ; preds = %238, %250, %253
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %78) #9
  br label %255

255:                                              ; preds = %69, %36, %254
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer13ConsumeNumberEv(%"class.blink::CSSParserToken"* noalias sret, %"class.blink::CSSTokenizer"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ugt i32 %7, %5
  %9 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  br i1 %8, label %11, label %31

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 1
  br i1 %15, label %23, label %17

17:                                               ; preds = %11
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %19 = zext i32 %5 to i64
  %20 = getelementptr inbounds i8, i8* %18, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  br label %28

23:                                               ; preds = %11
  %24 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  %25 = zext i32 %5 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  %27 = load i16, i16* %26, align 2
  br label %28

28:                                               ; preds = %17, %23
  %29 = phi i16 [ %22, %17 ], [ %27, %23 ]
  switch i16 %29, label %31 [
    i16 43, label %32
    i16 45, label %30
  ]

30:                                               ; preds = %28
  br label %32

31:                                               ; preds = %2, %28
  br label %32

32:                                               ; preds = %28, %31, %30
  %33 = phi i32 [ 2, %30 ], [ 1, %28 ], [ 0, %31 ]
  %34 = phi i32 [ 1, %30 ], [ 1, %28 ], [ 0, %31 ]
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 1
  br i1 %38, label %59, label %40

40:                                               ; preds = %32
  %41 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  %42 = add i32 %34, %5
  %43 = icmp ult i32 %42, %7
  br i1 %43, label %44, label %77

44:                                               ; preds = %40
  %45 = sub i32 %7, %5
  br label %46

46:                                               ; preds = %55, %44
  %47 = phi i32 [ %57, %55 ], [ %42, %44 ]
  %48 = phi i32 [ %56, %55 ], [ %34, %44 ]
  %49 = zext i32 %47 to i64
  %50 = getelementptr inbounds i8, i8* %41, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i16
  %53 = add nsw i16 %52, -48
  %54 = icmp ult i16 %53, 10
  br i1 %54, label %55, label %77

55:                                               ; preds = %46
  %56 = add i32 %48, 1
  %57 = add i32 %56, %5
  %58 = icmp eq i32 %56, %45
  br i1 %58, label %77, label %46

59:                                               ; preds = %32
  %60 = bitcast %"class.WTF::StringImpl"* %39 to i16*
  %61 = add i32 %34, %5
  %62 = icmp ult i32 %61, %7
  br i1 %62, label %63, label %77

63:                                               ; preds = %59
  %64 = sub i32 %7, %5
  br label %65

65:                                               ; preds = %73, %63
  %66 = phi i32 [ %75, %73 ], [ %61, %63 ]
  %67 = phi i32 [ %74, %73 ], [ %34, %63 ]
  %68 = zext i32 %66 to i64
  %69 = getelementptr inbounds i16, i16* %60, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = add i16 %70, -48
  %72 = icmp ult i16 %71, 10
  br i1 %72, label %73, label %77

73:                                               ; preds = %65
  %74 = add i32 %67, 1
  %75 = add i32 %74, %5
  %76 = icmp eq i32 %74, %64
  br i1 %76, label %77, label %65

77:                                               ; preds = %46, %55, %65, %73, %40, %59
  %78 = phi i32 [ %34, %59 ], [ %34, %40 ], [ %67, %65 ], [ %64, %73 ], [ %48, %46 ], [ %45, %55 ]
  %79 = add i32 %78, %5
  %80 = icmp ult i32 %79, %7
  br i1 %80, label %81, label %304

81:                                               ; preds = %77
  %82 = load atomic i32, i32* %35 monotonic, align 4
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %91, label %85

85:                                               ; preds = %81
  %86 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  %87 = zext i32 %79 to i64
  %88 = getelementptr inbounds i8, i8* %86, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i16
  br label %96

91:                                               ; preds = %81
  %92 = bitcast %"class.WTF::StringImpl"* %39 to i16*
  %93 = zext i32 %79 to i64
  %94 = getelementptr inbounds i16, i16* %92, i64 %93
  %95 = load i16, i16* %94, align 2
  br label %96

96:                                               ; preds = %85, %91
  %97 = phi i16 [ %90, %85 ], [ %95, %91 ]
  %98 = icmp eq i16 %97, 46
  br i1 %98, label %99, label %182

99:                                               ; preds = %96
  %100 = add nuw i32 %79, 1
  %101 = icmp ult i32 %100, %7
  br i1 %101, label %102, label %304

102:                                              ; preds = %99
  %103 = load atomic i32, i32* %35 monotonic, align 4
  %104 = and i32 %103, 1
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %112, label %106

106:                                              ; preds = %102
  %107 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  %108 = zext i32 %100 to i64
  %109 = getelementptr inbounds i8, i8* %107, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i16
  br label %117

112:                                              ; preds = %102
  %113 = bitcast %"class.WTF::StringImpl"* %39 to i16*
  %114 = zext i32 %100 to i64
  %115 = getelementptr inbounds i16, i16* %113, i64 %114
  %116 = load i16, i16* %115, align 2
  br label %117

117:                                              ; preds = %106, %112
  %118 = phi i16 [ %111, %106 ], [ %116, %112 ]
  %119 = add i16 %118, -48
  %120 = icmp ult i16 %119, 10
  br i1 %120, label %121, label %304

121:                                              ; preds = %117
  %122 = add i32 %78, 2
  %123 = load atomic i32, i32* %35 monotonic, align 4
  %124 = and i32 %123, 1
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %145, label %126

126:                                              ; preds = %121
  %127 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  %128 = add i32 %122, %5
  %129 = icmp ult i32 %128, %7
  br i1 %129, label %130, label %163

130:                                              ; preds = %126
  %131 = sub i32 %7, %5
  br label %132

132:                                              ; preds = %141, %130
  %133 = phi i32 [ %143, %141 ], [ %128, %130 ]
  %134 = phi i32 [ %142, %141 ], [ %122, %130 ]
  %135 = zext i32 %133 to i64
  %136 = getelementptr inbounds i8, i8* %127, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i16
  %139 = add nsw i16 %138, -48
  %140 = icmp ult i16 %139, 10
  br i1 %140, label %141, label %163

141:                                              ; preds = %132
  %142 = add i32 %134, 1
  %143 = add i32 %142, %5
  %144 = icmp eq i32 %142, %131
  br i1 %144, label %163, label %132

145:                                              ; preds = %121
  %146 = bitcast %"class.WTF::StringImpl"* %39 to i16*
  %147 = add i32 %122, %5
  %148 = icmp ult i32 %147, %7
  br i1 %148, label %149, label %163

149:                                              ; preds = %145
  %150 = sub i32 %7, %5
  br label %151

151:                                              ; preds = %159, %149
  %152 = phi i32 [ %161, %159 ], [ %147, %149 ]
  %153 = phi i32 [ %160, %159 ], [ %122, %149 ]
  %154 = zext i32 %152 to i64
  %155 = getelementptr inbounds i16, i16* %146, i64 %154
  %156 = load i16, i16* %155, align 2
  %157 = add i16 %156, -48
  %158 = icmp ult i16 %157, 10
  br i1 %158, label %159, label %163

159:                                              ; preds = %151
  %160 = add i32 %153, 1
  %161 = add i32 %160, %5
  %162 = icmp eq i32 %160, %150
  br i1 %162, label %163, label %151

163:                                              ; preds = %132, %141, %151, %159, %126, %145
  %164 = phi i32 [ %122, %145 ], [ %122, %126 ], [ %153, %151 ], [ %150, %159 ], [ %134, %132 ], [ %131, %141 ]
  %165 = add i32 %164, %5
  %166 = icmp ult i32 %165, %7
  br i1 %166, label %167, label %304

167:                                              ; preds = %163
  %168 = load atomic i32, i32* %35 monotonic, align 4
  %169 = and i32 %168, 1
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %177, label %171

171:                                              ; preds = %167
  %172 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  %173 = zext i32 %165 to i64
  %174 = getelementptr inbounds i8, i8* %172, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i16
  br label %182

177:                                              ; preds = %167
  %178 = bitcast %"class.WTF::StringImpl"* %39 to i16*
  %179 = zext i32 %165 to i64
  %180 = getelementptr inbounds i16, i16* %178, i64 %179
  %181 = load i16, i16* %180, align 2
  br label %182

182:                                              ; preds = %177, %171, %96
  %183 = phi i32 [ %78, %96 ], [ %164, %171 ], [ %164, %177 ]
  %184 = phi i16 [ %97, %96 ], [ %176, %171 ], [ %181, %177 ]
  %185 = phi i32 [ 0, %96 ], [ 1, %171 ], [ 1, %177 ]
  switch i16 %184, label %304 [
    i16 69, label %186
    i16 101, label %186
  ]

186:                                              ; preds = %182, %182
  %187 = add i32 %183, 1
  %188 = add i32 %187, %5
  %189 = icmp ult i32 %188, %7
  br i1 %189, label %190, label %304

190:                                              ; preds = %186
  %191 = load atomic i32, i32* %35 monotonic, align 4
  %192 = and i32 %191, 1
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %200, label %194

194:                                              ; preds = %190
  %195 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  %196 = zext i32 %188 to i64
  %197 = getelementptr inbounds i8, i8* %195, i64 %196
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i16
  br label %205

200:                                              ; preds = %190
  %201 = bitcast %"class.WTF::StringImpl"* %39 to i16*
  %202 = zext i32 %188 to i64
  %203 = getelementptr inbounds i16, i16* %201, i64 %202
  %204 = load i16, i16* %203, align 2
  br label %205

205:                                              ; preds = %194, %200
  %206 = phi i16 [ %199, %194 ], [ %204, %200 ]
  %207 = add i16 %206, -48
  %208 = icmp ult i16 %207, 10
  br i1 %208, label %209, label %242

209:                                              ; preds = %205
  %210 = load atomic i32, i32* %35 monotonic, align 4
  %211 = and i32 %210, 1
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %228, label %213

213:                                              ; preds = %209
  %214 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  br label %215

215:                                              ; preds = %213, %224
  %216 = phi i32 [ %226, %224 ], [ %188, %213 ]
  %217 = phi i32 [ %225, %224 ], [ %187, %213 ]
  %218 = zext i32 %216 to i64
  %219 = getelementptr inbounds i8, i8* %214, i64 %218
  %220 = load i8, i8* %219, align 1
  %221 = zext i8 %220 to i16
  %222 = add nsw i16 %221, -48
  %223 = icmp ult i16 %222, 10
  br i1 %223, label %224, label %304

224:                                              ; preds = %215
  %225 = add i32 %217, 1
  %226 = add i32 %225, %5
  %227 = icmp ult i32 %226, %7
  br i1 %227, label %215, label %304

228:                                              ; preds = %209
  %229 = bitcast %"class.WTF::StringImpl"* %39 to i16*
  br label %230

230:                                              ; preds = %228, %238
  %231 = phi i32 [ %240, %238 ], [ %188, %228 ]
  %232 = phi i32 [ %239, %238 ], [ %187, %228 ]
  %233 = zext i32 %231 to i64
  %234 = getelementptr inbounds i16, i16* %229, i64 %233
  %235 = load i16, i16* %234, align 2
  %236 = add i16 %235, -48
  %237 = icmp ult i16 %236, 10
  br i1 %237, label %238, label %304

238:                                              ; preds = %230
  %239 = add i32 %232, 1
  %240 = add i32 %239, %5
  %241 = icmp ult i32 %240, %7
  br i1 %241, label %230, label %304

242:                                              ; preds = %205
  switch i16 %206, label %304 [
    i16 43, label %243
    i16 45, label %243
  ]

243:                                              ; preds = %242, %242
  %244 = add i32 %5, 2
  %245 = add i32 %244, %183
  %246 = icmp ult i32 %245, %7
  br i1 %246, label %247, label %304

247:                                              ; preds = %243
  %248 = load atomic i32, i32* %35 monotonic, align 4
  %249 = and i32 %248, 1
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %257, label %251

251:                                              ; preds = %247
  %252 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  %253 = zext i32 %245 to i64
  %254 = getelementptr inbounds i8, i8* %252, i64 %253
  %255 = load i8, i8* %254, align 1
  %256 = zext i8 %255 to i16
  br label %262

257:                                              ; preds = %247
  %258 = bitcast %"class.WTF::StringImpl"* %39 to i16*
  %259 = zext i32 %245 to i64
  %260 = getelementptr inbounds i16, i16* %258, i64 %259
  %261 = load i16, i16* %260, align 2
  br label %262

262:                                              ; preds = %251, %257
  %263 = phi i16 [ %256, %251 ], [ %261, %257 ]
  %264 = add i16 %263, -48
  %265 = icmp ult i16 %264, 10
  br i1 %265, label %266, label %304

266:                                              ; preds = %262
  %267 = add i32 %183, 3
  %268 = load atomic i32, i32* %35 monotonic, align 4
  %269 = and i32 %268, 1
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %288, label %271

271:                                              ; preds = %266
  %272 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  %273 = add i32 %267, %5
  %274 = icmp ult i32 %273, %7
  br i1 %274, label %275, label %304

275:                                              ; preds = %271, %284
  %276 = phi i32 [ %286, %284 ], [ %273, %271 ]
  %277 = phi i32 [ %285, %284 ], [ %267, %271 ]
  %278 = zext i32 %276 to i64
  %279 = getelementptr inbounds i8, i8* %272, i64 %278
  %280 = load i8, i8* %279, align 1
  %281 = zext i8 %280 to i16
  %282 = add nsw i16 %281, -48
  %283 = icmp ult i16 %282, 10
  br i1 %283, label %284, label %304

284:                                              ; preds = %275
  %285 = add i32 %277, 1
  %286 = add i32 %285, %5
  %287 = icmp ult i32 %286, %7
  br i1 %287, label %275, label %304

288:                                              ; preds = %266
  %289 = bitcast %"class.WTF::StringImpl"* %39 to i16*
  %290 = add i32 %267, %5
  %291 = icmp ult i32 %290, %7
  br i1 %291, label %292, label %304

292:                                              ; preds = %288, %300
  %293 = phi i32 [ %302, %300 ], [ %290, %288 ]
  %294 = phi i32 [ %301, %300 ], [ %267, %288 ]
  %295 = zext i32 %293 to i64
  %296 = getelementptr inbounds i16, i16* %289, i64 %295
  %297 = load i16, i16* %296, align 2
  %298 = add i16 %297, -48
  %299 = icmp ult i16 %298, 10
  br i1 %299, label %300, label %304

300:                                              ; preds = %292
  %301 = add i32 %294, 1
  %302 = add i32 %301, %5
  %303 = icmp ult i32 %302, %7
  br i1 %303, label %292, label %304

304:                                              ; preds = %284, %275, %300, %292, %224, %215, %238, %230, %243, %186, %99, %77, %163, %117, %288, %271, %242, %182, %262
  %305 = phi i32 [ %183, %262 ], [ %183, %182 ], [ %183, %242 ], [ %267, %288 ], [ %267, %271 ], [ %164, %163 ], [ %78, %117 ], [ %78, %77 ], [ %78, %99 ], [ %183, %186 ], [ %183, %243 ], [ %232, %230 ], [ %239, %238 ], [ %217, %215 ], [ %225, %224 ], [ %294, %292 ], [ %301, %300 ], [ %277, %275 ], [ %285, %284 ]
  %306 = phi i32 [ %185, %262 ], [ %185, %182 ], [ %185, %242 ], [ 1, %288 ], [ 1, %271 ], [ 1, %163 ], [ 0, %117 ], [ 0, %77 ], [ 0, %99 ], [ %185, %186 ], [ %185, %243 ], [ 1, %230 ], [ 1, %238 ], [ 1, %215 ], [ 1, %224 ], [ 1, %292 ], [ 1, %300 ], [ 1, %275 ], [ 1, %284 ]
  %307 = tail call double @_ZNK5blink23CSSTokenizerInputStream9GetDoubleEjj(%"class.blink::CSSTokenizerInputStream"* %3, i32 0, i32 %305) #9
  %308 = load i32, i32* %4, align 8
  %309 = add i32 %308, %305
  store i32 %309, i32* %4, align 8
  tail call void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEdNS_16NumericValueTypeENS_11NumericSignE(%"class.blink::CSSParserToken"* %0, i32 7, double %307, i32 %306, i32 %33) #9
  ret void
}

declare double @_ZNK5blink23CSSTokenizerInputStream9GetDoubleEjj(%"class.blink::CSSTokenizerInputStream"*, i32, i32) local_unnamed_addr #2

declare void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEdNS_16NumericValueTypeENS_11NumericSignE(%"class.blink::CSSParserToken"*, i32, double, i32, i32) unnamed_addr #2

declare void @_ZN5blink14CSSParserToken26ConvertToDimensionWithUnitEN3WTF10StringViewE(%"class.blink::CSSParserToken"*, %"class.WTF::StringView"* byval(%"class.WTF::StringView") align 8) local_unnamed_addr #2

declare void @_ZN5blink14CSSParserToken19ConvertToPercentageEv(%"class.blink::CSSParserToken"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer15ConsumeUrlTokenEv(%"class.blink::CSSParserToken"* noalias nocapture sret, %"class.blink::CSSTokenizer"*) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.WTF::StringBuilder", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0
  tail call void @_ZN5blink23CSSTokenizerInputStream25AdvanceUntilNonWhitespaceEv(%"class.blink::CSSTokenizerInputStream"* %6) #9
  %7 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp ult i32 %8, %10
  br i1 %11, label %12, label %70

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 1
  %17 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %18 = bitcast %"class.WTF::StringImpl"* %16 to i16*
  br label %19

19:                                               ; preds = %12, %66
  %20 = phi i32 [ %8, %12 ], [ %68, %66 ]
  %21 = phi i32 [ 0, %12 ], [ %67, %66 ]
  %22 = load atomic i32, i32* %15 monotonic, align 4
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = zext i32 %20 to i64
  br i1 %24, label %30, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds i8, i8* %17, i64 %25
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i16
  br label %33

30:                                               ; preds = %19
  %31 = getelementptr inbounds i16, i16* %18, i64 %25
  %32 = load i16, i16* %31, align 2
  br label %33

33:                                               ; preds = %26, %30
  %34 = phi i16 [ %29, %26 ], [ %32, %30 ]
  %35 = icmp eq i16 %34, 41
  br i1 %35, label %36, label %63

36:                                               ; preds = %33
  %37 = icmp ult i32 %10, %8
  %38 = select i1 %37, i32 %10, i32 %8
  %39 = add i32 %21, 1
  %40 = add i32 %39, %8
  store i32 %40, i32* %7, align 8
  %41 = load atomic i32, i32* %15 monotonic, align 4, !noalias !48
  %42 = and i32 %41, 1
  %43 = icmp eq i32 %42, 0
  %44 = zext i32 %38 to i64
  %45 = getelementptr inbounds i16, i16* %18, i64 %44
  %46 = bitcast i16* %45 to i8*
  %47 = getelementptr inbounds i8, i8* %17, i64 %44
  %48 = select i1 %43, i8* %46, i8* %47
  %49 = ptrtoint i8* %48 to i64
  %50 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %51 = load i32, i32* %50, align 8
  %52 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 1
  store i32 %21, i32* %52, align 4
  %53 = load atomic i32, i32* %15 monotonic, align 4
  %54 = shl i32 %53, 18
  %55 = and i32 %54, 262144
  %56 = and i32 %51, -262400
  %57 = or i32 %56, 4
  %58 = or i32 %55, %57
  store i32 %58, i32* %50, align 8
  %59 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 2
  %60 = bitcast i8** %59 to i64*
  store i64 %49, i64* %60, align 8
  %61 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 3
  %62 = bitcast %union.anon* %61 to i32*
  store i32 -1, i32* %62, align 8
  br label %433

63:                                               ; preds = %33
  %64 = icmp ult i16 %34, 33
  br i1 %64, label %70, label %65

65:                                               ; preds = %63
  switch i16 %34, label %66 [
    i16 127, label %70
    i16 92, label %70
    i16 40, label %70
    i16 39, label %70
    i16 34, label %70
  ]

66:                                               ; preds = %65
  %67 = add i32 %21, 1
  %68 = add i32 %8, %67
  %69 = icmp ult i32 %68, %10
  br i1 %69, label %19, label %70

70:                                               ; preds = %63, %65, %65, %65, %65, %65, %66, %2
  %71 = bitcast %"class.WTF::StringBuilder"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %71) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %71, i8 -86, i64 48, i1 false)
  %72 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %72, align 8
  %73 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 1
  %74 = bitcast %union.anon.11* %73 to i8*
  store i8 0, i8* %74, align 8
  %75 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 2
  store i32 0, i32* %75, align 8
  %76 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 3
  store i8 1, i8* %76, align 4
  %77 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 4
  store i8 0, i8* %77, align 1
  br i1 %11, label %78, label %80

78:                                               ; preds = %70
  %79 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 0, i32 2, i32 0
  br label %83

80:                                               ; preds = %343, %70
  %81 = phi i32 [ %8, %70 ], [ %344, %343 ]
  %82 = add i32 %81, 1
  store i32 %82, i32* %7, align 8
  br label %106

83:                                               ; preds = %78, %343
  %84 = phi i32 [ %10, %78 ], [ %345, %343 ]
  %85 = phi i32 [ %8, %78 ], [ %344, %343 ]
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %79, align 8
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 1
  br i1 %90, label %98, label %92

92:                                               ; preds = %83
  %93 = bitcast %"class.WTF::StringImpl"* %91 to i8*
  %94 = zext i32 %85 to i64
  %95 = getelementptr inbounds i8, i8* %93, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i16
  br label %103

98:                                               ; preds = %83
  %99 = bitcast %"class.WTF::StringImpl"* %91 to i16*
  %100 = zext i32 %85 to i64
  %101 = getelementptr inbounds i16, i16* %99, i64 %100
  %102 = load i16, i16* %101, align 2
  br label %103

103:                                              ; preds = %98, %92
  %104 = phi i16 [ %97, %92 ], [ %102, %98 ]
  %105 = add nuw i32 %85, 1
  store i32 %105, i32* %7, align 8
  switch i16 %104, label %185 [
    i16 0, label %299
    i16 41, label %106
  ]

106:                                              ; preds = %103, %80
  %107 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %107) #9
  %108 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %3) #9
  %109 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %108, %"class.WTF::StringImpl"** %109, align 8
  %110 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2
  %111 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %112 = load i32, i32* %111, align 4, !noalias !51
  %113 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %114 = load i32, i32* %113, align 8, !noalias !51
  %115 = icmp eq i32 %112, %114
  br i1 %115, label %142, label %116, !prof !5

116:                                              ; preds = %106
  %117 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %110, i64 0, i32 0, i32 0, i32 0
  %118 = load %"class.WTF::String"*, %"class.WTF::String"** %117, align 8, !noalias !51
  %119 = zext i32 %112 to i64
  %120 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %118, i64 %119, i32 0, i32 0
  store %"class.WTF::StringImpl"* %108, %"class.WTF::StringImpl"** %120, align 8, !noalias !51
  %121 = icmp eq %"class.WTF::StringImpl"* %108, null
  br i1 %121, label %139, label %122

122:                                              ; preds = %116
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %124 = load atomic i32, i32* %123 monotonic, align 4, !noalias !51
  %125 = and i32 %124, 2
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %139

127:                                              ; preds = %122
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 0
  %129 = load i32, i32* %128, align 4, !noalias !51
  %130 = zext i32 %129 to i33
  %131 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %130, i33 1) #9
  %132 = extractvalue { i33, i1 } %131, 1
  %133 = extractvalue { i33, i1 } %131, 0
  %134 = icmp slt i33 %133, 0
  %135 = or i1 %132, %134
  br i1 %135, label %136, label %137, !prof !5

136:                                              ; preds = %127
  call void @llvm.trap() #9, !noalias !51
  unreachable

137:                                              ; preds = %127
  %138 = trunc i33 %133 to i32
  store i32 %138, i32* %128, align 4, !noalias !51
  br label %139

139:                                              ; preds = %137, %122, %116
  %140 = load i32, i32* %111, align 4, !noalias !51
  %141 = add i32 %140, 1
  store i32 %141, i32* %111, align 4, !noalias !51
  br label %143

142:                                              ; preds = %106
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.1"* %110, %"class.WTF::String"* nonnull dereferenceable(8) %4) #9, !noalias !51
  br label %143

143:                                              ; preds = %142, %139
  %144 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %109, align 8, !noalias !51
  %145 = icmp eq %"class.WTF::StringImpl"* %144, null
  br i1 %145, label %146, label %148

146:                                              ; preds = %143
  %147 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8, !noalias !51
  br label %153

148:                                              ; preds = %143
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 1
  %150 = load i32, i32* %149, align 4, !noalias !51
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 1
  %152 = ptrtoint %"class.WTF::StringImpl"* %151 to i64
  br label %153

153:                                              ; preds = %146, %148
  %154 = phi %"class.WTF::StringImpl"* [ %147, %146 ], [ %144, %148 ]
  %155 = phi i64 [ 0, %146 ], [ %152, %148 ]
  %156 = phi i32 [ 0, %146 ], [ %150, %148 ]
  %157 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %158 = load i32, i32* %157, align 8
  %159 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 1
  store i32 %156, i32* %159, align 4
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %154, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %161 = load atomic i32, i32* %160 monotonic, align 4
  %162 = shl i32 %161, 18
  %163 = and i32 %162, 262144
  %164 = and i32 %158, -262400
  %165 = or i32 %164, 4
  %166 = or i32 %163, %165
  store i32 %166, i32* %157, align 8
  %167 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 2
  %168 = bitcast i8** %167 to i64*
  store i64 %155, i64* %168, align 8
  %169 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 3
  %170 = bitcast %union.anon* %169 to i32*
  store i32 -1, i32* %170, align 8
  br i1 %145, label %184, label %171

171:                                              ; preds = %153
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %173 = load atomic i32, i32* %172 monotonic, align 4
  %174 = and i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 0
  %177 = load i32, i32* %176, align 4
  br i1 %175, label %178, label %180

178:                                              ; preds = %171
  %179 = add i32 %177, -1
  store i32 %179, i32* %176, align 4
  br label %180

180:                                              ; preds = %178, %171
  %181 = phi i32 [ %179, %178 ], [ %177, %171 ]
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %184

183:                                              ; preds = %180
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %144) #9
  br label %184

184:                                              ; preds = %153, %180, %183
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %107) #9
  br label %416

185:                                              ; preds = %103
  %186 = icmp ult i16 %104, 33
  br i1 %186, label %187, label %298

187:                                              ; preds = %185
  switch i16 %104, label %299 [
    i16 32, label %188
    i16 10, label %188
    i16 9, label %188
    i16 13, label %188
    i16 12, label %188
  ]

188:                                              ; preds = %187, %187, %187, %187, %187
  call void @_ZN5blink23CSSTokenizerInputStream25AdvanceUntilNonWhitespaceEv(%"class.blink::CSSTokenizerInputStream"* %6) #9
  %189 = load i32, i32* %7, align 8
  %190 = load i32, i32* %9, align 4
  %191 = icmp ult i32 %189, %190
  br i1 %191, label %192, label %219

192:                                              ; preds = %188
  %193 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %79, align 8
  %194 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %193, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %195 = load atomic i32, i32* %194 monotonic, align 4
  %196 = and i32 %195, 1
  %197 = icmp eq i32 %196, 0
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %193, i64 1
  br i1 %197, label %205, label %199

199:                                              ; preds = %192
  %200 = bitcast %"class.WTF::StringImpl"* %198 to i8*
  %201 = zext i32 %189 to i64
  %202 = getelementptr inbounds i8, i8* %200, i64 %201
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i16
  br label %210

205:                                              ; preds = %192
  %206 = bitcast %"class.WTF::StringImpl"* %198 to i16*
  %207 = zext i32 %189 to i64
  %208 = getelementptr inbounds i16, i16* %206, i64 %207
  %209 = load i16, i16* %208, align 2
  br label %210

210:                                              ; preds = %205, %199
  %211 = phi i16 [ %204, %199 ], [ %209, %205 ]
  %212 = icmp eq i16 %211, 41
  br i1 %212, label %213, label %215

213:                                              ; preds = %210
  %214 = add nuw i32 %189, 1
  store i32 %214, i32* %7, align 8
  br label %219

215:                                              ; preds = %210
  %216 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %79, align 8
  %217 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %216, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %218 = load atomic i32, i32* %217 monotonic, align 4
  br label %347

219:                                              ; preds = %188, %213
  %220 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %220) #9
  %221 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %3) #9
  %222 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %221, %"class.WTF::StringImpl"** %222, align 8
  %223 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2
  %224 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %225 = load i32, i32* %224, align 4, !noalias !54
  %226 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %227 = load i32, i32* %226, align 8, !noalias !54
  %228 = icmp eq i32 %225, %227
  br i1 %228, label %255, label %229, !prof !5

229:                                              ; preds = %219
  %230 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %223, i64 0, i32 0, i32 0, i32 0
  %231 = load %"class.WTF::String"*, %"class.WTF::String"** %230, align 8, !noalias !54
  %232 = zext i32 %225 to i64
  %233 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %231, i64 %232, i32 0, i32 0
  store %"class.WTF::StringImpl"* %221, %"class.WTF::StringImpl"** %233, align 8, !noalias !54
  %234 = icmp eq %"class.WTF::StringImpl"* %221, null
  br i1 %234, label %252, label %235

235:                                              ; preds = %229
  %236 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %221, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %237 = load atomic i32, i32* %236 monotonic, align 4, !noalias !54
  %238 = and i32 %237, 2
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %252

240:                                              ; preds = %235
  %241 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %221, i64 0, i32 0
  %242 = load i32, i32* %241, align 4, !noalias !54
  %243 = zext i32 %242 to i33
  %244 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %243, i33 1) #9
  %245 = extractvalue { i33, i1 } %244, 1
  %246 = extractvalue { i33, i1 } %244, 0
  %247 = icmp slt i33 %246, 0
  %248 = or i1 %245, %247
  br i1 %248, label %249, label %250, !prof !5

249:                                              ; preds = %240
  call void @llvm.trap() #9, !noalias !54
  unreachable

250:                                              ; preds = %240
  %251 = trunc i33 %246 to i32
  store i32 %251, i32* %241, align 4, !noalias !54
  br label %252

252:                                              ; preds = %250, %235, %229
  %253 = load i32, i32* %224, align 4, !noalias !54
  %254 = add i32 %253, 1
  store i32 %254, i32* %224, align 4, !noalias !54
  br label %256

255:                                              ; preds = %219
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.1"* %223, %"class.WTF::String"* nonnull dereferenceable(8) %5) #9, !noalias !54
  br label %256

256:                                              ; preds = %255, %252
  %257 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %222, align 8, !noalias !54
  %258 = icmp eq %"class.WTF::StringImpl"* %257, null
  br i1 %258, label %259, label %261

259:                                              ; preds = %256
  %260 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8, !noalias !54
  br label %266

261:                                              ; preds = %256
  %262 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %257, i64 0, i32 1
  %263 = load i32, i32* %262, align 4, !noalias !54
  %264 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %257, i64 1
  %265 = ptrtoint %"class.WTF::StringImpl"* %264 to i64
  br label %266

266:                                              ; preds = %259, %261
  %267 = phi i64 [ 0, %259 ], [ %265, %261 ]
  %268 = phi %"class.WTF::StringImpl"* [ %260, %259 ], [ %257, %261 ]
  %269 = phi i32 [ 0, %259 ], [ %263, %261 ]
  %270 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %271 = load i32, i32* %270, align 8
  %272 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 1
  store i32 %269, i32* %272, align 4
  %273 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %268, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %274 = load atomic i32, i32* %273 monotonic, align 4
  %275 = shl i32 %274, 18
  %276 = and i32 %275, 262144
  %277 = and i32 %271, -262400
  %278 = or i32 %277, 4
  %279 = or i32 %276, %278
  store i32 %279, i32* %270, align 8
  %280 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 2
  %281 = bitcast i8** %280 to i64*
  store i64 %267, i64* %281, align 8
  %282 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %0, i64 0, i32 3
  %283 = bitcast %union.anon* %282 to i32*
  store i32 -1, i32* %283, align 8
  br i1 %258, label %297, label %284

284:                                              ; preds = %266
  %285 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %257, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %286 = load atomic i32, i32* %285 monotonic, align 4
  %287 = and i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %257, i64 0, i32 0
  %290 = load i32, i32* %289, align 4
  br i1 %288, label %291, label %293

291:                                              ; preds = %284
  %292 = add i32 %290, -1
  store i32 %292, i32* %289, align 4
  br label %293

293:                                              ; preds = %291, %284
  %294 = phi i32 [ %292, %291 ], [ %290, %284 ]
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %297

296:                                              ; preds = %293
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %257) #9
  br label %297

297:                                              ; preds = %266, %293, %296
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %220) #9
  br label %416

298:                                              ; preds = %185
  switch i16 %104, label %299 [
    i16 34, label %347
    i16 39, label %347
    i16 40, label %347
  ]

299:                                              ; preds = %187, %103, %298
  %300 = phi i16 [ %104, %298 ], [ -3, %103 ], [ %104, %187 ]
  %301 = icmp ult i16 %300, 9
  %302 = icmp eq i16 %300, 11
  %303 = or i1 %301, %302
  br i1 %303, label %347, label %304

304:                                              ; preds = %299
  %305 = add i16 %300, -14
  %306 = icmp ult i16 %305, 18
  %307 = icmp eq i16 %300, 127
  %308 = or i1 %307, %306
  br i1 %308, label %347, label %309

309:                                              ; preds = %304
  %310 = icmp eq i16 %300, 92
  br i1 %310, label %311, label %342

311:                                              ; preds = %309
  %312 = icmp ult i32 %105, %84
  br i1 %312, label %313, label %330

313:                                              ; preds = %311
  %314 = load atomic i32, i32* %87 monotonic, align 4
  %315 = and i32 %314, 1
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %323, label %317

317:                                              ; preds = %313
  %318 = bitcast %"class.WTF::StringImpl"* %91 to i8*
  %319 = zext i32 %105 to i64
  %320 = getelementptr inbounds i8, i8* %318, i64 %319
  %321 = load i8, i8* %320, align 1
  %322 = zext i8 %321 to i16
  br label %328

323:                                              ; preds = %313
  %324 = bitcast %"class.WTF::StringImpl"* %91 to i16*
  %325 = zext i32 %105 to i64
  %326 = getelementptr inbounds i16, i16* %324, i64 %325
  %327 = load i16, i16* %326, align 2
  br label %328

328:                                              ; preds = %323, %317
  %329 = phi i16 [ %322, %317 ], [ %327, %323 ]
  switch i16 %329, label %330 [
    i16 13, label %347
    i16 10, label %347
    i16 12, label %347
  ]

330:                                              ; preds = %311, %328
  %331 = call i32 @_ZN5blink13ConsumeEscapeERNS_23CSSTokenizerInputStreamE(%"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %6) #9
  %332 = icmp ult i32 %331, 65536
  br i1 %332, label %333, label %335

333:                                              ; preds = %330
  %334 = trunc i32 %331 to i16
  call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* nonnull %3, i16 zeroext %334) #9
  br label %343

335:                                              ; preds = %330
  %336 = lshr i32 %331, 10
  %337 = trunc i32 %336 to i16
  %338 = add i16 %337, -10304
  call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* nonnull %3, i16 zeroext %338) #9
  %339 = trunc i32 %331 to i16
  %340 = and i16 %339, 1023
  %341 = or i16 %340, -9216
  call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* nonnull %3, i16 zeroext %341) #9
  br label %343

342:                                              ; preds = %309
  call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* nonnull %3, i16 zeroext %300)
  br label %343

343:                                              ; preds = %335, %333, %342
  %344 = load i32, i32* %7, align 8
  %345 = load i32, i32* %9, align 4
  %346 = icmp ult i32 %344, %345
  br i1 %346, label %83, label %80

347:                                              ; preds = %299, %298, %298, %298, %304, %328, %328, %328, %215
  %348 = phi %"class.WTF::StringImpl"* [ %216, %215 ], [ %86, %328 ], [ %86, %328 ], [ %86, %328 ], [ %86, %304 ], [ %86, %298 ], [ %86, %298 ], [ %86, %298 ], [ %86, %299 ]
  %349 = phi i32 [ %190, %215 ], [ %84, %328 ], [ %84, %328 ], [ %84, %328 ], [ %84, %304 ], [ %84, %298 ], [ %84, %298 ], [ %84, %298 ], [ %84, %299 ]
  %350 = phi i32 [ %189, %215 ], [ %105, %328 ], [ %105, %328 ], [ %105, %328 ], [ %105, %304 ], [ %105, %298 ], [ %105, %298 ], [ %105, %298 ], [ %105, %299 ]
  %351 = icmp ult i32 %350, %349
  br i1 %351, label %355, label %352

352:                                              ; preds = %405, %347
  %353 = phi i32 [ %350, %347 ], [ %407, %405 ]
  %354 = add i32 %353, 1
  store i32 %354, i32* %7, align 8
  br label %411

355:                                              ; preds = %347, %409
  %356 = phi %"class.WTF::StringImpl"* [ %410, %409 ], [ %348, %347 ]
  %357 = phi i32 [ %406, %409 ], [ %349, %347 ]
  %358 = phi i32 [ %407, %409 ], [ %350, %347 ]
  %359 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %356, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %360 = load atomic i32, i32* %359 monotonic, align 4
  %361 = and i32 %360, 1
  %362 = icmp eq i32 %361, 0
  %363 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %356, i64 1
  br i1 %362, label %370, label %364

364:                                              ; preds = %355
  %365 = bitcast %"class.WTF::StringImpl"* %363 to i8*
  %366 = zext i32 %358 to i64
  %367 = getelementptr inbounds i8, i8* %365, i64 %366
  %368 = load i8, i8* %367, align 1
  %369 = zext i8 %368 to i16
  br label %375

370:                                              ; preds = %355
  %371 = bitcast %"class.WTF::StringImpl"* %363 to i16*
  %372 = zext i32 %358 to i64
  %373 = getelementptr inbounds i16, i16* %371, i64 %372
  %374 = load i16, i16* %373, align 2
  br label %375

375:                                              ; preds = %370, %364
  %376 = phi i16 [ %369, %364 ], [ %374, %370 ]
  %377 = add nuw i32 %358, 1
  store i32 %377, i32* %7, align 8
  switch i16 %376, label %378 [
    i16 0, label %379
    i16 41, label %411
  ]

378:                                              ; preds = %375
  br label %379

379:                                              ; preds = %378, %375
  %380 = phi i16 [ -3, %375 ], [ %376, %378 ]
  %381 = icmp ult i32 %377, %357
  br i1 %381, label %382, label %397

382:                                              ; preds = %379
  %383 = load atomic i32, i32* %359 monotonic, align 4
  %384 = and i32 %383, 1
  %385 = icmp eq i32 %384, 0
  br i1 %385, label %392, label %386

386:                                              ; preds = %382
  %387 = bitcast %"class.WTF::StringImpl"* %363 to i8*
  %388 = zext i32 %377 to i64
  %389 = getelementptr inbounds i8, i8* %387, i64 %388
  %390 = load i8, i8* %389, align 1
  %391 = zext i8 %390 to i16
  br label %397

392:                                              ; preds = %382
  %393 = bitcast %"class.WTF::StringImpl"* %363 to i16*
  %394 = zext i32 %377 to i64
  %395 = getelementptr inbounds i16, i16* %393, i64 %394
  %396 = load i16, i16* %395, align 2
  br label %397

397:                                              ; preds = %392, %386, %379
  %398 = phi i16 [ 0, %379 ], [ %391, %386 ], [ %396, %392 ]
  %399 = icmp eq i16 %380, 92
  br i1 %399, label %400, label %405

400:                                              ; preds = %397
  switch i16 %398, label %401 [
    i16 13, label %405
    i16 10, label %405
    i16 12, label %405
  ]

401:                                              ; preds = %400
  %402 = call i32 @_ZN5blink13ConsumeEscapeERNS_23CSSTokenizerInputStreamE(%"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %6) #9
  %403 = load i32, i32* %7, align 8
  %404 = load i32, i32* %9, align 4
  br label %405

405:                                              ; preds = %401, %400, %400, %400, %397
  %406 = phi i32 [ %357, %400 ], [ %357, %400 ], [ %357, %400 ], [ %357, %397 ], [ %404, %401 ]
  %407 = phi i32 [ %377, %400 ], [ %377, %400 ], [ %377, %400 ], [ %377, %397 ], [ %403, %401 ]
  %408 = icmp ult i32 %407, %406
  br i1 %408, label %409, label %352

409:                                              ; preds = %405
  %410 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %79, align 8
  br label %355

411:                                              ; preds = %375, %352
  %412 = bitcast %"class.blink::CSSParserToken"* %0 to i32*
  %413 = load i32, i32* %412, align 8
  %414 = and i32 %413, -256
  %415 = or i32 %414, 5
  store i32 %415, i32* %412, align 8
  br label %416

416:                                              ; preds = %297, %184, %411
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %3) #9
  %417 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  %418 = icmp eq %"class.WTF::StringImpl"* %417, null
  br i1 %418, label %432, label %419

419:                                              ; preds = %416
  %420 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %417, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %421 = load atomic i32, i32* %420 monotonic, align 4
  %422 = and i32 %421, 2
  %423 = icmp eq i32 %422, 0
  %424 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %417, i64 0, i32 0
  %425 = load i32, i32* %424, align 4
  br i1 %423, label %426, label %428

426:                                              ; preds = %419
  %427 = add i32 %425, -1
  store i32 %427, i32* %424, align 4
  br label %428

428:                                              ; preds = %426, %419
  %429 = phi i32 [ %427, %426 ], [ %425, %419 ]
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %431, label %432

431:                                              ; preds = %428
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %417) #9
  br label %432

432:                                              ; preds = %416, %428, %431
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %71) #9
  br label %433

433:                                              ; preds = %36, %432
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer14RegisterStringERKN3WTF6StringE(%"class.WTF::StringView"* noalias nocapture sret, %"class.blink::CSSTokenizer"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2
  %5 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %6, %8
  br i1 %9, label %38, label %10, !prof !5

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %4, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %13, i32 0, i32 0
  store %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"** %16, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %17, label %35, label %18

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = and i32 %20, 2
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %35

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i33
  %27 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %26, i33 1) #9
  %28 = extractvalue { i33, i1 } %27, 1
  %29 = extractvalue { i33, i1 } %27, 0
  %30 = icmp slt i33 %29, 0
  %31 = or i1 %28, %30
  br i1 %31, label %32, label %33, !prof !5

32:                                               ; preds = %23
  tail call void @llvm.trap() #9
  unreachable

33:                                               ; preds = %23
  %34 = trunc i33 %29 to i32
  store i32 %34, i32* %24, align 4
  br label %35

35:                                               ; preds = %33, %18, %10
  %36 = load i32, i32* %5, align 4
  %37 = add i32 %36, 1
  store i32 %37, i32* %5, align 4
  br label %39

38:                                               ; preds = %3
  tail call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.1"* %4, %"class.WTF::String"* dereferenceable(8) %2) #9
  br label %39

39:                                               ; preds = %35, %38
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %42, label %43, label %47

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  store i8* null, i8** %44, align 8
  %45 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %46 = bitcast %"class.WTF::StringView"* %0 to i64*
  store i64 %45, i64* %46, align 8
  br label %54

47:                                               ; preds = %39
  %48 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %48, align 8
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 1
  %52 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  %53 = bitcast i8** %52 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %51, %"class.WTF::StringImpl"** %53, align 8
  br label %54

54:                                               ; preds = %43, %47
  %55 = phi i32 [ %50, %47 ], [ 0, %43 ]
  %56 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  store i32 %55, i32* %56, align 8
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer29ConsumeSingleWhitespaceIfNextEv(%"class.blink::CSSTokenizer"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0
  tail call void @_ZN5blink29ConsumeSingleWhitespaceIfNextERNS_23CSSTokenizerInputStreamE(%"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink12CSSTokenizer13ConsumeEscapeEv(%"class.blink::CSSTokenizer"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0
  %3 = tail call i32 @_ZN5blink13ConsumeEscapeERNS_23CSSTokenizerInputStreamE(%"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %2) #9
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"*, i16 zeroext) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca i8, align 1
  %4 = alloca i16, align 2
  store i16 %1, i16* %4, align 2
  %5 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 4, !range !57
  %7 = icmp ne i8 %6, 0
  %8 = icmp ult i16 %1, 256
  %9 = and i1 %8, %7
  br i1 %9, label %10, label %35

10:                                               ; preds = %2
  %11 = trunc i16 %1 to i8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3)
  store i8 %11, i8* %3, align 1
  %12 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %13 = load i8, i8* %12, align 1, !range !57
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  tail call void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"* %0, i32 1) #9
  br label %16

16:                                               ; preds = %15, %10
  %17 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0
  %18 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %30, label %23, !prof !5

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %17, i64 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = zext i32 %19 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  store i8 %11, i8* %27, align 1
  %28 = load i32, i32* %18, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %18, align 4
  br label %31

30:                                               ; preds = %16
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector.12"* %17, i8* nonnull dereferenceable(1) %3) #9
  br label %31

31:                                               ; preds = %23, %30
  %32 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, 1
  store i32 %34, i32* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3)
  br label %62

35:                                               ; preds = %2
  %36 = icmp eq i8 %6, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %35
  %38 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %39 = load i8, i8* %38, align 1, !range !57
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %37, %35
  tail call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* %0, i32 1) #9
  br label %42

42:                                               ; preds = %37, %41
  %43 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1
  %44 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %45, %47
  br i1 %48, label %56, label %49, !prof !5

49:                                               ; preds = %42
  %50 = bitcast %union.anon.11* %43 to i16**
  %51 = load i16*, i16** %50, align 8
  %52 = zext i32 %45 to i64
  %53 = getelementptr inbounds i16, i16* %51, i64 %52
  store i16 %1, i16* %53, align 2
  %54 = load i32, i32* %44, align 4
  %55 = add i32 %54, 1
  store i32 %55, i32* %44, align 4
  br label %58

56:                                               ; preds = %42
  %57 = bitcast %union.anon.11* %43 to %"class.WTF::Vector.17"*
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.17"* %57, i16* nonnull dereferenceable(2) %4) #9
  br label %58

58:                                               ; preds = %49, %56
  %59 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %60 = load i32, i32* %59, align 8
  %61 = add i32 %60, 1
  store i32 %61, i32* %59, align 8
  br label %62

62:                                               ; preds = %58, %31
  ret void
}

declare void @_ZN5blink14CSSParserTokenC1ENS_18CSSParserTokenTypeEii(%"class.blink::CSSParserToken"*, i32, i32, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12CSSTokenizer21ConsumeBadUrlRemnantsEv(%"class.blink::CSSTokenizer"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp ult i32 %3, %5
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 2, i32 0
  %9 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0
  br label %13

10:                                               ; preds = %63, %1
  %11 = phi i32 [ %3, %1 ], [ %65, %63 ]
  %12 = add i32 %11, 1
  store i32 %12, i32* %2, align 8
  br label %67

13:                                               ; preds = %7, %63
  %14 = phi i32 [ %5, %7 ], [ %64, %63 ]
  %15 = phi i32 [ %3, %7 ], [ %65, %63 ]
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 1
  br i1 %20, label %28, label %22

22:                                               ; preds = %13
  %23 = bitcast %"class.WTF::StringImpl"* %21 to i8*
  %24 = zext i32 %15 to i64
  %25 = getelementptr inbounds i8, i8* %23, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i16
  br label %33

28:                                               ; preds = %13
  %29 = bitcast %"class.WTF::StringImpl"* %21 to i16*
  %30 = zext i32 %15 to i64
  %31 = getelementptr inbounds i16, i16* %29, i64 %30
  %32 = load i16, i16* %31, align 2
  br label %33

33:                                               ; preds = %28, %22
  %34 = phi i16 [ %27, %22 ], [ %32, %28 ]
  %35 = add nuw i32 %15, 1
  store i32 %35, i32* %2, align 8
  switch i16 %34, label %36 [
    i16 0, label %37
    i16 41, label %67
  ]

36:                                               ; preds = %33
  br label %37

37:                                               ; preds = %33, %36
  %38 = phi i16 [ -3, %33 ], [ %34, %36 ]
  %39 = icmp ult i32 %35, %14
  br i1 %39, label %40, label %55

40:                                               ; preds = %37
  %41 = load atomic i32, i32* %17 monotonic, align 4
  %42 = and i32 %41, 1
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %50, label %44

44:                                               ; preds = %40
  %45 = bitcast %"class.WTF::StringImpl"* %21 to i8*
  %46 = zext i32 %35 to i64
  %47 = getelementptr inbounds i8, i8* %45, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  br label %55

50:                                               ; preds = %40
  %51 = bitcast %"class.WTF::StringImpl"* %21 to i16*
  %52 = zext i32 %35 to i64
  %53 = getelementptr inbounds i16, i16* %51, i64 %52
  %54 = load i16, i16* %53, align 2
  br label %55

55:                                               ; preds = %37, %44, %50
  %56 = phi i16 [ 0, %37 ], [ %49, %44 ], [ %54, %50 ]
  %57 = icmp eq i16 %38, 92
  br i1 %57, label %58, label %63

58:                                               ; preds = %55
  switch i16 %56, label %59 [
    i16 13, label %63
    i16 10, label %63
    i16 12, label %63
  ]

59:                                               ; preds = %58
  %60 = tail call i32 @_ZN5blink13ConsumeEscapeERNS_23CSSTokenizerInputStreamE(%"class.blink::CSSTokenizerInputStream"* dereferenceable(16) %9) #9
  %61 = load i32, i32* %2, align 8
  %62 = load i32, i32* %4, align 4
  br label %63

63:                                               ; preds = %58, %58, %58, %55, %59
  %64 = phi i32 [ %14, %58 ], [ %14, %58 ], [ %14, %58 ], [ %14, %55 ], [ %62, %59 ]
  %65 = phi i32 [ %35, %58 ], [ %35, %58 ], [ %35, %58 ], [ %35, %55 ], [ %61, %59 ]
  %66 = icmp ult i32 %65, %64
  br i1 %66, label %13, label %10

67:                                               ; preds = %33, %10
  ret void
}

declare void @_ZN5blink29ConsumeSingleWhitespaceIfNextERNS_23CSSTokenizerInputStreamE(%"class.blink::CSSTokenizerInputStream"* dereferenceable(16)) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN5blink11ConsumeNameERNS_23CSSTokenizerInputStreamE(%"class.blink::CSSTokenizerInputStream"* dereferenceable(16)) local_unnamed_addr #2

declare i32 @_ZN5blink13ConsumeEscapeERNS_23CSSTokenizerInputStreamE(%"class.blink::CSSTokenizerInputStream"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12CSSTokenizer26NextTwoCharsAreValidEscapeEv(%"class.blink::CSSTokenizer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp ult i32 %3, %5
  br i1 %6, label %7, label %26

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 2, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 1
  br i1 %13, label %21, label %15

15:                                               ; preds = %7
  %16 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %17 = zext i32 %3 to i64
  %18 = getelementptr inbounds i8, i8* %16, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  br label %26

21:                                               ; preds = %7
  %22 = bitcast %"class.WTF::StringImpl"* %14 to i16*
  %23 = zext i32 %3 to i64
  %24 = getelementptr inbounds i16, i16* %22, i64 %23
  %25 = load i16, i16* %24, align 2
  br label %26

26:                                               ; preds = %1, %15, %21
  %27 = phi i16 [ 0, %1 ], [ %20, %15 ], [ %25, %21 ]
  %28 = add i32 %3, 1
  %29 = icmp ult i32 %28, %5
  br i1 %29, label %30, label %49

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 2, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 1
  %36 = icmp eq i32 %35, 0
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 1
  br i1 %36, label %44, label %38

38:                                               ; preds = %30
  %39 = bitcast %"class.WTF::StringImpl"* %37 to i8*
  %40 = zext i32 %28 to i64
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i16
  br label %49

44:                                               ; preds = %30
  %45 = bitcast %"class.WTF::StringImpl"* %37 to i16*
  %46 = zext i32 %28 to i64
  %47 = getelementptr inbounds i16, i16* %45, i64 %46
  %48 = load i16, i16* %47, align 2
  br label %49

49:                                               ; preds = %26, %38, %44
  %50 = phi i16 [ 0, %26 ], [ %43, %38 ], [ %48, %44 ]
  %51 = icmp eq i16 %27, 92
  br i1 %51, label %52, label %58

52:                                               ; preds = %49
  %53 = add i16 %50, -10
  %54 = icmp ult i16 %53, 4
  br i1 %54, label %55, label %58

55:                                               ; preds = %52
  %56 = trunc i16 %53 to i4
  %57 = icmp eq i4 %56, 1
  ret i1 %57

58:                                               ; preds = %52, %49
  %59 = phi i1 [ false, %49 ], [ true, %52 ]
  ret i1 %59
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12CSSTokenizer18NextCharsAreNumberEv(%"class.blink::CSSTokenizer"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp ult i32 %3, %5
  br i1 %6, label %7, label %30

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 2, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 1
  br i1 %13, label %21, label %15

15:                                               ; preds = %7
  %16 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %17 = zext i32 %3 to i64
  %18 = getelementptr inbounds i8, i8* %16, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  br label %26

21:                                               ; preds = %7
  %22 = bitcast %"class.WTF::StringImpl"* %14 to i16*
  %23 = zext i32 %3 to i64
  %24 = getelementptr inbounds i16, i16* %22, i64 %23
  %25 = load i16, i16* %24, align 2
  br label %26

26:                                               ; preds = %21, %15
  %27 = phi i16 [ %20, %15 ], [ %25, %21 ]
  %28 = icmp eq i16 %27, 0
  %29 = select i1 %28, i16 -3, i16 %27
  br label %30

30:                                               ; preds = %1, %26
  %31 = phi i16 [ %29, %26 ], [ 0, %1 ]
  %32 = add i32 %3, 1
  store i32 %32, i32* %2, align 8
  %33 = icmp ult i32 %32, %5
  br i1 %33, label %34, label %53

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 2, i32 0
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 1
  br i1 %40, label %48, label %42

42:                                               ; preds = %34
  %43 = bitcast %"class.WTF::StringImpl"* %41 to i8*
  %44 = zext i32 %32 to i64
  %45 = getelementptr inbounds i8, i8* %43, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i16
  br label %53

48:                                               ; preds = %34
  %49 = bitcast %"class.WTF::StringImpl"* %41 to i16*
  %50 = zext i32 %32 to i64
  %51 = getelementptr inbounds i16, i16* %49, i64 %50
  %52 = load i16, i16* %51, align 2
  br label %53

53:                                               ; preds = %48, %42, %30
  %54 = phi i16 [ 0, %30 ], [ %47, %42 ], [ %52, %48 ]
  %55 = add i16 %31, -48
  %56 = icmp ult i16 %55, 10
  br i1 %56, label %92, label %57

57:                                               ; preds = %53
  switch i16 %31, label %92 [
    i16 43, label %58
    i16 45, label %58
    i16 46, label %89
  ]

58:                                               ; preds = %57, %57
  %59 = add i16 %54, -48
  %60 = icmp ult i16 %59, 10
  br i1 %60, label %92, label %61

61:                                               ; preds = %58
  %62 = icmp eq i16 %54, 46
  br i1 %62, label %63, label %92

63:                                               ; preds = %61
  %64 = add i32 %3, 2
  %65 = icmp ult i32 %64, %5
  br i1 %65, label %66, label %85

66:                                               ; preds = %63
  %67 = getelementptr inbounds %"class.blink::CSSTokenizer", %"class.blink::CSSTokenizer"* %0, i64 0, i32 0, i32 2, i32 0
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 1
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 1
  br i1 %72, label %80, label %74

74:                                               ; preds = %66
  %75 = bitcast %"class.WTF::StringImpl"* %73 to i8*
  %76 = zext i32 %64 to i64
  %77 = getelementptr inbounds i8, i8* %75, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i16
  br label %85

80:                                               ; preds = %66
  %81 = bitcast %"class.WTF::StringImpl"* %73 to i16*
  %82 = zext i32 %64 to i64
  %83 = getelementptr inbounds i16, i16* %81, i64 %82
  %84 = load i16, i16* %83, align 2
  br label %85

85:                                               ; preds = %80, %74, %63
  %86 = phi i16 [ 0, %63 ], [ %79, %74 ], [ %84, %80 ]
  %87 = add i16 %86, -48
  %88 = icmp ult i16 %87, 10
  br label %92

89:                                               ; preds = %57
  %90 = add i16 %54, -48
  %91 = icmp ult i16 %90, 10
  br label %92

92:                                               ; preds = %53, %57, %58, %61, %85, %89
  %93 = phi i1 [ %91, %89 ], [ true, %53 ], [ true, %58 ], [ false, %61 ], [ %88, %85 ], [ false, %57 ]
  store i32 %3, i32* %2, align 8
  ret i1 %93
}

declare zeroext i1 @_ZN5blink22NextCharsAreIdentifierEDsRKNS_23CSSTokenizerInputStreamE(i16 zeroext, %"class.blink::CSSTokenizerInputStream"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer.7"*, %"class.blink::CSSParserToken"*) local_unnamed_addr #5 comdat align 2 {
  %3 = bitcast %"class.blink::CSSParserToken"* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #9
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector.12"*, i8* dereferenceable(1)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = icmp ugt i8* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.12"* %0, i32 %5) #9
  %14 = load i8*, i8** %6, align 8
  br label %21

15:                                               ; preds = %9
  %16 = ptrtoint i8* %1 to i64
  %17 = ptrtoint i8* %7 to i64
  %18 = sub i64 %16, %17
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.12"* %0, i32 %5) #9
  %19 = load i8*, i8** %6, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 %18
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ %14, %13 ], [ %19, %15 ]
  %23 = phi i8* [ %1, %13 ], [ %20, %15 ]
  %24 = load i32, i32* %3, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  %27 = load i8, i8* %23, align 1
  store i8 %27, i8* %26, align 1
  %28 = load i32, i32* %3, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.12"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #9
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8* %15, i8* %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #9
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #9
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #9
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %50, !prof !58

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %49

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 16
  br i1 %35, label %36, label %43

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %37) #9
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #9
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.12"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = trunc i64 %38 to i32
  br label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 1, i64 0
  %45 = ptrtoint i8* %44 to i64
  %46 = bitcast %"class.WTF::Vector.12"* %0 to i64*
  store atomic i64 %45, i64* %46 monotonic, align 8
  br label %47

47:                                               ; preds = %43, %36
  %48 = phi i32 [ 16, %43 ], [ %42, %36 ]
  store i32 %48, i32* %6, align 8
  br label %50

49:                                               ; preds = %30
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.12"* %0, i32 %27) #9
  br label %50

50:                                               ; preds = %23, %47, %49
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.12"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp ult i32 %1, 17
  br i1 %3, label %4, label %26

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = icmp eq i8* %8, %6
  %10 = or i1 %7, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = ptrtoint i8* %8 to i64
  %13 = bitcast %"class.WTF::Vector.12"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %14, align 8
  br label %51

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0
  %19 = ptrtoint i8* %8 to i64
  %20 = bitcast %"class.WTF::Vector.12"* %0 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %21, align 8
  %22 = icmp eq i8* %8, null
  br i1 %22, label %25, label %23, !prof !5

23:                                               ; preds = %15
  %24 = zext i32 %17 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %8, i8* nonnull align 1 %6, i64 %24, i1 false) #9
  br label %25

25:                                               ; preds = %23, %15
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.13"* %18, i8* nonnull %6) #9
  br label %51

26:                                               ; preds = %2
  %27 = zext i32 %1 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %27) #9
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #9
  %30 = ptrtoint i8* %29 to i64
  %31 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %29, null
  %34 = icmp ne i8* %32, null
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %41, !prof !58

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %29, i8* nonnull align 1 %32, i64 %39, i1 false) #9
  %40 = load i8*, i8** %31, align 8
  br label %41

41:                                               ; preds = %26, %36
  %42 = phi i8* [ %32, %26 ], [ %40, %36 ]
  %43 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 1, i64 0
  %44 = icmp eq i8* %43, %42
  br i1 %44, label %47, label %45, !prof !58

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.13"* %46, i8* %42) #9
  br label %47

47:                                               ; preds = %41, %45
  %48 = bitcast %"class.WTF::Vector.12"* %0 to i64*
  store atomic i64 %30, i64* %48 monotonic, align 8
  %49 = trunc i64 %28 to i32
  %50 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %49, i32* %50, align 8
  br label %51

51:                                               ; preds = %25, %47, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #9
  ret i64 %20
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.13"*, i8*) local_unnamed_addr #5 comdat align 2 {
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1) #9
  ret void
}

declare void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.17"*, i16* dereferenceable(2)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp ugt i16* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i16, i16* %7, i64 %10
  %12 = icmp ugt i16* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.17"* %0, i32 %5) #9
  %14 = load i16*, i16** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i16* %1 to i64
  %17 = ptrtoint i16* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 1
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.17"* %0, i32 %5) #9
  %20 = load i16*, i16** %6, align 8
  %21 = getelementptr inbounds i16, i16* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i16* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i16* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i16, i16* %23, i64 %26
  %28 = load i16, i16* %24, align 2
  store i16 %28, i16* %27, align 2
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.17"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #9
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8* %15, i8* %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #9
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #9
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #9
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !58

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = icmp eq i16* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 8
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %37) #9
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #9
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.17"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 1
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.17"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 8, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.17"* %0, i32 %27) #9
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.17"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp ult i32 %1, 9
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = icmp eq i16* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i16*
  %10 = icmp eq i16* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.17"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.17"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !5

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i16* %6 to i8*
  %27 = shl nuw nsw i64 %25, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %8, i8* nonnull align 2 %26, i64 %27, i1 false) #9
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.18"* %19, i16* nonnull %6) #9
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %30) #9
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #9
  %33 = lshr i64 %31, 1
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i16*, i16** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i16* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !58

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i16* %36 to i8*
  %45 = shl nuw nsw i64 %43, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %32, i8* nonnull align 2 %44, i64 %45, i1 false) #9
  %46 = load i16*, i16** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i16* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i16*
  %51 = icmp eq i16* %48, %50
  br i1 %51, label %54, label %52, !prof !58

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.18"* %53, i16* %48) #9
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.17"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.17", %"class.WTF::Vector.17"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.18"*, i16*) local_unnamed_addr #5 comdat align 2 {
  %3 = bitcast i16* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #9
  ret void
}

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink14CSSParserTokenEEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 89391104
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 89391104) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = mul i64 %0, 24
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS2_EEvOT_(%"class.WTF::Vector.6"*, %"class.blink::CSSParserToken"* dereferenceable(24)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::CSSParserToken"*, %"class.blink::CSSParserToken"** %6, align 8
  %8 = icmp ugt %"class.blink::CSSParserToken"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %7, i64 %10
  %12 = icmp ugt %"class.blink::CSSParserToken"* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.6"* %0, i32 %5) #9
  %14 = load %"class.blink::CSSParserToken"*, %"class.blink::CSSParserToken"** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint %"class.blink::CSSParserToken"* %1 to i64
  %17 = ptrtoint %"class.blink::CSSParserToken"* %7 to i64
  %18 = sub i64 %16, %17
  %19 = sdiv exact i64 %18, 24
  tail call void @_ZN3WTF6VectorIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.6"* %0, i32 %5) #9
  %20 = load %"class.blink::CSSParserToken"*, %"class.blink::CSSParserToken"** %6, align 8
  %21 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi %"class.blink::CSSParserToken"* [ %14, %13 ], [ %20, %15 ]
  %24 = phi %"class.blink::CSSParserToken"* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.blink::CSSParserToken", %"class.blink::CSSParserToken"* %23, i64 %26
  %28 = bitcast %"class.blink::CSSParserToken"* %27 to i8*
  %29 = bitcast %"class.blink::CSSParserToken"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 24, i1 false) #9
  %30 = load i32, i32* %3, align 4
  %31 = add i32 %30, 1
  store i32 %31, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.6"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #9
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8* %15, i8* %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #9
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #9
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #9
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !58

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.blink::CSSParserToken"*, %"class.blink::CSSParserToken"** %31, align 8
  %33 = icmp eq %"class.blink::CSSParserToken"* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 32
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink14CSSParserTokenEEEmm(i64 %37) #9
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink14CSSParserTokenEEEPKcv, i64 0, i64 0)) #9
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = udiv i64 %38, 24
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 32, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.6"* %0, i32 %27) #9
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.6"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp ult i32 %1, 33
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::CSSParserToken"*, %"class.blink::CSSParserToken"** %5, align 8
  %7 = icmp eq %"class.blink::CSSParserToken"* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to %"class.blink::CSSParserToken"*
  %10 = icmp eq %"class.blink::CSSParserToken"* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 32, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 32, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !5

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast %"class.blink::CSSParserToken"* %6 to i8*
  %27 = mul nuw nsw i64 %25, 24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* nonnull align 8 %26, i64 %27, i1 false) #9
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer.7"* %19, %"class.blink::CSSParserToken"* nonnull %6) #9
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink14CSSParserTokenEEEmm(i64 %30) #9
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink14CSSParserTokenEEEPKcv, i64 0, i64 0)) #9
  %33 = udiv i64 %31, 24
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.blink::CSSParserToken"*, %"class.blink::CSSParserToken"** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne %"class.blink::CSSParserToken"* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !58

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast %"class.blink::CSSParserToken"* %36 to i8*
  %45 = mul nuw nsw i64 %43, 24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %32, i8* nonnull align 8 %44, i64 %45, i1 false) #9
  %46 = load %"class.blink::CSSParserToken"*, %"class.blink::CSSParserToken"** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi %"class.blink::CSSParserToken"* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to %"class.blink::CSSParserToken"*
  %51 = icmp eq %"class.blink::CSSParserToken"* %48, %50
  br i1 %51, label %54, label %52, !prof !58

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIN5blink14CSSParserTokenELj32ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer.7"* %53, %"class.blink::CSSParserToken"* %48) #9
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRS2_EEvOT_(%"class.WTF::Vector"*, i32* dereferenceable(4)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp ugt i32* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i32, i32* %7, i64 %10
  %12 = icmp ugt i32* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #9
  %14 = load i32*, i32** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i32* %1 to i64
  %17 = ptrtoint i32* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 2
  tail call void @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #9
  %20 = load i32*, i32** %6, align 8
  %21 = getelementptr inbounds i32, i32* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i32* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i32* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i32, i32* %23, i64 %26
  %28 = load i32, i32* %24, align 4
  store i32 %28, i32* %27, align 4
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #9
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8* %15, i8* %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #9
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #9
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #9
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !58

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = icmp eq i32* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 8
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18CSSParserTokenTypeEEEmm(i64 %37) #9
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18CSSParserTokenTypeEEEPKcv, i64 0, i64 0)) #9
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 2
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 8, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %27) #9
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp ult i32 %1, 9
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i32*
  %10 = icmp eq i32* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !5

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i32* %6 to i8*
  %27 = shl nuw nsw i64 %25, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %8, i8* nonnull align 4 %26, i64 %27, i1 false) #9
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer"* %19, i32* nonnull %6) #9
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18CSSParserTokenTypeEEEmm(i64 %30) #9
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18CSSParserTokenTypeEEEPKcv, i64 0, i64 0)) #9
  %33 = lshr i64 %31, 2
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i32* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !58

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i32* %36 to i8*
  %45 = shl nuw nsw i64 %43, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %32, i8* nonnull align 4 %44, i64 %45, i1 false) #9
  %46 = load i32*, i32** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i32* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i32*
  %51 = icmp eq i32* %48, %50
  br i1 %51, label %54, label %52, !prof !58

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer"* %53, i32* %48) #9
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18CSSParserTokenTypeEEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer"*, i32*) local_unnamed_addr #5 comdat align 2 {
  %3 = bitcast i32* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink18CSSParserTokenTypeELj8ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  ret i32* %26
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.1"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %8 = icmp ugt %"class.WTF::String"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::String"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !58

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::String"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::String"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::String"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !58

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #9
  %47 = bitcast %"class.WTF::Vector.1"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #9
  %51 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::String"* %1 to i64
  %56 = ptrtoint %"class.WTF::String"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !58

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::String"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %71) #9
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::String"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::String"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !58

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #9
  %87 = bitcast %"class.WTF::Vector.1"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #9
  %91 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::String"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::String"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::String"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::String"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %101, i64 0, i32 0, i32 0
  %105 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %104, align 8
  %106 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 %103, i32 0, i32 0
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %106, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %107, label %125, label %108

108:                                              ; preds = %99
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %125

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i33
  %117 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %116, i33 1) #9
  %118 = extractvalue { i33, i1 } %117, 1
  %119 = extractvalue { i33, i1 } %117, 0
  %120 = icmp slt i33 %119, 0
  %121 = or i1 %118, %120
  br i1 %121, label %122, label %123, !prof !5

122:                                              ; preds = %113
  tail call void @llvm.trap() #9
  unreachable

123:                                              ; preds = %113
  %124 = trunc i33 %119 to i32
  store i32 %124, i32* %114, align 4
  br label %125

125:                                              ; preds = %99, %108, %123
  %126 = load i32, i32* %3, align 4
  %127 = add i32 %126, 1
  store i32 %127, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN5blink12CSSTokenizer10BlockStartENS_18CSSParserTokenTypeE: argument 0"}
!4 = distinct !{!4, !"_ZN5blink12CSSTokenizer10BlockStartENS_18CSSParserTokenTypeE"}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN5blink12CSSTokenizer8BlockEndENS_18CSSParserTokenTypeES1_: argument 0"}
!8 = distinct !{!8, !"_ZN5blink12CSSTokenizer8BlockEndENS_18CSSParserTokenTypeES1_"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN5blink12CSSTokenizer10BlockStartENS_18CSSParserTokenTypeE: argument 0"}
!11 = distinct !{!11, !"_ZN5blink12CSSTokenizer10BlockStartENS_18CSSParserTokenTypeE"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN5blink12CSSTokenizer8BlockEndENS_18CSSParserTokenTypeES1_: argument 0"}
!14 = distinct !{!14, !"_ZN5blink12CSSTokenizer8BlockEndENS_18CSSParserTokenTypeES1_"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN5blink12CSSTokenizer10BlockStartENS_18CSSParserTokenTypeE: argument 0"}
!17 = distinct !{!17, !"_ZN5blink12CSSTokenizer10BlockStartENS_18CSSParserTokenTypeE"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZN5blink12CSSTokenizer8BlockEndENS_18CSSParserTokenTypeES1_: argument 0"}
!20 = distinct !{!20, !"_ZN5blink12CSSTokenizer8BlockEndENS_18CSSParserTokenTypeES1_"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZN5blink12CSSTokenizer9NextTokenEv: argument 0"}
!23 = distinct !{!23, !"_ZN5blink12CSSTokenizer9NextTokenEv"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZNK5blink23CSSTokenizerInputStream7RangeAtEjj: argument 0"}
!26 = distinct !{!26, !"_ZNK5blink23CSSTokenizerInputStream7RangeAtEjj"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN5blink12CSSTokenizer9NextTokenEv: argument 0"}
!29 = distinct !{!29, !"_ZN5blink12CSSTokenizer9NextTokenEv"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN5blink12CSSTokenizer9NextTokenEv: argument 0"}
!32 = distinct !{!32, !"_ZN5blink12CSSTokenizer9NextTokenEv"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZN5blink12CSSTokenizer10BlockStartENS_18CSSParserTokenTypeES1_N3WTF10StringViewE: argument 0"}
!35 = distinct !{!35, !"_ZN5blink12CSSTokenizer10BlockStartENS_18CSSParserTokenTypeES1_N3WTF10StringViewE"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZNK5blink23CSSTokenizerInputStream7RangeAtEjj: argument 0"}
!38 = distinct !{!38, !"_ZNK5blink23CSSTokenizerInputStream7RangeAtEjj"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN5blink12CSSTokenizer14RegisterStringERKN3WTF6StringE: argument 0"}
!41 = distinct !{!41, !"_ZN5blink12CSSTokenizer14RegisterStringERKN3WTF6StringE"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZNK5blink23CSSTokenizerInputStream7RangeAtEjj: argument 0"}
!44 = distinct !{!44, !"_ZNK5blink23CSSTokenizerInputStream7RangeAtEjj"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZN5blink12CSSTokenizer14RegisterStringERKN3WTF6StringE: argument 0"}
!47 = distinct !{!47, !"_ZN5blink12CSSTokenizer14RegisterStringERKN3WTF6StringE"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZNK5blink23CSSTokenizerInputStream7RangeAtEjj: argument 0"}
!50 = distinct !{!50, !"_ZNK5blink23CSSTokenizerInputStream7RangeAtEjj"}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZN5blink12CSSTokenizer14RegisterStringERKN3WTF6StringE: argument 0"}
!53 = distinct !{!53, !"_ZN5blink12CSSTokenizer14RegisterStringERKN3WTF6StringE"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_ZN5blink12CSSTokenizer14RegisterStringERKN3WTF6StringE: argument 0"}
!56 = distinct !{!56, !"_ZN5blink12CSSTokenizer14RegisterStringERKN3WTF6StringE"}
!57 = !{i8 0, i8 2}
!58 = !{!"branch_weights", i32 2000, i32 1}
