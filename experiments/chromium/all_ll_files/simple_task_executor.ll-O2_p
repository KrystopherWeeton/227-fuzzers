; ModuleID = '../../base/task/simple_task_executor.cc'
source_filename = "../../base/task/simple_task_executor.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::SimpleTaskExecutor" = type { %"class.base::TaskExecutor", %class.scoped_refptr, %"class.base::TaskExecutor"* }
%"class.base::TaskExecutor" = type { i32 (...)** }
%class.scoped_refptr = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TaskTraits" = type opaque
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.1 }
%class.scoped_refptr.1 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.2", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }

@_ZTVN4base18SimpleTaskExecutorE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::SimpleTaskExecutor"*)* @_ZN4base18SimpleTaskExecutorD2Ev to i8*), i8* bitcast (void (%"class.base::SimpleTaskExecutor"*)* @_ZN4base18SimpleTaskExecutorD0Ev to i8*), i8* bitcast (i1 (%"class.base::SimpleTaskExecutor"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::OnceCallback"*, i64)* @_ZN4base18SimpleTaskExecutor15PostDelayedTaskERKNS_8LocationERKNS_10TaskTraitsENS_12OnceCallbackIFvvEEENS_9TimeDeltaE to i8*), i8* bitcast (%"class.base::TaskRunner"* (%"class.base::SimpleTaskExecutor"*, %"class.base::TaskTraits"*)* @_ZN4base18SimpleTaskExecutor16CreateTaskRunnerERKNS_10TaskTraitsE to i8*), i8* bitcast (%"class.base::SequencedTaskRunner"* (%"class.base::SimpleTaskExecutor"*, %"class.base::TaskTraits"*)* @_ZN4base18SimpleTaskExecutor25CreateSequencedTaskRunnerERKNS_10TaskTraitsE to i8*), i8* bitcast (%"class.base::SingleThreadTaskRunner"* (%"class.base::SimpleTaskExecutor"*, %"class.base::TaskTraits"*, i32)* @_ZN4base18SimpleTaskExecutor28CreateSingleThreadTaskRunnerERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE to i8*)] }, align 8

@_ZN4base18SimpleTaskExecutorC1E13scoped_refptrINS_22SingleThreadTaskRunnerEE = hidden unnamed_addr alias void (%"class.base::SimpleTaskExecutor"*, %"class.base::SingleThreadTaskRunner"*), void (%"class.base::SimpleTaskExecutor"*, %"class.base::SingleThreadTaskRunner"*)* @_ZN4base18SimpleTaskExecutorC2E13scoped_refptrINS_22SingleThreadTaskRunnerEE
@_ZN4base18SimpleTaskExecutorD1Ev = hidden unnamed_addr alias void (%"class.base::SimpleTaskExecutor"*), void (%"class.base::SimpleTaskExecutor"*)* @_ZN4base18SimpleTaskExecutorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base18SimpleTaskExecutorC2E13scoped_refptrINS_22SingleThreadTaskRunnerEE(%"class.base::SimpleTaskExecutor"*, %"class.base::SingleThreadTaskRunner"*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.base::SingleThreadTaskRunner"* %1 to i64
  %4 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4base18SimpleTaskExecutorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 1
  %7 = bitcast %class.scoped_refptr* %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 2
  %9 = tail call %"class.base::TaskExecutor"* @_ZN4base31GetTaskExecutorForCurrentThreadEv() #5
  store %"class.base::TaskExecutor"* %9, %"class.base::TaskExecutor"** %8, align 8
  %10 = icmp eq %"class.base::TaskExecutor"* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  tail call void @_ZN4base31SetTaskExecutorForCurrentThreadEPNS_12TaskExecutorE(%"class.base::TaskExecutor"* null) #5
  br label %12

12:                                               ; preds = %11, %2
  tail call void @_ZN4base31SetTaskExecutorForCurrentThreadEPNS_12TaskExecutorE(%"class.base::TaskExecutor"* %4) #5
  ret void
}

declare %"class.base::TaskExecutor"* @_ZN4base31GetTaskExecutorForCurrentThreadEv() local_unnamed_addr #1

declare void @_ZN4base31SetTaskExecutorForCurrentThreadEPNS_12TaskExecutorE(%"class.base::TaskExecutor"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base18SimpleTaskExecutorD2Ev(%"class.base::SimpleTaskExecutor"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4base18SimpleTaskExecutorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 2
  %4 = load %"class.base::TaskExecutor"*, %"class.base::TaskExecutor"** %3, align 8
  %5 = icmp eq %"class.base::TaskExecutor"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN4base31SetTaskExecutorForCurrentThreadEPNS_12TaskExecutorE(%"class.base::TaskExecutor"* null) #5
  %7 = load %"class.base::TaskExecutor"*, %"class.base::TaskExecutor"** %3, align 8
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi %"class.base::TaskExecutor"* [ null, %1 ], [ %7, %6 ]
  tail call void @_ZN4base31SetTaskExecutorForCurrentThreadEPNS_12TaskExecutorE(%"class.base::TaskExecutor"* %9) #5
  %10 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 1, i32 0
  %11 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %10, align 8
  %12 = icmp eq %"class.base::SingleThreadTaskRunner"* %11, null
  br i1 %12, label %21, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %11, i64 0, i32 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = atomicrmw sub i32* %15, i32 1 acq_rel
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %14, i64 -2
  %20 = bitcast %"class.base::RefCountedThreadSafe"* %19 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %20) #5
  br label %21

21:                                               ; preds = %8, %13, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base18SimpleTaskExecutorD0Ev(%"class.base::SimpleTaskExecutor"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4base18SimpleTaskExecutorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 2
  %4 = load %"class.base::TaskExecutor"*, %"class.base::TaskExecutor"** %3, align 8
  %5 = icmp eq %"class.base::TaskExecutor"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN4base31SetTaskExecutorForCurrentThreadEPNS_12TaskExecutorE(%"class.base::TaskExecutor"* null) #5
  %7 = load %"class.base::TaskExecutor"*, %"class.base::TaskExecutor"** %3, align 8
  br label %8

8:                                                ; preds = %6, %1
  %9 = phi %"class.base::TaskExecutor"* [ null, %1 ], [ %7, %6 ]
  tail call void @_ZN4base31SetTaskExecutorForCurrentThreadEPNS_12TaskExecutorE(%"class.base::TaskExecutor"* %9) #5
  %10 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 1, i32 0
  %11 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %10, align 8
  %12 = icmp eq %"class.base::SingleThreadTaskRunner"* %11, null
  br i1 %12, label %21, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %11, i64 0, i32 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = atomicrmw sub i32* %15, i32 1 acq_rel
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %14, i64 -2
  %20 = bitcast %"class.base::RefCountedThreadSafe"* %19 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %20) #5
  br label %21

21:                                               ; preds = %8, %13, %18
  %22 = bitcast %"class.base::SimpleTaskExecutor"* %0 to i8*
  tail call void @_ZdlPv(i8* %22) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base18SimpleTaskExecutor15PostDelayedTaskERKNS_8LocationERKNS_10TaskTraitsENS_12OnceCallbackIFvvEEENS_9TimeDeltaE(%"class.base::SimpleTaskExecutor"* nocapture readonly, %"class.base::Location"* dereferenceable(32), %"class.base::TaskTraits"* nocapture readnone, %"class.base::OnceCallback"* nocapture, i64) unnamed_addr #0 align 2 {
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 1, i32 0
  %8 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %7, align 8
  %9 = bitcast %"class.base::SingleThreadTaskRunner"* %8 to %"class.base::TaskRunner"*
  %10 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.base::OnceCallback"* %3 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.base::OnceCallback"* %6 to i64*
  store i64 %12, i64* %13, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %10, align 8
  %14 = bitcast %"class.base::SingleThreadTaskRunner"* %8 to i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)***
  %15 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*** %14, align 8
  %16 = load i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::TaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)** %15, align 8
  %17 = call zeroext i1 %16(%"class.base::TaskRunner"* %9, %"class.base::Location"* dereferenceable(32) %1, %"class.base::OnceCallback"* nonnull %6, i64 %4) #5
  %18 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %18) #5
  ret i1 %17
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %"class.base::TaskRunner"* @_ZN4base18SimpleTaskExecutor16CreateTaskRunnerERKNS_10TaskTraitsE(%"class.base::SimpleTaskExecutor"* nocapture readonly, %"class.base::TaskTraits"* nocapture readnone) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 1
  %4 = bitcast %class.scoped_refptr* %3 to %"class.base::TaskRunner"**
  %5 = load %"class.base::TaskRunner"*, %"class.base::TaskRunner"** %4, align 8
  %6 = icmp eq %"class.base::TaskRunner"* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::TaskRunner", %"class.base::TaskRunner"* %5, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  ret %"class.base::TaskRunner"* %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %"class.base::SequencedTaskRunner"* @_ZN4base18SimpleTaskExecutor25CreateSequencedTaskRunnerERKNS_10TaskTraitsE(%"class.base::SimpleTaskExecutor"* nocapture readonly, %"class.base::TaskTraits"* nocapture readnone) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 1
  %4 = bitcast %class.scoped_refptr* %3 to %"class.base::SequencedTaskRunner"**
  %5 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %4, align 8
  %6 = icmp eq %"class.base::SequencedTaskRunner"* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  ret %"class.base::SequencedTaskRunner"* %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %"class.base::SingleThreadTaskRunner"* @_ZN4base18SimpleTaskExecutor28CreateSingleThreadTaskRunnerERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE(%"class.base::SimpleTaskExecutor"* nocapture readonly, %"class.base::TaskTraits"* nocapture readnone, i32) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.base::SimpleTaskExecutor", %"class.base::SimpleTaskExecutor"* %0, i64 0, i32 1, i32 0
  %5 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %4, align 8
  %6 = icmp eq %"class.base::SingleThreadTaskRunner"* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %5, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %3, %7
  ret %"class.base::SingleThreadTaskRunner"* %5
}

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
