; ModuleID = '../../third_party/pdfium/xfa/fwl/cfwl_checkbox.cpp'
source_filename = "../../third_party/pdfium/xfa/fwl/cfwl_checkbox.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_Matrix = type { float, float, float, float, float, float }
%class.CFX_RectF = type { float, float, float, float }
%"class.fxcrt::UnownedPtr.17" = type { %class.CFX_RectF* }
%"class.fxcrt::UnownedPtr.18" = type { %class.CFWL_Widget* }
%class.CFWL_Widget = type { %class.IFWL_WidgetDelegate, %"class.CFWL_Widget::Properties", %class.CFX_RectF, i32, i64, %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember.0", %"class.cppgc::internal::BasicMember.1", %"class.cppgc::internal::BasicMember.2", %"class.cppgc::internal::BasicMember.3" }
%class.IFWL_WidgetDelegate = type { %"class.cppgc::GarbageCollectedMixin" }
%"class.cppgc::GarbageCollectedMixin" = type { i32 (...)** }
%"class.CFWL_Widget::Properties" = type { i32, i32, i32 }
%"class.cppgc::internal::BasicMember" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::MemberBase" = type { i8* }
%"class.cppgc::internal::BasicMember.0" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.1" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.2" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.3" = type { %"class.cppgc::internal::MemberBase" }
%"class.fxcrt::UnownedPtr.19" = type { %class.CFGAS_GEPath* }
%class.CFGAS_GEPath = type opaque
%"class.fxcrt::UnownedPtr.20" = type { %class.CFGAS_GEGraphics* }
%class.CFGAS_GEGraphics = type { %"class.fxcrt::UnownedPtr", %"struct.CFGAS_GEGraphics::TInfo", %"class.std::__1::vector.10" }
%"class.fxcrt::UnownedPtr" = type { %class.CFX_RenderDevice* }
%class.CFX_RenderDevice = type opaque
%"struct.CFGAS_GEGraphics::TInfo" = type { %class.CFX_GraphStateData, %class.CFX_Matrix, i8, %class.CFGAS_GEColor, %class.CFGAS_GEColor }
%class.CFX_GraphStateData = type { i8, i8, float, float, float, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%class.CFGAS_GEColor = type { i32, i32, %"class.fxcrt::UnownedPtr.8", %"class.fxcrt::UnownedPtr.9" }
%"class.fxcrt::UnownedPtr.8" = type { %class.CFGAS_GEPattern* }
%class.CFGAS_GEPattern = type opaque
%"class.fxcrt::UnownedPtr.9" = type { %class.CFGAS_GEShading* }
%class.CFGAS_GEShading = type opaque
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.std::__1::unique_ptr"* }
%struct.FDE_TextStyle = type { i8, i8, i8 }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr.22" }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%class.CFWL_CheckBox = type <{ %class.CFWL_Widget, %class.CFX_RectF, %class.CFX_RectF, %class.CFX_RectF, %class.CFX_RectF, %struct.FDE_TextStyle, i8, i8, [3 x i8], float, [4 x i8] }>
%class.CFWL_App = type { %"class.cppgc::internal::BasicMember.5", %"class.cppgc::internal::BasicMember.1", %"class.cppgc::internal::BasicMember.6" }
%"class.cppgc::internal::BasicMember.5" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.6" = type { %"class.cppgc::internal::MemberBase" }
%class.CFWL_ThemeBackground = type { %class.CFWL_ThemePart, %"class.fxcrt::UnownedPtr.19", %"class.fxcrt::UnownedPtr.20" }
%class.CFWL_ThemePart = type { %class.CFX_Matrix, %class.CFX_RectF, %"class.fxcrt::UnownedPtr.17", i32, i8, i8, i8, %"class.fxcrt::UnownedPtr.18" }
%class.CFWL_ThemeText = type { %class.CFWL_ThemePart, i8, %struct.FDE_TextStyle, %"class.fxcrt::WideString", %"class.fxcrt::UnownedPtr.20" }
%class.IFWL_ThemeProvider = type { %"class.cppgc::GarbageCollectedMixin", %"class.cppgc::internal::BasicMember.21", %"class.cppgc::internal::BasicMember.21", %"class.cppgc::internal::BasicMember.21", %"class.cppgc::internal::BasicMember.21", %"class.cppgc::internal::BasicMember.21", %"class.cppgc::internal::BasicMember.21", %"class.cppgc::internal::BasicMember.21", %"class.cppgc::internal::BasicMember.21", %"class.cppgc::internal::BasicMember.21", %"class.cppgc::internal::BasicMember.21", %"class.cppgc::internal::BasicMember.21" }
%"class.cppgc::internal::BasicMember.21" = type { %"class.cppgc::internal::MemberBase" }
%class.CFWL_Event = type { i32 (...)**, i32, %class.CFWL_Widget*, %class.CFWL_Widget* }
%class.CFWL_Message = type { i32 (...)**, i32, %"class.fxcrt::UnownedPtr.18", %"class.fxcrt::UnownedPtr.18" }
%class.CFWL_MessageMouse = type <{ %class.CFWL_Message, i8, i8, [2 x i8], %class.CFX_PTemplate, [4 x i8] }>
%class.CFX_PTemplate = type { float, float }
%class.CFWL_MessageKey = type <{ %class.CFWL_Message, i32, i32, i32, [4 x i8] }>
%"class.cppgc::Visitor" = type { i32 (...)** }

@_ZTV13CFWL_CheckBox = hidden unnamed_addr constant { [20 x i8*] } { [20 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFWL_Widget*, %"class.cppgc::Visitor"*)* @_ZNK11CFWL_Widget5TraceEPN5cppgc7VisitorE to i8*), i8* bitcast (void (%class.CFWL_CheckBox*)* @_ZN13CFWL_CheckBoxD2Ev to i8*), i8* bitcast (void (%class.CFWL_CheckBox*)* @_ZN13CFWL_CheckBoxD0Ev to i8*), i8* bitcast (void (%class.CFWL_CheckBox*, %class.CFWL_Message*)* @_ZN13CFWL_CheckBox16OnProcessMessageEP12CFWL_Message to i8*), i8* bitcast (void (%class.CFWL_Widget*, %class.CFWL_Event*)* @_ZN11CFWL_Widget14OnProcessEventEP10CFWL_Event to i8*), i8* bitcast (void (%class.CFWL_CheckBox*, %class.CFGAS_GEGraphics*, %class.CFX_Matrix*)* @_ZN13CFWL_CheckBox12OnDrawWidgetEP16CFGAS_GEGraphicsRK10CFX_Matrix to i8*), i8* bitcast (void (%class.CFWL_Widget*)* @_ZN11CFWL_Widget11PreFinalizeEv to i8*), i8* bitcast (i32 (%class.CFWL_CheckBox*)* @_ZNK13CFWL_CheckBox10GetClassIDEv to i8*), i8* bitcast (i1 (%class.CFWL_Widget*)* @_ZNK11CFWL_Widget6IsFormEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%class.CFWL_Widget*)* @_ZN11CFWL_Widget22GetAutosizedWidgetRectEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%class.CFWL_Widget*)* @_ZN11CFWL_Widget13GetWidgetRectEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%class.CFWL_Widget*)* @_ZN11CFWL_Widget13GetClientRectEv to i8*), i8* bitcast (void (%class.CFWL_Widget*, i32, i32)* @_ZN11CFWL_Widget14ModifyStylesExEjj to i8*), i8* bitcast (void (%class.CFWL_Widget*, i32)* @_ZN11CFWL_Widget9SetStatesEj to i8*), i8* bitcast (void (%class.CFWL_Widget*, i32)* @_ZN11CFWL_Widget12RemoveStatesEj to i8*), i8* bitcast (void (%class.CFWL_CheckBox*)* @_ZN13CFWL_CheckBox6UpdateEv to i8*), i8* bitcast (i32 (%class.CFWL_Widget*, %class.CFX_PTemplate*)* @_ZN11CFWL_Widget7HitTestERK13CFX_PTemplateIfE to i8*), i8* bitcast (void (%class.CFWL_CheckBox*, %class.CFGAS_GEGraphics*, %class.CFX_Matrix*)* @_ZN13CFWL_CheckBox10DrawWidgetEP16CFGAS_GEGraphicsRK10CFX_Matrix to i8*)] }, align 8
@__const._ZN13CFWL_CheckBox10DrawWidgetEP16CFGAS_GEGraphicsRK10CFX_Matrix.param = private unnamed_addr constant { { %class.CFX_Matrix, %class.CFX_RectF, %"class.fxcrt::UnownedPtr.17", i32, i8, i8, i8, [1 x i8], %"class.fxcrt::UnownedPtr.18" }, %"class.fxcrt::UnownedPtr.19", %"class.fxcrt::UnownedPtr.20" } { { %class.CFX_Matrix, %class.CFX_RectF, %"class.fxcrt::UnownedPtr.17", i32, i8, i8, i8, [1 x i8], %"class.fxcrt::UnownedPtr.18" } { %class.CFX_Matrix { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %class.CFX_RectF { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %"class.fxcrt::UnownedPtr.17" { %class.CFX_RectF* inttoptr (i64 -6148914691236517206 to %class.CFX_RectF*) }, i32 -1431655766, i8 -86, i8 -86, i8 -86, [1 x i8] c"\AA", %"class.fxcrt::UnownedPtr.18" { %class.CFWL_Widget* inttoptr (i64 -6148914691236517206 to %class.CFWL_Widget*) } }, %"class.fxcrt::UnownedPtr.19" { %class.CFGAS_GEPath* inttoptr (i64 -6148914691236517206 to %class.CFGAS_GEPath*) }, %"class.fxcrt::UnownedPtr.20" { %class.CFGAS_GEGraphics* inttoptr (i64 -6148914691236517206 to %class.CFGAS_GEGraphics*) } }, align 8
@__const._ZN13CFWL_CheckBox10DrawWidgetEP16CFGAS_GEGraphicsRK10CFX_Matrix.textParam = private unnamed_addr constant { { %class.CFX_Matrix, %class.CFX_RectF, %"class.fxcrt::UnownedPtr.17", i32, i8, i8, i8, [1 x i8], %"class.fxcrt::UnownedPtr.18" }, i8, %struct.FDE_TextStyle, [4 x i8], %"class.fxcrt::WideString", %"class.fxcrt::UnownedPtr.20" } { { %class.CFX_Matrix, %class.CFX_RectF, %"class.fxcrt::UnownedPtr.17", i32, i8, i8, i8, [1 x i8], %"class.fxcrt::UnownedPtr.18" } { %class.CFX_Matrix { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %class.CFX_RectF { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %"class.fxcrt::UnownedPtr.17" { %class.CFX_RectF* inttoptr (i64 -6148914691236517206 to %class.CFX_RectF*) }, i32 -1431655766, i8 -86, i8 -86, i8 -86, [1 x i8] c"\AA", %"class.fxcrt::UnownedPtr.18" { %class.CFWL_Widget* inttoptr (i64 -6148914691236517206 to %class.CFWL_Widget*) } }, i8 -86, %struct.FDE_TextStyle { i8 -86, i8 -86, i8 -86 }, [4 x i8] c"\AA\AA\AA\AA", %"class.fxcrt::WideString" { %"class.fxcrt::RetainPtr" { %"class.std::__1::unique_ptr.22" { %"class.std::__1::__compressed_pair.23" { %"struct.std::__1::__compressed_pair_elem.24" { %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*) } } } } }, %"class.fxcrt::UnownedPtr.20" { %class.CFGAS_GEGraphics* inttoptr (i64 -6148914691236517206 to %class.CFGAS_GEGraphics*) } }, align 8
@.str = private unnamed_addr constant [10 x i32] [i32 67, i32 104, i32 101, i32 99, i32 107, i32 32, i32 98, i32 111, i32 120, i32 0], align 4

@_ZN13CFWL_CheckBoxC1EP8CFWL_App = hidden unnamed_addr alias void (%class.CFWL_CheckBox*, %class.CFWL_App*), void (%class.CFWL_CheckBox*, %class.CFWL_App*)* @_ZN13CFWL_CheckBoxC2EP8CFWL_App
@_ZN13CFWL_CheckBoxD1Ev = hidden unnamed_addr alias void (%class.CFWL_CheckBox*), void (%class.CFWL_CheckBox*)* @_ZN13CFWL_CheckBoxD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBoxC2EP8CFWL_App(%class.CFWL_CheckBox*, %class.CFWL_App*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.CFWL_Widget::Properties", align 4
  %4 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  %5 = bitcast %"class.CFWL_Widget::Properties"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.CFWL_Widget::Properties", %"class.CFWL_Widget::Properties"* %3, i64 0, i32 0
  store i32 2, i32* %6, align 4
  %7 = getelementptr inbounds %"class.CFWL_Widget::Properties", %"class.CFWL_Widget::Properties"* %3, i64 0, i32 1
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %"class.CFWL_Widget::Properties", %"class.CFWL_Widget::Properties"* %3, i64 0, i32 2
  store i32 0, i32* %8, align 4
  call void @_ZN11CFWL_WidgetC2EP8CFWL_AppRKNS_10PropertiesEPS_(%class.CFWL_Widget* %4, %class.CFWL_App* %1, %"class.CFWL_Widget::Properties"* nonnull dereferenceable(12) %3, %class.CFWL_Widget* null) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %5) #7
  %9 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV13CFWL_CheckBox, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1
  %11 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 5, i32 0
  %12 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 6
  %13 = bitcast %class.CFX_RectF* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 67, i1 false)
  store i8 2, i8* %12, align 1
  %14 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 7
  store i8 0, i8* %14, align 4
  %15 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 9
  store float 1.600000e+01, float* %15, align 8
  store i8 1, i8* %11, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN11CFWL_WidgetC2EP8CFWL_AppRKNS_10PropertiesEPS_(%class.CFWL_Widget*, %class.CFWL_App*, %"class.CFWL_Widget::Properties"* dereferenceable(12), %class.CFWL_Widget*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @_ZN11CFWL_WidgetD2Ev(%class.CFWL_Widget*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBoxD2Ev(%class.CFWL_CheckBox*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  tail call void @_ZN11CFWL_WidgetD2Ev(%class.CFWL_Widget* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBoxD0Ev(%class.CFWL_CheckBox*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  tail call void @_ZN11CFWL_WidgetD2Ev(%class.CFWL_Widget* %2) #7
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK13CFWL_CheckBox10GetClassIDEv(%class.CFWL_CheckBox* nocapture readnone) unnamed_addr #4 align 2 {
  ret i32 3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN13CFWL_CheckBox10SetBoxSizeEf(%class.CFWL_CheckBox* nocapture, float) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 9
  store float %1, float* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBox6UpdateEv(%class.CFWL_CheckBox*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 5, i32 0
  %7 = bitcast i8* %6 to i32*
  store i32 1, i32* %7, align 1
  tail call void @_ZN13CFWL_CheckBox6LayoutEv(%class.CFWL_CheckBox* %0)
  br label %8

8:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN13CFWL_CheckBox19UpdateTextOutStylesEv(%class.CFWL_CheckBox* nocapture) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 5, i32 0
  %3 = bitcast i8* %2 to i32*
  store i32 1, i32* %3, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBox6LayoutEv(%class.CFWL_CheckBox*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.CFX_RectF, align 4
  %3 = alloca %"class.fxcrt::WideString", align 8
  %4 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  %5 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 2, i32 2
  %6 = load float, float* %5, align 4
  %7 = tail call i32 @FXSYS_roundf(float %6) #7
  %8 = sitofp i32 %7 to float
  store float %8, float* %5, align 4
  %9 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 2, i32 3
  %10 = load float, float* %9, align 4
  %11 = tail call i32 @FXSYS_roundf(float %10) #7
  %12 = sitofp i32 %11 to float
  store float %12, float* %9, align 4
  %13 = tail call { <2 x float>, <2 x float> } @_ZN11CFWL_Widget13GetClientRectEv(%class.CFWL_Widget* %4) #7
  %14 = extractvalue { <2 x float>, <2 x float> } %13, 0
  %15 = extractvalue { <2 x float>, <2 x float> } %13, 1
  %16 = shufflevector <2 x float> %15, <2 x float> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %17 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1
  %18 = bitcast %class.CFX_RectF* %17 to <2 x float>*
  store <2 x float> %14, <2 x float>* %18, align 8
  %19 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1, i32 2
  %20 = bitcast float* %19 to <2 x float>*
  store <2 x float> %15, <2 x float>* %20, align 8
  %21 = bitcast <2 x float> %14 to <2 x i32>
  %22 = extractelement <2 x i32> %21, i32 0
  %23 = bitcast i32 %22 to float
  %24 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 9
  %25 = load float, float* %24, align 8
  %26 = fadd float %25, %23
  %27 = bitcast <2 x float> %14 to <2 x i32>
  %28 = extractelement <2 x i32> %27, i32 1
  %29 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 2, i32 0
  %30 = bitcast float* %29 to i32*
  store i32 %22, i32* %30, align 8
  %31 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 2, i32 1
  %32 = bitcast float* %31 to i32*
  store i32 %28, i32* %32, align 4
  %33 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 2, i32 2
  store float %25, float* %33, align 8
  %34 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 2, i32 3
  store float %25, float* %34, align 4
  %35 = extractelement <2 x float> %15, i32 0
  %36 = fadd float %35, %23
  %37 = fsub float %36, %26
  %38 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 3
  %39 = bitcast %class.CFX_RectF* %38 to i8*
  %40 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 3, i32 2
  %41 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 3, i32 3
  %42 = bitcast i32 %28 to float
  %43 = insertelement <4 x float> undef, float %26, i32 0
  %44 = insertelement <4 x float> %43, float %42, i32 1
  %45 = insertelement <4 x float> %44, float %37, i32 2
  %46 = shufflevector <4 x float> %45, <4 x float> %16, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
  %47 = fadd <4 x float> %46, <float 5.000000e+00, float 5.000000e+00, float -1.000000e+01, float -1.000000e+01>
  %48 = bitcast %class.CFX_RectF* %38 to <4 x float>*
  store <4 x float> %47, <4 x float>* %48, align 4
  %49 = bitcast %class.CFX_RectF* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #7
  %50 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %2, i64 0, i32 2
  %51 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %2, i64 0, i32 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %49, i8* align 8 %39, i64 16, i1 false)
  %52 = bitcast %"class.fxcrt::WideString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #7
  call void @_ZN5fxcrt10WideStringC1EPKw(%"class.fxcrt::WideString"* nonnull %3, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @.str, i64 0, i64 0)) #7
  %53 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 5
  %54 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 6
  %55 = load i8, i8* %54, align 1
  call void @_ZN11CFWL_Widget12CalcTextRectERKN5fxcrt10WideStringERK13FDE_TextStyle17FDE_TextAlignmentP9CFX_RectF(%class.CFWL_Widget* %4, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %3, %struct.FDE_TextStyle* dereferenceable(3) %53, i8 zeroext %55, %class.CFX_RectF* nonnull %2) #7
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #7
  %56 = bitcast %class.CFX_RectF* %38 to <2 x float>*
  %57 = load <2 x float>, <2 x float>* %56, align 4, !noalias !2
  %58 = load float, float* %40, align 4
  %59 = load float, float* %50, align 4
  %60 = fcmp olt float %58, %59
  %61 = select i1 %60, float %59, float %58
  %62 = load float, float* %51, align 4
  %63 = load float, float* %41, align 4
  %64 = fcmp olt float %62, %63
  %65 = select i1 %64, float %62, float %63
  %66 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 4, i32 0
  %67 = extractelement <2 x float> %57, i32 0
  %68 = insertelement <4 x float> undef, float %67, i32 0
  %69 = extractelement <2 x float> %57, i32 1
  %70 = insertelement <4 x float> %68, float %69, i32 1
  %71 = insertelement <4 x float> %70, float %61, i32 2
  %72 = insertelement <4 x float> %71, float %65, i32 3
  %73 = fadd <4 x float> %72, <float -1.000000e+00, float -1.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %74 = bitcast float* %66 to <4 x float>*
  store <4 x float> %73, <4 x float>* %74, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBox10DrawWidgetEP16CFGAS_GEGraphicsRK10CFX_Matrix(%class.CFWL_CheckBox*, %class.CFGAS_GEGraphics*, %class.CFX_Matrix* dereferenceable(24)) unnamed_addr #0 align 2 {
  %4 = alloca %class.CFWL_ThemeBackground, align 8
  %5 = alloca %class.CFWL_ThemeText, align 8
  %6 = icmp eq %class.CFGAS_GEGraphics* %1, null
  br i1 %6, label %76, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  %9 = tail call zeroext i1 @_ZNK11CFWL_Widget9HasBorderEv(%class.CFWL_Widget* %8) #7
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @_ZN11CFWL_Widget10DrawBorderEP16CFGAS_GEGraphics9CFWL_PartRK10CFX_Matrix(%class.CFWL_Widget* %8, %class.CFGAS_GEGraphics* nonnull %1, i8 zeroext 3, %class.CFX_Matrix* dereferenceable(24) %2) #7
  br label %11

11:                                               ; preds = %10, %7
  %12 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 768
  %15 = icmp eq i32 %14, 256
  %16 = select i1 %15, i32 2, i32 0
  %17 = icmp eq i32 %14, 512
  %18 = select i1 %17, i32 512, i32 %16
  %19 = and i32 %13, 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %27

21:                                               ; preds = %11
  %22 = and i32 %13, 64
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %21
  %25 = shl i32 %13, 3
  %26 = and i32 %25, 1024
  br label %27

27:                                               ; preds = %21, %11, %24
  %28 = phi i32 [ %26, %24 ], [ 8, %11 ], [ 128, %21 ]
  %29 = or i32 %18, %28
  %30 = shl i32 %13, 1
  %31 = and i32 %30, 32
  %32 = or i32 %29, %31
  %33 = bitcast %class.CFWL_ThemeBackground* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %33) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %33, i8* align 8 bitcast ({ { %class.CFX_Matrix, %class.CFX_RectF, %"class.fxcrt::UnownedPtr.17", i32, i8, i8, i8, [1 x i8], %"class.fxcrt::UnownedPtr.18" }, %"class.fxcrt::UnownedPtr.19", %"class.fxcrt::UnownedPtr.20" }* @__const._ZN13CFWL_CheckBox10DrawWidgetEP16CFGAS_GEGraphicsRK10CFX_Matrix.param to i8*), i64 80, i1 false)
  call void @_ZN20CFWL_ThemeBackgroundC1EP11CFWL_WidgetP16CFGAS_GEGraphics(%class.CFWL_ThemeBackground* nonnull %4, %class.CFWL_Widget* %8, %class.CFGAS_GEGraphics* nonnull %1) #7
  %34 = getelementptr inbounds %class.CFWL_ThemeBackground, %class.CFWL_ThemeBackground* %4, i64 0, i32 0, i32 4
  store i8 2, i8* %34, align 4
  %35 = getelementptr inbounds %class.CFWL_ThemeBackground, %class.CFWL_ThemeBackground* %4, i64 0, i32 0, i32 3
  store i32 %32, i32* %35, align 8
  %36 = bitcast %class.CFX_Matrix* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %33, i8* align 4 %36, i64 24, i1 false)
  %37 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1
  %38 = getelementptr inbounds %class.CFWL_ThemeBackground, %class.CFWL_ThemeBackground* %4, i64 0, i32 0, i32 1
  %39 = bitcast %class.CFX_RectF* %38 to i8*
  %40 = bitcast %class.CFX_RectF* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 4 %40, i64 16, i1 false)
  %41 = load i32, i32* %12, align 8
  %42 = and i32 %41, 16
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %27
  %45 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 4
  %46 = getelementptr inbounds %class.CFWL_ThemeBackground, %class.CFWL_ThemeBackground* %4, i64 0, i32 0, i32 2, i32 0
  store %class.CFX_RectF* %45, %class.CFX_RectF** %46, align 8
  br label %47

47:                                               ; preds = %27, %44
  %48 = call %class.IFWL_ThemeProvider* @_ZNK11CFWL_Widget16GetThemeProviderEv(%class.CFWL_Widget* %8) #7
  %49 = bitcast %class.IFWL_ThemeProvider* %48 to void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeBackground*)***
  %50 = load void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeBackground*)**, void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeBackground*)*** %49, align 8
  %51 = getelementptr inbounds void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeBackground*)*, void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeBackground*)** %50, i64 3
  %52 = load void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeBackground*)*, void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeBackground*)** %51, align 8
  call void %52(%class.IFWL_ThemeProvider* %48, %class.CFWL_ThemeBackground* nonnull dereferenceable(80) %4) #7
  store i8 6, i8* %34, align 4
  %53 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 2
  %54 = bitcast %class.CFX_RectF* %53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 4 %54, i64 16, i1 false)
  %55 = load void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeBackground*)**, void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeBackground*)*** %49, align 8
  %56 = getelementptr inbounds void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeBackground*)*, void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeBackground*)** %55, i64 3
  %57 = load void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeBackground*)*, void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeBackground*)** %56, align 8
  call void %57(%class.IFWL_ThemeProvider* %48, %class.CFWL_ThemeBackground* nonnull dereferenceable(80) %4) #7
  %58 = bitcast %class.CFWL_ThemeText* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %58) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %58, i8* align 8 bitcast ({ { %class.CFX_Matrix, %class.CFX_RectF, %"class.fxcrt::UnownedPtr.17", i32, i8, i8, i8, [1 x i8], %"class.fxcrt::UnownedPtr.18" }, i8, %struct.FDE_TextStyle, [4 x i8], %"class.fxcrt::WideString", %"class.fxcrt::UnownedPtr.20" }* @__const._ZN13CFWL_CheckBox10DrawWidgetEP16CFGAS_GEGraphicsRK10CFX_Matrix.textParam to i8*), i64 88, i1 false)
  call void @_ZN14CFWL_ThemeTextC1EP11CFWL_WidgetP16CFGAS_GEGraphics(%class.CFWL_ThemeText* nonnull %5, %class.CFWL_Widget* %8, %class.CFGAS_GEGraphics* nonnull %1) #7
  %59 = getelementptr inbounds %class.CFWL_ThemeText, %class.CFWL_ThemeText* %5, i64 0, i32 0, i32 4
  store i8 4, i8* %59, align 4
  %60 = getelementptr inbounds %class.CFWL_ThemeText, %class.CFWL_ThemeText* %5, i64 0, i32 0, i32 3
  store i32 %32, i32* %60, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %58, i8* align 4 %36, i64 24, i1 false)
  %61 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 3
  %62 = getelementptr inbounds %class.CFWL_ThemeText, %class.CFWL_ThemeText* %5, i64 0, i32 0, i32 1
  %63 = bitcast %class.CFX_RectF* %62 to i8*
  %64 = bitcast %class.CFX_RectF* %61 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 4 %64, i64 16, i1 false)
  %65 = getelementptr inbounds %class.CFWL_ThemeText, %class.CFWL_ThemeText* %5, i64 0, i32 3
  %66 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringaSEPKw(%"class.fxcrt::WideString"* %65, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @.str, i64 0, i64 0)) #7
  %67 = getelementptr inbounds %class.CFWL_ThemeText, %class.CFWL_ThemeText* %5, i64 0, i32 2, i32 0
  %68 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 5, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %68, i64 3, i1 false)
  %69 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 6
  %70 = load i8, i8* %69, align 1
  %71 = getelementptr inbounds %class.CFWL_ThemeText, %class.CFWL_ThemeText* %5, i64 0, i32 1
  store i8 %70, i8* %71, align 8
  %72 = bitcast %class.IFWL_ThemeProvider* %48 to void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeText*)***
  %73 = load void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeText*)**, void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeText*)*** %72, align 8
  %74 = getelementptr inbounds void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeText*)*, void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeText*)** %73, i64 4
  %75 = load void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeText*)*, void (%class.IFWL_ThemeProvider*, %class.CFWL_ThemeText*)** %74, align 8
  call void %75(%class.IFWL_ThemeProvider* %48, %class.CFWL_ThemeText* nonnull dereferenceable(88) %5) #7
  call void @_ZN14CFWL_ThemeTextD1Ev(%class.CFWL_ThemeText* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %58) #7
  call void @_ZN20CFWL_ThemeBackgroundD1Ev(%class.CFWL_ThemeBackground* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %33) #7
  br label %76

76:                                               ; preds = %3, %47
  ret void
}

declare zeroext i1 @_ZNK11CFWL_Widget9HasBorderEv(%class.CFWL_Widget*) local_unnamed_addr #2

declare void @_ZN11CFWL_Widget10DrawBorderEP16CFGAS_GEGraphics9CFWL_PartRK10CFX_Matrix(%class.CFWL_Widget*, %class.CFGAS_GEGraphics*, i8 zeroext, %class.CFX_Matrix* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK13CFWL_CheckBox13GetPartStatesEv(%class.CFWL_CheckBox* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 768
  %5 = icmp eq i32 %4, 256
  %6 = select i1 %5, i32 2, i32 0
  %7 = icmp eq i32 %4, 512
  %8 = select i1 %7, i32 512, i32 %6
  %9 = and i32 %3, 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %1
  %12 = and i32 %3, 64
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %11
  %15 = shl i32 %3, 3
  %16 = and i32 %15, 1024
  br label %17

17:                                               ; preds = %11, %1, %14
  %18 = phi i32 [ %16, %14 ], [ 8, %1 ], [ 128, %11 ]
  %19 = or i32 %8, %18
  %20 = shl i32 %3, 1
  %21 = and i32 %20, 32
  %22 = or i32 %19, %21
  ret i32 %22
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN20CFWL_ThemeBackgroundC1EP11CFWL_WidgetP16CFGAS_GEGraphics(%class.CFWL_ThemeBackground*, %class.CFWL_Widget*, %class.CFGAS_GEGraphics*) unnamed_addr #2

declare %class.IFWL_ThemeProvider* @_ZNK11CFWL_Widget16GetThemeProviderEv(%class.CFWL_Widget*) local_unnamed_addr #2

declare void @_ZN14CFWL_ThemeTextC1EP11CFWL_WidgetP16CFGAS_GEGraphics(%class.CFWL_ThemeText*, %class.CFWL_Widget*, %class.CFGAS_GEGraphics*) unnamed_addr #2

declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringaSEPKw(%"class.fxcrt::WideString"*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN14CFWL_ThemeTextD1Ev(%class.CFWL_ThemeText*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN20CFWL_ThemeBackgroundD1Ev(%class.CFWL_ThemeBackground*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBox13SetCheckStateEi(%class.CFWL_CheckBox*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, -769
  store i32 %6, i32* %4, align 8
  switch i32 %1, label %16 [
    i32 1, label %7
    i32 2, label %9
  ]

7:                                                ; preds = %2
  %8 = or i32 %6, 256
  store i32 %8, i32* %4, align 8
  br label %16

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 64
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %9
  %15 = or i32 %6, 512
  store i32 %15, i32* %4, align 8
  br label %16

16:                                               ; preds = %9, %2, %14, %7
  %17 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1
  tail call void @_ZN11CFWL_Widget11RepaintRectERK9CFX_RectF(%class.CFWL_Widget* %3, %class.CFX_RectF* dereferenceable(16) %17) #7
  ret void
}

declare void @_ZN11CFWL_Widget11RepaintRectERK9CFX_RectF(%class.CFWL_Widget*, %class.CFX_RectF* dereferenceable(16)) local_unnamed_addr #2

declare i32 @FXSYS_roundf(float) local_unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZN11CFWL_Widget13GetClientRectEv(%class.CFWL_Widget*) unnamed_addr #2

declare void @_ZN11CFWL_Widget12CalcTextRectERKN5fxcrt10WideStringERK13FDE_TextStyle17FDE_TextAlignmentP9CFX_RectF(%class.CFWL_Widget*, %"class.fxcrt::WideString"* dereferenceable(8), %struct.FDE_TextStyle* dereferenceable(3), i8 zeroext, %class.CFX_RectF*) local_unnamed_addr #2

declare void @_ZN5fxcrt10WideStringC1EPKw(%"class.fxcrt::WideString"*, i32*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBox10NextStatesEv(%class.CFWL_CheckBox*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.CFWL_Event, align 8
  %3 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = trunc i32 %7 to i8
  %9 = icmp slt i8 %8, 0
  %10 = and i32 %5, 768
  br i1 %9, label %11, label %15

11:                                               ; preds = %1
  %12 = icmp eq i32 %10, 0
  br i1 %12, label %13, label %31

13:                                               ; preds = %11
  %14 = or i32 %5, 256
  store i32 %14, i32* %4, align 8
  br label %31

15:                                               ; preds = %1
  switch i32 %10, label %24 [
    i32 512, label %16
    i32 256, label %22
  ]

16:                                               ; preds = %15
  %17 = and i32 %5, -769
  store i32 %17, i32* %4, align 8
  %18 = and i32 %7, 64
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %31, label %20

20:                                               ; preds = %16
  %21 = or i32 %17, 256
  store i32 %21, i32* %4, align 8
  br label %31

22:                                               ; preds = %15
  %23 = and i32 %5, -769
  store i32 %23, i32* %4, align 8
  br label %31

24:                                               ; preds = %15
  %25 = and i32 %7, 64
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %24
  %28 = or i32 %5, 512
  store i32 %28, i32* %4, align 8
  br label %31

29:                                               ; preds = %24
  %30 = or i32 %5, 256
  store i32 %30, i32* %4, align 8
  br label %31

31:                                               ; preds = %16, %20, %27, %29, %22, %11, %13
  %32 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1
  tail call void @_ZN11CFWL_Widget11RepaintRectERK9CFX_RectF(%class.CFWL_Widget* %3, %class.CFX_RectF* dereferenceable(16) %32) #7
  %33 = load i32, i32* %4, align 8
  %34 = icmp eq i32 %5, %33
  br i1 %34, label %37, label %35

35:                                               ; preds = %31
  %36 = bitcast %class.CFWL_Event* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 -86, i64 32, i1 false)
  call void @_ZN10CFWL_EventC1ENS_4TypeEP11CFWL_Widget(%class.CFWL_Event* nonnull %2, i32 0, %class.CFWL_Widget* %3) #7
  call void @_ZN11CFWL_Widget13DispatchEventEP10CFWL_Event(%class.CFWL_Widget* %3, %class.CFWL_Event* nonnull %2) #7
  call void @_ZN10CFWL_EventD1Ev(%class.CFWL_Event* nonnull %2) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #7
  br label %37

37:                                               ; preds = %31, %35
  ret void
}

declare void @_ZN10CFWL_EventC1ENS_4TypeEP11CFWL_Widget(%class.CFWL_Event*, i32, %class.CFWL_Widget*) unnamed_addr #2

declare void @_ZN11CFWL_Widget13DispatchEventEP10CFWL_Event(%class.CFWL_Widget*, %class.CFWL_Event*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN10CFWL_EventD1Ev(%class.CFWL_Event*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBox16OnProcessMessageEP12CFWL_Message(%class.CFWL_CheckBox*, %class.CFWL_Message*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFWL_Message, %class.CFWL_Message* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %86 [
    i32 4, label %5
    i32 1, label %11
    i32 2, label %17
    i32 0, label %77
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  %7 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = or i32 %8, 16
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1
  tail call void @_ZN11CFWL_Widget11RepaintRectERK9CFX_RectF(%class.CFWL_Widget* %6, %class.CFX_RectF* dereferenceable(16) %10) #7
  br label %86

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  %13 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = and i32 %14, -17
  store i32 %15, i32* %13, align 8
  %16 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1
  tail call void @_ZN11CFWL_Widget11RepaintRectERK9CFX_RectF(%class.CFWL_Widget* %12, %class.CFX_RectF* dereferenceable(16) %16) #7
  br label %86

17:                                               ; preds = %2
  %18 = bitcast %class.CFWL_Message* %1 to %class.CFWL_MessageMouse*
  %19 = getelementptr inbounds %class.CFWL_Message, %class.CFWL_Message* %1, i64 1
  %20 = bitcast %class.CFWL_Message* %19 to i8*
  %21 = load i8, i8* %20, align 8
  switch i8 %21, label %86 [
    i8 0, label %22
    i8 1, label %33
    i8 6, label %65
    i8 8, label %66
  ]

22:                                               ; preds = %17
  %23 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = and i32 %24, 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %86

27:                                               ; preds = %22
  %28 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  %29 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 7
  store i8 1, i8* %29, align 4
  %30 = and i32 %24, -193
  %31 = or i32 %30, 128
  store i32 %31, i32* %23, align 8
  %32 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1
  tail call void @_ZN11CFWL_Widget11RepaintRectERK9CFX_RectF(%class.CFWL_Widget* %28, %class.CFX_RectF* dereferenceable(16) %32) #7
  br label %86

33:                                               ; preds = %17
  %34 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 7
  %35 = load i8, i8* %34, align 4, !range !5
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %86, label %37

37:                                               ; preds = %33
  store i8 0, i8* %34, align 4
  %38 = getelementptr inbounds %class.CFWL_MessageMouse, %class.CFWL_MessageMouse* %18, i64 0, i32 4, i32 0
  %39 = load float, float* %38, align 4
  %40 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1, i32 0
  %41 = load float, float* %40, align 4
  %42 = fcmp ult float %39, %41
  br i1 %42, label %86, label %43

43:                                               ; preds = %37
  %44 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1, i32 2
  %45 = load float, float* %44, align 4
  %46 = fadd float %41, %45
  %47 = fcmp olt float %39, %46
  br i1 %47, label %48, label %86

48:                                               ; preds = %43
  %49 = getelementptr inbounds %class.CFWL_Message, %class.CFWL_Message* %1, i64 1, i32 1
  %50 = bitcast i32* %49 to float*
  %51 = load float, float* %50, align 4
  %52 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1, i32 1
  %53 = load float, float* %52, align 4
  %54 = fcmp ult float %51, %53
  br i1 %54, label %86, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1, i32 3
  %57 = load float, float* %56, align 4
  %58 = fadd float %53, %57
  %59 = fcmp olt float %51, %58
  br i1 %59, label %60, label %86

60:                                               ; preds = %55
  %61 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %62 = load i32, i32* %61, align 8
  %63 = and i32 %62, -193
  %64 = or i32 %63, 64
  store i32 %64, i32* %61, align 8
  tail call void @_ZN13CFWL_CheckBox10NextStatesEv(%class.CFWL_CheckBox* %0) #7
  br label %86

65:                                               ; preds = %17
  tail call void @_ZN13CFWL_CheckBox11OnMouseMoveEP17CFWL_MessageMouse(%class.CFWL_CheckBox* %0, %class.CFWL_MessageMouse* %18)
  br label %86

66:                                               ; preds = %17
  %67 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 7
  %68 = load i8, i8* %67, align 4, !range !5
  %69 = icmp eq i8 %68, 0
  %70 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  %71 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %72 = load i32, i32* %71, align 8
  %73 = and i32 %72, -65
  %74 = or i32 %72, 64
  %75 = select i1 %69, i32 %73, i32 %74
  store i32 %75, i32* %71, align 8
  %76 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 2
  tail call void @_ZN11CFWL_Widget11RepaintRectERK9CFX_RectF(%class.CFWL_Widget* %70, %class.CFX_RectF* dereferenceable(16) %76) #7
  br label %86

77:                                               ; preds = %2
  %78 = getelementptr inbounds %class.CFWL_Message, %class.CFWL_Message* %1, i64 1
  %79 = bitcast %class.CFWL_Message* %78 to i32*
  %80 = load i32, i32* %79, align 8
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %86

82:                                               ; preds = %77
  %83 = getelementptr inbounds %class.CFWL_Message, %class.CFWL_Message* %1, i64 1, i32 1
  %84 = load i32, i32* %83, align 8
  switch i32 %84, label %86 [
    i32 32, label %85
    i32 13, label %85
  ]

85:                                               ; preds = %82, %82
  tail call void @_ZN13CFWL_CheckBox10NextStatesEv(%class.CFWL_CheckBox* %0) #7
  br label %86

86:                                               ; preds = %85, %82, %60, %55, %48, %43, %37, %33, %27, %22, %77, %65, %66, %17, %2, %11, %5
  %87 = getelementptr inbounds %class.CFWL_Message, %class.CFWL_Message* %1, i64 0, i32 3, i32 0
  %88 = load %class.CFWL_Widget*, %class.CFWL_Widget** %87, align 8
  %89 = icmp eq %class.CFWL_Widget* %88, null
  br i1 %89, label %92, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  tail call void @_ZN11CFWL_Widget16OnProcessMessageEP12CFWL_Message(%class.CFWL_Widget* %91, %class.CFWL_Message* %1) #7
  br label %92

92:                                               ; preds = %86, %90
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBox14OnFocusChangedEb(%class.CFWL_CheckBox*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, -17
  %7 = or i32 %5, 16
  %8 = select i1 %1, i32 %7, i32 %6
  store i32 %8, i32* %4, align 8
  %9 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1
  tail call void @_ZN11CFWL_Widget11RepaintRectERK9CFX_RectF(%class.CFWL_Widget* %3, %class.CFX_RectF* dereferenceable(16) %9) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBox13OnLButtonDownEv(%class.CFWL_CheckBox*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  %8 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 7
  store i8 1, i8* %8, align 4
  %9 = and i32 %3, -193
  %10 = or i32 %9, 128
  store i32 %10, i32* %2, align 8
  %11 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1
  tail call void @_ZN11CFWL_Widget11RepaintRectERK9CFX_RectF(%class.CFWL_Widget* %7, %class.CFX_RectF* dereferenceable(16) %11) #7
  br label %12

12:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBox11OnLButtonUpEP17CFWL_MessageMouse(%class.CFWL_CheckBox*, %class.CFWL_MessageMouse* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 7
  %4 = load i8, i8* %3, align 4, !range !5
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %33, label %6

6:                                                ; preds = %2
  store i8 0, i8* %3, align 4
  %7 = getelementptr inbounds %class.CFWL_MessageMouse, %class.CFWL_MessageMouse* %1, i64 0, i32 4, i32 0
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1, i32 0
  %10 = load float, float* %9, align 4
  %11 = fcmp ult float %8, %10
  br i1 %11, label %33, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1, i32 2
  %14 = load float, float* %13, align 4
  %15 = fadd float %10, %14
  %16 = fcmp olt float %8, %15
  br i1 %16, label %17, label %33

17:                                               ; preds = %12
  %18 = getelementptr inbounds %class.CFWL_MessageMouse, %class.CFWL_MessageMouse* %1, i64 0, i32 4, i32 1
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1, i32 1
  %21 = load float, float* %20, align 4
  %22 = fcmp ult float %19, %21
  br i1 %22, label %33, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1, i32 3
  %25 = load float, float* %24, align 4
  %26 = fadd float %21, %25
  %27 = fcmp olt float %19, %26
  br i1 %27, label %28, label %33

28:                                               ; preds = %23
  %29 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = and i32 %30, -193
  %32 = or i32 %31, 64
  store i32 %32, i32* %29, align 8
  tail call void @_ZN13CFWL_CheckBox10NextStatesEv(%class.CFWL_CheckBox* %0)
  br label %33

33:                                               ; preds = %6, %12, %17, %2, %23, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBox11OnMouseMoveEP17CFWL_MessageMouse(%class.CFWL_CheckBox*, %class.CFWL_MessageMouse* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %70

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 7
  %10 = load i8, i8* %9, align 4, !range !5
  %11 = icmp eq i8 %10, 0
  %12 = getelementptr inbounds %class.CFWL_MessageMouse, %class.CFWL_MessageMouse* %1, i64 0, i32 4, i32 0
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1, i32 0
  %15 = load float, float* %14, align 4
  %16 = fcmp ult float %13, %15
  br i1 %16, label %33, label %17

17:                                               ; preds = %8
  %18 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1, i32 2
  %19 = load float, float* %18, align 4
  %20 = fadd float %15, %19
  %21 = fcmp olt float %13, %20
  br i1 %21, label %22, label %33

22:                                               ; preds = %17
  %23 = getelementptr inbounds %class.CFWL_MessageMouse, %class.CFWL_MessageMouse* %1, i64 0, i32 4, i32 1
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1, i32 1
  %26 = load float, float* %25, align 4
  %27 = fcmp ult float %24, %26
  br i1 %27, label %33, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 1, i32 3
  %30 = load float, float* %29, align 4
  %31 = fadd float %26, %30
  %32 = fcmp olt float %24, %31
  br label %33

33:                                               ; preds = %8, %17, %22, %28
  %34 = phi i1 [ false, %22 ], [ false, %17 ], [ false, %8 ], [ %32, %28 ]
  br i1 %11, label %58, label %35

35:                                               ; preds = %33
  %36 = trunc i32 %5 to i8
  %37 = icmp sgt i8 %36, -1
  br i1 %34, label %38, label %48

38:                                               ; preds = %35
  br i1 %37, label %39, label %41

39:                                               ; preds = %38
  %40 = or i32 %5, 128
  store i32 %40, i32* %4, align 8
  br label %41

41:                                               ; preds = %39, %38
  %42 = phi i32 [ %40, %39 ], [ %5, %38 ]
  %43 = phi i1 [ true, %39 ], [ false, %38 ]
  %44 = and i32 %42, 64
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %64, label %46

46:                                               ; preds = %41
  %47 = and i32 %42, -65
  br label %66

48:                                               ; preds = %35
  br i1 %37, label %51, label %49

49:                                               ; preds = %48
  %50 = and i32 %5, -129
  store i32 %50, i32* %4, align 8
  br label %51

51:                                               ; preds = %48, %49
  %52 = phi i32 [ %50, %49 ], [ %5, %48 ]
  %53 = phi i1 [ true, %49 ], [ false, %48 ]
  %54 = and i32 %52, 64
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %64

56:                                               ; preds = %51
  %57 = or i32 %52, 64
  br label %66

58:                                               ; preds = %33
  %59 = and i32 %5, 64
  %60 = icmp eq i32 %59, 0
  %61 = and i1 %60, %34
  br i1 %61, label %62, label %70

62:                                               ; preds = %58
  %63 = or i32 %5, 64
  br label %66

64:                                               ; preds = %41, %51
  %65 = phi i1 [ %43, %41 ], [ %53, %51 ]
  br i1 %65, label %68, label %70

66:                                               ; preds = %46, %56, %62
  %67 = phi i32 [ %63, %62 ], [ %57, %56 ], [ %47, %46 ]
  store i32 %67, i32* %4, align 8
  br label %68

68:                                               ; preds = %66, %64
  %69 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 2
  tail call void @_ZN11CFWL_Widget11RepaintRectERK9CFX_RectF(%class.CFWL_Widget* %3, %class.CFX_RectF* dereferenceable(16) %69) #7
  br label %70

70:                                               ; preds = %64, %68, %58, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBox12OnMouseLeaveEv(%class.CFWL_CheckBox*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 7
  %3 = load i8, i8* %2, align 4, !range !5
  %4 = icmp eq i8 %3, 0
  %5 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0
  %6 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 0, i32 1, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, -65
  %9 = or i32 %7, 64
  %10 = select i1 %4, i32 %8, i32 %9
  store i32 %10, i32* %6, align 8
  %11 = getelementptr inbounds %class.CFWL_CheckBox, %class.CFWL_CheckBox* %0, i64 0, i32 2
  tail call void @_ZN11CFWL_Widget11RepaintRectERK9CFX_RectF(%class.CFWL_Widget* %5, %class.CFX_RectF* dereferenceable(16) %11) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBox9OnKeyDownEP15CFWL_MessageKey(%class.CFWL_CheckBox*, %class.CFWL_MessageKey* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFWL_MessageKey, %class.CFWL_MessageKey* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %6 [
    i32 32, label %5
    i32 13, label %5
  ]

5:                                                ; preds = %2, %2
  tail call void @_ZN13CFWL_CheckBox10NextStatesEv(%class.CFWL_CheckBox* %0)
  br label %6

6:                                                ; preds = %2, %5
  ret void
}

declare void @_ZN11CFWL_Widget16OnProcessMessageEP12CFWL_Message(%class.CFWL_Widget*, %class.CFWL_Message*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFWL_CheckBox12OnDrawWidgetEP16CFGAS_GEGraphicsRK10CFX_Matrix(%class.CFWL_CheckBox*, %class.CFGAS_GEGraphics*, %class.CFX_Matrix* dereferenceable(24)) unnamed_addr #0 align 2 {
  tail call void @_ZN13CFWL_CheckBox10DrawWidgetEP16CFGAS_GEGraphicsRK10CFX_Matrix(%class.CFWL_CheckBox* %0, %class.CFGAS_GEGraphics* %1, %class.CFX_Matrix* dereferenceable(24) %2)
  ret void
}

declare void @_ZNK11CFWL_Widget5TraceEPN5cppgc7VisitorE(%class.CFWL_Widget*, %"class.cppgc::Visitor"*) unnamed_addr #2

declare void @_ZN11CFWL_Widget14OnProcessEventEP10CFWL_Event(%class.CFWL_Widget*, %class.CFWL_Event*) unnamed_addr #2

declare void @_ZN11CFWL_Widget11PreFinalizeEv(%class.CFWL_Widget*) unnamed_addr #2

declare zeroext i1 @_ZNK11CFWL_Widget6IsFormEv(%class.CFWL_Widget*) unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZN11CFWL_Widget22GetAutosizedWidgetRectEv(%class.CFWL_Widget*) unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZN11CFWL_Widget13GetWidgetRectEv(%class.CFWL_Widget*) unnamed_addr #2

declare void @_ZN11CFWL_Widget14ModifyStylesExEjj(%class.CFWL_Widget*, i32, i32) unnamed_addr #2

declare void @_ZN11CFWL_Widget9SetStatesEj(%class.CFWL_Widget*, i32) unnamed_addr #2

declare void @_ZN11CFWL_Widget12RemoveStatesEj(%class.CFWL_Widget*, i32) unnamed_addr #2

declare i32 @_ZN11CFWL_Widget7HitTestERK13CFX_PTemplateIfE(%class.CFWL_Widget*, %class.CFX_PTemplate* dereferenceable(8)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK9CFX_RectF7TopLeftEv: argument 0"}
!4 = distinct !{!4, !"_ZNK9CFX_RectF7TopLeftEv"}
!5 = !{i8 0, i8 2}
