; ModuleID = '../../net/dns/host_resolver_proc.cc'
source_filename = "../../net/dns/host_resolver_proc.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::HostResolverProc" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", i8, %class.scoped_refptr }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr = type { %"class.net::HostResolverProc"* }
%"class.base::TimeDelta" = type { i64 }
%"class.net::SystemHostResolverProc" = type { %"class.net::HostResolverProc" }
%"struct.net::ProcTaskParams" = type <{ %class.scoped_refptr, i64, %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.net::AddressList" = type { %"class.std::__1::vector", %"class.std::__1::vector.7" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"*, %"class.std::__1::__compressed_pair.2" }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.net::IPEndPoint"* }
%"class.std::__1::vector.7" = type { %"class.std::__1::__vector_base.8" }
%"class.std::__1::__vector_base.8" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::basic_string"* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.sockaddr*, i8*, %struct.addrinfo* }
%struct.sockaddr = type { i16, [14 x i8] }
%"class.base::ScopedBlockingCall" = type { %"class.base::internal::UncheckedScopedBlockingCall" }
%"class.base::internal::UncheckedScopedBlockingCall" = type { %"class.base::internal::BlockingObserver"*, %"class.base::internal::UncheckedScopedBlockingCall"*, i8, [7 x i8], %"class.base::debug::ScopedActivity", %"class.absl::optional" }
%"class.base::internal::BlockingObserver" = type { i32 (...)** }
%"class.base::debug::ScopedActivity" = type <{ %"class.base::debug::GlobalActivityTracker::ScopedThreadActivity", i32, [4 x i8] }>
%"class.base::debug::GlobalActivityTracker::ScopedThreadActivity" = type { %"class.base::debug::ThreadActivityTracker::ScopedActivity.base", %"class.std::__1::unique_ptr" }
%"class.base::debug::ThreadActivityTracker::ScopedActivity.base" = type <{ %"class.base::debug::ThreadActivityTracker"*, i32 }>
%"class.base::debug::ThreadActivityTracker" = type <{ i32 (...)**, %"struct.base::debug::ThreadActivityTracker::Header"*, %"struct.base::debug::Activity"*, i32, i8, [3 x i8] }>
%"struct.base::debug::ThreadActivityTracker::Header" = type opaque
%"struct.base::debug::Activity" = type { i64, i64, i64, [10 x i64], i32, i32, i8, [7 x i8], %"union.base::debug::ActivityData" }
%"union.base::debug::ActivityData" = type { %struct.anon.15 }
%struct.anon.15 = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.base::debug::ActivityUserData"* }
%"class.base::debug::ActivityUserData" = type { i32 (...)**, %"class.std::__1::map", i8*, i64, %"struct.base::debug::ActivityUserData::MemoryHeader"*, i32, i64, i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.23", %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { i64 }
%"struct.base::debug::ActivityUserData::MemoryHeader" = type { %"struct.base::debug::OwningProcess" }
%"struct.base::debug::OwningProcess" = type { %"struct.std::__1::atomic.31", i32, i64, i64 }
%"struct.std::__1::atomic.31" = type { %"struct.std::__1::__atomic_base.32" }
%"struct.std::__1::__atomic_base.32" = type { %"struct.std::__1::__atomic_base.33" }
%"struct.std::__1::__atomic_base.33" = type { %"struct.std::__1::__cxx_atomic_impl.34" }
%"struct.std::__1::__cxx_atomic_impl.34" = type { %"struct.std::__1::__cxx_atomic_base_impl.35" }
%"struct.std::__1::__cxx_atomic_base_impl.35" = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.37 }
%union.anon.37 = type { %"class.base::internal::IOJankMonitoringWindow::ScopedMonitoredCall" }
%"class.base::internal::IOJankMonitoringWindow::ScopedMonitoredCall" = type { %"class.base::TimeTicks", %class.scoped_refptr.38 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%class.scoped_refptr.38 = type { %"class.base::internal::IOJankMonitoringWindow"* }
%"class.base::internal::IOJankMonitoringWindow" = type <{ %"class.base::RefCountedThreadSafe.39", [4 x i8], %"class.base::Lock", [60 x i64], %"class.base::TimeTicks", %class.scoped_refptr.38, i8, [7 x i8] }>
%"class.base::RefCountedThreadSafe.39" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.absl::optional.40" = type { %"class.absl::optional_internal::optional_data.41" }
%"class.absl::optional_internal::optional_data.41" = type { %"class.absl::optional_internal::optional_data_base.42" }
%"class.absl::optional_internal::optional_data_base.42" = type { %"class.absl::optional_internal::optional_data_dtor_base.43" }
%"class.absl::optional_internal::optional_data_dtor_base.43" = type { i8, %union.anon.44 }
%union.anon.44 = type { %"class.net::AddressInfo" }
%"class.net::AddressInfo" = type { %struct.addrinfo*, %"class.std::__1::unique_ptr.45" }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.net::AddrInfoGetter"* }
%"class.net::AddrInfoGetter" = type { i32 (...)** }
%"class.std::__1::tuple" = type { %"struct.std::__1::__tuple_impl" }
%"struct.std::__1::__tuple_impl" = type { %"class.std::__1::__tuple_leaf", %"class.std::__1::__tuple_leaf.55", %"class.std::__1::__tuple_leaf.56" }
%"class.std::__1::__tuple_leaf" = type { %"class.absl::optional.40" }
%"class.std::__1::__tuple_leaf.55" = type { i32 }
%"class.std::__1::__tuple_leaf.56" = type { i32 }

@_ZN3net16HostResolverProc13default_proc_E = hidden local_unnamed_addr global %"class.net::HostResolverProc"* null, align 8
@_ZTVN3net16HostResolverProcE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.net::HostResolverProc"*)* @_ZN3net16HostResolverProcD2Ev to i8*), i8* bitcast (void (%"class.net::HostResolverProc"*)* @_ZN3net16HostResolverProcD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [36 x i8] c"../../net/dns/host_resolver_proc.cc\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"allow_fallback_to_system_\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"SystemHostResolverCall\00", align 1
@_ZTVN3net22SystemHostResolverProcE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (i32 (%"class.net::SystemHostResolverProc"*, %"class.std::__1::basic_string"*, i32, i32, %"class.net::AddressList"*, i32*)* @_ZN3net22SystemHostResolverProc7ResolveERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_13AddressFamilyEiPNS_11AddressListEPi to i8*), i8* bitcast (void (%"class.net::HostResolverProc"*)* @_ZN3net16HostResolverProcD2Ev to i8*), i8* bitcast (void (%"class.net::SystemHostResolverProc"*)* @_ZN3net22SystemHostResolverProcD0Ev to i8*)] }, align 8
@_ZN3net14ProcTaskParams28kDnsDefaultUnresponsiveDelayE = hidden local_unnamed_addr constant %"class.base::TimeDelta" { i64 6000000 }, align 8
@_ZN3net12HostResolver14ManagerOptions21kDefaultRetryAttemptsE = external local_unnamed_addr constant i64, align 8
@switch.table._ZN3net22SystemHostResolverCallERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_13AddressFamilyEiPNS_11AddressListEPi = private unnamed_addr constant [3 x i32] [i32 0, i32 2, i32 10], align 4

@_ZN3net16HostResolverProcD1Ev = hidden unnamed_addr alias void (%"class.net::HostResolverProc"*), void (%"class.net::HostResolverProc"*)* @_ZN3net16HostResolverProcD2Ev
@_ZN3net22SystemHostResolverProcC1Ev = hidden unnamed_addr alias void (%"class.net::SystemHostResolverProc"*), void (%"class.net::SystemHostResolverProc"*)* @_ZN3net22SystemHostResolverProcC2Ev
@_ZN3net22SystemHostResolverProcD2Ev = hidden unnamed_addr alias void (%"class.net::SystemHostResolverProc"*), bitcast (void (%"class.net::HostResolverProc"*)* @_ZN3net16HostResolverProcD2Ev to void (%"class.net::SystemHostResolverProc"*)*)
@_ZN3net22SystemHostResolverProcD1Ev = hidden unnamed_addr alias void (%"class.net::SystemHostResolverProc"*), bitcast (void (%"class.net::HostResolverProc"*)* @_ZN3net16HostResolverProcD2Ev to void (%"class.net::SystemHostResolverProc"*)*)
@_ZN3net14ProcTaskParamsC1EPNS_16HostResolverProcEm = hidden unnamed_addr alias void (%"struct.net::ProcTaskParams"*, %"class.net::HostResolverProc"*, i64), void (%"struct.net::ProcTaskParams"*, %"class.net::HostResolverProc"*, i64)* @_ZN3net14ProcTaskParamsC2EPNS_16HostResolverProcEm
@_ZN3net14ProcTaskParamsC1ERKS0_ = hidden unnamed_addr alias void (%"struct.net::ProcTaskParams"*, %"struct.net::ProcTaskParams"*), void (%"struct.net::ProcTaskParams"*, %"struct.net::ProcTaskParams"*)* @_ZN3net14ProcTaskParamsC2ERKS0_
@_ZN3net14ProcTaskParamsD1Ev = hidden unnamed_addr alias void (%"struct.net::ProcTaskParams"*), void (%"struct.net::ProcTaskParams"*)* @_ZN3net14ProcTaskParamsD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16HostResolverProcC2EPS0_b(%"class.net::HostResolverProc"*, %"class.net::HostResolverProc"*, i1 zeroext) unnamed_addr #0 align 2 {
  %4 = zext i1 %2 to i8
  %5 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3net16HostResolverProcE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %0, i64 0, i32 2
  store i8 %4, i8* %7, align 4
  %8 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %8, i64 0, i32 0
  %10 = bitcast %class.scoped_refptr* %8 to i64*
  store i64 0, i64* %10, align 8
  %11 = icmp eq %"class.net::HostResolverProc"* %1, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %3, %12
  %13 = phi %"class.net::HostResolverProc"* [ %15, %12 ], [ %1, %3 ]
  %14 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %13, i64 0, i32 3, i32 0
  %15 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %14, align 8
  %16 = icmp eq %"class.net::HostResolverProc"* %15, null
  br i1 %16, label %17, label %12

17:                                               ; preds = %12, %3
  %18 = phi %"class.net::HostResolverProc"* [ null, %3 ], [ %13, %12 ]
  %19 = icmp eq %"class.net::HostResolverProc"* %18, %0
  %20 = select i1 %19, %"class.net::HostResolverProc"* null, %"class.net::HostResolverProc"* %1
  %21 = icmp eq %"class.net::HostResolverProc"* %20, null
  br i1 %21, label %22, label %24

22:                                               ; preds = %17
  %23 = ptrtoint %"class.net::HostResolverProc"* %20 to i64
  store i64 %23, i64* %10, align 8
  br label %42

24:                                               ; preds = %17
  %25 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %20, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = atomicrmw add i32* %25, i32 1 monotonic
  %27 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %9, align 8
  %28 = ptrtoint %"class.net::HostResolverProc"* %20 to i64
  store i64 %28, i64* %10, align 8
  %29 = icmp eq %"class.net::HostResolverProc"* %27, null
  br i1 %29, label %42, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %27, i64 0, i32 1
  %32 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = atomicrmw sub i32* %32, i32 1 acq_rel
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %35, label %42

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %31, i64 -2
  %37 = bitcast %"class.base::RefCountedThreadSafe"* %36 to %"class.net::HostResolverProc"*
  %38 = bitcast %"class.base::RefCountedThreadSafe"* %36 to void (%"class.net::HostResolverProc"*)***
  %39 = load void (%"class.net::HostResolverProc"*)**, void (%"class.net::HostResolverProc"*)*** %38, align 8
  %40 = getelementptr inbounds void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %39, i64 2
  %41 = load void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %40, align 8
  tail call void %41(%"class.net::HostResolverProc"* nonnull %37) #9
  br label %42

42:                                               ; preds = %22, %24, %30, %35
  %43 = and i1 %11, %2
  br i1 %43, label %44, label %91

44:                                               ; preds = %42
  %45 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** @_ZN3net16HostResolverProc13default_proc_E, align 8
  %46 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %9, align 8
  store i64 0, i64* %10, align 8
  %47 = icmp eq %"class.net::HostResolverProc"* %46, null
  br i1 %47, label %60, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %46, i64 0, i32 1
  %50 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %49, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = atomicrmw sub i32* %50, i32 1 acq_rel
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %53, label %60

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %49, i64 -2
  %55 = bitcast %"class.base::RefCountedThreadSafe"* %54 to %"class.net::HostResolverProc"*
  %56 = bitcast %"class.base::RefCountedThreadSafe"* %54 to void (%"class.net::HostResolverProc"*)***
  %57 = load void (%"class.net::HostResolverProc"*)**, void (%"class.net::HostResolverProc"*)*** %56, align 8
  %58 = getelementptr inbounds void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %57, i64 2
  %59 = load void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %58, align 8
  tail call void %59(%"class.net::HostResolverProc"* nonnull %55) #9
  br label %60

60:                                               ; preds = %53, %48, %44
  %61 = icmp eq %"class.net::HostResolverProc"* %45, null
  br i1 %61, label %67, label %62

62:                                               ; preds = %60, %62
  %63 = phi %"class.net::HostResolverProc"* [ %65, %62 ], [ %45, %60 ]
  %64 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %63, i64 0, i32 3, i32 0
  %65 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %64, align 8
  %66 = icmp eq %"class.net::HostResolverProc"* %65, null
  br i1 %66, label %67, label %62

67:                                               ; preds = %62, %60
  %68 = phi %"class.net::HostResolverProc"* [ null, %60 ], [ %63, %62 ]
  %69 = icmp eq %"class.net::HostResolverProc"* %68, %0
  %70 = select i1 %69, %"class.net::HostResolverProc"* %46, %"class.net::HostResolverProc"* %45
  %71 = icmp eq %"class.net::HostResolverProc"* %70, null
  br i1 %71, label %75, label %72

72:                                               ; preds = %67
  %73 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %70, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = atomicrmw add i32* %73, i32 1 monotonic
  br label %75

75:                                               ; preds = %72, %67
  %76 = ptrtoint %"class.net::HostResolverProc"* %70 to i64
  %77 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %9, align 8
  store i64 %76, i64* %10, align 8
  %78 = icmp eq %"class.net::HostResolverProc"* %77, null
  br i1 %78, label %91, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %77, i64 0, i32 1
  %81 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = atomicrmw sub i32* %81, i32 1 acq_rel
  %83 = icmp eq i32 %82, 1
  br i1 %83, label %84, label %91

84:                                               ; preds = %79
  %85 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %80, i64 -2
  %86 = bitcast %"class.base::RefCountedThreadSafe"* %85 to %"class.net::HostResolverProc"*
  %87 = bitcast %"class.base::RefCountedThreadSafe"* %85 to void (%"class.net::HostResolverProc"*)***
  %88 = load void (%"class.net::HostResolverProc"*)**, void (%"class.net::HostResolverProc"*)*** %87, align 8
  %89 = getelementptr inbounds void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %88, i64 2
  %90 = load void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %89, align 8
  tail call void %90(%"class.net::HostResolverProc"* nonnull %86) #9
  br label %91

91:                                               ; preds = %42, %84, %79, %75
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16HostResolverProc15SetPreviousProcEPS0_(%"class.net::HostResolverProc"*, %"class.net::HostResolverProc"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %3, i64 0, i32 0
  %5 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %4, align 8
  %6 = bitcast %class.scoped_refptr* %3 to i64*
  store i64 0, i64* %6, align 8
  %7 = icmp eq %"class.net::HostResolverProc"* %5, null
  br i1 %7, label %20, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %5, i64 0, i32 1
  %10 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw sub i32* %10, i32 1 acq_rel
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %20

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %9, i64 -2
  %15 = bitcast %"class.base::RefCountedThreadSafe"* %14 to %"class.net::HostResolverProc"*
  %16 = bitcast %"class.base::RefCountedThreadSafe"* %14 to void (%"class.net::HostResolverProc"*)***
  %17 = load void (%"class.net::HostResolverProc"*)**, void (%"class.net::HostResolverProc"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %17, i64 2
  %19 = load void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %18, align 8
  tail call void %19(%"class.net::HostResolverProc"* nonnull %15) #9
  br label %20

20:                                               ; preds = %2, %8, %13
  %21 = icmp eq %"class.net::HostResolverProc"* %1, null
  br i1 %21, label %27, label %22

22:                                               ; preds = %20, %22
  %23 = phi %"class.net::HostResolverProc"* [ %25, %22 ], [ %1, %20 ]
  %24 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %23, i64 0, i32 3, i32 0
  %25 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %24, align 8
  %26 = icmp eq %"class.net::HostResolverProc"* %25, null
  br i1 %26, label %27, label %22

27:                                               ; preds = %22, %20
  %28 = phi %"class.net::HostResolverProc"* [ null, %20 ], [ %23, %22 ]
  %29 = icmp eq %"class.net::HostResolverProc"* %28, %0
  %30 = select i1 %29, %"class.net::HostResolverProc"* %5, %"class.net::HostResolverProc"* %1
  %31 = icmp eq %"class.net::HostResolverProc"* %30, null
  br i1 %31, label %35, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %30, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = atomicrmw add i32* %33, i32 1 monotonic
  br label %35

35:                                               ; preds = %32, %27
  %36 = ptrtoint %"class.net::HostResolverProc"* %30 to i64
  %37 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %4, align 8
  store i64 %36, i64* %6, align 8
  %38 = icmp eq %"class.net::HostResolverProc"* %37, null
  br i1 %38, label %51, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %37, i64 0, i32 1
  %41 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %40, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = atomicrmw sub i32* %41, i32 1 acq_rel
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %44, label %51

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %40, i64 -2
  %46 = bitcast %"class.base::RefCountedThreadSafe"* %45 to %"class.net::HostResolverProc"*
  %47 = bitcast %"class.base::RefCountedThreadSafe"* %45 to void (%"class.net::HostResolverProc"*)***
  %48 = load void (%"class.net::HostResolverProc"*)**, void (%"class.net::HostResolverProc"*)*** %47, align 8
  %49 = getelementptr inbounds void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %48, i64 2
  %50 = load void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %49, align 8
  tail call void %50(%"class.net::HostResolverProc"* nonnull %46) #9
  br label %51

51:                                               ; preds = %35, %39, %44
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16HostResolverProcD2Ev(%"class.net::HostResolverProc"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3net16HostResolverProcE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %0, i64 0, i32 3, i32 0
  %4 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %3, align 8
  %5 = icmp eq %"class.net::HostResolverProc"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %12 to %"class.net::HostResolverProc"*
  %14 = bitcast %"class.base::RefCountedThreadSafe"* %12 to void (%"class.net::HostResolverProc"*)***
  %15 = load void (%"class.net::HostResolverProc"*)**, void (%"class.net::HostResolverProc"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %15, i64 2
  %17 = load void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %16, align 8
  tail call void %17(%"class.net::HostResolverProc"* nonnull %13) #9
  br label %18

18:                                               ; preds = %1, %6, %11
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN3net16HostResolverProcD0Ev(%"class.net::HostResolverProc"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #10
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3net16HostResolverProc20ResolveUsingPreviousERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_13AddressFamilyEiPNS_11AddressListEPi(%"class.net::HostResolverProc"* nocapture readonly, %"class.std::__1::basic_string"* dereferenceable(24), i32, i32, %"class.net::AddressList"*, i32*) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %0, i64 0, i32 3, i32 0
  %9 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %8, align 8
  %10 = icmp eq %"class.net::HostResolverProc"* %9, null
  br i1 %10, label %16, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.net::HostResolverProc"* %9 to i32 (%"class.net::HostResolverProc"*, %"class.std::__1::basic_string"*, i32, i32, %"class.net::AddressList"*, i32*)***
  %13 = load i32 (%"class.net::HostResolverProc"*, %"class.std::__1::basic_string"*, i32, i32, %"class.net::AddressList"*, i32*)**, i32 (%"class.net::HostResolverProc"*, %"class.std::__1::basic_string"*, i32, i32, %"class.net::AddressList"*, i32*)*** %12, align 8
  %14 = load i32 (%"class.net::HostResolverProc"*, %"class.std::__1::basic_string"*, i32, i32, %"class.net::AddressList"*, i32*)*, i32 (%"class.net::HostResolverProc"*, %"class.std::__1::basic_string"*, i32, i32, %"class.net::AddressList"*, i32*)** %13, align 8
  %15 = tail call i32 %14(%"class.net::HostResolverProc"* nonnull %9, %"class.std::__1::basic_string"* dereferenceable(24) %1, i32 %2, i32 %3, %"class.net::AddressList"* %4, i32* %5) #9
  br label %25

16:                                               ; preds = %6
  %17 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %0, i64 0, i32 2
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %16
  %21 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #9
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #9
  br label %23

23:                                               ; preds = %16, %20
  %24 = call i32 @_ZN3net22SystemHostResolverCallERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_13AddressFamilyEiPNS_11AddressListEPi(%"class.std::__1::basic_string"* dereferenceable(24) %1, i32 %2, i32 %3, %"class.net::AddressList"* %4, i32* %5)
  br label %25

25:                                               ; preds = %23, %11
  %26 = phi i32 [ %15, %11 ], [ %24, %23 ]
  ret i32 %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3net22SystemHostResolverCallERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_13AddressFamilyEiPNS_11AddressListEPi(%"class.std::__1::basic_string"* dereferenceable(24), i32, i32, %"class.net::AddressList"*, i32*) local_unnamed_addr #0 {
  %6 = alloca %struct.addrinfo, align 8
  %7 = alloca %"class.base::ScopedBlockingCall", align 8
  %8 = alloca %"class.base::Location", align 8
  %9 = alloca %"class.absl::optional.40", align 8
  %10 = alloca %"class.std::__1::tuple", align 8
  %11 = alloca %"class.std::__1::tuple", align 8
  %12 = alloca %"class.net::AddressList", align 8
  %13 = bitcast %struct.addrinfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %13) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 48, i1 false)
  %14 = sext i32 %1 to i64
  %15 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN3net22SystemHostResolverCallERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_13AddressFamilyEiPNS_11AddressListEPi, i64 0, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i64 0, i32 1
  store i32 %16, i32* %17, align 4
  %18 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i64 0, i32 0
  %19 = shl i32 %2, 4
  %20 = and i32 %19, 32
  %21 = shl i32 %2, 1
  %22 = and i32 %21, 2
  %23 = or i32 %20, %22
  %24 = xor i32 %23, 32
  store i32 %24, i32* %18, align 8
  %25 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i64 0, i32 2
  store i32 1, i32* %25, align 8
  %26 = bitcast %"class.base::ScopedBlockingCall"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %26) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 80, i1 false)
  %27 = bitcast %"class.base::Location"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %27) #9
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %8, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i32 176) #9
  call void @_ZN4base18ScopedBlockingCallC1ERKNS_8LocationENS_12BlockingTypeE(%"class.base::ScopedBlockingCall"* nonnull %7, %"class.base::Location"* nonnull dereferenceable(32) %8, i32 1) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %27) #9
  call void @_ZN3net22DnsReloaderMaybeReloadEv() #9
  %28 = getelementptr inbounds %"class.absl::optional.40", %"class.absl::optional.40"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 24, i1 false)
  store i8 0, i8* %28, align 8
  %29 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29) #9
  call void @_ZN3net11AddressInfo3GetERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERK8addrinfoNS1_10unique_ptrINS_14AddrInfoGetterENS1_14default_deleteISE_EEEE(%"class.std::__1::tuple"* nonnull sret %10, %"class.std::__1::basic_string"* dereferenceable(24) %0, %struct.addrinfo* nonnull dereferenceable(48) %6, %"class.net::AddrInfoGetter"* null) #9
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %5
  %33 = getelementptr inbounds i8, i8* %29, i64 24
  %34 = bitcast i8* %33 to <2 x i32>*
  %35 = load <2 x i32>, <2 x i32>* %34, align 8
  br label %46

36:                                               ; preds = %5
  %37 = getelementptr inbounds %"class.absl::optional.40", %"class.absl::optional.40"* %9, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %38 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN3net11AddressInfoC1EOS0_(%"class.net::AddressInfo"* %37, %"class.net::AddressInfo"* dereferenceable(16) %38) #9
  store i8 1, i8* %28, align 8
  %39 = load i8, i8* %29, align 8
  %40 = getelementptr inbounds i8, i8* %29, i64 24
  %41 = bitcast i8* %40 to <2 x i32>*
  %42 = load <2 x i32>, <2 x i32>* %41, align 8
  %43 = icmp eq i8 %39, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %36
  %45 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN3net11AddressInfoD1Ev(%"class.net::AddressInfo"* %45) #9
  store i8 0, i8* %29, align 8
  br label %46

46:                                               ; preds = %32, %36, %44
  %47 = phi <2 x i32> [ %35, %32 ], [ %42, %36 ], [ %42, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #9
  %48 = load i32, i32* %17, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %46
  %51 = load i32, i32* %18, align 8
  %52 = and i32 %51, 32
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %101, label %54

54:                                               ; preds = %50, %46
  %55 = load i8, i8* %28, align 8, !range !2
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %101, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"class.absl::optional.40", %"class.absl::optional.40"* %9, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %59 = call zeroext i1 @_ZNK3net11AddressInfo25IsAllLocalhostOfOneFamilyEv(%"class.net::AddressInfo"* %58) #9
  br i1 %59, label %60, label %101

60:                                               ; preds = %57
  %61 = and i32 %2, 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %64, label %63

63:                                               ; preds = %60
  store i32 0, i32* %17, align 4
  br label %64

64:                                               ; preds = %60, %63
  %65 = phi i1 [ true, %63 ], [ false, %60 ]
  %66 = load i32, i32* %18, align 8
  %67 = and i32 %66, 32
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %64
  %70 = and i32 %66, -33
  store i32 %70, i32* %18, align 8
  br label %72

71:                                               ; preds = %64
  br i1 %65, label %72, label %101

72:                                               ; preds = %69, %71
  %73 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %73) #9
  call void @_ZN3net11AddressInfo3GetERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERK8addrinfoNS1_10unique_ptrINS_14AddrInfoGetterENS1_14default_deleteISE_EEEE(%"class.std::__1::tuple"* nonnull sret %11, %"class.std::__1::basic_string"* dereferenceable(24) %0, %struct.addrinfo* nonnull dereferenceable(48) %6, %"class.net::AddrInfoGetter"* null) #9
  %74 = load i8, i8* %73, align 8, !range !2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %83, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %78 = load i8, i8* %28, align 8, !range !2
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %76
  %81 = call dereferenceable(16) %"class.net::AddressInfo"* @_ZN3net11AddressInfoaSEOS0_(%"class.net::AddressInfo"* %58, %"class.net::AddressInfo"* dereferenceable(16) %77) #9
  br label %91

82:                                               ; preds = %76
  call void @_ZN3net11AddressInfoC1EOS0_(%"class.net::AddressInfo"* %58, %"class.net::AddressInfo"* dereferenceable(16) %77) #9
  store i8 1, i8* %28, align 8
  br label %91

83:                                               ; preds = %72
  %84 = load i8, i8* %28, align 8, !range !2
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %90

86:                                               ; preds = %83
  %87 = getelementptr inbounds i8, i8* %73, i64 24
  %88 = bitcast i8* %87 to <2 x i32>*
  %89 = load <2 x i32>, <2 x i32>* %88, align 8
  br label %99

90:                                               ; preds = %83
  call void @_ZN3net11AddressInfoD1Ev(%"class.net::AddressInfo"* %58) #9
  store i8 0, i8* %28, align 8
  br label %91

91:                                               ; preds = %80, %82, %90
  %92 = load i8, i8* %73, align 8
  %93 = getelementptr inbounds i8, i8* %73, i64 24
  %94 = bitcast i8* %93 to <2 x i32>*
  %95 = load <2 x i32>, <2 x i32>* %94, align 8
  %96 = icmp eq i8 %92, 0
  br i1 %96, label %99, label %97

97:                                               ; preds = %91
  %98 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN3net11AddressInfoD1Ev(%"class.net::AddressInfo"* %98) #9
  store i8 0, i8* %73, align 8
  br label %99

99:                                               ; preds = %86, %91, %97
  %100 = phi <2 x i32> [ %89, %86 ], [ %95, %91 ], [ %95, %97 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %73) #9
  br label %101

101:                                              ; preds = %54, %50, %57, %99, %71
  %102 = phi <2 x i32> [ %47, %50 ], [ %100, %99 ], [ %47, %71 ], [ %47, %57 ], [ %47, %54 ]
  %103 = icmp eq i32* %4, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %101
  %105 = extractelement <2 x i32> %102, i32 1
  store i32 %105, i32* %4, align 4
  br label %106

106:                                              ; preds = %101, %104
  %107 = load i8, i8* %28, align 8, !range !2
  %108 = icmp eq i8 %107, 0
  %109 = extractelement <2 x i32> %102, i32 0
  br i1 %108, label %118, label %110

110:                                              ; preds = %106
  %111 = bitcast %"class.net::AddressList"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %111) #9
  %112 = getelementptr inbounds %"class.absl::optional.40", %"class.absl::optional.40"* %9, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZNK3net11AddressInfo17CreateAddressListEv(%"class.net::AddressList"* nonnull sret %12, %"class.net::AddressInfo"* %112) #9
  %113 = call dereferenceable(48) %"class.net::AddressList"* @_ZN3net11AddressListaSEOS0_(%"class.net::AddressList"* %3, %"class.net::AddressList"* nonnull dereferenceable(48) %12) #9
  call void @_ZN3net11AddressListD1Ev(%"class.net::AddressList"* nonnull %12) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %111) #9
  %114 = load i8, i8* %28, align 8, !range !2
  %115 = icmp eq i8 %114, 0
  br i1 %115, label %118, label %116

116:                                              ; preds = %110
  %117 = getelementptr inbounds %"class.absl::optional.40", %"class.absl::optional.40"* %9, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN3net11AddressInfoD1Ev(%"class.net::AddressInfo"* %117) #9
  store i8 0, i8* %28, align 8
  br label %118

118:                                              ; preds = %106, %110, %116
  %119 = phi i32 [ 0, %110 ], [ 0, %116 ], [ %109, %106 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #9
  call void @_ZN4base18ScopedBlockingCallD1Ev(%"class.base::ScopedBlockingCall"* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %26) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %13) #9
  ret i32 %119
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.net::HostResolverProc"* @_ZN3net16HostResolverProc11GetLastProcEPS0_(%"class.net::HostResolverProc"* readonly) local_unnamed_addr #6 align 2 {
  %2 = icmp eq %"class.net::HostResolverProc"* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1, %3
  %4 = phi %"class.net::HostResolverProc"* [ %6, %3 ], [ %0, %1 ]
  %5 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %4, i64 0, i32 3, i32 0
  %6 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %5, align 8
  %7 = icmp eq %"class.net::HostResolverProc"* %6, null
  br i1 %7, label %8, label %3

8:                                                ; preds = %3, %1
  %9 = phi %"class.net::HostResolverProc"* [ null, %1 ], [ %4, %3 ]
  ret %"class.net::HostResolverProc"* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16HostResolverProc11SetLastProcEPS0_(%"class.net::HostResolverProc"*, %"class.net::HostResolverProc"*) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.net::HostResolverProc"* %0, null
  br i1 %3, label %9, label %4

4:                                                ; preds = %2, %4
  %5 = phi %"class.net::HostResolverProc"* [ %7, %4 ], [ %0, %2 ]
  %6 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %5, i64 0, i32 3, i32 0
  %7 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %6, align 8
  %8 = icmp eq %"class.net::HostResolverProc"* %7, null
  br i1 %8, label %9, label %4

9:                                                ; preds = %4, %2
  %10 = phi %"class.net::HostResolverProc"* [ null, %2 ], [ %5, %4 ]
  %11 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %10, i64 0, i32 3
  %12 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %11, i64 0, i32 0
  %13 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %12, align 8
  %14 = bitcast %class.scoped_refptr* %11 to i64*
  store i64 0, i64* %14, align 8
  %15 = icmp eq %"class.net::HostResolverProc"* %13, null
  br i1 %15, label %28, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %13, i64 0, i32 1
  %18 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw sub i32* %18, i32 1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %28

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %17, i64 -2
  %23 = bitcast %"class.base::RefCountedThreadSafe"* %22 to %"class.net::HostResolverProc"*
  %24 = bitcast %"class.base::RefCountedThreadSafe"* %22 to void (%"class.net::HostResolverProc"*)***
  %25 = load void (%"class.net::HostResolverProc"*)**, void (%"class.net::HostResolverProc"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %25, i64 2
  %27 = load void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %26, align 8
  tail call void %27(%"class.net::HostResolverProc"* nonnull %23) #9
  br label %28

28:                                               ; preds = %21, %16, %9
  %29 = icmp eq %"class.net::HostResolverProc"* %1, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %28, %30
  %31 = phi %"class.net::HostResolverProc"* [ %33, %30 ], [ %1, %28 ]
  %32 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %31, i64 0, i32 3, i32 0
  %33 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %32, align 8
  %34 = icmp eq %"class.net::HostResolverProc"* %33, null
  br i1 %34, label %35, label %30

35:                                               ; preds = %30, %28
  %36 = phi %"class.net::HostResolverProc"* [ null, %28 ], [ %31, %30 ]
  %37 = icmp eq %"class.net::HostResolverProc"* %36, %10
  %38 = select i1 %37, %"class.net::HostResolverProc"* %13, %"class.net::HostResolverProc"* %1
  %39 = icmp eq %"class.net::HostResolverProc"* %38, null
  br i1 %39, label %43, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %38, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = atomicrmw add i32* %41, i32 1 monotonic
  br label %43

43:                                               ; preds = %40, %35
  %44 = ptrtoint %"class.net::HostResolverProc"* %38 to i64
  %45 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %12, align 8
  store i64 %44, i64* %14, align 8
  %46 = icmp eq %"class.net::HostResolverProc"* %45, null
  br i1 %46, label %59, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %45, i64 0, i32 1
  %49 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %48, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = atomicrmw sub i32* %49, i32 1 acq_rel
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %59

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %48, i64 -2
  %54 = bitcast %"class.base::RefCountedThreadSafe"* %53 to %"class.net::HostResolverProc"*
  %55 = bitcast %"class.base::RefCountedThreadSafe"* %53 to void (%"class.net::HostResolverProc"*)***
  %56 = load void (%"class.net::HostResolverProc"*)**, void (%"class.net::HostResolverProc"*)*** %55, align 8
  %57 = getelementptr inbounds void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %56, i64 2
  %58 = load void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %57, align 8
  tail call void %58(%"class.net::HostResolverProc"* nonnull %54) #9
  br label %59

59:                                               ; preds = %43, %47, %52
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %"class.net::HostResolverProc"* @_ZN3net16HostResolverProc10SetDefaultEPS0_(%"class.net::HostResolverProc"*) local_unnamed_addr #7 align 2 {
  %2 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** @_ZN3net16HostResolverProc13default_proc_E, align 8
  store %"class.net::HostResolverProc"* %0, %"class.net::HostResolverProc"** @_ZN3net16HostResolverProc13default_proc_E, align 8
  ret %"class.net::HostResolverProc"* %2
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.net::HostResolverProc"* @_ZN3net16HostResolverProc10GetDefaultEv() local_unnamed_addr #6 align 2 {
  %1 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** @_ZN3net16HostResolverProc13default_proc_E, align 8
  ret %"class.net::HostResolverProc"* %1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #4

declare void @_ZN4base18ScopedBlockingCallC1ERKNS_8LocationENS_12BlockingTypeE(%"class.base::ScopedBlockingCall"*, %"class.base::Location"* dereferenceable(32), i32) unnamed_addr #4

declare void @_ZN3net22DnsReloaderMaybeReloadEv() local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN3net11AddressInfo3GetERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERK8addrinfoNS1_10unique_ptrINS_14AddrInfoGetterENS1_14default_deleteISE_EEEE(%"class.std::__1::tuple"* sret, %"class.std::__1::basic_string"* dereferenceable(24), %struct.addrinfo* dereferenceable(48), %"class.net::AddrInfoGetter"*) local_unnamed_addr #4

declare zeroext i1 @_ZNK3net11AddressInfo25IsAllLocalhostOfOneFamilyEv(%"class.net::AddressInfo"*) local_unnamed_addr #4

declare void @_ZNK3net11AddressInfo17CreateAddressListEv(%"class.net::AddressList"* sret, %"class.net::AddressInfo"*) local_unnamed_addr #4

declare dereferenceable(48) %"class.net::AddressList"* @_ZN3net11AddressListaSEOS0_(%"class.net::AddressList"*, %"class.net::AddressList"* dereferenceable(48)) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN3net11AddressListD1Ev(%"class.net::AddressList"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4base18ScopedBlockingCallD1Ev(%"class.base::ScopedBlockingCall"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22SystemHostResolverProcC2Ev(%"class.net::SystemHostResolverProc"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::SystemHostResolverProc", %"class.net::SystemHostResolverProc"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"class.net::SystemHostResolverProc", %"class.net::SystemHostResolverProc"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %"class.net::SystemHostResolverProc", %"class.net::SystemHostResolverProc"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3net16HostResolverProcE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.net::SystemHostResolverProc", %"class.net::SystemHostResolverProc"* %0, i64 0, i32 0, i32 2
  store i8 1, i8* %5, align 4
  %6 = getelementptr inbounds %"class.net::SystemHostResolverProc", %"class.net::SystemHostResolverProc"* %0, i64 0, i32 0, i32 3
  %7 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %6, i64 0, i32 0
  %8 = bitcast %class.scoped_refptr* %6 to i64*
  %9 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** @_ZN3net16HostResolverProc13default_proc_E, align 8
  store i64 0, i64* %8, align 8
  %10 = icmp eq %"class.net::HostResolverProc"* %9, null
  br i1 %10, label %16, label %11

11:                                               ; preds = %1, %11
  %12 = phi %"class.net::HostResolverProc"* [ %14, %11 ], [ %9, %1 ]
  %13 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %12, i64 0, i32 3, i32 0
  %14 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %13, align 8
  %15 = icmp eq %"class.net::HostResolverProc"* %14, null
  br i1 %15, label %16, label %11

16:                                               ; preds = %11, %1
  %17 = phi %"class.net::HostResolverProc"* [ null, %1 ], [ %12, %11 ]
  %18 = icmp eq %"class.net::HostResolverProc"* %17, %2
  %19 = select i1 %18, %"class.net::HostResolverProc"* null, %"class.net::HostResolverProc"* %9
  %20 = icmp eq %"class.net::HostResolverProc"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  %22 = ptrtoint %"class.net::HostResolverProc"* %19 to i64
  store i64 %22, i64* %8, align 8
  br label %41

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %19, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw add i32* %24, i32 1 monotonic
  %26 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %7, align 8
  %27 = ptrtoint %"class.net::HostResolverProc"* %19 to i64
  store i64 %27, i64* %8, align 8
  %28 = icmp eq %"class.net::HostResolverProc"* %26, null
  br i1 %28, label %41, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %26, i64 0, i32 1
  %31 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw sub i32* %31, i32 1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %41

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %30, i64 -2
  %36 = bitcast %"class.base::RefCountedThreadSafe"* %35 to %"class.net::HostResolverProc"*
  %37 = bitcast %"class.base::RefCountedThreadSafe"* %35 to void (%"class.net::HostResolverProc"*)***
  %38 = load void (%"class.net::HostResolverProc"*)**, void (%"class.net::HostResolverProc"*)*** %37, align 8
  %39 = getelementptr inbounds void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %38, i64 2
  %40 = load void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %39, align 8
  tail call void %40(%"class.net::HostResolverProc"* nonnull %36) #9
  br label %41

41:                                               ; preds = %21, %23, %29, %34
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3net22SystemHostResolverProcE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3net22SystemHostResolverProc7ResolveERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_13AddressFamilyEiPNS_11AddressListEPi(%"class.net::SystemHostResolverProc"* nocapture readnone, %"class.std::__1::basic_string"* dereferenceable(24), i32, i32, %"class.net::AddressList"*, i32*) unnamed_addr #0 align 2 {
  %7 = tail call i32 @_ZN3net22SystemHostResolverCallERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_13AddressFamilyEiPNS_11AddressListEPi(%"class.std::__1::basic_string"* dereferenceable(24) %1, i32 %2, i32 %3, %"class.net::AddressList"* %4, i32* %5)
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22SystemHostResolverProcD0Ev(%"class.net::SystemHostResolverProc"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::SystemHostResolverProc", %"class.net::SystemHostResolverProc"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3net16HostResolverProcE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::SystemHostResolverProc", %"class.net::SystemHostResolverProc"* %0, i64 0, i32 0, i32 3, i32 0
  %4 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %3, align 8
  %5 = icmp eq %"class.net::HostResolverProc"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %12 to %"class.net::HostResolverProc"*
  %14 = bitcast %"class.base::RefCountedThreadSafe"* %12 to void (%"class.net::HostResolverProc"*)***
  %15 = load void (%"class.net::HostResolverProc"*)**, void (%"class.net::HostResolverProc"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %15, i64 2
  %17 = load void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %16, align 8
  tail call void %17(%"class.net::HostResolverProc"* nonnull %13) #9
  br label %18

18:                                               ; preds = %1, %6, %11
  %19 = bitcast %"class.net::SystemHostResolverProc"* %0 to i8*
  tail call void @_ZdlPv(i8* %19) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net14ProcTaskParamsC2EPNS_16HostResolverProcEm(%"struct.net::ProcTaskParams"* nocapture, %"class.net::HostResolverProc"*, i64) unnamed_addr #7 align 2 {
  %4 = getelementptr inbounds %"struct.net::ProcTaskParams", %"struct.net::ProcTaskParams"* %0, i64 0, i32 0, i32 0
  store %"class.net::HostResolverProc"* %1, %"class.net::HostResolverProc"** %4, align 8
  %5 = icmp eq %"class.net::HostResolverProc"* %1, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 1 monotonic
  br label %9

9:                                                ; preds = %3, %6
  %10 = getelementptr inbounds %"struct.net::ProcTaskParams", %"struct.net::ProcTaskParams"* %0, i64 0, i32 1
  store i64 %2, i64* %10, align 8
  %11 = getelementptr inbounds %"struct.net::ProcTaskParams", %"struct.net::ProcTaskParams"* %0, i64 0, i32 2, i32 0
  store i64 6000000, i64* %11, align 8
  %12 = getelementptr inbounds %"struct.net::ProcTaskParams", %"struct.net::ProcTaskParams"* %0, i64 0, i32 3
  store i32 2, i32* %12, align 8
  %13 = load i64, i64* @_ZN3net12HostResolver14ManagerOptions21kDefaultRetryAttemptsE, align 8
  %14 = icmp eq i64 %13, %2
  br i1 %14, label %15, label %16

15:                                               ; preds = %9
  store i64 4, i64* %10, align 8
  br label %16

16:                                               ; preds = %15, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14ProcTaskParamsC2ERKS0_(%"struct.net::ProcTaskParams"* nocapture, %"struct.net::ProcTaskParams"* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.net::ProcTaskParams", %"struct.net::ProcTaskParams"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %3, align 8
  %5 = getelementptr inbounds %"struct.net::ProcTaskParams", %"struct.net::ProcTaskParams"* %0, i64 0, i32 0, i32 0
  store %"class.net::HostResolverProc"* %4, %"class.net::HostResolverProc"** %5, align 8
  %6 = icmp eq %"class.net::HostResolverProc"* %4, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %4, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  %11 = getelementptr inbounds %"struct.net::ProcTaskParams", %"struct.net::ProcTaskParams"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.net::ProcTaskParams", %"struct.net::ProcTaskParams"* %1, i64 0, i32 1
  %13 = bitcast i64* %11 to i8*
  %14 = bitcast i64* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 20, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14ProcTaskParamsD2Ev(%"struct.net::ProcTaskParams"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.net::ProcTaskParams", %"struct.net::ProcTaskParams"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.net::HostResolverProc"*, %"class.net::HostResolverProc"** %2, align 8
  %4 = icmp eq %"class.net::HostResolverProc"* %3, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::HostResolverProc", %"class.net::HostResolverProc"* %3, i64 0, i32 1
  %7 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 -2
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %11 to %"class.net::HostResolverProc"*
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %11 to void (%"class.net::HostResolverProc"*)***
  %14 = load void (%"class.net::HostResolverProc"*)**, void (%"class.net::HostResolverProc"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %14, i64 2
  %16 = load void (%"class.net::HostResolverProc"*)*, void (%"class.net::HostResolverProc"*)** %15, align 8
  tail call void %16(%"class.net::HostResolverProc"* nonnull %12) #9
  br label %17

17:                                               ; preds = %1, %5, %10
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind
declare void @_ZN3net11AddressInfoD1Ev(%"class.net::AddressInfo"*) unnamed_addr #5

declare dereferenceable(16) %"class.net::AddressInfo"* @_ZN3net11AddressInfoaSEOS0_(%"class.net::AddressInfo"*, %"class.net::AddressInfo"* dereferenceable(16)) local_unnamed_addr #4

declare void @_ZN3net11AddressInfoC1EOS0_(%"class.net::AddressInfo"*, %"class.net::AddressInfo"* dereferenceable(16)) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
