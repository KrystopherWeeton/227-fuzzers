; ModuleID = '../../third_party/webrtc/modules/rtp_rtcp/source/rtp_format.cc'
source_filename = "../../third_party/webrtc/modules/rtp_rtcp/source/rtp_format.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::RtpPacketizer" = type { i32 (...)** }
%"struct.webrtc::RTPVideoHeader" = type { %"class.absl::optional.1", i32, i16, i16, i32, i8, i8, i8, i8, i8, i32, %"struct.webrtc::VideoPlayoutDelay", %"struct.webrtc::VideoSendTiming", %"class.absl::optional.21", %"class.absl::optional.31", %"class.absl::variant" }
%"class.absl::optional.1" = type { %"class.absl::optional_internal::optional_data.2" }
%"class.absl::optional_internal::optional_data.2" = type { %"class.absl::optional_internal::optional_data_base.3" }
%"class.absl::optional_internal::optional_data_base.3" = type { %"class.absl::optional_internal::optional_data_dtor_base.4" }
%"class.absl::optional_internal::optional_data_dtor_base.4" = type { i8, %union.anon.5 }
%union.anon.5 = type { %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo" }
%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo" = type { i64, i32, i32, %"class.absl::InlinedVector", %"class.absl::InlinedVector.7", %"class.absl::InlinedVector.14", %"class.std::__1::bitset" }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.6" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.7" = type { %"class.absl::inlined_vector_internal::Storage.8" }
%"class.absl::inlined_vector_internal::Storage.8" = type { %"class.absl::container_internal::CompressedTuple.9", %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data" }
%"class.absl::container_internal::CompressedTuple.9" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.10" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.10" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Allocated" = type { i64*, i64 }
%"class.absl::InlinedVector.14" = type { %"class.absl::inlined_vector_internal::Storage.15" }
%"class.absl::inlined_vector_internal::Storage.15" = type { %"class.absl::container_internal::CompressedTuple.16", %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" }
%"class.absl::container_internal::CompressedTuple.16" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.17" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.17" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" = type { i32*, i64 }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"struct.webrtc::VideoPlayoutDelay" = type { i32, i32 }
%"struct.webrtc::VideoSendTiming" = type { i16, i16, i16, i16, i16, i16, i8 }
%"class.absl::optional.21" = type { %"class.absl::optional_internal::optional_data.22" }
%"class.absl::optional_internal::optional_data.22" = type { %"class.absl::optional_internal::optional_data_base.23" }
%"class.absl::optional_internal::optional_data_base.23" = type { %"class.absl::optional_internal::optional_data_dtor_base.24" }
%"class.absl::optional_internal::optional_data_dtor_base.24" = type { i8, %union.anon.25 }
%union.anon.25 = type { %"class.webrtc::ColorSpace" }
%"class.webrtc::ColorSpace" = type { i8, i8, i8, i32, i32, i32, %"class.absl::optional.26" }
%"class.absl::optional.26" = type { %"class.absl::optional_internal::optional_data.27" }
%"class.absl::optional_internal::optional_data.27" = type { %"class.absl::optional_internal::optional_data_base.28" }
%"class.absl::optional_internal::optional_data_base.28" = type { %"class.absl::optional_internal::optional_data_dtor_base.29" }
%"class.absl::optional_internal::optional_data_dtor_base.29" = type { i8, %union.anon.30 }
%union.anon.30 = type { %"struct.webrtc::HdrMetadata" }
%"struct.webrtc::HdrMetadata" = type { %"struct.webrtc::HdrMasteringMetadata", i32, i32 }
%"struct.webrtc::HdrMasteringMetadata" = type { %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", float, float }
%"struct.webrtc::HdrMasteringMetadata::Chromaticity" = type { float, float }
%"class.absl::optional.31" = type { %"class.absl::optional_internal::optional_data.32" }
%"class.absl::optional_internal::optional_data.32" = type { %"class.absl::optional_internal::optional_data_base.33" }
%"class.absl::optional_internal::optional_data_base.33" = type { %"class.absl::optional_internal::optional_data_dtor_base.34" }
%"class.absl::optional_internal::optional_data_dtor_base.34" = type { i8, %union.anon.35 }
%union.anon.35 = type { i16 }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::Union", i64 }
%"union.absl::variant_internal::Union" = type { %"union.absl::variant_internal::Union.36" }
%"union.absl::variant_internal::Union.36" = type { %"union.absl::variant_internal::Union.37" }
%"union.absl::variant_internal::Union.37" = type { %"struct.webrtc::RTPVideoHeaderVP9" }
%"struct.webrtc::RTPVideoHeaderVP9" = type { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [3 x i16], i64, i64, i8, [8 x i16], [8 x i16], %"struct.webrtc::GofInfoVP9", i8 }
%"struct.webrtc::GofInfoVP9" = type { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16 }
%"class.webrtc::RtpPacketizerGeneric" = type { %"class.webrtc::RtpPacketizer", [3 x i8], i64, %"class.rtc::ArrayView", %"class.std::__1::vector", %"class.std::__1::__wrap_iter" }
%"class.rtc::ArrayView" = type { %"class.rtc::impl::ArrayViewBase" }
%"class.rtc::impl::ArrayViewBase" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { i32* }
%"class.std::__1::__wrap_iter" = type { i32* }
%"struct.webrtc::RTPVideoHeaderH264" = type { i8, i32, [10 x %"struct.webrtc::NaluInfo"], i64, i32 }
%"struct.webrtc::NaluInfo" = type { i8, i32, i32 }
%"class.webrtc::RtpPacketizerH264" = type { %"class.webrtc::RtpPacketizer", %"struct.webrtc::RtpPacketizer::PayloadSizeLimits", i64, %"class.std::__1::deque", %"class.std::__1::queue" }
%"struct.webrtc::RtpPacketizer::PayloadSizeLimits" = type { i32, i32, i32, i32 }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.58" }
%"struct.std::__1::__split_buffer" = type { %"class.rtc::ArrayView"**, %"class.rtc::ArrayView"**, %"class.rtc::ArrayView"**, %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.rtc::ArrayView"** }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { i64 }
%"class.std::__1::queue" = type { %"class.std::__1::deque.63" }
%"class.std::__1::deque.63" = type { %"class.std::__1::__deque_base.64" }
%"class.std::__1::__deque_base.64" = type { %"struct.std::__1::__split_buffer.65", i64, %"class.std::__1::__compressed_pair.71" }
%"struct.std::__1::__split_buffer.65" = type { %"struct.webrtc::RtpPacketizerH264::PacketUnit"**, %"struct.webrtc::RtpPacketizerH264::PacketUnit"**, %"struct.webrtc::RtpPacketizerH264::PacketUnit"**, %"class.std::__1::__compressed_pair.66" }
%"struct.webrtc::RtpPacketizerH264::PacketUnit" = type <{ %"class.rtc::ArrayView", i8, i8, i8, i8, [4 x i8] }>
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"struct.webrtc::RtpPacketizerH264::PacketUnit"** }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.webrtc::RTPVideoHeaderVP8" = type { i8, i16, i16, i8, i8, i32, i32, i8 }
%"class.webrtc::RtpPacketizerVp8" = type { %"class.webrtc::RtpPacketizer", %"class.absl::InlinedVector.81", %"class.rtc::ArrayView", %"class.std::__1::vector", %"class.std::__1::__wrap_iter" }
%"class.absl::InlinedVector.81" = type { %"class.absl::inlined_vector_internal::Storage.82" }
%"class.absl::inlined_vector_internal::Storage.82" = type { %"class.absl::container_internal::CompressedTuple.83", %"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data" }
%"class.absl::container_internal::CompressedTuple.83" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.84" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.84" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.6" }
%"union.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<unsigned char, 6, std::__1::allocator<unsigned char> >::Allocated" = type { i8*, i64 }
%"class.webrtc::RtpPacketizerVp9" = type { %"class.webrtc::RtpPacketizer", %"struct.webrtc::RTPVideoHeaderVP9", i32, i32, %"class.rtc::ArrayView", %"class.std::__1::vector", %"class.std::__1::__wrap_iter" }
%"class.webrtc::RtpPacketizerAv1" = type { %"class.webrtc::RtpPacketizer", i32, %"class.std::__1::vector.100", %"class.std::__1::vector.107", i8, i64 }
%"class.std::__1::vector.100" = type { %"class.std::__1::__vector_base.101" }
%"class.std::__1::__vector_base.101" = type { %"struct.webrtc::RtpPacketizerAv1::Obu"*, %"struct.webrtc::RtpPacketizerAv1::Obu"*, %"class.std::__1::__compressed_pair.102" }
%"struct.webrtc::RtpPacketizerAv1::Obu" = type <{ i8, i8, [6 x i8], %"class.rtc::ArrayView", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"struct.webrtc::RtpPacketizerAv1::Obu"* }
%"class.std::__1::vector.107" = type { %"class.std::__1::__vector_base.108" }
%"class.std::__1::__vector_base.108" = type { %"struct.webrtc::RtpPacketizerAv1::Packet"*, %"struct.webrtc::RtpPacketizerAv1::Packet"*, %"class.std::__1::__compressed_pair.109" }
%"struct.webrtc::RtpPacketizerAv1::Packet" = type { i32, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"struct.webrtc::RtpPacketizerAv1::Packet"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRKN6webrtc18RTPVideoHeaderH264EEET_v = comdat any

$_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRKN6webrtc17RTPVideoHeaderVP8EEET_v = comdat any

$_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRKN6webrtc17RTPVideoHeaderVP9EEET_v = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden %"class.webrtc::RtpPacketizer"* @_ZN6webrtc13RtpPacketizer6CreateEN4absl8optionalINS_14VideoCodecTypeEEEN3rtc9ArrayViewIKhLln4711EEENS0_17PayloadSizeLimitsERKNS_14RTPVideoHeaderE(i64, i8*, i64, i64, i64, %"struct.webrtc::RTPVideoHeader"* dereferenceable(1928)) local_unnamed_addr #0 align 2 {
  %7 = trunc i64 %0 to i8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %6
  %10 = tail call i8* @_Znwm(i64 72) #8
  %11 = bitcast i8* %10 to %"class.webrtc::RtpPacketizerGeneric"*
  %12 = icmp eq i64 %2, 0
  %13 = select i1 %12, i8* null, i8* %1
  tail call void @_ZN6webrtc20RtpPacketizerGenericC1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsE(%"class.webrtc::RtpPacketizerGeneric"* nonnull %11, i8* %13, i64 %2, i64 %3, i64 %4) #9
  br label %71

14:                                               ; preds = %6
  %15 = lshr i64 %0, 32
  %16 = trunc i64 %15 to i32
  switch i32 %16, label %66 [
    i32 4, label %17
    i32 1, label %31
    i32 2, label %44
    i32 3, label %56
  ]

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %5, i64 0, i32 15, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 3
  br i1 %20, label %23, label %21, !prof !2

21:                                               ; preds = %17
  %22 = tail call dereferenceable(144) %"struct.webrtc::RTPVideoHeaderH264"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRKN6webrtc18RTPVideoHeaderH264EEET_v() #10
  unreachable

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %5, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 22, i32 1, i64 40
  %25 = bitcast i8* %24 to i32*
  %26 = tail call i8* @_Znwm(i64 128) #8
  %27 = bitcast i8* %26 to %"class.webrtc::RtpPacketizerH264"*
  %28 = icmp eq i64 %2, 0
  %29 = select i1 %28, i8* null, i8* %1
  %30 = load i32, i32* %25, align 4
  tail call void @_ZN6webrtc17RtpPacketizerH264C1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsENS_21H264PacketizationModeE(%"class.webrtc::RtpPacketizerH264"* nonnull %27, i8* %29, i64 %2, i64 %3, i64 %4, i32 %30) #9
  br label %71

31:                                               ; preds = %14
  %32 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %5, i64 0, i32 15, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %33, 1
  br i1 %34, label %37, label %35, !prof !2

35:                                               ; preds = %31
  %36 = tail call dereferenceable(20) %"struct.webrtc::RTPVideoHeaderVP8"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRKN6webrtc17RTPVideoHeaderVP8EEET_v() #10
  unreachable

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %5, i64 0, i32 15
  %39 = bitcast %"class.absl::variant"* %38 to %"struct.webrtc::RTPVideoHeaderVP8"*
  %40 = tail call i8* @_Znwm(i64 80) #8
  %41 = bitcast i8* %40 to %"class.webrtc::RtpPacketizerVp8"*
  %42 = icmp eq i64 %2, 0
  %43 = select i1 %42, i8* null, i8* %1
  tail call void @_ZN6webrtc16RtpPacketizerVp8C1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsERKNS_17RTPVideoHeaderVP8E(%"class.webrtc::RtpPacketizerVp8"* nonnull %41, i8* %43, i64 %2, i64 %3, i64 %4, %"struct.webrtc::RTPVideoHeaderVP8"* dereferenceable(20) %39) #9
  br label %71

44:                                               ; preds = %14
  %45 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %5, i64 0, i32 15, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = icmp eq i64 %46, 2
  br i1 %47, label %50, label %48, !prof !2

48:                                               ; preds = %44
  %49 = tail call dereferenceable(1640) %"struct.webrtc::RTPVideoHeaderVP9"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRKN6webrtc17RTPVideoHeaderVP9EEET_v() #10
  unreachable

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %5, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = tail call i8* @_Znwm(i64 1704) #8
  %53 = bitcast i8* %52 to %"class.webrtc::RtpPacketizerVp9"*
  %54 = icmp eq i64 %2, 0
  %55 = select i1 %54, i8* null, i8* %1
  tail call void @_ZN6webrtc16RtpPacketizerVp9C1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsERKNS_17RTPVideoHeaderVP9E(%"class.webrtc::RtpPacketizerVp9"* nonnull %53, i8* %55, i64 %2, i64 %3, i64 %4, %"struct.webrtc::RTPVideoHeaderVP9"* dereferenceable(1640) %51) #9
  br label %71

56:                                               ; preds = %14
  %57 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %5, i64 0, i32 1
  %58 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %5, i64 0, i32 8
  %59 = tail call i8* @_Znwm(i64 80) #8
  %60 = bitcast i8* %59 to %"class.webrtc::RtpPacketizerAv1"*
  %61 = icmp eq i64 %2, 0
  %62 = select i1 %61, i8* null, i8* %1
  %63 = load i32, i32* %57, align 4
  %64 = load i8, i8* %58, align 1, !range !3
  %65 = icmp ne i8 %64, 0
  tail call void @_ZN6webrtc16RtpPacketizerAv1C1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsENS_14VideoFrameTypeEb(%"class.webrtc::RtpPacketizerAv1"* nonnull %60, i8* %62, i64 %2, i64 %3, i64 %4, i32 %63, i1 zeroext %65) #9
  br label %71

66:                                               ; preds = %14
  %67 = tail call i8* @_Znwm(i64 72) #8
  %68 = bitcast i8* %67 to %"class.webrtc::RtpPacketizerGeneric"*
  %69 = icmp eq i64 %2, 0
  %70 = select i1 %69, i8* null, i8* %1
  tail call void @_ZN6webrtc20RtpPacketizerGenericC1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsERKNS_14RTPVideoHeaderE(%"class.webrtc::RtpPacketizerGeneric"* nonnull %68, i8* %70, i64 %2, i64 %3, i64 %4, %"struct.webrtc::RTPVideoHeader"* dereferenceable(1928) %5) #9
  br label %71

71:                                               ; preds = %66, %56, %50, %37, %23, %9
  %72 = phi i8* [ %67, %66 ], [ %59, %56 ], [ %52, %50 ], [ %40, %37 ], [ %26, %23 ], [ %10, %9 ]
  %73 = bitcast i8* %72 to %"class.webrtc::RtpPacketizer"*
  ret %"class.webrtc::RtpPacketizer"* %73
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc13RtpPacketizer17SplitAboutEquallyEiRKNS0_17PayloadSizeLimitsE(%"class.std::__1::vector"* noalias sret, i32, %"struct.webrtc::RtpPacketizer::PayloadSizeLimits"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #9
  %7 = getelementptr inbounds %"struct.webrtc::RtpPacketizer::PayloadSizeLimits", %"struct.webrtc::RtpPacketizer::PayloadSizeLimits"* %2, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"struct.webrtc::RtpPacketizer::PayloadSizeLimits", %"struct.webrtc::RtpPacketizer::PayloadSizeLimits"* %2, i64 0, i32 3
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %1
  %12 = icmp slt i32 %8, %11
  br i1 %12, label %22, label %13

13:                                               ; preds = %3
  %14 = bitcast i32** %4 to i64*
  %15 = bitcast %"class.std::__1::vector"* %0 to i64*
  %16 = bitcast i32** %5 to i64*
  %17 = tail call i8* @_Znwm(i64 4) #8
  %18 = bitcast i8* %17 to i32*
  %19 = getelementptr inbounds i8, i8* %17, i64 4
  %20 = ptrtoint i8* %19 to i64
  store i32 %1, i32* %18, align 4
  %21 = ptrtoint i8* %17 to i64
  store i64 %21, i64* %15, align 8
  store i64 %20, i64* %14, align 8
  store i64 %20, i64* %16, align 8
  br label %140

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"struct.webrtc::RtpPacketizer::PayloadSizeLimits", %"struct.webrtc::RtpPacketizer::PayloadSizeLimits"* %2, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = icmp sgt i32 %8, %24
  br i1 %25, label %26, label %140

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"struct.webrtc::RtpPacketizer::PayloadSizeLimits", %"struct.webrtc::RtpPacketizer::PayloadSizeLimits"* %2, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %8, %28
  br i1 %29, label %30, label %140

30:                                               ; preds = %26
  %31 = add nsw i32 %24, %1
  %32 = add nsw i32 %31, %28
  %33 = add nsw i32 %8, -1
  %34 = add i32 %33, %32
  %35 = sdiv i32 %34, %8
  %36 = icmp eq i32 %35, 1
  %37 = select i1 %36, i32 2, i32 %35
  %38 = icmp sgt i32 %37, %1
  br i1 %38, label %140, label %39

39:                                               ; preds = %30
  %40 = sdiv i32 %32, %37
  %41 = srem i32 %32, %37
  %42 = sext i32 %37 to i64
  %43 = bitcast i32** %5 to i64*
  %44 = bitcast %"class.std::__1::vector"* %0 to i64*
  %45 = icmp eq i32 %37, 0
  br i1 %45, label %59, label %46

46:                                               ; preds = %39
  %47 = icmp slt i32 %37, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %46
  tail call void @abort() #10
  unreachable

49:                                               ; preds = %46
  %50 = shl nsw i64 %42, 2
  %51 = tail call i8* @_Znwm(i64 %50) #8
  %52 = bitcast i8* %51 to i32*
  %53 = getelementptr inbounds i32, i32* %52, i64 %42
  %54 = ptrtoint i32* %53 to i64
  %55 = insertelement <2 x i8*> undef, i8* %51, i32 0
  %56 = shufflevector <2 x i8*> %55, <2 x i8*> undef, <2 x i32> zeroinitializer
  %57 = ptrtoint <2 x i8*> %56 to <2 x i64>
  %58 = bitcast %"class.std::__1::vector"* %0 to <2 x i64>*
  store <2 x i64> %57, <2 x i64>* %58, align 8
  store i64 %54, i64* %43, align 8
  br label %59

59:                                               ; preds = %49, %39
  %60 = icmp sgt i32 %1, 0
  br i1 %60, label %61, label %140

61:                                               ; preds = %59
  %62 = bitcast i32** %4 to i64*
  br label %63

63:                                               ; preds = %61, %136
  %64 = phi i1 [ true, %61 ], [ false, %136 ]
  %65 = phi i32 [ %1, %61 ], [ %137, %136 ]
  %66 = phi i32 [ %40, %61 ], [ %70, %136 ]
  %67 = phi i32 [ %37, %61 ], [ %138, %136 ]
  %68 = icmp eq i32 %67, %41
  %69 = zext i1 %68 to i32
  %70 = add nsw i32 %66, %69
  br i1 %64, label %71, label %77

71:                                               ; preds = %63
  %72 = load i32, i32* %23, align 4
  %73 = add nsw i32 %72, 1
  %74 = icmp sgt i32 %70, %73
  %75 = sub nsw i32 %70, %72
  %76 = select i1 %74, i32 %75, i32 1
  br label %77

77:                                               ; preds = %71, %63
  %78 = phi i32 [ %70, %63 ], [ %76, %71 ]
  %79 = icmp sgt i32 %78, %65
  %80 = select i1 %79, i32 %65, i32 %78
  %81 = icmp eq i32 %67, 2
  %82 = icmp sle i32 %65, %78
  %83 = and i1 %81, %82
  %84 = zext i1 %83 to i32
  %85 = sub i32 %80, %84
  %86 = load i32*, i32** %4, align 8
  %87 = load i32*, i32** %5, align 8
  %88 = icmp eq i32* %86, %87
  %89 = ptrtoint i32* %87 to i64
  br i1 %88, label %93, label %90

90:                                               ; preds = %77
  store i32 %85, i32* %86, align 4
  %91 = getelementptr inbounds i32, i32* %86, i64 1
  %92 = ptrtoint i32* %91 to i64
  store i64 %92, i64* %62, align 8
  br label %136

93:                                               ; preds = %77
  %94 = ptrtoint i32* %86 to i64
  %95 = load i64, i64* %44, align 8
  %96 = sub i64 %94, %95
  %97 = ashr exact i64 %96, 2
  %98 = add nsw i64 %97, 1
  %99 = icmp ugt i64 %98, 4611686018427387903
  br i1 %99, label %100, label %102

100:                                              ; preds = %93
  %101 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %101) #10
  unreachable

102:                                              ; preds = %93
  %103 = sub i64 %89, %95
  %104 = ashr exact i64 %103, 2
  %105 = icmp ult i64 %104, 2305843009213693951
  br i1 %105, label %106, label %114

106:                                              ; preds = %102
  %107 = ashr exact i64 %103, 1
  %108 = icmp ult i64 %107, %98
  %109 = select i1 %108, i64 %98, i64 %107
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %119, label %111

111:                                              ; preds = %106
  %112 = icmp ugt i64 %109, 4611686018427387903
  br i1 %112, label %113, label %114

113:                                              ; preds = %111
  tail call void @abort() #10
  unreachable

114:                                              ; preds = %111, %102
  %115 = phi i64 [ %109, %111 ], [ 4611686018427387903, %102 ]
  %116 = shl i64 %115, 2
  %117 = tail call i8* @_Znwm(i64 %116) #8
  %118 = bitcast i8* %117 to i32*
  br label %119

119:                                              ; preds = %114, %106
  %120 = phi i64 [ %115, %114 ], [ 0, %106 ]
  %121 = phi i8* [ %117, %114 ], [ null, %106 ]
  %122 = phi i32* [ %118, %114 ], [ null, %106 ]
  %123 = getelementptr inbounds i32, i32* %122, i64 %97
  %124 = getelementptr inbounds i32, i32* %122, i64 %120
  %125 = ptrtoint i32* %124 to i64
  store i32 %85, i32* %123, align 4
  %126 = getelementptr inbounds i32, i32* %123, i64 1
  %127 = ptrtoint i32* %126 to i64
  %128 = ptrtoint i32* %122 to i64
  %129 = icmp sgt i64 %96, 0
  br i1 %129, label %130, label %132

130:                                              ; preds = %119
  %131 = inttoptr i64 %95 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %121, i8* align 4 %131, i64 %96, i1 false) #9
  br label %132

132:                                              ; preds = %130, %119
  store i64 %128, i64* %44, align 8
  store i64 %127, i64* %62, align 8
  store i64 %125, i64* %43, align 8
  %133 = icmp eq i64 %95, 0
  br i1 %133, label %136, label %134

134:                                              ; preds = %132
  %135 = inttoptr i64 %95 to i8*
  tail call void @_ZdlPv(i8* %135) #8
  br label %136

136:                                              ; preds = %90, %132, %134
  %137 = sub nsw i32 %65, %85
  %138 = add nsw i32 %67, -1
  %139 = icmp sgt i32 %137, 0
  br i1 %139, label %63, label %140

140:                                              ; preds = %136, %13, %59, %26, %22, %30
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(144) %"struct.webrtc::RTPVideoHeaderH264"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRKN6webrtc18RTPVideoHeaderH264EEET_v() local_unnamed_addr #1 comdat {
  tail call void @_ZN4absl16variant_internal21ThrowBadVariantAccessEv() #10
  unreachable
}

; Function Attrs: noreturn
declare void @_ZN4absl16variant_internal21ThrowBadVariantAccessEv() local_unnamed_addr #2

; Function Attrs: noreturn nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(20) %"struct.webrtc::RTPVideoHeaderVP8"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRKN6webrtc17RTPVideoHeaderVP8EEET_v() local_unnamed_addr #1 comdat {
  tail call void @_ZN4absl16variant_internal21ThrowBadVariantAccessEv() #10
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1640) %"struct.webrtc::RTPVideoHeaderVP9"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRKN6webrtc17RTPVideoHeaderVP9EEET_v() local_unnamed_addr #1 comdat {
  tail call void @_ZN4absl16variant_internal21ThrowBadVariantAccessEv() #10
  unreachable
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZN6webrtc20RtpPacketizerGenericC1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsE(%"class.webrtc::RtpPacketizerGeneric"*, i8*, i64, i64, i64) unnamed_addr #5

declare void @_ZN6webrtc17RtpPacketizerH264C1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsENS_21H264PacketizationModeE(%"class.webrtc::RtpPacketizerH264"*, i8*, i64, i64, i64, i32) unnamed_addr #5

declare void @_ZN6webrtc16RtpPacketizerVp8C1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsERKNS_17RTPVideoHeaderVP8E(%"class.webrtc::RtpPacketizerVp8"*, i8*, i64, i64, i64, %"struct.webrtc::RTPVideoHeaderVP8"* dereferenceable(20)) unnamed_addr #5

declare void @_ZN6webrtc16RtpPacketizerVp9C1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsERKNS_17RTPVideoHeaderVP9E(%"class.webrtc::RtpPacketizerVp9"*, i8*, i64, i64, i64, %"struct.webrtc::RTPVideoHeaderVP9"* dereferenceable(1640)) unnamed_addr #5

declare void @_ZN6webrtc16RtpPacketizerAv1C1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsENS_14VideoFrameTypeEb(%"class.webrtc::RtpPacketizerAv1"*, i8*, i64, i64, i64, i32, i1 zeroext) unnamed_addr #5

declare void @_ZN6webrtc20RtpPacketizerGenericC1EN3rtc9ArrayViewIKhLln4711EEENS_13RtpPacketizer17PayloadSizeLimitsERKNS_14RTPVideoHeaderE(%"class.webrtc::RtpPacketizerGeneric"*, i8*, i64, i64, i64, %"struct.webrtc::RTPVideoHeader"* dereferenceable(1928)) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { builtin nounwind }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
