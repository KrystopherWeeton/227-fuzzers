; ModuleID = '../../third_party/angle/src/compiler/translator/QualifierTypes.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/QualifierTypes.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::ImmutableString" = type { i8*, i64 }
%"struct.std::nothrow_t" = type { i8 }
%"struct.sh::TTypeQualifier" = type { %"struct.sh::TLayoutQualifier", %"struct.sh::TMemoryQualifier", i32, i32, i8, i8, %"struct.sh::TSourceLoc" }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TTypeQualifierBuilder" = type <{ %"class.sh::TVector", i32, [4 x i8] }>
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"**, %"class.std::__1::__compressed_pair" }
%"class.sh::TQualifierWrapperBase" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TQualifierWrapperBase"** }
%"class.sh::TStorageQualifierWrapper" = type <{ %"class.sh::TQualifierWrapperBase", i32, [4 x i8] }>
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"class.sh::TInfoSinkBase" = type opaque
%"class.sh::TInvariantQualifierWrapper" = type { %"class.sh::TQualifierWrapperBase" }
%"class.sh::TPreciseQualifierWrapper" = type { %"class.sh::TQualifierWrapperBase" }
%"class.sh::TInterpolationQualifierWrapper" = type <{ %"class.sh::TQualifierWrapperBase", i32, [4 x i8] }>
%"class.sh::TLayoutQualifierWrapper" = type <{ %"class.sh::TQualifierWrapperBase", %"struct.sh::TLayoutQualifier", [4 x i8] }>
%"class.sh::TMemoryQualifierWrapper" = type <{ %"class.sh::TQualifierWrapperBase", i32, [4 x i8] }>
%"class.sh::TPrecisionQualifierWrapper" = type <{ %"class.sh::TQualifierWrapperBase", i32, [4 x i8] }>
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.1", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.3" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::ImmutableStringBuilder" = type { i64, i64, i8* }
%"struct.sh::(anonymous namespace)::QualifierComparator" = type { i8 }

$_ZN2sh26TInvariantQualifierWrapperD0Ev = comdat any

$_ZNK2sh26TInvariantQualifierWrapper7getTypeEv = comdat any

$_ZNK2sh26TInvariantQualifierWrapper18getQualifierStringEv = comdat any

$_ZN2sh24TPreciseQualifierWrapperD0Ev = comdat any

$_ZNK2sh24TPreciseQualifierWrapper7getTypeEv = comdat any

$_ZNK2sh24TPreciseQualifierWrapper18getQualifierStringEv = comdat any

$_ZN2sh30TInterpolationQualifierWrapperD0Ev = comdat any

$_ZNK2sh30TInterpolationQualifierWrapper7getTypeEv = comdat any

$_ZNK2sh30TInterpolationQualifierWrapper18getQualifierStringEv = comdat any

$_ZN2sh23TLayoutQualifierWrapperD0Ev = comdat any

$_ZNK2sh23TLayoutQualifierWrapper7getTypeEv = comdat any

$_ZNK2sh23TLayoutQualifierWrapper18getQualifierStringEv = comdat any

$_ZN2sh21TQualifierWrapperBaseD2Ev = comdat any

$_ZN2sh24TStorageQualifierWrapperD0Ev = comdat any

$_ZNK2sh24TStorageQualifierWrapper7getTypeEv = comdat any

$_ZNK2sh24TStorageQualifierWrapper18getQualifierStringEv = comdat any

$_ZN2sh26TPrecisionQualifierWrapperD0Ev = comdat any

$_ZNK2sh26TPrecisionQualifierWrapper7getTypeEv = comdat any

$_ZNK2sh26TPrecisionQualifierWrapper18getQualifierStringEv = comdat any

$_ZN2sh23TMemoryQualifierWrapperD0Ev = comdat any

$_ZNK2sh23TMemoryQualifierWrapper7getTypeEv = comdat any

$_ZNK2sh23TMemoryQualifierWrapper18getQualifierStringEv = comdat any

$_ZN2sh18getQualifierStringENS_10TQualifierE = comdat any

@.str = private unnamed_addr constant [58 x i8] c"Cannot have multiple different work group size specifiers\00", align 1
@.str.1 = private unnamed_addr constant [52 x i8] c"Cannot have multiple different primitive specifiers\00", align 1
@.str.2 = private unnamed_addr constant [54 x i8] c"Cannot have multiple different invocations specifiers\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"invocations\00", align 1
@.str.4 = private unnamed_addr constant [55 x i8] c"Cannot have multiple different max_vertices specifiers\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"max_vertices\00", align 1
@.str.6 = private unnamed_addr constant [51 x i8] c"Cannot have multiple different vertices specifiers\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"vertices\00", align 1
@.str.8 = private unnamed_addr constant [38 x i8] c"Cannot have multiple index specifiers\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"index\00", align 1
@.str.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"qualifier sequence\00", align 1
@_ZTVN2sh26TInvariantQualifierWrapperE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TQualifierWrapperBase"*)* @_ZN2sh21TQualifierWrapperBaseD2Ev to i8*), i8* bitcast (void (%"class.sh::TInvariantQualifierWrapper"*)* @_ZN2sh26TInvariantQualifierWrapperD0Ev to i8*), i8* bitcast (i32 (%"class.sh::TInvariantQualifierWrapper"*)* @_ZNK2sh26TInvariantQualifierWrapper7getTypeEv to i8*), i8* bitcast ({ i8*, i64 } (%"class.sh::TInvariantQualifierWrapper"*)* @_ZNK2sh26TInvariantQualifierWrapper18getQualifierStringEv to i8*), i8* bitcast (i32 (%"class.sh::TInvariantQualifierWrapper"*)* @_ZNK2sh26TInvariantQualifierWrapper7getRankEv to i8*)] }, align 8
@_ZTVN2sh24TPreciseQualifierWrapperE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TQualifierWrapperBase"*)* @_ZN2sh21TQualifierWrapperBaseD2Ev to i8*), i8* bitcast (void (%"class.sh::TPreciseQualifierWrapper"*)* @_ZN2sh24TPreciseQualifierWrapperD0Ev to i8*), i8* bitcast (i32 (%"class.sh::TPreciseQualifierWrapper"*)* @_ZNK2sh24TPreciseQualifierWrapper7getTypeEv to i8*), i8* bitcast ({ i8*, i64 } (%"class.sh::TPreciseQualifierWrapper"*)* @_ZNK2sh24TPreciseQualifierWrapper18getQualifierStringEv to i8*), i8* bitcast (i32 (%"class.sh::TPreciseQualifierWrapper"*)* @_ZNK2sh24TPreciseQualifierWrapper7getRankEv to i8*)] }, align 8
@_ZTVN2sh30TInterpolationQualifierWrapperE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TQualifierWrapperBase"*)* @_ZN2sh21TQualifierWrapperBaseD2Ev to i8*), i8* bitcast (void (%"class.sh::TInterpolationQualifierWrapper"*)* @_ZN2sh30TInterpolationQualifierWrapperD0Ev to i8*), i8* bitcast (i32 (%"class.sh::TInterpolationQualifierWrapper"*)* @_ZNK2sh30TInterpolationQualifierWrapper7getTypeEv to i8*), i8* bitcast ({ i8*, i64 } (%"class.sh::TInterpolationQualifierWrapper"*)* @_ZNK2sh30TInterpolationQualifierWrapper18getQualifierStringEv to i8*), i8* bitcast (i32 (%"class.sh::TInterpolationQualifierWrapper"*)* @_ZNK2sh30TInterpolationQualifierWrapper7getRankEv to i8*)] }, align 8
@_ZTVN2sh23TLayoutQualifierWrapperE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TQualifierWrapperBase"*)* @_ZN2sh21TQualifierWrapperBaseD2Ev to i8*), i8* bitcast (void (%"class.sh::TLayoutQualifierWrapper"*)* @_ZN2sh23TLayoutQualifierWrapperD0Ev to i8*), i8* bitcast (i32 (%"class.sh::TLayoutQualifierWrapper"*)* @_ZNK2sh23TLayoutQualifierWrapper7getTypeEv to i8*), i8* bitcast ({ i8*, i64 } (%"class.sh::TLayoutQualifierWrapper"*)* @_ZNK2sh23TLayoutQualifierWrapper18getQualifierStringEv to i8*), i8* bitcast (i32 (%"class.sh::TLayoutQualifierWrapper"*)* @_ZNK2sh23TLayoutQualifierWrapper7getRankEv to i8*)] }, align 8
@_ZTVN2sh24TStorageQualifierWrapperE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TQualifierWrapperBase"*)* @_ZN2sh21TQualifierWrapperBaseD2Ev to i8*), i8* bitcast (void (%"class.sh::TStorageQualifierWrapper"*)* @_ZN2sh24TStorageQualifierWrapperD0Ev to i8*), i8* bitcast (i32 (%"class.sh::TStorageQualifierWrapper"*)* @_ZNK2sh24TStorageQualifierWrapper7getTypeEv to i8*), i8* bitcast ({ i8*, i64 } (%"class.sh::TStorageQualifierWrapper"*)* @_ZNK2sh24TStorageQualifierWrapper18getQualifierStringEv to i8*), i8* bitcast (i32 (%"class.sh::TStorageQualifierWrapper"*)* @_ZNK2sh24TStorageQualifierWrapper7getRankEv to i8*)] }, align 8
@_ZTVN2sh26TPrecisionQualifierWrapperE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TQualifierWrapperBase"*)* @_ZN2sh21TQualifierWrapperBaseD2Ev to i8*), i8* bitcast (void (%"class.sh::TPrecisionQualifierWrapper"*)* @_ZN2sh26TPrecisionQualifierWrapperD0Ev to i8*), i8* bitcast (i32 (%"class.sh::TPrecisionQualifierWrapper"*)* @_ZNK2sh26TPrecisionQualifierWrapper7getTypeEv to i8*), i8* bitcast ({ i8*, i64 } (%"class.sh::TPrecisionQualifierWrapper"*)* @_ZNK2sh26TPrecisionQualifierWrapper18getQualifierStringEv to i8*), i8* bitcast (i32 (%"class.sh::TPrecisionQualifierWrapper"*)* @_ZNK2sh26TPrecisionQualifierWrapper7getRankEv to i8*)] }, align 8
@_ZTVN2sh23TMemoryQualifierWrapperE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TQualifierWrapperBase"*)* @_ZN2sh21TQualifierWrapperBaseD2Ev to i8*), i8* bitcast (void (%"class.sh::TMemoryQualifierWrapper"*)* @_ZN2sh23TMemoryQualifierWrapperD0Ev to i8*), i8* bitcast (i32 (%"class.sh::TMemoryQualifierWrapper"*)* @_ZNK2sh23TMemoryQualifierWrapper7getTypeEv to i8*), i8* bitcast ({ i8*, i64 } (%"class.sh::TMemoryQualifierWrapper"*)* @_ZNK2sh23TMemoryQualifierWrapper18getQualifierStringEv to i8*), i8* bitcast (i32 (%"class.sh::TMemoryQualifierWrapper"*)* @_ZNK2sh23TMemoryQualifierWrapper7getRankEv to i8*)] }, align 8
@.str.12 = private unnamed_addr constant [13 x i8] c"local_size_x\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"local_size_y\00", align 1
@.str.14 = private unnamed_addr constant [13 x i8] c"local_size_z\00", align 1
@.str.15 = private unnamed_addr constant [24 x i8] c"dimension out of bounds\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"points\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"lines\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"triangles\00", align 1
@.str.19 = private unnamed_addr constant [16 x i8] c"lines_adjacency\00", align 1
@.str.20 = private unnamed_addr constant [20 x i8] c"triangles_adjacency\00", align 1
@.str.21 = private unnamed_addr constant [11 x i8] c"line_strip\00", align 1
@.str.22 = private unnamed_addr constant [15 x i8] c"triangle_strip\00", align 1
@.str.23 = private unnamed_addr constant [39 x i8] c"unknown geometry shader primitive type\00", align 1
@.str.24 = private unnamed_addr constant [50 x i8] c"The invariant qualifier specified multiple times.\00", align 1
@.str.25 = private unnamed_addr constant [48 x i8] c"The precise qualifier specified multiple times.\00", align 1
@.str.26 = private unnamed_addr constant [50 x i8] c"The precision qualifier specified multiple times.\00", align 1
@.str.27 = private unnamed_addr constant [47 x i8] c"The layout qualifier specified multiple times.\00", align 1
@.str.28 = private unnamed_addr constant [110 x i8] c"The layout qualifier and invariant qualifier cannot coexist in the same declaration according to the grammar.\00", align 1
@.str.29 = private unnamed_addr constant [54 x i8] c"The interpolation qualifier specified multiple times.\00", align 1
@_ZN2sh12_GLOBAL__N_123kSpecifiedMultipleTimesE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.30, i32 0, i32 0), i64 25 }, align 8
@.str.30 = private unnamed_addr constant [26 x i8] c" specified multiple times\00", align 1
@.str.31 = private unnamed_addr constant [49 x i8] c"Output layout location specified multiple times.\00", align 1
@.str.32 = private unnamed_addr constant [59 x i8] c"The invariant qualifier has to be first in the expression.\00", align 1
@.str.33 = private unnamed_addr constant [62 x i8] c"Storage qualifiers have to be after interpolation qualifiers.\00", align 1
@.str.34 = private unnamed_addr constant [64 x i8] c"Precision qualifiers have to be after interpolation qualifiers.\00", align 1
@.str.35 = private unnamed_addr constant [55 x i8] c"Storage qualifiers have to be after layout qualifiers.\00", align 1
@.str.36 = private unnamed_addr constant [57 x i8] c"Precision qualifiers have to be after layout qualifiers.\00", align 1
@.str.37 = private unnamed_addr constant [58 x i8] c"Precision qualifiers have to be after storage qualifiers.\00", align 1
@.str.38 = private unnamed_addr constant [57 x i8] c"Precision qualifiers have to be after memory qualifiers.\00", align 1
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1
@.str.39 = private unnamed_addr constant [28 x i8] c"invalid parameter qualifier\00", align 1
@.str.40 = private unnamed_addr constant [29 x i8] c"Invalid parameter qualifier \00", align 1
@.str.41 = private unnamed_addr constant [10 x i8] c"Temporary\00", align 1
@.str.42 = private unnamed_addr constant [7 x i8] c"Global\00", align 1
@.str.43 = private unnamed_addr constant [6 x i8] c"const\00", align 1
@.str.44 = private unnamed_addr constant [10 x i8] c"attribute\00", align 1
@.str.45 = private unnamed_addr constant [8 x i8] c"varying\00", align 1
@.str.46 = private unnamed_addr constant [8 x i8] c"uniform\00", align 1
@.str.47 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@.str.48 = private unnamed_addr constant [6 x i8] c"patch\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"in\00", align 1
@.str.50 = private unnamed_addr constant [4 x i8] c"out\00", align 1
@.str.51 = private unnamed_addr constant [6 x i8] c"inout\00", align 1
@.str.52 = private unnamed_addr constant [11 x i8] c"InstanceID\00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"VertexID\00", align 1
@.str.54 = private unnamed_addr constant [9 x i8] c"Position\00", align 1
@.str.55 = private unnamed_addr constant [10 x i8] c"PointSize\00", align 1
@.str.56 = private unnamed_addr constant [7 x i8] c"DrawID\00", align 1
@.str.57 = private unnamed_addr constant [10 x i8] c"FragCoord\00", align 1
@.str.58 = private unnamed_addr constant [12 x i8] c"FrontFacing\00", align 1
@.str.59 = private unnamed_addr constant [17 x i8] c"HelperInvocation\00", align 1
@.str.60 = private unnamed_addr constant [11 x i8] c"PointCoord\00", align 1
@.str.61 = private unnamed_addr constant [10 x i8] c"FragColor\00", align 1
@.str.62 = private unnamed_addr constant [9 x i8] c"FragData\00", align 1
@.str.63 = private unnamed_addr constant [10 x i8] c"FragDepth\00", align 1
@.str.64 = private unnamed_addr constant [22 x i8] c"SecondaryFragColorEXT\00", align 1
@.str.65 = private unnamed_addr constant [21 x i8] c"SecondaryFragDataEXT\00", align 1
@.str.66 = private unnamed_addr constant [10 x i8] c"ViewIDOVR\00", align 1
@.str.67 = private unnamed_addr constant [14 x i8] c"ViewportIndex\00", align 1
@.str.68 = private unnamed_addr constant [6 x i8] c"Layer\00", align 1
@.str.69 = private unnamed_addr constant [14 x i8] c"LastFragColor\00", align 1
@.str.70 = private unnamed_addr constant [13 x i8] c"LastFragData\00", align 1
@.str.71 = private unnamed_addr constant [11 x i8] c"smooth out\00", align 1
@.str.72 = private unnamed_addr constant [20 x i8] c"smooth centroid out\00", align 1
@.str.73 = private unnamed_addr constant [9 x i8] c"flat out\00", align 1
@.str.74 = private unnamed_addr constant [18 x i8] c"noperspective out\00", align 1
@.str.75 = private unnamed_addr constant [10 x i8] c"smooth in\00", align 1
@.str.76 = private unnamed_addr constant [8 x i8] c"flat in\00", align 1
@.str.77 = private unnamed_addr constant [17 x i8] c"noperspective in\00", align 1
@.str.78 = private unnamed_addr constant [19 x i8] c"smooth centroid in\00", align 1
@.str.79 = private unnamed_addr constant [9 x i8] c"centroid\00", align 1
@.str.80 = private unnamed_addr constant [5 x i8] c"flat\00", align 1
@.str.81 = private unnamed_addr constant [14 x i8] c"noperspective\00", align 1
@.str.82 = private unnamed_addr constant [7 x i8] c"smooth\00", align 1
@.str.83 = private unnamed_addr constant [7 x i8] c"shared\00", align 1
@.str.84 = private unnamed_addr constant [14 x i8] c"NumWorkGroups\00", align 1
@.str.85 = private unnamed_addr constant [14 x i8] c"WorkGroupSize\00", align 1
@.str.86 = private unnamed_addr constant [12 x i8] c"WorkGroupID\00", align 1
@.str.87 = private unnamed_addr constant [18 x i8] c"LocalInvocationID\00", align 1
@.str.88 = private unnamed_addr constant [19 x i8] c"GlobalInvocationID\00", align 1
@.str.89 = private unnamed_addr constant [21 x i8] c"LocalInvocationIndex\00", align 1
@.str.90 = private unnamed_addr constant [9 x i8] c"readonly\00", align 1
@.str.91 = private unnamed_addr constant [10 x i8] c"writeonly\00", align 1
@.str.92 = private unnamed_addr constant [6 x i8] c"gl_in\00", align 1
@.str.93 = private unnamed_addr constant [17 x i8] c"gl_PrimitiveIDIn\00", align 1
@.str.94 = private unnamed_addr constant [16 x i8] c"gl_InvocationID\00", align 1
@.str.95 = private unnamed_addr constant [15 x i8] c"gl_PrimitiveID\00", align 1
@.str.96 = private unnamed_addr constant [8 x i8] c"precise\00", align 1
@.str.97 = private unnamed_addr constant [13 x i8] c"ClipDistance\00", align 1
@.str.98 = private unnamed_addr constant [7 x i8] c"sample\00", align 1
@.str.99 = private unnamed_addr constant [10 x i8] c"sample in\00", align 1
@.str.100 = private unnamed_addr constant [11 x i8] c"sample out\00", align 1
@.str.101 = private unnamed_addr constant [9 x i8] c"SampleID\00", align 1
@.str.102 = private unnamed_addr constant [15 x i8] c"SamplePosition\00", align 1
@.str.103 = private unnamed_addr constant [13 x i8] c"SampleMaskIn\00", align 1
@.str.104 = private unnamed_addr constant [11 x i8] c"SampleMask\00", align 1
@.str.105 = private unnamed_addr constant [11 x i8] c"NumSamples\00", align 1
@.str.106 = private unnamed_addr constant [9 x i8] c"patch in\00", align 1
@.str.107 = private unnamed_addr constant [10 x i8] c"patch out\00", align 1
@.str.108 = private unnamed_addr constant [7 x i8] c"gl_out\00", align 1
@.str.109 = private unnamed_addr constant [16 x i8] c"PatchVerticesIn\00", align 1
@.str.110 = private unnamed_addr constant [15 x i8] c"TessLevelOuter\00", align 1
@.str.111 = private unnamed_addr constant [15 x i8] c"TessLevelInner\00", align 1
@.str.112 = private unnamed_addr constant [10 x i8] c"TessCoord\00", align 1
@.str.113 = private unnamed_addr constant [18 x i8] c"unknown qualifier\00", align 1
@.str.114 = private unnamed_addr constant [30 x i8] c"invalid qualifier combination\00", align 1
@.str.115 = private unnamed_addr constant [10 x i8] c"invariant\00", align 1
@.str.116 = private unnamed_addr constant [7 x i8] c"layout\00", align 1
@.str.117 = private unnamed_addr constant [6 x i8] c"highp\00", align 1
@.str.118 = private unnamed_addr constant [8 x i8] c"mediump\00", align 1
@.str.119 = private unnamed_addr constant [5 x i8] c"lowp\00", align 1
@switch.table._ZN2sh20JoinLayoutQualifiersENS_16TLayoutQualifierES0_RKNS_10TSourceLocEPNS_12TDiagnosticsE = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i64 0, i64 0)], align 8
@switch.table._ZN2sh20JoinLayoutQualifiersENS_16TLayoutQualifierES0_RKNS_10TSourceLocEPNS_12TDiagnosticsE.120 = private unnamed_addr constant [7 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0)], align 8
@switch.table._ZNK2sh26TPrecisionQualifierWrapper18getQualifierStringEv = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.119, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.118, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.117, i64 0, i64 0)], align 8
@switch.table._ZN2sh18getQualifierStringENS_10TQualifierE = private unnamed_addr constant [91 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.52, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.55, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.56, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.57, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.58, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.60, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.59, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.61, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.64, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.66, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.97, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.113, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.69, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.81, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.79, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.98, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.71, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.73, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.74, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.72, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.100, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.75, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.76, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.77, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.78, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.99, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.101, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.102, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.103, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.104, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.105, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.83, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.84, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.85, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.86, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.87, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.88, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.89, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.90, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.91, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.113, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.113, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.113, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.92, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.93, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.94, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.95, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.96, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.106, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.107, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.108, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.109, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.110, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.111, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.112, i64 0, i64 0)], align 8

@_ZN2sh14TTypeQualifierC1ENS_10TQualifierERKNS_10TSourceLocE = hidden unnamed_addr alias void (%"struct.sh::TTypeQualifier"*, i32, %"struct.sh::TSourceLoc"*), void (%"struct.sh::TTypeQualifier"*, i32, %"struct.sh::TSourceLoc"*)* @_ZN2sh14TTypeQualifierC2ENS_10TQualifierERKNS_10TSourceLocE
@_ZN2sh21TTypeQualifierBuilderC1EPKNS_24TStorageQualifierWrapperEi = hidden unnamed_addr alias void (%"class.sh::TTypeQualifierBuilder"*, %"class.sh::TStorageQualifierWrapper"*, i32), void (%"class.sh::TTypeQualifierBuilder"*, %"class.sh::TStorageQualifierWrapper"*, i32)* @_ZN2sh21TTypeQualifierBuilderC2EPKNS_24TStorageQualifierWrapperEi

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh20JoinLayoutQualifiersENS_16TLayoutQualifierES0_RKNS_10TSourceLocEPNS_12TDiagnosticsE(%"struct.sh::TLayoutQualifier"* noalias sret, %"struct.sh::TLayoutQualifier"* nocapture readonly byval(%"struct.sh::TLayoutQualifier") align 8, %"struct.sh::TLayoutQualifier"* byval(%"struct.sh::TLayoutQualifier") align 8, %"struct.sh::TSourceLoc"* dereferenceable(16), %"class.sh::TDiagnostics"*) local_unnamed_addr #0 {
  %6 = bitcast %"struct.sh::TLayoutQualifier"* %0 to i8*
  %7 = bitcast %"struct.sh::TLayoutQualifier"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* nonnull align 8 %7, i64 92, i1 false)
  %8 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, -1
  br i1 %10, label %16, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 0
  store i32 %9, i32* %12, align 4
  %13 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = add i32 %14, 1
  store i32 %15, i32* %13, align 4
  br label %16

16:                                               ; preds = %5, %11
  %17 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 9
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 9
  store i8 1, i8* %21, align 4
  br label %22

22:                                               ; preds = %16, %20
  %23 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 10
  %24 = load i8, i8* %23, align 1, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 10
  store i8 1, i8* %27, align 1
  br label %28

28:                                               ; preds = %22, %26
  %29 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 5
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %34, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 5
  store i32 %30, i32* %33, align 4
  br label %34

34:                                               ; preds = %28, %32
  %35 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 6
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %40, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 6
  store i32 %36, i32* %39, align 4
  br label %40

40:                                               ; preds = %34, %38
  %41 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 2
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 2
  store i32 %42, i32* %45, align 4
  br label %46

46:                                               ; preds = %40, %44
  %47 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 3
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 3
  store i32 %48, i32* %51, align 4
  br label %52

52:                                               ; preds = %46, %50
  %53 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 22
  %54 = load i8, i8* %53, align 8, !range !2
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %58, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 22
  store i8 1, i8* %57, align 4
  br label %58

58:                                               ; preds = %52, %56
  %59 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 4
  %60 = call i64 @_ZNK2sh13WorkGroupSize4sizeEv(%"struct.sh::WorkGroupSize"* %59) #9
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %64, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 4
  br label %68

64:                                               ; preds = %94, %58
  %65 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 8
  %66 = load i32, i32* %65, align 8
  %67 = icmp eq i32 %66, -1
  br i1 %67, label %100, label %98

68:                                               ; preds = %62, %94
  %69 = phi i64 [ 0, %62 ], [ %95, %94 ]
  %70 = call dereferenceable(4) i32* @_ZN2sh13WorkGroupSizeixEm(%"struct.sh::WorkGroupSize"* %59, i64 %69) #9
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, -1
  br i1 %72, label %94, label %73

73:                                               ; preds = %68
  %74 = call dereferenceable(4) i32* @_ZN2sh13WorkGroupSizeixEm(%"struct.sh::WorkGroupSize"* %63, i64 %69) #9
  %75 = load i32, i32* %74, align 4
  %76 = icmp eq i32 %75, -1
  br i1 %76, label %90, label %77

77:                                               ; preds = %73
  %78 = call dereferenceable(4) i32* @_ZN2sh13WorkGroupSizeixEm(%"struct.sh::WorkGroupSize"* %63, i64 %69) #9
  %79 = load i32, i32* %78, align 4
  %80 = call dereferenceable(4) i32* @_ZN2sh13WorkGroupSizeixEm(%"struct.sh::WorkGroupSize"* %59, i64 %69) #9
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %79, %81
  br i1 %82, label %90, label %83

83:                                               ; preds = %77
  %84 = icmp ult i64 %69, 3
  br i1 %84, label %85, label %88

85:                                               ; preds = %83
  %86 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table._ZN2sh20JoinLayoutQualifiersENS_16TLayoutQualifierES0_RKNS_10TSourceLocEPNS_12TDiagnosticsE, i64 0, i64 %69
  %87 = load i8*, i8** %86, align 8
  br label %88

88:                                               ; preds = %83, %85
  %89 = phi i8* [ %87, %85 ], [ getelementptr inbounds ([24 x i8], [24 x i8]* @.str.15, i64 0, i64 0), %83 ]
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %4, %"struct.sh::TSourceLoc"* dereferenceable(16) %3, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0), i8* nonnull %89) #9
  br label %90

90:                                               ; preds = %77, %73, %88
  %91 = call dereferenceable(4) i32* @_ZN2sh13WorkGroupSizeixEm(%"struct.sh::WorkGroupSize"* %59, i64 %69) #9
  %92 = load i32, i32* %91, align 4
  %93 = call dereferenceable(4) i32* @_ZN2sh13WorkGroupSizeixEm(%"struct.sh::WorkGroupSize"* %63, i64 %69) #9
  store i32 %92, i32* %93, align 4
  br label %94

94:                                               ; preds = %68, %90
  %95 = add nuw i64 %69, 1
  %96 = call i64 @_ZNK2sh13WorkGroupSize4sizeEv(%"struct.sh::WorkGroupSize"* %59) #9
  %97 = icmp ult i64 %95, %96
  br i1 %97, label %68, label %64

98:                                               ; preds = %64
  %99 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 8
  store i32 %66, i32* %99, align 4
  br label %100

100:                                              ; preds = %64, %98
  %101 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 7
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %106, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 7
  store i32 %102, i32* %105, align 4
  br label %106

106:                                              ; preds = %100, %104
  %107 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 12
  %108 = load i32, i32* %107, align 8
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %128, label %110

110:                                              ; preds = %106
  %111 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 12
  %112 = load i32, i32* %111, align 4
  %113 = icmp eq i32 %112, 0
  %114 = icmp eq i32 %112, %108
  %115 = or i1 %113, %114
  br i1 %115, label %126, label %116

116:                                              ; preds = %110
  %117 = add i32 %108, -1
  %118 = icmp ult i32 %117, 7
  br i1 %118, label %119, label %123

119:                                              ; preds = %116
  %120 = sext i32 %117 to i64
  %121 = getelementptr inbounds [7 x i8*], [7 x i8*]* @switch.table._ZN2sh20JoinLayoutQualifiersENS_16TLayoutQualifierES0_RKNS_10TSourceLocEPNS_12TDiagnosticsE.120, i64 0, i64 %120
  %122 = load i8*, i8** %121, align 8
  br label %123

123:                                              ; preds = %116, %119
  %124 = phi i8* [ %122, %119 ], [ getelementptr inbounds ([39 x i8], [39 x i8]* @.str.23, i64 0, i64 0), %116 ]
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %4, %"struct.sh::TSourceLoc"* dereferenceable(16) %3, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0), i8* nonnull %124) #9
  %125 = load i32, i32* %107, align 8
  br label %126

126:                                              ; preds = %110, %123
  %127 = phi i32 [ %108, %110 ], [ %125, %123 ]
  store i32 %127, i32* %111, align 4
  br label %128

128:                                              ; preds = %106, %126
  %129 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 13
  %130 = load i32, i32* %129, align 4
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %142, label %132

132:                                              ; preds = %128
  %133 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 13
  %134 = load i32, i32* %133, align 4
  %135 = icmp eq i32 %134, 0
  %136 = icmp eq i32 %134, %130
  %137 = or i1 %135, %136
  br i1 %137, label %140, label %138

138:                                              ; preds = %132
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %4, %"struct.sh::TSourceLoc"* dereferenceable(16) %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0)) #9
  %139 = load i32, i32* %129, align 4
  br label %140

140:                                              ; preds = %132, %138
  %141 = phi i32 [ %130, %132 ], [ %139, %138 ]
  store i32 %141, i32* %133, align 4
  br label %142

142:                                              ; preds = %128, %140
  %143 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 14
  %144 = load i32, i32* %143, align 8
  %145 = icmp eq i32 %144, -1
  br i1 %145, label %156, label %146

146:                                              ; preds = %142
  %147 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 14
  %148 = load i32, i32* %147, align 4
  %149 = icmp eq i32 %148, -1
  %150 = icmp eq i32 %148, %144
  %151 = or i1 %149, %150
  br i1 %151, label %154, label %152

152:                                              ; preds = %146
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %4, %"struct.sh::TSourceLoc"* dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)) #9
  %153 = load i32, i32* %143, align 8
  br label %154

154:                                              ; preds = %146, %152
  %155 = phi i32 [ %144, %146 ], [ %153, %152 ]
  store i32 %155, i32* %147, align 4
  br label %156

156:                                              ; preds = %142, %154
  %157 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 16
  %158 = load i32, i32* %157, align 8
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %165, label %160

160:                                              ; preds = %156
  %161 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 16
  %162 = load i32, i32* %161, align 4
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %160
  store i32 %158, i32* %161, align 4
  br label %165

165:                                              ; preds = %156, %160, %164
  %166 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 17
  %167 = load i32, i32* %166, align 4
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %174, label %169

169:                                              ; preds = %165
  %170 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 17
  %171 = load i32, i32* %170, align 4
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %174

173:                                              ; preds = %169
  store i32 %167, i32* %170, align 4
  br label %174

174:                                              ; preds = %165, %169, %173
  %175 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 18
  %176 = load i32, i32* %175, align 8
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %183, label %178

178:                                              ; preds = %174
  %179 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 18
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %183

182:                                              ; preds = %178
  store i32 %176, i32* %179, align 4
  br label %183

183:                                              ; preds = %174, %178, %182
  %184 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 19
  %185 = load i32, i32* %184, align 4
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %192, label %187

187:                                              ; preds = %183
  %188 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 19
  %189 = load i32, i32* %188, align 4
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %192

191:                                              ; preds = %187
  store i32 %185, i32* %188, align 4
  br label %192

192:                                              ; preds = %183, %187, %191
  %193 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 15
  %194 = load i32, i32* %193, align 4
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %206, label %196

196:                                              ; preds = %192
  %197 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 15
  %198 = load i32, i32* %197, align 4
  %199 = icmp eq i32 %198, 0
  %200 = icmp eq i32 %198, %194
  %201 = or i1 %199, %200
  br i1 %201, label %204, label %202

202:                                              ; preds = %196
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %4, %"struct.sh::TSourceLoc"* dereferenceable(16) %3, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0)) #9
  %203 = load i32, i32* %193, align 4
  br label %204

204:                                              ; preds = %196, %202
  %205 = phi i32 [ %194, %196 ], [ %203, %202 ]
  store i32 %205, i32* %197, align 4
  br label %206

206:                                              ; preds = %192, %204
  %207 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %2, i64 0, i32 20
  %208 = load i32, i32* %207, align 8
  %209 = icmp eq i32 %208, -1
  br i1 %209, label %218, label %210

210:                                              ; preds = %206
  %211 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %0, i64 0, i32 20
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, -1
  br i1 %213, label %216, label %214

214:                                              ; preds = %210
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %4, %"struct.sh::TSourceLoc"* dereferenceable(16) %3, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0)) #9
  %215 = load i32, i32* %207, align 8
  br label %216

216:                                              ; preds = %210, %214
  %217 = phi i32 [ %208, %210 ], [ %215, %214 ]
  store i32 %217, i32* %211, align 4
  br label %218

218:                                              ; preds = %206, %216
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZNK2sh13WorkGroupSize4sizeEv(%"struct.sh::WorkGroupSize"*) local_unnamed_addr #2

declare dereferenceable(4) i32* @_ZN2sh13WorkGroupSizeixEm(%"struct.sh::WorkGroupSize"*, i64) local_unnamed_addr #2

declare void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16), i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK2sh26TInvariantQualifierWrapper7getRankEv(%"class.sh::TInvariantQualifierWrapper"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK2sh24TPreciseQualifierWrapper7getRankEv(%"class.sh::TPreciseQualifierWrapper"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i32 1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK2sh30TInterpolationQualifierWrapper7getRankEv(%"class.sh::TInterpolationQualifierWrapper"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i32 2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK2sh23TLayoutQualifierWrapper7getRankEv(%"class.sh::TLayoutQualifierWrapper"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i32 3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2sh24TStorageQualifierWrapper7getRankEv(%"class.sh::TStorageQualifierWrapper"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TStorageQualifierWrapper", %"class.sh::TStorageQualifierWrapper"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 42
  %5 = select i1 %4, i32 4, i32 5
  ret i32 %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK2sh23TMemoryQualifierWrapper7getRankEv(%"class.sh::TMemoryQualifierWrapper"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i32 5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK2sh26TPrecisionQualifierWrapper7getRankEv(%"class.sh::TPrecisionQualifierWrapper"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i32 6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh14TTypeQualifierC2ENS_10TQualifierERKNS_10TSourceLocE(%"struct.sh::TTypeQualifier"* nocapture, i32, %"struct.sh::TSourceLoc"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %4 = bitcast %"struct.sh::TTypeQualifier"* %0 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %4, align 4, !alias.scope !3
  %5 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 4, i32 0, i64 0
  %6 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 7
  %7 = bitcast i32* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 -1, i64 20, i1 false) #9, !alias.scope !3
  store i32 0, i32* %6, align 4, !alias.scope !3
  %8 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 8
  store i32 -1, i32* %8, align 4, !alias.scope !3
  %9 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 9
  store i8 0, i8* %9, align 4, !alias.scope !3
  %10 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 10
  store i8 0, i8* %10, align 1, !alias.scope !3
  %11 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 12
  store i32 0, i32* %11, align 4, !alias.scope !3
  %12 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 13
  store i32 0, i32* %12, align 4, !alias.scope !3
  %13 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 14
  store i32 -1, i32* %13, align 4, !alias.scope !3
  %14 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 15
  %15 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 20
  %16 = bitcast i32* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %16, i8 0, i64 20, i1 false) #9, !alias.scope !3
  store i32 -1, i32* %15, align 4, !alias.scope !3
  %17 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 21
  store i32 -1, i32* %17, align 4, !alias.scope !3
  %18 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 22
  store i8 0, i8* %18, align 4, !alias.scope !3
  %19 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 1
  %20 = bitcast %"struct.sh::TMemoryQualifier"* %19 to i40*
  store i40 0, i40* %20, align 4
  %21 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 2
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 3
  store i32 %1, i32* %22, align 4
  %23 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 4
  store i8 0, i8* %23, align 4
  %24 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 6
  %26 = bitcast %"struct.sh::TSourceLoc"* %25 to i8*
  %27 = bitcast %"struct.sh::TSourceLoc"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %26, i8* align 4 %27, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh21TTypeQualifierBuilderC2EPKNS_24TStorageQualifierWrapperEi(%"class.sh::TTypeQualifierBuilder"*, %"class.sh::TStorageQualifierWrapper"*, i32) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.sh::TTypeQualifierBuilder"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #9
  %5 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %0, i64 0, i32 1
  store i32 %2, i32* %5, align 8
  %6 = ptrtoint %"class.sh::TStorageQualifierWrapper"* %1 to i64
  %7 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"class.sh::TQualifierWrapperBase"*** %7 to i64*
  %10 = bitcast %"class.sh::TTypeQualifierBuilder"* %0 to i64*
  %11 = bitcast %"class.sh::TQualifierWrapperBase"*** %8 to i64*
  %12 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %13 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %12, i64 8) #9
  %14 = bitcast i8* %13 to %"class.sh::TQualifierWrapperBase"**
  %15 = getelementptr inbounds i8, i8* %13, i64 8
  %16 = ptrtoint i8* %15 to i64
  %17 = bitcast i8* %13 to i64*
  store i64 %6, i64* %17, align 8
  %18 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %18, align 8
  %20 = ptrtoint %"class.sh::TQualifierWrapperBase"** %19 to i64
  %21 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %7, align 8
  %22 = bitcast %"class.sh::TQualifierWrapperBase"** %21 to i8*
  %23 = icmp eq %"class.sh::TQualifierWrapperBase"** %21, %19
  br i1 %23, label %197, label %24

24:                                               ; preds = %3
  %25 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %21, i64 -1
  %26 = ptrtoint %"class.sh::TQualifierWrapperBase"** %25 to i64
  %27 = sub i64 %26, %20
  %28 = lshr i64 %27, 3
  %29 = add nuw nsw i64 %28, 1
  %30 = icmp ult i64 %29, 4
  br i1 %30, label %127, label %31

31:                                               ; preds = %24
  %32 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %21, i64 -1
  %33 = ptrtoint %"class.sh::TQualifierWrapperBase"** %32 to i64
  %34 = sub i64 %33, %20
  %35 = lshr i64 %34, 3
  %36 = and i64 %34, -8
  %37 = xor i64 %36, -8
  %38 = getelementptr i8, i8* %13, i64 %37
  %39 = xor i64 %35, -1
  %40 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %21, i64 %39
  %41 = bitcast %"class.sh::TQualifierWrapperBase"** %40 to i8*
  %42 = icmp ult i8* %38, %22
  %43 = icmp ugt i8* %13, %41
  %44 = and i1 %42, %43
  br i1 %44, label %127, label %45

45:                                               ; preds = %31
  %46 = and i64 %29, 4611686018427387900
  %47 = sub nsw i64 0, %46
  %48 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %14, i64 %47
  %49 = sub nsw i64 0, %46
  %50 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %21, i64 %49
  %51 = add nsw i64 %46, -4
  %52 = lshr exact i64 %51, 2
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %51, 0
  br i1 %55, label %104, label %56

56:                                               ; preds = %45
  %57 = sub nuw nsw i64 %53, %54
  %58 = getelementptr i8, i8* %13, i64 -8
  %59 = bitcast i8* %58 to %"class.sh::TQualifierWrapperBase"**
  %60 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %21, i64 -1
  %61 = getelementptr i8, i8* %13, i64 -8
  %62 = bitcast i8* %61 to %"class.sh::TQualifierWrapperBase"**
  %63 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %21, i64 -1
  br label %64

64:                                               ; preds = %64, %56
  %65 = phi i64 [ 0, %56 ], [ %99, %64 ]
  %66 = phi i64 [ %57, %56 ], [ %100, %64 ]
  %67 = sub i64 0, %65
  %68 = sub i64 0, %65
  %69 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %59, i64 %67
  %70 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %60, i64 %68
  %71 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %70, i64 -1
  %72 = bitcast %"class.sh::TQualifierWrapperBase"** %71 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 8, !alias.scope !6
  %74 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %70, i64 -2
  %75 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %74, i64 -1
  %76 = bitcast %"class.sh::TQualifierWrapperBase"** %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !alias.scope !6
  %78 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %69, i64 -1
  %79 = bitcast %"class.sh::TQualifierWrapperBase"** %78 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %79, align 8, !alias.scope !9, !noalias !6
  %80 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %69, i64 -2
  %81 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %80, i64 -1
  %82 = bitcast %"class.sh::TQualifierWrapperBase"** %81 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %82, align 8, !alias.scope !9, !noalias !6
  %83 = sub nuw nsw i64 -4, %65
  %84 = sub nuw nsw i64 -4, %65
  %85 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %62, i64 %83
  %86 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %63, i64 %84
  %87 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %86, i64 -1
  %88 = bitcast %"class.sh::TQualifierWrapperBase"** %87 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 8, !alias.scope !6
  %90 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %86, i64 -2
  %91 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %90, i64 -1
  %92 = bitcast %"class.sh::TQualifierWrapperBase"** %91 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 8, !alias.scope !6
  %94 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %85, i64 -1
  %95 = bitcast %"class.sh::TQualifierWrapperBase"** %94 to <2 x i64>*
  store <2 x i64> %89, <2 x i64>* %95, align 8, !alias.scope !9, !noalias !6
  %96 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %85, i64 -2
  %97 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %96, i64 -1
  %98 = bitcast %"class.sh::TQualifierWrapperBase"** %97 to <2 x i64>*
  store <2 x i64> %93, <2 x i64>* %98, align 8, !alias.scope !9, !noalias !6
  %99 = add i64 %65, 8
  %100 = add i64 %66, -2
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %64, !llvm.loop !11

102:                                              ; preds = %64
  %103 = sub nuw nsw i64 -8, %65
  br label %104

104:                                              ; preds = %102, %45
  %105 = phi i64 [ 0, %45 ], [ %103, %102 ]
  %106 = icmp eq i64 %54, 0
  br i1 %106, label %125, label %107

107:                                              ; preds = %104
  %108 = getelementptr i8, i8* %13, i64 -8
  %109 = bitcast i8* %108 to %"class.sh::TQualifierWrapperBase"**
  %110 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %21, i64 -1
  %111 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %109, i64 %105
  %112 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %110, i64 %105
  %113 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %112, i64 -1
  %114 = bitcast %"class.sh::TQualifierWrapperBase"** %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 8, !alias.scope !6
  %116 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %112, i64 -2
  %117 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %116, i64 -1
  %118 = bitcast %"class.sh::TQualifierWrapperBase"** %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 8, !alias.scope !6
  %120 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %111, i64 -1
  %121 = bitcast %"class.sh::TQualifierWrapperBase"** %120 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %121, align 8, !alias.scope !9, !noalias !6
  %122 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %111, i64 -2
  %123 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %122, i64 -1
  %124 = bitcast %"class.sh::TQualifierWrapperBase"** %123 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %124, align 8, !alias.scope !9, !noalias !6
  br label %125

125:                                              ; preds = %104, %107
  %126 = icmp eq i64 %29, %46
  br i1 %126, label %197, label %127

127:                                              ; preds = %125, %31, %24
  %128 = phi %"class.sh::TQualifierWrapperBase"** [ %14, %31 ], [ %14, %24 ], [ %48, %125 ]
  %129 = phi %"class.sh::TQualifierWrapperBase"** [ %21, %31 ], [ %21, %24 ], [ %50, %125 ]
  %130 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %129, i64 -1
  %131 = ptrtoint %"class.sh::TQualifierWrapperBase"** %130 to i64
  %132 = sub i64 %131, %20
  %133 = lshr i64 %132, 3
  %134 = add nuw nsw i64 %133, 1
  %135 = and i64 %134, 7
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %148, label %137

137:                                              ; preds = %127, %137
  %138 = phi %"class.sh::TQualifierWrapperBase"** [ %141, %137 ], [ %128, %127 ]
  %139 = phi %"class.sh::TQualifierWrapperBase"** [ %142, %137 ], [ %129, %127 ]
  %140 = phi i64 [ %146, %137 ], [ %135, %127 ]
  %141 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %138, i64 -1
  %142 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %139, i64 -1
  %143 = bitcast %"class.sh::TQualifierWrapperBase"** %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = bitcast %"class.sh::TQualifierWrapperBase"** %141 to i64*
  store i64 %144, i64* %145, align 8
  %146 = add i64 %140, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %137, !llvm.loop !13

148:                                              ; preds = %137, %127
  %149 = phi %"class.sh::TQualifierWrapperBase"** [ undef, %127 ], [ %141, %137 ]
  %150 = phi %"class.sh::TQualifierWrapperBase"** [ %128, %127 ], [ %141, %137 ]
  %151 = phi %"class.sh::TQualifierWrapperBase"** [ %129, %127 ], [ %142, %137 ]
  %152 = icmp ult i64 %132, 56
  br i1 %152, label %197, label %153

153:                                              ; preds = %148, %153
  %154 = phi %"class.sh::TQualifierWrapperBase"** [ %191, %153 ], [ %150, %148 ]
  %155 = phi %"class.sh::TQualifierWrapperBase"** [ %192, %153 ], [ %151, %148 ]
  %156 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %154, i64 -1
  %157 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %155, i64 -1
  %158 = bitcast %"class.sh::TQualifierWrapperBase"** %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %"class.sh::TQualifierWrapperBase"** %156 to i64*
  store i64 %159, i64* %160, align 8
  %161 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %154, i64 -2
  %162 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %155, i64 -2
  %163 = bitcast %"class.sh::TQualifierWrapperBase"** %162 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = bitcast %"class.sh::TQualifierWrapperBase"** %161 to i64*
  store i64 %164, i64* %165, align 8
  %166 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %154, i64 -3
  %167 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %155, i64 -3
  %168 = bitcast %"class.sh::TQualifierWrapperBase"** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = bitcast %"class.sh::TQualifierWrapperBase"** %166 to i64*
  store i64 %169, i64* %170, align 8
  %171 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %154, i64 -4
  %172 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %155, i64 -4
  %173 = bitcast %"class.sh::TQualifierWrapperBase"** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.sh::TQualifierWrapperBase"** %171 to i64*
  store i64 %174, i64* %175, align 8
  %176 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %154, i64 -5
  %177 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %155, i64 -5
  %178 = bitcast %"class.sh::TQualifierWrapperBase"** %177 to i64*
  %179 = load i64, i64* %178, align 8
  %180 = bitcast %"class.sh::TQualifierWrapperBase"** %176 to i64*
  store i64 %179, i64* %180, align 8
  %181 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %154, i64 -6
  %182 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %155, i64 -6
  %183 = bitcast %"class.sh::TQualifierWrapperBase"** %182 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = bitcast %"class.sh::TQualifierWrapperBase"** %181 to i64*
  store i64 %184, i64* %185, align 8
  %186 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %154, i64 -7
  %187 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %155, i64 -7
  %188 = bitcast %"class.sh::TQualifierWrapperBase"** %187 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = bitcast %"class.sh::TQualifierWrapperBase"** %186 to i64*
  store i64 %189, i64* %190, align 8
  %191 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %154, i64 -8
  %192 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %155, i64 -8
  %193 = bitcast %"class.sh::TQualifierWrapperBase"** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = bitcast %"class.sh::TQualifierWrapperBase"** %191 to i64*
  store i64 %194, i64* %195, align 8
  %196 = icmp eq %"class.sh::TQualifierWrapperBase"** %192, %19
  br i1 %196, label %197, label %153, !llvm.loop !15

197:                                              ; preds = %148, %153, %125, %3
  %198 = phi %"class.sh::TQualifierWrapperBase"** [ %14, %3 ], [ %48, %125 ], [ %149, %148 ], [ %191, %153 ]
  %199 = ptrtoint %"class.sh::TQualifierWrapperBase"** %198 to i64
  store i64 %199, i64* %10, align 8
  store i64 %16, i64* %9, align 8
  store i64 %16, i64* %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh21TTypeQualifierBuilder15appendQualifierEPKNS_21TQualifierWrapperBaseE(%"class.sh::TTypeQualifierBuilder"*, %"class.sh::TQualifierWrapperBase"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.sh::TQualifierWrapperBase"* %1 to i64
  %4 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %6, align 8
  %8 = icmp eq %"class.sh::TQualifierWrapperBase"** %5, %7
  %9 = ptrtoint %"class.sh::TQualifierWrapperBase"** %7 to i64
  br i1 %8, label %15, label %10

10:                                               ; preds = %2
  %11 = bitcast %"class.sh::TQualifierWrapperBase"** %5 to i64*
  store i64 %3, i64* %11, align 8
  %12 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %5, i64 1
  %13 = ptrtoint %"class.sh::TQualifierWrapperBase"** %12 to i64
  %14 = bitcast %"class.sh::TQualifierWrapperBase"*** %4 to i64*
  store i64 %13, i64* %14, align 8
  br label %228

15:                                               ; preds = %2
  %16 = ptrtoint %"class.sh::TQualifierWrapperBase"** %5 to i64
  %17 = bitcast %"class.sh::TQualifierWrapperBase"*** %4 to i64*
  %18 = bitcast %"class.sh::TTypeQualifierBuilder"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %16, %19
  %21 = ashr exact i64 %20, 3
  %22 = add nsw i64 %21, 1
  %23 = icmp ugt i64 %22, 2305843009213693951
  br i1 %23, label %24, label %26

24:                                               ; preds = %15
  %25 = bitcast %"class.sh::TTypeQualifierBuilder"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %25) #10
  unreachable

26:                                               ; preds = %15
  %27 = bitcast %"class.sh::TQualifierWrapperBase"*** %6 to i64*
  %28 = sub i64 %9, %19
  %29 = ashr exact i64 %28, 3
  %30 = icmp ult i64 %29, 1152921504606846975
  br i1 %30, label %31, label %36

31:                                               ; preds = %26
  %32 = ashr exact i64 %28, 2
  %33 = icmp ult i64 %32, %22
  %34 = select i1 %33, i64 %22, i64 %32
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %42, label %36

36:                                               ; preds = %31, %26
  %37 = phi i64 [ %34, %31 ], [ 2305843009213693951, %26 ]
  %38 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %39 = shl i64 %37, 3
  %40 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %38, i64 %39) #9
  %41 = bitcast i8* %40 to %"class.sh::TQualifierWrapperBase"**
  br label %42

42:                                               ; preds = %36, %31
  %43 = phi i64 [ %37, %36 ], [ 0, %31 ]
  %44 = phi %"class.sh::TQualifierWrapperBase"** [ %41, %36 ], [ null, %31 ]
  %45 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %44, i64 %21
  %46 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %44, i64 %43
  %47 = ptrtoint %"class.sh::TQualifierWrapperBase"** %46 to i64
  %48 = bitcast %"class.sh::TQualifierWrapperBase"** %45 to i64*
  store i64 %3, i64* %48, align 8
  %49 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %45, i64 1
  %50 = ptrtoint %"class.sh::TQualifierWrapperBase"** %49 to i64
  %51 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %52 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %51, align 8
  %53 = ptrtoint %"class.sh::TQualifierWrapperBase"** %52 to i64
  %54 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %4, align 8
  %55 = icmp eq %"class.sh::TQualifierWrapperBase"** %54, %52
  br i1 %55, label %225, label %56

56:                                               ; preds = %42
  %57 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %54, i64 -1
  %58 = ptrtoint %"class.sh::TQualifierWrapperBase"** %57 to i64
  %59 = sub i64 %58, %53
  %60 = lshr i64 %59, 3
  %61 = add nuw nsw i64 %60, 1
  %62 = icmp ult i64 %61, 4
  br i1 %62, label %155, label %63

63:                                               ; preds = %56
  %64 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %54, i64 -1
  %65 = ptrtoint %"class.sh::TQualifierWrapperBase"** %64 to i64
  %66 = sub i64 %65, %53
  %67 = lshr i64 %66, 3
  %68 = xor i64 %67, -1
  %69 = add nsw i64 %21, %68
  %70 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %44, i64 %69
  %71 = xor i64 %67, -1
  %72 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %54, i64 %71
  %73 = icmp ult %"class.sh::TQualifierWrapperBase"** %70, %54
  %74 = icmp ult %"class.sh::TQualifierWrapperBase"** %72, %45
  %75 = and i1 %73, %74
  br i1 %75, label %155, label %76

76:                                               ; preds = %63
  %77 = and i64 %61, 4611686018427387900
  %78 = sub nsw i64 0, %77
  %79 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %45, i64 %78
  %80 = sub nsw i64 0, %77
  %81 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %54, i64 %80
  %82 = add nsw i64 %77, -4
  %83 = lshr exact i64 %82, 2
  %84 = add nuw nsw i64 %83, 1
  %85 = and i64 %84, 1
  %86 = icmp eq i64 %82, 0
  br i1 %86, label %133, label %87

87:                                               ; preds = %76
  %88 = sub nuw nsw i64 %84, %85
  %89 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %45, i64 -1
  %90 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %54, i64 -1
  %91 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %45, i64 -1
  %92 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %54, i64 -1
  br label %93

93:                                               ; preds = %93, %87
  %94 = phi i64 [ 0, %87 ], [ %128, %93 ]
  %95 = phi i64 [ %88, %87 ], [ %129, %93 ]
  %96 = sub i64 0, %94
  %97 = sub i64 0, %94
  %98 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %89, i64 %96
  %99 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %90, i64 %97
  %100 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %99, i64 -1
  %101 = bitcast %"class.sh::TQualifierWrapperBase"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !16
  %103 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %99, i64 -2
  %104 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %103, i64 -1
  %105 = bitcast %"class.sh::TQualifierWrapperBase"** %104 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 8, !alias.scope !16
  %107 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %98, i64 -1
  %108 = bitcast %"class.sh::TQualifierWrapperBase"** %107 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %108, align 8, !alias.scope !19, !noalias !16
  %109 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %98, i64 -2
  %110 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %109, i64 -1
  %111 = bitcast %"class.sh::TQualifierWrapperBase"** %110 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %111, align 8, !alias.scope !19, !noalias !16
  %112 = sub nuw nsw i64 -4, %94
  %113 = sub nuw nsw i64 -4, %94
  %114 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %91, i64 %112
  %115 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %92, i64 %113
  %116 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %115, i64 -1
  %117 = bitcast %"class.sh::TQualifierWrapperBase"** %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 8, !alias.scope !16
  %119 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %115, i64 -2
  %120 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %119, i64 -1
  %121 = bitcast %"class.sh::TQualifierWrapperBase"** %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !16
  %123 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %114, i64 -1
  %124 = bitcast %"class.sh::TQualifierWrapperBase"** %123 to <2 x i64>*
  store <2 x i64> %118, <2 x i64>* %124, align 8, !alias.scope !19, !noalias !16
  %125 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %114, i64 -2
  %126 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %125, i64 -1
  %127 = bitcast %"class.sh::TQualifierWrapperBase"** %126 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %127, align 8, !alias.scope !19, !noalias !16
  %128 = add i64 %94, 8
  %129 = add i64 %95, -2
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %93, !llvm.loop !21

131:                                              ; preds = %93
  %132 = sub nuw nsw i64 -8, %94
  br label %133

133:                                              ; preds = %131, %76
  %134 = phi i64 [ 0, %76 ], [ %132, %131 ]
  %135 = icmp eq i64 %85, 0
  br i1 %135, label %153, label %136

136:                                              ; preds = %133
  %137 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %45, i64 -1
  %138 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %54, i64 -1
  %139 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %137, i64 %134
  %140 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %138, i64 %134
  %141 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %140, i64 -1
  %142 = bitcast %"class.sh::TQualifierWrapperBase"** %141 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 8, !alias.scope !16
  %144 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %140, i64 -2
  %145 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %144, i64 -1
  %146 = bitcast %"class.sh::TQualifierWrapperBase"** %145 to <2 x i64>*
  %147 = load <2 x i64>, <2 x i64>* %146, align 8, !alias.scope !16
  %148 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %139, i64 -1
  %149 = bitcast %"class.sh::TQualifierWrapperBase"** %148 to <2 x i64>*
  store <2 x i64> %143, <2 x i64>* %149, align 8, !alias.scope !19, !noalias !16
  %150 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %139, i64 -2
  %151 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %150, i64 -1
  %152 = bitcast %"class.sh::TQualifierWrapperBase"** %151 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %152, align 8, !alias.scope !19, !noalias !16
  br label %153

153:                                              ; preds = %133, %136
  %154 = icmp eq i64 %61, %77
  br i1 %154, label %225, label %155

155:                                              ; preds = %153, %63, %56
  %156 = phi %"class.sh::TQualifierWrapperBase"** [ %45, %63 ], [ %45, %56 ], [ %79, %153 ]
  %157 = phi %"class.sh::TQualifierWrapperBase"** [ %54, %63 ], [ %54, %56 ], [ %81, %153 ]
  %158 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %157, i64 -1
  %159 = ptrtoint %"class.sh::TQualifierWrapperBase"** %158 to i64
  %160 = sub i64 %159, %53
  %161 = lshr i64 %160, 3
  %162 = add nuw nsw i64 %161, 1
  %163 = and i64 %162, 7
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %176, label %165

165:                                              ; preds = %155, %165
  %166 = phi %"class.sh::TQualifierWrapperBase"** [ %169, %165 ], [ %156, %155 ]
  %167 = phi %"class.sh::TQualifierWrapperBase"** [ %170, %165 ], [ %157, %155 ]
  %168 = phi i64 [ %174, %165 ], [ %163, %155 ]
  %169 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %166, i64 -1
  %170 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %167, i64 -1
  %171 = bitcast %"class.sh::TQualifierWrapperBase"** %170 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = bitcast %"class.sh::TQualifierWrapperBase"** %169 to i64*
  store i64 %172, i64* %173, align 8
  %174 = add i64 %168, -1
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %176, label %165, !llvm.loop !22

176:                                              ; preds = %165, %155
  %177 = phi %"class.sh::TQualifierWrapperBase"** [ undef, %155 ], [ %169, %165 ]
  %178 = phi %"class.sh::TQualifierWrapperBase"** [ %156, %155 ], [ %169, %165 ]
  %179 = phi %"class.sh::TQualifierWrapperBase"** [ %157, %155 ], [ %170, %165 ]
  %180 = icmp ult i64 %160, 56
  br i1 %180, label %225, label %181

181:                                              ; preds = %176, %181
  %182 = phi %"class.sh::TQualifierWrapperBase"** [ %219, %181 ], [ %178, %176 ]
  %183 = phi %"class.sh::TQualifierWrapperBase"** [ %220, %181 ], [ %179, %176 ]
  %184 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %182, i64 -1
  %185 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %183, i64 -1
  %186 = bitcast %"class.sh::TQualifierWrapperBase"** %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = bitcast %"class.sh::TQualifierWrapperBase"** %184 to i64*
  store i64 %187, i64* %188, align 8
  %189 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %182, i64 -2
  %190 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %183, i64 -2
  %191 = bitcast %"class.sh::TQualifierWrapperBase"** %190 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = bitcast %"class.sh::TQualifierWrapperBase"** %189 to i64*
  store i64 %192, i64* %193, align 8
  %194 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %182, i64 -3
  %195 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %183, i64 -3
  %196 = bitcast %"class.sh::TQualifierWrapperBase"** %195 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = bitcast %"class.sh::TQualifierWrapperBase"** %194 to i64*
  store i64 %197, i64* %198, align 8
  %199 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %182, i64 -4
  %200 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %183, i64 -4
  %201 = bitcast %"class.sh::TQualifierWrapperBase"** %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = bitcast %"class.sh::TQualifierWrapperBase"** %199 to i64*
  store i64 %202, i64* %203, align 8
  %204 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %182, i64 -5
  %205 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %183, i64 -5
  %206 = bitcast %"class.sh::TQualifierWrapperBase"** %205 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = bitcast %"class.sh::TQualifierWrapperBase"** %204 to i64*
  store i64 %207, i64* %208, align 8
  %209 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %182, i64 -6
  %210 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %183, i64 -6
  %211 = bitcast %"class.sh::TQualifierWrapperBase"** %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = bitcast %"class.sh::TQualifierWrapperBase"** %209 to i64*
  store i64 %212, i64* %213, align 8
  %214 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %182, i64 -7
  %215 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %183, i64 -7
  %216 = bitcast %"class.sh::TQualifierWrapperBase"** %215 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = bitcast %"class.sh::TQualifierWrapperBase"** %214 to i64*
  store i64 %217, i64* %218, align 8
  %219 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %182, i64 -8
  %220 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %183, i64 -8
  %221 = bitcast %"class.sh::TQualifierWrapperBase"** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = bitcast %"class.sh::TQualifierWrapperBase"** %219 to i64*
  store i64 %222, i64* %223, align 8
  %224 = icmp eq %"class.sh::TQualifierWrapperBase"** %220, %52
  br i1 %224, label %225, label %181, !llvm.loop !23

225:                                              ; preds = %176, %181, %153, %42
  %226 = phi %"class.sh::TQualifierWrapperBase"** [ %45, %42 ], [ %79, %153 ], [ %177, %176 ], [ %219, %181 ]
  %227 = ptrtoint %"class.sh::TQualifierWrapperBase"** %226 to i64
  store i64 %227, i64* %18, align 8
  store i64 %50, i64* %17, align 8
  store i64 %47, i64* %27, align 8
  br label %228

228:                                              ; preds = %10, %225
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2sh21TTypeQualifierBuilder20checkSequenceIsValidEPNS_12TDiagnosticsE(%"class.sh::TTypeQualifierBuilder"* nocapture readonly, %"class.sh::TDiagnostics"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.sh::ImmutableStringBuilder", align 8
  %4 = alloca %"class.sh::ImmutableStringBuilder", align 8
  %5 = alloca %"class.sh::ImmutableString", align 8
  %6 = alloca %"class.sh::ImmutableString", align 8
  %7 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp sgt i32 %8, 309
  %10 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %11 = bitcast %"class.sh::TQualifierWrapperBase"*** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.sh::TTypeQualifierBuilder"* %0 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = ashr exact i64 %15, 3
  %17 = icmp ugt i64 %16, 1
  br i1 %17, label %18, label %211

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  br label %20

20:                                               ; preds = %185, %18
  %21 = phi i64 [ %14, %18 ], [ %195, %185 ]
  %22 = phi i8 [ 0, %18 ], [ %192, %185 ]
  %23 = phi i8 [ 0, %18 ], [ %191, %185 ]
  %24 = phi i8 [ 0, %18 ], [ %190, %185 ]
  %25 = phi i8 [ 0, %18 ], [ %189, %185 ]
  %26 = phi i8 [ 0, %18 ], [ %188, %185 ]
  %27 = phi i32 [ 0, %18 ], [ %187, %185 ]
  %28 = phi i64 [ 1, %18 ], [ %193, %185 ]
  %29 = phi i8 [ 0, %18 ], [ %186, %185 ]
  %30 = inttoptr i64 %21 to %"class.sh::TQualifierWrapperBase"**
  %31 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %30, i64 %28
  %32 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %31, align 8
  %33 = bitcast %"class.sh::TQualifierWrapperBase"* %32 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %34 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %33, align 8
  %35 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %34, i64 2
  %36 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %35, align 8
  %37 = tail call i32 %36(%"class.sh::TQualifierWrapperBase"* %32) #9
  switch i32 %37, label %185 [
    i32 0, label %38
    i32 1, label %41
    i32 5, label %44
    i32 3, label %47
    i32 2, label %63
    i32 4, label %66
    i32 6, label %127
  ]

38:                                               ; preds = %20
  %39 = and i8 %22, 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %185, label %204

41:                                               ; preds = %20
  %42 = and i8 %23, 1
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %185, label %204

44:                                               ; preds = %20
  %45 = and i8 %24, 1
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %185, label %204

47:                                               ; preds = %20
  %48 = and i8 %25, 1
  %49 = icmp eq i8 %48, 0
  %50 = or i1 %9, %49
  br i1 %50, label %51, label %204

51:                                               ; preds = %47
  %52 = and i8 %22, 1
  %53 = icmp eq i8 %52, 0
  %54 = or i1 %9, %53
  br i1 %54, label %55, label %204

55:                                               ; preds = %51
  %56 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %19, align 8
  %57 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %56, i64 %28
  %58 = bitcast %"class.sh::TQualifierWrapperBase"** %57 to %"class.sh::TLayoutQualifierWrapper"**
  %59 = load %"class.sh::TLayoutQualifierWrapper"*, %"class.sh::TLayoutQualifierWrapper"** %58, align 8
  %60 = getelementptr inbounds %"class.sh::TLayoutQualifierWrapper", %"class.sh::TLayoutQualifierWrapper"* %59, i64 0, i32 1, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = add i32 %61, %27
  br label %185

63:                                               ; preds = %20
  %64 = and i8 %26, 1
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %185, label %204

66:                                               ; preds = %20
  %67 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %19, align 8
  %68 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %67, i64 %28
  %69 = bitcast %"class.sh::TQualifierWrapperBase"** %68 to %"class.sh::TStorageQualifierWrapper"**
  %70 = load %"class.sh::TStorageQualifierWrapper"*, %"class.sh::TStorageQualifierWrapper"** %69, align 8
  %71 = getelementptr inbounds %"class.sh::TStorageQualifierWrapper", %"class.sh::TStorageQualifierWrapper"* %70, i64 0, i32 1
  %72 = load i32, i32* %71, align 8
  switch i32 %72, label %74 [
    i32 13, label %73
    i32 11, label %73
    i32 10, label %73
  ]

73:                                               ; preds = %66, %66, %66
  br label %74

74:                                               ; preds = %73, %66
  %75 = phi i8 [ 1, %73 ], [ %29, %66 ]
  %76 = icmp ugt i64 %28, 1
  br i1 %76, label %77, label %185

77:                                               ; preds = %74, %109
  %78 = phi %"class.sh::TQualifierWrapperBase"** [ %110, %109 ], [ %67, %74 ]
  %79 = phi i64 [ %107, %109 ], [ 1, %74 ]
  %80 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %78, i64 %79
  %81 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %80, align 8
  %82 = bitcast %"class.sh::TQualifierWrapperBase"* %81 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %83 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %82, align 8
  %84 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %83, i64 2
  %85 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %84, align 8
  %86 = tail call i32 %85(%"class.sh::TQualifierWrapperBase"* %81) #9
  %87 = icmp eq i32 %86, 4
  br i1 %87, label %88, label %106

88:                                               ; preds = %77
  %89 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %19, align 8
  %90 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %89, i64 %79
  %91 = bitcast %"class.sh::TQualifierWrapperBase"** %90 to %"class.sh::TStorageQualifierWrapper"**
  %92 = load %"class.sh::TStorageQualifierWrapper"*, %"class.sh::TStorageQualifierWrapper"** %91, align 8
  %93 = getelementptr inbounds %"class.sh::TStorageQualifierWrapper", %"class.sh::TStorageQualifierWrapper"* %92, i64 0, i32 1
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %72, %94
  br i1 %95, label %96, label %106

96:                                               ; preds = %88
  %97 = bitcast %"class.sh::ImmutableString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %97) #9
  %98 = tail call i8* @_ZN2sh18getQualifierStringENS_10TQualifierE(i32 %72) #9
  %99 = icmp eq i8* %98, null
  br i1 %99, label %111, label %100

100:                                              ; preds = %96, %100
  %101 = phi i64 [ %105, %100 ], [ 0, %96 ]
  %102 = getelementptr inbounds i8, i8* %98, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = icmp eq i8 %103, 0
  %105 = add i64 %101, 1
  br i1 %104, label %111, label %100

106:                                              ; preds = %88, %77
  %107 = add nuw i64 %79, 1
  %108 = icmp eq i64 %107, %28
  br i1 %108, label %185, label %109

109:                                              ; preds = %106
  %110 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %19, align 8
  br label %77

111:                                              ; preds = %100, %96
  %112 = phi i64 [ 0, %96 ], [ %101, %100 ]
  %113 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 0
  store i8* %98, i8** %113, align 8
  %114 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 1
  store i64 %112, i64* %114, align 8
  %115 = bitcast %"class.sh::ImmutableStringBuilder"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %115) #9
  %116 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %3, i64 0, i32 0
  %117 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %3, i64 0, i32 1
  %118 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %3, i64 0, i32 2
  %119 = add i64 %112, 25
  store i64 0, i64* %116, align 8
  store i64 %119, i64* %117, align 8
  %120 = add i64 %112, 26
  %121 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %122 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %121, i64 %120) #9
  store i8* %122, i8** %118, align 8
  %123 = call dereferenceable(24) %"class.sh::ImmutableStringBuilder"* @_ZN2sh22ImmutableStringBuilderlsERKNS_15ImmutableStringE(%"class.sh::ImmutableStringBuilder"* nonnull %3, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %5) #9
  %124 = call dereferenceable(24) %"class.sh::ImmutableStringBuilder"* @_ZN2sh22ImmutableStringBuilderlsERKNS_15ImmutableStringE(%"class.sh::ImmutableStringBuilder"* %123, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_123kSpecifiedMultipleTimesE) #9
  %125 = call { i8*, i64 } @_ZN2sh22ImmutableStringBuildercvNS_15ImmutableStringEEv(%"class.sh::ImmutableStringBuilder"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %115) #9
  %126 = extractvalue { i8*, i64 } %125, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %97) #9
  br label %204

127:                                              ; preds = %20
  %128 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %19, align 8
  %129 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %128, i64 %28
  %130 = bitcast %"class.sh::TQualifierWrapperBase"** %129 to %"class.sh::TMemoryQualifierWrapper"**
  %131 = load %"class.sh::TMemoryQualifierWrapper"*, %"class.sh::TMemoryQualifierWrapper"** %130, align 8
  %132 = getelementptr inbounds %"class.sh::TMemoryQualifierWrapper", %"class.sh::TMemoryQualifierWrapper"* %131, i64 0, i32 1
  %133 = load i32, i32* %132, align 8
  %134 = icmp ugt i64 %28, 1
  br i1 %134, label %135, label %185

135:                                              ; preds = %127, %167
  %136 = phi %"class.sh::TQualifierWrapperBase"** [ %168, %167 ], [ %128, %127 ]
  %137 = phi i64 [ %165, %167 ], [ 1, %127 ]
  %138 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %136, i64 %137
  %139 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %138, align 8
  %140 = bitcast %"class.sh::TQualifierWrapperBase"* %139 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %141 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %140, align 8
  %142 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %141, i64 2
  %143 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %142, align 8
  %144 = tail call i32 %143(%"class.sh::TQualifierWrapperBase"* %139) #9
  %145 = icmp eq i32 %144, 6
  br i1 %145, label %146, label %164

146:                                              ; preds = %135
  %147 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %19, align 8
  %148 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %147, i64 %137
  %149 = bitcast %"class.sh::TQualifierWrapperBase"** %148 to %"class.sh::TMemoryQualifierWrapper"**
  %150 = load %"class.sh::TMemoryQualifierWrapper"*, %"class.sh::TMemoryQualifierWrapper"** %149, align 8
  %151 = getelementptr inbounds %"class.sh::TMemoryQualifierWrapper", %"class.sh::TMemoryQualifierWrapper"* %150, i64 0, i32 1
  %152 = load i32, i32* %151, align 8
  %153 = icmp eq i32 %133, %152
  br i1 %153, label %154, label %164

154:                                              ; preds = %146
  %155 = bitcast %"class.sh::ImmutableString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %155) #9
  %156 = tail call i8* @_ZN2sh18getQualifierStringENS_10TQualifierE(i32 %133) #9
  %157 = icmp eq i8* %156, null
  br i1 %157, label %169, label %158

158:                                              ; preds = %154, %158
  %159 = phi i64 [ %163, %158 ], [ 0, %154 ]
  %160 = getelementptr inbounds i8, i8* %156, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = icmp eq i8 %161, 0
  %163 = add i64 %159, 1
  br i1 %162, label %169, label %158

164:                                              ; preds = %146, %135
  %165 = add nuw i64 %137, 1
  %166 = icmp eq i64 %165, %28
  br i1 %166, label %185, label %167

167:                                              ; preds = %164
  %168 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %19, align 8
  br label %135

169:                                              ; preds = %158, %154
  %170 = phi i64 [ 0, %154 ], [ %159, %158 ]
  %171 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 0
  store i8* %156, i8** %171, align 8
  %172 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 1
  store i64 %170, i64* %172, align 8
  %173 = bitcast %"class.sh::ImmutableStringBuilder"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %173) #9
  %174 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %4, i64 0, i32 0
  %175 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %4, i64 0, i32 1
  %176 = getelementptr inbounds %"class.sh::ImmutableStringBuilder", %"class.sh::ImmutableStringBuilder"* %4, i64 0, i32 2
  %177 = add i64 %170, 25
  store i64 0, i64* %174, align 8
  store i64 %177, i64* %175, align 8
  %178 = add i64 %170, 26
  %179 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %180 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %179, i64 %178) #9
  store i8* %180, i8** %176, align 8
  %181 = call dereferenceable(24) %"class.sh::ImmutableStringBuilder"* @_ZN2sh22ImmutableStringBuilderlsERKNS_15ImmutableStringE(%"class.sh::ImmutableStringBuilder"* nonnull %4, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %6) #9
  %182 = call dereferenceable(24) %"class.sh::ImmutableStringBuilder"* @_ZN2sh22ImmutableStringBuilderlsERKNS_15ImmutableStringE(%"class.sh::ImmutableStringBuilder"* %181, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_123kSpecifiedMultipleTimesE) #9
  %183 = call { i8*, i64 } @_ZN2sh22ImmutableStringBuildercvNS_15ImmutableStringEEv(%"class.sh::ImmutableStringBuilder"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %173) #9
  %184 = extractvalue { i8*, i64 } %183, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %155) #9
  br label %204

185:                                              ; preds = %164, %106, %127, %74, %63, %55, %44, %41, %38, %20
  %186 = phi i8 [ %29, %20 ], [ %29, %55 ], [ %29, %38 ], [ %29, %41 ], [ %29, %44 ], [ %29, %63 ], [ %75, %74 ], [ %29, %127 ], [ %75, %106 ], [ %29, %164 ]
  %187 = phi i32 [ %27, %20 ], [ %62, %55 ], [ %27, %38 ], [ %27, %41 ], [ %27, %44 ], [ %27, %63 ], [ %27, %74 ], [ %27, %127 ], [ %27, %106 ], [ %27, %164 ]
  %188 = phi i8 [ %26, %20 ], [ %26, %55 ], [ %26, %38 ], [ %26, %41 ], [ %26, %44 ], [ 1, %63 ], [ %26, %74 ], [ %26, %127 ], [ %26, %106 ], [ %26, %164 ]
  %189 = phi i8 [ %25, %20 ], [ 1, %55 ], [ %25, %38 ], [ %25, %41 ], [ %25, %44 ], [ %25, %63 ], [ %25, %74 ], [ %25, %127 ], [ %25, %106 ], [ %25, %164 ]
  %190 = phi i8 [ %24, %20 ], [ %24, %55 ], [ %24, %38 ], [ %24, %41 ], [ 1, %44 ], [ %24, %63 ], [ %24, %74 ], [ %24, %127 ], [ %24, %106 ], [ %24, %164 ]
  %191 = phi i8 [ %23, %20 ], [ %23, %55 ], [ %23, %38 ], [ 1, %41 ], [ %23, %44 ], [ %23, %63 ], [ %23, %74 ], [ %23, %127 ], [ %23, %106 ], [ %23, %164 ]
  %192 = phi i8 [ %22, %20 ], [ %22, %55 ], [ 1, %38 ], [ %22, %41 ], [ %22, %44 ], [ %22, %63 ], [ %22, %74 ], [ %22, %127 ], [ %22, %106 ], [ %22, %164 ]
  %193 = add nuw i64 %28, 1
  %194 = load i64, i64* %11, align 8
  %195 = load i64, i64* %13, align 8
  %196 = sub i64 %194, %195
  %197 = ashr exact i64 %196, 3
  %198 = icmp ult i64 %193, %197
  br i1 %198, label %20, label %199

199:                                              ; preds = %185
  %200 = icmp ult i32 %187, 2
  %201 = and i8 %186, 1
  %202 = icmp eq i8 %201, 0
  %203 = or i1 %202, %200
  br i1 %203, label %211, label %204

204:                                              ; preds = %38, %41, %44, %47, %51, %63, %199, %169, %111
  %205 = phi i8* [ %126, %111 ], [ %184, %169 ], [ getelementptr inbounds ([49 x i8], [49 x i8]* @.str.31, i64 0, i64 0), %199 ], [ getelementptr inbounds ([50 x i8], [50 x i8]* @.str.24, i64 0, i64 0), %38 ], [ getelementptr inbounds ([48 x i8], [48 x i8]* @.str.25, i64 0, i64 0), %41 ], [ getelementptr inbounds ([50 x i8], [50 x i8]* @.str.26, i64 0, i64 0), %44 ], [ getelementptr inbounds ([47 x i8], [47 x i8]* @.str.27, i64 0, i64 0), %47 ], [ getelementptr inbounds ([110 x i8], [110 x i8]* @.str.28, i64 0, i64 0), %51 ], [ getelementptr inbounds ([54 x i8], [54 x i8]* @.str.29, i64 0, i64 0), %63 ]
  %206 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %19, align 8
  %207 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %206, align 8
  %208 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %207, i64 0, i32 1
  %209 = icmp eq i8* %205, null
  %210 = select i1 %209, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i8* %205
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* dereferenceable(16) %208, i8* %210, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0)) #9
  br label %275

211:                                              ; preds = %199, %2
  %212 = phi i64 [ %195, %199 ], [ %14, %2 ]
  %213 = phi i64 [ %194, %199 ], [ %12, %2 ]
  br i1 %9, label %275, label %214

214:                                              ; preds = %211
  %215 = load i32, i32* %7, align 8
  %216 = icmp sgt i32 %215, 309
  br i1 %216, label %275, label %217

217:                                              ; preds = %214
  %218 = sub i64 %213, %212
  %219 = ashr exact i64 %218, 3
  %220 = icmp ugt i64 %219, 1
  br i1 %220, label %221, label %275

221:                                              ; preds = %217, %259
  %222 = phi i64 [ %265, %259 ], [ %212, %217 ]
  %223 = phi i64 [ %263, %259 ], [ 1, %217 ]
  %224 = phi i8 [ %262, %259 ], [ 0, %217 ]
  %225 = phi i8 [ %261, %259 ], [ 0, %217 ]
  %226 = phi i8 [ %260, %259 ], [ 0, %217 ]
  %227 = inttoptr i64 %222 to %"class.sh::TQualifierWrapperBase"**
  %228 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %227, i64 %223
  %229 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %228, align 8
  %230 = bitcast %"class.sh::TQualifierWrapperBase"* %229 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %231 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %230, align 8
  %232 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %231, i64 2
  %233 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %232, align 8
  %234 = tail call i32 %233(%"class.sh::TQualifierWrapperBase"* %229) #9
  switch i32 %234, label %259 [
    i32 0, label %235
    i32 2, label %240
    i32 3, label %246
    i32 4, label %252
    i32 6, label %255
    i32 5, label %258
  ]

235:                                              ; preds = %221
  %236 = or i8 %225, %224
  %237 = or i8 %236, %226
  %238 = and i8 %237, 1
  %239 = icmp eq i8 %238, 0
  br i1 %239, label %259, label %269

240:                                              ; preds = %221
  %241 = and i8 %225, 1
  %242 = icmp eq i8 %241, 0
  br i1 %242, label %243, label %269

243:                                              ; preds = %240
  %244 = and i8 %224, 1
  %245 = icmp eq i8 %244, 0
  br i1 %245, label %259, label %269

246:                                              ; preds = %221
  %247 = and i8 %225, 1
  %248 = icmp eq i8 %247, 0
  br i1 %248, label %249, label %269

249:                                              ; preds = %246
  %250 = and i8 %224, 1
  %251 = icmp eq i8 %250, 0
  br i1 %251, label %259, label %269

252:                                              ; preds = %221
  %253 = and i8 %224, 1
  %254 = icmp eq i8 %253, 0
  br i1 %254, label %259, label %269

255:                                              ; preds = %221
  %256 = and i8 %224, 1
  %257 = icmp eq i8 %256, 0
  br i1 %257, label %259, label %269

258:                                              ; preds = %221
  br label %259

259:                                              ; preds = %258, %255, %252, %249, %243, %235, %221
  %260 = phi i8 [ %226, %221 ], [ %226, %258 ], [ %226, %255 ], [ %226, %249 ], [ %226, %235 ], [ 1, %243 ], [ %226, %252 ]
  %261 = phi i8 [ %225, %221 ], [ %225, %258 ], [ %225, %255 ], [ %225, %249 ], [ %225, %235 ], [ %225, %243 ], [ 1, %252 ]
  %262 = phi i8 [ %224, %221 ], [ 1, %258 ], [ %224, %255 ], [ %224, %249 ], [ %224, %235 ], [ %224, %243 ], [ %224, %252 ]
  %263 = add nuw i64 %223, 1
  %264 = load i64, i64* %11, align 8
  %265 = load i64, i64* %13, align 8
  %266 = sub i64 %264, %265
  %267 = ashr exact i64 %266, 3
  %268 = icmp ult i64 %263, %267
  br i1 %268, label %221, label %275

269:                                              ; preds = %235, %240, %243, %246, %249, %252, %255
  %270 = phi i8* [ getelementptr inbounds ([57 x i8], [57 x i8]* @.str.38, i64 0, i64 0), %255 ], [ getelementptr inbounds ([58 x i8], [58 x i8]* @.str.37, i64 0, i64 0), %252 ], [ getelementptr inbounds ([57 x i8], [57 x i8]* @.str.36, i64 0, i64 0), %249 ], [ getelementptr inbounds ([55 x i8], [55 x i8]* @.str.35, i64 0, i64 0), %246 ], [ getelementptr inbounds ([64 x i8], [64 x i8]* @.str.34, i64 0, i64 0), %243 ], [ getelementptr inbounds ([62 x i8], [62 x i8]* @.str.33, i64 0, i64 0), %240 ], [ getelementptr inbounds ([59 x i8], [59 x i8]* @.str.32, i64 0, i64 0), %235 ]
  %271 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %272 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %271, align 8
  %273 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %272, align 8
  %274 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %273, i64 0, i32 1
  tail call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* dereferenceable(16) %274, i8* nonnull %270, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0)) #9
  br label %275

275:                                              ; preds = %259, %217, %214, %211, %269, %204
  %276 = phi i1 [ false, %204 ], [ false, %269 ], [ true, %211 ], [ true, %214 ], [ true, %217 ], [ true, %259 ]
  ret i1 %276
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2sh21TTypeQualifierBuilder25getParameterTypeQualifierEPNS_12TDiagnosticsE(%"struct.sh::TTypeQualifier"* noalias sret, %"class.sh::TTypeQualifierBuilder"* nocapture readonly, %"class.sh::TDiagnostics"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TVector", align 8
  %5 = tail call zeroext i1 @_ZNK2sh21TTypeQualifierBuilder20checkSequenceIsValidEPNS_12TDiagnosticsE(%"class.sh::TTypeQualifierBuilder"* %1, %"class.sh::TDiagnostics"* %2)
  br i1 %5, label %33, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %7, align 8
  %9 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %9, i64 0, i32 1
  %11 = bitcast %"struct.sh::TTypeQualifier"* %0 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %11, align 4, !alias.scope !24
  %12 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 4, i32 0, i64 0
  %13 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 7
  %14 = bitcast i32* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 -1, i64 20, i1 false) #9, !alias.scope !24
  store i32 0, i32* %13, align 4, !alias.scope !24
  %15 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 8
  store i32 -1, i32* %15, align 4, !alias.scope !24
  %16 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 9
  store i8 0, i8* %16, align 4, !alias.scope !24
  %17 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 10
  store i8 0, i8* %17, align 1, !alias.scope !24
  %18 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 12
  store i32 0, i32* %18, align 4, !alias.scope !24
  %19 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 13
  store i32 0, i32* %19, align 4, !alias.scope !24
  %20 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 14
  store i32 -1, i32* %20, align 4, !alias.scope !24
  %21 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 15
  %22 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 20
  %23 = bitcast i32* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %23, i8 0, i64 20, i1 false) #9, !alias.scope !24
  store i32 -1, i32* %22, align 4, !alias.scope !24
  %24 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 21
  store i32 -1, i32* %24, align 4, !alias.scope !24
  %25 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 22
  store i8 0, i8* %25, align 4, !alias.scope !24
  %26 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 1
  %27 = bitcast %"struct.sh::TMemoryQualifier"* %26 to i40*
  store i40 0, i40* %27, align 4
  %28 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 2
  %29 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 6
  %30 = bitcast %"struct.sh::TSourceLoc"* %29 to i8*
  %31 = bitcast %"struct.sh::TSourceLoc"* %10 to i8*
  %32 = bitcast i32* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %32, i8 0, i64 10, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %30, i8* align 4 %31, i64 16, i1 false) #9
  br label %256

33:                                               ; preds = %3
  %34 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %1, i64 0, i32 1
  %35 = load i32, i32* %34, align 8
  %36 = icmp sgt i32 %35, 309
  br i1 %36, label %37, label %254

37:                                               ; preds = %33
  %38 = bitcast %"class.sh::TVector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %38) #9
  %39 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 1
  %41 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 0, i64 24, i1 false) #9
  %42 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %43 = bitcast %"class.sh::TQualifierWrapperBase"*** %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast %"class.sh::TTypeQualifierBuilder"* %1 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = sub i64 %44, %46
  %48 = ashr exact i64 %47, 3
  %49 = icmp eq i64 %47, 0
  br i1 %49, label %247, label %50

50:                                               ; preds = %37
  %51 = icmp ugt i64 %48, 2305843009213693951
  br i1 %51, label %52, label %54

52:                                               ; preds = %50
  %53 = bitcast %"class.sh::TVector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %53) #10
  unreachable

54:                                               ; preds = %50
  %55 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %56 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %55, i64 %47) #9
  %57 = bitcast i8* %56 to %"class.sh::TQualifierWrapperBase"**
  %58 = bitcast %"class.sh::TQualifierWrapperBase"*** %40 to i8**
  store i8* %56, i8** %58, align 8
  %59 = bitcast %"class.sh::TVector"* %4 to i8**
  store i8* %56, i8** %59, align 8
  %60 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %57, i64 %48
  store %"class.sh::TQualifierWrapperBase"** %60, %"class.sh::TQualifierWrapperBase"*** %41, align 8
  %61 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %62 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %61, align 8
  %63 = bitcast %"class.sh::TQualifierWrapperBase"** %62 to i8*
  %64 = ptrtoint %"class.sh::TQualifierWrapperBase"** %62 to i64
  %65 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %42, align 8
  %66 = bitcast %"class.sh::TQualifierWrapperBase"*** %40 to i64*
  %67 = ptrtoint i8* %56 to i64
  %68 = icmp eq %"class.sh::TQualifierWrapperBase"** %62, %65
  br i1 %68, label %245, label %69

69:                                               ; preds = %54
  %70 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %65, i64 -1
  %71 = ptrtoint %"class.sh::TQualifierWrapperBase"** %70 to i64
  %72 = sub i64 %71, %64
  %73 = lshr i64 %72, 3
  %74 = add nuw nsw i64 %73, 1
  %75 = icmp ult i64 %74, 4
  br i1 %75, label %171, label %76

76:                                               ; preds = %69
  %77 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %65, i64 -1
  %78 = ptrtoint %"class.sh::TQualifierWrapperBase"** %77 to i64
  %79 = sub i64 %78, %64
  %80 = lshr i64 %79, 3
  %81 = add i64 %79, 8
  %82 = and i64 %81, -8
  %83 = getelementptr i8, i8* %56, i64 %82
  %84 = add nuw nsw i64 %80, 1
  %85 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %62, i64 %84
  %86 = bitcast %"class.sh::TQualifierWrapperBase"** %85 to i8*
  %87 = icmp ult i8* %56, %86
  %88 = icmp ugt i8* %83, %63
  %89 = and i1 %87, %88
  br i1 %89, label %171, label %90

90:                                               ; preds = %76
  %91 = and i64 %74, 4611686018427387900
  %92 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %57, i64 %91
  %93 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %62, i64 %91
  %94 = add nsw i64 %91, -4
  %95 = lshr exact i64 %94, 2
  %96 = add nuw nsw i64 %95, 1
  %97 = and i64 %96, 3
  %98 = icmp ult i64 %94, 12
  br i1 %98, label %150, label %99

99:                                               ; preds = %90
  %100 = sub nsw i64 %96, %97
  br label %101

101:                                              ; preds = %101, %99
  %102 = phi i64 [ 0, %99 ], [ %147, %101 ]
  %103 = phi i64 [ %100, %99 ], [ %148, %101 ]
  %104 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %57, i64 %102
  %105 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %62, i64 %102
  %106 = bitcast %"class.sh::TQualifierWrapperBase"** %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 8, !alias.scope !27
  %108 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %105, i64 2
  %109 = bitcast %"class.sh::TQualifierWrapperBase"** %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !27
  %111 = bitcast %"class.sh::TQualifierWrapperBase"** %104 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %111, align 8, !alias.scope !30, !noalias !27
  %112 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %104, i64 2
  %113 = bitcast %"class.sh::TQualifierWrapperBase"** %112 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %113, align 8, !alias.scope !30, !noalias !27
  %114 = or i64 %102, 4
  %115 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %57, i64 %114
  %116 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %62, i64 %114
  %117 = bitcast %"class.sh::TQualifierWrapperBase"** %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 8, !alias.scope !27
  %119 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %116, i64 2
  %120 = bitcast %"class.sh::TQualifierWrapperBase"** %119 to <2 x i64>*
  %121 = load <2 x i64>, <2 x i64>* %120, align 8, !alias.scope !27
  %122 = bitcast %"class.sh::TQualifierWrapperBase"** %115 to <2 x i64>*
  store <2 x i64> %118, <2 x i64>* %122, align 8, !alias.scope !30, !noalias !27
  %123 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %115, i64 2
  %124 = bitcast %"class.sh::TQualifierWrapperBase"** %123 to <2 x i64>*
  store <2 x i64> %121, <2 x i64>* %124, align 8, !alias.scope !30, !noalias !27
  %125 = or i64 %102, 8
  %126 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %57, i64 %125
  %127 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %62, i64 %125
  %128 = bitcast %"class.sh::TQualifierWrapperBase"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !27
  %130 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %127, i64 2
  %131 = bitcast %"class.sh::TQualifierWrapperBase"** %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8, !alias.scope !27
  %133 = bitcast %"class.sh::TQualifierWrapperBase"** %126 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %133, align 8, !alias.scope !30, !noalias !27
  %134 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %126, i64 2
  %135 = bitcast %"class.sh::TQualifierWrapperBase"** %134 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %135, align 8, !alias.scope !30, !noalias !27
  %136 = or i64 %102, 12
  %137 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %57, i64 %136
  %138 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %62, i64 %136
  %139 = bitcast %"class.sh::TQualifierWrapperBase"** %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 8, !alias.scope !27
  %141 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %138, i64 2
  %142 = bitcast %"class.sh::TQualifierWrapperBase"** %141 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 8, !alias.scope !27
  %144 = bitcast %"class.sh::TQualifierWrapperBase"** %137 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %144, align 8, !alias.scope !30, !noalias !27
  %145 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %137, i64 2
  %146 = bitcast %"class.sh::TQualifierWrapperBase"** %145 to <2 x i64>*
  store <2 x i64> %143, <2 x i64>* %146, align 8, !alias.scope !30, !noalias !27
  %147 = add i64 %102, 16
  %148 = add i64 %103, -4
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %101, !llvm.loop !32

150:                                              ; preds = %101, %90
  %151 = phi i64 [ 0, %90 ], [ %147, %101 ]
  %152 = icmp eq i64 %97, 0
  br i1 %152, label %169, label %153

153:                                              ; preds = %150, %153
  %154 = phi i64 [ %166, %153 ], [ %151, %150 ]
  %155 = phi i64 [ %167, %153 ], [ %97, %150 ]
  %156 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %57, i64 %154
  %157 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %62, i64 %154
  %158 = bitcast %"class.sh::TQualifierWrapperBase"** %157 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 8, !alias.scope !27
  %160 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %157, i64 2
  %161 = bitcast %"class.sh::TQualifierWrapperBase"** %160 to <2 x i64>*
  %162 = load <2 x i64>, <2 x i64>* %161, align 8, !alias.scope !27
  %163 = bitcast %"class.sh::TQualifierWrapperBase"** %156 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %163, align 8, !alias.scope !30, !noalias !27
  %164 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %156, i64 2
  %165 = bitcast %"class.sh::TQualifierWrapperBase"** %164 to <2 x i64>*
  store <2 x i64> %162, <2 x i64>* %165, align 8, !alias.scope !30, !noalias !27
  %166 = add i64 %154, 4
  %167 = add i64 %155, -1
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %153, !llvm.loop !33

169:                                              ; preds = %153, %150
  %170 = icmp eq i64 %74, %91
  br i1 %170, label %242, label %171

171:                                              ; preds = %169, %76, %69
  %172 = phi %"class.sh::TQualifierWrapperBase"** [ %57, %76 ], [ %57, %69 ], [ %92, %169 ]
  %173 = phi %"class.sh::TQualifierWrapperBase"** [ %62, %76 ], [ %62, %69 ], [ %93, %169 ]
  %174 = ptrtoint %"class.sh::TQualifierWrapperBase"** %173 to i64
  %175 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %65, i64 -1
  %176 = ptrtoint %"class.sh::TQualifierWrapperBase"** %175 to i64
  %177 = sub i64 %176, %174
  %178 = lshr i64 %177, 3
  %179 = add nuw nsw i64 %178, 1
  %180 = and i64 %179, 7
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %193, label %182

182:                                              ; preds = %171, %182
  %183 = phi %"class.sh::TQualifierWrapperBase"** [ %190, %182 ], [ %172, %171 ]
  %184 = phi %"class.sh::TQualifierWrapperBase"** [ %189, %182 ], [ %173, %171 ]
  %185 = phi i64 [ %191, %182 ], [ %180, %171 ]
  %186 = bitcast %"class.sh::TQualifierWrapperBase"** %183 to i64*
  %187 = bitcast %"class.sh::TQualifierWrapperBase"** %184 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %186, align 8
  %189 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %184, i64 1
  %190 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %183, i64 1
  %191 = add i64 %185, -1
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %182, !llvm.loop !34

193:                                              ; preds = %182, %171
  %194 = phi %"class.sh::TQualifierWrapperBase"** [ undef, %171 ], [ %190, %182 ]
  %195 = phi %"class.sh::TQualifierWrapperBase"** [ %172, %171 ], [ %190, %182 ]
  %196 = phi %"class.sh::TQualifierWrapperBase"** [ %173, %171 ], [ %189, %182 ]
  %197 = icmp ult i64 %177, 56
  br i1 %197, label %242, label %198

198:                                              ; preds = %193, %198
  %199 = phi %"class.sh::TQualifierWrapperBase"** [ %240, %198 ], [ %195, %193 ]
  %200 = phi %"class.sh::TQualifierWrapperBase"** [ %239, %198 ], [ %196, %193 ]
  %201 = bitcast %"class.sh::TQualifierWrapperBase"** %199 to i64*
  %202 = bitcast %"class.sh::TQualifierWrapperBase"** %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %201, align 8
  %204 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %200, i64 1
  %205 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %199, i64 1
  %206 = bitcast %"class.sh::TQualifierWrapperBase"** %205 to i64*
  %207 = bitcast %"class.sh::TQualifierWrapperBase"** %204 to i64*
  %208 = load i64, i64* %207, align 8
  store i64 %208, i64* %206, align 8
  %209 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %200, i64 2
  %210 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %199, i64 2
  %211 = bitcast %"class.sh::TQualifierWrapperBase"** %210 to i64*
  %212 = bitcast %"class.sh::TQualifierWrapperBase"** %209 to i64*
  %213 = load i64, i64* %212, align 8
  store i64 %213, i64* %211, align 8
  %214 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %200, i64 3
  %215 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %199, i64 3
  %216 = bitcast %"class.sh::TQualifierWrapperBase"** %215 to i64*
  %217 = bitcast %"class.sh::TQualifierWrapperBase"** %214 to i64*
  %218 = load i64, i64* %217, align 8
  store i64 %218, i64* %216, align 8
  %219 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %200, i64 4
  %220 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %199, i64 4
  %221 = bitcast %"class.sh::TQualifierWrapperBase"** %220 to i64*
  %222 = bitcast %"class.sh::TQualifierWrapperBase"** %219 to i64*
  %223 = load i64, i64* %222, align 8
  store i64 %223, i64* %221, align 8
  %224 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %200, i64 5
  %225 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %199, i64 5
  %226 = bitcast %"class.sh::TQualifierWrapperBase"** %225 to i64*
  %227 = bitcast %"class.sh::TQualifierWrapperBase"** %224 to i64*
  %228 = load i64, i64* %227, align 8
  store i64 %228, i64* %226, align 8
  %229 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %200, i64 6
  %230 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %199, i64 6
  %231 = bitcast %"class.sh::TQualifierWrapperBase"** %230 to i64*
  %232 = bitcast %"class.sh::TQualifierWrapperBase"** %229 to i64*
  %233 = load i64, i64* %232, align 8
  store i64 %233, i64* %231, align 8
  %234 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %200, i64 7
  %235 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %199, i64 7
  %236 = bitcast %"class.sh::TQualifierWrapperBase"** %235 to i64*
  %237 = bitcast %"class.sh::TQualifierWrapperBase"** %234 to i64*
  %238 = load i64, i64* %237, align 8
  store i64 %238, i64* %236, align 8
  %239 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %200, i64 8
  %240 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %199, i64 8
  %241 = icmp eq %"class.sh::TQualifierWrapperBase"** %239, %65
  br i1 %241, label %242, label %198, !llvm.loop !35

242:                                              ; preds = %193, %198, %169
  %243 = phi %"class.sh::TQualifierWrapperBase"** [ %92, %169 ], [ %194, %193 ], [ %240, %198 ]
  %244 = ptrtoint %"class.sh::TQualifierWrapperBase"** %243 to i64
  br label %245

245:                                              ; preds = %242, %54
  %246 = phi i64 [ %67, %54 ], [ %244, %242 ]
  store i64 %246, i64* %66, align 8
  br label %247

247:                                              ; preds = %37, %245
  call fastcc void @_ZN2sh12_GLOBAL__N_112SortSequenceERNS_7TVectorIPKNS_21TQualifierWrapperBaseEEE(%"class.sh::TVector"* nonnull dereferenceable(24) %4)
  call fastcc void @_ZN2sh12_GLOBAL__N_143GetParameterTypeQualifierFromSortedSequenceERKNS_7TVectorIPKNS_21TQualifierWrapperBaseEEEPNS_12TDiagnosticsE(%"struct.sh::TTypeQualifier"* sret %0, %"class.sh::TVector"* nonnull dereferenceable(24) %4, %"class.sh::TDiagnostics"* %2)
  %248 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %39, align 8
  %249 = icmp eq %"class.sh::TQualifierWrapperBase"** %248, null
  br i1 %249, label %253, label %250

250:                                              ; preds = %247
  %251 = ptrtoint %"class.sh::TQualifierWrapperBase"** %248 to i64
  %252 = bitcast %"class.sh::TQualifierWrapperBase"*** %40 to i64*
  store i64 %251, i64* %252, align 8
  br label %253

253:                                              ; preds = %247, %250
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %38) #9
  br label %256

254:                                              ; preds = %33
  %255 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %1, i64 0, i32 0
  tail call fastcc void @_ZN2sh12_GLOBAL__N_143GetParameterTypeQualifierFromSortedSequenceERKNS_7TVectorIPKNS_21TQualifierWrapperBaseEEEPNS_12TDiagnosticsE(%"struct.sh::TTypeQualifier"* sret %0, %"class.sh::TVector"* dereferenceable(24) %255, %"class.sh::TDiagnostics"* %2)
  br label %256

256:                                              ; preds = %254, %253, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_112SortSequenceERNS_7TVectorIPKNS_21TQualifierWrapperBaseEEE(%"class.sh::TVector"* nocapture readonly dereferenceable(24)) unnamed_addr #0 {
  %2 = alloca %"struct.sh::(anonymous namespace)::QualifierComparator", align 1
  %3 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %4, i64 1
  %6 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %6, align 8
  %8 = getelementptr inbounds %"struct.sh::(anonymous namespace)::QualifierComparator", %"struct.sh::(anonymous namespace)::QualifierComparator"* %2, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8)
  %9 = ptrtoint %"class.sh::TQualifierWrapperBase"** %5 to i64
  %10 = ptrtoint %"class.sh::TQualifierWrapperBase"** %7 to i64
  %11 = sub i64 %10, %9
  %12 = ashr exact i64 %11, 3
  %13 = icmp sgt i64 %11, 1024
  br i1 %13, label %14, label %25

14:                                               ; preds = %1
  %15 = icmp slt i64 %12, 1152921504606846975
  %16 = select i1 %15, i64 %12, i64 1152921504606846975
  br label %17

17:                                               ; preds = %22, %14
  %18 = phi i64 [ %23, %22 ], [ %16, %14 ]
  %19 = shl i64 %18, 3
  %20 = tail call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %19, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #9
  %21 = icmp eq i8* %20, null
  br i1 %21, label %22, label %26

22:                                               ; preds = %17
  %23 = lshr i64 %18, 1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %17

25:                                               ; preds = %22, %1
  call fastcc void @_ZNSt3__113__stable_sortIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"class.sh::TQualifierWrapperBase"** %5, %"class.sh::TQualifierWrapperBase"** %7, %"struct.sh::(anonymous namespace)::QualifierComparator"* nonnull dereferenceable(1) %2, i64 %12, %"class.sh::TQualifierWrapperBase"** null, i64 0) #9
  br label %28

26:                                               ; preds = %17
  %27 = bitcast i8* %20 to %"class.sh::TQualifierWrapperBase"**
  call fastcc void @_ZNSt3__113__stable_sortIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"class.sh::TQualifierWrapperBase"** %5, %"class.sh::TQualifierWrapperBase"** %7, %"struct.sh::(anonymous namespace)::QualifierComparator"* nonnull dereferenceable(1) %2, i64 %12, %"class.sh::TQualifierWrapperBase"** nonnull %27, i64 %18) #9
  call void @_ZdlPv(i8* nonnull %20) #11
  br label %28

28:                                               ; preds = %25, %26
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_143GetParameterTypeQualifierFromSortedSequenceERKNS_7TVectorIPKNS_21TQualifierWrapperBaseEEEPNS_12TDiagnosticsE(%"struct.sh::TTypeQualifier"* noalias sret, %"class.sh::TVector"* nocapture readonly dereferenceable(24), %"class.sh::TDiagnostics"*) unnamed_addr #0 {
  %4 = bitcast %"struct.sh::TTypeQualifier"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 -86, i64 128, i1 false)
  %5 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %5, align 8
  %7 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %7, i64 0, i32 1
  %9 = bitcast %"struct.sh::TTypeQualifier"* %0 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %9, align 4, !alias.scope !36
  %10 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 4, i32 0, i64 0
  %11 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 7
  %12 = bitcast i32* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 -1, i64 20, i1 false) #9, !alias.scope !36
  store i32 0, i32* %11, align 4, !alias.scope !36
  %13 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 8
  store i32 -1, i32* %13, align 4, !alias.scope !36
  %14 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 9
  store i8 0, i8* %14, align 4, !alias.scope !36
  %15 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 10
  store i8 0, i8* %15, align 1, !alias.scope !36
  %16 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 12
  store i32 0, i32* %16, align 4, !alias.scope !36
  %17 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 13
  store i32 0, i32* %17, align 4, !alias.scope !36
  %18 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 14
  store i32 -1, i32* %18, align 4, !alias.scope !36
  %19 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 15
  %20 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 20
  %21 = bitcast i32* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 20, i1 false) #9, !alias.scope !36
  store i32 -1, i32* %20, align 4, !alias.scope !36
  %22 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 21
  store i32 -1, i32* %22, align 4, !alias.scope !36
  %23 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 22
  store i8 0, i8* %23, align 4, !alias.scope !36
  %24 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 1
  %25 = bitcast %"struct.sh::TMemoryQualifier"* %24 to i40*
  store i40 0, i40* %25, align 4
  %26 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 2
  %27 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 3
  %28 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 6
  %29 = bitcast %"struct.sh::TSourceLoc"* %28 to i8*
  %30 = bitcast %"struct.sh::TSourceLoc"* %8 to i8*
  %31 = bitcast i32* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %31, i8 0, i64 10, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %29, i8* align 4 %30, i64 16, i1 false) #9
  %32 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1, i64 0, i32 0, i32 0, i32 1
  %33 = bitcast %"class.sh::TQualifierWrapperBase"*** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.sh::TVector"* %1 to i64*
  %36 = ptrtoint %"class.sh::TQualifierWrapperBase"** %6 to i64
  %37 = sub i64 %34, %36
  %38 = ashr exact i64 %37, 3
  %39 = icmp ugt i64 %38, 1
  br i1 %39, label %40, label %96

40:                                               ; preds = %3
  %41 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 1, i32 4
  %42 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 1, i32 2
  %43 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 1, i32 3
  %44 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 1, i32 1
  %45 = getelementptr inbounds %"struct.sh::TMemoryQualifier", %"struct.sh::TMemoryQualifier"* %24, i64 0, i32 0
  br label %46

46:                                               ; preds = %40, %88
  %47 = phi %"class.sh::TQualifierWrapperBase"** [ %6, %40 ], [ %95, %88 ]
  %48 = phi i64 [ 1, %40 ], [ %89, %88 ]
  %49 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %47, i64 %48
  %50 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %49, align 8
  %51 = bitcast %"class.sh::TQualifierWrapperBase"* %50 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %52 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %51, align 8
  %53 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %52, i64 2
  %54 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %53, align 8
  %55 = tail call i32 %54(%"class.sh::TQualifierWrapperBase"* %50) #9
  switch i32 %55, label %78 [
    i32 5, label %74
    i32 4, label %65
    i32 6, label %56
  ]

56:                                               ; preds = %46
  %57 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %50, i64 1
  %58 = bitcast %"class.sh::TQualifierWrapperBase"* %57 to i32*
  %59 = load i32, i32* %58, align 8
  switch i32 %59, label %88 [
    i32 67, label %60
    i32 68, label %61
    i32 69, label %62
    i32 70, label %63
    i32 71, label %64
  ]

60:                                               ; preds = %56
  store i8 1, i8* %45, align 4
  br label %88

61:                                               ; preds = %56
  store i8 1, i8* %44, align 1
  br label %88

62:                                               ; preds = %56
  store i8 1, i8* %42, align 2
  br label %88

63:                                               ; preds = %56
  store i8 1, i8* %43, align 1
  br label %88

64:                                               ; preds = %56
  store i8 1, i8* %41, align 4
  store i8 1, i8* %42, align 2
  br label %88

65:                                               ; preds = %46
  %66 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %50, i64 1
  %67 = bitcast %"class.sh::TQualifierWrapperBase"* %66 to i32*
  %68 = load i32, i32* %67, align 8
  %69 = load i32, i32* %27, align 4
  switch i32 %69, label %78 [
    i32 0, label %72
    i32 2, label %70
  ]

70:                                               ; preds = %65
  %71 = icmp eq i32 %68, 14
  br i1 %71, label %72, label %78

72:                                               ; preds = %65, %70
  %73 = phi i32 [ %68, %65 ], [ 17, %70 ]
  store i32 %73, i32* %27, align 4
  br label %88

74:                                               ; preds = %46
  %75 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %50, i64 1
  %76 = bitcast %"class.sh::TQualifierWrapperBase"* %75 to i32*
  %77 = load i32, i32* %76, align 8
  store i32 %77, i32* %26, align 4
  br label %88

78:                                               ; preds = %65, %70, %46
  %79 = bitcast %"class.sh::TQualifierWrapperBase"* %50 to { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)***
  %80 = load { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)**, { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)*** %79, align 8
  %81 = getelementptr inbounds { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)*, { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)** %80, i64 3
  %82 = load { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)*, { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)** %81, align 8
  %83 = tail call { i8*, i64 } %82(%"class.sh::TQualifierWrapperBase"* %50) #9
  %84 = extractvalue { i8*, i64 } %83, 0
  %85 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %50, i64 0, i32 1
  %86 = icmp eq i8* %84, null
  %87 = select i1 %86, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i8* %84
  tail call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* dereferenceable(16) %85, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.39, i64 0, i64 0), i8* %87) #9
  br label %96

88:                                               ; preds = %72, %64, %63, %62, %61, %60, %56, %74
  %89 = add nuw i64 %48, 1
  %90 = load i64, i64* %33, align 8
  %91 = load i64, i64* %35, align 8
  %92 = sub i64 %90, %91
  %93 = ashr exact i64 %92, 3
  %94 = icmp ult i64 %89, %93
  %95 = inttoptr i64 %91 to %"class.sh::TQualifierWrapperBase"**
  br i1 %94, label %46, label %96

96:                                               ; preds = %88, %3, %78
  %97 = load i32, i32* %27, align 4
  switch i32 %97, label %100 [
    i32 14, label %105
    i32 17, label %105
    i32 15, label %105
    i32 16, label %105
    i32 2, label %98
    i32 0, label %99
  ]

98:                                               ; preds = %96
  store i32 17, i32* %27, align 4
  br label %105

99:                                               ; preds = %96
  store i32 14, i32* %27, align 4
  br label %105

100:                                              ; preds = %96
  %101 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %5, align 8
  %102 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %101, align 8
  %103 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %102, i64 0, i32 1
  %104 = tail call i8* @_ZN2sh18getQualifierStringENS_10TQualifierE(i32 %97)
  tail call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* dereferenceable(16) %103, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.40, i64 0, i64 0), i8* %104) #9
  br label %105

105:                                              ; preds = %96, %96, %96, %96, %100, %99, %98
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2sh21TTypeQualifierBuilder24getVariableTypeQualifierEPNS_12TDiagnosticsE(%"struct.sh::TTypeQualifier"* noalias sret, %"class.sh::TTypeQualifierBuilder"* nocapture readonly, %"class.sh::TDiagnostics"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TVector", align 8
  %5 = tail call zeroext i1 @_ZNK2sh21TTypeQualifierBuilder20checkSequenceIsValidEPNS_12TDiagnosticsE(%"class.sh::TTypeQualifierBuilder"* %1, %"class.sh::TDiagnostics"* %2)
  br i1 %5, label %37, label %6

6:                                                ; preds = %3
  %7 = bitcast %"class.sh::TTypeQualifierBuilder"* %1 to %"class.sh::TStorageQualifierWrapper"***
  %8 = load %"class.sh::TStorageQualifierWrapper"**, %"class.sh::TStorageQualifierWrapper"*** %7, align 8
  %9 = load %"class.sh::TStorageQualifierWrapper"*, %"class.sh::TStorageQualifierWrapper"** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TStorageQualifierWrapper", %"class.sh::TStorageQualifierWrapper"* %9, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.sh::TStorageQualifierWrapper", %"class.sh::TStorageQualifierWrapper"* %9, i64 0, i32 0, i32 1
  %13 = bitcast %"struct.sh::TTypeQualifier"* %0 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %13, align 4, !alias.scope !39
  %14 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 4, i32 0, i64 0
  %15 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 7
  %16 = bitcast i32* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %16, i8 -1, i64 20, i1 false) #9, !alias.scope !39
  store i32 0, i32* %15, align 4, !alias.scope !39
  %17 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 8
  store i32 -1, i32* %17, align 4, !alias.scope !39
  %18 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 9
  store i8 0, i8* %18, align 4, !alias.scope !39
  %19 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 10
  store i8 0, i8* %19, align 1, !alias.scope !39
  %20 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 12
  store i32 0, i32* %20, align 4, !alias.scope !39
  %21 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 13
  store i32 0, i32* %21, align 4, !alias.scope !39
  %22 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 14
  store i32 -1, i32* %22, align 4, !alias.scope !39
  %23 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 15
  %24 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 20
  %25 = bitcast i32* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %25, i8 0, i64 20, i1 false) #9, !alias.scope !39
  store i32 -1, i32* %24, align 4, !alias.scope !39
  %26 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 21
  store i32 -1, i32* %26, align 4, !alias.scope !39
  %27 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 22
  store i8 0, i8* %27, align 4, !alias.scope !39
  %28 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 1
  %29 = bitcast %"struct.sh::TMemoryQualifier"* %28 to i40*
  store i40 0, i40* %29, align 4
  %30 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 2
  store i32 0, i32* %30, align 4
  %31 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 3
  store i32 %11, i32* %31, align 4
  %32 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 4
  store i8 0, i8* %32, align 4
  %33 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 5
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 6
  %35 = bitcast %"struct.sh::TSourceLoc"* %34 to i8*
  %36 = bitcast %"struct.sh::TSourceLoc"* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %35, i8* align 4 %36, i64 16, i1 false) #9
  br label %260

37:                                               ; preds = %3
  %38 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %1, i64 0, i32 1
  %39 = load i32, i32* %38, align 8
  %40 = icmp sgt i32 %39, 309
  br i1 %40, label %41, label %258

41:                                               ; preds = %37
  %42 = bitcast %"class.sh::TVector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %42) #9
  %43 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 0
  %44 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 1
  %45 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 24, i1 false) #9
  %46 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %47 = bitcast %"class.sh::TQualifierWrapperBase"*** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %"class.sh::TTypeQualifierBuilder"* %1 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %48, %50
  %52 = ashr exact i64 %51, 3
  %53 = icmp eq i64 %51, 0
  br i1 %53, label %251, label %54

54:                                               ; preds = %41
  %55 = icmp ugt i64 %52, 2305843009213693951
  br i1 %55, label %56, label %58

56:                                               ; preds = %54
  %57 = bitcast %"class.sh::TVector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %57) #10
  unreachable

58:                                               ; preds = %54
  %59 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %60 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %59, i64 %51) #9
  %61 = bitcast i8* %60 to %"class.sh::TQualifierWrapperBase"**
  %62 = bitcast %"class.sh::TQualifierWrapperBase"*** %44 to i8**
  store i8* %60, i8** %62, align 8
  %63 = bitcast %"class.sh::TVector"* %4 to i8**
  store i8* %60, i8** %63, align 8
  %64 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %61, i64 %52
  store %"class.sh::TQualifierWrapperBase"** %64, %"class.sh::TQualifierWrapperBase"*** %45, align 8
  %65 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %66 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %65, align 8
  %67 = bitcast %"class.sh::TQualifierWrapperBase"** %66 to i8*
  %68 = ptrtoint %"class.sh::TQualifierWrapperBase"** %66 to i64
  %69 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %46, align 8
  %70 = bitcast %"class.sh::TQualifierWrapperBase"*** %44 to i64*
  %71 = ptrtoint i8* %60 to i64
  %72 = icmp eq %"class.sh::TQualifierWrapperBase"** %66, %69
  br i1 %72, label %249, label %73

73:                                               ; preds = %58
  %74 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %69, i64 -1
  %75 = ptrtoint %"class.sh::TQualifierWrapperBase"** %74 to i64
  %76 = sub i64 %75, %68
  %77 = lshr i64 %76, 3
  %78 = add nuw nsw i64 %77, 1
  %79 = icmp ult i64 %78, 4
  br i1 %79, label %175, label %80

80:                                               ; preds = %73
  %81 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %69, i64 -1
  %82 = ptrtoint %"class.sh::TQualifierWrapperBase"** %81 to i64
  %83 = sub i64 %82, %68
  %84 = lshr i64 %83, 3
  %85 = add i64 %83, 8
  %86 = and i64 %85, -8
  %87 = getelementptr i8, i8* %60, i64 %86
  %88 = add nuw nsw i64 %84, 1
  %89 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %66, i64 %88
  %90 = bitcast %"class.sh::TQualifierWrapperBase"** %89 to i8*
  %91 = icmp ult i8* %60, %90
  %92 = icmp ugt i8* %87, %67
  %93 = and i1 %91, %92
  br i1 %93, label %175, label %94

94:                                               ; preds = %80
  %95 = and i64 %78, 4611686018427387900
  %96 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %61, i64 %95
  %97 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %66, i64 %95
  %98 = add nsw i64 %95, -4
  %99 = lshr exact i64 %98, 2
  %100 = add nuw nsw i64 %99, 1
  %101 = and i64 %100, 3
  %102 = icmp ult i64 %98, 12
  br i1 %102, label %154, label %103

103:                                              ; preds = %94
  %104 = sub nsw i64 %100, %101
  br label %105

105:                                              ; preds = %105, %103
  %106 = phi i64 [ 0, %103 ], [ %151, %105 ]
  %107 = phi i64 [ %104, %103 ], [ %152, %105 ]
  %108 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %61, i64 %106
  %109 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %66, i64 %106
  %110 = bitcast %"class.sh::TQualifierWrapperBase"** %109 to <2 x i64>*
  %111 = load <2 x i64>, <2 x i64>* %110, align 8, !alias.scope !42
  %112 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %109, i64 2
  %113 = bitcast %"class.sh::TQualifierWrapperBase"** %112 to <2 x i64>*
  %114 = load <2 x i64>, <2 x i64>* %113, align 8, !alias.scope !42
  %115 = bitcast %"class.sh::TQualifierWrapperBase"** %108 to <2 x i64>*
  store <2 x i64> %111, <2 x i64>* %115, align 8, !alias.scope !45, !noalias !42
  %116 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %108, i64 2
  %117 = bitcast %"class.sh::TQualifierWrapperBase"** %116 to <2 x i64>*
  store <2 x i64> %114, <2 x i64>* %117, align 8, !alias.scope !45, !noalias !42
  %118 = or i64 %106, 4
  %119 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %61, i64 %118
  %120 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %66, i64 %118
  %121 = bitcast %"class.sh::TQualifierWrapperBase"** %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !42
  %123 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %120, i64 2
  %124 = bitcast %"class.sh::TQualifierWrapperBase"** %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8, !alias.scope !42
  %126 = bitcast %"class.sh::TQualifierWrapperBase"** %119 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %126, align 8, !alias.scope !45, !noalias !42
  %127 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %119, i64 2
  %128 = bitcast %"class.sh::TQualifierWrapperBase"** %127 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %128, align 8, !alias.scope !45, !noalias !42
  %129 = or i64 %106, 8
  %130 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %61, i64 %129
  %131 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %66, i64 %129
  %132 = bitcast %"class.sh::TQualifierWrapperBase"** %131 to <2 x i64>*
  %133 = load <2 x i64>, <2 x i64>* %132, align 8, !alias.scope !42
  %134 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %131, i64 2
  %135 = bitcast %"class.sh::TQualifierWrapperBase"** %134 to <2 x i64>*
  %136 = load <2 x i64>, <2 x i64>* %135, align 8, !alias.scope !42
  %137 = bitcast %"class.sh::TQualifierWrapperBase"** %130 to <2 x i64>*
  store <2 x i64> %133, <2 x i64>* %137, align 8, !alias.scope !45, !noalias !42
  %138 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %130, i64 2
  %139 = bitcast %"class.sh::TQualifierWrapperBase"** %138 to <2 x i64>*
  store <2 x i64> %136, <2 x i64>* %139, align 8, !alias.scope !45, !noalias !42
  %140 = or i64 %106, 12
  %141 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %61, i64 %140
  %142 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %66, i64 %140
  %143 = bitcast %"class.sh::TQualifierWrapperBase"** %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 8, !alias.scope !42
  %145 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %142, i64 2
  %146 = bitcast %"class.sh::TQualifierWrapperBase"** %145 to <2 x i64>*
  %147 = load <2 x i64>, <2 x i64>* %146, align 8, !alias.scope !42
  %148 = bitcast %"class.sh::TQualifierWrapperBase"** %141 to <2 x i64>*
  store <2 x i64> %144, <2 x i64>* %148, align 8, !alias.scope !45, !noalias !42
  %149 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %141, i64 2
  %150 = bitcast %"class.sh::TQualifierWrapperBase"** %149 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %150, align 8, !alias.scope !45, !noalias !42
  %151 = add i64 %106, 16
  %152 = add i64 %107, -4
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %105, !llvm.loop !47

154:                                              ; preds = %105, %94
  %155 = phi i64 [ 0, %94 ], [ %151, %105 ]
  %156 = icmp eq i64 %101, 0
  br i1 %156, label %173, label %157

157:                                              ; preds = %154, %157
  %158 = phi i64 [ %170, %157 ], [ %155, %154 ]
  %159 = phi i64 [ %171, %157 ], [ %101, %154 ]
  %160 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %61, i64 %158
  %161 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %66, i64 %158
  %162 = bitcast %"class.sh::TQualifierWrapperBase"** %161 to <2 x i64>*
  %163 = load <2 x i64>, <2 x i64>* %162, align 8, !alias.scope !42
  %164 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %161, i64 2
  %165 = bitcast %"class.sh::TQualifierWrapperBase"** %164 to <2 x i64>*
  %166 = load <2 x i64>, <2 x i64>* %165, align 8, !alias.scope !42
  %167 = bitcast %"class.sh::TQualifierWrapperBase"** %160 to <2 x i64>*
  store <2 x i64> %163, <2 x i64>* %167, align 8, !alias.scope !45, !noalias !42
  %168 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %160, i64 2
  %169 = bitcast %"class.sh::TQualifierWrapperBase"** %168 to <2 x i64>*
  store <2 x i64> %166, <2 x i64>* %169, align 8, !alias.scope !45, !noalias !42
  %170 = add i64 %158, 4
  %171 = add i64 %159, -1
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %157, !llvm.loop !48

173:                                              ; preds = %157, %154
  %174 = icmp eq i64 %78, %95
  br i1 %174, label %246, label %175

175:                                              ; preds = %173, %80, %73
  %176 = phi %"class.sh::TQualifierWrapperBase"** [ %61, %80 ], [ %61, %73 ], [ %96, %173 ]
  %177 = phi %"class.sh::TQualifierWrapperBase"** [ %66, %80 ], [ %66, %73 ], [ %97, %173 ]
  %178 = ptrtoint %"class.sh::TQualifierWrapperBase"** %177 to i64
  %179 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %69, i64 -1
  %180 = ptrtoint %"class.sh::TQualifierWrapperBase"** %179 to i64
  %181 = sub i64 %180, %178
  %182 = lshr i64 %181, 3
  %183 = add nuw nsw i64 %182, 1
  %184 = and i64 %183, 7
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %197, label %186

186:                                              ; preds = %175, %186
  %187 = phi %"class.sh::TQualifierWrapperBase"** [ %194, %186 ], [ %176, %175 ]
  %188 = phi %"class.sh::TQualifierWrapperBase"** [ %193, %186 ], [ %177, %175 ]
  %189 = phi i64 [ %195, %186 ], [ %184, %175 ]
  %190 = bitcast %"class.sh::TQualifierWrapperBase"** %187 to i64*
  %191 = bitcast %"class.sh::TQualifierWrapperBase"** %188 to i64*
  %192 = load i64, i64* %191, align 8
  store i64 %192, i64* %190, align 8
  %193 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %188, i64 1
  %194 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %187, i64 1
  %195 = add i64 %189, -1
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %197, label %186, !llvm.loop !49

197:                                              ; preds = %186, %175
  %198 = phi %"class.sh::TQualifierWrapperBase"** [ undef, %175 ], [ %194, %186 ]
  %199 = phi %"class.sh::TQualifierWrapperBase"** [ %176, %175 ], [ %194, %186 ]
  %200 = phi %"class.sh::TQualifierWrapperBase"** [ %177, %175 ], [ %193, %186 ]
  %201 = icmp ult i64 %181, 56
  br i1 %201, label %246, label %202

202:                                              ; preds = %197, %202
  %203 = phi %"class.sh::TQualifierWrapperBase"** [ %244, %202 ], [ %199, %197 ]
  %204 = phi %"class.sh::TQualifierWrapperBase"** [ %243, %202 ], [ %200, %197 ]
  %205 = bitcast %"class.sh::TQualifierWrapperBase"** %203 to i64*
  %206 = bitcast %"class.sh::TQualifierWrapperBase"** %204 to i64*
  %207 = load i64, i64* %206, align 8
  store i64 %207, i64* %205, align 8
  %208 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %204, i64 1
  %209 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %203, i64 1
  %210 = bitcast %"class.sh::TQualifierWrapperBase"** %209 to i64*
  %211 = bitcast %"class.sh::TQualifierWrapperBase"** %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %210, align 8
  %213 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %204, i64 2
  %214 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %203, i64 2
  %215 = bitcast %"class.sh::TQualifierWrapperBase"** %214 to i64*
  %216 = bitcast %"class.sh::TQualifierWrapperBase"** %213 to i64*
  %217 = load i64, i64* %216, align 8
  store i64 %217, i64* %215, align 8
  %218 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %204, i64 3
  %219 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %203, i64 3
  %220 = bitcast %"class.sh::TQualifierWrapperBase"** %219 to i64*
  %221 = bitcast %"class.sh::TQualifierWrapperBase"** %218 to i64*
  %222 = load i64, i64* %221, align 8
  store i64 %222, i64* %220, align 8
  %223 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %204, i64 4
  %224 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %203, i64 4
  %225 = bitcast %"class.sh::TQualifierWrapperBase"** %224 to i64*
  %226 = bitcast %"class.sh::TQualifierWrapperBase"** %223 to i64*
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %225, align 8
  %228 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %204, i64 5
  %229 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %203, i64 5
  %230 = bitcast %"class.sh::TQualifierWrapperBase"** %229 to i64*
  %231 = bitcast %"class.sh::TQualifierWrapperBase"** %228 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %230, align 8
  %233 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %204, i64 6
  %234 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %203, i64 6
  %235 = bitcast %"class.sh::TQualifierWrapperBase"** %234 to i64*
  %236 = bitcast %"class.sh::TQualifierWrapperBase"** %233 to i64*
  %237 = load i64, i64* %236, align 8
  store i64 %237, i64* %235, align 8
  %238 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %204, i64 7
  %239 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %203, i64 7
  %240 = bitcast %"class.sh::TQualifierWrapperBase"** %239 to i64*
  %241 = bitcast %"class.sh::TQualifierWrapperBase"** %238 to i64*
  %242 = load i64, i64* %241, align 8
  store i64 %242, i64* %240, align 8
  %243 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %204, i64 8
  %244 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %203, i64 8
  %245 = icmp eq %"class.sh::TQualifierWrapperBase"** %243, %69
  br i1 %245, label %246, label %202, !llvm.loop !50

246:                                              ; preds = %197, %202, %173
  %247 = phi %"class.sh::TQualifierWrapperBase"** [ %96, %173 ], [ %198, %197 ], [ %244, %202 ]
  %248 = ptrtoint %"class.sh::TQualifierWrapperBase"** %247 to i64
  br label %249

249:                                              ; preds = %246, %58
  %250 = phi i64 [ %71, %58 ], [ %248, %246 ]
  store i64 %250, i64* %70, align 8
  br label %251

251:                                              ; preds = %41, %249
  call fastcc void @_ZN2sh12_GLOBAL__N_112SortSequenceERNS_7TVectorIPKNS_21TQualifierWrapperBaseEEE(%"class.sh::TVector"* nonnull dereferenceable(24) %4)
  call fastcc void @_ZN2sh12_GLOBAL__N_142GetVariableTypeQualifierFromSortedSequenceERKNS_7TVectorIPKNS_21TQualifierWrapperBaseEEEPNS_12TDiagnosticsE(%"struct.sh::TTypeQualifier"* sret %0, %"class.sh::TVector"* nonnull dereferenceable(24) %4, %"class.sh::TDiagnostics"* %2)
  %252 = load %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"*** %43, align 8
  %253 = icmp eq %"class.sh::TQualifierWrapperBase"** %252, null
  br i1 %253, label %257, label %254

254:                                              ; preds = %251
  %255 = ptrtoint %"class.sh::TQualifierWrapperBase"** %252 to i64
  %256 = bitcast %"class.sh::TQualifierWrapperBase"*** %44 to i64*
  store i64 %255, i64* %256, align 8
  br label %257

257:                                              ; preds = %251, %254
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %42) #9
  br label %260

258:                                              ; preds = %37
  %259 = getelementptr inbounds %"class.sh::TTypeQualifierBuilder", %"class.sh::TTypeQualifierBuilder"* %1, i64 0, i32 0
  tail call fastcc void @_ZN2sh12_GLOBAL__N_142GetVariableTypeQualifierFromSortedSequenceERKNS_7TVectorIPKNS_21TQualifierWrapperBaseEEEPNS_12TDiagnosticsE(%"struct.sh::TTypeQualifier"* sret %0, %"class.sh::TVector"* dereferenceable(24) %259, %"class.sh::TDiagnostics"* %2)
  br label %260

260:                                              ; preds = %258, %257, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_142GetVariableTypeQualifierFromSortedSequenceERKNS_7TVectorIPKNS_21TQualifierWrapperBaseEEEPNS_12TDiagnosticsE(%"struct.sh::TTypeQualifier"* noalias sret, %"class.sh::TVector"* nocapture readonly dereferenceable(24), %"class.sh::TDiagnostics"*) unnamed_addr #0 {
  %4 = alloca %"struct.sh::TLayoutQualifier", align 4
  %5 = alloca %"struct.sh::TLayoutQualifier", align 8
  %6 = alloca %"struct.sh::TLayoutQualifier", align 8
  %7 = bitcast %"struct.sh::TTypeQualifier"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 -86, i64 128, i1 false)
  %8 = bitcast %"class.sh::TVector"* %1 to %"class.sh::TStorageQualifierWrapper"***
  %9 = load %"class.sh::TStorageQualifierWrapper"**, %"class.sh::TStorageQualifierWrapper"*** %8, align 8
  %10 = load %"class.sh::TStorageQualifierWrapper"*, %"class.sh::TStorageQualifierWrapper"** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TStorageQualifierWrapper", %"class.sh::TStorageQualifierWrapper"* %10, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %"class.sh::TStorageQualifierWrapper", %"class.sh::TStorageQualifierWrapper"* %10, i64 0, i32 0, i32 1
  %14 = bitcast %"struct.sh::TTypeQualifier"* %0 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %14, align 4, !alias.scope !51
  %15 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 4, i32 0, i64 0
  %16 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 7
  %17 = bitcast i32* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 -1, i64 20, i1 false) #9, !alias.scope !51
  store i32 0, i32* %16, align 4, !alias.scope !51
  %18 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 8
  store i32 -1, i32* %18, align 4, !alias.scope !51
  %19 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 9
  store i8 0, i8* %19, align 4, !alias.scope !51
  %20 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 10
  store i8 0, i8* %20, align 1, !alias.scope !51
  %21 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 12
  store i32 0, i32* %21, align 4, !alias.scope !51
  %22 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 13
  store i32 0, i32* %22, align 4, !alias.scope !51
  %23 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 14
  store i32 -1, i32* %23, align 4, !alias.scope !51
  %24 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 15
  %25 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 20
  %26 = bitcast i32* %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %26, i8 0, i64 20, i1 false) #9, !alias.scope !51
  store i32 -1, i32* %25, align 4, !alias.scope !51
  %27 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 21
  store i32 -1, i32* %27, align 4, !alias.scope !51
  %28 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 0, i32 22
  store i8 0, i8* %28, align 4, !alias.scope !51
  %29 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 1
  %30 = bitcast %"struct.sh::TMemoryQualifier"* %29 to i40*
  store i40 0, i40* %30, align 4
  %31 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 2
  store i32 0, i32* %31, align 4
  %32 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 3
  store i32 %12, i32* %32, align 4
  %33 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 4
  store i8 0, i8* %33, align 4
  %34 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 5
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 6
  %36 = bitcast %"struct.sh::TSourceLoc"* %35 to i8*
  %37 = bitcast %"struct.sh::TSourceLoc"* %13 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 16, i1 false) #9
  %38 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %1, i64 0, i32 0, i32 0, i32 1
  %39 = bitcast %"class.sh::TQualifierWrapperBase"*** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.sh::TVector"* %1 to i64*
  %42 = ptrtoint %"class.sh::TStorageQualifierWrapper"** %9 to i64
  %43 = sub i64 %40, %42
  %44 = ashr exact i64 %43, 3
  %45 = icmp ugt i64 %44, 1
  br i1 %45, label %46, label %140

46:                                               ; preds = %3
  %47 = bitcast %"class.sh::TStorageQualifierWrapper"** %9 to %"class.sh::TQualifierWrapperBase"**
  %48 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 1, i32 4
  %49 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 1, i32 2
  %50 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 1, i32 3
  %51 = getelementptr inbounds %"struct.sh::TTypeQualifier", %"struct.sh::TTypeQualifier"* %0, i64 0, i32 1, i32 1
  %52 = getelementptr inbounds %"struct.sh::TMemoryQualifier", %"struct.sh::TMemoryQualifier"* %29, i64 0, i32 0
  %53 = bitcast %"struct.sh::TLayoutQualifier"* %4 to i8*
  %54 = bitcast %"struct.sh::TLayoutQualifier"* %5 to i8*
  %55 = bitcast %"struct.sh::TLayoutQualifier"* %6 to i8*
  br label %56

56:                                               ; preds = %46, %132
  %57 = phi %"class.sh::TQualifierWrapperBase"** [ %47, %46 ], [ %139, %132 ]
  %58 = phi i64 [ 1, %46 ], [ %133, %132 ]
  %59 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %57, i64 %58
  %60 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %59, align 8
  %61 = bitcast %"class.sh::TQualifierWrapperBase"* %60 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %62 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %61, align 8
  %63 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %62, i64 2
  %64 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %63, align 8
  %65 = call i32 %64(%"class.sh::TQualifierWrapperBase"* %60) #9
  switch i32 %65, label %122 [
    i32 0, label %66
    i32 1, label %67
    i32 2, label %68
    i32 3, label %75
    i32 4, label %79
    i32 5, label %109
    i32 6, label %113
  ]

66:                                               ; preds = %56
  store i8 1, i8* %33, align 4
  br label %132

67:                                               ; preds = %56
  store i8 1, i8* %34, align 1
  br label %132

68:                                               ; preds = %56
  %69 = load i32, i32* %32, align 4
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %71, label %122

71:                                               ; preds = %68
  %72 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %60, i64 1
  %73 = bitcast %"class.sh::TQualifierWrapperBase"* %72 to i32*
  %74 = load i32, i32* %73, align 8
  store i32 %74, i32* %32, align 4
  br label %132

75:                                               ; preds = %56
  call void @llvm.lifetime.start.p0i8(i64 92, i8* nonnull %53) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %54, i8* align 4 %7, i64 92, i1 false)
  %76 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %60, i64 1
  %77 = bitcast %"class.sh::TQualifierWrapperBase"* %76 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %55, i8* align 4 %77, i64 92, i1 false)
  %78 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %60, i64 0, i32 1
  call void @_ZN2sh20JoinLayoutQualifiersENS_16TLayoutQualifierES0_RKNS_10TSourceLocEPNS_12TDiagnosticsE(%"struct.sh::TLayoutQualifier"* nonnull sret %4, %"struct.sh::TLayoutQualifier"* nonnull byval(%"struct.sh::TLayoutQualifier") align 8 %5, %"struct.sh::TLayoutQualifier"* nonnull byval(%"struct.sh::TLayoutQualifier") align 8 %6, %"struct.sh::TSourceLoc"* dereferenceable(16) %78, %"class.sh::TDiagnostics"* %2)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* nonnull align 4 %53, i64 89, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 92, i8* nonnull %53) #9
  br label %132

79:                                               ; preds = %56
  %80 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %60, i64 1
  %81 = bitcast %"class.sh::TQualifierWrapperBase"* %80 to i32*
  %82 = load i32, i32* %81, align 8
  %83 = load i32, i32* %32, align 4
  switch i32 %83, label %122 [
    i32 1, label %84
    i32 0, label %85
    i32 39, label %88
    i32 40, label %92
    i32 41, label %96
    i32 42, label %100
    i32 43, label %103
    i32 8, label %106
  ]

84:                                               ; preds = %79
  store i32 %82, i32* %32, align 4
  br label %132

85:                                               ; preds = %79
  %86 = icmp eq i32 %82, 2
  br i1 %86, label %87, label %122

87:                                               ; preds = %85
  store i32 2, i32* %32, align 4
  br label %132

88:                                               ; preds = %79
  switch i32 %82, label %122 [
    i32 42, label %89
    i32 11, label %90
    i32 73, label %90
    i32 83, label %90
    i32 89, label %90
    i32 12, label %91
    i32 72, label %91
    i32 82, label %91
    i32 88, label %91
  ]

89:                                               ; preds = %88
  store i32 42, i32* %32, align 4
  br label %132

90:                                               ; preds = %88, %88, %88, %88
  store i32 44, i32* %32, align 4
  br label %132

91:                                               ; preds = %88, %88, %88, %88
  store i32 49, i32* %32, align 4
  br label %132

92:                                               ; preds = %79
  switch i32 %82, label %122 [
    i32 42, label %93
    i32 11, label %94
    i32 73, label %94
    i32 83, label %94
    i32 89, label %94
    i32 12, label %95
    i32 72, label %95
    i32 82, label %95
    i32 88, label %95
  ]

93:                                               ; preds = %92
  store i32 40, i32* %32, align 4
  br label %132

94:                                               ; preds = %92, %92, %92, %92
  store i32 45, i32* %32, align 4
  br label %132

95:                                               ; preds = %92, %92, %92, %92
  store i32 50, i32* %32, align 4
  br label %132

96:                                               ; preds = %79
  switch i32 %82, label %122 [
    i32 42, label %97
    i32 11, label %98
    i32 73, label %98
    i32 83, label %98
    i32 89, label %98
    i32 12, label %99
    i32 72, label %99
    i32 82, label %99
    i32 88, label %99
  ]

97:                                               ; preds = %96
  store i32 41, i32* %32, align 4
  br label %132

98:                                               ; preds = %96, %96, %96, %96
  store i32 46, i32* %32, align 4
  br label %132

99:                                               ; preds = %96, %96, %96, %96
  store i32 51, i32* %32, align 4
  br label %132

100:                                              ; preds = %79
  switch i32 %82, label %122 [
    i32 11, label %101
    i32 73, label %101
    i32 83, label %101
    i32 89, label %101
    i32 12, label %102
    i32 72, label %102
    i32 82, label %102
    i32 88, label %102
  ]

101:                                              ; preds = %100, %100, %100, %100
  store i32 47, i32* %32, align 4
  br label %132

102:                                              ; preds = %100, %100, %100, %100
  store i32 52, i32* %32, align 4
  br label %132

103:                                              ; preds = %79
  switch i32 %82, label %122 [
    i32 11, label %104
    i32 73, label %104
    i32 83, label %104
    i32 89, label %104
    i32 12, label %105
    i32 72, label %105
    i32 82, label %105
    i32 88, label %105
  ]

104:                                              ; preds = %103, %103, %103, %103
  store i32 48, i32* %32, align 4
  br label %132

105:                                              ; preds = %103, %103, %103, %103
  store i32 53, i32* %32, align 4
  br label %132

106:                                              ; preds = %79
  switch i32 %82, label %122 [
    i32 83, label %107
    i32 88, label %108
  ]

107:                                              ; preds = %106
  store i32 81, i32* %32, align 4
  br label %132

108:                                              ; preds = %106
  store i32 80, i32* %32, align 4
  br label %132

109:                                              ; preds = %56
  %110 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %60, i64 1
  %111 = bitcast %"class.sh::TQualifierWrapperBase"* %110 to i32*
  %112 = load i32, i32* %111, align 8
  store i32 %112, i32* %31, align 4
  br label %132

113:                                              ; preds = %56
  %114 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %60, i64 1
  %115 = bitcast %"class.sh::TQualifierWrapperBase"* %114 to i32*
  %116 = load i32, i32* %115, align 8
  switch i32 %116, label %132 [
    i32 67, label %117
    i32 68, label %118
    i32 69, label %119
    i32 70, label %120
    i32 71, label %121
  ]

117:                                              ; preds = %113
  store i8 1, i8* %52, align 4
  br label %132

118:                                              ; preds = %113
  store i8 1, i8* %51, align 1
  br label %132

119:                                              ; preds = %113
  store i8 1, i8* %49, align 2
  br label %132

120:                                              ; preds = %113
  store i8 1, i8* %50, align 1
  br label %132

121:                                              ; preds = %113
  store i8 1, i8* %48, align 4
  store i8 1, i8* %49, align 2
  br label %132

122:                                              ; preds = %106, %103, %100, %96, %92, %88, %85, %79, %68, %56
  %123 = bitcast %"class.sh::TQualifierWrapperBase"* %60 to { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)***
  %124 = load { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)**, { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)*** %123, align 8
  %125 = getelementptr inbounds { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)*, { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)** %124, i64 3
  %126 = load { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)*, { i8*, i64 } (%"class.sh::TQualifierWrapperBase"*)** %125, align 8
  %127 = call { i8*, i64 } %126(%"class.sh::TQualifierWrapperBase"* %60) #9
  %128 = extractvalue { i8*, i64 } %127, 0
  %129 = getelementptr inbounds %"class.sh::TQualifierWrapperBase", %"class.sh::TQualifierWrapperBase"* %60, i64 0, i32 1
  %130 = icmp eq i8* %128, null
  %131 = select i1 %130, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i8* %128
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* dereferenceable(16) %129, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.114, i64 0, i64 0), i8* %131) #9
  br label %140

132:                                              ; preds = %84, %87, %91, %90, %89, %95, %94, %93, %99, %98, %97, %102, %101, %105, %104, %108, %107, %121, %120, %119, %118, %117, %113, %66, %67, %71, %75, %109
  %133 = add nuw i64 %58, 1
  %134 = load i64, i64* %39, align 8
  %135 = load i64, i64* %41, align 8
  %136 = sub i64 %134, %135
  %137 = ashr exact i64 %136, 3
  %138 = icmp ult i64 %133, %137
  %139 = inttoptr i64 %135 to %"class.sh::TQualifierWrapperBase"**
  br i1 %138, label %56, label %140

140:                                              ; preds = %132, %3, %122
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh26TInvariantQualifierWrapperD0Ev(%"class.sh::TInvariantQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK2sh26TInvariantQualifierWrapper7getTypeEv(%"class.sh::TInvariantQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i64 } @_ZNK2sh26TInvariantQualifierWrapper18getQualifierStringEv(%"class.sh::TInvariantQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret { i8*, i64 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.115, i64 0, i64 0), i64 9 }
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh24TPreciseQualifierWrapperD0Ev(%"class.sh::TPreciseQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK2sh24TPreciseQualifierWrapper7getTypeEv(%"class.sh::TPreciseQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i64 } @_ZNK2sh24TPreciseQualifierWrapper18getQualifierStringEv(%"class.sh::TPreciseQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.96, i64 0, i64 0), i64 7 }
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh30TInterpolationQualifierWrapperD0Ev(%"class.sh::TInterpolationQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK2sh30TInterpolationQualifierWrapper7getTypeEv(%"class.sh::TInterpolationQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret i32 2
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i64 } @_ZNK2sh30TInterpolationQualifierWrapper18getQualifierStringEv(%"class.sh::TInterpolationQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TInterpolationQualifierWrapper", %"class.sh::TInterpolationQualifierWrapper"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = tail call i8* @_ZN2sh18getQualifierStringENS_10TQualifierE(i32 %3)
  %5 = icmp eq i8* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1, %6
  %7 = phi i64 [ %11, %6 ], [ 0, %1 ]
  %8 = getelementptr inbounds i8, i8* %4, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = add i64 %7, 1
  br i1 %10, label %12, label %6

12:                                               ; preds = %6, %1
  %13 = phi i64 [ 0, %1 ], [ %7, %6 ]
  %14 = insertvalue { i8*, i64 } undef, i8* %4, 0
  %15 = insertvalue { i8*, i64 } %14, i64 %13, 1
  ret { i8*, i64 } %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh23TLayoutQualifierWrapperD0Ev(%"class.sh::TLayoutQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK2sh23TLayoutQualifierWrapper7getTypeEv(%"class.sh::TLayoutQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret i32 3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i64 } @_ZNK2sh23TLayoutQualifierWrapper18getQualifierStringEv(%"class.sh::TLayoutQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.116, i64 0, i64 0), i64 6 }
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh21TQualifierWrapperBaseD2Ev(%"class.sh::TQualifierWrapperBase"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh24TStorageQualifierWrapperD0Ev(%"class.sh::TStorageQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK2sh24TStorageQualifierWrapper7getTypeEv(%"class.sh::TStorageQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret i32 4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i64 } @_ZNK2sh24TStorageQualifierWrapper18getQualifierStringEv(%"class.sh::TStorageQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TStorageQualifierWrapper", %"class.sh::TStorageQualifierWrapper"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = tail call i8* @_ZN2sh18getQualifierStringENS_10TQualifierE(i32 %3)
  %5 = icmp eq i8* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1, %6
  %7 = phi i64 [ %11, %6 ], [ 0, %1 ]
  %8 = getelementptr inbounds i8, i8* %4, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = add i64 %7, 1
  br i1 %10, label %12, label %6

12:                                               ; preds = %6, %1
  %13 = phi i64 [ 0, %1 ], [ %7, %6 ]
  %14 = insertvalue { i8*, i64 } undef, i8* %4, 0
  %15 = insertvalue { i8*, i64 } %14, i64 %13, 1
  ret { i8*, i64 } %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh26TPrecisionQualifierWrapperD0Ev(%"class.sh::TPrecisionQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK2sh26TPrecisionQualifierWrapper7getTypeEv(%"class.sh::TPrecisionQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret i32 5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i64 } @_ZNK2sh26TPrecisionQualifierWrapper18getQualifierStringEv(%"class.sh::TPrecisionQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TPrecisionQualifierWrapper", %"class.sh::TPrecisionQualifierWrapper"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, -1
  %5 = icmp ult i32 %4, 3
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = sext i32 %4 to i64
  %8 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table._ZNK2sh26TPrecisionQualifierWrapper18getQualifierStringEv, i64 0, i64 %7
  %9 = load i8*, i8** %8, align 8
  br label %10

10:                                               ; preds = %1, %6
  %11 = phi i8* [ %9, %6 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.118, i64 0, i64 0), %1 ]
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ %17, %12 ], [ 0, %10 ]
  %14 = getelementptr inbounds i8, i8* %11, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  %17 = add i64 %13, 1
  br i1 %16, label %18, label %12

18:                                               ; preds = %12
  %19 = insertvalue { i8*, i64 } undef, i8* %11, 0
  %20 = insertvalue { i8*, i64 } %19, i64 %13, 1
  ret { i8*, i64 } %20
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh23TMemoryQualifierWrapperD0Ev(%"class.sh::TMemoryQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK2sh23TMemoryQualifierWrapper7getTypeEv(%"class.sh::TMemoryQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  ret i32 6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i64 } @_ZNK2sh23TMemoryQualifierWrapper18getQualifierStringEv(%"class.sh::TMemoryQualifierWrapper"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TMemoryQualifierWrapper", %"class.sh::TMemoryQualifierWrapper"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = tail call i8* @_ZN2sh18getQualifierStringENS_10TQualifierE(i32 %3)
  %5 = icmp eq i8* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1, %6
  %7 = phi i64 [ %11, %6 ], [ 0, %1 ]
  %8 = getelementptr inbounds i8, i8* %4, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = add i64 %7, 1
  br i1 %10, label %12, label %6

12:                                               ; preds = %6, %1
  %13 = phi i64 [ 0, %1 ], [ %7, %6 ]
  %14 = insertvalue { i8*, i64 } undef, i8* %4, 0
  %15 = insertvalue { i8*, i64 } %14, i64 %13, 1
  ret { i8*, i64 } %15
}

declare dereferenceable(24) %"class.sh::ImmutableStringBuilder"* @_ZN2sh22ImmutableStringBuilderlsERKNS_15ImmutableStringE(%"class.sh::ImmutableStringBuilder"*, %"class.sh::ImmutableString"* dereferenceable(16)) local_unnamed_addr #2

declare { i8*, i64 } @_ZN2sh22ImmutableStringBuildercvNS_15ImmutableStringEEv(%"class.sh::ImmutableStringBuilder"*) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__113__stable_sortIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"**, %"struct.sh::(anonymous namespace)::QualifierComparator"* dereferenceable(1), i64, %"class.sh::TQualifierWrapperBase"**, i64) unnamed_addr #0 {
  switch i64 %3, label %27 [
    i64 0, label %460
    i64 1, label %460
    i64 2, label %7
  ]

7:                                                ; preds = %6
  %8 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %1, i64 -1
  %9 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %8, align 8
  %10 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %0, align 8
  %11 = bitcast %"class.sh::TQualifierWrapperBase"* %9 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %12 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %11, align 8
  %13 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %12, i64 4
  %14 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %13, align 8
  %15 = tail call i32 %14(%"class.sh::TQualifierWrapperBase"* %9) #9
  %16 = bitcast %"class.sh::TQualifierWrapperBase"* %10 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %17 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %16, align 8
  %18 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %17, i64 4
  %19 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %18, align 8
  %20 = tail call i32 %19(%"class.sh::TQualifierWrapperBase"* %10) #9
  %21 = icmp ult i32 %15, %20
  br i1 %21, label %22, label %460

22:                                               ; preds = %7
  %23 = bitcast %"class.sh::TQualifierWrapperBase"** %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.sh::TQualifierWrapperBase"** %8 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %23, align 8
  store i64 %24, i64* %25, align 8
  br label %460

27:                                               ; preds = %6
  %28 = icmp slt i64 %3, 129
  br i1 %28, label %29, label %66

29:                                               ; preds = %27
  %30 = icmp eq %"class.sh::TQualifierWrapperBase"** %0, %1
  br i1 %30, label %460, label %31

31:                                               ; preds = %29
  %32 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %0, i64 1
  %33 = icmp eq %"class.sh::TQualifierWrapperBase"** %32, %1
  br i1 %33, label %460, label %34

34:                                               ; preds = %31, %56
  %35 = phi %"class.sh::TQualifierWrapperBase"** [ %59, %56 ], [ %32, %31 ]
  %36 = bitcast %"class.sh::TQualifierWrapperBase"** %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = inttoptr i64 %37 to %"class.sh::TQualifierWrapperBase"*
  %39 = icmp eq %"class.sh::TQualifierWrapperBase"** %35, %0
  br i1 %39, label %56, label %40

40:                                               ; preds = %34
  %41 = inttoptr i64 %37 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  br label %42

42:                                               ; preds = %61, %40
  %43 = phi %"class.sh::TQualifierWrapperBase"** [ %35, %40 ], [ %44, %61 ]
  %44 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %43, i64 -1
  %45 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %44, align 8
  %46 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %41, align 8
  %47 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %46, i64 4
  %48 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %47, align 8
  %49 = tail call i32 %48(%"class.sh::TQualifierWrapperBase"* %38) #9
  %50 = bitcast %"class.sh::TQualifierWrapperBase"* %45 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %51 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %50, align 8
  %52 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %51, i64 4
  %53 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %52, align 8
  %54 = tail call i32 %53(%"class.sh::TQualifierWrapperBase"* %45) #9
  %55 = icmp ult i32 %49, %54
  br i1 %55, label %61, label %56

56:                                               ; preds = %61, %42, %34
  %57 = phi %"class.sh::TQualifierWrapperBase"** [ %0, %34 ], [ %43, %42 ], [ %0, %61 ]
  %58 = bitcast %"class.sh::TQualifierWrapperBase"** %57 to i64*
  store i64 %37, i64* %58, align 8
  %59 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %35, i64 1
  %60 = icmp eq %"class.sh::TQualifierWrapperBase"** %59, %1
  br i1 %60, label %460, label %34

61:                                               ; preds = %42
  %62 = bitcast %"class.sh::TQualifierWrapperBase"** %44 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = bitcast %"class.sh::TQualifierWrapperBase"** %43 to i64*
  store i64 %63, i64* %64, align 8
  %65 = icmp eq %"class.sh::TQualifierWrapperBase"** %44, %0
  br i1 %65, label %56, label %42

66:                                               ; preds = %27
  %67 = lshr i64 %3, 1
  %68 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %0, i64 %67
  %69 = icmp sgt i64 %3, %5
  br i1 %69, label %458, label %70

70:                                               ; preds = %66
  tail call fastcc void @_ZNSt3__118__stable_sort_moveIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeE(%"class.sh::TQualifierWrapperBase"** %0, %"class.sh::TQualifierWrapperBase"** %68, %"struct.sh::(anonymous namespace)::QualifierComparator"* dereferenceable(1) %2, i64 %67, %"class.sh::TQualifierWrapperBase"** %4)
  %71 = sub nsw i64 %3, %67
  %72 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %4, i64 %67
  tail call fastcc void @_ZNSt3__118__stable_sort_moveIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeE(%"class.sh::TQualifierWrapperBase"** %68, %"class.sh::TQualifierWrapperBase"** %1, %"struct.sh::(anonymous namespace)::QualifierComparator"* dereferenceable(1) %2, i64 %71, %"class.sh::TQualifierWrapperBase"** %72)
  %73 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %4, i64 %3
  br label %205

74:                                               ; preds = %409
  %75 = ptrtoint %"class.sh::TQualifierWrapperBase"** %410 to i64
  %76 = icmp eq %"class.sh::TQualifierWrapperBase"** %410, %73
  br i1 %76, label %460, label %77

77:                                               ; preds = %74
  %78 = add i64 %3, -1
  %79 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %4, i64 %78
  %80 = ptrtoint %"class.sh::TQualifierWrapperBase"** %79 to i64
  %81 = sub i64 %80, %75
  %82 = lshr i64 %81, 3
  %83 = add nuw nsw i64 %82, 1
  %84 = icmp ult i64 %83, 4
  br i1 %84, label %85, label %112

85:                                               ; preds = %203, %112, %77
  %86 = phi %"class.sh::TQualifierWrapperBase"** [ %410, %112 ], [ %410, %77 ], [ %126, %203 ]
  %87 = phi %"class.sh::TQualifierWrapperBase"** [ %412, %112 ], [ %412, %77 ], [ %127, %203 ]
  %88 = ptrtoint %"class.sh::TQualifierWrapperBase"** %86 to i64
  %89 = add i64 %3, -1
  %90 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %4, i64 %89
  %91 = ptrtoint %"class.sh::TQualifierWrapperBase"** %90 to i64
  %92 = sub i64 %91, %88
  %93 = lshr i64 %92, 3
  %94 = add nuw nsw i64 %93, 1
  %95 = and i64 %94, 7
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %108, label %97

97:                                               ; preds = %85, %97
  %98 = phi %"class.sh::TQualifierWrapperBase"** [ %104, %97 ], [ %86, %85 ]
  %99 = phi %"class.sh::TQualifierWrapperBase"** [ %105, %97 ], [ %87, %85 ]
  %100 = phi i64 [ %106, %97 ], [ %95, %85 ]
  %101 = bitcast %"class.sh::TQualifierWrapperBase"** %98 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %"class.sh::TQualifierWrapperBase"** %99 to i64*
  store i64 %102, i64* %103, align 8
  %104 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %98, i64 1
  %105 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %99, i64 1
  %106 = add i64 %100, -1
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %97, !llvm.loop !54

108:                                              ; preds = %97, %85
  %109 = phi %"class.sh::TQualifierWrapperBase"** [ %86, %85 ], [ %104, %97 ]
  %110 = phi %"class.sh::TQualifierWrapperBase"** [ %87, %85 ], [ %105, %97 ]
  %111 = icmp ult i64 %92, 56
  br i1 %111, label %460, label %414

112:                                              ; preds = %77
  %113 = add i64 %3, -1
  %114 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %4, i64 %113
  %115 = ptrtoint %"class.sh::TQualifierWrapperBase"** %114 to i64
  %116 = sub i64 %115, %75
  %117 = lshr i64 %116, 3
  %118 = add nuw nsw i64 %117, 1
  %119 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %412, i64 %118
  %120 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %410, i64 %118
  %121 = icmp ult %"class.sh::TQualifierWrapperBase"** %412, %120
  %122 = icmp ult %"class.sh::TQualifierWrapperBase"** %410, %119
  %123 = and i1 %121, %122
  br i1 %123, label %85, label %124

124:                                              ; preds = %112
  %125 = and i64 %83, 4611686018427387900
  %126 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %410, i64 %125
  %127 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %412, i64 %125
  %128 = add nsw i64 %125, -4
  %129 = lshr exact i64 %128, 2
  %130 = add nuw nsw i64 %129, 1
  %131 = and i64 %130, 3
  %132 = icmp ult i64 %128, 12
  br i1 %132, label %184, label %133

133:                                              ; preds = %124
  %134 = sub nsw i64 %130, %131
  br label %135

135:                                              ; preds = %135, %133
  %136 = phi i64 [ 0, %133 ], [ %181, %135 ]
  %137 = phi i64 [ %134, %133 ], [ %182, %135 ]
  %138 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %410, i64 %136
  %139 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %412, i64 %136
  %140 = bitcast %"class.sh::TQualifierWrapperBase"** %138 to <2 x i64>*
  %141 = load <2 x i64>, <2 x i64>* %140, align 8, !alias.scope !55
  %142 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %138, i64 2
  %143 = bitcast %"class.sh::TQualifierWrapperBase"** %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 8, !alias.scope !55
  %145 = bitcast %"class.sh::TQualifierWrapperBase"** %139 to <2 x i64>*
  store <2 x i64> %141, <2 x i64>* %145, align 8, !alias.scope !58, !noalias !55
  %146 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %139, i64 2
  %147 = bitcast %"class.sh::TQualifierWrapperBase"** %146 to <2 x i64>*
  store <2 x i64> %144, <2 x i64>* %147, align 8, !alias.scope !58, !noalias !55
  %148 = or i64 %136, 4
  %149 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %410, i64 %148
  %150 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %412, i64 %148
  %151 = bitcast %"class.sh::TQualifierWrapperBase"** %149 to <2 x i64>*
  %152 = load <2 x i64>, <2 x i64>* %151, align 8, !alias.scope !55
  %153 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %149, i64 2
  %154 = bitcast %"class.sh::TQualifierWrapperBase"** %153 to <2 x i64>*
  %155 = load <2 x i64>, <2 x i64>* %154, align 8, !alias.scope !55
  %156 = bitcast %"class.sh::TQualifierWrapperBase"** %150 to <2 x i64>*
  store <2 x i64> %152, <2 x i64>* %156, align 8, !alias.scope !58, !noalias !55
  %157 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %150, i64 2
  %158 = bitcast %"class.sh::TQualifierWrapperBase"** %157 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %158, align 8, !alias.scope !58, !noalias !55
  %159 = or i64 %136, 8
  %160 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %410, i64 %159
  %161 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %412, i64 %159
  %162 = bitcast %"class.sh::TQualifierWrapperBase"** %160 to <2 x i64>*
  %163 = load <2 x i64>, <2 x i64>* %162, align 8, !alias.scope !55
  %164 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %160, i64 2
  %165 = bitcast %"class.sh::TQualifierWrapperBase"** %164 to <2 x i64>*
  %166 = load <2 x i64>, <2 x i64>* %165, align 8, !alias.scope !55
  %167 = bitcast %"class.sh::TQualifierWrapperBase"** %161 to <2 x i64>*
  store <2 x i64> %163, <2 x i64>* %167, align 8, !alias.scope !58, !noalias !55
  %168 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %161, i64 2
  %169 = bitcast %"class.sh::TQualifierWrapperBase"** %168 to <2 x i64>*
  store <2 x i64> %166, <2 x i64>* %169, align 8, !alias.scope !58, !noalias !55
  %170 = or i64 %136, 12
  %171 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %410, i64 %170
  %172 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %412, i64 %170
  %173 = bitcast %"class.sh::TQualifierWrapperBase"** %171 to <2 x i64>*
  %174 = load <2 x i64>, <2 x i64>* %173, align 8, !alias.scope !55
  %175 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %171, i64 2
  %176 = bitcast %"class.sh::TQualifierWrapperBase"** %175 to <2 x i64>*
  %177 = load <2 x i64>, <2 x i64>* %176, align 8, !alias.scope !55
  %178 = bitcast %"class.sh::TQualifierWrapperBase"** %172 to <2 x i64>*
  store <2 x i64> %174, <2 x i64>* %178, align 8, !alias.scope !58, !noalias !55
  %179 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %172, i64 2
  %180 = bitcast %"class.sh::TQualifierWrapperBase"** %179 to <2 x i64>*
  store <2 x i64> %177, <2 x i64>* %180, align 8, !alias.scope !58, !noalias !55
  %181 = add i64 %136, 16
  %182 = add i64 %137, -4
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %135, !llvm.loop !60

184:                                              ; preds = %135, %124
  %185 = phi i64 [ 0, %124 ], [ %181, %135 ]
  %186 = icmp eq i64 %131, 0
  br i1 %186, label %203, label %187

187:                                              ; preds = %184, %187
  %188 = phi i64 [ %200, %187 ], [ %185, %184 ]
  %189 = phi i64 [ %201, %187 ], [ %131, %184 ]
  %190 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %410, i64 %188
  %191 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %412, i64 %188
  %192 = bitcast %"class.sh::TQualifierWrapperBase"** %190 to <2 x i64>*
  %193 = load <2 x i64>, <2 x i64>* %192, align 8, !alias.scope !55
  %194 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %190, i64 2
  %195 = bitcast %"class.sh::TQualifierWrapperBase"** %194 to <2 x i64>*
  %196 = load <2 x i64>, <2 x i64>* %195, align 8, !alias.scope !55
  %197 = bitcast %"class.sh::TQualifierWrapperBase"** %191 to <2 x i64>*
  store <2 x i64> %193, <2 x i64>* %197, align 8, !alias.scope !58, !noalias !55
  %198 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %191, i64 2
  %199 = bitcast %"class.sh::TQualifierWrapperBase"** %198 to <2 x i64>*
  store <2 x i64> %196, <2 x i64>* %199, align 8, !alias.scope !58, !noalias !55
  %200 = add i64 %188, 4
  %201 = add i64 %189, -1
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %187, !llvm.loop !61

203:                                              ; preds = %187, %184
  %204 = icmp eq i64 %83, %125
  br i1 %204, label %460, label %85

205:                                              ; preds = %70, %409
  %206 = phi %"class.sh::TQualifierWrapperBase"** [ %411, %409 ], [ %4, %70 ]
  %207 = phi %"class.sh::TQualifierWrapperBase"** [ %410, %409 ], [ %72, %70 ]
  %208 = phi %"class.sh::TQualifierWrapperBase"** [ %412, %409 ], [ %0, %70 ]
  %209 = icmp eq %"class.sh::TQualifierWrapperBase"** %207, %73
  br i1 %209, label %210, label %385

210:                                              ; preds = %205
  %211 = ptrtoint %"class.sh::TQualifierWrapperBase"** %206 to i64
  %212 = icmp eq %"class.sh::TQualifierWrapperBase"** %206, %72
  br i1 %212, label %460, label %213

213:                                              ; preds = %210
  %214 = add nsw i64 %67, -1
  %215 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %4, i64 %214
  %216 = ptrtoint %"class.sh::TQualifierWrapperBase"** %215 to i64
  %217 = sub i64 %216, %211
  %218 = lshr i64 %217, 3
  %219 = add nuw nsw i64 %218, 1
  %220 = icmp ult i64 %219, 4
  br i1 %220, label %314, label %221

221:                                              ; preds = %213
  %222 = add nsw i64 %67, -1
  %223 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %4, i64 %222
  %224 = ptrtoint %"class.sh::TQualifierWrapperBase"** %223 to i64
  %225 = sub i64 %224, %211
  %226 = lshr i64 %225, 3
  %227 = add nuw nsw i64 %226, 1
  %228 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %208, i64 %227
  %229 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %206, i64 %227
  %230 = icmp ult %"class.sh::TQualifierWrapperBase"** %208, %229
  %231 = icmp ult %"class.sh::TQualifierWrapperBase"** %206, %228
  %232 = and i1 %230, %231
  br i1 %232, label %314, label %233

233:                                              ; preds = %221
  %234 = and i64 %219, 4611686018427387900
  %235 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %206, i64 %234
  %236 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %208, i64 %234
  %237 = add nsw i64 %234, -4
  %238 = lshr exact i64 %237, 2
  %239 = add nuw nsw i64 %238, 1
  %240 = and i64 %239, 3
  %241 = icmp ult i64 %237, 12
  br i1 %241, label %293, label %242

242:                                              ; preds = %233
  %243 = sub nsw i64 %239, %240
  br label %244

244:                                              ; preds = %244, %242
  %245 = phi i64 [ 0, %242 ], [ %290, %244 ]
  %246 = phi i64 [ %243, %242 ], [ %291, %244 ]
  %247 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %206, i64 %245
  %248 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %208, i64 %245
  %249 = bitcast %"class.sh::TQualifierWrapperBase"** %247 to <2 x i64>*
  %250 = load <2 x i64>, <2 x i64>* %249, align 8, !alias.scope !62
  %251 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %247, i64 2
  %252 = bitcast %"class.sh::TQualifierWrapperBase"** %251 to <2 x i64>*
  %253 = load <2 x i64>, <2 x i64>* %252, align 8, !alias.scope !62
  %254 = bitcast %"class.sh::TQualifierWrapperBase"** %248 to <2 x i64>*
  store <2 x i64> %250, <2 x i64>* %254, align 8, !alias.scope !65, !noalias !62
  %255 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %248, i64 2
  %256 = bitcast %"class.sh::TQualifierWrapperBase"** %255 to <2 x i64>*
  store <2 x i64> %253, <2 x i64>* %256, align 8, !alias.scope !65, !noalias !62
  %257 = or i64 %245, 4
  %258 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %206, i64 %257
  %259 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %208, i64 %257
  %260 = bitcast %"class.sh::TQualifierWrapperBase"** %258 to <2 x i64>*
  %261 = load <2 x i64>, <2 x i64>* %260, align 8, !alias.scope !62
  %262 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %258, i64 2
  %263 = bitcast %"class.sh::TQualifierWrapperBase"** %262 to <2 x i64>*
  %264 = load <2 x i64>, <2 x i64>* %263, align 8, !alias.scope !62
  %265 = bitcast %"class.sh::TQualifierWrapperBase"** %259 to <2 x i64>*
  store <2 x i64> %261, <2 x i64>* %265, align 8, !alias.scope !65, !noalias !62
  %266 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %259, i64 2
  %267 = bitcast %"class.sh::TQualifierWrapperBase"** %266 to <2 x i64>*
  store <2 x i64> %264, <2 x i64>* %267, align 8, !alias.scope !65, !noalias !62
  %268 = or i64 %245, 8
  %269 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %206, i64 %268
  %270 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %208, i64 %268
  %271 = bitcast %"class.sh::TQualifierWrapperBase"** %269 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 8, !alias.scope !62
  %273 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %269, i64 2
  %274 = bitcast %"class.sh::TQualifierWrapperBase"** %273 to <2 x i64>*
  %275 = load <2 x i64>, <2 x i64>* %274, align 8, !alias.scope !62
  %276 = bitcast %"class.sh::TQualifierWrapperBase"** %270 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %276, align 8, !alias.scope !65, !noalias !62
  %277 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %270, i64 2
  %278 = bitcast %"class.sh::TQualifierWrapperBase"** %277 to <2 x i64>*
  store <2 x i64> %275, <2 x i64>* %278, align 8, !alias.scope !65, !noalias !62
  %279 = or i64 %245, 12
  %280 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %206, i64 %279
  %281 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %208, i64 %279
  %282 = bitcast %"class.sh::TQualifierWrapperBase"** %280 to <2 x i64>*
  %283 = load <2 x i64>, <2 x i64>* %282, align 8, !alias.scope !62
  %284 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %280, i64 2
  %285 = bitcast %"class.sh::TQualifierWrapperBase"** %284 to <2 x i64>*
  %286 = load <2 x i64>, <2 x i64>* %285, align 8, !alias.scope !62
  %287 = bitcast %"class.sh::TQualifierWrapperBase"** %281 to <2 x i64>*
  store <2 x i64> %283, <2 x i64>* %287, align 8, !alias.scope !65, !noalias !62
  %288 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %281, i64 2
  %289 = bitcast %"class.sh::TQualifierWrapperBase"** %288 to <2 x i64>*
  store <2 x i64> %286, <2 x i64>* %289, align 8, !alias.scope !65, !noalias !62
  %290 = add i64 %245, 16
  %291 = add i64 %246, -4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %293, label %244, !llvm.loop !67

293:                                              ; preds = %244, %233
  %294 = phi i64 [ 0, %233 ], [ %290, %244 ]
  %295 = icmp eq i64 %240, 0
  br i1 %295, label %312, label %296

296:                                              ; preds = %293, %296
  %297 = phi i64 [ %309, %296 ], [ %294, %293 ]
  %298 = phi i64 [ %310, %296 ], [ %240, %293 ]
  %299 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %206, i64 %297
  %300 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %208, i64 %297
  %301 = bitcast %"class.sh::TQualifierWrapperBase"** %299 to <2 x i64>*
  %302 = load <2 x i64>, <2 x i64>* %301, align 8, !alias.scope !62
  %303 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %299, i64 2
  %304 = bitcast %"class.sh::TQualifierWrapperBase"** %303 to <2 x i64>*
  %305 = load <2 x i64>, <2 x i64>* %304, align 8, !alias.scope !62
  %306 = bitcast %"class.sh::TQualifierWrapperBase"** %300 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %306, align 8, !alias.scope !65, !noalias !62
  %307 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %300, i64 2
  %308 = bitcast %"class.sh::TQualifierWrapperBase"** %307 to <2 x i64>*
  store <2 x i64> %305, <2 x i64>* %308, align 8, !alias.scope !65, !noalias !62
  %309 = add i64 %297, 4
  %310 = add i64 %298, -1
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %296, !llvm.loop !68

312:                                              ; preds = %296, %293
  %313 = icmp eq i64 %219, %234
  br i1 %313, label %460, label %314

314:                                              ; preds = %312, %221, %213
  %315 = phi %"class.sh::TQualifierWrapperBase"** [ %206, %221 ], [ %206, %213 ], [ %235, %312 ]
  %316 = phi %"class.sh::TQualifierWrapperBase"** [ %208, %221 ], [ %208, %213 ], [ %236, %312 ]
  %317 = ptrtoint %"class.sh::TQualifierWrapperBase"** %315 to i64
  %318 = add nsw i64 %67, -1
  %319 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %4, i64 %318
  %320 = ptrtoint %"class.sh::TQualifierWrapperBase"** %319 to i64
  %321 = sub i64 %320, %317
  %322 = lshr i64 %321, 3
  %323 = add nuw nsw i64 %322, 1
  %324 = and i64 %323, 7
  %325 = icmp eq i64 %324, 0
  br i1 %325, label %337, label %326

326:                                              ; preds = %314, %326
  %327 = phi %"class.sh::TQualifierWrapperBase"** [ %333, %326 ], [ %315, %314 ]
  %328 = phi %"class.sh::TQualifierWrapperBase"** [ %334, %326 ], [ %316, %314 ]
  %329 = phi i64 [ %335, %326 ], [ %324, %314 ]
  %330 = bitcast %"class.sh::TQualifierWrapperBase"** %327 to i64*
  %331 = load i64, i64* %330, align 8
  %332 = bitcast %"class.sh::TQualifierWrapperBase"** %328 to i64*
  store i64 %331, i64* %332, align 8
  %333 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %327, i64 1
  %334 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %328, i64 1
  %335 = add i64 %329, -1
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %326, !llvm.loop !69

337:                                              ; preds = %326, %314
  %338 = phi %"class.sh::TQualifierWrapperBase"** [ %315, %314 ], [ %333, %326 ]
  %339 = phi %"class.sh::TQualifierWrapperBase"** [ %316, %314 ], [ %334, %326 ]
  %340 = icmp ult i64 %321, 56
  br i1 %340, label %460, label %341

341:                                              ; preds = %337, %341
  %342 = phi %"class.sh::TQualifierWrapperBase"** [ %382, %341 ], [ %338, %337 ]
  %343 = phi %"class.sh::TQualifierWrapperBase"** [ %383, %341 ], [ %339, %337 ]
  %344 = bitcast %"class.sh::TQualifierWrapperBase"** %342 to i64*
  %345 = load i64, i64* %344, align 8
  %346 = bitcast %"class.sh::TQualifierWrapperBase"** %343 to i64*
  store i64 %345, i64* %346, align 8
  %347 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %342, i64 1
  %348 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %343, i64 1
  %349 = bitcast %"class.sh::TQualifierWrapperBase"** %347 to i64*
  %350 = load i64, i64* %349, align 8
  %351 = bitcast %"class.sh::TQualifierWrapperBase"** %348 to i64*
  store i64 %350, i64* %351, align 8
  %352 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %342, i64 2
  %353 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %343, i64 2
  %354 = bitcast %"class.sh::TQualifierWrapperBase"** %352 to i64*
  %355 = load i64, i64* %354, align 8
  %356 = bitcast %"class.sh::TQualifierWrapperBase"** %353 to i64*
  store i64 %355, i64* %356, align 8
  %357 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %342, i64 3
  %358 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %343, i64 3
  %359 = bitcast %"class.sh::TQualifierWrapperBase"** %357 to i64*
  %360 = load i64, i64* %359, align 8
  %361 = bitcast %"class.sh::TQualifierWrapperBase"** %358 to i64*
  store i64 %360, i64* %361, align 8
  %362 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %342, i64 4
  %363 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %343, i64 4
  %364 = bitcast %"class.sh::TQualifierWrapperBase"** %362 to i64*
  %365 = load i64, i64* %364, align 8
  %366 = bitcast %"class.sh::TQualifierWrapperBase"** %363 to i64*
  store i64 %365, i64* %366, align 8
  %367 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %342, i64 5
  %368 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %343, i64 5
  %369 = bitcast %"class.sh::TQualifierWrapperBase"** %367 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = bitcast %"class.sh::TQualifierWrapperBase"** %368 to i64*
  store i64 %370, i64* %371, align 8
  %372 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %342, i64 6
  %373 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %343, i64 6
  %374 = bitcast %"class.sh::TQualifierWrapperBase"** %372 to i64*
  %375 = load i64, i64* %374, align 8
  %376 = bitcast %"class.sh::TQualifierWrapperBase"** %373 to i64*
  store i64 %375, i64* %376, align 8
  %377 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %342, i64 7
  %378 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %343, i64 7
  %379 = bitcast %"class.sh::TQualifierWrapperBase"** %377 to i64*
  %380 = load i64, i64* %379, align 8
  %381 = bitcast %"class.sh::TQualifierWrapperBase"** %378 to i64*
  store i64 %380, i64* %381, align 8
  %382 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %342, i64 8
  %383 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %343, i64 8
  %384 = icmp eq %"class.sh::TQualifierWrapperBase"** %382, %72
  br i1 %384, label %460, label %341, !llvm.loop !70

385:                                              ; preds = %205
  %386 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %207, align 8
  %387 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %206, align 8
  %388 = bitcast %"class.sh::TQualifierWrapperBase"* %386 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %389 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %388, align 8
  %390 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %389, i64 4
  %391 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %390, align 8
  %392 = tail call i32 %391(%"class.sh::TQualifierWrapperBase"* %386) #9
  %393 = bitcast %"class.sh::TQualifierWrapperBase"* %387 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %394 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %393, align 8
  %395 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %394, i64 4
  %396 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %395, align 8
  %397 = tail call i32 %396(%"class.sh::TQualifierWrapperBase"* %387) #9
  %398 = icmp ult i32 %392, %397
  br i1 %398, label %399, label %404

399:                                              ; preds = %385
  %400 = bitcast %"class.sh::TQualifierWrapperBase"** %207 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = bitcast %"class.sh::TQualifierWrapperBase"** %208 to i64*
  store i64 %401, i64* %402, align 8
  %403 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %207, i64 1
  br label %409

404:                                              ; preds = %385
  %405 = bitcast %"class.sh::TQualifierWrapperBase"** %206 to i64*
  %406 = load i64, i64* %405, align 8
  %407 = bitcast %"class.sh::TQualifierWrapperBase"** %208 to i64*
  store i64 %406, i64* %407, align 8
  %408 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %206, i64 1
  br label %409

409:                                              ; preds = %404, %399
  %410 = phi %"class.sh::TQualifierWrapperBase"** [ %403, %399 ], [ %207, %404 ]
  %411 = phi %"class.sh::TQualifierWrapperBase"** [ %206, %399 ], [ %408, %404 ]
  %412 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %208, i64 1
  %413 = icmp eq %"class.sh::TQualifierWrapperBase"** %411, %72
  br i1 %413, label %74, label %205

414:                                              ; preds = %108, %414
  %415 = phi %"class.sh::TQualifierWrapperBase"** [ %455, %414 ], [ %109, %108 ]
  %416 = phi %"class.sh::TQualifierWrapperBase"** [ %456, %414 ], [ %110, %108 ]
  %417 = bitcast %"class.sh::TQualifierWrapperBase"** %415 to i64*
  %418 = load i64, i64* %417, align 8
  %419 = bitcast %"class.sh::TQualifierWrapperBase"** %416 to i64*
  store i64 %418, i64* %419, align 8
  %420 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %415, i64 1
  %421 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %416, i64 1
  %422 = bitcast %"class.sh::TQualifierWrapperBase"** %420 to i64*
  %423 = load i64, i64* %422, align 8
  %424 = bitcast %"class.sh::TQualifierWrapperBase"** %421 to i64*
  store i64 %423, i64* %424, align 8
  %425 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %415, i64 2
  %426 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %416, i64 2
  %427 = bitcast %"class.sh::TQualifierWrapperBase"** %425 to i64*
  %428 = load i64, i64* %427, align 8
  %429 = bitcast %"class.sh::TQualifierWrapperBase"** %426 to i64*
  store i64 %428, i64* %429, align 8
  %430 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %415, i64 3
  %431 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %416, i64 3
  %432 = bitcast %"class.sh::TQualifierWrapperBase"** %430 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = bitcast %"class.sh::TQualifierWrapperBase"** %431 to i64*
  store i64 %433, i64* %434, align 8
  %435 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %415, i64 4
  %436 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %416, i64 4
  %437 = bitcast %"class.sh::TQualifierWrapperBase"** %435 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = bitcast %"class.sh::TQualifierWrapperBase"** %436 to i64*
  store i64 %438, i64* %439, align 8
  %440 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %415, i64 5
  %441 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %416, i64 5
  %442 = bitcast %"class.sh::TQualifierWrapperBase"** %440 to i64*
  %443 = load i64, i64* %442, align 8
  %444 = bitcast %"class.sh::TQualifierWrapperBase"** %441 to i64*
  store i64 %443, i64* %444, align 8
  %445 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %415, i64 6
  %446 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %416, i64 6
  %447 = bitcast %"class.sh::TQualifierWrapperBase"** %445 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = bitcast %"class.sh::TQualifierWrapperBase"** %446 to i64*
  store i64 %448, i64* %449, align 8
  %450 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %415, i64 7
  %451 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %416, i64 7
  %452 = bitcast %"class.sh::TQualifierWrapperBase"** %450 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = bitcast %"class.sh::TQualifierWrapperBase"** %451 to i64*
  store i64 %453, i64* %454, align 8
  %455 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %415, i64 8
  %456 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %416, i64 8
  %457 = icmp eq %"class.sh::TQualifierWrapperBase"** %455, %73
  br i1 %457, label %460, label %414, !llvm.loop !71

458:                                              ; preds = %66
  tail call fastcc void @_ZNSt3__113__stable_sortIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"class.sh::TQualifierWrapperBase"** %0, %"class.sh::TQualifierWrapperBase"** %68, %"struct.sh::(anonymous namespace)::QualifierComparator"* dereferenceable(1) %2, i64 %67, %"class.sh::TQualifierWrapperBase"** %4, i64 %5)
  %459 = sub nsw i64 %3, %67
  tail call fastcc void @_ZNSt3__113__stable_sortIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"class.sh::TQualifierWrapperBase"** %68, %"class.sh::TQualifierWrapperBase"** %1, %"struct.sh::(anonymous namespace)::QualifierComparator"* dereferenceable(1) %2, i64 %459, %"class.sh::TQualifierWrapperBase"** %4, i64 %5)
  tail call fastcc void @_ZNSt3__115__inplace_mergeIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl(%"class.sh::TQualifierWrapperBase"** %0, %"class.sh::TQualifierWrapperBase"** %68, %"class.sh::TQualifierWrapperBase"** %1, %"struct.sh::(anonymous namespace)::QualifierComparator"* dereferenceable(1) %2, i64 %67, i64 %459, %"class.sh::TQualifierWrapperBase"** %4, i64 %5)
  ret void

460:                                              ; preds = %108, %414, %337, %341, %56, %203, %312, %210, %74, %31, %29, %7, %22, %6, %6
  ret void
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__118__stable_sort_moveIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeE(%"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"**, %"struct.sh::(anonymous namespace)::QualifierComparator"* dereferenceable(1), i64, %"class.sh::TQualifierWrapperBase"**) unnamed_addr #0 {
  switch i64 %3, label %41 [
    i64 0, label %500
    i64 1, label %6
    i64 2, label %10
  ]

6:                                                ; preds = %5
  %7 = bitcast %"class.sh::TQualifierWrapperBase"** %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.sh::TQualifierWrapperBase"** %4 to i64*
  store i64 %8, i64* %9, align 8
  br label %500

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %1, i64 -1
  %12 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %11, align 8
  %13 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %0, align 8
  %14 = bitcast %"class.sh::TQualifierWrapperBase"* %12 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %15 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %14, align 8
  %16 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %15, i64 4
  %17 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %16, align 8
  %18 = tail call i32 %17(%"class.sh::TQualifierWrapperBase"* %12) #9
  %19 = bitcast %"class.sh::TQualifierWrapperBase"* %13 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %20 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %19, align 8
  %21 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %20, i64 4
  %22 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %21, align 8
  %23 = tail call i32 %22(%"class.sh::TQualifierWrapperBase"* %13) #9
  %24 = icmp ult i32 %18, %23
  br i1 %24, label %25, label %33

25:                                               ; preds = %10
  %26 = bitcast %"class.sh::TQualifierWrapperBase"** %11 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.sh::TQualifierWrapperBase"** %4 to i64*
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %4, i64 1
  %30 = bitcast %"class.sh::TQualifierWrapperBase"** %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.sh::TQualifierWrapperBase"** %29 to i64*
  store i64 %31, i64* %32, align 8
  br label %500

33:                                               ; preds = %10
  %34 = bitcast %"class.sh::TQualifierWrapperBase"** %0 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.sh::TQualifierWrapperBase"** %4 to i64*
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %4, i64 1
  %38 = bitcast %"class.sh::TQualifierWrapperBase"** %11 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.sh::TQualifierWrapperBase"** %37 to i64*
  store i64 %39, i64* %40, align 8
  br label %500

41:                                               ; preds = %5
  %42 = icmp slt i64 %3, 9
  br i1 %42, label %43, label %111

43:                                               ; preds = %41
  %44 = icmp eq %"class.sh::TQualifierWrapperBase"** %0, %1
  br i1 %44, label %500, label %45

45:                                               ; preds = %43
  %46 = bitcast %"class.sh::TQualifierWrapperBase"** %0 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.sh::TQualifierWrapperBase"** %4 to i64*
  store i64 %47, i64* %48, align 8
  %49 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %0, i64 1
  %50 = icmp eq %"class.sh::TQualifierWrapperBase"** %49, %1
  br i1 %50, label %500, label %51

51:                                               ; preds = %45
  %52 = inttoptr i64 %47 to %"class.sh::TQualifierWrapperBase"*
  br label %53

53:                                               ; preds = %109, %51
  %54 = phi %"class.sh::TQualifierWrapperBase"* [ %110, %109 ], [ %52, %51 ]
  %55 = phi %"class.sh::TQualifierWrapperBase"** [ %107, %109 ], [ %49, %51 ]
  %56 = phi %"class.sh::TQualifierWrapperBase"** [ %57, %109 ], [ %4, %51 ]
  %57 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %56, i64 1
  %58 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %55, align 8
  %59 = bitcast %"class.sh::TQualifierWrapperBase"* %58 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %60 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %59, align 8
  %61 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %60, i64 4
  %62 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %61, align 8
  %63 = tail call i32 %62(%"class.sh::TQualifierWrapperBase"* %58) #9
  %64 = bitcast %"class.sh::TQualifierWrapperBase"* %54 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %65 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %64, align 8
  %66 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %65, i64 4
  %67 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %66, align 8
  %68 = tail call i32 %67(%"class.sh::TQualifierWrapperBase"* %54) #9
  %69 = icmp ult i32 %63, %68
  br i1 %69, label %70, label %102

70:                                               ; preds = %53
  %71 = bitcast %"class.sh::TQualifierWrapperBase"** %56 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = bitcast %"class.sh::TQualifierWrapperBase"** %57 to i64*
  store i64 %72, i64* %73, align 8
  %74 = icmp eq %"class.sh::TQualifierWrapperBase"** %56, %4
  br i1 %74, label %98, label %75

75:                                               ; preds = %70, %93
  %76 = phi %"class.sh::TQualifierWrapperBase"** [ %78, %93 ], [ %56, %70 ]
  %77 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %55, align 8
  %78 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %76, i64 -1
  %79 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %78, align 8
  %80 = bitcast %"class.sh::TQualifierWrapperBase"* %77 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %81 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %80, align 8
  %82 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %81, i64 4
  %83 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %82, align 8
  %84 = tail call i32 %83(%"class.sh::TQualifierWrapperBase"* %77) #9
  %85 = bitcast %"class.sh::TQualifierWrapperBase"* %79 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %86 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %85, align 8
  %87 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %86, i64 4
  %88 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %87, align 8
  %89 = tail call i32 %88(%"class.sh::TQualifierWrapperBase"* %79) #9
  %90 = icmp ult i32 %84, %89
  br i1 %90, label %93, label %91

91:                                               ; preds = %75
  %92 = bitcast %"class.sh::TQualifierWrapperBase"** %76 to i64*
  br label %98

93:                                               ; preds = %75
  %94 = bitcast %"class.sh::TQualifierWrapperBase"** %78 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %"class.sh::TQualifierWrapperBase"** %76 to i64*
  store i64 %95, i64* %96, align 8
  %97 = icmp eq %"class.sh::TQualifierWrapperBase"** %78, %4
  br i1 %97, label %98, label %75

98:                                               ; preds = %93, %91, %70
  %99 = phi i64* [ %48, %70 ], [ %92, %91 ], [ %48, %93 ]
  %100 = bitcast %"class.sh::TQualifierWrapperBase"** %55 to i64*
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %99, align 8
  br label %106

102:                                              ; preds = %53
  %103 = bitcast %"class.sh::TQualifierWrapperBase"** %55 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.sh::TQualifierWrapperBase"** %57 to i64*
  store i64 %104, i64* %105, align 8
  br label %106

106:                                              ; preds = %102, %98
  %107 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %55, i64 1
  %108 = icmp eq %"class.sh::TQualifierWrapperBase"** %107, %1
  br i1 %108, label %500, label %109

109:                                              ; preds = %106
  %110 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %57, align 8
  br label %53

111:                                              ; preds = %41
  %112 = lshr i64 %3, 1
  %113 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %0, i64 %112
  tail call fastcc void @_ZNSt3__113__stable_sortIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"class.sh::TQualifierWrapperBase"** %0, %"class.sh::TQualifierWrapperBase"** %113, %"struct.sh::(anonymous namespace)::QualifierComparator"* dereferenceable(1) %2, i64 %112, %"class.sh::TQualifierWrapperBase"** %4, i64 %112)
  %114 = sub nsw i64 %3, %112
  %115 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %4, i64 %112
  tail call fastcc void @_ZNSt3__113__stable_sortIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"class.sh::TQualifierWrapperBase"** %113, %"class.sh::TQualifierWrapperBase"** %1, %"struct.sh::(anonymous namespace)::QualifierComparator"* dereferenceable(1) %2, i64 %114, %"class.sh::TQualifierWrapperBase"** %115, i64 %114)
  %116 = icmp eq i64 %112, 0
  br i1 %116, label %117, label %291

117:                                              ; preds = %495, %111
  %118 = phi %"class.sh::TQualifierWrapperBase"** [ %113, %111 ], [ %496, %495 ]
  %119 = phi %"class.sh::TQualifierWrapperBase"** [ %4, %111 ], [ %498, %495 ]
  %120 = ptrtoint %"class.sh::TQualifierWrapperBase"** %118 to i64
  %121 = icmp eq %"class.sh::TQualifierWrapperBase"** %118, %1
  br i1 %121, label %500, label %122

122:                                              ; preds = %117
  %123 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %1, i64 -1
  %124 = ptrtoint %"class.sh::TQualifierWrapperBase"** %123 to i64
  %125 = sub i64 %124, %120
  %126 = lshr i64 %125, 3
  %127 = add nuw nsw i64 %126, 1
  %128 = icmp ult i64 %127, 4
  br i1 %128, label %221, label %129

129:                                              ; preds = %122
  %130 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %1, i64 -1
  %131 = ptrtoint %"class.sh::TQualifierWrapperBase"** %130 to i64
  %132 = sub i64 %131, %120
  %133 = lshr i64 %132, 3
  %134 = add nuw nsw i64 %133, 1
  %135 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %119, i64 %134
  %136 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %118, i64 %134
  %137 = icmp ult %"class.sh::TQualifierWrapperBase"** %119, %136
  %138 = icmp ult %"class.sh::TQualifierWrapperBase"** %118, %135
  %139 = and i1 %137, %138
  br i1 %139, label %221, label %140

140:                                              ; preds = %129
  %141 = and i64 %127, 4611686018427387900
  %142 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %119, i64 %141
  %143 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %118, i64 %141
  %144 = add nsw i64 %141, -4
  %145 = lshr exact i64 %144, 2
  %146 = add nuw nsw i64 %145, 1
  %147 = and i64 %146, 3
  %148 = icmp ult i64 %144, 12
  br i1 %148, label %200, label %149

149:                                              ; preds = %140
  %150 = sub nsw i64 %146, %147
  br label %151

151:                                              ; preds = %151, %149
  %152 = phi i64 [ 0, %149 ], [ %197, %151 ]
  %153 = phi i64 [ %150, %149 ], [ %198, %151 ]
  %154 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %119, i64 %152
  %155 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %118, i64 %152
  %156 = bitcast %"class.sh::TQualifierWrapperBase"** %155 to <2 x i64>*
  %157 = load <2 x i64>, <2 x i64>* %156, align 8, !alias.scope !72
  %158 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %155, i64 2
  %159 = bitcast %"class.sh::TQualifierWrapperBase"** %158 to <2 x i64>*
  %160 = load <2 x i64>, <2 x i64>* %159, align 8, !alias.scope !72
  %161 = bitcast %"class.sh::TQualifierWrapperBase"** %154 to <2 x i64>*
  store <2 x i64> %157, <2 x i64>* %161, align 8, !alias.scope !75, !noalias !72
  %162 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %154, i64 2
  %163 = bitcast %"class.sh::TQualifierWrapperBase"** %162 to <2 x i64>*
  store <2 x i64> %160, <2 x i64>* %163, align 8, !alias.scope !75, !noalias !72
  %164 = or i64 %152, 4
  %165 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %119, i64 %164
  %166 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %118, i64 %164
  %167 = bitcast %"class.sh::TQualifierWrapperBase"** %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 8, !alias.scope !72
  %169 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %166, i64 2
  %170 = bitcast %"class.sh::TQualifierWrapperBase"** %169 to <2 x i64>*
  %171 = load <2 x i64>, <2 x i64>* %170, align 8, !alias.scope !72
  %172 = bitcast %"class.sh::TQualifierWrapperBase"** %165 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %172, align 8, !alias.scope !75, !noalias !72
  %173 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %165, i64 2
  %174 = bitcast %"class.sh::TQualifierWrapperBase"** %173 to <2 x i64>*
  store <2 x i64> %171, <2 x i64>* %174, align 8, !alias.scope !75, !noalias !72
  %175 = or i64 %152, 8
  %176 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %119, i64 %175
  %177 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %118, i64 %175
  %178 = bitcast %"class.sh::TQualifierWrapperBase"** %177 to <2 x i64>*
  %179 = load <2 x i64>, <2 x i64>* %178, align 8, !alias.scope !72
  %180 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %177, i64 2
  %181 = bitcast %"class.sh::TQualifierWrapperBase"** %180 to <2 x i64>*
  %182 = load <2 x i64>, <2 x i64>* %181, align 8, !alias.scope !72
  %183 = bitcast %"class.sh::TQualifierWrapperBase"** %176 to <2 x i64>*
  store <2 x i64> %179, <2 x i64>* %183, align 8, !alias.scope !75, !noalias !72
  %184 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %176, i64 2
  %185 = bitcast %"class.sh::TQualifierWrapperBase"** %184 to <2 x i64>*
  store <2 x i64> %182, <2 x i64>* %185, align 8, !alias.scope !75, !noalias !72
  %186 = or i64 %152, 12
  %187 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %119, i64 %186
  %188 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %118, i64 %186
  %189 = bitcast %"class.sh::TQualifierWrapperBase"** %188 to <2 x i64>*
  %190 = load <2 x i64>, <2 x i64>* %189, align 8, !alias.scope !72
  %191 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %188, i64 2
  %192 = bitcast %"class.sh::TQualifierWrapperBase"** %191 to <2 x i64>*
  %193 = load <2 x i64>, <2 x i64>* %192, align 8, !alias.scope !72
  %194 = bitcast %"class.sh::TQualifierWrapperBase"** %187 to <2 x i64>*
  store <2 x i64> %190, <2 x i64>* %194, align 8, !alias.scope !75, !noalias !72
  %195 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %187, i64 2
  %196 = bitcast %"class.sh::TQualifierWrapperBase"** %195 to <2 x i64>*
  store <2 x i64> %193, <2 x i64>* %196, align 8, !alias.scope !75, !noalias !72
  %197 = add i64 %152, 16
  %198 = add i64 %153, -4
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %151, !llvm.loop !77

200:                                              ; preds = %151, %140
  %201 = phi i64 [ 0, %140 ], [ %197, %151 ]
  %202 = icmp eq i64 %147, 0
  br i1 %202, label %219, label %203

203:                                              ; preds = %200, %203
  %204 = phi i64 [ %216, %203 ], [ %201, %200 ]
  %205 = phi i64 [ %217, %203 ], [ %147, %200 ]
  %206 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %119, i64 %204
  %207 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %118, i64 %204
  %208 = bitcast %"class.sh::TQualifierWrapperBase"** %207 to <2 x i64>*
  %209 = load <2 x i64>, <2 x i64>* %208, align 8, !alias.scope !72
  %210 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %207, i64 2
  %211 = bitcast %"class.sh::TQualifierWrapperBase"** %210 to <2 x i64>*
  %212 = load <2 x i64>, <2 x i64>* %211, align 8, !alias.scope !72
  %213 = bitcast %"class.sh::TQualifierWrapperBase"** %206 to <2 x i64>*
  store <2 x i64> %209, <2 x i64>* %213, align 8, !alias.scope !75, !noalias !72
  %214 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %206, i64 2
  %215 = bitcast %"class.sh::TQualifierWrapperBase"** %214 to <2 x i64>*
  store <2 x i64> %212, <2 x i64>* %215, align 8, !alias.scope !75, !noalias !72
  %216 = add i64 %204, 4
  %217 = add i64 %205, -1
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %203, !llvm.loop !78

219:                                              ; preds = %203, %200
  %220 = icmp eq i64 %127, %141
  br i1 %220, label %500, label %221

221:                                              ; preds = %219, %129, %122
  %222 = phi %"class.sh::TQualifierWrapperBase"** [ %119, %129 ], [ %119, %122 ], [ %142, %219 ]
  %223 = phi %"class.sh::TQualifierWrapperBase"** [ %118, %129 ], [ %118, %122 ], [ %143, %219 ]
  %224 = ptrtoint %"class.sh::TQualifierWrapperBase"** %223 to i64
  %225 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %1, i64 -1
  %226 = ptrtoint %"class.sh::TQualifierWrapperBase"** %225 to i64
  %227 = sub i64 %226, %224
  %228 = lshr i64 %227, 3
  %229 = add nuw nsw i64 %228, 1
  %230 = and i64 %229, 7
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %243, label %232

232:                                              ; preds = %221, %232
  %233 = phi %"class.sh::TQualifierWrapperBase"** [ %240, %232 ], [ %222, %221 ]
  %234 = phi %"class.sh::TQualifierWrapperBase"** [ %239, %232 ], [ %223, %221 ]
  %235 = phi i64 [ %241, %232 ], [ %230, %221 ]
  %236 = bitcast %"class.sh::TQualifierWrapperBase"** %234 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = bitcast %"class.sh::TQualifierWrapperBase"** %233 to i64*
  store i64 %237, i64* %238, align 8
  %239 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %234, i64 1
  %240 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %233, i64 1
  %241 = add i64 %235, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %232, !llvm.loop !79

243:                                              ; preds = %232, %221
  %244 = phi %"class.sh::TQualifierWrapperBase"** [ %222, %221 ], [ %240, %232 ]
  %245 = phi %"class.sh::TQualifierWrapperBase"** [ %223, %221 ], [ %239, %232 ]
  %246 = icmp ult i64 %227, 56
  br i1 %246, label %500, label %247

247:                                              ; preds = %243, %247
  %248 = phi %"class.sh::TQualifierWrapperBase"** [ %289, %247 ], [ %244, %243 ]
  %249 = phi %"class.sh::TQualifierWrapperBase"** [ %288, %247 ], [ %245, %243 ]
  %250 = bitcast %"class.sh::TQualifierWrapperBase"** %249 to i64*
  %251 = load i64, i64* %250, align 8
  %252 = bitcast %"class.sh::TQualifierWrapperBase"** %248 to i64*
  store i64 %251, i64* %252, align 8
  %253 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %249, i64 1
  %254 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %248, i64 1
  %255 = bitcast %"class.sh::TQualifierWrapperBase"** %253 to i64*
  %256 = load i64, i64* %255, align 8
  %257 = bitcast %"class.sh::TQualifierWrapperBase"** %254 to i64*
  store i64 %256, i64* %257, align 8
  %258 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %249, i64 2
  %259 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %248, i64 2
  %260 = bitcast %"class.sh::TQualifierWrapperBase"** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = bitcast %"class.sh::TQualifierWrapperBase"** %259 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %249, i64 3
  %264 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %248, i64 3
  %265 = bitcast %"class.sh::TQualifierWrapperBase"** %263 to i64*
  %266 = load i64, i64* %265, align 8
  %267 = bitcast %"class.sh::TQualifierWrapperBase"** %264 to i64*
  store i64 %266, i64* %267, align 8
  %268 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %249, i64 4
  %269 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %248, i64 4
  %270 = bitcast %"class.sh::TQualifierWrapperBase"** %268 to i64*
  %271 = load i64, i64* %270, align 8
  %272 = bitcast %"class.sh::TQualifierWrapperBase"** %269 to i64*
  store i64 %271, i64* %272, align 8
  %273 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %249, i64 5
  %274 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %248, i64 5
  %275 = bitcast %"class.sh::TQualifierWrapperBase"** %273 to i64*
  %276 = load i64, i64* %275, align 8
  %277 = bitcast %"class.sh::TQualifierWrapperBase"** %274 to i64*
  store i64 %276, i64* %277, align 8
  %278 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %249, i64 6
  %279 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %248, i64 6
  %280 = bitcast %"class.sh::TQualifierWrapperBase"** %278 to i64*
  %281 = load i64, i64* %280, align 8
  %282 = bitcast %"class.sh::TQualifierWrapperBase"** %279 to i64*
  store i64 %281, i64* %282, align 8
  %283 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %249, i64 7
  %284 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %248, i64 7
  %285 = bitcast %"class.sh::TQualifierWrapperBase"** %283 to i64*
  %286 = load i64, i64* %285, align 8
  %287 = bitcast %"class.sh::TQualifierWrapperBase"** %284 to i64*
  store i64 %286, i64* %287, align 8
  %288 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %249, i64 8
  %289 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %248, i64 8
  %290 = icmp eq %"class.sh::TQualifierWrapperBase"** %288, %1
  br i1 %290, label %500, label %247, !llvm.loop !80

291:                                              ; preds = %111, %495
  %292 = phi %"class.sh::TQualifierWrapperBase"** [ %498, %495 ], [ %4, %111 ]
  %293 = phi %"class.sh::TQualifierWrapperBase"** [ %497, %495 ], [ %0, %111 ]
  %294 = phi %"class.sh::TQualifierWrapperBase"** [ %496, %495 ], [ %113, %111 ]
  %295 = icmp eq %"class.sh::TQualifierWrapperBase"** %294, %1
  br i1 %295, label %296, label %471

296:                                              ; preds = %291
  %297 = ptrtoint %"class.sh::TQualifierWrapperBase"** %293 to i64
  %298 = icmp eq %"class.sh::TQualifierWrapperBase"** %293, %113
  br i1 %298, label %500, label %299

299:                                              ; preds = %296
  %300 = add nsw i64 %112, -1
  %301 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %0, i64 %300
  %302 = ptrtoint %"class.sh::TQualifierWrapperBase"** %301 to i64
  %303 = sub i64 %302, %297
  %304 = lshr i64 %303, 3
  %305 = add nuw nsw i64 %304, 1
  %306 = icmp ult i64 %305, 4
  br i1 %306, label %400, label %307

307:                                              ; preds = %299
  %308 = add nsw i64 %112, -1
  %309 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %0, i64 %308
  %310 = ptrtoint %"class.sh::TQualifierWrapperBase"** %309 to i64
  %311 = sub i64 %310, %297
  %312 = lshr i64 %311, 3
  %313 = add nuw nsw i64 %312, 1
  %314 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %292, i64 %313
  %315 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %293, i64 %313
  %316 = icmp ult %"class.sh::TQualifierWrapperBase"** %292, %315
  %317 = icmp ult %"class.sh::TQualifierWrapperBase"** %293, %314
  %318 = and i1 %316, %317
  br i1 %318, label %400, label %319

319:                                              ; preds = %307
  %320 = and i64 %305, 4611686018427387900
  %321 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %292, i64 %320
  %322 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %293, i64 %320
  %323 = add nsw i64 %320, -4
  %324 = lshr exact i64 %323, 2
  %325 = add nuw nsw i64 %324, 1
  %326 = and i64 %325, 3
  %327 = icmp ult i64 %323, 12
  br i1 %327, label %379, label %328

328:                                              ; preds = %319
  %329 = sub nsw i64 %325, %326
  br label %330

330:                                              ; preds = %330, %328
  %331 = phi i64 [ 0, %328 ], [ %376, %330 ]
  %332 = phi i64 [ %329, %328 ], [ %377, %330 ]
  %333 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %292, i64 %331
  %334 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %293, i64 %331
  %335 = bitcast %"class.sh::TQualifierWrapperBase"** %334 to <2 x i64>*
  %336 = load <2 x i64>, <2 x i64>* %335, align 8, !alias.scope !81
  %337 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %334, i64 2
  %338 = bitcast %"class.sh::TQualifierWrapperBase"** %337 to <2 x i64>*
  %339 = load <2 x i64>, <2 x i64>* %338, align 8, !alias.scope !81
  %340 = bitcast %"class.sh::TQualifierWrapperBase"** %333 to <2 x i64>*
  store <2 x i64> %336, <2 x i64>* %340, align 8, !alias.scope !84, !noalias !81
  %341 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %333, i64 2
  %342 = bitcast %"class.sh::TQualifierWrapperBase"** %341 to <2 x i64>*
  store <2 x i64> %339, <2 x i64>* %342, align 8, !alias.scope !84, !noalias !81
  %343 = or i64 %331, 4
  %344 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %292, i64 %343
  %345 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %293, i64 %343
  %346 = bitcast %"class.sh::TQualifierWrapperBase"** %345 to <2 x i64>*
  %347 = load <2 x i64>, <2 x i64>* %346, align 8, !alias.scope !81
  %348 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %345, i64 2
  %349 = bitcast %"class.sh::TQualifierWrapperBase"** %348 to <2 x i64>*
  %350 = load <2 x i64>, <2 x i64>* %349, align 8, !alias.scope !81
  %351 = bitcast %"class.sh::TQualifierWrapperBase"** %344 to <2 x i64>*
  store <2 x i64> %347, <2 x i64>* %351, align 8, !alias.scope !84, !noalias !81
  %352 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %344, i64 2
  %353 = bitcast %"class.sh::TQualifierWrapperBase"** %352 to <2 x i64>*
  store <2 x i64> %350, <2 x i64>* %353, align 8, !alias.scope !84, !noalias !81
  %354 = or i64 %331, 8
  %355 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %292, i64 %354
  %356 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %293, i64 %354
  %357 = bitcast %"class.sh::TQualifierWrapperBase"** %356 to <2 x i64>*
  %358 = load <2 x i64>, <2 x i64>* %357, align 8, !alias.scope !81
  %359 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %356, i64 2
  %360 = bitcast %"class.sh::TQualifierWrapperBase"** %359 to <2 x i64>*
  %361 = load <2 x i64>, <2 x i64>* %360, align 8, !alias.scope !81
  %362 = bitcast %"class.sh::TQualifierWrapperBase"** %355 to <2 x i64>*
  store <2 x i64> %358, <2 x i64>* %362, align 8, !alias.scope !84, !noalias !81
  %363 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %355, i64 2
  %364 = bitcast %"class.sh::TQualifierWrapperBase"** %363 to <2 x i64>*
  store <2 x i64> %361, <2 x i64>* %364, align 8, !alias.scope !84, !noalias !81
  %365 = or i64 %331, 12
  %366 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %292, i64 %365
  %367 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %293, i64 %365
  %368 = bitcast %"class.sh::TQualifierWrapperBase"** %367 to <2 x i64>*
  %369 = load <2 x i64>, <2 x i64>* %368, align 8, !alias.scope !81
  %370 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %367, i64 2
  %371 = bitcast %"class.sh::TQualifierWrapperBase"** %370 to <2 x i64>*
  %372 = load <2 x i64>, <2 x i64>* %371, align 8, !alias.scope !81
  %373 = bitcast %"class.sh::TQualifierWrapperBase"** %366 to <2 x i64>*
  store <2 x i64> %369, <2 x i64>* %373, align 8, !alias.scope !84, !noalias !81
  %374 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %366, i64 2
  %375 = bitcast %"class.sh::TQualifierWrapperBase"** %374 to <2 x i64>*
  store <2 x i64> %372, <2 x i64>* %375, align 8, !alias.scope !84, !noalias !81
  %376 = add i64 %331, 16
  %377 = add i64 %332, -4
  %378 = icmp eq i64 %377, 0
  br i1 %378, label %379, label %330, !llvm.loop !86

379:                                              ; preds = %330, %319
  %380 = phi i64 [ 0, %319 ], [ %376, %330 ]
  %381 = icmp eq i64 %326, 0
  br i1 %381, label %398, label %382

382:                                              ; preds = %379, %382
  %383 = phi i64 [ %395, %382 ], [ %380, %379 ]
  %384 = phi i64 [ %396, %382 ], [ %326, %379 ]
  %385 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %292, i64 %383
  %386 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %293, i64 %383
  %387 = bitcast %"class.sh::TQualifierWrapperBase"** %386 to <2 x i64>*
  %388 = load <2 x i64>, <2 x i64>* %387, align 8, !alias.scope !81
  %389 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %386, i64 2
  %390 = bitcast %"class.sh::TQualifierWrapperBase"** %389 to <2 x i64>*
  %391 = load <2 x i64>, <2 x i64>* %390, align 8, !alias.scope !81
  %392 = bitcast %"class.sh::TQualifierWrapperBase"** %385 to <2 x i64>*
  store <2 x i64> %388, <2 x i64>* %392, align 8, !alias.scope !84, !noalias !81
  %393 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %385, i64 2
  %394 = bitcast %"class.sh::TQualifierWrapperBase"** %393 to <2 x i64>*
  store <2 x i64> %391, <2 x i64>* %394, align 8, !alias.scope !84, !noalias !81
  %395 = add i64 %383, 4
  %396 = add i64 %384, -1
  %397 = icmp eq i64 %396, 0
  br i1 %397, label %398, label %382, !llvm.loop !87

398:                                              ; preds = %382, %379
  %399 = icmp eq i64 %305, %320
  br i1 %399, label %500, label %400

400:                                              ; preds = %398, %307, %299
  %401 = phi %"class.sh::TQualifierWrapperBase"** [ %292, %307 ], [ %292, %299 ], [ %321, %398 ]
  %402 = phi %"class.sh::TQualifierWrapperBase"** [ %293, %307 ], [ %293, %299 ], [ %322, %398 ]
  %403 = ptrtoint %"class.sh::TQualifierWrapperBase"** %402 to i64
  %404 = add nsw i64 %112, -1
  %405 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %0, i64 %404
  %406 = ptrtoint %"class.sh::TQualifierWrapperBase"** %405 to i64
  %407 = sub i64 %406, %403
  %408 = lshr i64 %407, 3
  %409 = add nuw nsw i64 %408, 1
  %410 = and i64 %409, 7
  %411 = icmp eq i64 %410, 0
  br i1 %411, label %423, label %412

412:                                              ; preds = %400, %412
  %413 = phi %"class.sh::TQualifierWrapperBase"** [ %420, %412 ], [ %401, %400 ]
  %414 = phi %"class.sh::TQualifierWrapperBase"** [ %419, %412 ], [ %402, %400 ]
  %415 = phi i64 [ %421, %412 ], [ %410, %400 ]
  %416 = bitcast %"class.sh::TQualifierWrapperBase"** %414 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = bitcast %"class.sh::TQualifierWrapperBase"** %413 to i64*
  store i64 %417, i64* %418, align 8
  %419 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %414, i64 1
  %420 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %413, i64 1
  %421 = add i64 %415, -1
  %422 = icmp eq i64 %421, 0
  br i1 %422, label %423, label %412, !llvm.loop !88

423:                                              ; preds = %412, %400
  %424 = phi %"class.sh::TQualifierWrapperBase"** [ %401, %400 ], [ %420, %412 ]
  %425 = phi %"class.sh::TQualifierWrapperBase"** [ %402, %400 ], [ %419, %412 ]
  %426 = icmp ult i64 %407, 56
  br i1 %426, label %500, label %427

427:                                              ; preds = %423, %427
  %428 = phi %"class.sh::TQualifierWrapperBase"** [ %469, %427 ], [ %424, %423 ]
  %429 = phi %"class.sh::TQualifierWrapperBase"** [ %468, %427 ], [ %425, %423 ]
  %430 = bitcast %"class.sh::TQualifierWrapperBase"** %429 to i64*
  %431 = load i64, i64* %430, align 8
  %432 = bitcast %"class.sh::TQualifierWrapperBase"** %428 to i64*
  store i64 %431, i64* %432, align 8
  %433 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %429, i64 1
  %434 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %428, i64 1
  %435 = bitcast %"class.sh::TQualifierWrapperBase"** %433 to i64*
  %436 = load i64, i64* %435, align 8
  %437 = bitcast %"class.sh::TQualifierWrapperBase"** %434 to i64*
  store i64 %436, i64* %437, align 8
  %438 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %429, i64 2
  %439 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %428, i64 2
  %440 = bitcast %"class.sh::TQualifierWrapperBase"** %438 to i64*
  %441 = load i64, i64* %440, align 8
  %442 = bitcast %"class.sh::TQualifierWrapperBase"** %439 to i64*
  store i64 %441, i64* %442, align 8
  %443 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %429, i64 3
  %444 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %428, i64 3
  %445 = bitcast %"class.sh::TQualifierWrapperBase"** %443 to i64*
  %446 = load i64, i64* %445, align 8
  %447 = bitcast %"class.sh::TQualifierWrapperBase"** %444 to i64*
  store i64 %446, i64* %447, align 8
  %448 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %429, i64 4
  %449 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %428, i64 4
  %450 = bitcast %"class.sh::TQualifierWrapperBase"** %448 to i64*
  %451 = load i64, i64* %450, align 8
  %452 = bitcast %"class.sh::TQualifierWrapperBase"** %449 to i64*
  store i64 %451, i64* %452, align 8
  %453 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %429, i64 5
  %454 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %428, i64 5
  %455 = bitcast %"class.sh::TQualifierWrapperBase"** %453 to i64*
  %456 = load i64, i64* %455, align 8
  %457 = bitcast %"class.sh::TQualifierWrapperBase"** %454 to i64*
  store i64 %456, i64* %457, align 8
  %458 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %429, i64 6
  %459 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %428, i64 6
  %460 = bitcast %"class.sh::TQualifierWrapperBase"** %458 to i64*
  %461 = load i64, i64* %460, align 8
  %462 = bitcast %"class.sh::TQualifierWrapperBase"** %459 to i64*
  store i64 %461, i64* %462, align 8
  %463 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %429, i64 7
  %464 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %428, i64 7
  %465 = bitcast %"class.sh::TQualifierWrapperBase"** %463 to i64*
  %466 = load i64, i64* %465, align 8
  %467 = bitcast %"class.sh::TQualifierWrapperBase"** %464 to i64*
  store i64 %466, i64* %467, align 8
  %468 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %429, i64 8
  %469 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %428, i64 8
  %470 = icmp eq %"class.sh::TQualifierWrapperBase"** %468, %113
  br i1 %470, label %500, label %427, !llvm.loop !89

471:                                              ; preds = %291
  %472 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %294, align 8
  %473 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %293, align 8
  %474 = bitcast %"class.sh::TQualifierWrapperBase"* %472 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %475 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %474, align 8
  %476 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %475, i64 4
  %477 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %476, align 8
  %478 = tail call i32 %477(%"class.sh::TQualifierWrapperBase"* %472) #9
  %479 = bitcast %"class.sh::TQualifierWrapperBase"* %473 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %480 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %479, align 8
  %481 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %480, i64 4
  %482 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %481, align 8
  %483 = tail call i32 %482(%"class.sh::TQualifierWrapperBase"* %473) #9
  %484 = icmp ult i32 %478, %483
  br i1 %484, label %485, label %490

485:                                              ; preds = %471
  %486 = bitcast %"class.sh::TQualifierWrapperBase"** %294 to i64*
  %487 = load i64, i64* %486, align 8
  %488 = bitcast %"class.sh::TQualifierWrapperBase"** %292 to i64*
  store i64 %487, i64* %488, align 8
  %489 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %294, i64 1
  br label %495

490:                                              ; preds = %471
  %491 = bitcast %"class.sh::TQualifierWrapperBase"** %293 to i64*
  %492 = load i64, i64* %491, align 8
  %493 = bitcast %"class.sh::TQualifierWrapperBase"** %292 to i64*
  store i64 %492, i64* %493, align 8
  %494 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %293, i64 1
  br label %495

495:                                              ; preds = %490, %485
  %496 = phi %"class.sh::TQualifierWrapperBase"** [ %489, %485 ], [ %294, %490 ]
  %497 = phi %"class.sh::TQualifierWrapperBase"** [ %293, %485 ], [ %494, %490 ]
  %498 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %292, i64 1
  %499 = icmp eq %"class.sh::TQualifierWrapperBase"** %497, %113
  br i1 %499, label %117, label %291

500:                                              ; preds = %423, %427, %243, %247, %106, %398, %219, %296, %117, %45, %43, %25, %33, %5, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__115__inplace_mergeIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl(%"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"**, %"class.sh::TQualifierWrapperBase"**, %"struct.sh::(anonymous namespace)::QualifierComparator"* readnone dereferenceable(1), i64, i64, %"class.sh::TQualifierWrapperBase"**, i64) unnamed_addr #0 {
  %9 = ptrtoint %"class.sh::TQualifierWrapperBase"** %6 to i64
  %10 = icmp eq i64 %5, 0
  br i1 %10, label %1028, label %11

11:                                               ; preds = %8
  %12 = ptrtoint %"class.sh::TQualifierWrapperBase"** %1 to i64
  %13 = ptrtoint %"class.sh::TQualifierWrapperBase"** %0 to i64
  br label %14

14:                                               ; preds = %11, %1021
  %15 = phi %"class.sh::TQualifierWrapperBase"** [ %1026, %1021 ], [ %2, %11 ]
  %16 = phi i64 [ %1025, %1021 ], [ %4, %11 ]
  %17 = phi i64 [ %1024, %1021 ], [ %5, %11 ]
  %18 = phi i64 [ %1023, %1021 ], [ %12, %11 ]
  %19 = phi i64 [ %1022, %1021 ], [ %13, %11 ]
  %20 = icmp sgt i64 %16, %7
  %21 = icmp sgt i64 %17, %7
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %28

23:                                               ; preds = %14
  %24 = icmp eq i64 %16, 0
  br i1 %24, label %1028, label %25

25:                                               ; preds = %23
  %26 = inttoptr i64 %18 to %"class.sh::TQualifierWrapperBase"**
  %27 = inttoptr i64 %18 to i8*
  br label %632

28:                                               ; preds = %14
  %29 = inttoptr i64 %19 to %"class.sh::TQualifierWrapperBase"**
  %30 = inttoptr i64 %19 to i8*
  %31 = inttoptr i64 %18 to %"class.sh::TQualifierWrapperBase"**
  %32 = inttoptr i64 %18 to i8*
  %33 = icmp sgt i64 %16, %17
  br i1 %33, label %167, label %34

34:                                               ; preds = %28
  %35 = icmp eq %"class.sh::TQualifierWrapperBase"** %29, %31
  br i1 %35, label %1028, label %36

36:                                               ; preds = %34
  %37 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %31, i64 -1
  %38 = bitcast %"class.sh::TQualifierWrapperBase"** %37 to i8*
  %39 = sub i64 0, %19
  %40 = getelementptr i8, i8* %38, i64 %39
  %41 = ptrtoint i8* %40 to i64
  %42 = lshr i64 %41, 3
  %43 = add nuw nsw i64 %42, 1
  %44 = icmp ult i64 %43, 4
  br i1 %44, label %45, label %72

45:                                               ; preds = %165, %72, %36
  %46 = phi %"class.sh::TQualifierWrapperBase"** [ %6, %72 ], [ %6, %36 ], [ %88, %165 ]
  %47 = phi %"class.sh::TQualifierWrapperBase"** [ %29, %72 ], [ %29, %36 ], [ %89, %165 ]
  %48 = ptrtoint %"class.sh::TQualifierWrapperBase"** %47 to i64
  %49 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %31, i64 -1
  %50 = ptrtoint %"class.sh::TQualifierWrapperBase"** %49 to i64
  %51 = sub i64 %50, %48
  %52 = lshr i64 %51, 3
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 7
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %67, label %56

56:                                               ; preds = %45, %56
  %57 = phi %"class.sh::TQualifierWrapperBase"** [ %64, %56 ], [ %46, %45 ]
  %58 = phi %"class.sh::TQualifierWrapperBase"** [ %63, %56 ], [ %47, %45 ]
  %59 = phi i64 [ %65, %56 ], [ %54, %45 ]
  %60 = bitcast %"class.sh::TQualifierWrapperBase"** %58 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast %"class.sh::TQualifierWrapperBase"** %57 to i64*
  store i64 %61, i64* %62, align 8
  %63 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %58, i64 1
  %64 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %57, i64 1
  %65 = add i64 %59, -1
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %56, !llvm.loop !90

67:                                               ; preds = %56, %45
  %68 = phi %"class.sh::TQualifierWrapperBase"** [ undef, %45 ], [ %64, %56 ]
  %69 = phi %"class.sh::TQualifierWrapperBase"** [ %46, %45 ], [ %64, %56 ]
  %70 = phi %"class.sh::TQualifierWrapperBase"** [ %47, %45 ], [ %63, %56 ]
  %71 = icmp ult i64 %51, 56
  br i1 %71, label %300, label %345

72:                                               ; preds = %36
  %73 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %31, i64 -1
  %74 = bitcast %"class.sh::TQualifierWrapperBase"** %73 to i8*
  %75 = sub i64 0, %19
  %76 = getelementptr i8, i8* %74, i64 %75
  %77 = ptrtoint i8* %76 to i64
  %78 = lshr i64 %77, 3
  %79 = add nuw nsw i64 %78, 1
  %80 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %79
  %81 = bitcast %"class.sh::TQualifierWrapperBase"** %80 to i8*
  %82 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %29, i64 %79
  %83 = icmp ugt %"class.sh::TQualifierWrapperBase"** %82, %6
  %84 = icmp ult i8* %30, %81
  %85 = and i1 %83, %84
  br i1 %85, label %45, label %86

86:                                               ; preds = %72
  %87 = and i64 %43, 4611686018427387900
  %88 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %87
  %89 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %29, i64 %87
  %90 = add nsw i64 %87, -4
  %91 = lshr exact i64 %90, 2
  %92 = add nuw nsw i64 %91, 1
  %93 = and i64 %92, 3
  %94 = icmp ult i64 %90, 12
  br i1 %94, label %146, label %95

95:                                               ; preds = %86
  %96 = sub nsw i64 %92, %93
  br label %97

97:                                               ; preds = %97, %95
  %98 = phi i64 [ 0, %95 ], [ %143, %97 ]
  %99 = phi i64 [ %96, %95 ], [ %144, %97 ]
  %100 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %98
  %101 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %29, i64 %98
  %102 = bitcast %"class.sh::TQualifierWrapperBase"** %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8, !alias.scope !91
  %104 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %101, i64 2
  %105 = bitcast %"class.sh::TQualifierWrapperBase"** %104 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 8, !alias.scope !91
  %107 = bitcast %"class.sh::TQualifierWrapperBase"** %100 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %107, align 8, !alias.scope !94, !noalias !91
  %108 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %100, i64 2
  %109 = bitcast %"class.sh::TQualifierWrapperBase"** %108 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %109, align 8, !alias.scope !94, !noalias !91
  %110 = or i64 %98, 4
  %111 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %110
  %112 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %29, i64 %110
  %113 = bitcast %"class.sh::TQualifierWrapperBase"** %112 to <2 x i64>*
  %114 = load <2 x i64>, <2 x i64>* %113, align 8, !alias.scope !91
  %115 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %112, i64 2
  %116 = bitcast %"class.sh::TQualifierWrapperBase"** %115 to <2 x i64>*
  %117 = load <2 x i64>, <2 x i64>* %116, align 8, !alias.scope !91
  %118 = bitcast %"class.sh::TQualifierWrapperBase"** %111 to <2 x i64>*
  store <2 x i64> %114, <2 x i64>* %118, align 8, !alias.scope !94, !noalias !91
  %119 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %111, i64 2
  %120 = bitcast %"class.sh::TQualifierWrapperBase"** %119 to <2 x i64>*
  store <2 x i64> %117, <2 x i64>* %120, align 8, !alias.scope !94, !noalias !91
  %121 = or i64 %98, 8
  %122 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %121
  %123 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %29, i64 %121
  %124 = bitcast %"class.sh::TQualifierWrapperBase"** %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8, !alias.scope !91
  %126 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %123, i64 2
  %127 = bitcast %"class.sh::TQualifierWrapperBase"** %126 to <2 x i64>*
  %128 = load <2 x i64>, <2 x i64>* %127, align 8, !alias.scope !91
  %129 = bitcast %"class.sh::TQualifierWrapperBase"** %122 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %129, align 8, !alias.scope !94, !noalias !91
  %130 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %122, i64 2
  %131 = bitcast %"class.sh::TQualifierWrapperBase"** %130 to <2 x i64>*
  store <2 x i64> %128, <2 x i64>* %131, align 8, !alias.scope !94, !noalias !91
  %132 = or i64 %98, 12
  %133 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %132
  %134 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %29, i64 %132
  %135 = bitcast %"class.sh::TQualifierWrapperBase"** %134 to <2 x i64>*
  %136 = load <2 x i64>, <2 x i64>* %135, align 8, !alias.scope !91
  %137 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %134, i64 2
  %138 = bitcast %"class.sh::TQualifierWrapperBase"** %137 to <2 x i64>*
  %139 = load <2 x i64>, <2 x i64>* %138, align 8, !alias.scope !91
  %140 = bitcast %"class.sh::TQualifierWrapperBase"** %133 to <2 x i64>*
  store <2 x i64> %136, <2 x i64>* %140, align 8, !alias.scope !94, !noalias !91
  %141 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %133, i64 2
  %142 = bitcast %"class.sh::TQualifierWrapperBase"** %141 to <2 x i64>*
  store <2 x i64> %139, <2 x i64>* %142, align 8, !alias.scope !94, !noalias !91
  %143 = add i64 %98, 16
  %144 = add i64 %99, -4
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %97, !llvm.loop !96

146:                                              ; preds = %97, %86
  %147 = phi i64 [ 0, %86 ], [ %143, %97 ]
  %148 = icmp eq i64 %93, 0
  br i1 %148, label %165, label %149

149:                                              ; preds = %146, %149
  %150 = phi i64 [ %162, %149 ], [ %147, %146 ]
  %151 = phi i64 [ %163, %149 ], [ %93, %146 ]
  %152 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %150
  %153 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %29, i64 %150
  %154 = bitcast %"class.sh::TQualifierWrapperBase"** %153 to <2 x i64>*
  %155 = load <2 x i64>, <2 x i64>* %154, align 8, !alias.scope !91
  %156 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %153, i64 2
  %157 = bitcast %"class.sh::TQualifierWrapperBase"** %156 to <2 x i64>*
  %158 = load <2 x i64>, <2 x i64>* %157, align 8, !alias.scope !91
  %159 = bitcast %"class.sh::TQualifierWrapperBase"** %152 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %159, align 8, !alias.scope !94, !noalias !91
  %160 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %152, i64 2
  %161 = bitcast %"class.sh::TQualifierWrapperBase"** %160 to <2 x i64>*
  store <2 x i64> %158, <2 x i64>* %161, align 8, !alias.scope !94, !noalias !91
  %162 = add i64 %150, 4
  %163 = add i64 %151, -1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %149, !llvm.loop !97

165:                                              ; preds = %149, %146
  %166 = icmp eq i64 %43, %87
  br i1 %166, label %300, label %45

167:                                              ; preds = %28
  %168 = icmp eq %"class.sh::TQualifierWrapperBase"** %15, %31
  br i1 %168, label %1028, label %169

169:                                              ; preds = %167
  %170 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %15, i64 -1
  %171 = bitcast %"class.sh::TQualifierWrapperBase"** %170 to i8*
  %172 = sub i64 0, %18
  %173 = getelementptr i8, i8* %171, i64 %172
  %174 = ptrtoint i8* %173 to i64
  %175 = lshr i64 %174, 3
  %176 = add nuw nsw i64 %175, 1
  %177 = icmp ult i64 %176, 4
  br i1 %177, label %178, label %205

178:                                              ; preds = %298, %205, %169
  %179 = phi %"class.sh::TQualifierWrapperBase"** [ %6, %205 ], [ %6, %169 ], [ %221, %298 ]
  %180 = phi %"class.sh::TQualifierWrapperBase"** [ %31, %205 ], [ %31, %169 ], [ %222, %298 ]
  %181 = ptrtoint %"class.sh::TQualifierWrapperBase"** %180 to i64
  %182 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %15, i64 -1
  %183 = ptrtoint %"class.sh::TQualifierWrapperBase"** %182 to i64
  %184 = sub i64 %183, %181
  %185 = lshr i64 %184, 3
  %186 = add nuw nsw i64 %185, 1
  %187 = and i64 %186, 7
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %200, label %189

189:                                              ; preds = %178, %189
  %190 = phi %"class.sh::TQualifierWrapperBase"** [ %197, %189 ], [ %179, %178 ]
  %191 = phi %"class.sh::TQualifierWrapperBase"** [ %196, %189 ], [ %180, %178 ]
  %192 = phi i64 [ %198, %189 ], [ %187, %178 ]
  %193 = bitcast %"class.sh::TQualifierWrapperBase"** %191 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = bitcast %"class.sh::TQualifierWrapperBase"** %190 to i64*
  store i64 %194, i64* %195, align 8
  %196 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %191, i64 1
  %197 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %190, i64 1
  %198 = add i64 %192, -1
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %189, !llvm.loop !98

200:                                              ; preds = %189, %178
  %201 = phi %"class.sh::TQualifierWrapperBase"** [ undef, %178 ], [ %197, %189 ]
  %202 = phi %"class.sh::TQualifierWrapperBase"** [ %179, %178 ], [ %197, %189 ]
  %203 = phi %"class.sh::TQualifierWrapperBase"** [ %180, %178 ], [ %196, %189 ]
  %204 = icmp ult i64 %184, 56
  br i1 %204, label %389, label %588

205:                                              ; preds = %169
  %206 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %15, i64 -1
  %207 = bitcast %"class.sh::TQualifierWrapperBase"** %206 to i8*
  %208 = sub i64 0, %18
  %209 = getelementptr i8, i8* %207, i64 %208
  %210 = ptrtoint i8* %209 to i64
  %211 = lshr i64 %210, 3
  %212 = add nuw nsw i64 %211, 1
  %213 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %212
  %214 = bitcast %"class.sh::TQualifierWrapperBase"** %213 to i8*
  %215 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %31, i64 %212
  %216 = icmp ugt %"class.sh::TQualifierWrapperBase"** %215, %6
  %217 = icmp ult i8* %32, %214
  %218 = and i1 %216, %217
  br i1 %218, label %178, label %219

219:                                              ; preds = %205
  %220 = and i64 %176, 4611686018427387900
  %221 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %220
  %222 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %31, i64 %220
  %223 = add nsw i64 %220, -4
  %224 = lshr exact i64 %223, 2
  %225 = add nuw nsw i64 %224, 1
  %226 = and i64 %225, 3
  %227 = icmp ult i64 %223, 12
  br i1 %227, label %279, label %228

228:                                              ; preds = %219
  %229 = sub nsw i64 %225, %226
  br label %230

230:                                              ; preds = %230, %228
  %231 = phi i64 [ 0, %228 ], [ %276, %230 ]
  %232 = phi i64 [ %229, %228 ], [ %277, %230 ]
  %233 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %231
  %234 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %31, i64 %231
  %235 = bitcast %"class.sh::TQualifierWrapperBase"** %234 to <2 x i64>*
  %236 = load <2 x i64>, <2 x i64>* %235, align 8, !alias.scope !99
  %237 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %234, i64 2
  %238 = bitcast %"class.sh::TQualifierWrapperBase"** %237 to <2 x i64>*
  %239 = load <2 x i64>, <2 x i64>* %238, align 8, !alias.scope !99
  %240 = bitcast %"class.sh::TQualifierWrapperBase"** %233 to <2 x i64>*
  store <2 x i64> %236, <2 x i64>* %240, align 8, !alias.scope !102, !noalias !99
  %241 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %233, i64 2
  %242 = bitcast %"class.sh::TQualifierWrapperBase"** %241 to <2 x i64>*
  store <2 x i64> %239, <2 x i64>* %242, align 8, !alias.scope !102, !noalias !99
  %243 = or i64 %231, 4
  %244 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %243
  %245 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %31, i64 %243
  %246 = bitcast %"class.sh::TQualifierWrapperBase"** %245 to <2 x i64>*
  %247 = load <2 x i64>, <2 x i64>* %246, align 8, !alias.scope !99
  %248 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %245, i64 2
  %249 = bitcast %"class.sh::TQualifierWrapperBase"** %248 to <2 x i64>*
  %250 = load <2 x i64>, <2 x i64>* %249, align 8, !alias.scope !99
  %251 = bitcast %"class.sh::TQualifierWrapperBase"** %244 to <2 x i64>*
  store <2 x i64> %247, <2 x i64>* %251, align 8, !alias.scope !102, !noalias !99
  %252 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %244, i64 2
  %253 = bitcast %"class.sh::TQualifierWrapperBase"** %252 to <2 x i64>*
  store <2 x i64> %250, <2 x i64>* %253, align 8, !alias.scope !102, !noalias !99
  %254 = or i64 %231, 8
  %255 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %254
  %256 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %31, i64 %254
  %257 = bitcast %"class.sh::TQualifierWrapperBase"** %256 to <2 x i64>*
  %258 = load <2 x i64>, <2 x i64>* %257, align 8, !alias.scope !99
  %259 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %256, i64 2
  %260 = bitcast %"class.sh::TQualifierWrapperBase"** %259 to <2 x i64>*
  %261 = load <2 x i64>, <2 x i64>* %260, align 8, !alias.scope !99
  %262 = bitcast %"class.sh::TQualifierWrapperBase"** %255 to <2 x i64>*
  store <2 x i64> %258, <2 x i64>* %262, align 8, !alias.scope !102, !noalias !99
  %263 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %255, i64 2
  %264 = bitcast %"class.sh::TQualifierWrapperBase"** %263 to <2 x i64>*
  store <2 x i64> %261, <2 x i64>* %264, align 8, !alias.scope !102, !noalias !99
  %265 = or i64 %231, 12
  %266 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %265
  %267 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %31, i64 %265
  %268 = bitcast %"class.sh::TQualifierWrapperBase"** %267 to <2 x i64>*
  %269 = load <2 x i64>, <2 x i64>* %268, align 8, !alias.scope !99
  %270 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %267, i64 2
  %271 = bitcast %"class.sh::TQualifierWrapperBase"** %270 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 8, !alias.scope !99
  %273 = bitcast %"class.sh::TQualifierWrapperBase"** %266 to <2 x i64>*
  store <2 x i64> %269, <2 x i64>* %273, align 8, !alias.scope !102, !noalias !99
  %274 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %266, i64 2
  %275 = bitcast %"class.sh::TQualifierWrapperBase"** %274 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %275, align 8, !alias.scope !102, !noalias !99
  %276 = add i64 %231, 16
  %277 = add i64 %232, -4
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %230, !llvm.loop !104

279:                                              ; preds = %230, %219
  %280 = phi i64 [ 0, %219 ], [ %276, %230 ]
  %281 = icmp eq i64 %226, 0
  br i1 %281, label %298, label %282

282:                                              ; preds = %279, %282
  %283 = phi i64 [ %295, %282 ], [ %280, %279 ]
  %284 = phi i64 [ %296, %282 ], [ %226, %279 ]
  %285 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %6, i64 %283
  %286 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %31, i64 %283
  %287 = bitcast %"class.sh::TQualifierWrapperBase"** %286 to <2 x i64>*
  %288 = load <2 x i64>, <2 x i64>* %287, align 8, !alias.scope !99
  %289 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %286, i64 2
  %290 = bitcast %"class.sh::TQualifierWrapperBase"** %289 to <2 x i64>*
  %291 = load <2 x i64>, <2 x i64>* %290, align 8, !alias.scope !99
  %292 = bitcast %"class.sh::TQualifierWrapperBase"** %285 to <2 x i64>*
  store <2 x i64> %288, <2 x i64>* %292, align 8, !alias.scope !102, !noalias !99
  %293 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %285, i64 2
  %294 = bitcast %"class.sh::TQualifierWrapperBase"** %293 to <2 x i64>*
  store <2 x i64> %291, <2 x i64>* %294, align 8, !alias.scope !102, !noalias !99
  %295 = add i64 %283, 4
  %296 = add i64 %284, -1
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %298, label %282, !llvm.loop !105

298:                                              ; preds = %282, %279
  %299 = icmp eq i64 %176, %220
  br i1 %299, label %389, label %178

300:                                              ; preds = %67, %345, %165
  %301 = phi %"class.sh::TQualifierWrapperBase"** [ %88, %165 ], [ %68, %67 ], [ %387, %345 ]
  %302 = icmp eq %"class.sh::TQualifierWrapperBase"** %301, %6
  br i1 %302, label %1028, label %303

303:                                              ; preds = %300, %340
  %304 = phi %"class.sh::TQualifierWrapperBase"** [ %342, %340 ], [ %6, %300 ]
  %305 = phi %"class.sh::TQualifierWrapperBase"** [ %343, %340 ], [ %29, %300 ]
  %306 = phi %"class.sh::TQualifierWrapperBase"** [ %341, %340 ], [ %31, %300 ]
  %307 = icmp eq %"class.sh::TQualifierWrapperBase"** %306, %15
  br i1 %307, label %308, label %316

308:                                              ; preds = %303
  %309 = ptrtoint %"class.sh::TQualifierWrapperBase"** %301 to i64
  %310 = ptrtoint %"class.sh::TQualifierWrapperBase"** %304 to i64
  %311 = sub i64 %309, %310
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %1028, label %313

313:                                              ; preds = %308
  %314 = bitcast %"class.sh::TQualifierWrapperBase"** %305 to i8*
  %315 = bitcast %"class.sh::TQualifierWrapperBase"** %304 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %314, i8* align 8 %315, i64 %311, i1 false) #9
  br label %1028

316:                                              ; preds = %303
  %317 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %306, align 8
  %318 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %304, align 8
  %319 = bitcast %"class.sh::TQualifierWrapperBase"* %317 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %320 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %319, align 8
  %321 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %320, i64 4
  %322 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %321, align 8
  %323 = tail call i32 %322(%"class.sh::TQualifierWrapperBase"* %317) #9
  %324 = bitcast %"class.sh::TQualifierWrapperBase"* %318 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %325 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %324, align 8
  %326 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %325, i64 4
  %327 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %326, align 8
  %328 = tail call i32 %327(%"class.sh::TQualifierWrapperBase"* %318) #9
  %329 = icmp ult i32 %323, %328
  br i1 %329, label %330, label %335

330:                                              ; preds = %316
  %331 = bitcast %"class.sh::TQualifierWrapperBase"** %306 to i64*
  %332 = load i64, i64* %331, align 8
  %333 = bitcast %"class.sh::TQualifierWrapperBase"** %305 to i64*
  store i64 %332, i64* %333, align 8
  %334 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %306, i64 1
  br label %340

335:                                              ; preds = %316
  %336 = bitcast %"class.sh::TQualifierWrapperBase"** %304 to i64*
  %337 = load i64, i64* %336, align 8
  %338 = bitcast %"class.sh::TQualifierWrapperBase"** %305 to i64*
  store i64 %337, i64* %338, align 8
  %339 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %304, i64 1
  br label %340

340:                                              ; preds = %335, %330
  %341 = phi %"class.sh::TQualifierWrapperBase"** [ %334, %330 ], [ %306, %335 ]
  %342 = phi %"class.sh::TQualifierWrapperBase"** [ %304, %330 ], [ %339, %335 ]
  %343 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %305, i64 1
  %344 = icmp eq %"class.sh::TQualifierWrapperBase"** %342, %301
  br i1 %344, label %1028, label %303

345:                                              ; preds = %67, %345
  %346 = phi %"class.sh::TQualifierWrapperBase"** [ %387, %345 ], [ %69, %67 ]
  %347 = phi %"class.sh::TQualifierWrapperBase"** [ %386, %345 ], [ %70, %67 ]
  %348 = bitcast %"class.sh::TQualifierWrapperBase"** %347 to i64*
  %349 = load i64, i64* %348, align 8
  %350 = bitcast %"class.sh::TQualifierWrapperBase"** %346 to i64*
  store i64 %349, i64* %350, align 8
  %351 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %347, i64 1
  %352 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %346, i64 1
  %353 = bitcast %"class.sh::TQualifierWrapperBase"** %351 to i64*
  %354 = load i64, i64* %353, align 8
  %355 = bitcast %"class.sh::TQualifierWrapperBase"** %352 to i64*
  store i64 %354, i64* %355, align 8
  %356 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %347, i64 2
  %357 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %346, i64 2
  %358 = bitcast %"class.sh::TQualifierWrapperBase"** %356 to i64*
  %359 = load i64, i64* %358, align 8
  %360 = bitcast %"class.sh::TQualifierWrapperBase"** %357 to i64*
  store i64 %359, i64* %360, align 8
  %361 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %347, i64 3
  %362 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %346, i64 3
  %363 = bitcast %"class.sh::TQualifierWrapperBase"** %361 to i64*
  %364 = load i64, i64* %363, align 8
  %365 = bitcast %"class.sh::TQualifierWrapperBase"** %362 to i64*
  store i64 %364, i64* %365, align 8
  %366 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %347, i64 4
  %367 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %346, i64 4
  %368 = bitcast %"class.sh::TQualifierWrapperBase"** %366 to i64*
  %369 = load i64, i64* %368, align 8
  %370 = bitcast %"class.sh::TQualifierWrapperBase"** %367 to i64*
  store i64 %369, i64* %370, align 8
  %371 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %347, i64 5
  %372 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %346, i64 5
  %373 = bitcast %"class.sh::TQualifierWrapperBase"** %371 to i64*
  %374 = load i64, i64* %373, align 8
  %375 = bitcast %"class.sh::TQualifierWrapperBase"** %372 to i64*
  store i64 %374, i64* %375, align 8
  %376 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %347, i64 6
  %377 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %346, i64 6
  %378 = bitcast %"class.sh::TQualifierWrapperBase"** %376 to i64*
  %379 = load i64, i64* %378, align 8
  %380 = bitcast %"class.sh::TQualifierWrapperBase"** %377 to i64*
  store i64 %379, i64* %380, align 8
  %381 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %347, i64 7
  %382 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %346, i64 7
  %383 = bitcast %"class.sh::TQualifierWrapperBase"** %381 to i64*
  %384 = load i64, i64* %383, align 8
  %385 = bitcast %"class.sh::TQualifierWrapperBase"** %382 to i64*
  store i64 %384, i64* %385, align 8
  %386 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %347, i64 8
  %387 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %346, i64 8
  %388 = icmp eq %"class.sh::TQualifierWrapperBase"** %386, %31
  br i1 %388, label %300, label %345, !llvm.loop !106

389:                                              ; preds = %200, %588, %298
  %390 = phi %"class.sh::TQualifierWrapperBase"** [ %221, %298 ], [ %201, %200 ], [ %630, %588 ]
  %391 = icmp eq %"class.sh::TQualifierWrapperBase"** %390, %6
  br i1 %391, label %1028, label %392

392:                                              ; preds = %389, %563
  %393 = phi %"class.sh::TQualifierWrapperBase"** [ %586, %563 ], [ %15, %389 ]
  %394 = phi %"class.sh::TQualifierWrapperBase"** [ %581, %563 ], [ %390, %389 ]
  %395 = phi %"class.sh::TQualifierWrapperBase"** [ %580, %563 ], [ %31, %389 ]
  %396 = icmp eq %"class.sh::TQualifierWrapperBase"** %395, %29
  br i1 %396, label %397, label %563

397:                                              ; preds = %392
  %398 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %394, i64 -1
  %399 = ptrtoint %"class.sh::TQualifierWrapperBase"** %398 to i64
  %400 = sub i64 %399, %9
  %401 = lshr i64 %400, 3
  %402 = add nuw nsw i64 %401, 1
  %403 = icmp ult i64 %402, 4
  br i1 %403, label %494, label %404

404:                                              ; preds = %397
  %405 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %394, i64 -1
  %406 = ptrtoint %"class.sh::TQualifierWrapperBase"** %405 to i64
  %407 = sub i64 %406, %9
  %408 = lshr i64 %407, 3
  %409 = xor i64 %408, -1
  %410 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %393, i64 %409
  %411 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %394, i64 %409
  %412 = icmp ult %"class.sh::TQualifierWrapperBase"** %410, %394
  %413 = icmp ult %"class.sh::TQualifierWrapperBase"** %411, %393
  %414 = and i1 %412, %413
  br i1 %414, label %494, label %415

415:                                              ; preds = %404
  %416 = and i64 %402, 4611686018427387900
  %417 = sub nsw i64 0, %416
  %418 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %394, i64 %417
  %419 = sub nsw i64 0, %416
  %420 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %393, i64 %419
  %421 = add nsw i64 %416, -4
  %422 = lshr exact i64 %421, 2
  %423 = add nuw nsw i64 %422, 1
  %424 = and i64 %423, 1
  %425 = icmp eq i64 %421, 0
  br i1 %425, label %472, label %426

426:                                              ; preds = %415
  %427 = sub nuw nsw i64 %423, %424
  %428 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %394, i64 -1
  %429 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %393, i64 -1
  %430 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %394, i64 -1
  %431 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %393, i64 -1
  br label %432

432:                                              ; preds = %432, %426
  %433 = phi i64 [ 0, %426 ], [ %467, %432 ]
  %434 = phi i64 [ %427, %426 ], [ %468, %432 ]
  %435 = sub i64 0, %433
  %436 = sub i64 0, %433
  %437 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %428, i64 %435
  %438 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %437, i64 -1
  %439 = bitcast %"class.sh::TQualifierWrapperBase"** %438 to <2 x i64>*
  %440 = load <2 x i64>, <2 x i64>* %439, align 8, !alias.scope !107
  %441 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %437, i64 -2
  %442 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %441, i64 -1
  %443 = bitcast %"class.sh::TQualifierWrapperBase"** %442 to <2 x i64>*
  %444 = load <2 x i64>, <2 x i64>* %443, align 8, !alias.scope !107
  %445 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %429, i64 %436
  %446 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %445, i64 -1
  %447 = bitcast %"class.sh::TQualifierWrapperBase"** %446 to <2 x i64>*
  store <2 x i64> %440, <2 x i64>* %447, align 8, !alias.scope !110, !noalias !107
  %448 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %445, i64 -2
  %449 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %448, i64 -1
  %450 = bitcast %"class.sh::TQualifierWrapperBase"** %449 to <2 x i64>*
  store <2 x i64> %444, <2 x i64>* %450, align 8, !alias.scope !110, !noalias !107
  %451 = sub nuw nsw i64 -4, %433
  %452 = sub nuw nsw i64 -4, %433
  %453 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %430, i64 %451
  %454 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %453, i64 -1
  %455 = bitcast %"class.sh::TQualifierWrapperBase"** %454 to <2 x i64>*
  %456 = load <2 x i64>, <2 x i64>* %455, align 8, !alias.scope !107
  %457 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %453, i64 -2
  %458 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %457, i64 -1
  %459 = bitcast %"class.sh::TQualifierWrapperBase"** %458 to <2 x i64>*
  %460 = load <2 x i64>, <2 x i64>* %459, align 8, !alias.scope !107
  %461 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %431, i64 %452
  %462 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %461, i64 -1
  %463 = bitcast %"class.sh::TQualifierWrapperBase"** %462 to <2 x i64>*
  store <2 x i64> %456, <2 x i64>* %463, align 8, !alias.scope !110, !noalias !107
  %464 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %461, i64 -2
  %465 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %464, i64 -1
  %466 = bitcast %"class.sh::TQualifierWrapperBase"** %465 to <2 x i64>*
  store <2 x i64> %460, <2 x i64>* %466, align 8, !alias.scope !110, !noalias !107
  %467 = add i64 %433, 8
  %468 = add i64 %434, -2
  %469 = icmp eq i64 %468, 0
  br i1 %469, label %470, label %432, !llvm.loop !112

470:                                              ; preds = %432
  %471 = sub nuw nsw i64 -8, %433
  br label %472

472:                                              ; preds = %470, %415
  %473 = phi i64 [ 0, %415 ], [ %471, %470 ]
  %474 = icmp eq i64 %424, 0
  br i1 %474, label %492, label %475

475:                                              ; preds = %472
  %476 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %394, i64 -1
  %477 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %393, i64 -1
  %478 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %476, i64 %473
  %479 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %478, i64 -1
  %480 = bitcast %"class.sh::TQualifierWrapperBase"** %479 to <2 x i64>*
  %481 = load <2 x i64>, <2 x i64>* %480, align 8, !alias.scope !107
  %482 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %478, i64 -2
  %483 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %482, i64 -1
  %484 = bitcast %"class.sh::TQualifierWrapperBase"** %483 to <2 x i64>*
  %485 = load <2 x i64>, <2 x i64>* %484, align 8, !alias.scope !107
  %486 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %477, i64 %473
  %487 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %486, i64 -1
  %488 = bitcast %"class.sh::TQualifierWrapperBase"** %487 to <2 x i64>*
  store <2 x i64> %481, <2 x i64>* %488, align 8, !alias.scope !110, !noalias !107
  %489 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %486, i64 -2
  %490 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %489, i64 -1
  %491 = bitcast %"class.sh::TQualifierWrapperBase"** %490 to <2 x i64>*
  store <2 x i64> %485, <2 x i64>* %491, align 8, !alias.scope !110, !noalias !107
  br label %492

492:                                              ; preds = %472, %475
  %493 = icmp eq i64 %402, %416
  br i1 %493, label %1028, label %494

494:                                              ; preds = %492, %404, %397
  %495 = phi %"class.sh::TQualifierWrapperBase"** [ %394, %404 ], [ %394, %397 ], [ %418, %492 ]
  %496 = phi %"class.sh::TQualifierWrapperBase"** [ %393, %404 ], [ %393, %397 ], [ %420, %492 ]
  %497 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %495, i64 -1
  %498 = ptrtoint %"class.sh::TQualifierWrapperBase"** %497 to i64
  %499 = sub i64 %498, %9
  %500 = lshr i64 %499, 3
  %501 = add nuw nsw i64 %500, 1
  %502 = and i64 %501, 7
  %503 = icmp eq i64 %502, 0
  br i1 %503, label %515, label %504

504:                                              ; preds = %494, %504
  %505 = phi %"class.sh::TQualifierWrapperBase"** [ %508, %504 ], [ %495, %494 ]
  %506 = phi %"class.sh::TQualifierWrapperBase"** [ %511, %504 ], [ %496, %494 ]
  %507 = phi i64 [ %513, %504 ], [ %502, %494 ]
  %508 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %505, i64 -1
  %509 = bitcast %"class.sh::TQualifierWrapperBase"** %508 to i64*
  %510 = load i64, i64* %509, align 8
  %511 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %506, i64 -1
  %512 = bitcast %"class.sh::TQualifierWrapperBase"** %511 to i64*
  store i64 %510, i64* %512, align 8
  %513 = add i64 %507, -1
  %514 = icmp eq i64 %513, 0
  br i1 %514, label %515, label %504, !llvm.loop !113

515:                                              ; preds = %504, %494
  %516 = phi %"class.sh::TQualifierWrapperBase"** [ %495, %494 ], [ %508, %504 ]
  %517 = phi %"class.sh::TQualifierWrapperBase"** [ %496, %494 ], [ %511, %504 ]
  %518 = icmp ult i64 %499, 56
  br i1 %518, label %1028, label %519

519:                                              ; preds = %515, %519
  %520 = phi %"class.sh::TQualifierWrapperBase"** [ %557, %519 ], [ %516, %515 ]
  %521 = phi %"class.sh::TQualifierWrapperBase"** [ %560, %519 ], [ %517, %515 ]
  %522 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %520, i64 -1
  %523 = bitcast %"class.sh::TQualifierWrapperBase"** %522 to i64*
  %524 = load i64, i64* %523, align 8
  %525 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %521, i64 -1
  %526 = bitcast %"class.sh::TQualifierWrapperBase"** %525 to i64*
  store i64 %524, i64* %526, align 8
  %527 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %520, i64 -2
  %528 = bitcast %"class.sh::TQualifierWrapperBase"** %527 to i64*
  %529 = load i64, i64* %528, align 8
  %530 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %521, i64 -2
  %531 = bitcast %"class.sh::TQualifierWrapperBase"** %530 to i64*
  store i64 %529, i64* %531, align 8
  %532 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %520, i64 -3
  %533 = bitcast %"class.sh::TQualifierWrapperBase"** %532 to i64*
  %534 = load i64, i64* %533, align 8
  %535 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %521, i64 -3
  %536 = bitcast %"class.sh::TQualifierWrapperBase"** %535 to i64*
  store i64 %534, i64* %536, align 8
  %537 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %520, i64 -4
  %538 = bitcast %"class.sh::TQualifierWrapperBase"** %537 to i64*
  %539 = load i64, i64* %538, align 8
  %540 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %521, i64 -4
  %541 = bitcast %"class.sh::TQualifierWrapperBase"** %540 to i64*
  store i64 %539, i64* %541, align 8
  %542 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %520, i64 -5
  %543 = bitcast %"class.sh::TQualifierWrapperBase"** %542 to i64*
  %544 = load i64, i64* %543, align 8
  %545 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %521, i64 -5
  %546 = bitcast %"class.sh::TQualifierWrapperBase"** %545 to i64*
  store i64 %544, i64* %546, align 8
  %547 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %520, i64 -6
  %548 = bitcast %"class.sh::TQualifierWrapperBase"** %547 to i64*
  %549 = load i64, i64* %548, align 8
  %550 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %521, i64 -6
  %551 = bitcast %"class.sh::TQualifierWrapperBase"** %550 to i64*
  store i64 %549, i64* %551, align 8
  %552 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %520, i64 -7
  %553 = bitcast %"class.sh::TQualifierWrapperBase"** %552 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %521, i64 -7
  %556 = bitcast %"class.sh::TQualifierWrapperBase"** %555 to i64*
  store i64 %554, i64* %556, align 8
  %557 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %520, i64 -8
  %558 = bitcast %"class.sh::TQualifierWrapperBase"** %557 to i64*
  %559 = load i64, i64* %558, align 8
  %560 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %521, i64 -8
  %561 = bitcast %"class.sh::TQualifierWrapperBase"** %560 to i64*
  store i64 %559, i64* %561, align 8
  %562 = icmp eq %"class.sh::TQualifierWrapperBase"** %557, %6
  br i1 %562, label %1028, label %519, !llvm.loop !114

563:                                              ; preds = %392
  %564 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %395, i64 -1
  %565 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %394, i64 -1
  %566 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %565, align 8
  %567 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %564, align 8
  %568 = bitcast %"class.sh::TQualifierWrapperBase"* %566 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %569 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %568, align 8
  %570 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %569, i64 4
  %571 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %570, align 8
  %572 = tail call i32 %571(%"class.sh::TQualifierWrapperBase"* %566) #9
  %573 = bitcast %"class.sh::TQualifierWrapperBase"* %567 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %574 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %573, align 8
  %575 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %574, i64 4
  %576 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %575, align 8
  %577 = tail call i32 %576(%"class.sh::TQualifierWrapperBase"* %567) #9
  %578 = icmp ult i32 %572, %577
  %579 = select i1 %578, %"class.sh::TQualifierWrapperBase"** %564, %"class.sh::TQualifierWrapperBase"** %565
  %580 = select i1 %578, %"class.sh::TQualifierWrapperBase"** %564, %"class.sh::TQualifierWrapperBase"** %395
  %581 = select i1 %578, %"class.sh::TQualifierWrapperBase"** %394, %"class.sh::TQualifierWrapperBase"** %565
  %582 = bitcast %"class.sh::TQualifierWrapperBase"** %579 to i64*
  %583 = load i64, i64* %582, align 8
  %584 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %393, i64 -1
  %585 = bitcast %"class.sh::TQualifierWrapperBase"** %584 to i64*
  store i64 %583, i64* %585, align 8
  %586 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %393, i64 -1
  %587 = icmp eq %"class.sh::TQualifierWrapperBase"** %581, %6
  br i1 %587, label %1028, label %392

588:                                              ; preds = %200, %588
  %589 = phi %"class.sh::TQualifierWrapperBase"** [ %630, %588 ], [ %202, %200 ]
  %590 = phi %"class.sh::TQualifierWrapperBase"** [ %629, %588 ], [ %203, %200 ]
  %591 = bitcast %"class.sh::TQualifierWrapperBase"** %590 to i64*
  %592 = load i64, i64* %591, align 8
  %593 = bitcast %"class.sh::TQualifierWrapperBase"** %589 to i64*
  store i64 %592, i64* %593, align 8
  %594 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %590, i64 1
  %595 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %589, i64 1
  %596 = bitcast %"class.sh::TQualifierWrapperBase"** %594 to i64*
  %597 = load i64, i64* %596, align 8
  %598 = bitcast %"class.sh::TQualifierWrapperBase"** %595 to i64*
  store i64 %597, i64* %598, align 8
  %599 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %590, i64 2
  %600 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %589, i64 2
  %601 = bitcast %"class.sh::TQualifierWrapperBase"** %599 to i64*
  %602 = load i64, i64* %601, align 8
  %603 = bitcast %"class.sh::TQualifierWrapperBase"** %600 to i64*
  store i64 %602, i64* %603, align 8
  %604 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %590, i64 3
  %605 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %589, i64 3
  %606 = bitcast %"class.sh::TQualifierWrapperBase"** %604 to i64*
  %607 = load i64, i64* %606, align 8
  %608 = bitcast %"class.sh::TQualifierWrapperBase"** %605 to i64*
  store i64 %607, i64* %608, align 8
  %609 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %590, i64 4
  %610 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %589, i64 4
  %611 = bitcast %"class.sh::TQualifierWrapperBase"** %609 to i64*
  %612 = load i64, i64* %611, align 8
  %613 = bitcast %"class.sh::TQualifierWrapperBase"** %610 to i64*
  store i64 %612, i64* %613, align 8
  %614 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %590, i64 5
  %615 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %589, i64 5
  %616 = bitcast %"class.sh::TQualifierWrapperBase"** %614 to i64*
  %617 = load i64, i64* %616, align 8
  %618 = bitcast %"class.sh::TQualifierWrapperBase"** %615 to i64*
  store i64 %617, i64* %618, align 8
  %619 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %590, i64 6
  %620 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %589, i64 6
  %621 = bitcast %"class.sh::TQualifierWrapperBase"** %619 to i64*
  %622 = load i64, i64* %621, align 8
  %623 = bitcast %"class.sh::TQualifierWrapperBase"** %620 to i64*
  store i64 %622, i64* %623, align 8
  %624 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %590, i64 7
  %625 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %589, i64 7
  %626 = bitcast %"class.sh::TQualifierWrapperBase"** %624 to i64*
  %627 = load i64, i64* %626, align 8
  %628 = bitcast %"class.sh::TQualifierWrapperBase"** %625 to i64*
  store i64 %627, i64* %628, align 8
  %629 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %590, i64 8
  %630 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %589, i64 8
  %631 = icmp eq %"class.sh::TQualifierWrapperBase"** %629, %15
  br i1 %631, label %389, label %588, !llvm.loop !115

632:                                              ; preds = %25, %649
  %633 = phi i64 [ %16, %25 ], [ %652, %649 ]
  %634 = phi i64 [ %19, %25 ], [ %651, %649 ]
  %635 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %26, align 8
  %636 = inttoptr i64 %634 to %"class.sh::TQualifierWrapperBase"**
  %637 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %636, align 8
  %638 = bitcast %"class.sh::TQualifierWrapperBase"* %635 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %639 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %638, align 8
  %640 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %639, i64 4
  %641 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %640, align 8
  %642 = tail call i32 %641(%"class.sh::TQualifierWrapperBase"* %635) #9
  %643 = bitcast %"class.sh::TQualifierWrapperBase"* %637 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %644 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %643, align 8
  %645 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %644, i64 4
  %646 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %645, align 8
  %647 = tail call i32 %646(%"class.sh::TQualifierWrapperBase"* %637) #9
  %648 = icmp ult i32 %642, %647
  br i1 %648, label %654, label %649

649:                                              ; preds = %632
  %650 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %636, i64 1
  %651 = ptrtoint %"class.sh::TQualifierWrapperBase"** %650 to i64
  %652 = add nsw i64 %633, -1
  %653 = icmp eq i64 %652, 0
  br i1 %653, label %1028, label %632

654:                                              ; preds = %632
  %655 = inttoptr i64 %634 to %"class.sh::TQualifierWrapperBase"**
  %656 = icmp slt i64 %633, %17
  br i1 %656, label %657, label %694

657:                                              ; preds = %654
  %658 = sdiv i64 %17, 2
  %659 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %26, i64 %658
  %660 = ptrtoint %"class.sh::TQualifierWrapperBase"** %659 to i64
  %661 = sub i64 %18, %634
  %662 = icmp eq i64 %661, 0
  br i1 %662, label %689, label %663

663:                                              ; preds = %657
  %664 = ashr exact i64 %661, 3
  br label %665

665:                                              ; preds = %665, %663
  %666 = phi %"class.sh::TQualifierWrapperBase"** [ %687, %665 ], [ %655, %663 ]
  %667 = phi i64 [ %686, %665 ], [ %664, %663 ]
  %668 = lshr i64 %667, 1
  %669 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %666, i64 %668
  %670 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %659, align 8
  %671 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %669, align 8
  %672 = bitcast %"class.sh::TQualifierWrapperBase"* %670 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %673 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %672, align 8
  %674 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %673, i64 4
  %675 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %674, align 8
  %676 = tail call i32 %675(%"class.sh::TQualifierWrapperBase"* %670) #9
  %677 = bitcast %"class.sh::TQualifierWrapperBase"* %671 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %678 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %677, align 8
  %679 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %678, i64 4
  %680 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %679, align 8
  %681 = tail call i32 %680(%"class.sh::TQualifierWrapperBase"* %671) #9
  %682 = icmp ult i32 %676, %681
  %683 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %669, i64 1
  %684 = xor i64 %668, -1
  %685 = add i64 %667, %684
  %686 = select i1 %682, i64 %668, i64 %685
  %687 = select i1 %682, %"class.sh::TQualifierWrapperBase"** %666, %"class.sh::TQualifierWrapperBase"** %683
  %688 = icmp eq i64 %686, 0
  br i1 %688, label %689, label %665

689:                                              ; preds = %665, %657
  %690 = phi %"class.sh::TQualifierWrapperBase"** [ %655, %657 ], [ %687, %665 ]
  %691 = ptrtoint %"class.sh::TQualifierWrapperBase"** %690 to i64
  %692 = sub i64 %691, %634
  %693 = ashr exact i64 %692, 3
  br label %739

694:                                              ; preds = %654
  %695 = icmp eq i64 %633, 1
  br i1 %695, label %696, label %701

696:                                              ; preds = %694
  %697 = inttoptr i64 %634 to i64*
  %698 = load i64, i64* %697, align 8
  %699 = inttoptr i64 %18 to i64*
  %700 = load i64, i64* %699, align 8
  store i64 %700, i64* %697, align 8
  store i64 %698, i64* %699, align 8
  br label %1028

701:                                              ; preds = %694
  %702 = sdiv i64 %633, 2
  %703 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %655, i64 %702
  %704 = ptrtoint %"class.sh::TQualifierWrapperBase"** %703 to i64
  %705 = ptrtoint %"class.sh::TQualifierWrapperBase"** %15 to i64
  %706 = sub i64 %705, %18
  %707 = icmp eq i64 %706, 0
  br i1 %707, label %734, label %708

708:                                              ; preds = %701
  %709 = ashr exact i64 %706, 3
  br label %710

710:                                              ; preds = %710, %708
  %711 = phi %"class.sh::TQualifierWrapperBase"** [ %732, %710 ], [ %26, %708 ]
  %712 = phi i64 [ %731, %710 ], [ %709, %708 ]
  %713 = lshr i64 %712, 1
  %714 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %711, i64 %713
  %715 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %714, align 8
  %716 = load %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %703, align 8
  %717 = bitcast %"class.sh::TQualifierWrapperBase"* %715 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %718 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %717, align 8
  %719 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %718, i64 4
  %720 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %719, align 8
  %721 = tail call i32 %720(%"class.sh::TQualifierWrapperBase"* %715) #9
  %722 = bitcast %"class.sh::TQualifierWrapperBase"* %716 to i32 (%"class.sh::TQualifierWrapperBase"*)***
  %723 = load i32 (%"class.sh::TQualifierWrapperBase"*)**, i32 (%"class.sh::TQualifierWrapperBase"*)*** %722, align 8
  %724 = getelementptr inbounds i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %723, i64 4
  %725 = load i32 (%"class.sh::TQualifierWrapperBase"*)*, i32 (%"class.sh::TQualifierWrapperBase"*)** %724, align 8
  %726 = tail call i32 %725(%"class.sh::TQualifierWrapperBase"* %716) #9
  %727 = icmp ult i32 %721, %726
  %728 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %714, i64 1
  %729 = xor i64 %713, -1
  %730 = add i64 %712, %729
  %731 = select i1 %727, i64 %730, i64 %713
  %732 = select i1 %727, %"class.sh::TQualifierWrapperBase"** %728, %"class.sh::TQualifierWrapperBase"** %711
  %733 = icmp eq i64 %731, 0
  br i1 %733, label %734, label %710

734:                                              ; preds = %710, %701
  %735 = phi %"class.sh::TQualifierWrapperBase"** [ %26, %701 ], [ %732, %710 ]
  %736 = ptrtoint %"class.sh::TQualifierWrapperBase"** %735 to i64
  %737 = sub i64 %736, %18
  %738 = ashr exact i64 %737, 3
  br label %739

739:                                              ; preds = %734, %689
  %740 = phi i64 [ %691, %689 ], [ %704, %734 ]
  %741 = phi i64 [ %660, %689 ], [ %736, %734 ]
  %742 = phi i64 [ %658, %689 ], [ %738, %734 ]
  %743 = phi i64 [ %693, %689 ], [ %702, %734 ]
  %744 = sub nsw i64 %633, %743
  %745 = sub nsw i64 %17, %742
  %746 = inttoptr i64 %740 to %"class.sh::TQualifierWrapperBase"**
  %747 = inttoptr i64 %740 to i8*
  %748 = inttoptr i64 %741 to %"class.sh::TQualifierWrapperBase"**
  %749 = inttoptr i64 %740 to i8*
  %750 = inttoptr i64 %18 to i8*
  %751 = icmp eq %"class.sh::TQualifierWrapperBase"** %746, %26
  br i1 %751, label %1013, label %752

752:                                              ; preds = %739
  %753 = icmp eq %"class.sh::TQualifierWrapperBase"** %26, %748
  br i1 %753, label %1013, label %754

754:                                              ; preds = %752
  %755 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %746, i64 1
  %756 = icmp eq %"class.sh::TQualifierWrapperBase"** %755, %26
  br i1 %756, label %757, label %767

757:                                              ; preds = %754
  %758 = inttoptr i64 %740 to i64*
  %759 = load i64, i64* %758, align 8
  %760 = sub i64 %741, %18
  %761 = ashr exact i64 %760, 3
  %762 = icmp eq i64 %760, 0
  br i1 %762, label %764, label %763

763:                                              ; preds = %757
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %749, i8* align 8 %750, i64 %760, i1 false) #9
  br label %764

764:                                              ; preds = %763, %757
  %765 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %746, i64 %761
  %766 = bitcast %"class.sh::TQualifierWrapperBase"** %765 to i64*
  store i64 %759, i64* %766, align 8
  br label %1013

767:                                              ; preds = %754
  %768 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %26, i64 1
  %769 = icmp eq %"class.sh::TQualifierWrapperBase"** %768, %748
  br i1 %769, label %770, label %785

770:                                              ; preds = %767
  %771 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %748, i64 -1
  %772 = bitcast %"class.sh::TQualifierWrapperBase"** %771 to i64*
  %773 = load i64, i64* %772, align 8
  %774 = ptrtoint %"class.sh::TQualifierWrapperBase"** %771 to i64
  %775 = sub i64 %774, %740
  %776 = icmp eq i64 %775, 0
  br i1 %776, label %782, label %777

777:                                              ; preds = %770
  %778 = ashr exact i64 %775, 3
  %779 = sub nsw i64 0, %778
  %780 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %748, i64 %779
  %781 = bitcast %"class.sh::TQualifierWrapperBase"** %780 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %781, i8* align 8 %749, i64 %775, i1 false) #9
  br label %782

782:                                              ; preds = %777, %770
  %783 = phi %"class.sh::TQualifierWrapperBase"** [ %780, %777 ], [ %748, %770 ]
  %784 = inttoptr i64 %740 to i64*
  store i64 %773, i64* %784, align 8
  br label %1013

785:                                              ; preds = %767
  %786 = sub i64 %18, %740
  %787 = ashr exact i64 %786, 3
  %788 = sub i64 %741, %18
  %789 = ashr exact i64 %788, 3
  %790 = icmp eq i64 %787, %789
  br i1 %790, label %791, label %943

791:                                              ; preds = %785
  %792 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %26, i64 -1
  %793 = bitcast %"class.sh::TQualifierWrapperBase"** %792 to i8*
  %794 = sub i64 0, %740
  %795 = getelementptr i8, i8* %793, i64 %794
  %796 = ptrtoint i8* %795 to i64
  %797 = lshr i64 %796, 3
  %798 = add nuw nsw i64 %797, 1
  %799 = icmp ult i64 %798, 4
  br i1 %799, label %888, label %800

800:                                              ; preds = %791
  %801 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %746, i64 1
  %802 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %26, i64 -1
  %803 = bitcast %"class.sh::TQualifierWrapperBase"** %802 to i8*
  %804 = sub i64 0, %740
  %805 = getelementptr i8, i8* %803, i64 %804
  %806 = ptrtoint i8* %805 to i64
  %807 = lshr i64 %806, 3
  %808 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %801, i64 %807
  %809 = bitcast %"class.sh::TQualifierWrapperBase"** %808 to i8*
  %810 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %26, i64 1
  %811 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %810, i64 %807
  %812 = bitcast %"class.sh::TQualifierWrapperBase"** %811 to i8*
  %813 = icmp ult i8* %747, %812
  %814 = icmp ult i8* %27, %809
  %815 = and i1 %813, %814
  br i1 %815, label %888, label %816

816:                                              ; preds = %800
  %817 = and i64 %798, 4611686018427387900
  %818 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %26, i64 %817
  %819 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %746, i64 %817
  %820 = add nsw i64 %817, -4
  %821 = lshr exact i64 %820, 2
  %822 = add nuw nsw i64 %821, 1
  %823 = and i64 %822, 1
  %824 = icmp eq i64 %820, 0
  br i1 %824, label %866, label %825

825:                                              ; preds = %816
  %826 = sub nuw nsw i64 %822, %823
  br label %827

827:                                              ; preds = %827, %825
  %828 = phi i64 [ 0, %825 ], [ %863, %827 ]
  %829 = phi i64 [ %826, %825 ], [ %864, %827 ]
  %830 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %26, i64 %828
  %831 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %746, i64 %828
  %832 = bitcast %"class.sh::TQualifierWrapperBase"** %831 to <2 x i64>*
  %833 = load <2 x i64>, <2 x i64>* %832, align 8, !alias.scope !116, !noalias !119
  %834 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %831, i64 2
  %835 = bitcast %"class.sh::TQualifierWrapperBase"** %834 to <2 x i64>*
  %836 = load <2 x i64>, <2 x i64>* %835, align 8, !alias.scope !116, !noalias !119
  %837 = bitcast %"class.sh::TQualifierWrapperBase"** %830 to <2 x i64>*
  %838 = load <2 x i64>, <2 x i64>* %837, align 8, !alias.scope !119
  %839 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %830, i64 2
  %840 = bitcast %"class.sh::TQualifierWrapperBase"** %839 to <2 x i64>*
  %841 = load <2 x i64>, <2 x i64>* %840, align 8, !alias.scope !119
  %842 = bitcast %"class.sh::TQualifierWrapperBase"** %831 to <2 x i64>*
  store <2 x i64> %838, <2 x i64>* %842, align 8, !alias.scope !116, !noalias !119
  %843 = bitcast %"class.sh::TQualifierWrapperBase"** %834 to <2 x i64>*
  store <2 x i64> %841, <2 x i64>* %843, align 8, !alias.scope !116, !noalias !119
  %844 = bitcast %"class.sh::TQualifierWrapperBase"** %830 to <2 x i64>*
  store <2 x i64> %833, <2 x i64>* %844, align 8, !alias.scope !119
  %845 = bitcast %"class.sh::TQualifierWrapperBase"** %839 to <2 x i64>*
  store <2 x i64> %836, <2 x i64>* %845, align 8, !alias.scope !119
  %846 = or i64 %828, 4
  %847 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %26, i64 %846
  %848 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %746, i64 %846
  %849 = bitcast %"class.sh::TQualifierWrapperBase"** %848 to <2 x i64>*
  %850 = load <2 x i64>, <2 x i64>* %849, align 8, !alias.scope !116, !noalias !119
  %851 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %848, i64 2
  %852 = bitcast %"class.sh::TQualifierWrapperBase"** %851 to <2 x i64>*
  %853 = load <2 x i64>, <2 x i64>* %852, align 8, !alias.scope !116, !noalias !119
  %854 = bitcast %"class.sh::TQualifierWrapperBase"** %847 to <2 x i64>*
  %855 = load <2 x i64>, <2 x i64>* %854, align 8, !alias.scope !119
  %856 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %847, i64 2
  %857 = bitcast %"class.sh::TQualifierWrapperBase"** %856 to <2 x i64>*
  %858 = load <2 x i64>, <2 x i64>* %857, align 8, !alias.scope !119
  %859 = bitcast %"class.sh::TQualifierWrapperBase"** %848 to <2 x i64>*
  store <2 x i64> %855, <2 x i64>* %859, align 8, !alias.scope !116, !noalias !119
  %860 = bitcast %"class.sh::TQualifierWrapperBase"** %851 to <2 x i64>*
  store <2 x i64> %858, <2 x i64>* %860, align 8, !alias.scope !116, !noalias !119
  %861 = bitcast %"class.sh::TQualifierWrapperBase"** %847 to <2 x i64>*
  store <2 x i64> %850, <2 x i64>* %861, align 8, !alias.scope !119
  %862 = bitcast %"class.sh::TQualifierWrapperBase"** %856 to <2 x i64>*
  store <2 x i64> %853, <2 x i64>* %862, align 8, !alias.scope !119
  %863 = add i64 %828, 8
  %864 = add i64 %829, -2
  %865 = icmp eq i64 %864, 0
  br i1 %865, label %866, label %827, !llvm.loop !121

866:                                              ; preds = %827, %816
  %867 = phi i64 [ 0, %816 ], [ %863, %827 ]
  %868 = icmp eq i64 %823, 0
  br i1 %868, label %886, label %869

869:                                              ; preds = %866
  %870 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %26, i64 %867
  %871 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %746, i64 %867
  %872 = bitcast %"class.sh::TQualifierWrapperBase"** %871 to <2 x i64>*
  %873 = load <2 x i64>, <2 x i64>* %872, align 8, !alias.scope !116, !noalias !119
  %874 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %871, i64 2
  %875 = bitcast %"class.sh::TQualifierWrapperBase"** %874 to <2 x i64>*
  %876 = load <2 x i64>, <2 x i64>* %875, align 8, !alias.scope !116, !noalias !119
  %877 = bitcast %"class.sh::TQualifierWrapperBase"** %870 to <2 x i64>*
  %878 = load <2 x i64>, <2 x i64>* %877, align 8, !alias.scope !119
  %879 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %870, i64 2
  %880 = bitcast %"class.sh::TQualifierWrapperBase"** %879 to <2 x i64>*
  %881 = load <2 x i64>, <2 x i64>* %880, align 8, !alias.scope !119
  %882 = bitcast %"class.sh::TQualifierWrapperBase"** %871 to <2 x i64>*
  store <2 x i64> %878, <2 x i64>* %882, align 8, !alias.scope !116, !noalias !119
  %883 = bitcast %"class.sh::TQualifierWrapperBase"** %874 to <2 x i64>*
  store <2 x i64> %881, <2 x i64>* %883, align 8, !alias.scope !116, !noalias !119
  %884 = bitcast %"class.sh::TQualifierWrapperBase"** %870 to <2 x i64>*
  store <2 x i64> %873, <2 x i64>* %884, align 8, !alias.scope !119
  %885 = bitcast %"class.sh::TQualifierWrapperBase"** %879 to <2 x i64>*
  store <2 x i64> %876, <2 x i64>* %885, align 8, !alias.scope !119
  br label %886

886:                                              ; preds = %866, %869
  %887 = icmp eq i64 %798, %817
  br i1 %887, label %1013, label %888

888:                                              ; preds = %886, %800, %791
  %889 = phi %"class.sh::TQualifierWrapperBase"** [ %26, %800 ], [ %26, %791 ], [ %818, %886 ]
  %890 = phi %"class.sh::TQualifierWrapperBase"** [ %746, %800 ], [ %746, %791 ], [ %819, %886 ]
  %891 = ptrtoint %"class.sh::TQualifierWrapperBase"** %890 to i64
  %892 = getelementptr %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %26, i64 -1
  %893 = ptrtoint %"class.sh::TQualifierWrapperBase"** %892 to i64
  %894 = sub i64 %893, %891
  %895 = lshr i64 %894, 3
  %896 = add nuw nsw i64 %895, 1
  %897 = and i64 %896, 3
  %898 = icmp eq i64 %897, 0
  br i1 %898, label %911, label %899

899:                                              ; preds = %888, %899
  %900 = phi %"class.sh::TQualifierWrapperBase"** [ %908, %899 ], [ %889, %888 ]
  %901 = phi %"class.sh::TQualifierWrapperBase"** [ %907, %899 ], [ %890, %888 ]
  %902 = phi i64 [ %909, %899 ], [ %897, %888 ]
  %903 = bitcast %"class.sh::TQualifierWrapperBase"** %901 to i64*
  %904 = load i64, i64* %903, align 8
  %905 = bitcast %"class.sh::TQualifierWrapperBase"** %900 to i64*
  %906 = load i64, i64* %905, align 8
  store i64 %906, i64* %903, align 8
  store i64 %904, i64* %905, align 8
  %907 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %901, i64 1
  %908 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %900, i64 1
  %909 = add i64 %902, -1
  %910 = icmp eq i64 %909, 0
  br i1 %910, label %911, label %899, !llvm.loop !122

911:                                              ; preds = %899, %888
  %912 = phi %"class.sh::TQualifierWrapperBase"** [ %889, %888 ], [ %908, %899 ]
  %913 = phi %"class.sh::TQualifierWrapperBase"** [ %890, %888 ], [ %907, %899 ]
  %914 = icmp ult i64 %894, 24
  br i1 %914, label %1013, label %915

915:                                              ; preds = %911, %915
  %916 = phi %"class.sh::TQualifierWrapperBase"** [ %941, %915 ], [ %912, %911 ]
  %917 = phi %"class.sh::TQualifierWrapperBase"** [ %940, %915 ], [ %913, %911 ]
  %918 = bitcast %"class.sh::TQualifierWrapperBase"** %917 to i64*
  %919 = load i64, i64* %918, align 8
  %920 = bitcast %"class.sh::TQualifierWrapperBase"** %916 to i64*
  %921 = load i64, i64* %920, align 8
  store i64 %921, i64* %918, align 8
  store i64 %919, i64* %920, align 8
  %922 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %917, i64 1
  %923 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %916, i64 1
  %924 = bitcast %"class.sh::TQualifierWrapperBase"** %922 to i64*
  %925 = load i64, i64* %924, align 8
  %926 = bitcast %"class.sh::TQualifierWrapperBase"** %923 to i64*
  %927 = load i64, i64* %926, align 8
  store i64 %927, i64* %924, align 8
  store i64 %925, i64* %926, align 8
  %928 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %917, i64 2
  %929 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %916, i64 2
  %930 = bitcast %"class.sh::TQualifierWrapperBase"** %928 to i64*
  %931 = load i64, i64* %930, align 8
  %932 = bitcast %"class.sh::TQualifierWrapperBase"** %929 to i64*
  %933 = load i64, i64* %932, align 8
  store i64 %933, i64* %930, align 8
  store i64 %931, i64* %932, align 8
  %934 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %917, i64 3
  %935 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %916, i64 3
  %936 = bitcast %"class.sh::TQualifierWrapperBase"** %934 to i64*
  %937 = load i64, i64* %936, align 8
  %938 = bitcast %"class.sh::TQualifierWrapperBase"** %935 to i64*
  %939 = load i64, i64* %938, align 8
  store i64 %939, i64* %936, align 8
  store i64 %937, i64* %938, align 8
  %940 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %917, i64 4
  %941 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %916, i64 4
  %942 = icmp eq %"class.sh::TQualifierWrapperBase"** %940, %26
  br i1 %942, label %1013, label %915, !llvm.loop !123

943:                                              ; preds = %785, %943
  %944 = phi i64 [ %946, %943 ], [ %789, %785 ]
  %945 = phi i64 [ %944, %943 ], [ %787, %785 ]
  %946 = srem i64 %945, %944
  %947 = icmp eq i64 %946, 0
  br i1 %947, label %948, label %943

948:                                              ; preds = %943
  %949 = icmp eq i64 %944, 0
  br i1 %949, label %982, label %950

950:                                              ; preds = %948
  %951 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %746, i64 %944
  %952 = shl nsw i64 %944, 3
  %953 = add i64 %952, -8
  %954 = and i64 %953, 8
  %955 = icmp eq i64 %954, 0
  br i1 %955, label %956, label %979

956:                                              ; preds = %950
  %957 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %951, i64 -1
  %958 = ptrtoint %"class.sh::TQualifierWrapperBase"** %957 to i64
  %959 = bitcast %"class.sh::TQualifierWrapperBase"** %957 to i64*
  %960 = load i64, i64* %959, align 8
  %961 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %957, i64 %787
  br label %962

962:                                              ; preds = %962, %956
  %963 = phi i64 [ %958, %956 ], [ %965, %962 ]
  %964 = phi %"class.sh::TQualifierWrapperBase"** [ %961, %956 ], [ %975, %962 ]
  %965 = ptrtoint %"class.sh::TQualifierWrapperBase"** %964 to i64
  %966 = bitcast %"class.sh::TQualifierWrapperBase"** %964 to i64*
  %967 = load i64, i64* %966, align 8
  %968 = inttoptr i64 %963 to i64*
  store i64 %967, i64* %968, align 8
  %969 = sub i64 %741, %965
  %970 = ashr exact i64 %969, 3
  %971 = icmp slt i64 %787, %970
  %972 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %964, i64 %787
  %973 = sub nsw i64 %787, %970
  %974 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %746, i64 %973
  %975 = select i1 %971, %"class.sh::TQualifierWrapperBase"** %972, %"class.sh::TQualifierWrapperBase"** %974
  %976 = icmp eq %"class.sh::TQualifierWrapperBase"** %975, %957
  br i1 %976, label %977, label %962

977:                                              ; preds = %962
  %978 = bitcast %"class.sh::TQualifierWrapperBase"** %964 to i64*
  store i64 %960, i64* %978, align 8
  br label %979

979:                                              ; preds = %977, %950
  %980 = phi %"class.sh::TQualifierWrapperBase"** [ %957, %977 ], [ %951, %950 ]
  %981 = icmp eq i64 %953, 0
  br i1 %981, label %982, label %984

982:                                              ; preds = %979, %1044, %948
  %983 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %746, i64 %789
  br label %1013

984:                                              ; preds = %979, %1044
  %985 = phi %"class.sh::TQualifierWrapperBase"** [ %1008, %1044 ], [ %980, %979 ]
  %986 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %985, i64 -1
  %987 = ptrtoint %"class.sh::TQualifierWrapperBase"** %986 to i64
  %988 = bitcast %"class.sh::TQualifierWrapperBase"** %986 to i64*
  %989 = load i64, i64* %988, align 8
  %990 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %986, i64 %787
  br label %991

991:                                              ; preds = %991, %984
  %992 = phi i64 [ %987, %984 ], [ %994, %991 ]
  %993 = phi %"class.sh::TQualifierWrapperBase"** [ %990, %984 ], [ %1004, %991 ]
  %994 = ptrtoint %"class.sh::TQualifierWrapperBase"** %993 to i64
  %995 = bitcast %"class.sh::TQualifierWrapperBase"** %993 to i64*
  %996 = load i64, i64* %995, align 8
  %997 = inttoptr i64 %992 to i64*
  store i64 %996, i64* %997, align 8
  %998 = sub i64 %741, %994
  %999 = ashr exact i64 %998, 3
  %1000 = icmp slt i64 %787, %999
  %1001 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %993, i64 %787
  %1002 = sub nsw i64 %787, %999
  %1003 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %746, i64 %1002
  %1004 = select i1 %1000, %"class.sh::TQualifierWrapperBase"** %1001, %"class.sh::TQualifierWrapperBase"** %1003
  %1005 = icmp eq %"class.sh::TQualifierWrapperBase"** %1004, %986
  br i1 %1005, label %1006, label %991

1006:                                             ; preds = %991
  %1007 = bitcast %"class.sh::TQualifierWrapperBase"** %993 to i64*
  store i64 %989, i64* %1007, align 8
  %1008 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %985, i64 -2
  %1009 = ptrtoint %"class.sh::TQualifierWrapperBase"** %1008 to i64
  %1010 = bitcast %"class.sh::TQualifierWrapperBase"** %1008 to i64*
  %1011 = load i64, i64* %1010, align 8
  %1012 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %1008, i64 %787
  br label %1029

1013:                                             ; preds = %911, %915, %886, %739, %752, %764, %782, %982
  %1014 = phi %"class.sh::TQualifierWrapperBase"** [ %746, %752 ], [ %748, %739 ], [ %765, %764 ], [ %783, %782 ], [ %983, %982 ], [ %26, %886 ], [ %26, %915 ], [ %26, %911 ]
  %1015 = add nsw i64 %743, %742
  %1016 = add nsw i64 %744, %745
  %1017 = icmp slt i64 %1015, %1016
  br i1 %1017, label %1018, label %1020

1018:                                             ; preds = %1013
  %1019 = ptrtoint %"class.sh::TQualifierWrapperBase"** %1014 to i64
  tail call fastcc void @_ZNSt3__115__inplace_mergeIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl(%"class.sh::TQualifierWrapperBase"** %655, %"class.sh::TQualifierWrapperBase"** %746, %"class.sh::TQualifierWrapperBase"** %1014, %"struct.sh::(anonymous namespace)::QualifierComparator"* dereferenceable(1) %3, i64 %743, i64 %742, %"class.sh::TQualifierWrapperBase"** %6, i64 %7)
  br label %1021

1020:                                             ; preds = %1013
  tail call fastcc void @_ZNSt3__115__inplace_mergeIRN2sh12_GLOBAL__N_119QualifierComparatorENS_11__wrap_iterIPPKNS1_21TQualifierWrapperBaseEEEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl(%"class.sh::TQualifierWrapperBase"** %1014, %"class.sh::TQualifierWrapperBase"** %748, %"class.sh::TQualifierWrapperBase"** %15, %"struct.sh::(anonymous namespace)::QualifierComparator"* dereferenceable(1) %3, i64 %744, i64 %745, %"class.sh::TQualifierWrapperBase"** %6, i64 %7)
  br label %1021

1021:                                             ; preds = %1018, %1020
  %1022 = phi i64 [ %1019, %1018 ], [ %634, %1020 ]
  %1023 = phi i64 [ %741, %1018 ], [ %740, %1020 ]
  %1024 = phi i64 [ %745, %1018 ], [ %742, %1020 ]
  %1025 = phi i64 [ %744, %1018 ], [ %743, %1020 ]
  %1026 = phi %"class.sh::TQualifierWrapperBase"** [ %15, %1018 ], [ %1014, %1020 ]
  %1027 = icmp eq i64 %1024, 0
  br i1 %1027, label %1028, label %14

1028:                                             ; preds = %1021, %23, %649, %340, %563, %515, %519, %492, %8, %696, %389, %313, %308, %300, %167, %34
  ret void

1029:                                             ; preds = %1029, %1006
  %1030 = phi i64 [ %1009, %1006 ], [ %1032, %1029 ]
  %1031 = phi %"class.sh::TQualifierWrapperBase"** [ %1012, %1006 ], [ %1042, %1029 ]
  %1032 = ptrtoint %"class.sh::TQualifierWrapperBase"** %1031 to i64
  %1033 = bitcast %"class.sh::TQualifierWrapperBase"** %1031 to i64*
  %1034 = load i64, i64* %1033, align 8
  %1035 = inttoptr i64 %1030 to i64*
  store i64 %1034, i64* %1035, align 8
  %1036 = sub i64 %741, %1032
  %1037 = ashr exact i64 %1036, 3
  %1038 = icmp slt i64 %787, %1037
  %1039 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %1031, i64 %787
  %1040 = sub nsw i64 %787, %1037
  %1041 = getelementptr inbounds %"class.sh::TQualifierWrapperBase"*, %"class.sh::TQualifierWrapperBase"** %746, i64 %1040
  %1042 = select i1 %1038, %"class.sh::TQualifierWrapperBase"** %1039, %"class.sh::TQualifierWrapperBase"** %1041
  %1043 = icmp eq %"class.sh::TQualifierWrapperBase"** %1042, %1008
  br i1 %1043, label %1044, label %1029

1044:                                             ; preds = %1029
  %1045 = bitcast %"class.sh::TQualifierWrapperBase"** %1031 to i64*
  store i64 %1011, i64* %1045, align 8
  %1046 = icmp eq %"class.sh::TQualifierWrapperBase"** %1008, %746
  br i1 %1046, label %982, label %984
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN2sh18getQualifierStringENS_10TQualifierE(i32) local_unnamed_addr #8 comdat {
  %2 = icmp ult i32 %0, 91
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [91 x i8*], [91 x i8*]* @switch.table._ZN2sh18getQualifierStringENS_10TQualifierE, i64 0, i64 %4
  %6 = load i8*, i8** %5, align 8
  ret i8* %6

7:                                                ; preds = %1
  ret i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.113, i64 0, i64 0)
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!5 = distinct !{!5, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !12}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !12}
!22 = distinct !{!22, !14}
!23 = distinct !{!23, !12}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!26 = distinct !{!26, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!27 = !{!28}
!28 = distinct !{!28, !29}
!29 = distinct !{!29, !"LVerDomain"}
!30 = !{!31}
!31 = distinct !{!31, !29}
!32 = distinct !{!32, !12}
!33 = distinct !{!33, !14}
!34 = distinct !{!34, !14}
!35 = distinct !{!35, !12}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!38 = distinct !{!38, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!41 = distinct !{!41, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = distinct !{!47, !12}
!48 = distinct !{!48, !14}
!49 = distinct !{!49, !14}
!50 = distinct !{!50, !12}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!53 = distinct !{!53, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!54 = distinct !{!54, !14}
!55 = !{!56}
!56 = distinct !{!56, !57}
!57 = distinct !{!57, !"LVerDomain"}
!58 = !{!59}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !12}
!61 = distinct !{!61, !14}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !12}
!68 = distinct !{!68, !14}
!69 = distinct !{!69, !14}
!70 = distinct !{!70, !12}
!71 = distinct !{!71, !12}
!72 = !{!73}
!73 = distinct !{!73, !74}
!74 = distinct !{!74, !"LVerDomain"}
!75 = !{!76}
!76 = distinct !{!76, !74}
!77 = distinct !{!77, !12}
!78 = distinct !{!78, !14}
!79 = distinct !{!79, !14}
!80 = distinct !{!80, !12}
!81 = !{!82}
!82 = distinct !{!82, !83}
!83 = distinct !{!83, !"LVerDomain"}
!84 = !{!85}
!85 = distinct !{!85, !83}
!86 = distinct !{!86, !12}
!87 = distinct !{!87, !14}
!88 = distinct !{!88, !14}
!89 = distinct !{!89, !12}
!90 = distinct !{!90, !14}
!91 = !{!92}
!92 = distinct !{!92, !93}
!93 = distinct !{!93, !"LVerDomain"}
!94 = !{!95}
!95 = distinct !{!95, !93}
!96 = distinct !{!96, !12}
!97 = distinct !{!97, !14}
!98 = distinct !{!98, !14}
!99 = !{!100}
!100 = distinct !{!100, !101}
!101 = distinct !{!101, !"LVerDomain"}
!102 = !{!103}
!103 = distinct !{!103, !101}
!104 = distinct !{!104, !12}
!105 = distinct !{!105, !14}
!106 = distinct !{!106, !12}
!107 = !{!108}
!108 = distinct !{!108, !109}
!109 = distinct !{!109, !"LVerDomain"}
!110 = !{!111}
!111 = distinct !{!111, !109}
!112 = distinct !{!112, !12}
!113 = distinct !{!113, !14}
!114 = distinct !{!114, !12}
!115 = distinct !{!115, !12}
!116 = !{!117}
!117 = distinct !{!117, !118}
!118 = distinct !{!118, !"LVerDomain"}
!119 = !{!120}
!120 = distinct !{!120, !118}
!121 = distinct !{!121, !12}
!122 = distinct !{!122, !14}
!123 = distinct !{!123, !12}
