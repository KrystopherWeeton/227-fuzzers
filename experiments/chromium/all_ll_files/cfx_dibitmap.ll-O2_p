; ModuleID = '../../third_party/pdfium/core/fxge/dib/cfx_dibitmap.cpp'
source_filename = "../../third_party/pdfium/core/fxge/dib/cfx_dibitmap.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_DIBitmap = type { %class.CFX_DIBBase, %"class.fxcrt::MaybeOwned" }
%class.CFX_DIBBase = type { %"class.fxcrt::Retainable", i16, i32, i32, i32, %"class.fxcrt::RetainPtr", %"class.std::__1::vector" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_DIBitmap* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.4", %"class.fxcrt::UnownedPtr" }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i8* }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"struct.pdfium::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { %"struct.CFX_DIBitmap::PitchAndSize" }
%"struct.CFX_DIBitmap::PitchAndSize" = type { i32, i32 }
%"class.fxcrt::RetainPtr.8" = type { %"class.std::__1::unique_ptr.9" }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %class.CFX_DIBBase* }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.14", i64 }
%"class.fxcrt::UnownedPtr.14" = type { i32* }
%struct.FX_RECT = type { i32, i32, i32, i32 }
%class.CFX_ClipRgn = type { i8, %struct.FX_RECT, %"class.fxcrt::RetainPtr" }
%struct.FXDIB_ResampleOptions = type { i8, i8, i8, i8 }
%class.CFX_ScanlineCompositor = type <{ i32, i16, i16, %"class.CFX_ScanlineCompositor::Palette", i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.CFX_ScanlineCompositor::Palette" = type { i64, i64, %"class.std::__1::unique_ptr.27" }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%class.PauseIndicatorIface = type opaque

@_ZTV12CFX_DIBitmap = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFX_DIBitmap*)* @_ZN12CFX_DIBitmapD2Ev to i8*), i8* bitcast (void (%class.CFX_DIBitmap*)* @_ZN12CFX_DIBitmapD0Ev to i8*), i8* bitcast (i8* (%class.CFX_DIBitmap*)* @_ZNK12CFX_DIBitmap9GetBufferEv to i8*), i8* bitcast (i8* (%class.CFX_DIBitmap*, i32)* @_ZNK12CFX_DIBitmap11GetScanlineEi to i8*), i8* bitcast (i1 (%class.CFX_DIBBase*, i32, %class.PauseIndicatorIface*)* @_ZNK11CFX_DIBBase14SkipToScanlineEiP19PauseIndicatorIface to i8*)] }, align 8

@_ZN12CFX_DIBitmapC1Ev = hidden unnamed_addr alias void (%class.CFX_DIBitmap*), void (%class.CFX_DIBitmap*)* @_ZN12CFX_DIBitmapC2Ev
@_ZN12CFX_DIBitmapD1Ev = hidden unnamed_addr alias void (%class.CFX_DIBitmap*), void (%class.CFX_DIBitmap*)* @_ZN12CFX_DIBitmapD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_DIBitmapC2Ev(%class.CFX_DIBitmap*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0
  tail call void @_ZN11CFX_DIBBaseC2Ev(%class.CFX_DIBBase* %2) #7
  %3 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV12CFX_DIBitmap, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1
  %5 = bitcast %"class.fxcrt::MaybeOwned"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #7
  ret void
}

declare void @_ZN11CFX_DIBBaseC2Ev(%class.CFX_DIBBase*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_Format(%class.CFX_DIBitmap*, i32, i32, i16 zeroext) local_unnamed_addr #0 align 2 {
  %5 = tail call zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_FormatPhj(%class.CFX_DIBitmap* %0, i32 %1, i32 %2, i16 zeroext %3, i8* null, i32 0)
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_FormatPhj(%class.CFX_DIBitmap*, i32, i32, i16 zeroext, i8*, i32) local_unnamed_addr #0 align 2 {
  %7 = alloca %"struct.pdfium::internal::OptionalStorageBase", align 8
  %8 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1
  %9 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %10 = getelementptr inbounds %"class.fxcrt::MaybeOwned", %"class.fxcrt::MaybeOwned"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = bitcast %"class.fxcrt::MaybeOwned"* %8 to <2 x i8*>*
  store <2 x i8*> zeroinitializer, <2 x i8*>* %12, align 8
  %13 = icmp eq i8* %11, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %6
  tail call void @_Z7FX_FreePv(i8* nonnull %11) #7
  br label %15

15:                                               ; preds = %6, %14
  %16 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0
  %17 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  store i16 %3, i16* %17, align 8
  %18 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  store i32 0, i32* %19, align 8
  %20 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds %"struct.pdfium::internal::OptionalStorageBase", %"struct.pdfium::internal::OptionalStorageBase"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %21)
  %22 = icmp slt i32 %1, 1
  %23 = icmp slt i32 %2, 1
  %24 = or i1 %22, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %15
  store i8 0, i8* %21, align 8
  br label %62

26:                                               ; preds = %15
  %27 = and i16 %3, 255
  %28 = zext i16 %27 to i32
  %29 = icmp eq i16 %27, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %26
  store i8 0, i8* %21, align 8
  br label %62

31:                                               ; preds = %26
  %32 = icmp eq i32 %5, 0
  br i1 %32, label %33, label %48

33:                                               ; preds = %31
  %34 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %28, i32 %1) #7
  %35 = extractvalue { i32, i1 } %34, 1
  br i1 %35, label %47, label %36

36:                                               ; preds = %33
  %37 = extractvalue { i32, i1 } %34, 0
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 31) #7
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  %44 = lshr i33 %41, 3
  %45 = trunc i33 %44 to i32
  %46 = and i32 %45, 536870908
  br i1 %43, label %47, label %48

47:                                               ; preds = %36, %33
  store i8 0, i8* %21, align 8
  br label %62

48:                                               ; preds = %36, %31
  %49 = phi i32 [ %5, %31 ], [ %46, %36 ]
  %50 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %2, i32 %49) #7
  %51 = extractvalue { i32, i1 } %50, 1
  br i1 %51, label %52, label %53

52:                                               ; preds = %48
  store i8 0, i8* %21, align 8
  br label %62

53:                                               ; preds = %48
  %54 = extractvalue { i32, i1 } %50, 0
  store i8 1, i8* %21, align 8
  %55 = zext i32 %54 to i64
  %56 = shl nuw i64 %55, 32
  %57 = zext i32 %49 to i64
  %58 = or i64 %56, %57
  %59 = getelementptr inbounds %"struct.pdfium::internal::OptionalStorageBase", %"struct.pdfium::internal::OptionalStorageBase"* %7, i64 0, i32 1
  %60 = bitcast %union.anon* %59 to i64*
  store i64 %58, i64* %60, align 4
  %61 = add nuw nsw i64 %55, 4
  br label %62

62:                                               ; preds = %25, %30, %47, %52, %53
  %63 = phi i64 [ 4, %52 ], [ %61, %53 ], [ 4, %47 ], [ 4, %30 ], [ 4, %25 ]
  %64 = bitcast %"struct.pdfium::internal::OptionalStorageBase"* %7 to i64*
  %65 = load i64, i64* %64, align 8
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %21)
  %66 = trunc i64 %65 to i8
  %67 = lshr i64 %65, 32
  %68 = trunc i64 %67 to i32
  %69 = icmp eq i8 %66, 0
  br i1 %69, label %109, label %70

70:                                               ; preds = %62
  %71 = icmp ne i8* %4, null
  br i1 %71, label %72, label %76

72:                                               ; preds = %70
  store i8* %4, i8** %9, align 8
  %73 = load i8*, i8** %10, align 8
  store i8* null, i8** %10, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %91, label %75

75:                                               ; preds = %72
  tail call void @_Z7FX_FreePv(i8* nonnull %73) #7
  br label %91

76:                                               ; preds = %70
  %77 = icmp eq i8 %66, 1
  br i1 %77, label %79, label %78, !prof !2

78:                                               ; preds = %76
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

79:                                               ; preds = %76
  %80 = tail call i8* @_ZN6pdfium8internal6CallocEmm(i64 %63, i64 1) #7
  %81 = ptrtoint i8* %80 to i64
  store i8* %80, i8** %9, align 8
  %82 = load i8*, i8** %10, align 8
  %83 = bitcast %"class.fxcrt::MaybeOwned"* %8 to i64*
  store i64 %81, i64* %83, align 8
  %84 = icmp eq i8* %82, null
  br i1 %84, label %87, label %85

85:                                               ; preds = %79
  tail call void @_Z7FX_FreePv(i8* nonnull %82) #7
  %86 = load i8*, i8** %9, align 8
  br label %87

87:                                               ; preds = %79, %85
  %88 = phi i8* [ %80, %79 ], [ %86, %85 ]
  %89 = icmp eq i8* %88, null
  br i1 %89, label %109, label %90

90:                                               ; preds = %87
  store i32 %1, i32* %18, align 4
  store i32 %2, i32* %19, align 8
  br label %94

91:                                               ; preds = %75, %72
  store i32 %1, i32* %18, align 4
  store i32 %2, i32* %19, align 8
  %92 = icmp eq i8 %66, 1
  br i1 %92, label %94, label %93, !prof !2

93:                                               ; preds = %91
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

94:                                               ; preds = %90, %91
  store i32 %68, i32* %20, align 4
  %95 = load i16, i16* %17, align 8
  %96 = and i16 %95, 512
  %97 = icmp eq i16 %96, 0
  %98 = icmp eq i16 %3, 544
  %99 = or i1 %98, %97
  br i1 %99, label %109, label %100

100:                                              ; preds = %94
  %101 = tail call zeroext i1 @_ZN11CFX_DIBBase14BuildAlphaMaskEv(%class.CFX_DIBBase* %16) #7
  %102 = or i1 %71, %101
  br i1 %102, label %109, label %103

103:                                              ; preds = %100
  %104 = load i8*, i8** %10, align 8
  %105 = bitcast %"class.fxcrt::MaybeOwned"* %8 to <2 x i8*>*
  store <2 x i8*> zeroinitializer, <2 x i8*>* %105, align 8
  %106 = icmp eq i8* %104, null
  br i1 %106, label %108, label %107

107:                                              ; preds = %103
  tail call void @_Z7FX_FreePv(i8* nonnull %104) #7
  br label %108

108:                                              ; preds = %103, %107
  store i32 0, i32* %18, align 4
  store i32 0, i32* %19, align 8
  store i32 0, i32* %20, align 4
  br label %109

109:                                              ; preds = %87, %62, %100, %94, %108
  %110 = phi i1 [ false, %108 ], [ false, %87 ], [ false, %62 ], [ true, %94 ], [ true, %100 ]
  ret i1 %110
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i32 } @_ZN12CFX_DIBitmap21CalculatePitchAndSizeEii12FXDIB_Formatj(i32, i32, i16 zeroext, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"struct.pdfium::internal::OptionalStorageBase", align 8
  %6 = icmp slt i32 %0, 1
  %7 = icmp slt i32 %1, 1
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %11

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"struct.pdfium::internal::OptionalStorageBase", %"struct.pdfium::internal::OptionalStorageBase"* %5, i64 0, i32 0
  store i8 0, i8* %10, align 8
  br label %49

11:                                               ; preds = %4
  %12 = and i16 %2, 255
  %13 = zext i16 %12 to i32
  %14 = icmp eq i16 %12, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"struct.pdfium::internal::OptionalStorageBase", %"struct.pdfium::internal::OptionalStorageBase"* %5, i64 0, i32 0
  store i8 0, i8* %16, align 8
  br label %49

17:                                               ; preds = %11
  %18 = icmp eq i32 %3, 0
  br i1 %18, label %19, label %35

19:                                               ; preds = %17
  %20 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %13, i32 %0) #7
  %21 = extractvalue { i32, i1 } %20, 1
  br i1 %21, label %33, label %22

22:                                               ; preds = %19
  %23 = extractvalue { i32, i1 } %20, 0
  %24 = zext i32 %23 to i33
  %25 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %24, i33 31) #7
  %26 = extractvalue { i33, i1 } %25, 1
  %27 = extractvalue { i33, i1 } %25, 0
  %28 = icmp slt i33 %27, 0
  %29 = or i1 %26, %28
  %30 = lshr i33 %27, 3
  %31 = trunc i33 %30 to i32
  %32 = and i32 %31, 536870908
  br i1 %29, label %33, label %35

33:                                               ; preds = %19, %22
  %34 = getelementptr inbounds %"struct.pdfium::internal::OptionalStorageBase", %"struct.pdfium::internal::OptionalStorageBase"* %5, i64 0, i32 0
  store i8 0, i8* %34, align 8
  br label %49

35:                                               ; preds = %22, %17
  %36 = phi i32 [ %3, %17 ], [ %32, %22 ]
  %37 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %1, i32 %36) #7
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = getelementptr inbounds %"struct.pdfium::internal::OptionalStorageBase", %"struct.pdfium::internal::OptionalStorageBase"* %5, i64 0, i32 0
  br i1 %38, label %40, label %41

40:                                               ; preds = %35
  store i8 0, i8* %39, align 8
  br label %49

41:                                               ; preds = %35
  %42 = extractvalue { i32, i1 } %37, 0
  store i8 1, i8* %39, align 8
  %43 = zext i32 %42 to i64
  %44 = shl nuw i64 %43, 32
  %45 = zext i32 %36 to i64
  %46 = or i64 %44, %45
  %47 = getelementptr inbounds %"struct.pdfium::internal::OptionalStorageBase", %"struct.pdfium::internal::OptionalStorageBase"* %5, i64 0, i32 1
  %48 = bitcast %union.anon* %47 to i64*
  store i64 %46, i64* %48, align 4
  br label %49

49:                                               ; preds = %40, %41, %33, %15, %9
  %50 = phi i32 [ undef, %40 ], [ %42, %41 ], [ undef, %33 ], [ undef, %15 ], [ undef, %9 ]
  %51 = bitcast %"struct.pdfium::internal::OptionalStorageBase"* %5 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = insertvalue { i64, i32 } undef, i64 %52, 0
  %54 = insertvalue { i64, i32 } %53, i32 %50, 1
  ret { i64, i32 } %54
}

declare i8* @_ZN6pdfium8internal6CallocEmm(i64, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZN11CFX_DIBBase14BuildAlphaMaskEv(%class.CFX_DIBBase*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap4CopyERKN5fxcrt9RetainPtrI11CFX_DIBBaseEE(%class.CFX_DIBitmap*, %"class.fxcrt::RetainPtr.8"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.pdfium::span", align 8
  %4 = alloca %"class.fxcrt::RetainPtr.8", align 8
  %5 = alloca %"class.fxcrt::RetainPtr", align 8
  %6 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %101

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.fxcrt::RetainPtr.8", %"class.fxcrt::RetainPtr.8"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %10, align 8
  %12 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %11, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %11, i64 0, i32 3
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %11, i64 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = tail call zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_FormatPhj(%class.CFX_DIBitmap* %0, i32 %13, i32 %15, i16 zeroext %17, i8* null, i32 0) #7
  br i1 %18, label %19, label %101

19:                                               ; preds = %9
  %20 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0
  %21 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %10, align 8
  %22 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %21, i64 0, i32 6
  %23 = bitcast %"class.std::__1::vector"* %22 to i64*
  %24 = load i64, i64* %23, align 8, !noalias !5
  %25 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %21, i64 0, i32 6, i32 0, i32 1
  %26 = bitcast i32** %25 to i64*
  %27 = load i64, i64* %26, align 8, !noalias !5
  %28 = sub i64 %27, %24
  %29 = ashr exact i64 %28, 2
  %30 = bitcast %"class.pdfium::span"* %3 to i64*
  store i64 %24, i64* %30, align 8, !alias.scope !5
  %31 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %3, i64 0, i32 1
  store i64 %29, i64* %31, align 8, !alias.scope !5
  call void @_ZN11CFX_DIBBase10SetPaletteEN6pdfium4spanIKjEE(%class.CFX_DIBBase* %20, %"class.pdfium::span"* nonnull %3) #7
  %32 = bitcast %"class.fxcrt::RetainPtr.8"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #7
  %33 = bitcast %"class.fxcrt::RetainPtr"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  %34 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %10, align 8
  call void @_ZN11CFX_DIBBase12GetAlphaMaskEv(%"class.fxcrt::RetainPtr"* nonnull sret %5, %class.CFX_DIBBase* %34) #7
  %35 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %36 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %35, align 8
  %37 = ptrtoint %class.CFX_DIBitmap* %36 to i64
  %38 = bitcast %"class.fxcrt::RetainPtr.8"* %4 to i64*
  store i64 %37, i64* %38, align 8
  %39 = icmp eq %class.CFX_DIBitmap* %36, null
  br i1 %39, label %44, label %40

40:                                               ; preds = %19
  %41 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %36, i64 0, i32 0, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = add nsw i64 %42, 1
  store i64 %43, i64* %41, align 8
  br label %44

44:                                               ; preds = %19, %40
  %45 = call zeroext i1 @_ZN11CFX_DIBBase12SetAlphaMaskERKN5fxcrt9RetainPtrIS_EEPK7FX_RECT(%class.CFX_DIBBase* %20, %"class.fxcrt::RetainPtr.8"* nonnull dereferenceable(8) %4, %struct.FX_RECT* null) #7
  %46 = getelementptr inbounds %"class.fxcrt::RetainPtr.8", %"class.fxcrt::RetainPtr.8"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %47 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %46, align 8
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %46, align 8
  %48 = icmp eq %class.CFX_DIBBase* %47, null
  br i1 %48, label %60, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %47, i64 0, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = add nsw i64 %51, -1
  store i64 %52, i64* %50, align 8
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %60

54:                                               ; preds = %49
  %55 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %47, i64 0, i32 0
  %56 = bitcast %class.CFX_DIBBase* %47 to void (%"class.fxcrt::Retainable"*)***
  %57 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %56, align 8
  %58 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %57, i64 1
  %59 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %58, align 8
  call void %59(%"class.fxcrt::Retainable"* nonnull %55) #7
  br label %60

60:                                               ; preds = %44, %49, %54
  %61 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %35, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %35, align 8
  %62 = icmp eq %class.CFX_DIBitmap* %61, null
  br i1 %62, label %74, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %61, i64 0, i32 0, i32 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = add nsw i64 %65, -1
  store i64 %66, i64* %64, align 8
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %74

68:                                               ; preds = %63
  %69 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %61, i64 0, i32 0, i32 0
  %70 = bitcast %class.CFX_DIBitmap* %61 to void (%"class.fxcrt::Retainable"*)***
  %71 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %71, i64 1
  %73 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %72, align 8
  call void %73(%"class.fxcrt::Retainable"* nonnull %69) #7
  br label %74

74:                                               ; preds = %60, %63, %68
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #7
  %75 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %10, align 8
  %76 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %75, i64 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = icmp sgt i32 %77, 0
  br i1 %78, label %79, label %101

79:                                               ; preds = %74
  %80 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  br label %81

81:                                               ; preds = %79, %81
  %82 = phi %class.CFX_DIBBase* [ %75, %79 ], [ %97, %81 ]
  %83 = phi i32 [ 0, %79 ], [ %96, %81 ]
  %84 = load i8*, i8** %6, align 8
  %85 = load i32, i32* %80, align 4
  %86 = mul i32 %85, %83
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %84, i64 %87
  %89 = bitcast %class.CFX_DIBBase* %82 to i8* (%class.CFX_DIBBase*, i32)***
  %90 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %89, align 8
  %91 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %90, i64 3
  %92 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %91, align 8
  %93 = call i8* %92(%class.CFX_DIBBase* %82, i32 %83) #7
  %94 = load i32, i32* %80, align 4
  %95 = zext i32 %94 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %88, i8* align 1 %93, i64 %95, i1 false)
  %96 = add nuw nsw i32 %83, 1
  %97 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %10, align 8
  %98 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %97, i64 0, i32 3
  %99 = load i32, i32* %98, align 8
  %100 = icmp slt i32 %96, %99
  br i1 %100, label %81, label %101

101:                                              ; preds = %81, %74, %2, %9
  %102 = phi i1 [ false, %2 ], [ false, %9 ], [ true, %74 ], [ true, %81 ]
  ret i1 %102
}

declare void @_ZN11CFX_DIBBase10SetPaletteEN6pdfium4spanIKjEE(%class.CFX_DIBBase*, %"class.pdfium::span"*) local_unnamed_addr #1

declare zeroext i1 @_ZN11CFX_DIBBase12SetAlphaMaskERKN5fxcrt9RetainPtrIS_EEPK7FX_RECT(%class.CFX_DIBBase*, %"class.fxcrt::RetainPtr.8"* dereferenceable(8), %struct.FX_RECT*) local_unnamed_addr #1

declare void @_ZN11CFX_DIBBase12GetAlphaMaskEv(%"class.fxcrt::RetainPtr"* sret, %class.CFX_DIBBase*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_DIBitmapD2Ev(%class.CFX_DIBitmap*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV12CFX_DIBitmap, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_Z7FX_FreePv(i8* nonnull %4) #7
  br label %7

7:                                                ; preds = %1, %6
  %8 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0
  tail call void @_ZN11CFX_DIBBaseD2Ev(%class.CFX_DIBBase* %8) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN11CFX_DIBBaseD2Ev(%class.CFX_DIBBase*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_DIBitmapD0Ev(%class.CFX_DIBitmap*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV12CFX_DIBitmap, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_Z7FX_FreePv(i8* nonnull %4) #7
  br label %7

7:                                                ; preds = %1, %6
  %8 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0
  tail call void @_ZN11CFX_DIBBaseD2Ev(%class.CFX_DIBBase* %8) #7
  %9 = bitcast %class.CFX_DIBitmap* %0 to i8*
  tail call void @_ZdlPv(i8* %9) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK12CFX_DIBitmap9GetBufferEv(%class.CFX_DIBitmap* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK12CFX_DIBitmap11GetScanlineEi(%class.CFX_DIBitmap* nocapture readonly, i32) unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %8 = load i32, i32* %7, align 4
  %9 = mul i32 %8, %1
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %4, i64 %10
  br label %12

12:                                               ; preds = %2, %6
  %13 = phi i8* [ %11, %6 ], [ null, %2 ]
  ret i8* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_DIBitmap8TakeOverEON5fxcrt9RetainPtrIS_EE(%class.CFX_DIBitmap* nocapture, %"class.fxcrt::RetainPtr"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %5 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %4, i64 0, i32 1
  %6 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1
  %7 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %4, i64 0, i32 1, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %8, %10
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  store i8* %10, i8** %7, align 8
  br label %13

13:                                               ; preds = %12, %2
  %14 = getelementptr inbounds %"class.fxcrt::MaybeOwned", %"class.fxcrt::MaybeOwned"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.fxcrt::MaybeOwned"* %5 to i64*
  %16 = load i64, i64* %15, align 8
  store i8* null, i8** %14, align 8
  %17 = getelementptr inbounds %"class.fxcrt::MaybeOwned", %"class.fxcrt::MaybeOwned"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.fxcrt::MaybeOwned"* %6 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %13
  tail call void @_Z7FX_FreePv(i8* nonnull %18) #7
  br label %22

22:                                               ; preds = %13, %21
  store i8* null, i8** %9, align 8
  %23 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %24 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %23, i64 0, i32 0, i32 6
  %25 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6
  %26 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 0
  %27 = load i32*, i32** %26, align 8
  %28 = icmp eq i32* %27, null
  br i1 %28, label %35, label %29

29:                                               ; preds = %22
  %30 = ptrtoint i32* %27 to i64
  %31 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 1
  %32 = bitcast i32** %31 to i64*
  store i64 %30, i64* %32, align 8
  %33 = bitcast i32* %27 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %33) #7
  %34 = bitcast %"class.std::__1::vector"* %25 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 24, i1 false) #7
  br label %35

35:                                               ; preds = %22, %29
  %36 = bitcast %"class.std::__1::vector"* %24 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %"class.std::__1::vector"* %25 to i64*
  store i64 %37, i64* %38, align 8
  %39 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %23, i64 0, i32 0, i32 6, i32 0, i32 1
  %40 = bitcast i32** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 1
  %43 = bitcast i32** %42 to i64*
  store i64 %41, i64* %43, align 8
  %44 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %23, i64 0, i32 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %45 = bitcast i32** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %48 = bitcast i32** %47 to i64*
  store i64 %46, i64* %48, align 8
  %49 = bitcast %"class.std::__1::vector"* %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #7
  %50 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %51 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %52 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %51, align 8
  %53 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %50, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %54 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %53, align 8
  %55 = icmp eq %class.CFX_DIBitmap* %52, %54
  br i1 %55, label %77, label %56

56:                                               ; preds = %35
  %57 = icmp eq %class.CFX_DIBitmap* %54, null
  br i1 %57, label %63, label %58

58:                                               ; preds = %56
  %59 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %54, i64 0, i32 0, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = add nsw i64 %60, 1
  store i64 %61, i64* %59, align 8
  %62 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %51, align 8
  br label %63

63:                                               ; preds = %58, %56
  %64 = phi %class.CFX_DIBitmap* [ %62, %58 ], [ %52, %56 ]
  store %class.CFX_DIBitmap* %54, %class.CFX_DIBitmap** %51, align 8
  %65 = icmp eq %class.CFX_DIBitmap* %64, null
  br i1 %65, label %77, label %66

66:                                               ; preds = %63
  %67 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %64, i64 0, i32 0, i32 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = add nsw i64 %68, -1
  store i64 %69, i64* %67, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %77

71:                                               ; preds = %66
  %72 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %64, i64 0, i32 0, i32 0
  %73 = bitcast %class.CFX_DIBitmap* %64 to void (%"class.fxcrt::Retainable"*)***
  %74 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %73, align 8
  %75 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %74, i64 1
  %76 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %75, align 8
  tail call void %76(%"class.fxcrt::Retainable"* nonnull %72) #7
  br label %77

77:                                               ; preds = %35, %63, %66, %71
  %78 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %79 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %78, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = bitcast i8** %79 to <2 x i8*>*
  store <2 x i8*> zeroinitializer, <2 x i8*>* %81, align 8
  %82 = icmp eq i8* %80, null
  br i1 %82, label %84, label %83

83:                                               ; preds = %77
  tail call void @_Z7FX_FreePv(i8* nonnull %80) #7
  br label %84

84:                                               ; preds = %77, %83
  %85 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %86 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %85, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %87 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %86, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %86, align 8
  %88 = icmp eq %class.CFX_DIBitmap* %87, null
  br i1 %88, label %100, label %89

89:                                               ; preds = %84
  %90 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %87, i64 0, i32 0, i32 0, i32 1
  %91 = load i64, i64* %90, align 8
  %92 = add nsw i64 %91, -1
  store i64 %92, i64* %90, align 8
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %100

94:                                               ; preds = %89
  %95 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %87, i64 0, i32 0, i32 0
  %96 = bitcast %class.CFX_DIBitmap* %87 to void (%"class.fxcrt::Retainable"*)***
  %97 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %96, align 8
  %98 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %97, i64 1
  %99 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %98, align 8
  tail call void %99(%"class.fxcrt::Retainable"* nonnull %95) #7
  br label %100

100:                                              ; preds = %84, %89, %94
  %101 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %102 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %101, i64 0, i32 0, i32 1
  %103 = load i16, i16* %102, align 8
  %104 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  store i16 %103, i16* %104, align 8
  %105 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %106 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %105, i64 0, i32 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  store i32 %107, i32* %108, align 4
  %109 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %110 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %109, i64 0, i32 0, i32 3
  %111 = load i32, i32* %110, align 8
  %112 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  store i32 %111, i32* %112, align 8
  %113 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %114 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %113, i64 0, i32 0, i32 4
  %115 = load i32, i32* %114, align 4
  %116 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  store i32 %115, i32* %116, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_DIBitmap5ClearEj(%class.CFX_DIBitmap*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %132, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0
  %8 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  switch i16 %9, label %132 [
    i16 257, label %10
    i16 1, label %19
    i16 264, label %29
    i16 8, label %38
    i16 24, label %47
    i16 32, label %103
    i16 544, label %103
  ]

10:                                               ; preds = %6
  %11 = icmp ugt i32 %1, 16777215
  %12 = sext i1 %11 to i8
  %13 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = mul i32 %16, %14
  %18 = zext i32 %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %4, i8 %12, i64 %18, i1 false)
  br label %132

19:                                               ; preds = %6
  %20 = tail call i32 @_ZNK11CFX_DIBBase11FindPaletteEj(%class.CFX_DIBBase* %7, i32 %1) #7
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i8
  %23 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %26 = load i32, i32* %25, align 8
  %27 = mul i32 %26, %24
  %28 = zext i32 %27 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %4, i8 %22, i64 %28, i1 false)
  br label %132

29:                                               ; preds = %6
  %30 = lshr i32 %1, 24
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %35 = load i32, i32* %34, align 8
  %36 = mul i32 %35, %33
  %37 = zext i32 %36 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %4, i8 %31, i64 %37, i1 false)
  br label %132

38:                                               ; preds = %6
  %39 = tail call i32 @_ZNK11CFX_DIBBase11FindPaletteEj(%class.CFX_DIBBase* %7, i32 %1) #7
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %44 = load i32, i32* %43, align 8
  %45 = mul i32 %44, %42
  %46 = zext i32 %45 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %4, i8 %40, i64 %46, i1 false)
  br label %132

47:                                               ; preds = %6
  %48 = tail call { i64, i64 } @_Z10ArgbDecodej(i32 %1) #7
  %49 = extractvalue { i64, i64 } %48, 0
  %50 = lshr i64 %49, 32
  %51 = trunc i64 %50 to i32
  %52 = extractvalue { i64, i64 } %48, 1
  %53 = trunc i64 %52 to i32
  %54 = lshr i64 %52, 32
  %55 = trunc i64 %54 to i32
  %56 = icmp eq i32 %51, %53
  %57 = icmp eq i32 %53, %55
  %58 = and i1 %56, %57
  br i1 %58, label %67, label %59

59:                                               ; preds = %47
  %60 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %61 = load i32, i32* %60, align 4
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %75

63:                                               ; preds = %59
  %64 = trunc i64 %54 to i8
  %65 = trunc i64 %52 to i8
  %66 = trunc i64 %50 to i8
  br label %81

67:                                               ; preds = %47
  %68 = trunc i64 %50 to i8
  %69 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %72 = load i32, i32* %71, align 8
  %73 = mul i32 %72, %70
  %74 = zext i32 %73 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %4, i8 %68, i64 %74, i1 false)
  br label %132

75:                                               ; preds = %81, %59
  %76 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = icmp sgt i32 %77, 1
  br i1 %78, label %79, label %132

79:                                               ; preds = %75
  %80 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  br label %93

81:                                               ; preds = %63, %81
  %82 = phi i64 [ 0, %63 ], [ %88, %81 ]
  %83 = phi i32 [ 0, %63 ], [ %90, %81 ]
  %84 = add nuw nsw i64 %82, 1
  %85 = getelementptr inbounds i8, i8* %4, i64 %82
  store i8 %64, i8* %85, align 1
  %86 = add nuw nsw i64 %82, 2
  %87 = getelementptr inbounds i8, i8* %4, i64 %84
  store i8 %65, i8* %87, align 1
  %88 = add nuw nsw i64 %82, 3
  %89 = getelementptr inbounds i8, i8* %4, i64 %86
  store i8 %66, i8* %89, align 1
  %90 = add nuw nsw i32 %83, 1
  %91 = load i32, i32* %60, align 4
  %92 = icmp slt i32 %90, %91
  br i1 %92, label %81, label %75

93:                                               ; preds = %79, %93
  %94 = phi i32 [ 1, %79 ], [ %100, %93 ]
  %95 = load i32, i32* %80, align 4
  %96 = mul i32 %95, %94
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %4, i64 %97
  %99 = zext i32 %95 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %98, i8* nonnull align 1 %4, i64 %99, i1 false)
  %100 = add nuw nsw i32 %94, 1
  %101 = load i32, i32* %76, align 8
  %102 = icmp slt i32 %100, %101
  br i1 %102, label %93, label %132

103:                                              ; preds = %6, %6
  %104 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %105 = load i32, i32* %104, align 4
  %106 = icmp sgt i32 %105, 0
  br i1 %106, label %107, label %109

107:                                              ; preds = %103
  %108 = bitcast i8* %4 to i32*
  br label %115

109:                                              ; preds = %115, %103
  %110 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %111 = load i32, i32* %110, align 8
  %112 = icmp sgt i32 %111, 1
  br i1 %112, label %113, label %132

113:                                              ; preds = %109
  %114 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  br label %122

115:                                              ; preds = %107, %115
  %116 = phi i64 [ 0, %107 ], [ %118, %115 ]
  %117 = getelementptr inbounds i32, i32* %108, i64 %116
  store i32 %1, i32* %117, align 4
  %118 = add nuw nsw i64 %116, 1
  %119 = load i32, i32* %104, align 4
  %120 = sext i32 %119 to i64
  %121 = icmp slt i64 %118, %120
  br i1 %121, label %115, label %109

122:                                              ; preds = %113, %122
  %123 = phi i32 [ 1, %113 ], [ %129, %122 ]
  %124 = load i32, i32* %114, align 4
  %125 = mul i32 %124, %123
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %4, i64 %126
  %128 = zext i32 %124 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %127, i8* nonnull align 1 %4, i64 %128, i1 false)
  %129 = add nuw nsw i32 %123, 1
  %130 = load i32, i32* %110, align 8
  %131 = icmp slt i32 %129, %130
  br i1 %131, label %122, label %132

132:                                              ; preds = %122, %93, %109, %75, %2, %67, %10, %19, %29, %38, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @_ZNK11CFX_DIBBase11FindPaletteEj(%class.CFX_DIBBase*, i32) local_unnamed_addr #1

declare { i64, i64 } @_Z10ArgbDecodej(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap14TransferBitmapEiiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEii(%class.CFX_DIBitmap*, i32, i32, i32, i32, %"class.fxcrt::RetainPtr.8"* dereferenceable(8), i32, i32) local_unnamed_addr #0 align 2 {
  %9 = alloca %"class.std::__1::vector", align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 %1, i32* %10, align 4
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i32 %6, i32* %14, align 4
  store i32 %7, i32* %15, align 4
  %16 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %169, label %19

19:                                               ; preds = %8
  %20 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0
  %21 = getelementptr inbounds %"class.fxcrt::RetainPtr.8", %"class.fxcrt::RetainPtr.8"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %21, align 8
  %23 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %22, i64 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %22, i64 0, i32 3
  %26 = load i32, i32* %25, align 8
  %27 = call zeroext i1 @_ZNK11CFX_DIBBase14GetOverlapRectERiS0_S0_S0_iiS0_S0_PK11CFX_ClipRgn(%class.CFX_DIBBase* %20, i32* nonnull dereferenceable(4) %10, i32* nonnull dereferenceable(4) %11, i32* nonnull dereferenceable(4) %12, i32* nonnull dereferenceable(4) %13, i32 %24, i32 %26, i32* nonnull dereferenceable(4) %14, i32* nonnull dereferenceable(4) %15, %class.CFX_ClipRgn* null) #7
  br i1 %27, label %28, label %169

28:                                               ; preds = %19
  %29 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %30 = load i16, i16* %29, align 8
  %31 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %21, align 8
  %32 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %31, i64 0, i32 1
  %33 = load i16, i16* %32, align 8
  %34 = icmp eq i16 %30, %33
  br i1 %34, label %73, label %35

35:                                               ; preds = %28
  %36 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 0
  %37 = load i32*, i32** %36, align 8
  %38 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 1
  %39 = load i32*, i32** %38, align 8
  %40 = icmp eq i32* %37, %39
  br i1 %40, label %41, label %169

41:                                               ; preds = %35
  %42 = load i32, i32* %15, align 4
  %43 = load i32, i32* %14, align 4
  %44 = load i32, i32* %13, align 4
  %45 = load i32, i32* %12, align 4
  %46 = load i32, i32* %11, align 4
  %47 = load i32, i32* %10, align 4
  %48 = and i16 %30, 255
  %49 = icmp eq i16 %48, 8
  %50 = select i1 %49, i16 264, i16 %30
  %51 = load i8*, i8** %16, align 8
  %52 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %53 = load i32, i32* %52, align 4
  %54 = mul i32 %53, %46
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %51, i64 %55
  %57 = zext i16 %48 to i32
  %58 = mul nsw i32 %47, %57
  %59 = sdiv i32 %58, 8
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %56, i64 %60
  %62 = bitcast %"class.std::__1::vector"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #7
  %63 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 0, i64 24, i1 false) #7
  %64 = call zeroext i1 @_ZN11CFX_DIBBase13ConvertBufferE12FXDIB_FormatPhiiiRKN5fxcrt9RetainPtrIS_EEiiPNSt3__16vectorIj16FxAllocAllocatorIjEEE(i16 zeroext %50, i8* %61, i32 %53, i32 %45, i32 %44, %"class.fxcrt::RetainPtr.8"* dereferenceable(8) %5, i32 %43, i32 %42, %"class.std::__1::vector"* nonnull %9) #7
  %65 = load i32*, i32** %63, align 8
  %66 = icmp eq i32* %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %41
  %68 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 1
  %69 = ptrtoint i32* %65 to i64
  %70 = bitcast i32** %68 to i64*
  store i64 %69, i64* %70, align 8
  %71 = bitcast i32* %65 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %71) #7
  br label %72

72:                                               ; preds = %67, %41
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #7
  br label %169

73:                                               ; preds = %28
  %74 = and i16 %30, 255
  %75 = icmp eq i16 %74, 1
  %76 = load i32, i32* %10, align 4
  %77 = load i32, i32* %11, align 4
  %78 = load i32, i32* %12, align 4
  %79 = load i32, i32* %13, align 4
  %80 = load i32, i32* %14, align 4
  %81 = load i32, i32* %15, align 4
  br i1 %75, label %116, label %82

82:                                               ; preds = %73
  %83 = lshr i16 %30, 3
  %84 = and i16 %83, 31
  %85 = zext i16 %84 to i32
  %86 = icmp sgt i32 %79, 0
  br i1 %86, label %87, label %169

87:                                               ; preds = %82
  %88 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %89 = mul nsw i32 %76, %85
  %90 = sext i32 %89 to i64
  %91 = mul nsw i32 %80, %85
  %92 = sext i32 %91 to i64
  %93 = mul nsw i32 %78, %85
  %94 = sext i32 %93 to i64
  br label %95

95:                                               ; preds = %114, %87
  %96 = phi %class.CFX_DIBBase* [ %31, %87 ], [ %115, %114 ]
  %97 = phi i32 [ 0, %87 ], [ %112, %114 ]
  %98 = load i8*, i8** %16, align 8
  %99 = add nsw i32 %97, %77
  %100 = load i32, i32* %88, align 4
  %101 = mul i32 %100, %99
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %98, i64 %90
  %104 = getelementptr inbounds i8, i8* %103, i64 %102
  %105 = add nsw i32 %97, %81
  %106 = bitcast %class.CFX_DIBBase* %96 to i8* (%class.CFX_DIBBase*, i32)***
  %107 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %106, align 8
  %108 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %107, i64 3
  %109 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %108, align 8
  %110 = call i8* %109(%class.CFX_DIBBase* %96, i32 %105) #7
  %111 = getelementptr inbounds i8, i8* %110, i64 %92
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %104, i8* align 1 %111, i64 %94, i1 false) #7
  %112 = add nuw nsw i32 %97, 1
  %113 = icmp eq i32 %112, %79
  br i1 %113, label %169, label %114

114:                                              ; preds = %95
  %115 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %21, align 8
  br label %95

116:                                              ; preds = %73
  %117 = icmp sgt i32 %79, 0
  br i1 %117, label %118, label %169

118:                                              ; preds = %116
  %119 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %120 = icmp sgt i32 %78, 0
  br label %121

121:                                              ; preds = %139, %118
  %122 = phi %class.CFX_DIBBase* [ %31, %118 ], [ %140, %139 ]
  %123 = phi i32 [ 0, %118 ], [ %137, %139 ]
  %124 = load i8*, i8** %16, align 8
  %125 = add nsw i32 %123, %77
  %126 = load i32, i32* %119, align 4
  %127 = mul i32 %126, %125
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %124, i64 %128
  %130 = add nsw i32 %123, %81
  %131 = bitcast %class.CFX_DIBBase* %122 to i8* (%class.CFX_DIBBase*, i32)***
  %132 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %131, align 8
  %133 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %132, i64 3
  %134 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %133, align 8
  %135 = call i8* %134(%class.CFX_DIBBase* %122, i32 %130) #7
  br i1 %120, label %141, label %136

136:                                              ; preds = %141, %121
  %137 = add nuw nsw i32 %123, 1
  %138 = icmp eq i32 %137, %79
  br i1 %138, label %169, label %139

139:                                              ; preds = %136
  %140 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %21, align 8
  br label %121

141:                                              ; preds = %121, %141
  %142 = phi i32 [ %167, %141 ], [ 0, %121 ]
  %143 = add nsw i32 %142, %80
  %144 = add nsw i32 %142, %76
  %145 = sdiv i32 %143, 8
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i8, i8* %135, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = srem i32 %143, 8
  %151 = sub nsw i32 7, %150
  %152 = shl i32 1, %151
  %153 = and i32 %152, %149
  %154 = icmp eq i32 %153, 0
  %155 = srem i32 %144, 8
  %156 = sub nsw i32 7, %155
  %157 = shl i32 1, %156
  %158 = sdiv i32 %144, 8
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i8, i8* %129, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = trunc i32 %157 to i8
  %163 = or i8 %161, %162
  %164 = xor i8 %162, -1
  %165 = and i8 %161, %164
  %166 = select i1 %154, i8 %165, i8 %163
  store i8 %166, i8* %160, align 1
  %167 = add nuw nsw i32 %142, 1
  %168 = icmp eq i32 %167, %78
  br i1 %168, label %136, label %141

169:                                              ; preds = %95, %136, %8, %116, %82, %72, %35, %19
  %170 = phi i1 [ false, %8 ], [ true, %19 ], [ %64, %72 ], [ false, %35 ], [ true, %82 ], [ true, %116 ], [ true, %136 ], [ true, %95 ]
  ret i1 %170
}

declare zeroext i1 @_ZNK11CFX_DIBBase14GetOverlapRectERiS0_S0_S0_iiS0_S0_PK11CFX_ClipRgn(%class.CFX_DIBBase*, i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4), i32, i32, i32* dereferenceable(4), i32* dereferenceable(4), %class.CFX_ClipRgn*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap26TransferWithUnequalFormatsE12FXDIB_FormatiiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEii(%class.CFX_DIBitmap* nocapture readonly, i16 zeroext, i32, i32, i32, i32, %"class.fxcrt::RetainPtr.8"* dereferenceable(8), i32, i32) local_unnamed_addr #0 align 2 {
  %10 = alloca %"class.std::__1::vector", align 8
  %11 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 1
  %14 = load i32*, i32** %13, align 8
  %15 = icmp eq i32* %12, %14
  br i1 %15, label %16, label %45

16:                                               ; preds = %9
  %17 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = and i16 %18, 255
  %20 = icmp eq i16 %19, 8
  %21 = select i1 %20, i16 264, i16 %1
  %22 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = mul i32 %25, %3
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %23, i64 %27
  %29 = zext i16 %19 to i32
  %30 = mul nsw i32 %29, %2
  %31 = sdiv i32 %30, 8
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %28, i64 %32
  %34 = bitcast %"class.std::__1::vector"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %34) #7
  %35 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 0, i64 24, i1 false) #7
  %36 = call zeroext i1 @_ZN11CFX_DIBBase13ConvertBufferE12FXDIB_FormatPhiiiRKN5fxcrt9RetainPtrIS_EEiiPNSt3__16vectorIj16FxAllocAllocatorIjEEE(i16 zeroext %21, i8* %33, i32 %25, i32 %4, i32 %5, %"class.fxcrt::RetainPtr.8"* dereferenceable(8) %6, i32 %7, i32 %8, %"class.std::__1::vector"* nonnull %10) #7
  %37 = load i32*, i32** %35, align 8
  %38 = icmp eq i32* %37, null
  br i1 %38, label %44, label %39

39:                                               ; preds = %16
  %40 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 1
  %41 = ptrtoint i32* %37 to i64
  %42 = bitcast i32** %40 to i64*
  store i64 %41, i64* %42, align 8
  %43 = bitcast i32* %37 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %43) #7
  br label %44

44:                                               ; preds = %16, %39
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %34) #7
  br label %45

45:                                               ; preds = %9, %44
  %46 = phi i1 [ %36, %44 ], [ false, %9 ]
  ret i1 %46
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_DIBitmap23TransferWithMultipleBPPEiiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEii(%class.CFX_DIBitmap* nocapture readonly, i32, i32, i32, i32, %"class.fxcrt::RetainPtr.8"* nocapture readonly dereferenceable(8), i32, i32) local_unnamed_addr #0 align 2 {
  %9 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = lshr i16 %10, 3
  %12 = and i16 %11, 31
  %13 = zext i16 %12 to i32
  %14 = icmp sgt i32 %4, 0
  br i1 %14, label %15, label %25

15:                                               ; preds = %8
  %16 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %17 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %18 = mul nsw i32 %13, %1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds %"class.fxcrt::RetainPtr.8", %"class.fxcrt::RetainPtr.8"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = mul nsw i32 %13, %6
  %22 = sext i32 %21 to i64
  %23 = mul nsw i32 %13, %3
  %24 = sext i32 %23 to i64
  br label %26

25:                                               ; preds = %26, %8
  ret void

26:                                               ; preds = %26, %15
  %27 = phi i32 [ 0, %15 ], [ %43, %26 ]
  %28 = load i8*, i8** %16, align 8
  %29 = add nsw i32 %27, %2
  %30 = load i32, i32* %17, align 4
  %31 = mul i32 %30, %29
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %28, i64 %19
  %34 = getelementptr inbounds i8, i8* %33, i64 %32
  %35 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %20, align 8
  %36 = add nsw i32 %27, %7
  %37 = bitcast %class.CFX_DIBBase* %35 to i8* (%class.CFX_DIBBase*, i32)***
  %38 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %37, align 8
  %39 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %38, i64 3
  %40 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %39, align 8
  %41 = tail call i8* %40(%class.CFX_DIBBase* %35, i32 %36) #7
  %42 = getelementptr inbounds i8, i8* %41, i64 %22
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %42, i64 %24, i1 false)
  %43 = add nuw nsw i32 %27, 1
  %44 = icmp eq i32 %43, %4
  br i1 %44, label %25, label %26
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_DIBitmap26TransferEqualFormatsOneBPPEiiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEii(%class.CFX_DIBitmap* nocapture readonly, i32, i32, i32, i32, %"class.fxcrt::RetainPtr.8"* nocapture readonly dereferenceable(8), i32, i32) local_unnamed_addr #0 align 2 {
  %9 = icmp sgt i32 %4, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %8
  %11 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %12 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %13 = getelementptr inbounds %"class.fxcrt::RetainPtr.8", %"class.fxcrt::RetainPtr.8"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %14 = icmp sgt i32 %3, 0
  br label %16

15:                                               ; preds = %31, %8
  ret void

16:                                               ; preds = %31, %10
  %17 = phi i32 [ 0, %10 ], [ %32, %31 ]
  %18 = load i8*, i8** %11, align 8
  %19 = add nsw i32 %17, %2
  %20 = load i32, i32* %12, align 4
  %21 = mul i32 %20, %19
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %18, i64 %22
  %24 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %13, align 8
  %25 = add nsw i32 %17, %7
  %26 = bitcast %class.CFX_DIBBase* %24 to i8* (%class.CFX_DIBBase*, i32)***
  %27 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %26, align 8
  %28 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %27, i64 3
  %29 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %28, align 8
  %30 = tail call i8* %29(%class.CFX_DIBBase* %24, i32 %25) #7
  br i1 %14, label %34, label %31

31:                                               ; preds = %34, %16
  %32 = add nuw nsw i32 %17, 1
  %33 = icmp eq i32 %32, %4
  br i1 %33, label %15, label %16

34:                                               ; preds = %16, %34
  %35 = phi i32 [ %60, %34 ], [ 0, %16 ]
  %36 = add nsw i32 %35, %6
  %37 = add nsw i32 %35, %1
  %38 = sdiv i32 %36, 8
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %30, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = srem i32 %36, 8
  %44 = sub nsw i32 7, %43
  %45 = shl i32 1, %44
  %46 = and i32 %45, %42
  %47 = icmp eq i32 %46, 0
  %48 = srem i32 %37, 8
  %49 = sub nsw i32 7, %48
  %50 = shl i32 1, %49
  %51 = sdiv i32 %37, 8
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %23, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = trunc i32 %50 to i8
  %56 = or i8 %54, %55
  %57 = xor i8 %55, -1
  %58 = and i8 %54, %57
  %59 = select i1 %47, i8 %58, i8 %56
  store i8 %59, i8* %53, align 1
  %60 = add nuw nsw i32 %35, 1
  %61 = icmp eq i32 %60, %3
  br i1 %61, label %31, label %34
}

declare zeroext i1 @_ZN11CFX_DIBBase13ConvertBufferE12FXDIB_FormatPhiiiRKN5fxcrt9RetainPtrIS_EEiiPNSt3__16vectorIj16FxAllocAllocatorIjEEE(i16 zeroext, i8*, i32, i32, i32, %"class.fxcrt::RetainPtr.8"* dereferenceable(8), i32, i32, %"class.std::__1::vector"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap20SetChannelFromBitmapENS_7ChannelERKN5fxcrt9RetainPtrI11CFX_DIBBaseEE(%class.CFX_DIBitmap*, i8 zeroext, %"class.fxcrt::RetainPtr.8"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.fxcrt::RetainPtr", align 8
  %5 = alloca %"class.fxcrt::RetainPtr", align 8
  %6 = alloca %"class.fxcrt::RetainPtr", align 8
  %7 = alloca %struct.FXDIB_ResampleOptions, align 1
  %8 = alloca %"class.fxcrt::RetainPtr", align 8
  %9 = alloca %struct.FXDIB_ResampleOptions, align 1
  %10 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %362, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.fxcrt::RetainPtr.8", %"class.fxcrt::RetainPtr.8"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %14, align 8
  %16 = ptrtoint %class.CFX_DIBBase* %15 to i64
  %17 = icmp eq %class.CFX_DIBBase* %15, null
  br i1 %17, label %23, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %15, i64 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = add nsw i64 %20, 1
  store i64 %21, i64* %19, align 8
  %22 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %14, align 8
  br label %23

23:                                               ; preds = %13, %18
  %24 = phi %class.CFX_DIBBase* [ null, %13 ], [ %22, %18 ]
  %25 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %24, i64 0, i32 1
  %26 = load i16, i16* %25, align 8
  %27 = and i16 %26, 768
  %28 = icmp eq i16 %27, 0
  br i1 %28, label %347, label %29

29:                                               ; preds = %23
  %30 = and i16 %26, 255
  %31 = icmp eq i16 %30, 1
  br i1 %31, label %32, label %75

32:                                               ; preds = %29
  %33 = bitcast %"class.fxcrt::RetainPtr"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  call void @_ZN11CFX_DIBBase12CloneConvertE12FXDIB_Format(%"class.fxcrt::RetainPtr"* nonnull sret %4, %class.CFX_DIBBase* %24, i16 zeroext 264) #7
  %34 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %35 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %34, align 8
  %36 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %35, i64 0, i32 0
  %37 = ptrtoint %class.CFX_DIBitmap* %35 to i64
  %38 = icmp eq %class.CFX_DIBitmap* %35, null
  br i1 %38, label %43, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %35, i64 0, i32 0, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = add nsw i64 %41, 1
  store i64 %42, i64* %40, align 8
  br label %43

43:                                               ; preds = %32, %39
  br i1 %17, label %56, label %44

44:                                               ; preds = %43
  %45 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %15, i64 0, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = add nsw i64 %46, -1
  store i64 %47, i64* %45, align 8
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %56

49:                                               ; preds = %44
  %50 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %15, i64 0, i32 0
  %51 = bitcast %class.CFX_DIBBase* %15 to void (%"class.fxcrt::Retainable"*)***
  %52 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %51, align 8
  %53 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %52, i64 1
  %54 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %53, align 8
  call void %54(%"class.fxcrt::Retainable"* nonnull %50) #7
  %55 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %34, align 8
  br label %56

56:                                               ; preds = %49, %44, %43
  %57 = phi %class.CFX_DIBitmap* [ %55, %49 ], [ %35, %44 ], [ %35, %43 ]
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %34, align 8
  %58 = icmp eq %class.CFX_DIBitmap* %57, null
  br i1 %58, label %70, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %57, i64 0, i32 0, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = add nsw i64 %61, -1
  store i64 %62, i64* %60, align 8
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %70

64:                                               ; preds = %59
  %65 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %57, i64 0, i32 0, i32 0
  %66 = bitcast %class.CFX_DIBitmap* %57 to void (%"class.fxcrt::Retainable"*)***
  %67 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %66, align 8
  %68 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %67, i64 1
  %69 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %68, align 8
  call void %69(%"class.fxcrt::Retainable"* nonnull %65) #7
  br label %70

70:                                               ; preds = %56, %59, %64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  br i1 %38, label %347, label %71

71:                                               ; preds = %70
  %72 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %14, align 8
  %73 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %72, i64 0, i32 1
  %74 = load i16, i16* %73, align 8
  br label %75

75:                                               ; preds = %71, %29
  %76 = phi i16 [ %74, %71 ], [ %26, %29 ]
  %77 = phi i64 [ %37, %71 ], [ %16, %29 ]
  %78 = inttoptr i64 %77 to %class.CFX_DIBBase*
  %79 = icmp eq i16 %76, 544
  %80 = select i1 %79, i32 3, i32 0
  %81 = icmp eq i8 %1, 1
  %82 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %83 = load i16, i16* %82, align 8
  %84 = and i16 %83, 256
  %85 = icmp ne i16 %84, 0
  br i1 %81, label %86, label %91

86:                                               ; preds = %75
  br i1 %85, label %87, label %89

87:                                               ; preds = %86
  %88 = call zeroext i1 @_ZN12CFX_DIBitmap13ConvertFormatE12FXDIB_Format(%class.CFX_DIBitmap* %0, i16 zeroext 264)
  br i1 %88, label %102, label %347

89:                                               ; preds = %86
  %90 = call zeroext i1 @_ZN12CFX_DIBitmap13ConvertFormatE12FXDIB_Format(%class.CFX_DIBitmap* %0, i16 zeroext 544)
  br i1 %90, label %102, label %347

91:                                               ; preds = %75
  br i1 %85, label %347, label %92

92:                                               ; preds = %91
  %93 = and i16 %83, 248
  %94 = icmp ult i16 %93, 24
  br i1 %94, label %95, label %102

95:                                               ; preds = %92
  %96 = and i16 %83, 512
  %97 = icmp eq i16 %96, 0
  br i1 %97, label %100, label %98

98:                                               ; preds = %95
  %99 = call zeroext i1 @_ZN12CFX_DIBitmap13ConvertFormatE12FXDIB_Format(%class.CFX_DIBitmap* %0, i16 zeroext 544)
  br i1 %99, label %102, label %347

100:                                              ; preds = %95
  %101 = call zeroext i1 @_ZN12CFX_DIBitmap13ConvertFormatE12FXDIB_Format(%class.CFX_DIBitmap* %0, i16 zeroext 24)
  br i1 %101, label %102, label %347

102:                                              ; preds = %92, %100, %98, %89, %87
  %103 = phi i32 [ 0, %87 ], [ 3, %89 ], [ 2, %98 ], [ 2, %100 ], [ 2, %92 ]
  %104 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %78, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %105 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %104, align 8
  %106 = icmp eq %class.CFX_DIBitmap* %105, null
  br i1 %106, label %195, label %107

107:                                              ; preds = %102
  %108 = bitcast %"class.fxcrt::RetainPtr"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %108) #7
  call void @_ZN11CFX_DIBBase12GetAlphaMaskEv(%"class.fxcrt::RetainPtr"* nonnull sret %5, %class.CFX_DIBBase* %78) #7
  %109 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %110 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %109, align 8
  %111 = ptrtoint %class.CFX_DIBitmap* %110 to i64
  %112 = icmp eq %class.CFX_DIBitmap* %110, null
  br i1 %112, label %113, label %114

113:                                              ; preds = %107
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %109, align 8
  br label %124

114:                                              ; preds = %107
  %115 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %110, i64 0, i32 0, i32 0, i32 1
  %116 = load i64, i64* %115, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %109, align 8
  store i64 %116, i64* %115, align 8
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %124

118:                                              ; preds = %114
  %119 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %110, i64 0, i32 0, i32 0
  %120 = bitcast %class.CFX_DIBitmap* %110 to void (%"class.fxcrt::Retainable"*)***
  %121 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %120, align 8
  %122 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %121, i64 1
  %123 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %122, align 8
  call void %123(%"class.fxcrt::Retainable"* nonnull %119) #7
  br label %124

124:                                              ; preds = %113, %114, %118
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %108) #7
  %125 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %78, i64 0, i32 2
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %128 = load i32, i32* %127, align 4
  %129 = icmp eq i32 %126, %128
  br i1 %129, label %130, label %137

130:                                              ; preds = %124
  %131 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %78, i64 0, i32 3
  %132 = load i32, i32* %131, align 8
  %133 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %134 = load i32, i32* %133, align 8
  %135 = icmp eq i32 %132, %134
  %136 = or i1 %112, %135
  br i1 %136, label %181, label %141

137:                                              ; preds = %124
  br i1 %112, label %181, label %138

138:                                              ; preds = %137
  %139 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %140 = load i32, i32* %139, align 8
  br label %141

141:                                              ; preds = %138, %130
  %142 = phi i32 [ %140, %138 ], [ %134, %130 ]
  %143 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %110, i64 0, i32 0
  %144 = bitcast %"class.fxcrt::RetainPtr"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %144) #7
  %145 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %145) #7
  call void @_ZN21FXDIB_ResampleOptionsC1Ev(%struct.FXDIB_ResampleOptions* nonnull %7) #7
  call void @_ZN11CFX_DIBBase9StretchToEiiRK21FXDIB_ResampleOptionsPK7FX_RECT(%"class.fxcrt::RetainPtr"* nonnull sret %6, %class.CFX_DIBBase* nonnull %143, i32 %128, i32 %142, %struct.FXDIB_ResampleOptions* nonnull dereferenceable(4) %7, %struct.FX_RECT* null) #7
  %146 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %147 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %146, align 8
  %148 = ptrtoint %class.CFX_DIBitmap* %147 to i64
  %149 = icmp eq %class.CFX_DIBitmap* %147, null
  br i1 %149, label %154, label %150

150:                                              ; preds = %141
  %151 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %147, i64 0, i32 0, i32 0, i32 1
  %152 = load i64, i64* %151, align 8
  %153 = add nsw i64 %152, 1
  store i64 %153, i64* %151, align 8
  br label %154

154:                                              ; preds = %150, %141
  %155 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %110, i64 0, i32 0, i32 0, i32 1
  %156 = load i64, i64* %155, align 8
  %157 = add nsw i64 %156, -1
  store i64 %157, i64* %155, align 8
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %159, label %166

159:                                              ; preds = %154
  %160 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %110, i64 0, i32 0, i32 0
  %161 = bitcast %class.CFX_DIBitmap* %110 to void (%"class.fxcrt::Retainable"*)***
  %162 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %161, align 8
  %163 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %162, i64 1
  %164 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %163, align 8
  call void %164(%"class.fxcrt::Retainable"* nonnull %160) #7
  %165 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %146, align 8
  br label %166

166:                                              ; preds = %159, %154
  %167 = phi %class.CFX_DIBitmap* [ %165, %159 ], [ %147, %154 ]
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %146, align 8
  %168 = icmp eq %class.CFX_DIBitmap* %167, null
  br i1 %168, label %180, label %169

169:                                              ; preds = %166
  %170 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %167, i64 0, i32 0, i32 0, i32 1
  %171 = load i64, i64* %170, align 8
  %172 = add nsw i64 %171, -1
  store i64 %172, i64* %170, align 8
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %180

174:                                              ; preds = %169
  %175 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %167, i64 0, i32 0, i32 0
  %176 = bitcast %class.CFX_DIBitmap* %167 to void (%"class.fxcrt::Retainable"*)***
  %177 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %176, align 8
  %178 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %177, i64 1
  %179 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %178, align 8
  call void %179(%"class.fxcrt::Retainable"* nonnull %175) #7
  br label %180

180:                                              ; preds = %166, %169, %174
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %145) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %144) #7
  br i1 %149, label %347, label %181

181:                                              ; preds = %180, %137, %130
  %182 = phi i64 [ %111, %130 ], [ %148, %180 ], [ %111, %137 ]
  %183 = icmp eq i64 %77, 0
  br i1 %183, label %251, label %184

184:                                              ; preds = %181
  %185 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %78, i64 0, i32 0, i32 1
  %186 = load i64, i64* %185, align 8
  %187 = add nsw i64 %186, -1
  store i64 %187, i64* %185, align 8
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %251

189:                                              ; preds = %184
  %190 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %78, i64 0, i32 0
  %191 = inttoptr i64 %77 to void (%"class.fxcrt::Retainable"*)***
  %192 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %191, align 8
  %193 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %192, i64 1
  %194 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %193, align 8
  call void %194(%"class.fxcrt::Retainable"* nonnull %190) #7
  br label %251

195:                                              ; preds = %102
  %196 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %78, i64 0, i32 2
  %197 = load i32, i32* %196, align 4
  %198 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %197, %199
  br i1 %200, label %204, label %201

201:                                              ; preds = %195
  %202 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %203 = load i32, i32* %202, align 8
  br label %210

204:                                              ; preds = %195
  %205 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %78, i64 0, i32 3
  %206 = load i32, i32* %205, align 8
  %207 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %208 = load i32, i32* %207, align 8
  %209 = icmp eq i32 %206, %208
  br i1 %209, label %251, label %210

210:                                              ; preds = %201, %204
  %211 = phi i32 [ %203, %201 ], [ %208, %204 ]
  %212 = bitcast %"class.fxcrt::RetainPtr"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %212) #7
  %213 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  store %class.CFX_DIBitmap* inttoptr (i64 -6148914691236517206 to %class.CFX_DIBitmap*), %class.CFX_DIBitmap** %213, align 8
  %214 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %214) #7
  call void @_ZN21FXDIB_ResampleOptionsC1Ev(%struct.FXDIB_ResampleOptions* nonnull %9) #7
  call void @_ZN11CFX_DIBBase9StretchToEiiRK21FXDIB_ResampleOptionsPK7FX_RECT(%"class.fxcrt::RetainPtr"* nonnull sret %8, %class.CFX_DIBBase* %78, i32 %199, i32 %211, %struct.FXDIB_ResampleOptions* nonnull dereferenceable(4) %9, %struct.FX_RECT* null) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %214) #7
  %215 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %213, align 8
  %216 = icmp eq %class.CFX_DIBitmap* %215, null
  br i1 %216, label %250, label %217

217:                                              ; preds = %210
  %218 = ptrtoint %class.CFX_DIBitmap* %215 to i64
  %219 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %215, i64 0, i32 0, i32 0, i32 1
  %220 = load i64, i64* %219, align 8
  %221 = add nsw i64 %220, 1
  store i64 %221, i64* %219, align 8
  %222 = icmp eq i64 %77, 0
  br i1 %222, label %228, label %223

223:                                              ; preds = %217
  %224 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %78, i64 0, i32 0, i32 1
  %225 = load i64, i64* %224, align 8
  %226 = add nsw i64 %225, -1
  store i64 %226, i64* %224, align 8
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %229, label %228

228:                                              ; preds = %223, %217
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %213, align 8
  br label %237

229:                                              ; preds = %223
  %230 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %78, i64 0, i32 0
  %231 = inttoptr i64 %77 to void (%"class.fxcrt::Retainable"*)***
  %232 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %231, align 8
  %233 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %232, i64 1
  %234 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %233, align 8
  call void %234(%"class.fxcrt::Retainable"* nonnull %230) #7
  %235 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %213, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %213, align 8
  %236 = icmp eq %class.CFX_DIBitmap* %235, null
  br i1 %236, label %249, label %237

237:                                              ; preds = %228, %229
  %238 = phi %class.CFX_DIBitmap* [ %215, %228 ], [ %235, %229 ]
  %239 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %238, i64 0, i32 0, i32 0, i32 1
  %240 = load i64, i64* %239, align 8
  %241 = add nsw i64 %240, -1
  store i64 %241, i64* %239, align 8
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %249

243:                                              ; preds = %237
  %244 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %238, i64 0, i32 0, i32 0
  %245 = bitcast %class.CFX_DIBitmap* %238 to void (%"class.fxcrt::Retainable"*)***
  %246 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %245, align 8
  %247 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %246, i64 1
  %248 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %247, align 8
  call void %248(%"class.fxcrt::Retainable"* nonnull %244) #7
  br label %249

249:                                              ; preds = %229, %237, %243
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %212) #7
  br label %251

250:                                              ; preds = %210
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %212) #7
  br label %347

251:                                              ; preds = %189, %184, %181, %249, %204
  %252 = phi i64 [ %77, %204 ], [ %218, %249 ], [ %182, %181 ], [ %182, %184 ], [ %182, %189 ]
  %253 = phi i32 [ %80, %204 ], [ %80, %249 ], [ 0, %181 ], [ 0, %184 ], [ 0, %189 ]
  %254 = icmp eq %class.CFX_DIBitmap* %0, null
  br i1 %254, label %259, label %255

255:                                              ; preds = %251
  %256 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 0, i32 1
  %257 = load i64, i64* %256, align 8
  %258 = add nsw i64 %257, 1
  store i64 %258, i64* %256, align 8
  br label %259

259:                                              ; preds = %251, %255
  br i1 %81, label %260, label %281

260:                                              ; preds = %259
  %261 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %262 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %261, align 8
  %263 = icmp eq %class.CFX_DIBitmap* %262, null
  br i1 %263, label %281, label %264

264:                                              ; preds = %260
  %265 = icmp eq %class.CFX_DIBitmap* %262, %0
  br i1 %265, label %281, label %266

266:                                              ; preds = %264
  %267 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %262, i64 0, i32 0, i32 0, i32 1
  %268 = load i64, i64* %267, align 8
  %269 = add nsw i64 %268, 1
  store i64 %269, i64* %267, align 8
  br i1 %254, label %281, label %270

270:                                              ; preds = %266
  %271 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 0, i32 1
  %272 = load i64, i64* %271, align 8
  %273 = add nsw i64 %272, -1
  store i64 %273, i64* %271, align 8
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %281

275:                                              ; preds = %270
  %276 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 0
  %277 = bitcast %class.CFX_DIBitmap* %0 to void (%"class.fxcrt::Retainable"*)***
  %278 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %277, align 8
  %279 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %278, i64 1
  %280 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %279, align 8
  call void %280(%"class.fxcrt::Retainable"* nonnull %276) #7
  br label %281

281:                                              ; preds = %260, %275, %270, %266, %264, %259
  %282 = phi %class.CFX_DIBitmap* [ %0, %260 ], [ %0, %259 ], [ %0, %264 ], [ %262, %266 ], [ %262, %275 ], [ %262, %270 ]
  %283 = phi i32 [ %103, %260 ], [ %103, %259 ], [ 0, %264 ], [ 0, %266 ], [ 0, %275 ], [ 0, %270 ]
  %284 = inttoptr i64 %252 to %class.CFX_DIBBase*
  %285 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %282, i64 0, i32 0
  %286 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %287 = load i32, i32* %286, align 8
  %288 = icmp sgt i32 %287, 0
  br i1 %288, label %289, label %305

289:                                              ; preds = %281
  %290 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %282, i64 0, i32 0, i32 1
  %291 = load i16, i16* %290, align 8
  %292 = lshr i16 %291, 3
  %293 = and i16 %292, 31
  %294 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %284, i64 0, i32 1
  %295 = load i16, i16* %294, align 8
  %296 = lshr i16 %295, 3
  %297 = and i16 %296, 31
  %298 = bitcast %class.CFX_DIBitmap* %282 to i8* (%class.CFX_DIBBase*, i32)***
  %299 = sext i32 %283 to i64
  %300 = inttoptr i64 %252 to i8* (%class.CFX_DIBBase*, i32)***
  %301 = zext i32 %253 to i64
  %302 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %303 = zext i16 %293 to i64
  %304 = zext i16 %297 to i64
  br label %318

305:                                              ; preds = %333, %281
  %306 = icmp eq %class.CFX_DIBitmap* %282, null
  br i1 %306, label %347, label %307

307:                                              ; preds = %305
  %308 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %282, i64 0, i32 0, i32 0, i32 1
  %309 = load i64, i64* %308, align 8
  %310 = add nsw i64 %309, -1
  store i64 %310, i64* %308, align 8
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %347

312:                                              ; preds = %307
  %313 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %282, i64 0, i32 0, i32 0
  %314 = bitcast %class.CFX_DIBitmap* %282 to void (%"class.fxcrt::Retainable"*)***
  %315 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %314, align 8
  %316 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %315, i64 1
  %317 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %316, align 8
  call void %317(%"class.fxcrt::Retainable"* nonnull %313) #7
  br label %347

318:                                              ; preds = %289, %333
  %319 = phi i32 [ 0, %289 ], [ %334, %333 ]
  %320 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %298, align 8
  %321 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %320, i64 3
  %322 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %321, align 8
  %323 = call i8* %322(%class.CFX_DIBBase* %285, i32 %319) #7
  %324 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %300, align 8
  %325 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %324, i64 3
  %326 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %325, align 8
  %327 = call i8* %326(%class.CFX_DIBBase* %284, i32 %319) #7
  %328 = load i32, i32* %302, align 4
  %329 = icmp sgt i32 %328, 0
  br i1 %329, label %330, label %333

330:                                              ; preds = %318
  %331 = getelementptr inbounds i8, i8* %327, i64 %301
  %332 = getelementptr inbounds i8, i8* %323, i64 %299
  br label %337

333:                                              ; preds = %337, %318
  %334 = add nuw nsw i32 %319, 1
  %335 = load i32, i32* %286, align 8
  %336 = icmp slt i32 %334, %335
  br i1 %336, label %318, label %305

337:                                              ; preds = %330, %337
  %338 = phi i32 [ %344, %337 ], [ 0, %330 ]
  %339 = phi i8* [ %343, %337 ], [ %331, %330 ]
  %340 = phi i8* [ %342, %337 ], [ %332, %330 ]
  %341 = load i8, i8* %339, align 1
  store i8 %341, i8* %340, align 1
  %342 = getelementptr inbounds i8, i8* %340, i64 %303
  %343 = getelementptr inbounds i8, i8* %339, i64 %304
  %344 = add nuw nsw i32 %338, 1
  %345 = load i32, i32* %302, align 4
  %346 = icmp slt i32 %344, %345
  br i1 %346, label %337, label %333

347:                                              ; preds = %180, %70, %23, %312, %307, %305, %87, %89, %91, %98, %100, %250
  %348 = phi %class.CFX_DIBBase* [ %78, %250 ], [ %78, %87 ], [ %78, %89 ], [ %78, %91 ], [ %78, %98 ], [ %78, %100 ], [ %36, %70 ], [ %284, %305 ], [ %284, %307 ], [ %284, %312 ], [ %15, %23 ], [ %78, %180 ]
  %349 = phi i1 [ false, %250 ], [ false, %87 ], [ false, %89 ], [ false, %91 ], [ false, %98 ], [ false, %100 ], [ false, %70 ], [ true, %305 ], [ true, %307 ], [ true, %312 ], [ false, %23 ], [ false, %180 ]
  %350 = icmp eq %class.CFX_DIBBase* %348, null
  br i1 %350, label %362, label %351

351:                                              ; preds = %347
  %352 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %348, i64 0, i32 0, i32 1
  %353 = load i64, i64* %352, align 8
  %354 = add nsw i64 %353, -1
  store i64 %354, i64* %352, align 8
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %362

356:                                              ; preds = %351
  %357 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %348, i64 0, i32 0
  %358 = bitcast %class.CFX_DIBBase* %348 to void (%"class.fxcrt::Retainable"*)***
  %359 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %358, align 8
  %360 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %359, i64 1
  %361 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %360, align 8
  call void %361(%"class.fxcrt::Retainable"* nonnull %357) #7
  br label %362

362:                                              ; preds = %3, %356, %351, %347
  %363 = phi i1 [ false, %3 ], [ %349, %347 ], [ %349, %351 ], [ %349, %356 ]
  ret i1 %363
}

declare void @_ZN11CFX_DIBBase12CloneConvertE12FXDIB_Format(%"class.fxcrt::RetainPtr"* sret, %class.CFX_DIBBase*, i16 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap13ConvertFormatE12FXDIB_Format(%class.CFX_DIBitmap*, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::RetainPtr", align 8
  %4 = alloca %"class.fxcrt::RetainPtr.8", align 8
  %5 = alloca %"class.std::__1::vector", align 16
  %6 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0
  %7 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = icmp eq i16 %8, %1
  br i1 %9, label %266, label %10

10:                                               ; preds = %2
  %11 = icmp eq i16 %1, 264
  %12 = icmp eq i16 %8, 8
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %21

14:                                               ; preds = %10
  %15 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 0
  %16 = load i32*, i32** %15, align 8
  %17 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 1
  %18 = load i32*, i32** %17, align 8
  %19 = icmp eq i32* %16, %18
  br i1 %19, label %20, label %60

20:                                               ; preds = %14
  store i16 264, i16* %7, align 8
  br label %266

21:                                               ; preds = %10
  %22 = icmp eq i16 %1, 544
  br i1 %22, label %23, label %60

23:                                               ; preds = %21
  %24 = icmp eq i16 %8, 32
  br i1 %24, label %25, label %60

25:                                               ; preds = %23
  store i16 544, i16* %7, align 8
  %26 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %27 = load i32, i32* %26, align 8
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %266

29:                                               ; preds = %25
  %30 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %31 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %32 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %33 = load i32, i32* %32, align 4
  br label %34

34:                                               ; preds = %29, %48
  %35 = phi i32 [ %27, %29 ], [ %49, %48 ]
  %36 = phi i32 [ %33, %29 ], [ %50, %48 ]
  %37 = phi i32 [ 0, %29 ], [ %51, %48 ]
  %38 = icmp sgt i32 %36, 0
  br i1 %38, label %39, label %48

39:                                               ; preds = %34
  %40 = load i8*, i8** %30, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 3
  %42 = load i32, i32* %31, align 4
  %43 = mul i32 %42, %37
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %41, i64 %44
  br label %53

46:                                               ; preds = %53
  %47 = load i32, i32* %26, align 8
  br label %48

48:                                               ; preds = %46, %34
  %49 = phi i32 [ %47, %46 ], [ %35, %34 ]
  %50 = phi i32 [ %58, %46 ], [ %36, %34 ]
  %51 = add nuw nsw i32 %37, 1
  %52 = icmp slt i32 %51, %49
  br i1 %52, label %34, label %266

53:                                               ; preds = %39, %53
  %54 = phi i32 [ %57, %53 ], [ 0, %39 ]
  %55 = phi i8* [ %56, %53 ], [ %45, %39 ]
  store i8 -1, i8* %55, align 1
  %56 = getelementptr inbounds i8, i8* %55, i64 4
  %57 = add nuw nsw i32 %54, 1
  %58 = load i32, i32* %32, align 4
  %59 = icmp slt i32 %57, %58
  br i1 %59, label %53, label %46

60:                                               ; preds = %14, %23, %21
  %61 = phi i1 [ true, %23 ], [ false, %21 ], [ false, %14 ]
  %62 = and i16 %1, 255
  %63 = zext i16 %62 to i32
  %64 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %65 = load i32, i32* %64, align 4
  %66 = mul nsw i32 %65, %63
  %67 = add nsw i32 %66, 31
  %68 = sdiv i32 %67, 32
  %69 = shl nsw i32 %68, 2
  %70 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %71 = load i32, i32* %70, align 8
  %72 = mul nsw i32 %69, %71
  %73 = add nsw i32 %72, 4
  %74 = sext i32 %73 to i64
  %75 = tail call i8* @_ZN6pdfium8internal6CallocEmm(i64 %74, i64 1) #7
  %76 = ptrtoint i8* %75 to i64
  %77 = icmp eq i8* %75, null
  br i1 %77, label %260, label %78

78:                                               ; preds = %60
  br i1 %61, label %79, label %124

79:                                               ; preds = %78
  %80 = load i32, i32* %70, align 8
  %81 = mul nsw i32 %80, %69
  %82 = add nsw i32 %81, 4
  %83 = sext i32 %82 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %75, i8 -1, i64 %83, i1 false)
  %84 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %85 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %84, align 8
  %86 = icmp eq %class.CFX_DIBitmap* %85, null
  br i1 %86, label %150, label %87

87:                                               ; preds = %79
  %88 = load i32, i32* %70, align 8
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %90, label %150

90:                                               ; preds = %87
  %91 = getelementptr inbounds i8, i8* %75, i64 3
  %92 = sext i32 %69 to i64
  br label %93

93:                                               ; preds = %112, %90
  %94 = phi %class.CFX_DIBitmap* [ %85, %90 ], [ %113, %112 ]
  %95 = phi i64 [ 0, %90 ], [ %108, %112 ]
  %96 = bitcast %class.CFX_DIBitmap* %94 to i8* (%class.CFX_DIBitmap*, i32)***
  %97 = load i8* (%class.CFX_DIBitmap*, i32)**, i8* (%class.CFX_DIBitmap*, i32)*** %96, align 8
  %98 = getelementptr inbounds i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %97, i64 3
  %99 = load i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %98, align 8
  %100 = trunc i64 %95 to i32
  %101 = tail call i8* %99(%class.CFX_DIBitmap* %94, i32 %100) #7
  %102 = load i32, i32* %64, align 4
  %103 = icmp sgt i32 %102, 0
  br i1 %103, label %104, label %107

104:                                              ; preds = %93
  %105 = mul nsw i64 %95, %92
  %106 = getelementptr inbounds i8, i8* %91, i64 %105
  br label %114

107:                                              ; preds = %114, %93
  %108 = add nuw nsw i64 %95, 1
  %109 = load i32, i32* %70, align 8
  %110 = sext i32 %109 to i64
  %111 = icmp slt i64 %108, %110
  br i1 %111, label %112, label %150

112:                                              ; preds = %107
  %113 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %84, align 8
  br label %93

114:                                              ; preds = %104, %114
  %115 = phi i32 [ %121, %114 ], [ 0, %104 ]
  %116 = phi i8* [ %118, %114 ], [ %101, %104 ]
  %117 = phi i8* [ %120, %114 ], [ %106, %104 ]
  %118 = getelementptr inbounds i8, i8* %116, i64 1
  %119 = load i8, i8* %116, align 1
  store i8 %119, i8* %117, align 1
  %120 = getelementptr inbounds i8, i8* %117, i64 4
  %121 = add nuw nsw i32 %115, 1
  %122 = load i32, i32* %64, align 4
  %123 = icmp slt i32 %121, %122
  br i1 %123, label %114, label %107

124:                                              ; preds = %78
  %125 = and i16 %1, 512
  %126 = icmp eq i16 %125, 0
  br i1 %126, label %150, label %127

127:                                              ; preds = %124
  %128 = load i16, i16* %7, align 8
  %129 = icmp eq i16 %128, 544
  br i1 %129, label %130, label %135

130:                                              ; preds = %127
  %131 = bitcast %"class.fxcrt::RetainPtr"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %131) #7
  call void @_ZNK11CFX_DIBBase14CloneAlphaMaskEv(%"class.fxcrt::RetainPtr"* nonnull sret %3, %class.CFX_DIBBase* %6) #7
  %132 = bitcast %"class.fxcrt::RetainPtr"* %3 to i64*
  %133 = load i64, i64* %132, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %131) #7
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %260, label %150

135:                                              ; preds = %127
  %136 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 5
  %137 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %136, i64 0, i32 0, i32 0, i32 0, i32 0
  %138 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %137, align 8
  %139 = icmp eq %class.CFX_DIBitmap* %138, null
  br i1 %139, label %140, label %145

140:                                              ; preds = %135
  %141 = tail call zeroext i1 @_ZN11CFX_DIBBase14BuildAlphaMaskEv(%class.CFX_DIBBase* %6) #7
  br i1 %141, label %142, label %260

142:                                              ; preds = %140
  %143 = bitcast %"class.fxcrt::RetainPtr"* %136 to i64*
  %144 = load i64, i64* %143, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %137, align 8
  br label %150

145:                                              ; preds = %135
  %146 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %138, i64 0, i32 0, i32 0, i32 1
  %147 = load i64, i64* %146, align 8
  %148 = add nsw i64 %147, 1
  store i64 %148, i64* %146, align 8
  %149 = ptrtoint %class.CFX_DIBitmap* %138 to i64
  br label %150

150:                                              ; preds = %107, %87, %79, %130, %124, %142, %145
  %151 = phi i64 [ 0, %79 ], [ %133, %130 ], [ %149, %145 ], [ %144, %142 ], [ 0, %124 ], [ 0, %87 ], [ 0, %107 ]
  %152 = bitcast %"class.fxcrt::RetainPtr.8"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %152) #7
  %153 = getelementptr inbounds %"class.fxcrt::RetainPtr.8", %"class.fxcrt::RetainPtr.8"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %154 = ptrtoint %class.CFX_DIBitmap* %0 to i64
  %155 = bitcast %"class.fxcrt::RetainPtr.8"* %4 to i64*
  store i64 %154, i64* %155, align 8
  %156 = icmp eq %class.CFX_DIBitmap* %0, null
  br i1 %156, label %161, label %157

157:                                              ; preds = %150
  %158 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 0, i32 1
  %159 = load i64, i64* %158, align 8
  %160 = add nsw i64 %159, 1
  store i64 %160, i64* %158, align 8
  br label %161

161:                                              ; preds = %150, %157
  %162 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %162) #7
  %163 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %165 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %162, i8 0, i64 24, i1 false) #7
  %166 = load i32, i32* %64, align 4
  %167 = load i32, i32* %70, align 8
  %168 = call zeroext i1 @_ZN11CFX_DIBBase13ConvertBufferE12FXDIB_FormatPhiiiRKN5fxcrt9RetainPtrIS_EEiiPNSt3__16vectorIj16FxAllocAllocatorIjEEE(i16 zeroext %1, i8* nonnull %75, i32 %69, i32 %166, i32 %167, %"class.fxcrt::RetainPtr.8"* nonnull dereferenceable(8) %4, i32 0, i32 0, %"class.std::__1::vector"* nonnull %5) #7
  br i1 %168, label %169, label %223

169:                                              ; preds = %161
  %170 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %171 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %170, align 8
  %172 = inttoptr i64 %151 to %class.CFX_DIBitmap*
  %173 = icmp eq %class.CFX_DIBitmap* %171, %172
  br i1 %173, label %195, label %174

174:                                              ; preds = %169
  %175 = icmp eq i64 %151, 0
  br i1 %175, label %181, label %176

176:                                              ; preds = %174
  %177 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %172, i64 0, i32 0, i32 0, i32 1
  %178 = load i64, i64* %177, align 8
  %179 = add nsw i64 %178, 1
  store i64 %179, i64* %177, align 8
  %180 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %170, align 8
  br label %181

181:                                              ; preds = %176, %174
  %182 = phi %class.CFX_DIBitmap* [ %180, %176 ], [ %171, %174 ]
  store %class.CFX_DIBitmap* %172, %class.CFX_DIBitmap** %170, align 8
  %183 = icmp eq %class.CFX_DIBitmap* %182, null
  br i1 %183, label %195, label %184

184:                                              ; preds = %181
  %185 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %182, i64 0, i32 0, i32 0, i32 1
  %186 = load i64, i64* %185, align 8
  %187 = add nsw i64 %186, -1
  store i64 %187, i64* %185, align 8
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %195

189:                                              ; preds = %184
  %190 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %182, i64 0, i32 0, i32 0
  %191 = bitcast %class.CFX_DIBitmap* %182 to void (%"class.fxcrt::Retainable"*)***
  %192 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %191, align 8
  %193 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %192, i64 1
  %194 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %193, align 8
  call void %194(%"class.fxcrt::Retainable"* nonnull %190) #7
  br label %195

195:                                              ; preds = %169, %181, %184, %189
  %196 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6
  %197 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %196, i64 0, i32 0, i32 0
  %198 = load i32*, i32** %197, align 8
  %199 = icmp eq i32* %198, null
  br i1 %199, label %206, label %200

200:                                              ; preds = %195
  %201 = ptrtoint i32* %198 to i64
  %202 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 1
  %203 = bitcast i32** %202 to i64*
  store i64 %201, i64* %203, align 8
  %204 = bitcast i32* %198 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %204) #7
  %205 = bitcast %"class.std::__1::vector"* %196 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %205, i8 0, i64 24, i1 false) #7
  br label %206

206:                                              ; preds = %195, %200
  %207 = bitcast %"class.std::__1::vector"* %5 to <2 x i64>*
  %208 = load <2 x i64>, <2 x i64>* %207, align 16
  %209 = bitcast %"class.std::__1::vector"* %196 to <2 x i64>*
  store <2 x i64> %208, <2 x i64>* %209, align 8
  %210 = bitcast i32** %165 to i64*
  %211 = load i64, i64* %210, align 16
  %212 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %213 = bitcast i32** %212 to i64*
  store i64 %211, i64* %213, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %162, i8 0, i64 24, i1 false) #7
  %214 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1
  %215 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  store i8* %75, i8** %215, align 8
  %216 = getelementptr inbounds %"class.fxcrt::MaybeOwned", %"class.fxcrt::MaybeOwned"* %214, i64 0, i32 0, i32 0, i32 0, i32 0
  %217 = load i8*, i8** %216, align 8
  %218 = bitcast %"class.fxcrt::MaybeOwned"* %214 to i64*
  store i64 %76, i64* %218, align 8
  %219 = icmp eq i8* %217, null
  br i1 %219, label %221, label %220

220:                                              ; preds = %206
  call void @_Z7FX_FreePv(i8* nonnull %217) #7
  br label %221

221:                                              ; preds = %206, %220
  store i16 %1, i16* %7, align 8
  %222 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  store i32 %69, i32* %222, align 4
  br label %223

223:                                              ; preds = %161, %221
  %224 = phi i64 [ 0, %221 ], [ %76, %161 ]
  %225 = phi i1 [ true, %221 ], [ false, %161 ]
  %226 = load i32*, i32** %163, align 16
  %227 = icmp eq i32* %226, null
  br i1 %227, label %232, label %228

228:                                              ; preds = %223
  %229 = ptrtoint i32* %226 to i64
  %230 = bitcast i32** %164 to i64*
  store i64 %229, i64* %230, align 8
  %231 = bitcast i32* %226 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %231) #7
  br label %232

232:                                              ; preds = %223, %228
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %162) #7
  %233 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %153, align 8
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %153, align 8
  %234 = icmp eq %class.CFX_DIBBase* %233, null
  br i1 %234, label %246, label %235

235:                                              ; preds = %232
  %236 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %233, i64 0, i32 0, i32 1
  %237 = load i64, i64* %236, align 8
  %238 = add nsw i64 %237, -1
  store i64 %238, i64* %236, align 8
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %246

240:                                              ; preds = %235
  %241 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %233, i64 0, i32 0
  %242 = bitcast %class.CFX_DIBBase* %233 to void (%"class.fxcrt::Retainable"*)***
  %243 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %242, align 8
  %244 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %243, i64 1
  %245 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %244, align 8
  call void %245(%"class.fxcrt::Retainable"* nonnull %241) #7
  br label %246

246:                                              ; preds = %240, %235, %232
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %152) #7
  %247 = inttoptr i64 %151 to %class.CFX_DIBitmap*
  %248 = icmp eq i64 %151, 0
  br i1 %248, label %260, label %249

249:                                              ; preds = %246
  %250 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %247, i64 0, i32 0, i32 0, i32 1
  %251 = load i64, i64* %250, align 8
  %252 = add nsw i64 %251, -1
  store i64 %252, i64* %250, align 8
  %253 = icmp eq i64 %252, 0
  br i1 %253, label %254, label %260

254:                                              ; preds = %249
  %255 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %247, i64 0, i32 0, i32 0
  %256 = inttoptr i64 %151 to void (%"class.fxcrt::Retainable"*)***
  %257 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %256, align 8
  %258 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %257, i64 1
  %259 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %258, align 8
  call void %259(%"class.fxcrt::Retainable"* nonnull %255) #7
  br label %260

260:                                              ; preds = %130, %60, %140, %254, %249, %246
  %261 = phi i64 [ %76, %60 ], [ %224, %246 ], [ %224, %249 ], [ %224, %254 ], [ %76, %140 ], [ %76, %130 ]
  %262 = phi i1 [ false, %60 ], [ %225, %246 ], [ %225, %249 ], [ %225, %254 ], [ false, %140 ], [ false, %130 ]
  %263 = icmp eq i64 %261, 0
  br i1 %263, label %266, label %264

264:                                              ; preds = %260
  %265 = inttoptr i64 %261 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %265) #7
  br label %266

266:                                              ; preds = %48, %25, %264, %260, %2, %20
  %267 = phi i1 [ true, %20 ], [ true, %2 ], [ %262, %260 ], [ %262, %264 ], [ true, %25 ], [ true, %48 ]
  ret i1 %267
}

declare void @_ZN11CFX_DIBBase9StretchToEiiRK21FXDIB_ResampleOptionsPK7FX_RECT(%"class.fxcrt::RetainPtr"* sret, %class.CFX_DIBBase*, i32, i32, %struct.FXDIB_ResampleOptions* dereferenceable(4), %struct.FX_RECT*) local_unnamed_addr #1

declare void @_ZN21FXDIB_ResampleOptionsC1Ev(%struct.FXDIB_ResampleOptions*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap18SetAlphaFromBitmapERKN5fxcrt9RetainPtrI11CFX_DIBBaseEE(%class.CFX_DIBitmap*, %"class.fxcrt::RetainPtr.8"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = tail call zeroext i1 @_ZN12CFX_DIBitmap20SetChannelFromBitmapENS_7ChannelERKN5fxcrt9RetainPtrI11CFX_DIBBaseEE(%class.CFX_DIBitmap* %0, i8 zeroext 1, %"class.fxcrt::RetainPtr.8"* dereferenceable(8) %1)
  ret i1 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap16SetRedFromBitmapERKN5fxcrt9RetainPtrI11CFX_DIBBaseEE(%class.CFX_DIBitmap*, %"class.fxcrt::RetainPtr.8"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = tail call zeroext i1 @_ZN12CFX_DIBitmap20SetChannelFromBitmapENS_7ChannelERKN5fxcrt9RetainPtrI11CFX_DIBBaseEE(%class.CFX_DIBitmap* %0, i8 zeroext 0, %"class.fxcrt::RetainPtr.8"* dereferenceable(8) %1)
  ret i1 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap21SetUniformOpaqueAlphaEv(%class.CFX_DIBitmap*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %83, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = and i16 %7, 256
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = tail call zeroext i1 @_ZN12CFX_DIBitmap13ConvertFormatE12FXDIB_Format(%class.CFX_DIBitmap* %0, i16 zeroext 264)
  br i1 %11, label %14, label %83

12:                                               ; preds = %5
  %13 = tail call zeroext i1 @_ZN12CFX_DIBitmap13ConvertFormatE12FXDIB_Format(%class.CFX_DIBitmap* %0, i16 zeroext 544)
  br i1 %13, label %14, label %83

14:                                               ; preds = %12, %10
  %15 = load i16, i16* %6, align 8
  %16 = and i16 %15, 255
  %17 = zext i16 %16 to i32
  %18 = lshr i32 %17, 3
  %19 = and i32 %17, 248
  %20 = icmp eq i32 %19, 8
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = load i8*, i8** %2, align 8
  %23 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %26 = load i32, i32* %25, align 4
  %27 = mul i32 %26, %24
  %28 = zext i32 %27 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 -1, i64 %28, i1 false)
  br label %83

29:                                               ; preds = %14
  %30 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %31 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %30, align 8
  %32 = icmp eq %class.CFX_DIBitmap* %31, null
  br i1 %32, label %46, label %33

33:                                               ; preds = %29
  %34 = bitcast %class.CFX_DIBitmap* %31 to i8* (%class.CFX_DIBitmap*)***
  %35 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %34, align 8
  %36 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %35, i64 2
  %37 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %36, align 8
  %38 = tail call i8* %37(%class.CFX_DIBitmap* nonnull %31) #7
  %39 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %30, align 8
  %40 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %39, i64 0, i32 0, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %39, i64 0, i32 0, i32 4
  %43 = load i32, i32* %42, align 4
  %44 = mul i32 %43, %41
  %45 = zext i32 %44 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 -1, i64 %45, i1 false)
  br label %83

46:                                               ; preds = %29
  %47 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %48 = load i32, i32* %47, align 8
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %50, label %83

50:                                               ; preds = %46
  %51 = icmp eq i16 %15, 544
  %52 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %53 = select i1 %51, i64 3, i64 0
  %54 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %55 = zext i32 %18 to i64
  %56 = load i32, i32* %54, align 4
  br label %57

57:                                               ; preds = %50, %71
  %58 = phi i32 [ %48, %50 ], [ %72, %71 ]
  %59 = phi i32 [ %56, %50 ], [ %73, %71 ]
  %60 = phi i32 [ 0, %50 ], [ %74, %71 ]
  %61 = icmp sgt i32 %59, 0
  br i1 %61, label %62, label %71

62:                                               ; preds = %57
  %63 = load i8*, i8** %2, align 8
  %64 = getelementptr inbounds i8, i8* %63, i64 %53
  %65 = load i32, i32* %52, align 4
  %66 = mul i32 %65, %60
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %64, i64 %67
  br label %76

69:                                               ; preds = %76
  %70 = load i32, i32* %47, align 8
  br label %71

71:                                               ; preds = %69, %57
  %72 = phi i32 [ %70, %69 ], [ %58, %57 ]
  %73 = phi i32 [ %81, %69 ], [ %59, %57 ]
  %74 = add nuw nsw i32 %60, 1
  %75 = icmp slt i32 %74, %72
  br i1 %75, label %57, label %83

76:                                               ; preds = %62, %76
  %77 = phi i32 [ %80, %76 ], [ 0, %62 ]
  %78 = phi i8* [ %79, %76 ], [ %68, %62 ]
  store i8 -1, i8* %78, align 1
  %79 = getelementptr inbounds i8, i8* %78, i64 %55
  %80 = add nuw nsw i32 %77, 1
  %81 = load i32, i32* %54, align 4
  %82 = icmp slt i32 %80, %81
  br i1 %82, label %76, label %69

83:                                               ; preds = %71, %46, %1, %21, %33, %12, %10
  %84 = phi i1 [ false, %1 ], [ false, %10 ], [ false, %12 ], [ true, %33 ], [ true, %21 ], [ true, %46 ], [ true, %71 ]
  ret i1 %84
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap13MultiplyAlphaERKN5fxcrt9RetainPtrI11CFX_DIBBaseEE(%class.CFX_DIBitmap*, %"class.fxcrt::RetainPtr.8"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::RetainPtr", align 8
  %4 = alloca %struct.FXDIB_ResampleOptions, align 1
  %5 = alloca %"class.fxcrt::RetainPtr.8", align 8
  %6 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %264, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.fxcrt::RetainPtr.8", %"class.fxcrt::RetainPtr.8"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %10, align 8
  %12 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %11, i64 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = and i16 %13, 256
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %264, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = and i16 %18, 768
  %20 = icmp eq i16 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  %22 = tail call zeroext i1 @_ZN12CFX_DIBitmap20SetChannelFromBitmapENS_7ChannelERKN5fxcrt9RetainPtrI11CFX_DIBBaseEE(%class.CFX_DIBitmap* %0, i8 zeroext 1, %"class.fxcrt::RetainPtr.8"* dereferenceable(8) %1) #7
  br label %264

23:                                               ; preds = %16
  %24 = ptrtoint %class.CFX_DIBBase* %11 to i64
  %25 = icmp eq %class.CFX_DIBBase* %11, null
  br i1 %25, label %31, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %11, i64 0, i32 0, i32 1
  %28 = load i64, i64* %27, align 8, !noalias !8
  %29 = add nsw i64 %28, 1
  store i64 %29, i64* %27, align 8, !noalias !8
  %30 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %10, align 8
  br label %31

31:                                               ; preds = %23, %26
  %32 = phi %class.CFX_DIBBase* [ null, %23 ], [ %30, %26 ]
  %33 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %32, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %34, %36
  br i1 %37, label %41, label %38

38:                                               ; preds = %31
  %39 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %40 = load i32, i32* %39, align 8
  br label %47

41:                                               ; preds = %31
  %42 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %32, i64 0, i32 3
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %82, label %47

47:                                               ; preds = %38, %41
  %48 = phi i32 [ %40, %38 ], [ %45, %41 ]
  %49 = bitcast %"class.fxcrt::RetainPtr"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #7
  %50 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %50) #7
  call void @_ZN21FXDIB_ResampleOptionsC1Ev(%struct.FXDIB_ResampleOptions* nonnull %4) #7
  call void @_ZN11CFX_DIBBase9StretchToEiiRK21FXDIB_ResampleOptionsPK7FX_RECT(%"class.fxcrt::RetainPtr"* nonnull sret %3, %class.CFX_DIBBase* %32, i32 %36, i32 %48, %struct.FXDIB_ResampleOptions* nonnull dereferenceable(4) %4, %struct.FX_RECT* null) #7
  %51 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %52 = bitcast %"class.fxcrt::RetainPtr"* %3 to i64*
  %53 = load i64, i64* %52, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %51, align 8
  br i1 %25, label %54, label %55

54:                                               ; preds = %47
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %51, align 8
  br label %80

55:                                               ; preds = %47
  %56 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %11, i64 0, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = add nsw i64 %57, -1
  store i64 %58, i64* %56, align 8
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %61, label %60

60:                                               ; preds = %55
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %51, align 8
  br label %80

61:                                               ; preds = %55
  %62 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %11, i64 0, i32 0
  %63 = bitcast %class.CFX_DIBBase* %11 to void (%"class.fxcrt::Retainable"*)***
  %64 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %63, align 8
  %65 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %64, i64 1
  %66 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %65, align 8
  call void %66(%"class.fxcrt::Retainable"* nonnull %62) #7
  %67 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %51, align 8
  %68 = bitcast %class.CFX_DIBitmap* %67 to void (%"class.fxcrt::Retainable"*)***
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %51, align 8
  %69 = icmp eq %class.CFX_DIBitmap* %67, null
  br i1 %69, label %80, label %70

70:                                               ; preds = %61
  %71 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %67, i64 0, i32 0, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = add nsw i64 %72, -1
  store i64 %73, i64* %71, align 8
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %80

75:                                               ; preds = %70
  %76 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %67, i64 0, i32 0, i32 0
  %77 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %68, align 8
  %78 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %77, i64 1
  %79 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %78, align 8
  call void %79(%"class.fxcrt::Retainable"* nonnull %76) #7
  br label %80

80:                                               ; preds = %60, %54, %61, %70, %75
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #7
  %81 = icmp eq i64 %53, 0
  br i1 %81, label %264, label %82

82:                                               ; preds = %80, %41
  %83 = phi i64 [ %24, %41 ], [ %53, %80 ]
  %84 = load i16, i16* %17, align 8
  %85 = and i16 %84, 256
  %86 = icmp eq i16 %85, 0
  br i1 %86, label %164, label %87

87:                                               ; preds = %82
  %88 = call zeroext i1 @_ZN12CFX_DIBitmap13ConvertFormatE12FXDIB_Format(%class.CFX_DIBitmap* %0, i16 zeroext 264)
  br i1 %88, label %89, label %249

89:                                               ; preds = %87
  %90 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %91 = load i32, i32* %90, align 8
  %92 = icmp sgt i32 %91, 0
  br i1 %92, label %93, label %249

93:                                               ; preds = %89
  %94 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %95 = inttoptr i64 %83 to %class.CFX_DIBitmap*
  %96 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %95, i64 0, i32 1, i32 1, i32 0
  %97 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %95, i64 0, i32 0, i32 4
  %98 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %95, i64 0, i32 0, i32 1
  %99 = load i32, i32* %35, align 4
  br label %100

100:                                              ; preds = %93, %158
  %101 = phi i32 [ %99, %93 ], [ %159, %158 ]
  %102 = phi i32 [ %99, %93 ], [ %160, %158 ]
  %103 = phi i32 [ 0, %93 ], [ %161, %158 ]
  %104 = load i8*, i8** %6, align 8
  %105 = load i32, i32* %94, align 4
  %106 = mul i32 %105, %103
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %104, i64 %107
  %109 = load i8*, i8** %96, align 8
  %110 = load i32, i32* %97, align 4
  %111 = mul i32 %110, %103
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %109, i64 %112
  %114 = load i16, i16* %98, align 8
  %115 = and i16 %114, 255
  %116 = icmp eq i16 %115, 1
  %117 = icmp sgt i32 %102, 0
  br i1 %116, label %119, label %118

118:                                              ; preds = %100
  br i1 %117, label %142, label %158

119:                                              ; preds = %100
  br i1 %117, label %120, label %158

120:                                              ; preds = %119, %137
  %121 = phi i32 [ %138, %137 ], [ %101, %119 ]
  %122 = phi i64 [ %139, %137 ], [ 0, %119 ]
  %123 = trunc i64 %122 to i32
  %124 = and i32 %123, 7
  %125 = xor i32 %124, 7
  %126 = shl i32 1, %125
  %127 = lshr i64 %122, 3
  %128 = and i64 %127, 536870911
  %129 = getelementptr inbounds i8, i8* %113, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = and i32 %126, %131
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %137

134:                                              ; preds = %120
  %135 = getelementptr inbounds i8, i8* %108, i64 %122
  store i8 0, i8* %135, align 1
  %136 = load i32, i32* %35, align 4
  br label %137

137:                                              ; preds = %120, %134
  %138 = phi i32 [ %121, %120 ], [ %136, %134 ]
  %139 = add nuw nsw i64 %122, 1
  %140 = sext i32 %138 to i64
  %141 = icmp slt i64 %139, %140
  br i1 %141, label %120, label %158

142:                                              ; preds = %118, %142
  %143 = phi i64 [ %154, %142 ], [ 0, %118 ]
  %144 = phi i8* [ %153, %142 ], [ %108, %118 ]
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i16
  %147 = getelementptr inbounds i8, i8* %113, i64 %143
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i16
  %150 = mul nuw i16 %149, %146
  %151 = udiv i16 %150, 255
  %152 = trunc i16 %151 to i8
  store i8 %152, i8* %144, align 1
  %153 = getelementptr inbounds i8, i8* %144, i64 1
  %154 = add nuw nsw i64 %143, 1
  %155 = load i32, i32* %35, align 4
  %156 = sext i32 %155 to i64
  %157 = icmp slt i64 %154, %156
  br i1 %157, label %142, label %158

158:                                              ; preds = %142, %137, %118, %119
  %159 = phi i32 [ %101, %118 ], [ %101, %119 ], [ %138, %137 ], [ %155, %142 ]
  %160 = phi i32 [ %102, %118 ], [ %102, %119 ], [ %138, %137 ], [ %155, %142 ]
  %161 = add nuw nsw i32 %103, 1
  %162 = load i32, i32* %90, align 8
  %163 = icmp slt i32 %161, %162
  br i1 %163, label %100, label %249

164:                                              ; preds = %82
  %165 = icmp eq i16 %84, 544
  br i1 %165, label %166, label %221

166:                                              ; preds = %164
  %167 = inttoptr i64 %83 to %class.CFX_DIBitmap*
  %168 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %167, i64 0, i32 0, i32 1
  %169 = load i16, i16* %168, align 8
  %170 = and i16 %169, 255
  %171 = icmp eq i16 %170, 1
  br i1 %171, label %249, label %172

172:                                              ; preds = %166
  %173 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %174 = load i32, i32* %173, align 8
  %175 = icmp sgt i32 %174, 0
  br i1 %175, label %176, label %249

176:                                              ; preds = %172
  %177 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %178 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %167, i64 0, i32 1, i32 1, i32 0
  %179 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %167, i64 0, i32 0, i32 4
  %180 = load i32, i32* %35, align 4
  br label %181

181:                                              ; preds = %176, %200
  %182 = phi i32 [ %174, %176 ], [ %201, %200 ]
  %183 = phi i32 [ %180, %176 ], [ %202, %200 ]
  %184 = phi i32 [ 0, %176 ], [ %203, %200 ]
  %185 = load i8*, i8** %178, align 8
  %186 = load i32, i32* %179, align 4
  %187 = mul i32 %186, %184
  %188 = zext i32 %187 to i64
  %189 = getelementptr inbounds i8, i8* %185, i64 %188
  %190 = icmp sgt i32 %183, 0
  br i1 %190, label %191, label %200

191:                                              ; preds = %181
  %192 = load i8*, i8** %6, align 8
  %193 = getelementptr inbounds i8, i8* %192, i64 3
  %194 = load i32, i32* %177, align 4
  %195 = mul i32 %194, %184
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds i8, i8* %193, i64 %196
  br label %205

198:                                              ; preds = %205
  %199 = load i32, i32* %173, align 8
  br label %200

200:                                              ; preds = %198, %181
  %201 = phi i32 [ %199, %198 ], [ %182, %181 ]
  %202 = phi i32 [ %218, %198 ], [ %183, %181 ]
  %203 = add nuw nsw i32 %184, 1
  %204 = icmp slt i32 %203, %201
  br i1 %204, label %181, label %249

205:                                              ; preds = %191, %205
  %206 = phi i64 [ 0, %191 ], [ %217, %205 ]
  %207 = phi i8* [ %197, %191 ], [ %216, %205 ]
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i16
  %210 = getelementptr inbounds i8, i8* %189, i64 %206
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i16
  %213 = mul nuw i16 %212, %209
  %214 = udiv i16 %213, 255
  %215 = trunc i16 %214 to i8
  store i8 %215, i8* %207, align 1
  %216 = getelementptr inbounds i8, i8* %207, i64 4
  %217 = add nuw nsw i64 %206, 1
  %218 = load i32, i32* %35, align 4
  %219 = sext i32 %218 to i64
  %220 = icmp slt i64 %217, %219
  br i1 %220, label %205, label %198

221:                                              ; preds = %164
  %222 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %223 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %222, align 8
  %224 = bitcast %"class.fxcrt::RetainPtr.8"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #7
  %225 = bitcast %"class.fxcrt::RetainPtr.8"* %5 to i64*
  store i64 %83, i64* %225, align 8
  %226 = icmp eq i64 %83, 0
  %227 = inttoptr i64 %83 to %class.CFX_DIBBase*
  br i1 %226, label %233, label %228

228:                                              ; preds = %221
  %229 = inttoptr i64 %83 to %class.CFX_DIBitmap*
  %230 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %229, i64 0, i32 0, i32 0, i32 1
  %231 = load i64, i64* %230, align 8
  %232 = add nsw i64 %231, 1
  store i64 %232, i64* %230, align 8
  br label %233

233:                                              ; preds = %221, %228
  %234 = call zeroext i1 @_ZN12CFX_DIBitmap13MultiplyAlphaERKN5fxcrt9RetainPtrI11CFX_DIBBaseEE(%class.CFX_DIBitmap* %223, %"class.fxcrt::RetainPtr.8"* nonnull dereferenceable(8) %5)
  %235 = getelementptr inbounds %"class.fxcrt::RetainPtr.8", %"class.fxcrt::RetainPtr.8"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %235, align 8
  %236 = icmp eq i64 %83, 0
  br i1 %236, label %248, label %237

237:                                              ; preds = %233
  %238 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %227, i64 0, i32 0, i32 1
  %239 = load i64, i64* %238, align 8
  %240 = add nsw i64 %239, -1
  store i64 %240, i64* %238, align 8
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %242, label %248

242:                                              ; preds = %237
  %243 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %227, i64 0, i32 0
  %244 = inttoptr i64 %83 to void (%"class.fxcrt::Retainable"*)***
  %245 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %244, align 8
  %246 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %245, i64 1
  %247 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %246, align 8
  call void %247(%"class.fxcrt::Retainable"* nonnull %243) #7
  br label %248

248:                                              ; preds = %233, %237, %242
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #7
  br label %249

249:                                              ; preds = %158, %200, %89, %172, %248, %166, %87
  %250 = phi i1 [ false, %87 ], [ false, %166 ], [ true, %248 ], [ true, %172 ], [ true, %89 ], [ true, %200 ], [ true, %158 ]
  %251 = inttoptr i64 %83 to %class.CFX_DIBitmap*
  %252 = icmp eq i64 %83, 0
  br i1 %252, label %264, label %253

253:                                              ; preds = %249
  %254 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %251, i64 0, i32 0, i32 0, i32 1
  %255 = load i64, i64* %254, align 8
  %256 = add nsw i64 %255, -1
  store i64 %256, i64* %254, align 8
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %258, label %264

258:                                              ; preds = %253
  %259 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %251, i64 0, i32 0, i32 0
  %260 = inttoptr i64 %83 to void (%"class.fxcrt::Retainable"*)***
  %261 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %260, align 8
  %262 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %261, i64 1
  %263 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %262, align 8
  call void %263(%"class.fxcrt::Retainable"* nonnull %259) #7
  br label %264

264:                                              ; preds = %80, %9, %2, %258, %253, %249, %21
  %265 = phi i1 [ %22, %21 ], [ false, %2 ], [ false, %9 ], [ %250, %249 ], [ %250, %253 ], [ %250, %258 ], [ false, %80 ]
  ret i1 %265
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap13MultiplyAlphaEi(%class.CFX_DIBitmap*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %104, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  switch i16 %8, label %93 [
    i16 257, label %25
    i16 264, label %17
    i16 544, label %9
  ]

9:                                                ; preds = %6
  %10 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %104

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %15 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %16 = load i32, i32* %15, align 4
  br label %60

17:                                               ; preds = %6
  %18 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %104

21:                                               ; preds = %17
  %22 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %23 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  br label %29

25:                                               ; preds = %6
  %26 = tail call zeroext i1 @_ZN12CFX_DIBitmap13ConvertFormatE12FXDIB_Format(%class.CFX_DIBitmap* %0, i16 zeroext 264)
  br i1 %26, label %27, label %104

27:                                               ; preds = %25
  %28 = tail call zeroext i1 @_ZN12CFX_DIBitmap13MultiplyAlphaEi(%class.CFX_DIBitmap* %0, i32 %1)
  ret i1 true

29:                                               ; preds = %46, %21
  %30 = phi i32 [ %19, %21 ], [ %42, %46 ]
  %31 = phi i32 [ %24, %21 ], [ %43, %46 ]
  %32 = phi i8* [ %4, %21 ], [ %47, %46 ]
  %33 = phi i32 [ 0, %21 ], [ %44, %46 ]
  %34 = load i32, i32* %22, align 4
  %35 = mul i32 %34, %33
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %32, i64 %36
  %38 = icmp sgt i32 %31, 0
  br i1 %38, label %48, label %41

39:                                               ; preds = %48
  %40 = load i32, i32* %18, align 8
  br label %41

41:                                               ; preds = %39, %29
  %42 = phi i32 [ %40, %39 ], [ %30, %29 ]
  %43 = phi i32 [ %57, %39 ], [ %31, %29 ]
  %44 = add nuw nsw i32 %33, 1
  %45 = icmp slt i32 %44, %42
  br i1 %45, label %46, label %104

46:                                               ; preds = %41
  %47 = load i8*, i8** %3, align 8
  br label %29

48:                                               ; preds = %29, %48
  %49 = phi i64 [ %56, %48 ], [ 0, %29 ]
  %50 = getelementptr inbounds i8, i8* %37, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = mul nsw i32 %52, %1
  %54 = sdiv i32 %53, 255
  %55 = trunc i32 %54 to i8
  store i8 %55, i8* %50, align 1
  %56 = add nuw nsw i64 %49, 1
  %57 = load i32, i32* %23, align 4
  %58 = sext i32 %57 to i64
  %59 = icmp slt i64 %56, %58
  br i1 %59, label %48, label %39

60:                                               ; preds = %79, %13
  %61 = phi i32 [ %11, %13 ], [ %75, %79 ]
  %62 = phi i32 [ %16, %13 ], [ %76, %79 ]
  %63 = phi i8* [ %4, %13 ], [ %80, %79 ]
  %64 = phi i32 [ 0, %13 ], [ %77, %79 ]
  %65 = icmp sgt i32 %62, 0
  br i1 %65, label %66, label %74

66:                                               ; preds = %60
  %67 = getelementptr inbounds i8, i8* %63, i64 3
  %68 = load i32, i32* %14, align 4
  %69 = mul i32 %68, %64
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %67, i64 %70
  br label %81

72:                                               ; preds = %81
  %73 = load i32, i32* %10, align 8
  br label %74

74:                                               ; preds = %72, %60
  %75 = phi i32 [ %73, %72 ], [ %61, %60 ]
  %76 = phi i32 [ %91, %72 ], [ %62, %60 ]
  %77 = add nuw nsw i32 %64, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %79, label %104

79:                                               ; preds = %74
  %80 = load i8*, i8** %3, align 8
  br label %60

81:                                               ; preds = %66, %81
  %82 = phi i32 [ %90, %81 ], [ 0, %66 ]
  %83 = phi i8* [ %89, %81 ], [ %71, %66 ]
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = mul nsw i32 %85, %1
  %87 = sdiv i32 %86, 255
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %83, align 1
  %89 = getelementptr inbounds i8, i8* %83, i64 4
  %90 = add nuw nsw i32 %82, 1
  %91 = load i32, i32* %15, align 4
  %92 = icmp slt i32 %90, %91
  br i1 %92, label %81, label %72

93:                                               ; preds = %6
  %94 = and i16 %8, 512
  %95 = icmp eq i16 %94, 0
  br i1 %95, label %100, label %96

96:                                               ; preds = %93
  %97 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %98 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %97, align 8
  %99 = tail call zeroext i1 @_ZN12CFX_DIBitmap13MultiplyAlphaEi(%class.CFX_DIBitmap* %98, i32 %1)
  ret i1 true

100:                                              ; preds = %93
  %101 = tail call zeroext i1 @_ZN12CFX_DIBitmap13ConvertFormatE12FXDIB_Format(%class.CFX_DIBitmap* %0, i16 zeroext 544)
  br i1 %101, label %102, label %104

102:                                              ; preds = %100
  %103 = tail call zeroext i1 @_ZN12CFX_DIBitmap13MultiplyAlphaEi(%class.CFX_DIBitmap* %0, i32 %1)
  ret i1 true

104:                                              ; preds = %74, %41, %9, %17, %2, %100, %25
  %105 = phi i1 [ false, %2 ], [ false, %25 ], [ false, %100 ], [ true, %17 ], [ true, %9 ], [ true, %41 ], [ true, %74 ]
  ret i1 %105
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_DIBitmap20ConvertBGRColorScaleEjj(%class.CFX_DIBitmap*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = and i32 %1, 255
  %5 = lshr i32 %1, 8
  %6 = and i32 %5, 255
  %7 = lshr i32 %1, 16
  %8 = and i32 %7, 255
  %9 = trunc i32 %2 to i8
  %10 = and i32 %2, 255
  %11 = lshr i32 %2, 8
  %12 = trunc i32 %11 to i8
  %13 = and i32 %11, 255
  %14 = lshr i32 %2, 16
  %15 = trunc i32 %14 to i8
  %16 = and i32 %14, 255
  %17 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0
  %18 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = and i16 %19, 255
  %21 = icmp ult i16 %20, 9
  %22 = icmp eq i32 %1, 0
  %23 = icmp eq i32 %2, 16777215
  %24 = and i1 %22, %23
  br i1 %21, label %25, label %78

25:                                               ; preds = %3
  br i1 %24, label %26, label %32

26:                                               ; preds = %25
  %27 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 0
  %28 = load i32*, i32** %27, align 8
  %29 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 1
  %30 = load i32*, i32** %29, align 8
  %31 = icmp eq i32* %28, %30
  br i1 %31, label %201, label %32

32:                                               ; preds = %26, %25
  tail call void @_ZN11CFX_DIBBase12BuildPaletteEv(%class.CFX_DIBBase* %17) #7
  %33 = load i16, i16* %18, align 8
  %34 = and i16 %33, 255
  %35 = icmp eq i16 %34, 31
  br i1 %35, label %201, label %36

36:                                               ; preds = %32
  %37 = zext i16 %34 to i32
  %38 = shl i32 1, %37
  %39 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 0
  %40 = sub nsw i32 %4, %10
  %41 = sub nsw i32 %6, %13
  %42 = sub nsw i32 %8, %16
  %43 = sext i32 %38 to i64
  br label %44

44:                                               ; preds = %36, %44
  %45 = phi i64 [ 0, %36 ], [ %76, %44 ]
  %46 = load i32*, i32** %39, align 8
  %47 = getelementptr inbounds i32, i32* %46, i64 %45
  %48 = load i32, i32* %47, align 4
  %49 = and i32 %48, 255
  %50 = mul nuw nsw i32 %49, 11
  %51 = lshr i32 %48, 8
  %52 = and i32 %51, 255
  %53 = mul nuw nsw i32 %52, 59
  %54 = add nuw nsw i32 %53, %50
  %55 = lshr i32 %48, 16
  %56 = and i32 %55, 255
  %57 = mul nuw nsw i32 %56, 30
  %58 = add nuw nsw i32 %54, %57
  %59 = trunc i32 %58 to i16
  %60 = udiv i16 %59, 100
  %61 = zext i16 %60 to i32
  %62 = mul nsw i32 %40, %61
  %63 = sdiv i32 %62, 255
  %64 = add nsw i32 %63, %10
  %65 = mul nsw i32 %41, %61
  %66 = sdiv i32 %65, 255
  %67 = add nsw i32 %66, %13
  %68 = mul nsw i32 %42, %61
  %69 = sdiv i32 %68, 255
  %70 = add nsw i32 %69, %16
  %71 = shl nsw i32 %64, 16
  %72 = shl nsw i32 %67, 8
  %73 = or i32 %70, %72
  %74 = or i32 %73, %71
  %75 = or i32 %74, -16777216
  store i32 %75, i32* %47, align 4
  %76 = add nuw nsw i64 %45, 1
  %77 = icmp slt i64 %76, %43
  br i1 %77, label %44, label %201

78:                                               ; preds = %3
  %79 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %80 = load i32, i32* %79, align 8
  %81 = icmp sgt i32 %80, 0
  br i1 %24, label %91, label %82

82:                                               ; preds = %78
  br i1 %81, label %83, label %201

83:                                               ; preds = %82
  %84 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %85 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %86 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %87 = sub nsw i32 %8, %16
  %88 = sub nsw i32 %6, %13
  %89 = sub nsw i32 %4, %10
  %90 = load i32, i32* %86, align 4
  br label %143

91:                                               ; preds = %78
  br i1 %81, label %92, label %201

92:                                               ; preds = %91
  %93 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %94 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %95 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %96 = load i32, i32* %95, align 4
  br label %97

97:                                               ; preds = %119, %92
  %98 = phi i32 [ %80, %92 ], [ %115, %119 ]
  %99 = phi i32 [ %96, %92 ], [ %116, %119 ]
  %100 = phi i16 [ %19, %92 ], [ %120, %119 ]
  %101 = phi i32 [ 0, %92 ], [ %117, %119 ]
  %102 = lshr i16 %100, 3
  %103 = and i16 %102, 31
  %104 = zext i16 %103 to i64
  %105 = icmp sgt i32 %99, 0
  br i1 %105, label %106, label %114

106:                                              ; preds = %97
  %107 = load i8*, i8** %93, align 8
  %108 = load i32, i32* %94, align 4
  %109 = mul i32 %108, %101
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %107, i64 %110
  br label %121

112:                                              ; preds = %121
  %113 = load i32, i32* %79, align 8
  br label %114

114:                                              ; preds = %112, %97
  %115 = phi i32 [ %113, %112 ], [ %98, %97 ]
  %116 = phi i32 [ %141, %112 ], [ %99, %97 ]
  %117 = add nuw nsw i32 %101, 1
  %118 = icmp slt i32 %117, %115
  br i1 %118, label %119, label %201

119:                                              ; preds = %114
  %120 = load i16, i16* %18, align 8
  br label %97

121:                                              ; preds = %106, %121
  %122 = phi i32 [ %140, %121 ], [ 0, %106 ]
  %123 = phi i8* [ %139, %121 ], [ %111, %106 ]
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i16
  %126 = mul nuw nsw i16 %125, 11
  %127 = getelementptr inbounds i8, i8* %123, i64 1
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i16
  %130 = mul nuw nsw i16 %129, 59
  %131 = add nuw nsw i16 %130, %126
  %132 = getelementptr inbounds i8, i8* %123, i64 2
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i16
  %135 = mul nuw nsw i16 %134, 30
  %136 = add nuw nsw i16 %131, %135
  %137 = udiv i16 %136, 100
  %138 = trunc i16 %137 to i8
  store i8 %138, i8* %123, align 1
  store i8 %138, i8* %127, align 1
  store i8 %138, i8* %132, align 1
  %139 = getelementptr inbounds i8, i8* %123, i64 %104
  %140 = add nuw nsw i32 %122, 1
  %141 = load i32, i32* %95, align 4
  %142 = icmp slt i32 %140, %141
  br i1 %142, label %121, label %112

143:                                              ; preds = %165, %83
  %144 = phi i32 [ %80, %83 ], [ %161, %165 ]
  %145 = phi i32 [ %90, %83 ], [ %162, %165 ]
  %146 = phi i16 [ %19, %83 ], [ %166, %165 ]
  %147 = phi i32 [ 0, %83 ], [ %163, %165 ]
  %148 = lshr i16 %146, 3
  %149 = and i16 %148, 31
  %150 = zext i16 %149 to i64
  %151 = icmp sgt i32 %145, 0
  br i1 %151, label %152, label %160

152:                                              ; preds = %143
  %153 = load i8*, i8** %84, align 8
  %154 = load i32, i32* %85, align 4
  %155 = mul i32 %154, %147
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %153, i64 %156
  br label %167

158:                                              ; preds = %167
  %159 = load i32, i32* %79, align 8
  br label %160

160:                                              ; preds = %158, %143
  %161 = phi i32 [ %159, %158 ], [ %144, %143 ]
  %162 = phi i32 [ %199, %158 ], [ %145, %143 ]
  %163 = add nuw nsw i32 %147, 1
  %164 = icmp slt i32 %163, %161
  br i1 %164, label %165, label %201

165:                                              ; preds = %160
  %166 = load i16, i16* %18, align 8
  br label %143

167:                                              ; preds = %152, %167
  %168 = phi i32 [ %198, %167 ], [ 0, %152 ]
  %169 = phi i8* [ %197, %167 ], [ %157, %152 ]
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i16
  %172 = mul nuw nsw i16 %171, 11
  %173 = getelementptr inbounds i8, i8* %169, i64 1
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i16
  %176 = mul nuw nsw i16 %175, 59
  %177 = add nuw nsw i16 %176, %172
  %178 = getelementptr inbounds i8, i8* %169, i64 2
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i16
  %181 = mul nuw nsw i16 %180, 30
  %182 = add nuw nsw i16 %177, %181
  %183 = udiv i16 %182, 100
  %184 = zext i16 %183 to i32
  %185 = mul nsw i32 %87, %184
  %186 = sdiv i32 %185, 255
  %187 = trunc i32 %186 to i8
  %188 = add i8 %187, %15
  store i8 %188, i8* %169, align 1
  %189 = mul nsw i32 %88, %184
  %190 = sdiv i32 %189, 255
  %191 = trunc i32 %190 to i8
  %192 = add i8 %191, %12
  store i8 %192, i8* %173, align 1
  %193 = mul nsw i32 %89, %184
  %194 = sdiv i32 %193, 255
  %195 = trunc i32 %194 to i8
  %196 = add i8 %195, %9
  store i8 %196, i8* %178, align 1
  %197 = getelementptr inbounds i8, i8* %169, i64 %150
  %198 = add nuw nsw i32 %168, 1
  %199 = load i32, i32* %86, align 4
  %200 = icmp slt i32 %198, %199
  br i1 %200, label %167, label %158

201:                                              ; preds = %160, %114, %44, %32, %82, %91, %26
  ret void
}

declare void @_ZN11CFX_DIBBase12BuildPaletteEv(%class.CFX_DIBBase*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap17ConvertColorScaleEjj(%class.CFX_DIBitmap*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = and i16 %9, 256
  %11 = icmp eq i16 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %7
  tail call void @_ZN12CFX_DIBitmap20ConvertBGRColorScaleEjj(%class.CFX_DIBitmap* %0, i32 %1, i32 %2)
  br label %13

13:                                               ; preds = %7, %3, %12
  %14 = phi i1 [ true, %12 ], [ false, %7 ], [ false, %3 ]
  ret i1 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap15CompositeBitmapEiiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEii9BlendModePK11CFX_ClipRgnb(%class.CFX_DIBitmap*, i32, i32, i32, i32, %"class.fxcrt::RetainPtr.8"* nocapture readonly dereferenceable(8), i32, i32, i32, %class.CFX_ClipRgn*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca %class.CFX_ScanlineCompositor, align 8
  %19 = alloca %"class.pdfium::span", align 8
  %20 = alloca %"class.fxcrt::RetainPtr", align 8
  store i32 %1, i32* %12, align 4
  store i32 %2, i32* %13, align 4
  store i32 %3, i32* %14, align 4
  store i32 %4, i32* %15, align 4
  store i32 %6, i32* %16, align 4
  store i32 %7, i32* %17, align 4
  %21 = getelementptr inbounds %"class.fxcrt::RetainPtr.8", %"class.fxcrt::RetainPtr.8"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %21, align 8
  %23 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %22, i64 0, i32 1
  %24 = load i16, i16* %23, align 8
  %25 = and i16 %24, 256
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %27, label %222

27:                                               ; preds = %11
  %28 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %222, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %33 = load i16, i16* %32, align 8
  %34 = and i16 %33, 248
  %35 = icmp eq i16 %34, 0
  br i1 %35, label %222, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0
  %38 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %22, i64 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %22, i64 0, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = call zeroext i1 @_ZNK11CFX_DIBBase14GetOverlapRectERiS0_S0_S0_iiS0_S0_PK11CFX_ClipRgn(%class.CFX_DIBBase* %37, i32* nonnull dereferenceable(4) %12, i32* nonnull dereferenceable(4) %13, i32* nonnull dereferenceable(4) %14, i32* nonnull dereferenceable(4) %15, i32 %39, i32 %41, i32* nonnull dereferenceable(4) %16, i32* nonnull dereferenceable(4) %17, %class.CFX_ClipRgn* %9) #7
  br i1 %42, label %43, label %222

43:                                               ; preds = %36
  %44 = icmp eq %class.CFX_ClipRgn* %9, null
  br i1 %44, label %63, label %45

45:                                               ; preds = %43
  %46 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %9, i64 0, i32 0
  %47 = load i8, i8* %46, align 8, !range !11
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %63, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %51 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %50, align 8, !noalias !12
  %52 = icmp eq %class.CFX_DIBitmap* %51, null
  br i1 %52, label %57, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %51, i64 0, i32 0, i32 0, i32 1
  %55 = load i64, i64* %54, align 8, !noalias !12
  %56 = add nsw i64 %55, 1
  store i64 %56, i64* %54, align 8, !noalias !12
  br label %57

57:                                               ; preds = %49, %53
  %58 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %9, i64 0, i32 1, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %9, i64 0, i32 1, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = sub i32 0, %61
  br label %63

63:                                               ; preds = %45, %43, %57
  %64 = phi i32 [ 0, %43 ], [ %59, %57 ], [ 0, %45 ]
  %65 = phi i32 [ 0, %43 ], [ %62, %57 ], [ 0, %45 ]
  %66 = phi %class.CFX_DIBitmap* [ null, %43 ], [ %51, %57 ], [ null, %45 ]
  %67 = bitcast %class.CFX_ScanlineCompositor* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %67) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %67, i8 -86, i64 56, i1 false)
  call void @_ZN22CFX_ScanlineCompositorC1Ev(%class.CFX_ScanlineCompositor* nonnull %18) #7
  %68 = load i16, i16* %32, align 8
  %69 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %21, align 8
  %70 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %69, i64 0, i32 1
  %71 = load i16, i16* %70, align 8
  %72 = load i32, i32* %14, align 4
  %73 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %69, i64 0, i32 6
  %74 = bitcast %"class.std::__1::vector"* %73 to i64*
  %75 = load i64, i64* %74, align 8, !noalias !15
  %76 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %69, i64 0, i32 6, i32 0, i32 1
  %77 = bitcast i32** %76 to i64*
  %78 = load i64, i64* %77, align 8, !noalias !15
  %79 = sub i64 %78, %75
  %80 = ashr exact i64 %79, 2
  %81 = bitcast %"class.pdfium::span"* %19 to i64*
  store i64 %75, i64* %81, align 8, !alias.scope !15
  %82 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %19, i64 0, i32 1
  store i64 %80, i64* %82, align 8, !alias.scope !15
  %83 = icmp ne %class.CFX_DIBitmap* %66, null
  %84 = call zeroext i1 @_ZN22CFX_ScanlineCompositor4InitE12FXDIB_FormatS0_iN6pdfium4spanIKjEEj9BlendModebb(%class.CFX_ScanlineCompositor* nonnull %18, i16 zeroext %68, i16 zeroext %71, i32 %72, %"class.pdfium::span"* nonnull %19, i32 0, i32 %8, i1 zeroext %83, i1 zeroext %10) #7
  br i1 %84, label %85, label %208

85:                                               ; preds = %63
  %86 = load i16, i16* %32, align 8
  %87 = lshr i16 %86, 3
  %88 = and i16 %87, 31
  %89 = zext i16 %88 to i32
  %90 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %21, align 8
  %91 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %90, i64 0, i32 1
  %92 = load i16, i16* %91, align 8
  %93 = and i16 %92, 255
  %94 = lshr i16 %93, 3
  %95 = zext i16 %94 to i32
  %96 = icmp ugt i16 %93, 15
  br i1 %96, label %103, label %97

97:                                               ; preds = %85
  %98 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %90, i64 0, i32 6, i32 0, i32 0
  %99 = load i32*, i32** %98, align 8
  %100 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %90, i64 0, i32 6, i32 0, i32 1
  %101 = load i32*, i32** %100, align 8
  %102 = icmp eq i32* %99, %101
  br i1 %102, label %208, label %103

103:                                              ; preds = %97, %85
  %104 = bitcast %"class.fxcrt::RetainPtr"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %104) #7
  %105 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %20, i64 0, i32 0, i32 0, i32 0, i32 0
  store %class.CFX_DIBitmap* inttoptr (i64 -6148914691236517206 to %class.CFX_DIBitmap*), %class.CFX_DIBitmap** %105, align 8
  call void @_ZN11CFX_DIBBase12GetAlphaMaskEv(%"class.fxcrt::RetainPtr"* nonnull sret %20, %class.CFX_DIBBase* %90) #7
  %106 = load i32, i32* %15, align 4
  %107 = icmp sgt i32 %106, 0
  br i1 %107, label %108, label %113

108:                                              ; preds = %103
  %109 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %110 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %111 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %66, i64 0, i32 1, i32 1, i32 0
  %112 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %66, i64 0, i32 0, i32 4
  br label %128

113:                                              ; preds = %204, %103
  %114 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %105, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %105, align 8
  %115 = icmp eq %class.CFX_DIBitmap* %114, null
  br i1 %115, label %127, label %116

116:                                              ; preds = %113
  %117 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %114, i64 0, i32 0, i32 0, i32 1
  %118 = load i64, i64* %117, align 8
  %119 = add nsw i64 %118, -1
  store i64 %119, i64* %117, align 8
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %127

121:                                              ; preds = %116
  %122 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %114, i64 0, i32 0, i32 0
  %123 = bitcast %class.CFX_DIBitmap* %114 to void (%"class.fxcrt::Retainable"*)***
  %124 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %123, align 8
  %125 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %124, i64 1
  %126 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %125, align 8
  call void %126(%"class.fxcrt::Retainable"* nonnull %122) #7
  br label %127

127:                                              ; preds = %113, %116, %121
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %104) #7
  br label %208

128:                                              ; preds = %108, %204
  %129 = phi i32 [ 0, %108 ], [ %205, %204 ]
  %130 = load i8*, i8** %28, align 8
  %131 = load i32, i32* %13, align 4
  %132 = add nsw i32 %131, %129
  %133 = load i32, i32* %109, align 4
  %134 = mul i32 %132, %133
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds i8, i8* %130, i64 %135
  %137 = load i32, i32* %12, align 4
  %138 = mul nsw i32 %137, %89
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %136, i64 %139
  %141 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %21, align 8
  %142 = load i32, i32* %17, align 4
  %143 = add nsw i32 %142, %129
  %144 = bitcast %class.CFX_DIBBase* %141 to i8* (%class.CFX_DIBBase*, i32)***
  %145 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %144, align 8
  %146 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %145, i64 3
  %147 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %146, align 8
  %148 = call i8* %147(%class.CFX_DIBBase* %141, i32 %143) #7
  %149 = load i32, i32* %16, align 4
  %150 = mul nsw i32 %149, %95
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %148, i64 %151
  %153 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %105, align 8
  %154 = icmp eq %class.CFX_DIBitmap* %153, null
  br i1 %154, label %166, label %155

155:                                              ; preds = %128
  %156 = load i32, i32* %17, align 4
  %157 = add nsw i32 %156, %129
  %158 = bitcast %class.CFX_DIBitmap* %153 to i8* (%class.CFX_DIBitmap*, i32)***
  %159 = load i8* (%class.CFX_DIBitmap*, i32)**, i8* (%class.CFX_DIBitmap*, i32)*** %158, align 8
  %160 = getelementptr inbounds i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %159, i64 3
  %161 = load i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %160, align 8
  %162 = call i8* %161(%class.CFX_DIBitmap* nonnull %153, i32 %157) #7
  %163 = load i32, i32* %16, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %162, i64 %164
  br label %166

166:                                              ; preds = %128, %155
  %167 = phi i8* [ %165, %155 ], [ null, %128 ]
  %168 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %110, align 8
  %169 = icmp eq %class.CFX_DIBitmap* %168, null
  br i1 %169, label %182, label %170

170:                                              ; preds = %166
  %171 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %168, i64 0, i32 0
  %172 = load i32, i32* %13, align 4
  %173 = add nsw i32 %172, %129
  %174 = bitcast %class.CFX_DIBitmap* %168 to i8* (%class.CFX_DIBBase*, i32)***
  %175 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %174, align 8
  %176 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %175, i64 3
  %177 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %176, align 8
  %178 = call i8* %177(%class.CFX_DIBBase* %171, i32 %173) #7
  %179 = load i32, i32* %12, align 4
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i8, i8* %178, i64 %180
  br label %182

182:                                              ; preds = %166, %170
  %183 = phi i8* [ %181, %170 ], [ null, %166 ]
  br i1 %83, label %184, label %197

184:                                              ; preds = %182
  %185 = load i8*, i8** %111, align 8
  %186 = load i32, i32* %13, align 4
  %187 = add i32 %129, %65
  %188 = add i32 %187, %186
  %189 = load i32, i32* %112, align 4
  %190 = mul i32 %188, %189
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds i8, i8* %185, i64 %191
  %193 = load i32, i32* %12, align 4
  %194 = sub nsw i32 %193, %64
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i8, i8* %192, i64 %195
  br label %197

197:                                              ; preds = %184, %182
  %198 = phi i8* [ %196, %184 ], [ null, %182 ]
  br i1 %96, label %199, label %201

199:                                              ; preds = %197
  %200 = load i32, i32* %14, align 4
  call void @_ZN22CFX_ScanlineCompositor22CompositeRgbBitmapLineEPhPKhiS2_S2_S0_(%class.CFX_ScanlineCompositor* nonnull %18, i8* %140, i8* %152, i32 %200, i8* %198, i8* %167, i8* %183) #7
  br label %204

201:                                              ; preds = %197
  %202 = load i32, i32* %16, align 4
  %203 = load i32, i32* %14, align 4
  call void @_ZN22CFX_ScanlineCompositor22CompositePalBitmapLineEPhPKhiiS2_S2_S0_(%class.CFX_ScanlineCompositor* nonnull %18, i8* %140, i8* %152, i32 %202, i32 %203, i8* %198, i8* %167, i8* %183) #7
  br label %204

204:                                              ; preds = %201, %199
  %205 = add nuw nsw i32 %129, 1
  %206 = load i32, i32* %15, align 4
  %207 = icmp slt i32 %205, %206
  br i1 %207, label %128, label %113

208:                                              ; preds = %97, %127, %63
  %209 = phi i1 [ false, %63 ], [ true, %127 ], [ false, %97 ]
  call void @_ZN22CFX_ScanlineCompositorD1Ev(%class.CFX_ScanlineCompositor* nonnull %18) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %67) #7
  %210 = icmp eq %class.CFX_DIBitmap* %66, null
  br i1 %210, label %222, label %211

211:                                              ; preds = %208
  %212 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %66, i64 0, i32 0, i32 0, i32 1
  %213 = load i64, i64* %212, align 8
  %214 = add nsw i64 %213, -1
  store i64 %214, i64* %212, align 8
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %216, label %222

216:                                              ; preds = %211
  %217 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %66, i64 0, i32 0, i32 0
  %218 = bitcast %class.CFX_DIBitmap* %66 to void (%"class.fxcrt::Retainable"*)***
  %219 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %218, align 8
  %220 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %219, i64 1
  %221 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %220, align 8
  call void %221(%"class.fxcrt::Retainable"* nonnull %217) #7
  br label %222

222:                                              ; preds = %27, %11, %216, %211, %208, %36, %31
  %223 = phi i1 [ false, %11 ], [ false, %27 ], [ false, %31 ], [ true, %36 ], [ %209, %208 ], [ %209, %211 ], [ %209, %216 ]
  ret i1 %223
}

declare void @_ZN22CFX_ScanlineCompositorC1Ev(%class.CFX_ScanlineCompositor*) unnamed_addr #1

declare zeroext i1 @_ZN22CFX_ScanlineCompositor4InitE12FXDIB_FormatS0_iN6pdfium4spanIKjEEj9BlendModebb(%class.CFX_ScanlineCompositor*, i16 zeroext, i16 zeroext, i32, %"class.pdfium::span"*, i32, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #1

declare void @_ZN22CFX_ScanlineCompositor22CompositeRgbBitmapLineEPhPKhiS2_S2_S0_(%class.CFX_ScanlineCompositor*, i8*, i8*, i32, i8*, i8*, i8*) local_unnamed_addr #1

declare void @_ZN22CFX_ScanlineCompositor22CompositePalBitmapLineEPhPKhiiS2_S2_S0_(%class.CFX_ScanlineCompositor*, i8*, i8*, i32, i32, i8*, i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN22CFX_ScanlineCompositorD1Ev(%class.CFX_ScanlineCompositor*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap13CompositeMaskEiiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEjii9BlendModePK11CFX_ClipRgnb(%class.CFX_DIBitmap*, i32, i32, i32, i32, %"class.fxcrt::RetainPtr.8"* nocapture readonly dereferenceable(8), i32, i32, i32, i32, %class.CFX_ClipRgn*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca %class.CFX_ScanlineCompositor, align 8
  %20 = alloca %"class.pdfium::span", align 8
  store i32 %1, i32* %13, align 4
  store i32 %2, i32* %14, align 4
  store i32 %3, i32* %15, align 4
  store i32 %4, i32* %16, align 4
  store i32 %7, i32* %17, align 4
  store i32 %8, i32* %18, align 4
  %21 = getelementptr inbounds %"class.fxcrt::RetainPtr.8", %"class.fxcrt::RetainPtr.8"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %21, align 8
  %23 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %22, i64 0, i32 1
  %24 = load i16, i16* %23, align 8
  %25 = and i16 %24, 256
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %173, label %27

27:                                               ; preds = %12
  %28 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %173, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %33 = load i16, i16* %32, align 8
  %34 = and i16 %33, 248
  %35 = icmp eq i16 %34, 0
  br i1 %35, label %173, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0
  %38 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %22, i64 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %22, i64 0, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = call zeroext i1 @_ZNK11CFX_DIBBase14GetOverlapRectERiS0_S0_S0_iiS0_S0_PK11CFX_ClipRgn(%class.CFX_DIBBase* %37, i32* nonnull dereferenceable(4) %13, i32* nonnull dereferenceable(4) %14, i32* nonnull dereferenceable(4) %15, i32* nonnull dereferenceable(4) %16, i32 %39, i32 %41, i32* nonnull dereferenceable(4) %17, i32* nonnull dereferenceable(4) %18, %class.CFX_ClipRgn* %10) #7
  %43 = xor i1 %42, true
  %44 = icmp ult i32 %6, 16777216
  %45 = or i1 %44, %43
  br i1 %45, label %173, label %46

46:                                               ; preds = %36
  %47 = icmp eq %class.CFX_ClipRgn* %10, null
  br i1 %47, label %66, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %10, i64 0, i32 0
  %50 = load i8, i8* %49, align 8, !range !11
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %66, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %54 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %53, align 8, !noalias !18
  %55 = icmp eq %class.CFX_DIBitmap* %54, null
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %54, i64 0, i32 0, i32 0, i32 1
  %58 = load i64, i64* %57, align 8, !noalias !18
  %59 = add nsw i64 %58, 1
  store i64 %59, i64* %57, align 8, !noalias !18
  br label %60

60:                                               ; preds = %52, %56
  %61 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %10, i64 0, i32 1, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %10, i64 0, i32 1, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = sub i32 0, %64
  br label %66

66:                                               ; preds = %48, %46, %60
  %67 = phi i32 [ 0, %46 ], [ %62, %60 ], [ 0, %48 ]
  %68 = phi i32 [ 0, %46 ], [ %65, %60 ], [ 0, %48 ]
  %69 = phi %class.CFX_DIBitmap* [ null, %46 ], [ %54, %60 ], [ null, %48 ]
  %70 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %21, align 8
  %71 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %70, i64 0, i32 1
  %72 = load i16, i16* %71, align 8
  %73 = and i16 %72, 255
  %74 = load i16, i16* %32, align 8
  %75 = lshr i16 %74, 3
  %76 = and i16 %75, 31
  %77 = zext i16 %76 to i32
  %78 = bitcast %class.CFX_ScanlineCompositor* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %78) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 -86, i64 56, i1 false)
  call void @_ZN22CFX_ScanlineCompositorC1Ev(%class.CFX_ScanlineCompositor* nonnull %19) #7
  %79 = load i16, i16* %32, align 8
  %80 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %21, align 8
  %81 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %80, i64 0, i32 1
  %82 = load i16, i16* %81, align 8
  %83 = load i32, i32* %15, align 4
  %84 = bitcast %"class.pdfium::span"* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %84, i8 0, i64 16, i1 false) #7
  %85 = icmp ne %class.CFX_DIBitmap* %69, null
  %86 = call zeroext i1 @_ZN22CFX_ScanlineCompositor4InitE12FXDIB_FormatS0_iN6pdfium4spanIKjEEj9BlendModebb(%class.CFX_ScanlineCompositor* nonnull %19, i16 zeroext %79, i16 zeroext %82, i32 %83, %"class.pdfium::span"* nonnull %20, i32 %6, i32 %9, i1 zeroext %85, i1 zeroext %11) #7
  br i1 %86, label %87, label %159

87:                                               ; preds = %66
  %88 = load i32, i32* %16, align 4
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %90, label %159

90:                                               ; preds = %87
  %91 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %92 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %93 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %69, i64 0, i32 1, i32 1, i32 0
  %94 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %69, i64 0, i32 0, i32 4
  %95 = icmp eq i16 %73, 1
  br label %96

96:                                               ; preds = %90, %155
  %97 = phi i32 [ 0, %90 ], [ %156, %155 ]
  %98 = load i8*, i8** %28, align 8
  %99 = load i32, i32* %14, align 4
  %100 = add nsw i32 %99, %97
  %101 = load i32, i32* %91, align 4
  %102 = mul i32 %100, %101
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %98, i64 %103
  %105 = load i32, i32* %13, align 4
  %106 = mul nsw i32 %105, %77
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %104, i64 %107
  %109 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %21, align 8
  %110 = load i32, i32* %18, align 4
  %111 = add nsw i32 %110, %97
  %112 = bitcast %class.CFX_DIBBase* %109 to i8* (%class.CFX_DIBBase*, i32)***
  %113 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %112, align 8
  %114 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %113, i64 3
  %115 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %114, align 8
  %116 = call i8* %115(%class.CFX_DIBBase* %109, i32 %111) #7
  %117 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %92, align 8
  %118 = icmp eq %class.CFX_DIBitmap* %117, null
  br i1 %118, label %131, label %119

119:                                              ; preds = %96
  %120 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %117, i64 0, i32 0
  %121 = load i32, i32* %14, align 4
  %122 = add nsw i32 %121, %97
  %123 = bitcast %class.CFX_DIBitmap* %117 to i8* (%class.CFX_DIBBase*, i32)***
  %124 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %123, align 8
  %125 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %124, i64 3
  %126 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %125, align 8
  %127 = call i8* %126(%class.CFX_DIBBase* %120, i32 %122) #7
  %128 = load i32, i32* %13, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %127, i64 %129
  br label %131

131:                                              ; preds = %96, %119
  %132 = phi i8* [ %130, %119 ], [ null, %96 ]
  br i1 %85, label %133, label %146

133:                                              ; preds = %131
  %134 = load i8*, i8** %93, align 8
  %135 = load i32, i32* %14, align 4
  %136 = add i32 %97, %68
  %137 = add i32 %136, %135
  %138 = load i32, i32* %94, align 4
  %139 = mul i32 %137, %138
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds i8, i8* %134, i64 %140
  %142 = load i32, i32* %13, align 4
  %143 = sub nsw i32 %142, %67
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %141, i64 %144
  br label %146

146:                                              ; preds = %133, %131
  %147 = phi i8* [ %145, %133 ], [ null, %131 ]
  %148 = load i32, i32* %17, align 4
  br i1 %95, label %149, label %151

149:                                              ; preds = %146
  %150 = load i32, i32* %15, align 4
  call void @_ZN22CFX_ScanlineCompositor20CompositeBitMaskLineEPhPKhiiS2_S0_(%class.CFX_ScanlineCompositor* nonnull %19, i8* %108, i8* %116, i32 %148, i32 %150, i8* %147, i8* %132) #7
  br label %155

151:                                              ; preds = %146
  %152 = sext i32 %148 to i64
  %153 = getelementptr inbounds i8, i8* %116, i64 %152
  %154 = load i32, i32* %15, align 4
  call void @_ZN22CFX_ScanlineCompositor21CompositeByteMaskLineEPhPKhiS2_S0_(%class.CFX_ScanlineCompositor* nonnull %19, i8* %108, i8* %153, i32 %154, i8* %147, i8* %132) #7
  br label %155

155:                                              ; preds = %151, %149
  %156 = add nuw nsw i32 %97, 1
  %157 = load i32, i32* %16, align 4
  %158 = icmp slt i32 %156, %157
  br i1 %158, label %96, label %159

159:                                              ; preds = %155, %87, %66
  %160 = phi i1 [ false, %66 ], [ true, %87 ], [ true, %155 ]
  call void @_ZN22CFX_ScanlineCompositorD1Ev(%class.CFX_ScanlineCompositor* nonnull %19) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %78) #7
  %161 = icmp eq %class.CFX_DIBitmap* %69, null
  br i1 %161, label %173, label %162

162:                                              ; preds = %159
  %163 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %69, i64 0, i32 0, i32 0, i32 1
  %164 = load i64, i64* %163, align 8
  %165 = add nsw i64 %164, -1
  store i64 %165, i64* %163, align 8
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %173

167:                                              ; preds = %162
  %168 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %69, i64 0, i32 0, i32 0
  %169 = bitcast %class.CFX_DIBitmap* %69 to void (%"class.fxcrt::Retainable"*)***
  %170 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %169, align 8
  %171 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %170, i64 1
  %172 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %171, align 8
  call void %172(%"class.fxcrt::Retainable"* nonnull %168) #7
  br label %173

173:                                              ; preds = %27, %12, %167, %162, %159, %36, %31
  %174 = phi i1 [ false, %12 ], [ false, %27 ], [ false, %31 ], [ true, %36 ], [ %160, %159 ], [ %160, %162 ], [ %160, %167 ]
  ret i1 %174
}

declare void @_ZN22CFX_ScanlineCompositor20CompositeBitMaskLineEPhPKhiiS2_S0_(%class.CFX_ScanlineCompositor*, i8*, i8*, i32, i32, i8*, i8*) local_unnamed_addr #1

declare void @_ZN22CFX_ScanlineCompositor21CompositeByteMaskLineEPhPKhiS2_S0_(%class.CFX_ScanlineCompositor*, i8*, i8*, i32, i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CFX_DIBitmap13CompositeRectEiiiij(%class.CFX_DIBitmap*, i32, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.FX_RECT, align 4
  %8 = alloca %struct.FX_RECT, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 1, i32 1, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %634, label %13

13:                                               ; preds = %6
  %14 = lshr i32 %5, 24
  %15 = trunc i32 %14 to i8
  %16 = icmp eq i32 %14, 0
  br i1 %16, label %634, label %17

17:                                               ; preds = %13
  %18 = bitcast %struct.FX_RECT* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #7
  %19 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %8, i64 0, i32 0
  %20 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %8, i64 0, i32 1
  %21 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %8, i64 0, i32 2
  %22 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %8, i64 0, i32 3
  %23 = add nsw i32 %3, %1
  %24 = add nsw i32 %4, %2
  store i32 %1, i32* %19, align 4
  store i32 %2, i32* %20, align 4
  store i32 %23, i32* %21, align 4
  store i32 %24, i32* %22, align 4
  %25 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0
  %26 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = bitcast %struct.FX_RECT* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #7
  %31 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %7, i64 0, i32 0
  store i32 0, i32* %31, align 4
  %32 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %7, i64 0, i32 1
  store i32 0, i32* %32, align 4
  %33 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %7, i64 0, i32 2
  store i32 %27, i32* %33, align 4
  %34 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %7, i64 0, i32 3
  store i32 %29, i32* %34, align 4
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* nonnull %8, %struct.FX_RECT* nonnull dereferenceable(16) %7) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #7
  %35 = load i32, i32* %21, align 4
  %36 = load i32, i32* %19, align 4
  %37 = icmp sgt i32 %35, %36
  br i1 %37, label %38, label %632

38:                                               ; preds = %17
  %39 = load i32, i32* %22, align 4
  %40 = load i32, i32* %20, align 4
  %41 = icmp sgt i32 %39, %40
  br i1 %41, label %42, label %632

42:                                               ; preds = %38
  %43 = sub i32 %35, %36
  %44 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %44) #7
  store i32 %5, i32* %9, align 4
  %45 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 1
  %46 = load i16, i16* %45, align 8
  %47 = trunc i16 %46 to i8
  %48 = trunc i32 %5 to i8
  %49 = lshr i32 %5, 8
  %50 = trunc i32 %49 to i8
  %51 = lshr i32 %5, 16
  %52 = trunc i32 %51 to i16
  switch i8 %47, label %245 [
    i8 8, label %53
    i8 1, label %172
  ]

53:                                               ; preds = %42
  %54 = and i16 %46, 256
  %55 = icmp eq i16 %54, 0
  br i1 %55, label %56, label %69

56:                                               ; preds = %53
  %57 = trunc i32 %5 to i16
  %58 = and i16 %57, 255
  %59 = mul nuw nsw i16 %58, 11
  %60 = trunc i32 %49 to i16
  %61 = and i16 %60, 255
  %62 = mul nuw nsw i16 %61, 59
  %63 = add nuw nsw i16 %62, %59
  %64 = and i16 %52, 255
  %65 = mul nuw nsw i16 %64, 30
  %66 = add nuw nsw i16 %63, %65
  %67 = udiv i16 %66, 100
  %68 = trunc i16 %67 to i8
  br label %69

69:                                               ; preds = %56, %53
  %70 = phi i8 [ %68, %56 ], [ -1, %53 ]
  %71 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %72 = icmp eq i32 %14, 255
  %73 = icmp sgt i32 %43, 0
  %74 = xor i32 %14, 255
  %75 = zext i8 %70 to i32
  %76 = mul nuw nsw i32 %14, %75
  %77 = sext i32 %43 to i64
  %78 = xor i32 %36, -1
  %79 = add i32 %35, %78
  %80 = zext i32 %79 to i64
  %81 = add nuw nsw i64 %80, 1
  %82 = and i64 %81, 8589934576
  %83 = add nsw i64 %82, -16
  %84 = lshr exact i64 %83, 4
  %85 = add nuw nsw i64 %84, 1
  %86 = icmp ult i64 %81, 16
  %87 = and i64 %81, 8589934576
  %88 = trunc i64 %87 to i32
  %89 = insertelement <16 x i32> undef, i32 %74, i32 0
  %90 = shufflevector <16 x i32> %89, <16 x i32> undef, <16 x i32> zeroinitializer
  %91 = insertelement <16 x i32> undef, i32 %76, i32 0
  %92 = shufflevector <16 x i32> %91, <16 x i32> undef, <16 x i32> zeroinitializer
  %93 = and i64 %85, 1
  %94 = icmp eq i64 %83, 0
  %95 = sub nuw nsw i64 %85, %93
  %96 = icmp eq i64 %93, 0
  %97 = icmp eq i64 %81, %87
  br label %98

98:                                               ; preds = %170, %69
  %99 = phi i32 [ %36, %69 ], [ %171, %170 ]
  %100 = phi i32 [ %40, %69 ], [ %167, %170 ]
  %101 = load i8*, i8** %10, align 8
  %102 = load i32, i32* %71, align 4
  %103 = mul i32 %102, %100
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %101, i64 %104
  %106 = sext i32 %99 to i64
  %107 = getelementptr inbounds i8, i8* %105, i64 %106
  br i1 %72, label %153, label %108

108:                                              ; preds = %98
  br i1 %73, label %109, label %166

109:                                              ; preds = %108
  br i1 %86, label %110, label %113

110:                                              ; preds = %152, %109
  %111 = phi i32 [ 0, %109 ], [ %88, %152 ]
  %112 = phi i8* [ %107, %109 ], [ %114, %152 ]
  br label %154

113:                                              ; preds = %109
  %114 = getelementptr i8, i8* %107, i64 %87
  br i1 %94, label %140, label %115

115:                                              ; preds = %113, %115
  %116 = phi i64 [ %137, %115 ], [ 0, %113 ]
  %117 = phi i64 [ %138, %115 ], [ %95, %113 ]
  %118 = getelementptr i8, i8* %107, i64 %116
  %119 = bitcast i8* %118 to <16 x i8>*
  %120 = load <16 x i8>, <16 x i8>* %119, align 1
  %121 = zext <16 x i8> %120 to <16 x i32>
  %122 = mul nuw nsw <16 x i32> %90, %121
  %123 = add nuw nsw <16 x i32> %122, %92
  %124 = udiv <16 x i32> %123, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %125 = trunc <16 x i32> %124 to <16 x i8>
  %126 = bitcast i8* %118 to <16 x i8>*
  store <16 x i8> %125, <16 x i8>* %126, align 1
  %127 = or i64 %116, 16
  %128 = getelementptr i8, i8* %107, i64 %127
  %129 = bitcast i8* %128 to <16 x i8>*
  %130 = load <16 x i8>, <16 x i8>* %129, align 1
  %131 = zext <16 x i8> %130 to <16 x i32>
  %132 = mul nuw nsw <16 x i32> %90, %131
  %133 = add nuw nsw <16 x i32> %132, %92
  %134 = udiv <16 x i32> %133, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %135 = trunc <16 x i32> %134 to <16 x i8>
  %136 = bitcast i8* %128 to <16 x i8>*
  store <16 x i8> %135, <16 x i8>* %136, align 1
  %137 = add i64 %116, 32
  %138 = add i64 %117, -2
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %115, !llvm.loop !21

140:                                              ; preds = %115, %113
  %141 = phi i64 [ 0, %113 ], [ %137, %115 ]
  br i1 %96, label %152, label %142

142:                                              ; preds = %140
  %143 = getelementptr i8, i8* %107, i64 %141
  %144 = bitcast i8* %143 to <16 x i8>*
  %145 = load <16 x i8>, <16 x i8>* %144, align 1
  %146 = zext <16 x i8> %145 to <16 x i32>
  %147 = mul nuw nsw <16 x i32> %90, %146
  %148 = add nuw nsw <16 x i32> %147, %92
  %149 = udiv <16 x i32> %148, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %150 = trunc <16 x i32> %149 to <16 x i8>
  %151 = bitcast i8* %143 to <16 x i8>*
  store <16 x i8> %150, <16 x i8>* %151, align 1
  br label %152

152:                                              ; preds = %140, %142
  br i1 %97, label %166, label %110

153:                                              ; preds = %98
  call void @llvm.memset.p0i8.i64(i8* align 1 %107, i8 %70, i64 %77, i1 false)
  br label %166

154:                                              ; preds = %110, %154
  %155 = phi i32 [ %164, %154 ], [ %111, %110 ]
  %156 = phi i8* [ %163, %154 ], [ %112, %110 ]
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = mul nuw nsw i32 %74, %158
  %160 = add nuw nsw i32 %159, %76
  %161 = udiv i32 %160, 255
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %156, align 1
  %163 = getelementptr inbounds i8, i8* %156, i64 1
  %164 = add nuw nsw i32 %155, 1
  %165 = icmp eq i32 %164, %43
  br i1 %165, label %166, label %154, !llvm.loop !23

166:                                              ; preds = %154, %152, %108, %153
  %167 = add nsw i32 %100, 1
  %168 = load i32, i32* %22, align 4
  %169 = icmp slt i32 %167, %168
  br i1 %169, label %170, label %630

170:                                              ; preds = %166
  %171 = load i32, i32* %19, align 4
  br label %98

172:                                              ; preds = %42
  %173 = srem i32 %36, 8
  %174 = sdiv i32 %35, 8
  %175 = sdiv i32 %36, 8
  %176 = sub nsw i32 %174, %175
  %177 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 0
  %178 = load i32*, i32** %177, align 8
  %179 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 6, i32 0, i32 1
  %180 = load i32*, i32** %179, align 8
  %181 = icmp eq i32* %178, %180
  br i1 %181, label %187, label %182

182:                                              ; preds = %172
  %183 = ptrtoint i32* %180 to i64
  %184 = ptrtoint i32* %178 to i64
  %185 = sub i64 %183, %184
  switch i64 %185, label %636 [
    i64 0, label %186
    i64 4, label %186
  ], !prof !25

186:                                              ; preds = %182, %182
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !26
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !27
  unreachable

187:                                              ; preds = %172
  %188 = and i32 %5, 255
  %189 = icmp eq i32 %188, 255
  br label %190

190:                                              ; preds = %187, %636
  %191 = phi i1 [ %189, %187 ], [ %639, %636 ]
  %192 = bitcast %class.CFX_DIBitmap* %0 to i8* (%class.CFX_DIBBase*, i32)***
  %193 = sub nsw i32 8, %173
  %194 = shl i32 255, %193
  %195 = trunc i32 %194 to i8
  %196 = and i32 %35, 7
  %197 = lshr i32 255, %196
  %198 = trunc i32 %197 to i8
  %199 = icmp eq i32 %176, 0
  %200 = sext i1 %191 to i8
  %201 = add nsw i32 %176, -1
  %202 = sext i32 %201 to i64
  br label %203

203:                                              ; preds = %190, %241
  %204 = phi i32 [ %40, %190 ], [ %242, %241 ]
  %205 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %192, align 8
  %206 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %205, i64 3
  %207 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %206, align 8
  %208 = call i8* %207(%class.CFX_DIBBase* %25, i32 %204) #7
  %209 = load i32, i32* %19, align 4
  %210 = sdiv i32 %209, 8
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds i8, i8* %208, i64 %211
  %213 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %192, align 8
  %214 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %213, i64 3
  %215 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %214, align 8
  %216 = call i8* %215(%class.CFX_DIBBase* %25, i32 %204) #7
  %217 = load i32, i32* %21, align 4
  %218 = sdiv i32 %217, 8
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds i8, i8* %216, i64 %219
  %221 = load i8, i8* %212, align 1
  %222 = and i8 %221, %195
  %223 = load i8, i8* %220, align 1
  %224 = and i8 %223, %198
  br i1 %199, label %234, label %225

225:                                              ; preds = %203
  %226 = getelementptr inbounds i8, i8* %212, i64 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %226, i8 %200, i64 %202, i1 false)
  br i1 %191, label %230, label %227

227:                                              ; preds = %225
  store i8 %222, i8* %212, align 1
  %228 = load i8, i8* %220, align 1
  %229 = and i8 %228, %224
  store i8 %229, i8* %220, align 1
  br label %241

230:                                              ; preds = %225
  store i8 -1, i8* %212, align 1
  %231 = xor i8 %224, -1
  %232 = load i8, i8* %220, align 1
  %233 = or i8 %232, %231
  store i8 %233, i8* %220, align 1
  br label %241

234:                                              ; preds = %203
  %235 = or i8 %224, %222
  br i1 %191, label %238, label %236

236:                                              ; preds = %234
  %237 = and i8 %235, %221
  store i8 %237, i8* %212, align 1
  br label %241

238:                                              ; preds = %234
  %239 = xor i8 %235, -1
  %240 = or i8 %221, %239
  store i8 %240, i8* %212, align 1
  br label %241

241:                                              ; preds = %236, %238, %227, %230
  %242 = add nsw i32 %204, 1
  %243 = load i32, i32* %22, align 4
  %244 = icmp slt i32 %242, %243
  br i1 %244, label %203, label %630

245:                                              ; preds = %42
  %246 = and i16 %46, 248
  %247 = icmp ult i16 %246, 24
  br i1 %247, label %630, label %248

248:                                              ; preds = %245
  %249 = getelementptr inbounds i8, i8* %44, i64 3
  store i8 %15, i8* %249, align 1
  %250 = lshr i16 %46, 3
  %251 = and i16 %250, 31
  %252 = zext i16 %251 to i32
  %253 = and i16 %46, 512
  %254 = icmp eq i16 %253, 0
  %255 = icmp eq i16 %46, 544
  %256 = icmp eq i32 %14, 255
  %257 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 4
  %258 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  br i1 %256, label %273, label %259

259:                                              ; preds = %248
  %260 = icmp sgt i32 %43, 0
  %261 = mul nuw nsw i32 %14, 255
  %262 = icmp eq i16 %251, 0
  %263 = zext i16 %251 to i64
  %264 = getelementptr inbounds i8, i8* %44, i64 1
  %265 = getelementptr inbounds i8, i8* %44, i64 2
  %266 = xor i32 %14, 255
  %267 = zext i16 %251 to i64
  %268 = zext i16 %251 to i64
  %269 = and i64 %267, 1
  %270 = icmp eq i16 %251, 1
  %271 = sub nsw i64 %267, %269
  %272 = icmp eq i64 %269, 0
  br label %446

273:                                              ; preds = %248
  %274 = sext i32 %43 to i64
  %275 = icmp eq i16 %246, 32
  %276 = icmp sgt i32 %43, 0
  %277 = getelementptr inbounds i8, i8* %44, i64 2
  %278 = xor i32 %36, -1
  %279 = add i32 %35, %278
  %280 = zext i32 %279 to i64
  %281 = add nuw nsw i64 %280, 1
  %282 = xor i32 %36, -1
  %283 = add i32 %35, %282
  %284 = and i64 %281, 8589934584
  %285 = add nsw i64 %284, -8
  %286 = lshr exact i64 %285, 3
  %287 = add nuw nsw i64 %286, 1
  %288 = and i32 %43, 3
  %289 = icmp ult i32 %283, 3
  %290 = sub i32 %43, %288
  %291 = icmp eq i32 %288, 0
  %292 = icmp ult i64 %281, 8
  %293 = and i64 %281, 8589934584
  %294 = trunc i64 %293 to i32
  %295 = and i64 %287, 7
  %296 = icmp ult i64 %285, 56
  %297 = sub nsw i64 %287, %295
  %298 = icmp eq i64 %295, 0
  %299 = icmp eq i64 %281, %293
  br label %300

300:                                              ; preds = %444, %273
  %301 = phi i8 [ %48, %273 ], [ %440, %444 ]
  %302 = phi i32 [ %36, %273 ], [ %445, %444 ]
  %303 = phi i32 [ %40, %273 ], [ %441, %444 ]
  %304 = load i8*, i8** %10, align 8
  %305 = load i32, i32* %257, align 4
  %306 = mul i32 %305, %303
  %307 = zext i32 %306 to i64
  %308 = getelementptr inbounds i8, i8* %304, i64 %307
  %309 = mul nsw i32 %302, %252
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds i8, i8* %308, i64 %310
  %312 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %258, align 8
  %313 = icmp eq %class.CFX_DIBitmap* %312, null
  br i1 %313, label %326, label %314

314:                                              ; preds = %300
  %315 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %312, i64 0, i32 0
  %316 = bitcast %class.CFX_DIBitmap* %312 to i8* (%class.CFX_DIBBase*, i32)***
  %317 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %316, align 8
  %318 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %317, i64 3
  %319 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %318, align 8
  %320 = call i8* %319(%class.CFX_DIBBase* %315, i32 %303) #7
  %321 = load i32, i32* %19, align 4
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds i8, i8* %320, i64 %322
  %324 = icmp eq i8* %323, null
  br i1 %324, label %326, label %325

325:                                              ; preds = %314
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %323, i8 -1, i64 %274, i1 false)
  br label %326

326:                                              ; preds = %300, %314, %325
  br i1 %275, label %329, label %327

327:                                              ; preds = %326
  br i1 %276, label %328, label %439

328:                                              ; preds = %327
  br i1 %289, label %428, label %407

329:                                              ; preds = %326
  br i1 %276, label %330, label %439

330:                                              ; preds = %329
  %331 = bitcast i8* %311 to i32*
  %332 = load i32, i32* %9, align 4
  %333 = trunc i32 %332 to i8
  br i1 %292, label %398, label %334

334:                                              ; preds = %330
  %335 = getelementptr i32, i32* %331, i64 %293
  %336 = insertelement <4 x i32> undef, i32 %332, i32 0
  %337 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> zeroinitializer
  %338 = insertelement <4 x i32> undef, i32 %332, i32 0
  %339 = shufflevector <4 x i32> %338, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %296, label %385, label %340

340:                                              ; preds = %334, %340
  %341 = phi i64 [ %382, %340 ], [ 0, %334 ]
  %342 = phi i64 [ %383, %340 ], [ %297, %334 ]
  %343 = getelementptr i32, i32* %331, i64 %341
  %344 = bitcast i32* %343 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %344, align 4
  %345 = getelementptr i32, i32* %343, i64 4
  %346 = bitcast i32* %345 to <4 x i32>*
  store <4 x i32> %339, <4 x i32>* %346, align 4
  %347 = or i64 %341, 8
  %348 = getelementptr i32, i32* %331, i64 %347
  %349 = bitcast i32* %348 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %349, align 4
  %350 = getelementptr i32, i32* %348, i64 4
  %351 = bitcast i32* %350 to <4 x i32>*
  store <4 x i32> %339, <4 x i32>* %351, align 4
  %352 = or i64 %341, 16
  %353 = getelementptr i32, i32* %331, i64 %352
  %354 = bitcast i32* %353 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %354, align 4
  %355 = getelementptr i32, i32* %353, i64 4
  %356 = bitcast i32* %355 to <4 x i32>*
  store <4 x i32> %339, <4 x i32>* %356, align 4
  %357 = or i64 %341, 24
  %358 = getelementptr i32, i32* %331, i64 %357
  %359 = bitcast i32* %358 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %359, align 4
  %360 = getelementptr i32, i32* %358, i64 4
  %361 = bitcast i32* %360 to <4 x i32>*
  store <4 x i32> %339, <4 x i32>* %361, align 4
  %362 = or i64 %341, 32
  %363 = getelementptr i32, i32* %331, i64 %362
  %364 = bitcast i32* %363 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %364, align 4
  %365 = getelementptr i32, i32* %363, i64 4
  %366 = bitcast i32* %365 to <4 x i32>*
  store <4 x i32> %339, <4 x i32>* %366, align 4
  %367 = or i64 %341, 40
  %368 = getelementptr i32, i32* %331, i64 %367
  %369 = bitcast i32* %368 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %369, align 4
  %370 = getelementptr i32, i32* %368, i64 4
  %371 = bitcast i32* %370 to <4 x i32>*
  store <4 x i32> %339, <4 x i32>* %371, align 4
  %372 = or i64 %341, 48
  %373 = getelementptr i32, i32* %331, i64 %372
  %374 = bitcast i32* %373 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %374, align 4
  %375 = getelementptr i32, i32* %373, i64 4
  %376 = bitcast i32* %375 to <4 x i32>*
  store <4 x i32> %339, <4 x i32>* %376, align 4
  %377 = or i64 %341, 56
  %378 = getelementptr i32, i32* %331, i64 %377
  %379 = bitcast i32* %378 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %379, align 4
  %380 = getelementptr i32, i32* %378, i64 4
  %381 = bitcast i32* %380 to <4 x i32>*
  store <4 x i32> %339, <4 x i32>* %381, align 4
  %382 = add i64 %341, 64
  %383 = add i64 %342, -8
  %384 = icmp eq i64 %383, 0
  br i1 %384, label %385, label %340, !llvm.loop !28

385:                                              ; preds = %340, %334
  %386 = phi i64 [ 0, %334 ], [ %382, %340 ]
  br i1 %298, label %397, label %387

387:                                              ; preds = %385, %387
  %388 = phi i64 [ %394, %387 ], [ %386, %385 ]
  %389 = phi i64 [ %395, %387 ], [ %295, %385 ]
  %390 = getelementptr i32, i32* %331, i64 %388
  %391 = bitcast i32* %390 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %391, align 4
  %392 = getelementptr i32, i32* %390, i64 4
  %393 = bitcast i32* %392 to <4 x i32>*
  store <4 x i32> %339, <4 x i32>* %393, align 4
  %394 = add i64 %388, 8
  %395 = add i64 %389, -1
  %396 = icmp eq i64 %395, 0
  br i1 %396, label %397, label %387, !llvm.loop !29

397:                                              ; preds = %387, %385
  br i1 %299, label %439, label %398

398:                                              ; preds = %397, %330
  %399 = phi i32 [ 0, %330 ], [ %294, %397 ]
  %400 = phi i32* [ %331, %330 ], [ %335, %397 ]
  br label %401

401:                                              ; preds = %398, %401
  %402 = phi i32 [ %405, %401 ], [ %399, %398 ]
  %403 = phi i32* [ %404, %401 ], [ %400, %398 ]
  %404 = getelementptr inbounds i32, i32* %403, i64 1
  store i32 %332, i32* %403, align 4
  %405 = add nuw nsw i32 %402, 1
  %406 = icmp eq i32 %405, %43
  br i1 %406, label %439, label %401, !llvm.loop !31

407:                                              ; preds = %328, %407
  %408 = phi i8* [ %425, %407 ], [ %311, %328 ]
  %409 = phi i32 [ %426, %407 ], [ %290, %328 ]
  %410 = getelementptr inbounds i8, i8* %408, i64 1
  store i8 %301, i8* %408, align 1
  %411 = getelementptr inbounds i8, i8* %408, i64 2
  store i8 %50, i8* %410, align 1
  %412 = load i8, i8* %277, align 2
  %413 = getelementptr inbounds i8, i8* %408, i64 3
  store i8 %412, i8* %411, align 1
  %414 = getelementptr inbounds i8, i8* %408, i64 4
  store i8 %301, i8* %413, align 1
  %415 = getelementptr inbounds i8, i8* %408, i64 5
  store i8 %50, i8* %414, align 1
  %416 = load i8, i8* %277, align 2
  %417 = getelementptr inbounds i8, i8* %408, i64 6
  store i8 %416, i8* %415, align 1
  %418 = getelementptr inbounds i8, i8* %408, i64 7
  store i8 %301, i8* %417, align 1
  %419 = getelementptr inbounds i8, i8* %408, i64 8
  store i8 %50, i8* %418, align 1
  %420 = load i8, i8* %277, align 2
  %421 = getelementptr inbounds i8, i8* %408, i64 9
  store i8 %420, i8* %419, align 1
  %422 = getelementptr inbounds i8, i8* %408, i64 10
  store i8 %301, i8* %421, align 1
  %423 = getelementptr inbounds i8, i8* %408, i64 11
  store i8 %50, i8* %422, align 1
  %424 = load i8, i8* %277, align 2
  %425 = getelementptr inbounds i8, i8* %408, i64 12
  store i8 %424, i8* %423, align 1
  %426 = add i32 %409, -4
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %428, label %407

428:                                              ; preds = %407, %328
  %429 = phi i8* [ %311, %328 ], [ %425, %407 ]
  br i1 %291, label %439, label %430

430:                                              ; preds = %428, %430
  %431 = phi i8* [ %436, %430 ], [ %429, %428 ]
  %432 = phi i32 [ %437, %430 ], [ %288, %428 ]
  %433 = getelementptr inbounds i8, i8* %431, i64 1
  store i8 %301, i8* %431, align 1
  %434 = getelementptr inbounds i8, i8* %431, i64 2
  store i8 %50, i8* %433, align 1
  %435 = load i8, i8* %277, align 2
  %436 = getelementptr inbounds i8, i8* %431, i64 3
  store i8 %435, i8* %434, align 1
  %437 = add i32 %432, -1
  %438 = icmp eq i32 %437, 0
  br i1 %438, label %439, label %430, !llvm.loop !32

439:                                              ; preds = %428, %430, %401, %397, %327, %329
  %440 = phi i8 [ %301, %327 ], [ %301, %329 ], [ %333, %397 ], [ %333, %401 ], [ %301, %430 ], [ %301, %428 ]
  %441 = add nsw i32 %303, 1
  %442 = load i32, i32* %22, align 4
  %443 = icmp slt i32 %441, %442
  br i1 %443, label %444, label %630

444:                                              ; preds = %439
  %445 = load i32, i32* %19, align 4
  br label %300

446:                                              ; preds = %628, %259
  %447 = phi i32 [ %36, %259 ], [ %629, %628 ]
  %448 = phi i32 [ %40, %259 ], [ %625, %628 ]
  %449 = load i8*, i8** %10, align 8
  %450 = load i32, i32* %257, align 4
  %451 = mul i32 %450, %448
  %452 = zext i32 %451 to i64
  %453 = getelementptr inbounds i8, i8* %449, i64 %452
  %454 = mul nsw i32 %447, %252
  %455 = sext i32 %454 to i64
  %456 = getelementptr inbounds i8, i8* %453, i64 %455
  br i1 %254, label %457, label %458

457:                                              ; preds = %446
  br i1 %260, label %597, label %624

458:                                              ; preds = %446
  br i1 %255, label %459, label %515

459:                                              ; preds = %458
  br i1 %260, label %460, label %624

460:                                              ; preds = %459
  %461 = load i8, i8* %44, align 4
  %462 = zext i8 %461 to i32
  %463 = load i8, i8* %264, align 1
  %464 = zext i8 %463 to i32
  br label %465

465:                                              ; preds = %510, %460
  %466 = phi i32 [ 0, %460 ], [ %513, %510 ]
  %467 = phi i8* [ %456, %460 ], [ %512, %510 ]
  %468 = getelementptr inbounds i8, i8* %467, i64 3
  %469 = load i8, i8* %468, align 1
  %470 = zext i8 %469 to i32
  %471 = icmp eq i8 %469, 0
  br i1 %471, label %472, label %476

472:                                              ; preds = %465
  store i8 %461, i8* %467, align 1
  %473 = getelementptr inbounds i8, i8* %467, i64 1
  store i8 %463, i8* %473, align 1
  %474 = load i8, i8* %265, align 2
  %475 = getelementptr inbounds i8, i8* %467, i64 2
  store i8 %474, i8* %475, align 1
  br label %510

476:                                              ; preds = %465
  %477 = add nuw nsw i32 %14, %470
  %478 = mul nuw nsw i32 %14, %470
  %479 = udiv i32 %478, 255
  %480 = sub nsw i32 %477, %479
  %481 = and i32 %480, 255
  %482 = udiv i32 %261, %481
  %483 = load i8, i8* %467, align 1
  %484 = zext i8 %483 to i32
  %485 = sub nsw i32 255, %482
  %486 = mul nsw i32 %485, %484
  %487 = mul nuw nsw i32 %482, %462
  %488 = add nsw i32 %487, %486
  %489 = sdiv i32 %488, 255
  %490 = trunc i32 %489 to i8
  store i8 %490, i8* %467, align 1
  %491 = getelementptr inbounds i8, i8* %467, i64 1
  %492 = load i8, i8* %491, align 1
  %493 = zext i8 %492 to i32
  %494 = mul nsw i32 %485, %493
  %495 = mul nuw nsw i32 %482, %464
  %496 = add nsw i32 %495, %494
  %497 = sdiv i32 %496, 255
  %498 = trunc i32 %497 to i8
  store i8 %498, i8* %491, align 1
  %499 = getelementptr inbounds i8, i8* %467, i64 2
  %500 = load i8, i8* %499, align 1
  %501 = zext i8 %500 to i32
  %502 = mul nsw i32 %485, %501
  %503 = load i8, i8* %265, align 2
  %504 = zext i8 %503 to i32
  %505 = mul nuw nsw i32 %482, %504
  %506 = add nsw i32 %505, %502
  %507 = sdiv i32 %506, 255
  %508 = trunc i32 %507 to i8
  store i8 %508, i8* %499, align 1
  %509 = trunc i32 %480 to i8
  br label %510

510:                                              ; preds = %476, %472
  %511 = phi i8 [ %509, %476 ], [ %15, %472 ]
  store i8 %511, i8* %468, align 1
  %512 = getelementptr inbounds i8, i8* %467, i64 4
  %513 = add nuw nsw i32 %466, 1
  %514 = icmp eq i32 %513, %43
  br i1 %514, label %624, label %465

515:                                              ; preds = %458
  %516 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %258, align 8
  %517 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %516, i64 0, i32 0
  %518 = bitcast %class.CFX_DIBitmap* %516 to i8* (%class.CFX_DIBBase*, i32)***
  %519 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %518, align 8
  %520 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %519, i64 3
  %521 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %520, align 8
  %522 = call i8* %521(%class.CFX_DIBBase* %517, i32 %448) #7
  br i1 %260, label %523, label %624

523:                                              ; preds = %515
  %524 = load i32, i32* %19, align 4
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds i8, i8* %522, i64 %525
  br label %527

527:                                              ; preds = %592, %523
  %528 = phi i32 [ %595, %592 ], [ 0, %523 ]
  %529 = phi i8* [ %594, %592 ], [ %526, %523 ]
  %530 = phi i8* [ %593, %592 ], [ %456, %523 ]
  %531 = load i8, i8* %529, align 1
  %532 = zext i8 %531 to i32
  %533 = icmp eq i8 %531, 0
  br i1 %533, label %534, label %536

534:                                              ; preds = %527
  store i8 %15, i8* %529, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %530, i8* nonnull align 4 %44, i64 %263, i1 false)
  %535 = getelementptr inbounds i8, i8* %530, i64 %263
  br label %592

536:                                              ; preds = %527
  %537 = add nuw nsw i32 %14, %532
  %538 = mul nuw nsw i32 %14, %532
  %539 = udiv i32 %538, 255
  %540 = sub nsw i32 %537, %539
  %541 = trunc i32 %540 to i8
  store i8 %541, i8* %529, align 1
  %542 = and i32 %540, 255
  %543 = udiv i32 %261, %542
  br i1 %262, label %592, label %544

544:                                              ; preds = %536
  %545 = sub nsw i32 255, %543
  br i1 %270, label %576, label %546

546:                                              ; preds = %544, %546
  %547 = phi i64 [ %573, %546 ], [ 0, %544 ]
  %548 = phi i8* [ %572, %546 ], [ %530, %544 ]
  %549 = phi i64 [ %574, %546 ], [ %271, %544 ]
  %550 = load i8, i8* %548, align 1
  %551 = zext i8 %550 to i32
  %552 = mul nsw i32 %545, %551
  %553 = getelementptr inbounds i8, i8* %44, i64 %547
  %554 = load i8, i8* %553, align 2
  %555 = zext i8 %554 to i32
  %556 = mul nuw nsw i32 %543, %555
  %557 = add nsw i32 %556, %552
  %558 = sdiv i32 %557, 255
  %559 = trunc i32 %558 to i8
  store i8 %559, i8* %548, align 1
  %560 = getelementptr inbounds i8, i8* %548, i64 1
  %561 = or i64 %547, 1
  %562 = load i8, i8* %560, align 1
  %563 = zext i8 %562 to i32
  %564 = mul nsw i32 %545, %563
  %565 = getelementptr inbounds i8, i8* %44, i64 %561
  %566 = load i8, i8* %565, align 1
  %567 = zext i8 %566 to i32
  %568 = mul nuw nsw i32 %543, %567
  %569 = add nsw i32 %568, %564
  %570 = sdiv i32 %569, 255
  %571 = trunc i32 %570 to i8
  store i8 %571, i8* %560, align 1
  %572 = getelementptr inbounds i8, i8* %548, i64 2
  %573 = add nuw nsw i64 %547, 2
  %574 = add i64 %549, -2
  %575 = icmp eq i64 %574, 0
  br i1 %575, label %576, label %546

576:                                              ; preds = %546, %544
  %577 = phi i8* [ undef, %544 ], [ %572, %546 ]
  %578 = phi i64 [ 0, %544 ], [ %573, %546 ]
  %579 = phi i8* [ %530, %544 ], [ %572, %546 ]
  br i1 %272, label %592, label %580

580:                                              ; preds = %576
  %581 = load i8, i8* %579, align 1
  %582 = zext i8 %581 to i32
  %583 = mul nsw i32 %545, %582
  %584 = getelementptr inbounds i8, i8* %44, i64 %578
  %585 = load i8, i8* %584, align 1
  %586 = zext i8 %585 to i32
  %587 = mul nuw nsw i32 %543, %586
  %588 = add nsw i32 %587, %583
  %589 = sdiv i32 %588, 255
  %590 = trunc i32 %589 to i8
  store i8 %590, i8* %579, align 1
  %591 = getelementptr inbounds i8, i8* %579, i64 1
  br label %592

592:                                              ; preds = %580, %576, %536, %534
  %593 = phi i8* [ %535, %534 ], [ %530, %536 ], [ %577, %576 ], [ %591, %580 ]
  %594 = getelementptr inbounds i8, i8* %529, i64 1
  %595 = add nuw nsw i32 %528, 1
  %596 = icmp eq i32 %595, %43
  br i1 %596, label %624, label %527

597:                                              ; preds = %457, %600
  %598 = phi i32 [ %602, %600 ], [ 0, %457 ]
  %599 = phi i8* [ %601, %600 ], [ %456, %457 ]
  br i1 %262, label %600, label %604

600:                                              ; preds = %619, %597
  %601 = phi i8* [ %599, %597 ], [ %621, %619 ]
  %602 = add nuw nsw i32 %598, 1
  %603 = icmp eq i32 %602, %43
  br i1 %603, label %624, label %597

604:                                              ; preds = %597, %619
  %605 = phi i64 [ %622, %619 ], [ 0, %597 ]
  %606 = phi i8* [ %621, %619 ], [ %599, %597 ]
  %607 = icmp eq i64 %605, 3
  br i1 %607, label %619, label %608

608:                                              ; preds = %604
  %609 = load i8, i8* %606, align 1
  %610 = zext i8 %609 to i32
  %611 = mul nuw nsw i32 %266, %610
  %612 = getelementptr inbounds i8, i8* %44, i64 %605
  %613 = load i8, i8* %612, align 1
  %614 = zext i8 %613 to i32
  %615 = mul nuw nsw i32 %14, %614
  %616 = add nuw nsw i32 %615, %611
  %617 = udiv i32 %616, 255
  %618 = trunc i32 %617 to i8
  br label %619

619:                                              ; preds = %604, %608
  %620 = phi i8 [ %618, %608 ], [ -1, %604 ]
  store i8 %620, i8* %606, align 1
  %621 = getelementptr inbounds i8, i8* %606, i64 1
  %622 = add nuw nsw i64 %605, 1
  %623 = icmp eq i64 %622, %268
  br i1 %623, label %600, label %604

624:                                              ; preds = %592, %510, %600, %515, %459, %457
  %625 = add nsw i32 %448, 1
  %626 = load i32, i32* %22, align 4
  %627 = icmp slt i32 %625, %626
  br i1 %627, label %628, label %630

628:                                              ; preds = %624
  %629 = load i32, i32* %19, align 4
  br label %446

630:                                              ; preds = %241, %166, %624, %439, %245
  %631 = phi i1 [ false, %245 ], [ true, %439 ], [ true, %624 ], [ true, %166 ], [ true, %241 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %44) #7
  br label %632

632:                                              ; preds = %38, %17, %630
  %633 = phi i1 [ %631, %630 ], [ true, %38 ], [ true, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #7
  br label %634

634:                                              ; preds = %6, %632, %13
  %635 = phi i1 [ false, %6 ], [ %633, %632 ], [ true, %13 ]
  ret i1 %635

636:                                              ; preds = %182
  %637 = getelementptr inbounds i32, i32* %178, i64 1
  %638 = load i32, i32* %637, align 4
  %639 = icmp eq i32 %638, %5
  br label %190
}

declare void @_ZNK11CFX_DIBBase14CloneAlphaMaskEv(%"class.fxcrt::RetainPtr"* sret, %class.CFX_DIBBase*) local_unnamed_addr #1

declare zeroext i1 @_ZNK11CFX_DIBBase14SkipToScanlineEiP19PauseIndicatorIface(%class.CFX_DIBBase*, i32, %class.PauseIndicatorIface*) unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

declare void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT*, %struct.FX_RECT* dereferenceable(16)) local_unnamed_addr #1

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i32 -2143828285}
!4 = !{i32 -2143828264}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv: argument 0"}
!7 = distinct !{!7, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK5fxcrt9RetainPtrI11CFX_DIBBaseE2AsI12CFX_DIBitmapEENS0_IT_EEv: argument 0"}
!10 = distinct !{!10, !"_ZNK5fxcrt9RetainPtrI11CFX_DIBBaseE2AsI12CFX_DIBitmapEENS0_IT_EEv"}
!11 = !{i8 0, i8 2}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNK11CFX_ClipRgn7GetMaskEv: argument 0"}
!14 = distinct !{!14, !"_ZNK11CFX_ClipRgn7GetMaskEv"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv: argument 0"}
!17 = distinct !{!17, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZNK11CFX_ClipRgn7GetMaskEv: argument 0"}
!20 = distinct !{!20, !"_ZNK11CFX_ClipRgn7GetMaskEv"}
!21 = distinct !{!21, !22}
!22 = !{!"llvm.loop.isvectorized", i32 1}
!23 = distinct !{!23, !24, !22}
!24 = !{!"llvm.loop.unroll.runtime.disable"}
!25 = !{!"branch_weights", i32 4000000, i32 2001, i32 2000}
!26 = !{i32 -2143776960}
!27 = !{i32 -2143776939}
!28 = distinct !{!28, !22}
!29 = distinct !{!29, !30}
!30 = !{!"llvm.loop.unroll.disable"}
!31 = distinct !{!31, !24, !22}
!32 = distinct !{!32, !30}
