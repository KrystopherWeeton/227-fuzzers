; ModuleID = '../../third_party/libzip/src/lib/zip_file_set_comment.c'
source_filename = "../../third_party/libzip/src/lib/zip_file_set_comment.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_file_set_comment(%struct.zip*, i64, i8*, i16 zeroext, i32) local_unnamed_addr #0 {
  %6 = tail call %struct.zip_dirent* @_zip_get_dirent(%struct.zip* %0, i64 %1, i32 0, %struct.zip_error* null) #2
  %7 = icmp eq %struct.zip_dirent* %6, null
  br i1 %7, label %87, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 4
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %14, i32 25, i32 0) #2
  br label %87

15:                                               ; preds = %8
  %16 = icmp ne i16 %3, 0
  %17 = icmp eq i8* %2, null
  %18 = and i1 %17, %16
  br i1 %18, label %19, label %21

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %20, i32 18, i32 0) #2
  br label %87

21:                                               ; preds = %15
  br i1 %16, label %22, label %34

22:                                               ; preds = %21
  %23 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %24 = tail call %struct.zip_string* @_zip_string_new(i8* %2, i16 zeroext %3, i32 %4, %struct.zip_error* %23) #2
  %25 = icmp eq %struct.zip_string* %24, null
  br i1 %25, label %87, label %26

26:                                               ; preds = %22
  %27 = and i32 %4, 6144
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %34

29:                                               ; preds = %26
  %30 = tail call i32 @_zip_guess_encoding(%struct.zip_string* nonnull %24, i32 0) #2
  %31 = icmp eq i32 %30, 3
  br i1 %31, label %32, label %34

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %24, i64 0, i32 2
  store i32 2, i32* %33, align 4
  br label %34

34:                                               ; preds = %21, %26, %29, %32
  %35 = phi %struct.zip_string* [ %24, %32 ], [ %24, %29 ], [ %24, %26 ], [ null, %21 ]
  %36 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %37 = load %struct.zip_entry*, %struct.zip_entry** %36, align 8
  %38 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %37, i64 %1, i32 1
  %39 = load %struct.zip_dirent*, %struct.zip_dirent** %38, align 8
  %40 = icmp eq %struct.zip_dirent* %39, null
  br i1 %40, label %50, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %39, i64 0, i32 14
  %43 = load %struct.zip_string*, %struct.zip_string** %42, align 8
  tail call void @_zip_string_free(%struct.zip_string* %43) #2
  %44 = load %struct.zip_dirent*, %struct.zip_dirent** %38, align 8
  %45 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %44, i64 0, i32 14
  store %struct.zip_string* null, %struct.zip_string** %45, align 8
  %46 = load %struct.zip_dirent*, %struct.zip_dirent** %38, align 8
  %47 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %46, i64 0, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = and i32 %48, -5
  store i32 %49, i32* %47, align 8
  br label %50

50:                                               ; preds = %34, %41
  %51 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %37, i64 %1, i32 0
  %52 = load %struct.zip_dirent*, %struct.zip_dirent** %51, align 8
  %53 = icmp eq %struct.zip_dirent* %52, null
  br i1 %53, label %61, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %52, i64 0, i32 14
  %56 = load %struct.zip_string*, %struct.zip_string** %55, align 8
  %57 = icmp eq %struct.zip_string* %56, null
  br i1 %57, label %61, label %58

58:                                               ; preds = %54
  %59 = tail call i32 @_zip_string_equal(%struct.zip_string* nonnull %56, %struct.zip_string* %35) #2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %63, label %79

61:                                               ; preds = %50, %54
  %62 = icmp eq %struct.zip_string* %35, null
  br i1 %62, label %79, label %63

63:                                               ; preds = %61, %58
  %64 = load %struct.zip_dirent*, %struct.zip_dirent** %38, align 8
  %65 = icmp eq %struct.zip_dirent* %64, null
  br i1 %65, label %66, label %72

66:                                               ; preds = %63
  %67 = load %struct.zip_dirent*, %struct.zip_dirent** %51, align 8
  %68 = tail call %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent* %67) #2
  store %struct.zip_dirent* %68, %struct.zip_dirent** %38, align 8
  %69 = icmp eq %struct.zip_dirent* %68, null
  br i1 %69, label %70, label %72

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %71, i32 14, i32 0) #2
  tail call void @_zip_string_free(%struct.zip_string* %35) #2
  br label %87

72:                                               ; preds = %66, %63
  %73 = phi %struct.zip_dirent* [ %68, %66 ], [ %64, %63 ]
  %74 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %73, i64 0, i32 14
  store %struct.zip_string* %35, %struct.zip_string** %74, align 8
  %75 = load %struct.zip_dirent*, %struct.zip_dirent** %38, align 8
  %76 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %75, i64 0, i32 0
  %77 = load i32, i32* %76, align 8
  %78 = or i32 %77, 4
  store i32 %78, i32* %76, align 8
  br label %87

79:                                               ; preds = %61, %58
  tail call void @_zip_string_free(%struct.zip_string* %35) #2
  %80 = load %struct.zip_dirent*, %struct.zip_dirent** %38, align 8
  %81 = icmp eq %struct.zip_dirent* %80, null
  br i1 %81, label %87, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %80, i64 0, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %82
  tail call void @_zip_dirent_free(%struct.zip_dirent* nonnull %80) #2
  store %struct.zip_dirent* null, %struct.zip_dirent** %38, align 8
  br label %87

87:                                               ; preds = %72, %86, %82, %79, %22, %5, %70, %19, %13
  %88 = phi i32 [ -1, %13 ], [ -1, %19 ], [ -1, %70 ], [ -1, %5 ], [ -1, %22 ], [ 0, %79 ], [ 0, %82 ], [ 0, %86 ], [ 0, %72 ]
  ret i32 %88
}

declare %struct.zip_dirent* @_zip_get_dirent(%struct.zip*, i64, i32, %struct.zip_error*) local_unnamed_addr #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare %struct.zip_string* @_zip_string_new(i8*, i16 zeroext, i32, %struct.zip_error*) local_unnamed_addr #1

declare i32 @_zip_guess_encoding(%struct.zip_string*, i32) local_unnamed_addr #1

declare void @_zip_string_free(%struct.zip_string*) local_unnamed_addr #1

declare i32 @_zip_string_equal(%struct.zip_string*, %struct.zip_string*) local_unnamed_addr #1

declare %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent*) local_unnamed_addr #1

declare void @_zip_dirent_free(%struct.zip_dirent*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
