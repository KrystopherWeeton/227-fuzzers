; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_resize.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_resize.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@filteredinterp_filters1000 = internal unnamed_addr constant [32 x [8 x i16]] [[8 x i16] [i16 0, i16 0, i16 0, i16 128, i16 0, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 1, i16 -3, i16 128, i16 3, i16 -1, i16 0, i16 0], [8 x i16] [i16 -1, i16 2, i16 -6, i16 127, i16 7, i16 -2, i16 1, i16 0], [8 x i16] [i16 -1, i16 3, i16 -9, i16 126, i16 12, i16 -4, i16 1, i16 0], [8 x i16] [i16 -1, i16 4, i16 -12, i16 125, i16 16, i16 -5, i16 1, i16 0], [8 x i16] [i16 -1, i16 4, i16 -14, i16 123, i16 20, i16 -6, i16 2, i16 0], [8 x i16] [i16 -1, i16 5, i16 -15, i16 120, i16 25, i16 -8, i16 2, i16 0], [8 x i16] [i16 -1, i16 5, i16 -17, i16 118, i16 30, i16 -9, i16 3, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -18, i16 114, i16 35, i16 -10, i16 3, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -19, i16 111, i16 41, i16 -12, i16 3, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -20, i16 107, i16 46, i16 -13, i16 4, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -21, i16 103, i16 52, i16 -14, i16 4, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -21, i16 99, i16 57, i16 -16, i16 5, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -21, i16 94, i16 63, i16 -17, i16 5, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -20, i16 89, i16 68, i16 -18, i16 5, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -20, i16 84, i16 73, i16 -19, i16 6, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -20, i16 79, i16 79, i16 -20, i16 6, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -19, i16 73, i16 84, i16 -20, i16 6, i16 -1], [8 x i16] [i16 -1, i16 5, i16 -18, i16 68, i16 89, i16 -20, i16 6, i16 -1], [8 x i16] [i16 -1, i16 5, i16 -17, i16 63, i16 94, i16 -21, i16 6, i16 -1], [8 x i16] [i16 -1, i16 5, i16 -16, i16 57, i16 99, i16 -21, i16 6, i16 -1], [8 x i16] [i16 -1, i16 4, i16 -14, i16 52, i16 103, i16 -21, i16 6, i16 -1], [8 x i16] [i16 -1, i16 4, i16 -13, i16 46, i16 107, i16 -20, i16 6, i16 -1], [8 x i16] [i16 -1, i16 3, i16 -12, i16 41, i16 111, i16 -19, i16 6, i16 -1], [8 x i16] [i16 -1, i16 3, i16 -10, i16 35, i16 114, i16 -18, i16 6, i16 -1], [8 x i16] [i16 -1, i16 3, i16 -9, i16 30, i16 118, i16 -17, i16 5, i16 -1], [8 x i16] [i16 0, i16 2, i16 -8, i16 25, i16 120, i16 -15, i16 5, i16 -1], [8 x i16] [i16 0, i16 2, i16 -6, i16 20, i16 123, i16 -14, i16 4, i16 -1], [8 x i16] [i16 0, i16 1, i16 -5, i16 16, i16 125, i16 -12, i16 4, i16 -1], [8 x i16] [i16 0, i16 1, i16 -4, i16 12, i16 126, i16 -9, i16 3, i16 -1], [8 x i16] [i16 0, i16 1, i16 -2, i16 7, i16 127, i16 -6, i16 2, i16 -1], [8 x i16] [i16 0, i16 0, i16 -1, i16 3, i16 128, i16 -3, i16 1, i16 0]], align 16
@filteredinterp_filters875 = internal unnamed_addr constant [32 x [8 x i16]] [[8 x i16] [i16 3, i16 -8, i16 13, i16 112, i16 13, i16 -8, i16 3, i16 0], [8 x i16] [i16 3, i16 -7, i16 10, i16 112, i16 17, i16 -9, i16 3, i16 -1], [8 x i16] [i16 2, i16 -6, i16 7, i16 111, i16 21, i16 -9, i16 3, i16 -1], [8 x i16] [i16 2, i16 -5, i16 4, i16 111, i16 24, i16 -10, i16 3, i16 -1], [8 x i16] [i16 2, i16 -4, i16 1, i16 110, i16 28, i16 -11, i16 3, i16 -1], [8 x i16] [i16 1, i16 -3, i16 -1, i16 108, i16 32, i16 -12, i16 4, i16 -1], [8 x i16] [i16 1, i16 -2, i16 -3, i16 106, i16 36, i16 -13, i16 4, i16 -1], [8 x i16] [i16 1, i16 -1, i16 -6, i16 105, i16 40, i16 -14, i16 4, i16 -1], [8 x i16] [i16 1, i16 -1, i16 -7, i16 102, i16 44, i16 -14, i16 4, i16 -1], [8 x i16] [i16 1, i16 0, i16 -9, i16 100, i16 48, i16 -15, i16 4, i16 -1], [8 x i16] [i16 1, i16 1, i16 -11, i16 97, i16 53, i16 -16, i16 4, i16 -1], [8 x i16] [i16 0, i16 1, i16 -12, i16 95, i16 57, i16 -16, i16 4, i16 -1], [8 x i16] [i16 0, i16 2, i16 -13, i16 91, i16 61, i16 -16, i16 4, i16 -1], [8 x i16] [i16 0, i16 2, i16 -14, i16 88, i16 65, i16 -16, i16 4, i16 -1], [8 x i16] [i16 0, i16 3, i16 -15, i16 84, i16 69, i16 -17, i16 4, i16 0], [8 x i16] [i16 0, i16 3, i16 -16, i16 81, i16 73, i16 -16, i16 3, i16 0], [8 x i16] [i16 0, i16 3, i16 -16, i16 77, i16 77, i16 -16, i16 3, i16 0], [8 x i16] [i16 0, i16 3, i16 -16, i16 73, i16 81, i16 -16, i16 3, i16 0], [8 x i16] [i16 0, i16 4, i16 -17, i16 69, i16 84, i16 -15, i16 3, i16 0], [8 x i16] [i16 -1, i16 4, i16 -16, i16 65, i16 88, i16 -14, i16 2, i16 0], [8 x i16] [i16 -1, i16 4, i16 -16, i16 61, i16 91, i16 -13, i16 2, i16 0], [8 x i16] [i16 -1, i16 4, i16 -16, i16 57, i16 95, i16 -12, i16 1, i16 0], [8 x i16] [i16 -1, i16 4, i16 -16, i16 53, i16 97, i16 -11, i16 1, i16 1], [8 x i16] [i16 -1, i16 4, i16 -15, i16 48, i16 100, i16 -9, i16 0, i16 1], [8 x i16] [i16 -1, i16 4, i16 -14, i16 44, i16 102, i16 -7, i16 -1, i16 1], [8 x i16] [i16 -1, i16 4, i16 -14, i16 40, i16 105, i16 -6, i16 -1, i16 1], [8 x i16] [i16 -1, i16 4, i16 -13, i16 36, i16 106, i16 -3, i16 -2, i16 1], [8 x i16] [i16 -1, i16 4, i16 -12, i16 32, i16 108, i16 -1, i16 -3, i16 1], [8 x i16] [i16 -1, i16 3, i16 -11, i16 28, i16 110, i16 1, i16 -4, i16 2], [8 x i16] [i16 -1, i16 3, i16 -10, i16 24, i16 111, i16 4, i16 -5, i16 2], [8 x i16] [i16 -1, i16 3, i16 -9, i16 21, i16 111, i16 7, i16 -6, i16 2], [8 x i16] [i16 -1, i16 3, i16 -9, i16 17, i16 112, i16 10, i16 -7, i16 3]], align 16
@filteredinterp_filters750 = internal unnamed_addr constant [32 x [8 x i16]] [[8 x i16] [i16 2, i16 -11, i16 25, i16 96, i16 25, i16 -11, i16 2, i16 0], [8 x i16] [i16 2, i16 -11, i16 22, i16 96, i16 28, i16 -11, i16 2, i16 0], [8 x i16] [i16 2, i16 -10, i16 19, i16 95, i16 31, i16 -11, i16 2, i16 0], [8 x i16] [i16 2, i16 -10, i16 17, i16 95, i16 34, i16 -12, i16 2, i16 0], [8 x i16] [i16 2, i16 -9, i16 14, i16 94, i16 37, i16 -12, i16 2, i16 0], [8 x i16] [i16 2, i16 -8, i16 12, i16 93, i16 40, i16 -12, i16 1, i16 0], [8 x i16] [i16 2, i16 -8, i16 9, i16 92, i16 43, i16 -12, i16 1, i16 1], [8 x i16] [i16 2, i16 -7, i16 7, i16 91, i16 46, i16 -12, i16 1, i16 0], [8 x i16] [i16 2, i16 -7, i16 5, i16 90, i16 49, i16 -12, i16 1, i16 0], [8 x i16] [i16 2, i16 -6, i16 3, i16 88, i16 52, i16 -12, i16 0, i16 1], [8 x i16] [i16 2, i16 -5, i16 1, i16 86, i16 55, i16 -12, i16 0, i16 1], [8 x i16] [i16 2, i16 -5, i16 -1, i16 84, i16 58, i16 -11, i16 0, i16 1], [8 x i16] [i16 2, i16 -4, i16 -2, i16 82, i16 61, i16 -11, i16 -1, i16 1], [8 x i16] [i16 2, i16 -4, i16 -4, i16 80, i16 64, i16 -10, i16 -1, i16 1], [8 x i16] [i16 1, i16 -3, i16 -5, i16 77, i16 67, i16 -9, i16 -1, i16 1], [8 x i16] [i16 1, i16 -3, i16 -6, i16 75, i16 70, i16 -8, i16 -2, i16 1], [8 x i16] [i16 1, i16 -2, i16 -7, i16 72, i16 72, i16 -7, i16 -2, i16 1], [8 x i16] [i16 1, i16 -2, i16 -8, i16 70, i16 75, i16 -6, i16 -3, i16 1], [8 x i16] [i16 1, i16 -1, i16 -9, i16 67, i16 77, i16 -5, i16 -3, i16 1], [8 x i16] [i16 1, i16 -1, i16 -10, i16 64, i16 80, i16 -4, i16 -4, i16 2], [8 x i16] [i16 1, i16 -1, i16 -11, i16 61, i16 82, i16 -2, i16 -4, i16 2], [8 x i16] [i16 1, i16 0, i16 -11, i16 58, i16 84, i16 -1, i16 -5, i16 2], [8 x i16] [i16 1, i16 0, i16 -12, i16 55, i16 86, i16 1, i16 -5, i16 2], [8 x i16] [i16 1, i16 0, i16 -12, i16 52, i16 88, i16 3, i16 -6, i16 2], [8 x i16] [i16 0, i16 1, i16 -12, i16 49, i16 90, i16 5, i16 -7, i16 2], [8 x i16] [i16 0, i16 1, i16 -12, i16 46, i16 91, i16 7, i16 -7, i16 2], [8 x i16] [i16 1, i16 1, i16 -12, i16 43, i16 92, i16 9, i16 -8, i16 2], [8 x i16] [i16 0, i16 1, i16 -12, i16 40, i16 93, i16 12, i16 -8, i16 2], [8 x i16] [i16 0, i16 2, i16 -12, i16 37, i16 94, i16 14, i16 -9, i16 2], [8 x i16] [i16 0, i16 2, i16 -12, i16 34, i16 95, i16 17, i16 -10, i16 2], [8 x i16] [i16 0, i16 2, i16 -11, i16 31, i16 95, i16 19, i16 -10, i16 2], [8 x i16] [i16 0, i16 2, i16 -11, i16 28, i16 96, i16 22, i16 -11, i16 2]], align 16
@filteredinterp_filters625 = internal unnamed_addr constant [32 x [8 x i16]] [[8 x i16] [i16 -1, i16 -8, i16 33, i16 80, i16 33, i16 -8, i16 -1, i16 0], [8 x i16] [i16 -1, i16 -8, i16 30, i16 80, i16 35, i16 -8, i16 -1, i16 1], [8 x i16] [i16 -1, i16 -8, i16 28, i16 80, i16 37, i16 -7, i16 -2, i16 1], [8 x i16] [i16 0, i16 -8, i16 26, i16 79, i16 39, i16 -7, i16 -2, i16 1], [8 x i16] [i16 0, i16 -8, i16 24, i16 79, i16 41, i16 -7, i16 -2, i16 1], [8 x i16] [i16 0, i16 -8, i16 22, i16 78, i16 43, i16 -6, i16 -2, i16 1], [8 x i16] [i16 0, i16 -8, i16 20, i16 78, i16 45, i16 -5, i16 -3, i16 1], [8 x i16] [i16 0, i16 -8, i16 18, i16 77, i16 48, i16 -5, i16 -3, i16 1], [8 x i16] [i16 0, i16 -8, i16 16, i16 76, i16 50, i16 -4, i16 -3, i16 1], [8 x i16] [i16 0, i16 -8, i16 15, i16 75, i16 52, i16 -3, i16 -4, i16 1], [8 x i16] [i16 0, i16 -7, i16 13, i16 74, i16 54, i16 -3, i16 -4, i16 1], [8 x i16] [i16 0, i16 -7, i16 11, i16 73, i16 56, i16 -2, i16 -4, i16 1], [8 x i16] [i16 0, i16 -7, i16 10, i16 71, i16 58, i16 -1, i16 -4, i16 1], [8 x i16] [i16 1, i16 -7, i16 8, i16 70, i16 60, i16 0, i16 -5, i16 1], [8 x i16] [i16 1, i16 -6, i16 6, i16 68, i16 62, i16 1, i16 -5, i16 1], [8 x i16] [i16 1, i16 -6, i16 5, i16 67, i16 63, i16 2, i16 -5, i16 1], [8 x i16] [i16 1, i16 -6, i16 4, i16 65, i16 65, i16 4, i16 -6, i16 1], [8 x i16] [i16 1, i16 -5, i16 2, i16 63, i16 67, i16 5, i16 -6, i16 1], [8 x i16] [i16 1, i16 -5, i16 1, i16 62, i16 68, i16 6, i16 -6, i16 1], [8 x i16] [i16 1, i16 -5, i16 0, i16 60, i16 70, i16 8, i16 -7, i16 1], [8 x i16] [i16 1, i16 -4, i16 -1, i16 58, i16 71, i16 10, i16 -7, i16 0], [8 x i16] [i16 1, i16 -4, i16 -2, i16 56, i16 73, i16 11, i16 -7, i16 0], [8 x i16] [i16 1, i16 -4, i16 -3, i16 54, i16 74, i16 13, i16 -7, i16 0], [8 x i16] [i16 1, i16 -4, i16 -3, i16 52, i16 75, i16 15, i16 -8, i16 0], [8 x i16] [i16 1, i16 -3, i16 -4, i16 50, i16 76, i16 16, i16 -8, i16 0], [8 x i16] [i16 1, i16 -3, i16 -5, i16 48, i16 77, i16 18, i16 -8, i16 0], [8 x i16] [i16 1, i16 -3, i16 -5, i16 45, i16 78, i16 20, i16 -8, i16 0], [8 x i16] [i16 1, i16 -2, i16 -6, i16 43, i16 78, i16 22, i16 -8, i16 0], [8 x i16] [i16 1, i16 -2, i16 -7, i16 41, i16 79, i16 24, i16 -8, i16 0], [8 x i16] [i16 1, i16 -2, i16 -7, i16 39, i16 79, i16 26, i16 -8, i16 0], [8 x i16] [i16 1, i16 -2, i16 -7, i16 37, i16 80, i16 28, i16 -8, i16 -1], [8 x i16] [i16 1, i16 -1, i16 -8, i16 35, i16 80, i16 30, i16 -8, i16 -1]], align 16
@filteredinterp_filters500 = internal unnamed_addr constant [32 x [8 x i16]] [[8 x i16] [i16 -3, i16 0, i16 35, i16 64, i16 35, i16 0, i16 -3, i16 0], [8 x i16] [i16 -3, i16 -1, i16 34, i16 64, i16 36, i16 1, i16 -3, i16 0], [8 x i16] [i16 -3, i16 -1, i16 32, i16 64, i16 38, i16 1, i16 -3, i16 0], [8 x i16] [i16 -2, i16 -2, i16 31, i16 63, i16 39, i16 2, i16 -3, i16 0], [8 x i16] [i16 -2, i16 -2, i16 29, i16 63, i16 41, i16 2, i16 -3, i16 0], [8 x i16] [i16 -2, i16 -2, i16 28, i16 63, i16 42, i16 3, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -3, i16 27, i16 63, i16 43, i16 4, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -3, i16 25, i16 62, i16 45, i16 5, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -3, i16 24, i16 62, i16 46, i16 5, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -3, i16 23, i16 61, i16 47, i16 6, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -3, i16 21, i16 60, i16 49, i16 7, i16 -4, i16 0], [8 x i16] [i16 -1, i16 -4, i16 20, i16 60, i16 50, i16 8, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 19, i16 59, i16 51, i16 9, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 17, i16 58, i16 52, i16 10, i16 -4, i16 0], [8 x i16] [i16 -1, i16 -4, i16 16, i16 57, i16 53, i16 12, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 15, i16 56, i16 54, i16 13, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 14, i16 55, i16 55, i16 14, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 13, i16 54, i16 56, i16 15, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 12, i16 53, i16 57, i16 16, i16 -4, i16 -1], [8 x i16] [i16 0, i16 -4, i16 10, i16 52, i16 58, i16 17, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 9, i16 51, i16 59, i16 19, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 8, i16 50, i16 60, i16 20, i16 -4, i16 -1], [8 x i16] [i16 0, i16 -4, i16 7, i16 49, i16 60, i16 21, i16 -3, i16 -2], [8 x i16] [i16 0, i16 -4, i16 6, i16 47, i16 61, i16 23, i16 -3, i16 -2], [8 x i16] [i16 0, i16 -4, i16 5, i16 46, i16 62, i16 24, i16 -3, i16 -2], [8 x i16] [i16 0, i16 -4, i16 5, i16 45, i16 62, i16 25, i16 -3, i16 -2], [8 x i16] [i16 0, i16 -4, i16 4, i16 43, i16 63, i16 27, i16 -3, i16 -2], [8 x i16] [i16 0, i16 -4, i16 3, i16 42, i16 63, i16 28, i16 -2, i16 -2], [8 x i16] [i16 0, i16 -3, i16 2, i16 41, i16 63, i16 29, i16 -2, i16 -2], [8 x i16] [i16 0, i16 -3, i16 2, i16 39, i16 63, i16 31, i16 -2, i16 -2], [8 x i16] [i16 0, i16 -3, i16 1, i16 38, i16 64, i16 32, i16 -1, i16 -3], [8 x i16] [i16 0, i16 -3, i16 1, i16 36, i16 64, i16 34, i16 -1, i16 -3]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_resize_plane(i8* readonly, i32, i32, i32, i8* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  %9 = mul nsw i32 %6, %1
  %10 = sext i32 %9 to i64
  %11 = tail call noalias i8* @calloc(i64 %10, i64 1) #5
  %12 = icmp slt i32 %2, %1
  %13 = select i1 %12, i32 %1, i32 %2
  %14 = sext i32 %13 to i64
  %15 = tail call noalias i8* @calloc(i64 %14, i64 1) #5
  %16 = sext i32 %1 to i64
  %17 = tail call noalias i8* @calloc(i64 %16, i64 1) #5
  %18 = sext i32 %5 to i64
  %19 = tail call noalias i8* @calloc(i64 %18, i64 1) #5
  %20 = icmp eq i8* %11, null
  %21 = icmp eq i8* %15, null
  %22 = or i1 %20, %21
  %23 = icmp eq i8* %17, null
  %24 = or i1 %22, %23
  %25 = icmp eq i8* %19, null
  %26 = or i1 %24, %25
  br i1 %26, label %152, label %27

27:                                               ; preds = %8
  %28 = icmp sgt i32 %1, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %27
  %30 = sext i32 %6 to i64
  %31 = sext i32 %3 to i64
  %32 = zext i32 %1 to i64
  br label %50

33:                                               ; preds = %50, %27
  %34 = icmp sgt i32 %6, 0
  br i1 %34, label %35, label %152

35:                                               ; preds = %33
  %36 = sext i32 %6 to i64
  %37 = icmp sgt i32 %5, 0
  %38 = sext i32 %7 to i64
  %39 = zext i32 %6 to i64
  %40 = add i32 %1, -1
  %41 = add i32 %5, -1
  %42 = and i32 %1, 7
  %43 = icmp ult i32 %40, 7
  %44 = sub i32 %1, %42
  %45 = icmp eq i32 %42, 0
  %46 = and i32 %5, 7
  %47 = icmp ult i32 %41, 7
  %48 = sub i32 %5, %46
  %49 = icmp eq i32 %46, 0
  br label %58

50:                                               ; preds = %50, %29
  %51 = phi i64 [ 0, %29 ], [ %56, %50 ]
  %52 = mul nsw i64 %51, %31
  %53 = getelementptr inbounds i8, i8* %0, i64 %52
  %54 = mul nsw i64 %51, %30
  %55 = getelementptr inbounds i8, i8* %11, i64 %54
  tail call fastcc void @resize_multistep(i8* %53, i32 %2, i8* %55, i32 %6, i8* %15)
  %56 = add nuw nsw i64 %51, 1
  %57 = icmp eq i64 %56, %32
  br i1 %57, label %33, label %50

58:                                               ; preds = %149, %35
  %59 = phi i64 [ 0, %35 ], [ %150, %149 ]
  br i1 %28, label %60, label %104

60:                                               ; preds = %58
  %61 = getelementptr inbounds i8, i8* %11, i64 %59
  br i1 %43, label %92, label %62

62:                                               ; preds = %60, %62
  %63 = phi i8* [ %88, %62 ], [ %17, %60 ]
  %64 = phi i8* [ %89, %62 ], [ %61, %60 ]
  %65 = phi i32 [ %90, %62 ], [ %44, %60 ]
  %66 = load i8, i8* %64, align 1
  %67 = getelementptr inbounds i8, i8* %63, i64 1
  store i8 %66, i8* %63, align 1
  %68 = getelementptr inbounds i8, i8* %64, i64 %36
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds i8, i8* %63, i64 2
  store i8 %69, i8* %67, align 1
  %71 = getelementptr inbounds i8, i8* %68, i64 %36
  %72 = load i8, i8* %71, align 1
  %73 = getelementptr inbounds i8, i8* %63, i64 3
  store i8 %72, i8* %70, align 1
  %74 = getelementptr inbounds i8, i8* %71, i64 %36
  %75 = load i8, i8* %74, align 1
  %76 = getelementptr inbounds i8, i8* %63, i64 4
  store i8 %75, i8* %73, align 1
  %77 = getelementptr inbounds i8, i8* %74, i64 %36
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds i8, i8* %63, i64 5
  store i8 %78, i8* %76, align 1
  %80 = getelementptr inbounds i8, i8* %77, i64 %36
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds i8, i8* %63, i64 6
  store i8 %81, i8* %79, align 1
  %83 = getelementptr inbounds i8, i8* %80, i64 %36
  %84 = load i8, i8* %83, align 1
  %85 = getelementptr inbounds i8, i8* %63, i64 7
  store i8 %84, i8* %82, align 1
  %86 = getelementptr inbounds i8, i8* %83, i64 %36
  %87 = load i8, i8* %86, align 1
  %88 = getelementptr inbounds i8, i8* %63, i64 8
  store i8 %87, i8* %85, align 1
  %89 = getelementptr inbounds i8, i8* %86, i64 %36
  %90 = add i32 %65, -8
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %62

92:                                               ; preds = %62, %60
  %93 = phi i8* [ %17, %60 ], [ %88, %62 ]
  %94 = phi i8* [ %61, %60 ], [ %89, %62 ]
  br i1 %45, label %104, label %95

95:                                               ; preds = %92, %95
  %96 = phi i8* [ %100, %95 ], [ %93, %92 ]
  %97 = phi i8* [ %101, %95 ], [ %94, %92 ]
  %98 = phi i32 [ %102, %95 ], [ %42, %92 ]
  %99 = load i8, i8* %97, align 1
  %100 = getelementptr inbounds i8, i8* %96, i64 1
  store i8 %99, i8* %96, align 1
  %101 = getelementptr inbounds i8, i8* %97, i64 %36
  %102 = add i32 %98, -1
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %95, !llvm.loop !2

104:                                              ; preds = %92, %95, %58
  tail call fastcc void @resize_multistep(i8* %17, i32 %1, i8* %19, i32 %5, i8* %15)
  br i1 %37, label %105, label %149

105:                                              ; preds = %104
  %106 = getelementptr inbounds i8, i8* %4, i64 %59
  br i1 %47, label %137, label %107

107:                                              ; preds = %105, %107
  %108 = phi i8* [ %132, %107 ], [ %19, %105 ]
  %109 = phi i8* [ %134, %107 ], [ %106, %105 ]
  %110 = phi i32 [ %135, %107 ], [ %48, %105 ]
  %111 = getelementptr inbounds i8, i8* %108, i64 1
  %112 = load i8, i8* %108, align 1
  store i8 %112, i8* %109, align 1
  %113 = getelementptr inbounds i8, i8* %109, i64 %38
  %114 = getelementptr inbounds i8, i8* %108, i64 2
  %115 = load i8, i8* %111, align 1
  store i8 %115, i8* %113, align 1
  %116 = getelementptr inbounds i8, i8* %113, i64 %38
  %117 = getelementptr inbounds i8, i8* %108, i64 3
  %118 = load i8, i8* %114, align 1
  store i8 %118, i8* %116, align 1
  %119 = getelementptr inbounds i8, i8* %116, i64 %38
  %120 = getelementptr inbounds i8, i8* %108, i64 4
  %121 = load i8, i8* %117, align 1
  store i8 %121, i8* %119, align 1
  %122 = getelementptr inbounds i8, i8* %119, i64 %38
  %123 = getelementptr inbounds i8, i8* %108, i64 5
  %124 = load i8, i8* %120, align 1
  store i8 %124, i8* %122, align 1
  %125 = getelementptr inbounds i8, i8* %122, i64 %38
  %126 = getelementptr inbounds i8, i8* %108, i64 6
  %127 = load i8, i8* %123, align 1
  store i8 %127, i8* %125, align 1
  %128 = getelementptr inbounds i8, i8* %125, i64 %38
  %129 = getelementptr inbounds i8, i8* %108, i64 7
  %130 = load i8, i8* %126, align 1
  store i8 %130, i8* %128, align 1
  %131 = getelementptr inbounds i8, i8* %128, i64 %38
  %132 = getelementptr inbounds i8, i8* %108, i64 8
  %133 = load i8, i8* %129, align 1
  store i8 %133, i8* %131, align 1
  %134 = getelementptr inbounds i8, i8* %131, i64 %38
  %135 = add i32 %110, -8
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %107

137:                                              ; preds = %107, %105
  %138 = phi i8* [ %19, %105 ], [ %132, %107 ]
  %139 = phi i8* [ %106, %105 ], [ %134, %107 ]
  br i1 %49, label %149, label %140

140:                                              ; preds = %137, %140
  %141 = phi i8* [ %144, %140 ], [ %138, %137 ]
  %142 = phi i8* [ %146, %140 ], [ %139, %137 ]
  %143 = phi i32 [ %147, %140 ], [ %46, %137 ]
  %144 = getelementptr inbounds i8, i8* %141, i64 1
  %145 = load i8, i8* %141, align 1
  store i8 %145, i8* %142, align 1
  %146 = getelementptr inbounds i8, i8* %142, i64 %38
  %147 = add i32 %143, -1
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %140, !llvm.loop !4

149:                                              ; preds = %137, %140, %104
  %150 = add nuw nsw i64 %59, 1
  %151 = icmp eq i64 %150, %39
  br i1 %151, label %152, label %58

152:                                              ; preds = %149, %33, %8
  tail call void @free(i8* %11) #5
  tail call void @free(i8* %15) #5
  tail call void @free(i8* %17) #5
  tail call void @free(i8* %19) #5
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @resize_multistep(i8* readonly, i32, i8*, i32, i8*) unnamed_addr #0 {
  %6 = icmp eq i32 %1, %3
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = sext i32 %1 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %0, i64 %8, i1 false)
  br label %553

9:                                                ; preds = %5, %9
  %10 = phi i32 [ %13, %9 ], [ %1, %5 ]
  %11 = phi i32 [ %15, %9 ], [ 0, %5 ]
  %12 = add nsw i32 %10, 1
  %13 = ashr i32 %12, 1
  %14 = icmp slt i32 %13, %3
  %15 = add nuw nsw i32 %11, 1
  br i1 %14, label %16, label %9

16:                                               ; preds = %9
  %17 = icmp eq i32 %11, 0
  br i1 %17, label %552, label %18

18:                                               ; preds = %16
  %19 = add nsw i32 %1, 1
  %20 = ashr i32 %19, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %4, i64 %21
  %23 = add nsw i32 %11, -1
  br label %24

24:                                               ; preds = %546, %18
  %25 = phi i32 [ %1, %18 ], [ %29, %546 ]
  %26 = phi i8* [ null, %18 ], [ %40, %546 ]
  %27 = phi i32 [ 0, %18 ], [ %547, %546 ]
  %28 = add nsw i32 %25, 1
  %29 = ashr i32 %28, 1
  %30 = icmp eq i32 %27, 0
  %31 = select i1 %30, i8* %0, i8* %26
  %32 = icmp eq i32 %27, %23
  %33 = icmp eq i32 %29, %3
  %34 = and i1 %32, %33
  br i1 %34, label %39, label %35

35:                                               ; preds = %24
  %36 = and i32 %27, 1
  %37 = icmp eq i32 %36, 0
  %38 = select i1 %37, i8* %4, i8* %22
  br label %39

39:                                               ; preds = %24, %35
  %40 = phi i8* [ %38, %35 ], [ %2, %24 ]
  %41 = and i32 %25, 1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %257, label %43

43:                                               ; preds = %39
  %44 = add nsw i32 %25, -3
  %45 = and i32 %44, 1
  %46 = add nsw i32 %45, %44
  %47 = icmp slt i32 %46, 4
  br i1 %47, label %100, label %48

48:                                               ; preds = %43
  %49 = load i8, i8* %31, align 1
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 6
  %52 = add nuw nsw i32 %51, 64
  %53 = getelementptr inbounds i8, i8* %31, i64 1
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = add nuw nsw i32 %55, %50
  %57 = mul nuw nsw i32 %56, 35
  %58 = add nuw nsw i32 %52, %57
  %59 = getelementptr inbounds i8, i8* %31, i64 2
  %60 = getelementptr inbounds i8, i8* %31, i64 3
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = add nuw nsw i32 %62, %50
  %64 = mul nsw i32 %63, -3
  %65 = add nsw i32 %58, %64
  %66 = ashr i32 %65, 7
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  %69 = icmp slt i32 %68, 255
  %70 = select i1 %69, i32 %68, i32 255
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds i8, i8* %40, i64 1
  store i8 %71, i8* %40, align 1
  %73 = load i8, i8* %59, align 1
  %74 = zext i8 %73 to i32
  %75 = shl nuw nsw i32 %74, 6
  %76 = add nuw nsw i32 %75, 64
  %77 = load i8, i8* %53, align 1
  %78 = zext i8 %77 to i32
  %79 = load i8, i8* %60, align 1
  %80 = zext i8 %79 to i32
  %81 = add nuw nsw i32 %80, %78
  %82 = mul nuw nsw i32 %81, 35
  %83 = add nuw nsw i32 %76, %82
  %84 = load i8, i8* %31, align 1
  %85 = zext i8 %84 to i32
  %86 = getelementptr inbounds i8, i8* %31, i64 5
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = add nuw nsw i32 %88, %85
  %90 = mul nsw i32 %89, -3
  %91 = add nsw i32 %83, %90
  %92 = ashr i32 %91, 7
  %93 = icmp sgt i32 %92, 0
  %94 = select i1 %93, i32 %92, i32 0
  %95 = icmp slt i32 %94, 255
  %96 = select i1 %95, i32 %94, i32 255
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds i8, i8* %40, i64 2
  store i8 %97, i8* %72, align 1
  %99 = icmp eq i32 %46, 4
  br i1 %99, label %162, label %158

100:                                              ; preds = %43
  %101 = icmp sgt i32 %25, 0
  br i1 %101, label %102, label %546

102:                                              ; preds = %100
  %103 = add nsw i32 %25, -1
  %104 = sext i32 %25 to i64
  br label %105

105:                                              ; preds = %105, %102
  %106 = phi i64 [ 0, %102 ], [ %131, %105 ]
  %107 = phi i8* [ %40, %102 ], [ %157, %105 ]
  %108 = getelementptr inbounds i8, i8* %31, i64 %106
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = shl nuw nsw i32 %110, 6
  %112 = add nuw nsw i32 %111, 64
  %113 = icmp eq i64 %106, 0
  %114 = add nuw nsw i64 %106, 4294967295
  %115 = and i64 %114, 4294967295
  %116 = select i1 %113, i64 0, i64 %115
  %117 = getelementptr inbounds i8, i8* %31, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = or i64 %106, 1
  %121 = icmp slt i64 %120, %104
  %122 = trunc i64 %120 to i32
  %123 = select i1 %121, i32 %122, i32 %103
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i8, i8* %31, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = add nuw nsw i32 %127, %119
  %129 = mul nuw nsw i32 %128, 35
  %130 = add nuw nsw i32 %112, %129
  %131 = add nuw nsw i64 %106, 2
  %132 = icmp slt i64 %131, %104
  %133 = icmp ugt i64 %106, 3
  %134 = select i1 %133, i64 %106, i64 3
  %135 = add nuw i64 %134, 4294967293
  %136 = and i64 %135, 4294967295
  %137 = getelementptr inbounds i8, i8* %31, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = add nuw nsw i64 %106, 3
  %141 = icmp slt i64 %140, %104
  %142 = trunc i64 %140 to i32
  %143 = select i1 %141, i32 %142, i32 %103
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %31, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = add nuw nsw i32 %147, %139
  %149 = mul nsw i32 %148, -3
  %150 = add nsw i32 %130, %149
  %151 = ashr i32 %150, 7
  %152 = icmp sgt i32 %151, 0
  %153 = select i1 %152, i32 %151, i32 0
  %154 = icmp slt i32 %153, 255
  %155 = select i1 %154, i32 %153, i32 255
  %156 = trunc i32 %155 to i8
  %157 = getelementptr inbounds i8, i8* %107, i64 1
  store i8 %156, i8* %107, align 1
  br i1 %132, label %105, label %546

158:                                              ; preds = %48
  %159 = sext i32 %46 to i64
  br label %170

160:                                              ; preds = %170
  %161 = trunc i64 %189 to i32
  br label %162

162:                                              ; preds = %160, %48
  %163 = phi i32 [ 4, %48 ], [ %161, %160 ]
  %164 = phi i8* [ %98, %48 ], [ %207, %160 ]
  %165 = icmp slt i32 %163, %25
  br i1 %165, label %166, label %546

166:                                              ; preds = %162
  %167 = add nsw i32 %25, -1
  %168 = zext i32 %163 to i64
  %169 = sext i32 %25 to i64
  br label %209

170:                                              ; preds = %170, %158
  %171 = phi i64 [ 4, %158 ], [ %189, %170 ]
  %172 = phi i8* [ %98, %158 ], [ %207, %170 ]
  %173 = getelementptr inbounds i8, i8* %31, i64 %171
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = shl nuw nsw i32 %175, 6
  %177 = add nuw nsw i32 %176, 64
  %178 = add nsw i64 %171, -1
  %179 = getelementptr inbounds i8, i8* %31, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = or i64 %171, 1
  %183 = getelementptr inbounds i8, i8* %31, i64 %182
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = add nuw nsw i32 %185, %181
  %187 = mul nuw nsw i32 %186, 35
  %188 = add nuw nsw i32 %177, %187
  %189 = add nuw nsw i64 %171, 2
  %190 = add nsw i64 %171, -3
  %191 = getelementptr inbounds i8, i8* %31, i64 %190
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i32
  %194 = add nuw nsw i64 %171, 3
  %195 = getelementptr inbounds i8, i8* %31, i64 %194
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i32
  %198 = add nuw nsw i32 %197, %193
  %199 = mul nsw i32 %198, -3
  %200 = add nsw i32 %188, %199
  %201 = ashr i32 %200, 7
  %202 = icmp sgt i32 %201, 0
  %203 = select i1 %202, i32 %201, i32 0
  %204 = icmp slt i32 %203, 255
  %205 = select i1 %204, i32 %203, i32 255
  %206 = trunc i32 %205 to i8
  %207 = getelementptr inbounds i8, i8* %172, i64 1
  store i8 %206, i8* %172, align 1
  %208 = icmp slt i64 %189, %159
  br i1 %208, label %170, label %160

209:                                              ; preds = %209, %166
  %210 = phi i64 [ %168, %166 ], [ %232, %209 ]
  %211 = phi i8* [ %164, %166 ], [ %256, %209 ]
  %212 = getelementptr inbounds i8, i8* %31, i64 %210
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = shl nuw nsw i32 %214, 6
  %216 = add nuw nsw i32 %215, 64
  %217 = add nsw i64 %210, -1
  %218 = getelementptr inbounds i8, i8* %31, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = trunc i64 %210 to i32
  %222 = add i32 %221, 1
  %223 = icmp slt i32 %222, %25
  %224 = select i1 %223, i32 %222, i32 %167
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds i8, i8* %31, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = add nuw nsw i32 %228, %220
  %230 = mul nuw nsw i32 %229, 35
  %231 = add nuw nsw i32 %216, %230
  %232 = add nuw nsw i64 %210, 2
  %233 = icmp slt i64 %232, %169
  %234 = shl i64 %210, 32
  %235 = add i64 %234, -12884901888
  %236 = ashr exact i64 %235, 32
  %237 = getelementptr inbounds i8, i8* %31, i64 %236
  %238 = load i8, i8* %237, align 1
  %239 = zext i8 %238 to i32
  %240 = add i32 %221, 3
  %241 = icmp slt i32 %240, %25
  %242 = select i1 %241, i32 %240, i32 %167
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds i8, i8* %31, i64 %243
  %245 = load i8, i8* %244, align 1
  %246 = zext i8 %245 to i32
  %247 = add nuw nsw i32 %246, %239
  %248 = mul nsw i32 %247, -3
  %249 = add nsw i32 %231, %248
  %250 = ashr i32 %249, 7
  %251 = icmp sgt i32 %250, 0
  %252 = select i1 %251, i32 %250, i32 0
  %253 = icmp slt i32 %252, 255
  %254 = select i1 %253, i32 %252, i32 255
  %255 = trunc i32 %254 to i8
  %256 = getelementptr inbounds i8, i8* %211, i64 1
  store i8 %255, i8* %211, align 1
  br i1 %233, label %209, label %546

257:                                              ; preds = %39
  %258 = add nsw i32 %25, -4
  %259 = and i32 %258, 1
  %260 = add nsw i32 %259, %258
  %261 = icmp slt i32 %260, 4
  br i1 %261, label %330, label %262

262:                                              ; preds = %257
  %263 = load i8, i8* %31, align 1
  %264 = zext i8 %263 to i32
  %265 = getelementptr inbounds i8, i8* %31, i64 1
  %266 = load i8, i8* %265, align 1
  %267 = zext i8 %266 to i32
  %268 = add nuw nsw i32 %267, %264
  %269 = mul nuw nsw i32 %268, 56
  %270 = getelementptr inbounds i8, i8* %31, i64 2
  %271 = load i8, i8* %270, align 1
  %272 = zext i8 %271 to i32
  %273 = add nuw nsw i32 %272, %264
  %274 = mul nuw nsw i32 %273, 12
  %275 = getelementptr inbounds i8, i8* %31, i64 3
  %276 = load i8, i8* %275, align 1
  %277 = zext i8 %276 to i32
  %278 = add nuw nsw i32 %277, %264
  %279 = mul nsw i32 %278, -3
  %280 = getelementptr inbounds i8, i8* %31, i64 4
  %281 = load i8, i8* %280, align 1
  %282 = zext i8 %281 to i32
  %283 = sub nsw i32 64, %264
  %284 = add nsw i32 %283, %269
  %285 = add nsw i32 %284, %274
  %286 = sub nsw i32 %285, %282
  %287 = add nsw i32 %286, %279
  %288 = ashr i32 %287, 7
  %289 = icmp sgt i32 %288, 0
  %290 = select i1 %289, i32 %288, i32 0
  %291 = icmp slt i32 %290, 255
  %292 = select i1 %291, i32 %290, i32 255
  %293 = trunc i32 %292 to i8
  %294 = getelementptr inbounds i8, i8* %40, i64 1
  store i8 %293, i8* %40, align 1
  %295 = load i8, i8* %270, align 1
  %296 = zext i8 %295 to i32
  %297 = load i8, i8* %275, align 1
  %298 = zext i8 %297 to i32
  %299 = add nuw nsw i32 %298, %296
  %300 = mul nuw nsw i32 %299, 56
  %301 = load i8, i8* %265, align 1
  %302 = zext i8 %301 to i32
  %303 = load i8, i8* %280, align 1
  %304 = zext i8 %303 to i32
  %305 = add nuw nsw i32 %304, %302
  %306 = mul nuw nsw i32 %305, 12
  %307 = load i8, i8* %31, align 1
  %308 = zext i8 %307 to i32
  %309 = getelementptr inbounds i8, i8* %31, i64 5
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i32
  %312 = add nuw nsw i32 %311, %308
  %313 = mul nsw i32 %312, -3
  %314 = getelementptr inbounds i8, i8* %31, i64 6
  %315 = load i8, i8* %314, align 1
  %316 = zext i8 %315 to i32
  %317 = add nuw nsw i32 %300, 64
  %318 = sub nsw i32 %317, %308
  %319 = add nsw i32 %318, %306
  %320 = sub nsw i32 %319, %316
  %321 = add nsw i32 %320, %313
  %322 = ashr i32 %321, 7
  %323 = icmp sgt i32 %322, 0
  %324 = select i1 %323, i32 %322, i32 0
  %325 = icmp slt i32 %324, 255
  %326 = select i1 %325, i32 %324, i32 255
  %327 = trunc i32 %326 to i8
  %328 = getelementptr inbounds i8, i8* %40, i64 2
  store i8 %327, i8* %294, align 1
  %329 = icmp eq i32 %260, 4
  br i1 %329, label %471, label %413

330:                                              ; preds = %257
  %331 = icmp sgt i32 %25, 0
  br i1 %331, label %332, label %546

332:                                              ; preds = %330
  %333 = add nsw i32 %25, -1
  %334 = sext i32 %25 to i64
  br label %335

335:                                              ; preds = %335, %332
  %336 = phi i64 [ 0, %332 ], [ %411, %335 ]
  %337 = phi i8* [ %40, %332 ], [ %410, %335 ]
  %338 = or i64 %336, 1
  %339 = getelementptr inbounds i8, i8* %31, i64 %336
  %340 = load i8, i8* %339, align 1
  %341 = zext i8 %340 to i32
  %342 = icmp slt i64 %338, %334
  %343 = trunc i64 %338 to i32
  %344 = select i1 %342, i32 %343, i32 %333
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds i8, i8* %31, i64 %345
  %347 = load i8, i8* %346, align 1
  %348 = zext i8 %347 to i32
  %349 = add nuw nsw i32 %348, %341
  %350 = mul nuw nsw i32 %349, 56
  %351 = icmp eq i64 %336, 0
  %352 = add nuw nsw i64 %336, 4294967295
  %353 = and i64 %352, 4294967295
  %354 = select i1 %351, i64 0, i64 %353
  %355 = getelementptr inbounds i8, i8* %31, i64 %354
  %356 = load i8, i8* %355, align 1
  %357 = zext i8 %356 to i32
  %358 = add nuw nsw i64 %338, 1
  %359 = icmp slt i64 %358, %334
  %360 = trunc i64 %358 to i32
  %361 = select i1 %359, i32 %360, i32 %333
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds i8, i8* %31, i64 %362
  %364 = load i8, i8* %363, align 1
  %365 = zext i8 %364 to i32
  %366 = add nuw nsw i32 %365, %357
  %367 = mul nuw nsw i32 %366, 12
  %368 = icmp ugt i64 %336, 2
  %369 = select i1 %368, i64 %336, i64 2
  %370 = add nuw i64 %369, 4294967294
  %371 = and i64 %370, 4294967295
  %372 = getelementptr inbounds i8, i8* %31, i64 %371
  %373 = load i8, i8* %372, align 1
  %374 = zext i8 %373 to i32
  %375 = add nuw nsw i64 %338, 2
  %376 = icmp slt i64 %375, %334
  %377 = trunc i64 %375 to i32
  %378 = select i1 %376, i32 %377, i32 %333
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds i8, i8* %31, i64 %379
  %381 = load i8, i8* %380, align 1
  %382 = zext i8 %381 to i32
  %383 = add nuw nsw i32 %382, %374
  %384 = mul nsw i32 %383, -3
  %385 = icmp ugt i64 %336, 3
  %386 = select i1 %385, i64 %336, i64 3
  %387 = add nuw i64 %386, 4294967293
  %388 = and i64 %387, 4294967295
  %389 = getelementptr inbounds i8, i8* %31, i64 %388
  %390 = load i8, i8* %389, align 1
  %391 = zext i8 %390 to i32
  %392 = add i32 %343, 3
  %393 = icmp slt i32 %392, %25
  %394 = select i1 %393, i32 %392, i32 %333
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds i8, i8* %31, i64 %395
  %397 = load i8, i8* %396, align 1
  %398 = zext i8 %397 to i32
  %399 = add nuw nsw i32 %350, 64
  %400 = add nuw nsw i32 %399, %367
  %401 = sub nsw i32 %400, %391
  %402 = add nsw i32 %401, %384
  %403 = sub nsw i32 %402, %398
  %404 = ashr i32 %403, 7
  %405 = icmp sgt i32 %404, 0
  %406 = select i1 %405, i32 %404, i32 0
  %407 = icmp slt i32 %406, 255
  %408 = select i1 %407, i32 %406, i32 255
  %409 = trunc i32 %408 to i8
  %410 = getelementptr inbounds i8, i8* %337, i64 1
  store i8 %409, i8* %337, align 1
  %411 = add nuw nsw i64 %336, 2
  %412 = icmp slt i64 %411, %334
  br i1 %412, label %335, label %546

413:                                              ; preds = %262
  %414 = sext i32 %260 to i64
  br label %415

415:                                              ; preds = %415, %413
  %416 = phi i64 [ 4, %413 ], [ %467, %415 ]
  %417 = phi i8* [ %328, %413 ], [ %466, %415 ]
  %418 = or i64 %416, 1
  %419 = getelementptr inbounds i8, i8* %31, i64 %416
  %420 = load i8, i8* %419, align 1
  %421 = zext i8 %420 to i32
  %422 = getelementptr inbounds i8, i8* %31, i64 %418
  %423 = load i8, i8* %422, align 1
  %424 = zext i8 %423 to i32
  %425 = add nuw nsw i32 %424, %421
  %426 = mul nuw nsw i32 %425, 56
  %427 = add nsw i64 %416, -1
  %428 = getelementptr inbounds i8, i8* %31, i64 %427
  %429 = load i8, i8* %428, align 1
  %430 = zext i8 %429 to i32
  %431 = add nuw nsw i64 %418, 1
  %432 = getelementptr inbounds i8, i8* %31, i64 %431
  %433 = load i8, i8* %432, align 1
  %434 = zext i8 %433 to i32
  %435 = add nuw nsw i32 %434, %430
  %436 = mul nuw nsw i32 %435, 12
  %437 = add nsw i64 %416, -2
  %438 = getelementptr inbounds i8, i8* %31, i64 %437
  %439 = load i8, i8* %438, align 1
  %440 = zext i8 %439 to i32
  %441 = add nuw nsw i64 %418, 2
  %442 = getelementptr inbounds i8, i8* %31, i64 %441
  %443 = load i8, i8* %442, align 1
  %444 = zext i8 %443 to i32
  %445 = add nuw nsw i32 %444, %440
  %446 = mul nsw i32 %445, -3
  %447 = add nsw i64 %416, -3
  %448 = getelementptr inbounds i8, i8* %31, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = zext i8 %449 to i32
  %451 = add nuw nsw i64 %418, 3
  %452 = getelementptr inbounds i8, i8* %31, i64 %451
  %453 = load i8, i8* %452, align 1
  %454 = zext i8 %453 to i32
  %455 = add nuw nsw i32 %426, 64
  %456 = add nuw nsw i32 %455, %436
  %457 = sub nsw i32 %456, %450
  %458 = add nsw i32 %457, %446
  %459 = sub nsw i32 %458, %454
  %460 = ashr i32 %459, 7
  %461 = icmp sgt i32 %460, 0
  %462 = select i1 %461, i32 %460, i32 0
  %463 = icmp slt i32 %462, 255
  %464 = select i1 %463, i32 %462, i32 255
  %465 = trunc i32 %464 to i8
  %466 = getelementptr inbounds i8, i8* %417, i64 1
  store i8 %465, i8* %417, align 1
  %467 = add nuw nsw i64 %416, 2
  %468 = icmp slt i64 %467, %414
  br i1 %468, label %415, label %469

469:                                              ; preds = %415
  %470 = trunc i64 %467 to i32
  br label %471

471:                                              ; preds = %469, %262
  %472 = phi i32 [ 4, %262 ], [ %470, %469 ]
  %473 = phi i8* [ %328, %262 ], [ %466, %469 ]
  %474 = icmp slt i32 %472, %25
  br i1 %474, label %475, label %546

475:                                              ; preds = %471
  %476 = add nsw i32 %25, -1
  %477 = zext i32 %472 to i64
  %478 = sext i32 %25 to i64
  br label %479

479:                                              ; preds = %479, %475
  %480 = phi i64 [ %477, %475 ], [ %544, %479 ]
  %481 = phi i8* [ %473, %475 ], [ %543, %479 ]
  %482 = trunc i64 %480 to i32
  %483 = or i32 %482, 1
  %484 = getelementptr inbounds i8, i8* %31, i64 %480
  %485 = load i8, i8* %484, align 1
  %486 = zext i8 %485 to i32
  %487 = icmp slt i32 %483, %25
  %488 = select i1 %487, i32 %483, i32 %476
  %489 = sext i32 %488 to i64
  %490 = getelementptr inbounds i8, i8* %31, i64 %489
  %491 = load i8, i8* %490, align 1
  %492 = zext i8 %491 to i32
  %493 = add nuw nsw i32 %492, %486
  %494 = mul nuw nsw i32 %493, 56
  %495 = add nsw i64 %480, -1
  %496 = getelementptr inbounds i8, i8* %31, i64 %495
  %497 = load i8, i8* %496, align 1
  %498 = zext i8 %497 to i32
  %499 = add i32 %483, 1
  %500 = icmp slt i32 %499, %25
  %501 = select i1 %500, i32 %499, i32 %476
  %502 = sext i32 %501 to i64
  %503 = getelementptr inbounds i8, i8* %31, i64 %502
  %504 = load i8, i8* %503, align 1
  %505 = zext i8 %504 to i32
  %506 = add nuw nsw i32 %505, %498
  %507 = mul nuw nsw i32 %506, 12
  %508 = add nsw i64 %480, -2
  %509 = getelementptr inbounds i8, i8* %31, i64 %508
  %510 = load i8, i8* %509, align 1
  %511 = zext i8 %510 to i32
  %512 = add i32 %483, 2
  %513 = icmp slt i32 %512, %25
  %514 = select i1 %513, i32 %512, i32 %476
  %515 = sext i32 %514 to i64
  %516 = getelementptr inbounds i8, i8* %31, i64 %515
  %517 = load i8, i8* %516, align 1
  %518 = zext i8 %517 to i32
  %519 = add nuw nsw i32 %518, %511
  %520 = mul nsw i32 %519, -3
  %521 = add nsw i64 %480, -3
  %522 = getelementptr inbounds i8, i8* %31, i64 %521
  %523 = load i8, i8* %522, align 1
  %524 = zext i8 %523 to i32
  %525 = add i32 %483, 3
  %526 = icmp slt i32 %525, %25
  %527 = select i1 %526, i32 %525, i32 %476
  %528 = sext i32 %527 to i64
  %529 = getelementptr inbounds i8, i8* %31, i64 %528
  %530 = load i8, i8* %529, align 1
  %531 = zext i8 %530 to i32
  %532 = add nuw nsw i32 %494, 64
  %533 = add nuw nsw i32 %532, %507
  %534 = sub nsw i32 %533, %524
  %535 = add nsw i32 %534, %520
  %536 = sub nsw i32 %535, %531
  %537 = ashr i32 %536, 7
  %538 = icmp sgt i32 %537, 0
  %539 = select i1 %538, i32 %537, i32 0
  %540 = icmp slt i32 %539, 255
  %541 = select i1 %540, i32 %539, i32 255
  %542 = trunc i32 %541 to i8
  %543 = getelementptr inbounds i8, i8* %481, i64 1
  store i8 %542, i8* %481, align 1
  %544 = add nuw nsw i64 %480, 2
  %545 = icmp slt i64 %544, %478
  br i1 %545, label %479, label %546

546:                                              ; preds = %209, %105, %479, %335, %471, %330, %162, %100
  %547 = add nuw nsw i32 %27, 1
  %548 = icmp eq i32 %547, %11
  br i1 %548, label %549, label %24

549:                                              ; preds = %546
  %550 = icmp eq i32 %29, %3
  br i1 %550, label %553, label %551

551:                                              ; preds = %549
  tail call fastcc void @interpolate(i8* %40, i32 %29, i8* %2, i32 %3)
  br label %553

552:                                              ; preds = %16
  tail call fastcc void @interpolate(i8* %0, i32 %1, i8* %2, i32 %3)
  br label %553

553:                                              ; preds = %552, %549, %551, %7
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_highbd_resize_plane(i8*, i32, i32, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %10 = sext i32 %6 to i64
  %11 = sext i32 %1 to i64
  %12 = shl nsw i64 %11, 1
  %13 = mul i64 %12, %10
  %14 = tail call noalias i8* @malloc(i64 %13) #5
  %15 = bitcast i8* %14 to i16*
  %16 = icmp slt i32 %2, %1
  %17 = select i1 %16, i32 %1, i32 %2
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 1
  %20 = tail call noalias i8* @malloc(i64 %19) #5
  %21 = bitcast i8* %20 to i16*
  %22 = tail call noalias i8* @malloc(i64 %12) #5
  %23 = bitcast i8* %22 to i16*
  %24 = sext i32 %5 to i64
  %25 = shl nsw i64 %24, 1
  %26 = tail call noalias i8* @malloc(i64 %25) #5
  %27 = bitcast i8* %26 to i16*
  %28 = icmp eq i8* %14, null
  %29 = icmp eq i8* %20, null
  %30 = or i1 %28, %29
  %31 = icmp eq i8* %22, null
  %32 = or i1 %30, %31
  %33 = icmp eq i8* %26, null
  %34 = or i1 %32, %33
  br i1 %34, label %164, label %35

35:                                               ; preds = %9
  %36 = icmp sgt i32 %1, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %35
  %38 = sext i32 %3 to i64
  %39 = zext i32 %1 to i64
  br label %56

40:                                               ; preds = %56, %35
  %41 = icmp sgt i32 %6, 0
  br i1 %41, label %42, label %164

42:                                               ; preds = %40
  %43 = icmp sgt i32 %5, 0
  %44 = sext i32 %7 to i64
  %45 = zext i32 %6 to i64
  %46 = add i32 %1, -1
  %47 = add i32 %5, -1
  %48 = and i32 %1, 7
  %49 = icmp ult i32 %46, 7
  %50 = sub i32 %1, %48
  %51 = icmp eq i32 %48, 0
  %52 = and i32 %5, 7
  %53 = icmp ult i32 %47, 7
  %54 = sub i32 %5, %52
  %55 = icmp eq i32 %52, 0
  br label %67

56:                                               ; preds = %56, %37
  %57 = phi i64 [ 0, %37 ], [ %65, %56 ]
  %58 = mul nsw i64 %57, %38
  %59 = getelementptr inbounds i8, i8* %0, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = shl i64 %60, 1
  %62 = inttoptr i64 %61 to i16*
  %63 = mul nsw i64 %57, %10
  %64 = getelementptr inbounds i16, i16* %15, i64 %63
  tail call fastcc void @highbd_resize_multistep(i16* %62, i32 %2, i16* %64, i32 %6, i16* %21, i32 %8)
  %65 = add nuw nsw i64 %57, 1
  %66 = icmp eq i64 %65, %39
  br i1 %66, label %40, label %56

67:                                               ; preds = %161, %42
  %68 = phi i64 [ 0, %42 ], [ %162, %161 ]
  br i1 %36, label %69, label %113

69:                                               ; preds = %67
  %70 = getelementptr inbounds i16, i16* %15, i64 %68
  br i1 %49, label %101, label %71

71:                                               ; preds = %69, %71
  %72 = phi i16* [ %97, %71 ], [ %23, %69 ]
  %73 = phi i16* [ %98, %71 ], [ %70, %69 ]
  %74 = phi i32 [ %99, %71 ], [ %50, %69 ]
  %75 = load i16, i16* %73, align 2
  %76 = getelementptr inbounds i16, i16* %72, i64 1
  store i16 %75, i16* %72, align 2
  %77 = getelementptr inbounds i16, i16* %73, i64 %10
  %78 = load i16, i16* %77, align 2
  %79 = getelementptr inbounds i16, i16* %72, i64 2
  store i16 %78, i16* %76, align 2
  %80 = getelementptr inbounds i16, i16* %77, i64 %10
  %81 = load i16, i16* %80, align 2
  %82 = getelementptr inbounds i16, i16* %72, i64 3
  store i16 %81, i16* %79, align 2
  %83 = getelementptr inbounds i16, i16* %80, i64 %10
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds i16, i16* %72, i64 4
  store i16 %84, i16* %82, align 2
  %86 = getelementptr inbounds i16, i16* %83, i64 %10
  %87 = load i16, i16* %86, align 2
  %88 = getelementptr inbounds i16, i16* %72, i64 5
  store i16 %87, i16* %85, align 2
  %89 = getelementptr inbounds i16, i16* %86, i64 %10
  %90 = load i16, i16* %89, align 2
  %91 = getelementptr inbounds i16, i16* %72, i64 6
  store i16 %90, i16* %88, align 2
  %92 = getelementptr inbounds i16, i16* %89, i64 %10
  %93 = load i16, i16* %92, align 2
  %94 = getelementptr inbounds i16, i16* %72, i64 7
  store i16 %93, i16* %91, align 2
  %95 = getelementptr inbounds i16, i16* %92, i64 %10
  %96 = load i16, i16* %95, align 2
  %97 = getelementptr inbounds i16, i16* %72, i64 8
  store i16 %96, i16* %94, align 2
  %98 = getelementptr inbounds i16, i16* %95, i64 %10
  %99 = add i32 %74, -8
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %71

101:                                              ; preds = %71, %69
  %102 = phi i16* [ %23, %69 ], [ %97, %71 ]
  %103 = phi i16* [ %70, %69 ], [ %98, %71 ]
  br i1 %51, label %113, label %104

104:                                              ; preds = %101, %104
  %105 = phi i16* [ %109, %104 ], [ %102, %101 ]
  %106 = phi i16* [ %110, %104 ], [ %103, %101 ]
  %107 = phi i32 [ %111, %104 ], [ %48, %101 ]
  %108 = load i16, i16* %106, align 2
  %109 = getelementptr inbounds i16, i16* %105, i64 1
  store i16 %108, i16* %105, align 2
  %110 = getelementptr inbounds i16, i16* %106, i64 %10
  %111 = add i32 %107, -1
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %104, !llvm.loop !5

113:                                              ; preds = %101, %104, %67
  tail call fastcc void @highbd_resize_multistep(i16* %23, i32 %1, i16* %27, i32 %5, i16* %21, i32 %8)
  br i1 %43, label %114, label %161

114:                                              ; preds = %113
  %115 = getelementptr inbounds i8, i8* %4, i64 %68
  %116 = ptrtoint i8* %115 to i64
  %117 = shl i64 %116, 1
  %118 = inttoptr i64 %117 to i16*
  br i1 %53, label %149, label %119

119:                                              ; preds = %114, %119
  %120 = phi i16* [ %144, %119 ], [ %27, %114 ]
  %121 = phi i16* [ %146, %119 ], [ %118, %114 ]
  %122 = phi i32 [ %147, %119 ], [ %54, %114 ]
  %123 = getelementptr inbounds i16, i16* %120, i64 1
  %124 = load i16, i16* %120, align 2
  store i16 %124, i16* %121, align 2
  %125 = getelementptr inbounds i16, i16* %121, i64 %44
  %126 = getelementptr inbounds i16, i16* %120, i64 2
  %127 = load i16, i16* %123, align 2
  store i16 %127, i16* %125, align 2
  %128 = getelementptr inbounds i16, i16* %125, i64 %44
  %129 = getelementptr inbounds i16, i16* %120, i64 3
  %130 = load i16, i16* %126, align 2
  store i16 %130, i16* %128, align 2
  %131 = getelementptr inbounds i16, i16* %128, i64 %44
  %132 = getelementptr inbounds i16, i16* %120, i64 4
  %133 = load i16, i16* %129, align 2
  store i16 %133, i16* %131, align 2
  %134 = getelementptr inbounds i16, i16* %131, i64 %44
  %135 = getelementptr inbounds i16, i16* %120, i64 5
  %136 = load i16, i16* %132, align 2
  store i16 %136, i16* %134, align 2
  %137 = getelementptr inbounds i16, i16* %134, i64 %44
  %138 = getelementptr inbounds i16, i16* %120, i64 6
  %139 = load i16, i16* %135, align 2
  store i16 %139, i16* %137, align 2
  %140 = getelementptr inbounds i16, i16* %137, i64 %44
  %141 = getelementptr inbounds i16, i16* %120, i64 7
  %142 = load i16, i16* %138, align 2
  store i16 %142, i16* %140, align 2
  %143 = getelementptr inbounds i16, i16* %140, i64 %44
  %144 = getelementptr inbounds i16, i16* %120, i64 8
  %145 = load i16, i16* %141, align 2
  store i16 %145, i16* %143, align 2
  %146 = getelementptr inbounds i16, i16* %143, i64 %44
  %147 = add i32 %122, -8
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %119

149:                                              ; preds = %119, %114
  %150 = phi i16* [ %27, %114 ], [ %144, %119 ]
  %151 = phi i16* [ %118, %114 ], [ %146, %119 ]
  br i1 %55, label %161, label %152

152:                                              ; preds = %149, %152
  %153 = phi i16* [ %156, %152 ], [ %150, %149 ]
  %154 = phi i16* [ %158, %152 ], [ %151, %149 ]
  %155 = phi i32 [ %159, %152 ], [ %52, %149 ]
  %156 = getelementptr inbounds i16, i16* %153, i64 1
  %157 = load i16, i16* %153, align 2
  store i16 %157, i16* %154, align 2
  %158 = getelementptr inbounds i16, i16* %154, i64 %44
  %159 = add i32 %155, -1
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %152, !llvm.loop !6

161:                                              ; preds = %149, %152, %113
  %162 = add nuw nsw i64 %68, 1
  %163 = icmp eq i64 %162, %45
  br i1 %163, label %164, label %67

164:                                              ; preds = %161, %40, %9
  tail call void @free(i8* %14) #5
  tail call void @free(i8* %20) #5
  tail call void @free(i8* %22) #5
  tail call void @free(i8* %26) #5
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @highbd_resize_multistep(i16* readonly, i32, i16*, i32, i16*, i32) unnamed_addr #0 {
  %7 = icmp eq i32 %1, %3
  br i1 %7, label %8, label %13

8:                                                ; preds = %6
  %9 = bitcast i16* %2 to i8*
  %10 = bitcast i16* %0 to i8*
  %11 = sext i32 %1 to i64
  %12 = shl nsw i64 %11, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %9, i8* align 2 %10, i64 %12, i1 false)
  br label %597

13:                                               ; preds = %6, %13
  %14 = phi i32 [ %17, %13 ], [ %1, %6 ]
  %15 = phi i32 [ %19, %13 ], [ 0, %6 ]
  %16 = add nsw i32 %14, 1
  %17 = ashr i32 %16, 1
  %18 = icmp slt i32 %17, %3
  %19 = add nuw nsw i32 %15, 1
  br i1 %18, label %20, label %13

20:                                               ; preds = %13
  %21 = icmp eq i32 %15, 0
  br i1 %21, label %596, label %22

22:                                               ; preds = %20
  %23 = add nsw i32 %1, 1
  %24 = ashr i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i16, i16* %4, i64 %25
  %27 = add nsw i32 %15, -1
  %28 = icmp eq i32 %5, 10
  %29 = select i1 %28, i32 1023, i32 255
  %30 = icmp eq i32 %5, 12
  %31 = select i1 %30, i32 4095, i32 %29
  %32 = icmp eq i32 %5, 10
  %33 = select i1 %32, i32 1023, i32 255
  %34 = icmp eq i32 %5, 12
  %35 = select i1 %34, i32 4095, i32 %33
  %36 = icmp eq i32 %5, 10
  %37 = select i1 %36, i32 1023, i32 255
  %38 = icmp eq i32 %5, 12
  %39 = select i1 %38, i32 4095, i32 %37
  %40 = icmp eq i32 %5, 10
  %41 = select i1 %40, i32 1023, i32 255
  %42 = icmp eq i32 %5, 12
  %43 = select i1 %42, i32 4095, i32 %41
  %44 = icmp eq i32 %5, 10
  %45 = select i1 %44, i32 1023, i32 255
  %46 = icmp eq i32 %5, 12
  %47 = select i1 %46, i32 4095, i32 %45
  %48 = icmp eq i32 %5, 10
  %49 = select i1 %48, i32 1023, i32 255
  %50 = icmp eq i32 %5, 12
  %51 = select i1 %50, i32 4095, i32 %49
  %52 = icmp eq i32 %5, 10
  %53 = select i1 %52, i32 1023, i32 255
  %54 = icmp eq i32 %5, 12
  %55 = select i1 %54, i32 4095, i32 %53
  %56 = icmp eq i32 %5, 10
  %57 = select i1 %56, i32 1023, i32 255
  %58 = icmp eq i32 %5, 12
  %59 = select i1 %58, i32 4095, i32 %57
  %60 = icmp eq i32 %5, 10
  %61 = select i1 %60, i32 1023, i32 255
  %62 = icmp eq i32 %5, 12
  %63 = select i1 %62, i32 4095, i32 %61
  %64 = icmp eq i32 %5, 10
  %65 = select i1 %64, i32 1023, i32 255
  %66 = icmp eq i32 %5, 12
  %67 = select i1 %66, i32 4095, i32 %65
  br label %68

68:                                               ; preds = %590, %22
  %69 = phi i32 [ %1, %22 ], [ %73, %590 ]
  %70 = phi i16* [ null, %22 ], [ %84, %590 ]
  %71 = phi i32 [ 0, %22 ], [ %591, %590 ]
  %72 = add nsw i32 %69, 1
  %73 = ashr i32 %72, 1
  %74 = icmp eq i32 %71, 0
  %75 = select i1 %74, i16* %0, i16* %70
  %76 = icmp eq i32 %71, %27
  %77 = icmp eq i32 %73, %3
  %78 = and i1 %76, %77
  br i1 %78, label %83, label %79

79:                                               ; preds = %68
  %80 = and i32 %71, 1
  %81 = icmp eq i32 %80, 0
  %82 = select i1 %81, i16* %4, i16* %26
  br label %83

83:                                               ; preds = %68, %79
  %84 = phi i16* [ %82, %79 ], [ %2, %68 ]
  %85 = and i32 %69, 1
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %301, label %87

87:                                               ; preds = %83
  %88 = add nsw i32 %69, -3
  %89 = and i32 %88, 1
  %90 = add nsw i32 %89, %88
  %91 = icmp slt i32 %90, 4
  br i1 %91, label %144, label %92

92:                                               ; preds = %87
  %93 = load i16, i16* %75, align 2
  %94 = zext i16 %93 to i32
  %95 = shl nuw nsw i32 %94, 6
  %96 = add nuw nsw i32 %95, 64
  %97 = getelementptr inbounds i16, i16* %75, i64 1
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = add nuw nsw i32 %99, %94
  %101 = mul nuw nsw i32 %100, 35
  %102 = add nuw nsw i32 %96, %101
  %103 = getelementptr inbounds i16, i16* %75, i64 2
  %104 = getelementptr inbounds i16, i16* %75, i64 3
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = add nuw nsw i32 %106, %94
  %108 = mul nsw i32 %107, -3
  %109 = add nsw i32 %102, %108
  %110 = ashr i32 %109, 7
  %111 = icmp slt i32 %110, %31
  %112 = select i1 %111, i32 %110, i32 %31
  %113 = icmp sgt i32 %112, 0
  %114 = select i1 %113, i32 %112, i32 0
  %115 = trunc i32 %114 to i16
  %116 = getelementptr inbounds i16, i16* %84, i64 1
  store i16 %115, i16* %84, align 2
  %117 = load i16, i16* %103, align 2
  %118 = zext i16 %117 to i32
  %119 = shl nuw nsw i32 %118, 6
  %120 = add nuw nsw i32 %119, 64
  %121 = load i16, i16* %97, align 2
  %122 = zext i16 %121 to i32
  %123 = load i16, i16* %104, align 2
  %124 = zext i16 %123 to i32
  %125 = add nuw nsw i32 %124, %122
  %126 = mul nuw nsw i32 %125, 35
  %127 = add nuw nsw i32 %120, %126
  %128 = load i16, i16* %75, align 2
  %129 = zext i16 %128 to i32
  %130 = getelementptr inbounds i16, i16* %75, i64 5
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %132, %129
  %134 = mul nsw i32 %133, -3
  %135 = add nsw i32 %127, %134
  %136 = ashr i32 %135, 7
  %137 = icmp slt i32 %136, %35
  %138 = select i1 %137, i32 %136, i32 %35
  %139 = icmp sgt i32 %138, 0
  %140 = select i1 %139, i32 %138, i32 0
  %141 = trunc i32 %140 to i16
  %142 = getelementptr inbounds i16, i16* %84, i64 2
  store i16 %141, i16* %116, align 2
  %143 = icmp eq i32 %90, 4
  br i1 %143, label %206, label %202

144:                                              ; preds = %87
  %145 = icmp sgt i32 %69, 0
  br i1 %145, label %146, label %590

146:                                              ; preds = %144
  %147 = add nsw i32 %69, -1
  %148 = sext i32 %69 to i64
  br label %149

149:                                              ; preds = %149, %146
  %150 = phi i64 [ 0, %146 ], [ %175, %149 ]
  %151 = phi i16* [ %84, %146 ], [ %201, %149 ]
  %152 = getelementptr inbounds i16, i16* %75, i64 %150
  %153 = load i16, i16* %152, align 2
  %154 = zext i16 %153 to i32
  %155 = shl nuw nsw i32 %154, 6
  %156 = add nuw nsw i32 %155, 64
  %157 = icmp eq i64 %150, 0
  %158 = add nuw nsw i64 %150, 4294967295
  %159 = and i64 %158, 4294967295
  %160 = select i1 %157, i64 0, i64 %159
  %161 = getelementptr inbounds i16, i16* %75, i64 %160
  %162 = load i16, i16* %161, align 2
  %163 = zext i16 %162 to i32
  %164 = or i64 %150, 1
  %165 = icmp slt i64 %164, %148
  %166 = trunc i64 %164 to i32
  %167 = select i1 %165, i32 %166, i32 %147
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i16, i16* %75, i64 %168
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = add nuw nsw i32 %171, %163
  %173 = mul nuw nsw i32 %172, 35
  %174 = add nuw nsw i32 %156, %173
  %175 = add nuw nsw i64 %150, 2
  %176 = icmp slt i64 %175, %148
  %177 = icmp ugt i64 %150, 3
  %178 = select i1 %177, i64 %150, i64 3
  %179 = add nuw i64 %178, 4294967293
  %180 = and i64 %179, 4294967295
  %181 = getelementptr inbounds i16, i16* %75, i64 %180
  %182 = load i16, i16* %181, align 2
  %183 = zext i16 %182 to i32
  %184 = add nuw nsw i64 %150, 3
  %185 = icmp slt i64 %184, %148
  %186 = trunc i64 %184 to i32
  %187 = select i1 %185, i32 %186, i32 %147
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i16, i16* %75, i64 %188
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = add nuw nsw i32 %191, %183
  %193 = mul nsw i32 %192, -3
  %194 = add nsw i32 %174, %193
  %195 = ashr i32 %194, 7
  %196 = icmp slt i32 %195, %47
  %197 = select i1 %196, i32 %195, i32 %47
  %198 = icmp sgt i32 %197, 0
  %199 = select i1 %198, i32 %197, i32 0
  %200 = trunc i32 %199 to i16
  %201 = getelementptr inbounds i16, i16* %151, i64 1
  store i16 %200, i16* %151, align 2
  br i1 %176, label %149, label %590

202:                                              ; preds = %92
  %203 = sext i32 %90 to i64
  br label %214

204:                                              ; preds = %214
  %205 = trunc i64 %233 to i32
  br label %206

206:                                              ; preds = %92, %204
  %207 = phi i32 [ 4, %92 ], [ %205, %204 ]
  %208 = phi i16* [ %142, %92 ], [ %251, %204 ]
  %209 = icmp slt i32 %207, %69
  br i1 %209, label %210, label %590

210:                                              ; preds = %206
  %211 = add nsw i32 %69, -1
  %212 = zext i32 %207 to i64
  %213 = sext i32 %69 to i64
  br label %253

214:                                              ; preds = %214, %202
  %215 = phi i64 [ 4, %202 ], [ %233, %214 ]
  %216 = phi i16* [ %142, %202 ], [ %251, %214 ]
  %217 = getelementptr inbounds i16, i16* %75, i64 %215
  %218 = load i16, i16* %217, align 2
  %219 = zext i16 %218 to i32
  %220 = shl nuw nsw i32 %219, 6
  %221 = add nuw nsw i32 %220, 64
  %222 = add nsw i64 %215, -1
  %223 = getelementptr inbounds i16, i16* %75, i64 %222
  %224 = load i16, i16* %223, align 2
  %225 = zext i16 %224 to i32
  %226 = or i64 %215, 1
  %227 = getelementptr inbounds i16, i16* %75, i64 %226
  %228 = load i16, i16* %227, align 2
  %229 = zext i16 %228 to i32
  %230 = add nuw nsw i32 %229, %225
  %231 = mul nuw nsw i32 %230, 35
  %232 = add nuw nsw i32 %221, %231
  %233 = add nuw nsw i64 %215, 2
  %234 = add nsw i64 %215, -3
  %235 = getelementptr inbounds i16, i16* %75, i64 %234
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = add nuw nsw i64 %215, 3
  %239 = getelementptr inbounds i16, i16* %75, i64 %238
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = add nuw nsw i32 %241, %237
  %243 = mul nsw i32 %242, -3
  %244 = add nsw i32 %232, %243
  %245 = ashr i32 %244, 7
  %246 = icmp slt i32 %245, %39
  %247 = select i1 %246, i32 %245, i32 %39
  %248 = icmp sgt i32 %247, 0
  %249 = select i1 %248, i32 %247, i32 0
  %250 = trunc i32 %249 to i16
  %251 = getelementptr inbounds i16, i16* %216, i64 1
  store i16 %250, i16* %216, align 2
  %252 = icmp slt i64 %233, %203
  br i1 %252, label %214, label %204

253:                                              ; preds = %253, %210
  %254 = phi i64 [ %212, %210 ], [ %276, %253 ]
  %255 = phi i16* [ %208, %210 ], [ %300, %253 ]
  %256 = getelementptr inbounds i16, i16* %75, i64 %254
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = shl nuw nsw i32 %258, 6
  %260 = add nuw nsw i32 %259, 64
  %261 = add nsw i64 %254, -1
  %262 = getelementptr inbounds i16, i16* %75, i64 %261
  %263 = load i16, i16* %262, align 2
  %264 = zext i16 %263 to i32
  %265 = trunc i64 %254 to i32
  %266 = add i32 %265, 1
  %267 = icmp slt i32 %266, %69
  %268 = select i1 %267, i32 %266, i32 %211
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds i16, i16* %75, i64 %269
  %271 = load i16, i16* %270, align 2
  %272 = zext i16 %271 to i32
  %273 = add nuw nsw i32 %272, %264
  %274 = mul nuw nsw i32 %273, 35
  %275 = add nuw nsw i32 %260, %274
  %276 = add nuw nsw i64 %254, 2
  %277 = icmp slt i64 %276, %213
  %278 = shl i64 %254, 32
  %279 = add i64 %278, -12884901888
  %280 = ashr exact i64 %279, 32
  %281 = getelementptr inbounds i16, i16* %75, i64 %280
  %282 = load i16, i16* %281, align 2
  %283 = zext i16 %282 to i32
  %284 = add i32 %265, 3
  %285 = icmp slt i32 %284, %69
  %286 = select i1 %285, i32 %284, i32 %211
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds i16, i16* %75, i64 %287
  %289 = load i16, i16* %288, align 2
  %290 = zext i16 %289 to i32
  %291 = add nuw nsw i32 %290, %283
  %292 = mul nsw i32 %291, -3
  %293 = add nsw i32 %275, %292
  %294 = ashr i32 %293, 7
  %295 = icmp slt i32 %294, %43
  %296 = select i1 %295, i32 %294, i32 %43
  %297 = icmp sgt i32 %296, 0
  %298 = select i1 %297, i32 %296, i32 0
  %299 = trunc i32 %298 to i16
  %300 = getelementptr inbounds i16, i16* %255, i64 1
  store i16 %299, i16* %255, align 2
  br i1 %277, label %253, label %590

301:                                              ; preds = %83
  %302 = add nsw i32 %69, -4
  %303 = and i32 %302, 1
  %304 = add nsw i32 %303, %302
  %305 = icmp slt i32 %304, 4
  br i1 %305, label %374, label %306

306:                                              ; preds = %301
  %307 = load i16, i16* %75, align 2
  %308 = zext i16 %307 to i32
  %309 = getelementptr inbounds i16, i16* %75, i64 1
  %310 = load i16, i16* %309, align 2
  %311 = zext i16 %310 to i32
  %312 = add nuw nsw i32 %311, %308
  %313 = mul nuw nsw i32 %312, 56
  %314 = getelementptr inbounds i16, i16* %75, i64 2
  %315 = load i16, i16* %314, align 2
  %316 = zext i16 %315 to i32
  %317 = add nuw nsw i32 %316, %308
  %318 = mul nuw nsw i32 %317, 12
  %319 = getelementptr inbounds i16, i16* %75, i64 3
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = add nuw nsw i32 %321, %308
  %323 = mul nsw i32 %322, -3
  %324 = getelementptr inbounds i16, i16* %75, i64 4
  %325 = load i16, i16* %324, align 2
  %326 = zext i16 %325 to i32
  %327 = sub nsw i32 64, %308
  %328 = add nsw i32 %327, %313
  %329 = add nsw i32 %328, %318
  %330 = sub nsw i32 %329, %326
  %331 = add nsw i32 %330, %323
  %332 = ashr i32 %331, 7
  %333 = icmp slt i32 %332, %51
  %334 = select i1 %333, i32 %332, i32 %51
  %335 = icmp sgt i32 %334, 0
  %336 = select i1 %335, i32 %334, i32 0
  %337 = trunc i32 %336 to i16
  %338 = getelementptr inbounds i16, i16* %84, i64 1
  store i16 %337, i16* %84, align 2
  %339 = load i16, i16* %314, align 2
  %340 = zext i16 %339 to i32
  %341 = load i16, i16* %319, align 2
  %342 = zext i16 %341 to i32
  %343 = add nuw nsw i32 %342, %340
  %344 = mul nuw nsw i32 %343, 56
  %345 = load i16, i16* %309, align 2
  %346 = zext i16 %345 to i32
  %347 = load i16, i16* %324, align 2
  %348 = zext i16 %347 to i32
  %349 = add nuw nsw i32 %348, %346
  %350 = mul nuw nsw i32 %349, 12
  %351 = load i16, i16* %75, align 2
  %352 = zext i16 %351 to i32
  %353 = getelementptr inbounds i16, i16* %75, i64 5
  %354 = load i16, i16* %353, align 2
  %355 = zext i16 %354 to i32
  %356 = add nuw nsw i32 %355, %352
  %357 = mul nsw i32 %356, -3
  %358 = getelementptr inbounds i16, i16* %75, i64 6
  %359 = load i16, i16* %358, align 2
  %360 = zext i16 %359 to i32
  %361 = add nuw nsw i32 %344, 64
  %362 = sub nsw i32 %361, %352
  %363 = add nsw i32 %362, %350
  %364 = sub nsw i32 %363, %360
  %365 = add nsw i32 %364, %357
  %366 = ashr i32 %365, 7
  %367 = icmp slt i32 %366, %55
  %368 = select i1 %367, i32 %366, i32 %55
  %369 = icmp sgt i32 %368, 0
  %370 = select i1 %369, i32 %368, i32 0
  %371 = trunc i32 %370 to i16
  %372 = getelementptr inbounds i16, i16* %84, i64 2
  store i16 %371, i16* %338, align 2
  %373 = icmp eq i32 %304, 4
  br i1 %373, label %515, label %457

374:                                              ; preds = %301
  %375 = icmp sgt i32 %69, 0
  br i1 %375, label %376, label %590

376:                                              ; preds = %374
  %377 = add nsw i32 %69, -1
  %378 = sext i32 %69 to i64
  br label %379

379:                                              ; preds = %379, %376
  %380 = phi i64 [ 0, %376 ], [ %455, %379 ]
  %381 = phi i16* [ %84, %376 ], [ %454, %379 ]
  %382 = or i64 %380, 1
  %383 = getelementptr inbounds i16, i16* %75, i64 %380
  %384 = load i16, i16* %383, align 2
  %385 = zext i16 %384 to i32
  %386 = icmp slt i64 %382, %378
  %387 = trunc i64 %382 to i32
  %388 = select i1 %386, i32 %387, i32 %377
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i16, i16* %75, i64 %389
  %391 = load i16, i16* %390, align 2
  %392 = zext i16 %391 to i32
  %393 = add nuw nsw i32 %392, %385
  %394 = mul nuw nsw i32 %393, 56
  %395 = icmp eq i64 %380, 0
  %396 = add nuw nsw i64 %380, 4294967295
  %397 = and i64 %396, 4294967295
  %398 = select i1 %395, i64 0, i64 %397
  %399 = getelementptr inbounds i16, i16* %75, i64 %398
  %400 = load i16, i16* %399, align 2
  %401 = zext i16 %400 to i32
  %402 = add nuw nsw i64 %382, 1
  %403 = icmp slt i64 %402, %378
  %404 = trunc i64 %402 to i32
  %405 = select i1 %403, i32 %404, i32 %377
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds i16, i16* %75, i64 %406
  %408 = load i16, i16* %407, align 2
  %409 = zext i16 %408 to i32
  %410 = add nuw nsw i32 %409, %401
  %411 = mul nuw nsw i32 %410, 12
  %412 = icmp ugt i64 %380, 2
  %413 = select i1 %412, i64 %380, i64 2
  %414 = add nuw i64 %413, 4294967294
  %415 = and i64 %414, 4294967295
  %416 = getelementptr inbounds i16, i16* %75, i64 %415
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = add nuw nsw i64 %382, 2
  %420 = icmp slt i64 %419, %378
  %421 = trunc i64 %419 to i32
  %422 = select i1 %420, i32 %421, i32 %377
  %423 = sext i32 %422 to i64
  %424 = getelementptr inbounds i16, i16* %75, i64 %423
  %425 = load i16, i16* %424, align 2
  %426 = zext i16 %425 to i32
  %427 = add nuw nsw i32 %426, %418
  %428 = mul nsw i32 %427, -3
  %429 = icmp ugt i64 %380, 3
  %430 = select i1 %429, i64 %380, i64 3
  %431 = add nuw i64 %430, 4294967293
  %432 = and i64 %431, 4294967295
  %433 = getelementptr inbounds i16, i16* %75, i64 %432
  %434 = load i16, i16* %433, align 2
  %435 = zext i16 %434 to i32
  %436 = add i32 %387, 3
  %437 = icmp slt i32 %436, %69
  %438 = select i1 %437, i32 %436, i32 %377
  %439 = sext i32 %438 to i64
  %440 = getelementptr inbounds i16, i16* %75, i64 %439
  %441 = load i16, i16* %440, align 2
  %442 = zext i16 %441 to i32
  %443 = add nuw nsw i32 %394, 64
  %444 = add nuw nsw i32 %443, %411
  %445 = sub nsw i32 %444, %435
  %446 = add nsw i32 %445, %428
  %447 = sub nsw i32 %446, %442
  %448 = ashr i32 %447, 7
  %449 = icmp slt i32 %448, %67
  %450 = select i1 %449, i32 %448, i32 %67
  %451 = icmp sgt i32 %450, 0
  %452 = select i1 %451, i32 %450, i32 0
  %453 = trunc i32 %452 to i16
  %454 = getelementptr inbounds i16, i16* %381, i64 1
  store i16 %453, i16* %381, align 2
  %455 = add nuw nsw i64 %380, 2
  %456 = icmp slt i64 %455, %378
  br i1 %456, label %379, label %590

457:                                              ; preds = %306
  %458 = sext i32 %304 to i64
  br label %459

459:                                              ; preds = %459, %457
  %460 = phi i64 [ 4, %457 ], [ %511, %459 ]
  %461 = phi i16* [ %372, %457 ], [ %510, %459 ]
  %462 = or i64 %460, 1
  %463 = getelementptr inbounds i16, i16* %75, i64 %460
  %464 = load i16, i16* %463, align 2
  %465 = zext i16 %464 to i32
  %466 = getelementptr inbounds i16, i16* %75, i64 %462
  %467 = load i16, i16* %466, align 2
  %468 = zext i16 %467 to i32
  %469 = add nuw nsw i32 %468, %465
  %470 = mul nuw nsw i32 %469, 56
  %471 = add nsw i64 %460, -1
  %472 = getelementptr inbounds i16, i16* %75, i64 %471
  %473 = load i16, i16* %472, align 2
  %474 = zext i16 %473 to i32
  %475 = add nuw nsw i64 %462, 1
  %476 = getelementptr inbounds i16, i16* %75, i64 %475
  %477 = load i16, i16* %476, align 2
  %478 = zext i16 %477 to i32
  %479 = add nuw nsw i32 %478, %474
  %480 = mul nuw nsw i32 %479, 12
  %481 = add nsw i64 %460, -2
  %482 = getelementptr inbounds i16, i16* %75, i64 %481
  %483 = load i16, i16* %482, align 2
  %484 = zext i16 %483 to i32
  %485 = add nuw nsw i64 %462, 2
  %486 = getelementptr inbounds i16, i16* %75, i64 %485
  %487 = load i16, i16* %486, align 2
  %488 = zext i16 %487 to i32
  %489 = add nuw nsw i32 %488, %484
  %490 = mul nsw i32 %489, -3
  %491 = add nsw i64 %460, -3
  %492 = getelementptr inbounds i16, i16* %75, i64 %491
  %493 = load i16, i16* %492, align 2
  %494 = zext i16 %493 to i32
  %495 = add nuw nsw i64 %462, 3
  %496 = getelementptr inbounds i16, i16* %75, i64 %495
  %497 = load i16, i16* %496, align 2
  %498 = zext i16 %497 to i32
  %499 = add nuw nsw i32 %470, 64
  %500 = add nuw nsw i32 %499, %480
  %501 = sub nsw i32 %500, %494
  %502 = add nsw i32 %501, %490
  %503 = sub nsw i32 %502, %498
  %504 = ashr i32 %503, 7
  %505 = icmp slt i32 %504, %59
  %506 = select i1 %505, i32 %504, i32 %59
  %507 = icmp sgt i32 %506, 0
  %508 = select i1 %507, i32 %506, i32 0
  %509 = trunc i32 %508 to i16
  %510 = getelementptr inbounds i16, i16* %461, i64 1
  store i16 %509, i16* %461, align 2
  %511 = add nuw nsw i64 %460, 2
  %512 = icmp slt i64 %511, %458
  br i1 %512, label %459, label %513

513:                                              ; preds = %459
  %514 = trunc i64 %511 to i32
  br label %515

515:                                              ; preds = %306, %513
  %516 = phi i32 [ 4, %306 ], [ %514, %513 ]
  %517 = phi i16* [ %372, %306 ], [ %510, %513 ]
  %518 = icmp slt i32 %516, %69
  br i1 %518, label %519, label %590

519:                                              ; preds = %515
  %520 = add nsw i32 %69, -1
  %521 = zext i32 %516 to i64
  %522 = sext i32 %69 to i64
  br label %523

523:                                              ; preds = %523, %519
  %524 = phi i64 [ %521, %519 ], [ %588, %523 ]
  %525 = phi i16* [ %517, %519 ], [ %587, %523 ]
  %526 = trunc i64 %524 to i32
  %527 = or i32 %526, 1
  %528 = getelementptr inbounds i16, i16* %75, i64 %524
  %529 = load i16, i16* %528, align 2
  %530 = zext i16 %529 to i32
  %531 = icmp slt i32 %527, %69
  %532 = select i1 %531, i32 %527, i32 %520
  %533 = sext i32 %532 to i64
  %534 = getelementptr inbounds i16, i16* %75, i64 %533
  %535 = load i16, i16* %534, align 2
  %536 = zext i16 %535 to i32
  %537 = add nuw nsw i32 %536, %530
  %538 = mul nuw nsw i32 %537, 56
  %539 = add nsw i64 %524, -1
  %540 = getelementptr inbounds i16, i16* %75, i64 %539
  %541 = load i16, i16* %540, align 2
  %542 = zext i16 %541 to i32
  %543 = add i32 %527, 1
  %544 = icmp slt i32 %543, %69
  %545 = select i1 %544, i32 %543, i32 %520
  %546 = sext i32 %545 to i64
  %547 = getelementptr inbounds i16, i16* %75, i64 %546
  %548 = load i16, i16* %547, align 2
  %549 = zext i16 %548 to i32
  %550 = add nuw nsw i32 %549, %542
  %551 = mul nuw nsw i32 %550, 12
  %552 = add nsw i64 %524, -2
  %553 = getelementptr inbounds i16, i16* %75, i64 %552
  %554 = load i16, i16* %553, align 2
  %555 = zext i16 %554 to i32
  %556 = add i32 %527, 2
  %557 = icmp slt i32 %556, %69
  %558 = select i1 %557, i32 %556, i32 %520
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds i16, i16* %75, i64 %559
  %561 = load i16, i16* %560, align 2
  %562 = zext i16 %561 to i32
  %563 = add nuw nsw i32 %562, %555
  %564 = mul nsw i32 %563, -3
  %565 = add nsw i64 %524, -3
  %566 = getelementptr inbounds i16, i16* %75, i64 %565
  %567 = load i16, i16* %566, align 2
  %568 = zext i16 %567 to i32
  %569 = add i32 %527, 3
  %570 = icmp slt i32 %569, %69
  %571 = select i1 %570, i32 %569, i32 %520
  %572 = sext i32 %571 to i64
  %573 = getelementptr inbounds i16, i16* %75, i64 %572
  %574 = load i16, i16* %573, align 2
  %575 = zext i16 %574 to i32
  %576 = add nuw nsw i32 %538, 64
  %577 = add nuw nsw i32 %576, %551
  %578 = sub nsw i32 %577, %568
  %579 = add nsw i32 %578, %564
  %580 = sub nsw i32 %579, %575
  %581 = ashr i32 %580, 7
  %582 = icmp slt i32 %581, %63
  %583 = select i1 %582, i32 %581, i32 %63
  %584 = icmp sgt i32 %583, 0
  %585 = select i1 %584, i32 %583, i32 0
  %586 = trunc i32 %585 to i16
  %587 = getelementptr inbounds i16, i16* %525, i64 1
  store i16 %586, i16* %525, align 2
  %588 = add nuw nsw i64 %524, 2
  %589 = icmp slt i64 %588, %522
  br i1 %589, label %523, label %590

590:                                              ; preds = %253, %149, %523, %379, %515, %374, %206, %144
  %591 = add nuw nsw i32 %71, 1
  %592 = icmp eq i32 %591, %15
  br i1 %592, label %593, label %68

593:                                              ; preds = %590
  %594 = icmp eq i32 %73, %3
  br i1 %594, label %597, label %595

595:                                              ; preds = %593
  tail call fastcc void @highbd_interpolate(i16* %84, i32 %73, i16* %2, i32 %3, i32 %5)
  br label %597

596:                                              ; preds = %20
  tail call fastcc void @highbd_interpolate(i16* %0, i32 %1, i16* %2, i32 %3, i32 %5)
  br label %597

597:                                              ; preds = %596, %593, %595, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_resize_frame420(i8* readonly, i32, i8* readonly, i8* readonly, i32, i32, i32, i8* nocapture, i32, i8* nocapture, i8* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  tail call void @vp9_resize_plane(i8* %0, i32 %5, i32 %6, i32 %1, i8* %7, i32 %12, i32 %13, i32 %8)
  %15 = sdiv i32 %5, 2
  %16 = sdiv i32 %6, 2
  %17 = sdiv i32 %12, 2
  %18 = sdiv i32 %13, 2
  tail call void @vp9_resize_plane(i8* %2, i32 %15, i32 %16, i32 %4, i8* %9, i32 %17, i32 %18, i32 %11)
  tail call void @vp9_resize_plane(i8* %3, i32 %15, i32 %16, i32 %4, i8* %10, i32 %17, i32 %18, i32 %11)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_resize_frame422(i8* readonly, i32, i8* readonly, i8* readonly, i32, i32, i32, i8* nocapture, i32, i8* nocapture, i8* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  tail call void @vp9_resize_plane(i8* %0, i32 %5, i32 %6, i32 %1, i8* %7, i32 %12, i32 %13, i32 %8)
  %15 = sdiv i32 %6, 2
  %16 = sdiv i32 %13, 2
  tail call void @vp9_resize_plane(i8* %2, i32 %5, i32 %15, i32 %4, i8* %9, i32 %12, i32 %16, i32 %11)
  tail call void @vp9_resize_plane(i8* %3, i32 %5, i32 %15, i32 %4, i8* %10, i32 %12, i32 %16, i32 %11)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_resize_frame444(i8* readonly, i32, i8* readonly, i8* readonly, i32, i32, i32, i8* nocapture, i32, i8* nocapture, i8* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  tail call void @vp9_resize_plane(i8* %0, i32 %5, i32 %6, i32 %1, i8* %7, i32 %12, i32 %13, i32 %8)
  tail call void @vp9_resize_plane(i8* %2, i32 %5, i32 %6, i32 %4, i8* %9, i32 %12, i32 %13, i32 %11)
  tail call void @vp9_resize_plane(i8* %3, i32 %5, i32 %6, i32 %4, i8* %10, i32 %12, i32 %13, i32 %11)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_highbd_resize_frame420(i8*, i32, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  tail call void @vp9_highbd_resize_plane(i8* %0, i32 %5, i32 %6, i32 %1, i8* %7, i32 %12, i32 %13, i32 %8, i32 %14)
  %16 = sdiv i32 %5, 2
  %17 = sdiv i32 %6, 2
  %18 = sdiv i32 %12, 2
  %19 = sdiv i32 %13, 2
  tail call void @vp9_highbd_resize_plane(i8* %2, i32 %16, i32 %17, i32 %4, i8* %9, i32 %18, i32 %19, i32 %11, i32 %14)
  tail call void @vp9_highbd_resize_plane(i8* %3, i32 %16, i32 %17, i32 %4, i8* %10, i32 %18, i32 %19, i32 %11, i32 %14)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_highbd_resize_frame422(i8*, i32, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  tail call void @vp9_highbd_resize_plane(i8* %0, i32 %5, i32 %6, i32 %1, i8* %7, i32 %12, i32 %13, i32 %8, i32 %14)
  %16 = sdiv i32 %6, 2
  %17 = sdiv i32 %13, 2
  tail call void @vp9_highbd_resize_plane(i8* %2, i32 %5, i32 %16, i32 %4, i8* %9, i32 %12, i32 %17, i32 %11, i32 %14)
  tail call void @vp9_highbd_resize_plane(i8* %3, i32 %5, i32 %16, i32 %4, i8* %10, i32 %12, i32 %17, i32 %11, i32 %14)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_highbd_resize_frame444(i8*, i32, i8*, i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  tail call void @vp9_highbd_resize_plane(i8* %0, i32 %5, i32 %6, i32 %1, i8* %7, i32 %12, i32 %13, i32 %8, i32 %14)
  tail call void @vp9_highbd_resize_plane(i8* %2, i32 %5, i32 %6, i32 %4, i8* %9, i32 %12, i32 %13, i32 %11, i32 %14)
  tail call void @vp9_highbd_resize_plane(i8* %3, i32 %5, i32 %6, i32 %4, i8* %10, i32 %12, i32 %13, i32 %11, i32 %14)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @interpolate(i8* nocapture readonly, i32, i8* nocapture, i32) unnamed_addr #4 {
  %5 = sext i32 %1 to i64
  %6 = shl nsw i64 %5, 32
  %7 = sdiv i32 %3, 2
  %8 = sext i32 %7 to i64
  %9 = add i64 %6, %8
  %10 = sext i32 %3 to i64
  %11 = udiv i64 %9, %10
  %12 = icmp sgt i32 %1, %3
  br i1 %12, label %13, label %19

13:                                               ; preds = %4
  %14 = sub nsw i32 %1, %3
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 31
  %17 = add nsw i64 %16, %8
  %18 = sdiv i64 %17, %10
  br label %26

19:                                               ; preds = %4
  %20 = sub nsw i32 %3, %1
  %21 = sext i32 %20 to i64
  %22 = shl nsw i64 %21, 31
  %23 = add nsw i64 %22, %8
  %24 = sdiv i64 %23, %10
  %25 = sub nsw i64 0, %24
  br label %26

26:                                               ; preds = %19, %13
  %27 = phi i64 [ %18, %13 ], [ %25, %19 ]
  %28 = shl nsw i32 %3, 4
  %29 = shl nsw i32 %1, 4
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %31, label %41

31:                                               ; preds = %26
  %32 = mul nsw i32 %1, 13
  %33 = icmp slt i32 %28, %32
  br i1 %33, label %34, label %41

34:                                               ; preds = %31
  %35 = mul nsw i32 %1, 11
  %36 = icmp slt i32 %28, %35
  br i1 %36, label %37, label %41

37:                                               ; preds = %34
  %38 = mul nsw i32 %1, 9
  %39 = icmp slt i32 %28, %38
  %40 = select i1 %39, [8 x i16]* getelementptr inbounds ([32 x [8 x i16]], [32 x [8 x i16]]* @filteredinterp_filters500, i64 0, i64 0), [8 x i16]* getelementptr inbounds ([32 x [8 x i16]], [32 x [8 x i16]]* @filteredinterp_filters625, i64 0, i64 0)
  br label %41

41:                                               ; preds = %26, %31, %34, %37
  %42 = phi [8 x i16]* [ getelementptr inbounds ([32 x [8 x i16]], [32 x [8 x i16]]* @filteredinterp_filters1000, i64 0, i64 0), %26 ], [ getelementptr inbounds ([32 x [8 x i16]], [32 x [8 x i16]]* @filteredinterp_filters875, i64 0, i64 0), %31 ], [ getelementptr inbounds ([32 x [8 x i16]], [32 x [8 x i16]]* @filteredinterp_filters750, i64 0, i64 0), %34 ], [ %40, %37 ]
  %43 = icmp slt i64 %27, 12884901888
  br i1 %43, label %44, label %101

44:                                               ; preds = %41
  %45 = sub i64 12884901887, %27
  %46 = udiv i64 %45, %11
  %47 = add i64 %46, 1
  %48 = icmp ult i64 %47, 8
  br i1 %48, label %92, label %49

49:                                               ; preds = %44
  %50 = and i64 %47, -8
  %51 = mul i64 %50, %11
  %52 = add i64 %27, %51
  %53 = add i64 %50, -8
  %54 = lshr exact i64 %53, 3
  %55 = add nuw nsw i64 %54, 1
  %56 = and i64 %55, 7
  %57 = icmp ult i64 %53, 56
  br i1 %57, label %68, label %58

58:                                               ; preds = %49
  %59 = sub nsw i64 %55, %56
  br label %60

60:                                               ; preds = %60, %58
  %61 = phi <4 x i32> [ zeroinitializer, %58 ], [ %64, %60 ]
  %62 = phi <4 x i32> [ zeroinitializer, %58 ], [ %65, %60 ]
  %63 = phi i64 [ %59, %58 ], [ %66, %60 ]
  %64 = add nuw nsw <4 x i32> %61, <i32 8, i32 8, i32 8, i32 8>
  %65 = add nuw nsw <4 x i32> %62, <i32 8, i32 8, i32 8, i32 8>
  %66 = add i64 %63, -8
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %60, !llvm.loop !7

68:                                               ; preds = %60, %49
  %69 = phi <4 x i32> [ undef, %49 ], [ %64, %60 ]
  %70 = phi <4 x i32> [ undef, %49 ], [ %65, %60 ]
  %71 = phi <4 x i32> [ zeroinitializer, %49 ], [ %64, %60 ]
  %72 = phi <4 x i32> [ zeroinitializer, %49 ], [ %65, %60 ]
  %73 = icmp eq i64 %56, 0
  br i1 %73, label %82, label %74

74:                                               ; preds = %68, %74
  %75 = phi <4 x i32> [ %78, %74 ], [ %71, %68 ]
  %76 = phi <4 x i32> [ %79, %74 ], [ %72, %68 ]
  %77 = phi i64 [ %80, %74 ], [ %56, %68 ]
  %78 = add nuw nsw <4 x i32> %75, <i32 1, i32 1, i32 1, i32 1>
  %79 = add nuw nsw <4 x i32> %76, <i32 1, i32 1, i32 1, i32 1>
  %80 = add i64 %77, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %74, !llvm.loop !9

82:                                               ; preds = %74, %68
  %83 = phi <4 x i32> [ %69, %68 ], [ %78, %74 ]
  %84 = phi <4 x i32> [ %70, %68 ], [ %79, %74 ]
  %85 = add nuw <4 x i32> %84, %83
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = shufflevector <4 x i32> %87, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %89 = add <4 x i32> %87, %88
  %90 = extractelement <4 x i32> %89, i32 0
  %91 = icmp eq i64 %47, %50
  br i1 %91, label %101, label %92

92:                                               ; preds = %82, %44
  %93 = phi i64 [ %27, %44 ], [ %52, %82 ]
  %94 = phi i32 [ 0, %44 ], [ %90, %82 ]
  br label %95

95:                                               ; preds = %92, %95
  %96 = phi i64 [ %99, %95 ], [ %93, %92 ]
  %97 = phi i32 [ %98, %95 ], [ %94, %92 ]
  %98 = add nuw nsw i32 %97, 1
  %99 = add nsw i64 %96, %11
  %100 = icmp slt i64 %99, 12884901888
  br i1 %100, label %95, label %101, !llvm.loop !10

101:                                              ; preds = %95, %82, %41
  %102 = phi i32 [ 0, %41 ], [ %90, %82 ], [ %98, %95 ]
  %103 = add nsw i32 %3, -1
  %104 = sext i32 %103 to i64
  %105 = mul nsw i64 %11, %104
  %106 = add nsw i64 %27, %105
  %107 = ashr i64 %106, 32
  %108 = add nsw i64 %107, 4
  %109 = icmp slt i64 %108, %5
  br i1 %109, label %118, label %110

110:                                              ; preds = %101, %110
  %111 = phi i64 [ %114, %110 ], [ %106, %101 ]
  %112 = phi i32 [ %113, %110 ], [ %103, %101 ]
  %113 = add nsw i32 %112, -1
  %114 = sub nsw i64 %111, %11
  %115 = ashr i64 %114, 32
  %116 = add nsw i64 %115, 4
  %117 = icmp slt i64 %116, %5
  br i1 %117, label %118, label %110

118:                                              ; preds = %110, %101
  %119 = phi i32 [ %103, %101 ], [ %113, %110 ]
  %120 = icmp sgt i32 %102, %119
  br i1 %120, label %123, label %121

121:                                              ; preds = %118
  %122 = icmp eq i32 %102, 0
  br i1 %122, label %251, label %257

123:                                              ; preds = %118
  %124 = icmp sgt i32 %3, 0
  br i1 %124, label %125, label %584

125:                                              ; preds = %123
  %126 = add nsw i32 %1, -1
  %127 = insertelement <4 x i32> undef, i32 %1, i32 0
  %128 = shufflevector <4 x i32> %127, <4 x i32> undef, <4 x i32> zeroinitializer
  %129 = insertelement <4 x i32> undef, i32 %126, i32 0
  %130 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %131

131:                                              ; preds = %131, %125
  %132 = phi i64 [ %27, %125 ], [ %249, %131 ]
  %133 = phi i32 [ 0, %125 ], [ %248, %131 ]
  %134 = phi i8* [ %2, %125 ], [ %247, %131 ]
  %135 = lshr i64 %132, 32
  %136 = trunc i64 %135 to i32
  %137 = lshr i64 %132, 27
  %138 = and i64 %137, 31
  %139 = add nsw i32 %136, -3
  %140 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %138, i64 0
  %141 = load i16, i16* %140, align 2
  %142 = sext i16 %141 to i32
  %143 = icmp slt i32 %139, 0
  %144 = icmp slt i32 %139, %1
  %145 = select i1 %144, i32 %139, i32 %126
  %146 = select i1 %143, i32 0, i32 %145
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds i8, i8* %0, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = mul nsw i32 %150, %142
  %152 = add nsw i32 %136, -2
  %153 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %138, i64 1
  %154 = load i16, i16* %153, align 2
  %155 = sext i16 %154 to i32
  %156 = icmp slt i32 %152, 0
  %157 = icmp slt i32 %152, %1
  %158 = select i1 %157, i32 %152, i32 %126
  %159 = select i1 %156, i32 0, i32 %158
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i8, i8* %0, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = mul nsw i32 %163, %155
  %165 = add nsw i32 %164, %151
  %166 = add nsw i32 %136, -1
  %167 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %138, i64 2
  %168 = load i16, i16* %167, align 2
  %169 = sext i16 %168 to i32
  %170 = icmp slt i32 %136, 1
  %171 = icmp sgt i32 %136, %1
  %172 = select i1 %171, i32 %126, i32 %166
  %173 = select i1 %170, i32 0, i32 %172
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i8, i8* %0, i64 %174
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = mul nsw i32 %177, %169
  %179 = add nsw i32 %178, %165
  %180 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %138, i64 3
  %181 = load i16, i16* %180, align 2
  %182 = sext i16 %181 to i32
  %183 = icmp slt i32 %136, 0
  %184 = icmp slt i32 %136, %1
  %185 = select i1 %184, i32 %136, i32 %126
  %186 = select i1 %183, i32 0, i32 %185
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %0, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = mul nsw i32 %190, %182
  %192 = add nsw i32 %191, %179
  %193 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %138, i64 4
  %194 = load i16, i16* %193, align 2
  %195 = sext i16 %194 to i32
  %196 = insertelement <4 x i32> undef, i32 %136, i32 0
  %197 = shufflevector <4 x i32> %196, <4 x i32> undef, <4 x i32> zeroinitializer
  %198 = add nsw <4 x i32> %197, <i32 1, i32 2, i32 3, i32 4>
  %199 = icmp slt <4 x i32> %198, zeroinitializer
  %200 = icmp slt <4 x i32> %198, %128
  %201 = select <4 x i1> %200, <4 x i32> %198, <4 x i32> %130
  %202 = select <4 x i1> %199, <4 x i32> zeroinitializer, <4 x i32> %201
  %203 = extractelement <4 x i32> %202, i32 0
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds i8, i8* %0, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = mul nsw i32 %207, %195
  %209 = add nsw i32 %208, %192
  %210 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %138, i64 5
  %211 = load i16, i16* %210, align 2
  %212 = sext i16 %211 to i32
  %213 = extractelement <4 x i32> %202, i32 1
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds i8, i8* %0, i64 %214
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = mul nsw i32 %217, %212
  %219 = add nsw i32 %218, %209
  %220 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %138, i64 6
  %221 = load i16, i16* %220, align 2
  %222 = sext i16 %221 to i32
  %223 = extractelement <4 x i32> %202, i32 2
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds i8, i8* %0, i64 %224
  %226 = load i8, i8* %225, align 1
  %227 = zext i8 %226 to i32
  %228 = mul nsw i32 %227, %222
  %229 = add nsw i32 %228, %219
  %230 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %138, i64 7
  %231 = load i16, i16* %230, align 2
  %232 = sext i16 %231 to i32
  %233 = extractelement <4 x i32> %202, i32 3
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i8, i8* %0, i64 %234
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = mul nsw i32 %237, %232
  %239 = add nsw i32 %238, %229
  %240 = add nsw i32 %239, 64
  %241 = ashr i32 %240, 7
  %242 = icmp sgt i32 %241, 0
  %243 = select i1 %242, i32 %241, i32 0
  %244 = icmp slt i32 %243, 255
  %245 = select i1 %244, i32 %243, i32 255
  %246 = trunc i32 %245 to i8
  %247 = getelementptr inbounds i8, i8* %134, i64 1
  store i8 %246, i8* %134, align 1
  %248 = add nuw nsw i32 %133, 1
  %249 = add nsw i64 %132, %11
  %250 = icmp eq i32 %248, %3
  br i1 %250, label %584, label %131

251:                                              ; preds = %257, %121
  %252 = phi i8* [ %2, %121 ], [ %365, %257 ]
  %253 = phi i64 [ %27, %121 ], [ %367, %257 ]
  %254 = icmp sgt i32 %102, %119
  br i1 %254, label %369, label %255

255:                                              ; preds = %251
  %256 = add i32 %119, 1
  br label %376

257:                                              ; preds = %121, %257
  %258 = phi i64 [ %367, %257 ], [ %27, %121 ]
  %259 = phi i32 [ %366, %257 ], [ 0, %121 ]
  %260 = phi i8* [ %365, %257 ], [ %2, %121 ]
  %261 = lshr i64 %258, 32
  %262 = trunc i64 %261 to i32
  %263 = lshr i64 %258, 27
  %264 = and i64 %263, 31
  %265 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %264, i64 0
  %266 = load i16, i16* %265, align 2
  %267 = sext i16 %266 to i32
  %268 = icmp sgt i32 %262, 3
  %269 = add nuw nsw i64 %261, 4294967293
  %270 = and i64 %269, 4294967295
  %271 = select i1 %268, i64 %270, i64 0
  %272 = getelementptr inbounds i8, i8* %0, i64 %271
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = mul nsw i32 %274, %267
  %276 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %264, i64 1
  %277 = load i16, i16* %276, align 2
  %278 = sext i16 %277 to i32
  %279 = icmp sgt i32 %262, 2
  %280 = add nuw nsw i64 %261, 4294967294
  %281 = and i64 %280, 4294967295
  %282 = select i1 %279, i64 %281, i64 0
  %283 = getelementptr inbounds i8, i8* %0, i64 %282
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i32
  %286 = mul nsw i32 %285, %278
  %287 = add nsw i32 %286, %275
  %288 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %264, i64 2
  %289 = load i16, i16* %288, align 2
  %290 = sext i16 %289 to i32
  %291 = icmp sgt i32 %262, 1
  %292 = add nuw nsw i64 %261, 4294967295
  %293 = and i64 %292, 4294967295
  %294 = select i1 %291, i64 %293, i64 0
  %295 = getelementptr inbounds i8, i8* %0, i64 %294
  %296 = load i8, i8* %295, align 1
  %297 = zext i8 %296 to i32
  %298 = mul nsw i32 %297, %290
  %299 = add nsw i32 %298, %287
  %300 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %264, i64 3
  %301 = load i16, i16* %300, align 2
  %302 = sext i16 %301 to i32
  %303 = icmp sgt i32 %262, 0
  %304 = select i1 %303, i64 %261, i64 0
  %305 = getelementptr inbounds i8, i8* %0, i64 %304
  %306 = load i8, i8* %305, align 1
  %307 = zext i8 %306 to i32
  %308 = mul nsw i32 %307, %302
  %309 = add nsw i32 %308, %299
  %310 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %264, i64 4
  %311 = load i16, i16* %310, align 2
  %312 = sext i16 %311 to i32
  %313 = icmp sgt i32 %262, -1
  %314 = add nuw nsw i64 %261, 1
  %315 = and i64 %314, 4294967295
  %316 = select i1 %313, i64 %315, i64 0
  %317 = getelementptr inbounds i8, i8* %0, i64 %316
  %318 = load i8, i8* %317, align 1
  %319 = zext i8 %318 to i32
  %320 = mul nsw i32 %319, %312
  %321 = add nsw i32 %320, %309
  %322 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %264, i64 5
  %323 = load i16, i16* %322, align 2
  %324 = sext i16 %323 to i32
  %325 = icmp sgt i32 %262, -2
  %326 = add nuw nsw i64 %261, 2
  %327 = and i64 %326, 4294967295
  %328 = select i1 %325, i64 %327, i64 0
  %329 = getelementptr inbounds i8, i8* %0, i64 %328
  %330 = load i8, i8* %329, align 1
  %331 = zext i8 %330 to i32
  %332 = mul nsw i32 %331, %324
  %333 = add nsw i32 %332, %321
  %334 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %264, i64 6
  %335 = load i16, i16* %334, align 2
  %336 = sext i16 %335 to i32
  %337 = icmp sgt i32 %262, -3
  %338 = add nuw nsw i64 %261, 3
  %339 = and i64 %338, 4294967295
  %340 = select i1 %337, i64 %339, i64 0
  %341 = getelementptr inbounds i8, i8* %0, i64 %340
  %342 = load i8, i8* %341, align 1
  %343 = zext i8 %342 to i32
  %344 = mul nsw i32 %343, %336
  %345 = add nsw i32 %344, %333
  %346 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %264, i64 7
  %347 = load i16, i16* %346, align 2
  %348 = sext i16 %347 to i32
  %349 = icmp sgt i32 %262, -4
  %350 = add nuw nsw i64 %261, 4
  %351 = and i64 %350, 4294967295
  %352 = select i1 %349, i64 %351, i64 0
  %353 = getelementptr inbounds i8, i8* %0, i64 %352
  %354 = load i8, i8* %353, align 1
  %355 = zext i8 %354 to i32
  %356 = mul nsw i32 %355, %348
  %357 = add nsw i32 %356, %345
  %358 = add nsw i32 %357, 64
  %359 = ashr i32 %358, 7
  %360 = icmp sgt i32 %359, 0
  %361 = select i1 %360, i32 %359, i32 0
  %362 = icmp slt i32 %361, 255
  %363 = select i1 %362, i32 %361, i32 255
  %364 = trunc i32 %363 to i8
  %365 = getelementptr inbounds i8, i8* %260, i64 1
  store i8 %364, i8* %260, align 1
  %366 = add nuw nsw i32 %259, 1
  %367 = add nsw i64 %258, %11
  %368 = icmp eq i32 %366, %102
  br i1 %368, label %251, label %257

369:                                              ; preds = %376, %251
  %370 = phi i8* [ %252, %251 ], [ %467, %376 ]
  %371 = phi i32 [ %102, %251 ], [ %256, %376 ]
  %372 = phi i64 [ %253, %251 ], [ %469, %376 ]
  %373 = icmp slt i32 %371, %3
  br i1 %373, label %374, label %584

374:                                              ; preds = %369
  %375 = add nsw i32 %1, -1
  br label %471

376:                                              ; preds = %376, %255
  %377 = phi i64 [ %469, %376 ], [ %253, %255 ]
  %378 = phi i32 [ %468, %376 ], [ %102, %255 ]
  %379 = phi i8* [ %467, %376 ], [ %252, %255 ]
  %380 = lshr i64 %377, 27
  %381 = and i64 %380, 31
  %382 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %381, i64 0
  %383 = load i16, i16* %382, align 2
  %384 = sext i16 %383 to i32
  %385 = add i64 %377, -12884901888
  %386 = ashr i64 %385, 32
  %387 = getelementptr inbounds i8, i8* %0, i64 %386
  %388 = load i8, i8* %387, align 1
  %389 = zext i8 %388 to i32
  %390 = mul nsw i32 %389, %384
  %391 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %381, i64 1
  %392 = load i16, i16* %391, align 2
  %393 = sext i16 %392 to i32
  %394 = add i64 %377, -8589934592
  %395 = ashr i64 %394, 32
  %396 = getelementptr inbounds i8, i8* %0, i64 %395
  %397 = load i8, i8* %396, align 1
  %398 = zext i8 %397 to i32
  %399 = mul nsw i32 %398, %393
  %400 = add nsw i32 %399, %390
  %401 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %381, i64 2
  %402 = load i16, i16* %401, align 2
  %403 = sext i16 %402 to i32
  %404 = add i64 %377, -4294967296
  %405 = ashr i64 %404, 32
  %406 = getelementptr inbounds i8, i8* %0, i64 %405
  %407 = load i8, i8* %406, align 1
  %408 = zext i8 %407 to i32
  %409 = mul nsw i32 %408, %403
  %410 = add nsw i32 %409, %400
  %411 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %381, i64 3
  %412 = load i16, i16* %411, align 2
  %413 = sext i16 %412 to i32
  %414 = ashr i64 %377, 32
  %415 = getelementptr inbounds i8, i8* %0, i64 %414
  %416 = load i8, i8* %415, align 1
  %417 = zext i8 %416 to i32
  %418 = mul nsw i32 %417, %413
  %419 = add nsw i32 %418, %410
  %420 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %381, i64 4
  %421 = load i16, i16* %420, align 2
  %422 = sext i16 %421 to i32
  %423 = add i64 %377, 4294967296
  %424 = ashr i64 %423, 32
  %425 = getelementptr inbounds i8, i8* %0, i64 %424
  %426 = load i8, i8* %425, align 1
  %427 = zext i8 %426 to i32
  %428 = mul nsw i32 %427, %422
  %429 = add nsw i32 %428, %419
  %430 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %381, i64 5
  %431 = load i16, i16* %430, align 2
  %432 = sext i16 %431 to i32
  %433 = add i64 %377, 8589934592
  %434 = ashr i64 %433, 32
  %435 = getelementptr inbounds i8, i8* %0, i64 %434
  %436 = load i8, i8* %435, align 1
  %437 = zext i8 %436 to i32
  %438 = mul nsw i32 %437, %432
  %439 = add nsw i32 %438, %429
  %440 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %381, i64 6
  %441 = load i16, i16* %440, align 2
  %442 = sext i16 %441 to i32
  %443 = add i64 %377, 12884901888
  %444 = ashr i64 %443, 32
  %445 = getelementptr inbounds i8, i8* %0, i64 %444
  %446 = load i8, i8* %445, align 1
  %447 = zext i8 %446 to i32
  %448 = mul nsw i32 %447, %442
  %449 = add nsw i32 %448, %439
  %450 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %381, i64 7
  %451 = load i16, i16* %450, align 2
  %452 = sext i16 %451 to i32
  %453 = add i64 %377, 17179869184
  %454 = ashr i64 %453, 32
  %455 = getelementptr inbounds i8, i8* %0, i64 %454
  %456 = load i8, i8* %455, align 1
  %457 = zext i8 %456 to i32
  %458 = mul nsw i32 %457, %452
  %459 = add nsw i32 %458, %449
  %460 = add nsw i32 %459, 64
  %461 = ashr i32 %460, 7
  %462 = icmp sgt i32 %461, 0
  %463 = select i1 %462, i32 %461, i32 0
  %464 = icmp slt i32 %463, 255
  %465 = select i1 %464, i32 %463, i32 255
  %466 = trunc i32 %465 to i8
  %467 = getelementptr inbounds i8, i8* %379, i64 1
  store i8 %466, i8* %379, align 1
  %468 = add nuw i32 %378, 1
  %469 = add nsw i64 %377, %11
  %470 = icmp eq i32 %468, %256
  br i1 %470, label %369, label %376

471:                                              ; preds = %471, %374
  %472 = phi i64 [ %372, %374 ], [ %582, %471 ]
  %473 = phi i32 [ %371, %374 ], [ %581, %471 ]
  %474 = phi i8* [ %370, %374 ], [ %580, %471 ]
  %475 = lshr i64 %472, 32
  %476 = trunc i64 %475 to i32
  %477 = lshr i64 %472, 27
  %478 = and i64 %477, 31
  %479 = add nsw i32 %476, -3
  %480 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %478, i64 0
  %481 = load i16, i16* %480, align 2
  %482 = sext i16 %481 to i32
  %483 = icmp slt i32 %479, %1
  %484 = select i1 %483, i32 %479, i32 %375
  %485 = sext i32 %484 to i64
  %486 = getelementptr inbounds i8, i8* %0, i64 %485
  %487 = load i8, i8* %486, align 1
  %488 = zext i8 %487 to i32
  %489 = mul nsw i32 %488, %482
  %490 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %478, i64 1
  %491 = load i16, i16* %490, align 2
  %492 = sext i16 %491 to i32
  %493 = add nsw i32 %476, -2
  %494 = icmp slt i32 %493, %1
  %495 = select i1 %494, i32 %493, i32 %375
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds i8, i8* %0, i64 %496
  %498 = load i8, i8* %497, align 1
  %499 = zext i8 %498 to i32
  %500 = mul nsw i32 %499, %492
  %501 = add nsw i32 %500, %489
  %502 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %478, i64 2
  %503 = load i16, i16* %502, align 2
  %504 = sext i16 %503 to i32
  %505 = add nsw i32 %476, -1
  %506 = icmp sgt i32 %476, %1
  %507 = select i1 %506, i32 %375, i32 %505
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds i8, i8* %0, i64 %508
  %510 = load i8, i8* %509, align 1
  %511 = zext i8 %510 to i32
  %512 = mul nsw i32 %511, %504
  %513 = add nsw i32 %512, %501
  %514 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %478, i64 3
  %515 = load i16, i16* %514, align 2
  %516 = sext i16 %515 to i32
  %517 = icmp slt i32 %476, %1
  %518 = select i1 %517, i32 %476, i32 %375
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds i8, i8* %0, i64 %519
  %521 = load i8, i8* %520, align 1
  %522 = zext i8 %521 to i32
  %523 = mul nsw i32 %522, %516
  %524 = add nsw i32 %523, %513
  %525 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %478, i64 4
  %526 = load i16, i16* %525, align 2
  %527 = sext i16 %526 to i32
  %528 = add nsw i32 %476, 1
  %529 = icmp slt i32 %528, %1
  %530 = select i1 %529, i32 %528, i32 %375
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds i8, i8* %0, i64 %531
  %533 = load i8, i8* %532, align 1
  %534 = zext i8 %533 to i32
  %535 = mul nsw i32 %534, %527
  %536 = add nsw i32 %535, %524
  %537 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %478, i64 5
  %538 = load i16, i16* %537, align 2
  %539 = sext i16 %538 to i32
  %540 = add nsw i32 %476, 2
  %541 = icmp slt i32 %540, %1
  %542 = select i1 %541, i32 %540, i32 %375
  %543 = sext i32 %542 to i64
  %544 = getelementptr inbounds i8, i8* %0, i64 %543
  %545 = load i8, i8* %544, align 1
  %546 = zext i8 %545 to i32
  %547 = mul nsw i32 %546, %539
  %548 = add nsw i32 %547, %536
  %549 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %478, i64 6
  %550 = load i16, i16* %549, align 2
  %551 = sext i16 %550 to i32
  %552 = add nsw i32 %476, 3
  %553 = icmp slt i32 %552, %1
  %554 = select i1 %553, i32 %552, i32 %375
  %555 = sext i32 %554 to i64
  %556 = getelementptr inbounds i8, i8* %0, i64 %555
  %557 = load i8, i8* %556, align 1
  %558 = zext i8 %557 to i32
  %559 = mul nsw i32 %558, %551
  %560 = add nsw i32 %559, %548
  %561 = getelementptr inbounds [8 x i16], [8 x i16]* %42, i64 %478, i64 7
  %562 = load i16, i16* %561, align 2
  %563 = sext i16 %562 to i32
  %564 = add nsw i32 %476, 4
  %565 = icmp slt i32 %564, %1
  %566 = select i1 %565, i32 %564, i32 %375
  %567 = sext i32 %566 to i64
  %568 = getelementptr inbounds i8, i8* %0, i64 %567
  %569 = load i8, i8* %568, align 1
  %570 = zext i8 %569 to i32
  %571 = mul nsw i32 %570, %563
  %572 = add nsw i32 %571, %560
  %573 = add nsw i32 %572, 64
  %574 = ashr i32 %573, 7
  %575 = icmp sgt i32 %574, 0
  %576 = select i1 %575, i32 %574, i32 0
  %577 = icmp slt i32 %576, 255
  %578 = select i1 %577, i32 %576, i32 255
  %579 = trunc i32 %578 to i8
  %580 = getelementptr inbounds i8, i8* %474, i64 1
  store i8 %579, i8* %474, align 1
  %581 = add nuw nsw i32 %473, 1
  %582 = add nsw i64 %472, %11
  %583 = icmp eq i32 %581, %3
  br i1 %583, label %584, label %471

584:                                              ; preds = %471, %131, %369, %123
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @highbd_interpolate(i16* nocapture readonly, i32, i16* nocapture, i32, i32) unnamed_addr #4 {
  %6 = sext i32 %1 to i64
  %7 = shl nsw i64 %6, 32
  %8 = sdiv i32 %3, 2
  %9 = sext i32 %8 to i64
  %10 = add i64 %7, %9
  %11 = sext i32 %3 to i64
  %12 = udiv i64 %10, %11
  %13 = icmp sgt i32 %1, %3
  br i1 %13, label %14, label %20

14:                                               ; preds = %5
  %15 = sub nsw i32 %1, %3
  %16 = sext i32 %15 to i64
  %17 = shl nsw i64 %16, 31
  %18 = add nsw i64 %17, %9
  %19 = sdiv i64 %18, %11
  br label %27

20:                                               ; preds = %5
  %21 = sub nsw i32 %3, %1
  %22 = sext i32 %21 to i64
  %23 = shl nsw i64 %22, 31
  %24 = add nsw i64 %23, %9
  %25 = sdiv i64 %24, %11
  %26 = sub nsw i64 0, %25
  br label %27

27:                                               ; preds = %20, %14
  %28 = phi i64 [ %19, %14 ], [ %26, %20 ]
  %29 = shl nsw i32 %3, 4
  %30 = shl nsw i32 %1, 4
  %31 = icmp slt i32 %29, %30
  br i1 %31, label %32, label %42

32:                                               ; preds = %27
  %33 = mul nsw i32 %1, 13
  %34 = icmp slt i32 %29, %33
  br i1 %34, label %35, label %42

35:                                               ; preds = %32
  %36 = mul nsw i32 %1, 11
  %37 = icmp slt i32 %29, %36
  br i1 %37, label %38, label %42

38:                                               ; preds = %35
  %39 = mul nsw i32 %1, 9
  %40 = icmp slt i32 %29, %39
  %41 = select i1 %40, [8 x i16]* getelementptr inbounds ([32 x [8 x i16]], [32 x [8 x i16]]* @filteredinterp_filters500, i64 0, i64 0), [8 x i16]* getelementptr inbounds ([32 x [8 x i16]], [32 x [8 x i16]]* @filteredinterp_filters625, i64 0, i64 0)
  br label %42

42:                                               ; preds = %27, %32, %35, %38
  %43 = phi [8 x i16]* [ getelementptr inbounds ([32 x [8 x i16]], [32 x [8 x i16]]* @filteredinterp_filters1000, i64 0, i64 0), %27 ], [ getelementptr inbounds ([32 x [8 x i16]], [32 x [8 x i16]]* @filteredinterp_filters875, i64 0, i64 0), %32 ], [ getelementptr inbounds ([32 x [8 x i16]], [32 x [8 x i16]]* @filteredinterp_filters750, i64 0, i64 0), %35 ], [ %41, %38 ]
  %44 = icmp slt i64 %28, 12884901888
  br i1 %44, label %45, label %102

45:                                               ; preds = %42
  %46 = sub i64 12884901887, %28
  %47 = udiv i64 %46, %12
  %48 = add i64 %47, 1
  %49 = icmp ult i64 %48, 8
  br i1 %49, label %93, label %50

50:                                               ; preds = %45
  %51 = and i64 %48, -8
  %52 = mul i64 %51, %12
  %53 = add i64 %28, %52
  %54 = add i64 %51, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp ult i64 %54, 56
  br i1 %58, label %69, label %59

59:                                               ; preds = %50
  %60 = sub nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi <4 x i32> [ zeroinitializer, %59 ], [ %65, %61 ]
  %63 = phi <4 x i32> [ zeroinitializer, %59 ], [ %66, %61 ]
  %64 = phi i64 [ %60, %59 ], [ %67, %61 ]
  %65 = add nuw nsw <4 x i32> %62, <i32 8, i32 8, i32 8, i32 8>
  %66 = add nuw nsw <4 x i32> %63, <i32 8, i32 8, i32 8, i32 8>
  %67 = add i64 %64, -8
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %61, !llvm.loop !12

69:                                               ; preds = %61, %50
  %70 = phi <4 x i32> [ undef, %50 ], [ %65, %61 ]
  %71 = phi <4 x i32> [ undef, %50 ], [ %66, %61 ]
  %72 = phi <4 x i32> [ zeroinitializer, %50 ], [ %65, %61 ]
  %73 = phi <4 x i32> [ zeroinitializer, %50 ], [ %66, %61 ]
  %74 = icmp eq i64 %57, 0
  br i1 %74, label %83, label %75

75:                                               ; preds = %69, %75
  %76 = phi <4 x i32> [ %79, %75 ], [ %72, %69 ]
  %77 = phi <4 x i32> [ %80, %75 ], [ %73, %69 ]
  %78 = phi i64 [ %81, %75 ], [ %57, %69 ]
  %79 = add nuw nsw <4 x i32> %76, <i32 1, i32 1, i32 1, i32 1>
  %80 = add nuw nsw <4 x i32> %77, <i32 1, i32 1, i32 1, i32 1>
  %81 = add i64 %78, -1
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %75, !llvm.loop !13

83:                                               ; preds = %75, %69
  %84 = phi <4 x i32> [ %70, %69 ], [ %79, %75 ]
  %85 = phi <4 x i32> [ %71, %69 ], [ %80, %75 ]
  %86 = add nuw <4 x i32> %85, %84
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %88 = add <4 x i32> %86, %87
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %90 = add <4 x i32> %88, %89
  %91 = extractelement <4 x i32> %90, i32 0
  %92 = icmp eq i64 %48, %51
  br i1 %92, label %102, label %93

93:                                               ; preds = %83, %45
  %94 = phi i64 [ %28, %45 ], [ %53, %83 ]
  %95 = phi i32 [ 0, %45 ], [ %91, %83 ]
  br label %96

96:                                               ; preds = %93, %96
  %97 = phi i64 [ %100, %96 ], [ %94, %93 ]
  %98 = phi i32 [ %99, %96 ], [ %95, %93 ]
  %99 = add nuw nsw i32 %98, 1
  %100 = add nsw i64 %97, %12
  %101 = icmp slt i64 %100, 12884901888
  br i1 %101, label %96, label %102, !llvm.loop !14

102:                                              ; preds = %96, %83, %42
  %103 = phi i32 [ 0, %42 ], [ %91, %83 ], [ %99, %96 ]
  %104 = add nsw i32 %3, -1
  %105 = sext i32 %104 to i64
  %106 = mul nsw i64 %12, %105
  %107 = add nsw i64 %28, %106
  %108 = ashr i64 %107, 32
  %109 = add nsw i64 %108, 4
  %110 = icmp slt i64 %109, %6
  br i1 %110, label %119, label %111

111:                                              ; preds = %102, %111
  %112 = phi i64 [ %115, %111 ], [ %107, %102 ]
  %113 = phi i32 [ %114, %111 ], [ %104, %102 ]
  %114 = add nsw i32 %113, -1
  %115 = sub nsw i64 %112, %12
  %116 = ashr i64 %115, 32
  %117 = add nsw i64 %116, 4
  %118 = icmp slt i64 %117, %6
  br i1 %118, label %119, label %111

119:                                              ; preds = %111, %102
  %120 = phi i32 [ %104, %102 ], [ %114, %111 ]
  %121 = icmp sgt i32 %103, %120
  br i1 %121, label %129, label %122

122:                                              ; preds = %119
  %123 = icmp eq i32 %103, 0
  br i1 %123, label %261, label %124

124:                                              ; preds = %122
  %125 = icmp eq i32 %4, 10
  %126 = select i1 %125, i32 1023, i32 255
  %127 = icmp eq i32 %4, 12
  %128 = select i1 %127, i32 4095, i32 %126
  br label %271

129:                                              ; preds = %119
  %130 = icmp sgt i32 %3, 0
  br i1 %130, label %131, label %602

131:                                              ; preds = %129
  %132 = add nsw i32 %1, -1
  %133 = insertelement <4 x i32> undef, i32 %1, i32 0
  %134 = shufflevector <4 x i32> %133, <4 x i32> undef, <4 x i32> zeroinitializer
  %135 = insertelement <4 x i32> undef, i32 %132, i32 0
  %136 = shufflevector <4 x i32> %135, <4 x i32> undef, <4 x i32> zeroinitializer
  %137 = icmp eq i32 %4, 10
  %138 = select i1 %137, i32 1023, i32 255
  %139 = icmp eq i32 %4, 12
  %140 = select i1 %139, i32 4095, i32 %138
  br label %141

141:                                              ; preds = %141, %131
  %142 = phi i64 [ %28, %131 ], [ %259, %141 ]
  %143 = phi i32 [ 0, %131 ], [ %258, %141 ]
  %144 = phi i16* [ %2, %131 ], [ %257, %141 ]
  %145 = lshr i64 %142, 32
  %146 = trunc i64 %145 to i32
  %147 = lshr i64 %142, 27
  %148 = and i64 %147, 31
  %149 = add nsw i32 %146, -3
  %150 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %148, i64 0
  %151 = load i16, i16* %150, align 2
  %152 = sext i16 %151 to i32
  %153 = icmp slt i32 %149, 0
  %154 = icmp slt i32 %149, %1
  %155 = select i1 %154, i32 %149, i32 %132
  %156 = select i1 %153, i32 0, i32 %155
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i16, i16* %0, i64 %157
  %159 = load i16, i16* %158, align 2
  %160 = zext i16 %159 to i32
  %161 = mul nsw i32 %160, %152
  %162 = add nsw i32 %146, -2
  %163 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %148, i64 1
  %164 = load i16, i16* %163, align 2
  %165 = sext i16 %164 to i32
  %166 = icmp slt i32 %162, 0
  %167 = icmp slt i32 %162, %1
  %168 = select i1 %167, i32 %162, i32 %132
  %169 = select i1 %166, i32 0, i32 %168
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i16, i16* %0, i64 %170
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nsw i32 %173, %165
  %175 = add nsw i32 %174, %161
  %176 = add nsw i32 %146, -1
  %177 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %148, i64 2
  %178 = load i16, i16* %177, align 2
  %179 = sext i16 %178 to i32
  %180 = icmp slt i32 %146, 1
  %181 = icmp sgt i32 %146, %1
  %182 = select i1 %181, i32 %132, i32 %176
  %183 = select i1 %180, i32 0, i32 %182
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds i16, i16* %0, i64 %184
  %186 = load i16, i16* %185, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nsw i32 %187, %179
  %189 = add nsw i32 %188, %175
  %190 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %148, i64 3
  %191 = load i16, i16* %190, align 2
  %192 = sext i16 %191 to i32
  %193 = icmp slt i32 %146, 0
  %194 = icmp slt i32 %146, %1
  %195 = select i1 %194, i32 %146, i32 %132
  %196 = select i1 %193, i32 0, i32 %195
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i16, i16* %0, i64 %197
  %199 = load i16, i16* %198, align 2
  %200 = zext i16 %199 to i32
  %201 = mul nsw i32 %200, %192
  %202 = add nsw i32 %201, %189
  %203 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %148, i64 4
  %204 = load i16, i16* %203, align 2
  %205 = sext i16 %204 to i32
  %206 = insertelement <4 x i32> undef, i32 %146, i32 0
  %207 = shufflevector <4 x i32> %206, <4 x i32> undef, <4 x i32> zeroinitializer
  %208 = add nsw <4 x i32> %207, <i32 1, i32 2, i32 3, i32 4>
  %209 = icmp slt <4 x i32> %208, zeroinitializer
  %210 = icmp slt <4 x i32> %208, %134
  %211 = select <4 x i1> %210, <4 x i32> %208, <4 x i32> %136
  %212 = select <4 x i1> %209, <4 x i32> zeroinitializer, <4 x i32> %211
  %213 = extractelement <4 x i32> %212, i32 0
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds i16, i16* %0, i64 %214
  %216 = load i16, i16* %215, align 2
  %217 = zext i16 %216 to i32
  %218 = mul nsw i32 %217, %205
  %219 = add nsw i32 %218, %202
  %220 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %148, i64 5
  %221 = load i16, i16* %220, align 2
  %222 = sext i16 %221 to i32
  %223 = extractelement <4 x i32> %212, i32 1
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds i16, i16* %0, i64 %224
  %226 = load i16, i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = mul nsw i32 %227, %222
  %229 = add nsw i32 %228, %219
  %230 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %148, i64 6
  %231 = load i16, i16* %230, align 2
  %232 = sext i16 %231 to i32
  %233 = extractelement <4 x i32> %212, i32 2
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i16, i16* %0, i64 %234
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nsw i32 %237, %232
  %239 = add nsw i32 %238, %229
  %240 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %148, i64 7
  %241 = load i16, i16* %240, align 2
  %242 = sext i16 %241 to i32
  %243 = extractelement <4 x i32> %212, i32 3
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds i16, i16* %0, i64 %244
  %246 = load i16, i16* %245, align 2
  %247 = zext i16 %246 to i32
  %248 = mul nsw i32 %247, %242
  %249 = add nsw i32 %248, %239
  %250 = add nsw i32 %249, 64
  %251 = ashr i32 %250, 7
  %252 = icmp slt i32 %251, %140
  %253 = select i1 %252, i32 %251, i32 %140
  %254 = icmp sgt i32 %253, 0
  %255 = select i1 %254, i32 %253, i32 0
  %256 = trunc i32 %255 to i16
  %257 = getelementptr inbounds i16, i16* %144, i64 1
  store i16 %256, i16* %144, align 2
  %258 = add nuw nsw i32 %143, 1
  %259 = add nsw i64 %142, %12
  %260 = icmp eq i32 %258, %3
  br i1 %260, label %602, label %141

261:                                              ; preds = %271, %122
  %262 = phi i16* [ %2, %122 ], [ %379, %271 ]
  %263 = phi i64 [ %28, %122 ], [ %381, %271 ]
  %264 = icmp sgt i32 %103, %120
  br i1 %264, label %383, label %265

265:                                              ; preds = %261
  %266 = add i32 %120, 1
  %267 = icmp eq i32 %4, 10
  %268 = select i1 %267, i32 1023, i32 255
  %269 = icmp eq i32 %4, 12
  %270 = select i1 %269, i32 4095, i32 %268
  br label %394

271:                                              ; preds = %124, %271
  %272 = phi i64 [ %381, %271 ], [ %28, %124 ]
  %273 = phi i32 [ %380, %271 ], [ 0, %124 ]
  %274 = phi i16* [ %379, %271 ], [ %2, %124 ]
  %275 = lshr i64 %272, 32
  %276 = trunc i64 %275 to i32
  %277 = lshr i64 %272, 27
  %278 = and i64 %277, 31
  %279 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %278, i64 0
  %280 = load i16, i16* %279, align 2
  %281 = sext i16 %280 to i32
  %282 = icmp sgt i32 %276, 3
  %283 = add nuw nsw i64 %275, 4294967293
  %284 = and i64 %283, 4294967295
  %285 = select i1 %282, i64 %284, i64 0
  %286 = getelementptr inbounds i16, i16* %0, i64 %285
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = mul nsw i32 %288, %281
  %290 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %278, i64 1
  %291 = load i16, i16* %290, align 2
  %292 = sext i16 %291 to i32
  %293 = icmp sgt i32 %276, 2
  %294 = add nuw nsw i64 %275, 4294967294
  %295 = and i64 %294, 4294967295
  %296 = select i1 %293, i64 %295, i64 0
  %297 = getelementptr inbounds i16, i16* %0, i64 %296
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = mul nsw i32 %299, %292
  %301 = add nsw i32 %300, %289
  %302 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %278, i64 2
  %303 = load i16, i16* %302, align 2
  %304 = sext i16 %303 to i32
  %305 = icmp sgt i32 %276, 1
  %306 = add nuw nsw i64 %275, 4294967295
  %307 = and i64 %306, 4294967295
  %308 = select i1 %305, i64 %307, i64 0
  %309 = getelementptr inbounds i16, i16* %0, i64 %308
  %310 = load i16, i16* %309, align 2
  %311 = zext i16 %310 to i32
  %312 = mul nsw i32 %311, %304
  %313 = add nsw i32 %312, %301
  %314 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %278, i64 3
  %315 = load i16, i16* %314, align 2
  %316 = sext i16 %315 to i32
  %317 = icmp sgt i32 %276, 0
  %318 = select i1 %317, i64 %275, i64 0
  %319 = getelementptr inbounds i16, i16* %0, i64 %318
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = mul nsw i32 %321, %316
  %323 = add nsw i32 %322, %313
  %324 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %278, i64 4
  %325 = load i16, i16* %324, align 2
  %326 = sext i16 %325 to i32
  %327 = icmp sgt i32 %276, -1
  %328 = add nuw nsw i64 %275, 1
  %329 = and i64 %328, 4294967295
  %330 = select i1 %327, i64 %329, i64 0
  %331 = getelementptr inbounds i16, i16* %0, i64 %330
  %332 = load i16, i16* %331, align 2
  %333 = zext i16 %332 to i32
  %334 = mul nsw i32 %333, %326
  %335 = add nsw i32 %334, %323
  %336 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %278, i64 5
  %337 = load i16, i16* %336, align 2
  %338 = sext i16 %337 to i32
  %339 = icmp sgt i32 %276, -2
  %340 = add nuw nsw i64 %275, 2
  %341 = and i64 %340, 4294967295
  %342 = select i1 %339, i64 %341, i64 0
  %343 = getelementptr inbounds i16, i16* %0, i64 %342
  %344 = load i16, i16* %343, align 2
  %345 = zext i16 %344 to i32
  %346 = mul nsw i32 %345, %338
  %347 = add nsw i32 %346, %335
  %348 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %278, i64 6
  %349 = load i16, i16* %348, align 2
  %350 = sext i16 %349 to i32
  %351 = icmp sgt i32 %276, -3
  %352 = add nuw nsw i64 %275, 3
  %353 = and i64 %352, 4294967295
  %354 = select i1 %351, i64 %353, i64 0
  %355 = getelementptr inbounds i16, i16* %0, i64 %354
  %356 = load i16, i16* %355, align 2
  %357 = zext i16 %356 to i32
  %358 = mul nsw i32 %357, %350
  %359 = add nsw i32 %358, %347
  %360 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %278, i64 7
  %361 = load i16, i16* %360, align 2
  %362 = sext i16 %361 to i32
  %363 = icmp sgt i32 %276, -4
  %364 = add nuw nsw i64 %275, 4
  %365 = and i64 %364, 4294967295
  %366 = select i1 %363, i64 %365, i64 0
  %367 = getelementptr inbounds i16, i16* %0, i64 %366
  %368 = load i16, i16* %367, align 2
  %369 = zext i16 %368 to i32
  %370 = mul nsw i32 %369, %362
  %371 = add nsw i32 %370, %359
  %372 = add nsw i32 %371, 64
  %373 = ashr i32 %372, 7
  %374 = icmp slt i32 %373, %128
  %375 = select i1 %374, i32 %373, i32 %128
  %376 = icmp sgt i32 %375, 0
  %377 = select i1 %376, i32 %375, i32 0
  %378 = trunc i32 %377 to i16
  %379 = getelementptr inbounds i16, i16* %274, i64 1
  store i16 %378, i16* %274, align 2
  %380 = add nuw nsw i32 %273, 1
  %381 = add nsw i64 %272, %12
  %382 = icmp eq i32 %380, %103
  br i1 %382, label %261, label %271

383:                                              ; preds = %394, %261
  %384 = phi i16* [ %262, %261 ], [ %485, %394 ]
  %385 = phi i32 [ %103, %261 ], [ %266, %394 ]
  %386 = phi i64 [ %263, %261 ], [ %487, %394 ]
  %387 = icmp slt i32 %385, %3
  br i1 %387, label %388, label %602

388:                                              ; preds = %383
  %389 = add nsw i32 %1, -1
  %390 = icmp eq i32 %4, 10
  %391 = select i1 %390, i32 1023, i32 255
  %392 = icmp eq i32 %4, 12
  %393 = select i1 %392, i32 4095, i32 %391
  br label %489

394:                                              ; preds = %394, %265
  %395 = phi i64 [ %487, %394 ], [ %263, %265 ]
  %396 = phi i32 [ %486, %394 ], [ %103, %265 ]
  %397 = phi i16* [ %485, %394 ], [ %262, %265 ]
  %398 = lshr i64 %395, 27
  %399 = and i64 %398, 31
  %400 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %399, i64 0
  %401 = load i16, i16* %400, align 2
  %402 = sext i16 %401 to i32
  %403 = add i64 %395, -12884901888
  %404 = ashr i64 %403, 32
  %405 = getelementptr inbounds i16, i16* %0, i64 %404
  %406 = load i16, i16* %405, align 2
  %407 = zext i16 %406 to i32
  %408 = mul nsw i32 %407, %402
  %409 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %399, i64 1
  %410 = load i16, i16* %409, align 2
  %411 = sext i16 %410 to i32
  %412 = add i64 %395, -8589934592
  %413 = ashr i64 %412, 32
  %414 = getelementptr inbounds i16, i16* %0, i64 %413
  %415 = load i16, i16* %414, align 2
  %416 = zext i16 %415 to i32
  %417 = mul nsw i32 %416, %411
  %418 = add nsw i32 %417, %408
  %419 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %399, i64 2
  %420 = load i16, i16* %419, align 2
  %421 = sext i16 %420 to i32
  %422 = add i64 %395, -4294967296
  %423 = ashr i64 %422, 32
  %424 = getelementptr inbounds i16, i16* %0, i64 %423
  %425 = load i16, i16* %424, align 2
  %426 = zext i16 %425 to i32
  %427 = mul nsw i32 %426, %421
  %428 = add nsw i32 %427, %418
  %429 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %399, i64 3
  %430 = load i16, i16* %429, align 2
  %431 = sext i16 %430 to i32
  %432 = ashr i64 %395, 32
  %433 = getelementptr inbounds i16, i16* %0, i64 %432
  %434 = load i16, i16* %433, align 2
  %435 = zext i16 %434 to i32
  %436 = mul nsw i32 %435, %431
  %437 = add nsw i32 %436, %428
  %438 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %399, i64 4
  %439 = load i16, i16* %438, align 2
  %440 = sext i16 %439 to i32
  %441 = add i64 %395, 4294967296
  %442 = ashr i64 %441, 32
  %443 = getelementptr inbounds i16, i16* %0, i64 %442
  %444 = load i16, i16* %443, align 2
  %445 = zext i16 %444 to i32
  %446 = mul nsw i32 %445, %440
  %447 = add nsw i32 %446, %437
  %448 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %399, i64 5
  %449 = load i16, i16* %448, align 2
  %450 = sext i16 %449 to i32
  %451 = add i64 %395, 8589934592
  %452 = ashr i64 %451, 32
  %453 = getelementptr inbounds i16, i16* %0, i64 %452
  %454 = load i16, i16* %453, align 2
  %455 = zext i16 %454 to i32
  %456 = mul nsw i32 %455, %450
  %457 = add nsw i32 %456, %447
  %458 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %399, i64 6
  %459 = load i16, i16* %458, align 2
  %460 = sext i16 %459 to i32
  %461 = add i64 %395, 12884901888
  %462 = ashr i64 %461, 32
  %463 = getelementptr inbounds i16, i16* %0, i64 %462
  %464 = load i16, i16* %463, align 2
  %465 = zext i16 %464 to i32
  %466 = mul nsw i32 %465, %460
  %467 = add nsw i32 %466, %457
  %468 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %399, i64 7
  %469 = load i16, i16* %468, align 2
  %470 = sext i16 %469 to i32
  %471 = add i64 %395, 17179869184
  %472 = ashr i64 %471, 32
  %473 = getelementptr inbounds i16, i16* %0, i64 %472
  %474 = load i16, i16* %473, align 2
  %475 = zext i16 %474 to i32
  %476 = mul nsw i32 %475, %470
  %477 = add nsw i32 %476, %467
  %478 = add nsw i32 %477, 64
  %479 = ashr i32 %478, 7
  %480 = icmp slt i32 %479, %270
  %481 = select i1 %480, i32 %479, i32 %270
  %482 = icmp sgt i32 %481, 0
  %483 = select i1 %482, i32 %481, i32 0
  %484 = trunc i32 %483 to i16
  %485 = getelementptr inbounds i16, i16* %397, i64 1
  store i16 %484, i16* %397, align 2
  %486 = add nuw i32 %396, 1
  %487 = add nsw i64 %395, %12
  %488 = icmp eq i32 %486, %266
  br i1 %488, label %383, label %394

489:                                              ; preds = %489, %388
  %490 = phi i64 [ %386, %388 ], [ %600, %489 ]
  %491 = phi i32 [ %385, %388 ], [ %599, %489 ]
  %492 = phi i16* [ %384, %388 ], [ %598, %489 ]
  %493 = lshr i64 %490, 32
  %494 = trunc i64 %493 to i32
  %495 = lshr i64 %490, 27
  %496 = and i64 %495, 31
  %497 = add nsw i32 %494, -3
  %498 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %496, i64 0
  %499 = load i16, i16* %498, align 2
  %500 = sext i16 %499 to i32
  %501 = icmp slt i32 %497, %1
  %502 = select i1 %501, i32 %497, i32 %389
  %503 = sext i32 %502 to i64
  %504 = getelementptr inbounds i16, i16* %0, i64 %503
  %505 = load i16, i16* %504, align 2
  %506 = zext i16 %505 to i32
  %507 = mul nsw i32 %506, %500
  %508 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %496, i64 1
  %509 = load i16, i16* %508, align 2
  %510 = sext i16 %509 to i32
  %511 = add nsw i32 %494, -2
  %512 = icmp slt i32 %511, %1
  %513 = select i1 %512, i32 %511, i32 %389
  %514 = sext i32 %513 to i64
  %515 = getelementptr inbounds i16, i16* %0, i64 %514
  %516 = load i16, i16* %515, align 2
  %517 = zext i16 %516 to i32
  %518 = mul nsw i32 %517, %510
  %519 = add nsw i32 %518, %507
  %520 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %496, i64 2
  %521 = load i16, i16* %520, align 2
  %522 = sext i16 %521 to i32
  %523 = add nsw i32 %494, -1
  %524 = icmp sgt i32 %494, %1
  %525 = select i1 %524, i32 %389, i32 %523
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, i16* %0, i64 %526
  %528 = load i16, i16* %527, align 2
  %529 = zext i16 %528 to i32
  %530 = mul nsw i32 %529, %522
  %531 = add nsw i32 %530, %519
  %532 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %496, i64 3
  %533 = load i16, i16* %532, align 2
  %534 = sext i16 %533 to i32
  %535 = icmp slt i32 %494, %1
  %536 = select i1 %535, i32 %494, i32 %389
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds i16, i16* %0, i64 %537
  %539 = load i16, i16* %538, align 2
  %540 = zext i16 %539 to i32
  %541 = mul nsw i32 %540, %534
  %542 = add nsw i32 %541, %531
  %543 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %496, i64 4
  %544 = load i16, i16* %543, align 2
  %545 = sext i16 %544 to i32
  %546 = add nsw i32 %494, 1
  %547 = icmp slt i32 %546, %1
  %548 = select i1 %547, i32 %546, i32 %389
  %549 = sext i32 %548 to i64
  %550 = getelementptr inbounds i16, i16* %0, i64 %549
  %551 = load i16, i16* %550, align 2
  %552 = zext i16 %551 to i32
  %553 = mul nsw i32 %552, %545
  %554 = add nsw i32 %553, %542
  %555 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %496, i64 5
  %556 = load i16, i16* %555, align 2
  %557 = sext i16 %556 to i32
  %558 = add nsw i32 %494, 2
  %559 = icmp slt i32 %558, %1
  %560 = select i1 %559, i32 %558, i32 %389
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds i16, i16* %0, i64 %561
  %563 = load i16, i16* %562, align 2
  %564 = zext i16 %563 to i32
  %565 = mul nsw i32 %564, %557
  %566 = add nsw i32 %565, %554
  %567 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %496, i64 6
  %568 = load i16, i16* %567, align 2
  %569 = sext i16 %568 to i32
  %570 = add nsw i32 %494, 3
  %571 = icmp slt i32 %570, %1
  %572 = select i1 %571, i32 %570, i32 %389
  %573 = sext i32 %572 to i64
  %574 = getelementptr inbounds i16, i16* %0, i64 %573
  %575 = load i16, i16* %574, align 2
  %576 = zext i16 %575 to i32
  %577 = mul nsw i32 %576, %569
  %578 = add nsw i32 %577, %566
  %579 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 %496, i64 7
  %580 = load i16, i16* %579, align 2
  %581 = sext i16 %580 to i32
  %582 = add nsw i32 %494, 4
  %583 = icmp slt i32 %582, %1
  %584 = select i1 %583, i32 %582, i32 %389
  %585 = sext i32 %584 to i64
  %586 = getelementptr inbounds i16, i16* %0, i64 %585
  %587 = load i16, i16* %586, align 2
  %588 = zext i16 %587 to i32
  %589 = mul nsw i32 %588, %581
  %590 = add nsw i32 %589, %578
  %591 = add nsw i32 %590, 64
  %592 = ashr i32 %591, 7
  %593 = icmp slt i32 %592, %393
  %594 = select i1 %593, i32 %592, i32 %393
  %595 = icmp sgt i32 %594, 0
  %596 = select i1 %595, i32 %594, i32 0
  %597 = trunc i32 %596 to i16
  %598 = getelementptr inbounds i16, i16* %492, i64 1
  store i16 %597, i16* %492, align 2
  %599 = add nuw nsw i32 %491, 1
  %600 = add nsw i64 %490, %12
  %601 = icmp eq i32 %599, %3
  br i1 %601, label %602, label %489

602:                                              ; preds = %489, %141, %383, %129
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !11, !8}
!11 = !{!"llvm.loop.unroll.runtime.disable"}
!12 = distinct !{!12, !8}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !11, !8}
