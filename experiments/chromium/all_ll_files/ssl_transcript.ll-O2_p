; ModuleID = '../../third_party/boringssl/src/ssl/ssl_transcript.cc'
source_filename = "../../third_party/boringssl/src/ssl/ssl_transcript.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.bssl::SSLTranscript" = type { %"class.std::__1::unique_ptr", %"class.bssl::internal::StackAllocated" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.buf_mem_st* }
%struct.buf_mem_st = type { i64, i8*, i64 }
%"class.bssl::internal::StackAllocated" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.env_md_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%struct.ssl_cipher_st = type { i8*, i8*, i32, i32, i32, i32, i32, i32 }
%struct.engine_st = type opaque
%struct.ssl_session_st = type { i32, i16, i16, i16, i32, [48 x i8], i32, [32 x i8], i8, [32 x i8], %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.6", %"struct.bssl::SSL_X509_METHOD"*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509*, i64, i32, i32, i64, %struct.ssl_cipher_st*, %struct.crypto_ex_data_st, %struct.ssl_session_st*, %struct.ssl_session_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.108", [32 x i8], [64 x i8], i8, i32, i32, i32, %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, %"class.bssl::Array" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i8* }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %struct.stack_st_CRYPTO_BUFFER* }
%struct.stack_st_CRYPTO_BUFFER = type opaque
%"struct.bssl::SSL_X509_METHOD" = type { i1 (%struct.stack_st_CRYPTO_BUFFER*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, i1 (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %struct.ssl_session_st*)*, void (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %"struct.bssl::SSL_HANDSHAKE"*, i8*)*, void (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)* }
%"struct.bssl::CERT" = type { %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.6", %struct.stack_st_X509*, %struct.x509_st*, %struct.x509_st*, %struct.ssl_private_key_method_st*, %"struct.bssl::SSL_X509_METHOD"*, %"class.bssl::Array.42", i32 (%struct.ssl_st*, i8*)*, i8*, %struct.x509_store_st*, %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.108", i8, [32 x i8], %"class.std::__1::unique_ptr.113", %"class.std::__1::unique_ptr.11", %struct.ssl_private_key_method_st* }
%"class.bssl::Array.42" = type { i16*, i64 }
%struct.ssl_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"class.std::__1::unique_ptr.24", i16, i16, [4 x i8], %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.51", i32 (%"struct.bssl::SSL_HANDSHAKE"*)*, %"struct.bssl::SSL3_STATE"*, %"struct.bssl::DTLS1_STATE"*, void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], %"class.std::__1::unique_ptr.68", void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.96", %"class.std::__1::unique_ptr.96", %struct.crypto_ex_data_st, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.1", %struct.ssl_quic_method_st*, i32, i8, [3 x i8] }>
%"struct.bssl::SSL_PROTOCOL_METHOD" = type { i8, i1 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, %"class.bssl::Span.17"*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* }
%"struct.bssl::SSLMessage" = type { i8, i8, %struct.cbs_st, %struct.cbs_st }
%struct.cbs_st = type { i8*, i64 }
%"class.bssl::Span.17" = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.bssl::SSLAEADContext" = type <{ %struct.ssl_cipher_st*, %"class.bssl::internal::StackAllocated.21", [12 x i8], i8, i8, i16, i8, i8, [6 x i8] }>
%"class.bssl::internal::StackAllocated.21" = type { %struct.evp_aead_ctx_st }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%struct.evp_aead_st = type opaque
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.bssl::SSL_CONFIG"* }
%"struct.bssl::SSL_CONFIG" = type <{ %struct.ssl_st*, i16, i16, [4 x i8], %struct.X509_VERIFY_PARAM_st*, %"class.std::__1::unique_ptr.27", %"class.std::__1::unique_ptr.37", i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.ssl_st*, i8*)*, %"class.std::__1::unique_ptr.1", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, %"class.std::__1::unique_ptr.6", %struct.stack_st_X509_NAME*, %"class.bssl::Array.42", %"class.std::__1::unique_ptr.11", %"class.bssl::Array", %"class.bssl::GrowableArray", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.42", %"class.std::__1::unique_ptr.44", i8, i16, [5 x i8] }>
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.bssl::SSLCipherPreferenceList"* }
%"struct.bssl::SSLCipherPreferenceList" = type { %"class.std::__1::unique_ptr.30", i8* }
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %struct.stack_st_SSL_CIPHER* }
%struct.stack_st_SSL_CIPHER = type opaque
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.bssl::CERT"* }
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, i32 (%struct.x509_store_ctx_st*)*, {}*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon.16 }
%union.anon.16 = type { i8* }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.stack_st_X509_NAME = type opaque
%"class.bssl::GrowableArray" = type { i64, %"class.bssl::Array.43" }
%"class.bssl::Array.43" = type { %"struct.bssl::ALPSConfig"*, i64 }
%"struct.bssl::ALPSConfig" = type { %"class.bssl::Array", %"class.bssl::Array" }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %struct.stack_st_SRTP_PROTECTION_PROFILE* }
%struct.stack_st_SRTP_PROTECTION_PROFILE = type opaque
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %struct.bio_st* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%"struct.bssl::SSL_HANDSHAKE" = type <{ %struct.ssl_st*, %"struct.bssl::SSL_CONFIG"*, i32, i32, i32, i16, i16, i64, [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], %union.anon.56, i16, [2 x i8], %"class.std::__1::unique_ptr.57", [2 x %"class.std::__1::unique_ptr.62"], %"class.bssl::SSLTranscript", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.42", %"class.bssl::Array.42", %"class.bssl::Array.42", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::internal::StackAllocated.67", %"class.bssl::Array", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.6", %struct.stack_st_X509_NAME*, %"class.bssl::Array", %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.73", %struct.ssl_cipher_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.81", i32, i16, i16, i16, i8, [32 x i8], i8, [6 x i8], [6 x i8] }>
%union.anon.56 = type { i32 }
%"class.std::__1::unique_ptr.57" = type { %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %struct.err_save_state_st* }
%struct.err_save_state_st = type opaque
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.bssl::SSLKeyShare"* }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%"class.bssl::internal::StackAllocated.67" = type { %struct.evp_hpke_ctx_st }
%struct.evp_hpke_ctx_st = type { %struct.evp_hpke_aead_st*, %struct.evp_hpke_kdf_st*, %struct.evp_aead_ctx_st, [24 x i8], [64 x i8], i64, i32 }
%struct.evp_hpke_aead_st = type opaque
%struct.evp_hpke_kdf_st = type opaque
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %struct.ssl_ech_server_config_list_st* }
%struct.ssl_ech_server_config_list_st = type <{ %"class.bssl::GrowableArray.76", i32, [4 x i8] }>
%"class.bssl::GrowableArray.76" = type { i64, %"class.bssl::Array.77" }
%"class.bssl::Array.77" = type { %"class.std::__1::unique_ptr.78"*, i64 }
%"class.std::__1::unique_ptr.78" = type opaque
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"struct.bssl::SSL_HANDSHAKE_HINTS"* }
%"struct.bssl::SSL_HANDSHAKE_HINTS" = type <{ %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, [7 x i8] }>
%"struct.bssl::SSL3_STATE" = type <{ [8 x i8], [8 x i8], [32 x i8], [32 x i8], %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer", %"class.bssl::Span.17", i32, i32, i32, i32, i8*, i32, i32, %"class.std::__1::unique_ptr.57", i32, i32, i32, i32, i16, i8, i8, i8, i16, i8, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.86", [48 x i8], [48 x i8], [48 x i8], i8, i8, i8, [12 x i8], i8, i8, [12 x i8], [2 x i8], i8, %"class.std::__1::unique_ptr.68", %"class.bssl::Array", %"class.bssl::Array", %"class.std::__1::unique_ptr.1", [64 x i8], %"class.bssl::Array", %struct.srtp_protection_profile_st* }>
%"class.bssl::SSLBuffer" = type <{ i8*, i16, i16, i16, [5 x i8], i8, [4 x i8] }>
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.bssl::SSLAEADContext"* }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"struct.bssl::SSL_HANDSHAKE"* }
%struct.srtp_protection_profile_st = type { i8*, i64 }
%"struct.bssl::DTLS1_STATE" = type <{ i8, [256 x i8], [7 x i8], i64, i16, i16, [4 x i8], %"struct.bssl::DTLS1_BITMAP", i16, i16, [8 x i8], [4 x i8], %"class.std::__1::unique_ptr.18", [7 x %"class.std::__1::unique_ptr.91"], [7 x %"struct.bssl::DTLS_OUTGOING_MESSAGE"], i8, i8, [2 x i8], i32, i32, i32, %"struct.bssl::OPENSSL_timeval", i32, [4 x i8] }>
%"struct.bssl::DTLS1_BITMAP" = type { i64, i64 }
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"struct.bssl::hm_fragment"* }
%"struct.bssl::hm_fragment" = type { i8, i16, i32, i8*, i8* }
%"struct.bssl::DTLS_OUTGOING_MESSAGE" = type <{ i8*, i32, i16, i8, i8 }>
%"struct.bssl::OPENSSL_timeval" = type { i64, i32 }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %struct.ssl_session_st* }
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %struct.ssl_ctx_st* }
%struct.ssl_ctx_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"*, %union.crypto_mutex_st, i16, i16, [4 x i8], %struct.ssl_quic_method_st*, %"class.std::__1::unique_ptr.27", %struct.x509_store_st*, %struct.lhash_st_SSL_SESSION*, i64, %struct.ssl_session_st*, %struct.ssl_session_st*, i32, i32, i32, i32, i32 (%struct.ssl_st*, %struct.ssl_session_st*)*, void (%struct.ssl_ctx_st*, %struct.ssl_session_st*)*, %struct.ssl_session_st* (%struct.ssl_st*, i8*, i32, i32*)*, i32, [4 x i8], i32 (%struct.x509_store_ctx_st*, i8*)*, i8*, i32 (%struct.ssl_st*, i8*)*, i32 (i8*, i32, i32, i8*)*, i8*, i32 (%struct.ssl_st*, %struct.x509_st**, %struct.evp_pkey_st**)*, void (%struct.ssl_st*, %struct.evp_pkey_st**)*, %struct.crypto_ex_data_st, void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.6", %struct.stack_st_X509_NAME*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.37", void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], i32 (i32, %struct.x509_store_ctx_st*)*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.ssl_early_callback_ctx*)*, i32 (%struct.ssl_early_callback_ctx*)*, i8, i8, i16, [4 x i8], i32 (%struct.ssl_st*, i32*, i8*)*, i8*, %"class.std::__1::unique_ptr.99", %"class.std::__1::unique_ptr.99", i32 (%struct.ssl_st*, i8*, i8*, %struct.evp_cipher_ctx_st*, %struct.hmac_ctx_st*, i32)*, %"class.std::__1::unique_ptr.1", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*, i8**, i32*, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, %"class.bssl::Array", %"class.std::__1::unique_ptr.44", %"class.bssl::GrowableArray.104", %"class.bssl::Array.42", %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.73", void (%struct.ssl_st*, i8*)*, void (%struct.ssl_st*, %struct.timeval*)*, %struct.crypto_buffer_pool_st*, %struct.ssl_ticket_aead_method_st*, i32 (%struct.ssl_st*, i8*)*, i8*, %"class.bssl::Array.42", i16, [6 x i8] }>
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.lhash_st_SSL_SESSION = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.ssl_early_callback_ctx = type { %struct.ssl_st*, i8*, i64, i16, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"struct.bssl::TicketKey"* }
%"struct.bssl::TicketKey" = type { [16 x i8], [16 x i8], [16 x i8], i64 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%"class.bssl::GrowableArray.104" = type { i64, %"class.bssl::Array.105" }
%"class.bssl::Array.105" = type { %"struct.bssl::CertCompressionAlg"*, i64 }
%"struct.bssl::CertCompressionAlg" = type <{ i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*, i16, [6 x i8] }>
%struct.crypto_buffer_st = type opaque
%struct.timeval = type { i64, i64 }
%struct.crypto_buffer_pool_st = type opaque
%struct.ssl_ticket_aead_method_st = type { i64 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)* }
%struct.ssl_quic_method_st = type { i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, i8*, i64)*, i32 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i32, i8)* }
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, {}*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.bssl::DC"* }
%"struct.bssl::DC" = type { %"class.std::__1::unique_ptr.108", i16, %"class.std::__1::unique_ptr.11" }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %struct.evp_pkey_st* }
%struct.ssl_private_key_method_st = type { i32 (%struct.ssl_st*, i8*, i64*, i64, i16, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64)* }
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_pubkey_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.stack_st_X509 = type opaque
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %struct.crypto_buffer_st* }
%"class.bssl::Array" = type { i8*, i64 }
%"class.bssl::Span.118" = type { i8*, i64 }
%"class.bssl::Span" = type { i8*, i64 }

@.str = private unnamed_addr constant [54 x i8] c"../../third_party/boringssl/src/ssl/ssl_transcript.cc\00", align 1
@_ZZN4bssl13SSLTranscript14GetFinishedMACEPhPmPK14ssl_session_stbE12kClientLabel = internal constant [16 x i8] c"client finished\00", align 16
@_ZZN4bssl13SSLTranscript14GetFinishedMACEPhPmPK14ssl_session_stbE12kServerLabel = internal constant [16 x i8] c"server finished\00", align 16

@_ZN4bssl13SSLTranscriptC1Ev = hidden unnamed_addr alias void (%"class.bssl::SSLTranscript"*), void (%"class.bssl::SSLTranscript"*)* @_ZN4bssl13SSLTranscriptC2Ev
@_ZN4bssl13SSLTranscriptD1Ev = hidden unnamed_addr alias void (%"class.bssl::SSLTranscript"*), void (%"class.bssl::SSLTranscript"*)* @_ZN4bssl13SSLTranscriptD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl13SSLTranscriptC2Ev(%"class.bssl::SSLTranscript"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.bssl::SSLTranscript"* %0 to i64*
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 1, i32 0
  tail call void @EVP_MD_CTX_init(%struct.env_md_ctx_st* %3) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl13SSLTranscriptD2Ev(%"class.bssl::SSLTranscript"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 1, i32 0
  %3 = tail call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* %2) #3
  %4 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %struct.buf_mem_st*, %struct.buf_mem_st** %4, align 8
  store %struct.buf_mem_st* null, %struct.buf_mem_st** %4, align 8
  %6 = icmp eq %struct.buf_mem_st* %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %1
  tail call void @BUF_MEM_free(%struct.buf_mem_st* nonnull %5) #3
  br label %8

8:                                                ; preds = %1, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl13SSLTranscript4InitEv(%"class.bssl::SSLTranscript"*) local_unnamed_addr #0 align 2 {
  %2 = tail call %struct.buf_mem_st* @BUF_MEM_new() #3
  %3 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %struct.buf_mem_st*, %struct.buf_mem_st** %3, align 8
  store %struct.buf_mem_st* %2, %struct.buf_mem_st** %3, align 8
  %5 = icmp eq %struct.buf_mem_st* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @BUF_MEM_free(%struct.buf_mem_st* nonnull %4) #3
  %7 = load %struct.buf_mem_st*, %struct.buf_mem_st** %3, align 8
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi %struct.buf_mem_st* [ %2, %1 ], [ %7, %6 ]
  %10 = icmp eq %struct.buf_mem_st* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 1, i32 0
  %13 = tail call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* %12) #3
  tail call void @EVP_MD_CTX_init(%struct.env_md_ctx_st* %12) #3
  br label %14

14:                                               ; preds = %8, %11
  %15 = phi i1 [ true, %11 ], [ false, %8 ]
  ret i1 %15
}

declare %struct.buf_mem_st* @BUF_MEM_new() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl13SSLTranscript8InitHashEtPK13ssl_cipher_st(%"class.bssl::SSLTranscript"*, i16 zeroext, %struct.ssl_cipher_st*) local_unnamed_addr #0 align 2 {
  %4 = tail call %struct.env_md_st* @_ZN4bssl24ssl_get_handshake_digestEtPK13ssl_cipher_st(i16 zeroext %1, %struct.ssl_cipher_st* %2) #3
  %5 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 1, i32 0
  %6 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %struct.buf_mem_st*, %struct.buf_mem_st** %6, align 8
  %8 = tail call i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st* %5, %struct.env_md_st* %4, %struct.engine_st* null) #3
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %16, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %7, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %7, i64 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = tail call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* %5, i8* %12, i64 %14) #3
  br label %16

16:                                               ; preds = %3, %10
  %17 = phi i1 [ true, %10 ], [ false, %3 ]
  ret i1 %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %struct.env_md_st* @_ZN4bssl24ssl_get_handshake_digestEtPK13ssl_cipher_st(i16 zeroext, %struct.ssl_cipher_st*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl13SSLTranscript10FreeBufferEv(%"class.bssl::SSLTranscript"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %struct.buf_mem_st*, %struct.buf_mem_st** %2, align 8
  store %struct.buf_mem_st* null, %struct.buf_mem_st** %2, align 8
  %4 = icmp eq %struct.buf_mem_st* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @BUF_MEM_free(%struct.buf_mem_st* nonnull %3) #3
  br label %6

6:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4bssl13SSLTranscript9DigestLenEv(%"class.bssl::SSLTranscript"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 1, i32 0
  %3 = tail call %struct.env_md_st* @EVP_MD_CTX_md(%struct.env_md_ctx_st* %2) #3
  %4 = tail call i64 @EVP_MD_size(%struct.env_md_st* %3) #3
  ret i64 %4
}

declare i64 @EVP_MD_size(%struct.env_md_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.env_md_st* @_ZNK4bssl13SSLTranscript6DigestEv(%"class.bssl::SSLTranscript"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 1, i32 0
  %3 = tail call %struct.env_md_st* @EVP_MD_CTX_md(%struct.env_md_ctx_st* %2) #3
  ret %struct.env_md_st* %3
}

declare %struct.env_md_st* @EVP_MD_CTX_md(%struct.env_md_ctx_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl13SSLTranscript26UpdateForHelloRetryRequestEv(%"class.bssl::SSLTranscript"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.bssl::internal::StackAllocated", align 8
  %3 = alloca i32, align 4
  %4 = alloca [64 x i8], align 16
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to [4 x i8]*
  %7 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %struct.buf_mem_st*, %struct.buf_mem_st** %7, align 8
  %9 = icmp eq %struct.buf_mem_st* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %8, i64 0, i32 0
  store i64 0, i64* %11, align 8
  br label %12

12:                                               ; preds = %1, %10
  %13 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 64, i1 false)
  %14 = bitcast %"class.bssl::internal::StackAllocated"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #3
  %15 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %2, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 32, i1 false) #3
  call void @EVP_MD_CTX_init(%struct.env_md_ctx_st* nonnull %15) #3
  %16 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #3
  store i32 -1431655766, i32* %3, align 4
  %17 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 1, i32 0
  %18 = call i32 @EVP_MD_CTX_copy_ex(%struct.env_md_ctx_st* nonnull %15, %struct.env_md_ctx_st* %17) #3
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %26, label %20

20:                                               ; preds = %12
  %21 = call i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st* nonnull %15, i8* nonnull %13, i32* nonnull %3) #3
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %20
  %24 = load i32, i32* %3, align 4
  %25 = zext i32 %24 to i64
  br label %26

26:                                               ; preds = %12, %20, %23
  %27 = phi i64 [ -6148914691236517206, %12 ], [ -6148914691236517206, %20 ], [ %25, %23 ]
  %28 = phi i1 [ false, %12 ], [ false, %20 ], [ true, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #3
  %29 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* nonnull %15) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #3
  br i1 %28, label %30, label %61

30:                                               ; preds = %26
  %31 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #3
  %32 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 3
  store i32 -1442840322, i32* %5, align 4
  %33 = trunc i64 %27 to i8
  store i8 %33, i8* %32, align 1
  %34 = call %struct.env_md_st* @EVP_MD_CTX_md(%struct.env_md_ctx_st* %17) #3
  %35 = call i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st* %17, %struct.env_md_st* %34, %struct.engine_st* null) #3
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %59, label %37

37:                                               ; preds = %30
  %38 = load %struct.buf_mem_st*, %struct.buf_mem_st** %7, align 8
  %39 = icmp eq %struct.buf_mem_st* %38, null
  br i1 %39, label %43, label %40

40:                                               ; preds = %37
  %41 = call i32 @BUF_MEM_append(%struct.buf_mem_st* nonnull %38, i8* nonnull %31, i64 4) #3
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %59, label %43

43:                                               ; preds = %40, %37
  %44 = call %struct.env_md_st* @EVP_MD_CTX_md(%struct.env_md_ctx_st* %17) #3
  %45 = icmp eq %struct.env_md_st* %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %43
  %47 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* %17, i8* nonnull %31, i64 4) #3
  br label %48

48:                                               ; preds = %43, %46
  %49 = load %struct.buf_mem_st*, %struct.buf_mem_st** %7, align 8
  %50 = icmp eq %struct.buf_mem_st* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %48
  %52 = call i32 @BUF_MEM_append(%struct.buf_mem_st* nonnull %49, i8* nonnull %13, i64 %27) #3
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %59, label %54

54:                                               ; preds = %51, %48
  %55 = call %struct.env_md_st* @EVP_MD_CTX_md(%struct.env_md_ctx_st* %17) #3
  %56 = icmp eq %struct.env_md_st* %55, null
  br i1 %56, label %59, label %57

57:                                               ; preds = %54
  %58 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* %17, i8* nonnull %13, i64 %27) #3
  br label %59

59:                                               ; preds = %51, %54, %57, %40, %30
  %60 = phi i1 [ false, %30 ], [ false, %40 ], [ false, %51 ], [ true, %54 ], [ true, %57 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #3
  br label %61

61:                                               ; preds = %26, %59
  %62 = phi i1 [ %60, %59 ], [ false, %26 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #3
  ret i1 %62
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl13SSLTranscript7GetHashEPhPm(%"class.bssl::SSLTranscript"*, i8*, i64* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.bssl::internal::StackAllocated", align 8
  %5 = alloca i32, align 4
  %6 = bitcast %"class.bssl::internal::StackAllocated"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #3
  %7 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %4, i64 0, i32 0
  %8 = bitcast %"class.bssl::internal::StackAllocated"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  call void @EVP_MD_CTX_init(%struct.env_md_ctx_st* nonnull %7) #3
  %9 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #3
  store i32 -1431655766, i32* %5, align 4
  %10 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 1, i32 0
  %11 = call i32 @EVP_MD_CTX_copy_ex(%struct.env_md_ctx_st* nonnull %7, %struct.env_md_ctx_st* %10) #3
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %19, label %13

13:                                               ; preds = %3
  %14 = call i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st* nonnull %7, i8* %1, i32* nonnull %5) #3
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %13
  %17 = load i32, i32* %5, align 4
  %18 = zext i32 %17 to i64
  store i64 %18, i64* %2, align 8
  br label %19

19:                                               ; preds = %3, %13, %16
  %20 = phi i1 [ true, %16 ], [ false, %13 ], [ false, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #3
  %21 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* nonnull %7) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #3
  ret i1 %20
}

declare i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st*, %struct.env_md_st*, %struct.engine_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl13SSLTranscript6UpdateENS_4SpanIKhEE(%"class.bssl::SSLTranscript"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %struct.buf_mem_st*, %struct.buf_mem_st** %4, align 8
  %6 = icmp eq %struct.buf_mem_st* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = tail call i32 @BUF_MEM_append(%struct.buf_mem_st* nonnull %5, i8* %1, i64 %2) #3
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %16, label %10

10:                                               ; preds = %3, %7
  %11 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 1, i32 0
  %12 = tail call %struct.env_md_st* @EVP_MD_CTX_md(%struct.env_md_ctx_st* %11) #3
  %13 = icmp eq %struct.env_md_st* %12, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* %11, i8* %1, i64 %2) #3
  br label %16

16:                                               ; preds = %14, %10, %7
  %17 = phi i1 [ false, %7 ], [ true, %10 ], [ true, %14 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl13SSLTranscript17CopyToHashContextEP13env_md_ctx_stPK9env_md_st(%"class.bssl::SSLTranscript"*, %struct.env_md_ctx_st*, %struct.env_md_st*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 1, i32 0
  %5 = tail call %struct.env_md_st* @EVP_MD_CTX_md(%struct.env_md_ctx_st* %4) #3
  %6 = icmp eq %struct.env_md_st* %5, null
  br i1 %6, label %14, label %7

7:                                                ; preds = %3
  %8 = tail call i32 @EVP_MD_type(%struct.env_md_st* nonnull %5) #3
  %9 = tail call i32 @EVP_MD_type(%struct.env_md_st* %2) #3
  %10 = icmp eq i32 %8, %9
  br i1 %10, label %11, label %14

11:                                               ; preds = %7
  %12 = tail call i32 @EVP_MD_CTX_copy_ex(%struct.env_md_ctx_st* %1, %struct.env_md_ctx_st* %4) #3
  %13 = icmp ne i32 %12, 0
  br label %30

14:                                               ; preds = %3, %7
  %15 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %struct.buf_mem_st*, %struct.buf_mem_st** %15, align 8
  %17 = icmp eq %struct.buf_mem_st* %16, null
  br i1 %17, label %29, label %18

18:                                               ; preds = %14
  %19 = tail call i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st* %1, %struct.env_md_st* %2, %struct.engine_st* null) #3
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %30, label %21

21:                                               ; preds = %18
  %22 = load %struct.buf_mem_st*, %struct.buf_mem_st** %15, align 8
  %23 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %22, i64 0, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %22, i64 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = tail call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* %1, i8* %24, i64 %26) #3
  %28 = icmp ne i32 %27, 0
  br label %30

29:                                               ; preds = %14
  tail call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i32 221) #3
  br label %30

30:                                               ; preds = %21, %18, %29, %11
  %31 = phi i1 [ %13, %11 ], [ false, %29 ], [ false, %18 ], [ %28, %21 ]
  ret i1 %31
}

declare i32 @EVP_MD_type(%struct.env_md_st*) local_unnamed_addr #1

declare i32 @EVP_MD_CTX_copy_ex(%struct.env_md_ctx_st*, %struct.env_md_ctx_st*) local_unnamed_addr #1

declare i32 @EVP_DigestUpdate(%struct.env_md_ctx_st*, i8*, i64) local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare i32 @BUF_MEM_append(%struct.buf_mem_st*, i8*, i64) local_unnamed_addr #1

declare i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st*, i8*, i32*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl13SSLTranscript14GetFinishedMACEPhPmPK14ssl_session_stb(%"class.bssl::SSLTranscript"*, i8*, i64* nocapture, %struct.ssl_session_st*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.bssl::internal::StackAllocated", align 8
  %7 = alloca i32, align 4
  %8 = alloca [64 x i8], align 16
  %9 = alloca %"class.bssl::Span.118", align 8
  %10 = alloca %"class.bssl::Span", align 8
  %11 = alloca %"class.bssl::Span", align 8
  %12 = select i1 %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4bssl13SSLTranscript14GetFinishedMACEPhPmPK14ssl_session_stbE12kServerLabel, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4bssl13SSLTranscript14GetFinishedMACEPhPmPK14ssl_session_stbE12kClientLabel, i64 0, i64 0)
  %13 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 64, i1 false)
  %14 = bitcast %"class.bssl::internal::StackAllocated"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #3
  %15 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %6, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 32, i1 false) #3
  call void @EVP_MD_CTX_init(%struct.env_md_ctx_st* nonnull %15) #3
  %16 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #3
  store i32 -1431655766, i32* %7, align 4
  %17 = getelementptr inbounds %"class.bssl::SSLTranscript", %"class.bssl::SSLTranscript"* %0, i64 0, i32 1, i32 0
  %18 = call i32 @EVP_MD_CTX_copy_ex(%struct.env_md_ctx_st* nonnull %15, %struct.env_md_ctx_st* %17) #3
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %26, label %20

20:                                               ; preds = %5
  %21 = call i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st* nonnull %15, i8* nonnull %13, i32* nonnull %7) #3
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %20
  %24 = load i32, i32* %7, align 4
  %25 = zext i32 %24 to i64
  br label %26

26:                                               ; preds = %5, %20, %23
  %27 = phi i64 [ -6148914691236517206, %5 ], [ -6148914691236517206, %20 ], [ %25, %23 ]
  %28 = phi i1 [ false, %5 ], [ false, %20 ], [ true, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #3
  %29 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* nonnull %15) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #3
  br i1 %28, label %30, label %43

30:                                               ; preds = %26
  %31 = call %struct.env_md_st* @EVP_MD_CTX_md(%struct.env_md_ctx_st* %17) #3
  %32 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %3, i64 0, i32 5, i64 0
  %33 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %3, i64 0, i32 4
  %34 = load i32, i32* %33, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %"class.bssl::Span.118", %"class.bssl::Span.118"* %9, i64 0, i32 0
  store i8* %12, i8** %36, align 8
  %37 = getelementptr inbounds %"class.bssl::Span.118", %"class.bssl::Span.118"* %9, i64 0, i32 1
  store i64 15, i64* %37, align 8
  %38 = getelementptr inbounds %"class.bssl::Span", %"class.bssl::Span"* %10, i64 0, i32 0
  store i8* %13, i8** %38, align 8
  %39 = getelementptr inbounds %"class.bssl::Span", %"class.bssl::Span"* %10, i64 0, i32 1
  store i64 %27, i64* %39, align 8
  %40 = bitcast %"class.bssl::Span"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 16, i1 false) #3
  %41 = call zeroext i1 @_ZN4bssl8tls1_prfEPK9env_md_stNS_4SpanIhEENS3_IKhEENS3_IKcEES6_S6_(%struct.env_md_st* %31, i8* %1, i64 12, i8* %32, i64 %35, %"class.bssl::Span.118"* nonnull byval(%"class.bssl::Span.118") align 8 %9, %"class.bssl::Span"* nonnull byval(%"class.bssl::Span") align 8 %10, %"class.bssl::Span"* nonnull byval(%"class.bssl::Span") align 8 %11) #3
  br i1 %41, label %42, label %43

42:                                               ; preds = %30
  store i64 12, i64* %2, align 8
  br label %43

43:                                               ; preds = %30, %26, %42
  %44 = phi i1 [ true, %42 ], [ false, %26 ], [ false, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #3
  ret i1 %44
}

declare zeroext i1 @_ZN4bssl8tls1_prfEPK9env_md_stNS_4SpanIhEENS3_IKhEENS3_IKcEES6_S6_(%struct.env_md_st*, i8*, i64, i8*, i64, %"class.bssl::Span.118"* byval(%"class.bssl::Span.118") align 8, %"class.bssl::Span"* byval(%"class.bssl::Span") align 8, %"class.bssl::Span"* byval(%"class.bssl::Span") align 8) local_unnamed_addr #1

declare void @EVP_MD_CTX_init(%struct.env_md_ctx_st*) local_unnamed_addr #1

declare i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st*) local_unnamed_addr #1

declare void @BUF_MEM_free(%struct.buf_mem_st*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
