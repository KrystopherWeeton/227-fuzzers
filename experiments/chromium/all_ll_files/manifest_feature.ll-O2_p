; ModuleID = '../../extensions/common/features/manifest_feature.cc'
source_filename = "../../extensions/common/features/manifest_feature.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.extensions::ManifestFeature" = type { %"class.extensions::SimpleFeature.base", [3 x i8] }
%"class.extensions::SimpleFeature.base" = type <{ %"class.extensions::Feature.base", [7 x i8], %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.absl::optional", %"class.std::__1::vector.28", %"class.extensions::URLPatternSet", %"class.absl::optional.43", %"class.absl::optional.48", %"class.absl::optional.48", %"class.absl::optional.53", %"class.absl::optional.53", %"class.absl::optional.58", %"class.absl::optional.63", i8, i8, i8 }>
%"class.extensions::Feature.base" = type <{ i32 (...)**, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8 }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { i32*, i32*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i32* }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { i32*, i32*, %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { i32* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.20 }
%union.anon.20 = type { %"class.std::__1::vector.21" }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { i32*, i32*, %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i32* }
%"class.std::__1::vector.28" = type { %"class.std::__1::__vector_base.29" }
%"class.std::__1::__vector_base.29" = type { i32*, i32*, %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { i32* }
%"class.extensions::URLPatternSet" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.35", %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { i64 }
%"class.absl::optional.43" = type { %"class.absl::optional_internal::optional_data.44" }
%"class.absl::optional_internal::optional_data.44" = type { %"class.absl::optional_internal::optional_data_base.45" }
%"class.absl::optional_internal::optional_data_base.45" = type { %"class.absl::optional_internal::optional_data_dtor_base.46" }
%"class.absl::optional_internal::optional_data_dtor_base.46" = type { i8, %union.anon.47 }
%union.anon.47 = type { i32 }
%"class.absl::optional.48" = type { %"class.absl::optional_internal::optional_data.49" }
%"class.absl::optional_internal::optional_data.49" = type { %"class.absl::optional_internal::optional_data_base.50" }
%"class.absl::optional_internal::optional_data_base.50" = type { %"class.absl::optional_internal::optional_data_dtor_base.51" }
%"class.absl::optional_internal::optional_data_dtor_base.51" = type { i8, %union.anon.52 }
%union.anon.52 = type { i32 }
%"class.absl::optional.53" = type { %"class.absl::optional_internal::optional_data.54" }
%"class.absl::optional_internal::optional_data.54" = type { %"class.absl::optional_internal::optional_data_base.55" }
%"class.absl::optional_internal::optional_data_base.55" = type { %"class.absl::optional_internal::optional_data_dtor_base.56" }
%"class.absl::optional_internal::optional_data_dtor_base.56" = type { i8, %union.anon.57 }
%union.anon.57 = type { %"class.std::__1::basic_string" }
%"class.absl::optional.58" = type { %"class.absl::optional_internal::optional_data.59" }
%"class.absl::optional_internal::optional_data.59" = type { %"class.absl::optional_internal::optional_data_base.60" }
%"class.absl::optional_internal::optional_data_base.60" = type { %"class.absl::optional_internal::optional_data_dtor_base.61" }
%"class.absl::optional_internal::optional_data_dtor_base.61" = type { i8, %union.anon.62 }
%union.anon.62 = type { i32 }
%"class.absl::optional.63" = type { %"class.absl::optional_internal::optional_data.64" }
%"class.absl::optional_internal::optional_data.64" = type { %"class.absl::optional_internal::optional_data_base.65" }
%"class.absl::optional_internal::optional_data_base.65" = type { %"class.absl::optional_internal::optional_data_dtor_base.66" }
%"class.absl::optional_internal::optional_data_dtor_base.66" = type { i8, %union.anon.67 }
%union.anon.67 = type { i8 }
%"class.extensions::SimpleFeature" = type <{ %"class.extensions::Feature.base", [7 x i8], %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.absl::optional", %"class.std::__1::vector.28", %"class.extensions::URLPatternSet", %"class.absl::optional.43", %"class.absl::optional.48", %"class.absl::optional.48", %"class.absl::optional.53", %"class.absl::optional.53", %"class.absl::optional.58", %"class.absl::optional.63", i8, i8, i8, [3 x i8] }>
%"class.extensions::Feature::Availability" = type { i32, %"class.std::__1::basic_string" }
%"class.extensions::Extension" = type { %"class.base::RefCountedThreadSafe", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, %"class.base::FilePath", %"class.extensions::URLPatternSet", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.72", %"class.std::__1::vector.78", %class.GURL, %"class.base::Version", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"class.std::__1::basic_string", %"class.std::__1::unique_ptr.98", %"class.std::__1::map", i8, %"class.base::ThreadChecker", i8, i8, i8, i32, %"class.base::GUID" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.68" }
%"struct.std::__1::__atomic_base.68" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::FilePath" = type { %"class.std::__1::basic_string" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.extensions::PermissionsParser"* }
%"class.extensions::PermissionsParser" = type opaque
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.extensions::PermissionsData"* }
%"class.extensions::PermissionsData" = type opaque
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.extensions::InstallWarning"*, %"struct.extensions::InstallWarning"*, %"class.std::__1::__compressed_pair.80" }
%"struct.extensions::InstallWarning" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.extensions::InstallWarning"* }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.85" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %class.GURL* }
%"class.base::Version" = type { %"class.std::__1::vector.91" }
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { i32*, i32*, %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { i32* }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.extensions::Manifest"* }
%"class.extensions::Manifest" = type { %"class.std::__1::basic_string", %"class.extensions::HashedExtensionId", i32, %"class.std::__1::unique_ptr.101", %"class.std::__1::unique_ptr.101", i32, i32 }
%"class.extensions::HashedExtensionId" = type { %"class.std::__1::basic_string" }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.base::DictionaryValue"* }
%"class.base::DictionaryValue" = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.104" }
%"union.absl::variant_internal::DestructibleUnionImpl.104" = type { %"union.absl::variant_internal::DestructibleUnionImpl.105" }
%"union.absl::variant_internal::DestructibleUnionImpl.105" = type { %"union.absl::variant_internal::DestructibleUnionImpl.106" }
%"union.absl::variant_internal::DestructibleUnionImpl.106" = type { %"union.absl::variant_internal::DestructibleUnionImpl.107" }
%"union.absl::variant_internal::DestructibleUnionImpl.107" = type { %"class.std::__1::basic_string" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.139" }
%"class.std::__1::__tree.139" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.140", %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.base::ThreadChecker" = type { i8 }
%"class.base::GUID" = type { %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZTVN10extensions15ManifestFeatureE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.extensions::ManifestFeature"*)* @_ZN10extensions15ManifestFeatureD2Ev to i8*), i8* bitcast (void (%"class.extensions::ManifestFeature"*)* @_ZN10extensions15ManifestFeatureD0Ev to i8*), i8* bitcast (i1 (%"class.extensions::SimpleFeature"*)* @_ZNK10extensions13SimpleFeature10IsInternalEv to i8*), i8* bitcast (void (%"class.extensions::Feature::Availability"*, %"class.extensions::SimpleFeature"*, %"class.extensions::HashedExtensionId"*, i32, i32, i32, i32)* @_ZNK10extensions13SimpleFeature21IsAvailableToManifestERKNS_17HashedExtensionIdENS_8Manifest4TypeENS_5mojom16ManifestLocationEiNS_7Feature8PlatformE to i8*), i8* bitcast (void (%"class.extensions::Feature::Availability"*, %"class.extensions::ManifestFeature"*, %"class.extensions::Extension"*, i32, %class.GURL*, i32)* @_ZNK10extensions15ManifestFeature20IsAvailableToContextEPKNS_9ExtensionENS_7Feature7ContextERK4GURLNS4_8PlatformE to i8*), i8* bitcast (void (%"class.extensions::Feature::Availability"*, %"class.extensions::SimpleFeature"*)* @_ZNK10extensions13SimpleFeature24IsAvailableToEnvironmentEv to i8*), i8* bitcast (i1 (%"class.extensions::SimpleFeature"*, %"class.extensions::HashedExtensionId"*)* @_ZNK10extensions13SimpleFeature15IsIdInBlocklistERKNS_17HashedExtensionIdE to i8*), i8* bitcast (i1 (%"class.extensions::SimpleFeature"*, %"class.extensions::HashedExtensionId"*)* @_ZNK10extensions13SimpleFeature15IsIdInAllowlistERKNS_17HashedExtensionIdE to i8*)] }, align 8

@_ZN10extensions15ManifestFeatureC1Ev = hidden unnamed_addr alias void (%"class.extensions::ManifestFeature"*), void (%"class.extensions::ManifestFeature"*)* @_ZN10extensions15ManifestFeatureC2Ev
@_ZN10extensions15ManifestFeatureD1Ev = hidden unnamed_addr alias void (%"class.extensions::ManifestFeature"*), void (%"class.extensions::ManifestFeature"*)* @_ZN10extensions15ManifestFeatureD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions15ManifestFeatureC2Ev(%"class.extensions::ManifestFeature"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.extensions::ManifestFeature"* %0 to %"class.extensions::SimpleFeature"*
  tail call void @_ZN10extensions13SimpleFeatureC2Ev(%"class.extensions::SimpleFeature"* %2) #5
  %3 = getelementptr inbounds %"class.extensions::ManifestFeature", %"class.extensions::ManifestFeature"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN10extensions15ManifestFeatureE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN10extensions13SimpleFeatureC2Ev(%"class.extensions::SimpleFeature"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN10extensions13SimpleFeatureD2Ev(%"class.extensions::SimpleFeature"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions15ManifestFeatureD2Ev(%"class.extensions::ManifestFeature"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.extensions::ManifestFeature"* %0 to %"class.extensions::SimpleFeature"*
  tail call void @_ZN10extensions13SimpleFeatureD2Ev(%"class.extensions::SimpleFeature"* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions15ManifestFeatureD0Ev(%"class.extensions::ManifestFeature"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.extensions::ManifestFeature"* %0 to %"class.extensions::SimpleFeature"*
  tail call void @_ZN10extensions13SimpleFeatureD2Ev(%"class.extensions::SimpleFeature"* %2) #5
  %3 = bitcast %"class.extensions::ManifestFeature"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10extensions15ManifestFeature20IsAvailableToContextEPKNS_9ExtensionENS_7Feature7ContextERK4GURLNS4_8PlatformE(%"class.extensions::Feature::Availability"* noalias sret, %"class.extensions::ManifestFeature"*, %"class.extensions::Extension"*, i32, %class.GURL* dereferenceable(120), i32) unnamed_addr #0 align 2 {
  %7 = alloca %"class.extensions::Feature::Availability", align 8
  %8 = bitcast %"class.extensions::Feature::Availability"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  %9 = bitcast %"class.extensions::ManifestFeature"* %1 to %"class.extensions::SimpleFeature"*
  call void @_ZNK10extensions13SimpleFeature20IsAvailableToContextEPKNS_9ExtensionENS_7Feature7ContextERK4GURLNS4_8PlatformE(%"class.extensions::Feature::Availability"* nonnull sret %7, %"class.extensions::SimpleFeature"* %9, %"class.extensions::Extension"* %2, i32 %3, %class.GURL* dereferenceable(120) %4, i32 %5) #5
  %10 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %7, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %29, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 0
  store i32 %11, i32* %14, align 8
  %15 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %0, i64 0, i32 1
  %16 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %7, i64 0, i32 1
  %17 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string"* %15 to i8*
  %23 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 24, i1 false) #5
  br label %53

24:                                               ; preds = %13
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %7, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %15, i8* %26, i64 %28) #5
  br label %53

29:                                               ; preds = %6
  %30 = icmp eq %"class.extensions::Extension"* %2, null
  br i1 %30, label %52, label %31

31:                                               ; preds = %29
  %32 = getelementptr inbounds %"class.extensions::Extension", %"class.extensions::Extension"* %2, i64 0, i32 16, i32 0, i32 0, i32 0
  %33 = load %"class.extensions::Manifest"*, %"class.extensions::Manifest"** %32, align 8
  %34 = getelementptr inbounds %"class.extensions::Manifest", %"class.extensions::Manifest"* %33, i64 0, i32 3, i32 0, i32 0, i32 0
  %35 = load %"class.base::DictionaryValue"*, %"class.base::DictionaryValue"** %34, align 8
  %36 = getelementptr inbounds %"class.extensions::ManifestFeature", %"class.extensions::ManifestFeature"* %1, i64 0, i32 0, i32 0, i32 1
  %37 = bitcast %"class.std::__1::basic_string"* %36 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = bitcast %"class.std::__1::basic_string"* %36 to i8*
  %44 = select i1 %40, i8* %42, i8* %43
  %45 = getelementptr inbounds %"class.extensions::ManifestFeature", %"class.extensions::ManifestFeature"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = zext i8 %39 to i64
  %48 = select i1 %40, i64 %46, i64 %47
  %49 = call zeroext i1 @_ZNK4base15DictionaryValue6HasKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::DictionaryValue"* %35, i8* %44, i64 %48) #5
  br i1 %49, label %52, label %50

50:                                               ; preds = %31
  %51 = call i32 @_ZNK10extensions9Extension7GetTypeEv(%"class.extensions::Extension"* nonnull %2) #5
  call void @_ZNK10extensions13SimpleFeature18CreateAvailabilityENS_7Feature18AvailabilityResultENS_8Manifest4TypeE(%"class.extensions::Feature::Availability"* sret %0, %"class.extensions::SimpleFeature"* %9, i32 10, i32 %51) #5
  br label %53

52:                                               ; preds = %31, %29
  call void @_ZNK10extensions13SimpleFeature18CreateAvailabilityENS_7Feature18AvailabilityResultE(%"class.extensions::Feature::Availability"* sret %0, %"class.extensions::SimpleFeature"* %9, i32 0) #5
  br label %53

53:                                               ; preds = %24, %21, %52, %50
  %54 = getelementptr inbounds %"class.extensions::Feature::Availability", %"class.extensions::Feature::Availability"* %7, i64 0, i32 1
  %55 = bitcast %"class.std::__1::basic_string"* %54 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %56 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %55, i64 0, i32 1, i32 0
  %57 = load i8, i8* %56, align 1
  %58 = icmp slt i8 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %53
  %60 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  call void @_ZdlPv(i8* %61) #6
  br label %62

62:                                               ; preds = %53, %59
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZNK10extensions13SimpleFeature20IsAvailableToContextEPKNS_9ExtensionENS_7Feature7ContextERK4GURLNS4_8PlatformE(%"class.extensions::Feature::Availability"* sret, %"class.extensions::SimpleFeature"*, %"class.extensions::Extension"*, i32, %class.GURL* dereferenceable(120), i32) unnamed_addr #1

declare zeroext i1 @_ZNK4base15DictionaryValue6HasKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::DictionaryValue"*, i8*, i64) local_unnamed_addr #1

declare void @_ZNK10extensions13SimpleFeature18CreateAvailabilityENS_7Feature18AvailabilityResultENS_8Manifest4TypeE(%"class.extensions::Feature::Availability"* sret, %"class.extensions::SimpleFeature"*, i32, i32) local_unnamed_addr #1

declare i32 @_ZNK10extensions9Extension7GetTypeEv(%"class.extensions::Extension"*) local_unnamed_addr #1

declare void @_ZNK10extensions13SimpleFeature18CreateAvailabilityENS_7Feature18AvailabilityResultE(%"class.extensions::Feature::Availability"* sret, %"class.extensions::SimpleFeature"*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare zeroext i1 @_ZNK10extensions13SimpleFeature10IsInternalEv(%"class.extensions::SimpleFeature"*) unnamed_addr #1

declare void @_ZNK10extensions13SimpleFeature21IsAvailableToManifestERKNS_17HashedExtensionIdENS_8Manifest4TypeENS_5mojom16ManifestLocationEiNS_7Feature8PlatformE(%"class.extensions::Feature::Availability"* sret, %"class.extensions::SimpleFeature"*, %"class.extensions::HashedExtensionId"* dereferenceable(24), i32, i32, i32, i32) unnamed_addr #1

declare void @_ZNK10extensions13SimpleFeature24IsAvailableToEnvironmentEv(%"class.extensions::Feature::Availability"* sret, %"class.extensions::SimpleFeature"*) unnamed_addr #1

declare zeroext i1 @_ZNK10extensions13SimpleFeature15IsIdInBlocklistERKNS_17HashedExtensionIdE(%"class.extensions::SimpleFeature"*, %"class.extensions::HashedExtensionId"* dereferenceable(24)) unnamed_addr #1

declare zeroext i1 @_ZNK10extensions13SimpleFeature15IsIdInAllowlistERKNS_17HashedExtensionIdE(%"class.extensions::SimpleFeature"*, %"class.extensions::HashedExtensionId"* dereferenceable(24)) unnamed_addr #1

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
