; ModuleID = '../../ui/accessibility/ax_tree_id.cc'
source_filename = "../../ui/accessibility/ax_tree_id.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::NoDestructor" = type { [32 x i8] }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.ui::AXTreeID" = type { i32, %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.0 }
%union.anon.0 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"union.absl::variant_internal::DestructibleUnionImpl.4" }
%"union.absl::variant_internal::DestructibleUnionImpl.4" = type { %"union.absl::variant_internal::DestructibleUnionImpl.5" }
%"union.absl::variant_internal::DestructibleUnionImpl.5" = type { %"class.std::__1::basic_string" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.ui::AXTreeIDHash" = type { i8 }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@.str = private unnamed_addr constant [37 x i8] c"../../ui/accessibility/ax_tree_id.cc\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"token\00", align 1
@_ZZN2ui15AXTreeIDUnknownEvE18ax_tree_id_unknown = internal global %"class.base::NoDestructor" zeroinitializer, align 8
@_ZGVZN2ui15AXTreeIDUnknownEvE18ax_tree_id_unknown = internal global i64 0, align 8
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN2ui8AXTreeIDC1Ev = hidden unnamed_addr alias void (%"class.ui::AXTreeID"*), void (%"class.ui::AXTreeID"*)* @_ZN2ui8AXTreeIDC2Ev
@_ZN2ui8AXTreeIDC1ERKS0_ = hidden unnamed_addr alias void (%"class.ui::AXTreeID"*, %"class.ui::AXTreeID"*), void (%"class.ui::AXTreeID"*, %"class.ui::AXTreeID"*)* @_ZN2ui8AXTreeIDC2ERKS0_
@_ZN2ui8AXTreeIDC1EN2ax5mojom12AXTreeIDTypeE = hidden unnamed_addr alias void (%"class.ui::AXTreeID"*, i32), void (%"class.ui::AXTreeID"*, i32)* @_ZN2ui8AXTreeIDC2EN2ax5mojom12AXTreeIDTypeE
@_ZN2ui8AXTreeIDC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE = hidden unnamed_addr alias void (%"class.ui::AXTreeID"*, %"class.std::__1::basic_string"*), void (%"class.ui::AXTreeID"*, %"class.std::__1::basic_string"*)* @_ZN2ui8AXTreeIDC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2ui8AXTreeIDC2Ev(%"class.ui::AXTreeID"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui8AXTreeIDC2EN2ax5mojom12AXTreeIDTypeE(%"class.ui::AXTreeID"* nocapture, i32) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 0
  store i32 %1, i32* %3, align 8
  %4 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %4, align 8
  %5 = icmp eq i32 %1, 1
  br i1 %5, label %6, label %15

6:                                                ; preds = %2
  %7 = tail call { i64, i64 } @_ZN4base16UnguessableToken6CreateEv() #12
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = load i8, i8* %4, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  %12 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i64 %8, i64* %12, align 8
  %13 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  store i64 %9, i64* %13, align 8
  br i1 %11, label %14, label %15

14:                                               ; preds = %6
  store i8 1, i8* %4, align 8
  br label %15

15:                                               ; preds = %6, %14, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui8AXTreeIDC2ERKS0_(%"class.ui::AXTreeID"* nocapture, %"class.ui::AXTreeID"* nocapture readonly dereferenceable(32)) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.ui::AXTreeID"* %0 to i8*
  %4 = bitcast %"class.ui::AXTreeID"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 32, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare { i64, i64 } @_ZN4base16UnguessableToken6CreateEv() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui8AXTreeIDC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.ui::AXTreeID"* nocapture, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #1 align 2 {
  %3 = alloca %"class.absl::optional", align 8
  %4 = alloca %"class.base::Value", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %6, align 8
  %7 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = zext i8 %9 to i64
  %14 = select i1 %10, i64 %12, i64 %13
  %15 = icmp eq i64 %14, 0
  %16 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 0
  br i1 %15, label %17, label %18

17:                                               ; preds = %2
  store i32 0, i32* %16, align 8
  br label %51

18:                                               ; preds = %2
  store i32 1, i32* %16, align 8
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 24, i1 false)
  %20 = bitcast %"class.base::Value"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #12
  %21 = load i8, i8* %8, align 1
  %22 = icmp slt i8 %21, 0
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %26 = select i1 %22, i8* %24, i8* %25
  %27 = load i64, i64* %11, align 8
  %28 = zext i8 %21 to i64
  %29 = select i1 %22, i64 %27, i64 %28
  call void @_ZN4base5ValueC1ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::Value"* nonnull %4, i8* %26, i64 %29) #12
  call void @_ZN4util23ValueToUnguessableTokenERKN4base5ValueE(%"class.absl::optional"* nonnull sret %3, %"class.base::Value"* nonnull dereferenceable(32) %4) #12
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #12
  %30 = load i8, i8* %19, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %38

32:                                               ; preds = %18
  %33 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i32 35, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0)) #12
  %34 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #12
  %35 = load i8, i8* %19, align 8
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %38, !prof !3

37:                                               ; preds = %32
  call void @llvm.trap() #12
  unreachable

38:                                               ; preds = %18, %32
  %39 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %40 = load i8, i8* %6, align 8, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %44 = bitcast %"class.base::UnguessableToken"* %43 to i8*
  %45 = bitcast %"class.base::UnguessableToken"* %39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 16, i1 false) #12
  br label %50

46:                                               ; preds = %38
  %47 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %48 = bitcast %union.anon* %47 to i8*
  %49 = bitcast %"class.base::UnguessableToken"* %39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 16, i1 false) #12
  store i8 1, i8* %6, align 8
  br label %50

50:                                               ; preds = %42, %46
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #12
  br label %51

51:                                               ; preds = %50, %17
  ret void
}

declare void @_ZN4util23ValueToUnguessableTokenERKN4base5ValueE(%"class.absl::optional"* sret, %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #3

declare void @_ZN4base5ValueC1ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::Value"*, i8*, i64) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base5ValueD1Ev(%"class.base::Value"*) unnamed_addr #4

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui8AXTreeID10FromStringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.ui::AXTreeID"* noalias nocapture sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1 align 2 {
  tail call void @_ZN2ui8AXTreeIDC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.ui::AXTreeID"* %0, %"class.std::__1::basic_string"* dereferenceable(24) %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui8AXTreeID9FromTokenERKN4base16UnguessableTokenE(%"class.ui::AXTreeID"* noalias nocapture sret, %"class.base::UnguessableToken"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = bitcast %"class.ui::AXTreeID"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 -86, i64 16, i1 false)
  %4 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %4, align 8
  %6 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %union.anon* %6 to i8*
  %8 = bitcast %"class.base::UnguessableToken"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false) #12
  store i8 1, i8* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui8AXTreeID17CreateNewAXTreeIDEv(%"class.ui::AXTreeID"* noalias nocapture sret) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 0
  store i32 1, i32* %2, align 8
  %3 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = tail call { i64, i64 } @_ZN4base16UnguessableToken6CreateEv() #12
  %5 = extractvalue { i64, i64 } %4, 0
  %6 = extractvalue { i64, i64 } %4, 1
  %7 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  store i64 %6, i64* %8, align 8
  store i8 1, i8* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(32) %"class.ui::AXTreeID"* @_ZN2ui8AXTreeIDaSERKS0_(%"class.ui::AXTreeID"* returned, %"class.ui::AXTreeID"* nocapture readonly dereferenceable(32)) local_unnamed_addr #1 align 2 {
  %3 = bitcast %"class.ui::AXTreeID"* %0 to i8*
  %4 = bitcast %"class.ui::AXTreeID"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 32, i1 false)
  ret %"class.ui::AXTreeID"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2ui8AXTreeID8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.ui::AXTreeID"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.base::Value", align 8
  %4 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %35 [
    i32 0, label %6
    i32 1, label %10
  ]

6:                                                ; preds = %2
  %7 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  store i8 0, i8* %8, align 1
  %9 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  store i8 0, i8* %9, align 8
  br label %37

10:                                               ; preds = %2
  %11 = bitcast %"class.base::Value"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %16, !prof !3

15:                                               ; preds = %10
  tail call void @llvm.trap() #12
  unreachable

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  call void @_ZN4util23UnguessableTokenToValueEN4base16UnguessableTokenE(%"class.base::Value"* nonnull sret %3, i64 %18, i64 %20) #12
  %21 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base5Value9GetStringEv(%"class.base::Value"* nonnull %3) #12
  %22 = bitcast %"class.std::__1::basic_string"* %21 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  %24 = load i8, i8* %23, align 1
  %25 = icmp slt i8 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %16
  %27 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %28 = bitcast %"class.std::__1::basic_string"* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 24, i1 false) #12
  br label %34

29:                                               ; preds = %16
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %31, i64 %33) #12
  br label %34

34:                                               ; preds = %26, %29
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #12
  br label %37

35:                                               ; preds = %2
  %36 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #12
  br label %37

37:                                               ; preds = %35, %34, %6
  ret void
}

declare void @_ZN4util23UnguessableTokenToValueEN4base16UnguessableTokenE(%"class.base::Value"* sret, i64, i64) local_unnamed_addr #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base5Value9GetStringEv(%"class.base::Value"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui4swapERNS_8AXTreeIDES1_(%"class.ui::AXTreeID"* nocapture dereferenceable(32), %"class.ui::AXTreeID"* nocapture dereferenceable(32)) local_unnamed_addr #1 {
  %3 = alloca %"class.absl::optional_internal::optional_data_dtor_base", align 8
  %4 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 0
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* %5, align 4
  store i32 %7, i32* %4, align 4
  store i32 %6, i32* %5, align 4
  %8 = getelementptr inbounds %"class.absl::optional_internal::optional_data_dtor_base", %"class.absl::optional_internal::optional_data_dtor_base"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8)
  %9 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* align 8 %9, i64 24, i1 false) #12
  %10 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* nonnull align 8 %8, i64 24, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2ui8AXTreeIDeqERKS0_(%"class.ui::AXTreeID"* nocapture readonly, %"class.ui::AXTreeID"* nocapture readonly dereferenceable(32)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %34

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp ne i8 %10, 0
  %12 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp ne i8 %13, 0
  %15 = xor i1 %11, %14
  %16 = xor i1 %11, true
  %17 = or i1 %15, %16
  %18 = xor i1 %15, true
  br i1 %17, label %34, label %19

19:                                               ; preds = %8
  %20 = icmp eq i8 %13, 0
  br i1 %20, label %21, label %22, !prof !3

21:                                               ; preds = %19
  tail call void @llvm.trap() #12
  unreachable

22:                                               ; preds = %19
  %23 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %24, %26
  br i1 %27, label %28, label %34

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %30, %32
  br label %34

34:                                               ; preds = %28, %22, %8, %2
  %35 = phi i1 [ false, %2 ], [ %18, %8 ], [ false, %22 ], [ %33, %28 ]
  ret i1 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2ui8AXTreeIDneERKS0_(%"class.ui::AXTreeID"* nocapture readonly, %"class.ui::AXTreeID"* nocapture readonly dereferenceable(32)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %34

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp ne i8 %10, 0
  %12 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp ne i8 %13, 0
  %15 = xor i1 %11, %14
  %16 = xor i1 %11, true
  %17 = or i1 %15, %16
  %18 = xor i1 %15, true
  br i1 %17, label %34, label %19

19:                                               ; preds = %8
  %20 = icmp eq i8 %13, 0
  br i1 %20, label %21, label %22, !prof !3

21:                                               ; preds = %19
  tail call void @llvm.trap() #12
  unreachable

22:                                               ; preds = %19
  %23 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %24, %26
  br i1 %27, label %28, label %34

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %30, %32
  br label %34

34:                                               ; preds = %2, %8, %22, %28
  %35 = phi i1 [ false, %2 ], [ %18, %8 ], [ false, %22 ], [ %33, %28 ]
  %36 = xor i1 %35, true
  ret i1 %36
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2ui8AXTreeIDltERKS0_(%"class.ui::AXTreeID"*, %"class.ui::AXTreeID"* dereferenceable(32)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 0
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = icmp slt i32 %5, %6
  br i1 %7, label %32, label %8

8:                                                ; preds = %2
  %9 = icmp slt i32 %6, %5
  br i1 %9, label %32, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %32, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %32, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %23 = load i64, i64* %19, align 8
  %24 = load i64, i64* %21, align 8
  %25 = icmp ult i64 %23, %24
  br i1 %25, label %32, label %26

26:                                               ; preds = %18
  %27 = icmp ult i64 %24, %23
  br i1 %27, label %32, label %28

28:                                               ; preds = %26
  %29 = load i64, i64* %20, align 8
  %30 = load i64, i64* %22, align 8
  %31 = icmp ult i64 %29, %30
  br label %32

32:                                               ; preds = %2, %8, %10, %14, %18, %26, %28
  %33 = phi i1 [ true, %2 ], [ false, %8 ], [ %31, %28 ], [ false, %26 ], [ false, %10 ], [ true, %18 ], [ true, %14 ]
  ret i1 %33
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2ui8AXTreeIDleERKS0_(%"class.ui::AXTreeID"*, %"class.ui::AXTreeID"* dereferenceable(32)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = load i32, i32* %3, align 4
  %7 = icmp slt i32 %5, %6
  br i1 %7, label %32, label %8

8:                                                ; preds = %2
  %9 = icmp slt i32 %6, %5
  br i1 %9, label %32, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %32, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %32, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %23 = load i64, i64* %19, align 8
  %24 = load i64, i64* %21, align 8
  %25 = icmp ult i64 %23, %24
  br i1 %25, label %32, label %26

26:                                               ; preds = %18
  %27 = icmp ult i64 %24, %23
  br i1 %27, label %32, label %28

28:                                               ; preds = %26
  %29 = load i64, i64* %20, align 8
  %30 = load i64, i64* %22, align 8
  %31 = icmp uge i64 %29, %30
  br label %32

32:                                               ; preds = %2, %8, %10, %14, %18, %26, %28
  %33 = phi i1 [ false, %2 ], [ true, %8 ], [ %31, %28 ], [ true, %26 ], [ true, %10 ], [ false, %18 ], [ false, %14 ]
  ret i1 %33
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2ui8AXTreeIDgtERKS0_(%"class.ui::AXTreeID"* nocapture readonly, %"class.ui::AXTreeID"* nocapture readonly dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = load i32, i32* %3, align 4
  %7 = icmp slt i32 %5, %6
  br i1 %7, label %32, label %8

8:                                                ; preds = %2
  %9 = icmp slt i32 %6, %5
  br i1 %9, label %32, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %32, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %32, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %23 = load i64, i64* %19, align 8
  %24 = load i64, i64* %21, align 8
  %25 = icmp ult i64 %23, %24
  br i1 %25, label %32, label %26

26:                                               ; preds = %18
  %27 = icmp ult i64 %24, %23
  br i1 %27, label %32, label %28

28:                                               ; preds = %26
  %29 = load i64, i64* %20, align 8
  %30 = load i64, i64* %22, align 8
  %31 = icmp ult i64 %29, %30
  br label %32

32:                                               ; preds = %2, %8, %10, %14, %18, %26, %28
  %33 = phi i1 [ true, %2 ], [ false, %8 ], [ %31, %28 ], [ false, %26 ], [ false, %10 ], [ true, %18 ], [ true, %14 ]
  ret i1 %33
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2ui8AXTreeIDgeERKS0_(%"class.ui::AXTreeID"* nocapture readonly, %"class.ui::AXTreeID"* nocapture readonly dereferenceable(32)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 0
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = icmp slt i32 %5, %6
  br i1 %7, label %32, label %8

8:                                                ; preds = %2
  %9 = icmp slt i32 %6, %5
  br i1 %9, label %32, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %32, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %32, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %23 = load i64, i64* %19, align 8
  %24 = load i64, i64* %21, align 8
  %25 = icmp ult i64 %23, %24
  br i1 %25, label %32, label %26

26:                                               ; preds = %18
  %27 = icmp ult i64 %24, %23
  br i1 %27, label %32, label %28

28:                                               ; preds = %26
  %29 = load i64, i64* %20, align 8
  %30 = load i64, i64* %22, align 8
  %31 = icmp uge i64 %29, %30
  br label %32

32:                                               ; preds = %2, %8, %10, %14, %18, %26, %28
  %33 = phi i1 [ false, %2 ], [ true, %8 ], [ %31, %28 ], [ true, %26 ], [ true, %10 ], [ false, %18 ], [ false, %14 ]
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2ui12AXTreeIDHashclERKNS_8AXTreeIDE(%"struct.ui::AXTreeIDHash"* nocapture readnone, %"class.ui::AXTreeID"* nocapture readonly dereferenceable(32)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  tail call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #13
  unreachable

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.ui::AXTreeID", %"class.ui::AXTreeID"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = tail call i64 @_ZN4base10HashInts64Emm(i64 %9, i64 %11) #12
  ret i64 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN2uilsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_8AXTreeIDE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.ui::AXTreeID"* nocapture readonly dereferenceable(32)) local_unnamed_addr #1 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #12
  call void @_ZNK2ui8AXTreeID8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %3, %"class.ui::AXTreeID"* %1)
  %5 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = zext i8 %7 to i64
  %14 = select i1 %8, i8* %10, i8* %4
  %15 = select i1 %8, i64 %12, i64 %13
  %16 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* %14, i64 %15) #12
  %17 = load i8, i8* %6, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %2
  %20 = load i8*, i8** %9, align 8
  call void @_ZdlPv(i8* %20) #14
  br label %21

21:                                               ; preds = %2, %19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12
  ret %"class.std::__1::basic_ostream"* %16
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(32) %"class.ui::AXTreeID"* @_ZN2ui15AXTreeIDUnknownEv() local_unnamed_addr #1 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN2ui15AXTreeIDUnknownEvE18ax_tree_id_unknown to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %8, !prof !4

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN2ui15AXTreeIDUnknownEvE18ax_tree_id_unknown) #12
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  store i32 0, i32* bitcast (%"class.base::NoDestructor"* @_ZZN2ui15AXTreeIDUnknownEvE18ax_tree_id_unknown to i32*), align 8
  store i8 0, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN2ui15AXTreeIDUnknownEvE18ax_tree_id_unknown, i64 0, i32 0, i64 8), align 8
  %7 = tail call {}* @llvm.invariant.start.p0i8(i64 32, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN2ui15AXTreeIDUnknownEvE18ax_tree_id_unknown, i64 0, i32 0, i64 0))
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN2ui15AXTreeIDUnknownEvE18ax_tree_id_unknown) #12
  br label %8

8:                                                ; preds = %3, %6, %0
  ret %"class.ui::AXTreeID"* bitcast (%"class.base::NoDestructor"* @_ZZN2ui15AXTreeIDUnknownEvE18ax_tree_id_unknown to %"class.ui::AXTreeID"*)
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

declare i64 @_ZN4base10HashInts64Emm(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() local_unnamed_addr #9

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #1 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #12
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #12
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #12
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #12
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #12
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #12
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #12
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #12
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #1 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #12
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #12
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #14
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #12
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #12
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #14
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #12
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #12
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #4

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 1, i32 1048575}
