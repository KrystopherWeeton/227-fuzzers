; ModuleID = '../../third_party/opus/src/silk/LPC_inv_pred_gain.c'
source_filename = "../../third_party/opus/src/silk/LPC_inv_pred_gain.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @silk_LPC_inverse_pred_gain_c(i16* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = alloca [24 x i32], align 16
  %4 = bitcast [24 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %4) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 96, i1 false)
  %5 = icmp sgt i32 %1, 0
  br i1 %5, label %6, label %110

6:                                                ; preds = %2
  %7 = zext i32 %1 to i64
  %8 = icmp ult i32 %1, 8
  br i1 %8, label %93, label %9

9:                                                ; preds = %6
  %10 = and i64 %7, 4294967288
  %11 = add nsw i64 %10, -8
  %12 = lshr exact i64 %11, 3
  %13 = add nuw nsw i64 %12, 1
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %11, 0
  br i1 %15, label %59, label %16

16:                                               ; preds = %9
  %17 = sub nuw nsw i64 %13, %14
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %56, %18 ]
  %20 = phi <4 x i32> [ zeroinitializer, %16 ], [ %48, %18 ]
  %21 = phi <4 x i32> [ zeroinitializer, %16 ], [ %49, %18 ]
  %22 = phi i64 [ %17, %16 ], [ %57, %18 ]
  %23 = getelementptr inbounds i16, i16* %0, i64 %19
  %24 = bitcast i16* %23 to <4 x i16>*
  %25 = load <4 x i16>, <4 x i16>* %24, align 2
  %26 = getelementptr inbounds i16, i16* %23, i64 4
  %27 = bitcast i16* %26 to <4 x i16>*
  %28 = load <4 x i16>, <4 x i16>* %27, align 2
  %29 = sext <4 x i16> %25 to <4 x i32>
  %30 = sext <4 x i16> %28 to <4 x i32>
  %31 = add nsw <4 x i32> %20, %29
  %32 = add nsw <4 x i32> %21, %30
  %33 = shl nsw <4 x i32> %29, <i32 12, i32 12, i32 12, i32 12>
  %34 = shl nsw <4 x i32> %30, <i32 12, i32 12, i32 12, i32 12>
  %35 = getelementptr inbounds [24 x i32], [24 x i32]* %3, i64 0, i64 %19
  %36 = bitcast i32* %35 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %36, align 16
  %37 = getelementptr inbounds i32, i32* %35, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %38, align 16
  %39 = or i64 %19, 8
  %40 = getelementptr inbounds i16, i16* %0, i64 %39
  %41 = bitcast i16* %40 to <4 x i16>*
  %42 = load <4 x i16>, <4 x i16>* %41, align 2
  %43 = getelementptr inbounds i16, i16* %40, i64 4
  %44 = bitcast i16* %43 to <4 x i16>*
  %45 = load <4 x i16>, <4 x i16>* %44, align 2
  %46 = sext <4 x i16> %42 to <4 x i32>
  %47 = sext <4 x i16> %45 to <4 x i32>
  %48 = add nsw <4 x i32> %31, %46
  %49 = add nsw <4 x i32> %32, %47
  %50 = shl nsw <4 x i32> %46, <i32 12, i32 12, i32 12, i32 12>
  %51 = shl nsw <4 x i32> %47, <i32 12, i32 12, i32 12, i32 12>
  %52 = getelementptr inbounds [24 x i32], [24 x i32]* %3, i64 0, i64 %39
  %53 = bitcast i32* %52 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %53, align 16
  %54 = getelementptr inbounds i32, i32* %52, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> %51, <4 x i32>* %55, align 16
  %56 = add i64 %19, 16
  %57 = add i64 %22, -2
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %18, !llvm.loop !2

59:                                               ; preds = %18, %9
  %60 = phi <4 x i32> [ undef, %9 ], [ %48, %18 ]
  %61 = phi <4 x i32> [ undef, %9 ], [ %49, %18 ]
  %62 = phi i64 [ 0, %9 ], [ %56, %18 ]
  %63 = phi <4 x i32> [ zeroinitializer, %9 ], [ %48, %18 ]
  %64 = phi <4 x i32> [ zeroinitializer, %9 ], [ %49, %18 ]
  %65 = icmp eq i64 %14, 0
  br i1 %65, label %83, label %66

66:                                               ; preds = %59
  %67 = getelementptr inbounds i16, i16* %0, i64 %62
  %68 = bitcast i16* %67 to <4 x i16>*
  %69 = load <4 x i16>, <4 x i16>* %68, align 2
  %70 = getelementptr inbounds i16, i16* %67, i64 4
  %71 = bitcast i16* %70 to <4 x i16>*
  %72 = load <4 x i16>, <4 x i16>* %71, align 2
  %73 = sext <4 x i16> %69 to <4 x i32>
  %74 = sext <4 x i16> %72 to <4 x i32>
  %75 = shl nsw <4 x i32> %73, <i32 12, i32 12, i32 12, i32 12>
  %76 = shl nsw <4 x i32> %74, <i32 12, i32 12, i32 12, i32 12>
  %77 = getelementptr inbounds [24 x i32], [24 x i32]* %3, i64 0, i64 %62
  %78 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %78, align 16
  %79 = getelementptr inbounds i32, i32* %77, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %80, align 16
  %81 = add nsw <4 x i32> %64, %74
  %82 = add nsw <4 x i32> %63, %73
  br label %83

83:                                               ; preds = %59, %66
  %84 = phi <4 x i32> [ %60, %59 ], [ %82, %66 ]
  %85 = phi <4 x i32> [ %61, %59 ], [ %81, %66 ]
  %86 = add <4 x i32> %85, %84
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %88 = add <4 x i32> %86, %87
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %90 = add <4 x i32> %88, %89
  %91 = extractelement <4 x i32> %90, i32 0
  %92 = icmp eq i64 %10, %7
  br i1 %92, label %107, label %93

93:                                               ; preds = %83, %6
  %94 = phi i64 [ 0, %6 ], [ %10, %83 ]
  %95 = phi i32 [ 0, %6 ], [ %91, %83 ]
  br label %96

96:                                               ; preds = %93, %96
  %97 = phi i64 [ %105, %96 ], [ %94, %93 ]
  %98 = phi i32 [ %102, %96 ], [ %95, %93 ]
  %99 = getelementptr inbounds i16, i16* %0, i64 %97
  %100 = load i16, i16* %99, align 2
  %101 = sext i16 %100 to i32
  %102 = add nsw i32 %98, %101
  %103 = shl nsw i32 %101, 12
  %104 = getelementptr inbounds [24 x i32], [24 x i32]* %3, i64 0, i64 %97
  store i32 %103, i32* %104, align 4
  %105 = add nuw nsw i64 %97, 1
  %106 = icmp eq i64 %105, %7
  br i1 %106, label %107, label %96, !llvm.loop !4

107:                                              ; preds = %96, %83
  %108 = phi i32 [ %91, %83 ], [ %102, %96 ]
  %109 = icmp sgt i32 %108, 4095
  br i1 %109, label %303, label %110

110:                                              ; preds = %2, %107
  %111 = getelementptr inbounds [24 x i32], [24 x i32]* %3, i64 0, i64 0
  %112 = add i32 %1, -1
  %113 = icmp sgt i32 %112, 0
  %114 = sext i32 %112 to i64
  %115 = getelementptr inbounds [24 x i32], [24 x i32]* %3, i64 0, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = add i32 %116, 16773022
  %118 = icmp ugt i32 %117, 33546044
  br i1 %113, label %119, label %285

119:                                              ; preds = %110, %276
  %120 = phi i64 [ %279, %276 ], [ %114, %110 ]
  %121 = phi i1 [ %284, %276 ], [ %118, %110 ]
  %122 = phi i32 [ %282, %276 ], [ %116, %110 ]
  %123 = phi i64 [ %278, %276 ], [ 1073741824, %110 ]
  %124 = phi i32 [ %277, %276 ], [ %1, %110 ]
  br i1 %121, label %303, label %125

125:                                              ; preds = %119
  %126 = shl i32 %122, 7
  %127 = sub nsw i32 0, %126
  %128 = sext i32 %127 to i64
  %129 = mul nsw i64 %128, %128
  %130 = lshr i64 %129, 32
  %131 = trunc i64 %130 to i32
  %132 = sub nsw i32 1073741824, %131
  %133 = sext i32 %132 to i64
  %134 = mul nsw i64 %123, %133
  %135 = lshr i64 %134, 30
  %136 = trunc i64 %135 to i32
  %137 = and i32 %136, -4
  %138 = icmp slt i32 %137, 107374
  br i1 %138, label %303, label %139

139:                                              ; preds = %125
  %140 = icmp ult i32 %131, 1073741824
  %141 = add nsw i32 %131, -1073741824
  %142 = select i1 %140, i32 %132, i32 %141
  %143 = tail call i32 @llvm.ctlz.i32(i32 %142, i1 false) #3, !range !6
  %144 = icmp ugt i32 %131, 1073741824
  %145 = select i1 %144, i32 %141, i32 %132
  %146 = tail call i32 @llvm.ctlz.i32(i32 %145, i1 false) #3, !range !6
  %147 = add nsw i32 %146, -1
  %148 = shl i32 %132, %147
  %149 = ashr i32 %148, 16
  %150 = sdiv i32 536870911, %149
  %151 = shl i32 %150, 16
  %152 = sext i32 %148 to i64
  %153 = zext i32 %150 to i64
  %154 = shl i64 %153, 48
  %155 = ashr exact i64 %154, 48
  %156 = shl nsw i64 %152, 19
  %157 = mul i64 %156, %155
  %158 = and i64 %157, -34359738368
  %159 = sub i64 0, %158
  %160 = ashr exact i64 %159, 32
  %161 = sext i32 %150 to i64
  %162 = mul nsw i64 %160, %161
  %163 = lshr i64 %162, 16
  %164 = trunc i64 %163 to i32
  %165 = add i32 %151, %164
  %166 = sub nuw nsw i32 62, %146
  %167 = add nuw nsw i32 %143, -62
  %168 = add nsw i32 %167, %166
  %169 = icmp slt i32 %168, 1
  br i1 %169, label %170, label %188

170:                                              ; preds = %139
  %171 = sub nsw i32 0, %168
  %172 = ashr i32 -2147483648, %171
  %173 = lshr i32 2147483647, %171
  %174 = icmp sgt i32 %172, %173
  br i1 %174, label %175, label %180

175:                                              ; preds = %170
  %176 = icmp sgt i32 %165, %172
  br i1 %176, label %185, label %177

177:                                              ; preds = %175
  %178 = icmp slt i32 %165, %173
  %179 = select i1 %178, i32 %173, i32 %165
  br label %185

180:                                              ; preds = %170
  %181 = icmp sgt i32 %165, %173
  br i1 %181, label %185, label %182

182:                                              ; preds = %180
  %183 = icmp slt i32 %165, %172
  %184 = select i1 %183, i32 %172, i32 %165
  br label %185

185:                                              ; preds = %182, %180, %177, %175
  %186 = phi i32 [ %172, %175 ], [ %179, %177 ], [ %173, %180 ], [ %184, %182 ]
  %187 = shl i32 %186, %171
  br label %192

188:                                              ; preds = %139
  %189 = icmp slt i32 %168, 32
  %190 = ashr i32 %165, %168
  %191 = select i1 %189, i32 %190, i32 0
  br label %192

192:                                              ; preds = %188, %185
  %193 = phi i32 [ %187, %185 ], [ %191, %188 ]
  %194 = icmp sgt i32 %124, 1
  br i1 %194, label %195, label %276

195:                                              ; preds = %192
  %196 = lshr i32 %124, 1
  %197 = icmp eq i32 %143, 31
  %198 = sext i32 %193 to i64
  %199 = sub nsw i32 31, %143
  %200 = zext i32 %199 to i64
  %201 = zext i32 %196 to i64
  br label %202

202:                                              ; preds = %272, %195
  %203 = phi i64 [ 0, %195 ], [ %274, %272 ]
  %204 = getelementptr inbounds [24 x i32], [24 x i32]* %3, i64 0, i64 %203
  %205 = load i32, i32* %204, align 4
  %206 = xor i64 %203, 4294967295
  %207 = add i64 %206, %120
  %208 = shl i64 %207, 32
  %209 = ashr exact i64 %208, 32
  %210 = getelementptr inbounds [24 x i32], [24 x i32]* %3, i64 0, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = sext i32 %211 to i64
  %213 = mul nsw i64 %212, %128
  %214 = lshr i64 %213, 30
  %215 = add nuw nsw i64 %214, 1
  %216 = lshr i64 %215, 1
  %217 = trunc i64 %216 to i32
  %218 = sub i32 %205, %217
  %219 = icmp sgt i32 %218, -1
  %220 = select i1 %219, i32 %217, i32 %205
  %221 = select i1 %219, i32 %205, i32 %217
  %222 = select i1 %219, i32 -2147483648, i32 2147483647
  %223 = xor i32 %220, -2147483648
  %224 = and i32 %223, %221
  %225 = icmp slt i32 %224, 0
  %226 = select i1 %225, i32 %222, i32 %218
  %227 = sext i32 %226 to i64
  %228 = mul nsw i64 %227, %198
  br i1 %197, label %229, label %233

229:                                              ; preds = %202
  %230 = ashr i64 %228, 1
  %231 = and i64 %228, 1
  %232 = add nsw i64 %231, %230
  br label %237

233:                                              ; preds = %202
  %234 = ashr i64 %228, %200
  %235 = add nsw i64 %234, 1
  %236 = ashr i64 %235, 1
  br label %237

237:                                              ; preds = %233, %229
  %238 = phi i64 [ %232, %229 ], [ %236, %233 ]
  %239 = add nsw i64 %238, 2147483648
  %240 = icmp ugt i64 %239, 4294967295
  br i1 %240, label %303, label %241

241:                                              ; preds = %237
  %242 = trunc i64 %238 to i32
  store i32 %242, i32* %204, align 4
  %243 = sext i32 %205 to i64
  %244 = mul nsw i64 %243, %128
  %245 = lshr i64 %244, 30
  %246 = add nuw nsw i64 %245, 1
  %247 = lshr i64 %246, 1
  %248 = trunc i64 %247 to i32
  %249 = sub i32 %211, %248
  %250 = icmp sgt i32 %249, -1
  %251 = select i1 %250, i32 %248, i32 %211
  %252 = select i1 %250, i32 %211, i32 %248
  %253 = select i1 %250, i32 -2147483648, i32 2147483647
  %254 = xor i32 %251, -2147483648
  %255 = and i32 %254, %252
  %256 = icmp slt i32 %255, 0
  %257 = select i1 %256, i32 %253, i32 %249
  %258 = sext i32 %257 to i64
  %259 = mul nsw i64 %258, %198
  br i1 %197, label %260, label %264

260:                                              ; preds = %241
  %261 = ashr i64 %259, 1
  %262 = and i64 %259, 1
  %263 = add nsw i64 %262, %261
  br label %268

264:                                              ; preds = %241
  %265 = ashr i64 %259, %200
  %266 = add nsw i64 %265, 1
  %267 = ashr i64 %266, 1
  br label %268

268:                                              ; preds = %264, %260
  %269 = phi i64 [ %263, %260 ], [ %267, %264 ]
  %270 = add nsw i64 %269, 2147483648
  %271 = icmp ugt i64 %270, 4294967295
  br i1 %271, label %303, label %272

272:                                              ; preds = %268
  %273 = trunc i64 %269 to i32
  store i32 %273, i32* %210, align 4
  %274 = add nuw nsw i64 %203, 1
  %275 = icmp ult i64 %274, %201
  br i1 %275, label %202, label %276

276:                                              ; preds = %272, %192
  %277 = trunc i64 %120 to i32
  %278 = sext i32 %137 to i64
  %279 = add nsw i64 %120, -1
  %280 = icmp sgt i64 %279, 0
  %281 = getelementptr inbounds [24 x i32], [24 x i32]* %3, i64 0, i64 %279
  %282 = load i32, i32* %281, align 4
  %283 = add i32 %282, 16773022
  %284 = icmp ugt i32 %283, 33546044
  br i1 %280, label %119, label %285

285:                                              ; preds = %276, %110
  %286 = phi i64 [ 1073741824, %110 ], [ %278, %276 ]
  %287 = phi i1 [ %118, %110 ], [ %284, %276 ]
  br i1 %287, label %303, label %288

288:                                              ; preds = %285
  %289 = load i32, i32* %111, align 16
  %290 = shl i32 %289, 7
  %291 = sub nsw i32 0, %290
  %292 = sext i32 %291 to i64
  %293 = mul nsw i64 %292, %292
  %294 = and i64 %293, 9223372032559808512
  %295 = sub nsw i64 4611686018427387904, %294
  %296 = ashr exact i64 %295, 32
  %297 = mul nsw i64 %296, %286
  %298 = lshr i64 %297, 30
  %299 = trunc i64 %298 to i32
  %300 = and i32 %299, -4
  %301 = icmp slt i32 %300, 107374
  %302 = select i1 %301, i32 0, i32 %300
  br label %303

303:                                              ; preds = %125, %119, %268, %237, %288, %285, %107
  %304 = phi i32 [ 0, %107 ], [ 0, %285 ], [ %302, %288 ], [ 0, %237 ], [ 0, %268 ], [ 0, %119 ], [ 0, %125 ]
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %4) #3
  ret i32 %304
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #2

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{i32 0, i32 33}
