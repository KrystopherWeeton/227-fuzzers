; ModuleID = '../../third_party/libgav1/src/src/dsp/average_blend.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/average_blend.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp18AverageBlendInit_CEv() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #3
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 0
  store void (i8*, i8*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_114AverageBlend_CILi8EhEEvPKvS4_iiPvl, void (i8*, i8*, i32, i32, i8*, i64)** %2, align 8
  %3 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #3
  %4 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %3, i64 0, i32 0
  store void (i8*, i8*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_114AverageBlend_CILi10EtEEvPKvS4_iiPvl, void (i8*, i8*, i32, i32, i8*, i64)** %4, align 8
  ret void
}

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_114AverageBlend_CILi8EhEEvPKvS4_iiPvl(i8* nocapture readonly, i8* nocapture readonly, i32, i32, i8* nocapture, i64) #2 {
  %7 = bitcast i8* %0 to i16*
  %8 = bitcast i8* %1 to i16*
  %9 = sext i32 %2 to i64
  %10 = icmp sgt i64 %9, 1
  %11 = select i1 %10, i64 %9, i64 1
  %12 = icmp sgt i64 %9, 1
  %13 = select i1 %12, i64 %9, i64 1
  %14 = shl nsw i64 %9, 1
  %15 = shl nuw nsw i64 %13, 1
  %16 = icmp ult i64 %11, 8
  %17 = and i64 %11, 9223372036854775800
  %18 = icmp eq i64 %11, %17
  br label %19

19:                                               ; preds = %87, %6
  %20 = phi i64 [ %93, %87 ], [ 0, %6 ]
  %21 = phi i16* [ %90, %87 ], [ %8, %6 ]
  %22 = phi i8* [ %88, %87 ], [ %4, %6 ]
  %23 = phi i32 [ %91, %87 ], [ 0, %6 ]
  %24 = phi i16* [ %89, %87 ], [ %7, %6 ]
  %25 = mul i64 %20, %5
  %26 = getelementptr i8, i8* %4, i64 %25
  %27 = add i64 %13, %25
  %28 = getelementptr i8, i8* %4, i64 %27
  %29 = mul i64 %14, %20
  %30 = add i64 %15, %29
  br i1 %16, label %66, label %31

31:                                               ; preds = %19
  %32 = getelementptr i8, i8* %1, i64 %30
  %33 = getelementptr i8, i8* %1, i64 %29
  %34 = getelementptr i8, i8* %0, i64 %30
  %35 = getelementptr i8, i8* %0, i64 %29
  %36 = icmp ult i8* %26, %34
  %37 = icmp ult i8* %35, %28
  %38 = and i1 %36, %37
  %39 = icmp ult i8* %26, %32
  %40 = icmp ult i8* %33, %28
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  br i1 %42, label %66, label %43

43:                                               ; preds = %31, %43
  %44 = phi i64 [ %63, %43 ], [ 0, %31 ]
  %45 = getelementptr inbounds i16, i16* %24, i64 %44
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 2, !alias.scope !2
  %48 = sext <8 x i16> %47 to <8 x i32>
  %49 = getelementptr inbounds i16, i16* %21, i64 %44
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 2, !alias.scope !5
  %52 = sext <8 x i16> %51 to <8 x i32>
  %53 = add nsw <8 x i32> %48, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %54 = add nsw <8 x i32> %53, %52
  %55 = ashr <8 x i32> %54, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %56 = icmp slt <8 x i32> %55, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %57 = select <8 x i1> %56, <8 x i32> %55, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %58 = icmp sgt <8 x i32> %57, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i32> %57, <8 x i32> zeroinitializer
  %60 = trunc <8 x i32> %59 to <8 x i8>
  %61 = getelementptr inbounds i8, i8* %22, i64 %44
  %62 = bitcast i8* %61 to <8 x i8>*
  store <8 x i8> %60, <8 x i8>* %62, align 1, !alias.scope !7, !noalias !9
  %63 = add i64 %44, 8
  %64 = icmp eq i64 %63, %17
  br i1 %64, label %65, label %43, !llvm.loop !10

65:                                               ; preds = %43
  br i1 %18, label %87, label %66

66:                                               ; preds = %65, %31, %19
  %67 = phi i64 [ 0, %31 ], [ 0, %19 ], [ %17, %65 ]
  br label %68

68:                                               ; preds = %66, %68
  %69 = phi i64 [ %85, %68 ], [ %67, %66 ]
  %70 = getelementptr inbounds i16, i16* %24, i64 %69
  %71 = load i16, i16* %70, align 2
  %72 = sext i16 %71 to i32
  %73 = getelementptr inbounds i16, i16* %21, i64 %69
  %74 = load i16, i16* %73, align 2
  %75 = sext i16 %74 to i32
  %76 = add nsw i32 %72, 16
  %77 = add nsw i32 %76, %75
  %78 = ashr i32 %77, 5
  %79 = icmp slt i32 %78, 255
  %80 = select i1 %79, i32 %78, i32 255
  %81 = icmp sgt i32 %80, 0
  %82 = select i1 %81, i32 %80, i32 0
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds i8, i8* %22, i64 %69
  store i8 %83, i8* %84, align 1
  %85 = add nuw nsw i64 %69, 1
  %86 = icmp slt i64 %85, %9
  br i1 %86, label %68, label %87, !llvm.loop !12

87:                                               ; preds = %68, %65
  %88 = getelementptr inbounds i8, i8* %22, i64 %5
  %89 = getelementptr inbounds i16, i16* %24, i64 %9
  %90 = getelementptr inbounds i16, i16* %21, i64 %9
  %91 = add nuw nsw i32 %23, 1
  %92 = icmp slt i32 %91, %3
  %93 = add i64 %20, 1
  br i1 %92, label %19, label %94

94:                                               ; preds = %87
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_114AverageBlend_CILi10EtEEvPKvS4_iiPvl(i8* nocapture readonly, i8* nocapture readonly, i32, i32, i8* nocapture, i64) #2 {
  %7 = bitcast i8* %0 to i16*
  %8 = bitcast i8* %1 to i16*
  %9 = bitcast i8* %4 to i16*
  %10 = lshr i64 %5, 1
  %11 = sext i32 %2 to i64
  %12 = icmp sgt i64 %11, 1
  %13 = select i1 %12, i64 %11, i64 1
  %14 = and i64 %5, -2
  %15 = icmp sgt i64 %11, 1
  %16 = select i1 %15, i64 %11, i64 1
  %17 = shl nuw nsw i64 %16, 1
  %18 = shl nsw i64 %11, 1
  %19 = icmp ult i64 %13, 8
  %20 = and i64 %13, 9223372036854775800
  %21 = icmp eq i64 %13, %20
  br label %22

22:                                               ; preds = %90, %6
  %23 = phi i64 [ %96, %90 ], [ 0, %6 ]
  %24 = phi i16* [ %93, %90 ], [ %8, %6 ]
  %25 = phi i16* [ %91, %90 ], [ %9, %6 ]
  %26 = phi i32 [ %94, %90 ], [ 0, %6 ]
  %27 = phi i16* [ %92, %90 ], [ %7, %6 ]
  %28 = mul i64 %14, %23
  %29 = getelementptr i8, i8* %4, i64 %28
  %30 = add i64 %17, %28
  %31 = getelementptr i8, i8* %4, i64 %30
  %32 = mul i64 %18, %23
  %33 = add i64 %17, %32
  br i1 %19, label %69, label %34

34:                                               ; preds = %22
  %35 = getelementptr i8, i8* %1, i64 %33
  %36 = getelementptr i8, i8* %1, i64 %32
  %37 = getelementptr i8, i8* %0, i64 %33
  %38 = getelementptr i8, i8* %0, i64 %32
  %39 = icmp ult i8* %29, %37
  %40 = icmp ult i8* %38, %31
  %41 = and i1 %39, %40
  %42 = icmp ult i8* %29, %35
  %43 = icmp ult i8* %36, %31
  %44 = and i1 %42, %43
  %45 = or i1 %41, %44
  br i1 %45, label %69, label %46

46:                                               ; preds = %34, %46
  %47 = phi i64 [ %66, %46 ], [ 0, %34 ]
  %48 = getelementptr inbounds i16, i16* %27, i64 %47
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !13
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = getelementptr inbounds i16, i16* %24, i64 %47
  %53 = bitcast i16* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 2, !alias.scope !16
  %55 = zext <8 x i16> %54 to <8 x i32>
  %56 = add nsw <8 x i32> %51, <i32 -49136, i32 -49136, i32 -49136, i32 -49136, i32 -49136, i32 -49136, i32 -49136, i32 -49136>
  %57 = add nsw <8 x i32> %56, %55
  %58 = ashr <8 x i32> %57, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %59 = icmp slt <8 x i32> %58, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %60 = select <8 x i1> %59, <8 x i32> %58, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %61 = icmp sgt <8 x i32> %60, zeroinitializer
  %62 = select <8 x i1> %61, <8 x i32> %60, <8 x i32> zeroinitializer
  %63 = trunc <8 x i32> %62 to <8 x i16>
  %64 = getelementptr inbounds i16, i16* %25, i64 %47
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %65, align 2, !alias.scope !18, !noalias !20
  %66 = add i64 %47, 8
  %67 = icmp eq i64 %66, %20
  br i1 %67, label %68, label %46, !llvm.loop !21

68:                                               ; preds = %46
  br i1 %21, label %90, label %69

69:                                               ; preds = %68, %34, %22
  %70 = phi i64 [ 0, %34 ], [ 0, %22 ], [ %20, %68 ]
  br label %71

71:                                               ; preds = %69, %71
  %72 = phi i64 [ %88, %71 ], [ %70, %69 ]
  %73 = getelementptr inbounds i16, i16* %27, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = getelementptr inbounds i16, i16* %24, i64 %72
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = add nsw i32 %75, -49136
  %80 = add nsw i32 %79, %78
  %81 = ashr i32 %80, 5
  %82 = icmp slt i32 %81, 1023
  %83 = select i1 %82, i32 %81, i32 1023
  %84 = icmp sgt i32 %83, 0
  %85 = select i1 %84, i32 %83, i32 0
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds i16, i16* %25, i64 %72
  store i16 %86, i16* %87, align 2
  %88 = add nuw nsw i64 %72, 1
  %89 = icmp slt i64 %88, %11
  br i1 %89, label %71, label %90, !llvm.loop !22

90:                                               ; preds = %71, %68
  %91 = getelementptr inbounds i16, i16* %25, i64 %10
  %92 = getelementptr inbounds i16, i16* %27, i64 %11
  %93 = getelementptr inbounds i16, i16* %24, i64 %11
  %94 = add nuw nsw i32 %26, 1
  %95 = icmp slt i32 %94, %3
  %96 = add i64 %23, 1
  br i1 %95, label %22, label %97

97:                                               ; preds = %90
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!3, !6}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = !{!19}
!19 = distinct !{!19, !15}
!20 = !{!14, !17}
!21 = distinct !{!21, !11}
!22 = distinct !{!22, !11}
