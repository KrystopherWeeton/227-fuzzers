; ModuleID = '../../net/cert/do_nothing_ct_verifier.cc'
source_filename = "../../net/cert/do_nothing_ct_verifier.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::DoNothingCTVerifier" = type { %"class.net::CTVerifier" }
%"class.net::CTVerifier" = type { i32 (...)** }
%"class.net::X509Certificate" = type opaque
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"*, %"class.std::__1::__compressed_pair.2" }
%"struct.net::SignedCertificateTimestampAndStatus" = type <{ %class.scoped_refptr, i32, [4 x i8] }>
%class.scoped_refptr = type { %"struct.net::ct::SignedCertificateTimestamp"* }
%"struct.net::ct::SignedCertificateTimestamp" = type { %"class.base::RefCountedThreadSafe", i32, %"class.std::__1::basic_string", %"class.base::Time", %"class.std::__1::basic_string", %"struct.net::ct::DigitallySigned", i32, %"class.std::__1::basic_string" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.net::ct::DigitallySigned" = type { i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.net::SignedCertificateTimestampAndStatus"* }
%"class.net::NetLogWithSource" = type opaque

@_ZTVN3net19DoNothingCTVerifierE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::DoNothingCTVerifier"*)* @_ZN3net19DoNothingCTVerifierD2Ev to i8*), i8* bitcast (void (%"class.net::DoNothingCTVerifier"*)* @_ZN3net19DoNothingCTVerifierD0Ev to i8*), i8* bitcast (void (%"class.net::DoNothingCTVerifier"*, i8*, i64, %"class.net::X509Certificate"*, i8*, i64, %"class.base::BasicStringPiece"*, %"class.std::__1::vector"*, %"class.net::NetLogWithSource"*)* @_ZN3net19DoNothingCTVerifier6VerifyEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS_15X509CertificateES6_S6_PNS3_6vectorINS_35SignedCertificateTimestampAndStatusENS3_9allocatorISA_EEEERKNS_16NetLogWithSourceE to i8*)] }, align 8

@_ZN3net19DoNothingCTVerifierC1Ev = hidden unnamed_addr alias void (%"class.net::DoNothingCTVerifier"*), void (%"class.net::DoNothingCTVerifier"*)* @_ZN3net19DoNothingCTVerifierC2Ev
@_ZN3net19DoNothingCTVerifierD1Ev = hidden unnamed_addr alias void (%"class.net::DoNothingCTVerifier"*), void (%"class.net::DoNothingCTVerifier"*)* @_ZN3net19DoNothingCTVerifierD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net19DoNothingCTVerifierC2Ev(%"class.net::DoNothingCTVerifier"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::DoNothingCTVerifier", %"class.net::DoNothingCTVerifier"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3net19DoNothingCTVerifierE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net19DoNothingCTVerifierD2Ev(%"class.net::DoNothingCTVerifier"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net19DoNothingCTVerifierD0Ev(%"class.net::DoNothingCTVerifier"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.net::DoNothingCTVerifier"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net19DoNothingCTVerifier6VerifyEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS_15X509CertificateES6_S6_PNS3_6vectorINS_35SignedCertificateTimestampAndStatusENS3_9allocatorISA_EEEERKNS_16NetLogWithSourceE(%"class.net::DoNothingCTVerifier"* nocapture readnone, i8* nocapture readnone, i64, %"class.net::X509Certificate"* nocapture readnone, i8* nocapture readnone, i64, %"class.base::BasicStringPiece"* nocapture readnone byval(%"class.base::BasicStringPiece") align 8, %"class.std::__1::vector"* nocapture, %"class.net::NetLogWithSource"* nocapture readnone) unnamed_addr #2 align 2 {
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %11 = load %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %13 = load %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"** %12, align 8
  %14 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %13, %11
  br i1 %14, label %19, label %15

15:                                               ; preds = %9, %15
  %16 = phi %"struct.net::SignedCertificateTimestampAndStatus"* [ %17, %15 ], [ %13, %9 ]
  %17 = getelementptr inbounds %"struct.net::SignedCertificateTimestampAndStatus", %"struct.net::SignedCertificateTimestampAndStatus"* %16, i64 -1
  tail call void @_ZN3net35SignedCertificateTimestampAndStatusD1Ev(%"struct.net::SignedCertificateTimestampAndStatus"* %17) #6
  %18 = icmp eq %"struct.net::SignedCertificateTimestampAndStatus"* %17, %11
  br i1 %18, label %19, label %15

19:                                               ; preds = %15, %9
  store %"struct.net::SignedCertificateTimestampAndStatus"* %11, %"struct.net::SignedCertificateTimestampAndStatus"** %12, align 8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net35SignedCertificateTimestampAndStatusD1Ev(%"struct.net::SignedCertificateTimestampAndStatus"*) unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { builtin nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
