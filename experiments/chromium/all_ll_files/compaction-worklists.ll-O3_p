; ModuleID = '../../v8/src/heap/cppgc/compaction-worklists.cc'
source_filename = "../../v8/src/heap/cppgc/compaction-worklists.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cppgc::internal::CompactionWorklists" = type { %"class.heap::base::Worklist" }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<const void **, 256>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.heap::base::Worklist<const void **, 256>::Segment" = type { %"class.heap::base::internal::SegmentBase", %"class.heap::base::Worklist<const void **, 256>::Segment"*, [256 x i8**] }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5cppgc8internal19CompactionWorklists15ClearForTestingEv(%"class.cppgc::internal::CompactionWorklists"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cppgc::internal::CompactionWorklists", %"class.cppgc::internal::CompactionWorklists"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %2) #3
  %3 = getelementptr inbounds %"class.cppgc::internal::CompactionWorklists", %"class.cppgc::internal::CompactionWorklists"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i64 0, i64* %3 monotonic, align 8
  %4 = getelementptr inbounds %"class.cppgc::internal::CompactionWorklists", %"class.cppgc::internal::CompactionWorklists"* %0, i64 0, i32 0, i32 1
  %5 = load %"class.heap::base::Worklist<const void **, 256>::Segment"*, %"class.heap::base::Worklist<const void **, 256>::Segment"** %4, align 8
  %6 = icmp eq %"class.heap::base::Worklist<const void **, 256>::Segment"* %5, null
  br i1 %6, label %13, label %7

7:                                                ; preds = %1, %7
  %8 = phi %"class.heap::base::Worklist<const void **, 256>::Segment"* [ %11, %7 ], [ %5, %1 ]
  %9 = bitcast %"class.heap::base::Worklist<const void **, 256>::Segment"* %8 to i8*
  %10 = getelementptr inbounds %"class.heap::base::Worklist<const void **, 256>::Segment", %"class.heap::base::Worklist<const void **, 256>::Segment"* %8, i64 0, i32 1
  %11 = load %"class.heap::base::Worklist<const void **, 256>::Segment"*, %"class.heap::base::Worklist<const void **, 256>::Segment"** %10, align 8
  tail call void @_ZdlPv(i8* %9) #4
  %12 = icmp eq %"class.heap::base::Worklist<const void **, 256>::Segment"* %11, null
  br i1 %12, label %13, label %7

13:                                               ; preds = %7, %1
  %14 = bitcast %"class.heap::base::Worklist<const void **, 256>::Segment"** %4 to i64*
  store atomic i64 0, i64* %14 monotonic, align 8
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %2) #3
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

declare void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"*) local_unnamed_addr #2

declare void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
