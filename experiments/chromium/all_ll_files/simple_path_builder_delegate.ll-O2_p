; ModuleID = '../../net/cert/internal/simple_path_builder_delegate.cc'
source_filename = "../../net/cert/internal/simple_path_builder_delegate.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::SimplePathBuilderDelegate" = type <{ %"class.net::CertPathBuilderDelegate", i64, i32, [4 x i8] }>
%"class.net::CertPathBuilderDelegate" = type { %"class.net::VerifyCertificateChainDelegate" }
%"class.net::VerifyCertificateChainDelegate" = type { i32 (...)** }
%"class.net::CertPathBuilder" = type <{ %"struct.net::CertPathBuilder::Result", %"class.std::__1::unique_ptr.9", %"class.net::CertPathBuilderDelegate"*, %"struct.net::der::GeneralizedTime", i32, i32, %"class.std::__1::set", i32, i32, i32, [4 x i8], %"class.base::TimeTicks", i8, [7 x i8] }>
%"struct.net::CertPathBuilder::Result" = type <{ %"class.base::SupportsUserData.base", [7 x i8], %"class.std::__1::vector", i64, i8, i8, [6 x i8] }>
%"class.base::SupportsUserData.base" = type <{ i32 (...)**, %"class.std::__1::map", %"class.base::SequenceCheckerDoNothing" }>
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.net::CertPathIter"* }
%"class.net::CertPathIter" = type opaque
%"struct.net::der::GeneralizedTime" = type { i16, i8, i8, i8, i8, i8 }
%"class.std::__1::set" = type { %"class.std::__1::__tree.13" }
%"class.std::__1::__tree.13" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.net::CertPathBuilderResultPath" = type { %"class.std::__1::vector.22", %"struct.net::CertificateTrust", %"class.std::__1::set", %"class.std::__1::unique_ptr.29", %"class.net::CertPathErrors" }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %class.scoped_refptr*, %class.scoped_refptr*, %"class.std::__1::__compressed_pair.24" }
%class.scoped_refptr = type opaque
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %class.scoped_refptr* }
%"struct.net::CertificateTrust" = type { i32 }
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.net::CertPathBuilderDelegateData"* }
%"class.net::CertPathBuilderDelegateData" = type { i32 (...)** }
%"class.net::CertPathErrors" = type { %"class.std::__1::vector.35", %"class.net::CertErrors" }
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { %"class.net::CertErrors"*, %"class.net::CertErrors"*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.net::CertErrors"* }
%"class.net::CertErrors" = type { %"class.std::__1::vector.37" }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"struct.net::CertError"*, %"struct.net::CertError"*, %"class.std::__1::__compressed_pair.45" }
%"struct.net::CertError" = type { i32, i8*, %"class.std::__1::unique_ptr.39" }
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.net::CertErrorParams"* }
%"class.net::CertErrorParams" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"struct.net::CertError"* }
%"class.net::SignatureAlgorithm" = type { i32, i32, %"class.std::__1::unique_ptr.55" }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.net::SignatureAlgorithmParameters"* }
%"class.net::SignatureAlgorithmParameters" = type { i32 (...)** }
%"class.net::RsaPssParameters" = type { %"class.net::SignatureAlgorithmParameters", i32, i32 }
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.rsa_st = type { %struct.rsa_meth_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.crypto_ex_data_st, i32, i32, %union.crypto_mutex_st, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, i32, %struct.bn_blinding_st**, i8*, i64, i8 }
%struct.rsa_meth_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.rsa_st*)*, i32 (%struct.rsa_st*)*, i64 (%struct.rsa_st*)*, i32 (i32, i8*, i32, i8*, i32*, %struct.rsa_st*)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i8*, i8*, i64)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.bn_blinding_st = type opaque
%struct.ec_key_st = type opaque
%struct.ec_group_st = type opaque

$_ZN3net25SimplePathBuilderDelegateD0Ev = comdat any

@.str = private unnamed_addr constant [22 x i8] c"RSA modulus too small\00", align 1
@_ZN3net25SimplePathBuilderDelegate19kRsaModulusTooSmallE = hidden local_unnamed_addr constant i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), align 8
@_ZTVN3net25SimplePathBuilderDelegateE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"class.net::SimplePathBuilderDelegate"*, %"class.net::SignatureAlgorithm"*, %"class.net::CertErrors"*)* @_ZN3net25SimplePathBuilderDelegate30IsSignatureAlgorithmAcceptableERKNS_18SignatureAlgorithmEPNS_10CertErrorsE to i8*), i8* bitcast (i1 (%"class.net::SimplePathBuilderDelegate"*, %struct.evp_pkey_st*, %"class.net::CertErrors"*)* @_ZN3net25SimplePathBuilderDelegate21IsPublicKeyAcceptableEP11evp_pkey_stPNS_10CertErrorsE to i8*), i8* bitcast (void (%"class.net::VerifyCertificateChainDelegate"*)* @_ZN3net30VerifyCertificateChainDelegateD2Ev to i8*), i8* bitcast (void (%"class.net::SimplePathBuilderDelegate"*)* @_ZN3net25SimplePathBuilderDelegateD0Ev to i8*), i8* bitcast (void (%"class.net::SimplePathBuilderDelegate"*, %"class.net::CertPathBuilder"*, %"struct.net::CertPathBuilderResultPath"*)* @_ZN3net25SimplePathBuilderDelegate26CheckPathAfterVerificationERKNS_15CertPathBuilderEPNS_25CertPathBuilderResultPathE to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [7 x i8] c"actual\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"minimum\00", align 1
@.str.3 = private unnamed_addr constant [49 x i8] c"Only P-256, P-384, P-521 are supported for ECDSA\00", align 1

@_ZN3net25SimplePathBuilderDelegateC1EmNS0_12DigestPolicyE = hidden unnamed_addr alias void (%"class.net::SimplePathBuilderDelegate"*, i64, i32), void (%"class.net::SimplePathBuilderDelegate"*, i64, i32)* @_ZN3net25SimplePathBuilderDelegateC2EmNS0_12DigestPolicyE

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net25SimplePathBuilderDelegateC2EmNS0_12DigestPolicyE(%"class.net::SimplePathBuilderDelegate"* nocapture, i64, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.net::SimplePathBuilderDelegate", %"class.net::SimplePathBuilderDelegate"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net25SimplePathBuilderDelegateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.net::SimplePathBuilderDelegate", %"class.net::SimplePathBuilderDelegate"* %0, i64 0, i32 1
  store i64 %1, i64* %5, align 8
  %6 = getelementptr inbounds %"class.net::SimplePathBuilderDelegate", %"class.net::SimplePathBuilderDelegate"* %0, i64 0, i32 2
  store i32 %2, i32* %6, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net25SimplePathBuilderDelegate26CheckPathAfterVerificationERKNS_15CertPathBuilderEPNS_25CertPathBuilderResultPathE(%"class.net::SimplePathBuilderDelegate"* nocapture, %"class.net::CertPathBuilder"* nocapture dereferenceable(168), %"struct.net::CertPathBuilderResultPath"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net25SimplePathBuilderDelegate30IsSignatureAlgorithmAcceptableERKNS_18SignatureAlgorithmEPNS_10CertErrorsE(%"class.net::SimplePathBuilderDelegate"* nocapture readonly, %"class.net::SignatureAlgorithm"* dereferenceable(16), %"class.net::CertErrors"* nocapture readnone) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.net::SignatureAlgorithm", %"class.net::SignatureAlgorithm"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %30 [
    i32 1, label %14
    i32 2, label %6
    i32 0, label %6
  ]

6:                                                ; preds = %3, %3
  %7 = getelementptr inbounds %"class.net::SignatureAlgorithm", %"class.net::SignatureAlgorithm"* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  switch i32 %8, label %30 [
    i32 6, label %13
    i32 5, label %13
    i32 4, label %13
    i32 3, label %9
  ]

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.net::SimplePathBuilderDelegate", %"class.net::SimplePathBuilderDelegate"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 1
  br label %30

13:                                               ; preds = %6, %6, %6
  br label %30

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.net::SignatureAlgorithm", %"class.net::SignatureAlgorithm"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  switch i32 %16, label %30 [
    i32 6, label %21
    i32 5, label %21
    i32 4, label %21
    i32 3, label %17
  ]

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.net::SimplePathBuilderDelegate", %"class.net::SimplePathBuilderDelegate"* %0, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %30

21:                                               ; preds = %14, %14, %14, %17
  %22 = tail call %"class.net::RsaPssParameters"* @_ZNK3net18SignatureAlgorithm15ParamsForRsaPssEv(%"class.net::SignatureAlgorithm"* %1) #8
  %23 = getelementptr inbounds %"class.net::RsaPssParameters", %"class.net::RsaPssParameters"* %22, i64 0, i32 1
  %24 = load i32, i32* %23, align 8
  switch i32 %24, label %30 [
    i32 6, label %29
    i32 5, label %29
    i32 4, label %29
    i32 3, label %25
  ]

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.net::SimplePathBuilderDelegate", %"class.net::SimplePathBuilderDelegate"* %0, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 1
  br label %30

29:                                               ; preds = %21, %21, %21
  br label %30

30:                                               ; preds = %14, %29, %25, %21, %13, %9, %6, %3, %17
  %31 = phi i1 [ false, %17 ], [ false, %3 ], [ true, %13 ], [ %12, %9 ], [ false, %6 ], [ true, %29 ], [ %28, %25 ], [ false, %21 ], [ false, %14 ]
  ret i1 %31
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net25SimplePathBuilderDelegate18IsAcceptableDigestENS_15DigestAlgorithmE(%"class.net::SimplePathBuilderDelegate"* nocapture readonly, i32) local_unnamed_addr #3 align 2 {
  switch i32 %1, label %8 [
    i32 6, label %7
    i32 5, label %7
    i32 4, label %7
    i32 3, label %3
  ]

3:                                                ; preds = %2
  %4 = getelementptr inbounds %"class.net::SimplePathBuilderDelegate", %"class.net::SimplePathBuilderDelegate"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 1
  br label %8

7:                                                ; preds = %2, %2, %2
  br label %8

8:                                                ; preds = %2, %7, %3
  %9 = phi i1 [ true, %7 ], [ %6, %3 ], [ false, %2 ]
  ret i1 %9
}

declare %"class.net::RsaPssParameters"* @_ZNK3net18SignatureAlgorithm15ParamsForRsaPssEv(%"class.net::SignatureAlgorithm"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net25SimplePathBuilderDelegate21IsPublicKeyAcceptableEP11evp_pkey_stPNS_10CertErrorsE(%"class.net::SimplePathBuilderDelegate"* nocapture readonly, %struct.evp_pkey_st*, %"class.net::CertErrors"*) unnamed_addr #2 align 2 {
  %4 = tail call i32 @EVP_PKEY_id(%struct.evp_pkey_st* %1) #8
  switch i32 %4, label %25 [
    i32 6, label %5
    i32 408, label %18
  ]

5:                                                ; preds = %3
  %6 = tail call %struct.rsa_st* @EVP_PKEY_get0_RSA(%struct.evp_pkey_st* %1) #8
  %7 = icmp eq %struct.rsa_st* %6, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.rsa_st, %struct.rsa_st* %6, i64 0, i32 1
  %10 = load %struct.bignum_st*, %struct.bignum_st** %9, align 8
  %11 = tail call i32 @BN_num_bits(%struct.bignum_st* %10) #8
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.net::SimplePathBuilderDelegate", %"class.net::SimplePathBuilderDelegate"* %0, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ugt i64 %14, %12
  br i1 %15, label %16, label %25

16:                                               ; preds = %8
  %17 = tail call %"class.net::CertErrorParams"* @_ZN3net27CreateCertErrorParams2SizeTEPKcmS1_m(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i64 %12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i64 %14) #8
  tail call void @_ZN3net10CertErrors8AddErrorEPKvNSt3__110unique_ptrINS_15CertErrorParamsENS3_14default_deleteIS5_EEEE(%"class.net::CertErrors"* %2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), %"class.net::CertErrorParams"* %17) #8
  br label %25

18:                                               ; preds = %3
  %19 = tail call %struct.ec_key_st* @EVP_PKEY_get0_EC_KEY(%struct.evp_pkey_st* %1) #8
  %20 = icmp eq %struct.ec_key_st* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %18
  %22 = tail call %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st* nonnull %19) #8
  %23 = tail call i32 @EC_GROUP_get_curve_name(%struct.ec_group_st* %22) #8
  switch i32 %23, label %24 [
    i32 415, label %25
    i32 715, label %25
    i32 716, label %25
  ]

24:                                               ; preds = %21
  tail call void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"* %2, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0)) #8
  br label %25

25:                                               ; preds = %21, %21, %21, %3, %18, %24, %5, %8, %16
  %26 = phi i1 [ false, %5 ], [ false, %16 ], [ true, %8 ], [ false, %18 ], [ false, %24 ], [ false, %3 ], [ true, %21 ], [ true, %21 ], [ true, %21 ]
  ret i1 %26
}

declare i32 @EVP_PKEY_id(%struct.evp_pkey_st*) local_unnamed_addr #4

declare %struct.rsa_st* @EVP_PKEY_get0_RSA(%struct.evp_pkey_st*) local_unnamed_addr #4

declare i32 @BN_num_bits(%struct.bignum_st*) local_unnamed_addr #4

declare void @_ZN3net10CertErrors8AddErrorEPKvNSt3__110unique_ptrINS_15CertErrorParamsENS3_14default_deleteIS5_EEEE(%"class.net::CertErrors"*, i8*, %"class.net::CertErrorParams"*) local_unnamed_addr #4

declare %"class.net::CertErrorParams"* @_ZN3net27CreateCertErrorParams2SizeTEPKcmS1_m(i8*, i64, i8*, i64) local_unnamed_addr #4

declare %struct.ec_key_st* @EVP_PKEY_get0_EC_KEY(%struct.evp_pkey_st*) local_unnamed_addr #4

declare i32 @EC_GROUP_get_curve_name(%struct.ec_group_st*) local_unnamed_addr #4

declare %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st*) local_unnamed_addr #4

declare void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"*, i8*) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3net25SimplePathBuilderDelegateD0Ev(%"class.net::SimplePathBuilderDelegate"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.net::SimplePathBuilderDelegate", %"class.net::SimplePathBuilderDelegate"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN3net30VerifyCertificateChainDelegateD2Ev(%"class.net::VerifyCertificateChainDelegate"* %2) #8
  %3 = bitcast %"class.net::SimplePathBuilderDelegate"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net30VerifyCertificateChainDelegateD2Ev(%"class.net::VerifyCertificateChainDelegate"*) unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
