; ModuleID = '../../net/tools/huffman_trie/bit_writer.cc'
source_filename = "../../net/tools/huffman_trie/bit_writer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.net::huffman_trie::BitWriter" = type { i8, i8, i32, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN3net12huffman_trie9BitWriterC1Ev = hidden unnamed_addr alias void (%"class.net::huffman_trie::BitWriter"*), void (%"class.net::huffman_trie::BitWriter"*)* @_ZN3net12huffman_trie9BitWriterC2Ev
@_ZN3net12huffman_trie9BitWriterD1Ev = hidden unnamed_addr alias void (%"class.net::huffman_trie::BitWriter"*), void (%"class.net::huffman_trie::BitWriter"*)* @_ZN3net12huffman_trie9BitWriterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net12huffman_trie9BitWriterC2Ev(%"class.net::huffman_trie::BitWriter"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 0
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 1
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 2
  %5 = bitcast i32* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 28, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net12huffman_trie9BitWriterD2Ev(%"class.net::huffman_trie::BitWriter"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  tail call void @_ZdlPv(i8* nonnull %3) #5
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net12huffman_trie9BitWriter9WriteBitsEjh(%"class.net::huffman_trie::BitWriter"*, i32, i8 zeroext) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i8 %2, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %3
  %6 = zext i8 %2 to i32
  %7 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 2
  br label %11

10:                                               ; preds = %29, %3
  ret void

11:                                               ; preds = %5, %29
  %12 = phi i8 [ 1, %5 ], [ %30, %29 ]
  %13 = zext i8 %12 to i32
  %14 = sub nsw i32 %6, %13
  %15 = lshr i32 %1, %14
  %16 = and i32 %15, 1
  %17 = load i8, i8* %7, align 1
  %18 = zext i8 %17 to i32
  %19 = sub nsw i32 7, %18
  %20 = shl i32 %16, %19
  %21 = load i8, i8* %8, align 8
  %22 = trunc i32 %20 to i8
  %23 = or i8 %21, %22
  store i8 %23, i8* %8, align 8
  %24 = add i8 %17, 1
  store i8 %24, i8* %7, align 1
  %25 = load i32, i32* %9, align 4
  %26 = add i32 %25, 1
  store i32 %26, i32* %9, align 4
  %27 = icmp eq i8 %24, 8
  br i1 %27, label %28, label %29

28:                                               ; preds = %11
  tail call void @_ZN3net12huffman_trie9BitWriter5FlushEv(%"class.net::huffman_trie::BitWriter"* %0) #6
  br label %29

29:                                               ; preds = %11, %28
  %30 = add i8 %12, 1
  %31 = icmp ugt i8 %30, %2
  br i1 %31, label %10, label %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net12huffman_trie9BitWriter8WriteBitEh(%"class.net::huffman_trie::BitWriter"*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = zext i8 %1 to i32
  %4 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = sub nsw i32 7, %6
  %8 = shl i32 %3, %7
  %9 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 0
  %10 = load i8, i8* %9, align 8
  %11 = trunc i32 %8 to i8
  %12 = or i8 %10, %11
  store i8 %12, i8* %9, align 8
  %13 = add i8 %5, 1
  store i8 %13, i8* %4, align 1
  %14 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = add i32 %15, 1
  store i32 %16, i32* %14, align 4
  %17 = icmp eq i8 %13, 8
  br i1 %17, label %18, label %19

18:                                               ; preds = %2
  tail call void @_ZN3net12huffman_trie9BitWriter5FlushEv(%"class.net::huffman_trie::BitWriter"* %0)
  br label %19

19:                                               ; preds = %18, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net12huffman_trie9BitWriter5FlushEv(%"class.net::huffman_trie::BitWriter"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = sub nsw i32 8, %4
  %6 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = add i32 %5, %7
  store i32 %8, i32* %6, align 4
  %9 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 3
  %10 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 0
  %11 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 3, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.net::huffman_trie::BitWriter", %"class.net::huffman_trie::BitWriter"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %12, %14
  %16 = ptrtoint i8* %14 to i64
  br i1 %15, label %22, label %17

17:                                               ; preds = %1
  %18 = load i8, i8* %10, align 1
  store i8 %18, i8* %12, align 1
  %19 = getelementptr inbounds i8, i8* %12, i64 1
  %20 = ptrtoint i8* %19 to i64
  %21 = bitcast i8** %11 to i64*
  store i64 %20, i64* %21, align 8
  br label %68

22:                                               ; preds = %1
  %23 = ptrtoint i8* %12 to i64
  %24 = bitcast i8** %11 to i64*
  %25 = bitcast %"class.std::__1::vector"* %9 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %23, %26
  %28 = add i64 %27, 1
  %29 = icmp slt i64 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %22
  %31 = bitcast %"class.std::__1::vector"* %9 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %31) #7
  unreachable

32:                                               ; preds = %22
  %33 = bitcast i8** %13 to i64*
  %34 = sub i64 %16, %26
  %35 = icmp ult i64 %34, 4611686018427387903
  br i1 %35, label %36, label %41

36:                                               ; preds = %32
  %37 = shl i64 %34, 1
  %38 = icmp ult i64 %37, %28
  %39 = select i1 %38, i64 %28, i64 %37
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %36, %32
  %42 = phi i64 [ %39, %36 ], [ 9223372036854775807, %32 ]
  %43 = tail call i8* @_Znwm(i64 %42) #5
  br label %44

44:                                               ; preds = %41, %36
  %45 = phi i64 [ %42, %41 ], [ 0, %36 ]
  %46 = phi i8* [ %43, %41 ], [ null, %36 ]
  %47 = getelementptr inbounds i8, i8* %46, i64 %27
  %48 = getelementptr inbounds i8, i8* %46, i64 %45
  %49 = ptrtoint i8* %48 to i64
  %50 = load i8, i8* %10, align 1
  store i8 %50, i8* %47, align 1
  %51 = getelementptr inbounds i8, i8* %47, i64 1
  %52 = ptrtoint i8* %51 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %24, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %47, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %44
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #6
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %62, %44
  %65 = phi i8* [ %54, %44 ], [ %63, %62 ]
  store i64 %60, i64* %25, align 8
  store i64 %52, i64* %24, align 8
  store i64 %49, i64* %33, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #5
  br label %68

68:                                               ; preds = %17, %64, %67
  store i8 0, i8* %2, align 1
  store i8 0, i8* %10, align 8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { builtin nounwind }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
