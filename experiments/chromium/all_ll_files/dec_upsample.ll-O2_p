; ModuleID = '../../third_party/libjxl/src/lib/jxl/dec_upsample.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/dec_upsample.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::Upsampler" = type { i64, [4 x [4 x [5 x [5 x float]]]] }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }

@.str = private unnamed_addr constant [36 x i8] c"%s:%d: JXL_ABORT: Invalid upsample\0A\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"../../third_party/libjxl/src/lib/jxl/dec_upsample.cc\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"DivCeil(dst_rect.xsize(), upsampling_) <= src_rect.xsize()\00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"%s:%d: JXL_ABORT: Not implemented\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl9Upsampler4InitEmRKNS_19CustomTransformDataE(%"struct.jxl::Upsampler"*, i64, %"struct.jxl::CustomTransformData"* nocapture readonly dereferenceable(1224)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 0
  store i64 %1, i64* %4, align 8
  switch i64 %1, label %290 [
    i64 1, label %293
    i64 2, label %5
    i64 4, label %111
    i64 8, label %258
  ]

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 0
  %7 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0
  %8 = bitcast float* %6 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = bitcast [4 x [5 x [5 x float]]]* %7 to i32*
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 1
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 1, i64 0
  %15 = bitcast float* %14 to i32*
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 2
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 2, i64 0
  %20 = bitcast float* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 3
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 3, i64 0
  %25 = bitcast float* %24 to i32*
  store i32 %23, i32* %25, align 4
  %26 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 4
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 4, i64 0
  %30 = bitcast float* %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = load i32, i32* %12, align 4
  %32 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 0, i64 1
  %33 = bitcast float* %32 to i32*
  store i32 %31, i32* %33, align 4
  %34 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 5
  %35 = bitcast float* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 1, i64 1
  %38 = bitcast float* %37 to i32*
  store i32 %36, i32* %38, align 4
  %39 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 6
  %40 = bitcast float* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 2, i64 1
  %43 = bitcast float* %42 to i32*
  store i32 %41, i32* %43, align 4
  %44 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 7
  %45 = bitcast float* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 3, i64 1
  %48 = bitcast float* %47 to i32*
  store i32 %46, i32* %48, align 4
  %49 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 8
  %50 = bitcast float* %49 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 4, i64 1
  %53 = bitcast float* %52 to i32*
  store i32 %51, i32* %53, align 4
  %54 = load i32, i32* %17, align 4
  %55 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 0, i64 2
  %56 = bitcast float* %55 to i32*
  store i32 %54, i32* %56, align 4
  %57 = load i32, i32* %40, align 4
  %58 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 1, i64 2
  %59 = bitcast float* %58 to i32*
  store i32 %57, i32* %59, align 4
  %60 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 9
  %61 = bitcast float* %60 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 2, i64 2
  %64 = bitcast float* %63 to i32*
  store i32 %62, i32* %64, align 4
  %65 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 10
  %66 = bitcast float* %65 to i32*
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 3, i64 2
  %69 = bitcast float* %68 to i32*
  store i32 %67, i32* %69, align 4
  %70 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 11
  %71 = bitcast float* %70 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 4, i64 2
  %74 = bitcast float* %73 to i32*
  store i32 %72, i32* %74, align 4
  %75 = load i32, i32* %22, align 4
  %76 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 0, i64 3
  %77 = bitcast float* %76 to i32*
  store i32 %75, i32* %77, align 4
  %78 = load i32, i32* %45, align 4
  %79 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 1, i64 3
  %80 = bitcast float* %79 to i32*
  store i32 %78, i32* %80, align 4
  %81 = load i32, i32* %66, align 4
  %82 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 2, i64 3
  %83 = bitcast float* %82 to i32*
  store i32 %81, i32* %83, align 4
  %84 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 12
  %85 = bitcast float* %84 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 3, i64 3
  %88 = bitcast float* %87 to i32*
  store i32 %86, i32* %88, align 4
  %89 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 13
  %90 = bitcast float* %89 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 4, i64 3
  %93 = bitcast float* %92 to i32*
  store i32 %91, i32* %93, align 4
  %94 = load i32, i32* %27, align 4
  %95 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 0, i64 4
  %96 = bitcast float* %95 to i32*
  store i32 %94, i32* %96, align 4
  %97 = load i32, i32* %50, align 4
  %98 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 1, i64 4
  %99 = bitcast float* %98 to i32*
  store i32 %97, i32* %99, align 4
  %100 = load i32, i32* %71, align 4
  %101 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 2, i64 4
  %102 = bitcast float* %101 to i32*
  store i32 %100, i32* %102, align 4
  %103 = load i32, i32* %90, align 4
  %104 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 3, i64 4
  %105 = bitcast float* %104 to i32*
  store i32 %103, i32* %105, align 4
  %106 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 6, i64 14
  %107 = bitcast float* %106 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 4, i64 4
  %110 = bitcast float* %109 to i32*
  store i32 %108, i32* %110, align 4
  br label %293

111:                                              ; preds = %3, %111
  %112 = phi i64 [ %256, %111 ], [ 0, %3 ]
  %113 = udiv i64 %112, 5
  %114 = urem i64 %112, 5
  %115 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 7, i64 %112
  %116 = bitcast float* %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 %113, i64 0, i64 %114
  %119 = bitcast float* %118 to i32*
  store i32 %117, i32* %119, align 4
  %120 = icmp ne i64 %112, 0
  %121 = icmp eq i64 %112, 0
  %122 = select i1 %121, i64 1, i64 %112
  %123 = select i1 %120, i64 10, i64 0
  %124 = zext i1 %120 to i64
  %125 = sub nuw nsw i64 %122, %124
  %126 = add i64 %125, %123
  %127 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 7, i64 %126
  %128 = bitcast float* %127 to i32*
  %129 = load i32, i32* %128, align 4
  %130 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 %113, i64 1, i64 %114
  %131 = bitcast float* %130 to i32*
  store i32 %129, i32* %131, align 4
  %132 = icmp ult i64 %112, 2
  %133 = select i1 %132, i64 %112, i64 2
  %134 = icmp ugt i64 %112, 2
  %135 = select i1 %134, i64 %112, i64 2
  %136 = mul nuw nsw i64 %133, 10
  %137 = add nsw i64 %133, -1
  %138 = mul nsw i64 %137, %133
  %139 = lshr i64 %138, 1
  %140 = sub nuw nsw i64 %135, %133
  %141 = add i64 %140, %136
  %142 = sub i64 %141, %139
  %143 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 7, i64 %142
  %144 = bitcast float* %143 to i32*
  %145 = load i32, i32* %144, align 4
  %146 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 %113, i64 2, i64 %114
  %147 = bitcast float* %146 to i32*
  store i32 %145, i32* %147, align 4
  %148 = icmp ult i64 %112, 3
  %149 = select i1 %148, i64 %112, i64 3
  %150 = icmp ugt i64 %112, 3
  %151 = select i1 %150, i64 %112, i64 3
  %152 = mul nuw nsw i64 %149, 10
  %153 = add nsw i64 %149, -1
  %154 = mul nsw i64 %153, %149
  %155 = lshr i64 %154, 1
  %156 = sub nuw nsw i64 %151, %149
  %157 = add i64 %156, %152
  %158 = sub i64 %157, %155
  %159 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 7, i64 %158
  %160 = bitcast float* %159 to i32*
  %161 = load i32, i32* %160, align 4
  %162 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 %113, i64 3, i64 %114
  %163 = bitcast float* %162 to i32*
  store i32 %161, i32* %163, align 4
  %164 = icmp ult i64 %112, 4
  %165 = select i1 %164, i64 %112, i64 4
  %166 = icmp ugt i64 %112, 4
  %167 = select i1 %166, i64 %112, i64 4
  %168 = mul nuw nsw i64 %165, 10
  %169 = add nsw i64 %165, -1
  %170 = mul nsw i64 %169, %165
  %171 = lshr i64 %170, 1
  %172 = sub nuw nsw i64 %167, %165
  %173 = add i64 %172, %168
  %174 = sub i64 %173, %171
  %175 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 7, i64 %174
  %176 = bitcast float* %175 to i32*
  %177 = load i32, i32* %176, align 4
  %178 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 %113, i64 4, i64 %114
  %179 = bitcast float* %178 to i32*
  store i32 %177, i32* %179, align 4
  %180 = icmp ult i64 %112, 5
  %181 = select i1 %180, i64 %112, i64 5
  %182 = icmp ugt i64 %112, 5
  %183 = select i1 %182, i64 %112, i64 5
  %184 = mul nuw nsw i64 %181, 10
  %185 = add nsw i64 %181, -1
  %186 = mul nsw i64 %185, %181
  %187 = lshr i64 %186, 1
  %188 = sub nuw nsw i64 %183, %181
  %189 = add i64 %188, %184
  %190 = sub i64 %189, %187
  %191 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 7, i64 %190
  %192 = bitcast float* %191 to i32*
  %193 = load i32, i32* %192, align 4
  %194 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 1, i64 %113, i64 0, i64 %114
  %195 = bitcast float* %194 to i32*
  store i32 %193, i32* %195, align 4
  %196 = icmp ult i64 %112, 6
  %197 = select i1 %196, i64 %112, i64 6
  %198 = icmp ugt i64 %112, 6
  %199 = select i1 %198, i64 %112, i64 6
  %200 = mul nuw nsw i64 %197, 10
  %201 = add nsw i64 %197, -1
  %202 = mul nsw i64 %201, %197
  %203 = lshr i64 %202, 1
  %204 = sub nuw nsw i64 %199, %197
  %205 = add i64 %204, %200
  %206 = sub i64 %205, %203
  %207 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 7, i64 %206
  %208 = bitcast float* %207 to i32*
  %209 = load i32, i32* %208, align 4
  %210 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 1, i64 %113, i64 1, i64 %114
  %211 = bitcast float* %210 to i32*
  store i32 %209, i32* %211, align 4
  %212 = icmp ult i64 %112, 7
  %213 = select i1 %212, i64 %112, i64 7
  %214 = icmp ugt i64 %112, 7
  %215 = select i1 %214, i64 %112, i64 7
  %216 = mul nuw nsw i64 %213, 10
  %217 = add nsw i64 %213, -1
  %218 = mul nsw i64 %217, %213
  %219 = lshr i64 %218, 1
  %220 = sub nuw nsw i64 %215, %213
  %221 = add i64 %220, %216
  %222 = sub i64 %221, %219
  %223 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 7, i64 %222
  %224 = bitcast float* %223 to i32*
  %225 = load i32, i32* %224, align 4
  %226 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 1, i64 %113, i64 2, i64 %114
  %227 = bitcast float* %226 to i32*
  store i32 %225, i32* %227, align 4
  %228 = icmp ult i64 %112, 8
  %229 = select i1 %228, i64 %112, i64 8
  %230 = icmp ugt i64 %112, 8
  %231 = select i1 %230, i64 %112, i64 8
  %232 = mul nuw nsw i64 %229, 10
  %233 = add nsw i64 %229, -1
  %234 = mul nsw i64 %233, %229
  %235 = lshr i64 %234, 1
  %236 = sub nuw nsw i64 %231, %229
  %237 = add i64 %236, %232
  %238 = sub i64 %237, %235
  %239 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 7, i64 %238
  %240 = bitcast float* %239 to i32*
  %241 = load i32, i32* %240, align 4
  %242 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 1, i64 %113, i64 3, i64 %114
  %243 = bitcast float* %242 to i32*
  store i32 %241, i32* %243, align 4
  %244 = mul nuw nsw i64 %112, 10
  %245 = add nsw i64 %112, -1
  %246 = mul i64 %245, %112
  %247 = lshr i64 %246, 1
  %248 = sub nuw nsw i64 9, %112
  %249 = add nuw nsw i64 %248, %244
  %250 = sub i64 %249, %247
  %251 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 7, i64 %250
  %252 = bitcast float* %251 to i32*
  %253 = load i32, i32* %252, align 4
  %254 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 1, i64 %113, i64 4, i64 %114
  %255 = bitcast float* %254 to i32*
  store i32 %253, i32* %255, align 4
  %256 = add nuw nsw i64 %112, 1
  %257 = icmp eq i64 %256, 10
  br i1 %257, label %293, label %111

258:                                              ; preds = %3, %262
  %259 = phi i64 [ %263, %262 ], [ 0, %3 ]
  %260 = udiv i64 %259, 5
  %261 = urem i64 %259, 5
  br label %265

262:                                              ; preds = %265
  %263 = add nuw nsw i64 %259, 1
  %264 = icmp eq i64 %263, 20
  br i1 %264, label %293, label %258

265:                                              ; preds = %265, %258
  %266 = phi i64 [ 0, %258 ], [ %288, %265 ]
  %267 = icmp ult i64 %266, %259
  %268 = select i1 %267, i64 %266, i64 %259
  %269 = icmp ult i64 %259, %266
  %270 = select i1 %269, i64 %266, i64 %259
  %271 = mul i64 %268, 20
  %272 = add nsw i64 %268, -1
  %273 = mul i64 %272, %268
  %274 = lshr i64 %273, 1
  %275 = sub nsw i64 %270, %268
  %276 = add i64 %275, %271
  %277 = sub i64 %276, %274
  %278 = getelementptr inbounds %"struct.jxl::CustomTransformData", %"struct.jxl::CustomTransformData"* %2, i64 0, i32 8, i64 %277
  %279 = bitcast float* %278 to i32*
  %280 = load i32, i32* %279, align 4
  %281 = trunc i64 %266 to i8
  %282 = udiv i8 %281, 5
  %283 = zext i8 %282 to i64
  %284 = urem i8 %281, 5
  %285 = zext i8 %284 to i64
  %286 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 %283, i64 %260, i64 %285, i64 %261
  %287 = bitcast float* %286 to i32*
  store i32 %280, i32* %287, align 4
  %288 = add nuw nsw i64 %266, 1
  %289 = icmp eq i64 %288, 20
  br i1 %289, label %262, label %265

290:                                              ; preds = %3
  %291 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 97) #4
  %292 = tail call zeroext i1 @_ZN3jxl5AbortEv() #5
  unreachable

293:                                              ; preds = %262, %111, %3, %5
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3jxl9Upsampler12UpsampleRectERKNS_5PlaneIfEERKNS_4RectEPS2_S7_lm(%"struct.jxl::Upsampler"* nocapture readonly, %"class.jxl::Plane"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Plane"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i64, i64) local_unnamed_addr #0 align 2 {
  %8 = alloca [5 x float*], align 16
  %9 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 1
  br i1 %11, label %852, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %10, -1
  %16 = add i64 %15, %14
  %17 = udiv i64 %16, %10
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %19 = load i64, i64* %18, align 8
  %20 = icmp ugt i64 %17, %19
  br i1 %20, label %21, label %24

21:                                               ; preds = %12
  %22 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 105, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0)) #4
  %23 = tail call zeroext i1 @_ZN3jxl5AbortEv() #5
  unreachable

24:                                               ; preds = %12
  switch i64 %10, label %849 [
    i64 2, label %25
    i64 4, label %296
    i64 8, label %573
  ]

25:                                               ; preds = %24
  %26 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %852, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %31 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 4
  %33 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %34 = bitcast [5 x float*]* %8 to i8*
  %35 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 1
  %36 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 2
  %37 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 3
  %38 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 4
  %39 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %40 = shl i64 %6, 1
  %41 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %42 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %43 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %44 = bitcast [5 x float*]* %8 to i8**
  %45 = bitcast float** %35 to i8**
  %46 = bitcast float** %36 to i8**
  %47 = bitcast float** %37 to i8**
  %48 = bitcast float** %38 to i8**
  br label %49

49:                                               ; preds = %100, %29
  %50 = phi i64 [ %14, %29 ], [ %101, %100 ]
  %51 = phi i64 [ %27, %29 ], [ %102, %100 ]
  %52 = phi i64 [ 0, %29 ], [ %103, %100 ]
  %53 = load i64, i64* %30, align 8
  %54 = add i64 %53, %52
  %55 = load i8*, i8** %31, align 8
  %56 = load i64, i64* %32, align 8
  %57 = mul i64 %56, %54
  %58 = getelementptr inbounds i8, i8* %55, i64 %57
  %59 = ptrtoint i8* %58 to i64
  %60 = and i64 %59, 63
  %61 = icmp eq i64 %60, 0
  tail call void @llvm.assume(i1 %61) #4
  %62 = load i64, i64* %33, align 8
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %34) #4
  %63 = lshr i64 %52, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 40, i1 false) #4
  %64 = load i64, i64* %39, align 8
  %65 = add i64 %63, %5
  %66 = load i8*, i8** %41, align 8
  %67 = load i64, i64* %42, align 8
  %68 = add i64 %64, %65
  %69 = add i64 %68, -2
  %70 = icmp slt i64 %69, 0
  %71 = icmp sge i64 %69, %6
  %72 = or i1 %70, %71
  br i1 %72, label %76, label %85

73:                                               ; preds = %285
  %74 = and i64 %52, 1
  %75 = icmp eq i64 %74, 0
  br label %105

76:                                               ; preds = %49, %76
  %77 = phi i1 [ %82, %76 ], [ %70, %49 ]
  %78 = phi i64 [ %81, %76 ], [ %69, %49 ]
  %79 = xor i64 %78, -1
  %80 = select i1 %77, i64 0, i64 %40
  %81 = add i64 %80, %79
  %82 = icmp slt i64 %81, 0
  %83 = icmp sge i64 %81, %6
  %84 = or i1 %82, %83
  br i1 %84, label %76, label %85

85:                                               ; preds = %76, %49
  %86 = phi i64 [ %69, %49 ], [ %81, %76 ]
  %87 = sub nsw i64 %86, %5
  %88 = mul i64 %87, %67
  %89 = getelementptr inbounds i8, i8* %66, i64 %88
  %90 = ptrtoint i8* %89 to i64
  %91 = and i64 %90, 63
  %92 = icmp eq i64 %91, 0
  tail call void @llvm.assume(i1 %92) #4
  store i8* %89, i8** %44, align 16
  %93 = add i64 %68, -1
  %94 = icmp slt i64 %93, 0
  %95 = icmp sge i64 %93, %6
  %96 = or i1 %94, %95
  %97 = bitcast i8* %89 to float*
  br i1 %96, label %214, label %223

98:                                               ; preds = %205
  %99 = load i64, i64* %26, align 8
  br label %100

100:                                              ; preds = %285, %98
  %101 = phi i64 [ %212, %98 ], [ 0, %285 ]
  %102 = phi i64 [ %99, %98 ], [ %51, %285 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %34) #4
  %103 = add nuw i64 %52, 1
  %104 = icmp ult i64 %103, %102
  br i1 %104, label %49, label %852

105:                                              ; preds = %205, %73
  %106 = phi i64 [ 0, %73 ], [ %211, %205 ]
  %107 = lshr i64 %106, 1
  %108 = load i64, i64* %43, align 8
  %109 = add i64 %108, %107
  %110 = add i64 %109, -2
  %111 = getelementptr inbounds float, float* %97, i64 %110
  %112 = load float, float* %111, align 4
  %113 = and i64 %106, 1
  %114 = icmp eq i64 %113, 0
  %115 = shl nuw nsw i64 %113, 2
  %116 = add i64 %109, -1
  %117 = select i1 %114, i64 1, i64 3
  %118 = add i64 %109, 1
  %119 = select i1 %114, i64 3, i64 1
  %120 = add i64 %109, 2
  %121 = xor i64 %115, 4
  br label %122

122:                                              ; preds = %122, %105
  %123 = phi float [ %112, %105 ], [ %204, %122 ]
  %124 = phi float [ %112, %105 ], [ %203, %122 ]
  %125 = phi float [ 0.000000e+00, %105 ], [ %194, %122 ]
  %126 = phi i64 [ 0, %105 ], [ %201, %122 ]
  %127 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 %126
  %128 = load float*, float** %127, align 8
  %129 = sub nuw nsw i64 4, %126
  %130 = select i1 %75, i64 %126, i64 %129
  %131 = getelementptr inbounds float, float* %128, i64 %110
  %132 = bitcast float* %131 to i32*
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 %130, i64 %115
  %135 = load float, float* %134, align 4
  %136 = bitcast i32 %133 to float
  %137 = fmul float %135, %136
  %138 = fadd float %125, %137
  %139 = fcmp olt float %124, %136
  %140 = bitcast float %124 to i32
  %141 = select i1 %139, i32 %140, i32 %133
  %142 = fcmp ogt float %123, %136
  %143 = bitcast float %123 to i32
  %144 = select i1 %142, i32 %143, i32 %133
  %145 = getelementptr inbounds float, float* %128, i64 %116
  %146 = bitcast float* %145 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 %130, i64 %117
  %149 = load float, float* %148, align 4
  %150 = bitcast i32 %147 to float
  %151 = fmul float %149, %150
  %152 = fadd float %138, %151
  %153 = bitcast i32 %141 to float
  %154 = fcmp olt float %153, %150
  %155 = select i1 %154, i32 %141, i32 %147
  %156 = bitcast i32 %144 to float
  %157 = fcmp ogt float %156, %150
  %158 = select i1 %157, i32 %144, i32 %147
  %159 = getelementptr inbounds float, float* %128, i64 %109
  %160 = bitcast float* %159 to i32*
  %161 = load i32, i32* %160, align 4
  %162 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 %130, i64 2
  %163 = load float, float* %162, align 4
  %164 = bitcast i32 %161 to float
  %165 = fmul float %163, %164
  %166 = fadd float %152, %165
  %167 = bitcast i32 %155 to float
  %168 = fcmp olt float %167, %164
  %169 = select i1 %168, i32 %155, i32 %161
  %170 = bitcast i32 %158 to float
  %171 = fcmp ogt float %170, %164
  %172 = select i1 %171, i32 %158, i32 %161
  %173 = getelementptr inbounds float, float* %128, i64 %118
  %174 = bitcast float* %173 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 %130, i64 %119
  %177 = load float, float* %176, align 4
  %178 = bitcast i32 %175 to float
  %179 = fmul float %177, %178
  %180 = fadd float %166, %179
  %181 = bitcast i32 %169 to float
  %182 = fcmp olt float %181, %178
  %183 = select i1 %182, i32 %169, i32 %175
  %184 = bitcast i32 %172 to float
  %185 = fcmp ogt float %184, %178
  %186 = select i1 %185, i32 %172, i32 %175
  %187 = getelementptr inbounds float, float* %128, i64 %120
  %188 = bitcast float* %187 to i32*
  %189 = load i32, i32* %188, align 4
  %190 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 0, i64 0, i64 %130, i64 %121
  %191 = load float, float* %190, align 4
  %192 = bitcast i32 %189 to float
  %193 = fmul float %191, %192
  %194 = fadd float %180, %193
  %195 = bitcast i32 %183 to float
  %196 = fcmp olt float %195, %192
  %197 = select i1 %196, i32 %183, i32 %189
  %198 = bitcast i32 %186 to float
  %199 = fcmp ogt float %198, %192
  %200 = select i1 %199, i32 %186, i32 %189
  %201 = add nuw nsw i64 %126, 1
  %202 = icmp eq i64 %201, 5
  %203 = bitcast i32 %197 to float
  %204 = bitcast i32 %200 to float
  br i1 %202, label %205, label %122

205:                                              ; preds = %122
  %206 = fcmp olt float %194, %203
  %207 = select i1 %206, float %203, float %194
  %208 = fcmp ogt float %207, %204
  %209 = select i1 %208, float %204, float %207
  %210 = getelementptr inbounds float, float* %294, i64 %106
  store float %209, float* %210, align 4
  %211 = add nuw i64 %106, 1
  %212 = load i64, i64* %13, align 8
  %213 = icmp ult i64 %211, %212
  br i1 %213, label %105, label %98

214:                                              ; preds = %85, %214
  %215 = phi i1 [ %220, %214 ], [ %94, %85 ]
  %216 = phi i64 [ %219, %214 ], [ %93, %85 ]
  %217 = xor i64 %216, -1
  %218 = select i1 %215, i64 0, i64 %40
  %219 = add i64 %218, %217
  %220 = icmp slt i64 %219, 0
  %221 = icmp sge i64 %219, %6
  %222 = or i1 %220, %221
  br i1 %222, label %214, label %223

223:                                              ; preds = %214, %85
  %224 = phi i64 [ %93, %85 ], [ %219, %214 ]
  %225 = sub nsw i64 %224, %5
  %226 = mul i64 %225, %67
  %227 = getelementptr inbounds i8, i8* %66, i64 %226
  %228 = ptrtoint i8* %227 to i64
  %229 = and i64 %228, 63
  %230 = icmp eq i64 %229, 0
  tail call void @llvm.assume(i1 %230) #4
  store i8* %227, i8** %45, align 8
  %231 = icmp slt i64 %68, 0
  %232 = icmp sge i64 %68, %6
  %233 = or i1 %231, %232
  br i1 %233, label %234, label %243

234:                                              ; preds = %223, %234
  %235 = phi i1 [ %240, %234 ], [ %231, %223 ]
  %236 = phi i64 [ %239, %234 ], [ %68, %223 ]
  %237 = xor i64 %236, -1
  %238 = select i1 %235, i64 0, i64 %40
  %239 = add i64 %238, %237
  %240 = icmp slt i64 %239, 0
  %241 = icmp sge i64 %239, %6
  %242 = or i1 %240, %241
  br i1 %242, label %234, label %243

243:                                              ; preds = %234, %223
  %244 = phi i64 [ %68, %223 ], [ %239, %234 ]
  %245 = sub nsw i64 %244, %5
  %246 = mul i64 %245, %67
  %247 = getelementptr inbounds i8, i8* %66, i64 %246
  %248 = ptrtoint i8* %247 to i64
  %249 = and i64 %248, 63
  %250 = icmp eq i64 %249, 0
  tail call void @llvm.assume(i1 %250) #4
  store i8* %247, i8** %46, align 16
  %251 = add i64 %68, 1
  %252 = icmp slt i64 %251, 0
  %253 = icmp sge i64 %251, %6
  %254 = or i1 %252, %253
  br i1 %254, label %255, label %264

255:                                              ; preds = %243, %255
  %256 = phi i1 [ %261, %255 ], [ %252, %243 ]
  %257 = phi i64 [ %260, %255 ], [ %251, %243 ]
  %258 = xor i64 %257, -1
  %259 = select i1 %256, i64 0, i64 %40
  %260 = add i64 %259, %258
  %261 = icmp slt i64 %260, 0
  %262 = icmp sge i64 %260, %6
  %263 = or i1 %261, %262
  br i1 %263, label %255, label %264

264:                                              ; preds = %255, %243
  %265 = phi i64 [ %251, %243 ], [ %260, %255 ]
  %266 = sub nsw i64 %265, %5
  %267 = mul i64 %266, %67
  %268 = getelementptr inbounds i8, i8* %66, i64 %267
  %269 = ptrtoint i8* %268 to i64
  %270 = and i64 %269, 63
  %271 = icmp eq i64 %270, 0
  tail call void @llvm.assume(i1 %271) #4
  store i8* %268, i8** %47, align 8
  %272 = add i64 %68, 2
  %273 = icmp slt i64 %272, 0
  %274 = icmp sge i64 %272, %6
  %275 = or i1 %273, %274
  br i1 %275, label %276, label %285

276:                                              ; preds = %264, %276
  %277 = phi i1 [ %282, %276 ], [ %273, %264 ]
  %278 = phi i64 [ %281, %276 ], [ %272, %264 ]
  %279 = xor i64 %278, -1
  %280 = select i1 %277, i64 0, i64 %40
  %281 = add i64 %280, %279
  %282 = icmp slt i64 %281, 0
  %283 = icmp sge i64 %281, %6
  %284 = or i1 %282, %283
  br i1 %284, label %276, label %285

285:                                              ; preds = %276, %264
  %286 = phi i64 [ %272, %264 ], [ %281, %276 ]
  %287 = sub nsw i64 %286, %5
  %288 = mul i64 %287, %67
  %289 = getelementptr inbounds i8, i8* %66, i64 %288
  %290 = ptrtoint i8* %289 to i64
  %291 = and i64 %290, 63
  %292 = icmp eq i64 %291, 0
  tail call void @llvm.assume(i1 %292) #4
  store i8* %289, i8** %48, align 16
  %293 = bitcast i8* %58 to float*
  %294 = getelementptr inbounds float, float* %293, i64 %62
  %295 = icmp eq i64 %50, 0
  br i1 %295, label %100, label %73

296:                                              ; preds = %24
  %297 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  %298 = load i64, i64* %297, align 8
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %852, label %300

300:                                              ; preds = %296
  %301 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %302 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %303 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 4
  %304 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %305 = bitcast [5 x float*]* %8 to i8*
  %306 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 1
  %307 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 2
  %308 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 3
  %309 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 4
  %310 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %311 = shl i64 %6, 1
  %312 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %313 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %314 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %315 = bitcast [5 x float*]* %8 to i8**
  %316 = bitcast float** %306 to i8**
  %317 = bitcast float** %307 to i8**
  %318 = bitcast float** %308 to i8**
  %319 = bitcast float** %309 to i8**
  br label %320

320:                                              ; preds = %375, %300
  %321 = phi i64 [ %14, %300 ], [ %376, %375 ]
  %322 = phi i64 [ %298, %300 ], [ %377, %375 ]
  %323 = phi i64 [ 0, %300 ], [ %378, %375 ]
  %324 = load i64, i64* %301, align 8
  %325 = add i64 %324, %323
  %326 = load i8*, i8** %302, align 8
  %327 = load i64, i64* %303, align 8
  %328 = mul i64 %327, %325
  %329 = getelementptr inbounds i8, i8* %326, i64 %328
  %330 = ptrtoint i8* %329 to i64
  %331 = and i64 %330, 63
  %332 = icmp eq i64 %331, 0
  tail call void @llvm.assume(i1 %332) #4
  %333 = load i64, i64* %304, align 8
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %305) #4
  %334 = lshr i64 %323, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %305, i8 -86, i64 40, i1 false) #4
  %335 = load i64, i64* %310, align 8
  %336 = add i64 %334, %5
  %337 = load i8*, i8** %312, align 8
  %338 = load i64, i64* %313, align 8
  %339 = add i64 %335, %336
  %340 = add i64 %339, -2
  %341 = icmp slt i64 %340, 0
  %342 = icmp sge i64 %340, %6
  %343 = or i1 %341, %342
  br i1 %343, label %351, label %360

344:                                              ; preds = %562
  %345 = and i64 %323, 2
  %346 = icmp eq i64 %345, 0
  %347 = and i64 %323, 1
  %348 = xor i1 %346, true
  %349 = zext i1 %348 to i64
  %350 = xor i64 %347, %349
  br label %380

351:                                              ; preds = %320, %351
  %352 = phi i1 [ %357, %351 ], [ %341, %320 ]
  %353 = phi i64 [ %356, %351 ], [ %340, %320 ]
  %354 = xor i64 %353, -1
  %355 = select i1 %352, i64 0, i64 %311
  %356 = add i64 %355, %354
  %357 = icmp slt i64 %356, 0
  %358 = icmp sge i64 %356, %6
  %359 = or i1 %357, %358
  br i1 %359, label %351, label %360

360:                                              ; preds = %351, %320
  %361 = phi i64 [ %340, %320 ], [ %356, %351 ]
  %362 = sub nsw i64 %361, %5
  %363 = mul i64 %362, %338
  %364 = getelementptr inbounds i8, i8* %337, i64 %363
  %365 = ptrtoint i8* %364 to i64
  %366 = and i64 %365, 63
  %367 = icmp eq i64 %366, 0
  tail call void @llvm.assume(i1 %367) #4
  store i8* %364, i8** %315, align 16
  %368 = add i64 %339, -1
  %369 = icmp slt i64 %368, 0
  %370 = icmp sge i64 %368, %6
  %371 = or i1 %369, %370
  %372 = bitcast i8* %364 to float*
  br i1 %371, label %491, label %500

373:                                              ; preds = %482
  %374 = load i64, i64* %297, align 8
  br label %375

375:                                              ; preds = %562, %373
  %376 = phi i64 [ %489, %373 ], [ 0, %562 ]
  %377 = phi i64 [ %374, %373 ], [ %322, %562 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %305) #4
  %378 = add nuw i64 %323, 1
  %379 = icmp ult i64 %378, %377
  br i1 %379, label %320, label %852

380:                                              ; preds = %482, %344
  %381 = phi i64 [ 0, %344 ], [ %488, %482 ]
  %382 = lshr i64 %381, 2
  %383 = load i64, i64* %314, align 8
  %384 = add i64 %383, %382
  %385 = add i64 %384, -2
  %386 = getelementptr inbounds float, float* %372, i64 %385
  %387 = load float, float* %386, align 4
  %388 = and i64 %381, 2
  %389 = and i64 %381, 1
  %390 = lshr exact i64 %388, 1
  %391 = xor i64 %390, %389
  %392 = shl nuw nsw i64 %388, 1
  %393 = add i64 %384, -1
  %394 = or i64 %388, 1
  %395 = add i64 %384, 1
  %396 = xor i64 %388, 3
  %397 = add i64 %384, 2
  %398 = xor i64 %392, 4
  br label %399

399:                                              ; preds = %399, %380
  %400 = phi float [ %387, %380 ], [ %481, %399 ]
  %401 = phi float [ %387, %380 ], [ %480, %399 ]
  %402 = phi float [ 0.000000e+00, %380 ], [ %471, %399 ]
  %403 = phi i64 [ 0, %380 ], [ %478, %399 ]
  %404 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 %403
  %405 = load float*, float** %404, align 8
  %406 = sub nuw nsw i64 4, %403
  %407 = select i1 %346, i64 %403, i64 %406
  %408 = getelementptr inbounds float, float* %405, i64 %385
  %409 = bitcast float* %408 to i32*
  %410 = load i32, i32* %409, align 4
  %411 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 %350, i64 %391, i64 %407, i64 %392
  %412 = load float, float* %411, align 4
  %413 = bitcast i32 %410 to float
  %414 = fmul float %412, %413
  %415 = fadd float %402, %414
  %416 = fcmp olt float %401, %413
  %417 = bitcast float %401 to i32
  %418 = select i1 %416, i32 %417, i32 %410
  %419 = fcmp ogt float %400, %413
  %420 = bitcast float %400 to i32
  %421 = select i1 %419, i32 %420, i32 %410
  %422 = getelementptr inbounds float, float* %405, i64 %393
  %423 = bitcast float* %422 to i32*
  %424 = load i32, i32* %423, align 4
  %425 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 %350, i64 %391, i64 %407, i64 %394
  %426 = load float, float* %425, align 4
  %427 = bitcast i32 %424 to float
  %428 = fmul float %426, %427
  %429 = fadd float %415, %428
  %430 = bitcast i32 %418 to float
  %431 = fcmp olt float %430, %427
  %432 = select i1 %431, i32 %418, i32 %424
  %433 = bitcast i32 %421 to float
  %434 = fcmp ogt float %433, %427
  %435 = select i1 %434, i32 %421, i32 %424
  %436 = getelementptr inbounds float, float* %405, i64 %384
  %437 = bitcast float* %436 to i32*
  %438 = load i32, i32* %437, align 4
  %439 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 %350, i64 %391, i64 %407, i64 2
  %440 = load float, float* %439, align 4
  %441 = bitcast i32 %438 to float
  %442 = fmul float %440, %441
  %443 = fadd float %429, %442
  %444 = bitcast i32 %432 to float
  %445 = fcmp olt float %444, %441
  %446 = select i1 %445, i32 %432, i32 %438
  %447 = bitcast i32 %435 to float
  %448 = fcmp ogt float %447, %441
  %449 = select i1 %448, i32 %435, i32 %438
  %450 = getelementptr inbounds float, float* %405, i64 %395
  %451 = bitcast float* %450 to i32*
  %452 = load i32, i32* %451, align 4
  %453 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 %350, i64 %391, i64 %407, i64 %396
  %454 = load float, float* %453, align 4
  %455 = bitcast i32 %452 to float
  %456 = fmul float %454, %455
  %457 = fadd float %443, %456
  %458 = bitcast i32 %446 to float
  %459 = fcmp olt float %458, %455
  %460 = select i1 %459, i32 %446, i32 %452
  %461 = bitcast i32 %449 to float
  %462 = fcmp ogt float %461, %455
  %463 = select i1 %462, i32 %449, i32 %452
  %464 = getelementptr inbounds float, float* %405, i64 %397
  %465 = bitcast float* %464 to i32*
  %466 = load i32, i32* %465, align 4
  %467 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 %350, i64 %391, i64 %407, i64 %398
  %468 = load float, float* %467, align 4
  %469 = bitcast i32 %466 to float
  %470 = fmul float %468, %469
  %471 = fadd float %457, %470
  %472 = bitcast i32 %460 to float
  %473 = fcmp olt float %472, %469
  %474 = select i1 %473, i32 %460, i32 %466
  %475 = bitcast i32 %463 to float
  %476 = fcmp ogt float %475, %469
  %477 = select i1 %476, i32 %463, i32 %466
  %478 = add nuw nsw i64 %403, 1
  %479 = icmp eq i64 %478, 5
  %480 = bitcast i32 %474 to float
  %481 = bitcast i32 %477 to float
  br i1 %479, label %482, label %399

482:                                              ; preds = %399
  %483 = fcmp olt float %471, %480
  %484 = select i1 %483, float %480, float %471
  %485 = fcmp ogt float %484, %481
  %486 = select i1 %485, float %481, float %484
  %487 = getelementptr inbounds float, float* %571, i64 %381
  store float %486, float* %487, align 4
  %488 = add nuw i64 %381, 1
  %489 = load i64, i64* %13, align 8
  %490 = icmp ult i64 %488, %489
  br i1 %490, label %380, label %373

491:                                              ; preds = %360, %491
  %492 = phi i1 [ %497, %491 ], [ %369, %360 ]
  %493 = phi i64 [ %496, %491 ], [ %368, %360 ]
  %494 = xor i64 %493, -1
  %495 = select i1 %492, i64 0, i64 %311
  %496 = add i64 %495, %494
  %497 = icmp slt i64 %496, 0
  %498 = icmp sge i64 %496, %6
  %499 = or i1 %497, %498
  br i1 %499, label %491, label %500

500:                                              ; preds = %491, %360
  %501 = phi i64 [ %368, %360 ], [ %496, %491 ]
  %502 = sub nsw i64 %501, %5
  %503 = mul i64 %502, %338
  %504 = getelementptr inbounds i8, i8* %337, i64 %503
  %505 = ptrtoint i8* %504 to i64
  %506 = and i64 %505, 63
  %507 = icmp eq i64 %506, 0
  tail call void @llvm.assume(i1 %507) #4
  store i8* %504, i8** %316, align 8
  %508 = icmp slt i64 %339, 0
  %509 = icmp sge i64 %339, %6
  %510 = or i1 %508, %509
  br i1 %510, label %511, label %520

511:                                              ; preds = %500, %511
  %512 = phi i1 [ %517, %511 ], [ %508, %500 ]
  %513 = phi i64 [ %516, %511 ], [ %339, %500 ]
  %514 = xor i64 %513, -1
  %515 = select i1 %512, i64 0, i64 %311
  %516 = add i64 %515, %514
  %517 = icmp slt i64 %516, 0
  %518 = icmp sge i64 %516, %6
  %519 = or i1 %517, %518
  br i1 %519, label %511, label %520

520:                                              ; preds = %511, %500
  %521 = phi i64 [ %339, %500 ], [ %516, %511 ]
  %522 = sub nsw i64 %521, %5
  %523 = mul i64 %522, %338
  %524 = getelementptr inbounds i8, i8* %337, i64 %523
  %525 = ptrtoint i8* %524 to i64
  %526 = and i64 %525, 63
  %527 = icmp eq i64 %526, 0
  tail call void @llvm.assume(i1 %527) #4
  store i8* %524, i8** %317, align 16
  %528 = add i64 %339, 1
  %529 = icmp slt i64 %528, 0
  %530 = icmp sge i64 %528, %6
  %531 = or i1 %529, %530
  br i1 %531, label %532, label %541

532:                                              ; preds = %520, %532
  %533 = phi i1 [ %538, %532 ], [ %529, %520 ]
  %534 = phi i64 [ %537, %532 ], [ %528, %520 ]
  %535 = xor i64 %534, -1
  %536 = select i1 %533, i64 0, i64 %311
  %537 = add i64 %536, %535
  %538 = icmp slt i64 %537, 0
  %539 = icmp sge i64 %537, %6
  %540 = or i1 %538, %539
  br i1 %540, label %532, label %541

541:                                              ; preds = %532, %520
  %542 = phi i64 [ %528, %520 ], [ %537, %532 ]
  %543 = sub nsw i64 %542, %5
  %544 = mul i64 %543, %338
  %545 = getelementptr inbounds i8, i8* %337, i64 %544
  %546 = ptrtoint i8* %545 to i64
  %547 = and i64 %546, 63
  %548 = icmp eq i64 %547, 0
  tail call void @llvm.assume(i1 %548) #4
  store i8* %545, i8** %318, align 8
  %549 = add i64 %339, 2
  %550 = icmp slt i64 %549, 0
  %551 = icmp sge i64 %549, %6
  %552 = or i1 %550, %551
  br i1 %552, label %553, label %562

553:                                              ; preds = %541, %553
  %554 = phi i1 [ %559, %553 ], [ %550, %541 ]
  %555 = phi i64 [ %558, %553 ], [ %549, %541 ]
  %556 = xor i64 %555, -1
  %557 = select i1 %554, i64 0, i64 %311
  %558 = add i64 %557, %556
  %559 = icmp slt i64 %558, 0
  %560 = icmp sge i64 %558, %6
  %561 = or i1 %559, %560
  br i1 %561, label %553, label %562

562:                                              ; preds = %553, %541
  %563 = phi i64 [ %549, %541 ], [ %558, %553 ]
  %564 = sub nsw i64 %563, %5
  %565 = mul i64 %564, %338
  %566 = getelementptr inbounds i8, i8* %337, i64 %565
  %567 = ptrtoint i8* %566 to i64
  %568 = and i64 %567, 63
  %569 = icmp eq i64 %568, 0
  tail call void @llvm.assume(i1 %569) #4
  store i8* %566, i8** %319, align 16
  %570 = bitcast i8* %329 to float*
  %571 = getelementptr inbounds float, float* %570, i64 %333
  %572 = icmp eq i64 %321, 0
  br i1 %572, label %375, label %344

573:                                              ; preds = %24
  %574 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  %575 = load i64, i64* %574, align 8
  %576 = icmp eq i64 %575, 0
  br i1 %576, label %852, label %577

577:                                              ; preds = %573
  %578 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %579 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %580 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 4
  %581 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %582 = bitcast [5 x float*]* %8 to i8*
  %583 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 1
  %584 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 2
  %585 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 3
  %586 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 4
  %587 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %588 = shl i64 %6, 1
  %589 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %590 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %591 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %592 = bitcast [5 x float*]* %8 to i8**
  %593 = bitcast float** %583 to i8**
  %594 = bitcast float** %584 to i8**
  %595 = bitcast float** %585 to i8**
  %596 = bitcast float** %586 to i8**
  br label %597

597:                                              ; preds = %651, %577
  %598 = phi i64 [ %14, %577 ], [ %652, %651 ]
  %599 = phi i64 [ %575, %577 ], [ %653, %651 ]
  %600 = phi i64 [ 0, %577 ], [ %654, %651 ]
  %601 = load i64, i64* %578, align 8
  %602 = add i64 %601, %600
  %603 = load i8*, i8** %579, align 8
  %604 = load i64, i64* %580, align 8
  %605 = mul i64 %604, %602
  %606 = getelementptr inbounds i8, i8* %603, i64 %605
  %607 = ptrtoint i8* %606 to i64
  %608 = and i64 %607, 63
  %609 = icmp eq i64 %608, 0
  tail call void @llvm.assume(i1 %609) #4
  %610 = load i64, i64* %581, align 8
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %582) #4
  %611 = lshr i64 %600, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %582, i8 -86, i64 40, i1 false) #4
  %612 = load i64, i64* %587, align 8
  %613 = add i64 %611, %5
  %614 = load i8*, i8** %589, align 8
  %615 = load i64, i64* %590, align 8
  %616 = add i64 %612, %613
  %617 = add i64 %616, -2
  %618 = icmp slt i64 %617, 0
  %619 = icmp sge i64 %617, %6
  %620 = or i1 %618, %619
  br i1 %620, label %627, label %636

621:                                              ; preds = %838
  %622 = and i64 %600, 4
  %623 = icmp eq i64 %622, 0
  %624 = and i64 %600, 3
  %625 = xor i64 %624, 3
  %626 = select i1 %623, i64 %624, i64 %625
  br label %656

627:                                              ; preds = %597, %627
  %628 = phi i1 [ %633, %627 ], [ %618, %597 ]
  %629 = phi i64 [ %632, %627 ], [ %617, %597 ]
  %630 = xor i64 %629, -1
  %631 = select i1 %628, i64 0, i64 %588
  %632 = add i64 %631, %630
  %633 = icmp slt i64 %632, 0
  %634 = icmp sge i64 %632, %6
  %635 = or i1 %633, %634
  br i1 %635, label %627, label %636

636:                                              ; preds = %627, %597
  %637 = phi i64 [ %617, %597 ], [ %632, %627 ]
  %638 = sub nsw i64 %637, %5
  %639 = mul i64 %638, %615
  %640 = getelementptr inbounds i8, i8* %614, i64 %639
  %641 = ptrtoint i8* %640 to i64
  %642 = and i64 %641, 63
  %643 = icmp eq i64 %642, 0
  tail call void @llvm.assume(i1 %643) #4
  store i8* %640, i8** %592, align 16
  %644 = add i64 %616, -1
  %645 = icmp slt i64 %644, 0
  %646 = icmp sge i64 %644, %6
  %647 = or i1 %645, %646
  %648 = bitcast i8* %640 to float*
  br i1 %647, label %767, label %776

649:                                              ; preds = %758
  %650 = load i64, i64* %574, align 8
  br label %651

651:                                              ; preds = %838, %649
  %652 = phi i64 [ %765, %649 ], [ 0, %838 ]
  %653 = phi i64 [ %650, %649 ], [ %599, %838 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %582) #4
  %654 = add nuw i64 %600, 1
  %655 = icmp ult i64 %654, %653
  br i1 %655, label %597, label %852

656:                                              ; preds = %758, %621
  %657 = phi i64 [ 0, %621 ], [ %764, %758 ]
  %658 = lshr i64 %657, 3
  %659 = load i64, i64* %591, align 8
  %660 = add i64 %659, %658
  %661 = add i64 %660, -2
  %662 = getelementptr inbounds float, float* %648, i64 %661
  %663 = load float, float* %662, align 4
  %664 = and i64 %657, 4
  %665 = icmp eq i64 %664, 0
  %666 = and i64 %657, 3
  %667 = xor i64 %666, 3
  %668 = select i1 %665, i64 %666, i64 %667
  %669 = add i64 %660, -1
  %670 = select i1 %665, i64 1, i64 3
  %671 = add i64 %660, 1
  %672 = select i1 %665, i64 3, i64 1
  %673 = add i64 %660, 2
  %674 = xor i64 %664, 4
  br label %675

675:                                              ; preds = %675, %656
  %676 = phi float [ %663, %656 ], [ %757, %675 ]
  %677 = phi float [ %663, %656 ], [ %756, %675 ]
  %678 = phi float [ 0.000000e+00, %656 ], [ %747, %675 ]
  %679 = phi i64 [ 0, %656 ], [ %754, %675 ]
  %680 = getelementptr inbounds [5 x float*], [5 x float*]* %8, i64 0, i64 %679
  %681 = load float*, float** %680, align 8
  %682 = sub nuw nsw i64 4, %679
  %683 = select i1 %623, i64 %679, i64 %682
  %684 = getelementptr inbounds float, float* %681, i64 %661
  %685 = bitcast float* %684 to i32*
  %686 = load i32, i32* %685, align 4
  %687 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 %626, i64 %668, i64 %683, i64 %664
  %688 = load float, float* %687, align 4
  %689 = bitcast i32 %686 to float
  %690 = fmul float %688, %689
  %691 = fadd float %678, %690
  %692 = fcmp olt float %677, %689
  %693 = bitcast float %677 to i32
  %694 = select i1 %692, i32 %693, i32 %686
  %695 = fcmp ogt float %676, %689
  %696 = bitcast float %676 to i32
  %697 = select i1 %695, i32 %696, i32 %686
  %698 = getelementptr inbounds float, float* %681, i64 %669
  %699 = bitcast float* %698 to i32*
  %700 = load i32, i32* %699, align 4
  %701 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 %626, i64 %668, i64 %683, i64 %670
  %702 = load float, float* %701, align 4
  %703 = bitcast i32 %700 to float
  %704 = fmul float %702, %703
  %705 = fadd float %691, %704
  %706 = bitcast i32 %694 to float
  %707 = fcmp olt float %706, %703
  %708 = select i1 %707, i32 %694, i32 %700
  %709 = bitcast i32 %697 to float
  %710 = fcmp ogt float %709, %703
  %711 = select i1 %710, i32 %697, i32 %700
  %712 = getelementptr inbounds float, float* %681, i64 %660
  %713 = bitcast float* %712 to i32*
  %714 = load i32, i32* %713, align 4
  %715 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 %626, i64 %668, i64 %683, i64 2
  %716 = load float, float* %715, align 4
  %717 = bitcast i32 %714 to float
  %718 = fmul float %716, %717
  %719 = fadd float %705, %718
  %720 = bitcast i32 %708 to float
  %721 = fcmp olt float %720, %717
  %722 = select i1 %721, i32 %708, i32 %714
  %723 = bitcast i32 %711 to float
  %724 = fcmp ogt float %723, %717
  %725 = select i1 %724, i32 %711, i32 %714
  %726 = getelementptr inbounds float, float* %681, i64 %671
  %727 = bitcast float* %726 to i32*
  %728 = load i32, i32* %727, align 4
  %729 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 %626, i64 %668, i64 %683, i64 %672
  %730 = load float, float* %729, align 4
  %731 = bitcast i32 %728 to float
  %732 = fmul float %730, %731
  %733 = fadd float %719, %732
  %734 = bitcast i32 %722 to float
  %735 = fcmp olt float %734, %731
  %736 = select i1 %735, i32 %722, i32 %728
  %737 = bitcast i32 %725 to float
  %738 = fcmp ogt float %737, %731
  %739 = select i1 %738, i32 %725, i32 %728
  %740 = getelementptr inbounds float, float* %681, i64 %673
  %741 = bitcast float* %740 to i32*
  %742 = load i32, i32* %741, align 4
  %743 = getelementptr inbounds %"struct.jxl::Upsampler", %"struct.jxl::Upsampler"* %0, i64 0, i32 1, i64 %626, i64 %668, i64 %683, i64 %674
  %744 = load float, float* %743, align 4
  %745 = bitcast i32 %742 to float
  %746 = fmul float %744, %745
  %747 = fadd float %733, %746
  %748 = bitcast i32 %736 to float
  %749 = fcmp olt float %748, %745
  %750 = select i1 %749, i32 %736, i32 %742
  %751 = bitcast i32 %739 to float
  %752 = fcmp ogt float %751, %745
  %753 = select i1 %752, i32 %739, i32 %742
  %754 = add nuw nsw i64 %679, 1
  %755 = icmp eq i64 %754, 5
  %756 = bitcast i32 %750 to float
  %757 = bitcast i32 %753 to float
  br i1 %755, label %758, label %675

758:                                              ; preds = %675
  %759 = fcmp olt float %747, %756
  %760 = select i1 %759, float %756, float %747
  %761 = fcmp ogt float %760, %757
  %762 = select i1 %761, float %757, float %760
  %763 = getelementptr inbounds float, float* %847, i64 %657
  store float %762, float* %763, align 4
  %764 = add nuw i64 %657, 1
  %765 = load i64, i64* %13, align 8
  %766 = icmp ult i64 %764, %765
  br i1 %766, label %656, label %649

767:                                              ; preds = %636, %767
  %768 = phi i1 [ %773, %767 ], [ %645, %636 ]
  %769 = phi i64 [ %772, %767 ], [ %644, %636 ]
  %770 = xor i64 %769, -1
  %771 = select i1 %768, i64 0, i64 %588
  %772 = add i64 %771, %770
  %773 = icmp slt i64 %772, 0
  %774 = icmp sge i64 %772, %6
  %775 = or i1 %773, %774
  br i1 %775, label %767, label %776

776:                                              ; preds = %767, %636
  %777 = phi i64 [ %644, %636 ], [ %772, %767 ]
  %778 = sub nsw i64 %777, %5
  %779 = mul i64 %778, %615
  %780 = getelementptr inbounds i8, i8* %614, i64 %779
  %781 = ptrtoint i8* %780 to i64
  %782 = and i64 %781, 63
  %783 = icmp eq i64 %782, 0
  tail call void @llvm.assume(i1 %783) #4
  store i8* %780, i8** %593, align 8
  %784 = icmp slt i64 %616, 0
  %785 = icmp sge i64 %616, %6
  %786 = or i1 %784, %785
  br i1 %786, label %787, label %796

787:                                              ; preds = %776, %787
  %788 = phi i1 [ %793, %787 ], [ %784, %776 ]
  %789 = phi i64 [ %792, %787 ], [ %616, %776 ]
  %790 = xor i64 %789, -1
  %791 = select i1 %788, i64 0, i64 %588
  %792 = add i64 %791, %790
  %793 = icmp slt i64 %792, 0
  %794 = icmp sge i64 %792, %6
  %795 = or i1 %793, %794
  br i1 %795, label %787, label %796

796:                                              ; preds = %787, %776
  %797 = phi i64 [ %616, %776 ], [ %792, %787 ]
  %798 = sub nsw i64 %797, %5
  %799 = mul i64 %798, %615
  %800 = getelementptr inbounds i8, i8* %614, i64 %799
  %801 = ptrtoint i8* %800 to i64
  %802 = and i64 %801, 63
  %803 = icmp eq i64 %802, 0
  tail call void @llvm.assume(i1 %803) #4
  store i8* %800, i8** %594, align 16
  %804 = add i64 %616, 1
  %805 = icmp slt i64 %804, 0
  %806 = icmp sge i64 %804, %6
  %807 = or i1 %805, %806
  br i1 %807, label %808, label %817

808:                                              ; preds = %796, %808
  %809 = phi i1 [ %814, %808 ], [ %805, %796 ]
  %810 = phi i64 [ %813, %808 ], [ %804, %796 ]
  %811 = xor i64 %810, -1
  %812 = select i1 %809, i64 0, i64 %588
  %813 = add i64 %812, %811
  %814 = icmp slt i64 %813, 0
  %815 = icmp sge i64 %813, %6
  %816 = or i1 %814, %815
  br i1 %816, label %808, label %817

817:                                              ; preds = %808, %796
  %818 = phi i64 [ %804, %796 ], [ %813, %808 ]
  %819 = sub nsw i64 %818, %5
  %820 = mul i64 %819, %615
  %821 = getelementptr inbounds i8, i8* %614, i64 %820
  %822 = ptrtoint i8* %821 to i64
  %823 = and i64 %822, 63
  %824 = icmp eq i64 %823, 0
  tail call void @llvm.assume(i1 %824) #4
  store i8* %821, i8** %595, align 8
  %825 = add i64 %616, 2
  %826 = icmp slt i64 %825, 0
  %827 = icmp sge i64 %825, %6
  %828 = or i1 %826, %827
  br i1 %828, label %829, label %838

829:                                              ; preds = %817, %829
  %830 = phi i1 [ %835, %829 ], [ %826, %817 ]
  %831 = phi i64 [ %834, %829 ], [ %825, %817 ]
  %832 = xor i64 %831, -1
  %833 = select i1 %830, i64 0, i64 %588
  %834 = add i64 %833, %832
  %835 = icmp slt i64 %834, 0
  %836 = icmp sge i64 %834, %6
  %837 = or i1 %835, %836
  br i1 %837, label %829, label %838

838:                                              ; preds = %829, %817
  %839 = phi i64 [ %825, %817 ], [ %834, %829 ]
  %840 = sub nsw i64 %839, %5
  %841 = mul i64 %840, %615
  %842 = getelementptr inbounds i8, i8* %614, i64 %841
  %843 = ptrtoint i8* %842 to i64
  %844 = and i64 %843, 63
  %845 = icmp eq i64 %844, 0
  tail call void @llvm.assume(i1 %845) #4
  store i8* %842, i8** %596, align 16
  %846 = bitcast i8* %606 to float*
  %847 = getelementptr inbounds float, float* %846, i64 %610
  %848 = icmp eq i64 %598, 0
  br i1 %848, label %651, label %621

849:                                              ; preds = %24
  %850 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 117) #4
  %851 = tail call zeroext i1 @_ZN3jxl5AbortEv() #5
  unreachable

852:                                              ; preds = %651, %375, %100, %573, %296, %25, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3jxl9Upsampler12UpsampleRectERKNS_6Image3IfEERKNS_4RectEPS2_S7_lm(%"struct.jxl::Upsampler"* nocapture readonly, %"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i64, i64) local_unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0
  tail call void @_ZNK3jxl9Upsampler12UpsampleRectERKNS_5PlaneIfEERKNS_4RectEPS2_S7_lm(%"struct.jxl::Upsampler"* %0, %"class.jxl::Plane"* dereferenceable(32) %8, %"class.jxl::Rect"* dereferenceable(32) %2, %"class.jxl::Plane"* %9, %"class.jxl::Rect"* dereferenceable(32) %4, i64 %5, i64 %6)
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1
  %11 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1
  tail call void @_ZNK3jxl9Upsampler12UpsampleRectERKNS_5PlaneIfEERKNS_4RectEPS2_S7_lm(%"struct.jxl::Upsampler"* %0, %"class.jxl::Plane"* dereferenceable(32) %10, %"class.jxl::Rect"* dereferenceable(32) %2, %"class.jxl::Plane"* %11, %"class.jxl::Rect"* dereferenceable(32) %4, i64 %5, i64 %6)
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2
  %13 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2
  tail call void @_ZNK3jxl9Upsampler12UpsampleRectERKNS_5PlaneIfEERKNS_4RectEPS2_S7_lm(%"struct.jxl::Upsampler"* %0, %"class.jxl::Plane"* dereferenceable(32) %12, %"class.jxl::Rect"* dereferenceable(32) %2, %"class.jxl::Plane"* %13, %"class.jxl::Rect"* dereferenceable(32) %4, i64 %5, i64 %6)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind
declare void @llvm.assume(i1) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
