; ModuleID = '../../third_party/pdfium/fxbarcode/datamatrix/BC_ASCIIEncoder.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/datamatrix/BC_ASCIIEncoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_ASCIIEncoder = type { %class.CBC_Encoder }
%class.CBC_Encoder = type { i32 (...)** }
%class.CBC_EncoderContext = type { %"class.fxcrt::WideString", %"class.fxcrt::WideString", i64, i8, %"class.fxcrt::UnownedPtr", i8, i8, i64 }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%"class.fxcrt::UnownedPtr" = type { %class.CBC_SymbolInfo* }
%class.CBC_SymbolInfo = type { i32 (...)**, %"struct.CBC_SymbolInfo::Data"* }
%"struct.CBC_SymbolInfo::Data" = type { i16, i16, i16, i8, i8, i8, i8 }

@_ZTV16CBC_ASCIIEncoder = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CBC_ASCIIEncoder*)* @_ZN16CBC_ASCIIEncoderD2Ev to i8*), i8* bitcast (void (%class.CBC_ASCIIEncoder*)* @_ZN16CBC_ASCIIEncoderD0Ev to i8*), i8* bitcast (i8 (%class.CBC_ASCIIEncoder*)* @_ZN16CBC_ASCIIEncoder15GetEncodingModeEv to i8*), i8* bitcast (i1 (%class.CBC_ASCIIEncoder*, %class.CBC_EncoderContext*)* @_ZN16CBC_ASCIIEncoder6EncodeEP18CBC_EncoderContext to i8*)] }, align 8

@_ZN16CBC_ASCIIEncoderC1Ev = hidden unnamed_addr alias void (%class.CBC_ASCIIEncoder*), void (%class.CBC_ASCIIEncoder*)* @_ZN16CBC_ASCIIEncoderC2Ev
@_ZN16CBC_ASCIIEncoderD1Ev = hidden unnamed_addr alias void (%class.CBC_ASCIIEncoder*), void (%class.CBC_ASCIIEncoder*)* @_ZN16CBC_ASCIIEncoderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CBC_ASCIIEncoderC2Ev(%class.CBC_ASCIIEncoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_ASCIIEncoder, %class.CBC_ASCIIEncoder* %0, i64 0, i32 0
  tail call void @_ZN11CBC_EncoderC2Ev(%class.CBC_Encoder* %2) #5
  %3 = getelementptr inbounds %class.CBC_ASCIIEncoder, %class.CBC_ASCIIEncoder* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV16CBC_ASCIIEncoder, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN11CBC_EncoderC2Ev(%class.CBC_Encoder*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN11CBC_EncoderD2Ev(%class.CBC_Encoder*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CBC_ASCIIEncoderD2Ev(%class.CBC_ASCIIEncoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_ASCIIEncoder, %class.CBC_ASCIIEncoder* %0, i64 0, i32 0
  tail call void @_ZN11CBC_EncoderD2Ev(%class.CBC_Encoder* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CBC_ASCIIEncoderD0Ev(%class.CBC_ASCIIEncoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_ASCIIEncoder, %class.CBC_ASCIIEncoder* %0, i64 0, i32 0
  tail call void @_ZN11CBC_EncoderD2Ev(%class.CBC_Encoder* %2) #5
  %3 = bitcast %class.CBC_ASCIIEncoder* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden signext i8 @_ZN16CBC_ASCIIEncoder15GetEncodingModeEv(%class.CBC_ASCIIEncoder* nocapture readnone) unnamed_addr #4 align 2 {
  ret i8 0
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN16CBC_ASCIIEncoder6EncodeEP18CBC_EncoderContext(%class.CBC_ASCIIEncoder* nocapture readnone, %class.CBC_EncoderContext*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %1, i64 0, i32 0
  %4 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %1, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %6, align 8
  %8 = icmp eq %"class.fxcrt::StringDataTemplate"* %7, null
  br i1 %8, label %64, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %7, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = icmp ugt i64 %11, %5
  br i1 %12, label %13, label %64

13:                                               ; preds = %9
  %14 = sub i64 %11, %5
  br label %15

15:                                               ; preds = %24, %13
  %16 = phi i64 [ %26, %24 ], [ %5, %13 ]
  %17 = phi i64 [ %25, %24 ], [ 0, %13 ]
  %18 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %7, i64 0, i32 3, i64 %16
  %19 = load i32, i32* %18, align 4
  %20 = icmp ugt i32 %19, 127
  br i1 %20, label %28, label %21

21:                                               ; preds = %15
  %22 = tail call i32 @iswdigit(i32 %19) #5
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %28, label %24

24:                                               ; preds = %21
  %25 = add nuw i64 %17, 1
  %26 = add nuw i64 %16, 1
  %27 = icmp eq i64 %25, %14
  br i1 %27, label %28, label %15

28:                                               ; preds = %15, %21, %24
  %29 = phi i64 [ %17, %21 ], [ %17, %15 ], [ %14, %24 ]
  %30 = icmp ugt i64 %29, 1
  br i1 %30, label %31, label %64

31:                                               ; preds = %28
  %32 = load i64, i64* %4, align 8
  %33 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %6, align 8
  %34 = icmp eq %"class.fxcrt::StringDataTemplate"* %33, null
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %33, i64 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = icmp ugt i64 %37, %32
  br i1 %38, label %40, label %39, !prof !2

39:                                               ; preds = %35, %31
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %33, i64 0, i32 3, i64 %32
  %42 = load i32, i32* %41, align 4
  %43 = add nuw i64 %32, 1
  %44 = icmp ugt i64 %37, %43
  br i1 %44, label %46, label %45, !prof !2

45:                                               ; preds = %40
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !4
  unreachable

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %33, i64 0, i32 3, i64 %43
  %48 = load i32, i32* %47, align 4
  %49 = icmp ugt i32 %42, 127
  br i1 %49, label %82, label %50

50:                                               ; preds = %46
  %51 = tail call i32 @iswdigit(i32 %42) #5
  %52 = icmp eq i32 %51, 0
  %53 = icmp ugt i32 %48, 127
  %54 = or i1 %53, %52
  br i1 %54, label %82, label %55

55:                                               ; preds = %50
  %56 = tail call i32 @iswdigit(i32 %48) #5
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %82, label %58

58:                                               ; preds = %55
  %59 = mul i32 %42, 10
  %60 = add nsw i32 %59, -398
  %61 = add nsw i32 %60, %48
  tail call void @_ZN18CBC_EncoderContext13writeCodewordEw(%class.CBC_EncoderContext* %1, i32 signext %61) #5
  %62 = load i64, i64* %4, align 8
  %63 = add i64 %62, 2
  store i64 %63, i64* %4, align 8
  br label %82

64:                                               ; preds = %2, %9, %28
  %65 = tail call signext i32 @_ZN18CBC_EncoderContext14getCurrentCharEv(%class.CBC_EncoderContext* %1) #5
  %66 = load i64, i64* %4, align 8
  %67 = tail call signext i8 @_ZN20CBC_HighLevelEncoder13LookAheadTestERKN5fxcrt10WideStringEmNS_8EncodingE(%"class.fxcrt::WideString"* dereferenceable(8) %3, i64 %66, i8 signext 0) #5
  switch i8 %67, label %82 [
    i8 0, label %74
    i8 5, label %72
    i8 1, label %68
    i8 3, label %69
    i8 2, label %70
    i8 4, label %71
  ]

68:                                               ; preds = %64
  br label %72

69:                                               ; preds = %64
  br label %72

70:                                               ; preds = %64
  br label %72

71:                                               ; preds = %64
  br label %72

72:                                               ; preds = %64, %71, %70, %69, %68
  %73 = phi i32 [ 240, %71 ], [ 239, %70 ], [ 238, %69 ], [ 230, %68 ], [ 231, %64 ]
  tail call void @_ZN18CBC_EncoderContext13writeCodewordEw(%class.CBC_EncoderContext* %1, i32 signext %73) #5
  tail call void @_ZN18CBC_EncoderContext19SignalEncoderChangeEN20CBC_HighLevelEncoder8EncodingE(%class.CBC_EncoderContext* %1, i8 signext %67) #5
  br label %82

74:                                               ; preds = %64
  %75 = tail call zeroext i1 @_ZN20CBC_HighLevelEncoder15IsExtendedASCIIEw(i32 signext %65) #5
  br i1 %75, label %76, label %77

76:                                               ; preds = %74
  tail call void @_ZN18CBC_EncoderContext13writeCodewordEw(%class.CBC_EncoderContext* %1, i32 signext 235) #5
  br label %77

77:                                               ; preds = %74, %76
  %78 = phi i32 [ -127, %76 ], [ 1, %74 ]
  %79 = add nsw i32 %65, %78
  tail call void @_ZN18CBC_EncoderContext13writeCodewordEw(%class.CBC_EncoderContext* %1, i32 signext %79) #5
  %80 = load i64, i64* %4, align 8
  %81 = add i64 %80, 1
  store i64 %81, i64* %4, align 8
  br label %82

82:                                               ; preds = %46, %50, %55, %58, %72, %77, %64
  %83 = phi i1 [ true, %72 ], [ true, %77 ], [ false, %64 ], [ true, %58 ], [ false, %55 ], [ false, %50 ], [ false, %46 ]
  ret i1 %83
}

declare void @_ZN18CBC_EncoderContext13writeCodewordEw(%class.CBC_EncoderContext*, i32 signext) local_unnamed_addr #1

declare signext i32 @_ZN18CBC_EncoderContext14getCurrentCharEv(%class.CBC_EncoderContext*) local_unnamed_addr #1

declare signext i8 @_ZN20CBC_HighLevelEncoder13LookAheadTestERKN5fxcrt10WideStringEmNS_8EncodingE(%"class.fxcrt::WideString"* dereferenceable(8), i64, i8 signext) local_unnamed_addr #1

declare void @_ZN18CBC_EncoderContext19SignalEncoderChangeEN20CBC_HighLevelEncoder8EncodingE(%class.CBC_EncoderContext*, i8 signext) local_unnamed_addr #1

declare zeroext i1 @_ZN20CBC_HighLevelEncoder15IsExtendedASCIIEw(i32 signext) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @iswdigit(i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i32 -2143843866}
!4 = !{i32 -2143843845}
