; ModuleID = '../../ui/base/idle/idle_linux.cc'
source_filename = "../../ui/base/idle/idle_linux.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::NoDestructor" = type { [24 x i8] }
%"class.ui::IdleQueryX11" = type { %"class.x11::Connection"* }
%"class.x11::Connection" = type opaque
%"class.display::Screen" = type { i32 (...)**, i64, i64 }
%"class.base::TaskTraits" = type { %"struct.base::TaskTraitsExtensionStorage", i8, i8, i8, i8, i8, i8 }
%"struct.base::TaskTraitsExtensionStorage" = type { i8, %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [8 x i8] }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.dbus::Bus" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", i32, i32, %class.scoped_refptr.1, %"class.base::WaitableEvent", %struct.DBusConnection*, i32, %class.scoped_refptr.1, %"class.std::__1::set", %"class.std::__1::map", %"class.std::__1::set.20", %"class.std::__1::set.30", %"class.std::__1::map.40", %"class.std::__1::map.51", %"class.std::__1::map.62", %"class.std::__1::map.71", i8, i8, i32, i32, %"class.std::__1::basic_string" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.3, i8, [7 x i8] }>
%class.scoped_refptr.3 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.4", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.4" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%struct.DBusConnection = type opaque
%class.scoped_refptr.1 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2" }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.13" }
%"class.std::__1::__tree.13" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::set.20" = type { %"class.std::__1::__tree.21" }
%"class.std::__1::__tree.21" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.22", %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::set.30" = type { %"class.std::__1::__tree.31" }
%"class.std::__1::__tree.31" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::map.40" = type { %"class.std::__1::__tree.41" }
%"class.std::__1::__tree.41" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.42", %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::map.51" = type { %"class.std::__1::__tree.52" }
%"class.std::__1::__tree.52" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.53", %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::map.62" = type { %"class.std::__1::__tree.63" }
%"class.std::__1::__tree.63" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.64", %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::map.71" = type { %"class.std::__1::__tree.72" }
%"class.std::__1::__tree.72" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.73", %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.82 }
%union.anon.82 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }

@_ZZN2ui12_GLOBAL__N_116GetIdleLinuxImplEvE4impl = internal unnamed_addr global %"class.base::NoDestructor" zeroinitializer, align 8
@_ZGVZN2ui12_GLOBAL__N_116GetIdleLinuxImplEvE4impl = internal global i64 0, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2ui17CalculateIdleTimeEv() local_unnamed_addr #0 {
  %1 = alloca %"class.ui::IdleQueryX11", align 8
  %2 = tail call zeroext i1 @_ZN8features20IsUsingOzonePlatformEv() #6
  br i1 %2, label %3, label %17

3:                                                ; preds = %0
  %4 = tail call %"class.display::Screen"* @_ZN7display6Screen9GetScreenEv() #6
  %5 = icmp eq %"class.display::Screen"* %4, null
  br i1 %5, label %21, label %6

6:                                                ; preds = %3
  %7 = bitcast %"class.display::Screen"* %4 to i64 (%"class.display::Screen"*)***
  %8 = load i64 (%"class.display::Screen"*)**, i64 (%"class.display::Screen"*)*** %7, align 8
  %9 = getelementptr inbounds i64 (%"class.display::Screen"*)*, i64 (%"class.display::Screen"*)** %8, i64 15
  %10 = load i64 (%"class.display::Screen"*)*, i64 (%"class.display::Screen"*)** %9, align 8
  %11 = tail call i64 %10(%"class.display::Screen"* nonnull %4) #6
  %12 = add i64 %11, -9223372036854775807
  %13 = icmp ult i64 %12, 2
  %14 = sdiv i64 %11, 1000000
  %15 = select i1 %13, i64 %11, i64 %14
  %16 = trunc i64 %15 to i32
  br label %21

17:                                               ; preds = %0
  %18 = bitcast %"class.ui::IdleQueryX11"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #6
  %19 = getelementptr inbounds %"class.ui::IdleQueryX11", %"class.ui::IdleQueryX11"* %1, i64 0, i32 0
  store %"class.x11::Connection"* inttoptr (i64 -6148914691236517206 to %"class.x11::Connection"*), %"class.x11::Connection"** %19, align 8
  call void @_ZN2ui12IdleQueryX11C1Ev(%"class.ui::IdleQueryX11"* nonnull %1) #6
  %20 = call i32 @_ZN2ui12IdleQueryX118IdleTimeEv(%"class.ui::IdleQueryX11"* nonnull %1) #6
  call void @_ZN2ui12IdleQueryX11D1Ev(%"class.ui::IdleQueryX11"* nonnull %1) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6
  br label %21

21:                                               ; preds = %6, %3, %17
  %22 = phi i32 [ %20, %17 ], [ %16, %6 ], [ 0, %3 ]
  ret i32 %22
}

declare zeroext i1 @_ZN8features20IsUsingOzonePlatformEv() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.display::Screen"* @_ZN7display6Screen9GetScreenEv() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN2ui12IdleQueryX11C1Ev(%"class.ui::IdleQueryX11"*) unnamed_addr #1

declare i32 @_ZN2ui12IdleQueryX118IdleTimeEv(%"class.ui::IdleQueryX11"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN2ui12IdleQueryX11D1Ev(%"class.ui::IdleQueryX11"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2ui22CheckIdleStateIsLockedEv() local_unnamed_addr #0 {
  %1 = alloca %"class.base::TaskTraits", align 1
  %2 = tail call dereferenceable(8) %"class.absl::optional"* @_ZN2ui19IdleStateForTestingEv() #6
  %3 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %0
  %7 = tail call dereferenceable(8) %"class.absl::optional"* @_ZN2ui19IdleStateForTestingEv() #6
  %8 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8, i8* %8, align 4, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %6
  tail call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #7
  unreachable

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 2
  br label %51

16:                                               ; preds = %0
  %17 = load atomic i8, i8* bitcast (i64* @_ZGVZN2ui12_GLOBAL__N_116GetIdleLinuxImplEvE4impl to i8*) acquire, align 8
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %33, !prof !3

19:                                               ; preds = %16
  %20 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN2ui12_GLOBAL__N_116GetIdleLinuxImplEvE4impl) #6
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %33, label %22

22:                                               ; preds = %19
  store %"class.dbus::Bus"* null, %"class.dbus::Bus"** bitcast (%"class.base::NoDestructor"* @_ZZN2ui12_GLOBAL__N_116GetIdleLinuxImplEvE4impl to %"class.dbus::Bus"**), align 8
  %23 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %23) #6
  store i8 0, i8* %23, align 1, !alias.scope !4
  %24 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 0, i32 1, i32 0, i64 0
  %25 = bitcast i8* %24 to i64*
  store i64 0, i64* %25, align 1, !alias.scope !4
  %26 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 1
  store i8 1, i8* %26, align 1
  %27 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 2
  store i8 -128, i8* %27, align 1
  %28 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 3
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 4
  store i8 1, i8* %29, align 1
  %30 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 5
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 6
  store i8 0, i8* %31, align 1
  %32 = call %"class.base::SequencedTaskRunner"* @_ZN4base10ThreadPool25CreateSequencedTaskRunnerERKNS_10TaskTraitsE(%"class.base::TaskTraits"* nonnull dereferenceable(15) %1) #6
  store %"class.base::SequencedTaskRunner"* %32, %"class.base::SequencedTaskRunner"** bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN2ui12_GLOBAL__N_116GetIdleLinuxImplEvE4impl, i64 0, i32 0, i64 8) to %"class.base::SequencedTaskRunner"**), align 8
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %23) #6
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN2ui12_GLOBAL__N_116GetIdleLinuxImplEvE4impl, i64 0, i32 0, i64 16) to i32*), align 8
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN2ui12_GLOBAL__N_116GetIdleLinuxImplEvE4impl) #6
  br label %33

33:                                               ; preds = %16, %19, %22
  %34 = load atomic i32, i32* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN2ui12_GLOBAL__N_116GetIdleLinuxImplEvE4impl, i64 0, i32 0, i64 16) to i32*) seq_cst, align 8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %33
  %37 = icmp eq i32 %34, 1
  br label %51

38:                                               ; preds = %33
  %39 = call zeroext i1 @_ZN8features20IsUsingOzonePlatformEv() #6
  br i1 %39, label %40, label %49

40:                                               ; preds = %38
  %41 = call %"class.display::Screen"* @_ZN7display6Screen9GetScreenEv() #6
  %42 = icmp eq %"class.display::Screen"* %41, null
  br i1 %42, label %51, label %43

43:                                               ; preds = %40
  %44 = bitcast %"class.display::Screen"* %41 to i1 (%"class.display::Screen"*)***
  %45 = load i1 (%"class.display::Screen"*)**, i1 (%"class.display::Screen"*)*** %44, align 8
  %46 = getelementptr inbounds i1 (%"class.display::Screen"*)*, i1 (%"class.display::Screen"*)** %45, i64 14
  %47 = load i1 (%"class.display::Screen"*)*, i1 (%"class.display::Screen"*)** %46, align 8
  %48 = call zeroext i1 %47(%"class.display::Screen"* nonnull %41) #6
  br label %51

49:                                               ; preds = %38
  %50 = call zeroext i1 @_ZN2ui20IsXScreensaverActiveEv() #6
  br label %51

51:                                               ; preds = %36, %49, %40, %43, %12
  %52 = phi i1 [ %15, %12 ], [ %37, %36 ], [ %50, %49 ], [ %48, %43 ], [ false, %40 ]
  ret i1 %52
}

declare dereferenceable(8) %"class.absl::optional"* @_ZN2ui19IdleStateForTestingEv() local_unnamed_addr #1

declare zeroext i1 @_ZN2ui20IsXScreensaverActiveEv() local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #4

declare %"class.base::SequencedTaskRunner"* @_ZN4base10ThreadPool25CreateSequencedTaskRunnerERKNS_10TaskTraitsE(%"class.base::TaskTraits"* dereferenceable(15)) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 1048575}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN4base13trait_helpers22GetTaskTraitsExtensionIJNS_8MayBlockENS_12TaskPriorityENS_20TaskShutdownBehaviorEEEENS_26TaskTraitsExtensionStorageENSt3__117integral_constantIbLb1EEEDpT_: argument 0"}
!6 = distinct !{!6, !"_ZN4base13trait_helpers22GetTaskTraitsExtensionIJNS_8MayBlockENS_12TaskPriorityENS_20TaskShutdownBehaviorEEEENS_26TaskTraitsExtensionStorageENSt3__117integral_constantIbLb1EEEDpT_"}
