; ModuleID = '../../third_party/blink/renderer/core/html/parser/css_preload_scanner.cc'
source_filename = "../../third_party/blink/renderer/core/html/parser/css_preload_scanner.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::CSSPreloadScanner" = type { i32, [4 x i8], %"class.WTF::StringBuilder", %"class.WTF::StringBuilder", i32, %"class.WTF::Vector.6"*, %"class.blink::KURL"*, %"class.blink::PreloadRequest::ExclusionInfo"* }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon, i32, i8, i8, [2 x i8] }>
%union.anon = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [16 x i8] }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.WTF::Vector.6" = type { %"class.WTF::VectorBuffer.7" }
%"class.WTF::VectorBuffer.7" = type { %"class.WTF::VectorBufferBase.8" }
%"class.WTF::VectorBufferBase.8" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::PreloadRequest"* }
%"class.blink::PreloadRequest" = type <{ %"class.WTF::String", %"class.WTF::TextPosition", %"class.WTF::String", %"class.blink::KURL", %"class.WTF::String", i8, [3 x i8], i32, i32, i32, %"class.WTF::String", i32, %"struct.blink::FetchParameters::ResourceWidth", %"class.blink::ClientHintsPreferences", i32, i32, i32, %"class.WTF::HashSet", i8, i8, [2 x i8], i32, i8, [7 x i8] }>
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.9" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.blink::KURL"* }
%"struct.blink::FetchParameters::ResourceWidth" = type <{ float, i8, [3 x i8] }>
%"class.blink::ClientHintsPreferences" = type { %"struct.blink::WebEnabledClientHints" }
%"struct.blink::WebEnabledClientHints" = type { [16 x i8] }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.std::__1::pair"*, i32, i32, i32, [4 x i8] }>
%"struct.std::__1::pair" = type <{ %"class.WTF::String", i8, [7 x i8] }>
%"class.blink::PreloadRequest::ExclusionInfo" = type { i32 (...)**, %"class.WTF::RefCounted", %"class.blink::KURL", %"class.WTF::HashSet.20", %"class.WTF::HashSet.20" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::HashSet.20" = type { %"class.WTF::HashTable.21" }
%"class.WTF::HashTable.21" = type <{ %"class.blink::KURL"*, i32, i32, i32, [4 x i8] }>
%class.LiteralBuffer = type { i16*, i16*, i16*, [256 x i16] }
%"class.blink::SegmentedString" = type <{ %"class.blink::SegmentedSubstring", i32, i32, i32, [4 x i8], %"class.WTF::Deque", i8, i8, [6 x i8] }>
%"class.blink::SegmentedSubstring" = type { %union.anon.24, i8*, i8*, i8, i8, %"class.WTF::String" }
%union.anon.24 = type { i8* }
%"class.WTF::Deque" = type { %"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.27" }
%"class.WTF::VectorBuffer.27" = type { %"class.WTF::VectorBufferBase.28" }
%"class.WTF::VectorBufferBase.28" = type { %"class.blink::SegmentedSubstring"*, i32, i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::Vector.1" = type { %"class.WTF::VectorBuffer.2" }
%"class.WTF::VectorBuffer.2" = type { %"class.WTF::VectorBufferBase.3", [16 x i8] }
%"class.WTF::VectorBufferBase.3" = type { i16*, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.31 }
%union.anon.31 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc = comdat any

$_ZN3WTF22EqualIgnoringASCIICaseILm8EEEbRKNS_10StringViewERAT__Kc = comdat any

$_ZN5blink17CSSPreloadScanner8TokenizeEDsRKNS_15SegmentedStringE = comdat any

$_ZN3WTF13StringBuilder6AppendEDs = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_ = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_ = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

$_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs = comdat any

$_ZN5blink14PreloadRequestD2Ev = comdat any

$_ZN3WTF6VectorINSt3__110unique_ptrIN5blink14PreloadRequestENS1_14default_deleteIS4_EEEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS7_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__110unique_ptrIN5blink14PreloadRequestENS2_14default_deleteIS5_EEEEEEmm = comdat any

@.str = private unnamed_addr constant [7 x i8] c"import\00", align 1
@_ZN5blink26fetch_initiator_type_names4kCSSE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"charset\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN3WTF10StringImpl12empty16_bit_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.2 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.5 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.6 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1
@_ZN3WTF19kASCIICaseFoldTableE = external local_unnamed_addr constant [256 x i8], align 16
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__110unique_ptrIN5blink14PreloadRequestENS1_14default_deleteIS4_EEEEEEPKcv = private unnamed_addr constant [141 x i8] c"const char *WTF::GetStringWithTypeName() [T = std::__1::unique_ptr<blink::PreloadRequest, std::__1::default_delete<blink::PreloadRequest> >]\00", align 1

@_ZN5blink17CSSPreloadScannerC1Ev = hidden unnamed_addr alias void (%"class.blink::CSSPreloadScanner"*), void (%"class.blink::CSSPreloadScanner"*)* @_ZN5blink17CSSPreloadScannerC2Ev
@_ZN5blink17CSSPreloadScannerD1Ev = hidden unnamed_addr alias void (%"class.blink::CSSPreloadScanner"*), void (%"class.blink::CSSPreloadScanner"*)* @_ZN5blink17CSSPreloadScannerD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink17CSSPreloadScannerC2Ev(%"class.blink::CSSPreloadScanner"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %3, align 8
  %4 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2, i32 1
  %5 = bitcast %union.anon* %4 to i8*
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2, i32 2
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %7, align 4
  %8 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2, i32 4
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %9, align 8
  %10 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 1
  %11 = bitcast %union.anon* %10 to i8*
  store i8 0, i8* %11, align 8
  %12 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 2
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 3
  store i8 1, i8* %13, align 4
  %14 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 4
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 4
  store i32 1, i32* %15, align 8
  %16 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 5
  %17 = bitcast %"class.WTF::Vector.6"** %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17CSSPreloadScannerD2Ev(%"class.blink::CSSPreloadScanner"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3
  tail call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* %2) #8
  %3 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  br i1 %10, label %13, label %15

13:                                               ; preds = %6
  %14 = add i32 %12, -1
  store i32 %14, i32* %11, align 4
  br label %15

15:                                               ; preds = %13, %6
  %16 = phi i32 [ %14, %13 ], [ %12, %6 ]
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #8
  br label %19

19:                                               ; preds = %1, %15, %18
  %20 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2
  tail call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* %20) #8
  %21 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %20, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %22, null
  br i1 %23, label %37, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  br i1 %28, label %31, label %33

31:                                               ; preds = %24
  %32 = add i32 %30, -1
  store i32 %32, i32* %29, align 4
  br label %33

33:                                               ; preds = %31, %24
  %34 = phi i32 [ %32, %31 ], [ %30, %24 ]
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %33
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %22) #8
  br label %37

37:                                               ; preds = %19, %33, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17CSSPreloadScanner5ResetEv(%"class.blink::CSSPreloadScanner"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2
  tail call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* %3) #8
  %4 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3
  tail call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* %4) #8
  ret void
}

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17CSSPreloadScanner4ScanERK13LiteralBufferIDsLj256EERKNS_15SegmentedStringERN3WTF6VectorINSt3__110unique_ptrINS_14PreloadRequestENSA_14default_deleteISC_EEEELj0ENS8_18PartitionAllocatorEEERKNS_4KURLEPKNSC_13ExclusionInfoE(%"class.blink::CSSPreloadScanner"*, %class.LiteralBuffer* nocapture readonly dereferenceable(536), %"class.blink::SegmentedString"* dereferenceable(88), %"class.WTF::Vector.6"* dereferenceable(16), %"class.blink::KURL"* dereferenceable(112), %"class.blink::PreloadRequest::ExclusionInfo"*) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %class.LiteralBuffer, %class.LiteralBuffer* %1, i64 0, i32 0
  %8 = load i16*, i16** %7, align 8
  %9 = getelementptr inbounds %class.LiteralBuffer, %class.LiteralBuffer* %1, i64 0, i32 1
  %10 = bitcast i16** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = ptrtoint i16* %8 to i64
  %13 = sub i64 %11, %12
  %14 = ashr exact i64 %13, 1
  %15 = getelementptr inbounds i16, i16* %8, i64 %14
  %16 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 5
  store %"class.WTF::Vector.6"* %3, %"class.WTF::Vector.6"** %16, align 8
  %17 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 6
  store %"class.blink::KURL"* %4, %"class.blink::KURL"** %17, align 8
  %18 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 7
  store %"class.blink::PreloadRequest::ExclusionInfo"* %5, %"class.blink::PreloadRequest::ExclusionInfo"** %18, align 8
  %19 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 0
  %20 = icmp eq i64 %13, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %6, %29
  %22 = phi i16* [ %31, %29 ], [ %8, %6 ]
  %23 = load i32, i32* %19, align 8
  %24 = icmp eq i32 %23, 9
  br i1 %24, label %25, label %29

25:                                               ; preds = %29, %21, %6
  %26 = load i32, i32* %19, align 8
  %27 = add i32 %26, -7
  %28 = icmp ult i32 %27, 2
  br i1 %28, label %33, label %34

29:                                               ; preds = %21
  %30 = load i16, i16* %22, align 2
  tail call void @_ZN5blink17CSSPreloadScanner8TokenizeEDsRKNS_15SegmentedStringE(%"class.blink::CSSPreloadScanner"* %0, i16 zeroext %30, %"class.blink::SegmentedString"* dereferenceable(88) %2) #8
  %31 = getelementptr inbounds i16, i16* %22, i64 1
  %32 = icmp eq i16* %31, %15
  br i1 %32, label %25, label %21

33:                                               ; preds = %25
  tail call void @_ZN5blink17CSSPreloadScanner8EmitRuleERKNS_15SegmentedStringE(%"class.blink::CSSPreloadScanner"* %0, %"class.blink::SegmentedString"* dereferenceable(88) %2) #8
  br label %34

34:                                               ; preds = %25, %33
  %35 = bitcast %"class.WTF::Vector.6"** %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17CSSPreloadScanner4ScanERKN3WTF6StringERKNS_15SegmentedStringERNS1_6VectorINSt3__110unique_ptrINS_14PreloadRequestENS9_14default_deleteISB_EEEELj0ENS1_18PartitionAllocatorEEERKNS_4KURLEPKNSB_13ExclusionInfoE(%"class.blink::CSSPreloadScanner"*, %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.blink::SegmentedString"* dereferenceable(88), %"class.WTF::Vector.6"* dereferenceable(16), %"class.blink::KURL"* dereferenceable(112), %"class.blink::PreloadRequest::ExclusionInfo"*) local_unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = icmp eq %"class.WTF::StringImpl"* %8, null
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  br i1 %12, label %44, label %15

15:                                               ; preds = %6
  %16 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %17 = select i1 %13, i8* null, i8* %16
  br i1 %13, label %22, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  br label %22

22:                                               ; preds = %15, %18
  %23 = phi i64 [ %21, %18 ], [ 0, %15 ]
  %24 = getelementptr inbounds i8, i8* %17, i64 %23
  %25 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 5
  store %"class.WTF::Vector.6"* %3, %"class.WTF::Vector.6"** %25, align 8
  %26 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 6
  store %"class.blink::KURL"* %4, %"class.blink::KURL"** %26, align 8
  %27 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 7
  store %"class.blink::PreloadRequest::ExclusionInfo"* %5, %"class.blink::PreloadRequest::ExclusionInfo"** %27, align 8
  %28 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 0
  %29 = icmp eq i64 %23, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %22, %38
  %31 = phi i8* [ %41, %38 ], [ %17, %22 ]
  %32 = load i32, i32* %28, align 8
  %33 = icmp eq i32 %32, 9
  br i1 %33, label %34, label %38

34:                                               ; preds = %38, %30, %22
  %35 = load i32, i32* %28, align 8
  %36 = add i32 %35, -7
  %37 = icmp ult i32 %36, 2
  br i1 %37, label %43, label %72

38:                                               ; preds = %30
  %39 = load i8, i8* %31, align 1
  %40 = zext i8 %39 to i16
  tail call void @_ZN5blink17CSSPreloadScanner8TokenizeEDsRKNS_15SegmentedStringE(%"class.blink::CSSPreloadScanner"* %0, i16 zeroext %40, %"class.blink::SegmentedString"* dereferenceable(88) %2) #8
  %41 = getelementptr inbounds i8, i8* %31, i64 1
  %42 = icmp eq i8* %41, %24
  br i1 %42, label %34, label %30

43:                                               ; preds = %34
  tail call void @_ZN5blink17CSSPreloadScanner8EmitRuleERKNS_15SegmentedStringE(%"class.blink::CSSPreloadScanner"* %0, %"class.blink::SegmentedString"* dereferenceable(88) %2) #8
  br label %72

44:                                               ; preds = %6
  %45 = bitcast %"class.WTF::StringImpl"* %14 to i16*
  %46 = select i1 %13, i16* null, i16* %45
  br i1 %13, label %51, label %47

47:                                               ; preds = %44
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  br label %51

51:                                               ; preds = %44, %47
  %52 = phi i64 [ %50, %47 ], [ 0, %44 ]
  %53 = getelementptr inbounds i16, i16* %46, i64 %52
  %54 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 5
  store %"class.WTF::Vector.6"* %3, %"class.WTF::Vector.6"** %54, align 8
  %55 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 6
  store %"class.blink::KURL"* %4, %"class.blink::KURL"** %55, align 8
  %56 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 7
  store %"class.blink::PreloadRequest::ExclusionInfo"* %5, %"class.blink::PreloadRequest::ExclusionInfo"** %56, align 8
  %57 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 0
  %58 = icmp eq i64 %52, 0
  br i1 %58, label %63, label %59

59:                                               ; preds = %51, %67
  %60 = phi i16* [ %69, %67 ], [ %46, %51 ]
  %61 = load i32, i32* %57, align 8
  %62 = icmp eq i32 %61, 9
  br i1 %62, label %63, label %67

63:                                               ; preds = %67, %59, %51
  %64 = load i32, i32* %57, align 8
  %65 = add i32 %64, -7
  %66 = icmp ult i32 %65, 2
  br i1 %66, label %71, label %72

67:                                               ; preds = %59
  %68 = load i16, i16* %60, align 2
  tail call void @_ZN5blink17CSSPreloadScanner8TokenizeEDsRKNS_15SegmentedStringE(%"class.blink::CSSPreloadScanner"* %0, i16 zeroext %68, %"class.blink::SegmentedString"* dereferenceable(88) %2) #8
  %69 = getelementptr inbounds i16, i16* %60, i64 1
  %70 = icmp eq i16* %69, %53
  br i1 %70, label %63, label %59

71:                                               ; preds = %63
  tail call void @_ZN5blink17CSSPreloadScanner8EmitRuleERKNS_15SegmentedStringE(%"class.blink::CSSPreloadScanner"* %0, %"class.blink::SegmentedString"* dereferenceable(88) %2) #8
  br label %72

72:                                               ; preds = %71, %63, %43, %34
  %73 = phi %"class.WTF::Vector.6"** [ %25, %34 ], [ %25, %43 ], [ %54, %63 ], [ %54, %71 ]
  %74 = bitcast %"class.WTF::Vector.6"** %73 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 24, i1 false) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink17CSSPreloadScanner17SetReferrerPolicyEN7network5mojom14ReferrerPolicyE(%"class.blink::CSSPreloadScanner"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 4
  store i32 %1, i32* %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink17CSSPreloadScanner20HasFinishedRuleValueEv(%"class.blink::CSSPreloadScanner"* readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp ult i32 %3, 2
  br i1 %4, label %167, label %5

5:                                                ; preds = %1
  %6 = add i32 %3, -2
  %7 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 3
  %8 = load i8, i8* %7, align 4, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %9, label %26, label %13

13:                                               ; preds = %5
  br i1 %12, label %17, label %14

14:                                               ; preds = %13
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %16 = bitcast %"class.WTF::StringImpl"* %15 to i8*
  br label %20

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  br label %20

20:                                               ; preds = %17, %14
  %21 = phi i8* [ %19, %17 ], [ %16, %14 ]
  %22 = zext i32 %6 to i64
  %23 = getelementptr inbounds i8, i8* %21, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i16
  br label %39

26:                                               ; preds = %5
  br i1 %12, label %30, label %27

27:                                               ; preds = %26
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %29 = bitcast %"class.WTF::StringImpl"* %28 to i16*
  br label %34

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 1
  %32 = bitcast %union.anon* %31 to i16**
  %33 = load i16*, i16** %32, align 8
  br label %34

34:                                               ; preds = %30, %27
  %35 = phi i16* [ %33, %30 ], [ %29, %27 ]
  %36 = zext i32 %6 to i64
  %37 = getelementptr inbounds i16, i16* %35, i64 %36
  %38 = load i16, i16* %37, align 2
  br label %39

39:                                               ; preds = %20, %34
  %40 = phi i16 [ %25, %20 ], [ %38, %34 ]
  %41 = icmp eq i16 %40, 92
  br i1 %41, label %167, label %42

42:                                               ; preds = %39
  br i1 %9, label %54, label %43

43:                                               ; preds = %42
  br i1 %12, label %47, label %44

44:                                               ; preds = %43
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %46 = bitcast %"class.WTF::StringImpl"* %45 to i8*
  br label %50

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  br label %50

50:                                               ; preds = %47, %44
  %51 = phi i8* [ %49, %47 ], [ %46, %44 ]
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  br label %65

54:                                               ; preds = %42
  br i1 %12, label %58, label %55

55:                                               ; preds = %54
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %57 = bitcast %"class.WTF::StringImpl"* %56 to i16*
  br label %62

58:                                               ; preds = %54
  %59 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 1
  %60 = bitcast %union.anon* %59 to i16**
  %61 = load i16*, i16** %60, align 8
  br label %62

62:                                               ; preds = %58, %55
  %63 = phi i16* [ %61, %58 ], [ %57, %55 ]
  %64 = load i16, i16* %63, align 2
  br label %65

65:                                               ; preds = %50, %62
  %66 = phi i16 [ %53, %50 ], [ %64, %62 ]
  %67 = icmp eq i16 %66, 39
  br i1 %67, label %94, label %68

68:                                               ; preds = %65
  br i1 %9, label %80, label %69

69:                                               ; preds = %68
  br i1 %12, label %73, label %70

70:                                               ; preds = %69
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %72 = bitcast %"class.WTF::StringImpl"* %71 to i8*
  br label %76

73:                                               ; preds = %69
  %74 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  br label %76

76:                                               ; preds = %73, %70
  %77 = phi i8* [ %75, %73 ], [ %72, %70 ]
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i16
  br label %91

80:                                               ; preds = %68
  br i1 %12, label %84, label %81

81:                                               ; preds = %80
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %83 = bitcast %"class.WTF::StringImpl"* %82 to i16*
  br label %88

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 1
  %86 = bitcast %union.anon* %85 to i16**
  %87 = load i16*, i16** %86, align 8
  br label %88

88:                                               ; preds = %84, %81
  %89 = phi i16* [ %87, %84 ], [ %83, %81 ]
  %90 = load i16, i16* %89, align 2
  br label %91

91:                                               ; preds = %76, %88
  %92 = phi i16 [ %79, %76 ], [ %90, %88 ]
  %93 = icmp eq i16 %92, 34
  br i1 %93, label %94, label %136

94:                                               ; preds = %91, %65
  br i1 %9, label %96, label %95

95:                                               ; preds = %94
  br i1 %12, label %102, label %97

96:                                               ; preds = %94
  br i1 %12, label %120, label %115

97:                                               ; preds = %95
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %99 = bitcast %"class.WTF::StringImpl"* %98 to i8*
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %101 = bitcast %"class.WTF::StringImpl"* %100 to i8*
  br label %105

102:                                              ; preds = %95
  %103 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 0
  %104 = load i8*, i8** %103, align 8
  br label %105

105:                                              ; preds = %102, %97
  %106 = phi i8* [ %104, %102 ], [ %99, %97 ]
  %107 = phi i8* [ %104, %102 ], [ %101, %97 ]
  %108 = load i8, i8* %106, align 1
  %109 = zext i8 %108 to i16
  %110 = add i32 %3, -1
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %107, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i16
  br label %132

115:                                              ; preds = %96
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %117 = bitcast %"class.WTF::StringImpl"* %116 to i16*
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %119 = bitcast %"class.WTF::StringImpl"* %118 to i16*
  br label %124

120:                                              ; preds = %96
  %121 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 1
  %122 = bitcast %union.anon* %121 to i16**
  %123 = load i16*, i16** %122, align 8
  br label %124

124:                                              ; preds = %120, %115
  %125 = phi i16* [ %123, %120 ], [ %117, %115 ]
  %126 = phi i16* [ %123, %120 ], [ %119, %115 ]
  %127 = load i16, i16* %125, align 2
  %128 = add i32 %3, -1
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds i16, i16* %126, i64 %129
  %131 = load i16, i16* %130, align 2
  br label %132

132:                                              ; preds = %105, %124
  %133 = phi i16 [ %109, %105 ], [ %127, %124 ]
  %134 = phi i16 [ %114, %105 ], [ %131, %124 ]
  %135 = icmp eq i16 %133, %134
  br label %167

136:                                              ; preds = %91
  %137 = add i32 %3, -1
  br i1 %9, label %151, label %138

138:                                              ; preds = %136
  br i1 %12, label %142, label %139

139:                                              ; preds = %138
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %141 = bitcast %"class.WTF::StringImpl"* %140 to i8*
  br label %145

142:                                              ; preds = %138
  %143 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 0
  %144 = load i8*, i8** %143, align 8
  br label %145

145:                                              ; preds = %142, %139
  %146 = phi i8* [ %144, %142 ], [ %141, %139 ]
  %147 = zext i32 %137 to i64
  %148 = getelementptr inbounds i8, i8* %146, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i16
  br label %164

151:                                              ; preds = %136
  br i1 %12, label %155, label %152

152:                                              ; preds = %151
  %153 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  %154 = bitcast %"class.WTF::StringImpl"* %153 to i16*
  br label %159

155:                                              ; preds = %151
  %156 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3, i32 1
  %157 = bitcast %union.anon* %156 to i16**
  %158 = load i16*, i16** %157, align 8
  br label %159

159:                                              ; preds = %155, %152
  %160 = phi i16* [ %158, %155 ], [ %154, %152 ]
  %161 = zext i32 %137 to i64
  %162 = getelementptr inbounds i16, i16* %160, i64 %161
  %163 = load i16, i16* %162, align 2
  br label %164

164:                                              ; preds = %145, %159
  %165 = phi i16 [ %150, %145 ], [ %163, %159 ]
  %166 = icmp eq i16 %165, 41
  br label %167

167:                                              ; preds = %1, %39, %164, %132
  %168 = phi i1 [ %135, %132 ], [ %166, %164 ], [ false, %39 ], [ false, %1 ]
  ret i1 %168
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17CSSPreloadScanner8EmitRuleERKNS_15SegmentedStringE(%"class.blink::CSSPreloadScanner"*, %"class.blink::SegmentedString"* dereferenceable(88)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca %"class.WTF::TextPosition", align 4
  %7 = alloca %"class.std::__1::unique_ptr", align 8
  %8 = alloca %"struct.blink::FetchParameters::ResourceWidth", align 4
  %9 = alloca %"class.blink::ClientHintsPreferences", align 1
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8
  %12 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2
  %13 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2, i32 3
  %14 = load i8, i8* %13, align 4, !range !2, !noalias !3
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2, i32 2
  %17 = load i32, i32* %16, align 8, !noalias !3
  %18 = icmp eq i32 %17, 0
  br i1 %15, label %35, label %19

19:                                               ; preds = %2
  br i1 %18, label %30, label %20

20:                                               ; preds = %19
  %21 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %12, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8, !noalias !3
  %23 = icmp eq %"class.WTF::StringImpl"* %22, null
  br i1 %23, label %27, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 1
  %26 = bitcast %"class.WTF::StringImpl"* %25 to i8*
  br label %30

27:                                               ; preds = %20
  %28 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2, i32 1, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8, !noalias !3
  br label %30

30:                                               ; preds = %27, %24, %19
  %31 = phi i8* [ %29, %27 ], [ %26, %24 ], [ null, %19 ]
  %32 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8, !noalias !3
  %33 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %32, i64* %33, align 8, !alias.scope !3
  %34 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* %31, i8** %34, align 8, !alias.scope !3
  br label %53

35:                                               ; preds = %2
  br i1 %18, label %47, label %36

36:                                               ; preds = %35
  %37 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %12, i64 0, i32 0, i32 0, i32 0
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8, !noalias !3
  %39 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %39, label %43, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 1
  %42 = bitcast %"class.WTF::StringImpl"* %41 to i16*
  br label %47

43:                                               ; preds = %36
  %44 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2, i32 1
  %45 = bitcast %union.anon* %44 to i16**
  %46 = load i16*, i16** %45, align 8, !noalias !3
  br label %47

47:                                               ; preds = %43, %40, %35
  %48 = phi i16* [ %46, %43 ], [ %42, %40 ], [ null, %35 ]
  %49 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl12empty16_bit_E to i64*), align 8, !noalias !3
  %50 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %49, i64* %50, align 8, !alias.scope !3
  %51 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %52 = bitcast i8** %51 to i16**
  store i16* %48, i16** %52, align 8, !alias.scope !3
  br label %53

53:                                               ; preds = %30, %47
  %54 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 %17, i32* %54, align 8, !alias.scope !3
  %55 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %3, [7 x i8]* nonnull dereferenceable(7) @.str)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8
  br i1 %55, label %56, label %478

56:                                               ; preds = %53
  %57 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #8
  %58 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %58, align 8
  %59 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59) #8
  %60 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3
  %61 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* %60) #8
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %61, %"class.WTF::StringImpl"** %62, align 8
  %63 = icmp eq %"class.WTF::StringImpl"* %61, null
  br i1 %63, label %394, label %64

64:                                               ; preds = %56
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %394, label %68

68:                                               ; preds = %64
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 1
  %71 = bitcast %"class.WTF::StringImpl"* %70 to i8*
  %72 = bitcast %"class.WTF::StringImpl"* %70 to i16*
  %73 = zext i32 %66 to i64
  br label %74

74:                                               ; preds = %94, %68
  %75 = phi i64 [ 0, %68 ], [ %95, %94 ]
  %76 = phi i32 [ %66, %68 ], [ %97, %94 ]
  %77 = phi i32 [ 0, %68 ], [ %96, %94 ]
  %78 = icmp eq i64 %75, %73
  br i1 %78, label %99, label %79

79:                                               ; preds = %74
  %80 = load atomic i32, i32* %69 monotonic, align 4
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %87, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds i8, i8* %71, i64 %75
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i16
  br label %90

87:                                               ; preds = %79
  %88 = getelementptr inbounds i16, i16* %72, i64 %75
  %89 = load i16, i16* %88, align 2
  br label %90

90:                                               ; preds = %87, %83
  %91 = phi i16 [ %86, %83 ], [ %89, %87 ]
  %92 = icmp ult i16 %91, 33
  br i1 %92, label %93, label %99

93:                                               ; preds = %90
  switch i16 %91, label %99 [
    i16 32, label %94
    i16 10, label %94
    i16 9, label %94
    i16 13, label %94
    i16 12, label %94
  ]

94:                                               ; preds = %93, %93, %93, %93, %93
  %95 = add nuw nsw i64 %75, 1
  %96 = add nuw i32 %77, 1
  %97 = add i32 %76, -1
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %394, label %74

99:                                               ; preds = %74, %90, %93
  %100 = phi i64 [ %73, %74 ], [ %75, %90 ], [ %75, %93 ]
  %101 = trunc i64 %100 to i32
  %102 = zext i32 %76 to i64
  br label %103

103:                                              ; preds = %99, %125
  %104 = phi i64 [ %102, %99 ], [ %127, %125 ]
  %105 = trunc i64 %104 to i32
  %106 = add i32 %105, -1
  %107 = add i32 %106, %101
  %108 = icmp ugt i32 %66, %107
  br i1 %108, label %109, label %128

109:                                              ; preds = %103
  %110 = load atomic i32, i32* %69 monotonic, align 4
  %111 = and i32 %110, 1
  %112 = icmp eq i32 %111, 0
  %113 = zext i32 %107 to i64
  br i1 %112, label %118, label %114

114:                                              ; preds = %109
  %115 = getelementptr inbounds i8, i8* %71, i64 %113
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i16
  br label %121

118:                                              ; preds = %109
  %119 = getelementptr inbounds i16, i16* %72, i64 %113
  %120 = load i16, i16* %119, align 2
  br label %121

121:                                              ; preds = %118, %114
  %122 = phi i16 [ %117, %114 ], [ %120, %118 ]
  %123 = icmp ult i16 %122, 33
  br i1 %123, label %124, label %128

124:                                              ; preds = %121
  switch i16 %122, label %128 [
    i16 32, label %125
    i16 10, label %125
    i16 9, label %125
    i16 13, label %125
    i16 12, label %125
  ]

125:                                              ; preds = %124, %124, %124, %124, %124
  %126 = icmp eq i32 %106, 0
  %127 = add nsw i64 %104, -1
  br i1 %126, label %394, label %103

128:                                              ; preds = %124, %121, %103
  %129 = phi i1 [ true, %124 ], [ true, %121 ], [ false, %103 ]
  %130 = trunc i64 %104 to i32
  %131 = icmp ult i32 %130, 5
  br i1 %131, label %264, label %132

132:                                              ; preds = %128
  %133 = icmp ugt i32 %66, %101
  br i1 %133, label %134, label %268

134:                                              ; preds = %132
  %135 = load atomic i32, i32* %69 monotonic, align 4
  %136 = and i32 %135, 1
  %137 = icmp eq i32 %136, 0
  %138 = and i64 %100, 4294967295
  br i1 %137, label %143, label %139

139:                                              ; preds = %134
  %140 = getelementptr inbounds i8, i8* %71, i64 %138
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i16
  br label %146

143:                                              ; preds = %134
  %144 = getelementptr inbounds i16, i16* %72, i64 %138
  %145 = load i16, i16* %144, align 2
  br label %146

146:                                              ; preds = %143, %139
  %147 = phi i16 [ %142, %139 ], [ %145, %143 ]
  %148 = icmp eq i16 %147, 117
  br i1 %148, label %163, label %149

149:                                              ; preds = %146
  %150 = load atomic i32, i32* %69 monotonic, align 4
  %151 = and i32 %150, 1
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %157, label %153

153:                                              ; preds = %149
  %154 = getelementptr inbounds i8, i8* %71, i64 %138
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i16
  br label %160

157:                                              ; preds = %149
  %158 = getelementptr inbounds i16, i16* %72, i64 %138
  %159 = load i16, i16* %158, align 2
  br label %160

160:                                              ; preds = %157, %153
  %161 = phi i16 [ %156, %153 ], [ %159, %157 ]
  %162 = icmp eq i16 %161, 85
  br i1 %162, label %163, label %268

163:                                              ; preds = %160, %146
  %164 = add nuw i32 %101, 1
  %165 = icmp ugt i32 %66, %164
  br i1 %165, label %166, label %268

166:                                              ; preds = %163
  %167 = load atomic i32, i32* %69 monotonic, align 4
  %168 = and i32 %167, 1
  %169 = icmp eq i32 %168, 0
  %170 = zext i32 %164 to i64
  br i1 %169, label %175, label %171

171:                                              ; preds = %166
  %172 = getelementptr inbounds i8, i8* %71, i64 %170
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i16
  br label %178

175:                                              ; preds = %166
  %176 = getelementptr inbounds i16, i16* %72, i64 %170
  %177 = load i16, i16* %176, align 2
  br label %178

178:                                              ; preds = %175, %171
  %179 = phi i16 [ %174, %171 ], [ %177, %175 ]
  %180 = icmp eq i16 %179, 114
  br i1 %180, label %195, label %181

181:                                              ; preds = %178
  %182 = load atomic i32, i32* %69 monotonic, align 4
  %183 = and i32 %182, 1
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %189, label %185

185:                                              ; preds = %181
  %186 = getelementptr inbounds i8, i8* %71, i64 %170
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i16
  br label %192

189:                                              ; preds = %181
  %190 = getelementptr inbounds i16, i16* %72, i64 %170
  %191 = load i16, i16* %190, align 2
  br label %192

192:                                              ; preds = %189, %185
  %193 = phi i16 [ %188, %185 ], [ %191, %189 ]
  %194 = icmp eq i16 %193, 82
  br i1 %194, label %195, label %268

195:                                              ; preds = %192, %178
  %196 = add nuw i32 %101, 2
  %197 = icmp ugt i32 %66, %196
  br i1 %197, label %198, label %268

198:                                              ; preds = %195
  %199 = load atomic i32, i32* %69 monotonic, align 4
  %200 = and i32 %199, 1
  %201 = icmp eq i32 %200, 0
  %202 = zext i32 %196 to i64
  br i1 %201, label %207, label %203

203:                                              ; preds = %198
  %204 = getelementptr inbounds i8, i8* %71, i64 %202
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i16
  br label %210

207:                                              ; preds = %198
  %208 = getelementptr inbounds i16, i16* %72, i64 %202
  %209 = load i16, i16* %208, align 2
  br label %210

210:                                              ; preds = %207, %203
  %211 = phi i16 [ %206, %203 ], [ %209, %207 ]
  %212 = icmp eq i16 %211, 108
  br i1 %212, label %227, label %213

213:                                              ; preds = %210
  %214 = load atomic i32, i32* %69 monotonic, align 4
  %215 = and i32 %214, 1
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %213
  %218 = getelementptr inbounds i8, i8* %71, i64 %202
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i16
  br label %224

221:                                              ; preds = %213
  %222 = getelementptr inbounds i16, i16* %72, i64 %202
  %223 = load i16, i16* %222, align 2
  br label %224

224:                                              ; preds = %221, %217
  %225 = phi i16 [ %220, %217 ], [ %223, %221 ]
  %226 = icmp eq i16 %225, 76
  br i1 %226, label %227, label %268

227:                                              ; preds = %224, %210
  %228 = add nuw i32 %101, 3
  %229 = icmp ugt i32 %66, %228
  br i1 %229, label %230, label %268

230:                                              ; preds = %227
  %231 = load atomic i32, i32* %69 monotonic, align 4
  %232 = and i32 %231, 1
  %233 = icmp eq i32 %232, 0
  %234 = zext i32 %228 to i64
  br i1 %233, label %239, label %235

235:                                              ; preds = %230
  %236 = getelementptr inbounds i8, i8* %71, i64 %234
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i16
  br label %242

239:                                              ; preds = %230
  %240 = getelementptr inbounds i16, i16* %72, i64 %234
  %241 = load i16, i16* %240, align 2
  br label %242

242:                                              ; preds = %239, %235
  %243 = phi i16 [ %238, %235 ], [ %241, %239 ]
  %244 = icmp eq i16 %243, 40
  %245 = and i1 %129, %244
  br i1 %245, label %246, label %268

246:                                              ; preds = %242
  %247 = load atomic i32, i32* %69 monotonic, align 4
  %248 = and i32 %247, 1
  %249 = icmp eq i32 %248, 0
  %250 = zext i32 %107 to i64
  br i1 %249, label %255, label %251

251:                                              ; preds = %246
  %252 = getelementptr inbounds i8, i8* %71, i64 %250
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i16
  br label %258

255:                                              ; preds = %246
  %256 = getelementptr inbounds i16, i16* %72, i64 %250
  %257 = load i16, i16* %256, align 2
  br label %258

258:                                              ; preds = %255, %251
  %259 = phi i16 [ %254, %251 ], [ %257, %255 ]
  %260 = icmp eq i16 %259, 41
  br i1 %260, label %261, label %268

261:                                              ; preds = %258
  %262 = add nuw i32 %101, 4
  %263 = add i32 %130, -5
  br label %264

264:                                              ; preds = %261, %128
  %265 = phi i32 [ %262, %261 ], [ %101, %128 ]
  %266 = phi i32 [ %263, %261 ], [ %130, %128 ]
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %394, label %268

268:                                              ; preds = %195, %163, %132, %227, %160, %192, %224, %242, %258, %264
  %269 = phi i32 [ %266, %264 ], [ %130, %258 ], [ %130, %242 ], [ %130, %224 ], [ %130, %192 ], [ %130, %160 ], [ %130, %227 ], [ %130, %132 ], [ %130, %163 ], [ %130, %195 ]
  %270 = phi i32 [ %265, %264 ], [ %101, %258 ], [ %101, %242 ], [ %101, %224 ], [ %101, %192 ], [ %101, %160 ], [ %101, %227 ], [ %101, %132 ], [ %101, %163 ], [ %101, %195 ]
  %271 = zext i32 %270 to i64
  br label %272

272:                                              ; preds = %292, %268
  %273 = phi i64 [ %271, %268 ], [ %293, %292 ]
  %274 = phi i32 [ %269, %268 ], [ %295, %292 ]
  %275 = phi i32 [ %270, %268 ], [ %294, %292 ]
  %276 = icmp ult i64 %273, %73
  br i1 %276, label %277, label %297

277:                                              ; preds = %272
  %278 = load atomic i32, i32* %69 monotonic, align 4
  %279 = and i32 %278, 1
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %285, label %281

281:                                              ; preds = %277
  %282 = getelementptr inbounds i8, i8* %71, i64 %273
  %283 = load i8, i8* %282, align 1
  %284 = zext i8 %283 to i16
  br label %288

285:                                              ; preds = %277
  %286 = getelementptr inbounds i16, i16* %72, i64 %273
  %287 = load i16, i16* %286, align 2
  br label %288

288:                                              ; preds = %285, %281
  %289 = phi i16 [ %284, %281 ], [ %287, %285 ]
  %290 = icmp ult i16 %289, 33
  br i1 %290, label %291, label %297

291:                                              ; preds = %288
  switch i16 %289, label %297 [
    i16 32, label %292
    i16 10, label %292
    i16 9, label %292
    i16 13, label %292
    i16 12, label %292
  ]

292:                                              ; preds = %291, %291, %291, %291, %291
  %293 = add nuw nsw i64 %273, 1
  %294 = add nuw i32 %275, 1
  %295 = add i32 %274, -1
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %394, label %272

297:                                              ; preds = %272, %288, %291
  %298 = trunc i64 %273 to i32
  %299 = zext i32 %274 to i64
  br label %300

300:                                              ; preds = %297, %322
  %301 = phi i64 [ %299, %297 ], [ %324, %322 ]
  %302 = trunc i64 %301 to i32
  %303 = add i32 %302, -1
  %304 = add i32 %303, %298
  %305 = icmp ugt i32 %66, %304
  br i1 %305, label %306, label %325

306:                                              ; preds = %300
  %307 = load atomic i32, i32* %69 monotonic, align 4
  %308 = and i32 %307, 1
  %309 = icmp eq i32 %308, 0
  %310 = zext i32 %304 to i64
  br i1 %309, label %315, label %311

311:                                              ; preds = %306
  %312 = getelementptr inbounds i8, i8* %71, i64 %310
  %313 = load i8, i8* %312, align 1
  %314 = zext i8 %313 to i16
  br label %318

315:                                              ; preds = %306
  %316 = getelementptr inbounds i16, i16* %72, i64 %310
  %317 = load i16, i16* %316, align 2
  br label %318

318:                                              ; preds = %315, %311
  %319 = phi i16 [ %314, %311 ], [ %317, %315 ]
  %320 = icmp ult i16 %319, 33
  br i1 %320, label %321, label %325

321:                                              ; preds = %318
  switch i16 %319, label %325 [
    i16 32, label %322
    i16 10, label %322
    i16 9, label %322
    i16 13, label %322
    i16 12, label %322
  ]

322:                                              ; preds = %321, %321, %321, %321, %321
  %323 = icmp eq i32 %303, 0
  %324 = add nsw i64 %301, -1
  br i1 %323, label %394, label %300

325:                                              ; preds = %321, %318, %300
  %326 = phi i1 [ true, %321 ], [ true, %318 ], [ false, %300 ]
  %327 = trunc i64 %301 to i32
  %328 = icmp ult i32 %327, 2
  br i1 %328, label %394, label %329

329:                                              ; preds = %325
  %330 = icmp ugt i32 %66, %298
  br i1 %330, label %331, label %343

331:                                              ; preds = %329
  %332 = load atomic i32, i32* %69 monotonic, align 4
  %333 = and i32 %332, 1
  %334 = icmp eq i32 %333, 0
  %335 = and i64 %273, 4294967295
  br i1 %334, label %340, label %336

336:                                              ; preds = %331
  %337 = getelementptr inbounds i8, i8* %71, i64 %335
  %338 = load i8, i8* %337, align 1
  %339 = zext i8 %338 to i16
  br label %343

340:                                              ; preds = %331
  %341 = getelementptr inbounds i16, i16* %72, i64 %335
  %342 = load i16, i16* %341, align 2
  br label %343

343:                                              ; preds = %340, %336, %329
  %344 = phi i16 [ %342, %340 ], [ %339, %336 ], [ 0, %329 ]
  br i1 %326, label %345, label %357

345:                                              ; preds = %343
  %346 = load atomic i32, i32* %69 monotonic, align 4
  %347 = and i32 %346, 1
  %348 = icmp eq i32 %347, 0
  %349 = zext i32 %304 to i64
  br i1 %348, label %354, label %350

350:                                              ; preds = %345
  %351 = getelementptr inbounds i8, i8* %71, i64 %349
  %352 = load i8, i8* %351, align 1
  %353 = zext i8 %352 to i16
  br label %357

354:                                              ; preds = %345
  %355 = getelementptr inbounds i16, i16* %72, i64 %349
  %356 = load i16, i16* %355, align 2
  br label %357

357:                                              ; preds = %354, %350, %343
  %358 = phi i16 [ 0, %343 ], [ %353, %350 ], [ %356, %354 ]
  %359 = icmp ne i16 %344, %358
  %360 = xor i1 %330, true
  %361 = or i1 %359, %360
  br i1 %361, label %394, label %362

362:                                              ; preds = %357
  %363 = load atomic i32, i32* %69 monotonic, align 4
  %364 = and i32 %363, 1
  %365 = icmp eq i32 %364, 0
  %366 = and i64 %273, 4294967295
  br i1 %365, label %371, label %367

367:                                              ; preds = %362
  %368 = getelementptr inbounds i8, i8* %71, i64 %366
  %369 = load i8, i8* %368, align 1
  %370 = zext i8 %369 to i16
  br label %374

371:                                              ; preds = %362
  %372 = getelementptr inbounds i16, i16* %72, i64 %366
  %373 = load i16, i16* %372, align 2
  br label %374

374:                                              ; preds = %371, %367
  %375 = phi i16 [ %370, %367 ], [ %373, %371 ]
  %376 = icmp eq i16 %375, 39
  br i1 %376, label %391, label %377

377:                                              ; preds = %374
  %378 = load atomic i32, i32* %69 monotonic, align 4
  %379 = and i32 %378, 1
  %380 = icmp eq i32 %379, 0
  br i1 %380, label %385, label %381

381:                                              ; preds = %377
  %382 = getelementptr inbounds i8, i8* %71, i64 %366
  %383 = load i8, i8* %382, align 1
  %384 = zext i8 %383 to i16
  br label %388

385:                                              ; preds = %377
  %386 = getelementptr inbounds i16, i16* %72, i64 %366
  %387 = load i16, i16* %386, align 2
  br label %388

388:                                              ; preds = %385, %381
  %389 = phi i16 [ %384, %381 ], [ %387, %385 ]
  %390 = icmp eq i16 %389, 34
  br i1 %390, label %391, label %394

391:                                              ; preds = %388, %374
  %392 = add nuw i32 %298, 1
  %393 = add i32 %327, -2
  br label %394

394:                                              ; preds = %94, %125, %292, %322, %264, %64, %56, %325, %357, %388, %391
  %395 = phi i32 [ %392, %391 ], [ %298, %388 ], [ %298, %357 ], [ %298, %325 ], [ 0, %56 ], [ 0, %64 ], [ %265, %264 ], [ %298, %322 ], [ %294, %292 ], [ %101, %125 ], [ %96, %94 ]
  %396 = phi i32 [ %393, %391 ], [ %327, %388 ], [ %327, %357 ], [ 1, %325 ], [ 0, %56 ], [ 0, %64 ], [ 0, %264 ], [ 0, %322 ], [ 0, %292 ], [ 0, %125 ], [ 0, %94 ]
  %397 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"* nonnull %5, i32 %395, i32 %396) #8
  store %"class.WTF::StringImpl"* %397, %"class.WTF::StringImpl"** %58, align 8
  %398 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %62, align 8
  %399 = icmp eq %"class.WTF::StringImpl"* %398, null
  br i1 %399, label %413, label %400

400:                                              ; preds = %394
  %401 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %398, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %402 = load atomic i32, i32* %401 monotonic, align 4
  %403 = and i32 %402, 2
  %404 = icmp eq i32 %403, 0
  %405 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %398, i64 0, i32 0
  %406 = load i32, i32* %405, align 4
  br i1 %404, label %407, label %409

407:                                              ; preds = %400
  %408 = add i32 %406, -1
  store i32 %408, i32* %405, align 4
  br label %409

409:                                              ; preds = %407, %400
  %410 = phi i32 [ %408, %407 ], [ %406, %400 ]
  %411 = icmp eq i32 %410, 0
  br i1 %411, label %412, label %413

412:                                              ; preds = %409
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %398) #8
  br label %413

413:                                              ; preds = %394, %409, %412
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59) #8
  %414 = bitcast %"class.WTF::TextPosition"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %414) #8
  %415 = getelementptr inbounds %"class.WTF::TextPosition", %"class.WTF::TextPosition"* %6, i64 0, i32 0, i32 0
  %416 = getelementptr inbounds %"class.WTF::TextPosition", %"class.WTF::TextPosition"* %6, i64 0, i32 1, i32 0
  %417 = call i32 @_ZNK5blink15SegmentedString11CurrentLineEv(%"class.blink::SegmentedString"* %1) #8
  %418 = call i32 @_ZNK5blink15SegmentedString13CurrentColumnEv(%"class.blink::SegmentedString"* %1) #8
  store i32 %417, i32* %415, align 4
  store i32 %418, i32* %416, align 4
  %419 = bitcast %"class.std::__1::unique_ptr"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %419) #8
  %420 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %7, i64 0, i32 0, i32 0, i32 0
  %421 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink26fetch_initiator_type_names4kCSSE, align 8
  %422 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %421, i64 0, i32 0
  %423 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 6
  %424 = load %"class.blink::KURL"*, %"class.blink::KURL"** %423, align 8
  %425 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 4
  %426 = load i32, i32* %425, align 8
  %427 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 7
  %428 = load %"class.blink::PreloadRequest::ExclusionInfo"*, %"class.blink::PreloadRequest::ExclusionInfo"** %427, align 8
  %429 = bitcast %"struct.blink::FetchParameters::ResourceWidth"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %429) #8
  %430 = getelementptr inbounds %"struct.blink::FetchParameters::ResourceWidth", %"struct.blink::FetchParameters::ResourceWidth"* %8, i64 0, i32 0
  store float 0.000000e+00, float* %430, align 4
  %431 = getelementptr inbounds %"struct.blink::FetchParameters::ResourceWidth", %"struct.blink::FetchParameters::ResourceWidth"* %8, i64 0, i32 1
  store i8 0, i8* %431, align 4
  %432 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %9, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %432) #8
  call void @_ZN5blink22ClientHintsPreferencesC1Ev(%"class.blink::ClientHintsPreferences"* nonnull %9) #8
  %433 = call %"class.blink::PreloadRequest"* @_ZN5blink14PreloadRequest14CreateIfNeededERKN3WTF6StringERKNS1_12TextPositionES4_RKNS_4KURLENS_12ResourceTypeEN7network5mojom14ReferrerPolicyENS0_14ReferrerSourceENS_15ResourceFetcher10IsImageSetEPKNS0_13ExclusionInfoERKNS_15FetchParameters13ResourceWidthERKNS_22ClientHintsPreferencesENS0_11RequestTypeE(%"class.WTF::String"* dereferenceable(8) %422, %"class.WTF::TextPosition"* nonnull dereferenceable(8) %6, %"class.WTF::String"* nonnull dereferenceable(8) %4, %"class.blink::KURL"* dereferenceable(112) %424, i8 zeroext 2, i32 %426, i32 1, i32 0, %"class.blink::PreloadRequest::ExclusionInfo"* %428, %"struct.blink::FetchParameters::ResourceWidth"* nonnull dereferenceable(8) %8, %"class.blink::ClientHintsPreferences"* nonnull dereferenceable(16) %9, i32 0) #8
  store %"class.blink::PreloadRequest"* %433, %"class.blink::PreloadRequest"** %420, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %432) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %429) #8
  %434 = icmp eq %"class.blink::PreloadRequest"* %433, null
  %435 = ptrtoint %"class.blink::PreloadRequest"* %433 to i64
  br i1 %434, label %436, label %438

436:                                              ; preds = %413
  %437 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 0
  store i32 0, i32* %437, align 8
  store %"class.blink::PreloadRequest"* null, %"class.blink::PreloadRequest"** %420, align 8
  br label %461

438:                                              ; preds = %413
  %439 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 5
  %440 = load %"class.WTF::Vector.6"*, %"class.WTF::Vector.6"** %439, align 8
  %441 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %440, i64 0, i32 0, i32 0, i32 2
  %442 = load i32, i32* %441, align 4
  %443 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %440, i64 0, i32 0, i32 0, i32 1
  %444 = load i32, i32* %443, align 8
  %445 = icmp eq i32 %442, %444
  br i1 %445, label %454, label %446, !prof !6

446:                                              ; preds = %438
  %447 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %440, i64 0, i32 0, i32 0, i32 0
  %448 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %447, align 8
  %449 = zext i32 %442 to i64
  %450 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %448, i64 %449
  store %"class.blink::PreloadRequest"* null, %"class.blink::PreloadRequest"** %420, align 8
  %451 = bitcast %"class.std::__1::unique_ptr"* %450 to i64*
  store i64 %435, i64* %451, align 8
  %452 = load i32, i32* %441, align 4
  %453 = add i32 %452, 1
  store i32 %453, i32* %441, align 4
  br label %455

454:                                              ; preds = %438
  call void @_ZN3WTF6VectorINSt3__110unique_ptrIN5blink14PreloadRequestENS1_14default_deleteIS4_EEEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS7_EEvOT_(%"class.WTF::Vector.6"* %440, %"class.std::__1::unique_ptr"* nonnull dereferenceable(8) %7) #8
  br label %455

455:                                              ; preds = %454, %446
  %456 = load %"class.blink::PreloadRequest"*, %"class.blink::PreloadRequest"** %420, align 8
  %457 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 0
  store i32 0, i32* %457, align 8
  store %"class.blink::PreloadRequest"* null, %"class.blink::PreloadRequest"** %420, align 8
  %458 = icmp eq %"class.blink::PreloadRequest"* %456, null
  br i1 %458, label %461, label %459

459:                                              ; preds = %455
  call void @_ZN5blink14PreloadRequestD2Ev(%"class.blink::PreloadRequest"* nonnull %456) #8
  %460 = bitcast %"class.blink::PreloadRequest"* %456 to i8*
  call void @free(i8* %460) #8
  br label %461

461:                                              ; preds = %436, %455, %459
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %419) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %414) #8
  %462 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %463 = icmp eq %"class.WTF::StringImpl"* %462, null
  br i1 %463, label %477, label %464

464:                                              ; preds = %461
  %465 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %462, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %466 = load atomic i32, i32* %465 monotonic, align 4
  %467 = and i32 %466, 2
  %468 = icmp eq i32 %467, 0
  %469 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %462, i64 0, i32 0
  %470 = load i32, i32* %469, align 4
  br i1 %468, label %471, label %473

471:                                              ; preds = %464
  %472 = add i32 %470, -1
  store i32 %472, i32* %469, align 4
  br label %473

473:                                              ; preds = %471, %464
  %474 = phi i32 [ %472, %471 ], [ %470, %464 ]
  %475 = icmp eq i32 %474, 0
  br i1 %475, label %476, label %477

476:                                              ; preds = %473
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %462) #8
  br label %477

477:                                              ; preds = %461, %473, %476
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #8
  br label %524

478:                                              ; preds = %53
  %479 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %479) #8
  %480 = load i8, i8* %13, align 4, !range !2, !noalias !7
  %481 = icmp eq i8 %480, 0
  %482 = load i32, i32* %16, align 8, !noalias !7
  %483 = icmp eq i32 %482, 0
  br i1 %481, label %500, label %484

484:                                              ; preds = %478
  br i1 %483, label %495, label %485

485:                                              ; preds = %484
  %486 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %12, i64 0, i32 0, i32 0, i32 0
  %487 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %486, align 8, !noalias !7
  %488 = icmp eq %"class.WTF::StringImpl"* %487, null
  br i1 %488, label %492, label %489

489:                                              ; preds = %485
  %490 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %487, i64 1
  %491 = bitcast %"class.WTF::StringImpl"* %490 to i8*
  br label %495

492:                                              ; preds = %485
  %493 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2, i32 1, i32 0, i32 0, i32 0, i32 0
  %494 = load i8*, i8** %493, align 8, !noalias !7
  br label %495

495:                                              ; preds = %492, %489, %484
  %496 = phi i8* [ %494, %492 ], [ %491, %489 ], [ null, %484 ]
  %497 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8, !noalias !7
  %498 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %497, i64* %498, align 8, !alias.scope !7
  %499 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* %496, i8** %499, align 8, !alias.scope !7
  br label %518

500:                                              ; preds = %478
  br i1 %483, label %512, label %501

501:                                              ; preds = %500
  %502 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %12, i64 0, i32 0, i32 0, i32 0
  %503 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %502, align 8, !noalias !7
  %504 = icmp eq %"class.WTF::StringImpl"* %503, null
  br i1 %504, label %508, label %505

505:                                              ; preds = %501
  %506 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %503, i64 1
  %507 = bitcast %"class.WTF::StringImpl"* %506 to i16*
  br label %512

508:                                              ; preds = %501
  %509 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2, i32 1
  %510 = bitcast %union.anon* %509 to i16**
  %511 = load i16*, i16** %510, align 8, !noalias !7
  br label %512

512:                                              ; preds = %508, %505, %500
  %513 = phi i16* [ %511, %508 ], [ %507, %505 ], [ null, %500 ]
  %514 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl12empty16_bit_E to i64*), align 8, !noalias !7
  %515 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %514, i64* %515, align 8, !alias.scope !7
  %516 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %517 = bitcast i8** %516 to i16**
  store i16* %513, i16** %517, align 8, !alias.scope !7
  br label %518

518:                                              ; preds = %495, %512
  %519 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %482, i32* %519, align 8, !alias.scope !7
  %520 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm8EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %10, [8 x i8]* nonnull dereferenceable(8) @.str.1)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %479) #8
  %521 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 0
  br i1 %520, label %522, label %523

522:                                              ; preds = %518
  store i32 0, i32* %521, align 8
  br label %524

523:                                              ; preds = %518
  store i32 9, i32* %521, align 8
  br label %524

524:                                              ; preds = %522, %523, %477
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* %12) #8
  %525 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* %525) #8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* dereferenceable(24), [7 x i8]* dereferenceable(7)) local_unnamed_addr #5 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 6
  br i1 %5, label %6, label %75

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %42, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %20, %26
  br i1 %27, label %28, label %75

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %141, label %75

42:                                               ; preds = %6
  %43 = bitcast i8** %13 to i16**
  %44 = load i16*, i16** %43, align 8
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, -65
  %47 = icmp ult i16 %46, 26
  %48 = zext i1 %47 to i16
  %49 = shl nuw nsw i16 %48, 5
  %50 = or i16 %49, %45
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 0
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %51, %57
  br i1 %58, label %59, label %75

59:                                               ; preds = %42
  %60 = getelementptr inbounds i16, i16* %44, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, -65
  %63 = icmp ult i16 %62, 26
  %64 = zext i1 %63 to i16
  %65 = shl nuw nsw i16 %64, 5
  %66 = or i16 %65, %61
  %67 = zext i16 %66 to i32
  %68 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp eq i32 %67, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %183, %14, %28, %141, %155, %169, %42, %59, %77, %93, %109, %2
  %76 = phi i1 [ false, %2 ], [ false, %42 ], [ false, %59 ], [ false, %77 ], [ false, %93 ], [ false, %109 ], [ false, %14 ], [ false, %28 ], [ false, %141 ], [ false, %155 ], [ false, %169 ], [ %196, %183 ]
  ret i1 %76

77:                                               ; preds = %59
  %78 = getelementptr inbounds i16, i16* %44, i64 2
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %79, -65
  %81 = icmp ult i16 %80, 26
  %82 = zext i1 %81 to i16
  %83 = shl nuw nsw i16 %82, 5
  %84 = or i16 %83, %79
  %85 = zext i16 %84 to i32
  %86 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 2
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %85, %91
  br i1 %92, label %93, label %75

93:                                               ; preds = %77
  %94 = getelementptr inbounds i16, i16* %44, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, -65
  %97 = icmp ult i16 %96, 26
  %98 = zext i1 %97 to i16
  %99 = shl nuw nsw i16 %98, 5
  %100 = or i16 %99, %95
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %101, %107
  br i1 %108, label %109, label %75

109:                                              ; preds = %93
  %110 = getelementptr inbounds i16, i16* %44, i64 4
  %111 = load i16, i16* %110, align 2
  %112 = add i16 %111, -65
  %113 = icmp ult i16 %112, 26
  %114 = zext i1 %113 to i16
  %115 = shl nuw nsw i16 %114, 5
  %116 = or i16 %115, %111
  %117 = zext i16 %116 to i32
  %118 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 4
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i64
  %121 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = sext i8 %122 to i32
  %124 = icmp eq i32 %117, %123
  br i1 %124, label %125, label %75

125:                                              ; preds = %109
  %126 = getelementptr inbounds i16, i16* %44, i64 5
  %127 = load i16, i16* %126, align 2
  %128 = add i16 %127, -65
  %129 = icmp ult i16 %128, 26
  %130 = zext i1 %129 to i16
  %131 = shl nuw nsw i16 %130, 5
  %132 = or i16 %131, %127
  %133 = zext i16 %132 to i32
  %134 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 5
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i64
  %137 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = sext i8 %138 to i32
  %140 = icmp eq i32 %133, %139
  ret i1 %140

141:                                              ; preds = %28
  %142 = getelementptr inbounds i8, i8* %15, i64 2
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i64
  %145 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 2
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i64
  %151 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = sext i8 %152 to i32
  %154 = icmp eq i32 %147, %153
  br i1 %154, label %155, label %75

155:                                              ; preds = %141
  %156 = getelementptr inbounds i8, i8* %15, i64 3
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i64
  %159 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %158
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 3
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i64
  %165 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = sext i8 %166 to i32
  %168 = icmp eq i32 %161, %167
  br i1 %168, label %169, label %75

169:                                              ; preds = %155
  %170 = getelementptr inbounds i8, i8* %15, i64 4
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i64
  %173 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 4
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i64
  %179 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = sext i8 %180 to i32
  %182 = icmp eq i32 %175, %181
  br i1 %182, label %183, label %75

183:                                              ; preds = %169
  %184 = getelementptr inbounds i8, i8* %15, i64 5
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i64
  %187 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %186
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 5
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i64
  %193 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = sext i8 %194 to i32
  %196 = icmp eq i32 %189, %195
  br label %75
}

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #2

declare i32 @_ZNK5blink15SegmentedString11CurrentLineEv(%"class.blink::SegmentedString"*) local_unnamed_addr #2

declare i32 @_ZNK5blink15SegmentedString13CurrentColumnEv(%"class.blink::SegmentedString"*) local_unnamed_addr #2

declare %"class.blink::PreloadRequest"* @_ZN5blink14PreloadRequest14CreateIfNeededERKN3WTF6StringERKNS1_12TextPositionES4_RKNS_4KURLENS_12ResourceTypeEN7network5mojom14ReferrerPolicyENS0_14ReferrerSourceENS_15ResourceFetcher10IsImageSetEPKNS0_13ExclusionInfoERKNS_15FetchParameters13ResourceWidthERKNS_22ClientHintsPreferencesENS0_11RequestTypeE(%"class.WTF::String"* dereferenceable(8), %"class.WTF::TextPosition"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8), %"class.blink::KURL"* dereferenceable(112), i8 zeroext, i32, i32, i32, %"class.blink::PreloadRequest::ExclusionInfo"*, %"struct.blink::FetchParameters::ResourceWidth"* dereferenceable(8), %"class.blink::ClientHintsPreferences"* dereferenceable(16), i32) local_unnamed_addr #2

declare void @_ZN5blink22ClientHintsPreferencesC1Ev(%"class.blink::ClientHintsPreferences"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm8EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* dereferenceable(24), [8 x i8]* dereferenceable(8)) local_unnamed_addr #5 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 7
  br i1 %5, label %6, label %75

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %42, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %20, %26
  br i1 %27, label %28, label %75

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %157, label %75

42:                                               ; preds = %6
  %43 = bitcast i8** %13 to i16**
  %44 = load i16*, i16** %43, align 8
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, -65
  %47 = icmp ult i16 %46, 26
  %48 = zext i1 %47 to i16
  %49 = shl nuw nsw i16 %48, 5
  %50 = or i16 %49, %45
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 0
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %51, %57
  br i1 %58, label %59, label %75

59:                                               ; preds = %42
  %60 = getelementptr inbounds i16, i16* %44, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, -65
  %63 = icmp ult i16 %62, 26
  %64 = zext i1 %63 to i16
  %65 = shl nuw nsw i16 %64, 5
  %66 = or i16 %65, %61
  %67 = zext i16 %66 to i32
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp eq i32 %67, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %213, %14, %28, %157, %171, %185, %199, %42, %59, %77, %93, %109, %125, %2
  %76 = phi i1 [ false, %2 ], [ false, %42 ], [ false, %59 ], [ false, %77 ], [ false, %93 ], [ false, %109 ], [ false, %125 ], [ false, %14 ], [ false, %28 ], [ false, %157 ], [ false, %171 ], [ false, %185 ], [ false, %199 ], [ %226, %213 ]
  ret i1 %76

77:                                               ; preds = %59
  %78 = getelementptr inbounds i16, i16* %44, i64 2
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %79, -65
  %81 = icmp ult i16 %80, 26
  %82 = zext i1 %81 to i16
  %83 = shl nuw nsw i16 %82, 5
  %84 = or i16 %83, %79
  %85 = zext i16 %84 to i32
  %86 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 2
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %85, %91
  br i1 %92, label %93, label %75

93:                                               ; preds = %77
  %94 = getelementptr inbounds i16, i16* %44, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, -65
  %97 = icmp ult i16 %96, 26
  %98 = zext i1 %97 to i16
  %99 = shl nuw nsw i16 %98, 5
  %100 = or i16 %99, %95
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %101, %107
  br i1 %108, label %109, label %75

109:                                              ; preds = %93
  %110 = getelementptr inbounds i16, i16* %44, i64 4
  %111 = load i16, i16* %110, align 2
  %112 = add i16 %111, -65
  %113 = icmp ult i16 %112, 26
  %114 = zext i1 %113 to i16
  %115 = shl nuw nsw i16 %114, 5
  %116 = or i16 %115, %111
  %117 = zext i16 %116 to i32
  %118 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 4
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i64
  %121 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = sext i8 %122 to i32
  %124 = icmp eq i32 %117, %123
  br i1 %124, label %125, label %75

125:                                              ; preds = %109
  %126 = getelementptr inbounds i16, i16* %44, i64 5
  %127 = load i16, i16* %126, align 2
  %128 = add i16 %127, -65
  %129 = icmp ult i16 %128, 26
  %130 = zext i1 %129 to i16
  %131 = shl nuw nsw i16 %130, 5
  %132 = or i16 %131, %127
  %133 = zext i16 %132 to i32
  %134 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 5
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i64
  %137 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = sext i8 %138 to i32
  %140 = icmp eq i32 %133, %139
  br i1 %140, label %141, label %75

141:                                              ; preds = %125
  %142 = getelementptr inbounds i16, i16* %44, i64 6
  %143 = load i16, i16* %142, align 2
  %144 = add i16 %143, -65
  %145 = icmp ult i16 %144, 26
  %146 = zext i1 %145 to i16
  %147 = shl nuw nsw i16 %146, 5
  %148 = or i16 %147, %143
  %149 = zext i16 %148 to i32
  %150 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 6
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i64
  %153 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = sext i8 %154 to i32
  %156 = icmp eq i32 %149, %155
  ret i1 %156

157:                                              ; preds = %28
  %158 = getelementptr inbounds i8, i8* %15, i64 2
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i64
  %161 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 2
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i64
  %167 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %166
  %168 = load i8, i8* %167, align 1
  %169 = sext i8 %168 to i32
  %170 = icmp eq i32 %163, %169
  br i1 %170, label %171, label %75

171:                                              ; preds = %157
  %172 = getelementptr inbounds i8, i8* %15, i64 3
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i64
  %175 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %174
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 3
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i64
  %181 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %180
  %182 = load i8, i8* %181, align 1
  %183 = sext i8 %182 to i32
  %184 = icmp eq i32 %177, %183
  br i1 %184, label %185, label %75

185:                                              ; preds = %171
  %186 = getelementptr inbounds i8, i8* %15, i64 4
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i64
  %189 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i32
  %192 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 4
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i64
  %195 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %194
  %196 = load i8, i8* %195, align 1
  %197 = sext i8 %196 to i32
  %198 = icmp eq i32 %191, %197
  br i1 %198, label %199, label %75

199:                                              ; preds = %185
  %200 = getelementptr inbounds i8, i8* %15, i64 5
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i64
  %203 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %202
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 5
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i64
  %209 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %208
  %210 = load i8, i8* %209, align 1
  %211 = sext i8 %210 to i32
  %212 = icmp eq i32 %205, %211
  br i1 %212, label %213, label %75

213:                                              ; preds = %199
  %214 = getelementptr inbounds i8, i8* %15, i64 6
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i64
  %217 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i32
  %220 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i64 0, i64 6
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i64
  %223 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %222
  %224 = load i8, i8* %223, align 1
  %225 = sext i8 %224 to i32
  %226 = icmp eq i32 %219, %225
  br label %75
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"*, i32, i32) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17CSSPreloadScanner8TokenizeEDsRKNS_15SegmentedStringE(%"class.blink::CSSPreloadScanner"*, i16 zeroext, %"class.blink::SegmentedString"* dereferenceable(88)) local_unnamed_addr #5 comdat align 2 {
  %4 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %63 [
    i32 0, label %6
    i32 1, label %13
    i32 2, label %17
    i32 3, label %20
    i32 4, label %23
    i32 5, label %31
    i32 6, label %40
    i32 7, label %48
    i32 8, label %56
  ]

6:                                                ; preds = %3
  %7 = icmp ult i16 %1, 33
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  switch i16 %1, label %12 [
    i16 32, label %63
    i16 10, label %63
    i16 9, label %63
    i16 13, label %63
    i16 12, label %63
  ]

9:                                                ; preds = %6
  switch i16 %1, label %12 [
    i16 64, label %10
    i16 47, label %11
  ]

10:                                               ; preds = %9
  store i32 4, i32* %4, align 8
  br label %63

11:                                               ; preds = %9
  store i32 1, i32* %4, align 8
  br label %63

12:                                               ; preds = %8, %9
  store i32 9, i32* %4, align 8
  br label %63

13:                                               ; preds = %3
  %14 = icmp eq i16 %1, 42
  br i1 %14, label %15, label %16

15:                                               ; preds = %13
  store i32 2, i32* %4, align 8
  br label %63

16:                                               ; preds = %13
  store i32 0, i32* %4, align 8
  br label %63

17:                                               ; preds = %3
  %18 = icmp eq i16 %1, 42
  br i1 %18, label %19, label %63

19:                                               ; preds = %17
  store i32 3, i32* %4, align 8
  br label %63

20:                                               ; preds = %3
  switch i16 %1, label %22 [
    i16 42, label %63
    i16 47, label %21
  ]

21:                                               ; preds = %20
  store i32 0, i32* %4, align 8
  br label %63

22:                                               ; preds = %20
  store i32 2, i32* %4, align 8
  br label %63

23:                                               ; preds = %3
  %24 = and i16 %1, -33
  %25 = add i16 %24, -65
  %26 = icmp ult i16 %25, 26
  br i1 %26, label %27, label %30

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2
  tail call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* %28) #8
  %29 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3
  tail call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* %29) #8
  tail call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* %28, i16 zeroext %1)
  store i32 5, i32* %4, align 8
  br label %63

30:                                               ; preds = %23
  store i32 0, i32* %4, align 8
  br label %63

31:                                               ; preds = %3
  %32 = icmp ult i16 %1, 33
  br i1 %32, label %33, label %35

33:                                               ; preds = %31
  switch i16 %1, label %38 [
    i16 32, label %34
    i16 10, label %34
    i16 9, label %34
    i16 13, label %34
    i16 12, label %34
  ]

34:                                               ; preds = %33, %33, %33, %33, %33
  store i32 6, i32* %4, align 8
  br label %63

35:                                               ; preds = %31
  %36 = icmp eq i16 %1, 59
  br i1 %36, label %37, label %38

37:                                               ; preds = %35
  store i32 0, i32* %4, align 8
  br label %63

38:                                               ; preds = %33, %35
  %39 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 2
  tail call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* %39, i16 zeroext %1)
  br label %63

40:                                               ; preds = %3
  %41 = icmp ult i16 %1, 33
  br i1 %41, label %42, label %43

42:                                               ; preds = %40
  switch i16 %1, label %46 [
    i16 32, label %63
    i16 10, label %63
    i16 9, label %63
    i16 13, label %63
    i16 12, label %63
  ]

43:                                               ; preds = %40
  switch i16 %1, label %46 [
    i16 59, label %44
    i16 123, label %45
  ]

44:                                               ; preds = %43
  store i32 0, i32* %4, align 8
  br label %63

45:                                               ; preds = %43
  store i32 9, i32* %4, align 8
  br label %63

46:                                               ; preds = %42, %43
  store i32 7, i32* %4, align 8
  %47 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3
  tail call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* %47, i16 zeroext %1)
  br label %63

48:                                               ; preds = %3
  %49 = icmp ult i16 %1, 33
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  switch i16 %1, label %52 [
    i16 32, label %51
    i16 10, label %51
    i16 9, label %51
    i16 13, label %51
    i16 12, label %51
  ]

51:                                               ; preds = %50, %50, %50, %50, %50
  store i32 8, i32* %4, align 8
  br label %63

52:                                               ; preds = %50, %48
  %53 = getelementptr inbounds %"class.blink::CSSPreloadScanner", %"class.blink::CSSPreloadScanner"* %0, i64 0, i32 3
  tail call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* %53, i16 zeroext %1)
  %54 = tail call zeroext i1 @_ZNK5blink17CSSPreloadScanner20HasFinishedRuleValueEv(%"class.blink::CSSPreloadScanner"* %0)
  br i1 %54, label %55, label %63

55:                                               ; preds = %52
  store i32 8, i32* %4, align 8
  br label %63

56:                                               ; preds = %3
  %57 = icmp ult i16 %1, 33
  br i1 %57, label %58, label %59

58:                                               ; preds = %56
  switch i16 %1, label %62 [
    i16 32, label %63
    i16 10, label %63
    i16 9, label %63
    i16 13, label %63
    i16 12, label %63
  ]

59:                                               ; preds = %56
  switch i16 %1, label %62 [
    i16 59, label %60
    i16 123, label %61
  ]

60:                                               ; preds = %59
  tail call void @_ZN5blink17CSSPreloadScanner8EmitRuleERKNS_15SegmentedStringE(%"class.blink::CSSPreloadScanner"* %0, %"class.blink::SegmentedString"* dereferenceable(88) %2)
  br label %63

61:                                               ; preds = %59
  store i32 9, i32* %4, align 8
  br label %63

62:                                               ; preds = %58, %59
  store i32 0, i32* %4, align 8
  br label %63

63:                                               ; preds = %58, %58, %58, %58, %58, %42, %42, %42, %42, %42, %8, %8, %8, %8, %8, %20, %60, %62, %61, %51, %55, %52, %44, %46, %45, %34, %38, %37, %27, %30, %21, %22, %17, %19, %15, %16, %10, %12, %11, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"*, i16 zeroext) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca i8, align 1
  %4 = alloca i16, align 2
  store i16 %1, i16* %4, align 2
  %5 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 4, !range !2
  %7 = icmp ne i8 %6, 0
  %8 = icmp ult i16 %1, 256
  %9 = and i1 %8, %7
  br i1 %9, label %10, label %35

10:                                               ; preds = %2
  %11 = trunc i16 %1 to i8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3)
  store i8 %11, i8* %3, align 1
  %12 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %13 = load i8, i8* %12, align 1, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  tail call void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"* %0, i32 1) #8
  br label %16

16:                                               ; preds = %15, %10
  %17 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0
  %18 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %30, label %23, !prof !6

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %17, i64 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = zext i32 %19 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  store i8 %11, i8* %27, align 1
  %28 = load i32, i32* %18, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %18, align 4
  br label %31

30:                                               ; preds = %16
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector"* %17, i8* nonnull dereferenceable(1) %3) #8
  br label %31

31:                                               ; preds = %23, %30
  %32 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, 1
  store i32 %34, i32* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3)
  br label %62

35:                                               ; preds = %2
  %36 = icmp eq i8 %6, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %35
  %38 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %39 = load i8, i8* %38, align 1, !range !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %37, %35
  tail call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* %0, i32 1) #8
  br label %42

42:                                               ; preds = %37, %41
  %43 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1
  %44 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %45, %47
  br i1 %48, label %56, label %49, !prof !6

49:                                               ; preds = %42
  %50 = bitcast %union.anon* %43 to i16**
  %51 = load i16*, i16** %50, align 8
  %52 = zext i32 %45 to i64
  %53 = getelementptr inbounds i16, i16* %51, i64 %52
  store i16 %1, i16* %53, align 2
  %54 = load i32, i32* %44, align 4
  %55 = add i32 %54, 1
  store i32 %55, i32* %44, align 4
  br label %58

56:                                               ; preds = %42
  %57 = bitcast %union.anon* %43 to %"class.WTF::Vector.1"*
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.1"* %57, i16* nonnull dereferenceable(2) %4) #8
  br label %58

58:                                               ; preds = %49, %56
  %59 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %60 = load i32, i32* %59, align 8
  %61 = add i32 %60, 1
  store i32 %61, i32* %59, align 8
  br label %62

62:                                               ; preds = %58, %31
  ret void
}

declare void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector"*, i8* dereferenceable(1)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = icmp ugt i8* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #8
  %14 = load i8*, i8** %6, align 8
  br label %21

15:                                               ; preds = %9
  %16 = ptrtoint i8* %1 to i64
  %17 = ptrtoint i8* %7 to i64
  %18 = sub i64 %16, %17
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #8
  %19 = load i8*, i8** %6, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 %18
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ %14, %13 ], [ %19, %15 ]
  %23 = phi i8* [ %1, %13 ], [ %20, %15 ]
  %24 = load i32, i32* %3, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  %27 = load i8, i8* %23, align 1
  store i8 %27, i8* %26, align 1
  %28 = load i32, i32* %3, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #8
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i8* %15, i8* %16) #8
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #8
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #8
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %50, !prof !10

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %49

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 16
  br i1 %35, label %36, label %43

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %37) #8
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #8
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = trunc i64 %38 to i32
  br label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %45 = ptrtoint i8* %44 to i64
  %46 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %45, i64* %46 monotonic, align 8
  br label %47

47:                                               ; preds = %43, %36
  %48 = phi i32 [ 16, %43 ], [ %42, %36 ]
  store i32 %48, i32* %6, align 8
  br label %50

49:                                               ; preds = %30
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %27) #8
  br label %50

50:                                               ; preds = %23, %47, %49
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp ult i32 %1, 17
  br i1 %3, label %4, label %26

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = icmp eq i8* %8, %6
  %10 = or i1 %7, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = ptrtoint i8* %8 to i64
  %13 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %14, align 8
  br label %51

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  %19 = ptrtoint i8* %8 to i64
  %20 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %21, align 8
  %22 = icmp eq i8* %8, null
  br i1 %22, label %25, label %23, !prof !6

23:                                               ; preds = %15
  %24 = zext i32 %17 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %8, i8* nonnull align 1 %6, i64 %24, i1 false) #8
  br label %25

25:                                               ; preds = %23, %15
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"* %18, i8* nonnull %6) #8
  br label %51

26:                                               ; preds = %2
  %27 = zext i32 %1 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %27) #8
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #8
  %30 = ptrtoint i8* %29 to i64
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %29, null
  %34 = icmp ne i8* %32, null
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %41, !prof !10

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %29, i8* nonnull align 1 %32, i64 %39, i1 false) #8
  %40 = load i8*, i8** %31, align 8
  br label %41

41:                                               ; preds = %26, %36
  %42 = phi i8* [ %32, %26 ], [ %40, %36 ]
  %43 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %44 = icmp eq i8* %43, %42
  br i1 %44, label %47, label %45, !prof !10

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"* %46, i8* %42) #8
  br label %47

47:                                               ; preds = %41, %45
  %48 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %48 monotonic, align 8
  %49 = trunc i64 %28 to i32
  %50 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %49, i32* %50, align 8
  br label %51

51:                                               ; preds = %25, %47, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.6, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #8
  ret i64 %20
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"*, i8*) local_unnamed_addr #6 comdat align 2 {
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1) #8
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.1"*, i16* dereferenceable(2)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp ugt i16* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i16, i16* %7, i64 %10
  %12 = icmp ugt i16* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1"* %0, i32 %5) #8
  %14 = load i16*, i16** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i16* %1 to i64
  %17 = ptrtoint i16* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 1
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1"* %0, i32 %5) #8
  %20 = load i16*, i16** %6, align 8
  %21 = getelementptr inbounds i16, i16* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i16* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i16* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i16, i16* %23, i64 %26
  %28 = load i16, i16* %24, align 2
  store i16 %28, i16* %27, align 2
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #8
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i8* %15, i8* %16) #8
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #8
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #8
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !10

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = icmp eq i16* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 8
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %37) #8
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #8
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 1
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 8, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.1"* %0, i32 %27) #8
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.1"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp ult i32 %1, 9
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = icmp eq i16* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i16*
  %10 = icmp eq i16* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !6

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i16* %6 to i8*
  %27 = shl nuw nsw i64 %25, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %8, i8* nonnull align 2 %26, i64 %27, i1 false) #8
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.2"* %19, i16* nonnull %6) #8
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %30) #8
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #8
  %33 = lshr i64 %31, 1
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i16*, i16** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i16* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !10

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i16* %36 to i8*
  %45 = shl nuw nsw i64 %43, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %32, i8* nonnull align 2 %44, i64 %45, i1 false) #8
  %46 = load i16*, i16** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i16* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i16*
  %51 = icmp eq i16* %48, %50
  br i1 %51, label %54, label %52, !prof !10

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.2"* %53, i16* %48) #8
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.6, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.2"*, i16*) local_unnamed_addr #6 comdat align 2 {
  %3 = bitcast i16* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink14PreloadRequestD2Ev(%"class.blink::PreloadRequest"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::PreloadRequest", %"class.blink::PreloadRequest"* %0, i64 0, i32 17, i32 0, i32 0
  %3 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %2, align 8
  %4 = icmp eq %"struct.std::__1::pair"* %3, null
  br i1 %4, label %37, label %5, !prof !10

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::PreloadRequest", %"class.blink::PreloadRequest"* %0, i64 0, i32 17, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %35, label %9

9:                                                ; preds = %5
  %10 = zext i32 %7 to i64
  br label %11

11:                                               ; preds = %32, %9
  %12 = phi i64 [ 0, %9 ], [ %33, %32 ]
  %13 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %3, i64 %12
  %14 = bitcast %"struct.std::__1::pair"* %13 to i8**
  %15 = load i8*, i8** %14, align 8
  %16 = bitcast i8* %15 to %"class.WTF::StringImpl"*
  %17 = ptrtoint i8* %15 to i64
  switch i64 %17, label %18 [
    i64 -1, label %32
    i64 0, label %32
  ]

18:                                               ; preds = %11
  %19 = getelementptr inbounds i8, i8* %15, i64 8
  %20 = bitcast i8* %19 to i32*
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = and i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = bitcast i8* %15 to i32*
  %25 = load i32, i32* %24, align 4
  br i1 %23, label %26, label %28

26:                                               ; preds = %18
  %27 = add i32 %25, -1
  store i32 %27, i32* %24, align 4
  br label %28

28:                                               ; preds = %26, %18
  %29 = phi i32 [ %27, %26 ], [ %25, %18 ]
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %28
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %16) #8
  br label %32

32:                                               ; preds = %31, %28, %11, %11
  %33 = add nuw nsw i64 %12, 1
  %34 = icmp eq i64 %33, %10
  br i1 %34, label %35, label %11

35:                                               ; preds = %32, %5
  %36 = bitcast %"struct.std::__1::pair"* %3 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %36) #8
  store %"struct.std::__1::pair"* null, %"struct.std::__1::pair"** %2, align 8
  br label %37

37:                                               ; preds = %1, %35
  %38 = getelementptr inbounds %"class.blink::PreloadRequest", %"class.blink::PreloadRequest"* %0, i64 0, i32 10, i32 0, i32 0
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %40 = icmp eq %"class.WTF::StringImpl"* %39, null
  br i1 %40, label %54, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  br i1 %45, label %48, label %50

48:                                               ; preds = %41
  %49 = add i32 %47, -1
  store i32 %49, i32* %46, align 4
  br label %50

50:                                               ; preds = %48, %41
  %51 = phi i32 [ %49, %48 ], [ %47, %41 ]
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %50
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %39) #8
  br label %54

54:                                               ; preds = %37, %50, %53
  %55 = getelementptr inbounds %"class.blink::PreloadRequest", %"class.blink::PreloadRequest"* %0, i64 0, i32 4, i32 0, i32 0
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %57 = icmp eq %"class.WTF::StringImpl"* %56, null
  br i1 %57, label %71, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load atomic i32, i32* %59 monotonic, align 4
  %61 = and i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  br i1 %62, label %65, label %67

65:                                               ; preds = %58
  %66 = add i32 %64, -1
  store i32 %66, i32* %63, align 4
  br label %67

67:                                               ; preds = %65, %58
  %68 = phi i32 [ %66, %65 ], [ %64, %58 ]
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %67
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %56) #8
  br label %71

71:                                               ; preds = %54, %67, %70
  %72 = getelementptr inbounds %"class.blink::PreloadRequest", %"class.blink::PreloadRequest"* %0, i64 0, i32 3
  tail call void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"* %72) #8
  %73 = getelementptr inbounds %"class.blink::PreloadRequest", %"class.blink::PreloadRequest"* %0, i64 0, i32 2, i32 0, i32 0
  %74 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %73, align 8
  %75 = icmp eq %"class.WTF::StringImpl"* %74, null
  br i1 %75, label %89, label %76

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = and i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %82 = load i32, i32* %81, align 4
  br i1 %80, label %83, label %85

83:                                               ; preds = %76
  %84 = add i32 %82, -1
  store i32 %84, i32* %81, align 4
  br label %85

85:                                               ; preds = %83, %76
  %86 = phi i32 [ %84, %83 ], [ %82, %76 ]
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %74) #8
  br label %89

89:                                               ; preds = %71, %85, %88
  %90 = getelementptr inbounds %"class.blink::PreloadRequest", %"class.blink::PreloadRequest"* %0, i64 0, i32 0, i32 0, i32 0
  %91 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %90, align 8
  %92 = icmp eq %"class.WTF::StringImpl"* %91, null
  br i1 %92, label %106, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %95 = load atomic i32, i32* %94 monotonic, align 4
  %96 = and i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 0
  %99 = load i32, i32* %98, align 4
  br i1 %97, label %100, label %102

100:                                              ; preds = %93
  %101 = add i32 %99, -1
  store i32 %101, i32* %98, align 4
  br label %102

102:                                              ; preds = %100, %93
  %103 = phi i32 [ %101, %100 ], [ %99, %93 ]
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %102
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %91) #8
  br label %106

106:                                              ; preds = %89, %102, %105
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"*) unnamed_addr #7

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #7

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINSt3__110unique_ptrIN5blink14PreloadRequestENS1_14default_deleteIS4_EEEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS7_EEvOT_(%"class.WTF::Vector.6"*, %"class.std::__1::unique_ptr"* dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %6, align 8
  %8 = icmp ugt %"class.std::__1::unique_ptr"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %7, i64 %10
  %12 = icmp ugt %"class.std::__1::unique_ptr"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !10

24:                                               ; preds = %13
  %25 = icmp eq %"class.std::__1::unique_ptr"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__110unique_ptrIN5blink14PreloadRequestENS2_14default_deleteIS5_EEEEEEmm(i64 %26) #8
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([141 x i8], [141 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__110unique_ptrIN5blink14PreloadRequestENS1_14default_deleteIS4_EEEEEEPKcv, i64 0, i64 0)) #8
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.std::__1::unique_ptr"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.std::__1::unique_ptr"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.std::__1::unique_ptr"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !10

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #8
  %47 = bitcast %"class.WTF::Vector.6"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #8
  %51 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.std::__1::unique_ptr"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.std::__1::unique_ptr"* %1 to i64
  %56 = ptrtoint %"class.std::__1::unique_ptr"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !10

69:                                               ; preds = %54
  %70 = icmp eq %"class.std::__1::unique_ptr"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__110unique_ptrIN5blink14PreloadRequestENS2_14default_deleteIS5_EEEEEEmm(i64 %71) #8
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([141 x i8], [141 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__110unique_ptrIN5blink14PreloadRequestENS1_14default_deleteIS4_EEEEEEPKcv, i64 0, i64 0)) #8
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.std::__1::unique_ptr"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.std::__1::unique_ptr"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !10

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #8
  %87 = bitcast %"class.WTF::Vector.6"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #8
  %91 = bitcast %"class.WTF::Vector.6"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.std::__1::unique_ptr"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.std::__1::unique_ptr"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.std::__1::unique_ptr"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.std::__1::unique_ptr"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %100, i64 %103
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %101, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr"* %101 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.blink::PreloadRequest"* null, %"class.blink::PreloadRequest"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr"* %104 to i64*
  store i64 %107, i64* %108, align 8
  %109 = load i32, i32* %3, align 4
  %110 = add i32 %109, 1
  store i32 %110, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__110unique_ptrIN5blink14PreloadRequestENS2_14default_deleteIS5_EEEEEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.6, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK3WTF13StringBuildercvNS_10StringViewEEv: argument 0"}
!5 = distinct !{!5, !"_ZNK3WTF13StringBuildercvNS_10StringViewEEv"}
!6 = !{!"branch_weights", i32 1, i32 2000}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK3WTF13StringBuildercvNS_10StringViewEEv: argument 0"}
!9 = distinct !{!9, !"_ZNK3WTF13StringBuildercvNS_10StringViewEEv"}
!10 = !{!"branch_weights", i32 2000, i32 1}
