; ModuleID = '../../net/quic/properties_based_quic_server_info.cc'
source_filename = "../../net/quic/properties_based_quic_server_info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::PropertiesBasedQuicServerInfo" = type { %"class.net::QuicServerInfo", %"class.net::NetworkIsolationKey", %"class.net::HttpServerProperties"* }
%"class.net::QuicServerInfo" = type { i32 (...)**, %"struct.net::QuicServerInfo::State", %"class.quic::QuicServerId" }
%"struct.net::QuicServerInfo::State" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::basic_string" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.quic::QuicServerId" = type <{ %"class.std::__1::basic_string", i16, i8, [5 x i8] }>
%"class.net::NetworkIsolationKey" = type { i8, %"class.absl::optional", %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.6 }
%union.anon.6 = type { %"class.net::SchemefulSite" }
%"class.net::SchemefulSite" = type { %"class.url::Origin" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.7" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional.7" = type { %"class.absl::optional_internal::optional_data.8" }
%"class.absl::optional_internal::optional_data.8" = type { %"class.absl::optional_internal::optional_data_base.9" }
%"class.absl::optional_internal::optional_data_base.9" = type { %"class.absl::optional_internal::optional_data_dtor_base.10" }
%"class.absl::optional_internal::optional_data_dtor_base.10" = type { i8, %union.anon.11 }
%union.anon.11 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.net::HttpServerProperties" = type { %"class.net::BrokenAlternativeServices::Delegate", %"class.base::TickClock"*, %"class.base::Clock"*, i8, i8, i8, %"class.std::__1::unique_ptr", %"class.net::HttpServerProperties::ServerInfoMap", %"class.net::BrokenAlternativeServices", %"class.net::IPAddress", %"class.base::flat_map", %"class.std::__1::vector", %"class.base::MRUCache.88", %"class.base::flat_map.108", i64, %"class.base::OneShotTimer" }
%"class.net::BrokenAlternativeServices::Delegate" = type { i32 (...)** }
%"class.base::TickClock" = type opaque
%"class.base::Clock" = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.net::HttpServerPropertiesManager"* }
%"class.net::HttpServerPropertiesManager" = type opaque
%"class.net::HttpServerProperties::ServerInfoMap" = type { %"class.base::MRUCache" }
%"class.base::MRUCache" = type { %"class.base::MRUCacheBase" }
%"class.base::MRUCacheBase" = type { i32 (...)**, %"class.std::__1::list", %"class.std::__1::map", i64 }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.15" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.20", %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"class.net::BrokenAlternativeServices" = type { %"class.net::BrokenAlternativeServices::Delegate"*, %"class.base::TickClock"*, %"class.std::__1::list.27", %"class.std::__1::map.34", %"class.std::__1::set", %"class.net::RecentlyBrokenAlternativeServices", %"class.base::OneShotTimer", %"class.base::WeakPtrFactory.80" }
%"class.std::__1::list.27" = type { %"class.std::__1::__list_imp.28" }
%"class.std::__1::__list_imp.28" = type { %"struct.std::__1::__list_node_base.29", %"class.std::__1::__compressed_pair.30" }
%"struct.std::__1::__list_node_base.29" = type { %"struct.std::__1::__list_node_base.29"*, %"struct.std::__1::__list_node_base.29"* }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"class.std::__1::map.34" = type { %"class.std::__1::__tree.35" }
%"class.std::__1::__tree.35" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.36", %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"class.std::__1::set" = type { %"class.std::__1::__tree.45" }
%"class.std::__1::__tree.45" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.46", %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"class.net::RecentlyBrokenAlternativeServices" = type { %"class.base::MRUCache.52" }
%"class.base::MRUCache.52" = type { %"class.base::MRUCacheBase.53" }
%"class.base::MRUCacheBase.53" = type { i32 (...)**, %"class.std::__1::list.54", %"class.std::__1::map.61", i64 }
%"class.std::__1::list.54" = type { %"class.std::__1::__list_imp.55" }
%"class.std::__1::__list_imp.55" = type { %"struct.std::__1::__list_node_base.56", %"class.std::__1::__compressed_pair.57" }
%"struct.std::__1::__list_node_base.56" = type { %"struct.std::__1::__list_node_base.56"*, %"struct.std::__1::__list_node_base.56"* }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"class.std::__1::map.61" = type { %"class.std::__1::__tree.62" }
%"class.std::__1::__tree.62" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.63", %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"class.base::WeakPtrFactory.80" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.71 }
%class.scoped_refptr.71 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.72", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.72" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.70" }
%"struct.std::__1::__atomic_base.70" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.73" }
%"struct.std::__1::atomic.73" = type { %"struct.std::__1::__atomic_base.74" }
%"struct.std::__1::__atomic_base.74" = type { %"struct.std::__1::__atomic_base.75" }
%"struct.std::__1::__atomic_base.75" = type { %"struct.std::__1::__cxx_atomic_impl.76" }
%"struct.std::__1::__cxx_atomic_impl.76" = type { %"struct.std::__1::__cxx_atomic_base_impl.77" }
%"struct.std::__1::__cxx_atomic_base_impl.77" = type { i8 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.81" }
%"class.std::__1::vector.81" = type { %"class.std::__1::__vector_base.82" }
%"class.std::__1::__vector_base.82" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.83" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"struct.std::__1::pair"* }
%"class.base::MRUCache.88" = type { %"class.base::MRUCacheBase.89" }
%"class.base::MRUCacheBase.89" = type { i32 (...)**, %"class.std::__1::list.90", %"class.std::__1::map.97", i64 }
%"class.std::__1::list.90" = type { %"class.std::__1::__list_imp.91" }
%"class.std::__1::__list_imp.91" = type { %"struct.std::__1::__list_node_base.92", %"class.std::__1::__compressed_pair.93" }
%"struct.std::__1::__list_node_base.92" = type { %"struct.std::__1::__list_node_base.92"*, %"struct.std::__1::__list_node_base.92"* }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"class.std::__1::map.97" = type { %"class.std::__1::__tree.98" }
%"class.std::__1::__tree.98" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.99", %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"class.base::flat_map.108" = type { %"class.base::internal::flat_tree.109" }
%"class.base::internal::flat_tree.109" = type { %"class.std::__1::vector.110" }
%"class.std::__1::vector.110" = type { %"class.std::__1::__vector_base.111" }
%"class.std::__1::__vector_base.111" = type { %"struct.std::__1::pair.112"*, %"struct.std::__1::pair.112"*, %"class.std::__1::__compressed_pair.113" }
%"struct.std::__1::pair.112" = type opaque
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"struct.std::__1::pair.112"* }
%"class.base::OneShotTimer" = type { %"class.base::internal::TimerBase", %"class.base::OnceCallback" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory" }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.78 }
%class.scoped_refptr.78 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.79", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.79" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic.123", [4 x i8] }>
%"struct.std::__1::atomic.123" = type { %"struct.std::__1::__atomic_base.124" }
%"struct.std::__1::__atomic_base.124" = type { %"struct.std::__1::__atomic_base.125" }
%"struct.std::__1::__atomic_base.125" = type { %"struct.std::__1::__cxx_atomic_impl.126" }
%"struct.std::__1::__cxx_atomic_impl.126" = type { %"struct.std::__1::__cxx_atomic_base_impl.127" }
%"struct.std::__1::__cxx_atomic_base_impl.127" = type { i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZTVN3net29PropertiesBasedQuicServerInfoE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::PropertiesBasedQuicServerInfo"*)* @_ZN3net29PropertiesBasedQuicServerInfoD2Ev to i8*), i8* bitcast (void (%"class.net::PropertiesBasedQuicServerInfo"*)* @_ZN3net29PropertiesBasedQuicServerInfoD0Ev to i8*), i8* bitcast (i1 (%"class.net::PropertiesBasedQuicServerInfo"*)* @_ZN3net29PropertiesBasedQuicServerInfo4LoadEv to i8*), i8* bitcast (void (%"class.net::PropertiesBasedQuicServerInfo"*)* @_ZN3net29PropertiesBasedQuicServerInfo7PersistEv to i8*), i8* bitcast (i64 (%"class.net::PropertiesBasedQuicServerInfo"*)* @_ZNK3net29PropertiesBasedQuicServerInfo19EstimateMemoryUsageEv to i8*)] }, align 8
@.str = private unnamed_addr constant [53 x i8] c"Net.QuicDiskCache.FailureReason.PropertiesBasedCache\00", align 1
@_ZZN12_GLOBAL__N_127RecordQuicServerInfoFailureEN3net14QuicServerInfo13FailureReasonEE24atomic_histogram_pointer.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8

@_ZN3net29PropertiesBasedQuicServerInfoC1ERKN4quic12QuicServerIdERKNS_19NetworkIsolationKeyEPNS_20HttpServerPropertiesE = hidden unnamed_addr alias void (%"class.net::PropertiesBasedQuicServerInfo"*, %"class.quic::QuicServerId"*, %"class.net::NetworkIsolationKey"*, %"class.net::HttpServerProperties"*), void (%"class.net::PropertiesBasedQuicServerInfo"*, %"class.quic::QuicServerId"*, %"class.net::NetworkIsolationKey"*, %"class.net::HttpServerProperties"*)* @_ZN3net29PropertiesBasedQuicServerInfoC2ERKN4quic12QuicServerIdERKNS_19NetworkIsolationKeyEPNS_20HttpServerPropertiesE
@_ZN3net29PropertiesBasedQuicServerInfoD1Ev = hidden unnamed_addr alias void (%"class.net::PropertiesBasedQuicServerInfo"*), void (%"class.net::PropertiesBasedQuicServerInfo"*)* @_ZN3net29PropertiesBasedQuicServerInfoD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net29PropertiesBasedQuicServerInfoC2ERKN4quic12QuicServerIdERKNS_19NetworkIsolationKeyEPNS_20HttpServerPropertiesE(%"class.net::PropertiesBasedQuicServerInfo"*, %"class.quic::QuicServerId"* dereferenceable(32), %"class.net::NetworkIsolationKey"* dereferenceable(184), %"class.net::HttpServerProperties"*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 0
  tail call void @_ZN3net14QuicServerInfoC2ERKN4quic12QuicServerIdE(%"class.net::QuicServerInfo"* %5, %"class.quic::QuicServerId"* dereferenceable(32) %1) #6
  %6 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net29PropertiesBasedQuicServerInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 1
  tail call void @_ZN3net19NetworkIsolationKeyC1ERKS0_(%"class.net::NetworkIsolationKey"* %7, %"class.net::NetworkIsolationKey"* dereferenceable(184) %2) #6
  %8 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 2
  store %"class.net::HttpServerProperties"* %3, %"class.net::HttpServerProperties"** %8, align 8
  ret void
}

declare void @_ZN3net14QuicServerInfoC2ERKN4quic12QuicServerIdE(%"class.net::QuicServerInfo"*, %"class.quic::QuicServerId"* dereferenceable(32)) unnamed_addr #1

declare void @_ZN3net19NetworkIsolationKeyC1ERKS0_(%"class.net::NetworkIsolationKey"*, %"class.net::NetworkIsolationKey"* dereferenceable(184)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net29PropertiesBasedQuicServerInfoD2Ev(%"class.net::PropertiesBasedQuicServerInfo"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net29PropertiesBasedQuicServerInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 1
  tail call void @_ZN3net19NetworkIsolationKeyD1Ev(%"class.net::NetworkIsolationKey"* %3) #6
  %4 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 0
  tail call void @_ZN3net14QuicServerInfoD2Ev(%"class.net::QuicServerInfo"* %4) #6
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net19NetworkIsolationKeyD1Ev(%"class.net::NetworkIsolationKey"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3net14QuicServerInfoD2Ev(%"class.net::QuicServerInfo"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net29PropertiesBasedQuicServerInfoD0Ev(%"class.net::PropertiesBasedQuicServerInfo"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net29PropertiesBasedQuicServerInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 1
  tail call void @_ZN3net19NetworkIsolationKeyD1Ev(%"class.net::NetworkIsolationKey"* %3) #6
  %4 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 0
  tail call void @_ZN3net14QuicServerInfoD2Ev(%"class.net::QuicServerInfo"* %4) #6
  %5 = bitcast %"class.net::PropertiesBasedQuicServerInfo"* %0 to i8*
  tail call void @_ZdlPv(i8* %5) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net29PropertiesBasedQuicServerInfo4LoadEv(%"class.net::PropertiesBasedQuicServerInfo"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.base::BasicStringPiece", align 8
  %4 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 2
  %5 = load %"class.net::HttpServerProperties"*, %"class.net::HttpServerProperties"** %4, align 8
  %6 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 0, i32 2
  %8 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 1
  %9 = tail call %"class.std::__1::basic_string"* @_ZN3net20HttpServerProperties17GetQuicServerInfoERKN4quic12QuicServerIdERKNS_19NetworkIsolationKeyE(%"class.net::HttpServerProperties"* %5, %"class.quic::QuicServerId"* dereferenceable(32) %7, %"class.net::NetworkIsolationKey"* dereferenceable(184) %8) #6
  %10 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #6
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false) #6
  %12 = icmp eq %"class.std::__1::basic_string"* %9, null
  br i1 %12, label %13, label %26

13:                                               ; preds = %1
  %14 = load atomic i64, i64* @_ZZN12_GLOBAL__N_127RecordQuicServerInfoFailureEN3net14QuicServerInfo13FailureReasonEE24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %15 = inttoptr i64 %14 to %"class.base::HistogramBase"*
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %13
  %18 = tail call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 1, i32 12, i32 13, i32 1) #6
  %19 = ptrtoint %"class.base::HistogramBase"* %18 to i64
  store atomic i64 %19, i64* @_ZZN12_GLOBAL__N_127RecordQuicServerInfoFailureEN3net14QuicServerInfo13FailureReasonEE24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %20

20:                                               ; preds = %13, %17
  %21 = phi %"class.base::HistogramBase"* [ %15, %13 ], [ %18, %17 ]
  %22 = bitcast %"class.base::HistogramBase"* %21 to void (%"class.base::HistogramBase"*, i32)***
  %23 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %23, i64 6
  %25 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %24, align 8
  tail call void %25(%"class.base::HistogramBase"* %21, i32 4) #6
  br label %71

26:                                               ; preds = %1
  %27 = bitcast %"class.base::BasicStringPiece"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #6
  %28 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 0
  %29 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  %36 = select i1 %32, i8* %34, i8* %35
  store i8* %36, i8** %28, align 8
  %37 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 1
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = zext i8 %31 to i64
  %41 = select i1 %32, i64 %39, i64 %40
  store i64 %41, i64* %37, align 8
  %42 = call zeroext i1 @_ZN4base12Base64DecodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* nonnull dereferenceable(16) %3, %"class.std::__1::basic_string"* nonnull %2) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #6
  br i1 %42, label %56, label %43

43:                                               ; preds = %26
  %44 = load atomic i64, i64* @_ZZN12_GLOBAL__N_127RecordQuicServerInfoFailureEN3net14QuicServerInfo13FailureReasonEE24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %45 = inttoptr i64 %44 to %"class.base::HistogramBase"*
  %46 = icmp eq i64 %44, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %43
  %48 = call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 1, i32 12, i32 13, i32 1) #6
  %49 = ptrtoint %"class.base::HistogramBase"* %48 to i64
  store atomic i64 %49, i64* @_ZZN12_GLOBAL__N_127RecordQuicServerInfoFailureEN3net14QuicServerInfo13FailureReasonEE24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %50

50:                                               ; preds = %43, %47
  %51 = phi %"class.base::HistogramBase"* [ %45, %43 ], [ %48, %47 ]
  %52 = bitcast %"class.base::HistogramBase"* %51 to void (%"class.base::HistogramBase"*, i32)***
  %53 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %53, i64 6
  %55 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %54, align 8
  call void %55(%"class.base::HistogramBase"* %51, i32 11) #6
  br label %71

56:                                               ; preds = %26
  %57 = call zeroext i1 @_ZN3net14QuicServerInfo5ParseERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.net::QuicServerInfo"* %6, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %2) #6
  br i1 %57, label %71, label %58

58:                                               ; preds = %56
  %59 = load atomic i64, i64* @_ZZN12_GLOBAL__N_127RecordQuicServerInfoFailureEN3net14QuicServerInfo13FailureReasonEE24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %60 = inttoptr i64 %59 to %"class.base::HistogramBase"*
  %61 = icmp eq i64 %59, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %58
  %63 = call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 1, i32 12, i32 13, i32 1) #6
  %64 = ptrtoint %"class.base::HistogramBase"* %63 to i64
  store atomic i64 %64, i64* @_ZZN12_GLOBAL__N_127RecordQuicServerInfoFailureEN3net14QuicServerInfo13FailureReasonEE24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %65

65:                                               ; preds = %58, %62
  %66 = phi %"class.base::HistogramBase"* [ %60, %58 ], [ %63, %62 ]
  %67 = bitcast %"class.base::HistogramBase"* %66 to void (%"class.base::HistogramBase"*, i32)***
  %68 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %67, align 8
  %69 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %68, i64 6
  %70 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %69, align 8
  call void %70(%"class.base::HistogramBase"* %66, i32 5) #6
  br label %71

71:                                               ; preds = %56, %65, %50, %20
  %72 = phi i1 [ false, %50 ], [ false, %65 ], [ false, %20 ], [ true, %56 ]
  %73 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %74 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %73, i64 0, i32 1, i32 0
  %75 = load i8, i8* %74, align 1
  %76 = icmp slt i8 %75, 0
  br i1 %76, label %77, label %79

77:                                               ; preds = %71
  %78 = load i8*, i8** %11, align 8
  call void @_ZdlPv(i8* %78) #7
  br label %79

79:                                               ; preds = %71, %77
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #6
  ret i1 %72
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare %"class.std::__1::basic_string"* @_ZN3net20HttpServerProperties17GetQuicServerInfoERKN4quic12QuicServerIdERKNS_19NetworkIsolationKeyE(%"class.net::HttpServerProperties"*, %"class.quic::QuicServerId"* dereferenceable(32), %"class.net::NetworkIsolationKey"* dereferenceable(184)) local_unnamed_addr #1

declare zeroext i1 @_ZN4base12Base64DecodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* dereferenceable(16), %"class.std::__1::basic_string"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare zeroext i1 @_ZN3net14QuicServerInfo5ParseERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.net::QuicServerInfo"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net29PropertiesBasedQuicServerInfo7PersistEv(%"class.net::PropertiesBasedQuicServerInfo"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.base::BasicStringPiece", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #6
  %7 = bitcast %"class.base::BasicStringPiece"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  %8 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #6
  %9 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 0
  call void @_ZN3net14QuicServerInfo9SerializeEv(%"class.std::__1::basic_string"* nonnull sret %4, %"class.net::QuicServerInfo"* %9) #6
  %10 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 0
  %11 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = select i1 %14, i8* %16, i8* %8
  store i8* %17, i8** %10, align 8
  %18 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 1
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = zext i8 %13 to i64
  %22 = select i1 %14, i64 %20, i64 %21
  store i64 %22, i64* %18, align 8
  call void @_ZN4base12Base64EncodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* nonnull dereferenceable(16) %3, %"class.std::__1::basic_string"* nonnull %2) #6
  %23 = load i8, i8* %12, align 1
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %1
  %26 = load i8*, i8** %15, align 8
  call void @_ZdlPv(i8* %26) #7
  br label %27

27:                                               ; preds = %1, %25
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  %28 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 2
  %29 = load %"class.net::HttpServerProperties"*, %"class.net::HttpServerProperties"** %28, align 8
  %30 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 0, i32 2
  %31 = getelementptr inbounds %"class.net::PropertiesBasedQuicServerInfo", %"class.net::PropertiesBasedQuicServerInfo"* %0, i64 0, i32 1
  call void @_ZN3net20HttpServerProperties17SetQuicServerInfoERKN4quic12QuicServerIdERKNS_19NetworkIsolationKeyERKNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEE(%"class.net::HttpServerProperties"* %29, %"class.quic::QuicServerId"* dereferenceable(32) %30, %"class.net::NetworkIsolationKey"* dereferenceable(184) %31, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %2) #6
  %32 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %33 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %32, i64 0, i32 1, i32 0
  %34 = load i8, i8* %33, align 1
  %35 = icmp slt i8 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %27
  %37 = load i8*, i8** %6, align 8
  call void @_ZdlPv(i8* %37) #7
  br label %38

38:                                               ; preds = %27, %36
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #6
  ret void
}

declare void @_ZN4base12Base64EncodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* dereferenceable(16), %"class.std::__1::basic_string"*) local_unnamed_addr #1

declare void @_ZN3net14QuicServerInfo9SerializeEv(%"class.std::__1::basic_string"* sret, %"class.net::QuicServerInfo"*) local_unnamed_addr #1

declare void @_ZN3net20HttpServerProperties17SetQuicServerInfoERKN4quic12QuicServerIdERKNS_19NetworkIsolationKeyERKNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEE(%"class.net::HttpServerProperties"*, %"class.quic::QuicServerId"* dereferenceable(32), %"class.net::NetworkIsolationKey"* dereferenceable(184), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK3net29PropertiesBasedQuicServerInfo19EstimateMemoryUsageEv(%"class.net::PropertiesBasedQuicServerInfo"* nocapture readnone) unnamed_addr #5 align 2 {
  ret i64 0
}

declare %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8*, i32, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
