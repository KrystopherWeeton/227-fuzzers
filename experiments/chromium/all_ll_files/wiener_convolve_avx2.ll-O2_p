; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/wiener_convolve_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/wiener_convolve_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_wiener_convolve_add_src_avx2(i8* nocapture readonly, i64, i8* nocapture, i64, i16* nocapture readonly, i32, i16* nocapture readonly, i32, i32, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %12 = alloca [1088 x i16], align 32
  %13 = bitcast [1088 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2176, i8* nonnull %13) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %13, i8 -86, i64 2176, i1 false)
  %14 = add nsw i32 %9, 6
  %15 = shl nsw i32 %14, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [1088 x i16], [1088 x i16]* %12, i64 0, i64 %16
  %18 = bitcast i16* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %18, i8 0, i64 128, i1 false)
  %19 = mul i64 %1, -3
  %20 = getelementptr inbounds i8, i8* %0, i64 %19
  %21 = getelementptr inbounds i8, i8* %20, i64 -3
  %22 = bitcast i16* %4 to <2 x i64>*
  %23 = load <2 x i64>, <2 x i64>* %22, align 1
  %24 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %25 = bitcast <4 x i64> %24 to <32 x i8>
  %26 = shufflevector <32 x i8> %25, <32 x i8> undef, <32 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18>
  %27 = shufflevector <32 x i8> %25, <32 x i8> undef, <32 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22>
  %28 = shufflevector <32 x i8> %25, <32 x i8> undef, <32 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26>
  %29 = shufflevector <32 x i8> %25, <32 x i8> undef, <32 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30>
  %30 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 3
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %31, -1
  %33 = shl i32 1, %32
  %34 = trunc i32 %33 to i16
  %35 = insertelement <16 x i16> undef, i16 %34, i32 0
  %36 = shufflevector <16 x i16> %35, <16 x i16> undef, <16 x i32> zeroinitializer
  %37 = sub i32 14, %31
  %38 = shl i32 1, %37
  %39 = trunc i32 %38 to i16
  %40 = insertelement <16 x i16> undef, i16 %39, i32 0
  %41 = shufflevector <16 x i16> %40, <16 x i16> undef, <16 x i32> zeroinitializer
  %42 = sub nsw i32 16, %31
  %43 = shl nsw i32 -1, %42
  %44 = trunc i32 %43 to i16
  %45 = xor i16 %44, -1
  %46 = insertelement <16 x i16> undef, i16 %45, i32 0
  %47 = shufflevector <16 x i16> %46, <16 x i16> undef, <16 x i32> zeroinitializer
  %48 = bitcast i16* %6 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 1
  %50 = add <8 x i16> %49, <i16 0, i16 0, i16 0, i16 128, i16 0, i16 0, i16 0, i16 0>
  %51 = bitcast <8 x i16> %50 to <2 x i64>
  %52 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %53 = bitcast <4 x i64> %52 to <8 x i32>
  %54 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 4
  %55 = load i32, i32* %54, align 8
  %56 = add nsw i32 %55, -1
  %57 = shl i32 1, %56
  %58 = add nsw i32 %55, 7
  %59 = shl i32 1, %58
  %60 = sub nsw i32 %57, %59
  %61 = insertelement <8 x i32> undef, i32 %60, i32 0
  %62 = shufflevector <8 x i32> %61, <8 x i32> undef, <8 x i32> zeroinitializer
  %63 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %55, i32 0
  %64 = icmp sgt i32 %8, 0
  br i1 %64, label %65, label %280

65:                                               ; preds = %11
  %66 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7>
  %67 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  %68 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %69 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4>
  %70 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %31, i32 0
  %71 = icmp sgt i32 %14, 0
  %72 = bitcast <4 x i32> %70 to <8 x i16>
  %73 = bitcast [1088 x i16]* %12 to <16 x i16>*
  %74 = getelementptr inbounds [1088 x i16], [1088 x i16]* %12, i64 0, i64 8
  %75 = bitcast i16* %74 to <16 x i16>*
  %76 = getelementptr inbounds [1088 x i16], [1088 x i16]* %12, i64 0, i64 16
  %77 = bitcast i16* %76 to <16 x i16>*
  %78 = getelementptr inbounds [1088 x i16], [1088 x i16]* %12, i64 0, i64 24
  %79 = bitcast i16* %78 to <16 x i16>*
  %80 = getelementptr inbounds [1088 x i16], [1088 x i16]* %12, i64 0, i64 32
  %81 = bitcast i16* %80 to <16 x i16>*
  %82 = getelementptr inbounds [1088 x i16], [1088 x i16]* %12, i64 0, i64 40
  %83 = bitcast i16* %82 to <16 x i16>*
  %84 = add nsw i32 %9, -1
  %85 = icmp sgt i32 %84, 0
  %86 = bitcast <8 x i32> %69 to <16 x i16>
  %87 = bitcast <8 x i32> %68 to <16 x i16>
  %88 = bitcast <8 x i32> %67 to <16 x i16>
  %89 = bitcast <8 x i32> %66 to <16 x i16>
  %90 = sext i32 %14 to i64
  %91 = sext i32 %84 to i64
  %92 = sext i32 %8 to i64
  br label %93

93:                                               ; preds = %65, %277
  %94 = phi i64 [ 0, %65 ], [ %278, %277 ]
  br i1 %71, label %95, label %145

95:                                               ; preds = %93
  %96 = load i32, i32* %30, align 4
  %97 = sub nsw i32 7, %96
  br label %98

98:                                               ; preds = %95, %114
  %99 = phi i64 [ 0, %95 ], [ %143, %114 ]
  %100 = mul nsw i64 %99, %1
  %101 = add nsw i64 %100, %94
  %102 = getelementptr inbounds i8, i8* %21, i64 %101
  %103 = bitcast i8* %102 to <2 x i64>*
  %104 = load <2 x i64>, <2 x i64>* %103, align 1
  %105 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %106 = or i64 %99, 1
  %107 = icmp slt i64 %106, %90
  br i1 %107, label %108, label %114

108:                                              ; preds = %98
  %109 = add nsw i64 %101, %1
  %110 = getelementptr inbounds i8, i8* %21, i64 %109
  %111 = bitcast i8* %110 to <2 x i64>*
  %112 = load <2 x i64>, <2 x i64>* %111, align 1
  %113 = shufflevector <2 x i64> %104, <2 x i64> %112, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br label %114

114:                                              ; preds = %108, %98
  %115 = phi <4 x i64> [ %113, %108 ], [ %105, %98 ]
  %116 = bitcast <4 x i64> %115 to <32 x i8>
  %117 = shufflevector <32 x i8> %116, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %118 = shufflevector <32 x i8> %116, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %119 = shufflevector <32 x i8> %116, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %120 = shufflevector <32 x i8> %116, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %121 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %117, <32 x i8> %26) #3
  %122 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %118, <32 x i8> %27) #3
  %123 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %119, <32 x i8> %28) #3
  %124 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %120, <32 x i8> %29) #3
  %125 = add <16 x i16> %121, %36
  %126 = add <16 x i16> %125, %122
  %127 = add <16 x i16> %126, %123
  %128 = add <16 x i16> %127, %124
  %129 = tail call <16 x i16> @llvm.x86.avx2.psra.w(<16 x i16> %128, <8 x i16> %72) #3
  %130 = shufflevector <32 x i8> %116, <32 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 3, i32 32, i32 4, i32 32, i32 5, i32 32, i32 6, i32 32, i32 7, i32 32, i32 8, i32 32, i32 9, i32 32, i32 10, i32 32, i32 19, i32 48, i32 20, i32 48, i32 21, i32 48, i32 22, i32 48, i32 23, i32 48, i32 24, i32 48, i32 25, i32 48, i32 26, i32 48>
  %131 = bitcast <32 x i8> %130 to <16 x i16>
  %132 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %131, i32 %97) #3
  %133 = add <16 x i16> %129, %41
  %134 = add <16 x i16> %133, %132
  %135 = icmp sgt <16 x i16> %134, zeroinitializer
  %136 = select <16 x i1> %135, <16 x i16> %134, <16 x i16> zeroinitializer
  %137 = icmp slt <16 x i16> %136, %47
  %138 = select <16 x i1> %137, <16 x i16> %136, <16 x i16> %47
  %139 = shl i64 %99, 3
  %140 = and i64 %139, 4294967280
  %141 = getelementptr inbounds [1088 x i16], [1088 x i16]* %12, i64 0, i64 %140
  %142 = bitcast i16* %141 to <16 x i16>*
  store <16 x i16> %138, <16 x i16>* %142, align 32
  %143 = add nuw nsw i64 %99, 2
  %144 = icmp slt i64 %143, %90
  br i1 %144, label %98, label %145

145:                                              ; preds = %114, %93
  %146 = load <16 x i16>, <16 x i16>* %73, align 32
  %147 = load <16 x i16>, <16 x i16>* %75, align 16
  %148 = load <16 x i16>, <16 x i16>* %77, align 32
  %149 = load <16 x i16>, <16 x i16>* %79, align 16
  %150 = load <16 x i16>, <16 x i16>* %81, align 32
  %151 = load <16 x i16>, <16 x i16>* %83, align 16
  %152 = shufflevector <16 x i16> %146, <16 x i16> %147, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %153 = bitcast <16 x i16> %152 to <4 x i64>
  %154 = shufflevector <16 x i16> %148, <16 x i16> %149, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %155 = bitcast <16 x i16> %154 to <4 x i64>
  %156 = shufflevector <16 x i16> %150, <16 x i16> %151, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %157 = shufflevector <16 x i16> %146, <16 x i16> %147, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %158 = bitcast <16 x i16> %157 to <4 x i64>
  %159 = shufflevector <16 x i16> %148, <16 x i16> %149, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %160 = bitcast <16 x i16> %159 to <4 x i64>
  %161 = shufflevector <16 x i16> %150, <16 x i16> %151, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %162 = bitcast <16 x i16> %156 to <4 x i64>
  %163 = bitcast <16 x i16> %161 to <4 x i64>
  br i1 %85, label %164, label %223

164:                                              ; preds = %145, %164
  %165 = phi i64 [ %217, %164 ], [ 0, %145 ]
  %166 = phi <4 x i64> [ %219, %164 ], [ %163, %145 ]
  %167 = phi <4 x i64> [ %218, %164 ], [ %162, %145 ]
  %168 = phi <16 x i16> [ %170, %164 ], [ %152, %145 ]
  %169 = phi <4 x i64> [ %167, %164 ], [ %155, %145 ]
  %170 = phi <16 x i16> [ %171, %164 ], [ %154, %145 ]
  %171 = phi <16 x i16> [ %185, %164 ], [ %156, %145 ]
  %172 = phi <16 x i16> [ %174, %164 ], [ %157, %145 ]
  %173 = phi <4 x i64> [ %166, %164 ], [ %160, %145 ]
  %174 = phi <16 x i16> [ %175, %164 ], [ %159, %145 ]
  %175 = phi <16 x i16> [ %186, %164 ], [ %161, %145 ]
  %176 = shl i64 %165, 3
  %177 = and i64 %176, 4294967280
  %178 = getelementptr inbounds [1088 x i16], [1088 x i16]* %12, i64 0, i64 %177
  %179 = getelementptr inbounds i16, i16* %178, i64 48
  %180 = bitcast i16* %179 to <16 x i16>*
  %181 = load <16 x i16>, <16 x i16>* %180, align 32
  %182 = getelementptr inbounds i16, i16* %178, i64 56
  %183 = bitcast i16* %182 to <16 x i16>*
  %184 = load <16 x i16>, <16 x i16>* %183, align 16
  %185 = shufflevector <16 x i16> %181, <16 x i16> %184, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %186 = shufflevector <16 x i16> %181, <16 x i16> %184, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %187 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %168, <16 x i16> %86) #3
  %188 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %170, <16 x i16> %87) #3
  %189 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %171, <16 x i16> %88) #3
  %190 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %185, <16 x i16> %89) #3
  %191 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %172, <16 x i16> %86) #3
  %192 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %174, <16 x i16> %87) #3
  %193 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %175, <16 x i16> %88) #3
  %194 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %186, <16 x i16> %89) #3
  %195 = add <8 x i32> %187, %62
  %196 = add <8 x i32> %195, %188
  %197 = add <8 x i32> %196, %189
  %198 = add <8 x i32> %197, %190
  %199 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %198, <4 x i32> %63) #3
  %200 = add <8 x i32> %191, %62
  %201 = add <8 x i32> %200, %192
  %202 = add <8 x i32> %201, %193
  %203 = add <8 x i32> %202, %194
  %204 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %203, <4 x i32> %63) #3
  %205 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %199, <8 x i32> %204) #3
  %206 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %205, <16 x i16> %205) #3
  %207 = bitcast <32 x i8> %206 to <4 x i64>
  %208 = mul nsw i64 %165, %3
  %209 = add nsw i64 %208, %94
  %210 = getelementptr inbounds i8, i8* %2, i64 %209
  %211 = add nsw i64 %209, %3
  %212 = getelementptr inbounds i8, i8* %2, i64 %211
  %213 = extractelement <4 x i64> %207, i32 0
  %214 = bitcast i8* %210 to i64*
  store i64 %213, i64* %214, align 1
  %215 = extractelement <4 x i64> %207, i32 2
  %216 = bitcast i8* %212 to i64*
  store i64 %215, i64* %216, align 1
  %217 = add nuw nsw i64 %165, 2
  %218 = bitcast <16 x i16> %185 to <4 x i64>
  %219 = bitcast <16 x i16> %186 to <4 x i64>
  %220 = icmp slt i64 %217, %91
  br i1 %220, label %164, label %221

221:                                              ; preds = %164
  %222 = trunc i64 %217 to i32
  br label %223

223:                                              ; preds = %221, %145
  %224 = phi <4 x i64> [ %160, %145 ], [ %166, %221 ]
  %225 = phi <4 x i64> [ %158, %145 ], [ %173, %221 ]
  %226 = phi <4 x i64> [ %155, %145 ], [ %167, %221 ]
  %227 = phi <4 x i64> [ %153, %145 ], [ %169, %221 ]
  %228 = phi i32 [ 0, %145 ], [ %222, %221 ]
  %229 = phi <4 x i64> [ %162, %145 ], [ %218, %221 ]
  %230 = phi <4 x i64> [ %163, %145 ], [ %219, %221 ]
  %231 = icmp eq i32 %228, %9
  br i1 %231, label %277, label %232

232:                                              ; preds = %223
  %233 = shufflevector <4 x i64> %227, <4 x i64> %225, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %234 = shufflevector <4 x i64> %226, <4 x i64> %224, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %235 = shufflevector <4 x i64> %229, <4 x i64> %230, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %236 = shl nsw i32 %228, 3
  %237 = zext i32 %236 to i64
  %238 = getelementptr inbounds [1088 x i16], [1088 x i16]* %12, i64 0, i64 %237
  %239 = getelementptr inbounds i16, i16* %238, i64 48
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 32
  %242 = getelementptr inbounds i16, i16* %238, i64 56
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 16
  %245 = shufflevector <8 x i16> %241, <8 x i16> %244, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %246 = bitcast <8 x i16> %245 to <2 x i64>
  %247 = shufflevector <8 x i16> %241, <8 x i16> %244, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %248 = bitcast <8 x i16> %247 to <2 x i64>
  %249 = shufflevector <2 x i64> %246, <2 x i64> %248, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %250 = bitcast <4 x i64> %233 to <16 x i16>
  %251 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %250, <16 x i16> %86) #3
  %252 = bitcast <4 x i64> %234 to <16 x i16>
  %253 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %252, <16 x i16> %87) #3
  %254 = bitcast <4 x i64> %235 to <16 x i16>
  %255 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %254, <16 x i16> %88) #3
  %256 = bitcast <4 x i64> %249 to <16 x i16>
  %257 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %256, <16 x i16> %89) #3
  %258 = add <8 x i32> %251, %62
  %259 = add <8 x i32> %258, %253
  %260 = add <8 x i32> %259, %255
  %261 = add <8 x i32> %260, %257
  %262 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %261, <4 x i32> %63) #3
  %263 = bitcast <8 x i32> %262 to <4 x i64>
  %264 = shufflevector <4 x i64> %263, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %265 = shufflevector <4 x i64> %263, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %266 = bitcast <2 x i64> %264 to <4 x i32>
  %267 = bitcast <2 x i64> %265 to <4 x i32>
  %268 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %266, <4 x i32> %267) #3
  %269 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %268, <8 x i16> undef) #3
  %270 = bitcast <16 x i8> %269 to <2 x i64>
  %271 = zext i32 %228 to i64
  %272 = mul nsw i64 %271, %3
  %273 = add nsw i64 %272, %94
  %274 = getelementptr inbounds i8, i8* %2, i64 %273
  %275 = extractelement <2 x i64> %270, i32 0
  %276 = bitcast i8* %274 to i64*
  store i64 %275, i64* %276, align 1
  br label %277

277:                                              ; preds = %223, %232
  %278 = add nuw nsw i64 %94, 8
  %279 = icmp slt i64 %278, %92
  br i1 %279, label %93, label %280

280:                                              ; preds = %277, %11
  call void @llvm.lifetime.end.p0i8(i64 2176, i8* nonnull %13) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8>, <32 x i8>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.psra.w(<16 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16>, i32) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #2

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
