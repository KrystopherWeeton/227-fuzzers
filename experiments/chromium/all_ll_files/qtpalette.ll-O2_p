; ModuleID = '../../third_party/ffmpeg/libavformat/qtpalette.c'
source_filename = "../../third_party/ffmpeg/libavformat/qtpalette.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque

@qt_default_palette_2 = internal unnamed_addr constant [6 x i8] c"\FF\FF\FF\00\00\00", align 1
@qt_default_palette_4 = internal unnamed_addr constant [12 x i8] c"\FF\FF\FF\AC\AC\ACUUU\00\00\00", align 1
@qt_default_palette_16 = internal unnamed_addr constant [48 x i8] c"\FF\FF\FF\FC\F3\05\FFd\02\DD\08\06\F2\08\84F\00\A5\00\00\D4\02\AB\EA\1F\B7\14\00d\11V,\05\90q:\C0\C0\C0\80\80\80@@@\00\00\00", align 16
@qt_default_palette_256 = internal unnamed_addr constant [768 x i8] c"\FF\FF\FF\FF\FF\CC\FF\FF\99\FF\FFf\FF\FF3\FF\FF\00\FF\CC\FF\FF\CC\CC\FF\CC\99\FF\CCf\FF\CC3\FF\CC\00\FF\99\FF\FF\99\CC\FF\99\99\FF\99f\FF\993\FF\99\00\FFf\FF\FFf\CC\FFf\99\FFff\FFf3\FFf\00\FF3\FF\FF3\CC\FF3\99\FF3f\FF33\FF3\00\FF\00\FF\FF\00\CC\FF\00\99\FF\00f\FF\003\FF\00\00\CC\FF\FF\CC\FF\CC\CC\FF\99\CC\FFf\CC\FF3\CC\FF\00\CC\CC\FF\CC\CC\CC\CC\CC\99\CC\CCf\CC\CC3\CC\CC\00\CC\99\FF\CC\99\CC\CC\99\99\CC\99f\CC\993\CC\99\00\CCf\FF\CCf\CC\CCf\99\CCff\CCf3\CCf\00\CC3\FF\CC3\CC\CC3\99\CC3f\CC33\CC3\00\CC\00\FF\CC\00\CC\CC\00\99\CC\00f\CC\003\CC\00\00\99\FF\FF\99\FF\CC\99\FF\99\99\FFf\99\FF3\99\FF\00\99\CC\FF\99\CC\CC\99\CC\99\99\CCf\99\CC3\99\CC\00\99\99\FF\99\99\CC\99\99\99\99\99f\99\993\99\99\00\99f\FF\99f\CC\99f\99\99ff\99f3\99f\00\993\FF\993\CC\993\99\993f\9933\993\00\99\00\FF\99\00\CC\99\00\99\99\00f\99\003\99\00\00f\FF\FFf\FF\CCf\FF\99f\FFff\FF3f\FF\00f\CC\FFf\CC\CCf\CC\99f\CCff\CC3f\CC\00f\99\FFf\99\CCf\99\99f\99ff\993f\99\00ff\FFff\CCff\99fffff3ff\00f3\FFf3\CCf3\99f3ff33f3\00f\00\FFf\00\CCf\00\99f\00ff\003f\00\003\FF\FF3\FF\CC3\FF\993\FFf3\FF33\FF\003\CC\FF3\CC\CC3\CC\993\CCf3\CC33\CC\003\99\FF3\99\CC3\99\993\99f3\9933\99\003f\FF3f\CC3f\993ff3f33f\0033\FF33\CC33\9933f33333\003\00\FF3\00\CC3\00\993\00f3\0033\00\00\00\FF\FF\00\FF\CC\00\FF\99\00\FFf\00\FF3\00\FF\00\00\CC\FF\00\CC\CC\00\CC\99\00\CCf\00\CC3\00\CC\00\00\99\FF\00\99\CC\00\99\99\00\99f\00\993\00\99\00\00f\FF\00f\CC\00f\99\00ff\00f3\00f\00\003\FF\003\CC\003\99\003f\0033\003\00\00\00\FF\00\00\CC\00\00\99\00\00f\00\003\EE\00\00\DD\00\00\BB\00\00\AA\00\00\88\00\00w\00\00U\00\00D\00\00\22\00\00\11\00\00\00\EE\00\00\DD\00\00\BB\00\00\AA\00\00\88\00\00w\00\00U\00\00D\00\00\22\00\00\11\00\00\00\EE\00\00\DD\00\00\BB\00\00\AA\00\00\88\00\00w\00\00U\00\00D\00\00\22\00\00\11\EE\EE\EE\DD\DD\DD\BB\BB\BB\AA\AA\AA\88\88\88wwwUUUDDD\22\22\22\11\11\11\00\00\00", align 16
@switch.table.ff_get_qtpalette = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @qt_default_palette_2, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @qt_default_palette_4, i64 0, i64 0), i8* getelementptr inbounds ([768 x i8], [768 x i8]* @qt_default_palette_256, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @qt_default_palette_16, i64 0, i64 0)], align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_get_qtpalette(i32, %struct.AVIOContext*, i32* nocapture) local_unnamed_addr #0 {
  %4 = tail call i64 @avio_seek(%struct.AVIOContext* %1, i64 82, i32 1) #2
  %5 = tail call i32 @avio_rb16(%struct.AVIOContext* %1) #2
  %6 = and i32 %5, 31
  %7 = and i32 %5, 32
  %8 = tail call i32 @avio_rb16(%struct.AVIOContext* %1) #2
  %9 = icmp ne i32 %7, 0
  %10 = icmp eq i32 %0, 43
  %11 = and i1 %10, %9
  br i1 %11, label %105, label %12

12:                                               ; preds = %3
  switch i32 %6, label %105 [
    i32 8, label %13
    i32 4, label %13
    i32 2, label %13
    i32 1, label %13
  ]

13:                                               ; preds = %12, %12, %12, %12
  %14 = icmp ugt i32 %6, 1
  %15 = and i1 %9, %14
  %16 = icmp ne i32 %8, 0
  %17 = and i1 %16, %15
  br i1 %17, label %18, label %39

18:                                               ; preds = %13
  %19 = shl i32 1, %6
  %20 = trunc i32 %19 to i16
  %21 = add nsw i16 %20, -1
  %22 = udiv i16 256, %21
  %23 = zext i16 %22 to i32
  %24 = zext i32 %19 to i64
  br label %25

25:                                               ; preds = %18, %25
  %26 = phi i64 [ 0, %18 ], [ %37, %25 ]
  %27 = phi i32 [ 255, %18 ], [ %36, %25 ]
  %28 = shl i32 %27, 16
  %29 = shl i32 %27, 8
  %30 = or i32 %27, %29
  %31 = or i32 %30, %28
  %32 = or i32 %31, -16777216
  %33 = getelementptr inbounds i32, i32* %2, i64 %26
  store i32 %32, i32* %33, align 4
  %34 = sub nsw i32 %27, %23
  %35 = icmp sgt i32 %34, 0
  %36 = select i1 %35, i32 %34, i32 0
  %37 = add nuw nsw i64 %26, 1
  %38 = icmp ult i64 %37, %24
  br i1 %38, label %25, label %105

39:                                               ; preds = %13
  br i1 %16, label %40, label %77

40:                                               ; preds = %39
  %41 = add nsw i32 %6, -1
  %42 = icmp ult i32 %41, 4
  br i1 %42, label %43, label %47

43:                                               ; preds = %40
  %44 = sext i32 %41 to i64
  %45 = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.ff_get_qtpalette, i64 0, i64 %44
  %46 = load i8*, i8** %45, align 8
  br label %47

47:                                               ; preds = %40, %43
  %48 = phi i8* [ %46, %43 ], [ getelementptr inbounds ([768 x i8], [768 x i8]* @qt_default_palette_256, i64 0, i64 0), %40 ]
  br label %49

49:                                               ; preds = %47, %49
  %50 = phi i64 [ 0, %47 ], [ %73, %49 ]
  %51 = trunc i64 %50 to i32
  %52 = mul nsw i32 %51, 3
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %48, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = add nuw nsw i32 %52, 1
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %48, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = add nuw nsw i32 %52, 2
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %48, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = shl nuw nsw i32 %56, 16
  %68 = shl nuw nsw i32 %61, 8
  %69 = or i32 %67, %68
  %70 = or i32 %69, %66
  %71 = or i32 %70, -16777216
  %72 = getelementptr inbounds i32, i32* %2, i64 %50
  store i32 %71, i32* %72, align 4
  %73 = add nuw i64 %50, 1
  %74 = trunc i64 %73 to i32
  %75 = lshr i32 %74, %6
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %49, label %105

77:                                               ; preds = %39
  %78 = tail call i32 @avio_rb32(%struct.AVIOContext* %1) #2
  %79 = tail call i32 @avio_rb16(%struct.AVIOContext* %1) #2
  %80 = tail call i32 @avio_rb16(%struct.AVIOContext* %1) #2
  %81 = or i32 %80, %78
  %82 = icmp ugt i32 %81, 255
  %83 = icmp ugt i32 %78, %80
  %84 = or i1 %82, %83
  br i1 %84, label %105, label %85

85:                                               ; preds = %77
  %86 = sext i32 %78 to i64
  br label %87

87:                                               ; preds = %85, %87
  %88 = phi i64 [ %86, %85 ], [ %102, %87 ]
  %89 = tail call i64 @avio_skip(%struct.AVIOContext* %1, i64 2) #2
  %90 = tail call i32 @avio_r8(%struct.AVIOContext* %1) #2
  %91 = tail call i32 @avio_r8(%struct.AVIOContext* %1) #2
  %92 = tail call i32 @avio_r8(%struct.AVIOContext* %1) #2
  %93 = tail call i32 @avio_r8(%struct.AVIOContext* %1) #2
  %94 = tail call i32 @avio_r8(%struct.AVIOContext* %1) #2
  %95 = tail call i32 @avio_r8(%struct.AVIOContext* %1) #2
  %96 = shl i32 %90, 16
  %97 = shl i32 %92, 8
  %98 = or i32 %96, %97
  %99 = or i32 %98, %94
  %100 = or i32 %99, -16777216
  %101 = getelementptr inbounds i32, i32* %2, i64 %88
  store i32 %100, i32* %101, align 4
  %102 = add i64 %88, 1
  %103 = trunc i64 %102 to i32
  %104 = icmp ult i32 %80, %103
  br i1 %104, label %105, label %87

105:                                              ; preds = %87, %49, %25, %77, %12, %3
  %106 = phi i32 [ 0, %3 ], [ 1, %77 ], [ 0, %12 ], [ 1, %25 ], [ 1, %49 ], [ 1, %87 ]
  ret i32 %106
}

declare i64 @avio_seek(%struct.AVIOContext*, i64, i32) local_unnamed_addr #1

declare i32 @avio_rb16(%struct.AVIOContext*) local_unnamed_addr #1

declare i32 @avio_rb32(%struct.AVIOContext*) local_unnamed_addr #1

declare i64 @avio_skip(%struct.AVIOContext*, i64) local_unnamed_addr #1

declare i32 @avio_r8(%struct.AVIOContext*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
