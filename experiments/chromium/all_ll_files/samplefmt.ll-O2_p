; ModuleID = '../../third_party/ffmpeg/libavutil/samplefmt.c'
source_filename = "../../third_party/ffmpeg/libavutil/samplefmt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SampleFmtInfo = type { [8 x i8], i32, i32, i32 }

@sample_fmt_info = internal constant [12 x %struct.SampleFmtInfo] [%struct.SampleFmtInfo { [8 x i8] c"u8\00\00\00\00\00\00", i32 8, i32 0, i32 5 }, %struct.SampleFmtInfo { [8 x i8] c"s16\00\00\00\00\00", i32 16, i32 0, i32 6 }, %struct.SampleFmtInfo { [8 x i8] c"s32\00\00\00\00\00", i32 32, i32 0, i32 7 }, %struct.SampleFmtInfo { [8 x i8] c"flt\00\00\00\00\00", i32 32, i32 0, i32 8 }, %struct.SampleFmtInfo { [8 x i8] c"dbl\00\00\00\00\00", i32 64, i32 0, i32 9 }, %struct.SampleFmtInfo { [8 x i8] c"u8p\00\00\00\00\00", i32 8, i32 1, i32 0 }, %struct.SampleFmtInfo { [8 x i8] c"s16p\00\00\00\00", i32 16, i32 1, i32 1 }, %struct.SampleFmtInfo { [8 x i8] c"s32p\00\00\00\00", i32 32, i32 1, i32 2 }, %struct.SampleFmtInfo { [8 x i8] c"fltp\00\00\00\00", i32 32, i32 1, i32 3 }, %struct.SampleFmtInfo { [8 x i8] c"dblp\00\00\00\00", i32 64, i32 1, i32 4 }, %struct.SampleFmtInfo { [8 x i8] c"s64\00\00\00\00\00", i32 64, i32 0, i32 11 }, %struct.SampleFmtInfo { [8 x i8] c"s64p\00\00\00\00", i32 64, i32 1, i32 10 }], align 16
@.str = private unnamed_addr constant [13 x i8] c"name   depth\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"%-6s   %2d \00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @av_get_sample_fmt_name(i32) local_unnamed_addr #0 {
  %2 = icmp ugt i32 %0, 11
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds [12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %3, i32 0, i64 0
  %5 = select i1 %2, i8* null, i8* %4
  ret i8* %5
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @av_get_sample_fmt(i8* nocapture readonly) local_unnamed_addr #1 {
  %2 = tail call i32 @strcmp(i8* getelementptr inbounds ([12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 0, i32 0, i64 0), i8* %0) #8
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  %5 = tail call i32 @strcmp(i8* getelementptr inbounds ([12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 1, i32 0, i64 0), i8* %0) #8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %33, %30, %27, %24, %21, %18, %15, %12, %9, %4, %1
  %8 = phi i32 [ 0, %1 ], [ 1, %4 ], [ 2, %9 ], [ 3, %12 ], [ 4, %15 ], [ 5, %18 ], [ 6, %21 ], [ 7, %24 ], [ 8, %27 ], [ 9, %30 ], [ 10, %33 ]
  ret i32 %8

9:                                                ; preds = %4
  %10 = tail call i32 @strcmp(i8* getelementptr inbounds ([12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 2, i32 0, i64 0), i8* %0) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %7, label %12

12:                                               ; preds = %9
  %13 = tail call i32 @strcmp(i8* getelementptr inbounds ([12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 3, i32 0, i64 0), i8* %0) #8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %7, label %15

15:                                               ; preds = %12
  %16 = tail call i32 @strcmp(i8* getelementptr inbounds ([12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 4, i32 0, i64 0), i8* %0) #8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %7, label %18

18:                                               ; preds = %15
  %19 = tail call i32 @strcmp(i8* getelementptr inbounds ([12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 5, i32 0, i64 0), i8* %0) #8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %7, label %21

21:                                               ; preds = %18
  %22 = tail call i32 @strcmp(i8* getelementptr inbounds ([12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 6, i32 0, i64 0), i8* %0) #8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %7, label %24

24:                                               ; preds = %21
  %25 = tail call i32 @strcmp(i8* getelementptr inbounds ([12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 7, i32 0, i64 0), i8* %0) #8
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %7, label %27

27:                                               ; preds = %24
  %28 = tail call i32 @strcmp(i8* getelementptr inbounds ([12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 8, i32 0, i64 0), i8* %0) #8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %7, label %30

30:                                               ; preds = %27
  %31 = tail call i32 @strcmp(i8* getelementptr inbounds ([12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 9, i32 0, i64 0), i8* %0) #8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %7, label %33

33:                                               ; preds = %30
  %34 = tail call i32 @strcmp(i8* getelementptr inbounds ([12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 10, i32 0, i64 0), i8* %0) #8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %7, label %36

36:                                               ; preds = %33
  %37 = tail call i32 @strcmp(i8* getelementptr inbounds ([12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 11, i32 0, i64 0), i8* %0) #8
  %38 = icmp eq i32 %37, 0
  %39 = select i1 %38, i32 11, i32 -1
  ret i32 %39
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @av_get_alt_sample_fmt(i32, i32) local_unnamed_addr #0 {
  %3 = icmp ugt i32 %0, 11
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds [12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %5, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, %1
  br i1 %8, label %12, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds [12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %5, i32 3
  %11 = load i32, i32* %10, align 4
  br label %12

12:                                               ; preds = %4, %2, %9
  %13 = phi i32 [ %11, %9 ], [ -1, %2 ], [ %0, %4 ]
  ret i32 %13
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @av_get_packed_sample_fmt(i32) local_unnamed_addr #0 {
  %2 = icmp ugt i32 %0, 11
  br i1 %2, label %11, label %3

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = lshr i64 3040, %4
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds [12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %4, i32 3
  %10 = load i32, i32* %9, align 4
  br label %11

11:                                               ; preds = %3, %1, %8
  %12 = phi i32 [ %10, %8 ], [ -1, %1 ], [ %0, %3 ]
  ret i32 %12
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @av_get_planar_sample_fmt(i32) local_unnamed_addr #0 {
  %2 = icmp ugt i32 %0, 11
  br i1 %2, label %11, label %3

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = lshr i64 3040, %4
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = getelementptr inbounds [12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %4, i32 3
  %10 = load i32, i32* %9, align 4
  br label %11

11:                                               ; preds = %3, %1, %8
  %12 = phi i32 [ %10, %8 ], [ -1, %1 ], [ %0, %3 ]
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @av_get_sample_fmt_string(i8* returned, i32, i32) local_unnamed_addr #4 {
  %4 = alloca %struct.SampleFmtInfo, align 4
  %5 = icmp slt i32 %2, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %3
  %7 = sext i32 %1 to i64
  %8 = tail call i32 (i8*, i64, i8*, ...) @snprintf(i8* %0, i64 %7, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #9
  br label %19

9:                                                ; preds = %3
  %10 = icmp slt i32 %2, 12
  br i1 %10, label %11, label %19

11:                                               ; preds = %9
  %12 = getelementptr inbounds %struct.SampleFmtInfo, %struct.SampleFmtInfo* %4, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %12) #9
  %13 = getelementptr inbounds %struct.SampleFmtInfo, %struct.SampleFmtInfo* %4, i64 0, i32 1
  %14 = sext i32 %2 to i64
  %15 = getelementptr inbounds [12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %14, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %12, i8* align 4 %15, i64 20, i1 false)
  %16 = sext i32 %1 to i64
  %17 = load i32, i32* %13, align 4
  %18 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %0, i64 %16, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8* nonnull %12, i32 %17) #9
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %12) #9
  br label %19

19:                                               ; preds = %9, %11, %6
  ret i8* %0
}

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @av_get_bytes_per_sample(i32) local_unnamed_addr #0 {
  %2 = icmp ugt i32 %0, 11
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %4, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = ashr i32 %6, 3
  br label %8

8:                                                ; preds = %1, %3
  %9 = phi i32 [ %7, %3 ], [ 0, %1 ]
  ret i32 %9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @av_sample_fmt_is_planar(i32) local_unnamed_addr #0 {
  %2 = icmp ugt i32 %0, 11
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %4, i32 2
  %6 = load i32, i32* %5, align 4
  br label %7

7:                                                ; preds = %1, %3
  %8 = phi i32 [ %6, %3 ], [ 0, %1 ]
  ret i32 %8
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @av_samples_get_buffer_size(i32*, i32, i32, i32, i32) local_unnamed_addr #6 {
  %6 = icmp ugt i32 %3, 11
  br i1 %6, label %54, label %7

7:                                                ; preds = %5
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds [12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %8, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = ashr i32 %10, 3
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %2, 1
  %14 = or i1 %13, %12
  %15 = icmp slt i32 %1, 1
  %16 = or i1 %15, %14
  br i1 %16, label %54, label %17

17:                                               ; preds = %7
  %18 = icmp eq i32 %4, 0
  br i1 %18, label %19, label %24

19:                                               ; preds = %17
  %20 = icmp sgt i32 %2, 2147483616
  br i1 %20, label %54, label %21

21:                                               ; preds = %19
  %22 = add nuw nsw i32 %2, 31
  %23 = and i32 %22, -32
  br label %24

24:                                               ; preds = %17, %21
  %25 = phi i32 [ %2, %17 ], [ %23, %21 ]
  %26 = phi i32 [ %4, %17 ], [ 1, %21 ]
  %27 = sdiv i32 2147483647, %26
  %28 = icmp slt i32 %27, %1
  br i1 %28, label %54, label %29

29:                                               ; preds = %24
  %30 = sext i32 %1 to i64
  %31 = sext i32 %25 to i64
  %32 = mul nsw i64 %31, %30
  %33 = mul nsw i32 %26, %1
  %34 = sub nsw i32 2147483647, %33
  %35 = sdiv i32 %34, %11
  %36 = sext i32 %35 to i64
  %37 = icmp sgt i64 %32, %36
  br i1 %37, label %54, label %38

38:                                               ; preds = %29
  %39 = lshr i64 3040, %8
  %40 = and i64 %39, 1
  %41 = icmp ne i64 %40, 0
  %42 = mul nsw i32 %25, %11
  %43 = select i1 %41, i32 1, i32 %1
  %44 = mul nsw i32 %42, %43
  %45 = add i32 %26, -1
  %46 = add i32 %45, %44
  %47 = sub i32 0, %26
  %48 = and i32 %46, %47
  %49 = icmp eq i32* %0, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %38
  store i32 %48, i32* %0, align 4
  br label %51

51:                                               ; preds = %38, %50
  %52 = select i1 %41, i32 %1, i32 1
  %53 = mul nsw i32 %48, %52
  br label %54

54:                                               ; preds = %5, %24, %29, %19, %7, %51
  %55 = phi i32 [ %53, %51 ], [ -22, %7 ], [ -22, %19 ], [ -22, %29 ], [ -22, %24 ], [ -22, %5 ]
  ret i32 %55
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_samples_fill_arrays(i8** nocapture, i32*, i8*, i32, i32, i32, i32) local_unnamed_addr #4 {
  %8 = icmp ugt i32 %5, 11
  br i1 %8, label %111, label %9

9:                                                ; preds = %7
  %10 = sext i32 %5 to i64
  %11 = getelementptr inbounds [12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %10, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = ashr i32 %12, 3
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %4, 1
  %16 = or i1 %15, %14
  %17 = icmp slt i32 %3, 1
  %18 = or i1 %17, %16
  br i1 %18, label %111, label %19

19:                                               ; preds = %9
  %20 = icmp eq i32 %6, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %19
  %22 = icmp sgt i32 %4, 2147483616
  br i1 %22, label %111, label %23

23:                                               ; preds = %21
  %24 = add nuw nsw i32 %4, 31
  %25 = and i32 %24, -32
  br label %26

26:                                               ; preds = %23, %19
  %27 = phi i32 [ %4, %19 ], [ %25, %23 ]
  %28 = phi i32 [ %6, %19 ], [ 1, %23 ]
  %29 = sdiv i32 2147483647, %28
  %30 = icmp slt i32 %29, %3
  br i1 %30, label %111, label %31

31:                                               ; preds = %26
  %32 = sext i32 %3 to i64
  %33 = sext i32 %27 to i64
  %34 = mul nsw i64 %33, %32
  %35 = mul nsw i32 %28, %3
  %36 = sub nsw i32 2147483647, %35
  %37 = sdiv i32 %36, %13
  %38 = sext i32 %37 to i64
  %39 = icmp sgt i64 %34, %38
  br i1 %39, label %111, label %40

40:                                               ; preds = %31
  %41 = lshr i64 3040, %10
  %42 = and i64 %41, 1
  %43 = icmp ne i64 %42, 0
  %44 = mul nsw i32 %27, %13
  %45 = select i1 %43, i32 1, i32 %3
  %46 = mul nsw i32 %44, %45
  %47 = add i32 %28, -1
  %48 = add i32 %47, %46
  %49 = sub i32 0, %28
  %50 = and i32 %48, %49
  %51 = select i1 %43, i32 %3, i32 1
  %52 = mul nsw i32 %50, %51
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %111, label %54

54:                                               ; preds = %40
  store i8* %2, i8** %0, align 8
  %55 = icmp sgt i32 %3, 1
  %56 = and i1 %43, %55
  br i1 %56, label %57, label %108

57:                                               ; preds = %54
  %58 = sext i32 %50 to i64
  %59 = add nsw i64 %32, -1
  %60 = add nsw i64 %32, -2
  %61 = and i64 %59, 7
  %62 = icmp ult i64 %60, 7
  br i1 %62, label %95, label %63

63:                                               ; preds = %57
  %64 = sub nsw i64 %59, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i8* [ %2, %63 ], [ %90, %65 ]
  %67 = phi i64 [ 1, %63 ], [ %92, %65 ]
  %68 = phi i64 [ %64, %63 ], [ %93, %65 ]
  %69 = getelementptr inbounds i8, i8* %66, i64 %58
  %70 = getelementptr inbounds i8*, i8** %0, i64 %67
  store i8* %69, i8** %70, align 8
  %71 = add nuw nsw i64 %67, 1
  %72 = getelementptr inbounds i8, i8* %69, i64 %58
  %73 = getelementptr inbounds i8*, i8** %0, i64 %71
  store i8* %72, i8** %73, align 8
  %74 = add nuw nsw i64 %67, 2
  %75 = getelementptr inbounds i8, i8* %72, i64 %58
  %76 = getelementptr inbounds i8*, i8** %0, i64 %74
  store i8* %75, i8** %76, align 8
  %77 = add nuw nsw i64 %67, 3
  %78 = getelementptr inbounds i8, i8* %75, i64 %58
  %79 = getelementptr inbounds i8*, i8** %0, i64 %77
  store i8* %78, i8** %79, align 8
  %80 = add nuw nsw i64 %67, 4
  %81 = getelementptr inbounds i8, i8* %78, i64 %58
  %82 = getelementptr inbounds i8*, i8** %0, i64 %80
  store i8* %81, i8** %82, align 8
  %83 = add nuw nsw i64 %67, 5
  %84 = getelementptr inbounds i8, i8* %81, i64 %58
  %85 = getelementptr inbounds i8*, i8** %0, i64 %83
  store i8* %84, i8** %85, align 8
  %86 = add nuw nsw i64 %67, 6
  %87 = getelementptr inbounds i8, i8* %84, i64 %58
  %88 = getelementptr inbounds i8*, i8** %0, i64 %86
  store i8* %87, i8** %88, align 8
  %89 = add nuw nsw i64 %67, 7
  %90 = getelementptr inbounds i8, i8* %87, i64 %58
  %91 = getelementptr inbounds i8*, i8** %0, i64 %89
  store i8* %90, i8** %91, align 8
  %92 = add nuw nsw i64 %67, 8
  %93 = add i64 %68, -8
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %65

95:                                               ; preds = %65, %57
  %96 = phi i8* [ %2, %57 ], [ %90, %65 ]
  %97 = phi i64 [ 1, %57 ], [ %92, %65 ]
  %98 = icmp eq i64 %61, 0
  br i1 %98, label %108, label %99

99:                                               ; preds = %95, %99
  %100 = phi i8* [ %103, %99 ], [ %96, %95 ]
  %101 = phi i64 [ %105, %99 ], [ %97, %95 ]
  %102 = phi i64 [ %106, %99 ], [ %61, %95 ]
  %103 = getelementptr inbounds i8, i8* %100, i64 %58
  %104 = getelementptr inbounds i8*, i8** %0, i64 %101
  store i8* %103, i8** %104, align 8
  %105 = add nuw nsw i64 %101, 1
  %106 = add i64 %102, -1
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %99, !llvm.loop !2

108:                                              ; preds = %95, %99, %54
  %109 = icmp eq i32* %1, null
  br i1 %109, label %111, label %110

110:                                              ; preds = %108
  store i32 %50, i32* %1, align 4
  br label %111

111:                                              ; preds = %7, %26, %31, %21, %9, %110, %108, %40
  %112 = phi i32 [ %52, %110 ], [ %52, %108 ], [ %52, %40 ], [ -22, %9 ], [ -22, %21 ], [ -22, %31 ], [ -22, %26 ], [ -22, %7 ]
  ret i32 %112
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_samples_alloc(i8** nocapture, i32*, i32, i32, i32, i32) local_unnamed_addr #4 {
  %7 = icmp ugt i32 %4, 11
  br i1 %7, label %118, label %8

8:                                                ; preds = %6
  %9 = sext i32 %4 to i64
  %10 = getelementptr inbounds [12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %9, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = ashr i32 %11, 3
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %3, 1
  %15 = or i1 %14, %13
  %16 = icmp slt i32 %2, 1
  %17 = or i1 %16, %15
  br i1 %17, label %118, label %18

18:                                               ; preds = %8
  %19 = icmp eq i32 %5, 0
  br i1 %19, label %20, label %25

20:                                               ; preds = %18
  %21 = icmp sgt i32 %3, 2147483616
  br i1 %21, label %118, label %22

22:                                               ; preds = %20
  %23 = add nuw nsw i32 %3, 31
  %24 = and i32 %23, -32
  br label %25

25:                                               ; preds = %22, %18
  %26 = phi i32 [ %3, %18 ], [ %24, %22 ]
  %27 = phi i32 [ %5, %18 ], [ 1, %22 ]
  %28 = sdiv i32 2147483647, %27
  %29 = icmp slt i32 %28, %2
  br i1 %29, label %118, label %30

30:                                               ; preds = %25
  %31 = sext i32 %2 to i64
  %32 = sext i32 %26 to i64
  %33 = mul nsw i64 %32, %31
  %34 = mul nsw i32 %27, %2
  %35 = sub nsw i32 2147483647, %34
  %36 = sdiv i32 %35, %12
  %37 = sext i32 %36 to i64
  %38 = icmp sgt i64 %33, %37
  br i1 %38, label %118, label %39

39:                                               ; preds = %30
  %40 = lshr i64 3040, %9
  %41 = and i64 %40, 1
  %42 = icmp ne i64 %41, 0
  %43 = mul nsw i32 %26, %12
  %44 = select i1 %42, i32 1, i32 %2
  %45 = mul nsw i32 %43, %44
  %46 = add i32 %27, -1
  %47 = add i32 %46, %45
  %48 = sub i32 0, %27
  %49 = and i32 %47, %48
  %50 = select i1 %42, i32 %2, i32 1
  %51 = mul nsw i32 %49, %50
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %118, label %53

53:                                               ; preds = %39
  %54 = sext i32 %51 to i64
  %55 = tail call noalias i8* @av_malloc(i64 %54) #9
  %56 = icmp eq i8* %55, null
  br i1 %56, label %118, label %57

57:                                               ; preds = %53
  %58 = tail call i32 @av_samples_fill_arrays(i8** %0, i32* %1, i8* nonnull %55, i32 %2, i32 %3, i32 %4, i32 %5)
  %59 = icmp slt i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %57
  tail call void @av_free(i8* nonnull %55) #9
  br label %118

61:                                               ; preds = %57
  %62 = icmp eq i64 %41, 0
  %63 = select i1 %62, i32 %2, i32 1
  %64 = icmp eq i32 %4, 0
  %65 = icmp eq i32 %4, 5
  %66 = or i1 %64, %65
  %67 = mul i32 %63, %3
  %68 = mul i32 %67, %12
  %69 = select i1 %66, i8 -128, i8 0
  %70 = sext i32 %68 to i64
  %71 = zext i32 %2 to i64
  %72 = select i1 %62, i64 1, i64 %71
  %73 = add nsw i64 %72, -1
  %74 = and i64 %72, 7
  %75 = icmp ult i64 %73, 7
  br i1 %75, label %107, label %76

76:                                               ; preds = %61
  %77 = sub nsw i64 %72, %74
  br label %78

78:                                               ; preds = %78, %76
  %79 = phi i64 [ 0, %76 ], [ %104, %78 ]
  %80 = phi i64 [ %77, %76 ], [ %105, %78 ]
  %81 = getelementptr inbounds i8*, i8** %0, i64 %79
  %82 = load i8*, i8** %81, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %82, i8 %69, i64 %70, i1 false) #9
  %83 = or i64 %79, 1
  %84 = getelementptr inbounds i8*, i8** %0, i64 %83
  %85 = load i8*, i8** %84, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %85, i8 %69, i64 %70, i1 false) #9
  %86 = or i64 %79, 2
  %87 = getelementptr inbounds i8*, i8** %0, i64 %86
  %88 = load i8*, i8** %87, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %88, i8 %69, i64 %70, i1 false) #9
  %89 = or i64 %79, 3
  %90 = getelementptr inbounds i8*, i8** %0, i64 %89
  %91 = load i8*, i8** %90, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %91, i8 %69, i64 %70, i1 false) #9
  %92 = or i64 %79, 4
  %93 = getelementptr inbounds i8*, i8** %0, i64 %92
  %94 = load i8*, i8** %93, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %94, i8 %69, i64 %70, i1 false) #9
  %95 = or i64 %79, 5
  %96 = getelementptr inbounds i8*, i8** %0, i64 %95
  %97 = load i8*, i8** %96, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 %69, i64 %70, i1 false) #9
  %98 = or i64 %79, 6
  %99 = getelementptr inbounds i8*, i8** %0, i64 %98
  %100 = load i8*, i8** %99, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %100, i8 %69, i64 %70, i1 false) #9
  %101 = or i64 %79, 7
  %102 = getelementptr inbounds i8*, i8** %0, i64 %101
  %103 = load i8*, i8** %102, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %103, i8 %69, i64 %70, i1 false) #9
  %104 = add nuw nsw i64 %79, 8
  %105 = add i64 %80, -8
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %78

107:                                              ; preds = %78, %61
  %108 = phi i64 [ 0, %61 ], [ %104, %78 ]
  %109 = icmp eq i64 %74, 0
  br i1 %109, label %118, label %110

110:                                              ; preds = %107, %110
  %111 = phi i64 [ %115, %110 ], [ %108, %107 ]
  %112 = phi i64 [ %116, %110 ], [ %74, %107 ]
  %113 = getelementptr inbounds i8*, i8** %0, i64 %111
  %114 = load i8*, i8** %113, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %114, i8 %69, i64 %70, i1 false) #9
  %115 = add nuw nsw i64 %111, 1
  %116 = add i64 %112, -1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %110, !llvm.loop !4

118:                                              ; preds = %107, %110, %6, %25, %30, %20, %8, %53, %39, %60
  %119 = phi i32 [ %58, %60 ], [ %51, %39 ], [ -12, %53 ], [ -22, %8 ], [ -22, %20 ], [ -22, %30 ], [ -22, %25 ], [ -22, %6 ], [ %58, %110 ], [ %58, %107 ]
  ret i32 %119
}

declare noalias i8* @av_malloc(i64) local_unnamed_addr #7

declare void @av_free(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_samples_set_silence(i8** nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #4 {
  %6 = icmp ugt i32 %4, 11
  br i1 %6, label %15, label %7

7:                                                ; preds = %5
  %8 = sext i32 %4 to i64
  %9 = lshr i64 3040, %8
  %10 = and i64 %9, 1
  %11 = icmp eq i64 %10, 0
  %12 = getelementptr inbounds [12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %8, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = ashr i32 %13, 3
  br i1 %11, label %15, label %18

15:                                               ; preds = %7, %5
  %16 = phi i32 [ %14, %7 ], [ 0, %5 ]
  %17 = mul nsw i32 %16, %3
  br label %20

18:                                               ; preds = %7
  %19 = icmp sgt i32 %3, 0
  br i1 %19, label %20, label %86

20:                                               ; preds = %15, %18
  %21 = phi i32 [ %17, %15 ], [ %14, %18 ]
  %22 = phi i32 [ 1, %15 ], [ %3, %18 ]
  %23 = mul nsw i32 %21, %1
  %24 = icmp eq i32 %4, 0
  %25 = icmp eq i32 %4, 5
  %26 = or i1 %24, %25
  %27 = mul nsw i32 %21, %2
  %28 = sext i32 %23 to i64
  %29 = select i1 %26, i8 -128, i8 0
  %30 = sext i32 %27 to i64
  %31 = zext i32 %22 to i64
  %32 = add nsw i64 %31, -1
  %33 = and i64 %31, 7
  %34 = icmp ult i64 %32, 7
  br i1 %34, label %74, label %35

35:                                               ; preds = %20
  %36 = sub nsw i64 %31, %33
  br label %37

37:                                               ; preds = %37, %35
  %38 = phi i64 [ 0, %35 ], [ %71, %37 ]
  %39 = phi i64 [ %36, %35 ], [ %72, %37 ]
  %40 = getelementptr inbounds i8*, i8** %0, i64 %38
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 %28
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %29, i64 %30, i1 false)
  %43 = or i64 %38, 1
  %44 = getelementptr inbounds i8*, i8** %0, i64 %43
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 %28
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %29, i64 %30, i1 false)
  %47 = or i64 %38, 2
  %48 = getelementptr inbounds i8*, i8** %0, i64 %47
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 %28
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 %29, i64 %30, i1 false)
  %51 = or i64 %38, 3
  %52 = getelementptr inbounds i8*, i8** %0, i64 %51
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 %28
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %29, i64 %30, i1 false)
  %55 = or i64 %38, 4
  %56 = getelementptr inbounds i8*, i8** %0, i64 %55
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 %28
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 %29, i64 %30, i1 false)
  %59 = or i64 %38, 5
  %60 = getelementptr inbounds i8*, i8** %0, i64 %59
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 %28
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %62, i8 %29, i64 %30, i1 false)
  %63 = or i64 %38, 6
  %64 = getelementptr inbounds i8*, i8** %0, i64 %63
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %28
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 %29, i64 %30, i1 false)
  %67 = or i64 %38, 7
  %68 = getelementptr inbounds i8*, i8** %0, i64 %67
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 %28
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %70, i8 %29, i64 %30, i1 false)
  %71 = add nuw nsw i64 %38, 8
  %72 = add i64 %39, -8
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %37

74:                                               ; preds = %37, %20
  %75 = phi i64 [ 0, %20 ], [ %71, %37 ]
  %76 = icmp eq i64 %33, 0
  br i1 %76, label %86, label %77

77:                                               ; preds = %74, %77
  %78 = phi i64 [ %83, %77 ], [ %75, %74 ]
  %79 = phi i64 [ %84, %77 ], [ %33, %74 ]
  %80 = getelementptr inbounds i8*, i8** %0, i64 %78
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 %28
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %82, i8 %29, i64 %30, i1 false)
  %83 = add nuw nsw i64 %78, 1
  %84 = add i64 %79, -1
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %77, !llvm.loop !5

86:                                               ; preds = %74, %77, %18
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_samples_alloc_array_and_samples(i8***, i32*, i32, i32, i32, i32) local_unnamed_addr #4 {
  %7 = icmp ugt i32 %4, 11
  br i1 %7, label %13, label %8

8:                                                ; preds = %6
  %9 = sext i32 %4 to i64
  %10 = lshr i64 1055, %9
  %11 = and i64 %10, 1
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %8, %6
  br label %14

14:                                               ; preds = %8, %13
  %15 = phi i32 [ 1, %13 ], [ %2, %8 ]
  %16 = sext i32 %15 to i64
  %17 = tail call noalias i8* @av_calloc(i64 %16, i64 8) #9
  %18 = bitcast i8*** %0 to i8**
  store i8* %17, i8** %18, align 8
  %19 = icmp eq i8* %17, null
  br i1 %19, label %26, label %20

20:                                               ; preds = %14
  %21 = bitcast i8* %17 to i8**
  %22 = tail call i32 @av_samples_alloc(i8** nonnull %21, i32* %1, i32 %2, i32 %3, i32 %4, i32 %5)
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %20
  %25 = bitcast i8*** %0 to i8*
  tail call void @av_freep(i8* %25) #9
  br label %26

26:                                               ; preds = %20, %24, %14
  %27 = phi i32 [ -12, %14 ], [ %22, %24 ], [ %22, %20 ]
  ret i32 %27
}

declare noalias i8* @av_calloc(i64, i64) local_unnamed_addr #7

declare void @av_freep(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_samples_copy(i8** nocapture readonly, i8** nocapture readonly, i32, i32, i32, i32, i32) local_unnamed_addr #4 {
  %8 = icmp ugt i32 %6, 11
  br i1 %8, label %19, label %9

9:                                                ; preds = %7
  %10 = sext i32 %6 to i64
  %11 = lshr i64 3040, %10
  %12 = and i64 %11, 1
  %13 = icmp ne i64 %12, 0
  %14 = getelementptr inbounds [12 x %struct.SampleFmtInfo], [12 x %struct.SampleFmtInfo]* @sample_fmt_info, i64 0, i64 %10, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = ashr i32 %15, 3
  %17 = select i1 %13, i32 %5, i32 1
  %18 = select i1 %13, i32 1, i32 %5
  br label %19

19:                                               ; preds = %9, %7
  %20 = phi i32 [ 0, %7 ], [ %16, %9 ]
  %21 = phi i32 [ 1, %7 ], [ %17, %9 ]
  %22 = phi i32 [ %5, %7 ], [ %18, %9 ]
  %23 = mul nsw i32 %22, %20
  %24 = mul nsw i32 %23, %4
  %25 = mul nsw i32 %23, %2
  %26 = mul nsw i32 %23, %3
  %27 = load i8*, i8** %0, align 8
  %28 = load i8*, i8** %1, align 8
  %29 = icmp ult i8* %27, %28
  %30 = ptrtoint i8* %28 to i64
  %31 = ptrtoint i8* %27 to i64
  %32 = sub i64 %30, %31
  %33 = sub i64 %31, %30
  %34 = select i1 %29, i64 %32, i64 %33
  %35 = sext i32 %24 to i64
  %36 = icmp slt i64 %34, %35
  %37 = icmp sgt i32 %21, 0
  br i1 %36, label %52, label %38

38:                                               ; preds = %19
  br i1 %37, label %39, label %144

39:                                               ; preds = %38
  %40 = sext i32 %25 to i64
  %41 = sext i32 %26 to i64
  %42 = getelementptr inbounds i8, i8* %27, i64 %40
  %43 = getelementptr inbounds i8, i8* %28, i64 %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %43, i64 %35, i1 false)
  %44 = icmp eq i32 %21, 1
  br i1 %44, label %144, label %45

45:                                               ; preds = %39
  %46 = zext i32 %21 to i64
  %47 = add nsw i64 %46, -1
  %48 = and i64 %47, 1
  %49 = icmp eq i32 %21, 2
  br i1 %49, label %134, label %50

50:                                               ; preds = %45
  %51 = sub nsw i64 %47, %48
  br label %67

52:                                               ; preds = %19
  br i1 %37, label %53, label %144

53:                                               ; preds = %52
  %54 = sext i32 %25 to i64
  %55 = sext i32 %26 to i64
  %56 = zext i32 %21 to i64
  %57 = getelementptr inbounds i8, i8* %27, i64 %54
  %58 = getelementptr inbounds i8, i8* %28, i64 %55
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %58, i64 %35, i1 false)
  %59 = icmp eq i32 %21, 1
  br i1 %59, label %144, label %60

60:                                               ; preds = %53
  %61 = add nsw i64 %56, -1
  %62 = add nsw i64 %56, -2
  %63 = and i64 %61, 3
  %64 = icmp ult i64 %62, 3
  br i1 %64, label %119, label %65

65:                                               ; preds = %60
  %66 = sub nsw i64 %61, %63
  br label %86

67:                                               ; preds = %67, %50
  %68 = phi i64 [ 1, %50 ], [ %83, %67 ]
  %69 = phi i64 [ %51, %50 ], [ %84, %67 ]
  %70 = getelementptr inbounds i8*, i8** %0, i64 %68
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds i8*, i8** %1, i64 %68
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds i8, i8* %71, i64 %40
  %75 = getelementptr inbounds i8, i8* %73, i64 %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %75, i64 %35, i1 false)
  %76 = add nuw nsw i64 %68, 1
  %77 = getelementptr inbounds i8*, i8** %0, i64 %76
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds i8*, i8** %1, i64 %76
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds i8, i8* %78, i64 %40
  %82 = getelementptr inbounds i8, i8* %80, i64 %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %81, i8* align 1 %82, i64 %35, i1 false)
  %83 = add nuw nsw i64 %68, 2
  %84 = add i64 %69, -2
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %134, label %67

86:                                               ; preds = %86, %65
  %87 = phi i64 [ 1, %65 ], [ %116, %86 ]
  %88 = phi i64 [ %66, %65 ], [ %117, %86 ]
  %89 = getelementptr inbounds i8*, i8** %0, i64 %87
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds i8*, i8** %1, i64 %87
  %92 = load i8*, i8** %91, align 8
  %93 = getelementptr inbounds i8, i8* %90, i64 %54
  %94 = getelementptr inbounds i8, i8* %92, i64 %55
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %93, i8* align 1 %94, i64 %35, i1 false)
  %95 = add nuw nsw i64 %87, 1
  %96 = getelementptr inbounds i8*, i8** %0, i64 %95
  %97 = load i8*, i8** %96, align 8
  %98 = getelementptr inbounds i8*, i8** %1, i64 %95
  %99 = load i8*, i8** %98, align 8
  %100 = getelementptr inbounds i8, i8* %97, i64 %54
  %101 = getelementptr inbounds i8, i8* %99, i64 %55
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %100, i8* align 1 %101, i64 %35, i1 false)
  %102 = add nuw nsw i64 %87, 2
  %103 = getelementptr inbounds i8*, i8** %0, i64 %102
  %104 = load i8*, i8** %103, align 8
  %105 = getelementptr inbounds i8*, i8** %1, i64 %102
  %106 = load i8*, i8** %105, align 8
  %107 = getelementptr inbounds i8, i8* %104, i64 %54
  %108 = getelementptr inbounds i8, i8* %106, i64 %55
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %107, i8* align 1 %108, i64 %35, i1 false)
  %109 = add nuw nsw i64 %87, 3
  %110 = getelementptr inbounds i8*, i8** %0, i64 %109
  %111 = load i8*, i8** %110, align 8
  %112 = getelementptr inbounds i8*, i8** %1, i64 %109
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds i8, i8* %111, i64 %54
  %115 = getelementptr inbounds i8, i8* %113, i64 %55
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %115, i64 %35, i1 false)
  %116 = add nuw nsw i64 %87, 4
  %117 = add i64 %88, -4
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %86

119:                                              ; preds = %86, %60
  %120 = phi i64 [ 1, %60 ], [ %116, %86 ]
  %121 = icmp eq i64 %63, 0
  br i1 %121, label %144, label %122

122:                                              ; preds = %119, %122
  %123 = phi i64 [ %131, %122 ], [ %120, %119 ]
  %124 = phi i64 [ %132, %122 ], [ %63, %119 ]
  %125 = getelementptr inbounds i8*, i8** %0, i64 %123
  %126 = load i8*, i8** %125, align 8
  %127 = getelementptr inbounds i8*, i8** %1, i64 %123
  %128 = load i8*, i8** %127, align 8
  %129 = getelementptr inbounds i8, i8* %126, i64 %54
  %130 = getelementptr inbounds i8, i8* %128, i64 %55
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %129, i8* align 1 %130, i64 %35, i1 false)
  %131 = add nuw nsw i64 %123, 1
  %132 = add i64 %124, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %144, label %122, !llvm.loop !6

134:                                              ; preds = %67, %45
  %135 = phi i64 [ 1, %45 ], [ %83, %67 ]
  %136 = icmp eq i64 %48, 0
  br i1 %136, label %144, label %137

137:                                              ; preds = %134
  %138 = getelementptr inbounds i8*, i8** %0, i64 %135
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr inbounds i8*, i8** %1, i64 %135
  %141 = load i8*, i8** %140, align 8
  %142 = getelementptr inbounds i8, i8* %139, i64 %40
  %143 = getelementptr inbounds i8, i8* %141, i64 %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %142, i8* align 1 %143, i64 %35, i1 false)
  br label %144

144:                                              ; preds = %137, %134, %119, %122, %39, %53, %38, %52
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
