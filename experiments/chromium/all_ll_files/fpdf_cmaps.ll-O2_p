; ModuleID = '../../third_party/pdfium/core/fpdfapi/cmaps/fpdf_cmaps.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/cmaps/fpdf_cmaps.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.FXCMAP_CMap = type { i8*, i16*, %struct.FXCMAP_DWordCIDMap*, i16, i16, i8, i8 }
%struct.FXCMAP_DWordCIDMap = type { i16, i16, i16, i16 }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { %struct.FXCMAP_CMap* }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span.0" }
%"class.pdfium::span.0" = type { %"class.fxcrt::UnownedPtr.1", i64 }
%"class.fxcrt::UnownedPtr.1" = type { i8* }
%"struct.(anonymous namespace)::SingleCmap" = type { i16, i16 }
%"struct.(anonymous namespace)::RangeCmap" = type { i16, i16, i16 }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.FXCMAP_CMap* @_Z16FindEmbeddedCMapN6pdfium4spanIK11FXCMAP_CMapEEN5fxcrt18StringViewTemplateIcEE(%"class.pdfium::span"* nocapture readonly, %"class.fxcrt::StringViewTemplate"* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %40, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 0, i32 0
  %8 = load %struct.FXCMAP_CMap*, %struct.FXCMAP_CMap** %7, align 8
  %9 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds i8, i8* %10, i64 %12
  %14 = icmp eq i64 %12, 0
  br label %15

15:                                               ; preds = %6, %37
  %16 = phi i64 [ 0, %6 ], [ %38, %37 ]
  %17 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %8, i64 %16
  %18 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %17, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %15
  %22 = tail call i64 @strlen(i8* nonnull %19) #4
  br label %23

23:                                               ; preds = %21, %15
  %24 = phi i64 [ %22, %21 ], [ 0, %15 ]
  %25 = icmp eq i64 %12, %24
  br i1 %25, label %26, label %37

26:                                               ; preds = %23
  br i1 %14, label %40, label %27

27:                                               ; preds = %26, %33
  %28 = phi i8* [ %35, %33 ], [ %19, %26 ]
  %29 = phi i8* [ %34, %33 ], [ %10, %26 ]
  %30 = load i8, i8* %29, align 1
  %31 = load i8, i8* %28, align 1
  %32 = icmp eq i8 %30, %31
  br i1 %32, label %33, label %37

33:                                               ; preds = %27
  %34 = getelementptr inbounds i8, i8* %29, i64 1
  %35 = getelementptr inbounds i8, i8* %28, i64 1
  %36 = icmp eq i8* %34, %13
  br i1 %36, label %40, label %27

37:                                               ; preds = %27, %23
  %38 = add nuw i64 %16, 1
  %39 = icmp ult i64 %38, %4
  br i1 %39, label %15, label %40

40:                                               ; preds = %37, %26, %33, %2
  %41 = phi %struct.FXCMAP_CMap* [ null, %2 ], [ %17, %33 ], [ null, %37 ], [ %17, %26 ]
  ret %struct.FXCMAP_CMap* %41
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i16 @_Z15CIDFromCharCodePK11FXCMAP_CMapj(%struct.FXCMAP_CMap* readonly, i32) local_unnamed_addr #1 {
  %3 = trunc i32 %1 to i16
  %4 = icmp ugt i32 %1, 65535
  %5 = icmp eq %struct.FXCMAP_CMap* %0, null
  br i1 %4, label %7, label %6

6:                                                ; preds = %2
  br i1 %5, label %164, label %70

7:                                                ; preds = %2
  br i1 %5, label %164, label %8

8:                                                ; preds = %7
  %9 = lshr i32 %1, 16
  %10 = and i32 %1, 65535
  br label %11

11:                                               ; preds = %8, %62
  %12 = phi %struct.FXCMAP_CMap* [ %0, %8 ], [ %68, %62 ]
  %13 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %12, i64 0, i32 2
  %14 = load %struct.FXCMAP_DWordCIDMap*, %struct.FXCMAP_DWordCIDMap** %13, align 8
  %15 = icmp eq %struct.FXCMAP_DWordCIDMap* %14, null
  br i1 %15, label %62, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %12, i64 0, i32 4
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i64
  %20 = getelementptr inbounds %struct.FXCMAP_DWordCIDMap, %struct.FXCMAP_DWordCIDMap* %14, i64 %19
  %21 = icmp eq i16 %18, 0
  br i1 %21, label %46, label %22

22:                                               ; preds = %16, %42
  %23 = phi i64 [ %44, %42 ], [ %19, %16 ]
  %24 = phi %struct.FXCMAP_DWordCIDMap* [ %43, %42 ], [ %14, %16 ]
  %25 = lshr i64 %23, 1
  %26 = getelementptr inbounds %struct.FXCMAP_DWordCIDMap, %struct.FXCMAP_DWordCIDMap* %24, i64 %25
  %27 = getelementptr inbounds %struct.FXCMAP_DWordCIDMap, %struct.FXCMAP_DWordCIDMap* %26, i64 0, i32 0
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = icmp eq i32 %9, %29
  br i1 %30, label %33, label %31

31:                                               ; preds = %22
  %32 = icmp ugt i32 %9, %29
  br i1 %32, label %38, label %42

33:                                               ; preds = %22
  %34 = getelementptr inbounds %struct.FXCMAP_DWordCIDMap, %struct.FXCMAP_DWordCIDMap* %24, i64 %25, i32 2
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = icmp ugt i32 %10, %36
  br i1 %37, label %38, label %42

38:                                               ; preds = %33, %31
  %39 = getelementptr inbounds %struct.FXCMAP_DWordCIDMap, %struct.FXCMAP_DWordCIDMap* %26, i64 1
  %40 = xor i64 %25, -1
  %41 = add i64 %23, %40
  br label %42

42:                                               ; preds = %38, %33, %31
  %43 = phi %struct.FXCMAP_DWordCIDMap* [ %39, %38 ], [ %24, %33 ], [ %24, %31 ]
  %44 = phi i64 [ %41, %38 ], [ %25, %33 ], [ %25, %31 ]
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %22

46:                                               ; preds = %42, %16
  %47 = phi %struct.FXCMAP_DWordCIDMap* [ %14, %16 ], [ %43, %42 ]
  %48 = icmp eq %struct.FXCMAP_DWordCIDMap* %47, %20
  br i1 %48, label %62, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds %struct.FXCMAP_DWordCIDMap, %struct.FXCMAP_DWordCIDMap* %47, i64 0, i32 1
  %51 = load i16, i16* %50, align 2
  %52 = icmp ugt i16 %51, %3
  br i1 %52, label %62, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.FXCMAP_DWordCIDMap, %struct.FXCMAP_DWordCIDMap* %47, i64 0, i32 2
  %55 = load i16, i16* %54, align 2
  %56 = icmp ult i16 %55, %3
  br i1 %56, label %62, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.FXCMAP_DWordCIDMap, %struct.FXCMAP_DWordCIDMap* %47, i64 0, i32 3
  %59 = load i16, i16* %58, align 2
  %60 = sub i16 %3, %51
  %61 = add i16 %60, %59
  br label %164

62:                                               ; preds = %46, %49, %53, %11
  %63 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %12, i64 0, i32 6
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, 0
  %66 = sext i8 %64 to i64
  %67 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %12, i64 %66
  %68 = select i1 %65, %struct.FXCMAP_CMap* null, %struct.FXCMAP_CMap* %67
  %69 = icmp eq %struct.FXCMAP_CMap* %68, null
  br i1 %69, label %164, label %11

70:                                               ; preds = %6, %156
  %71 = phi %struct.FXCMAP_CMap* [ %162, %156 ], [ %0, %6 ]
  %72 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %71, i64 0, i32 1
  %73 = load i16*, i16** %72, align 8
  %74 = icmp eq i16* %73, null
  br i1 %74, label %164, label %75

75:                                               ; preds = %70
  %76 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %71, i64 0, i32 5
  %77 = load i8, i8* %76, align 4
  switch i8 %77, label %156 [
    i8 0, label %78
    i8 1, label %114
  ]

78:                                               ; preds = %75
  %79 = bitcast i16* %73 to %"struct.(anonymous namespace)::SingleCmap"*
  %80 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %71, i64 0, i32 3
  %81 = load i16, i16* %80, align 8
  %82 = zext i16 %81 to i64
  %83 = getelementptr inbounds %"struct.(anonymous namespace)::SingleCmap", %"struct.(anonymous namespace)::SingleCmap"* %79, i64 %82
  %84 = ptrtoint %"struct.(anonymous namespace)::SingleCmap"* %83 to i64
  %85 = ptrtoint i16* %73 to i64
  %86 = sub i64 %84, %85
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %104, label %88

88:                                               ; preds = %78
  %89 = ashr exact i64 %86, 2
  br label %90

90:                                               ; preds = %90, %88
  %91 = phi i64 [ %89, %88 ], [ %102, %90 ]
  %92 = phi %"struct.(anonymous namespace)::SingleCmap"* [ %79, %88 ], [ %101, %90 ]
  %93 = lshr i64 %91, 1
  %94 = getelementptr inbounds %"struct.(anonymous namespace)::SingleCmap", %"struct.(anonymous namespace)::SingleCmap"* %92, i64 %93
  %95 = getelementptr inbounds %"struct.(anonymous namespace)::SingleCmap", %"struct.(anonymous namespace)::SingleCmap"* %94, i64 0, i32 0
  %96 = load i16, i16* %95, align 2
  %97 = icmp ult i16 %96, %3
  %98 = getelementptr inbounds %"struct.(anonymous namespace)::SingleCmap", %"struct.(anonymous namespace)::SingleCmap"* %94, i64 1
  %99 = xor i64 %93, -1
  %100 = add i64 %91, %99
  %101 = select i1 %97, %"struct.(anonymous namespace)::SingleCmap"* %98, %"struct.(anonymous namespace)::SingleCmap"* %92
  %102 = select i1 %97, i64 %100, i64 %93
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %90

104:                                              ; preds = %90, %78
  %105 = phi %"struct.(anonymous namespace)::SingleCmap"* [ %79, %78 ], [ %101, %90 ]
  %106 = icmp eq %"struct.(anonymous namespace)::SingleCmap"* %105, %83
  br i1 %106, label %156, label %107

107:                                              ; preds = %104
  %108 = getelementptr inbounds %"struct.(anonymous namespace)::SingleCmap", %"struct.(anonymous namespace)::SingleCmap"* %105, i64 0, i32 0
  %109 = load i16, i16* %108, align 2
  %110 = icmp eq i16 %109, %3
  br i1 %110, label %111, label %156

111:                                              ; preds = %107
  %112 = getelementptr inbounds %"struct.(anonymous namespace)::SingleCmap", %"struct.(anonymous namespace)::SingleCmap"* %105, i64 0, i32 1
  %113 = load i16, i16* %112, align 2
  br label %164

114:                                              ; preds = %75
  %115 = bitcast i16* %73 to %"struct.(anonymous namespace)::RangeCmap"*
  %116 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %71, i64 0, i32 3
  %117 = load i16, i16* %116, align 8
  %118 = zext i16 %117 to i64
  %119 = getelementptr inbounds %"struct.(anonymous namespace)::RangeCmap", %"struct.(anonymous namespace)::RangeCmap"* %115, i64 %118
  %120 = ptrtoint %"struct.(anonymous namespace)::RangeCmap"* %119 to i64
  %121 = ptrtoint i16* %73 to i64
  %122 = sub i64 %120, %121
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %140, label %124

124:                                              ; preds = %114
  %125 = sdiv exact i64 %122, 6
  br label %126

126:                                              ; preds = %126, %124
  %127 = phi i64 [ %125, %124 ], [ %138, %126 ]
  %128 = phi %"struct.(anonymous namespace)::RangeCmap"* [ %115, %124 ], [ %137, %126 ]
  %129 = lshr i64 %127, 1
  %130 = getelementptr inbounds %"struct.(anonymous namespace)::RangeCmap", %"struct.(anonymous namespace)::RangeCmap"* %128, i64 1
  %131 = getelementptr inbounds %"struct.(anonymous namespace)::RangeCmap", %"struct.(anonymous namespace)::RangeCmap"* %128, i64 %129, i32 1
  %132 = load i16, i16* %131, align 2
  %133 = icmp ult i16 %132, %3
  %134 = getelementptr inbounds %"struct.(anonymous namespace)::RangeCmap", %"struct.(anonymous namespace)::RangeCmap"* %130, i64 %129
  %135 = xor i64 %129, -1
  %136 = add i64 %127, %135
  %137 = select i1 %133, %"struct.(anonymous namespace)::RangeCmap"* %134, %"struct.(anonymous namespace)::RangeCmap"* %128
  %138 = select i1 %133, i64 %136, i64 %129
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %126

140:                                              ; preds = %126, %114
  %141 = phi %"struct.(anonymous namespace)::RangeCmap"* [ %115, %114 ], [ %137, %126 ]
  %142 = icmp eq %"struct.(anonymous namespace)::RangeCmap"* %141, %119
  br i1 %142, label %156, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds %"struct.(anonymous namespace)::RangeCmap", %"struct.(anonymous namespace)::RangeCmap"* %141, i64 0, i32 0
  %145 = load i16, i16* %144, align 2
  %146 = icmp ugt i16 %145, %3
  br i1 %146, label %156, label %147

147:                                              ; preds = %143
  %148 = getelementptr inbounds %"struct.(anonymous namespace)::RangeCmap", %"struct.(anonymous namespace)::RangeCmap"* %141, i64 0, i32 1
  %149 = load i16, i16* %148, align 2
  %150 = icmp ult i16 %149, %3
  br i1 %150, label %156, label %151

151:                                              ; preds = %147
  %152 = getelementptr inbounds %"struct.(anonymous namespace)::RangeCmap", %"struct.(anonymous namespace)::RangeCmap"* %141, i64 0, i32 2
  %153 = load i16, i16* %152, align 2
  %154 = sub i16 %3, %145
  %155 = add i16 %154, %153
  br label %164

156:                                              ; preds = %140, %143, %147, %107, %104, %75
  %157 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %71, i64 0, i32 6
  %158 = load i8, i8* %157, align 1
  %159 = icmp eq i8 %158, 0
  %160 = sext i8 %158 to i64
  %161 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %71, i64 %160
  %162 = select i1 %159, %struct.FXCMAP_CMap* null, %struct.FXCMAP_CMap* %161
  %163 = icmp eq %struct.FXCMAP_CMap* %162, null
  br i1 %163, label %164, label %70

164:                                              ; preds = %70, %156, %62, %6, %7, %151, %111, %57
  %165 = phi i16 [ %61, %57 ], [ %155, %151 ], [ %113, %111 ], [ 0, %7 ], [ 0, %6 ], [ 0, %62 ], [ 0, %156 ], [ 0, %70 ]
  ret i16 %165
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_Z15CharCodeFromCIDPK11FXCMAP_CMapt(%struct.FXCMAP_CMap* readonly, i16 zeroext) local_unnamed_addr #2 {
  %3 = icmp eq %struct.FXCMAP_CMap* %0, null
  br i1 %3, label %72, label %4

4:                                                ; preds = %2
  %5 = zext i16 %1 to i32
  br label %6

6:                                                ; preds = %4, %64
  %7 = phi %struct.FXCMAP_CMap* [ %0, %4 ], [ %70, %64 ]
  %8 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %7, i64 0, i32 5
  %9 = load i8, i8* %8, align 4
  switch i8 %9, label %64 [
    i8 0, label %10
    i8 1, label %31
  ]

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %7, i64 0, i32 1
  %12 = bitcast i16** %11 to %"struct.(anonymous namespace)::SingleCmap"**
  %13 = load %"struct.(anonymous namespace)::SingleCmap"*, %"struct.(anonymous namespace)::SingleCmap"** %12, align 8
  %14 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %7, i64 0, i32 3
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i64
  %17 = getelementptr inbounds %"struct.(anonymous namespace)::SingleCmap", %"struct.(anonymous namespace)::SingleCmap"* %13, i64 %16
  %18 = icmp eq i16 %15, 0
  br i1 %18, label %64, label %19

19:                                               ; preds = %10, %28
  %20 = phi %"struct.(anonymous namespace)::SingleCmap"* [ %29, %28 ], [ %13, %10 ]
  %21 = getelementptr inbounds %"struct.(anonymous namespace)::SingleCmap", %"struct.(anonymous namespace)::SingleCmap"* %20, i64 0, i32 1
  %22 = load i16, i16* %21, align 2
  %23 = icmp eq i16 %22, %1
  br i1 %23, label %24, label %28

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"struct.(anonymous namespace)::SingleCmap", %"struct.(anonymous namespace)::SingleCmap"* %20, i64 0, i32 0
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  br label %72

28:                                               ; preds = %19
  %29 = getelementptr inbounds %"struct.(anonymous namespace)::SingleCmap", %"struct.(anonymous namespace)::SingleCmap"* %20, i64 1
  %30 = icmp ult %"struct.(anonymous namespace)::SingleCmap"* %29, %17
  br i1 %30, label %19, label %64

31:                                               ; preds = %6
  %32 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %7, i64 0, i32 1
  %33 = bitcast i16** %32 to %"struct.(anonymous namespace)::RangeCmap"**
  %34 = load %"struct.(anonymous namespace)::RangeCmap"*, %"struct.(anonymous namespace)::RangeCmap"** %33, align 8
  %35 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %7, i64 0, i32 3
  %36 = load i16, i16* %35, align 8
  %37 = zext i16 %36 to i64
  %38 = getelementptr inbounds %"struct.(anonymous namespace)::RangeCmap", %"struct.(anonymous namespace)::RangeCmap"* %34, i64 %37
  %39 = icmp eq i16 %36, 0
  br i1 %39, label %64, label %40

40:                                               ; preds = %31, %61
  %41 = phi %"struct.(anonymous namespace)::RangeCmap"* [ %62, %61 ], [ %34, %31 ]
  %42 = getelementptr inbounds %"struct.(anonymous namespace)::RangeCmap", %"struct.(anonymous namespace)::RangeCmap"* %41, i64 0, i32 2
  %43 = load i16, i16* %42, align 2
  %44 = icmp ugt i16 %43, %1
  br i1 %44, label %61, label %45

45:                                               ; preds = %40
  %46 = zext i16 %43 to i32
  %47 = getelementptr inbounds %"struct.(anonymous namespace)::RangeCmap", %"struct.(anonymous namespace)::RangeCmap"* %41, i64 0, i32 1
  %48 = load i16, i16* %47, align 2
  %49 = zext i16 %48 to i32
  %50 = add nuw nsw i32 %49, %46
  %51 = getelementptr inbounds %"struct.(anonymous namespace)::RangeCmap", %"struct.(anonymous namespace)::RangeCmap"* %41, i64 0, i32 0
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  %54 = sub nsw i32 %50, %53
  %55 = icmp slt i32 %54, %5
  br i1 %55, label %61, label %56

56:                                               ; preds = %45
  %57 = zext i16 %43 to i32
  %58 = zext i16 %52 to i32
  %59 = sub nsw i32 %5, %57
  %60 = add nsw i32 %59, %58
  br label %72

61:                                               ; preds = %45, %40
  %62 = getelementptr inbounds %"struct.(anonymous namespace)::RangeCmap", %"struct.(anonymous namespace)::RangeCmap"* %41, i64 1
  %63 = icmp ult %"struct.(anonymous namespace)::RangeCmap"* %62, %38
  br i1 %63, label %40, label %64

64:                                               ; preds = %61, %28, %10, %31, %6
  %65 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %7, i64 0, i32 6
  %66 = load i8, i8* %65, align 1
  %67 = icmp eq i8 %66, 0
  %68 = sext i8 %66 to i64
  %69 = getelementptr inbounds %struct.FXCMAP_CMap, %struct.FXCMAP_CMap* %7, i64 %68
  %70 = select i1 %67, %struct.FXCMAP_CMap* null, %struct.FXCMAP_CMap* %69
  %71 = icmp eq %struct.FXCMAP_CMap* %70, null
  br i1 %71, label %72, label %6

72:                                               ; preds = %64, %2, %56, %24
  %73 = phi i32 [ %27, %24 ], [ %60, %56 ], [ 0, %2 ], [ 0, %64 ]
  ret i32 %73
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
