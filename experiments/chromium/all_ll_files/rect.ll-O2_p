; ModuleID = '../../ui/gfx/geometry/rect.cc'
source_filename = "../../ui/gfx/geometry/rect.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Insets" = type { i32, i32, i32, i32 }
%"class.gfx::Vector2d" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [6 x i8] c"%s %s\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx15AdjustAlongAxisEiiPiS0_(i32, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %5 = load i32, i32* %3, align 4
  %6 = icmp slt i32 %5, %1
  %7 = select i1 %6, i32 %5, i32 %1
  store i32 %7, i32* %3, align 4
  %8 = load i32, i32* %2, align 4
  %9 = icmp slt i32 %8, %0
  br i1 %9, label %16, label %10

10:                                               ; preds = %4
  %11 = add nsw i32 %1, %0
  %12 = add nsw i32 %8, %7
  %13 = icmp slt i32 %12, %11
  %14 = select i1 %13, i32 %12, i32 %11
  %15 = sub nsw i32 %14, %7
  br label %16

16:                                               ; preds = %4, %10
  %17 = phi i32 [ %15, %10 ], [ %0, %4 ]
  store i32 %17, i32* %2, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN3gfx4Rect11SetByBoundsEiiii(%"class.gfx::Rect"* nocapture, i32, i32, i32, i32) local_unnamed_addr #2 align 2 {
  %6 = icmp slt i32 %3, %1
  br i1 %6, label %37, label %7

7:                                                ; preds = %5
  %8 = icmp sgt i32 %1, -1
  %9 = select i1 %8, i32 -2147483648, i32 2147483647
  %10 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %1) #10
  %11 = extractvalue { i32, i1 } %10, 1
  %12 = extractvalue { i32, i1 } %10, 0
  %13 = select i1 %11, i32 %9, i32 %12, !prof !2
  %14 = add nsw i32 %13, %1
  %15 = icmp sgt i32 %14, -1
  %16 = select i1 %15, i32 -2147483648, i32 2147483647
  %17 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %14) #10
  %18 = extractvalue { i32, i1 } %17, 1
  %19 = extractvalue { i32, i1 } %17, 0
  %20 = select i1 %18, i32 %16, i32 %19, !prof !2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %37, label %22

22:                                               ; preds = %7
  %23 = icmp slt i32 %3, 0
  %24 = sub i32 0, %3
  %25 = select i1 %23, i32 %24, i32 %3
  %26 = icmp ult i32 %25, 1073741823
  br i1 %26, label %27, label %29

27:                                               ; preds = %22
  %28 = sub nsw i32 %3, %13
  br label %37

29:                                               ; preds = %22
  %30 = icmp slt i32 %1, 0
  %31 = sub i32 0, %1
  %32 = select i1 %30, i32 %31, i32 %1
  %33 = icmp ult i32 %32, 1073741823
  br i1 %33, label %37, label %34

34:                                               ; preds = %29
  %35 = sdiv i32 %20, 2
  %36 = add nsw i32 %35, %1
  br label %37

37:                                               ; preds = %29, %7, %5, %27, %34
  %38 = phi i32 [ %28, %27 ], [ %36, %34 ], [ %1, %5 ], [ %1, %7 ], [ %1, %29 ]
  %39 = phi i32 [ %13, %27 ], [ %13, %34 ], [ 0, %5 ], [ %13, %7 ], [ %13, %29 ]
  %40 = icmp slt i32 %4, %2
  br i1 %40, label %71, label %41

41:                                               ; preds = %37
  %42 = icmp sgt i32 %2, -1
  %43 = select i1 %42, i32 -2147483648, i32 2147483647
  %44 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %4, i32 %2) #10
  %45 = extractvalue { i32, i1 } %44, 1
  %46 = extractvalue { i32, i1 } %44, 0
  %47 = select i1 %45, i32 %43, i32 %46, !prof !2
  %48 = add nsw i32 %47, %2
  %49 = icmp sgt i32 %48, -1
  %50 = select i1 %49, i32 -2147483648, i32 2147483647
  %51 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %4, i32 %48) #10
  %52 = extractvalue { i32, i1 } %51, 1
  %53 = extractvalue { i32, i1 } %51, 0
  %54 = select i1 %52, i32 %50, i32 %53, !prof !2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %71, label %56

56:                                               ; preds = %41
  %57 = icmp slt i32 %4, 0
  %58 = sub i32 0, %4
  %59 = select i1 %57, i32 %58, i32 %4
  %60 = icmp ult i32 %59, 1073741823
  br i1 %60, label %61, label %63

61:                                               ; preds = %56
  %62 = sub nsw i32 %4, %47
  br label %71

63:                                               ; preds = %56
  %64 = icmp slt i32 %2, 0
  %65 = sub i32 0, %2
  %66 = select i1 %64, i32 %65, i32 %2
  %67 = icmp ult i32 %66, 1073741823
  br i1 %67, label %71, label %68

68:                                               ; preds = %63
  %69 = sdiv i32 %54, 2
  %70 = add nsw i32 %69, %2
  br label %71

71:                                               ; preds = %63, %41, %37, %61, %68
  %72 = phi i32 [ %62, %61 ], [ %70, %68 ], [ %2, %37 ], [ %2, %41 ], [ %2, %63 ]
  %73 = phi i32 [ %47, %61 ], [ %47, %68 ], [ 0, %37 ], [ %47, %41 ], [ %47, %63 ]
  %74 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  store i32 %38, i32* %74, align 4
  %75 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  store i32 %72, i32* %75, align 4
  %76 = icmp sgt i32 %39, 0
  %77 = select i1 %76, i32 %39, i32 0
  %78 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  store i32 %77, i32* %78, align 4
  %79 = icmp sgt i32 %73, 0
  %80 = select i1 %79, i32 %73, i32 0
  %81 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  store i32 %80, i32* %81, align 4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3gfx4Rect5InsetERKNS_6InsetsE(%"class.gfx::Rect"* nocapture, %"class.gfx::Insets"* nocapture readonly dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Insets", %"class.gfx::Insets"* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Insets", %"class.gfx::Insets"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.gfx::Insets", %"class.gfx::Insets"* %1, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.gfx::Insets", %"class.gfx::Insets"* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %4, 0
  %14 = select i1 %13, i32 -2147483648, i32 2147483647
  %15 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %12, i32 %4) #10
  %16 = extractvalue { i32, i1 } %15, 1
  %17 = extractvalue { i32, i1 } %15, 0
  %18 = select i1 %16, i32 %14, i32 %17
  store i32 %18, i32* %11, align 4
  %19 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %6, 0
  %22 = select i1 %21, i32 -2147483648, i32 2147483647
  %23 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %20, i32 %6) #10
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %22, i32 %25
  store i32 %26, i32* %19, align 4
  %27 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %8, 0
  %30 = select i1 %29, i32 -2147483648, i32 2147483647
  %31 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %8) #10
  %32 = extractvalue { i32, i1 } %31, 1
  %33 = extractvalue { i32, i1 } %31, 0
  %34 = select i1 %32, i32 %30, i32 %33, !prof !2
  %35 = icmp sgt i32 %34, -1
  %36 = select i1 %35, i32 -2147483648, i32 2147483647
  %37 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %28, i32 %34) #10
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = extractvalue { i32, i1 } %37, 0
  %40 = select i1 %38, i32 %36, i32 %39, !prof !2
  %41 = icmp sgt i32 %18, 0
  %42 = icmp sgt i32 %40, 0
  %43 = and i1 %41, %42
  %44 = sub nuw nsw i32 2147483647, %18
  %45 = icmp ult i32 %44, %40
  %46 = and i1 %45, %43
  %47 = select i1 %46, i32 %44, i32 %40
  %48 = icmp sgt i32 %47, 0
  %49 = select i1 %48, i32 %47, i32 0
  store i32 %49, i32* %27, align 4
  %50 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = icmp slt i32 %10, 0
  %53 = select i1 %52, i32 -2147483648, i32 2147483647
  %54 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %10) #10
  %55 = extractvalue { i32, i1 } %54, 1
  %56 = extractvalue { i32, i1 } %54, 0
  %57 = select i1 %55, i32 %53, i32 %56, !prof !2
  %58 = icmp sgt i32 %57, -1
  %59 = select i1 %58, i32 -2147483648, i32 2147483647
  %60 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %51, i32 %57) #10
  %61 = extractvalue { i32, i1 } %60, 1
  %62 = extractvalue { i32, i1 } %60, 0
  %63 = select i1 %61, i32 %59, i32 %62, !prof !2
  %64 = icmp sgt i32 %26, 0
  %65 = icmp sgt i32 %63, 0
  %66 = and i1 %64, %65
  %67 = sub nuw nsw i32 2147483647, %26
  %68 = icmp ult i32 %67, %63
  %69 = and i1 %68, %66
  %70 = select i1 %69, i32 %67, i32 %63
  %71 = icmp sgt i32 %70, 0
  %72 = select i1 %71, i32 %70, i32 0
  store i32 %72, i32* %50, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx4Rect5InsetEiiii(%"class.gfx::Rect"* nocapture, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %1, 0
  %9 = select i1 %8, i32 -2147483648, i32 2147483647
  %10 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %7, i32 %1) #10
  %11 = extractvalue { i32, i1 } %10, 1
  %12 = extractvalue { i32, i1 } %10, 0
  %13 = select i1 %11, i32 %9, i32 %12
  store i32 %13, i32* %6, align 4
  %14 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %2, 0
  %17 = select i1 %16, i32 -2147483648, i32 2147483647
  %18 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %15, i32 %2) #10
  %19 = extractvalue { i32, i1 } %18, 1
  %20 = extractvalue { i32, i1 } %18, 0
  %21 = select i1 %19, i32 %17, i32 %20
  store i32 %21, i32* %14, align 4
  %22 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %3, 0
  %25 = select i1 %24, i32 -2147483648, i32 2147483647
  %26 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %3) #10
  %27 = extractvalue { i32, i1 } %26, 1
  %28 = extractvalue { i32, i1 } %26, 0
  %29 = select i1 %27, i32 %25, i32 %28, !prof !2
  %30 = icmp sgt i32 %29, -1
  %31 = select i1 %30, i32 -2147483648, i32 2147483647
  %32 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %23, i32 %29) #10
  %33 = extractvalue { i32, i1 } %32, 1
  %34 = extractvalue { i32, i1 } %32, 0
  %35 = select i1 %33, i32 %31, i32 %34, !prof !2
  %36 = icmp sgt i32 %13, 0
  %37 = icmp sgt i32 %35, 0
  %38 = and i1 %36, %37
  %39 = sub nuw nsw i32 2147483647, %13
  %40 = icmp ult i32 %39, %35
  %41 = and i1 %40, %38
  %42 = select i1 %41, i32 %39, i32 %35
  %43 = icmp sgt i32 %42, 0
  %44 = select i1 %43, i32 %42, i32 0
  store i32 %44, i32* %22, align 4
  %45 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = icmp slt i32 %4, 0
  %48 = select i1 %47, i32 -2147483648, i32 2147483647
  %49 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %2, i32 %4) #10
  %50 = extractvalue { i32, i1 } %49, 1
  %51 = extractvalue { i32, i1 } %49, 0
  %52 = select i1 %50, i32 %48, i32 %51, !prof !2
  %53 = icmp sgt i32 %52, -1
  %54 = select i1 %53, i32 -2147483648, i32 2147483647
  %55 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %46, i32 %52) #10
  %56 = extractvalue { i32, i1 } %55, 1
  %57 = extractvalue { i32, i1 } %55, 0
  %58 = select i1 %56, i32 %54, i32 %57, !prof !2
  %59 = icmp sgt i32 %21, 0
  %60 = icmp sgt i32 %58, 0
  %61 = and i1 %59, %60
  %62 = sub nuw nsw i32 2147483647, %21
  %63 = icmp ult i32 %62, %58
  %64 = and i1 %63, %61
  %65 = select i1 %64, i32 %62, i32 %58
  %66 = icmp sgt i32 %65, 0
  %67 = select i1 %66, i32 %65, i32 0
  store i32 %67, i32* %45, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx4Rect6OffsetEii(%"class.gfx::Rect"* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp slt i32 %1, 0
  %7 = select i1 %6, i32 -2147483648, i32 2147483647
  %8 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %5, i32 %1) #10
  %9 = extractvalue { i32, i1 } %8, 1
  %10 = extractvalue { i32, i1 } %8, 0
  %11 = select i1 %9, i32 %7, i32 %10
  store i32 %11, i32* %4, align 4
  %12 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %2, 0
  %15 = select i1 %14, i32 -2147483648, i32 2147483647
  %16 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %13, i32 %2) #10
  %17 = extractvalue { i32, i1 } %16, 1
  %18 = extractvalue { i32, i1 } %16, 0
  %19 = select i1 %17, i32 %15, i32 %18
  store i32 %19, i32* %12, align 4
  %20 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 %11, 0
  %23 = icmp sgt i32 %21, 0
  %24 = and i1 %23, %22
  %25 = sub nuw nsw i32 2147483647, %11
  %26 = icmp ult i32 %25, %21
  %27 = and i1 %26, %24
  %28 = select i1 %27, i32 %25, i32 %21
  %29 = icmp sgt i32 %28, 0
  %30 = select i1 %29, i32 %28, i32 0
  store i32 %30, i32* %20, align 4
  %31 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp sgt i32 %19, 0
  %34 = icmp sgt i32 %32, 0
  %35 = and i1 %34, %33
  %36 = sub nuw nsw i32 2147483647, %19
  %37 = icmp ult i32 %36, %32
  %38 = and i1 %37, %35
  %39 = select i1 %38, i32 %36, i32 %32
  %40 = icmp sgt i32 %39, 0
  %41 = select i1 %40, i32 %39, i32 0
  store i32 %41, i32* %31, align 4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3gfx4RectpLERKNS_8Vector2dE(%"class.gfx::Rect"* nocapture, %"class.gfx::Vector2d"* nocapture readonly dereferenceable(8)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 0
  %8 = select i1 %7, i32 -2147483648, i32 2147483647
  %9 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %6) #10
  %10 = extractvalue { i32, i1 } %9, 1
  %11 = extractvalue { i32, i1 } %9, 0
  %12 = select i1 %10, i32 %8, i32 %11
  store i32 %12, i32* %3, align 4
  %13 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 0
  %18 = select i1 %17, i32 -2147483648, i32 2147483647
  %19 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %14, i32 %16) #10
  %20 = extractvalue { i32, i1 } %19, 1
  %21 = extractvalue { i32, i1 } %19, 0
  %22 = select i1 %20, i32 %18, i32 %21
  store i32 %22, i32* %13, align 4
  %23 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp sgt i32 %12, 0
  %26 = icmp sgt i32 %24, 0
  %27 = and i1 %26, %25
  %28 = sub nuw nsw i32 2147483647, %12
  %29 = icmp ult i32 %28, %24
  %30 = and i1 %29, %27
  %31 = select i1 %30, i32 %28, i32 %24
  %32 = icmp sgt i32 %31, 0
  %33 = select i1 %32, i32 %31, i32 0
  store i32 %33, i32* %23, align 4
  %34 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp sgt i32 %22, 0
  %37 = icmp sgt i32 %35, 0
  %38 = and i1 %37, %36
  %39 = sub nuw nsw i32 2147483647, %22
  %40 = icmp ult i32 %39, %35
  %41 = and i1 %40, %38
  %42 = select i1 %41, i32 %39, i32 %35
  %43 = icmp sgt i32 %42, 0
  %44 = select i1 %43, i32 %42, i32 0
  store i32 %44, i32* %34, align 4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3gfx4RectmIERKNS_8Vector2dE(%"class.gfx::Rect"* nocapture, %"class.gfx::Vector2d"* nocapture readonly dereferenceable(8)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %6, -1
  %8 = select i1 %7, i32 -2147483648, i32 2147483647
  %9 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %4, i32 %6) #10
  %10 = extractvalue { i32, i1 } %9, 1
  %11 = extractvalue { i32, i1 } %9, 0
  %12 = select i1 %10, i32 %8, i32 %11, !prof !2
  store i32 %12, i32* %3, align 4
  %13 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp sgt i32 %16, -1
  %18 = select i1 %17, i32 -2147483648, i32 2147483647
  %19 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %14, i32 %16) #10
  %20 = extractvalue { i32, i1 } %19, 1
  %21 = extractvalue { i32, i1 } %19, 0
  %22 = select i1 %20, i32 %18, i32 %21, !prof !2
  store i32 %22, i32* %13, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK3gfx4Rect10InsetsFromERKS0_(%"class.gfx::Rect"* nocapture readonly, %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = sub nsw i32 %4, %6
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = sub nsw i32 %9, %11
  %13 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = sub i32 %6, %4
  %18 = add i32 %17, %14
  %19 = sub i32 %18, %16
  %20 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = sub i32 %11, %9
  %25 = add i32 %24, %21
  %26 = sub i32 %25, %23
  %27 = icmp sgt i32 %7, 0
  %28 = icmp sgt i32 %19, 0
  %29 = and i1 %27, %28
  %30 = sub nuw nsw i32 2147483647, %7
  %31 = icmp ult i32 %30, %19
  %32 = and i1 %31, %29
  br i1 %32, label %40, label %33

33:                                               ; preds = %2
  %34 = and i32 %19, %7
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 -2147483648, %7
  %37 = icmp sgt i32 %36, %19
  %38 = and i1 %37, %35
  %39 = select i1 %38, i32 %36, i32 %19
  br label %40

40:                                               ; preds = %33, %2
  %41 = phi i32 [ %39, %33 ], [ %30, %2 ]
  %42 = icmp sgt i32 %12, 0
  %43 = icmp sgt i32 %26, 0
  %44 = and i1 %42, %43
  %45 = sub nuw nsw i32 2147483647, %12
  %46 = icmp ult i32 %45, %26
  %47 = and i1 %46, %44
  br i1 %47, label %55, label %48

48:                                               ; preds = %40
  %49 = and i32 %26, %12
  %50 = icmp slt i32 %49, 0
  %51 = sub nsw i32 -2147483648, %12
  %52 = icmp sgt i32 %51, %26
  %53 = and i1 %52, %50
  %54 = select i1 %53, i32 %51, i32 %26
  br label %55

55:                                               ; preds = %40, %48
  %56 = phi i32 [ %54, %48 ], [ %45, %40 ]
  %57 = zext i32 %12 to i64
  %58 = shl nuw i64 %57, 32
  %59 = zext i32 %7 to i64
  %60 = or i64 %58, %59
  %61 = insertvalue { i64, i64 } undef, i64 %60, 0
  %62 = zext i32 %56 to i64
  %63 = shl nuw i64 %62, 32
  %64 = zext i32 %41 to i64
  %65 = or i64 %63, %64
  %66 = insertvalue { i64, i64 } %61, i64 %65, 1
  ret { i64, i64 } %66
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3gfx4RectltERKS0_(%"class.gfx::Rect"* nocapture readonly, %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %9, %11
  %13 = and i1 %7, %12
  br i1 %13, label %14, label %28

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %20, label %26

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %22, %24
  br label %34

26:                                               ; preds = %14
  %27 = icmp slt i32 %16, %18
  br label %34

28:                                               ; preds = %2
  %29 = icmp slt i32 %9, %11
  br i1 %29, label %34, label %30

30:                                               ; preds = %28
  %31 = icmp sge i32 %11, %9
  %32 = icmp slt i32 %4, %6
  %33 = and i1 %32, %31
  ret i1 %33

34:                                               ; preds = %28, %26, %20
  %35 = phi i1 [ %25, %20 ], [ %27, %26 ], [ true, %28 ]
  ret i1 %35
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3gfx4Rect8ContainsEii(%"class.gfx::Rect"* nocapture readonly, i32, i32) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, %1
  br i1 %6, label %21, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, %5
  %11 = icmp sgt i32 %10, %1
  br i1 %11, label %12, label %21

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %14, %2
  br i1 %15, label %21, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, %14
  %20 = icmp sgt i32 %19, %2
  br label %21

21:                                               ; preds = %12, %3, %16, %7
  %22 = phi i1 [ false, %12 ], [ false, %7 ], [ false, %3 ], [ %20, %16 ]
  ret i1 %22
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3gfx4Rect8ContainsERKS0_(%"class.gfx::Rect"* nocapture readonly, %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %4, %6
  br i1 %7, label %30, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %4
  %12 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = add nsw i32 %13, %6
  %15 = icmp sgt i32 %11, %14
  br i1 %15, label %30, label %16

16:                                               ; preds = %8
  %17 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %18, %20
  br i1 %21, label %30, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, %18
  %26 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = add nsw i32 %27, %20
  %29 = icmp sle i32 %25, %28
  br label %30

30:                                               ; preds = %16, %8, %2, %22
  %31 = phi i1 [ false, %16 ], [ false, %8 ], [ false, %2 ], [ %29, %22 ]
  ret i1 %31
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3gfx4Rect10IntersectsERKS0_(%"class.gfx::Rect"* nocapture readonly, %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %38, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %38, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %38, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %38, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = add nsw i32 %22, %4
  %24 = icmp slt i32 %20, %23
  %25 = add nsw i32 %20, %12
  %26 = icmp sgt i32 %25, %22
  %27 = and i1 %26, %24
  br i1 %27, label %28, label %38

28:                                               ; preds = %18
  %29 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = add nsw i32 %8, %32
  %34 = icmp slt i32 %30, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %28
  %36 = add nsw i32 %16, %30
  %37 = icmp sgt i32 %36, %32
  br label %38

38:                                               ; preds = %10, %2, %28, %18, %35, %14, %6
  %39 = phi i1 [ false, %28 ], [ false, %18 ], [ false, %14 ], [ false, %6 ], [ %37, %35 ], [ false, %2 ], [ false, %10 ]
  ret i1 %39
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx4Rect9IntersectERKS0_(%"class.gfx::Rect"* nocapture, %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %18, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %10, %2, %14, %6
  %19 = bitcast %"class.gfx::Rect"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 16, i1 false)
  br label %47

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %22, %24
  %26 = select i1 %25, i32 %24, i32 %22
  %27 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %28, %30
  %32 = select i1 %31, i32 %30, i32 %28
  %33 = add nsw i32 %22, %4
  %34 = add nsw i32 %24, %12
  %35 = icmp slt i32 %34, %33
  %36 = select i1 %35, i32 %34, i32 %33
  %37 = add nsw i32 %8, %28
  %38 = add nsw i32 %16, %30
  %39 = icmp slt i32 %38, %37
  %40 = select i1 %39, i32 %38, i32 %37
  %41 = icmp slt i32 %26, %36
  %42 = icmp slt i32 %32, %40
  %43 = and i1 %41, %42
  br i1 %43, label %46, label %44

44:                                               ; preds = %20
  %45 = bitcast %"class.gfx::Rect"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %45, i8 0, i64 16, i1 false)
  br label %47

46:                                               ; preds = %20
  tail call void @_ZN3gfx4Rect11SetByBoundsEiiii(%"class.gfx::Rect"* %0, i32 %26, i32 %32, i32 %36, i32 %40)
  br label %47

47:                                               ; preds = %44, %46, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx4Rect5UnionERKS0_(%"class.gfx::Rect"* nocapture, %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %2, %6
  %11 = bitcast %"class.gfx::Rect"* %0 to i8*
  %12 = bitcast %"class.gfx::Rect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %11, i8* align 4 %12, i64 16, i1 false)
  br label %42

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %42, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %42, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, %23
  %27 = select i1 %26, i32 %25, i32 %23
  %28 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, %29
  %33 = select i1 %32, i32 %31, i32 %29
  %34 = add nsw i32 %23, %4
  %35 = add nsw i32 %25, %15
  %36 = icmp slt i32 %34, %35
  %37 = select i1 %36, i32 %35, i32 %34
  %38 = add nsw i32 %8, %29
  %39 = add nsw i32 %19, %31
  %40 = icmp slt i32 %38, %39
  %41 = select i1 %40, i32 %39, i32 %38
  tail call void @_ZN3gfx4Rect11SetByBoundsEiiii(%"class.gfx::Rect"* %0, i32 %27, i32 %33, i32 %37, i32 %41)
  br label %42

42:                                               ; preds = %13, %17, %21, %10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx4Rect8SubtractERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %68, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %68, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %68, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %68, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = add nsw i32 %22, %4
  %24 = icmp slt i32 %20, %23
  %25 = add nsw i32 %20, %12
  %26 = icmp sgt i32 %25, %22
  %27 = and i1 %26, %24
  br i1 %27, label %28, label %68

28:                                               ; preds = %18
  %29 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = add nsw i32 %32, %8
  %34 = icmp slt i32 %30, %33
  %35 = add nsw i32 %30, %16
  %36 = icmp sgt i32 %35, %32
  %37 = and i1 %36, %34
  br i1 %37, label %38, label %68

38:                                               ; preds = %28
  %39 = icmp slt i32 %22, %20
  %40 = icmp sgt i32 %23, %25
  %41 = or i1 %39, %40
  %42 = icmp slt i32 %32, %30
  %43 = or i1 %41, %42
  %44 = icmp sgt i32 %33, %35
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %38
  %47 = bitcast %"class.gfx::Rect"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %47, i8 0, i64 16, i1 false)
  br label %68

48:                                               ; preds = %38
  %49 = icmp sgt i32 %30, %32
  %50 = icmp slt i32 %35, %33
  %51 = or i1 %49, %50
  br i1 %51, label %56, label %52

52:                                               ; preds = %48
  br i1 %39, label %53, label %63

53:                                               ; preds = %52
  %54 = icmp slt i32 %25, %23
  %55 = select i1 %54, i32 %23, i32 %20
  br label %63

56:                                               ; preds = %48
  %57 = icmp slt i32 %25, %23
  %58 = or i1 %39, %57
  br i1 %58, label %63, label %59

59:                                               ; preds = %56
  br i1 %49, label %60, label %63

60:                                               ; preds = %59
  %61 = icmp slt i32 %35, %33
  %62 = select i1 %61, i32 %33, i32 %30
  br label %63

63:                                               ; preds = %60, %53, %59, %52, %56
  %64 = phi i32 [ %22, %56 ], [ %25, %52 ], [ %22, %59 ], [ %22, %53 ], [ %22, %60 ]
  %65 = phi i32 [ %32, %56 ], [ %32, %52 ], [ %35, %59 ], [ %32, %53 ], [ %32, %60 ]
  %66 = phi i32 [ %23, %56 ], [ %23, %52 ], [ %23, %59 ], [ %55, %53 ], [ %23, %60 ]
  %67 = phi i32 [ %33, %56 ], [ %33, %52 ], [ %33, %59 ], [ %33, %53 ], [ %62, %60 ]
  tail call void @_ZN3gfx4Rect11SetByBoundsEiiii(%"class.gfx::Rect"* %0, i32 %64, i32 %65, i32 %66, i32 %67)
  br label %68

68:                                               ; preds = %10, %2, %6, %14, %18, %28, %63, %46
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx4Rect11AdjustToFitERKS0_(%"class.gfx::Rect"* nocapture, %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %8, %14
  %16 = select i1 %15, i32 %8, i32 %14
  %17 = icmp slt i32 %4, %12
  br i1 %17, label %24, label %18

18:                                               ; preds = %2
  %19 = add nsw i32 %14, %12
  %20 = add nsw i32 %16, %4
  %21 = icmp slt i32 %20, %19
  %22 = select i1 %21, i32 %20, i32 %19
  %23 = sub nsw i32 %22, %16
  br label %24

24:                                               ; preds = %2, %18
  %25 = phi i32 [ %23, %18 ], [ %12, %2 ]
  %26 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %10, %29
  %31 = select i1 %30, i32 %10, i32 %29
  %32 = icmp slt i32 %6, %27
  br i1 %32, label %39, label %33

33:                                               ; preds = %24
  %34 = add nsw i32 %29, %27
  %35 = add nsw i32 %31, %6
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %36, i32 %35, i32 %34
  %38 = sub nsw i32 %37, %31
  br label %39

39:                                               ; preds = %24, %33
  %40 = phi i32 [ %38, %33 ], [ %27, %24 ]
  store i32 %25, i32* %3, align 4
  store i32 %40, i32* %5, align 4
  %41 = icmp sgt i32 %25, 0
  %42 = icmp sgt i32 %16, 0
  %43 = and i1 %42, %41
  %44 = sub nuw nsw i32 2147483647, %25
  %45 = icmp ult i32 %44, %16
  %46 = and i1 %45, %43
  %47 = select i1 %46, i32 %44, i32 %16
  %48 = icmp sgt i32 %47, 0
  %49 = select i1 %48, i32 %47, i32 0
  store i32 %49, i32* %7, align 4
  %50 = icmp sgt i32 %40, 0
  %51 = icmp sgt i32 %31, 0
  %52 = and i1 %51, %50
  %53 = sub nuw nsw i32 2147483647, %40
  %54 = icmp ult i32 %53, %31
  %55 = and i1 %54, %52
  %56 = select i1 %55, i32 %53, i32 %31
  %57 = icmp sgt i32 %56, 0
  %58 = select i1 %57, i32 %56, i32 0
  store i32 %58, i32* %9, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK3gfx4Rect11CenterPointEv(%"class.gfx::Rect"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = sdiv i32 %5, 2
  %7 = add nsw i32 %6, %3
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = sdiv i32 %11, 2
  %13 = add nsw i32 %12, %9
  %14 = zext i32 %13 to i64
  %15 = shl nuw i64 %14, 32
  %16 = zext i32 %7 to i64
  %17 = or i64 %15, %16
  ret i64 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx4Rect19ClampToCenteredSizeERKNS_4SizeE(%"class.gfx::Rect"* nocapture, %"class.gfx::Size"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, %4
  %8 = select i1 %7, i32 %6, i32 %4
  %9 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, %10
  %14 = select i1 %13, i32 %12, i32 %10
  %15 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = sub nsw i32 %4, %8
  %18 = sdiv i32 %17, 2
  %19 = add nsw i32 %18, %16
  %20 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = sub nsw i32 %10, %14
  %23 = sdiv i32 %22, 2
  %24 = add nsw i32 %23, %21
  store i32 %19, i32* %15, align 4
  store i32 %24, i32* %20, align 4
  %25 = icmp sgt i32 %19, 0
  %26 = icmp sgt i32 %8, 0
  %27 = and i1 %26, %25
  %28 = sub nuw nsw i32 2147483647, %19
  %29 = icmp ult i32 %28, %8
  %30 = and i1 %29, %27
  %31 = select i1 %30, i32 %28, i32 %8
  %32 = icmp sgt i32 %31, 0
  %33 = select i1 %32, i32 %31, i32 0
  store i32 %33, i32* %3, align 4
  %34 = icmp sgt i32 %24, 0
  %35 = icmp sgt i32 %14, 0
  %36 = and i1 %35, %34
  %37 = sub nuw nsw i32 2147483647, %24
  %38 = icmp ult i32 %37, %14
  %39 = and i1 %38, %36
  %40 = select i1 %39, i32 %37, i32 %14
  %41 = icmp sgt i32 %40, 0
  %42 = select i1 %41, i32 %40, i32 0
  store i32 %42, i32* %9, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3gfx4Rect9TransposeEv(%"class.gfx::Rect"* nocapture) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %9 = load i32, i32* %8, align 4
  store i32 %3, i32* %4, align 4
  store i32 %5, i32* %2, align 4
  %10 = icmp sgt i32 %3, 0
  %11 = icmp sgt i32 %7, 0
  %12 = and i1 %10, %11
  %13 = sub nuw nsw i32 2147483647, %3
  %14 = icmp ult i32 %13, %7
  %15 = and i1 %14, %12
  %16 = select i1 %15, i32 %13, i32 %7
  %17 = icmp sgt i32 %16, 0
  %18 = select i1 %17, i32 %16, i32 0
  store i32 %18, i32* %8, align 4
  %19 = icmp sgt i32 %5, 0
  %20 = icmp sgt i32 %9, 0
  %21 = and i1 %19, %20
  %22 = sub nuw nsw i32 2147483647, %5
  %23 = icmp ult i32 %22, %9
  %24 = and i1 %23, %21
  %25 = select i1 %24, i32 %22, i32 %9
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  store i32 %27, i32* %6, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK3gfx4Rect15SplitVerticallyEPS0_S1_(%"class.gfx::Rect"* nocapture readonly, %"class.gfx::Rect"* nocapture, %"class.gfx::Rect"* nocapture) local_unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = sdiv i32 %9, 2
  %11 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  store i32 %5, i32* %13, align 4
  %14 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  store i32 %7, i32* %14, align 4
  %15 = icmp sgt i32 %5, 0
  %16 = icmp sgt i32 %9, 1
  %17 = and i1 %15, %16
  %18 = sub nuw nsw i32 2147483647, %5
  %19 = icmp ult i32 %18, %10
  %20 = and i1 %19, %17
  %21 = select i1 %20, i32 %18, i32 %10
  %22 = icmp sgt i32 %21, 0
  %23 = select i1 %22, i32 %21, i32 0
  %24 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  store i32 %23, i32* %24, align 4
  %25 = icmp sgt i32 %7, 0
  %26 = icmp sgt i32 %12, 0
  %27 = and i1 %25, %26
  %28 = sub nuw nsw i32 2147483647, %7
  %29 = icmp ult i32 %28, %12
  %30 = and i1 %29, %27
  %31 = select i1 %30, i32 %28, i32 %12
  %32 = icmp sgt i32 %31, 0
  %33 = select i1 %32, i32 %31, i32 0
  %34 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  store i32 %33, i32* %34, align 4
  %35 = add nsw i32 %23, %5
  %36 = load i32, i32* %6, align 4
  %37 = load i32, i32* %8, align 4
  %38 = sub nsw i32 %37, %23
  %39 = load i32, i32* %11, align 4
  %40 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 0
  store i32 %35, i32* %40, align 4
  %41 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 1
  store i32 %36, i32* %41, align 4
  %42 = icmp sgt i32 %35, 0
  %43 = icmp sgt i32 %38, 0
  %44 = and i1 %42, %43
  %45 = sub nuw nsw i32 2147483647, %35
  %46 = icmp ult i32 %45, %38
  %47 = and i1 %46, %44
  %48 = select i1 %47, i32 %45, i32 %38
  %49 = icmp sgt i32 %48, 0
  %50 = select i1 %49, i32 %48, i32 0
  %51 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 0
  store i32 %50, i32* %51, align 4
  %52 = icmp sgt i32 %36, 0
  %53 = icmp sgt i32 %39, 0
  %54 = and i1 %52, %53
  %55 = sub nuw nsw i32 2147483647, %36
  %56 = icmp ult i32 %55, %39
  %57 = and i1 %56, %54
  %58 = select i1 %57, i32 %55, i32 %39
  %59 = icmp sgt i32 %58, 0
  %60 = select i1 %59, i32 %58, i32 0
  %61 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 1
  store i32 %60, i32* %61, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3gfx4Rect14SharesEdgeWithERKS0_(%"class.gfx::Rect"* nocapture readonly, %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %28

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %28

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, %18
  %22 = icmp eq i32 %16, %21
  br i1 %22, label %50, label %23

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, %16
  %27 = icmp eq i32 %26, %18
  br i1 %27, label %50, label %28

28:                                               ; preds = %23, %8, %2
  %29 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %34, label %50

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %36, %38
  br i1 %39, label %40, label %50

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = add nsw i32 %42, %6
  %44 = icmp eq i32 %4, %43
  br i1 %44, label %50, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = add nsw i32 %47, %4
  %49 = icmp eq i32 %48, %6
  br label %50

50:                                               ; preds = %28, %34, %45, %40, %23, %14
  %51 = phi i1 [ true, %23 ], [ true, %14 ], [ false, %34 ], [ false, %28 ], [ true, %40 ], [ %49, %45 ]
  ret i1 %51
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK3gfx4Rect24ManhattanDistanceToPointERKNS_5PointE(%"class.gfx::Rect"* nocapture readonly, %"class.gfx::Point"* nocapture readonly dereferenceable(8)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = sub nsw i32 %4, %6
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = sub i32 %6, %4
  %11 = sub i32 %10, %9
  %12 = icmp slt i32 %7, %11
  %13 = select i1 %12, i32 %11, i32 %7
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = sub nsw i32 %17, %19
  %21 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = sub i32 %19, %17
  %24 = sub i32 %23, %22
  %25 = icmp slt i32 %20, %24
  %26 = select i1 %25, i32 %24, i32 %20
  %27 = icmp sgt i32 %26, 0
  %28 = select i1 %27, i32 %26, i32 0
  %29 = add nuw nsw i32 %28, %15
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3gfx4Rect25ManhattanInternalDistanceERKS0_(%"class.gfx::Rect"* nocapture readonly, %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.gfx::Rect", align 4
  %4 = bitcast %"class.gfx::Rect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #10
  %5 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 1, i32 1
  %9 = bitcast %"class.gfx::Rect"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 4 %9, i64 16, i1 false)
  %10 = load i32, i32* %7, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %2
  %13 = load i32, i32* %8, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %12, %2
  %16 = bitcast %"class.gfx::Rect"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 4 %16, i64 16, i1 false) #10
  br label %44

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %44, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %44, label %25

25:                                               ; preds = %21
  %26 = load i32, i32* %5, align 4
  %27 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, %26
  %30 = select i1 %29, i32 %28, i32 %26
  %31 = load i32, i32* %6, align 4
  %32 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = icmp slt i32 %33, %31
  %35 = select i1 %34, i32 %33, i32 %31
  %36 = add nsw i32 %26, %10
  %37 = add nsw i32 %28, %19
  %38 = icmp slt i32 %36, %37
  %39 = select i1 %38, i32 %37, i32 %36
  %40 = add nsw i32 %31, %13
  %41 = add nsw i32 %33, %23
  %42 = icmp slt i32 %40, %41
  %43 = select i1 %42, i32 %41, i32 %40
  call void @_ZN3gfx4Rect11SetByBoundsEiiii(%"class.gfx::Rect"* nonnull %3, i32 %30, i32 %35, i32 %39, i32 %43) #10
  br label %44

44:                                               ; preds = %15, %17, %21, %25
  %45 = load i32, i32* %7, align 4
  %46 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = sub nsw i32 %45, %47
  %49 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = sub i32 %48, %50
  %52 = icmp sgt i32 %51, -1
  %53 = select i1 %52, i32 %51, i32 -1
  %54 = load i32, i32* %8, align 4
  %55 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = sub nsw i32 %54, %56
  %58 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = sub i32 %57, %59
  %61 = icmp sgt i32 %60, -1
  %62 = select i1 %61, i32 %60, i32 -1
  %63 = add i32 %53, 2
  %64 = add i32 %63, %62
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #10
  ret i32 %64
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3gfx4Rect8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.gfx::Rect"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0
  call void @_ZNK3gfx5Point8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %3, %"class.gfx::Point"* %6) #10
  %7 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = select i1 %10, i8* %12, i8* %5
  %14 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #10
  %15 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1
  call void @_ZNK3gfx4Size8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %4, %"class.gfx::Size"* %15) #10
  %16 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = select i1 %19, i8* %21, i8* %14
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* %13, i8* %22) #10
  %23 = load i8, i8* %17, align 1
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %2
  %26 = load i8*, i8** %20, align 8
  call void @_ZdlPv(i8* %26) #11
  br label %27

27:                                               ; preds = %2, %25
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #10
  %28 = load i8, i8* %8, align 1
  %29 = icmp slt i8 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %27
  %31 = load i8*, i8** %11, align 8
  call void @_ZdlPv(i8* %31) #11
  br label %32

32:                                               ; preds = %27, %30
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #10
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #7

declare void @_ZNK3gfx5Point8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.gfx::Point"*) local_unnamed_addr #7

declare void @_ZNK3gfx4Size8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.gfx::Size"*) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3gfx4Rect18ApproximatelyEqualERKS0_i(%"class.gfx::Rect"* nocapture readonly, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), i32) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = sub i32 %5, %7
  %9 = icmp slt i32 %8, 0
  %10 = sub nsw i32 0, %8
  %11 = select i1 %9, i32 %10, i32 %8
  %12 = icmp sgt i32 %11, %2
  br i1 %12, label %45, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = sub i32 %15, %17
  %19 = icmp slt i32 %18, 0
  %20 = sub nsw i32 0, %18
  %21 = select i1 %19, i32 %20, i32 %18
  %22 = icmp sgt i32 %21, %2
  br i1 %22, label %45, label %23

23:                                               ; preds = %13
  %24 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = add i32 %8, %25
  %29 = sub i32 %28, %27
  %30 = icmp slt i32 %29, 0
  %31 = sub nsw i32 0, %29
  %32 = select i1 %30, i32 %31, i32 %29
  %33 = icmp sgt i32 %32, %2
  br i1 %33, label %45, label %34

34:                                               ; preds = %23
  %35 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = add i32 %18, %36
  %40 = sub i32 %39, %38
  %41 = icmp slt i32 %40, 0
  %42 = sub nsw i32 0, %40
  %43 = select i1 %41, i32 %42, i32 %40
  %44 = icmp sle i32 %43, %2
  br label %45

45:                                               ; preds = %23, %13, %3, %34
  %46 = phi i1 [ false, %23 ], [ false, %13 ], [ false, %3 ], [ %44, %34 ]
  ret i1 %46
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN3gfxplERKNS_4RectERKNS_8Vector2dE(%"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Vector2d"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = bitcast %"class.gfx::Rect"* %0 to i64*
  %4 = load i64, i64* %3, align 4
  %5 = trunc i64 %4 to i32
  %6 = lshr i64 %4, 32
  %7 = trunc i64 %6 to i32
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1
  %9 = bitcast %"class.gfx::Size"* %8 to i64*
  %10 = load i64, i64* %9, align 4
  %11 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  %14 = select i1 %13, i32 -2147483648, i32 2147483647
  %15 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %5, i32 %12) #10
  %16 = extractvalue { i32, i1 } %15, 1
  %17 = extractvalue { i32, i1 } %15, 0
  %18 = select i1 %16, i32 %14, i32 %17
  %19 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  %22 = select i1 %21, i32 -2147483648, i32 2147483647
  %23 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %7, i32 %20) #10
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %22, i32 %25
  %27 = trunc i64 %10 to i32
  %28 = icmp sgt i32 %18, 0
  %29 = icmp sgt i32 %27, 0
  %30 = and i1 %29, %28
  %31 = sub nuw nsw i32 2147483647, %18
  %32 = icmp ult i32 %31, %27
  %33 = and i1 %32, %30
  %34 = select i1 %33, i32 %31, i32 %27
  %35 = icmp sgt i32 %34, 0
  %36 = select i1 %35, i32 %34, i32 0
  %37 = zext i32 %36 to i64
  %38 = lshr i64 %10, 32
  %39 = trunc i64 %38 to i32
  %40 = icmp sgt i32 %26, 0
  %41 = icmp sgt i32 %39, 0
  %42 = and i1 %41, %40
  %43 = sub nuw nsw i32 2147483647, %26
  %44 = icmp ult i32 %43, %39
  %45 = and i1 %44, %42
  %46 = select i1 %45, i32 %43, i32 %39
  %47 = icmp sgt i32 %46, 0
  %48 = select i1 %47, i32 %46, i32 0
  %49 = zext i32 %48 to i64
  %50 = shl nuw nsw i64 %49, 32
  %51 = or i64 %50, %37
  %52 = zext i32 %26 to i64
  %53 = shl nuw i64 %52, 32
  %54 = zext i32 %18 to i64
  %55 = or i64 %53, %54
  %56 = insertvalue { i64, i64 } undef, i64 %55, 0
  %57 = insertvalue { i64, i64 } %56, i64 %51, 1
  ret { i64, i64 } %57
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN3gfxmiERKNS_4RectERKNS_8Vector2dE(%"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Vector2d"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = bitcast %"class.gfx::Rect"* %0 to i64*
  %4 = load i64, i64* %3, align 4
  %5 = trunc i64 %4 to i32
  %6 = lshr i64 %4, 32
  %7 = trunc i64 %6 to i32
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1
  %9 = bitcast %"class.gfx::Size"* %8 to i64*
  %10 = load i64, i64* %9, align 4
  %11 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, -1
  %14 = select i1 %13, i32 -2147483648, i32 2147483647
  %15 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %5, i32 %12) #10
  %16 = extractvalue { i32, i1 } %15, 1
  %17 = extractvalue { i32, i1 } %15, 0
  %18 = select i1 %16, i32 %14, i32 %17, !prof !2
  %19 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %20, -1
  %22 = select i1 %21, i32 -2147483648, i32 2147483647
  %23 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %7, i32 %20) #10
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %22, i32 %25, !prof !2
  %27 = zext i32 %26 to i64
  %28 = shl nuw i64 %27, 32
  %29 = zext i32 %18 to i64
  %30 = or i64 %28, %29
  %31 = insertvalue { i64, i64 } undef, i64 %30, 0
  %32 = insertvalue { i64, i64 } %31, i64 %10, 1
  ret { i64, i64 } %32
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN3gfx14IntersectRectsERKNS_4RectES2_(%"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %"class.gfx::Rect"*
  %5 = bitcast { i64, i64 }* %3 to i32*
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %4, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %8 = bitcast i64* %7 to i32*
  %9 = bitcast { i64, i64 }* %3 to i8*
  %10 = bitcast %"class.gfx::Rect"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* align 4 %10, i64 16, i1 false)
  %11 = load i32, i32* %8, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %4, i64 0, i32 1, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %25, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %21, %17, %13, %2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 16, i1 false) #10
  br label %53

26:                                               ; preds = %21
  %27 = load i32, i32* %5, align 8
  %28 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %27, %29
  %31 = select i1 %30, i32 %29, i32 %27
  %32 = load i32, i32* %6, align 4
  %33 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %32, %34
  %36 = select i1 %35, i32 %34, i32 %32
  %37 = add nsw i32 %27, %11
  %38 = add nsw i32 %29, %19
  %39 = icmp slt i32 %38, %37
  %40 = select i1 %39, i32 %38, i32 %37
  %41 = add nsw i32 %32, %15
  %42 = add nsw i32 %34, %23
  %43 = icmp slt i32 %42, %41
  %44 = select i1 %43, i32 %42, i32 %41
  %45 = icmp slt i32 %31, %40
  %46 = icmp slt i32 %36, %44
  %47 = and i1 %45, %46
  br i1 %47, label %49, label %48

48:                                               ; preds = %26
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 16, i1 false) #10
  br label %53

49:                                               ; preds = %26
  call void @_ZN3gfx4Rect11SetByBoundsEiiii(%"class.gfx::Rect"* nonnull %4, i32 %31, i32 %36, i32 %40, i32 %44) #10
  %50 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = load i64, i64* %7, align 8
  br label %53

53:                                               ; preds = %25, %48, %49
  %54 = phi i64 [ 0, %25 ], [ 0, %48 ], [ %52, %49 ]
  %55 = phi i64 [ 0, %25 ], [ 0, %48 ], [ %51, %49 ]
  %56 = insertvalue { i64, i64 } undef, i64 %55, 0
  %57 = insertvalue { i64, i64 } %56, i64 %54, 1
  ret { i64, i64 } %57
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN3gfx10UnionRectsERKNS_4RectES2_(%"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %"class.gfx::Rect"*
  %5 = bitcast { i64, i64 }* %3 to i32*
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %4, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %8 = bitcast i64* %7 to i32*
  %9 = bitcast { i64, i64 }* %3 to i8*
  %10 = bitcast %"class.gfx::Rect"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* align 4 %10, i64 16, i1 false)
  %11 = load i32, i32* %8, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %4, i64 0, i32 1, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %13, %2
  %18 = bitcast %"class.gfx::Rect"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* align 4 %18, i64 16, i1 false) #10
  br label %46

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %46, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %46, label %27

27:                                               ; preds = %23
  %28 = load i32, i32* %5, align 8
  %29 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %30, %28
  %32 = select i1 %31, i32 %30, i32 %28
  %33 = load i32, i32* %6, align 4
  %34 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, %33
  %37 = select i1 %36, i32 %35, i32 %33
  %38 = add nsw i32 %28, %11
  %39 = add nsw i32 %30, %21
  %40 = icmp slt i32 %38, %39
  %41 = select i1 %40, i32 %39, i32 %38
  %42 = add nsw i32 %33, %15
  %43 = add nsw i32 %35, %25
  %44 = icmp slt i32 %42, %43
  %45 = select i1 %44, i32 %43, i32 %42
  call void @_ZN3gfx4Rect11SetByBoundsEiiii(%"class.gfx::Rect"* nonnull %4, i32 %32, i32 %37, i32 %41, i32 %45) #10
  br label %46

46:                                               ; preds = %17, %19, %23, %27
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = insertvalue { i64, i64 } undef, i64 %48, 0
  %50 = load i64, i64* %7, align 8
  %51 = insertvalue { i64, i64 } %49, i64 %50, 1
  ret { i64, i64 } %51
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN3gfx13SubtractRectsERKNS_4RectES2_(%"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* readonly dereferenceable(16)) local_unnamed_addr #0 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %"class.gfx::Rect"*
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %6 = bitcast { i64, i64 }* %3 to i8*
  %7 = bitcast %"class.gfx::Rect"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 4 %7, i64 16, i1 false)
  call void @_ZN3gfx4Rect8SubtractERKS0_(%"class.gfx::Rect"* nonnull %4, %"class.gfx::Rect"* dereferenceable(16) %1)
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = insertvalue { i64, i64 } undef, i64 %9, 0
  %11 = load i64, i64* %5, align 8
  %12 = insertvalue { i64, i64 } %10, i64 %11, 1
  ret { i64, i64 } %12
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN3gfx12BoundingRectERKNS_5PointES2_(%"class.gfx::Point"* nocapture readonly dereferenceable(8), %"class.gfx::Point"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %"class.gfx::Rect"*
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %6 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 16, i1 false) #10
  %7 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %10, %8
  %12 = select i1 %11, i32 %10, i32 %8
  %13 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, %14
  %18 = select i1 %17, i32 %16, i32 %14
  %19 = icmp slt i32 %8, %10
  %20 = select i1 %19, i32 %10, i32 %8
  %21 = icmp slt i32 %14, %16
  %22 = select i1 %21, i32 %16, i32 %14
  call void @_ZN3gfx4Rect11SetByBoundsEiiii(%"class.gfx::Rect"* nonnull %4, i32 %12, i32 %18, i32 %20, i32 %22)
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = load i64, i64* %5, align 8
  %27 = insertvalue { i64, i64 } %25, i64 %26, 1
  ret { i64, i64 } %27
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #8

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
