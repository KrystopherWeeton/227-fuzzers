; ModuleID = '../../third_party/opus/src/src/opus_projection_decoder.c'
source_filename = "../../third_party/opus/src/src/opus_projection_decoder.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.OpusProjectionDecoder = type { i32 }
%struct.MappingMatrix = type { i32, i32, i32 }
%struct.OpusMSDecoder = type { %struct.ChannelLayout }
%struct.ChannelLayout = type { i32, i32, i32, [256 x i8] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_projection_decoder_get_size(i32, i32, i32) local_unnamed_addr #0 {
  %4 = add nsw i32 %2, %1
  %5 = tail call i32 @mapping_matrix_get_size(i32 %4, i32 %0) #3
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = tail call i32 @opus_multistream_decoder_get_size(i32 %1, i32 %2) #3
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %7
  %11 = add nsw i32 %5, 8
  %12 = add nsw i32 %11, %8
  br label %13

13:                                               ; preds = %7, %3, %10
  %14 = phi i32 [ %12, %10 ], [ 0, %3 ], [ 0, %7 ]
  ret i32 %14
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @mapping_matrix_get_size(i32, i32) local_unnamed_addr #2

declare i32 @opus_multistream_decoder_get_size(i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_projection_decoder_init(%struct.OpusProjectionDecoder*, i32, i32, i32, i32, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %8 = alloca [255 x i8], align 16
  %9 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 255, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 255, i1 false)
  %10 = add i32 %4, %3
  %11 = mul i32 %10, %2
  %12 = sext i32 %11 to i64
  %13 = shl nsw i64 %12, 1
  %14 = trunc i64 %13 to i32
  %15 = icmp eq i32 %14, %6
  br i1 %15, label %16, label %194

16:                                               ; preds = %7
  %17 = alloca i16, i64 %12, align 16
  %18 = bitcast i16* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 %13, i1 false)
  %19 = icmp sgt i32 %11, 0
  br i1 %19, label %20, label %104

20:                                               ; preds = %16
  %21 = zext i32 %11 to i64
  %22 = icmp ult i32 %11, 8
  br i1 %22, label %87, label %23

23:                                               ; preds = %20
  %24 = and i64 %21, 4294967288
  %25 = add nsw i64 %24, -8
  %26 = lshr exact i64 %25, 3
  %27 = add nuw nsw i64 %26, 1
  %28 = and i64 %27, 1
  %29 = icmp eq i64 %25, 0
  br i1 %29, label %67, label %30

30:                                               ; preds = %23
  %31 = sub nuw nsw i64 %27, %28
  %32 = getelementptr inbounds i8, i8* %5, i64 -1
  %33 = getelementptr inbounds i8, i8* %5, i64 -1
  br label %34

34:                                               ; preds = %34, %30
  %35 = phi i64 [ 0, %30 ], [ %64, %34 ]
  %36 = phi i64 [ %31, %30 ], [ %65, %34 ]
  %37 = shl nuw nsw i64 %35, 1
  %38 = or i64 %37, 1
  %39 = getelementptr inbounds i8, i8* %32, i64 %38
  %40 = bitcast i8* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1
  %42 = shufflevector <16 x i8> %41, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %43 = shufflevector <16 x i8> %41, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %44 = zext <8 x i8> %43 to <8 x i16>
  %45 = shl nuw <8 x i16> %44, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %46 = zext <8 x i8> %42 to <8 x i16>
  %47 = or <8 x i16> %45, %46
  %48 = getelementptr inbounds i16, i16* %17, i64 %35
  %49 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> %47, <8 x i16>* %49, align 16
  %50 = or i64 %35, 8
  %51 = shl nuw nsw i64 %50, 1
  %52 = or i64 %51, 1
  %53 = getelementptr inbounds i8, i8* %33, i64 %52
  %54 = bitcast i8* %53 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1
  %56 = shufflevector <16 x i8> %55, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %57 = shufflevector <16 x i8> %55, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %58 = zext <8 x i8> %57 to <8 x i16>
  %59 = shl nuw <8 x i16> %58, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %60 = zext <8 x i8> %56 to <8 x i16>
  %61 = or <8 x i16> %59, %60
  %62 = getelementptr inbounds i16, i16* %17, i64 %50
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %63, align 16
  %64 = add i64 %35, 16
  %65 = add i64 %36, -2
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %34, !llvm.loop !2

67:                                               ; preds = %34, %23
  %68 = phi i64 [ 0, %23 ], [ %64, %34 ]
  %69 = icmp eq i64 %28, 0
  br i1 %69, label %85, label %70

70:                                               ; preds = %67
  %71 = shl nuw nsw i64 %68, 1
  %72 = or i64 %71, 1
  %73 = getelementptr inbounds i8, i8* %5, i64 -1
  %74 = getelementptr inbounds i8, i8* %73, i64 %72
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %78 = shufflevector <16 x i8> %76, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %79 = zext <8 x i8> %78 to <8 x i16>
  %80 = shl nuw <8 x i16> %79, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %81 = zext <8 x i8> %77 to <8 x i16>
  %82 = or <8 x i16> %80, %81
  %83 = getelementptr inbounds i16, i16* %17, i64 %68
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %84, align 16
  br label %85

85:                                               ; preds = %67, %70
  %86 = icmp eq i64 %24, %21
  br i1 %86, label %104, label %87

87:                                               ; preds = %85, %20
  %88 = phi i64 [ 0, %20 ], [ %24, %85 ]
  br label %89

89:                                               ; preds = %87, %89
  %90 = phi i64 [ %102, %89 ], [ %88, %87 ]
  %91 = shl nuw nsw i64 %90, 1
  %92 = or i64 %91, 1
  %93 = getelementptr inbounds i8, i8* %5, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i16
  %96 = shl nuw i16 %95, 8
  %97 = getelementptr inbounds i8, i8* %5, i64 %91
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i16
  %100 = or i16 %96, %99
  %101 = getelementptr inbounds i16, i16* %17, i64 %90
  store i16 %100, i16* %101, align 2
  %102 = add nuw nsw i64 %90, 1
  %103 = icmp eq i64 %102, %21
  br i1 %103, label %104, label %89, !llvm.loop !4

104:                                              ; preds = %89, %85, %16
  %105 = tail call i32 @mapping_matrix_get_size(i32 %2, i32 %10) #3
  %106 = getelementptr inbounds %struct.OpusProjectionDecoder, %struct.OpusProjectionDecoder* %0, i64 0, i32 0
  store i32 %105, i32* %106, align 4
  %107 = icmp eq i32 %105, 0
  br i1 %107, label %194, label %108

108:                                              ; preds = %104
  %109 = getelementptr inbounds %struct.OpusProjectionDecoder, %struct.OpusProjectionDecoder* %0, i64 2
  %110 = bitcast %struct.OpusProjectionDecoder* %109 to %struct.MappingMatrix*
  call void @mapping_matrix_init(%struct.MappingMatrix* %110, i32 %2, i32 %10, i32 0, i16* nonnull %17, i32 %6) #3
  %111 = icmp sgt i32 %2, 0
  br i1 %111, label %112, label %185

112:                                              ; preds = %108
  %113 = zext i32 %2 to i64
  %114 = icmp ult i32 %2, 32
  br i1 %114, label %177, label %115

115:                                              ; preds = %112
  %116 = and i64 %113, 4294967264
  %117 = add nsw i64 %116, -32
  %118 = lshr exact i64 %117, 5
  %119 = add nuw nsw i64 %118, 1
  %120 = and i64 %119, 3
  %121 = icmp ult i64 %117, 96
  br i1 %121, label %158, label %122

122:                                              ; preds = %115
  %123 = sub nsw i64 %119, %120
  br label %124

124:                                              ; preds = %124, %122
  %125 = phi i64 [ 0, %122 ], [ %154, %124 ]
  %126 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %122 ], [ %155, %124 ]
  %127 = phi i64 [ %123, %122 ], [ %156, %124 ]
  %128 = add <16 x i8> %126, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %129 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 %125
  %130 = bitcast i8* %129 to <16 x i8>*
  store <16 x i8> %126, <16 x i8>* %130, align 16
  %131 = getelementptr inbounds i8, i8* %129, i64 16
  %132 = bitcast i8* %131 to <16 x i8>*
  store <16 x i8> %128, <16 x i8>* %132, align 16
  %133 = or i64 %125, 32
  %134 = add <16 x i8> %126, <i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32>
  %135 = add <16 x i8> %126, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %136 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 %133
  %137 = bitcast i8* %136 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %137, align 16
  %138 = getelementptr inbounds i8, i8* %136, i64 16
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %135, <16 x i8>* %139, align 16
  %140 = or i64 %125, 64
  %141 = add <16 x i8> %126, <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>
  %142 = add <16 x i8> %126, <i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80>
  %143 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 %140
  %144 = bitcast i8* %143 to <16 x i8>*
  store <16 x i8> %141, <16 x i8>* %144, align 16
  %145 = getelementptr inbounds i8, i8* %143, i64 16
  %146 = bitcast i8* %145 to <16 x i8>*
  store <16 x i8> %142, <16 x i8>* %146, align 16
  %147 = or i64 %125, 96
  %148 = add <16 x i8> %126, <i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96>
  %149 = add <16 x i8> %126, <i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112>
  %150 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 %147
  %151 = bitcast i8* %150 to <16 x i8>*
  store <16 x i8> %148, <16 x i8>* %151, align 16
  %152 = getelementptr inbounds i8, i8* %150, i64 16
  %153 = bitcast i8* %152 to <16 x i8>*
  store <16 x i8> %149, <16 x i8>* %153, align 16
  %154 = add i64 %125, 128
  %155 = xor <16 x i8> %126, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %156 = add i64 %127, -4
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %158, label %124, !llvm.loop !6

158:                                              ; preds = %124, %115
  %159 = phi i64 [ 0, %115 ], [ %154, %124 ]
  %160 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %115 ], [ %155, %124 ]
  %161 = icmp eq i64 %120, 0
  br i1 %161, label %175, label %162

162:                                              ; preds = %158, %162
  %163 = phi i64 [ %171, %162 ], [ %159, %158 ]
  %164 = phi <16 x i8> [ %172, %162 ], [ %160, %158 ]
  %165 = phi i64 [ %173, %162 ], [ %120, %158 ]
  %166 = add <16 x i8> %164, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %167 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 %163
  %168 = bitcast i8* %167 to <16 x i8>*
  store <16 x i8> %164, <16 x i8>* %168, align 16
  %169 = getelementptr inbounds i8, i8* %167, i64 16
  %170 = bitcast i8* %169 to <16 x i8>*
  store <16 x i8> %166, <16 x i8>* %170, align 16
  %171 = add i64 %163, 32
  %172 = add <16 x i8> %164, <i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32>
  %173 = add i64 %165, -1
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %175, label %162, !llvm.loop !7

175:                                              ; preds = %162, %158
  %176 = icmp eq i64 %116, %113
  br i1 %176, label %185, label %177

177:                                              ; preds = %175, %112
  %178 = phi i64 [ 0, %112 ], [ %116, %175 ]
  br label %179

179:                                              ; preds = %177, %179
  %180 = phi i64 [ %183, %179 ], [ %178, %177 ]
  %181 = trunc i64 %180 to i8
  %182 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 %180
  store i8 %181, i8* %182, align 1
  %183 = add nuw nsw i64 %180, 1
  %184 = icmp eq i64 %183, %113
  br i1 %184, label %185, label %179, !llvm.loop !9

185:                                              ; preds = %179, %175, %108
  %186 = bitcast %struct.OpusProjectionDecoder* %0 to i8*
  %187 = load i32, i32* %106, align 4
  %188 = add i32 %187, 11
  %189 = and i32 %188, -8
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %186, i64 %190
  %192 = bitcast i8* %191 to %struct.OpusMSDecoder*
  %193 = call i32 @opus_multistream_decoder_init(%struct.OpusMSDecoder* %192, i32 %1, i32 %2, i32 %3, i32 %4, i8* nonnull %9) #3
  br label %194

194:                                              ; preds = %104, %7, %185
  %195 = phi i32 [ %193, %185 ], [ -1, %7 ], [ -1, %104 ]
  call void @llvm.lifetime.end.p0i8(i64 255, i8* nonnull %9) #3
  ret i32 %195
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @mapping_matrix_init(%struct.MappingMatrix*, i32, i32, i32, i16*, i32) local_unnamed_addr #2

declare i32 @opus_multistream_decoder_init(%struct.OpusMSDecoder*, i32, i32, i32, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.OpusProjectionDecoder* @opus_projection_decoder_create(i32, i32, i32, i32, i8* nocapture readonly, i32, i32*) local_unnamed_addr #0 {
  %8 = add nsw i32 %3, %2
  %9 = tail call i32 @mapping_matrix_get_size(i32 %8, i32 %1) #3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @opus_multistream_decoder_get_size(i32 %2, i32 %3) #3
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %11
  %15 = add nsw i32 %9, 8
  %16 = add nsw i32 %15, %12
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %11, %7, %14
  %19 = icmp eq i32* %6, null
  br i1 %19, label %37, label %20

20:                                               ; preds = %18
  store i32 -7, i32* %6, align 4
  br label %37

21:                                               ; preds = %14
  %22 = sext i32 %16 to i64
  %23 = tail call noalias i8* @malloc(i64 %22) #3
  %24 = bitcast i8* %23 to %struct.OpusProjectionDecoder*
  %25 = icmp eq i8* %23, null
  br i1 %25, label %26, label %29

26:                                               ; preds = %21
  %27 = icmp eq i32* %6, null
  br i1 %27, label %37, label %28

28:                                               ; preds = %26
  store i32 -7, i32* %6, align 4
  br label %37

29:                                               ; preds = %21
  %30 = tail call i32 @opus_projection_decoder_init(%struct.OpusProjectionDecoder* nonnull %24, i32 %0, i32 %1, i32 %2, i32 %3, i8* %4, i32 %5)
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %33, label %32

32:                                               ; preds = %29
  tail call void @free(i8* nonnull %23) #3
  br label %33

33:                                               ; preds = %29, %32
  %34 = phi %struct.OpusProjectionDecoder* [ null, %32 ], [ %24, %29 ]
  %35 = icmp eq i32* %6, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %33
  store i32 %30, i32* %6, align 4
  br label %37

37:                                               ; preds = %36, %33, %28, %26, %20, %18
  %38 = phi %struct.OpusProjectionDecoder* [ null, %18 ], [ null, %20 ], [ null, %26 ], [ null, %28 ], [ %34, %33 ], [ %34, %36 ]
  ret %struct.OpusProjectionDecoder* %38
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_projection_decode(%struct.OpusProjectionDecoder*, i8*, i32, i16*, i32, i32) local_unnamed_addr #0 {
  %7 = bitcast %struct.OpusProjectionDecoder* %0 to i8*
  %8 = getelementptr inbounds %struct.OpusProjectionDecoder, %struct.OpusProjectionDecoder* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = add i32 %9, 11
  %11 = and i32 %10, -8
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %7, i64 %12
  %14 = bitcast i8* %13 to %struct.OpusMSDecoder*
  %15 = bitcast i16* %3 to i8*
  %16 = getelementptr inbounds %struct.OpusProjectionDecoder, %struct.OpusProjectionDecoder* %0, i64 2
  %17 = bitcast %struct.OpusProjectionDecoder* %16 to i8*
  %18 = tail call i32 @opus_multistream_decode_native(%struct.OpusMSDecoder* %14, i8* %1, i32 %2, i8* %15, void (i8*, i32, i32, float*, i32, i32, i8*)* nonnull @opus_projection_copy_channel_out_short, i32 %4, i32 %5, i32 1, i8* %17) #3
  ret i32 %18
}

declare i32 @opus_multistream_decode_native(%struct.OpusMSDecoder*, i8*, i32, i8*, void (i8*, i32, i32, float*, i32, i32, i8*)*, i32, i32, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @opus_projection_copy_channel_out_short(i8*, i32, i32, float*, i32, i32, i8*) #0 {
  %8 = bitcast i8* %0 to i16*
  %9 = bitcast i8* %6 to %struct.MappingMatrix*
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %11, label %15

11:                                               ; preds = %7
  %12 = mul nsw i32 %5, %1
  %13 = sext i32 %12 to i64
  %14 = shl nsw i64 %13, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %0, i8 0, i64 %14, i1 false)
  br label %15

15:                                               ; preds = %11, %7
  %16 = icmp eq float* %3, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %15
  tail call void @mapping_matrix_multiply_channel_out_short(%struct.MappingMatrix* %9, float* nonnull %3, i32 %2, i32 %4, i16* %8, i32 %1, i32 %5) #3
  br label %18

18:                                               ; preds = %15, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_projection_decode_float(%struct.OpusProjectionDecoder*, i8*, i32, float*, i32, i32) local_unnamed_addr #0 {
  %7 = bitcast %struct.OpusProjectionDecoder* %0 to i8*
  %8 = getelementptr inbounds %struct.OpusProjectionDecoder, %struct.OpusProjectionDecoder* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = add i32 %9, 11
  %11 = and i32 %10, -8
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %7, i64 %12
  %14 = bitcast i8* %13 to %struct.OpusMSDecoder*
  %15 = bitcast float* %3 to i8*
  %16 = getelementptr inbounds %struct.OpusProjectionDecoder, %struct.OpusProjectionDecoder* %0, i64 2
  %17 = bitcast %struct.OpusProjectionDecoder* %16 to i8*
  %18 = tail call i32 @opus_multistream_decode_native(%struct.OpusMSDecoder* %14, i8* %1, i32 %2, i8* %15, void (i8*, i32, i32, float*, i32, i32, i8*)* nonnull @opus_projection_copy_channel_out_float, i32 %4, i32 %5, i32 0, i8* %17) #3
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define internal void @opus_projection_copy_channel_out_float(i8*, i32, i32, float*, i32, i32, i8*) #0 {
  %8 = bitcast i8* %0 to float*
  %9 = bitcast i8* %6 to %struct.MappingMatrix*
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %11, label %15

11:                                               ; preds = %7
  %12 = mul nsw i32 %5, %1
  %13 = sext i32 %12 to i64
  %14 = shl nsw i64 %13, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %0, i8 0, i64 %14, i1 false)
  br label %15

15:                                               ; preds = %11, %7
  %16 = icmp eq float* %3, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %15
  tail call void @mapping_matrix_multiply_channel_out_float(%struct.MappingMatrix* %9, float* nonnull %3, i32 %2, i32 %4, float* %8, i32 %1, i32 %5) #3
  br label %18

18:                                               ; preds = %15, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_projection_decoder_ctl(%struct.OpusProjectionDecoder*, i32, ...) local_unnamed_addr #0 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #3
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  %6 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %4)
  %7 = bitcast %struct.OpusProjectionDecoder* %0 to i8*
  %8 = getelementptr inbounds %struct.OpusProjectionDecoder, %struct.OpusProjectionDecoder* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = add i32 %9, 11
  %11 = and i32 %10, -8
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %7, i64 %12
  %14 = bitcast i8* %13 to %struct.OpusMSDecoder*
  %15 = call i32 @opus_multistream_decoder_ctl_va_list(%struct.OpusMSDecoder* %14, i32 %1, %struct.__va_list_tag* nonnull %5) #3
  call void @llvm.va_end(i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #3
  ret i32 %15
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #3

declare i32 @opus_multistream_decoder_ctl_va_list(%struct.OpusMSDecoder*, i32, %struct.__va_list_tag*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @opus_projection_decoder_destroy(%struct.OpusProjectionDecoder* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.OpusProjectionDecoder* %0 to i8*
  tail call void @free(i8* %2) #3
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

declare void @mapping_matrix_multiply_channel_out_short(%struct.MappingMatrix*, float*, i32, i32, i16*, i32, i32) local_unnamed_addr #2

declare void @mapping_matrix_multiply_channel_out_float(%struct.MappingMatrix*, float*, i32, i32, float*, i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = distinct !{!9, !5, !3}
