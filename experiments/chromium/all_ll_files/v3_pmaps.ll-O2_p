; ModuleID = '../../third_party/boringssl/src/crypto/x509v3/v3_pmaps.c'
source_filename = "../../third_party/boringssl/src/crypto/x509v3/v3_pmaps.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ASN1_ITEM_st = type { i8, i64, %struct.ASN1_TEMPLATE_st*, i64, i8*, i64, i8* }
%struct.ASN1_TEMPLATE_st = type { i64, i64, i64, i8*, %struct.ASN1_ITEM_st* }
%struct.v3_ext_method = type { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, {}*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* }
%struct.stack_st_CONF_VALUE = type opaque
%struct.v3_ext_ctx = type { i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_req_st*, %struct.X509_crl_st*, %struct.X509V3_CONF_METHOD_st*, i8* }
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.X509_req_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type { %struct.DIST_POINT_NAME_st*, i32, i32, %struct.asn1_string_st*, i32, i32 }
%struct.DIST_POINT_NAME_st = type { i32, %union.anon.0, %struct.X509_name_st* }
%union.anon.0 = type { %struct.stack_st_GENERAL_NAME* }
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.X509V3_CONF_METHOD_st = type { i8* (i8*, i8*, i8*)*, %struct.stack_st_CONF_VALUE* (i8*, i8*)*, void (i8*, i8*)*, void (i8*, %struct.stack_st_CONF_VALUE*)* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.stack_st_POLICY_MAPPING = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.ASN1_VALUE_st = type opaque
%struct.POLICY_MAPPING_st = type { %struct.asn1_object_st*, %struct.asn1_object_st* }

@POLICY_MAPPINGS_it = hidden constant %struct.ASN1_ITEM_st { i8 0, i64 -1, %struct.ASN1_TEMPLATE_st* @POLICY_MAPPINGS_item_tt, i64 0, i8* null, i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0) }, align 8
@v3_policy_mappings = hidden local_unnamed_addr constant { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* } { i32 747, i32 0, %struct.ASN1_ITEM_st* @POLICY_MAPPINGS_it, i8* ()* null, void (i8*)* null, i8* (i8*, i8**, i64)* null, i32 (i8*, i8**)* null, i8* (%struct.v3_ext_method*, i8*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)* @i2v_POLICY_MAPPINGS, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* @v2i_POLICY_MAPPINGS, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, i8* null }, align 8
@POLICY_MAPPING_seq_tt = internal constant [2 x %struct.ASN1_TEMPLATE_st] [%struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_OBJECT_it }, %struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_OBJECT_it }], align 16
@.str = private unnamed_addr constant [15 x i8] c"POLICY_MAPPING\00", align 1
@POLICY_MAPPING_it = hidden constant %struct.ASN1_ITEM_st { i8 1, i64 16, %struct.ASN1_TEMPLATE_st* getelementptr inbounds ([2 x %struct.ASN1_TEMPLATE_st], [2 x %struct.ASN1_TEMPLATE_st]* @POLICY_MAPPING_seq_tt, i32 0, i32 0), i64 2, i8* null, i64 16, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0) }, align 8
@POLICY_MAPPINGS_item_tt = internal constant %struct.ASN1_TEMPLATE_st { i64 4, i64 0, i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0), %struct.ASN1_ITEM_st* @POLICY_MAPPING_it }, align 8
@.str.1 = private unnamed_addr constant [16 x i8] c"POLICY_MAPPINGS\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"issuerDomainPolicy\00", align 1
@ASN1_OBJECT_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.3 = private unnamed_addr constant [20 x i8] c"subjectDomainPolicy\00", align 1
@.str.4 = private unnamed_addr constant [57 x i8] c"../../third_party/boringssl/src/crypto/x509v3/v3_pmaps.c\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"section:\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c",name:\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c",value:\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal %struct.stack_st_CONF_VALUE* @i2v_POLICY_MAPPINGS(%struct.v3_ext_method* nocapture readnone, i8*, %struct.stack_st_CONF_VALUE*) #0 {
  %4 = alloca %struct.stack_st_CONF_VALUE*, align 8
  %5 = alloca [80 x i8], align 16
  %6 = alloca [80 x i8], align 16
  store %struct.stack_st_CONF_VALUE* %2, %struct.stack_st_CONF_VALUE** %4, align 8
  %7 = bitcast i8* %1 to %struct.stack_st_POLICY_MAPPING*
  %8 = getelementptr inbounds [80 x i8], [80 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %8) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 80, i1 false)
  %9 = getelementptr inbounds [80 x i8], [80 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 80, i1 false)
  %10 = bitcast %struct.stack_st_POLICY_MAPPING* %7 to %struct.stack_st*
  %11 = call i64 @sk_num(%struct.stack_st* %10) #4
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %29, label %13

13:                                               ; preds = %3, %13
  %14 = phi i64 [ %24, %13 ], [ 0, %3 ]
  %15 = call i8* @sk_value(%struct.stack_st* %10, i64 %14) #4
  %16 = bitcast i8* %15 to %struct.asn1_object_st**
  %17 = load %struct.asn1_object_st*, %struct.asn1_object_st** %16, align 8
  %18 = call i32 @i2t_ASN1_OBJECT(i8* nonnull %8, i32 80, %struct.asn1_object_st* %17) #4
  %19 = getelementptr inbounds i8, i8* %15, i64 8
  %20 = bitcast i8* %19 to %struct.asn1_object_st**
  %21 = load %struct.asn1_object_st*, %struct.asn1_object_st** %20, align 8
  %22 = call i32 @i2t_ASN1_OBJECT(i8* nonnull %9, i32 80, %struct.asn1_object_st* %21) #4
  %23 = call i32 @X509V3_add_value(i8* nonnull %8, i8* nonnull %9, %struct.stack_st_CONF_VALUE** nonnull %4) #4
  %24 = add nuw i64 %14, 1
  %25 = call i64 @sk_num(%struct.stack_st* %10) #4
  %26 = icmp ult i64 %24, %25
  br i1 %26, label %13, label %27

27:                                               ; preds = %13
  %28 = load %struct.stack_st_CONF_VALUE*, %struct.stack_st_CONF_VALUE** %4, align 8
  br label %29

29:                                               ; preds = %27, %3
  %30 = phi %struct.stack_st_CONF_VALUE* [ %28, %27 ], [ %2, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %9) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %8) #4
  ret %struct.stack_st_CONF_VALUE* %30
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @v2i_POLICY_MAPPINGS(%struct.v3_ext_method* nocapture readnone, %struct.v3_ext_ctx* nocapture readnone, %struct.stack_st_CONF_VALUE*) #0 {
  %4 = tail call %struct.stack_st* @sk_new_null() #4
  %5 = bitcast %struct.stack_st* %4 to %struct.stack_st_POLICY_MAPPING*
  %6 = icmp eq %struct.stack_st* %4, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = bitcast %struct.stack_st_CONF_VALUE* %2 to %struct.stack_st*
  %9 = tail call i64 @sk_num(%struct.stack_st* %8) #4
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %59, label %12

11:                                               ; preds = %3
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0), i32 123) #4
  br label %61

12:                                               ; preds = %7, %50
  %13 = phi i64 [ %56, %50 ], [ 0, %7 ]
  %14 = tail call i8* @sk_value(%struct.stack_st* %8, i64 %13) #4
  %15 = getelementptr inbounds i8, i8* %14, i64 16
  %16 = bitcast i8* %15 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %24, label %32

24:                                               ; preds = %12, %19
  %25 = bitcast i8* %15 to i8**
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %4, void (void (i8*)*, i8*)* nonnull @sk_POLICY_MAPPING_call_free_func, void (i8*)* bitcast (void (%struct.POLICY_MAPPING_st*)* @POLICY_MAPPING_free to void (i8*)*)) #4
  tail call void @ERR_put_error(i32 20, i32 0, i32 129, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0), i32 131) #4
  %26 = bitcast i8* %14 to i8**
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds i8, i8* %14, i64 8
  %29 = bitcast i8* %28 to i8**
  %30 = load i8*, i8** %29, align 8
  %31 = load i8*, i8** %25, align 8
  tail call void (i32, ...) @ERR_add_error_data(i32 6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* %27, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* %30, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i8* %31) #4
  br label %61

32:                                               ; preds = %19
  %33 = tail call %struct.asn1_object_st* @OBJ_txt2obj(i8* nonnull %22, i32 0) #4
  %34 = load i8*, i8** %16, align 8
  %35 = tail call %struct.asn1_object_st* @OBJ_txt2obj(i8* %34, i32 0) #4
  %36 = icmp ne %struct.asn1_object_st* %33, null
  %37 = icmp ne %struct.asn1_object_st* %35, null
  %38 = and i1 %36, %37
  br i1 %38, label %46, label %39

39:                                               ; preds = %32
  %40 = bitcast i8* %15 to i8**
  %41 = bitcast i8* %20 to i8**
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %4, void (void (i8*)*, i8*)* nonnull @sk_POLICY_MAPPING_call_free_func, void (i8*)* bitcast (void (%struct.POLICY_MAPPING_st*)* @POLICY_MAPPING_free to void (i8*)*)) #4
  tail call void @ERR_put_error(i32 20, i32 0, i32 129, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0), i32 139) #4
  %42 = bitcast i8* %14 to i8**
  %43 = load i8*, i8** %42, align 8
  %44 = load i8*, i8** %41, align 8
  %45 = load i8*, i8** %40, align 8
  tail call void (i32, ...) @ERR_add_error_data(i32 6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* %43, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* %44, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i8* %45) #4
  br label %61

46:                                               ; preds = %32
  %47 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @POLICY_MAPPING_it) #4
  %48 = icmp eq %struct.ASN1_VALUE_st* %47, null
  br i1 %48, label %49, label %50

49:                                               ; preds = %46
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %4, void (void (i8*)*, i8*)* nonnull @sk_POLICY_MAPPING_call_free_func, void (i8*)* bitcast (void (%struct.POLICY_MAPPING_st*)* @POLICY_MAPPING_free to void (i8*)*)) #4
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0), i32 146) #4
  br label %61

50:                                               ; preds = %46
  %51 = bitcast %struct.ASN1_VALUE_st* %47 to %struct.POLICY_MAPPING_st*
  %52 = bitcast %struct.ASN1_VALUE_st* %47 to %struct.asn1_object_st**
  store %struct.asn1_object_st* %33, %struct.asn1_object_st** %52, align 8
  %53 = getelementptr inbounds %struct.POLICY_MAPPING_st, %struct.POLICY_MAPPING_st* %51, i64 0, i32 1
  store %struct.asn1_object_st* %35, %struct.asn1_object_st** %53, align 8
  %54 = bitcast %struct.ASN1_VALUE_st* %47 to i8*
  %55 = tail call i64 @sk_push(%struct.stack_st* nonnull %4, i8* nonnull %54) #4
  %56 = add nuw i64 %13, 1
  %57 = tail call i64 @sk_num(%struct.stack_st* %8) #4
  %58 = icmp ult i64 %56, %57
  br i1 %58, label %12, label %59

59:                                               ; preds = %50, %7
  %60 = bitcast %struct.stack_st_POLICY_MAPPING* %5 to i8*
  br label %61

61:                                               ; preds = %59, %49, %39, %24, %11
  %62 = phi i8* [ null, %49 ], [ null, %39 ], [ null, %24 ], [ %60, %59 ], [ null, %11 ]
  ret i8* %62
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.POLICY_MAPPING_st* @POLICY_MAPPING_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @POLICY_MAPPING_it) #4
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.POLICY_MAPPING_st*
  ret %struct.POLICY_MAPPING_st* %2
}

declare %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @POLICY_MAPPING_free(%struct.POLICY_MAPPING_st*) #0 {
  %2 = bitcast %struct.POLICY_MAPPING_st* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @POLICY_MAPPING_it) #4
  ret void
}

declare void @ASN1_item_free(%struct.ASN1_VALUE_st*, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @i2t_ASN1_OBJECT(i8*, i32, %struct.asn1_object_st*) local_unnamed_addr #1

declare i32 @X509V3_add_value(i8*, i8*, %struct.stack_st_CONF_VALUE**) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #1

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare void @ERR_add_error_data(i32, ...) local_unnamed_addr #1

declare %struct.asn1_object_st* @OBJ_txt2obj(i8*, i32) local_unnamed_addr #1

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #1

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_POLICY_MAPPING_call_free_func(void (i8*)* nocapture, i8*) #3 {
  %3 = bitcast void (i8*)* %0 to void (%struct.POLICY_MAPPING_st*)*
  %4 = bitcast i8* %1 to %struct.POLICY_MAPPING_st*
  tail call void %3(%struct.POLICY_MAPPING_st* %4) #4
  ret void
}

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
