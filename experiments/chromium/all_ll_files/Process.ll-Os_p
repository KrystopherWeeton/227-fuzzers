; ModuleID = '../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/Process.cpp'
source_filename = "../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/Process.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%"class.llvm::Optional" = type { %"struct.llvm::AlignedCharArrayUnion", i8, [7 x i8] }
%"struct.llvm::AlignedCharArrayUnion" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::AlignedCharArray" = type { [24 x i8] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.llvm::SmallVector" = type { %"class.llvm::SmallVectorImpl", %"struct.llvm::SmallVectorStorage" }
%"class.llvm::SmallVectorImpl" = type { %"class.llvm::SmallVectorTemplateBase" }
%"class.llvm::SmallVectorTemplateBase" = type { %"class.llvm::SmallVectorTemplateCommon" }
%"class.llvm::SmallVectorTemplateCommon" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.1" }
%"class.llvm::SmallVectorBase" = type { i8*, i8*, i8* }
%"struct.llvm::AlignedCharArrayUnion.1" = type { %"struct.llvm::AlignedCharArray.2" }
%"struct.llvm::AlignedCharArray.2" = type { [16 x i8] }
%"struct.llvm::SmallVectorStorage" = type { [7 x %"struct.llvm::AlignedCharArrayUnion.1"] }
%"class.llvm::SmallString" = type { %"class.llvm::SmallVector.3" }
%"class.llvm::SmallVector.3" = type { %"class.llvm::SmallVectorImpl.base", %"struct.llvm::SmallVectorStorage.9" }
%"class.llvm::SmallVectorImpl.base" = type { %"class.llvm::SmallVectorTemplateBase.base" }
%"class.llvm::SmallVectorTemplateBase.base" = type { %"class.llvm::SmallVectorTemplateCommon.base" }
%"class.llvm::SmallVectorTemplateCommon.base" = type <{ %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.7" }>
%"struct.llvm::AlignedCharArrayUnion.7" = type { %"struct.llvm::AlignedCharArray.8" }
%"struct.llvm::AlignedCharArray.8" = type { [1 x i8] }
%"struct.llvm::SmallVectorStorage.9" = type { [127 x %"struct.llvm::AlignedCharArrayUnion.7"] }
%"class.llvm::Twine" = type <{ %"union.llvm::Twine::Child", %"union.llvm::Twine::Child", i8, i8, [6 x i8] }>
%"union.llvm::Twine::Child" = type { %"class.llvm::Twine"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.llvm::StringRef" = type { i8*, i64 }
%"class.llvm::SmallVectorImpl.4" = type { %"class.llvm::SmallVectorTemplateBase.base", [7 x i8] }
%"class.std::__1::error_category" = type { i32 (...)** }
%"class.std::__1::__basic_string_common" = type { i8 }
%struct.mallinfo = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%struct.rusage = type { %struct.timeval, %struct.timeval, %union.anon.18, %union.anon.19, %union.anon.20, %union.anon.21, %union.anon.22, %union.anon.23, %union.anon.24, %union.anon.25, %union.anon.26, %union.anon.27, %union.anon.28, %union.anon.29, %union.anon.30, %union.anon.31 }
%struct.timeval = type { i64, i64 }
%union.anon.18 = type { i64 }
%union.anon.19 = type { i64 }
%union.anon.20 = type { i64 }
%union.anon.21 = type { i64 }
%union.anon.22 = type { i64 }
%union.anon.23 = type { i64 }
%union.anon.24 = type { i64 }
%union.anon.25 = type { i64 }
%union.anon.26 = type { i64 }
%union.anon.27 = type { i64 }
%union.anon.28 = type { i64 }
%union.anon.29 = type { i64 }
%union.anon.30 = type { i64 }
%union.anon.31 = type { i64 }
%struct.rlimit = type { i64, i64 }
%"class.llvm::SmallVectorImpl.13" = type { %"class.llvm::SmallVectorTemplateBase.14" }
%"class.llvm::SmallVectorTemplateBase.14" = type { %"class.llvm::SmallVectorTemplateCommon.15" }
%"class.llvm::SmallVectorTemplateCommon.15" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.16" }
%"struct.llvm::AlignedCharArrayUnion.16" = type { %"struct.llvm::AlignedCharArray.17" }
%"struct.llvm::AlignedCharArray.17" = type { [8 x i8] }
%"class.llvm::SpecificBumpPtrAllocator" = type opaque
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.__sigset_t = type { [16 x i64] }
%struct.winsize = type { i16, i16, i16, i16 }
%"struct.llvm::hashing::detail::hash_combine_recursive_helper" = type { [64 x i8], %"struct.llvm::hashing::detail::hash_state", i64 }
%"struct.llvm::hashing::detail::hash_state" = type { i64, i64, i64, i64, i64, i64, i64 }

$_ZN4llvm8OptionalINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEaSEOS7_ = comdat any

$_ZN4llvm15SmallVectorImplIPKcE6appendIPKS2_EEvT_S7_ = comdat any

$_ZN4llvm7hashing6detail29hash_combine_recursive_helper7combineIxJiEEENS_9hash_codeEmPcS5_RKT_DpRKT0_ = comdat any

$_ZN4llvm7hashing6detail29hash_combine_recursive_helper12combine_dataIxEEPcRmS4_S4_T_ = comdat any

$_ZN4llvm7hashing6detail10hash_state6createEPKcm = comdat any

$_ZN4llvm7hashing6detail10hash_state3mixEPKc = comdat any

$_ZN4llvm7hashing6detail10hash_state12mix_32_bytesEPKcRmS5_ = comdat any

$_ZN4llvm7hashing6detail29hash_combine_recursive_helper12combine_dataIiEEPcRmS4_S4_T_ = comdat any

$_ZN4llvm7hashing6detail29hash_combine_recursive_helper7combineEmPcS3_ = comdat any

$_ZN4llvm7hashing6detail10hash_shortEPKcmm = comdat any

$_ZN4llvm7hashing6detail10hash_state8finalizeEm = comdat any

$_ZNSt3__112__rotate_gcdIPcEET_S2_S2_S2_ = comdat any

$_ZN4llvm15SmallVectorImplIcE6appendIPKcEEvT_S5_ = comdat any

$_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed = comdat any

$_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed = comdat any

@_ZZN4llvm3sys7Process13FindInEnvPathERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_E19EnvPathSeparatorStr = internal constant [2 x i8] c":\00", align 1
@_ZL18coreFilesPrevented = internal unnamed_addr global i1 false, align 1
@_ZZN4llvm3sys7Process11getPageSizeEvE9page_size = internal global i32 0, align 4
@_ZGVZN4llvm3sys7Process11getPageSizeEvE9page_size = internal global i64 0, align 8
@_ZZN4llvm3sys7Process28FixupStandardFileDescriptorsEvE11StandardFDs = internal constant [3 x i32] [i32 0, i32 1, i32 2], align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@_ZL10colorcodes = internal constant [2 x [2 x [8 x [10 x i8]]]] [[2 x [8 x [10 x i8]]] [[8 x [10 x i8]] [[10 x i8] c"\1B[0;30m\00\00\00", [10 x i8] c"\1B[0;31m\00\00\00", [10 x i8] c"\1B[0;32m\00\00\00", [10 x i8] c"\1B[0;33m\00\00\00", [10 x i8] c"\1B[0;34m\00\00\00", [10 x i8] c"\1B[0;35m\00\00\00", [10 x i8] c"\1B[0;36m\00\00\00", [10 x i8] c"\1B[0;37m\00\00\00"], [8 x [10 x i8]] [[10 x i8] c"\1B[0;1;30m\00", [10 x i8] c"\1B[0;1;31m\00", [10 x i8] c"\1B[0;1;32m\00", [10 x i8] c"\1B[0;1;33m\00", [10 x i8] c"\1B[0;1;34m\00", [10 x i8] c"\1B[0;1;35m\00", [10 x i8] c"\1B[0;1;36m\00", [10 x i8] c"\1B[0;1;37m\00"]], [2 x [8 x [10 x i8]]] [[8 x [10 x i8]] [[10 x i8] c"\1B[0;40m\00\00\00", [10 x i8] c"\1B[0;41m\00\00\00", [10 x i8] c"\1B[0;42m\00\00\00", [10 x i8] c"\1B[0;43m\00\00\00", [10 x i8] c"\1B[0;44m\00\00\00", [10 x i8] c"\1B[0;45m\00\00\00", [10 x i8] c"\1B[0;46m\00\00\00", [10 x i8] c"\1B[0;47m\00\00\00"], [8 x [10 x i8]] [[10 x i8] c"\1B[0;1;40m\00", [10 x i8] c"\1B[0;1;41m\00", [10 x i8] c"\1B[0;1;42m\00", [10 x i8] c"\1B[0;1;43m\00", [10 x i8] c"\1B[0;1;44m\00", [10 x i8] c"\1B[0;1;45m\00", [10 x i8] c"\1B[0;1;46m\00", [10 x i8] c"\1B[0;1;47m\00"]]], align 16
@.str.2 = private unnamed_addr constant [5 x i8] c"\1B[1m\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"\1B[7m\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"\1B[0m\00", align 1
@_ZGVZN4llvm3sys7Process15GetRandomNumberEvE1x = internal global i64 0, align 8
@.str.6 = private unnamed_addr constant [8 x i8] c"COLUMNS\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"/dev/urandom\00", align 1
@_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed = linkonce_odr hidden local_unnamed_addr global i64 0, comdat, align 8
@_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed = linkonce_odr hidden global i64 0, comdat, align 8
@_ZN4llvm7hashing6detail19fixed_seed_overrideE = external local_unnamed_addr global i64, align 8

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm3sys7Process13FindInEnvPathERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_(%"class.llvm::Optional"* noalias sret, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.llvm::Optional", align 8
  %5 = alloca %"class.llvm::SmallVector", align 8
  %6 = alloca %"class.llvm::SmallString", align 8
  %7 = alloca %"class.llvm::Twine", align 8
  %8 = alloca %"class.llvm::Twine", align 8
  %9 = alloca %"class.llvm::Twine", align 8
  %10 = alloca %"class.llvm::Twine", align 8
  %11 = alloca %"class.llvm::Twine", align 8
  %12 = alloca %"class.std::__1::basic_string", align 8
  %13 = getelementptr inbounds %"class.llvm::Optional", %"class.llvm::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %14 = getelementptr inbounds %"class.llvm::Optional", %"class.llvm::Optional"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 -86, i64 32, i1 false)
  store i8 0, i8* %14, align 8
  %15 = getelementptr inbounds %"class.llvm::Optional", %"class.llvm::Optional"* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #17
  %16 = getelementptr inbounds %"class.llvm::Optional", %"class.llvm::Optional"* %4, i64 0, i32 0, i32 0, i32 0, i64 23
  %17 = getelementptr inbounds %"class.llvm::Optional", %"class.llvm::Optional"* %4, i64 0, i32 1
  %18 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %18, i64 0, i32 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 32, i1 false)
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %25 = select i1 %21, i8* %23, i8* %24
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = zext i8 %20 to i64
  %29 = select i1 %21, i64 %27, i64 %28
  call void @_ZN4llvm3sys7Process6GetEnvENS_9StringRefE(%"class.llvm::Optional"* nonnull sret %4, i8* %25, i64 %29) #18
  %30 = load i8, i8* %17, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %161, label %32

32:                                               ; preds = %3
  %33 = getelementptr inbounds %"class.llvm::Optional", %"class.llvm::Optional"* %4, i64 0, i32 0, i32 0, i32 0, i64 8
  %34 = bitcast %"class.llvm::SmallVector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %34) #17
  %35 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 128, i1 false)
  %36 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %37 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %36, i8** %37, align 8
  %38 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %36, i8** %38, align 8
  %39 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %40 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 128
  store i8* %40, i8** %39, align 8
  %41 = load i8, i8* %16, align 1
  %42 = icmp slt i8 %41, 0
  %43 = bitcast %"class.llvm::Optional"* %4 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = select i1 %42, i8* %44, i8* %15
  %46 = bitcast i8* %33 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = zext i8 %41 to i64
  %49 = select i1 %42, i64 %47, i64 %48
  %50 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0
  call void @_ZN4llvm11SplitStringENS_9StringRefERNS_15SmallVectorImplIS0_EES0_(i8* %45, i64 %49, %"class.llvm::SmallVectorImpl"* nonnull dereferenceable(40) %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @_ZZN4llvm3sys7Process13FindInEnvPathERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_E19EnvPathSeparatorStr, i64 0, i64 0), i64 1) #19
  %51 = bitcast %"class.llvm::SmallVector"* %5 to %"class.llvm::StringRef"**
  %52 = load %"class.llvm::StringRef"*, %"class.llvm::StringRef"** %51, align 8
  %53 = bitcast i8** %38 to %"class.llvm::StringRef"**
  %54 = load %"class.llvm::StringRef"*, %"class.llvm::StringRef"** %53, align 8
  %55 = icmp eq %"class.llvm::StringRef"* %52, %54
  %56 = bitcast %"class.llvm::StringRef"* %52 to i8*
  br i1 %55, label %148, label %57

57:                                               ; preds = %32
  %58 = bitcast %"class.llvm::SmallString"* %6 to i8*
  %59 = bitcast %"class.llvm::SmallString"* %6 to %"class.llvm::SmallVectorImpl.4"*
  %60 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %61 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %63 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %64 = getelementptr inbounds %"class.llvm::SmallString", %"class.llvm::SmallString"* %6, i64 1, i32 0
  %65 = bitcast i8** %63 to %"class.llvm::SmallVector.3"**
  %66 = bitcast %"class.llvm::Twine"* %7 to i8*
  %67 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %7, i64 0, i32 2
  %68 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %7, i64 0, i32 3
  %69 = bitcast %"class.llvm::Twine"* %7 to %"class.std::__1::basic_string"**
  %70 = bitcast %"class.llvm::Twine"* %8 to i8*
  %71 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %8, i64 0, i32 3
  %72 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %8, i64 0, i32 2
  %73 = bitcast %"class.llvm::Twine"* %9 to i8*
  %74 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %9, i64 0, i32 3
  %75 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %9, i64 0, i32 2
  %76 = bitcast %"class.llvm::Twine"* %10 to i8*
  %77 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %10, i64 0, i32 3
  %78 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %10, i64 0, i32 2
  %79 = bitcast %"class.llvm::Twine"* %11 to i8*
  %80 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %11, i64 0, i32 2
  %81 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %11, i64 0, i32 3
  %82 = bitcast %"class.llvm::Twine"* %11 to %"class.llvm::SmallString"**
  %83 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  %84 = bitcast i8** %62 to i64*
  %85 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %87 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %88 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %89 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %88, i64 0, i32 1, i32 0
  br label %90

90:                                               ; preds = %57, %143
  %91 = phi %"class.llvm::StringRef"* [ %52, %57 ], [ %144, %143 ]
  %92 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %91, i64 0, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %143, label %95

95:                                               ; preds = %90
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %58) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 -86, i64 152, i1 false)
  %96 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %91, i64 0, i32 0
  %97 = load i8*, i8** %96, align 8
  %98 = load i64, i64* %92, align 8
  %99 = getelementptr inbounds i8, i8* %97, i64 %98
  store i8* %60, i8** %61, align 8
  store i8* %60, i8** %62, align 8
  store %"class.llvm::SmallVector.3"* %64, %"class.llvm::SmallVector.3"** %65, align 8
  call void @_ZN4llvm15SmallVectorImplIcE6appendIPKcEEvT_S5_(%"class.llvm::SmallVectorImpl.4"* nonnull %59, i8* %97, i8* %99) #19
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %66) #17
  store i8 4, i8* %67, align 8
  store i8 1, i8* %68, align 1
  store %"class.std::__1::basic_string"* %2, %"class.std::__1::basic_string"** %69, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #17
  store i8 1, i8* %71, align 1
  store i8 1, i8* %72, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %73) #17
  store i8 1, i8* %74, align 1
  store i8 1, i8* %75, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %76) #17
  store i8 1, i8* %77, align 1
  store i8 1, i8* %78, align 8
  call void @_ZN4llvm3sys4path6appendERNS_15SmallVectorImplIcEERKNS_5TwineES7_S7_S7_(%"class.llvm::SmallVectorImpl.4"* nonnull dereferenceable(32) %59, %"class.llvm::Twine"* nonnull dereferenceable(24) %7, %"class.llvm::Twine"* nonnull dereferenceable(24) %8, %"class.llvm::Twine"* nonnull dereferenceable(24) %9, %"class.llvm::Twine"* nonnull dereferenceable(24) %10) #19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %76) #17
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %73) #17
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #17
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %66) #17
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %79) #17
  store i8 6, i8* %80, align 8
  store i8 1, i8* %81, align 1
  store %"class.llvm::SmallString"* %6, %"class.llvm::SmallString"** %82, align 8
  %100 = call { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys2fs6accessERKNS_5TwineENS1_10AccessModeE(%"class.llvm::Twine"* nonnull dereferenceable(24) %11, i32 0) #19
  %101 = extractvalue { i32, %"class.std::__1::error_category"* } %100, 0
  %102 = icmp eq i32 %101, 0
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %79) #17
  br i1 %102, label %103, label %136

103:                                              ; preds = %95
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %83) #17
  %104 = load i8*, i8** %61, align 8
  %105 = load i64, i64* %84, align 8
  %106 = ptrtoint i8* %104 to i64
  %107 = sub i64 %105, %106
  %108 = icmp eq i8* %104, null
  br i1 %108, label %109, label %110

109:                                              ; preds = %103
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %83, i8 0, i64 24, i1 false) #17, !alias.scope !3
  br label %129

110:                                              ; preds = %103
  %111 = icmp ugt i64 %107, -17
  br i1 %111, label %112, label %114

112:                                              ; preds = %110
  %113 = bitcast %"class.std::__1::basic_string"* %12 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %113) #20
  unreachable

114:                                              ; preds = %110
  %115 = icmp ult i64 %107, 23
  br i1 %115, label %121, label %116

116:                                              ; preds = %114
  %117 = add nuw i64 %107, 16
  %118 = and i64 %117, -16
  %119 = call i8* @_Znwm(i64 %118) #21
  store i8* %119, i8** %85, align 8
  %120 = or i64 %118, -9223372036854775808
  store i64 %120, i64* %86, align 8
  store i64 %107, i64* %87, align 8
  br label %124

121:                                              ; preds = %114
  %122 = trunc i64 %107 to i8
  store i8 %122, i8* %89, align 1
  %123 = icmp eq i64 %107, 0
  br i1 %123, label %126, label %124

124:                                              ; preds = %121, %116
  %125 = phi i8* [ %119, %116 ], [ %83, %121 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %125, i8* nonnull align 1 %104, i64 %107, i1 false) #17
  br label %126

126:                                              ; preds = %121, %124
  %127 = phi i8* [ %83, %121 ], [ %125, %124 ]
  %128 = getelementptr inbounds i8, i8* %127, i64 %107
  store i8 0, i8* %128, align 1
  br label %129

129:                                              ; preds = %109, %126
  %130 = call dereferenceable(32) %"class.llvm::Optional"* @_ZN4llvm8OptionalINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEaSEOS7_(%"class.llvm::Optional"* %0, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %12) #18
  %131 = load i8, i8* %89, align 1
  %132 = icmp slt i8 %131, 0
  br i1 %132, label %133, label %135

133:                                              ; preds = %129
  %134 = load i8*, i8** %85, align 8
  call void @_ZdlPv(i8* %134) #21
  br label %135

135:                                              ; preds = %129, %133
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %83) #17
  br label %136

136:                                              ; preds = %95, %135
  %137 = phi i32 [ 2, %135 ], [ 0, %95 ]
  %138 = load i8*, i8** %61, align 8
  %139 = icmp eq i8* %138, %60
  br i1 %139, label %141, label %140

140:                                              ; preds = %136
  call void @free(i8* %138) #19
  br label %141

141:                                              ; preds = %140, %136
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %58) #17
  %142 = icmp eq i32 %137, 0
  br i1 %142, label %143, label %146

143:                                              ; preds = %141, %90
  %144 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %91, i64 1
  %145 = icmp eq %"class.llvm::StringRef"* %144, %54
  br i1 %145, label %146, label %90

146:                                              ; preds = %141, %143
  %147 = load i8*, i8** %37, align 8
  br label %148

148:                                              ; preds = %146, %32
  %149 = phi i8* [ %147, %146 ], [ %56, %32 ]
  %150 = icmp eq i8* %149, %36
  br i1 %150, label %152, label %151

151:                                              ; preds = %148
  call void @free(i8* %149) #19
  br label %152

152:                                              ; preds = %151, %148
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %34) #17
  %153 = load i8, i8* %17, align 8
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %161, label %155

155:                                              ; preds = %152
  %156 = load i8, i8* %16, align 1
  %157 = icmp slt i8 %156, 0
  br i1 %157, label %158, label %160

158:                                              ; preds = %155
  %159 = load i8*, i8** %43, align 8
  call void @_ZdlPv(i8* %159) #21
  br label %160

160:                                              ; preds = %158, %155
  store i8 0, i8* %17, align 8
  br label %161

161:                                              ; preds = %3, %152, %160
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #17
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm3sys7Process6GetEnvENS_9StringRefE(%"class.llvm::Optional"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #17
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %10 = icmp eq i8* %1, null
  %11 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  br i1 %10, label %12, label %14

12:                                               ; preds = %3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #17, !alias.scope !8
  %13 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %43

14:                                               ; preds = %3
  %15 = icmp ugt i64 %2, -17
  br i1 %15, label %16, label %18

16:                                               ; preds = %14
  %17 = bitcast %"class.std::__1::basic_string"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %17) #20
  unreachable

18:                                               ; preds = %14
  %19 = icmp ult i64 %2, 23
  br i1 %19, label %26, label %20

20:                                               ; preds = %18
  %21 = add nuw i64 %2, 16
  %22 = and i64 %21, -16
  %23 = tail call i8* @_Znwm(i64 %22) #21
  store i8* %23, i8** %7, align 8
  %24 = or i64 %22, -9223372036854775808
  store i64 %24, i64* %9, align 8
  store i64 %2, i64* %8, align 8
  %25 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %31

26:                                               ; preds = %18
  %27 = trunc i64 %2 to i8
  %28 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  store i8 %27, i8* %29, align 1
  %30 = icmp eq i64 %2, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %26, %20
  %32 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %28, %26 ], [ %25, %20 ]
  %33 = phi i8* [ %6, %26 ], [ %23, %20 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %33, i8* nonnull align 1 %1, i64 %2, i1 false) #17
  br label %34

34:                                               ; preds = %26, %31
  %35 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %28, %26 ], [ %32, %31 ]
  %36 = phi i8* [ %6, %26 ], [ %33, %31 ]
  %37 = getelementptr inbounds i8, i8* %36, i64 %2
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = load i8*, i8** %7, align 8
  %41 = icmp slt i8 %39, 0
  %42 = select i1 %41, i8* %40, i8* %6
  br label %43

43:                                               ; preds = %12, %34
  %44 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %13, %12 ], [ %35, %34 ]
  %45 = phi i8* [ null, %12 ], [ %40, %34 ]
  %46 = phi i8* [ %6, %12 ], [ %42, %34 ]
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  %48 = call i8* @getenv(i8* %46) #19
  %49 = icmp eq i8* %48, null
  br i1 %49, label %50, label %52

50:                                               ; preds = %43
  %51 = getelementptr inbounds %"class.llvm::Optional", %"class.llvm::Optional"* %0, i64 0, i32 1
  store i8 0, i8* %51, align 8
  br label %80

52:                                               ; preds = %43
  %53 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %53) #17
  %54 = tail call i64 @strlen(i8* nonnull %48) #19
  %55 = icmp ugt i64 %54, -17
  br i1 %55, label %56, label %58

56:                                               ; preds = %52
  %57 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %57) #20
  unreachable

58:                                               ; preds = %52
  %59 = icmp ult i64 %54, 23
  br i1 %59, label %68, label %60

60:                                               ; preds = %58
  %61 = add nuw i64 %54, 16
  %62 = and i64 %61, -16
  %63 = tail call i8* @_Znwm(i64 %62) #21
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %63, i8** %64, align 8
  %65 = or i64 %62, -9223372036854775808
  %66 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %54, i64* %67, align 8
  br label %73

68:                                               ; preds = %58
  %69 = trunc i64 %54 to i8
  %70 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %71 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %70, i64 0, i32 1, i32 0
  store i8 %69, i8* %71, align 1
  %72 = icmp eq i64 %54, 0
  br i1 %72, label %75, label %73

73:                                               ; preds = %68, %60
  %74 = phi i8* [ %63, %60 ], [ %53, %68 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %74, i8* nonnull align 1 %48, i64 %54, i1 false) #17
  br label %75

75:                                               ; preds = %73, %68
  %76 = phi i8* [ %53, %68 ], [ %74, %73 ]
  %77 = getelementptr inbounds i8, i8* %76, i64 %54
  store i8 0, i8* %77, align 1
  %78 = getelementptr inbounds %"class.llvm::Optional", %"class.llvm::Optional"* %0, i64 0, i32 1
  store i8 1, i8* %78, align 8
  %79 = getelementptr inbounds %"class.llvm::Optional", %"class.llvm::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* nonnull align 8 %53, i64 24, i1 false) #17
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %53) #17
  br label %80

80:                                               ; preds = %75, %50
  %81 = load i8, i8* %47, align 1
  %82 = icmp slt i8 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %80
  tail call void @_ZdlPv(i8* %45) #21
  br label %84

84:                                               ; preds = %80, %83
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #17
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: optsize
declare void @_ZN4llvm11SplitStringENS_9StringRefERNS_15SmallVectorImplIS0_EES0_(i8*, i64, %"class.llvm::SmallVectorImpl"* dereferenceable(40), i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: optsize
declare void @_ZN4llvm3sys4path6appendERNS_15SmallVectorImplIcEERKNS_5TwineES7_S7_S7_(%"class.llvm::SmallVectorImpl.4"* dereferenceable(32), %"class.llvm::Twine"* dereferenceable(24), %"class.llvm::Twine"* dereferenceable(24), %"class.llvm::Twine"* dereferenceable(24), %"class.llvm::Twine"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden dereferenceable(32) %"class.llvm::Optional"* @_ZN4llvm8OptionalINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEaSEOS7_(%"class.llvm::Optional"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::Optional", %"class.llvm::Optional"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::Optional", %"class.llvm::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i64 23
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %6
  %11 = bitcast %"class.llvm::Optional"* %0 to i8**
  %12 = load i8*, i8** %11, align 8
  tail call void @_ZdlPv(i8* %12) #21
  br label %13

13:                                               ; preds = %6, %10
  %14 = getelementptr inbounds %"class.llvm::Optional", %"class.llvm::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %15 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false) #17
  %16 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  store i8 0, i8* %17, align 1
  store i8 0, i8* %15, align 1
  br label %21

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.llvm::Optional", %"class.llvm::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %20 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 24, i1 false) #17
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 24, i1 false) #17
  store i8 1, i8* %3, align 8
  br label %21

21:                                               ; preds = %18, %13
  ret %"class.llvm::Optional"* %0
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZN4llvm3sys7Process21AreCoreFilesPreventedEv() local_unnamed_addr #3 align 2 {
  %1 = load i1, i1* @_ZL18coreFilesPrevented, align 1
  ret i1 %1
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN4llvm3sys7Process11getPageSizeEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN4llvm3sys7Process11getPageSizeEvE9page_size to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %9, !prof !11

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN4llvm3sys7Process11getPageSizeEvE9page_size) #17
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = tail call i32 @getpagesize() #22
  store i32 %7, i32* @_ZZN4llvm3sys7Process11getPageSizeEvE9page_size, align 4
  %8 = tail call {}* @llvm.invariant.start.p0i8(i64 4, i8* bitcast (i32* @_ZZN4llvm3sys7Process11getPageSizeEvE9page_size to i8*))
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN4llvm3sys7Process11getPageSizeEvE9page_size) #17
  br label %9

9:                                                ; preds = %3, %6, %0
  %10 = load i32, i32* @_ZZN4llvm3sys7Process11getPageSizeEvE9page_size, align 4
  ret i32 %10
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #4

; Function Attrs: nounwind optsize readnone
declare i32 @getpagesize() local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #4

; Function Attrs: nounwind optsize ssp uwtable
define hidden i64 @_ZN4llvm3sys7Process14GetMallocUsageEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %struct.mallinfo, align 4
  %2 = bitcast %struct.mallinfo* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %2) #17
  call void @mallinfo(%struct.mallinfo* nonnull sret %1) #19
  %3 = getelementptr inbounds %struct.mallinfo, %struct.mallinfo* %1, i64 0, i32 7
  %4 = load i32, i32* %3, align 4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %2) #17
  %5 = sext i32 %4 to i64
  ret i64 %5
}

; Function Attrs: nounwind optsize
declare void @mallinfo(%struct.mallinfo* sret) local_unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm3sys7Process12GetTimeUsageERNSt3__16chrono10time_pointINS3_12system_clockENS3_8durationIxNS2_5ratioILl1ELl1000000000EEEEEEERS9_SC_(%"class.std::__1::chrono::time_point"* nocapture dereferenceable(8), %"class.std::__1::chrono::duration"* dereferenceable(8), %"class.std::__1::chrono::duration"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.rusage, align 8
  %5 = tail call i64 @_ZNSt3__16chrono12system_clock3nowEv() #19
  %6 = mul nsw i64 %5, 1000
  %7 = getelementptr inbounds %"class.std::__1::chrono::time_point", %"class.std::__1::chrono::time_point"* %0, i64 0, i32 0, i32 0
  store i64 %6, i64* %7, align 8
  %8 = bitcast %struct.rusage* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %8) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 144, i1 false) #17
  %9 = call i32 @getrusage(i32 0, %struct.rusage* nonnull %4) #19
  %10 = getelementptr inbounds %struct.rusage, %struct.rusage* %4, i64 0, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.rusage, %struct.rusage* %4, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = mul nsw i64 %11, 1000000
  %15 = add nsw i64 %14, %13
  %16 = getelementptr inbounds %struct.rusage, %struct.rusage* %4, i64 0, i32 1, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %struct.rusage, %struct.rusage* %4, i64 0, i32 1, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = mul nsw i64 %17, 1000000
  %21 = add nsw i64 %20, %19
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %8) #17
  %22 = mul nsw i64 %15, 1000
  %23 = getelementptr inbounds %"class.std::__1::chrono::duration", %"class.std::__1::chrono::duration"* %1, i64 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = mul nsw i64 %21, 1000
  %25 = getelementptr inbounds %"class.std::__1::chrono::duration", %"class.std::__1::chrono::duration"* %2, i64 0, i32 0
  store i64 %24, i64* %25, align 8
  ret void
}

; Function Attrs: nounwind optsize
declare i64 @_ZNSt3__16chrono12system_clock3nowEv() local_unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm3sys7Process16PreventCoreFilesEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %struct.rlimit, align 8
  %2 = bitcast %struct.rlimit* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #17
  %3 = bitcast %struct.rlimit* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 16, i1 false)
  %4 = call i32 @setrlimit64(i32 4, %struct.rlimit* nonnull %1) #19
  store i1 true, i1* @_ZL18coreFilesPrevented, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #17
  ret void
}

; Function Attrs: nounwind optsize
declare i32 @setrlimit64(i32, %struct.rlimit*) local_unnamed_addr #6

; Function Attrs: nofree nounwind optsize readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #7

; Function Attrs: nounwind optsize ssp uwtable
define hidden { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys7Process17GetArgumentVectorERNS_15SmallVectorImplIPKcEENS_8ArrayRefIS4_EERNS_24SpecificBumpPtrAllocatorIcEE(%"class.llvm::SmallVectorImpl.13"* dereferenceable(32), i8**, i64, %"class.llvm::SpecificBumpPtrAllocator"* nocapture readnone) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds i8*, i8** %1, i64 %2
  tail call void @_ZN4llvm15SmallVectorImplIPKcE6appendIPKS2_EEvT_S7_(%"class.llvm::SmallVectorImpl.13"* %0, i8** %1, i8** %5) #18
  %6 = tail call dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__115system_categoryEv() #19
  %7 = insertvalue { i32, %"class.std::__1::error_category"* } { i32 0, %"class.std::__1::error_category"* undef }, %"class.std::__1::error_category"* %6, 1
  ret { i32, %"class.std::__1::error_category"* } %7
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm15SmallVectorImplIPKcE6appendIPKS2_EEvT_S7_(%"class.llvm::SmallVectorImpl.13"*, i8**, i8**) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8** %2 to i64
  %5 = ptrtoint i8** %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 3
  %8 = getelementptr inbounds %"class.llvm::SmallVectorImpl.13", %"class.llvm::SmallVectorImpl.13"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.llvm::SmallVectorImpl.13", %"class.llvm::SmallVectorImpl.13"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %12 = bitcast i8** %11 to i8***
  %13 = bitcast i8** %11 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %10, %14
  %16 = ashr exact i64 %15, 3
  %17 = icmp ugt i64 %7, %16
  br i1 %17, label %18, label %26

18:                                               ; preds = %3
  %19 = bitcast %"class.llvm::SmallVectorImpl.13"* %0 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %14, %6
  %22 = sub i64 %21, %20
  %23 = and i64 %22, -8
  %24 = getelementptr inbounds %"class.llvm::SmallVectorImpl.13", %"class.llvm::SmallVectorImpl.13"* %0, i64 0, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.llvm::SmallVectorImpl.13", %"class.llvm::SmallVectorImpl.13"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %24, i8* %25, i64 %23, i64 8) #19
  br label %26

26:                                               ; preds = %18, %3
  %27 = icmp eq i8** %1, %2
  br i1 %27, label %31, label %28

28:                                               ; preds = %26
  %29 = load i8*, i8** %11, align 8
  %30 = bitcast i8** %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %6, i1 false) #17
  br label %31

31:                                               ; preds = %26, %28
  %32 = load i8**, i8*** %12, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 %7
  store i8** %33, i8*** %12, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys7Process28FixupStandardFileDescriptorsEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %struct.stat, align 8
  %2 = bitcast %struct.stat* %1 to i8*
  %3 = tail call i32* @__errno_location() #22
  br label %4

4:                                                ; preds = %0, %32
  %5 = phi i32* [ getelementptr inbounds ([3 x i32], [3 x i32]* @_ZZN4llvm3sys7Process28FixupStandardFileDescriptorsEvE11StandardFDs, i64 0, i64 0), %0 ], [ %35, %32 ]
  %6 = phi i8 [ 0, %0 ], [ %34, %32 ]
  %7 = phi i32 [ -1, %0 ], [ %33, %32 ]
  %8 = load i32, i32* %5, align 4
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %2) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 -86, i64 144, i1 false)
  store i32 0, i32* %3, align 4
  br label %9

9:                                                ; preds = %13, %4
  %10 = call i32 @fstat64(i32 %8, %struct.stat* nonnull %1) #19
  %11 = icmp slt i32 %10, 0
  %12 = load i32, i32* %3, align 4
  br i1 %11, label %13, label %14

13:                                               ; preds = %9
  switch i32 %12, label %37 [
    i32 9, label %16
    i32 4, label %9
  ]

14:                                               ; preds = %9
  %15 = icmp eq i32 %12, 0
  br i1 %15, label %32, label %16

16:                                               ; preds = %13, %14
  %17 = icmp slt i32 %7, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %16, %21
  %19 = tail call i32 (i8*, i32, ...) @open64(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i32 2) #19
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %18
  %22 = load i32, i32* %3, align 4
  %23 = icmp eq i32 %22, 4
  br i1 %23, label %18, label %37

24:                                               ; preds = %18, %16
  %25 = phi i32 [ %7, %16 ], [ %19, %18 ]
  %26 = icmp eq i32 %25, %8
  br i1 %26, label %32, label %27

27:                                               ; preds = %24
  %28 = tail call i32 @dup2(i32 %25, i32 %8) #19
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %27
  %31 = load i32, i32* %3, align 4
  br label %37

32:                                               ; preds = %14, %27, %24
  %33 = phi i32 [ %7, %14 ], [ %25, %27 ], [ %8, %24 ]
  %34 = phi i8 [ %6, %14 ], [ %6, %27 ], [ 1, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %2) #17
  %35 = getelementptr inbounds i32, i32* %5, i64 1
  %36 = icmp eq i32* %35, getelementptr inbounds ([3 x i32], [3 x i32]* @_ZZN4llvm3sys7Process28FixupStandardFileDescriptorsEvE11StandardFDs, i64 1, i64 0)
  br i1 %36, label %41, label %4

37:                                               ; preds = %13, %21, %30
  %38 = phi i32 [ %25, %30 ], [ %19, %21 ], [ %7, %13 ]
  %39 = phi i32 [ %31, %30 ], [ %22, %21 ], [ %12, %13 ]
  %40 = tail call dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__116generic_categoryEv() #19
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %2) #17
  br label %43

41:                                               ; preds = %32
  %42 = tail call dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__115system_categoryEv() #19
  br label %43

43:                                               ; preds = %37, %41
  %44 = phi i8 [ %34, %41 ], [ %6, %37 ]
  %45 = phi i32 [ %33, %41 ], [ %38, %37 ]
  %46 = phi i32 [ 0, %41 ], [ %39, %37 ]
  %47 = phi %"class.std::__1::error_category"* [ %42, %41 ], [ %40, %37 ]
  %48 = icmp eq i8 %44, 0
  %49 = icmp sgt i32 %45, -1
  %50 = and i1 %48, %49
  br i1 %50, label %51, label %53

51:                                               ; preds = %43
  %52 = tail call i32 @close(i32 %45) #19
  br label %53

53:                                               ; preds = %43, %51
  %54 = insertvalue { i32, %"class.std::__1::error_category"* } undef, i32 %46, 0
  %55 = insertvalue { i32, %"class.std::__1::error_category"* } %54, %"class.std::__1::error_category"* %47, 1
  ret { i32, %"class.std::__1::error_category"* } %55
}

; Function Attrs: nounwind optsize readnone
declare i32* @__errno_location() local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare i32 @fstat64(i32, %struct.stat* nocapture) local_unnamed_addr #8

; Function Attrs: nounwind optsize
declare dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__116generic_categoryEv() local_unnamed_addr #6

; Function Attrs: nofree optsize
declare i32 @open64(i8* nocapture readonly, i32, ...) local_unnamed_addr #9

; Function Attrs: nounwind optsize
declare i32 @dup2(i32, i32) local_unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define hidden { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys7Process25SafelyCloseFileDescriptorEi(i32) local_unnamed_addr #0 align 2 {
  %2 = alloca %struct.__sigset_t, align 8
  %3 = alloca %struct.__sigset_t, align 8
  %4 = bitcast %struct.__sigset_t* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 128, i1 false)
  %5 = call i32 @sigfillset(%struct.__sigset_t* nonnull %2) #19
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = tail call i32* @__errno_location() #22
  %9 = load i32, i32* %8, align 4
  %10 = call dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__116generic_categoryEv() #19
  br label %40

11:                                               ; preds = %1
  %12 = bitcast %struct.__sigset_t* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %12) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 128, i1 false)
  %13 = call i32 @sigprocmask(i32 2, %struct.__sigset_t* nonnull %2, %struct.__sigset_t* nonnull %3) #19
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %11
  %16 = tail call i32* @__errno_location() #22
  %17 = load i32, i32* %16, align 4
  %18 = call dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__116generic_categoryEv() #19
  br label %37

19:                                               ; preds = %11
  %20 = call i32 @close(i32 %0) #19
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %19
  %23 = tail call i32* @__errno_location() #22
  %24 = load i32, i32* %23, align 4
  br label %25

25:                                               ; preds = %22, %19
  %26 = phi i32 [ %24, %22 ], [ 0, %19 ]
  %27 = call i32 @sigprocmask(i32 2, %struct.__sigset_t* nonnull %3, %struct.__sigset_t* null) #19
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %25
  %30 = tail call i32* @__errno_location() #22
  %31 = load i32, i32* %30, align 4
  br label %32

32:                                               ; preds = %29, %25
  %33 = phi i32 [ %31, %29 ], [ 0, %25 ]
  %34 = icmp eq i32 %26, 0
  %35 = call dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__116generic_categoryEv() #19
  %36 = select i1 %34, i32 %33, i32 %26
  br label %37

37:                                               ; preds = %32, %15
  %38 = phi %"class.std::__1::error_category"* [ %18, %15 ], [ %35, %32 ]
  %39 = phi i32 [ %17, %15 ], [ %36, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %12) #17
  br label %40

40:                                               ; preds = %37, %7
  %41 = phi %"class.std::__1::error_category"* [ %10, %7 ], [ %38, %37 ]
  %42 = phi i32 [ %9, %7 ], [ %39, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #17
  %43 = insertvalue { i32, %"class.std::__1::error_category"* } undef, i32 %42, 0
  %44 = insertvalue { i32, %"class.std::__1::error_category"* } %43, %"class.std::__1::error_category"* %41, 1
  ret { i32, %"class.std::__1::error_category"* } %44
}

; Function Attrs: nounwind optsize
declare i32 @sigfillset(%struct.__sigset_t*) local_unnamed_addr #6

; Function Attrs: nounwind optsize
declare i32 @sigprocmask(i32, %struct.__sigset_t*, %struct.__sigset_t*) local_unnamed_addr #6

; Function Attrs: optsize
declare i32 @close(i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm3sys7Process21StandardInIsUserInputEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i32 @isatty(i32 0) #19
  %2 = icmp ne i32 %1, 0
  ret i1 %2
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm3sys7Process25FileDescriptorIsDisplayedEi(i32) local_unnamed_addr #0 align 2 {
  %2 = tail call i32 @isatty(i32 %0) #19
  %3 = icmp ne i32 %2, 0
  ret i1 %3
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm3sys7Process22StandardOutIsDisplayedEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i32 @isatty(i32 1) #19
  %2 = icmp ne i32 %1, 0
  ret i1 %2
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm3sys7Process22StandardErrIsDisplayedEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i32 @isatty(i32 2) #19
  %2 = icmp ne i32 %1, 0
  ret i1 %2
}

; Function Attrs: nounwind optsize
declare i32 @isatty(i32) local_unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN4llvm3sys7Process18StandardOutColumnsEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i32 @isatty(i32 1) #19
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %5, label %3

3:                                                ; preds = %0
  %4 = tail call fastcc i32 @_ZL10getColumnsi(i32 1) #18
  br label %5

5:                                                ; preds = %0, %3
  %6 = phi i32 [ %4, %3 ], [ 0, %0 ]
  ret i32 %6
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc i32 @_ZL10getColumnsi(i32) unnamed_addr #0 {
  %2 = alloca i64, align 8
  %3 = bitcast i64* %2 to %struct.winsize*
  %4 = tail call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #19
  %5 = icmp eq i8* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = tail call i32 @atoi(i8* nonnull %4) #23
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %9, label %17

9:                                                ; preds = %6, %1
  %10 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #17
  %11 = getelementptr inbounds %struct.winsize, %struct.winsize* %3, i64 0, i32 1
  store i64 -6148914691236517206, i64* %2, align 8
  %12 = call i32 (i32, i64, ...) @ioctl(i32 %0, i64 21523, i64* nonnull %2) #19
  %13 = icmp eq i32 %12, 0
  %14 = load i16, i16* %11, align 2
  %15 = zext i16 %14 to i32
  %16 = select i1 %13, i32 %15, i32 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #17
  br label %17

17:                                               ; preds = %6, %9
  %18 = phi i32 [ %16, %9 ], [ %7, %6 ]
  ret i32 %18
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN4llvm3sys7Process18StandardErrColumnsEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i32 @isatty(i32 2) #19
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %5, label %3

3:                                                ; preds = %0
  %4 = tail call fastcc i32 @_ZL10getColumnsi(i32 2) #18
  br label %5

5:                                                ; preds = %0, %3
  %6 = phi i32 [ %4, %3 ], [ 0, %0 ]
  ret i32 %6
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm3sys7Process23FileDescriptorHasColorsEi(i32) local_unnamed_addr #0 align 2 {
  %2 = tail call i32 @isatty(i32 %0) #19
  ret i1 false
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm3sys7Process20StandardOutHasColorsEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i32 @isatty(i32 1) #19
  ret i1 false
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm3sys7Process20StandardErrHasColorsEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i32 @isatty(i32 2) #19
  ret i1 false
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden void @_ZN4llvm3sys7Process18UseANSIEscapeCodesEb(i1 zeroext) local_unnamed_addr #10 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden zeroext i1 @_ZN4llvm3sys7Process15ColorNeedsFlushEv() local_unnamed_addr #10 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden nonnull i8* @_ZN4llvm3sys7Process11OutputColorEcbb(i8 signext, i1 zeroext, i1 zeroext) local_unnamed_addr #10 align 2 {
  %4 = zext i1 %2 to i64
  %5 = zext i1 %1 to i64
  %6 = and i8 %0, 7
  %7 = zext i8 %6 to i64
  %8 = getelementptr inbounds [2 x [2 x [8 x [10 x i8]]]], [2 x [2 x [8 x [10 x i8]]]]* @_ZL10colorcodes, i64 0, i64 %4, i64 %5, i64 %7, i64 0
  ret i8* %8
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden i8* @_ZN4llvm3sys7Process10OutputBoldEb(i1 zeroext) local_unnamed_addr #10 align 2 {
  ret i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden i8* @_ZN4llvm3sys7Process13OutputReverseEv() local_unnamed_addr #10 align 2 {
  ret i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden i8* @_ZN4llvm3sys7Process10ResetColorEv() local_unnamed_addr #10 align 2 {
  ret i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN4llvm3sys7Process15GetRandomNumberEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %"struct.llvm::hashing::detail::hash_combine_recursive_helper", align 8
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = load atomic i8, i8* bitcast (i64* @_ZGVZN4llvm3sys7Process15GetRandomNumberEvE1x to i8*) acquire, align 8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %43, !prof !11

7:                                                ; preds = %0
  %8 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN4llvm3sys7Process15GetRandomNumberEvE1x) #17
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %43, label %10

10:                                               ; preds = %7
  %11 = tail call i32 (i8*, i32, ...) @open64(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i32 0) #19
  %12 = icmp eq i32 %11, -1
  br i1 %12, label %20, label %13

13:                                               ; preds = %10
  %14 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #17
  store i32 -1431655766, i32* %2, align 4
  %15 = call i64 @read(i32 %11, i8* nonnull %14, i64 4) #19
  %16 = tail call i32 @close(i32 %11) #19
  %17 = and i64 %15, 4294967295
  %18 = icmp eq i64 %17, 4
  %19 = load i32, i32* %2, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #17
  br i1 %18, label %41, label %20

20:                                               ; preds = %13, %10
  %21 = tail call i64 @_ZNSt3__16chrono12steady_clock3nowEv() #19
  %22 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #17
  store i64 %21, i64* %3, align 8
  %23 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #17
  %24 = tail call i32 @getpid() #19
  store i32 %24, i32* %4, align 4
  %25 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %1, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %25) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 120, i1 false) #17
  %26 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %1, i64 0, i32 2
  %27 = load atomic i8, i8* bitcast (i64* @_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed to i8*) acquire, align 8
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %36, !prof !11

29:                                               ; preds = %20
  %30 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed) #17
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %36, label %32

32:                                               ; preds = %29
  %33 = load i64, i64* @_ZN4llvm7hashing6detail19fixed_seed_overrideE, align 8
  %34 = icmp eq i64 %33, 0
  %35 = select i1 %34, i64 -49064778989728563, i64 %33
  store i64 %35, i64* @_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed, align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN4llvm7hashing6detail18get_execution_seedEvE4seed) #17
  br label %36

36:                                               ; preds = %32, %29, %20
  %37 = load i64, i64* @_ZZN4llvm7hashing6detail18get_execution_seedEvE4seed, align 8
  store i64 %37, i64* %26, align 8
  %38 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %1, i64 0, i32 0, i64 64
  %39 = call i64 @_ZN4llvm7hashing6detail29hash_combine_recursive_helper7combineIxJiEEENS_9hash_codeEmPcS5_RKT_DpRKT0_(%"struct.llvm::hashing::detail::hash_combine_recursive_helper"* nonnull %1, i64 0, i8* nonnull %25, i8* %38, i64* nonnull dereferenceable(8) %3, i32* nonnull dereferenceable(4) %4) #19
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %25) #17
  %40 = trunc i64 %39 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #17
  br label %41

41:                                               ; preds = %13, %36
  %42 = phi i32 [ %40, %36 ], [ %19, %13 ]
  call void @srand(i32 %42) #19
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN4llvm3sys7Process15GetRandomNumberEvE1x) #17
  br label %43

43:                                               ; preds = %7, %41, %0
  %44 = call i32 @rand() #19
  ret i32 %44
}

; Function Attrs: nounwind optsize
declare void @srand(i32) local_unnamed_addr #6

; Function Attrs: nounwind optsize
declare i32 @rand() local_unnamed_addr #6

; Function Attrs: argmemonly nofree nounwind optsize readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #11

; Function Attrs: optsize
declare { i32, %"class.std::__1::error_category"* } @_ZN4llvm3sys2fs6accessERKNS_5TwineENS1_10AccessModeE(%"class.llvm::Twine"* dereferenceable(24), i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize
declare void @free(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nounwind optsize
declare i32 @getrusage(i32, %struct.rusage*) local_unnamed_addr #6

; Function Attrs: noreturn optsize
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #12

; Function Attrs: noreturn nounwind optsize
declare void @abort() local_unnamed_addr #13

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #14

; Function Attrs: nounwind optsize
declare dereferenceable(8) %"class.std::__1::error_category"* @_ZNSt3__115system_categoryEv() local_unnamed_addr #6

; Function Attrs: nofree nounwind optsize readonly
declare i32 @atoi(i8* nocapture) local_unnamed_addr #7

; Function Attrs: nounwind optsize
declare i32 @ioctl(i32, i64, ...) local_unnamed_addr #6

; Function Attrs: nofree optsize
declare i64 @read(i32, i8* nocapture, i64) local_unnamed_addr #9

; Function Attrs: nounwind optsize
declare i64 @_ZNSt3__16chrono12steady_clock3nowEv() local_unnamed_addr #6

; Function Attrs: nounwind optsize
declare i32 @getpid() local_unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i64 @_ZN4llvm7hashing6detail29hash_combine_recursive_helper7combineIxJiEEENS_9hash_codeEmPcS5_RKT_DpRKT0_(%"struct.llvm::hashing::detail::hash_combine_recursive_helper"*, i64, i8*, i8*, i64* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store i64 %1, i64* %8, align 8
  %9 = load i64, i64* %4, align 8
  %10 = call i8* @_ZN4llvm7hashing6detail29hash_combine_recursive_helper12combine_dataIxEEPcRmS4_S4_T_(%"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64* nonnull dereferenceable(8) %8, i8* %2, i8* %3, i64 %9) #18
  %11 = load i64, i64* %8, align 8
  %12 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  store i64 %11, i64* %7, align 8
  %13 = load i32, i32* %5, align 4
  %14 = call i8* @_ZN4llvm7hashing6detail29hash_combine_recursive_helper12combine_dataIiEEPcRmS4_S4_T_(%"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64* nonnull dereferenceable(8) %7, i8* %10, i8* %3, i32 %13) #19
  %15 = load i64, i64* %7, align 8
  %16 = call i64 @_ZN4llvm7hashing6detail29hash_combine_recursive_helper7combineEmPcS3_(%"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 %15, i8* %14, i8* %3) #19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  ret i64 %16
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i8* @_ZN4llvm7hashing6detail29hash_combine_recursive_helper12combine_dataIxEEPcRmS4_S4_T_(%"struct.llvm::hashing::detail::hash_combine_recursive_helper"*, i64* dereferenceable(8), i8*, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca i64, align 8
  %7 = alloca %"struct.llvm::hashing::detail::hash_state", align 8
  store i64 %4, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = icmp ugt i8* %8, %3
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = bitcast i8* %2 to i64*
  store i64 %4, i64* %11, align 1
  br label %40

12:                                               ; preds = %5
  %13 = ptrtoint i8* %3 to i64
  %14 = ptrtoint i8* %2 to i64
  %15 = sub i64 %13, %14
  %16 = bitcast i64* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* nonnull align 8 %16, i64 %15, i1 false)
  %17 = load i64, i64* %1, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %26

19:                                               ; preds = %12
  %20 = bitcast %"struct.llvm::hashing::detail::hash_state"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %20) #17
  %21 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 0
  %22 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  call void @_ZN4llvm7hashing6detail10hash_state6createEPKcm(%"struct.llvm::hashing::detail::hash_state"* nonnull sret %7, i8* %21, i64 %23) #18
  %24 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 1
  %25 = bitcast %"struct.llvm::hashing::detail::hash_state"* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* nonnull align 8 %20, i64 56, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %20) #17
  br label %31

26:                                               ; preds = %12
  %27 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 1
  %28 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 0
  tail call void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"* %27, i8* %28) #18
  %29 = load i64, i64* %1, align 8
  %30 = add i64 %29, 64
  br label %31

31:                                               ; preds = %26, %19
  %32 = phi i64 [ %30, %26 ], [ 64, %19 ]
  store i64 %32, i64* %1, align 8
  %33 = sub i64 8, %15
  %34 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 %33
  %35 = icmp ugt i8* %34, %3
  br i1 %35, label %39, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 0
  %38 = getelementptr inbounds i8, i8* %16, i64 %15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %38, i64 %33, i1 false) #17
  br label %40

39:                                               ; preds = %31
  call void @abort() #20
  unreachable

40:                                               ; preds = %36, %10
  %41 = phi i8* [ %8, %10 ], [ %34, %36 ]
  ret i8* %41
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm7hashing6detail10hash_state6createEPKcm(%"struct.llvm::hashing::detail::hash_state"* noalias sret, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 0
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 1
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 2
  %7 = xor i64 %2, -5435081209227447693
  %8 = mul i64 %7, -7070675565921424023
  %9 = lshr i64 %8, 47
  %10 = xor i64 %8, -5435081209227447693
  %11 = xor i64 %10, %9
  %12 = mul i64 %11, -7070675565921424023
  %13 = lshr i64 %12, 47
  %14 = xor i64 %13, %12
  %15 = mul i64 %14, -7070675565921424023
  store i64 %15, i64* %6, align 8
  %16 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 3
  %17 = lshr i64 %7, 49
  %18 = shl i64 %7, 15
  %19 = or i64 %18, %17
  store i64 %19, i64* %16, align 8
  %20 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 4
  %21 = mul i64 %2, -5435081209227447693
  store i64 %21, i64* %20, align 8
  %22 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 5
  %23 = lshr i64 %2, 47
  %24 = xor i64 %23, %2
  store i64 %24, i64* %22, align 8
  %25 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 6
  %26 = xor i64 %24, %21
  %27 = mul i64 %26, -7070675565921424023
  %28 = lshr i64 %27, 47
  %29 = xor i64 %27, %24
  %30 = xor i64 %29, %28
  %31 = mul i64 %30, -7070675565921424023
  %32 = lshr i64 %31, 47
  %33 = xor i64 %32, %31
  %34 = mul i64 %33, -7070675565921424023
  store i64 %34, i64* %25, align 8
  tail call void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"* %0, i8* %1) #18
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %4
  %8 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %7, %9
  %11 = getelementptr inbounds i8, i8* %1, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = add i64 %10, %13
  %15 = lshr i64 %14, 37
  %16 = shl i64 %14, 27
  %17 = or i64 %16, %15
  %18 = mul i64 %17, -5435081209227447693
  store i64 %18, i64* %3, align 8
  %19 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 4
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %6
  %22 = getelementptr inbounds i8, i8* %1, i64 48
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = add i64 %21, %24
  %26 = lshr i64 %25, 42
  %27 = shl i64 %25, 22
  %28 = or i64 %27, %26
  %29 = mul i64 %28, -5435081209227447693
  store i64 %29, i64* %5, align 8
  %30 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 6
  %31 = load i64, i64* %30, align 8
  %32 = xor i64 %31, %18
  store i64 %32, i64* %3, align 8
  %33 = getelementptr inbounds i8, i8* %1, i64 40
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = add i64 %35, %9
  %37 = add i64 %36, %29
  store i64 %37, i64* %5, align 8
  %38 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 5
  %41 = load i64, i64* %40, align 8
  %42 = add i64 %41, %39
  %43 = lshr i64 %42, 33
  %44 = shl i64 %42, 31
  %45 = or i64 %44, %43
  %46 = mul i64 %45, -5435081209227447693
  store i64 %46, i64* %38, align 8
  %47 = mul i64 %20, -5435081209227447693
  store i64 %47, i64* %8, align 8
  %48 = add i64 %41, %32
  store i64 %48, i64* %19, align 8
  tail call void @_ZN4llvm7hashing6detail10hash_state12mix_32_bytesEPKcRmS5_(i8* %1, i64* dereferenceable(8) %8, i64* dereferenceable(8) %19) #18
  %49 = load i64, i64* %38, align 8
  %50 = load i64, i64* %30, align 8
  %51 = add i64 %50, %49
  store i64 %51, i64* %40, align 8
  %52 = load i64, i64* %5, align 8
  %53 = getelementptr inbounds i8, i8* %1, i64 16
  %54 = bitcast i8* %53 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = add i64 %55, %52
  store i64 %56, i64* %30, align 8
  %57 = getelementptr inbounds i8, i8* %1, i64 32
  tail call void @_ZN4llvm7hashing6detail10hash_state12mix_32_bytesEPKcRmS5_(i8* %57, i64* dereferenceable(8) %40, i64* dereferenceable(8) %30) #18
  %58 = load i64, i64* %38, align 8
  %59 = load i64, i64* %3, align 8
  store i64 %59, i64* %38, align 8
  store i64 %58, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm7hashing6detail10hash_state12mix_32_bytesEPKcRmS5_(i8*, i64* dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i8* %0 to i64*
  %5 = load i64, i64* %4, align 1
  %6 = load i64, i64* %1, align 8
  %7 = add i64 %6, %5
  store i64 %7, i64* %1, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 24
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = load i64, i64* %2, align 8
  %12 = add i64 %10, %7
  %13 = add i64 %12, %11
  %14 = lshr i64 %13, 21
  %15 = shl i64 %13, 43
  %16 = or i64 %15, %14
  store i64 %16, i64* %2, align 8
  %17 = load i64, i64* %1, align 8
  %18 = getelementptr inbounds i8, i8* %0, i64 8
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = getelementptr inbounds i8, i8* %0, i64 16
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = add i64 %20, %17
  %25 = add i64 %24, %23
  store i64 %25, i64* %1, align 8
  %26 = lshr i64 %25, 44
  %27 = shl i64 %25, 20
  %28 = or i64 %27, %26
  %29 = load i64, i64* %2, align 8
  %30 = add i64 %29, %17
  %31 = add i64 %30, %28
  store i64 %31, i64* %2, align 8
  %32 = load i64, i64* %1, align 8
  %33 = add i64 %32, %10
  store i64 %33, i64* %1, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i8* @_ZN4llvm7hashing6detail29hash_combine_recursive_helper12combine_dataIiEEPcRmS4_S4_T_(%"struct.llvm::hashing::detail::hash_combine_recursive_helper"*, i64* dereferenceable(8), i8*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca i32, align 4
  %7 = alloca %"struct.llvm::hashing::detail::hash_state", align 8
  store i32 %4, i32* %6, align 4
  %8 = getelementptr inbounds i8, i8* %2, i64 4
  %9 = icmp ugt i8* %8, %3
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = bitcast i8* %2 to i32*
  store i32 %4, i32* %11, align 1
  br label %40

12:                                               ; preds = %5
  %13 = ptrtoint i8* %3 to i64
  %14 = ptrtoint i8* %2 to i64
  %15 = sub i64 %13, %14
  %16 = bitcast i32* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* nonnull align 4 %16, i64 %15, i1 false)
  %17 = load i64, i64* %1, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %26

19:                                               ; preds = %12
  %20 = bitcast %"struct.llvm::hashing::detail::hash_state"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %20) #17
  %21 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 0
  %22 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  call void @_ZN4llvm7hashing6detail10hash_state6createEPKcm(%"struct.llvm::hashing::detail::hash_state"* nonnull sret %7, i8* %21, i64 %23) #18
  %24 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 1
  %25 = bitcast %"struct.llvm::hashing::detail::hash_state"* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* nonnull align 8 %20, i64 56, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %20) #17
  br label %31

26:                                               ; preds = %12
  %27 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 1
  %28 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 0
  tail call void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"* %27, i8* %28) #18
  %29 = load i64, i64* %1, align 8
  %30 = add i64 %29, 64
  br label %31

31:                                               ; preds = %26, %19
  %32 = phi i64 [ %30, %26 ], [ 64, %19 ]
  store i64 %32, i64* %1, align 8
  %33 = sub i64 4, %15
  %34 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 %33
  %35 = icmp ugt i8* %34, %3
  br i1 %35, label %39, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 0
  %38 = getelementptr inbounds i8, i8* %16, i64 %15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %38, i64 %33, i1 false) #17
  br label %40

39:                                               ; preds = %31
  call void @abort() #20
  unreachable

40:                                               ; preds = %36, %10
  %41 = phi i8* [ %8, %10 ], [ %34, %36 ]
  ret i8* %41
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i64 @_ZN4llvm7hashing6detail29hash_combine_recursive_helper7combineEmPcS3_(%"struct.llvm::hashing::detail::hash_combine_recursive_helper"*, i64, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = icmp eq i64 %1, 0
  %6 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 0
  br i1 %5, label %7, label %14

7:                                                ; preds = %4
  %8 = ptrtoint i8* %2 to i64
  %9 = ptrtoint %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0 to i64
  %10 = sub i64 %8, %9
  %11 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = tail call i64 @_ZN4llvm7hashing6detail10hash_shortEPKcmm(i8* %6, i64 %10, i64 %12) #18
  br label %53

14:                                               ; preds = %4
  %15 = icmp eq i8* %6, %2
  %16 = icmp eq i8* %2, %3
  %17 = or i1 %15, %16
  br i1 %17, label %46, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 1
  %20 = icmp eq i8* %19, %2
  br i1 %20, label %21, label %30

21:                                               ; preds = %18
  %22 = load i8, i8* %6, align 1
  %23 = ptrtoint i8* %3 to i64
  %24 = ptrtoint i8* %2 to i64
  %25 = sub i64 %23, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %28, label %27

27:                                               ; preds = %21
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 %25, i1 false) #17
  br label %28

28:                                               ; preds = %27, %21
  %29 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 0, i64 %25
  store i8 %22, i8* %29, align 1
  br label %46

30:                                               ; preds = %18
  %31 = getelementptr inbounds i8, i8* %2, i64 1
  %32 = icmp eq i8* %31, %3
  br i1 %32, label %33, label %44

33:                                               ; preds = %30
  %34 = getelementptr inbounds i8, i8* %3, i64 -1
  %35 = load i8, i8* %34, align 1
  %36 = ptrtoint i8* %34 to i64
  %37 = ptrtoint %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0 to i64
  %38 = sub i64 %36, %37
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %33
  %41 = sub i64 0, %38
  %42 = getelementptr inbounds i8, i8* %3, i64 %41
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %6, i64 %38, i1 false) #17
  br label %43

43:                                               ; preds = %40, %33
  store i8 %35, i8* %6, align 1
  br label %46

44:                                               ; preds = %30
  %45 = tail call i8* @_ZNSt3__112__rotate_gcdIPcEET_S2_S2_S2_(i8* %6, i8* %2, i8* %3) #19
  br label %46

46:                                               ; preds = %14, %28, %43, %44
  %47 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_combine_recursive_helper", %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0, i64 0, i32 1
  tail call void @_ZN4llvm7hashing6detail10hash_state3mixEPKc(%"struct.llvm::hashing::detail::hash_state"* %47, i8* %6) #18
  %48 = ptrtoint i8* %2 to i64
  %49 = ptrtoint %"struct.llvm::hashing::detail::hash_combine_recursive_helper"* %0 to i64
  %50 = sub i64 %1, %49
  %51 = add i64 %50, %48
  %52 = tail call i64 @_ZN4llvm7hashing6detail10hash_state8finalizeEm(%"struct.llvm::hashing::detail::hash_state"* %47, i64 %51) #18
  br label %53

53:                                               ; preds = %46, %7
  %54 = phi i64 [ %13, %7 ], [ %52, %46 ]
  ret i64 %54
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden i64 @_ZN4llvm7hashing6detail10hash_shortEPKcmm(i8*, i64, i64) local_unnamed_addr #15 comdat {
  %4 = add i64 %1, -4
  %5 = icmp ult i64 %4, 5
  br i1 %5, label %6, label %27

6:                                                ; preds = %3
  %7 = bitcast i8* %0 to i32*
  %8 = load i32, i32* %7, align 1
  %9 = zext i32 %8 to i64
  %10 = shl nuw nsw i64 %9, 3
  %11 = add nuw nsw i64 %10, %1
  %12 = getelementptr inbounds i8, i8* %0, i64 %1
  %13 = getelementptr inbounds i8, i8* %12, i64 -4
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 1
  %16 = zext i32 %15 to i64
  %17 = xor i64 %16, %2
  %18 = xor i64 %17, %11
  %19 = mul i64 %18, -7070675565921424023
  %20 = lshr i64 %19, 47
  %21 = xor i64 %19, %17
  %22 = xor i64 %21, %20
  %23 = mul i64 %22, -7070675565921424023
  %24 = lshr i64 %23, 47
  %25 = xor i64 %24, %23
  %26 = mul i64 %25, -7070675565921424023
  br label %208

27:                                               ; preds = %3
  %28 = add i64 %1, -9
  %29 = icmp ult i64 %28, 8
  br i1 %29, label %30, label %53

30:                                               ; preds = %27
  %31 = bitcast i8* %0 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = getelementptr inbounds i8, i8* %0, i64 %1
  %34 = getelementptr inbounds i8, i8* %33, i64 -8
  %35 = bitcast i8* %34 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = xor i64 %32, %2
  %38 = add i64 %36, %1
  %39 = lshr i64 %38, %1
  %40 = sub nuw nsw i64 64, %1
  %41 = shl i64 %38, %40
  %42 = or i64 %41, %39
  %43 = xor i64 %37, %42
  %44 = mul i64 %43, -7070675565921424023
  %45 = lshr i64 %44, 47
  %46 = xor i64 %44, %42
  %47 = xor i64 %46, %45
  %48 = mul i64 %47, -7070675565921424023
  %49 = lshr i64 %48, 47
  %50 = xor i64 %49, %48
  %51 = mul i64 %50, -7070675565921424023
  %52 = xor i64 %51, %36
  br label %208

53:                                               ; preds = %27
  %54 = add i64 %1, -17
  %55 = icmp ult i64 %54, 16
  br i1 %55, label %56, label %99

56:                                               ; preds = %53
  %57 = bitcast i8* %0 to i64*
  %58 = load i64, i64* %57, align 1
  %59 = mul i64 %58, -5435081209227447693
  %60 = getelementptr inbounds i8, i8* %0, i64 8
  %61 = bitcast i8* %60 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = getelementptr inbounds i8, i8* %0, i64 %1
  %64 = getelementptr inbounds i8, i8* %63, i64 -8
  %65 = bitcast i8* %64 to i64*
  %66 = load i64, i64* %65, align 1
  %67 = mul i64 %66, -7286425919675154353
  %68 = getelementptr inbounds i8, i8* %63, i64 -16
  %69 = bitcast i8* %68 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = mul i64 %70, -4348849565147123417
  %72 = sub i64 %59, %62
  %73 = lshr i64 %72, 43
  %74 = shl i64 %72, 21
  %75 = or i64 %74, %73
  %76 = xor i64 %67, %2
  %77 = lshr i64 %76, 30
  %78 = shl i64 %76, 34
  %79 = or i64 %78, %77
  %80 = add i64 %71, %75
  %81 = add i64 %80, %79
  %82 = xor i64 %62, -3942382747735136937
  %83 = lshr i64 %82, 20
  %84 = shl i64 %82, 44
  %85 = or i64 %84, %83
  %86 = add i64 %2, %1
  %87 = add i64 %86, %59
  %88 = sub i64 %87, %67
  %89 = add i64 %88, %85
  %90 = xor i64 %81, %89
  %91 = mul i64 %90, -7070675565921424023
  %92 = lshr i64 %91, 47
  %93 = xor i64 %91, %89
  %94 = xor i64 %93, %92
  %95 = mul i64 %94, -7070675565921424023
  %96 = lshr i64 %95, 47
  %97 = xor i64 %96, %95
  %98 = mul i64 %97, -7070675565921424023
  br label %208

99:                                               ; preds = %53
  %100 = icmp ugt i64 %1, 32
  br i1 %100, label %101, label %181

101:                                              ; preds = %99
  %102 = getelementptr inbounds i8, i8* %0, i64 24
  %103 = bitcast i8* %102 to i64*
  %104 = load i64, i64* %103, align 1
  %105 = bitcast i8* %0 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = getelementptr inbounds i8, i8* %0, i64 %1
  %108 = getelementptr inbounds i8, i8* %107, i64 -16
  %109 = bitcast i8* %108 to i64*
  %110 = load i64, i64* %109, align 1
  %111 = add i64 %110, %1
  %112 = mul i64 %111, -4348849565147123417
  %113 = add i64 %112, %106
  %114 = add i64 %113, %104
  %115 = lshr i64 %114, 52
  %116 = shl i64 %114, 12
  %117 = or i64 %116, %115
  %118 = lshr i64 %113, 37
  %119 = shl i64 %113, 27
  %120 = or i64 %119, %118
  %121 = getelementptr inbounds i8, i8* %0, i64 8
  %122 = bitcast i8* %121 to i64*
  %123 = load i64, i64* %122, align 1
  %124 = add i64 %113, %123
  %125 = lshr i64 %124, 7
  %126 = shl i64 %124, 57
  %127 = or i64 %126, %125
  %128 = getelementptr inbounds i8, i8* %0, i64 16
  %129 = bitcast i8* %128 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = add i64 %124, %130
  %132 = lshr i64 %131, 31
  %133 = shl i64 %131, 33
  %134 = or i64 %133, %132
  %135 = add i64 %127, %120
  %136 = add i64 %135, %117
  %137 = add i64 %136, %134
  %138 = getelementptr inbounds i8, i8* %107, i64 -32
  %139 = bitcast i8* %138 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = add i64 %140, %130
  %142 = getelementptr inbounds i8, i8* %107, i64 -8
  %143 = bitcast i8* %142 to i64*
  %144 = load i64, i64* %143, align 1
  %145 = add i64 %141, %144
  %146 = lshr i64 %145, 52
  %147 = shl i64 %145, 12
  %148 = or i64 %147, %146
  %149 = lshr i64 %141, 37
  %150 = shl i64 %141, 27
  %151 = or i64 %150, %149
  %152 = getelementptr inbounds i8, i8* %107, i64 -24
  %153 = bitcast i8* %152 to i64*
  %154 = load i64, i64* %153, align 1
  %155 = add i64 %154, %141
  %156 = lshr i64 %155, 7
  %157 = shl i64 %155, 57
  %158 = or i64 %157, %156
  %159 = add i64 %155, %110
  %160 = add i64 %159, %144
  %161 = lshr i64 %159, 31
  %162 = shl i64 %159, 33
  %163 = or i64 %162, %161
  %164 = add i64 %131, %104
  %165 = add i64 %164, %151
  %166 = add i64 %165, %148
  %167 = add i64 %166, %158
  %168 = add i64 %167, %163
  %169 = mul i64 %168, -7286425919675154353
  %170 = add i64 %160, %137
  %171 = mul i64 %170, -4348849565147123417
  %172 = add i64 %169, %171
  %173 = lshr i64 %172, 47
  %174 = xor i64 %173, %172
  %175 = mul i64 %174, -4348849565147123417
  %176 = xor i64 %175, %2
  %177 = add i64 %176, %137
  %178 = lshr i64 %177, 47
  %179 = xor i64 %178, %177
  %180 = mul i64 %179, -7286425919675154353
  br label %208

181:                                              ; preds = %99
  %182 = icmp eq i64 %1, 0
  br i1 %182, label %206, label %183

183:                                              ; preds = %181
  %184 = load i8, i8* %0, align 1
  %185 = lshr i64 %1, 1
  %186 = getelementptr inbounds i8, i8* %0, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = add nsw i64 %1, -1
  %189 = getelementptr inbounds i8, i8* %0, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %184 to i64
  %192 = zext i8 %187 to i64
  %193 = shl nuw nsw i64 %192, 8
  %194 = or i64 %193, %191
  %195 = zext i8 %190 to i64
  %196 = shl nuw nsw i64 %195, 2
  %197 = add nuw nsw i64 %196, %1
  %198 = mul i64 %194, -7286425919675154353
  %199 = and i64 %197, 4294967295
  %200 = mul i64 %199, -3942382747735136937
  %201 = xor i64 %198, %2
  %202 = xor i64 %201, %200
  %203 = lshr i64 %202, 47
  %204 = xor i64 %203, %202
  %205 = mul i64 %204, -7286425919675154353
  br label %208

206:                                              ; preds = %181
  %207 = xor i64 %2, -7286425919675154353
  br label %208

208:                                              ; preds = %206, %183, %101, %56, %30, %6
  %209 = phi i64 [ %26, %6 ], [ %52, %30 ], [ %98, %56 ], [ %180, %101 ], [ %205, %183 ], [ %207, %206 ]
  ret i64 %209
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i64 @_ZN4llvm7hashing6detail10hash_state8finalizeEm(%"struct.llvm::hashing::detail::hash_state"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 5
  %6 = load i64, i64* %5, align 8
  %7 = xor i64 %6, %4
  %8 = mul i64 %7, -7070675565921424023
  %9 = lshr i64 %8, 47
  %10 = xor i64 %8, %6
  %11 = xor i64 %10, %9
  %12 = mul i64 %11, -7070675565921424023
  %13 = lshr i64 %12, 47
  %14 = xor i64 %13, %12
  %15 = mul i64 %14, -7070675565921424023
  %16 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = lshr i64 %17, 47
  %19 = xor i64 %18, %17
  %20 = mul i64 %19, -5435081209227447693
  %21 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %20, %22
  %24 = add i64 %23, %15
  %25 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 4
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 6
  %28 = load i64, i64* %27, align 8
  %29 = xor i64 %28, %26
  %30 = mul i64 %29, -7070675565921424023
  %31 = lshr i64 %30, 47
  %32 = xor i64 %30, %28
  %33 = xor i64 %32, %31
  %34 = mul i64 %33, -7070675565921424023
  %35 = lshr i64 %34, 47
  %36 = xor i64 %35, %34
  %37 = mul i64 %36, -7070675565921424023
  %38 = lshr i64 %1, 47
  %39 = xor i64 %38, %1
  %40 = mul i64 %39, -5435081209227447693
  %41 = getelementptr inbounds %"struct.llvm::hashing::detail::hash_state", %"struct.llvm::hashing::detail::hash_state"* %0, i64 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, %40
  %44 = add i64 %43, %37
  %45 = xor i64 %44, %24
  %46 = mul i64 %45, -7070675565921424023
  %47 = lshr i64 %46, 47
  %48 = xor i64 %46, %44
  %49 = xor i64 %48, %47
  %50 = mul i64 %49, -7070675565921424023
  %51 = lshr i64 %50, 47
  %52 = xor i64 %51, %50
  %53 = mul i64 %52, -7070675565921424023
  ret i64 %53
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__112__rotate_gcdIPcEET_S2_S2_S2_(i8*, i8*, i8*) local_unnamed_addr #0 comdat {
  %4 = ptrtoint i8* %1 to i64
  %5 = ptrtoint i8* %0 to i64
  %6 = sub i64 %4, %5
  %7 = ptrtoint i8* %2 to i64
  %8 = sub i64 %7, %4
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %10, label %20

10:                                               ; preds = %3
  %11 = icmp eq i8* %0, %1
  br i1 %11, label %50, label %12

12:                                               ; preds = %10, %12
  %13 = phi i8* [ %18, %12 ], [ %1, %10 ]
  %14 = phi i8* [ %17, %12 ], [ %0, %10 ]
  %15 = load i8, i8* %14, align 1
  %16 = load i8, i8* %13, align 1
  store i8 %16, i8* %14, align 1
  store i8 %15, i8* %13, align 1
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  %18 = getelementptr inbounds i8, i8* %13, i64 1
  %19 = icmp eq i8* %17, %1
  br i1 %19, label %50, label %12

20:                                               ; preds = %3, %20
  %21 = phi i64 [ %23, %20 ], [ %8, %3 ]
  %22 = phi i64 [ %21, %20 ], [ %6, %3 ]
  %23 = srem i64 %22, %21
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %20

25:                                               ; preds = %20
  %26 = icmp eq i64 %21, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %25
  %28 = getelementptr inbounds i8, i8* %0, i64 %21
  br label %31

29:                                               ; preds = %48, %25
  %30 = getelementptr inbounds i8, i8* %0, i64 %8
  br label %50

31:                                               ; preds = %27, %48
  %32 = phi i8* [ %33, %48 ], [ %28, %27 ]
  %33 = getelementptr inbounds i8, i8* %32, i64 -1
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 %6
  br label %36

36:                                               ; preds = %36, %31
  %37 = phi i8* [ %33, %31 ], [ %38, %36 ]
  %38 = phi i8* [ %35, %31 ], [ %46, %36 ]
  %39 = load i8, i8* %38, align 1
  store i8 %39, i8* %37, align 1
  %40 = ptrtoint i8* %38 to i64
  %41 = sub i64 %7, %40
  %42 = icmp slt i64 %6, %41
  %43 = getelementptr inbounds i8, i8* %38, i64 %6
  %44 = sub nsw i64 %6, %41
  %45 = getelementptr inbounds i8, i8* %0, i64 %44
  %46 = select i1 %42, i8* %43, i8* %45
  %47 = icmp eq i8* %46, %33
  br i1 %47, label %48, label %36

48:                                               ; preds = %36
  store i8 %34, i8* %38, align 1
  %49 = icmp eq i8* %33, %0
  br i1 %49, label %29, label %31

50:                                               ; preds = %12, %10, %29
  %51 = phi i8* [ %30, %29 ], [ %1, %10 ], [ %1, %12 ]
  ret i8* %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #16

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm15SmallVectorImplIcE6appendIPKcEEvT_S5_(%"class.llvm::SmallVectorImpl.4"*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8* %2 to i64
  %5 = ptrtoint i8* %1 to i64
  %6 = sub i64 %4, %5
  %7 = getelementptr inbounds %"class.llvm::SmallVectorImpl.4", %"class.llvm::SmallVectorImpl.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.llvm::SmallVectorImpl.4", %"class.llvm::SmallVectorImpl.4"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %9, %12
  %14 = icmp ugt i64 %6, %13
  br i1 %14, label %15, label %22

15:                                               ; preds = %3
  %16 = bitcast %"class.llvm::SmallVectorImpl.4"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %12, %6
  %19 = sub i64 %18, %17
  %20 = getelementptr inbounds %"class.llvm::SmallVectorImpl.4", %"class.llvm::SmallVectorImpl.4"* %0, i64 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.llvm::SmallVectorImpl.4", %"class.llvm::SmallVectorImpl.4"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %20, i8* %21, i64 %19, i64 1) #19
  br label %22

22:                                               ; preds = %15, %3
  %23 = icmp eq i8* %1, %2
  br i1 %23, label %26, label %24

24:                                               ; preds = %22
  %25 = load i8*, i8** %10, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %1, i64 %6, i1 false) #17
  br label %26

26:                                               ; preds = %22, %24
  %27 = load i8*, i8** %10, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 %6
  store i8* %28, i8** %10, align 8
  ret void
}

; Function Attrs: optsize
declare void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"*, i8*, i64, i64) local_unnamed_addr #2

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind optsize readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind optsize readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { norecurse nounwind optsize readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { argmemonly nofree nounwind optsize readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nobuiltin nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { inlinehint nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind }
attributes #18 = { optsize }
attributes #19 = { nounwind optsize }
attributes #20 = { noreturn nounwind optsize }
attributes #21 = { builtin nounwind optsize }
attributes #22 = { nounwind optsize readnone }
attributes #23 = { nounwind optsize readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"_ZNK4llvm9StringRef3strEv: argument 0"}
!5 = distinct !{!5, !"_ZNK4llvm9StringRef3strEv"}
!6 = distinct !{!6, !7, !"_ZNK4llvm9StringRefcvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEv: argument 0"}
!7 = distinct !{!7, !"_ZNK4llvm9StringRefcvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK4llvm9StringRef3strEv: argument 0"}
!10 = distinct !{!10, !"_ZNK4llvm9StringRef3strEv"}
!11 = !{!"branch_weights", i32 1, i32 1048575}
