; ModuleID = '../../third_party/openscreen/src/third_party/tinycbor/src/src/cborvalidation.c'
source_filename = "../../third_party/openscreen/src/third_party/tinycbor/src/src/cborvalidation.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.KnownTagData = type { i32, i32 }
%struct.CborValue = type { %struct.CborParser*, i8*, i32, i16, i8, i8 }
%struct.CborParser = type { i8*, i32 }

@knownTagData = internal constant [22 x %struct.KnownTagData] [%struct.KnownTagData { i32 0, i32 96 }, %struct.KnownTagData { i32 1, i32 1 }, %struct.KnownTagData { i32 2, i32 64 }, %struct.KnownTagData { i32 3, i32 64 }, %struct.KnownTagData { i32 4, i32 128 }, %struct.KnownTagData { i32 5, i32 128 }, %struct.KnownTagData { i32 16, i32 128 }, %struct.KnownTagData { i32 17, i32 128 }, %struct.KnownTagData { i32 18, i32 128 }, %struct.KnownTagData { i32 21, i32 10518592 }, %struct.KnownTagData { i32 22, i32 10518592 }, %struct.KnownTagData { i32 23, i32 10518592 }, %struct.KnownTagData { i32 24, i32 64 }, %struct.KnownTagData { i32 32, i32 96 }, %struct.KnownTagData { i32 33, i32 96 }, %struct.KnownTagData { i32 34, i32 96 }, %struct.KnownTagData { i32 35, i32 96 }, %struct.KnownTagData { i32 36, i32 96 }, %struct.KnownTagData { i32 96, i32 128 }, %struct.KnownTagData { i32 97, i32 128 }, %struct.KnownTagData { i32 98, i32 128 }, %struct.KnownTagData { i32 55799, i32 0 }], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cbor_value_validate(%struct.CborValue* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = alloca %struct.CborValue, align 8
  %4 = bitcast %struct.CborValue* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #6
  %5 = bitcast %struct.CborValue* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %5, i64 24, i1 false)
  %6 = call fastcc i32 @validate_value(%struct.CborValue* nonnull %3, i32 %1, i32 1024)
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %19

8:                                                ; preds = %2
  %9 = icmp slt i32 %1, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %8
  %11 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 0
  %14 = load %struct.CborParser*, %struct.CborParser** %13, align 8
  %15 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %14, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %12, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %10, %8
  br label %19

19:                                               ; preds = %10, %2, %18
  %20 = phi i32 [ 0, %18 ], [ %6, %2 ], [ 256, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #6
  ret i32 %20
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @validate_value(%struct.CborValue*, i32, i32) unnamed_addr #0 {
  %4 = alloca %struct.CborValue, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i16, align 2
  %13 = alloca %struct.CborValue, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8*, align 8
  %16 = alloca %struct.CborValue, align 8
  %17 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 4
  %18 = load i8, i8* %17, align 2
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 5
  %21 = load i8, i8* %20, align 1
  %22 = and i8 %21, 4
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %64

24:                                               ; preds = %3
  %25 = bitcast i8** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #6
  %26 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast i8** %10 to i64*
  store i64 %28, i64* %29, align 8
  %30 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #6
  store i64 -6148914691236517206, i64* %11, align 8
  %31 = and i32 %1, 1
  %32 = icmp eq i32 %31, 0
  %33 = add nsw i32 %19, -249
  %34 = icmp ult i32 %33, 3
  %35 = or i1 %32, %34
  br i1 %35, label %61, label %36

36:                                               ; preds = %24
  %37 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 0
  %38 = load %struct.CborParser*, %struct.CborParser** %37, align 8
  %39 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %38, i64 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 @_cbor_value_extract_number(i8** nonnull %10, i8* %40, i64* nonnull %11) #6
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %62

43:                                               ; preds = %36
  %44 = load i64, i64* %29, align 8
  %45 = load i64, i64* %27, align 8
  %46 = xor i64 %45, -1
  %47 = add i64 %44, %46
  %48 = load i64, i64* %11, align 8
  %49 = icmp ugt i64 %48, 23
  %50 = zext i1 %49 to i64
  %51 = icmp ugt i64 %48, 255
  %52 = select i1 %49, i64 2, i64 1
  %53 = select i1 %51, i64 %52, i64 %50
  %54 = icmp ugt i64 %48, 65535
  %55 = add nuw nsw i64 %53, 2
  %56 = select i1 %54, i64 %55, i64 %53
  %57 = icmp ugt i64 %48, 4294967295
  %58 = add nuw nsw i64 %56, 4
  %59 = select i1 %57, i64 %58, i64 %56
  %60 = icmp ult i64 %59, %47
  br i1 %60, label %62, label %61

61:                                               ; preds = %24, %43
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #6
  br label %67

62:                                               ; preds = %43, %36
  %63 = phi i32 [ %41, %36 ], [ 520, %43 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #6
  br label %550

64:                                               ; preds = %3
  %65 = and i32 %1, 256
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %550

67:                                               ; preds = %61, %64
  switch i8 %18, label %548 [
    i8 -128, label %68
    i8 -96, label %68
    i8 0, label %179
    i8 64, label %185
    i8 96, label %185
    i8 -64, label %329
    i8 -32, label %399
    i8 -1, label %550
    i8 -5, label %414
    i8 -9, label %411
    i8 -7, label %414
    i8 -6, label %414
  ]

68:                                               ; preds = %67, %67
  %69 = bitcast %struct.CborValue* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %69) #6
  %70 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %13, i64 0, i32 0
  %71 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %13, i64 0, i32 1
  %72 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %13, i64 0, i32 2
  %73 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %13, i64 0, i32 4
  %74 = bitcast %struct.CborValue* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %74, i8 -86, i64 24, i1 false)
  %75 = call i32 @cbor_value_enter_container(%struct.CborValue* %0, %struct.CborValue* nonnull %13) #6
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %169

77:                                               ; preds = %68
  %78 = add nsw i32 %2, -1
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %169, label %80

80:                                               ; preds = %77
  %81 = load i32, i32* %72, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %175, label %83

83:                                               ; preds = %80
  %84 = icmp ne i8 %18, -96
  %85 = and i32 %1, 1048576
  %86 = icmp eq i32 %85, 0
  %87 = or i1 %86, %84
  %88 = bitcast %struct.CborValue* %4 to i8*
  %89 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %4, i64 0, i32 4
  %90 = icmp eq i8 %18, -96
  %91 = and i32 %1, 768
  %92 = icmp eq i32 %91, 0
  %93 = bitcast i64* %5 to i8*
  %94 = bitcast i64* %6 to i8*
  %95 = bitcast i8** %7 to i8*
  %96 = bitcast i8** %71 to i64*
  %97 = and i32 %1, 4864
  %98 = icmp eq i32 %97, 4864
  br label %99

99:                                               ; preds = %83, %164
  %100 = phi i8* [ null, %83 ], [ %166, %164 ]
  %101 = phi i8* [ null, %83 ], [ %165, %164 ]
  %102 = load i8*, i8** %71, align 8
  br i1 %87, label %115, label %103

103:                                              ; preds = %99
  %104 = load i8, i8* %73, align 2
  %105 = icmp eq i8 %104, -64
  br i1 %105, label %106, label %112

106:                                              ; preds = %103
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %88) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %88, i8* nonnull align 8 %69, i64 24, i1 false) #6
  %107 = call i32 @cbor_value_skip_tag(%struct.CborValue* nonnull %4) #6
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %111

109:                                              ; preds = %106
  %110 = load i8, i8* %89, align 2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %88) #6
  br label %112

111:                                              ; preds = %106
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %88) #6
  br label %169

112:                                              ; preds = %109, %103
  %113 = phi i8 [ %104, %103 ], [ %110, %109 ]
  %114 = icmp eq i8 %113, 96
  br i1 %114, label %115, label %169

115:                                              ; preds = %112, %99
  %116 = call fastcc i32 @validate_value(%struct.CborValue* nonnull %13, i32 %1, i32 %78) #6
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %169

118:                                              ; preds = %115
  br i1 %90, label %119, label %164

119:                                              ; preds = %118
  br i1 %92, label %159, label %120

120:                                              ; preds = %119
  %121 = icmp eq i8* %101, null
  br i1 %121, label %157, label %122

122:                                              ; preds = %120
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %93) #6
  store i64 -6148914691236517206, i64* %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #6
  store i64 -6148914691236517206, i64* %6, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %95) #6
  store i8* %101, i8** %7, align 8
  %123 = load %struct.CborParser*, %struct.CborParser** %70, align 8
  %124 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %123, i64 0, i32 0
  %125 = load i8*, i8** %124, align 8
  %126 = call i32 @_cbor_value_extract_number(i8** nonnull %7, i8* %125, i64* nonnull %5) #6
  store i8* %102, i8** %7, align 8
  %127 = load %struct.CborParser*, %struct.CborParser** %70, align 8
  %128 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %127, i64 0, i32 0
  %129 = load i8*, i8** %128, align 8
  %130 = call i32 @_cbor_value_extract_number(i8** nonnull %7, i8* %129, i64* nonnull %6) #6
  %131 = load i64, i64* %5, align 8
  %132 = load i64, i64* %6, align 8
  %133 = icmp ugt i64 %131, %132
  br i1 %133, label %155, label %134

134:                                              ; preds = %122
  %135 = icmp eq i64 %131, %132
  br i1 %135, label %136, label %154

136:                                              ; preds = %134
  %137 = ptrtoint i8* %100 to i64
  %138 = ptrtoint i8* %101 to i64
  %139 = sub i64 %137, %138
  %140 = load i64, i64* %96, align 8
  %141 = ptrtoint i8* %102 to i64
  %142 = sub i64 %140, %141
  %143 = icmp ugt i64 %139, %142
  %144 = select i1 %143, i64 %142, i64 %139
  %145 = call i32 @memcmp(i8* nonnull %101, i8* %102, i64 %144) #7
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %151

147:                                              ; preds = %136
  %148 = icmp eq i64 %139, %142
  br i1 %148, label %153, label %149

149:                                              ; preds = %147
  %150 = icmp ult i64 %139, %142
  br i1 %150, label %154, label %155

151:                                              ; preds = %136
  %152 = icmp sgt i32 %145, 0
  br i1 %152, label %155, label %154

153:                                              ; preds = %147
  br i1 %98, label %155, label %154

154:                                              ; preds = %149, %151, %134, %153
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %95) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93) #6
  br label %157

155:                                              ; preds = %153, %149, %151, %122
  %156 = phi i32 [ 522, %122 ], [ 522, %151 ], [ 522, %149 ], [ 523, %153 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %95) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93) #6
  br label %169

157:                                              ; preds = %154, %120
  %158 = load i8*, i8** %71, align 8
  br label %159

159:                                              ; preds = %157, %119
  %160 = phi i8* [ %102, %157 ], [ %101, %119 ]
  %161 = phi i8* [ %158, %157 ], [ %100, %119 ]
  %162 = call fastcc i32 @validate_value(%struct.CborValue* nonnull %13, i32 %1, i32 %78) #6
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %169

164:                                              ; preds = %159, %118
  %165 = phi i8* [ %101, %118 ], [ %160, %159 ]
  %166 = phi i8* [ %100, %118 ], [ %161, %159 ]
  %167 = load i32, i32* %72, align 8
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %175, label %99

169:                                              ; preds = %115, %159, %112, %155, %111, %77, %68
  %170 = phi i32 [ 1025, %77 ], [ %75, %68 ], [ %107, %111 ], [ %156, %155 ], [ %116, %115 ], [ 521, %112 ], [ %162, %159 ]
  %171 = bitcast i8** %71 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %174 = bitcast i8** %173 to i64*
  store i64 %172, i64* %174, align 8
  br label %177

175:                                              ; preds = %164, %80
  %176 = call i32 @cbor_value_leave_container(%struct.CborValue* %0, %struct.CborValue* nonnull %13) #6
  br label %177

177:                                              ; preds = %175, %169
  %178 = phi i32 [ %170, %169 ], [ %176, %175 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %69) #6
  br label %550

179:                                              ; preds = %67
  %180 = load i8, i8* %20, align 1
  %181 = and i8 %180, 1
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %548, label %183

183:                                              ; preds = %179
  %184 = call i64 @_cbor_value_decode_int64_internal(%struct.CborValue* %0) #6
  br label %548

185:                                              ; preds = %67, %67
  %186 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %186) #6
  store i64 0, i64* %14, align 8
  %187 = bitcast i8** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %187) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %15, align 8
  %188 = call i32 @_cbor_value_prepare_string_iteration(%struct.CborValue* %0) #6
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %327

190:                                              ; preds = %185
  %191 = bitcast %struct.CborValue* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %191) #6
  %192 = bitcast %struct.CborValue* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %192, i8 -86, i64 24, i1 false)
  %193 = call i32 @_cbor_value_get_string_chunk(%struct.CborValue* %0, i8** nonnull %15, i64* nonnull %14, %struct.CborValue* nonnull %16) #6
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %325

195:                                              ; preds = %190
  %196 = bitcast i8** %8 to i8*
  %197 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 1
  %198 = bitcast i8** %197 to i64*
  %199 = bitcast i8** %8 to i64*
  %200 = bitcast i64* %9 to i8*
  %201 = and i32 %1, 1
  %202 = icmp eq i32 %201, 0
  %203 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 0
  %204 = bitcast %struct.CborValue* %0 to i8*
  %205 = icmp ne i8 %18, 96
  %206 = and i32 %1, 16384
  %207 = icmp eq i32 %206, 0
  %208 = or i1 %207, %205
  %209 = bitcast %struct.CborValue* %16 to i8*
  br label %210

210:                                              ; preds = %195, %322
  %211 = load i8*, i8** %15, align 8
  %212 = icmp eq i8* %211, null
  br i1 %212, label %213, label %214

213:                                              ; preds = %210
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %204, i8* nonnull align 8 %191, i64 24, i1 false)
  br label %325

214:                                              ; preds = %210
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %196) #6
  %215 = load i64, i64* %198, align 8
  store i64 %215, i64* %199, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %200) #6
  store i64 -6148914691236517206, i64* %9, align 8
  br i1 %202, label %244, label %216

216:                                              ; preds = %214
  %217 = load %struct.CborParser*, %struct.CborParser** %203, align 8
  %218 = getelementptr inbounds %struct.CborParser, %struct.CborParser* %217, i64 0, i32 0
  %219 = load i8*, i8** %218, align 8
  %220 = call i32 @_cbor_value_extract_number(i8** nonnull %8, i8* %219, i64* nonnull %9) #6
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %242

222:                                              ; preds = %216
  %223 = load i64, i64* %199, align 8
  %224 = load i64, i64* %198, align 8
  %225 = xor i64 %224, -1
  %226 = add i64 %223, %225
  %227 = load i64, i64* %9, align 8
  %228 = icmp ugt i64 %227, 23
  %229 = zext i1 %228 to i64
  %230 = icmp ugt i64 %227, 255
  %231 = select i1 %228, i64 2, i64 1
  %232 = select i1 %230, i64 %231, i64 %229
  %233 = icmp ugt i64 %227, 65535
  %234 = add nuw nsw i64 %232, 2
  %235 = select i1 %233, i64 %234, i64 %232
  %236 = icmp ugt i64 %227, 4294967295
  %237 = add nuw nsw i64 %235, 4
  %238 = select i1 %236, i64 %237, i64 %235
  %239 = icmp ult i64 %238, %226
  br i1 %239, label %242, label %240

240:                                              ; preds = %222
  %241 = load i8*, i8** %15, align 8
  br label %244

242:                                              ; preds = %222, %216
  %243 = phi i32 [ %220, %216 ], [ 520, %222 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %200) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %196) #6
  br label %325

244:                                              ; preds = %240, %214
  %245 = phi i8* [ %241, %240 ], [ %211, %214 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %200) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %196) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %204, i8* nonnull align 8 %191, i64 24, i1 false)
  %246 = icmp eq i8* %245, null
  br i1 %246, label %325, label %247

247:                                              ; preds = %244
  br i1 %208, label %322, label %248

248:                                              ; preds = %247
  %249 = load i64, i64* %14, align 8
  %250 = getelementptr inbounds i8, i8* %245, i64 %249
  %251 = ptrtoint i8* %250 to i64
  %252 = icmp sgt i64 %249, 0
  br i1 %252, label %253, label %322

253:                                              ; preds = %248, %319
  %254 = phi i8* [ %320, %319 ], [ %245, %248 ]
  %255 = ptrtoint i8* %254 to i64
  %256 = sub i64 %251, %255
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %325, label %258

258:                                              ; preds = %253
  %259 = getelementptr inbounds i8, i8* %254, i64 1
  %260 = load i8, i8* %254, align 1
  %261 = zext i8 %260 to i32
  %262 = icmp sgt i8 %260, -1
  br i1 %262, label %319, label %263

263:                                              ; preds = %258
  %264 = icmp ult i8 %260, -62
  br i1 %264, label %325, label %265, !prof !2

265:                                              ; preds = %263
  %266 = icmp ult i8 %260, -32
  br i1 %266, label %271, label %267

267:                                              ; preds = %265
  %268 = icmp ult i8 %260, -16
  br i1 %268, label %271, label %269

269:                                              ; preds = %267
  %270 = icmp ult i8 %260, -11
  br i1 %270, label %271, label %325

271:                                              ; preds = %269, %267, %265
  %272 = phi i32 [ 31, %265 ], [ 15, %267 ], [ 7, %269 ]
  %273 = phi i32 [ 2, %265 ], [ 3, %267 ], [ 4, %269 ]
  %274 = phi i32 [ 128, %265 ], [ 2048, %267 ], [ 65536, %269 ]
  %275 = and i32 %272, %261
  %276 = zext i32 %273 to i64
  %277 = icmp slt i64 %256, %276
  br i1 %277, label %325, label %278

278:                                              ; preds = %271
  %279 = getelementptr inbounds i8, i8* %254, i64 2
  %280 = load i8, i8* %259, align 1
  %281 = zext i8 %280 to i32
  %282 = and i32 %281, 192
  %283 = icmp eq i32 %282, 128
  br i1 %283, label %284, label %325

284:                                              ; preds = %278
  %285 = shl nuw nsw i32 %275, 6
  %286 = and i32 %281, 63
  %287 = or i32 %286, %285
  %288 = icmp ugt i32 %273, 2
  br i1 %288, label %289, label %310

289:                                              ; preds = %284
  %290 = getelementptr inbounds i8, i8* %254, i64 3
  %291 = load i8, i8* %279, align 1
  %292 = zext i8 %291 to i32
  %293 = and i32 %292, 192
  %294 = icmp eq i32 %293, 128
  br i1 %294, label %295, label %325

295:                                              ; preds = %289
  %296 = shl nuw nsw i32 %287, 6
  %297 = and i32 %292, 63
  %298 = or i32 %297, %296
  %299 = icmp ugt i32 %273, 3
  br i1 %299, label %300, label %310

300:                                              ; preds = %295
  %301 = load i8, i8* %290, align 1
  %302 = zext i8 %301 to i32
  %303 = and i32 %302, 192
  %304 = icmp eq i32 %303, 128
  br i1 %304, label %305, label %325

305:                                              ; preds = %300
  %306 = getelementptr inbounds i8, i8* %254, i64 4
  %307 = shl nuw nsw i32 %298, 6
  %308 = and i32 %302, 63
  %309 = or i32 %308, %307
  br label %310

310:                                              ; preds = %305, %295, %284
  %311 = phi i8* [ %306, %305 ], [ %290, %295 ], [ %279, %284 ]
  %312 = phi i32 [ %309, %305 ], [ %298, %295 ], [ %287, %284 ]
  %313 = icmp ult i32 %312, %274
  br i1 %313, label %325, label %314

314:                                              ; preds = %310
  %315 = and i32 %312, -2048
  %316 = icmp eq i32 %315, 55296
  %317 = icmp ugt i32 %312, 1114111
  %318 = or i1 %317, %316
  br i1 %318, label %325, label %319

319:                                              ; preds = %314, %258
  %320 = phi i8* [ %311, %314 ], [ %259, %258 ]
  %321 = icmp ult i8* %320, %250
  br i1 %321, label %253, label %322

322:                                              ; preds = %319, %247, %248
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %191) #6
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %191) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %209, i8 -86, i64 24, i1 false)
  %323 = call i32 @_cbor_value_get_string_chunk(%struct.CborValue* %0, i8** nonnull %15, i64* nonnull %14, %struct.CborValue* nonnull %16) #6
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %210, label %325

325:                                              ; preds = %244, %322, %253, %263, %269, %271, %278, %289, %300, %310, %314, %213, %242, %190
  %326 = phi i32 [ %243, %242 ], [ %193, %190 ], [ 0, %213 ], [ 516, %314 ], [ 516, %310 ], [ 516, %300 ], [ 516, %289 ], [ 516, %278 ], [ 516, %271 ], [ 516, %269 ], [ 516, %263 ], [ 516, %253 ], [ 0, %244 ], [ %323, %322 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %191) #6
  br label %327

327:                                              ; preds = %325, %185
  %328 = phi i32 [ %188, %185 ], [ %326, %325 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %187) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %186) #6
  br label %550

329:                                              ; preds = %67
  %330 = load i8, i8* %20, align 1
  %331 = and i8 %330, 1
  %332 = icmp eq i8 %331, 0
  br i1 %332, label %335, label %333

333:                                              ; preds = %329
  %334 = call i64 @_cbor_value_decode_int64_internal(%struct.CborValue* %0) #6
  br label %339

335:                                              ; preds = %329
  %336 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 3
  %337 = load i16, i16* %336, align 4
  %338 = zext i16 %337 to i64
  br label %339

339:                                              ; preds = %333, %335
  %340 = phi i64 [ %334, %333 ], [ %338, %335 ]
  %341 = call i32 @cbor_value_advance_fixed(%struct.CborValue* %0) #6
  %342 = icmp eq i32 %341, 0
  br i1 %342, label %343, label %550

343:                                              ; preds = %339
  %344 = add nsw i32 %2, -1
  %345 = load i8, i8* %17, align 2
  %346 = icmp eq i32 %344, 0
  br i1 %346, label %550, label %347

347:                                              ; preds = %343
  %348 = and i32 %1, 4194304
  %349 = icmp eq i32 %348, 0
  br i1 %349, label %350, label %550

350:                                              ; preds = %347
  switch i64 %340, label %552 [
    i64 0, label %352
    i64 1, label %351
  ]

351:                                              ; preds = %350
  br label %352

352:                                              ; preds = %350, %351, %586, %580, %576, %572, %568, %562, %558, %554, %590, %588, %584, %582, %578, %574, %570, %566, %564, %560, %556, %552
  %353 = phi %struct.KnownTagData* [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 0), %350 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 2), %552 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 3), %554 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 4), %556 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 5), %558 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 6), %560 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 7), %562 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 8), %564 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 9), %566 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 10), %568 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 11), %570 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 12), %572 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 13), %574 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 14), %576 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 15), %578 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 16), %580 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 17), %582 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 18), %584 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 19), %586 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 20), %588 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 21), %590 ], [ getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 0, i64 1), %351 ]
  %354 = phi i64 [ %340, %350 ], [ 2, %552 ], [ 3, %554 ], [ 4, %556 ], [ 5, %558 ], [ 16, %560 ], [ 17, %562 ], [ 18, %564 ], [ 21, %566 ], [ 22, %568 ], [ 23, %570 ], [ 24, %572 ], [ 32, %574 ], [ 33, %576 ], [ 34, %578 ], [ 35, %580 ], [ 36, %582 ], [ 96, %584 ], [ 97, %586 ], [ 98, %588 ], [ 55799, %590 ], [ 1, %351 ]
  %355 = icmp ult i64 %340, %354
  %356 = select i1 %355, %struct.KnownTagData* null, %struct.KnownTagData* %353
  br label %357

357:                                              ; preds = %590, %352
  %358 = phi %struct.KnownTagData* [ %356, %352 ], [ bitcast (i32* getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 1, i64 0, i32 0) to %struct.KnownTagData*), %590 ]
  %359 = icmp eq %struct.KnownTagData* %358, bitcast (i32* getelementptr inbounds ([22 x %struct.KnownTagData], [22 x %struct.KnownTagData]* @knownTagData, i64 1, i64 0, i32 0) to %struct.KnownTagData*)
  %360 = select i1 %359, %struct.KnownTagData* null, %struct.KnownTagData* %358
  %361 = and i32 %1, 1879048192
  %362 = icmp eq i32 %361, 0
  %363 = icmp ne %struct.KnownTagData* %360, null
  %364 = or i1 %362, %363
  br i1 %364, label %377, label %365

365:                                              ; preds = %357
  %366 = and i32 %1, 268435456
  %367 = icmp ne i32 %366, 0
  %368 = icmp ult i64 %340, 24
  %369 = and i1 %367, %368
  br i1 %369, label %550, label %370

370:                                              ; preds = %365
  %371 = and i32 %1, 805306368
  %372 = icmp eq i32 %371, 805306368
  %373 = icmp ult i64 %340, 256
  %374 = and i1 %372, %373
  %375 = icmp eq i32 %361, 1879048192
  %376 = or i1 %375, %374
  br i1 %376, label %550, label %377

377:                                              ; preds = %370, %357
  %378 = and i32 %1, 8192
  %379 = icmp ne i32 %378, 0
  %380 = and i1 %379, %363
  br i1 %380, label %381, label %397

381:                                              ; preds = %377
  %382 = getelementptr inbounds %struct.KnownTagData, %struct.KnownTagData* %360, i64 0, i32 1
  %383 = load i32, i32* %382, align 4
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %397, label %385

385:                                              ; preds = %381
  %386 = icmp eq i8 %345, 0
  %387 = select i1 %386, i8 1, i8 %345
  br label %388

388:                                              ; preds = %388, %385
  %389 = phi i32 [ %383, %385 ], [ %395, %388 ]
  %390 = icmp ne i32 %389, 0
  %391 = xor i1 %390, true
  %392 = trunc i32 %389 to i8
  %393 = icmp eq i8 %387, %392
  %394 = or i1 %393, %391
  %395 = lshr i32 %389, 8
  br i1 %394, label %396, label %388

396:                                              ; preds = %388
  br i1 %390, label %397, label %550

397:                                              ; preds = %396, %381, %377
  %398 = call fastcc i32 @validate_value(%struct.CborValue* %0, i32 %1, i32 %344) #6
  br label %550

399:                                              ; preds = %67
  %400 = getelementptr inbounds %struct.CborValue, %struct.CborValue* %0, i64 0, i32 3
  %401 = load i16, i16* %400, align 4
  %402 = trunc i16 %401 to i8
  %403 = icmp ult i8 %402, 32
  br i1 %403, label %407, label %404

404:                                              ; preds = %399
  %405 = and i32 %1, 201326592
  %406 = icmp eq i32 %405, 201326592
  br i1 %406, label %550, label %548

407:                                              ; preds = %399
  %408 = lshr i32 %1, 17
  %409 = and i32 %408, 512
  %410 = icmp eq i32 %409, 0
  br i1 %410, label %548, label %550

411:                                              ; preds = %67
  %412 = and i32 %1, 2097152
  %413 = icmp eq i32 %412, 0
  br i1 %413, label %548, label %550

414:                                              ; preds = %67, %67, %67
  %415 = bitcast i16* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %415) #6
  store i16 -21846, i16* %12, align 2
  switch i8 %18, label %422 [
    i8 -5, label %447
    i8 -6, label %416
  ]

416:                                              ; preds = %414
  %417 = call i64 @_cbor_value_decode_int64_internal(%struct.CborValue* %0) #6
  %418 = trunc i64 %417 to i32
  %419 = bitcast i32 %418 to float
  %420 = fpext float %419 to double
  %421 = bitcast double %420 to i64
  br label %449

422:                                              ; preds = %414
  %423 = call i32 @cbor_value_get_half_float(%struct.CborValue* %0, i8* nonnull %415) #6
  %424 = load i16, i16* %12, align 2
  %425 = zext i16 %424 to i32
  %426 = lshr i32 %425, 10
  %427 = and i32 %426, 31
  %428 = and i32 %425, 1023
  switch i32 %427, label %432 [
    i32 0, label %429
    i32 31, label %437
  ]

429:                                              ; preds = %422
  %430 = sitofp i32 %428 to double
  %431 = call double @ldexp(double %430, i32 -24) #6
  br label %440

432:                                              ; preds = %422
  %433 = or i32 %428, 1024
  %434 = sitofp i32 %433 to double
  %435 = add nsw i32 %427, -25
  %436 = call double @ldexp(double %434, i32 %435) #6
  br label %440

437:                                              ; preds = %422
  %438 = icmp eq i32 %428, 0
  %439 = select i1 %438, double 0x7FF0000000000000, double 0x7FF8000000000000
  br label %440

440:                                              ; preds = %437, %432, %429
  %441 = phi double [ %431, %429 ], [ %436, %432 ], [ %439, %437 ]
  %442 = icmp slt i16 %424, 0
  %443 = fsub double -0.000000e+00, %441
  %444 = select i1 %442, double %443, double %441
  %445 = bitcast double %444 to i64
  %446 = icmp eq i32 %423, 0
  br label %449

447:                                              ; preds = %414
  %448 = call i64 @_cbor_value_decode_int64_internal(%struct.CborValue* %0) #6
  br label %449

449:                                              ; preds = %447, %440, %416
  %450 = phi i64 [ %445, %440 ], [ %421, %416 ], [ %448, %447 ]
  %451 = phi double [ 0xFFFFFFFFE0000000, %440 ], [ %420, %416 ], [ 0xFFFFFFFFE0000000, %447 ]
  %452 = phi i1 [ %446, %440 ], [ true, %416 ], [ true, %447 ]
  call void @llvm.assume(i1 %452) #6
  %453 = bitcast i64 %450 to double
  %454 = fcmp oeq double %453, 0.000000e+00
  br i1 %454, label %478, label %461

455:                                              ; preds = %463, %461
  %456 = phi i32 [ 1, %463 ], [ 0, %461 ]
  %457 = icmp ne i32 %456, 0
  %458 = icmp eq i32 %456, 1
  %459 = and i32 %1, 8388608
  %460 = icmp eq i32 %459, 0
  br i1 %460, label %466, label %545

461:                                              ; preds = %449
  %462 = fcmp uno double %453, 0.000000e+00
  br i1 %462, label %455, label %463

463:                                              ; preds = %461
  %464 = call double @llvm.fabs.f64(double %453) #8
  %465 = fcmp oeq double %464, 0x7FF0000000000000
  br i1 %465, label %455, label %478

466:                                              ; preds = %455
  %467 = and i32 %1, 2
  %468 = icmp eq i32 %467, 0
  br i1 %468, label %478, label %469

469:                                              ; preds = %466
  %470 = and i32 %19, 254
  %471 = icmp eq i32 %470, 250
  br i1 %471, label %545, label %472

472:                                              ; preds = %469
  %473 = load i16, i16* %12, align 2
  %474 = icmp eq i16 %473, 32256
  %475 = or i1 %457, %474
  br i1 %475, label %476, label %545

476:                                              ; preds = %472
  br i1 %458, label %477, label %478

477:                                              ; preds = %476
  switch i16 %473, label %545 [
    i16 31744, label %478
    i16 -1024, label %478
  ]

478:                                              ; preds = %477, %477, %476, %466, %463, %449
  %479 = and i32 %1, 2
  %480 = icmp ne i32 %479, 0
  %481 = icmp ugt i8 %18, -7
  %482 = and i1 %480, %481
  br i1 %482, label %483, label %547

483:                                              ; preds = %478
  switch i8 %18, label %547 [
    i8 -5, label %484
    i8 -6, label %488
  ]

484:                                              ; preds = %483
  %485 = fptrunc double %453 to float
  %486 = fpext float %485 to double
  %487 = fcmp oeq double %453, %486
  br i1 %487, label %545, label %547

488:                                              ; preds = %483
  %489 = bitcast double %451 to i64
  %490 = lshr i64 %489, 63
  %491 = shl nuw nsw i64 %490, 15
  %492 = trunc i64 %491 to i32
  %493 = lshr i64 %489, 52
  %494 = trunc i64 %493 to i32
  %495 = and i32 %494, 2047
  %496 = lshr i64 %489, 42
  %497 = trunc i64 %496 to i32
  %498 = and i32 %497, 1023
  %499 = add nsw i32 %495, -1023
  %500 = icmp eq i32 %499, 1024
  br i1 %500, label %501, label %503

501:                                              ; preds = %488
  %502 = lshr i32 %498, 1
  br label %514

503:                                              ; preds = %488
  %504 = icmp sgt i32 %499, 15
  br i1 %504, label %514, label %505

505:                                              ; preds = %503
  %506 = icmp sgt i32 %499, -15
  br i1 %506, label %514, label %507

507:                                              ; preds = %505
  %508 = icmp sgt i32 %499, -25
  br i1 %508, label %510, label %509

509:                                              ; preds = %507
  store i16 0, i16* %12, align 2
  br label %525

510:                                              ; preds = %507
  %511 = or i32 %498, 1024
  %512 = sub nuw nsw i32 1009, %495
  %513 = lshr i32 %511, %512
  br label %514

514:                                              ; preds = %510, %505, %503, %501
  %515 = phi i32 [ 16, %501 ], [ %499, %505 ], [ -15, %510 ], [ 15, %503 ]
  %516 = phi i32 [ %502, %501 ], [ %498, %505 ], [ %513, %510 ], [ 1023, %503 ]
  %517 = shl nsw i32 %515, 10
  %518 = add nsw i32 %517, 15360
  %519 = or i32 %516, %492
  %520 = or i32 %519, %518
  %521 = trunc i32 %520 to i16
  store i16 %521, i16* %12, align 2
  %522 = lshr i32 %520, 10
  %523 = and i32 %522, 31
  %524 = and i32 %516, 1023
  switch i32 %523, label %530 [
    i32 0, label %525
    i32 31, label %535
  ]

525:                                              ; preds = %514, %509
  %526 = phi i32 [ 0, %509 ], [ %524, %514 ]
  %527 = phi i16 [ 0, %509 ], [ %521, %514 ]
  %528 = sitofp i32 %526 to double
  %529 = call double @ldexp(double %528, i32 -24) #6
  br label %538

530:                                              ; preds = %514
  %531 = or i32 %524, 1024
  %532 = sitofp i32 %531 to double
  %533 = add nsw i32 %523, -25
  %534 = call double @ldexp(double %532, i32 %533) #6
  br label %538

535:                                              ; preds = %514
  %536 = icmp eq i32 %524, 0
  %537 = select i1 %536, double 0x7FF0000000000000, double 0x7FF8000000000000
  br label %538

538:                                              ; preds = %535, %530, %525
  %539 = phi i16 [ %527, %525 ], [ %521, %530 ], [ %521, %535 ]
  %540 = phi double [ %529, %525 ], [ %534, %530 ], [ %537, %535 ]
  %541 = icmp slt i16 %539, 0
  %542 = fsub double -0.000000e+00, %540
  %543 = select i1 %541, double %542, double %540
  %544 = fcmp oeq double %543, %451
  br i1 %544, label %545, label %547

545:                                              ; preds = %455, %469, %472, %477, %484, %538
  %546 = phi i32 [ 520, %538 ], [ 520, %484 ], [ 519, %477 ], [ 519, %472 ], [ 520, %469 ], [ 518, %455 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %415) #6
  br label %550

547:                                              ; preds = %478, %483, %484, %538
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %415) #6
  br label %548

548:                                              ; preds = %404, %179, %547, %183, %411, %407, %67
  %549 = call i32 @cbor_value_advance_fixed(%struct.CborValue* %0) #6
  br label %550

550:                                              ; preds = %404, %397, %396, %370, %365, %347, %343, %545, %339, %62, %67, %411, %64, %407, %548, %327, %177
  %551 = phi i32 [ %549, %548 ], [ %409, %407 ], [ %328, %327 ], [ %178, %177 ], [ %63, %62 ], [ 2, %64 ], [ 517, %411 ], [ 259, %67 ], [ %341, %339 ], [ %546, %545 ], [ %398, %397 ], [ 514, %396 ], [ 1025, %343 ], [ 517, %347 ], [ 513, %365 ], [ 513, %370 ], [ 512, %404 ]
  ret i32 %551

552:                                              ; preds = %350
  %553 = icmp ugt i64 %340, 2
  br i1 %553, label %554, label %352

554:                                              ; preds = %552
  %555 = icmp eq i64 %340, 3
  br i1 %555, label %352, label %556

556:                                              ; preds = %554
  %557 = icmp ugt i64 %340, 4
  br i1 %557, label %558, label %352

558:                                              ; preds = %556
  %559 = icmp eq i64 %340, 5
  br i1 %559, label %352, label %560

560:                                              ; preds = %558
  %561 = icmp ugt i64 %340, 16
  br i1 %561, label %562, label %352

562:                                              ; preds = %560
  %563 = icmp eq i64 %340, 17
  br i1 %563, label %352, label %564

564:                                              ; preds = %562
  %565 = icmp ugt i64 %340, 18
  br i1 %565, label %566, label %352

566:                                              ; preds = %564
  %567 = icmp ugt i64 %340, 21
  br i1 %567, label %568, label %352

568:                                              ; preds = %566
  %569 = icmp eq i64 %340, 22
  br i1 %569, label %352, label %570

570:                                              ; preds = %568
  %571 = icmp ugt i64 %340, 23
  br i1 %571, label %572, label %352

572:                                              ; preds = %570
  %573 = icmp eq i64 %340, 24
  br i1 %573, label %352, label %574

574:                                              ; preds = %572
  %575 = icmp ugt i64 %340, 32
  br i1 %575, label %576, label %352

576:                                              ; preds = %574
  %577 = icmp eq i64 %340, 33
  br i1 %577, label %352, label %578

578:                                              ; preds = %576
  %579 = icmp ugt i64 %340, 34
  br i1 %579, label %580, label %352

580:                                              ; preds = %578
  %581 = icmp eq i64 %340, 35
  br i1 %581, label %352, label %582

582:                                              ; preds = %580
  %583 = icmp ugt i64 %340, 36
  br i1 %583, label %584, label %352

584:                                              ; preds = %582
  %585 = icmp ugt i64 %340, 96
  br i1 %585, label %586, label %352

586:                                              ; preds = %584
  %587 = icmp eq i64 %340, 97
  br i1 %587, label %352, label %588

588:                                              ; preds = %586
  %589 = icmp ugt i64 %340, 98
  br i1 %589, label %590, label %352

590:                                              ; preds = %588
  %591 = icmp ugt i64 %340, 55799
  br i1 %591, label %357, label %352
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @cbor_value_enter_container(%struct.CborValue*, %struct.CborValue*) local_unnamed_addr #2

declare i32 @cbor_value_leave_container(%struct.CborValue*, %struct.CborValue*) local_unnamed_addr #2

declare i32 @_cbor_value_prepare_string_iteration(%struct.CborValue*) local_unnamed_addr #2

declare i32 @_cbor_value_get_string_chunk(%struct.CborValue*, i8**, i64*, %struct.CborValue*) local_unnamed_addr #2

declare i32 @cbor_value_advance_fixed(%struct.CborValue*) local_unnamed_addr #2

declare i32 @_cbor_value_extract_number(i8**, i8*, i64*) local_unnamed_addr #2

declare i32 @cbor_value_skip_tag(%struct.CborValue*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #3

declare i64 @_cbor_value_decode_int64_internal(%struct.CborValue*) local_unnamed_addr #2

declare i32 @cbor_value_get_half_float(%struct.CborValue*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

; Function Attrs: nofree nounwind
declare double @ldexp(double, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @llvm.assume(i1) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }
attributes #8 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
