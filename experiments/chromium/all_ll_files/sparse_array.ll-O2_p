; ModuleID = '../../third_party/pdfium/third_party/libopenjpeg20/sparse_array.c'
source_filename = "../../third_party/pdfium/third_party/libopenjpeg20/sparse_array.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.opj_sparse_array_int32 = type { i32, i32, i32, i32, i32, i32, i32** }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_sparse_array_int32* @opj_sparse_array_int32_create(i32, i32, i32, i32) local_unnamed_addr #0 {
  %5 = icmp eq i32 %0, 0
  %6 = icmp eq i32 %1, 0
  %7 = or i1 %5, %6
  %8 = icmp eq i32 %2, 0
  %9 = or i1 %7, %8
  %10 = icmp eq i32 %3, 0
  %11 = or i1 %9, %10
  br i1 %11, label %53, label %12

12:                                               ; preds = %4
  %13 = udiv i32 -1, %3
  %14 = lshr i32 %13, 2
  %15 = icmp ult i32 %14, %2
  br i1 %15, label %53, label %16

16:                                               ; preds = %12
  %17 = tail call i8* @opj_calloc(i64 1, i64 32) #4
  %18 = bitcast i8* %17 to i32*
  store i32 %0, i32* %18, align 8
  %19 = getelementptr inbounds i8, i8* %17, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 %1, i32* %20, align 4
  %21 = getelementptr inbounds i8, i8* %17, i64 8
  %22 = bitcast i8* %21 to i32*
  store i32 %2, i32* %22, align 8
  %23 = getelementptr inbounds i8, i8* %17, i64 12
  %24 = bitcast i8* %23 to i32*
  store i32 %3, i32* %24, align 4
  %25 = zext i32 %0 to i64
  %26 = zext i32 %2 to i64
  %27 = add nsw i64 %25, -1
  %28 = add nuw nsw i64 %27, %26
  %29 = udiv i64 %28, %26
  %30 = trunc i64 %29 to i32
  %31 = getelementptr inbounds i8, i8* %17, i64 16
  %32 = bitcast i8* %31 to i32*
  store i32 %30, i32* %32, align 8
  %33 = zext i32 %1 to i64
  %34 = zext i32 %3 to i64
  %35 = add nsw i64 %33, -1
  %36 = add nuw nsw i64 %35, %34
  %37 = udiv i64 %36, %34
  %38 = trunc i64 %37 to i32
  %39 = getelementptr inbounds i8, i8* %17, i64 20
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 4
  %41 = udiv i32 -1, %38
  %42 = icmp ult i32 %41, %30
  br i1 %42, label %43, label %44

43:                                               ; preds = %16
  tail call void @opj_free(i8* %17) #4
  br label %53

44:                                               ; preds = %16
  %45 = bitcast i8* %17 to %struct.opj_sparse_array_int32*
  %46 = mul i64 %37, %29
  %47 = and i64 %46, 4294967295
  %48 = tail call i8* @opj_calloc(i64 8, i64 %47) #4
  %49 = getelementptr inbounds i8, i8* %17, i64 24
  %50 = bitcast i8* %49 to i8**
  store i8* %48, i8** %50, align 8
  %51 = icmp eq i8* %48, null
  br i1 %51, label %52, label %53

52:                                               ; preds = %44
  tail call void @opj_free(i8* %17) #4
  br label %53

53:                                               ; preds = %44, %12, %4, %52, %43
  %54 = phi %struct.opj_sparse_array_int32* [ null, %43 ], [ null, %52 ], [ null, %4 ], [ null, %12 ], [ %45, %44 ]
  ret %struct.opj_sparse_array_int32* %54
}

declare i8* @opj_calloc(i64, i64) local_unnamed_addr #1

declare void @opj_free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.opj_sparse_array_int32* %0, null
  br i1 %2, label %37, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_sparse_array_int32, %struct.opj_sparse_array_int32* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.opj_sparse_array_int32, %struct.opj_sparse_array_int32* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 4
  %8 = mul i32 %7, %5
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds %struct.opj_sparse_array_int32, %struct.opj_sparse_array_int32* %0, i64 0, i32 6
  %11 = load i32**, i32*** %10, align 8
  br i1 %9, label %33, label %12

12:                                               ; preds = %3, %25
  %13 = phi i32** [ %26, %25 ], [ %11, %3 ]
  %14 = phi i32 [ %27, %25 ], [ %7, %3 ]
  %15 = phi i32 [ %28, %25 ], [ %5, %3 ]
  %16 = phi i64 [ %29, %25 ], [ 0, %3 ]
  %17 = getelementptr inbounds i32*, i32** %13, i64 %16
  %18 = load i32*, i32** %17, align 8
  %19 = icmp eq i32* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %12
  %21 = bitcast i32* %18 to i8*
  tail call void @opj_free(i8* nonnull %21) #4
  %22 = load i32, i32* %4, align 8
  %23 = load i32, i32* %6, align 4
  %24 = load i32**, i32*** %10, align 8
  br label %25

25:                                               ; preds = %12, %20
  %26 = phi i32** [ %13, %12 ], [ %24, %20 ]
  %27 = phi i32 [ %14, %12 ], [ %23, %20 ]
  %28 = phi i32 [ %15, %12 ], [ %22, %20 ]
  %29 = add nuw nsw i64 %16, 1
  %30 = mul i32 %27, %28
  %31 = zext i32 %30 to i64
  %32 = icmp ult i64 %29, %31
  br i1 %32, label %12, label %33

33:                                               ; preds = %25, %3
  %34 = phi i32** [ %11, %3 ], [ %26, %25 ]
  %35 = bitcast i32** %34 to i8*
  tail call void @opj_free(i8* %35) #4
  %36 = bitcast %struct.opj_sparse_array_int32* %0 to i8*
  tail call void @opj_free(i8* nonnull %36) #4
  br label %37

37:                                               ; preds = %1, %33
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @opj_sparse_array_is_region_valid(%struct.opj_sparse_array_int32* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #2 {
  %6 = getelementptr inbounds %struct.opj_sparse_array_int32, %struct.opj_sparse_array_int32* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp ule i32 %7, %1
  %9 = icmp ule i32 %3, %1
  %10 = or i1 %9, %8
  %11 = icmp ult i32 %7, %3
  %12 = or i1 %11, %10
  br i1 %12, label %22, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %struct.opj_sparse_array_int32, %struct.opj_sparse_array_int32* %0, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp ugt i32 %15, %2
  %17 = icmp ugt i32 %4, %2
  %18 = and i1 %17, %16
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = icmp uge i32 %15, %4
  %21 = zext i1 %20 to i32
  br label %22

22:                                               ; preds = %5, %13, %19
  %23 = phi i32 [ 0, %13 ], [ 0, %5 ], [ %21, %19 ]
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nocapture readonly, i32, i32, i32, i32, i32* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  %10 = tail call fastcc i32 @opj_sparse_array_int32_read_or_write(%struct.opj_sparse_array_int32* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32* %5, i32 %6, i32 %7, i32 %8, i32 1)
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_sparse_array_int32_read_or_write(%struct.opj_sparse_array_int32* nocapture readonly, i32, i32, i32, i32, i32* nocapture, i32, i32, i32, i32) unnamed_addr #0 {
  %11 = getelementptr inbounds %struct.opj_sparse_array_int32, %struct.opj_sparse_array_int32* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.opj_sparse_array_int32, %struct.opj_sparse_array_int32* %0, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = icmp ule i32 %14, %1
  %16 = icmp ule i32 %3, %1
  %17 = or i1 %16, %15
  %18 = icmp ult i32 %14, %3
  %19 = or i1 %18, %17
  br i1 %19, label %1117, label %20

20:                                               ; preds = %10
  %21 = getelementptr inbounds %struct.opj_sparse_array_int32, %struct.opj_sparse_array_int32* %0, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp ule i32 %22, %2
  %24 = icmp ule i32 %4, %2
  %25 = or i1 %23, %24
  %26 = icmp ult i32 %22, %4
  %27 = or i1 %26, %25
  br i1 %27, label %1117, label %28

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.opj_sparse_array_int32, %struct.opj_sparse_array_int32* %0, i64 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = udiv i32 %2, %30
  %32 = udiv i32 %1, %12
  %33 = urem i32 %1, %12
  %34 = getelementptr inbounds %struct.opj_sparse_array_int32, %struct.opj_sparse_array_int32* %0, i64 0, i32 6
  %35 = getelementptr inbounds %struct.opj_sparse_array_int32, %struct.opj_sparse_array_int32* %0, i64 0, i32 4
  %36 = icmp eq i32 %9, 0
  %37 = zext i32 %12 to i64
  %38 = icmp eq i32 %6, 1
  %39 = zext i32 %7 to i64
  %40 = icmp eq i32 %6, 2
  %41 = icmp eq i32 %6, 8
  %42 = icmp eq i32 %6, 1
  %43 = icmp eq i32 %6, 1
  %44 = icmp eq i32 %6, 1
  br label %45

45:                                               ; preds = %1114, %28
  %46 = phi i32 [ %30, %28 ], [ %1116, %1114 ]
  %47 = phi i32 [ %31, %28 ], [ %1115, %1114 ]
  %48 = phi i32 [ %2, %28 ], [ %1112, %1114 ]
  %49 = icmp eq i32 %48, %2
  br i1 %49, label %50, label %53

50:                                               ; preds = %45
  %51 = urem i32 %2, %46
  %52 = sub i32 %46, %51
  br label %53

53:                                               ; preds = %50, %45
  %54 = phi i32 [ %52, %50 ], [ %46, %45 ]
  %55 = sub i32 %4, %48
  %56 = icmp ult i32 %54, %55
  %57 = select i1 %56, i32 %54, i32 %55
  %58 = sub i32 %46, %54
  %59 = zext i32 %58 to i64
  %60 = mul nuw i64 %59, %37
  %61 = sub i32 %48, %2
  %62 = zext i32 %61 to i64
  %63 = mul nuw i64 %62, %39
  %64 = getelementptr inbounds i32, i32* %5, i64 %63
  %65 = icmp eq i32 %57, 1
  %66 = and i1 %40, %65
  %67 = icmp eq i32 %57, 0
  %68 = mul nuw i64 %37, %59
  %69 = mul nuw i64 %39, %62
  %70 = add i32 %57, -1
  %71 = and i32 %57, 7
  %72 = icmp ult i32 %70, 7
  %73 = sub i32 %57, %71
  %74 = icmp eq i32 %71, 0
  %75 = and i32 %57, 3
  %76 = icmp ult i32 %70, 3
  %77 = sub i32 %57, %75
  %78 = icmp eq i32 %75, 0
  %79 = and i32 %57, 3
  %80 = icmp ult i32 %70, 3
  %81 = sub i32 %57, %79
  %82 = icmp eq i32 %79, 0
  %83 = and i32 %57, 7
  %84 = icmp ult i32 %70, 7
  %85 = sub i32 %57, %83
  %86 = icmp eq i32 %83, 0
  %87 = and i32 %57, 7
  %88 = icmp ult i32 %70, 7
  %89 = sub i32 %57, %87
  %90 = icmp eq i32 %87, 0
  %91 = and i32 %57, 3
  %92 = icmp ult i32 %70, 3
  %93 = sub i32 %57, %91
  %94 = icmp eq i32 %91, 0
  %95 = and i32 %57, 3
  %96 = icmp ult i32 %70, 3
  %97 = sub i32 %57, %95
  %98 = icmp eq i32 %95, 0
  br label %99

99:                                               ; preds = %53, %1107
  %100 = phi i32 [ %32, %53 ], [ %1108, %1107 ]
  %101 = phi i32 [ %1, %53 ], [ %1109, %1107 ]
  %102 = icmp eq i32 %101, %1
  %103 = sub i32 %12, %33
  %104 = select i1 %102, i32 %103, i32 %12
  %105 = sub i32 %12, %104
  %106 = sub i32 %3, %101
  %107 = icmp ult i32 %104, %106
  %108 = select i1 %107, i32 %104, i32 %106
  %109 = load i32**, i32*** %34, align 8
  %110 = load i32, i32* %35, align 8
  %111 = mul i32 %110, %47
  %112 = add i32 %111, %100
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds i32*, i32** %109, i64 %113
  %115 = load i32*, i32** %114, align 8
  %116 = icmp eq i32* %115, null
  br i1 %36, label %664, label %117

117:                                              ; preds = %99
  br i1 %116, label %118, label %238

118:                                              ; preds = %117
  %119 = sub i32 %101, %1
  br i1 %38, label %120, label %147

120:                                              ; preds = %118
  br i1 %67, label %1107, label %121

121:                                              ; preds = %120
  %122 = zext i32 %119 to i64
  %123 = getelementptr inbounds i32, i32* %64, i64 %122
  %124 = zext i32 %108 to i64
  %125 = shl nuw nsw i64 %124, 2
  br i1 %84, label %1060, label %126

126:                                              ; preds = %121, %126
  %127 = phi i32* [ %144, %126 ], [ %123, %121 ]
  %128 = phi i32 [ %145, %126 ], [ %85, %121 ]
  %129 = bitcast i32* %127 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %129, i8 0, i64 %125, i1 false)
  %130 = getelementptr inbounds i32, i32* %127, i64 %39
  %131 = bitcast i32* %130 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %131, i8 0, i64 %125, i1 false)
  %132 = getelementptr inbounds i32, i32* %130, i64 %39
  %133 = bitcast i32* %132 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %133, i8 0, i64 %125, i1 false)
  %134 = getelementptr inbounds i32, i32* %132, i64 %39
  %135 = bitcast i32* %134 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %135, i8 0, i64 %125, i1 false)
  %136 = getelementptr inbounds i32, i32* %134, i64 %39
  %137 = bitcast i32* %136 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %137, i8 0, i64 %125, i1 false)
  %138 = getelementptr inbounds i32, i32* %136, i64 %39
  %139 = bitcast i32* %138 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %139, i8 0, i64 %125, i1 false)
  %140 = getelementptr inbounds i32, i32* %138, i64 %39
  %141 = bitcast i32* %140 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %141, i8 0, i64 %125, i1 false)
  %142 = getelementptr inbounds i32, i32* %140, i64 %39
  %143 = bitcast i32* %142 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %143, i8 0, i64 %125, i1 false)
  %144 = getelementptr inbounds i32, i32* %142, i64 %39
  %145 = add i32 %128, -8
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %1060, label %126

147:                                              ; preds = %118
  br i1 %67, label %1107, label %148

148:                                              ; preds = %147
  %149 = mul i32 %119, %6
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds i32, i32* %64, i64 %150
  %152 = icmp eq i32 %108, 0
  %153 = zext i32 %108 to i64
  %154 = and i64 %153, 4294967288
  %155 = add nsw i64 %154, -8
  %156 = lshr exact i64 %155, 3
  %157 = add nuw nsw i64 %156, 1
  %158 = icmp ugt i32 %108, 7
  %159 = and i1 %158, %43
  %160 = and i64 %153, 4294967288
  %161 = and i64 %157, 3
  %162 = icmp ult i64 %155, 24
  %163 = sub nsw i64 %157, %161
  %164 = icmp eq i64 %161, 0
  %165 = icmp eq i64 %160, %153
  br label %166

166:                                              ; preds = %148, %234
  %167 = phi i32* [ %151, %148 ], [ %235, %234 ]
  %168 = phi i32 [ 0, %148 ], [ %236, %234 ]
  br i1 %152, label %234, label %169

169:                                              ; preds = %166
  br i1 %159, label %170, label %224

170:                                              ; preds = %169
  br i1 %162, label %208, label %171

171:                                              ; preds = %170, %171
  %172 = phi i64 [ %205, %171 ], [ 0, %170 ]
  %173 = phi i64 [ %206, %171 ], [ %163, %170 ]
  %174 = trunc i64 %172 to i32
  %175 = mul i32 %174, %6
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i32, i32* %167, i64 %176
  %178 = bitcast i32* %177 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %178, align 4
  %179 = getelementptr inbounds i32, i32* %177, i64 4
  %180 = bitcast i32* %179 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %180, align 4
  %181 = trunc i64 %172 to i32
  %182 = or i32 %181, 8
  %183 = mul i32 %182, %6
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds i32, i32* %167, i64 %184
  %186 = bitcast i32* %185 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %186, align 4
  %187 = getelementptr inbounds i32, i32* %185, i64 4
  %188 = bitcast i32* %187 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %188, align 4
  %189 = trunc i64 %172 to i32
  %190 = or i32 %189, 16
  %191 = mul i32 %190, %6
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds i32, i32* %167, i64 %192
  %194 = bitcast i32* %193 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %194, align 4
  %195 = getelementptr inbounds i32, i32* %193, i64 4
  %196 = bitcast i32* %195 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %196, align 4
  %197 = trunc i64 %172 to i32
  %198 = or i32 %197, 24
  %199 = mul i32 %198, %6
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds i32, i32* %167, i64 %200
  %202 = bitcast i32* %201 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %202, align 4
  %203 = getelementptr inbounds i32, i32* %201, i64 4
  %204 = bitcast i32* %203 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %204, align 4
  %205 = add i64 %172, 32
  %206 = add i64 %173, -4
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %208, label %171, !llvm.loop !2

208:                                              ; preds = %171, %170
  %209 = phi i64 [ 0, %170 ], [ %205, %171 ]
  br i1 %164, label %223, label %210

210:                                              ; preds = %208, %210
  %211 = phi i64 [ %220, %210 ], [ %209, %208 ]
  %212 = phi i64 [ %221, %210 ], [ %161, %208 ]
  %213 = trunc i64 %211 to i32
  %214 = mul i32 %213, %6
  %215 = zext i32 %214 to i64
  %216 = getelementptr inbounds i32, i32* %167, i64 %215
  %217 = bitcast i32* %216 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %217, align 4
  %218 = getelementptr inbounds i32, i32* %216, i64 4
  %219 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %219, align 4
  %220 = add i64 %211, 8
  %221 = add i64 %212, -1
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %223, label %210, !llvm.loop !4

223:                                              ; preds = %210, %208
  br i1 %165, label %234, label %224

224:                                              ; preds = %169, %223
  %225 = phi i64 [ 0, %169 ], [ %160, %223 ]
  br label %226

226:                                              ; preds = %224, %226
  %227 = phi i64 [ %232, %226 ], [ %225, %224 ]
  %228 = trunc i64 %227 to i32
  %229 = mul i32 %228, %6
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds i32, i32* %167, i64 %230
  store i32 0, i32* %231, align 4
  %232 = add nuw nsw i64 %227, 1
  %233 = icmp ult i64 %232, %153
  br i1 %233, label %226, label %234, !llvm.loop !6

234:                                              ; preds = %226, %223, %166
  %235 = getelementptr inbounds i32, i32* %167, i64 %39
  %236 = add nuw i32 %168, 1
  %237 = icmp ult i32 %236, %57
  br i1 %237, label %166, label %1107

238:                                              ; preds = %117
  %239 = getelementptr inbounds i32, i32* %115, i64 %60
  %240 = zext i32 %105 to i64
  %241 = getelementptr inbounds i32, i32* %239, i64 %240
  %242 = sub i32 %101, %1
  br i1 %38, label %243, label %297

243:                                              ; preds = %238
  %244 = zext i32 %242 to i64
  %245 = getelementptr inbounds i32, i32* %64, i64 %244
  %246 = icmp eq i32 %108, 4
  br i1 %246, label %251, label %247

247:                                              ; preds = %243
  br i1 %67, label %1107, label %248

248:                                              ; preds = %247
  %249 = zext i32 %108 to i64
  %250 = shl nuw nsw i64 %249, 2
  br i1 %76, label %1082, label %275

251:                                              ; preds = %243
  br i1 %67, label %1107, label %252

252:                                              ; preds = %251
  br i1 %80, label %1069, label %253

253:                                              ; preds = %252, %253
  %254 = phi i32* [ %271, %253 ], [ %245, %252 ]
  %255 = phi i32* [ %272, %253 ], [ %241, %252 ]
  %256 = phi i32 [ %273, %253 ], [ %81, %252 ]
  %257 = bitcast i32* %254 to i8*
  %258 = bitcast i32* %255 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %257, i8* align 4 %258, i64 16, i1 false)
  %259 = getelementptr inbounds i32, i32* %254, i64 %39
  %260 = getelementptr inbounds i32, i32* %255, i64 %37
  %261 = bitcast i32* %259 to i8*
  %262 = bitcast i32* %260 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %261, i8* align 4 %262, i64 16, i1 false)
  %263 = getelementptr inbounds i32, i32* %259, i64 %39
  %264 = getelementptr inbounds i32, i32* %260, i64 %37
  %265 = bitcast i32* %263 to i8*
  %266 = bitcast i32* %264 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %265, i8* align 4 %266, i64 16, i1 false)
  %267 = getelementptr inbounds i32, i32* %263, i64 %39
  %268 = getelementptr inbounds i32, i32* %264, i64 %37
  %269 = bitcast i32* %267 to i8*
  %270 = bitcast i32* %268 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %269, i8* align 4 %270, i64 16, i1 false)
  %271 = getelementptr inbounds i32, i32* %267, i64 %39
  %272 = getelementptr inbounds i32, i32* %268, i64 %37
  %273 = add i32 %256, -4
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %1069, label %253

275:                                              ; preds = %248, %275
  %276 = phi i32* [ %293, %275 ], [ %245, %248 ]
  %277 = phi i32* [ %294, %275 ], [ %241, %248 ]
  %278 = phi i32 [ %295, %275 ], [ %77, %248 ]
  %279 = bitcast i32* %276 to i8*
  %280 = bitcast i32* %277 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %279, i8* align 4 %280, i64 %250, i1 false)
  %281 = getelementptr inbounds i32, i32* %276, i64 %39
  %282 = getelementptr inbounds i32, i32* %277, i64 %37
  %283 = bitcast i32* %281 to i8*
  %284 = bitcast i32* %282 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %283, i8* align 4 %284, i64 %250, i1 false)
  %285 = getelementptr inbounds i32, i32* %281, i64 %39
  %286 = getelementptr inbounds i32, i32* %282, i64 %37
  %287 = bitcast i32* %285 to i8*
  %288 = bitcast i32* %286 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %287, i8* align 4 %288, i64 %250, i1 false)
  %289 = getelementptr inbounds i32, i32* %285, i64 %39
  %290 = getelementptr inbounds i32, i32* %286, i64 %37
  %291 = bitcast i32* %289 to i8*
  %292 = bitcast i32* %290 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %291, i8* align 4 %292, i64 %250, i1 false)
  %293 = getelementptr inbounds i32, i32* %289, i64 %39
  %294 = getelementptr inbounds i32, i32* %290, i64 %37
  %295 = add i32 %278, -4
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %1082, label %275

297:                                              ; preds = %238
  %298 = mul i32 %242, %6
  %299 = zext i32 %298 to i64
  %300 = getelementptr inbounds i32, i32* %64, i64 %299
  %301 = icmp eq i32 %108, 1
  br i1 %301, label %302, label %334

302:                                              ; preds = %297
  br i1 %67, label %1107, label %303

303:                                              ; preds = %302
  br i1 %72, label %1095, label %304

304:                                              ; preds = %303, %304
  %305 = phi i32* [ %330, %304 ], [ %300, %303 ]
  %306 = phi i32* [ %331, %304 ], [ %241, %303 ]
  %307 = phi i32 [ %332, %304 ], [ %73, %303 ]
  %308 = load i32, i32* %306, align 4
  store i32 %308, i32* %305, align 4
  %309 = getelementptr inbounds i32, i32* %305, i64 %39
  %310 = getelementptr inbounds i32, i32* %306, i64 %37
  %311 = load i32, i32* %310, align 4
  store i32 %311, i32* %309, align 4
  %312 = getelementptr inbounds i32, i32* %309, i64 %39
  %313 = getelementptr inbounds i32, i32* %310, i64 %37
  %314 = load i32, i32* %313, align 4
  store i32 %314, i32* %312, align 4
  %315 = getelementptr inbounds i32, i32* %312, i64 %39
  %316 = getelementptr inbounds i32, i32* %313, i64 %37
  %317 = load i32, i32* %316, align 4
  store i32 %317, i32* %315, align 4
  %318 = getelementptr inbounds i32, i32* %315, i64 %39
  %319 = getelementptr inbounds i32, i32* %316, i64 %37
  %320 = load i32, i32* %319, align 4
  store i32 %320, i32* %318, align 4
  %321 = getelementptr inbounds i32, i32* %318, i64 %39
  %322 = getelementptr inbounds i32, i32* %319, i64 %37
  %323 = load i32, i32* %322, align 4
  store i32 %323, i32* %321, align 4
  %324 = getelementptr inbounds i32, i32* %321, i64 %39
  %325 = getelementptr inbounds i32, i32* %322, i64 %37
  %326 = load i32, i32* %325, align 4
  store i32 %326, i32* %324, align 4
  %327 = getelementptr inbounds i32, i32* %324, i64 %39
  %328 = getelementptr inbounds i32, i32* %325, i64 %37
  %329 = load i32, i32* %328, align 4
  store i32 %329, i32* %327, align 4
  %330 = getelementptr inbounds i32, i32* %327, i64 %39
  %331 = getelementptr inbounds i32, i32* %328, i64 %37
  %332 = add i32 %307, -8
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %1095, label %304

334:                                              ; preds = %297
  br i1 %66, label %335, label %421

335:                                              ; preds = %334
  %336 = and i32 %108, -4
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %342, label %338

338:                                              ; preds = %335
  %339 = zext i32 %336 to i64
  br label %367

340:                                              ; preds = %367
  %341 = trunc i64 %392 to i32
  br label %342

342:                                              ; preds = %340, %335
  %343 = phi i32 [ 0, %335 ], [ %341, %340 ]
  %344 = icmp ult i32 %343, %108
  br i1 %344, label %345, label %1107

345:                                              ; preds = %342
  %346 = zext i32 %343 to i64
  %347 = zext i32 %108 to i64
  %348 = sub nsw i64 %347, %346
  %349 = xor i64 %346, -1
  %350 = add nsw i64 %349, %347
  %351 = and i64 %348, 3
  %352 = icmp eq i64 %351, 0
  br i1 %352, label %364, label %353

353:                                              ; preds = %345, %353
  %354 = phi i64 [ %361, %353 ], [ %346, %345 ]
  %355 = phi i64 [ %362, %353 ], [ %351, %345 ]
  %356 = getelementptr inbounds i32, i32* %241, i64 %354
  %357 = load i32, i32* %356, align 4
  %358 = shl nuw i64 %354, 1
  %359 = and i64 %358, 4294967294
  %360 = getelementptr inbounds i32, i32* %300, i64 %359
  store i32 %357, i32* %360, align 4
  %361 = add nuw nsw i64 %354, 1
  %362 = add i64 %355, -1
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %364, label %353, !llvm.loop !7

364:                                              ; preds = %353, %345
  %365 = phi i64 [ %346, %345 ], [ %361, %353 ]
  %366 = icmp ult i64 %350, 3
  br i1 %366, label %1107, label %394

367:                                              ; preds = %338, %367
  %368 = phi i64 [ 0, %338 ], [ %392, %367 ]
  %369 = getelementptr inbounds i32, i32* %241, i64 %368
  %370 = load i32, i32* %369, align 4
  %371 = shl nuw i64 %368, 1
  %372 = and i64 %371, 4294967288
  %373 = getelementptr inbounds i32, i32* %300, i64 %372
  store i32 %370, i32* %373, align 4
  %374 = or i64 %368, 1
  %375 = getelementptr inbounds i32, i32* %241, i64 %374
  %376 = load i32, i32* %375, align 4
  %377 = shl nuw i64 %374, 1
  %378 = and i64 %377, 4294967290
  %379 = getelementptr inbounds i32, i32* %300, i64 %378
  store i32 %376, i32* %379, align 4
  %380 = or i64 %368, 2
  %381 = getelementptr inbounds i32, i32* %241, i64 %380
  %382 = load i32, i32* %381, align 4
  %383 = shl nuw i64 %380, 1
  %384 = and i64 %383, 4294967292
  %385 = getelementptr inbounds i32, i32* %300, i64 %384
  store i32 %382, i32* %385, align 4
  %386 = or i64 %368, 3
  %387 = getelementptr inbounds i32, i32* %241, i64 %386
  %388 = load i32, i32* %387, align 4
  %389 = shl nuw i64 %386, 1
  %390 = and i64 %389, 4294967294
  %391 = getelementptr inbounds i32, i32* %300, i64 %390
  store i32 %388, i32* %391, align 4
  %392 = add nuw nsw i64 %368, 4
  %393 = icmp ult i64 %392, %339
  br i1 %393, label %367, label %340

394:                                              ; preds = %364, %394
  %395 = phi i64 [ %419, %394 ], [ %365, %364 ]
  %396 = getelementptr inbounds i32, i32* %241, i64 %395
  %397 = load i32, i32* %396, align 4
  %398 = shl nuw i64 %395, 1
  %399 = and i64 %398, 4294967294
  %400 = getelementptr inbounds i32, i32* %300, i64 %399
  store i32 %397, i32* %400, align 4
  %401 = add nuw nsw i64 %395, 1
  %402 = getelementptr inbounds i32, i32* %241, i64 %401
  %403 = load i32, i32* %402, align 4
  %404 = shl nuw i64 %401, 1
  %405 = and i64 %404, 4294967294
  %406 = getelementptr inbounds i32, i32* %300, i64 %405
  store i32 %403, i32* %406, align 4
  %407 = add nuw nsw i64 %395, 2
  %408 = getelementptr inbounds i32, i32* %241, i64 %407
  %409 = load i32, i32* %408, align 4
  %410 = shl nuw i64 %407, 1
  %411 = and i64 %410, 4294967294
  %412 = getelementptr inbounds i32, i32* %300, i64 %411
  store i32 %409, i32* %412, align 4
  %413 = add nuw nsw i64 %395, 3
  %414 = getelementptr inbounds i32, i32* %241, i64 %413
  %415 = load i32, i32* %414, align 4
  %416 = shl nuw i64 %413, 1
  %417 = and i64 %416, 4294967294
  %418 = getelementptr inbounds i32, i32* %300, i64 %417
  store i32 %415, i32* %418, align 4
  %419 = add nuw nsw i64 %395, 4
  %420 = icmp ult i64 %419, %347
  br i1 %420, label %394, label %1107

421:                                              ; preds = %334
  %422 = icmp ugt i32 %108, 7
  %423 = and i1 %41, %422
  br i1 %423, label %447, label %424

424:                                              ; preds = %421
  br i1 %67, label %1107, label %425

425:                                              ; preds = %424
  %426 = icmp eq i32 %108, 0
  %427 = zext i32 %108 to i64
  %428 = zext i32 %242 to i64
  %429 = add i64 %69, %428
  %430 = add i64 %69, %427
  %431 = add i64 %430, %428
  %432 = add i64 %68, %240
  %433 = add i64 %68, %427
  %434 = add i64 %433, %240
  %435 = and i64 %427, 4294967288
  %436 = add nsw i64 %435, -8
  %437 = lshr exact i64 %436, 3
  %438 = add nuw nsw i64 %437, 1
  %439 = icmp ugt i32 %108, 7
  %440 = and i1 %439, %42
  %441 = and i64 %427, 4294967288
  %442 = and i64 %438, 3
  %443 = icmp ult i64 %436, 24
  %444 = sub nsw i64 %438, %442
  %445 = icmp eq i64 %442, 0
  %446 = icmp eq i64 %441, %427
  br label %542

447:                                              ; preds = %421
  br i1 %67, label %1107, label %448

448:                                              ; preds = %447
  %449 = and i32 %108, -4
  %450 = icmp eq i32 %449, 0
  %451 = zext i32 %449 to i64
  %452 = zext i32 %108 to i64
  br label %453

453:                                              ; preds = %448, %537
  %454 = phi i32* [ %300, %448 ], [ %538, %537 ]
  %455 = phi i32* [ %241, %448 ], [ %539, %537 ]
  %456 = phi i32 [ 0, %448 ], [ %540, %537 ]
  br i1 %450, label %459, label %483

457:                                              ; preds = %483
  %458 = trunc i64 %508 to i32
  br label %459

459:                                              ; preds = %457, %453
  %460 = phi i32 [ 0, %453 ], [ %458, %457 ]
  %461 = icmp ult i32 %460, %108
  br i1 %461, label %462, label %537

462:                                              ; preds = %459
  %463 = zext i32 %460 to i64
  %464 = sub nsw i64 %452, %463
  %465 = xor i64 %463, -1
  %466 = add nsw i64 %465, %452
  %467 = and i64 %464, 3
  %468 = icmp eq i64 %467, 0
  br i1 %468, label %480, label %469

469:                                              ; preds = %462, %469
  %470 = phi i64 [ %477, %469 ], [ %463, %462 ]
  %471 = phi i64 [ %478, %469 ], [ %467, %462 ]
  %472 = getelementptr inbounds i32, i32* %455, i64 %470
  %473 = load i32, i32* %472, align 4
  %474 = shl i64 %470, 3
  %475 = and i64 %474, 4294967288
  %476 = getelementptr inbounds i32, i32* %454, i64 %475
  store i32 %473, i32* %476, align 4
  %477 = add nuw nsw i64 %470, 1
  %478 = add i64 %471, -1
  %479 = icmp eq i64 %478, 0
  br i1 %479, label %480, label %469, !llvm.loop !8

480:                                              ; preds = %469, %462
  %481 = phi i64 [ %463, %462 ], [ %477, %469 ]
  %482 = icmp ult i64 %466, 3
  br i1 %482, label %537, label %510

483:                                              ; preds = %453, %483
  %484 = phi i64 [ %508, %483 ], [ 0, %453 ]
  %485 = getelementptr inbounds i32, i32* %455, i64 %484
  %486 = load i32, i32* %485, align 4
  %487 = shl i64 %484, 3
  %488 = and i64 %487, 4294967264
  %489 = getelementptr inbounds i32, i32* %454, i64 %488
  store i32 %486, i32* %489, align 4
  %490 = or i64 %484, 1
  %491 = getelementptr inbounds i32, i32* %455, i64 %490
  %492 = load i32, i32* %491, align 4
  %493 = shl i64 %490, 3
  %494 = and i64 %493, 4294967272
  %495 = getelementptr inbounds i32, i32* %454, i64 %494
  store i32 %492, i32* %495, align 4
  %496 = or i64 %484, 2
  %497 = getelementptr inbounds i32, i32* %455, i64 %496
  %498 = load i32, i32* %497, align 4
  %499 = shl i64 %496, 3
  %500 = and i64 %499, 4294967280
  %501 = getelementptr inbounds i32, i32* %454, i64 %500
  store i32 %498, i32* %501, align 4
  %502 = or i64 %484, 3
  %503 = getelementptr inbounds i32, i32* %455, i64 %502
  %504 = load i32, i32* %503, align 4
  %505 = shl i64 %502, 3
  %506 = and i64 %505, 4294967288
  %507 = getelementptr inbounds i32, i32* %454, i64 %506
  store i32 %504, i32* %507, align 4
  %508 = add nuw nsw i64 %484, 4
  %509 = icmp ult i64 %508, %451
  br i1 %509, label %483, label %457

510:                                              ; preds = %480, %510
  %511 = phi i64 [ %535, %510 ], [ %481, %480 ]
  %512 = getelementptr inbounds i32, i32* %455, i64 %511
  %513 = load i32, i32* %512, align 4
  %514 = shl i64 %511, 3
  %515 = and i64 %514, 4294967288
  %516 = getelementptr inbounds i32, i32* %454, i64 %515
  store i32 %513, i32* %516, align 4
  %517 = add nuw nsw i64 %511, 1
  %518 = getelementptr inbounds i32, i32* %455, i64 %517
  %519 = load i32, i32* %518, align 4
  %520 = shl i64 %517, 3
  %521 = and i64 %520, 4294967288
  %522 = getelementptr inbounds i32, i32* %454, i64 %521
  store i32 %519, i32* %522, align 4
  %523 = add nuw nsw i64 %511, 2
  %524 = getelementptr inbounds i32, i32* %455, i64 %523
  %525 = load i32, i32* %524, align 4
  %526 = shl i64 %523, 3
  %527 = and i64 %526, 4294967288
  %528 = getelementptr inbounds i32, i32* %454, i64 %527
  store i32 %525, i32* %528, align 4
  %529 = add nuw nsw i64 %511, 3
  %530 = getelementptr inbounds i32, i32* %455, i64 %529
  %531 = load i32, i32* %530, align 4
  %532 = shl i64 %529, 3
  %533 = and i64 %532, 4294967288
  %534 = getelementptr inbounds i32, i32* %454, i64 %533
  store i32 %531, i32* %534, align 4
  %535 = add nuw nsw i64 %511, 4
  %536 = icmp ult i64 %535, %452
  br i1 %536, label %510, label %537

537:                                              ; preds = %480, %510, %459
  %538 = getelementptr inbounds i32, i32* %454, i64 %39
  %539 = getelementptr inbounds i32, i32* %455, i64 %37
  %540 = add nuw i32 %456, 1
  %541 = icmp ult i32 %540, %57
  br i1 %541, label %453, label %1107

542:                                              ; preds = %425, %658
  %543 = phi i64 [ 0, %425 ], [ %663, %658 ]
  %544 = phi i32* [ %300, %425 ], [ %659, %658 ]
  %545 = phi i32* [ %241, %425 ], [ %660, %658 ]
  %546 = phi i32 [ 0, %425 ], [ %661, %658 ]
  %547 = mul i64 %543, %39
  %548 = add i64 %429, %547
  %549 = getelementptr i32, i32* %5, i64 %548
  %550 = add i64 %431, %547
  %551 = getelementptr i32, i32* %5, i64 %550
  %552 = mul i64 %543, %37
  %553 = add i64 %432, %552
  %554 = getelementptr i32, i32* %115, i64 %553
  %555 = add i64 %434, %552
  %556 = getelementptr i32, i32* %115, i64 %555
  br i1 %426, label %658, label %557

557:                                              ; preds = %542
  br i1 %440, label %558, label %646

558:                                              ; preds = %557
  %559 = icmp ult i32* %549, %556
  %560 = icmp ult i32* %554, %551
  %561 = and i1 %559, %560
  br i1 %561, label %646, label %562

562:                                              ; preds = %558
  br i1 %443, label %624, label %563

563:                                              ; preds = %562, %563
  %564 = phi i64 [ %621, %563 ], [ 0, %562 ]
  %565 = phi i64 [ %622, %563 ], [ %444, %562 ]
  %566 = getelementptr inbounds i32, i32* %545, i64 %564
  %567 = bitcast i32* %566 to <4 x i32>*
  %568 = load <4 x i32>, <4 x i32>* %567, align 4, !alias.scope !9
  %569 = getelementptr inbounds i32, i32* %566, i64 4
  %570 = bitcast i32* %569 to <4 x i32>*
  %571 = load <4 x i32>, <4 x i32>* %570, align 4, !alias.scope !9
  %572 = trunc i64 %564 to i32
  %573 = mul i32 %572, %6
  %574 = zext i32 %573 to i64
  %575 = getelementptr inbounds i32, i32* %544, i64 %574
  %576 = bitcast i32* %575 to <4 x i32>*
  store <4 x i32> %568, <4 x i32>* %576, align 4, !alias.scope !12, !noalias !9
  %577 = getelementptr inbounds i32, i32* %575, i64 4
  %578 = bitcast i32* %577 to <4 x i32>*
  store <4 x i32> %571, <4 x i32>* %578, align 4, !alias.scope !12, !noalias !9
  %579 = or i64 %564, 8
  %580 = getelementptr inbounds i32, i32* %545, i64 %579
  %581 = bitcast i32* %580 to <4 x i32>*
  %582 = load <4 x i32>, <4 x i32>* %581, align 4, !alias.scope !9
  %583 = getelementptr inbounds i32, i32* %580, i64 4
  %584 = bitcast i32* %583 to <4 x i32>*
  %585 = load <4 x i32>, <4 x i32>* %584, align 4, !alias.scope !9
  %586 = trunc i64 %579 to i32
  %587 = mul i32 %586, %6
  %588 = zext i32 %587 to i64
  %589 = getelementptr inbounds i32, i32* %544, i64 %588
  %590 = bitcast i32* %589 to <4 x i32>*
  store <4 x i32> %582, <4 x i32>* %590, align 4, !alias.scope !12, !noalias !9
  %591 = getelementptr inbounds i32, i32* %589, i64 4
  %592 = bitcast i32* %591 to <4 x i32>*
  store <4 x i32> %585, <4 x i32>* %592, align 4, !alias.scope !12, !noalias !9
  %593 = or i64 %564, 16
  %594 = getelementptr inbounds i32, i32* %545, i64 %593
  %595 = bitcast i32* %594 to <4 x i32>*
  %596 = load <4 x i32>, <4 x i32>* %595, align 4, !alias.scope !9
  %597 = getelementptr inbounds i32, i32* %594, i64 4
  %598 = bitcast i32* %597 to <4 x i32>*
  %599 = load <4 x i32>, <4 x i32>* %598, align 4, !alias.scope !9
  %600 = trunc i64 %593 to i32
  %601 = mul i32 %600, %6
  %602 = zext i32 %601 to i64
  %603 = getelementptr inbounds i32, i32* %544, i64 %602
  %604 = bitcast i32* %603 to <4 x i32>*
  store <4 x i32> %596, <4 x i32>* %604, align 4, !alias.scope !12, !noalias !9
  %605 = getelementptr inbounds i32, i32* %603, i64 4
  %606 = bitcast i32* %605 to <4 x i32>*
  store <4 x i32> %599, <4 x i32>* %606, align 4, !alias.scope !12, !noalias !9
  %607 = or i64 %564, 24
  %608 = getelementptr inbounds i32, i32* %545, i64 %607
  %609 = bitcast i32* %608 to <4 x i32>*
  %610 = load <4 x i32>, <4 x i32>* %609, align 4, !alias.scope !9
  %611 = getelementptr inbounds i32, i32* %608, i64 4
  %612 = bitcast i32* %611 to <4 x i32>*
  %613 = load <4 x i32>, <4 x i32>* %612, align 4, !alias.scope !9
  %614 = trunc i64 %607 to i32
  %615 = mul i32 %614, %6
  %616 = zext i32 %615 to i64
  %617 = getelementptr inbounds i32, i32* %544, i64 %616
  %618 = bitcast i32* %617 to <4 x i32>*
  store <4 x i32> %610, <4 x i32>* %618, align 4, !alias.scope !12, !noalias !9
  %619 = getelementptr inbounds i32, i32* %617, i64 4
  %620 = bitcast i32* %619 to <4 x i32>*
  store <4 x i32> %613, <4 x i32>* %620, align 4, !alias.scope !12, !noalias !9
  %621 = add i64 %564, 32
  %622 = add i64 %565, -4
  %623 = icmp eq i64 %622, 0
  br i1 %623, label %624, label %563, !llvm.loop !14

624:                                              ; preds = %563, %562
  %625 = phi i64 [ 0, %562 ], [ %621, %563 ]
  br i1 %445, label %645, label %626

626:                                              ; preds = %624, %626
  %627 = phi i64 [ %642, %626 ], [ %625, %624 ]
  %628 = phi i64 [ %643, %626 ], [ %442, %624 ]
  %629 = getelementptr inbounds i32, i32* %545, i64 %627
  %630 = bitcast i32* %629 to <4 x i32>*
  %631 = load <4 x i32>, <4 x i32>* %630, align 4, !alias.scope !9
  %632 = getelementptr inbounds i32, i32* %629, i64 4
  %633 = bitcast i32* %632 to <4 x i32>*
  %634 = load <4 x i32>, <4 x i32>* %633, align 4, !alias.scope !9
  %635 = trunc i64 %627 to i32
  %636 = mul i32 %635, %6
  %637 = zext i32 %636 to i64
  %638 = getelementptr inbounds i32, i32* %544, i64 %637
  %639 = bitcast i32* %638 to <4 x i32>*
  store <4 x i32> %631, <4 x i32>* %639, align 4, !alias.scope !12, !noalias !9
  %640 = getelementptr inbounds i32, i32* %638, i64 4
  %641 = bitcast i32* %640 to <4 x i32>*
  store <4 x i32> %634, <4 x i32>* %641, align 4, !alias.scope !12, !noalias !9
  %642 = add i64 %627, 8
  %643 = add i64 %628, -1
  %644 = icmp eq i64 %643, 0
  br i1 %644, label %645, label %626, !llvm.loop !15

645:                                              ; preds = %626, %624
  br i1 %446, label %658, label %646

646:                                              ; preds = %557, %645, %558
  %647 = phi i64 [ 0, %558 ], [ 0, %557 ], [ %441, %645 ]
  br label %648

648:                                              ; preds = %646, %648
  %649 = phi i64 [ %656, %648 ], [ %647, %646 ]
  %650 = getelementptr inbounds i32, i32* %545, i64 %649
  %651 = load i32, i32* %650, align 4
  %652 = trunc i64 %649 to i32
  %653 = mul i32 %652, %6
  %654 = zext i32 %653 to i64
  %655 = getelementptr inbounds i32, i32* %544, i64 %654
  store i32 %651, i32* %655, align 4
  %656 = add nuw nsw i64 %649, 1
  %657 = icmp ult i64 %656, %427
  br i1 %657, label %648, label %658, !llvm.loop !16

658:                                              ; preds = %648, %645, %542
  %659 = getelementptr inbounds i32, i32* %544, i64 %39
  %660 = getelementptr inbounds i32, i32* %545, i64 %37
  %661 = add nuw i32 %546, 1
  %662 = icmp ult i32 %661, %57
  %663 = add i64 %543, 1
  br i1 %662, label %542, label %1107

664:                                              ; preds = %99
  br i1 %116, label %665, label %682

665:                                              ; preds = %664
  %666 = load i32, i32* %11, align 8
  %667 = load i32, i32* %29, align 4
  %668 = mul i32 %667, %666
  %669 = zext i32 %668 to i64
  %670 = shl nuw nsw i64 %669, 2
  %671 = tail call i8* @opj_calloc(i64 1, i64 %670) #4
  %672 = icmp eq i8* %671, null
  br i1 %672, label %1117, label %673

673:                                              ; preds = %665
  %674 = bitcast i8* %671 to i32*
  %675 = load i32**, i32*** %34, align 8
  %676 = load i32, i32* %35, align 8
  %677 = mul i32 %676, %47
  %678 = add i32 %677, %100
  %679 = zext i32 %678 to i64
  %680 = getelementptr inbounds i32*, i32** %675, i64 %679
  %681 = bitcast i32** %680 to i8**
  store i8* %671, i8** %681, align 8
  br label %682

682:                                              ; preds = %673, %664
  %683 = phi i32* [ %674, %673 ], [ %115, %664 ]
  %684 = getelementptr inbounds i32, i32* %683, i64 %60
  %685 = zext i32 %105 to i64
  %686 = getelementptr inbounds i32, i32* %684, i64 %685
  %687 = sub i32 %101, %1
  br i1 %38, label %688, label %742

688:                                              ; preds = %682
  %689 = zext i32 %687 to i64
  %690 = getelementptr inbounds i32, i32* %64, i64 %689
  %691 = icmp eq i32 %108, 4
  br i1 %691, label %696, label %692

692:                                              ; preds = %688
  br i1 %67, label %1107, label %693

693:                                              ; preds = %692
  %694 = zext i32 %108 to i64
  %695 = shl nuw nsw i64 %694, 2
  br i1 %92, label %1035, label %720

696:                                              ; preds = %688
  br i1 %67, label %1107, label %697

697:                                              ; preds = %696
  br i1 %96, label %1022, label %698

698:                                              ; preds = %697, %698
  %699 = phi i32* [ %717, %698 ], [ %690, %697 ]
  %700 = phi i32* [ %716, %698 ], [ %686, %697 ]
  %701 = phi i32 [ %718, %698 ], [ %97, %697 ]
  %702 = bitcast i32* %700 to i8*
  %703 = bitcast i32* %699 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %702, i8* align 4 %703, i64 16, i1 false)
  %704 = getelementptr inbounds i32, i32* %700, i64 %37
  %705 = getelementptr inbounds i32, i32* %699, i64 %39
  %706 = bitcast i32* %704 to i8*
  %707 = bitcast i32* %705 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %706, i8* align 4 %707, i64 16, i1 false)
  %708 = getelementptr inbounds i32, i32* %704, i64 %37
  %709 = getelementptr inbounds i32, i32* %705, i64 %39
  %710 = bitcast i32* %708 to i8*
  %711 = bitcast i32* %709 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %710, i8* align 4 %711, i64 16, i1 false)
  %712 = getelementptr inbounds i32, i32* %708, i64 %37
  %713 = getelementptr inbounds i32, i32* %709, i64 %39
  %714 = bitcast i32* %712 to i8*
  %715 = bitcast i32* %713 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %714, i8* align 4 %715, i64 16, i1 false)
  %716 = getelementptr inbounds i32, i32* %712, i64 %37
  %717 = getelementptr inbounds i32, i32* %713, i64 %39
  %718 = add i32 %701, -4
  %719 = icmp eq i32 %718, 0
  br i1 %719, label %1022, label %698

720:                                              ; preds = %693, %720
  %721 = phi i32* [ %739, %720 ], [ %690, %693 ]
  %722 = phi i32* [ %738, %720 ], [ %686, %693 ]
  %723 = phi i32 [ %740, %720 ], [ %93, %693 ]
  %724 = bitcast i32* %722 to i8*
  %725 = bitcast i32* %721 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %724, i8* align 4 %725, i64 %695, i1 false)
  %726 = getelementptr inbounds i32, i32* %722, i64 %37
  %727 = getelementptr inbounds i32, i32* %721, i64 %39
  %728 = bitcast i32* %726 to i8*
  %729 = bitcast i32* %727 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %728, i8* align 4 %729, i64 %695, i1 false)
  %730 = getelementptr inbounds i32, i32* %726, i64 %37
  %731 = getelementptr inbounds i32, i32* %727, i64 %39
  %732 = bitcast i32* %730 to i8*
  %733 = bitcast i32* %731 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %732, i8* align 4 %733, i64 %695, i1 false)
  %734 = getelementptr inbounds i32, i32* %730, i64 %37
  %735 = getelementptr inbounds i32, i32* %731, i64 %39
  %736 = bitcast i32* %734 to i8*
  %737 = bitcast i32* %735 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %736, i8* align 4 %737, i64 %695, i1 false)
  %738 = getelementptr inbounds i32, i32* %734, i64 %37
  %739 = getelementptr inbounds i32, i32* %735, i64 %39
  %740 = add i32 %723, -4
  %741 = icmp eq i32 %740, 0
  br i1 %741, label %1035, label %720

742:                                              ; preds = %682
  %743 = mul i32 %687, %6
  %744 = zext i32 %743 to i64
  %745 = getelementptr inbounds i32, i32* %64, i64 %744
  %746 = icmp eq i32 %108, 1
  br i1 %746, label %747, label %779

747:                                              ; preds = %742
  br i1 %67, label %1107, label %748

748:                                              ; preds = %747
  br i1 %88, label %1048, label %749

749:                                              ; preds = %748, %749
  %750 = phi i32* [ %775, %749 ], [ %745, %748 ]
  %751 = phi i32* [ %776, %749 ], [ %686, %748 ]
  %752 = phi i32 [ %777, %749 ], [ %89, %748 ]
  %753 = load i32, i32* %750, align 4
  store i32 %753, i32* %751, align 4
  %754 = getelementptr inbounds i32, i32* %750, i64 %39
  %755 = getelementptr inbounds i32, i32* %751, i64 %37
  %756 = load i32, i32* %754, align 4
  store i32 %756, i32* %755, align 4
  %757 = getelementptr inbounds i32, i32* %754, i64 %39
  %758 = getelementptr inbounds i32, i32* %755, i64 %37
  %759 = load i32, i32* %757, align 4
  store i32 %759, i32* %758, align 4
  %760 = getelementptr inbounds i32, i32* %757, i64 %39
  %761 = getelementptr inbounds i32, i32* %758, i64 %37
  %762 = load i32, i32* %760, align 4
  store i32 %762, i32* %761, align 4
  %763 = getelementptr inbounds i32, i32* %760, i64 %39
  %764 = getelementptr inbounds i32, i32* %761, i64 %37
  %765 = load i32, i32* %763, align 4
  store i32 %765, i32* %764, align 4
  %766 = getelementptr inbounds i32, i32* %763, i64 %39
  %767 = getelementptr inbounds i32, i32* %764, i64 %37
  %768 = load i32, i32* %766, align 4
  store i32 %768, i32* %767, align 4
  %769 = getelementptr inbounds i32, i32* %766, i64 %39
  %770 = getelementptr inbounds i32, i32* %767, i64 %37
  %771 = load i32, i32* %769, align 4
  store i32 %771, i32* %770, align 4
  %772 = getelementptr inbounds i32, i32* %769, i64 %39
  %773 = getelementptr inbounds i32, i32* %770, i64 %37
  %774 = load i32, i32* %772, align 4
  store i32 %774, i32* %773, align 4
  %775 = getelementptr inbounds i32, i32* %772, i64 %39
  %776 = getelementptr inbounds i32, i32* %773, i64 %37
  %777 = add i32 %752, -8
  %778 = icmp eq i32 %777, 0
  br i1 %778, label %1048, label %749

779:                                              ; preds = %742
  %780 = icmp ugt i32 %108, 7
  %781 = and i1 %41, %780
  br i1 %781, label %805, label %782

782:                                              ; preds = %779
  br i1 %67, label %1107, label %783

783:                                              ; preds = %782
  %784 = icmp eq i32 %108, 0
  %785 = zext i32 %108 to i64
  %786 = add i64 %68, %685
  %787 = add i64 %68, %785
  %788 = add i64 %787, %685
  %789 = zext i32 %687 to i64
  %790 = add i64 %69, %789
  %791 = add i64 %69, %785
  %792 = add i64 %791, %789
  %793 = and i64 %785, 4294967288
  %794 = add nsw i64 %793, -8
  %795 = lshr exact i64 %794, 3
  %796 = add nuw nsw i64 %795, 1
  %797 = icmp ugt i32 %108, 7
  %798 = and i1 %797, %44
  %799 = and i64 %785, 4294967288
  %800 = and i64 %796, 3
  %801 = icmp ult i64 %794, 24
  %802 = sub nsw i64 %796, %800
  %803 = icmp eq i64 %800, 0
  %804 = icmp eq i64 %799, %785
  br label %900

805:                                              ; preds = %779
  br i1 %67, label %1107, label %806

806:                                              ; preds = %805
  %807 = and i32 %108, -4
  %808 = icmp eq i32 %807, 0
  %809 = zext i32 %807 to i64
  %810 = zext i32 %108 to i64
  br label %811

811:                                              ; preds = %806, %895
  %812 = phi i32* [ %745, %806 ], [ %896, %895 ]
  %813 = phi i32* [ %686, %806 ], [ %897, %895 ]
  %814 = phi i32 [ 0, %806 ], [ %898, %895 ]
  br i1 %808, label %817, label %841

815:                                              ; preds = %841
  %816 = trunc i64 %866 to i32
  br label %817

817:                                              ; preds = %815, %811
  %818 = phi i32 [ 0, %811 ], [ %816, %815 ]
  %819 = icmp ult i32 %818, %108
  br i1 %819, label %820, label %895

820:                                              ; preds = %817
  %821 = zext i32 %818 to i64
  %822 = sub nsw i64 %810, %821
  %823 = xor i64 %821, -1
  %824 = add nsw i64 %823, %810
  %825 = and i64 %822, 3
  %826 = icmp eq i64 %825, 0
  br i1 %826, label %838, label %827

827:                                              ; preds = %820, %827
  %828 = phi i64 [ %835, %827 ], [ %821, %820 ]
  %829 = phi i64 [ %836, %827 ], [ %825, %820 ]
  %830 = shl i64 %828, 3
  %831 = and i64 %830, 4294967288
  %832 = getelementptr inbounds i32, i32* %812, i64 %831
  %833 = load i32, i32* %832, align 4
  %834 = getelementptr inbounds i32, i32* %813, i64 %828
  store i32 %833, i32* %834, align 4
  %835 = add nuw nsw i64 %828, 1
  %836 = add i64 %829, -1
  %837 = icmp eq i64 %836, 0
  br i1 %837, label %838, label %827, !llvm.loop !17

838:                                              ; preds = %827, %820
  %839 = phi i64 [ %821, %820 ], [ %835, %827 ]
  %840 = icmp ult i64 %824, 3
  br i1 %840, label %895, label %868

841:                                              ; preds = %811, %841
  %842 = phi i64 [ %866, %841 ], [ 0, %811 ]
  %843 = shl i64 %842, 3
  %844 = and i64 %843, 4294967264
  %845 = getelementptr inbounds i32, i32* %812, i64 %844
  %846 = load i32, i32* %845, align 4
  %847 = getelementptr inbounds i32, i32* %813, i64 %842
  store i32 %846, i32* %847, align 4
  %848 = or i64 %842, 1
  %849 = shl i64 %848, 3
  %850 = and i64 %849, 4294967272
  %851 = getelementptr inbounds i32, i32* %812, i64 %850
  %852 = load i32, i32* %851, align 4
  %853 = getelementptr inbounds i32, i32* %813, i64 %848
  store i32 %852, i32* %853, align 4
  %854 = or i64 %842, 2
  %855 = shl i64 %854, 3
  %856 = and i64 %855, 4294967280
  %857 = getelementptr inbounds i32, i32* %812, i64 %856
  %858 = load i32, i32* %857, align 4
  %859 = getelementptr inbounds i32, i32* %813, i64 %854
  store i32 %858, i32* %859, align 4
  %860 = or i64 %842, 3
  %861 = shl i64 %860, 3
  %862 = and i64 %861, 4294967288
  %863 = getelementptr inbounds i32, i32* %812, i64 %862
  %864 = load i32, i32* %863, align 4
  %865 = getelementptr inbounds i32, i32* %813, i64 %860
  store i32 %864, i32* %865, align 4
  %866 = add nuw nsw i64 %842, 4
  %867 = icmp ult i64 %866, %809
  br i1 %867, label %841, label %815

868:                                              ; preds = %838, %868
  %869 = phi i64 [ %893, %868 ], [ %839, %838 ]
  %870 = shl i64 %869, 3
  %871 = and i64 %870, 4294967288
  %872 = getelementptr inbounds i32, i32* %812, i64 %871
  %873 = load i32, i32* %872, align 4
  %874 = getelementptr inbounds i32, i32* %813, i64 %869
  store i32 %873, i32* %874, align 4
  %875 = add nuw nsw i64 %869, 1
  %876 = shl i64 %875, 3
  %877 = and i64 %876, 4294967288
  %878 = getelementptr inbounds i32, i32* %812, i64 %877
  %879 = load i32, i32* %878, align 4
  %880 = getelementptr inbounds i32, i32* %813, i64 %875
  store i32 %879, i32* %880, align 4
  %881 = add nuw nsw i64 %869, 2
  %882 = shl i64 %881, 3
  %883 = and i64 %882, 4294967288
  %884 = getelementptr inbounds i32, i32* %812, i64 %883
  %885 = load i32, i32* %884, align 4
  %886 = getelementptr inbounds i32, i32* %813, i64 %881
  store i32 %885, i32* %886, align 4
  %887 = add nuw nsw i64 %869, 3
  %888 = shl i64 %887, 3
  %889 = and i64 %888, 4294967288
  %890 = getelementptr inbounds i32, i32* %812, i64 %889
  %891 = load i32, i32* %890, align 4
  %892 = getelementptr inbounds i32, i32* %813, i64 %887
  store i32 %891, i32* %892, align 4
  %893 = add nuw nsw i64 %869, 4
  %894 = icmp ult i64 %893, %810
  br i1 %894, label %868, label %895

895:                                              ; preds = %838, %868, %817
  %896 = getelementptr inbounds i32, i32* %812, i64 %39
  %897 = getelementptr inbounds i32, i32* %813, i64 %37
  %898 = add nuw i32 %814, 1
  %899 = icmp ult i32 %898, %57
  br i1 %899, label %811, label %1107

900:                                              ; preds = %783, %1016
  %901 = phi i64 [ 0, %783 ], [ %1021, %1016 ]
  %902 = phi i32* [ %745, %783 ], [ %1017, %1016 ]
  %903 = phi i32* [ %686, %783 ], [ %1018, %1016 ]
  %904 = phi i32 [ 0, %783 ], [ %1019, %1016 ]
  %905 = mul i64 %901, %37
  %906 = add i64 %786, %905
  %907 = getelementptr i32, i32* %683, i64 %906
  %908 = add i64 %788, %905
  %909 = getelementptr i32, i32* %683, i64 %908
  %910 = mul i64 %901, %39
  %911 = add i64 %790, %910
  %912 = getelementptr i32, i32* %5, i64 %911
  %913 = add i64 %792, %910
  %914 = getelementptr i32, i32* %5, i64 %913
  br i1 %784, label %1016, label %915

915:                                              ; preds = %900
  br i1 %798, label %916, label %1004

916:                                              ; preds = %915
  %917 = icmp ult i32* %907, %914
  %918 = icmp ult i32* %912, %909
  %919 = and i1 %917, %918
  br i1 %919, label %1004, label %920

920:                                              ; preds = %916
  br i1 %801, label %982, label %921

921:                                              ; preds = %920, %921
  %922 = phi i64 [ %979, %921 ], [ 0, %920 ]
  %923 = phi i64 [ %980, %921 ], [ %802, %920 ]
  %924 = trunc i64 %922 to i32
  %925 = mul i32 %924, %6
  %926 = zext i32 %925 to i64
  %927 = getelementptr inbounds i32, i32* %902, i64 %926
  %928 = bitcast i32* %927 to <4 x i32>*
  %929 = load <4 x i32>, <4 x i32>* %928, align 4, !alias.scope !18
  %930 = getelementptr inbounds i32, i32* %927, i64 4
  %931 = bitcast i32* %930 to <4 x i32>*
  %932 = load <4 x i32>, <4 x i32>* %931, align 4, !alias.scope !18
  %933 = getelementptr inbounds i32, i32* %903, i64 %922
  %934 = bitcast i32* %933 to <4 x i32>*
  store <4 x i32> %929, <4 x i32>* %934, align 4, !alias.scope !21, !noalias !18
  %935 = getelementptr inbounds i32, i32* %933, i64 4
  %936 = bitcast i32* %935 to <4 x i32>*
  store <4 x i32> %932, <4 x i32>* %936, align 4, !alias.scope !21, !noalias !18
  %937 = or i64 %922, 8
  %938 = trunc i64 %937 to i32
  %939 = mul i32 %938, %6
  %940 = zext i32 %939 to i64
  %941 = getelementptr inbounds i32, i32* %902, i64 %940
  %942 = bitcast i32* %941 to <4 x i32>*
  %943 = load <4 x i32>, <4 x i32>* %942, align 4, !alias.scope !18
  %944 = getelementptr inbounds i32, i32* %941, i64 4
  %945 = bitcast i32* %944 to <4 x i32>*
  %946 = load <4 x i32>, <4 x i32>* %945, align 4, !alias.scope !18
  %947 = getelementptr inbounds i32, i32* %903, i64 %937
  %948 = bitcast i32* %947 to <4 x i32>*
  store <4 x i32> %943, <4 x i32>* %948, align 4, !alias.scope !21, !noalias !18
  %949 = getelementptr inbounds i32, i32* %947, i64 4
  %950 = bitcast i32* %949 to <4 x i32>*
  store <4 x i32> %946, <4 x i32>* %950, align 4, !alias.scope !21, !noalias !18
  %951 = or i64 %922, 16
  %952 = trunc i64 %951 to i32
  %953 = mul i32 %952, %6
  %954 = zext i32 %953 to i64
  %955 = getelementptr inbounds i32, i32* %902, i64 %954
  %956 = bitcast i32* %955 to <4 x i32>*
  %957 = load <4 x i32>, <4 x i32>* %956, align 4, !alias.scope !18
  %958 = getelementptr inbounds i32, i32* %955, i64 4
  %959 = bitcast i32* %958 to <4 x i32>*
  %960 = load <4 x i32>, <4 x i32>* %959, align 4, !alias.scope !18
  %961 = getelementptr inbounds i32, i32* %903, i64 %951
  %962 = bitcast i32* %961 to <4 x i32>*
  store <4 x i32> %957, <4 x i32>* %962, align 4, !alias.scope !21, !noalias !18
  %963 = getelementptr inbounds i32, i32* %961, i64 4
  %964 = bitcast i32* %963 to <4 x i32>*
  store <4 x i32> %960, <4 x i32>* %964, align 4, !alias.scope !21, !noalias !18
  %965 = or i64 %922, 24
  %966 = trunc i64 %965 to i32
  %967 = mul i32 %966, %6
  %968 = zext i32 %967 to i64
  %969 = getelementptr inbounds i32, i32* %902, i64 %968
  %970 = bitcast i32* %969 to <4 x i32>*
  %971 = load <4 x i32>, <4 x i32>* %970, align 4, !alias.scope !18
  %972 = getelementptr inbounds i32, i32* %969, i64 4
  %973 = bitcast i32* %972 to <4 x i32>*
  %974 = load <4 x i32>, <4 x i32>* %973, align 4, !alias.scope !18
  %975 = getelementptr inbounds i32, i32* %903, i64 %965
  %976 = bitcast i32* %975 to <4 x i32>*
  store <4 x i32> %971, <4 x i32>* %976, align 4, !alias.scope !21, !noalias !18
  %977 = getelementptr inbounds i32, i32* %975, i64 4
  %978 = bitcast i32* %977 to <4 x i32>*
  store <4 x i32> %974, <4 x i32>* %978, align 4, !alias.scope !21, !noalias !18
  %979 = add i64 %922, 32
  %980 = add i64 %923, -4
  %981 = icmp eq i64 %980, 0
  br i1 %981, label %982, label %921, !llvm.loop !23

982:                                              ; preds = %921, %920
  %983 = phi i64 [ 0, %920 ], [ %979, %921 ]
  br i1 %803, label %1003, label %984

984:                                              ; preds = %982, %984
  %985 = phi i64 [ %1000, %984 ], [ %983, %982 ]
  %986 = phi i64 [ %1001, %984 ], [ %800, %982 ]
  %987 = trunc i64 %985 to i32
  %988 = mul i32 %987, %6
  %989 = zext i32 %988 to i64
  %990 = getelementptr inbounds i32, i32* %902, i64 %989
  %991 = bitcast i32* %990 to <4 x i32>*
  %992 = load <4 x i32>, <4 x i32>* %991, align 4, !alias.scope !18
  %993 = getelementptr inbounds i32, i32* %990, i64 4
  %994 = bitcast i32* %993 to <4 x i32>*
  %995 = load <4 x i32>, <4 x i32>* %994, align 4, !alias.scope !18
  %996 = getelementptr inbounds i32, i32* %903, i64 %985
  %997 = bitcast i32* %996 to <4 x i32>*
  store <4 x i32> %992, <4 x i32>* %997, align 4, !alias.scope !21, !noalias !18
  %998 = getelementptr inbounds i32, i32* %996, i64 4
  %999 = bitcast i32* %998 to <4 x i32>*
  store <4 x i32> %995, <4 x i32>* %999, align 4, !alias.scope !21, !noalias !18
  %1000 = add i64 %985, 8
  %1001 = add i64 %986, -1
  %1002 = icmp eq i64 %1001, 0
  br i1 %1002, label %1003, label %984, !llvm.loop !24

1003:                                             ; preds = %984, %982
  br i1 %804, label %1016, label %1004

1004:                                             ; preds = %915, %1003, %916
  %1005 = phi i64 [ 0, %916 ], [ 0, %915 ], [ %799, %1003 ]
  br label %1006

1006:                                             ; preds = %1004, %1006
  %1007 = phi i64 [ %1014, %1006 ], [ %1005, %1004 ]
  %1008 = trunc i64 %1007 to i32
  %1009 = mul i32 %1008, %6
  %1010 = zext i32 %1009 to i64
  %1011 = getelementptr inbounds i32, i32* %902, i64 %1010
  %1012 = load i32, i32* %1011, align 4
  %1013 = getelementptr inbounds i32, i32* %903, i64 %1007
  store i32 %1012, i32* %1013, align 4
  %1014 = add nuw nsw i64 %1007, 1
  %1015 = icmp ult i64 %1014, %785
  br i1 %1015, label %1006, label %1016, !llvm.loop !25

1016:                                             ; preds = %1006, %1003, %900
  %1017 = getelementptr inbounds i32, i32* %902, i64 %39
  %1018 = getelementptr inbounds i32, i32* %903, i64 %37
  %1019 = add nuw i32 %904, 1
  %1020 = icmp ult i32 %1019, %57
  %1021 = add i64 %901, 1
  br i1 %1020, label %900, label %1107

1022:                                             ; preds = %698, %697
  %1023 = phi i32* [ %690, %697 ], [ %717, %698 ]
  %1024 = phi i32* [ %686, %697 ], [ %716, %698 ]
  br i1 %98, label %1107, label %1025

1025:                                             ; preds = %1022, %1025
  %1026 = phi i32* [ %1032, %1025 ], [ %1023, %1022 ]
  %1027 = phi i32* [ %1031, %1025 ], [ %1024, %1022 ]
  %1028 = phi i32 [ %1033, %1025 ], [ %95, %1022 ]
  %1029 = bitcast i32* %1027 to i8*
  %1030 = bitcast i32* %1026 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1029, i8* align 4 %1030, i64 16, i1 false)
  %1031 = getelementptr inbounds i32, i32* %1027, i64 %37
  %1032 = getelementptr inbounds i32, i32* %1026, i64 %39
  %1033 = add i32 %1028, -1
  %1034 = icmp eq i32 %1033, 0
  br i1 %1034, label %1107, label %1025, !llvm.loop !26

1035:                                             ; preds = %720, %693
  %1036 = phi i32* [ %690, %693 ], [ %739, %720 ]
  %1037 = phi i32* [ %686, %693 ], [ %738, %720 ]
  br i1 %94, label %1107, label %1038

1038:                                             ; preds = %1035, %1038
  %1039 = phi i32* [ %1045, %1038 ], [ %1036, %1035 ]
  %1040 = phi i32* [ %1044, %1038 ], [ %1037, %1035 ]
  %1041 = phi i32 [ %1046, %1038 ], [ %91, %1035 ]
  %1042 = bitcast i32* %1040 to i8*
  %1043 = bitcast i32* %1039 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1042, i8* align 4 %1043, i64 %695, i1 false)
  %1044 = getelementptr inbounds i32, i32* %1040, i64 %37
  %1045 = getelementptr inbounds i32, i32* %1039, i64 %39
  %1046 = add i32 %1041, -1
  %1047 = icmp eq i32 %1046, 0
  br i1 %1047, label %1107, label %1038, !llvm.loop !27

1048:                                             ; preds = %749, %748
  %1049 = phi i32* [ %745, %748 ], [ %775, %749 ]
  %1050 = phi i32* [ %686, %748 ], [ %776, %749 ]
  br i1 %90, label %1107, label %1051

1051:                                             ; preds = %1048, %1051
  %1052 = phi i32* [ %1056, %1051 ], [ %1049, %1048 ]
  %1053 = phi i32* [ %1057, %1051 ], [ %1050, %1048 ]
  %1054 = phi i32 [ %1058, %1051 ], [ %87, %1048 ]
  %1055 = load i32, i32* %1052, align 4
  store i32 %1055, i32* %1053, align 4
  %1056 = getelementptr inbounds i32, i32* %1052, i64 %39
  %1057 = getelementptr inbounds i32, i32* %1053, i64 %37
  %1058 = add i32 %1054, -1
  %1059 = icmp eq i32 %1058, 0
  br i1 %1059, label %1107, label %1051, !llvm.loop !28

1060:                                             ; preds = %126, %121
  %1061 = phi i32* [ %123, %121 ], [ %144, %126 ]
  br i1 %86, label %1107, label %1062

1062:                                             ; preds = %1060, %1062
  %1063 = phi i32* [ %1066, %1062 ], [ %1061, %1060 ]
  %1064 = phi i32 [ %1067, %1062 ], [ %83, %1060 ]
  %1065 = bitcast i32* %1063 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %1065, i8 0, i64 %125, i1 false)
  %1066 = getelementptr inbounds i32, i32* %1063, i64 %39
  %1067 = add i32 %1064, -1
  %1068 = icmp eq i32 %1067, 0
  br i1 %1068, label %1107, label %1062, !llvm.loop !29

1069:                                             ; preds = %253, %252
  %1070 = phi i32* [ %245, %252 ], [ %271, %253 ]
  %1071 = phi i32* [ %241, %252 ], [ %272, %253 ]
  br i1 %82, label %1107, label %1072

1072:                                             ; preds = %1069, %1072
  %1073 = phi i32* [ %1078, %1072 ], [ %1070, %1069 ]
  %1074 = phi i32* [ %1079, %1072 ], [ %1071, %1069 ]
  %1075 = phi i32 [ %1080, %1072 ], [ %79, %1069 ]
  %1076 = bitcast i32* %1073 to i8*
  %1077 = bitcast i32* %1074 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1076, i8* align 4 %1077, i64 16, i1 false)
  %1078 = getelementptr inbounds i32, i32* %1073, i64 %39
  %1079 = getelementptr inbounds i32, i32* %1074, i64 %37
  %1080 = add i32 %1075, -1
  %1081 = icmp eq i32 %1080, 0
  br i1 %1081, label %1107, label %1072, !llvm.loop !30

1082:                                             ; preds = %275, %248
  %1083 = phi i32* [ %245, %248 ], [ %293, %275 ]
  %1084 = phi i32* [ %241, %248 ], [ %294, %275 ]
  br i1 %78, label %1107, label %1085

1085:                                             ; preds = %1082, %1085
  %1086 = phi i32* [ %1091, %1085 ], [ %1083, %1082 ]
  %1087 = phi i32* [ %1092, %1085 ], [ %1084, %1082 ]
  %1088 = phi i32 [ %1093, %1085 ], [ %75, %1082 ]
  %1089 = bitcast i32* %1086 to i8*
  %1090 = bitcast i32* %1087 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1089, i8* align 4 %1090, i64 %250, i1 false)
  %1091 = getelementptr inbounds i32, i32* %1086, i64 %39
  %1092 = getelementptr inbounds i32, i32* %1087, i64 %37
  %1093 = add i32 %1088, -1
  %1094 = icmp eq i32 %1093, 0
  br i1 %1094, label %1107, label %1085, !llvm.loop !31

1095:                                             ; preds = %304, %303
  %1096 = phi i32* [ %300, %303 ], [ %330, %304 ]
  %1097 = phi i32* [ %241, %303 ], [ %331, %304 ]
  br i1 %74, label %1107, label %1098

1098:                                             ; preds = %1095, %1098
  %1099 = phi i32* [ %1103, %1098 ], [ %1096, %1095 ]
  %1100 = phi i32* [ %1104, %1098 ], [ %1097, %1095 ]
  %1101 = phi i32 [ %1105, %1098 ], [ %71, %1095 ]
  %1102 = load i32, i32* %1100, align 4
  store i32 %1102, i32* %1099, align 4
  %1103 = getelementptr inbounds i32, i32* %1099, i64 %39
  %1104 = getelementptr inbounds i32, i32* %1100, i64 %37
  %1105 = add i32 %1101, -1
  %1106 = icmp eq i32 %1105, 0
  br i1 %1106, label %1107, label %1098, !llvm.loop !32

1107:                                             ; preds = %658, %537, %364, %394, %1095, %1098, %1082, %1085, %1069, %1072, %234, %1060, %1062, %1016, %895, %1048, %1051, %1035, %1038, %1022, %1025, %696, %692, %747, %805, %782, %120, %147, %251, %247, %302, %447, %424, %342
  %1108 = add i32 %100, 1
  %1109 = add i32 %108, %101
  %1110 = icmp ult i32 %1109, %3
  br i1 %1110, label %99, label %1111

1111:                                             ; preds = %1107
  %1112 = add i32 %57, %48
  %1113 = icmp ult i32 %1112, %4
  br i1 %1113, label %1114, label %1117

1114:                                             ; preds = %1111
  %1115 = add i32 %47, 1
  %1116 = load i32, i32* %29, align 4
  br label %45

1117:                                             ; preds = %1111, %665, %20, %10
  %1118 = phi i32 [ %8, %20 ], [ %8, %10 ], [ 0, %665 ], [ 1, %1111 ]
  ret i32 %1118
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_sparse_array_int32_write(%struct.opj_sparse_array_int32* nocapture readonly, i32, i32, i32, i32, i32* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  %10 = tail call fastcc i32 @opj_sparse_array_int32_read_or_write(%struct.opj_sparse_array_int32* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32* %5, i32 %6, i32 %7, i32 %8, i32 0)
  ret i32 %10
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !5}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !5}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !5}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !5}
!27 = distinct !{!27, !5}
!28 = distinct !{!28, !5}
!29 = distinct !{!29, !5}
!30 = distinct !{!30, !5}
!31 = distinct !{!31, !5}
!32 = distinct !{!32, !5}
