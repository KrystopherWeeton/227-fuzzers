; ModuleID = '../../third_party/boringssl/src/crypto/x509v3/v3_lib.c'
source_filename = "../../third_party/boringssl/src/crypto/x509v3/v3_lib.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stack_st_X509V3_EXT_METHOD = type opaque
%struct.v3_ext_method = type { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* }
%struct.ASN1_ITEM_st = type opaque
%struct.stack_st_CONF_VALUE = type opaque
%struct.v3_ext_ctx = type { i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_req_st*, %struct.X509_crl_st*, %struct.X509V3_CONF_METHOD_st*, i8* }
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.X509_req_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type { %struct.DIST_POINT_NAME_st*, i32, i32, %struct.asn1_string_st*, i32, i32 }
%struct.DIST_POINT_NAME_st = type { i32, %union.anon.0, %struct.X509_name_st* }
%union.anon.0 = type { %struct.stack_st_GENERAL_NAME* }
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.X509V3_CONF_METHOD_st = type { i8* (i8*, i8*, i8*)*, %struct.stack_st_CONF_VALUE* (i8*, i8*)*, void (i8*, i8*)*, void (i8*, %struct.stack_st_CONF_VALUE*)* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.X509_extension_st = type { %struct.asn1_object_st*, i32, %struct.asn1_string_st* }
%struct.ASN1_VALUE_st = type opaque

@ext_list = internal unnamed_addr global %struct.stack_st_X509V3_EXT_METHOD* null, align 8
@.str = private unnamed_addr constant [55 x i8] c"../../third_party/boringssl/src/crypto/x509v3/v3_lib.c\00", align 1
@standard_exts = internal constant [32 x %struct.v3_ext_method*] [%struct.v3_ext_method* @v3_nscert, %struct.v3_ext_method* getelementptr inbounds ([0 x %struct.v3_ext_method], [0 x %struct.v3_ext_method]* @v3_ns_ia5_list, i32 0, i32 0), %struct.v3_ext_method* bitcast (i8* getelementptr (i8, i8* bitcast ([0 x %struct.v3_ext_method]* @v3_ns_ia5_list to i8*), i64 104) to %struct.v3_ext_method*), %struct.v3_ext_method* bitcast (i8* getelementptr (i8, i8* bitcast ([0 x %struct.v3_ext_method]* @v3_ns_ia5_list to i8*), i64 208) to %struct.v3_ext_method*), %struct.v3_ext_method* bitcast (i8* getelementptr (i8, i8* bitcast ([0 x %struct.v3_ext_method]* @v3_ns_ia5_list to i8*), i64 312) to %struct.v3_ext_method*), %struct.v3_ext_method* bitcast (i8* getelementptr (i8, i8* bitcast ([0 x %struct.v3_ext_method]* @v3_ns_ia5_list to i8*), i64 416) to %struct.v3_ext_method*), %struct.v3_ext_method* bitcast (i8* getelementptr (i8, i8* bitcast ([0 x %struct.v3_ext_method]* @v3_ns_ia5_list to i8*), i64 520) to %struct.v3_ext_method*), %struct.v3_ext_method* bitcast (i8* getelementptr (i8, i8* bitcast ([0 x %struct.v3_ext_method]* @v3_ns_ia5_list to i8*), i64 624) to %struct.v3_ext_method*), %struct.v3_ext_method* @v3_skey_id, %struct.v3_ext_method* @v3_key_usage, %struct.v3_ext_method* getelementptr inbounds ([0 x %struct.v3_ext_method], [0 x %struct.v3_ext_method]* @v3_alt, i32 0, i32 0), %struct.v3_ext_method* bitcast (i8* getelementptr (i8, i8* bitcast ([0 x %struct.v3_ext_method]* @v3_alt to i8*), i64 104) to %struct.v3_ext_method*), %struct.v3_ext_method* @v3_bcons, %struct.v3_ext_method* @v3_crl_num, %struct.v3_ext_method* @v3_cpols, %struct.v3_ext_method* @v3_akey_id, %struct.v3_ext_method* @v3_crld, %struct.v3_ext_method* @v3_ext_ku, %struct.v3_ext_method* @v3_delta_crl, %struct.v3_ext_method* @v3_crl_reason, %struct.v3_ext_method* @v3_crl_invdate, %struct.v3_ext_method* @v3_info, %struct.v3_ext_method* @v3_ocsp_nocheck, %struct.v3_ext_method* @v3_sinfo, %struct.v3_ext_method* @v3_policy_constraints, %struct.v3_ext_method* @v3_pci, %struct.v3_ext_method* @v3_name_constraints, %struct.v3_ext_method* @v3_policy_mappings, %struct.v3_ext_method* @v3_inhibit_anyp, %struct.v3_ext_method* @v3_idp, %struct.v3_ext_method* bitcast (i8* getelementptr (i8, i8* bitcast ([0 x %struct.v3_ext_method]* @v3_alt to i8*), i64 208) to %struct.v3_ext_method*), %struct.v3_ext_method* @v3_freshest_crl], align 16
@v3_nscert = external constant %struct.v3_ext_method, align 8
@v3_ns_ia5_list = external constant [0 x %struct.v3_ext_method], align 8
@v3_skey_id = external constant %struct.v3_ext_method, align 8
@v3_key_usage = external constant %struct.v3_ext_method, align 8
@v3_alt = external constant [0 x %struct.v3_ext_method], align 8
@v3_bcons = external constant %struct.v3_ext_method, align 8
@v3_crl_num = external constant %struct.v3_ext_method, align 8
@v3_cpols = external constant %struct.v3_ext_method, align 8
@v3_akey_id = external constant %struct.v3_ext_method, align 8
@v3_crld = external constant %struct.v3_ext_method, align 8
@v3_ext_ku = external constant %struct.v3_ext_method, align 8
@v3_delta_crl = external constant %struct.v3_ext_method, align 8
@v3_crl_reason = external constant %struct.v3_ext_method, align 8
@v3_crl_invdate = external constant %struct.v3_ext_method, align 8
@v3_info = external constant %struct.v3_ext_method, align 8
@v3_ocsp_nocheck = external constant %struct.v3_ext_method, align 8
@v3_sinfo = external constant %struct.v3_ext_method, align 8
@v3_policy_constraints = external constant %struct.v3_ext_method, align 8
@v3_pci = external constant %struct.v3_ext_method, align 8
@v3_name_constraints = external constant %struct.v3_ext_method, align 8
@v3_policy_mappings = external constant %struct.v3_ext_method, align 8
@v3_inhibit_anyp = external constant %struct.v3_ext_method, align 8
@v3_idp = external constant %struct.v3_ext_method, align 8
@v3_freshest_crl = external constant %struct.v3_ext_method, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_EXT_add(%struct.v3_ext_method*) local_unnamed_addr #0 {
  %2 = load %struct.stack_st_X509V3_EXT_METHOD*, %struct.stack_st_X509V3_EXT_METHOD** @ext_list, align 8
  %3 = icmp eq %struct.stack_st_X509V3_EXT_METHOD* %2, null
  %4 = bitcast %struct.stack_st_X509V3_EXT_METHOD* %2 to %struct.stack_st*
  br i1 %3, label %5, label %15

5:                                                ; preds = %1
  %6 = tail call %struct.stack_st* @sk_new(i32 (i8**, i8**)* bitcast (i32 (%struct.v3_ext_method**, %struct.v3_ext_method**)* @ext_stack_cmp to i32 (i8**, i8**)*)) #6
  store %struct.stack_st* %6, %struct.stack_st** bitcast (%struct.stack_st_X509V3_EXT_METHOD** @ext_list to %struct.stack_st**), align 8
  %7 = icmp eq %struct.stack_st* %6, null
  br i1 %7, label %8, label %15

8:                                                ; preds = %5
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 83) #6
  %9 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %26, label %13

13:                                               ; preds = %8
  %14 = bitcast %struct.v3_ext_method* %0 to i8*
  tail call void @OPENSSL_free(i8* %14) #6
  br label %26

15:                                               ; preds = %5, %1
  %16 = phi %struct.stack_st* [ %6, %5 ], [ %4, %1 ]
  %17 = bitcast %struct.v3_ext_method* %0 to i8*
  %18 = tail call i64 @sk_push(%struct.stack_st* %16, i8* %17) #6
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %15
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 88) #6
  %21 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %0, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %20
  tail call void @OPENSSL_free(i8* %17) #6
  br label %26

26:                                               ; preds = %25, %20, %13, %8, %15
  %27 = phi i32 [ 1, %15 ], [ 0, %8 ], [ 0, %13 ], [ 0, %20 ], [ 0, %25 ]
  ret i32 %27
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @ext_stack_cmp(%struct.v3_ext_method** nocapture readonly, %struct.v3_ext_method** nocapture readonly) #1 {
  %3 = load %struct.v3_ext_method*, %struct.v3_ext_method** %0, align 8
  %4 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.v3_ext_method*, %struct.v3_ext_method** %1, align 8
  %7 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %6, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = sub nsw i32 %5, %8
  ret i32 %9
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @ext_list_free(%struct.v3_ext_method*) #0 {
  %2 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 1
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast %struct.v3_ext_method* %0 to i8*
  tail call void @OPENSSL_free(i8* %7) #6
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.v3_ext_method* @X509V3_EXT_get_nid(i32) local_unnamed_addr #0 {
  %2 = alloca %struct.v3_ext_method, align 8
  %3 = alloca i64, align 8
  %4 = bitcast %struct.v3_ext_method* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %4) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 104, i1 false)
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  store i64 -6148914691236517206, i64* %3, align 8
  %6 = icmp slt i32 %0, 0
  br i1 %6, label %43, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %2, i64 0, i32 0
  store i32 %0, i32* %8, align 8
  br label %9

9:                                                ; preds = %24, %7
  %10 = phi i64 [ %26, %24 ], [ 32, %7 ]
  %11 = phi i64 [ %25, %24 ], [ 0, %7 ]
  %12 = add i64 %11, %10
  %13 = lshr i64 %12, 1
  %14 = getelementptr [32 x %struct.v3_ext_method*], [32 x %struct.v3_ext_method*]* @standard_exts, i64 0, i64 %13
  %15 = load %struct.v3_ext_method*, %struct.v3_ext_method** %14, align 8
  %16 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %15, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = sub nsw i32 %0, %17
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %9
  %21 = icmp eq i32 %18, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %20
  %23 = add nuw i64 %13, 1
  br label %24

24:                                               ; preds = %22, %9
  %25 = phi i64 [ %23, %22 ], [ %11, %9 ]
  %26 = phi i64 [ %10, %22 ], [ %13, %9 ]
  %27 = icmp ult i64 %25, %26
  br i1 %27, label %9, label %30

28:                                               ; preds = %20
  %29 = icmp eq %struct.v3_ext_method** %14, null
  br i1 %29, label %30, label %43

30:                                               ; preds = %24, %28
  %31 = load %struct.stack_st_X509V3_EXT_METHOD*, %struct.stack_st_X509V3_EXT_METHOD** @ext_list, align 8
  %32 = icmp eq %struct.stack_st_X509V3_EXT_METHOD* %31, null
  br i1 %32, label %43, label %33

33:                                               ; preds = %30
  %34 = bitcast %struct.stack_st_X509V3_EXT_METHOD* %31 to %struct.stack_st*
  tail call void @sk_sort(%struct.stack_st* nonnull %34) #6
  %35 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_X509V3_EXT_METHOD** @ext_list to %struct.stack_st**), align 8
  %36 = call i32 @sk_find(%struct.stack_st* %35, i64* nonnull %3, i8* nonnull %4, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_X509V3_EXT_METHOD_call_cmp_func) #6
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %43, label %38

38:                                               ; preds = %33
  %39 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_X509V3_EXT_METHOD** @ext_list to %struct.stack_st**), align 8
  %40 = load i64, i64* %3, align 8
  %41 = call i8* @sk_value(%struct.stack_st* %39, i64 %40) #6
  %42 = bitcast i8* %41 to %struct.v3_ext_method*
  br label %43

43:                                               ; preds = %28, %33, %30, %1, %38
  %44 = phi %struct.v3_ext_method* [ %42, %38 ], [ null, %1 ], [ null, %30 ], [ null, %33 ], [ %15, %28 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %4) #6
  ret %struct.v3_ext_method* %44
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden %struct.v3_ext_method* @X509V3_EXT_get(%struct.X509_extension_st* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.X509_extension_st, %struct.X509_extension_st* %0, i64 0, i32 0
  %3 = load %struct.asn1_object_st*, %struct.asn1_object_st** %2, align 8
  %4 = tail call i32 @OBJ_obj2nid(%struct.asn1_object_st* %3) #6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = tail call %struct.v3_ext_method* @X509V3_EXT_get_nid(i32 %4)
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi %struct.v3_ext_method* [ %7, %6 ], [ null, %1 ]
  ret %struct.v3_ext_method* %9
}

declare i32 @OBJ_obj2nid(%struct.asn1_object_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_EXT_free(i32, i8*) local_unnamed_addr #0 {
  %3 = tail call %struct.v3_ext_method* @X509V3_EXT_get_nid(i32 %0)
  %4 = icmp eq %struct.v3_ext_method* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  tail call void @ERR_put_error(i32 20, i32 0, i32 104, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 137) #6
  br label %18

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %3, i64 0, i32 2
  %8 = load %struct.ASN1_ITEM_st*, %struct.ASN1_ITEM_st** %7, align 8
  %9 = icmp eq %struct.ASN1_ITEM_st* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = bitcast i8* %1 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %11, %struct.ASN1_ITEM_st* nonnull %8) #6
  br label %18

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %3, i64 0, i32 4
  %14 = load void (i8*)*, void (i8*)** %13, align 8
  %15 = icmp eq void (i8*)* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void %14(i8* %1) #6
  br label %18

17:                                               ; preds = %12
  tail call void @ERR_put_error(i32 20, i32 0, i32 104, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 146) #6
  br label %18

18:                                               ; preds = %10, %16, %17, %5
  %19 = phi i32 [ 0, %5 ], [ 0, %17 ], [ 1, %16 ], [ 1, %10 ]
  ret i32 %19
}

declare void @ASN1_item_free(%struct.ASN1_VALUE_st*, %struct.ASN1_ITEM_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_EXT_add_list(%struct.v3_ext_method*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %14, label %9

5:                                                ; preds = %9
  %6 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %13, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %14, label %9

9:                                                ; preds = %1, %5
  %10 = phi %struct.v3_ext_method* [ %13, %5 ], [ %0, %1 ]
  %11 = tail call i32 @X509V3_EXT_add(%struct.v3_ext_method* %10)
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %10, i64 1
  br i1 %12, label %14, label %5

14:                                               ; preds = %9, %5, %1
  %15 = phi i32 [ 1, %1 ], [ 1, %5 ], [ 0, %9 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_EXT_add_alias(i32, i32) local_unnamed_addr #0 {
  %3 = tail call %struct.v3_ext_method* @X509V3_EXT_get_nid(i32 %1)
  %4 = icmp eq %struct.v3_ext_method* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  tail call void @ERR_put_error(i32 20, i32 0, i32 114, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 167) #6
  br label %19

6:                                                ; preds = %2
  %7 = tail call i8* @OPENSSL_malloc(i64 104) #6
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %10

9:                                                ; preds = %6
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 173) #6
  br label %19

10:                                               ; preds = %6
  %11 = bitcast i8* %7 to %struct.v3_ext_method*
  %12 = bitcast %struct.v3_ext_method* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* nonnull align 8 %12, i64 104, i1 false)
  %13 = bitcast i8* %7 to i32*
  store i32 %0, i32* %13, align 8
  %14 = getelementptr inbounds i8, i8* %7, i64 4
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = or i32 %16, 1
  store i32 %17, i32* %15, align 4
  %18 = tail call i32 @X509V3_EXT_add(%struct.v3_ext_method* nonnull %11)
  br label %19

19:                                               ; preds = %10, %9, %5
  %20 = phi i32 [ %18, %10 ], [ 0, %9 ], [ 0, %5 ]
  ret i32 %20
}

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @X509V3_EXT_cleanup() local_unnamed_addr #0 {
  %1 = load %struct.stack_st*, %struct.stack_st** bitcast (%struct.stack_st_X509V3_EXT_METHOD** @ext_list to %struct.stack_st**), align 8
  tail call void @sk_pop_free_ex(%struct.stack_st* %1, void (void (i8*)*, i8*)* nonnull @sk_X509V3_EXT_METHOD_call_free_func, void (i8*)* bitcast (void (%struct.v3_ext_method*)* @ext_list_free to void (i8*)*)) #6
  store %struct.stack_st_X509V3_EXT_METHOD* null, %struct.stack_st_X509V3_EXT_METHOD** @ext_list, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @X509V3_add_standard_extensions() local_unnamed_addr #4 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @X509V3_EXT_d2i(%struct.X509_extension_st* nocapture readonly) local_unnamed_addr #0 {
  %2 = alloca i8*, align 8
  %3 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %2, align 8
  %4 = getelementptr inbounds %struct.X509_extension_st, %struct.X509_extension_st* %0, i64 0, i32 0
  %5 = load %struct.asn1_object_st*, %struct.asn1_object_st** %4, align 8
  %6 = tail call i32 @OBJ_obj2nid(%struct.asn1_object_st* %5) #6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %34, label %8

8:                                                ; preds = %1
  %9 = tail call %struct.v3_ext_method* @X509V3_EXT_get_nid(i32 %6) #6
  %10 = icmp eq %struct.v3_ext_method* %9, null
  br i1 %10, label %34, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.X509_extension_st, %struct.X509_extension_st* %0, i64 0, i32 2
  %13 = load %struct.asn1_string_st*, %struct.asn1_string_st** %12, align 8
  %14 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %13, i64 0, i32 2
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast i8** %2 to i64*
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %9, i64 0, i32 2
  %19 = load %struct.ASN1_ITEM_st*, %struct.ASN1_ITEM_st** %18, align 8
  %20 = icmp eq %struct.ASN1_ITEM_st* %19, null
  br i1 %20, label %27, label %21

21:                                               ; preds = %11
  %22 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %13, i64 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = sext i32 %23 to i64
  %25 = call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** null, i8** nonnull %2, i64 %24, %struct.ASN1_ITEM_st* nonnull %19) #6
  %26 = bitcast %struct.ASN1_VALUE_st* %25 to i8*
  br label %34

27:                                               ; preds = %11
  %28 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %9, i64 0, i32 5
  %29 = load i8* (i8*, i8**, i64)*, i8* (i8*, i8**, i64)** %28, align 8
  %30 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %13, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = sext i32 %31 to i64
  %33 = call i8* %29(i8* null, i8** nonnull %2, i64 %32) #6
  br label %34

34:                                               ; preds = %1, %8, %27, %21
  %35 = phi i8* [ %26, %21 ], [ %33, %27 ], [ null, %8 ], [ null, %1 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #6
  ret i8* %35
}

declare %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st**, i8**, i64, %struct.ASN1_ITEM_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i8* @X509V3_get_d2i(%struct.stack_st_X509_EXTENSION*, i32, i32*, i32*) local_unnamed_addr #0 {
  %5 = alloca i8*, align 8
  %6 = icmp eq %struct.stack_st_X509_EXTENSION* %0, null
  %7 = icmp ne i32* %3, null
  br i1 %6, label %8, label %13

8:                                                ; preds = %4
  br i1 %7, label %9, label %10

9:                                                ; preds = %8
  store i32 -1, i32* %3, align 4
  br label %10

10:                                               ; preds = %9, %8
  %11 = icmp eq i32* %2, null
  br i1 %11, label %94, label %12

12:                                               ; preds = %10
  store i32 -1, i32* %2, align 4
  br label %94

13:                                               ; preds = %4
  br i1 %7, label %14, label %20

14:                                               ; preds = %13
  %15 = load i32, i32* %3, align 4
  %16 = icmp sgt i32 %15, -1
  %17 = select i1 %16, i32 %15, i32 -1
  %18 = add nsw i32 %17, 1
  %19 = zext i32 %18 to i64
  br label %20

20:                                               ; preds = %14, %13
  %21 = phi i64 [ 0, %13 ], [ %19, %14 ]
  %22 = bitcast %struct.stack_st_X509_EXTENSION* %0 to %struct.stack_st*
  %23 = tail call i64 @sk_num(%struct.stack_st* nonnull %22) #6
  %24 = icmp ult i64 %21, %23
  br i1 %24, label %25, label %89

25:                                               ; preds = %20, %43
  %26 = phi %struct.X509_extension_st* [ %44, %43 ], [ null, %20 ]
  %27 = phi i64 [ %45, %43 ], [ %21, %20 ]
  %28 = tail call i8* @sk_value(%struct.stack_st* nonnull %22, i64 %27) #6
  %29 = bitcast i8* %28 to %struct.X509_extension_st*
  %30 = bitcast i8* %28 to %struct.asn1_object_st**
  %31 = load %struct.asn1_object_st*, %struct.asn1_object_st** %30, align 8
  %32 = tail call i32 @OBJ_obj2nid(%struct.asn1_object_st* %31) #6
  %33 = icmp eq i32 %32, %1
  br i1 %33, label %34, label %43

34:                                               ; preds = %25
  br i1 %7, label %35, label %38

35:                                               ; preds = %34
  %36 = bitcast i8* %28 to %struct.X509_extension_st*
  %37 = trunc i64 %27 to i32
  store i32 %37, i32* %3, align 4
  br label %48

38:                                               ; preds = %34
  %39 = icmp eq %struct.X509_extension_st* %26, null
  br i1 %39, label %43, label %40

40:                                               ; preds = %38
  %41 = icmp eq i32* %2, null
  br i1 %41, label %94, label %42

42:                                               ; preds = %40
  store i32 -2, i32* %2, align 4
  br label %94

43:                                               ; preds = %38, %25
  %44 = phi %struct.X509_extension_st* [ %26, %25 ], [ %29, %38 ]
  %45 = add nuw i64 %27, 1
  %46 = tail call i64 @sk_num(%struct.stack_st* nonnull %22) #6
  %47 = icmp ult i64 %45, %46
  br i1 %47, label %25, label %48

48:                                               ; preds = %43, %35
  %49 = phi %struct.X509_extension_st* [ %36, %35 ], [ %44, %43 ]
  %50 = icmp eq %struct.X509_extension_st* %49, null
  br i1 %50, label %89, label %51

51:                                               ; preds = %48
  %52 = icmp eq i32* %2, null
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = tail call i32 @X509_EXTENSION_get_critical(%struct.X509_extension_st* nonnull %49) #6
  store i32 %54, i32* %2, align 4
  br label %55

55:                                               ; preds = %51, %53
  %56 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %57 = getelementptr inbounds %struct.X509_extension_st, %struct.X509_extension_st* %49, i64 0, i32 0
  %58 = load %struct.asn1_object_st*, %struct.asn1_object_st** %57, align 8
  %59 = tail call i32 @OBJ_obj2nid(%struct.asn1_object_st* %58) #6
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %87, label %61

61:                                               ; preds = %55
  %62 = tail call %struct.v3_ext_method* @X509V3_EXT_get_nid(i32 %59) #6
  %63 = icmp eq %struct.v3_ext_method* %62, null
  br i1 %63, label %87, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds %struct.X509_extension_st, %struct.X509_extension_st* %49, i64 0, i32 2
  %66 = load %struct.asn1_string_st*, %struct.asn1_string_st** %65, align 8
  %67 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %66, i64 0, i32 2
  %68 = bitcast i8** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast i8** %5 to i64*
  store i64 %69, i64* %70, align 8
  %71 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %62, i64 0, i32 2
  %72 = load %struct.ASN1_ITEM_st*, %struct.ASN1_ITEM_st** %71, align 8
  %73 = icmp eq %struct.ASN1_ITEM_st* %72, null
  br i1 %73, label %80, label %74

74:                                               ; preds = %64
  %75 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %66, i64 0, i32 0
  %76 = load i32, i32* %75, align 8
  %77 = sext i32 %76 to i64
  %78 = call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** null, i8** nonnull %5, i64 %77, %struct.ASN1_ITEM_st* nonnull %72) #6
  %79 = bitcast %struct.ASN1_VALUE_st* %78 to i8*
  br label %87

80:                                               ; preds = %64
  %81 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %62, i64 0, i32 5
  %82 = load i8* (i8*, i8**, i64)*, i8* (i8*, i8**, i64)** %81, align 8
  %83 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %66, i64 0, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = sext i32 %84 to i64
  %86 = call i8* %82(i8* null, i8** nonnull %5, i64 %85) #6
  br label %87

87:                                               ; preds = %55, %61, %74, %80
  %88 = phi i8* [ %79, %74 ], [ %86, %80 ], [ null, %61 ], [ null, %55 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #6
  br label %94

89:                                               ; preds = %20, %48
  br i1 %7, label %90, label %91

90:                                               ; preds = %89
  store i32 -1, i32* %3, align 4
  br label %91

91:                                               ; preds = %90, %89
  %92 = icmp eq i32* %2, null
  br i1 %92, label %94, label %93

93:                                               ; preds = %91
  store i32 -1, i32* %2, align 4
  br label %94

94:                                               ; preds = %93, %91, %42, %40, %12, %10, %87
  %95 = phi i8* [ %88, %87 ], [ null, %10 ], [ null, %12 ], [ null, %40 ], [ null, %42 ], [ null, %91 ], [ null, %93 ]
  ret i8* %95
}

declare i32 @X509_EXTENSION_get_critical(%struct.X509_extension_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_add1_i2d(%struct.stack_st_X509_EXTENSION** nocapture, i32, i8*, i32, i64) local_unnamed_addr #0 {
  %6 = and i64 %4, 15
  %7 = icmp eq i64 %6, 1
  br i1 %7, label %21, label %8

8:                                                ; preds = %5
  %9 = load %struct.stack_st_X509_EXTENSION*, %struct.stack_st_X509_EXTENSION** %0, align 8
  %10 = tail call i32 @X509v3_get_ext_by_NID(%struct.stack_st_X509_EXTENSION* %9, i32 %1, i32 -1) #6
  %11 = icmp sgt i32 %10, -1
  br i1 %11, label %12, label %20

12:                                               ; preds = %8
  switch i64 %6, label %21 [
    i64 4, label %65
    i64 0, label %60
    i64 5, label %13
  ]

13:                                               ; preds = %12
  %14 = bitcast %struct.stack_st_X509_EXTENSION** %0 to %struct.stack_st**
  %15 = load %struct.stack_st*, %struct.stack_st** %14, align 8
  %16 = sext i32 %10 to i64
  %17 = tail call i8* @sk_delete(%struct.stack_st* %15, i64 %16) #6
  %18 = icmp eq i8* %17, null
  %19 = select i1 %18, i32 -1, i32 1
  br label %65

20:                                               ; preds = %8
  switch i64 %6, label %21 [
    i64 5, label %60
    i64 3, label %60
  ]

21:                                               ; preds = %5, %20, %12
  %22 = phi i1 [ false, %20 ], [ true, %12 ], [ false, %5 ]
  %23 = phi i32 [ %10, %20 ], [ %10, %12 ], [ -1, %5 ]
  %24 = tail call %struct.X509_extension_st* @X509V3_EXT_i2d(i32 %1, i32 %3, i8* %2) #6
  %25 = icmp eq %struct.X509_extension_st* %24, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  tail call void @ERR_put_error(i32 20, i32 0, i32 109, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 328) #6
  br label %65

27:                                               ; preds = %21
  %28 = load %struct.stack_st_X509_EXTENSION*, %struct.stack_st_X509_EXTENSION** %0, align 8
  br i1 %22, label %29, label %40

29:                                               ; preds = %27
  %30 = sext i32 %23 to i64
  %31 = bitcast %struct.stack_st_X509_EXTENSION* %28 to %struct.stack_st*
  %32 = tail call i8* @sk_value(%struct.stack_st* %31, i64 %30) #6
  %33 = bitcast i8* %32 to %struct.X509_extension_st*
  tail call void @X509_EXTENSION_free(%struct.X509_extension_st* %33) #6
  %34 = bitcast %struct.stack_st_X509_EXTENSION** %0 to %struct.stack_st**
  %35 = load %struct.stack_st*, %struct.stack_st** %34, align 8
  %36 = bitcast %struct.X509_extension_st* %24 to i8*
  %37 = tail call i8* @sk_set(%struct.stack_st* %35, i64 %30, i8* nonnull %36) #6
  %38 = icmp eq i8* %37, null
  %39 = select i1 %38, i32 -1, i32 1
  br label %65

40:                                               ; preds = %27
  %41 = icmp eq %struct.stack_st_X509_EXTENSION* %28, null
  br i1 %41, label %42, label %46

42:                                               ; preds = %40
  %43 = tail call %struct.stack_st* @sk_new_null() #6
  %44 = bitcast %struct.stack_st* %43 to %struct.stack_st_X509_EXTENSION*
  %45 = icmp eq %struct.stack_st* %43, null
  br i1 %45, label %53, label %46

46:                                               ; preds = %42, %40
  %47 = phi %struct.stack_st_X509_EXTENSION* [ %44, %42 ], [ %28, %40 ]
  %48 = bitcast %struct.stack_st_X509_EXTENSION* %47 to %struct.stack_st*
  %49 = bitcast %struct.X509_extension_st* %24 to i8*
  %50 = tail call i64 @sk_push(%struct.stack_st* %48, i8* nonnull %49) #6
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %53, label %52

52:                                               ; preds = %46
  store %struct.stack_st_X509_EXTENSION* %47, %struct.stack_st_X509_EXTENSION** %0, align 8
  br label %65

53:                                               ; preds = %46, %42
  %54 = phi %struct.stack_st_X509_EXTENSION* [ null, %42 ], [ %47, %46 ]
  %55 = load %struct.stack_st_X509_EXTENSION*, %struct.stack_st_X509_EXTENSION** %0, align 8
  %56 = icmp eq %struct.stack_st_X509_EXTENSION* %54, %55
  br i1 %56, label %59, label %57

57:                                               ; preds = %53
  %58 = bitcast %struct.stack_st_X509_EXTENSION* %54 to %struct.stack_st*
  tail call void @sk_free(%struct.stack_st* %58) #6
  br label %59

59:                                               ; preds = %53, %57
  tail call void @X509_EXTENSION_free(%struct.X509_extension_st* nonnull %24) #6
  br label %65

60:                                               ; preds = %20, %20, %12
  %61 = phi i32 [ 112, %12 ], [ 114, %20 ], [ 114, %20 ]
  %62 = and i64 %4, 16
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %60
  tail call void @ERR_put_error(i32 20, i32 0, i32 %61, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 358) #6
  br label %65

65:                                               ; preds = %64, %60, %29, %13, %12, %59, %52, %26
  %66 = phi i32 [ -1, %59 ], [ 1, %52 ], [ 0, %26 ], [ 1, %12 ], [ %19, %13 ], [ %39, %29 ], [ 0, %60 ], [ 0, %64 ]
  ret i32 %66
}

declare i32 @X509v3_get_ext_by_NID(%struct.stack_st_X509_EXTENSION*, i32, i32) local_unnamed_addr #2

declare %struct.X509_extension_st* @X509V3_EXT_i2d(i32, i32, i8*) local_unnamed_addr #2

declare void @X509_EXTENSION_free(%struct.X509_extension_st*) local_unnamed_addr #2

declare %struct.stack_st* @sk_new(i32 (i8**, i8**)*) local_unnamed_addr #2

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #2

declare void @sk_sort(%struct.stack_st*) local_unnamed_addr #2

declare i32 @sk_find(%struct.stack_st*, i64*, i8*, i32 (i32 (i8**, i8**)*, i8**, i8**)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @sk_X509V3_EXT_METHOD_call_cmp_func(i32 (i8**, i8**)* nocapture, i8** nocapture readonly, i8** nocapture readonly) #5 {
  %4 = alloca %struct.v3_ext_method*, align 8
  %5 = alloca %struct.v3_ext_method*, align 8
  %6 = bitcast %struct.v3_ext_method** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = bitcast i8** %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %struct.v3_ext_method** %4 to i64*
  store i64 %8, i64* %9, align 8
  %10 = bitcast %struct.v3_ext_method** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #6
  %11 = bitcast i8** %2 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.v3_ext_method** %5 to i64*
  store i64 %12, i64* %13, align 8
  %14 = bitcast i32 (i8**, i8**)* %0 to i32 (%struct.v3_ext_method**, %struct.v3_ext_method**)*
  %15 = call i32 %14(%struct.v3_ext_method** nonnull %4, %struct.v3_ext_method** nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  ret i32 %15
}

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #2

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_X509V3_EXT_METHOD_call_free_func(void (i8*)* nocapture, i8*) #5 {
  %3 = bitcast void (i8*)* %0 to void (%struct.v3_ext_method*)*
  %4 = bitcast i8* %1 to %struct.v3_ext_method*
  tail call void %3(%struct.v3_ext_method* %4) #6
  ret void
}

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #2

declare i8* @sk_delete(%struct.stack_st*, i64) local_unnamed_addr #2

declare i8* @sk_set(%struct.stack_st*, i64, i8*) local_unnamed_addr #2

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #2

declare void @sk_free(%struct.stack_st*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
