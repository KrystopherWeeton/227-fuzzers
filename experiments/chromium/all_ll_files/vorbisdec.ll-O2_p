; ModuleID = '../../third_party/ffmpeg/libavcodec/vorbisdec.c'
source_filename = "../../third_party/ffmpeg/libavcodec/vorbisdec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVRational = type { i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type { i32, i32, %struct.AVFrame*, %struct.AVBufferRef*, i8*, %struct.DecodeSimpleContext, %struct.AVBSFContext*, %struct.AVPacket*, %struct.AVFifoBuffer*, i8*, i32, i8*, %struct.EncodeSimpleContext, i32, i8*, i32, %struct.AVPacket*, %struct.AVFrame*, i32, i32, i64, i64, %struct.AVFrame*, %struct.AVPacket*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.DecodeSimpleContext = type { %struct.AVPacket* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVFifoBuffer = type { i8*, i8*, i8*, i8*, i32, i32 }
%struct.EncodeSimpleContext = type { %struct.AVFrame* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVCodecDefault = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.vorbis_context_s = type { %struct.AVCodecContext*, %struct.GetBitContext, %struct.VorbisDSPContext, %struct.AVFloatDSPContext*, [2 x %struct.FFTContext], i8, i32, i8, i32, i32, i32, i32, [2 x i32], [2 x float*], i16, %struct.vorbis_codebook*, i8, %struct.vorbis_floor*, i8, %struct.vorbis_residue*, i8, %struct.vorbis_mapping*, i8, %struct.vorbis_mode*, i8, i8, float*, float* }
%struct.GetBitContext = type { i8*, i8*, i32, i32, i32 }
%struct.VorbisDSPContext = type { void (float*, float*, i64)* }
%struct.AVFloatDSPContext = type { void (float*, float*, float*, i32)*, void (float*, float*, float, i32)*, void (double*, double*, double, i32)*, void (float*, float*, float, i32)*, void (double*, double*, double, i32)*, void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, i32)*, void (float*, float*, i32)*, float (float*, float*, i32)*, void (double*, double*, double*, i32)* }
%struct.FFTContext = type { i32, i32, i16*, %struct.FFTComplex*, i32, i32, float*, float*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, i32, i32, i32* }
%struct.FFTComplex = type { float, float }
%struct.vorbis_codebook = type { i8, i8, i8, %struct.VLC, float*, i32 }
%struct.VLC = type { i32, [2 x i16]*, i32, i32 }
%struct.vorbis_floor = type { i8, i32 (%struct.vorbis_context_s*, %union.vorbis_floor_u*, float*)*, %union.vorbis_floor_u }
%union.vorbis_floor_u = type { %struct.vorbis_floor1_s }
%struct.vorbis_floor1_s = type { i8, [32 x i8], [16 x i8], [16 x i8], [16 x i8], [16 x [8 x i16]], i8, i16, %struct.vorbis_floor1_entry* }
%struct.vorbis_floor1_entry = type { i16, i16, i16, i16 }
%struct.vorbis_residue = type { i16, i32, i32, i32, i8, i8, [64 x [8 x i16]], i8, i16, i8* }
%struct.vorbis_mapping = type { i8, i16, i8*, i8*, i8*, [16 x i8], [16 x i8] }
%struct.vorbis_mode = type { i8, i16, i16, i8 }

@.str = private unnamed_addr constant [7 x i8] c"vorbis\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"Vorbis\00", align 1
@.compoundliteral = internal constant [2 x i32] [i32 8, i32 -1], align 4
@ff_vorbis_channel_layouts = external constant [9 x i64], align 16
@ff_vorbis_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 1, i32 86021, i32 1026, %struct.AVRational* null, i32* null, i32* null, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.compoundliteral, i32 0, i32 0), i64* getelementptr inbounds ([9 x i64], [9 x i64]* @ff_vorbis_channel_layouts, i32 0, i32 0), i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 424, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @vorbis_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @vorbis_decode_frame, i32 (%struct.AVCodecContext*)* @vorbis_decode_close, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* @vorbis_decode_flush, i32 2, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.2 = private unnamed_addr constant [20 x i8] c"Extradata missing.\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"Extradata corrupt.\0A\00", align 1
@.str.4 = private unnamed_addr constant [36 x i8] c"First header is not the id header.\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"Id header corrupt.\0A\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"Third header is not the setup header.\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"Setup header corrupt.\0A\00", align 1
@.str.8 = private unnamed_addr constant [58 x i8] c" Vorbis id header packet corrupt (no vorbis signature). \0A\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"Invalid number of channels\0A\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"Invalid samplerate\0A\00", align 1
@.str.11 = private unnamed_addr constant [56 x i8] c" Vorbis id header packet corrupt (illegal blocksize). \0A\00", align 1
@ff_vorbis_vwin = external local_unnamed_addr constant [8 x float*], align 16
@.str.12 = private unnamed_addr constant [59 x i8] c" Vorbis id header packet corrupt (framing flag not set). \0A\00", align 1
@.str.13 = private unnamed_addr constant [61 x i8] c" Vorbis setup header packet corrupt (no vorbis signature). \0A\00", align 1
@.str.14 = private unnamed_addr constant [51 x i8] c" Vorbis setup header packet corrupt (codebooks). \0A\00", align 1
@.str.15 = private unnamed_addr constant [64 x i8] c" Vorbis setup header packet corrupt (time domain transforms). \0A\00", align 1
@.str.16 = private unnamed_addr constant [48 x i8] c" Vorbis setup header packet corrupt (floors). \0A\00", align 1
@.str.17 = private unnamed_addr constant [50 x i8] c" Vorbis setup header packet corrupt (residues). \0A\00", align 1
@.str.18 = private unnamed_addr constant [50 x i8] c" Vorbis setup header packet corrupt (mappings). \0A\00", align 1
@.str.19 = private unnamed_addr constant [47 x i8] c" Vorbis setup header packet corrupt (modes). \0A\00", align 1
@.str.20 = private unnamed_addr constant [54 x i8] c" Vorbis setup header packet corrupt (framing flag). \0A\00", align 1
@.str.21 = private unnamed_addr constant [35 x i8] c" %u. Codebook setup data corrupt.\0A\00", align 1
@.str.22 = private unnamed_addr constant [44 x i8] c" %u. Codebook's dimension is invalid (%d).\0A\00", align 1
@.str.23 = private unnamed_addr constant [42 x i8] c" %u. Codebook has too many entries (%u).\0A\00", align 1
@.str.24 = private unnamed_addr constant [44 x i8] c" More codelengths than codes in codebook. \0A\00", align 1
@.str.25 = private unnamed_addr constant [42 x i8] c"Bug in codevector vector building code. \0A\00", align 1
@.str.26 = private unnamed_addr constant [38 x i8] c"Codebook lookup type not supported. \0A\00", align 1
@.str.27 = private unnamed_addr constant [47 x i8] c" Invalid code lengths while generating vlcs. \0A\00", align 1
@.str.28 = private unnamed_addr constant [32 x i8] c" Error generating vlc tables. \0A\00", align 1
@.str.29 = private unnamed_addr constant [45 x i8] c"Vorbis time domain transform data nonzero. \0A\00", align 1
@idx_err_str = internal constant [54 x i8] c"Index value %d out of range (0 - %d) for %s at %s:%i\0A\00", align 16
@.str.30 = private unnamed_addr constant [41 x i8] c"floor_setup->data.t1.class_masterbook[j]\00", align 1
@.str.31 = private unnamed_addr constant [48 x i8] c"../../third_party/ffmpeg/libavcodec/vorbisdec.c\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"bits\00", align 1
@.str.33 = private unnamed_addr constant [74 x i8] c"A rangebits value of 0 is not compliant with the Vorbis I specification.\0A\00", align 1
@.str.34 = private unnamed_addr constant [49 x i8] c"Floor value is too large for blocksize: %u (%u)\0A\00", align 1
@.str.35 = private unnamed_addr constant [21 x i8] c"Floor 0 order is 0.\0A\00", align 1
@.str.36 = private unnamed_addr constant [20 x i8] c"Floor 0 rate is 0.\0A\00", align 1
@.str.37 = private unnamed_addr constant [29 x i8] c"Floor 0 bark map size is 0.\0A\00", align 1
@.str.38 = private unnamed_addr constant [9 x i8] c"book_idx\00", align 1
@.str.39 = private unnamed_addr constant [21 x i8] c"Invalid floor type!\0A\00", align 1
@__const.vorbis_floor1_decode.range_v = private unnamed_addr constant [4 x i16] [i16 256, i16 128, i16 86, i16 64], align 2
@.str.40 = private unnamed_addr constant [34 x i8] c"floor0 dec: booknumber too high!\0A\00", align 1
@.str.41 = private unnamed_addr constant [80 x i8] c"partition out of bounds: type, begin, end, size, blocksize: %u, %u, %u, %u, %u\0A\00", align 1
@.str.42 = private unnamed_addr constant [21 x i8] c"res_setup->classbook\00", align 1
@.str.43 = private unnamed_addr constant [23 x i8] c"res_setup->books[j][k]\00", align 1
@.str.44 = private unnamed_addr constant [80 x i8] c"Other mappings than type 0 are not compliant with the Vorbis I specification. \0A\00", align 1
@.str.45 = private unnamed_addr constant [108 x i8] c"Square polar channel mapping with less than two channels is not compliant with the Vorbis I specification.\0A\00", align 1
@.str.46 = private unnamed_addr constant [28 x i8] c"mapping_setup->magnitude[j]\00", align 1
@.str.47 = private unnamed_addr constant [24 x i8] c"mapping_setup->angle[j]\00", align 1
@.str.48 = private unnamed_addr constant [33 x i8] c"%u. mapping setup data invalid.\0A\00", align 1
@.str.49 = private unnamed_addr constant [31 x i8] c"mapping_setup->submap_floor[j]\00", align 1
@.str.50 = private unnamed_addr constant [33 x i8] c"mapping_setup->submap_residue[j]\00", align 1
@.str.51 = private unnamed_addr constant [20 x i8] c"mode_setup->mapping\00", align 1
@.str.52 = private unnamed_addr constant [25 x i8] c"Ignoring comment header\0A\00", align 1
@.str.53 = private unnamed_addr constant [34 x i8] c"Data packet before valid headers\0A\00", align 1
@ff_vorbis_channel_layout_offsets = external local_unnamed_addr constant [8 x [8 x i8]], align 16
@.str.54 = private unnamed_addr constant [30 x i8] c"Not a Vorbis I audio packet.\0A\00", align 1
@.str.55 = private unnamed_addr constant [12 x i8] c"mode_number\00", align 1
@.str.56 = private unnamed_addr constant [42 x i8] c"Invalid codebook in vorbis_floor_decode.\0A\00", align 1
@.str.57 = private unnamed_addr constant [43 x i8] c"Too many channels in vorbis_floor_decode.\0A\00", align 1
@.str.58 = private unnamed_addr constant [47 x i8] c" Invalid residue type while residue decode?! \0A\00", align 1
@.str.59 = private unnamed_addr constant [28 x i8] c"Insufficient output buffer\0A\00", align 1
@ff_inverse = external local_unnamed_addr constant [257 x i32], align 16
@.str.62 = private unnamed_addr constant [38 x i8] c"Invalid vlc code decoding %d channel.\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ff_vorbis_inverse_coupling(float* nocapture, float* nocapture, i64) local_unnamed_addr #0 {
  %4 = icmp sgt i64 %2, 0
  br i1 %4, label %5, label %28

5:                                                ; preds = %3, %25
  %6 = phi i64 [ %26, %25 ], [ 0, %3 ]
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = load float, float* %7, align 4
  %9 = fcmp nsz ogt float %8, 0.000000e+00
  %10 = getelementptr inbounds float, float* %1, i64 %6
  %11 = load float, float* %10, align 4
  %12 = fcmp nsz ogt float %11, 0.000000e+00
  br i1 %9, label %13, label %19

13:                                               ; preds = %5
  br i1 %12, label %14, label %16

14:                                               ; preds = %13
  %15 = fsub nsz float %8, %11
  store float %15, float* %10, align 4
  br label %25

16:                                               ; preds = %13
  store float %8, float* %10, align 4
  %17 = load float, float* %7, align 4
  %18 = fadd nsz float %11, %17
  store float %18, float* %7, align 4
  br label %25

19:                                               ; preds = %5
  br i1 %12, label %20, label %22

20:                                               ; preds = %19
  %21 = fadd nsz float %8, %11
  store float %21, float* %10, align 4
  br label %25

22:                                               ; preds = %19
  store float %8, float* %10, align 4
  %23 = load float, float* %7, align 4
  %24 = fsub nsz float %23, %11
  store float %24, float* %7, align 4
  br label %25

25:                                               ; preds = %16, %14, %22, %20
  %26 = add nuw nsw i64 %6, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %28, label %5

28:                                               ; preds = %25, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: cold nounwind optsize ssp uwtable
define internal i32 @vorbis_decode_init(%struct.AVCodecContext*) #2 {
  %2 = alloca [3 x i8*], align 16
  %3 = alloca [3 x i32], align 4
  %4 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %5 = bitcast i8** %4 to %struct.vorbis_context_s**
  %6 = load %struct.vorbis_context_s*, %struct.vorbis_context_s** %5, align 8
  %7 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 15
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 16
  %10 = load i32, i32* %9, align 8
  %11 = bitcast [3 x i8*]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #7
  %12 = getelementptr inbounds [3 x i8*], [3 x i8*]* %2, i64 0, i64 0
  %13 = getelementptr inbounds [3 x i8*], [3 x i8*]* %2, i64 0, i64 2
  %14 = bitcast [3 x i32]* %3 to i8*
  %15 = bitcast [3 x i8*]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %14) #7
  %16 = getelementptr inbounds [3 x i32], [3 x i32]* %3, i64 0, i64 0
  store i32 -1431655766, i32* %16, align 4
  %17 = getelementptr inbounds [3 x i32], [3 x i32]* %3, i64 0, i64 1
  store i32 -1431655766, i32* %17, align 4
  %18 = getelementptr inbounds [3 x i32], [3 x i32]* %3, i64 0, i64 2
  store i32 -1431655766, i32* %18, align 4
  %19 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %6, i64 0, i32 0
  store %struct.AVCodecContext* %0, %struct.AVCodecContext** %19, align 8
  %20 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %6, i64 0, i32 2
  tail call void @ff_vorbisdsp_init(%struct.VorbisDSPContext* %20) #7
  %21 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 84
  store i32 8, i32* %21, align 8
  %22 = icmp eq i32 %10, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %1
  %24 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %24, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0)) #7
  br label %101

25:                                               ; preds = %1
  %26 = call i32 @avpriv_split_xiph_headers(i8* %8, i32 %10, i32 30, i8** nonnull %12, i32* nonnull %16) #7
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %25
  %29 = bitcast %struct.AVCodecContext* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %29, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0)) #7
  br label %101

30:                                               ; preds = %25
  %31 = load i8*, i8** %12, align 16
  %32 = load i32, i32* %16, align 4
  %33 = shl nsw i32 %32, 3
  %34 = icmp ult i32 %33, 2147483135
  %35 = icmp ne i8* %31, null
  %36 = and i1 %35, %34
  %37 = select i1 %36, i32 %33, i32 0
  %38 = select i1 %36, i8* %31, i8* null
  %39 = ashr exact i32 %37, 3
  %40 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %6, i64 0, i32 1, i32 0
  store i8* %38, i8** %40, align 8
  %41 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %6, i64 0, i32 1, i32 3
  store i32 %37, i32* %41, align 4
  %42 = add nuw nsw i32 %37, 8
  %43 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %6, i64 0, i32 1, i32 4
  store i32 %42, i32* %43, align 8
  %44 = sext i32 %39 to i64
  %45 = getelementptr inbounds i8, i8* %38, i64 %44
  %46 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %6, i64 0, i32 1, i32 1
  store i8* %45, i8** %46, align 8
  %47 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %6, i64 0, i32 1, i32 2
  store i32 0, i32* %47, align 8
  %48 = bitcast i8* %38 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = and i32 %49, 255
  store i32 8, i32* %47, align 8
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %54, label %52

52:                                               ; preds = %30
  %53 = bitcast %struct.AVCodecContext* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %53, i32 16, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0)) #7
  br label %101

54:                                               ; preds = %30
  %55 = call fastcc i32 @vorbis_parse_id_hdr(%struct.vorbis_context_s* %6)
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %54
  %58 = bitcast %struct.AVCodecContext* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %58, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0)) #7
  call fastcc void @vorbis_free(%struct.vorbis_context_s* %6)
  br label %101

59:                                               ; preds = %54
  %60 = load i8*, i8** %13, align 16
  %61 = load i32, i32* %18, align 4
  %62 = shl nsw i32 %61, 3
  %63 = icmp ult i32 %62, 2147483135
  %64 = icmp ne i8* %60, null
  %65 = and i1 %64, %63
  %66 = select i1 %65, i32 %62, i32 0
  %67 = select i1 %65, i8* %60, i8* null
  %68 = ashr exact i32 %66, 3
  store i8* %67, i8** %40, align 8
  store i32 %66, i32* %41, align 4
  %69 = add nuw nsw i32 %66, 8
  store i32 %69, i32* %43, align 8
  %70 = sext i32 %68 to i64
  %71 = getelementptr inbounds i8, i8* %67, i64 %70
  store i8* %71, i8** %46, align 8
  store i32 0, i32* %47, align 8
  %72 = bitcast i8* %67 to i32*
  %73 = load i32, i32* %72, align 1
  %74 = and i32 %73, 255
  store i32 8, i32* %47, align 8
  %75 = icmp eq i32 %74, 5
  br i1 %75, label %78, label %76

76:                                               ; preds = %59
  %77 = bitcast %struct.AVCodecContext* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %77, i32 16, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0)) #7
  call fastcc void @vorbis_free(%struct.vorbis_context_s* %6)
  br label %101

78:                                               ; preds = %59
  %79 = call fastcc i32 @vorbis_parse_setup_hdr(%struct.vorbis_context_s* %6)
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %83, label %81

81:                                               ; preds = %78
  %82 = bitcast %struct.AVCodecContext* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %82, i32 16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #7
  call fastcc void @vorbis_free(%struct.vorbis_context_s* %6)
  br label %101

83:                                               ; preds = %78
  %84 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %6, i64 0, i32 7
  %85 = load i8, i8* %84, align 8
  %86 = icmp ugt i8 %85, 8
  br i1 %86, label %92, label %87

87:                                               ; preds = %83
  %88 = zext i8 %85 to i64
  %89 = add nsw i64 %88, -1
  %90 = getelementptr inbounds [9 x i64], [9 x i64]* @ff_vorbis_channel_layouts, i64 0, i64 %89
  %91 = load i64, i64* %90, align 8
  br label %92

92:                                               ; preds = %83, %87
  %93 = phi i64 [ %91, %87 ], [ 0, %83 ]
  %94 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 89
  store i64 %93, i64* %94, align 8
  %95 = load i8, i8* %84, align 8
  %96 = zext i8 %95 to i32
  %97 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 83
  store i32 %96, i32* %97, align 4
  %98 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %6, i64 0, i32 8
  %99 = load i32, i32* %98, align 4
  %100 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 82
  store i32 %99, i32* %100, align 8
  br label %101

101:                                              ; preds = %92, %81, %76, %57, %52, %28, %23
  %102 = phi i32 [ %26, %28 ], [ -1094995529, %52 ], [ %55, %57 ], [ -1094995529, %76 ], [ %79, %81 ], [ 0, %92 ], [ -1094995529, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #7
  ret i32 %102
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vorbis_decode_frame(%struct.AVCodecContext*, i8*, i32* nocapture, %struct.AVPacket* nocapture readonly) #3 {
  %5 = alloca [255 x i8], align 16
  %6 = alloca [255 x i8], align 16
  %7 = alloca [255 x i8], align 16
  %8 = alloca [255 x float*], align 16
  %9 = bitcast [255 x float*]* %8 to i8*
  %10 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %15 = bitcast i8** %14 to %struct.vorbis_context_s**
  %16 = load %struct.vorbis_context_s*, %struct.vorbis_context_s** %15, align 8
  %17 = bitcast i8* %1 to %struct.AVFrame*
  %18 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1
  call void @llvm.lifetime.start.p0i8(i64 2040, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 2040, i1 false)
  %19 = load i8, i8* %11, align 1
  %20 = icmp eq i8 %19, 1
  %21 = icmp sgt i32 %13, 7
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %66

23:                                               ; preds = %4
  %24 = getelementptr inbounds i8, i8* %11, i64 1
  %25 = add nsw i32 %13, -1
  %26 = icmp ugt i32 %25, 268435455
  %27 = shl i32 %25, 3
  %28 = select i1 %26, i32 -8, i32 %27
  %29 = icmp ult i32 %28, 2147483135
  %30 = icmp ne i8* %24, null
  %31 = and i1 %30, %29
  %32 = select i1 %31, i32 %28, i32 0
  %33 = select i1 %31, i8* %24, i8* null
  %34 = ashr exact i32 %32, 3
  %35 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %18, i64 0, i32 0
  store i8* %33, i8** %35, align 8
  %36 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1, i32 3
  store i32 %32, i32* %36, align 4
  %37 = add nsw i32 %32, 8
  %38 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1, i32 4
  store i32 %37, i32* %38, align 8
  %39 = sext i32 %34 to i64
  %40 = getelementptr inbounds i8, i8* %33, i64 %39
  %41 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1, i32 1
  store i8* %40, i8** %41, align 8
  %42 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1, i32 2
  store i32 0, i32* %42, align 8
  br i1 %31, label %43, label %2501

43:                                               ; preds = %23
  tail call fastcc void @vorbis_free(%struct.vorbis_context_s* %16)
  %44 = tail call fastcc i32 @vorbis_parse_id_hdr(%struct.vorbis_context_s* %16)
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %43
  %47 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %47, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0)) #7
  tail call fastcc void @vorbis_free(%struct.vorbis_context_s* %16)
  br label %2501

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 7
  %50 = load i8, i8* %49, align 8
  %51 = icmp ugt i8 %50, 8
  br i1 %51, label %57, label %52

52:                                               ; preds = %48
  %53 = zext i8 %50 to i64
  %54 = add nsw i64 %53, -1
  %55 = getelementptr inbounds [9 x i64], [9 x i64]* @ff_vorbis_channel_layouts, i64 0, i64 %54
  %56 = load i64, i64* %55, align 8
  br label %57

57:                                               ; preds = %48, %52
  %58 = phi i64 [ %56, %52 ], [ 0, %48 ]
  %59 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 89
  store i64 %58, i64* %59, align 8
  %60 = load i8, i8* %49, align 8
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 83
  store i32 %61, i32* %62, align 4
  %63 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 8
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 82
  store i32 %64, i32* %65, align 8
  br label %2501

66:                                               ; preds = %4
  %67 = icmp eq i8 %19, 3
  %68 = and i1 %21, %67
  br i1 %68, label %69, label %71

69:                                               ; preds = %66
  %70 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %70, i32 48, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.52, i64 0, i64 0)) #7
  br label %2501

71:                                               ; preds = %66
  %72 = icmp eq i8 %19, 5
  %73 = and i1 %21, %72
  %74 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 26
  %75 = load float*, float** %74, align 8
  %76 = icmp eq float* %75, null
  br i1 %73, label %77, label %107

77:                                               ; preds = %71
  br i1 %76, label %113, label %78

78:                                               ; preds = %77
  %79 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 23
  %80 = load %struct.vorbis_mode*, %struct.vorbis_mode** %79, align 8
  %81 = icmp eq %struct.vorbis_mode* %80, null
  br i1 %81, label %82, label %108

82:                                               ; preds = %78
  %83 = getelementptr inbounds i8, i8* %11, i64 1
  %84 = add nsw i32 %13, -1
  %85 = icmp ugt i32 %84, 268435455
  %86 = shl i32 %84, 3
  %87 = select i1 %85, i32 -8, i32 %86
  %88 = icmp ult i32 %87, 2147483135
  %89 = icmp ne i8* %83, null
  %90 = and i1 %89, %88
  %91 = select i1 %90, i32 %87, i32 0
  %92 = select i1 %90, i8* %83, i8* null
  %93 = ashr exact i32 %91, 3
  %94 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %18, i64 0, i32 0
  store i8* %92, i8** %94, align 8
  %95 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1, i32 3
  store i32 %91, i32* %95, align 4
  %96 = add nsw i32 %91, 8
  %97 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1, i32 4
  store i32 %96, i32* %97, align 8
  %98 = sext i32 %93 to i64
  %99 = getelementptr inbounds i8, i8* %92, i64 %98
  %100 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1, i32 1
  store i8* %99, i8** %100, align 8
  %101 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1, i32 2
  store i32 0, i32* %101, align 8
  br i1 %90, label %102, label %2501

102:                                              ; preds = %82
  %103 = tail call fastcc i32 @vorbis_parse_setup_hdr(%struct.vorbis_context_s* %16)
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %2501, label %105

105:                                              ; preds = %102
  %106 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %106, i32 16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #7
  tail call fastcc void @vorbis_free(%struct.vorbis_context_s* %16)
  br label %2501

107:                                              ; preds = %71
  br i1 %76, label %113, label %108

108:                                              ; preds = %78, %107
  %109 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 26
  %110 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 23
  %111 = load %struct.vorbis_mode*, %struct.vorbis_mode** %110, align 8
  %112 = icmp eq %struct.vorbis_mode* %111, null
  br i1 %112, label %113, label %115

113:                                              ; preds = %77, %108, %107
  %114 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %114, i32 16, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.53, i64 0, i64 0)) #7
  br label %2501

115:                                              ; preds = %108
  %116 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 12, i64 1
  %117 = load i32, i32* %116, align 4
  %118 = lshr i32 %117, 1
  %119 = getelementptr inbounds i8, i8* %1, i64 112
  %120 = bitcast i8* %119 to i32*
  store i32 %118, i32* %120, align 8
  %121 = tail call i32 @ff_get_buffer(%struct.AVCodecContext* %0, %struct.AVFrame* %17, i32 0) #7
  %122 = icmp slt i32 %121, 0
  br i1 %122, label %2501, label %123

123:                                              ; preds = %115
  %124 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 7
  %125 = load i8, i8* %124, align 8
  %126 = icmp ugt i8 %125, 8
  %127 = zext i8 %125 to i32
  br i1 %126, label %142, label %128

128:                                              ; preds = %123
  %129 = icmp eq i8 %125, 0
  br i1 %129, label %206, label %130

130:                                              ; preds = %128
  %131 = add nsw i32 %127, -1
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i8, i8* %1, i64 96
  %134 = bitcast i8* %133 to i8***
  %135 = load i8**, i8*** %134, align 8
  %136 = zext i8 %125 to i64
  %137 = add nsw i64 %136, -1
  %138 = and i64 %136, 3
  %139 = icmp ult i64 %137, 3
  br i1 %139, label %189, label %140

140:                                              ; preds = %130
  %141 = sub nsw i64 %136, %138
  br label %148

142:                                              ; preds = %123
  %143 = getelementptr inbounds i8, i8* %1, i64 96
  %144 = bitcast i8* %143 to i8**
  %145 = load i8*, i8** %144, align 8
  %146 = zext i8 %125 to i64
  %147 = shl nuw nsw i64 %146, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %9, i8* align 8 %145, i64 %147, i1 false)
  br label %206

148:                                              ; preds = %148, %140
  %149 = phi i64 [ 0, %140 ], [ %186, %148 ]
  %150 = phi i64 [ %141, %140 ], [ %187, %148 ]
  %151 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* @ff_vorbis_channel_layout_offsets, i64 0, i64 %132, i64 %149
  %152 = load i8, i8* %151, align 4
  %153 = getelementptr inbounds i8*, i8** %135, i64 %149
  %154 = bitcast i8** %153 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = zext i8 %152 to i64
  %157 = getelementptr inbounds [255 x float*], [255 x float*]* %8, i64 0, i64 %156
  %158 = bitcast float** %157 to i64*
  store i64 %155, i64* %158, align 8
  %159 = or i64 %149, 1
  %160 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* @ff_vorbis_channel_layout_offsets, i64 0, i64 %132, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = getelementptr inbounds i8*, i8** %135, i64 %159
  %163 = bitcast i8** %162 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = zext i8 %161 to i64
  %166 = getelementptr inbounds [255 x float*], [255 x float*]* %8, i64 0, i64 %165
  %167 = bitcast float** %166 to i64*
  store i64 %164, i64* %167, align 8
  %168 = or i64 %149, 2
  %169 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* @ff_vorbis_channel_layout_offsets, i64 0, i64 %132, i64 %168
  %170 = load i8, i8* %169, align 2
  %171 = getelementptr inbounds i8*, i8** %135, i64 %168
  %172 = bitcast i8** %171 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = zext i8 %170 to i64
  %175 = getelementptr inbounds [255 x float*], [255 x float*]* %8, i64 0, i64 %174
  %176 = bitcast float** %175 to i64*
  store i64 %173, i64* %176, align 8
  %177 = or i64 %149, 3
  %178 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* @ff_vorbis_channel_layout_offsets, i64 0, i64 %132, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = getelementptr inbounds i8*, i8** %135, i64 %177
  %181 = bitcast i8** %180 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = zext i8 %179 to i64
  %184 = getelementptr inbounds [255 x float*], [255 x float*]* %8, i64 0, i64 %183
  %185 = bitcast float** %184 to i64*
  store i64 %182, i64* %185, align 8
  %186 = add nuw nsw i64 %149, 4
  %187 = add i64 %150, -4
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %148

189:                                              ; preds = %148, %130
  %190 = phi i64 [ 0, %130 ], [ %186, %148 ]
  %191 = icmp eq i64 %138, 0
  br i1 %191, label %206, label %192

192:                                              ; preds = %189, %192
  %193 = phi i64 [ %203, %192 ], [ %190, %189 ]
  %194 = phi i64 [ %204, %192 ], [ %138, %189 ]
  %195 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* @ff_vorbis_channel_layout_offsets, i64 0, i64 %132, i64 %193
  %196 = load i8, i8* %195, align 1
  %197 = getelementptr inbounds i8*, i8** %135, i64 %193
  %198 = bitcast i8** %197 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = zext i8 %196 to i64
  %201 = getelementptr inbounds [255 x float*], [255 x float*]* %8, i64 0, i64 %200
  %202 = bitcast float** %201 to i64*
  store i64 %199, i64* %202, align 8
  %203 = add nuw nsw i64 %193, 1
  %204 = add i64 %194, -1
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %206, label %192, !llvm.loop !2

206:                                              ; preds = %189, %192, %128, %142
  %207 = icmp ugt i32 %13, 268435455
  %208 = shl i32 %13, 3
  %209 = select i1 %207, i32 -8, i32 %208
  %210 = icmp ult i32 %209, 2147483135
  %211 = icmp ne i8* %11, null
  %212 = and i1 %211, %210
  %213 = select i1 %212, i32 %209, i32 0
  %214 = select i1 %212, i8* %11, i8* null
  %215 = ashr exact i32 %213, 3
  %216 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %18, i64 0, i32 0
  store i8* %214, i8** %216, align 8
  %217 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1, i32 3
  store i32 %213, i32* %217, align 4
  %218 = add nsw i32 %213, 8
  %219 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1, i32 4
  store i32 %218, i32* %219, align 8
  %220 = sext i32 %215 to i64
  %221 = getelementptr inbounds i8, i8* %214, i64 %220
  %222 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1, i32 1
  store i8* %221, i8** %222, align 8
  %223 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1, i32 2
  store i32 0, i32* %223, align 8
  br i1 %212, label %224, label %2501

224:                                              ; preds = %206
  %225 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 25
  %226 = load i8, i8* %225, align 1
  %227 = sext i8 %226 to i32
  %228 = getelementptr inbounds [255 x i8], [255 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 255, i8* nonnull %228) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %228, i8 -86, i64 255, i1 false) #7
  %229 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 255, i8* nonnull %229) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %229, i8 -86, i64 255, i1 false) #7
  %230 = load float*, float** %109, align 8
  %231 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 255, i8* nonnull %231) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %231, i8 -86, i64 255, i1 false) #7
  %232 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 1, i32 0
  %233 = load i8, i8* %214, align 1
  %234 = icmp sgt i32 %218, 0
  %235 = zext i1 %234 to i32
  store i32 %235, i32* %223, align 8
  %236 = and i8 %233, 1
  %237 = icmp eq i8 %236, 0
  br i1 %237, label %241, label %238

238:                                              ; preds = %224
  %239 = bitcast %struct.vorbis_context_s* %16 to i8**
  %240 = load i8*, i8** %239, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %240, i32 16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.54, i64 0, i64 0)) #7
  br label %2492

241:                                              ; preds = %224
  %242 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 22
  %243 = load i8, i8* %242, align 8
  %244 = icmp eq i8 %243, 1
  br i1 %244, label %266, label %245

245:                                              ; preds = %241
  %246 = zext i8 %243 to i32
  %247 = shl nuw nsw i32 %246, 1
  %248 = add nsw i32 %247, -2
  %249 = or i32 %248, 1
  %250 = tail call i32 @llvm.ctlz.i32(i32 %249, i1 true) #7, !range !4
  %251 = xor i32 %250, 31
  %252 = bitcast i8* %214 to i32*
  %253 = load i32, i32* %252, align 1
  %254 = lshr i32 %253, %235
  %255 = sub nuw nsw i32 32, %251
  %256 = lshr i32 -1, %255
  %257 = and i32 %254, %256
  %258 = add nuw nsw i32 %251, %235
  %259 = icmp ugt i32 %218, %258
  %260 = select i1 %259, i32 %258, i32 %218
  store i32 %260, i32* %223, align 8
  %261 = icmp ult i32 %257, %246
  br i1 %261, label %266, label %262

262:                                              ; preds = %245
  %263 = bitcast %struct.vorbis_context_s* %16 to i8**
  %264 = load i8*, i8** %263, align 8
  %265 = add nsw i32 %246, -1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %264, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @idx_err_str, i64 0, i64 0), i32 %257, i32 %265, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.31, i64 0, i64 0), i32 1629) #7
  br label %2492

266:                                              ; preds = %245, %241
  %267 = phi i32 [ %260, %245 ], [ %235, %241 ]
  %268 = phi i32 [ %257, %245 ], [ 0, %241 ]
  %269 = trunc i32 %268 to i8
  %270 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 24
  store i8 %269, i8* %270, align 8
  %271 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 21
  %272 = load %struct.vorbis_mapping*, %struct.vorbis_mapping** %271, align 8
  %273 = load %struct.vorbis_mode*, %struct.vorbis_mode** %110, align 8
  %274 = zext i32 %268 to i64
  %275 = getelementptr inbounds %struct.vorbis_mode, %struct.vorbis_mode* %273, i64 %274, i32 3
  %276 = load i8, i8* %275, align 2
  %277 = zext i8 %276 to i64
  %278 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %272, i64 %277
  %279 = getelementptr inbounds %struct.vorbis_mode, %struct.vorbis_mode* %273, i64 %274, i32 0
  %280 = load i8, i8* %279, align 2
  %281 = zext i8 %280 to i32
  %282 = zext i8 %280 to i64
  %283 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 12, i64 %282
  %284 = load i32, i32* %283, align 4
  %285 = lshr i32 %284, 1
  %286 = icmp eq i8 %280, 0
  br i1 %286, label %302, label %287

287:                                              ; preds = %266
  %288 = lshr i32 %267, 3
  %289 = zext i32 %288 to i64
  %290 = getelementptr inbounds i8, i8* %214, i64 %289
  %291 = bitcast i8* %290 to i32*
  %292 = load i32, i32* %291, align 1
  %293 = and i32 %267, 7
  %294 = lshr i32 %292, %293
  %295 = add i32 %267, 2
  %296 = icmp ugt i32 %218, %295
  %297 = select i1 %296, i32 %295, i32 %218
  store i32 %297, i32* %223, align 8
  %298 = icmp slt i8 %226, 0
  %299 = lshr i32 %294, 1
  %300 = and i32 %299, 1
  %301 = select i1 %298, i32 %300, i32 %227
  br label %306

302:                                              ; preds = %266
  %303 = icmp sgt i8 %226, 0
  %304 = select i1 %303, i8 %226, i8 0
  %305 = zext i8 %304 to i32
  br label %306

306:                                              ; preds = %302, %287
  %307 = phi i32 [ %301, %287 ], [ %305, %302 ]
  %308 = bitcast float* %230 to i8*
  %309 = zext i8 %125 to i64
  %310 = shl nuw nsw i64 %309, 2
  %311 = zext i32 %285 to i64
  %312 = mul nuw nsw i64 %310, %311
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %308, i8 0, i64 %312, i1 false) #7
  %313 = load i8, i8* %124, align 8
  %314 = icmp eq i8 %313, 0
  br i1 %314, label %365, label %315

315:                                              ; preds = %306
  %316 = shl nuw nsw i64 %311, 2
  br label %324

317:                                              ; preds = %324
  %318 = icmp eq i8 %330, 0
  br i1 %318, label %365, label %319

319:                                              ; preds = %317
  %320 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %278, i64 0, i32 0
  %321 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 17
  %322 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %272, i64 %277, i32 5, i64 0
  %323 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %272, i64 %277, i32 4
  br label %333

324:                                              ; preds = %324, %315
  %325 = phi i64 [ 0, %315 ], [ %329, %324 ]
  %326 = getelementptr inbounds [255 x float*], [255 x float*]* %8, i64 0, i64 %325
  %327 = bitcast float** %326 to i8**
  %328 = load i8*, i8** %327, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %328, i8 0, i64 %316, i1 false) #7
  %329 = add nuw nsw i64 %325, 1
  %330 = load i8, i8* %124, align 8
  %331 = zext i8 %330 to i64
  %332 = icmp ult i64 %329, %331
  br i1 %332, label %324, label %317

333:                                              ; preds = %358, %319
  %334 = phi i64 [ 0, %319 ], [ %361, %358 ]
  %335 = load i8, i8* %320, align 8
  %336 = icmp ugt i8 %335, 1
  %337 = load %struct.vorbis_floor*, %struct.vorbis_floor** %321, align 8
  br i1 %336, label %338, label %344

338:                                              ; preds = %333
  %339 = load i8*, i8** %323, align 8
  %340 = getelementptr inbounds i8, i8* %339, i64 %334
  %341 = load i8, i8* %340, align 1
  %342 = zext i8 %341 to i64
  %343 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %272, i64 %277, i32 5, i64 %342
  br label %344

344:                                              ; preds = %338, %333
  %345 = phi i8* [ %343, %338 ], [ %322, %333 ]
  %346 = load i8, i8* %345, align 1
  %347 = zext i8 %346 to i64
  %348 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %337, i64 %347, i32 1
  %349 = load i32 (%struct.vorbis_context_s*, %union.vorbis_floor_u*, float*)*, i32 (%struct.vorbis_context_s*, %union.vorbis_floor_u*, float*)** %348, align 8
  %350 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %337, i64 %347, i32 2
  %351 = getelementptr inbounds [255 x float*], [255 x float*]* %8, i64 0, i64 %334
  %352 = load float*, float** %351, align 8
  %353 = tail call i32 %349(%struct.vorbis_context_s* %16, %union.vorbis_floor_u* %350, float* %352) #7
  %354 = icmp slt i32 %353, 0
  br i1 %354, label %355, label %358

355:                                              ; preds = %344
  %356 = bitcast %struct.vorbis_context_s* %16 to i8**
  %357 = load i8*, i8** %356, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %357, i32 16, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.56, i64 0, i64 0)) #7
  br label %2492

358:                                              ; preds = %344
  %359 = trunc i32 %353 to i8
  %360 = getelementptr inbounds [255 x i8], [255 x i8]* %5, i64 0, i64 %334
  store i8 %359, i8* %360, align 1
  %361 = add nuw nsw i64 %334, 1
  %362 = load i8, i8* %124, align 8
  %363 = zext i8 %362 to i64
  %364 = icmp ult i64 %361, %363
  br i1 %364, label %333, label %365

365:                                              ; preds = %358, %317, %306
  %366 = phi i8 [ 0, %317 ], [ 0, %306 ], [ %362, %358 ]
  %367 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %272, i64 %277, i32 1
  %368 = load i16, i16* %367, align 2
  %369 = icmp eq i16 %368, 0
  br i1 %369, label %396, label %370

370:                                              ; preds = %365
  %371 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %272, i64 %277, i32 2
  %372 = load i8*, i8** %371, align 8
  %373 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %272, i64 %277, i32 3
  %374 = load i8*, i8** %373, align 8
  %375 = zext i16 %368 to i64
  %376 = and i64 %375, 1
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %393, label %378

378:                                              ; preds = %370
  %379 = add nsw i64 %375, -1
  %380 = getelementptr inbounds i8, i8* %372, i64 %379
  %381 = load i8, i8* %380, align 1
  %382 = zext i8 %381 to i64
  %383 = getelementptr inbounds [255 x i8], [255 x i8]* %5, i64 0, i64 %382
  %384 = load i8, i8* %383, align 1
  %385 = getelementptr inbounds i8, i8* %374, i64 %379
  %386 = load i8, i8* %385, align 1
  %387 = zext i8 %386 to i64
  %388 = getelementptr inbounds [255 x i8], [255 x i8]* %5, i64 0, i64 %387
  %389 = load i8, i8* %388, align 1
  %390 = and i8 %389, %384
  %391 = icmp eq i8 %390, 0
  br i1 %391, label %392, label %393

392:                                              ; preds = %378
  store i8 0, i8* %383, align 1
  store i8 0, i8* %388, align 1
  br label %393

393:                                              ; preds = %378, %392, %370
  %394 = phi i64 [ %375, %370 ], [ %379, %392 ], [ %379, %378 ]
  %395 = icmp eq i16 %368, 1
  br i1 %395, label %396, label %404

396:                                              ; preds = %393, %2504, %365
  %397 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %278, i64 0, i32 0
  %398 = load i8, i8* %397, align 8
  %399 = icmp eq i8 %398, 0
  br i1 %399, label %2336, label %400

400:                                              ; preds = %396
  %401 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %272, i64 %277, i32 4
  %402 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 19
  %403 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 15
  br label %434

404:                                              ; preds = %393, %2504
  %405 = phi i64 [ %421, %2504 ], [ %394, %393 ]
  %406 = add nsw i64 %405, -1
  %407 = getelementptr inbounds i8, i8* %372, i64 %406
  %408 = load i8, i8* %407, align 1
  %409 = zext i8 %408 to i64
  %410 = getelementptr inbounds [255 x i8], [255 x i8]* %5, i64 0, i64 %409
  %411 = load i8, i8* %410, align 1
  %412 = getelementptr inbounds i8, i8* %374, i64 %406
  %413 = load i8, i8* %412, align 1
  %414 = zext i8 %413 to i64
  %415 = getelementptr inbounds [255 x i8], [255 x i8]* %5, i64 0, i64 %414
  %416 = load i8, i8* %415, align 1
  %417 = and i8 %416, %411
  %418 = icmp eq i8 %417, 0
  br i1 %418, label %419, label %420

419:                                              ; preds = %404
  store i8 0, i8* %410, align 1
  store i8 0, i8* %415, align 1
  br label %420

420:                                              ; preds = %419, %404
  %421 = add nsw i64 %405, -2
  %422 = getelementptr inbounds i8, i8* %372, i64 %421
  %423 = load i8, i8* %422, align 1
  %424 = zext i8 %423 to i64
  %425 = getelementptr inbounds [255 x i8], [255 x i8]* %5, i64 0, i64 %424
  %426 = load i8, i8* %425, align 1
  %427 = getelementptr inbounds i8, i8* %374, i64 %421
  %428 = load i8, i8* %427, align 1
  %429 = zext i8 %428 to i64
  %430 = getelementptr inbounds [255 x i8], [255 x i8]* %5, i64 0, i64 %429
  %431 = load i8, i8* %430, align 1
  %432 = and i8 %431, %426
  %433 = icmp eq i8 %432, 0
  br i1 %433, label %2503, label %2504

434:                                              ; preds = %2331, %400
  %435 = phi i8 [ %366, %400 ], [ %2335, %2331 ]
  %436 = phi i64 [ 0, %400 ], [ %2327, %2331 ]
  %437 = phi i8 [ %398, %400 ], [ %2328, %2331 ]
  %438 = phi i32 [ %127, %400 ], [ %2326, %2331 ]
  %439 = phi i32 [ 0, %400 ], [ %472, %2331 ]
  %440 = phi float* [ %230, %400 ], [ %2334, %2331 ]
  %441 = icmp eq i8 %435, 0
  br i1 %441, label %471, label %442

442:                                              ; preds = %434
  %443 = icmp eq i8 %437, 1
  %444 = zext i8 %435 to i64
  br label %445

445:                                              ; preds = %466, %442
  %446 = phi i64 [ 0, %442 ], [ %469, %466 ]
  %447 = phi i32 [ 0, %442 ], [ %468, %466 ]
  %448 = phi i32 [ %439, %442 ], [ %467, %466 ]
  br i1 %443, label %455, label %449

449:                                              ; preds = %445
  %450 = load i8*, i8** %401, align 8
  %451 = getelementptr inbounds i8, i8* %450, i64 %446
  %452 = load i8, i8* %451, align 1
  %453 = zext i8 %452 to i64
  %454 = icmp eq i64 %436, %453
  br i1 %454, label %455, label %466

455:                                              ; preds = %449, %445
  %456 = trunc i32 %448 to i8
  %457 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 %446
  store i8 %456, i8* %457, align 1
  %458 = getelementptr inbounds [255 x i8], [255 x i8]* %5, i64 0, i64 %446
  %459 = load i8, i8* %458, align 1
  %460 = icmp ne i8 %459, 0
  %461 = zext i32 %447 to i64
  %462 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 %461
  %463 = zext i1 %460 to i8
  store i8 %463, i8* %462, align 1
  %464 = add i32 %447, 1
  %465 = add i32 %448, 1
  br label %466

466:                                              ; preds = %455, %449
  %467 = phi i32 [ %465, %455 ], [ %448, %449 ]
  %468 = phi i32 [ %464, %455 ], [ %447, %449 ]
  %469 = add nuw nsw i64 %446, 1
  %470 = icmp eq i64 %469, %444
  br i1 %470, label %471, label %445

471:                                              ; preds = %466, %434
  %472 = phi i32 [ %439, %434 ], [ %467, %466 ]
  %473 = phi i32 [ 0, %434 ], [ %468, %466 ]
  %474 = load %struct.vorbis_residue*, %struct.vorbis_residue** %402, align 8
  %475 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %272, i64 %277, i32 6, i64 %436
  %476 = load i8, i8* %475, align 1
  %477 = zext i8 %476 to i64
  %478 = icmp ult i32 %438, %473
  br i1 %478, label %479, label %482

479:                                              ; preds = %471
  %480 = bitcast %struct.vorbis_context_s* %16 to i8**
  %481 = load i8*, i8** %480, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %481, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.57, i64 0, i64 0)) #7
  br label %2492

482:                                              ; preds = %471
  %483 = icmp eq i32 %473, 0
  br i1 %483, label %2325, label %484

484:                                              ; preds = %482
  %485 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 0
  %486 = load i16, i16* %485, align 8
  switch i16 %486, label %2322 [
    i16 2, label %487
    i16 1, label %1337
    i16 0, label %1830
  ]

487:                                              ; preds = %484
  %488 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %403, align 8
  %489 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 5
  %490 = load i8, i8* %489, align 1
  %491 = zext i8 %490 to i64
  %492 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %488, i64 %491, i32 0
  %493 = load i8, i8* %492, align 8
  %494 = zext i8 %493 to i32
  %495 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 9
  %496 = load i8*, i8** %495, align 8
  %497 = add i32 %473, -1
  %498 = mul i32 %497, %285
  %499 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 8
  %500 = load i16, i16* %499, align 4
  %501 = zext i16 %500 to i32
  %502 = icmp ugt i32 %473, 1
  br i1 %502, label %505, label %503

503:                                              ; preds = %487
  %504 = load i8, i8* %229, align 16
  br label %551

505:                                              ; preds = %487
  %506 = zext i32 %473 to i64
  %507 = load i8, i8* %229, align 16
  %508 = add nsw i64 %506, -1
  %509 = add nsw i64 %506, -2
  %510 = and i64 %508, 3
  %511 = icmp ult i64 %509, 3
  br i1 %511, label %536, label %512

512:                                              ; preds = %505
  %513 = sub nsw i64 %508, %510
  br label %514

514:                                              ; preds = %514, %512
  %515 = phi i8 [ %507, %512 ], [ %532, %514 ]
  %516 = phi i64 [ 1, %512 ], [ %533, %514 ]
  %517 = phi i64 [ %513, %512 ], [ %534, %514 ]
  %518 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 %516
  %519 = load i8, i8* %518, align 1
  %520 = and i8 %519, %515
  store i8 %520, i8* %229, align 16
  %521 = add nuw nsw i64 %516, 1
  %522 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 %521
  %523 = load i8, i8* %522, align 1
  %524 = and i8 %523, %520
  store i8 %524, i8* %229, align 16
  %525 = add nuw nsw i64 %516, 2
  %526 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 %525
  %527 = load i8, i8* %526, align 1
  %528 = and i8 %527, %524
  store i8 %528, i8* %229, align 16
  %529 = add nuw nsw i64 %516, 3
  %530 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 %529
  %531 = load i8, i8* %530, align 1
  %532 = and i8 %531, %528
  store i8 %532, i8* %229, align 16
  %533 = add nuw nsw i64 %516, 4
  %534 = add i64 %517, -4
  %535 = icmp eq i64 %534, 0
  br i1 %535, label %536, label %514

536:                                              ; preds = %514, %505
  %537 = phi i8 [ undef, %505 ], [ %532, %514 ]
  %538 = phi i8 [ %507, %505 ], [ %532, %514 ]
  %539 = phi i64 [ 1, %505 ], [ %533, %514 ]
  %540 = icmp eq i64 %510, 0
  br i1 %540, label %551, label %541

541:                                              ; preds = %536, %541
  %542 = phi i8 [ %547, %541 ], [ %538, %536 ]
  %543 = phi i64 [ %548, %541 ], [ %539, %536 ]
  %544 = phi i64 [ %549, %541 ], [ %510, %536 ]
  %545 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 %543
  %546 = load i8, i8* %545, align 1
  %547 = and i8 %546, %542
  store i8 %547, i8* %229, align 16
  %548 = add nuw nsw i64 %543, 1
  %549 = add i64 %544, -1
  %550 = icmp eq i64 %549, 0
  br i1 %550, label %551, label %541, !llvm.loop !5

551:                                              ; preds = %536, %541, %503
  %552 = phi i8 [ %504, %503 ], [ %537, %536 ], [ %547, %541 ]
  %553 = icmp eq i8 %552, 0
  br i1 %553, label %554, label %2325

554:                                              ; preds = %551
  %555 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 2
  %556 = load i32, i32* %555, align 8
  %557 = udiv i32 %556, %473
  %558 = add i32 %557, %498
  %559 = mul i32 %438, %285
  %560 = icmp ugt i32 %558, %559
  br i1 %560, label %561, label %572

561:                                              ; preds = %554
  %562 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 3
  %563 = load i32, i32* %562, align 4
  %564 = udiv i32 %563, %473
  %565 = add i32 %564, %559
  %566 = icmp ugt i32 %558, %565
  br i1 %566, label %569, label %567

567:                                              ; preds = %561
  %568 = add nsw i32 %501, -1
  br label %572

569:                                              ; preds = %561
  %570 = bitcast %struct.vorbis_context_s* %16 to i8**
  %571 = load i8*, i8** %570, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %571, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.59, i64 0, i64 0)) #7
  br label %2492

572:                                              ; preds = %567, %554
  %573 = phi i32 [ %568, %567 ], [ %501, %554 ]
  %574 = phi i1 [ false, %567 ], [ true, %554 ]
  %575 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 7
  %576 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 1
  %577 = icmp sgt i32 %573, 0
  %578 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 4
  %579 = sext i32 %573 to i64
  %580 = icmp ne i8 %493, 0
  %581 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 3
  %582 = icmp eq i32 %473, 2
  %583 = icmp eq i32 %473, 1
  %584 = zext i32 %473 to i64
  %585 = getelementptr inbounds [257 x i32], [257 x i32]* @ff_inverse, i64 0, i64 %584
  br label %586

586:                                              ; preds = %1332, %572
  %587 = phi i64 [ 0, %572 ], [ %1333, %1332 ]
  br i1 %577, label %588, label %1245

588:                                              ; preds = %586
  %589 = load i32, i32* %576, align 4
  %590 = icmp eq i64 %587, 0
  br label %597

591:                                              ; preds = %1237
  %592 = trunc i64 %1238 to i32
  br label %593

593:                                              ; preds = %731, %591
  %594 = phi i32 [ %599, %731 ], [ %1240, %591 ]
  %595 = phi i32 [ %598, %731 ], [ %592, %591 ]
  %596 = icmp slt i32 %595, %573
  br i1 %596, label %597, label %1245

597:                                              ; preds = %593, %588
  %598 = phi i32 [ 0, %588 ], [ %595, %593 ]
  %599 = phi i32 [ %589, %588 ], [ %594, %593 ]
  br i1 %590, label %600, label %731

600:                                              ; preds = %597
  %601 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %403, align 8
  %602 = load i8, i8* %489, align 1
  %603 = zext i8 %602 to i64
  %604 = load i8, i8* %578, align 8
  %605 = zext i8 %604 to i64
  %606 = getelementptr inbounds [257 x i32], [257 x i32]* @ff_inverse, i64 0, i64 %605
  %607 = load i32, i32* %606, align 4
  %608 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %601, i64 %603, i32 0
  %609 = load i8, i8* %608, align 8
  %610 = zext i8 %609 to i32
  %611 = add i32 %598, -1
  %612 = add i32 %611, %610
  %613 = icmp slt i32 %612, %598
  %614 = zext i32 %607 to i64
  %615 = sext i32 %612 to i64
  %616 = sext i32 %598 to i64
  %617 = load i8, i8* %229, align 16
  %618 = icmp eq i8 %617, 0
  br i1 %618, label %619, label %731

619:                                              ; preds = %600
  %620 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %601, i64 %603, i32 5
  %621 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %601, i64 %603, i32 3, i32 1
  %622 = load [2 x i16]*, [2 x i16]** %621, align 8
  %623 = load i32, i32* %620, align 8
  %624 = load i32, i32* %223, align 8
  %625 = load i32, i32* %219, align 8
  %626 = load i8*, i8** %232, align 8
  %627 = lshr i32 %624, 3
  %628 = zext i32 %627 to i64
  %629 = getelementptr inbounds i8, i8* %626, i64 %628
  %630 = bitcast i8* %629 to i32*
  %631 = load i32, i32* %630, align 1
  %632 = and i32 %624, 7
  %633 = lshr i32 %631, %632
  %634 = sub i32 32, %623
  %635 = lshr i32 -1, %634
  %636 = and i32 %633, %635
  %637 = zext i32 %636 to i64
  %638 = getelementptr inbounds [2 x i16], [2 x i16]* %622, i64 %637, i64 0
  %639 = load i16, i16* %638, align 2
  %640 = sext i16 %639 to i32
  %641 = getelementptr inbounds [2 x i16], [2 x i16]* %622, i64 %637, i64 1
  %642 = load i16, i16* %641, align 2
  %643 = sext i16 %642 to i32
  %644 = icmp slt i16 %642, 0
  br i1 %644, label %645, label %690

645:                                              ; preds = %619
  %646 = add i32 %624, %623
  %647 = icmp ugt i32 %625, %646
  %648 = select i1 %647, i32 %646, i32 %625
  %649 = lshr i32 %648, 3
  %650 = zext i32 %649 to i64
  %651 = getelementptr inbounds i8, i8* %626, i64 %650
  %652 = bitcast i8* %651 to i32*
  %653 = load i32, i32* %652, align 1
  %654 = and i32 %648, 7
  %655 = lshr i32 %653, %654
  %656 = add nsw i32 %643, 32
  %657 = lshr i32 -1, %656
  %658 = and i32 %655, %657
  %659 = add i32 %658, %640
  %660 = zext i32 %659 to i64
  %661 = getelementptr inbounds [2 x i16], [2 x i16]* %622, i64 %660, i64 0
  %662 = load i16, i16* %661, align 2
  %663 = sext i16 %662 to i32
  %664 = getelementptr inbounds [2 x i16], [2 x i16]* %622, i64 %660, i64 1
  %665 = load i16, i16* %664, align 2
  %666 = sext i16 %665 to i32
  %667 = icmp slt i16 %665, 0
  br i1 %667, label %668, label %690

668:                                              ; preds = %645
  %669 = sub i32 %648, %643
  %670 = icmp ugt i32 %625, %669
  %671 = select i1 %670, i32 %669, i32 %625
  %672 = lshr i32 %671, 3
  %673 = zext i32 %672 to i64
  %674 = getelementptr inbounds i8, i8* %626, i64 %673
  %675 = bitcast i8* %674 to i32*
  %676 = load i32, i32* %675, align 1
  %677 = and i32 %671, 7
  %678 = lshr i32 %676, %677
  %679 = add nsw i32 %666, 32
  %680 = lshr i32 -1, %679
  %681 = and i32 %678, %680
  %682 = add i32 %681, %663
  %683 = zext i32 %682 to i64
  %684 = getelementptr inbounds [2 x i16], [2 x i16]* %622, i64 %683, i64 0
  %685 = load i16, i16* %684, align 2
  %686 = sext i16 %685 to i32
  %687 = getelementptr inbounds [2 x i16], [2 x i16]* %622, i64 %683, i64 1
  %688 = load i16, i16* %687, align 2
  %689 = sext i16 %688 to i32
  br label %690

690:                                              ; preds = %668, %645, %619
  %691 = phi i32 [ %686, %668 ], [ %663, %645 ], [ %640, %619 ]
  %692 = phi i32 [ %671, %668 ], [ %648, %645 ], [ %624, %619 ]
  %693 = phi i32 [ %689, %668 ], [ %666, %645 ], [ %643, %619 ]
  %694 = add i32 %693, %692
  %695 = icmp ugt i32 %625, %694
  %696 = select i1 %695, i32 %694, i32 %625
  store i32 %696, i32* %223, align 8
  %697 = icmp slt i32 %691, 0
  br i1 %697, label %1329, label %698

698:                                              ; preds = %690
  %699 = load i8, i8* %578, align 8
  %700 = icmp eq i8 %699, 1
  br i1 %700, label %702, label %701

701:                                              ; preds = %698
  br i1 %613, label %731, label %712

702:                                              ; preds = %698
  br i1 %613, label %731, label %703

703:                                              ; preds = %702, %709
  %704 = phi i64 [ %710, %709 ], [ %615, %702 ]
  %705 = icmp slt i64 %704, %579
  br i1 %705, label %706, label %709

706:                                              ; preds = %703
  %707 = load i8*, i8** %495, align 8
  %708 = getelementptr inbounds i8, i8* %707, i64 %704
  store i8 0, i8* %708, align 1
  br label %709

709:                                              ; preds = %706, %703
  %710 = add nsw i64 %704, -1
  %711 = icmp sgt i64 %704, %616
  br i1 %711, label %703, label %731

712:                                              ; preds = %701, %728
  %713 = phi i64 [ %729, %728 ], [ %615, %701 ]
  %714 = phi i32 [ %718, %728 ], [ %691, %701 ]
  %715 = sext i32 %714 to i64
  %716 = mul nsw i64 %715, %614
  %717 = lshr i64 %716, 32
  %718 = trunc i64 %717 to i32
  %719 = icmp slt i64 %713, %579
  br i1 %719, label %720, label %728

720:                                              ; preds = %712
  %721 = load i8, i8* %578, align 8
  %722 = zext i8 %721 to i32
  %723 = mul nsw i32 %722, %718
  %724 = sub nsw i32 %714, %723
  %725 = trunc i32 %724 to i8
  %726 = load i8*, i8** %495, align 8
  %727 = getelementptr inbounds i8, i8* %726, i64 %713
  store i8 %725, i8* %727, align 1
  br label %728

728:                                              ; preds = %720, %712
  %729 = add nsw i64 %713, -1
  %730 = icmp sgt i64 %713, %616
  br i1 %730, label %712, label %731

731:                                              ; preds = %728, %709, %702, %701, %600, %597
  %732 = icmp slt i32 %598, %573
  %733 = and i1 %580, %732
  br i1 %733, label %734, label %593

734:                                              ; preds = %731
  %735 = sext i32 %598 to i64
  br label %736

736:                                              ; preds = %1237, %734
  %737 = phi i64 [ %735, %734 ], [ %1238, %1237 ]
  %738 = phi i32 [ %599, %734 ], [ %1240, %1237 ]
  %739 = phi i32 [ 0, %734 ], [ %1241, %1237 ]
  %740 = sext i32 %738 to i64
  %741 = ashr i32 %738, 1
  %742 = load i8, i8* %229, align 16
  %743 = icmp eq i8 %742, 0
  br i1 %743, label %744, label %1237

744:                                              ; preds = %736
  %745 = getelementptr inbounds i8, i8* %496, i64 %737
  %746 = load i8, i8* %745, align 1
  %747 = zext i8 %746 to i64
  %748 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 6, i64 %747, i64 %587
  %749 = load i16, i16* %748, align 2
  %750 = icmp sgt i16 %749, -1
  br i1 %750, label %751, label %1237

751:                                              ; preds = %744
  %752 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %403, align 8
  %753 = sext i16 %749 to i64
  %754 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %752, i64 %753, i32 4
  %755 = load float*, float** %754, align 8
  %756 = icmp eq float* %755, null
  br i1 %756, label %1237, label %757

757:                                              ; preds = %751
  %758 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %752, i64 %753, i32 0
  %759 = load i8, i8* %758, align 8
  %760 = zext i8 %759 to i32
  %761 = load i32, i32* %581, align 4
  %762 = zext i32 %761 to i64
  %763 = shl nuw nsw i64 %762, 1
  %764 = shl nuw nsw i32 %760, 1
  %765 = zext i32 %764 to i64
  %766 = getelementptr inbounds [257 x i32], [257 x i32]* @ff_inverse, i64 0, i64 %765
  %767 = load i32, i32* %766, align 8
  %768 = zext i32 %767 to i64
  %769 = mul i64 %763, %768
  %770 = lshr i64 %769, 32
  %771 = trunc i64 %770 to i32
  %772 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %752, i64 %753, i32 3, i32 1
  %773 = load [2 x i16]*, [2 x i16]** %772, align 8
  %774 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %752, i64 %753, i32 5
  %775 = load i32, i32* %774, align 8
  %776 = or i32 %738, %760
  %777 = and i32 %776, 1
  %778 = icmp eq i32 %777, 0
  %779 = and i1 %582, %778
  br i1 %779, label %780, label %1114

780:                                              ; preds = %757
  switch i8 %759, label %791 [
    i8 2, label %786
    i8 4, label %781
  ]

781:                                              ; preds = %780
  %782 = icmp eq i32 %771, 0
  br i1 %782, label %1237, label %783

783:                                              ; preds = %781
  %784 = sub i32 32, %775
  %785 = lshr i32 -1, %784
  br label %894

786:                                              ; preds = %780
  %787 = icmp eq i32 %771, 0
  br i1 %787, label %1237, label %788

788:                                              ; preds = %786
  %789 = sub i32 32, %775
  %790 = lshr i32 -1, %789
  br label %798

791:                                              ; preds = %780
  %792 = icmp eq i32 %771, 0
  br i1 %792, label %1237, label %793

793:                                              ; preds = %791
  %794 = sub i32 32, %775
  %795 = lshr i32 -1, %794
  %796 = icmp eq i8 %759, 0
  %797 = zext i8 %759 to i64
  br label %1008

798:                                              ; preds = %872, %788
  %799 = phi i64 [ 0, %788 ], [ %892, %872 ]
  %800 = load i32, i32* %223, align 8
  %801 = load i32, i32* %219, align 8
  %802 = load i8*, i8** %232, align 8
  %803 = lshr i32 %800, 3
  %804 = zext i32 %803 to i64
  %805 = getelementptr inbounds i8, i8* %802, i64 %804
  %806 = bitcast i8* %805 to i32*
  %807 = load i32, i32* %806, align 1
  %808 = and i32 %800, 7
  %809 = lshr i32 %807, %808
  %810 = and i32 %809, %790
  %811 = zext i32 %810 to i64
  %812 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %811, i64 0
  %813 = load i16, i16* %812, align 2
  %814 = sext i16 %813 to i32
  %815 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %811, i64 1
  %816 = load i16, i16* %815, align 2
  %817 = sext i16 %816 to i32
  %818 = icmp slt i16 %816, 0
  br i1 %818, label %819, label %864

819:                                              ; preds = %798
  %820 = add i32 %800, %775
  %821 = icmp ugt i32 %801, %820
  %822 = select i1 %821, i32 %820, i32 %801
  %823 = lshr i32 %822, 3
  %824 = zext i32 %823 to i64
  %825 = getelementptr inbounds i8, i8* %802, i64 %824
  %826 = bitcast i8* %825 to i32*
  %827 = load i32, i32* %826, align 1
  %828 = and i32 %822, 7
  %829 = lshr i32 %827, %828
  %830 = add nsw i32 %817, 32
  %831 = lshr i32 -1, %830
  %832 = and i32 %829, %831
  %833 = add i32 %832, %814
  %834 = zext i32 %833 to i64
  %835 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %834, i64 0
  %836 = load i16, i16* %835, align 2
  %837 = sext i16 %836 to i32
  %838 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %834, i64 1
  %839 = load i16, i16* %838, align 2
  %840 = sext i16 %839 to i32
  %841 = icmp slt i16 %839, 0
  br i1 %841, label %842, label %864

842:                                              ; preds = %819
  %843 = sub i32 %822, %817
  %844 = icmp ugt i32 %801, %843
  %845 = select i1 %844, i32 %843, i32 %801
  %846 = lshr i32 %845, 3
  %847 = zext i32 %846 to i64
  %848 = getelementptr inbounds i8, i8* %802, i64 %847
  %849 = bitcast i8* %848 to i32*
  %850 = load i32, i32* %849, align 1
  %851 = and i32 %845, 7
  %852 = lshr i32 %850, %851
  %853 = add nsw i32 %840, 32
  %854 = lshr i32 -1, %853
  %855 = and i32 %852, %854
  %856 = add i32 %855, %837
  %857 = zext i32 %856 to i64
  %858 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %857, i64 0
  %859 = load i16, i16* %858, align 2
  %860 = sext i16 %859 to i32
  %861 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %857, i64 1
  %862 = load i16, i16* %861, align 2
  %863 = sext i16 %862 to i32
  br label %864

864:                                              ; preds = %842, %819, %798
  %865 = phi i32 [ %860, %842 ], [ %837, %819 ], [ %814, %798 ]
  %866 = phi i32 [ %845, %842 ], [ %822, %819 ], [ %800, %798 ]
  %867 = phi i32 [ %863, %842 ], [ %840, %819 ], [ %817, %798 ]
  %868 = add i32 %867, %866
  %869 = icmp ugt i32 %801, %868
  %870 = select i1 %869, i32 %868, i32 %801
  store i32 %870, i32* %223, align 8
  %871 = icmp slt i32 %865, 0
  br i1 %871, label %2492, label %872

872:                                              ; preds = %864
  %873 = shl nsw i32 %865, 1
  %874 = sext i32 %873 to i64
  %875 = getelementptr inbounds float, float* %755, i64 %874
  %876 = load float, float* %875, align 4
  %877 = trunc i64 %799 to i32
  %878 = add i32 %741, %877
  %879 = zext i32 %878 to i64
  %880 = getelementptr inbounds float, float* %440, i64 %879
  %881 = load float, float* %880, align 4
  %882 = fadd nsz float %876, %881
  store float %882, float* %880, align 4
  %883 = or i32 %873, 1
  %884 = sext i32 %883 to i64
  %885 = getelementptr inbounds float, float* %755, i64 %884
  %886 = load float, float* %885, align 4
  %887 = add i32 %878, %285
  %888 = zext i32 %887 to i64
  %889 = getelementptr inbounds float, float* %440, i64 %888
  %890 = load float, float* %889, align 4
  %891 = fadd nsz float %886, %890
  store float %891, float* %889, align 4
  %892 = add nuw nsw i64 %799, 1
  %893 = icmp eq i64 %892, %770
  br i1 %893, label %1237, label %798

894:                                              ; preds = %969, %783
  %895 = phi i32 [ %741, %783 ], [ %1006, %969 ]
  %896 = phi i32 [ 0, %783 ], [ %1005, %969 ]
  %897 = load i32, i32* %223, align 8
  %898 = load i32, i32* %219, align 8
  %899 = load i8*, i8** %232, align 8
  %900 = lshr i32 %897, 3
  %901 = zext i32 %900 to i64
  %902 = getelementptr inbounds i8, i8* %899, i64 %901
  %903 = bitcast i8* %902 to i32*
  %904 = load i32, i32* %903, align 1
  %905 = and i32 %897, 7
  %906 = lshr i32 %904, %905
  %907 = and i32 %906, %785
  %908 = zext i32 %907 to i64
  %909 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %908, i64 0
  %910 = load i16, i16* %909, align 2
  %911 = sext i16 %910 to i32
  %912 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %908, i64 1
  %913 = load i16, i16* %912, align 2
  %914 = sext i16 %913 to i32
  %915 = icmp slt i16 %913, 0
  br i1 %915, label %916, label %961

916:                                              ; preds = %894
  %917 = add i32 %897, %775
  %918 = icmp ugt i32 %898, %917
  %919 = select i1 %918, i32 %917, i32 %898
  %920 = lshr i32 %919, 3
  %921 = zext i32 %920 to i64
  %922 = getelementptr inbounds i8, i8* %899, i64 %921
  %923 = bitcast i8* %922 to i32*
  %924 = load i32, i32* %923, align 1
  %925 = and i32 %919, 7
  %926 = lshr i32 %924, %925
  %927 = add nsw i32 %914, 32
  %928 = lshr i32 -1, %927
  %929 = and i32 %926, %928
  %930 = add i32 %929, %911
  %931 = zext i32 %930 to i64
  %932 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %931, i64 0
  %933 = load i16, i16* %932, align 2
  %934 = sext i16 %933 to i32
  %935 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %931, i64 1
  %936 = load i16, i16* %935, align 2
  %937 = sext i16 %936 to i32
  %938 = icmp slt i16 %936, 0
  br i1 %938, label %939, label %961

939:                                              ; preds = %916
  %940 = sub i32 %919, %914
  %941 = icmp ugt i32 %898, %940
  %942 = select i1 %941, i32 %940, i32 %898
  %943 = lshr i32 %942, 3
  %944 = zext i32 %943 to i64
  %945 = getelementptr inbounds i8, i8* %899, i64 %944
  %946 = bitcast i8* %945 to i32*
  %947 = load i32, i32* %946, align 1
  %948 = and i32 %942, 7
  %949 = lshr i32 %947, %948
  %950 = add nsw i32 %937, 32
  %951 = lshr i32 -1, %950
  %952 = and i32 %949, %951
  %953 = add i32 %952, %934
  %954 = zext i32 %953 to i64
  %955 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %954, i64 0
  %956 = load i16, i16* %955, align 2
  %957 = sext i16 %956 to i32
  %958 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %954, i64 1
  %959 = load i16, i16* %958, align 2
  %960 = sext i16 %959 to i32
  br label %961

961:                                              ; preds = %939, %916, %894
  %962 = phi i32 [ %957, %939 ], [ %934, %916 ], [ %911, %894 ]
  %963 = phi i32 [ %942, %939 ], [ %919, %916 ], [ %897, %894 ]
  %964 = phi i32 [ %960, %939 ], [ %937, %916 ], [ %914, %894 ]
  %965 = add i32 %964, %963
  %966 = icmp ugt i32 %898, %965
  %967 = select i1 %966, i32 %965, i32 %898
  store i32 %967, i32* %223, align 8
  %968 = icmp slt i32 %962, 0
  br i1 %968, label %2492, label %969

969:                                              ; preds = %961
  %970 = shl nsw i32 %962, 2
  %971 = sext i32 %970 to i64
  %972 = getelementptr inbounds float, float* %755, i64 %971
  %973 = load float, float* %972, align 4
  %974 = zext i32 %895 to i64
  %975 = getelementptr inbounds float, float* %440, i64 %974
  %976 = load float, float* %975, align 4
  %977 = fadd nsz float %973, %976
  store float %977, float* %975, align 4
  %978 = or i32 %970, 2
  %979 = sext i32 %978 to i64
  %980 = getelementptr inbounds float, float* %755, i64 %979
  %981 = load float, float* %980, align 4
  %982 = add i32 %895, 1
  %983 = zext i32 %982 to i64
  %984 = getelementptr inbounds float, float* %440, i64 %983
  %985 = load float, float* %984, align 4
  %986 = fadd nsz float %981, %985
  store float %986, float* %984, align 4
  %987 = or i32 %970, 1
  %988 = sext i32 %987 to i64
  %989 = getelementptr inbounds float, float* %755, i64 %988
  %990 = load float, float* %989, align 4
  %991 = add i32 %895, %285
  %992 = zext i32 %991 to i64
  %993 = getelementptr inbounds float, float* %440, i64 %992
  %994 = load float, float* %993, align 4
  %995 = fadd nsz float %990, %994
  store float %995, float* %993, align 4
  %996 = or i32 %970, 3
  %997 = sext i32 %996 to i64
  %998 = getelementptr inbounds float, float* %755, i64 %997
  %999 = load float, float* %998, align 4
  %1000 = add i32 %991, 1
  %1001 = zext i32 %1000 to i64
  %1002 = getelementptr inbounds float, float* %440, i64 %1001
  %1003 = load float, float* %1002, align 4
  %1004 = fadd nsz float %999, %1003
  store float %1004, float* %1002, align 4
  %1005 = add nuw i32 %896, 1
  %1006 = add i32 %895, 2
  %1007 = icmp eq i32 %1005, %771
  br i1 %1007, label %1237, label %894

1008:                                             ; preds = %1110, %793
  %1009 = phi i32 [ %741, %793 ], [ %1111, %1110 ]
  %1010 = phi i32 [ 0, %793 ], [ %1112, %1110 ]
  %1011 = load i32, i32* %223, align 8
  %1012 = load i32, i32* %219, align 8
  %1013 = load i8*, i8** %232, align 8
  %1014 = lshr i32 %1011, 3
  %1015 = zext i32 %1014 to i64
  %1016 = getelementptr inbounds i8, i8* %1013, i64 %1015
  %1017 = bitcast i8* %1016 to i32*
  %1018 = load i32, i32* %1017, align 1
  %1019 = and i32 %1011, 7
  %1020 = lshr i32 %1018, %1019
  %1021 = and i32 %1020, %795
  %1022 = zext i32 %1021 to i64
  %1023 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %1022, i64 0
  %1024 = load i16, i16* %1023, align 2
  %1025 = sext i16 %1024 to i32
  %1026 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %1022, i64 1
  %1027 = load i16, i16* %1026, align 2
  %1028 = sext i16 %1027 to i32
  %1029 = icmp slt i16 %1027, 0
  br i1 %1029, label %1030, label %1075

1030:                                             ; preds = %1008
  %1031 = add i32 %1011, %775
  %1032 = icmp ugt i32 %1012, %1031
  %1033 = select i1 %1032, i32 %1031, i32 %1012
  %1034 = lshr i32 %1033, 3
  %1035 = zext i32 %1034 to i64
  %1036 = getelementptr inbounds i8, i8* %1013, i64 %1035
  %1037 = bitcast i8* %1036 to i32*
  %1038 = load i32, i32* %1037, align 1
  %1039 = and i32 %1033, 7
  %1040 = lshr i32 %1038, %1039
  %1041 = add nsw i32 %1028, 32
  %1042 = lshr i32 -1, %1041
  %1043 = and i32 %1040, %1042
  %1044 = add i32 %1043, %1025
  %1045 = zext i32 %1044 to i64
  %1046 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %1045, i64 0
  %1047 = load i16, i16* %1046, align 2
  %1048 = sext i16 %1047 to i32
  %1049 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %1045, i64 1
  %1050 = load i16, i16* %1049, align 2
  %1051 = sext i16 %1050 to i32
  %1052 = icmp slt i16 %1050, 0
  br i1 %1052, label %1053, label %1075

1053:                                             ; preds = %1030
  %1054 = sub i32 %1033, %1028
  %1055 = icmp ugt i32 %1012, %1054
  %1056 = select i1 %1055, i32 %1054, i32 %1012
  %1057 = lshr i32 %1056, 3
  %1058 = zext i32 %1057 to i64
  %1059 = getelementptr inbounds i8, i8* %1013, i64 %1058
  %1060 = bitcast i8* %1059 to i32*
  %1061 = load i32, i32* %1060, align 1
  %1062 = and i32 %1056, 7
  %1063 = lshr i32 %1061, %1062
  %1064 = add nsw i32 %1051, 32
  %1065 = lshr i32 -1, %1064
  %1066 = and i32 %1063, %1065
  %1067 = add i32 %1066, %1048
  %1068 = zext i32 %1067 to i64
  %1069 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %1068, i64 0
  %1070 = load i16, i16* %1069, align 2
  %1071 = sext i16 %1070 to i32
  %1072 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %1068, i64 1
  %1073 = load i16, i16* %1072, align 2
  %1074 = sext i16 %1073 to i32
  br label %1075

1075:                                             ; preds = %1053, %1030, %1008
  %1076 = phi i32 [ %1071, %1053 ], [ %1048, %1030 ], [ %1025, %1008 ]
  %1077 = phi i32 [ %1056, %1053 ], [ %1033, %1030 ], [ %1011, %1008 ]
  %1078 = phi i32 [ %1074, %1053 ], [ %1051, %1030 ], [ %1028, %1008 ]
  %1079 = add i32 %1078, %1077
  %1080 = icmp ugt i32 %1012, %1079
  %1081 = select i1 %1080, i32 %1079, i32 %1012
  store i32 %1081, i32* %223, align 8
  %1082 = icmp slt i32 %1076, 0
  br i1 %1082, label %2492, label %1083

1083:                                             ; preds = %1075
  br i1 %796, label %1110, label %1084

1084:                                             ; preds = %1083
  %1085 = mul nsw i32 %1076, %760
  %1086 = sext i32 %1085 to i64
  br label %1087

1087:                                             ; preds = %1087, %1084
  %1088 = phi i64 [ 0, %1084 ], [ %1107, %1087 ]
  %1089 = phi i32 [ %1009, %1084 ], [ %1108, %1087 ]
  %1090 = add nsw i64 %1088, %1086
  %1091 = and i64 %1090, 4294967295
  %1092 = getelementptr inbounds float, float* %755, i64 %1091
  %1093 = load float, float* %1092, align 4
  %1094 = zext i32 %1089 to i64
  %1095 = getelementptr inbounds float, float* %440, i64 %1094
  %1096 = load float, float* %1095, align 4
  %1097 = fadd nsz float %1093, %1096
  store float %1097, float* %1095, align 4
  %1098 = add nsw i64 %1090, 1
  %1099 = and i64 %1098, 4294967295
  %1100 = getelementptr inbounds float, float* %755, i64 %1099
  %1101 = load float, float* %1100, align 4
  %1102 = add i32 %1089, %285
  %1103 = zext i32 %1102 to i64
  %1104 = getelementptr inbounds float, float* %440, i64 %1103
  %1105 = load float, float* %1104, align 4
  %1106 = fadd nsz float %1101, %1105
  store float %1106, float* %1104, align 4
  %1107 = add nuw nsw i64 %1088, 2
  %1108 = add i32 %1089, 1
  %1109 = icmp ult i64 %1107, %797
  br i1 %1109, label %1087, label %1110

1110:                                             ; preds = %1087, %1083
  %1111 = phi i32 [ %1009, %1083 ], [ %1108, %1087 ]
  %1112 = add nuw i32 %1010, 1
  %1113 = icmp eq i32 %1112, %771
  br i1 %1113, label %1237, label %1008

1114:                                             ; preds = %757
  br i1 %583, label %1121, label %1115

1115:                                             ; preds = %1114
  %1116 = load i32, i32* %585, align 4
  %1117 = zext i32 %1116 to i64
  %1118 = mul nsw i64 %1117, %740
  %1119 = lshr i64 %1118, 32
  %1120 = trunc i64 %1119 to i32
  br label %1121

1121:                                             ; preds = %1115, %1114
  %1122 = phi i32 [ %1120, %1115 ], [ %738, %1114 ]
  %1123 = icmp eq i32 %771, 0
  br i1 %1123, label %1237, label %1124

1124:                                             ; preds = %1121
  %1125 = mul i32 %1122, %473
  %1126 = sub i32 %738, %1125
  %1127 = sub i32 32, %775
  %1128 = lshr i32 -1, %1127
  %1129 = icmp eq i8 %759, 0
  %1130 = zext i8 %759 to i64
  br label %1131

1131:                                             ; preds = %1232, %1124
  %1132 = phi i32 [ %1126, %1124 ], [ %1234, %1232 ]
  %1133 = phi i32 [ %1122, %1124 ], [ %1233, %1232 ]
  %1134 = phi i32 [ 0, %1124 ], [ %1235, %1232 ]
  %1135 = load i32, i32* %223, align 8
  %1136 = load i32, i32* %219, align 8
  %1137 = load i8*, i8** %232, align 8
  %1138 = lshr i32 %1135, 3
  %1139 = zext i32 %1138 to i64
  %1140 = getelementptr inbounds i8, i8* %1137, i64 %1139
  %1141 = bitcast i8* %1140 to i32*
  %1142 = load i32, i32* %1141, align 1
  %1143 = and i32 %1135, 7
  %1144 = lshr i32 %1142, %1143
  %1145 = and i32 %1144, %1128
  %1146 = zext i32 %1145 to i64
  %1147 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %1146, i64 0
  %1148 = load i16, i16* %1147, align 2
  %1149 = sext i16 %1148 to i32
  %1150 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %1146, i64 1
  %1151 = load i16, i16* %1150, align 2
  %1152 = sext i16 %1151 to i32
  %1153 = icmp slt i16 %1151, 0
  br i1 %1153, label %1154, label %1199

1154:                                             ; preds = %1131
  %1155 = add i32 %1135, %775
  %1156 = icmp ugt i32 %1136, %1155
  %1157 = select i1 %1156, i32 %1155, i32 %1136
  %1158 = lshr i32 %1157, 3
  %1159 = zext i32 %1158 to i64
  %1160 = getelementptr inbounds i8, i8* %1137, i64 %1159
  %1161 = bitcast i8* %1160 to i32*
  %1162 = load i32, i32* %1161, align 1
  %1163 = and i32 %1157, 7
  %1164 = lshr i32 %1162, %1163
  %1165 = add nsw i32 %1152, 32
  %1166 = lshr i32 -1, %1165
  %1167 = and i32 %1164, %1166
  %1168 = add i32 %1167, %1149
  %1169 = zext i32 %1168 to i64
  %1170 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %1169, i64 0
  %1171 = load i16, i16* %1170, align 2
  %1172 = sext i16 %1171 to i32
  %1173 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %1169, i64 1
  %1174 = load i16, i16* %1173, align 2
  %1175 = sext i16 %1174 to i32
  %1176 = icmp slt i16 %1174, 0
  br i1 %1176, label %1177, label %1199

1177:                                             ; preds = %1154
  %1178 = sub i32 %1157, %1152
  %1179 = icmp ugt i32 %1136, %1178
  %1180 = select i1 %1179, i32 %1178, i32 %1136
  %1181 = lshr i32 %1180, 3
  %1182 = zext i32 %1181 to i64
  %1183 = getelementptr inbounds i8, i8* %1137, i64 %1182
  %1184 = bitcast i8* %1183 to i32*
  %1185 = load i32, i32* %1184, align 1
  %1186 = and i32 %1180, 7
  %1187 = lshr i32 %1185, %1186
  %1188 = add nsw i32 %1175, 32
  %1189 = lshr i32 -1, %1188
  %1190 = and i32 %1187, %1189
  %1191 = add i32 %1190, %1172
  %1192 = zext i32 %1191 to i64
  %1193 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %1192, i64 0
  %1194 = load i16, i16* %1193, align 2
  %1195 = sext i16 %1194 to i32
  %1196 = getelementptr inbounds [2 x i16], [2 x i16]* %773, i64 %1192, i64 1
  %1197 = load i16, i16* %1196, align 2
  %1198 = sext i16 %1197 to i32
  br label %1199

1199:                                             ; preds = %1177, %1154, %1131
  %1200 = phi i32 [ %1195, %1177 ], [ %1172, %1154 ], [ %1149, %1131 ]
  %1201 = phi i32 [ %1180, %1177 ], [ %1157, %1154 ], [ %1135, %1131 ]
  %1202 = phi i32 [ %1198, %1177 ], [ %1175, %1154 ], [ %1152, %1131 ]
  %1203 = add i32 %1202, %1201
  %1204 = icmp ugt i32 %1136, %1203
  %1205 = select i1 %1204, i32 %1203, i32 %1136
  store i32 %1205, i32* %223, align 8
  %1206 = icmp slt i32 %1200, 0
  br i1 %1206, label %2492, label %1207

1207:                                             ; preds = %1199
  br i1 %1129, label %1232, label %1208

1208:                                             ; preds = %1207
  %1209 = mul nsw i32 %1200, %760
  br label %1210

1210:                                             ; preds = %1210, %1208
  %1211 = phi i64 [ 0, %1208 ], [ %1230, %1210 ]
  %1212 = phi i32 [ %1132, %1208 ], [ %1229, %1210 ]
  %1213 = phi i32 [ %1133, %1208 ], [ %1228, %1210 ]
  %1214 = trunc i64 %1211 to i32
  %1215 = add i32 %1209, %1214
  %1216 = zext i32 %1215 to i64
  %1217 = getelementptr inbounds float, float* %755, i64 %1216
  %1218 = load float, float* %1217, align 4
  %1219 = mul i32 %1212, %285
  %1220 = add i32 %1219, %1213
  %1221 = zext i32 %1220 to i64
  %1222 = getelementptr inbounds float, float* %440, i64 %1221
  %1223 = load float, float* %1222, align 4
  %1224 = fadd nsz float %1218, %1223
  store float %1224, float* %1222, align 4
  %1225 = add i32 %1212, 1
  %1226 = icmp eq i32 %1225, %473
  %1227 = zext i1 %1226 to i32
  %1228 = add i32 %1213, %1227
  %1229 = select i1 %1226, i32 0, i32 %1225
  %1230 = add nuw nsw i64 %1211, 1
  %1231 = icmp eq i64 %1230, %1130
  br i1 %1231, label %1232, label %1210

1232:                                             ; preds = %1210, %1207
  %1233 = phi i32 [ %1133, %1207 ], [ %1228, %1210 ]
  %1234 = phi i32 [ %1132, %1207 ], [ %1229, %1210 ]
  %1235 = add nuw i32 %1134, 1
  %1236 = icmp eq i32 %1235, %771
  br i1 %1236, label %1237, label %1131

1237:                                             ; preds = %1232, %969, %872, %1110, %1121, %791, %786, %781, %751, %744, %736
  %1238 = add nsw i64 %737, 1
  %1239 = load i32, i32* %581, align 4
  %1240 = add i32 %1239, %738
  %1241 = add nuw nsw i32 %739, 1
  %1242 = icmp ult i32 %1241, %494
  %1243 = icmp slt i64 %1238, %579
  %1244 = and i1 %1243, %1242
  br i1 %1244, label %736, label %591

1245:                                             ; preds = %593, %586
  %1246 = icmp ne i64 %587, 0
  %1247 = or i1 %574, %1246
  %1248 = xor i1 %1247, true
  %1249 = load i8, i8* %229, align 16
  %1250 = icmp eq i8 %1249, 0
  %1251 = and i1 %1250, %1248
  br i1 %1251, label %1252, label %1332

1252:                                             ; preds = %1245
  %1253 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %403, align 8
  %1254 = load i8, i8* %489, align 1
  %1255 = zext i8 %1254 to i64
  %1256 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1253, i64 %1255, i32 3, i32 1
  %1257 = load [2 x i16]*, [2 x i16]** %1256, align 8
  %1258 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1253, i64 %1255, i32 5
  %1259 = load i32, i32* %1258, align 8
  %1260 = load i32, i32* %223, align 8
  %1261 = load i32, i32* %219, align 8
  %1262 = load i8*, i8** %232, align 8
  %1263 = lshr i32 %1260, 3
  %1264 = zext i32 %1263 to i64
  %1265 = getelementptr inbounds i8, i8* %1262, i64 %1264
  %1266 = bitcast i8* %1265 to i32*
  %1267 = load i32, i32* %1266, align 1
  %1268 = and i32 %1260, 7
  %1269 = lshr i32 %1267, %1268
  %1270 = sub i32 32, %1259
  %1271 = lshr i32 -1, %1270
  %1272 = and i32 %1269, %1271
  %1273 = zext i32 %1272 to i64
  %1274 = getelementptr inbounds [2 x i16], [2 x i16]* %1257, i64 %1273, i64 1
  %1275 = load i16, i16* %1274, align 2
  %1276 = sext i16 %1275 to i32
  %1277 = icmp slt i16 %1275, 0
  br i1 %1277, label %1278, label %1323

1278:                                             ; preds = %1252
  %1279 = getelementptr inbounds [2 x i16], [2 x i16]* %1257, i64 %1273, i64 0
  %1280 = load i16, i16* %1279, align 2
  %1281 = sext i16 %1280 to i32
  %1282 = add i32 %1260, %1259
  %1283 = icmp ugt i32 %1261, %1282
  %1284 = select i1 %1283, i32 %1282, i32 %1261
  %1285 = lshr i32 %1284, 3
  %1286 = zext i32 %1285 to i64
  %1287 = getelementptr inbounds i8, i8* %1262, i64 %1286
  %1288 = bitcast i8* %1287 to i32*
  %1289 = load i32, i32* %1288, align 1
  %1290 = and i32 %1284, 7
  %1291 = lshr i32 %1289, %1290
  %1292 = add nsw i32 %1276, 32
  %1293 = lshr i32 -1, %1292
  %1294 = and i32 %1291, %1293
  %1295 = add i32 %1294, %1281
  %1296 = zext i32 %1295 to i64
  %1297 = getelementptr inbounds [2 x i16], [2 x i16]* %1257, i64 %1296, i64 1
  %1298 = load i16, i16* %1297, align 2
  %1299 = sext i16 %1298 to i32
  %1300 = icmp slt i16 %1298, 0
  br i1 %1300, label %1301, label %1323

1301:                                             ; preds = %1278
  %1302 = getelementptr inbounds [2 x i16], [2 x i16]* %1257, i64 %1296, i64 0
  %1303 = load i16, i16* %1302, align 2
  %1304 = sext i16 %1303 to i32
  %1305 = sub i32 %1284, %1276
  %1306 = icmp ugt i32 %1261, %1305
  %1307 = select i1 %1306, i32 %1305, i32 %1261
  %1308 = lshr i32 %1307, 3
  %1309 = zext i32 %1308 to i64
  %1310 = getelementptr inbounds i8, i8* %1262, i64 %1309
  %1311 = bitcast i8* %1310 to i32*
  %1312 = load i32, i32* %1311, align 1
  %1313 = and i32 %1307, 7
  %1314 = lshr i32 %1312, %1313
  %1315 = add nsw i32 %1299, 32
  %1316 = lshr i32 -1, %1315
  %1317 = and i32 %1314, %1316
  %1318 = add i32 %1317, %1304
  %1319 = zext i32 %1318 to i64
  %1320 = getelementptr inbounds [2 x i16], [2 x i16]* %1257, i64 %1319, i64 1
  %1321 = load i16, i16* %1320, align 2
  %1322 = sext i16 %1321 to i32
  br label %1323

1323:                                             ; preds = %1301, %1278, %1252
  %1324 = phi i32 [ %1307, %1301 ], [ %1284, %1278 ], [ %1260, %1252 ]
  %1325 = phi i32 [ %1322, %1301 ], [ %1299, %1278 ], [ %1276, %1252 ]
  %1326 = add i32 %1325, %1324
  %1327 = icmp ugt i32 %1261, %1326
  %1328 = select i1 %1327, i32 %1326, i32 %1261
  store i32 %1328, i32* %223, align 8
  br label %1332

1329:                                             ; preds = %690
  %1330 = bitcast %struct.vorbis_context_s* %16 to i8**
  %1331 = load i8*, i8** %1330, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1331, i32 16, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.62, i64 0, i64 0), i32 0) #7
  br label %2492

1332:                                             ; preds = %1323, %1245
  %1333 = add nuw nsw i64 %587, 1
  %1334 = load i8, i8* %575, align 2
  %1335 = zext i8 %1334 to i64
  %1336 = icmp ult i64 %587, %1335
  br i1 %1336, label %586, label %2325

1337:                                             ; preds = %484
  %1338 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %403, align 8
  %1339 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 5
  %1340 = load i8, i8* %1339, align 1
  %1341 = zext i8 %1340 to i64
  %1342 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1338, i64 %1341, i32 0
  %1343 = load i8, i8* %1342, align 8
  %1344 = zext i8 %1343 to i32
  %1345 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 9
  %1346 = load i8*, i8** %1345, align 8
  %1347 = add i32 %473, -1
  %1348 = mul i32 %1347, %285
  %1349 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 8
  %1350 = load i16, i16* %1349, align 4
  %1351 = zext i16 %1350 to i32
  %1352 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 2
  %1353 = load i32, i32* %1352, align 8
  %1354 = add i32 %1353, %1348
  %1355 = mul i32 %438, %285
  %1356 = icmp ugt i32 %1354, %1355
  br i1 %1356, label %1357, label %1369

1357:                                             ; preds = %1337
  %1358 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 3
  %1359 = load i32, i32* %1358, align 4
  %1360 = mul i32 %1359, %473
  %1361 = udiv i32 %1360, %473
  %1362 = add i32 %1361, %1355
  %1363 = icmp ugt i32 %1354, %1362
  br i1 %1363, label %1366, label %1364

1364:                                             ; preds = %1357
  %1365 = add nsw i32 %1351, -1
  br label %1369

1366:                                             ; preds = %1357
  %1367 = bitcast %struct.vorbis_context_s* %16 to i8**
  %1368 = load i8*, i8** %1367, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1368, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.59, i64 0, i64 0)) #7
  br label %2492

1369:                                             ; preds = %1364, %1337
  %1370 = phi i32 [ %1365, %1364 ], [ %1351, %1337 ]
  %1371 = phi i1 [ false, %1364 ], [ true, %1337 ]
  %1372 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 7
  %1373 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 1
  %1374 = icmp sgt i32 %1370, 0
  %1375 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 4
  %1376 = sext i32 %1370 to i64
  %1377 = zext i32 %473 to i64
  %1378 = icmp ne i8 %1343, 0
  %1379 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 3
  br label %1380

1380:                                             ; preds = %1825, %1369
  %1381 = phi i64 [ 0, %1369 ], [ %1826, %1825 ]
  br i1 %1374, label %1382, label %1733

1382:                                             ; preds = %1380
  %1383 = load i32, i32* %1373, align 4
  %1384 = icmp eq i64 %1381, 0
  br label %1391

1385:                                             ; preds = %1725
  %1386 = trunc i64 %1726 to i32
  br label %1387

1387:                                             ; preds = %1535, %1385
  %1388 = phi i32 [ %1393, %1535 ], [ %1728, %1385 ]
  %1389 = phi i32 [ %1392, %1535 ], [ %1386, %1385 ]
  %1390 = icmp slt i32 %1389, %1370
  br i1 %1390, label %1391, label %1733

1391:                                             ; preds = %1387, %1382
  %1392 = phi i32 [ 0, %1382 ], [ %1389, %1387 ]
  %1393 = phi i32 [ %1383, %1382 ], [ %1388, %1387 ]
  br i1 %1384, label %1394, label %1535

1394:                                             ; preds = %1391
  %1395 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %403, align 8
  %1396 = load i8, i8* %1339, align 1
  %1397 = zext i8 %1396 to i64
  %1398 = load i8, i8* %1375, align 8
  %1399 = zext i8 %1398 to i64
  %1400 = getelementptr inbounds [257 x i32], [257 x i32]* @ff_inverse, i64 0, i64 %1399
  %1401 = load i32, i32* %1400, align 4
  %1402 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1395, i64 %1397, i32 0
  %1403 = load i8, i8* %1402, align 8
  %1404 = zext i8 %1403 to i32
  %1405 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1395, i64 %1397, i32 3, i32 1
  %1406 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1395, i64 %1397, i32 5
  %1407 = add i32 %1392, -1
  %1408 = add i32 %1407, %1404
  %1409 = icmp slt i32 %1408, %1392
  %1410 = zext i32 %1401 to i64
  %1411 = sext i32 %1408 to i64
  %1412 = sext i32 %1392 to i64
  br label %1413

1413:                                             ; preds = %1531, %1394
  %1414 = phi i64 [ 0, %1394 ], [ %1532, %1531 ]
  %1415 = phi i64 [ 0, %1394 ], [ %1533, %1531 ]
  %1416 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 %1415
  %1417 = load i8, i8* %1416, align 1
  %1418 = icmp eq i8 %1417, 0
  br i1 %1418, label %1419, label %1531

1419:                                             ; preds = %1413
  %1420 = load [2 x i16]*, [2 x i16]** %1405, align 8
  %1421 = load i32, i32* %1406, align 8
  %1422 = load i32, i32* %223, align 8
  %1423 = load i32, i32* %219, align 8
  %1424 = load i8*, i8** %232, align 8
  %1425 = lshr i32 %1422, 3
  %1426 = zext i32 %1425 to i64
  %1427 = getelementptr inbounds i8, i8* %1424, i64 %1426
  %1428 = bitcast i8* %1427 to i32*
  %1429 = load i32, i32* %1428, align 1
  %1430 = and i32 %1422, 7
  %1431 = lshr i32 %1429, %1430
  %1432 = sub i32 32, %1421
  %1433 = lshr i32 -1, %1432
  %1434 = and i32 %1431, %1433
  %1435 = zext i32 %1434 to i64
  %1436 = getelementptr inbounds [2 x i16], [2 x i16]* %1420, i64 %1435, i64 0
  %1437 = load i16, i16* %1436, align 2
  %1438 = sext i16 %1437 to i32
  %1439 = getelementptr inbounds [2 x i16], [2 x i16]* %1420, i64 %1435, i64 1
  %1440 = load i16, i16* %1439, align 2
  %1441 = sext i16 %1440 to i32
  %1442 = icmp slt i16 %1440, 0
  br i1 %1442, label %1443, label %1488

1443:                                             ; preds = %1419
  %1444 = add i32 %1422, %1421
  %1445 = icmp ugt i32 %1423, %1444
  %1446 = select i1 %1445, i32 %1444, i32 %1423
  %1447 = lshr i32 %1446, 3
  %1448 = zext i32 %1447 to i64
  %1449 = getelementptr inbounds i8, i8* %1424, i64 %1448
  %1450 = bitcast i8* %1449 to i32*
  %1451 = load i32, i32* %1450, align 1
  %1452 = and i32 %1446, 7
  %1453 = lshr i32 %1451, %1452
  %1454 = add nsw i32 %1441, 32
  %1455 = lshr i32 -1, %1454
  %1456 = and i32 %1453, %1455
  %1457 = add i32 %1456, %1438
  %1458 = zext i32 %1457 to i64
  %1459 = getelementptr inbounds [2 x i16], [2 x i16]* %1420, i64 %1458, i64 0
  %1460 = load i16, i16* %1459, align 2
  %1461 = sext i16 %1460 to i32
  %1462 = getelementptr inbounds [2 x i16], [2 x i16]* %1420, i64 %1458, i64 1
  %1463 = load i16, i16* %1462, align 2
  %1464 = sext i16 %1463 to i32
  %1465 = icmp slt i16 %1463, 0
  br i1 %1465, label %1466, label %1488

1466:                                             ; preds = %1443
  %1467 = sub i32 %1446, %1441
  %1468 = icmp ugt i32 %1423, %1467
  %1469 = select i1 %1468, i32 %1467, i32 %1423
  %1470 = lshr i32 %1469, 3
  %1471 = zext i32 %1470 to i64
  %1472 = getelementptr inbounds i8, i8* %1424, i64 %1471
  %1473 = bitcast i8* %1472 to i32*
  %1474 = load i32, i32* %1473, align 1
  %1475 = and i32 %1469, 7
  %1476 = lshr i32 %1474, %1475
  %1477 = add nsw i32 %1464, 32
  %1478 = lshr i32 -1, %1477
  %1479 = and i32 %1476, %1478
  %1480 = add i32 %1479, %1461
  %1481 = zext i32 %1480 to i64
  %1482 = getelementptr inbounds [2 x i16], [2 x i16]* %1420, i64 %1481, i64 0
  %1483 = load i16, i16* %1482, align 2
  %1484 = sext i16 %1483 to i32
  %1485 = getelementptr inbounds [2 x i16], [2 x i16]* %1420, i64 %1481, i64 1
  %1486 = load i16, i16* %1485, align 2
  %1487 = sext i16 %1486 to i32
  br label %1488

1488:                                             ; preds = %1466, %1443, %1419
  %1489 = phi i32 [ %1484, %1466 ], [ %1461, %1443 ], [ %1438, %1419 ]
  %1490 = phi i32 [ %1469, %1466 ], [ %1446, %1443 ], [ %1422, %1419 ]
  %1491 = phi i32 [ %1487, %1466 ], [ %1464, %1443 ], [ %1441, %1419 ]
  %1492 = add i32 %1491, %1490
  %1493 = icmp ugt i32 %1423, %1492
  %1494 = select i1 %1493, i32 %1492, i32 %1423
  store i32 %1494, i32* %223, align 8
  %1495 = icmp slt i32 %1489, 0
  br i1 %1495, label %1821, label %1496

1496:                                             ; preds = %1488
  %1497 = load i8, i8* %1375, align 8
  %1498 = icmp eq i8 %1497, 1
  br i1 %1498, label %1500, label %1499

1499:                                             ; preds = %1496
  br i1 %1409, label %1531, label %1511

1500:                                             ; preds = %1496
  br i1 %1409, label %1531, label %1501

1501:                                             ; preds = %1500, %1508
  %1502 = phi i64 [ %1509, %1508 ], [ %1411, %1500 ]
  %1503 = icmp slt i64 %1502, %1376
  br i1 %1503, label %1504, label %1508

1504:                                             ; preds = %1501
  %1505 = load i8*, i8** %1345, align 8
  %1506 = add nsw i64 %1502, %1414
  %1507 = getelementptr inbounds i8, i8* %1505, i64 %1506
  store i8 0, i8* %1507, align 1
  br label %1508

1508:                                             ; preds = %1504, %1501
  %1509 = add nsw i64 %1502, -1
  %1510 = icmp sgt i64 %1502, %1412
  br i1 %1510, label %1501, label %1531

1511:                                             ; preds = %1499, %1528
  %1512 = phi i64 [ %1529, %1528 ], [ %1411, %1499 ]
  %1513 = phi i32 [ %1517, %1528 ], [ %1489, %1499 ]
  %1514 = sext i32 %1513 to i64
  %1515 = mul nsw i64 %1514, %1410
  %1516 = lshr i64 %1515, 32
  %1517 = trunc i64 %1516 to i32
  %1518 = icmp slt i64 %1512, %1376
  br i1 %1518, label %1519, label %1528

1519:                                             ; preds = %1511
  %1520 = load i8, i8* %1375, align 8
  %1521 = zext i8 %1520 to i32
  %1522 = mul nsw i32 %1521, %1517
  %1523 = sub nsw i32 %1513, %1522
  %1524 = trunc i32 %1523 to i8
  %1525 = load i8*, i8** %1345, align 8
  %1526 = add nsw i64 %1512, %1414
  %1527 = getelementptr inbounds i8, i8* %1525, i64 %1526
  store i8 %1524, i8* %1527, align 1
  br label %1528

1528:                                             ; preds = %1519, %1511
  %1529 = add nsw i64 %1512, -1
  %1530 = icmp sgt i64 %1512, %1412
  br i1 %1530, label %1511, label %1531

1531:                                             ; preds = %1528, %1508, %1500, %1499, %1413
  %1532 = add nsw i64 %1414, %1376
  %1533 = add nuw nsw i64 %1415, 1
  %1534 = icmp eq i64 %1533, %1377
  br i1 %1534, label %1535, label %1413

1535:                                             ; preds = %1531, %1391
  %1536 = icmp slt i32 %1392, %1370
  %1537 = and i1 %1378, %1536
  br i1 %1537, label %1538, label %1387

1538:                                             ; preds = %1535
  %1539 = sext i32 %1392 to i64
  br label %1540

1540:                                             ; preds = %1725, %1538
  %1541 = phi i64 [ %1539, %1538 ], [ %1726, %1725 ]
  %1542 = phi i32 [ %1393, %1538 ], [ %1728, %1725 ]
  %1543 = phi i32 [ 0, %1538 ], [ %1729, %1725 ]
  br label %1544

1544:                                             ; preds = %1721, %1540
  %1545 = phi i64 [ %1723, %1721 ], [ 0, %1540 ]
  %1546 = phi i64 [ %1722, %1721 ], [ 0, %1540 ]
  %1547 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 %1545
  %1548 = load i8, i8* %1547, align 1
  %1549 = icmp eq i8 %1548, 0
  br i1 %1549, label %1550, label %1721

1550:                                             ; preds = %1544
  %1551 = add nsw i64 %1546, %1541
  %1552 = getelementptr inbounds i8, i8* %1346, i64 %1551
  %1553 = load i8, i8* %1552, align 1
  %1554 = zext i8 %1553 to i64
  %1555 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 6, i64 %1554, i64 %1381
  %1556 = load i16, i16* %1555, align 2
  %1557 = icmp sgt i16 %1556, -1
  br i1 %1557, label %1558, label %1721

1558:                                             ; preds = %1550
  %1559 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %403, align 8
  %1560 = sext i16 %1556 to i64
  %1561 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1559, i64 %1560, i32 4
  %1562 = load float*, float** %1561, align 8
  %1563 = icmp eq float* %1562, null
  br i1 %1563, label %1721, label %1564

1564:                                             ; preds = %1558
  %1565 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1559, i64 %1560, i32 0
  %1566 = load i8, i8* %1565, align 8
  %1567 = zext i8 %1566 to i32
  %1568 = load i32, i32* %1379, align 4
  %1569 = zext i32 %1568 to i64
  %1570 = shl nuw nsw i64 %1569, 1
  %1571 = shl nuw nsw i32 %1567, 1
  %1572 = zext i32 %1571 to i64
  %1573 = getelementptr inbounds [257 x i32], [257 x i32]* @ff_inverse, i64 0, i64 %1572
  %1574 = load i32, i32* %1573, align 8
  %1575 = zext i32 %1574 to i64
  %1576 = mul i64 %1570, %1575
  %1577 = lshr i64 %1576, 32
  %1578 = trunc i64 %1577 to i32
  %1579 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1559, i64 %1560, i32 3, i32 1
  %1580 = load [2 x i16]*, [2 x i16]** %1579, align 8
  %1581 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1559, i64 %1560, i32 5
  %1582 = load i32, i32* %1581, align 8
  %1583 = icmp eq i32 %1578, 0
  br i1 %1583, label %1721, label %1584

1584:                                             ; preds = %1564
  %1585 = trunc i64 %1545 to i32
  %1586 = mul i32 %285, %1585
  %1587 = add i32 %1586, %1542
  %1588 = sub i32 32, %1582
  %1589 = lshr i32 -1, %1588
  %1590 = icmp eq i8 %1566, 0
  %1591 = zext i8 %1566 to i64
  %1592 = and i64 %1591, 1
  %1593 = icmp eq i8 %1566, 1
  %1594 = sub nsw i64 %1591, %1592
  %1595 = icmp eq i64 %1592, 0
  br label %1596

1596:                                             ; preds = %1717, %1584
  %1597 = phi i32 [ %1587, %1584 ], [ %1718, %1717 ]
  %1598 = phi i32 [ 0, %1584 ], [ %1719, %1717 ]
  %1599 = load i32, i32* %223, align 8
  %1600 = load i32, i32* %219, align 8
  %1601 = load i8*, i8** %232, align 8
  %1602 = lshr i32 %1599, 3
  %1603 = zext i32 %1602 to i64
  %1604 = getelementptr inbounds i8, i8* %1601, i64 %1603
  %1605 = bitcast i8* %1604 to i32*
  %1606 = load i32, i32* %1605, align 1
  %1607 = and i32 %1599, 7
  %1608 = lshr i32 %1606, %1607
  %1609 = and i32 %1608, %1589
  %1610 = zext i32 %1609 to i64
  %1611 = getelementptr inbounds [2 x i16], [2 x i16]* %1580, i64 %1610, i64 0
  %1612 = load i16, i16* %1611, align 2
  %1613 = sext i16 %1612 to i32
  %1614 = getelementptr inbounds [2 x i16], [2 x i16]* %1580, i64 %1610, i64 1
  %1615 = load i16, i16* %1614, align 2
  %1616 = sext i16 %1615 to i32
  %1617 = icmp slt i16 %1615, 0
  br i1 %1617, label %1618, label %1663

1618:                                             ; preds = %1596
  %1619 = add i32 %1599, %1582
  %1620 = icmp ugt i32 %1600, %1619
  %1621 = select i1 %1620, i32 %1619, i32 %1600
  %1622 = lshr i32 %1621, 3
  %1623 = zext i32 %1622 to i64
  %1624 = getelementptr inbounds i8, i8* %1601, i64 %1623
  %1625 = bitcast i8* %1624 to i32*
  %1626 = load i32, i32* %1625, align 1
  %1627 = and i32 %1621, 7
  %1628 = lshr i32 %1626, %1627
  %1629 = add nsw i32 %1616, 32
  %1630 = lshr i32 -1, %1629
  %1631 = and i32 %1628, %1630
  %1632 = add i32 %1631, %1613
  %1633 = zext i32 %1632 to i64
  %1634 = getelementptr inbounds [2 x i16], [2 x i16]* %1580, i64 %1633, i64 0
  %1635 = load i16, i16* %1634, align 2
  %1636 = sext i16 %1635 to i32
  %1637 = getelementptr inbounds [2 x i16], [2 x i16]* %1580, i64 %1633, i64 1
  %1638 = load i16, i16* %1637, align 2
  %1639 = sext i16 %1638 to i32
  %1640 = icmp slt i16 %1638, 0
  br i1 %1640, label %1641, label %1663

1641:                                             ; preds = %1618
  %1642 = sub i32 %1621, %1616
  %1643 = icmp ugt i32 %1600, %1642
  %1644 = select i1 %1643, i32 %1642, i32 %1600
  %1645 = lshr i32 %1644, 3
  %1646 = zext i32 %1645 to i64
  %1647 = getelementptr inbounds i8, i8* %1601, i64 %1646
  %1648 = bitcast i8* %1647 to i32*
  %1649 = load i32, i32* %1648, align 1
  %1650 = and i32 %1644, 7
  %1651 = lshr i32 %1649, %1650
  %1652 = add nsw i32 %1639, 32
  %1653 = lshr i32 -1, %1652
  %1654 = and i32 %1651, %1653
  %1655 = add i32 %1654, %1636
  %1656 = zext i32 %1655 to i64
  %1657 = getelementptr inbounds [2 x i16], [2 x i16]* %1580, i64 %1656, i64 0
  %1658 = load i16, i16* %1657, align 2
  %1659 = sext i16 %1658 to i32
  %1660 = getelementptr inbounds [2 x i16], [2 x i16]* %1580, i64 %1656, i64 1
  %1661 = load i16, i16* %1660, align 2
  %1662 = sext i16 %1661 to i32
  br label %1663

1663:                                             ; preds = %1641, %1618, %1596
  %1664 = phi i32 [ %1659, %1641 ], [ %1636, %1618 ], [ %1613, %1596 ]
  %1665 = phi i32 [ %1644, %1641 ], [ %1621, %1618 ], [ %1599, %1596 ]
  %1666 = phi i32 [ %1662, %1641 ], [ %1639, %1618 ], [ %1616, %1596 ]
  %1667 = add i32 %1666, %1665
  %1668 = icmp ugt i32 %1600, %1667
  %1669 = select i1 %1668, i32 %1667, i32 %1600
  store i32 %1669, i32* %223, align 8
  %1670 = icmp slt i32 %1664, 0
  br i1 %1670, label %2492, label %1671

1671:                                             ; preds = %1663
  br i1 %1590, label %1717, label %1672

1672:                                             ; preds = %1671
  %1673 = mul nsw i32 %1664, %1567
  br i1 %1593, label %1702, label %1674

1674:                                             ; preds = %1672, %1674
  %1675 = phi i64 [ %1698, %1674 ], [ 0, %1672 ]
  %1676 = phi i32 [ %1699, %1674 ], [ %1597, %1672 ]
  %1677 = phi i64 [ %1700, %1674 ], [ %1594, %1672 ]
  %1678 = trunc i64 %1675 to i32
  %1679 = add i32 %1673, %1678
  %1680 = zext i32 %1679 to i64
  %1681 = getelementptr inbounds float, float* %1562, i64 %1680
  %1682 = load float, float* %1681, align 4
  %1683 = zext i32 %1676 to i64
  %1684 = getelementptr inbounds float, float* %440, i64 %1683
  %1685 = load float, float* %1684, align 4
  %1686 = fadd nsz float %1682, %1685
  store float %1686, float* %1684, align 4
  %1687 = add i32 %1676, 1
  %1688 = trunc i64 %1675 to i32
  %1689 = or i32 %1688, 1
  %1690 = add i32 %1673, %1689
  %1691 = zext i32 %1690 to i64
  %1692 = getelementptr inbounds float, float* %1562, i64 %1691
  %1693 = load float, float* %1692, align 4
  %1694 = zext i32 %1687 to i64
  %1695 = getelementptr inbounds float, float* %440, i64 %1694
  %1696 = load float, float* %1695, align 4
  %1697 = fadd nsz float %1693, %1696
  store float %1697, float* %1695, align 4
  %1698 = add nuw nsw i64 %1675, 2
  %1699 = add i32 %1676, 2
  %1700 = add i64 %1677, -2
  %1701 = icmp eq i64 %1700, 0
  br i1 %1701, label %1702, label %1674

1702:                                             ; preds = %1674, %1672
  %1703 = phi i32 [ undef, %1672 ], [ %1699, %1674 ]
  %1704 = phi i64 [ 0, %1672 ], [ %1698, %1674 ]
  %1705 = phi i32 [ %1597, %1672 ], [ %1699, %1674 ]
  br i1 %1595, label %1717, label %1706

1706:                                             ; preds = %1702
  %1707 = trunc i64 %1704 to i32
  %1708 = add i32 %1673, %1707
  %1709 = zext i32 %1708 to i64
  %1710 = getelementptr inbounds float, float* %1562, i64 %1709
  %1711 = load float, float* %1710, align 4
  %1712 = zext i32 %1705 to i64
  %1713 = getelementptr inbounds float, float* %440, i64 %1712
  %1714 = load float, float* %1713, align 4
  %1715 = fadd nsz float %1711, %1714
  store float %1715, float* %1713, align 4
  %1716 = add i32 %1705, 1
  br label %1717

1717:                                             ; preds = %1706, %1702, %1671
  %1718 = phi i32 [ %1597, %1671 ], [ %1703, %1702 ], [ %1716, %1706 ]
  %1719 = add nuw i32 %1598, 1
  %1720 = icmp eq i32 %1719, %1578
  br i1 %1720, label %1721, label %1596

1721:                                             ; preds = %1717, %1564, %1558, %1550, %1544
  %1722 = add nsw i64 %1546, %1376
  %1723 = add nuw nsw i64 %1545, 1
  %1724 = icmp eq i64 %1723, %1377
  br i1 %1724, label %1725, label %1544

1725:                                             ; preds = %1721
  %1726 = add nsw i64 %1541, 1
  %1727 = load i32, i32* %1379, align 4
  %1728 = add i32 %1727, %1542
  %1729 = add nuw nsw i32 %1543, 1
  %1730 = icmp ult i32 %1729, %1344
  %1731 = icmp slt i64 %1726, %1376
  %1732 = and i1 %1731, %1730
  br i1 %1732, label %1540, label %1385

1733:                                             ; preds = %1387, %1380
  %1734 = icmp ne i64 %1381, 0
  %1735 = or i1 %1371, %1734
  br i1 %1735, label %1825, label %1736

1736:                                             ; preds = %1733, %1818
  %1737 = phi i64 [ %1819, %1818 ], [ 0, %1733 ]
  %1738 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 %1737
  %1739 = load i8, i8* %1738, align 1
  %1740 = icmp eq i8 %1739, 0
  br i1 %1740, label %1741, label %1818

1741:                                             ; preds = %1736
  %1742 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %403, align 8
  %1743 = load i8, i8* %1339, align 1
  %1744 = zext i8 %1743 to i64
  %1745 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1742, i64 %1744, i32 3, i32 1
  %1746 = load [2 x i16]*, [2 x i16]** %1745, align 8
  %1747 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1742, i64 %1744, i32 5
  %1748 = load i32, i32* %1747, align 8
  %1749 = load i32, i32* %223, align 8
  %1750 = load i32, i32* %219, align 8
  %1751 = load i8*, i8** %232, align 8
  %1752 = lshr i32 %1749, 3
  %1753 = zext i32 %1752 to i64
  %1754 = getelementptr inbounds i8, i8* %1751, i64 %1753
  %1755 = bitcast i8* %1754 to i32*
  %1756 = load i32, i32* %1755, align 1
  %1757 = and i32 %1749, 7
  %1758 = lshr i32 %1756, %1757
  %1759 = sub i32 32, %1748
  %1760 = lshr i32 -1, %1759
  %1761 = and i32 %1758, %1760
  %1762 = zext i32 %1761 to i64
  %1763 = getelementptr inbounds [2 x i16], [2 x i16]* %1746, i64 %1762, i64 1
  %1764 = load i16, i16* %1763, align 2
  %1765 = sext i16 %1764 to i32
  %1766 = icmp slt i16 %1764, 0
  br i1 %1766, label %1767, label %1812

1767:                                             ; preds = %1741
  %1768 = getelementptr inbounds [2 x i16], [2 x i16]* %1746, i64 %1762, i64 0
  %1769 = load i16, i16* %1768, align 2
  %1770 = sext i16 %1769 to i32
  %1771 = add i32 %1749, %1748
  %1772 = icmp ugt i32 %1750, %1771
  %1773 = select i1 %1772, i32 %1771, i32 %1750
  %1774 = lshr i32 %1773, 3
  %1775 = zext i32 %1774 to i64
  %1776 = getelementptr inbounds i8, i8* %1751, i64 %1775
  %1777 = bitcast i8* %1776 to i32*
  %1778 = load i32, i32* %1777, align 1
  %1779 = and i32 %1773, 7
  %1780 = lshr i32 %1778, %1779
  %1781 = add nsw i32 %1765, 32
  %1782 = lshr i32 -1, %1781
  %1783 = and i32 %1780, %1782
  %1784 = add i32 %1783, %1770
  %1785 = zext i32 %1784 to i64
  %1786 = getelementptr inbounds [2 x i16], [2 x i16]* %1746, i64 %1785, i64 1
  %1787 = load i16, i16* %1786, align 2
  %1788 = sext i16 %1787 to i32
  %1789 = icmp slt i16 %1787, 0
  br i1 %1789, label %1790, label %1812

1790:                                             ; preds = %1767
  %1791 = getelementptr inbounds [2 x i16], [2 x i16]* %1746, i64 %1785, i64 0
  %1792 = load i16, i16* %1791, align 2
  %1793 = sext i16 %1792 to i32
  %1794 = sub i32 %1773, %1765
  %1795 = icmp ugt i32 %1750, %1794
  %1796 = select i1 %1795, i32 %1794, i32 %1750
  %1797 = lshr i32 %1796, 3
  %1798 = zext i32 %1797 to i64
  %1799 = getelementptr inbounds i8, i8* %1751, i64 %1798
  %1800 = bitcast i8* %1799 to i32*
  %1801 = load i32, i32* %1800, align 1
  %1802 = and i32 %1796, 7
  %1803 = lshr i32 %1801, %1802
  %1804 = add nsw i32 %1788, 32
  %1805 = lshr i32 -1, %1804
  %1806 = and i32 %1803, %1805
  %1807 = add i32 %1806, %1793
  %1808 = zext i32 %1807 to i64
  %1809 = getelementptr inbounds [2 x i16], [2 x i16]* %1746, i64 %1808, i64 1
  %1810 = load i16, i16* %1809, align 2
  %1811 = sext i16 %1810 to i32
  br label %1812

1812:                                             ; preds = %1790, %1767, %1741
  %1813 = phi i32 [ %1796, %1790 ], [ %1773, %1767 ], [ %1749, %1741 ]
  %1814 = phi i32 [ %1811, %1790 ], [ %1788, %1767 ], [ %1765, %1741 ]
  %1815 = add i32 %1814, %1813
  %1816 = icmp ugt i32 %1750, %1815
  %1817 = select i1 %1816, i32 %1815, i32 %1750
  store i32 %1817, i32* %223, align 8
  br label %1818

1818:                                             ; preds = %1812, %1736
  %1819 = add nuw nsw i64 %1737, 1
  %1820 = icmp eq i64 %1819, %1377
  br i1 %1820, label %1825, label %1736

1821:                                             ; preds = %1488
  %1822 = trunc i64 %1415 to i32
  %1823 = bitcast %struct.vorbis_context_s* %16 to i8**
  %1824 = load i8*, i8** %1823, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1824, i32 16, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.62, i64 0, i64 0), i32 %1822) #7
  br label %2492

1825:                                             ; preds = %1818, %1733
  %1826 = add nuw nsw i64 %1381, 1
  %1827 = load i8, i8* %1372, align 2
  %1828 = zext i8 %1827 to i64
  %1829 = icmp ult i64 %1381, %1828
  br i1 %1829, label %1380, label %2325

1830:                                             ; preds = %484
  %1831 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %403, align 8
  %1832 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 5
  %1833 = load i8, i8* %1832, align 1
  %1834 = zext i8 %1833 to i64
  %1835 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1831, i64 %1834, i32 0
  %1836 = load i8, i8* %1835, align 8
  %1837 = zext i8 %1836 to i32
  %1838 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 9
  %1839 = load i8*, i8** %1838, align 8
  %1840 = add i32 %473, -1
  %1841 = mul i32 %1840, %285
  %1842 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 8
  %1843 = load i16, i16* %1842, align 4
  %1844 = zext i16 %1843 to i32
  %1845 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 2
  %1846 = load i32, i32* %1845, align 8
  %1847 = add i32 %1846, %1841
  %1848 = mul i32 %438, %285
  %1849 = icmp ugt i32 %1847, %1848
  br i1 %1849, label %1850, label %1862

1850:                                             ; preds = %1830
  %1851 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 3
  %1852 = load i32, i32* %1851, align 4
  %1853 = mul i32 %1852, %473
  %1854 = udiv i32 %1853, %473
  %1855 = add i32 %1854, %1848
  %1856 = icmp ugt i32 %1847, %1855
  br i1 %1856, label %1859, label %1857

1857:                                             ; preds = %1850
  %1858 = add nsw i32 %1844, -1
  br label %1862

1859:                                             ; preds = %1850
  %1860 = bitcast %struct.vorbis_context_s* %16 to i8**
  %1861 = load i8*, i8** %1860, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1861, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.59, i64 0, i64 0)) #7
  br label %2492

1862:                                             ; preds = %1857, %1830
  %1863 = phi i32 [ %1858, %1857 ], [ %1844, %1830 ]
  %1864 = phi i1 [ false, %1857 ], [ true, %1830 ]
  %1865 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 7
  %1866 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 1
  %1867 = icmp sgt i32 %1863, 0
  %1868 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 4
  %1869 = sext i32 %1863 to i64
  %1870 = zext i32 %473 to i64
  %1871 = icmp ne i8 %1836, 0
  %1872 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 3
  br label %1873

1873:                                             ; preds = %2317, %1862
  %1874 = phi i64 [ 0, %1862 ], [ %2318, %2317 ]
  br i1 %1867, label %1875, label %2225

1875:                                             ; preds = %1873
  %1876 = load i32, i32* %1866, align 4
  %1877 = icmp eq i64 %1874, 0
  br label %1884

1878:                                             ; preds = %2217
  %1879 = trunc i64 %2218 to i32
  br label %1880

1880:                                             ; preds = %2028, %1878
  %1881 = phi i32 [ %1886, %2028 ], [ %2220, %1878 ]
  %1882 = phi i32 [ %1885, %2028 ], [ %1879, %1878 ]
  %1883 = icmp slt i32 %1882, %1863
  br i1 %1883, label %1884, label %2225

1884:                                             ; preds = %1880, %1875
  %1885 = phi i32 [ 0, %1875 ], [ %1882, %1880 ]
  %1886 = phi i32 [ %1876, %1875 ], [ %1881, %1880 ]
  br i1 %1877, label %1887, label %2028

1887:                                             ; preds = %1884
  %1888 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %403, align 8
  %1889 = load i8, i8* %1832, align 1
  %1890 = zext i8 %1889 to i64
  %1891 = load i8, i8* %1868, align 8
  %1892 = zext i8 %1891 to i64
  %1893 = getelementptr inbounds [257 x i32], [257 x i32]* @ff_inverse, i64 0, i64 %1892
  %1894 = load i32, i32* %1893, align 4
  %1895 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1888, i64 %1890, i32 0
  %1896 = load i8, i8* %1895, align 8
  %1897 = zext i8 %1896 to i32
  %1898 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1888, i64 %1890, i32 3, i32 1
  %1899 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1888, i64 %1890, i32 5
  %1900 = add i32 %1885, -1
  %1901 = add i32 %1900, %1897
  %1902 = icmp slt i32 %1901, %1885
  %1903 = zext i32 %1894 to i64
  %1904 = sext i32 %1901 to i64
  %1905 = sext i32 %1885 to i64
  br label %1906

1906:                                             ; preds = %2024, %1887
  %1907 = phi i64 [ 0, %1887 ], [ %2025, %2024 ]
  %1908 = phi i64 [ 0, %1887 ], [ %2026, %2024 ]
  %1909 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 %1908
  %1910 = load i8, i8* %1909, align 1
  %1911 = icmp eq i8 %1910, 0
  br i1 %1911, label %1912, label %2024

1912:                                             ; preds = %1906
  %1913 = load [2 x i16]*, [2 x i16]** %1898, align 8
  %1914 = load i32, i32* %1899, align 8
  %1915 = load i32, i32* %223, align 8
  %1916 = load i32, i32* %219, align 8
  %1917 = load i8*, i8** %232, align 8
  %1918 = lshr i32 %1915, 3
  %1919 = zext i32 %1918 to i64
  %1920 = getelementptr inbounds i8, i8* %1917, i64 %1919
  %1921 = bitcast i8* %1920 to i32*
  %1922 = load i32, i32* %1921, align 1
  %1923 = and i32 %1915, 7
  %1924 = lshr i32 %1922, %1923
  %1925 = sub i32 32, %1914
  %1926 = lshr i32 -1, %1925
  %1927 = and i32 %1924, %1926
  %1928 = zext i32 %1927 to i64
  %1929 = getelementptr inbounds [2 x i16], [2 x i16]* %1913, i64 %1928, i64 0
  %1930 = load i16, i16* %1929, align 2
  %1931 = sext i16 %1930 to i32
  %1932 = getelementptr inbounds [2 x i16], [2 x i16]* %1913, i64 %1928, i64 1
  %1933 = load i16, i16* %1932, align 2
  %1934 = sext i16 %1933 to i32
  %1935 = icmp slt i16 %1933, 0
  br i1 %1935, label %1936, label %1981

1936:                                             ; preds = %1912
  %1937 = add i32 %1915, %1914
  %1938 = icmp ugt i32 %1916, %1937
  %1939 = select i1 %1938, i32 %1937, i32 %1916
  %1940 = lshr i32 %1939, 3
  %1941 = zext i32 %1940 to i64
  %1942 = getelementptr inbounds i8, i8* %1917, i64 %1941
  %1943 = bitcast i8* %1942 to i32*
  %1944 = load i32, i32* %1943, align 1
  %1945 = and i32 %1939, 7
  %1946 = lshr i32 %1944, %1945
  %1947 = add nsw i32 %1934, 32
  %1948 = lshr i32 -1, %1947
  %1949 = and i32 %1946, %1948
  %1950 = add i32 %1949, %1931
  %1951 = zext i32 %1950 to i64
  %1952 = getelementptr inbounds [2 x i16], [2 x i16]* %1913, i64 %1951, i64 0
  %1953 = load i16, i16* %1952, align 2
  %1954 = sext i16 %1953 to i32
  %1955 = getelementptr inbounds [2 x i16], [2 x i16]* %1913, i64 %1951, i64 1
  %1956 = load i16, i16* %1955, align 2
  %1957 = sext i16 %1956 to i32
  %1958 = icmp slt i16 %1956, 0
  br i1 %1958, label %1959, label %1981

1959:                                             ; preds = %1936
  %1960 = sub i32 %1939, %1934
  %1961 = icmp ugt i32 %1916, %1960
  %1962 = select i1 %1961, i32 %1960, i32 %1916
  %1963 = lshr i32 %1962, 3
  %1964 = zext i32 %1963 to i64
  %1965 = getelementptr inbounds i8, i8* %1917, i64 %1964
  %1966 = bitcast i8* %1965 to i32*
  %1967 = load i32, i32* %1966, align 1
  %1968 = and i32 %1962, 7
  %1969 = lshr i32 %1967, %1968
  %1970 = add nsw i32 %1957, 32
  %1971 = lshr i32 -1, %1970
  %1972 = and i32 %1969, %1971
  %1973 = add i32 %1972, %1954
  %1974 = zext i32 %1973 to i64
  %1975 = getelementptr inbounds [2 x i16], [2 x i16]* %1913, i64 %1974, i64 0
  %1976 = load i16, i16* %1975, align 2
  %1977 = sext i16 %1976 to i32
  %1978 = getelementptr inbounds [2 x i16], [2 x i16]* %1913, i64 %1974, i64 1
  %1979 = load i16, i16* %1978, align 2
  %1980 = sext i16 %1979 to i32
  br label %1981

1981:                                             ; preds = %1959, %1936, %1912
  %1982 = phi i32 [ %1977, %1959 ], [ %1954, %1936 ], [ %1931, %1912 ]
  %1983 = phi i32 [ %1962, %1959 ], [ %1939, %1936 ], [ %1915, %1912 ]
  %1984 = phi i32 [ %1980, %1959 ], [ %1957, %1936 ], [ %1934, %1912 ]
  %1985 = add i32 %1984, %1983
  %1986 = icmp ugt i32 %1916, %1985
  %1987 = select i1 %1986, i32 %1985, i32 %1916
  store i32 %1987, i32* %223, align 8
  %1988 = icmp slt i32 %1982, 0
  br i1 %1988, label %2313, label %1989

1989:                                             ; preds = %1981
  %1990 = load i8, i8* %1868, align 8
  %1991 = icmp eq i8 %1990, 1
  br i1 %1991, label %1993, label %1992

1992:                                             ; preds = %1989
  br i1 %1902, label %2024, label %2004

1993:                                             ; preds = %1989
  br i1 %1902, label %2024, label %1994

1994:                                             ; preds = %1993, %2001
  %1995 = phi i64 [ %2002, %2001 ], [ %1904, %1993 ]
  %1996 = icmp slt i64 %1995, %1869
  br i1 %1996, label %1997, label %2001

1997:                                             ; preds = %1994
  %1998 = load i8*, i8** %1838, align 8
  %1999 = add nsw i64 %1995, %1907
  %2000 = getelementptr inbounds i8, i8* %1998, i64 %1999
  store i8 0, i8* %2000, align 1
  br label %2001

2001:                                             ; preds = %1997, %1994
  %2002 = add nsw i64 %1995, -1
  %2003 = icmp sgt i64 %1995, %1905
  br i1 %2003, label %1994, label %2024

2004:                                             ; preds = %1992, %2021
  %2005 = phi i64 [ %2022, %2021 ], [ %1904, %1992 ]
  %2006 = phi i32 [ %2010, %2021 ], [ %1982, %1992 ]
  %2007 = sext i32 %2006 to i64
  %2008 = mul nsw i64 %2007, %1903
  %2009 = lshr i64 %2008, 32
  %2010 = trunc i64 %2009 to i32
  %2011 = icmp slt i64 %2005, %1869
  br i1 %2011, label %2012, label %2021

2012:                                             ; preds = %2004
  %2013 = load i8, i8* %1868, align 8
  %2014 = zext i8 %2013 to i32
  %2015 = mul nsw i32 %2014, %2010
  %2016 = sub nsw i32 %2006, %2015
  %2017 = trunc i32 %2016 to i8
  %2018 = load i8*, i8** %1838, align 8
  %2019 = add nsw i64 %2005, %1907
  %2020 = getelementptr inbounds i8, i8* %2018, i64 %2019
  store i8 %2017, i8* %2020, align 1
  br label %2021

2021:                                             ; preds = %2012, %2004
  %2022 = add nsw i64 %2005, -1
  %2023 = icmp sgt i64 %2005, %1905
  br i1 %2023, label %2004, label %2024

2024:                                             ; preds = %2021, %2001, %1993, %1992, %1906
  %2025 = add nsw i64 %1907, %1869
  %2026 = add nuw nsw i64 %1908, 1
  %2027 = icmp eq i64 %2026, %1870
  br i1 %2027, label %2028, label %1906

2028:                                             ; preds = %2024, %1884
  %2029 = icmp slt i32 %1885, %1863
  %2030 = and i1 %1871, %2029
  br i1 %2030, label %2031, label %1880

2031:                                             ; preds = %2028
  %2032 = sext i32 %1885 to i64
  br label %2033

2033:                                             ; preds = %2217, %2031
  %2034 = phi i64 [ %2032, %2031 ], [ %2218, %2217 ]
  %2035 = phi i32 [ %1886, %2031 ], [ %2220, %2217 ]
  %2036 = phi i32 [ 0, %2031 ], [ %2221, %2217 ]
  br label %2037

2037:                                             ; preds = %2213, %2033
  %2038 = phi i64 [ %2215, %2213 ], [ 0, %2033 ]
  %2039 = phi i64 [ %2214, %2213 ], [ 0, %2033 ]
  %2040 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 %2038
  %2041 = load i8, i8* %2040, align 1
  %2042 = icmp eq i8 %2041, 0
  br i1 %2042, label %2043, label %2213

2043:                                             ; preds = %2037
  %2044 = add nsw i64 %2039, %2034
  %2045 = getelementptr inbounds i8, i8* %1839, i64 %2044
  %2046 = load i8, i8* %2045, align 1
  %2047 = zext i8 %2046 to i64
  %2048 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %474, i64 %477, i32 6, i64 %2047, i64 %1874
  %2049 = load i16, i16* %2048, align 2
  %2050 = icmp sgt i16 %2049, -1
  br i1 %2050, label %2051, label %2213

2051:                                             ; preds = %2043
  %2052 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %403, align 8
  %2053 = sext i16 %2049 to i64
  %2054 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %2052, i64 %2053, i32 4
  %2055 = load float*, float** %2054, align 8
  %2056 = icmp eq float* %2055, null
  br i1 %2056, label %2213, label %2057

2057:                                             ; preds = %2051
  %2058 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %2052, i64 %2053, i32 0
  %2059 = load i8, i8* %2058, align 8
  %2060 = zext i8 %2059 to i32
  %2061 = load i32, i32* %1872, align 4
  %2062 = zext i32 %2061 to i64
  %2063 = shl nuw nsw i64 %2062, 1
  %2064 = shl nuw nsw i32 %2060, 1
  %2065 = zext i32 %2064 to i64
  %2066 = getelementptr inbounds [257 x i32], [257 x i32]* @ff_inverse, i64 0, i64 %2065
  %2067 = load i32, i32* %2066, align 8
  %2068 = zext i32 %2067 to i64
  %2069 = mul i64 %2063, %2068
  %2070 = lshr i64 %2069, 32
  %2071 = trunc i64 %2070 to i32
  %2072 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %2052, i64 %2053, i32 3, i32 1
  %2073 = load [2 x i16]*, [2 x i16]** %2072, align 8
  %2074 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %2052, i64 %2053, i32 5
  %2075 = load i32, i32* %2074, align 8
  %2076 = trunc i64 %2038 to i32
  %2077 = mul i32 %285, %2076
  %2078 = add i32 %2077, %2035
  %2079 = icmp eq i32 %2071, 0
  br i1 %2079, label %2213, label %2080

2080:                                             ; preds = %2057
  %2081 = sub i32 32, %2075
  %2082 = lshr i32 -1, %2081
  %2083 = icmp eq i8 %2059, 0
  %2084 = zext i8 %2059 to i64
  %2085 = and i64 %2084, 1
  %2086 = icmp eq i8 %2059, 1
  %2087 = sub nsw i64 %2084, %2085
  %2088 = icmp eq i64 %2085, 0
  br label %2089

2089:                                             ; preds = %2210, %2080
  %2090 = phi i32 [ 0, %2080 ], [ %2211, %2210 ]
  %2091 = load i32, i32* %223, align 8
  %2092 = load i32, i32* %219, align 8
  %2093 = load i8*, i8** %232, align 8
  %2094 = lshr i32 %2091, 3
  %2095 = zext i32 %2094 to i64
  %2096 = getelementptr inbounds i8, i8* %2093, i64 %2095
  %2097 = bitcast i8* %2096 to i32*
  %2098 = load i32, i32* %2097, align 1
  %2099 = and i32 %2091, 7
  %2100 = lshr i32 %2098, %2099
  %2101 = and i32 %2100, %2082
  %2102 = zext i32 %2101 to i64
  %2103 = getelementptr inbounds [2 x i16], [2 x i16]* %2073, i64 %2102, i64 0
  %2104 = load i16, i16* %2103, align 2
  %2105 = sext i16 %2104 to i32
  %2106 = getelementptr inbounds [2 x i16], [2 x i16]* %2073, i64 %2102, i64 1
  %2107 = load i16, i16* %2106, align 2
  %2108 = sext i16 %2107 to i32
  %2109 = icmp slt i16 %2107, 0
  br i1 %2109, label %2110, label %2155

2110:                                             ; preds = %2089
  %2111 = add i32 %2091, %2075
  %2112 = icmp ugt i32 %2092, %2111
  %2113 = select i1 %2112, i32 %2111, i32 %2092
  %2114 = lshr i32 %2113, 3
  %2115 = zext i32 %2114 to i64
  %2116 = getelementptr inbounds i8, i8* %2093, i64 %2115
  %2117 = bitcast i8* %2116 to i32*
  %2118 = load i32, i32* %2117, align 1
  %2119 = and i32 %2113, 7
  %2120 = lshr i32 %2118, %2119
  %2121 = add nsw i32 %2108, 32
  %2122 = lshr i32 -1, %2121
  %2123 = and i32 %2120, %2122
  %2124 = add i32 %2123, %2105
  %2125 = zext i32 %2124 to i64
  %2126 = getelementptr inbounds [2 x i16], [2 x i16]* %2073, i64 %2125, i64 0
  %2127 = load i16, i16* %2126, align 2
  %2128 = sext i16 %2127 to i32
  %2129 = getelementptr inbounds [2 x i16], [2 x i16]* %2073, i64 %2125, i64 1
  %2130 = load i16, i16* %2129, align 2
  %2131 = sext i16 %2130 to i32
  %2132 = icmp slt i16 %2130, 0
  br i1 %2132, label %2133, label %2155

2133:                                             ; preds = %2110
  %2134 = sub i32 %2113, %2108
  %2135 = icmp ugt i32 %2092, %2134
  %2136 = select i1 %2135, i32 %2134, i32 %2092
  %2137 = lshr i32 %2136, 3
  %2138 = zext i32 %2137 to i64
  %2139 = getelementptr inbounds i8, i8* %2093, i64 %2138
  %2140 = bitcast i8* %2139 to i32*
  %2141 = load i32, i32* %2140, align 1
  %2142 = and i32 %2136, 7
  %2143 = lshr i32 %2141, %2142
  %2144 = add nsw i32 %2131, 32
  %2145 = lshr i32 -1, %2144
  %2146 = and i32 %2143, %2145
  %2147 = add i32 %2146, %2128
  %2148 = zext i32 %2147 to i64
  %2149 = getelementptr inbounds [2 x i16], [2 x i16]* %2073, i64 %2148, i64 0
  %2150 = load i16, i16* %2149, align 2
  %2151 = sext i16 %2150 to i32
  %2152 = getelementptr inbounds [2 x i16], [2 x i16]* %2073, i64 %2148, i64 1
  %2153 = load i16, i16* %2152, align 2
  %2154 = sext i16 %2153 to i32
  br label %2155

2155:                                             ; preds = %2133, %2110, %2089
  %2156 = phi i32 [ %2151, %2133 ], [ %2128, %2110 ], [ %2105, %2089 ]
  %2157 = phi i32 [ %2136, %2133 ], [ %2113, %2110 ], [ %2091, %2089 ]
  %2158 = phi i32 [ %2154, %2133 ], [ %2131, %2110 ], [ %2108, %2089 ]
  %2159 = add i32 %2158, %2157
  %2160 = icmp ugt i32 %2092, %2159
  %2161 = select i1 %2160, i32 %2159, i32 %2092
  store i32 %2161, i32* %223, align 8
  %2162 = icmp slt i32 %2156, 0
  br i1 %2162, label %2492, label %2163

2163:                                             ; preds = %2155
  br i1 %2083, label %2210, label %2164

2164:                                             ; preds = %2163
  %2165 = mul nsw i32 %2156, %2060
  %2166 = add i32 %2078, %2090
  br i1 %2086, label %2196, label %2167

2167:                                             ; preds = %2164, %2167
  %2168 = phi i64 [ %2193, %2167 ], [ 0, %2164 ]
  %2169 = phi i64 [ %2194, %2167 ], [ %2087, %2164 ]
  %2170 = trunc i64 %2168 to i32
  %2171 = add i32 %2165, %2170
  %2172 = zext i32 %2171 to i64
  %2173 = getelementptr inbounds float, float* %2055, i64 %2172
  %2174 = load float, float* %2173, align 4
  %2175 = mul i32 %2170, %2071
  %2176 = add i32 %2166, %2175
  %2177 = zext i32 %2176 to i64
  %2178 = getelementptr inbounds float, float* %440, i64 %2177
  %2179 = load float, float* %2178, align 4
  %2180 = fadd nsz float %2174, %2179
  store float %2180, float* %2178, align 4
  %2181 = trunc i64 %2168 to i32
  %2182 = or i32 %2181, 1
  %2183 = add i32 %2165, %2182
  %2184 = zext i32 %2183 to i64
  %2185 = getelementptr inbounds float, float* %2055, i64 %2184
  %2186 = load float, float* %2185, align 4
  %2187 = mul i32 %2182, %2071
  %2188 = add i32 %2166, %2187
  %2189 = zext i32 %2188 to i64
  %2190 = getelementptr inbounds float, float* %440, i64 %2189
  %2191 = load float, float* %2190, align 4
  %2192 = fadd nsz float %2186, %2191
  store float %2192, float* %2190, align 4
  %2193 = add nuw nsw i64 %2168, 2
  %2194 = add i64 %2169, -2
  %2195 = icmp eq i64 %2194, 0
  br i1 %2195, label %2196, label %2167

2196:                                             ; preds = %2167, %2164
  %2197 = phi i64 [ 0, %2164 ], [ %2193, %2167 ]
  br i1 %2088, label %2210, label %2198

2198:                                             ; preds = %2196
  %2199 = trunc i64 %2197 to i32
  %2200 = add i32 %2165, %2199
  %2201 = zext i32 %2200 to i64
  %2202 = getelementptr inbounds float, float* %2055, i64 %2201
  %2203 = load float, float* %2202, align 4
  %2204 = mul i32 %2199, %2071
  %2205 = add i32 %2166, %2204
  %2206 = zext i32 %2205 to i64
  %2207 = getelementptr inbounds float, float* %440, i64 %2206
  %2208 = load float, float* %2207, align 4
  %2209 = fadd nsz float %2203, %2208
  store float %2209, float* %2207, align 4
  br label %2210

2210:                                             ; preds = %2198, %2196, %2163
  %2211 = add nuw i32 %2090, 1
  %2212 = icmp eq i32 %2211, %2071
  br i1 %2212, label %2213, label %2089

2213:                                             ; preds = %2210, %2057, %2051, %2043, %2037
  %2214 = add nsw i64 %2039, %1869
  %2215 = add nuw nsw i64 %2038, 1
  %2216 = icmp eq i64 %2215, %1870
  br i1 %2216, label %2217, label %2037

2217:                                             ; preds = %2213
  %2218 = add nsw i64 %2034, 1
  %2219 = load i32, i32* %1872, align 4
  %2220 = add i32 %2219, %2035
  %2221 = add nuw nsw i32 %2036, 1
  %2222 = icmp ult i32 %2221, %1837
  %2223 = icmp slt i64 %2218, %1869
  %2224 = and i1 %2223, %2222
  br i1 %2224, label %2033, label %1878

2225:                                             ; preds = %1880, %1873
  %2226 = icmp ne i64 %1874, 0
  %2227 = or i1 %1864, %2226
  br i1 %2227, label %2317, label %2228

2228:                                             ; preds = %2225, %2310
  %2229 = phi i64 [ %2311, %2310 ], [ 0, %2225 ]
  %2230 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 %2229
  %2231 = load i8, i8* %2230, align 1
  %2232 = icmp eq i8 %2231, 0
  br i1 %2232, label %2233, label %2310

2233:                                             ; preds = %2228
  %2234 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %403, align 8
  %2235 = load i8, i8* %1832, align 1
  %2236 = zext i8 %2235 to i64
  %2237 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %2234, i64 %2236, i32 3, i32 1
  %2238 = load [2 x i16]*, [2 x i16]** %2237, align 8
  %2239 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %2234, i64 %2236, i32 5
  %2240 = load i32, i32* %2239, align 8
  %2241 = load i32, i32* %223, align 8
  %2242 = load i32, i32* %219, align 8
  %2243 = load i8*, i8** %232, align 8
  %2244 = lshr i32 %2241, 3
  %2245 = zext i32 %2244 to i64
  %2246 = getelementptr inbounds i8, i8* %2243, i64 %2245
  %2247 = bitcast i8* %2246 to i32*
  %2248 = load i32, i32* %2247, align 1
  %2249 = and i32 %2241, 7
  %2250 = lshr i32 %2248, %2249
  %2251 = sub i32 32, %2240
  %2252 = lshr i32 -1, %2251
  %2253 = and i32 %2250, %2252
  %2254 = zext i32 %2253 to i64
  %2255 = getelementptr inbounds [2 x i16], [2 x i16]* %2238, i64 %2254, i64 1
  %2256 = load i16, i16* %2255, align 2
  %2257 = sext i16 %2256 to i32
  %2258 = icmp slt i16 %2256, 0
  br i1 %2258, label %2259, label %2304

2259:                                             ; preds = %2233
  %2260 = getelementptr inbounds [2 x i16], [2 x i16]* %2238, i64 %2254, i64 0
  %2261 = load i16, i16* %2260, align 2
  %2262 = sext i16 %2261 to i32
  %2263 = add i32 %2241, %2240
  %2264 = icmp ugt i32 %2242, %2263
  %2265 = select i1 %2264, i32 %2263, i32 %2242
  %2266 = lshr i32 %2265, 3
  %2267 = zext i32 %2266 to i64
  %2268 = getelementptr inbounds i8, i8* %2243, i64 %2267
  %2269 = bitcast i8* %2268 to i32*
  %2270 = load i32, i32* %2269, align 1
  %2271 = and i32 %2265, 7
  %2272 = lshr i32 %2270, %2271
  %2273 = add nsw i32 %2257, 32
  %2274 = lshr i32 -1, %2273
  %2275 = and i32 %2272, %2274
  %2276 = add i32 %2275, %2262
  %2277 = zext i32 %2276 to i64
  %2278 = getelementptr inbounds [2 x i16], [2 x i16]* %2238, i64 %2277, i64 1
  %2279 = load i16, i16* %2278, align 2
  %2280 = sext i16 %2279 to i32
  %2281 = icmp slt i16 %2279, 0
  br i1 %2281, label %2282, label %2304

2282:                                             ; preds = %2259
  %2283 = getelementptr inbounds [2 x i16], [2 x i16]* %2238, i64 %2277, i64 0
  %2284 = load i16, i16* %2283, align 2
  %2285 = sext i16 %2284 to i32
  %2286 = sub i32 %2265, %2257
  %2287 = icmp ugt i32 %2242, %2286
  %2288 = select i1 %2287, i32 %2286, i32 %2242
  %2289 = lshr i32 %2288, 3
  %2290 = zext i32 %2289 to i64
  %2291 = getelementptr inbounds i8, i8* %2243, i64 %2290
  %2292 = bitcast i8* %2291 to i32*
  %2293 = load i32, i32* %2292, align 1
  %2294 = and i32 %2288, 7
  %2295 = lshr i32 %2293, %2294
  %2296 = add nsw i32 %2280, 32
  %2297 = lshr i32 -1, %2296
  %2298 = and i32 %2295, %2297
  %2299 = add i32 %2298, %2285
  %2300 = zext i32 %2299 to i64
  %2301 = getelementptr inbounds [2 x i16], [2 x i16]* %2238, i64 %2300, i64 1
  %2302 = load i16, i16* %2301, align 2
  %2303 = sext i16 %2302 to i32
  br label %2304

2304:                                             ; preds = %2282, %2259, %2233
  %2305 = phi i32 [ %2288, %2282 ], [ %2265, %2259 ], [ %2241, %2233 ]
  %2306 = phi i32 [ %2303, %2282 ], [ %2280, %2259 ], [ %2257, %2233 ]
  %2307 = add i32 %2306, %2305
  %2308 = icmp ugt i32 %2242, %2307
  %2309 = select i1 %2308, i32 %2307, i32 %2242
  store i32 %2309, i32* %223, align 8
  br label %2310

2310:                                             ; preds = %2304, %2228
  %2311 = add nuw nsw i64 %2229, 1
  %2312 = icmp eq i64 %2311, %1870
  br i1 %2312, label %2317, label %2228

2313:                                             ; preds = %1981
  %2314 = trunc i64 %1908 to i32
  %2315 = bitcast %struct.vorbis_context_s* %16 to i8**
  %2316 = load i8*, i8** %2315, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %2316, i32 16, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.62, i64 0, i64 0), i32 %2314) #7
  br label %2492

2317:                                             ; preds = %2310, %2225
  %2318 = add nuw nsw i64 %1874, 1
  %2319 = load i8, i8* %1865, align 2
  %2320 = zext i8 %2319 to i64
  %2321 = icmp ult i64 %1874, %2320
  br i1 %2321, label %1873, label %2325

2322:                                             ; preds = %484
  %2323 = bitcast %struct.vorbis_context_s* %16 to i8**
  %2324 = load i8*, i8** %2323, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %2324, i32 16, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.58, i64 0, i64 0)) #7
  br label %2492

2325:                                             ; preds = %2317, %1825, %1332, %551, %482
  %2326 = sub i32 %438, %473
  %2327 = add nuw nsw i64 %436, 1
  %2328 = load i8, i8* %397, align 8
  %2329 = zext i8 %2328 to i64
  %2330 = icmp ult i64 %2327, %2329
  br i1 %2330, label %2331, label %2336

2331:                                             ; preds = %2325
  %2332 = mul i32 %473, %285
  %2333 = zext i32 %2332 to i64
  %2334 = getelementptr inbounds float, float* %440, i64 %2333
  %2335 = load i8, i8* %124, align 8
  br label %434

2336:                                             ; preds = %2325, %396
  %2337 = phi i32 [ %127, %396 ], [ %2326, %2325 ]
  %2338 = icmp eq i32 %2337, 0
  br i1 %2338, label %2339, label %2492

2339:                                             ; preds = %2336
  %2340 = load i16, i16* %367, align 2
  %2341 = icmp eq i16 %2340, 0
  br i1 %2341, label %2375, label %2342

2342:                                             ; preds = %2339
  %2343 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %272, i64 %277, i32 2
  %2344 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %272, i64 %277, i32 3
  %2345 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 2, i32 0
  %2346 = zext i16 %2340 to i64
  br label %2347

2347:                                             ; preds = %2347, %2342
  %2348 = phi i64 [ %2346, %2342 ], [ %2349, %2347 ]
  %2349 = add nsw i64 %2348, -1
  %2350 = load float*, float** %109, align 8
  %2351 = load i8*, i8** %2343, align 8
  %2352 = getelementptr inbounds i8, i8* %2351, i64 %2349
  %2353 = load i8, i8* %2352, align 1
  %2354 = zext i8 %2353 to i64
  %2355 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 %2354
  %2356 = load i8, i8* %2355, align 1
  %2357 = zext i8 %2356 to i32
  %2358 = mul i32 %284, %2357
  %2359 = lshr i32 %2358, 1
  %2360 = zext i32 %2359 to i64
  %2361 = getelementptr inbounds float, float* %2350, i64 %2360
  %2362 = load i8*, i8** %2344, align 8
  %2363 = getelementptr inbounds i8, i8* %2362, i64 %2349
  %2364 = load i8, i8* %2363, align 1
  %2365 = zext i8 %2364 to i64
  %2366 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 %2365
  %2367 = load i8, i8* %2366, align 1
  %2368 = zext i8 %2367 to i32
  %2369 = mul i32 %284, %2368
  %2370 = lshr i32 %2369, 1
  %2371 = zext i32 %2370 to i64
  %2372 = getelementptr inbounds float, float* %2350, i64 %2371
  %2373 = load void (float*, float*, i64)*, void (float*, float*, i64)** %2345, align 8
  tail call void %2373(float* %2361, float* %2372, i64 %311) #7
  %2374 = icmp sgt i64 %2349, 0
  br i1 %2374, label %2347, label %2375

2375:                                             ; preds = %2347, %2339
  %2376 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 4, i64 %282
  %2377 = load i8, i8* %124, align 8
  %2378 = icmp eq i8 %2377, 0
  br i1 %2378, label %2379, label %2385

2379:                                             ; preds = %2375
  %2380 = sext i32 %307 to i64
  %2381 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 12, i64 %2380
  %2382 = load i32, i32* %2381, align 4
  %2383 = add i32 %2382, %284
  %2384 = lshr i32 %2383, 2
  br label %2490

2385:                                             ; preds = %2375
  %2386 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 3
  %2387 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 4, i64 %282, i32 11
  %2388 = zext i8 %2377 to i64
  br label %2389

2389:                                             ; preds = %2389, %2385
  %2390 = phi i64 [ %2388, %2385 ], [ %2391, %2389 ]
  %2391 = add nsw i64 %2390, -1
  %2392 = load float*, float** %109, align 8
  %2393 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 %2391
  %2394 = load i8, i8* %2393, align 1
  %2395 = zext i8 %2394 to i32
  %2396 = mul i32 %284, %2395
  %2397 = lshr i32 %2396, 1
  %2398 = zext i32 %2397 to i64
  %2399 = getelementptr inbounds float, float* %2392, i64 %2398
  %2400 = load %struct.AVFloatDSPContext*, %struct.AVFloatDSPContext** %2386, align 8
  %2401 = getelementptr inbounds %struct.AVFloatDSPContext, %struct.AVFloatDSPContext* %2400, i64 0, i32 0
  %2402 = load void (float*, float*, float*, i32)*, void (float*, float*, float*, i32)** %2401, align 8
  %2403 = getelementptr inbounds [255 x float*], [255 x float*]* %8, i64 0, i64 %2391
  %2404 = load float*, float** %2403, align 8
  tail call void %2402(float* %2404, float* %2404, float* %2399, i32 %285) #7
  %2405 = load void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)** %2387, align 8
  tail call void %2405(%struct.FFTContext* %2376, float* %2399, float* %2404) #7
  %2406 = icmp sgt i64 %2391, 0
  br i1 %2406, label %2389, label %2407

2407:                                             ; preds = %2389
  %2408 = load i8, i8* %124, align 8
  %2409 = icmp eq i8 %2408, 0
  %2410 = sext i32 %307 to i64
  %2411 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 12, i64 %2410
  %2412 = load i32, i32* %2411, align 4
  %2413 = add i32 %2412, %284
  %2414 = lshr i32 %2413, 2
  br i1 %2409, label %2490, label %2415

2415:                                             ; preds = %2407
  %2416 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 12, i64 0
  %2417 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 27
  %2418 = and i32 %307, %281
  %2419 = zext i32 %2418 to i64
  %2420 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 13, i64 %2419
  %2421 = icmp eq i32 %307, %281
  %2422 = icmp ult i32 %307, %281
  %2423 = lshr i32 %284, 2
  %2424 = zext i32 %2423 to i64
  %2425 = and i32 %284, -4
  %2426 = zext i32 %2425 to i64
  br label %2427

2427:                                             ; preds = %2482, %2415
  %2428 = phi i64 [ 0, %2415 ], [ %2486, %2482 ]
  %2429 = load i32, i32* %2416, align 4
  %2430 = load i32, i32* %116, align 4
  %2431 = load float*, float** %109, align 8
  %2432 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 %2428
  %2433 = load i8, i8* %2432, align 1
  %2434 = zext i8 %2433 to i32
  %2435 = mul i32 %284, %2434
  %2436 = lshr i32 %2435, 1
  %2437 = zext i32 %2436 to i64
  %2438 = getelementptr inbounds float, float* %2431, i64 %2437
  %2439 = load float*, float** %2417, align 8
  %2440 = trunc i64 %2428 to i32
  %2441 = mul i32 %2430, %2440
  %2442 = lshr i32 %2441, 2
  %2443 = zext i32 %2442 to i64
  %2444 = getelementptr inbounds float, float* %2439, i64 %2443
  %2445 = getelementptr inbounds [255 x float*], [255 x float*]* %8, i64 0, i64 %2428
  %2446 = load float*, float** %2445, align 8
  %2447 = load float*, float** %2420, align 8
  br i1 %2421, label %2448, label %2452

2448:                                             ; preds = %2427
  %2449 = load %struct.AVFloatDSPContext*, %struct.AVFloatDSPContext** %2386, align 8
  %2450 = getelementptr inbounds %struct.AVFloatDSPContext, %struct.AVFloatDSPContext* %2449, i64 0, i32 5
  %2451 = load void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, float*, i32)** %2450, align 8
  tail call void %2451(float* %2446, float* %2444, float* %2438, float* %2447, i32 %2423) #7
  br label %2482

2452:                                             ; preds = %2427
  br i1 %2422, label %2453, label %2468

2453:                                             ; preds = %2452
  %2454 = load %struct.AVFloatDSPContext*, %struct.AVFloatDSPContext** %2386, align 8
  %2455 = getelementptr inbounds %struct.AVFloatDSPContext, %struct.AVFloatDSPContext* %2454, i64 0, i32 5
  %2456 = load void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, float*, i32)** %2455, align 8
  %2457 = lshr i32 %2429, 2
  tail call void %2456(float* %2446, float* %2444, float* %2438, float* %2447, i32 %2457) #7
  %2458 = lshr i32 %2429, 1
  %2459 = zext i32 %2458 to i64
  %2460 = getelementptr inbounds float, float* %2446, i64 %2459
  %2461 = bitcast float* %2460 to i8*
  %2462 = zext i32 %2457 to i64
  %2463 = getelementptr inbounds float, float* %2438, i64 %2462
  %2464 = bitcast float* %2463 to i8*
  %2465 = sub i32 %2430, %2429
  %2466 = and i32 %2465, -4
  %2467 = zext i32 %2466 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2461, i8* align 4 %2464, i64 %2467, i1 false) #7
  br label %2482

2468:                                             ; preds = %2452
  %2469 = bitcast float* %2446 to i8*
  %2470 = bitcast float* %2444 to i8*
  %2471 = sub i32 %2430, %2429
  %2472 = lshr i32 %2471, 2
  %2473 = zext i32 %2472 to i64
  %2474 = and i32 %2471, -4
  %2475 = zext i32 %2474 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2469, i8* align 4 %2470, i64 %2475, i1 false) #7
  %2476 = load %struct.AVFloatDSPContext*, %struct.AVFloatDSPContext** %2386, align 8
  %2477 = getelementptr inbounds %struct.AVFloatDSPContext, %struct.AVFloatDSPContext* %2476, i64 0, i32 5
  %2478 = load void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, float*, i32)** %2477, align 8
  %2479 = getelementptr inbounds float, float* %2446, i64 %2473
  %2480 = getelementptr inbounds float, float* %2444, i64 %2473
  %2481 = lshr i32 %2429, 2
  tail call void %2478(float* %2479, float* %2480, float* %2438, float* %2447, i32 %2481) #7
  br label %2482

2482:                                             ; preds = %2468, %2453, %2448
  %2483 = bitcast float* %2444 to i8*
  %2484 = getelementptr inbounds float, float* %2438, i64 %2424
  %2485 = bitcast float* %2484 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2483, i8* align 4 %2485, i64 %2426, i1 false) #7
  %2486 = add nuw nsw i64 %2428, 1
  %2487 = load i8, i8* %124, align 8
  %2488 = zext i8 %2487 to i64
  %2489 = icmp ult i64 %2486, %2488
  br i1 %2489, label %2427, label %2490

2490:                                             ; preds = %2482, %2407, %2379
  %2491 = phi i32 [ %2384, %2379 ], [ %2414, %2407 ], [ %2414, %2482 ]
  store i8 %280, i8* %225, align 1
  br label %2492

2492:                                             ; preds = %1199, %961, %864, %1075, %2155, %1663, %238, %262, %355, %479, %569, %1329, %1366, %1821, %1859, %2313, %2322, %2336, %2490
  %2493 = phi i32 [ -1094995529, %238 ], [ %2491, %2490 ], [ -1094995529, %262 ], [ -1094995529, %355 ], [ -1094995529, %2336 ], [ -1094995529, %479 ], [ -1094995529, %2313 ], [ -1094995529, %1859 ], [ -1094995529, %1821 ], [ -1094995529, %1366 ], [ -1094995529, %1329 ], [ -1094995529, %569 ], [ -1094995529, %2322 ], [ %1664, %1663 ], [ %2156, %2155 ], [ %1076, %1075 ], [ %865, %864 ], [ %962, %961 ], [ %1200, %1199 ]
  call void @llvm.lifetime.end.p0i8(i64 255, i8* nonnull %231) #7
  call void @llvm.lifetime.end.p0i8(i64 255, i8* nonnull %229) #7
  call void @llvm.lifetime.end.p0i8(i64 255, i8* nonnull %228) #7
  %2494 = icmp slt i32 %2493, 1
  br i1 %2494, label %2501, label %2495

2495:                                             ; preds = %2492
  %2496 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %16, i64 0, i32 5
  %2497 = load i8, i8* %2496, align 8
  %2498 = icmp eq i8 %2497, 0
  br i1 %2498, label %2499, label %2500

2499:                                             ; preds = %2495
  store i8 1, i8* %2496, align 8
  store i32 0, i32* %2, align 4
  tail call void @av_frame_unref(%struct.AVFrame* %17) #7
  br label %2501

2500:                                             ; preds = %2495
  store i32 %2493, i32* %120, align 8
  store i32 1, i32* %2, align 4
  br label %2501

2501:                                             ; preds = %23, %82, %206, %2492, %115, %102, %2500, %2499, %113, %105, %69, %57, %46
  %2502 = phi i32 [ %44, %46 ], [ %13, %57 ], [ %13, %69 ], [ %13, %2500 ], [ %13, %2499 ], [ -1094995529, %113 ], [ %103, %105 ], [ -1094995529, %23 ], [ -1094995529, %82 ], [ %13, %102 ], [ %121, %115 ], [ -1094995529, %206 ], [ %2493, %2492 ]
  call void @llvm.lifetime.end.p0i8(i64 2040, i8* nonnull %9) #7
  ret i32 %2502

2503:                                             ; preds = %420
  store i8 0, i8* %425, align 1
  store i8 0, i8* %430, align 1
  br label %2504

2504:                                             ; preds = %2503, %420
  %2505 = icmp sgt i64 %421, 0
  br i1 %2505, label %404, label %396
}

; Function Attrs: cold nounwind optsize ssp uwtable
define internal i32 @vorbis_decode_close(%struct.AVCodecContext* nocapture readonly) #2 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.vorbis_context_s**
  %4 = load %struct.vorbis_context_s*, %struct.vorbis_context_s** %3, align 8
  tail call fastcc void @vorbis_free(%struct.vorbis_context_s* %4)
  ret i32 0
}

; Function Attrs: cold nounwind optsize ssp uwtable
define internal void @vorbis_decode_flush(%struct.AVCodecContext* nocapture readonly) #2 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.vorbis_context_s**
  %4 = load %struct.vorbis_context_s*, %struct.vorbis_context_s** %3, align 8
  %5 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %4, i64 0, i32 27
  %6 = load float*, float** %5, align 8
  %7 = icmp eq float* %6, null
  br i1 %7, label %19, label %8

8:                                                ; preds = %1
  %9 = bitcast float* %6 to i8*
  %10 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %4, i64 0, i32 12, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = lshr i32 %11, 2
  %13 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %4, i64 0, i32 7
  %14 = load i8, i8* %13, align 8
  %15 = zext i8 %14 to i32
  %16 = mul i32 %12, %15
  %17 = zext i32 %16 to i64
  %18 = shl nuw nsw i64 %17, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %9, i8 0, i64 %18, i1 false)
  br label %19

19:                                               ; preds = %1, %8
  %20 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %4, i64 0, i32 25
  store i8 -1, i8* %20, align 1
  %21 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %4, i64 0, i32 5
  store i8 0, i8* %21, align 8
  ret void
}

declare void @ff_vorbisdsp_init(%struct.VorbisDSPContext*) local_unnamed_addr #4

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #4

declare i32 @avpriv_split_xiph_headers(i8*, i32, i32, i8**, i32*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @vorbis_parse_id_hdr(%struct.vorbis_context_s*) unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = lshr i32 %3, 3
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds i8, i8* %7, i64 %9
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 1
  %13 = and i32 %3, 7
  %14 = lshr i32 %12, %13
  %15 = and i32 %14, 255
  %16 = add i32 %3, 8
  %17 = icmp ugt i32 %5, %16
  %18 = select i1 %17, i32 %16, i32 %5
  store i32 %18, i32* %2, align 8
  %19 = icmp eq i32 %15, 118
  br i1 %19, label %20, label %85

20:                                               ; preds = %1
  %21 = lshr i32 %18, 3
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %7, i64 %22
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 1
  %26 = and i32 %18, 7
  %27 = lshr i32 %25, %26
  %28 = and i32 %27, 255
  %29 = add i32 %18, 8
  %30 = icmp ugt i32 %5, %29
  %31 = select i1 %30, i32 %29, i32 %5
  store i32 %31, i32* %2, align 8
  %32 = icmp eq i32 %28, 111
  br i1 %32, label %33, label %85

33:                                               ; preds = %20
  %34 = lshr i32 %31, 3
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %7, i64 %35
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = and i32 %31, 7
  %40 = lshr i32 %38, %39
  %41 = and i32 %40, 255
  %42 = add i32 %31, 8
  %43 = icmp ugt i32 %5, %42
  %44 = select i1 %43, i32 %42, i32 %5
  store i32 %44, i32* %2, align 8
  %45 = icmp eq i32 %41, 114
  br i1 %45, label %46, label %85

46:                                               ; preds = %33
  %47 = lshr i32 %44, 3
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %7, i64 %48
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = and i32 %44, 7
  %53 = lshr i32 %51, %52
  %54 = and i32 %53, 255
  %55 = add i32 %44, 8
  %56 = icmp ugt i32 %5, %55
  %57 = select i1 %56, i32 %55, i32 %5
  store i32 %57, i32* %2, align 8
  %58 = icmp eq i32 %54, 98
  br i1 %58, label %59, label %85

59:                                               ; preds = %46
  %60 = lshr i32 %57, 3
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %7, i64 %61
  %63 = bitcast i8* %62 to i32*
  %64 = load i32, i32* %63, align 1
  %65 = and i32 %57, 7
  %66 = lshr i32 %64, %65
  %67 = and i32 %66, 255
  %68 = add i32 %57, 8
  %69 = icmp ugt i32 %5, %68
  %70 = select i1 %69, i32 %68, i32 %5
  store i32 %70, i32* %2, align 8
  %71 = icmp eq i32 %67, 105
  br i1 %71, label %72, label %85

72:                                               ; preds = %59
  %73 = lshr i32 %70, 3
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %7, i64 %74
  %76 = bitcast i8* %75 to i32*
  %77 = load i32, i32* %76, align 1
  %78 = and i32 %70, 7
  %79 = lshr i32 %77, %78
  %80 = and i32 %79, 255
  %81 = add i32 %70, 8
  %82 = icmp ugt i32 %5, %81
  %83 = select i1 %82, i32 %81, i32 %5
  store i32 %83, i32* %2, align 8
  %84 = icmp eq i32 %80, 115
  br i1 %84, label %88, label %85

85:                                               ; preds = %72, %59, %46, %33, %20, %1
  %86 = bitcast %struct.vorbis_context_s* %0 to i8**
  %87 = load i8*, i8** %86, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %87, i32 16, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.8, i64 0, i64 0)) #7
  br label %332

88:                                               ; preds = %72
  %89 = lshr i32 %83, 3
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %7, i64 %90
  %92 = bitcast i8* %91 to i32*
  %93 = load i32, i32* %92, align 1
  %94 = and i32 %83, 7
  %95 = lshr i32 %93, %94
  %96 = and i32 %95, 65535
  %97 = add i32 %83, 16
  %98 = icmp ugt i32 %5, %97
  %99 = select i1 %98, i32 %97, i32 %5
  store i32 %99, i32* %2, align 8
  %100 = lshr i32 %99, 3
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %7, i64 %101
  %103 = bitcast i8* %102 to i32*
  %104 = load i32, i32* %103, align 1
  %105 = and i32 %99, 7
  %106 = lshr i32 %104, %105
  %107 = add i32 %99, 16
  %108 = icmp ugt i32 %5, %107
  %109 = select i1 %108, i32 %107, i32 %5
  store i32 %109, i32* %2, align 8
  %110 = shl i32 %106, 16
  %111 = or i32 %110, %96
  %112 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 6
  store i32 %111, i32* %112, align 4
  %113 = lshr i32 %109, 3
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %7, i64 %114
  %116 = bitcast i8* %115 to i32*
  %117 = load i32, i32* %116, align 1
  %118 = and i32 %109, 7
  %119 = lshr i32 %117, %118
  %120 = and i32 %119, 255
  %121 = add i32 %109, 8
  %122 = icmp ugt i32 %5, %121
  %123 = select i1 %122, i32 %121, i32 %5
  store i32 %123, i32* %2, align 8
  %124 = trunc i32 %119 to i8
  %125 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 7
  store i8 %124, i8* %125, align 8
  %126 = icmp eq i32 %120, 0
  br i1 %126, label %127, label %130

127:                                              ; preds = %88
  %128 = bitcast %struct.vorbis_context_s* %0 to i8**
  %129 = load i8*, i8** %128, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %129, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0)) #7
  br label %332

130:                                              ; preds = %88
  %131 = lshr i32 %123, 3
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds i8, i8* %7, i64 %132
  %134 = bitcast i8* %133 to i32*
  %135 = load i32, i32* %134, align 1
  %136 = and i32 %123, 7
  %137 = lshr i32 %135, %136
  %138 = and i32 %137, 65535
  %139 = add i32 %123, 16
  %140 = icmp ugt i32 %5, %139
  %141 = select i1 %140, i32 %139, i32 %5
  store i32 %141, i32* %2, align 8
  %142 = lshr i32 %141, 3
  %143 = zext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %7, i64 %143
  %145 = bitcast i8* %144 to i32*
  %146 = load i32, i32* %145, align 1
  %147 = and i32 %141, 7
  %148 = lshr i32 %146, %147
  %149 = add i32 %141, 16
  %150 = icmp ugt i32 %5, %149
  %151 = select i1 %150, i32 %149, i32 %5
  store i32 %151, i32* %2, align 8
  %152 = shl i32 %148, 16
  %153 = or i32 %152, %138
  %154 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 8
  store i32 %153, i32* %154, align 4
  %155 = icmp eq i32 %153, 0
  br i1 %155, label %156, label %159

156:                                              ; preds = %130
  %157 = bitcast %struct.vorbis_context_s* %0 to i8**
  %158 = load i8*, i8** %157, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %158, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0)) #7
  br label %332

159:                                              ; preds = %130
  %160 = lshr i32 %151, 3
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds i8, i8* %7, i64 %161
  %163 = bitcast i8* %162 to i32*
  %164 = load i32, i32* %163, align 1
  %165 = and i32 %151, 7
  %166 = lshr i32 %164, %165
  %167 = and i32 %166, 65535
  %168 = add i32 %151, 16
  %169 = icmp ugt i32 %5, %168
  %170 = select i1 %169, i32 %168, i32 %5
  store i32 %170, i32* %2, align 8
  %171 = lshr i32 %170, 3
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %7, i64 %172
  %174 = bitcast i8* %173 to i32*
  %175 = load i32, i32* %174, align 1
  %176 = and i32 %170, 7
  %177 = lshr i32 %175, %176
  %178 = add i32 %170, 16
  %179 = icmp ugt i32 %5, %178
  %180 = select i1 %179, i32 %178, i32 %5
  store i32 %180, i32* %2, align 8
  %181 = shl i32 %177, 16
  %182 = or i32 %181, %167
  %183 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 9
  store i32 %182, i32* %183, align 8
  %184 = lshr i32 %180, 3
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds i8, i8* %7, i64 %185
  %187 = bitcast i8* %186 to i32*
  %188 = load i32, i32* %187, align 1
  %189 = and i32 %180, 7
  %190 = lshr i32 %188, %189
  %191 = and i32 %190, 65535
  %192 = add i32 %180, 16
  %193 = icmp ugt i32 %5, %192
  %194 = select i1 %193, i32 %192, i32 %5
  store i32 %194, i32* %2, align 8
  %195 = lshr i32 %194, 3
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds i8, i8* %7, i64 %196
  %198 = bitcast i8* %197 to i32*
  %199 = load i32, i32* %198, align 1
  %200 = and i32 %194, 7
  %201 = lshr i32 %199, %200
  %202 = add i32 %194, 16
  %203 = icmp ugt i32 %5, %202
  %204 = select i1 %203, i32 %202, i32 %5
  store i32 %204, i32* %2, align 8
  %205 = shl i32 %201, 16
  %206 = or i32 %205, %191
  %207 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 10
  store i32 %206, i32* %207, align 4
  %208 = lshr i32 %204, 3
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds i8, i8* %7, i64 %209
  %211 = bitcast i8* %210 to i32*
  %212 = load i32, i32* %211, align 1
  %213 = and i32 %204, 7
  %214 = lshr i32 %212, %213
  %215 = and i32 %214, 65535
  %216 = add i32 %204, 16
  %217 = icmp ugt i32 %5, %216
  %218 = select i1 %217, i32 %216, i32 %5
  store i32 %218, i32* %2, align 8
  %219 = lshr i32 %218, 3
  %220 = zext i32 %219 to i64
  %221 = getelementptr inbounds i8, i8* %7, i64 %220
  %222 = bitcast i8* %221 to i32*
  %223 = load i32, i32* %222, align 1
  %224 = and i32 %218, 7
  %225 = lshr i32 %223, %224
  %226 = add i32 %218, 16
  %227 = icmp ugt i32 %5, %226
  %228 = select i1 %227, i32 %226, i32 %5
  store i32 %228, i32* %2, align 8
  %229 = shl i32 %225, 16
  %230 = or i32 %229, %215
  %231 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 11
  store i32 %230, i32* %231, align 8
  %232 = lshr i32 %228, 3
  %233 = zext i32 %232 to i64
  %234 = getelementptr inbounds i8, i8* %7, i64 %233
  %235 = bitcast i8* %234 to i32*
  %236 = load i32, i32* %235, align 1
  %237 = and i32 %228, 7
  %238 = lshr i32 %236, %237
  %239 = and i32 %238, 15
  %240 = add i32 %228, 4
  %241 = icmp ugt i32 %5, %240
  %242 = select i1 %241, i32 %240, i32 %5
  store i32 %242, i32* %2, align 8
  %243 = lshr i32 %242, 3
  %244 = zext i32 %243 to i64
  %245 = getelementptr inbounds i8, i8* %7, i64 %244
  %246 = bitcast i8* %245 to i32*
  %247 = load i32, i32* %246, align 1
  %248 = and i32 %242, 7
  %249 = lshr i32 %247, %248
  %250 = and i32 %249, 15
  %251 = add i32 %242, 4
  %252 = icmp ugt i32 %5, %251
  %253 = select i1 %252, i32 %251, i32 %5
  store i32 %253, i32* %2, align 8
  %254 = add nsw i32 %239, -6
  %255 = add nsw i32 %250, -6
  %256 = or i32 %255, %254
  %257 = icmp ugt i32 %256, 7
  %258 = icmp ult i32 %250, %239
  %259 = or i1 %258, %257
  br i1 %259, label %260, label %263

260:                                              ; preds = %159
  %261 = bitcast %struct.vorbis_context_s* %0 to i8**
  %262 = load i8*, i8** %261, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %262, i32 16, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.11, i64 0, i64 0)) #7
  br label %332

263:                                              ; preds = %159
  %264 = shl i32 1, %239
  %265 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 12, i64 0
  store i32 %264, i32* %265, align 4
  %266 = shl i32 1, %250
  %267 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 12, i64 1
  store i32 %266, i32* %267, align 4
  %268 = zext i32 %254 to i64
  %269 = getelementptr inbounds [8 x float*], [8 x float*]* @ff_vorbis_vwin, i64 0, i64 %268
  %270 = bitcast float** %269 to i64*
  %271 = load i64, i64* %270, align 8
  %272 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 13
  %273 = bitcast [2 x float*]* %272 to i64*
  store i64 %271, i64* %273, align 8
  %274 = zext i32 %255 to i64
  %275 = getelementptr inbounds [8 x float*], [8 x float*]* @ff_vorbis_vwin, i64 0, i64 %274
  %276 = bitcast float** %275 to i64*
  %277 = load i64, i64* %276, align 8
  %278 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 13, i64 1
  %279 = bitcast float** %278 to i64*
  store i64 %277, i64* %279, align 8
  %280 = lshr i32 %253, 3
  %281 = zext i32 %280 to i64
  %282 = getelementptr inbounds i8, i8* %7, i64 %281
  %283 = load i8, i8* %282, align 1
  %284 = and i32 %253, 7
  %285 = zext i8 %283 to i32
  %286 = icmp slt i32 %253, %5
  %287 = zext i1 %286 to i32
  %288 = add i32 %253, %287
  store i32 %288, i32* %2, align 8
  %289 = shl i32 1, %284
  %290 = and i32 %289, %285
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %292, label %295

292:                                              ; preds = %263
  %293 = bitcast %struct.vorbis_context_s* %0 to i8**
  %294 = load i8*, i8** %293, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %294, i32 16, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.12, i64 0, i64 0)) #7
  br label %332

295:                                              ; preds = %263
  %296 = lshr i32 %266, 1
  %297 = zext i32 %296 to i64
  %298 = shl i32 %119, 2
  %299 = and i32 %298, 1020
  %300 = zext i32 %299 to i64
  %301 = tail call i8* @av_malloc_array(i64 %297, i64 %300) #7
  %302 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 26
  %303 = bitcast float** %302 to i8**
  store i8* %301, i8** %303, align 8
  %304 = load i32, i32* %267, align 4
  %305 = lshr i32 %304, 2
  %306 = zext i32 %305 to i64
  %307 = load i8, i8* %125, align 8
  %308 = zext i8 %307 to i64
  %309 = shl nuw nsw i64 %308, 2
  %310 = tail call i8* @av_mallocz_array(i64 %306, i64 %309) #7
  %311 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 27
  %312 = bitcast float** %311 to i8**
  store i8* %310, i8** %312, align 8
  %313 = load float*, float** %302, align 8
  %314 = icmp eq float* %313, null
  %315 = icmp eq i8* %310, null
  %316 = or i1 %315, %314
  br i1 %316, label %332, label %317

317:                                              ; preds = %295
  %318 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 25
  store i8 -1, i8* %318, align 1
  %319 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 4, i64 0
  %320 = tail call i32 @ff_mdct_init(%struct.FFTContext* %319, i32 %239, i32 1, double -1.000000e+00) #7
  %321 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 4, i64 1
  %322 = tail call i32 @ff_mdct_init(%struct.FFTContext* %321, i32 %250, i32 1, double -1.000000e+00) #7
  %323 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 0
  %324 = load %struct.AVCodecContext*, %struct.AVCodecContext** %323, align 8
  %325 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %324, i64 0, i32 13
  %326 = load i32, i32* %325, align 4
  %327 = and i32 %326, 8388608
  %328 = tail call %struct.AVFloatDSPContext* @avpriv_float_dsp_alloc(i32 %327) #7
  %329 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 3
  store %struct.AVFloatDSPContext* %328, %struct.AVFloatDSPContext** %329, align 8
  %330 = icmp eq %struct.AVFloatDSPContext* %328, null
  %331 = select i1 %330, i32 -12, i32 0
  br label %332

332:                                              ; preds = %317, %295, %292, %260, %156, %127, %85
  %333 = phi i32 [ -1094995529, %85 ], [ -1094995529, %127 ], [ -1094995529, %156 ], [ -1094995529, %260 ], [ -1094995529, %292 ], [ -12, %295 ], [ %331, %317 ]
  ret i32 %333
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @vorbis_free(%struct.vorbis_context_s*) unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 26
  %3 = bitcast float** %2 to i8*
  tail call void @av_freep(i8* %3) #7
  %4 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 27
  %5 = bitcast float** %4 to i8*
  tail call void @av_freep(i8* %5) #7
  %6 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 3
  %7 = bitcast %struct.AVFloatDSPContext** %6 to i8*
  tail call void @av_freep(i8* %7) #7
  %8 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 19
  %9 = load %struct.vorbis_residue*, %struct.vorbis_residue** %8, align 8
  %10 = icmp eq %struct.vorbis_residue* %9, null
  br i1 %10, label %29, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 18
  %13 = load i8, i8* %12, align 8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %29, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %9, i64 0, i32 9
  %17 = bitcast i8** %16 to i8*
  tail call void @av_freep(i8* %17) #7
  %18 = load i8, i8* %12, align 8
  %19 = icmp ugt i8 %18, 1
  br i1 %19, label %20, label %29

20:                                               ; preds = %15, %20
  %21 = phi i64 [ %25, %20 ], [ 1, %15 ]
  %22 = load %struct.vorbis_residue*, %struct.vorbis_residue** %8, align 8
  %23 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %22, i64 %21, i32 9
  %24 = bitcast i8** %23 to i8*
  tail call void @av_freep(i8* %24) #7
  %25 = add nuw nsw i64 %21, 1
  %26 = load i8, i8* %12, align 8
  %27 = zext i8 %26 to i64
  %28 = icmp ult i64 %25, %27
  br i1 %28, label %20, label %29

29:                                               ; preds = %20, %15, %11, %1
  %30 = bitcast %struct.vorbis_residue** %8 to i8*
  tail call void @av_freep(i8* %30) #7
  %31 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 23
  %32 = bitcast %struct.vorbis_mode** %31 to i8*
  tail call void @av_freep(i8* %32) #7
  %33 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 4, i64 0
  tail call void @ff_mdct_end(%struct.FFTContext* %33) #7
  %34 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 4, i64 1
  tail call void @ff_mdct_end(%struct.FFTContext* %34) #7
  %35 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 15
  %36 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %35, align 8
  %37 = icmp eq %struct.vorbis_codebook* %36, null
  br i1 %37, label %60, label %38

38:                                               ; preds = %29
  %39 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 14
  %40 = load i16, i16* %39, align 8
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %60, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %36, i64 0, i32 4
  %44 = bitcast float** %43 to i8*
  tail call void @av_freep(i8* %44) #7
  %45 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %35, align 8
  %46 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %45, i64 0, i32 3
  tail call void @ff_free_vlc(%struct.VLC* %46) #7
  %47 = load i16, i16* %39, align 8
  %48 = icmp ugt i16 %47, 1
  br i1 %48, label %49, label %60

49:                                               ; preds = %42, %49
  %50 = phi i64 [ %56, %49 ], [ 1, %42 ]
  %51 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %35, align 8
  %52 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %51, i64 %50, i32 4
  %53 = bitcast float** %52 to i8*
  tail call void @av_freep(i8* %53) #7
  %54 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %35, align 8
  %55 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %54, i64 %50, i32 3
  tail call void @ff_free_vlc(%struct.VLC* %55) #7
  %56 = add nuw nsw i64 %50, 1
  %57 = load i16, i16* %39, align 8
  %58 = zext i16 %57 to i64
  %59 = icmp ult i64 %56, %58
  br i1 %59, label %49, label %60

60:                                               ; preds = %49, %42, %38, %29
  %61 = bitcast %struct.vorbis_codebook** %35 to i8*
  tail call void @av_freep(i8* %61) #7
  %62 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 17
  %63 = load %struct.vorbis_floor*, %struct.vorbis_floor** %62, align 8
  %64 = icmp eq %struct.vorbis_floor* %63, null
  br i1 %64, label %94, label %65

65:                                               ; preds = %60
  %66 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 16
  %67 = load i8, i8* %66, align 8
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %94, label %69

69:                                               ; preds = %65, %92
  %70 = phi %struct.vorbis_floor* [ %93, %92 ], [ %63, %65 ]
  %71 = phi i64 [ %88, %92 ], [ 0, %65 ]
  %72 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %70, i64 %71, i32 0
  %73 = load i8, i8* %72, align 8
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %75, label %83

75:                                               ; preds = %69
  %76 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %70, i64 %71, i32 2, i32 0, i32 1, i64 7
  tail call void @av_freep(i8* %76) #7
  %77 = load %struct.vorbis_floor*, %struct.vorbis_floor** %62, align 8
  %78 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %77, i64 %71, i32 2, i32 0, i32 1, i64 15
  tail call void @av_freep(i8* %78) #7
  %79 = load %struct.vorbis_floor*, %struct.vorbis_floor** %62, align 8
  %80 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %79, i64 %71, i32 2, i32 0, i32 2, i64 7
  tail call void @av_freep(i8* %80) #7
  %81 = load %struct.vorbis_floor*, %struct.vorbis_floor** %62, align 8
  %82 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %81, i64 %71, i32 2, i32 0, i32 2, i64 15
  br label %86

83:                                               ; preds = %69
  %84 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %70, i64 %71, i32 2, i32 0, i32 8
  %85 = bitcast %struct.vorbis_floor1_entry** %84 to i8*
  br label %86

86:                                               ; preds = %75, %83
  %87 = phi i8* [ %82, %75 ], [ %85, %83 ]
  tail call void @av_freep(i8* %87) #7
  %88 = add nuw nsw i64 %71, 1
  %89 = load i8, i8* %66, align 8
  %90 = zext i8 %89 to i64
  %91 = icmp ult i64 %88, %90
  br i1 %91, label %92, label %94

92:                                               ; preds = %86
  %93 = load %struct.vorbis_floor*, %struct.vorbis_floor** %62, align 8
  br label %69

94:                                               ; preds = %86, %65, %60
  %95 = bitcast %struct.vorbis_floor** %62 to i8*
  tail call void @av_freep(i8* %95) #7
  %96 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 21
  %97 = load %struct.vorbis_mapping*, %struct.vorbis_mapping** %96, align 8
  %98 = icmp eq %struct.vorbis_mapping* %97, null
  br i1 %98, label %129, label %99

99:                                               ; preds = %94
  %100 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 20
  %101 = load i8, i8* %100, align 8
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %129, label %103

103:                                              ; preds = %99
  %104 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %97, i64 0, i32 2
  %105 = bitcast i8** %104 to i8*
  tail call void @av_freep(i8* %105) #7
  %106 = load %struct.vorbis_mapping*, %struct.vorbis_mapping** %96, align 8
  %107 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %106, i64 0, i32 3
  %108 = bitcast i8** %107 to i8*
  tail call void @av_freep(i8* %108) #7
  %109 = load %struct.vorbis_mapping*, %struct.vorbis_mapping** %96, align 8
  %110 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %109, i64 0, i32 4
  %111 = bitcast i8** %110 to i8*
  tail call void @av_freep(i8* %111) #7
  %112 = load i8, i8* %100, align 8
  %113 = icmp ugt i8 %112, 1
  br i1 %113, label %114, label %129

114:                                              ; preds = %103, %114
  %115 = phi i64 [ %125, %114 ], [ 1, %103 ]
  %116 = load %struct.vorbis_mapping*, %struct.vorbis_mapping** %96, align 8
  %117 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %116, i64 %115, i32 2
  %118 = bitcast i8** %117 to i8*
  tail call void @av_freep(i8* %118) #7
  %119 = load %struct.vorbis_mapping*, %struct.vorbis_mapping** %96, align 8
  %120 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %119, i64 %115, i32 3
  %121 = bitcast i8** %120 to i8*
  tail call void @av_freep(i8* %121) #7
  %122 = load %struct.vorbis_mapping*, %struct.vorbis_mapping** %96, align 8
  %123 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %122, i64 %115, i32 4
  %124 = bitcast i8** %123 to i8*
  tail call void @av_freep(i8* %124) #7
  %125 = add nuw nsw i64 %115, 1
  %126 = load i8, i8* %100, align 8
  %127 = zext i8 %126 to i64
  %128 = icmp ult i64 %125, %127
  br i1 %128, label %114, label %129

129:                                              ; preds = %114, %103, %99, %94
  %130 = bitcast %struct.vorbis_mapping** %96 to i8*
  tail call void @av_freep(i8* %130) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @vorbis_parse_setup_hdr(%struct.vorbis_context_s*) unnamed_addr #3 {
  %2 = alloca [64 x i8], align 16
  %3 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = lshr i32 %4, 3
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %8, i64 %10
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = and i32 %4, 7
  %15 = lshr i32 %13, %14
  %16 = and i32 %15, 255
  %17 = add i32 %4, 8
  %18 = icmp ugt i32 %6, %17
  %19 = select i1 %18, i32 %17, i32 %6
  store i32 %19, i32* %3, align 8
  %20 = icmp eq i32 %16, 118
  br i1 %20, label %21, label %86

21:                                               ; preds = %1
  %22 = lshr i32 %19, 3
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %8, i64 %23
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = and i32 %19, 7
  %28 = lshr i32 %26, %27
  %29 = and i32 %28, 255
  %30 = add i32 %19, 8
  %31 = icmp ugt i32 %6, %30
  %32 = select i1 %31, i32 %30, i32 %6
  store i32 %32, i32* %3, align 8
  %33 = icmp eq i32 %29, 111
  br i1 %33, label %34, label %86

34:                                               ; preds = %21
  %35 = lshr i32 %32, 3
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %8, i64 %36
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = and i32 %32, 7
  %41 = lshr i32 %39, %40
  %42 = and i32 %41, 255
  %43 = add i32 %32, 8
  %44 = icmp ugt i32 %6, %43
  %45 = select i1 %44, i32 %43, i32 %6
  store i32 %45, i32* %3, align 8
  %46 = icmp eq i32 %42, 114
  br i1 %46, label %47, label %86

47:                                               ; preds = %34
  %48 = lshr i32 %45, 3
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %8, i64 %49
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = and i32 %45, 7
  %54 = lshr i32 %52, %53
  %55 = and i32 %54, 255
  %56 = add i32 %45, 8
  %57 = icmp ugt i32 %6, %56
  %58 = select i1 %57, i32 %56, i32 %6
  store i32 %58, i32* %3, align 8
  %59 = icmp eq i32 %55, 98
  br i1 %59, label %60, label %86

60:                                               ; preds = %47
  %61 = lshr i32 %58, 3
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %8, i64 %62
  %64 = bitcast i8* %63 to i32*
  %65 = load i32, i32* %64, align 1
  %66 = and i32 %58, 7
  %67 = lshr i32 %65, %66
  %68 = and i32 %67, 255
  %69 = add i32 %58, 8
  %70 = icmp ugt i32 %6, %69
  %71 = select i1 %70, i32 %69, i32 %6
  store i32 %71, i32* %3, align 8
  %72 = icmp eq i32 %68, 105
  br i1 %72, label %73, label %86

73:                                               ; preds = %60
  %74 = lshr i32 %71, 3
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %8, i64 %75
  %77 = bitcast i8* %76 to i32*
  %78 = load i32, i32* %77, align 1
  %79 = and i32 %71, 7
  %80 = lshr i32 %78, %79
  %81 = and i32 %80, 255
  %82 = add i32 %71, 8
  %83 = icmp ugt i32 %6, %82
  %84 = select i1 %83, i32 %82, i32 %6
  store i32 %84, i32* %3, align 8
  %85 = icmp eq i32 %81, 115
  br i1 %85, label %88, label %86

86:                                               ; preds = %73, %60, %47, %34, %21, %1
  %87 = bitcast %struct.vorbis_context_s* %0 to i8**
  br label %2200

88:                                               ; preds = %73
  %89 = lshr i32 %84, 3
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %8, i64 %90
  %92 = bitcast i8* %91 to i32*
  %93 = load i32, i32* %92, align 1
  %94 = and i32 %84, 7
  %95 = lshr i32 %93, %94
  %96 = add i32 %84, 8
  %97 = icmp ugt i32 %6, %96
  %98 = select i1 %97, i32 %96, i32 %6
  store i32 %98, i32* %3, align 8
  %99 = trunc i32 %95 to i16
  %100 = and i16 %99, 255
  %101 = add nuw nsw i16 %100, 1
  %102 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 14
  store i16 %101, i16* %102, align 8
  %103 = mul nuw nsw i16 %101, 48
  %104 = zext i16 %103 to i64
  %105 = tail call noalias i8* @av_mallocz(i64 %104) #7
  %106 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 15
  %107 = bitcast %struct.vorbis_codebook** %106 to i8**
  store i8* %105, i8** %107, align 8
  %108 = tail call noalias i8* @av_mallocz(i64 65536) #7
  %109 = tail call noalias i8* @av_mallocz(i64 262144) #7
  %110 = bitcast i8* %109 to i32*
  %111 = tail call noalias i8* @av_malloc(i64 131072) #7
  %112 = bitcast i8* %111 to i16*
  %113 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %106, align 8
  %114 = icmp ne %struct.vorbis_codebook* %113, null
  %115 = icmp ne i8* %108, null
  %116 = and i1 %115, %114
  %117 = icmp ne i8* %109, null
  %118 = and i1 %117, %116
  %119 = icmp ne i8* %111, null
  %120 = and i1 %119, %118
  br i1 %120, label %121, label %736

121:                                              ; preds = %88
  %122 = load i16, i16* %102, align 8
  %123 = icmp eq i16 %122, 0
  br i1 %123, label %739, label %124

124:                                              ; preds = %121
  %125 = load i32, i32* %3, align 8
  %126 = load i32, i32* %5, align 8
  %127 = load i8*, i8** %7, align 8
  %128 = lshr i32 %125, 3
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %127, i64 %129
  %131 = bitcast i8* %130 to i32*
  %132 = load i32, i32* %131, align 1
  %133 = and i32 %125, 7
  %134 = lshr i32 %132, %133
  %135 = and i32 %134, 16777215
  %136 = add i32 %125, 24
  %137 = icmp ugt i32 %126, %136
  %138 = select i1 %137, i32 %136, i32 %126
  store i32 %138, i32* %3, align 8
  %139 = icmp eq i32 %135, 5653314
  br i1 %139, label %146, label %142

140:                                              ; preds = %719
  %141 = trunc i64 %715 to i32
  br label %142

142:                                              ; preds = %140, %124
  %143 = phi i32 [ 0, %124 ], [ %141, %140 ]
  %144 = bitcast %struct.vorbis_context_s* %0 to i8**
  %145 = load i8*, i8** %144, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %145, i32 16, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.21, i64 0, i64 0), i32 %143) #7
  br label %736

146:                                              ; preds = %124, %719
  %147 = phi i32 [ %734, %719 ], [ %138, %124 ]
  %148 = phi i8* [ %723, %719 ], [ %127, %124 ]
  %149 = phi i32 [ %722, %719 ], [ %126, %124 ]
  %150 = phi i64 [ %715, %719 ], [ 0, %124 ]
  %151 = phi %struct.vorbis_codebook* [ %720, %719 ], [ %113, %124 ]
  %152 = lshr i32 %147, 3
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %148, i64 %153
  %155 = bitcast i8* %154 to i32*
  %156 = load i32, i32* %155, align 1
  %157 = and i32 %147, 7
  %158 = lshr i32 %156, %157
  %159 = add i32 %147, 16
  %160 = icmp ugt i32 %149, %159
  %161 = select i1 %160, i32 %159, i32 %149
  store i32 %161, i32* %3, align 8
  %162 = trunc i32 %158 to i8
  %163 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %151, i64 %150, i32 0
  store i8 %162, i8* %163, align 8
  %164 = and i32 %158, 255
  %165 = add nsw i32 %164, -1
  %166 = icmp ugt i32 %165, 15
  br i1 %166, label %167, label %171

167:                                              ; preds = %146
  %168 = trunc i64 %150 to i32
  %169 = bitcast %struct.vorbis_context_s* %0 to i8**
  %170 = load i8*, i8** %169, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %170, i32 16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.22, i64 0, i64 0), i32 %168, i32 %164) #7
  br label %736

171:                                              ; preds = %146
  %172 = load i32, i32* %3, align 8
  %173 = load i32, i32* %5, align 8
  %174 = load i8*, i8** %7, align 8
  %175 = lshr i32 %172, 3
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i8, i8* %174, i64 %176
  %178 = bitcast i8* %177 to i32*
  %179 = load i32, i32* %178, align 1
  %180 = and i32 %172, 7
  %181 = lshr i32 %179, %180
  %182 = and i32 %181, 16777215
  %183 = add i32 %172, 24
  %184 = icmp ugt i32 %173, %183
  %185 = select i1 %184, i32 %183, i32 %173
  store i32 %185, i32* %3, align 8
  %186 = icmp ugt i32 %182, 65536
  br i1 %186, label %187, label %191

187:                                              ; preds = %171
  %188 = trunc i64 %150 to i32
  %189 = bitcast %struct.vorbis_context_s* %0 to i8**
  %190 = load i8*, i8** %189, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %190, i32 16, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.23, i64 0, i64 0), i32 %188, i32 %182) #7
  br label %736

191:                                              ; preds = %171
  %192 = lshr i32 %185, 3
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds i8, i8* %174, i64 %193
  %195 = load i8, i8* %194, align 1
  %196 = and i32 %185, 7
  %197 = zext i8 %195 to i32
  %198 = icmp slt i32 %185, %173
  %199 = zext i1 %198 to i32
  %200 = add i32 %185, %199
  store i32 %200, i32* %3, align 8
  %201 = shl i32 1, %196
  %202 = and i32 %201, %197
  %203 = icmp eq i32 %202, 0
  %204 = lshr i32 %200, 3
  %205 = zext i32 %204 to i64
  %206 = getelementptr inbounds i8, i8* %174, i64 %205
  br i1 %203, label %207, label %302

207:                                              ; preds = %191
  %208 = load i8, i8* %206, align 1
  %209 = and i32 %200, 7
  %210 = zext i8 %208 to i32
  %211 = icmp slt i32 %200, %173
  %212 = zext i1 %211 to i32
  %213 = add i32 %200, %212
  store i32 %213, i32* %3, align 8
  %214 = shl i32 1, %209
  %215 = and i32 %214, %210
  %216 = icmp eq i32 %215, 0
  %217 = icmp ne i32 %182, 0
  br i1 %216, label %221, label %218

218:                                              ; preds = %207
  br i1 %217, label %219, label %401

219:                                              ; preds = %218
  %220 = zext i32 %182 to i64
  br label %228

221:                                              ; preds = %207
  br i1 %217, label %222, label %401

222:                                              ; preds = %221
  %223 = zext i32 %182 to i64
  %224 = and i64 %223, 1
  %225 = icmp eq i32 %182, 1
  br i1 %225, label %381, label %226

226:                                              ; preds = %222
  %227 = sub nsw i64 %223, %224
  br label %266

228:                                              ; preds = %259, %219
  %229 = phi i32 [ %213, %219 ], [ %260, %259 ]
  %230 = phi i64 [ 0, %219 ], [ %264, %259 ]
  %231 = phi i32 [ 0, %219 ], [ %262, %259 ]
  %232 = lshr i32 %229, 3
  %233 = zext i32 %232 to i64
  %234 = getelementptr inbounds i8, i8* %174, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = and i32 %229, 7
  %237 = zext i8 %235 to i32
  %238 = icmp slt i32 %229, %173
  %239 = zext i1 %238 to i32
  %240 = add i32 %229, %239
  store i32 %240, i32* %3, align 8
  %241 = shl i32 1, %236
  %242 = and i32 %241, %237
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %259, label %244

244:                                              ; preds = %228
  %245 = lshr i32 %240, 3
  %246 = zext i32 %245 to i64
  %247 = getelementptr inbounds i8, i8* %174, i64 %246
  %248 = bitcast i8* %247 to i32*
  %249 = load i32, i32* %248, align 1
  %250 = and i32 %240, 7
  %251 = lshr i32 %249, %250
  %252 = add i32 %240, 5
  %253 = icmp ugt i32 %173, %252
  %254 = select i1 %253, i32 %252, i32 %173
  store i32 %254, i32* %3, align 8
  %255 = trunc i32 %251 to i8
  %256 = and i8 %255, 31
  %257 = add nuw nsw i8 %256, 1
  %258 = add i32 %231, 1
  br label %259

259:                                              ; preds = %244, %228
  %260 = phi i32 [ %254, %244 ], [ %240, %228 ]
  %261 = phi i8 [ %257, %244 ], [ 0, %228 ]
  %262 = phi i32 [ %258, %244 ], [ %231, %228 ]
  %263 = getelementptr inbounds i8, i8* %108, i64 %230
  store i8 %261, i8* %263, align 1
  %264 = add nuw nsw i64 %230, 1
  %265 = icmp eq i64 %264, %220
  br i1 %265, label %401, label %228

266:                                              ; preds = %266, %226
  %267 = phi i32 [ %213, %226 ], [ %294, %266 ]
  %268 = phi i64 [ 0, %226 ], [ %299, %266 ]
  %269 = phi i64 [ %227, %226 ], [ %300, %266 ]
  %270 = lshr i32 %267, 3
  %271 = zext i32 %270 to i64
  %272 = getelementptr inbounds i8, i8* %174, i64 %271
  %273 = bitcast i8* %272 to i32*
  %274 = load i32, i32* %273, align 1
  %275 = and i32 %267, 7
  %276 = lshr i32 %274, %275
  %277 = add i32 %267, 5
  %278 = icmp ugt i32 %173, %277
  %279 = select i1 %278, i32 %277, i32 %173
  store i32 %279, i32* %3, align 8
  %280 = trunc i32 %276 to i8
  %281 = and i8 %280, 31
  %282 = add nuw nsw i8 %281, 1
  %283 = getelementptr inbounds i8, i8* %108, i64 %268
  store i8 %282, i8* %283, align 1
  %284 = or i64 %268, 1
  %285 = lshr i32 %279, 3
  %286 = zext i32 %285 to i64
  %287 = getelementptr inbounds i8, i8* %174, i64 %286
  %288 = bitcast i8* %287 to i32*
  %289 = load i32, i32* %288, align 1
  %290 = and i32 %279, 7
  %291 = lshr i32 %289, %290
  %292 = add i32 %279, 5
  %293 = icmp ugt i32 %173, %292
  %294 = select i1 %293, i32 %292, i32 %173
  store i32 %294, i32* %3, align 8
  %295 = trunc i32 %291 to i8
  %296 = and i8 %295, 31
  %297 = add nuw nsw i8 %296, 1
  %298 = getelementptr inbounds i8, i8* %108, i64 %284
  store i8 %297, i8* %298, align 1
  %299 = add nuw nsw i64 %268, 2
  %300 = add i64 %269, -2
  %301 = icmp eq i64 %300, 0
  br i1 %301, label %381, label %266

302:                                              ; preds = %191
  %303 = bitcast i8* %206 to i32*
  %304 = load i32, i32* %303, align 1
  %305 = and i32 %200, 7
  %306 = lshr i32 %304, %305
  %307 = and i32 %306, 31
  %308 = add i32 %200, 5
  %309 = icmp ugt i32 %173, %308
  %310 = select i1 %309, i32 %308, i32 %173
  store i32 %310, i32* %3, align 8
  %311 = add nuw nsw i32 %307, 1
  %312 = icmp ne i32 %182, 0
  %313 = icmp ult i32 %311, 33
  %314 = and i1 %312, %313
  br i1 %314, label %315, label %401

315:                                              ; preds = %302
  %316 = zext i32 %182 to i64
  br label %322

317:                                              ; preds = %365, %2219, %322
  %318 = add i32 %324, 1
  %319 = icmp ugt i32 %182, %344
  %320 = icmp ult i32 %318, 33
  %321 = and i1 %320, %319
  br i1 %321, label %322, label %376

322:                                              ; preds = %317, %315
  %323 = phi i32 [ %343, %317 ], [ %310, %315 ]
  %324 = phi i32 [ %318, %317 ], [ %311, %315 ]
  %325 = phi i32 [ %344, %317 ], [ 0, %315 ]
  %326 = sub i32 %182, %325
  %327 = shl i32 %326, 1
  %328 = or i32 %327, 1
  %329 = tail call i32 @llvm.ctlz.i32(i32 %328, i1 true) #7, !range !4
  %330 = xor i32 %329, 31
  %331 = lshr i32 %323, 3
  %332 = zext i32 %331 to i64
  %333 = getelementptr inbounds i8, i8* %174, i64 %332
  %334 = bitcast i8* %333 to i32*
  %335 = load i32, i32* %334, align 1
  %336 = and i32 %323, 7
  %337 = lshr i32 %335, %336
  %338 = sub nuw nsw i32 32, %330
  %339 = lshr i32 -1, %338
  %340 = and i32 %339, %337
  %341 = add i32 %330, %323
  %342 = icmp ugt i32 %173, %341
  %343 = select i1 %342, i32 %341, i32 %173
  store i32 %343, i32* %3, align 8
  %344 = add i32 %340, %325
  %345 = icmp ult i32 %325, %344
  br i1 %345, label %346, label %317

346:                                              ; preds = %322
  %347 = trunc i32 %324 to i8
  %348 = zext i32 %325 to i64
  %349 = zext i32 %344 to i64
  %350 = sub nsw i64 %349, %348
  %351 = xor i64 %348, -1
  %352 = add nsw i64 %351, %349
  %353 = and i64 %350, 3
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %365, label %355

355:                                              ; preds = %346, %361
  %356 = phi i64 [ %362, %361 ], [ %348, %346 ]
  %357 = phi i64 [ %363, %361 ], [ %353, %346 ]
  %358 = icmp ult i64 %356, %316
  br i1 %358, label %359, label %361

359:                                              ; preds = %355
  %360 = getelementptr inbounds i8, i8* %108, i64 %356
  store i8 %347, i8* %360, align 1
  br label %361

361:                                              ; preds = %359, %355
  %362 = add nuw nsw i64 %356, 1
  %363 = add i64 %357, -1
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %365, label %355, !llvm.loop !6

365:                                              ; preds = %361, %346
  %366 = phi i64 [ %348, %346 ], [ %362, %361 ]
  %367 = icmp ult i64 %352, 3
  br i1 %367, label %317, label %368

368:                                              ; preds = %365, %2219
  %369 = phi i64 [ %2220, %2219 ], [ %366, %365 ]
  %370 = icmp ult i64 %369, %316
  br i1 %370, label %371, label %373

371:                                              ; preds = %368
  %372 = getelementptr inbounds i8, i8* %108, i64 %369
  store i8 %347, i8* %372, align 1
  br label %373

373:                                              ; preds = %371, %368
  %374 = add nuw nsw i64 %369, 1
  %375 = icmp ult i64 %374, %316
  br i1 %375, label %2207, label %2209

376:                                              ; preds = %317
  %377 = icmp ult i32 %182, %344
  br i1 %377, label %378, label %401

378:                                              ; preds = %376
  %379 = bitcast %struct.vorbis_context_s* %0 to i8**
  %380 = load i8*, i8** %379, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %380, i32 16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.24, i64 0, i64 0)) #7
  br label %736

381:                                              ; preds = %266, %222
  %382 = phi i32 [ undef, %222 ], [ %294, %266 ]
  %383 = phi i32 [ %213, %222 ], [ %294, %266 ]
  %384 = phi i64 [ 0, %222 ], [ %299, %266 ]
  %385 = icmp eq i64 %224, 0
  br i1 %385, label %401, label %386

386:                                              ; preds = %381
  %387 = lshr i32 %383, 3
  %388 = zext i32 %387 to i64
  %389 = getelementptr inbounds i8, i8* %174, i64 %388
  %390 = bitcast i8* %389 to i32*
  %391 = load i32, i32* %390, align 1
  %392 = and i32 %383, 7
  %393 = lshr i32 %391, %392
  %394 = add i32 %383, 5
  %395 = icmp ugt i32 %173, %394
  %396 = select i1 %395, i32 %394, i32 %173
  store i32 %396, i32* %3, align 8
  %397 = trunc i32 %393 to i8
  %398 = and i8 %397, 31
  %399 = add nuw nsw i8 %398, 1
  %400 = getelementptr inbounds i8, i8* %108, i64 %384
  store i8 %399, i8* %400, align 1
  br label %401

401:                                              ; preds = %259, %386, %381, %376, %302, %221, %218
  %402 = phi i32 [ %343, %376 ], [ %213, %221 ], [ %213, %218 ], [ %310, %302 ], [ %382, %381 ], [ %396, %386 ], [ %260, %259 ]
  %403 = phi i32 [ %182, %376 ], [ 0, %221 ], [ 0, %218 ], [ %182, %302 ], [ %182, %381 ], [ %182, %386 ], [ %262, %259 ]
  %404 = lshr i32 %402, 3
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds i8, i8* %174, i64 %405
  %407 = bitcast i8* %406 to i32*
  %408 = load i32, i32* %407, align 1
  %409 = and i32 %402, 7
  %410 = lshr i32 %408, %409
  %411 = and i32 %410, 15
  %412 = add i32 %402, 4
  %413 = icmp ugt i32 %173, %412
  %414 = select i1 %413, i32 %412, i32 %173
  store i32 %414, i32* %3, align 8
  %415 = trunc i32 %411 to i8
  %416 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %151, i64 %150, i32 1
  store i8 %415, i8* %416, align 1
  switch i32 %411, label %650 [
    i32 1, label %417
    i32 0, label %653
  ]

417:                                              ; preds = %401
  %418 = load i8, i8* %163, align 8
  %419 = zext i8 %418 to i32
  %420 = tail call i32 @ff_vorbis_nth_root(i32 %182, i32 %419) #7
  %421 = load i32, i32* %3, align 8
  %422 = load i32, i32* %5, align 8
  %423 = load i8*, i8** %7, align 8
  %424 = lshr i32 %421, 3
  %425 = zext i32 %424 to i64
  %426 = getelementptr inbounds i8, i8* %423, i64 %425
  %427 = bitcast i8* %426 to i32*
  %428 = load i32, i32* %427, align 1
  %429 = and i32 %421, 7
  %430 = lshr i32 %428, %429
  %431 = and i32 %430, 65535
  %432 = add i32 %421, 16
  %433 = icmp ugt i32 %422, %432
  %434 = select i1 %433, i32 %432, i32 %422
  store i32 %434, i32* %3, align 8
  %435 = lshr i32 %434, 3
  %436 = zext i32 %435 to i64
  %437 = getelementptr inbounds i8, i8* %423, i64 %436
  %438 = bitcast i8* %437 to i32*
  %439 = load i32, i32* %438, align 1
  %440 = and i32 %434, 7
  %441 = lshr i32 %439, %440
  %442 = add i32 %434, 16
  %443 = icmp ugt i32 %422, %442
  %444 = select i1 %443, i32 %442, i32 %422
  store i32 %444, i32* %3, align 8
  %445 = shl i32 %441, 16
  %446 = or i32 %445, %431
  %447 = and i32 %446, 2097151
  %448 = uitofp i32 %447 to double
  %449 = lshr i32 %441, 5
  %450 = and i32 %449, 1023
  %451 = icmp slt i32 %446, 0
  %452 = fsub nsz double -0.000000e+00, %448
  %453 = select i1 %451, double %452, double %448
  %454 = add nsw i32 %450, -788
  %455 = tail call nsz double @ldexp(double %453, i32 %454) #8
  %456 = fptrunc double %455 to float
  %457 = lshr i32 %444, 3
  %458 = zext i32 %457 to i64
  %459 = getelementptr inbounds i8, i8* %423, i64 %458
  %460 = bitcast i8* %459 to i32*
  %461 = load i32, i32* %460, align 1
  %462 = and i32 %444, 7
  %463 = lshr i32 %461, %462
  %464 = and i32 %463, 65535
  %465 = add i32 %444, 16
  %466 = icmp ugt i32 %422, %465
  %467 = select i1 %466, i32 %465, i32 %422
  store i32 %467, i32* %3, align 8
  %468 = lshr i32 %467, 3
  %469 = zext i32 %468 to i64
  %470 = getelementptr inbounds i8, i8* %423, i64 %469
  %471 = bitcast i8* %470 to i32*
  %472 = load i32, i32* %471, align 1
  %473 = and i32 %467, 7
  %474 = lshr i32 %472, %473
  %475 = add i32 %467, 16
  %476 = icmp ugt i32 %422, %475
  %477 = select i1 %476, i32 %475, i32 %422
  store i32 %477, i32* %3, align 8
  %478 = shl i32 %474, 16
  %479 = or i32 %478, %464
  %480 = and i32 %479, 2097151
  %481 = uitofp i32 %480 to double
  %482 = lshr i32 %474, 5
  %483 = and i32 %482, 1023
  %484 = icmp slt i32 %479, 0
  %485 = fsub nsz double -0.000000e+00, %481
  %486 = select i1 %484, double %485, double %481
  %487 = add nsw i32 %483, -788
  %488 = tail call nsz double @ldexp(double %486, i32 %487) #8
  %489 = fptrunc double %488 to float
  %490 = lshr i32 %477, 3
  %491 = zext i32 %490 to i64
  %492 = getelementptr inbounds i8, i8* %423, i64 %491
  %493 = bitcast i8* %492 to i32*
  %494 = load i32, i32* %493, align 1
  %495 = and i32 %477, 7
  %496 = lshr i32 %494, %495
  %497 = and i32 %496, 15
  %498 = add i32 %477, 4
  %499 = icmp ugt i32 %422, %498
  %500 = select i1 %499, i32 %498, i32 %422
  store i32 %500, i32* %3, align 8
  %501 = add nuw nsw i32 %497, 1
  %502 = lshr i32 %500, 3
  %503 = zext i32 %502 to i64
  %504 = getelementptr inbounds i8, i8* %423, i64 %503
  %505 = load i8, i8* %504, align 1
  %506 = and i32 %500, 7
  %507 = zext i8 %505 to i32
  %508 = icmp slt i32 %500, %422
  %509 = zext i1 %508 to i32
  %510 = add i32 %500, %509
  store i32 %510, i32* %3, align 8
  %511 = icmp eq i32 %420, 0
  br i1 %511, label %572, label %512

512:                                              ; preds = %417
  %513 = xor i32 %497, 31
  %514 = lshr i32 -1, %513
  %515 = zext i32 %420 to i64
  %516 = and i64 %515, 1
  %517 = icmp eq i32 %420, 1
  br i1 %517, label %554, label %518

518:                                              ; preds = %512
  %519 = sub nsw i64 %515, %516
  br label %520

520:                                              ; preds = %520, %518
  %521 = phi i32 [ %510, %518 ], [ %548, %520 ]
  %522 = phi i64 [ 0, %518 ], [ %551, %520 ]
  %523 = phi i64 [ %519, %518 ], [ %552, %520 ]
  %524 = lshr i32 %521, 3
  %525 = zext i32 %524 to i64
  %526 = getelementptr inbounds i8, i8* %423, i64 %525
  %527 = bitcast i8* %526 to i32*
  %528 = load i32, i32* %527, align 1
  %529 = and i32 %521, 7
  %530 = lshr i32 %528, %529
  %531 = and i32 %530, %514
  %532 = add i32 %501, %521
  %533 = icmp ugt i32 %422, %532
  %534 = select i1 %533, i32 %532, i32 %422
  store i32 %534, i32* %3, align 8
  %535 = trunc i32 %531 to i16
  %536 = getelementptr inbounds i16, i16* %112, i64 %522
  store i16 %535, i16* %536, align 2
  %537 = or i64 %522, 1
  %538 = lshr i32 %534, 3
  %539 = zext i32 %538 to i64
  %540 = getelementptr inbounds i8, i8* %423, i64 %539
  %541 = bitcast i8* %540 to i32*
  %542 = load i32, i32* %541, align 1
  %543 = and i32 %534, 7
  %544 = lshr i32 %542, %543
  %545 = and i32 %544, %514
  %546 = add i32 %501, %534
  %547 = icmp ugt i32 %422, %546
  %548 = select i1 %547, i32 %546, i32 %422
  store i32 %548, i32* %3, align 8
  %549 = trunc i32 %545 to i16
  %550 = getelementptr inbounds i16, i16* %112, i64 %537
  store i16 %549, i16* %550, align 2
  %551 = add nuw nsw i64 %522, 2
  %552 = add i64 %523, -2
  %553 = icmp eq i64 %552, 0
  br i1 %553, label %554, label %520

554:                                              ; preds = %520, %512
  %555 = phi i32 [ %510, %512 ], [ %548, %520 ]
  %556 = phi i64 [ 0, %512 ], [ %551, %520 ]
  %557 = icmp eq i64 %516, 0
  br i1 %557, label %572, label %558

558:                                              ; preds = %554
  %559 = lshr i32 %555, 3
  %560 = zext i32 %559 to i64
  %561 = getelementptr inbounds i8, i8* %423, i64 %560
  %562 = bitcast i8* %561 to i32*
  %563 = load i32, i32* %562, align 1
  %564 = and i32 %555, 7
  %565 = lshr i32 %563, %564
  %566 = and i32 %565, %514
  %567 = add i32 %501, %555
  %568 = icmp ugt i32 %422, %567
  %569 = select i1 %568, i32 %567, i32 %422
  store i32 %569, i32* %3, align 8
  %570 = trunc i32 %566 to i16
  %571 = getelementptr inbounds i16, i16* %112, i64 %556
  store i16 %570, i16* %571, align 2
  br label %572

572:                                              ; preds = %558, %554, %417
  %573 = icmp eq i32 %403, 0
  br i1 %573, label %583, label %574

574:                                              ; preds = %572
  %575 = zext i32 %403 to i64
  %576 = load i8, i8* %163, align 8
  %577 = zext i8 %576 to i64
  %578 = shl nuw nsw i64 %577, 2
  %579 = tail call i8* @av_mallocz_array(i64 %575, i64 %578) #7
  %580 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %151, i64 %150, i32 4
  %581 = bitcast float** %580 to i8**
  store i8* %579, i8** %581, align 8
  %582 = icmp eq i8* %579, null
  br i1 %582, label %736, label %585

583:                                              ; preds = %572
  %584 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %151, i64 %150, i32 4
  store float* null, float** %584, align 8
  br label %585

585:                                              ; preds = %583, %574
  %586 = icmp eq i32 %182, 0
  br i1 %586, label %644, label %587

587:                                              ; preds = %585
  %588 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %151, i64 %150, i32 4
  %589 = shl i32 1, %506
  %590 = and i32 %589, %507
  %591 = icmp eq i32 %590, 0
  %592 = zext i32 %182 to i64
  br label %593

593:                                              ; preds = %640, %587
  %594 = phi i64 [ 0, %587 ], [ %642, %640 ]
  %595 = phi i32 [ 0, %587 ], [ %641, %640 ]
  %596 = load i8, i8* %163, align 8
  %597 = zext i8 %596 to i32
  %598 = getelementptr inbounds i8, i8* %108, i64 %594
  %599 = load i8, i8* %598, align 1
  %600 = icmp eq i8 %599, 0
  br i1 %600, label %640, label %601

601:                                              ; preds = %593
  %602 = icmp eq i8 %596, 0
  br i1 %602, label %635, label %603

603:                                              ; preds = %601
  %604 = mul i32 %595, %597
  %605 = zext i8 %596 to i64
  %606 = trunc i64 %594 to i32
  br label %607

607:                                              ; preds = %629, %603
  %608 = phi i64 [ 0, %603 ], [ %631, %629 ]
  %609 = phi i32 [ %606, %603 ], [ %612, %629 ]
  %610 = phi float [ 0.000000e+00, %603 ], [ %630, %629 ]
  %611 = urem i32 %609, %420
  %612 = udiv i32 %609, %420
  %613 = zext i32 %611 to i64
  %614 = getelementptr inbounds i16, i16* %112, i64 %613
  %615 = load i16, i16* %614, align 2
  %616 = uitofp i16 %615 to float
  %617 = fmul nsz float %489, %616
  %618 = fadd nsz float %617, %456
  %619 = fadd nsz float %610, %618
  %620 = load float*, float** %588, align 8
  %621 = trunc i64 %608 to i32
  %622 = add i32 %604, %621
  %623 = zext i32 %622 to i64
  %624 = getelementptr inbounds float, float* %620, i64 %623
  store float %619, float* %624, align 4
  br i1 %591, label %629, label %625

625:                                              ; preds = %607
  %626 = load float*, float** %588, align 8
  %627 = getelementptr inbounds float, float* %626, i64 %623
  %628 = load float, float* %627, align 4
  br label %629

629:                                              ; preds = %625, %607
  %630 = phi float [ %628, %625 ], [ %610, %607 ]
  %631 = add nuw nsw i64 %608, 1
  %632 = icmp eq i64 %631, %605
  br i1 %632, label %633, label %607

633:                                              ; preds = %629
  %634 = load i8, i8* %598, align 1
  br label %635

635:                                              ; preds = %633, %601
  %636 = phi i8 [ %634, %633 ], [ %599, %601 ]
  %637 = zext i32 %595 to i64
  %638 = getelementptr inbounds i8, i8* %108, i64 %637
  store i8 %636, i8* %638, align 1
  %639 = add i32 %595, 1
  br label %640

640:                                              ; preds = %635, %593
  %641 = phi i32 [ %639, %635 ], [ %595, %593 ]
  %642 = add nuw nsw i64 %594, 1
  %643 = icmp eq i64 %642, %592
  br i1 %643, label %644, label %593

644:                                              ; preds = %640, %585
  %645 = phi i32 [ 0, %585 ], [ %641, %640 ]
  %646 = icmp eq i32 %645, %403
  br i1 %646, label %653, label %647

647:                                              ; preds = %644
  %648 = bitcast %struct.vorbis_context_s* %0 to i8**
  %649 = load i8*, i8** %648, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %649, i32 16, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.25, i64 0, i64 0)) #7
  br label %736

650:                                              ; preds = %401
  %651 = bitcast %struct.vorbis_context_s* %0 to i8**
  %652 = load i8*, i8** %651, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %652, i32 16, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.26, i64 0, i64 0)) #7
  br label %736

653:                                              ; preds = %644, %401
  %654 = phi i32 [ %182, %401 ], [ %403, %644 ]
  %655 = tail call i32 @ff_vorbis_len2vlc(i8* nonnull %108, i32* nonnull %110, i32 %654) #7
  %656 = icmp eq i32 %655, 0
  br i1 %656, label %660, label %657

657:                                              ; preds = %653
  %658 = bitcast %struct.vorbis_context_s* %0 to i8**
  %659 = load i8*, i8** %658, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %659, i32 16, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.27, i64 0, i64 0)) #7
  br label %736

660:                                              ; preds = %653
  %661 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %151, i64 %150, i32 2
  store i8 0, i8* %661, align 2
  %662 = icmp eq i32 %654, 0
  br i1 %662, label %697, label %663

663:                                              ; preds = %660
  %664 = zext i32 %654 to i64
  %665 = and i64 %664, 1
  %666 = icmp eq i32 %654, 1
  br i1 %666, label %683, label %667

667:                                              ; preds = %663
  %668 = sub nsw i64 %664, %665
  br label %669

669:                                              ; preds = %2223, %667
  %670 = phi i8 [ 0, %667 ], [ %2224, %2223 ]
  %671 = phi i64 [ 0, %667 ], [ %2225, %2223 ]
  %672 = phi i64 [ %668, %667 ], [ %2226, %2223 ]
  %673 = getelementptr inbounds i8, i8* %108, i64 %671
  %674 = load i8, i8* %673, align 1
  %675 = icmp ult i8 %674, %670
  br i1 %675, label %677, label %676

676:                                              ; preds = %669
  store i8 %674, i8* %661, align 2
  br label %677

677:                                              ; preds = %676, %669
  %678 = phi i8 [ %670, %669 ], [ %674, %676 ]
  %679 = or i64 %671, 1
  %680 = getelementptr inbounds i8, i8* %108, i64 %679
  %681 = load i8, i8* %680, align 1
  %682 = icmp ult i8 %681, %678
  br i1 %682, label %2223, label %2222

683:                                              ; preds = %2223, %663
  %684 = phi i8 [ undef, %663 ], [ %2224, %2223 ]
  %685 = phi i8 [ 0, %663 ], [ %2224, %2223 ]
  %686 = phi i64 [ 0, %663 ], [ %2225, %2223 ]
  %687 = icmp eq i64 %665, 0
  br i1 %687, label %693, label %688

688:                                              ; preds = %683
  %689 = getelementptr inbounds i8, i8* %108, i64 %686
  %690 = load i8, i8* %689, align 1
  %691 = icmp ult i8 %690, %685
  br i1 %691, label %693, label %692

692:                                              ; preds = %688
  store i8 %690, i8* %661, align 2
  br label %693

693:                                              ; preds = %692, %688, %683
  %694 = phi i8 [ %684, %683 ], [ %685, %688 ], [ %690, %692 ]
  %695 = icmp ugt i8 %694, 24
  %696 = select i1 %695, i32 11, i32 8
  br label %697

697:                                              ; preds = %660, %693
  %698 = phi i8 [ %694, %693 ], [ 0, %660 ]
  %699 = phi i32 [ %696, %693 ], [ 8, %660 ]
  %700 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %151, i64 %150, i32 5
  store i32 %699, i32* %700, align 8
  %701 = zext i8 %698 to i32
  %702 = add nuw nsw i32 %699, %701
  %703 = trunc i32 %702 to i16
  %704 = add nsw i16 %703, -1
  %705 = trunc i32 %699 to i16
  %706 = udiv i16 %704, %705
  %707 = trunc i16 %706 to i8
  store i8 %707, i8* %661, align 2
  %708 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %151, i64 %150, i32 3
  %709 = tail call i32 @ff_init_vlc_sparse(%struct.VLC* %708, i32 %699, i32 %654, i8* nonnull %108, i32 1, i32 1, i8* nonnull %109, i32 4, i32 4, i8* null, i32 0, i32 0, i32 10) #7
  %710 = icmp eq i32 %709, 0
  br i1 %710, label %714, label %711

711:                                              ; preds = %697
  %712 = bitcast %struct.vorbis_context_s* %0 to i8**
  %713 = load i8*, i8** %712, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %713, i32 16, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.28, i64 0, i64 0)) #7
  br label %736

714:                                              ; preds = %697
  %715 = add nuw nsw i64 %150, 1
  %716 = load i16, i16* %102, align 8
  %717 = zext i16 %716 to i64
  %718 = icmp ult i64 %715, %717
  br i1 %718, label %719, label %739

719:                                              ; preds = %714
  %720 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %106, align 8
  %721 = load i32, i32* %3, align 8
  %722 = load i32, i32* %5, align 8
  %723 = load i8*, i8** %7, align 8
  %724 = lshr i32 %721, 3
  %725 = zext i32 %724 to i64
  %726 = getelementptr inbounds i8, i8* %723, i64 %725
  %727 = bitcast i8* %726 to i32*
  %728 = load i32, i32* %727, align 1
  %729 = and i32 %721, 7
  %730 = lshr i32 %728, %729
  %731 = and i32 %730, 16777215
  %732 = add i32 %721, 24
  %733 = icmp ugt i32 %722, %732
  %734 = select i1 %733, i32 %732, i32 %722
  store i32 %734, i32* %3, align 8
  %735 = icmp eq i32 %731, 5653314
  br i1 %735, label %146, label %140

736:                                              ; preds = %574, %711, %657, %650, %647, %378, %187, %167, %142, %88
  %737 = phi i32 [ -12, %88 ], [ -1094995529, %378 ], [ -1094995529, %650 ], [ %709, %711 ], [ -1094995529, %657 ], [ -1094995529, %187 ], [ -1094995529, %167 ], [ -1094995529, %142 ], [ -1094995529, %647 ], [ -12, %574 ]
  tail call void @av_free(i8* %108) #7
  tail call void @av_free(i8* %109) #7
  tail call void @av_free(i8* %111) #7
  %738 = bitcast %struct.vorbis_context_s* %0 to i8**
  br label %2200

739:                                              ; preds = %714, %121
  tail call void @av_free(i8* nonnull %108) #7
  tail call void @av_free(i8* nonnull %109) #7
  tail call void @av_free(i8* nonnull %111) #7
  %740 = load i32, i32* %3, align 8
  %741 = load i32, i32* %5, align 8
  %742 = load i8*, i8** %7, align 8
  %743 = lshr i32 %740, 3
  %744 = zext i32 %743 to i64
  %745 = getelementptr inbounds i8, i8* %742, i64 %744
  %746 = bitcast i8* %745 to i32*
  %747 = load i32, i32* %746, align 1
  %748 = and i32 %740, 7
  %749 = lshr i32 %747, %748
  %750 = and i32 %749, 63
  %751 = add i32 %740, 6
  %752 = icmp ugt i32 %741, %751
  %753 = select i1 %752, i32 %751, i32 %741
  store i32 %753, i32* %3, align 8
  br label %757

754:                                              ; preds = %757
  %755 = add nuw nsw i32 %759, 1
  %756 = icmp eq i32 %759, %750
  br i1 %756, label %775, label %757

757:                                              ; preds = %754, %739
  %758 = phi i32 [ %753, %739 ], [ %768, %754 ]
  %759 = phi i32 [ 0, %739 ], [ %755, %754 ]
  %760 = lshr i32 %758, 3
  %761 = zext i32 %760 to i64
  %762 = getelementptr inbounds i8, i8* %742, i64 %761
  %763 = bitcast i8* %762 to i32*
  %764 = load i32, i32* %763, align 1
  %765 = and i32 %758, 7
  %766 = add i32 %758, 16
  %767 = icmp ugt i32 %741, %766
  %768 = select i1 %767, i32 %766, i32 %741
  store i32 %768, i32* %3, align 8
  %769 = shl i32 65535, %765
  %770 = and i32 %769, %764
  %771 = icmp eq i32 %770, 0
  br i1 %771, label %754, label %772

772:                                              ; preds = %757
  %773 = bitcast %struct.vorbis_context_s* %0 to i8**
  %774 = load i8*, i8** %773, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %774, i32 16, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.29, i64 0, i64 0)) #7
  br label %2200

775:                                              ; preds = %754
  %776 = lshr i32 %768, 3
  %777 = zext i32 %776 to i64
  %778 = getelementptr inbounds i8, i8* %742, i64 %777
  %779 = bitcast i8* %778 to i32*
  %780 = load i32, i32* %779, align 1
  %781 = and i32 %768, 7
  %782 = lshr i32 %780, %781
  %783 = add i32 %768, 6
  %784 = icmp ugt i32 %741, %783
  %785 = select i1 %784, i32 %783, i32 %741
  store i32 %785, i32* %3, align 8
  %786 = trunc i32 %782 to i8
  %787 = and i8 %786, 63
  %788 = add nuw nsw i8 %787, 1
  %789 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 16
  store i8 %788, i8* %789, align 8
  %790 = zext i8 %788 to i64
  %791 = mul nuw nsw i64 %790, 368
  %792 = tail call noalias i8* @av_mallocz(i64 %791) #7
  %793 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 17
  %794 = bitcast %struct.vorbis_floor** %793 to i8**
  store i8* %792, i8** %794, align 8
  %795 = icmp eq i8* %792, null
  %796 = bitcast i8* %792 to %struct.vorbis_floor*
  br i1 %795, label %1412, label %797

797:                                              ; preds = %775
  %798 = load i8, i8* %789, align 8
  %799 = icmp eq i8 %798, 0
  br i1 %799, label %1415, label %800

800:                                              ; preds = %797
  %801 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 12, i64 1
  %802 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 0
  br label %803

803:                                              ; preds = %1410, %800
  %804 = phi %struct.vorbis_floor* [ %796, %800 ], [ %1411, %1410 ]
  %805 = phi i64 [ 0, %800 ], [ %1406, %1410 ]
  %806 = load i32, i32* %3, align 8
  %807 = load i32, i32* %5, align 8
  %808 = load i8*, i8** %7, align 8
  %809 = lshr i32 %806, 3
  %810 = zext i32 %809 to i64
  %811 = getelementptr inbounds i8, i8* %808, i64 %810
  %812 = bitcast i8* %811 to i32*
  %813 = load i32, i32* %812, align 1
  %814 = and i32 %806, 7
  %815 = lshr i32 %813, %814
  %816 = add i32 %806, 16
  %817 = icmp ugt i32 %807, %816
  %818 = select i1 %817, i32 %816, i32 %807
  store i32 %818, i32* %3, align 8
  %819 = trunc i32 %815 to i8
  %820 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 0
  store i8 %819, i8* %820, align 8
  switch i8 %819, label %1402 [
    i8 1, label %821
    i8 0, label %1146
  ]

821:                                              ; preds = %803
  %822 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 1
  store i32 (%struct.vorbis_context_s*, %union.vorbis_floor_u*, float*)* @vorbis_floor1_decode, i32 (%struct.vorbis_context_s*, %union.vorbis_floor_u*, float*)** %822, align 8
  %823 = load i32, i32* %3, align 8
  %824 = load i32, i32* %5, align 8
  %825 = load i8*, i8** %7, align 8
  %826 = lshr i32 %823, 3
  %827 = zext i32 %826 to i64
  %828 = getelementptr inbounds i8, i8* %825, i64 %827
  %829 = bitcast i8* %828 to i32*
  %830 = load i32, i32* %829, align 1
  %831 = and i32 %823, 7
  %832 = lshr i32 %830, %831
  %833 = add i32 %823, 5
  %834 = icmp ugt i32 %824, %833
  %835 = select i1 %834, i32 %833, i32 %824
  store i32 %835, i32* %3, align 8
  %836 = trunc i32 %832 to i8
  %837 = and i8 %836, 31
  %838 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 0
  store i8 %837, i8* %838, align 8
  %839 = icmp eq i8 %837, 0
  br i1 %839, label %840, label %856

840:                                              ; preds = %856, %821
  %841 = phi i32 [ -1, %821 ], [ %876, %856 ]
  %842 = icmp slt i32 %841, 0
  %843 = load i32, i32* %3, align 8
  %844 = load i32, i32* %5, align 8
  %845 = load i8*, i8** %7, align 8
  %846 = lshr i32 %843, 3
  %847 = zext i32 %846 to i64
  %848 = getelementptr inbounds i8, i8* %845, i64 %847
  %849 = bitcast i8* %848 to i32*
  %850 = load i32, i32* %849, align 1
  %851 = and i32 %843, 7
  %852 = lshr i32 %850, %851
  br i1 %842, label %989, label %853

853:                                              ; preds = %840
  %854 = add nuw i32 %841, 1
  %855 = zext i32 %854 to i64
  br label %881

856:                                              ; preds = %821, %856
  %857 = phi i64 [ %877, %856 ], [ 0, %821 ]
  %858 = phi i32 [ %876, %856 ], [ -1, %821 ]
  %859 = load i32, i32* %3, align 8
  %860 = load i32, i32* %5, align 8
  %861 = load i8*, i8** %7, align 8
  %862 = lshr i32 %859, 3
  %863 = zext i32 %862 to i64
  %864 = getelementptr inbounds i8, i8* %861, i64 %863
  %865 = bitcast i8* %864 to i32*
  %866 = load i32, i32* %865, align 1
  %867 = and i32 %859, 7
  %868 = lshr i32 %866, %867
  %869 = and i32 %868, 15
  %870 = add i32 %859, 4
  %871 = icmp ugt i32 %860, %870
  %872 = select i1 %871, i32 %870, i32 %860
  store i32 %872, i32* %3, align 8
  %873 = trunc i32 %869 to i8
  %874 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 1, i64 %857
  store i8 %873, i8* %874, align 1
  %875 = icmp sgt i32 %869, %858
  %876 = select i1 %875, i32 %869, i32 %858
  %877 = add nuw nsw i64 %857, 1
  %878 = load i8, i8* %838, align 8
  %879 = zext i8 %878 to i64
  %880 = icmp ult i64 %877, %879
  br i1 %880, label %856, label %840

881:                                              ; preds = %976, %853
  %882 = phi i64 [ 0, %853 ], [ %977, %976 ]
  %883 = phi i32 [ %852, %853 ], [ %987, %976 ]
  %884 = phi i32 [ %844, %853 ], [ %979, %976 ]
  %885 = phi i32 [ %843, %853 ], [ %978, %976 ]
  %886 = add i32 %885, 3
  %887 = icmp ugt i32 %884, %886
  %888 = select i1 %887, i32 %886, i32 %884
  store i32 %888, i32* %3, align 8
  %889 = trunc i32 %883 to i8
  %890 = and i8 %889, 7
  %891 = add nuw nsw i8 %890, 1
  %892 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 2, i64 %882
  store i8 %891, i8* %892, align 1
  %893 = load i32, i32* %3, align 8
  %894 = load i32, i32* %5, align 8
  %895 = load i8*, i8** %7, align 8
  %896 = lshr i32 %893, 3
  %897 = zext i32 %896 to i64
  %898 = getelementptr inbounds i8, i8* %895, i64 %897
  %899 = bitcast i8* %898 to i32*
  %900 = load i32, i32* %899, align 1
  %901 = and i32 %893, 7
  %902 = lshr i32 %900, %901
  %903 = add i32 %893, 2
  %904 = icmp ugt i32 %894, %903
  %905 = select i1 %904, i32 %903, i32 %894
  store i32 %905, i32* %3, align 8
  %906 = trunc i32 %902 to i8
  %907 = and i8 %906, 3
  %908 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 3, i64 %882
  store i8 %907, i8* %908, align 1
  %909 = icmp eq i8 %907, 0
  br i1 %909, label %938, label %910

910:                                              ; preds = %881
  %911 = load i32, i32* %3, align 8
  %912 = load i32, i32* %5, align 8
  %913 = load i8*, i8** %7, align 8
  %914 = lshr i32 %911, 3
  %915 = zext i32 %914 to i64
  %916 = getelementptr inbounds i8, i8* %913, i64 %915
  %917 = bitcast i8* %916 to i32*
  %918 = load i32, i32* %917, align 1
  %919 = and i32 %911, 7
  %920 = lshr i32 %918, %919
  %921 = and i32 %920, 255
  %922 = add i32 %911, 8
  %923 = icmp ugt i32 %912, %922
  %924 = select i1 %923, i32 %922, i32 %912
  store i32 %924, i32* %3, align 8
  %925 = trunc i32 %920 to i8
  %926 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 4, i64 %882
  store i8 %925, i8* %926, align 1
  %927 = load i16, i16* %102, align 8
  %928 = zext i16 %927 to i32
  %929 = icmp ult i32 %921, %928
  br i1 %929, label %935, label %930

930:                                              ; preds = %910
  %931 = zext i16 %927 to i32
  %932 = bitcast %struct.vorbis_context_s* %0 to i8**
  %933 = load i8*, i8** %932, align 8
  %934 = add nsw i32 %931, -1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %933, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @idx_err_str, i64 0, i64 0), i32 %921, i32 %934, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.31, i64 0, i64 0), i32 549) #7
  br label %1412

935:                                              ; preds = %910
  %936 = load i8, i8* %908, align 1
  %937 = icmp eq i8 %936, 31
  br i1 %937, label %976, label %938

938:                                              ; preds = %935, %881
  br label %939

939:                                              ; preds = %938, %968
  %940 = phi i64 [ %970, %968 ], [ 0, %938 ]
  %941 = load i32, i32* %3, align 8
  %942 = load i32, i32* %5, align 8
  %943 = load i8*, i8** %7, align 8
  %944 = lshr i32 %941, 3
  %945 = zext i32 %944 to i64
  %946 = getelementptr inbounds i8, i8* %943, i64 %945
  %947 = bitcast i8* %946 to i32*
  %948 = load i32, i32* %947, align 1
  %949 = and i32 %941, 7
  %950 = lshr i32 %948, %949
  %951 = add i32 %941, 8
  %952 = icmp ugt i32 %942, %951
  %953 = select i1 %952, i32 %951, i32 %942
  store i32 %953, i32* %3, align 8
  %954 = trunc i32 %950 to i16
  %955 = and i16 %954, 255
  %956 = add nsw i16 %955, -1
  %957 = sext i16 %956 to i32
  %958 = icmp eq i16 %955, 0
  br i1 %958, label %968, label %959

959:                                              ; preds = %939
  %960 = load i16, i16* %102, align 8
  %961 = zext i16 %960 to i32
  %962 = icmp slt i32 %957, %961
  br i1 %962, label %968, label %963

963:                                              ; preds = %959
  %964 = zext i16 %960 to i32
  %965 = bitcast %struct.vorbis_context_s* %0 to i8**
  %966 = load i8*, i8** %965, align 8
  %967 = add nsw i32 %964, -1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %966, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @idx_err_str, i64 0, i64 0), i32 %957, i32 %967, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.31, i64 0, i64 0), i32 557) #7
  br label %1412

968:                                              ; preds = %959, %939
  %969 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 5, i64 %882, i64 %940
  store i16 %956, i16* %969, align 2
  %970 = add nuw nsw i64 %940, 1
  %971 = load i8, i8* %908, align 1
  %972 = zext i8 %971 to i32
  %973 = shl i32 1, %972
  %974 = sext i32 %973 to i64
  %975 = icmp slt i64 %970, %974
  br i1 %975, label %939, label %976

976:                                              ; preds = %968, %935
  %977 = add nuw nsw i64 %882, 1
  %978 = load i32, i32* %3, align 8
  %979 = load i32, i32* %5, align 8
  %980 = load i8*, i8** %7, align 8
  %981 = lshr i32 %978, 3
  %982 = zext i32 %981 to i64
  %983 = getelementptr inbounds i8, i8* %980, i64 %982
  %984 = bitcast i8* %983 to i32*
  %985 = load i32, i32* %984, align 1
  %986 = and i32 %978, 7
  %987 = lshr i32 %985, %986
  %988 = icmp eq i64 %977, %855
  br i1 %988, label %989, label %881

989:                                              ; preds = %976, %840
  %990 = phi i32 [ %843, %840 ], [ %978, %976 ]
  %991 = phi i32 [ %844, %840 ], [ %979, %976 ]
  %992 = phi i32 [ %852, %840 ], [ %987, %976 ]
  %993 = add i32 %990, 2
  %994 = icmp ugt i32 %991, %993
  %995 = select i1 %994, i32 %993, i32 %991
  store i32 %995, i32* %3, align 8
  %996 = trunc i32 %992 to i8
  %997 = and i8 %996, 3
  %998 = add nuw nsw i8 %997, 1
  %999 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 6
  store i8 %998, i8* %999, align 2
  %1000 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 7
  store i16 2, i16* %1000, align 4
  %1001 = load i8, i8* %838, align 8
  %1002 = icmp eq i8 %1001, 0
  br i1 %1002, label %1044, label %1003

1003:                                             ; preds = %989
  %1004 = zext i8 %1001 to i64
  %1005 = and i64 %1004, 1
  %1006 = icmp eq i8 %1001, 1
  br i1 %1006, label %1031, label %1007

1007:                                             ; preds = %1003
  %1008 = sub nsw i64 %1004, %1005
  br label %1009

1009:                                             ; preds = %1009, %1007
  %1010 = phi i16 [ 2, %1007 ], [ %1027, %1009 ]
  %1011 = phi i64 [ 0, %1007 ], [ %1028, %1009 ]
  %1012 = phi i64 [ %1008, %1007 ], [ %1029, %1009 ]
  %1013 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 1, i64 %1011
  %1014 = load i8, i8* %1013, align 1
  %1015 = zext i8 %1014 to i64
  %1016 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 2, i64 %1015
  %1017 = load i8, i8* %1016, align 1
  %1018 = zext i8 %1017 to i16
  %1019 = add i16 %1010, %1018
  store i16 %1019, i16* %1000, align 4
  %1020 = or i64 %1011, 1
  %1021 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 1, i64 %1020
  %1022 = load i8, i8* %1021, align 1
  %1023 = zext i8 %1022 to i64
  %1024 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 2, i64 %1023
  %1025 = load i8, i8* %1024, align 1
  %1026 = zext i8 %1025 to i16
  %1027 = add i16 %1019, %1026
  store i16 %1027, i16* %1000, align 4
  %1028 = add nuw nsw i64 %1011, 2
  %1029 = add i64 %1012, -2
  %1030 = icmp eq i64 %1029, 0
  br i1 %1030, label %1031, label %1009

1031:                                             ; preds = %1009, %1003
  %1032 = phi i16 [ undef, %1003 ], [ %1027, %1009 ]
  %1033 = phi i16 [ 2, %1003 ], [ %1027, %1009 ]
  %1034 = phi i64 [ 0, %1003 ], [ %1028, %1009 ]
  %1035 = icmp eq i64 %1005, 0
  br i1 %1035, label %1044, label %1036

1036:                                             ; preds = %1031
  %1037 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 1, i64 %1034
  %1038 = load i8, i8* %1037, align 1
  %1039 = zext i8 %1038 to i64
  %1040 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 2, i64 %1039
  %1041 = load i8, i8* %1040, align 1
  %1042 = zext i8 %1041 to i16
  %1043 = add i16 %1033, %1042
  store i16 %1043, i16* %1000, align 4
  br label %1044

1044:                                             ; preds = %1036, %1031, %989
  %1045 = phi i16 [ 2, %989 ], [ %1032, %1031 ], [ %1043, %1036 ]
  %1046 = zext i16 %1045 to i64
  %1047 = tail call i8* @av_mallocz_array(i64 %1046, i64 8) #7
  %1048 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 8
  %1049 = bitcast %struct.vorbis_floor1_entry** %1048 to i8**
  store i8* %1047, i8** %1049, align 8
  %1050 = icmp eq i8* %1047, null
  br i1 %1050, label %1412, label %1051

1051:                                             ; preds = %1044
  %1052 = load i32, i32* %3, align 8
  %1053 = load i32, i32* %5, align 8
  %1054 = load i8*, i8** %7, align 8
  %1055 = lshr i32 %1052, 3
  %1056 = zext i32 %1055 to i64
  %1057 = getelementptr inbounds i8, i8* %1054, i64 %1056
  %1058 = bitcast i8* %1057 to i32*
  %1059 = load i32, i32* %1058, align 1
  %1060 = and i32 %1052, 7
  %1061 = lshr i32 %1059, %1060
  %1062 = and i32 %1061, 15
  %1063 = add i32 %1052, 4
  %1064 = icmp ugt i32 %1053, %1063
  %1065 = select i1 %1064, i32 %1063, i32 %1053
  store i32 %1065, i32* %3, align 8
  %1066 = icmp eq i32 %1062, 0
  br i1 %1066, label %1067, label %1073

1067:                                             ; preds = %1051
  %1068 = load i8, i8* %838, align 8
  %1069 = icmp eq i8 %1068, 0
  br i1 %1069, label %1073, label %1070

1070:                                             ; preds = %1067
  %1071 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1072 = load i8*, i8** %1071, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1072, i32 16, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.33, i64 0, i64 0)) #7
  br label %1412

1073:                                             ; preds = %1067, %1051
  %1074 = shl i32 1, %1062
  %1075 = load i32, i32* %801, align 4
  %1076 = lshr i32 %1075, 1
  %1077 = icmp ugt i32 %1074, %1076
  br i1 %1077, label %1078, label %1081

1078:                                             ; preds = %1073
  %1079 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1080 = load i8*, i8** %1079, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1080, i32 16, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.34, i64 0, i64 0), i32 %1074, i32 %1076) #7
  br label %1412

1081:                                             ; preds = %1073
  %1082 = load %struct.vorbis_floor1_entry*, %struct.vorbis_floor1_entry** %1048, align 8
  %1083 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1082, i64 0, i32 0
  store i16 0, i16* %1083, align 2
  %1084 = trunc i32 %1074 to i16
  %1085 = load %struct.vorbis_floor1_entry*, %struct.vorbis_floor1_entry** %1048, align 8
  %1086 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1085, i64 1, i32 0
  store i16 %1084, i16* %1086, align 2
  %1087 = load i8, i8* %838, align 8
  %1088 = icmp eq i8 %1087, 0
  br i1 %1088, label %1139, label %1089

1089:                                             ; preds = %1081
  %1090 = sub nuw nsw i32 32, %1062
  %1091 = lshr i32 -1, %1090
  br label %1092

1092:                                             ; preds = %1133, %1089
  %1093 = phi i8 [ %1087, %1089 ], [ %1134, %1133 ]
  %1094 = phi i64 [ 0, %1089 ], [ %1136, %1133 ]
  %1095 = phi i32 [ 2, %1089 ], [ %1135, %1133 ]
  %1096 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 1, i64 %1094
  %1097 = load i8, i8* %1096, align 1
  %1098 = zext i8 %1097 to i64
  %1099 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 2, i64 %1098
  %1100 = load i8, i8* %1099, align 1
  %1101 = icmp eq i8 %1100, 0
  br i1 %1101, label %1133, label %1102

1102:                                             ; preds = %1092, %1102
  %1103 = phi i32 [ %1124, %1102 ], [ %1095, %1092 ]
  %1104 = phi i32 [ %1123, %1102 ], [ 0, %1092 ]
  %1105 = load i32, i32* %3, align 8
  %1106 = load i32, i32* %5, align 8
  %1107 = load i8*, i8** %7, align 8
  %1108 = lshr i32 %1105, 3
  %1109 = zext i32 %1108 to i64
  %1110 = getelementptr inbounds i8, i8* %1107, i64 %1109
  %1111 = bitcast i8* %1110 to i32*
  %1112 = load i32, i32* %1111, align 1
  %1113 = and i32 %1105, 7
  %1114 = lshr i32 %1112, %1113
  %1115 = and i32 %1114, %1091
  %1116 = add i32 %1105, %1062
  %1117 = icmp ugt i32 %1106, %1116
  %1118 = select i1 %1117, i32 %1116, i32 %1106
  store i32 %1118, i32* %3, align 8
  %1119 = trunc i32 %1115 to i16
  %1120 = load %struct.vorbis_floor1_entry*, %struct.vorbis_floor1_entry** %1048, align 8
  %1121 = zext i32 %1103 to i64
  %1122 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1120, i64 %1121, i32 0
  store i16 %1119, i16* %1122, align 2
  %1123 = add nuw nsw i32 %1104, 1
  %1124 = add i32 %1103, 1
  %1125 = load i8, i8* %1096, align 1
  %1126 = zext i8 %1125 to i64
  %1127 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 2, i64 %1126
  %1128 = load i8, i8* %1127, align 1
  %1129 = zext i8 %1128 to i32
  %1130 = icmp ult i32 %1123, %1129
  br i1 %1130, label %1102, label %1131

1131:                                             ; preds = %1102
  %1132 = load i8, i8* %838, align 8
  br label %1133

1133:                                             ; preds = %1131, %1092
  %1134 = phi i8 [ %1093, %1092 ], [ %1132, %1131 ]
  %1135 = phi i32 [ %1095, %1092 ], [ %1124, %1131 ]
  %1136 = add nuw nsw i64 %1094, 1
  %1137 = zext i8 %1134 to i64
  %1138 = icmp ult i64 %1136, %1137
  br i1 %1138, label %1092, label %1139

1139:                                             ; preds = %1133, %1081
  %1140 = load %struct.AVCodecContext*, %struct.AVCodecContext** %802, align 8
  %1141 = load %struct.vorbis_floor1_entry*, %struct.vorbis_floor1_entry** %1048, align 8
  %1142 = load i16, i16* %1000, align 4
  %1143 = zext i16 %1142 to i32
  %1144 = tail call i32 @ff_vorbis_ready_floor1_list(%struct.AVCodecContext* %1140, %struct.vorbis_floor1_entry* %1141, i32 %1143) #7
  %1145 = icmp eq i32 %1144, 0
  br i1 %1145, label %1405, label %1412

1146:                                             ; preds = %803
  %1147 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 1
  store i32 (%struct.vorbis_context_s*, %union.vorbis_floor_u*, float*)* @vorbis_floor0_decode, i32 (%struct.vorbis_context_s*, %union.vorbis_floor_u*, float*)** %1147, align 8
  %1148 = load i32, i32* %3, align 8
  %1149 = load i32, i32* %5, align 8
  %1150 = load i8*, i8** %7, align 8
  %1151 = lshr i32 %1148, 3
  %1152 = zext i32 %1151 to i64
  %1153 = getelementptr inbounds i8, i8* %1150, i64 %1152
  %1154 = bitcast i8* %1153 to i32*
  %1155 = load i32, i32* %1154, align 1
  %1156 = and i32 %1148, 7
  %1157 = lshr i32 %1155, %1156
  %1158 = add i32 %1148, 8
  %1159 = icmp ugt i32 %1149, %1158
  %1160 = select i1 %1159, i32 %1158, i32 %1149
  store i32 %1160, i32* %3, align 8
  %1161 = trunc i32 %1157 to i8
  %1162 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 0
  store i8 %1161, i8* %1162, align 8
  %1163 = icmp eq i8 %1161, 0
  br i1 %1163, label %1164, label %1167

1164:                                             ; preds = %1146
  %1165 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1166 = load i8*, i8** %1165, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1166, i32 16, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.35, i64 0, i64 0)) #7
  br label %1412

1167:                                             ; preds = %1146
  %1168 = load i32, i32* %3, align 8
  %1169 = load i32, i32* %5, align 8
  %1170 = load i8*, i8** %7, align 8
  %1171 = lshr i32 %1168, 3
  %1172 = zext i32 %1171 to i64
  %1173 = getelementptr inbounds i8, i8* %1170, i64 %1172
  %1174 = bitcast i8* %1173 to i32*
  %1175 = load i32, i32* %1174, align 1
  %1176 = and i32 %1168, 7
  %1177 = lshr i32 %1175, %1176
  %1178 = add i32 %1168, 16
  %1179 = icmp ugt i32 %1169, %1178
  %1180 = select i1 %1179, i32 %1178, i32 %1169
  store i32 %1180, i32* %3, align 8
  %1181 = trunc i32 %1177 to i16
  %1182 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 1, i64 1
  %1183 = bitcast i8* %1182 to i16*
  store i16 %1181, i16* %1183, align 2
  %1184 = icmp eq i16 %1181, 0
  br i1 %1184, label %1185, label %1188

1185:                                             ; preds = %1167
  %1186 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1187 = load i8*, i8** %1186, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1187, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.36, i64 0, i64 0)) #7
  br label %1412

1188:                                             ; preds = %1167
  %1189 = load i32, i32* %3, align 8
  %1190 = load i32, i32* %5, align 8
  %1191 = load i8*, i8** %7, align 8
  %1192 = lshr i32 %1189, 3
  %1193 = zext i32 %1192 to i64
  %1194 = getelementptr inbounds i8, i8* %1191, i64 %1193
  %1195 = bitcast i8* %1194 to i32*
  %1196 = load i32, i32* %1195, align 1
  %1197 = and i32 %1189, 7
  %1198 = lshr i32 %1196, %1197
  %1199 = add i32 %1189, 16
  %1200 = icmp ugt i32 %1190, %1199
  %1201 = select i1 %1200, i32 %1199, i32 %1190
  store i32 %1201, i32* %3, align 8
  %1202 = trunc i32 %1198 to i16
  %1203 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 1, i64 3
  %1204 = bitcast i8* %1203 to i16*
  store i16 %1202, i16* %1204, align 4
  %1205 = icmp eq i16 %1202, 0
  br i1 %1205, label %1206, label %1209

1206:                                             ; preds = %1188
  %1207 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1208 = load i8*, i8** %1207, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1208, i32 16, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.37, i64 0, i64 0)) #7
  br label %1412

1209:                                             ; preds = %1188
  %1210 = load i32, i32* %3, align 8
  %1211 = load i32, i32* %5, align 8
  %1212 = load i8*, i8** %7, align 8
  %1213 = lshr i32 %1210, 3
  %1214 = zext i32 %1213 to i64
  %1215 = getelementptr inbounds i8, i8* %1212, i64 %1214
  %1216 = bitcast i8* %1215 to i32*
  %1217 = load i32, i32* %1216, align 1
  %1218 = and i32 %1210, 7
  %1219 = lshr i32 %1217, %1218
  %1220 = add i32 %1210, 6
  %1221 = icmp ugt i32 %1211, %1220
  %1222 = select i1 %1221, i32 %1220, i32 %1211
  store i32 %1222, i32* %3, align 8
  %1223 = trunc i32 %1219 to i8
  %1224 = and i8 %1223, 63
  %1225 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 1, i64 31
  store i8 %1224, i8* %1225, align 8
  %1226 = load i32, i32* %3, align 8
  %1227 = load i32, i32* %5, align 8
  %1228 = load i8*, i8** %7, align 8
  %1229 = lshr i32 %1226, 3
  %1230 = zext i32 %1229 to i64
  %1231 = getelementptr inbounds i8, i8* %1228, i64 %1230
  %1232 = bitcast i8* %1231 to i32*
  %1233 = load i32, i32* %1232, align 1
  %1234 = and i32 %1226, 7
  %1235 = lshr i32 %1233, %1234
  %1236 = add i32 %1226, 8
  %1237 = icmp ugt i32 %1227, %1236
  %1238 = select i1 %1237, i32 %1236, i32 %1227
  store i32 %1238, i32* %3, align 8
  %1239 = trunc i32 %1235 to i8
  %1240 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 2, i64 0
  store i8 %1239, i8* %1240, align 1
  %1241 = load i32, i32* %3, align 8
  %1242 = load i32, i32* %5, align 8
  %1243 = load i8*, i8** %7, align 8
  %1244 = lshr i32 %1241, 3
  %1245 = zext i32 %1244 to i64
  %1246 = getelementptr inbounds i8, i8* %1243, i64 %1245
  %1247 = bitcast i8* %1246 to i32*
  %1248 = load i32, i32* %1247, align 1
  %1249 = and i32 %1241, 7
  %1250 = lshr i32 %1248, %1249
  %1251 = add i32 %1241, 4
  %1252 = icmp ugt i32 %1242, %1251
  %1253 = select i1 %1252, i32 %1251, i32 %1242
  store i32 %1253, i32* %3, align 8
  %1254 = trunc i32 %1250 to i8
  %1255 = and i8 %1254, 15
  %1256 = add nuw nsw i8 %1255, 1
  %1257 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 2, i64 1
  store i8 %1256, i8* %1257, align 2
  %1258 = zext i8 %1256 to i64
  %1259 = tail call noalias i8* @av_malloc(i64 %1258) #7
  %1260 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 2, i64 7
  %1261 = bitcast i8* %1260 to i8**
  store i8* %1259, i8** %1261, align 8
  %1262 = icmp eq i8* %1259, null
  br i1 %1262, label %1412, label %1263

1263:                                             ; preds = %1209
  %1264 = load i8, i8* %1257, align 2
  %1265 = icmp eq i8 %1264, 0
  br i1 %1265, label %1306, label %1266

1266:                                             ; preds = %1263, %1286
  %1267 = phi i64 [ %1297, %1286 ], [ 0, %1263 ]
  %1268 = phi i32 [ %1296, %1286 ], [ 0, %1263 ]
  %1269 = load i32, i32* %3, align 8
  %1270 = load i32, i32* %5, align 8
  %1271 = load i8*, i8** %7, align 8
  %1272 = lshr i32 %1269, 3
  %1273 = zext i32 %1272 to i64
  %1274 = getelementptr inbounds i8, i8* %1271, i64 %1273
  %1275 = bitcast i8* %1274 to i32*
  %1276 = load i32, i32* %1275, align 1
  %1277 = and i32 %1269, 7
  %1278 = lshr i32 %1276, %1277
  %1279 = and i32 %1278, 255
  %1280 = add i32 %1269, 8
  %1281 = icmp ugt i32 %1270, %1280
  %1282 = select i1 %1281, i32 %1280, i32 %1270
  store i32 %1282, i32* %3, align 8
  %1283 = load i16, i16* %102, align 8
  %1284 = zext i16 %1283 to i32
  %1285 = icmp ult i32 %1279, %1284
  br i1 %1285, label %1286, label %1301

1286:                                             ; preds = %1266
  %1287 = trunc i32 %1278 to i8
  %1288 = load i8*, i8** %1261, align 8
  %1289 = getelementptr inbounds i8, i8* %1288, i64 %1267
  store i8 %1287, i8* %1289, align 1
  %1290 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %106, align 8
  %1291 = zext i32 %1279 to i64
  %1292 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %1290, i64 %1291, i32 0
  %1293 = load i8, i8* %1292, align 8
  %1294 = zext i8 %1293 to i32
  %1295 = icmp ult i32 %1268, %1294
  %1296 = select i1 %1295, i32 %1294, i32 %1268
  %1297 = add nuw nsw i64 %1267, 1
  %1298 = load i8, i8* %1257, align 2
  %1299 = zext i8 %1298 to i64
  %1300 = icmp ult i64 %1297, %1299
  br i1 %1300, label %1266, label %1306

1301:                                             ; preds = %1266
  %1302 = zext i16 %1283 to i32
  %1303 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1304 = load i8*, i8** %1303, align 8
  %1305 = add nsw i32 %1302, -1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1304, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @idx_err_str, i64 0, i64 0), i32 %1279, i32 %1305, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.31, i64 0, i64 0), i32 641) #7
  br label %1412

1306:                                             ; preds = %1286, %1263
  %1307 = phi i32 [ 0, %1263 ], [ %1296, %1286 ]
  %1308 = load %struct.vorbis_floor*, %struct.vorbis_floor** %793, align 8
  %1309 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %1308, i64 %805, i32 2, i32 0, i32 1, i64 7
  %1310 = bitcast i8* %1309 to [2 x i32*]*
  %1311 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %1308, i64 %805, i32 2, i32 0, i32 1, i64 1
  %1312 = bitcast i8* %1311 to i16*
  %1313 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %1308, i64 %805, i32 2, i32 0, i32 1, i64 3
  %1314 = bitcast i8* %1313 to i16*
  %1315 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %1308, i64 %805, i32 2, i32 0, i32 1, i64 23
  %1316 = bitcast i8* %1315 to [2 x i32]*
  br label %1317

1317:                                             ; preds = %1386, %1306
  %1318 = phi i64 [ 0, %1306 ], [ %1390, %1386 ]
  %1319 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 12, i64 %1318
  %1320 = load i32, i32* %1319, align 4
  %1321 = lshr i32 %1320, 1
  %1322 = add nuw nsw i32 %1321, 1
  %1323 = zext i32 %1322 to i64
  %1324 = tail call i8* @av_malloc_array(i64 %1323, i64 4) #7
  %1325 = bitcast i8* %1324 to i32*
  %1326 = getelementptr inbounds [2 x i32*], [2 x i32*]* %1310, i64 0, i64 %1318
  %1327 = bitcast i32** %1326 to i8**
  store i8* %1324, i8** %1327, align 8
  %1328 = icmp eq i8* %1324, null
  br i1 %1328, label %1412, label %1329

1329:                                             ; preds = %1317
  %1330 = icmp eq i32 %1321, 0
  br i1 %1330, label %1386, label %1331

1331:                                             ; preds = %1329
  %1332 = sitofp i32 %1321 to float
  %1333 = fmul nsz float %1332, 2.000000e+00
  %1334 = zext i32 %1321 to i64
  br label %1335

1335:                                             ; preds = %1383, %1331
  %1336 = phi i64 [ 0, %1331 ], [ %1384, %1383 ]
  %1337 = load i16, i16* %1312, align 2
  %1338 = zext i16 %1337 to i32
  %1339 = trunc i64 %1336 to i32
  %1340 = mul nsw i32 %1338, %1339
  %1341 = sitofp i32 %1340 to float
  %1342 = fdiv nsz float %1341, %1333
  %1343 = fmul nsz float %1342, 0x3F483F91E0000000
  %1344 = fpext float %1343 to double
  %1345 = tail call nsz double @atan(double %1344) #8
  %1346 = fmul nsz double %1345, 0x402A333340000000
  %1347 = fmul nsz float %1342, 0x3E53DD3DC0000000
  %1348 = fmul nsz float %1342, %1347
  %1349 = fpext float %1348 to double
  %1350 = tail call nsz double @atan(double %1349) #8
  %1351 = fmul nsz double %1350, 0x4001EB8520000000
  %1352 = fadd nsz double %1346, %1351
  %1353 = fmul nsz float %1342, 0x3F1A36E2E0000000
  %1354 = fpext float %1353 to double
  %1355 = fadd nsz double %1352, %1354
  %1356 = load i16, i16* %1314, align 4
  %1357 = uitofp i16 %1356 to double
  %1358 = uitofp i16 %1337 to float
  %1359 = fmul nsz float %1358, 5.000000e-01
  %1360 = fmul nsz float %1359, 0x3F483F91E0000000
  %1361 = fpext float %1360 to double
  %1362 = tail call nsz double @atan(double %1361) #8
  %1363 = fmul nsz double %1362, 0x402A333340000000
  %1364 = fmul nsz float %1359, 0x3E53DD3DC0000000
  %1365 = fmul nsz float %1359, %1364
  %1366 = fpext float %1365 to double
  %1367 = tail call nsz double @atan(double %1366) #8
  %1368 = fmul nsz double %1367, 0x4001EB8520000000
  %1369 = fadd nsz double %1363, %1368
  %1370 = fmul nsz float %1359, 0x3F1A36E2E0000000
  %1371 = fpext float %1370 to double
  %1372 = fadd nsz double %1369, %1371
  %1373 = fdiv nsz double %1357, %1372
  %1374 = fmul nsz double %1355, %1373
  %1375 = tail call nsz double @llvm.floor.f64(double %1374) #7
  %1376 = fptosi double %1375 to i32
  %1377 = getelementptr inbounds i32, i32* %1325, i64 %1336
  store i32 %1376, i32* %1377, align 4
  %1378 = load i16, i16* %1314, align 4
  %1379 = zext i16 %1378 to i32
  %1380 = icmp sgt i32 %1379, %1376
  br i1 %1380, label %1383, label %1381

1381:                                             ; preds = %1335
  %1382 = add nsw i32 %1379, -1
  store i32 %1382, i32* %1377, align 4
  br label %1383

1383:                                             ; preds = %1381, %1335
  %1384 = add nuw nsw i64 %1336, 1
  %1385 = icmp eq i64 %1384, %1334
  br i1 %1385, label %1386, label %1335

1386:                                             ; preds = %1383, %1329
  %1387 = phi i64 [ 0, %1329 ], [ %1334, %1383 ]
  %1388 = getelementptr inbounds i32, i32* %1325, i64 %1387
  store i32 -1, i32* %1388, align 4
  %1389 = getelementptr inbounds [2 x i32], [2 x i32]* %1316, i64 0, i64 %1318
  store i32 %1321, i32* %1389, align 4
  %1390 = add nuw nsw i64 %1318, 1
  %1391 = icmp eq i64 %1390, 2
  br i1 %1391, label %1392, label %1317

1392:                                             ; preds = %1386
  %1393 = load i8, i8* %1162, align 8
  %1394 = zext i8 %1393 to i32
  %1395 = add i32 %1307, 1
  %1396 = add i32 %1395, %1394
  %1397 = zext i32 %1396 to i64
  %1398 = tail call i8* @av_malloc_array(i64 %1397, i64 4) #7
  %1399 = getelementptr inbounds %struct.vorbis_floor, %struct.vorbis_floor* %804, i64 %805, i32 2, i32 0, i32 2, i64 15
  %1400 = bitcast i8* %1399 to i8**
  store i8* %1398, i8** %1400, align 8
  %1401 = icmp eq i8* %1398, null
  br i1 %1401, label %1412, label %1405

1402:                                             ; preds = %803
  %1403 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1404 = load i8*, i8** %1403, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1404, i32 16, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.39, i64 0, i64 0)) #7
  br label %1412

1405:                                             ; preds = %1392, %1139
  %1406 = add nuw nsw i64 %805, 1
  %1407 = load i8, i8* %789, align 8
  %1408 = zext i8 %1407 to i64
  %1409 = icmp ult i64 %1406, %1408
  br i1 %1409, label %1410, label %1415

1410:                                             ; preds = %1405
  %1411 = load %struct.vorbis_floor*, %struct.vorbis_floor** %793, align 8
  br label %803

1412:                                             ; preds = %1044, %1139, %1209, %1392, %1317, %775, %1402, %1070, %1078, %963, %930, %1164, %1185, %1206, %1301
  %1413 = phi i32 [ -1094995529, %1301 ], [ -1094995529, %1206 ], [ -1094995529, %1185 ], [ -1094995529, %1164 ], [ -1094995529, %930 ], [ -1094995529, %963 ], [ -1094995529, %1078 ], [ -1094995529, %1070 ], [ -1094995529, %1402 ], [ -12, %775 ], [ -12, %1317 ], [ -12, %1044 ], [ -1094995529, %1139 ], [ -12, %1209 ], [ -12, %1392 ]
  %1414 = bitcast %struct.vorbis_context_s* %0 to i8**
  br label %2200

1415:                                             ; preds = %1405, %797
  %1416 = load i32, i32* %3, align 8
  %1417 = load i32, i32* %5, align 8
  %1418 = load i8*, i8** %7, align 8
  %1419 = lshr i32 %1416, 3
  %1420 = zext i32 %1419 to i64
  %1421 = getelementptr inbounds i8, i8* %1418, i64 %1420
  %1422 = bitcast i8* %1421 to i32*
  %1423 = load i32, i32* %1422, align 1
  %1424 = and i32 %1416, 7
  %1425 = lshr i32 %1423, %1424
  %1426 = add i32 %1416, 6
  %1427 = icmp ugt i32 %1417, %1426
  %1428 = select i1 %1427, i32 %1426, i32 %1417
  store i32 %1428, i32* %3, align 8
  %1429 = trunc i32 %1425 to i8
  %1430 = and i8 %1429, 63
  %1431 = add nuw nsw i8 %1430, 1
  %1432 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 18
  store i8 %1431, i8* %1432, align 8
  %1433 = zext i8 %1431 to i64
  %1434 = mul nuw nsw i64 %1433, 1056
  %1435 = tail call noalias i8* @av_mallocz(i64 %1434) #7
  %1436 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 19
  %1437 = bitcast %struct.vorbis_residue** %1436 to i8**
  store i8* %1435, i8** %1437, align 8
  %1438 = icmp eq i8* %1435, null
  %1439 = bitcast i8* %1435 to %struct.vorbis_residue*
  br i1 %1438, label %1706, label %1440

1440:                                             ; preds = %1415
  %1441 = load i8, i8* %1432, align 8
  %1442 = icmp eq i8 %1441, 0
  br i1 %1442, label %1709, label %1443

1443:                                             ; preds = %1440
  %1444 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 0
  %1445 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 7
  br label %1446

1446:                                             ; preds = %1704, %1443
  %1447 = phi i64 [ %1700, %1704 ], [ 0, %1443 ]
  %1448 = phi %struct.vorbis_residue* [ %1705, %1704 ], [ %1439, %1443 ]
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1444) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1444, i8 -86, i64 64, i1 false) #7
  %1449 = load i32, i32* %3, align 8
  %1450 = load i32, i32* %5, align 8
  %1451 = load i8*, i8** %7, align 8
  %1452 = lshr i32 %1449, 3
  %1453 = zext i32 %1452 to i64
  %1454 = getelementptr inbounds i8, i8* %1451, i64 %1453
  %1455 = bitcast i8* %1454 to i32*
  %1456 = load i32, i32* %1455, align 1
  %1457 = and i32 %1449, 7
  %1458 = lshr i32 %1456, %1457
  %1459 = add i32 %1449, 16
  %1460 = icmp ugt i32 %1450, %1459
  %1461 = select i1 %1460, i32 %1459, i32 %1450
  store i32 %1461, i32* %3, align 8
  %1462 = trunc i32 %1458 to i16
  %1463 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %1448, i64 %1447, i32 0
  store i16 %1462, i16* %1463, align 8
  %1464 = load i32, i32* %3, align 8
  %1465 = load i32, i32* %5, align 8
  %1466 = load i8*, i8** %7, align 8
  %1467 = lshr i32 %1464, 3
  %1468 = zext i32 %1467 to i64
  %1469 = getelementptr inbounds i8, i8* %1466, i64 %1468
  %1470 = bitcast i8* %1469 to i32*
  %1471 = load i32, i32* %1470, align 1
  %1472 = and i32 %1464, 7
  %1473 = lshr i32 %1471, %1472
  %1474 = and i32 %1473, 16777215
  %1475 = add i32 %1464, 24
  %1476 = icmp ugt i32 %1465, %1475
  %1477 = select i1 %1476, i32 %1475, i32 %1465
  store i32 %1477, i32* %3, align 8
  %1478 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %1448, i64 %1447, i32 1
  store i32 %1474, i32* %1478, align 4
  %1479 = load i32, i32* %3, align 8
  %1480 = load i32, i32* %5, align 8
  %1481 = load i8*, i8** %7, align 8
  %1482 = lshr i32 %1479, 3
  %1483 = zext i32 %1482 to i64
  %1484 = getelementptr inbounds i8, i8* %1481, i64 %1483
  %1485 = bitcast i8* %1484 to i32*
  %1486 = load i32, i32* %1485, align 1
  %1487 = and i32 %1479, 7
  %1488 = lshr i32 %1486, %1487
  %1489 = and i32 %1488, 16777215
  %1490 = add i32 %1479, 24
  %1491 = icmp ugt i32 %1480, %1490
  %1492 = select i1 %1491, i32 %1490, i32 %1480
  store i32 %1492, i32* %3, align 8
  %1493 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %1448, i64 %1447, i32 2
  store i32 %1489, i32* %1493, align 8
  %1494 = load i32, i32* %3, align 8
  %1495 = load i32, i32* %5, align 8
  %1496 = load i8*, i8** %7, align 8
  %1497 = lshr i32 %1494, 3
  %1498 = zext i32 %1497 to i64
  %1499 = getelementptr inbounds i8, i8* %1496, i64 %1498
  %1500 = bitcast i8* %1499 to i32*
  %1501 = load i32, i32* %1500, align 1
  %1502 = and i32 %1494, 7
  %1503 = lshr i32 %1501, %1502
  %1504 = and i32 %1503, 16777215
  %1505 = add i32 %1494, 24
  %1506 = icmp ugt i32 %1495, %1505
  %1507 = select i1 %1506, i32 %1505, i32 %1495
  store i32 %1507, i32* %3, align 8
  %1508 = add nuw nsw i32 %1504, 1
  %1509 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %1448, i64 %1447, i32 3
  store i32 %1508, i32* %1509, align 4
  %1510 = load i32, i32* %1478, align 4
  %1511 = load i32, i32* %1493, align 8
  %1512 = icmp ult i32 %1511, %1510
  br i1 %1512, label %1517, label %1513

1513:                                             ; preds = %1446
  %1514 = sub i32 %1511, %1510
  %1515 = udiv i32 %1514, %1508
  %1516 = icmp ugt i32 %1515, 65535
  br i1 %1516, label %1517, label %1525

1517:                                             ; preds = %1513, %1446
  %1518 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1519 = load i8*, i8** %1518, align 8
  %1520 = load i16, i16* %1463, align 8
  %1521 = zext i16 %1520 to i32
  %1522 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 12, i64 1
  %1523 = load i32, i32* %1522, align 4
  %1524 = lshr i32 %1523, 1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1519, i32 16, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.41, i64 0, i64 0), i32 %1521, i32 %1510, i32 %1511, i32 %1508, i32 %1524) #7
  br label %1697

1525:                                             ; preds = %1513
  %1526 = load i32, i32* %3, align 8
  %1527 = load i32, i32* %5, align 8
  %1528 = load i8*, i8** %7, align 8
  %1529 = lshr i32 %1526, 3
  %1530 = zext i32 %1529 to i64
  %1531 = getelementptr inbounds i8, i8* %1528, i64 %1530
  %1532 = bitcast i8* %1531 to i32*
  %1533 = load i32, i32* %1532, align 1
  %1534 = and i32 %1526, 7
  %1535 = lshr i32 %1533, %1534
  %1536 = add i32 %1526, 6
  %1537 = icmp ugt i32 %1527, %1536
  %1538 = select i1 %1537, i32 %1536, i32 %1527
  store i32 %1538, i32* %3, align 8
  %1539 = trunc i32 %1535 to i8
  %1540 = and i8 %1539, 63
  %1541 = add nuw nsw i8 %1540, 1
  %1542 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %1448, i64 %1447, i32 4
  store i8 %1541, i8* %1542, align 8
  %1543 = load i32, i32* %3, align 8
  %1544 = load i32, i32* %5, align 8
  %1545 = load i8*, i8** %7, align 8
  %1546 = lshr i32 %1543, 3
  %1547 = zext i32 %1546 to i64
  %1548 = getelementptr inbounds i8, i8* %1545, i64 %1547
  %1549 = bitcast i8* %1548 to i32*
  %1550 = load i32, i32* %1549, align 1
  %1551 = and i32 %1543, 7
  %1552 = lshr i32 %1550, %1551
  %1553 = and i32 %1552, 255
  %1554 = add i32 %1543, 8
  %1555 = icmp ugt i32 %1544, %1554
  %1556 = select i1 %1555, i32 %1554, i32 %1544
  store i32 %1556, i32* %3, align 8
  %1557 = trunc i32 %1552 to i8
  %1558 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %1448, i64 %1447, i32 5
  store i8 %1557, i8* %1558, align 1
  %1559 = load i16, i16* %102, align 8
  %1560 = zext i16 %1559 to i32
  %1561 = icmp ult i32 %1553, %1560
  br i1 %1561, label %1567, label %1562

1562:                                             ; preds = %1525
  %1563 = zext i16 %1559 to i32
  %1564 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1565 = load i8*, i8** %1564, align 8
  %1566 = add nsw i32 %1563, -1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1565, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @idx_err_str, i64 0, i64 0), i32 %1553, i32 %1566, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.31, i64 0, i64 0), i32 724) #7
  br label %1697

1567:                                             ; preds = %1525
  %1568 = load i32, i32* %1493, align 8
  %1569 = load i32, i32* %1478, align 4
  %1570 = sub i32 %1568, %1569
  %1571 = load i32, i32* %1509, align 4
  %1572 = udiv i32 %1570, %1571
  %1573 = trunc i32 %1572 to i16
  %1574 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %1448, i64 %1447, i32 8
  store i16 %1573, i16* %1574, align 4
  %1575 = and i32 %1572, 65535
  %1576 = zext i32 %1575 to i64
  %1577 = load i8, i8* %1445, align 8
  %1578 = zext i8 %1577 to i64
  %1579 = tail call i8* @av_malloc_array(i64 %1576, i64 %1578) #7
  %1580 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %1448, i64 %1447, i32 9
  store i8* %1579, i8** %1580, align 8
  %1581 = icmp eq i8* %1579, null
  br i1 %1581, label %1697, label %1582

1582:                                             ; preds = %1567
  %1583 = load i8, i8* %1542, align 8
  %1584 = icmp eq i8 %1583, 0
  br i1 %1584, label %1585, label %1587

1585:                                             ; preds = %1582
  %1586 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %1448, i64 %1447, i32 7
  store i8 0, i8* %1586, align 2
  br label %1699

1587:                                             ; preds = %1582
  %1588 = load i32, i32* %3, align 8
  %1589 = load i32, i32* %5, align 8
  %1590 = load i8*, i8** %7, align 8
  br label %1591

1591:                                             ; preds = %1629, %1587
  %1592 = phi i32 [ %1588, %1587 ], [ %1630, %1629 ]
  %1593 = phi i64 [ 0, %1587 ], [ %1636, %1629 ]
  %1594 = lshr i32 %1592, 3
  %1595 = zext i32 %1594 to i64
  %1596 = getelementptr inbounds i8, i8* %1590, i64 %1595
  %1597 = bitcast i8* %1596 to i32*
  %1598 = load i32, i32* %1597, align 1
  %1599 = and i32 %1592, 7
  %1600 = lshr i32 %1598, %1599
  %1601 = and i32 %1600, 7
  %1602 = add i32 %1592, 3
  %1603 = icmp ugt i32 %1589, %1602
  %1604 = select i1 %1603, i32 %1602, i32 %1589
  store i32 %1604, i32* %3, align 8
  %1605 = lshr i32 %1604, 3
  %1606 = zext i32 %1605 to i64
  %1607 = getelementptr inbounds i8, i8* %1590, i64 %1606
  %1608 = load i8, i8* %1607, align 1
  %1609 = and i32 %1604, 7
  %1610 = zext i8 %1608 to i32
  %1611 = icmp slt i32 %1604, %1589
  %1612 = zext i1 %1611 to i32
  %1613 = add i32 %1604, %1612
  store i32 %1613, i32* %3, align 8
  %1614 = shl i32 1, %1609
  %1615 = and i32 %1614, %1610
  %1616 = icmp eq i32 %1615, 0
  br i1 %1616, label %1629, label %1617

1617:                                             ; preds = %1591
  %1618 = lshr i32 %1613, 3
  %1619 = zext i32 %1618 to i64
  %1620 = getelementptr inbounds i8, i8* %1590, i64 %1619
  %1621 = bitcast i8* %1620 to i32*
  %1622 = load i32, i32* %1621, align 1
  %1623 = and i32 %1613, 7
  %1624 = lshr i32 %1622, %1623
  %1625 = and i32 %1624, 31
  %1626 = add i32 %1613, 5
  %1627 = icmp ugt i32 %1589, %1626
  %1628 = select i1 %1627, i32 %1626, i32 %1589
  store i32 %1628, i32* %3, align 8
  br label %1629

1629:                                             ; preds = %1617, %1591
  %1630 = phi i32 [ %1628, %1617 ], [ %1613, %1591 ]
  %1631 = phi i32 [ %1625, %1617 ], [ 0, %1591 ]
  %1632 = shl nuw nsw i32 %1631, 3
  %1633 = or i32 %1632, %1601
  %1634 = trunc i32 %1633 to i8
  %1635 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 %1593
  store i8 %1634, i8* %1635, align 1
  %1636 = add nuw nsw i64 %1593, 1
  %1637 = load i8, i8* %1542, align 8
  %1638 = zext i8 %1637 to i64
  %1639 = icmp ult i64 %1636, %1638
  br i1 %1639, label %1591, label %1640

1640:                                             ; preds = %1629
  %1641 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %1448, i64 %1447, i32 7
  store i8 0, i8* %1641, align 2
  %1642 = icmp eq i8 %1637, 0
  br i1 %1642, label %1699, label %1643

1643:                                             ; preds = %1640, %1692
  %1644 = phi i64 [ %1693, %1692 ], [ 0, %1640 ]
  %1645 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 %1644
  %1646 = load i8, i8* %1645, align 1
  %1647 = zext i8 %1646 to i32
  br label %1648

1648:                                             ; preds = %1688, %1643
  %1649 = phi i64 [ 0, %1643 ], [ %1689, %1688 ]
  %1650 = phi i32 [ 0, %1643 ], [ %1690, %1688 ]
  %1651 = trunc i64 %1649 to i32
  %1652 = shl i32 1, %1651
  %1653 = and i32 %1652, %1647
  %1654 = icmp eq i32 %1653, 0
  br i1 %1654, label %1686, label %1655

1655:                                             ; preds = %1648
  %1656 = load i32, i32* %3, align 8
  %1657 = load i32, i32* %5, align 8
  %1658 = load i8*, i8** %7, align 8
  %1659 = lshr i32 %1656, 3
  %1660 = zext i32 %1659 to i64
  %1661 = getelementptr inbounds i8, i8* %1658, i64 %1660
  %1662 = bitcast i8* %1661 to i32*
  %1663 = load i32, i32* %1662, align 1
  %1664 = and i32 %1656, 7
  %1665 = lshr i32 %1663, %1664
  %1666 = and i32 %1665, 255
  %1667 = add i32 %1656, 8
  %1668 = icmp ugt i32 %1657, %1667
  %1669 = select i1 %1668, i32 %1667, i32 %1657
  store i32 %1669, i32* %3, align 8
  %1670 = trunc i32 %1666 to i16
  %1671 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %1448, i64 %1447, i32 6, i64 %1644, i64 %1649
  store i16 %1670, i16* %1671, align 2
  %1672 = load i16, i16* %102, align 8
  %1673 = zext i16 %1672 to i32
  %1674 = icmp ult i32 %1666, %1673
  br i1 %1674, label %1680, label %1675

1675:                                             ; preds = %1655
  %1676 = zext i16 %1672 to i32
  %1677 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1678 = load i8*, i8** %1677, align 8
  %1679 = add nsw i32 %1676, -1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1678, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @idx_err_str, i64 0, i64 0), i32 %1666, i32 %1679, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.31, i64 0, i64 0), i32 752) #7
  br label %1697

1680:                                             ; preds = %1655
  %1681 = load i8, i8* %1641, align 2
  %1682 = zext i8 %1681 to i64
  %1683 = icmp ugt i64 %1649, %1682
  br i1 %1683, label %1684, label %1688

1684:                                             ; preds = %1680
  %1685 = trunc i32 %1650 to i8
  store i8 %1685, i8* %1641, align 2
  br label %1688

1686:                                             ; preds = %1648
  %1687 = getelementptr inbounds %struct.vorbis_residue, %struct.vorbis_residue* %1448, i64 %1447, i32 6, i64 %1644, i64 %1649
  store i16 -1, i16* %1687, align 2
  br label %1688

1688:                                             ; preds = %1686, %1684, %1680
  %1689 = add nuw nsw i64 %1649, 1
  %1690 = add nuw nsw i32 %1650, 1
  %1691 = icmp eq i64 %1689, 8
  br i1 %1691, label %1692, label %1648

1692:                                             ; preds = %1688
  %1693 = add nuw nsw i64 %1644, 1
  %1694 = load i8, i8* %1542, align 8
  %1695 = zext i8 %1694 to i64
  %1696 = icmp ult i64 %1693, %1695
  br i1 %1696, label %1643, label %1699

1697:                                             ; preds = %1567, %1675, %1562, %1517
  %1698 = phi i32 [ -1094995529, %1675 ], [ -1094995529, %1562 ], [ -1094995529, %1517 ], [ -12, %1567 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1444) #7
  br label %1706

1699:                                             ; preds = %1692, %1640, %1585
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1444) #7
  %1700 = add nuw nsw i64 %1447, 1
  %1701 = load i8, i8* %1432, align 8
  %1702 = zext i8 %1701 to i64
  %1703 = icmp ult i64 %1700, %1702
  br i1 %1703, label %1704, label %1709

1704:                                             ; preds = %1699
  %1705 = load %struct.vorbis_residue*, %struct.vorbis_residue** %1436, align 8
  br label %1446

1706:                                             ; preds = %1697, %1415
  %1707 = phi i32 [ -12, %1415 ], [ %1698, %1697 ]
  %1708 = bitcast %struct.vorbis_context_s* %0 to i8**
  br label %2200

1709:                                             ; preds = %1699, %1440
  %1710 = load i32, i32* %3, align 8
  %1711 = load i32, i32* %5, align 8
  %1712 = load i8*, i8** %7, align 8
  %1713 = lshr i32 %1710, 3
  %1714 = zext i32 %1713 to i64
  %1715 = getelementptr inbounds i8, i8* %1712, i64 %1714
  %1716 = bitcast i8* %1715 to i32*
  %1717 = load i32, i32* %1716, align 1
  %1718 = and i32 %1710, 7
  %1719 = lshr i32 %1717, %1718
  %1720 = add i32 %1710, 6
  %1721 = icmp ugt i32 %1711, %1720
  %1722 = select i1 %1721, i32 %1720, i32 %1711
  store i32 %1722, i32* %3, align 8
  %1723 = trunc i32 %1719 to i8
  %1724 = and i8 %1723, 63
  %1725 = add nuw nsw i8 %1724, 1
  %1726 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 20
  store i8 %1725, i8* %1726, align 8
  %1727 = zext i8 %1725 to i64
  %1728 = shl nuw nsw i64 %1727, 6
  %1729 = tail call noalias i8* @av_mallocz(i64 %1728) #7
  %1730 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 21
  %1731 = bitcast %struct.vorbis_mapping** %1730 to i8**
  store i8* %1729, i8** %1731, align 8
  %1732 = icmp eq i8* %1729, null
  %1733 = bitcast i8* %1729 to %struct.vorbis_mapping*
  br i1 %1732, label %2068, label %1734

1734:                                             ; preds = %1709
  %1735 = load i8, i8* %1726, align 8
  %1736 = icmp eq i8 %1735, 0
  br i1 %1736, label %2071, label %1737

1737:                                             ; preds = %1734
  %1738 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 7
  %1739 = load i32, i32* %3, align 8
  %1740 = load i32, i32* %5, align 8
  %1741 = load i8*, i8** %7, align 8
  %1742 = lshr i32 %1739, 3
  %1743 = zext i32 %1742 to i64
  %1744 = getelementptr inbounds i8, i8* %1741, i64 %1743
  %1745 = bitcast i8* %1744 to i32*
  %1746 = load i32, i32* %1745, align 1
  %1747 = and i32 %1739, 7
  %1748 = add i32 %1739, 16
  %1749 = icmp ugt i32 %1740, %1748
  %1750 = select i1 %1749, i32 %1748, i32 %1740
  store i32 %1750, i32* %3, align 8
  %1751 = shl i32 65535, %1747
  %1752 = and i32 %1746, %1751
  %1753 = icmp eq i32 %1752, 0
  br i1 %1753, label %1757, label %1754

1754:                                             ; preds = %2051, %1737
  %1755 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1756 = load i8*, i8** %1755, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1756, i32 16, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.44, i64 0, i64 0)) #7
  br label %2068

1757:                                             ; preds = %1737, %2051
  %1758 = phi i32 [ %2064, %2051 ], [ %1750, %1737 ]
  %1759 = phi i8* [ %2055, %2051 ], [ %1741, %1737 ]
  %1760 = phi i32 [ %2054, %2051 ], [ %1740, %1737 ]
  %1761 = phi i64 [ %2047, %2051 ], [ 0, %1737 ]
  %1762 = phi %struct.vorbis_mapping* [ %2052, %2051 ], [ %1733, %1737 ]
  %1763 = lshr i32 %1758, 3
  %1764 = zext i32 %1763 to i64
  %1765 = getelementptr inbounds i8, i8* %1759, i64 %1764
  %1766 = load i8, i8* %1765, align 1
  %1767 = and i32 %1758, 7
  %1768 = zext i8 %1766 to i32
  %1769 = icmp slt i32 %1758, %1760
  %1770 = zext i1 %1769 to i32
  %1771 = add i32 %1758, %1770
  store i32 %1771, i32* %3, align 8
  %1772 = shl i32 1, %1767
  %1773 = and i32 %1772, %1768
  %1774 = icmp eq i32 %1773, 0
  br i1 %1774, label %1789, label %1775

1775:                                             ; preds = %1757
  %1776 = lshr i32 %1771, 3
  %1777 = zext i32 %1776 to i64
  %1778 = getelementptr inbounds i8, i8* %1759, i64 %1777
  %1779 = bitcast i8* %1778 to i32*
  %1780 = load i32, i32* %1779, align 1
  %1781 = and i32 %1771, 7
  %1782 = lshr i32 %1780, %1781
  %1783 = add i32 %1771, 4
  %1784 = icmp ugt i32 %1760, %1783
  %1785 = select i1 %1784, i32 %1783, i32 %1760
  store i32 %1785, i32* %3, align 8
  %1786 = trunc i32 %1782 to i8
  %1787 = and i8 %1786, 15
  %1788 = add nuw nsw i8 %1787, 1
  br label %1789

1789:                                             ; preds = %1775, %1757
  %1790 = phi i8 [ %1788, %1775 ], [ 1, %1757 ]
  %1791 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %1762, i64 %1761, i32 0
  store i8 %1790, i8* %1791, align 8
  %1792 = load i32, i32* %3, align 8
  %1793 = load i8*, i8** %7, align 8
  %1794 = lshr i32 %1792, 3
  %1795 = zext i32 %1794 to i64
  %1796 = getelementptr inbounds i8, i8* %1793, i64 %1795
  %1797 = load i8, i8* %1796, align 1
  %1798 = and i32 %1792, 7
  %1799 = zext i8 %1797 to i32
  %1800 = load i32, i32* %5, align 8
  %1801 = icmp slt i32 %1792, %1800
  %1802 = zext i1 %1801 to i32
  %1803 = add i32 %1792, %1802
  store i32 %1803, i32* %3, align 8
  %1804 = shl i32 1, %1798
  %1805 = and i32 %1804, %1799
  %1806 = icmp eq i32 %1805, 0
  br i1 %1806, label %1925, label %1807

1807:                                             ; preds = %1789
  %1808 = lshr i32 %1803, 3
  %1809 = zext i32 %1808 to i64
  %1810 = getelementptr inbounds i8, i8* %1793, i64 %1809
  %1811 = bitcast i8* %1810 to i32*
  %1812 = load i32, i32* %1811, align 1
  %1813 = and i32 %1803, 7
  %1814 = lshr i32 %1812, %1813
  %1815 = add i32 %1803, 8
  %1816 = icmp ugt i32 %1800, %1815
  %1817 = select i1 %1816, i32 %1815, i32 %1800
  store i32 %1817, i32* %3, align 8
  %1818 = trunc i32 %1814 to i16
  %1819 = and i16 %1818, 255
  %1820 = add nuw nsw i16 %1819, 1
  %1821 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %1762, i64 %1761, i32 1
  store i16 %1820, i16* %1821, align 2
  %1822 = load i8, i8* %1738, align 8
  %1823 = icmp ult i8 %1822, 2
  br i1 %1823, label %1824, label %1827

1824:                                             ; preds = %1807
  %1825 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1826 = load i8*, i8** %1825, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1826, i32 16, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.45, i64 0, i64 0)) #7
  br label %2068

1827:                                             ; preds = %1807
  %1828 = zext i16 %1820 to i64
  %1829 = tail call noalias i8* @av_mallocz(i64 %1828) #7
  %1830 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %1762, i64 %1761, i32 2
  store i8* %1829, i8** %1830, align 8
  %1831 = load i16, i16* %1821, align 2
  %1832 = zext i16 %1831 to i64
  %1833 = tail call noalias i8* @av_mallocz(i64 %1832) #7
  %1834 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %1762, i64 %1761, i32 3
  store i8* %1833, i8** %1834, align 8
  %1835 = icmp eq i8* %1833, null
  br i1 %1835, label %2068, label %1836

1836:                                             ; preds = %1827
  %1837 = load i8*, i8** %1830, align 8
  %1838 = icmp eq i8* %1837, null
  br i1 %1838, label %2068, label %1839

1839:                                             ; preds = %1836
  %1840 = load i16, i16* %1821, align 2
  %1841 = icmp eq i16 %1840, 0
  br i1 %1841, label %1927, label %1842

1842:                                             ; preds = %1839
  %1843 = load i8, i8* %1738, align 8
  br label %1848

1844:                                             ; preds = %1888
  %1845 = load i16, i16* %1821, align 2
  %1846 = zext i16 %1845 to i64
  %1847 = icmp ult i64 %1918, %1846
  br i1 %1847, label %1848, label %1927

1848:                                             ; preds = %1844, %1842
  %1849 = phi i8 [ %1843, %1842 ], [ %1916, %1844 ]
  %1850 = phi i64 [ 0, %1842 ], [ %1918, %1844 ]
  %1851 = zext i8 %1849 to i32
  %1852 = shl nuw nsw i32 %1851, 1
  %1853 = add nsw i32 %1852, -2
  %1854 = or i32 %1853, 1
  %1855 = tail call i32 @llvm.ctlz.i32(i32 %1854, i1 true) #7, !range !4
  %1856 = xor i32 %1855, 31
  %1857 = load i32, i32* %3, align 8
  %1858 = load i32, i32* %5, align 8
  %1859 = load i8*, i8** %7, align 8
  %1860 = lshr i32 %1857, 3
  %1861 = zext i32 %1860 to i64
  %1862 = getelementptr inbounds i8, i8* %1859, i64 %1861
  %1863 = bitcast i8* %1862 to i32*
  %1864 = load i32, i32* %1863, align 1
  %1865 = and i32 %1857, 7
  %1866 = lshr i32 %1864, %1865
  %1867 = sub nuw nsw i32 32, %1856
  %1868 = lshr i32 -1, %1867
  %1869 = and i32 %1868, %1866
  %1870 = add i32 %1856, %1857
  %1871 = icmp ugt i32 %1858, %1870
  %1872 = select i1 %1871, i32 %1870, i32 %1858
  store i32 %1872, i32* %3, align 8
  %1873 = trunc i32 %1869 to i8
  %1874 = load i8*, i8** %1830, align 8
  %1875 = getelementptr inbounds i8, i8* %1874, i64 %1850
  store i8 %1873, i8* %1875, align 1
  %1876 = load i8*, i8** %1830, align 8
  %1877 = getelementptr inbounds i8, i8* %1876, i64 %1850
  %1878 = load i8, i8* %1877, align 1
  %1879 = load i8, i8* %1738, align 8
  %1880 = icmp ult i8 %1878, %1879
  %1881 = zext i8 %1879 to i32
  br i1 %1880, label %1888, label %1882

1882:                                             ; preds = %1848
  %1883 = zext i8 %1879 to i32
  %1884 = zext i8 %1878 to i32
  %1885 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1886 = load i8*, i8** %1885, align 8
  %1887 = add nsw i32 %1883, -1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1886, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @idx_err_str, i64 0, i64 0), i32 %1884, i32 %1887, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.31, i64 0, i64 0), i32 810) #7
  br label %2068

1888:                                             ; preds = %1848
  %1889 = shl nuw nsw i32 %1881, 1
  %1890 = add nsw i32 %1889, -2
  %1891 = or i32 %1890, 1
  %1892 = tail call i32 @llvm.ctlz.i32(i32 %1891, i1 true) #7, !range !4
  %1893 = xor i32 %1892, 31
  %1894 = load i32, i32* %3, align 8
  %1895 = load i32, i32* %5, align 8
  %1896 = load i8*, i8** %7, align 8
  %1897 = lshr i32 %1894, 3
  %1898 = zext i32 %1897 to i64
  %1899 = getelementptr inbounds i8, i8* %1896, i64 %1898
  %1900 = bitcast i8* %1899 to i32*
  %1901 = load i32, i32* %1900, align 1
  %1902 = and i32 %1894, 7
  %1903 = lshr i32 %1901, %1902
  %1904 = sub nuw nsw i32 32, %1893
  %1905 = lshr i32 -1, %1904
  %1906 = and i32 %1903, %1905
  %1907 = add i32 %1894, %1893
  %1908 = icmp ugt i32 %1895, %1907
  %1909 = select i1 %1908, i32 %1907, i32 %1895
  store i32 %1909, i32* %3, align 8
  %1910 = trunc i32 %1906 to i8
  %1911 = load i8*, i8** %1834, align 8
  %1912 = getelementptr inbounds i8, i8* %1911, i64 %1850
  store i8 %1910, i8* %1912, align 1
  %1913 = load i8*, i8** %1834, align 8
  %1914 = getelementptr inbounds i8, i8* %1913, i64 %1850
  %1915 = load i8, i8* %1914, align 1
  %1916 = load i8, i8* %1738, align 8
  %1917 = icmp ult i8 %1915, %1916
  %1918 = add nuw nsw i64 %1850, 1
  br i1 %1917, label %1844, label %1919

1919:                                             ; preds = %1888
  %1920 = zext i8 %1915 to i32
  %1921 = zext i8 %1916 to i32
  %1922 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1923 = load i8*, i8** %1922, align 8
  %1924 = add nsw i32 %1921, -1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1923, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @idx_err_str, i64 0, i64 0), i32 %1920, i32 %1924, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.31, i64 0, i64 0), i32 811) #7
  br label %2068

1925:                                             ; preds = %1789
  %1926 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %1762, i64 %1761, i32 1
  store i16 0, i16* %1926, align 2
  br label %1927

1927:                                             ; preds = %1844, %1925, %1839
  %1928 = load i32, i32* %3, align 8
  %1929 = load i32, i32* %5, align 8
  %1930 = load i8*, i8** %7, align 8
  %1931 = lshr i32 %1928, 3
  %1932 = zext i32 %1931 to i64
  %1933 = getelementptr inbounds i8, i8* %1930, i64 %1932
  %1934 = bitcast i8* %1933 to i32*
  %1935 = load i32, i32* %1934, align 1
  %1936 = and i32 %1928, 7
  %1937 = add i32 %1928, 2
  %1938 = icmp ugt i32 %1929, %1937
  %1939 = select i1 %1938, i32 %1937, i32 %1929
  store i32 %1939, i32* %3, align 8
  %1940 = shl i32 3, %1936
  %1941 = and i32 %1935, %1940
  %1942 = icmp eq i32 %1941, 0
  br i1 %1942, label %1947, label %1943

1943:                                             ; preds = %1927
  %1944 = trunc i64 %1761 to i32
  %1945 = bitcast %struct.vorbis_context_s* %0 to i8**
  %1946 = load i8*, i8** %1945, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1946, i32 16, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.48, i64 0, i64 0), i32 %1944) #7
  br label %2068

1947:                                             ; preds = %1927
  %1948 = load i8, i8* %1791, align 8
  %1949 = icmp ugt i8 %1948, 1
  br i1 %1949, label %1950, label %1984

1950:                                             ; preds = %1947
  %1951 = load i8, i8* %1738, align 8
  %1952 = zext i8 %1951 to i64
  %1953 = tail call i8* @av_mallocz_array(i64 %1952, i64 1) #7
  %1954 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %1762, i64 %1761, i32 4
  store i8* %1953, i8** %1954, align 8
  %1955 = icmp eq i8* %1953, null
  br i1 %1955, label %2068, label %1956

1956:                                             ; preds = %1950
  %1957 = load i8, i8* %1738, align 8
  %1958 = icmp eq i8 %1957, 0
  br i1 %1958, label %1982, label %1959

1959:                                             ; preds = %1956, %1959
  %1960 = phi i64 [ %1978, %1959 ], [ 0, %1956 ]
  %1961 = load i32, i32* %3, align 8
  %1962 = load i32, i32* %5, align 8
  %1963 = load i8*, i8** %7, align 8
  %1964 = lshr i32 %1961, 3
  %1965 = zext i32 %1964 to i64
  %1966 = getelementptr inbounds i8, i8* %1963, i64 %1965
  %1967 = bitcast i8* %1966 to i32*
  %1968 = load i32, i32* %1967, align 1
  %1969 = and i32 %1961, 7
  %1970 = lshr i32 %1968, %1969
  %1971 = add i32 %1961, 4
  %1972 = icmp ugt i32 %1962, %1971
  %1973 = select i1 %1972, i32 %1971, i32 %1962
  store i32 %1973, i32* %3, align 8
  %1974 = trunc i32 %1970 to i8
  %1975 = and i8 %1974, 15
  %1976 = load i8*, i8** %1954, align 8
  %1977 = getelementptr inbounds i8, i8* %1976, i64 %1960
  store i8 %1975, i8* %1977, align 1
  %1978 = add nuw nsw i64 %1960, 1
  %1979 = load i8, i8* %1738, align 8
  %1980 = zext i8 %1979 to i64
  %1981 = icmp ult i64 %1978, %1980
  br i1 %1981, label %1959, label %1982

1982:                                             ; preds = %1959, %1956
  %1983 = load i8, i8* %1791, align 8
  br label %1984

1984:                                             ; preds = %1982, %1947
  %1985 = phi i8 [ %1983, %1982 ], [ %1948, %1947 ]
  %1986 = icmp eq i8 %1985, 0
  br i1 %1986, label %2046, label %1991

1987:                                             ; preds = %2020
  %1988 = load i8, i8* %1791, align 8
  %1989 = zext i8 %1988 to i64
  %1990 = icmp ult i64 %2040, %1989
  br i1 %1990, label %1991, label %2046

1991:                                             ; preds = %1984, %1987
  %1992 = phi i64 [ %2040, %1987 ], [ 0, %1984 ]
  %1993 = load i32, i32* %3, align 8
  %1994 = load i32, i32* %5, align 8
  %1995 = add i32 %1993, 8
  %1996 = icmp ugt i32 %1994, %1995
  %1997 = select i1 %1996, i32 %1995, i32 %1994
  store i32 %1997, i32* %3, align 8
  %1998 = load i8*, i8** %7, align 8
  %1999 = lshr i32 %1997, 3
  %2000 = zext i32 %1999 to i64
  %2001 = getelementptr inbounds i8, i8* %1998, i64 %2000
  %2002 = bitcast i8* %2001 to i32*
  %2003 = load i32, i32* %2002, align 1
  %2004 = and i32 %1997, 7
  %2005 = lshr i32 %2003, %2004
  %2006 = and i32 %2005, 255
  %2007 = add i32 %1997, 8
  %2008 = icmp ugt i32 %1994, %2007
  %2009 = select i1 %2008, i32 %2007, i32 %1994
  store i32 %2009, i32* %3, align 8
  %2010 = trunc i32 %2005 to i8
  %2011 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %1762, i64 %1761, i32 5, i64 %1992
  store i8 %2010, i8* %2011, align 1
  %2012 = load i8, i8* %789, align 8
  %2013 = zext i8 %2012 to i32
  %2014 = icmp ult i32 %2006, %2013
  br i1 %2014, label %2020, label %2015

2015:                                             ; preds = %1991
  %2016 = zext i8 %2012 to i32
  %2017 = bitcast %struct.vorbis_context_s* %0 to i8**
  %2018 = load i8*, i8** %2017, align 8
  %2019 = add nsw i32 %2016, -1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %2018, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @idx_err_str, i64 0, i64 0), i32 %2006, i32 %2019, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.31, i64 0, i64 0), i32 837) #7
  br label %2068

2020:                                             ; preds = %1991
  %2021 = load i32, i32* %3, align 8
  %2022 = load i32, i32* %5, align 8
  %2023 = load i8*, i8** %7, align 8
  %2024 = lshr i32 %2021, 3
  %2025 = zext i32 %2024 to i64
  %2026 = getelementptr inbounds i8, i8* %2023, i64 %2025
  %2027 = bitcast i8* %2026 to i32*
  %2028 = load i32, i32* %2027, align 1
  %2029 = and i32 %2021, 7
  %2030 = lshr i32 %2028, %2029
  %2031 = and i32 %2030, 255
  %2032 = add i32 %2021, 8
  %2033 = icmp ugt i32 %2022, %2032
  %2034 = select i1 %2033, i32 %2032, i32 %2022
  store i32 %2034, i32* %3, align 8
  %2035 = trunc i32 %2030 to i8
  %2036 = getelementptr inbounds %struct.vorbis_mapping, %struct.vorbis_mapping* %1762, i64 %1761, i32 6, i64 %1992
  store i8 %2035, i8* %2036, align 1
  %2037 = load i8, i8* %1432, align 8
  %2038 = zext i8 %2037 to i32
  %2039 = icmp ult i32 %2031, %2038
  %2040 = add nuw nsw i64 %1992, 1
  br i1 %2039, label %1987, label %2041

2041:                                             ; preds = %2020
  %2042 = zext i8 %2037 to i32
  %2043 = bitcast %struct.vorbis_context_s* %0 to i8**
  %2044 = load i8*, i8** %2043, align 8
  %2045 = add nsw i32 %2042, -1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %2044, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @idx_err_str, i64 0, i64 0), i32 %2031, i32 %2045, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.31, i64 0, i64 0), i32 838) #7
  br label %2068

2046:                                             ; preds = %1987, %1984
  %2047 = add nuw nsw i64 %1761, 1
  %2048 = load i8, i8* %1726, align 8
  %2049 = zext i8 %2048 to i64
  %2050 = icmp ult i64 %2047, %2049
  br i1 %2050, label %2051, label %2071

2051:                                             ; preds = %2046
  %2052 = load %struct.vorbis_mapping*, %struct.vorbis_mapping** %1730, align 8
  %2053 = load i32, i32* %3, align 8
  %2054 = load i32, i32* %5, align 8
  %2055 = load i8*, i8** %7, align 8
  %2056 = lshr i32 %2053, 3
  %2057 = zext i32 %2056 to i64
  %2058 = getelementptr inbounds i8, i8* %2055, i64 %2057
  %2059 = bitcast i8* %2058 to i32*
  %2060 = load i32, i32* %2059, align 1
  %2061 = and i32 %2053, 7
  %2062 = add i32 %2053, 16
  %2063 = icmp ugt i32 %2054, %2062
  %2064 = select i1 %2063, i32 %2062, i32 %2054
  store i32 %2064, i32* %3, align 8
  %2065 = shl i32 65535, %2061
  %2066 = and i32 %2060, %2065
  %2067 = icmp eq i32 %2066, 0
  br i1 %2067, label %1757, label %1754

2068:                                             ; preds = %1836, %1827, %1950, %1709, %2041, %2015, %1943, %1919, %1882, %1824, %1754
  %2069 = phi i32 [ -1094995529, %1754 ], [ -1094995529, %1824 ], [ -1094995529, %1882 ], [ -1094995529, %1919 ], [ -1094995529, %1943 ], [ -1094995529, %2015 ], [ -1094995529, %2041 ], [ -12, %1709 ], [ -12, %1950 ], [ -12, %1827 ], [ -12, %1836 ]
  %2070 = bitcast %struct.vorbis_context_s* %0 to i8**
  br label %2200

2071:                                             ; preds = %2046, %1734
  %2072 = load i32, i32* %3, align 8
  %2073 = load i32, i32* %5, align 8
  %2074 = load i8*, i8** %7, align 8
  %2075 = lshr i32 %2072, 3
  %2076 = zext i32 %2075 to i64
  %2077 = getelementptr inbounds i8, i8* %2074, i64 %2076
  %2078 = bitcast i8* %2077 to i32*
  %2079 = load i32, i32* %2078, align 1
  %2080 = and i32 %2072, 7
  %2081 = lshr i32 %2079, %2080
  %2082 = add i32 %2072, 6
  %2083 = icmp ugt i32 %2073, %2082
  %2084 = select i1 %2083, i32 %2082, i32 %2073
  store i32 %2084, i32* %3, align 8
  %2085 = trunc i32 %2081 to i8
  %2086 = and i8 %2085, 63
  %2087 = add nuw nsw i8 %2086, 1
  %2088 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 22
  store i8 %2087, i8* %2088, align 8
  %2089 = zext i8 %2087 to i64
  %2090 = shl nuw nsw i64 %2089, 3
  %2091 = tail call noalias i8* @av_mallocz(i64 %2090) #7
  %2092 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 23
  %2093 = bitcast %struct.vorbis_mode** %2092 to i8**
  store i8* %2091, i8** %2093, align 8
  %2094 = icmp eq i8* %2091, null
  br i1 %2094, label %2095, label %2097

2095:                                             ; preds = %2071
  %2096 = bitcast %struct.vorbis_context_s* %0 to i8**
  br label %2200

2097:                                             ; preds = %2071
  %2098 = load i8, i8* %2088, align 8
  %2099 = icmp eq i8 %2098, 0
  br i1 %2099, label %2182, label %2100

2100:                                             ; preds = %2097
  %2101 = bitcast i8* %2091 to %struct.vorbis_mode*
  br label %2108

2102:                                             ; preds = %2108
  %2103 = load i8, i8* %2088, align 8
  %2104 = zext i8 %2103 to i64
  %2105 = icmp ult i64 %2176, %2104
  br i1 %2105, label %2106, label %2182

2106:                                             ; preds = %2102
  %2107 = load %struct.vorbis_mode*, %struct.vorbis_mode** %2092, align 8
  br label %2108

2108:                                             ; preds = %2100, %2106
  %2109 = phi %struct.vorbis_mode* [ %2107, %2106 ], [ %2101, %2100 ]
  %2110 = phi i64 [ %2176, %2106 ], [ 0, %2100 ]
  %2111 = load i32, i32* %3, align 8
  %2112 = load i8*, i8** %7, align 8
  %2113 = lshr i32 %2111, 3
  %2114 = zext i32 %2113 to i64
  %2115 = getelementptr inbounds i8, i8* %2112, i64 %2114
  %2116 = load i8, i8* %2115, align 1
  %2117 = and i32 %2111, 7
  %2118 = zext i8 %2116 to i32
  %2119 = lshr i32 %2118, %2117
  %2120 = load i32, i32* %5, align 8
  %2121 = icmp slt i32 %2111, %2120
  %2122 = zext i1 %2121 to i32
  %2123 = add i32 %2111, %2122
  store i32 %2123, i32* %3, align 8
  %2124 = trunc i32 %2119 to i8
  %2125 = and i8 %2124, 1
  %2126 = getelementptr inbounds %struct.vorbis_mode, %struct.vorbis_mode* %2109, i64 %2110, i32 0
  store i8 %2125, i8* %2126, align 2
  %2127 = load i32, i32* %3, align 8
  %2128 = load i32, i32* %5, align 8
  %2129 = load i8*, i8** %7, align 8
  %2130 = lshr i32 %2127, 3
  %2131 = zext i32 %2130 to i64
  %2132 = getelementptr inbounds i8, i8* %2129, i64 %2131
  %2133 = bitcast i8* %2132 to i32*
  %2134 = load i32, i32* %2133, align 1
  %2135 = and i32 %2127, 7
  %2136 = lshr i32 %2134, %2135
  %2137 = add i32 %2127, 16
  %2138 = icmp ugt i32 %2128, %2137
  %2139 = select i1 %2138, i32 %2137, i32 %2128
  store i32 %2139, i32* %3, align 8
  %2140 = trunc i32 %2136 to i16
  %2141 = getelementptr inbounds %struct.vorbis_mode, %struct.vorbis_mode* %2109, i64 %2110, i32 1
  store i16 %2140, i16* %2141, align 2
  %2142 = load i32, i32* %3, align 8
  %2143 = load i32, i32* %5, align 8
  %2144 = load i8*, i8** %7, align 8
  %2145 = lshr i32 %2142, 3
  %2146 = zext i32 %2145 to i64
  %2147 = getelementptr inbounds i8, i8* %2144, i64 %2146
  %2148 = bitcast i8* %2147 to i32*
  %2149 = load i32, i32* %2148, align 1
  %2150 = and i32 %2142, 7
  %2151 = lshr i32 %2149, %2150
  %2152 = add i32 %2142, 16
  %2153 = icmp ugt i32 %2143, %2152
  %2154 = select i1 %2153, i32 %2152, i32 %2143
  store i32 %2154, i32* %3, align 8
  %2155 = trunc i32 %2151 to i16
  %2156 = getelementptr inbounds %struct.vorbis_mode, %struct.vorbis_mode* %2109, i64 %2110, i32 2
  store i16 %2155, i16* %2156, align 2
  %2157 = load i32, i32* %3, align 8
  %2158 = load i32, i32* %5, align 8
  %2159 = load i8*, i8** %7, align 8
  %2160 = lshr i32 %2157, 3
  %2161 = zext i32 %2160 to i64
  %2162 = getelementptr inbounds i8, i8* %2159, i64 %2161
  %2163 = bitcast i8* %2162 to i32*
  %2164 = load i32, i32* %2163, align 1
  %2165 = and i32 %2157, 7
  %2166 = lshr i32 %2164, %2165
  %2167 = and i32 %2166, 255
  %2168 = add i32 %2157, 8
  %2169 = icmp ugt i32 %2158, %2168
  %2170 = select i1 %2169, i32 %2168, i32 %2158
  store i32 %2170, i32* %3, align 8
  %2171 = trunc i32 %2166 to i8
  %2172 = getelementptr inbounds %struct.vorbis_mode, %struct.vorbis_mode* %2109, i64 %2110, i32 3
  store i8 %2171, i8* %2172, align 2
  %2173 = load i8, i8* %1726, align 8
  %2174 = zext i8 %2173 to i32
  %2175 = icmp ult i32 %2167, %2174
  %2176 = add nuw nsw i64 %2110, 1
  br i1 %2175, label %2102, label %2177

2177:                                             ; preds = %2108
  %2178 = zext i8 %2173 to i32
  %2179 = bitcast %struct.vorbis_context_s* %0 to i8**
  %2180 = load i8*, i8** %2179, align 8
  %2181 = add nsw i32 %2178, -1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %2180, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @idx_err_str, i64 0, i64 0), i32 %2167, i32 %2181, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.31, i64 0, i64 0), i32 903) #7
  br label %2200

2182:                                             ; preds = %2102, %2097
  %2183 = load i32, i32* %3, align 8
  %2184 = load i8*, i8** %7, align 8
  %2185 = lshr i32 %2183, 3
  %2186 = zext i32 %2185 to i64
  %2187 = getelementptr inbounds i8, i8* %2184, i64 %2186
  %2188 = load i8, i8* %2187, align 1
  %2189 = and i32 %2183, 7
  %2190 = zext i8 %2188 to i32
  %2191 = load i32, i32* %5, align 8
  %2192 = icmp slt i32 %2183, %2191
  %2193 = zext i1 %2192 to i32
  %2194 = add i32 %2183, %2193
  store i32 %2194, i32* %3, align 8
  %2195 = shl i32 1, %2189
  %2196 = and i32 %2195, %2190
  %2197 = icmp eq i32 %2196, 0
  br i1 %2197, label %2198, label %2205

2198:                                             ; preds = %2182
  %2199 = bitcast %struct.vorbis_context_s* %0 to i8**
  br label %2200

2200:                                             ; preds = %2177, %2095, %86, %736, %772, %1412, %1706, %2068, %2198
  %2201 = phi i8** [ %2199, %2198 ], [ %2070, %2068 ], [ %1708, %1706 ], [ %1414, %1412 ], [ %773, %772 ], [ %738, %736 ], [ %87, %86 ], [ %2096, %2095 ], [ %2179, %2177 ]
  %2202 = phi i8* [ getelementptr inbounds ([54 x i8], [54 x i8]* @.str.20, i64 0, i64 0), %2198 ], [ getelementptr inbounds ([50 x i8], [50 x i8]* @.str.18, i64 0, i64 0), %2068 ], [ getelementptr inbounds ([50 x i8], [50 x i8]* @.str.17, i64 0, i64 0), %1706 ], [ getelementptr inbounds ([48 x i8], [48 x i8]* @.str.16, i64 0, i64 0), %1412 ], [ getelementptr inbounds ([64 x i8], [64 x i8]* @.str.15, i64 0, i64 0), %772 ], [ getelementptr inbounds ([51 x i8], [51 x i8]* @.str.14, i64 0, i64 0), %736 ], [ getelementptr inbounds ([61 x i8], [61 x i8]* @.str.13, i64 0, i64 0), %86 ], [ getelementptr inbounds ([47 x i8], [47 x i8]* @.str.19, i64 0, i64 0), %2095 ], [ getelementptr inbounds ([47 x i8], [47 x i8]* @.str.19, i64 0, i64 0), %2177 ]
  %2203 = phi i32 [ -1094995529, %2198 ], [ %2069, %2068 ], [ %1707, %1706 ], [ %1413, %1412 ], [ -1094995529, %772 ], [ %737, %736 ], [ -1094995529, %86 ], [ -12, %2095 ], [ -1094995529, %2177 ]
  %2204 = load i8*, i8** %2201, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %2204, i32 16, i8* %2202) #7
  br label %2205

2205:                                             ; preds = %2200, %2182
  %2206 = phi i32 [ 0, %2182 ], [ %2203, %2200 ]
  ret i32 %2206

2207:                                             ; preds = %373
  %2208 = getelementptr inbounds i8, i8* %108, i64 %374
  store i8 %347, i8* %2208, align 1
  br label %2209

2209:                                             ; preds = %2207, %373
  %2210 = add nuw nsw i64 %369, 2
  %2211 = icmp ult i64 %2210, %316
  br i1 %2211, label %2212, label %2214

2212:                                             ; preds = %2209
  %2213 = getelementptr inbounds i8, i8* %108, i64 %2210
  store i8 %347, i8* %2213, align 1
  br label %2214

2214:                                             ; preds = %2212, %2209
  %2215 = add nuw nsw i64 %369, 3
  %2216 = icmp ult i64 %2215, %316
  br i1 %2216, label %2217, label %2219

2217:                                             ; preds = %2214
  %2218 = getelementptr inbounds i8, i8* %108, i64 %2215
  store i8 %347, i8* %2218, align 1
  br label %2219

2219:                                             ; preds = %2217, %2214
  %2220 = add nuw nsw i64 %369, 4
  %2221 = icmp eq i64 %2220, %349
  br i1 %2221, label %317, label %368

2222:                                             ; preds = %677
  store i8 %681, i8* %661, align 2
  br label %2223

2223:                                             ; preds = %2222, %677
  %2224 = phi i8 [ %678, %677 ], [ %681, %2222 ]
  %2225 = add nuw nsw i64 %671, 2
  %2226 = add i64 %672, -2
  %2227 = icmp eq i64 %2226, 0
  br i1 %2227, label %683, label %669
}

declare i8* @av_malloc_array(i64, i64) local_unnamed_addr #4

declare i8* @av_mallocz_array(i64, i64) local_unnamed_addr #4

declare i32 @ff_mdct_init(%struct.FFTContext*, i32, i32, double) local_unnamed_addr #4

declare %struct.AVFloatDSPContext* @avpriv_float_dsp_alloc(i32) local_unnamed_addr #4

declare void @av_freep(i8*) local_unnamed_addr #4

declare void @ff_mdct_end(%struct.FFTContext*) local_unnamed_addr #4

declare void @ff_free_vlc(%struct.VLC*) local_unnamed_addr #4

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #4

declare noalias i8* @av_malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

declare i32 @ff_vorbis_nth_root(i32, i32) local_unnamed_addr #4

declare i32 @ff_vorbis_len2vlc(i8*, i32*, i32) local_unnamed_addr #4

declare i32 @ff_init_vlc_sparse(%struct.VLC*, i32, i32, i8*, i32, i32, i8*, i32, i32, i8*, i32, i32, i32) local_unnamed_addr #4

declare void @av_free(i8*) local_unnamed_addr #4

; Function Attrs: nofree nounwind readnone
declare double @ldexp(double, i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal i32 @vorbis_floor1_decode(%struct.vorbis_context_s* nocapture, %union.vorbis_floor_u* nocapture readonly, float*) #3 {
  %4 = alloca [258 x i16], align 16
  %5 = alloca [258 x i16], align 16
  %6 = alloca [258 x i32], align 16
  %7 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 6
  %8 = load i8, i8* %7, align 2
  %9 = zext i8 %8 to i64
  %10 = add nsw i64 %9, -1
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* @__const.vorbis_floor1_decode.range_v, i64 0, i64 %10
  %12 = load i16, i16* %11, align 2
  %13 = zext i16 %12 to i32
  %14 = bitcast [258 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 516, i8* nonnull %14) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 516, i1 false)
  %15 = bitcast [258 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 516, i8* nonnull %15) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 516, i1 false)
  %16 = bitcast [258 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %16) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 1032, i1 false)
  %17 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = lshr i32 %18, 3
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %20, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = and i32 %18, 7
  %26 = zext i8 %24 to i32
  %27 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = icmp slt i32 %18, %28
  %30 = zext i1 %29 to i32
  %31 = add i32 %18, %30
  store i32 %31, i32* %17, align 8
  %32 = shl i32 1, %25
  %33 = and i32 %32, %26
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %394, label %35

35:                                               ; preds = %3
  %36 = shl nuw nsw i32 %13, 1
  %37 = add nsw i32 %36, -2
  %38 = or i32 %37, 1
  %39 = tail call i32 @llvm.ctlz.i32(i32 %38, i1 true), !range !4
  %40 = xor i32 %39, 31
  %41 = lshr i32 %31, 3
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %20, i64 %42
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = and i32 %31, 7
  %47 = lshr i32 %45, %46
  %48 = sub nuw nsw i32 32, %40
  %49 = lshr i32 -1, %48
  %50 = and i32 %47, %49
  %51 = add i32 %31, %40
  %52 = icmp ugt i32 %28, %51
  %53 = select i1 %52, i32 %51, i32 %28
  store i32 %53, i32* %17, align 8
  %54 = trunc i32 %50 to i16
  %55 = getelementptr inbounds [258 x i16], [258 x i16]* %4, i64 0, i64 0
  store i16 %54, i16* %55, align 16
  %56 = lshr i32 %53, 3
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %20, i64 %57
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 1
  %61 = and i32 %53, 7
  %62 = lshr i32 %60, %61
  %63 = and i32 %62, %49
  %64 = add i32 %53, %40
  %65 = icmp ugt i32 %28, %64
  %66 = select i1 %65, i32 %64, i32 %28
  store i32 %66, i32* %17, align 8
  %67 = trunc i32 %63 to i16
  %68 = getelementptr inbounds [258 x i16], [258 x i16]* %4, i64 0, i64 1
  store i16 %67, i16* %68, align 2
  %69 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 0
  %70 = load i8, i8* %69, align 8
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %284, label %72

72:                                               ; preds = %35
  %73 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 15
  br label %74

74:                                               ; preds = %72, %274
  %75 = phi i32 [ %66, %72 ], [ %275, %274 ]
  %76 = phi i64 [ 0, %72 ], [ %277, %274 ]
  %77 = phi i32 [ 2, %72 ], [ %276, %274 ]
  %78 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 1, i64 %76
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 2, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 3, i64 %80
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = shl nsw i32 -1, %86
  %88 = xor i32 %87, -1
  %89 = icmp eq i8 %85, 0
  br i1 %89, label %169, label %90

90:                                               ; preds = %74
  %91 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %73, align 8
  %92 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 4, i64 %80
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i64
  %95 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %91, i64 %94, i32 3, i32 1
  %96 = load [2 x i16]*, [2 x i16]** %95, align 8
  %97 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %91, i64 %94, i32 5
  %98 = load i32, i32* %97, align 8
  %99 = lshr i32 %75, 3
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %20, i64 %100
  %102 = bitcast i8* %101 to i32*
  %103 = load i32, i32* %102, align 1
  %104 = and i32 %75, 7
  %105 = lshr i32 %103, %104
  %106 = sub i32 32, %98
  %107 = lshr i32 -1, %106
  %108 = and i32 %105, %107
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds [2 x i16], [2 x i16]* %96, i64 %109, i64 0
  %111 = load i16, i16* %110, align 2
  %112 = sext i16 %111 to i32
  %113 = getelementptr inbounds [2 x i16], [2 x i16]* %96, i64 %109, i64 1
  %114 = load i16, i16* %113, align 2
  %115 = sext i16 %114 to i32
  %116 = icmp slt i16 %114, 0
  br i1 %116, label %117, label %162

117:                                              ; preds = %90
  %118 = add i32 %75, %98
  %119 = icmp ugt i32 %28, %118
  %120 = select i1 %119, i32 %118, i32 %28
  %121 = lshr i32 %120, 3
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %20, i64 %122
  %124 = bitcast i8* %123 to i32*
  %125 = load i32, i32* %124, align 1
  %126 = and i32 %120, 7
  %127 = lshr i32 %125, %126
  %128 = add nsw i32 %115, 32
  %129 = lshr i32 -1, %128
  %130 = and i32 %127, %129
  %131 = add i32 %130, %112
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds [2 x i16], [2 x i16]* %96, i64 %132, i64 0
  %134 = load i16, i16* %133, align 2
  %135 = sext i16 %134 to i32
  %136 = getelementptr inbounds [2 x i16], [2 x i16]* %96, i64 %132, i64 1
  %137 = load i16, i16* %136, align 2
  %138 = sext i16 %137 to i32
  %139 = icmp slt i16 %137, 0
  br i1 %139, label %140, label %162

140:                                              ; preds = %117
  %141 = sub i32 %120, %115
  %142 = icmp ugt i32 %28, %141
  %143 = select i1 %142, i32 %141, i32 %28
  %144 = lshr i32 %143, 3
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds i8, i8* %20, i64 %145
  %147 = bitcast i8* %146 to i32*
  %148 = load i32, i32* %147, align 1
  %149 = and i32 %143, 7
  %150 = lshr i32 %148, %149
  %151 = add nsw i32 %138, 32
  %152 = lshr i32 -1, %151
  %153 = and i32 %150, %152
  %154 = add i32 %153, %135
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds [2 x i16], [2 x i16]* %96, i64 %155, i64 0
  %157 = load i16, i16* %156, align 2
  %158 = sext i16 %157 to i32
  %159 = getelementptr inbounds [2 x i16], [2 x i16]* %96, i64 %155, i64 1
  %160 = load i16, i16* %159, align 2
  %161 = sext i16 %160 to i32
  br label %162

162:                                              ; preds = %90, %117, %140
  %163 = phi i32 [ %158, %140 ], [ %135, %117 ], [ %112, %90 ]
  %164 = phi i32 [ %143, %140 ], [ %120, %117 ], [ %75, %90 ]
  %165 = phi i32 [ %161, %140 ], [ %138, %117 ], [ %115, %90 ]
  %166 = add i32 %165, %164
  %167 = icmp ugt i32 %28, %166
  %168 = select i1 %167, i32 %166, i32 %28
  store i32 %168, i32* %17, align 8
  br label %169

169:                                              ; preds = %74, %162
  %170 = phi i32 [ %168, %162 ], [ %75, %74 ]
  %171 = phi i32 [ %163, %162 ], [ 0, %74 ]
  %172 = icmp eq i8 %82, 0
  br i1 %172, label %274, label %173

173:                                              ; preds = %169
  %174 = zext i8 %82 to i64
  br label %175

175:                                              ; preds = %265, %173
  %176 = phi i32 [ %170, %173 ], [ %267, %265 ]
  %177 = phi i64 [ 0, %173 ], [ %272, %265 ]
  %178 = phi i32 [ %171, %173 ], [ %183, %265 ]
  %179 = and i32 %178, %88
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 5, i64 %80, i64 %180
  %182 = load i16, i16* %181, align 2
  %183 = lshr i32 %178, %86
  %184 = icmp sgt i16 %182, -1
  br i1 %184, label %185, label %265

185:                                              ; preds = %175
  %186 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %73, align 8
  %187 = sext i16 %182 to i64
  %188 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %186, i64 %187, i32 3, i32 1
  %189 = load [2 x i16]*, [2 x i16]** %188, align 8
  %190 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %186, i64 %187, i32 5
  %191 = load i32, i32* %190, align 8
  %192 = lshr i32 %176, 3
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds i8, i8* %20, i64 %193
  %195 = bitcast i8* %194 to i32*
  %196 = load i32, i32* %195, align 1
  %197 = and i32 %176, 7
  %198 = lshr i32 %196, %197
  %199 = sub i32 32, %191
  %200 = lshr i32 -1, %199
  %201 = and i32 %198, %200
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds [2 x i16], [2 x i16]* %189, i64 %202, i64 0
  %204 = load i16, i16* %203, align 2
  %205 = sext i16 %204 to i32
  %206 = getelementptr inbounds [2 x i16], [2 x i16]* %189, i64 %202, i64 1
  %207 = load i16, i16* %206, align 2
  %208 = sext i16 %207 to i32
  %209 = icmp slt i16 %207, 0
  br i1 %209, label %210, label %255

210:                                              ; preds = %185
  %211 = add i32 %176, %191
  %212 = icmp ugt i32 %28, %211
  %213 = select i1 %212, i32 %211, i32 %28
  %214 = lshr i32 %213, 3
  %215 = zext i32 %214 to i64
  %216 = getelementptr inbounds i8, i8* %20, i64 %215
  %217 = bitcast i8* %216 to i32*
  %218 = load i32, i32* %217, align 1
  %219 = and i32 %213, 7
  %220 = lshr i32 %218, %219
  %221 = add nsw i32 %208, 32
  %222 = lshr i32 -1, %221
  %223 = and i32 %220, %222
  %224 = add i32 %223, %205
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds [2 x i16], [2 x i16]* %189, i64 %225, i64 0
  %227 = load i16, i16* %226, align 2
  %228 = sext i16 %227 to i32
  %229 = getelementptr inbounds [2 x i16], [2 x i16]* %189, i64 %225, i64 1
  %230 = load i16, i16* %229, align 2
  %231 = sext i16 %230 to i32
  %232 = icmp slt i16 %230, 0
  br i1 %232, label %233, label %255

233:                                              ; preds = %210
  %234 = sub i32 %213, %208
  %235 = icmp ugt i32 %28, %234
  %236 = select i1 %235, i32 %234, i32 %28
  %237 = lshr i32 %236, 3
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds i8, i8* %20, i64 %238
  %240 = bitcast i8* %239 to i32*
  %241 = load i32, i32* %240, align 1
  %242 = and i32 %236, 7
  %243 = lshr i32 %241, %242
  %244 = add nsw i32 %231, 32
  %245 = lshr i32 -1, %244
  %246 = and i32 %243, %245
  %247 = add i32 %246, %228
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds [2 x i16], [2 x i16]* %189, i64 %248, i64 0
  %250 = load i16, i16* %249, align 2
  %251 = sext i16 %250 to i32
  %252 = getelementptr inbounds [2 x i16], [2 x i16]* %189, i64 %248, i64 1
  %253 = load i16, i16* %252, align 2
  %254 = sext i16 %253 to i32
  br label %255

255:                                              ; preds = %185, %210, %233
  %256 = phi i32 [ %251, %233 ], [ %228, %210 ], [ %205, %185 ]
  %257 = phi i32 [ %236, %233 ], [ %213, %210 ], [ %176, %185 ]
  %258 = phi i32 [ %254, %233 ], [ %231, %210 ], [ %208, %185 ]
  %259 = add i32 %258, %257
  %260 = icmp ugt i32 %28, %259
  %261 = select i1 %260, i32 %259, i32 %28
  store i32 %261, i32* %17, align 8
  %262 = icmp slt i32 %256, 0
  br i1 %262, label %394, label %263

263:                                              ; preds = %255
  %264 = trunc i32 %256 to i16
  br label %265

265:                                              ; preds = %175, %263
  %266 = phi i16 [ %264, %263 ], [ 0, %175 ]
  %267 = phi i32 [ %261, %263 ], [ %176, %175 ]
  %268 = trunc i64 %177 to i32
  %269 = add i32 %77, %268
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds [258 x i16], [258 x i16]* %4, i64 0, i64 %270
  store i16 %266, i16* %271, align 2
  %272 = add nuw nsw i64 %177, 1
  %273 = icmp eq i64 %272, %174
  br i1 %273, label %274, label %175

274:                                              ; preds = %265, %169
  %275 = phi i32 [ %170, %169 ], [ %267, %265 ]
  %276 = add i32 %77, %83
  %277 = add nuw nsw i64 %76, 1
  %278 = load i8, i8* %69, align 8
  %279 = zext i8 %278 to i64
  %280 = icmp ult i64 %277, %279
  br i1 %280, label %74, label %281

281:                                              ; preds = %274
  %282 = load i16, i16* %55, align 16
  %283 = load i16, i16* %68, align 2
  br label %284

284:                                              ; preds = %281, %35
  %285 = phi i16 [ %283, %281 ], [ %67, %35 ]
  %286 = phi i16 [ %282, %281 ], [ %54, %35 ]
  %287 = getelementptr inbounds [258 x i32], [258 x i32]* %6, i64 0, i64 0
  store i32 1, i32* %287, align 16
  %288 = getelementptr inbounds [258 x i32], [258 x i32]* %6, i64 0, i64 1
  store i32 1, i32* %288, align 4
  %289 = getelementptr inbounds [258 x i16], [258 x i16]* %5, i64 0, i64 0
  store i16 %286, i16* %289, align 16
  %290 = getelementptr inbounds [258 x i16], [258 x i16]* %5, i64 0, i64 1
  store i16 %285, i16* %290, align 2
  %291 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 7
  %292 = load i16, i16* %291, align 4
  %293 = icmp ugt i16 %292, 2
  %294 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 8
  %295 = load %struct.vorbis_floor1_entry*, %struct.vorbis_floor1_entry** %294, align 8
  br i1 %293, label %296, label %387

296:                                              ; preds = %284
  %297 = zext i16 %292 to i64
  br label %298

298:                                              ; preds = %296, %382
  %299 = phi i64 [ 2, %296 ], [ %385, %382 ]
  %300 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %295, i64 %299, i32 2
  %301 = load i16, i16* %300, align 2
  %302 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %295, i64 %299, i32 3
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i64
  %305 = getelementptr inbounds [258 x i16], [258 x i16]* %5, i64 0, i64 %304
  %306 = load i16, i16* %305, align 2
  %307 = zext i16 %306 to i32
  %308 = zext i16 %301 to i64
  %309 = getelementptr inbounds [258 x i16], [258 x i16]* %5, i64 0, i64 %308
  %310 = load i16, i16* %309, align 2
  %311 = zext i16 %310 to i32
  %312 = sub nsw i32 %307, %311
  %313 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %295, i64 %304, i32 0
  %314 = load i16, i16* %313, align 2
  %315 = zext i16 %314 to i32
  %316 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %295, i64 %308, i32 0
  %317 = load i16, i16* %316, align 2
  %318 = zext i16 %317 to i32
  %319 = sub nsw i32 %315, %318
  %320 = icmp slt i32 %312, 0
  %321 = sub nsw i32 0, %312
  %322 = select i1 %320, i32 %321, i32 %312
  %323 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %295, i64 %299, i32 0
  %324 = load i16, i16* %323, align 2
  %325 = zext i16 %324 to i32
  %326 = sub nsw i32 %325, %318
  %327 = mul nsw i32 %326, %322
  %328 = sdiv i32 %327, %319
  %329 = sub i32 0, %328
  %330 = select i1 %320, i32 %329, i32 %328
  %331 = add i32 %330, %311
  %332 = getelementptr inbounds [258 x i16], [258 x i16]* %4, i64 0, i64 %299
  %333 = load i16, i16* %332, align 2
  %334 = zext i16 %333 to i32
  %335 = sub i32 %13, %331
  %336 = icmp eq i16 %333, 0
  br i1 %336, label %375, label %337

337:                                              ; preds = %298
  %338 = icmp ult i32 %335, %331
  %339 = select i1 %338, i32 %335, i32 %331
  %340 = shl i32 %339, 1
  %341 = getelementptr inbounds [258 x i32], [258 x i32]* %6, i64 0, i64 %308
  store i32 1, i32* %341, align 4
  %342 = getelementptr inbounds [258 x i32], [258 x i32]* %6, i64 0, i64 %304
  store i32 1, i32* %342, align 4
  %343 = getelementptr inbounds [258 x i32], [258 x i32]* %6, i64 0, i64 %299
  store i32 1, i32* %343, align 4
  %344 = icmp ugt i32 %340, %334
  br i1 %344, label %355, label %345

345:                                              ; preds = %337
  %346 = icmp ugt i32 %335, %331
  br i1 %346, label %382, label %347

347:                                              ; preds = %345
  %348 = xor i32 %334, -1
  %349 = add nsw i32 %13, %348
  %350 = icmp ugt i32 %349, 65535
  %351 = ashr i32 %349, 31
  %352 = xor i32 %351, 65535
  %353 = select i1 %350, i32 %352, i32 %349
  %354 = trunc i32 %353 to i16
  br label %382

355:                                              ; preds = %337
  %356 = and i32 %334, 1
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %367, label %358

358:                                              ; preds = %355
  %359 = add nuw nsw i32 %334, 1
  %360 = lshr i32 %359, 1
  %361 = sub i32 %331, %360
  %362 = icmp ugt i32 %361, 65535
  %363 = ashr i32 %361, 31
  %364 = xor i32 %363, 65535
  %365 = select i1 %362, i32 %364, i32 %361
  %366 = trunc i32 %365 to i16
  br label %382

367:                                              ; preds = %355
  %368 = lshr i32 %334, 1
  %369 = add i32 %368, %331
  %370 = icmp ugt i32 %369, 65535
  %371 = ashr i32 %369, 31
  %372 = xor i32 %371, 65535
  %373 = select i1 %370, i32 %372, i32 %369
  %374 = trunc i32 %373 to i16
  br label %382

375:                                              ; preds = %298
  %376 = getelementptr inbounds [258 x i32], [258 x i32]* %6, i64 0, i64 %299
  store i32 0, i32* %376, align 4
  %377 = icmp ugt i32 %331, 65535
  %378 = ashr i32 %331, 31
  %379 = xor i32 %378, 65535
  %380 = select i1 %377, i32 %379, i32 %331
  %381 = trunc i32 %380 to i16
  br label %382

382:                                              ; preds = %345, %375, %358, %367, %347
  %383 = phi i16 [ %381, %375 ], [ %366, %358 ], [ %374, %367 ], [ %354, %347 ], [ %333, %345 ]
  %384 = getelementptr inbounds [258 x i16], [258 x i16]* %5, i64 0, i64 %299
  store i16 %383, i16* %384, align 2
  %385 = add nuw nsw i64 %299, 1
  %386 = icmp ult i64 %385, %297
  br i1 %386, label %298, label %387

387:                                              ; preds = %382, %284
  %388 = zext i16 %292 to i32
  %389 = load i8, i8* %7, align 2
  %390 = zext i8 %389 to i32
  %391 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %295, i64 1, i32 0
  %392 = load i16, i16* %391, align 2
  %393 = zext i16 %392 to i32
  call void @ff_vorbis_floor1_render_list(%struct.vorbis_floor1_entry* %295, i32 %388, i16* nonnull %289, i32* nonnull %287, i32 %390, float* %2, i32 %393) #7
  br label %394

394:                                              ; preds = %255, %3, %387
  %395 = phi i32 [ 0, %387 ], [ 1, %3 ], [ -1094995529, %255 ]
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 516, i8* nonnull %15) #7
  call void @llvm.lifetime.end.p0i8(i64 516, i8* nonnull %14) #7
  ret i32 %395
}

declare i32 @ff_vorbis_ready_floor1_list(%struct.AVCodecContext*, %struct.vorbis_floor1_entry*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @vorbis_floor0_decode(%struct.vorbis_context_s* nocapture, %union.vorbis_floor_u* nocapture readonly, float* nocapture) #3 {
  %4 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 2, i64 15
  %5 = bitcast i8* %4 to float**
  %6 = load float*, float** %5, align 8
  %7 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 23
  %8 = load %struct.vorbis_mode*, %struct.vorbis_mode** %7, align 8
  %9 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 24
  %10 = load i8, i8* %9, align 8
  %11 = zext i8 %10 to i64
  %12 = getelementptr inbounds %struct.vorbis_mode, %struct.vorbis_mode* %8, i64 %11, i32 0
  %13 = load i8, i8* %12, align 2
  %14 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 1, i64 31
  %15 = load i8, i8* %14, align 8
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %522, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1
  %19 = zext i8 %15 to i32
  %20 = icmp ult i8 %15, 33
  br i1 %20, label %21, label %68

21:                                               ; preds = %17
  %22 = icmp ult i8 %15, 26
  %23 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %18, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = lshr i32 %24, 3
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %28, i64 %30
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = and i32 %24, 7
  %35 = lshr i32 %33, %34
  br i1 %22, label %36, label %43

36:                                               ; preds = %21
  %37 = sub nuw nsw i32 32, %19
  %38 = lshr i32 -1, %37
  %39 = and i32 %35, %38
  %40 = add i32 %24, %19
  %41 = icmp ugt i32 %26, %40
  %42 = select i1 %41, i32 %40, i32 %26
  store i32 %42, i32* %23, align 8
  br label %64

43:                                               ; preds = %21
  %44 = and i32 %35, 65535
  %45 = add i32 %24, 16
  %46 = icmp ugt i32 %26, %45
  %47 = select i1 %46, i32 %45, i32 %26
  store i32 %47, i32* %23, align 8
  %48 = add nsw i32 %19, -16
  %49 = lshr i32 %47, 3
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %28, i64 %50
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 1
  %54 = and i32 %47, 7
  %55 = lshr i32 %53, %54
  %56 = sub nuw nsw i32 48, %19
  %57 = lshr i32 -1, %56
  %58 = and i32 %55, %57
  %59 = add i32 %48, %47
  %60 = icmp ugt i32 %26, %59
  %61 = select i1 %60, i32 %59, i32 %26
  store i32 %61, i32* %23, align 8
  %62 = shl i32 %58, 16
  %63 = or i32 %62, %44
  br label %64

64:                                               ; preds = %43, %36
  %65 = phi i32 [ %42, %36 ], [ %61, %43 ]
  %66 = phi i32 [ %39, %36 ], [ %63, %43 ]
  %67 = zext i32 %66 to i64
  br label %142

68:                                               ; preds = %17
  %69 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 2
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 4
  %72 = load i32, i32* %71, align 8
  %73 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %18, i64 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = lshr i32 %70, 3
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %74, i64 %76
  %78 = bitcast i8* %77 to i32*
  %79 = load i32, i32* %78, align 1
  %80 = and i32 %70, 7
  %81 = lshr i32 %79, %80
  %82 = and i32 %81, 65535
  %83 = add i32 %70, 16
  %84 = icmp ugt i32 %72, %83
  %85 = select i1 %84, i32 %83, i32 %72
  store i32 %85, i32* %69, align 8
  %86 = lshr i32 %85, 3
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %74, i64 %87
  %89 = bitcast i8* %88 to i32*
  %90 = load i32, i32* %89, align 1
  %91 = and i32 %85, 7
  %92 = lshr i32 %90, %91
  %93 = add i32 %85, 16
  %94 = icmp ugt i32 %72, %93
  %95 = select i1 %94, i32 %93, i32 %72
  store i32 %95, i32* %69, align 8
  %96 = shl i32 %92, 16
  %97 = or i32 %96, %82
  %98 = zext i32 %97 to i64
  %99 = add nsw i32 %19, -32
  %100 = icmp slt i32 %99, 26
  %101 = lshr i32 %95, 3
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %74, i64 %102
  %104 = bitcast i8* %103 to i32*
  %105 = load i32, i32* %104, align 1
  %106 = and i32 %95, 7
  %107 = lshr i32 %105, %106
  br i1 %100, label %108, label %115

108:                                              ; preds = %68
  %109 = sub nuw nsw i32 64, %19
  %110 = lshr i32 -1, %109
  %111 = and i32 %107, %110
  %112 = add i32 %95, %99
  %113 = icmp ugt i32 %72, %112
  %114 = select i1 %113, i32 %112, i32 %72
  store i32 %114, i32* %69, align 8
  br label %136

115:                                              ; preds = %68
  %116 = and i32 %107, 65535
  %117 = add i32 %95, 16
  %118 = icmp ugt i32 %72, %117
  %119 = select i1 %118, i32 %117, i32 %72
  store i32 %119, i32* %69, align 8
  %120 = add nsw i32 %19, -48
  %121 = lshr i32 %119, 3
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %74, i64 %122
  %124 = bitcast i8* %123 to i32*
  %125 = load i32, i32* %124, align 1
  %126 = and i32 %119, 7
  %127 = lshr i32 %125, %126
  %128 = sub nsw i32 80, %19
  %129 = lshr i32 -1, %128
  %130 = and i32 %127, %129
  %131 = add i32 %120, %119
  %132 = icmp ugt i32 %72, %131
  %133 = select i1 %132, i32 %131, i32 %72
  store i32 %133, i32* %69, align 8
  %134 = shl i32 %130, 16
  %135 = or i32 %134, %116
  br label %136

136:                                              ; preds = %115, %108
  %137 = phi i32 [ %114, %108 ], [ %133, %115 ]
  %138 = phi i32 [ %111, %108 ], [ %135, %115 ]
  %139 = zext i32 %138 to i64
  %140 = shl nuw i64 %139, 32
  %141 = or i64 %140, %98
  br label %142

142:                                              ; preds = %64, %136
  %143 = phi i8* [ %28, %64 ], [ %74, %136 ]
  %144 = phi i32 [ %26, %64 ], [ %72, %136 ]
  %145 = phi i32 [ %65, %64 ], [ %137, %136 ]
  %146 = phi i64 [ %67, %64 ], [ %141, %136 ]
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %522, label %148

148:                                              ; preds = %142
  %149 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 2, i64 1
  %150 = load i8, i8* %149, align 2
  %151 = zext i8 %150 to i32
  %152 = shl nuw nsw i32 %151, 1
  %153 = or i32 %152, 1
  %154 = tail call i32 @llvm.ctlz.i32(i32 %153, i1 true), !range !7
  %155 = xor i32 %154, 31
  %156 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 2
  %157 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 1, i32 4
  %158 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %18, i64 0, i32 0
  %159 = lshr i32 %145, 3
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds i8, i8* %143, i64 %160
  %162 = bitcast i8* %161 to i32*
  %163 = load i32, i32* %162, align 1
  %164 = and i32 %145, 7
  %165 = lshr i32 %163, %164
  %166 = sub nuw nsw i32 32, %155
  %167 = lshr i32 -1, %166
  %168 = and i32 %167, %165
  %169 = add i32 %155, %145
  %170 = icmp ugt i32 %144, %169
  %171 = select i1 %170, i32 %169, i32 %144
  store i32 %171, i32* %156, align 8
  %172 = load i8, i8* %149, align 2
  %173 = zext i8 %172 to i32
  %174 = icmp ult i32 %168, %173
  br i1 %174, label %178, label %175

175:                                              ; preds = %148
  %176 = bitcast %struct.vorbis_context_s* %0 to i8**
  %177 = load i8*, i8** %176, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %177, i32 16, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.40, i64 0, i64 0)) #7
  br label %178

178:                                              ; preds = %148, %175
  %179 = phi i32 [ 0, %175 ], [ %168, %148 ]
  %180 = getelementptr inbounds %struct.vorbis_context_s, %struct.vorbis_context_s* %0, i64 0, i32 15
  %181 = load %struct.vorbis_codebook*, %struct.vorbis_codebook** %180, align 8
  %182 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 2, i64 7
  %183 = bitcast i8* %182 to i8**
  %184 = load i8*, i8** %183, align 8
  %185 = zext i32 %179 to i64
  %186 = getelementptr inbounds i8, i8* %184, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i64
  %189 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %181, i64 %188, i32 0
  %190 = load i8, i8* %189, align 8
  %191 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %181, i64 %188, i32 2
  %192 = load i8, i8* %191, align 2
  %193 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %181, i64 %188, i32 3, i32 1
  %194 = load [2 x i16]*, [2 x i16]** %193, align 8
  %195 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %181, i64 %188, i32 4
  %196 = load float*, float** %195, align 8
  %197 = getelementptr inbounds %struct.vorbis_codebook, %struct.vorbis_codebook* %181, i64 %188, i32 5
  %198 = load i32, i32* %197, align 8
  %199 = icmp eq float* %196, null
  br i1 %199, label %522, label %200

200:                                              ; preds = %178
  %201 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 0
  %202 = load i8, i8* %201, align 8
  %203 = icmp eq i8 %202, 0
  br i1 %203, label %216, label %204

204:                                              ; preds = %200
  %205 = sub i32 32, %198
  %206 = lshr i32 -1, %205
  %207 = icmp ugt i8 %192, 1
  %208 = icmp ugt i8 %192, 2
  %209 = zext i8 %190 to i32
  %210 = icmp eq i8 %190, 0
  %211 = zext i8 %190 to i64
  %212 = and i64 %211, 1
  %213 = icmp eq i8 %190, 1
  %214 = sub nsw i64 %211, %212
  %215 = icmp eq i64 %212, 0
  br label %226

216:                                              ; preds = %346, %200
  %217 = phi i8 [ 0, %200 ], [ %353, %346 ]
  %218 = zext i8 %217 to i32
  %219 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 1, i64 3
  %220 = bitcast i8* %219 to i16*
  %221 = load i16, i16* %220, align 4
  %222 = uitofp i16 %221 to double
  %223 = fdiv nsz double 0x400921FB54442D18, %222
  %224 = fptrunc double %223 to float
  %225 = icmp eq i8 %217, 0
  br i1 %225, label %372, label %356

226:                                              ; preds = %204, %346
  %227 = phi i32 [ 0, %204 ], [ %352, %346 ]
  %228 = phi float [ 0.000000e+00, %204 ], [ %351, %346 ]
  %229 = load i32, i32* %156, align 8
  %230 = load i32, i32* %157, align 8
  %231 = load i8*, i8** %158, align 8
  %232 = lshr i32 %229, 3
  %233 = zext i32 %232 to i64
  %234 = getelementptr inbounds i8, i8* %231, i64 %233
  %235 = bitcast i8* %234 to i32*
  %236 = load i32, i32* %235, align 1
  %237 = and i32 %229, 7
  %238 = lshr i32 %236, %237
  %239 = and i32 %238, %206
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds [2 x i16], [2 x i16]* %194, i64 %240, i64 0
  %242 = load i16, i16* %241, align 2
  %243 = sext i16 %242 to i32
  %244 = getelementptr inbounds [2 x i16], [2 x i16]* %194, i64 %240, i64 1
  %245 = load i16, i16* %244, align 2
  %246 = sext i16 %245 to i32
  %247 = icmp slt i16 %245, 0
  %248 = and i1 %207, %247
  br i1 %248, label %249, label %295

249:                                              ; preds = %226
  %250 = add i32 %229, %198
  %251 = icmp ugt i32 %230, %250
  %252 = select i1 %251, i32 %250, i32 %230
  %253 = lshr i32 %252, 3
  %254 = zext i32 %253 to i64
  %255 = getelementptr inbounds i8, i8* %231, i64 %254
  %256 = bitcast i8* %255 to i32*
  %257 = load i32, i32* %256, align 1
  %258 = and i32 %252, 7
  %259 = lshr i32 %257, %258
  %260 = add nsw i32 %246, 32
  %261 = lshr i32 -1, %260
  %262 = and i32 %259, %261
  %263 = add i32 %262, %243
  %264 = zext i32 %263 to i64
  %265 = getelementptr inbounds [2 x i16], [2 x i16]* %194, i64 %264, i64 0
  %266 = load i16, i16* %265, align 2
  %267 = sext i16 %266 to i32
  %268 = getelementptr inbounds [2 x i16], [2 x i16]* %194, i64 %264, i64 1
  %269 = load i16, i16* %268, align 2
  %270 = sext i16 %269 to i32
  %271 = icmp slt i16 %269, 0
  %272 = and i1 %208, %271
  br i1 %272, label %273, label %295

273:                                              ; preds = %249
  %274 = sub i32 %252, %246
  %275 = icmp ugt i32 %230, %274
  %276 = select i1 %275, i32 %274, i32 %230
  %277 = lshr i32 %276, 3
  %278 = zext i32 %277 to i64
  %279 = getelementptr inbounds i8, i8* %231, i64 %278
  %280 = bitcast i8* %279 to i32*
  %281 = load i32, i32* %280, align 1
  %282 = and i32 %276, 7
  %283 = lshr i32 %281, %282
  %284 = add nsw i32 %270, 32
  %285 = lshr i32 -1, %284
  %286 = and i32 %283, %285
  %287 = add i32 %286, %267
  %288 = zext i32 %287 to i64
  %289 = getelementptr inbounds [2 x i16], [2 x i16]* %194, i64 %288, i64 0
  %290 = load i16, i16* %289, align 2
  %291 = sext i16 %290 to i32
  %292 = getelementptr inbounds [2 x i16], [2 x i16]* %194, i64 %288, i64 1
  %293 = load i16, i16* %292, align 2
  %294 = sext i16 %293 to i32
  br label %295

295:                                              ; preds = %226, %249, %273
  %296 = phi i32 [ %291, %273 ], [ %267, %249 ], [ %243, %226 ]
  %297 = phi i32 [ %276, %273 ], [ %252, %249 ], [ %229, %226 ]
  %298 = phi i32 [ %294, %273 ], [ %270, %249 ], [ %246, %226 ]
  %299 = add i32 %298, %297
  %300 = icmp ugt i32 %230, %299
  %301 = select i1 %300, i32 %299, i32 %230
  store i32 %301, i32* %156, align 8
  %302 = icmp slt i32 %296, 0
  br i1 %302, label %522, label %303

303:                                              ; preds = %295
  br i1 %210, label %346, label %304

304:                                              ; preds = %303
  %305 = mul nsw i32 %296, %209
  br i1 %213, label %333, label %306

306:                                              ; preds = %304, %306
  %307 = phi i64 [ %330, %306 ], [ 0, %304 ]
  %308 = phi i64 [ %331, %306 ], [ %214, %304 ]
  %309 = trunc i64 %307 to i32
  %310 = add i32 %305, %309
  %311 = zext i32 %310 to i64
  %312 = getelementptr inbounds float, float* %196, i64 %311
  %313 = load float, float* %312, align 4
  %314 = fadd nsz float %228, %313
  %315 = trunc i64 %307 to i32
  %316 = add i32 %227, %315
  %317 = zext i32 %316 to i64
  %318 = getelementptr inbounds float, float* %6, i64 %317
  store float %314, float* %318, align 4
  %319 = or i64 %307, 1
  %320 = trunc i64 %319 to i32
  %321 = add i32 %305, %320
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds float, float* %196, i64 %322
  %324 = load float, float* %323, align 4
  %325 = fadd nsz float %228, %324
  %326 = trunc i64 %319 to i32
  %327 = add i32 %227, %326
  %328 = zext i32 %327 to i64
  %329 = getelementptr inbounds float, float* %6, i64 %328
  store float %325, float* %329, align 4
  %330 = add nuw nsw i64 %307, 2
  %331 = add i64 %308, -2
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %333, label %306

333:                                              ; preds = %306, %304
  %334 = phi i64 [ 0, %304 ], [ %330, %306 ]
  br i1 %215, label %346, label %335

335:                                              ; preds = %333
  %336 = trunc i64 %334 to i32
  %337 = add i32 %305, %336
  %338 = zext i32 %337 to i64
  %339 = getelementptr inbounds float, float* %196, i64 %338
  %340 = load float, float* %339, align 4
  %341 = fadd nsz float %228, %340
  %342 = trunc i64 %334 to i32
  %343 = add i32 %227, %342
  %344 = zext i32 %343 to i64
  %345 = getelementptr inbounds float, float* %6, i64 %344
  store float %341, float* %345, align 4
  br label %346

346:                                              ; preds = %335, %333, %303
  %347 = add i32 %227, %209
  %348 = add i32 %347, -1
  %349 = zext i32 %348 to i64
  %350 = getelementptr inbounds float, float* %6, i64 %349
  %351 = load float, float* %350, align 4
  %352 = add i32 %227, %209
  %353 = load i8, i8* %201, align 8
  %354 = zext i8 %353 to i32
  %355 = icmp ult i32 %352, %354
  br i1 %355, label %226, label %216

356:                                              ; preds = %216
  %357 = zext i8 %217 to i64
  %358 = and i64 %357, 1
  %359 = icmp eq i8 %217, 1
  br i1 %359, label %362, label %360

360:                                              ; preds = %356
  %361 = sub nsw i64 %357, %358
  br label %395

362:                                              ; preds = %395, %356
  %363 = phi i64 [ 0, %356 ], [ %411, %395 ]
  %364 = icmp eq i64 %358, 0
  br i1 %364, label %372, label %365

365:                                              ; preds = %362
  %366 = getelementptr inbounds float, float* %6, i64 %363
  %367 = load float, float* %366, align 4
  %368 = fpext float %367 to double
  %369 = tail call nsz double @llvm.cos.f64(double %368)
  %370 = fmul nsz double %369, 2.000000e+00
  %371 = fptrunc double %370 to float
  store float %371, float* %366, align 4
  br label %372

372:                                              ; preds = %365, %362, %216
  %373 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 1, i64 23
  %374 = bitcast i8* %373 to [2 x i32]*
  %375 = zext i8 %13 to i64
  %376 = getelementptr inbounds [2 x i32], [2 x i32]* %374, i64 0, i64 %375
  %377 = load i32, i32* %376, align 4
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %522, label %379

379:                                              ; preds = %372
  %380 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 1, i64 7
  %381 = bitcast i8* %380 to [2 x i32*]*
  %382 = getelementptr inbounds [2 x i32*], [2 x i32*]* %381, i64 0, i64 %375
  %383 = icmp ugt i8 %217, 1
  %384 = getelementptr inbounds %union.vorbis_floor_u, %union.vorbis_floor_u* %1, i64 0, i32 0, i32 2, i64 0
  %385 = zext i8 %217 to i64
  %386 = and i32 %218, 254
  %387 = load i32*, i32** %382, align 8
  %388 = add nsw i64 %385, -2
  %389 = lshr i64 %388, 1
  %390 = add nuw i64 %389, 1
  %391 = and i64 %390, 1
  %392 = icmp eq i64 %389, 0
  %393 = sub nuw i64 %390, %391
  %394 = icmp eq i64 %391, 0
  br label %418

395:                                              ; preds = %395, %360
  %396 = phi i64 [ 0, %360 ], [ %411, %395 ]
  %397 = phi i64 [ %361, %360 ], [ %412, %395 ]
  %398 = getelementptr inbounds float, float* %6, i64 %396
  %399 = load float, float* %398, align 4
  %400 = fpext float %399 to double
  %401 = tail call nsz double @llvm.cos.f64(double %400)
  %402 = fmul nsz double %401, 2.000000e+00
  %403 = fptrunc double %402 to float
  store float %403, float* %398, align 4
  %404 = or i64 %396, 1
  %405 = getelementptr inbounds float, float* %6, i64 %404
  %406 = load float, float* %405, align 4
  %407 = fpext float %406 to double
  %408 = tail call nsz double @llvm.cos.f64(double %407)
  %409 = fmul nsz double %408, 2.000000e+00
  %410 = fptrunc double %409 to float
  store float %410, float* %405, align 4
  %411 = add nuw nsw i64 %396, 2
  %412 = add i64 %397, -2
  %413 = icmp eq i64 %412, 0
  br i1 %413, label %362, label %395

414:                                              ; preds = %514
  %415 = trunc i64 %517 to i32
  %416 = load i32, i32* %376, align 4
  %417 = icmp ugt i32 %416, %415
  br i1 %417, label %418, label %522

418:                                              ; preds = %379, %414
  %419 = phi i32* [ %387, %379 ], [ %518, %414 ]
  %420 = phi i64 [ 0, %379 ], [ %517, %414 ]
  %421 = shl i64 %420, 32
  %422 = ashr exact i64 %421, 32
  %423 = getelementptr inbounds i32, i32* %419, i64 %422
  %424 = load i32, i32* %423, align 4
  %425 = sitofp i32 %424 to float
  %426 = fmul nsz float %224, %425
  %427 = fpext float %426 to double
  %428 = tail call nsz double @llvm.cos.f64(double %427)
  %429 = fmul nsz double %428, 2.000000e+00
  %430 = fptrunc double %429 to float
  br i1 %383, label %431, label %467

431:                                              ; preds = %418
  br i1 %392, label %455, label %432

432:                                              ; preds = %431
  %433 = insertelement <2 x float> undef, float %430, i32 0
  %434 = shufflevector <2 x float> %433, <2 x float> undef, <2 x i32> zeroinitializer
  %435 = insertelement <2 x float> undef, float %430, i32 0
  %436 = shufflevector <2 x float> %435, <2 x float> undef, <2 x i32> zeroinitializer
  br label %437

437:                                              ; preds = %437, %432
  %438 = phi i64 [ 0, %432 ], [ %452, %437 ]
  %439 = phi <2 x float> [ <float 5.000000e-01, float 5.000000e-01>, %432 ], [ %451, %437 ]
  %440 = phi i64 [ %393, %432 ], [ %453, %437 ]
  %441 = getelementptr inbounds float, float* %6, i64 %438
  %442 = bitcast float* %441 to <2 x float>*
  %443 = load <2 x float>, <2 x float>* %442, align 4
  %444 = fsub nsz <2 x float> %443, %434
  %445 = fmul nsz <2 x float> %439, %444
  %446 = or i64 %438, 2
  %447 = getelementptr inbounds float, float* %6, i64 %446
  %448 = bitcast float* %447 to <2 x float>*
  %449 = load <2 x float>, <2 x float>* %448, align 4
  %450 = fsub nsz <2 x float> %449, %436
  %451 = fmul nsz <2 x float> %445, %450
  %452 = add nuw nsw i64 %438, 4
  %453 = add i64 %440, -2
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %455, label %437

455:                                              ; preds = %437, %431
  %456 = phi <2 x float> [ undef, %431 ], [ %451, %437 ]
  %457 = phi i64 [ 0, %431 ], [ %452, %437 ]
  %458 = phi <2 x float> [ <float 5.000000e-01, float 5.000000e-01>, %431 ], [ %451, %437 ]
  br i1 %394, label %467, label %459

459:                                              ; preds = %455
  %460 = getelementptr inbounds float, float* %6, i64 %457
  %461 = bitcast float* %460 to <2 x float>*
  %462 = load <2 x float>, <2 x float>* %461, align 4
  %463 = insertelement <2 x float> undef, float %430, i32 0
  %464 = shufflevector <2 x float> %463, <2 x float> undef, <2 x i32> zeroinitializer
  %465 = fsub nsz <2 x float> %462, %464
  %466 = fmul nsz <2 x float> %458, %465
  br label %467

467:                                              ; preds = %459, %455, %418
  %468 = phi i32 [ 0, %418 ], [ %386, %455 ], [ %386, %459 ]
  %469 = phi <2 x float> [ <float 5.000000e-01, float 5.000000e-01>, %418 ], [ %456, %455 ], [ %466, %459 ]
  %470 = icmp eq i32 %468, %218
  br i1 %470, label %471, label %477

471:                                              ; preds = %467
  %472 = fsub nsz float 2.000000e+00, %430
  %473 = fadd nsz float %430, 2.000000e+00
  %474 = extractelement <2 x float> %469, i32 0
  %475 = fmul nsz float %473, %474
  %476 = fmul nsz float %474, %475
  br label %487

477:                                              ; preds = %467
  %478 = zext i32 %468 to i64
  %479 = getelementptr inbounds float, float* %6, i64 %478
  %480 = load float, float* %479, align 4
  %481 = fsub nsz float %430, %480
  %482 = extractelement <2 x float> %469, i32 0
  %483 = fmul nsz float %482, %481
  %484 = fmul nsz float %430, %430
  %485 = fsub nsz float 4.000000e+00, %484
  %486 = fmul nsz float %483, %483
  br label %487

487:                                              ; preds = %477, %471
  %488 = phi float [ %472, %471 ], [ %485, %477 ]
  %489 = phi float [ %476, %471 ], [ %486, %477 ]
  %490 = extractelement <2 x float> %469, i32 1
  %491 = fmul nsz float %490, %488
  %492 = fmul nsz float %490, %491
  %493 = fadd nsz float %489, %492
  %494 = fcmp nsz oeq float %493, 0.000000e+00
  br i1 %494, label %522, label %495

495:                                              ; preds = %487
  %496 = fpext float %493 to double
  %497 = load i8, i8* %384, align 1
  %498 = zext i8 %497 to i64
  %499 = mul i64 %146, %498
  %500 = uitofp i64 %499 to double
  %501 = load i8, i8* %14, align 8
  %502 = zext i8 %501 to i64
  %503 = shl nsw i64 -1, %502
  %504 = xor i64 %503, -1
  %505 = uitofp i64 %504 to double
  %506 = tail call nsz double @llvm.sqrt.f64(double %496)
  %507 = fmul nsz double %506, %505
  %508 = fdiv nsz double %500, %507
  %509 = uitofp i8 %497 to double
  %510 = fsub nsz double %508, %509
  %511 = fmul nsz double %510, 0x3FBD791C40000000
  %512 = tail call nsz double @llvm.exp.f64(double %511)
  %513 = fptrunc double %512 to float
  br label %514

514:                                              ; preds = %514, %495
  %515 = phi i64 [ %517, %514 ], [ %422, %495 ]
  %516 = getelementptr inbounds float, float* %2, i64 %515
  store float %513, float* %516, align 4
  %517 = add nsw i64 %515, 1
  %518 = load i32*, i32** %382, align 8
  %519 = getelementptr inbounds i32, i32* %518, i64 %517
  %520 = load i32, i32* %519, align 4
  %521 = icmp eq i32 %520, %424
  br i1 %521, label %514, label %414

522:                                              ; preds = %295, %414, %487, %372, %3, %142, %178
  %523 = phi i32 [ -1094995529, %178 ], [ 1, %142 ], [ 1, %3 ], [ 0, %372 ], [ 0, %414 ], [ -1094995529, %487 ], [ -1094995529, %295 ]
  ret i32 %523
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @ff_vorbis_floor1_render_list(%struct.vorbis_floor1_entry*, i32, i16*, i32*, i32, float*, i32) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.cos.f64(double) #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sqrt.f64(double) #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.exp.f64(double) #5

; Function Attrs: nofree nounwind readnone
declare double @atan(double) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #5

declare i32 @ff_get_buffer(%struct.AVCodecContext*, %struct.AVFrame*, i32) local_unnamed_addr #4

declare void @av_frame_unref(%struct.AVFrame*) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nofree nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{i32 0, i32 32}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = !{i32 23, i32 32}
