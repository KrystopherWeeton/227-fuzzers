; ModuleID = '../../third_party/opus/src/celt/rate.c'
source_filename = "../../third_party/opus/src/celt/rate.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.OpusCustomMode = type { i32, i32, i32, i32, [4 x float], i16*, i32, i32, i32, i32, i8*, i16*, float*, %struct.mdct_lookup, %struct.PulseCache }
%struct.mdct_lookup = type { i32, i32, [4 x %struct.kiss_fft_state*], float* }
%struct.kiss_fft_state = type { i32, float, i32, [16 x i16], i16*, %struct.kiss_twiddle_cpx*, %struct.arch_fft_state* }
%struct.kiss_twiddle_cpx = type { float, float }
%struct.arch_fft_state = type { i32, i8* }
%struct.PulseCache = type { i32, i16*, i8*, i8* }
%struct.ec_ctx = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@LOG2_FRAC_TABLE = internal unnamed_addr constant [24 x i8] c"\00\08\0D\10\13\15\17\18\1A\1B\1C\1D\1E\1F  !\22\22#$$%%", align 16
@.str = private unnamed_addr constant [37 x i8] c"assertion failed: codedBands > start\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"../../third_party/opus/src/celt/rate.c\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"assertion failed: bits[j] >= 0\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"assertion failed: ebits[j] >= 0\00", align 1
@.str.4 = private unnamed_addr constant [48 x i8] c"assertion failed: C*ebits[j]<<BITRES == bits[j]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @clt_compute_allocation(%struct.OpusCustomMode* nocapture readonly, i32, i32, i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture, i32* nocapture, i32, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, i32, i32, %struct.ec_ctx*, i32, i32, i32) local_unnamed_addr #0 {
  %20 = icmp sgt i32 %8, 0
  %21 = select i1 %20, i32 %8, i32 0
  %22 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp sgt i32 %21, 7
  %25 = select i1 %24, i32 8, i32 0
  %26 = sub nsw i32 %21, %25
  %27 = icmp eq i32 %13, 2
  br i1 %27, label %28, label %40

28:                                               ; preds = %19
  %29 = sub nsw i32 %2, %1
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [24 x i8], [24 x i8]* @LOG2_FRAC_TABLE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = icmp slt i32 %26, %33
  br i1 %34, label %40, label %35

35:                                               ; preds = %28
  %36 = sub nsw i32 %26, %33
  %37 = icmp sgt i32 %36, 7
  %38 = select i1 %37, i32 8, i32 0
  %39 = sub nsw i32 %36, %38
  br label %40

40:                                               ; preds = %28, %35, %19
  %41 = phi i32 [ %33, %35 ], [ 0, %19 ], [ 0, %28 ]
  %42 = phi i32 [ %38, %35 ], [ 0, %19 ], [ 0, %28 ]
  %43 = phi i32 [ %39, %35 ], [ %26, %19 ], [ %26, %28 ]
  %44 = sext i32 %23 to i64
  %45 = shl nsw i64 %44, 2
  %46 = alloca i32, i64 %44, align 16
  %47 = bitcast i32* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %47, i8 -86, i64 %45, i1 false)
  %48 = alloca i32, i64 %44, align 16
  %49 = bitcast i32* %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %49, i8 -86, i64 %45, i1 false)
  %50 = alloca i32, i64 %44, align 16
  %51 = bitcast i32* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %51, i8 -86, i64 %45, i1 false)
  %52 = alloca i32, i64 %44, align 16
  %53 = bitcast i32* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %53, i8 -86, i64 %45, i1 false)
  %54 = icmp sgt i32 %2, %1
  %55 = shl i32 %13, 3
  br i1 %54, label %62, label %56

56:                                               ; preds = %40
  %57 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 9
  %58 = load i32, i32* %57, align 4
  %59 = add nsw i32 %58, -1
  %60 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 5
  %61 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 10
  br label %171

62:                                               ; preds = %40
  %63 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 5
  %64 = load i16*, i16** %63, align 8
  %65 = add nsw i32 %5, -5
  %66 = sub i32 %65, %14
  %67 = mul i32 %66, %13
  %68 = add nsw i32 %14, 3
  %69 = sext i32 %1 to i64
  %70 = sext i32 %2 to i64
  %71 = getelementptr inbounds i16, i16* %64, i64 %69
  %72 = load i16, i16* %71, align 2
  %73 = sub nsw i64 %70, %69
  %74 = icmp ult i64 %73, 4
  br i1 %74, label %133, label %75

75:                                               ; preds = %62
  %76 = and i64 %73, -4
  %77 = add nsw i64 %76, %69
  %78 = insertelement <4 x i32> undef, i32 %14, i32 0
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> zeroinitializer
  %80 = insertelement <4 x i32> undef, i32 %55, i32 0
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> zeroinitializer
  %82 = insertelement <4 x i32> undef, i32 %1, i32 0
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> zeroinitializer
  %84 = add <4 x i32> %83, <i32 0, i32 1, i32 2, i32 3>
  %85 = insertelement <4 x i32> undef, i32 %2, i32 0
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> zeroinitializer
  %87 = insertelement <4 x i32> undef, i32 %67, i32 0
  %88 = shufflevector <4 x i32> %87, <4 x i32> undef, <4 x i32> zeroinitializer
  %89 = insertelement <4 x i32> undef, i32 %68, i32 0
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> zeroinitializer
  %91 = insertelement <4 x i16> undef, i16 %72, i32 3
  br label %92

92:                                               ; preds = %92, %75
  %93 = phi i64 [ 0, %75 ], [ %126, %92 ]
  %94 = phi <4 x i16> [ %91, %75 ], [ %101, %92 ]
  %95 = phi i64 [ %69, %75 ], [ %127, %92 ]
  %96 = phi <4 x i32> [ %84, %75 ], [ %128, %92 ]
  %97 = add i64 %93, %69
  %98 = add i64 %95, 1
  %99 = getelementptr inbounds i16, i16* %64, i64 %98
  %100 = bitcast i16* %99 to <4 x i16>*
  %101 = load <4 x i16>, <4 x i16>* %100, align 2
  %102 = shufflevector <4 x i16> %94, <4 x i16> %101, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %103 = sext <4 x i16> %101 to <4 x i32>
  %104 = sext <4 x i16> %102 to <4 x i32>
  %105 = sub nsw <4 x i32> %103, %104
  %106 = mul nsw <4 x i32> %105, <i32 3, i32 3, i32 3, i32 3>
  %107 = shl <4 x i32> %106, %79
  %108 = shl <4 x i32> %107, <i32 3, i32 3, i32 3, i32 3>
  %109 = ashr <4 x i32> %108, <i32 4, i32 4, i32 4, i32 4>
  %110 = icmp sgt <4 x i32> %81, %109
  %111 = select <4 x i1> %110, <4 x i32> %81, <4 x i32> %109
  %112 = getelementptr inbounds i32, i32* %50, i64 %97
  %113 = bitcast i32* %112 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %113, align 4
  %114 = xor <4 x i32> %96, <i32 -1, i32 -1, i32 -1, i32 -1>
  %115 = add <4 x i32> %86, %114
  %116 = mul <4 x i32> %88, %115
  %117 = mul <4 x i32> %116, %105
  %118 = shl <4 x i32> %117, %90
  %119 = ashr <4 x i32> %118, <i32 6, i32 6, i32 6, i32 6>
  %120 = getelementptr inbounds i32, i32* %52, i64 %97
  %121 = shl <4 x i32> %105, %79
  %122 = icmp eq <4 x i32> %121, <i32 1, i32 1, i32 1, i32 1>
  %123 = select <4 x i1> %122, <4 x i32> %81, <4 x i32> zeroinitializer
  %124 = sub nsw <4 x i32> %119, %123
  %125 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %125, align 4
  %126 = add i64 %93, 4
  %127 = add i64 %95, 4
  %128 = add <4 x i32> %96, <i32 4, i32 4, i32 4, i32 4>
  %129 = icmp eq i64 %126, %76
  br i1 %129, label %130, label %92, !llvm.loop !2

130:                                              ; preds = %92
  %131 = icmp eq i64 %73, %76
  %132 = extractelement <4 x i16> %101, i32 3
  br i1 %131, label %165, label %133

133:                                              ; preds = %130, %62
  %134 = phi i16 [ %72, %62 ], [ %132, %130 ]
  %135 = phi i64 [ %69, %62 ], [ %77, %130 ]
  br label %136

136:                                              ; preds = %133, %136
  %137 = phi i16 [ %141, %136 ], [ %134, %133 ]
  %138 = phi i64 [ %139, %136 ], [ %135, %133 ]
  %139 = add nsw i64 %138, 1
  %140 = getelementptr inbounds i16, i16* %64, i64 %139
  %141 = load i16, i16* %140, align 2
  %142 = sext i16 %141 to i32
  %143 = sext i16 %137 to i32
  %144 = sub nsw i32 %142, %143
  %145 = mul nsw i32 %144, 3
  %146 = shl i32 %145, %14
  %147 = shl i32 %146, 3
  %148 = ashr i32 %147, 4
  %149 = icmp sgt i32 %55, %148
  %150 = select i1 %149, i32 %55, i32 %148
  %151 = getelementptr inbounds i32, i32* %50, i64 %138
  store i32 %150, i32* %151, align 4
  %152 = trunc i64 %138 to i32
  %153 = xor i32 %152, -1
  %154 = add i32 %153, %2
  %155 = mul i32 %67, %154
  %156 = mul i32 %155, %144
  %157 = shl i32 %156, %68
  %158 = ashr i32 %157, 6
  %159 = getelementptr inbounds i32, i32* %52, i64 %138
  %160 = shl i32 %144, %14
  %161 = icmp eq i32 %160, 1
  %162 = select i1 %161, i32 %55, i32 0
  %163 = sub nsw i32 %158, %162
  store i32 %163, i32* %159, align 4
  %164 = icmp eq i64 %139, %70
  br i1 %164, label %165, label %136, !llvm.loop !4

165:                                              ; preds = %136, %130
  %166 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 9
  %167 = load i32, i32* %166, align 4
  %168 = add nsw i32 %167, -1
  %169 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 5
  %170 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 10
  br i1 %54, label %177, label %171

171:                                              ; preds = %56, %165
  %172 = phi i8** [ %61, %56 ], [ %170, %165 ]
  %173 = phi i16** [ %60, %56 ], [ %169, %165 ]
  %174 = phi i32 [ %59, %56 ], [ %168, %165 ]
  %175 = phi i32 [ %58, %56 ], [ %167, %165 ]
  %176 = icmp slt i32 %43, 0
  br label %247

177:                                              ; preds = %165
  %178 = sext i32 %2 to i64
  %179 = sext i32 %1 to i64
  %180 = load i16*, i16** %169, align 8
  %181 = load i8*, i8** %170, align 8
  %182 = getelementptr inbounds i16, i16* %180, i64 %178
  %183 = load i16, i16* %182, align 2
  br label %184

184:                                              ; preds = %177, %240
  %185 = phi i32 [ %244, %240 ], [ 1, %177 ]
  %186 = phi i32 [ %245, %240 ], [ %168, %177 ]
  %187 = add nsw i32 %186, %185
  %188 = ashr i32 %187, 1
  %189 = mul nsw i32 %188, %23
  %190 = sext i32 %189 to i64
  br label %191

191:                                              ; preds = %184, %235
  %192 = phi i16 [ %183, %184 ], [ %199, %235 ]
  %193 = phi i64 [ %178, %184 ], [ %196, %235 ]
  %194 = phi i32 [ 0, %184 ], [ %238, %235 ]
  %195 = phi i32 [ 0, %184 ], [ %236, %235 ]
  %196 = add nsw i64 %193, -1
  %197 = sext i16 %192 to i32
  %198 = getelementptr inbounds i16, i16* %180, i64 %196
  %199 = load i16, i16* %198, align 2
  %200 = sext i16 %199 to i32
  %201 = sub nsw i32 %197, %200
  %202 = mul nsw i32 %201, %13
  %203 = add nsw i64 %196, %190
  %204 = getelementptr inbounds i8, i8* %181, i64 %203
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i32
  %207 = mul nsw i32 %202, %206
  %208 = shl i32 %207, %14
  %209 = ashr i32 %208, 2
  %210 = icmp sgt i32 %208, 3
  br i1 %210, label %211, label %217

211:                                              ; preds = %191
  %212 = getelementptr inbounds i32, i32* %52, i64 %196
  %213 = load i32, i32* %212, align 4
  %214 = add nsw i32 %213, %209
  %215 = icmp sgt i32 %214, 0
  %216 = select i1 %215, i32 %214, i32 0
  br label %217

217:                                              ; preds = %211, %191
  %218 = phi i32 [ %216, %211 ], [ %209, %191 ]
  %219 = getelementptr inbounds i32, i32* %3, i64 %196
  %220 = load i32, i32* %219, align 4
  %221 = add nsw i32 %220, %218
  %222 = getelementptr inbounds i32, i32* %50, i64 %196
  %223 = load i32, i32* %222, align 4
  %224 = icmp sge i32 %221, %223
  %225 = icmp ne i32 %195, 0
  %226 = or i1 %225, %224
  br i1 %226, label %230, label %227

227:                                              ; preds = %217
  %228 = icmp slt i32 %221, %55
  %229 = select i1 %228, i32 0, i32 %55
  br label %235

230:                                              ; preds = %217
  %231 = getelementptr inbounds i32, i32* %4, i64 %196
  %232 = load i32, i32* %231, align 4
  %233 = icmp slt i32 %221, %232
  %234 = select i1 %233, i32 %221, i32 %232
  br label %235

235:                                              ; preds = %230, %227
  %236 = phi i32 [ 1, %230 ], [ 0, %227 ]
  %237 = phi i32 [ %234, %230 ], [ %229, %227 ]
  %238 = add nsw i32 %237, %194
  %239 = icmp sgt i64 %196, %179
  br i1 %239, label %191, label %240

240:                                              ; preds = %235
  %241 = icmp sgt i32 %238, %43
  %242 = add nsw i32 %188, -1
  %243 = add nsw i32 %188, 1
  %244 = select i1 %241, i32 %185, i32 %243
  %245 = select i1 %241, i32 %242, i32 %186
  %246 = icmp sgt i32 %244, %245
  br i1 %246, label %257, label %184

247:                                              ; preds = %171, %247
  %248 = phi i32 [ %254, %247 ], [ 1, %171 ]
  %249 = phi i32 [ %255, %247 ], [ %174, %171 ]
  %250 = add nsw i32 %249, %248
  %251 = ashr i32 %250, 1
  %252 = add nsw i32 %251, -1
  %253 = add nsw i32 %251, 1
  %254 = select i1 %176, i32 %248, i32 %253
  %255 = select i1 %176, i32 %252, i32 %249
  %256 = icmp sgt i32 %254, %255
  br i1 %256, label %257, label %247

257:                                              ; preds = %247, %240
  %258 = phi i8** [ %170, %240 ], [ %172, %247 ]
  %259 = phi i16** [ %169, %240 ], [ %173, %247 ]
  %260 = phi i32 [ %167, %240 ], [ %175, %247 ]
  %261 = phi i32 [ %244, %240 ], [ %254, %247 ]
  %262 = add nsw i32 %261, -1
  br i1 %54, label %267, label %263

263:                                              ; preds = %257
  %264 = icmp sgt i32 %13, 1
  %265 = zext i1 %264 to i32
  %266 = shl i32 %14, 3
  br label %440

267:                                              ; preds = %257
  %268 = load i16*, i16** %259, align 8
  %269 = load i8*, i8** %258, align 8
  %270 = mul nsw i32 %262, %23
  %271 = icmp slt i32 %261, %260
  %272 = icmp sgt i32 %262, 0
  br i1 %271, label %279, label %273

273:                                              ; preds = %267
  %274 = sext i32 %1 to i64
  %275 = sext i32 %270 to i64
  %276 = sext i32 %2 to i64
  %277 = getelementptr inbounds i16, i16* %268, i64 %274
  %278 = load i16, i16* %277, align 2
  br label %344

279:                                              ; preds = %267
  %280 = mul nsw i32 %261, %23
  %281 = sext i32 %1 to i64
  %282 = sext i32 %270 to i64
  %283 = sext i32 %280 to i64
  %284 = sext i32 %2 to i64
  %285 = getelementptr inbounds i16, i16* %268, i64 %281
  %286 = load i16, i16* %285, align 2
  br label %287

287:                                              ; preds = %328, %279
  %288 = phi i16 [ %286, %279 ], [ %293, %328 ]
  %289 = phi i64 [ %281, %279 ], [ %291, %328 ]
  %290 = phi i32 [ %1, %279 ], [ %336, %328 ]
  %291 = add nsw i64 %289, 1
  %292 = getelementptr inbounds i16, i16* %268, i64 %291
  %293 = load i16, i16* %292, align 2
  %294 = sext i16 %293 to i32
  %295 = sext i16 %288 to i32
  %296 = sub nsw i32 %294, %295
  %297 = mul nsw i32 %296, %13
  %298 = add nsw i64 %289, %282
  %299 = getelementptr inbounds i8, i8* %269, i64 %298
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i32
  %302 = mul nsw i32 %297, %301
  %303 = shl i32 %302, %14
  %304 = ashr i32 %303, 2
  %305 = add nsw i64 %289, %283
  %306 = getelementptr inbounds i8, i8* %269, i64 %305
  %307 = load i8, i8* %306, align 1
  %308 = zext i8 %307 to i32
  %309 = mul nsw i32 %297, %308
  %310 = shl i32 %309, %14
  %311 = ashr i32 %310, 2
  %312 = icmp sgt i32 %303, 3
  br i1 %312, label %313, label %319

313:                                              ; preds = %287
  %314 = getelementptr inbounds i32, i32* %52, i64 %289
  %315 = load i32, i32* %314, align 4
  %316 = add nsw i32 %315, %304
  %317 = icmp sgt i32 %316, 0
  %318 = select i1 %317, i32 %316, i32 0
  br label %319

319:                                              ; preds = %313, %287
  %320 = phi i32 [ %318, %313 ], [ %304, %287 ]
  %321 = icmp sgt i32 %310, 3
  br i1 %321, label %322, label %328

322:                                              ; preds = %319
  %323 = getelementptr inbounds i32, i32* %52, i64 %289
  %324 = load i32, i32* %323, align 4
  %325 = add nsw i32 %324, %311
  %326 = icmp sgt i32 %325, 0
  %327 = select i1 %326, i32 %325, i32 0
  br label %328

328:                                              ; preds = %322, %319
  %329 = phi i32 [ %327, %322 ], [ %311, %319 ]
  %330 = getelementptr inbounds i32, i32* %3, i64 %289
  %331 = load i32, i32* %330, align 4
  %332 = select i1 %272, i32 %331, i32 0
  %333 = add nsw i32 %320, %332
  %334 = icmp sgt i32 %331, 0
  %335 = trunc i64 %289 to i32
  %336 = select i1 %334, i32 %335, i32 %290
  %337 = sub i32 %329, %333
  %338 = add i32 %337, %331
  %339 = icmp sgt i32 %338, 0
  %340 = select i1 %339, i32 %338, i32 0
  %341 = getelementptr inbounds i32, i32* %46, i64 %289
  store i32 %333, i32* %341, align 4
  %342 = getelementptr inbounds i32, i32* %48, i64 %289
  store i32 %340, i32* %342, align 4
  %343 = icmp eq i64 %291, %284
  br i1 %343, label %396, label %287

344:                                              ; preds = %380, %273
  %345 = phi i16 [ %278, %273 ], [ %350, %380 ]
  %346 = phi i64 [ %274, %273 ], [ %348, %380 ]
  %347 = phi i32 [ %1, %273 ], [ %388, %380 ]
  %348 = add nsw i64 %346, 1
  %349 = getelementptr inbounds i16, i16* %268, i64 %348
  %350 = load i16, i16* %349, align 2
  %351 = sext i16 %350 to i32
  %352 = sext i16 %345 to i32
  %353 = sub nsw i32 %351, %352
  %354 = mul nsw i32 %353, %13
  %355 = add nsw i64 %346, %275
  %356 = getelementptr inbounds i8, i8* %269, i64 %355
  %357 = load i8, i8* %356, align 1
  %358 = zext i8 %357 to i32
  %359 = mul nsw i32 %354, %358
  %360 = shl i32 %359, %14
  %361 = ashr i32 %360, 2
  %362 = getelementptr inbounds i32, i32* %4, i64 %346
  %363 = load i32, i32* %362, align 4
  %364 = icmp sgt i32 %360, 3
  br i1 %364, label %365, label %371

365:                                              ; preds = %344
  %366 = getelementptr inbounds i32, i32* %52, i64 %346
  %367 = load i32, i32* %366, align 4
  %368 = add nsw i32 %367, %361
  %369 = icmp sgt i32 %368, 0
  %370 = select i1 %369, i32 %368, i32 0
  br label %371

371:                                              ; preds = %365, %344
  %372 = phi i32 [ %370, %365 ], [ %361, %344 ]
  %373 = icmp sgt i32 %363, 0
  br i1 %373, label %374, label %380

374:                                              ; preds = %371
  %375 = getelementptr inbounds i32, i32* %52, i64 %346
  %376 = load i32, i32* %375, align 4
  %377 = add nsw i32 %376, %363
  %378 = icmp sgt i32 %377, 0
  %379 = select i1 %378, i32 %377, i32 0
  br label %380

380:                                              ; preds = %374, %371
  %381 = phi i32 [ %379, %374 ], [ %363, %371 ]
  %382 = getelementptr inbounds i32, i32* %3, i64 %346
  %383 = load i32, i32* %382, align 4
  %384 = select i1 %272, i32 %383, i32 0
  %385 = add nsw i32 %372, %384
  %386 = icmp sgt i32 %383, 0
  %387 = trunc i64 %346 to i32
  %388 = select i1 %386, i32 %387, i32 %347
  %389 = sub i32 %381, %385
  %390 = add i32 %389, %383
  %391 = icmp sgt i32 %390, 0
  %392 = select i1 %391, i32 %390, i32 0
  %393 = getelementptr inbounds i32, i32* %46, i64 %346
  store i32 %385, i32* %393, align 4
  %394 = getelementptr inbounds i32, i32* %48, i64 %346
  store i32 %392, i32* %394, align 4
  %395 = icmp eq i64 %348, %276
  br i1 %395, label %396, label %344

396:                                              ; preds = %380, %328
  %397 = phi i32 [ %336, %328 ], [ %388, %380 ]
  %398 = icmp sgt i32 %13, 1
  %399 = zext i1 %398 to i32
  %400 = shl i32 %14, 3
  br i1 %54, label %401, label %440

401:                                              ; preds = %396
  %402 = sext i32 %2 to i64
  %403 = sext i32 %1 to i64
  br label %404

404:                                              ; preds = %428, %401
  %405 = phi i64 [ %402, %401 ], [ %408, %428 ]
  %406 = phi i32 [ 0, %401 ], [ %430, %428 ]
  %407 = phi i32 [ 0, %401 ], [ %431, %428 ]
  %408 = add nsw i64 %405, -1
  %409 = getelementptr inbounds i32, i32* %46, i64 %408
  %410 = load i32, i32* %409, align 4
  %411 = getelementptr inbounds i32, i32* %48, i64 %408
  %412 = load i32, i32* %411, align 4
  %413 = ashr i32 %412, 1
  %414 = add nsw i32 %413, %410
  %415 = getelementptr inbounds i32, i32* %50, i64 %408
  %416 = load i32, i32* %415, align 4
  %417 = icmp sge i32 %414, %416
  %418 = icmp ne i32 %406, 0
  %419 = or i1 %418, %417
  br i1 %419, label %423, label %420

420:                                              ; preds = %404
  %421 = icmp slt i32 %414, %55
  %422 = select i1 %421, i32 0, i32 %55
  br label %428

423:                                              ; preds = %404
  %424 = getelementptr inbounds i32, i32* %4, i64 %408
  %425 = load i32, i32* %424, align 4
  %426 = icmp slt i32 %414, %425
  %427 = select i1 %426, i32 %414, i32 %425
  br label %428

428:                                              ; preds = %423, %420
  %429 = phi i32 [ %427, %423 ], [ %422, %420 ]
  %430 = phi i32 [ 1, %423 ], [ 0, %420 ]
  %431 = add nsw i32 %429, %407
  %432 = icmp sgt i64 %408, %403
  br i1 %432, label %404, label %433

433:                                              ; preds = %428
  %434 = icmp sgt i32 %431, %43
  %435 = select i1 %434, i32 0, i32 32
  %436 = select i1 %434, i32 16, i32 48
  br label %978

437:                                              ; preds = %1148
  %438 = icmp sgt i32 %1151, %43
  %439 = select i1 %438, i32 %1119, i32 %1122
  br label %523

440:                                              ; preds = %523, %263, %396
  %441 = phi i32 [ %400, %396 ], [ %266, %263 ], [ %400, %523 ]
  %442 = phi i32 [ %399, %396 ], [ %265, %263 ], [ %399, %523 ]
  %443 = phi i1 [ %398, %396 ], [ %264, %263 ], [ %398, %523 ]
  %444 = phi i32 [ %397, %396 ], [ %1, %263 ], [ %397, %523 ]
  %445 = phi i32 [ 0, %396 ], [ 0, %263 ], [ %550, %523 ]
  %446 = add i32 %2, -1
  %447 = icmp sgt i32 %446, %444
  br i1 %447, label %448, label %556

448:                                              ; preds = %440
  %449 = sext i32 %1 to i64
  %450 = add nsw i32 %55, 8
  %451 = icmp eq i32 %16, 0
  %452 = add nsw i32 %1, 2
  %453 = sext i32 %446 to i64
  br i1 %451, label %457, label %454

454:                                              ; preds = %448
  %455 = sext i32 %18 to i64
  %456 = sext i32 %444 to i64
  br label %561

457:                                              ; preds = %448
  %458 = sext i32 %444 to i64
  br label %459

459:                                              ; preds = %512, %457
  %460 = phi i64 [ %453, %457 ], [ %520, %512 ]
  %461 = phi i32 [ %2, %457 ], [ %522, %512 ]
  %462 = phi i32 [ %445, %457 ], [ %519, %512 ]
  %463 = phi i32 [ %41, %457 ], [ %513, %512 ]
  %464 = sub nsw i32 %43, %462
  %465 = load i16*, i16** %259, align 8
  %466 = sext i32 %461 to i64
  %467 = getelementptr inbounds i16, i16* %465, i64 %466
  %468 = load i16, i16* %467, align 2
  %469 = sext i16 %468 to i32
  %470 = getelementptr inbounds i16, i16* %465, i64 %449
  %471 = load i16, i16* %470, align 2
  %472 = sext i16 %471 to i32
  %473 = sub nsw i32 %469, %472
  %474 = udiv i32 %464, %473
  %475 = mul nsw i32 %473, %474
  %476 = sub nsw i32 %464, %475
  %477 = getelementptr inbounds i16, i16* %465, i64 %460
  %478 = load i16, i16* %477, align 2
  %479 = sext i16 %478 to i32
  %480 = sub nsw i32 %472, %479
  %481 = add i32 %476, %480
  %482 = icmp sgt i32 %481, 0
  %483 = select i1 %482, i32 %481, i32 0
  %484 = sub nsw i32 %469, %479
  %485 = getelementptr inbounds i32, i32* %10, i64 %460
  %486 = load i32, i32* %485, align 4
  %487 = mul nsw i32 %484, %474
  %488 = add nsw i32 %487, %486
  %489 = add nsw i32 %488, %483
  %490 = getelementptr inbounds i32, i32* %50, i64 %460
  %491 = load i32, i32* %490, align 4
  %492 = icmp sgt i32 %491, %450
  %493 = select i1 %492, i32 %491, i32 %450
  %494 = icmp slt i32 %489, %493
  br i1 %494, label %502, label %495

495:                                              ; preds = %459
  %496 = tail call i32 @ec_dec_bit_logp(%struct.ec_ctx* %15, i32 1) #4
  %497 = icmp eq i32 %496, 0
  br i1 %497, label %498, label %637

498:                                              ; preds = %495
  %499 = add nsw i32 %462, 8
  %500 = add nsw i32 %489, -8
  %501 = load i32, i32* %485, align 4
  br label %502

502:                                              ; preds = %498, %459
  %503 = phi i32 [ %501, %498 ], [ %486, %459 ]
  %504 = phi i32 [ %499, %498 ], [ %462, %459 ]
  %505 = phi i32 [ %500, %498 ], [ %489, %459 ]
  %506 = icmp sgt i32 %463, 0
  br i1 %506, label %507, label %512

507:                                              ; preds = %502
  %508 = sub nsw i64 %460, %449
  %509 = getelementptr inbounds [24 x i8], [24 x i8]* @LOG2_FRAC_TABLE, i64 0, i64 %508
  %510 = load i8, i8* %509, align 1
  %511 = zext i8 %510 to i32
  br label %512

512:                                              ; preds = %507, %502
  %513 = phi i32 [ %511, %507 ], [ %463, %502 ]
  %514 = icmp slt i32 %505, %55
  %515 = select i1 %514, i32 0, i32 %55
  %516 = add i32 %503, %463
  %517 = sub i32 %504, %516
  %518 = add i32 %517, %515
  %519 = add i32 %518, %513
  store i32 %515, i32* %485, align 4
  %520 = add nsw i64 %460, -1
  %521 = icmp sgt i64 %520, %458
  %522 = trunc i64 %460 to i32
  br i1 %521, label %459, label %552

523:                                              ; preds = %523, %437
  %524 = phi i64 [ %402, %437 ], [ %527, %523 ]
  %525 = phi i32 [ 0, %437 ], [ %543, %523 ]
  %526 = phi i32 [ 0, %437 ], [ %550, %523 ]
  %527 = add nsw i64 %524, -1
  %528 = getelementptr inbounds i32, i32* %46, i64 %527
  %529 = load i32, i32* %528, align 4
  %530 = getelementptr inbounds i32, i32* %48, i64 %527
  %531 = load i32, i32* %530, align 4
  %532 = mul nsw i32 %531, %439
  %533 = ashr i32 %532, 6
  %534 = add nsw i32 %533, %529
  %535 = getelementptr inbounds i32, i32* %50, i64 %527
  %536 = load i32, i32* %535, align 4
  %537 = icmp sge i32 %534, %536
  %538 = icmp ne i32 %525, 0
  %539 = or i1 %538, %537
  %540 = icmp slt i32 %534, %55
  %541 = select i1 %540, i32 0, i32 %55
  %542 = zext i1 %537 to i32
  %543 = or i32 %525, %542
  %544 = select i1 %539, i32 %534, i32 %541
  %545 = getelementptr inbounds i32, i32* %4, i64 %527
  %546 = load i32, i32* %545, align 4
  %547 = icmp slt i32 %544, %546
  %548 = select i1 %547, i32 %544, i32 %546
  %549 = getelementptr inbounds i32, i32* %10, i64 %527
  store i32 %548, i32* %549, align 4
  %550 = add nsw i32 %548, %526
  %551 = icmp sgt i64 %527, %403
  br i1 %551, label %523, label %440

552:                                              ; preds = %512
  %553 = trunc i64 %460 to i32
  br label %556

554:                                              ; preds = %626
  %555 = trunc i64 %562 to i32
  br label %556

556:                                              ; preds = %554, %552, %440
  %557 = phi i32 [ %41, %440 ], [ %513, %552 ], [ %627, %554 ]
  %558 = phi i32 [ %445, %440 ], [ %519, %552 ], [ %633, %554 ]
  %559 = phi i32 [ %2, %440 ], [ %553, %552 ], [ %555, %554 ]
  %560 = add nsw i32 %43, %25
  br label %637

561:                                              ; preds = %626, %454
  %562 = phi i64 [ %453, %454 ], [ %634, %626 ]
  %563 = phi i32 [ %2, %454 ], [ %636, %626 ]
  %564 = phi i32 [ %445, %454 ], [ %633, %626 ]
  %565 = phi i32 [ %41, %454 ], [ %627, %626 ]
  %566 = sub nsw i32 %43, %564
  %567 = load i16*, i16** %259, align 8
  %568 = sext i32 %563 to i64
  %569 = getelementptr inbounds i16, i16* %567, i64 %568
  %570 = load i16, i16* %569, align 2
  %571 = sext i16 %570 to i32
  %572 = getelementptr inbounds i16, i16* %567, i64 %449
  %573 = load i16, i16* %572, align 2
  %574 = sext i16 %573 to i32
  %575 = sub nsw i32 %571, %574
  %576 = udiv i32 %566, %575
  %577 = mul nsw i32 %575, %576
  %578 = sub nsw i32 %566, %577
  %579 = getelementptr inbounds i16, i16* %567, i64 %562
  %580 = load i16, i16* %579, align 2
  %581 = sext i16 %580 to i32
  %582 = sub nsw i32 %574, %581
  %583 = add i32 %578, %582
  %584 = icmp sgt i32 %583, 0
  %585 = select i1 %584, i32 %583, i32 0
  %586 = sub nsw i32 %571, %581
  %587 = getelementptr inbounds i32, i32* %10, i64 %562
  %588 = load i32, i32* %587, align 4
  %589 = mul nsw i32 %586, %576
  %590 = add nsw i32 %589, %588
  %591 = add nsw i32 %590, %585
  %592 = getelementptr inbounds i32, i32* %50, i64 %562
  %593 = load i32, i32* %592, align 4
  %594 = icmp sgt i32 %593, %450
  %595 = select i1 %594, i32 %593, i32 %450
  %596 = icmp slt i32 %591, %595
  br i1 %596, label %616, label %597

597:                                              ; preds = %561
  %598 = icmp sgt i32 %563, %452
  br i1 %598, label %599, label %615

599:                                              ; preds = %597
  %600 = icmp sgt i32 %563, 17
  %601 = icmp sgt i32 %563, %17
  %602 = select i1 %601, i32 9, i32 7
  %603 = select i1 %600, i32 %602, i32 0
  %604 = mul nsw i32 %586, %603
  %605 = shl i32 %604, %14
  %606 = shl i32 %605, 3
  %607 = ashr i32 %606, 4
  %608 = icmp sle i32 %591, %607
  %609 = icmp sgt i64 %562, %455
  %610 = or i1 %609, %608
  br i1 %610, label %611, label %615

611:                                              ; preds = %599
  tail call void @ec_enc_bit_logp(%struct.ec_ctx* %15, i32 0, i32 1) #4
  %612 = add nsw i32 %564, 8
  %613 = add nsw i32 %591, -8
  %614 = load i32, i32* %587, align 4
  br label %616

615:                                              ; preds = %599, %597
  tail call void @ec_enc_bit_logp(%struct.ec_ctx* %15, i32 1, i32 1) #4
  br label %637

616:                                              ; preds = %611, %561
  %617 = phi i32 [ %614, %611 ], [ %588, %561 ]
  %618 = phi i32 [ %612, %611 ], [ %564, %561 ]
  %619 = phi i32 [ %613, %611 ], [ %591, %561 ]
  %620 = icmp sgt i32 %565, 0
  br i1 %620, label %621, label %626

621:                                              ; preds = %616
  %622 = sub nsw i64 %562, %449
  %623 = getelementptr inbounds [24 x i8], [24 x i8]* @LOG2_FRAC_TABLE, i64 0, i64 %622
  %624 = load i8, i8* %623, align 1
  %625 = zext i8 %624 to i32
  br label %626

626:                                              ; preds = %621, %616
  %627 = phi i32 [ %625, %621 ], [ %565, %616 ]
  %628 = icmp slt i32 %619, %55
  %629 = select i1 %628, i32 0, i32 %55
  %630 = add i32 %617, %565
  %631 = sub i32 %618, %630
  %632 = add i32 %631, %629
  %633 = add i32 %632, %627
  store i32 %629, i32* %587, align 4
  %634 = add nsw i64 %562, -1
  %635 = icmp sgt i64 %634, %456
  %636 = trunc i64 %562 to i32
  br i1 %635, label %561, label %554

637:                                              ; preds = %495, %615, %556
  %638 = phi i32 [ %565, %615 ], [ %557, %556 ], [ %463, %495 ]
  %639 = phi i32 [ %564, %615 ], [ %558, %556 ], [ %462, %495 ]
  %640 = phi i32 [ %563, %615 ], [ %559, %556 ], [ %461, %495 ]
  %641 = phi i32 [ %43, %615 ], [ %560, %556 ], [ %43, %495 ]
  %642 = icmp sgt i32 %640, %1
  br i1 %642, label %644, label %643

643:                                              ; preds = %637
  tail call void @celt_fatal(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0), i32 391) #5
  unreachable

644:                                              ; preds = %637
  %645 = icmp sgt i32 %638, 0
  br i1 %645, label %646, label %661

646:                                              ; preds = %644
  %647 = icmp eq i32 %16, 0
  br i1 %647, label %656, label %648

648:                                              ; preds = %646
  %649 = load i32, i32* %6, align 4
  %650 = icmp slt i32 %649, %640
  %651 = select i1 %650, i32 %649, i32 %640
  store i32 %651, i32* %6, align 4
  %652 = sub nsw i32 %651, %1
  %653 = add nsw i32 %640, 1
  %654 = sub i32 %653, %1
  tail call void @ec_enc_uint(%struct.ec_ctx* %15, i32 %652, i32 %654) #4
  %655 = load i32, i32* %6, align 4
  br label %662

656:                                              ; preds = %646
  %657 = add nsw i32 %640, 1
  %658 = sub i32 %657, %1
  %659 = tail call i32 @ec_dec_uint(%struct.ec_ctx* %15, i32 %658) #4
  %660 = add i32 %659, %1
  store i32 %660, i32* %6, align 4
  br label %662

661:                                              ; preds = %644
  store i32 0, i32* %6, align 4
  br label %662

662:                                              ; preds = %661, %656, %648
  %663 = phi i32 [ %655, %648 ], [ %660, %656 ], [ 0, %661 ]
  %664 = icmp sgt i32 %663, %1
  %665 = select i1 %664, i32 0, i32 %42
  %666 = icmp ne i32 %42, 0
  %667 = and i1 %666, %664
  br i1 %667, label %668, label %674

668:                                              ; preds = %662
  %669 = icmp eq i32 %16, 0
  br i1 %669, label %672, label %670

670:                                              ; preds = %668
  %671 = load i32, i32* %7, align 4
  tail call void @ec_enc_bit_logp(%struct.ec_ctx* %15, i32 %671, i32 1) #4
  br label %675

672:                                              ; preds = %668
  %673 = tail call i32 @ec_dec_bit_logp(%struct.ec_ctx* %15, i32 1) #4
  store i32 %673, i32* %7, align 4
  br label %675

674:                                              ; preds = %662
  store i32 0, i32* %7, align 4
  br label %675

675:                                              ; preds = %674, %672, %670
  %676 = sub i32 %641, %639
  %677 = add i32 %665, %676
  %678 = load i16*, i16** %259, align 8
  %679 = sext i32 %640 to i64
  %680 = getelementptr inbounds i16, i16* %678, i64 %679
  %681 = load i16, i16* %680, align 2
  %682 = sext i16 %681 to i32
  %683 = sext i32 %1 to i64
  %684 = getelementptr inbounds i16, i16* %678, i64 %683
  %685 = load i16, i16* %684, align 2
  %686 = sext i16 %685 to i32
  %687 = sub nsw i32 %682, %686
  %688 = udiv i32 %677, %687
  %689 = mul nsw i32 %687, %688
  %690 = sub nsw i32 %677, %689
  %691 = add nsw i64 %683, 1
  %692 = getelementptr inbounds i16, i16* %678, i64 %691
  %693 = load i16, i16* %692, align 2
  %694 = sext i16 %693 to i32
  %695 = sub nsw i32 %694, %686
  %696 = mul nsw i32 %695, %688
  %697 = getelementptr inbounds i32, i32* %10, i64 %683
  %698 = load i32, i32* %697, align 4
  %699 = add nsw i32 %696, %698
  store i32 %699, i32* %697, align 4
  %700 = icmp eq i64 %691, %679
  br i1 %700, label %724, label %701

701:                                              ; preds = %675
  %702 = xor i64 %683, 1
  %703 = add nsw i64 %702, %679
  %704 = add nsw i64 %679, -2
  %705 = and i64 %703, 1
  %706 = icmp eq i64 %705, 0
  br i1 %706, label %721, label %707

707:                                              ; preds = %701
  %708 = load i16*, i16** %259, align 8
  %709 = getelementptr inbounds i16, i16* %708, i64 %691
  %710 = load i16, i16* %709, align 2
  %711 = add nsw i64 %683, 2
  %712 = getelementptr inbounds i16, i16* %708, i64 %711
  %713 = load i16, i16* %712, align 2
  %714 = sext i16 %713 to i32
  %715 = sext i16 %710 to i32
  %716 = sub nsw i32 %714, %715
  %717 = mul nsw i32 %716, %688
  %718 = getelementptr inbounds i32, i32* %10, i64 %691
  %719 = load i32, i32* %718, align 4
  %720 = add nsw i32 %717, %719
  store i32 %720, i32* %718, align 4
  br label %721

721:                                              ; preds = %701, %707
  %722 = phi i64 [ %691, %701 ], [ %711, %707 ]
  %723 = icmp eq i64 %704, %683
  br i1 %723, label %724, label %750

724:                                              ; preds = %721, %750, %675
  %725 = sub nsw i64 %679, %683
  %726 = xor i64 %683, -1
  %727 = and i64 %725, 1
  %728 = icmp eq i64 %727, 0
  br i1 %728, label %745, label %729

729:                                              ; preds = %724
  %730 = load i16*, i16** %259, align 8
  %731 = add nsw i64 %683, 1
  %732 = getelementptr inbounds i16, i16* %730, i64 %731
  %733 = load i16, i16* %732, align 2
  %734 = sext i16 %733 to i32
  %735 = getelementptr inbounds i16, i16* %730, i64 %683
  %736 = load i16, i16* %735, align 2
  %737 = sext i16 %736 to i32
  %738 = sub nsw i32 %734, %737
  %739 = icmp slt i32 %690, %738
  %740 = select i1 %739, i32 %690, i32 %738
  %741 = getelementptr inbounds i32, i32* %10, i64 %683
  %742 = load i32, i32* %741, align 4
  %743 = add nsw i32 %740, %742
  store i32 %743, i32* %741, align 4
  %744 = sub nsw i32 %690, %740
  br label %745

745:                                              ; preds = %724, %729
  %746 = phi i64 [ %683, %724 ], [ %731, %729 ]
  %747 = phi i32 [ %690, %724 ], [ %744, %729 ]
  %748 = sub nsw i64 0, %679
  %749 = icmp eq i64 %726, %748
  br i1 %749, label %779, label %782

750:                                              ; preds = %721, %750
  %751 = phi i64 [ %768, %750 ], [ %722, %721 ]
  %752 = load i16*, i16** %259, align 8
  %753 = getelementptr inbounds i16, i16* %752, i64 %751
  %754 = load i16, i16* %753, align 2
  %755 = add nsw i64 %751, 1
  %756 = getelementptr inbounds i16, i16* %752, i64 %755
  %757 = load i16, i16* %756, align 2
  %758 = sext i16 %757 to i32
  %759 = sext i16 %754 to i32
  %760 = sub nsw i32 %758, %759
  %761 = mul nsw i32 %760, %688
  %762 = getelementptr inbounds i32, i32* %10, i64 %751
  %763 = load i32, i32* %762, align 4
  %764 = add nsw i32 %761, %763
  store i32 %764, i32* %762, align 4
  %765 = load i16*, i16** %259, align 8
  %766 = getelementptr inbounds i16, i16* %765, i64 %755
  %767 = load i16, i16* %766, align 2
  %768 = add nsw i64 %751, 2
  %769 = getelementptr inbounds i16, i16* %765, i64 %768
  %770 = load i16, i16* %769, align 2
  %771 = sext i16 %770 to i32
  %772 = sext i16 %767 to i32
  %773 = sub nsw i32 %771, %772
  %774 = mul nsw i32 %773, %688
  %775 = getelementptr inbounds i32, i32* %10, i64 %755
  %776 = load i32, i32* %775, align 4
  %777 = add nsw i32 %774, %776
  store i32 %777, i32* %775, align 4
  %778 = icmp eq i64 %768, %679
  br i1 %778, label %724, label %750

779:                                              ; preds = %782, %745
  %780 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 11
  %781 = select i1 %443, i32 4, i32 3
  br label %816

782:                                              ; preds = %745, %782
  %783 = phi i64 [ %801, %782 ], [ %746, %745 ]
  %784 = phi i32 [ %814, %782 ], [ %747, %745 ]
  %785 = load i16*, i16** %259, align 8
  %786 = add nsw i64 %783, 1
  %787 = getelementptr inbounds i16, i16* %785, i64 %786
  %788 = load i16, i16* %787, align 2
  %789 = sext i16 %788 to i32
  %790 = getelementptr inbounds i16, i16* %785, i64 %783
  %791 = load i16, i16* %790, align 2
  %792 = sext i16 %791 to i32
  %793 = sub nsw i32 %789, %792
  %794 = icmp slt i32 %784, %793
  %795 = select i1 %794, i32 %784, i32 %793
  %796 = getelementptr inbounds i32, i32* %10, i64 %783
  %797 = load i32, i32* %796, align 4
  %798 = add nsw i32 %795, %797
  store i32 %798, i32* %796, align 4
  %799 = sub nsw i32 %784, %795
  %800 = load i16*, i16** %259, align 8
  %801 = add nsw i64 %783, 2
  %802 = getelementptr inbounds i16, i16* %800, i64 %801
  %803 = load i16, i16* %802, align 2
  %804 = sext i16 %803 to i32
  %805 = getelementptr inbounds i16, i16* %800, i64 %786
  %806 = load i16, i16* %805, align 2
  %807 = sext i16 %806 to i32
  %808 = sub nsw i32 %804, %807
  %809 = icmp slt i32 %799, %808
  %810 = select i1 %809, i32 %799, i32 %808
  %811 = getelementptr inbounds i32, i32* %10, i64 %786
  %812 = load i32, i32* %811, align 4
  %813 = add nsw i32 %810, %812
  store i32 %813, i32* %811, align 4
  %814 = sub nsw i32 %799, %810
  %815 = icmp eq i64 %801, %679
  br i1 %815, label %779, label %782

816:                                              ; preds = %948, %779
  %817 = phi i64 [ %683, %779 ], [ %827, %948 ]
  %818 = phi i32 [ 0, %779 ], [ %944, %948 ]
  %819 = icmp slt i64 %817, %679
  br i1 %819, label %820, label %953

820:                                              ; preds = %816
  %821 = getelementptr inbounds i32, i32* %10, i64 %817
  %822 = load i32, i32* %821, align 4
  %823 = icmp sgt i32 %822, -1
  br i1 %823, label %825, label %824

824:                                              ; preds = %820
  tail call void @celt_fatal(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0), i32 442) #5
  unreachable

825:                                              ; preds = %820
  %826 = load i16*, i16** %259, align 8
  %827 = add nsw i64 %817, 1
  %828 = getelementptr inbounds i16, i16* %826, i64 %827
  %829 = load i16, i16* %828, align 2
  %830 = sext i16 %829 to i32
  %831 = getelementptr inbounds i16, i16* %826, i64 %817
  %832 = load i16, i16* %831, align 2
  %833 = sext i16 %832 to i32
  %834 = sub nsw i32 %830, %833
  %835 = shl i32 %834, %14
  %836 = add nsw i32 %822, %818
  %837 = icmp sgt i32 %835, 1
  br i1 %837, label %838, label %919

838:                                              ; preds = %825
  %839 = getelementptr inbounds i32, i32* %4, i64 %817
  %840 = load i32, i32* %839, align 4
  %841 = sub nsw i32 %836, %840
  %842 = icmp sgt i32 %841, 0
  %843 = select i1 %842, i32 %841, i32 0
  %844 = sub nsw i32 %836, %843
  store i32 %844, i32* %821, align 4
  %845 = mul nsw i32 %835, %13
  %846 = icmp ne i32 %835, 2
  %847 = and i1 %27, %846
  br i1 %847, label %848, label %855

848:                                              ; preds = %838
  %849 = load i32, i32* %7, align 4
  %850 = icmp eq i32 %849, 0
  br i1 %850, label %851, label %855

851:                                              ; preds = %848
  %852 = load i32, i32* %6, align 4
  %853 = sext i32 %852 to i64
  %854 = icmp slt i64 %817, %853
  br label %855

855:                                              ; preds = %851, %848, %838
  %856 = phi i1 [ false, %848 ], [ false, %838 ], [ %854, %851 ]
  %857 = zext i1 %856 to i32
  %858 = add nsw i32 %845, %857
  %859 = load i16*, i16** %780, align 8
  %860 = getelementptr inbounds i16, i16* %859, i64 %817
  %861 = load i16, i16* %860, align 2
  %862 = sext i16 %861 to i32
  %863 = add nsw i32 %441, %862
  %864 = mul nsw i32 %863, %858
  %865 = ashr i32 %864, 1
  %866 = mul i32 %858, -21
  %867 = add i32 %865, %866
  %868 = icmp eq i32 %835, 2
  br i1 %868, label %869, label %873

869:                                              ; preds = %855
  %870 = shl i32 %858, 3
  %871 = ashr exact i32 %870, 2
  %872 = add nsw i32 %867, %871
  br label %873

873:                                              ; preds = %869, %855
  %874 = phi i32 [ %872, %869 ], [ %867, %855 ]
  %875 = add nsw i32 %874, %844
  %876 = shl i32 %858, 4
  %877 = icmp slt i32 %875, %876
  br i1 %877, label %878, label %881

878:                                              ; preds = %873
  %879 = ashr i32 %864, 2
  %880 = add nsw i32 %874, %879
  br label %887

881:                                              ; preds = %873
  %882 = mul i32 %858, 24
  %883 = icmp slt i32 %875, %882
  br i1 %883, label %884, label %887

884:                                              ; preds = %881
  %885 = ashr i32 %864, 3
  %886 = add nsw i32 %874, %885
  br label %887

887:                                              ; preds = %884, %881, %878
  %888 = phi i32 [ %880, %878 ], [ %886, %884 ], [ %874, %881 ]
  %889 = shl i32 %858, 2
  %890 = add i32 %889, %844
  %891 = add i32 %890, %888
  %892 = icmp sgt i32 %891, 0
  %893 = select i1 %892, i32 %891, i32 0
  %894 = getelementptr inbounds i32, i32* %11, i64 %817
  %895 = udiv i32 %893, %858
  %896 = lshr i32 %895, 3
  store i32 %896, i32* %894, align 4
  %897 = mul nsw i32 %896, %13
  %898 = load i32, i32* %821, align 4
  %899 = ashr i32 %898, 3
  %900 = icmp sgt i32 %897, %899
  br i1 %900, label %901, label %904

901:                                              ; preds = %887
  %902 = ashr i32 %898, %442
  %903 = ashr i32 %902, 3
  store i32 %903, i32* %894, align 4
  br label %904

904:                                              ; preds = %901, %887
  %905 = phi i32 [ %903, %901 ], [ %896, %887 ]
  %906 = icmp slt i32 %905, 8
  %907 = select i1 %906, i32 %905, i32 8
  store i32 %907, i32* %894, align 4
  %908 = shl i32 %858, 3
  %909 = mul nsw i32 %908, %907
  %910 = load i32, i32* %821, align 4
  %911 = add nsw i32 %910, %888
  %912 = icmp sge i32 %909, %911
  %913 = zext i1 %912 to i32
  %914 = getelementptr inbounds i32, i32* %12, i64 %817
  store i32 %913, i32* %914, align 4
  %915 = load i32, i32* %894, align 4
  %916 = mul i32 %915, %55
  %917 = load i32, i32* %821, align 4
  %918 = sub nsw i32 %917, %916
  store i32 %918, i32* %821, align 4
  br label %926

919:                                              ; preds = %825
  %920 = sub nsw i32 %836, %55
  %921 = icmp sgt i32 %920, 0
  %922 = select i1 %921, i32 %920, i32 0
  %923 = sub nsw i32 %836, %922
  store i32 %923, i32* %821, align 4
  %924 = getelementptr inbounds i32, i32* %11, i64 %817
  store i32 0, i32* %924, align 4
  %925 = getelementptr inbounds i32, i32* %12, i64 %817
  store i32 1, i32* %925, align 4
  br label %926

926:                                              ; preds = %919, %904
  %927 = phi i32 [ %843, %904 ], [ %922, %919 ]
  %928 = icmp eq i32 %927, 0
  br i1 %928, label %943, label %929

929:                                              ; preds = %926
  %930 = lshr i32 %927, %781
  %931 = getelementptr inbounds i32, i32* %11, i64 %817
  %932 = load i32, i32* %931, align 4
  %933 = sub nsw i32 8, %932
  %934 = icmp slt i32 %930, %933
  %935 = select i1 %934, i32 %930, i32 %933
  %936 = add nsw i32 %935, %932
  store i32 %936, i32* %931, align 4
  %937 = mul i32 %935, %55
  %938 = sub nsw i32 %927, %818
  %939 = icmp sge i32 %937, %938
  %940 = zext i1 %939 to i32
  %941 = getelementptr inbounds i32, i32* %12, i64 %817
  store i32 %940, i32* %941, align 4
  %942 = sub nsw i32 %927, %937
  br label %943

943:                                              ; preds = %929, %926
  %944 = phi i32 [ %942, %929 ], [ 0, %926 ]
  %945 = load i32, i32* %821, align 4
  %946 = icmp sgt i32 %945, -1
  br i1 %946, label %948, label %947

947:                                              ; preds = %943
  tail call void @celt_fatal(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0), i32 513) #5
  unreachable

948:                                              ; preds = %943
  %949 = getelementptr inbounds i32, i32* %11, i64 %817
  %950 = load i32, i32* %949, align 4
  %951 = icmp sgt i32 %950, -1
  br i1 %951, label %816, label %952

952:                                              ; preds = %948
  tail call void @celt_fatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0), i32 514) #5
  unreachable

953:                                              ; preds = %816
  %954 = trunc i64 %817 to i32
  store i32 %818, i32* %9, align 4
  %955 = icmp slt i32 %954, %2
  br i1 %955, label %956, label %1153

956:                                              ; preds = %953
  %957 = shl i64 %817, 32
  %958 = ashr exact i64 %957, 32
  br label %959

959:                                              ; preds = %970, %956
  %960 = phi i64 [ %958, %956 ], [ %975, %970 ]
  %961 = getelementptr inbounds i32, i32* %10, i64 %960
  %962 = load i32, i32* %961, align 4
  %963 = ashr i32 %962, %442
  %964 = ashr i32 %963, 3
  %965 = getelementptr inbounds i32, i32* %11, i64 %960
  store i32 %964, i32* %965, align 4
  %966 = mul i32 %964, %55
  %967 = load i32, i32* %961, align 4
  %968 = icmp eq i32 %966, %967
  br i1 %968, label %970, label %969

969:                                              ; preds = %959
  tail call void @celt_fatal(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0), i32 524) #5
  unreachable

970:                                              ; preds = %959
  store i32 0, i32* %961, align 4
  %971 = load i32, i32* %965, align 4
  %972 = icmp slt i32 %971, 1
  %973 = zext i1 %972 to i32
  %974 = getelementptr inbounds i32, i32* %12, i64 %960
  store i32 %973, i32* %974, align 4
  %975 = add nsw i64 %960, 1
  %976 = trunc i64 %975 to i32
  %977 = icmp eq i32 %976, %2
  br i1 %977, label %1153, label %959

978:                                              ; preds = %1003, %433
  %979 = phi i64 [ %402, %433 ], [ %982, %1003 ]
  %980 = phi i32 [ 0, %433 ], [ %1005, %1003 ]
  %981 = phi i32 [ 0, %433 ], [ %1006, %1003 ]
  %982 = add nsw i64 %979, -1
  %983 = getelementptr inbounds i32, i32* %46, i64 %982
  %984 = load i32, i32* %983, align 4
  %985 = getelementptr inbounds i32, i32* %48, i64 %982
  %986 = load i32, i32* %985, align 4
  %987 = mul nsw i32 %986, %436
  %988 = ashr i32 %987, 6
  %989 = add nsw i32 %988, %984
  %990 = getelementptr inbounds i32, i32* %50, i64 %982
  %991 = load i32, i32* %990, align 4
  %992 = icmp sge i32 %989, %991
  %993 = icmp ne i32 %980, 0
  %994 = or i1 %993, %992
  br i1 %994, label %998, label %995

995:                                              ; preds = %978
  %996 = icmp slt i32 %989, %55
  %997 = select i1 %996, i32 0, i32 %55
  br label %1003

998:                                              ; preds = %978
  %999 = getelementptr inbounds i32, i32* %4, i64 %982
  %1000 = load i32, i32* %999, align 4
  %1001 = icmp slt i32 %989, %1000
  %1002 = select i1 %1001, i32 %989, i32 %1000
  br label %1003

1003:                                             ; preds = %998, %995
  %1004 = phi i32 [ %1002, %998 ], [ %997, %995 ]
  %1005 = phi i32 [ 1, %998 ], [ 0, %995 ]
  %1006 = add nsw i32 %1004, %981
  %1007 = icmp sgt i64 %982, %403
  br i1 %1007, label %978, label %1008

1008:                                             ; preds = %1003
  %1009 = select i1 %434, i32 32, i32 64
  %1010 = icmp sgt i32 %1006, %43
  %1011 = select i1 %1010, i32 %435, i32 %436
  %1012 = select i1 %1010, i32 %436, i32 %1009
  %1013 = add nuw nsw i32 %1012, %1011
  %1014 = lshr exact i32 %1013, 1
  br label %1015

1015:                                             ; preds = %1040, %1008
  %1016 = phi i64 [ %402, %1008 ], [ %1019, %1040 ]
  %1017 = phi i32 [ 0, %1008 ], [ %1042, %1040 ]
  %1018 = phi i32 [ 0, %1008 ], [ %1043, %1040 ]
  %1019 = add nsw i64 %1016, -1
  %1020 = getelementptr inbounds i32, i32* %46, i64 %1019
  %1021 = load i32, i32* %1020, align 4
  %1022 = getelementptr inbounds i32, i32* %48, i64 %1019
  %1023 = load i32, i32* %1022, align 4
  %1024 = mul nsw i32 %1023, %1014
  %1025 = ashr i32 %1024, 6
  %1026 = add nsw i32 %1025, %1021
  %1027 = getelementptr inbounds i32, i32* %50, i64 %1019
  %1028 = load i32, i32* %1027, align 4
  %1029 = icmp sge i32 %1026, %1028
  %1030 = icmp ne i32 %1017, 0
  %1031 = or i1 %1030, %1029
  br i1 %1031, label %1035, label %1032

1032:                                             ; preds = %1015
  %1033 = icmp slt i32 %1026, %55
  %1034 = select i1 %1033, i32 0, i32 %55
  br label %1040

1035:                                             ; preds = %1015
  %1036 = getelementptr inbounds i32, i32* %4, i64 %1019
  %1037 = load i32, i32* %1036, align 4
  %1038 = icmp slt i32 %1026, %1037
  %1039 = select i1 %1038, i32 %1026, i32 %1037
  br label %1040

1040:                                             ; preds = %1035, %1032
  %1041 = phi i32 [ %1039, %1035 ], [ %1034, %1032 ]
  %1042 = phi i32 [ 1, %1035 ], [ 0, %1032 ]
  %1043 = add nsw i32 %1041, %1018
  %1044 = icmp sgt i64 %1019, %403
  br i1 %1044, label %1015, label %1045

1045:                                             ; preds = %1040
  %1046 = icmp sgt i32 %1043, %43
  %1047 = select i1 %1046, i32 %1011, i32 %1014
  %1048 = select i1 %1046, i32 %1014, i32 %1012
  %1049 = add nuw nsw i32 %1048, %1047
  %1050 = lshr exact i32 %1049, 1
  br label %1051

1051:                                             ; preds = %1076, %1045
  %1052 = phi i64 [ %402, %1045 ], [ %1055, %1076 ]
  %1053 = phi i32 [ 0, %1045 ], [ %1078, %1076 ]
  %1054 = phi i32 [ 0, %1045 ], [ %1079, %1076 ]
  %1055 = add nsw i64 %1052, -1
  %1056 = getelementptr inbounds i32, i32* %46, i64 %1055
  %1057 = load i32, i32* %1056, align 4
  %1058 = getelementptr inbounds i32, i32* %48, i64 %1055
  %1059 = load i32, i32* %1058, align 4
  %1060 = mul nsw i32 %1059, %1050
  %1061 = ashr i32 %1060, 6
  %1062 = add nsw i32 %1061, %1057
  %1063 = getelementptr inbounds i32, i32* %50, i64 %1055
  %1064 = load i32, i32* %1063, align 4
  %1065 = icmp sge i32 %1062, %1064
  %1066 = icmp ne i32 %1053, 0
  %1067 = or i1 %1066, %1065
  br i1 %1067, label %1071, label %1068

1068:                                             ; preds = %1051
  %1069 = icmp slt i32 %1062, %55
  %1070 = select i1 %1069, i32 0, i32 %55
  br label %1076

1071:                                             ; preds = %1051
  %1072 = getelementptr inbounds i32, i32* %4, i64 %1055
  %1073 = load i32, i32* %1072, align 4
  %1074 = icmp slt i32 %1062, %1073
  %1075 = select i1 %1074, i32 %1062, i32 %1073
  br label %1076

1076:                                             ; preds = %1071, %1068
  %1077 = phi i32 [ %1075, %1071 ], [ %1070, %1068 ]
  %1078 = phi i32 [ 1, %1071 ], [ 0, %1068 ]
  %1079 = add nsw i32 %1077, %1054
  %1080 = icmp sgt i64 %1055, %403
  br i1 %1080, label %1051, label %1081

1081:                                             ; preds = %1076
  %1082 = icmp sgt i32 %1079, %43
  %1083 = select i1 %1082, i32 %1047, i32 %1050
  %1084 = select i1 %1082, i32 %1050, i32 %1048
  %1085 = add nuw nsw i32 %1084, %1083
  %1086 = lshr i32 %1085, 1
  br label %1087

1087:                                             ; preds = %1112, %1081
  %1088 = phi i64 [ %402, %1081 ], [ %1091, %1112 ]
  %1089 = phi i32 [ 0, %1081 ], [ %1114, %1112 ]
  %1090 = phi i32 [ 0, %1081 ], [ %1115, %1112 ]
  %1091 = add nsw i64 %1088, -1
  %1092 = getelementptr inbounds i32, i32* %46, i64 %1091
  %1093 = load i32, i32* %1092, align 4
  %1094 = getelementptr inbounds i32, i32* %48, i64 %1091
  %1095 = load i32, i32* %1094, align 4
  %1096 = mul nsw i32 %1095, %1086
  %1097 = ashr i32 %1096, 6
  %1098 = add nsw i32 %1097, %1093
  %1099 = getelementptr inbounds i32, i32* %50, i64 %1091
  %1100 = load i32, i32* %1099, align 4
  %1101 = icmp sge i32 %1098, %1100
  %1102 = icmp ne i32 %1089, 0
  %1103 = or i1 %1102, %1101
  br i1 %1103, label %1107, label %1104

1104:                                             ; preds = %1087
  %1105 = icmp slt i32 %1098, %55
  %1106 = select i1 %1105, i32 0, i32 %55
  br label %1112

1107:                                             ; preds = %1087
  %1108 = getelementptr inbounds i32, i32* %4, i64 %1091
  %1109 = load i32, i32* %1108, align 4
  %1110 = icmp slt i32 %1098, %1109
  %1111 = select i1 %1110, i32 %1098, i32 %1109
  br label %1112

1112:                                             ; preds = %1107, %1104
  %1113 = phi i32 [ %1111, %1107 ], [ %1106, %1104 ]
  %1114 = phi i32 [ 1, %1107 ], [ 0, %1104 ]
  %1115 = add nsw i32 %1113, %1090
  %1116 = icmp sgt i64 %1091, %403
  br i1 %1116, label %1087, label %1117

1117:                                             ; preds = %1112
  %1118 = icmp sgt i32 %1115, %43
  %1119 = select i1 %1118, i32 %1083, i32 %1086
  %1120 = select i1 %1118, i32 %1086, i32 %1084
  %1121 = add nuw nsw i32 %1120, %1119
  %1122 = lshr i32 %1121, 1
  br label %1123

1123:                                             ; preds = %1148, %1117
  %1124 = phi i64 [ %402, %1117 ], [ %1127, %1148 ]
  %1125 = phi i32 [ 0, %1117 ], [ %1150, %1148 ]
  %1126 = phi i32 [ 0, %1117 ], [ %1151, %1148 ]
  %1127 = add nsw i64 %1124, -1
  %1128 = getelementptr inbounds i32, i32* %46, i64 %1127
  %1129 = load i32, i32* %1128, align 4
  %1130 = getelementptr inbounds i32, i32* %48, i64 %1127
  %1131 = load i32, i32* %1130, align 4
  %1132 = mul nsw i32 %1131, %1122
  %1133 = ashr i32 %1132, 6
  %1134 = add nsw i32 %1133, %1129
  %1135 = getelementptr inbounds i32, i32* %50, i64 %1127
  %1136 = load i32, i32* %1135, align 4
  %1137 = icmp sge i32 %1134, %1136
  %1138 = icmp ne i32 %1125, 0
  %1139 = or i1 %1138, %1137
  br i1 %1139, label %1143, label %1140

1140:                                             ; preds = %1123
  %1141 = icmp slt i32 %1134, %55
  %1142 = select i1 %1141, i32 0, i32 %55
  br label %1148

1143:                                             ; preds = %1123
  %1144 = getelementptr inbounds i32, i32* %4, i64 %1127
  %1145 = load i32, i32* %1144, align 4
  %1146 = icmp slt i32 %1134, %1145
  %1147 = select i1 %1146, i32 %1134, i32 %1145
  br label %1148

1148:                                             ; preds = %1143, %1140
  %1149 = phi i32 [ %1147, %1143 ], [ %1142, %1140 ]
  %1150 = phi i32 [ 1, %1143 ], [ 0, %1140 ]
  %1151 = add nsw i32 %1149, %1126
  %1152 = icmp sgt i64 %1127, %403
  br i1 %1152, label %1123, label %437

1153:                                             ; preds = %970, %953
  ret i32 %640
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @ec_enc_bit_logp(%struct.ec_ctx*, i32, i32) local_unnamed_addr #2

declare i32 @ec_dec_bit_logp(%struct.ec_ctx*, i32) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #3

declare void @ec_enc_uint(%struct.ec_ctx*, i32, i32) local_unnamed_addr #2

declare i32 @ec_dec_uint(%struct.ec_ctx*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
