; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_quant_weights.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_quant_weights.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.16" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon, %"struct.jxl::DctQuantWeightParams", %union.anon.15 }>
%union.anon = type { %"struct.std::__1::array.8", [4 x i8] }
%"struct.std::__1::array.8" = type { [3 x %"struct.std::__1::array.9"] }
%"struct.std::__1::array.9" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array", [4 x i8] }>
%"struct.std::__1::array" = type { [3 x %"struct.std::__1::array.1"] }
%"struct.std::__1::array.1" = type { [17 x float] }
%union.anon.15 = type { i8 }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.jxl::QuantEncoding"* }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr.21" }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { i8* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array.25", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.26", %"struct.std::__1::array.26", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.34" }
%"struct.std::__1::array.25" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.26" = type { [8 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.29 }
%union.anon.29 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr.21" }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.34" = type { %"class.std::__1::__function::__policy_func.38" }
%"class.std::__1::__function::__policy_func.38" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.39", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.39" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.138", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.40" }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.42" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.47", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.49" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.54", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.131", i64 }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.57", %"class.std::__1::vector.70", %"class.std::__1::vector.57", %"class.std::__1::vector.77", %"class.std::__1::vector.85", %"class.std::__1::vector.94", %"class.std::__1::vector.108", %"class.std::__1::vector.59", %"class.std::__1::vector.57", %"class.std::__1::vector.59", i32, i8, %"class.std::__1::vector.59" }
%"class.std::__1::vector.70" = type { %"class.std::__1::__vector_base.71" }
%"class.std::__1::__vector_base.71" = type { i32*, i32*, %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { i32* }
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.80" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.79", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.79" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.85" = type { %"class.std::__1::__vector_base.86" }
%"class.std::__1::__vector_base.86" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.89" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.87", %"struct.std::__1::array.88", i32, i8, [3 x i8] }>
%"struct.std::__1::array.87" = type { [17 x i32] }
%"struct.std::__1::array.88" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.94" = type { %"class.std::__1::__vector_base.95" }
%"class.std::__1::__vector_base.95" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.103" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.96" }
%"class.std::__1::vector.96" = type { %"class.std::__1::__vector_base.97" }
%"class.std::__1::__vector_base.97" = type { i16*, i16*, %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { i16* }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.108" = type { %"class.std::__1::__vector_base.109" }
%"class.std::__1::__vector_base.109" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.125" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.110", i32, %"class.std::__1::vector.111", %"class.std::__1::vector.118" }
%"struct.std::__1::array.110" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.111" = type { %"class.std::__1::__vector_base.112" }
%"class.std::__1::__vector_base.112" = type { i32*, i32*, %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { i32* }
%"class.std::__1::vector.118" = type { %"class.std::__1::__vector_base.119" }
%"class.std::__1::__vector_base.119" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.120" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { %"class.std::__1::vector.59"*, %"class.std::__1::vector.59"*, %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.std::__1::vector.59"* }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { i8*, i8*, %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::vector.131" = type { %"class.std::__1::__vector_base.132" }
%"class.std::__1::__vector_base.132" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.138" = type { %"class.std::__1::__vector_base.139" }
%"class.std::__1::__vector_base.139" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.140" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.141" }
%"struct.std::__1::__compressed_pair_elem.141" = type { %"class.jxl::ImageBundle"* }
%"class.jxl::ModularFrameEncoder" = type { %"class.std::__1::vector.145", %"class.std::__1::vector.59", %"class.std::__1::vector.152", %"class.std::__1::vector.181", %"class.std::__1::vector.188", %"class.std::__1::vector.195", %"class.std::__1::vector.203", %"class.std::__1::vector.195", %"struct.jxl::EntropyEncodingData", %"class.std::__1::vector.59", %"struct.jxl::FrameDimensions", %"struct.jxl::CompressParams", float, float, %"class.std::__1::vector.145", %"class.std::__1::vector.225", %"class.std::__1::vector.234", %"class.std::__1::vector.145" }
%"class.std::__1::vector.152" = type { %"class.std::__1::__vector_base.153" }
%"class.std::__1::__vector_base.153" = type { %"class.jxl::Image"*, %"class.jxl::Image"*, %"class.std::__1::__compressed_pair.176" }
%"class.jxl::Image" = type <{ %"class.std::__1::vector.154", %"class.std::__1::vector.162", i64, i64, i32, i32, i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.154" = type { %"class.std::__1::__vector_base.155" }
%"class.std::__1::__vector_base.155" = type { %"class.jxl::Channel"*, %"class.jxl::Channel"*, %"class.std::__1::__compressed_pair.157" }
%"class.jxl::Channel" = type { %"class.jxl::Plane.156", i64, i64, i32, i32, i32, i32 }
%"class.jxl::Plane.156" = type { %"struct.jxl::PlaneBase" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.jxl::Channel"* }
%"class.std::__1::vector.162" = type { %"class.std::__1::__vector_base.163" }
%"class.std::__1::__vector_base.163" = type { %"class.jxl::Transform"*, %"class.jxl::Transform"*, %"class.std::__1::__compressed_pair.171" }
%"class.jxl::Transform" = type <{ %"class.jxl::Fields", i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.164", i32, i32, i8, i8, [6 x i8] }>
%"class.std::__1::vector.164" = type { %"class.std::__1::__vector_base.165" }
%"class.std::__1::__vector_base.165" = type { %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"*, %"class.std::__1::__compressed_pair.166" }
%"struct.jxl::SqueezeParams" = type <{ %"class.jxl::Fields", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"struct.jxl::SqueezeParams"* }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.jxl::Transform"* }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.jxl::Image"* }
%"class.std::__1::vector.181" = type { %"class.std::__1::__vector_base.182" }
%"class.std::__1::__vector_base.182" = type { %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"*, %"class.std::__1::__compressed_pair.183" }
%"struct.jxl::ModularOptions" = type <{ i64, float, i32, %"class.std::__1::vector.111", float, [4 x i8], i64, i32, i32, float, i32, i8, [3 x i8], i32, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"struct.jxl::ModularOptions"* }
%"class.std::__1::vector.188" = type { %"class.std::__1::__vector_base.189" }
%"class.std::__1::__vector_base.189" = type { %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*, %"class.std::__1::__compressed_pair.190" }
%"struct.jxl::PropertyDecisionNode" = type <{ i32, i16, [2 x i8], i32, i32, i32, [4 x i8], i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"struct.jxl::PropertyDecisionNode"* }
%"class.std::__1::vector.203" = type { %"class.std::__1::__vector_base.204" }
%"class.std::__1::__vector_base.204" = type { %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"*, %"class.std::__1::__compressed_pair.205" }
%"struct.jxl::GroupHeader" = type { %"class.jxl::Fields", i8, %"struct.jxl::weighted::Header", %"class.std::__1::vector.162" }
%"struct.jxl::weighted::Header" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32, i32, i32, [4 x i32] }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206" }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"struct.jxl::GroupHeader"* }
%"class.std::__1::vector.195" = type { %"class.std::__1::__vector_base.196" }
%"class.std::__1::__vector_base.196" = type { %"class.std::__1::vector.197"*, %"class.std::__1::vector.197"*, %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::vector.197" = type opaque
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.std::__1::vector.197"* }
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.210", i8, %"class.std::__1::vector.218", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.210" = type { %"class.std::__1::__vector_base.211" }
%"class.std::__1::__vector_base.211" = type { %"class.std::__1::vector.212"*, %"class.std::__1::vector.212"*, %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::vector.212" = type opaque
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.std::__1::vector.212"* }
%"class.std::__1::vector.218" = type { %"class.std::__1::__vector_base.219" }
%"class.std::__1::__vector_base.219" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.220" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"struct.jxl::CompressParams" = type { float, i64, float, float, float, i8, [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i64, float, %"class.jxl::Plane"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair", i32, float, float, i32, i32, i8, i8, i64, i64 }
%"struct.jxl::ButteraugliParams" = type <{ float, float, float, i8, [3 x i8] }>
%"struct.std::__1::pair" = type { float, float }
%"class.std::__1::vector.225" = type { %"class.std::__1::__vector_base.226" }
%"class.std::__1::__vector_base.226" = type { %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"*, %"class.std::__1::__compressed_pair.229" }
%"struct.jxl::ModularMultiplierInfo" = type { %"struct.std::__1::array.227", i32 }
%"struct.std::__1::array.227" = type { [2 x %"struct.std::__1::array.228"] }
%"struct.std::__1::array.228" = type { [2 x i32] }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"struct.jxl::ModularMultiplierInfo"* }
%"class.std::__1::vector.234" = type { %"class.std::__1::__vector_base.235" }
%"class.std::__1::__vector_base.235" = type { %"class.std::__1::vector.111"*, %"class.std::__1::vector.111"*, %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.std::__1::vector.111"* }
%"class.std::__1::vector.145" = type { %"class.std::__1::__vector_base.146" }
%"class.std::__1::__vector_base.146" = type { i64*, i64*, %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { i64* }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"class.jxl::ModularFrameDecoder" = type { %"class.jxl::Image", %"struct.jxl::FrameDimensions", i8, i8, %"class.std::__1::vector.188", %"struct.jxl::ANSCode", %"class.std::__1::vector.59", %"struct.jxl::GroupHeader" }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr.21", %"class.std::__1::vector.241", %"class.std::__1::vector.218", %"class.std::__1::vector.10", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::vector.241" = type { %"class.std::__1::__vector_base.242" }
%"class.std::__1::__vector_base.242" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.250" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.243" }
%"class.std::__1::vector.243" = type { %"class.std::__1::__vector_base.244" }
%"class.std::__1::__vector_base.244" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.245" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246" }
%"struct.std::__1::__compressed_pair_elem.246" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.250" = type { %"struct.std::__1::__compressed_pair_elem.251" }
%"struct.std::__1::__compressed_pair_elem.251" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { i32*, i32*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_m = comdat any

$_ZN3jxl13QuantEncodingaSERKS0_ = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

@_ZN3jxl15DequantMatrices15required_size_xE.const = private unnamed_addr constant [17 x i64] [i64 1, i64 1, i64 1, i64 1, i64 2, i64 4, i64 1, i64 1, i64 2, i64 1, i64 1, i64 8, i64 4, i64 16, i64 8, i64 32, i64 16], align 16
@_ZN3jxl15DequantMatrices15required_size_yE.const = private unnamed_addr constant [17 x i64] [i64 1, i64 1, i64 1, i64 1, i64 2, i64 4, i64 2, i64 4, i64 4, i64 1, i64 1, i64 8, i64 8, i64 16, i64 16, i64 32, i64 32], align 16
@.str.1 = private unnamed_addr constant [58 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_quant_weights.cc\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [55 x i8] c"DequantMatricesEncodeDC(matrices, &writer, 0, nullptr)\00", align 1
@.str.6 = private unnamed_addr constant [24 x i8] c"matrices->DecodeDC(&br)\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"br.Close()\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [42 x i8] c"encodings.size() == DequantMatrices::kNum\00", align 1
@.str.10 = private unnamed_addr constant [53 x i8] c"DequantMatricesEncode(matrices, &writer, 0, nullptr)\00", align 1
@.str.11 = private unnamed_addr constant [22 x i8] c"matrices->Decode(&br)\00", align 1
@.str.19 = private unnamed_addr constant [31 x i8] c"params.num_distance_bands >= 1\00", align 1
@.str.21 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_bit_writer.h\00", align 1
@.str.22 = private unnamed_addr constant [34 x i8] c"bits_written_ % kBitsPerByte == 0\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl21DequantMatricesEncodeEPKNS_15DequantMatricesEPNS_9BitWriterEmPNS_6AuxOutEPNS_19ModularFrameEncoderE(%"class.jxl::DequantMatrices"* nocapture readonly, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*, %"class.jxl::ModularFrameEncoder"*) local_unnamed_addr #0 {
  %6 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %7 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 6
  %8 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 6, i32 0, i32 1
  %9 = bitcast %"class.jxl::QuantEncoding"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %10, %12
  %14 = inttoptr i64 %12 to %"class.jxl::QuantEncoding"*
  br i1 %13, label %18, label %15

15:                                               ; preds = %5
  %16 = sub i64 %10, %12
  %17 = sdiv exact i64 %16, 560
  br label %28

18:                                               ; preds = %39, %5
  %19 = phi i8 [ 1, %5 ], [ %40, %39 ]
  %20 = bitcast %"class.jxl::BitWriter::Allotment"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %20) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 40, i1 false)
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %6, %"struct.jxl::BitWriter"* %1, i64 524288) #8
  %21 = and i8 %19, 1
  %22 = icmp eq i8 %21, 0
  %23 = zext i8 %21 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 1, i64 %23) #8
  br i1 %22, label %24, label %287

24:                                               ; preds = %18
  %25 = load i64, i64* %9, align 8
  %26 = load i64, i64* %11, align 8
  %27 = icmp eq i64 %25, %26
  br i1 %27, label %287, label %43

28:                                               ; preds = %15, %39
  %29 = phi i8 [ 1, %15 ], [ %40, %39 ]
  %30 = phi i64 [ 0, %15 ], [ %41, %39 ]
  %31 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %14, i64 %30, i32 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %14, i64 %30, i32 0, i32 5, i32 0
  %36 = load i8, i8* %35, align 8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %39, label %38

38:                                               ; preds = %34, %28
  br label %39

39:                                               ; preds = %34, %38
  %40 = phi i8 [ 0, %38 ], [ %29, %34 ]
  %41 = add nuw i64 %30, 1
  %42 = icmp ult i64 %41, %17
  br i1 %42, label %28, label %18

43:                                               ; preds = %24, %280
  %44 = phi i64 [ %283, %280 ], [ %26, %24 ]
  %45 = phi i64 [ %281, %280 ], [ 0, %24 ]
  %46 = inttoptr i64 %44 to %"class.jxl::QuantEncoding"*
  %47 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45
  %48 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices15required_size_xE.const, i64 0, i64 %45
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices15required_size_yE.const, i64 0, i64 %45
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %47, i64 0, i32 0, i32 0
  %53 = load i32, i32* %52, align 8
  %54 = zext i32 %53 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 3, i64 %54) #8
  %55 = load i32, i32* %52, align 8
  switch i32 %55, label %280 [
    i32 0, label %81
    i32 1, label %75
    i32 2, label %69
    i32 4, label %64
    i32 3, label %59
    i32 6, label %107
    i32 7, label %111
    i32 5, label %56
  ]

56:                                               ; preds = %43
  %57 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 2
  %58 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 4
  br label %116

59:                                               ; preds = %43
  %60 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 0
  %61 = load float, float* %60, align 4
  %62 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %61, %"struct.jxl::BitWriter"* %1) #8
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %102, label %288

64:                                               ; preds = %43
  %65 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 0
  %66 = load float, float* %65, align 4
  %67 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %66, %"struct.jxl::BitWriter"* %1) #8
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %97, label %288

69:                                               ; preds = %43
  %70 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 0
  %71 = load float, float* %70, align 4
  %72 = fmul float %71, 1.562500e-02
  %73 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %72, %"struct.jxl::BitWriter"* %1) #8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %91, label %288

75:                                               ; preds = %43
  %76 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 0
  %77 = load float, float* %76, align 4
  %78 = fmul float %77, 1.562500e-02
  %79 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %78, %"struct.jxl::BitWriter"* %1) #8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %85, label %288

81:                                               ; preds = %43
  %82 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 5, i32 0
  %83 = load i8, i8* %82, align 8
  %84 = zext i8 %83 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 0, i64 %84) #8
  br label %280

85:                                               ; preds = %75
  %86 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 1
  %87 = load float, float* %86, align 4
  %88 = fmul float %87, 1.562500e-02
  %89 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %88, %"struct.jxl::BitWriter"* %1) #8
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %133, label %288

91:                                               ; preds = %69
  %92 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 1
  %93 = load float, float* %92, align 4
  %94 = fmul float %93, 1.562500e-02
  %95 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %94, %"struct.jxl::BitWriter"* %1) #8
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %175, label %288

97:                                               ; preds = %64
  %98 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 1
  %99 = load float, float* %98, align 4
  %100 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %99, %"struct.jxl::BitWriter"* %1) #8
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %205, label %288

102:                                              ; preds = %59
  %103 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 1
  %104 = load float, float* %103, align 4
  %105 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %104, %"struct.jxl::BitWriter"* %1) #8
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %214, label %288

107:                                              ; preds = %43
  %108 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 2
  %109 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115EncodeDctParamsERKNS_20DctQuantWeightParamsEPNS_9BitWriterE(%"struct.jxl::DctQuantWeightParams"* dereferenceable(216) %108, %"struct.jxl::BitWriter"* %1) #8
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %280, label %288

111:                                              ; preds = %43
  %112 = shl i64 %51, 3
  %113 = shl i64 %49, 3
  call void @_ZN3jxl19ModularFrameEncoder16EncodeQuantTableEmmPNS_9BitWriterERKNS_13QuantEncodingEmPS0_(i64 %113, i64 %112, %"struct.jxl::BitWriter"* %1, %"class.jxl::QuantEncoding"* dereferenceable(560) %47, i64 %45, %"class.jxl::ModularFrameEncoder"* %4) #8
  br label %280

114:                                              ; preds = %129
  %115 = icmp eq i64 %132, 3
  br i1 %115, label %280, label %116

116:                                              ; preds = %114, %56
  %117 = phi i64 [ 0, %56 ], [ %132, %114 ]
  %118 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 %117, i32 0, i64 0
  %119 = load float, float* %118, align 4
  %120 = fmul float %119, 1.562500e-02
  %121 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %120, %"struct.jxl::BitWriter"* %1) #8
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %288

123:                                              ; preds = %116
  %124 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 %117, i32 0, i64 1
  %125 = load float, float* %124, align 4
  %126 = fmul float %125, 1.562500e-02
  %127 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %126, %"struct.jxl::BitWriter"* %1) #8
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %238, label %288

129:                                              ; preds = %277
  %130 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115EncodeDctParamsERKNS_20DctQuantWeightParamsEPNS_9BitWriterE(%"struct.jxl::DctQuantWeightParams"* dereferenceable(216) %58, %"struct.jxl::BitWriter"* %1) #8
  %131 = icmp eq i32 %130, 0
  %132 = add nuw nsw i64 %117, 1
  br i1 %131, label %114, label %288

133:                                              ; preds = %85
  %134 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %135 = load float, float* %134, align 4
  %136 = fmul float %135, 1.562500e-02
  %137 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %136, %"struct.jxl::BitWriter"* %1) #8
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %288

139:                                              ; preds = %133
  %140 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 3
  %141 = load float, float* %140, align 4
  %142 = fmul float %141, 1.562500e-02
  %143 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %142, %"struct.jxl::BitWriter"* %1) #8
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %288

145:                                              ; preds = %139
  %146 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 4
  %147 = load float, float* %146, align 4
  %148 = fmul float %147, 1.562500e-02
  %149 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %148, %"struct.jxl::BitWriter"* %1) #8
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %288

151:                                              ; preds = %145
  %152 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 5
  %153 = load float, float* %152, align 4
  %154 = fmul float %153, 1.562500e-02
  %155 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %154, %"struct.jxl::BitWriter"* %1) #8
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %288

157:                                              ; preds = %151
  %158 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 6
  %159 = load float, float* %158, align 4
  %160 = fmul float %159, 1.562500e-02
  %161 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %160, %"struct.jxl::BitWriter"* %1) #8
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %288

163:                                              ; preds = %157
  %164 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 7
  %165 = load float, float* %164, align 4
  %166 = fmul float %165, 1.562500e-02
  %167 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %166, %"struct.jxl::BitWriter"* %1) #8
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %288

169:                                              ; preds = %163
  %170 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 8
  %171 = load float, float* %170, align 4
  %172 = fmul float %171, 1.562500e-02
  %173 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %172, %"struct.jxl::BitWriter"* %1) #8
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %280, label %288

175:                                              ; preds = %91
  %176 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %177 = load float, float* %176, align 4
  %178 = fmul float %177, 1.562500e-02
  %179 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %178, %"struct.jxl::BitWriter"* %1) #8
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %288

181:                                              ; preds = %175
  %182 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 3
  %183 = load float, float* %182, align 4
  %184 = fmul float %183, 1.562500e-02
  %185 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %184, %"struct.jxl::BitWriter"* %1) #8
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %288

187:                                              ; preds = %181
  %188 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 4
  %189 = load float, float* %188, align 4
  %190 = fmul float %189, 1.562500e-02
  %191 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %190, %"struct.jxl::BitWriter"* %1) #8
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %288

193:                                              ; preds = %187
  %194 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 5
  %195 = load float, float* %194, align 4
  %196 = fmul float %195, 1.562500e-02
  %197 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %196, %"struct.jxl::BitWriter"* %1) #8
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %288

199:                                              ; preds = %193
  %200 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 6
  %201 = load float, float* %200, align 4
  %202 = fmul float %201, 1.562500e-02
  %203 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %202, %"struct.jxl::BitWriter"* %1) #8
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %290, label %288

205:                                              ; preds = %97
  %206 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %207 = load float, float* %206, align 4
  %208 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %207, %"struct.jxl::BitWriter"* %1) #8
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %288

210:                                              ; preds = %205
  %211 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 2
  %212 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115EncodeDctParamsERKNS_20DctQuantWeightParamsEPNS_9BitWriterE(%"struct.jxl::DctQuantWeightParams"* dereferenceable(216) %211, %"struct.jxl::BitWriter"* %1) #8
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %280, label %288

214:                                              ; preds = %102
  %215 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %216 = load float, float* %215, align 4
  %217 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %216, %"struct.jxl::BitWriter"* %1) #8
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %288

219:                                              ; preds = %214
  %220 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 3
  %221 = load float, float* %220, align 4
  %222 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %221, %"struct.jxl::BitWriter"* %1) #8
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %224, label %288

224:                                              ; preds = %219
  %225 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 4
  %226 = load float, float* %225, align 4
  %227 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %226, %"struct.jxl::BitWriter"* %1) #8
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %229, label %288

229:                                              ; preds = %224
  %230 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 5
  %231 = load float, float* %230, align 4
  %232 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %231, %"struct.jxl::BitWriter"* %1) #8
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %234, label %288

234:                                              ; preds = %229
  %235 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 2
  %236 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115EncodeDctParamsERKNS_20DctQuantWeightParamsEPNS_9BitWriterE(%"struct.jxl::DctQuantWeightParams"* dereferenceable(216) %235, %"struct.jxl::BitWriter"* %1) #8
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %280, label %288

238:                                              ; preds = %123
  %239 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 %117, i32 0, i64 2
  %240 = load float, float* %239, align 4
  %241 = fmul float %240, 1.562500e-02
  %242 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %241, %"struct.jxl::BitWriter"* %1) #8
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %244, label %288

244:                                              ; preds = %238
  %245 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 %117, i32 0, i64 3
  %246 = load float, float* %245, align 4
  %247 = fmul float %246, 1.562500e-02
  %248 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %247, %"struct.jxl::BitWriter"* %1) #8
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %250, label %288

250:                                              ; preds = %244
  %251 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 %117, i32 0, i64 4
  %252 = load float, float* %251, align 4
  %253 = fmul float %252, 1.562500e-02
  %254 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %253, %"struct.jxl::BitWriter"* %1) #8
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %256, label %288

256:                                              ; preds = %250
  %257 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 %117, i32 0, i64 5
  %258 = load float, float* %257, align 4
  %259 = fmul float %258, 1.562500e-02
  %260 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %259, %"struct.jxl::BitWriter"* %1) #8
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %262, label %288

262:                                              ; preds = %256
  %263 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 %117, i32 0, i64 6
  %264 = load float, float* %263, align 4
  %265 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %264, %"struct.jxl::BitWriter"* %1) #8
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %288

267:                                              ; preds = %262
  %268 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 %117, i32 0, i64 7
  %269 = load float, float* %268, align 4
  %270 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %269, %"struct.jxl::BitWriter"* %1) #8
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %272, label %288

272:                                              ; preds = %267
  %273 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 %117, i32 0, i64 8
  %274 = load float, float* %273, align 4
  %275 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %274, %"struct.jxl::BitWriter"* %1) #8
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %277, label %288

277:                                              ; preds = %272
  %278 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_115EncodeDctParamsERKNS_20DctQuantWeightParamsEPNS_9BitWriterE(%"struct.jxl::DctQuantWeightParams"* dereferenceable(216) %57, %"struct.jxl::BitWriter"* %1) #8
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %129, label %288

280:                                              ; preds = %114, %350, %234, %210, %169, %111, %107, %81, %43
  %281 = add nuw i64 %45, 1
  %282 = load i64, i64* %9, align 8
  %283 = load i64, i64* %11, align 8
  %284 = sub i64 %282, %283
  %285 = sdiv exact i64 %284, 560
  %286 = icmp ult i64 %281, %285
  br i1 %286, label %43, label %287

287:                                              ; preds = %280, %24, %18
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %1, %"class.jxl::BitWriter::Allotment"* nonnull %6, i64 %2, %"struct.jxl::AuxOut"* %3) #8
  br label %288

288:                                              ; preds = %229, %224, %219, %214, %102, %59, %205, %97, %64, %169, %163, %157, %151, %145, %139, %133, %85, %75, %107, %234, %210, %69, %91, %175, %181, %187, %193, %199, %290, %296, %302, %308, %314, %320, %326, %332, %338, %344, %350, %116, %123, %238, %244, %250, %256, %262, %267, %272, %129, %277, %287
  %289 = phi i32 [ 0, %287 ], [ %278, %277 ], [ %130, %129 ], [ %275, %272 ], [ %270, %267 ], [ %265, %262 ], [ %260, %256 ], [ %254, %250 ], [ %248, %244 ], [ %242, %238 ], [ %127, %123 ], [ %121, %116 ], [ %212, %210 ], [ %236, %234 ], [ %109, %107 ], [ %79, %75 ], [ %89, %85 ], [ %137, %133 ], [ %143, %139 ], [ %149, %145 ], [ %155, %151 ], [ %161, %157 ], [ %167, %163 ], [ %173, %169 ], [ %67, %64 ], [ %100, %97 ], [ %208, %205 ], [ %62, %59 ], [ %105, %102 ], [ %217, %214 ], [ %222, %219 ], [ %227, %224 ], [ %232, %229 ], [ %354, %350 ], [ %348, %344 ], [ %342, %338 ], [ %336, %332 ], [ %330, %326 ], [ %324, %320 ], [ %318, %314 ], [ %312, %308 ], [ %306, %302 ], [ %300, %296 ], [ %294, %290 ], [ %203, %199 ], [ %197, %193 ], [ %191, %187 ], [ %185, %181 ], [ %179, %175 ], [ %95, %91 ], [ %73, %69 ]
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %20) #8
  ret i32 %289

290:                                              ; preds = %199
  %291 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 7
  %292 = load float, float* %291, align 4
  %293 = fmul float %292, 1.562500e-02
  %294 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %293, %"struct.jxl::BitWriter"* %1) #8
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %288

296:                                              ; preds = %290
  %297 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 8
  %298 = load float, float* %297, align 4
  %299 = fmul float %298, 1.562500e-02
  %300 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %299, %"struct.jxl::BitWriter"* %1) #8
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %302, label %288

302:                                              ; preds = %296
  %303 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 0
  %304 = load float, float* %303, align 4
  %305 = fmul float %304, 1.562500e-02
  %306 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %305, %"struct.jxl::BitWriter"* %1) #8
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %308, label %288

308:                                              ; preds = %302
  %309 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 1
  %310 = load float, float* %309, align 4
  %311 = fmul float %310, 1.562500e-02
  %312 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %311, %"struct.jxl::BitWriter"* %1) #8
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %288

314:                                              ; preds = %308
  %315 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 2
  %316 = load float, float* %315, align 4
  %317 = fmul float %316, 1.562500e-02
  %318 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %317, %"struct.jxl::BitWriter"* %1) #8
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %320, label %288

320:                                              ; preds = %314
  %321 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 3
  %322 = load float, float* %321, align 4
  %323 = fmul float %322, 1.562500e-02
  %324 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %323, %"struct.jxl::BitWriter"* %1) #8
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %326, label %288

326:                                              ; preds = %320
  %327 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 4
  %328 = load float, float* %327, align 4
  %329 = fmul float %328, 1.562500e-02
  %330 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %329, %"struct.jxl::BitWriter"* %1) #8
  %331 = icmp eq i32 %330, 0
  br i1 %331, label %332, label %288

332:                                              ; preds = %326
  %333 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 5
  %334 = load float, float* %333, align 4
  %335 = fmul float %334, 1.562500e-02
  %336 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %335, %"struct.jxl::BitWriter"* %1) #8
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %338, label %288

338:                                              ; preds = %332
  %339 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 6
  %340 = load float, float* %339, align 4
  %341 = fmul float %340, 1.562500e-02
  %342 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %341, %"struct.jxl::BitWriter"* %1) #8
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %344, label %288

344:                                              ; preds = %338
  %345 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 7
  %346 = load float, float* %345, align 4
  %347 = fmul float %346, 1.562500e-02
  %348 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %347, %"struct.jxl::BitWriter"* %1) #8
  %349 = icmp eq i32 %348, 0
  br i1 %349, label %350, label %288

350:                                              ; preds = %344
  %351 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 %45, i32 0, i32 3, i32 0, i32 0, i64 1, i32 0, i64 8
  %352 = load float, float* %351, align 4
  %353 = fmul float %352, 1.562500e-02
  %354 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %353, %"struct.jxl::BitWriter"* %1) #8
  %355 = icmp eq i32 %354, 0
  br i1 %355, label %280, label %288
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"*, %"struct.jxl::BitWriter"*, i64) unnamed_addr #2

declare void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"*, i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"*, %"class.jxl::BitWriter::Allotment"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl23DequantMatricesEncodeDCEPKNS_15DequantMatricesEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::DequantMatrices"* nocapture readonly, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 {
  %5 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %6 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 0
  %7 = load float, float* %6, align 4
  %8 = fcmp oeq float %7, 0x3F30000000000000
  %9 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 1
  %10 = load float, float* %9, align 4
  %11 = fcmp oeq float %10, 0x3F60000000000000
  %12 = and i1 %8, %11
  %13 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 2
  %14 = load float, float* %13, align 4
  %15 = fcmp oeq float %14, 3.906250e-03
  %16 = and i1 %12, %15
  %17 = bitcast %"class.jxl::BitWriter::Allotment"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %17) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 40, i1 false)
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %5, %"struct.jxl::BitWriter"* %1, i64 97) #8
  %18 = zext i1 %16 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 1, i64 %18) #8
  br i1 %16, label %29, label %19

19:                                               ; preds = %4
  %20 = load float, float* %6, align 4
  %21 = fmul float %20, 1.280000e+02
  %22 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %21, %"struct.jxl::BitWriter"* %1) #8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %30

24:                                               ; preds = %19
  %25 = load float, float* %9, align 4
  %26 = fmul float %25, 1.280000e+02
  %27 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %26, %"struct.jxl::BitWriter"* %1) #8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %32, label %30

29:                                               ; preds = %32, %4
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %1, %"class.jxl::BitWriter::Allotment"* nonnull %5, i64 %2, %"struct.jxl::AuxOut"* %3) #8
  br label %30

30:                                               ; preds = %19, %24, %32, %29
  %31 = phi i32 [ 0, %29 ], [ %22, %19 ], [ %27, %24 ], [ %35, %32 ]
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %17) #8
  ret i32 %31

32:                                               ; preds = %24
  %33 = load float, float* %13, align 4
  %34 = fmul float %33, 1.280000e+02
  %35 = call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %34, %"struct.jxl::BitWriter"* %1) #8
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %29, label %30
}

declare i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float, %"struct.jxl::BitWriter"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl26DequantMatricesSetCustomDCEPNS_15DequantMatricesEPKf(%"class.jxl::DequantMatrices"*, float* nocapture readonly) local_unnamed_addr #0 {
  %3 = alloca %"struct.jxl::BitWriter", align 8
  %4 = alloca %"class.jxl::BitReader", align 8
  %5 = load float, float* %1, align 4
  %6 = fdiv float 1.000000e+00, %5
  %7 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 0
  store float %6, float* %7, align 4
  %8 = bitcast float* %1 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 0
  %11 = bitcast float* %10 to i32*
  store i32 %9, i32* %11, align 4
  %12 = getelementptr inbounds float, float* %1, i64 1
  %13 = load float, float* %12, align 4
  %14 = fdiv float 1.000000e+00, %13
  %15 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 1
  store float %14, float* %15, align 4
  %16 = bitcast float* %12 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 1
  %19 = bitcast float* %18 to i32*
  store i32 %17, i32* %19, align 4
  %20 = getelementptr inbounds float, float* %1, i64 2
  %21 = load float, float* %20, align 4
  %22 = fdiv float 1.000000e+00, %21
  %23 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 2
  store float %22, float* %23, align 4
  %24 = bitcast float* %20 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 2
  %27 = bitcast float* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = bitcast %"struct.jxl::BitWriter"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %28) #8
  %29 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %3, i64 0, i32 0
  %30 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %3, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 0, i64 40, i1 false) #8
  %31 = call i32 @_ZN3jxl23DequantMatricesEncodeDCEPKNS_15DequantMatricesEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::DequantMatrices"* %0, %"struct.jxl::BitWriter"* nonnull %3, i64 0, %"struct.jxl::AuxOut"* null)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %2
  %34 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0)) #8
  %35 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

36:                                               ; preds = %2
  %37 = load i64, i64* %29, align 8
  %38 = add i64 %37, 7
  %39 = and i64 %38, -8
  %40 = sub i64 %39, %37
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %49, label %42

42:                                               ; preds = %36
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %3, i64 %40, i64 0) #8
  %43 = load i64, i64* %29, align 8
  %44 = and i64 %43, 7
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %49, label %46

46:                                               ; preds = %42
  %47 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.21, i64 0, i64 0), i32 133, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.22, i64 0, i64 0)) #8
  %48 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

49:                                               ; preds = %36, %42
  %50 = phi i64 [ %37, %36 ], [ %43, %42 ]
  %51 = bitcast %"class.jxl::BitReader"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %51) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 64, i1 false)
  %52 = and i64 %50, 7
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %57, label %54

54:                                               ; preds = %49
  %55 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.21, i64 0, i64 0), i32 58, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.22, i64 0, i64 0)) #8
  %56 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

57:                                               ; preds = %49
  %58 = load i8*, i8** %30, align 8
  %59 = lshr i64 %50, 3
  %60 = ptrtoint i8* %58 to i64
  %61 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %4, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 0, i64 16, i1 false) #8
  store i8* %58, i8** %61, align 8
  %62 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %4, i64 0, i32 3
  %63 = getelementptr inbounds i8, i8* %58, i64 -8
  %64 = getelementptr inbounds i8, i8* %63, i64 %59
  store i8* %64, i8** %62, align 8
  %65 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %4, i64 0, i32 4
  %66 = bitcast i8** %65 to i64*
  store i64 %60, i64* %66, align 8
  %67 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %4, i64 0, i32 5
  store i64 0, i64* %67, align 8
  %68 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %4, i64 0, i32 6
  store i8 0, i8* %68, align 8
  %69 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %4, i64 0, i32 7
  store i64 0, i64* %69, align 8
  %70 = icmp ugt i8* %58, %64
  br i1 %70, label %71, label %72, !prof !2

71:                                               ; preds = %57
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* nonnull %4) #8
  br label %78

72:                                               ; preds = %57
  %73 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %4, i64 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %4, i64 0, i32 1
  %75 = bitcast i8* %58 to i64*
  %76 = load i64, i64* %75, align 1
  store i64 %76, i64* %73, align 8
  %77 = getelementptr inbounds i8, i8* %58, i64 7
  store i8* %77, i8** %61, align 8
  store i64 56, i64* %74, align 8
  br label %78

78:                                               ; preds = %71, %72
  %79 = call i32 @_ZN3jxl15DequantMatrices8DecodeDCEPNS_9BitReaderE(%"class.jxl::DequantMatrices"* %0, %"class.jxl::BitReader"* nonnull %4) #8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %84, label %81

81:                                               ; preds = %78
  %82 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 184, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0)) #8
  %83 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

84:                                               ; preds = %78
  store i8 1, i8* %68, align 8
  %85 = load i8*, i8** %65, align 8
  %86 = icmp eq i8* %85, null
  %87 = ptrtoint i8* %85 to i64
  br i1 %86, label %110, label %88

88:                                               ; preds = %84
  %89 = bitcast i8** %61 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = sub i64 %90, %87
  %92 = load i64, i64* %67, align 8
  %93 = add i64 %91, %92
  %94 = shl i64 %93, 3
  %95 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %4, i64 0, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = sub i64 %94, %96
  %98 = load i64, i64* %69, align 8
  %99 = icmp ugt i64 %97, %98
  br i1 %99, label %100, label %110

100:                                              ; preds = %88
  %101 = load i8*, i8** %62, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 8
  %103 = ptrtoint i8* %102 to i64
  %104 = sub i64 %103, %87
  %105 = shl i64 %104, 3
  %106 = icmp ugt i64 %97, %105
  br i1 %106, label %107, label %110

107:                                              ; preds = %100
  %108 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 185, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0)) #8
  %109 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

110:                                              ; preds = %88, %100, %84
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %51) #8
  %111 = load i8*, i8** %30, align 8
  store i8* null, i8** %30, align 8
  %112 = icmp eq i8* %111, null
  br i1 %112, label %114, label %113

113:                                              ; preds = %110
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %111) #8
  br label %114

114:                                              ; preds = %110, %113
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %28) #8
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #4

declare i32 @_ZN3jxl15DequantMatrices8DecodeDCEPNS_9BitReaderE(%"class.jxl::DequantMatrices"*, %"class.jxl::BitReader"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl24DequantMatricesSetCustomEPNS_15DequantMatricesERKNSt3__16vectorINS_13QuantEncodingENS2_9allocatorIS4_EEEEPNS_19ModularFrameEncoderE(%"class.jxl::DequantMatrices"*, %"class.std::__1::vector"* readonly dereferenceable(24), %"class.jxl::ModularFrameEncoder"*) local_unnamed_addr #0 {
  %4 = alloca %"struct.jxl::BitWriter", align 8
  %5 = alloca %"class.jxl::BitReader", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %7 = bitcast %"class.jxl::QuantEncoding"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = icmp eq i64 %11, 9520
  %13 = inttoptr i64 %10 to %"class.jxl::QuantEncoding"*
  %14 = inttoptr i64 %8 to %"class.jxl::QuantEncoding"*
  br i1 %12, label %18, label %15

15:                                               ; preds = %3
  %16 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 191, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.9, i64 0, i64 0)) #8
  %17 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 6
  %20 = icmp eq %"class.std::__1::vector"* %19, %1
  br i1 %20, label %25, label %21

21:                                               ; preds = %18
  tail call void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"* %19, %"class.jxl::QuantEncoding"* %13, %"class.jxl::QuantEncoding"* %14) #8
  %22 = load i64, i64* %7, align 8
  %23 = load i64, i64* %9, align 8
  %24 = inttoptr i64 %23 to %"class.jxl::QuantEncoding"*
  br label %25

25:                                               ; preds = %18, %21
  %26 = phi %"class.jxl::QuantEncoding"* [ %13, %18 ], [ %24, %21 ]
  %27 = phi i64 [ %10, %18 ], [ %23, %21 ]
  %28 = phi i64 [ %8, %18 ], [ %22, %21 ]
  %29 = icmp eq i64 %28, %27
  br i1 %29, label %30, label %36

30:                                               ; preds = %54, %25
  %31 = bitcast %"struct.jxl::BitWriter"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %31) #8
  %32 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %4, i64 0, i32 0
  %33 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %4, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 0, i64 40, i1 false) #8
  %34 = call i32 @_ZN3jxl21DequantMatricesEncodeEPKNS_15DequantMatricesEPNS_9BitWriterEmPNS_6AuxOutEPNS_19ModularFrameEncoderE(%"class.jxl::DequantMatrices"* %0, %"struct.jxl::BitWriter"* nonnull %4, i64 0, %"struct.jxl::AuxOut"* null, %"class.jxl::ModularFrameEncoder"* null)
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %65, label %62

36:                                               ; preds = %25, %54
  %37 = phi i64 [ %55, %54 ], [ %27, %25 ]
  %38 = phi i64 [ %56, %54 ], [ %28, %25 ]
  %39 = phi %"class.jxl::QuantEncoding"* [ %61, %54 ], [ %26, %25 ]
  %40 = phi i64 [ %57, %54 ], [ 0, %25 ]
  %41 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %39, i64 %40
  %42 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %41, i64 0, i32 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, 7
  br i1 %44, label %45, label %54

45:                                               ; preds = %36
  %46 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices15required_size_xE.const, i64 0, i64 %40
  %47 = load i64, i64* %46, align 8
  %48 = shl i64 %47, 3
  %49 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices15required_size_yE.const, i64 0, i64 %40
  %50 = load i64, i64* %49, align 8
  %51 = shl i64 %50, 3
  tail call void @_ZN3jxl19ModularFrameEncoder13AddQuantTableEmmRKNS_13QuantEncodingEm(%"class.jxl::ModularFrameEncoder"* %2, i64 %48, i64 %51, %"class.jxl::QuantEncoding"* dereferenceable(560) %41, i64 %40) #8
  %52 = load i64, i64* %7, align 8
  %53 = load i64, i64* %9, align 8
  br label %54

54:                                               ; preds = %36, %45
  %55 = phi i64 [ %37, %36 ], [ %53, %45 ]
  %56 = phi i64 [ %38, %36 ], [ %52, %45 ]
  %57 = add nuw i64 %40, 1
  %58 = sub i64 %56, %55
  %59 = sdiv exact i64 %58, 560
  %60 = icmp ult i64 %57, %59
  %61 = inttoptr i64 %55 to %"class.jxl::QuantEncoding"*
  br i1 %60, label %36, label %30

62:                                               ; preds = %30
  %63 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 204, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.10, i64 0, i64 0)) #8
  %64 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

65:                                               ; preds = %30
  %66 = load i64, i64* %32, align 8
  %67 = add i64 %66, 7
  %68 = and i64 %67, -8
  %69 = sub i64 %68, %66
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %78, label %71

71:                                               ; preds = %65
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %4, i64 %69, i64 0) #8
  %72 = load i64, i64* %32, align 8
  %73 = and i64 %72, 7
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %78, label %75

75:                                               ; preds = %71
  %76 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.21, i64 0, i64 0), i32 133, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.22, i64 0, i64 0)) #8
  %77 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

78:                                               ; preds = %65, %71
  %79 = phi i64 [ %66, %65 ], [ %72, %71 ]
  %80 = bitcast %"class.jxl::BitReader"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %80) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %80, i8 -86, i64 64, i1 false)
  %81 = and i64 %79, 7
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %78
  %84 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.21, i64 0, i64 0), i32 58, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.22, i64 0, i64 0)) #8
  %85 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

86:                                               ; preds = %78
  %87 = load i8*, i8** %33, align 8
  %88 = lshr i64 %79, 3
  %89 = ptrtoint i8* %87 to i64
  %90 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %80, i8 0, i64 16, i1 false) #8
  store i8* %87, i8** %90, align 8
  %91 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 3
  %92 = getelementptr inbounds i8, i8* %87, i64 -8
  %93 = getelementptr inbounds i8, i8* %92, i64 %88
  store i8* %93, i8** %91, align 8
  %94 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 4
  %95 = bitcast i8** %94 to i64*
  store i64 %89, i64* %95, align 8
  %96 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 5
  store i64 0, i64* %96, align 8
  %97 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 6
  store i8 0, i8* %97, align 8
  %98 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 7
  store i64 0, i64* %98, align 8
  %99 = icmp ugt i8* %87, %93
  br i1 %99, label %100, label %101, !prof !2

100:                                              ; preds = %86
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* nonnull %5) #8
  br label %107

101:                                              ; preds = %86
  %102 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 0
  %103 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 1
  %104 = bitcast i8* %87 to i64*
  %105 = load i64, i64* %104, align 1
  store i64 %105, i64* %102, align 8
  %106 = getelementptr inbounds i8, i8* %87, i64 7
  store i8* %106, i8** %90, align 8
  store i64 56, i64* %103, align 8
  br label %107

107:                                              ; preds = %100, %101
  %108 = call i32 @_ZN3jxl15DequantMatrices6DecodeEPNS_9BitReaderEPNS_19ModularFrameDecoderE(%"class.jxl::DequantMatrices"* %0, %"class.jxl::BitReader"* nonnull %5, %"class.jxl::ModularFrameDecoder"* null) #8
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %113, label %110

110:                                              ; preds = %107
  %111 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 208, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i64 0, i64 0)) #8
  %112 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

113:                                              ; preds = %107
  store i8 1, i8* %97, align 8
  %114 = load i8*, i8** %94, align 8
  %115 = icmp eq i8* %114, null
  %116 = ptrtoint i8* %114 to i64
  br i1 %115, label %139, label %117

117:                                              ; preds = %113
  %118 = bitcast i8** %90 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = sub i64 %119, %116
  %121 = load i64, i64* %96, align 8
  %122 = add i64 %120, %121
  %123 = shl i64 %122, 3
  %124 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 1
  %125 = load i64, i64* %124, align 8
  %126 = sub i64 %123, %125
  %127 = load i64, i64* %98, align 8
  %128 = icmp ugt i64 %126, %127
  br i1 %128, label %129, label %139

129:                                              ; preds = %117
  %130 = load i8*, i8** %91, align 8
  %131 = getelementptr inbounds i8, i8* %130, i64 8
  %132 = ptrtoint i8* %131 to i64
  %133 = sub i64 %132, %116
  %134 = shl i64 %133, 3
  %135 = icmp ugt i64 %126, %134
  br i1 %135, label %136, label %139

136:                                              ; preds = %129
  %137 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 209, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0)) #8
  %138 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

139:                                              ; preds = %117, %129, %113
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %80) #8
  %140 = load i8*, i8** %33, align 8
  store i8* null, i8** %33, align 8
  %141 = icmp eq i8* %140, null
  br i1 %141, label %143, label %142

142:                                              ; preds = %139
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %140) #8
  br label %143

143:                                              ; preds = %139, %142
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %31) #8
  ret void
}

declare void @_ZN3jxl19ModularFrameEncoder13AddQuantTableEmmRKNS_13QuantEncodingEm(%"class.jxl::ModularFrameEncoder"*, i64, i64, %"class.jxl::QuantEncoding"* dereferenceable(560), i64) local_unnamed_addr #2

declare i32 @_ZN3jxl15DequantMatrices6DecodeEPNS_9BitReaderEPNS_19ModularFrameDecoderE(%"class.jxl::DequantMatrices"*, %"class.jxl::BitReader"*, %"class.jxl::ModularFrameDecoder"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl12_GLOBAL__N_115EncodeDctParamsERKNS_20DctQuantWeightParamsEPNS_9BitWriterE(%"struct.jxl::DctQuantWeightParams"* nocapture readonly dereferenceable(216), %"struct.jxl::BitWriter"*) unnamed_addr #0 {
  %3 = getelementptr inbounds %"struct.jxl::DctQuantWeightParams", %"struct.jxl::DctQuantWeightParams"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 43, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.19, i64 0, i64 0)) #8
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

9:                                                ; preds = %2
  %10 = add i64 %4, -1
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 4, i64 %10) #8
  %11 = load i64, i64* %3, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %28, label %16

13:                                               ; preds = %16
  %14 = load i64, i64* %3, align 8
  %15 = icmp ult i64 %25, %14
  br i1 %15, label %16, label %26

16:                                               ; preds = %9, %13
  %17 = phi i64 [ %25, %13 ], [ 0, %9 ]
  %18 = getelementptr inbounds %"struct.jxl::DctQuantWeightParams", %"struct.jxl::DctQuantWeightParams"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i64 %17
  %19 = load float, float* %18, align 4
  %20 = icmp eq i64 %17, 0
  %21 = select i1 %20, float 1.562500e-02, float 1.000000e+00
  %22 = fmul float %21, %19
  %23 = tail call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %22, %"struct.jxl::BitWriter"* %1) #8
  %24 = icmp eq i32 %23, 0
  %25 = add nuw i64 %17, 1
  br i1 %24, label %13, label %28

26:                                               ; preds = %13
  %27 = icmp eq i64 %14, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %16, %30, %55, %45, %9, %26, %43
  %29 = phi i32 [ 0, %43 ], [ 0, %26 ], [ 0, %9 ], [ 0, %55 ], [ %52, %45 ], [ %37, %30 ], [ %23, %16 ]
  ret i32 %29

30:                                               ; preds = %26, %40
  %31 = phi i64 [ %39, %40 ], [ 0, %26 ]
  %32 = getelementptr inbounds %"struct.jxl::DctQuantWeightParams", %"struct.jxl::DctQuantWeightParams"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i64 %31
  %33 = load float, float* %32, align 4
  %34 = icmp eq i64 %31, 0
  %35 = select i1 %34, float 1.562500e-02, float 1.000000e+00
  %36 = fmul float %35, %33
  %37 = tail call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %36, %"struct.jxl::BitWriter"* %1) #8
  %38 = icmp eq i32 %37, 0
  %39 = add nuw i64 %31, 1
  br i1 %38, label %40, label %28

40:                                               ; preds = %30
  %41 = load i64, i64* %3, align 8
  %42 = icmp ult i64 %39, %41
  br i1 %42, label %30, label %43

43:                                               ; preds = %40
  %44 = icmp eq i64 %41, 0
  br i1 %44, label %28, label %45

45:                                               ; preds = %43, %55
  %46 = phi i64 [ %54, %55 ], [ 0, %43 ]
  %47 = getelementptr inbounds %"struct.jxl::DctQuantWeightParams", %"struct.jxl::DctQuantWeightParams"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i64 %46
  %48 = load float, float* %47, align 4
  %49 = icmp eq i64 %46, 0
  %50 = select i1 %49, float 1.562500e-02, float 1.000000e+00
  %51 = fmul float %50, %48
  %52 = tail call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %51, %"struct.jxl::BitWriter"* %1) #8
  %53 = icmp eq i32 %52, 0
  %54 = add nuw i64 %46, 1
  br i1 %53, label %55, label %28

55:                                               ; preds = %45
  %56 = load i64, i64* %3, align 8
  %57 = icmp ult i64 %54, %56
  br i1 %57, label %45, label %28
}

declare void @_ZN3jxl19ModularFrameEncoder16EncodeQuantTableEmmPNS_9BitWriterERKNS_13QuantEncodingEmPS0_(i64, i64, %"struct.jxl::BitWriter"*, %"class.jxl::QuantEncoding"* dereferenceable(560), i64, %"class.jxl::ModularFrameEncoder"*) local_unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"*, %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.jxl::QuantEncoding"* %2 to i64
  %5 = ptrtoint %"class.jxl::QuantEncoding"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv exact i64 %6, 560
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"class.jxl::QuantEncoding"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 560
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"class.jxl::QuantEncoding"*
  br i1 %15, label %70, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"class.jxl::QuantEncoding"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = sdiv exact i64 %21, 560
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %1, i64 %22
  %25 = select i1 %23, %"class.jxl::QuantEncoding"* %24, %"class.jxl::QuantEncoding"* %2
  %26 = icmp eq %"class.jxl::QuantEncoding"* %25, %1
  br i1 %26, label %34, label %27

27:                                               ; preds = %17, %27
  %28 = phi %"class.jxl::QuantEncoding"* [ %32, %27 ], [ %16, %17 ]
  %29 = phi %"class.jxl::QuantEncoding"* [ %31, %27 ], [ %1, %17 ]
  %30 = tail call dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"* %28, %"class.jxl::QuantEncoding"* dereferenceable(560) %29) #8
  %31 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %29, i64 1
  %32 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %28, i64 1
  %33 = icmp eq %"class.jxl::QuantEncoding"* %31, %25
  br i1 %33, label %34, label %27

34:                                               ; preds = %27, %17
  %35 = phi %"class.jxl::QuantEncoding"* [ %16, %17 ], [ %32, %27 ]
  br i1 %23, label %36, label %42

36:                                               ; preds = %34
  %37 = load i64, i64* %19, align 8
  %38 = load i64, i64* %11, align 8
  %39 = sub i64 %37, %38
  %40 = sdiv exact i64 %39, 560
  %41 = sub nsw i64 %7, %40
  tail call void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_m(%"class.std::__1::vector"* %0, %"class.jxl::QuantEncoding"* %25, %"class.jxl::QuantEncoding"* %2, i64 %41)
  br label %128

42:                                               ; preds = %34
  %43 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %18, align 8
  %44 = icmp eq %"class.jxl::QuantEncoding"* %43, %35
  br i1 %44, label %69, label %45

45:                                               ; preds = %42, %67
  %46 = phi %"class.jxl::QuantEncoding"* [ %47, %67 ], [ %43, %42 ]
  %47 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 -1
  %48 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %47, i64 0, i32 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 7
  br i1 %50, label %51, label %67

51:                                               ; preds = %45
  %52 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %46, i64 -1, i32 0, i32 3
  %53 = bitcast %union.anon* %52 to %"class.std::__1::vector.10"**
  %54 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %53, align 8
  %55 = icmp eq %"class.std::__1::vector.10"* %54, null
  br i1 %55, label %67, label %56

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %54, i64 0, i32 0, i32 0
  %58 = load i32*, i32** %57, align 8
  %59 = icmp eq i32* %58, null
  br i1 %59, label %65, label %60

60:                                               ; preds = %56
  %61 = ptrtoint i32* %58 to i64
  %62 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %54, i64 0, i32 0, i32 1
  %63 = bitcast i32** %62 to i64*
  store i64 %61, i64* %63, align 8
  %64 = bitcast i32* %58 to i8*
  tail call void @_ZdlPv(i8* %64) #10
  br label %65

65:                                               ; preds = %60, %56
  %66 = bitcast %"class.std::__1::vector.10"* %54 to i8*
  tail call void @_ZdlPv(i8* %66) #10
  br label %67

67:                                               ; preds = %65, %51, %45
  %68 = icmp eq %"class.jxl::QuantEncoding"* %47, %35
  br i1 %68, label %69, label %45

69:                                               ; preds = %67, %42
  store %"class.jxl::QuantEncoding"* %35, %"class.jxl::QuantEncoding"** %18, align 8
  br label %128

70:                                               ; preds = %3
  %71 = icmp eq i64 %12, 0
  br i1 %71, label %107, label %72

72:                                               ; preds = %70
  %73 = inttoptr i64 %12 to i8*
  %74 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %75 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %74, align 8
  %76 = icmp eq %"class.jxl::QuantEncoding"* %75, %16
  br i1 %76, label %104, label %77

77:                                               ; preds = %72, %99
  %78 = phi %"class.jxl::QuantEncoding"* [ %79, %99 ], [ %75, %72 ]
  %79 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %78, i64 -1
  %80 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %79, i64 0, i32 0, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 7
  br i1 %82, label %83, label %99

83:                                               ; preds = %77
  %84 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %78, i64 -1, i32 0, i32 3
  %85 = bitcast %union.anon* %84 to %"class.std::__1::vector.10"**
  %86 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %85, align 8
  %87 = icmp eq %"class.std::__1::vector.10"* %86, null
  br i1 %87, label %99, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %86, i64 0, i32 0, i32 0
  %90 = load i32*, i32** %89, align 8
  %91 = icmp eq i32* %90, null
  br i1 %91, label %97, label %92

92:                                               ; preds = %88
  %93 = ptrtoint i32* %90 to i64
  %94 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %86, i64 0, i32 0, i32 1
  %95 = bitcast i32** %94 to i64*
  store i64 %93, i64* %95, align 8
  %96 = bitcast i32* %90 to i8*
  tail call void @_ZdlPv(i8* %96) #10
  br label %97

97:                                               ; preds = %92, %88
  %98 = bitcast %"class.std::__1::vector.10"* %86 to i8*
  tail call void @_ZdlPv(i8* %98) #10
  br label %99

99:                                               ; preds = %97, %83, %77
  %100 = icmp eq %"class.jxl::QuantEncoding"* %79, %16
  br i1 %100, label %101, label %77

101:                                              ; preds = %99
  %102 = bitcast %"class.std::__1::vector"* %0 to i8**
  %103 = load i8*, i8** %102, align 8
  br label %104

104:                                              ; preds = %101, %72
  %105 = phi i8* [ %103, %101 ], [ %73, %72 ]
  store %"class.jxl::QuantEncoding"* %16, %"class.jxl::QuantEncoding"** %74, align 8
  tail call void @_ZdlPv(i8* %105) #10
  %106 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 24, i1 false) #8
  br label %107

107:                                              ; preds = %70, %104
  %108 = phi i64 [ %10, %70 ], [ 0, %104 ]
  %109 = icmp ugt i64 %7, 32940614417338485
  br i1 %109, label %110, label %112

110:                                              ; preds = %107
  %111 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %111) #9
  unreachable

112:                                              ; preds = %107
  %113 = sdiv exact i64 %108, 560
  %114 = icmp ult i64 %113, 16470307208669242
  br i1 %114, label %115, label %119

115:                                              ; preds = %112
  %116 = shl nsw i64 %113, 1
  %117 = icmp ult i64 %116, %7
  %118 = select i1 %117, i64 %7, i64 %116
  br label %119

119:                                              ; preds = %115, %112
  %120 = phi i64 [ %118, %115 ], [ 32940614417338485, %112 ]
  %121 = mul i64 %120, 560
  %122 = tail call i8* @_Znwm(i64 %121) #10
  %123 = bitcast i8* %122 to %"class.jxl::QuantEncoding"*
  %124 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %125 = bitcast %"class.jxl::QuantEncoding"** %124 to i8**
  store i8* %122, i8** %125, align 8
  %126 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %122, i8** %126, align 8
  %127 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %123, i64 %120
  store %"class.jxl::QuantEncoding"* %127, %"class.jxl::QuantEncoding"** %8, align 8
  tail call void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_m(%"class.std::__1::vector"* %0, %"class.jxl::QuantEncoding"* %1, %"class.jxl::QuantEncoding"* %2, i64 %7)
  br label %128

128:                                              ; preds = %36, %69, %119
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES9_S9_m(%"class.std::__1::vector"*, %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"class.jxl::QuantEncoding"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq %"class.jxl::QuantEncoding"* %1, %2
  br i1 %8, label %73, label %9

9:                                                ; preds = %4
  %10 = inttoptr i64 %7 to %"class.jxl::QuantEncoding"*
  br label %11

11:                                               ; preds = %67, %9
  %12 = phi %"class.jxl::QuantEncoding"* [ %69, %67 ], [ %10, %9 ]
  %13 = phi %"class.jxl::QuantEncoding"* [ %68, %67 ], [ %1, %9 ]
  %14 = bitcast %"class.jxl::QuantEncoding"* %12 to i8*
  %15 = bitcast %"class.jxl::QuantEncoding"* %13 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 553, i1 false) #8
  %16 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %12, i64 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 7
  br i1 %18, label %19, label %67

19:                                               ; preds = %11
  %20 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %12, i64 0, i32 0, i32 3
  %21 = bitcast %union.anon* %20 to %"class.std::__1::vector.10"**
  %22 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %21, align 8
  %23 = icmp eq %"class.std::__1::vector.10"* %22, null
  br i1 %23, label %67, label %24

24:                                               ; preds = %19
  %25 = tail call i8* @_Znwm(i64 24) #10
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %13, i64 0, i32 0, i32 3
  %27 = bitcast %union.anon* %26 to %"class.std::__1::vector.10"**
  %28 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %27, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 24, i1 false) #8
  %29 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %28, i64 0, i32 0, i32 1
  %30 = bitcast i32** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.std::__1::vector.10"* %28 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %31, %33
  %35 = ashr exact i64 %34, 2
  %36 = icmp eq i64 %34, 0
  br i1 %36, label %65, label %37

37:                                               ; preds = %24
  %38 = icmp ugt i64 %35, 4611686018427387903
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = bitcast i8* %25 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %40) #9
  unreachable

41:                                               ; preds = %37
  %42 = tail call i8* @_Znwm(i64 %34) #10
  %43 = bitcast i8* %42 to i32*
  %44 = getelementptr inbounds i8, i8* %25, i64 8
  %45 = bitcast i8* %44 to i8**
  store i8* %42, i8** %45, align 8
  %46 = bitcast i8* %25 to i8**
  store i8* %42, i8** %46, align 8
  %47 = getelementptr inbounds i32, i32* %43, i64 %35
  %48 = getelementptr inbounds i8, i8* %25, i64 16
  %49 = bitcast i8* %48 to i32**
  store i32* %47, i32** %49, align 8
  %50 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %28, i64 0, i32 0, i32 0
  %51 = load i32*, i32** %50, align 8
  %52 = load i64, i64* %30, align 8
  %53 = bitcast i8* %44 to i64*
  %54 = ptrtoint i8* %42 to i64
  %55 = ptrtoint i32* %51 to i64
  %56 = sub i64 %52, %55
  %57 = icmp sgt i64 %56, 0
  br i1 %57, label %58, label %63

58:                                               ; preds = %41
  %59 = lshr exact i64 %56, 2
  %60 = bitcast i32* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %42, i8* align 4 %60, i64 %56, i1 false) #8
  %61 = getelementptr inbounds i32, i32* %43, i64 %59
  %62 = ptrtoint i32* %61 to i64
  br label %63

63:                                               ; preds = %58, %41
  %64 = phi i64 [ %62, %58 ], [ %54, %41 ]
  store i64 %64, i64* %53, align 8
  br label %65

65:                                               ; preds = %63, %24
  %66 = bitcast %union.anon* %20 to i8**
  store i8* %25, i8** %66, align 8
  br label %67

67:                                               ; preds = %65, %19, %11
  %68 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %13, i64 1
  %69 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %12, i64 1
  %70 = icmp eq %"class.jxl::QuantEncoding"* %68, %2
  br i1 %70, label %71, label %11

71:                                               ; preds = %67
  %72 = ptrtoint %"class.jxl::QuantEncoding"* %69 to i64
  br label %73

73:                                               ; preds = %71, %4
  %74 = phi i64 [ %7, %4 ], [ %72, %71 ]
  store i64 %74, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 7
  br i1 %5, label %6, label %22

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %8 = bitcast %union.anon* %7 to %"class.std::__1::vector.10"**
  %9 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %8, align 8
  %10 = icmp eq %"class.std::__1::vector.10"* %9, null
  br i1 %10, label %22, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %9, i64 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint i32* %13 to i64
  %17 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %9, i64 0, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #10
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"class.std::__1::vector.10"* %9 to i8*
  tail call void @_ZdlPv(i8* %21) #10
  br label %22

22:                                               ; preds = %6, %20, %2
  %23 = bitcast %"class.jxl::QuantEncoding"* %1 to i8*
  %24 = bitcast %"class.jxl::QuantEncoding"* %0 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %23, i64 553, i1 false)
  %25 = load i32, i32* %3, align 8
  %26 = icmp eq i32 %25, 7
  br i1 %26, label %27, label %75

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %29 = bitcast %union.anon* %28 to %"class.std::__1::vector.10"**
  %30 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %29, align 8
  %31 = icmp eq %"class.std::__1::vector.10"* %30, null
  br i1 %31, label %75, label %32

32:                                               ; preds = %27
  %33 = tail call i8* @_Znwm(i64 24) #10
  %34 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %1, i64 0, i32 0, i32 3
  %35 = bitcast %union.anon* %34 to %"class.std::__1::vector.10"**
  %36 = load %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"** %35, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #8
  %37 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.10"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %32
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #9
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #10
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %33, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %33 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %33, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #8
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %32, %71
  %74 = bitcast %union.anon* %28 to i8**
  store i8* %33, i8** %74, align 8
  br label %75

75:                                               ; preds = %27, %73, %22
  ret %"class.jxl::QuantEncoding"* %0
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
