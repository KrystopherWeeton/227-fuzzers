; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/encodeintra.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/encodeintra.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8_COMP = type { [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], %struct.macroblock, %struct.VP8Common, [9 x %struct.BOOL_CODER], %struct.VP8_CONFIG, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.TOKENEXTRA*, i32, i32, i32, i32, i32, i32, [20 x i32], [20 x i32], i32, i32, %struct.CODING_CONTEXT, i64, i64, i32, i32, [2 x i32], double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, [5 x i32], i32, i32, i32, i32, double, i64, i64, i64, i32, i32, i32, i32, i64, i32, double, double, i64, i64, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x [2 x i32]]]]], i32, i32, i32, i32, %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [4 x i32], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i8*, i8*, [2 x [4 x i8]], [4 x i32], i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_atomic_int*, i32, %struct.vpx_atomic_int, i32, i32, i64*, i64, %struct.MB_ROW_COMP*, %struct.ENCODETHREAD_DATA*, %struct.LPFTHREAD_DATA, %union.sem_t*, %union.sem_t*, %union.sem_t, %union.sem_t, %struct.TOKENLIST*, [9 x i32], [9 x i8*], [9 x i8*], i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, [5 x %struct.variance_vtable], i64, i64, i64, i64, [128 x i32], %struct.frame_contexts, %struct.frame_contexts, %struct.frame_contexts, %struct.twopass_rc, i32, i32, i32*, i8*, i32, i32, %union.int_mv*, i32*, i32*, i32, i32, i32, i32, %struct.vp8_denoiser, i32, [5 x %struct.LAYER_CONTEXT], [5 x i64], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], i32, i8, [4 x i32], i32, %struct.rd_costs_struct, i32, i32, [12 x i8] }
%struct.macroblock = type { [400 x i16], [400 x i16], [256 x i8], i8*, [25 x %struct.block], %struct.yv12_buffer_config, %struct.macroblockd, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, [4 x i32], %struct.search_site*, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, [2 x i32*], [2 x i32*], [10 x i32]*, [10 x i32]*, [10 x [10 x i32]]*, i32*, [8 x [3 x [12 x i32]]]*, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.mv_context*, i32, i32, i32, i32, i32, i32, %union.int_mv, i32, i32, i8, i32, [4 x [8 x [3 x [12 x i32]]]], [2 x [2047 x i32]], [5 x i32], [4 x i32], i64, i64, [4 x i32], [20 x i32], [20 x i32], i32, [20 x i32], i32, i32, i32, i32, i32, [1024 x i32], void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (%struct.block*, %struct.blockd*)*, i32, i32, [8 x i8] }
%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.PARTITION_INFO = type { i32, [16 x %struct.anon] }
%struct.anon = type { i32, %union.int_mv }
%struct.search_site = type { %struct.MV, i32 }
%struct.MV = type { i16, i16 }
%struct.mv_context = type { [19 x i8] }
%union.int_mv = type { i32 }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.VP8_CONFIG = type { i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_codec_pkt_list*, i32, i32, [16 x i32], [16 x i32], i32, [16 x i32], i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_rational = type { i32, i32 }
%struct.lookahead_ctx = type opaque
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i8, i8 }
%struct.CODING_CONTEXT = type { i32, i32, i32, i32, i32, [4 x i32], [2 x %struct.mv_context], [2 x [2048 x i32]], [4 x i8], [3 x i8], [4 x i8], [3 x i8], [5 x i32], [4 x i32], [4 x i32], i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon }
%union.anon = type { %struct.anon.0, [40 x i8] }
%struct.anon.0 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_COMP = type { %struct.macroblock, [4 x i32], i32, [12 x i8] }
%struct.ENCODETHREAD_DATA = type { i32, i8*, i8* }
%struct.LPFTHREAD_DATA = type { i32, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA* }
%struct.variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32)* }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.twopass_rc = type { i32, double, i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS, i32, i64, i64, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, double }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_denoiser = type { [4 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, %struct.yv12_buffer_config, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.denoise_params }
%struct.denoise_params = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { double, i32, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, i32, i32, i64, i32, i32, i32, i32, [4 x i32], [2 x i32] }
%struct.rd_costs_struct = type { [2 x [2048 x i32]], [2 x [512 x i32]], [2 x [10 x i32]], [2 x [10 x i32]], [10 x [10 x [10 x i32]]], [14 x i32], [4 x [8 x [3 x [12 x i32]]]] }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_encode_intra(%struct.VP8_COMP* nocapture readnone, %struct.macroblock*, i32) local_unnamed_addr #0 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %5, label %22

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 0, i32 6, i32 0
  store i32 0, i32* %6, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 0)
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 1, i32 6, i32 0
  store i32 0, i32* %7, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 1)
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 2, i32 6, i32 0
  store i32 0, i32* %8, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 2)
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 3, i32 6, i32 0
  store i32 0, i32* %9, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 3)
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 4, i32 6, i32 0
  store i32 0, i32* %10, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 4)
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 5, i32 6, i32 0
  store i32 0, i32* %11, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 5)
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 6, i32 6, i32 0
  store i32 0, i32* %12, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 6)
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 7, i32 6, i32 0
  store i32 0, i32* %13, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 7)
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 8, i32 6, i32 0
  store i32 0, i32* %14, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 8)
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 9, i32 6, i32 0
  store i32 0, i32* %15, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 9)
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 10, i32 6, i32 0
  store i32 0, i32* %16, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 10)
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 11, i32 6, i32 0
  store i32 0, i32* %17, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 11)
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 12, i32 6, i32 0
  store i32 0, i32* %18, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 12)
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 13, i32 6, i32 0
  store i32 0, i32* %19, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 13)
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 14, i32 6, i32 0
  store i32 0, i32* %20, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 14)
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 15, i32 6, i32 0
  store i32 0, i32* %21, align 8
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %1, i32 15)
  br label %70

22:                                               ; preds = %3
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 13
  %24 = load %struct.modeinfo*, %struct.modeinfo** %23, align 32
  %25 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %24, i64 0, i32 0, i32 0
  store i8 0, i8* %25, align 4
  %26 = load %struct.modeinfo*, %struct.modeinfo** %23, align 32
  %27 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %26, i64 0, i32 0, i32 1
  store i8 0, i8* %27, align 1
  %28 = load %struct.modeinfo*, %struct.modeinfo** %23, align 32
  %29 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %28, i64 0, i32 0, i32 2
  store i8 0, i8* %29, align 2
  tail call void @vp8_encode_intra16x16mby(%struct.macroblock* %1)
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 5, i64 0
  %31 = load %struct.modeinfo*, %struct.modeinfo** %23, align 32
  %32 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %31, i64 0, i32 0, i32 0
  %33 = load i8, i8* %32, align 4
  %34 = icmp eq i8 %33, 9
  br i1 %34, label %62, label %35

35:                                               ; preds = %22
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 24
  %37 = load i8, i8* %36, align 8
  %38 = icmp sgt i8 %37, 1
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 24, i32 1
  %40 = load i16*, i16** %39, align 8
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 1, i64 0
  br i1 %38, label %42, label %43

42:                                               ; preds = %35
  tail call void @vp8_short_inv_walsh4x4_sse2(i16* %40, i16* %41) #2
  br label %44

43:                                               ; preds = %35
  tail call void @vp8_short_inv_walsh4x4_1_c(i16* %40, i16* %41) #2
  br label %44

44:                                               ; preds = %43, %42
  br label %45

45:                                               ; preds = %78, %44
  %46 = phi i64 [ 0, %44 ], [ %80, %78 ]
  %47 = phi i16* [ %41, %44 ], [ %79, %78 ]
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 %46
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %45
  %52 = load i16, i16* %47, align 2
  %53 = icmp eq i16 %52, 0
  br i1 %53, label %55, label %54

54:                                               ; preds = %51
  store i8 1, i8* %48, align 1
  br label %55

55:                                               ; preds = %54, %51, %45
  %56 = or i64 %46, 1
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %73, label %78

60:                                               ; preds = %78
  %61 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 6, i64 0
  br label %62

62:                                               ; preds = %22, %60
  %63 = phi i16* [ %61, %60 ], [ %30, %22 ]
  %64 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 1, i64 0
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 13
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 4
  %68 = load i32, i32* %67, align 16
  %69 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 0
  tail call void @vp8_dequant_idct_add_y_block_sse2(i16* %64, i16* %63, i8* %66, i32 %68, i8* %69) #2
  br label %70

70:                                               ; preds = %5, %62
  %71 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0
  %72 = tail call i32 @vpx_get_mb_ss_sse2(i16* %71) #2
  ret i32 %72

73:                                               ; preds = %55
  %74 = getelementptr inbounds i16, i16* %47, i64 16
  %75 = load i16, i16* %74, align 2
  %76 = icmp eq i16 %75, 0
  br i1 %76, label %78, label %77

77:                                               ; preds = %73
  store i8 1, i8* %57, align 1
  br label %78

78:                                               ; preds = %77, %73, %55
  %79 = getelementptr inbounds i16, i16* %47, i64 32
  %80 = add nuw nsw i64 %46, 2
  %81 = icmp eq i64 %80, 16
  br i1 %81, label %60, label %45
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_encode_intra16x16mby(%struct.macroblock*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6
  %3 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 13
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 4
  %6 = load i32, i32* %5, align 16
  %7 = sext i32 %6 to i64
  %8 = sub nsw i64 0, %7
  %9 = getelementptr inbounds i8, i8* %4, i64 %8
  %10 = getelementptr inbounds i8, i8* %4, i64 -1
  tail call void @vp8_build_intra_predictors_mby_s(%struct.macroblockd* %2, i8* %9, i8* %10, i32 %6, i8* %4, i32 %6) #2
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 9
  %13 = load i8**, i8*** %12, align 8
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 11
  %16 = load i32, i32* %15, align 4
  %17 = load i8*, i8** %3, align 8
  %18 = load i32, i32* %5, align 16
  tail call void @vp8_subtract_mby(i16* %11, i8* %14, i32 %16, i8* %17, i32 %18) #2
  tail call void @vp8_transform_intra_mby(%struct.macroblock* %0) #2
  tail call void @vp8_quantize_mby(%struct.macroblock* %0) #2
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 39
  %20 = load i32, i32* %19, align 32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %1
  tail call void @vp8_optimize_mby(%struct.macroblock* %0) #2
  br label %23

23:                                               ; preds = %1, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_encode_intra4x4block(%struct.macroblock*, i32) local_unnamed_addr #0 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %3
  %5 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 %3
  %6 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 4
  %7 = load i32, i32* %6, align 16
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 13
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %3, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %9, i64 %12
  %14 = sext i32 %7 to i64
  %15 = sub nsw i64 0, %14
  %16 = getelementptr inbounds i8, i8* %13, i64 %15
  %17 = getelementptr inbounds i8, i8* %13, i64 -1
  %18 = getelementptr inbounds i8, i8* %16, i64 -1
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %3, i32 6, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %3, i32 2
  %23 = load i8*, i8** %22, align 8
  tail call void @vp8_intra4x4_predict(i8* %16, i8* %17, i32 %7, i32 %21, i8* %23, i32 16, i8 zeroext %19) #2
  tail call void @vp8_subtract_b(%struct.block* %5, %struct.blockd* %4, i32 16) #2
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 67
  %25 = load void (i16*, i16*, i32)*, void (i16*, i16*, i32)** %24, align 16
  %26 = getelementptr inbounds %struct.block, %struct.block* %5, i64 0, i32 0
  %27 = load i16*, i16** %26, align 8
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 %3, i32 1
  %29 = load i16*, i16** %28, align 8
  tail call void %25(i16* %27, i16* %29, i32 32) #2
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 70
  %31 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %30, align 8
  tail call void %31(%struct.block* %5, %struct.blockd* %4) #2
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %3, i32 5
  %33 = load i8*, i8** %32, align 8
  %34 = load i8, i8* %33, align 1
  %35 = icmp sgt i8 %34, 1
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %3, i32 1
  %37 = load i16*, i16** %36, align 8
  br i1 %35, label %38, label %40

38:                                               ; preds = %2
  %39 = load i8*, i8** %22, align 8
  tail call void @vp8_short_idct4x4llm_mmx(i16* %37, i8* %39, i32 16, i8* %13, i32 %7) #2
  br label %43

40:                                               ; preds = %2
  %41 = load i16, i16* %37, align 2
  %42 = load i8*, i8** %22, align 8
  tail call void @vp8_dc_only_idct_add_mmx(i16 signext %41, i8* %42, i32 16, i8* %13, i32 %7) #2
  br label %43

43:                                               ; preds = %40, %38
  ret void
}

declare i32 @vpx_get_mb_ss_sse2(i16*) local_unnamed_addr #1

declare void @vp8_intra4x4_predict(i8*, i8*, i32, i32, i8*, i32, i8 zeroext) local_unnamed_addr #1

declare void @vp8_subtract_b(%struct.block*, %struct.blockd*, i32) local_unnamed_addr #1

declare void @vp8_short_idct4x4llm_mmx(i16*, i8*, i32, i8*, i32) local_unnamed_addr #1

declare void @vp8_dc_only_idct_add_mmx(i16 signext, i8*, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_encode_intra4x4mby(%struct.macroblock*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 13
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 4
  %5 = load i32, i32* %4, align 16
  %6 = sext i32 %5 to i64
  %7 = sub nsw i64 0, %6
  %8 = getelementptr inbounds i8, i8* %3, i64 %7
  %9 = getelementptr inbounds i8, i8* %8, i64 16
  %10 = bitcast i8* %9 to i32*
  %11 = shl nsw i32 %5, 2
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %9, i64 %12
  %14 = bitcast i8* %13 to i32*
  %15 = shl nsw i32 %5, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %9, i64 %16
  %18 = bitcast i8* %17 to i32*
  %19 = mul nsw i32 %5, 12
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %9, i64 %20
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %10, align 4
  store i32 %23, i32* %14, align 4
  %24 = load i32, i32* %10, align 4
  store i32 %24, i32* %18, align 4
  %25 = load i32, i32* %10, align 4
  store i32 %25, i32* %22, align 4
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 0)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 1)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 2)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 3)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 4)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 5)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 6)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 7)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 8)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 9)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 10)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 11)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 12)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 13)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 14)
  tail call void @vp8_encode_intra4x4block(%struct.macroblock* %0, i32 15)
  ret void
}

declare void @vp8_build_intra_predictors_mby_s(%struct.macroblockd*, i8*, i8*, i32, i8*, i32) local_unnamed_addr #1

declare void @vp8_subtract_mby(i16*, i8*, i32, i8*, i32) local_unnamed_addr #1

declare void @vp8_transform_intra_mby(%struct.macroblock*) local_unnamed_addr #1

declare void @vp8_quantize_mby(%struct.macroblock*) local_unnamed_addr #1

declare void @vp8_optimize_mby(%struct.macroblock*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_encode_intra16x16mbuv(%struct.macroblock*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6
  %3 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 14
  %4 = load i8*, i8** %3, align 32
  %5 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 9
  %6 = load i32, i32* %5, align 4
  %7 = sext i32 %6 to i64
  %8 = sub nsw i64 0, %7
  %9 = getelementptr inbounds i8, i8* %4, i64 %8
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 15
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %8
  %13 = getelementptr inbounds i8, i8* %4, i64 -1
  %14 = getelementptr inbounds i8, i8* %11, i64 -1
  tail call void @vp8_build_intra_predictors_mbuv_s(%struct.macroblockd* %2, i8* %9, i8* %12, i8* %13, i8* %14, i32 %6, i8* %4, i8* %11, i32 %6) #2
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 5, i32 14
  %17 = load i8*, i8** %16, align 32
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 5, i32 15
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 5, i32 9
  %21 = load i32, i32* %20, align 4
  %22 = load i8*, i8** %3, align 32
  %23 = load i8*, i8** %10, align 8
  %24 = load i32, i32* %5, align 4
  tail call void @vp8_subtract_mbuv(i16* %15, i8* %17, i8* %19, i32 %21, i8* %22, i8* %23, i32 %24) #2
  tail call void @vp8_transform_mbuv(%struct.macroblock* %0) #2
  tail call void @vp8_quantize_mbuv(%struct.macroblock* %0) #2
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 39
  %26 = load i32, i32* %25, align 32
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %29, label %28

28:                                               ; preds = %1
  tail call void @vp8_optimize_mbuv(%struct.macroblock* %0) #2
  br label %29

29:                                               ; preds = %1, %28
  ret void
}

declare void @vp8_build_intra_predictors_mbuv_s(%struct.macroblockd*, i8*, i8*, i8*, i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @vp8_subtract_mbuv(i16*, i8*, i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @vp8_transform_mbuv(%struct.macroblock*) local_unnamed_addr #1

declare void @vp8_quantize_mbuv(%struct.macroblock*) local_unnamed_addr #1

declare void @vp8_optimize_mbuv(%struct.macroblock*) local_unnamed_addr #1

declare void @vp8_short_inv_walsh4x4_sse2(i16*, i16*) local_unnamed_addr #1

declare void @vp8_short_inv_walsh4x4_1_c(i16*, i16*) local_unnamed_addr #1

declare void @vp8_dequant_idct_add_y_block_sse2(i16*, i16*, i8*, i32, i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
