; ModuleID = '../../third_party/libzip/src/lib/zip_source_seek.c'
source_filename = "../../third_party/libzip/src/lib/zip_source_seek.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_source_args_seek = type { i64, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_source_seek(%struct.zip_source*, i64, i32) local_unnamed_addr #0 {
  %4 = alloca %struct.zip_source_args_seek, align 8
  %5 = bitcast %struct.zip_source_args_seek* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 16, i1 false)
  %6 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 7
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 5
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  %13 = icmp ugt i32 %2, 2
  %14 = or i1 %13, %12
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 3
  tail call void @zip_error_set(%struct.zip_error* %16, i32 18, i32 0) #3
  br label %24

17:                                               ; preds = %9
  %18 = getelementptr inbounds %struct.zip_source_args_seek, %struct.zip_source_args_seek* %4, i64 0, i32 0
  store i64 %1, i64* %18, align 8
  %19 = getelementptr inbounds %struct.zip_source_args_seek, %struct.zip_source_args_seek* %4, i64 0, i32 1
  store i32 %2, i32* %19, align 8
  %20 = call i64 @_zip_source_call(%struct.zip_source* %0, i8* nonnull %5, i64 16, i32 6) #3
  %21 = icmp slt i64 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.zip_source, %struct.zip_source* %0, i64 0, i32 10
  store i8 0, i8* %23, align 4
  br label %24

24:                                               ; preds = %17, %3, %22, %15
  %25 = phi i32 [ -1, %15 ], [ 0, %22 ], [ -1, %3 ], [ -1, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #3
  ret i32 %25
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #2

declare i64 @_zip_source_call(%struct.zip_source*, i8*, i64, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @zip_source_seek_compute_offset(i64, i64, i8* readonly, i64, %struct.zip_error*) local_unnamed_addr #0 {
  %6 = icmp ult i64 %3, 16
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @zip_error_set(%struct.zip_error* %4, i32 18, i32 0) #3
  br label %32

8:                                                ; preds = %5
  %9 = icmp eq i8* %2, null
  br i1 %9, label %32, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 8
  switch i32 %13, label %25 [
    i32 1, label %14
    i32 2, label %18
    i32 0, label %22
  ]

14:                                               ; preds = %10
  %15 = bitcast i8* %2 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = add nsw i64 %16, %0
  br label %26

18:                                               ; preds = %10
  %19 = bitcast i8* %2 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = add nsw i64 %20, %1
  br label %26

22:                                               ; preds = %10
  %23 = bitcast i8* %2 to i64*
  %24 = load i64, i64* %23, align 8
  br label %26

25:                                               ; preds = %10
  tail call void @zip_error_set(%struct.zip_error* %4, i32 18, i32 0) #3
  br label %32

26:                                               ; preds = %22, %18, %14
  %27 = phi i64 [ %24, %22 ], [ %21, %18 ], [ %17, %14 ]
  %28 = icmp slt i64 %27, 0
  %29 = icmp ugt i64 %27, %1
  %30 = or i1 %28, %29
  br i1 %30, label %31, label %32

31:                                               ; preds = %26
  tail call void @zip_error_set(%struct.zip_error* %4, i32 18, i32 0) #3
  br label %32

32:                                               ; preds = %7, %26, %8, %31, %25
  %33 = phi i64 [ -1, %25 ], [ -1, %31 ], [ -1, %8 ], [ %27, %26 ], [ -1, %7 ]
  ret i64 %33
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
