; ModuleID = '../../net/quic/quic_http_utils.cc'
source_filename = "../../net/quic/quic_http_utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.15" }
%"union.absl::variant_internal::DestructibleUnionImpl.15" = type { %"union.absl::variant_internal::DestructibleUnionImpl.16" }
%"union.absl::variant_internal::DestructibleUnionImpl.16" = type { %"union.absl::variant_internal::DestructibleUnionImpl.17" }
%"union.absl::variant_internal::DestructibleUnionImpl.17" = type { %"union.absl::variant_internal::DestructibleUnionImpl.18" }
%"union.absl::variant_internal::DestructibleUnionImpl.18" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.spdy::Http2HeaderBlock" = type { %"class.quiche::QuicheLinkedHashMap", %"class.spdy::SpdyHeaderStorage", i64, i64 }
%"class.quiche::QuicheLinkedHashMap" = type { %"class.absl::node_hash_map", %"class.std::__1::list" }
%"class.absl::node_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"struct.std::__1::pair"**, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"struct.std::__1::pair" = type { %"class.absl::string_view", %"class.std::__1::__list_iterator" }
%"class.absl::string_view" = type { i8*, i64 }
%"class.std::__1::__list_iterator" = type { %"struct.std::__1::__list_node_base"* }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%"class.spdy::SpdyHeaderStorage" = type { %"class.spdy::SpdySimpleArena" }
%"class.spdy::SpdySimpleArena" = type { i64, %"class.std::__1::vector", %"class.spdy::SpdySimpleArena::Status" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.spdy::SpdySimpleArena::Block"*, %"struct.spdy::SpdySimpleArena::Block"*, %"class.std::__1::__compressed_pair.10" }
%"struct.spdy::SpdySimpleArena::Block" = type { %"class.std::__1::unique_ptr", i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i8* }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.spdy::SpdySimpleArena::Block"* }
%"class.spdy::SpdySimpleArena::Status" = type { i64 }
%"struct.spdy::SpdyAltSvcWireFormat::AlternativeService" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, i32, %"class.absl::InlinedVector" }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple.50", %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data" }
%"class.absl::container_internal::CompressedTuple.50" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.51" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.51" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.55" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.55" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Allocated", [16 x i8] }
%"struct.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Allocated" = type { i32*, i64 }
%"class.std::__1::vector.56" = type { %"class.std::__1::__vector_base.57" }
%"class.std::__1::__vector_base.57" = type { %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"*, %"class.std::__1::__compressed_pair.58" }
%"struct.quic::ParsedQuicVersion" = type { i32, i32 }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"struct.quic::ParsedQuicVersion"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic.64", [4 x i8] }>
%"struct.std::__1::atomic.64" = type { %"struct.std::__1::__atomic_base.65" }
%"struct.std::__1::__atomic_base.65" = type { %"struct.std::__1::__atomic_base.66" }
%"struct.std::__1::__atomic_base.66" = type { %"struct.std::__1::__cxx_atomic_impl.67" }
%"struct.std::__1::__cxx_atomic_impl.67" = type { %"struct.std::__1::__cxx_atomic_base_impl.68" }
%"struct.std::__1::__cxx_atomic_base_impl.68" = type { i32 }

@.str = private unnamed_addr constant [14 x i8] c"quic_priority\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"quic_stream_id\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"fin\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"Net.QuicAltSvcFormat\00", align 1
@_ZZN3net12_GLOBAL__N_118RecordAltSvcFormatENS0_12AltSvcFormatEE24atomic_histogram_pointer.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN3net36ConvertRequestPriorityToQuicPriorityENS_15RequestPriorityE(i32) local_unnamed_addr #0 {
  %2 = trunc i32 %0 to i8
  %3 = sub i8 5, %2
  ret i8 %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN3net36ConvertQuicPriorityToRequestPriorityEh(i8 zeroext) local_unnamed_addr #0 {
  %2 = zext i8 %0 to i32
  %3 = icmp ugt i8 %0, 4
  %4 = sub nsw i32 5, %2
  %5 = select i1 %3, i32 1, i32 %4
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net23QuicRequestNetLogParamsEjPKN4spdy16Http2HeaderBlockEhNS_17NetLogCaptureModeE(%"class.base::Value"* noalias sret, i32, %"class.spdy::Http2HeaderBlock"*, i8 zeroext, i32) local_unnamed_addr #1 {
  %6 = bitcast %"class.base::Value"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 32, i1 false)
  tail call void @_ZN3net28Http2HeaderBlockNetLogParamsEPKN4spdy16Http2HeaderBlockENS_17NetLogCaptureModeE(%"class.base::Value"* sret %0, %"class.spdy::Http2HeaderBlock"* %2, i32 %4) #8
  %7 = zext i8 %3 to i32
  %8 = tail call %"class.base::Value"* @_ZN4base5Value9SetIntKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.base::Value"* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i64 13, i32 %7) #8
  %9 = tail call %"class.base::Value"* @_ZN4base5Value9SetIntKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.base::Value"* %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i64 14, i32 %1) #8
  ret void
}

declare void @_ZN3net28Http2HeaderBlockNetLogParamsEPKN4spdy16Http2HeaderBlockENS_17NetLogCaptureModeE(%"class.base::Value"* sret, %"class.spdy::Http2HeaderBlock"*, i32) local_unnamed_addr #2

declare %"class.base::Value"* @_ZN4base5Value9SetIntKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.base::Value"*, i8*, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net24QuicResponseNetLogParamsEjbPKN4spdy16Http2HeaderBlockENS_17NetLogCaptureModeE(%"class.base::Value"* noalias sret, i32, i1 zeroext, %"class.spdy::Http2HeaderBlock"*, i32) local_unnamed_addr #1 {
  %6 = bitcast %"class.base::Value"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 32, i1 false)
  tail call void @_ZN3net28Http2HeaderBlockNetLogParamsEPKN4spdy16Http2HeaderBlockENS_17NetLogCaptureModeE(%"class.base::Value"* sret %0, %"class.spdy::Http2HeaderBlock"* %3, i32 %4) #8
  %7 = tail call %"class.base::Value"* @_ZN4base5Value9SetIntKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.base::Value"* %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i64 14, i32 %1) #8
  %8 = tail call %"class.base::Value"* @_ZN4base5Value10SetBoolKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEb(%"class.base::Value"* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 3, i1 zeroext %2) #8
  ret void
}

declare %"class.base::Value"* @_ZN4base5Value10SetBoolKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEb(%"class.base::Value"*, i8*, i64, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net29FilterSupportedAltSvcVersionsERKN4spdy20SpdyAltSvcWireFormat18AlternativeServiceERKNSt3__16vectorIN4quic17ParsedQuicVersionENS5_9allocatorIS8_EEEE(%"class.std::__1::vector.56"* noalias sret, %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* readonly dereferenceable(96), %"class.std::__1::vector.56"* nocapture readonly dereferenceable(24)) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %"class.std::__1::vector.56", %"class.std::__1::vector.56"* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::vector.56", %"class.std::__1::vector.56"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast %"class.std::__1::vector.56"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #8
  %7 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, 1
  %10 = icmp eq i64 %9, 0
  %11 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %1, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService", %"struct.spdy::SpdyAltSvcWireFormat::AlternativeService"* %1, i64 0, i32 4, i32 0, i32 1
  %14 = bitcast %"union.absl::inlined_vector_internal::Storage<unsigned int, 8, std::__1::allocator<unsigned int> >::Data"* %13 to i32*
  %15 = select i1 %10, i32* %14, i32* %12
  %16 = lshr i64 %8, 1
  %17 = getelementptr inbounds i32, i32* %15, i64 %16
  %18 = icmp eq i64 %16, 0
  br i1 %18, label %182, label %19

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.std::__1::vector.56", %"class.std::__1::vector.56"* %2, i64 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.std::__1::vector.56", %"class.std::__1::vector.56"* %2, i64 0, i32 0, i32 1
  %22 = bitcast %"struct.quic::ParsedQuicVersion"** %4 to i64*
  %23 = bitcast %"class.std::__1::vector.56"* %0 to i64*
  %24 = bitcast %"struct.quic::ParsedQuicVersion"** %5 to i64*
  br label %25

25:                                               ; preds = %19, %31
  %26 = phi i32* [ %15, %19 ], [ %32, %31 ]
  %27 = load i32, i32* %26, align 4
  %28 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %20, align 8
  %29 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %21, align 8
  %30 = icmp eq %"struct.quic::ParsedQuicVersion"* %28, %29
  br i1 %30, label %31, label %34

31:                                               ; preds = %179, %25
  %32 = getelementptr inbounds i32, i32* %26, i64 1
  %33 = icmp eq i32* %32, %17
  br i1 %33, label %182, label %25

34:                                               ; preds = %25, %179
  %35 = phi %"struct.quic::ParsedQuicVersion"* [ %180, %179 ], [ %28, %25 ]
  %36 = tail call zeroext i1 @_ZNK4quic17ParsedQuicVersion14UsesQuicCryptoEv(%"struct.quic::ParsedQuicVersion"* %35) #8
  br i1 %36, label %37, label %179

37:                                               ; preds = %34
  %38 = tail call zeroext i1 @_ZNK4quic17ParsedQuicVersion26SupportsGoogleAltSvcFormatEv(%"struct.quic::ParsedQuicVersion"* %35) #8
  br i1 %38, label %39, label %179

39:                                               ; preds = %37
  %40 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %35, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, %27
  br i1 %42, label %43, label %179

43:                                               ; preds = %39
  %44 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %4, align 8
  %45 = load %"struct.quic::ParsedQuicVersion"*, %"struct.quic::ParsedQuicVersion"** %5, align 8
  %46 = icmp eq %"struct.quic::ParsedQuicVersion"* %44, %45
  %47 = ptrtoint %"struct.quic::ParsedQuicVersion"* %44 to i64
  %48 = ptrtoint %"struct.quic::ParsedQuicVersion"* %45 to i64
  br i1 %46, label %56, label %49

49:                                               ; preds = %43
  %50 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %35, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %44, i64 0, i32 0
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %44, i64 0, i32 1
  store i32 %27, i32* %53, align 4
  %54 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %44, i64 1
  %55 = ptrtoint %"struct.quic::ParsedQuicVersion"* %54 to i64
  store i64 %55, i64* %22, align 8
  br label %166

56:                                               ; preds = %43
  %57 = load i64, i64* %23, align 8
  %58 = sub i64 %47, %57
  %59 = ashr exact i64 %58, 3
  %60 = add nsw i64 %59, 1
  %61 = icmp ugt i64 %60, 2305843009213693951
  %62 = inttoptr i64 %57 to %"struct.quic::ParsedQuicVersion"*
  br i1 %61, label %63, label %65

63:                                               ; preds = %56
  %64 = bitcast %"class.std::__1::vector.56"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %64) #9
  unreachable

65:                                               ; preds = %56
  %66 = sub i64 %48, %57
  %67 = ashr exact i64 %66, 3
  %68 = icmp ult i64 %67, 1152921504606846975
  br i1 %68, label %69, label %77

69:                                               ; preds = %65
  %70 = ashr exact i64 %66, 2
  %71 = icmp ult i64 %70, %60
  %72 = select i1 %71, i64 %60, i64 %70
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %83, label %74

74:                                               ; preds = %69
  %75 = icmp ugt i64 %72, 2305843009213693951
  br i1 %75, label %76, label %77

76:                                               ; preds = %74
  tail call void @abort() #9
  unreachable

77:                                               ; preds = %74, %65
  %78 = phi i64 [ %72, %74 ], [ 2305843009213693951, %65 ]
  %79 = shl i64 %78, 3
  %80 = tail call i8* @_Znwm(i64 %79) #10
  %81 = bitcast i8* %80 to %"struct.quic::ParsedQuicVersion"*
  %82 = load i32, i32* %40, align 4
  br label %83

83:                                               ; preds = %77, %69
  %84 = phi i32 [ %82, %77 ], [ %27, %69 ]
  %85 = phi i64 [ %78, %77 ], [ 0, %69 ]
  %86 = phi %"struct.quic::ParsedQuicVersion"* [ %81, %77 ], [ null, %69 ]
  %87 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %86, i64 %59
  %88 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %86, i64 %85
  %89 = ptrtoint %"struct.quic::ParsedQuicVersion"* %88 to i64
  %90 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %35, i64 0, i32 0
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %87, i64 0, i32 0
  store i32 %91, i32* %92, align 4
  %93 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %86, i64 %59, i32 1
  store i32 %84, i32* %93, align 4
  %94 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %87, i64 1
  %95 = ptrtoint %"struct.quic::ParsedQuicVersion"* %94 to i64
  %96 = icmp eq %"struct.quic::ParsedQuicVersion"* %44, %62
  br i1 %96, label %159, label %97

97:                                               ; preds = %83
  %98 = getelementptr %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %44, i64 -1
  %99 = bitcast %"struct.quic::ParsedQuicVersion"* %98 to i8*
  %100 = sub i64 0, %57
  %101 = getelementptr i8, i8* %99, i64 %100
  %102 = ptrtoint i8* %101 to i64
  %103 = lshr i64 %102, 3
  %104 = add nuw nsw i64 %103, 1
  %105 = and i64 %104, 3
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %121, label %107

107:                                              ; preds = %97, %107
  %108 = phi %"struct.quic::ParsedQuicVersion"* [ %118, %107 ], [ %87, %97 ]
  %109 = phi %"struct.quic::ParsedQuicVersion"* [ %111, %107 ], [ %44, %97 ]
  %110 = phi i64 [ %119, %107 ], [ %105, %97 ]
  %111 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %109, i64 -1
  %112 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %111, i64 0, i32 0
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %109, i64 -1, i32 1
  %115 = load i32, i32* %114, align 4
  %116 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %108, i64 -1, i32 0
  store i32 %113, i32* %116, align 4
  %117 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %108, i64 -1, i32 1
  store i32 %115, i32* %117, align 4
  %118 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %108, i64 -1
  %119 = add i64 %110, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %107, !llvm.loop !2

121:                                              ; preds = %107, %97
  %122 = phi %"struct.quic::ParsedQuicVersion"* [ undef, %97 ], [ %118, %107 ]
  %123 = phi %"struct.quic::ParsedQuicVersion"* [ %87, %97 ], [ %118, %107 ]
  %124 = phi %"struct.quic::ParsedQuicVersion"* [ %44, %97 ], [ %111, %107 ]
  %125 = icmp ult i8* %101, inttoptr (i64 24 to i8*)
  br i1 %125, label %156, label %126

126:                                              ; preds = %121, %126
  %127 = phi %"struct.quic::ParsedQuicVersion"* [ %154, %126 ], [ %123, %121 ]
  %128 = phi %"struct.quic::ParsedQuicVersion"* [ %147, %126 ], [ %124, %121 ]
  %129 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %128, i64 -1, i32 0
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %128, i64 -1, i32 1
  %132 = load i32, i32* %131, align 4
  %133 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %127, i64 -1, i32 0
  store i32 %130, i32* %133, align 4
  %134 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %127, i64 -1, i32 1
  store i32 %132, i32* %134, align 4
  %135 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %128, i64 -2, i32 0
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %128, i64 -2, i32 1
  %138 = load i32, i32* %137, align 4
  %139 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %127, i64 -2, i32 0
  store i32 %136, i32* %139, align 4
  %140 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %127, i64 -2, i32 1
  store i32 %138, i32* %140, align 4
  %141 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %128, i64 -3, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %128, i64 -3, i32 1
  %144 = load i32, i32* %143, align 4
  %145 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %127, i64 -3, i32 0
  store i32 %142, i32* %145, align 4
  %146 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %127, i64 -3, i32 1
  store i32 %144, i32* %146, align 4
  %147 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %128, i64 -4
  %148 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %147, i64 0, i32 0
  %149 = load i32, i32* %148, align 4
  %150 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %128, i64 -4, i32 1
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %127, i64 -4, i32 0
  store i32 %149, i32* %152, align 4
  %153 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %127, i64 -4, i32 1
  store i32 %151, i32* %153, align 4
  %154 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %127, i64 -4
  %155 = icmp eq %"struct.quic::ParsedQuicVersion"* %147, %62
  br i1 %155, label %156, label %126

156:                                              ; preds = %126, %121
  %157 = phi %"struct.quic::ParsedQuicVersion"* [ %122, %121 ], [ %154, %126 ]
  %158 = load i64, i64* %23, align 8
  br label %159

159:                                              ; preds = %83, %156
  %160 = phi %"struct.quic::ParsedQuicVersion"* [ %157, %156 ], [ %87, %83 ]
  %161 = phi i64 [ %158, %156 ], [ %47, %83 ]
  %162 = ptrtoint %"struct.quic::ParsedQuicVersion"* %160 to i64
  store i64 %162, i64* %23, align 8
  store i64 %95, i64* %22, align 8
  store i64 %89, i64* %24, align 8
  %163 = icmp eq i64 %161, 0
  br i1 %163, label %166, label %164

164:                                              ; preds = %159
  %165 = inttoptr i64 %161 to i8*
  tail call void @_ZdlPv(i8* %165) #10
  br label %166

166:                                              ; preds = %164, %159, %49
  %167 = load atomic i64, i64* @_ZZN3net12_GLOBAL__N_118RecordAltSvcFormatENS0_12AltSvcFormatEE24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %168 = inttoptr i64 %167 to %"class.base::HistogramBase"*
  %169 = icmp eq i64 %167, 0
  br i1 %169, label %170, label %173

170:                                              ; preds = %166
  %171 = tail call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i32 1, i32 2, i32 3, i32 1) #8
  %172 = ptrtoint %"class.base::HistogramBase"* %171 to i64
  store atomic i64 %172, i64* @_ZZN3net12_GLOBAL__N_118RecordAltSvcFormatENS0_12AltSvcFormatEE24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %173

173:                                              ; preds = %166, %170
  %174 = phi %"class.base::HistogramBase"* [ %168, %166 ], [ %171, %170 ]
  %175 = bitcast %"class.base::HistogramBase"* %174 to void (%"class.base::HistogramBase"*, i32)***
  %176 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %175, align 8
  %177 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %176, i64 6
  %178 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %177, align 8
  tail call void %178(%"class.base::HistogramBase"* %174, i32 0) #8
  br label %179

179:                                              ; preds = %173, %39, %37, %34
  %180 = getelementptr inbounds %"struct.quic::ParsedQuicVersion", %"struct.quic::ParsedQuicVersion"* %35, i64 1
  %181 = icmp eq %"struct.quic::ParsedQuicVersion"* %180, %29
  br i1 %181, label %31, label %34

182:                                              ; preds = %31, %3
  ret void
}

declare zeroext i1 @_ZNK4quic17ParsedQuicVersion14UsesQuicCryptoEv(%"struct.quic::ParsedQuicVersion"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK4quic17ParsedQuicVersion26SupportsGoogleAltSvcFormatEv(%"struct.quic::ParsedQuicVersion"*) local_unnamed_addr #2

declare %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8*, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
