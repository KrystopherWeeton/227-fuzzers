; ModuleID = '../../base/memory/madv_free_discardable_memory_posix.cc'
source_filename = "../../base/memory/madv_free_discardable_memory_posix.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::MadvFreeDiscardableMemoryPosix" = type { %"class.base::DiscardableMemory", i64, i64, %"struct.std::__1::atomic"*, i8*, i8, i8, %"class.std::__1::vector" }
%"class.base::DiscardableMemory" = type { i32 (...)** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::atomic.1"*, %"struct.std::__1::atomic.1"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::atomic.1"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.base::trace_event::MemoryAllocatorDump" = type { %"class.std::__1::basic_string", %"class.base::trace_event::MemoryAllocatorDumpGuid", i32, i32, %"class.absl::optional", %"class.std::__1::vector.13" }
%"class.base::trace_event::MemoryAllocatorDumpGuid" = type { i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.12 }
%union.anon.12 = type { i64 }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.base::trace_event::MemoryAllocatorDump::Entry"*, %"struct.base::trace_event::MemoryAllocatorDump::Entry"*, %"class.std::__1::__compressed_pair.15" }
%"struct.base::trace_event::MemoryAllocatorDump::Entry" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i64, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.base::trace_event::MemoryAllocatorDump::Entry"* }
%"class.base::trace_event::ProcessMemoryDump" = type { %"class.base::UnguessableToken", %"class.std::__1::map", %"class.std::__1::map.28", %"struct.base::trace_event::MemoryDumpArgs", %"class.std::__1::unique_ptr" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.20", %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i64 }
%"class.std::__1::map.28" = type { %"class.std::__1::__tree.29" }
%"class.std::__1::__tree.29" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.30", %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.base::trace_event::MemoryDumpArgs" = type { i32, i32, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.base::trace_event::MemoryAllocatorDump"* }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { i8*, i8*, %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { i8* }

@_ZTVN4base30MadvFreeDiscardableMemoryPosixE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::MadvFreeDiscardableMemoryPosix"*)* @_ZN4base30MadvFreeDiscardableMemoryPosixD2Ev to i8*), i8* bitcast (void (%"class.base::MadvFreeDiscardableMemoryPosix"*)* @_ZN4base30MadvFreeDiscardableMemoryPosixD0Ev to i8*), i8* bitcast (i1 (%"class.base::MadvFreeDiscardableMemoryPosix"*)* @_ZN4base30MadvFreeDiscardableMemoryPosix4LockEv to i8*), i8* bitcast (void (%"class.base::MadvFreeDiscardableMemoryPosix"*)* @_ZN4base30MadvFreeDiscardableMemoryPosix6UnlockEv to i8*), i8* bitcast (i8* (%"class.base::MadvFreeDiscardableMemoryPosix"*)* @_ZNK4base30MadvFreeDiscardableMemoryPosix4dataEv to i8*), i8* bitcast (void (%"class.base::MadvFreeDiscardableMemoryPosix"*)* @_ZN4base30MadvFreeDiscardableMemoryPosix17DiscardForTestingEv to i8*), i8* bitcast (%"class.base::trace_event::MemoryAllocatorDump"* (%"class.base::MadvFreeDiscardableMemoryPosix"*, i8*, %"class.base::trace_event::ProcessMemoryDump"*)* @_ZNK4base30MadvFreeDiscardableMemoryPosix25CreateMemoryAllocatorDumpEPKcPNS_11trace_event17ProcessMemoryDumpE to i8*)] }, align 8
@.str = private unnamed_addr constant [26 x i8] c"discardable/segment_0x%lX\00", align 1
@_ZN4base11trace_event19MemoryAllocatorDump9kNameSizeE = external constant [0 x i8], align 1
@_ZN4base11trace_event19MemoryAllocatorDump11kUnitsBytesE = external constant [0 x i8], align 1
@_ZN4base11trace_event19MemoryAllocatorDump16kNameObjectCountE = external constant [0 x i8], align 1
@_ZN4base11trace_event19MemoryAllocatorDump13kUnitsObjectsE = external constant [0 x i8], align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"wasted_size\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"locked_size\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"page_count\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"discarded_size\00", align 1
@.str.5 = private unnamed_addr constant [56 x i8] c"../../base/memory/madv_free_discardable_memory_posix.cc\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"!retval\00", align 1
@_ZZN4base18GetMadvFreeSupportEvE16kMadvFreeSupport = internal unnamed_addr global i32 0, align 4
@_ZGVZN4base18GetMadvFreeSupportEvE16kMadvFreeSupport = internal global i64 0, align 8
@.str.7 = private unnamed_addr constant [19 x i8] c"data != MAP_FAILED\00", align 1
@.str.8 = private unnamed_addr constant [41 x i8] c"!munmap(dummy_page, base::GetPageSize())\00", align 1

@_ZN4base30MadvFreeDiscardableMemoryPosixC1EmPNSt3__16atomicImEE = hidden unnamed_addr alias void (%"class.base::MadvFreeDiscardableMemoryPosix"*, i64, %"struct.std::__1::atomic"*), void (%"class.base::MadvFreeDiscardableMemoryPosix"*, i64, %"struct.std::__1::atomic"*)* @_ZN4base30MadvFreeDiscardableMemoryPosixC2EmPNSt3__16atomicImEE
@_ZN4base30MadvFreeDiscardableMemoryPosixD1Ev = hidden unnamed_addr alias void (%"class.base::MadvFreeDiscardableMemoryPosix"*), void (%"class.base::MadvFreeDiscardableMemoryPosix"*)* @_ZN4base30MadvFreeDiscardableMemoryPosixD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base30MadvFreeDiscardableMemoryPosixC2EmPNSt3__16atomicImEE(%"class.base::MadvFreeDiscardableMemoryPosix"*, i64, %"struct.std::__1::atomic"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 0
  tail call void @_ZN4base17DiscardableMemoryC2Ev(%"class.base::DiscardableMemory"* %5) #11
  %6 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4base30MadvFreeDiscardableMemoryPosixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 1
  store i64 %1, i64* %7, align 8
  %8 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 2
  %9 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %10 = add i64 %1, -1
  %11 = add i64 %10, %9
  %12 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %13 = udiv i64 %11, %12
  store i64 %13, i64* %8, align 8
  %14 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 3
  store %"struct.std::__1::atomic"* %2, %"struct.std::__1::atomic"** %14, align 8
  %15 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 5
  store i8 1, i8* %15, align 8
  %16 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 6
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 7
  %18 = load i64, i64* %7, align 8
  %19 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %20 = add i64 %18, -1
  %21 = add i64 %20, %19
  %22 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %23 = udiv i64 %21, %22
  %24 = bitcast %"class.std::__1::vector"* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #11
  %25 = icmp ugt i64 %22, %21
  br i1 %25, label %47, label %26

26:                                               ; preds = %3
  %27 = icmp ugt i64 %23, 2305843009213693951
  br i1 %27, label %28, label %30

28:                                               ; preds = %26
  %29 = bitcast %"class.std::__1::vector"* %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #12
  unreachable

30:                                               ; preds = %26
  %31 = shl i64 %23, 3
  %32 = tail call i8* @_Znwm(i64 %31) #13
  %33 = bitcast i8* %32 to %"struct.std::__1::atomic.1"*
  %34 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 7, i32 0, i32 1
  %35 = bitcast %"class.std::__1::vector"* %17 to i8**
  store i8* %32, i8** %35, align 8
  %36 = getelementptr inbounds %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1"* %33, i64 %23
  %37 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store %"struct.std::__1::atomic.1"* %36, %"struct.std::__1::atomic.1"** %37, align 8
  %38 = bitcast %"struct.std::__1::atomic.1"** %34 to i64*
  %39 = ptrtoint i8* %32 to i64
  %40 = add nsw i64 %23, -1
  %41 = getelementptr %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1"* %33, i64 %40, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = ptrtoint i64* %41 to i64
  %43 = sub i64 8, %39
  %44 = add i64 %43, %42
  %45 = and i64 %44, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 0, i64 %45, i1 false) #11
  %46 = ptrtoint %"struct.std::__1::atomic.1"* %36 to i64
  store i64 %46, i64* %38, align 8
  br label %47

47:                                               ; preds = %3, %30
  %48 = load i64, i64* %8, align 8
  %49 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %50 = mul i64 %49, %48
  %51 = tail call i8* @mmap64(i8* null, i64 %50, i32 3, i32 34, i32 -1, i64 0) #11
  %52 = icmp eq i8* %51, inttoptr (i64 -1 to i8*)
  br i1 %52, label %53, label %56

53:                                               ; preds = %47
  %54 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %54) #11
  call void @_ZN7logging10CheckError6PCheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0)) #11
  %55 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %54) #11
  br label %56

56:                                               ; preds = %47, %53
  %57 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 4
  store i8* %51, i8** %57, align 8
  %58 = load i64, i64* %7, align 8
  %59 = bitcast %"struct.std::__1::atomic"** %14 to %"struct.std::__1::__atomic_base"**
  %60 = load %"struct.std::__1::__atomic_base"*, %"struct.std::__1::__atomic_base"** %59, align 8
  %61 = getelementptr inbounds %"struct.std::__1::__atomic_base", %"struct.std::__1::__atomic_base"* %60, i64 0, i32 0, i32 0, i32 0, i32 0
  %62 = atomicrmw add i64* %61, i64 %58 seq_cst
  ret void
}

declare void @_ZN4base17DiscardableMemoryC2Ev(%"class.base::DiscardableMemory"*) unnamed_addr #1

declare i64 @_ZN4base11GetPageSizeEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base30MadvFreeDiscardableMemoryPosixD2Ev(%"class.base::MadvFreeDiscardableMemoryPosix"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4base30MadvFreeDiscardableMemoryPosixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %25, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %11 = mul i64 %10, %9
  %12 = tail call i32 @munmap(i8* nonnull %5, i64 %11) #11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %7
  %15 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #11
  call void @_ZN7logging10CheckError6PCheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i64 0, i64 0), i32 324, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #11
  %16 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #11
  br label %17

17:                                               ; preds = %14, %7
  store i8* null, i8** %4, align 8
  %18 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 3
  %21 = bitcast %"struct.std::__1::atomic"** %20 to %"struct.std::__1::__atomic_base"**
  %22 = load %"struct.std::__1::__atomic_base"*, %"struct.std::__1::__atomic_base"** %21, align 8
  %23 = getelementptr inbounds %"struct.std::__1::__atomic_base", %"struct.std::__1::__atomic_base"* %22, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw sub i64* %23, i64 %19 seq_cst
  br label %25

25:                                               ; preds = %1, %17
  %26 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 7, i32 0, i32 0
  %27 = load %"struct.std::__1::atomic.1"*, %"struct.std::__1::atomic.1"** %26, align 8
  %28 = icmp eq %"struct.std::__1::atomic.1"* %27, null
  br i1 %28, label %34, label %29

29:                                               ; preds = %25
  %30 = ptrtoint %"struct.std::__1::atomic.1"* %27 to i64
  %31 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 7, i32 0, i32 1
  %32 = bitcast %"struct.std::__1::atomic.1"** %31 to i64*
  store i64 %30, i64* %32, align 8
  %33 = bitcast %"struct.std::__1::atomic.1"* %27 to i8*
  call void @_ZdlPv(i8* %33) #13
  br label %34

34:                                               ; preds = %25, %29
  %35 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 0
  call void @_ZN4base17DiscardableMemoryD2Ev(%"class.base::DiscardableMemory"* %35) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base30MadvFreeDiscardableMemoryPosix10DeallocateEv(%"class.base::MadvFreeDiscardableMemoryPosix"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %24, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %10 = mul i64 %9, %8
  %11 = tail call i32 @munmap(i8* nonnull %4, i64 %10) #11
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %6
  %14 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #11
  call void @_ZN7logging10CheckError6PCheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i64 0, i64 0), i32 324, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #11
  %15 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #11
  br label %16

16:                                               ; preds = %6, %13
  store i8* null, i8** %3, align 8
  %17 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 3
  %20 = bitcast %"struct.std::__1::atomic"** %19 to %"struct.std::__1::__atomic_base"**
  %21 = load %"struct.std::__1::__atomic_base"*, %"struct.std::__1::__atomic_base"** %20, align 8
  %22 = getelementptr inbounds %"struct.std::__1::__atomic_base", %"struct.std::__1::__atomic_base"* %21, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw sub i64* %22, i64 %18 seq_cst
  br label %24

24:                                               ; preds = %1, %16
  %25 = phi i1 [ true, %16 ], [ false, %1 ]
  ret i1 %25
}

; Function Attrs: nounwind
declare void @_ZN4base17DiscardableMemoryD2Ev(%"class.base::DiscardableMemory"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base30MadvFreeDiscardableMemoryPosixD0Ev(%"class.base::MadvFreeDiscardableMemoryPosix"*) unnamed_addr #0 align 2 {
  tail call void @_ZN4base30MadvFreeDiscardableMemoryPosixD2Ev(%"class.base::MadvFreeDiscardableMemoryPosix"* %0) #11
  %2 = bitcast %"class.base::MadvFreeDiscardableMemoryPosix"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base30MadvFreeDiscardableMemoryPosix4LockEv(%"class.base::MadvFreeDiscardableMemoryPosix"* nocapture) unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %63, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %61, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 7, i32 0, i32 0
  %12 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %13 = load %"struct.std::__1::atomic.1"*, %"struct.std::__1::atomic.1"** %11, align 8
  %14 = getelementptr inbounds %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i64, i64* %14 seq_cst, align 8
  %16 = bitcast i8* %4 to i64*
  %17 = cmpxchg i64* %16, i64 1, i64 %15 monotonic monotonic
  %18 = extractvalue { i64, i1 } %17, 1
  br i1 %18, label %22, label %19

19:                                               ; preds = %27, %10
  %20 = phi i64 [ 0, %10 ], [ %24, %27 ]
  %21 = load i64, i64* %7, align 8
  br label %38

22:                                               ; preds = %10, %27
  %23 = phi i64 [ %24, %27 ], [ 0, %10 ]
  %24 = add nuw i64 %23, 1
  %25 = load i64, i64* %7, align 8
  %26 = icmp ult i64 %24, %25
  br i1 %26, label %27, label %38

27:                                               ; preds = %22
  %28 = load i8*, i8** %3, align 8
  %29 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %30 = mul i64 %29, %24
  %31 = getelementptr inbounds i8, i8* %28, i64 %30
  %32 = load %"struct.std::__1::atomic.1"*, %"struct.std::__1::atomic.1"** %11, align 8
  %33 = getelementptr inbounds %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1"* %32, i64 %24, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i64, i64* %33 seq_cst, align 8
  %35 = bitcast i8* %31 to i64*
  %36 = cmpxchg i64* %35, i64 1, i64 %34 monotonic monotonic
  %37 = extractvalue { i64, i1 } %36, 1
  br i1 %37, label %22, label %19

38:                                               ; preds = %22, %19
  %39 = phi i64 [ %21, %19 ], [ %25, %22 ]
  %40 = phi i64 [ %20, %19 ], [ %24, %22 ]
  %41 = icmp ult i64 %40, %39
  br i1 %41, label %42, label %61

42:                                               ; preds = %38
  %43 = load i8*, i8** %3, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %63, label %45

45:                                               ; preds = %42
  %46 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %47 = mul i64 %46, %39
  %48 = tail call i32 @munmap(i8* nonnull %43, i64 %47) #11
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %53, label %50

50:                                               ; preds = %45
  %51 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #11
  call void @_ZN7logging10CheckError6PCheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i64 0, i64 0), i32 324, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #11
  %52 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #11
  br label %53

53:                                               ; preds = %50, %45
  store i8* null, i8** %3, align 8
  %54 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 3
  %57 = bitcast %"struct.std::__1::atomic"** %56 to %"struct.std::__1::__atomic_base"**
  %58 = load %"struct.std::__1::__atomic_base"*, %"struct.std::__1::__atomic_base"** %57, align 8
  %59 = getelementptr inbounds %"struct.std::__1::__atomic_base", %"struct.std::__1::__atomic_base"* %58, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = atomicrmw sub i64* %59, i64 %55 seq_cst
  br label %63

61:                                               ; preds = %6, %38
  %62 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 5
  store i8 1, i8* %62, align 8
  br label %63

63:                                               ; preds = %53, %42, %61, %1
  %64 = phi i1 [ false, %1 ], [ true, %61 ], [ false, %42 ], [ false, %53 ]
  ret i1 %64
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base30MadvFreeDiscardableMemoryPosix8LockPageEm(%"class.base::MadvFreeDiscardableMemoryPosix"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %6 = mul i64 %5, %1
  %7 = getelementptr inbounds i8, i8* %4, i64 %6
  %8 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 7, i32 0, i32 0
  %9 = load %"struct.std::__1::atomic.1"*, %"struct.std::__1::atomic.1"** %8, align 8
  %10 = getelementptr inbounds %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1"* %9, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i64, i64* %10 seq_cst, align 8
  %12 = bitcast i8* %7 to i64*
  %13 = cmpxchg i64* %12, i64 1, i64 %11 monotonic monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  ret i1 %14
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base30MadvFreeDiscardableMemoryPosix6UnlockEv(%"class.base::MadvFreeDiscardableMemoryPosix"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 4
  %7 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 7, i32 0, i32 0
  br label %13

8:                                                ; preds = %13, %1
  %9 = phi i64 [ 0, %1 ], [ %24, %13 ]
  %10 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 6
  %11 = load i8, i8* %10, align 1, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %26, label %32

13:                                               ; preds = %5, %13
  %14 = phi i64 [ 0, %5 ], [ %23, %13 ]
  %15 = load i8*, i8** %6, align 8
  %16 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %17 = mul i64 %16, %14
  %18 = getelementptr inbounds i8, i8* %15, i64 %17
  %19 = load %"struct.std::__1::atomic.1"*, %"struct.std::__1::atomic.1"** %7, align 8
  %20 = bitcast i8* %18 to i64*
  %21 = load atomic i64, i64* %20 seq_cst, align 8
  %22 = getelementptr inbounds %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1"* %19, i64 %14, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i64 %21, i64* %22 monotonic, align 8
  store atomic i64 1, i64* %20 monotonic, align 8
  %23 = add nuw i64 %14, 1
  %24 = load i64, i64* %2, align 8
  %25 = icmp ult i64 %23, %24
  br i1 %25, label %13, label %8

26:                                               ; preds = %8
  %27 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 4
  %28 = load i8*, i8** %27, align 8
  %29 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %30 = mul i64 %29, %9
  %31 = tail call i32 @madvise(i8* %28, i64 %30, i32 8) #11
  br label %32

32:                                               ; preds = %8, %26
  %33 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 5
  store i8 0, i8* %33, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base30MadvFreeDiscardableMemoryPosix10UnlockPageEm(%"class.base::MadvFreeDiscardableMemoryPosix"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %6 = mul i64 %5, %1
  %7 = getelementptr inbounds i8, i8* %4, i64 %6
  %8 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 7, i32 0, i32 0
  %9 = load %"struct.std::__1::atomic.1"*, %"struct.std::__1::atomic.1"** %8, align 8
  %10 = bitcast i8* %7 to i64*
  %11 = load atomic i64, i64* %10 seq_cst, align 8
  %12 = getelementptr inbounds %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1"* %9, i64 %1, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i64 %11, i64* %12 monotonic, align 8
  store atomic i64 1, i64* %10 monotonic, align 8
  ret void
}

; Function Attrs: nounwind
declare i32 @madvise(i8*, i64, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK4base30MadvFreeDiscardableMemoryPosix4dataEv(%"class.base::MadvFreeDiscardableMemoryPosix"* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 4
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base30MadvFreeDiscardableMemoryPosix11DiscardPageEm(%"class.base::MadvFreeDiscardableMemoryPosix"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %6 = mul i64 %5, %1
  %7 = getelementptr inbounds i8, i8* %4, i64 %6
  %8 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %9 = tail call i32 @madvise(i8* %7, i64 %8, i32 4) #11
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4base30MadvFreeDiscardableMemoryPosix18IsLockedForTestingEv(%"class.base::MadvFreeDiscardableMemoryPosix"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base30MadvFreeDiscardableMemoryPosix17DiscardForTestingEv(%"class.base::MadvFreeDiscardableMemoryPosix"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %5 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %4
  %8 = tail call i32 @madvise(i8* %3, i64 %7, i32 4) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::trace_event::MemoryAllocatorDump"* @_ZNK4base30MadvFreeDiscardableMemoryPosix25CreateMemoryAllocatorDumpEPKcPNS_11trace_event17ProcessMemoryDumpE(%"class.base::MadvFreeDiscardableMemoryPosix"*, i8* nocapture readonly, %"class.base::trace_event::ProcessMemoryDump"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #11
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = ptrtoint %"class.base::MadvFreeDiscardableMemoryPosix"* %0 to i64
  %9 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i64 %8) #11
  %10 = call %"class.base::trace_event::MemoryAllocatorDump"* @_ZN4base11trace_event17ProcessMemoryDump19CreateAllocatorDumpERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"* %2, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #11
  %11 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 5
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %3
  %15 = call zeroext i1 @_ZNK4base30MadvFreeDiscardableMemoryPosix10IsResidentEv(%"class.base::MadvFreeDiscardableMemoryPosix"* %0) #11
  %16 = xor i1 %15, true
  br label %17

17:                                               ; preds = %3, %14
  %18 = phi i1 [ false, %3 ], [ %16, %14 ]
  %19 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #11
  %20 = call i64 @strlen(i8* %1) #11
  %21 = icmp ugt i64 %20, -17
  br i1 %21, label %22, label %24

22:                                               ; preds = %17
  %23 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %23) #12
  unreachable

24:                                               ; preds = %17
  %25 = icmp ult i64 %20, 23
  br i1 %25, label %35, label %26

26:                                               ; preds = %24
  %27 = add nuw i64 %20, 16
  %28 = and i64 %27, -16
  %29 = call i8* @_Znwm(i64 %28) #13
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %29, i8** %30, align 8
  %31 = or i64 %28, -9223372036854775808
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %31, i64* %32, align 8
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %20, i64* %33, align 8
  %34 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %40

35:                                               ; preds = %24
  %36 = trunc i64 %20 to i8
  %37 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  store i8 %36, i8* %38, align 1
  %39 = icmp eq i64 %20, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %35, %26
  %41 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %37, %35 ], [ %34, %26 ]
  %42 = phi i8* [ %19, %35 ], [ %29, %26 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %42, i8* align 1 %1, i64 %20, i1 false) #11
  br label %43

43:                                               ; preds = %35, %40
  %44 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %37, %35 ], [ %41, %40 ]
  %45 = phi i8* [ %19, %35 ], [ %42, %40 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 %20
  store i8 0, i8* %46, align 1
  %47 = call %"class.base::trace_event::MemoryAllocatorDump"* @_ZN4base11trace_event17ProcessMemoryDump19CreateAllocatorDumpERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"* %2, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5) #11
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  %49 = load i8, i8* %48, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %43
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  call void @_ZdlPv(i8* %53) #13
  br label %54

54:                                               ; preds = %43, %51
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #11
  br i1 %18, label %62, label %55

55:                                               ; preds = %54
  %56 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 1
  %57 = load i64, i64* %56, align 8
  call void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"* %47, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump9kNameSizeE, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump11kUnitsBytesE, i64 0, i64 0), i64 %57) #11
  %58 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 2
  %59 = load i64, i64* %58, align 8
  %60 = call i64 @_ZN4base11GetPageSizeEv() #11
  %61 = mul i64 %60, %59
  br label %63

62:                                               ; preds = %54
  call void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"* %47, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump9kNameSizeE, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump11kUnitsBytesE, i64 0, i64 0), i64 0) #11
  br label %63

63:                                               ; preds = %62, %55
  %64 = phi i64 [ %61, %55 ], [ 0, %62 ]
  call void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"* %10, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump9kNameSizeE, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump11kUnitsBytesE, i64 0, i64 0), i64 %64) #11
  call void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"* %10, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump16kNameObjectCountE, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump13kUnitsObjectsE, i64 0, i64 0), i64 1) #11
  %65 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 2
  %66 = load i64, i64* %65, align 8
  %67 = call i64 @_ZN4base11GetPageSizeEv() #11
  %68 = mul i64 %67, %66
  %69 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 1
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %68, %70
  call void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"* %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump11kUnitsBytesE, i64 0, i64 0), i64 %71) #11
  %72 = load i8, i8* %11, align 8, !range !2
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %76, label %74

74:                                               ; preds = %63
  %75 = load i64, i64* %69, align 8
  br label %76

76:                                               ; preds = %63, %74
  %77 = phi i64 [ %75, %74 ], [ 0, %63 ]
  call void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"* %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump11kUnitsBytesE, i64 0, i64 0), i64 %77) #11
  %78 = load i64, i64* %65, align 8
  call void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"* %10, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump13kUnitsObjectsE, i64 0, i64 0), i64 %78) #11
  br i1 %18, label %79, label %83

79:                                               ; preds = %76
  %80 = load i64, i64* %65, align 8
  %81 = call i64 @_ZN4base11GetPageSizeEv() #11
  %82 = mul i64 %81, %80
  br label %83

83:                                               ; preds = %76, %79
  %84 = phi i64 [ %82, %79 ], [ 0, %76 ]
  call void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"* %10, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump11kUnitsBytesE, i64 0, i64 0), i64 %84) #11
  %85 = getelementptr inbounds %"class.base::trace_event::MemoryAllocatorDump", %"class.base::trace_event::MemoryAllocatorDump"* %47, i64 0, i32 1
  call void @_ZN4base11trace_event17ProcessMemoryDump16AddSuballocationERKNS0_23MemoryAllocatorDumpGuidERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"* %2, %"class.base::trace_event::MemoryAllocatorDumpGuid"* dereferenceable(8) %85, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #11
  %86 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %87 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %86, i64 0, i32 1, i32 0
  %88 = load i8, i8* %87, align 1
  %89 = icmp slt i8 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %83
  %91 = load i8*, i8** %7, align 8
  call void @_ZdlPv(i8* %91) #13
  br label %92

92:                                               ; preds = %83, %90
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #11
  ret %"class.base::trace_event::MemoryAllocatorDump"* %47
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #1

declare %"class.base::trace_event::MemoryAllocatorDump"* @_ZN4base11trace_event17ProcessMemoryDump19CreateAllocatorDumpERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base30MadvFreeDiscardableMemoryPosix11IsDiscardedEv(%"class.base::MadvFreeDiscardableMemoryPosix"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = tail call zeroext i1 @_ZNK4base30MadvFreeDiscardableMemoryPosix10IsResidentEv(%"class.base::MadvFreeDiscardableMemoryPosix"* %0)
  %7 = xor i1 %6, true
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i1 [ false, %1 ], [ %7, %5 ]
  ret i1 %9
}

declare void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"*, i8*, i8*, i64) local_unnamed_addr #1

declare void @_ZN4base11trace_event17ProcessMemoryDump16AddSuballocationERKNS0_23MemoryAllocatorDumpGuidERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"*, %"class.base::trace_event::MemoryAllocatorDumpGuid"* dereferenceable(8), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4base30MadvFreeDiscardableMemoryPosix7IsValidEv(%"class.base::MadvFreeDiscardableMemoryPosix"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = icmp ne i8* %3, null
  ret i1 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base30MadvFreeDiscardableMemoryPosix23SetKeepMemoryForTestingEb(%"class.base::MadvFreeDiscardableMemoryPosix"* nocapture, i1 zeroext) local_unnamed_addr #6 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 6
  store i8 %3, i8* %4, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base30MadvFreeDiscardableMemoryPosix10IsResidentEv(%"class.base::MadvFreeDiscardableMemoryPosix"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::vector.42", align 8
  %3 = bitcast %"class.std::__1::vector.42"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #11
  %4 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %2, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %2, i64 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 24, i1 false) #11
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %23, label %10

10:                                               ; preds = %1
  %11 = icmp slt i64 %8, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %10
  %13 = bitcast %"class.std::__1::vector.42"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %13) #12
  unreachable

14:                                               ; preds = %10
  %15 = tail call i8* @_Znwm(i64 %8) #13
  store i8* %15, i8** %4, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 %8
  store i8* %16, i8** %6, align 8
  %17 = bitcast i8** %5 to i64*
  %18 = ptrtoint i8* %15 to i64
  %19 = sub i64 %8, %18
  %20 = getelementptr i8, i8* %15, i64 %19
  %21 = ptrtoint i8* %20 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %15, i8 0, i64 %21, i1 false) #11
  %22 = ptrtoint i8* %16 to i64
  store i64 %22, i64* %17, align 8
  br label %23

23:                                               ; preds = %1, %14
  %24 = phi i8* [ null, %1 ], [ %15, %14 ]
  %25 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryPosix", %"class.base::MadvFreeDiscardableMemoryPosix"* %0, i64 0, i32 4
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %28 = mul i64 %27, %8
  %29 = tail call i32 @mincore(i8* %26, i64 %28, i8* %24) #11
  %30 = load i64, i64* %7, align 8
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %41, label %34

32:                                               ; preds = %34
  %33 = icmp ult i64 %40, %30
  br i1 %33, label %34, label %41

34:                                               ; preds = %23, %32
  %35 = phi i64 [ %40, %32 ], [ 0, %23 ]
  %36 = getelementptr inbounds i8, i8* %24, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = and i8 %37, 1
  %39 = icmp eq i8 %38, 0
  %40 = add nuw i64 %35, 1
  br i1 %39, label %41, label %32

41:                                               ; preds = %34, %32, %23
  %42 = phi i1 [ true, %23 ], [ true, %32 ], [ false, %34 ]
  %43 = icmp eq i8* %24, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %41
  %45 = ptrtoint i8* %24 to i64
  %46 = bitcast i8** %5 to i64*
  store i64 %45, i64* %46, align 8
  tail call void @_ZdlPv(i8* nonnull %24) #13
  br label %47

47:                                               ; preds = %41, %44
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #11
  ret i1 %42
}

; Function Attrs: nounwind
declare i32 @mincore(i8*, i64, i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @munmap(i8*, i64) local_unnamed_addr #2

declare void @_ZN7logging10CheckError6PCheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4base18GetMadvFreeSupportEv() local_unnamed_addr #0 {
  %1 = alloca %"class.logging::CheckError", align 8
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = load atomic i8, i8* bitcast (i64* @_ZGVZN4base18GetMadvFreeSupportEvE16kMadvFreeSupport to i8*) acquire, align 8
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %32, !prof !3

5:                                                ; preds = %0
  %6 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN4base18GetMadvFreeSupportEvE16kMadvFreeSupport) #11
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %32, label %8

8:                                                ; preds = %5
  %9 = tail call i64 @_ZN4base11GetPageSizeEv() #11
  %10 = tail call i8* @mmap64(i8* null, i64 %9, i32 3, i32 34, i32 -1, i64 0) #11
  %11 = icmp eq i8* %10, inttoptr (i64 -1 to i8*)
  br i1 %11, label %12, label %15

12:                                               ; preds = %8
  %13 = bitcast %"class.logging::CheckError"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #11
  call void @_ZN7logging10CheckError6PCheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %1, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0)) #11
  %14 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %1) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #11
  br label %15

15:                                               ; preds = %12, %8
  store i8 1, i8* %10, align 1
  %16 = call i64 @_ZN4base11GetPageSizeEv() #11
  %17 = call i32 @madvise(i8* %10, i64 %16, i32 8) #11
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %15
  %20 = load i8, i8* %10, align 1
  %21 = icmp ne i8 %20, 0
  %22 = zext i1 %21 to i32
  br label %23

23:                                               ; preds = %19, %15
  %24 = phi i32 [ 0, %15 ], [ %22, %19 ]
  %25 = call i64 @_ZN4base11GetPageSizeEv() #11
  %26 = call i32 @munmap(i8* %10, i64 %25) #11
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %23
  %29 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #11
  call void @_ZN7logging10CheckError6PCheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i64 0, i64 0), i32 66, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.8, i64 0, i64 0)) #11
  %30 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #11
  br label %31

31:                                               ; preds = %23, %28
  store i32 %24, i32* @_ZZN4base18GetMadvFreeSupportEvE16kMadvFreeSupport, align 4
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN4base18GetMadvFreeSupportEvE16kMadvFreeSupport) #11
  br label %32

32:                                               ; preds = %5, %31, %0
  %33 = load i32, i32* @_ZZN4base18GetMadvFreeSupportEvE16kMadvFreeSupport, align 4
  ret i32 %33
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #7

; Function Attrs: nounwind
declare i8* @mmap64(i8*, i64, i32, i32, i32, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 1048575}
