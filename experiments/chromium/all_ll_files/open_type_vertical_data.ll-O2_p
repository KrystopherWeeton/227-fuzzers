; ModuleID = '../../third_party/blink/renderer/platform/fonts/opentype/open_type_vertical_data.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/opentype/open_type_vertical_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::OpenTypeVerticalData" = type <{ %"class.WTF::RefCounted", [4 x i8], %"class.WTF::HashMap", %"class.WTF::Vector", %"class.WTF::Vector", %"class.WTF::Vector.2", i16, [6 x i8], %"class.WTF::HashMap.7", float, float, i32, [4 x i8] }>
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { i16, i16 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i16*, i32, i32 }
%"class.WTF::Vector.2" = type { %"class.WTF::VectorBuffer.3" }
%"class.WTF::VectorBuffer.3" = type { %"class.WTF::VectorBufferBase.4" }
%"class.WTF::VectorBufferBase.4" = type { i16*, i32, i32 }
%"class.WTF::HashMap.7" = type { %"class.WTF::HashTable.8" }
%"class.WTF::HashTable.8" = type <{ %"struct.WTF::KeyValuePair.11"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.11" = type { i16, i16 }
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.13" }
%"struct.std::__1::atomic.13" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__atomic_base.15" }
%"struct.std::__1::__atomic_base.15" = type { %"struct.std::__1::__cxx_atomic_impl.16" }
%"struct.std::__1::__cxx_atomic_impl.16" = type { %"struct.std::__1::__cxx_atomic_base_impl.17" }
%"struct.std::__1::__cxx_atomic_base_impl.17" = type { i8 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"struct.blink::open_type::HheaTable" = type { %"struct.blink::open_type::UInt32", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", [4 x %"struct.blink::open_type::Int16"], %"struct.blink::open_type::Int16", %"struct.blink::open_type::UInt16" }
%"struct.blink::open_type::UInt32" = type { i32 }
%"struct.blink::open_type::Int16" = type { i16 }
%"struct.blink::open_type::UInt16" = type { i16 }
%"struct.blink::open_type::HmtxTable" = type { [1 x %"struct.blink::open_type::HmtxTable::Entry"] }
%"struct.blink::open_type::HmtxTable::Entry" = type { %"struct.blink::open_type::UInt16", %"struct.blink::open_type::Int16" }
%"struct.blink::open_type::VheaTable" = type { %"struct.blink::open_type::UInt32", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16", [4 x %"struct.blink::open_type::Int16"], %"struct.blink::open_type::Int16", %"struct.blink::open_type::UInt16" }
%"struct.blink::open_type::VORGTable" = type { %"struct.blink::open_type::UInt16", %"struct.blink::open_type::UInt16", %"struct.blink::open_type::Int16", %"struct.blink::open_type::UInt16", [1 x %"struct.blink::open_type::VORGTable::VertOriginYMetrics"] }
%"struct.blink::open_type::VORGTable::VertOriginYMetrics" = type { %"struct.blink::open_type::UInt16", %"struct.blink::open_type::Int16" }
%"struct.blink::open_type::VmtxTable" = type { [1 x %"struct.blink::open_type::VmtxTable::Entry"] }
%"struct.blink::open_type::VmtxTable::Entry" = type { %"struct.blink::open_type::UInt16", %"struct.blink::open_type::Int16" }
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeItEEmm = comdat any

$_ZN3WTF6VectorItLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISA_S5_SB_EEiRsEENS_18HashTableAddResultISC_S2_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE6ExpandEPS2_ = comdat any

$_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE8RehashToEPS2_jSD_ = comdat any

$_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISA_S5_SB_EERKN5blink9open_type6UInt16ERKNSH_5Int16EEENS_18HashTableAddResultISC_S2_EEOT0_OT1_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIsEEmm = comdat any

$_ZN3WTF6VectorIsLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZNK3WTF6VectorItLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZNK3WTF6VectorIsLj0ENS_18PartitionAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameItEEPKcv = private unnamed_addr constant [62 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned short]\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.6 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairItsEEEEPKcv = private unnamed_addr constant [88 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<unsigned short, short>]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIsEEPKcv = private unnamed_addr constant [53 x i8] c"const char *WTF::GetStringWithTypeName() [T = short]\00", align 1

@_ZN5blink20OpenTypeVerticalDataC1E5sk_spI10SkTypefaceE = hidden unnamed_addr alias void (%"class.blink::OpenTypeVerticalData"*, %class.sk_sp*), void (%"class.blink::OpenTypeVerticalData"*, %class.sk_sp*)* @_ZN5blink20OpenTypeVerticalDataC2E5sk_spI10SkTypefaceE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20OpenTypeVerticalDataC2E5sk_spI10SkTypefaceE(%"class.blink::OpenTypeVerticalData"*, %class.sk_sp* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %class.sk_sp, align 8
  %4 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %4, align 4
  %5 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 2
  %6 = bitcast %"class.WTF::HashMap"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 20, i1 false) #7
  %7 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 3
  %8 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 8
  %9 = bitcast %"class.WTF::HashMap.7"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 20, i1 false) #7
  %10 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 9
  store float 0.000000e+00, float* %10, align 8
  %11 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 10
  store float 0.000000e+00, float* %11, align 4
  %12 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 11
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  %14 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %15 = bitcast %"class.WTF::Vector"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 50, i1 false)
  %16 = load %class.SkTypeface*, %class.SkTypeface** %14, align 8
  %17 = icmp eq %class.SkTypeface* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %2
  store %class.SkTypeface* null, %class.SkTypeface** %13, align 8
  call void @_ZN5blink20OpenTypeVerticalData11LoadMetricsE5sk_spI10SkTypefaceE(%"class.blink::OpenTypeVerticalData"* %0, %class.sk_sp* nonnull %3)
  br label %30

19:                                               ; preds = %2
  %20 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %16, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = atomicrmw add i32* %20, i32 1 monotonic
  store %class.SkTypeface* %16, %class.SkTypeface** %13, align 8
  call void @_ZN5blink20OpenTypeVerticalData11LoadMetricsE5sk_spI10SkTypefaceE(%"class.blink::OpenTypeVerticalData"* %0, %class.sk_sp* nonnull %3)
  %22 = atomicrmw add i32* %20, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %30

24:                                               ; preds = %19
  %25 = bitcast %class.SkTypeface* %16 to %class.SkRefCntBase*
  %26 = bitcast %class.SkTypeface* %16 to void (%class.SkRefCntBase*)***
  %27 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %26, align 8
  %28 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %27, i64 2
  %29 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %28, align 8
  tail call void %29(%class.SkRefCntBase* nonnull %25) #7
  br label %30

30:                                               ; preds = %18, %19, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20OpenTypeVerticalData11LoadMetricsE5sk_spI10SkTypefaceE(%"class.blink::OpenTypeVerticalData"*, %class.sk_sp* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %5 = load %class.SkTypeface*, %class.SkTypeface** %4, align 8
  %6 = icmp eq %class.SkTypeface* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  %11 = tail call i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface* %5, i32 1751672161) #7
  %12 = icmp ult i64 %11, 4294967296
  br i1 %12, label %14, label %13, !prof !2

13:                                               ; preds = %10
  tail call void @llvm.trap() #7
  unreachable

14:                                               ; preds = %10
  %15 = trunc i64 %11 to i32
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %25, label %17

17:                                               ; preds = %14
  %18 = icmp ugt i32 %15, 4
  %19 = and i64 %11, 4294967295
  %20 = select i1 %18, i64 %19, i64 4
  %21 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %20) #7
  %22 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %21) #7
  %23 = ptrtoint i8* %22 to i64
  %24 = trunc i64 %21 to i32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 0, i64 %19, i1 false) #7
  br label %25

25:                                               ; preds = %14, %17
  %26 = phi i32 [ %24, %17 ], [ 0, %14 ]
  %27 = phi i64 [ %23, %17 ], [ 0, %14 ]
  %28 = icmp eq i64 %11, 0
  br i1 %28, label %32, label %29

29:                                               ; preds = %25
  %30 = inttoptr i64 %27 to i8*
  %31 = tail call i64 @_ZNK10SkTypeface12getTableDataEjmmPv(%class.SkTypeface* %5, i32 1751672161, i64 0, i64 %11, i8* %30) #7
  br label %32

32:                                               ; preds = %25, %29
  br i1 %6, label %43, label %33

33:                                               ; preds = %32
  %34 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 -1 acq_rel
  %36 = icmp eq i32 %35, 1
  br i1 %36, label %37, label %43

37:                                               ; preds = %33
  %38 = bitcast %class.SkTypeface* %5 to %class.SkRefCntBase*
  %39 = bitcast %class.SkTypeface* %5 to void (%class.SkRefCntBase*)***
  %40 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %39, align 8
  %41 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %40, i64 2
  %42 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %41, align 8
  tail call void %42(%class.SkRefCntBase* nonnull %38) #7
  br label %43

43:                                               ; preds = %32, %33, %37
  %44 = icmp ult i32 %15, 36
  %45 = icmp eq i64 %27, 0
  %46 = or i1 %44, %45
  br i1 %46, label %624, label %47

47:                                               ; preds = %43
  %48 = inttoptr i64 %27 to %"struct.blink::open_type::HheaTable"*
  %49 = getelementptr inbounds %"struct.blink::open_type::HheaTable", %"struct.blink::open_type::HheaTable"* %48, i64 0, i32 13, i32 0
  %50 = load i16, i16* %49, align 2
  %51 = tail call i16 @llvm.bswap.i16(i16 %50) #7
  %52 = icmp eq i16 %50, 0
  br i1 %52, label %627, label %53

53:                                               ; preds = %47
  %54 = load %class.SkTypeface*, %class.SkTypeface** %4, align 8
  %55 = icmp eq %class.SkTypeface* %54, null
  br i1 %55, label %59, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %54, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = atomicrmw add i32* %57, i32 1 monotonic
  br label %59

59:                                               ; preds = %53, %56
  %60 = tail call i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface* %54, i32 1752003704) #7
  %61 = icmp ult i64 %60, 4294967296
  br i1 %61, label %63, label %62, !prof !2

62:                                               ; preds = %59
  tail call void @llvm.trap() #7
  unreachable

63:                                               ; preds = %59
  %64 = trunc i64 %60 to i32
  %65 = icmp ult i32 %15, %64
  br i1 %65, label %66, label %99

66:                                               ; preds = %63
  %67 = icmp ult i32 %26, %64
  br i1 %67, label %68, label %88

68:                                               ; preds = %66
  %69 = lshr i32 %26, 2
  %70 = add nuw i32 %26, 1
  %71 = add i32 %70, %69
  %72 = icmp ugt i32 %71, 4
  %73 = select i1 %72, i32 %71, i32 4
  %74 = icmp ugt i32 %73, %64
  %75 = select i1 %74, i32 %73, i32 %64
  %76 = icmp ult i32 %26, %75
  br i1 %76, label %77, label %88, !prof !2

77:                                               ; preds = %68
  %78 = inttoptr i64 %27 to i8*
  %79 = zext i32 %75 to i64
  %80 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %79) #7
  %81 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %80) #7
  %82 = ptrtoint i8* %81 to i64
  %83 = icmp eq i8* %81, null
  br i1 %83, label %86, label %84, !prof !3

84:                                               ; preds = %77
  %85 = and i64 %11, 4294967295
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %81, i8* nonnull align 1 %78, i64 %85, i1 false) #7
  br label %86

86:                                               ; preds = %77, %84
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %78) #7
  %87 = trunc i64 %80 to i32
  br label %88

88:                                               ; preds = %86, %68, %66
  %89 = phi i32 [ %87, %86 ], [ %26, %68 ], [ %26, %66 ]
  %90 = phi i64 [ %82, %86 ], [ %27, %68 ], [ %27, %66 ]
  %91 = inttoptr i64 %90 to i8*
  %92 = and i64 %11, 4294967295
  %93 = getelementptr inbounds i8, i8* %91, i64 %92
  %94 = and i64 %60, 4294967295
  %95 = getelementptr inbounds i8, i8* %91, i64 %94
  %96 = ptrtoint i8* %95 to i64
  %97 = ptrtoint i8* %93 to i64
  %98 = sub i64 %96, %97
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 0, i64 %98, i1 false) #7
  br label %99

99:                                               ; preds = %63, %88
  %100 = phi i32 [ %89, %88 ], [ %26, %63 ]
  %101 = phi i64 [ %90, %88 ], [ %27, %63 ]
  %102 = icmp eq i64 %60, 0
  br i1 %102, label %106, label %103

103:                                              ; preds = %99
  %104 = inttoptr i64 %101 to i8*
  %105 = tail call i64 @_ZNK10SkTypeface12getTableDataEjmmPv(%class.SkTypeface* %54, i32 1752003704, i64 0, i64 %60, i8* %104) #7
  br label %106

106:                                              ; preds = %99, %103
  br i1 %55, label %117, label %107

107:                                              ; preds = %106
  %108 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %54, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %109 = atomicrmw add i32* %108, i32 -1 acq_rel
  %110 = icmp eq i32 %109, 1
  br i1 %110, label %111, label %117

111:                                              ; preds = %107
  %112 = bitcast %class.SkTypeface* %54 to %class.SkRefCntBase*
  %113 = bitcast %class.SkTypeface* %54 to void (%class.SkRefCntBase*)***
  %114 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %113, align 8
  %115 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %114, i64 2
  %116 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %115, align 8
  tail call void %116(%class.SkRefCntBase* nonnull %112) #7
  br label %117

117:                                              ; preds = %106, %107, %111
  %118 = zext i16 %51 to i64
  %119 = and i64 %60, 4294967295
  %120 = shl nuw nsw i64 %118, 2
  %121 = icmp ugt i64 %120, %119
  %122 = inttoptr i64 %101 to %"struct.blink::open_type::HmtxTable"*
  %123 = icmp eq i64 %101, 0
  %124 = or i1 %121, %123
  br i1 %124, label %624, label %125

125:                                              ; preds = %117
  %126 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 3
  %127 = zext i16 %51 to i32
  %128 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %129 = load i32, i32* %128, align 4
  %130 = icmp ult i32 %129, %127
  br i1 %130, label %131, label %185

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %133 = load i32, i32* %132, align 8
  %134 = icmp ult i32 %133, %127
  br i1 %134, label %135, label %174

135:                                              ; preds = %131
  %136 = lshr i32 %133, 2
  %137 = add nuw i32 %133, 1
  %138 = add i32 %137, %136
  %139 = icmp ugt i32 %138, 4
  %140 = select i1 %139, i32 %138, i32 4
  %141 = icmp ugt i32 %140, %127
  %142 = select i1 %141, i32 %140, i32 %127
  %143 = icmp ult i32 %133, %142
  br i1 %143, label %144, label %174, !prof !2

144:                                              ; preds = %135
  %145 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %126, i64 0, i32 0, i32 0, i32 0
  %146 = load i16*, i16** %145, align 8
  %147 = icmp eq i16* %146, null
  %148 = zext i32 %142 to i64
  %149 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeItEEmm(i64 %148) #7
  %150 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %149, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameItEEPKcv, i64 0, i64 0)) #7
  br i1 %147, label %151, label %156

151:                                              ; preds = %144
  %152 = ptrtoint i8* %150 to i64
  %153 = bitcast %"class.WTF::Vector"* %126 to i64*
  store atomic i64 %152, i64* %153 monotonic, align 8
  %154 = lshr i64 %149, 1
  %155 = trunc i64 %154 to i32
  store i32 %155, i32* %132, align 8
  br label %174

156:                                              ; preds = %144
  %157 = lshr i64 %149, 1
  %158 = ptrtoint i8* %150 to i64
  %159 = load i16*, i16** %145, align 8
  %160 = icmp ne i8* %150, null
  %161 = icmp ne i16* %159, null
  %162 = and i1 %160, %161
  %163 = bitcast i16* %159 to i8*
  br i1 %162, label %164, label %170, !prof !2

164:                                              ; preds = %156
  %165 = load i32, i32* %128, align 4
  %166 = zext i32 %165 to i64
  %167 = shl nuw nsw i64 %166, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %150, i8* nonnull align 2 %163, i64 %167, i1 false) #7
  %168 = bitcast %"class.WTF::Vector"* %126 to i8**
  %169 = load i8*, i8** %168, align 8
  br label %170

170:                                              ; preds = %164, %156
  %171 = phi i8* [ %169, %164 ], [ %163, %156 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %171) #7
  %172 = bitcast %"class.WTF::Vector"* %126 to i64*
  store atomic i64 %158, i64* %172 monotonic, align 8
  %173 = trunc i64 %157 to i32
  store i32 %173, i32* %132, align 8
  br label %174

174:                                              ; preds = %170, %151, %135, %131
  %175 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %126, i64 0, i32 0, i32 0, i32 0
  %176 = load i16*, i16** %175, align 8
  %177 = load i32, i32* %128, align 4
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds i16, i16* %176, i64 %178
  %180 = getelementptr inbounds i16, i16* %176, i64 %118
  %181 = bitcast i16* %179 to i8*
  %182 = ptrtoint i16* %180 to i64
  %183 = ptrtoint i16* %179 to i64
  %184 = sub i64 %182, %183
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %181, i8 0, i64 %184, i1 false) #7
  br label %185

185:                                              ; preds = %174, %125
  store i32 %127, i32* %128, align 4
  br label %252

186:                                              ; preds = %252
  %187 = load %class.SkTypeface*, %class.SkTypeface** %4, align 8
  %188 = icmp eq %class.SkTypeface* %187, null
  br i1 %188, label %192, label %189

189:                                              ; preds = %186
  %190 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %187, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %191 = atomicrmw add i32* %190, i32 1 monotonic
  br label %192

192:                                              ; preds = %186, %189
  %193 = tail call i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface* %187, i32 1986553185) #7
  %194 = icmp ult i64 %193, 4294967296
  br i1 %194, label %196, label %195, !prof !2

195:                                              ; preds = %192
  tail call void @llvm.trap() #7
  unreachable

196:                                              ; preds = %192
  %197 = trunc i64 %193 to i32
  %198 = icmp ult i32 %64, %197
  br i1 %198, label %199, label %230

199:                                              ; preds = %196
  %200 = icmp ult i32 %100, %197
  br i1 %200, label %201, label %220

201:                                              ; preds = %199
  %202 = lshr i32 %100, 2
  %203 = add nuw i32 %100, 1
  %204 = add i32 %203, %202
  %205 = icmp ugt i32 %204, 4
  %206 = select i1 %205, i32 %204, i32 4
  %207 = icmp ugt i32 %206, %197
  %208 = select i1 %207, i32 %206, i32 %197
  %209 = icmp ult i32 %100, %208
  br i1 %209, label %210, label %220, !prof !2

210:                                              ; preds = %201
  %211 = inttoptr i64 %101 to i8*
  %212 = zext i32 %208 to i64
  %213 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %212) #7
  %214 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %213) #7
  %215 = ptrtoint i8* %214 to i64
  %216 = icmp eq i8* %214, null
  br i1 %216, label %218, label %217, !prof !3

217:                                              ; preds = %210
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %214, i8* nonnull align 1 %211, i64 %119, i1 false) #7
  br label %218

218:                                              ; preds = %210, %217
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %211) #7
  %219 = trunc i64 %213 to i32
  br label %220

220:                                              ; preds = %218, %201, %199
  %221 = phi i32 [ %219, %218 ], [ %100, %201 ], [ %100, %199 ]
  %222 = phi i64 [ %215, %218 ], [ %101, %201 ], [ %101, %199 ]
  %223 = inttoptr i64 %222 to i8*
  %224 = getelementptr inbounds i8, i8* %223, i64 %119
  %225 = and i64 %193, 4294967295
  %226 = getelementptr inbounds i8, i8* %223, i64 %225
  %227 = ptrtoint i8* %226 to i64
  %228 = ptrtoint i8* %224 to i64
  %229 = sub i64 %227, %228
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %224, i8 0, i64 %229, i1 false) #7
  br label %230

230:                                              ; preds = %196, %220
  %231 = phi i32 [ %221, %220 ], [ %100, %196 ]
  %232 = phi i64 [ %222, %220 ], [ %101, %196 ]
  %233 = icmp eq i64 %193, 0
  br i1 %233, label %237, label %234

234:                                              ; preds = %230
  %235 = inttoptr i64 %232 to i8*
  %236 = tail call i64 @_ZNK10SkTypeface12getTableDataEjmmPv(%class.SkTypeface* %187, i32 1986553185, i64 0, i64 %193, i8* %235) #7
  br label %237

237:                                              ; preds = %230, %234
  br i1 %188, label %248, label %238

238:                                              ; preds = %237
  %239 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %187, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %240 = atomicrmw add i32* %239, i32 -1 acq_rel
  %241 = icmp eq i32 %240, 1
  br i1 %241, label %242, label %248

242:                                              ; preds = %238
  %243 = bitcast %class.SkTypeface* %187 to %class.SkRefCntBase*
  %244 = bitcast %class.SkTypeface* %187 to void (%class.SkRefCntBase*)***
  %245 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %244, align 8
  %246 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %245, i64 2
  %247 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %246, align 8
  tail call void %247(%class.SkRefCntBase* nonnull %243) #7
  br label %248

248:                                              ; preds = %237, %238, %242
  %249 = icmp ult i32 %197, 36
  %250 = icmp eq i64 %232, 0
  %251 = or i1 %249, %250
  br i1 %251, label %624, label %261

252:                                              ; preds = %185, %252
  %253 = phi i64 [ 0, %185 ], [ %259, %252 ]
  %254 = trunc i64 %253 to i32
  %255 = getelementptr inbounds %"struct.blink::open_type::HmtxTable", %"struct.blink::open_type::HmtxTable"* %122, i64 0, i32 0, i64 %253, i32 0, i32 0
  %256 = load i16, i16* %255, align 2
  %257 = tail call i16 @llvm.bswap.i16(i16 %256) #7
  %258 = tail call dereferenceable(2) i16* @_ZN3WTF6VectorItLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %126, i32 %254) #7
  store i16 %257, i16* %258, align 2
  %259 = add nuw nsw i64 %253, 1
  %260 = icmp ult i64 %259, %118
  br i1 %260, label %252, label %186

261:                                              ; preds = %248
  %262 = inttoptr i64 %232 to %"struct.blink::open_type::VheaTable"*
  %263 = getelementptr inbounds %"struct.blink::open_type::VheaTable", %"struct.blink::open_type::VheaTable"* %262, i64 0, i32 13, i32 0
  %264 = load i16, i16* %263, align 2
  %265 = tail call i16 @llvm.bswap.i16(i16 %264) #7
  %266 = icmp eq i16 %264, 0
  br i1 %266, label %627, label %267

267:                                              ; preds = %261
  %268 = load %class.SkTypeface*, %class.SkTypeface** %4, align 8
  %269 = icmp eq %class.SkTypeface* %268, null
  br i1 %269, label %273, label %270

270:                                              ; preds = %267
  %271 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %268, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %272 = atomicrmw add i32* %271, i32 1 monotonic
  br label %273

273:                                              ; preds = %267, %270
  %274 = tail call i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface* %268, i32 1448038983) #7
  %275 = icmp ult i64 %274, 4294967296
  br i1 %275, label %277, label %276, !prof !2

276:                                              ; preds = %273
  tail call void @llvm.trap() #7
  unreachable

277:                                              ; preds = %273
  %278 = trunc i64 %274 to i32
  %279 = icmp ult i32 %197, %278
  br i1 %279, label %280, label %313

280:                                              ; preds = %277
  %281 = icmp ult i32 %231, %278
  br i1 %281, label %282, label %302

282:                                              ; preds = %280
  %283 = lshr i32 %231, 2
  %284 = add nuw i32 %231, 1
  %285 = add i32 %284, %283
  %286 = icmp ugt i32 %285, 4
  %287 = select i1 %286, i32 %285, i32 4
  %288 = icmp ugt i32 %287, %278
  %289 = select i1 %288, i32 %287, i32 %278
  %290 = icmp ult i32 %231, %289
  br i1 %290, label %291, label %302, !prof !2

291:                                              ; preds = %282
  %292 = inttoptr i64 %232 to i8*
  %293 = zext i32 %289 to i64
  %294 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %293) #7
  %295 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %294) #7
  %296 = ptrtoint i8* %295 to i64
  %297 = icmp eq i8* %295, null
  br i1 %297, label %300, label %298, !prof !3

298:                                              ; preds = %291
  %299 = and i64 %193, 4294967295
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %295, i8* nonnull align 1 %292, i64 %299, i1 false) #7
  br label %300

300:                                              ; preds = %291, %298
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %292) #7
  %301 = trunc i64 %294 to i32
  br label %302

302:                                              ; preds = %300, %282, %280
  %303 = phi i32 [ %301, %300 ], [ %231, %282 ], [ %231, %280 ]
  %304 = phi i64 [ %296, %300 ], [ %232, %282 ], [ %232, %280 ]
  %305 = inttoptr i64 %304 to i8*
  %306 = and i64 %193, 4294967295
  %307 = getelementptr inbounds i8, i8* %305, i64 %306
  %308 = and i64 %274, 4294967295
  %309 = getelementptr inbounds i8, i8* %305, i64 %308
  %310 = ptrtoint i8* %309 to i64
  %311 = ptrtoint i8* %307 to i64
  %312 = sub i64 %310, %311
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %307, i8 0, i64 %312, i1 false) #7
  br label %313

313:                                              ; preds = %277, %302
  %314 = phi i32 [ %303, %302 ], [ %231, %277 ]
  %315 = phi i64 [ %304, %302 ], [ %232, %277 ]
  %316 = icmp eq i64 %274, 0
  br i1 %316, label %320, label %317

317:                                              ; preds = %313
  %318 = inttoptr i64 %315 to i8*
  %319 = tail call i64 @_ZNK10SkTypeface12getTableDataEjmmPv(%class.SkTypeface* %268, i32 1448038983, i64 0, i64 %274, i8* %318) #7
  br label %320

320:                                              ; preds = %313, %317
  br i1 %269, label %331, label %321

321:                                              ; preds = %320
  %322 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %268, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %323 = atomicrmw add i32* %322, i32 -1 acq_rel
  %324 = icmp eq i32 %323, 1
  br i1 %324, label %325, label %331

325:                                              ; preds = %321
  %326 = bitcast %class.SkTypeface* %268 to %class.SkRefCntBase*
  %327 = bitcast %class.SkTypeface* %268 to void (%class.SkRefCntBase*)***
  %328 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %327, align 8
  %329 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %328, i64 2
  %330 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %329, align 8
  tail call void %330(%class.SkRefCntBase* nonnull %326) #7
  br label %331

331:                                              ; preds = %320, %321, %325
  %332 = icmp ult i32 %278, 12
  %333 = inttoptr i64 %315 to %"struct.blink::open_type::VORGTable"*
  %334 = icmp eq i64 %315, 0
  %335 = or i1 %332, %334
  br i1 %335, label %385, label %336

336:                                              ; preds = %331
  %337 = and i64 %274, 4294967295
  %338 = getelementptr inbounds %"struct.blink::open_type::VORGTable", %"struct.blink::open_type::VORGTable"* %333, i64 0, i32 3, i32 0
  %339 = load i16, i16* %338, align 2
  %340 = tail call i16 @llvm.bswap.i16(i16 %339) #7
  %341 = zext i16 %340 to i64
  %342 = shl nuw nsw i64 %341, 2
  %343 = add nuw nsw i64 %342, 8
  %344 = icmp ugt i64 %343, %337
  br i1 %344, label %385, label %345

345:                                              ; preds = %336
  %346 = getelementptr inbounds %"struct.blink::open_type::VORGTable", %"struct.blink::open_type::VORGTable"* %333, i64 0, i32 2, i32 0
  %347 = load i16, i16* %346, align 2
  %348 = tail call i16 @llvm.bswap.i16(i16 %347) #7
  %349 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 6
  store i16 %348, i16* %349, align 8
  %350 = load i16, i16* %338, align 2
  %351 = icmp eq i16 %350, 0
  br i1 %351, label %356, label %352

352:                                              ; preds = %345
  %353 = tail call i16 @llvm.bswap.i16(i16 %350) #7
  %354 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 8, i32 0
  %355 = zext i16 %353 to i64
  br label %368

356:                                              ; preds = %345
  %357 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %357) #7
  store i32 0, i32* %3, align 4
  %358 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 8, i32 0
  %359 = call { %"struct.WTF::KeyValuePair.11"*, i8 } @_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISA_S5_SB_EEiRsEENS_18HashTableAddResultISC_S2_EEOT0_OT1_(%"class.WTF::HashTable.8"* %358, i32* nonnull dereferenceable(4) %3, i16* dereferenceable(2) %349) #7
  %360 = extractvalue { %"struct.WTF::KeyValuePair.11"*, i8 } %359, 1
  %361 = and i8 %360, 1
  %362 = icmp eq i8 %361, 0
  br i1 %362, label %363, label %367

363:                                              ; preds = %356
  %364 = extractvalue { %"struct.WTF::KeyValuePair.11"*, i8 } %359, 0
  %365 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %364, i64 0, i32 1
  %366 = load i16, i16* %349, align 2
  store i16 %366, i16* %365, align 2
  br label %367

367:                                              ; preds = %356, %363
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %357) #7
  br label %385

368:                                              ; preds = %352, %382
  %369 = phi i64 [ 0, %352 ], [ %383, %382 ]
  %370 = getelementptr inbounds %"struct.blink::open_type::VORGTable", %"struct.blink::open_type::VORGTable"* %333, i64 0, i32 4, i64 %369, i32 0
  %371 = getelementptr inbounds %"struct.blink::open_type::VORGTable", %"struct.blink::open_type::VORGTable"* %333, i64 0, i32 4, i64 %369, i32 1
  %372 = tail call { %"struct.WTF::KeyValuePair.11"*, i8 } @_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISA_S5_SB_EERKN5blink9open_type6UInt16ERKNSH_5Int16EEENS_18HashTableAddResultISC_S2_EEOT0_OT1_(%"class.WTF::HashTable.8"* %354, %"struct.blink::open_type::UInt16"* dereferenceable(2) %370, %"struct.blink::open_type::Int16"* dereferenceable(2) %371) #7
  %373 = extractvalue { %"struct.WTF::KeyValuePair.11"*, i8 } %372, 1
  %374 = and i8 %373, 1
  %375 = icmp eq i8 %374, 0
  br i1 %375, label %376, label %382

376:                                              ; preds = %368
  %377 = extractvalue { %"struct.WTF::KeyValuePair.11"*, i8 } %372, 0
  %378 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %377, i64 0, i32 1
  %379 = getelementptr inbounds %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16"* %371, i64 0, i32 0
  %380 = load i16, i16* %379, align 2
  %381 = tail call i16 @llvm.bswap.i16(i16 %380) #7
  store i16 %381, i16* %378, align 2
  br label %382

382:                                              ; preds = %368, %376
  %383 = add nuw nsw i64 %369, 1
  %384 = icmp ult i64 %383, %355
  br i1 %384, label %368, label %385

385:                                              ; preds = %382, %367, %336, %331
  %386 = load %class.SkTypeface*, %class.SkTypeface** %4, align 8
  %387 = icmp eq %class.SkTypeface* %386, null
  br i1 %387, label %391, label %388

388:                                              ; preds = %385
  %389 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %386, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %390 = atomicrmw add i32* %389, i32 1 monotonic
  br label %391

391:                                              ; preds = %385, %388
  %392 = call i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface* %386, i32 1986884728) #7
  %393 = icmp ult i64 %392, 4294967296
  br i1 %393, label %395, label %394, !prof !2

394:                                              ; preds = %391
  call void @llvm.trap() #7
  unreachable

395:                                              ; preds = %391
  %396 = trunc i64 %392 to i32
  %397 = icmp ult i32 %278, %396
  br i1 %397, label %398, label %430

398:                                              ; preds = %395
  %399 = icmp ult i32 %314, %396
  br i1 %399, label %400, label %420

400:                                              ; preds = %398
  %401 = lshr i32 %314, 2
  %402 = add nuw i32 %314, 1
  %403 = add i32 %402, %401
  %404 = icmp ugt i32 %403, 4
  %405 = select i1 %404, i32 %403, i32 4
  %406 = icmp ugt i32 %405, %396
  %407 = select i1 %406, i32 %405, i32 %396
  %408 = icmp ult i32 %314, %407
  br i1 %408, label %409, label %420, !prof !2

409:                                              ; preds = %400
  %410 = inttoptr i64 %315 to i8*
  %411 = zext i32 %407 to i64
  %412 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %411) #7
  %413 = call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %412) #7
  %414 = ptrtoint i8* %413 to i64
  br i1 %334, label %420, label %415

415:                                              ; preds = %409
  %416 = icmp eq i8* %413, null
  br i1 %416, label %419, label %417, !prof !3

417:                                              ; preds = %415
  %418 = and i64 %274, 4294967295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %413, i8* nonnull align 1 %410, i64 %418, i1 false) #7
  br label %419

419:                                              ; preds = %415, %417
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %410) #7
  br label %420

420:                                              ; preds = %409, %419, %400, %398
  %421 = phi i64 [ %414, %419 ], [ %315, %400 ], [ %315, %398 ], [ %414, %409 ]
  %422 = inttoptr i64 %421 to i8*
  %423 = and i64 %274, 4294967295
  %424 = getelementptr inbounds i8, i8* %422, i64 %423
  %425 = and i64 %392, 4294967295
  %426 = getelementptr inbounds i8, i8* %422, i64 %425
  %427 = ptrtoint i8* %426 to i64
  %428 = ptrtoint i8* %424 to i64
  %429 = sub i64 %427, %428
  call void @llvm.memset.p0i8.i64(i8* align 1 %424, i8 0, i64 %429, i1 false) #7
  br label %430

430:                                              ; preds = %395, %420
  %431 = phi i64 [ %421, %420 ], [ %315, %395 ]
  %432 = icmp eq i64 %392, 0
  br i1 %432, label %436, label %433

433:                                              ; preds = %430
  %434 = inttoptr i64 %431 to i8*
  %435 = call i64 @_ZNK10SkTypeface12getTableDataEjmmPv(%class.SkTypeface* %386, i32 1986884728, i64 0, i64 %392, i8* %434) #7
  br label %436

436:                                              ; preds = %430, %433
  br i1 %387, label %447, label %437

437:                                              ; preds = %436
  %438 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %386, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %439 = atomicrmw add i32* %438, i32 -1 acq_rel
  %440 = icmp eq i32 %439, 1
  br i1 %440, label %441, label %447

441:                                              ; preds = %437
  %442 = bitcast %class.SkTypeface* %386 to %class.SkRefCntBase*
  %443 = bitcast %class.SkTypeface* %386 to void (%class.SkRefCntBase*)***
  %444 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %443, align 8
  %445 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %444, i64 2
  %446 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %445, align 8
  call void %446(%class.SkRefCntBase* nonnull %442) #7
  br label %447

447:                                              ; preds = %436, %437, %441
  %448 = zext i16 %265 to i64
  %449 = and i64 %392, 4294967295
  %450 = shl nuw nsw i64 %448, 2
  %451 = icmp ugt i64 %450, %449
  %452 = inttoptr i64 %431 to %"struct.blink::open_type::VmtxTable"*
  %453 = icmp eq i64 %431, 0
  %454 = or i1 %451, %453
  br i1 %454, label %624, label %455

455:                                              ; preds = %447
  %456 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 4
  %457 = zext i16 %265 to i32
  %458 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %459 = load i32, i32* %458, align 4
  %460 = icmp ult i32 %459, %457
  br i1 %460, label %461, label %515

461:                                              ; preds = %455
  %462 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %463 = load i32, i32* %462, align 8
  %464 = icmp ult i32 %463, %457
  br i1 %464, label %465, label %504

465:                                              ; preds = %461
  %466 = lshr i32 %463, 2
  %467 = add nuw i32 %463, 1
  %468 = add i32 %467, %466
  %469 = icmp ugt i32 %468, 4
  %470 = select i1 %469, i32 %468, i32 4
  %471 = icmp ugt i32 %470, %457
  %472 = select i1 %471, i32 %470, i32 %457
  %473 = icmp ult i32 %463, %472
  br i1 %473, label %474, label %504, !prof !2

474:                                              ; preds = %465
  %475 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %456, i64 0, i32 0, i32 0, i32 0
  %476 = load i16*, i16** %475, align 8
  %477 = icmp eq i16* %476, null
  %478 = zext i32 %472 to i64
  %479 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeItEEmm(i64 %478) #7
  %480 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %479, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameItEEPKcv, i64 0, i64 0)) #7
  br i1 %477, label %481, label %486

481:                                              ; preds = %474
  %482 = ptrtoint i8* %480 to i64
  %483 = bitcast %"class.WTF::Vector"* %456 to i64*
  store atomic i64 %482, i64* %483 monotonic, align 8
  %484 = lshr i64 %479, 1
  %485 = trunc i64 %484 to i32
  store i32 %485, i32* %462, align 8
  br label %504

486:                                              ; preds = %474
  %487 = lshr i64 %479, 1
  %488 = ptrtoint i8* %480 to i64
  %489 = load i16*, i16** %475, align 8
  %490 = icmp ne i8* %480, null
  %491 = icmp ne i16* %489, null
  %492 = and i1 %490, %491
  %493 = bitcast i16* %489 to i8*
  br i1 %492, label %494, label %500, !prof !2

494:                                              ; preds = %486
  %495 = load i32, i32* %458, align 4
  %496 = zext i32 %495 to i64
  %497 = shl nuw nsw i64 %496, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %480, i8* nonnull align 2 %493, i64 %497, i1 false) #7
  %498 = bitcast %"class.WTF::Vector"* %456 to i8**
  %499 = load i8*, i8** %498, align 8
  br label %500

500:                                              ; preds = %494, %486
  %501 = phi i8* [ %499, %494 ], [ %493, %486 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %501) #7
  %502 = bitcast %"class.WTF::Vector"* %456 to i64*
  store atomic i64 %488, i64* %502 monotonic, align 8
  %503 = trunc i64 %487 to i32
  store i32 %503, i32* %462, align 8
  br label %504

504:                                              ; preds = %500, %481, %465, %461
  %505 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %456, i64 0, i32 0, i32 0, i32 0
  %506 = load i16*, i16** %505, align 8
  %507 = load i32, i32* %458, align 4
  %508 = zext i32 %507 to i64
  %509 = getelementptr inbounds i16, i16* %506, i64 %508
  %510 = getelementptr inbounds i16, i16* %506, i64 %448
  %511 = bitcast i16* %509 to i8*
  %512 = ptrtoint i16* %510 to i64
  %513 = ptrtoint i16* %509 to i64
  %514 = sub i64 %512, %513
  call void @llvm.memset.p0i8.i64(i8* align 2 %511, i8 0, i64 %514, i1 false) #7
  br label %515

515:                                              ; preds = %504, %455
  store i32 %457, i32* %458, align 4
  br label %520

516:                                              ; preds = %520
  %517 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 8, i32 0, i32 2
  %518 = load i32, i32* %517, align 4
  %519 = icmp eq i32 %518, 0
  br i1 %519, label %529, label %624

520:                                              ; preds = %515, %520
  %521 = phi i64 [ 0, %515 ], [ %527, %520 ]
  %522 = trunc i64 %521 to i32
  %523 = getelementptr inbounds %"struct.blink::open_type::VmtxTable", %"struct.blink::open_type::VmtxTable"* %452, i64 0, i32 0, i64 %521, i32 0, i32 0
  %524 = load i16, i16* %523, align 2
  %525 = call i16 @llvm.bswap.i16(i16 %524) #7
  %526 = call dereferenceable(2) i16* @_ZN3WTF6VectorItLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %456, i32 %522) #7
  store i16 %525, i16* %526, align 2
  %527 = add nuw nsw i64 %521, 1
  %528 = icmp ult i64 %527, %448
  br i1 %528, label %520, label %516

529:                                              ; preds = %516
  %530 = shl nuw nsw i32 %457, 2
  %531 = sub i32 %396, %530
  %532 = zext i32 %531 to i64
  %533 = and i64 %532, 1
  %534 = icmp eq i64 %533, 0
  br i1 %534, label %535, label %624

535:                                              ; preds = %529
  %536 = lshr i64 %532, 1
  %537 = add nuw nsw i64 %536, %448
  %538 = trunc i64 %537 to i32
  %539 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 5
  %540 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 5, i32 0, i32 0, i32 2
  %541 = load i32, i32* %540, align 4
  %542 = icmp ult i32 %541, %538
  br i1 %542, label %543, label %597

543:                                              ; preds = %535
  %544 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %545 = load i32, i32* %544, align 8
  %546 = icmp ult i32 %545, %538
  br i1 %546, label %547, label %586

547:                                              ; preds = %543
  %548 = lshr i32 %545, 2
  %549 = add nuw i32 %545, 1
  %550 = add i32 %549, %548
  %551 = icmp ugt i32 %550, 4
  %552 = select i1 %551, i32 %550, i32 4
  %553 = icmp ugt i32 %552, %538
  %554 = select i1 %553, i32 %552, i32 %538
  %555 = icmp ult i32 %545, %554
  br i1 %555, label %556, label %586, !prof !2

556:                                              ; preds = %547
  %557 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %539, i64 0, i32 0, i32 0, i32 0
  %558 = load i16*, i16** %557, align 8
  %559 = icmp eq i16* %558, null
  %560 = zext i32 %554 to i64
  %561 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIsEEmm(i64 %560) #7
  %562 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %561, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIsEEPKcv, i64 0, i64 0)) #7
  br i1 %559, label %563, label %568

563:                                              ; preds = %556
  %564 = ptrtoint i8* %562 to i64
  %565 = bitcast %"class.WTF::Vector.2"* %539 to i64*
  store atomic i64 %564, i64* %565 monotonic, align 8
  %566 = lshr i64 %561, 1
  %567 = trunc i64 %566 to i32
  store i32 %567, i32* %544, align 8
  br label %586

568:                                              ; preds = %556
  %569 = lshr i64 %561, 1
  %570 = ptrtoint i8* %562 to i64
  %571 = load i16*, i16** %557, align 8
  %572 = icmp ne i8* %562, null
  %573 = icmp ne i16* %571, null
  %574 = and i1 %572, %573
  %575 = bitcast i16* %571 to i8*
  br i1 %574, label %576, label %582, !prof !2

576:                                              ; preds = %568
  %577 = load i32, i32* %540, align 4
  %578 = zext i32 %577 to i64
  %579 = shl nuw nsw i64 %578, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %562, i8* nonnull align 2 %575, i64 %579, i1 false) #7
  %580 = bitcast %"class.WTF::Vector.2"* %539 to i8**
  %581 = load i8*, i8** %580, align 8
  br label %582

582:                                              ; preds = %576, %568
  %583 = phi i8* [ %581, %576 ], [ %575, %568 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %583) #7
  %584 = bitcast %"class.WTF::Vector.2"* %539 to i64*
  store atomic i64 %570, i64* %584 monotonic, align 8
  %585 = trunc i64 %569 to i32
  store i32 %585, i32* %544, align 8
  br label %586

586:                                              ; preds = %582, %563, %547, %543
  %587 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %539, i64 0, i32 0, i32 0, i32 0
  %588 = load i16*, i16** %587, align 8
  %589 = load i32, i32* %540, align 4
  %590 = zext i32 %589 to i64
  %591 = getelementptr inbounds i16, i16* %588, i64 %590
  %592 = getelementptr inbounds i16, i16* %588, i64 %537
  %593 = bitcast i16* %591 to i8*
  %594 = ptrtoint i16* %592 to i64
  %595 = ptrtoint i16* %591 to i64
  %596 = sub i64 %594, %595
  call void @llvm.memset.p0i8.i64(i8* align 2 %593, i8 0, i64 %596, i1 false) #7
  br label %597

597:                                              ; preds = %586, %535
  store i32 %538, i32* %540, align 4
  %598 = zext i16 %265 to i64
  br label %599

599:                                              ; preds = %597, %599
  %600 = phi i64 [ 0, %597 ], [ %606, %599 ]
  %601 = getelementptr inbounds %"struct.blink::open_type::VmtxTable", %"struct.blink::open_type::VmtxTable"* %452, i64 0, i32 0, i64 %600, i32 1, i32 0
  %602 = load i16, i16* %601, align 2
  %603 = call i16 @llvm.bswap.i16(i16 %602) #7
  %604 = trunc i64 %600 to i32
  %605 = call dereferenceable(2) i16* @_ZN3WTF6VectorIsLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.2"* %539, i32 %604) #7
  store i16 %603, i16* %605, align 2
  %606 = add nuw nsw i64 %600, 1
  %607 = icmp ult i64 %606, %598
  br i1 %607, label %599, label %608

608:                                              ; preds = %599
  %609 = trunc i64 %606 to i32
  %610 = icmp ult i32 %609, %538
  br i1 %610, label %611, label %624

611:                                              ; preds = %608
  %612 = getelementptr inbounds %"struct.blink::open_type::VmtxTable", %"struct.blink::open_type::VmtxTable"* %452, i64 0, i32 0, i64 %448
  %613 = bitcast %"struct.blink::open_type::VmtxTable::Entry"* %612 to %"struct.blink::open_type::Int16"*
  br label %614

614:                                              ; preds = %614, %611
  %615 = phi %"struct.blink::open_type::Int16"* [ %613, %611 ], [ %622, %614 ]
  %616 = phi i32 [ %609, %611 ], [ %621, %614 ]
  %617 = getelementptr inbounds %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16"* %615, i64 0, i32 0
  %618 = load i16, i16* %617, align 2
  %619 = call i16 @llvm.bswap.i16(i16 %618) #7
  %620 = call dereferenceable(2) i16* @_ZN3WTF6VectorIsLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.2"* %539, i32 %616) #7
  store i16 %619, i16* %620, align 2
  %621 = add nuw i32 %616, 1
  %622 = getelementptr inbounds %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16"* %615, i64 1
  %623 = icmp eq i32 %621, %538
  br i1 %623, label %624, label %614

624:                                              ; preds = %614, %516, %248, %447, %608, %529, %117, %43
  %625 = phi i64 [ %27, %43 ], [ %101, %117 ], [ %232, %248 ], [ %431, %447 ], [ %431, %516 ], [ %431, %608 ], [ %431, %529 ], [ %431, %614 ]
  %626 = icmp eq i64 %625, 0
  br i1 %626, label %630, label %627, !prof !2

627:                                              ; preds = %261, %47, %624
  %628 = phi i64 [ %625, %624 ], [ %232, %261 ], [ %27, %47 ]
  %629 = inttoptr i64 %628 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %629) #7
  br label %630

630:                                              ; preds = %624, %627
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink20OpenTypeVerticalData26SetScaleAndFallbackMetricsEffi(%"class.blink::OpenTypeVerticalData"* nocapture, float, float, i32) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 9
  store float %1, float* %5, align 8
  %6 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 10
  store float %2, float* %6, align 4
  %7 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 11
  store i32 %3, i32* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink20OpenTypeVerticalData13AdvanceHeightEt(%"class.blink::OpenTypeVerticalData"*, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 4
  %8 = zext i16 %1 to i32
  %9 = icmp ugt i32 %4, %8
  %10 = add i32 %4, -1
  %11 = select i1 %9, i32 %8, i32 %10
  %12 = tail call dereferenceable(2) i16* @_ZNK3WTF6VectorItLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %7, i32 %11) #7
  %13 = load i16, i16* %12, align 2
  %14 = uitofp i16 %13 to float
  %15 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 9
  %16 = load float, float* %15, align 8
  %17 = fmul float %16, %14
  br label %22

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 11
  %20 = load i32, i32* %19, align 8
  %21 = sitofp i32 %20 to float
  br label %22

22:                                               ; preds = %18, %6
  %23 = phi float [ %17, %6 ], [ %21, %18 ]
  ret float %23
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink20OpenTypeVerticalData32GetVerticalTranslationsForGlyphsERK6SkFontPKtmPf(%"class.blink::OpenTypeVerticalData"*, %class.SkFont* dereferenceable(24), i16* nocapture readonly, i64, float*) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.SkRect, align 4
  %7 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 3
  %8 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 8, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 5
  %14 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 5, i32 0, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = shl i64 %3, 1
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = icmp eq i64 %16, 0
  br i1 %18, label %31, label %19

19:                                               ; preds = %5
  %20 = add i32 %9, -1
  %21 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 9
  %22 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 8, i32 0, i32 0
  %23 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 8, i32 0, i32 1
  %24 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 6
  %25 = icmp eq i32 %15, 0
  %26 = add i32 %15, -1
  %27 = bitcast %struct.SkRect* %6 to i8*
  %28 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %6, i64 0, i32 1
  %29 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %0, i64 0, i32 10
  %30 = bitcast %struct.SkRect* %6 to i8*
  br label %32

31:                                               ; preds = %144, %5
  ret void

32:                                               ; preds = %19, %144
  %33 = phi i16* [ %2, %19 ], [ %146, %144 ]
  %34 = phi float* [ %4, %19 ], [ %147, %144 ]
  %35 = phi float [ 0x7FF8000000000000, %19 ], [ %145, %144 ]
  %36 = load i16, i16* %33, align 2
  %37 = zext i16 %36 to i32
  %38 = icmp ugt i32 %9, %37
  %39 = select i1 %38, i32 %37, i32 %20
  %40 = call dereferenceable(2) i16* @_ZNK3WTF6VectorItLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %7, i32 %39) #7
  %41 = load i16, i16* %40, align 2
  %42 = uitofp i16 %41 to float
  %43 = load float, float* %21, align 8
  %44 = fmul float %43, %42
  %45 = fmul float %44, -5.000000e-01
  store float %45, float* %34, align 4
  br i1 %12, label %128, label %46

46:                                               ; preds = %32
  %47 = icmp eq i16 %36, 0
  br i1 %47, label %116, label %48

48:                                               ; preds = %46
  %49 = load %"struct.WTF::KeyValuePair.11"*, %"struct.WTF::KeyValuePair.11"** %22, align 8
  %50 = icmp eq %"struct.WTF::KeyValuePair.11"* %49, null
  br i1 %50, label %116, label %51

51:                                               ; preds = %48
  %52 = load i32, i32* %23, align 8
  %53 = add i32 %52, -1
  %54 = zext i32 %53 to i64
  %55 = shl nuw nsw i32 %37, 15
  %56 = xor i32 %55, -1
  %57 = add nsw i32 %56, %37
  %58 = lshr i32 %57, 10
  %59 = xor i32 %58, %57
  %60 = mul i32 %59, 9
  %61 = lshr i32 %60, 6
  %62 = xor i32 %61, %60
  %63 = shl i32 %62, 11
  %64 = xor i32 %63, -1
  %65 = add i32 %62, %64
  %66 = lshr i32 %65, 16
  %67 = xor i32 %66, %65
  %68 = and i32 %53, %67
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %49, i64 %69
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %70, i64 0, i32 0
  %72 = load i16, i16* %71, align 2
  %73 = icmp eq i16 %72, %36
  br i1 %73, label %102, label %74

74:                                               ; preds = %51
  %75 = xor i32 %67, -1
  %76 = lshr i32 %65, 23
  %77 = add i32 %76, %75
  %78 = shl i32 %77, 12
  %79 = xor i32 %78, %77
  %80 = lshr i32 %79, 7
  %81 = xor i32 %80, %79
  %82 = shl i32 %81, 2
  %83 = xor i32 %82, %81
  %84 = lshr i32 %83, 20
  %85 = xor i32 %84, %83
  %86 = or i32 %85, 1
  %87 = zext i32 %86 to i64
  br label %88

88:                                               ; preds = %93, %74
  %89 = phi i16 [ %72, %74 ], [ %100, %93 ]
  %90 = phi i64 [ %69, %74 ], [ %97, %93 ]
  %91 = phi i64 [ 0, %74 ], [ %95, %93 ]
  %92 = icmp eq i16 %89, 0
  br i1 %92, label %116, label %93

93:                                               ; preds = %88
  %94 = icmp eq i64 %91, 0
  %95 = select i1 %94, i64 %87, i64 %91
  %96 = add i64 %95, %90
  %97 = and i64 %96, %54
  %98 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %49, i64 %97
  %99 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %98, i64 0, i32 0
  %100 = load i16, i16* %99, align 2
  %101 = icmp eq i16 %100, %36
  br i1 %101, label %102, label %88

102:                                              ; preds = %93, %51
  %103 = phi %"struct.WTF::KeyValuePair.11"* [ %70, %51 ], [ %98, %93 ]
  %104 = icmp eq %"struct.WTF::KeyValuePair.11"* %103, null
  br i1 %104, label %116, label %105

105:                                              ; preds = %102
  %106 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %103, i64 0, i32 1
  %107 = load i16, i16* %106, align 2
  %108 = icmp eq i16 %107, 0
  br i1 %108, label %116, label %109

109:                                              ; preds = %105
  %110 = sext i16 %107 to i32
  %111 = sub nsw i32 0, %110
  %112 = sitofp i32 %111 to float
  %113 = load float, float* %21, align 8
  %114 = fmul float %113, %112
  %115 = getelementptr inbounds float, float* %34, i64 1
  store float %114, float* %115, align 4
  br label %144

116:                                              ; preds = %88, %48, %102, %105, %46
  %117 = fcmp uno float %35, 0.000000e+00
  br i1 %117, label %118, label %125

118:                                              ; preds = %116
  %119 = load i16, i16* %24, align 8
  %120 = sext i16 %119 to i32
  %121 = sub nsw i32 0, %120
  %122 = sitofp i32 %121 to float
  %123 = load float, float* %21, align 8
  %124 = fmul float %123, %122
  br label %125

125:                                              ; preds = %118, %116
  %126 = phi float [ %124, %118 ], [ %35, %116 ]
  %127 = getelementptr inbounds float, float* %34, i64 1
  store float %126, float* %127, align 4
  br label %144

128:                                              ; preds = %32
  br i1 %25, label %140, label %129

129:                                              ; preds = %128
  %130 = icmp ugt i32 %15, %37
  %131 = select i1 %130, i32 %37, i32 %26
  %132 = call dereferenceable(2) i16* @_ZNK3WTF6VectorIsLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.2"* %13, i32 %131) #7
  %133 = load i16, i16* %132, align 2
  %134 = sitofp i16 %133 to float
  %135 = load float, float* %21, align 8
  %136 = fmul float %135, %134
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %30, i8 -1, i64 16, i1 false)
  call void @_ZN5blink23SkFontGetBoundsForGlyphERK6SkFonttP6SkRect(%class.SkFont* dereferenceable(24) %1, i16 zeroext %36, %struct.SkRect* nonnull %6) #7
  %137 = load float, float* %28, align 4
  %138 = fsub float %137, %136
  %139 = getelementptr inbounds float, float* %34, i64 1
  store float %138, float* %139, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #7
  br label %144

140:                                              ; preds = %128
  %141 = load float, float* %29, align 4
  %142 = fsub float -0.000000e+00, %141
  %143 = getelementptr inbounds float, float* %34, i64 1
  store float %142, float* %143, align 4
  br label %144

144:                                              ; preds = %109, %140, %129, %125
  %145 = phi float [ %126, %125 ], [ %35, %129 ], [ %35, %140 ], [ %35, %109 ]
  %146 = getelementptr inbounds i16, i16* %33, i64 1
  %147 = getelementptr inbounds float, float* %34, i64 2
  %148 = icmp eq float* %147, %17
  br i1 %148, label %31, label %32
}

declare void @_ZN5blink23SkFontGetBoundsForGlyphERK6SkFonttP6SkRect(%class.SkFont* dereferenceable(24), i16 zeroext, %struct.SkRect*) local_unnamed_addr #3

declare i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface*, i32) local_unnamed_addr #3

declare i64 @_ZNK10SkTypeface12getTableDataEjmmPv(%class.SkTypeface*, i32, i64, i64, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #7
  ret i64 %20
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeItEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(2) i16* @_ZN3WTF6VectorItLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #7
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #7
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #7
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #7
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  ret i16* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.11"*, i8 } @_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISA_S5_SB_EEiRsEENS_18HashTableAddResultISC_S2_EEOT0_OT1_(%"class.WTF::HashTable.8"*, i32* dereferenceable(4), i16* dereferenceable(2)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.11"*, %"struct.WTF::KeyValuePair.11"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.11"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.11"* @_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.8"* %0, %"struct.WTF::KeyValuePair.11"* null)
  %9 = load %"struct.WTF::KeyValuePair.11"*, %"struct.WTF::KeyValuePair.11"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.11"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load i32, i32* %1, align 4
  %17 = and i32 %16, 65535
  %18 = shl nuw nsw i32 %17, 15
  %19 = xor i32 %18, -1
  %20 = add nsw i32 %17, %19
  %21 = lshr i32 %20, 10
  %22 = xor i32 %21, %20
  %23 = mul i32 %22, 9
  %24 = lshr i32 %23, 6
  %25 = xor i32 %24, %23
  %26 = shl i32 %25, 11
  %27 = xor i32 %26, -1
  %28 = add i32 %25, %27
  %29 = lshr i32 %28, 16
  %30 = xor i32 %29, %28
  %31 = and i32 %30, %14
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %11, i64 %32
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %33, i64 0, i32 0
  %35 = load i16, i16* %34, align 2
  %36 = icmp eq i16 %35, 0
  br i1 %36, label %81, label %37

37:                                               ; preds = %10
  %38 = trunc i32 %16 to i16
  %39 = xor i32 %30, -1
  %40 = lshr i32 %28, 23
  %41 = add i32 %40, %39
  %42 = shl i32 %41, 12
  %43 = xor i32 %42, %41
  %44 = lshr i32 %43, 7
  %45 = xor i32 %44, %43
  %46 = shl i32 %45, 2
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 20
  %49 = xor i32 %48, %47
  %50 = or i32 %49, 1
  %51 = zext i32 %50 to i64
  br label %52

52:                                               ; preds = %37, %59
  %53 = phi i16 [ %35, %37 ], [ %68, %59 ]
  %54 = phi %"struct.WTF::KeyValuePair.11"* [ %33, %37 ], [ %66, %59 ]
  %55 = phi %"struct.WTF::KeyValuePair.11"* [ null, %37 ], [ %61, %59 ]
  %56 = phi i64 [ %32, %37 ], [ %65, %59 ]
  %57 = phi i64 [ 0, %37 ], [ %63, %59 ]
  %58 = icmp eq i16 %53, %38
  br i1 %58, label %99, label %59

59:                                               ; preds = %52
  %60 = icmp eq i16 %53, -1
  %61 = select i1 %60, %"struct.WTF::KeyValuePair.11"* %54, %"struct.WTF::KeyValuePair.11"* %55
  %62 = icmp eq i64 %57, 0
  %63 = select i1 %62, i64 %51, i64 %57
  %64 = add i64 %63, %56
  %65 = and i64 %64, %15
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %11, i64 %65
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %66, i64 0, i32 0
  %68 = load i16, i16* %67, align 2
  %69 = icmp eq i16 %68, 0
  br i1 %69, label %70, label %52

70:                                               ; preds = %59
  %71 = icmp eq %"struct.WTF::KeyValuePair.11"* %61, null
  br i1 %71, label %81, label %72

72:                                               ; preds = %70
  %73 = bitcast %"struct.WTF::KeyValuePair.11"* %61 to i32*
  store i32 0, i32* %73, align 2
  %74 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 3
  %75 = load i32, i32* %74, align 8
  %76 = add i32 %75, 2147483647
  %77 = and i32 %76, 2147483647
  %78 = and i32 %75, -2147483648
  %79 = or i32 %77, %78
  store i32 %79, i32* %74, align 8
  %80 = load i32, i32* %1, align 4
  br label %81

81:                                               ; preds = %10, %70, %72
  %82 = phi i32 [ %80, %72 ], [ %16, %70 ], [ %16, %10 ]
  %83 = phi %"struct.WTF::KeyValuePair.11"* [ %61, %72 ], [ %66, %70 ], [ %33, %10 ]
  %84 = trunc i32 %82 to i16
  %85 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %83, i64 0, i32 0
  store i16 %84, i16* %85, align 2
  %86 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %83, i64 0, i32 1
  %87 = load i16, i16* %2, align 2
  store i16 %87, i16* %86, align 2
  %88 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 2
  %89 = load i32, i32* %88, align 4
  %90 = add i32 %89, 1
  store i32 %90, i32* %88, align 4
  %91 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 3
  %92 = load i32, i32* %91, align 8
  %93 = add i32 %92, %90
  %94 = shl i32 %93, 1
  %95 = load i32, i32* %12, align 8
  %96 = icmp ult i32 %94, %95
  br i1 %96, label %99, label %97

97:                                               ; preds = %81
  %98 = tail call %"struct.WTF::KeyValuePair.11"* @_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.8"* %0, %"struct.WTF::KeyValuePair.11"* %83)
  br label %99

99:                                               ; preds = %52, %81, %97
  %100 = phi i8 [ 1, %81 ], [ 1, %97 ], [ 0, %52 ]
  %101 = phi %"struct.WTF::KeyValuePair.11"* [ %83, %81 ], [ %98, %97 ], [ %54, %52 ]
  %102 = insertvalue { %"struct.WTF::KeyValuePair.11"*, i8 } undef, %"struct.WTF::KeyValuePair.11"* %101, 0
  %103 = insertvalue { %"struct.WTF::KeyValuePair.11"*, i8 } %102, i8 %100, 1
  ret { %"struct.WTF::KeyValuePair.11"*, i8 } %103
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.11"* @_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.8"*, %"struct.WTF::KeyValuePair.11"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #7
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #7
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* %22, i8* %23) #7
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.6, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #7
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #7
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #7
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 2
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairItsEEEEPKcv, i64 0, i64 0)) #7
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #7
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair.11"*
  %37 = call %"struct.WTF::KeyValuePair.11"* @_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE8RehashToEPS2_jSD_(%"class.WTF::HashTable.8"* %0, %"struct.WTF::KeyValuePair.11"* %36, i32 %32, %"struct.WTF::KeyValuePair.11"* %1) #7
  ret %"struct.WTF::KeyValuePair.11"* %37
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.11"* @_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE8RehashToEPS2_jSD_(%"class.WTF::HashTable.8"*, %"struct.WTF::KeyValuePair.11"*, i32, %"struct.WTF::KeyValuePair.11"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"struct.WTF::KeyValuePair.11"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable.8"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"struct.WTF::KeyValuePair.11"*, %"struct.WTF::KeyValuePair.11"** %9, align 8
  %17 = ptrtoint %"struct.WTF::KeyValuePair.11"* %16 to i64
  br label %31

18:                                               ; preds = %119
  %19 = bitcast %"class.WTF::HashTable.8"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %120, %18 ]
  %23 = phi %"struct.WTF::KeyValuePair.11"* [ null, %10 ], [ %123, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %26) #7
  br label %27

27:                                               ; preds = %20, %25
  %28 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, -2147483648
  store i32 %30, i32* %28, align 8
  ret %"struct.WTF::KeyValuePair.11"* %23

31:                                               ; preds = %13, %119
  %32 = phi i64 [ %17, %13 ], [ %120, %119 ]
  %33 = phi i32 [ %7, %13 ], [ %121, %119 ]
  %34 = phi %"struct.WTF::KeyValuePair.11"* [ %16, %13 ], [ %122, %119 ]
  %35 = phi %"struct.WTF::KeyValuePair.11"* [ null, %13 ], [ %123, %119 ]
  %36 = phi i32 [ 0, %13 ], [ %124, %119 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %34, i64 %37
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %38, i64 0, i32 0
  %40 = load i16, i16* %39, align 2
  %41 = add i16 %40, 1
  %42 = icmp ult i16 %41, 2
  br i1 %42, label %119, label %43

43:                                               ; preds = %31
  %44 = zext i16 %40 to i32
  %45 = shl nuw nsw i32 %44, 15
  %46 = xor i32 %45, -1
  %47 = add nsw i32 %46, %44
  %48 = lshr i32 %47, 10
  %49 = xor i32 %48, %47
  %50 = mul i32 %49, 9
  %51 = lshr i32 %50, 6
  %52 = xor i32 %51, %50
  %53 = shl i32 %52, 11
  %54 = xor i32 %53, -1
  %55 = add i32 %52, %54
  %56 = lshr i32 %55, 16
  %57 = xor i32 %56, %55
  %58 = and i32 %57, %14
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %1, i64 %59
  %61 = ptrtoint %"struct.WTF::KeyValuePair.11"* %60 to i64
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %60, i64 0, i32 0
  %63 = load i16, i16* %62, align 2
  %64 = icmp eq i16 %63, 0
  br i1 %64, label %82, label %65

65:                                               ; preds = %43
  %66 = xor i32 %57, -1
  %67 = lshr i32 %55, 23
  %68 = add i32 %67, %66
  %69 = shl i32 %68, 12
  %70 = xor i32 %69, %68
  %71 = lshr i32 %70, 7
  %72 = xor i32 %71, %70
  %73 = shl i32 %72, 2
  %74 = xor i32 %73, %72
  %75 = lshr i32 %74, 20
  %76 = xor i32 %75, %74
  %77 = or i32 %76, 1
  %78 = zext i32 %77 to i64
  br label %88

79:                                               ; preds = %95
  %80 = ptrtoint %"struct.WTF::KeyValuePair.11"* %102 to i64
  %81 = inttoptr i64 %97 to %"struct.WTF::KeyValuePair.11"*
  br label %82

82:                                               ; preds = %79, %43
  %83 = phi i64 [ %80, %79 ], [ %61, %43 ]
  %84 = phi %"struct.WTF::KeyValuePair.11"* [ %81, %79 ], [ null, %43 ]
  %85 = icmp eq %"struct.WTF::KeyValuePair.11"* %84, null
  %86 = ptrtoint %"struct.WTF::KeyValuePair.11"* %84 to i64
  %87 = select i1 %85, i64 %83, i64 %86
  br label %107

88:                                               ; preds = %95, %65
  %89 = phi i64 [ 0, %65 ], [ %97, %95 ]
  %90 = phi i16 [ %63, %65 ], [ %105, %95 ]
  %91 = phi i64 [ %61, %65 ], [ %103, %95 ]
  %92 = phi i64 [ %59, %65 ], [ %101, %95 ]
  %93 = phi i64 [ 0, %65 ], [ %99, %95 ]
  %94 = icmp eq i16 %90, %40
  br i1 %94, label %107, label %95

95:                                               ; preds = %88
  %96 = icmp eq i16 %90, -1
  %97 = select i1 %96, i64 %91, i64 %89
  %98 = icmp eq i64 %93, 0
  %99 = select i1 %98, i64 %78, i64 %93
  %100 = add i64 %99, %92
  %101 = and i64 %100, %15
  %102 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %1, i64 %101
  %103 = ptrtoint %"struct.WTF::KeyValuePair.11"* %102 to i64
  %104 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %102, i64 0, i32 0
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 0
  br i1 %106, label %79, label %88

107:                                              ; preds = %88, %82
  %108 = phi i64 [ %87, %82 ], [ %91, %88 ]
  %109 = inttoptr i64 %108 to %"struct.WTF::KeyValuePair.11"*
  %110 = bitcast %"struct.WTF::KeyValuePair.11"* %38 to i32*
  %111 = inttoptr i64 %108 to i32*
  %112 = load i32, i32* %110, align 2
  store i32 %112, i32* %111, align 2
  %113 = load %"struct.WTF::KeyValuePair.11"*, %"struct.WTF::KeyValuePair.11"** %9, align 8
  %114 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %113, i64 %37
  %115 = icmp eq %"struct.WTF::KeyValuePair.11"* %114, %3
  %116 = select i1 %115, %"struct.WTF::KeyValuePair.11"* %109, %"struct.WTF::KeyValuePair.11"* %35
  %117 = load i32, i32* %6, align 8
  %118 = ptrtoint %"struct.WTF::KeyValuePair.11"* %113 to i64
  br label %119

119:                                              ; preds = %31, %107
  %120 = phi i64 [ %32, %31 ], [ %118, %107 ]
  %121 = phi i32 [ %33, %31 ], [ %117, %107 ]
  %122 = phi %"struct.WTF::KeyValuePair.11"* [ %34, %31 ], [ %113, %107 ]
  %123 = phi %"struct.WTF::KeyValuePair.11"* [ %35, %31 ], [ %116, %107 ]
  %124 = add i32 %36, 1
  %125 = icmp eq i32 %124, %121
  br i1 %125, label %18, label %31
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.11"*, i8 } @_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISA_S5_SB_EERKN5blink9open_type6UInt16ERKNSH_5Int16EEENS_18HashTableAddResultISC_S2_EEOT0_OT1_(%"class.WTF::HashTable.8"*, %"struct.blink::open_type::UInt16"* dereferenceable(2), %"struct.blink::open_type::Int16"* dereferenceable(2)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.11"*, %"struct.WTF::KeyValuePair.11"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.11"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.11"* @_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.8"* %0, %"struct.WTF::KeyValuePair.11"* null)
  %9 = load %"struct.WTF::KeyValuePair.11"*, %"struct.WTF::KeyValuePair.11"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.11"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"struct.blink::open_type::UInt16", %"struct.blink::open_type::UInt16"* %1, i64 0, i32 0
  %17 = load i16, i16* %16, align 2
  %18 = tail call i16 @llvm.bswap.i16(i16 %17) #7
  %19 = zext i16 %18 to i32
  %20 = shl nuw nsw i32 %19, 15
  %21 = xor i32 %20, -1
  %22 = add nsw i32 %21, %19
  %23 = lshr i32 %22, 10
  %24 = xor i32 %23, %22
  %25 = mul i32 %24, 9
  %26 = lshr i32 %25, 6
  %27 = xor i32 %26, %25
  %28 = shl i32 %27, 11
  %29 = xor i32 %28, -1
  %30 = add i32 %27, %29
  %31 = lshr i32 %30, 16
  %32 = xor i32 %31, %30
  %33 = and i32 %32, %14
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %11, i64 %34
  %36 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %35, i64 0, i32 0
  %37 = load i16, i16* %36, align 2
  %38 = icmp eq i16 %37, 0
  br i1 %38, label %83, label %39

39:                                               ; preds = %10
  %40 = xor i32 %32, -1
  %41 = lshr i32 %30, 23
  %42 = add i32 %41, %40
  %43 = shl i32 %42, 12
  %44 = xor i32 %43, %42
  %45 = lshr i32 %44, 7
  %46 = xor i32 %45, %44
  %47 = shl i32 %46, 2
  %48 = xor i32 %47, %46
  %49 = lshr i32 %48, 20
  %50 = xor i32 %49, %48
  %51 = or i32 %50, 1
  %52 = zext i32 %51 to i64
  br label %53

53:                                               ; preds = %39, %60
  %54 = phi i16 [ %37, %39 ], [ %69, %60 ]
  %55 = phi %"struct.WTF::KeyValuePair.11"* [ %35, %39 ], [ %67, %60 ]
  %56 = phi %"struct.WTF::KeyValuePair.11"* [ null, %39 ], [ %62, %60 ]
  %57 = phi i64 [ %34, %39 ], [ %66, %60 ]
  %58 = phi i64 [ 0, %39 ], [ %64, %60 ]
  %59 = icmp eq i16 %54, %18
  br i1 %59, label %102, label %60

60:                                               ; preds = %53
  %61 = icmp eq i16 %54, -1
  %62 = select i1 %61, %"struct.WTF::KeyValuePair.11"* %55, %"struct.WTF::KeyValuePair.11"* %56
  %63 = icmp eq i64 %58, 0
  %64 = select i1 %63, i64 %52, i64 %58
  %65 = add i64 %64, %57
  %66 = and i64 %65, %15
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %11, i64 %66
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %67, i64 0, i32 0
  %69 = load i16, i16* %68, align 2
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %71, label %53

71:                                               ; preds = %60
  %72 = icmp eq %"struct.WTF::KeyValuePair.11"* %62, null
  br i1 %72, label %83, label %73

73:                                               ; preds = %71
  %74 = bitcast %"struct.WTF::KeyValuePair.11"* %62 to i32*
  store i32 0, i32* %74, align 2
  %75 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 3
  %76 = load i32, i32* %75, align 8
  %77 = add i32 %76, 2147483647
  %78 = and i32 %77, 2147483647
  %79 = and i32 %76, -2147483648
  %80 = or i32 %78, %79
  store i32 %80, i32* %75, align 8
  %81 = load i16, i16* %16, align 2
  %82 = tail call i16 @llvm.bswap.i16(i16 %81) #7
  br label %83

83:                                               ; preds = %10, %71, %73
  %84 = phi i16 [ %18, %71 ], [ %82, %73 ], [ %18, %10 ]
  %85 = phi %"struct.WTF::KeyValuePair.11"* [ %67, %71 ], [ %62, %73 ], [ %35, %10 ]
  %86 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %85, i64 0, i32 0
  store i16 %84, i16* %86, align 2
  %87 = getelementptr inbounds %"struct.WTF::KeyValuePair.11", %"struct.WTF::KeyValuePair.11"* %85, i64 0, i32 1
  %88 = getelementptr inbounds %"struct.blink::open_type::Int16", %"struct.blink::open_type::Int16"* %2, i64 0, i32 0
  %89 = load i16, i16* %88, align 2
  %90 = tail call i16 @llvm.bswap.i16(i16 %89) #7
  store i16 %90, i16* %87, align 2
  %91 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 2
  %92 = load i32, i32* %91, align 4
  %93 = add i32 %92, 1
  store i32 %93, i32* %91, align 4
  %94 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 3
  %95 = load i32, i32* %94, align 8
  %96 = add i32 %95, %93
  %97 = shl i32 %96, 1
  %98 = load i32, i32* %12, align 8
  %99 = icmp ult i32 %97, %98
  br i1 %99, label %102, label %100

100:                                              ; preds = %83
  %101 = tail call %"struct.WTF::KeyValuePair.11"* @_ZN3WTF9HashTableItNS_12KeyValuePairItsEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENS7_IsEEEES8_NS_18PartitionAllocatorEE6ExpandEPS2_(%"class.WTF::HashTable.8"* %0, %"struct.WTF::KeyValuePair.11"* %85)
  br label %102

102:                                              ; preds = %53, %83, %100
  %103 = phi i8 [ 1, %83 ], [ 1, %100 ], [ 0, %53 ]
  %104 = phi %"struct.WTF::KeyValuePair.11"* [ %85, %83 ], [ %101, %100 ], [ %55, %53 ]
  %105 = insertvalue { %"struct.WTF::KeyValuePair.11"*, i8 } undef, %"struct.WTF::KeyValuePair.11"* %104, 0
  %106 = insertvalue { %"struct.WTF::KeyValuePair.11"*, i8 } %105, i8 %103, 1
  ret { %"struct.WTF::KeyValuePair.11"*, i8 } %106
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIsEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(2) i16* @_ZN3WTF6VectorIsLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.2"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #7
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #7
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #7
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #7
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  %23 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  ret i16* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(2) i16* @_ZNK3WTF6VectorItLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #7
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #7
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #7
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #7
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  ret i16* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(2) i16* @_ZNK3WTF6VectorIsLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.2"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #7
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #7
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #7
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #7
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  %23 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  ret i16* %26
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
