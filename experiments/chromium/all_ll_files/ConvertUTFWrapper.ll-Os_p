; ModuleID = '../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/ConvertUTFWrapper.cpp'
source_filename = "../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/ConvertUTFWrapper.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i16*, i16*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i16* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.std::__1::__split_buffer" = type { i16*, i16*, i16*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.2", %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.std::__1::allocator.4"* }
%"class.std::__1::allocator.4" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.llvm::SmallVectorImpl" = type { %"class.llvm::SmallVectorTemplateBase.base", [6 x i8] }
%"class.llvm::SmallVectorTemplateBase.base" = type { %"class.llvm::SmallVectorTemplateCommon.base" }
%"class.llvm::SmallVectorTemplateCommon.base" = type <{ %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion" }>
%"class.llvm::SmallVectorBase" = type { i8*, i8*, i8* }
%"struct.llvm::AlignedCharArrayUnion" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::AlignedCharArray" = type { [2 x i8] }
%"class.llvm::SmallVectorTemplateBase" = type { %"class.llvm::SmallVectorTemplateCommon.base", [6 x i8] }
%"class.std::__1::basic_string.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__rep" }
%"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__rep" = type { %union.anon.11 }
%union.anon.11 = type { %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__long" }
%"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__long" = type { i32*, i64, i64 }
%"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short" = type { [5 x i32], %struct.anon.12 }
%struct.anon.12 = type { %"struct.std::__1::__padding.13", i8 }
%"struct.std::__1::__padding.13" = type { [3 x i8] }

$_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPKtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSC_IS6_EES8_S8_ = comdat any

$_ZN4llvm23SmallVectorTemplateBaseItLb1EE9push_backERKt = comdat any

$_ZN4llvm15SmallVectorImplItE6resizeEm = comdat any

$_ZNSt3__16vectorItNS_9allocatorItEEE26__swap_out_circular_bufferERNS_14__split_bufferItRS2_EEPt = comdat any

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm17ConvertUTF8toWideEjNS_9StringRefERPcRPKh(i32, i8*, i64, i8** nocapture dereferenceable(8), i8** nocapture dereferenceable(8)) local_unnamed_addr #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i16*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32*, align 8
  switch i32 %0, label %63 [
    i32 1, label %11
    i32 2, label %24
    i32 4, label %42
  ]

11:                                               ; preds = %5
  %12 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #10
  store i8* %1, i8** %6, align 8
  %13 = getelementptr inbounds i8, i8* %1, i64 %2
  %14 = call zeroext i8 @_ZN4llvm17isLegalUTF8StringEPPKhS1_(i8** nonnull %6, i8* %13) #11
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %11
  %17 = bitcast i8** %6 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast i8** %4 to i64*
  store i64 %18, i64* %19, align 8
  br label %60

20:                                               ; preds = %11
  %21 = load i8*, i8** %3, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %21, i8* align 1 %1, i64 %2, i1 false)
  %22 = load i8*, i8** %3, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %2
  store i8* %23, i8** %3, align 8
  br label %60

24:                                               ; preds = %5
  %25 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #10
  store i8* %1, i8** %7, align 8
  %26 = bitcast i16** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #10
  %27 = bitcast i8** %3 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast i16** %8 to i64*
  store i64 %28, i64* %29, align 8
  %30 = getelementptr inbounds i8, i8* %1, i64 %2
  %31 = inttoptr i64 %28 to i16*
  %32 = getelementptr inbounds i16, i16* %31, i64 %2
  %33 = call i32 @_ZN4llvm18ConvertUTF8toUTF16EPPKhS1_PPtS3_NS_15ConversionFlagsE(i8** nonnull %7, i8* %30, i16** nonnull %8, i16* %32, i32 0) #11
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %24
  %36 = load i64, i64* %29, align 8
  store i64 %36, i64* %27, align 8
  br label %41

37:                                               ; preds = %24
  %38 = bitcast i8** %7 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast i8** %4 to i64*
  store i64 %39, i64* %40, align 8
  br label %41

41:                                               ; preds = %37, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #10
  br label %60

42:                                               ; preds = %5
  %43 = bitcast i8** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #10
  store i8* %1, i8** %9, align 8
  %44 = bitcast i32** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #10
  %45 = bitcast i8** %3 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast i32** %10 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds i8, i8* %1, i64 %2
  %49 = inttoptr i64 %46 to i32*
  %50 = getelementptr inbounds i32, i32* %49, i64 %2
  %51 = call i32 @_ZN4llvm18ConvertUTF8toUTF32EPPKhS1_PPjS3_NS_15ConversionFlagsE(i8** nonnull %9, i8* %48, i32** nonnull %10, i32* %50, i32 0) #11
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %42
  %54 = load i64, i64* %47, align 8
  store i64 %54, i64* %45, align 8
  br label %59

55:                                               ; preds = %42
  %56 = bitcast i8** %9 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast i8** %4 to i64*
  store i64 %57, i64* %58, align 8
  br label %59

59:                                               ; preds = %55, %53
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #10
  br label %60

60:                                               ; preds = %16, %20, %59, %41
  %61 = phi i8* [ %25, %41 ], [ %43, %59 ], [ %12, %20 ], [ %12, %16 ]
  %62 = phi i32 [ %33, %41 ], [ %51, %59 ], [ 0, %20 ], [ 3, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #10
  br label %63

63:                                               ; preds = %60, %5
  %64 = phi i32 [ 0, %5 ], [ %62, %60 ]
  %65 = icmp eq i32 %64, 0
  ret i1 %65
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: optsize
declare zeroext i8 @_ZN4llvm17isLegalUTF8StringEPPKhS1_(i8**, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: optsize
declare i32 @_ZN4llvm18ConvertUTF8toUTF16EPPKhS1_PPtS3_NS_15ConversionFlagsE(i8**, i8*, i16**, i16*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare i32 @_ZN4llvm18ConvertUTF8toUTF32EPPKhS1_PPjS3_NS_15ConversionFlagsE(i8**, i8*, i32**, i32*, i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm22ConvertCodePointToUTF8EjRPc(i32, i8** nocapture dereferenceable(8)) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 8
  %5 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  %6 = bitcast i32** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  store i32* %3, i32** %4, align 8
  %7 = getelementptr inbounds i32, i32* %3, i64 1
  %8 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #10
  %9 = load i8*, i8** %1, align 8
  store i8* %9, i8** %5, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 4
  %11 = call i32 @_ZN4llvm18ConvertUTF32toUTF8EPPKjS1_PPhS3_NS_15ConversionFlagsE(i32** nonnull %4, i32* %7, i8** nonnull %5, i8* %10, i32 0) #11
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %2
  %14 = bitcast i8** %5 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast i8** %1 to i64*
  store i64 %15, i64* %16, align 8
  br label %17

17:                                               ; preds = %2, %13
  %18 = phi i1 [ true, %13 ], [ false, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  ret i1 %18
}

; Function Attrs: optsize
declare i32 @_ZN4llvm18ConvertUTF32toUTF8EPPKjS1_PPhS3_NS_15ConversionFlagsE(i32**, i32*, i8**, i8*, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden zeroext i1 @_ZN4llvm21hasUTF16ByteOrderMarkENS_8ArrayRefIcEE(i8*, i64) local_unnamed_addr #3 {
  %3 = icmp ugt i64 %1, 1
  br i1 %3, label %4, label %14

4:                                                ; preds = %2
  %5 = load i8, i8* %0, align 1
  switch i8 %5, label %14 [
    i8 -1, label %6
    i8 -2, label %10
  ]

6:                                                ; preds = %4
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp eq i8 %8, -2
  ret i1 %9

10:                                               ; preds = %4
  %11 = getelementptr inbounds i8, i8* %0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, -1
  br label %14

14:                                               ; preds = %4, %10, %2
  %15 = phi i1 [ false, %2 ], [ %13, %10 ], [ false, %4 ]
  ret i1 %15
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm24convertUTF16ToUTF8StringENS_8ArrayRefIcEERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(i8*, i64, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 {
  %4 = alloca i16*, align 8
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca i8*, align 8
  %7 = and i64 %1, 1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %126

9:                                                ; preds = %3
  %10 = icmp eq i64 %1, 0
  br i1 %10, label %126, label %11

11:                                               ; preds = %9
  %12 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #10
  %13 = bitcast i16** %4 to i8**
  store i8* %0, i8** %13, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 %1
  %15 = bitcast i8* %14 to i16*
  %16 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 24, i1 false) #10
  %19 = bitcast i8* %0 to i16*
  %20 = load i16, i16* %19, align 2
  %21 = icmp eq i16 %20, -2
  br i1 %21, label %22, label %54

22:                                               ; preds = %11
  %23 = call i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPKtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"* nonnull %5, i16* null, i16* %19, i16* %15) #12
  %24 = bitcast i16** %18 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.std::__1::vector"* %5 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %25, %27
  %29 = lshr exact i64 %28, 1
  %30 = trunc i64 %29 to i32
  %31 = icmp eq i32 %30, 0
  %32 = inttoptr i64 %27 to i16*
  br i1 %31, label %37, label %33

33:                                               ; preds = %22
  %34 = and i64 %29, 4294967295
  br label %45

35:                                               ; preds = %45
  %36 = load i64, i64* %24, align 8
  br label %37

37:                                               ; preds = %35, %22
  %38 = phi i64 [ %36, %35 ], [ %25, %22 ]
  %39 = phi i16* [ %53, %35 ], [ %32, %22 ]
  store i16* %39, i16** %4, align 8
  %40 = ptrtoint i16* %39 to i64
  %41 = sub i64 %38, %40
  %42 = ashr exact i64 %41, 1
  %43 = getelementptr inbounds i16, i16* %39, i64 %42
  %44 = load i16, i16* %39, align 2
  br label %54

45:                                               ; preds = %45, %33
  %46 = phi i16* [ %32, %33 ], [ %53, %45 ]
  %47 = phi i64 [ 0, %33 ], [ %51, %45 ]
  %48 = getelementptr inbounds i16, i16* %46, i64 %47
  %49 = load i16, i16* %48, align 2
  %50 = call i16 @llvm.bswap.i16(i16 %49) #10
  store i16 %50, i16* %48, align 2
  %51 = add nuw nsw i64 %47, 1
  %52 = icmp eq i64 %51, %34
  %53 = load i16*, i16** %17, align 8
  br i1 %52, label %35, label %45

54:                                               ; preds = %37, %11
  %55 = phi i16 [ %44, %37 ], [ %20, %11 ]
  %56 = phi i16* [ %39, %37 ], [ %19, %11 ]
  %57 = phi i16* [ %43, %37 ], [ %15, %11 ]
  %58 = icmp eq i16 %55, -257
  br i1 %58, label %59, label %61

59:                                               ; preds = %54
  %60 = getelementptr inbounds i16, i16* %56, i64 1
  store i16* %60, i16** %4, align 8
  br label %61

61:                                               ; preds = %59, %54
  %62 = shl i64 %1, 2
  %63 = or i64 %62, 1
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %2, i64 %63, i8 signext 0) #11
  %64 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %65 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %66 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %65, i64 0, i32 1, i32 0
  %67 = load i8, i8* %66, align 1
  %68 = icmp slt i8 %67, 0
  br i1 %68, label %69, label %74

69:                                               ; preds = %61
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  store i8* %71, i8** %6, align 8
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  br label %78

74:                                               ; preds = %61
  %75 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %76 = bitcast i8** %6 to %"class.std::__1::basic_string"**
  store %"class.std::__1::basic_string"* %2, %"class.std::__1::basic_string"** %76, align 8
  %77 = zext i8 %67 to i64
  br label %78

78:                                               ; preds = %69, %74
  %79 = phi i8* [ %71, %69 ], [ %75, %74 ]
  %80 = phi i64 [ %73, %69 ], [ %77, %74 ]
  %81 = getelementptr inbounds i8, i8* %79, i64 %80
  %82 = call i32 @_ZN4llvm18ConvertUTF16toUTF8EPPKtS1_PPhS3_NS_15ConversionFlagsE(i16** nonnull %4, i16* %57, i8** nonnull %6, i8* %81, i32 0) #11
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %93, label %84

84:                                               ; preds = %78
  %85 = load i8, i8* %66, align 1
  %86 = icmp slt i8 %85, 0
  br i1 %86, label %87, label %91

87:                                               ; preds = %84
  %88 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  store i8 0, i8* %89, align 1
  %90 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %90, align 8
  br label %117

91:                                               ; preds = %84
  %92 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  store i8 0, i8* %92, align 1
  store i8 0, i8* %66, align 1
  br label %117

93:                                               ; preds = %78
  %94 = bitcast i8** %6 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = load i8, i8* %66, align 1
  %97 = icmp slt i8 %96, 0
  %98 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = load i8*, i8** %98, align 8
  %100 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %101 = select i1 %97, i8* %99, i8* %100
  %102 = ptrtoint i8* %101 to i64
  %103 = sub i64 %95, %102
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %2, i64 %103, i8 signext 0) #11
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %2, i8 signext 0) #11
  %104 = load i8, i8* %66, align 1
  %105 = icmp slt i8 %104, 0
  br i1 %105, label %106, label %112

106:                                              ; preds = %93
  %107 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %108 = load i64, i64* %107, align 8
  %109 = add i64 %108, -1
  store i64 %109, i64* %107, align 8
  %110 = load i8*, i8** %98, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 %109
  store i8 0, i8* %111, align 1
  br label %117

112:                                              ; preds = %93
  %113 = zext i8 %104 to i64
  %114 = add nsw i64 %113, -1
  %115 = trunc i64 %114 to i8
  store i8 %115, i8* %66, align 1
  %116 = getelementptr inbounds i8, i8* %100, i64 %114
  store i8 0, i8* %116, align 1
  br label %117

117:                                              ; preds = %112, %106, %91, %87
  %118 = phi i1 [ false, %87 ], [ false, %91 ], [ true, %106 ], [ true, %112 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64) #10
  %119 = load i16*, i16** %17, align 8
  %120 = icmp eq i16* %119, null
  br i1 %120, label %125, label %121

121:                                              ; preds = %117
  %122 = ptrtoint i16* %119 to i64
  %123 = bitcast i16** %18 to i64*
  store i64 %122, i64* %123, align 8
  %124 = bitcast i16* %119 to i8*
  call void @_ZdlPv(i8* %124) #13
  br label %125

125:                                              ; preds = %117, %121
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #10
  br label %126

126:                                              ; preds = %9, %3, %125
  %127 = phi i1 [ %118, %125 ], [ false, %3 ], [ true, %9 ]
  ret i1 %127
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i16* @_ZNSt3__16vectorItNS_9allocatorItEEE6insertIPKtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleItNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPtEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"*, i16*, i16*, i16*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"struct.std::__1::__split_buffer", align 8
  %6 = ptrtoint i16* %1 to i64
  %7 = ptrtoint i16* %3 to i64
  %8 = ptrtoint i16* %2 to i64
  %9 = sub i64 %7, %8
  %10 = ashr exact i64 %9, 1
  %11 = icmp sgt i64 %9, 0
  br i1 %11, label %12, label %145

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast i16** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %17 = load i16*, i16** %16, align 8
  %18 = ptrtoint i16* %17 to i64
  %19 = sub i64 %15, %18
  %20 = ashr exact i64 %19, 1
  %21 = icmp sgt i64 %10, %20
  br i1 %21, label %77, label %22

22:                                               ; preds = %12
  %23 = bitcast i16** %16 to i64*
  %24 = sub i64 %18, %6
  %25 = ashr exact i64 %24, 1
  %26 = icmp sgt i64 %10, %25
  br i1 %26, label %27, label %43

27:                                               ; preds = %22
  %28 = getelementptr inbounds i16, i16* %2, i64 %25
  %29 = ptrtoint i16* %28 to i64
  %30 = sub i64 %7, %29
  %31 = icmp sgt i64 %30, 0
  br i1 %31, label %32, label %38

32:                                               ; preds = %27
  %33 = lshr exact i64 %30, 1
  %34 = bitcast i16* %17 to i8*
  %35 = bitcast i16* %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %34, i8* align 2 %35, i64 %30, i1 false) #10
  %36 = getelementptr inbounds i16, i16* %17, i64 %33
  %37 = ptrtoint i16* %36 to i64
  br label %38

38:                                               ; preds = %32, %27
  %39 = phi i64 [ %37, %32 ], [ %18, %27 ]
  store i64 %39, i64* %23, align 8
  %40 = icmp sgt i64 %24, 0
  br i1 %40, label %41, label %145

41:                                               ; preds = %38
  %42 = inttoptr i64 %39 to i16*
  br label %43

43:                                               ; preds = %41, %22
  %44 = phi i64 [ %39, %41 ], [ %18, %22 ]
  %45 = phi i16* [ %42, %41 ], [ %17, %22 ]
  %46 = phi i16* [ %28, %41 ], [ %3, %22 ]
  %47 = getelementptr inbounds i16, i16* %1, i64 %10
  %48 = ptrtoint i16* %47 to i64
  %49 = sub i64 %44, %48
  %50 = ashr exact i64 %49, 1
  %51 = getelementptr inbounds i16, i16* %1, i64 %50
  %52 = icmp ult i16* %51, %17
  br i1 %52, label %63, label %55

53:                                               ; preds = %63
  %54 = ptrtoint i16* %68 to i64
  br label %55

55:                                               ; preds = %53, %43
  %56 = phi i64 [ %54, %53 ], [ %44, %43 ]
  store i64 %56, i64* %23, align 8
  %57 = icmp eq i64 %49, 0
  br i1 %57, label %70, label %58

58:                                               ; preds = %55
  %59 = sub nsw i64 0, %50
  %60 = getelementptr inbounds i16, i16* %45, i64 %59
  %61 = bitcast i16* %60 to i8*
  %62 = bitcast i16* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %61, i8* align 2 %62, i64 %49, i1 false) #10
  br label %70

63:                                               ; preds = %43, %63
  %64 = phi i16* [ %68, %63 ], [ %45, %43 ]
  %65 = phi i16* [ %67, %63 ], [ %51, %43 ]
  %66 = load i16, i16* %65, align 2
  store i16 %66, i16* %64, align 2
  %67 = getelementptr inbounds i16, i16* %65, i64 1
  %68 = getelementptr inbounds i16, i16* %64, i64 1
  %69 = icmp ult i16* %67, %17
  br i1 %69, label %63, label %53

70:                                               ; preds = %55, %58
  %71 = ptrtoint i16* %46 to i64
  %72 = sub i64 %71, %8
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %145, label %74

74:                                               ; preds = %70
  %75 = bitcast i16* %1 to i8*
  %76 = bitcast i16* %2 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %75, i8* align 2 %76, i64 %72, i1 false) #10
  br label %145

77:                                               ; preds = %12
  %78 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %78) #10
  %79 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 0
  %80 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 1
  %81 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 2
  %82 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 0, i32 0
  %83 = bitcast %"class.std::__1::vector"* %0 to i64*
  %84 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %84, i8 -86, i64 40, i1 false)
  %85 = load i64, i64* %83, align 8
  %86 = sub i64 %18, %85
  %87 = ashr exact i64 %86, 1
  %88 = add nsw i64 %87, %10
  %89 = icmp slt i64 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %77
  %91 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %91) #14
  unreachable

92:                                               ; preds = %77
  %93 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 1, i32 0
  %94 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2
  %95 = sub i64 %15, %85
  %96 = ashr exact i64 %95, 1
  %97 = icmp ult i64 %96, 4611686018427387903
  %98 = icmp ult i64 %95, %88
  %99 = select i1 %98, i64 %88, i64 %95
  %100 = select i1 %97, i64 %99, i64 9223372036854775807
  %101 = sub i64 %6, %85
  %102 = ashr exact i64 %101, 1
  store i16* null, i16** %82, align 8
  %103 = bitcast %"class.std::__1::allocator.4"** %93 to %"class.std::__1::__compressed_pair.1"**
  store %"class.std::__1::__compressed_pair.1"* %94, %"class.std::__1::__compressed_pair.1"** %103, align 8
  %104 = icmp eq i64 %100, 0
  br i1 %104, label %112, label %105

105:                                              ; preds = %92
  %106 = icmp slt i64 %100, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %105
  tail call void @abort() #14
  unreachable

108:                                              ; preds = %105
  %109 = shl i64 %100, 1
  %110 = tail call i8* @_Znwm(i64 %109) #13
  %111 = bitcast i8* %110 to i16*
  br label %112

112:                                              ; preds = %108, %92
  %113 = phi i16* [ %111, %108 ], [ null, %92 ]
  store i16* %113, i16** %79, align 8
  %114 = getelementptr inbounds i16, i16* %113, i64 %102
  store i16* %114, i16** %81, align 8
  store i16* %114, i16** %80, align 8
  %115 = getelementptr inbounds i16, i16* %113, i64 %100
  store i16* %115, i16** %82, align 8
  %116 = bitcast i16** %81 to i64*
  %117 = getelementptr inbounds i16, i16* %114, i64 %10
  br label %118

118:                                              ; preds = %112, %118
  %119 = phi i16* [ %122, %118 ], [ %114, %112 ]
  %120 = phi i16* [ %123, %118 ], [ %2, %112 ]
  %121 = load i16, i16* %120, align 2
  store i16 %121, i16* %119, align 2
  %122 = getelementptr inbounds i16, i16* %119, i64 1
  %123 = getelementptr inbounds i16, i16* %120, i64 1
  %124 = icmp eq i16* %117, %122
  br i1 %124, label %125, label %118

125:                                              ; preds = %118
  %126 = ptrtoint i16* %117 to i64
  store i64 %126, i64* %116, align 8
  %127 = call i16* @_ZNSt3__16vectorItNS_9allocatorItEEE26__swap_out_circular_bufferERNS_14__split_bufferItRS2_EEPt(%"class.std::__1::vector"* %0, %"struct.std::__1::__split_buffer"* nonnull dereferenceable(40) %5, i16* %1) #12
  %128 = load i16*, i16** %80, align 8
  %129 = load i16*, i16** %81, align 8
  %130 = icmp eq i16* %129, %128
  br i1 %130, label %139, label %131

131:                                              ; preds = %125
  %132 = ptrtoint i16* %128 to i64
  %133 = getelementptr i16, i16* %129, i64 -1
  %134 = ptrtoint i16* %133 to i64
  %135 = sub i64 %134, %132
  %136 = lshr i64 %135, 1
  %137 = xor i64 %136, -1
  %138 = getelementptr i16, i16* %129, i64 %137
  store i16* %138, i16** %81, align 8
  br label %139

139:                                              ; preds = %131, %125
  %140 = load i16*, i16** %79, align 8
  %141 = icmp eq i16* %140, null
  br i1 %141, label %144, label %142

142:                                              ; preds = %139
  %143 = bitcast i16* %140 to i8*
  call void @_ZdlPv(i8* %143) #13
  br label %144

144:                                              ; preds = %139, %142
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %78) #10
  br label %145

145:                                              ; preds = %38, %70, %74, %144, %4
  %146 = phi i16* [ %127, %144 ], [ %1, %4 ], [ %1, %74 ], [ %1, %70 ], [ %1, %38 ]
  ret i16* %146
}

; Function Attrs: optsize
declare i32 @_ZN4llvm18ConvertUTF16toUTF8EPPKtS1_PPhS3_NS_15ConversionFlagsE(i16**, i16*, i8**, i8*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm24convertUTF16ToUTF8StringENS_8ArrayRefItEERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(i16*, i64, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 {
  %4 = bitcast i16* %0 to i8*
  %5 = shl i64 %1, 1
  %6 = tail call zeroext i1 @_ZN4llvm24convertUTF16ToUTF8StringENS_8ArrayRefIcEERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(i8* %4, i64 %5, %"class.std::__1::basic_string"* dereferenceable(24) %2) #12
  ret i1 %6
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm24convertUTF8ToUTF16StringENS_9StringRefERNS_15SmallVectorImplItEE(i8*, i64, %"class.llvm::SmallVectorImpl"* dereferenceable(32)) local_unnamed_addr #0 {
  %4 = alloca i16, align 2
  %5 = alloca i8*, align 8
  %6 = alloca i16*, align 8
  %7 = alloca i16, align 2
  %8 = icmp eq i64 %1, 0
  br i1 %8, label %9, label %16

9:                                                ; preds = %3
  %10 = bitcast %"class.llvm::SmallVectorImpl"* %2 to %"class.llvm::SmallVectorTemplateBase"*
  %11 = bitcast i16* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %11) #10
  store i16 0, i16* %4, align 2
  call void @_ZN4llvm23SmallVectorTemplateBaseItLb1EE9push_backERKt(%"class.llvm::SmallVectorTemplateBase"* %10, i16* nonnull dereferenceable(2) %4) #12
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %13 = bitcast i8** %12 to i16**
  %14 = load i16*, i16** %13, align 8
  %15 = getelementptr inbounds i16, i16* %14, i64 -1
  store i16* %15, i16** %13, align 8
  br label %49

16:                                               ; preds = %3
  %17 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i8* %0, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %0, i64 %1
  %19 = add i64 %1, 1
  tail call void @_ZN4llvm15SmallVectorImplItE6resizeEm(%"class.llvm::SmallVectorImpl"* %2, i64 %19) #12
  %20 = bitcast i16** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  %21 = bitcast %"class.llvm::SmallVectorImpl"* %2 to i16**
  %22 = load i16*, i16** %21, align 8
  store i16* %22, i16** %6, align 8
  %23 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %24 = bitcast i8** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = ptrtoint i16* %22 to i64
  %27 = sub i64 %25, %26
  %28 = ashr exact i64 %27, 1
  %29 = getelementptr inbounds i16, i16* %22, i64 %28
  %30 = call i32 @_ZN4llvm18ConvertUTF8toUTF16EPPKhS1_PPtS3_NS_15ConversionFlagsE(i8** nonnull %5, i8* %18, i16** nonnull %6, i16* %29, i32 0) #11
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %16
  %33 = bitcast %"class.llvm::SmallVectorImpl"* %2 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %24, align 8
  br label %47

35:                                               ; preds = %16
  %36 = bitcast i16** %6 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %"class.llvm::SmallVectorImpl"* %2 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = sub i64 %37, %39
  %41 = ashr exact i64 %40, 1
  call void @_ZN4llvm15SmallVectorImplItE6resizeEm(%"class.llvm::SmallVectorImpl"* %2, i64 %41) #12
  %42 = bitcast %"class.llvm::SmallVectorImpl"* %2 to %"class.llvm::SmallVectorTemplateBase"*
  %43 = bitcast i16* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %43) #10
  store i16 0, i16* %7, align 2
  call void @_ZN4llvm23SmallVectorTemplateBaseItLb1EE9push_backERKt(%"class.llvm::SmallVectorTemplateBase"* %42, i16* nonnull dereferenceable(2) %7) #12
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %43) #10
  %44 = bitcast i8** %23 to i16**
  %45 = load i16*, i16** %44, align 8
  %46 = getelementptr inbounds i16, i16* %45, i64 -1
  store i16* %46, i16** %44, align 8
  br label %47

47:                                               ; preds = %35, %32
  %48 = phi i1 [ false, %32 ], [ true, %35 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %49

49:                                               ; preds = %47, %9
  %50 = phi i1 [ true, %9 ], [ %48, %47 ]
  ret i1 %50
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm23SmallVectorTemplateBaseItLb1EE9push_backERKt(%"class.llvm::SmallVectorTemplateBase"*, i16* dereferenceable(2)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %8, label %11, !prof !2

8:                                                ; preds = %2
  %9 = bitcast i8* %4 to i16*
  %10 = bitcast i8** %3 to i16**
  br label %16

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %12, i8* %13, i64 0, i64 2) #11
  %14 = bitcast i8** %3 to i16**
  %15 = load i16*, i16** %14, align 8
  br label %16

16:                                               ; preds = %8, %11
  %17 = phi i16** [ %10, %8 ], [ %14, %11 ]
  %18 = phi i16* [ %9, %8 ], [ %15, %11 ]
  %19 = load i16, i16* %1, align 2
  store i16 %19, i16* %18, align 1
  %20 = load i16*, i16** %17, align 8
  %21 = getelementptr inbounds i16, i16* %20, i64 1
  store i16* %21, i16** %17, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm15SmallVectorImplItE6resizeEm(%"class.llvm::SmallVectorImpl"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.llvm::SmallVectorImpl"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 1
  %10 = icmp ugt i64 %9, %1
  %11 = inttoptr i64 %5 to i16*
  %12 = inttoptr i64 %7 to i16*
  br i1 %10, label %13, label %15

13:                                               ; preds = %2
  %14 = bitcast i8** %3 to i16**
  br label %53

15:                                               ; preds = %2
  %16 = icmp ult i64 %9, %1
  br i1 %16, label %17, label %57

17:                                               ; preds = %15
  %18 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %19 = bitcast i8** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %7
  %22 = ashr exact i64 %21, 1
  %23 = icmp ult i64 %22, %1
  br i1 %23, label %27, label %24

24:                                               ; preds = %17
  %25 = bitcast i8** %3 to i16**
  %26 = bitcast %"class.llvm::SmallVectorImpl"* %0 to i16**
  br label %35

27:                                               ; preds = %17
  %28 = shl i64 %1, 1
  %29 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %29, i8* %30, i64 %28, i64 2) #11
  %31 = bitcast i8** %3 to i16**
  %32 = load i16*, i16** %31, align 8
  %33 = bitcast %"class.llvm::SmallVectorImpl"* %0 to i16**
  %34 = load i16*, i16** %33, align 8
  br label %35

35:                                               ; preds = %24, %27
  %36 = phi i16** [ %26, %24 ], [ %33, %27 ]
  %37 = phi i16** [ %25, %24 ], [ %31, %27 ]
  %38 = phi i16* [ %12, %24 ], [ %34, %27 ]
  %39 = phi i16* [ %11, %24 ], [ %32, %27 ]
  %40 = getelementptr inbounds i16, i16* %38, i64 %1
  %41 = icmp eq i16* %39, %40
  br i1 %41, label %51, label %42

42:                                               ; preds = %35
  %43 = bitcast i16* %39 to i8*
  %44 = ptrtoint i16* %39 to i64
  %45 = add i64 %1, -1
  %46 = getelementptr i16, i16* %38, i64 %45
  %47 = ptrtoint i16* %46 to i64
  %48 = sub i64 %47, %44
  %49 = add i64 %48, 2
  %50 = and i64 %49, -2
  call void @llvm.memset.p0i8.i64(i8* align 2 %43, i8 0, i64 %50, i1 false)
  br label %51

51:                                               ; preds = %42, %35
  %52 = load i16*, i16** %36, align 8
  br label %53

53:                                               ; preds = %13, %51
  %54 = phi i16* [ %52, %51 ], [ %12, %13 ]
  %55 = phi i16** [ %37, %51 ], [ %14, %13 ]
  %56 = getelementptr inbounds i16, i16* %54, i64 %1
  store i16* %56, i16** %55, align 8
  br label %57

57:                                               ; preds = %53, %15
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm17ConvertUTF8toWideENS_9StringRefERNSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEE(i8*, i64, %"class.std::__1::basic_string.8"* dereferenceable(24)) local_unnamed_addr #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = add i64 %1, 1
  tail call void @_ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEmw(%"class.std::__1::basic_string.8"* %2, i64 %6, i32 signext 0) #11
  %7 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #10
  %8 = bitcast %"class.std::__1::basic_string.8"* %2 to %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short", %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short"* %8, i64 0, i32 1, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  %12 = getelementptr inbounds %"class.std::__1::basic_string.8", %"class.std::__1::basic_string.8"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = bitcast %"class.std::__1::basic_string.8"* %2 to i32*
  %15 = select i1 %11, i32* %13, i32* %14
  %16 = bitcast i8** %4 to i32**
  store i32* %15, i32** %16, align 8
  %17 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %18 = call zeroext i1 @_ZN4llvm17ConvertUTF8toWideEjNS_9StringRefERPcRPKh(i32 4, i8* %0, i64 %1, i8** nonnull dereferenceable(8) %4, i8** nonnull dereferenceable(8) %5) #11
  br i1 %18, label %26, label %19

19:                                               ; preds = %3
  %20 = load i8, i8* %9, align 1
  %21 = icmp slt i8 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %19
  %23 = load i32*, i32** %12, align 8
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds %"class.std::__1::basic_string.8", %"class.std::__1::basic_string.8"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %24, align 8
  br label %36

25:                                               ; preds = %19
  store i32 0, i32* %14, align 4
  store i8 0, i8* %9, align 1
  br label %36

26:                                               ; preds = %3
  %27 = bitcast i8** %4 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = load i8, i8* %9, align 1
  %30 = icmp slt i8 %29, 0
  %31 = load i32*, i32** %12, align 8
  %32 = select i1 %30, i32* %31, i32* %14
  %33 = ptrtoint i32* %32 to i64
  %34 = sub i64 %28, %33
  %35 = ashr exact i64 %34, 2
  tail call void @_ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEmw(%"class.std::__1::basic_string.8"* %2, i64 %35, i32 signext 0) #11
  br label %36

36:                                               ; preds = %22, %25, %26
  %37 = phi i1 [ true, %26 ], [ false, %22 ], [ false, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #10
  ret i1 %37
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm17ConvertUTF8toWideEPKcRNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEE(i8*, %"class.std::__1::basic_string.8"* dereferenceable(24)) local_unnamed_addr #0 {
  %3 = icmp eq i8* %0, null
  br i1 %3, label %4, label %15

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::basic_string.8"* %1 to %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short", %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short"* %5, i64 0, i32 1, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.std::__1::basic_string.8", %"class.std::__1::basic_string.8"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i32*, i32** %10, align 8
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds %"class.std::__1::basic_string.8", %"class.std::__1::basic_string.8"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %12, align 8
  br label %18

13:                                               ; preds = %4
  %14 = bitcast %"class.std::__1::basic_string.8"* %1 to i32*
  store i32 0, i32* %14, align 4
  store i8 0, i8* %6, align 1
  br label %18

15:                                               ; preds = %2
  %16 = tail call i64 @strlen(i8* nonnull %0) #15
  %17 = tail call zeroext i1 @_ZN4llvm17ConvertUTF8toWideENS_9StringRefERNSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEE(i8* nonnull %0, i64 %16, %"class.std::__1::basic_string.8"* dereferenceable(24) %1) #12
  br label %18

18:                                               ; preds = %13, %9, %15
  %19 = phi i1 [ %17, %15 ], [ true, %9 ], [ true, %13 ]
  ret i1 %19
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm17convertWideToUTF8ERKNSt3__112basic_stringIwNS0_11char_traitsIwEENS0_9allocatorIwEEEERNS1_IcNS2_IcEENS4_IcEEEE(%"class.std::__1::basic_string.8"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 {
  %3 = alloca i32*, align 8
  %4 = alloca i8*, align 8
  %5 = bitcast i32** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  store i32* inttoptr (i64 -6148914691236517206 to i32*), i32** %3, align 8
  %6 = bitcast %"class.std::__1::basic_string.8"* %0 to %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short", %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = bitcast %"class.std::__1::basic_string.8"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast i32** %3 to i64*
  store i64 %12, i64* %13, align 8
  %14 = inttoptr i64 %12 to i32*
  %15 = getelementptr inbounds %"class.std::__1::basic_string.8", %"class.std::__1::basic_string.8"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds i32, i32* %14, i64 %16
  br label %23

18:                                               ; preds = %2
  %19 = bitcast i32** %3 to %"class.std::__1::basic_string.8"**
  store %"class.std::__1::basic_string.8"* %0, %"class.std::__1::basic_string.8"** %19, align 8
  %20 = bitcast %"class.std::__1::basic_string.8"* %0 to i32*
  %21 = zext i8 %8 to i64
  %22 = getelementptr inbounds i32, i32* %20, i64 %21
  br label %23

23:                                               ; preds = %10, %18
  %24 = phi i32* [ %17, %10 ], [ %22, %18 ]
  %25 = phi i64 [ %16, %10 ], [ %21, %18 ]
  %26 = shl i64 %25, 2
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %1, i64 %26, i8 signext 0) #11
  %27 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %28 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  %30 = load i8, i8* %29, align 1
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %39

32:                                               ; preds = %23
  %33 = bitcast %"class.std::__1::basic_string"* %1 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast i8** %4 to i64*
  store i64 %34, i64* %35, align 8
  %36 = inttoptr i64 %34 to i8*
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  br label %43

39:                                               ; preds = %23
  %40 = bitcast i8** %4 to %"class.std::__1::basic_string"**
  store %"class.std::__1::basic_string"* %1, %"class.std::__1::basic_string"** %40, align 8
  %41 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %42 = zext i8 %30 to i64
  br label %43

43:                                               ; preds = %32, %39
  %44 = phi i8* [ %36, %32 ], [ %41, %39 ]
  %45 = phi i64 [ %38, %32 ], [ %42, %39 ]
  %46 = getelementptr inbounds i8, i8* %44, i64 %45
  %47 = call i32 @_ZN4llvm18ConvertUTF32toUTF8EPPKjS1_PPhS3_NS_15ConversionFlagsE(i32** nonnull %3, i32* %24, i8** nonnull %4, i8* %46, i32 0) #11
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %60

49:                                               ; preds = %43
  %50 = bitcast i8** %4 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = load i8, i8* %29, align 1
  %53 = icmp slt i8 %52, 0
  %54 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %57 = select i1 %53, i8* %55, i8* %56
  %58 = ptrtoint i8* %57 to i64
  %59 = sub i64 %51, %58
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %1, i64 %59, i8 signext 0) #11
  br label %69

60:                                               ; preds = %43
  %61 = load i8, i8* %29, align 1
  %62 = icmp slt i8 %61, 0
  br i1 %62, label %63, label %67

63:                                               ; preds = %60
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  store i8 0, i8* %65, align 1
  %66 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %66, align 8
  br label %69

67:                                               ; preds = %60
  %68 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  store i8 0, i8* %68, align 1
  store i8 0, i8* %29, align 1
  br label %69

69:                                               ; preds = %67, %63, %49
  %70 = phi i1 [ true, %49 ], [ false, %63 ], [ false, %67 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  ret i1 %70
}

; Function Attrs: argmemonly nofree nounwind optsize readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i16* @_ZNSt3__16vectorItNS_9allocatorItEEE26__swap_out_circular_bufferERNS_14__split_bufferItRS2_EEPt(%"class.std::__1::vector"*, %"struct.std::__1::__split_buffer"* dereferenceable(40), i16*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %1, i64 0, i32 1
  %5 = load i16*, i16** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = ptrtoint i16* %2 to i64
  %9 = ptrtoint i16* %7 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 1
  %12 = sub nsw i64 0, %11
  %13 = getelementptr inbounds i16, i16* %5, i64 %12
  store i16* %13, i16** %4, align 8
  %14 = icmp sgt i64 %10, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %3
  %16 = bitcast i16* %13 to i8*
  %17 = bitcast i16* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %16, i8* align 2 %17, i64 %10, i1 false) #10
  br label %18

18:                                               ; preds = %3, %15
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %20 = load i16*, i16** %19, align 8
  %21 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %1, i64 0, i32 2
  %22 = icmp eq i16* %20, %2
  br i1 %22, label %33, label %23

23:                                               ; preds = %18
  %24 = load i16*, i16** %21, align 8
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i16* [ %31, %25 ], [ %24, %23 ]
  %27 = phi i16* [ %29, %25 ], [ %2, %23 ]
  %28 = load i16, i16* %27, align 2
  store i16 %28, i16* %26, align 2
  %29 = getelementptr inbounds i16, i16* %27, i64 1
  %30 = load i16*, i16** %21, align 8
  %31 = getelementptr inbounds i16, i16* %30, i64 1
  store i16* %31, i16** %21, align 8
  %32 = icmp eq i16* %29, %20
  br i1 %32, label %33, label %25

33:                                               ; preds = %25, %18
  %34 = bitcast %"class.std::__1::vector"* %0 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast i16** %4 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %34, align 8
  store i64 %35, i64* %36, align 8
  %38 = bitcast i16** %19 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast i16** %21 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %38, align 8
  store i64 %39, i64* %40, align 8
  %42 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %43 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %1, i64 0, i32 3, i32 0, i32 0
  %44 = bitcast i16** %42 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = bitcast i16** %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %44, align 8
  store i64 %45, i64* %46, align 8
  %48 = load i64, i64* %36, align 8
  %49 = bitcast %"struct.std::__1::__split_buffer"* %1 to i64*
  store i64 %48, i64* %49, align 8
  ret i16* %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn optsize
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind optsize
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: optsize
declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"*, i8*, i64, i64) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEmw(%"class.std::__1::basic_string.8"*, i64, i32 signext) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #9

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind optsize readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { nounwind optsize }
attributes #12 = { optsize }
attributes #13 = { builtin nounwind optsize }
attributes #14 = { noreturn nounwind optsize }
attributes #15 = { nounwind optsize readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
